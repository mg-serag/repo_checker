[
  {
    "instance_id": "outline__outline-9428",
    "pr_id": 9428,
    "issue_id": 9306,
    "repo": "outline/outline",
    "problem_statement": "403 Forbidden when adding a user to an Outline collection\n![Image](https://github.com/user-attachments/assets/98580f22-3092-4d2c-874b-f2d2c8964090)\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\n403 Forbidden when adding a user to an Outline collection\n\n### Expected Behavior\n\nAn informative message that if you don't have the permissions, you can't edit. \n\n### Steps To Reproduce\n\n1. Log in to Outline\n2. Open a collection and click “Share this collection”\n3. In the “Add or invite…” field, select an existing user\n4. Click Add\n5. Observe the “Authorization error” toast and a 403 on the API call (POST /api/collections.add_user)\n\n### Environment\n\n```markdown\n- Outline:\n- Browser:\n```\n\n### Anything else?\n\n_No response_",
    "issue_word_count": 128,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "server/routes/api/collections/collections.test.ts",
      "server/routes/api/collections/collections.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/collections/collections.test.ts"
    ],
    "base_commit": "0f4c1d7db5f30d9adabc8a3deba66903be3ed7a1",
    "head_commit": "acfd695e4f2eab62226fefc15c4891db6249e8a0",
    "repo_url": "https://github.com/outline/outline/pull/9428",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9428",
    "dockerfile": "",
    "pr_merged_at": "2025-06-11T01:24:22.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9370",
    "pr_id": 9370,
    "issue_id": 9366,
    "repo": "outline/outline",
    "problem_statement": "Migrate `Backlink` model and table to `Relationship`\nWe'd like to be able to store different types of relationships between documents other than just backlinks\n\nBacklink becomes a relationship with `type`, everything else works the same today.\n\nIn order to make deployment smooth there should be a migration to create a view from the old table name",
    "issue_word_count": 50,
    "test_files_count": 2,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "server/migrations/20250601223331-migrate-backlink-to-relationship.js",
      "server/models/Document.ts",
      "server/models/Relationship.ts",
      "server/models/index.ts",
      "server/queues/processors/BacklinksProcessor.test.ts",
      "server/queues/processors/BacklinksProcessor.ts",
      "server/routes/api/documents/documents.test.ts",
      "server/routes/api/documents/documents.ts"
    ],
    "pr_changed_test_files": [
      "server/queues/processors/BacklinksProcessor.test.ts",
      "server/routes/api/documents/documents.test.ts"
    ],
    "base_commit": "277d9fb0d92576beceb526b7cda7a17ecc107101",
    "head_commit": "5473b4a3cc623c66881691189ad32b9aa0b2e6f4",
    "repo_url": "https://github.com/outline/outline/pull/9370",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9370",
    "dockerfile": "",
    "pr_merged_at": "2025-06-07T19:50:33.000Z",
    "patch": "diff --git a/server/migrations/20250601223331-migrate-backlink-to-relationship.js b/server/migrations/20250601223331-migrate-backlink-to-relationship.js\nnew file mode 100644\nindex 000000000000..036e89a5fe1d\n--- /dev/null\n+++ b/server/migrations/20250601223331-migrate-backlink-to-relationship.js\n@@ -0,0 +1,50 @@\n+'use strict';\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up (queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async (transaction) => {\n+      // Rename the existing backlinks table to relationships\n+      await queryInterface.renameTable(\"backlinks\", \"relationships\", { transaction });\n+\n+      // Add the type column with default value\n+      await queryInterface.addColumn(\"relationships\", \"type\", {\n+        type: Sequelize.ENUM('backlink'),\n+        allowNull: false,\n+        defaultValue: 'backlink',\n+      }, { transaction });\n+\n+      // Add new indexes for performance (the old indexes on documentId and reverseDocumentId should still exist)\n+      await queryInterface.addIndex(\"relationships\", [\"type\"], { transaction });\n+      await queryInterface.addIndex(\"relationships\", [\"documentId\", \"type\"], { transaction });\n+\n+      // Create a view for backward compatibility\n+      await queryInterface.sequelize.query(`\n+        CREATE VIEW backlinks AS\n+        SELECT id, \"userId\", \"documentId\", \"reverseDocumentId\", \"createdAt\", \"updatedAt\"\n+        FROM relationships\n+        WHERE type = 'backlink';\n+      `, { transaction });\n+    });\n+  },\n+\n+  async down (queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async (transaction) => {\n+      // Drop the view\n+      await queryInterface.sequelize.query('DROP VIEW IF EXISTS backlinks;', { transaction });\n+      \n+      // Remove the type-specific indexes\n+      await queryInterface.removeIndex(\"relationships\", [\"type\"], { transaction });\n+      await queryInterface.removeIndex(\"relationships\", [\"documentId\", \"type\"], { transaction });\n+      \n+      // Remove the type column\n+      await queryInterface.removeColumn(\"relationships\", \"type\", { transaction });\n+      \n+      // Drop the enum type\n+      await queryInterface.sequelize.query('DROP TYPE IF EXISTS \"enum_relationships_type\";', { transaction });\n+      \n+      // Rename the table back to backlinks\n+      await queryInterface.renameTable(\"relationships\", \"backlinks\", { transaction });\n+    });\n+  }\n+};\n\ndiff --git a/server/models/Document.ts b/server/models/Document.ts\nindex 915f14bb6905..97a0c3808547 100644\n--- a/server/models/Document.ts\n+++ b/server/models/Document.ts\n@@ -51,13 +51,13 @@ import slugify from \"@shared/utils/slugify\";\n import { DocumentValidation } from \"@shared/validations\";\n import { ValidationError } from \"@server/errors\";\n import { generateUrlId } from \"@server/utils/url\";\n-import Backlink from \"./Backlink\";\n import Collection from \"./Collection\";\n import FileOperation from \"./FileOperation\";\n import Group from \"./Group\";\n import GroupMembership from \"./GroupMembership\";\n import GroupUser from \"./GroupUser\";\n import Import from \"./Import\";\n+import Relationship from \"./Relationship\";\n import Revision from \"./Revision\";\n import Star from \"./Star\";\n import Team from \"./Team\";\n@@ -617,8 +617,8 @@ class Document extends ArchivableModel<\n   @HasMany(() => Revision)\n   revisions: Revision[];\n \n-  @HasMany(() => Backlink)\n-  backlinks: Backlink[];\n+  @HasMany(() => Relationship)\n+  relationships: Relationship[];\n \n   @HasMany(() => Star)\n   starred: Star[];\n\ndiff --git a/server/models/Backlink.ts b/server/models/Relationship.ts\nsimilarity index 67%\nrename from server/models/Backlink.ts\nrename to server/models/Relationship.ts\nindex 346103fc5eb6..17346f18c5f7 100644\n--- a/server/models/Backlink.ts\n+++ b/server/models/Relationship.ts\n@@ -11,11 +11,15 @@ import User from \"./User\";\n import IdModel from \"./base/IdModel\";\n import Fix from \"./decorators/Fix\";\n \n-@Table({ tableName: \"backlinks\", modelName: \"backlink\" })\n+export enum RelationshipType {\n+  Backlink = \"backlink\",\n+}\n+\n+@Table({ tableName: \"relationships\", modelName: \"relationship\" })\n @Fix\n-class Backlink extends IdModel<\n-  InferAttributes<Backlink>,\n-  Partial<InferCreationAttributes<Backlink>>\n+class Relationship extends IdModel<\n+  InferAttributes<Relationship>,\n+  Partial<InferCreationAttributes<Relationship>>\n > {\n   @BelongsTo(() => User, \"userId\")\n   user: User;\n@@ -38,6 +42,13 @@ class Backlink extends IdModel<\n   @Column(DataType.UUID)\n   reverseDocumentId: string;\n \n+  @Column({\n+    type: DataType.ENUM(...Object.values(RelationshipType)),\n+    allowNull: false,\n+    defaultValue: RelationshipType.Backlink,\n+  })\n+  type: RelationshipType;\n+\n   /**\n    * Find all backlinks for a document that the user has access to\n    *\n@@ -48,15 +59,16 @@ class Backlink extends IdModel<\n     documentId: string,\n     user: User\n   ) {\n-    const backlinks = await this.findAll({\n+    const relationships = await this.findAll({\n       attributes: [\"reverseDocumentId\"],\n       where: {\n         documentId,\n+        type: RelationshipType.Backlink,\n       },\n     });\n \n     const documents = await Document.findByIds(\n-      backlinks.map((backlink) => backlink.reverseDocumentId),\n+      relationships.map((relationship) => relationship.reverseDocumentId),\n       { userId: user.id }\n     );\n \n@@ -64,4 +76,4 @@ class Backlink extends IdModel<\n   }\n }\n \n-export default Backlink;\n+export default Relationship;\n\ndiff --git a/server/models/index.ts b/server/models/index.ts\nindex 486e3c8b4f9f..457adcc6eb05 100644\n--- a/server/models/index.ts\n+++ b/server/models/index.ts\n@@ -4,7 +4,7 @@ export { default as Attachment } from \"./Attachment\";\n \n export { default as AuthenticationProvider } from \"./AuthenticationProvider\";\n \n-export { default as Backlink } from \"./Backlink\";\n+export { default as Relationship } from \"./Relationship\";\n \n export { default as Collection } from \"./Collection\";\n \n\ndiff --git a/server/queues/processors/BacklinksProcessor.ts b/server/queues/processors/BacklinksProcessor.ts\nindex f5831f958d4a..13008854a494 100644\n--- a/server/queues/processors/BacklinksProcessor.ts\n+++ b/server/queues/processors/BacklinksProcessor.ts\n@@ -1,5 +1,6 @@\n import { Op } from \"sequelize\";\n-import { Document, Backlink } from \"@server/models\";\n+import { Document, Relationship } from \"@server/models\";\n+import { RelationshipType } from \"@server/models/Relationship\";\n import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n import { Event, DocumentEvent, RevisionEvent } from \"@server/types\";\n import BaseProcessor from \"./BaseProcessor\";\n@@ -27,13 +28,15 @@ export default class BacklinksProcessor extends BaseProcessor {\n               return;\n             }\n \n-            await Backlink.findOrCreate({\n+            await Relationship.findOrCreate({\n               where: {\n                 documentId: linkedDocument.id,\n                 reverseDocumentId: event.documentId,\n+                type: RelationshipType.Backlink,\n               },\n               defaults: {\n                 userId: document.lastModifiedById,\n+                type: RelationshipType.Backlink,\n               },\n             });\n           })\n@@ -64,13 +67,15 @@ export default class BacklinksProcessor extends BaseProcessor {\n               return;\n             }\n \n-            await Backlink.findOrCreate({\n+            await Relationship.findOrCreate({\n               where: {\n                 documentId: linkedDocument.id,\n                 reverseDocumentId: event.documentId,\n+                type: RelationshipType.Backlink,\n               },\n               defaults: {\n                 userId: document.lastModifiedById,\n+                type: RelationshipType.Backlink,\n               },\n             });\n             linkedDocumentIds.push(linkedDocument.id);\n@@ -78,19 +83,20 @@ export default class BacklinksProcessor extends BaseProcessor {\n         );\n \n         // delete any backlinks that no longer exist\n-        await Backlink.destroy({\n+        await Relationship.destroy({\n           where: {\n             documentId: {\n               [Op.notIn]: linkedDocumentIds,\n             },\n             reverseDocumentId: event.documentId,\n+            type: RelationshipType.Backlink,\n           },\n         });\n         break;\n       }\n \n       case \"documents.delete\": {\n-        await Backlink.destroy({\n+        await Relationship.destroy({\n           where: {\n             [Op.or]: [\n               {\n@@ -100,6 +106,7 @@ export default class BacklinksProcessor extends BaseProcessor {\n                 documentId: event.documentId,\n               },\n             ],\n+            type: RelationshipType.Backlink,\n           },\n         });\n         break;\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 321b69803c74..60690838f2ef 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -36,7 +36,7 @@ import { transaction } from \"@server/middlewares/transaction\";\n import validate from \"@server/middlewares/validate\";\n import {\n   Attachment,\n-  Backlink,\n+  Relationship,\n   Collection,\n   Document,\n   Event,\n@@ -209,7 +209,7 @@ router.post(\n     }\n \n     if (backlinkDocumentId) {\n-      const sourceDocumentIds = await Backlink.findSourceDocumentIdsForUser(\n+      const sourceDocumentIds = await Relationship.findSourceDocumentIdsForUser(\n         backlinkDocumentId,\n         user\n       );\n",
    "test_patch": "diff --git a/server/queues/processors/BacklinksProcessor.test.ts b/server/queues/processors/BacklinksProcessor.test.ts\nindex fff2e5e3eefe..b842f4b8bf51 100644\n--- a/server/queues/processors/BacklinksProcessor.test.ts\n+++ b/server/queues/processors/BacklinksProcessor.test.ts\n@@ -1,6 +1,8 @@\n import { parser } from \"@server/editor\";\n-import { Backlink } from \"@server/models\";\n+import { Relationship } from \"@server/models\";\n+import { RelationshipType } from \"@server/models/Relationship\";\n import { buildDocument } from \"@server/test/factories\";\n+\n import BacklinksProcessor from \"./BacklinksProcessor\";\n \n const ip = \"127.0.0.1\";\n@@ -22,9 +24,10 @@ describe(\"documents.publish\", () => {\n       data: { title: document.title },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(1);\n@@ -52,9 +55,10 @@ describe(\"documents.publish\", () => {\n       data: { title: document.title },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(0);\n@@ -79,9 +83,10 @@ describe(\"documents.update\", () => {\n       data: { title: document.title, autosave: false, done: true },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(1);\n@@ -109,9 +114,10 @@ describe(\"documents.update\", () => {\n       data: { title: document.title, autosave: false, done: true },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(1);\n@@ -136,9 +142,10 @@ describe(\"documents.update\", () => {\n       data: { title: document.title, autosave: false, done: true },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(1);\n@@ -182,9 +189,10 @@ describe(\"documents.update\", () => {\n       data: { title: document.title, autosave: false, done: true },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(1);\n@@ -222,9 +230,10 @@ describe(\"documents.delete\", () => {\n       data: { title: document.title },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(0);\n\ndiff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex 677d7db99e50..32837b25abaf 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -13,13 +13,14 @@ import {\n   Document,\n   View,\n   Revision,\n-  Backlink,\n   UserMembership,\n   SearchQuery,\n   Event,\n   User,\n   GroupMembership,\n+  Relationship,\n } from \"@server/models\";\n+import { RelationshipType } from \"@server/models/Relationship\";\n import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n import {\n   buildShare,\n@@ -1033,8 +1034,9 @@ describe(\"#documents.list\", () => {\n       userId: user.id,\n       teamId: user.teamId,\n     });\n-    await Backlink.create({\n+    await Relationship.create({\n       reverseDocumentId: anotherDoc.id,\n+      type: RelationshipType.Backlink,\n       documentId: document.id,\n       userId: user.id,\n     });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9340",
    "pr_id": 9340,
    "issue_id": 9338,
    "repo": "outline/outline",
    "problem_statement": "Links to articles result in malformed URLs\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\nIf you create a hyperlink within a document that has a custom static URL defined, there will be bad information appended to the link on the public-facing page.\n\nFor example, using this link within an article:\nhttps://docs.handheldlegend.com/s/testbugpage001/doc/test-page-2-2xIDEXYlib\n\nThis ends up appearing as such on the public facing page:\nhttps://docs.handheldlegend.com/s/testbugpage001/s/testbugpage001/doc/test-page-2-2xIDEXYlib\n\nThis results in the link failing from the public view.\n\nYou can see a live demo of this bug here: https://docs.handheldlegend.com/s/testbugpage001/doc/bug-demo-FEdxQvkFpP\n\n### Expected Behavior\n\nThe link should be shown exactly as it was pasted in the editor.\n\n### Steps To Reproduce\n\n1. Create a collection.\n2. Create a root page, then click \"Share\". For the URL, create a static name.\n3. Create a child page under the static root page.\n4. Grab the public URL from the child page.\n5. Paste the public URL into the root page (or any other page) in the document editor.\n6. View the public page, and examine the URL for malformed data.\n\n### Environment\n\n```markdown\n- Outline: Outline 0.84.0\n- Browser: Chrome, Firefox, Edge\n```\n\n### Anything else?\n\n_No response_",
    "issue_word_count": 235,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "server/models/helpers/DocumentHelper.test.ts",
      "server/models/helpers/ProsemirrorHelper.tsx"
    ],
    "pr_changed_test_files": [
      "server/models/helpers/DocumentHelper.test.ts"
    ],
    "base_commit": "dae1bce48cc614827b6a18f228bb86e6b5a6c62c",
    "head_commit": "fbec3eb524959876d4694ea89701180838b2c01c",
    "repo_url": "https://github.com/outline/outline/pull/9340",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9340",
    "dockerfile": "",
    "pr_merged_at": "2025-05-30T23:05:21.000Z",
    "patch": "diff --git a/server/models/helpers/ProsemirrorHelper.tsx b/server/models/helpers/ProsemirrorHelper.tsx\nindex 7e08d860ae4a..33558e2d15f9 100644\n--- a/server/models/helpers/ProsemirrorHelper.tsx\n+++ b/server/models/helpers/ProsemirrorHelper.tsx\n@@ -281,7 +281,11 @@ export class ProsemirrorHelper {\n     }\n \n     function replaceUrl(url: string) {\n-      return url.replace(`/doc/`, `${basePath}/doc/`);\n+      // Only replace if the URL starts with /doc/ (not already in a share path)\n+      if (url.startsWith(\"/doc/\")) {\n+        return `${basePath}${url}`;\n+      }\n+      return url;\n     }\n \n     function replaceInternalUrlsInner(node: ProsemirrorData) {\n",
    "test_patch": "diff --git a/server/models/helpers/DocumentHelper.test.ts b/server/models/helpers/DocumentHelper.test.ts\nindex d8f97a186504..469a2a06a761 100644\n--- a/server/models/helpers/DocumentHelper.test.ts\n+++ b/server/models/helpers/DocumentHelper.test.ts\n@@ -44,6 +44,38 @@ describe(\"DocumentHelper\", () => {\n         type: \"doc\",\n       });\n     });\n+\n+    it(\"should not duplicate share path for URLs that already contain it\", async () => {\n+      const document = await buildDocument({\n+        text: `[link](/s/testbugpage001/doc/test-page-2-2xIDEXYlib)`,\n+      });\n+      const result = await DocumentHelper.toJSON(document, {\n+        internalUrlBase: \"/s/testbugpage001\",\n+      });\n+      expect(result).toEqual({\n+        content: [\n+          {\n+            content: [\n+              {\n+                marks: [\n+                  {\n+                    attrs: {\n+                      href: \"/s/testbugpage001/doc/test-page-2-2xIDEXYlib\",\n+                      title: null,\n+                    },\n+                    type: \"link\",\n+                  },\n+                ],\n+                text: \"link\",\n+                type: \"text\",\n+              },\n+            ],\n+            type: \"paragraph\",\n+          },\n+        ],\n+        type: \"doc\",\n+      });\n+    });\n   });\n \n   describe(\"toJSON\", () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9324",
    "pr_id": 9324,
    "issue_id": 9270,
    "repo": "outline/outline",
    "problem_statement": "Running self-hosted for the first time should provision a team\nLets add an intro screen for self-hosted that allows creating a first user account and team without having to use the hacky seed.js approach. It can have the layout of the sign-in page with a form:\n\n`team name`\n`user name`\n`user email`\n\n`teams.create` could include an exception for this case when there are no teams and self-hosted? Or we we use a separate endpoint, perhaps under `installation` namespace.",
    "issue_word_count": 73,
    "test_files_count": 1,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "server/models/Team.ts",
      "server/models/User.ts",
      "server/routes/api/installation/installation.test.ts",
      "server/routes/api/installation/installation.ts",
      "server/routes/api/installation/schema.ts",
      "shared/validations.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/installation/installation.test.ts"
    ],
    "base_commit": "f284a279410f673c22c9ff0c7e9d99f67103683b",
    "head_commit": "c9ef4b3de6853792cb8954f448fd2312b2423f39",
    "repo_url": "https://github.com/outline/outline/pull/9324",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9324",
    "dockerfile": "",
    "pr_merged_at": "2025-05-30T02:52:49.000Z",
    "patch": "diff --git a/server/models/Team.ts b/server/models/Team.ts\nindex 42822bfb64e0..c2011d6e26e9 100644\n--- a/server/models/Team.ts\n+++ b/server/models/Team.ts\n@@ -32,6 +32,7 @@ import { TeamPreferenceDefaults } from \"@shared/constants\";\n import { TeamPreference, TeamPreferences, UserRole } from \"@shared/types\";\n import { getBaseDomain, RESERVED_SUBDOMAINS } from \"@shared/utils/domains\";\n import { parseEmail } from \"@shared/utils/email\";\n+import { TeamValidation } from \"@shared/validations\";\n import env from \"@server/env\";\n import { ValidationError } from \"@server/errors\";\n import DeleteAttachmentTask from \"@server/queues/tasks/DeleteAttachmentTask\";\n@@ -70,7 +71,11 @@ class Team extends ParanoidModel<\n   Partial<InferCreationAttributes<Team>>\n > {\n   @NotContainsUrl\n-  @Length({ min: 1, max: 255, msg: \"name must be between 1 to 255 characters\" })\n+  @Length({\n+    min: 1,\n+    max: TeamValidation.maxNameLength,\n+    msg: `Team name must be between 1 and ${TeamValidation.maxNameLength} characters`,\n+  })\n   @Column\n   name: string;\n \n\ndiff --git a/server/models/User.ts b/server/models/User.ts\nindex 5e152fa24c39..af4bd1695189 100644\n--- a/server/models/User.ts\n+++ b/server/models/User.ts\n@@ -46,6 +46,7 @@ import {\n import { UserRoleHelper } from \"@shared/utils/UserRoleHelper\";\n import { stringToColor } from \"@shared/utils/color\";\n import { locales } from \"@shared/utils/date\";\n+import { UserValidation } from \"@shared/validations\";\n import env from \"@server/env\";\n import DeleteAttachmentTask from \"@server/queues/tasks/DeleteAttachmentTask\";\n import { APIContext } from \"@server/types\";\n@@ -128,12 +129,20 @@ class User extends ParanoidModel<\n   Partial<InferCreationAttributes<User>>\n > {\n   @IsEmail\n-  @Length({ max: 255, msg: \"User email must be 255 characters or less\" })\n+  @Length({\n+    min: 1,\n+    max: UserValidation.maxEmailLength,\n+    msg: `User email must be between 1 and ${UserValidation.maxEmailLength} characters`,\n+  })\n   @Column\n   email: string | null;\n \n   @NotContainsUrl\n-  @Length({ max: 255, msg: \"User name must be 255 characters or less\" })\n+  @Length({\n+    min: 1,\n+    max: UserValidation.maxNameLength,\n+    msg: `User name must be between 1 and ${UserValidation.maxNameLength} characters`,\n+  })\n   @Column\n   name: string;\n \n\ndiff --git a/server/routes/api/installation/installation.ts b/server/routes/api/installation/installation.ts\nindex fd40ff04d28a..195b1ee86a00 100644\n--- a/server/routes/api/installation/installation.ts\n+++ b/server/routes/api/installation/installation.ts\n@@ -1,10 +1,64 @@\n import Router from \"koa-router\";\n+import { Client, UserRole } from \"@shared/types\";\n+import slugify from \"@shared/utils/slugify\";\n+import teamCreator from \"@server/commands/teamCreator\";\n+import { ValidationError } from \"@server/errors\";\n import auth from \"@server/middlewares/authentication\";\n+import { transaction } from \"@server/middlewares/transaction\";\n+import validate from \"@server/middlewares/validate\";\n+import { Team, User } from \"@server/models\";\n import { APIContext } from \"@server/types\";\n+import { signIn } from \"@server/utils/authentication\";\n import { getVersion, getVersionInfo } from \"@server/utils/getInstallationInfo\";\n+import * as T from \"./schema\";\n \n+// Note: This entire router is only mounted in self-hosted installations.\n const router = new Router();\n \n+router.post(\n+  \"installation.create\",\n+  validate(T.InstallationCreateSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.InstallationCreateSchemaReq>) => {\n+    const { teamName, userName, userEmail } = ctx.input.body;\n+    const { transaction } = ctx.state;\n+\n+    // Check that this can only be called when there are no existing teams\n+    const existingTeamCount = await Team.count({ transaction });\n+    if (existingTeamCount > 0) {\n+      throw ValidationError(\"Installation already has existing teams\");\n+    }\n+\n+    const team = await teamCreator({\n+      name: teamName,\n+      subdomain: slugify(teamName),\n+      ip: ctx.request.ip,\n+      transaction,\n+      authenticationProviders: [],\n+    });\n+\n+    const user = await User.create(\n+      {\n+        name: userName,\n+        email: userEmail,\n+        teamId: team.id,\n+        role: UserRole.Admin,\n+      },\n+      {\n+        transaction,\n+      }\n+    );\n+\n+    await signIn(ctx, \"email\", {\n+      user,\n+      team,\n+      isNewTeam: true,\n+      isNewUser: true,\n+      client: Client.Web,\n+    });\n+  }\n+);\n+\n router.post(\"installation.info\", auth(), async (ctx: APIContext) => {\n   const currentVersion = getVersion();\n   const { latestVersion, versionsBehind } = await getVersionInfo(\n\ndiff --git a/server/routes/api/installation/schema.ts b/server/routes/api/installation/schema.ts\nnew file mode 100644\nindex 000000000000..b67d4cec6471\n--- /dev/null\n+++ b/server/routes/api/installation/schema.ts\n@@ -0,0 +1,18 @@\n+import { z } from \"zod\";\n+import { TeamValidation, UserValidation } from \"@shared/validations\";\n+import { BaseSchema } from \"@server/routes/api/schema\";\n+\n+export const InstallationCreateSchema = BaseSchema.extend({\n+  body: z.object({\n+    /** Team name */\n+    teamName: z.string().min(1).max(TeamValidation.maxNameLength),\n+    /** User name */\n+    userName: z.string().min(1).max(UserValidation.maxNameLength),\n+    /** User email */\n+    userEmail: z.string().email().max(UserValidation.maxEmailLength),\n+  }),\n+});\n+\n+export type InstallationCreateSchemaReq = z.infer<\n+  typeof InstallationCreateSchema\n+>;\n\ndiff --git a/shared/validations.ts b/shared/validations.ts\nindex af88c59a9f58..d15de4b26934 100644\n--- a/shared/validations.ts\n+++ b/shared/validations.ts\n@@ -92,11 +92,20 @@ export const PinValidation = {\n export const TeamValidation = {\n   /** The maximum number of domains per team on cloud hosted */\n   maxDomains: 10,\n+\n+  /** The maximum length of the team name */\n+  maxNameLength: 255,\n };\n \n export const UserValidation = {\n   /** The maximum number of invites per request */\n   maxInvitesPerRequest: 20,\n+\n+  /** The maximum length of the user name */\n+  maxNameLength: 255,\n+\n+  /** The maximum length of the user email */\n+  maxEmailLength: 255,\n };\n \n export const WebhookSubscriptionValidation = {\n",
    "test_patch": "diff --git a/server/routes/api/installation/installation.test.ts b/server/routes/api/installation/installation.test.ts\nindex 287bd3d50487..7cbe2158c863 100644\n--- a/server/routes/api/installation/installation.test.ts\n+++ b/server/routes/api/installation/installation.test.ts\n@@ -1,8 +1,59 @@\n-import { buildUser } from \"@server/test/factories\";\n-import { getTestServer } from \"@server/test/support\";\n+import { faker } from \"@faker-js/faker\";\n+import { sequelize } from \"@server/storage/database\";\n+import { buildUser, buildTeam } from \"@server/test/factories\";\n+import { getTestServer, setSelfHosted } from \"@server/test/support\";\n \n+setSelfHosted();\n const server = getTestServer();\n \n+describe(\"installation.create\", () => {\n+  // Skipped in CI because tests run in parallel and this requires a clean database state.\n+  it.skip(\"should create a team when no teams exist\", async () => {\n+    await sequelize.query(\n+      \"TRUNCATE TABLE teams, users, team_domains, user_authentications RESTART IDENTITY CASCADE\"\n+    );\n+\n+    const res = await server.post(\"/api/installation.create\", {\n+      body: {\n+        teamName: faker.company.name(),\n+        userName: faker.person.fullName(),\n+        userEmail: faker.internet.email().toLowerCase(),\n+      },\n+      redirect: \"manual\",\n+    });\n+    expect(res.status).toEqual(302);\n+    expect(res.headers.get(\"location\")).not.toBeNull();\n+  });\n+\n+  it(\"should fail when teams already exist\", async () => {\n+    await buildTeam();\n+\n+    const res = await server.post(\"/api/installation.create\", {\n+      body: {\n+        teamName: faker.company.name(),\n+        userName: faker.person.fullName(),\n+        userEmail: faker.internet.email().toLowerCase(),\n+      },\n+    });\n+\n+    expect(res.status).toEqual(400);\n+    const body = await res.json();\n+    expect(body.message).toContain(\"Installation already has existing teams\");\n+  });\n+\n+  it(\"should validate required fields\", async () => {\n+    const res = await server.post(\"/api/installation.create\", {\n+      body: {\n+        teamName: \"\",\n+        userName: \"\",\n+        userEmail: \"invalid-email\",\n+      },\n+    });\n+\n+    expect(res.status).toEqual(400);\n+  });\n+});\n+\n describe(\"installation.info\", () => {\n   it(\"should require authentication\", async () => {\n     const res = await server.post(\"/api/installation.info\", {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9308",
    "pr_id": 9308,
    "issue_id": 5712,
    "repo": "outline/outline",
    "problem_statement": "Allow loading OIDC info from well-known endpoint\nCurrently we require all of the OIDC endpoints to be provided separately, almost all OIDC implementations also publish a \"well-known\" endpoint that returns a JSON response with all of the configuration details required.\r\n\r\nIt would be good to have a new `OIDC_CONFIGURATION_URL` which can be provided with the client ID and secret, we can fetch the config on server startup and no more separate parameters would be required.\r\n\r\nRelated #3954",
    "issue_word_count": 71,
    "test_files_count": 1,
    "non_test_files_count": 12,
    "pr_changed_files": [
      "plugins/oidc/server/auth/oidc.ts",
      "plugins/oidc/server/auth/oidcRouter.ts",
      "plugins/oidc/server/env.ts",
      "plugins/oidc/server/index.ts",
      "plugins/oidc/server/oidcDiscovery.test.ts",
      "plugins/oidc/server/oidcDiscovery.ts",
      "plugins/webhooks/server/tasks/DeliverWebhookTask.ts",
      "server/index.ts",
      "server/routes/auth/index.ts",
      "server/services/web.ts",
      "server/services/worker.ts",
      "server/utils/PluginManager.ts",
      "server/utils/fetch.ts"
    ],
    "pr_changed_test_files": [
      "plugins/oidc/server/oidcDiscovery.test.ts"
    ],
    "base_commit": "6c1df04721958d146fc05b45898dccaff852c5d3",
    "head_commit": "1a9d392880742ceb6ddde95d3c9af1a8fc487ada",
    "repo_url": "https://github.com/outline/outline/pull/9308",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9308",
    "dockerfile": "",
    "pr_merged_at": "2025-05-27T11:56:02.000Z",
    "patch": "diff --git a/plugins/oidc/server/auth/oidc.ts b/plugins/oidc/server/auth/oidc.ts\nindex 75b588cb556f..b61d59038934 100644\n--- a/plugins/oidc/server/auth/oidc.ts\n+++ b/plugins/oidc/server/auth/oidc.ts\n@@ -1,199 +1,66 @@\n-import passport from \"@outlinewiki/koa-passport\";\n-import JWT from \"jsonwebtoken\";\n-import type { Context } from \"koa\";\n import Router from \"koa-router\";\n-import get from \"lodash/get\";\n-import { slugifyDomain } from \"@shared/utils/domains\";\n-import { parseEmail } from \"@shared/utils/email\";\n-import accountProvisioner from \"@server/commands/accountProvisioner\";\n-import {\n-  OIDCMalformedUserInfoError,\n-  AuthenticationError,\n-} from \"@server/errors\";\n import Logger from \"@server/logging/Logger\";\n-import passportMiddleware from \"@server/middlewares/passport\";\n-import { AuthenticationProvider, User } from \"@server/models\";\n-import { AuthenticationResult } from \"@server/types\";\n-import {\n-  StateStore,\n-  getTeamFromContext,\n-  getClientFromContext,\n-  request,\n-} from \"@server/utils/passport\";\n-import config from \"../../plugin.json\";\n import env from \"../env\";\n-import { OIDCStrategy } from \"./OIDCStrategy\";\n+import { fetchOIDCConfiguration } from \"../oidcDiscovery\";\n+import { createOIDCRouter } from \"./oidcRouter\";\n \n const router = new Router();\n-const scopes = env.OIDC_SCOPES.split(\" \");\n+let routerPromise = Promise.resolve(router);\n \n-if (\n+// Check if we have manual configuration\n+const hasManualConfig = !!(\n   env.OIDC_CLIENT_ID &&\n   env.OIDC_CLIENT_SECRET &&\n   env.OIDC_AUTH_URI &&\n   env.OIDC_TOKEN_URI &&\n   env.OIDC_USERINFO_URI\n-) {\n-  passport.use(\n-    config.id,\n-    new OIDCStrategy(\n-      {\n-        authorizationURL: env.OIDC_AUTH_URI,\n-        tokenURL: env.OIDC_TOKEN_URI,\n-        clientID: env.OIDC_CLIENT_ID,\n-        clientSecret: env.OIDC_CLIENT_SECRET,\n-        callbackURL: `${env.URL}/auth/${config.id}.callback`,\n-        passReqToCallback: true,\n-        scope: env.OIDC_SCOPES,\n-        // @ts-expect-error custom state store\n-        store: new StateStore(),\n-        state: true,\n-        pkce: false,\n-      },\n-      // OpenID Connect standard profile claims can be found in the official\n-      // specification.\n-      // https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n-      // Non-standard claims may be configured by individual identity providers.\n-      // Any claim supplied in response to the userinfo request will be\n-      // available on the `profile` parameter\n-      async function (\n-        ctx: Context,\n-        accessToken: string,\n-        refreshToken: string,\n-        params: { expires_in: number; id_token: string },\n-        _profile: unknown,\n-        done: (\n-          err: Error | null,\n-          user: User | null,\n-          result?: AuthenticationResult\n-        ) => void\n-      ) {\n-        try {\n-          // Some providers require a POST request to the userinfo endpoint, add them as exceptions here.\n-          const usePostMethod = [\n-            \"https://api.dropboxapi.com/2/openid/userinfo\",\n-          ];\n+);\n \n-          const profile = await request(\n-            usePostMethod.includes(env.OIDC_USERINFO_URI!) ? \"POST\" : \"GET\",\n-            env.OIDC_USERINFO_URI!,\n-            accessToken\n-          );\n-\n-          // Some providers, namely ADFS, don't provide anything more than the `sub` claim in the userinfo endpoint\n-          // So, we'll decode the params.id_token and see if that contains what we need.\n-          const token = (() => {\n-            try {\n-              const decoded = JWT.decode(params.id_token);\n-\n-              if (!decoded || typeof decoded !== \"object\") {\n-                Logger.warn(\"Decoded id_token is not a valid object\");\n-                return {};\n-              }\n-\n-              return decoded as {\n-                email?: string;\n-                preferred_username?: string;\n-                sub?: string;\n-              };\n-            } catch (err) {\n-              Logger.error(\"id_token decode threw error: \", err);\n-              return {};\n-            }\n-          })();\n-\n-          const email = profile.email ?? token.email ?? null;\n-\n-          if (!email) {\n-            throw AuthenticationError(\n-              `An email field was not returned in the profile or id_token parameter, but is required.`\n-            );\n-          }\n-\n-          const team = await getTeamFromContext(ctx);\n-          const client = getClientFromContext(ctx);\n-          const { domain } = parseEmail(email);\n-\n-          // Only a single OIDC provider is supported – find the existing, if any.\n-          const authenticationProvider = team\n-            ? (await AuthenticationProvider.findOne({\n-                where: {\n-                  name: \"oidc\",\n-                  teamId: team.id,\n-                  providerId: domain,\n-                },\n-              })) ??\n-              (await AuthenticationProvider.findOne({\n-                where: {\n-                  name: \"oidc\",\n-                  teamId: team.id,\n-                },\n-              }))\n-            : undefined;\n-\n-          // Derive a providerId from the OIDC location if there is no existing provider.\n-          const oidcURL = new URL(env.OIDC_AUTH_URI!);\n-          const providerId =\n-            authenticationProvider?.providerId ?? oidcURL.hostname;\n-\n-          if (!domain) {\n-            throw OIDCMalformedUserInfoError();\n-          }\n-\n-          // remove the TLD and form a subdomain from the remaining\n-          const subdomain = slugifyDomain(domain);\n-\n-          // Claim name can be overriden using an env variable.\n-          // Default is 'preferred_username' as per OIDC spec.\n-          // This will default to the profile.preferred_username, but will fall back to preferred_username from the id_token\n-          const username =\n-            get(profile, env.OIDC_USERNAME_CLAIM) ??\n-            get(token, env.OIDC_USERNAME_CLAIM);\n-          const name = profile.name || username || profile.username;\n-          const profileId = profile.sub ? profile.sub : profile.id;\n-\n-          if (!name) {\n-            throw AuthenticationError(\n-              `Neither a ${env.OIDC_USERNAME_CLAIM}, name or username was returned in the profile parameter, but at least one is required.`\n-            );\n-          }\n-\n-          const result = await accountProvisioner({\n-            ip: ctx.ip,\n-            team: {\n-              teamId: team?.id,\n-              name: env.APP_NAME,\n-              domain,\n-              subdomain,\n-            },\n-            user: {\n-              name,\n-              email,\n-              avatarUrl: profile.picture,\n-            },\n-            authenticationProvider: {\n-              name: config.id,\n-              providerId,\n-            },\n-            authentication: {\n-              providerId: profileId,\n-              accessToken,\n-              refreshToken,\n-              expiresIn: params.expires_in,\n-              scopes,\n-            },\n-          });\n-          return done(null, result.user, { ...result, client });\n-        } catch (err) {\n-          return done(err, null);\n-        }\n-      }\n-    )\n-  );\n-\n-  router.get(config.id, passport.authenticate(config.id));\n-  router.get(`${config.id}.callback`, passportMiddleware(config.id));\n-  router.post(`${config.id}.callback`, passportMiddleware(config.id));\n+// Check if we have issuer configuration for discovery\n+const hasIssuerConfig = !!(\n+  env.OIDC_CLIENT_ID &&\n+  env.OIDC_CLIENT_SECRET &&\n+  env.OIDC_ISSUER_URL\n+);\n+\n+if (hasManualConfig) {\n+  // Mount endpoints immediately with manual configuration\n+  createOIDCRouter(router, {\n+    authorizationURL: env.OIDC_AUTH_URI!,\n+    tokenURL: env.OIDC_TOKEN_URI!,\n+    userInfoURL: env.OIDC_USERINFO_URI!,\n+    logoutURL: env.OIDC_LOGOUT_URI,\n+  });\n+  Logger.info(\"plugins\", \"OIDC endpoints mounted with manual configuration\");\n+} else if (hasIssuerConfig) {\n+  // Asynchronously discover configuration and mount endpoints\n+  routerPromise = (async () => {\n+    try {\n+      Logger.debug(\"plugins\", \"Starting OIDC configuration discovery\");\n+\n+      const oidcConfig = await fetchOIDCConfiguration(env.OIDC_ISSUER_URL!);\n+\n+      // Mount endpoints into the existing router\n+      createOIDCRouter(router, {\n+        authorizationURL: oidcConfig.authorization_endpoint,\n+        tokenURL: oidcConfig.token_endpoint,\n+        userInfoURL: oidcConfig.userinfo_endpoint,\n+        logoutURL: oidcConfig.end_session_endpoint,\n+      });\n+\n+      Logger.info(\"plugins\", \"OIDC endpoints mounted after discovery\", {\n+        issuer: oidcConfig.issuer,\n+        authorization_endpoint: oidcConfig.authorization_endpoint,\n+        token_endpoint: oidcConfig.token_endpoint,\n+        userinfo_endpoint: oidcConfig.userinfo_endpoint,\n+      });\n+\n+      return router;\n+    } catch (error) {\n+      Logger.fatal(\"Failed to discover OIDC configuration\", error);\n+      throw error;\n+    }\n+  })();\n }\n \n-export default router;\n+export default routerPromise;\n\ndiff --git a/plugins/oidc/server/auth/oidcRouter.ts b/plugins/oidc/server/auth/oidcRouter.ts\nnew file mode 100644\nindex 000000000000..cfaf81005862\n--- /dev/null\n+++ b/plugins/oidc/server/auth/oidcRouter.ts\n@@ -0,0 +1,203 @@\n+import passport from \"@outlinewiki/koa-passport\";\n+import JWT from \"jsonwebtoken\";\n+import type { Context } from \"koa\";\n+import Router from \"koa-router\";\n+import get from \"lodash/get\";\n+import { slugifyDomain } from \"@shared/utils/domains\";\n+import { parseEmail } from \"@shared/utils/email\";\n+import accountProvisioner from \"@server/commands/accountProvisioner\";\n+import {\n+  OIDCMalformedUserInfoError,\n+  AuthenticationError,\n+} from \"@server/errors\";\n+import Logger from \"@server/logging/Logger\";\n+import passportMiddleware from \"@server/middlewares/passport\";\n+import { AuthenticationProvider, User } from \"@server/models\";\n+import { AuthenticationResult } from \"@server/types\";\n+import {\n+  StateStore,\n+  getTeamFromContext,\n+  getClientFromContext,\n+  request,\n+} from \"@server/utils/passport\";\n+import config from \"../../plugin.json\";\n+import env from \"../env\";\n+import { OIDCStrategy } from \"./OIDCStrategy\";\n+\n+export interface OIDCEndpoints {\n+  authorizationURL: string;\n+  tokenURL: string;\n+  userInfoURL: string;\n+  logoutURL?: string;\n+}\n+\n+/**\n+ * Creates OIDC routes and mounts them into the provided router\n+ */\n+export function createOIDCRouter(\n+  router: Router,\n+  endpoints: OIDCEndpoints\n+): void {\n+  const scopes = env.OIDC_SCOPES.split(\" \");\n+\n+  passport.use(\n+    config.id,\n+    new OIDCStrategy(\n+      {\n+        authorizationURL: endpoints.authorizationURL,\n+        tokenURL: endpoints.tokenURL,\n+        clientID: env.OIDC_CLIENT_ID!,\n+        clientSecret: env.OIDC_CLIENT_SECRET!,\n+        callbackURL: `${env.URL}/auth/${config.id}.callback`,\n+        passReqToCallback: true,\n+        scope: env.OIDC_SCOPES,\n+        // @ts-expect-error custom state store\n+        store: new StateStore(),\n+        state: true,\n+        pkce: false,\n+      },\n+      // OpenID Connect standard profile claims can be found in the official\n+      // specification.\n+      // https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n+      // Non-standard claims may be configured by individual identity providers.\n+      // Any claim supplied in response to the userinfo request will be\n+      // available on the `profile` parameter\n+      async function (\n+        ctx: Context,\n+        accessToken: string,\n+        refreshToken: string,\n+        params: { expires_in: number; id_token: string },\n+        _profile: unknown,\n+        done: (\n+          err: Error | null,\n+          user: User | null,\n+          result?: AuthenticationResult\n+        ) => void\n+      ) {\n+        try {\n+          // Some providers require a POST request to the userinfo endpoint, add them as exceptions here.\n+          const usePostMethod = [\n+            \"https://api.dropboxapi.com/2/openid/userinfo\",\n+          ];\n+\n+          const profile = await request(\n+            usePostMethod.includes(endpoints.userInfoURL) ? \"POST\" : \"GET\",\n+            endpoints.userInfoURL,\n+            accessToken\n+          );\n+\n+          // Some providers, namely ADFS, don't provide anything more than the `sub` claim in the userinfo endpoint\n+          // So, we'll decode the params.id_token and see if that contains what we need.\n+          const token = (() => {\n+            try {\n+              const decoded = JWT.decode(params.id_token);\n+\n+              if (!decoded || typeof decoded !== \"object\") {\n+                Logger.warn(\"Decoded id_token is not a valid object\");\n+                return {};\n+              }\n+\n+              return decoded as {\n+                email?: string;\n+                preferred_username?: string;\n+                sub?: string;\n+              };\n+            } catch (err) {\n+              Logger.error(\"id_token decode threw error: \", err);\n+              return {};\n+            }\n+          })();\n+\n+          const email = profile.email ?? token.email ?? null;\n+\n+          if (!email) {\n+            throw AuthenticationError(\n+              `An email field was not returned in the profile or id_token parameter, but is required.`\n+            );\n+          }\n+\n+          const team = await getTeamFromContext(ctx);\n+          const client = getClientFromContext(ctx);\n+          const { domain } = parseEmail(email);\n+\n+          // Only a single OIDC provider is supported – find the existing, if any.\n+          const authenticationProvider = team\n+            ? (await AuthenticationProvider.findOne({\n+                where: {\n+                  name: \"oidc\",\n+                  teamId: team.id,\n+                  providerId: domain,\n+                },\n+              })) ??\n+              (await AuthenticationProvider.findOne({\n+                where: {\n+                  name: \"oidc\",\n+                  teamId: team.id,\n+                },\n+              }))\n+            : undefined;\n+\n+          // Derive a providerId from the OIDC location if there is no existing provider.\n+          const oidcURL = new URL(endpoints.authorizationURL);\n+          const providerId =\n+            authenticationProvider?.providerId ?? oidcURL.hostname;\n+\n+          if (!domain) {\n+            throw OIDCMalformedUserInfoError();\n+          }\n+\n+          // remove the TLD and form a subdomain from the remaining\n+          const subdomain = slugifyDomain(domain);\n+\n+          // Claim name can be overriden using an env variable.\n+          // Default is 'preferred_username' as per OIDC spec.\n+          // This will default to the profile.preferred_username, but will fall back to preferred_username from the id_token\n+          const username =\n+            get(profile, env.OIDC_USERNAME_CLAIM) ??\n+            get(token, env.OIDC_USERNAME_CLAIM);\n+          const name = profile.name || username || profile.username;\n+          const profileId = profile.sub ? profile.sub : profile.id;\n+\n+          if (!name) {\n+            throw AuthenticationError(\n+              `Neither a ${env.OIDC_USERNAME_CLAIM}, name or username was returned in the profile parameter, but at least one is required.`\n+            );\n+          }\n+\n+          const result = await accountProvisioner({\n+            ip: ctx.ip,\n+            team: {\n+              teamId: team?.id,\n+              name: env.APP_NAME,\n+              domain,\n+              subdomain,\n+            },\n+            user: {\n+              name,\n+              email,\n+              avatarUrl: profile.picture,\n+            },\n+            authenticationProvider: {\n+              name: config.id,\n+              providerId,\n+            },\n+            authentication: {\n+              providerId: profileId,\n+              accessToken,\n+              refreshToken,\n+              expiresIn: params.expires_in,\n+              scopes,\n+            },\n+          });\n+          return done(null, result.user, { ...result, client });\n+        } catch (err) {\n+          return done(err, null);\n+        }\n+      }\n+    )\n+  );\n+\n+  router.get(config.id, passport.authenticate(config.id));\n+  router.get(`${config.id}.callback`, passportMiddleware(config.id));\n+  router.post(`${config.id}.callback`, passportMiddleware(config.id));\n+}\n\ndiff --git a/plugins/oidc/server/env.ts b/plugins/oidc/server/env.ts\nindex ba40a28a0950..a04b93bd10a5 100644\n--- a/plugins/oidc/server/env.ts\n+++ b/plugins/oidc/server/env.ts\n@@ -11,10 +11,6 @@ class OIDCPluginEnvironment extends Environment {\n    */\n   @IsOptional()\n   @CannotUseWithout(\"OIDC_CLIENT_SECRET\")\n-  @CannotUseWithout(\"OIDC_AUTH_URI\")\n-  @CannotUseWithout(\"OIDC_TOKEN_URI\")\n-  @CannotUseWithout(\"OIDC_USERINFO_URI\")\n-  @CannotUseWithout(\"OIDC_DISPLAY_NAME\")\n   public OIDC_CLIENT_ID = this.toOptionalString(environment.OIDC_CLIENT_ID);\n \n   @IsOptional()\n@@ -23,6 +19,18 @@ class OIDCPluginEnvironment extends Environment {\n     environment.OIDC_CLIENT_SECRET\n   );\n \n+  /**\n+   * The OIDC issuer URL for automatic discovery of endpoints via the\n+   * well-known configuration endpoint. When provided, the authorization,\n+   * token, and userinfo endpoints will be automatically discovered.\n+   */\n+  @IsOptional()\n+  @IsUrl({\n+    require_tld: false,\n+    allow_underscores: true,\n+  })\n+  public OIDC_ISSUER_URL = this.toOptionalString(environment.OIDC_ISSUER_URL);\n+\n   /**\n    * The name of the OIDC provider, eg \"GitLab\" – this will be displayed on the\n    * sign-in button and other places in the UI. The default value is:\n\ndiff --git a/plugins/oidc/server/index.ts b/plugins/oidc/server/index.ts\nindex e97d3ca5fe0e..d457ade4e37c 100644\n--- a/plugins/oidc/server/index.ts\n+++ b/plugins/oidc/server/index.ts\n@@ -1,9 +1,11 @@\n+import Logger from \"@server/logging/Logger\";\n import { PluginManager, Hook } from \"@server/utils/PluginManager\";\n import config from \"../plugin.json\";\n import router from \"./auth/oidc\";\n import env from \"./env\";\n \n-const enabled = !!(\n+// Check if OIDC is enabled with either manual configuration or issuer URL\n+const hasManualConfig = !!(\n   env.OIDC_CLIENT_ID &&\n   env.OIDC_CLIENT_SECRET &&\n   env.OIDC_AUTH_URI &&\n@@ -11,11 +13,21 @@ const enabled = !!(\n   env.OIDC_USERINFO_URI\n );\n \n+const hasIssuerConfig = !!(\n+  env.OIDC_CLIENT_ID &&\n+  env.OIDC_CLIENT_SECRET &&\n+  env.OIDC_ISSUER_URL\n+);\n+\n+const enabled = hasManualConfig || hasIssuerConfig;\n+\n if (enabled) {\n+  // Register plugin with the router (which handles both manual and discovery config)\n   PluginManager.add({\n     ...config,\n     type: Hook.AuthProvider,\n     value: { router, id: config.id },\n     name: env.OIDC_DISPLAY_NAME || config.name,\n   });\n+  Logger.info(\"plugins\", \"OIDC plugin registered\");\n }\n\ndiff --git a/plugins/oidc/server/oidcDiscovery.ts b/plugins/oidc/server/oidcDiscovery.ts\nnew file mode 100644\nindex 000000000000..4219794eb08f\n--- /dev/null\n+++ b/plugins/oidc/server/oidcDiscovery.ts\n@@ -0,0 +1,74 @@\n+import { InternalError } from \"@server/errors\";\n+import Logger from \"@server/logging/Logger\";\n+import fetch from \"@server/utils/fetch\";\n+\n+export interface OIDCConfiguration {\n+  issuer: string;\n+  authorization_endpoint: string;\n+  token_endpoint: string;\n+  userinfo_endpoint: string;\n+  jwks_uri?: string;\n+  end_session_endpoint?: string;\n+  scopes_supported?: string[];\n+  response_types_supported?: string[];\n+  grant_types_supported?: string[];\n+}\n+\n+/**\n+ * Fetches OIDC configuration from the well-known endpoint\n+ * @param issuerUrl The OIDC issuer URL\n+ * @returns Promise resolving to the OIDC configuration\n+ */\n+export async function fetchOIDCConfiguration(\n+  issuerUrl: string\n+): Promise<OIDCConfiguration> {\n+  try {\n+    const wellKnownPath = \"/.well-known/openid-configuration\";\n+    const wellKnownUrl = issuerUrl.includes(wellKnownPath)\n+      ? issuerUrl\n+      : new URL(wellKnownPath, issuerUrl).toString();\n+\n+    Logger.info(\"plugins\", `Fetching OIDC configuration from ${wellKnownUrl}`);\n+\n+    const response = await fetch(wellKnownUrl, {\n+      method: \"GET\",\n+      headers: {\n+        Accept: \"application/json\",\n+      },\n+      timeout: 10000, // 10 second timeout\n+    });\n+\n+    if (!response.ok) {\n+      throw new Error(\n+        `Failed to fetch OIDC configuration: ${response.status} ${response.statusText}`\n+      );\n+    }\n+\n+    const config = (await response.json()) as OIDCConfiguration;\n+\n+    // Validate required endpoints are present\n+    if (!config.authorization_endpoint) {\n+      throw InternalError(\n+        \"Missing authorization_endpoint in OIDC configuration\"\n+      );\n+    }\n+    if (!config.token_endpoint) {\n+      throw InternalError(\"Missing token_endpoint in OIDC configuration\");\n+    }\n+    if (!config.userinfo_endpoint) {\n+      throw InternalError(\"Missing userinfo_endpoint in OIDC configuration\");\n+    }\n+\n+    Logger.info(\"plugins\", \"Successfully fetched OIDC configuration\", {\n+      issuer: config.issuer,\n+      authorization_endpoint: config.authorization_endpoint,\n+      token_endpoint: config.token_endpoint,\n+      userinfo_endpoint: config.userinfo_endpoint,\n+    });\n+\n+    return config;\n+  } catch (error) {\n+    Logger.error(\"Failed to fetch OIDC configuration\", error);\n+    throw error;\n+  }\n+}\n\ndiff --git a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\nindex 418ddab1e2eb..3f0a7e6f24f1 100644\n--- a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n+++ b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n@@ -705,9 +705,6 @@ export default class DeliverWebhookTask extends BaseTask<Props> {\n       });\n       requestHeaders = {\n         \"Content-Type\": \"application/json\",\n-        \"user-agent\": `Outline-Webhooks${\n-          env.VERSION ? `/${env.VERSION.slice(0, 7)}` : \"\"\n-        }`,\n       } as Record<string, string>;\n \n       const signature = subscription.signature(JSON.stringify(requestBody));\n\ndiff --git a/server/index.ts b/server/index.ts\nindex 45e435322c44..f3b66af29fc4 100644\n--- a/server/index.ts\n+++ b/server/index.ts\n@@ -169,7 +169,7 @@ async function start(_id: number, disconnect: () => void) {\n \n     Logger.info(\"lifecycle\", `Starting ${name} service`);\n     const init = services[name as keyof typeof services];\n-    init(app, server as https.Server, env.SERVICES);\n+    await init(app, server as https.Server, env.SERVICES);\n   }\n \n   server.on(\"error\", (err) => {\n\ndiff --git a/server/routes/auth/index.ts b/server/routes/auth/index.ts\nindex a64cdbd55547..3f6233dbc0e3 100644\n--- a/server/routes/auth/index.ts\n+++ b/server/routes/auth/index.ts\n@@ -4,7 +4,7 @@ import Koa from \"koa\";\n import bodyParser from \"koa-body\";\n import Router from \"koa-router\";\n import { AuthenticationError } from \"@server/errors\";\n-import auth from \"@server/middlewares/authentication\";\n+import authMiddleware from \"@server/middlewares/authentication\";\n import coalesceBody from \"@server/middlewares/coaleseBody\";\n import { Collection, Team, View } from \"@server/models\";\n import AuthenticationHelper from \"@server/models/helpers/AuthenticationHelper\";\n@@ -15,12 +15,17 @@ const router = new Router();\n \n router.use(passport.initialize());\n \n-// dynamically load available authentication provider routes\n-AuthenticationHelper.providers.forEach((provider) => {\n-  router.use(\"/\", provider.value.router.routes());\n-});\n+// dynamically register available authentication provider routes\n+void (async () => {\n+  for (const provider of AuthenticationHelper.providers) {\n+    const resolvedRouter = await provider.value.router;\n+    if (resolvedRouter) {\n+      router.use(\"/\", resolvedRouter.routes());\n+    }\n+  }\n+})();\n \n-router.get(\"/redirect\", auth(), async (ctx: APIContext) => {\n+router.get(\"/redirect\", authMiddleware(), async (ctx: APIContext) => {\n   const { user } = ctx.state.auth;\n   const jwtToken = user.getJwtToken();\n \n\ndiff --git a/server/services/web.ts b/server/services/web.ts\nindex f978652d48be..7105aafaf962 100644\n--- a/server/services/web.ts\n+++ b/server/services/web.ts\n@@ -80,8 +80,8 @@ export default function init(app: Koa = new Koa(), server?: Server) {\n     })\n   );\n \n-  app.use(mount(\"/oauth\", oauth));\n   app.use(mount(\"/auth\", auth));\n+  app.use(mount(\"/oauth\", oauth));\n   app.use(mount(routes));\n \n   return app;\n\ndiff --git a/server/services/worker.ts b/server/services/worker.ts\nindex cfb74b3000cc..37bdac29adf8 100644\n--- a/server/services/worker.ts\n+++ b/server/services/worker.ts\n@@ -14,8 +14,8 @@ import {\n import processors from \"../queues/processors\";\n import tasks from \"../queues/tasks\";\n \n-export default function init() {\n-  void initI18n();\n+export default async function init() {\n+  await initI18n();\n \n   // This queue processes the global event bus\n   globalEventQueue\n\ndiff --git a/server/utils/PluginManager.ts b/server/utils/PluginManager.ts\nindex 3d3af6619c1f..c3f0df78729e 100644\n--- a/server/utils/PluginManager.ts\n+++ b/server/utils/PluginManager.ts\n@@ -39,7 +39,7 @@ export enum Hook {\n  */\n type PluginValueMap = {\n   [Hook.API]: Router;\n-  [Hook.AuthProvider]: { router: Router; id: string };\n+  [Hook.AuthProvider]: { router: Router | Promise<Router>; id: string };\n   [Hook.EmailTemplate]: typeof BaseEmail;\n   [Hook.IssueProvider]: BaseIssueProvider;\n   [Hook.Processor]: typeof BaseProcessor;\n\ndiff --git a/server/utils/fetch.ts b/server/utils/fetch.ts\nindex 19b4f1b5d7f6..79065c3bc193 100644\n--- a/server/utils/fetch.ts\n+++ b/server/utils/fetch.ts\n@@ -7,6 +7,13 @@ import Logger from \"@server/logging/Logger\";\n \n export type { RequestInit } from \"node-fetch\";\n \n+/**\n+ * Default user agent string for outgoing requests.\n+ */\n+export const outlineUserAgent = `Outline-${\n+  env.VERSION ? `/${env.VERSION.slice(0, 7)}` : \"\"\n+}`;\n+\n /**\n  * Fake Chrome user agent string for use in fetch requests to\n  * improve reliability.\n@@ -35,6 +42,10 @@ export default async function fetch(\n \n   const response = await fetchMethod(url, {\n     ...init,\n+    headers: {\n+      \"User-Agent\": outlineUserAgent,\n+      ...init?.headers,\n+    },\n     agent: env.isCloudHosted ? useAgent(url) : undefined,\n   });\n \n",
    "test_patch": "diff --git a/plugins/oidc/server/oidcDiscovery.test.ts b/plugins/oidc/server/oidcDiscovery.test.ts\nnew file mode 100644\nindex 000000000000..7f7640afea62\n--- /dev/null\n+++ b/plugins/oidc/server/oidcDiscovery.test.ts\n@@ -0,0 +1,100 @@\n+import fetchMock from \"jest-fetch-mock\";\n+import { fetchOIDCConfiguration } from \"./oidcDiscovery\";\n+\n+beforeEach(() => {\n+  fetchMock.resetMocks();\n+});\n+\n+describe(\"fetchOIDCConfiguration\", () => {\n+  it(\"should fetch and parse OIDC configuration successfully\", async () => {\n+    const mockConfig = {\n+      issuer: \"https://example.com\",\n+      authorization_endpoint: \"https://example.com/auth\",\n+      token_endpoint: \"https://example.com/token\",\n+      userinfo_endpoint: \"https://example.com/userinfo\",\n+      jwks_uri: \"https://example.com/jwks\",\n+      end_session_endpoint: \"https://example.com/logout\",\n+      scopes_supported: [\"openid\", \"profile\", \"email\"],\n+      response_types_supported: [\"code\"],\n+      grant_types_supported: [\"authorization_code\"],\n+    };\n+\n+    fetchMock.mockResponseOnce(JSON.stringify(mockConfig));\n+\n+    const result = await fetchOIDCConfiguration(\"https://example.com\");\n+\n+    expect(fetchMock).toHaveBeenCalledWith(\n+      \"https://example.com/.well-known/openid-configuration\",\n+      expect.objectContaining({\n+        method: \"GET\",\n+        headers: expect.objectContaining({\n+          Accept: \"application/json\",\n+        }),\n+      })\n+    );\n+\n+    expect(result).toEqual(mockConfig);\n+  });\n+\n+  it(\"should handle issuer URL with trailing slash\", async () => {\n+    const mockConfig = {\n+      issuer: \"https://example.com/\",\n+      authorization_endpoint: \"https://example.com/auth\",\n+      token_endpoint: \"https://example.com/token\",\n+      userinfo_endpoint: \"https://example.com/userinfo\",\n+    };\n+\n+    fetchMock.mockResponseOnce(JSON.stringify(mockConfig));\n+\n+    await fetchOIDCConfiguration(\"https://example.com/\");\n+\n+    expect(fetchMock).toHaveBeenCalledWith(\n+      \"https://example.com/.well-known/openid-configuration\",\n+      expect.any(Object)\n+    );\n+  });\n+\n+  it(\"should throw error when HTTP request fails\", async () => {\n+    fetchMock.mockRejectOnce(new Error(\"Network error\"));\n+\n+    await expect(fetchOIDCConfiguration(\"https://example.com\")).rejects.toThrow(\n+      \"Network error\"\n+    );\n+  });\n+\n+  it(\"should throw error when response is not ok\", async () => {\n+    fetchMock.mockResponseOnce(\"Not Found\", { status: 404 });\n+\n+    await expect(fetchOIDCConfiguration(\"https://example.com\")).rejects.toThrow(\n+      \"Failed to fetch OIDC configuration: 404 Not Found\"\n+    );\n+  });\n+\n+  it(\"should throw error when required endpoints are missing\", async () => {\n+    const incompleteConfig = {\n+      issuer: \"https://example.com\",\n+      authorization_endpoint: \"https://example.com/auth\",\n+      // Missing token_endpoint and userinfo_endpoint\n+    };\n+\n+    fetchMock.mockResponseOnce(JSON.stringify(incompleteConfig));\n+\n+    await expect(fetchOIDCConfiguration(\"https://example.com\")).rejects.toThrow(\n+      \"Missing token_endpoint in OIDC configuration\"\n+    );\n+  });\n+\n+  it(\"should validate all required endpoints\", async () => {\n+    const configMissingAuth = {\n+      issuer: \"https://example.com\",\n+      token_endpoint: \"https://example.com/token\",\n+      userinfo_endpoint: \"https://example.com/userinfo\",\n+    };\n+\n+    fetchMock.mockResponseOnce(JSON.stringify(configMissingAuth));\n+\n+    await expect(fetchOIDCConfiguration(\"https://example.com\")).rejects.toThrow(\n+      \"Missing authorization_endpoint in OIDC configuration\"\n+    );\n+  });\n+});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9297",
    "pr_id": 9297,
    "issue_id": 8315,
    "repo": "outline/outline",
    "problem_statement": "SequelizeDatabaseError: there is no escaped character: \"logs\\\"\nSentry Issue: [OUTLINE-CLOUD-868](https://outline-jl.sentry.io/issues/6252947506/?referrer=github_integration)\n\n```\nSequelizeDatabaseError: there is no escaped character: \"logs\\\"\n  File \"/app/build/server/models/helpers/SearchHelper.js\", line 64, in SearchHelper.searchForTeam\n    const [results, count] = await Promise.all([resultsQuery, countQuery]);\n  File \"/app/build/server/routes/api/documents/documents.js\", line 870, in <anonymous>\n    response = await _SearchHelper.default.searchForTeam(team, {\n  File \"/app/build/server/routes/api/middlewares/apiResponse.js\", line 12, in apiResponseMiddleware\n    await next();\n  File \"/app/build/server/routes/api/middlewares/apiTracer.js\", line 21, in apiTracerMiddleware\n    await next();\n...\n(10 additional frame(s) were not displayed)\n```",
    "issue_word_count": 98,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "server/models/helpers/SearchHelper.test.ts",
      "server/models/helpers/SearchHelper.ts"
    ],
    "pr_changed_test_files": [
      "server/models/helpers/SearchHelper.test.ts"
    ],
    "base_commit": "73fea094a820b59e57ff9dbe27c31809ca36a9e0",
    "head_commit": "9e20446c29f42258bca797b05b3dff42be04d378",
    "repo_url": "https://github.com/outline/outline/pull/9297",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9297",
    "dockerfile": "",
    "pr_merged_at": "2025-05-24T15:30:00.000Z",
    "patch": "diff --git a/server/models/helpers/SearchHelper.ts b/server/models/helpers/SearchHelper.ts\nindex c63fd4bdc9c4..fb2a2aba5cc0 100644\n--- a/server/models/helpers/SearchHelper.ts\n+++ b/server/models/helpers/SearchHelper.ts\n@@ -476,7 +476,7 @@ export default class SearchHelper {\n     if (options.query) {\n       // find words that look like urls, these should be treated separately as the postgres full-text\n       // index will generally not match them.\n-      const likelyUrls = getUrls(options.query);\n+      let likelyUrls = getUrls(options.query);\n \n       // remove likely urls, and escape the rest of the query.\n       let limitedQuery = this.escapeQuery(\n@@ -486,6 +486,9 @@ export default class SearchHelper {\n           .trim()\n       );\n \n+      // Escape the URLs\n+      likelyUrls = likelyUrls.map((url) => this.escapeQuery(url));\n+\n       // Extract quoted queries and add them to the where clause, up to a maximum of 3 total.\n       const quotedQueries = Array.from(limitedQuery.matchAll(/\"([^\"]*)\"/g)).map(\n         (match) => match[1]\n",
    "test_patch": "diff --git a/server/models/helpers/SearchHelper.test.ts b/server/models/helpers/SearchHelper.test.ts\nindex e5f21f1441d6..3a44b196baf2 100644\n--- a/server/models/helpers/SearchHelper.test.ts\n+++ b/server/models/helpers/SearchHelper.test.ts\n@@ -133,10 +133,19 @@ describe(\"SearchHelper\", () => {\n \n     test(\"should handle backslashes in search term\", async () => {\n       const team = await buildTeam();\n+      const collection = await buildCollection({\n+        teamId: team.id,\n+      });\n+      const document = await buildDocument({\n+        teamId: team.id,\n+        collectionId: collection.id,\n+        title: \"test with backslash \\\\\",\n+      });\n       const { results } = await SearchHelper.searchForTeam(team, {\n-        query: \"\\\\\\\\\",\n+        query: \"test with backslash \\\\\",\n       });\n-      expect(results.length).toBe(0);\n+      expect(results.length).toBe(1);\n+      expect(results[0].document?.id).toBe(document.id);\n     });\n \n     test(\"should return the total count of search results\", async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9259",
    "pr_id": 9259,
    "issue_id": 9002,
    "repo": "outline/outline",
    "problem_statement": "Add ability to insert previously uploaded images from a gallery\n## Overview\n\nCurrently, users can upload images to documents and comments, but there's no way to reuse previously uploaded images without uploading them again or copy/pasting between docs. This feature request is to add a gallery view that allows users to select and insert previously uploaded images.\n\n## Current Behavior\n\n- Users can upload images through the editor or comment form\n- Images are stored as attachments in the database and files in storage\n- There's no UI to browse or select previously uploaded images\n- Users must re-upload the same image if they want to use it in multiple places\n\n## Proposed Solution\n\nAdd a gallery component that:\n\n1. Shows thumbnails of previously uploaded images\n3. Provides a search function (optional)\n4. Enables selecting and inserting images into the current editor context\n\n## Implementation Details\n\n### Backend Changes\n\n1. Create a new API endpoint `attachments.list` that:\n   - Returns a paginated list of image attachments for the current user\n   - Supports filtering by document ID, content type (images only), and date range\n   - Returns metadata including image dimensions, file size, and preview URLs\n\n### Frontend Changes\n\n1. Create a new `ImageGallery` component that:\n   - Displays a grid of image thumbnails\n   - Supports pagination for large collections\n   - Allows selecting an image to insert\n\n2. Modify the image upload UI in both the main editor and comment form to:\n   - Add a \"Browse images\" button next to the current upload button\n   - Open the gallery modal when clicked\n\n3. Update the editor to support inserting selected images from the gallery\n\n## User Experience\n\n1. User clicks on the image upload button in the editor\n2. A dropdown appears with options: \"Upload new image\" and \"Browse uploaded images\"\n3. If \"Browse uploaded images\" is selected, the gallery modal opens\n4. User can browse, search, and select an image\n5. Upon selection, the image is inserted at the current cursor position\n\n## Technical Considerations\n\n- The gallery should load images lazily to avoid performance issues with large collections\n- Consider caching recently viewed images for better performance\n- Ensure proper authorization checks to only show images the user has access to\n- Add appropriate loading states and error handling\n\n## Accessibility\n\n- Ensure the gallery is fully keyboard navigable\n- Add proper ARIA labels and roles\n- Support screen readers with appropriate alt text\n\n## Related Components\n\n- `app/scenes/Document/components/CommentForm.tsx` - For comment image uploads\n- `app/utils/files.ts` - For file upload utilities\n- `app/editor/commands/insertFiles.ts` - For inserting files into the editor\n- `server/routes/api/attachments/attachments.ts` - For attachment API endpoints\n- `server/models/Attachment.ts` - For the attachment data model\n\n## Acceptance Criteria\n\n- [ ] Users can view a gallery of previously uploaded images\n- [ ] Users can select and insert images from the gallery into the editor\n- [ ] The gallery shows appropriate thumbnails and metadata\n- [ ] The UI is responsive and works on mobile devices\n- [ ] The feature is accessible and follows the application's design patterns",
    "issue_word_count": 468,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "server/presenters/attachment.ts",
      "server/routes/api/attachments/attachments.test.ts",
      "server/routes/api/attachments/attachments.ts",
      "server/routes/api/attachments/schema.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/attachments/attachments.test.ts"
    ],
    "base_commit": "19627f4d07a739969dbb5d78542ca8d4d728dda4",
    "head_commit": "27afd582795da57feca71818bbf8c4e00c268b8a",
    "repo_url": "https://github.com/outline/outline/pull/9259",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9259",
    "dockerfile": "",
    "pr_merged_at": "2025-05-20T23:25:56.000Z",
    "patch": "diff --git a/server/presenters/attachment.ts b/server/presenters/attachment.ts\nindex 6c46c0fbee3e..f0794da8069b 100644\n--- a/server/presenters/attachment.ts\n+++ b/server/presenters/attachment.ts\n@@ -2,6 +2,7 @@ import { Attachment } from \"@server/models\";\n \n export default function presentAttachment(attachment: Attachment) {\n   return {\n+    userId: attachment.userId,\n     documentId: attachment.documentId,\n     contentType: attachment.contentType,\n     name: attachment.name,\n\ndiff --git a/server/routes/api/attachments/attachments.ts b/server/routes/api/attachments/attachments.ts\nindex e2147daf0fb0..3da6498e79e8 100644\n--- a/server/routes/api/attachments/attachments.ts\n+++ b/server/routes/api/attachments/attachments.ts\n@@ -1,4 +1,5 @@\n import Router from \"koa-router\";\n+import { WhereOptions } from \"sequelize\";\n import { v4 as uuidv4 } from \"uuid\";\n import { AttachmentPreset } from \"@shared/types\";\n import { bytesToHumanReadable, getFileNameFromUrl } from \"@shared/utils/files\";\n@@ -16,8 +17,9 @@ import validate from \"@server/middlewares/validate\";\n import { Attachment, Document } from \"@server/models\";\n import AttachmentHelper from \"@server/models/helpers/AttachmentHelper\";\n import { authorize } from \"@server/policies\";\n-import { presentAttachment } from \"@server/presenters\";\n+import { presentAttachment, presentPolicies } from \"@server/presenters\";\n import UploadAttachmentFromUrlTask from \"@server/queues/tasks/UploadAttachmentFromUrlTask\";\n+import pagination from \"@server/routes/api/middlewares/pagination\";\n import { sequelize } from \"@server/storage/database\";\n import FileStorage from \"@server/storage/files\";\n import BaseStorage from \"@server/storage/files/BaseStorage\";\n@@ -28,6 +30,55 @@ import * as T from \"./schema\";\n \n const router = new Router();\n \n+router.post(\n+  \"attachments.list\",\n+  auth(),\n+  pagination(),\n+  validate(T.AttachmentsListSchema),\n+  async (ctx: APIContext<T.AttachmentsListReq>) => {\n+    const { documentId, userId } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+\n+    const where: WhereOptions<Attachment> = {\n+      teamId: user.teamId,\n+    };\n+\n+    // If a specific user is passed then add to filters\n+    if (userId && user.isAdmin) {\n+      where.userId = userId;\n+    } else {\n+      where.userId = user.id;\n+    }\n+\n+    // If a specific document is passed then add to filters\n+    if (documentId) {\n+      const document = await Document.findByPk(documentId, {\n+        userId: user.id,\n+      });\n+      authorize(user, \"read\", document);\n+      where.documentId = documentId;\n+    }\n+\n+    const [attachments, total] = await Promise.all([\n+      Attachment.findAll({\n+        where,\n+        order: [[\"createdAt\", \"DESC\"]],\n+        offset: ctx.state.pagination.offset,\n+        limit: ctx.state.pagination.limit,\n+      }),\n+      Attachment.count({\n+        where,\n+      }),\n+    ]);\n+\n+    ctx.body = {\n+      pagination: { ...ctx.state.pagination, total },\n+      data: attachments.map(presentAttachment),\n+      policies: presentPolicies(user, attachments),\n+    };\n+  }\n+);\n+\n router.post(\n   \"attachments.create\",\n   rateLimiter(RateLimiterStrategy.TenPerMinute),\n\ndiff --git a/server/routes/api/attachments/schema.ts b/server/routes/api/attachments/schema.ts\nindex 86a432a6eece..e4b4ae4d0b6e 100644\n--- a/server/routes/api/attachments/schema.ts\n+++ b/server/routes/api/attachments/schema.ts\n@@ -3,6 +3,17 @@ import { z } from \"zod\";\n import { AttachmentPreset } from \"@shared/types\";\n import { BaseSchema } from \"@server/routes/api/schema\";\n \n+export const AttachmentsListSchema = BaseSchema.extend({\n+  body: z.object({\n+    /** Id of the document to which the Attachment belongs */\n+    documentId: z.string().uuid().optional(),\n+    /** Id of the user that uploaded the Attachment */\n+    userId: z.string().uuid().optional(),\n+  }),\n+});\n+\n+export type AttachmentsListReq = z.infer<typeof AttachmentsListSchema>;\n+\n export const AttachmentsCreateSchema = BaseSchema.extend({\n   body: z.object({\n     /** Attachment name */\n",
    "test_patch": "diff --git a/server/routes/api/attachments/attachments.test.ts b/server/routes/api/attachments/attachments.test.ts\nindex caeb12926d85..4cee83831da6 100644\n--- a/server/routes/api/attachments/attachments.test.ts\n+++ b/server/routes/api/attachments/attachments.test.ts\n@@ -15,6 +15,120 @@ jest.mock(\"@server/storage/files\");\n \n const server = getTestServer();\n \n+describe(\"#attachments.list\", () => {\n+  it(\"should return attachments for user\", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const attachment = await buildAttachment({\n+      teamId: user.teamId,\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    const attachment2 = await buildAttachment({\n+      teamId: user.teamId,\n+      userId: user.id,\n+    });\n+\n+    const res = await server.post(\"/api/attachments.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.pagination.total).toEqual(2);\n+    expect(body.data.length).toEqual(2);\n+    expect(body.data[0].id).toEqual(attachment.id);\n+    expect(body.data[1].id).toEqual(attachment2.id);\n+  });\n+\n+  it(\"should allow filtering by userId when user is an admin\", async () => {\n+    const admin = await buildAdmin();\n+    const user = await buildUser({ teamId: admin.teamId });\n+    // Attachments for user\n+    const attachment1 = await buildAttachment({\n+      teamId: admin.teamId,\n+      userId: user.id,\n+    });\n+    // Attachment for admin\n+    await buildAttachment({\n+      teamId: admin.teamId,\n+      userId: admin.id,\n+    });\n+\n+    const res = await server.post(\"/api/attachments.list\", {\n+      body: {\n+        userId: user.id,\n+        token: admin.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(1);\n+    expect(body.data[0].id).toEqual(attachment1.id);\n+  });\n+\n+  it(\"should filter by documentId\", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const attachment = await buildAttachment({\n+      teamId: user.teamId,\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    await buildAttachment({\n+      teamId: user.teamId,\n+      userId: user.id,\n+    });\n+\n+    const res = await server.post(\"/api/attachments.list\", {\n+      body: {\n+        documentId: document.id,\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(1);\n+    expect(body.data[0].id).toEqual(attachment.id);\n+  });\n+\n+  it(\"should not return attachments created by other users\", async () => {\n+    const user = await buildUser();\n+    const anotherUser = await buildUser({\n+      teamId: user.teamId,\n+    });\n+    await buildAttachment({\n+      teamId: user.teamId,\n+      userId: anotherUser.id,\n+    });\n+\n+    const res = await server.post(\"/api/attachments.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(0);\n+  });\n+\n+  it(\"should require authentication\", async () => {\n+    const res = await server.post(\"/api/attachments.list\");\n+    expect(res.status).toEqual(401);\n+  });\n+});\n+\n describe(\"#attachments.create\", () => {\n   it(\"should require authentication\", async () => {\n     const res = await server.post(\"/api/attachments.create\");\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9196",
    "pr_id": 9196,
    "issue_id": 8880,
    "repo": "outline/outline",
    "problem_statement": "Add cache for document structure\nWe can add a short redis cache for storing the collection structure.\n\nThere are only a couple of very defined points where this is updated and it can get quite large, making it a good candidate for caching in large workspaces.",
    "issue_word_count": 41,
    "test_files_count": 1,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "server/models/Collection.ts",
      "server/routes/api/collections/collections.ts",
      "server/storage/__mocks__/redis.ts",
      "server/test/setup.ts",
      "server/utils/CacheHelper.ts",
      "server/utils/__mocks__/CacheHelper.ts",
      "server/utils/__mocks__/MutexLock.ts",
      "yarn.lock"
    ],
    "pr_changed_test_files": [
      "server/test/setup.ts"
    ],
    "base_commit": "4ff663e112f6035b4d8be6c506a291024df457cf",
    "head_commit": "3f293944386b7360f704a99f0b09302a3264887c",
    "repo_url": "https://github.com/outline/outline/pull/9196",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9196",
    "dockerfile": "",
    "pr_merged_at": "2025-05-18T22:45:00.000Z",
    "patch": "diff --git a/server/models/Collection.ts b/server/models/Collection.ts\nindex 11cf8c3a3ac0..f7f52647beb5 100644\n--- a/server/models/Collection.ts\n+++ b/server/models/Collection.ts\n@@ -14,7 +14,8 @@ import {\n   EmptyResultError,\n   type CreateOptions,\n   type UpdateOptions,\n-  ScopeOptions,\n+  type ScopeOptions,\n+  type SaveOptions,\n } from \"sequelize\";\n import {\n   Sequelize,\n@@ -39,6 +40,7 @@ import {\n   BeforeCreate,\n   BeforeUpdate,\n   DefaultScope,\n+  AfterSave,\n } from \"sequelize-typescript\";\n import isUUID from \"validator/lib/isUUID\";\n import type { CollectionSort, ProsemirrorData } from \"@shared/types\";\n@@ -48,6 +50,7 @@ import { sortNavigationNodes } from \"@shared/utils/collections\";\n import slugify from \"@shared/utils/slugify\";\n import { CollectionValidation } from \"@shared/validations\";\n import { ValidationError } from \"@server/errors\";\n+import { CacheHelper } from \"@server/utils/CacheHelper\";\n import removeIndexCollision from \"@server/utils/removeIndexCollision\";\n import { generateUrlId } from \"@server/utils/url\";\n import { ValidateIndex } from \"@server/validation\";\n@@ -334,6 +337,34 @@ class Collection extends ParanoidModel<\n     if (!model.content) {\n       model.content = await DocumentHelper.toJSON(model);\n     }\n+    if (model.changed(\"documentStructure\")) {\n+      await CacheHelper.clearData(\n+        CacheHelper.getCollectionDocumentsKey(model.id)\n+      );\n+    }\n+  }\n+\n+  @AfterSave\n+  static async cacheDocumentStructure(\n+    model: Collection,\n+    options: SaveOptions<Collection>\n+  ) {\n+    if (model.changed(\"documentStructure\")) {\n+      const setData = () =>\n+        CacheHelper.setData(\n+          CacheHelper.getCollectionDocumentsKey(model.id),\n+          model.documentStructure,\n+          60\n+        );\n+\n+      if (options.transaction) {\n+        return (options.transaction.parent || options.transaction).afterCommit(\n+          setData\n+        );\n+      }\n+\n+      await setData();\n+    }\n   }\n \n   @BeforeDestroy\n\ndiff --git a/server/routes/api/collections/collections.ts b/server/routes/api/collections/collections.ts\nindex 962eab139865..a74afc3bf01d 100644\n--- a/server/routes/api/collections/collections.ts\n+++ b/server/routes/api/collections/collections.ts\n@@ -38,6 +38,7 @@ import {\n   presentFileOperation,\n } from \"@server/presenters\";\n import { APIContext } from \"@server/types\";\n+import { CacheHelper } from \"@server/utils/CacheHelper\";\n import { RateLimiterStrategy } from \"@server/utils/RateLimiter\";\n import { collectionIndexing } from \"@server/utils/indexing\";\n import pagination from \"../middlewares/pagination\";\n@@ -143,13 +144,25 @@ router.post(\n     const { user } = ctx.state.auth;\n     const collection = await Collection.findByPk(id, {\n       userId: user.id,\n-      includeDocumentStructure: true,\n     });\n \n     authorize(user, \"readDocument\", collection);\n \n+    const documentStructure = await CacheHelper.getDataOrSet(\n+      CacheHelper.getCollectionDocumentsKey(collection.id),\n+      async () =>\n+        (\n+          await Collection.findByPk(collection.id, {\n+            attributes: [\"documentStructure\"],\n+            includeDocumentStructure: true,\n+            rejectOnEmpty: true,\n+          })\n+        ).documentStructure,\n+      60\n+    );\n+\n     ctx.body = {\n-      data: collection.documentStructure || [],\n+      data: documentStructure || [],\n     };\n   }\n );\n\ndiff --git a/server/storage/__mocks__/redis.ts b/server/storage/__mocks__/redis.ts\nnew file mode 100644\nindex 000000000000..c0a349d4920d\n--- /dev/null\n+++ b/server/storage/__mocks__/redis.ts\n@@ -0,0 +1,47 @@\n+import { EventEmitter } from \"events\";\n+\n+// Create a mock Redis client with all needed methods mocked\n+class RedisMock extends EventEmitter {\n+  constructor() {\n+    super();\n+  }\n+\n+  get = jest.fn().mockResolvedValue(null);\n+  set = jest.fn().mockResolvedValue(\"OK\");\n+  del = jest.fn().mockResolvedValue(1);\n+  keys = jest.fn().mockResolvedValue([]);\n+  ping = jest.fn().mockResolvedValue(\"PONG\");\n+  disconnect = jest.fn();\n+  setMaxListeners = jest.fn();\n+}\n+\n+// Mock the RedisAdapter class\n+class RedisAdapter extends RedisMock {\n+  constructor(_url: string | undefined, _options = {}) {\n+    super();\n+  }\n+\n+  private static client: RedisAdapter;\n+  private static subscriber: RedisAdapter;\n+\n+  public static get defaultClient(): RedisAdapter {\n+    return (\n+      this.client ||\n+      (this.client = new this(undefined, {\n+        connectionNameSuffix: \"client\",\n+      }))\n+    );\n+  }\n+\n+  public static get defaultSubscriber(): RedisAdapter {\n+    return (\n+      this.subscriber ||\n+      (this.subscriber = new this(undefined, {\n+        maxRetriesPerRequest: null,\n+        connectionNameSuffix: \"subscriber\",\n+      }))\n+    );\n+  }\n+}\n+\n+export default RedisAdapter;\n\ndiff --git a/server/utils/CacheHelper.ts b/server/utils/CacheHelper.ts\nindex 9748ff16e116..bce71c404fef 100644\n--- a/server/utils/CacheHelper.ts\n+++ b/server/utils/CacheHelper.ts\n@@ -125,4 +125,8 @@ export class CacheHelper {\n   public static getUnfurlKey(teamId: string, url = \"\") {\n     return `unfurl:${teamId}:${url}`;\n   }\n+\n+  public static getCollectionDocumentsKey(collectionId: string) {\n+    return `cd:${collectionId}`;\n+  }\n }\n\ndiff --git a/server/utils/__mocks__/CacheHelper.ts b/server/utils/__mocks__/CacheHelper.ts\nnew file mode 100644\nindex 000000000000..178aac75b99f\n--- /dev/null\n+++ b/server/utils/__mocks__/CacheHelper.ts\n@@ -0,0 +1,54 @@\n+import { Day } from \"@shared/utils/time\";\n+\n+/**\n+ * A Mock Helper class for server-side cache management\n+ */\n+export class CacheHelper {\n+  // Default expiry time for cache data in seconds\n+  private static defaultDataExpiry = Day.seconds;\n+\n+  /**\n+   * Mocked method that resolves with the callback result\n+   */\n+  public static async getDataOrSet<T>(\n+    key: string,\n+    callback: () => Promise<T | undefined>,\n+    _expiry: number,\n+    _lockTimeout: number\n+  ): Promise<T | undefined> {\n+    return await callback();\n+  }\n+\n+  /**\n+   * Mocked method that resolves with undefined\n+   */\n+  public static async getData<T>(_key: string): Promise<T | undefined> {\n+    return undefined;\n+  }\n+\n+  /**\n+   * Mocked method that resolves with void\n+   */\n+  public static async setData<T>(_key: string, _data: T, _expiry?: number) {\n+    return;\n+  }\n+\n+  /**\n+   * Mocked method that resolves with void\n+   */\n+  public static async clearData(_prefix: string) {\n+    return;\n+  }\n+\n+  /**\n+   * These are real methods that don't require mocking as they don't\n+   * interact with Redis directly\n+   */\n+  public static getUnfurlKey(teamId: string, url = \"\") {\n+    return `unfurl:${teamId}:${url}`;\n+  }\n+\n+  public static getCollectionDocumentsKey(collectionId: string) {\n+    return `cd:${collectionId}`;\n+  }\n+}\n\ndiff --git a/server/utils/__mocks__/MutexLock.ts b/server/utils/__mocks__/MutexLock.ts\nnew file mode 100644\nindex 000000000000..df106fd325f8\n--- /dev/null\n+++ b/server/utils/__mocks__/MutexLock.ts\n@@ -0,0 +1,18 @@\n+export class MutexLock {\n+  // Default expiry time for acquiring lock in milliseconds\n+  public static defaultLockTimeout = 4000;\n+\n+  /**\n+   * Returns the mock redlock instance\n+   */\n+  public static get lock() {\n+    return {\n+      acquire: jest.fn().mockResolvedValue({\n+        release: jest.fn().mockResolvedValue(true),\n+        expiration: Date.now() + 10000,\n+      }),\n+    };\n+  }\n+\n+  private static redlock: any;\n+}\n\ndiff --git a/yarn.lock b/yarn.lock\nindex a86baa27d393..36e61a04ed39 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -4136,18 +4136,7 @@\n     \"@smithy/util-utf8\" \"^4.0.0\"\n     tslib \"^2.6.2\"\n \n-\"@smithy/credential-provider-imds@^4.0.2\":\n-  version \"4.0.2\"\n-  resolved \"https://registry.yarnpkg.com/@smithy/credential-provider-imds/-/credential-provider-imds-4.0.2.tgz#1ec34a04842fa69996b151a695b027f0486c69a8\"\n-  integrity sha512-32lVig6jCaWBHnY+OEQ6e6Vnt5vDHaLiydGrwYMW9tPqO688hPGTYRamYJ1EptxEC2rAwJrHWmPoKRBl4iTa8w==\n-  dependencies:\n-    \"@smithy/node-config-provider\" \"^4.0.2\"\n-    \"@smithy/property-provider\" \"^4.0.2\"\n-    \"@smithy/types\" \"^4.2.0\"\n-    \"@smithy/url-parser\" \"^4.0.2\"\n-    tslib \"^2.6.2\"\n-\n-\"@smithy/credential-provider-imds@^4.0.4\":\n+\"@smithy/credential-provider-imds@^4.0.2\", \"@smithy/credential-provider-imds@^4.0.4\":\n   version \"4.0.4\"\n   resolved \"https://registry.yarnpkg.com/@smithy/credential-provider-imds/-/credential-provider-imds-4.0.4.tgz#01315ab90c4cb3e017c1ee2c6e5f958aeaa7cf78\"\n   integrity sha512-jN6M6zaGVyB8FmNGG+xOPQB4N89M1x97MMdMnm1ESjljLS3Qju/IegQizKujaNcy2vXAvrz0en8bobe6E55FEA==\n",
    "test_patch": "diff --git a/server/test/setup.ts b/server/test/setup.ts\nindex 07f0ca917668..8e4e38aad0d7 100644\n--- a/server/test/setup.ts\n+++ b/server/test/setup.ts\n@@ -7,6 +7,11 @@ require(\"@server/storage/database\");\n \n jest.mock(\"bull\");\n \n+// Enable mocks for Redis-related modules\n+jest.mock(\"@server/storage/redis\");\n+jest.mock(\"@server/utils/MutexLock\");\n+jest.mock(\"@server/utils/CacheHelper\");\n+\n // This is needed for the relative manual mock to be picked up\n jest.mock(\"../queues\");\n \n@@ -34,7 +39,9 @@ jest.mock(\"@aws-sdk/s3-request-presigner\", () => ({\n   getSignedUrl: jest.fn(),\n }));\n \n-afterAll(() => Redis.defaultClient.disconnect());\n+afterAll(() => {\n+  Redis.defaultClient.disconnect();\n+});\n \n beforeEach(() => {\n   env.URL = sharedEnv.URL = \"https://app.outline.dev\";\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9193",
    "pr_id": 9193,
    "issue_id": 8880,
    "repo": "outline/outline",
    "problem_statement": "Add cache for document structure\nWe can add a short redis cache for storing the collection structure.\n\nThere are only a couple of very defined points where this is updated and it can get quite large, making it a good candidate for caching in large workspaces.",
    "issue_word_count": 41,
    "test_files_count": 2,
    "non_test_files_count": 16,
    "pr_changed_files": [
      "plugins/slack/server/auth/slack.ts",
      "server/commands/documentLoader.ts",
      "server/commands/documentMover.ts",
      "server/models/Collection.ts",
      "server/models/Document.ts",
      "server/policies/collection.test.ts",
      "server/queues/processors/WebsocketsProcessor.ts",
      "server/queues/tasks/CollectionSubscriptionRemoveUserTask.ts",
      "server/routes/api/collections/collections.ts",
      "server/routes/api/comments/comments.ts",
      "server/routes/api/documents/documents.ts",
      "server/routes/api/events/events.ts",
      "server/routes/api/pins/pins.ts",
      "server/routes/api/shares/shares.ts",
      "server/routes/api/stars/stars.ts",
      "server/routes/api/subscriptions/subscriptions.ts",
      "server/services/websockets.ts",
      "server/test/factories.ts"
    ],
    "pr_changed_test_files": [
      "server/policies/collection.test.ts",
      "server/test/factories.ts"
    ],
    "base_commit": "fcc73e772b6d9b956be6a92f2fc62341fa2259a5",
    "head_commit": "d5dae10a16de829ca5b7db8cc9653e85d2931a47",
    "repo_url": "https://github.com/outline/outline/pull/9193",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9193",
    "dockerfile": "",
    "pr_merged_at": "2025-05-14T04:05:46.000Z",
    "patch": "diff --git a/plugins/slack/server/auth/slack.ts b/plugins/slack/server/auth/slack.ts\nindex e70319335301..60c343d9ad23 100644\n--- a/plugins/slack/server/auth/slack.ts\n+++ b/plugins/slack/server/auth/slack.ts\n@@ -156,9 +156,9 @@ if (env.SLACK_CLIENT_ID && env.SLACK_CLIENT_SECRET) {\n \n       switch (type) {\n         case IntegrationType.Post: {\n-          const collection = await Collection.scope({\n-            method: [\"withMembership\", user.id],\n-          }).findByPk(collectionId);\n+          const collection = await Collection.findByPk(collectionId, {\n+            userId: user.id,\n+          });\n           authorize(user, \"read\", collection);\n           authorize(user, \"update\", user.team);\n \n\ndiff --git a/server/commands/documentLoader.ts b/server/commands/documentLoader.ts\nindex 4b717f0a4072..f937804b2391 100644\n--- a/server/commands/documentLoader.ts\n+++ b/server/commands/documentLoader.ts\n@@ -116,12 +116,10 @@ export default async function loadDocument({\n \n     if (canReadDocument) {\n       if (document.collectionId) {\n-        collection = await Collection.scope(\"withDocumentStructure\").findByPk(\n-          document.collectionId,\n-          {\n-            rejectOnEmpty: true,\n-          }\n-        );\n+        collection = await Collection.findByPk(document.collectionId, {\n+          includeDocumentStructure: true,\n+          rejectOnEmpty: true,\n+        });\n       }\n \n       return {\n@@ -140,12 +138,10 @@ export default async function loadDocument({\n \n     // It is possible to disable sharing at the collection so we must check\n     if (document.collectionId) {\n-      collection = await Collection.scope(\"withDocumentStructure\").findByPk(\n-        document.collectionId,\n-        {\n-          rejectOnEmpty: true,\n-        }\n-      );\n+      collection = await Collection.findByPk(document.collectionId, {\n+        includeDocumentStructure: true,\n+        rejectOnEmpty: true,\n+      });\n     }\n \n     if (!collection?.sharing) {\n\ndiff --git a/server/commands/documentMover.ts b/server/commands/documentMover.ts\nindex 76a3a947d361..f09f6c361d35 100644\n--- a/server/commands/documentMover.ts\n+++ b/server/commands/documentMover.ts\n@@ -65,21 +65,18 @@ async function documentMover({\n     result.documents.push(document);\n   } else {\n     // Load the current and the next collection upfront and lock them\n-    const collection = await Collection.scope(\"withDocumentStructure\").findByPk(\n-      document.collectionId!,\n-      {\n-        transaction,\n-        lock: Transaction.LOCK.UPDATE,\n-        paranoid: false,\n-      }\n-    );\n+    const collection = await Collection.findByPk(document.collectionId!, {\n+      includeDocumentStructure: true,\n+      transaction,\n+      lock: Transaction.LOCK.UPDATE,\n+      paranoid: false,\n+    });\n \n     let newCollection = collection;\n     if (collectionChanged) {\n       if (collectionId) {\n-        newCollection = await Collection.scope(\n-          \"withDocumentStructure\"\n-        ).findByPk(collectionId, {\n+        newCollection = await Collection.findByPk(collectionId, {\n+          includeDocumentStructure: true,\n           transaction,\n           lock: Transaction.LOCK.UPDATE,\n         });\n@@ -148,13 +145,11 @@ async function documentMover({\n \n       if (collectionId) {\n         // Reload the collection to get relationship data\n-        newCollection = await Collection.scope([\n-          {\n-            method: [\"withMembership\", user.id],\n-          },\n-        ]).findByPk(collectionId, {\n-          transaction,\n+        newCollection = await Collection.findByPk(collectionId, {\n+          userId: user.id,\n+          includeDocumentStructure: true,\n           rejectOnEmpty: true,\n+          transaction,\n         });\n \n         result.collections.push(newCollection);\n\ndiff --git a/server/models/Collection.ts b/server/models/Collection.ts\nindex a388a1784445..90432f764ade 100644\n--- a/server/models/Collection.ts\n+++ b/server/models/Collection.ts\n@@ -67,6 +67,8 @@ import Length from \"./validators/Length\";\n import NotContainsUrl from \"./validators/NotContainsUrl\";\n \n type AdditionalFindOptions = {\n+  userId?: string;\n+  includeDocumentStructure?: boolean;\n   rejectOnEmpty?: boolean | Error;\n };\n \n@@ -466,9 +468,9 @@ class Collection extends ParanoidModel<\n    * @returns userIds\n    */\n   static async membershipUserIds(collectionId: string) {\n-    const collection = await this.scope(\"withAllMemberships\").findByPk(\n-      collectionId\n-    );\n+    const collection = await this.scope(\"withAllMemberships\").findOne({\n+      where: { id: collectionId },\n+    });\n     if (!collection) {\n       return [];\n     }\n@@ -485,6 +487,7 @@ class Collection extends ParanoidModel<\n \n   /**\n    * Overrides the standard findByPk behavior to allow also querying by urlId\n+   * and loading memberships for a user passed in by `userId`\n    *\n    * @param id uuid or urlId\n    * @param options FindOptions\n@@ -506,16 +509,25 @@ class Collection extends ParanoidModel<\n       return null;\n     }\n \n+    const { includeDocumentStructure, userId, ...rest } = options;\n+\n+    const scope = this.scope([\n+      includeDocumentStructure ? \"withDocumentStructure\" : \"defaultScope\",\n+      {\n+        method: [\"withMembership\", userId],\n+      },\n+    ]);\n+\n     if (isUUID(id)) {\n-      const collection = await this.findOne({\n+      const collection = await scope.findOne({\n         where: {\n           id,\n         },\n-        ...options,\n+        ...rest,\n         rejectOnEmpty: false,\n       });\n \n-      if (!collection && options.rejectOnEmpty) {\n+      if (!collection && rest.rejectOnEmpty) {\n         throw new EmptyResultError(`Collection doesn't exist with id: ${id}`);\n       }\n \n@@ -524,7 +536,7 @@ class Collection extends ParanoidModel<\n \n     const match = id.match(UrlHelper.SLUG_URL_REGEX);\n     if (match) {\n-      const collection = await this.findOne({\n+      const collection = await scope.findOne({\n         where: {\n           urlId: match[1],\n         },\n@@ -532,7 +544,7 @@ class Collection extends ParanoidModel<\n         rejectOnEmpty: false,\n       });\n \n-      if (!collection && options.rejectOnEmpty) {\n+      if (!collection && rest.rejectOnEmpty) {\n         throw new EmptyResultError(`Collection doesn't exist with id: ${id}`);\n       }\n \n\ndiff --git a/server/models/Document.ts b/server/models/Document.ts\nindex 4afc58bf3d9a..ae9f4df6c13a 100644\n--- a/server/models/Document.ts\n+++ b/server/models/Document.ts\n@@ -426,13 +426,11 @@ class Document extends ArchivableModel<\n       return;\n     }\n \n-    const collection = await Collection.scope(\"withDocumentStructure\").findByPk(\n-      model.collectionId,\n-      {\n-        transaction,\n-        lock: Transaction.LOCK.UPDATE,\n-      }\n-    );\n+    const collection = await Collection.findByPk(model.collectionId, {\n+      includeDocumentStructure: true,\n+      transaction,\n+      lock: Transaction.LOCK.UPDATE,\n+    });\n     if (!collection) {\n       return;\n     }\n@@ -453,9 +451,8 @@ class Document extends ArchivableModel<\n     }\n \n     return this.sequelize!.transaction(async (transaction: Transaction) => {\n-      const collection = await Collection.scope(\n-        \"withDocumentStructure\"\n-      ).findByPk(model.collectionId!, {\n+      const collection = await Collection.findByPk(model.collectionId!, {\n+        includeDocumentStructure: true,\n         transaction,\n         lock: transaction.LOCK.UPDATE,\n       });\n@@ -667,10 +664,11 @@ class Document extends ArchivableModel<\n \n   /**\n    * Overrides the standard findByPk behavior to allow also querying by urlId\n+   * and loading memberships for a user passed in by `userId`\n    *\n    * @param id uuid or urlId\n    * @param options FindOptions\n-   * @returns A promise resolving to a collection instance or null\n+   * @returns A promise resolving to a document instance or null\n    */\n   static async findByPk(\n     id: Identifier,\n@@ -695,7 +693,7 @@ class Document extends ArchivableModel<\n     // almost every endpoint needs the collection membership to determine policy permissions.\n     const scope = this.scope([\n       \"withDrafts\",\n-      options.includeState ? \"withState\" : \"withoutState\",\n+      includeState ? \"withState\" : \"withoutState\",\n       {\n         method: [\"withViews\", userId],\n       },\n@@ -943,9 +941,8 @@ class Document extends ArchivableModel<\n     }\n \n     if (!this.template && this.collectionId) {\n-      const collection = await Collection.scope(\n-        \"withDocumentStructure\"\n-      ).findByPk(this.collectionId, {\n+      const collection = await Collection.findByPk(this.collectionId, {\n+        includeDocumentStructure: true,\n         transaction,\n         lock: Transaction.LOCK.UPDATE,\n       });\n@@ -1012,13 +1009,11 @@ class Document extends ArchivableModel<\n \n     await this.sequelize.transaction(async (transaction: Transaction) => {\n       const collection = this.collectionId\n-        ? await Collection.scope(\"withDocumentStructure\").findByPk(\n-            this.collectionId,\n-            {\n-              transaction,\n-              lock: transaction.LOCK.UPDATE,\n-            }\n-          )\n+        ? await Collection.findByPk(this.collectionId, {\n+            includeDocumentStructure: true,\n+            transaction,\n+            lock: transaction.LOCK.UPDATE,\n+          })\n         : undefined;\n \n       if (collection) {\n@@ -1049,13 +1044,11 @@ class Document extends ArchivableModel<\n   archive = async (user: User, options?: FindOptions) => {\n     const { transaction } = { ...options };\n     const collection = this.collectionId\n-      ? await Collection.scope(\"withDocumentStructure\").findByPk(\n-          this.collectionId,\n-          {\n-            transaction,\n-            lock: transaction?.LOCK.UPDATE,\n-          }\n-        )\n+      ? await Collection.findByPk(this.collectionId, {\n+          includeDocumentStructure: true,\n+          transaction,\n+          lock: transaction?.LOCK.UPDATE,\n+        })\n       : undefined;\n \n     if (collection) {\n@@ -1076,7 +1069,8 @@ class Document extends ArchivableModel<\n   ) => {\n     const { transaction } = { ...options };\n     const collection = collectionId\n-      ? await Collection.scope(\"withDocumentStructure\").findByPk(collectionId, {\n+      ? await Collection.findByPk(collectionId, {\n+          includeDocumentStructure: true,\n           transaction,\n           lock: transaction?.LOCK.UPDATE,\n         })\n@@ -1128,9 +1122,8 @@ class Document extends ArchivableModel<\n       let deleted = false;\n \n       if (!this.template && this.collectionId) {\n-        const collection = await Collection.scope(\n-          \"withDocumentStructure\"\n-        ).findByPk(this.collectionId!, {\n+        const collection = await Collection.findByPk(this.collectionId!, {\n+          includeDocumentStructure: true,\n           transaction,\n           lock: transaction.LOCK.UPDATE,\n           paranoid: false,\n\ndiff --git a/server/queues/processors/WebsocketsProcessor.ts b/server/queues/processors/WebsocketsProcessor.ts\nindex cda612faced7..0ffb730bffc1 100644\n--- a/server/queues/processors/WebsocketsProcessor.ts\n+++ b/server/queues/processors/WebsocketsProcessor.ts\n@@ -353,9 +353,9 @@ export default class WebsocketsProcessor {\n \n       case \"collections.remove_user\": {\n         const [collection, user] = await Promise.all([\n-          Collection.scope({\n-            method: [\"withMembership\", event.userId],\n-          }).findByPk(event.collectionId),\n+          Collection.findByPk(event.collectionId, {\n+            userId: event.userId,\n+          }),\n           User.findByPk(event.userId),\n         ]);\n         if (!user) {\n@@ -424,9 +424,9 @@ export default class WebsocketsProcessor {\n           async (groupUsers) => {\n             for (const groupUser of groupUsers) {\n               const [collection, user] = await Promise.all([\n-                Collection.scope({\n-                  method: [\"withMembership\", groupUser.userId],\n-                }).findByPk(event.collectionId),\n+                Collection.findByPk(event.collectionId, {\n+                  userId: groupUser.userId,\n+                }),\n                 User.findByPk(groupUser.userId),\n               ]);\n               if (!user) {\n@@ -716,9 +716,12 @@ export default class WebsocketsProcessor {\n                   presentGroupMembership(groupMembership)\n                 );\n \n-              const collection = await Collection.scope({\n-                method: [\"withMembership\", event.userId],\n-              }).findByPk(groupMembership.collectionId);\n+              const collection = await Collection.findByPk(\n+                groupMembership.collectionId,\n+                {\n+                  userId: event.userId,\n+                }\n+              );\n \n               if (cannot(user, \"read\", collection)) {\n                 // tell any user clients to disconnect from the websocket channel for the collection\n@@ -772,9 +775,12 @@ export default class WebsocketsProcessor {\n                     .to(`user-${groupUser.userId}`)\n                     .emit(\"collections.remove_group\", payload);\n \n-                  const collection = await Collection.scope({\n-                    method: [\"withMembership\", groupUser.userId],\n-                  }).findByPk(groupMembership.collectionId);\n+                  const collection = await Collection.findByPk(\n+                    groupMembership.collectionId,\n+                    {\n+                      userId: groupUser.userId,\n+                    }\n+                  );\n \n                   if (cannot(groupUser.user, \"read\", collection)) {\n                     // tell any user clients to disconnect from the websocket channel for the collection\n\ndiff --git a/server/queues/tasks/CollectionSubscriptionRemoveUserTask.ts b/server/queues/tasks/CollectionSubscriptionRemoveUserTask.ts\nindex 3048673171eb..a0f1d48eb0de 100644\n--- a/server/queues/tasks/CollectionSubscriptionRemoveUserTask.ts\n+++ b/server/queues/tasks/CollectionSubscriptionRemoveUserTask.ts\n@@ -16,9 +16,9 @@ export default class CollectionSubscriptionRemoveUserTask extends BaseTask<Colle\n       return;\n     }\n \n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(event.collectionId);\n+    const collection = await Collection.findByPk(event.collectionId, {\n+      userId: user.id,\n+    });\n \n     if (can(user, \"read\", collection)) {\n       Logger.debug(\n\ndiff --git a/server/routes/api/collections/collections.ts b/server/routes/api/collections/collections.ts\nindex dadd2eecf653..962eab139865 100644\n--- a/server/routes/api/collections/collections.ts\n+++ b/server/routes/api/collections/collections.ts\n@@ -1,4 +1,3 @@\n-import invariant from \"invariant\";\n import Router from \"koa-router\";\n import { Sequelize, Op, WhereOptions } from \"sequelize\";\n import {\n@@ -96,12 +95,11 @@ router.post(\n       },\n     });\n     // we must reload the collection to get memberships for policy presenter\n-    const reloaded = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(collection.id, {\n+    const reloaded = await Collection.findByPk(collection.id, {\n+      userId: user.id,\n       transaction,\n+      rejectOnEmpty: true,\n     });\n-    invariant(reloaded, \"collection not found\");\n \n     ctx.body = {\n       data: await presentCollection(ctx, reloaded),\n@@ -118,11 +116,14 @@ router.post(\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const collection = await Collection.scope([\n+      \"defaultScope\",\n+      \"withArchivedBy\",\n       {\n         method: [\"withMembership\", user.id],\n       },\n-      \"withArchivedBy\",\n-    ]).findByPk(id);\n+    ]).findOne({\n+      where: { id },\n+    });\n \n     authorize(user, \"read\", collection);\n \n@@ -140,11 +141,10 @@ router.post(\n   async (ctx: APIContext<T.CollectionsDocumentsReq>) => {\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n-    const collection = await Collection.scope([\n-      {\n-        method: [\"withMembership\", user.id],\n-      },\n-    ]).findByPk(id);\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n+      includeDocumentStructure: true,\n+    });\n \n     authorize(user, \"readDocument\", collection);\n \n@@ -201,9 +201,7 @@ router.post(\n     const { user } = ctx.state.auth;\n \n     const [collection, group] = await Promise.all([\n-      Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(id, { transaction }),\n+      Collection.findByPk(id, { userId: user.id, transaction }),\n       Group.findByPk(groupId, { transaction }),\n     ]);\n     authorize(user, \"update\", collection);\n@@ -248,9 +246,8 @@ router.post(\n     const { transaction } = ctx.state;\n \n     const [collection, group] = await Promise.all([\n-      Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(id, {\n+      Collection.findByPk(id, {\n+        userId: user.id,\n         transaction,\n       }),\n       Group.findByPk(groupId, {\n@@ -286,9 +283,9 @@ router.post(\n     const { id, query, permission } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(id);\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n+    });\n     authorize(user, \"read\", collection);\n \n     let where: WhereOptions<GroupMembership> = {\n@@ -356,9 +353,7 @@ router.post(\n     const { id, userId, permission } = ctx.input.body;\n \n     const [collection, user] = await Promise.all([\n-      Collection.scope({\n-        method: [\"withMembership\", actor.id],\n-      }).findByPk(id, { transaction }),\n+      Collection.findByPk(id, { userId, transaction }),\n       User.findByPk(userId, { transaction }),\n     ]);\n     authorize(actor, \"update\", collection);\n@@ -402,9 +397,7 @@ router.post(\n     const { id, userId } = ctx.input.body;\n \n     const [collection, user] = await Promise.all([\n-      Collection.scope({\n-        method: [\"withMembership\", actor.id],\n-      }).findByPk(id, { transaction }),\n+      Collection.findByPk(id, { userId, transaction }),\n       User.findByPk(userId, { transaction }),\n     ]);\n     authorize(actor, \"update\", collection);\n@@ -435,9 +428,9 @@ router.post(\n     const { id, query, permission } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(id);\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n+    });\n     authorize(user, \"read\", collection);\n \n     let where: WhereOptions<UserMembership> = {\n@@ -503,9 +496,10 @@ router.post(\n     const team = await Team.findByPk(user.teamId, { transaction });\n     authorize(user, \"createExport\", team);\n \n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(id, { transaction });\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n+      transaction,\n+    });\n     authorize(user, \"export\", collection);\n \n     const fileOperation = await collectionExporter({\n@@ -576,9 +570,8 @@ router.post(\n     } = ctx.input.body;\n \n     const { user } = ctx.state.auth;\n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(id, {\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n       transaction,\n     });\n     authorize(user, \"update\", collection);\n@@ -814,9 +807,8 @@ router.post(\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(id, {\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n       transaction,\n     });\n \n@@ -845,11 +837,8 @@ router.post(\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.scope([\n-      {\n-        method: [\"withMembership\", user.id],\n-      },\n-    ]).findByPk(id, {\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n       transaction,\n       rejectOnEmpty: true,\n     });\n@@ -905,11 +894,11 @@ router.post(\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(id, {\n-      transaction,\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n+      includeDocumentStructure: true,\n       rejectOnEmpty: true,\n+      transaction,\n     });\n \n     authorize(user, \"restore\", collection);\n\ndiff --git a/server/routes/api/comments/comments.ts b/server/routes/api/comments/comments.ts\nindex 6b86a3d0e7d7..f864bf8ac9d9 100644\n--- a/server/routes/api/comments/comments.ts\n+++ b/server/routes/api/comments/comments.ts\n@@ -154,7 +154,9 @@ router.post(\n       ]);\n       comments.forEach((comment) => (comment.document = document));\n     } else if (collectionId) {\n-      const collection = await Collection.findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n       authorize(user, \"read\", collection);\n       const include = [\n         {\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 1ddda20176e2..76d288bfd6eb 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -133,12 +133,10 @@ router.post(\n     // if a specific collection is passed then we need to check auth to view it\n     if (collectionId) {\n       where[Op.and].push({ collectionId: [collectionId] });\n-      const collection = await Collection.scope([\n-        sort === \"index\" ? \"withDocumentStructure\" : \"defaultScope\",\n-        {\n-          method: [\"withMembership\", user.id],\n-        },\n-      ]).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+        includeDocumentStructure: sort === \"index\",\n+      });\n \n       authorize(user, \"readDocument\", collection);\n \n@@ -331,9 +329,9 @@ router.post(\n     // if a specific collection is passed then we need to check auth to view it\n     if (collectionId) {\n       where = { ...where, collectionId };\n-      const collection = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n       authorize(user, \"readDocument\", collection);\n \n       // index sort is special because it uses the order of the documents in the\n@@ -512,9 +510,9 @@ router.post(\n     const { user } = ctx.state.auth;\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n       authorize(user, \"readDocument\", collection);\n     }\n \n@@ -821,15 +819,20 @@ router.post(\n     const destCollectionId = collectionId ?? sourceCollectionId;\n \n     const srcCollection = sourceCollectionId\n-      ? await Collection.scope({\n-          method: [\"withMembership\", user.id],\n-        }).findByPk(sourceCollectionId, { paranoid: false })\n+      ? await Collection.findByPk(sourceCollectionId, {\n+          userId: user.id,\n+          includeDocumentStructure: true,\n+          paranoid: false,\n+          transaction,\n+        })\n       : undefined;\n \n     const destCollection = destCollectionId\n-      ? await Collection.scope({\n-          method: [\"withMembership\", user.id],\n-        }).findByPk(destCollectionId)\n+      ? await Collection.findByPk(destCollectionId, {\n+          userId: user.id,\n+          includeDocumentStructure: true,\n+          transaction,\n+        })\n       : undefined;\n \n     // In case of workspace templates, both source and destination collections are undefined.\n@@ -931,9 +934,9 @@ router.post(\n     let collaboratorIds = undefined;\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n       authorize(user, \"readDocument\", collection);\n     }\n \n@@ -1027,9 +1030,9 @@ router.post(\n       teamId = user.teamId;\n \n       if (collectionId) {\n-        const collection = await Collection.scope({\n-          method: [\"withMembership\", user.id],\n-        }).findByPk(collectionId);\n+        const collection = await Collection.findByPk(collectionId, {\n+          userId: user.id,\n+        });\n         authorize(user, \"readDocument\", collection);\n       }\n \n@@ -1118,9 +1121,10 @@ router.post(\n     authorize(user, \"update\", original);\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collectionId, { transaction });\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+        transaction,\n+      });\n       authorize(user, \"createDocument\", collection);\n     } else {\n       authorize(user, \"createTemplate\", user.team);\n@@ -1205,9 +1209,10 @@ router.post(\n           collectionId,\n           \"collectionId is required to publish a draft without collection\"\n         );\n-        collection = await Collection.scope({\n-          method: [\"withMembership\", user.id],\n-        }).findByPk(collectionId!, { transaction });\n+        collection = await Collection.findByPk(collectionId!, {\n+          userId: user.id,\n+          transaction,\n+        });\n       }\n \n       if (document.parentDocumentId) {\n@@ -1261,9 +1266,10 @@ router.post(\n     authorize(user, \"read\", document);\n \n     const collection = collectionId\n-      ? await Collection.scope({\n-          method: [\"withMembership\", user.id],\n-        }).findByPk(collectionId, { transaction })\n+      ? await Collection.findByPk(collectionId, {\n+          userId: user.id,\n+          transaction,\n+        })\n       : document?.collection;\n \n     if (collection) {\n@@ -1323,9 +1329,10 @@ router.post(\n     authorize(user, \"move\", document);\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collectionId, { transaction });\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+        transaction,\n+      });\n       authorize(user, \"updateDocument\", collection);\n     } else if (document.template) {\n       authorize(user, \"updateTemplate\", user.team);\n@@ -1503,13 +1510,8 @@ router.post(\n     const file = ctx.input.file;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findOne({\n-      where: {\n-        id: collectionId,\n-        teamId: user.teamId,\n-      },\n+    const collection = await Collection.findByPk(collectionId, {\n+      userId: user.id,\n     });\n     authorize(user, \"createDocument\", collection);\n     let parentDocument;\n@@ -1606,14 +1608,8 @@ router.post(\n       });\n \n       if (parentDocument?.collectionId) {\n-        collection = await Collection.scope({\n-          method: [\"withMembership\", user.id],\n-        }).findOne({\n-          where: {\n-            id: parentDocument.collectionId,\n-            teamId: user.teamId,\n-          },\n-          transaction,\n+        collection = await Collection.findByPk(parentDocument.collectionId, {\n+          userId: user.id,\n         });\n       }\n \n@@ -1621,13 +1617,8 @@ router.post(\n         collection,\n       });\n     } else if (collectionId) {\n-      collection = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findOne({\n-        where: {\n-          id: collectionId,\n-          teamId: user.teamId,\n-        },\n+      collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n         transaction,\n       });\n       authorize(user, \"createDocument\", collection);\n\ndiff --git a/server/routes/api/events/events.ts b/server/routes/api/events/events.ts\nindex d12207f63fb5..ce1c2394dafa 100644\n--- a/server/routes/api/events/events.ts\n+++ b/server/routes/api/events/events.ts\n@@ -61,9 +61,9 @@ router.post(\n     if (collectionId) {\n       where = { ...where, collectionId };\n \n-      const collection = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n       authorize(user, \"read\", collection);\n     } else {\n       const collectionIds = await user.collectionIds({\n\ndiff --git a/server/routes/api/pins/pins.ts b/server/routes/api/pins/pins.ts\nindex 633549d0b52b..6e0cb61591f6 100644\n--- a/server/routes/api/pins/pins.ts\n+++ b/server/routes/api/pins/pins.ts\n@@ -33,9 +33,10 @@ router.post(\n     authorize(user, \"read\", document);\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collectionId, { transaction });\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+        transaction,\n+      });\n       authorize(user, \"update\", collection);\n       authorize(user, \"pin\", document);\n     } else {\n\ndiff --git a/server/routes/api/shares/shares.ts b/server/routes/api/shares/shares.ts\nindex b782446d89bf..1d3eed3bc02a 100644\n--- a/server/routes/api/shares/shares.ts\n+++ b/server/routes/api/shares/shares.ts\n@@ -55,9 +55,10 @@ router.post(\n       authorize(user, \"read\", document);\n \n       const collection = document.collectionId\n-        ? await Collection.scope(\"withDocumentStructure\").findByPk(\n-            document.collectionId\n-          )\n+        ? await Collection.findByPk(document.collectionId, {\n+            userId: user.id,\n+            includeDocumentStructure: true,\n+          })\n         : undefined;\n       const parentIds = collection?.getDocumentParents(documentId);\n       const parentShare = parentIds\n\ndiff --git a/server/routes/api/stars/stars.ts b/server/routes/api/stars/stars.ts\nindex 533446162aa3..f34fd7558e4a 100644\n--- a/server/routes/api/stars/stars.ts\n+++ b/server/routes/api/stars/stars.ts\n@@ -37,9 +37,10 @@ router.post(\n     }\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collectionId, { transaction });\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+        transaction,\n+      });\n       authorize(user, \"star\", collection);\n     }\n \n\ndiff --git a/server/routes/api/subscriptions/subscriptions.ts b/server/routes/api/subscriptions/subscriptions.ts\nindex 78d1017fc8ce..650b57f01f90 100644\n--- a/server/routes/api/subscriptions/subscriptions.ts\n+++ b/server/routes/api/subscriptions/subscriptions.ts\n@@ -34,9 +34,10 @@ router.post(\n     };\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+        transaction: ctx.state.transaction,\n+      });\n       authorize(user, \"read\", collection);\n \n       where.collectionId = collectionId;\n@@ -78,9 +79,9 @@ router.post(\n     };\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n       authorize(user, \"read\", collection);\n \n       where.collectionId = collectionId;\n@@ -116,9 +117,9 @@ router.post(\n     const { event, collectionId, documentId } = ctx.input.body;\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n \n       authorize(user, \"subscribe\", collection);\n     } else {\n\ndiff --git a/server/services/websockets.ts b/server/services/websockets.ts\nindex 5d19a2e086b8..9b45433dbf95 100644\n--- a/server/services/websockets.ts\n+++ b/server/services/websockets.ts\n@@ -191,9 +191,9 @@ async function authenticated(io: IO.Server, socket: SocketWithAuth) {\n     // user is joining a collection channel, because their permissions have\n     // changed, granting them access.\n     if (event.collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(event.collectionId);\n+      const collection = await Collection.findByPk(event.collectionId, {\n+        userId: user.id,\n+      });\n \n       if (can(user, \"read\", collection)) {\n         await socket.join(`collection-${event.collectionId}`);\n",
    "test_patch": "diff --git a/server/policies/collection.test.ts b/server/policies/collection.test.ts\nindex a177716c2cc5..bda29b10759e 100644\n--- a/server/policies/collection.test.ts\n+++ b/server/policies/collection.test.ts\n@@ -14,9 +14,9 @@ describe(\"admin\", () => {\n     const admin = await buildAdmin({ teamId: team.id });\n     const collection = await buildCollection({ teamId: team.id });\n     // reload to get membership\n-    const reloaded = await Collection.scope({\n-      method: [\"withMembership\", admin.id],\n-    }).findByPk(collection.id);\n+    const reloaded = await Collection.findByPk(collection.id, {\n+      userId: admin.id,\n+    });\n     const abilities = serialize(admin, reloaded);\n     expect(abilities.read).toBeTruthy();\n     expect(abilities.update).toBeTruthy();\n@@ -36,9 +36,9 @@ describe(\"admin\", () => {\n       permission: null,\n     });\n     // reload to get membership\n-    const reloaded = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(collection.id);\n+    const reloaded = await Collection.findByPk(collection.id, {\n+      userId: user.id,\n+    });\n     const abilities = serialize(user, reloaded);\n     expect(abilities.readDocument).toEqual(false);\n     expect(abilities.updateDocument).toEqual(false);\n@@ -59,9 +59,9 @@ describe(\"admin\", () => {\n       permission: CollectionPermission.Read,\n     });\n     // reload to get membership\n-    const reloaded = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(collection.id);\n+    const reloaded = await Collection.findByPk(collection.id, {\n+      userId: user.id,\n+    });\n     const abilities = serialize(user, reloaded);\n     expect(abilities.readDocument).toBeTruthy();\n     expect(abilities.updateDocument).toBeTruthy();\n@@ -87,9 +87,9 @@ describe(\"member\", () => {\n         },\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\"withMembership\", member.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: member.id,\n+      });\n       const abilities = serialize(member, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.update).toBeTruthy();\n@@ -116,9 +116,9 @@ describe(\"member\", () => {\n         },\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\"withMembership\", member.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: member.id,\n+      });\n       const abilities = serialize(member, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.update).toBe(false);\n@@ -161,9 +161,9 @@ describe(\"member\", () => {\n         permission: CollectionPermission.Read,\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: user.id,\n+      });\n       const abilities = serialize(user, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n@@ -189,9 +189,9 @@ describe(\"member\", () => {\n         },\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\"withMembership\", member.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: member.id,\n+      });\n       const abilities = serialize(member, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.update).not.toBeTruthy();\n@@ -232,9 +232,9 @@ describe(\"member\", () => {\n         },\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\"withMembership\", member.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: member.id,\n+      });\n       const abilities = serialize(member, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n@@ -279,9 +279,9 @@ describe(\"member\", () => {\n         permission: CollectionPermission.ReadWrite,\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: user.id,\n+      });\n       const abilities = serialize(user, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n@@ -331,9 +331,9 @@ describe(\"viewer\", () => {\n         permission: CollectionPermission.ReadWrite,\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: user.id,\n+      });\n       const abilities = serialize(user, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n@@ -361,9 +361,9 @@ describe(\"viewer\", () => {\n         permission: CollectionPermission.ReadWrite,\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: user.id,\n+      });\n       const abilities = serialize(user, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n@@ -409,9 +409,9 @@ describe(\"viewer\", () => {\n         permission: CollectionPermission.ReadWrite,\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: user.id,\n+      });\n       const abilities = serialize(user, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n@@ -462,9 +462,9 @@ describe(\"guest\", () => {\n       permission: CollectionPermission.Read,\n     });\n     // reload to get membership\n-    const reloaded = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(collection.id);\n+    const reloaded = await Collection.findByPk(collection.id, {\n+      userId: user.id,\n+    });\n     const abilities = serialize(user, reloaded);\n     expect(abilities.read).toBeTruthy();\n     expect(abilities.readDocument).toBeTruthy();\n\ndiff --git a/server/test/factories.ts b/server/test/factories.ts\nindex 6632be8aa0e1..05378dd6b83f 100644\n--- a/server/test/factories.ts\n+++ b/server/test/factories.ts\n@@ -416,9 +416,9 @@ export async function buildDocument(\n \n   if (overrides.collectionId && overrides.publishedAt !== null) {\n     collection = collection\n-      ? await Collection.scope(\"withDocumentStructure\").findByPk(\n-          overrides.collectionId\n-        )\n+      ? await Collection.findByPk(overrides.collectionId, {\n+          includeDocumentStructure: true,\n+        })\n       : undefined;\n \n     await collection?.addDocumentToStructure(document, 0);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9132",
    "pr_id": 9132,
    "issue_id": 9035,
    "repo": "outline/outline",
    "problem_statement": "Empty text nodes are not allowed when trying to import from notion\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\nI have set up the Notion integration accordingly to the documentation, the linked account account have access to a duplicated collection.\nWhen i use the import from Notion option it fail : \n`{\"error\":\"Empty text nodes are not allowed\",\"level\":\"error\",\"message\":\"Error processing task in NotionAPIImportTask\",\"stack\":\"RangeError: Empty text nodes are not allowed\\n    at new TextNode (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1205:25)\\n    at Schema.text (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1984:14)\\n    at Function.fromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1187:23)\\n    at Schema.nodeFromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1995:19)\\n    at Array.map (<anonymous>)\\n    at Function.fromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:285:33)\\n    at Function.fromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1189:30)\\n    at Schema.nodeFromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1995:19)\\n    at Array.map (<anonymous>)\\n    at Function.fromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:285:33)\\n    at Function.fromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1189:30)\\n    at ProsemirrorHelper.toProsemirror (/opt/outline/build/server/models/helpers/ProsemirrorHelper.js:71:35)\\n    at /opt/outline/build/server/logging/tracing.js:74:27\\n    at Scope.activate (/opt/outline/node_modules/dd-trace/packages/dd-trace/src/noop/scope.js:11:12)\\n    at ProsemirrorHelper.wrapperFn (/opt/outline/build/server/logging/tracing.js:73:34)\\n    at NotionAPIImportTask.uploadAttachments (/opt/outline/build/server/queues/tasks/APIImportTask.js:224:59)\"}`\n\nI successfully imported a default collection from Notion so I think the problem might not come from my configuration.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n1. Under Settings click on Import then select \"Import pages from Notion\" option\n2. Select pages from the allowed Notion workspace\n3. failing:\n```\nshadohash’s Workspace\n\nFailed • Empty text nodes are not allowed. Check server logs for more details. • You requested  2 hours ago • Notion\n```\n\n### Environment\n\n```markdown\n- Outline:  0.83.0\n- Browser: Firefox 128.9.0esr\n```\n\n### Anything else?\n\n_No response_",
    "issue_word_count": 379,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "plugins/notion/server/utils/NotionConverter.ts",
      "server/test/fixtures/notion-page-with-empty-text-nodes.json"
    ],
    "pr_changed_test_files": [
      "server/test/fixtures/notion-page-with-empty-text-nodes.json"
    ],
    "base_commit": "83e87254c6e8dc8a1249f5c462b5e45574a0b3a9",
    "head_commit": "d05f3949c7edd653c28561082000586dacd2d88e",
    "repo_url": "https://github.com/outline/outline/pull/9132",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9132",
    "dockerfile": "",
    "pr_merged_at": "2025-05-04T20:11:02.000Z",
    "patch": "diff --git a/plugins/notion/server/utils/NotionConverter.ts b/plugins/notion/server/utils/NotionConverter.ts\nindex 8e4539eb74af..230407748e95 100644\n--- a/plugins/notion/server/utils/NotionConverter.ts\n+++ b/plugins/notion/server/utils/NotionConverter.ts\n@@ -288,7 +288,7 @@ export class NotionConverter {\n       if (item.mention.type === \"link_mention\") {\n         return {\n           type: \"text\",\n-          text: item.plain_text,\n+          text: item.plain_text || item.mention.link_mention.href,\n           marks: [\n             {\n               type: \"link\",\n@@ -302,7 +302,7 @@ export class NotionConverter {\n       if (item.mention.type === \"link_preview\") {\n         return {\n           type: \"text\",\n-          text: item.plain_text,\n+          text: item.plain_text || item.mention.link_preview.url,\n           marks: [\n             {\n               type: \"link\",\n@@ -314,14 +314,14 @@ export class NotionConverter {\n         };\n       }\n \n-      if (!item.plain_text) {\n-        return undefined;\n+      if (item.plain_text) {\n+        return {\n+          type: \"text\",\n+          text: item.plain_text,\n+        };\n       }\n \n-      return {\n-        type: \"text\",\n-        text: item.plain_text,\n-      };\n+      return undefined;\n     }\n \n     if (item.type === \"equation\") {\n@@ -336,20 +336,20 @@ export class NotionConverter {\n       };\n     }\n \n-    if (!item.text.content) {\n-      return undefined;\n+    if (item.text.content) {\n+      return {\n+        type: \"text\",\n+        text: item.text.content,\n+        marks: [\n+          ...mapAttrs(),\n+          ...(item.text.link\n+            ? [{ type: \"link\", attrs: { href: item.text.link.url } }]\n+            : []),\n+        ].filter(Boolean),\n+      };\n     }\n \n-    return {\n-      type: \"text\",\n-      text: item.text.content,\n-      marks: [\n-        ...mapAttrs(),\n-        ...(item.text.link\n-          ? [{ type: \"link\", attrs: { href: item.text.link.url } }]\n-          : []),\n-      ].filter(Boolean),\n-    };\n+    return undefined;\n   }\n \n   private static rich_text_to_plaintext(item: RichTextItemResponse) {\n",
    "test_patch": "diff --git a/server/test/fixtures/notion-page-with-empty-text-nodes.json b/server/test/fixtures/notion-page-with-empty-text-nodes.json\nindex 9c98e5b036c9..7a32e1f9ef00 100644\n--- a/server/test/fixtures/notion-page-with-empty-text-nodes.json\n+++ b/server/test/fixtures/notion-page-with-empty-text-nodes.json\n@@ -191,7 +191,7 @@\n             \"code\": false,\n             \"color\": \"default\"\n           },\n-          \"plain_text\": \"http://github.com/outline/\",\n+          \"plain_text\": \"\",\n           \"href\": \"http://github.com/outline/\"\n         }\n       ],\n@@ -506,4 +506,4 @@\n       \"color\": \"default\"\n     }\n   }\n-]\n\\ No newline at end of file\n+]\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9099",
    "pr_id": 9099,
    "issue_id": 8807,
    "repo": "outline/outline",
    "problem_statement": "Comment notifications are sent to more users than expected\nMaybe introduced here https://github.com/outline/outline/issues/4984 ",
    "issue_word_count": 10,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "server/models/helpers/NotificationHelper.test.ts",
      "server/models/helpers/NotificationHelper.ts"
    ],
    "pr_changed_test_files": [
      "server/models/helpers/NotificationHelper.test.ts"
    ],
    "base_commit": "f5c659f90201d9f34ffca2f9b132d1f538184886",
    "head_commit": "2796458bcb9c7f186e91bff0f00ccf6424a26b4a",
    "repo_url": "https://github.com/outline/outline/pull/9099",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9099",
    "dockerfile": "",
    "pr_merged_at": "2025-04-29T10:45:15.000Z",
    "patch": "diff --git a/server/models/helpers/NotificationHelper.ts b/server/models/helpers/NotificationHelper.ts\nindex 7f33e8a2963e..e02be38e40c0 100644\n--- a/server/models/helpers/NotificationHelper.ts\n+++ b/server/models/helpers/NotificationHelper.ts\n@@ -193,10 +193,16 @@ export default class NotificationHelper {\n             [Op.ne]: actorId,\n           },\n           event: SubscriptionType.Document,\n-          [Op.or]: [\n-            { collectionId: document.collectionId },\n-            { documentId: document.id },\n-          ],\n+          ...(document.collectionId\n+            ? {\n+                [Op.or]: [\n+                  { collectionId: document.collectionId },\n+                  { documentId: document.id },\n+                ],\n+              }\n+            : {\n+                documentId: document.id,\n+              }),\n         },\n         include: [\n           {\n",
    "test_patch": "diff --git a/server/models/helpers/NotificationHelper.test.ts b/server/models/helpers/NotificationHelper.test.ts\nindex 71b624efa876..6013601dc9fb 100644\n--- a/server/models/helpers/NotificationHelper.test.ts\n+++ b/server/models/helpers/NotificationHelper.test.ts\n@@ -1,7 +1,9 @@\n-import { NotificationEventType } from \"@shared/types\";\n+import { DocumentPermission, NotificationEventType } from \"@shared/types\";\n+import { UserMembership } from \"@server/models\";\n import {\n   buildComment,\n   buildDocument,\n+  buildDraftDocument,\n   buildSubscription,\n   buildUser,\n } from \"@server/test/factories\";\n@@ -54,6 +56,78 @@ describe(\"NotificationHelper\", () => {\n       expect(recipients[0].id).toEqual(notificationEnabledUser.id);\n     });\n \n+    it(\"should only return users who have notification enabled for comment creation and are subscribed to the document in case of new thread in draft\", async () => {\n+      const documentAuthor = await buildUser();\n+\n+      // create a draft\n+      const document = await buildDraftDocument({\n+        userId: documentAuthor.id,\n+        teamId: documentAuthor.teamId,\n+        collectionId: null,\n+      });\n+\n+      // add a bunch of users as direct members\n+      const user = await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: { [NotificationEventType.CreateComment]: true },\n+      });\n+      const user2 = await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: { [NotificationEventType.CreateComment]: true },\n+      });\n+      const user3 = await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: { [NotificationEventType.CreateComment]: true },\n+      });\n+      await UserMembership.create({\n+        documentId: document.id,\n+        userId: user.id,\n+        permission: DocumentPermission.Read,\n+        createdById: user.id,\n+      });\n+      await UserMembership.create({\n+        documentId: document.id,\n+        userId: user2.id,\n+        permission: DocumentPermission.Read,\n+        createdById: user.id,\n+      });\n+      await UserMembership.create({\n+        documentId: document.id,\n+        userId: user3.id,\n+        permission: DocumentPermission.Read,\n+        createdById: user.id,\n+      });\n+\n+      // Add a subscription for only one of those users\n+      await Promise.all([\n+        buildSubscription({\n+          userId: user.id,\n+        }),\n+        buildSubscription({\n+          userId: user2.id,\n+        }),\n+        buildSubscription({\n+          userId: user3.id,\n+          documentId: document.id,\n+        }),\n+      ]);\n+\n+      const comment = await buildComment({\n+        documentId: document.id,\n+        userId: documentAuthor.id,\n+      });\n+\n+      const recipients =\n+        await NotificationHelper.getCommentNotificationRecipients(\n+          document,\n+          comment,\n+          comment.createdById\n+        );\n+\n+      expect(recipients.length).toEqual(1);\n+      expect(recipients[0].id).toEqual(user3.id);\n+    });\n+\n     it(\"should only return users who have notification enabled for comment creation and are in the thread in case of child comment\", async () => {\n       const documentAuthor = await buildUser();\n       const document = await buildDocument({\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9092",
    "pr_id": 9092,
    "issue_id": 9079,
    "repo": "outline/outline",
    "problem_statement": "Implement type-safe `schedule` method for tasks\nCloses #9073 \r\n\r\n~Explored a concept for adding type-safety to scheduling tasks.~ Added a `schedule` method to the instance.\r\nFor verification, moved a couple of tasks to use the new method.\r\n",
    "issue_word_count": 31,
    "test_files_count": 2,
    "non_test_files_count": 26,
    "pr_changed_files": [
      "plugins/notion/server/processors/NotionImportsProcessor.ts",
      "plugins/notion/server/tasks/NotionAPIImportTask.ts",
      "plugins/webhooks/server/processors/WebhookProcessor.test.ts",
      "plugins/webhooks/server/processors/WebhookProcessor.ts",
      "server/commands/documentMover.ts",
      "server/commands/documentPermanentDeleter.test.ts",
      "server/commands/documentPermanentDeleter.ts",
      "server/commands/userSuspender.ts",
      "server/models/Team.ts",
      "server/models/User.ts",
      "server/queues/processors/AvatarProcessor.ts",
      "server/queues/processors/CollectionsProcessor.ts",
      "server/queues/processors/DocumentSubscriptionProcessor.ts",
      "server/queues/processors/FileOperationCreatedProcessor.ts",
      "server/queues/processors/NotificationsProcessor.ts",
      "server/queues/processors/RevisionsProcessor.ts",
      "server/queues/processors/UserDemotedProcessor.ts",
      "server/queues/tasks/APIImportTask.ts",
      "server/queues/tasks/CleanupDeletedTeamsTask.ts",
      "server/queues/tasks/DetachDraftsFromCollectionTask.ts",
      "server/queues/tasks/DocumentAddGroupNotificationsTask.ts",
      "server/queues/tasks/DocumentImportTask.ts",
      "server/queues/tasks/UpdateTeamsAttachmentsSizeTask.ts",
      "server/routes/api/attachments/attachments.ts",
      "server/routes/api/auth/auth.ts",
      "server/routes/api/cron/cron.ts",
      "server/routes/api/documents/documents.ts",
      "server/services/cron.ts"
    ],
    "pr_changed_test_files": [
      "plugins/webhooks/server/processors/WebhookProcessor.test.ts",
      "server/commands/documentPermanentDeleter.test.ts"
    ],
    "base_commit": "f5c659f90201d9f34ffca2f9b132d1f538184886",
    "head_commit": "e92500dd85af262cf6970cabba5e0f1fa8e25cd2",
    "repo_url": "https://github.com/outline/outline/pull/9092",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9092",
    "dockerfile": "",
    "pr_merged_at": "2025-04-29T10:47:52.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9042",
    "pr_id": 9042,
    "issue_id": 8736,
    "repo": "outline/outline",
    "problem_statement": "Templates shared at workspace level are not being displayed to users\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\nIdentical to #7916 which I cannot reopen.\n\nThe \"Templates\" menu is not shown for new pages. I have only workspace templates.\n\n### Expected Behavior\n\nEvery user should see global templates.\n\n### Steps To Reproduce\n\n_No response_\n\n### Environment\n\n```markdown\n- Outline:0.82.0\n- Browser:Firefox\n```\n\n### Anything else?\n\nIt seems the templates are somehow returned in a `documents.list` call. Comparing the call with a user vs admin, the field `data` is empty for a regular user vs. it is non-empty for an admin.",
    "issue_word_count": 114,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "server/policies/team.test.ts",
      "server/policies/team.ts"
    ],
    "pr_changed_test_files": [
      "server/policies/team.test.ts"
    ],
    "base_commit": "21f37c0d14e9130044d6af8358a5e66f8c18f936",
    "head_commit": "053156a5716d7891599ca0a4eb82118c0c8eb358",
    "repo_url": "https://github.com/outline/outline/pull/9042",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9042",
    "dockerfile": "",
    "pr_merged_at": "2025-04-24T11:02:57.000Z",
    "patch": "diff --git a/server/policies/team.ts b/server/policies/team.ts\nindex eefd3802a53b..1afdb611d2d8 100644\n--- a/server/policies/team.ts\n+++ b/server/policies/team.ts\n@@ -9,7 +9,7 @@ import {\n   or,\n } from \"./utils\";\n \n-allow(User, \"read\", Team, isTeamModel);\n+allow(User, [\"read\", \"readTemplate\"], Team, isTeamModel);\n \n allow(User, \"share\", Team, (actor, team) =>\n   and(\n@@ -50,10 +50,6 @@ allow(User, \"createTemplate\", Team, (actor, team) =>\n   )\n );\n \n-allow(User, \"readTemplate\", Team, (actor, team) =>\n-  and(!actor.isViewer, isTeamModel(actor, team))\n-);\n-\n allow(User, \"updateTemplate\", Team, (actor, team) =>\n   and(\n     //\n",
    "test_patch": "diff --git a/server/policies/team.test.ts b/server/policies/team.test.ts\nindex d1e99146577b..f3d99689b579 100644\n--- a/server/policies/team.test.ts\n+++ b/server/policies/team.test.ts\n@@ -57,7 +57,7 @@ describe(\"policies/team\", () => {\n     const permissions = new Map<UserRole, boolean>([\n       [UserRole.Admin, true],\n       [UserRole.Member, true],\n-      [UserRole.Viewer, false],\n+      [UserRole.Viewer, true],\n       [UserRole.Guest, true],\n     ]);\n     for (const [role, permission] of permissions.entries()) {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9030",
    "pr_id": 9030,
    "issue_id": 7561,
    "repo": "outline/outline",
    "problem_statement": "Replace class based legacy react components with functional ones\nWe still have have class based components lying around, one such example is `PaginatedList` component which is a part of _critical path_ in a variety of ways. Apart from being legacy, these components pose limits on easily achieving certain things, like [memoization](https://github.com/outline/outline/pull/7102#discussion_r1648850229).",
    "issue_word_count": 50,
    "test_files_count": 1,
    "non_test_files_count": 16,
    "pr_changed_files": [
      "app/components/DocumentViews.tsx",
      "app/components/FilterOptions.tsx",
      "app/components/Notifications/Notifications.tsx",
      "app/components/PaginatedDocumentList.tsx",
      "app/components/PaginatedEventList.tsx",
      "app/components/PaginatedList.test.tsx",
      "app/components/PaginatedList.tsx",
      "app/components/SearchPopover.tsx",
      "app/components/Sidebar/components/ArchiveLink.tsx",
      "app/components/Sidebar/components/Collections.tsx",
      "app/scenes/Document/components/Insights.tsx",
      "app/scenes/Settings/ApiKeys.tsx",
      "app/scenes/Settings/Export.tsx",
      "app/scenes/Settings/Import.tsx",
      "app/scenes/Settings/PersonalApiKeys.tsx",
      "app/scenes/Settings/components/GroupDialogs.tsx",
      "plugins/webhooks/client/Settings.tsx"
    ],
    "pr_changed_test_files": [
      "app/components/PaginatedList.test.tsx"
    ],
    "base_commit": "943fd7e2e1a1cff57920e19e90e5a51ac58b00ec",
    "head_commit": "9906d240bd560e2c8c64d697ade7a807bb8a8c39",
    "repo_url": "https://github.com/outline/outline/pull/9030",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9030",
    "dockerfile": "",
    "pr_merged_at": "2025-04-24T11:03:18.000Z",
    "patch": "diff --git a/app/components/DocumentViews.tsx b/app/components/DocumentViews.tsx\nindex 6c6eb29bd88a..b8aa85a43e3e 100644\n--- a/app/components/DocumentViews.tsx\n+++ b/app/components/DocumentViews.tsx\n@@ -46,10 +46,10 @@ function DocumentViews({ document, isOpen }: Props) {\n   return (\n     <>\n       {isOpen && (\n-        <PaginatedList\n+        <PaginatedList<User>\n           aria-label={t(\"Viewers\")}\n           items={users}\n-          renderItem={(model: User) => {\n+          renderItem={(model) => {\n             const view = documentViews.find((v) => v.userId === model.id);\n             const isPresent = presentIds.includes(model.id);\n             const isEditing = editingIds.includes(model.id);\n\ndiff --git a/app/components/FilterOptions.tsx b/app/components/FilterOptions.tsx\nindex 34a4da15179e..b48912f9c95d 100644\n--- a/app/components/FilterOptions.tsx\n+++ b/app/components/FilterOptions.tsx\n@@ -56,7 +56,7 @@ const FilterOptions = ({\n     : \"\";\n \n   const renderItem = React.useCallback(\n-    (option: TFilterOption) => (\n+    (option) => (\n       <MenuItem\n         key={option.key}\n         onClick={() => {\n@@ -174,7 +174,7 @@ const FilterOptions = ({\n         )}\n       </MenuButton>\n       <ContextMenu aria-label={defaultLabel} minHeight={66} {...menu}>\n-        <PaginatedList\n+        <PaginatedList<TFilterOption>\n           listRef={listRef}\n           options={{ query, ...fetchQueryOptions }}\n           items={filteredOptions}\n\ndiff --git a/app/components/Notifications/Notifications.tsx b/app/components/Notifications/Notifications.tsx\nindex e297041cca40..481255133abe 100644\n--- a/app/components/Notifications/Notifications.tsx\n+++ b/app/components/Notifications/Notifications.tsx\n@@ -79,11 +79,11 @@ function Notifications(\n         </Header>\n         <React.Suspense fallback={null}>\n           <Scrollable ref={ref} flex topShadow>\n-            <PaginatedList\n+            <PaginatedList<Notification>\n               fetch={notifications.fetchPage}\n               options={{ archived: false }}\n               items={isOpen ? notifications.orderedData : undefined}\n-              renderItem={(item: Notification) => (\n+              renderItem={(item) => (\n                 <NotificationListItem\n                   key={item.id}\n                   notification={item}\n\ndiff --git a/app/components/PaginatedDocumentList.tsx b/app/components/PaginatedDocumentList.tsx\nindex 3e40739820d7..915de450195e 100644\n--- a/app/components/PaginatedDocumentList.tsx\n+++ b/app/components/PaginatedDocumentList.tsx\n@@ -10,7 +10,7 @@ type Props = {\n   fetch: (options: any) => Promise<Document[] | undefined>;\n   options?: Record<string, any>;\n   heading?: React.ReactNode;\n-  empty?: React.ReactNode;\n+  empty?: JSX.Element;\n   showParentDocuments?: boolean;\n   showCollection?: boolean;\n   showPublished?: boolean;\n@@ -34,7 +34,7 @@ const PaginatedDocumentList = React.memo<Props>(function PaginatedDocumentList({\n   const { t } = useTranslation();\n \n   return (\n-    <PaginatedList\n+    <PaginatedList<Document>\n       aria-label={t(\"Documents\")}\n       items={documents}\n       empty={empty}\n@@ -42,7 +42,7 @@ const PaginatedDocumentList = React.memo<Props>(function PaginatedDocumentList({\n       fetch={fetch}\n       options={options}\n       renderError={(props) => <Error {...props} />}\n-      renderItem={(item: Document, _index) => (\n+      renderItem={(item, _index) => (\n         <DocumentListItem\n           key={item.id}\n           document={item}\n\ndiff --git a/app/components/PaginatedEventList.tsx b/app/components/PaginatedEventList.tsx\nindex c7a5bdc025b0..d578b7bfb93d 100644\n--- a/app/components/PaginatedEventList.tsx\n+++ b/app/components/PaginatedEventList.tsx\n@@ -10,7 +10,7 @@ type Props = {\n   fetch: (options: Record<string, any> | undefined) => Promise<Event[]>;\n   options?: Record<string, any>;\n   heading?: React.ReactNode;\n-  empty?: React.ReactNode;\n+  empty?: JSX.Element;\n };\n \n const PaginatedEventList = React.memo<Props>(function PaginatedEventList({\n\ndiff --git a/app/components/PaginatedList.tsx b/app/components/PaginatedList.tsx\nindex ea7b9f86eb96..b289db622ec8 100644\n--- a/app/components/PaginatedList.tsx\n+++ b/app/components/PaginatedList.tsx\n@@ -1,265 +1,309 @@\n import isEqual from \"lodash/isEqual\";\n-import { observable, action, computed } from \"mobx\";\n-import { observer } from \"mobx-react\";\n import * as React from \"react\";\n-import { withTranslation, WithTranslation } from \"react-i18next\";\n+import { useTranslation } from \"react-i18next\";\n import { Waypoint } from \"react-waypoint\";\n import { Pagination } from \"@shared/constants\";\n-import RootStore from \"~/stores/RootStore\";\n import ArrowKeyNavigation from \"~/components/ArrowKeyNavigation\";\n import DelayedMount from \"~/components/DelayedMount\";\n import PlaceholderList from \"~/components/List/Placeholder\";\n-import withStores from \"~/components/withStores\";\n+import useCurrentUser from \"~/hooks/useCurrentUser\";\n+import usePrevious from \"~/hooks/usePrevious\";\n import { dateToHeading } from \"~/utils/date\";\n \n+/**\n+ * Base interface for items that can be paginated\n+ * @interface PaginatedItem\n+ */\n export interface PaginatedItem {\n+  /** Unique identifier for the item */\n   id?: string;\n+  /** Last update timestamp of the item */\n   updatedAt?: string;\n+  /** Creation timestamp of the item */\n   createdAt?: string;\n }\n \n-type Props<T> = WithTranslation &\n-  RootStore &\n-  React.HTMLAttributes<HTMLDivElement> & {\n-    fetch?: (\n-      options: Record<string, any> | undefined\n-    ) => Promise<T[] | undefined> | undefined;\n-    options?: Record<string, any>;\n-    heading?: React.ReactNode;\n-    empty?: React.ReactNode;\n-    loading?: React.ReactElement;\n-    items?: T[];\n-    className?: string;\n-    renderItem: (item: T, index: number) => React.ReactNode;\n-    renderError?: (options: {\n-      error: Error;\n-      retry: () => void;\n-    }) => React.ReactNode;\n-    renderHeading?: (name: React.ReactElement<any> | string) => React.ReactNode;\n-    onEscape?: (ev: React.KeyboardEvent<HTMLDivElement>) => void;\n-    listRef?: React.RefObject<HTMLDivElement>;\n-  };\n-\n-@observer\n-class PaginatedList<T extends PaginatedItem> extends React.PureComponent<\n-  Props<T>\n-> {\n-  @observable\n-  error?: Error;\n-\n-  @observable\n-  isFetchingMore = false;\n-\n-  @observable\n-  isFetching = false;\n-\n-  @observable\n-  isFetchingInitial = !this.props.items?.length;\n-\n-  @observable\n-  fetchCounter = 0;\n-\n-  @observable\n-  renderCount = Pagination.defaultLimit;\n-\n-  @observable\n-  offset = 0;\n-\n-  @observable\n-  allowLoadMore = true;\n-\n-  componentDidMount() {\n-    void this.fetchResults();\n-  }\n-\n-  componentDidUpdate(prevProps: Props<T>) {\n-    if (\n-      prevProps.fetch !== this.props.fetch ||\n-      !isEqual(prevProps.options, this.props.options)\n-    ) {\n-      this.reset();\n-      void this.fetchResults();\n-    }\n-  }\n+/**\n+ * Props for the PaginatedList component\n+ * @template T Type of items in the list, must extend PaginatedItem\n+ */\n+interface Props<T extends PaginatedItem>\n+  extends React.HTMLAttributes<HTMLDivElement> {\n+  /**\n+   * Function to fetch paginated data. Should return a promise resolving to an array of items\n+   * @param options Pagination and other query options\n+   */\n+  fetch?: (\n+    options: Record<string, any> | undefined\n+  ) => Promise<unknown[] | undefined> | undefined;\n+\n+  /** Additional options to pass to the fetch function */\n+  options?: Record<string, any>;\n+\n+  /** Optional header content to display above the list */\n+  heading?: React.ReactNode;\n+\n+  /** Content to display when the list is empty */\n+  empty?: JSX.Element | null;\n+\n+  /** Optional loading state content */\n+  loading?: JSX.Element | null;\n+\n+  /** Array of items to display in the list */\n+  items?: T[];\n+\n+  /** CSS class name to apply to the list container */\n+  className?: string;\n+\n+  /**\n+   * Function to render each individual item in the list\n+   * @param item The item to render\n+   * @param index The index of the item in the list\n+   */\n+  renderItem: (item: T, index: number) => React.ReactNode;\n+\n+  /**\n+   * Function to render error state\n+   * @param options Object containing error details and retry function\n+   */\n+  renderError?: (options: {\n+    /** Details of the error */\n+    error: Error;\n+    /** Function to retry the fetch operation */\n+    retry: () => void;\n+  }) => JSX.Element;\n+\n+  /**\n+   * Function to render section headings (typically date-based)\n+   * @param name The heading text or element to render\n+   */\n+  renderHeading?: (name: React.ReactElement<any> | string) => React.ReactNode;\n+\n+  /**\n+   * Handler for escape key press\n+   * @param ev Keyboard event object\n+   */\n+  onEscape?: (ev: React.KeyboardEvent<HTMLDivElement>) => void;\n+\n+  /** Reference to the list container element */\n+  listRef?: React.RefObject<HTMLDivElement>;\n+}\n \n-  reset = () => {\n-    this.offset = 0;\n-    this.allowLoadMore = true;\n-    this.renderCount = Pagination.defaultLimit;\n-    this.isFetching = false;\n-    this.isFetchingInitial = false;\n-    this.isFetchingMore = false;\n-  };\n-\n-  @action\n-  fetchResults = async () => {\n-    if (!this.props.fetch) {\n+/**\n+ * A reusable component that renders a paginated list with infinite scrolling\n+ * and optional date-based section headings.\n+ *\n+ * @template T Type of the list items, must extend PaginatedItem\n+ */\n+const PaginatedList = <T extends PaginatedItem>({\n+  fetch,\n+  options,\n+  heading,\n+  empty = null,\n+  loading = null,\n+  items = [],\n+  className,\n+  renderItem,\n+  renderError,\n+  renderHeading,\n+  onEscape,\n+  listRef,\n+  ...rest\n+}: Props<T>): JSX.Element | null => {\n+  const user = useCurrentUser({ rejectOnEmpty: false });\n+  const { t } = useTranslation();\n+\n+  const [error, setError] = React.useState<Error | undefined>();\n+  const [isFetchingMore, setIsFetchingMore] = React.useState(false);\n+  const [isFetching, setIsFetching] = React.useState(false);\n+  const [isFetchingInitial, setIsFetchingInitial] = React.useState(\n+    !items?.length\n+  );\n+  const [fetchCounter, setFetchCounter] = React.useState(0);\n+  const [renderCount, setRenderCount] = React.useState(Pagination.defaultLimit);\n+  const [offset, setOffset] = React.useState(0);\n+  const [allowLoadMore, setAllowLoadMore] = React.useState(true);\n+\n+  const reset = React.useCallback(() => {\n+    setOffset(0);\n+    setAllowLoadMore(true);\n+    setRenderCount(Pagination.defaultLimit);\n+    setIsFetching(false);\n+    setIsFetchingInitial(false);\n+    setIsFetchingMore(false);\n+  }, []);\n+\n+  const fetchResults = React.useCallback(async () => {\n+    if (!fetch) {\n       return;\n     }\n-    this.isFetching = true;\n-    const counter = ++this.fetchCounter;\n-    const limit = this.props.options?.limit ?? Pagination.defaultLimit;\n-    this.error = undefined;\n+\n+    setIsFetching(true);\n+    const counter = fetchCounter + 1;\n+    setFetchCounter(counter);\n+    const limit = options?.limit ?? Pagination.defaultLimit;\n+    setError(undefined);\n \n     try {\n-      const results = await this.props.fetch({\n+      const results = await fetch({\n         limit,\n-        offset: this.offset,\n-        ...this.props.options,\n+        offset,\n+        ...options,\n       });\n \n-      if (this.offset !== 0) {\n-        this.renderCount += limit;\n+      if (offset !== 0) {\n+        setRenderCount((prevCount) => prevCount + limit);\n       }\n \n       if (results && (results.length === 0 || results.length < limit)) {\n-        this.allowLoadMore = false;\n+        setAllowLoadMore(false);\n       } else {\n-        this.offset += limit;\n+        setOffset((prevOffset) => prevOffset + limit);\n       }\n \n-      this.isFetchingInitial = false;\n+      setIsFetchingInitial(false);\n     } catch (err) {\n-      this.error = err;\n+      setError(err);\n     } finally {\n       // only the most recent fetch should end the loading state\n-      if (counter >= this.fetchCounter) {\n-        this.isFetching = false;\n-        this.isFetchingMore = false;\n+      if (counter >= fetchCounter) {\n+        setIsFetching(false);\n+        setIsFetchingMore(false);\n       }\n     }\n-  };\n+  }, [fetch, fetchCounter, offset, options]);\n \n-  @action\n-  loadMoreResults = async () => {\n-    // Don't paginate if there aren't more results or we’re currently fetching\n-    if (!this.allowLoadMore || this.isFetching) {\n+  const loadMoreResults = React.useCallback(async () => {\n+    // Don't paginate if there aren't more results or we're currently fetching\n+    if (!allowLoadMore || isFetching) {\n       return;\n     }\n+\n     // If there are already cached results that we haven't yet rendered because\n     // of lazy rendering then show another page.\n-    const leftToRender = (this.props.items?.length ?? 0) - this.renderCount;\n+    const leftToRender = (items?.length ?? 0) - renderCount;\n \n     if (leftToRender > 0) {\n-      this.renderCount += Pagination.defaultLimit;\n+      setRenderCount((prevCount) => prevCount + Pagination.defaultLimit);\n     }\n \n     // If there are less than a pages results in the cache go ahead and fetch\n     // another page from the server\n     if (leftToRender <= Pagination.defaultLimit) {\n-      this.isFetchingMore = true;\n-      await this.fetchResults();\n+      setIsFetchingMore(true);\n+      await fetchResults();\n     }\n-  };\n+  }, [allowLoadMore, isFetching, items?.length, renderCount, fetchResults]);\n \n-  @computed\n-  get itemsToRender() {\n-    return this.props.items?.slice(0, this.renderCount) ?? [];\n-  }\n+  React.useEffect(() => {\n+    void fetchResults();\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\n+  }, []);\n \n-  render() {\n-    const {\n-      items = [],\n-      heading,\n-      auth,\n-      empty = null,\n-      renderHeading,\n-      renderError,\n-      onEscape,\n-    } = this.props;\n-\n-    const showLoading =\n-      this.isFetching &&\n-      !this.isFetchingMore &&\n-      (!items?.length || (this.fetchCounter <= 1 && this.isFetchingInitial));\n-\n-    if (showLoading) {\n-      return (\n-        this.props.loading || (\n-          <DelayedMount>\n-            <div className={this.props.className}>\n-              <PlaceholderList count={5} />\n-            </div>\n-          </DelayedMount>\n-        )\n-      );\n-    }\n-\n-    if (items?.length === 0) {\n-      if (this.error && renderError) {\n-        return renderError({ error: this.error, retry: this.fetchResults });\n-      }\n+  const prevFetch = usePrevious(fetch);\n+  const prevOptions = usePrevious(options);\n \n-      return empty;\n+  // Equivalent to componentDidUpdate\n+  React.useEffect(() => {\n+    if (prevFetch !== fetch || !isEqual(prevOptions, options)) {\n+      reset();\n+      void fetchResults();\n     }\n+  }, [fetch, options, reset, prevFetch, prevOptions, fetchResults]);\n \n-    return (\n-      <>\n-        {heading}\n-        <ArrowKeyNavigation\n-          aria-label={this.props[\"aria-label\"]}\n-          onEscape={onEscape}\n-          className={this.props.className}\n-          items={this.itemsToRender}\n-          ref={this.props.listRef}\n-        >\n-          {() => {\n-            let previousHeading = \"\";\n-            return this.itemsToRender.map((item, index) => {\n-              const children = this.props.renderItem(item, index);\n-\n-              // If there is no renderHeading method passed then no date\n-              // headings are rendered\n-              if (!renderHeading) {\n-                return children;\n-              }\n-\n-              // Our models have standard date fields, updatedAt > createdAt.\n-              // Get what a heading would look like for this item\n-              const currentDate =\n-                \"updatedAt\" in item && item.updatedAt\n-                  ? item.updatedAt\n-                  : \"createdAt\" in item && item.createdAt\n-                  ? item.createdAt\n-                  : previousHeading;\n-              const currentHeading = dateToHeading(\n-                currentDate,\n-                this.props.t,\n-                auth.user?.language\n-              );\n+  // Computed property equivalent\n+  const itemsToRender = React.useMemo(\n+    () => items?.slice(0, renderCount) ?? [],\n+    [items, renderCount]\n+  );\n \n-              // If the heading is different to any previous heading then we\n-              // should render it, otherwise the item can go under the previous\n-              // heading\n-              if (\n-                children &&\n-                (!previousHeading || currentHeading !== previousHeading)\n-              ) {\n-                previousHeading = currentHeading;\n-                return (\n-                  <React.Fragment\n-                    key={\"id\" in item && item.id ? item.id : index}\n-                  >\n-                    {renderHeading(currentHeading)}\n-                    {children}\n-                  </React.Fragment>\n-                );\n-              }\n+  const showLoading =\n+    isFetching &&\n+    !isFetchingMore &&\n+    (!items?.length || (fetchCounter <= 1 && isFetchingInitial));\n \n-              return children;\n-            });\n-          }}\n-        </ArrowKeyNavigation>\n-        {this.allowLoadMore && (\n-          <div style={{ height: \"1px\" }}>\n-            <Waypoint key={this.renderCount} onEnter={this.loadMoreResults} />\n+  if (showLoading) {\n+    return (\n+      loading || (\n+        <DelayedMount>\n+          <div className={className}>\n+            <PlaceholderList count={5} />\n           </div>\n-        )}\n-      </>\n+        </DelayedMount>\n+      )\n     );\n   }\n-}\n \n-export const Component = PaginatedList;\n+  if (items?.length === 0) {\n+    if (error && renderError) {\n+      return renderError({ error, retry: fetchResults });\n+    }\n+\n+    return empty;\n+  }\n \n-export default withTranslation()(withStores(PaginatedList));\n+  return (\n+    <React.Fragment>\n+      {heading}\n+      <ArrowKeyNavigation\n+        aria-label={rest[\"aria-label\"]}\n+        onEscape={onEscape}\n+        className={className}\n+        items={itemsToRender}\n+        ref={listRef}\n+      >\n+        {() => {\n+          let previousHeading = \"\";\n+          return itemsToRender.map((item, index) => {\n+            const children = renderItem(item, index);\n+\n+            // If there is no renderHeading method passed then no date\n+            // headings are rendered\n+            if (!renderHeading) {\n+              return children;\n+            }\n+\n+            // Our models have standard date fields, updatedAt > createdAt.\n+            // Get what a heading would look like for this item\n+            const currentDate =\n+              \"updatedAt\" in item && item.updatedAt\n+                ? item.updatedAt\n+                : \"createdAt\" in item && item.createdAt\n+                ? item.createdAt\n+                : previousHeading;\n+            const currentHeading = dateToHeading(\n+              currentDate,\n+              t,\n+              user?.language\n+            );\n+\n+            // If the heading is different to any previous heading then we\n+            // should render it, otherwise the item can go under the previous\n+            // heading\n+            if (\n+              children &&\n+              (!previousHeading || currentHeading !== previousHeading)\n+            ) {\n+              previousHeading = currentHeading;\n+              return (\n+                <React.Fragment key={\"id\" in item && item.id ? item.id : index}>\n+                  {renderHeading(currentHeading)}\n+                  {children}\n+                </React.Fragment>\n+              );\n+            }\n+\n+            return children;\n+          });\n+        }}\n+      </ArrowKeyNavigation>\n+      {allowLoadMore && (\n+        <div style={{ height: \"1px\" }}>\n+          <Waypoint key={renderCount} onEnter={loadMoreResults} />\n+        </div>\n+      )}\n+    </React.Fragment>\n+  );\n+};\n+\n+export default PaginatedList;\n\ndiff --git a/app/components/SearchPopover.tsx b/app/components/SearchPopover.tsx\nindex 4ac2bcc523a9..2390a7604a81 100644\n--- a/app/components/SearchPopover.tsx\n+++ b/app/components/SearchPopover.tsx\n@@ -200,7 +200,7 @@ function SearchPopover({ shareId, className }: Props) {\n         style={{ zIndex: depths.sidebar + 1 }}\n         shrink\n       >\n-        <PaginatedList\n+        <PaginatedList<SearchResult>\n           options={{ query, snippetMinWords: 10, snippetMaxWords: 11 }}\n           items={cachedSearchResults}\n           fetch={performSearch}\n@@ -209,7 +209,7 @@ function SearchPopover({ shareId, className }: Props) {\n             <NoResults>{t(\"No results for {{query}}\", { query })}</NoResults>\n           }\n           loading={<PlaceholderList count={3} header={{ height: 20 }} />}\n-          renderItem={(item: SearchResult, index) => (\n+          renderItem={(item, index) => (\n             <SearchListItem\n               key={item.document.id}\n               shareId={shareId}\n\ndiff --git a/app/components/Sidebar/components/ArchiveLink.tsx b/app/components/Sidebar/components/ArchiveLink.tsx\nindex 9f04d19b039e..945ef4b284be 100644\n--- a/app/components/Sidebar/components/ArchiveLink.tsx\n+++ b/app/components/Sidebar/components/ArchiveLink.tsx\n@@ -82,12 +82,12 @@ function ArchiveLink() {\n         </div>\n         {expanded === true ? (\n           <Relative>\n-            <PaginatedList\n+            <PaginatedList<Collection>\n               aria-label={t(\"Archived collections\")}\n               items={collections.archived}\n               loading={<PlaceholderCollections />}\n               renderError={(props) => <StyledError {...props} />}\n-              renderItem={(item: Collection) => (\n+              renderItem={(item) => (\n                 <ArchivedCollectionLink\n                   key={item.id}\n                   depth={1}\n\ndiff --git a/app/components/Sidebar/components/Collections.tsx b/app/components/Sidebar/components/Collections.tsx\nindex f50efc9b92f4..f98179f1677f 100644\n--- a/app/components/Sidebar/components/Collections.tsx\n+++ b/app/components/Sidebar/components/Collections.tsx\n@@ -54,7 +54,7 @@ function Collections() {\n       <Flex column>\n         <Header id=\"collections\" title={t(\"Collections\")}>\n           <Relative>\n-            <PaginatedList\n+            <PaginatedList<Collection>\n               options={params}\n               aria-label={t(\"Collections\")}\n               items={collections.allActive}\n@@ -69,7 +69,7 @@ function Collections() {\n                 ) : undefined\n               }\n               renderError={(props) => <StyledError {...props} />}\n-              renderItem={(item: Collection, index) => (\n+              renderItem={(item, index) => (\n                 <DraggableCollectionLink\n                   key={item.id}\n                   collection={item}\n\ndiff --git a/app/scenes/Document/components/Insights.tsx b/app/scenes/Document/components/Insights.tsx\nindex f9ead39b3ff5..d62debca986c 100644\n--- a/app/scenes/Document/components/Insights.tsx\n+++ b/app/scenes/Document/components/Insights.tsx\n@@ -144,10 +144,10 @@ function Insights() {\n                     small\n                   />\n                 )}\n-                <PaginatedList\n+                <PaginatedList<User>\n                   aria-label={t(\"Contributors\")}\n                   items={document.collaborators}\n-                  renderItem={(model: User) => (\n+                  renderItem={(model) => (\n                     <ListItem\n                       key={model.id}\n                       title={model.name}\n\ndiff --git a/app/scenes/Settings/ApiKeys.tsx b/app/scenes/Settings/ApiKeys.tsx\nindex ca411e393547..b9989d7fff65 100644\n--- a/app/scenes/Settings/ApiKeys.tsx\n+++ b/app/scenes/Settings/ApiKeys.tsx\n@@ -58,11 +58,11 @@ function ApiKeys() {\n           }}\n         />\n       </Text>\n-      <PaginatedList\n+      <PaginatedList<ApiKey>\n         fetch={apiKeys.fetchPage}\n         items={apiKeys.orderedData}\n         heading={<h2>{t(\"All\")}</h2>}\n-        renderItem={(apiKey: ApiKey) => (\n+        renderItem={(apiKey) => (\n           <ApiKeyListItem key={apiKey.id} apiKey={apiKey} />\n         )}\n       />\n\ndiff --git a/app/scenes/Settings/Export.tsx b/app/scenes/Settings/Export.tsx\nindex ad1652f97172..4cf83553f653 100644\n--- a/app/scenes/Settings/Export.tsx\n+++ b/app/scenes/Settings/Export.tsx\n@@ -48,7 +48,7 @@ function Export() {\n         {t(\"Export data\")}…\n       </Button>\n       <br />\n-      <PaginatedList\n+      <PaginatedList<FileOperation>\n         items={fileOperations.exports}\n         fetch={fileOperations.fetchPage}\n         options={{\n@@ -59,7 +59,7 @@ function Export() {\n             <Trans>Recent exports</Trans>\n           </h2>\n         }\n-        renderItem={(item: FileOperation) => (\n+        renderItem={(item) => (\n           <FileOperationListItem key={item.id} fileOperation={item} />\n         )}\n       />\n\ndiff --git a/app/scenes/Settings/Import.tsx b/app/scenes/Settings/Import.tsx\nindex 7de0063880fc..838644b96ff4 100644\n--- a/app/scenes/Settings/Import.tsx\n+++ b/app/scenes/Settings/Import.tsx\n@@ -183,7 +183,7 @@ function Import() {\n         ))}\n       </div>\n       <br />\n-      <PaginatedList\n+      <PaginatedList<ImportModel | FileOperation>\n         items={allImports}\n         fetch={fetchImports}\n         heading={\n@@ -191,7 +191,7 @@ function Import() {\n             <Trans>Recent imports</Trans>\n           </h2>\n         }\n-        renderItem={(item: ImportModel | FileOperation) =>\n+        renderItem={(item) =>\n           item instanceof ImportModel ? (\n             <ImportListItem key={item.id} importModel={item} />\n           ) : (\n\ndiff --git a/app/scenes/Settings/PersonalApiKeys.tsx b/app/scenes/Settings/PersonalApiKeys.tsx\nindex b0bfaf6c6288..32bb83d0c6ae 100644\n--- a/app/scenes/Settings/PersonalApiKeys.tsx\n+++ b/app/scenes/Settings/PersonalApiKeys.tsx\n@@ -61,12 +61,12 @@ function PersonalApiKeys() {\n           }}\n         />\n       </Text>\n-      <PaginatedList\n+      <PaginatedList<ApiKey>\n         fetch={apiKeys.fetchPage}\n         items={apiKeys.personalApiKeys}\n         options={{ userId: user.id }}\n         heading={<h2>{t(\"Personal keys\")}</h2>}\n-        renderItem={(apiKey: ApiKey) => (\n+        renderItem={(apiKey) => (\n           <ApiKeyListItem key={apiKey.id} apiKey={apiKey} />\n         )}\n       />\n\ndiff --git a/app/scenes/Settings/components/GroupDialogs.tsx b/app/scenes/Settings/components/GroupDialogs.tsx\nindex 6941cf78e80c..7ca290e0b286 100644\n--- a/app/scenes/Settings/components/GroupDialogs.tsx\n+++ b/app/scenes/Settings/components/GroupDialogs.tsx\n@@ -268,14 +268,14 @@ export const ViewGroupMembersDialog = observer(function ({\n       <Subheading>\n         <Trans>Members</Trans>\n       </Subheading>\n-      <PaginatedList\n+      <PaginatedList<User>\n         items={users.inGroup(group.id)}\n         fetch={groupUsers.fetchPage}\n         options={{\n           id: group.id,\n         }}\n         empty={<Empty>{t(\"This group has no members.\")}</Empty>}\n-        renderItem={(user: User) => (\n+        renderItem={(user) => (\n           <GroupMemberListItem\n             key={user.id}\n             user={user}\n@@ -382,7 +382,7 @@ const AddPeopleToGroupDialog = observer(function ({\n           <PlaceholderList count={5} />\n         </DelayedMount>\n       ) : (\n-        <PaginatedList\n+        <PaginatedList<User>\n           empty={\n             query ? (\n               <Empty>{t(\"No people matching your search\")}</Empty>\n@@ -392,7 +392,7 @@ const AddPeopleToGroupDialog = observer(function ({\n           }\n           items={users.notInGroup(group.id, query)}\n           fetch={query ? undefined : users.fetchPage}\n-          renderItem={(item: User) => (\n+          renderItem={(item) => (\n             <GroupMemberListItem\n               key={item.id}\n               user={item}\n\ndiff --git a/plugins/webhooks/client/Settings.tsx b/plugins/webhooks/client/Settings.tsx\nindex ccc3f736012f..c972d7c66696 100644\n--- a/plugins/webhooks/client/Settings.tsx\n+++ b/plugins/webhooks/client/Settings.tsx\n@@ -52,18 +52,18 @@ function Webhooks() {\n           in near real-time.\n         </Trans>\n       </Text>\n-      <PaginatedList\n+      <PaginatedList<WebhookSubscription>\n         fetch={webhookSubscriptions.fetchPage}\n         items={webhookSubscriptions.enabled}\n         heading={<h2>{t(\"Active\")}</h2>}\n-        renderItem={(webhook: WebhookSubscription) => (\n+        renderItem={(webhook) => (\n           <WebhookSubscriptionListItem key={webhook.id} webhook={webhook} />\n         )}\n       />\n-      <PaginatedList\n+      <PaginatedList<WebhookSubscription>\n         items={webhookSubscriptions.disabled}\n         heading={<h2>{t(\"Inactive\")}</h2>}\n-        renderItem={(webhook: WebhookSubscription) => (\n+        renderItem={(webhook) => (\n           <WebhookSubscriptionListItem key={webhook.id} webhook={webhook} />\n         )}\n       />\n",
    "test_patch": "diff --git a/app/components/PaginatedList.test.tsx b/app/components/PaginatedList.test.tsx\nindex 2a04ca2c96ea..3adb9b5c9b82 100644\n--- a/app/components/PaginatedList.test.tsx\n+++ b/app/components/PaginatedList.test.tsx\n@@ -1,13 +1,15 @@\n import \"../stores\";\n import { render } from \"@testing-library/react\";\n import { TFunction } from \"i18next\";\n+import { Provider } from \"mobx-react\";\n import * as React from \"react\";\n import { getI18n } from \"react-i18next\";\n import { Pagination } from \"@shared/constants\";\n-import { Component as PaginatedList } from \"./PaginatedList\";\n+import PaginatedList from \"./PaginatedList\";\n \n describe(\"PaginatedList\", () => {\n   const i18n = getI18n();\n+  const authStore = {};\n \n   const props = {\n     i18n,\n@@ -17,19 +19,23 @@ describe(\"PaginatedList\", () => {\n \n   it(\"with no items renders nothing\", () => {\n     const result = render(\n-      <PaginatedList items={[]} renderItem={render} {...props} />\n+      <Provider auth={authStore}>\n+        <PaginatedList items={[]} renderItem={render} {...props} />\n+      </Provider>\n     );\n     expect(result.container.innerHTML).toEqual(\"\");\n   });\n \n   it(\"with no items renders empty prop\", async () => {\n     const result = render(\n-      <PaginatedList\n-        items={[]}\n-        empty={<p>Sorry, no results</p>}\n-        renderItem={render}\n-        {...props}\n-      />\n+      <Provider auth={authStore}>\n+        <PaginatedList\n+          items={[]}\n+          empty={<p>Sorry, no results</p>}\n+          renderItem={render}\n+          {...props}\n+        />{\" \"}\n+      </Provider>\n     );\n     await expect(\n       result.findAllByText(\"Sorry, no results\")\n@@ -42,13 +48,15 @@ describe(\"PaginatedList\", () => {\n       id: \"one\",\n     };\n     render(\n-      <PaginatedList\n-        items={[]}\n-        fetch={fetch}\n-        options={options}\n-        renderItem={render}\n-        {...props}\n-      />\n+      <Provider auth={authStore}>\n+        <PaginatedList\n+          items={[]}\n+          fetch={fetch}\n+          options={options}\n+          renderItem={render}\n+          {...props}\n+        />{\" \"}\n+      </Provider>\n     );\n     expect(fetch).toHaveBeenCalledWith({\n       ...options,\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-9025",
    "pr_id": 9025,
    "issue_id": 8935,
    "repo": "outline/outline",
    "problem_statement": "Avatars fail to load with 404 error in v0.83.0\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\nHey Outline team! 👋 I'm reporting an issue where user avatars aren't loading correctly after logging in via CASDOOR OIDC. Specifically, when trying to fetch an avatar, the API returns a 404 error, even though the file exists in the Docker volume. \n\n![Image](https://github.com/user-attachments/assets/df2920b1-7728-4b09-9e9f-14d955852fbb)\n\n### Expected Behavior\n\navatars should load correctly without any errors. The API should return the file resource if it exists in the volume, resulting in a successful image display (e.g., HTTP 200 status with the image data).\n\n### Steps To Reproduce\n\n1. Set up Outline v0.83.0 with CASDOOR OIDC authentication enabled.\n2. Log in to Outline using a CASDOOR OIDC account.\n3. Navigate to outline /settings/members where avatars are displayed.\n4. Observe the avatar request failing with a 404 error on the API endpoint: `https://outline.mydomin.com/api/files.get?key=avatars/241ce70d-450b-4c4c-94ab-f16802fcc6cf/308dd2a6-a9b9-4f73-a14c-4f242205c944`.\n`{\"ok\":false,\"error\":\"not_found\",\"status\":404,\"message\":\"Resource not found\"}`\n![Image](https://github.com/user-attachments/assets/67d2fb2f-c9d7-4a35-a423-dd6a99690dab)\n\n5. Verify the file exists in the Docker volume.\n\n![Image](https://github.com/user-attachments/assets/eb78f439-4e43-43bb-9b66-c5de4be939a6)\n\n### Environment\n\n```markdown\n- Outline:0.83.0\n- Browser:Edge,Chrome\n```\n\n### Anything else?\n\n### Environment\n\n- **Outline Version:** v0.83.0\n- **Operating System:** Windows11 WSL docker\n- **Browser:** Chrome 135.0.7049.85, Edge 135.0.3179.66; \n- **Docker Version:** Docker version 27.1.1, build 6312585\n- **OIDC Provider:** CASDOOR\n\n**Key details:**\n- API endpoint: `https://outline.mydomin.com/api/files.get?key=avatars/241ce70d-450b-4c4c-94ab-f16802fcc6cf/308dd2a6-a9b9-4f73-a14c-4f242205c944`\n- Error response: `{\"ok\":false,\"error\":\"not_found\",\"status\":404,\"message\":\"Resource not found\"}`\n- I've confirmed the resource exists in the Docker volume, but it's not being accessed successfully.\n- The problem appears isolated to OIDC-automated avatar imports (`avatars/` path), which might not be processing file keys or permissions correctly, while manually uploaded avatars (`public/` path) function normally.\n\n**Possible cause:** This could be related to how OIDC authentication handles file paths or permissions. For e.g., the OIDC flow might not be passing the correct context or tokens needed for the API to resolve the file key, leading to a \"not found\" error despite the file being present. IMO, it might involve misconfigurations in Outline's OIDC integration, such as incorrect URL mappings, authentication scopes, or Docker volume mounting issues that affect file accessibility post-login.",
    "issue_word_count": 440,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "plugins/storage/server/api/files.test.ts",
      "plugins/storage/server/api/files.ts",
      "server/models/Attachment.ts"
    ],
    "pr_changed_test_files": [
      "plugins/storage/server/api/files.test.ts"
    ],
    "base_commit": "6b497cf1ec01c8a05e9d93f53239ccb19acf68b9",
    "head_commit": "684d6ebce1d67d220df1c7264b02a3dd3f2c39a1",
    "repo_url": "https://github.com/outline/outline/pull/9025",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/9025",
    "dockerfile": "",
    "pr_merged_at": "2025-04-23T01:23:51.000Z",
    "patch": "diff --git a/plugins/storage/server/api/files.ts b/plugins/storage/server/api/files.ts\nindex 963e86933519..b70aadca2791 100644\n--- a/plugins/storage/server/api/files.ts\n+++ b/plugins/storage/server/api/files.ts\n@@ -78,17 +78,13 @@ router.get(\n     const { isPublicBucket, fileName } = AttachmentHelper.parseKey(key);\n     const skipAuthorize = isPublicBucket || isSignedRequest;\n     const cacheHeader = \"max-age=604800, immutable\";\n-\n-    const attachment = await Attachment.findOne({\n-      where: { key },\n-    });\n-\n-    // Attachment is requested with a key, but it was not found\n-    if (!attachment && !!ctx.input.query.key) {\n-      throw NotFoundError();\n-    }\n+    const attachment = await Attachment.findByKey(key);\n \n     if (!skipAuthorize) {\n+      if (!attachment && !!ctx.input.query.key) {\n+        throw NotFoundError();\n+      }\n+\n       authorize(actor, \"read\", attachment);\n     }\n \n\ndiff --git a/server/models/Attachment.ts b/server/models/Attachment.ts\nindex 5b6baf5de229..a24b39d75df2 100644\n--- a/server/models/Attachment.ts\n+++ b/server/models/Attachment.ts\n@@ -5,6 +5,7 @@ import {\n   InferAttributes,\n   InferCreationAttributes,\n   QueryTypes,\n+  FindOptions,\n } from \"sequelize\";\n import {\n   BeforeDestroy,\n@@ -164,6 +165,20 @@ class Attachment extends IdModel<\n \n   // static methods\n \n+  /**\n+   * Find an attachment by its key.\n+   *\n+   * @param key - The key of the attachment to find.\n+   * @param options - Additional options for the query.\n+   * @returns A promise resolving to the attachment with the given key, or null if not found.\n+   */\n+  static async findByKey(\n+    key: string,\n+    options?: FindOptions<Attachment>\n+  ): Promise<Attachment | null> {\n+    return this.findOne({ where: { key }, ...options });\n+  }\n+\n   /**\n    * Get the total size of all attachments for a given team.\n    *\n",
    "test_patch": "diff --git a/plugins/storage/server/api/files.test.ts b/plugins/storage/server/api/files.test.ts\nindex f6ed0ab03415..16bf3503db52 100644\n--- a/plugins/storage/server/api/files.test.ts\n+++ b/plugins/storage/server/api/files.test.ts\n@@ -277,6 +277,35 @@ describe(\"#files.get\", () => {\n     );\n   });\n \n+  it(\"should succeed with status 200 ok when avatar is requested using key\", async () => {\n+    const user = await buildUser();\n+    const key = path.join(\"avatars\", user.id, uuidV4());\n+    const attachment = await buildAttachment({\n+      key,\n+      teamId: user.teamId,\n+      userId: user.id,\n+      contentType: \"image/jpg\",\n+      acl: \"public-read\",\n+    });\n+\n+    await attachment.destroy({\n+      hooks: false,\n+    });\n+\n+    ensureDirSync(\n+      path.dirname(path.join(env.FILE_STORAGE_LOCAL_ROOT_DIR, key))\n+    );\n+\n+    copyFileSync(\n+      path.resolve(__dirname, \"..\", \"test\", \"fixtures\", \"avatar.jpg\"),\n+      path.join(env.FILE_STORAGE_LOCAL_ROOT_DIR, key)\n+    );\n+\n+    const res = await server.get(`/api/files.get?key=${key}`);\n+    expect(res.status).toEqual(200);\n+    expect(res.headers.get(\"Content-Disposition\")).toEqual(\"attachment\");\n+  });\n+\n   it(\"should succeed with status 200 ok when avatar is requested using key\", async () => {\n     const user = await buildUser();\n     const key = path.join(\"avatars\", user.id, uuidV4());\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8997",
    "pr_id": 8997,
    "issue_id": 8807,
    "repo": "outline/outline",
    "problem_statement": "Comment notifications are sent to more users than expected\nMaybe introduced here https://github.com/outline/outline/issues/4984 ",
    "issue_word_count": 10,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "server/models/helpers/NotificationHelper.test.ts",
      "server/models/helpers/NotificationHelper.ts",
      "server/queues/tasks/CommentCreatedNotificationsTask.ts"
    ],
    "pr_changed_test_files": [
      "server/models/helpers/NotificationHelper.test.ts"
    ],
    "base_commit": "5789d65bf5b526eb554b45d9f2ab06d2bbc61ab0",
    "head_commit": "dcf0ab955b20821b36e2554245305a3908cbe0b8",
    "repo_url": "https://github.com/outline/outline/pull/8997",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8997",
    "dockerfile": "",
    "pr_merged_at": "2025-04-17T12:08:10.000Z",
    "patch": "diff --git a/server/models/helpers/NotificationHelper.ts b/server/models/helpers/NotificationHelper.ts\nindex 962a71fe565f..7f33e8a2963e 100644\n--- a/server/models/helpers/NotificationHelper.ts\n+++ b/server/models/helpers/NotificationHelper.ts\n@@ -1,4 +1,5 @@\n import uniq from \"lodash/uniq\";\n+import uniqBy from \"lodash/uniqBy\";\n import { Op } from \"sequelize\";\n import {\n   NotificationEventType,\n@@ -187,7 +188,6 @@ export default class NotificationHelper {\n       });\n     } else {\n       const subscriptions = await Subscription.findAll({\n-        attributes: [\"userId\"],\n         where: {\n           userId: {\n             [Op.ne]: actorId,\n@@ -206,17 +206,19 @@ export default class NotificationHelper {\n         ],\n       });\n \n-      recipients = subscriptions.map((s) => s.user);\n+      recipients = uniqBy(\n+        subscriptions.map((s) => s.user),\n+        (user) => user.id\n+      );\n     }\n \n-    recipients = recipients.filter((recipient) =>\n-      recipient.subscribedToEventType(notificationType)\n-    );\n-\n     const filtered = [];\n \n     for (const recipient of recipients) {\n-      if (recipient.isSuspended) {\n+      if (\n+        recipient.isSuspended ||\n+        !recipient.subscribedToEventType(notificationType)\n+      ) {\n         continue;\n       }\n \n\ndiff --git a/server/queues/tasks/CommentCreatedNotificationsTask.ts b/server/queues/tasks/CommentCreatedNotificationsTask.ts\nindex 7e6f86ee305c..043ac32f3364 100644\n--- a/server/queues/tasks/CommentCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/CommentCreatedNotificationsTask.ts\n@@ -85,16 +85,21 @@ export default class CommentCreatedNotificationsTask extends BaseTask<CommentEve\n       )\n     ).filter((recipient) => !userIdsMentioned.includes(recipient.id));\n \n-    for (const recipient of recipients) {\n-      await Notification.create({\n-        event: NotificationEventType.CreateComment,\n-        userId: recipient.id,\n-        actorId: comment.createdById,\n-        teamId: document.teamId,\n-        commentId: comment.id,\n-        documentId: document.id,\n-      });\n-    }\n+    await sequelize.transaction(async (transaction) => {\n+      for (const recipient of recipients) {\n+        await Notification.create(\n+          {\n+            event: NotificationEventType.CreateComment,\n+            userId: recipient.id,\n+            actorId: comment.createdById,\n+            teamId: document.teamId,\n+            commentId: comment.id,\n+            documentId: document.id,\n+          },\n+          { transaction }\n+        );\n+      }\n+    });\n   }\n \n   public get options() {\n",
    "test_patch": "diff --git a/server/models/helpers/NotificationHelper.test.ts b/server/models/helpers/NotificationHelper.test.ts\nindex 45ad954714b5..71b624efa876 100644\n--- a/server/models/helpers/NotificationHelper.test.ts\n+++ b/server/models/helpers/NotificationHelper.test.ts\n@@ -251,6 +251,10 @@ describe(\"NotificationHelper\", () => {\n         userId: subscribedUser.id,\n         collectionId: document.collectionId!,\n       });\n+      await buildSubscription({\n+        userId: subscribedUser.id,\n+        documentId: document.id,\n+      });\n \n       const recipients =\n         await NotificationHelper.getDocumentNotificationRecipients({\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8911",
    "pr_id": 8911,
    "issue_id": 8908,
    "repo": "outline/outline",
    "problem_statement": "Fallback to default `teamName` if `organization.displayName` is unavailable\n\n### Discussed in https://github.com/outline/outline/discussions/8907\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **nixent** April  8, 2025</sup>\nMicrosoft Entra Id SSO requires profile permissions to be able to read user data as well as `Organization.DisplayName`:\r\n`const teamName = organization.displayName;` [L103](https://github.com/outline/outline/blob/01a5ff031aef97f76a6b6066fc29333828964d64/plugins/azure/server/auth/azure.ts#L103)\r\n\r\nIn some Microsoft Entra Id configuration scenarios, `User.Read` permissions are not sufficient to fetch `Organization.DisplayName`, even though Microsoft documentation [states so](https://learn.microsoft.com/en-us/graph/api/organization-list?view=graph-rest-1.0&tabs=http#permissions). As a result Microsoft Entra SSO fails with `BadRequestError: Unable to load organization info from Microsoft Graph API: Insufficient privileges to complete the operation`. Issue #7932 refers to the same error. \r\nAssigning `Organisation.Read.All` permission helps to resolve the permissions issue but it requires Admin consent and also gives higher permissions than actually needed.\r\n\r\nSince `Organization.DisplayName` is used just to display team name, suggest making it optional/allow blank or configurable via env variable. \r\n\r\n</div>",
    "issue_word_count": 179,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "plugins/discord/server/auth/discord.ts",
      "server/commands/accountProvisioner.test.ts",
      "server/commands/accountProvisioner.ts"
    ],
    "pr_changed_test_files": [
      "server/commands/accountProvisioner.test.ts"
    ],
    "base_commit": "0d09e547577967cd754a0a23b1e23ac51f3b95c6",
    "head_commit": "bee91fe06db62f818b2cf6498f205873ada36987",
    "repo_url": "https://github.com/outline/outline/pull/8911",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8911",
    "dockerfile": "",
    "pr_merged_at": "2025-04-09T02:10:07.000Z",
    "patch": "diff --git a/plugins/discord/server/auth/discord.ts b/plugins/discord/server/auth/discord.ts\nindex 68ca804c3f8e..868b1065bb6c 100644\n--- a/plugins/discord/server/auth/discord.ts\n+++ b/plugins/discord/server/auth/discord.ts\n@@ -94,7 +94,7 @@ if (env.DISCORD_CLIENT_ID && env.DISCORD_CLIENT_SECRET) {\n \n           /** Default user and team names metadata */\n           let userName = profile.username;\n-          let teamName = \"Wiki\";\n+          let teamName;\n           let userAvatarUrl: string = `https://cdn.discordapp.com/avatars/${profile.id}/${profile.avatar}.png`;\n           let teamAvatarUrl: string | undefined = undefined;\n           let subdomain = slugifyDomain(domain);\n\ndiff --git a/server/commands/accountProvisioner.ts b/server/commands/accountProvisioner.ts\nindex 0e02f03bcf13..566826593943 100644\n--- a/server/commands/accountProvisioner.ts\n+++ b/server/commands/accountProvisioner.ts\n@@ -43,7 +43,7 @@ type Props = {\n      */\n     teamId?: string;\n     /** The displayed name of the team */\n-    name: string;\n+    name?: string;\n     /** The domain name from the email of the user logging in */\n     domain?: string;\n     /** The preferred subdomain to provision for the team if not yet created */\n@@ -92,6 +92,7 @@ async function accountProvisioner({\n \n   try {\n     result = await teamProvisioner({\n+      name: \"Wiki\",\n       ...teamParams,\n       authenticationProvider: authenticationProviderParams,\n       ip,\n",
    "test_patch": "diff --git a/server/commands/accountProvisioner.test.ts b/server/commands/accountProvisioner.test.ts\nindex 6adc22e9a0c3..eac8bd16fa3b 100644\n--- a/server/commands/accountProvisioner.test.ts\n+++ b/server/commands/accountProvisioner.test.ts\n@@ -264,7 +264,6 @@ describe(\"accountProvisioner\", () => {\n             avatarUrl: faker.internet.avatar(),\n           },\n           team: {\n-            name: existingTeam.name,\n             avatarUrl: existingTeam.avatarUrl,\n             subdomain: faker.internet.domainWord(),\n           },\n@@ -308,7 +307,6 @@ describe(\"accountProvisioner\", () => {\n           avatarUrl: faker.internet.avatar(),\n         },\n         team: {\n-          name: team.name,\n           avatarUrl: team.avatarUrl,\n           subdomain: faker.internet.domainWord(),\n         },\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8889",
    "pr_id": 8889,
    "issue_id": 8873,
    "repo": "outline/outline",
    "problem_statement": "Remove usage of (logo.clearbit.com)\n# :rotating_light: Deprecation Notice :rotating_light:\n\nClearbit's free Logo API (logo.clearbit.com) will be discontinued on **December 1, 2025**, and will stop working on that date.\n\n## What You Need to Know:\nWe have identified your project as one that uses logo.clearbit.com - you’ll need to migrate to an alternative solution.\nWe’ve shared detailed information and alternative approaches in [our announcement on the HubSpot Developer Community](https://developers.hubspot.com/changelog/upcoming-sunset-of-clearbits-free-logo-api).\n\n## Recommended Next Steps\n1. **Audit your code**: Identify where logo.clearbit.com is used\n2. **Consider alternatives**: Review options and recommendations in our official post\n3. **Update dependencies**: If this project is part of a larger system, notify relevant maintainers\n\nWe appreciate all the developers who have used this service over the years! Check out the [HubSpot Developer Community](https://developers.hubspot.com/changelog/upcoming-sunset-of-clearbits-free-logo-api) for more details.\n",
    "issue_word_count": 154,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "server/commands/teamCreator.ts",
      "server/utils/avatars.test.ts",
      "server/utils/avatars.ts"
    ],
    "pr_changed_test_files": [
      "server/utils/avatars.test.ts"
    ],
    "base_commit": "f9476770cebbc90d0321f89a58a97589c888a407",
    "head_commit": "bab2729669bee8dec77c73aeeae984fc61f92756",
    "repo_url": "https://github.com/outline/outline/pull/8889",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8889",
    "dockerfile": "",
    "pr_merged_at": "2025-04-06T23:01:23.000Z",
    "patch": "diff --git a/server/commands/teamCreator.ts b/server/commands/teamCreator.ts\nindex f78f984ac600..ac8804ea12ea 100644\n--- a/server/commands/teamCreator.ts\n+++ b/server/commands/teamCreator.ts\n@@ -3,7 +3,6 @@ import slugify from \"slugify\";\n import { RESERVED_SUBDOMAINS } from \"@shared/utils/domains\";\n import { traceFunction } from \"@server/logging/tracing\";\n import { Team, Event } from \"@server/models\";\n-import { generateAvatarUrl } from \"@server/utils/avatars\";\n \n type Props = {\n   /** The displayed name of the team */\n@@ -29,20 +28,14 @@ type Props = {\n \n async function teamCreator({\n   name,\n-  domain,\n   subdomain,\n   avatarUrl,\n   authenticationProviders,\n   ip,\n   transaction,\n }: Props): Promise<Team> {\n-  // If the service did not provide a logo/avatar then we attempt to generate\n-  // one via ClearBit, or fallback to colored initials in worst case scenario\n-  if (!avatarUrl || !avatarUrl.startsWith(\"http\")) {\n-    avatarUrl = await generateAvatarUrl({\n-      domain,\n-      id: subdomain,\n-    });\n+  if (!avatarUrl?.startsWith(\"http\")) {\n+    avatarUrl = null;\n   }\n \n   const team = await Team.create(\n\ndiff --git a/server/utils/avatars.ts b/server/utils/avatars.ts\ndeleted file mode 100644\nindex fee5a372b1b5..000000000000\n--- a/server/utils/avatars.ts\n+++ /dev/null\n@@ -1,28 +0,0 @@\n-import crypto from \"crypto\";\n-import fetch from \"./fetch\";\n-\n-export async function generateAvatarUrl({\n-  id,\n-  domain,\n-}: {\n-  id: string;\n-  domain?: string;\n-}) {\n-  // attempt to get logo from Clearbit API. If one doesn't exist then\n-  // fall back to using tiley to generate a placeholder logo\n-  const hash = crypto.createHash(\"sha256\");\n-  hash.update(id);\n-  let cbResponse, cbUrl;\n-\n-  if (domain) {\n-    cbUrl = `https://logo.clearbit.com/${domain}`;\n-\n-    try {\n-      cbResponse = await fetch(cbUrl);\n-    } catch (err) {\n-      // okay\n-    }\n-  }\n-\n-  return cbUrl && cbResponse && cbResponse.status === 200 ? cbUrl : null;\n-}\n",
    "test_patch": "diff --git a/server/utils/avatars.test.ts b/server/utils/avatars.test.ts\ndeleted file mode 100644\nindex 9bffe6c89133..000000000000\n--- a/server/utils/avatars.test.ts\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-import { generateAvatarUrl } from \"./avatars\";\n-\n-it(\"should return clearbit url if available\", async () => {\n-  const url = await generateAvatarUrl({\n-    id: \"google\",\n-    domain: \"google.com\",\n-  });\n-  expect(url).toBe(\"https://logo.clearbit.com/google.com\");\n-});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8832",
    "pr_id": 8832,
    "issue_id": 8757,
    "repo": "outline/outline",
    "problem_statement": "Cleanup the old Notion importer\nWe should remove the old file-based importer before next release (v0.84.0). This is all the Notion logic that is not contained under `/plugins/` ",
    "issue_word_count": 26,
    "test_files_count": 3,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "app/scenes/Settings/components/ImportNotionDialog.tsx",
      "server/queues/processors/FileOperationCreatedProcessor.ts",
      "server/queues/tasks/ImportNotionTask.test.ts",
      "server/queues/tasks/ImportNotionTask.ts",
      "server/test/fixtures/notion-html.zip",
      "server/test/fixtures/notion-markdown.zip",
      "shared/i18n/locales/en_US/translation.json"
    ],
    "pr_changed_test_files": [
      "server/queues/tasks/ImportNotionTask.test.ts",
      "server/test/fixtures/notion-html.zip",
      "server/test/fixtures/notion-markdown.zip"
    ],
    "base_commit": "dcb7b86df8f096053fc715c7cf745a4d0cdfd1b9",
    "head_commit": "b57bae00b93b8ad306c3dd4d1488a691215a6a20",
    "repo_url": "https://github.com/outline/outline/pull/8832",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8832",
    "dockerfile": "",
    "pr_merged_at": "2025-04-06T16:04:35.000Z",
    "patch": "diff --git a/app/scenes/Settings/components/ImportNotionDialog.tsx b/app/scenes/Settings/components/ImportNotionDialog.tsx\ndeleted file mode 100644\nindex b0bc119f6c3b..000000000000\n--- a/app/scenes/Settings/components/ImportNotionDialog.tsx\n+++ /dev/null\n@@ -1,36 +0,0 @@\n-import * as React from \"react\";\n-import { Trans, useTranslation } from \"react-i18next\";\n-import { FileOperationFormat } from \"@shared/types\";\n-import useStores from \"~/hooks/useStores\";\n-import DropToImport from \"./DropToImport\";\n-import HelpDisclosure from \"./HelpDisclosure\";\n-\n-function ImportNotionDialog() {\n-  const { t } = useTranslation();\n-  const { dialogs } = useStores();\n-\n-  return (\n-    <>\n-      <HelpDisclosure title={<Trans>Where do I find the file?</Trans>}>\n-        <Trans\n-          defaults=\"In Notion, click <em>Settings & Members</em> in the left sidebar and open Settings. Look for the Export section, and click <em>Export all workspace content</em>. Choose <em>HTML</em> as the format for the best data compatability.\"\n-          components={{\n-            em: <strong />,\n-          }}\n-        />\n-      </HelpDisclosure>\n-      <DropToImport\n-        onSubmit={dialogs.closeAllModals}\n-        format={FileOperationFormat.Notion}\n-      >\n-        <>\n-          {t(\n-            `Drag and drop the zip file from Notion's HTML export option, or click to upload`\n-          )}\n-        </>\n-      </DropToImport>\n-    </>\n-  );\n-}\n-\n-export default ImportNotionDialog;\n\ndiff --git a/server/queues/processors/FileOperationCreatedProcessor.ts b/server/queues/processors/FileOperationCreatedProcessor.ts\nindex f88ed8011be8..ed0ef08871b6 100644\n--- a/server/queues/processors/FileOperationCreatedProcessor.ts\n+++ b/server/queues/processors/FileOperationCreatedProcessor.ts\n@@ -6,7 +6,6 @@ import ExportJSONTask from \"../tasks/ExportJSONTask\";\n import ExportMarkdownZipTask from \"../tasks/ExportMarkdownZipTask\";\n import ImportJSONTask from \"../tasks/ImportJSONTask\";\n import ImportMarkdownZipTask from \"../tasks/ImportMarkdownZipTask\";\n-import ImportNotionTask from \"../tasks/ImportNotionTask\";\n import BaseProcessor from \"./BaseProcessor\";\n \n export default class FileOperationCreatedProcessor extends BaseProcessor {\n@@ -25,11 +24,6 @@ export default class FileOperationCreatedProcessor extends BaseProcessor {\n             fileOperationId: event.modelId,\n           });\n           break;\n-        case FileOperationFormat.Notion:\n-          await ImportNotionTask.schedule({\n-            fileOperationId: event.modelId,\n-          });\n-          break;\n         case FileOperationFormat.JSON:\n           await ImportJSONTask.schedule({\n             fileOperationId: event.modelId,\n\ndiff --git a/server/queues/tasks/ImportNotionTask.ts b/server/queues/tasks/ImportNotionTask.ts\ndeleted file mode 100644\nindex 36ccd640ee44..000000000000\n--- a/server/queues/tasks/ImportNotionTask.ts\n+++ /dev/null\n@@ -1,354 +0,0 @@\n-import path from \"path\";\n-import fs from \"fs-extra\";\n-import compact from \"lodash/compact\";\n-import escapeRegExp from \"lodash/escapeRegExp\";\n-import mime from \"mime-types\";\n-import { v4 as uuidv4 } from \"uuid\";\n-import documentImporter from \"@server/commands/documentImporter\";\n-import { createContext } from \"@server/context\";\n-import Logger from \"@server/logging/Logger\";\n-import { FileOperation, User } from \"@server/models\";\n-import { sequelize } from \"@server/storage/database\";\n-import ImportHelper, { FileTreeNode } from \"@server/utils/ImportHelper\";\n-import ImportTask, { StructuredImportData } from \"./ImportTask\";\n-\n-export default class ImportNotionTask extends ImportTask {\n-  public async parseData(\n-    dirPath: string,\n-    fileOperation: FileOperation\n-  ): Promise<StructuredImportData> {\n-    const tree = await ImportHelper.toFileTree(dirPath);\n-    if (!tree) {\n-      throw new Error(\"Could not find valid content in zip file\");\n-    }\n-\n-    // New Notion exports have a single folder with the name of the export, we must skip this\n-    // folder and go directly to the children.\n-    let parsed;\n-    if (\n-      tree.children.length === 1 &&\n-      tree.children[0].children.find((child) => child.title === \"index\")\n-    ) {\n-      parsed = await this.parseFileTree(\n-        fileOperation,\n-        tree.children[0].children.filter((child) => child.title !== \"index\")\n-      );\n-    } else {\n-      parsed = await this.parseFileTree(fileOperation, tree.children);\n-    }\n-\n-    if (parsed.documents.length === 0 && parsed.collections.length === 1) {\n-      const collection = parsed.collections[0];\n-      const collectionId = uuidv4();\n-      if (collection.description) {\n-        parsed.documents.push({\n-          title: collection.name,\n-          icon: collection.icon,\n-          color: collection.color,\n-          path: \"\",\n-          text: String(collection.description),\n-          id: collection.id,\n-          externalId: collection.externalId,\n-          mimeType: \"text/html\",\n-          collectionId,\n-        });\n-      }\n-\n-      collection.name = \"Notion\";\n-      collection.icon = undefined;\n-      collection.color = undefined;\n-      collection.externalId = undefined;\n-      collection.description = undefined;\n-      collection.id = collectionId;\n-    }\n-\n-    return parsed;\n-  }\n-\n-  /**\n-   * Converts the file structure from zipAsFileTree into documents,\n-   * collections, and attachments.\n-   *\n-   * @param fileOperation The file operation\n-   * @param tree An array of FileTreeNode representing root files in the zip\n-   * @returns A StructuredImportData object\n-   */\n-  private async parseFileTree(\n-    fileOperation: FileOperation,\n-    tree: FileTreeNode[]\n-  ): Promise<StructuredImportData> {\n-    const user = await User.findByPk(fileOperation.userId, {\n-      rejectOnEmpty: true,\n-    });\n-\n-    const output: StructuredImportData = {\n-      collections: [],\n-      documents: [],\n-      attachments: [],\n-    };\n-\n-    const parseNodeChildren = async (\n-      children: FileTreeNode[],\n-      collectionId: string,\n-      parentDocumentId?: string\n-    ): Promise<void> => {\n-      await Promise.all(\n-        children.map(async (child) => {\n-          // Ignore the CSV's for databases upfront\n-          if (child.path.endsWith(\".csv\")) {\n-            return;\n-          }\n-\n-          const id = uuidv4();\n-          const match = child.title.match(this.NotionUUIDRegex);\n-          const name = child.title.replace(this.NotionUUIDRegex, \"\");\n-          const externalId = match ? match[0].trim() : undefined;\n-\n-          // If it's not a text file we're going to treat it as an attachment.\n-          const mimeType = mime.lookup(child.name);\n-          const isDocument =\n-            mimeType === \"text/markdown\" ||\n-            mimeType === \"text/plain\" ||\n-            mimeType === \"text/html\";\n-\n-          // If it's not a document and not a folder, treat it as an attachment\n-          if (!isDocument && mimeType) {\n-            output.attachments.push({\n-              id,\n-              name: child.name,\n-              path: child.path,\n-              mimeType,\n-              buffer: () => fs.readFile(child.path),\n-              externalId,\n-            });\n-            return;\n-          }\n-\n-          Logger.debug(\"task\", `Processing ${name} as ${mimeType}`);\n-\n-          const { title, icon, text } = await sequelize.transaction(\n-            async (transaction) =>\n-              documentImporter({\n-                mimeType: mimeType || \"text/markdown\",\n-                fileName: name,\n-                content:\n-                  child.children.length > 0\n-                    ? \"\"\n-                    : await fs.readFile(child.path, \"utf8\"),\n-                user,\n-                ctx: createContext({ user, transaction }),\n-              })\n-          );\n-\n-          const existingDocumentIndex = output.documents.findIndex(\n-            (doc) => doc.externalId === externalId\n-          );\n-\n-          const existingDocument = output.documents[existingDocumentIndex];\n-\n-          // If there is an existing document with the same externalId that means\n-          // we've already parsed either a folder or a file referencing the same\n-          // document, as such we should merge.\n-          if (existingDocument) {\n-            if (existingDocument.text === \"\") {\n-              output.documents[existingDocumentIndex].text = text;\n-            }\n-\n-            await parseNodeChildren(\n-              child.children,\n-              collectionId,\n-              existingDocument.id\n-            );\n-          } else {\n-            output.documents.push({\n-              id,\n-              title,\n-              icon,\n-              text,\n-              collectionId,\n-              parentDocumentId,\n-              path: child.path,\n-              mimeType: mimeType || \"text/markdown\",\n-              externalId,\n-            });\n-            await parseNodeChildren(child.children, collectionId, id);\n-          }\n-        })\n-      );\n-    };\n-\n-    const replaceInternalLinksAndImages = (text: string) => {\n-      // Find if there are any images in this document\n-      const imagesInText = this.parseImages(text);\n-\n-      for (const image of imagesInText) {\n-        const name = path.basename(image.src);\n-        const attachment = output.attachments.find(\n-          (att) =>\n-            att.path.endsWith(image.src) ||\n-            encodeURI(att.path).endsWith(image.src)\n-        );\n-\n-        if (!attachment) {\n-          if (!image.src.startsWith(\"http\")) {\n-            Logger.info(\n-              \"task\",\n-              `Could not find referenced attachment with name ${name} and src ${image.src}`\n-            );\n-          }\n-        } else {\n-          text = text.replace(\n-            new RegExp(escapeRegExp(image.src), \"g\"),\n-            `<<${attachment.id}>>`\n-          );\n-        }\n-      }\n-\n-      // With Notion's HTML import, images sometimes come wrapped in anchor tags\n-      // This isn't supported in Outline's editor, so we need to strip them.\n-      text = text.replace(/\\[!\\[([^[]+)]/g, \"![]\");\n-\n-      // Find if there are any links in this document pointing to other documents\n-      const internalLinksInText = this.parseInternalLinks(text);\n-\n-      // For each link update to the standardized format of <<documentId>>\n-      // instead of a relative or absolute URL within the original zip file.\n-      for (const link of internalLinksInText) {\n-        const doc = output.documents.find(\n-          (doc) => doc.externalId === link.externalId\n-        );\n-\n-        if (!doc) {\n-          Logger.info(\n-            \"task\",\n-            `Could not find referenced document with externalId ${link.externalId}`\n-          );\n-        } else {\n-          text = text.replace(link.href, `<<${doc.id}>>`);\n-        }\n-      }\n-\n-      return text;\n-    };\n-\n-    // All nodes in the root level should become collections\n-    for (const node of tree) {\n-      const match = node.title.match(this.NotionUUIDRegex);\n-      const name = node.title.replace(this.NotionUUIDRegex, \"\");\n-      const externalId = match ? match[0].trim() : undefined;\n-      const mimeType = mime.lookup(node.name);\n-\n-      const existingCollectionIndex = output.collections.findIndex(\n-        (collection) => collection.externalId === externalId\n-      );\n-      const existingCollection = output.collections[existingCollectionIndex];\n-      const collectionId = existingCollection?.id || uuidv4();\n-      let description;\n-\n-      // Root level docs become the descriptions of collections\n-      if (\n-        mimeType === \"text/markdown\" ||\n-        mimeType === \"text/plain\" ||\n-        mimeType === \"text/html\"\n-      ) {\n-        const { text } = await sequelize.transaction(async (transaction) =>\n-          documentImporter({\n-            mimeType,\n-            fileName: name,\n-            content: await fs.readFile(node.path, \"utf8\"),\n-            user,\n-            ctx: createContext({ user, transaction }),\n-          })\n-        );\n-\n-        description = text;\n-      } else if (node.children.length > 0) {\n-        await parseNodeChildren(node.children, collectionId);\n-      } else {\n-        Logger.debug(\"task\", `Unhandled file in zip: ${node.path}`, {\n-          fileOperationId: fileOperation.id,\n-        });\n-        continue;\n-      }\n-\n-      if (existingCollectionIndex !== -1) {\n-        if (description) {\n-          output.collections[existingCollectionIndex].description = description;\n-        }\n-      } else {\n-        output.collections.push({\n-          id: collectionId,\n-          name,\n-          description,\n-          externalId,\n-        });\n-      }\n-    }\n-\n-    for (const document of output.documents) {\n-      document.text = replaceInternalLinksAndImages(document.text);\n-    }\n-\n-    for (const collection of output.collections) {\n-      if (typeof collection.description === \"string\") {\n-        collection.description = replaceInternalLinksAndImages(\n-          collection.description\n-        );\n-      }\n-    }\n-\n-    return output;\n-  }\n-\n-  /**\n-   * Extracts internal links from a markdown document, taking into account the\n-   * externalId of the document, which is part of the link title.\n-   *\n-   * @param text The markdown text to parse\n-   * @returns An array of internal links\n-   */\n-  private parseInternalLinks(\n-    text: string\n-  ): { title: string; href: string; externalId: string }[] {\n-    return compact(\n-      [...text.matchAll(this.NotionLinkRegex)].map((match) => ({\n-        title: match[1],\n-        href: match[2],\n-        externalId: match[3],\n-      }))\n-    );\n-  }\n-\n-  /**\n-   * Extracts images from the markdown document\n-   *\n-   * @param text The markdown text to parse\n-   * @returns An array of internal links\n-   */\n-  private parseImages(text: string): { alt: string; src: string }[] {\n-    return compact(\n-      [...text.matchAll(this.ImageRegex)].map((match) => ({\n-        alt: match[1],\n-        src: match[2],\n-      }))\n-    );\n-  }\n-\n-  /**\n-   * Regex to find markdown images of all types\n-   */\n-  private ImageRegex =\n-    /!\\[(?<alt>[^\\][]*?)]\\((?<filename>[^\\][]*?)(?=“|\\))“?(?<title>[^\\][”]+)?”?\\)/g;\n-\n-  /**\n-   * Regex to find markdown links containing ID's that look like UUID's with the\n-   * \"-\"'s removed, Notion's externalId format.\n-   */\n-  private NotionLinkRegex = /\\[([^[]+)]\\((.*?([0-9a-fA-F]{32})\\..*?)\\)/g;\n-\n-  /**\n-   * Regex to find Notion document UUID's in the title of a document.\n-   */\n-  private NotionUUIDRegex =\n-    /\\s([0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}|[0-9a-fA-F]{32})$/;\n-}\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex ea9b9faab9bf..019dadf4fe26 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -903,9 +903,6 @@\n   \"{{ count }} document imported_plural\": \"{{ count }} documents imported\",\n   \"You can import a zip file that was previously exported from an Outline installation – collections, documents, and images will be imported. In Outline, open <em>Export</em> in the Settings sidebar and click on <em>Export Data</em>.\": \"You can import a zip file that was previously exported from an Outline installation – collections, documents, and images will be imported. In Outline, open <em>Export</em> in the Settings sidebar and click on <em>Export Data</em>.\",\n   \"Drag and drop the zip file from the Markdown export option in {{appName}}, or click to upload\": \"Drag and drop the zip file from the Markdown export option in {{appName}}, or click to upload\",\n-  \"Where do I find the file?\": \"Where do I find the file?\",\n-  \"In Notion, click <em>Settings & Members</em> in the left sidebar and open Settings. Look for the Export section, and click <em>Export all workspace content</em>. Choose <em>HTML</em> as the format for the best data compatability.\": \"In Notion, click <em>Settings & Members</em> in the left sidebar and open Settings. Look for the Export section, and click <em>Export all workspace content</em>. Choose <em>HTML</em> as the format for the best data compatability.\",\n-  \"Drag and drop the zip file from Notion's HTML export option, or click to upload\": \"Drag and drop the zip file from Notion's HTML export option, or click to upload\",\n   \"Last active\": \"Last active\",\n   \"Guest\": \"Guest\",\n   \"Shared by\": \"Shared by\",\n",
    "test_patch": "diff --git a/server/queues/tasks/ImportNotionTask.test.ts b/server/queues/tasks/ImportNotionTask.test.ts\ndeleted file mode 100644\nindex 01181bfa9a37..000000000000\n--- a/server/queues/tasks/ImportNotionTask.test.ts\n+++ /dev/null\n@@ -1,87 +0,0 @@\n-/* eslint-disable @typescript-eslint/no-empty-function */\n-import path from \"path\";\n-import { FileOperation } from \"@server/models\";\n-import { buildFileOperation } from \"@server/test/factories\";\n-import ImportNotionTask from \"./ImportNotionTask\";\n-\n-describe(\"ImportNotionTask\", () => {\n-  it(\"should import successfully from a Markdown export\", async () => {\n-    const fileOperation = await buildFileOperation();\n-    Object.defineProperty(fileOperation, \"handle\", {\n-      get() {\n-        return {\n-          path: path.resolve(\n-            __dirname,\n-            \"..\",\n-            \"..\",\n-            \"test\",\n-            \"fixtures\",\n-            \"notion-markdown.zip\"\n-          ),\n-          cleanup: async () => {},\n-        };\n-      },\n-    });\n-    jest.spyOn(FileOperation, \"findByPk\").mockResolvedValue(fileOperation);\n-\n-    const props = {\n-      fileOperationId: fileOperation.id,\n-    };\n-\n-    const task = new ImportNotionTask();\n-    const response = await task.perform(props);\n-\n-    expect(response.collections.size).toEqual(2);\n-    expect(response.documents.size).toEqual(6);\n-    expect(response.attachments.size).toEqual(1);\n-\n-    // Check that the image url was replaced in the text with a redirect\n-    const attachments = Array.from(response.attachments.values());\n-    const documents = Array.from(response.documents.values());\n-    expect(documents.map((d) => d.text).join(\"\")).toContain(\n-      attachments[0].redirectUrl\n-    );\n-  });\n-\n-  it(\"should import successfully from a HTML export\", async () => {\n-    const fileOperation = await buildFileOperation();\n-    Object.defineProperty(fileOperation, \"handle\", {\n-      get() {\n-        return {\n-          path: path.resolve(\n-            __dirname,\n-            \"..\",\n-            \"..\",\n-            \"test\",\n-            \"fixtures\",\n-            \"notion-html.zip\"\n-          ),\n-          cleanup: async () => {},\n-        };\n-      },\n-    });\n-    jest.spyOn(FileOperation, \"findByPk\").mockResolvedValue(fileOperation);\n-\n-    const props = {\n-      fileOperationId: fileOperation.id,\n-    };\n-\n-    const task = new ImportNotionTask();\n-    const response = await task.perform(props);\n-\n-    expect(response.collections.size).toEqual(2);\n-    expect(response.documents.size).toEqual(6);\n-    expect(response.attachments.size).toEqual(4);\n-\n-    // Check that the image url was replaced in the text with a redirect\n-    const attachments = Array.from(response.attachments.values());\n-    const attachment = attachments.find((att) =>\n-      att.key.endsWith(\"Screen_Shot_2022-04-21_at_2.23.26_PM.png\")\n-    );\n-\n-    const documents = Array.from(response.documents.values());\n-    expect(documents.map((d) => d.text).join(\"\")).toContain(\n-      attachment?.redirectUrl\n-    );\n-  });\n-});\n\ndiff --git a/server/test/fixtures/notion-html.zip b/server/test/fixtures/notion-html.zip\ndeleted file mode 100644\nindex 7ad29a287b71..000000000000\nBinary files a/server/test/fixtures/notion-html.zip and /dev/null differ\n\ndiff --git a/server/test/fixtures/notion-markdown.zip b/server/test/fixtures/notion-markdown.zip\ndeleted file mode 100644\nindex aaa6daa175d3..000000000000\nBinary files a/server/test/fixtures/notion-markdown.zip and /dev/null differ\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8809",
    "pr_id": 8809,
    "issue_id": 8807,
    "repo": "outline/outline",
    "problem_statement": "Comment notifications are sent to more users than expected\nMaybe introduced here https://github.com/outline/outline/issues/4984 ",
    "issue_word_count": 10,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "server/models/helpers/NotificationHelper.test.ts",
      "server/models/helpers/NotificationHelper.ts",
      "server/queues/tasks/DocumentPublishedNotificationsTask.ts",
      "server/queues/tasks/RevisionCreatedNotificationsTask.ts"
    ],
    "pr_changed_test_files": [
      "server/models/helpers/NotificationHelper.test.ts"
    ],
    "base_commit": "e98d931aaa5c2aa55d35991c10d1cc4f1c4ec14e",
    "head_commit": "d25114cba3f407d8bf5bc2900fd60b70ae4ee7ca",
    "repo_url": "https://github.com/outline/outline/pull/8809",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8809",
    "dockerfile": "",
    "pr_merged_at": "2025-03-28T02:10:32.000Z",
    "patch": "diff --git a/server/models/helpers/NotificationHelper.ts b/server/models/helpers/NotificationHelper.ts\nindex 80db27505449..2d374677b941 100644\n--- a/server/models/helpers/NotificationHelper.ts\n+++ b/server/models/helpers/NotificationHelper.ts\n@@ -14,7 +14,7 @@ import {\n   Comment,\n   View,\n } from \"@server/models\";\n-import { can } from \"@server/policies\";\n+import { canUserAccessDocument } from \"@server/utils/permissions\";\n import { ProsemirrorHelper } from \"./ProsemirrorHelper\";\n \n export default class NotificationHelper {\n@@ -60,18 +60,12 @@ export default class NotificationHelper {\n     comment: Comment,\n     actorId: string\n   ): Promise<User[]> => {\n-    let recipients = await this.getDocumentNotificationRecipients({\n-      document,\n-      notificationType: NotificationEventType.CreateComment,\n-      onlySubscribers: !comment.parentCommentId,\n-      actorId,\n-    });\n-\n-    recipients = recipients.filter((recipient) =>\n-      recipient.subscribedToEventType(NotificationEventType.CreateComment)\n-    );\n+    let recipients: User[];\n \n-    if (recipients.length > 0 && comment.parentCommentId) {\n+    // If this is a reply to another comment, we want to notify all users\n+    // that are involved in the thread of this comment (i.e. the original\n+    // comment and all replies to it).\n+    if (comment.parentCommentId) {\n       const contextComments = await Comment.findAll({\n         attributes: [\"createdById\", \"data\"],\n         where: {\n@@ -95,13 +89,37 @@ export default class NotificationHelper {\n       const userIdsInThread = uniq([\n         ...createdUserIdsInThread,\n         ...mentionedUserIdsInThread,\n-      ]);\n-      recipients = recipients.filter((r) => userIdsInThread.includes(r.id));\n+      ]).filter((userId) => userId !== actorId);\n+\n+      recipients = await User.findAll({\n+        where: {\n+          id: {\n+            [Op.in]: userIdsInThread,\n+          },\n+          teamId: document.teamId,\n+        },\n+      });\n+\n+      recipients = recipients.filter((recipient) =>\n+        recipient.subscribedToEventType(NotificationEventType.CreateComment)\n+      );\n+    } else {\n+      recipients = await this.getDocumentNotificationRecipients({\n+        document,\n+        notificationType: NotificationEventType.CreateComment,\n+        actorId,\n+        // We will check below, this just prevents duplicate queries\n+        disableAccessCheck: true,\n+      });\n     }\n \n     const filtered: User[] = [];\n \n     for (const recipient of recipients) {\n+      if (recipient.isSuspended) {\n+        continue;\n+      }\n+\n       // If this recipient has viewed the document since the comment was made\n       // then we can avoid sending them a useless notification, yay.\n       const view = await View.findOne({\n@@ -119,7 +137,13 @@ export default class NotificationHelper {\n           \"processor\",\n           `suppressing notification to ${recipient.id} because doc viewed`\n         );\n-      } else {\n+        continue;\n+      }\n+\n+      // Check the recipient has access to the collection this document is in. Just\n+      // because they are subscribed doesn't mean they still have access to read\n+      // the document.\n+      if (await canUserAccessDocument(recipient, document.id)) {\n         filtered.push(recipient);\n       }\n     }\n@@ -132,24 +156,36 @@ export default class NotificationHelper {\n    *\n    * @param document The document to get recipients for.\n    * @param notificationType The notification type for which to find the recipients.\n-   * @param onlySubscribers Whether to consider only the users who have active subscription to the document.\n    * @param actorId The id of the user that performed the action.\n+   * @param disableAccessCheck Whether to disable the access check for the document.\n    * @returns A list of recipients\n    */\n   public static getDocumentNotificationRecipients = async ({\n     document,\n     notificationType,\n-    onlySubscribers,\n     actorId,\n+    disableAccessCheck = false,\n   }: {\n     document: Document;\n     notificationType: NotificationEventType;\n-    onlySubscribers: boolean;\n     actorId: string;\n+    disableAccessCheck?: boolean;\n   }): Promise<User[]> => {\n     let recipients: User[];\n \n-    if (onlySubscribers) {\n+    if (notificationType === NotificationEventType.PublishDocument) {\n+      recipients = await User.findAll({\n+        where: {\n+          id: {\n+            [Op.ne]: actorId,\n+          },\n+          teamId: document.teamId,\n+          notificationSettings: {\n+            [notificationType]: true,\n+          },\n+        },\n+      });\n+    } else {\n       const subscriptions = await Subscription.findAll({\n         attributes: [\"userId\"],\n         where: {\n@@ -170,15 +206,6 @@ export default class NotificationHelper {\n       });\n \n       recipients = subscriptions.map((s) => s.user);\n-    } else {\n-      recipients = await User.findAll({\n-        where: {\n-          id: {\n-            [Op.ne]: actorId,\n-          },\n-          teamId: document.teamId,\n-        },\n-      });\n     }\n \n     recipients = recipients.filter((recipient) =>\n@@ -188,18 +215,17 @@ export default class NotificationHelper {\n     const filtered = [];\n \n     for (const recipient of recipients) {\n-      if (!recipient.email || recipient.isSuspended) {\n+      if (recipient.isSuspended) {\n         continue;\n       }\n \n       // Check the recipient has access to the collection this document is in. Just\n       // because they are subscribed doesn't mean they still have access to read\n       // the document.\n-      const doc = await Document.findByPk(document.id, {\n-        userId: recipient.id,\n-      });\n-\n-      if (can(recipient, \"read\", doc)) {\n+      if (\n+        disableAccessCheck ||\n+        (await canUserAccessDocument(recipient, document.id))\n+      ) {\n         filtered.push(recipient);\n       }\n     }\n\ndiff --git a/server/queues/tasks/DocumentPublishedNotificationsTask.ts b/server/queues/tasks/DocumentPublishedNotificationsTask.ts\nindex fbff48a5e65b..60290ca2d001 100644\n--- a/server/queues/tasks/DocumentPublishedNotificationsTask.ts\n+++ b/server/queues/tasks/DocumentPublishedNotificationsTask.ts\n@@ -54,7 +54,6 @@ export default class DocumentPublishedNotificationsTask extends BaseTask<Documen\n       await NotificationHelper.getDocumentNotificationRecipients({\n         document,\n         notificationType: NotificationEventType.PublishDocument,\n-        onlySubscribers: false,\n         actorId: document.lastModifiedById,\n       })\n     ).filter((recipient) => !userIdsMentioned.includes(recipient.id));\n\ndiff --git a/server/queues/tasks/RevisionCreatedNotificationsTask.ts b/server/queues/tasks/RevisionCreatedNotificationsTask.ts\nindex 7e19d39cbf09..a2df08539366 100644\n--- a/server/queues/tasks/RevisionCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/RevisionCreatedNotificationsTask.ts\n@@ -76,7 +76,6 @@ export default class RevisionCreatedNotificationsTask extends BaseTask<RevisionE\n       await NotificationHelper.getDocumentNotificationRecipients({\n         document,\n         notificationType: NotificationEventType.UpdateDocument,\n-        onlySubscribers: true,\n         actorId: document.lastModifiedById,\n       })\n     ).filter((recipient) => !userIdsMentioned.includes(recipient.id));\n",
    "test_patch": "diff --git a/server/models/helpers/NotificationHelper.test.ts b/server/models/helpers/NotificationHelper.test.ts\nindex 4cc18cec0504..e0b2282f0f37 100644\n--- a/server/models/helpers/NotificationHelper.test.ts\n+++ b/server/models/helpers/NotificationHelper.test.ts\n@@ -9,7 +9,7 @@ import NotificationHelper from \"./NotificationHelper\";\n \n describe(\"NotificationHelper\", () => {\n   describe(\"getCommentNotificationRecipients\", () => {\n-    it(\"should return users who have notification enabled for comment creation and are subscribed to the document in case of parent comment\", async () => {\n+    it(\"should only return users who have notification enabled for comment creation and are subscribed to the document in case of new thread\", async () => {\n       const documentAuthor = await buildUser();\n       const document = await buildDocument({\n         userId: documentAuthor.id,\n@@ -54,7 +54,7 @@ describe(\"NotificationHelper\", () => {\n       expect(recipients[0].id).toEqual(notificationEnabledUser.id);\n     });\n \n-    it(\"should return users who have notification enabled for comment creation and are in the thread in case of child comment\", async () => {\n+    it(\"should only return users who have notification enabled for comment creation and are in the thread in case of child comment\", async () => {\n       const documentAuthor = await buildUser();\n       const document = await buildDocument({\n         userId: documentAuthor.id,\n@@ -112,32 +112,104 @@ describe(\"NotificationHelper\", () => {\n       expect(recipients.length).toEqual(1);\n       expect(recipients[0].id).toEqual(notificationEnabledUserInThread.id);\n     });\n-  });\n \n-  describe(\"getDocumentNotificationRecipients\", () => {\n-    it(\"should return all users who have notification enabled for the event\", async () => {\n+    it(\"should not return users who have notification disabled for comment creation and are in the thread in case of child comment\", async () => {\n       const documentAuthor = await buildUser();\n       const document = await buildDocument({\n         userId: documentAuthor.id,\n         teamId: documentAuthor.teamId,\n       });\n-      const notificationEnabledUser = await buildUser({\n+      const notificationEnabledUserInThread = await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: { [NotificationEventType.CreateComment]: false },\n+      });\n+      const notificationEnabledUserNotInThread = await buildUser({\n         teamId: document.teamId,\n-        notificationSettings: { [NotificationEventType.UpdateDocument]: true },\n+        notificationSettings: { [NotificationEventType.CreateComment]: true },\n+      });\n+      const notificationDisabledUser = await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: {\n+          [NotificationEventType.CreateComment]: false,\n+        },\n+      });\n+      await Promise.all([\n+        buildSubscription({\n+          userId: documentAuthor.id,\n+          documentId: document.id,\n+        }),\n+        buildSubscription({\n+          userId: notificationEnabledUserInThread.id,\n+          documentId: document.id,\n+        }),\n+        buildSubscription({\n+          userId: notificationEnabledUserNotInThread.id,\n+          documentId: document.id,\n+        }),\n+        buildSubscription({\n+          userId: notificationDisabledUser.id,\n+          documentId: document.id,\n+        }),\n+      ]);\n+      const parentComment = await buildComment({\n+        documentId: document.id,\n+        userId: notificationEnabledUserInThread.id,\n+      });\n+      const childComment = await buildComment({\n+        documentId: document.id,\n+        userId: documentAuthor.id,\n+        parentCommentId: parentComment.id,\n       });\n \n       const recipients =\n-        await NotificationHelper.getDocumentNotificationRecipients({\n+        await NotificationHelper.getCommentNotificationRecipients(\n           document,\n-          notificationType: NotificationEventType.UpdateDocument,\n-          onlySubscribers: false,\n-          actorId: documentAuthor.id,\n-        });\n+          childComment,\n+          childComment.createdById\n+        );\n+\n+      expect(recipients.length).toEqual(0);\n+    });\n+\n+    it(\"should return users who have notification enabled and are in the thread but not explicitly subscribed to document\", async () => {\n+      const documentAuthor = await buildUser();\n+      const document = await buildDocument({\n+        userId: documentAuthor.id,\n+        teamId: documentAuthor.teamId,\n+      });\n+      const notificationEnabledUserInThread = await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: { [NotificationEventType.CreateComment]: true },\n+      });\n+      await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: {\n+          [NotificationEventType.CreateComment]: false,\n+        },\n+      });\n+      const parentComment = await buildComment({\n+        documentId: document.id,\n+        userId: notificationEnabledUserInThread.id,\n+      });\n+      const childComment = await buildComment({\n+        documentId: document.id,\n+        userId: documentAuthor.id,\n+        parentCommentId: parentComment.id,\n+      });\n+\n+      const recipients =\n+        await NotificationHelper.getCommentNotificationRecipients(\n+          document,\n+          childComment,\n+          childComment.createdById\n+        );\n \n       expect(recipients.length).toEqual(1);\n-      expect(recipients[0].id).toEqual(notificationEnabledUser.id);\n+      expect(recipients[0].id).toEqual(notificationEnabledUserInThread.id);\n     });\n+  });\n \n+  describe(\"getDocumentNotificationRecipients\", () => {\n     it(\"should return users who have subscribed to the document\", async () => {\n       const documentAuthor = await buildUser();\n       const document = await buildDocument({\n@@ -154,7 +226,6 @@ describe(\"NotificationHelper\", () => {\n         await NotificationHelper.getDocumentNotificationRecipients({\n           document,\n           notificationType: NotificationEventType.UpdateDocument,\n-          onlySubscribers: true,\n           actorId: documentAuthor.id,\n         });\n \n@@ -178,7 +249,6 @@ describe(\"NotificationHelper\", () => {\n         await NotificationHelper.getDocumentNotificationRecipients({\n           document,\n           notificationType: NotificationEventType.UpdateDocument,\n-          onlySubscribers: true,\n           actorId: documentAuthor.id,\n         });\n \n@@ -216,7 +286,6 @@ describe(\"NotificationHelper\", () => {\n         await NotificationHelper.getDocumentNotificationRecipients({\n           document,\n           notificationType: NotificationEventType.UpdateDocument,\n-          onlySubscribers: true,\n           actorId: documentAuthor.id,\n         });\n \n@@ -235,20 +304,19 @@ describe(\"NotificationHelper\", () => {\n       });\n       const notificationEnabledUser = await buildUser({\n         teamId: document.teamId,\n-        notificationSettings: { [NotificationEventType.UpdateDocument]: true },\n+        notificationSettings: { [NotificationEventType.PublishDocument]: true },\n       });\n       // suspended user\n       await buildUser({\n         suspendedAt: new Date(),\n         teamId: document.teamId,\n-        notificationSettings: { [NotificationEventType.UpdateDocument]: true },\n+        notificationSettings: { [NotificationEventType.PublishDocument]: true },\n       });\n \n       const recipients =\n         await NotificationHelper.getDocumentNotificationRecipients({\n           document,\n-          notificationType: NotificationEventType.UpdateDocument,\n-          onlySubscribers: false,\n+          notificationType: NotificationEventType.PublishDocument,\n           actorId: documentAuthor.id,\n         });\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8803",
    "pr_id": 8803,
    "issue_id": 8795,
    "repo": "outline/outline",
    "problem_statement": "Error:  % >=  %\nSentry Issue: [OUTLINE-CLOUD-6K3](https://outline-jl.sentry.io/issues/5242321680/?referrer=github_integration)\n\n```\nError:  % >=  %\n  at <object>.drop (../../../app/components/Sidebar/components/DraggableCollectionLink.tsx:50:9)\n  at Array.forEach (<anonymous>)\n...\n(4 additional frame(s) were not displayed)\n```",
    "issue_word_count": 37,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "server/models/Collection.ts",
      "server/routes/api/collections/collections.test.ts",
      "server/routes/api/collections/collections.ts",
      "server/utils/removeIndexCollision.ts",
      "server/validation.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/collections/collections.test.ts"
    ],
    "base_commit": "ab1f00e919939672ba5182208fbb37fa391213de",
    "head_commit": "d08b516eacf9ed61edb4125d3b56116dc22dea9f",
    "repo_url": "https://github.com/outline/outline/pull/8803",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8803",
    "dockerfile": "",
    "pr_merged_at": "2025-03-27T09:50:40.000Z",
    "patch": "diff --git a/server/models/Collection.ts b/server/models/Collection.ts\nindex bd61d24711c2..3c15ffcacd05 100644\n--- a/server/models/Collection.ts\n+++ b/server/models/Collection.ts\n@@ -1,4 +1,5 @@\n /* eslint-disable lines-between-class-members */\n+import fractionalIndex from \"fractional-index\";\n import find from \"lodash/find\";\n import findIndex from \"lodash/findIndex\";\n import remove from \"lodash/remove\";\n@@ -11,6 +12,8 @@ import {\n   InferAttributes,\n   InferCreationAttributes,\n   EmptyResultError,\n+  type CreateOptions,\n+  type UpdateOptions,\n } from \"sequelize\";\n import {\n   Sequelize,\n@@ -32,6 +35,8 @@ import {\n   BeforeDestroy,\n   IsDate,\n   AllowNull,\n+  BeforeCreate,\n+  BeforeUpdate,\n } from \"sequelize-typescript\";\n import isUUID from \"validator/lib/isUUID\";\n import type { CollectionSort, ProsemirrorData } from \"@shared/types\";\n@@ -41,7 +46,9 @@ import { sortNavigationNodes } from \"@shared/utils/collections\";\n import slugify from \"@shared/utils/slugify\";\n import { CollectionValidation } from \"@shared/validations\";\n import { ValidationError } from \"@server/errors\";\n+import removeIndexCollision from \"@server/utils/removeIndexCollision\";\n import { generateUrlId } from \"@server/utils/url\";\n+import { ValidateIndex } from \"@server/validation\";\n import Document from \"./Document\";\n import FileOperation from \"./FileOperation\";\n import Group from \"./Group\";\n@@ -217,8 +224,8 @@ class Collection extends ParanoidModel<\n   color: string | null;\n \n   @Length({\n-    max: 256,\n-    msg: `index must be 256 characters or less`,\n+    max: ValidateIndex.maxLength,\n+    msg: `index must be ${ValidateIndex.maxLength} characters or less`,\n   })\n   @Column\n   index: string | null;\n@@ -324,6 +331,30 @@ class Collection extends ParanoidModel<\n     }\n   }\n \n+  @BeforeCreate\n+  static async setIndex(model: Collection, options: CreateOptions<Collection>) {\n+    if (model.index) {\n+      model.index = await removeIndexCollision(model.teamId, model.index, {\n+        transaction: options.transaction,\n+      });\n+      return;\n+    }\n+\n+    const firstCollectionForTeam = await this.findOne({\n+      where: {\n+        teamId: model.teamId,\n+      },\n+      order: [\n+        // using LC_COLLATE:\"C\" because we need byte order to drive the sorting\n+        Sequelize.literal('\"collection\".\"index\" collate \"C\"'),\n+        [\"updatedAt\", \"DESC\"],\n+      ],\n+      ...options,\n+    });\n+\n+    model.index = fractionalIndex(null, firstCollectionForTeam?.index ?? null);\n+  }\n+\n   @AfterCreate\n   static async onAfterCreate(\n     model: Collection,\n@@ -343,6 +374,18 @@ class Collection extends ParanoidModel<\n     });\n   }\n \n+  @BeforeUpdate\n+  static async checkIndex(\n+    model: Collection,\n+    options: UpdateOptions<Collection>\n+  ) {\n+    if (model.index && model.changed(\"index\")) {\n+      model.index = await removeIndexCollision(model.teamId, model.index, {\n+        transaction: options.transaction,\n+      });\n+    }\n+  }\n+\n   // associations\n \n   @BelongsTo(() => FileOperation, \"importId\")\n\ndiff --git a/server/routes/api/collections/collections.ts b/server/routes/api/collections/collections.ts\nindex cab3aa048a0e..86af4a9fa68b 100644\n--- a/server/routes/api/collections/collections.ts\n+++ b/server/routes/api/collections/collections.ts\n@@ -1,4 +1,3 @@\n-import fractionalIndex from \"fractional-index\";\n import invariant from \"invariant\";\n import Router from \"koa-router\";\n import { Sequelize, Op, WhereOptions } from \"sequelize\";\n@@ -42,7 +41,6 @@ import {\n import { APIContext } from \"@server/types\";\n import { RateLimiterStrategy } from \"@server/utils/RateLimiter\";\n import { collectionIndexing } from \"@server/utils/indexing\";\n-import removeIndexCollision from \"@server/utils/removeIndexCollision\";\n import pagination from \"../middlewares/pagination\";\n import * as T from \"./schema\";\n \n@@ -55,23 +53,21 @@ router.post(\n   transaction(),\n   async (ctx: APIContext<T.CollectionsCreateReq>) => {\n     const { transaction } = ctx.state;\n-    const { name, color, description, data, permission, sharing, icon, sort } =\n-      ctx.input.body;\n-    let { index } = ctx.input.body;\n+    const {\n+      name,\n+      color,\n+      description,\n+      data,\n+      permission,\n+      sharing,\n+      icon,\n+      sort,\n+      index,\n+    } = ctx.input.body;\n \n     const { user } = ctx.state.auth;\n     authorize(user, \"createCollection\", user.team);\n \n-    if (index) {\n-      index = await removeIndexCollision(user.teamId, index, { transaction });\n-    } else {\n-      const first = await Collection.findFirstCollectionForUser(user, {\n-        attributes: [\"id\", \"index\"],\n-        transaction,\n-      });\n-      index = fractionalIndex(null, first ? first.index : null);\n-    }\n-\n     const collection = Collection.build({\n       name,\n       content: data,\n@@ -959,18 +955,16 @@ router.post(\n   transaction(),\n   async (ctx: APIContext<T.CollectionsMoveReq>) => {\n     const { transaction } = ctx.state;\n-    const { id } = ctx.input.body;\n-    let { index } = ctx.input.body;\n+    const { id, index } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.findByPk(id, {\n+    let collection = await Collection.findByPk(id, {\n       transaction,\n       lock: transaction.LOCK.UPDATE,\n     });\n     authorize(user, \"move\", collection);\n \n-    index = await removeIndexCollision(user.teamId, index, { transaction });\n-    await collection.update(\n+    collection = await collection.update(\n       {\n         index,\n       },\n@@ -982,14 +976,14 @@ router.post(\n       name: \"collections.move\",\n       collectionId: collection.id,\n       data: {\n-        index,\n+        index: collection.index,\n       },\n     });\n \n     ctx.body = {\n       success: true,\n       data: {\n-        index,\n+        index: collection.index,\n       },\n     };\n   }\n\ndiff --git a/server/utils/removeIndexCollision.ts b/server/utils/removeIndexCollision.ts\nindex a17010c75773..7f78cc502cb9 100644\n--- a/server/utils/removeIndexCollision.ts\n+++ b/server/utils/removeIndexCollision.ts\n@@ -1,5 +1,5 @@\n import fractionalIndex from \"fractional-index\";\n-import { Op, Sequelize, type FindOptions } from \"sequelize\";\n+import { Sequelize, type FindOptions } from \"sequelize\";\n import Collection from \"@server/models/Collection\";\n \n /**\n@@ -31,9 +31,7 @@ export default async function removeIndexCollision(\n     where: {\n       teamId,\n       deletedAt: null,\n-      index: {\n-        [Op.gt]: index,\n-      },\n+      index: Sequelize.literal(`\"collection\".\"index\" collate \"C\" > '${index}'`),\n     },\n     attributes: [\"id\", \"index\"],\n     limit: 1,\n\ndiff --git a/server/validation.ts b/server/validation.ts\nindex d1f9228d7a9b..ec46b884ba7d 100644\n--- a/server/validation.ts\n+++ b/server/validation.ts\n@@ -232,7 +232,7 @@ export class ValidateDocumentId {\n export class ValidateIndex {\n   public static regex = new RegExp(\"^[\\x20-\\x7E]+$\");\n   public static message = \"Must be between x20 to x7E ASCII\";\n-  public static maxLength = 100;\n+  public static maxLength = 256;\n }\n \n export class ValidateURL {\n",
    "test_patch": "diff --git a/server/routes/api/collections/collections.test.ts b/server/routes/api/collections/collections.test.ts\nindex 1fc40f1a3ded..492e7ff7277b 100644\n--- a/server/routes/api/collections/collections.test.ts\n+++ b/server/routes/api/collections/collections.test.ts\n@@ -1327,6 +1327,32 @@ describe(\"#collections.create\", () => {\n     expect(body.policies[0].abilities.read).toBeTruthy();\n   });\n \n+  it(\"should ensure unique index across the team\", async () => {\n+    const team = await buildTeam();\n+    const [adminA, adminB] = await Promise.all([\n+      buildAdmin({ teamId: team.id }),\n+      buildAdmin({ teamId: team.id }),\n+    ]);\n+\n+    const resA = await server.post(\"/api/collections.create\", {\n+      body: {\n+        token: adminA.getJwtToken(),\n+        name: \"Test A\",\n+      },\n+    });\n+    const resB = await server.post(\"/api/collections.create\", {\n+      body: {\n+        token: adminB.getJwtToken(),\n+        name: \"Test B\",\n+      },\n+    });\n+    const [bodyA, bodyB] = await Promise.all([resA.json(), resB.json()]);\n+\n+    expect(resA.status).toEqual(200);\n+    expect(resB.status).toEqual(200);\n+    expect(bodyA.data.index).not.toEqual(bodyB.data.index);\n+  });\n+\n   it(\"if index collision, should updated index of other collection\", async () => {\n     const user = await buildUser();\n     const createdCollectionAResponse = await server.post(\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8794",
    "pr_id": 8794,
    "issue_id": 8793,
    "repo": "outline/outline",
    "problem_statement": "TypeError: Cannot read properties of undefined (reading 'lang')\nSentry Issue: [OUTLINE-CLOUD-8FN](https://outline-jl.sentry.io/issues/6457076532/?referrer=github_integration)\n\n```\nTypeError: Cannot read properties of undefined (reading 'lang')\n  at language (../../../shared/editor/lib/code.ts:88:50)\n  at forEach (../../../shared/editor/extensions/Prism.ts:60:22)\n  at Array.forEach (<anonymous>)\n  at getDecorations (../../../shared/editor/extensions/Prism.ts:58:10)\n  at <object>.state.apply (../../../shared/editor/extensions/Prism.ts:167:18)\n...\n(22 additional frame(s) were not displayed)\n```",
    "issue_word_count": 71,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "shared/editor/lib/code.test.ts",
      "shared/editor/lib/code.ts"
    ],
    "pr_changed_test_files": [
      "shared/editor/lib/code.test.ts"
    ],
    "base_commit": "72bff1ec8a538066466eeae2134df1b02f9f082b",
    "head_commit": "9eea96fc89d7bb82cc4ac0597b5725623ca526b4",
    "repo_url": "https://github.com/outline/outline/pull/8794",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8794",
    "dockerfile": "",
    "pr_merged_at": "2025-03-25T12:31:53.000Z",
    "patch": "diff --git a/shared/editor/lib/code.ts b/shared/editor/lib/code.ts\nindex 62040198eec0..38cc3e3fd459 100644\n--- a/shared/editor/lib/code.ts\n+++ b/shared/editor/lib/code.ts\n@@ -72,9 +72,10 @@ export const codeLanguages = {\n  * @param language The language identifier.\n  * @returns The human-readable label for the language.\n  */\n-export const getLabelForLanguage = (language: keyof typeof codeLanguages) => {\n-  const lang = codeLanguages[language];\n-  return lang ? lang.label : language;\n+export const getLabelForLanguage = (language: string) => {\n+  const lang =\n+    codeLanguages[language as keyof typeof codeLanguages] ?? codeLanguages.none;\n+  return lang.label;\n };\n \n /**\n@@ -83,9 +84,8 @@ export const getLabelForLanguage = (language: keyof typeof codeLanguages) => {\n  * @param language The language identifier.\n  * @returns The Prism language identifier for the language.\n  */\n-export const getPrismLangForLanguage = (\n-  language: keyof typeof codeLanguages\n-): string | undefined => codeLanguages[language].lang;\n+export const getPrismLangForLanguage = (language: string): string | undefined =>\n+  codeLanguages[language as keyof typeof codeLanguages]?.lang;\n \n /**\n  * Set the most recent code language used.\n",
    "test_patch": "diff --git a/shared/editor/lib/code.test.ts b/shared/editor/lib/code.test.ts\nnew file mode 100644\nindex 000000000000..4e058b1768ca\n--- /dev/null\n+++ b/shared/editor/lib/code.test.ts\n@@ -0,0 +1,22 @@\n+import { getPrismLangForLanguage, getLabelForLanguage } from \"./code\";\n+\n+describe(\"getPrismLangForLanguage\", () => {\n+  it(\"should return the correct Prism language identifier for a given language\", () => {\n+    expect(getPrismLangForLanguage(\"javascript\")).toBe(\"javascript\");\n+    expect(getPrismLangForLanguage(\"mermaidjs\")).toBe(\"mermaid\");\n+    expect(getPrismLangForLanguage(\"xml\")).toBe(\"markup\");\n+    expect(getPrismLangForLanguage(\"unknown\")).toBeUndefined();\n+    expect(getPrismLangForLanguage(\"\")).toBeUndefined();\n+  });\n+});\n+\n+describe(\"getLabelForLanguage\", () => {\n+  it(\"should return the correct human-readable label for a given language\", () => {\n+    expect(getLabelForLanguage(\"javascript\")).toBe(\"JavaScript\");\n+    expect(getLabelForLanguage(\"mermaidjs\")).toBe(\"Mermaid Diagram\");\n+    expect(getLabelForLanguage(\"xml\")).toBe(\"XML\");\n+    expect(getLabelForLanguage(\"unknown\")).toBe(\"Plain text\");\n+    expect(getLabelForLanguage(\"none\")).toBe(\"Plain text\");\n+    expect(getLabelForLanguage(\"\")).toBe(\"Plain text\");\n+  });\n+});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8785",
    "pr_id": 8785,
    "issue_id": 8782,
    "repo": "outline/outline",
    "problem_statement": "RangeError: Empty text nodes are not allowed\nTriggered through the new Notion importer, the payload that caused it is not in the Sentry logs\n\nSentry Issue: [OUTLINE-CLOUD-8FK](https://outline-jl.sentry.io/issues/6455524313/?referrer=github_integration)\n\n```\nRangeError: Empty text nodes are not allowed\n  File \"/app/build/server/models/helpers/ProsemirrorHelper.js\", line 98, in ProsemirrorHelper.toProsemirror\n    return _prosemirrorModel.Node.fromJSON(_editor.schema, data);\n...\n(11 additional frame(s) were not displayed)\n```",
    "issue_word_count": 65,
    "test_files_count": 3,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "plugins/notion/server/utils/NotionConverter.test.ts",
      "plugins/notion/server/utils/NotionConverter.ts",
      "plugins/notion/server/utils/__snapshots__/NotionConverter.test.ts.snap",
      "server/test/fixtures/notion-page-with-empty-text-nodes.json"
    ],
    "pr_changed_test_files": [
      "plugins/notion/server/utils/NotionConverter.test.ts",
      "plugins/notion/server/utils/__snapshots__/NotionConverter.test.ts.snap",
      "server/test/fixtures/notion-page-with-empty-text-nodes.json"
    ],
    "base_commit": "ab55e0bed992519b160c4c5f3b7cb3e403a76d2e",
    "head_commit": "67bd0923d950d1379cccd57752b2e9f6ef697718",
    "repo_url": "https://github.com/outline/outline/pull/8785",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8785",
    "dockerfile": "",
    "pr_merged_at": "2025-03-25T11:31:06.000Z",
    "patch": "diff --git a/plugins/notion/server/utils/NotionConverter.ts b/plugins/notion/server/utils/NotionConverter.ts\nindex addd20d6e4d3..8e4539eb74af 100644\n--- a/plugins/notion/server/utils/NotionConverter.ts\n+++ b/plugins/notion/server/utils/NotionConverter.ts\n@@ -179,11 +179,15 @@ export class NotionConverter {\n   }\n \n   private static bookmark(item: BookmarkBlockObjectResponse) {\n+    const caption = item.bookmark.caption\n+      .map(this.rich_text_to_plaintext)\n+      .join(\"\");\n+\n     return {\n       type: \"paragraph\",\n       content: [\n         {\n-          text: item.bookmark.caption.map(this.rich_text_to_plaintext).join(\"\"),\n+          text: caption || item.bookmark.url,\n           type: \"text\",\n           marks: [\n             {\n@@ -221,17 +225,14 @@ export class NotionConverter {\n   }\n \n   private static code(item: CodeBlockObjectResponse) {\n+    const text = item.code.rich_text.map(this.rich_text_to_plaintext).join(\"\");\n+\n     return {\n       type: \"code_fence\",\n       attrs: {\n         language: item.code.language,\n       },\n-      content: [\n-        {\n-          type: \"text\",\n-          text: item.code.rich_text.map(this.rich_text_to_plaintext).join(\"\"),\n-        },\n-      ],\n+      content: text ? [{ type: \"text\", text }] : undefined,\n     };\n   }\n \n@@ -364,12 +365,14 @@ export class NotionConverter {\n   private static equation(item: EquationBlockObjectResponse) {\n     return {\n       type: \"math_block\",\n-      content: [\n-        {\n-          type: \"text\",\n-          text: item.equation.expression,\n-        },\n-      ],\n+      content: item.equation.expression\n+        ? [\n+            {\n+              type: \"text\",\n+              text: item.equation.expression,\n+            },\n+          ]\n+        : undefined,\n     };\n   }\n \n",
    "test_patch": "diff --git a/plugins/notion/server/utils/NotionConverter.test.ts b/plugins/notion/server/utils/NotionConverter.test.ts\nindex f87cbdb76361..425d599b693c 100644\n--- a/plugins/notion/server/utils/NotionConverter.test.ts\n+++ b/plugins/notion/server/utils/NotionConverter.test.ts\n@@ -1,12 +1,22 @@\n import { Node } from \"prosemirror-model\";\n import { ProsemirrorHelper } from \"@server/models/helpers/ProsemirrorHelper\";\n-import data from \"@server/test/fixtures/notion-page.json\";\n+import nodesWithEmptyTextNode from \"@server/test/fixtures/notion-page-with-empty-text-nodes.json\";\n+import allNodes from \"@server/test/fixtures/notion-page.json\";\n import { NotionConverter, NotionPage } from \"./NotionConverter\";\n \n describe(\"NotionConverter\", () => {\n   it(\"converts a page\", () => {\n     const response = NotionConverter.page({\n-      children: data,\n+      children: allNodes,\n+    } as NotionPage);\n+\n+    expect(response).toMatchSnapshot();\n+    expect(ProsemirrorHelper.toProsemirror(response)).toBeInstanceOf(Node);\n+  });\n+\n+  it(\"converts a page with empty text nodes\", () => {\n+    const response = NotionConverter.page({\n+      children: nodesWithEmptyTextNode,\n     } as NotionPage);\n \n     expect(response).toMatchSnapshot();\n\ndiff --git a/plugins/notion/server/utils/__snapshots__/NotionConverter.test.ts.snap b/plugins/notion/server/utils/__snapshots__/NotionConverter.test.ts.snap\nindex 12de73ced8ec..92e252de4d93 100644\n--- a/plugins/notion/server/utils/__snapshots__/NotionConverter.test.ts.snap\n+++ b/plugins/notion/server/utils/__snapshots__/NotionConverter.test.ts.snap\n@@ -1983,3 +1983,148 @@ exports[`NotionConverter converts a page 1`] = `\n   \"type\": \"doc\",\n }\n `;\n+\n+exports[`NotionConverter converts a page with empty text nodes 1`] = `\n+{\n+  \"content\": [\n+    {\n+      \"content\": [],\n+      \"type\": \"paragraph\",\n+    },\n+    {\n+      \"attrs\": {\n+        \"language\": \"javascript\",\n+      },\n+      \"content\": undefined,\n+      \"type\": \"code_fence\",\n+    },\n+    {\n+      \"content\": [],\n+      \"type\": \"paragraph\",\n+    },\n+    {\n+      \"content\": [\n+        {\n+          \"content\": [\n+            {\n+              \"text\": \"E\",\n+              \"type\": \"text\",\n+            },\n+          ],\n+          \"type\": \"math_inline\",\n+        },\n+      ],\n+      \"type\": \"paragraph\",\n+    },\n+    {\n+      \"content\": [],\n+      \"type\": \"paragraph\",\n+    },\n+    {\n+      \"content\": [\n+        {\n+          \"marks\": [\n+            {\n+              \"attrs\": {\n+                \"href\": \"http://github.com/outline/\",\n+              },\n+              \"type\": \"link\",\n+            },\n+          ],\n+          \"text\": \"http://github.com/outline/\",\n+          \"type\": \"text\",\n+        },\n+      ],\n+      \"type\": \"paragraph\",\n+    },\n+    {\n+      \"content\": [],\n+      \"type\": \"paragraph\",\n+    },\n+    {\n+      \"content\": [\n+        {\n+          \"marks\": [\n+            {\n+              \"attrs\": {\n+                \"href\": \"https://github.com/outline/outline\",\n+              },\n+              \"type\": \"link\",\n+            },\n+          ],\n+          \"text\": \"https://github.com/outline/outline\",\n+          \"type\": \"text\",\n+        },\n+      ],\n+      \"type\": \"paragraph\",\n+    },\n+    {\n+      \"content\": [],\n+      \"type\": \"paragraph\",\n+    },\n+    {\n+      \"content\": undefined,\n+      \"type\": \"math_block\",\n+    },\n+    {\n+      \"content\": [],\n+      \"type\": \"paragraph\",\n+    },\n+    {\n+      \"content\": [\n+        {\n+          \"marks\": [\n+            {\n+              \"attrs\": {\n+                \"href\": \"https://google.com\",\n+                \"title\": null,\n+              },\n+              \"type\": \"link\",\n+            },\n+          ],\n+          \"text\": \"https://google.com\",\n+          \"type\": \"text\",\n+        },\n+      ],\n+      \"type\": \"paragraph\",\n+    },\n+    {\n+      \"content\": [],\n+      \"type\": \"paragraph\",\n+    },\n+    {\n+      \"content\": [\n+        {\n+          \"marks\": [\n+            {\n+              \"attrs\": {\n+                \"href\": \"https://github.com/outline/outline\",\n+              },\n+              \"type\": \"link\",\n+            },\n+          ],\n+          \"text\": \"https://github.com/outline/outline\",\n+          \"type\": \"text\",\n+        },\n+      ],\n+      \"type\": \"paragraph\",\n+    },\n+    {\n+      \"content\": [],\n+      \"type\": \"paragraph\",\n+    },\n+    {\n+      \"attrs\": {\n+        \"href\": \"https://prod-files-secure.s3.us-west-2.amazonaws.com/2f3fcad6-fc32-434b-b6b2-a03ca7893c4d/49bfa851-95c1-458b-abb0-88ed591f7712/Empty_pdf.pdf\",\n+        \"title\": \"\",\n+      },\n+      \"type\": \"attachment\",\n+    },\n+    {\n+      \"content\": [],\n+      \"type\": \"paragraph\",\n+    },\n+  ],\n+  \"type\": \"doc\",\n+}\n+`;\n\ndiff --git a/server/test/fixtures/notion-page-with-empty-text-nodes.json b/server/test/fixtures/notion-page-with-empty-text-nodes.json\nnew file mode 100644\nindex 000000000000..9c98e5b036c9\n--- /dev/null\n+++ b/server/test/fixtures/notion-page-with-empty-text-nodes.json\n@@ -0,0 +1,509 @@\n+[\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-803b-a8dc-d10fdf86fd60\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T07:49:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T07:49:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"paragraph\",\n+    \"paragraph\": {\n+      \"rich_text\": [],\n+      \"color\": \"default\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-809a-a9e5-f33faf274c5f\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T07:56:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:09:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"code\",\n+    \"code\": {\n+      \"caption\": [],\n+      \"rich_text\": [],\n+      \"language\": \"javascript\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-80c2-986a-ef8ae792a0f9\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:04:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:04:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"paragraph\",\n+    \"paragraph\": {\n+      \"rich_text\": [],\n+      \"color\": \"default\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-80b3-9180-c6bc089c00fc\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T07:56:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:05:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"paragraph\",\n+    \"paragraph\": {\n+      \"rich_text\": [\n+        {\n+          \"type\": \"equation\",\n+          \"equation\": {\n+            \"expression\": \"E\"\n+          },\n+          \"annotations\": {\n+            \"bold\": false,\n+            \"italic\": false,\n+            \"strikethrough\": false,\n+            \"underline\": false,\n+            \"code\": false,\n+            \"color\": \"default\"\n+          },\n+          \"plain_text\": \"E\",\n+          \"href\": null\n+        }\n+      ],\n+      \"color\": \"default\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-80ca-974e-c226a1a1ae76\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:10:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:10:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"paragraph\",\n+    \"paragraph\": {\n+      \"rich_text\": [],\n+      \"color\": \"default\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-8028-944b-e2593f20e09a\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:09:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:10:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"paragraph\",\n+    \"paragraph\": {\n+      \"rich_text\": [\n+        {\n+          \"type\": \"mention\",\n+          \"mention\": {\n+            \"type\": \"link_mention\",\n+            \"link_mention\": {\n+              \"href\": \"http://github.com/outline/\",\n+              \"title\": \"Outline\",\n+              \"icon_url\": \"https://github.com/fluidicon.png\",\n+              \"description\": \"We're building an open source collaborative knowledge base for modern teams - Outline\",\n+              \"link_provider\": \"GitHub\",\n+              \"thumbnail_url\": \"https://avatars.githubusercontent.com/u/1765001?s=280&v=4\"\n+            }\n+          },\n+          \"annotations\": {\n+            \"bold\": false,\n+            \"italic\": false,\n+            \"strikethrough\": false,\n+            \"underline\": false,\n+            \"code\": false,\n+            \"color\": \"default\"\n+          },\n+          \"plain_text\": \"http://github.com/outline/\",\n+          \"href\": \"http://github.com/outline/\"\n+        }\n+      ],\n+      \"color\": \"default\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-80f8-a272-c519ce56de27\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:12:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:12:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"paragraph\",\n+    \"paragraph\": {\n+      \"rich_text\": [],\n+      \"color\": \"default\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-8096-8a94-e44b32127e73\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:12:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:12:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"paragraph\",\n+    \"paragraph\": {\n+      \"rich_text\": [\n+        {\n+          \"type\": \"mention\",\n+          \"mention\": {\n+            \"type\": \"link_preview\",\n+            \"link_preview\": {\n+              \"url\": \"https://github.com/outline/outline\"\n+            }\n+          },\n+          \"annotations\": {\n+            \"bold\": false,\n+            \"italic\": false,\n+            \"strikethrough\": false,\n+            \"underline\": false,\n+            \"code\": false,\n+            \"color\": \"default\"\n+          },\n+          \"plain_text\": \"https://github.com/outline/outline\",\n+          \"href\": \"https://github.com/outline/outline\"\n+        }\n+      ],\n+      \"color\": \"default\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-807b-98de-ff2c1d0080f2\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:13:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:13:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"paragraph\",\n+    \"paragraph\": {\n+      \"rich_text\": [],\n+      \"color\": \"default\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-80dd-b816-cb4dd04d4f46\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:13:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:13:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"equation\",\n+    \"equation\": {\n+      \"expression\": \"\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-8074-a5e0-f0ba30bd0510\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:18:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:18:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"paragraph\",\n+    \"paragraph\": {\n+      \"rich_text\": [],\n+      \"color\": \"default\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-80dc-8a14-db8b714450f6\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:18:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:30:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"bookmark\",\n+    \"bookmark\": {\n+      \"caption\": [],\n+      \"url\": \"https://google.com\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-80f2-94b4-df422d9cd18e\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:24:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:24:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"paragraph\",\n+    \"paragraph\": {\n+      \"rich_text\": [],\n+      \"color\": \"default\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-8046-946c-d89c2bc7827c\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:24:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:24:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"1b32c2bb-bca8-816a-99c0-0027ab5c4cb0\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"link_preview\",\n+    \"link_preview\": {\n+      \"url\": \"https://github.com/outline/outline\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-80e6-80d3-f9501fc1a6fb\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:24:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:24:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"paragraph\",\n+    \"paragraph\": {\n+      \"rich_text\": [],\n+      \"color\": \"default\"\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-8070-9c41-ca4c3aa1a419\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:24:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:30:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"pdf\",\n+    \"pdf\": {\n+      \"caption\": [],\n+      \"type\": \"file\",\n+      \"file\": {\n+        \"url\": \"https://prod-files-secure.s3.us-west-2.amazonaws.com/2f3fcad6-fc32-434b-b6b2-a03ca7893c4d/49bfa851-95c1-458b-abb0-88ed591f7712/Empty_pdf.pdf\",\n+        \"expiry_time\": \"2025-03-25T09:32:41.690Z\"\n+      }\n+    }\n+  },\n+  {\n+    \"object\": \"block\",\n+    \"id\": \"1c12c2bb-bca8-800c-8857-eca03207279f\",\n+    \"parent\": {\n+      \"type\": \"page_id\",\n+      \"page_id\": \"1c12c2bb-bca8-8023-ba9a-f8fafab74e48\"\n+    },\n+    \"created_time\": \"2025-03-25T08:26:00.000Z\",\n+    \"last_edited_time\": \"2025-03-25T08:26:00.000Z\",\n+    \"created_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"last_edited_by\": {\n+      \"object\": \"user\",\n+      \"id\": \"b69e71d0-c6c2-428c-ae38-5c020343b36b\"\n+    },\n+    \"has_children\": false,\n+    \"archived\": false,\n+    \"in_trash\": false,\n+    \"type\": \"paragraph\",\n+    \"paragraph\": {\n+      \"rich_text\": [],\n+      \"color\": \"default\"\n+    }\n+  }\n+]\n\\ No newline at end of file\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8754",
    "pr_id": 8754,
    "issue_id": 7920,
    "repo": "outline/outline",
    "problem_statement": "Move event writing to model layer\n`events` should be written automatically based on mutations in the model layer. To achieve this the request context will be passed down to model mutations. Translation must happen on a model by model basis.\n\nCommands should be removed where they only exist to group a mutation and it's associated event write.\n\n### TODO\n- [x] ApiKey\n- [x] Attachment\n- [x] Comment\n- [x] FileOperation\n- [x] Group\n- [x] GroupMembership\n- [x] GroupUser\n- [x] Pin\n- [x] Reaction\n- [x] Share\n- [x] Star\n- [x] UserMembership\n- [x] Subscription\n- [x] WebhookSubscription\n- [x] Notification\n- [ ] Team\n- [ ] Revision\n- [ ] Document\n- [ ] Collection\n- [ ] TeamDomain\n- [ ] User",
    "issue_word_count": 89,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "server/commands/notificationUpdater.test.ts",
      "server/commands/notificationUpdater.ts",
      "server/models/base/Model.ts",
      "server/routes/api/notifications/notifications.ts"
    ],
    "pr_changed_test_files": [
      "server/commands/notificationUpdater.test.ts"
    ],
    "base_commit": "533a14369c53287417ef29266d389468f9700e46",
    "head_commit": "a760b951d5fef0b63b27aa4196c2437198efe0d1",
    "repo_url": "https://github.com/outline/outline/pull/8754",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8754",
    "dockerfile": "",
    "pr_merged_at": "2025-03-23T18:59:19.000Z",
    "patch": "diff --git a/server/commands/notificationUpdater.ts b/server/commands/notificationUpdater.ts\ndeleted file mode 100644\nindex 6f85f8de3b58..000000000000\n--- a/server/commands/notificationUpdater.ts\n+++ /dev/null\n@@ -1,53 +0,0 @@\n-import isUndefined from \"lodash/isUndefined\";\n-import { Event, Notification } from \"@server/models\";\n-import { APIContext } from \"@server/types\";\n-\n-type Props = {\n-  /** Notification to be updated */\n-  notification: Notification;\n-  /** Time at which notification was viewed */\n-  viewedAt?: Date | null;\n-  /** Time at which notification was archived */\n-  archivedAt?: Date | null;\n-};\n-\n-/**\n- * This command updates notification properties.\n- *\n- * @param ctx The originating request context\n- * @param Props The properties of the notification to update\n- * @returns Notification The updated notification\n- */\n-export default async function notificationUpdater(\n-  ctx: APIContext,\n-  { notification, viewedAt, archivedAt }: Props\n-): Promise<Notification> {\n-  const { transaction } = ctx.state;\n-\n-  if (!isUndefined(viewedAt)) {\n-    notification.viewedAt = viewedAt;\n-  }\n-  if (!isUndefined(archivedAt)) {\n-    notification.archivedAt = archivedAt;\n-  }\n-  const changed = notification.changed();\n-  if (changed) {\n-    await notification.save({ transaction });\n-\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"notifications.update\",\n-        userId: notification.userId,\n-        modelId: notification.id,\n-        documentId: notification.documentId,\n-      },\n-      {\n-        actorId: notification.userId,\n-        teamId: notification.teamId,\n-      }\n-    );\n-  }\n-\n-  return notification;\n-}\n\ndiff --git a/server/models/base/Model.ts b/server/models/base/Model.ts\nindex e27c416f8585..ac0cb7078ba5 100644\n--- a/server/models/base/Model.ts\n+++ b/server/models/base/Model.ts\n@@ -280,6 +280,7 @@ class Model<\n    *\n    * @param query The query options.\n    * @param callback The function to call for each batch of results\n+   * @return The total number of results processed.\n    */\n   static async findAllInBatches<T extends Model>(\n     query: Replace<FindOptions<T>, \"limit\", \"batchLimit\"> & {\n@@ -287,7 +288,8 @@ class Model<\n       totalLimit?: number;\n     },\n     callback: (results: Array<T>, query: FindOptions<T>) => Promise<void>\n-  ) {\n+  ): Promise<number> {\n+    let total = 0;\n     const mappedQuery = {\n       ...query,\n       offset: query.offset ?? 0,\n@@ -299,12 +301,15 @@ class Model<\n     do {\n       // @ts-expect-error this T\n       results = await this.findAll<T>(mappedQuery);\n+      total += results.length;\n       await callback(results, mappedQuery);\n       mappedQuery.offset += mappedQuery.limit;\n     } while (\n       results.length >= mappedQuery.limit &&\n       (mappedQuery.totalLimit ?? Infinity) > mappedQuery.offset\n     );\n+\n+    return total;\n   }\n \n   /**\n\ndiff --git a/server/routes/api/notifications/notifications.ts b/server/routes/api/notifications/notifications.ts\nindex 9a1d5c5785be..9a3766d09004 100644\n--- a/server/routes/api/notifications/notifications.ts\n+++ b/server/routes/api/notifications/notifications.ts\n@@ -1,10 +1,10 @@\n import Router from \"koa-router\";\n-import { isNil } from \"lodash\";\n+import isEmpty from \"lodash/isEmpty\";\n+import isNil from \"lodash/isNil\";\n import isNull from \"lodash/isNull\";\n import isUndefined from \"lodash/isUndefined\";\n import { WhereOptions, Op } from \"sequelize\";\n import { NotificationEventType } from \"@shared/types\";\n-import notificationUpdater from \"@server/commands/notificationUpdater\";\n import env from \"@server/env\";\n import { AuthenticationError } from \"@server/errors\";\n import auth from \"@server/middlewares/authentication\";\n@@ -29,6 +29,7 @@ const pixel = Buffer.from(\n const handleUnsubscribe = async (\n   ctx: APIContext<T.NotificationsUnsubscribeReq>\n ) => {\n+  const { transaction } = ctx.state;\n   const eventType = (ctx.input.body.eventType ??\n     ctx.input.query.eventType) as NotificationEventType;\n   const userId = (ctx.input.body.userId ?? ctx.input.query.userId) as string;\n@@ -46,6 +47,8 @@ const handleUnsubscribe = async (\n \n   const user = await User.scope(\"withTeam\").findByPk(userId, {\n     rejectOnEmpty: true,\n+    lock: transaction.LOCK.UPDATE,\n+    transaction,\n   });\n \n   user.setNotificationEventType(eventType, false);\n@@ -145,17 +148,21 @@ router.get(\n   transaction(),\n   async (ctx: APIContext<T.NotificationsPixelReq>) => {\n     const { id, token } = ctx.input.query;\n-    const notification = await Notification.unscoped().findByPk(id);\n+    const { transaction } = ctx.state;\n+\n+    const notification = await Notification.unscoped().findByPk(id, {\n+      lock: transaction.LOCK.UPDATE,\n+      rejectOnEmpty: true,\n+      transaction,\n+    });\n \n     if (!notification || !safeEqual(token, notification.pixelToken)) {\n       throw AuthenticationError();\n     }\n \n     if (!notification.viewedAt) {\n-      await notificationUpdater(ctx, {\n-        notification,\n-        viewedAt: new Date(),\n-      });\n+      notification.viewedAt = new Date();\n+      await notification.saveWithCtx(ctx);\n     }\n \n     ctx.response.set(\"Content-Type\", \"image/gif\");\n@@ -171,15 +178,25 @@ router.post(\n   async (ctx: APIContext<T.NotificationsUpdateReq>) => {\n     const { id, viewedAt, archivedAt } = ctx.input.body;\n     const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n \n-    const notification = await Notification.findByPk(id);\n+    const notification = await Notification.findByPk(id, {\n+      lock: {\n+        level: transaction.LOCK.UPDATE,\n+        of: Notification,\n+      },\n+      rejectOnEmpty: true,\n+      transaction,\n+    });\n     authorize(user, \"update\", notification);\n \n-    await notificationUpdater(ctx, {\n-      notification,\n-      viewedAt,\n-      archivedAt,\n-    });\n+    if (!isUndefined(viewedAt)) {\n+      notification.viewedAt = viewedAt;\n+    }\n+    if (!isUndefined(archivedAt)) {\n+      notification.archivedAt = archivedAt;\n+    }\n+    await notification.saveWithCtx(ctx);\n \n     ctx.body = {\n       data: await presentNotification(ctx, notification),\n@@ -196,7 +213,7 @@ router.post(\n     const { viewedAt, archivedAt } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const values: { [x: string]: any } = {};\n+    const values: Partial<Notification> = {};\n     let where: WhereOptions<Notification> = {\n       teamId: user.teamId,\n       userId: user.id,\n@@ -216,7 +233,19 @@ router.post(\n       };\n     }\n \n-    const [total] = await Notification.update(values, { where });\n+    let total = 0;\n+    if (!isEmpty(values)) {\n+      total = await Notification.findAllInBatches(\n+        { where },\n+        async (results) => {\n+          await Promise.all(\n+            results.map((notification) =>\n+              notification.updateWithCtx(ctx, values)\n+            )\n+          );\n+        }\n+      );\n+    }\n \n     ctx.body = {\n       success: true,\n",
    "test_patch": "diff --git a/server/commands/notificationUpdater.test.ts b/server/commands/notificationUpdater.test.ts\ndeleted file mode 100644\nindex bb889758c04b..000000000000\n--- a/server/commands/notificationUpdater.test.ts\n+++ /dev/null\n@@ -1,182 +0,0 @@\n-import { NotificationEventType } from \"@shared/types\";\n-import { Event } from \"@server/models\";\n-import {\n-  buildUser,\n-  buildNotification,\n-  buildDocument,\n-  buildCollection,\n-} from \"@server/test/factories\";\n-import { withAPIContext } from \"@server/test/support\";\n-import notificationUpdater from \"./notificationUpdater\";\n-\n-describe(\"notificationUpdater\", () => {\n-  it(\"should mark the notification as viewed\", async () => {\n-    const user = await buildUser();\n-    const actor = await buildUser({\n-      teamId: user.teamId,\n-    });\n-    const collection = await buildCollection({\n-      teamId: user.teamId,\n-      createdById: actor.id,\n-    });\n-    const document = await buildDocument({\n-      teamId: user.teamId,\n-      collectionId: collection.id,\n-      createdById: actor.id,\n-    });\n-    const notification = await buildNotification({\n-      actorId: actor.id,\n-      event: NotificationEventType.UpdateDocument,\n-      userId: user.id,\n-      teamId: user.teamId,\n-      documentId: document.id,\n-      collectionId: collection.id,\n-    });\n-\n-    expect(notification.archivedAt).toBe(null);\n-    expect(notification.viewedAt).toBe(null);\n-\n-    await withAPIContext(user, (ctx) =>\n-      notificationUpdater(ctx, {\n-        notification,\n-        viewedAt: new Date(),\n-      })\n-    );\n-    const event = await Event.findLatest({\n-      teamId: user.teamId,\n-    });\n-\n-    expect(notification.viewedAt).not.toBe(null);\n-    expect(notification.archivedAt).toBe(null);\n-    expect(event!.name).toEqual(\"notifications.update\");\n-    expect(event!.modelId).toEqual(notification.id);\n-  });\n-\n-  it(\"should mark the notification as unseen\", async () => {\n-    const user = await buildUser();\n-    const actor = await buildUser({\n-      teamId: user.teamId,\n-    });\n-    const collection = await buildCollection({\n-      teamId: user.teamId,\n-      createdById: actor.id,\n-    });\n-    const document = await buildDocument({\n-      teamId: user.teamId,\n-      collectionId: collection.id,\n-      createdById: actor.id,\n-    });\n-    const notification = await buildNotification({\n-      actorId: actor.id,\n-      event: NotificationEventType.UpdateDocument,\n-      userId: user.id,\n-      teamId: user.teamId,\n-      documentId: document.id,\n-      collectionId: collection.id,\n-      viewedAt: new Date(),\n-    });\n-\n-    expect(notification.archivedAt).toBe(null);\n-    expect(notification.viewedAt).not.toBe(null);\n-\n-    await withAPIContext(user, (ctx) =>\n-      notificationUpdater(ctx, {\n-        notification,\n-        viewedAt: null,\n-      })\n-    );\n-    const event = await Event.findLatest({\n-      teamId: user.teamId,\n-    });\n-\n-    expect(notification.viewedAt).toBe(null);\n-    expect(notification.archivedAt).toBe(null);\n-    expect(event!.name).toEqual(\"notifications.update\");\n-    expect(event!.modelId).toEqual(notification.id);\n-  });\n-\n-  it(\"should archive the notification\", async () => {\n-    const user = await buildUser();\n-    const actor = await buildUser({\n-      teamId: user.teamId,\n-    });\n-    const collection = await buildCollection({\n-      teamId: user.teamId,\n-      createdById: actor.id,\n-    });\n-    const document = await buildDocument({\n-      teamId: user.teamId,\n-      collectionId: collection.id,\n-      createdById: actor.id,\n-    });\n-    const notification = await buildNotification({\n-      actorId: actor.id,\n-      event: NotificationEventType.UpdateDocument,\n-      userId: user.id,\n-      teamId: user.teamId,\n-      documentId: document.id,\n-      collectionId: collection.id,\n-    });\n-\n-    expect(notification.archivedAt).toBe(null);\n-    expect(notification.viewedAt).toBe(null);\n-\n-    await withAPIContext(user, (ctx) =>\n-      notificationUpdater(ctx, {\n-        notification,\n-        archivedAt: new Date(),\n-      })\n-    );\n-    const event = await Event.findLatest({\n-      teamId: user.teamId,\n-    });\n-\n-    expect(notification.viewedAt).toBe(null);\n-    expect(notification.archivedAt).not.toBe(null);\n-    expect(event!.name).toEqual(\"notifications.update\");\n-    expect(event!.modelId).toEqual(notification.id);\n-  });\n-\n-  it(\"should unarchive the notification\", async () => {\n-    const user = await buildUser();\n-    const actor = await buildUser({\n-      teamId: user.teamId,\n-    });\n-    const collection = await buildCollection({\n-      teamId: user.teamId,\n-      createdById: actor.id,\n-    });\n-    const document = await buildDocument({\n-      teamId: user.teamId,\n-      collectionId: collection.id,\n-      createdById: actor.id,\n-    });\n-    const notification = await buildNotification({\n-      actorId: actor.id,\n-      event: NotificationEventType.UpdateDocument,\n-      userId: user.id,\n-      teamId: user.teamId,\n-      documentId: document.id,\n-      collectionId: collection.id,\n-      archivedAt: new Date(),\n-    });\n-\n-    expect(notification.archivedAt).not.toBe(null);\n-    expect(notification.viewedAt).toBe(null);\n-\n-    await withAPIContext(user, (ctx) =>\n-      notificationUpdater(ctx, {\n-        notification,\n-        archivedAt: null,\n-      })\n-    );\n-    const event = await Event.findLatest({\n-      teamId: user.teamId,\n-    });\n-\n-    expect(notification.viewedAt).toBe(null);\n-    expect(notification.archivedAt).toBeNull();\n-    expect(event!.name).toEqual(\"notifications.update\");\n-    expect(event!.modelId).toEqual(notification.id);\n-  });\n-});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8752",
    "pr_id": 8752,
    "issue_id": 8678,
    "repo": "outline/outline",
    "problem_statement": "Flaky `files.test.ts`\nSince moving to GitHub actions `files.test.ts` keeps timing out about 25% of the time, super annoying.",
    "issue_word_count": 18,
    "test_files_count": 2,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "plugins/storage/server/api/files.test.ts",
      "server/test/TestServer.ts"
    ],
    "pr_changed_test_files": [
      "plugins/storage/server/api/files.test.ts",
      "server/test/TestServer.ts"
    ],
    "base_commit": "0ec64405067d7a8f02f75f2a300f04de0c890705",
    "head_commit": "26cc4d881ae9c6b87c72b5a6ba2394d80a702b11",
    "repo_url": "https://github.com/outline/outline/pull/8752",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8752",
    "dockerfile": "",
    "pr_merged_at": "2025-03-23T03:46:36.000Z",
    "patch": "",
    "test_patch": "diff --git a/plugins/storage/server/api/files.test.ts b/plugins/storage/server/api/files.test.ts\nindex 10e454d2c1e8..f6ed0ab03415 100644\n--- a/plugins/storage/server/api/files.test.ts\n+++ b/plugins/storage/server/api/files.test.ts\n@@ -17,6 +17,9 @@ import { getTestServer } from \"@server/test/support\";\n \n const server = getTestServer();\n \n+// Increase timeout for all tests in this file\n+jest.setTimeout(10000);\n+\n describe(\"#files.create\", () => {\n   it(\"should fail with status 400 bad request if key is invalid\", async () => {\n     const user = await buildUser();\n\ndiff --git a/server/test/TestServer.ts b/server/test/TestServer.ts\nindex 1a2df84b21ad..0f8f5326a13a 100644\n--- a/server/test/TestServer.ts\n+++ b/server/test/TestServer.ts\n@@ -47,9 +47,7 @@ class TestServer {\n \n   close() {\n     this.listener = null;\n-    return new Promise<void>((resolve, reject) => {\n-      this.server.close((err) => (err ? reject(err) : resolve()));\n-    });\n+    this.server.closeAllConnections();\n   }\n \n   delete(path: string, options?: any) {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8746",
    "pr_id": 8746,
    "issue_id": 8740,
    "repo": "outline/outline",
    "problem_statement": "Admin unable to remove group access from draft\n> As far as I can tell, the only person who can remove it is the document creator. Since the unpublished doc isn't in a collection, it's not possible for a collection admin to change that permission either\n",
    "issue_word_count": 39,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "server/policies/document.test.ts",
      "server/policies/document.ts"
    ],
    "pr_changed_test_files": [
      "server/policies/document.test.ts"
    ],
    "base_commit": "556503448641383e64f5b7064ee97cc762b0efc0",
    "head_commit": "8b42eab958e43bc6d9f31c818a249edf7e869e8e",
    "repo_url": "https://github.com/outline/outline/pull/8746",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8746",
    "dockerfile": "",
    "pr_merged_at": "2025-03-22T15:22:09.000Z",
    "patch": "diff --git a/server/policies/document.ts b/server/policies/document.ts\nindex 96972e72d703..f76e62d5ab51 100644\n--- a/server/policies/document.ts\n+++ b/server/policies/document.ts\n@@ -125,6 +125,7 @@ allow(User, \"manageUsers\", Document, (actor, document) =>\n     can(actor, \"update\", document),\n     or(\n       includesMembership(document, [DocumentPermission.Admin]),\n+      and(isTeamAdmin(actor, document), can(actor, \"read\", document)),\n       can(actor, \"updateDocument\", document?.collection),\n       !!document?.isDraft && actor.id === document?.createdById\n     )\n@@ -136,6 +137,7 @@ allow(User, \"duplicate\", Document, (actor, document) =>\n     can(actor, \"update\", document),\n     or(\n       includesMembership(document, [DocumentPermission.Admin]),\n+      and(isTeamAdmin(actor, document), can(actor, \"read\", document)),\n       can(actor, \"updateDocument\", document?.collection),\n       !!document?.isDraft && actor.id === document?.createdById,\n       and(\n@@ -233,6 +235,7 @@ allow(User, \"archive\", Document, (actor, document) =>\n     can(actor, \"update\", document),\n     or(\n       includesMembership(document, [DocumentPermission.Admin]),\n+      and(isTeamAdmin(actor, document), can(actor, \"read\", document)),\n       can(actor, \"updateDocument\", document?.collection)\n     )\n   )\n",
    "test_patch": "diff --git a/server/policies/document.test.ts b/server/policies/document.test.ts\nindex 3ac5c9a1ce49..d79f531fe4bd 100644\n--- a/server/policies/document.test.ts\n+++ b/server/policies/document.test.ts\n@@ -10,6 +10,7 @@ import {\n   buildDocument,\n   buildDraftDocument,\n   buildCollection,\n+  buildAdmin,\n } from \"@server/test/factories\";\n import { serialize } from \"./index\";\n \n@@ -355,7 +356,10 @@ describe(\"read document\", () => {\n });\n \n describe(\"read_write document\", () => {\n-  for (const role of Object.values(UserRole)) {\n+  const nonAdminRoles = Object.values(UserRole).filter(\n+    (role) => role !== UserRole.Admin\n+  );\n+  for (const role of nonAdminRoles) {\n     it(`should allow write permissions for ${role}`, async () => {\n       const team = await buildTeam();\n       const user = await buildUser({ teamId: team.id, role });\n@@ -391,6 +395,41 @@ describe(\"read_write document\", () => {\n       expect(abilities.move).toEqual(false);\n     });\n   }\n+\n+  it(`should allow write permissions for admin`, async () => {\n+    const team = await buildTeam();\n+    const user = await buildAdmin({ teamId: team.id });\n+    const collection = await buildCollection({\n+      teamId: team.id,\n+      permission: null,\n+    });\n+    const doc = await buildDocument({\n+      teamId: team.id,\n+      collectionId: collection.id,\n+    });\n+    await UserMembership.create({\n+      userId: user.id,\n+      documentId: doc.id,\n+      permission: DocumentPermission.ReadWrite,\n+      createdById: user.id,\n+    });\n+\n+    // reload to get membership\n+    const document = await Document.findByPk(doc.id, { userId: user.id });\n+    const abilities = serialize(user, document);\n+    expect(abilities.read).toBeTruthy();\n+    expect(abilities.download).toBeTruthy();\n+    expect(abilities.update).toBeTruthy();\n+    expect(abilities.delete).toBeTruthy();\n+    expect(abilities.subscribe).toBeTruthy();\n+    expect(abilities.unsubscribe).toBeTruthy();\n+    expect(abilities.comment).toBeTruthy();\n+    expect(abilities.createChildDocument).toBeTruthy();\n+    expect(abilities.manageUsers).toBeTruthy();\n+    expect(abilities.archive).toBeTruthy();\n+    expect(abilities.share).toEqual(false);\n+    expect(abilities.move).toEqual(false);\n+  });\n });\n \n describe(\"manage document\", () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8730",
    "pr_id": 8730,
    "issue_id": 8729,
    "repo": "outline/outline",
    "problem_statement": "TypeError: Cannot read properties of undefined (reading 'some')\nSentry Issue: [OUTLINE-CLOUD-8EK](https://outline-jl.sentry.io/issues/6432263219/?referrer=github_integration)\n\n```\nTypeError: Cannot read properties of undefined (reading 'some')\n  at ProsemirrorHelper.getPlainParagraphs (../../../shared/utils/ProsemirrorHelper.ts:362:23)\n  at paragraphs (../../../app/components/Editor.tsx:190:32)\n  at Editor (../../../app/components/Editor.tsx:188:22)\n  at fetchData (../../../app/scenes/Document/Shared.tsx:151:9)\n...\n(22 additional frame(s) were not displayed)\n```",
    "issue_word_count": 63,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "app/components/Editor.tsx",
      "app/models/Document.ts",
      "shared/types.ts",
      "shared/utils/ProsemirrorHelper.test.ts",
      "shared/utils/ProsemirrorHelper.ts"
    ],
    "pr_changed_test_files": [
      "shared/utils/ProsemirrorHelper.test.ts"
    ],
    "base_commit": "0fe50c179c4617b1928eba93ff821e3e309f2b3f",
    "head_commit": "766d90811800cd46ae63f2b59f49b7027228b27f",
    "repo_url": "https://github.com/outline/outline/pull/8730",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8730",
    "dockerfile": "",
    "pr_merged_at": "2025-03-20T13:46:53.000Z",
    "patch": "diff --git a/app/components/Editor.tsx b/app/components/Editor.tsx\nindex 19f6a7c4f0c8..e41ef39a516e 100644\n--- a/app/components/Editor.tsx\n+++ b/app/components/Editor.tsx\n@@ -205,7 +205,7 @@ function Editor(props: Props, ref: React.RefObject<SharedEditor> | null) {\n             <div className=\"ProseMirror\">\n               {paragraphs.map((paragraph, index) => (\n                 <p key={index} dir=\"auto\">\n-                  {paragraph.content.map((content) => content.text)}\n+                  {paragraph.content?.map((content) => content.text)}\n                 </p>\n               ))}\n             </div>\n\ndiff --git a/app/models/Document.ts b/app/models/Document.ts\nindex 57a530a93af7..78be2fe01ae9 100644\n--- a/app/models/Document.ts\n+++ b/app/models/Document.ts\n@@ -600,7 +600,7 @@ export default class Document extends ArchivableModel implements Searchable {\n    */\n   getSummary = (blocks = 4) => ({\n     ...this.data,\n-    content: this.data.content.slice(0, blocks),\n+    content: this.data.content?.slice(0, blocks),\n   });\n \n   @computed\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex dc451167506d..3a6891db03ad 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -430,7 +430,7 @@ export type JSONObject = { [x: string]: JSONValue };\n \n export type ProsemirrorData = {\n   type: string;\n-  content: ProsemirrorData[];\n+  content?: ProsemirrorData[];\n   text?: string;\n   attrs?: JSONObject;\n   marks?: {\n\ndiff --git a/shared/utils/ProsemirrorHelper.ts b/shared/utils/ProsemirrorHelper.ts\nindex 9b7764413506..c20eacfeae3e 100644\n--- a/shared/utils/ProsemirrorHelper.ts\n+++ b/shared/utils/ProsemirrorHelper.ts\n@@ -70,7 +70,7 @@ export class ProsemirrorHelper {\n       return false;\n     }\n \n-    if (data.content.length === 1) {\n+    if (data.content?.length === 1) {\n       const node = data.content[0];\n       return (\n         node.type === \"paragraph\" &&\n@@ -80,7 +80,7 @@ export class ProsemirrorHelper {\n       );\n     }\n \n-    return data.content.length === 0;\n+    return !data.content || data.content.length === 0;\n   }\n \n   /**\n@@ -355,14 +355,19 @@ export class ProsemirrorHelper {\n    * @returns An array of paragraph nodes or undefined\n    */\n   static getPlainParagraphs(data: ProsemirrorData) {\n-    const paragraphs = [];\n+    const paragraphs: ProsemirrorData[] = [];\n+    if (!data.content) {\n+      return paragraphs;\n+    }\n+\n     for (const node of data.content) {\n       if (\n         node.type === \"paragraph\" &&\n-        !node.content.some(\n-          (item) =>\n-            item.type !== \"text\" || (item.marks && item.marks.length > 0)\n-        )\n+        (!node.content ||\n+          !node.content.some(\n+            (item) =>\n+              item.type !== \"text\" || (item.marks && item.marks.length > 0)\n+          ))\n       ) {\n         paragraphs.push(node);\n       } else {\n",
    "test_patch": "diff --git a/shared/utils/ProsemirrorHelper.test.ts b/shared/utils/ProsemirrorHelper.test.ts\nindex 3974785c01f1..d557ad2b693d 100644\n--- a/shared/utils/ProsemirrorHelper.test.ts\n+++ b/shared/utils/ProsemirrorHelper.test.ts\n@@ -214,5 +214,23 @@ describe(\"ProsemirrorHelper\", () => {\n       const paragraphs = ProsemirrorHelper.getPlainParagraphs(data);\n       expect(paragraphs).toBeUndefined();\n     });\n+\n+    it(\"should handle paragraph without content\", async () => {\n+      const data = {\n+        type: \"doc\",\n+        content: [\n+          {\n+            type: \"paragraph\",\n+          },\n+        ],\n+      } as ProsemirrorData;\n+\n+      const paragraphs = ProsemirrorHelper.getPlainParagraphs(data);\n+      expect(paragraphs).toEqual([\n+        {\n+          type: \"paragraph\",\n+        },\n+      ]);\n+    });\n   });\n });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8726",
    "pr_id": 8726,
    "issue_id": 8714,
    "repo": "outline/outline",
    "problem_statement": "\"Unknown\" users visible in users table\nSeems to be an artifact of a user being deleted",
    "issue_word_count": 10,
    "test_files_count": 1,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "app/components/Collaborators.tsx",
      "app/components/Sharing/components/Suggestions.tsx",
      "app/models/base/ParanoidModel.ts",
      "app/scenes/Settings/Members.tsx",
      "app/stores/UsersStore.ts",
      "app/stores/base/Store.ts",
      "server/presenters/__snapshots__/user.test.ts.snap",
      "server/presenters/user.ts"
    ],
    "pr_changed_test_files": [
      "server/presenters/__snapshots__/user.test.ts.snap"
    ],
    "base_commit": "ae249f720df17bedc9167932f3252dea71bd76be",
    "head_commit": "5e6dd2c5a0f5180fb0f4b9fb582174f210df1b58",
    "repo_url": "https://github.com/outline/outline/pull/8726",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8726",
    "dockerfile": "",
    "pr_merged_at": "2025-03-20T04:00:04.000Z",
    "patch": "diff --git a/app/components/Collaborators.tsx b/app/components/Collaborators.tsx\nindex c420d3734933..a02d480477a7 100644\n--- a/app/components/Collaborators.tsx\n+++ b/app/components/Collaborators.tsx\n@@ -49,7 +49,7 @@ function Collaborators(props: Props) {\n     () =>\n       orderBy(\n         filter(\n-          users.orderedData,\n+          users.all,\n           (u) =>\n             (presentIds.includes(u.id) ||\n               document.collaboratorIds.includes(u.id)) &&\n@@ -58,7 +58,7 @@ function Collaborators(props: Props) {\n         [(u) => presentIds.includes(u.id), \"id\"],\n         [\"asc\", \"asc\"]\n       ),\n-    [document.collaboratorIds, users.orderedData, presentIds]\n+    [document.collaboratorIds, users.all, presentIds]\n   );\n \n   // load any users we don't yet have in memory\n\ndiff --git a/app/components/Sharing/components/Suggestions.tsx b/app/components/Sharing/components/Suggestions.tsx\nindex ac2cf6d0b6ad..88ac6c6053b1 100644\n--- a/app/components/Sharing/components/Suggestions.tsx\n+++ b/app/components/Sharing/components/Suggestions.tsx\n@@ -96,7 +96,7 @@ export const Suggestions = observer(\n           ? users.notInDocument(document.id, query)\n           : collection\n           ? users.notInCollection(collection.id, query)\n-          : users.orderedData\n+          : users.activeOrInvited\n       ).filter((u) => !u.isSuspended && u.id !== user.id);\n \n       if (isEmail(query)) {\n@@ -114,7 +114,7 @@ export const Suggestions = observer(\n     }, [\n       getSuggestionForEmail,\n       users,\n-      users.orderedData,\n+      users.activeOrInvited,\n       groups,\n       groups.orderedData,\n       document?.id,\n\ndiff --git a/app/models/base/ParanoidModel.ts b/app/models/base/ParanoidModel.ts\nindex ffca1a250c63..6930e28aa308 100644\n--- a/app/models/base/ParanoidModel.ts\n+++ b/app/models/base/ParanoidModel.ts\n@@ -1,7 +1,12 @@\n-import { observable } from \"mobx\";\n+import { computed, observable } from \"mobx\";\n import Model from \"./Model\";\n \n export default abstract class ParanoidModel extends Model {\n   @observable\n   deletedAt: string | undefined;\n+\n+  @computed\n+  get isDeleted(): boolean {\n+    return !!this.deletedAt;\n+  }\n }\n\ndiff --git a/app/scenes/Settings/Members.tsx b/app/scenes/Settings/Members.tsx\nindex aebe49cb468e..cb3deeb0d625 100644\n--- a/app/scenes/Settings/Members.tsx\n+++ b/app/scenes/Settings/Members.tsx\n@@ -194,7 +194,7 @@ function getFilteredUsers({\n \n   switch (filter) {\n     case \"all\":\n-      filteredUsers = users.orderedData;\n+      filteredUsers = users.all;\n       break;\n     case \"suspended\":\n       filteredUsers = users.suspended;\n\ndiff --git a/app/stores/UsersStore.ts b/app/stores/UsersStore.ts\nindex f517f166782b..6433e75d2e11 100644\n--- a/app/stores/UsersStore.ts\n+++ b/app/stores/UsersStore.ts\n@@ -27,46 +27,44 @@ export default class UsersStore extends Store<User> {\n \n   @computed\n   get active(): User[] {\n-    return this.orderedData.filter(\n-      (user) => !user.isSuspended && user.lastActiveAt\n-    );\n+    return this.all.filter((user) => !user.isSuspended && !user.isInvited);\n   }\n \n   @computed\n   get suspended(): User[] {\n-    return this.orderedData.filter((user) => user.isSuspended);\n+    return this.all.filter((user) => user.isSuspended);\n   }\n \n   @computed\n   get activeOrInvited(): User[] {\n-    return this.orderedData.filter((user) => !user.isSuspended);\n+    return this.all.filter((user) => !user.isSuspended);\n   }\n \n   @computed\n   get invited(): User[] {\n-    return this.orderedData.filter((user) => user.isInvited);\n+    return this.all.filter((user) => user.isInvited);\n   }\n \n   @computed\n   get admins(): User[] {\n-    return this.orderedData.filter((user) => user.isAdmin);\n+    return this.all.filter((user) => user.isAdmin && !user.isInvited);\n   }\n \n   @computed\n   get members(): User[] {\n-    return this.orderedData.filter(\n+    return this.all.filter(\n       (user) => !user.isViewer && !user.isAdmin && !user.isInvited\n     );\n   }\n \n   @computed\n   get viewers(): User[] {\n-    return this.orderedData.filter((user) => user.isViewer);\n+    return this.all.filter((user) => user.isViewer && !user.isInvited);\n   }\n \n   @computed\n   get all(): User[] {\n-    return this.orderedData.filter((user) => user.lastActiveAt);\n+    return this.orderedData.filter((user) => !user.isDeleted);\n   }\n \n   @computed\n\ndiff --git a/app/stores/base/Store.ts b/app/stores/base/Store.ts\nindex 20944c614ed1..498e783c41ca 100644\n--- a/app/stores/base/Store.ts\n+++ b/app/stores/base/Store.ts\n@@ -1,6 +1,7 @@\n import commandScore from \"command-score\";\n import invariant from \"invariant\";\n-import { deburr, type ObjectIterateeCustom } from \"lodash\";\n+import type { ObjectIterateeCustom } from \"lodash\";\n+import deburr from \"lodash/deburr\";\n import filter from \"lodash/filter\";\n import find from \"lodash/find\";\n import flatten from \"lodash/flatten\";\n@@ -102,6 +103,9 @@ export default abstract class Store<T extends Model> {\n \n     return this.orderedData\n       .filter((item: T & Searchable) => {\n+        if (\"deletedAt\" in item && item.deletedAt) {\n+          return false;\n+        }\n         if (\"searchContent\" in item) {\n           const seachables =\n             typeof item.searchContent === \"string\"\n\ndiff --git a/server/presenters/user.ts b/server/presenters/user.ts\nindex f9b73d55b323..2bdca9fc4762 100644\n--- a/server/presenters/user.ts\n+++ b/server/presenters/user.ts\n@@ -13,6 +13,7 @@ type UserPresentation = {\n   avatarUrl: string | null | undefined;\n   createdAt: Date;\n   updatedAt: Date;\n+  deletedAt: Date | null;\n   lastActiveAt: Date | null;\n   color: string;\n   role: UserRole;\n@@ -37,6 +38,7 @@ export default function presentUser(\n     isSuspended: user.isSuspended,\n     createdAt: user.createdAt,\n     updatedAt: user.updatedAt,\n+    deletedAt: user.deletedAt,\n     lastActiveAt: user.lastActiveAt,\n     timezone: user.timezone,\n   };\n",
    "test_patch": "diff --git a/server/presenters/__snapshots__/user.test.ts.snap b/server/presenters/__snapshots__/user.test.ts.snap\nindex c1766ed44471..3a165f8ea7a0 100644\n--- a/server/presenters/__snapshots__/user.test.ts.snap\n+++ b/server/presenters/__snapshots__/user.test.ts.snap\n@@ -5,6 +5,7 @@ exports[`presents a user 1`] = `\n   \"avatarUrl\": null,\n   \"color\": \"#FF5C80\",\n   \"createdAt\": undefined,\n+  \"deletedAt\": undefined,\n   \"id\": \"123\",\n   \"isSuspended\": false,\n   \"lastActiveAt\": undefined,\n@@ -20,6 +21,7 @@ exports[`presents a user without slack data 1`] = `\n   \"avatarUrl\": null,\n   \"color\": \"#FF5C80\",\n   \"createdAt\": undefined,\n+  \"deletedAt\": undefined,\n   \"id\": \"123\",\n   \"isSuspended\": false,\n   \"lastActiveAt\": undefined,\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8603",
    "pr_id": 8603,
    "issue_id": 5496,
    "repo": "outline/outline",
    "problem_statement": "Add custom naming of revisions\nAdd the ability to name revisions",
    "issue_word_count": 11,
    "test_files_count": 2,
    "non_test_files_count": 9,
    "pr_changed_files": [
      "app/models/Revision.ts",
      "server/migrations/20250301234423-add-name-to-revisions.js",
      "server/models/Revision.ts",
      "server/policies/index.ts",
      "server/policies/revision.ts",
      "server/presenters/revision.ts",
      "server/routes/api/revisions/revisions.test.ts",
      "server/routes/api/revisions/revisions.ts",
      "server/routes/api/revisions/schema.ts",
      "server/routes/api/shares/shares.test.ts",
      "shared/validations.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/revisions/revisions.test.ts",
      "server/routes/api/shares/shares.test.ts"
    ],
    "base_commit": "bed0bf9ec8b119cd3c2d60b1849ef10c59277d6a",
    "head_commit": "ee3720c34ab7103c913e8bfdee9c5275217b6de7",
    "repo_url": "https://github.com/outline/outline/pull/8603",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8603",
    "dockerfile": "",
    "pr_merged_at": "2025-03-02T13:07:30.000Z",
    "patch": "diff --git a/app/models/Revision.ts b/app/models/Revision.ts\nindex 50be73d49d72..5dee0e950a79 100644\n--- a/app/models/Revision.ts\n+++ b/app/models/Revision.ts\n@@ -19,6 +19,9 @@ class Revision extends Model {\n   /** The document title when the revision was created */\n   title: string;\n \n+  /** An optional name for the revision */\n+  name: string | null;\n+\n   /** Prosemirror data of the content when revision was created */\n   data: ProsemirrorData;\n \n\ndiff --git a/server/migrations/20250301234423-add-name-to-revisions.js b/server/migrations/20250301234423-add-name-to-revisions.js\nnew file mode 100644\nindex 000000000000..f04ad392a995\n--- /dev/null\n+++ b/server/migrations/20250301234423-add-name-to-revisions.js\n@@ -0,0 +1,15 @@\n+\"use strict\";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.addColumn(\"revisions\", \"name\", {\n+      type: Sequelize.STRING,\n+      allowNull: true,\n+    });\n+  },\n+\n+  async down(queryInterface) {\n+    await queryInterface.removeColumn(\"revisions\", \"name\");\n+  },\n+};\n\ndiff --git a/server/models/Revision.ts b/server/models/Revision.ts\nindex abe7bc28f309..4b0de276111c 100644\n--- a/server/models/Revision.ts\n+++ b/server/models/Revision.ts\n@@ -15,7 +15,7 @@ import {\n   Length as SimpleLength,\n } from \"sequelize-typescript\";\n import type { ProsemirrorData } from \"@shared/types\";\n-import { DocumentValidation } from \"@shared/validations\";\n+import { DocumentValidation, RevisionValidation } from \"@shared/validations\";\n import Document from \"./Document\";\n import User from \"./User\";\n import IdModel from \"./base/IdModel\";\n@@ -42,6 +42,7 @@ class Revision extends IdModel<\n   @Column(DataType.SMALLINT)\n   version?: number | null;\n \n+  /** The editor version at the time of the revision */\n   @SimpleLength({\n     max: 255,\n     msg: `editorVersion must be 255 characters or less`,\n@@ -49,6 +50,7 @@ class Revision extends IdModel<\n   @Column\n   editorVersion: string;\n \n+  /** The document title at the time of the revision */\n   @Length({\n     max: DocumentValidation.maxTitleLength,\n     msg: `Revision title must be ${DocumentValidation.maxTitleLength} characters or less`,\n@@ -56,6 +58,14 @@ class Revision extends IdModel<\n   @Column\n   title: string;\n \n+  /** An optional name for the revision */\n+  @Length({\n+    max: RevisionValidation.maxNameLength,\n+    msg: `Revision name must be ${RevisionValidation.maxNameLength} characters or less`,\n+  })\n+  @Column\n+  name: string | null;\n+\n   /**\n    * The content of the revision as Markdown.\n    *\n@@ -65,13 +75,11 @@ class Revision extends IdModel<\n   @Column(DataType.TEXT)\n   text: string;\n \n-  /**\n-   * The content of the revision as JSON.\n-   */\n+  /** The content of the revision as JSON. */\n   @Column(DataType.JSONB)\n   content: ProsemirrorData | null;\n \n-  /** An icon to use as the document icon. */\n+  /** The icon at the time of the revision. */\n   @Length({\n     max: 50,\n     msg: `icon must be 50 characters or less`,\n@@ -79,7 +87,7 @@ class Revision extends IdModel<\n   @Column\n   icon: string | null;\n \n-  /** The color of the icon. */\n+  /** The color at the time of the revision. */\n   @IsHexColor\n   @Column\n   color: string | null;\n\ndiff --git a/server/policies/index.ts b/server/policies/index.ts\nindex 82e5cf5ba4c7..70d5f4f8c8e3 100644\n--- a/server/policies/index.ts\n+++ b/server/policies/index.ts\n@@ -12,6 +12,7 @@ import \"./fileOperation\";\n import \"./integration\";\n import \"./pins\";\n import \"./reaction\";\n+import \"./revision\";\n import \"./searchQuery\";\n import \"./share\";\n import \"./star\";\n\ndiff --git a/server/policies/revision.ts b/server/policies/revision.ts\nnew file mode 100644\nindex 000000000000..06e931868ef8\n--- /dev/null\n+++ b/server/policies/revision.ts\n@@ -0,0 +1,11 @@\n+import { User, Revision } from \"@server/models\";\n+import { allow } from \"./cancan\";\n+import { and, isTeamMutable, or } from \"./utils\";\n+\n+allow(User, [\"update\"], Revision, (actor, revision) =>\n+  and(\n+    //\n+    or(actor.id === revision?.userId, actor.isAdmin),\n+    isTeamMutable(actor)\n+  )\n+);\n\ndiff --git a/server/presenters/revision.ts b/server/presenters/revision.ts\nindex 5bf6250245e9..246183962578 100644\n--- a/server/presenters/revision.ts\n+++ b/server/presenters/revision.ts\n@@ -12,6 +12,7 @@ async function presentRevision(revision: Revision, diff?: string) {\n     id: revision.id,\n     documentId: revision.documentId,\n     title: strippedTitle,\n+    name: revision.name,\n     data: await DocumentHelper.toJSON(revision),\n     icon: revision.icon ?? emoji,\n     color: revision.color,\n\ndiff --git a/server/routes/api/revisions/revisions.ts b/server/routes/api/revisions/revisions.ts\nindex f09855d234b2..54c27ec7f31f 100644\n--- a/server/routes/api/revisions/revisions.ts\n+++ b/server/routes/api/revisions/revisions.ts\n@@ -4,11 +4,12 @@ import { RevisionHelper } from \"@shared/utils/RevisionHelper\";\n import slugify from \"@shared/utils/slugify\";\n import { ValidationError } from \"@server/errors\";\n import auth from \"@server/middlewares/authentication\";\n+import { transaction } from \"@server/middlewares/transaction\";\n import validate from \"@server/middlewares/validate\";\n import { Document, Revision } from \"@server/models\";\n import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n import { authorize } from \"@server/policies\";\n-import { presentRevision } from \"@server/presenters\";\n+import { presentPolicies, presentRevision } from \"@server/presenters\";\n import { APIContext } from \"@server/types\";\n import pagination from \"../middlewares/pagination\";\n import * as T from \"./schema\";\n@@ -57,6 +58,36 @@ router.post(\n           includeStyles: false,\n         })\n       ),\n+      policies: presentPolicies(user, [after]),\n+    };\n+  }\n+);\n+\n+router.post(\n+  \"revisions.update\",\n+  auth(),\n+  validate(T.RevisionsUpdateSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.RevisionsUpdateReq>) => {\n+    const { id, name } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n+\n+    const revision = await Revision.findByPk(id, {\n+      rejectOnEmpty: true,\n+    });\n+    const document = await Document.findByPk(revision.documentId, {\n+      userId: user.id,\n+    });\n+    authorize(user, \"update\", document);\n+    authorize(user, \"update\", revision);\n+\n+    revision.name = name;\n+    await revision.save({ transaction });\n+\n+    ctx.body = {\n+      data: await presentRevision(revision),\n+      policies: presentPolicies(user, [revision]),\n     };\n   }\n );\n@@ -110,6 +141,7 @@ router.post(\n \n     ctx.body = {\n       data: content,\n+      policies: presentPolicies(user, [revision]),\n     };\n   }\n );\n@@ -144,6 +176,7 @@ router.post(\n     ctx.body = {\n       pagination: ctx.state.pagination,\n       data,\n+      policies: presentPolicies(user, revisions),\n     };\n   }\n );\n\ndiff --git a/server/routes/api/revisions/schema.ts b/server/routes/api/revisions/schema.ts\nindex 85c88974d59e..d7b522452741 100644\n--- a/server/routes/api/revisions/schema.ts\n+++ b/server/routes/api/revisions/schema.ts\n@@ -1,5 +1,6 @@\n import isEmpty from \"lodash/isEmpty\";\n import { z } from \"zod\";\n+import { RevisionValidation } from \"@shared/validations\";\n import { Revision } from \"@server/models\";\n import { BaseSchema } from \"@server/routes/api/schema\";\n \n@@ -25,6 +26,19 @@ export const RevisionsDiffSchema = BaseSchema.extend({\n \n export type RevisionsDiffReq = z.infer<typeof RevisionsDiffSchema>;\n \n+export const RevisionsUpdateSchema = BaseSchema.extend({\n+  body: z.object({\n+    id: z.string().uuid(),\n+\n+    name: z\n+      .string()\n+      .min(RevisionValidation.minNameLength)\n+      .max(RevisionValidation.maxNameLength),\n+  }),\n+});\n+\n+export type RevisionsUpdateReq = z.infer<typeof RevisionsUpdateSchema>;\n+\n export const RevisionsListSchema = z.object({\n   body: z.object({\n     direction: z\n\ndiff --git a/shared/validations.ts b/shared/validations.ts\nindex d00e8898b1ae..a0359c9857a7 100644\n--- a/shared/validations.ts\n+++ b/shared/validations.ts\n@@ -51,6 +51,11 @@ export const DocumentValidation = {\n   maxStateLength: 1500 * 1024,\n };\n \n+export const RevisionValidation = {\n+  minNameLength: 1,\n+  maxNameLength: 255,\n+};\n+\n export const PinValidation = {\n   /** The maximum number of pinned documents on an individual collection or home screen */\n   max: 8,\n",
    "test_patch": "diff --git a/server/routes/api/revisions/revisions.test.ts b/server/routes/api/revisions/revisions.test.ts\nindex 7db8e718749f..99586488916e 100644\n--- a/server/routes/api/revisions/revisions.test.ts\n+++ b/server/routes/api/revisions/revisions.test.ts\n@@ -1,5 +1,6 @@\n import { UserMembership, Revision } from \"@server/models\";\n import {\n+  buildAdmin,\n   buildCollection,\n   buildDocument,\n   buildUser,\n@@ -42,6 +43,61 @@ describe(\"#revisions.info\", () => {\n   });\n });\n \n+describe(\"#revisions.update\", () => {\n+  it(\"should update a document revision\", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const revision = await Revision.createFromDocument(document);\n+\n+    const res = await server.post(\"/api/revisions.update\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: revision.id,\n+        name: \"new name\",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.name).toEqual(\"new name\");\n+  });\n+\n+  it(\"should allow an admin to update a document revision\", async () => {\n+    const admin = await buildAdmin();\n+    const document = await buildDocument({\n+      teamId: admin.teamId,\n+    });\n+    const revision = await Revision.createFromDocument(document);\n+\n+    const res = await server.post(\"/api/revisions.update\", {\n+      body: {\n+        token: admin.getJwtToken(),\n+        id: revision.id,\n+        name: \"new name\",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.name).toEqual(\"new name\");\n+  });\n+\n+  it(\"should require authorization\", async () => {\n+    const document = await buildDocument();\n+    const revision = await Revision.createFromDocument(document);\n+    const user = await buildUser();\n+    const res = await server.post(\"/api/revisions.update\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: revision.id,\n+        name: \"new name\",\n+      },\n+    });\n+    expect(res.status).toEqual(403);\n+  });\n+});\n+\n describe(\"#revisions.diff\", () => {\n   it(\"should return the document HTML if no previous revision\", async () => {\n     const user = await buildUser();\n\ndiff --git a/server/routes/api/shares/shares.test.ts b/server/routes/api/shares/shares.test.ts\nindex 993ce345c1e0..fe8b9f435aa0 100644\n--- a/server/routes/api/shares/shares.test.ts\n+++ b/server/routes/api/shares/shares.test.ts\n@@ -62,6 +62,7 @@ describe(\"#shares.list\", () => {\n     const document = await buildDocument({\n       userId: user.id,\n       teamId: user.teamId,\n+      title: \"hardcoded\",\n     });\n     await buildShare({\n       documentId: document.id,\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8602",
    "pr_id": 8602,
    "issue_id": 8585,
    "repo": "outline/outline",
    "problem_statement": "Add filtering to \"Shared links\" admin\nThis is the only table in admin that doesn't have some basic filtering, on large teams the amount of shared links will be in hundreds or thousands.",
    "issue_word_count": 28,
    "test_files_count": 1,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "app/models/Share.ts",
      "app/scenes/Settings/Shares.tsx",
      "app/scenes/Settings/components/SharesTable.tsx",
      "server/routes/api/shares/schema.ts",
      "server/routes/api/shares/shares.test.ts",
      "server/routes/api/shares/shares.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/shares/shares.test.ts"
    ],
    "base_commit": "4573b3fea2367ead4838e21bdcfb34a052eb9a90",
    "head_commit": "a007c7a47979f112d43bdcc017ef4fef010dfb45",
    "repo_url": "https://github.com/outline/outline/pull/8602",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8602",
    "dockerfile": "",
    "pr_merged_at": "2025-03-01T22:22:15.000Z",
    "patch": "diff --git a/app/models/Share.ts b/app/models/Share.ts\nindex f6fee1ffc37c..fd066a98a31b 100644\n--- a/app/models/Share.ts\n+++ b/app/models/Share.ts\n@@ -1,12 +1,13 @@\n-import { observable } from \"mobx\";\n+import { computed, observable } from \"mobx\";\n import Collection from \"./Collection\";\n import Document from \"./Document\";\n import User from \"./User\";\n import Model from \"./base/Model\";\n import Field from \"./decorators/Field\";\n import Relation from \"./decorators/Relation\";\n+import { Searchable } from \"./interfaces/Searchable\";\n \n-class Share extends Model {\n+class Share extends Model implements Searchable {\n   static modelName = \"Share\";\n \n   @Field\n@@ -65,6 +66,11 @@ class Share extends Model {\n   /** The user that shared the document. */\n   @Relation(() => User, { onDelete: \"null\" })\n   createdBy: User;\n+\n+  @computed\n+  get searchContent(): string[] {\n+    return [this.document?.title ?? this.documentTitle];\n+  }\n }\n \n export default Share;\n\ndiff --git a/app/scenes/Settings/Shares.tsx b/app/scenes/Settings/Shares.tsx\nindex e10e55f9c51c..1131c8263323 100644\n--- a/app/scenes/Settings/Shares.tsx\n+++ b/app/scenes/Settings/Shares.tsx\n@@ -3,10 +3,11 @@ import { observer } from \"mobx-react\";\n import { GlobeIcon, WarningIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useTranslation, Trans } from \"react-i18next\";\n-import { Link } from \"react-router-dom\";\n+import { Link, useHistory, useLocation } from \"react-router-dom\";\n import { toast } from \"sonner\";\n import { ConditionalFade } from \"~/components/Fade\";\n import Heading from \"~/components/Heading\";\n+import InputSearch from \"~/components/InputSearch\";\n import Notice from \"~/components/Notice\";\n import Scene from \"~/components/Scene\";\n import Text from \"~/components/Text\";\n@@ -16,17 +17,22 @@ import useQuery from \"~/hooks/useQuery\";\n import useStores from \"~/hooks/useStores\";\n import { useTableRequest } from \"~/hooks/useTableRequest\";\n import { SharesTable } from \"./components/SharesTable\";\n+import { StickyFilters } from \"./components/StickyFilters\";\n \n function Shares() {\n   const team = useCurrentTeam();\n   const { t } = useTranslation();\n+  const location = useLocation();\n+  const history = useHistory();\n   const { shares, auth } = useStores();\n   const canShareDocuments = auth.team && auth.team.sharing;\n   const can = usePolicy(team);\n   const params = useQuery();\n+  const [query, setQuery] = React.useState(\"\");\n \n   const reqParams = React.useMemo(\n     () => ({\n+      query: params.get(\"query\") || undefined,\n       sort: params.get(\"sort\") || \"createdAt\",\n       direction: (params.get(\"direction\") || \"desc\").toUpperCase() as\n         | \"ASC\"\n@@ -44,18 +50,44 @@ function Shares() {\n   );\n \n   const { data, error, loading, next } = useTableRequest({\n-    data: shares.orderedData,\n+    data: shares.findByQuery(reqParams.query ?? \"\"),\n     sort,\n     reqFn: shares.fetchPage,\n     reqParams,\n   });\n \n+  const updateParams = React.useCallback(\n+    (name: string, value: string) => {\n+      if (value) {\n+        params.set(name, value);\n+      } else {\n+        params.delete(name);\n+      }\n+\n+      history.replace({\n+        pathname: location.pathname,\n+        search: params.toString(),\n+      });\n+    },\n+    [params, history, location.pathname]\n+  );\n+\n+  const handleSearch = React.useCallback((event) => {\n+    const { value } = event.target;\n+    setQuery(value);\n+  }, []);\n+\n   React.useEffect(() => {\n     if (error) {\n       toast.error(t(\"Could not load shares\"));\n     }\n   }, [t, error]);\n \n+  React.useEffect(() => {\n+    const timeout = setTimeout(() => updateParams(\"query\", query), 250);\n+    return () => clearTimeout(timeout);\n+  }, [query, updateParams]);\n+\n   return (\n     <Scene title={t(\"Shared Links\")} icon={<GlobeIcon />} wide>\n       <Heading>{t(\"Shared Links\")}</Heading>\n@@ -83,6 +115,14 @@ function Shares() {\n         </Trans>\n       </Text>\n \n+      <StickyFilters gap={8}>\n+        <InputSearch\n+          short\n+          value={query}\n+          placeholder={`${t(\"Filter\")}…`}\n+          onChange={handleSearch}\n+        />\n+      </StickyFilters>\n       <ConditionalFade animate={!data}>\n         <SharesTable\n           data={data ?? []}\n\ndiff --git a/app/scenes/Settings/components/SharesTable.tsx b/app/scenes/Settings/components/SharesTable.tsx\nindex 5714e897ca7f..48377c450c20 100644\n--- a/app/scenes/Settings/components/SharesTable.tsx\n+++ b/app/scenes/Settings/components/SharesTable.tsx\n@@ -3,7 +3,7 @@ import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { unicodeCLDRtoBCP47 } from \"@shared/utils/date\";\n import Share from \"~/models/Share\";\n-import { Avatar } from \"~/components/Avatar\";\n+import { Avatar, AvatarSize } from \"~/components/Avatar\";\n import Flex from \"~/components/Flex\";\n import { HEADER_HEIGHT } from \"~/components/Header\";\n import {\n@@ -46,10 +46,10 @@ export function SharesTable({ data, canManage, ...rest }: Props) {\n           accessor: (share) => share.createdBy,\n           sortable: false,\n           component: (share) => (\n-            <Flex align=\"center\" gap={4}>\n+            <Flex align=\"center\" gap={8}>\n               {share.createdBy && (\n                 <>\n-                  <Avatar model={share.createdBy} />\n+                  <Avatar model={share.createdBy} size={AvatarSize.Small} />\n                   {share.createdBy.name}\n                 </>\n               )}\n\ndiff --git a/server/routes/api/shares/schema.ts b/server/routes/api/shares/schema.ts\nindex 4c5f46948863..1b6b782e0c39 100644\n--- a/server/routes/api/shares/schema.ts\n+++ b/server/routes/api/shares/schema.ts\n@@ -29,6 +29,7 @@ export type SharesInfoReq = z.infer<typeof SharesInfoSchema>;\n \n export const SharesListSchema = BaseSchema.extend({\n   body: z.object({\n+    query: z.string().optional(),\n     sort: z\n       .string()\n       .refine((val) => Object.keys(Share.getAttributes()).includes(val), {\n\ndiff --git a/server/routes/api/shares/shares.ts b/server/routes/api/shares/shares.ts\nindex 8dcb32e74b0d..289552a06bd5 100644\n--- a/server/routes/api/shares/shares.ts\n+++ b/server/routes/api/shares/shares.ts\n@@ -98,9 +98,10 @@ router.post(\n   pagination(),\n   validate(T.SharesListSchema),\n   async (ctx: APIContext<T.SharesListReq>) => {\n-    const { sort, direction } = ctx.input.body;\n+    const { sort, direction, query } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     authorize(user, \"listShares\", user.team);\n+    const collectionIds = await user.collectionIds();\n \n     const where: WhereOptions<Share> = {\n       teamId: user.teamId,\n@@ -111,12 +112,21 @@ router.post(\n       },\n     };\n \n+    const documentWhere: WhereOptions<Document> = {\n+      teamId: user.teamId,\n+      collectionId: collectionIds,\n+    };\n+\n+    if (query) {\n+      documentWhere.title = {\n+        [Op.iLike]: `%${query}%`,\n+      };\n+    }\n+\n     if (user.isAdmin) {\n       delete where.userId;\n     }\n \n-    const collectionIds = await user.collectionIds();\n-\n     const options: FindOptions = {\n       where,\n       include: [\n@@ -125,9 +135,7 @@ router.post(\n           required: true,\n           paranoid: true,\n           as: \"document\",\n-          where: {\n-            collectionId: collectionIds,\n-          },\n+          where: documentWhere,\n           include: [\n             {\n               model: Collection.scope({\n",
    "test_patch": "diff --git a/server/routes/api/shares/shares.test.ts b/server/routes/api/shares/shares.test.ts\nindex 58f072718a52..993ce345c1e0 100644\n--- a/server/routes/api/shares/shares.test.ts\n+++ b/server/routes/api/shares/shares.test.ts\n@@ -57,6 +57,57 @@ describe(\"#shares.list\", () => {\n     expect(body.data[0].documentTitle).toBe(document.title);\n   });\n \n+  it(\"should allow filtering by document title\", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    await buildShare({\n+      documentId: document.id,\n+      teamId: user.teamId,\n+      userId: user.id,\n+    });\n+    const res = await server.post(\"/api/shares.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        query: \"test\",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(0);\n+  });\n+\n+  it(\"should allow filtering by document title and return matching shares\", async () => {\n+    const user = await buildUser();\n+    await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      title: \"test\",\n+    });\n+    const share = await buildShare({\n+      documentId: document.id,\n+      teamId: user.teamId,\n+      userId: user.id,\n+    });\n+    const res = await server.post(\"/api/shares.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        query: \"test\",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(1);\n+    expect(body.data[0].id).toEqual(share.id);\n+    expect(body.data[0].documentTitle).toBe(\"test\");\n+  });\n+\n   it(\"should not return revoked shares\", async () => {\n     const user = await buildUser();\n     const document = await buildDocument({\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8544",
    "pr_id": 8544,
    "issue_id": 8500,
    "repo": "outline/outline",
    "problem_statement": "Allow sending `text` parameter to `comments.create`\nRight now you have to send `data` and know the correct doc data format, ideally we'd accept markdown similar to `documents.create`",
    "issue_word_count": 23,
    "test_files_count": 2,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "server/routes/api/comments/__snapshots__/comments.test.ts.snap",
      "server/routes/api/comments/comments.test.ts",
      "server/routes/api/comments/comments.ts",
      "server/routes/api/comments/schema.ts",
      "shared/editor/commands/table.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/comments/__snapshots__/comments.test.ts.snap",
      "server/routes/api/comments/comments.test.ts"
    ],
    "base_commit": "97e91eb06b1fc7f42a76fe22d791264ba51b32af",
    "head_commit": "52bc7e02afd8a39890aa7f9b08289f43091792aa",
    "repo_url": "https://github.com/outline/outline/pull/8544",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8544",
    "dockerfile": "",
    "pr_merged_at": "2025-02-25T01:52:40.000Z",
    "patch": "diff --git a/server/routes/api/comments/comments.ts b/server/routes/api/comments/comments.ts\nindex 292a8a2f7db6..6b86a3d0e7d7 100644\n--- a/server/routes/api/comments/comments.ts\n+++ b/server/routes/api/comments/comments.ts\n@@ -6,6 +6,7 @@ import {\n   TeamPreference,\n   MentionType,\n } from \"@shared/types\";\n+import { parser } from \"@server/editor\";\n import auth from \"@server/middlewares/authentication\";\n import { feature } from \"@server/middlewares/feature\";\n import { rateLimiter } from \"@server/middlewares/rateLimiter\";\n@@ -13,6 +14,7 @@ import { transaction } from \"@server/middlewares/transaction\";\n import validate from \"@server/middlewares/validate\";\n import { Document, Comment, Collection, Reaction } from \"@server/models\";\n import { ProsemirrorHelper } from \"@server/models/helpers/ProsemirrorHelper\";\n+import { TextHelper } from \"@server/models/helpers/TextHelper\";\n import { authorize } from \"@server/policies\";\n import { presentComment, presentPolicies } from \"@server/presenters\";\n import { APIContext } from \"@server/types\";\n@@ -30,7 +32,7 @@ router.post(\n   validate(T.CommentsCreateSchema),\n   transaction(),\n   async (ctx: APIContext<T.CommentsCreateReq>) => {\n-    const { id, documentId, parentCommentId, data } = ctx.input.body;\n+    const { id, documentId, parentCommentId } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n \n@@ -40,6 +42,15 @@ router.post(\n     });\n     authorize(user, \"comment\", document);\n \n+    const text = ctx.input.body.text\n+      ? await TextHelper.replaceImagesWithAttachments(\n+          ctx,\n+          ctx.input.body.text,\n+          user\n+        )\n+      : undefined;\n+    const data = text ? parser.parse(text).toJSON() : ctx.input.body.data;\n+\n     const comment = await Comment.createWithCtx(ctx, {\n       id,\n       data,\n\ndiff --git a/server/routes/api/comments/schema.ts b/server/routes/api/comments/schema.ts\nindex e8a05054cb3e..c18d4876504a 100644\n--- a/server/routes/api/comments/schema.ts\n+++ b/server/routes/api/comments/schema.ts\n@@ -1,4 +1,5 @@\n import emojiRegex from \"emoji-regex\";\n+import isEmpty from \"lodash/isEmpty\";\n import { z } from \"zod\";\n import { CommentStatusFilter } from \"@shared/types\";\n import { BaseSchema, ProsemirrorSchema } from \"@server/routes/api/schema\";\n@@ -23,19 +24,26 @@ const CommentsSortParamsSchema = z.object({\n });\n \n export const CommentsCreateSchema = BaseSchema.extend({\n-  body: z.object({\n-    /** Allow creation with a specific ID */\n-    id: z.string().uuid().optional(),\n-\n-    /** Create comment for this document */\n-    documentId: z.string().uuid(),\n-\n-    /** Create comment under this parent */\n-    parentCommentId: z.string().uuid().optional(),\n-\n-    /** Create comment with this data */\n-    data: ProsemirrorSchema(),\n-  }),\n+  body: z\n+    .object({\n+      /** Allow creation with a specific ID */\n+      id: z.string().uuid().optional(),\n+\n+      /** Create comment for this document */\n+      documentId: z.string().uuid(),\n+\n+      /** Create comment under this parent */\n+      parentCommentId: z.string().uuid().optional(),\n+\n+      /** Create comment with this data */\n+      data: ProsemirrorSchema().optional(),\n+\n+      /** Create comment with this text */\n+      text: z.string().optional(),\n+    })\n+    .refine((obj) => !(isEmpty(obj.data) && isEmpty(obj.text)), {\n+      message: \"One of data or text is required\",\n+    }),\n });\n \n export type CommentsCreateReq = z.infer<typeof CommentsCreateSchema>;\n\ndiff --git a/shared/editor/commands/table.ts b/shared/editor/commands/table.ts\nindex e4461e905d9f..3ed236a11cc9 100644\n--- a/shared/editor/commands/table.ts\n+++ b/shared/editor/commands/table.ts\n@@ -61,13 +61,14 @@ function createTableInner(\n       : cellType.createAndFill(attrs);\n \n   for (let index = 0; index < colsCount; index += 1) {\n-    const attrs = colWidth\n-      ? {\n-          colwidth: [colWidth],\n-          colspan: 1,\n-          rowspan: 1,\n-        }\n-      : null;\n+    const attrs =\n+      colWidth && index < colsCount - 1\n+        ? {\n+            colwidth: [colWidth],\n+            colspan: 1,\n+            rowspan: 1,\n+          }\n+        : null;\n     const cell = createCell(types.cell, attrs);\n \n     if (cell) {\n",
    "test_patch": "diff --git a/server/routes/api/comments/__snapshots__/comments.test.ts.snap b/server/routes/api/comments/__snapshots__/comments.test.ts.snap\nindex 56b84ed58ac6..3503b2703d71 100644\n--- a/server/routes/api/comments/__snapshots__/comments.test.ts.snap\n+++ b/server/routes/api/comments/__snapshots__/comments.test.ts.snap\n@@ -9,6 +9,59 @@ exports[`#comments.add_reaction should require authentication 1`] = `\n }\n `;\n \n+exports[`#comments.create should create a comment from markdown text 1`] = `\n+{\n+  \"content\": [\n+    {\n+      \"attrs\": {\n+        \"level\": 2,\n+      },\n+      \"content\": [\n+        {\n+          \"text\": \"heading\",\n+          \"type\": \"text\",\n+        },\n+      ],\n+      \"type\": \"heading\",\n+    },\n+    {\n+      \"content\": [\n+        {\n+          \"content\": [\n+            {\n+              \"content\": [\n+                {\n+                  \"text\": \"list item 1\",\n+                  \"type\": \"text\",\n+                },\n+              ],\n+              \"type\": \"paragraph\",\n+            },\n+          ],\n+          \"type\": \"list_item\",\n+        },\n+        {\n+          \"content\": [\n+            {\n+              \"content\": [\n+                {\n+                  \"text\": \"list item 2\",\n+                  \"type\": \"text\",\n+                },\n+              ],\n+              \"type\": \"paragraph\",\n+            },\n+          ],\n+          \"type\": \"list_item\",\n+        },\n+      ],\n+      \"type\": \"bullet_list\",\n+    },\n+  ],\n+  \"type\": \"doc\",\n+}\n+`;\n+\n exports[`#comments.create should require authentication 1`] = `\n {\n   \"error\": \"authentication_required\",\n\ndiff --git a/server/routes/api/comments/comments.test.ts b/server/routes/api/comments/comments.test.ts\nindex 3660e2dd18f9..d75c8d3541a6 100644\n--- a/server/routes/api/comments/comments.test.ts\n+++ b/server/routes/api/comments/comments.test.ts\n@@ -481,6 +481,30 @@ describe(\"#comments.create\", () => {\n     expect(body.policies[0].abilities.delete).toBeTruthy();\n   });\n \n+  it(\"should create a comment from markdown text\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const text = \"## heading\\n\\n- list item 1\\n- list item 2\";\n+\n+    const res = await server.post(\"/api/comments.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        text,\n+      },\n+    });\n+\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.data).toMatchSnapshot();\n+  });\n+\n   it(\"should not allow empty comment data\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8529",
    "pr_id": 8529,
    "issue_id": 8267,
    "repo": "outline/outline",
    "problem_statement": "Add @mentions for collections\nFollowing on from #7680 – this should be a fairly easy addition in the same vein.",
    "issue_word_count": 15,
    "test_files_count": 1,
    "non_test_files_count": 29,
    "pr_changed_files": [
      "app/actions/sections.ts",
      "app/editor/components/MentionMenu.tsx",
      "app/editor/extensions/PasteHandler.tsx",
      "app/models/Collection.ts",
      "app/scenes/KeyboardShortcuts.tsx",
      "server/models/helpers/SearchHelper.test.ts",
      "server/models/helpers/SearchHelper.ts",
      "server/routes/api/suggestions/suggestions.ts",
      "shared/editor/components/Mentions.tsx",
      "shared/editor/nodes/Mention.tsx",
      "shared/i18n/locales/cs_CZ/translation.json",
      "shared/i18n/locales/da_DK/translation.json",
      "shared/i18n/locales/de_DE/translation.json",
      "shared/i18n/locales/en_US/translation.json",
      "shared/i18n/locales/es_ES/translation.json",
      "shared/i18n/locales/fa_IR/translation.json",
      "shared/i18n/locales/fr_FR/translation.json",
      "shared/i18n/locales/he_IL/translation.json",
      "shared/i18n/locales/hu_HU/translation.json",
      "shared/i18n/locales/id_ID/translation.json",
      "shared/i18n/locales/it_IT/translation.json",
      "shared/i18n/locales/ja_JP/translation.json",
      "shared/i18n/locales/ko_KR/translation.json",
      "shared/i18n/locales/nb_NO/translation.json",
      "shared/i18n/locales/nl_NL/translation.json",
      "shared/i18n/locales/pl_PL/translation.json",
      "shared/i18n/locales/pt_BR/translation.json",
      "shared/i18n/locales/pt_PT/translation.json",
      "shared/i18n/locales/sv_SE/translation.json",
      "shared/i18n/locales/th_TH/translation.json"
    ],
    "pr_changed_test_files": [
      "server/models/helpers/SearchHelper.test.ts"
    ],
    "base_commit": "2a3ea1254c3c82ab07a4b59ed29493be27765792",
    "head_commit": "117d756cb7856b937eff5ff2873f5e7401834126",
    "repo_url": "https://github.com/outline/outline/pull/8529",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8529",
    "dockerfile": "",
    "pr_merged_at": "2025-03-04T03:03:27.000Z",
    "patch": "diff --git a/app/actions/sections.ts b/app/actions/sections.ts\nindex 3a5369b8842b..2046eb3d524a 100644\n--- a/app/actions/sections.ts\n+++ b/app/actions/sections.ts\n@@ -2,6 +2,8 @@ import { ActionContext } from \"~/types\";\n \n export const CollectionSection = ({ t }: ActionContext) => t(\"Collection\");\n \n+export const CollectionsSection = ({ t }: ActionContext) => t(\"Collections\");\n+\n export const ActiveCollectionSection = ({ t, stores }: ActionContext) => {\n   const activeCollection = stores.collections.active;\n   return `${t(\"Collection\")} · ${activeCollection?.name}`;\n\ndiff --git a/app/editor/components/MentionMenu.tsx b/app/editor/components/MentionMenu.tsx\nindex 661b6418f426..192668bbe470 100644\n--- a/app/editor/components/MentionMenu.tsx\n+++ b/app/editor/components/MentionMenu.tsx\n@@ -1,6 +1,6 @@\n import { isEmail } from \"class-validator\";\n import { observer } from \"mobx-react\";\n-import { DocumentIcon, PlusIcon } from \"outline-icons\";\n+import { DocumentIcon, PlusIcon, CollectionIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { useLocation } from \"react-router-dom\";\n@@ -12,7 +12,11 @@ import { MentionType } from \"@shared/types\";\n import parseDocumentSlug from \"@shared/utils/parseDocumentSlug\";\n import { Avatar, AvatarSize } from \"~/components/Avatar\";\n import Flex from \"~/components/Flex\";\n-import { DocumentsSection, UserSection } from \"~/actions/sections\";\n+import {\n+  DocumentsSection,\n+  UserSection,\n+  CollectionsSection,\n+} from \"~/actions/sections\";\n import useRequest from \"~/hooks/useRequest\";\n import useStores from \"~/hooks/useStores\";\n import { client } from \"~/utils/ApiClient\";\n@@ -40,7 +44,7 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n   const [loaded, setLoaded] = React.useState(false);\n   const [items, setItems] = React.useState<MentionItem[]>([]);\n   const { t } = useTranslation();\n-  const { auth, documents, users } = useStores();\n+  const { auth, documents, users, collections } = useStores();\n   const actorId = auth.currentUserId;\n   const location = useLocation();\n   const documentId = parseDocumentSlug(location.pathname);\n@@ -49,8 +53,10 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n   const { loading, request } = useRequest(\n     React.useCallback(async () => {\n       const res = await client.post(\"/suggestions.mention\", { query: search });\n+\n       res.data.documents.map(documents.add);\n       res.data.users.map(users.add);\n+      res.data.collections.map(collections.add);\n     }, [search, documents, users])\n   );\n \n@@ -119,6 +125,34 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n                 } as MentionItem)\n             )\n         )\n+        .concat(\n+          collections\n+            .findByQuery(search, { maxResults: maxResultsInSection })\n+            .map(\n+              (collection) =>\n+                ({\n+                  name: \"mention\",\n+                  icon: collection.icon ? (\n+                    <Icon\n+                      value={collection.icon}\n+                      color={collection.color ?? undefined}\n+                    />\n+                  ) : (\n+                    <CollectionIcon />\n+                  ),\n+                  title: collection.name,\n+                  section: CollectionsSection,\n+                  appendSpace: true,\n+                  attrs: {\n+                    id: v4(),\n+                    type: MentionType.Collection,\n+                    modelId: collection.id,\n+                    actorId,\n+                    label: collection.name,\n+                  },\n+                } as MentionItem)\n+            )\n+        )\n         .concat([\n           {\n             name: \"link\",\n@@ -146,7 +180,10 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n \n   const handleSelect = React.useCallback(\n     async (item: MentionItem) => {\n-      if (item.attrs.type === MentionType.Document) {\n+      if (\n+        item.attrs.type === MentionType.Document ||\n+        item.attrs.type === MentionType.Collection\n+      ) {\n         return;\n       }\n       if (!documentId) {\n\ndiff --git a/app/editor/extensions/PasteHandler.tsx b/app/editor/extensions/PasteHandler.tsx\nindex 73c1c6340041..6982f74c93c5 100644\n--- a/app/editor/extensions/PasteHandler.tsx\n+++ b/app/editor/extensions/PasteHandler.tsx\n@@ -20,8 +20,9 @@ import { isInCode } from \"@shared/editor/queries/isInCode\";\n import { MenuItem } from \"@shared/editor/types\";\n import { IconType, MentionType } from \"@shared/types\";\n import { determineIconType } from \"@shared/utils/icon\";\n+import parseCollectionSlug from \"@shared/utils/parseCollectionSlug\";\n import parseDocumentSlug from \"@shared/utils/parseDocumentSlug\";\n-import { isDocumentUrl, isUrl } from \"@shared/utils/urls\";\n+import { isCollectionUrl, isDocumentUrl, isUrl } from \"@shared/utils/urls\";\n import stores from \"~/stores\";\n import PasteMenu from \"../components/PasteMenu\";\n \n@@ -166,6 +167,51 @@ export default class PasteHandler extends Extension {\n                         this.insertLink(text);\n                       });\n                   }\n+                } else if (isCollectionUrl(text)) {\n+                  const slug = parseCollectionSlug(text);\n+\n+                  if (slug) {\n+                    stores.collections\n+                      .fetch(slug)\n+                      .then((collection) => {\n+                        if (view.isDestroyed) {\n+                          return;\n+                        }\n+                        if (collection) {\n+                          if (state.schema.nodes.mention) {\n+                            view.dispatch(\n+                              view.state.tr.replaceWith(\n+                                state.selection.from,\n+                                state.selection.to,\n+                                state.schema.nodes.mention.create({\n+                                  type: MentionType.Collection,\n+                                  modelId: collection.id,\n+                                  label: collection.name,\n+                                  id: v4(),\n+                                })\n+                              )\n+                            );\n+                          } else {\n+                            const { hash } = new URL(text);\n+                            const hasEmoji =\n+                              determineIconType(collection.icon) ===\n+                              IconType.Emoji;\n+\n+                            const title = `${\n+                              hasEmoji ? collection.icon + \" \" : \"\"\n+                            }${collection.name}`;\n+\n+                            this.insertLink(`${collection.path}${hash}`, title);\n+                          }\n+                        }\n+                      })\n+                      .catch(() => {\n+                        if (view.isDestroyed) {\n+                          return;\n+                        }\n+                        this.insertLink(text);\n+                      });\n+                  }\n                 } else {\n                   this.insertLink(text);\n                 }\n\ndiff --git a/app/models/Collection.ts b/app/models/Collection.ts\nindex f97bfcac4331..a0c36f8f6239 100644\n--- a/app/models/Collection.ts\n+++ b/app/models/Collection.ts\n@@ -92,6 +92,11 @@ export default class Collection extends ParanoidModel {\n   @observable\n   archivedBy?: User;\n \n+  @computed\n+  get searchContent(): string {\n+    return this.name;\n+  }\n+\n   /** Returns whether the collection is empty, or undefined if not loaded. */\n   @computed\n   get isEmpty(): boolean | undefined {\n\ndiff --git a/app/scenes/KeyboardShortcuts.tsx b/app/scenes/KeyboardShortcuts.tsx\nindex 848be3cc8cd6..e29a1a304d2b 100644\n--- a/app/scenes/KeyboardShortcuts.tsx\n+++ b/app/scenes/KeyboardShortcuts.tsx\n@@ -462,7 +462,7 @@ function KeyboardShortcuts() {\n         items: [\n           {\n             shortcut: \"@\",\n-            label: t(\"Mention user or document\"),\n+            label: t(\"Mention users and more\"),\n           },\n           {\n             shortcut: \":\",\n\ndiff --git a/server/models/helpers/SearchHelper.ts b/server/models/helpers/SearchHelper.ts\nindex a2179fea9b06..e8a85d83b05f 100644\n--- a/server/models/helpers/SearchHelper.ts\n+++ b/server/models/helpers/SearchHelper.ts\n@@ -203,6 +203,35 @@ export default class SearchHelper {\n     });\n   }\n \n+  public static async searchCollectionsForUser(\n+    user: User,\n+    options: SearchOptions = {}\n+  ): Promise<Collection[]> {\n+    const { limit = 15, offset = 0, query } = options;\n+\n+    const collectionIds = await user.collectionIds();\n+\n+    return Collection.findAll({\n+      where: {\n+        [Op.and]: query\n+          ? {\n+              [Op.or]: [\n+                Sequelize.literal(\n+                  `unaccent(LOWER(name)) like unaccent(LOWER(:query))`\n+                ),\n+              ],\n+            }\n+          : {},\n+        id: collectionIds,\n+        teamId: user.teamId,\n+      },\n+      order: [[\"name\", \"ASC\"]],\n+      replacements: { query: `%${query}%` },\n+      limit,\n+      offset,\n+    });\n+  }\n+\n   public static async searchForUser(\n     user: User,\n     options: SearchOptions = {}\n\ndiff --git a/server/routes/api/suggestions/suggestions.ts b/server/routes/api/suggestions/suggestions.ts\nindex eac32db6db9d..5263f3bd9e2a 100644\n--- a/server/routes/api/suggestions/suggestions.ts\n+++ b/server/routes/api/suggestions/suggestions.ts\n@@ -23,7 +23,7 @@ router.post(\n     const { offset, limit } = ctx.state.pagination;\n     const actor = ctx.state.auth.user;\n \n-    const [documents, users] = await Promise.all([\n+    const [documents, users, collections] = await Promise.all([\n       SearchHelper.searchTitlesForUser(actor, {\n         query,\n         offset,\n@@ -53,6 +53,7 @@ router.post(\n         offset,\n         limit,\n       }),\n+      SearchHelper.searchCollectionsForUser(actor, { query, offset, limit }),\n     ]);\n \n     ctx.body = {\n@@ -67,6 +68,7 @@ router.post(\n             includeDetails: !!can(actor, \"readDetails\", user),\n           })\n         ),\n+        collections,\n       },\n     };\n   }\n\ndiff --git a/shared/editor/components/Mentions.tsx b/shared/editor/components/Mentions.tsx\nindex 07737c5e8e3a..6c85c4880ce1 100644\n--- a/shared/editor/components/Mentions.tsx\n+++ b/shared/editor/components/Mentions.tsx\n@@ -1,5 +1,5 @@\n import { observer } from \"mobx-react\";\n-import { DocumentIcon, EmailIcon } from \"outline-icons\";\n+import { DocumentIcon, EmailIcon, CollectionIcon } from \"outline-icons\";\n import { Node } from \"prosemirror-model\";\n import * as React from \"react\";\n import { Link } from \"react-router-dom\";\n@@ -67,3 +67,36 @@ export const MentionDocument = observer(function MentionDocument_(\n     </Link>\n   );\n });\n+\n+export const MentionCollection = observer(function MentionCollection_(\n+  props: ComponentProps\n+) {\n+  const { isSelected, node } = props;\n+  const { collections } = useStores();\n+  const collection = collections.get(node.attrs.modelId);\n+  const modelId = node.attrs.modelId;\n+  const { className, ...attrs } = getAttributesFromNode(node);\n+\n+  React.useEffect(() => {\n+    if (modelId) {\n+      void collections.fetch(modelId);\n+    }\n+  }, [modelId, collections]);\n+\n+  return (\n+    <Link\n+      {...attrs}\n+      className={cn(className, {\n+        \"ProseMirror-selectednode\": isSelected,\n+      })}\n+      to={collection?.path ?? `/collection/${node.attrs.modelId}`}\n+    >\n+      {collection?.icon ? (\n+        <Icon value={collection?.icon} color={collection?.color} size={18} />\n+      ) : (\n+        <CollectionIcon size={18} />\n+      )}\n+      {collection?.title || node.attrs.label}\n+    </Link>\n+  );\n+});\n\ndiff --git a/shared/editor/nodes/Mention.tsx b/shared/editor/nodes/Mention.tsx\nindex 24aedfaa4a7e..fc200016def4 100644\n--- a/shared/editor/nodes/Mention.tsx\n+++ b/shared/editor/nodes/Mention.tsx\n@@ -16,7 +16,11 @@ import { Primitive } from \"utility-types\";\n import { v4 as uuidv4 } from \"uuid\";\n import env from \"../../env\";\n import { MentionType } from \"../../types\";\n-import { MentionDocument, MentionUser } from \"../components/Mentions\";\n+import {\n+  MentionCollection,\n+  MentionDocument,\n+  MentionUser,\n+} from \"../components/Mentions\";\n import { MarkdownSerializerState } from \"../lib/markdown/serializer\";\n import mentionRule from \"../rules/mention\";\n import { ComponentProps } from \"../types\";\n@@ -76,7 +80,9 @@ export default class Mention extends Node {\n           href:\n             node.attrs.type === MentionType.User\n               ? undefined\n-              : `${env.URL}/doc/${node.attrs.modelId}`,\n+              : node.attrs.type === MentionType.Document\n+              ? `${env.URL}/doc/${node.attrs.modelId}`\n+              : `${env.URL}/collection/${node.attrs.modelId}`,\n           \"data-type\": node.attrs.type,\n           \"data-id\": node.attrs.modelId,\n           \"data-actorid\": node.attrs.actorId,\n@@ -97,6 +103,8 @@ export default class Mention extends Node {\n         return <MentionUser {...props} />;\n       case MentionType.Document:\n         return <MentionDocument {...props} />;\n+      case MentionType.Collection:\n+        return <MentionCollection {...props} />;\n       default:\n         return null;\n     }\n@@ -145,10 +153,23 @@ export default class Mention extends Node {\n         if (\n           selection instanceof NodeSelection &&\n           selection.node.type.name === this.name &&\n-          selection.node.attrs.type === MentionType.Document\n+          (selection.node.attrs.type === MentionType.Document ||\n+            selection.node.attrs.type === MentionType.Collection)\n         ) {\n           const { modelId } = selection.node.attrs;\n-          this.editor.props.onClickLink?.(`/doc/${modelId}`);\n+\n+          const linkType =\n+            selection.node.attrs.type === MentionType.Document\n+              ? \"doc\"\n+              : selection.node.attrs.type === MentionType.Collection\n+              ? \"collection\"\n+              : undefined;\n+\n+          if (!linkType) {\n+            return false;\n+          }\n+\n+          this.editor.props.onClickLink?.(`/${linkType}/${modelId}`);\n           return true;\n         }\n         return false;\n\ndiff --git a/shared/i18n/locales/cs_CZ/translation.json b/shared/i18n/locales/cs_CZ/translation.json\nindex 117cc5b4a737..0ff90018862c 100644\n--- a/shared/i18n/locales/cs_CZ/translation.json\n+++ b/shared/i18n/locales/cs_CZ/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Vložený kód\",\n   \"Inline LaTeX\": \"Vložený LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Přihlásit se\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"Vytvořili jste před {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} vytvořil před {{ timeAgo }}\",\n   \"Uploading\": \"Nahrávání\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/da_DK/translation.json b/shared/i18n/locales/da_DK/translation.json\nindex abe70c67841d..630efa864989 100644\n--- a/shared/i18n/locales/da_DK/translation.json\n+++ b/shared/i18n/locales/da_DK/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Inline code\",\n   \"Inline LaTeX\": \"Inline LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Sign In\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"You created {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} created {{ timeAgo }}\",\n   \"Uploading\": \"Uploading\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/de_DE/translation.json b/shared/i18n/locales/de_DE/translation.json\nindex 5894957ad7aa..c4b98d1bd430 100644\n--- a/shared/i18n/locales/de_DE/translation.json\n+++ b/shared/i18n/locales/de_DE/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Inline-Code\",\n   \"Inline LaTeX\": \"Inline-LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Anmelden\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"Du hast vor {{ timeAgo }} erstellt\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} erstellte vor {{ timeAgo }}\",\n   \"Uploading\": \"Wird hochgeladen\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 3ac0b50298ff..f6f8e1a87853 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -137,6 +137,7 @@\n   \"Update role\": \"Update role\",\n   \"Delete user\": \"Delete user\",\n   \"Collection\": \"Collection\",\n+  \"Collections\": \"Collections\",\n   \"Debug\": \"Debug\",\n   \"Document\": \"Document\",\n   \"Documents\": \"Documents\",\n@@ -368,7 +369,6 @@\n   \"Archived collections\": \"Archived collections\",\n   \"New doc\": \"New doc\",\n   \"Empty\": \"Empty\",\n-  \"Collections\": \"Collections\",\n   \"Collapse\": \"Collapse\",\n   \"Expand\": \"Expand\",\n   \"Document not supported – try Markdown, Plain text, HTML, or Word\": \"Document not supported – try Markdown, Plain text, HTML, or Word\",\n@@ -770,7 +770,7 @@\n   \"Inline code\": \"Inline code\",\n   \"Inline LaTeX\": \"Inline LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Sign In\",\n\ndiff --git a/shared/i18n/locales/es_ES/translation.json b/shared/i18n/locales/es_ES/translation.json\nindex 0eb85e7f7e07..7b42420c0a45 100644\n--- a/shared/i18n/locales/es_ES/translation.json\n+++ b/shared/i18n/locales/es_ES/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Código en línea\",\n   \"Inline LaTeX\": \"Línea de LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Iniciar sesión\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"Tú lo creaste {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} lo creó {{ timeAgo }}\",\n   \"Uploading\": \"Subiendo\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/fa_IR/translation.json b/shared/i18n/locales/fa_IR/translation.json\nindex c01419fb5a84..4ba0b7a26bf1 100644\n--- a/shared/i18n/locales/fa_IR/translation.json\n+++ b/shared/i18n/locales/fa_IR/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"کد درون خطی\",\n   \"Inline LaTeX\": \"Inline LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"ورود\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"You created {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} created {{ timeAgo }}\",\n   \"Uploading\": \"در حال بارگذاری\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/fr_FR/translation.json b/shared/i18n/locales/fr_FR/translation.json\nindex 547f2f716bb1..53f7b39215d2 100644\n--- a/shared/i18n/locales/fr_FR/translation.json\n+++ b/shared/i18n/locales/fr_FR/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Ligne de Code\",\n   \"Inline LaTeX\": \"LaTeX en ligne\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Se connecter\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"Créé par vous il y a {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"Créé par {{ user }} il y a {{ timeAgo }}\",\n   \"Uploading\": \"Transfert en cours\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/he_IL/translation.json b/shared/i18n/locales/he_IL/translation.json\nindex c0b5c1fd0bb3..526306cb552f 100644\n--- a/shared/i18n/locales/he_IL/translation.json\n+++ b/shared/i18n/locales/he_IL/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Inline code\",\n   \"Inline LaTeX\": \"Inline LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Sign In\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"You created {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} created {{ timeAgo }}\",\n   \"Uploading\": \"Uploading\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/hu_HU/translation.json b/shared/i18n/locales/hu_HU/translation.json\nindex 5c7a135027c2..44d347da8622 100644\n--- a/shared/i18n/locales/hu_HU/translation.json\n+++ b/shared/i18n/locales/hu_HU/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Beágyazott kód\",\n   \"Inline LaTeX\": \"Beágyazott LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Bejelentkezés\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"You created {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} created {{ timeAgo }}\",\n   \"Uploading\": \"Uploading\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/id_ID/translation.json b/shared/i18n/locales/id_ID/translation.json\nindex a47e0e0c25dd..5554aee9a16e 100644\n--- a/shared/i18n/locales/id_ID/translation.json\n+++ b/shared/i18n/locales/id_ID/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Kode inline\",\n   \"Inline LaTeX\": \"LaTeX Inline\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Masuk\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"You created {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} created {{ timeAgo }}\",\n   \"Uploading\": \"Mengunggah\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/it_IT/translation.json b/shared/i18n/locales/it_IT/translation.json\nindex 3e879da1d206..cbaeec5736f1 100644\n--- a/shared/i18n/locales/it_IT/translation.json\n+++ b/shared/i18n/locales/it_IT/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Codice inline\",\n   \"Inline LaTeX\": \"LaTeX in linea\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Accedi\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"You created {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} created {{ timeAgo }}\",\n   \"Uploading\": \"Caricamento\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/ja_JP/translation.json b/shared/i18n/locales/ja_JP/translation.json\nindex 54b5ff56bc36..6d524fed0ea4 100644\n--- a/shared/i18n/locales/ja_JP/translation.json\n+++ b/shared/i18n/locales/ja_JP/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"インラインコード\",\n   \"Inline LaTeX\": \"インライン LaTeX\",\n   \"Triggers\": \"トリガー\",\n-  \"Mention user or document\": \"ユーザーまたはドキュメントにメンション\",\n+  \"Mention users and more\": \"ユーザーまたはドキュメントにメンション\",\n   \"Emoji\": \"絵文字\",\n   \"Insert block\": \"ブロックの挿入\",\n   \"Sign In\": \"ログイン\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"あなたが {{ timeAgo }} に作成しました\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} が {{ timeAgo }} に作成しました\",\n   \"Uploading\": \"アップロード中\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/ko_KR/translation.json b/shared/i18n/locales/ko_KR/translation.json\nindex 248d73e2c354..7b0c2532dbdf 100644\n--- a/shared/i18n/locales/ko_KR/translation.json\n+++ b/shared/i18n/locales/ko_KR/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"인라인 코드\",\n   \"Inline LaTeX\": \"인라인 LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"로그인\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"{{ timeAgo }} 전에 내가 생성함\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} 이(가) {{ timeAgo }} 전에 생성\",\n   \"Uploading\": \"업로드 중\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/nb_NO/translation.json b/shared/i18n/locales/nb_NO/translation.json\nindex 7000f32c57a6..3bc7a8c65d24 100644\n--- a/shared/i18n/locales/nb_NO/translation.json\n+++ b/shared/i18n/locales/nb_NO/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Innebygd kode\",\n   \"Inline LaTeX\": \"Innebygd LaTeX\",\n   \"Triggers\": \"Utløsere\",\n-  \"Mention user or document\": \"Nevn bruker eller dokument\",\n+  \"Mention users and more\": \"Nevn bruker eller dokument\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Sett inn blokk\",\n   \"Sign In\": \"Logg inn\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"Du opprettet {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} opprettet {{ timeAgo }}\",\n   \"Uploading\": \"Laster opp\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/nl_NL/translation.json b/shared/i18n/locales/nl_NL/translation.json\nindex c4061b62707e..f0f55065c5d9 100644\n--- a/shared/i18n/locales/nl_NL/translation.json\n+++ b/shared/i18n/locales/nl_NL/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Inline code\",\n   \"Inline LaTeX\": \"Inline LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Voeg blok in\",\n   \"Sign In\": \"Aanmelden\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"{{ timeAgo }} door jou aangemaakt\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ timeAgo }} door {{ user }} aangemaakt\",\n   \"Uploading\": \"Bezig met uploaden\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/pl_PL/translation.json b/shared/i18n/locales/pl_PL/translation.json\nindex c430ac9b4bc4..d4d42aaf47a9 100644\n--- a/shared/i18n/locales/pl_PL/translation.json\n+++ b/shared/i18n/locales/pl_PL/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Kod w linii\",\n   \"Inline LaTeX\": \"LaTeX w linii\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Zaloguj się\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"Utworzyłeś {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} utworzył {{ timeAgo }}\",\n   \"Uploading\": \"Wysyłanie\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/pt_BR/translation.json b/shared/i18n/locales/pt_BR/translation.json\nindex 2450e6633abf..654367711762 100644\n--- a/shared/i18n/locales/pt_BR/translation.json\n+++ b/shared/i18n/locales/pt_BR/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Código embutido\",\n   \"Inline LaTeX\": \"LaTeX em linha\",\n   \"Triggers\": \"Gatilhos\",\n-  \"Mention user or document\": \"Mencionar usuário ou documento\",\n+  \"Mention users and more\": \"Mencionar usuário ou documento\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Inserir bloco\",\n   \"Sign In\": \"Entrar\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"Você criou {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} criou {{ timeAgo }}\",\n   \"Uploading\": \"Enviando\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/pt_PT/translation.json b/shared/i18n/locales/pt_PT/translation.json\nindex 35b4e1f71325..8e57e16cbd4c 100644\n--- a/shared/i18n/locales/pt_PT/translation.json\n+++ b/shared/i18n/locales/pt_PT/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Código em linha\",\n   \"Inline LaTeX\": \"LaTeX Embutido\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Iniciar Sessão\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"Criou à {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} criado à {{ timeAgo }}\",\n   \"Uploading\": \"A carregar\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/sv_SE/translation.json b/shared/i18n/locales/sv_SE/translation.json\nindex 408416e349c5..033d94acc7d6 100644\n--- a/shared/i18n/locales/sv_SE/translation.json\n+++ b/shared/i18n/locales/sv_SE/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Inline-kod\",\n   \"Inline LaTeX\": \"Inline LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Logga in\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"Du skapade {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} skapade {{ timeAgo }}\",\n   \"Uploading\": \"Laddar upp\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/th_TH/translation.json b/shared/i18n/locales/th_TH/translation.json\nindex 9eb33b600456..452c2ec0eb82 100644\n--- a/shared/i18n/locales/th_TH/translation.json\n+++ b/shared/i18n/locales/th_TH/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Inline code\",\n   \"Inline LaTeX\": \"Inline LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Sign In\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"You created {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} created {{ timeAgo }}\",\n   \"Uploading\": \"Uploading\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/tr_TR/translation.json b/shared/i18n/locales/tr_TR/translation.json\nindex c36a0831ede7..f2f0fe8c5a20 100644\n--- a/shared/i18n/locales/tr_TR/translation.json\n+++ b/shared/i18n/locales/tr_TR/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Satır içi kod\",\n   \"Inline LaTeX\": \"Inline LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Kayıt ol\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"You created {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} created {{ timeAgo }}\",\n   \"Uploading\": \"Yükleniyor\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/uk_UA/translation.json b/shared/i18n/locales/uk_UA/translation.json\nindex fd1e9eb16d78..a49b8a28fc99 100644\n--- a/shared/i18n/locales/uk_UA/translation.json\n+++ b/shared/i18n/locales/uk_UA/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Вбудований код\",\n   \"Inline LaTeX\": \"Вбудований LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Увійти\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"Ви створили {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} створив {{ timeAgo }}\",\n   \"Uploading\": \"Завантажується\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/vi_VN/translation.json b/shared/i18n/locales/vi_VN/translation.json\nindex db8285d29520..0849d8654676 100644\n--- a/shared/i18n/locales/vi_VN/translation.json\n+++ b/shared/i18n/locales/vi_VN/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"Mã nội tuyến\",\n   \"Inline LaTeX\": \"LaTeX nội tuyến\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"Đăng nhập\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"You created {{ timeAgo }}\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ user }} created {{ timeAgo }}\",\n   \"Uploading\": \"Đang tải lên\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/zh_CN/translation.json b/shared/i18n/locales/zh_CN/translation.json\nindex 75557b0bf7d0..7c88fa7b4794 100644\n--- a/shared/i18n/locales/zh_CN/translation.json\n+++ b/shared/i18n/locales/zh_CN/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"行内代码\",\n   \"Inline LaTeX\": \"行内公式\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"提及用户或文档\",\n+  \"Mention users and more\": \"提及用户或文档\",\n   \"Emoji\": \"表情\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"登录\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"{{ timeAgo }} 由你创建\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ timeAgo }} 由 {{ user }} 创建\",\n   \"Uploading\": \"上传中\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/zh_TW/translation.json b/shared/i18n/locales/zh_TW/translation.json\nindex 0a0e7683615f..2f7040b3af81 100644\n--- a/shared/i18n/locales/zh_TW/translation.json\n+++ b/shared/i18n/locales/zh_TW/translation.json\n@@ -769,7 +769,7 @@\n   \"Inline code\": \"行內程式碼\",\n   \"Inline LaTeX\": \"行內 LaTeX\",\n   \"Triggers\": \"Triggers\",\n-  \"Mention user or document\": \"Mention user or document\",\n+  \"Mention users and more\": \"Mention users and more\",\n   \"Emoji\": \"Emoji\",\n   \"Insert block\": \"Insert block\",\n   \"Sign In\": \"登入\",\n@@ -1143,4 +1143,4 @@\n   \"You created {{ timeAgo }}\": \"{{ timeAgo }} 由您新增\",\n   \"{{ user }} created {{ timeAgo }}\": \"{{ timeAgo }} 由 {{ user }} 新增\",\n   \"Uploading\": \"正在上傳\"\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex 32904533cf0b..dc451167506d 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -57,6 +57,7 @@ export enum FileOperationState {\n export enum MentionType {\n   User = \"user\",\n   Document = \"document\",\n+  Collection = \"collection\",\n }\n \n export type PublicEnv = {\n\ndiff --git a/shared/utils/parseCollectionSlug.ts b/shared/utils/parseCollectionSlug.ts\nnew file mode 100644\nindex 000000000000..9e3f4847797f\n--- /dev/null\n+++ b/shared/utils/parseCollectionSlug.ts\n@@ -0,0 +1,25 @@\n+import sharedEnv from \"../env\";\n+\n+/**\n+ * Parse the likely collection identifier from a given url.\n+ *\n+ * @param url The url to parse.\n+ * @returns A collection identifier or undefined if not found.\n+ */\n+export default function parseCollectionSlug(url: string) {\n+  let parsed;\n+\n+  if (url[0] === \"/\") {\n+    url = `${sharedEnv.URL}${url}`;\n+  }\n+\n+  try {\n+    parsed = new URL(url).pathname;\n+  } catch (err) {\n+    return;\n+  }\n+\n+  const split = parsed.split(\"/\");\n+  const indexOfCollection = split.indexOf(\"collection\");\n+  return split[indexOfCollection + 1] ?? undefined;\n+}\n\ndiff --git a/shared/utils/urls.ts b/shared/utils/urls.ts\nindex fa700888edbf..96d0d256c8a3 100644\n--- a/shared/utils/urls.ts\n+++ b/shared/utils/urls.ts\n@@ -76,6 +76,21 @@ export function isDocumentUrl(url: string) {\n   }\n }\n \n+/**\n+ * Returns true if the given string is a link to a collection.\n+ *\n+ * @param options Parsing options.\n+ * @returns True if a collection, false otherwise.\n+ */\n+export function isCollectionUrl(url: string) {\n+  try {\n+    const parsed = new URL(url, env.URL);\n+    return isInternalUrl(url) && parsed.pathname.startsWith(\"/collection/\");\n+  } catch (err) {\n+    return false;\n+  }\n+}\n+\n /**\n  * Returns true if the given string is a url.\n  *\n",
    "test_patch": "diff --git a/server/models/helpers/SearchHelper.test.ts b/server/models/helpers/SearchHelper.test.ts\nindex 03dc311a3adf..e5f21f1441d6 100644\n--- a/server/models/helpers/SearchHelper.test.ts\n+++ b/server/models/helpers/SearchHelper.test.ts\n@@ -861,6 +861,51 @@ describe(\"SearchHelper\", () => {\n     });\n   });\n \n+  describe(\"#searchCollectionsForUser\", () => {\n+    test(\"should return search results from collections\", async () => {\n+      const team = await buildTeam();\n+      const user = await buildUser({ teamId: team.id });\n+      const collection1 = await buildCollection({\n+        teamId: team.id,\n+        userId: user.id,\n+        name: \"Test Collection\",\n+      });\n+      await buildCollection({\n+        teamId: team.id,\n+        userId: user.id,\n+        name: \"Other Collection\",\n+      });\n+\n+      const results = await SearchHelper.searchCollectionsForUser(user, {\n+        query: \"test\",\n+      });\n+\n+      expect(results.length).toBe(1);\n+      expect(results[0].id).toBe(collection1.id);\n+    });\n+\n+    test(\"should return all collections when no query provided\", async () => {\n+      const team = await buildTeam();\n+      const user = await buildUser({ teamId: team.id });\n+      const collection1 = await buildCollection({\n+        teamId: team.id,\n+        userId: user.id,\n+        name: \"Alpha\",\n+      });\n+      const collection2 = await buildCollection({\n+        teamId: team.id,\n+        userId: user.id,\n+        name: \"Beta\",\n+      });\n+\n+      const results = await SearchHelper.searchCollectionsForUser(user);\n+\n+      expect(results.length).toBe(2);\n+      expect(results[0].id).toBe(collection1.id);\n+      expect(results[1].id).toBe(collection2.id);\n+    });\n+  });\n+\n   describe(\"webSearchQuery\", () => {\n     test(\"should correctly sanitize query\", () => {\n       expect(SearchHelper.webSearchQuery(\"one/two\")).toBe(\"one/two:*\");\n\ndiff --git a/shared/utils/parseCollectionSlug.test.ts b/shared/utils/parseCollectionSlug.test.ts\nnew file mode 100644\nindex 000000000000..15eefd3ead0d\n--- /dev/null\n+++ b/shared/utils/parseCollectionSlug.test.ts\n@@ -0,0 +1,48 @@\n+import sharedEnv from \"../env\";\n+import parseCollectionSlug from \"./parseCollectionSlug\";\n+\n+sharedEnv.URL = \"https://app.outline.dev\";\n+\n+describe(\"#parseCollectionSlug\", () => {\n+  it(\"should work with fully qualified url\", () => {\n+    expect(\n+      parseCollectionSlug(\"http://example.com/collection/test-ANzZwgv2RG\")\n+    ).toEqual(\"test-ANzZwgv2RG\");\n+  });\n+\n+  it(\"should work with paths after document slug\", () => {\n+    expect(\n+      parseCollectionSlug(\n+        \"http://mywiki.getoutline.com/collection/test-ANzZwgv2RG/recent\"\n+      )\n+    ).toEqual(\"test-ANzZwgv2RG\");\n+  });\n+\n+  it(\"should work with hash\", () => {\n+    expect(\n+      parseCollectionSlug(\n+        \"http://mywiki.getoutline.com/collection/test-ANzZwgv2RG#state\"\n+      )\n+    ).toEqual(\"test-ANzZwgv2RG\");\n+  });\n+\n+  it(\"should work with subdomain qualified url\", () => {\n+    expect(\n+      parseCollectionSlug(\n+        \"http://mywiki.getoutline.com/collection/test-ANzZwgv2RG\"\n+      )\n+    ).toEqual(\"test-ANzZwgv2RG\");\n+  });\n+\n+  it(\"should work with path\", () => {\n+    expect(parseCollectionSlug(\"/collection/test-ANzZwgv2RG\")).toEqual(\n+      \"test-ANzZwgv2RG\"\n+    );\n+  });\n+\n+  it(\"should work with path and hash\", () => {\n+    expect(parseCollectionSlug(\"/collection/test-ANzZwgv2RG#somehash\")).toEqual(\n+      \"test-ANzZwgv2RG\"\n+    );\n+  });\n+});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8524",
    "pr_id": 8524,
    "issue_id": 8508,
    "repo": "outline/outline",
    "problem_statement": "Can not download exported file.\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\nAfter documents being exported, I cannot download the zip file to my machine. \n```\nNotFoundError: Resource not found\n    ...\n```\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n1. Export any documents by clicking `Preferences >  Export > Export data...`\n2. Click the exported file to download it.\n\n### Environment\n\n```markdown\n- Outline: 0.80.0\n- Browser: Chrome\n```\n\n### Anything else?\n\nThe error started occurring from [#f469212](https://github.com/outline/outline/commit/f46921275dca713d25e953c2c7610dec5d030d28). The test results indicate that the error is caused by modifications to [this file](https://github.com/outline/outline/commit/f46921275dca713d25e953c2c7610dec5d030d28#diff-26a1619ef7484a9d9fcd5eee18e291e33994bd335a9f7da57ede9ce674efb825), making the exported file untraceable through `Attachment.findOne`.",
    "issue_word_count": 129,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "plugins/storage/server/api/files.test.ts",
      "plugins/storage/server/api/files.ts",
      "plugins/storage/server/test/fixtures/export-markdown.zip"
    ],
    "pr_changed_test_files": [
      "plugins/storage/server/api/files.test.ts",
      "plugins/storage/server/test/fixtures/export-markdown.zip"
    ],
    "base_commit": "540683d89662d89a4c2826a7a238f77a52cc74fe",
    "head_commit": "31c3715147a8287c02965b57d0c2b81ac69427ed",
    "repo_url": "https://github.com/outline/outline/pull/8524",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8524",
    "dockerfile": "",
    "pr_merged_at": "2025-02-21T13:10:10.000Z",
    "patch": "diff --git a/plugins/storage/server/api/files.ts b/plugins/storage/server/api/files.ts\nindex 98f29252e671..963e86933519 100644\n--- a/plugins/storage/server/api/files.ts\n+++ b/plugins/storage/server/api/files.ts\n@@ -5,6 +5,7 @@ import env from \"@server/env\";\n import {\n   AuthenticationError,\n   AuthorizationError,\n+  NotFoundError,\n   ValidationError,\n } from \"@server/errors\";\n import auth from \"@server/middlewares/authentication\";\n@@ -80,14 +81,19 @@ router.get(\n \n     const attachment = await Attachment.findOne({\n       where: { key },\n-      rejectOnEmpty: true,\n     });\n+\n+    // Attachment is requested with a key, but it was not found\n+    if (!attachment && !!ctx.input.query.key) {\n+      throw NotFoundError();\n+    }\n+\n     if (!skipAuthorize) {\n       authorize(actor, \"read\", attachment);\n     }\n \n     const contentType =\n-      attachment.contentType ||\n+      attachment?.contentType ||\n       (fileName ? mime.lookup(fileName) : undefined) ||\n       \"application/octet-stream\";\n \n",
    "test_patch": "diff --git a/plugins/storage/server/api/files.test.ts b/plugins/storage/server/api/files.test.ts\nindex 47da255d071e..10e454d2c1e8 100644\n--- a/plugins/storage/server/api/files.test.ts\n+++ b/plugins/storage/server/api/files.test.ts\n@@ -4,9 +4,15 @@ import path from \"path\";\n import FormData from \"form-data\";\n import { ensureDirSync } from \"fs-extra\";\n import { v4 as uuidV4 } from \"uuid\";\n+import { FileOperationState, FileOperationType } from \"@shared/types\";\n import env from \"@server/env\";\n+import { Buckets } from \"@server/models/helpers/AttachmentHelper\";\n import FileStorage from \"@server/storage/files\";\n-import { buildAttachment, buildUser } from \"@server/test/factories\";\n+import {\n+  buildAttachment,\n+  buildFileOperation,\n+  buildUser,\n+} from \"@server/test/factories\";\n import { getTestServer } from \"@server/test/support\";\n \n const server = getTestServer();\n@@ -293,4 +299,37 @@ describe(\"#files.get\", () => {\n     expect(res.headers.get(\"Content-Type\")).toEqual(\"image/jpg\");\n     expect(res.headers.get(\"Content-Disposition\")).toEqual(\"attachment\");\n   });\n+\n+  it(\"should succeed with status 200 ok when exported file is requested using signature\", async () => {\n+    const user = await buildUser();\n+    const fileName = \"export-markdown.zip\";\n+    const key = `${Buckets.uploads}/${user.teamId}/${uuidV4()}/${fileName}`;\n+\n+    await buildFileOperation({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      type: FileOperationType.Export,\n+      state: FileOperationState.Complete,\n+      key,\n+    });\n+\n+    ensureDirSync(\n+      path.dirname(path.join(env.FILE_STORAGE_LOCAL_ROOT_DIR, key))\n+    );\n+\n+    copyFileSync(\n+      path.resolve(__dirname, \"..\", \"test\", \"fixtures\", fileName),\n+      path.join(env.FILE_STORAGE_LOCAL_ROOT_DIR, key)\n+    );\n+\n+    const signedUrl = await FileStorage.getSignedUrl(key);\n+    const url = new URL(signedUrl);\n+    const res = await server.get(url.pathname + url.search);\n+\n+    expect(res.status).toEqual(200);\n+    expect(res.headers.get(\"Content-Type\")).toEqual(\"application/zip\");\n+    expect(res.headers.get(\"Content-Disposition\")).toEqual(\n+      'attachment; filename=\"export-markdown.zip\"'\n+    );\n+  });\n });\n\ndiff --git a/plugins/storage/server/test/fixtures/export-markdown.zip b/plugins/storage/server/test/fixtures/export-markdown.zip\nnew file mode 100644\nindex 000000000000..a5001085e0c0\nBinary files /dev/null and b/plugins/storage/server/test/fixtures/export-markdown.zip differ\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8503",
    "pr_id": 8503,
    "issue_id": 8502,
    "repo": "outline/outline",
    "problem_statement": "Pin status incorrect on F5, allowing double pinning\n### Steps To Reproduce\n\n1. Home\n2. Pin a document to Home and a collection through it's context menu\n3. F5\n4. Pin a document to the same collection through it's context menu\n5. Go to that collection to view double pins\n\nhttps://github.com/user-attachments/assets/81b9acff-580c-4975-b6c0-da63a9499fc0\n\n### Environment\n\n878a27b\n\n",
    "issue_word_count": 56,
    "test_files_count": 1,
    "non_test_files_count": 7,
    "pr_changed_files": [
      "app/hooks/useRequest.ts",
      "app/menus/DocumentMenu.tsx",
      "app/models/Pin.ts",
      "app/stores/PinsStore.ts",
      "server/commands/pinCreator.ts",
      "server/routes/api/pins/pins.test.ts",
      "server/routes/api/pins/pins.ts",
      "server/routes/api/pins/schema.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/pins/pins.test.ts"
    ],
    "base_commit": "878a27b7c69f911212573ce27c6b89f1bea09368",
    "head_commit": "952468ab565a72168c3b659956bb673d2b495698",
    "repo_url": "https://github.com/outline/outline/pull/8503",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8503",
    "dockerfile": "",
    "pr_merged_at": "2025-02-20T04:44:22.000Z",
    "patch": "diff --git a/app/hooks/useRequest.ts b/app/hooks/useRequest.ts\nindex 88b465bcd9d9..e5b6eed59a72 100644\n--- a/app/hooks/useRequest.ts\n+++ b/app/hooks/useRequest.ts\n@@ -8,6 +8,8 @@ type RequestResponse<T> = {\n   error: unknown;\n   /** Whether the request is currently in progress. */\n   loading: boolean;\n+  /** Whether the request has completed - useful to check if the request has completed at least once. */\n+  loaded: boolean;\n   /** Function to start the request. */\n   request: () => Promise<T | undefined>;\n };\n@@ -26,6 +28,7 @@ export default function useRequest<T = unknown>(\n   const isMounted = useIsMounted();\n   const [data, setData] = React.useState<T>();\n   const [loading, setLoading] = React.useState<boolean>(false);\n+  const [loaded, setLoaded] = React.useState<boolean>(false);\n   const [error, setError] = React.useState();\n \n   const request = React.useCallback(async () => {\n@@ -36,6 +39,7 @@ export default function useRequest<T = unknown>(\n       if (isMounted()) {\n         setData(response);\n         setError(undefined);\n+        setLoaded(true);\n       }\n       return response;\n     } catch (err) {\n@@ -57,5 +61,5 @@ export default function useRequest<T = unknown>(\n     }\n   }, [request, makeRequestOnMount]);\n \n-  return { data, loading, error, request };\n+  return { data, loading, loaded, error, request };\n }\n\ndiff --git a/app/menus/DocumentMenu.tsx b/app/menus/DocumentMenu.tsx\nindex b992745a2234..077bef3afaeb 100644\n--- a/app/menus/DocumentMenu.tsx\n+++ b/app/menus/DocumentMenu.tsx\n@@ -1,6 +1,5 @@\n import capitalize from \"lodash/capitalize\";\n import isEmpty from \"lodash/isEmpty\";\n-import isUndefined from \"lodash/isUndefined\";\n import { observer } from \"mobx-react\";\n import { EditIcon, InputIcon, RestoreIcon, SearchIcon } from \"outline-icons\";\n import * as React from \"react\";\n@@ -92,22 +91,32 @@ type MenuTriggerProps = {\n const MenuTrigger: React.FC<MenuTriggerProps> = ({ label, onTrigger }) => {\n   const { t } = useTranslation();\n \n-  const { subscriptions } = useStores();\n+  const { subscriptions, pins } = useStores();\n   const { model: document, menuState } = useMenuContext<Document>();\n \n-  const { data, loading, error, request } = useRequest(() =>\n-    subscriptions.fetchOne({\n-      documentId: document.id,\n-      event: \"documents.update\",\n-    })\n+  const {\n+    loading: auxDataLoading,\n+    loaded: auxDataLoaded,\n+    request: auxDataRequest,\n+  } = useRequest(() =>\n+    Promise.all([\n+      subscriptions.fetchOne({\n+        documentId: document.id,\n+        event: \"documents.update\",\n+      }),\n+      pins.fetchOne({\n+        documentId: document.id,\n+        collectionId: document.collectionId ?? null,\n+      }),\n+    ])\n   );\n \n   const handlePointerEnter = React.useCallback(() => {\n-    if (isUndefined(data ?? error) && !loading) {\n-      void request();\n+    if (!auxDataLoading && !auxDataLoaded) {\n+      void auxDataRequest();\n       void document.loadRelations();\n     }\n-  }, [data, error, loading, request, document]);\n+  }, [auxDataLoading, auxDataLoaded, auxDataRequest, document]);\n \n   return label ? (\n     <MenuButton\n\ndiff --git a/app/models/Pin.ts b/app/models/Pin.ts\nindex 1c27fdaa1238..ad97449c0e71 100644\n--- a/app/models/Pin.ts\n+++ b/app/models/Pin.ts\n@@ -9,7 +9,7 @@ class Pin extends Model {\n   static modelName = \"Pin\";\n \n   /** The collection ID that the document is pinned to. If empty the document is pinned to home. */\n-  collectionId: string;\n+  collectionId: string | null;\n \n   /** The collection that the document is pinned to. If empty the document is pinned to home. */\n   @Relation(() => Collection, { onDelete: \"cascade\" })\n\ndiff --git a/app/stores/PinsStore.ts b/app/stores/PinsStore.ts\nindex b82a3d592ff7..b553a900eff1 100644\n--- a/app/stores/PinsStore.ts\n+++ b/app/stores/PinsStore.ts\n@@ -3,6 +3,7 @@ import { action, runInAction, computed } from \"mobx\";\n import Pin from \"~/models/Pin\";\n import { PaginationParams } from \"~/types\";\n import { client } from \"~/utils/ApiClient\";\n+import { AuthorizationError, NotFoundError } from \"~/utils/errors\";\n import RootStore from \"./RootStore\";\n import Store from \"./base/Store\";\n \n@@ -13,6 +14,41 @@ export default class PinsStore extends Store<Pin> {\n     super(rootStore, Pin);\n   }\n \n+  @action\n+  async fetchOne({\n+    documentId,\n+    collectionId,\n+  }: {\n+    documentId: string;\n+    collectionId: string | null;\n+  }) {\n+    const pin = this.orderedData.find(\n+      (p) => p.documentId === documentId && p.collectionId === collectionId\n+    );\n+\n+    if (pin) {\n+      return pin;\n+    }\n+\n+    this.isFetching = true;\n+\n+    try {\n+      const res = await client.post(`/${this.apiEndpoint}.info`, {\n+        documentId,\n+        collectionId,\n+      });\n+      invariant(res?.data, \"Data should be available\");\n+      return this.add(res.data);\n+    } catch (err) {\n+      if (err instanceof AuthorizationError || err instanceof NotFoundError) {\n+        return;\n+      }\n+      throw err;\n+    } finally {\n+      this.isFetching = false;\n+    }\n+  }\n+\n   @action\n   fetchPage = async (params?: FetchParams | undefined): Promise<Pin[]> => {\n     this.isFetching = true;\n\ndiff --git a/server/commands/pinCreator.ts b/server/commands/pinCreator.ts\nindex 6c5adeb04ac7..b7e8039a5748 100644\n--- a/server/commands/pinCreator.ts\n+++ b/server/commands/pinCreator.ts\n@@ -62,12 +62,13 @@ export default async function pinCreator({\n     index = fractionalIndex(pins.length ? pins[0].index : null, null);\n   }\n \n-  const pin = await Pin.createWithCtx(ctx, {\n-    createdById: user.id,\n-    teamId: user.teamId,\n-    collectionId,\n-    documentId,\n-    index,\n+  const [pin] = await Pin.findOrCreateWithCtx(ctx, {\n+    where: {\n+      collectionId: collectionId ?? null,\n+      documentId,\n+      teamId: user.teamId,\n+    },\n+    defaults: { index, createdById: user.id },\n   });\n \n   return pin;\n\ndiff --git a/server/routes/api/pins/pins.ts b/server/routes/api/pins/pins.ts\nindex 015661a5327a..676ea8a1c8e1 100644\n--- a/server/routes/api/pins/pins.ts\n+++ b/server/routes/api/pins/pins.ts\n@@ -57,12 +57,41 @@ router.post(\n   }\n );\n \n+router.post(\n+  \"pins.info\",\n+  auth(),\n+  validate(T.PinsInfoSchema),\n+  async (ctx: APIContext<T.PinsInfoReq>) => {\n+    const { user } = ctx.state.auth;\n+    const { documentId, collectionId } = ctx.input.body;\n+\n+    const document = await Document.findByPk(documentId, { userId: user.id });\n+    authorize(user, \"read\", document);\n+\n+    // There can be only one pin with these props.\n+    const pin = await Pin.findOne({\n+      where: {\n+        documentId,\n+        collectionId: collectionId ?? null,\n+        createdById: user.id,\n+        teamId: user.teamId,\n+      },\n+      rejectOnEmpty: true,\n+    });\n+\n+    ctx.body = {\n+      data: presentPin(pin),\n+      policies: presentPolicies(user, [pin]),\n+    };\n+  }\n+);\n+\n router.post(\n   \"pins.list\",\n   auth(),\n   validate(T.PinsListSchema),\n   pagination(),\n-  async (ctx: APIContext<T.PinsCreateReq>) => {\n+  async (ctx: APIContext<T.PinsListReq>) => {\n     const { collectionId } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n\ndiff --git a/server/routes/api/pins/schema.ts b/server/routes/api/pins/schema.ts\nindex e659e72a4178..823953ff9262 100644\n--- a/server/routes/api/pins/schema.ts\n+++ b/server/routes/api/pins/schema.ts\n@@ -1,6 +1,7 @@\n import isUUID from \"validator/lib/isUUID\";\n import { z } from \"zod\";\n import { UrlHelper } from \"@shared/utils/UrlHelper\";\n+import { zodIdType } from \"@server/utils/zod\";\n import { BaseSchema } from \"../schema\";\n \n export const PinsCreateSchema = BaseSchema.extend({\n@@ -24,13 +25,24 @@ export const PinsCreateSchema = BaseSchema.extend({\n \n export type PinsCreateReq = z.infer<typeof PinsCreateSchema>;\n \n+export const PinsInfoSchema = BaseSchema.extend({\n+  body: z.object({\n+    /** Document to get the pin info for. */\n+    documentId: zodIdType(),\n+    /** Collection to which the pin belongs to. If not set, it's considered as \"Home\" pin. */\n+    collectionId: z.string().uuid().nullish(),\n+  }),\n+});\n+\n+export type PinsInfoReq = z.infer<typeof PinsInfoSchema>;\n+\n export const PinsListSchema = BaseSchema.extend({\n   body: z.object({\n     collectionId: z.string().uuid().nullish(),\n   }),\n });\n \n-export type PinsListReq = z.infer<typeof PinsCreateSchema>;\n+export type PinsListReq = z.infer<typeof PinsListSchema>;\n \n export const PinsUpdateSchema = BaseSchema.extend({\n   body: z.object({\n",
    "test_patch": "diff --git a/server/routes/api/pins/pins.test.ts b/server/routes/api/pins/pins.test.ts\nindex f1936a0d3538..0ebcf36295b8 100644\n--- a/server/routes/api/pins/pins.test.ts\n+++ b/server/routes/api/pins/pins.test.ts\n@@ -168,6 +168,84 @@ describe(\"#pins.create\", () => {\n   });\n });\n \n+describe(\"#pins.info\", () => {\n+  it(\"should provide info about a home pin\", async () => {\n+    const admin = await buildAdmin();\n+    const document = await buildDocument({\n+      userId: admin.id,\n+      teamId: admin.teamId,\n+    });\n+\n+    await server.post(\"/api/pins.create\", {\n+      body: {\n+        token: admin.getJwtToken(),\n+        documentId: document.id,\n+      },\n+    });\n+\n+    const res = await server.post(\"/api/pins.info\", {\n+      body: {\n+        token: admin.getJwtToken(),\n+        documentId: document.id,\n+      },\n+    });\n+    const pin = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(pin.data.id).toBeDefined();\n+    expect(pin.data.documentId).toEqual(document.id);\n+    expect(pin.data.collectionId).toBeFalsy();\n+  });\n+\n+  it(\"should provide info about a collection pin\", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    await server.post(\"/api/pins.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        collectionId: document.collectionId,\n+      },\n+    });\n+\n+    const res = await server.post(\"/api/pins.info\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        collectionId: document.collectionId,\n+      },\n+    });\n+    const pin = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(pin.data.id).toBeDefined();\n+    expect(pin.data.documentId).toEqual(document.id);\n+    expect(pin.data.collectionId).toEqual(document.collectionId);\n+  });\n+\n+  it(\"should throw 404 if no pin found\", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const res = await server.post(\"/api/pins.info\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        collectionId: null,\n+      },\n+    });\n+\n+    expect(res.status).toEqual(404);\n+  });\n+});\n+\n describe(\"#pins.list\", () => {\n   let user: User;\n   let pins: Pin[];\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8495",
    "pr_id": 8495,
    "issue_id": 8458,
    "repo": "outline/outline",
    "problem_statement": "Move document history to `revisions.list` API\nCloses #8424 \r\n\r\nThis doesn't fix #8403 - it needs a bit more work to consolidate local document state.\r\n\r\nI also noticed that document restore doesn't create a `documents.restore` event which sometimes messes up the history - will create a separate PR.",
    "issue_word_count": 42,
    "test_files_count": 1,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "app/components/EventListItem.tsx",
      "app/components/PaginatedEventList.tsx",
      "app/components/PaginatedList.tsx",
      "app/scenes/Document/components/History.tsx",
      "app/stores/RevisionsStore.ts",
      "server/routes/api/events/events.test.ts",
      "server/routes/api/events/events.ts",
      "server/routes/api/events/schema.ts",
      "shared/utils/EventHelper.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/events/events.test.ts"
    ],
    "base_commit": "7144536eb3d6d9e359febdae879a498416a69135",
    "head_commit": "b09db148867f6bda3a55d889569b6897f64b1844",
    "repo_url": "https://github.com/outline/outline/pull/8495",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8495",
    "dockerfile": "",
    "pr_merged_at": "2025-02-19T01:25:52.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8477",
    "pr_id": 8477,
    "issue_id": 8266,
    "repo": "outline/outline",
    "problem_statement": "Redirect previous subdomains\nIf a workspace changes subdomain it would be nice to redirect requests to the new one if here are no other workspaces that are using the subdomain as their _primary_. This can be achieved by:\n\n- Add a new column: `previousSubdomains` with is an array of previous subdomains capped to a length (lets say 5)\n- Fallback to searching this if no valid `subdomain` is found\n- Respond with a redirect\n",
    "issue_word_count": 68,
    "test_files_count": 2,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "server/migrations/20250217230810-add-team-previous-subdomains.js",
      "server/models/Team.test.ts",
      "server/models/Team.ts",
      "server/models/TeamDomain.test.ts",
      "server/routes/index.ts",
      "server/utils/passport.ts"
    ],
    "pr_changed_test_files": [
      "server/models/Team.test.ts",
      "server/models/TeamDomain.test.ts"
    ],
    "base_commit": "c6ae6e0c36a6873e815cac1f9a839c6d0935dd55",
    "head_commit": "d8fe942b503447653b9bc0fcadc56e7508557570",
    "repo_url": "https://github.com/outline/outline/pull/8477",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8477",
    "dockerfile": "",
    "pr_merged_at": "2025-02-19T00:53:18.000Z",
    "patch": "diff --git a/server/migrations/20250217230810-add-team-previous-subdomains.js b/server/migrations/20250217230810-add-team-previous-subdomains.js\nnew file mode 100644\nindex 000000000000..898348bc6671\n--- /dev/null\n+++ b/server/migrations/20250217230810-add-team-previous-subdomains.js\n@@ -0,0 +1,27 @@\n+\"use strict\";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.addColumn(\"teams\", \"previousSubdomains\", {\n+        type: Sequelize.ARRAY(Sequelize.STRING),\n+        allowNull: true,\n+      }, { transaction });\n+      await queryInterface.sequelize.query(\n+        `CREATE INDEX teams_previous_subdomains ON teams USING GIN (\"previousSubdomains\");`,\n+        { transaction }\n+      );\n+    });\n+  },\n+\n+  async down(queryInterface) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.sequelize.query(\n+        `DROP INDEX teams_previous_subdomains;`,\n+        { transaction }\n+      );\n+      await queryInterface.removeColumn(\"teams\", \"previousSubdomains\", { transaction });\n+    });\n+  },\n+};\n\ndiff --git a/server/models/Team.ts b/server/models/Team.ts\nindex 43e052f840cd..2bf5d4c73884 100644\n--- a/server/models/Team.ts\n+++ b/server/models/Team.ts\n@@ -171,6 +171,9 @@ class Team extends ParanoidModel<\n   @Column\n   lastActiveAt: Date | null;\n \n+  @Column(DataType.ARRAY(DataType.STRING))\n+  previousSubdomains: string[] | null;\n+\n   // getters\n \n   /**\n@@ -369,6 +372,25 @@ class Team extends ParanoidModel<\n     return model;\n   }\n \n+  @BeforeUpdate\n+  static async savePreviousSubdomain(model: Team) {\n+    const previousSubdomain = model.previous(\"subdomain\");\n+    if (previousSubdomain && previousSubdomain !== model.subdomain) {\n+      model.previousSubdomains = model.previousSubdomains || [];\n+\n+      if (!model.previousSubdomains.includes(previousSubdomain)) {\n+        // Add the previous subdomain to the list of previous subdomains\n+        // upto a maximum of 3 previous subdomains\n+        model.previousSubdomains.push(previousSubdomain);\n+        if (model.previousSubdomains.length > 3) {\n+          model.previousSubdomains.shift();\n+        }\n+      }\n+    }\n+\n+    return model;\n+  }\n+\n   @AfterUpdate\n   static deletePreviousAvatar = async (model: Team) => {\n     const previousAvatarUrl = model.previous(\"avatarUrl\");\n@@ -393,6 +415,41 @@ class Team extends ParanoidModel<\n       }\n     }\n   };\n+\n+  /**\n+   * Find a team by its current or previous subdomain.\n+   *\n+   * @param subdomain - The subdomain to search for.\n+   * @returns The team with the given or previous subdomain, or null if not found.\n+   */\n+  static async findBySubdomain(subdomain: string) {\n+    // Preference is always given to the team with the subdomain currently\n+    // otherwise we can try and find a team that previously used the subdomain.\n+    return (\n+      (await this.findOne({\n+        where: {\n+          subdomain,\n+        },\n+      })) || (await this.findByPreviousSubdomain(subdomain))\n+    );\n+  }\n+\n+  /**\n+   * Find a team by its previous subdomain.\n+   *\n+   * @param previousSubdomain - The previous subdomain to search for.\n+   * @returns The team with the given previous subdomain, or null if not found.\n+   */\n+  static async findByPreviousSubdomain(previousSubdomain: string) {\n+    return this.findOne({\n+      where: {\n+        previousSubdomains: {\n+          [Op.contains]: [previousSubdomain],\n+        },\n+      },\n+      order: [[\"updatedAt\", \"DESC\"]],\n+    });\n+  }\n }\n \n export default Team;\n\ndiff --git a/server/routes/index.ts b/server/routes/index.ts\nindex 417da32381a3..aeaa135052ee 100644\n--- a/server/routes/index.ts\n+++ b/server/routes/index.ts\n@@ -7,6 +7,7 @@ import send from \"koa-send\";\n import userAgent, { UserAgentContext } from \"koa-useragent\";\n import { languages } from \"@shared/i18n\";\n import { IntegrationType, TeamPreference } from \"@shared/types\";\n+import { parseDomain } from \"@shared/utils/domains\";\n import { Day } from \"@shared/utils/time\";\n import env from \"@server/env\";\n import { NotFoundError } from \"@server/errors\";\n@@ -138,11 +139,29 @@ router.get(\"*\", shareDomains(), async (ctx, next) => {\n   }\n \n   const team = await getTeamFromContext(ctx);\n+  let redirectUrl;\n \n-  // Redirect all requests to custom domain if one is set\n-  if (team?.domain && team.domain !== ctx.hostname) {\n-    ctx.redirect(ctx.href.replace(ctx.hostname, team.domain));\n-    return;\n+  if (env.isCloudHosted) {\n+    // Redirect all requests to custom domain if one is set\n+    if (team?.domain && team.domain !== ctx.hostname) {\n+      redirectUrl = ctx.href.replace(ctx.hostname, team.domain);\n+    }\n+\n+    // Redirect if subdomain is not the current team's subdomain\n+    else if (team?.subdomain) {\n+      const { teamSubdomain } = parseDomain(ctx.href);\n+      if (team?.subdomain !== teamSubdomain) {\n+        redirectUrl = ctx.href.replace(\n+          `//${teamSubdomain}.`,\n+          `//${team.subdomain}.`\n+        );\n+      }\n+    }\n+\n+    if (redirectUrl) {\n+      ctx.redirect(redirectUrl);\n+      return;\n+    }\n   }\n \n   const analytics = team\n\ndiff --git a/server/utils/passport.ts b/server/utils/passport.ts\nindex a538df88a675..503b5f5fb44d 100644\n--- a/server/utils/passport.ts\n+++ b/server/utils/passport.ts\n@@ -127,9 +127,7 @@ export async function getTeamFromContext(ctx: Context) {\n   } else if (domain.custom) {\n     team = await Team.findOne({ where: { domain: domain.host } });\n   } else if (domain.teamSubdomain) {\n-    team = await Team.findOne({\n-      where: { subdomain: domain.teamSubdomain },\n-    });\n+    team = await Team.findBySubdomain(domain.teamSubdomain);\n   }\n \n   return team;\n",
    "test_patch": "diff --git a/server/models/Team.test.ts b/server/models/Team.test.ts\nindex 5c5194752be0..25665bea59ad 100644\n--- a/server/models/Team.test.ts\n+++ b/server/models/Team.test.ts\n@@ -1,20 +1,43 @@\n import { buildTeam, buildCollection } from \"@server/test/factories\";\n \n-describe(\"collectionIds\", () => {\n-  it(\"should return non-private collection ids\", async () => {\n-    const team = await buildTeam();\n-    const collection = await buildCollection({\n-      teamId: team.id,\n+describe(\"Team\", () => {\n+  describe(\"collectionIds\", () => {\n+    it(\"should return non-private collection ids\", async () => {\n+      const team = await buildTeam();\n+      const collection = await buildCollection({\n+        teamId: team.id,\n+      });\n+      // build a collection in another team\n+      await buildCollection();\n+      // build a private collection\n+      await buildCollection({\n+        teamId: team.id,\n+        permission: null,\n+      });\n+      const response = await team.collectionIds();\n+      expect(response.length).toEqual(1);\n+      expect(response[0]).toEqual(collection.id);\n     });\n-    // build a collection in another team\n-    await buildCollection();\n-    // build a private collection\n-    await buildCollection({\n-      teamId: team.id,\n-      permission: null,\n+  });\n+\n+  describe(\"previousSubdomains\", () => {\n+    it(\"should list the previous subdomains\", async () => {\n+      const team = await buildTeam({\n+        subdomain: \"example\",\n+      });\n+      const subdomain = \"updated\";\n+\n+      await team.update({ subdomain });\n+      expect(team.subdomain).toEqual(subdomain);\n+      expect(team.previousSubdomains?.length).toEqual(1);\n+      expect(team.previousSubdomains?.[0]).toEqual(\"example\");\n+\n+      const subdomain2 = \"another\";\n+      await team.update({ subdomain: subdomain2 });\n+      expect(team.subdomain).toEqual(subdomain2);\n+      expect(team.previousSubdomains?.length).toEqual(2);\n+      expect(team.previousSubdomains?.[0]).toEqual(\"example\");\n+      expect(team.previousSubdomains?.[1]).toEqual(subdomain);\n     });\n-    const response = await team.collectionIds();\n-    expect(response.length).toEqual(1);\n-    expect(response[0]).toEqual(collection.id);\n   });\n });\n\ndiff --git a/server/models/TeamDomain.test.ts b/server/models/TeamDomain.test.ts\nindex b9c9b51e2694..41610a029596 100644\n--- a/server/models/TeamDomain.test.ts\n+++ b/server/models/TeamDomain.test.ts\n@@ -1,7 +1,7 @@\n import { buildAdmin, buildTeam } from \"@server/test/factories\";\n import TeamDomain from \"./TeamDomain\";\n \n-describe(\"team domain model\", () => {\n+describe(\"TeamDomain\", () => {\n   describe(\"create\", () => {\n     it(\"should allow creation of domains\", async () => {\n       const team = await buildTeam();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8472",
    "pr_id": 8472,
    "issue_id": 8457,
    "repo": "outline/outline",
    "problem_statement": "Copy pasting the content from some articles into outline does not get the images\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\nCopy pasting the content from some articles into outline does not get the images\n\n[https://ritvik19.medium.com/papers-explained-181-claude-89dd45e35d92](https://ritvik19.medium.com/papers-explained-181-claude-89dd45e35d92\n)\n\nTested on macos, not sure if this is a OS thing or something else. \nWhat i have tried is that If i paste the same content into google drive it will paste correctly, including images.\nSo the same clipboard content will output the images in google drive, so the content is in the clipboard.\n\n[https://docs.google.com/document/d/1sxKyAXq3dBhrPtB_Z0boCHYsDt-WhYq3V9aHvrlfSSY/edit?usp=sharing](https://docs.google.com/document/d/1sxKyAXq3dBhrPtB_Z0boCHYsDt-WhYq3V9aHvrlfSSY/edit?usp=sharing)\n\nWhile copy-pasting from this medium article into outline works including images\n\n[https://ritvik19.medium.com/papers-explained-199-cvt-fb4a5c05882e](https://ritvik19.medium.com/papers-explained-199-cvt-fb4a5c05882e\n)\n\nYou can see the text that is being outputted in app.getoutline.com here \nhttps://badita.getoutline.com/doc/copy-paste-does-not-work-for-some-links-IUS8UdS9vw)\n\n### Expected Behavior\n\nPaste the content with the images\n\n### Steps To Reproduce\n\nGo to [https://ritvik19.medium.com/papers-explained-181-claude-89dd45e35d92](https://ritvik19.medium.com/papers-explained-181-claude-89dd45e35d92\n)\nCopy the article content\nPaste it in getoutline\nThe images will not be present.\n\n### Environment\n\n```markdown\n- Outline: 0.82\n- Browser: Chrome on macos\n```\n\n### Anything else?\n\n_No response_",
    "issue_word_count": 257,
    "test_files_count": 1,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "app/editor/extensions/PasteHandler.tsx",
      "plugins/storage/server/api/files.test.ts",
      "plugins/storage/server/api/files.ts",
      "server/routes/api/attachments/attachments.ts",
      "server/storage/files/BaseStorage.ts",
      "server/utils/fetch.ts",
      "shared/editor/components/Caption.tsx"
    ],
    "pr_changed_test_files": [
      "plugins/storage/server/api/files.test.ts"
    ],
    "base_commit": "433c3b299d74273b7759b062e26d90d37b844f89",
    "head_commit": "8493b82aae156ce9e3295f6a6e78905d9d2a6659",
    "repo_url": "https://github.com/outline/outline/pull/8472",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8472",
    "dockerfile": "",
    "pr_merged_at": "2025-02-17T19:54:13.000Z",
    "patch": "diff --git a/app/editor/extensions/PasteHandler.tsx b/app/editor/extensions/PasteHandler.tsx\nindex e6a3323ca245..73c1c6340041 100644\n--- a/app/editor/extensions/PasteHandler.tsx\n+++ b/app/editor/extensions/PasteHandler.tsx\n@@ -25,52 +25,6 @@ import { isDocumentUrl, isUrl } from \"@shared/utils/urls\";\n import stores from \"~/stores\";\n import PasteMenu from \"../components/PasteMenu\";\n \n-/**\n- * Checks if the HTML string is likely coming from Dropbox Paper.\n- *\n- * @param html The HTML string to check.\n- * @returns True if the HTML string is likely coming from Dropbox Paper.\n- */\n-function isDropboxPaper(html: string): boolean {\n-  return html?.includes(\"usually-unique-id\");\n-}\n-\n-function sliceSingleNode(slice: Slice) {\n-  return slice.openStart === 0 &&\n-    slice.openEnd === 0 &&\n-    slice.content.childCount === 1\n-    ? slice.content.firstChild\n-    : null;\n-}\n-\n-/**\n- * Parses the text contents of an HTML string and returns the src of the first\n- * iframe if it exists.\n- *\n- * @param text The HTML string to parse.\n- * @returns The src of the first iframe if it exists, or undefined.\n- */\n-function parseSingleIframeSrc(html: string) {\n-  try {\n-    const parser = new DOMParser();\n-    const doc = parser.parseFromString(html, \"text/html\");\n-\n-    if (\n-      doc.body.children.length === 1 &&\n-      doc.body.firstElementChild?.tagName === \"IFRAME\"\n-    ) {\n-      const iframe = doc.body.firstElementChild;\n-      const src = iframe.getAttribute(\"src\");\n-      if (src) {\n-        return src;\n-      }\n-    }\n-  } catch (e) {\n-    // Ignore the million ways parsing could fail.\n-  }\n-  return undefined;\n-}\n-\n export default class PasteHandler extends Extension {\n   state: {\n     open: boolean;\n@@ -261,9 +215,12 @@ export default class PasteHandler extends Extension {\n             // If the text on the clipboard looks like Markdown OR there is no\n             // html on the clipboard then try to parse content as Markdown\n             if (\n-              (isMarkdown(text) && !isDropboxPaper(html)) ||\n+              (isMarkdown(text) &&\n+                !isDropboxPaper(html) &&\n+                !isContainingImage(html)) ||\n               pasteCodeLanguage === \"markdown\" ||\n-              this.shiftKey\n+              this.shiftKey ||\n+              !html\n             ) {\n               event.preventDefault();\n \n@@ -475,3 +432,59 @@ export default class PasteHandler extends Extension {\n     />\n   );\n }\n+\n+/**\n+ * Checks if the HTML string is likely coming from Dropbox Paper.\n+ *\n+ * @param html The HTML string to check.\n+ * @returns True if the HTML string is likely coming from Dropbox Paper.\n+ */\n+function isDropboxPaper(html: string): boolean {\n+  return html?.includes(\"usually-unique-id\");\n+}\n+\n+/**\n+ * Checks if the HTML string contains an image.\n+ *\n+ * @param html The HTML string to check.\n+ * @returns True if the HTML string contains an image.\n+ */\n+function isContainingImage(html: string): boolean {\n+  return html?.includes(\"<img\");\n+}\n+\n+function sliceSingleNode(slice: Slice) {\n+  return slice.openStart === 0 &&\n+    slice.openEnd === 0 &&\n+    slice.content.childCount === 1\n+    ? slice.content.firstChild\n+    : null;\n+}\n+\n+/**\n+ * Parses the text contents of an HTML string and returns the src of the first\n+ * iframe if it exists.\n+ *\n+ * @param text The HTML string to parse.\n+ * @returns The src of the first iframe if it exists, or undefined.\n+ */\n+function parseSingleIframeSrc(html: string) {\n+  try {\n+    const parser = new DOMParser();\n+    const doc = parser.parseFromString(html, \"text/html\");\n+\n+    if (\n+      doc.body.children.length === 1 &&\n+      doc.body.firstElementChild?.tagName === \"IFRAME\"\n+    ) {\n+      const iframe = doc.body.firstElementChild;\n+      const src = iframe.getAttribute(\"src\");\n+      if (src) {\n+        return src;\n+      }\n+    }\n+  } catch (e) {\n+    // Ignore the million ways parsing could fail.\n+  }\n+  return undefined;\n+}\n\ndiff --git a/plugins/storage/server/api/files.ts b/plugins/storage/server/api/files.ts\nindex 904f8c236eb6..98f29252e671 100644\n--- a/plugins/storage/server/api/files.ts\n+++ b/plugins/storage/server/api/files.ts\n@@ -77,19 +77,20 @@ router.get(\n     const { isPublicBucket, fileName } = AttachmentHelper.parseKey(key);\n     const skipAuthorize = isPublicBucket || isSignedRequest;\n     const cacheHeader = \"max-age=604800, immutable\";\n-    let contentType =\n-      (fileName ? mime.lookup(fileName) : undefined) ||\n-      \"application/octet-stream\";\n \n+    const attachment = await Attachment.findOne({\n+      where: { key },\n+      rejectOnEmpty: true,\n+    });\n     if (!skipAuthorize) {\n-      const attachment = await Attachment.findOne({\n-        where: { key },\n-        rejectOnEmpty: true,\n-      });\n       authorize(actor, \"read\", attachment);\n-      contentType = attachment.contentType;\n     }\n \n+    const contentType =\n+      attachment.contentType ||\n+      (fileName ? mime.lookup(fileName) : undefined) ||\n+      \"application/octet-stream\";\n+\n     ctx.set(\"Accept-Ranges\", \"bytes\");\n     ctx.set(\"Cache-Control\", cacheHeader);\n     ctx.set(\"Content-Type\", contentType);\n\ndiff --git a/server/routes/api/attachments/attachments.ts b/server/routes/api/attachments/attachments.ts\nindex d2288c2151d5..120052231bf9 100644\n--- a/server/routes/api/attachments/attachments.ts\n+++ b/server/routes/api/attachments/attachments.ts\n@@ -176,6 +176,8 @@ router.post(\n       throw InvalidRequestError(response.error);\n     }\n \n+    await attachment.reload();\n+\n     ctx.body = {\n       data: presentAttachment(attachment),\n     };\n\ndiff --git a/server/storage/files/BaseStorage.ts b/server/storage/files/BaseStorage.ts\nindex 339262cc568d..9c3850f4aa53 100644\n--- a/server/storage/files/BaseStorage.ts\n+++ b/server/storage/files/BaseStorage.ts\n@@ -1,10 +1,10 @@\n import { Blob } from \"buffer\";\n import { Readable } from \"stream\";\n import { PresignedPost } from \"@aws-sdk/s3-presigned-post\";\n-import { isBase64Url } from \"@shared/utils/urls\";\n+import { isBase64Url, isInternalUrl } from \"@shared/utils/urls\";\n import env from \"@server/env\";\n import Logger from \"@server/logging/Logger\";\n-import fetch, { RequestInit } from \"@server/utils/fetch\";\n+import fetch, { chromeUserAgent, RequestInit } from \"@server/utils/fetch\";\n \n export default abstract class BaseStorage {\n   /** The default number of seconds until a signed URL expires. */\n@@ -149,7 +149,7 @@ export default abstract class BaseStorage {\n     const endpoint = this.getUploadUrl(true);\n \n     // Early return if url is already uploaded to the storage provider\n-    if (url.startsWith(\"/api\") || url.startsWith(endpoint)) {\n+    if (url.startsWith(endpoint) || isInternalUrl(url)) {\n       return;\n     }\n \n@@ -168,6 +168,9 @@ export default abstract class BaseStorage {\n             options?.maxUploadSize ?? Infinity,\n             env.FILE_STORAGE_UPLOAD_MAX_SIZE\n           ),\n+          headers: {\n+            \"User-Agent\": chromeUserAgent,\n+          },\n           timeout: 10000,\n           ...init,\n         });\n\ndiff --git a/server/utils/fetch.ts b/server/utils/fetch.ts\nindex 2e712b40157b..19b4f1b5d7f6 100644\n--- a/server/utils/fetch.ts\n+++ b/server/utils/fetch.ts\n@@ -7,6 +7,13 @@ import Logger from \"@server/logging/Logger\";\n \n export type { RequestInit } from \"node-fetch\";\n \n+/**\n+ * Fake Chrome user agent string for use in fetch requests to\n+ * improve reliability.\n+ */\n+export const chromeUserAgent =\n+  \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36\";\n+\n /**\n  * Wrapper around fetch that uses the request-filtering-agent in cloud hosted\n  * environments to filter malicious requests, and the fetch-with-proxy library\n\ndiff --git a/shared/editor/components/Caption.tsx b/shared/editor/components/Caption.tsx\nindex 4550f1fcee6a..3a8c58065742 100644\n--- a/shared/editor/components/Caption.tsx\n+++ b/shared/editor/components/Caption.tsx\n@@ -71,6 +71,7 @@ const Content = styled.p<{ $width: number; $isSelected: boolean }>`\n   cursor: text;\n   width: ${(props) => props.$width}px;\n   min-width: 200px;\n+  max-width: 100%;\n \n   ${breakpoint(\"tablet\")`\n     font-size: 13px;\n",
    "test_patch": "diff --git a/plugins/storage/server/api/files.test.ts b/plugins/storage/server/api/files.test.ts\nindex 249e53cb612d..47da255d071e 100644\n--- a/plugins/storage/server/api/files.test.ts\n+++ b/plugins/storage/server/api/files.test.ts\n@@ -236,7 +236,16 @@ describe(\"#files.get\", () => {\n   it(\"should succeed with status 200 ok when file is requested using signature\", async () => {\n     const user = await buildUser();\n     const fileName = \"images.docx\";\n-    const key = path.join(\"uploads\", user.id, uuidV4(), fileName);\n+    const { key } = await buildAttachment(\n+      {\n+        teamId: user.teamId,\n+        userId: user.id,\n+        contentType:\n+          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n+        acl: \"private\",\n+      },\n+      fileName\n+    );\n     const signedUrl = await FileStorage.getSignedUrl(key);\n \n     ensureDirSync(\n@@ -262,6 +271,13 @@ describe(\"#files.get\", () => {\n   it(\"should succeed with status 200 ok when avatar is requested using key\", async () => {\n     const user = await buildUser();\n     const key = path.join(\"avatars\", user.id, uuidV4());\n+    await buildAttachment({\n+      key,\n+      teamId: user.teamId,\n+      userId: user.id,\n+      contentType: \"image/jpg\",\n+      acl: \"public-read\",\n+    });\n \n     ensureDirSync(\n       path.dirname(path.join(env.FILE_STORAGE_LOCAL_ROOT_DIR, key))\n@@ -274,7 +290,7 @@ describe(\"#files.get\", () => {\n \n     const res = await server.get(`/api/files.get?key=${key}`);\n     expect(res.status).toEqual(200);\n-    expect(res.headers.get(\"Content-Type\")).toEqual(\"application/octet-stream\");\n+    expect(res.headers.get(\"Content-Type\")).toEqual(\"image/jpg\");\n     expect(res.headers.get(\"Content-Disposition\")).toEqual(\"attachment\");\n   });\n });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8446",
    "pr_id": 8446,
    "issue_id": 8424,
    "repo": "outline/outline",
    "problem_statement": "Move document history sidebar to be driven by `revisions.list`\nAs discussed, `events.list` will no longer be a reliable source of information.",
    "issue_word_count": 13,
    "test_files_count": 1,
    "non_test_files_count": 14,
    "pr_changed_files": [
      "plugins/webhooks/server/tasks/CleanupWebhookDeliveriesTask.ts",
      "server/models/base/Model.test.ts",
      "server/models/base/Model.ts",
      "server/queues/tasks/BaseTask.ts",
      "server/queues/tasks/CleanupDeletedDocumentsTask.ts",
      "server/queues/tasks/CleanupDeletedTeamsTask.ts",
      "server/queues/tasks/CleanupExpiredAttachmentsTask.ts",
      "server/queues/tasks/CleanupExpiredFileOperationsTask.ts",
      "server/queues/tasks/CleanupOldEventsTask.ts",
      "server/queues/tasks/CleanupOldNotificationsTask.ts",
      "server/queues/tasks/ErrorTimedOutFileOperationsTask.ts",
      "server/queues/tasks/InviteReminderTask.ts",
      "server/queues/tasks/UpdateTeamsAttachmentsSizeTask.ts",
      "server/routes/api/cron/cron.ts",
      "server/services/cron.ts"
    ],
    "pr_changed_test_files": [
      "server/models/base/Model.test.ts"
    ],
    "base_commit": "6a633f5a4c915ce2ffbfa951ae02d3e77b3d4428",
    "head_commit": "431937aa3a5fd3d4b782e0fc91330260435f6806",
    "repo_url": "https://github.com/outline/outline/pull/8446",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8446",
    "dockerfile": "",
    "pr_merged_at": "2025-02-17T21:34:30.000Z",
    "patch": "diff --git a/plugins/webhooks/server/tasks/CleanupWebhookDeliveriesTask.ts b/plugins/webhooks/server/tasks/CleanupWebhookDeliveriesTask.ts\nindex 13f4cf741f95..46657afbd3e5 100644\n--- a/plugins/webhooks/server/tasks/CleanupWebhookDeliveriesTask.ts\n+++ b/plugins/webhooks/server/tasks/CleanupWebhookDeliveriesTask.ts\n@@ -10,7 +10,7 @@ import BaseTask, {\n type Props = Record<string, never>;\n \n export default class CleanupWebhookDeliveriesTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Day;\n \n   public async perform() {\n     Logger.info(\"task\", `Deleting WebhookDeliveries older than one week…`);\n\ndiff --git a/server/models/base/Model.ts b/server/models/base/Model.ts\nindex f47dffd14986..e27c416f8585 100644\n--- a/server/models/base/Model.ts\n+++ b/server/models/base/Model.ts\n@@ -282,7 +282,10 @@ class Model<\n    * @param callback The function to call for each batch of results\n    */\n   static async findAllInBatches<T extends Model>(\n-    query: Replace<FindOptions<T>, \"limit\", \"batchLimit\">,\n+    query: Replace<FindOptions<T>, \"limit\", \"batchLimit\"> & {\n+      /** The maximum number of results to return, after which the query will stop. */\n+      totalLimit?: number;\n+    },\n     callback: (results: Array<T>, query: FindOptions<T>) => Promise<void>\n   ) {\n     const mappedQuery = {\n@@ -298,7 +301,10 @@ class Model<\n       results = await this.findAll<T>(mappedQuery);\n       await callback(results, mappedQuery);\n       mappedQuery.offset += mappedQuery.limit;\n-    } while (results.length >= mappedQuery.limit);\n+    } while (\n+      results.length >= mappedQuery.limit &&\n+      (mappedQuery.totalLimit ?? Infinity) > mappedQuery.offset\n+    );\n   }\n \n   /**\n\ndiff --git a/server/queues/tasks/BaseTask.ts b/server/queues/tasks/BaseTask.ts\nindex 4bd34fd2f74d..e212d8373018 100644\n--- a/server/queues/tasks/BaseTask.ts\n+++ b/server/queues/tasks/BaseTask.ts\n@@ -9,8 +9,9 @@ export enum TaskPriority {\n }\n \n export enum TaskSchedule {\n-  Daily = \"daily\",\n-  Hourly = \"hourly\",\n+  Day = \"daily\",\n+  Hour = \"hourly\",\n+  Minute = \"minute\",\n }\n \n export default abstract class BaseTask<T extends Record<string, any>> {\n\ndiff --git a/server/queues/tasks/CleanupDeletedDocumentsTask.ts b/server/queues/tasks/CleanupDeletedDocumentsTask.ts\nindex 4c04095381c2..71646ba644cb 100644\n--- a/server/queues/tasks/CleanupDeletedDocumentsTask.ts\n+++ b/server/queues/tasks/CleanupDeletedDocumentsTask.ts\n@@ -10,7 +10,7 @@ type Props = {\n };\n \n export default class CleanupDeletedDocumentsTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Hour;\n \n   public async perform({ limit }: Props) {\n     Logger.info(\n\ndiff --git a/server/queues/tasks/CleanupDeletedTeamsTask.ts b/server/queues/tasks/CleanupDeletedTeamsTask.ts\nindex 403ee684db18..daaa9d4ab6e8 100644\n--- a/server/queues/tasks/CleanupDeletedTeamsTask.ts\n+++ b/server/queues/tasks/CleanupDeletedTeamsTask.ts\n@@ -10,7 +10,7 @@ type Props = {\n };\n \n export default class CleanupDeletedTeamsTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Hour;\n \n   public async perform({ limit }: Props) {\n     Logger.info(\n\ndiff --git a/server/queues/tasks/CleanupExpiredAttachmentsTask.ts b/server/queues/tasks/CleanupExpiredAttachmentsTask.ts\nindex a5596666d3f4..195f51172483 100644\n--- a/server/queues/tasks/CleanupExpiredAttachmentsTask.ts\n+++ b/server/queues/tasks/CleanupExpiredAttachmentsTask.ts\n@@ -8,7 +8,7 @@ type Props = {\n };\n \n export default class CleanupExpiredAttachmentsTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Hour;\n \n   public async perform({ limit }: Props) {\n     Logger.info(\"task\", `Deleting expired attachments…`);\n\ndiff --git a/server/queues/tasks/CleanupExpiredFileOperationsTask.ts b/server/queues/tasks/CleanupExpiredFileOperationsTask.ts\nindex 2a405d275adc..4e3e79b1fab4 100644\n--- a/server/queues/tasks/CleanupExpiredFileOperationsTask.ts\n+++ b/server/queues/tasks/CleanupExpiredFileOperationsTask.ts\n@@ -10,7 +10,7 @@ type Props = {\n };\n \n export default class CleanupExpiredFileOperationsTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Hour;\n \n   public async perform({ limit }: Props) {\n     Logger.info(\"task\", `Expiring file operations older than 15 days…`);\n\ndiff --git a/server/queues/tasks/CleanupOldEventsTask.ts b/server/queues/tasks/CleanupOldEventsTask.ts\nnew file mode 100644\nindex 000000000000..6d1189f7e472\n--- /dev/null\n+++ b/server/queues/tasks/CleanupOldEventsTask.ts\n@@ -0,0 +1,60 @@\n+import { subDays } from \"date-fns\";\n+import { Op } from \"sequelize\";\n+import Logger from \"@server/logging/Logger\";\n+import { Event } from \"@server/models\";\n+import BaseTask, {\n+  TaskPriority,\n+  TaskSchedule,\n+} from \"@server/queues/tasks/BaseTask\";\n+\n+type Props = Record<string, never>;\n+\n+export default class CleanupOldEventsTask extends BaseTask<Props> {\n+  static cron = TaskSchedule.Hour;\n+\n+  public async perform() {\n+    // TODO: Hardcoded right now, configurable later\n+    const retentionDays = 365;\n+    const cutoffDate = subDays(new Date(), retentionDays);\n+    const maxEventsPerTask = 100000;\n+    let totalEventsDeleted = 0;\n+\n+    try {\n+      await Event.findAllInBatches(\n+        {\n+          attributes: [\"id\"],\n+          where: {\n+            createdAt: {\n+              [Op.lt]: cutoffDate,\n+            },\n+          },\n+          batchLimit: 1000,\n+          totalLimit: maxEventsPerTask,\n+          order: [[\"createdAt\", \"ASC\"]],\n+        },\n+        async (events) => {\n+          totalEventsDeleted += await Event.destroy({\n+            where: {\n+              id: {\n+                [Op.in]: events.map((event) => event.id),\n+              },\n+            },\n+          });\n+        }\n+      );\n+    } finally {\n+      if (totalEventsDeleted > 0) {\n+        Logger.info(\"task\", `Deleted old events`, {\n+          totalEventsDeleted,\n+        });\n+      }\n+    }\n+  }\n+\n+  public get options() {\n+    return {\n+      attempts: 1,\n+      priority: TaskPriority.Background,\n+    };\n+  }\n+}\n\ndiff --git a/server/queues/tasks/CleanupOldNotificationsTask.ts b/server/queues/tasks/CleanupOldNotificationsTask.ts\nindex 752f73de666d..5a4624f528b3 100644\n--- a/server/queues/tasks/CleanupOldNotificationsTask.ts\n+++ b/server/queues/tasks/CleanupOldNotificationsTask.ts\n@@ -7,7 +7,7 @@ import BaseTask, { TaskPriority, TaskSchedule } from \"./BaseTask\";\n type Props = Record<string, never>;\n \n export default class CleanupOldNotificationsTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Hour;\n \n   public async perform() {\n     Logger.info(\"task\", `Permanently destroying old notifications…`);\n\ndiff --git a/server/queues/tasks/ErrorTimedOutFileOperationsTask.ts b/server/queues/tasks/ErrorTimedOutFileOperationsTask.ts\nindex bc5f44eb4e6b..c5e99e33c004 100644\n--- a/server/queues/tasks/ErrorTimedOutFileOperationsTask.ts\n+++ b/server/queues/tasks/ErrorTimedOutFileOperationsTask.ts\n@@ -10,7 +10,7 @@ type Props = {\n };\n \n export default class ErrorTimedOutFileOperationsTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Hour;\n \n   public async perform({ limit }: Props) {\n     Logger.info(\"task\", `Error file operations running longer than 12 hours…`);\n\ndiff --git a/server/queues/tasks/InviteReminderTask.ts b/server/queues/tasks/InviteReminderTask.ts\nindex 3e1d238d319d..be559c777fae 100644\n--- a/server/queues/tasks/InviteReminderTask.ts\n+++ b/server/queues/tasks/InviteReminderTask.ts\n@@ -9,7 +9,7 @@ import BaseTask, { TaskPriority, TaskSchedule } from \"./BaseTask\";\n type Props = Record<string, never>;\n \n export default class InviteReminderTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Day;\n \n   public async perform() {\n     const users = await User.scope(\"invited\").findAll({\n\ndiff --git a/server/queues/tasks/UpdateTeamsAttachmentsSizeTask.ts b/server/queues/tasks/UpdateTeamsAttachmentsSizeTask.ts\nindex 433a0835a724..48c7055033fd 100644\n--- a/server/queues/tasks/UpdateTeamsAttachmentsSizeTask.ts\n+++ b/server/queues/tasks/UpdateTeamsAttachmentsSizeTask.ts\n@@ -11,7 +11,7 @@ type Props = {\n };\n \n export default class UpdateTeamsAttachmentsSizeTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Day;\n \n   public async perform({ limit }: Props) {\n     Logger.info(\n\ndiff --git a/server/routes/api/cron/cron.ts b/server/routes/api/cron/cron.ts\nindex 88bb10fede65..7b4f5f9fd9fc 100644\n--- a/server/routes/api/cron/cron.ts\n+++ b/server/routes/api/cron/cron.ts\n@@ -3,13 +3,20 @@ import env from \"@server/env\";\n import { AuthenticationError } from \"@server/errors\";\n import validate from \"@server/middlewares/validate\";\n import tasks from \"@server/queues/tasks\";\n+import { TaskSchedule } from \"@server/queues/tasks/BaseTask\";\n import { APIContext } from \"@server/types\";\n import { safeEqual } from \"@server/utils/crypto\";\n import * as T from \"./schema\";\n \n const router = new Router();\n \n+/** Whether the minutely cron job has been received */\n+const receivedPeriods = new Set<TaskSchedule>();\n+\n const cronHandler = async (ctx: APIContext<T.CronSchemaReq>) => {\n+  const period = Object.keys(TaskSchedule).includes(ctx.params.period)\n+    ? (ctx.params.period as TaskSchedule)\n+    : TaskSchedule.Day;\n   const token = (ctx.input.body.token ?? ctx.input.query.token) as string;\n   const limit = ctx.input.body.limit ?? ctx.input.query.limit;\n \n@@ -17,9 +24,26 @@ const cronHandler = async (ctx: APIContext<T.CronSchemaReq>) => {\n     throw AuthenticationError(\"Invalid secret token\");\n   }\n \n+  receivedPeriods.add(period);\n+\n   for (const name in tasks) {\n     const TaskClass = tasks[name];\n-    if (TaskClass.cron) {\n+    if (TaskClass.cron === period) {\n+      await TaskClass.schedule({ limit });\n+\n+      // Backwards compatibility for installations that have not set up\n+      // cron jobs periods other than daily.\n+    } else if (\n+      TaskClass.cron === TaskSchedule.Minute &&\n+      !receivedPeriods.has(TaskSchedule.Minute) &&\n+      (period === TaskSchedule.Hour || period === TaskSchedule.Day)\n+    ) {\n+      await TaskClass.schedule({ limit });\n+    } else if (\n+      TaskClass.cron === TaskSchedule.Hour &&\n+      !receivedPeriods.has(TaskSchedule.Hour) &&\n+      period === TaskSchedule.Day\n+    ) {\n       await TaskClass.schedule({ limit });\n     }\n   }\n\ndiff --git a/server/services/cron.ts b/server/services/cron.ts\nindex 32e460f80148..cd418ea1590b 100644\n--- a/server/services/cron.ts\n+++ b/server/services/cron.ts\n@@ -1,4 +1,4 @@\n-import { Day, Hour, Second } from \"@shared/utils/time\";\n+import { Day, Hour, Minute, Second } from \"@shared/utils/time\";\n import tasks from \"@server/queues/tasks\";\n import { TaskSchedule } from \"@server/queues/tasks/BaseTask\";\n \n@@ -12,13 +12,15 @@ export default function init() {\n     }\n   }\n \n-  setInterval(() => void run(TaskSchedule.Daily), Day.ms);\n-  setInterval(() => void run(TaskSchedule.Hourly), Hour.ms);\n+  setInterval(() => void run(TaskSchedule.Day), Day.ms);\n+  setInterval(() => void run(TaskSchedule.Hour), Hour.ms);\n+  setInterval(() => void run(TaskSchedule.Minute), Minute.ms);\n \n   // Just give everything time to startup before running the first time. Not\n   // _technically_ required to function.\n   setTimeout(() => {\n-    void run(TaskSchedule.Daily);\n-    void run(TaskSchedule.Hourly);\n-  }, 30 * Second.ms);\n+    void run(TaskSchedule.Day);\n+    void run(TaskSchedule.Hour);\n+    void run(TaskSchedule.Minute);\n+  }, 5 * Second.ms);\n }\n",
    "test_patch": "diff --git a/server/models/base/Model.test.ts b/server/models/base/Model.test.ts\nindex acbdd1ba83fb..884e9f88b82c 100644\n--- a/server/models/base/Model.test.ts\n+++ b/server/models/base/Model.test.ts\n@@ -74,5 +74,27 @@ describe(\"Model\", () => {\n       expect(usersBatch[0].length).toEqual(100);\n       expect(usersBatch[1].length).toEqual(5);\n     });\n+\n+    it(\"should return data in batches with total limit\", async () => {\n+      const team = await buildTeam();\n+      await User.bulkCreate(\n+        [...Array(10)].map(() => ({\n+          email: faker.internet.email().toLowerCase(),\n+          name: faker.person.fullName(),\n+          teamId: team.id,\n+        }))\n+      );\n+\n+      const usersBatch: User[][] = [];\n+\n+      await User.findAllInBatches<User>(\n+        { where: { teamId: team.id }, batchLimit: 2, totalLimit: 4 },\n+        async (foundUsers) => void usersBatch.push(foundUsers)\n+      );\n+\n+      expect(usersBatch.length).toEqual(2);\n+      expect(usersBatch[0].length).toEqual(2);\n+      expect(usersBatch[1].length).toEqual(2);\n+    });\n   });\n });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8368",
    "pr_id": 8368,
    "issue_id": 7340,
    "repo": "outline/outline",
    "problem_statement": "Subscribe to receive notifications for a whole collection\n### Discussed in https://github.com/outline/outline/discussions/7339\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **phoegon** August  2, 2024</sup>\r\nI would like to subscribe to all pages in a collection, so I can receive notifications about all changes in a collection. This subscription should also extend to all pages created after I subscribe to the collection.</div>",
    "issue_word_count": 61,
    "test_files_count": 1,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "app/actions/definitions/documents.tsx",
      "app/menus/DocumentMenu.tsx",
      "app/models/Document.ts",
      "app/stores/DocumentsStore.ts",
      "app/stores/SubscriptionsStore.ts",
      "server/routes/api/subscriptions/subscriptions.test.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/subscriptions/subscriptions.test.ts"
    ],
    "base_commit": "2edd48ab842000a1e51d12ab7f8d63ab3e492e68",
    "head_commit": "61a7d38b45960aefb2a167ed1719a87acffad7b4",
    "repo_url": "https://github.com/outline/outline/pull/8368",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8368",
    "dockerfile": "",
    "pr_merged_at": "2025-02-11T02:32:51.000Z",
    "patch": "diff --git a/app/actions/definitions/documents.tsx b/app/actions/definitions/documents.tsx\nindex 2b26305f01a5..5fc799518362 100644\n--- a/app/actions/definitions/documents.tsx\n+++ b/app/actions/definitions/documents.tsx\n@@ -358,7 +358,7 @@ export const unsubscribeDocument = createAction({\n \n     const document = stores.documents.get(activeDocumentId);\n \n-    await document?.unsubscribe(currentUserId);\n+    await document?.unsubscribe();\n \n     toast.success(t(\"Unsubscribed from document notifications\"));\n   },\n\ndiff --git a/app/menus/DocumentMenu.tsx b/app/menus/DocumentMenu.tsx\nindex f4022b83ce23..b992745a2234 100644\n--- a/app/menus/DocumentMenu.tsx\n+++ b/app/menus/DocumentMenu.tsx\n@@ -96,7 +96,7 @@ const MenuTrigger: React.FC<MenuTriggerProps> = ({ label, onTrigger }) => {\n   const { model: document, menuState } = useMenuContext<Document>();\n \n   const { data, loading, error, request } = useRequest(() =>\n-    subscriptions.fetchPage({\n+    subscriptions.fetchOne({\n       documentId: document.id,\n       event: \"documents.update\",\n     })\n\ndiff --git a/app/models/Document.ts b/app/models/Document.ts\nindex 807ea76f493c..a77d1578c1b0 100644\n--- a/app/models/Document.ts\n+++ b/app/models/Document.ts\n@@ -307,9 +307,7 @@ export default class Document extends ArchivableModel implements Searchable {\n    */\n   @computed\n   get isSubscribed(): boolean {\n-    return !!this.store.rootStore.subscriptions.orderedData.find(\n-      (subscription) => subscription.documentId === this.id\n-    );\n+    return !!this.store.rootStore.subscriptions.getByDocumentId(this.id);\n   }\n \n   /**\n@@ -501,7 +499,7 @@ export default class Document extends ArchivableModel implements Searchable {\n    * @returns A promise that resolves when the subscription is destroyed.\n    */\n   @action\n-  unsubscribe = (userId: string) => this.store.unsubscribe(userId, this);\n+  unsubscribe = () => this.store.unsubscribe(this);\n \n   @action\n   view = () => {\n\ndiff --git a/app/stores/DocumentsStore.ts b/app/stores/DocumentsStore.ts\nindex 2c71e71f9896..fec4a1f3173d 100644\n--- a/app/stores/DocumentsStore.ts\n+++ b/app/stores/DocumentsStore.ts\n@@ -816,9 +816,9 @@ export default class DocumentsStore extends Store<Document> {\n       event: \"documents.update\",\n     });\n \n-  unsubscribe = (userId: string, document: Document) => {\n-    const subscription = this.rootStore.subscriptions.orderedData.find(\n-      (s) => s.documentId === document.id && s.userId === userId\n+  unsubscribe = (document: Document) => {\n+    const subscription = this.rootStore.subscriptions.getByDocumentId(\n+      document.id\n     );\n \n     return subscription?.delete();\n\ndiff --git a/app/stores/SubscriptionsStore.ts b/app/stores/SubscriptionsStore.ts\nindex fd9a70077902..cc2867a93861 100644\n--- a/app/stores/SubscriptionsStore.ts\n+++ b/app/stores/SubscriptionsStore.ts\n@@ -1,4 +1,8 @@\n+import invariant from \"invariant\";\n+import { action } from \"mobx\";\n import Subscription from \"~/models/Subscription\";\n+import { client } from \"~/utils/ApiClient\";\n+import { AuthorizationError, NotFoundError } from \"~/utils/errors\";\n import RootStore from \"./RootStore\";\n import Store, { RPCAction } from \"./base/Store\";\n \n@@ -8,4 +12,34 @@ export default class SubscriptionsStore extends Store<Subscription> {\n   constructor(rootStore: RootStore) {\n     super(rootStore, Subscription);\n   }\n+\n+  @action\n+  async fetchOne({ documentId, event }: { documentId: string; event: string }) {\n+    const subscription = this.getByDocumentId(documentId);\n+\n+    if (subscription) {\n+      return subscription;\n+    }\n+\n+    this.isFetching = true;\n+\n+    try {\n+      const res = await client.post(`/${this.apiEndpoint}.info`, {\n+        documentId,\n+        event,\n+      });\n+      invariant(res?.data, \"Data should be available\");\n+      return this.add(res.data);\n+    } catch (err) {\n+      if (err instanceof AuthorizationError || err instanceof NotFoundError) {\n+        return;\n+      }\n+      throw err;\n+    } finally {\n+      this.isFetching = false;\n+    }\n+  }\n+\n+  getByDocumentId = (documentId: string): Subscription | undefined =>\n+    this.find({ documentId });\n }\n",
    "test_patch": "diff --git a/server/routes/api/subscriptions/subscriptions.test.ts b/server/routes/api/subscriptions/subscriptions.test.ts\nindex ec07da330f82..f8caf23e8d14 100644\n--- a/server/routes/api/subscriptions/subscriptions.test.ts\n+++ b/server/routes/api/subscriptions/subscriptions.test.ts\n@@ -202,6 +202,25 @@ describe(\"#subscriptions.info\", () => {\n     expect(response0.data.documentId).toEqual(document0.id);\n   });\n \n+  it(\"should throw 404 if no subscription found\", async () => {\n+    const author = await buildUser();\n+    const subscriber = await buildUser({ teamId: author.teamId });\n+    const document = await buildDocument({\n+      userId: author.id,\n+      teamId: author.teamId,\n+    });\n+\n+    const res = await server.post(\"/api/subscriptions.info\", {\n+      body: {\n+        token: subscriber.getJwtToken(),\n+        documentId: document.id,\n+        event: \"documents.update\",\n+      },\n+    });\n+\n+    expect(res.status).toEqual(404);\n+  });\n+\n   it(\"should not allow outsiders to gain info about a subscription\", async () => {\n     const creator = await buildUser();\n     const subscriber = await buildUser({ teamId: creator.teamId });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8345",
    "pr_id": 8345,
    "issue_id": 8344,
    "repo": "outline/outline",
    "problem_statement": "Flaky API test\nhttps://app.circleci.com/pipelines/github/outline/outline/21607/workflows/e963a6ad-092b-46da-ae84-3f14f7d164be/jobs/66408",
    "issue_word_count": 17,
    "test_files_count": 1,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "server/commands/subscriptionCreator.test.ts"
    ],
    "pr_changed_test_files": [
      "server/commands/subscriptionCreator.test.ts"
    ],
    "base_commit": "aca6f55ea046a89c97350716de50949c470678a6",
    "head_commit": "6abc58df16580c477744a62ee26a14245d87272d",
    "repo_url": "https://github.com/outline/outline/pull/8345",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8345",
    "dockerfile": "",
    "pr_merged_at": "2025-02-06T23:22:24.000Z",
    "patch": "",
    "test_patch": "diff --git a/server/commands/subscriptionCreator.test.ts b/server/commands/subscriptionCreator.test.ts\nindex 9799f288a2d9..520b8de6cb69 100644\n--- a/server/commands/subscriptionCreator.test.ts\n+++ b/server/commands/subscriptionCreator.test.ts\n@@ -210,6 +210,7 @@ describe(\"subscriptionCreator\", () => {\n       where: {\n         teamId: user.teamId,\n       },\n+      order: [[\"createdAt\", \"ASC\"]],\n     });\n     expect(events.length).toEqual(3);\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8301",
    "pr_id": 8301,
    "issue_id": 5713,
    "repo": "outline/outline",
    "problem_statement": "Upload remote images to storage when pasting content into editor\n- During paste detect remote image urls\r\n- Kick off upload async\r\n- Replace urls in attributes when upload completes asyncronously\r\n\r\n### Discussed in https://github.com/outline/outline/discussions/5069\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **WarlockFish** March 19, 2023</sup>\r\n Sometimes, the articles are very good, and I want to import them into the outline. I can use the \"[Web Clipper](https://github.com/webclipper/web-clipper)\"  to quickly save text    to markdown file  and import the outline, but images cannot be quickly imported. Is there any way to quickly import text and images </div>",
    "issue_word_count": 96,
    "test_files_count": 1,
    "non_test_files_count": 17,
    "pr_changed_files": [
      "app/components/Editor.tsx",
      "app/utils/files.ts",
      "plugins/webhooks/server/tasks/DeliverWebhookTask.ts",
      "server/queues/tasks/UploadAttachmentFromUrlTask.ts",
      "server/routes/api/attachments/attachments.ts",
      "server/routes/api/attachments/schema.ts",
      "server/storage/files/BaseStorage.ts",
      "server/types.ts",
      "shared/editor/commands/createAndInsertLink.ts",
      "shared/editor/commands/insertFiles.ts",
      "shared/editor/extensions/Mermaid.ts",
      "shared/editor/lib/FileHelper.ts",
      "shared/editor/plugins/UploadPlugin.ts",
      "shared/editor/queries/findChildren.ts",
      "shared/editor/queries/findCollapsedNodes.ts",
      "shared/editor/types/index.ts",
      "shared/utils/files.test.ts",
      "shared/utils/files.ts"
    ],
    "pr_changed_test_files": [
      "shared/utils/files.test.ts"
    ],
    "base_commit": "5b11a0cc161e0f7bc3e86ee96f24d6b461f6bdb0",
    "head_commit": "6d9da8d5a0e586172ee980e05bbc39172d41179b",
    "repo_url": "https://github.com/outline/outline/pull/8301",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8301",
    "dockerfile": "",
    "pr_merged_at": "2025-01-31T01:24:08.000Z",
    "patch": "diff --git a/app/components/Editor.tsx b/app/components/Editor.tsx\nindex 6e7151fe28f5..4080fe44975f 100644\n--- a/app/components/Editor.tsx\n+++ b/app/components/Editor.tsx\n@@ -17,7 +17,7 @@ import useDictionary from \"~/hooks/useDictionary\";\n import useEditorClickHandlers from \"~/hooks/useEditorClickHandlers\";\n import useEmbeds from \"~/hooks/useEmbeds\";\n import useStores from \"~/hooks/useStores\";\n-import { uploadFile } from \"~/utils/files\";\n+import { uploadFile, uploadFileFromUrl } from \"~/utils/files\";\n import lazyWithRetry from \"~/utils/lazyWithRetry\";\n \n const LazyLoadedEditor = lazyWithRetry(() => import(\"~/editor\"));\n@@ -49,11 +49,15 @@ function Editor(props: Props, ref: React.RefObject<SharedEditor> | null) {\n   const previousCommentIds = React.useRef<string[]>();\n \n   const handleUploadFile = React.useCallback(\n-    async (file: File) => {\n-      const result = await uploadFile(file, {\n+    async (file: File | string) => {\n+      const options = {\n         documentId: id,\n         preset: AttachmentPreset.DocumentAttachment,\n-      });\n+      };\n+      const result =\n+        file instanceof File\n+          ? await uploadFile(file, options)\n+          : await uploadFileFromUrl(file, options);\n       return result.url;\n     },\n     [id]\n\ndiff --git a/app/utils/files.ts b/app/utils/files.ts\nindex 6607a6b12dee..16b66a2c43f7 100644\n--- a/app/utils/files.ts\n+++ b/app/utils/files.ts\n@@ -14,6 +14,31 @@ type UploadOptions = {\n   onProgress?: (fractionComplete: number) => void;\n };\n \n+/**\n+ * Upload a file from a URL\n+ *\n+ * @param url The remote URL to download the file from\n+ * @param options The upload options\n+ * @returns The attachment object\n+ */\n+export const uploadFileFromUrl = async (\n+  url: string,\n+  options: UploadOptions\n+) => {\n+  const response = await client.post(\"/attachments.createFromUrl\", {\n+    documentId: options.documentId,\n+    url,\n+  });\n+  return response.data;\n+};\n+\n+/**\n+ * Upload a file\n+ *\n+ * @param file The file to upload\n+ * @param options The upload options\n+ * @returns The attachment object\n+ */\n export const uploadFile = async (\n   file: File | Blob,\n   options: UploadOptions = {\n@@ -74,6 +99,12 @@ export const uploadFile = async (\n   return attachment;\n };\n \n+/**\n+ * Convert a data URL to a Blob\n+ *\n+ * @param dataURL The data URL to convert\n+ * @returns The Blob\n+ */\n export const dataUrlToBlob = (dataURL: string) => {\n   const blobBin = atob(dataURL.split(\",\")[1]);\n   const array = [];\n\ndiff --git a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\nindex 6e78f182a71b..23f6df14c0c8 100644\n--- a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n+++ b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n@@ -102,6 +102,7 @@ export default class DeliverWebhookTask extends BaseTask<Props> {\n       case \"api_keys.create\":\n       case \"api_keys.delete\":\n       case \"attachments.create\":\n+      case \"attachments.update\":\n       case \"attachments.delete\":\n       case \"subscriptions.create\":\n       case \"subscriptions.delete\":\n\ndiff --git a/server/queues/tasks/UploadAttachmentFromUrlTask.ts b/server/queues/tasks/UploadAttachmentFromUrlTask.ts\nnew file mode 100644\nindex 000000000000..3cfbf0f82a8f\n--- /dev/null\n+++ b/server/queues/tasks/UploadAttachmentFromUrlTask.ts\n@@ -0,0 +1,51 @@\n+import { createContext } from \"@server/context\";\n+import { Attachment } from \"@server/models\";\n+import FileStorage from \"@server/storage/files\";\n+import BaseTask, { TaskPriority } from \"./BaseTask\";\n+\n+type Props = {\n+  /** The ID of the attachment */\n+  attachmentId: string;\n+  /** The remote URL to upload */\n+  url: string;\n+};\n+\n+/**\n+ * A task that uploads the provided url to a known attachment.\n+ */\n+export default class UploadAttachmentFromUrlTask extends BaseTask<Props> {\n+  public async perform(props: Props) {\n+    const attachment = await Attachment.findByPk(props.attachmentId, {\n+      rejectOnEmpty: true,\n+      include: [{ association: \"user\" }],\n+    });\n+\n+    try {\n+      const res = await FileStorage.storeFromUrl(\n+        props.url,\n+        attachment.key,\n+        attachment.acl\n+      );\n+\n+      if (res?.url) {\n+        const ctx = createContext({ user: attachment.user });\n+        await attachment.updateWithCtx(ctx, {\n+          url: res.url,\n+          size: res.contentLength,\n+          contentType: res.contentType,\n+        });\n+      }\n+    } catch (err) {\n+      return { error: err.message };\n+    }\n+\n+    return {};\n+  }\n+\n+  public get options() {\n+    return {\n+      attempts: 3,\n+      priority: TaskPriority.Normal,\n+    };\n+  }\n+}\n\ndiff --git a/server/routes/api/attachments/attachments.ts b/server/routes/api/attachments/attachments.ts\nindex c978edba20ed..d2288c2151d5 100644\n--- a/server/routes/api/attachments/attachments.ts\n+++ b/server/routes/api/attachments/attachments.ts\n@@ -1,9 +1,14 @@\n import Router from \"koa-router\";\n import { v4 as uuidv4 } from \"uuid\";\n import { AttachmentPreset } from \"@shared/types\";\n-import { bytesToHumanReadable } from \"@shared/utils/files\";\n+import { bytesToHumanReadable, getFileNameFromUrl } from \"@shared/utils/files\";\n import { AttachmentValidation } from \"@shared/validations\";\n-import { AuthorizationError, ValidationError } from \"@server/errors\";\n+import { createContext } from \"@server/context\";\n+import {\n+  AuthorizationError,\n+  InvalidRequestError,\n+  ValidationError,\n+} from \"@server/errors\";\n import auth from \"@server/middlewares/authentication\";\n import { rateLimiter } from \"@server/middlewares/rateLimiter\";\n import { transaction } from \"@server/middlewares/transaction\";\n@@ -12,6 +17,8 @@ import { Attachment, Document } from \"@server/models\";\n import AttachmentHelper from \"@server/models/helpers/AttachmentHelper\";\n import { authorize } from \"@server/policies\";\n import { presentAttachment } from \"@server/presenters\";\n+import UploadAttachmentFromUrlTask from \"@server/queues/tasks/UploadAttachmentFromUrlTask\";\n+import { sequelize } from \"@server/storage/database\";\n import FileStorage from \"@server/storage/files\";\n import BaseStorage from \"@server/storage/files/BaseStorage\";\n import { APIContext } from \"@server/types\";\n@@ -105,6 +112,76 @@ router.post(\n   }\n );\n \n+router.post(\n+  \"attachments.createFromUrl\",\n+  rateLimiter(RateLimiterStrategy.TwentyFivePerMinute),\n+  auth(),\n+  validate(T.AttachmentsCreateFromUrlSchema),\n+  async (ctx: APIContext<T.AttachmentCreateFromUrlReq>) => {\n+    const { url, documentId, preset } = ctx.input.body;\n+    const { user, type } = ctx.state.auth;\n+\n+    if (preset !== AttachmentPreset.DocumentAttachment || !documentId) {\n+      throw ValidationError(\n+        \"Only document attachments can be created from a URL\"\n+      );\n+    }\n+\n+    const document = await Document.findByPk(documentId, {\n+      userId: user.id,\n+    });\n+    authorize(user, \"update\", document);\n+\n+    const name = getFileNameFromUrl(url) ?? \"file\";\n+    const modelId = uuidv4();\n+    const acl = AttachmentHelper.presetToAcl(preset);\n+    const key = AttachmentHelper.getKey({\n+      acl,\n+      id: modelId,\n+      name,\n+      userId: user.id,\n+    });\n+\n+    // Does not use transaction middleware, as attachment must be persisted\n+    // before the job is scheduled.\n+    const attachment = await sequelize.transaction(async (transaction) =>\n+      Attachment.createWithCtx(\n+        createContext({\n+          authType: type,\n+          user,\n+          ip: ctx.ip,\n+          transaction,\n+        }),\n+        {\n+          id: modelId,\n+          key,\n+          acl,\n+          size: 0,\n+          expiresAt: AttachmentHelper.presetToExpiry(preset),\n+          contentType: \"application/octet-stream\",\n+          documentId,\n+          teamId: user.teamId,\n+          userId: user.id,\n+        }\n+      )\n+    );\n+\n+    const job = await UploadAttachmentFromUrlTask.schedule({\n+      attachmentId: attachment.id,\n+      url,\n+    });\n+\n+    const response = await job.finished();\n+    if (\"error\" in response) {\n+      throw InvalidRequestError(response.error);\n+    }\n+\n+    ctx.body = {\n+      data: presentAttachment(attachment),\n+    };\n+  }\n+);\n+\n router.post(\n   \"attachments.delete\",\n   auth(),\n\ndiff --git a/server/routes/api/attachments/schema.ts b/server/routes/api/attachments/schema.ts\nindex c01c20699d36..86a432a6eece 100644\n--- a/server/routes/api/attachments/schema.ts\n+++ b/server/routes/api/attachments/schema.ts\n@@ -26,6 +26,25 @@ export const AttachmentsCreateSchema = BaseSchema.extend({\n \n export type AttachmentCreateReq = z.infer<typeof AttachmentsCreateSchema>;\n \n+export const AttachmentsCreateFromUrlSchema = BaseSchema.extend({\n+  body: z.object({\n+    /** Attachment url */\n+    url: z.string(),\n+\n+    /** Id of the document to which the Attachment belongs */\n+    documentId: z.string().uuid().optional(),\n+\n+    /** Attachment type */\n+    preset: z\n+      .nativeEnum(AttachmentPreset)\n+      .default(AttachmentPreset.DocumentAttachment),\n+  }),\n+});\n+\n+export type AttachmentCreateFromUrlReq = z.infer<\n+  typeof AttachmentsCreateFromUrlSchema\n+>;\n+\n export const AttachmentDeleteSchema = BaseSchema.extend({\n   body: z.object({\n     /** Id of the attachment to be deleted */\n\ndiff --git a/server/storage/files/BaseStorage.ts b/server/storage/files/BaseStorage.ts\nindex ce0287ebc7e7..339262cc568d 100644\n--- a/server/storage/files/BaseStorage.ts\n+++ b/server/storage/files/BaseStorage.ts\n@@ -129,13 +129,15 @@ export default abstract class BaseStorage {\n    * @param key The path to store the file at\n    * @param acl The ACL to use\n    * @param init Optional fetch options to use\n+   * @param options Optional upload options\n    * @returns A promise that resolves when the file is uploaded\n    */\n   public async storeFromUrl(\n     url: string,\n     key: string,\n     acl: string,\n-    init?: RequestInit\n+    init?: RequestInit,\n+    options?: { maxUploadSize?: number }\n   ): Promise<\n     | {\n         url: string;\n@@ -162,7 +164,10 @@ export default abstract class BaseStorage {\n         const res = await fetch(url, {\n           follow: 3,\n           redirect: \"follow\",\n-          size: env.FILE_STORAGE_UPLOAD_MAX_SIZE,\n+          size: Math.min(\n+            options?.maxUploadSize ?? Infinity,\n+            env.FILE_STORAGE_UPLOAD_MAX_SIZE\n+          ),\n           timeout: 10000,\n           ...init,\n         });\n\ndiff --git a/server/types.ts b/server/types.ts\nindex c0268975c763..7beda287b663 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -117,6 +117,10 @@ export type AttachmentEvent = BaseEvent<Attachment> &\n           source?: \"import\";\n         };\n       }\n+    | {\n+        name: \"attachments.update\";\n+        modelId: string;\n+      }\n     | {\n         name: \"attachments.delete\";\n         modelId: string;\n\ndiff --git a/shared/editor/commands/createAndInsertLink.ts b/shared/editor/commands/createAndInsertLink.ts\ndeleted file mode 100644\nindex fa62326ec1c7..000000000000\n--- a/shared/editor/commands/createAndInsertLink.ts\n+++ /dev/null\n@@ -1,88 +0,0 @@\n-import { Node } from \"prosemirror-model\";\n-import { EditorView } from \"prosemirror-view\";\n-import { toast } from \"sonner\";\n-import type { Dictionary } from \"~/hooks/useDictionary\";\n-\n-function findPlaceholderLink(doc: Node, href: string) {\n-  let result: { pos: number; node: Node } | undefined;\n-\n-  doc.descendants((node: Node, pos = 0) => {\n-    // get text nodes\n-    if (node.type.name === \"text\") {\n-      // get marks for text nodes\n-      node.marks.forEach((mark) => {\n-        // any of the marks links?\n-        if (mark.type.name === \"link\") {\n-          // any of the links to other docs?\n-          if (mark.attrs.href === href) {\n-            result = { node, pos };\n-          }\n-        }\n-      });\n-\n-      return false;\n-    }\n-\n-    if (!node.content.size) {\n-      return false;\n-    }\n-\n-    return true;\n-  });\n-\n-  return result;\n-}\n-\n-const createAndInsertLink = async function (\n-  view: EditorView,\n-  title: string,\n-  href: string,\n-  options: {\n-    dictionary: Dictionary;\n-    nested?: boolean;\n-    onCreateLink: (title: string, nested?: boolean) => Promise<string>;\n-  }\n-) {\n-  const { dispatch, state } = view;\n-  const { onCreateLink } = options;\n-\n-  try {\n-    const url = await onCreateLink(title, options.nested);\n-    const result = findPlaceholderLink(view.state.doc, href);\n-\n-    if (!result) {\n-      return;\n-    }\n-\n-    dispatch(\n-      view.state.tr\n-        .removeMark(\n-          result.pos,\n-          result.pos + result.node.nodeSize,\n-          state.schema.marks.link\n-        )\n-        .addMark(\n-          result.pos,\n-          result.pos + result.node.nodeSize,\n-          state.schema.marks.link.create({ href: url })\n-        )\n-    );\n-  } catch (err) {\n-    const result = findPlaceholderLink(view.state.doc, href);\n-    if (!result) {\n-      return;\n-    }\n-\n-    dispatch(\n-      view.state.tr.removeMark(\n-        result.pos,\n-        result.pos + result.node.nodeSize,\n-        state.schema.marks.link\n-      )\n-    );\n-\n-    toast.error(options.dictionary.createLinkError);\n-  }\n-};\n-\n-export default createAndInsertLink;\n\ndiff --git a/shared/editor/commands/insertFiles.ts b/shared/editor/commands/insertFiles.ts\nindex 35e0f9c93317..21b1be342ef8 100644\n--- a/shared/editor/commands/insertFiles.ts\n+++ b/shared/editor/commands/insertFiles.ts\n@@ -16,7 +16,7 @@ export type Options = {\n   /** Set to true to replace any existing image at the users selection */\n   replaceExisting?: boolean;\n   /** Callback fired to upload a file */\n-  uploadFile?: (file: File) => Promise<string>;\n+  uploadFile?: (file: File | string) => Promise<string>;\n   /** Callback fired when the user starts a file upload */\n   onFileUploadStart?: () => void;\n   /** Callback fired when the user completes a file upload */\n\ndiff --git a/shared/editor/extensions/Mermaid.ts b/shared/editor/extensions/Mermaid.ts\nindex 33bf707f843e..be18366c5028 100644\n--- a/shared/editor/extensions/Mermaid.ts\n+++ b/shared/editor/extensions/Mermaid.ts\n@@ -13,7 +13,8 @@ import { Decoration, DecorationSet } from \"prosemirror-view\";\n import { v4 as uuidv4 } from \"uuid\";\n import { isCode } from \"../lib/isCode\";\n import { isRemoteTransaction } from \"../lib/multiplayer\";\n-import { findBlockNodes, NodeWithPos } from \"../queries/findChildren\";\n+import { findBlockNodes } from \"../queries/findChildren\";\n+import { NodeWithPos } from \"../types\";\n \n type MermaidState = {\n   decorationSet: DecorationSet;\n\ndiff --git a/shared/editor/lib/FileHelper.ts b/shared/editor/lib/FileHelper.ts\nindex e11f94941fbc..93b2bb94a5fa 100644\n--- a/shared/editor/lib/FileHelper.ts\n+++ b/shared/editor/lib/FileHelper.ts\n@@ -21,6 +21,23 @@ export default class FileHelper {\n     return file.type.startsWith(\"video/\");\n   }\n \n+  /**\n+   * Download a file from a URL and return it as a File object.\n+   *\n+   * @param url The URL to download the file from\n+   * @returns The downloaded file\n+   */\n+  static async getFileForUrl(url: string): Promise<File> {\n+    const response = await fetch(url);\n+    const blob = await response.blob();\n+    const fileName = (response.headers.get(\"content-disposition\") || \"\").split(\n+      \"filename=\"\n+    )[1];\n+    return new File([blob], fileName || \"file\", {\n+      type: blob.type,\n+    });\n+  }\n+\n   /**\n    * Loads the dimensions of a video file.\n    *\n\ndiff --git a/shared/editor/plugins/UploadPlugin.ts b/shared/editor/plugins/UploadPlugin.ts\nindex c50ca3adf078..26c2e898c814 100644\n--- a/shared/editor/plugins/UploadPlugin.ts\n+++ b/shared/editor/plugins/UploadPlugin.ts\n@@ -1,8 +1,10 @@\n import { extension } from \"mime-types\";\n+import { Node } from \"prosemirror-model\";\n import { Plugin } from \"prosemirror-state\";\n import { getDataTransferFiles, getDataTransferImage } from \"../../utils/files\";\n import { fileNameFromUrl, isInternalUrl } from \"../../utils/urls\";\n import insertFiles, { Options } from \"../commands/insertFiles\";\n+import FileHelper from \"../lib/FileHelper\";\n \n export class UploadPlugin extends Plugin {\n   constructor(options: Options) {\n@@ -96,6 +98,44 @@ export class UploadPlugin extends Plugin {\n             return false;\n           },\n         },\n+        transformPasted: (slice, view) => {\n+          // find any remote images in pasted slice, but leave it alone.\n+          const images: Node[] = [];\n+          slice.content.descendants((node) => {\n+            if (node.type.name === \"image\" && !isInternalUrl(node.attrs.src)) {\n+              images.push(node);\n+            }\n+          });\n+\n+          // Upload each remote image to our storage and replace the src\n+          // with the new url and dimensions.\n+          void images.map(async (image) => {\n+            const url = await options.uploadFile?.(image.attrs.src);\n+\n+            if (url) {\n+              const file = await FileHelper.getFileForUrl(url);\n+              const dimensions = await FileHelper.getImageDimensions(file);\n+              const { tr } = view.state;\n+\n+              tr.doc.nodesBetween(0, tr.doc.nodeSize - 2, (node, pos) => {\n+                if (\n+                  node.type.name === \"image\" &&\n+                  node.attrs.src === image.attrs.src\n+                ) {\n+                  tr.setNodeMarkup(pos, undefined, {\n+                    ...node.attrs,\n+                    ...dimensions,\n+                    src: url,\n+                  });\n+                }\n+              });\n+\n+              view.dispatch(tr);\n+            }\n+          });\n+\n+          return slice;\n+        },\n       },\n     });\n   }\n\ndiff --git a/shared/editor/queries/findChildren.ts b/shared/editor/queries/findChildren.ts\nindex c3757a1ae008..506cb5082856 100644\n--- a/shared/editor/queries/findChildren.ts\n+++ b/shared/editor/queries/findChildren.ts\n@@ -1,12 +1,8 @@\n import { Node } from \"prosemirror-model\";\n+import { NodeWithPos } from \"../types\";\n \n type Predicate = (node: Node) => boolean;\n \n-export type NodeWithPos = {\n-  pos: number;\n-  node: Node;\n-};\n-\n export function flatten(node: Node, descend = true): NodeWithPos[] {\n   if (!node) {\n     throw new Error('Invalid \"node\" parameter');\n\ndiff --git a/shared/editor/queries/findCollapsedNodes.ts b/shared/editor/queries/findCollapsedNodes.ts\nindex ad70bd982193..7e0e9e8b5db3 100644\n--- a/shared/editor/queries/findCollapsedNodes.ts\n+++ b/shared/editor/queries/findCollapsedNodes.ts\n@@ -1,5 +1,6 @@\n import { Node } from \"prosemirror-model\";\n-import { findBlockNodes, NodeWithPos } from \"./findChildren\";\n+import { NodeWithPos } from \"../types\";\n+import { findBlockNodes } from \"./findChildren\";\n \n export function findCollapsedNodes(doc: Node): NodeWithPos[] {\n   const blocks = findBlockNodes(doc);\n\ndiff --git a/shared/editor/types/index.ts b/shared/editor/types/index.ts\nindex 8e8687ab9dd1..f9d868d4f208 100644\n--- a/shared/editor/types/index.ts\n+++ b/shared/editor/types/index.ts\n@@ -6,6 +6,11 @@ import * as React from \"react\";\n import { DefaultTheme } from \"styled-components\";\n import { Primitive } from \"utility-types\";\n \n+export type NodeWithPos = {\n+  pos: number;\n+  node: ProsemirrorNode;\n+};\n+\n export type PlainTextSerializer = (node: ProsemirrorNode) => string;\n \n export enum TableLayout {\n\ndiff --git a/shared/utils/files.ts b/shared/utils/files.ts\nindex 43873d1a0d27..17bd53b5e785 100644\n--- a/shared/utils/files.ts\n+++ b/shared/utils/files.ts\n@@ -112,3 +112,20 @@ export function getEventFiles(\n     ? Array.prototype.slice.call(event.target.files)\n     : [];\n }\n+\n+/**\n+ * Get the likely filename from a URL\n+ *\n+ * @param url The URL to get the filename from\n+ * @returns The filename or null if it could not be determined\n+ */\n+export function getFileNameFromUrl(url: string) {\n+  try {\n+    const urlObj = new URL(url);\n+    const pathname = urlObj.pathname;\n+    const filename = pathname.substring(pathname.lastIndexOf(\"/\") + 1);\n+    return filename;\n+  } catch (error) {\n+    return null;\n+  }\n+}\n",
    "test_patch": "diff --git a/shared/utils/files.test.ts b/shared/utils/files.test.ts\nindex fb4faa9fea4d..b9aa073a01c1 100644\n--- a/shared/utils/files.test.ts\n+++ b/shared/utils/files.test.ts\n@@ -1,7 +1,7 @@\n-import { bytesToHumanReadable } from \"./files\";\n+import { bytesToHumanReadable, getFileNameFromUrl } from \"./files\";\n \n describe(\"bytesToHumanReadable\", () => {\n-  test(\"Outputs readable string\", () => {\n+  it(\"outputs readable string\", () => {\n     expect(bytesToHumanReadable(0)).toBe(\"0 Bytes\");\n     expect(bytesToHumanReadable(0.0)).toBe(\"0 Bytes\");\n     expect(bytesToHumanReadable(33)).toBe(\"33 Bytes\");\n@@ -15,3 +15,20 @@ describe(\"bytesToHumanReadable\", () => {\n     expect(bytesToHumanReadable(undefined)).toBe(\"0 Bytes\");\n   });\n });\n+\n+describe(\"getFileNameFromUrl\", () => {\n+  it(\"returns the filename from a URL\", () => {\n+    expect(getFileNameFromUrl(\"https://example.com/file\")).toBe(\"file\");\n+    expect(getFileNameFromUrl(\"https://example.com/file.txt\")).toBe(\"file.txt\");\n+    expect(\n+      getFileNameFromUrl(\"https://example.com/file.txt?query=string\")\n+    ).toBe(\"file.txt\");\n+    expect(getFileNameFromUrl(\"https://example.com/file.txt#hash\")).toBe(\n+      \"file.txt\"\n+    );\n+    expect(\n+      getFileNameFromUrl(\"https://example.com/file.txt?query=string#hash\")\n+    ).toBe(\"file.txt\");\n+    expect(getFileNameFromUrl(\"https://example.com/\")).toBe(\"\");\n+  });\n+});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8297",
    "pr_id": 8297,
    "issue_id": 8186,
    "repo": "outline/outline",
    "problem_statement": "API key scopes\nAdd `scope` column to `ApiKey`. Scopes is a space separated list of endpoints (or prefixes) which are accessible to the key. For example, valid values:\r\n\r\n`documents`\r\n`documents.info`\r\n`documents.list documents.info`\r\n`collections.info documents`\r\n\r\n- Because the scope is a list of endpoint definitions it can be easily and cheaply checked as part of the authentication middleware.\r\n- An `ApiKey` with empty `scope` has no limitations, the same access as the user.",
    "issue_word_count": 71,
    "test_files_count": 2,
    "non_test_files_count": 11,
    "pr_changed_files": [
      "app/models/ApiKey.ts",
      "app/scenes/ApiKeyNew/index.tsx",
      "app/scenes/Settings/components/ApiKeyListItem.tsx",
      "server/middlewares/authentication.ts",
      "server/migrations/20250125031823-add-api-key-scopes.js",
      "server/models/ApiKey.test.ts",
      "server/models/ApiKey.ts",
      "server/policies/utils.ts",
      "server/presenters/apiKey.ts",
      "server/routes/api/apiKeys/apiKeys.test.ts",
      "server/routes/api/apiKeys/apiKeys.ts",
      "server/routes/api/apiKeys/schema.ts",
      "shared/i18n/locales/en_US/translation.json"
    ],
    "pr_changed_test_files": [
      "server/models/ApiKey.test.ts",
      "server/routes/api/apiKeys/apiKeys.test.ts"
    ],
    "base_commit": "f1c5b145a4cdfc171fb259963390112f3600badb",
    "head_commit": "f8cd5f3e4b20a0269caeb251497f949985204de3",
    "repo_url": "https://github.com/outline/outline/pull/8297",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8297",
    "dockerfile": "",
    "pr_merged_at": "2025-01-29T00:50:22.000Z",
    "patch": "diff --git a/app/models/ApiKey.ts b/app/models/ApiKey.ts\nindex 6bb33992c259..fb73d2cf4354 100644\n--- a/app/models/ApiKey.ts\n+++ b/app/models/ApiKey.ts\n@@ -6,11 +6,16 @@ import Field from \"./decorators/Field\";\n class ApiKey extends ParanoidModel {\n   static modelName = \"ApiKey\";\n \n-  /** The user chosen name of the API key. */\n+  /** The human-readable name of this API key */\n   @Field\n   @observable\n   name: string;\n \n+  /** A list of scopes that this API key has access to. If empty, the key has full access. */\n+  @Field\n+  @observable\n+  scope?: string[];\n+\n   /** An optional datetime that the API key expires. */\n   @Field\n   @observable\n\ndiff --git a/app/scenes/ApiKeyNew/index.tsx b/app/scenes/ApiKeyNew/index.tsx\nindex a458cd58c893..3ce8faef1a12 100644\n--- a/app/scenes/ApiKeyNew/index.tsx\n+++ b/app/scenes/ApiKeyNew/index.tsx\n@@ -22,6 +22,7 @@ type Props = {\n \n function ApiKeyNew({ onSubmit }: Props) {\n   const [name, setName] = React.useState(\"\");\n+  const [scope, setScope] = React.useState(\"\");\n   const [expiryType, setExpiryType] = React.useState<ExpiryType>(\n     ExpiryType.Week\n   );\n@@ -51,6 +52,10 @@ function ApiKeyNew({ onSubmit }: Props) {\n     setName(event.target.value);\n   }, []);\n \n+  const handleScopeChange = React.useCallback((event) => {\n+    setScope(event.target.value);\n+  }, []);\n+\n   const handleExpiryTypeChange = React.useCallback((value: string) => {\n     const expiry = value as ExpiryType;\n     setExpiryType(expiry);\n@@ -70,6 +75,7 @@ function ApiKeyNew({ onSubmit }: Props) {\n         await apiKeys.create({\n           name,\n           expiresAt: expiresAt?.toISOString(),\n+          scope: scope ? scope.split(\" \") : undefined,\n         });\n         toast.success(\n           t(\n@@ -83,20 +89,16 @@ function ApiKeyNew({ onSubmit }: Props) {\n         setIsSaving(false);\n       }\n     },\n-    [t, name, expiresAt, onSubmit, apiKeys]\n+    [t, name, scope, expiresAt, onSubmit, apiKeys]\n   );\n \n   return (\n     <form onSubmit={handleSubmit}>\n-      <Text as=\"p\" type=\"secondary\">\n-        {t(\n-          `Name your key something that will help you to remember it's use in the future, for example \"local development\" or \"continuous integration\".`\n-        )}\n-      </Text>\n       <Flex column>\n         <Input\n           type=\"text\"\n           label={t(\"Name\")}\n+          placeholder={t(\"Development\")}\n           onChange={handleNameChange}\n           value={name}\n           minLength={ApiKeyValidation.minNameLength}\n@@ -105,6 +107,20 @@ function ApiKeyNew({ onSubmit }: Props) {\n           autoFocus\n           flex\n         />\n+        <Input\n+          type=\"text\"\n+          label={t(\"Scopes\")}\n+          placeholder=\"documents.info\"\n+          onChange={handleScopeChange}\n+          value={scope}\n+          flex\n+        />\n+        <Text type=\"secondary\" size=\"small\" as=\"p\">\n+          {t(\n+            \"Space-separated scopes restrict the access of this API key to specific parts of the API. Leave blank for full access\"\n+          )}\n+          .\n+        </Text>\n         <Flex align=\"center\" gap={16}>\n           <StyledExpirySelect\n             ariaLabel={t(\"Expiration\")}\n\ndiff --git a/app/scenes/Settings/components/ApiKeyListItem.tsx b/app/scenes/Settings/components/ApiKeyListItem.tsx\nindex eb4096f32f5b..0eee5a96608d 100644\n--- a/app/scenes/Settings/components/ApiKeyListItem.tsx\n+++ b/app/scenes/Settings/components/ApiKeyListItem.tsx\n@@ -10,6 +10,7 @@ import Flex from \"~/components/Flex\";\n import ListItem from \"~/components/List/Item\";\n import Text from \"~/components/Text\";\n import Time from \"~/components/Time\";\n+import Tooltip from \"~/components/Tooltip\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n import useUserLocale from \"~/hooks/useUserLocale\";\n import ApiKeyMenu from \"~/menus/ApiKeyMenu\";\n@@ -35,7 +36,7 @@ const ApiKeyListItem = ({ apiKey }: Props) => {\n         &middot;{\" \"}\n       </Text>\n       {apiKey.lastActiveAt && (\n-        <Text type={\"tertiary\"}>\n+        <Text type=\"tertiary\">\n           {t(\"Last used\")} <Time dateTime={apiKey.lastActiveAt} addSuffix />{\" \"}\n           &middot;{\" \"}\n         </Text>\n@@ -44,7 +45,20 @@ const ApiKeyListItem = ({ apiKey }: Props) => {\n         {apiKey.expiresAt\n           ? dateToExpiry(apiKey.expiresAt, t, userLocale)\n           : t(\"No expiry\")}\n+        {apiKey.scope && <> &middot; </>}\n       </Text>\n+      {apiKey.scope && (\n+        <Tooltip\n+          content={apiKey.scope.map((s) => (\n+            <>\n+              {s}\n+              <br />\n+            </>\n+          ))}\n+        >\n+          <Text type=\"tertiary\">{t(\"Restricted scope\")}</Text>\n+        </Tooltip>\n+      )}\n     </>\n   );\n \n\ndiff --git a/server/middlewares/authentication.ts b/server/middlewares/authentication.ts\nindex 506e83b3345d..bc3fa6c3bc0e 100644\n--- a/server/middlewares/authentication.ts\n+++ b/server/middlewares/authentication.ts\n@@ -80,7 +80,13 @@ export default function auth(options: AuthenticationOptions = {}) {\n         }\n \n         if (apiKey.expiresAt && apiKey.expiresAt < new Date()) {\n-          throw AuthenticationError(\"Invalid API key\");\n+          throw AuthenticationError(\"API key is expired\");\n+        }\n+\n+        if (!apiKey.canAccess(ctx.request.url)) {\n+          throw AuthenticationError(\n+            \"API key does not have access to this resource\"\n+          );\n         }\n \n         user = await User.findByPk(apiKey.userId, {\n\ndiff --git a/server/migrations/20250125031823-add-api-key-scopes.js b/server/migrations/20250125031823-add-api-key-scopes.js\nnew file mode 100644\nindex 000000000000..f1f9a6d1803b\n--- /dev/null\n+++ b/server/migrations/20250125031823-add-api-key-scopes.js\n@@ -0,0 +1,19 @@\n+\"use strict\";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.addColumn(\"apiKeys\", \"scope\", {\n+        type: Sequelize.ARRAY(Sequelize.STRING),\n+        allowNull: true,\n+      }, { transaction });\n+    });\n+  },\n+\n+  async down(queryInterface) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.removeColumn(\"apiKeys\", \"scope\", { transaction });\n+    });\n+  },\n+};\n\ndiff --git a/server/models/ApiKey.ts b/server/models/ApiKey.ts\nindex a3159d20dcb0..e9ab31c18343 100644\n--- a/server/models/ApiKey.ts\n+++ b/server/models/ApiKey.ts\n@@ -1,4 +1,5 @@\n import crypto from \"crypto\";\n+import { Matches } from \"class-validator\";\n import { subMinutes } from \"date-fns\";\n import randomstring from \"randomstring\";\n import { InferAttributes, InferCreationAttributes, Op } from \"sequelize\";\n@@ -31,6 +32,7 @@ class ApiKey extends ParanoidModel<\n \n   static eventNamespace = \"api_keys\";\n \n+  /** The human-readable name of this API key */\n   @Length({\n     min: ApiKeyValidation.minNameLength,\n     max: ApiKeyValidation.maxNameLength,\n@@ -39,6 +41,13 @@ class ApiKey extends ParanoidModel<\n   @Column\n   name: string;\n \n+  /** A space-separated list of scopes that this API key has access to */\n+  @Matches(/[\\/\\.\\w\\s]*/, {\n+    each: true,\n+  })\n+  @Column(DataType.ARRAY(DataType.STRING))\n+  scope: string[] | null;\n+\n   /** @deprecated The plain text value of the API key, removed soon. */\n   @Unique\n   @Column\n@@ -59,10 +68,12 @@ class ApiKey extends ParanoidModel<\n   @SkipChangeset\n   last4: string;\n \n+  /** The date and time when this API key will expire */\n   @IsDate\n   @Column\n   expiresAt: Date | null;\n \n+  /** The date and time when this API key was last used */\n   @IsDate\n   @Column\n   @SkipChangeset\n@@ -156,6 +167,27 @@ class ApiKey extends ParanoidModel<\n \n     return this.save({ silent: true });\n   };\n+\n+  /** Checks if the API key has access to the given path */\n+  canAccess = (path: string) => {\n+    if (!this.scope) {\n+      return true;\n+    }\n+\n+    const resource = path.split(\"/\").pop() ?? \"\";\n+    const [namespace, method] = resource.split(\".\");\n+\n+    return this.scope.some((scope) => {\n+      const [scopeNamespace, scopeMethod] = scope\n+        .replace(\"/api/\", \"\")\n+        .split(\".\");\n+      return (\n+        scope.startsWith(\"/api/\") &&\n+        (namespace === scopeNamespace || scopeNamespace === \"*\") &&\n+        (method === scopeMethod || scopeMethod === \"*\")\n+      );\n+    });\n+  };\n }\n \n export default ApiKey;\n\ndiff --git a/server/policies/utils.ts b/server/policies/utils.ts\nindex c7f97a0672fb..682639c93faf 100644\n--- a/server/policies/utils.ts\n+++ b/server/policies/utils.ts\n@@ -1,5 +1,4 @@\n import env from \"@server/env\";\n-import { IncorrectEditionError } from \"@server/errors\";\n import { User, Team } from \"@server/models\";\n import Model from \"@server/models/base/Model\";\n \n@@ -97,9 +96,7 @@ export function isTeamMutable(_actor: User, _model?: Model | null) {\n  */\n export function isCloudHosted() {\n   if (!env.isCloudHosted) {\n-    throw IncorrectEditionError(\n-      \"Functionality is not available in this edition\"\n-    );\n+    return false;\n   }\n   return true;\n }\n\ndiff --git a/server/presenters/apiKey.ts b/server/presenters/apiKey.ts\nindex 943cf78cb83a..cb73f8754f37 100644\n--- a/server/presenters/apiKey.ts\n+++ b/server/presenters/apiKey.ts\n@@ -5,6 +5,7 @@ export default function presentApiKey(apiKey: ApiKey) {\n     id: apiKey.id,\n     userId: apiKey.userId,\n     name: apiKey.name,\n+    scope: apiKey.scope,\n     value: apiKey.value,\n     last4: apiKey.last4,\n     createdAt: apiKey.createdAt,\n\ndiff --git a/server/routes/api/apiKeys/apiKeys.ts b/server/routes/api/apiKeys/apiKeys.ts\nindex a694c42c8874..a1ae85db685c 100644\n--- a/server/routes/api/apiKeys/apiKeys.ts\n+++ b/server/routes/api/apiKeys/apiKeys.ts\n@@ -19,7 +19,7 @@ router.post(\n   validate(T.APIKeysCreateSchema),\n   transaction(),\n   async (ctx: APIContext<T.APIKeysCreateReq>) => {\n-    const { name, expiresAt } = ctx.input.body;\n+    const { name, scope, expiresAt } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n     authorize(user, \"createApiKey\", user.team);\n@@ -28,6 +28,7 @@ router.post(\n       name,\n       userId: user.id,\n       expiresAt,\n+      scope: scope?.map((s) => (s.startsWith(\"/api/\") ? s : `/api/${s}`)),\n     });\n \n     ctx.body = {\n\ndiff --git a/server/routes/api/apiKeys/schema.ts b/server/routes/api/apiKeys/schema.ts\nindex a26600deb9af..746de0f7810d 100644\n--- a/server/routes/api/apiKeys/schema.ts\n+++ b/server/routes/api/apiKeys/schema.ts\n@@ -7,6 +7,8 @@ export const APIKeysCreateSchema = BaseSchema.extend({\n     name: z.string(),\n     /** API Key expiry date */\n     expiresAt: z.coerce.date().optional(),\n+    /** A list of scopes that this API key has access to */\n+    scope: z.array(z.string()).optional(),\n   }),\n });\n \n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 59b5574152cb..475905538eac 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -570,7 +570,8 @@\n   \"invited you to\": \"invited you to\",\n   \"Choose a date\": \"Choose a date\",\n   \"API key created. Please copy the value now as it will not be shown again.\": \"API key created. Please copy the value now as it will not be shown again.\",\n-  \"Name your key something that will help you to remember it's use in the future, for example \\\"local development\\\" or \\\"continuous integration\\\".\": \"Name your key something that will help you to remember it's use in the future, for example \\\"local development\\\" or \\\"continuous integration\\\".\",\n+  \"Scopes\": \"Scopes\",\n+  \"Space-separated scopes restrict the access of this API key to specific parts of the API. Leave blank for full access\": \"Space-separated scopes restrict the access of this API key to specific parts of the API. Leave blank for full access\",\n   \"Expiration\": \"Expiration\",\n   \"Never expires\": \"Never expires\",\n   \"7 days\": \"7 days\",\n@@ -828,6 +829,7 @@\n   \"by {{ name }}\": \"by {{ name }}\",\n   \"Last used\": \"Last used\",\n   \"No expiry\": \"No expiry\",\n+  \"Restricted scope\": \"Restricted scope\",\n   \"API key copied to clipboard\": \"API key copied to clipboard\",\n   \"Copied\": \"Copied\",\n   \"Revoking\": \"Revoking\",\n",
    "test_patch": "diff --git a/server/models/ApiKey.test.ts b/server/models/ApiKey.test.ts\nindex 98b36c85ba3c..e783bcd16959 100644\n--- a/server/models/ApiKey.test.ts\n+++ b/server/models/ApiKey.test.ts\n@@ -4,26 +4,26 @@ import ApiKey from \"./ApiKey\";\n \n describe(\"#ApiKey\", () => {\n   describe(\"match\", () => {\n-    test(\"should match an API secret\", async () => {\n+    it(\"should match an API secret\", async () => {\n       const apiKey = await buildApiKey();\n       expect(ApiKey.match(apiKey.value!)).toBe(true);\n       expect(ApiKey.match(`${randomstring.generate(38)}`)).toBe(true);\n     });\n \n-    test(\"should not match non secrets\", async () => {\n+    it(\"should not match non secrets\", async () => {\n       expect(ApiKey.match(\"123\")).toBe(false);\n       expect(ApiKey.match(\"1234567890\")).toBe(false);\n     });\n   });\n \n   describe(\"lastActiveAt\", () => {\n-    test(\"should update lastActiveAt\", async () => {\n+    it(\"should update lastActiveAt\", async () => {\n       const apiKey = await buildApiKey();\n       await apiKey.updateActiveAt();\n       expect(apiKey.lastActiveAt).toBeTruthy();\n     });\n \n-    test(\"should not update lastActiveAt within 5 minutes\", async () => {\n+    it(\"should not update lastActiveAt within 5 minutes\", async () => {\n       const apiKey = await buildApiKey();\n       await apiKey.updateActiveAt();\n       expect(apiKey.lastActiveAt).toBeTruthy();\n@@ -35,7 +35,7 @@ describe(\"#ApiKey\", () => {\n   });\n \n   describe(\"findByToken\", () => {\n-    test(\"should find by hash\", async () => {\n+    it(\"should find by hash\", async () => {\n       const apiKey = await buildApiKey({\n         name: \"Dev\",\n       });\n@@ -44,4 +44,62 @@ describe(\"#ApiKey\", () => {\n       expect(found?.last4).toEqual(apiKey.value!.slice(-4));\n     });\n   });\n+\n+  describe(\"canAccess\", () => {\n+    it(\"should return true for all resources if no scope\", async () => {\n+      const apiKey = await buildApiKey({\n+        name: \"Dev\",\n+      });\n+\n+      expect(apiKey.canAccess(\"/api/documents.info\")).toBe(true);\n+      expect(apiKey.canAccess(\"/api/collections.create\")).toBe(true);\n+      expect(apiKey.canAccess(\"/api/apiKeys.list\")).toBe(true);\n+    });\n+\n+    it(\"should return false if no matching scope\", async () => {\n+      const apiKey = await buildApiKey({\n+        name: \"Dev\",\n+        scope: [\"/api/documents.info\"],\n+      });\n+\n+      expect(apiKey.canAccess(\"/api/documents.info\")).toBe(true);\n+      expect(apiKey.canAccess(\"/api/collections.create\")).toBe(false);\n+      expect(apiKey.canAccess(\"/api/apiKeys.list\")).toBe(false);\n+    });\n+\n+    it(\"should allow wildcard methods\", async () => {\n+      const apiKey = await buildApiKey({\n+        name: \"Dev\",\n+        scope: [\"/api/documents.*\"],\n+      });\n+\n+      expect(apiKey.canAccess(\"/api/documents.info\")).toBe(true);\n+      expect(apiKey.canAccess(\"/api/documents.create\")).toBe(true);\n+      expect(apiKey.canAccess(\"/api/collections.create\")).toBe(false);\n+    });\n+\n+    it(\"should allow wildcard namespaces\", async () => {\n+      const apiKey = await buildApiKey({\n+        name: \"Dev\",\n+        scope: [\"/api/*.info\"],\n+      });\n+\n+      expect(apiKey.canAccess(\"/api/documents.info\")).toBe(true);\n+      expect(apiKey.canAccess(\"/api/documents.create\")).toBe(false);\n+      expect(apiKey.canAccess(\"/api/collections.create\")).toBe(false);\n+    });\n+\n+    it(\"should allow multiple scopes\", async () => {\n+      const apiKey = await buildApiKey({\n+        name: \"Dev\",\n+        scope: [\"/api/*.info\", \"/api/collections.list\"],\n+      });\n+\n+      expect(apiKey.canAccess(\"/api/shares.info\")).toBe(true);\n+      expect(apiKey.canAccess(\"/api/documents.info\")).toBe(true);\n+      expect(apiKey.canAccess(\"/api/collections.list\")).toBe(true);\n+      expect(apiKey.canAccess(\"/api/documents.create\")).toBe(false);\n+      expect(apiKey.canAccess(\"/api/collections.create\")).toBe(false);\n+    });\n+  });\n });\n\ndiff --git a/server/routes/api/apiKeys/apiKeys.test.ts b/server/routes/api/apiKeys/apiKeys.test.ts\nindex 42cc5742b801..b20b82be40e2 100644\n--- a/server/routes/api/apiKeys/apiKeys.test.ts\n+++ b/server/routes/api/apiKeys/apiKeys.test.ts\n@@ -40,6 +40,27 @@ describe(\"#apiKeys.create\", () => {\n     expect(body.data.lastActiveAt).toBeNull();\n   });\n \n+  it(\"should allow creating an api key with scopes\", async () => {\n+    const user = await buildUser();\n+\n+    const res = await server.post(\"/api/apiKeys.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        name: \"My API Key\",\n+        scope: [\"/api/documents.list\", \"*.info\", \"users.*\"],\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.name).toEqual(\"My API Key\");\n+    expect(body.data.scope).toEqual([\n+      \"/api/documents.list\",\n+      \"/api/*.info\",\n+      \"/api/users.*\",\n+    ]);\n+  });\n+\n   it(\"should require authentication\", async () => {\n     const res = await server.post(\"/api/apiKeys.create\");\n     expect(res.status).toEqual(401);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8274",
    "pr_id": 8274,
    "issue_id": 8272,
    "repo": "outline/outline",
    "problem_statement": "`text` and `title` should take precedence when passing `templateId` to `documents.create`\n> if I add a templateId at create time, it works too, but the title is the one of the template, not the one in title data.\r\n\r\nThis is a bug, the passed data should take precedence. In the meantime if you want to workaround it then you would have to read the template separately and apply in your code before POSTing.\r\n\r\n_Originally posted by @tommoor in https://github.com/outline/outline/discussions/8268#discussioncomment-11909751_",
    "issue_word_count": 75,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "server/commands/documentCreator.ts",
      "server/routes/api/documents/documents.test.ts",
      "server/routes/api/documents/documents.ts",
      "server/routes/api/documents/schema.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/documents/documents.test.ts"
    ],
    "base_commit": "4cc0beb90d98f9d039f2ac6081a8ec7354ac2aa0",
    "head_commit": "de8defa0d9f6182310d3c4b423d394806d850a6f",
    "repo_url": "https://github.com/outline/outline/pull/8274",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8274",
    "dockerfile": "",
    "pr_merged_at": "2025-01-22T13:41:19.000Z",
    "patch": "diff --git a/server/commands/documentCreator.ts b/server/commands/documentCreator.ts\nindex e90f91f5c877..fe4bfa3ce0ac 100644\n--- a/server/commands/documentCreator.ts\n+++ b/server/commands/documentCreator.ts\n@@ -35,8 +35,8 @@ type Props = Optional<\n };\n \n export default async function documentCreator({\n-  title = \"\",\n-  text = \"\",\n+  title,\n+  text,\n   icon,\n   color,\n   state,\n@@ -101,14 +101,20 @@ export default async function documentCreator({\n       fullWidth: templateDocument ? templateDocument.fullWidth : fullWidth,\n       icon: templateDocument ? templateDocument.icon : icon,\n       color: templateDocument ? templateDocument.color : color,\n-      title: TextHelper.replaceTemplateVariables(\n-        templateDocument ? templateDocument.title : title,\n-        user\n-      ),\n-      text: TextHelper.replaceTemplateVariables(\n-        templateDocument ? templateDocument.text : text,\n-        user\n-      ),\n+      title:\n+        title ??\n+        (templateDocument\n+          ? template\n+            ? templateDocument.title\n+            : TextHelper.replaceTemplateVariables(templateDocument.title, user)\n+          : \"\"),\n+      text:\n+        text ??\n+        (templateDocument\n+          ? template\n+            ? templateDocument.text\n+            : TextHelper.replaceTemplateVariables(templateDocument.text, user)\n+          : \"\"),\n       content: templateDocument\n         ? ProsemirrorHelper.replaceTemplateVariables(\n             await DocumentHelper.toJSON(templateDocument),\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex a2af629c7828..592edf29f4c2 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -6,6 +6,7 @@ import JSZip from \"jszip\";\n import Router from \"koa-router\";\n import escapeRegExp from \"lodash/escapeRegExp\";\n import has from \"lodash/has\";\n+import isNil from \"lodash/isNil\";\n import remove from \"lodash/remove\";\n import uniq from \"lodash/uniq\";\n import mime from \"mime-types\";\n@@ -1644,7 +1645,9 @@ router.post(\n     const document = await documentCreator({\n       id,\n       title,\n-      text: await TextHelper.replaceImagesWithAttachments(ctx, text, user),\n+      text: !isNil(text)\n+        ? await TextHelper.replaceImagesWithAttachments(ctx, text, user)\n+        : text,\n       icon,\n       color,\n       createdAt,\n\ndiff --git a/server/routes/api/documents/schema.ts b/server/routes/api/documents/schema.ts\nindex ee9043cb3dff..f8f97421cf38 100644\n--- a/server/routes/api/documents/schema.ts\n+++ b/server/routes/api/documents/schema.ts\n@@ -331,10 +331,10 @@ export const DocumentsCreateSchema = BaseSchema.extend({\n     id: z.string().uuid().optional(),\n \n     /** Document title */\n-    title: z.string().default(\"\"),\n+    title: z.string().optional(),\n \n     /** Document text */\n-    text: z.string().default(\"\"),\n+    text: z.string().optional(),\n \n     /** Icon displayed alongside doc title */\n     icon: zodIconType().optional(),\n",
    "test_patch": "diff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex 14ebc2d91a25..d43f786372cf 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -6,6 +6,7 @@ import {\n   StatusFilter,\n   UserRole,\n } from \"@shared/types\";\n+import { TextHelper } from \"@shared/utils/TextHelper\";\n import { createContext } from \"@server/context\";\n import {\n   Document,\n@@ -3357,6 +3358,127 @@ describe(\"#documents.import\", () => {\n });\n \n describe(\"#documents.create\", () => {\n+  it(\"should replace template variables when a doc is created from a template\", async () => {\n+    const user = await buildUser();\n+    const template = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      template: true,\n+      title: \"template title\",\n+      text: \"Created by user {author} on {date}\",\n+    });\n+    const res = await server.post(\"/api/documents.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        templateId: template.id,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.title).toEqual(\n+      TextHelper.replaceTemplateVariables(template.title, user)\n+    );\n+    expect(body.data.text).toEqual(\n+      TextHelper.replaceTemplateVariables(template.text, user)\n+    );\n+  });\n+\n+  it(\"should retain template variables when a template is created from another template\", async () => {\n+    const user = await buildUser();\n+    const template = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      template: true,\n+      title: \"template title\",\n+      text: \"Created by user {author} on {date}\",\n+    });\n+    const res = await server.post(\"/api/documents.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        templateId: template.id,\n+        template: true,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.title).toEqual(template.title);\n+    expect(body.data.text).toEqual(template.text);\n+  });\n+\n+  it(\"should create a document with empty title if no title is explicitly passed\", async () => {\n+    const user = await buildUser();\n+    const res = await server.post(\"/api/documents.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        text: \"hello\",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.title).toEqual(\"\");\n+  });\n+\n+  it(\"should use template title when doc is supposed to be created using the template and title is not explicitly passed\", async () => {\n+    const user = await buildUser();\n+    const template = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      template: true,\n+      title: \"template title\",\n+      text: \"template text\",\n+    });\n+    const res = await server.post(\"/api/documents.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        templateId: template.id,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.title).toEqual(template.title);\n+    expect(body.data.text).toEqual(template.text);\n+  });\n+\n+  it(\"should override template title when doc title is explicitly passed\", async () => {\n+    const user = await buildUser();\n+    const template = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      template: true,\n+      title: \"template title\",\n+    });\n+    const res = await server.post(\"/api/documents.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        templateId: template.id,\n+        title: \"doc title\",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.title).toEqual(\"doc title\");\n+  });\n+\n+  it(\"should override template text when doc text is explicitly passed\", async () => {\n+    const user = await buildUser();\n+    const template = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      template: true,\n+      text: \"template text\",\n+    });\n+    const res = await server.post(\"/api/documents.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        templateId: template.id,\n+        text: \"doc text\",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.text).toEqual(\"doc text\");\n+  });\n+\n   it(\"should fail for invalid collectionId\", async () => {\n     const user = await buildUser();\n     const res = await server.post(\"/api/documents.create\", {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8263",
    "pr_id": 8263,
    "issue_id": 8239,
    "repo": "outline/outline",
    "problem_statement": "Notify the group members when a group is added to a collection\nSame as adding groups to a document, we should notify the members when the group is provided access to a collection.",
    "issue_word_count": 21,
    "test_files_count": 2,
    "non_test_files_count": 13,
    "pr_changed_files": [
      "server/emails/templates/DocumentSharedEmail.tsx",
      "server/migrations/20250225153529-add-notification-membershipId.js",
      "server/models/Notification.ts",
      "server/queues/processors/EmailsProcessor.ts",
      "server/queues/tasks/CommentCreatedNotificationsTask.ts",
      "server/queues/tasks/CommentUpdatedNotificationsTask.ts",
      "server/queues/tasks/DocumentAddGroupNotificationsTask.ts",
      "server/queues/tasks/DocumentAddUserNotificationsTask.ts",
      "server/queues/tasks/DocumentPublishedNotificationsTask.ts",
      "server/queues/tasks/RevisionCreatedNotificationsTask.ts",
      "server/test/factories.ts",
      "server/types.ts",
      "server/utils/permissions.test.ts",
      "server/utils/permissions.ts",
      "server/utils/policies.ts"
    ],
    "pr_changed_test_files": [
      "server/test/factories.ts",
      "server/utils/permissions.test.ts"
    ],
    "base_commit": "499392c1140c954021bc960c5c741693cc640eb7",
    "head_commit": "7f6b25212d0c0be701f8cb75c16155b6a5660028",
    "repo_url": "https://github.com/outline/outline/pull/8263",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8263",
    "dockerfile": "",
    "pr_merged_at": "2025-03-05T01:56:44.000Z",
    "patch": "diff --git a/server/emails/templates/DocumentSharedEmail.tsx b/server/emails/templates/DocumentSharedEmail.tsx\nindex 337c9ba6c71a..872418746ab1 100644\n--- a/server/emails/templates/DocumentSharedEmail.tsx\n+++ b/server/emails/templates/DocumentSharedEmail.tsx\n@@ -1,6 +1,6 @@\n import * as React from \"react\";\n import { DocumentPermission } from \"@shared/types\";\n-import { Document, UserMembership } from \"@server/models\";\n+import { Document, GroupMembership, UserMembership } from \"@server/models\";\n import BaseEmail, { EmailMessageCategory, EmailProps } from \"./BaseEmail\";\n import Body from \"./components/Body\";\n import Button from \"./components/Button\";\n@@ -11,13 +11,14 @@ import Heading from \"./components/Heading\";\n type InputProps = EmailProps & {\n   userId: string;\n   documentId: string;\n+  membershipId?: string;\n   actorName: string;\n   teamUrl: string;\n };\n \n type BeforeSend = {\n   document: Document;\n-  membership: UserMembership;\n+  membership: UserMembership | GroupMembership;\n };\n \n type Props = InputProps & BeforeSend;\n@@ -33,18 +34,20 @@ export default class DocumentSharedEmail extends BaseEmail<\n     return EmailMessageCategory.Notification;\n   }\n \n-  protected async beforeSend({ documentId, userId }: InputProps) {\n+  protected async beforeSend({ documentId, membershipId }: InputProps) {\n+    if (!membershipId) {\n+      return false;\n+    }\n+\n     const document = await Document.unscoped().findByPk(documentId);\n     if (!document) {\n       return false;\n     }\n \n-    const membership = await UserMembership.findOne({\n-      where: {\n-        documentId,\n-        userId,\n-      },\n-    });\n+    const membership =\n+      (await UserMembership.findByPk(membershipId)) ??\n+      (await GroupMembership.findByPk(membershipId));\n+\n     if (!membership) {\n       return false;\n     }\n\ndiff --git a/server/migrations/20250225153529-add-notification-membershipId.js b/server/migrations/20250225153529-add-notification-membershipId.js\nnew file mode 100644\nindex 000000000000..caea15f921a6\n--- /dev/null\n+++ b/server/migrations/20250225153529-add-notification-membershipId.js\n@@ -0,0 +1,14 @@\n+\"use strict\";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.addColumn(\"notifications\", \"membershipId\", {\n+      type: Sequelize.UUID,\n+    });\n+  },\n+\n+  async down(queryInterface, Sequelize) {\n+    await queryInterface.removeColumn(\"notifications\", \"membershipId\");\n+  },\n+};\n\ndiff --git a/server/models/Notification.ts b/server/models/Notification.ts\nindex ee6007705b3a..225e2dbd00eb 100644\n--- a/server/models/Notification.ts\n+++ b/server/models/Notification.ts\n@@ -177,6 +177,10 @@ class Notification extends Model<\n   @Column(DataType.UUID)\n   teamId: string;\n \n+  @AllowNull\n+  @Column(DataType.UUID)\n+  membershipId: string;\n+\n   @AfterCreate\n   static async createEvent(\n     model: Notification,\n@@ -191,6 +195,7 @@ class Notification extends Model<\n       documentId: model.documentId,\n       collectionId: model.collectionId,\n       actorId: model.actorId,\n+      membershipId: model.membershipId,\n     };\n \n     if (options.transaction) {\n\ndiff --git a/server/queues/processors/EmailsProcessor.ts b/server/queues/processors/EmailsProcessor.ts\nindex 2ba41dcd12ea..411ff83c854f 100644\n--- a/server/queues/processors/EmailsProcessor.ts\n+++ b/server/queues/processors/EmailsProcessor.ts\n@@ -56,6 +56,7 @@ export default class EmailsProcessor extends BaseProcessor {\n             to: notification.user.email,\n             userId: notification.userId,\n             documentId: notification.documentId,\n+            membershipId: notification.membershipId,\n             teamUrl: notification.team.url,\n             actorName: notification.actor.name,\n           },\n\ndiff --git a/server/queues/tasks/CommentCreatedNotificationsTask.ts b/server/queues/tasks/CommentCreatedNotificationsTask.ts\nindex 1ad00fd08080..7e6f86ee305c 100644\n--- a/server/queues/tasks/CommentCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/CommentCreatedNotificationsTask.ts\n@@ -10,7 +10,7 @@ import NotificationHelper from \"@server/models/helpers/NotificationHelper\";\n import { ProsemirrorHelper } from \"@server/models/helpers/ProsemirrorHelper\";\n import { sequelize } from \"@server/storage/database\";\n import { CommentEvent } from \"@server/types\";\n-import { canUserAccessDocument } from \"@server/utils/policies\";\n+import { canUserAccessDocument } from \"@server/utils/permissions\";\n import BaseTask, { TaskPriority } from \"./BaseTask\";\n \n export default class CommentCreatedNotificationsTask extends BaseTask<CommentEvent> {\n\ndiff --git a/server/queues/tasks/CommentUpdatedNotificationsTask.ts b/server/queues/tasks/CommentUpdatedNotificationsTask.ts\nindex 08a93f05aa0d..08dc93f90bb1 100644\n--- a/server/queues/tasks/CommentUpdatedNotificationsTask.ts\n+++ b/server/queues/tasks/CommentUpdatedNotificationsTask.ts\n@@ -4,7 +4,7 @@ import { MentionType, NotificationEventType } from \"@shared/types\";\n import { Comment, Document, Notification, User } from \"@server/models\";\n import { ProsemirrorHelper } from \"@server/models/helpers/ProsemirrorHelper\";\n import { CommentEvent, CommentUpdateEvent } from \"@server/types\";\n-import { canUserAccessDocument } from \"@server/utils/policies\";\n+import { canUserAccessDocument } from \"@server/utils/permissions\";\n import BaseTask, { TaskPriority } from \"./BaseTask\";\n \n export default class CommentUpdatedNotificationsTask extends BaseTask<CommentEvent> {\n\ndiff --git a/server/queues/tasks/DocumentAddGroupNotificationsTask.ts b/server/queues/tasks/DocumentAddGroupNotificationsTask.ts\nindex fc7a467af30f..a0eda5641a07 100644\n--- a/server/queues/tasks/DocumentAddGroupNotificationsTask.ts\n+++ b/server/queues/tasks/DocumentAddGroupNotificationsTask.ts\n@@ -1,6 +1,5 @@\n import { Op } from \"sequelize\";\n-import Logger from \"@server/logging/Logger\";\n-import { GroupUser, UserMembership } from \"@server/models\";\n+import { GroupUser } from \"@server/models\";\n import { DocumentGroupEvent } from \"@server/types\";\n import BaseTask, { TaskPriority } from \"./BaseTask\";\n import DocumentAddUserNotificationsTask from \"./DocumentAddUserNotificationsTask\";\n@@ -20,26 +19,9 @@ export default class DocumentAddGroupNotificationsTask extends BaseTask<Document\n       async (groupUsers) => {\n         await Promise.all(\n           groupUsers.map(async (groupUser) => {\n-            const userMembership = await UserMembership.findOne({\n-              where: {\n-                userId: groupUser.userId,\n-                documentId: event.documentId,\n-              },\n-            });\n-            if (userMembership) {\n-              Logger.debug(\n-                \"task\",\n-                `Suppressing notification for user ${groupUser.userId} as they are already a member of the document`,\n-                {\n-                  documentId: event.documentId,\n-                  userId: groupUser.userId,\n-                }\n-              );\n-              return;\n-            }\n-\n             await DocumentAddUserNotificationsTask.schedule({\n               ...event,\n+              modelId: event.data.membershipId,\n               userId: groupUser.userId,\n             });\n           })\n\ndiff --git a/server/queues/tasks/DocumentAddUserNotificationsTask.ts b/server/queues/tasks/DocumentAddUserNotificationsTask.ts\nindex a41676f37531..9b60dcd9e039 100644\n--- a/server/queues/tasks/DocumentAddUserNotificationsTask.ts\n+++ b/server/queues/tasks/DocumentAddUserNotificationsTask.ts\n@@ -1,27 +1,65 @@\n-import { NotificationEventType } from \"@shared/types\";\n+import { DocumentPermission, NotificationEventType } from \"@shared/types\";\n+import Logger from \"@server/logging/Logger\";\n import { Notification, User } from \"@server/models\";\n import { DocumentUserEvent } from \"@server/types\";\n+import { isElevatedPermission } from \"@server/utils/permissions\";\n import BaseTask, { TaskPriority } from \"./BaseTask\";\n \n export default class DocumentAddUserNotificationsTask extends BaseTask<DocumentUserEvent> {\n   public async perform(event: DocumentUserEvent) {\n-    const recipient = await User.findByPk(event.userId);\n-    if (!recipient) {\n+    const permission = event.changes?.attributes.permission as\n+      | DocumentPermission\n+      | undefined;\n+\n+    if (!permission) {\n+      Logger.info(\n+        \"task\",\n+        `permission not available in the DocumentAddUserNotificationsTask event`,\n+        {\n+          name: event.name,\n+          modelId: event.modelId,\n+        }\n+      );\n       return;\n     }\n \n+    const recipient = await User.findByPk(event.userId);\n     if (\n-      !recipient.isSuspended &&\n-      recipient.subscribedToEventType(NotificationEventType.AddUserToDocument)\n+      !recipient ||\n+      recipient.isSuspended ||\n+      !recipient.subscribedToEventType(NotificationEventType.AddUserToDocument)\n     ) {\n-      await Notification.create({\n-        event: NotificationEventType.AddUserToDocument,\n-        userId: event.userId,\n-        actorId: event.actorId,\n-        teamId: event.teamId,\n-        documentId: event.documentId,\n-      });\n+      return;\n     }\n+\n+    const isElevated = await isElevatedPermission({\n+      userId: recipient.id,\n+      documentId: event.documentId,\n+      permission,\n+      skipMembershipId: event.modelId,\n+    });\n+\n+    if (!isElevated) {\n+      Logger.debug(\n+        \"task\",\n+        `Suppressing notification for user ${event.userId} as the new permission does not elevate user's permission to the document`,\n+        {\n+          documentId: event.documentId,\n+          userId: event.userId,\n+          permission,\n+        }\n+      );\n+      return;\n+    }\n+\n+    await Notification.create({\n+      event: NotificationEventType.AddUserToDocument,\n+      userId: event.userId,\n+      actorId: event.actorId,\n+      teamId: event.teamId,\n+      documentId: event.documentId,\n+      membershipId: event.modelId,\n+    });\n   }\n \n   public get options() {\n\ndiff --git a/server/queues/tasks/DocumentPublishedNotificationsTask.ts b/server/queues/tasks/DocumentPublishedNotificationsTask.ts\nindex f6dd20d6ab97..fbff48a5e65b 100644\n--- a/server/queues/tasks/DocumentPublishedNotificationsTask.ts\n+++ b/server/queues/tasks/DocumentPublishedNotificationsTask.ts\n@@ -4,7 +4,7 @@ import { Document, Notification, User } from \"@server/models\";\n import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n import NotificationHelper from \"@server/models/helpers/NotificationHelper\";\n import { DocumentEvent } from \"@server/types\";\n-import { canUserAccessDocument } from \"@server/utils/policies\";\n+import { canUserAccessDocument } from \"@server/utils/permissions\";\n import BaseTask, { TaskPriority } from \"./BaseTask\";\n \n export default class DocumentPublishedNotificationsTask extends BaseTask<DocumentEvent> {\n\ndiff --git a/server/queues/tasks/RevisionCreatedNotificationsTask.ts b/server/queues/tasks/RevisionCreatedNotificationsTask.ts\nindex bf04767651fc..7e19d39cbf09 100644\n--- a/server/queues/tasks/RevisionCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/RevisionCreatedNotificationsTask.ts\n@@ -9,7 +9,7 @@ import { Document, Revision, Notification, User, View } from \"@server/models\";\n import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n import NotificationHelper from \"@server/models/helpers/NotificationHelper\";\n import { RevisionEvent } from \"@server/types\";\n-import { canUserAccessDocument } from \"@server/utils/policies\";\n+import { canUserAccessDocument } from \"@server/utils/permissions\";\n import BaseTask, { TaskPriority } from \"./BaseTask\";\n \n export default class RevisionCreatedNotificationsTask extends BaseTask<RevisionEvent> {\n\ndiff --git a/server/types.ts b/server/types.ts\nindex ae74bdb61da6..ff116ba8810b 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -464,6 +464,7 @@ export type NotificationEvent = BaseEvent<Notification> & {\n   commentId?: string;\n   documentId?: string;\n   collectionId?: string;\n+  membershipId?: string;\n };\n \n export type Event =\n\ndiff --git a/server/utils/permissions.ts b/server/utils/permissions.ts\nnew file mode 100644\nindex 000000000000..2737f99addaa\n--- /dev/null\n+++ b/server/utils/permissions.ts\n@@ -0,0 +1,178 @@\n+import compact from \"lodash/compact\";\n+import orderBy from \"lodash/orderBy\";\n+import { Op, WhereOptions } from \"sequelize\";\n+import { CollectionPermission, DocumentPermission } from \"@shared/types\";\n+import {\n+  Document,\n+  Group,\n+  GroupMembership,\n+  User,\n+  UserMembership,\n+} from \"@server/models\";\n+import { authorize } from \"@server/policies\";\n+\n+// Higher value takes precedence\n+export const CollectionPermissionPriority = {\n+  [CollectionPermission.Admin]: 2,\n+  [CollectionPermission.ReadWrite]: 1,\n+  [CollectionPermission.Read]: 0,\n+} satisfies Record<CollectionPermission, number>;\n+\n+// Higher value takes precedence\n+export const DocumentPermissionPriority = {\n+  [DocumentPermission.Admin]: 2,\n+  [DocumentPermission.ReadWrite]: 1,\n+  [DocumentPermission.Read]: 0,\n+} satisfies Record<DocumentPermission, number>;\n+\n+/**\n+ * Check if the given user can access a document\n+ *\n+ * @param user - The user to check\n+ * @param documentId - The document to check\n+ * @returns Boolean whether the user can access the document\n+ */\n+export const canUserAccessDocument = async (user: User, documentId: string) => {\n+  try {\n+    const document = await Document.findByPk(documentId, {\n+      userId: user.id,\n+    });\n+    authorize(user, \"read\", document);\n+    return true;\n+  } catch (err) {\n+    return false;\n+  }\n+};\n+\n+/**\n+ * Determines whether the user's access to a document is being elevated with the new permission.\n+ *\n+ * @param {Object} params Input parameters.\n+ * @param {string} params.userId The user to check.\n+ * @param {string} params.documentId The document to check.\n+ * @param {DocumentPermission} params.permission The new permission given to the user.\n+ * @param {string} params.skipMembershipId The membership to skip when comparing the existing permissions.\n+ * @returns {boolean} Whether the user has a higher access level\n+ */\n+export const isElevatedPermission = async ({\n+  userId,\n+  documentId,\n+  permission,\n+  skipMembershipId,\n+}: {\n+  userId: string;\n+  documentId: string;\n+  permission: DocumentPermission;\n+  skipMembershipId?: string;\n+}) => {\n+  const existingPermission = await getDocumentPermission({\n+    userId,\n+    documentId,\n+    skipMembershipId,\n+  });\n+\n+  if (!existingPermission) {\n+    return true;\n+  }\n+\n+  return (\n+    DocumentPermissionPriority[existingPermission] <\n+    DocumentPermissionPriority[permission]\n+  );\n+};\n+\n+/**\n+ * Returns the user's permission to a document.\n+ *\n+ * @param {Object} params Input parameters.\n+ * @param {string} params.userId The user to check.\n+ * @param {string} params.documentId The document to check.\n+ * @param {string} params.skipMembershipId The membership to skip when comparing the existing permissions.\n+ * @returns {DocumentPermission | undefined} Highest permission, if it exists.\n+ */\n+export const getDocumentPermission = async ({\n+  userId,\n+  documentId,\n+  skipMembershipId,\n+}: {\n+  userId: string;\n+  documentId: string;\n+  skipMembershipId?: string;\n+}): Promise<DocumentPermission | undefined> => {\n+  const document = await Document.scope({\n+    method: [\"withCollectionPermissions\", userId],\n+  }).findOne({ where: { id: documentId } });\n+\n+  const permissions: DocumentPermission[] = [];\n+\n+  const collection = document?.collection;\n+  if (collection) {\n+    const collectionPermissions = orderBy(\n+      compact([\n+        collection.permission,\n+        ...compact(\n+          collection.memberships?.map(\n+            (m) => m.permission as CollectionPermission\n+          )\n+        ),\n+        ...compact(\n+          collection.groupMemberships?.map(\n+            (m) => m.permission as CollectionPermission\n+          )\n+        ),\n+      ]),\n+      (permission) => CollectionPermissionPriority[permission],\n+      \"desc\"\n+    );\n+\n+    if (collectionPermissions[0]) {\n+      permissions.push(\n+        collectionPermissions[0] === CollectionPermission.Read\n+          ? DocumentPermission.Read\n+          : DocumentPermission.ReadWrite\n+      );\n+    }\n+  }\n+\n+  const userMembershipWhere: WhereOptions<UserMembership> = {\n+    userId,\n+    documentId,\n+  };\n+  const groupMembershipWhere: WhereOptions<GroupMembership> = {\n+    documentId,\n+  };\n+\n+  if (skipMembershipId) {\n+    userMembershipWhere.id = { [Op.ne]: skipMembershipId };\n+    groupMembershipWhere.id = { [Op.ne]: skipMembershipId };\n+  }\n+\n+  const [userMemberships, groupMemberships] = await Promise.all([\n+    UserMembership.findAll({\n+      where: userMembershipWhere,\n+    }),\n+    GroupMembership.findAll({\n+      where: groupMembershipWhere,\n+      include: [\n+        {\n+          model: Group.filterByMember(userId),\n+          as: \"group\",\n+          required: true,\n+        },\n+      ],\n+    }),\n+  ]);\n+\n+  permissions.push(\n+    ...userMemberships.map((m) => m.permission as DocumentPermission),\n+    ...groupMemberships.map((m) => m.permission as DocumentPermission)\n+  );\n+\n+  const orderedPermissions = orderBy(\n+    permissions,\n+    (permission) => DocumentPermissionPriority[permission],\n+    \"desc\"\n+  );\n+\n+  return orderedPermissions[0];\n+};\n\ndiff --git a/server/utils/policies.ts b/server/utils/policies.ts\ndeleted file mode 100644\nindex 3058b46934d6..000000000000\n--- a/server/utils/policies.ts\n+++ /dev/null\n@@ -1,21 +0,0 @@\n-import { Document, User } from \"@server/models\";\n-import { authorize } from \"@server/policies\";\n-\n-/**\n- * Check if the given user can access a document\n- *\n- * @param user - The user to check\n- * @param documentId - The document to check\n- * @returns Boolean whether the user can access the document\n- */\n-export const canUserAccessDocument = async (user: User, documentId: string) => {\n-  try {\n-    const document = await Document.findByPk(documentId, {\n-      userId: user.id,\n-    });\n-    authorize(user, \"read\", document);\n-    return true;\n-  } catch (err) {\n-    return false;\n-  }\n-};\n",
    "test_patch": "diff --git a/server/test/factories.ts b/server/test/factories.ts\nindex 3a69bc81ad55..86e3f2da2308 100644\n--- a/server/test/factories.ts\n+++ b/server/test/factories.ts\n@@ -294,11 +294,14 @@ export async function buildCollection(\n     overrides.archivedById = overrides.userId;\n   }\n \n+  if (overrides.permission === undefined) {\n+    overrides.permission = CollectionPermission.ReadWrite;\n+  }\n+\n   return Collection.create({\n     name: faker.lorem.words(2),\n     description: faker.lorem.words(4),\n     createdById: overrides.userId,\n-    permission: CollectionPermission.ReadWrite,\n     ...overrides,\n   });\n }\n\ndiff --git a/server/utils/permissions.test.ts b/server/utils/permissions.test.ts\nnew file mode 100644\nindex 000000000000..7e490e05b20c\n--- /dev/null\n+++ b/server/utils/permissions.test.ts\n@@ -0,0 +1,305 @@\n+import { CollectionPermission, DocumentPermission } from \"@shared/types\";\n+import { GroupMembership, UserMembership } from \"@server/models\";\n+import {\n+  buildCollection,\n+  buildDocument,\n+  buildGroup,\n+  buildGroupUser,\n+  buildUser,\n+} from \"@server/test/factories\";\n+import { getDocumentPermission, isElevatedPermission } from \"./permissions\";\n+\n+describe(\"permissions\", () => {\n+  describe(\"isElevatedPermission\", () => {\n+    it(\"should return false when user has higher permission through collection\", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      await UserMembership.create({\n+        createdById: user.id,\n+        collectionId: collection.id,\n+        userId: user.id,\n+        permission: CollectionPermission.ReadWrite,\n+      });\n+\n+      const isElevated = await isElevatedPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+        permission: DocumentPermission.Read,\n+      });\n+\n+      expect(isElevated).toBe(false);\n+    });\n+\n+    it(\"should return false when user has higher permission through document\", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      const group = await buildGroup();\n+      await Promise.all([\n+        await buildGroupUser({\n+          groupId: group.id,\n+          userId: user.id,\n+          teamId: user.teamId,\n+        }),\n+        await UserMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          userId: user.id,\n+          permission: DocumentPermission.Read,\n+        }),\n+        await GroupMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          groupId: group.id,\n+          permission: DocumentPermission.ReadWrite,\n+        }),\n+      ]);\n+\n+      const isElevated = await isElevatedPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+        permission: DocumentPermission.Read,\n+      });\n+\n+      expect(isElevated).toBe(false);\n+    });\n+\n+    it(\"should return false when user has the same permission\", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      const group = await buildGroup();\n+      await Promise.all([\n+        await buildGroupUser({\n+          groupId: group.id,\n+          userId: user.id,\n+          teamId: user.teamId,\n+        }),\n+        await UserMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          userId: user.id,\n+          permission: DocumentPermission.Read,\n+        }),\n+        await GroupMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          groupId: group.id,\n+          permission: DocumentPermission.ReadWrite,\n+        }),\n+      ]);\n+\n+      const isElevated = await isElevatedPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+        permission: DocumentPermission.ReadWrite,\n+      });\n+\n+      expect(isElevated).toBe(false);\n+    });\n+\n+    it(\"should return true when user has lower permission\", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      const group = await buildGroup();\n+      await Promise.all([\n+        await buildGroupUser({\n+          groupId: group.id,\n+          userId: user.id,\n+          teamId: user.teamId,\n+        }),\n+        await UserMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          userId: user.id,\n+          permission: DocumentPermission.Read,\n+        }),\n+        await GroupMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          groupId: group.id,\n+          permission: DocumentPermission.ReadWrite,\n+        }),\n+      ]);\n+\n+      const isElevated = await isElevatedPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+        permission: DocumentPermission.Admin,\n+      });\n+\n+      expect(isElevated).toBe(true);\n+    });\n+\n+    it(\"should return true when user does not have access\", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+\n+      const isElevated = await isElevatedPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+        permission: DocumentPermission.Admin,\n+      });\n+\n+      expect(isElevated).toBe(true);\n+    });\n+  });\n+\n+  describe(\"getDocumentPermission\", () => {\n+    it(\"should return the highest provided permission through collection\", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      await UserMembership.create({\n+        createdById: user.id,\n+        collectionId: collection.id,\n+        userId: user.id,\n+        permission: CollectionPermission.ReadWrite,\n+      });\n+\n+      const permission = await getDocumentPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+      });\n+\n+      expect(permission).toEqual(DocumentPermission.ReadWrite);\n+    });\n+\n+    it(\"should return the highest provided permission through document\", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      const group = await buildGroup();\n+      await Promise.all([\n+        await buildGroupUser({\n+          groupId: group.id,\n+          userId: user.id,\n+          teamId: user.teamId,\n+        }),\n+        await UserMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          userId: user.id,\n+          permission: DocumentPermission.Read,\n+        }),\n+        await GroupMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          groupId: group.id,\n+          permission: DocumentPermission.ReadWrite,\n+        }),\n+      ]);\n+\n+      const permission = await getDocumentPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+      });\n+\n+      expect(permission).toEqual(DocumentPermission.ReadWrite);\n+    });\n+\n+    it(\"should return the highest provided permission with skipped membership\", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      const group = await buildGroup();\n+      const [, , groupMembership] = await Promise.all([\n+        await buildGroupUser({\n+          groupId: group.id,\n+          userId: user.id,\n+          teamId: user.teamId,\n+        }),\n+        await UserMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          userId: user.id,\n+          permission: DocumentPermission.Read,\n+        }),\n+        await GroupMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          groupId: group.id,\n+          permission: DocumentPermission.ReadWrite,\n+        }),\n+      ]);\n+\n+      const permission = await getDocumentPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+        skipMembershipId: groupMembership.id,\n+      });\n+\n+      expect(permission).toEqual(DocumentPermission.Read);\n+    });\n+\n+    it(\"should return undefined when user does not have access\", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+\n+      const permission = await getDocumentPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+      });\n+\n+      expect(permission).toBeUndefined();\n+    });\n+  });\n+});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8225",
    "pr_id": 8225,
    "issue_id": 7680,
    "repo": "outline/outline",
    "problem_statement": "Document @mentions\nWe want to introduce the concept of mentioning documents alongside users, this would have a \"chip\" style in the same way that would show the document icon and title.\r\n\r\n",
    "issue_word_count": 31,
    "test_files_count": 3,
    "non_test_files_count": 72,
    "pr_changed_files": [
      "app/actions/definitions/documents.tsx",
      "app/actions/sections.ts",
      "app/components/Collection/CollectionForm.tsx",
      "app/components/CommandBar/useRecentDocumentActions.tsx",
      "app/components/CommandBar/useTemplatesAction.tsx",
      "app/components/DocumentBreadcrumb.tsx",
      "app/components/DocumentCard.tsx",
      "app/components/DocumentExplorer.tsx",
      "app/components/DocumentListItem.tsx",
      "app/components/Editor.tsx",
      "app/components/IconPicker/index.tsx",
      "app/components/Icons/CollectionIcon.tsx",
      "app/components/Sidebar/components/DocumentLink.tsx",
      "app/components/Sidebar/components/SharedDocumentLink.tsx",
      "app/components/Sidebar/hooks/useDragAndDrop.tsx",
      "app/components/Sidebar/hooks/useSidebarLabelAndIcon.tsx",
      "app/editor/components/LinkEditor.tsx",
      "app/editor/components/LinkSearchResult.tsx",
      "app/editor/components/LinkToolbar.tsx",
      "app/editor/components/MentionMenu.tsx",
      "app/editor/components/SelectionToolbar.tsx",
      "app/editor/components/SuggestionsMenu.tsx",
      "app/editor/components/SuggestionsMenuItem.tsx",
      "app/editor/extensions/PasteHandler.ts",
      "app/editor/index.tsx",
      "app/hooks/useDictionary.ts",
      "app/hooks/useEditorClickHandlers.ts",
      "app/menus/TemplatesMenu.tsx",
      "app/scenes/Collection/index.tsx",
      "app/scenes/Document/Shared.tsx",
      "app/scenes/Document/components/DataLoader.tsx",
      "app/scenes/Document/components/Document.tsx",
      "app/scenes/Document/components/DocumentTitle.tsx",
      "app/scenes/Document/components/Header.tsx",
      "app/scenes/Document/components/MeasuredContainer.tsx",
      "app/scenes/Document/components/PublicBreadcrumb.tsx",
      "app/scenes/Document/components/ReferenceListItem.tsx",
      "app/stores/DocumentsStore.ts",
      "app/stores/base/Store.ts",
      "app/utils/ApiClient.ts",
      "server/emails/templates/DocumentMentionedEmail.tsx",
      "server/models/helpers/DocumentHelper.tsx",
      "server/models/helpers/NotificationHelper.ts",
      "server/models/helpers/ProseMirrorHelper.test.ts",
      "server/models/helpers/ProsemirrorHelper.tsx",
      "server/queues/processors/BacklinksProcessor.test.ts",
      "server/queues/processors/BacklinksProcessor.ts",
      "server/queues/tasks/CommentCreatedNotificationsTask.ts",
      "server/queues/tasks/CommentUpdatedNotificationsTask.ts",
      "server/queues/tasks/DocumentPublishedNotificationsTask.ts",
      "server/queues/tasks/RevisionCreatedNotificationsTask.ts",
      "server/routes/api/comments/comments.ts",
      "server/routes/api/documents/documents.ts",
      "server/routes/api/documents/schema.ts",
      "server/routes/api/index.ts",
      "server/routes/api/suggestions/index.ts",
      "server/routes/api/suggestions/schema.ts",
      "server/routes/api/suggestions/suggestions.ts",
      "server/routes/api/urls/urls.ts",
      "server/utils/parseDocumentIds.test.ts",
      "server/utils/parseDocumentIds.ts",
      "server/validation.ts",
      "shared/components/EmojiIcon.tsx",
      "shared/components/Icon.tsx",
      "shared/editor/components/Mentions.tsx",
      "shared/editor/components/Styles.ts",
      "shared/editor/embeds/Berrycast.tsx",
      "shared/editor/marks/Link.tsx",
      "shared/editor/nodes/Mention.tsx",
      "shared/editor/types/index.ts",
      "shared/hooks/useComponentSize.ts",
      "shared/hooks/useStores.ts",
      "shared/i18n/locales/en_US/translation.json",
      "shared/types.ts",
      "shared/utils/urls.ts"
    ],
    "pr_changed_test_files": [
      "server/models/helpers/ProseMirrorHelper.test.ts",
      "server/queues/processors/BacklinksProcessor.test.ts",
      "server/utils/parseDocumentIds.test.ts"
    ],
    "base_commit": "79df75e09d20f2a3717aeeb1c8341551ab9ceeb9",
    "head_commit": "54a5deb6a5a79ec2901396abc2db73e60b5707e3",
    "repo_url": "https://github.com/outline/outline/pull/8225",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8225",
    "dockerfile": "",
    "pr_merged_at": "2025-01-17T23:56:39.000Z",
    "patch": "diff --git a/app/actions/definitions/documents.tsx b/app/actions/definitions/documents.tsx\nindex 8a556391b9a1..2b26305f01a5 100644\n--- a/app/actions/definitions/documents.tsx\n+++ b/app/actions/definitions/documents.tsx\n@@ -32,6 +32,7 @@ import {\n } from \"outline-icons\";\n import * as React from \"react\";\n import { toast } from \"sonner\";\n+import Icon from \"@shared/components/Icon\";\n import {\n   ExportContentType,\n   TeamPreference,\n@@ -46,7 +47,6 @@ import DocumentPublish from \"~/scenes/DocumentPublish\";\n import DeleteDocumentsInTrash from \"~/scenes/Trash/components/DeleteDocumentsInTrash\";\n import ConfirmationDialog from \"~/components/ConfirmationDialog\";\n import DocumentCopy from \"~/components/DocumentCopy\";\n-import Icon from \"~/components/Icon\";\n import MarkdownIcon from \"~/components/Icons/MarkdownIcon\";\n import SharePopover from \"~/components/Sharing/Document\";\n import { getHeaderExpandedKey } from \"~/components/Sidebar/components/Header\";\n\ndiff --git a/app/actions/sections.ts b/app/actions/sections.ts\nindex b434143c2998..3a5369b8842b 100644\n--- a/app/actions/sections.ts\n+++ b/app/actions/sections.ts\n@@ -13,6 +13,8 @@ export const DeveloperSection = ({ t }: ActionContext) => t(\"Debug\");\n \n export const DocumentSection = ({ t }: ActionContext) => t(\"Document\");\n \n+export const DocumentsSection = ({ t }: ActionContext) => t(\"Documents\");\n+\n export const ActiveDocumentSection = ({ t, stores }: ActionContext) => {\n   const activeDocument = stores.documents.active;\n   return `${t(\"Document\")} · ${activeDocument?.titleWithDefault}`;\n@@ -34,6 +36,8 @@ export const NotificationSection = ({ t }: ActionContext) => t(\"Notification\");\n \n export const UserSection = ({ t }: ActionContext) => t(\"People\");\n \n+UserSection.priority = 0.5;\n+\n export const TeamSection = ({ t }: ActionContext) => t(\"Workspace\");\n \n export const RecentSearchesSection = ({ t }: ActionContext) =>\n\ndiff --git a/app/components/Collection/CollectionForm.tsx b/app/components/Collection/CollectionForm.tsx\nindex 28b31c31f629..8e308d0927e8 100644\n--- a/app/components/Collection/CollectionForm.tsx\n+++ b/app/components/Collection/CollectionForm.tsx\n@@ -3,6 +3,7 @@ import * as React from \"react\";\n import { Controller, useForm } from \"react-hook-form\";\n import { Trans, useTranslation } from \"react-i18next\";\n import styled from \"styled-components\";\n+import Icon from \"@shared/components/Icon\";\n import { randomElement } from \"@shared/random\";\n import { CollectionPermission } from \"@shared/types\";\n import { IconLibrary } from \"@shared/utils/IconLibrary\";\n@@ -11,7 +12,6 @@ import { CollectionValidation } from \"@shared/validations\";\n import Collection from \"~/models/Collection\";\n import Button from \"~/components/Button\";\n import Flex from \"~/components/Flex\";\n-import Icon from \"~/components/Icon\";\n import Input from \"~/components/Input\";\n import InputSelectPermission from \"~/components/InputSelectPermission\";\n import Switch from \"~/components/Switch\";\n\ndiff --git a/app/components/CommandBar/useRecentDocumentActions.tsx b/app/components/CommandBar/useRecentDocumentActions.tsx\nindex 7a84f637204b..92d18a5137ea 100644\n--- a/app/components/CommandBar/useRecentDocumentActions.tsx\n+++ b/app/components/CommandBar/useRecentDocumentActions.tsx\n@@ -1,6 +1,6 @@\n import { DocumentIcon } from \"outline-icons\";\n import * as React from \"react\";\n-import Icon from \"~/components/Icon\";\n+import Icon from \"@shared/components/Icon\";\n import { createAction } from \"~/actions\";\n import { RecentSection } from \"~/actions/sections\";\n import useStores from \"~/hooks/useStores\";\n\ndiff --git a/app/components/CommandBar/useTemplatesAction.tsx b/app/components/CommandBar/useTemplatesAction.tsx\nindex 16e25618f2e7..0ceacbf087cf 100644\n--- a/app/components/CommandBar/useTemplatesAction.tsx\n+++ b/app/components/CommandBar/useTemplatesAction.tsx\n@@ -1,6 +1,6 @@\n import { NewDocumentIcon, ShapesIcon } from \"outline-icons\";\n import * as React from \"react\";\n-import Icon from \"~/components/Icon\";\n+import Icon from \"@shared/components/Icon\";\n import { createAction } from \"~/actions\";\n import {\n   ActiveCollectionSection,\n\ndiff --git a/app/components/DocumentBreadcrumb.tsx b/app/components/DocumentBreadcrumb.tsx\nindex bd639d07bf7f..4fe98a1c6821 100644\n--- a/app/components/DocumentBreadcrumb.tsx\n+++ b/app/components/DocumentBreadcrumb.tsx\n@@ -3,10 +3,10 @@ import { ArchiveIcon, GoToIcon, ShapesIcon, TrashIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import styled from \"styled-components\";\n+import Icon from \"@shared/components/Icon\";\n import type { NavigationNode } from \"@shared/types\";\n import Document from \"~/models/Document\";\n import Breadcrumb from \"~/components/Breadcrumb\";\n-import Icon from \"~/components/Icon\";\n import CollectionIcon from \"~/components/Icons/CollectionIcon\";\n import { useLocationSidebarContext } from \"~/hooks/useLocationSidebarContext\";\n import usePolicy from \"~/hooks/usePolicy\";\n\ndiff --git a/app/components/DocumentCard.tsx b/app/components/DocumentCard.tsx\nindex 1097680916f1..e483207619fd 100644\n--- a/app/components/DocumentCard.tsx\n+++ b/app/components/DocumentCard.tsx\n@@ -7,6 +7,7 @@ import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { Link } from \"react-router-dom\";\n import styled, { useTheme } from \"styled-components\";\n+import Icon from \"@shared/components/Icon\";\n import Squircle from \"@shared/components/Squircle\";\n import { s, ellipsis } from \"@shared/styles\";\n import { IconType } from \"@shared/types\";\n@@ -14,7 +15,6 @@ import { determineIconType } from \"@shared/utils/icon\";\n import Document from \"~/models/Document\";\n import Pin from \"~/models/Pin\";\n import Flex from \"~/components/Flex\";\n-import Icon from \"~/components/Icon\";\n import NudeButton from \"~/components/NudeButton\";\n import Time from \"~/components/Time\";\n import useStores from \"~/hooks/useStores\";\n\ndiff --git a/app/components/DocumentExplorer.tsx b/app/components/DocumentExplorer.tsx\nindex 81fee827a379..677f6d9dd4c8 100644\n--- a/app/components/DocumentExplorer.tsx\n+++ b/app/components/DocumentExplorer.tsx\n@@ -14,12 +14,12 @@ import { FixedSizeList as List } from \"react-window\";\n import scrollIntoView from \"scroll-into-view-if-needed\";\n import styled, { useTheme } from \"styled-components\";\n import breakpoint from \"styled-components-breakpoint\";\n+import Icon from \"@shared/components/Icon\";\n import { NavigationNode } from \"@shared/types\";\n import { isModKey } from \"@shared/utils/keyboard\";\n import DocumentExplorerNode from \"~/components/DocumentExplorerNode\";\n import DocumentExplorerSearchResult from \"~/components/DocumentExplorerSearchResult\";\n import Flex from \"~/components/Flex\";\n-import Icon from \"~/components/Icon\";\n import CollectionIcon from \"~/components/Icons/CollectionIcon\";\n import { Outline } from \"~/components/Input\";\n import InputSearch from \"~/components/InputSearch\";\n\ndiff --git a/app/components/DocumentListItem.tsx b/app/components/DocumentListItem.tsx\nindex 71906091953c..0db389d0ff91 100644\n--- a/app/components/DocumentListItem.tsx\n+++ b/app/components/DocumentListItem.tsx\n@@ -9,13 +9,13 @@ import { Link } from \"react-router-dom\";\n import styled, { css } from \"styled-components\";\n import breakpoint from \"styled-components-breakpoint\";\n import EventBoundary from \"@shared/components/EventBoundary\";\n+import Icon from \"@shared/components/Icon\";\n import { s } from \"@shared/styles\";\n import Document from \"~/models/Document\";\n import Badge from \"~/components/Badge\";\n import DocumentMeta from \"~/components/DocumentMeta\";\n import Flex from \"~/components/Flex\";\n import Highlight from \"~/components/Highlight\";\n-import Icon from \"~/components/Icon\";\n import NudeButton from \"~/components/NudeButton\";\n import StarButton, { AnimatedStar } from \"~/components/Star\";\n import Tooltip from \"~/components/Tooltip\";\n\ndiff --git a/app/components/Editor.tsx b/app/components/Editor.tsx\nindex 21a9652ab394..6e7151fe28f5 100644\n--- a/app/components/Editor.tsx\n+++ b/app/components/Editor.tsx\n@@ -1,6 +1,4 @@\n-import deburr from \"lodash/deburr\";\n import difference from \"lodash/difference\";\n-import sortBy from \"lodash/sortBy\";\n import { observer } from \"mobx-react\";\n import { DOMParser as ProsemirrorDOMParser } from \"prosemirror-model\";\n import { TextSelection } from \"prosemirror-state\";\n@@ -9,10 +7,7 @@ import { mergeRefs } from \"react-merge-refs\";\n import { Optional } from \"utility-types\";\n import insertFiles from \"@shared/editor/commands/insertFiles\";\n import { AttachmentPreset } from \"@shared/types\";\n-import { dateLocale, dateToRelative } from \"@shared/utils/date\";\n import { getDataTransferFiles } from \"@shared/utils/files\";\n-import parseDocumentSlug from \"@shared/utils/parseDocumentSlug\";\n-import { isInternalUrl } from \"@shared/utils/urls\";\n import { AttachmentValidation } from \"@shared/validations\";\n import ClickablePadding from \"~/components/ClickablePadding\";\n import ErrorBoundary from \"~/components/ErrorBoundary\";\n@@ -22,12 +17,8 @@ import useDictionary from \"~/hooks/useDictionary\";\n import useEditorClickHandlers from \"~/hooks/useEditorClickHandlers\";\n import useEmbeds from \"~/hooks/useEmbeds\";\n import useStores from \"~/hooks/useStores\";\n-import useUserLocale from \"~/hooks/useUserLocale\";\n-import { NotFoundError } from \"~/utils/errors\";\n import { uploadFile } from \"~/utils/files\";\n import lazyWithRetry from \"~/utils/lazyWithRetry\";\n-import DocumentBreadcrumb from \"./DocumentBreadcrumb\";\n-import Icon from \"./Icon\";\n \n const LazyLoadedEditor = lazyWithRetry(() => import(\"~/editor\"));\n \n@@ -50,76 +41,13 @@ export type Props = Optional<\n function Editor(props: Props, ref: React.RefObject<SharedEditor> | null) {\n   const { id, shareId, onChange, onCreateCommentMark, onDeleteCommentMark } =\n     props;\n-  const userLocale = useUserLocale();\n-  const locale = dateLocale(userLocale);\n-  const { comments, documents } = useStores();\n+  const { comments } = useStores();\n   const dictionary = useDictionary();\n   const embeds = useEmbeds(!shareId);\n   const localRef = React.useRef<SharedEditor>();\n   const preferences = useCurrentUser({ rejectOnEmpty: false })?.preferences;\n   const previousCommentIds = React.useRef<string[]>();\n \n-  const handleSearchLink = React.useCallback(\n-    async (term: string) => {\n-      if (isInternalUrl(term)) {\n-        // search for exact internal document\n-        const slug = parseDocumentSlug(term);\n-        if (!slug) {\n-          return [];\n-        }\n-\n-        try {\n-          const document = await documents.fetch(slug);\n-          const time = dateToRelative(Date.parse(document.updatedAt), {\n-            addSuffix: true,\n-            shorten: true,\n-            locale,\n-          });\n-\n-          return [\n-            {\n-              title: document.title,\n-              subtitle: `Updated ${time}`,\n-              url: document.url,\n-              icon: document.icon ? (\n-                <Icon\n-                  value={document.icon}\n-                  color={document.color ?? undefined}\n-                />\n-              ) : undefined,\n-            },\n-          ];\n-        } catch (error) {\n-          // NotFoundError could not find document for slug\n-          if (!(error instanceof NotFoundError)) {\n-            throw error;\n-          }\n-        }\n-      }\n-\n-      // default search for anything that doesn't look like a URL\n-      const results = await documents.searchTitles({ query: term });\n-\n-      return sortBy(\n-        results.map(({ document }) => ({\n-          title: document.title,\n-          subtitle: <DocumentBreadcrumb document={document} onlyText />,\n-          url: document.url,\n-          icon: document.icon ? (\n-            <Icon value={document.icon} color={document.color ?? undefined} />\n-          ) : undefined,\n-        })),\n-        (document) =>\n-          deburr(document.title)\n-            .toLowerCase()\n-            .startsWith(deburr(term).toLowerCase())\n-            ? -1\n-            : 1\n-      );\n-    },\n-    [locale, documents]\n-  );\n-\n   const handleUploadFile = React.useCallback(\n     async (file: File) => {\n       const result = await uploadFile(file, {\n@@ -263,7 +191,6 @@ function Editor(props: Props, ref: React.RefObject<SharedEditor> | null) {\n           dictionary={dictionary}\n           {...props}\n           onClickLink={handleClickLink}\n-          onSearchLink={handleSearchLink}\n           onChange={handleChange}\n           placeholder={props.placeholder || \"\"}\n           defaultValue={props.defaultValue || \"\"}\n\ndiff --git a/app/components/IconPicker/index.tsx b/app/components/IconPicker/index.tsx\nindex c087673f2156..fd12e4bfdbf1 100644\n--- a/app/components/IconPicker/index.tsx\n+++ b/app/components/IconPicker/index.tsx\n@@ -10,12 +10,12 @@ import {\n   useTabState,\n } from \"reakit\";\n import styled, { css } from \"styled-components\";\n+import Icon from \"@shared/components/Icon\";\n import { s } from \"@shared/styles\";\n import theme from \"@shared/styles/theme\";\n import { IconType } from \"@shared/types\";\n import { determineIconType } from \"@shared/utils/icon\";\n import Flex from \"~/components/Flex\";\n-import Icon from \"~/components/Icon\";\n import NudeButton from \"~/components/NudeButton\";\n import Popover from \"~/components/Popover\";\n import useMobile from \"~/hooks/useMobile\";\n\ndiff --git a/app/components/Icons/CollectionIcon.tsx b/app/components/Icons/CollectionIcon.tsx\nindex 14cf595d5895..c3982f0223cc 100644\n--- a/app/components/Icons/CollectionIcon.tsx\n+++ b/app/components/Icons/CollectionIcon.tsx\n@@ -2,9 +2,9 @@ import { observer } from \"mobx-react\";\n import { CollectionIcon, PrivateCollectionIcon } from \"outline-icons\";\n import { getLuminance } from \"polished\";\n import * as React from \"react\";\n+import Icon from \"@shared/components/Icon\";\n import { colorPalette } from \"@shared/utils/collections\";\n import Collection from \"~/models/Collection\";\n-import Icon from \"~/components/Icon\";\n import useStores from \"~/hooks/useStores\";\n \n type Props = {\n\ndiff --git a/app/components/Sidebar/components/DocumentLink.tsx b/app/components/Sidebar/components/DocumentLink.tsx\nindex cacae9337065..cc70202a5b7b 100644\n--- a/app/components/Sidebar/components/DocumentLink.tsx\n+++ b/app/components/Sidebar/components/DocumentLink.tsx\n@@ -5,13 +5,13 @@ import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { Link } from \"react-router-dom\";\n import styled from \"styled-components\";\n+import Icon from \"@shared/components/Icon\";\n import { NavigationNode } from \"@shared/types\";\n import { sortNavigationNodes } from \"@shared/utils/collections\";\n import { DocumentValidation } from \"@shared/validations\";\n import Collection from \"~/models/Collection\";\n import Document from \"~/models/Document\";\n import Fade from \"~/components/Fade\";\n-import Icon from \"~/components/Icon\";\n import NudeButton from \"~/components/NudeButton\";\n import Tooltip from \"~/components/Tooltip\";\n import useBoolean from \"~/hooks/useBoolean\";\n\ndiff --git a/app/components/Sidebar/components/SharedDocumentLink.tsx b/app/components/Sidebar/components/SharedDocumentLink.tsx\nindex 9c1e70e03d93..05cc000f117e 100644\n--- a/app/components/Sidebar/components/SharedDocumentLink.tsx\n+++ b/app/components/Sidebar/components/SharedDocumentLink.tsx\n@@ -2,10 +2,10 @@ import includes from \"lodash/includes\";\n import { observer } from \"mobx-react\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n+import Icon from \"@shared/components/Icon\";\n import { NavigationNode } from \"@shared/types\";\n import Collection from \"~/models/Collection\";\n import Document from \"~/models/Document\";\n-import Icon from \"~/components/Icon\";\n import useStores from \"~/hooks/useStores\";\n import { sharedDocumentPath } from \"~/utils/routeHelpers\";\n import { descendants } from \"~/utils/tree\";\n\ndiff --git a/app/components/Sidebar/hooks/useDragAndDrop.tsx b/app/components/Sidebar/hooks/useDragAndDrop.tsx\nindex 26ce3759ba72..8a342e76bf14 100644\n--- a/app/components/Sidebar/hooks/useDragAndDrop.tsx\n+++ b/app/components/Sidebar/hooks/useDragAndDrop.tsx\n@@ -6,6 +6,7 @@ import { getEmptyImage } from \"react-dnd-html5-backend\";\n import { useTranslation } from \"react-i18next\";\n import { toast } from \"sonner\";\n import { useTheme } from \"styled-components\";\n+import Icon from \"@shared/components/Icon\";\n import { NavigationNode } from \"@shared/types\";\n import Collection from \"~/models/Collection\";\n import Document from \"~/models/Document\";\n@@ -13,7 +14,6 @@ import GroupMembership from \"~/models/GroupMembership\";\n import Star from \"~/models/Star\";\n import UserMembership from \"~/models/UserMembership\";\n import ConfirmMoveDialog from \"~/components/ConfirmMoveDialog\";\n-import Icon from \"~/components/Icon\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n import useStores from \"~/hooks/useStores\";\n import { DragObject } from \"../components/SidebarLink\";\n\ndiff --git a/app/components/Sidebar/hooks/useSidebarLabelAndIcon.tsx b/app/components/Sidebar/hooks/useSidebarLabelAndIcon.tsx\nindex b729fb0d2308..b292674353b2 100644\n--- a/app/components/Sidebar/hooks/useSidebarLabelAndIcon.tsx\n+++ b/app/components/Sidebar/hooks/useSidebarLabelAndIcon.tsx\n@@ -1,6 +1,6 @@\n import { DocumentIcon } from \"outline-icons\";\n import * as React from \"react\";\n-import Icon from \"~/components/Icon\";\n+import Icon from \"@shared/components/Icon\";\n import CollectionIcon from \"~/components/Icons/CollectionIcon\";\n import useStores from \"~/hooks/useStores\";\n \n\ndiff --git a/app/editor/components/LinkEditor.tsx b/app/editor/components/LinkEditor.tsx\nindex e442d49ed063..2ed8e15973de 100644\n--- a/app/editor/components/LinkEditor.tsx\n+++ b/app/editor/components/LinkEditor.tsx\n@@ -1,43 +1,24 @@\n-import {\n-  ArrowIcon,\n-  DocumentIcon,\n-  CloseIcon,\n-  PlusIcon,\n-  OpenIcon,\n-} from \"outline-icons\";\n+import { ArrowIcon, CloseIcon, OpenIcon } from \"outline-icons\";\n import { Mark } from \"prosemirror-model\";\n import { Selection } from \"prosemirror-state\";\n import { EditorView } from \"prosemirror-view\";\n import * as React from \"react\";\n import { toast } from \"sonner\";\n import styled from \"styled-components\";\n-import { s, hideScrollbars } from \"@shared/styles\";\n import { isInternalUrl, sanitizeUrl } from \"@shared/utils/urls\";\n import Flex from \"~/components/Flex\";\n-import { ResizingHeightContainer } from \"~/components/ResizingHeightContainer\";\n-import Scrollable from \"~/components/Scrollable\";\n import { Dictionary } from \"~/hooks/useDictionary\";\n import Logger from \"~/utils/Logger\";\n import Input from \"./Input\";\n-import LinkSearchResult from \"./LinkSearchResult\";\n import ToolbarButton from \"./ToolbarButton\";\n import Tooltip from \"./Tooltip\";\n \n-export type SearchResult = {\n-  title: string;\n-  subtitle?: React.ReactNode;\n-  icon?: React.ReactNode;\n-  url: string;\n-};\n-\n type Props = {\n   mark?: Mark;\n   from: number;\n   to: number;\n   dictionary: Dictionary;\n   onRemoveLink?: () => void;\n-  onCreateLink?: (title: string, nested?: boolean) => Promise<void>;\n-  onSearchLink?: (term: string) => Promise<SearchResult[]>;\n   onSelectLink: (options: {\n     href: string;\n     title?: string;\n@@ -52,46 +33,25 @@ type Props = {\n };\n \n type State = {\n-  results: {\n-    [keyword: string]: SearchResult[];\n-  };\n   value: string;\n   previousValue: string;\n-  selectedIndex: number;\n };\n \n class LinkEditor extends React.Component<Props, State> {\n   discardInputValue = false;\n   initialValue = this.href;\n   initialSelectionLength = this.props.to - this.props.from;\n-  resultsRef = React.createRef<HTMLDivElement>();\n   inputRef = React.createRef<HTMLInputElement>();\n \n   state: State = {\n-    selectedIndex: -1,\n     value: this.href,\n     previousValue: \"\",\n-    results: {},\n   };\n \n   get href(): string {\n     return sanitizeUrl(this.props.mark?.attrs.href) ?? \"\";\n   }\n \n-  get selectedText(): string {\n-    const { state } = this.props.view;\n-    const selectionText = state.doc.cut(\n-      state.selection.from,\n-      state.selection.to\n-    ).textContent;\n-\n-    return selectionText.trim();\n-  }\n-\n-  get suggestedLinkTitle(): string {\n-    return this.state.value.trim() || this.selectedText;\n-  }\n-\n   componentDidMount(): void {\n     window.addEventListener(\"keydown\", this.handleGlobalKeyDown);\n   }\n@@ -139,25 +99,12 @@ class LinkEditor extends React.Component<Props, State> {\n   };\n \n   handleKeyDown = (event: React.KeyboardEvent): void => {\n-    const results = this.results;\n-\n     switch (event.key) {\n       case \"Enter\": {\n         event.preventDefault();\n-        const { selectedIndex, value } = this.state;\n-        const { onCreateLink } = this.props;\n-\n-        if (selectedIndex >= 0) {\n-          const result = results[selectedIndex];\n-          if (result) {\n-            this.save(result.url, result.title);\n-          } else if (onCreateLink && selectedIndex === results.length) {\n-            void this.handleCreateLink(this.suggestedLinkTitle);\n-          }\n-        } else {\n-          // saves the raw input as href\n-          this.save(value, value);\n-        }\n+        const { value } = this.state;\n+\n+        this.save(value, value);\n \n         if (this.initialSelectionLength) {\n           this.moveSelectionToEnd();\n@@ -176,45 +123,9 @@ class LinkEditor extends React.Component<Props, State> {\n         }\n         return;\n       }\n-\n-      case \"ArrowUp\": {\n-        if (event.shiftKey) {\n-          return;\n-        }\n-        event.preventDefault();\n-        event.stopPropagation();\n-        const prevIndex = this.state.selectedIndex - 1;\n-\n-        this.setState({\n-          selectedIndex: Math.max(-1, prevIndex),\n-        });\n-        return;\n-      }\n-\n-      case \"ArrowDown\":\n-      case \"Tab\": {\n-        if (event.shiftKey) {\n-          return;\n-        }\n-\n-        event.preventDefault();\n-        event.stopPropagation();\n-        const { selectedIndex } = this.state;\n-        const total = results.length + 1;\n-        const nextIndex = selectedIndex + 1;\n-\n-        this.setState({\n-          selectedIndex: Math.min(nextIndex, total),\n-        });\n-        return;\n-      }\n     }\n   };\n \n-  handleFocusLink = (selectedIndex: number) => {\n-    this.setState({ selectedIndex });\n-  };\n-\n   handleSearch = async (\n     event: React.ChangeEvent<HTMLInputElement>\n   ): Promise<void> => {\n@@ -222,21 +133,15 @@ class LinkEditor extends React.Component<Props, State> {\n \n     this.setState({\n       value,\n-      selectedIndex: -1,\n     });\n \n-    const trimmedValue = value.trim() || this.selectedText;\n+    const trimmedValue = value.trim();\n \n-    if (trimmedValue && this.props.onSearchLink) {\n+    if (trimmedValue) {\n       try {\n-        const results = await this.props.onSearchLink(trimmedValue);\n-        this.setState((state) => ({\n-          results: {\n-            ...state.results,\n-            [trimmedValue]: results,\n-          },\n+        this.setState({\n           previousValue: trimmedValue,\n-        }));\n+        });\n       } catch (err) {\n         Logger.error(\"Error searching for link\", err);\n       }\n@@ -257,20 +162,6 @@ class LinkEditor extends React.Component<Props, State> {\n     }\n   };\n \n-  handleCreateLink = async (title: string, nested?: boolean) => {\n-    this.discardInputValue = true;\n-    const { onCreateLink } = this.props;\n-\n-    title = title.trim();\n-    if (title.length === 0) {\n-      return;\n-    }\n-\n-    if (onCreateLink) {\n-      return onCreateLink(title, nested);\n-    }\n-  };\n-\n   handleRemoveLink = (): void => {\n     this.discardInputValue = true;\n \n@@ -285,16 +176,6 @@ class LinkEditor extends React.Component<Props, State> {\n     view.focus();\n   };\n \n-  handleSelectLink =\n-    (url: string, title: string) => (event: React.MouseEvent) => {\n-      event.preventDefault();\n-      this.save(url, title);\n-\n-      if (this.initialSelectionLength) {\n-        this.moveSelectionToEnd();\n-      }\n-    };\n-\n   moveSelectionToEnd = () => {\n     const { to, view } = this.props;\n     const { state, dispatch } = view;\n@@ -305,42 +186,17 @@ class LinkEditor extends React.Component<Props, State> {\n     view.focus();\n   };\n \n-  get results() {\n-    const { value } = this.state;\n-    return (\n-      this.state.results[value.trim()] ||\n-      this.state.results[this.state.previousValue] ||\n-      []\n-    );\n-  }\n-\n   render() {\n     const { dictionary } = this.props;\n-    const { value, selectedIndex } = this.state;\n-    const results = this.results;\n-    const looksLikeUrl = value.match(/^https?:\\/\\//i);\n-    const suggestedLinkTitle = this.suggestedLinkTitle;\n+    const { value } = this.state;\n     const isInternal = isInternalUrl(value);\n \n-    const showCreateLink =\n-      !!this.props.onCreateLink &&\n-      !(suggestedLinkTitle === this.initialValue) &&\n-      suggestedLinkTitle.length > 0 &&\n-      !looksLikeUrl;\n-\n-    const hasResults =\n-      !!suggestedLinkTitle && (showCreateLink || results.length > 0);\n-\n     return (\n       <Wrapper>\n         <Input\n           ref={this.inputRef}\n           value={value}\n-          placeholder={\n-            showCreateLink\n-              ? dictionary.findOrCreateDoc\n-              : dictionary.searchOrPasteLink\n-          }\n+          placeholder={dictionary.enterLink}\n           onKeyDown={this.handleKeyDown}\n           onPaste={this.handlePaste}\n           onChange={this.handleSearch}\n@@ -360,70 +216,6 @@ class LinkEditor extends React.Component<Props, State> {\n             <CloseIcon />\n           </ToolbarButton>\n         </Tooltip>\n-\n-        <SearchResults\n-          ref={this.resultsRef}\n-          $hasResults={hasResults}\n-          role=\"menu\"\n-        >\n-          <ResizingHeightContainer>\n-            {hasResults && (\n-              <>\n-                {results.map((result, index) => (\n-                  <LinkSearchResult\n-                    key={result.url}\n-                    title={result.title}\n-                    subtitle={result.subtitle}\n-                    icon={result.icon ?? <DocumentIcon />}\n-                    onPointerMove={() => this.handleFocusLink(index)}\n-                    onClick={this.handleSelectLink(result.url, result.title)}\n-                    selected={index === selectedIndex}\n-                    containerRef={this.resultsRef}\n-                  />\n-                ))}\n-\n-                {showCreateLink && (\n-                  <>\n-                    <LinkSearchResult\n-                      key=\"create\"\n-                      containerRef={this.resultsRef}\n-                      title={suggestedLinkTitle}\n-                      subtitle={dictionary.createNewDoc}\n-                      icon={<PlusIcon />}\n-                      onPointerMove={() => this.handleFocusLink(results.length)}\n-                      onClick={async () => {\n-                        await this.handleCreateLink(suggestedLinkTitle);\n-\n-                        if (this.initialSelectionLength) {\n-                          this.moveSelectionToEnd();\n-                        }\n-                      }}\n-                      selected={results.length === selectedIndex}\n-                    />\n-                    <LinkSearchResult\n-                      key=\"create-nested\"\n-                      containerRef={this.resultsRef}\n-                      title={suggestedLinkTitle}\n-                      subtitle={dictionary.createNewChildDoc}\n-                      icon={<PlusIcon />}\n-                      onPointerMove={() =>\n-                        this.handleFocusLink(results.length + 1)\n-                      }\n-                      onClick={async () => {\n-                        await this.handleCreateLink(suggestedLinkTitle, true);\n-\n-                        if (this.initialSelectionLength) {\n-                          this.moveSelectionToEnd();\n-                        }\n-                      }}\n-                      selected={results.length + 1 === selectedIndex}\n-                    />\n-                  </>\n-                )}\n-              </>\n-            )}\n-          </ResizingHeightContainer>\n-        </SearchResults>\n       </Wrapper>\n     );\n   }\n@@ -434,29 +226,4 @@ const Wrapper = styled(Flex)`\n   gap: 8px;\n `;\n \n-const SearchResults = styled(Scrollable)<{ $hasResults: boolean }>`\n-  background: ${s(\"menuBackground\")};\n-  box-shadow: ${(props) => (props.$hasResults ? s(\"menuShadow\") : \"none\")};\n-  clip-path: inset(0px -100px -100px -100px);\n-  position: absolute;\n-  top: 100%;\n-  width: 100%;\n-  height: auto;\n-  left: 0;\n-  margin-top: -6px;\n-  border-radius: 0 0 4px 4px;\n-  padding: ${(props) => (props.$hasResults ? \"8px 0\" : \"0\")};\n-  max-height: 240px;\n-  ${hideScrollbars()}\n-\n-  @media (hover: none) and (pointer: coarse) {\n-    position: fixed;\n-    top: auto;\n-    bottom: 40px;\n-    border-radius: 0;\n-    max-height: 50vh;\n-    padding: 8px 8px 4px;\n-  }\n-`;\n-\n export default LinkEditor;\n\ndiff --git a/app/editor/components/LinkSearchResult.tsx b/app/editor/components/LinkSearchResult.tsx\ndeleted file mode 100644\nindex 95de9954b4e2..000000000000\n--- a/app/editor/components/LinkSearchResult.tsx\n+++ /dev/null\n@@ -1,109 +0,0 @@\n-import * as React from \"react\";\n-import scrollIntoView from \"scroll-into-view-if-needed\";\n-import styled, { css } from \"styled-components\";\n-import { s, ellipsis } from \"@shared/styles\";\n-\n-type Props = React.HTMLAttributes<HTMLDivElement> & {\n-  icon: React.ReactNode;\n-  selected: boolean;\n-  title: React.ReactNode;\n-  subtitle?: React.ReactNode;\n-  containerRef: React.RefObject<HTMLDivElement>;\n-};\n-\n-function LinkSearchResult({\n-  title,\n-  subtitle,\n-  containerRef,\n-  selected,\n-  icon,\n-  ...rest\n-}: Props) {\n-  const ref = React.useCallback(\n-    (node: HTMLElement | null) => {\n-      if (selected && node) {\n-        scrollIntoView(node, {\n-          scrollMode: \"if-needed\",\n-          block: \"center\",\n-          boundary: (parent) =>\n-            // Prevents body and other parent elements from being scrolled\n-            parent !== containerRef.current,\n-        });\n-      }\n-    },\n-    [containerRef, selected]\n-  );\n-\n-  return (\n-    <ListItem\n-      ref={ref}\n-      compact={!subtitle}\n-      selected={selected}\n-      role=\"menuitem\"\n-      {...rest}\n-    >\n-      <IconWrapper selected={selected}>{icon}</IconWrapper>\n-      <Content>\n-        <Title title={title}>{title}</Title>\n-        {subtitle ? <Subtitle selected={selected}>{subtitle}</Subtitle> : null}\n-      </Content>\n-    </ListItem>\n-  );\n-}\n-\n-const Content = styled.div`\n-  overflow: hidden;\n-`;\n-\n-const IconWrapper = styled.span<{ selected: boolean }>`\n-  flex-shrink: 0;\n-  margin-right: 4px;\n-  height: 24px;\n-  opacity: 0.8;\n-\n-  ${(props) =>\n-    props.selected &&\n-    css`\n-      svg {\n-        fill: ${s(\"accentText\")};\n-        color: ${s(\"accentText\")};\n-      }\n-    `};\n-`;\n-\n-const ListItem = styled.div<{\n-  selected: boolean;\n-  compact: boolean;\n-}>`\n-  display: flex;\n-  align-items: center;\n-  padding: 8px;\n-  border-radius: 4px;\n-  margin: 0 6px;\n-  color: ${(props) => (props.selected ? s(\"accentText\") : s(\"textSecondary\"))};\n-  background: ${(props) => (props.selected ? s(\"accent\") : \"transparent\")};\n-  font-family: ${s(\"fontFamily\")};\n-  text-decoration: none;\n-  overflow: hidden;\n-  white-space: nowrap;\n-  cursor: var(--pointer);\n-  user-select: none;\n-  line-height: ${(props) => (props.compact ? \"inherit\" : \"1.2\")};\n-  height: ${(props) => (props.compact ? \"28px\" : \"auto\")};\n-`;\n-\n-const Title = styled.div`\n-  ${ellipsis()}\n-  font-size: 14px;\n-  font-weight: 500;\n-`;\n-\n-const Subtitle = styled.div<{\n-  selected: boolean;\n-}>`\n-  ${ellipsis()}\n-  font-size: 13px;\n-  opacity: ${(props) => (props.selected ? 0.75 : 0.5)};\n-`;\n-\n-export default LinkSearchResult;\n\ndiff --git a/app/editor/components/LinkToolbar.tsx b/app/editor/components/LinkToolbar.tsx\ndeleted file mode 100644\nindex 92707544b4ae..000000000000\n--- a/app/editor/components/LinkToolbar.tsx\n+++ /dev/null\n@@ -1,146 +0,0 @@\n-import { EditorView } from \"prosemirror-view\";\n-import * as React from \"react\";\n-import createAndInsertLink from \"@shared/editor/commands/createAndInsertLink\";\n-import { creatingUrlPrefix } from \"@shared/utils/urls\";\n-import useDictionary from \"~/hooks/useDictionary\";\n-import useEventListener from \"~/hooks/useEventListener\";\n-import { useEditor } from \"./EditorContext\";\n-import FloatingToolbar from \"./FloatingToolbar\";\n-import LinkEditor, { SearchResult } from \"./LinkEditor\";\n-\n-type Props = {\n-  isActive: boolean;\n-  onCreateLink?: (title: string) => Promise<string>;\n-  onSearchLink?: (term: string) => Promise<SearchResult[]>;\n-  onClickLink: (\n-    href: string,\n-    event: React.MouseEvent<HTMLButtonElement>\n-  ) => void;\n-  onClose: () => void;\n-};\n-\n-function isActive(view: EditorView, active: boolean): boolean {\n-  try {\n-    const { selection } = view.state;\n-    const paragraph = view.domAtPos(selection.from);\n-    return active && !!paragraph.node;\n-  } catch (err) {\n-    return false;\n-  }\n-}\n-\n-export default function LinkToolbar({\n-  onCreateLink,\n-  onSearchLink,\n-  onClickLink,\n-  onClose,\n-  ...rest\n-}: Props) {\n-  const dictionary = useDictionary();\n-  const { view } = useEditor();\n-  const menuRef = React.useRef<HTMLDivElement>(null);\n-\n-  useEventListener(\"mousedown\", (event: Event) => {\n-    if (\n-      event.target instanceof HTMLElement &&\n-      menuRef.current &&\n-      menuRef.current.contains(event.target)\n-    ) {\n-      return;\n-    }\n-    onClose();\n-  });\n-\n-  const handleOnCreateLink = React.useCallback(\n-    async (title: string, nested?: boolean) => {\n-      onClose();\n-      view.focus();\n-\n-      if (!onCreateLink) {\n-        return;\n-      }\n-\n-      const { dispatch, state } = view;\n-      const { from, to } = state.selection;\n-      if (from !== to) {\n-        // selection must be collapsed\n-        return;\n-      }\n-\n-      const href = `${creatingUrlPrefix}#${title}…`;\n-\n-      // Insert a placeholder link\n-      dispatch(\n-        view.state.tr\n-          .insertText(title, from, to)\n-          .addMark(\n-            from,\n-            to + title.length,\n-            state.schema.marks.link.create({ href })\n-          )\n-      );\n-\n-      return createAndInsertLink(view, title, href, {\n-        nested,\n-        onCreateLink,\n-        dictionary,\n-      });\n-    },\n-    [onCreateLink, onClose, view, dictionary]\n-  );\n-\n-  const handleOnSelectLink = React.useCallback(\n-    ({\n-      href,\n-      title,\n-    }: {\n-      href: string;\n-      title: string;\n-      from: number;\n-      to: number;\n-    }) => {\n-      onClose();\n-      view.focus();\n-\n-      const { dispatch, state } = view;\n-      const { from, to } = state.selection;\n-      if (from !== to) {\n-        // selection must be collapsed\n-        return;\n-      }\n-\n-      dispatch(\n-        view.state.tr\n-          .insertText(title, from, to)\n-          .addMark(\n-            from,\n-            to + title.length,\n-            state.schema.marks.link.create({ href })\n-          )\n-      );\n-    },\n-    [onClose, view]\n-  );\n-\n-  const { selection } = view.state;\n-  const active = isActive(view, rest.isActive);\n-\n-  return (\n-    <FloatingToolbar ref={menuRef} active={active} width={336}>\n-      {active && (\n-        <LinkEditor\n-          key={`${selection.from}-${selection.to}`}\n-          from={selection.from}\n-          to={selection.to}\n-          onCreateLink={onCreateLink ? handleOnCreateLink : undefined}\n-          onSelectLink={handleOnSelectLink}\n-          onRemoveLink={onClose}\n-          onClickLink={onClickLink}\n-          onSearchLink={onSearchLink}\n-          dictionary={dictionary}\n-          view={view}\n-        />\n-      )}\n-    </FloatingToolbar>\n-  );\n-}\n\ndiff --git a/app/editor/components/MentionMenu.tsx b/app/editor/components/MentionMenu.tsx\nindex 8f7c33028d16..87dc7c95d3c5 100644\n--- a/app/editor/components/MentionMenu.tsx\n+++ b/app/editor/components/MentionMenu.tsx\n@@ -1,15 +1,20 @@\n+import { isEmail } from \"class-validator\";\n import { observer } from \"mobx-react\";\n+import { DocumentIcon, PlusIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { useLocation } from \"react-router-dom\";\n import { toast } from \"sonner\";\n import { v4 } from \"uuid\";\n+import Icon from \"@shared/components/Icon\";\n import { MenuItem } from \"@shared/editor/types\";\n import { MentionType } from \"@shared/types\";\n import parseDocumentSlug from \"@shared/utils/parseDocumentSlug\";\n+import Document from \"~/models/Document\";\n import User from \"~/models/User\";\n import { Avatar, AvatarSize } from \"~/components/Avatar\";\n import Flex from \"~/components/Flex\";\n+import { DocumentsSection, UserSection } from \"~/actions/sections\";\n import useRequest from \"~/hooks/useRequest\";\n import useStores from \"~/hooks/useStores\";\n import { client } from \"~/utils/ApiClient\";\n@@ -19,9 +24,6 @@ import SuggestionsMenu, {\n import SuggestionsMenuItem from \"./SuggestionsMenuItem\";\n \n interface MentionItem extends MenuItem {\n-  name: string;\n-  user: User;\n-  appendSpace: boolean;\n   attrs: {\n     id: string;\n     type: MentionType;\n@@ -40,17 +42,22 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n   const [loaded, setLoaded] = React.useState(false);\n   const [items, setItems] = React.useState<MentionItem[]>([]);\n   const { t } = useTranslation();\n-  const { auth, users } = useStores();\n+  const { auth, documents, users } = useStores();\n+  const actorId = auth.currentUserId;\n   const location = useLocation();\n   const documentId = parseDocumentSlug(location.pathname);\n-  const { data, loading, request } = useRequest(\n-    React.useCallback(\n-      () =>\n-        documentId\n-          ? users.fetchPage({ id: documentId, query: search })\n-          : Promise.resolve([]),\n-      [users, documentId, search]\n-    )\n+  const { data, loading, request } = useRequest<{\n+    documents: Document[];\n+    users: User[];\n+  }>(\n+    React.useCallback(async () => {\n+      const res = await client.post(\"/suggestions.mention\", { query: search });\n+\n+      return {\n+        documents: res.data.documents.map(documents.add),\n+        users: res.data.users.map(users.add),\n+      };\n+    }, [search, documents, users])\n   );\n \n   React.useEffect(() => {\n@@ -60,28 +67,92 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n   }, [request, isActive]);\n \n   React.useEffect(() => {\n-    if (data && !loading) {\n-      const items = data.map((user) => ({\n-        name: \"mention\",\n-        user,\n-        title: user.name,\n-        appendSpace: true,\n-        attrs: {\n-          id: v4(),\n-          type: MentionType.User,\n-          modelId: user.id,\n-          actorId: auth.currentUserId ?? undefined,\n-          label: user.name,\n-        },\n-      }));\n+    if (data && actorId && !loading) {\n+      const items = data.users\n+        .map(\n+          (user) =>\n+            ({\n+              name: \"mention\",\n+              icon: (\n+                <Flex\n+                  align=\"center\"\n+                  justify=\"center\"\n+                  style={{ width: 24, height: 24 }}\n+                >\n+                  <Avatar\n+                    model={user}\n+                    showBorder={false}\n+                    alt={t(\"Profile picture\")}\n+                    size={AvatarSize.Small}\n+                  />\n+                </Flex>\n+              ),\n+              title: user.name,\n+              section: UserSection,\n+              appendSpace: true,\n+              attrs: {\n+                id: v4(),\n+                type: MentionType.User,\n+                modelId: user.id,\n+                actorId,\n+                label: user.name,\n+              },\n+            } as MentionItem)\n+        )\n+        .concat(\n+          data.documents.map(\n+            (doc) =>\n+              ({\n+                name: \"mention\",\n+                icon: doc.icon ? (\n+                  <Icon value={doc.icon} color={doc.color ?? undefined} />\n+                ) : (\n+                  <DocumentIcon />\n+                ),\n+                title: doc.title,\n+                subtitle: doc.collection?.name,\n+                section: DocumentsSection,\n+                appendSpace: true,\n+                attrs: {\n+                  id: v4(),\n+                  type: MentionType.Document,\n+                  modelId: doc.id,\n+                  actorId,\n+                  label: doc.title,\n+                },\n+              } as MentionItem)\n+          )\n+        )\n+        .concat([\n+          {\n+            name: \"link\",\n+            icon: <PlusIcon />,\n+            title: search?.trim(),\n+            section: DocumentsSection,\n+            subtitle: t(\"Create a new doc\"),\n+            visible: !!search && !isEmail(search),\n+            priority: -1,\n+            appendSpace: true,\n+            attrs: {\n+              id: v4(),\n+              type: MentionType.Document,\n+              modelId: v4(),\n+              actorId,\n+              label: search,\n+            },\n+          } as MentionItem,\n+        ]);\n \n       setItems(items);\n       setLoaded(true);\n     }\n-  }, [auth.currentUserId, loading, data]);\n+  }, [t, actorId, loading, search, data]);\n \n   const handleSelect = React.useCallback(\n     async (item: MentionItem) => {\n+      if (item.attrs.type === MentionType.Document) {\n+        return;\n+      }\n       // Check if the mentioned user has access to the document\n       const res = await client.post(\"/documents.users\", {\n         id: documentId,\n@@ -125,21 +196,9 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n         <SuggestionsMenuItem\n           onClick={options.onClick}\n           selected={options.selected}\n+          subtitle={item.subtitle}\n           title={item.title}\n-          icon={\n-            <Flex\n-              align=\"center\"\n-              justify=\"center\"\n-              style={{ width: 24, height: 24 }}\n-            >\n-              <Avatar\n-                model={item.user}\n-                showBorder={false}\n-                alt={t(\"Profile picture\")}\n-                size={AvatarSize.Small}\n-              />\n-            </Flex>\n-          }\n+          icon={item.icon}\n         />\n       )}\n       items={items}\n\ndiff --git a/app/editor/components/SelectionToolbar.tsx b/app/editor/components/SelectionToolbar.tsx\nindex ef596eaf033f..18257785f340 100644\n--- a/app/editor/components/SelectionToolbar.tsx\n+++ b/app/editor/components/SelectionToolbar.tsx\n@@ -1,7 +1,6 @@\n import some from \"lodash/some\";\n import { EditorState, NodeSelection, TextSelection } from \"prosemirror-state\";\n import * as React from \"react\";\n-import createAndInsertLink from \"@shared/editor/commands/createAndInsertLink\";\n import filterExcessSeparators from \"@shared/editor/lib/filterExcessSeparators\";\n import { getMarkRange } from \"@shared/editor/queries/getMarkRange\";\n import { isInCode } from \"@shared/editor/queries/isInCode\";\n@@ -9,7 +8,6 @@ import { isMarkActive } from \"@shared/editor/queries/isMarkActive\";\n import { isNodeActive } from \"@shared/editor/queries/isNodeActive\";\n import { getColumnIndex, getRowIndex } from \"@shared/editor/queries/table\";\n import { MenuItem } from \"@shared/editor/types\";\n-import { creatingUrlPrefix } from \"@shared/utils/urls\";\n import useBoolean from \"~/hooks/useBoolean\";\n import useDictionary from \"~/hooks/useDictionary\";\n import useEventListener from \"~/hooks/useEventListener\";\n@@ -26,7 +24,7 @@ import getTableColMenuItems from \"../menus/tableCol\";\n import getTableRowMenuItems from \"../menus/tableRow\";\n import { useEditor } from \"./EditorContext\";\n import FloatingToolbar from \"./FloatingToolbar\";\n-import LinkEditor, { SearchResult } from \"./LinkEditor\";\n+import LinkEditor from \"./LinkEditor\";\n import ToolbarMenu from \"./ToolbarMenu\";\n \n type Props = {\n@@ -37,12 +35,10 @@ type Props = {\n   canUpdate?: boolean;\n   onOpen: () => void;\n   onClose: () => void;\n-  onSearchLink?: (term: string) => Promise<SearchResult[]>;\n   onClickLink: (\n     href: string,\n     event: MouseEvent | React.MouseEvent<HTMLButtonElement>\n   ) => void;\n-  onCreateLink?: (title: string) => Promise<string>;\n };\n \n function useIsActive(state: EditorState) {\n@@ -149,40 +145,6 @@ export default function SelectionToolbar(props: Props) {\n     };\n   }, [isActive, previousIsActive, readOnly, view]);\n \n-  const handleOnCreateLink = async (\n-    title: string,\n-    nested?: boolean\n-  ): Promise<void> => {\n-    const { onCreateLink } = props;\n-\n-    if (!onCreateLink) {\n-      return;\n-    }\n-\n-    const { dispatch, state } = view;\n-    const { from, to } = state.selection;\n-    if (from === to) {\n-      // Do not display a selection toolbar for collapsed selections\n-      return;\n-    }\n-\n-    const href = `${creatingUrlPrefix}${title}…`;\n-    const markType = state.schema.marks.link;\n-\n-    // Insert a placeholder link\n-    dispatch(\n-      view.state.tr\n-        .removeMark(from, to, markType)\n-        .addMark(from, to, markType.create({ href }))\n-    );\n-\n-    return createAndInsertLink(view, title, href, {\n-      nested,\n-      onCreateLink,\n-      dictionary,\n-    });\n-  };\n-\n   const handleOnSelectLink = ({\n     href,\n     from,\n@@ -203,8 +165,7 @@ export default function SelectionToolbar(props: Props) {\n     );\n   };\n \n-  const { onCreateLink, isTemplate, rtl, canComment, canUpdate, ...rest } =\n-    props;\n+  const { isTemplate, rtl, canComment, canUpdate, ...rest } = props;\n   const { state } = view;\n   const { selection } = state;\n   const isDividerSelection = isNodeActive(state.schema.nodes.hr)(state);\n@@ -283,8 +244,6 @@ export default function SelectionToolbar(props: Props) {\n           from={link.from}\n           to={link.to}\n           onClickLink={props.onClickLink}\n-          onSearchLink={props.onSearchLink}\n-          onCreateLink={onCreateLink ? handleOnCreateLink : undefined}\n           onSelectLink={handleOnSelectLink}\n         />\n       ) : (\n\ndiff --git a/app/editor/components/SuggestionsMenu.tsx b/app/editor/components/SuggestionsMenu.tsx\nindex dc8cd74df4fc..e3a9042d8c57 100644\n--- a/app/editor/components/SuggestionsMenu.tsx\n+++ b/app/editor/components/SuggestionsMenu.tsx\n@@ -1,7 +1,8 @@\n import commandScore from \"command-score\";\n import capitalize from \"lodash/capitalize\";\n+import orderBy from \"lodash/orderBy\";\n import * as React from \"react\";\n-import { Trans } from \"react-i18next\";\n+import { Trans, useTranslation } from \"react-i18next\";\n import { VisuallyHidden } from \"reakit/VisuallyHidden\";\n import { toast } from \"sonner\";\n import styled from \"styled-components\";\n@@ -13,6 +14,7 @@ import { MenuItem } from \"@shared/editor/types\";\n import { depths, s } from \"@shared/styles\";\n import { getEventFiles } from \"@shared/utils/files\";\n import { AttachmentValidation } from \"@shared/validations\";\n+import Header from \"~/components/ContextMenu/Header\";\n import { Portal } from \"~/components/Portal\";\n import Scrollable from \"~/components/Scrollable\";\n import useDictionary from \"~/hooks/useDictionary\";\n@@ -78,8 +80,9 @@ export type Props<T extends MenuItem = MenuItem> = {\n };\n \n function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n-  const { view, commands } = useEditor();\n+  const { view, commands, props: editorProps } = useEditor();\n   const dictionary = useDictionary();\n+  const { t } = useTranslation();\n   const hasActivated = React.useRef(false);\n   const pointerRef = React.useRef<{ clientX: number; clientY: number }>({\n     clientX: 0,\n@@ -250,6 +253,16 @@ function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n       props.onSelect?.(item);\n \n       switch (item.name) {\n+        case \"link\":\n+          insertNode({\n+            ...item,\n+            name: \"mention\",\n+          });\n+          void editorProps.onCreateLink?.({\n+            title: item.attrs.label,\n+            id: item.attrs.modelId,\n+          });\n+          return;\n         case \"image\":\n           return triggerFilePick(\n             AttachmentValidation.imageContentTypes.join(\", \")\n@@ -264,7 +277,7 @@ function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n           insertNode(item);\n       }\n     },\n-    [insertNode]\n+    [editorProps, props, insertNode]\n   );\n \n   const close = React.useCallback(() => {\n@@ -414,6 +427,10 @@ function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n         return true;\n       }\n \n+      if (item.visible === false) {\n+        return false;\n+      }\n+\n       // Some extensions may be disabled, remove corresponding menu items\n       if (\n         item.name &&\n@@ -445,16 +462,22 @@ function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n     });\n \n     return filterExcessSeparators(\n-      filtered\n-        .map((item) => ({\n+      orderBy(\n+        filtered.map((item) => ({\n           item,\n+          section:\n+            \"section\" in item && item.section && \"priority\" in item.section\n+              ? (item.section.priority as number) ?? 0\n+              : 0,\n+          priority: \"priority\" in item ? item.priority : 0,\n           score:\n             searchInput && item.title\n               ? commandScore(item.title, searchInput)\n               : 0,\n-        }))\n-        .sort((a, b) => b.score - a.score)\n-        .map(({ item }) => item)\n+        })),\n+        [\"section\", \"priority\", \"score\"],\n+        [\"desc\", \"desc\", \"desc\"]\n+      ).map(({ item }) => item)\n     );\n   }, [commands, props]);\n \n@@ -555,6 +578,7 @@ function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n \n   const { isActive, uploadFile } = props;\n   const items = filtered;\n+  let previousHeading: string | undefined;\n \n   return (\n     <Portal>\n@@ -614,18 +638,29 @@ function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n                     }\n                   };\n \n-                  return (\n-                    <ListItem\n-                      key={index}\n-                      onPointerMove={handlePointerMove}\n-                      onPointerDown={handlePointerDown}\n-                    >\n-                      {props.renderMenuItem(item as any, index, {\n-                        selected: index === selectedIndex,\n-                        onClick: () => handleClickItem(item),\n-                      })}\n-                    </ListItem>\n+                  const currentHeading =\n+                    \"section\" in item ? item.section?.({ t }) : undefined;\n+\n+                  const response = (\n+                    <>\n+                      {currentHeading !== previousHeading && (\n+                        <Header key={currentHeading}>{currentHeading}</Header>\n+                      )}\n+                      <ListItem\n+                        key={index}\n+                        onPointerMove={handlePointerMove}\n+                        onPointerDown={handlePointerDown}\n+                      >\n+                        {props.renderMenuItem(item as any, index, {\n+                          selected: index === selectedIndex,\n+                          onClick: () => handleClickItem(item),\n+                        })}\n+                      </ListItem>\n+                    </>\n                   );\n+\n+                  previousHeading = currentHeading;\n+                  return response;\n                 })}\n                 {items.length === 0 && (\n                   <ListItem>\n\ndiff --git a/app/editor/components/SuggestionsMenuItem.tsx b/app/editor/components/SuggestionsMenuItem.tsx\nindex a64d4a8df67c..23b32ee854f7 100644\n--- a/app/editor/components/SuggestionsMenuItem.tsx\n+++ b/app/editor/components/SuggestionsMenuItem.tsx\n@@ -56,7 +56,7 @@ function SuggestionsMenuItem({\n       icon={icon}\n     >\n       {title}\n-      {subtitle && <Subtitle $active={selected}>{subtitle}</Subtitle>}\n+      {subtitle && <Subtitle $active={selected}>&middot; {subtitle}</Subtitle>}\n       {shortcut && <Shortcut $active={selected}>{shortcut}</Shortcut>}\n     </MenuItem>\n   );\n\ndiff --git a/app/editor/extensions/PasteHandler.ts b/app/editor/extensions/PasteHandler.ts\nindex a16f0389744d..218597f250b8 100644\n--- a/app/editor/extensions/PasteHandler.ts\n+++ b/app/editor/extensions/PasteHandler.ts\n@@ -1,13 +1,14 @@\n import { toggleMark } from \"prosemirror-commands\";\n import { Slice } from \"prosemirror-model\";\n import { Plugin } from \"prosemirror-state\";\n+import { v4 } from \"uuid\";\n import { LANGUAGES } from \"@shared/editor/extensions/Prism\";\n import Extension from \"@shared/editor/lib/Extension\";\n import isMarkdown from \"@shared/editor/lib/isMarkdown\";\n import normalizePastedMarkdown from \"@shared/editor/lib/markdown/normalize\";\n import { isInCode } from \"@shared/editor/queries/isInCode\";\n import { isInList } from \"@shared/editor/queries/isInList\";\n-import { IconType } from \"@shared/types\";\n+import { IconType, MentionType } from \"@shared/types\";\n import { determineIconType } from \"@shared/utils/icon\";\n import parseDocumentSlug from \"@shared/utils/parseDocumentSlug\";\n import { isDocumentUrl, isUrl } from \"@shared/utils/urls\";\n@@ -185,15 +186,31 @@ export default class PasteHandler extends Extension {\n                           return;\n                         }\n                         if (document) {\n-                          const { hash } = new URL(text);\n+                          if (state.schema.nodes.mention) {\n+                            view.dispatch(\n+                              view.state.tr.replaceWith(\n+                                state.selection.from,\n+                                state.selection.to,\n+                                state.schema.nodes.mention.create({\n+                                  type: MentionType.Document,\n+                                  modelId: document.id,\n+                                  label: document.titleWithDefault,\n+                                  id: v4(),\n+                                })\n+                              )\n+                            );\n+                          } else {\n+                            const { hash } = new URL(text);\n+                            const hasEmoji =\n+                              determineIconType(document.icon) ===\n+                              IconType.Emoji;\n \n-                          const hasEmoji =\n-                            determineIconType(document.icon) === IconType.Emoji;\n+                            const title = `${\n+                              hasEmoji ? document.icon + \" \" : \"\"\n+                            }${document.titleWithDefault}`;\n \n-                          const title = `${\n-                            hasEmoji ? document.icon + \" \" : \"\"\n-                          }${document.titleWithDefault}`;\n-                          insertLink(`${document.path}${hash}`, title);\n+                            insertLink(`${document.path}${hash}`, title);\n+                          }\n                         }\n                       })\n                       .catch(() => {\n\ndiff --git a/app/editor/index.tsx b/app/editor/index.tsx\nindex eff1e015febf..0e8fe99a4cb9 100644\n--- a/app/editor/index.tsx\n+++ b/app/editor/index.tsx\n@@ -1,5 +1,6 @@\n /* global File Promise */\n import { PluginSimple } from \"markdown-it\";\n+import { observable } from \"mobx\";\n import { Observer } from \"mobx-react\";\n import { darken, transparentize } from \"polished\";\n import { baseKeymap } from \"prosemirror-commands\";\n@@ -39,18 +40,18 @@ import Mark from \"@shared/editor/marks/Mark\";\n import { basicExtensions as extensions } from \"@shared/editor/nodes\";\n import Node from \"@shared/editor/nodes/Node\";\n import ReactNode from \"@shared/editor/nodes/ReactNode\";\n-import { ComponentProps, EventType } from \"@shared/editor/types\";\n+import { ComponentProps } from \"@shared/editor/types\";\n import { ProsemirrorData, UserPreferences } from \"@shared/types\";\n import { ProsemirrorHelper } from \"@shared/utils/ProsemirrorHelper\";\n import EventEmitter from \"@shared/utils/events\";\n+import Document from \"~/models/Document\";\n import Flex from \"~/components/Flex\";\n import { PortalContext } from \"~/components/Portal\";\n import { Dictionary } from \"~/hooks/useDictionary\";\n+import { Properties } from \"~/types\";\n import Logger from \"~/utils/Logger\";\n import ComponentView from \"./components/ComponentView\";\n import EditorContext from \"./components/EditorContext\";\n-import { SearchResult } from \"./components/LinkEditor\";\n-import LinkToolbar from \"./components/LinkToolbar\";\n import { NodeViewRenderer } from \"./components/NodeViewRenderer\";\n import SelectionToolbar from \"./components/SelectionToolbar\";\n import WithTheme from \"./components/WithTheme\";\n@@ -117,13 +118,11 @@ export type Props = {\n   /** Callback when a file upload ends */\n   onFileUploadStop?: () => void;\n   /** Callback when a link is created, should return url to created document */\n-  onCreateLink?: (title: string) => Promise<string>;\n-  /** Callback when user searches for documents from link insert interface */\n-  onSearchLink?: (term: string) => Promise<SearchResult[]>;\n+  onCreateLink?: (params: Properties<Document>) => Promise<string>;\n   /** Callback when user clicks on any link in the document */\n   onClickLink: (\n     href: string,\n-    event: MouseEvent | React.MouseEvent<HTMLButtonElement>\n+    event?: MouseEvent | React.MouseEvent<HTMLButtonElement>\n   ) => void;\n   /** Callback when user presses any key with document focused */\n   onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n@@ -147,8 +146,6 @@ type State = {\n   isEditorFocused: boolean;\n   /** If the toolbar for a text selection is visible */\n   selectionToolbarOpen: boolean;\n-  /** If the insert link toolbar is visible */\n-  linkToolbarOpen: boolean;\n };\n \n /**\n@@ -178,7 +175,6 @@ export class Editor extends React.PureComponent<\n     isRTL: false,\n     isEditorFocused: false,\n     selectionToolbarOpen: false,\n-    linkToolbarOpen: false,\n   };\n \n   isInitialized = false;\n@@ -199,7 +195,7 @@ export class Editor extends React.PureComponent<\n   };\n \n   widgets: { [name: string]: (props: WidgetProps) => React.ReactElement };\n-  renderers: Set<NodeViewRenderer<ComponentProps>> = new Set();\n+  renderers: Set<NodeViewRenderer<ComponentProps>> = observable.set();\n   nodes: { [name: string]: NodeSpec };\n   marks: { [name: string]: MarkSpec };\n   commands: Record<string, CommandFactory>;\n@@ -207,11 +203,6 @@ export class Editor extends React.PureComponent<\n   events = new EventEmitter();\n   mutationObserver?: MutationObserver;\n \n-  public constructor(props: Props & ThemeProps<DefaultTheme>) {\n-    super(props);\n-    this.events.on(EventType.LinkToolbarOpen, this.handleOpenLinkToolbar);\n-  }\n-\n   /**\n    * We use componentDidMount instead of constructor as the init method requires\n    * that the dom is already mounted.\n@@ -273,7 +264,6 @@ export class Editor extends React.PureComponent<\n     if (\n       !this.isBlurred &&\n       !this.state.isEditorFocused &&\n-      !this.state.linkToolbarOpen &&\n       !this.state.selectionToolbarOpen\n     ) {\n       this.isBlurred = true;\n@@ -282,9 +272,7 @@ export class Editor extends React.PureComponent<\n \n     if (\n       this.isBlurred &&\n-      (this.state.isEditorFocused ||\n-        this.state.linkToolbarOpen ||\n-        this.state.selectionToolbarOpen)\n+      (this.state.isEditorFocused || this.state.selectionToolbarOpen)\n     ) {\n       this.isBlurred = false;\n       this.props.onFocus?.();\n@@ -783,23 +771,6 @@ export class Editor extends React.PureComponent<\n     }));\n   };\n \n-  private handleOpenLinkToolbar = () => {\n-    if (this.state.selectionToolbarOpen) {\n-      return;\n-    }\n-    this.setState((state) => ({\n-      ...state,\n-      linkToolbarOpen: true,\n-    }));\n-  };\n-\n-  private handleCloseLinkToolbar = () => {\n-    this.setState((state) => ({\n-      ...state,\n-      linkToolbarOpen: false,\n-    }));\n-  };\n-\n   public render() {\n     const { readOnly, canUpdate, grow, style, className, onKeyDown } =\n       this.props;\n@@ -837,18 +808,7 @@ export class Editor extends React.PureComponent<\n                 isTemplate={this.props.template === true}\n                 onOpen={this.handleOpenSelectionToolbar}\n                 onClose={this.handleCloseSelectionToolbar}\n-                onSearchLink={this.props.onSearchLink}\n-                onClickLink={this.props.onClickLink}\n-                onCreateLink={this.props.onCreateLink}\n-              />\n-            )}\n-            {!readOnly && this.view && this.marks.link && (\n-              <LinkToolbar\n-                isActive={this.state.linkToolbarOpen}\n-                onCreateLink={this.props.onCreateLink}\n-                onSearchLink={this.props.onSearchLink}\n                 onClickLink={this.props.onClickLink}\n-                onClose={this.handleCloseLinkToolbar}\n               />\n             )}\n             {this.widgets &&\n\ndiff --git a/app/hooks/useDictionary.ts b/app/hooks/useDictionary.ts\nindex 5ea7f68e1106..5b163435264d 100644\n--- a/app/hooks/useDictionary.ts\n+++ b/app/hooks/useDictionary.ts\n@@ -39,7 +39,7 @@ export default function useDictionary() {\n       em: t(\"Italic\"),\n       embedInvalidLink: t(\"Sorry, that link won’t work for this embed type\"),\n       file: t(\"File attachment\"),\n-      findOrCreateDoc: `${t(\"Paste a link, search, or create\")}…`,\n+      enterLink: `${t(\"Enter a link\")}…`,\n       h1: t(\"Big heading\"),\n       h2: t(\"Medium heading\"),\n       h3: t(\"Small heading\"),\n\ndiff --git a/app/hooks/useEditorClickHandlers.ts b/app/hooks/useEditorClickHandlers.ts\nindex f34f0b45d754..d37767d51a21 100644\n--- a/app/hooks/useEditorClickHandlers.ts\n+++ b/app/hooks/useEditorClickHandlers.ts\n@@ -1,9 +1,10 @@\n import * as React from \"react\";\n import { useHistory } from \"react-router-dom\";\n import { isModKey } from \"@shared/utils/keyboard\";\n-import { isInternalUrl } from \"@shared/utils/urls\";\n+import { isDocumentUrl, isInternalUrl } from \"@shared/utils/urls\";\n import { sharedDocumentPath } from \"~/utils/routeHelpers\";\n import { isHash } from \"~/utils/urls\";\n+import useStores from \"./useStores\";\n \n type Params = {\n   /** The share ID of the document being viewed, if any */\n@@ -12,8 +13,9 @@ type Params = {\n \n export default function useEditorClickHandlers({ shareId }: Params) {\n   const history = useHistory();\n+  const { documents } = useStores();\n   const handleClickLink = React.useCallback(\n-    (href: string, event: MouseEvent) => {\n+    (href: string, event?: MouseEvent) => {\n       // on page hash\n       if (isHash(href)) {\n         window.location.href = href;\n@@ -49,13 +51,20 @@ export default function useEditorClickHandlers({ shareId }: Params) {\n           navigateTo = sharedDocumentPath(shareId, navigateTo);\n         }\n \n+        if (isDocumentUrl(navigateTo)) {\n+          const document = documents.getByUrl(navigateTo);\n+          if (document) {\n+            navigateTo = document.path;\n+          }\n+        }\n+\n         // If we're navigating to a share link from a non-share link then open it in a new tab\n         if (!shareId && navigateTo.startsWith(\"/s/\")) {\n           window.open(href, \"_blank\");\n           return;\n         }\n \n-        if (!isModKey(event) && !event.shiftKey) {\n+        if (!event || (!isModKey(event) && !event.shiftKey)) {\n           history.push(navigateTo, { sidebarContext: \"collections\" }); // optimistic preference of \"collections\"\n         } else {\n           window.open(navigateTo, \"_blank\");\n\ndiff --git a/app/menus/TemplatesMenu.tsx b/app/menus/TemplatesMenu.tsx\nindex 2afb47a4f1ae..44e09c5a8673 100644\n--- a/app/menus/TemplatesMenu.tsx\n+++ b/app/menus/TemplatesMenu.tsx\n@@ -3,12 +3,12 @@ import { DocumentIcon, ShapesIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { MenuButton, useMenuState } from \"reakit/Menu\";\n+import Icon from \"@shared/components/Icon\";\n import { TextHelper } from \"@shared/utils/TextHelper\";\n import Document from \"~/models/Document\";\n import Button from \"~/components/Button\";\n import ContextMenu from \"~/components/ContextMenu\";\n import Template from \"~/components/ContextMenu/Template\";\n-import Icon from \"~/components/Icon\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n import useStores from \"~/hooks/useStores\";\n import { MenuItem } from \"~/types\";\n\ndiff --git a/app/scenes/Collection/index.tsx b/app/scenes/Collection/index.tsx\nindex f8f391c428de..a3d22b32d778 100644\n--- a/app/scenes/Collection/index.tsx\n+++ b/app/scenes/Collection/index.tsx\n@@ -12,6 +12,7 @@ import {\n } from \"react-router-dom\";\n import styled from \"styled-components\";\n import breakpoint from \"styled-components-breakpoint\";\n+import Icon, { IconTitleWrapper } from \"@shared/components/Icon\";\n import { s } from \"@shared/styles\";\n import { StatusFilter } from \"@shared/types\";\n import { colorPalette } from \"@shared/utils/collections\";\n@@ -22,7 +23,6 @@ import CenteredContent from \"~/components/CenteredContent\";\n import { CollectionBreadcrumb } from \"~/components/CollectionBreadcrumb\";\n import CollectionDescription from \"~/components/CollectionDescription\";\n import Heading from \"~/components/Heading\";\n-import Icon, { IconTitleWrapper } from \"~/components/Icon\";\n import CollectionIcon from \"~/components/Icons/CollectionIcon\";\n import InputSearchPage from \"~/components/InputSearchPage\";\n import PlaceholderList from \"~/components/List/Placeholder\";\n\ndiff --git a/app/scenes/Document/Shared.tsx b/app/scenes/Document/Shared.tsx\nindex 7f0adb5829e1..6e9e113c2394 100644\n--- a/app/scenes/Document/Shared.tsx\n+++ b/app/scenes/Document/Shared.tsx\n@@ -25,6 +25,7 @@ import useBuildTheme from \"~/hooks/useBuildTheme\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n import { usePostLoginPath } from \"~/hooks/useLastVisitedPath\";\n import useStores from \"~/hooks/useStores\";\n+import { client } from \"~/utils/ApiClient\";\n import { AuthorizationError, OfflineError } from \"~/utils/errors\";\n import isCloudHosted from \"~/utils/isCloudHosted\";\n import { changeLanguage, detectLanguage } from \"~/utils/language\";\n@@ -109,6 +110,16 @@ function SharedDocumentScene(props: Props) {\n     : undefined;\n   const theme = useBuildTheme(response?.team?.customTheme, themeOverride);\n \n+  React.useEffect(() => {\n+    if (shareId) {\n+      client.setShareId(shareId);\n+    }\n+\n+    return () => {\n+      client.setShareId(undefined);\n+    };\n+  }, [shareId]);\n+\n   React.useEffect(() => {\n     if (!user) {\n       void changeLanguage(detectLanguage(), i18n);\n\ndiff --git a/app/scenes/Document/components/DataLoader.tsx b/app/scenes/Document/components/DataLoader.tsx\nindex 43ec422d5cb2..04a3975d41a8 100644\n--- a/app/scenes/Document/components/DataLoader.tsx\n+++ b/app/scenes/Document/components/DataLoader.tsx\n@@ -14,6 +14,7 @@ import useCurrentTeam from \"~/hooks/useCurrentTeam\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n import usePolicy from \"~/hooks/usePolicy\";\n import useStores from \"~/hooks/useStores\";\n+import { Properties } from \"~/types\";\n import Logger from \"~/utils/Logger\";\n import {\n   NotFoundError,\n@@ -46,7 +47,10 @@ type Children = (options: {\n   revision: Revision | undefined;\n   abilities: Record<string, boolean>;\n   readOnly: boolean;\n-  onCreateLink: (title: string, nested?: boolean) => Promise<string>;\n+  onCreateLink: (\n+    params: Properties<Document>,\n+    nested?: boolean\n+  ) => Promise<string>;\n   sharedTree: NavigationNode | undefined;\n }) => React.ReactNode;\n \n@@ -143,7 +147,7 @@ function DataLoader({ match, children }: Props) {\n   }, [document?.id, document?.isDeleted, revisionId, views]);\n \n   const onCreateLink = React.useCallback(\n-    async (title: string, nested?: boolean) => {\n+    async (params: Properties<Document>, nested?: boolean) => {\n       if (!document) {\n         throw new Error(\"Document not loaded yet\");\n       }\n@@ -152,8 +156,8 @@ function DataLoader({ match, children }: Props) {\n         {\n           collectionId: nested ? undefined : document.collectionId,\n           parentDocumentId: nested ? document.id : document.parentDocumentId,\n-          title,\n           data: ProsemirrorHelper.getEmptyDocument(),\n+          ...params,\n         },\n         {\n           publish: document.isDraft ? undefined : true,\n\ndiff --git a/app/scenes/Document/components/Document.tsx b/app/scenes/Document/components/Document.tsx\nindex 554772194bca..f98a938b18e4 100644\n--- a/app/scenes/Document/components/Document.tsx\n+++ b/app/scenes/Document/components/Document.tsx\n@@ -45,7 +45,7 @@ import RegisterKeyDown from \"~/components/RegisterKeyDown\";\n import { SidebarContextType } from \"~/components/Sidebar/components/SidebarContext\";\n import withStores from \"~/components/withStores\";\n import type { Editor as TEditor } from \"~/editor\";\n-import { SearchResult } from \"~/editor/components/LinkEditor\";\n+import { Properties } from \"~/types\";\n import { client } from \"~/utils/ApiClient\";\n import { emojiToUrl } from \"~/utils/emoji\";\n \n@@ -90,8 +90,10 @@ type Props = WithTranslation &\n     readOnly: boolean;\n     shareId?: string;\n     tocPosition?: TOCPosition;\n-    onCreateLink?: (title: string, nested?: boolean) => Promise<string>;\n-    onSearchLink?: (term: string) => Promise<SearchResult[]>;\n+    onCreateLink?: (\n+      params: Properties<Document>,\n+      nested?: boolean\n+    ) => Promise<string>;\n   };\n \n @observer\n@@ -571,7 +573,6 @@ class DocumentScene extends React.Component<Props> {\n                         onSynced={this.onSynced}\n                         onFileUploadStart={this.onFileUploadStart}\n                         onFileUploadStop={this.onFileUploadStop}\n-                        onSearchLink={this.props.onSearchLink}\n                         onCreateLink={this.props.onCreateLink}\n                         onChangeTitle={this.handleChangeTitle}\n                         onChangeIcon={this.handleChangeIcon}\n\ndiff --git a/app/scenes/Document/components/DocumentTitle.tsx b/app/scenes/Document/components/DocumentTitle.tsx\nindex 10c15653711b..a36a61cb5218 100644\n--- a/app/scenes/Document/components/DocumentTitle.tsx\n+++ b/app/scenes/Document/components/DocumentTitle.tsx\n@@ -6,6 +6,7 @@ import * as React from \"react\";\n import { mergeRefs } from \"react-merge-refs\";\n import styled, { css } from \"styled-components\";\n import breakpoint from \"styled-components-breakpoint\";\n+import Icon, { IconTitleWrapper } from \"@shared/components/Icon\";\n import isMarkdown from \"@shared/editor/lib/isMarkdown\";\n import normalizePastedMarkdown from \"@shared/editor/lib/markdown/normalize\";\n import { extraArea, s } from \"@shared/styles\";\n@@ -19,7 +20,6 @@ import { isModKey } from \"@shared/utils/keyboard\";\n import { DocumentValidation } from \"@shared/validations\";\n import ContentEditable, { RefHandle } from \"~/components/ContentEditable\";\n import { useDocumentContext } from \"~/components/DocumentContext\";\n-import Icon, { IconTitleWrapper } from \"~/components/Icon\";\n import { PopoverButton } from \"~/components/IconPicker/components/PopoverButton\";\n import useBoolean from \"~/hooks/useBoolean\";\n import usePolicy from \"~/hooks/usePolicy\";\n\ndiff --git a/app/scenes/Document/components/Header.tsx b/app/scenes/Document/components/Header.tsx\nindex e8ca318dcc2b..f1e775c01fa3 100644\n--- a/app/scenes/Document/components/Header.tsx\n+++ b/app/scenes/Document/components/Header.tsx\n@@ -11,6 +11,7 @@ import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { Link } from \"react-router-dom\";\n import styled, { useTheme } from \"styled-components\";\n+import Icon from \"@shared/components/Icon\";\n import { NavigationNode } from \"@shared/types\";\n import { altDisplay, metaDisplay } from \"@shared/utils/keyboard\";\n import { Theme } from \"~/stores/UiStore\";\n@@ -24,7 +25,6 @@ import DocumentBreadcrumb from \"~/components/DocumentBreadcrumb\";\n import { useDocumentContext } from \"~/components/DocumentContext\";\n import Flex from \"~/components/Flex\";\n import Header from \"~/components/Header\";\n-import Icon from \"~/components/Icon\";\n import Star from \"~/components/Star\";\n import Tooltip from \"~/components/Tooltip\";\n import { publishDocument } from \"~/actions/definitions/documents\";\n\ndiff --git a/app/scenes/Document/components/MeasuredContainer.tsx b/app/scenes/Document/components/MeasuredContainer.tsx\nindex d25409930d3e..c7180dc3e4bd 100644\n--- a/app/scenes/Document/components/MeasuredContainer.tsx\n+++ b/app/scenes/Document/components/MeasuredContainer.tsx\n@@ -1,5 +1,5 @@\n import * as React from \"react\";\n-import useComponentSize from \"@shared/editor/components/hooks/useComponentSize\";\n+import useComponentSize from \"@shared/hooks/useComponentSize\";\n \n export const MeasuredContainer = <T extends React.ElementType>({\n   as: As,\n\ndiff --git a/app/scenes/Document/components/PublicBreadcrumb.tsx b/app/scenes/Document/components/PublicBreadcrumb.tsx\nindex 5b9f95b46c69..2ba7c9ffb105 100644\n--- a/app/scenes/Document/components/PublicBreadcrumb.tsx\n+++ b/app/scenes/Document/components/PublicBreadcrumb.tsx\n@@ -1,7 +1,7 @@\n import * as React from \"react\";\n+import Icon from \"@shared/components/Icon\";\n import { NavigationNode } from \"@shared/types\";\n import Breadcrumb from \"~/components/Breadcrumb\";\n-import Icon from \"~/components/Icon\";\n import { MenuInternalLink } from \"~/types\";\n import { sharedDocumentPath } from \"~/utils/routeHelpers\";\n \n\ndiff --git a/app/scenes/Document/components/ReferenceListItem.tsx b/app/scenes/Document/components/ReferenceListItem.tsx\nindex 24f12ff9f62c..808261030510 100644\n--- a/app/scenes/Document/components/ReferenceListItem.tsx\n+++ b/app/scenes/Document/components/ReferenceListItem.tsx\n@@ -3,12 +3,12 @@ import { DocumentIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { Link } from \"react-router-dom\";\n import styled from \"styled-components\";\n+import Icon from \"@shared/components/Icon\";\n import { s, ellipsis } from \"@shared/styles\";\n import { IconType, NavigationNode } from \"@shared/types\";\n import { determineIconType } from \"@shared/utils/icon\";\n import Document from \"~/models/Document\";\n import Flex from \"~/components/Flex\";\n-import Icon from \"~/components/Icon\";\n import { SidebarContextType } from \"~/components/Sidebar/components/SidebarContext\";\n import { hover } from \"~/styles\";\n import { sharedDocumentPath } from \"~/utils/routeHelpers\";\n\ndiff --git a/app/stores/DocumentsStore.ts b/app/stores/DocumentsStore.ts\nindex 9c7ab2bbe2d9..2c71e71f9896 100644\n--- a/app/stores/DocumentsStore.ts\n+++ b/app/stores/DocumentsStore.ts\n@@ -825,7 +825,10 @@ export default class DocumentsStore extends Store<Document> {\n   };\n \n   getByUrl = (url = \"\"): Document | undefined =>\n-    find(this.orderedData, (doc) => url.endsWith(doc.urlId));\n+    find(\n+      this.orderedData,\n+      (doc) => url.endsWith(doc.urlId) || url.endsWith(doc.id)\n+    );\n \n   getCollectionForDocument(document: Document) {\n     return document.collectionId\n\ndiff --git a/app/stores/base/Store.ts b/app/stores/base/Store.ts\nindex ede7cb5e231e..fd9e29c375c8 100644\n--- a/app/stores/base/Store.ts\n+++ b/app/stores/base/Store.ts\n@@ -54,6 +54,8 @@ export default abstract class Store<T extends Model> {\n   @observable\n   isLoaded = false;\n \n+  requests: Map<string, Promise<any>> = new Map();\n+\n   model: typeof Model;\n \n   modelName: string;\n@@ -302,27 +304,43 @@ export default abstract class Store<T extends Model> {\n     if (item && !options.force) {\n       return item;\n     }\n+\n+    if (this.requests.has(id)) {\n+      return this.requests.get(id);\n+    }\n+\n     this.isFetching = true;\n \n-    try {\n-      const res = await client.post(`/${this.apiEndpoint}.info`, {\n-        id,\n-      });\n+    const promise = new Promise<T>((resolve, reject) => {\n+      client\n+        .post(`/${this.apiEndpoint}.info`, {\n+          id,\n+        })\n+        .then((res) =>\n+          runInAction(`info#${this.modelName}`, () => {\n+            invariant(res?.data, \"Data should be available\");\n+            this.addPolicies(res.policies);\n+            resolve(this.add(accessor(res)));\n+          })\n+        )\n+        .catch((err) => {\n+          if (\n+            err instanceof AuthorizationError ||\n+            err instanceof NotFoundError\n+          ) {\n+            this.remove(id);\n+          }\n \n-      return runInAction(`info#${this.modelName}`, () => {\n-        invariant(res?.data, \"Data should be available\");\n-        this.addPolicies(res.policies);\n-        return this.add(accessor(res));\n-      });\n-    } catch (err) {\n-      if (err instanceof AuthorizationError || err instanceof NotFoundError) {\n-        this.remove(id);\n-      }\n+          reject(err);\n+        })\n+        .finally(() => {\n+          this.requests.delete(id);\n+          this.isFetching = false;\n+        });\n+    });\n \n-      throw err;\n-    } finally {\n-      this.isFetching = false;\n-    }\n+    this.requests.set(id, promise);\n+    return promise;\n   }\n \n   @action\n\ndiff --git a/app/utils/ApiClient.ts b/app/utils/ApiClient.ts\nindex 7d5f295213da..f1132b72130c 100644\n--- a/app/utils/ApiClient.ts\n+++ b/app/utils/ApiClient.ts\n@@ -36,10 +36,16 @@ const fetchWithRetry = retry(fetch);\n class ApiClient {\n   baseUrl: string;\n \n+  shareId?: string;\n+\n   constructor(options: Options = {}) {\n     this.baseUrl = options.baseUrl || \"/api\";\n   }\n \n+  setShareId = (shareId: string | undefined) => {\n+    this.shareId = shareId;\n+  };\n+\n   fetch = async <T = any>(\n     path: string,\n     method: string,\n@@ -51,6 +57,14 @@ class ApiClient {\n     let urlToFetch;\n     let isJson;\n \n+    if (this.shareId) {\n+      // add to data\n+      data = {\n+        ...(data || {}),\n+        shareId: this.shareId,\n+      };\n+    }\n+\n     if (method === \"GET\") {\n       if (data) {\n         modifiedPath = `${path}?${data && queryString.stringify(data)}`;\n\ndiff --git a/server/emails/templates/DocumentMentionedEmail.tsx b/server/emails/templates/DocumentMentionedEmail.tsx\nindex 720a73c7a07b..131b5aa16387 100644\n--- a/server/emails/templates/DocumentMentionedEmail.tsx\n+++ b/server/emails/templates/DocumentMentionedEmail.tsx\n@@ -1,5 +1,6 @@\n import differenceBy from \"lodash/differenceBy\";\n import * as React from \"react\";\n+import { MentionType } from \"@shared/types\";\n import { Document, Revision } from \"@server/models\";\n import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n import { ProsemirrorHelper } from \"@server/models/helpers/ProsemirrorHelper\";\n@@ -63,12 +64,12 @@ export default class DocumentMentionedEmail extends BaseEmail<\n     }\n \n     const currMentions = DocumentHelper.parseMentions(currDoc, {\n-      type: \"user\",\n+      type: MentionType.User,\n       modelId: userId,\n     });\n     const prevMentions = prevDoc\n       ? DocumentHelper.parseMentions(prevDoc, {\n-          type: \"user\",\n+          type: MentionType.User,\n           modelId: userId,\n         })\n       : [];\n\ndiff --git a/server/models/helpers/DocumentHelper.tsx b/server/models/helpers/DocumentHelper.tsx\nindex 06cf4e7777b6..0809cdd6ffcd 100644\n--- a/server/models/helpers/DocumentHelper.tsx\n+++ b/server/models/helpers/DocumentHelper.tsx\n@@ -234,6 +234,17 @@ export class DocumentHelper {\n     return ProsemirrorHelper.parseMentions(node, options);\n   }\n \n+  /**\n+   * Parse a list of document IDs contained in a document or revision\n+   *\n+   * @param document Document or Revision\n+   * @returns An array of identifiers in passed document or revision\n+   */\n+  static parseDocumentIds(document: Document | Revision) {\n+    const node = DocumentHelper.toProsemirror(document);\n+    return ProsemirrorHelper.parseDocumentIds(node);\n+  }\n+\n   /**\n    * Generates a HTML diff between documents or revisions.\n    *\n\ndiff --git a/server/models/helpers/NotificationHelper.ts b/server/models/helpers/NotificationHelper.ts\nindex b95f1640206e..db9fa8c62f7d 100644\n--- a/server/models/helpers/NotificationHelper.ts\n+++ b/server/models/helpers/NotificationHelper.ts\n@@ -1,6 +1,6 @@\n import uniq from \"lodash/uniq\";\n import { Op } from \"sequelize\";\n-import { NotificationEventType } from \"@shared/types\";\n+import { NotificationEventType, MentionType } from \"@shared/types\";\n import Logger from \"@server/logging/Logger\";\n import {\n   User,\n@@ -82,7 +82,8 @@ export default class NotificationHelper {\n       const mentionedUserIdsInThread = contextComments\n         .flatMap((c) =>\n           ProsemirrorHelper.parseMentions(\n-            ProsemirrorHelper.toProsemirror(c.data)\n+            ProsemirrorHelper.toProsemirror(c.data),\n+            { type: MentionType.User }\n           )\n         )\n         .map((mention) => mention.modelId);\n\ndiff --git a/server/models/helpers/ProsemirrorHelper.tsx b/server/models/helpers/ProsemirrorHelper.tsx\nindex 51d35d9df370..e8f2da6e950d 100644\n--- a/server/models/helpers/ProsemirrorHelper.tsx\n+++ b/server/models/helpers/ProsemirrorHelper.tsx\n@@ -13,8 +13,9 @@ import EditorContainer from \"@shared/editor/components/Styles\";\n import embeds from \"@shared/editor/embeds\";\n import GlobalStyles from \"@shared/styles/globals\";\n import light from \"@shared/styles/theme\";\n-import { ProsemirrorData } from \"@shared/types\";\n+import { MentionType, ProsemirrorData } from \"@shared/types\";\n import { attachmentRedirectRegex } from \"@shared/utils/ProsemirrorHelper\";\n+import parseDocumentSlug from \"@shared/utils/parseDocumentSlug\";\n import { isRTL } from \"@shared/utils/rtl\";\n import { isInternalUrl } from \"@shared/utils/urls\";\n import { schema, parser } from \"@server/editor\";\n@@ -37,7 +38,7 @@ export type HTMLOptions = {\n };\n \n export type MentionAttrs = {\n-  type: string;\n+  type: MentionType;\n   label: string;\n   modelId: string;\n   actorId: string | undefined;\n@@ -165,6 +166,50 @@ export class ProsemirrorHelper {\n     return mentions;\n   }\n \n+  /**\n+   * Returns an array of document IDs referenced through links or mentions in the node.\n+   *\n+   * @param node The node to parse document IDs from\n+   * @returns An array of document IDs\n+   */\n+  static parseDocumentIds(doc: Node) {\n+    const identifiers: string[] = [];\n+\n+    doc.descendants((node: Node) => {\n+      if (\n+        node.type.name === \"mention\" &&\n+        node.attrs.type === MentionType.Document &&\n+        !identifiers.includes(node.attrs.modelId)\n+      ) {\n+        identifiers.push(node.attrs.modelId);\n+        return true;\n+      }\n+\n+      if (node.type.name === \"text\") {\n+        // get marks for text nodes\n+        node.marks.forEach((mark) => {\n+          // any of the marks identifiers?\n+          if (mark.type.name === \"link\") {\n+            const slug = parseDocumentSlug(mark.attrs.href);\n+\n+            // don't return the same link more than once\n+            if (slug && !identifiers.includes(slug)) {\n+              identifiers.push(slug);\n+            }\n+          }\n+        });\n+      }\n+\n+      if (!node.content.size) {\n+        return false;\n+      }\n+\n+      return true;\n+    });\n+\n+    return identifiers;\n+  }\n+\n   /**\n    * Find the nearest ancestor block node which contains the mention.\n    *\n\ndiff --git a/server/queues/processors/BacklinksProcessor.ts b/server/queues/processors/BacklinksProcessor.ts\nindex c457253053ac..f5831f958d4a 100644\n--- a/server/queues/processors/BacklinksProcessor.ts\n+++ b/server/queues/processors/BacklinksProcessor.ts\n@@ -1,7 +1,7 @@\n import { Op } from \"sequelize\";\n import { Document, Backlink } from \"@server/models\";\n+import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n import { Event, DocumentEvent, RevisionEvent } from \"@server/types\";\n-import parseDocumentIds from \"@server/utils/parseDocumentIds\";\n import BaseProcessor from \"./BaseProcessor\";\n \n export default class BacklinksProcessor extends BaseProcessor {\n@@ -18,7 +18,7 @@ export default class BacklinksProcessor extends BaseProcessor {\n         if (!document) {\n           return;\n         }\n-        const linkIds = parseDocumentIds(document.text);\n+        const linkIds = DocumentHelper.parseDocumentIds(document);\n         await Promise.all(\n           linkIds.map(async (linkId) => {\n             const linkedDocument = await Document.findByPk(linkId);\n@@ -52,7 +52,7 @@ export default class BacklinksProcessor extends BaseProcessor {\n           return;\n         }\n \n-        const linkIds = parseDocumentIds(document.text);\n+        const linkIds = DocumentHelper.parseDocumentIds(document);\n         const linkedDocumentIds: string[] = [];\n \n         // create or find existing backlink records for referenced docs\n\ndiff --git a/server/queues/tasks/CommentCreatedNotificationsTask.ts b/server/queues/tasks/CommentCreatedNotificationsTask.ts\nindex d02eb619394c..ebb03896a0f9 100644\n--- a/server/queues/tasks/CommentCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/CommentCreatedNotificationsTask.ts\n@@ -1,4 +1,4 @@\n-import { NotificationEventType } from \"@shared/types\";\n+import { MentionType, NotificationEventType } from \"@shared/types\";\n import subscriptionCreator from \"@server/commands/subscriptionCreator\";\n import { createContext } from \"@server/context\";\n import { Comment, Document, Notification, User } from \"@server/models\";\n@@ -40,7 +40,8 @@ export default class CommentCreatedNotificationsTask extends BaseTask<CommentEve\n     });\n \n     const mentions = ProsemirrorHelper.parseMentions(\n-      ProsemirrorHelper.toProsemirror(comment.data)\n+      ProsemirrorHelper.toProsemirror(comment.data),\n+      { type: MentionType.User }\n     );\n     const userIdsMentioned: string[] = [];\n \n\ndiff --git a/server/queues/tasks/CommentUpdatedNotificationsTask.ts b/server/queues/tasks/CommentUpdatedNotificationsTask.ts\nindex f02fb56394b2..08a93f05aa0d 100644\n--- a/server/queues/tasks/CommentUpdatedNotificationsTask.ts\n+++ b/server/queues/tasks/CommentUpdatedNotificationsTask.ts\n@@ -1,6 +1,6 @@\n import invariant from \"invariant\";\n import { Op } from \"sequelize\";\n-import { NotificationEventType } from \"@shared/types\";\n+import { MentionType, NotificationEventType } from \"@shared/types\";\n import { Comment, Document, Notification, User } from \"@server/models\";\n import { ProsemirrorHelper } from \"@server/models/helpers/ProsemirrorHelper\";\n import { CommentEvent, CommentUpdateEvent } from \"@server/types\";\n@@ -37,7 +37,8 @@ export default class CommentUpdatedNotificationsTask extends BaseTask<CommentEve\n     }\n \n     const mentions = ProsemirrorHelper.parseMentions(\n-      ProsemirrorHelper.toProsemirror(comment.data)\n+      ProsemirrorHelper.toProsemirror(comment.data),\n+      { type: MentionType.User }\n     ).filter((mention) => newMentionIds.includes(mention.id));\n     const userIdsMentioned: string[] = [];\n \n@@ -99,7 +100,9 @@ export default class CommentUpdatedNotificationsTask extends BaseTask<CommentEve\n     for (const item of commentsAndReplies) {\n       // Mentions:\n       const proseCommentData = ProsemirrorHelper.toProsemirror(item.data);\n-      const mentions = ProsemirrorHelper.parseMentions(proseCommentData);\n+      const mentions = ProsemirrorHelper.parseMentions(proseCommentData, {\n+        type: MentionType.User,\n+      });\n       const userIds = mentions.map((mention) => mention.modelId);\n \n       // Comment author:\n\ndiff --git a/server/queues/tasks/DocumentPublishedNotificationsTask.ts b/server/queues/tasks/DocumentPublishedNotificationsTask.ts\nindex bdb62c2d1160..1db0ad5aa09e 100644\n--- a/server/queues/tasks/DocumentPublishedNotificationsTask.ts\n+++ b/server/queues/tasks/DocumentPublishedNotificationsTask.ts\n@@ -1,4 +1,4 @@\n-import { NotificationEventType } from \"@shared/types\";\n+import { MentionType, NotificationEventType } from \"@shared/types\";\n import { createSubscriptionsForDocument } from \"@server/commands/subscriptionCreator\";\n import { Document, Notification, User } from \"@server/models\";\n import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n@@ -19,7 +19,9 @@ export default class DocumentPublishedNotificationsTask extends BaseTask<Documen\n     await createSubscriptionsForDocument(document, event);\n \n     // Send notifications to mentioned users first\n-    const mentions = DocumentHelper.parseMentions(document);\n+    const mentions = DocumentHelper.parseMentions(document, {\n+      type: MentionType.User,\n+    });\n     const userIdsMentioned: string[] = [];\n \n     for (const mention of mentions) {\n\ndiff --git a/server/queues/tasks/RevisionCreatedNotificationsTask.ts b/server/queues/tasks/RevisionCreatedNotificationsTask.ts\nindex fbd9e4ea9085..041815298b8d 100644\n--- a/server/queues/tasks/RevisionCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/RevisionCreatedNotificationsTask.ts\n@@ -1,7 +1,7 @@\n import { subHours } from \"date-fns\";\n import differenceBy from \"lodash/differenceBy\";\n import { Op } from \"sequelize\";\n-import { NotificationEventType } from \"@shared/types\";\n+import { MentionType, NotificationEventType } from \"@shared/types\";\n import { createSubscriptionsForDocument } from \"@server/commands/subscriptionCreator\";\n import env from \"@server/env\";\n import Logger from \"@server/logging/Logger\";\n@@ -37,8 +37,12 @@ export default class RevisionCreatedNotificationsTask extends BaseTask<RevisionE\n     }\n \n     // Send notifications to mentioned users first\n-    const oldMentions = before ? DocumentHelper.parseMentions(before) : [];\n-    const newMentions = DocumentHelper.parseMentions(document);\n+    const oldMentions = before\n+      ? DocumentHelper.parseMentions(before, { type: MentionType.User })\n+      : [];\n+    const newMentions = DocumentHelper.parseMentions(document, {\n+      type: MentionType.User,\n+    });\n     const mentions = differenceBy(newMentions, oldMentions, \"id\");\n     const userIdsMentioned: string[] = [];\n \n\ndiff --git a/server/routes/api/comments/comments.ts b/server/routes/api/comments/comments.ts\nindex 916732bfcf3a..fc6a36515275 100644\n--- a/server/routes/api/comments/comments.ts\n+++ b/server/routes/api/comments/comments.ts\n@@ -1,7 +1,11 @@\n import Router from \"koa-router\";\n import difference from \"lodash/difference\";\n import { FindOptions, Op, WhereOptions } from \"sequelize\";\n-import { CommentStatusFilter, TeamPreference } from \"@shared/types\";\n+import {\n+  CommentStatusFilter,\n+  TeamPreference,\n+  MentionType,\n+} from \"@shared/types\";\n import auth from \"@server/middlewares/authentication\";\n import { feature } from \"@server/middlewares/feature\";\n import { rateLimiter } from \"@server/middlewares/rateLimiter\";\n@@ -225,10 +229,12 @@ router.post(\n \n     if (data !== undefined) {\n       const existingMentionIds = ProsemirrorHelper.parseMentions(\n-        ProsemirrorHelper.toProsemirror(comment.data)\n+        ProsemirrorHelper.toProsemirror(comment.data),\n+        { type: MentionType.User }\n       ).map((mention) => mention.id);\n       const updatedMentionIds = ProsemirrorHelper.parseMentions(\n-        ProsemirrorHelper.toProsemirror(data)\n+        ProsemirrorHelper.toProsemirror(data),\n+        { type: MentionType.User }\n       ).map((mention) => mention.id);\n \n       newMentionIds = difference(updatedMentionIds, existingMentionIds);\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 266dcbba2927..a2af629c7828 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -1574,6 +1574,7 @@ router.post(\n   transaction(),\n   async (ctx: APIContext<T.DocumentsCreateReq>) => {\n     const {\n+      id,\n       title,\n       text,\n       icon,\n@@ -1641,6 +1642,7 @@ router.post(\n     }\n \n     const document = await documentCreator({\n+      id,\n       title,\n       text: await TextHelper.replaceImagesWithAttachments(ctx, text, user),\n       icon,\n\ndiff --git a/server/routes/api/documents/schema.ts b/server/routes/api/documents/schema.ts\nindex ac8b8fe86bbc..ee9043cb3dff 100644\n--- a/server/routes/api/documents/schema.ts\n+++ b/server/routes/api/documents/schema.ts\n@@ -327,6 +327,9 @@ export type DocumentsImportReq = z.infer<typeof DocumentsImportSchema>;\n \n export const DocumentsCreateSchema = BaseSchema.extend({\n   body: z.object({\n+    /** Id of the document to be created */\n+    id: z.string().uuid().optional(),\n+\n     /** Document title */\n     title: z.string().default(\"\"),\n \n\ndiff --git a/server/routes/api/index.ts b/server/routes/api/index.ts\nindex abad92bbe54e..35b8de968406 100644\n--- a/server/routes/api/index.ts\n+++ b/server/routes/api/index.ts\n@@ -33,6 +33,7 @@ import searches from \"./searches\";\n import shares from \"./shares\";\n import stars from \"./stars\";\n import subscriptions from \"./subscriptions\";\n+import suggestions from \"./suggestions\";\n import teams from \"./teams\";\n import urls from \"./urls\";\n import userMemberships from \"./userMemberships\";\n@@ -82,6 +83,7 @@ router.use(\"/\", searches.routes());\n router.use(\"/\", shares.routes());\n router.use(\"/\", stars.routes());\n router.use(\"/\", subscriptions.routes());\n+router.use(\"/\", suggestions.routes());\n router.use(\"/\", teams.routes());\n router.use(\"/\", integrations.routes());\n router.use(\"/\", notifications.routes());\n\ndiff --git a/server/routes/api/suggestions/index.ts b/server/routes/api/suggestions/index.ts\nnew file mode 100644\nindex 000000000000..e99f9c00dfa2\n--- /dev/null\n+++ b/server/routes/api/suggestions/index.ts\n@@ -0,0 +1 @@\n+export { default } from \"./suggestions\";\n\ndiff --git a/server/routes/api/suggestions/schema.ts b/server/routes/api/suggestions/schema.ts\nnew file mode 100644\nindex 000000000000..f8229c9d0595\n--- /dev/null\n+++ b/server/routes/api/suggestions/schema.ts\n@@ -0,0 +1,10 @@\n+import { z } from \"zod\";\n+import { BaseSchema } from \"../schema\";\n+\n+export const SuggestionsListSchema = BaseSchema.extend({\n+  body: z.object({\n+    query: z.string().optional(),\n+  }),\n+});\n+\n+export type SuggestionsListReq = z.infer<typeof SuggestionsListSchema>;\n\ndiff --git a/server/routes/api/suggestions/suggestions.ts b/server/routes/api/suggestions/suggestions.ts\nnew file mode 100644\nindex 000000000000..eac32db6db9d\n--- /dev/null\n+++ b/server/routes/api/suggestions/suggestions.ts\n@@ -0,0 +1,75 @@\n+import Router from \"koa-router\";\n+import { Op } from \"sequelize\";\n+import { Sequelize } from \"sequelize-typescript\";\n+import auth from \"@server/middlewares/authentication\";\n+import validate from \"@server/middlewares/validate\";\n+import { User } from \"@server/models\";\n+import SearchHelper from \"@server/models/helpers/SearchHelper\";\n+import { can } from \"@server/policies\";\n+import { presentDocument, presentUser } from \"@server/presenters\";\n+import { APIContext } from \"@server/types\";\n+import pagination from \"../middlewares/pagination\";\n+import * as T from \"./schema\";\n+\n+const router = new Router();\n+\n+router.post(\n+  \"suggestions.mention\",\n+  auth(),\n+  pagination(),\n+  validate(T.SuggestionsListSchema),\n+  async (ctx: APIContext<T.SuggestionsListReq>) => {\n+    const { query } = ctx.input.body;\n+    const { offset, limit } = ctx.state.pagination;\n+    const actor = ctx.state.auth.user;\n+\n+    const [documents, users] = await Promise.all([\n+      SearchHelper.searchTitlesForUser(actor, {\n+        query,\n+        offset,\n+        limit,\n+      }),\n+      User.findAll({\n+        where: {\n+          teamId: actor.teamId,\n+          suspendedAt: {\n+            [Op.eq]: null,\n+          },\n+          [Op.and]: query\n+            ? {\n+                [Op.or]: [\n+                  Sequelize.literal(\n+                    `unaccent(LOWER(email)) like unaccent(LOWER(:query))`\n+                  ),\n+                  Sequelize.literal(\n+                    `unaccent(LOWER(name)) like unaccent(LOWER(:query))`\n+                  ),\n+                ],\n+              }\n+            : {},\n+        },\n+        order: [[\"name\", \"ASC\"]],\n+        replacements: { query: `%${query}%` },\n+        offset,\n+        limit,\n+      }),\n+    ]);\n+\n+    ctx.body = {\n+      pagination: ctx.state.pagination,\n+      data: {\n+        documents: await Promise.all(\n+          documents.map((document) => presentDocument(ctx, document))\n+        ),\n+        users: users.map((user) =>\n+          presentUser(user, {\n+            includeEmail: !!can(actor, \"readEmail\", user),\n+            includeDetails: !!can(actor, \"readDetails\", user),\n+          })\n+        ),\n+      },\n+    };\n+  }\n+);\n+\n+export default router;\n\ndiff --git a/server/routes/api/urls/urls.ts b/server/routes/api/urls/urls.ts\nindex e77b985128b8..f730f1a0bd34 100644\n--- a/server/routes/api/urls/urls.ts\n+++ b/server/routes/api/urls/urls.ts\n@@ -1,6 +1,6 @@\n import dns from \"dns\";\n import Router from \"koa-router\";\n-import { UnfurlResourceType } from \"@shared/types\";\n+import { MentionType, UnfurlResourceType } from \"@shared/types\";\n import { getBaseDomain, parseDomain } from \"@shared/utils/domains\";\n import parseDocumentSlug from \"@shared/utils/parseDocumentSlug\";\n import parseMentionUrl from \"@shared/utils/parseMentionUrl\";\n@@ -36,31 +36,34 @@ router.post(\n       if (!documentId) {\n         throw ValidationError(\"Document ID is required to unfurl a mention\");\n       }\n-      const { modelId: userId } = parseMentionUrl(url);\n-\n-      const [user, document] = await Promise.all([\n-        User.findByPk(userId),\n-        Document.findByPk(documentId, {\n-          userId: actor.id,\n-        }),\n-      ]);\n-      if (!user) {\n-        throw NotFoundError(\"Mentioned user does not exist\");\n-      }\n-      if (!document) {\n-        throw NotFoundError(\"Document does not exist\");\n-      }\n-      authorize(actor, \"read\", user);\n-      authorize(actor, \"read\", document);\n+      const { modelId, mentionType } = parseMentionUrl(url);\n+\n+      // TODO: Add support for other mention types\n+      if (mentionType === MentionType.User) {\n+        const [user, document] = await Promise.all([\n+          User.findByPk(modelId),\n+          Document.findByPk(documentId, {\n+            userId: actor.id,\n+          }),\n+        ]);\n+        if (!user) {\n+          throw NotFoundError(\"Mentioned user does not exist\");\n+        }\n+        if (!document) {\n+          throw NotFoundError(\"Document does not exist\");\n+        }\n+        authorize(actor, \"read\", user);\n+        authorize(actor, \"read\", document);\n \n-      ctx.body = await presentUnfurl(\n-        {\n-          type: UnfurlResourceType.Mention,\n-          user,\n-          document,\n-        },\n-        { includeEmail: !!can(actor, \"readEmail\", user) }\n-      );\n+        ctx.body = await presentUnfurl(\n+          {\n+            type: UnfurlResourceType.Mention,\n+            user,\n+            document,\n+          },\n+          { includeEmail: !!can(actor, \"readEmail\", user) }\n+        );\n+      }\n       return;\n     }\n \n\ndiff --git a/server/utils/parseDocumentIds.ts b/server/utils/parseDocumentIds.ts\ndeleted file mode 100644\nindex 2c3dd7506658..000000000000\n--- a/server/utils/parseDocumentIds.ts\n+++ /dev/null\n@@ -1,42 +0,0 @@\n-import { Node } from \"prosemirror-model\";\n-import parseDocumentSlug from \"@shared/utils/parseDocumentSlug\";\n-import { parser } from \"@server/editor\";\n-\n-/**\n- * Parse a list of unique document identifiers contained in links in markdown\n- * text.\n- *\n- * @param text The text to parse in Markdown format\n- * @returns An array of document identifiers\n- */\n-export default function parseDocumentIds(text: string): string[] {\n-  const doc = parser.parse(text);\n-  const identifiers: string[] = [];\n-  if (!doc) {\n-    return identifiers;\n-  }\n-\n-  doc.descendants((node: Node) => {\n-    // get text nodes\n-    if (node.type.name === \"text\") {\n-      // get marks for text nodes\n-      node.marks.forEach((mark) => {\n-        // any of the marks identifiers?\n-        if (mark.type.name === \"link\") {\n-          const slug = parseDocumentSlug(mark.attrs.href);\n-\n-          // don't return the same link more than once\n-          if (slug && !identifiers.includes(slug)) {\n-            identifiers.push(slug);\n-          }\n-        }\n-      });\n-\n-      return false;\n-    }\n-\n-    return true;\n-  });\n-\n-  return identifiers;\n-}\n\ndiff --git a/server/validation.ts b/server/validation.ts\nindex d547a2d64f3a..d1f9228d7a9b 100644\n--- a/server/validation.ts\n+++ b/server/validation.ts\n@@ -4,7 +4,7 @@ import { Primitive } from \"utility-types\";\n import validator from \"validator\";\n import isIn from \"validator/lib/isIn\";\n import isUUID from \"validator/lib/isUUID\";\n-import { CollectionPermission } from \"@shared/types\";\n+import { CollectionPermission, MentionType } from \"@shared/types\";\n import { UrlHelper } from \"@shared/utils/UrlHelper\";\n import { validateColorHex } from \"@shared/utils/color\";\n import { validateIndexCharacters } from \"@shared/utils/indexCharacters\";\n@@ -247,7 +247,12 @@ export class ValidateURL {\n       }\n \n       const { id, mentionType, modelId } = parseMentionUrl(url);\n-      return id && isUUID(id) && mentionType === \"user\" && isUUID(modelId);\n+      return (\n+        id &&\n+        isUUID(id) &&\n+        Object.values(MentionType).includes(mentionType as MentionType) &&\n+        isUUID(modelId)\n+      );\n     } catch (err) {\n       return false;\n     }\n\ndiff --git a/app/components/Icons/EmojiIcon.tsx b/shared/components/EmojiIcon.tsx\nsimilarity index 96%\nrename from app/components/Icons/EmojiIcon.tsx\nrename to shared/components/EmojiIcon.tsx\nindex 6512008279be..5b448f0a2484 100644\n--- a/app/components/Icons/EmojiIcon.tsx\n+++ b/shared/components/EmojiIcon.tsx\n@@ -1,6 +1,6 @@\n import * as React from \"react\";\n import styled from \"styled-components\";\n-import { s } from \"@shared/styles\";\n+import { s } from \"../styles\";\n \n type Props = {\n   /** The emoji to render */\n\ndiff --git a/app/components/Icon.tsx b/shared/components/Icon.tsx\nsimilarity index 83%\nrename from app/components/Icon.tsx\nrename to shared/components/Icon.tsx\nindex c0e8a8081f4a..d5ea91bb454b 100644\n--- a/app/components/Icon.tsx\n+++ b/shared/components/Icon.tsx\n@@ -2,13 +2,13 @@ import { observer } from \"mobx-react\";\n import { getLuminance } from \"polished\";\n import * as React from \"react\";\n import styled from \"styled-components\";\n-import { IconType } from \"@shared/types\";\n-import { IconLibrary } from \"@shared/utils/IconLibrary\";\n-import { colorPalette } from \"@shared/utils/collections\";\n-import { determineIconType } from \"@shared/utils/icon\";\n-import EmojiIcon from \"~/components/Icons/EmojiIcon\";\n-import useStores from \"~/hooks/useStores\";\n-import Logger from \"~/utils/Logger\";\n+import useStores from \"../hooks/useStores\";\n+import { IconType } from \"../types\";\n+import { IconLibrary } from \"../utils/IconLibrary\";\n+import { colorPalette } from \"../utils/collections\";\n+import { determineIconType } from \"../utils/icon\";\n+import EmojiIcon from \"./EmojiIcon\";\n+// import Logger from \"~/utils/Logger\";\n import Flex from \"./Flex\";\n \n export type Props = {\n@@ -40,9 +40,9 @@ const Icon = ({\n   const iconType = determineIconType(icon);\n \n   if (!iconType) {\n-    Logger.warn(\"Failed to determine icon type\", {\n-      icon,\n-    });\n+    // Logger.warn(\"Failed to determine icon type\", {\n+    //   icon,\n+    // });\n     return null;\n   }\n \n@@ -62,9 +62,9 @@ const Icon = ({\n \n     return <EmojiIcon emoji={icon} size={size} className={className} />;\n   } catch (err) {\n-    Logger.warn(\"Failed to render icon\", {\n-      icon,\n-    });\n+    // Logger.warn(\"Failed to render icon\", {\n+    //   icon,\n+    // });\n   }\n \n   return null;\n@@ -80,7 +80,6 @@ const SVGIcon = observer(\n     forceColor,\n   }: Props) => {\n     const { ui } = useStores();\n-\n     let color = inputColor ?? colorPalette[0];\n \n     // If the chosen icon color is very dark then we invert it in dark mode\n\ndiff --git a/shared/editor/components/Mentions.tsx b/shared/editor/components/Mentions.tsx\nnew file mode 100644\nindex 000000000000..07737c5e8e3a\n--- /dev/null\n+++ b/shared/editor/components/Mentions.tsx\n@@ -0,0 +1,69 @@\n+import { observer } from \"mobx-react\";\n+import { DocumentIcon, EmailIcon } from \"outline-icons\";\n+import { Node } from \"prosemirror-model\";\n+import * as React from \"react\";\n+import { Link } from \"react-router-dom\";\n+import Icon from \"../../components/Icon\";\n+import useStores from \"../../hooks/useStores\";\n+import { cn } from \"../styles/utils\";\n+import { ComponentProps } from \"../types\";\n+\n+const getAttributesFromNode = (node: Node) => {\n+  const spec = node.type.spec.toDOM?.(node) as any as Record<string, string>[];\n+  const { class: className, ...attrs } = spec[1];\n+  return { className, ...attrs };\n+};\n+\n+export const MentionUser = observer(function MentionUser_(\n+  props: ComponentProps\n+) {\n+  const { isSelected, node } = props;\n+  const { users } = useStores();\n+  const user = users.get(node.attrs.modelId);\n+  const { className, ...attrs } = getAttributesFromNode(node);\n+\n+  return (\n+    <span\n+      {...attrs}\n+      className={cn(className, {\n+        \"ProseMirror-selectednode\": isSelected,\n+      })}\n+    >\n+      <EmailIcon size={18} />\n+      {user?.name || node.attrs.label}\n+    </span>\n+  );\n+});\n+\n+export const MentionDocument = observer(function MentionDocument_(\n+  props: ComponentProps\n+) {\n+  const { isSelected, node } = props;\n+  const { documents } = useStores();\n+  const doc = documents.get(node.attrs.modelId);\n+  const modelId = node.attrs.modelId;\n+  const { className, ...attrs } = getAttributesFromNode(node);\n+\n+  React.useEffect(() => {\n+    if (modelId) {\n+      void documents.prefetchDocument(modelId);\n+    }\n+  }, [modelId, documents]);\n+\n+  return (\n+    <Link\n+      {...attrs}\n+      className={cn(className, {\n+        \"ProseMirror-selectednode\": isSelected,\n+      })}\n+      to={doc?.path ?? `/doc/${node.attrs.modelId}`}\n+    >\n+      {doc?.icon ? (\n+        <Icon value={doc?.icon} color={doc?.color} size={18} />\n+      ) : (\n+        <DocumentIcon size={18} />\n+      )}\n+      {doc?.title || node.attrs.label}\n+    </Link>\n+  );\n+});\n\ndiff --git a/shared/editor/components/Styles.ts b/shared/editor/components/Styles.ts\nindex 340db4839fa1..ce02b3f1e866 100644\n--- a/shared/editor/components/Styles.ts\n+++ b/shared/editor/components/Styles.ts\n@@ -289,17 +289,31 @@ width: 100%;\n .mention {\n   background: ${props.theme.mentionBackground};\n   border-radius: 8px;\n-  padding-bottom: 2px;\n   padding-top: 1px;\n+  padding-bottom: 1px;\n   padding-left: 4px;\n-  padding-right: 4px;\n+  padding-right: 6px;\n   font-weight: 500;\n   font-size: 0.9em;\n   cursor: default;\n+  text-decoration: none !important;\n \n-  &::before {\n+  display: inline-flex;\n+  align-items: center;\n+  gap: 4px;\n+  vertical-align: bottom;\n+\n+  &:hover {\n+    cursor: default;\n+  }\n+\n+  &.mention-user::before {\n     content: \"@\";\n   }\n+\n+  &.mention-document::before {\n+    content: \"+\";\n+  }\n }\n \n > div {\n\ndiff --git a/shared/editor/embeds/Berrycast.tsx b/shared/editor/embeds/Berrycast.tsx\nindex 8a7881ececdf..f858baa31996 100644\n--- a/shared/editor/embeds/Berrycast.tsx\n+++ b/shared/editor/embeds/Berrycast.tsx\n@@ -1,6 +1,6 @@\n import * as React from \"react\";\n+import useComponentSize from \"../../hooks/useComponentSize\";\n import Frame from \"../components/Frame\";\n-import useComponentSize from \"../components/hooks/useComponentSize\";\n import { EmbedProps as Props } from \".\";\n \n export default function Berrycast({ matches, ...props }: Props) {\n\ndiff --git a/shared/editor/marks/Link.tsx b/shared/editor/marks/Link.tsx\nindex a815fcea4d84..49d967350b13 100644\n--- a/shared/editor/marks/Link.tsx\n+++ b/shared/editor/marks/Link.tsx\n@@ -14,7 +14,6 @@ import { toast } from \"sonner\";\n import { sanitizeUrl } from \"../../utils/urls\";\n import { getMarkRange } from \"../queries/getMarkRange\";\n import { isMarkActive } from \"../queries/isMarkActive\";\n-import { EventType } from \"../types\";\n import Mark from \"./Mark\";\n \n const LINK_INPUT_REGEX = /\\[([^[]+)]\\((\\S+)\\)$/;\n@@ -109,8 +108,7 @@ export default class Link extends Mark {\n     return {\n       \"Mod-k\": (state, dispatch) => {\n         if (state.selection.empty) {\n-          this.editor.events.emit(EventType.LinkToolbarOpen);\n-          return true;\n+          return false;\n         }\n \n         return toggleMark(type, { href: \"\" })(state, dispatch);\n\ndiff --git a/shared/editor/nodes/Mention.ts b/shared/editor/nodes/Mention.tsx\nsimilarity index 50%\nrename from shared/editor/nodes/Mention.ts\nrename to shared/editor/nodes/Mention.tsx\nindex 98b2cbdcbaaf..e9cadc33a8fa 100644\n--- a/shared/editor/nodes/Mention.ts\n+++ b/shared/editor/nodes/Mention.tsx\n@@ -5,17 +5,24 @@ import {\n   NodeType,\n   Schema,\n } from \"prosemirror-model\";\n-import { Command, TextSelection } from \"prosemirror-state\";\n+import {\n+  Command,\n+  NodeSelection,\n+  Plugin,\n+  TextSelection,\n+} from \"prosemirror-state\";\n+import * as React from \"react\";\n import { Primitive } from \"utility-types\";\n-import Extension from \"../lib/Extension\";\n+import { v4 as uuidv4 } from \"uuid\";\n+import env from \"../../env\";\n+import { MentionType } from \"../../types\";\n+import { MentionDocument, MentionUser } from \"../components/Mentions\";\n import { MarkdownSerializerState } from \"../lib/markdown/serializer\";\n import mentionRule from \"../rules/mention\";\n+import { ComponentProps } from \"../types\";\n+import Node from \"./Node\";\n \n-export default class Mention extends Extension {\n-  get type() {\n-    return \"node\";\n-  }\n-\n+export default class Mention extends Node {\n   get name() {\n     return \"mention\";\n   }\n@@ -39,8 +46,9 @@ export default class Mention extends Extension {\n       atom: true,\n       parseDOM: [\n         {\n-          tag: `span.${this.name}`,\n+          tag: `.${this.name}`,\n           preserveWhitespace: \"full\",\n+          priority: 100,\n           getAttrs: (dom: HTMLElement) => {\n             const type = dom.dataset.type;\n             const modelId = dom.dataset.id;\n@@ -51,7 +59,7 @@ export default class Mention extends Extension {\n             return {\n               type,\n               modelId,\n-              actorId: dom.dataset.actorId,\n+              actorId: dom.dataset.actorid,\n               label: dom.innerText,\n               id: dom.id,\n             };\n@@ -59,25 +67,97 @@ export default class Mention extends Extension {\n         },\n       ],\n       toDOM: (node) => [\n-        \"span\",\n+        node.attrs.type === MentionType.User ? \"span\" : \"a\",\n         {\n           class: `${node.type.name} use-hover-preview`,\n           id: node.attrs.id,\n+          href:\n+            node.attrs.type === MentionType.User\n+              ? undefined\n+              : `${env.URL}/doc/${node.attrs.modelId}`,\n           \"data-type\": node.attrs.type,\n           \"data-id\": node.attrs.modelId,\n-          \"data-actorId\": node.attrs.actorId,\n+          \"data-actorid\": node.attrs.actorId,\n           \"data-url\": `mention://${node.attrs.id}/${node.attrs.type}/${node.attrs.modelId}`,\n         },\n         String(node.attrs.label),\n       ],\n-      toPlainText: (node) => `@${node.attrs.label}`,\n+      toPlainText: (node) =>\n+        node.attrs.type === MentionType.User\n+          ? `@${node.attrs.label}`\n+          : node.attrs.label,\n     };\n   }\n \n+  component = (props: ComponentProps) => {\n+    switch (props.node.attrs.type) {\n+      case MentionType.User:\n+        return <MentionUser {...props} />;\n+      case MentionType.Document:\n+        return <MentionDocument {...props} />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n   get rulePlugins() {\n     return [mentionRule];\n   }\n \n+  get plugins() {\n+    return [\n+      // Ensure mentions have unique IDs\n+      new Plugin({\n+        appendTransaction: (_transactions, _oldState, newState) => {\n+          const tr = newState.tr;\n+          const existingIds = new Set();\n+          let modified = false;\n+\n+          tr.doc.descendants((node, pos) => {\n+            let nodeId = node.attrs.id;\n+            if (\n+              node.type.name === this.name &&\n+              (!nodeId || existingIds.has(nodeId))\n+            ) {\n+              nodeId = uuidv4();\n+              modified = true;\n+              tr.setNodeAttribute(pos, \"id\", nodeId);\n+            }\n+            existingIds.add(nodeId);\n+          });\n+\n+          if (modified) {\n+            return tr;\n+          }\n+\n+          return null;\n+        },\n+      }),\n+    ];\n+  }\n+\n+  keys(): Record<string, Command> {\n+    return {\n+      Enter: (state) => {\n+        const { selection } = state;\n+        if (selection instanceof NodeSelection) {\n+          const { from } = selection;\n+          const node = state.doc.nodeAt(from);\n+          if (\n+            node &&\n+            node.type.name === \"mention\" &&\n+            node.attrs.type === MentionType.Document\n+          ) {\n+            const { modelId } = node.attrs;\n+            this.editor.props.onClickLink?.(`/doc/${modelId}`);\n+            return true;\n+          }\n+        }\n+        return false;\n+      },\n+    };\n+  }\n+\n   commands({ type }: { type: NodeType; schema: Schema }) {\n     return (attrs: Record<string, Primitive>): Command =>\n       (state, dispatch) => {\n\ndiff --git a/shared/editor/types/index.ts b/shared/editor/types/index.ts\nindex 17b362352499..5282982b8d49 100644\n--- a/shared/editor/types/index.ts\n+++ b/shared/editor/types/index.ts\n@@ -1,3 +1,4 @@\n+import { TFunction } from \"i18next\";\n import { Node as ProsemirrorNode } from \"prosemirror-model\";\n import { EditorState } from \"prosemirror-state\";\n import { EditorView } from \"prosemirror-view\";\n@@ -7,24 +8,25 @@ import { Primitive } from \"utility-types\";\n \n export type PlainTextSerializer = (node: ProsemirrorNode) => string;\n \n-export enum EventType {\n-  LinkToolbarOpen = \"linkMenuOpen\",\n-}\n-\n export enum TableLayout {\n   fullWidth = \"full-width\",\n }\n \n+type Section = ({ t }: { t: TFunction }) => string;\n+\n export type MenuItem = {\n   icon?: React.ReactElement;\n   name?: string;\n   title?: string;\n+  section?: Section;\n   subtitle?: string;\n   shortcut?: string;\n   keywords?: string;\n   tooltip?: string;\n   label?: string;\n   dangerous?: boolean;\n+  /** Higher number is higher in results, default is 0. */\n+  priority?: number;\n   children?: MenuItem[];\n   defaultHidden?: boolean;\n   attrs?:\n\ndiff --git a/shared/editor/components/hooks/useComponentSize.ts b/shared/hooks/useComponentSize.ts\nsimilarity index 100%\nrename from shared/editor/components/hooks/useComponentSize.ts\nrename to shared/hooks/useComponentSize.ts\n\ndiff --git a/shared/hooks/useStores.ts b/shared/hooks/useStores.ts\nnew file mode 100644\nindex 000000000000..fb92888a90a6\n--- /dev/null\n+++ b/shared/hooks/useStores.ts\n@@ -0,0 +1,6 @@\n+import { MobXProviderContext } from \"mobx-react\";\n+import * as React from \"react\";\n+\n+export default function useStores() {\n+  return React.useContext(MobXProviderContext);\n+}\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex d3da924bc453..37558b628ce7 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -138,6 +138,7 @@\n   \"Collection\": \"Collection\",\n   \"Debug\": \"Debug\",\n   \"Document\": \"Document\",\n+  \"Documents\": \"Documents\",\n   \"Recently viewed\": \"Recently viewed\",\n   \"Revision\": \"Revision\",\n   \"Navigation\": \"Navigation\",\n@@ -302,7 +303,6 @@\n   \"Unknown\": \"Unknown\",\n   \"Mark all as read\": \"Mark all as read\",\n   \"You're all caught up\": \"You're all caught up\",\n-  \"Documents\": \"Documents\",\n   \"{{ username }} reacted with {{ emoji }}\": \"{{ username }} reacted with {{ emoji }}\",\n   \"{{ firstUsername }} and {{ secondUsername }} reacted with {{ emoji }}\": \"{{ firstUsername }} and {{ secondUsername }} reacted with {{ emoji }}\",\n   \"{{ firstUsername }} and {{ count }} others reacted with {{ emoji }}\": \"{{ firstUsername }} and {{ count }} other reacted with {{ emoji }}\",\n@@ -416,8 +416,9 @@\n   \"Replacement\": \"Replacement\",\n   \"Replace\": \"Replace\",\n   \"Replace all\": \"Replace all\",\n-  \"{{ userName }} won't be notified, as they do not have access to this document\": \"{{ userName }} won't be notified, as they do not have access to this document\",\n   \"Profile picture\": \"Profile picture\",\n+  \"Create a new doc\": \"Create a new doc\",\n+  \"{{ userName }} won't be notified, as they do not have access to this document\": \"{{ userName }} won't be notified, as they do not have access to this document\",\n   \"Add column after\": \"Add column after\",\n   \"Add column before\": \"Add column before\",\n   \"Add row after\": \"Add row after\",\n@@ -435,7 +436,6 @@\n   \"Comment\": \"Comment\",\n   \"Create link\": \"Create link\",\n   \"Sorry, an error occurred creating the link\": \"Sorry, an error occurred creating the link\",\n-  \"Create a new doc\": \"Create a new doc\",\n   \"Create a new child doc\": \"Create a new child doc\",\n   \"Delete table\": \"Delete table\",\n   \"Delete file\": \"Delete file\",\n@@ -447,7 +447,7 @@\n   \"Italic\": \"Italic\",\n   \"Sorry, that link won’t work for this embed type\": \"Sorry, that link won’t work for this embed type\",\n   \"File attachment\": \"File attachment\",\n-  \"Paste a link, search, or create\": \"Paste a link, search, or create\",\n+  \"Enter a link\": \"Enter a link\",\n   \"Big heading\": \"Big heading\",\n   \"Medium heading\": \"Medium heading\",\n   \"Small heading\": \"Small heading\",\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex c90a2c3f3a36..2133fdfaaa35 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -56,6 +56,7 @@ export enum FileOperationState {\n \n export enum MentionType {\n   User = \"user\",\n+  Document = \"document\",\n }\n \n export type PublicEnv = {\n\ndiff --git a/shared/utils/urls.ts b/shared/utils/urls.ts\nindex fad1284993ec..fa700888edbf 100644\n--- a/shared/utils/urls.ts\n+++ b/shared/utils/urls.ts\n@@ -66,7 +66,7 @@ export function isInternalUrl(href: string) {\n  */\n export function isDocumentUrl(url: string) {\n   try {\n-    const parsed = new URL(url);\n+    const parsed = new URL(url, env.URL);\n     return (\n       isInternalUrl(url) &&\n       (parsed.pathname.startsWith(\"/doc/\") || parsed.pathname.startsWith(\"/d/\"))\n",
    "test_patch": "diff --git a/server/models/helpers/ProseMirrorHelper.test.ts b/server/models/helpers/ProseMirrorHelper.test.ts\nindex 5fcc101d00f3..1329eac74880 100644\n--- a/server/models/helpers/ProseMirrorHelper.test.ts\n+++ b/server/models/helpers/ProseMirrorHelper.test.ts\n@@ -1,5 +1,5 @@\n import { DeepPartial } from \"utility-types\";\n-import { ProsemirrorData } from \"@shared/types\";\n+import { MentionType, ProsemirrorData } from \"@shared/types\";\n import { buildProseMirrorDoc } from \"@server/test/factories\";\n import { MentionAttrs, ProsemirrorHelper } from \"./ProsemirrorHelper\";\n \n@@ -8,7 +8,7 @@ describe(\"ProseMirrorHelper\", () => {\n     it(\"should return the paragraph node\", () => {\n       const mentionAttrs: MentionAttrs = {\n         id: \"31d5899f-e544-4ff6-b6d3-c49dd6b81901\",\n-        type: \"user\",\n+        type: MentionType.User,\n         label: \"test.user\",\n         actorId: \"ccec260a-e060-4925-ade8-17cfabaf2cac\",\n         modelId: \"9a17c1c8-d178-4350-9001-203a73070fcb\",\n@@ -58,7 +58,7 @@ describe(\"ProseMirrorHelper\", () => {\n     it(\"should return the heading node\", () => {\n       const mentionAttrs: MentionAttrs = {\n         id: \"31d5899f-e544-4ff6-b6d3-c49dd6b81901\",\n-        type: \"user\",\n+        type: MentionType.User,\n         label: \"test.user\",\n         actorId: \"ccec260a-e060-4925-ade8-17cfabaf2cac\",\n         modelId: \"9a17c1c8-d178-4350-9001-203a73070fcb\",\n@@ -111,7 +111,7 @@ describe(\"ProseMirrorHelper\", () => {\n     it(\"should return the table node with the mentioned row only\", () => {\n       const mentionAttrs: MentionAttrs = {\n         id: \"31d5899f-e544-4ff6-b6d3-c49dd6b81901\",\n-        type: \"user\",\n+        type: MentionType.User,\n         label: \"test.user\",\n         actorId: \"ccec260a-e060-4925-ade8-17cfabaf2cac\",\n         modelId: \"9a17c1c8-d178-4350-9001-203a73070fcb\",\n@@ -195,7 +195,7 @@ describe(\"ProseMirrorHelper\", () => {\n     it(\"should return the checkbox list with the mentioned item only\", () => {\n       const mentionAttrs: MentionAttrs = {\n         id: \"31d5899f-e544-4ff6-b6d3-c49dd6b81901\",\n-        type: \"user\",\n+        type: MentionType.User,\n         label: \"test.user\",\n         actorId: \"ccec260a-e060-4925-ade8-17cfabaf2cac\",\n         modelId: \"9a17c1c8-d178-4350-9001-203a73070fcb\",\n@@ -275,7 +275,7 @@ describe(\"ProseMirrorHelper\", () => {\n     it(\"should not return anything when the mention attrs could not be found\", () => {\n       const mentionAttrs: MentionAttrs = {\n         id: \"31d5899f-e544-4ff6-b6d3-c49dd6b81901\",\n-        type: \"user\",\n+        type: MentionType.User,\n         label: \"test.user\",\n         actorId: \"ccec260a-e060-4925-ade8-17cfabaf2cac\",\n         modelId: \"9a17c1c8-d178-4350-9001-203a73070fcb\",\n\ndiff --git a/server/queues/processors/BacklinksProcessor.test.ts b/server/queues/processors/BacklinksProcessor.test.ts\nindex 4ae37b72ad29..fff2e5e3eefe 100644\n--- a/server/queues/processors/BacklinksProcessor.test.ts\n+++ b/server/queues/processors/BacklinksProcessor.test.ts\n@@ -1,3 +1,4 @@\n+import { parser } from \"@server/editor\";\n import { Backlink } from \"@server/models\";\n import { buildDocument } from \"@server/test/factories\";\n import BacklinksProcessor from \"./BacklinksProcessor\";\n@@ -5,7 +6,7 @@ import BacklinksProcessor from \"./BacklinksProcessor\";\n const ip = \"127.0.0.1\";\n \n describe(\"documents.publish\", () => {\n-  test(\"should create new backlink records\", async () => {\n+  it(\"should create new backlink records\", async () => {\n     const otherDocument = await buildDocument();\n     const document = await buildDocument({\n       text: `[this is a link](${otherDocument.url})`,\n@@ -29,14 +30,16 @@ describe(\"documents.publish\", () => {\n     expect(backlinks.length).toBe(1);\n   });\n \n-  test(\"should not fail when linked document is destroyed\", async () => {\n+  it(\"should not fail when linked document is destroyed\", async () => {\n     const otherDocument = await buildDocument();\n     await otherDocument.destroy();\n     const document = await buildDocument({\n       version: 0,\n       text: `[ ] checklist item`,\n     });\n-    document.text = `[this is a link](${otherDocument.url})`;\n+    document.content = parser\n+      .parse(`[this is a link](${otherDocument.url})`)\n+      ?.toJSON();\n     await document.save();\n \n     const processor = new BacklinksProcessor();\n@@ -59,7 +62,7 @@ describe(\"documents.publish\", () => {\n });\n \n describe(\"documents.update\", () => {\n-  test(\"should not fail on a document with no previous revisions\", async () => {\n+  it(\"should not fail on a document with no previous revisions\", async () => {\n     const otherDocument = await buildDocument();\n     const document = await buildDocument({\n       text: `[this is a link](${otherDocument.url})`,\n@@ -84,13 +87,15 @@ describe(\"documents.update\", () => {\n     expect(backlinks.length).toBe(1);\n   });\n \n-  test(\"should not fail when previous revision is different document version\", async () => {\n+  it(\"should not fail when previous revision is different document version\", async () => {\n     const otherDocument = await buildDocument();\n     const document = await buildDocument({\n       version: undefined,\n       text: `[ ] checklist item`,\n     });\n-    document.text = `[this is a link](${otherDocument.url})`;\n+    document.content = parser\n+      .parse(`[this is a link](${otherDocument.url})`)\n+      ?.toJSON();\n     await document.save();\n \n     const processor = new BacklinksProcessor();\n@@ -112,10 +117,12 @@ describe(\"documents.update\", () => {\n     expect(backlinks.length).toBe(1);\n   });\n \n-  test(\"should create new backlink records\", async () => {\n+  it(\"should create new backlink records\", async () => {\n     const otherDocument = await buildDocument();\n     const document = await buildDocument();\n-    document.text = `[this is a link](${otherDocument.url})`;\n+    document.content = parser\n+      .parse(`[this is a link](${otherDocument.url})`)\n+      ?.toJSON();\n     await document.save();\n \n     const processor = new BacklinksProcessor();\n@@ -137,7 +144,7 @@ describe(\"documents.update\", () => {\n     expect(backlinks.length).toBe(1);\n   });\n \n-  test(\"should destroy removed backlink records\", async () => {\n+  it(\"should destroy removed backlink records\", async () => {\n     const otherDocument = await buildDocument();\n     const yetAnotherDocument = await buildDocument();\n     const document = await buildDocument({\n@@ -156,9 +163,13 @@ describe(\"documents.update\", () => {\n       data: { title: document.title },\n       ip,\n     });\n-    document.text = `First link is gone\n+    document.content = parser\n+      .parse(\n+        `First link is gone\n \n-[this is a another link](${yetAnotherDocument.url})`;\n+  [this is a another link](${yetAnotherDocument.url})`\n+      )\n+      ?.toJSON();\n     await document.save();\n \n     await processor.perform({\n@@ -182,10 +193,12 @@ describe(\"documents.update\", () => {\n });\n \n describe(\"documents.delete\", () => {\n-  test(\"should destroy related backlinks\", async () => {\n+  it(\"should destroy related backlinks\", async () => {\n     const otherDocument = await buildDocument();\n     const document = await buildDocument();\n-    document.text = `[this is a link](${otherDocument.url})`;\n+    document.content = parser\n+      .parse(`[this is a link](${otherDocument.url})`)\n+      ?.toJSON();\n     await document.save();\n \n     const processor = new BacklinksProcessor();\n\ndiff --git a/server/utils/parseDocumentIds.test.ts b/server/utils/parseDocumentIds.test.ts\ndeleted file mode 100644\nindex 2b5c7d7dd62b..000000000000\n--- a/server/utils/parseDocumentIds.test.ts\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-import parseDocumentIds from \"./parseDocumentIds\";\n-\n-it(\"should not return non links\", () => {\n-  expect(parseDocumentIds(`# Header`).length).toBe(0);\n-});\n-\n-it(\"should return an array of document ids\", () => {\n-  const result = parseDocumentIds(`# Header\n-  \n-  [internal](http://app.getoutline.com/doc/test-456733)\n-\n-  More text \n-\n-  [internal](/doc/test-123456#heading-anchor)\n-  `);\n-  expect(result.length).toBe(2);\n-  expect(result[0]).toBe(\"test-456733\");\n-  expect(result[1]).toBe(\"test-123456\");\n-});\n-\n-it(\"should return deeply nested link document ids\", () => {\n-  const result = parseDocumentIds(`# Header\n-  \n-  [internal](http://app.getoutline.com/doc/test-456733)\n-\n-  More text \n-\n-- one\n-  - two\n-    - three [internal](/doc/test-123456#heading-anchor)\n-  `);\n-  expect(result.length).toBe(2);\n-  expect(result[0]).toBe(\"test-456733\");\n-  expect(result[1]).toBe(\"test-123456\");\n-});\n-\n-it(\"should not return duplicate document ids\", () => {\n-  expect(parseDocumentIds(`# Header`).length).toBe(0);\n-  const result = parseDocumentIds(`# Header\n-  \n-  [internal](/doc/test-456733)\n-\n-  [another link to the same doc](/doc/test-456733)\n-  `);\n-  expect(result.length).toBe(1);\n-  expect(result[0]).toBe(\"test-456733\");\n-});\n-\n-it(\"should not return non document links\", () => {\n-  expect(parseDocumentIds(`[google](http://www.google.com)`).length).toBe(0);\n-});\n-\n-it(\"should not return non document relative links\", () => {\n-  expect(parseDocumentIds(`[relative](/developers)`).length).toBe(0);\n-});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8196",
    "pr_id": 8196,
    "issue_id": 8071,
    "repo": "outline/outline",
    "problem_statement": "Add parameter to return selected text with comments via API\nWhen a comment is on selected text it would be useful to be able to return that via the API.\r\n\r\nWe can get this by parsing the document state and finding the matching mark with comment ID – this will be relatively expensive and should be optional.",
    "issue_word_count": 46,
    "test_files_count": 3,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "app/scenes/Document/components/CommentThread.tsx",
      "server/presenters/comment.ts",
      "server/routes/api/comments/comments.test.ts",
      "server/routes/api/comments/comments.ts",
      "server/routes/api/comments/schema.ts",
      "server/test/factories.ts",
      "shared/utils/ProsemirrorHelper.test.ts",
      "shared/utils/ProsemirrorHelper.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/comments/comments.test.ts",
      "server/test/factories.ts",
      "shared/utils/ProsemirrorHelper.test.ts"
    ],
    "base_commit": "25f264a763aa76887d9bcccbea7c2c42b6eb78c2",
    "head_commit": "2bb83624cc10fb133d71b7bbedb0f535e200cee9",
    "repo_url": "https://github.com/outline/outline/pull/8196",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8196",
    "dockerfile": "",
    "pr_merged_at": "2025-01-07T01:13:37.000Z",
    "patch": "diff --git a/app/scenes/Document/components/CommentThread.tsx b/app/scenes/Document/components/CommentThread.tsx\nindex d4452d21c868..5be9a5a8dc81 100644\n--- a/app/scenes/Document/components/CommentThread.tsx\n+++ b/app/scenes/Document/components/CommentThread.tsx\n@@ -8,6 +8,7 @@ import styled, { css } from \"styled-components\";\n import breakpoint from \"styled-components-breakpoint\";\n import { s } from \"@shared/styles\";\n import { ProsemirrorData } from \"@shared/types\";\n+import { ProsemirrorHelper } from \"@shared/utils/ProsemirrorHelper\";\n import Comment from \"~/models/Comment\";\n import Document from \"~/models/Document\";\n import { Avatar, AvatarSize } from \"~/components/Avatar\";\n@@ -74,10 +75,10 @@ function CommentThread({\n \n   const canReply = can.comment && !thread.isResolved;\n \n-  const highlightedCommentMarks = editor\n-    ?.getComments()\n-    .filter((comment) => comment.id === thread.id);\n-  const highlightedText = highlightedCommentMarks?.map((c) => c.text).join(\"\");\n+  const highlightedText = ProsemirrorHelper.getAnchorTextForComment(\n+    editor?.getComments() ?? [],\n+    thread.id\n+  );\n \n   const commentsInThread = comments\n     .inThread(thread.id)\n\ndiff --git a/server/presenters/comment.ts b/server/presenters/comment.ts\nindex 06c10e8bb278..9440a1743458 100644\n--- a/server/presenters/comment.ts\n+++ b/server/presenters/comment.ts\n@@ -1,7 +1,29 @@\n+import { ProsemirrorHelper } from \"@shared/utils/ProsemirrorHelper\";\n import { Comment } from \"@server/models\";\n+import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n import presentUser from \"./user\";\n \n-export default function present(comment: Comment) {\n+type Options = {\n+  /** Whether to include anchor text, if it exists */\n+  includeAnchorText?: boolean;\n+};\n+\n+export default function present(\n+  comment: Comment,\n+  { includeAnchorText }: Options = {}\n+) {\n+  let anchorText: string | undefined;\n+\n+  if (includeAnchorText && comment.document) {\n+    const commentMarks = ProsemirrorHelper.getComments(\n+      DocumentHelper.toProsemirror(comment.document)\n+    );\n+    anchorText = ProsemirrorHelper.getAnchorTextForComment(\n+      commentMarks,\n+      comment.id\n+    );\n+  }\n+\n   return {\n     id: comment.id,\n     data: comment.data,\n@@ -15,5 +37,6 @@ export default function present(comment: Comment) {\n     createdAt: comment.createdAt,\n     updatedAt: comment.updatedAt,\n     reactions: comment.reactions ?? [],\n+    anchorText,\n   };\n }\n\ndiff --git a/server/routes/api/comments/comments.ts b/server/routes/api/comments/comments.ts\nindex fc826d434ea6..ffa43321a11b 100644\n--- a/server/routes/api/comments/comments.ts\n+++ b/server/routes/api/comments/comments.ts\n@@ -60,7 +60,7 @@ router.post(\n   feature(TeamPreference.Commenting),\n   validate(T.CommentsInfoSchema),\n   async (ctx: APIContext<T.CommentsInfoReq>) => {\n-    const { id } = ctx.input.body;\n+    const { id, includeAnchorText } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n     const comment = await Comment.findByPk(id, {\n@@ -72,8 +72,10 @@ router.post(\n     authorize(user, \"read\", comment);\n     authorize(user, \"read\", document);\n \n+    comment.document = document;\n+\n     ctx.body = {\n-      data: presentComment(comment),\n+      data: presentComment(comment, { includeAnchorText }),\n       policies: presentPolicies(user, [comment]),\n     };\n   }\n@@ -93,6 +95,7 @@ router.post(\n       parentCommentId,\n       statusFilter,\n       collectionId,\n+      includeAnchorText,\n     } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const statusQuery = [];\n@@ -135,6 +138,7 @@ router.post(\n         Comment.findAll(params),\n         Comment.count({ where }),\n       ]);\n+      comments.forEach((comment) => (comment.document = document));\n     } else if (collectionId) {\n       const collection = await Collection.findByPk(collectionId);\n       authorize(user, \"read\", collection);\n@@ -184,7 +188,9 @@ router.post(\n \n     ctx.body = {\n       pagination: { ...ctx.state.pagination, total },\n-      data: comments.map(presentComment),\n+      data: comments.map((comment) =>\n+        presentComment(comment, { includeAnchorText })\n+      ),\n       policies: presentPolicies(user, comments),\n     };\n   }\n\ndiff --git a/server/routes/api/comments/schema.ts b/server/routes/api/comments/schema.ts\nindex aae839fc15de..774f07292b65 100644\n--- a/server/routes/api/comments/schema.ts\n+++ b/server/routes/api/comments/schema.ts\n@@ -65,13 +65,18 @@ export const CommentsListSchema = BaseSchema.extend({\n     parentCommentId: z.string().uuid().optional(),\n     /** Comment statuses to include in results */\n     statusFilter: z.nativeEnum(CommentStatusFilter).array().optional(),\n+    /** Whether to include anchor text, if it exists */\n+    includeAnchorText: z.boolean().optional(),\n   }),\n });\n \n export type CommentsListReq = z.infer<typeof CommentsListSchema>;\n \n export const CommentsInfoSchema = z.object({\n-  body: BaseIdSchema,\n+  body: BaseIdSchema.extend({\n+    /** Whether to include anchor text, if it exists */\n+    includeAnchorText: z.boolean().optional(),\n+  }),\n });\n \n export type CommentsInfoReq = z.infer<typeof CommentsInfoSchema>;\n\ndiff --git a/shared/utils/ProsemirrorHelper.ts b/shared/utils/ProsemirrorHelper.ts\nindex be1b16a1c46f..ffa177e197a7 100644\n--- a/shared/utils/ProsemirrorHelper.ts\n+++ b/shared/utils/ProsemirrorHelper.ts\n@@ -204,6 +204,24 @@ export class ProsemirrorHelper {\n     return comments;\n   }\n \n+  /**\n+   * Builds the consolidated anchor text for the given comment-id.\n+   *\n+   * @param marks all available comment marks in a document.\n+   * @param commentId the comment-id to build the anchor text.\n+   * @returns consolidated anchor text.\n+   */\n+  static getAnchorTextForComment(\n+    marks: CommentMark[],\n+    commentId: string\n+  ): string | undefined {\n+    const anchorTexts = marks\n+      .filter((mark) => mark.id === commentId)\n+      .map((mark) => mark.text);\n+\n+    return anchorTexts.length ? anchorTexts.join(\"\") : undefined;\n+  }\n+\n   /**\n    * Iterates through the document to find all of the images.\n    *\n",
    "test_patch": "diff --git a/server/routes/api/comments/comments.test.ts b/server/routes/api/comments/comments.test.ts\nindex d33be0ec3d33..88e8695037d0 100644\n--- a/server/routes/api/comments/comments.test.ts\n+++ b/server/routes/api/comments/comments.test.ts\n@@ -1,9 +1,14 @@\n-import { CommentStatusFilter, ReactionSummary } from \"@shared/types\";\n+import {\n+  CommentStatusFilter,\n+  ProsemirrorData,\n+  ReactionSummary,\n+} from \"@shared/types\";\n import { Comment, Reaction } from \"@server/models\";\n import {\n   buildAdmin,\n   buildCollection,\n   buildComment,\n+  buildCommentMark,\n   buildDocument,\n   buildResolvedComment,\n   buildTeam,\n@@ -78,6 +83,92 @@ describe(\"#comments.info\", () => {\n     expect(body.policies[0].abilities.update).toBeTruthy();\n     expect(body.policies[0].abilities.delete).toBeTruthy();\n   });\n+\n+  it(\"should return anchor text for an anchored comment\", async () => {\n+    const anchorText = \"anchor text\";\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    const content = {\n+      type: \"doc\",\n+      content: [\n+        {\n+          type: \"paragraph\",\n+          content: [\n+            {\n+              type: \"text\",\n+              text: anchorText,\n+              marks: [buildCommentMark({ id: comment.id, userId: user.id })],\n+            },\n+          ],\n+        },\n+      ],\n+    } as ProsemirrorData;\n+    await document.update({ content });\n+\n+    const res = await server.post(\"/api/comments.info\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+        includeAnchorText: true,\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.id).toEqual(comment.id);\n+    expect(body.data.anchorText).toEqual(anchorText);\n+  });\n+\n+  it(\"should not return anchor text for a non-anchored comment\", async () => {\n+    const anchorText = \"anchor text\";\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    const content = {\n+      type: \"doc\",\n+      content: [\n+        {\n+          type: \"paragraph\",\n+          content: [\n+            {\n+              type: \"text\",\n+              text: anchorText,\n+              marks: [buildCommentMark({ userId: user.id })],\n+            },\n+          ],\n+        },\n+      ],\n+    } as ProsemirrorData;\n+    await document.update({ content });\n+\n+    const res = await server.post(\"/api/comments.info\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+        includeAnchorText: true,\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.id).toEqual(comment.id);\n+    expect(body.data.anchorText).toBeUndefined();\n+  });\n });\n \n describe(\"#comments.list\", () => {\n@@ -120,6 +211,58 @@ describe(\"#comments.list\", () => {\n     expect(body.pagination.total).toEqual(2);\n   });\n \n+  it(\"should return anchor texts for comments in a document\", async () => {\n+    const anchorText = \"anchor text\";\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const commentOne = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    const commentTwo = await buildResolvedComment(user, {\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    const content = {\n+      type: \"doc\",\n+      content: [\n+        {\n+          type: \"paragraph\",\n+          content: [\n+            {\n+              type: \"text\",\n+              text: anchorText,\n+              marks: [buildCommentMark({ id: commentOne.id, userId: user.id })],\n+            },\n+          ],\n+        },\n+      ],\n+    } as ProsemirrorData;\n+    await document.update({ content });\n+\n+    const res = await server.post(\"/api/comments.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        includeAnchorText: true,\n+        sort: \"createdAt\",\n+        direction: \"ASC\",\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(2);\n+    expect(body.data[0].id).toEqual(commentOne.id);\n+    expect(body.data[1].id).toEqual(commentTwo.id);\n+    expect(body.data[0].anchorText).toEqual(anchorText);\n+    expect(body.data[1].anchorText).toBeUndefined();\n+  });\n+\n   it(\"should return unresolved comments for a collection\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n\ndiff --git a/server/test/factories.ts b/server/test/factories.ts\nindex 1afdd8234978..6308be0c1113 100644\n--- a/server/test/factories.ts\n+++ b/server/test/factories.ts\n@@ -654,3 +654,23 @@ export function buildProseMirrorDoc(content: DeepPartial<ProsemirrorData>[]) {\n     content,\n   });\n }\n+\n+export function buildCommentMark(overrides: {\n+  id?: string;\n+  userId?: string;\n+  draft?: boolean;\n+  resolved?: boolean;\n+}) {\n+  if (!overrides.id) {\n+    overrides.id = randomstring.generate(10);\n+  }\n+\n+  if (!overrides.userId) {\n+    overrides.userId = randomstring.generate(10);\n+  }\n+\n+  return {\n+    type: \"comment\",\n+    attrs: overrides,\n+  };\n+}\n\ndiff --git a/shared/utils/ProsemirrorHelper.test.ts b/shared/utils/ProsemirrorHelper.test.ts\nnew file mode 100644\nindex 000000000000..55c6d3d0f7b0\n--- /dev/null\n+++ b/shared/utils/ProsemirrorHelper.test.ts\n@@ -0,0 +1,90 @@\n+import { CommentMark, ProsemirrorHelper } from \"./ProsemirrorHelper\";\n+\n+describe(\"ProsemirrorHelper\", () => {\n+  describe(\"getAnchorTextForComment\", () => {\n+    it(\"should return the anchor text for the comment\", async () => {\n+      const commentId = \"test-comment-id\";\n+      const anchorText = \"anchor text\";\n+      const commentMarks: CommentMark[] = [\n+        {\n+          id: commentId,\n+          userId: \"test-user-id\",\n+          text: anchorText,\n+        },\n+        {\n+          id: \"random-comment-id\",\n+          userId: \"test-user-id\",\n+          text: \"some random text\",\n+        },\n+      ];\n+\n+      const returnedAnchorText = ProsemirrorHelper.getAnchorTextForComment(\n+        commentMarks,\n+        commentId\n+      );\n+\n+      expect(returnedAnchorText).toEqual(anchorText);\n+    });\n+\n+    it(\"should return the consolidated anchor text when multiple marks are present for the comment\", async () => {\n+      const commentId = \"test-comment-id\";\n+      const anchorTextOne = \"anchor text 1\";\n+      const anchorTextTwo = \"anchor text 2\";\n+      const commentMarks: CommentMark[] = [\n+        {\n+          id: commentId,\n+          userId: \"test-user-id\",\n+          text: anchorTextOne,\n+        },\n+        {\n+          id: commentId,\n+          userId: \"test-user-id\",\n+          text: anchorTextTwo,\n+        },\n+        {\n+          id: \"random-comment-id\",\n+          userId: \"test-user-id\",\n+          text: \"some random text\",\n+        },\n+      ];\n+\n+      const returnedAnchorText = ProsemirrorHelper.getAnchorTextForComment(\n+        commentMarks,\n+        commentId\n+      );\n+\n+      expect(returnedAnchorText).toEqual(`${anchorTextOne}${anchorTextTwo}`);\n+    });\n+\n+    it(\"should return undefined when no comment mark matches the provided comment\", async () => {\n+      const commentId = \"test-comment-id\";\n+      const commentMarks: CommentMark[] = [\n+        {\n+          id: \"random-comment-id-1\",\n+          userId: \"test-user-id\",\n+          text: \"some random text\",\n+        },\n+        {\n+          id: \"random-comment-id-2\",\n+          userId: \"test-user-id\",\n+          text: \"some random text\",\n+        },\n+      ];\n+\n+      const returnedAnchorText = ProsemirrorHelper.getAnchorTextForComment(\n+        commentMarks,\n+        commentId\n+      );\n+\n+      expect(returnedAnchorText).toBeUndefined();\n+    });\n+\n+    it(\"should return undefined when comment marks are empty\", async () => {\n+      const returnedAnchorText = ProsemirrorHelper.getAnchorTextForComment(\n+        [],\n+        \"test-comment-id\"\n+      );\n+      expect(returnedAnchorText).toBeUndefined();\n+    });\n+  });\n+});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8189",
    "pr_id": 8189,
    "issue_id": 8048,
    "repo": "outline/outline",
    "problem_statement": "Threading of emails from document edits is too deeply nested\nA clear and concise description of what the bug is.\r\n\r\n**To Reproduce**\r\n1) Have multuple edits to a document over time which sends many emails (eg over days)\r\n2) look at the nesting of emails in thunderbird\r\n\r\n![image](https://github.com/user-attachments/assets/f685f155-aefc-4058-be96-0b6f472dda77)\r\n\r\nNot all email clients do this, eg gmail ignores the email headers and always does single level threading.\r\n\r\nConceptually a series of 10 edits in serial against a document is 10 comments against the same item (ie the document). Deeply nested threads like above are appropriate for when a user is commenting on a comment, or commenting on a comment on a comment etc which isn't the case here.\r\n\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nThe emails should have the threading headers in place to group them, but they should only be nested to a single level and not deeply recursively nested.\r\n\r\nCurrent state of headers:\r\n```\r\nIn-Reply-To: <774d50e7-1610-4134-917f-429f16b452da@docs.catalyst-it.io>\r\nReferences: <bc5cecb4-8945-4733-b1b0-4fb4101596cd@docs.catalyst-it.io>\r\n <15d071ae-1b59-4d1a-bc4f-c59957215c63@docs.catalyst-it.io>\r\n <1bbef69c-f01c-4346-9932-41e575b8c79f@docs.catalyst-it.io>\r\n <7656aaf9-9ff1-44fc-8e51-c80913ea2b41@docs.catalyst-it.io>\r\n <cd56ba46-728e-4864-b8ba-344a9cece832@docs.catalyst-it.io>\r\n <774d50e7-1610-4134-917f-429f16b452da@docs.catalyst-it.io>\r\n```\r\n\r\nDesired state of headers:\r\n\r\nIt isn't clear to me exactly what the id's used in these headers are, but the `References` header should only have a single value which would be some ID tied to the document id. the `In-Reply-To` header can be identical.\r\n\r\n```\r\nIn-Reply-To: <774d50e7-1610-4134-917f-429f16b452da@docs.catalyst-it.io>\r\nReferences: <774d50e7-1610-4134-917f-429f16b452da@docs.catalyst-it.io>\r\n```\r\nfor instance this doc has a url stub of /doc/weekly-tasks-7MPst8lrrR so it would seem simpler to me to have these headers:\r\n\r\n```\r\nIn-Reply-To: <7MPst8lrrR@docs.catalyst-it.io>\r\nReferences: <7MPst8lrrR@docs.catalyst-it.io>\r\n```\r\n\r\nThe values of these do not need to point to valid Message ID's, they just need to be the same between emails to group them.\r\n\r\n\r\n\r\n**Outline (please complete the following information):**\r\nCommit https://github.com/outline/outline/commit/86c3ea8e\r\n\r\n**Desktop (please complete the following information):**\r\nUbuntu thunderbird\r\n\r\n",
    "issue_word_count": 386,
    "test_files_count": 1,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "server/emails/templates/BaseEmail.tsx",
      "server/emails/templates/CommentCreatedEmail.tsx",
      "server/models/Notification.test.ts",
      "server/models/Notification.ts",
      "server/models/helpers/DocumentHelper.tsx",
      "server/utils/emails.ts"
    ],
    "pr_changed_test_files": [
      "server/models/Notification.test.ts"
    ],
    "base_commit": "db30d080aeb29f15321badb7576115e39d2f2ded",
    "head_commit": "ec7aa2e50a1e4ca5df9bc41fef5a9e34eba258e2",
    "repo_url": "https://github.com/outline/outline/pull/8189",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8189",
    "dockerfile": "",
    "pr_merged_at": "2025-01-07T13:29:04.000Z",
    "patch": "diff --git a/server/emails/templates/BaseEmail.tsx b/server/emails/templates/BaseEmail.tsx\nindex 0744bfb51f0b..8a2176bd4d95 100644\n--- a/server/emails/templates/BaseEmail.tsx\n+++ b/server/emails/templates/BaseEmail.tsx\n@@ -18,7 +18,6 @@ import { TextHelper } from \"@server/models/helpers/TextHelper\";\n import { taskQueue } from \"@server/queues\";\n import { TaskPriority } from \"@server/queues/tasks/BaseTask\";\n import { NotificationMetadata } from \"@server/types\";\n-import { getEmailMessageId } from \"@server/utils/emails\";\n \n export enum EmailMessageCategory {\n   Authentication = \"authentication\",\n@@ -138,7 +137,7 @@ export default abstract class BaseEmail<\n     }\n \n     const messageId = notification\n-      ? getEmailMessageId(notification.id)\n+      ? Notification.emailMessageId(notification.id)\n       : undefined;\n \n     const references = notification\n\ndiff --git a/server/emails/templates/CommentCreatedEmail.tsx b/server/emails/templates/CommentCreatedEmail.tsx\nindex 3396caa272be..67615e56d51a 100644\n--- a/server/emails/templates/CommentCreatedEmail.tsx\n+++ b/server/emails/templates/CommentCreatedEmail.tsx\n@@ -1,6 +1,7 @@\n import * as React from \"react\";\n import { NotificationEventType } from \"@shared/types\";\n import { Collection, Comment, Document } from \"@server/models\";\n+import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n import NotificationSettingsHelper from \"@server/models/helpers/NotificationSettingsHelper\";\n import { ProsemirrorHelper } from \"@server/models/helpers/ProsemirrorHelper\";\n import { can } from \"@server/policies\";\n@@ -14,6 +15,8 @@ import Footer from \"./components/Footer\";\n import Header from \"./components/Header\";\n import Heading from \"./components/Heading\";\n \n+const MAX_SUBJECT_CONTENT = 50;\n+\n type InputProps = EmailProps & {\n   userId: string;\n   documentId: string;\n@@ -23,10 +26,11 @@ type InputProps = EmailProps & {\n };\n \n type BeforeSend = {\n+  comment: Comment;\n+  parentComment?: Comment;\n   document: Document;\n   collection: Collection | null;\n   body: string | undefined;\n-  isFirstComment: boolean;\n   isReply: boolean;\n   unsubscribeUrl: string;\n };\n@@ -61,24 +65,22 @@ export default class CommentCreatedEmail extends BaseEmail<\n       return false;\n     }\n \n-    const firstComment = await Comment.findOne({\n-      attributes: [\"id\"],\n-      where: { documentId },\n-      order: [[\"createdAt\", \"ASC\"]],\n-    });\n+    const parentComment = comment.parentCommentId\n+      ? (await comment.$get(\"parentComment\")) ?? undefined\n+      : undefined;\n \n     const body = await this.htmlForData(\n       team,\n       ProsemirrorHelper.toProsemirror(comment.data)\n     );\n     const isReply = !!comment.parentCommentId;\n-    const isFirstComment = firstComment?.id === commentId;\n \n     return {\n+      comment,\n+      parentComment,\n       document,\n       collection,\n       isReply,\n-      isFirstComment,\n       body,\n       unsubscribeUrl: this.unsubscribeUrl(props),\n     };\n@@ -91,8 +93,18 @@ export default class CommentCreatedEmail extends BaseEmail<\n     );\n   }\n \n-  protected subject({ isFirstComment, document }: Props) {\n-    return `${isFirstComment ? \"\" : \"Re: \"}New comment on “${document.title}”`;\n+  protected subject({ comment, parentComment, document }: Props) {\n+    const commentText = DocumentHelper.toPlainText(\n+      parentComment?.data ?? comment.data\n+    );\n+    const trimmedText =\n+      commentText.length <= MAX_SUBJECT_CONTENT\n+        ? commentText\n+        : `${commentText.slice(0, MAX_SUBJECT_CONTENT)}...`;\n+\n+    return `${parentComment ? \"Re: \" : \"\"}New comment on “${\n+      document.title\n+    }” - ${trimmedText}`;\n   }\n \n   protected preview({ isReply, actorName }: Props): string {\n\ndiff --git a/server/models/Notification.ts b/server/models/Notification.ts\nindex 2f31f8bd4e34..ee6007705b3a 100644\n--- a/server/models/Notification.ts\n+++ b/server/models/Notification.ts\n@@ -1,11 +1,9 @@\n import crypto from \"crypto\";\n-import chunk from \"lodash/chunk\";\n import type {\n   InferAttributes,\n   InferCreationAttributes,\n   SaveOptions,\n } from \"sequelize\";\n-import { Op } from \"sequelize\";\n import {\n   Table,\n   ForeignKey,\n@@ -22,14 +20,9 @@ import {\n   DefaultScope,\n } from \"sequelize-typescript\";\n import { NotificationEventType } from \"@shared/types\";\n+import { getBaseDomain } from \"@shared/utils/domains\";\n import env from \"@server/env\";\n import Model from \"@server/models/base/Model\";\n-import {\n-  getEmailMessageId,\n-  getEmailThreadEventGroup,\n-  isEmailThreadSupportedNotification,\n-  MaxMessagesInEmailThread,\n-} from \"@server/utils/emails\";\n import Collection from \"./Collection\";\n import Comment from \"./Comment\";\n import Document from \"./Document\";\n@@ -39,6 +32,8 @@ import Team from \"./Team\";\n import User from \"./User\";\n import Fix from \"./decorators/Fix\";\n \n+let baseDomain;\n+\n @Scopes(() => ({\n   withTeam: {\n     include: [\n@@ -228,62 +223,44 @@ class Notification extends Model<\n   }\n \n   /**\n-   * Returns the past message ids which are used to setup the thread chain in email clients.\n+   * Returns the message id for the email.\n+   *\n+   * @param name Username part of the email address.\n+   * @returns Email message id.\n+   */\n+  public static emailMessageId(name: string) {\n+    baseDomain ||= getBaseDomain();\n+    return `<${name}@${baseDomain}>`;\n+  }\n+\n+  /**\n+   * Returns the message reference id which will be used to setup the thread chain in email clients.\n    *\n-   * @param notification Notification for which the past notifications are fetched - used for determining the properties that form a thread.\n-   * @returns An array of email message ids that form a thread.\n+   * @param notification Notification for which to determine the reference id.\n+   * @returns Reference id as an array.\n    */\n   public static async emailReferences(\n     notification: Notification\n   ): Promise<string[] | undefined> {\n-    if (!isEmailThreadSupportedNotification(notification.event)) {\n-      return;\n-    }\n-\n-    const events = getEmailThreadEventGroup(notification.event);\n-\n-    if (!events) {\n-      return;\n-    }\n-\n-    const prevNotifications: Notification[] = [];\n-\n-    await this.findAllInBatches<Notification>(\n-      {\n-        attributes: [\"id\"],\n-        where: {\n-          id: {\n-            [Op.ne]: notification.id,\n-          },\n-          event: {\n-            [Op.in]: events,\n-          },\n-          documentId: notification.documentId,\n-          userId: notification.userId,\n-        },\n-        order: [[\"createdAt\", \"ASC\"]],\n-        offset: 0,\n-        batchLimit: 100,\n-      },\n-      async (notifications) => void prevNotifications.push(...notifications)\n-    );\n-\n-    const emailThreads = chunk(prevNotifications, MaxMessagesInEmailThread);\n-    const lastThread = emailThreads.at(-1);\n-\n-    // Don't return anything if there are no past notifications (or) the limit is reached.\n-    // This will start a new thread in the email clients.\n-    // Also ensures we don't face header limit errors.\n-    if (\n-      !lastThread ||\n-      lastThread.length === 0 ||\n-      lastThread.length === MaxMessagesInEmailThread\n-    ) {\n-      return;\n+    let name: string | undefined;\n+\n+    switch (notification.event) {\n+      case NotificationEventType.PublishDocument:\n+      case NotificationEventType.UpdateDocument:\n+        name = `${notification.documentId}-updates`;\n+        break;\n+      case NotificationEventType.MentionedInDocument:\n+      case NotificationEventType.MentionedInComment:\n+        name = `${notification.documentId}-mentions`;\n+        break;\n+      case NotificationEventType.CreateComment: {\n+        const comment = await Comment.findByPk(notification.commentId);\n+        name = `${comment?.parentCommentId ?? comment?.id}-comments`;\n+        break;\n+      }\n     }\n \n-    // Return references from the last thread.\n-    return lastThread.map((notif) => getEmailMessageId(notif.id));\n+    return name ? [this.emailMessageId(name)] : undefined;\n   }\n }\n \n\ndiff --git a/server/models/helpers/DocumentHelper.tsx b/server/models/helpers/DocumentHelper.tsx\nindex d25a0e30e70a..ae4eab013deb 100644\n--- a/server/models/helpers/DocumentHelper.tsx\n+++ b/server/models/helpers/DocumentHelper.tsx\n@@ -132,10 +132,10 @@ export class DocumentHelper {\n    * Returns the document as plain text. This method uses the\n    * collaborative state if available, otherwise it falls back to Markdown.\n    *\n-   * @param document The document or revision to convert\n+   * @param document The document or revision or prosemirror data to convert\n    * @returns The document content as plain text without formatting.\n    */\n-  static toPlainText(document: Document | Revision) {\n+  static toPlainText(document: Document | Revision | ProsemirrorData) {\n     const node = DocumentHelper.toProsemirror(document);\n \n     return textBetween(node, 0, node.content.size, this.textSerializers);\n\ndiff --git a/server/utils/emails.ts b/server/utils/emails.ts\ndeleted file mode 100644\nindex 9e2af126b83e..000000000000\n--- a/server/utils/emails.ts\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-import { NotificationEventType } from \"@shared/types\";\n-import { getBaseDomain } from \"@shared/utils/domains\";\n-\n-const EmailThreadSupportedNotifications = [\n-  NotificationEventType.PublishDocument,\n-  NotificationEventType.UpdateDocument,\n-  NotificationEventType.MentionedInDocument,\n-  NotificationEventType.CreateComment,\n-  NotificationEventType.MentionedInComment,\n-];\n-\n-// Gmail creates a new thread for every 100 messages.\n-export const MaxMessagesInEmailThread = 100;\n-\n-export const isEmailThreadSupportedNotification = (\n-  event: NotificationEventType\n-) => EmailThreadSupportedNotifications.includes(event);\n-\n-export const getEmailThreadEventGroup = (\n-  event: NotificationEventType\n-): NotificationEventType[] | undefined => {\n-  switch (event) {\n-    case NotificationEventType.PublishDocument:\n-    case NotificationEventType.UpdateDocument:\n-      return [\n-        NotificationEventType.PublishDocument,\n-        NotificationEventType.UpdateDocument,\n-      ];\n-    case NotificationEventType.MentionedInDocument:\n-    case NotificationEventType.MentionedInComment:\n-      return [\n-        NotificationEventType.MentionedInDocument,\n-        NotificationEventType.MentionedInComment,\n-      ];\n-    case NotificationEventType.CreateComment:\n-      return [NotificationEventType.CreateComment];\n-    default:\n-      return;\n-  }\n-};\n-\n-let baseDomain;\n-\n-export const getEmailMessageId = (notificationId: string) => {\n-  baseDomain ||= getBaseDomain();\n-  return `<${notificationId}@${baseDomain}>`;\n-};\n",
    "test_patch": "diff --git a/server/models/Notification.test.ts b/server/models/Notification.test.ts\nindex 89fe47223cc9..61a5b31def21 100644\n--- a/server/models/Notification.test.ts\n+++ b/server/models/Notification.test.ts\n@@ -1,396 +1,140 @@\n import { NotificationEventType } from \"@shared/types\";\n import {\n-  buildCollection,\n   buildComment,\n   buildDocument,\n   buildNotification,\n-  buildTeam,\n   buildUser,\n } from \"@server/test/factories\";\n-import {\n-  getEmailMessageId,\n-  MaxMessagesInEmailThread,\n-} from \"@server/utils/emails\";\n import Notification from \"./Notification\";\n \n describe(\"Notification\", () => {\n   describe(\"emailReferences\", () => {\n-    it(\"should return no references for an unsupported notification\", async () => {\n-      const team = await buildTeam();\n-      const user = await buildUser({ teamId: team.id });\n-      const collection = await buildCollection({\n-        userId: user.id,\n-        teamId: team.id,\n-      });\n-      const document = await buildDocument({\n-        collectionId: collection.id,\n-        userId: user.id,\n-        teamId: team.id,\n-      });\n-\n+    it(\"should return no reference for an unsupported notification\", async () => {\n       const notification = await buildNotification({\n         event: NotificationEventType.AddUserToDocument,\n-        documentId: document.id,\n-        userId: user.id,\n-        teamId: team.id,\n       });\n       const references = await Notification.emailReferences(notification);\n-\n       expect(references).toBeUndefined();\n     });\n \n-    it(\"should return no references for a new notification\", async () => {\n-      const team = await buildTeam();\n-      const user = await buildUser({ teamId: team.id });\n-      const collection = await buildCollection({\n-        userId: user.id,\n-        teamId: team.id,\n-      });\n-      const document = await buildDocument({\n-        collectionId: collection.id,\n-        userId: user.id,\n-        teamId: team.id,\n-      });\n-\n-      const notification = await buildNotification({\n-        event: NotificationEventType.UpdateDocument,\n-        documentId: document.id,\n-        userId: user.id,\n-        teamId: team.id,\n-      });\n-      const references = await Notification.emailReferences(notification);\n-\n-      expect(references).toBeUndefined();\n-    });\n-\n-    describe(\"should return references from last thread for current notification\", () => {\n-      it(\"only one thread available\", async () => {\n-        const team = await buildTeam();\n-        const user = await buildUser({ teamId: team.id });\n-        const collection = await buildCollection({\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const document = await buildDocument({\n-          collectionId: collection.id,\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const pastNotifications = await Notification.bulkCreate(\n-          [...Array(2)].map(() => ({\n-            event: NotificationEventType.UpdateDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          }))\n-        );\n-\n+    describe(\"should return document update reference\", () => {\n+      it(\"document published\", async () => {\n+        const document = await buildDocument();\n         const notification = await buildNotification({\n-          event: NotificationEventType.UpdateDocument,\n+          event: NotificationEventType.PublishDocument,\n           documentId: document.id,\n-          userId: user.id,\n-          teamId: team.id,\n         });\n-        const references = await Notification.emailReferences(notification);\n \n-        expect(references?.length).toEqual(2);\n+        const references = await Notification.emailReferences(notification);\n \n-        const expectedReferences = pastNotifications.map((notif) =>\n-          getEmailMessageId(notif.id)\n+        const expectedReference = Notification.emailMessageId(\n+          `${document.id}-updates`\n         );\n-\n-        expect(references).toEqual(expectedReferences);\n+        expect(references![0]).toBe(expectedReference);\n       });\n \n-      it(\"multiple threads available\", async () => {\n-        const team = await buildTeam();\n-        const user = await buildUser({ teamId: team.id });\n-        const collection = await buildCollection({\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const document = await buildDocument({\n-          collectionId: collection.id,\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const pastNotifications = await Notification.bulkCreate(\n-          [...Array(105)].map(() => ({\n-            event: NotificationEventType.UpdateDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          }))\n-        );\n-\n+      it(\"document updated\", async () => {\n+        const document = await buildDocument();\n         const notification = await buildNotification({\n           event: NotificationEventType.UpdateDocument,\n           documentId: document.id,\n-          userId: user.id,\n-          teamId: team.id,\n         });\n-        const references = await Notification.emailReferences(notification);\n-\n-        expect(references?.length).toEqual(5);\n \n-        const expectedReferences = pastNotifications\n-          .slice(MaxMessagesInEmailThread)\n-          .map((notif) => getEmailMessageId(notif.id));\n+        const references = await Notification.emailReferences(notification);\n \n-        expect(references).toEqual(expectedReferences);\n+        const expectedReference = Notification.emailMessageId(\n+          `${document.id}-updates`\n+        );\n+        expect(references![0]).toBe(expectedReference);\n       });\n     });\n \n-    describe(\"should return references from consolidated events\", () => {\n-      it(\"document edits\", async () => {\n-        const team = await buildTeam();\n-        const user = await buildUser({ teamId: team.id });\n-        const collection = await buildCollection({\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const document = await buildDocument({\n-          collectionId: collection.id,\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const pastNotifications = await Notification.bulkCreate([\n-          {\n-            event: NotificationEventType.PublishDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          ...[...Array(2)].map(() => ({\n-            event: NotificationEventType.UpdateDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          })),\n-          ...[...Array(2)].map(() => ({\n-            event: NotificationEventType.CreateComment,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          })),\n-        ]);\n-\n+    describe(\"should return mention reference\", () => {\n+      it(\"mentioned in document\", async () => {\n+        const document = await buildDocument();\n         const notification = await buildNotification({\n-          event: NotificationEventType.UpdateDocument,\n+          event: NotificationEventType.MentionedInDocument,\n           documentId: document.id,\n-          userId: user.id,\n-          teamId: team.id,\n         });\n-        const references = await Notification.emailReferences(notification);\n-\n-        expect(references?.length).toEqual(3);\n \n-        const expectedReferences = pastNotifications\n-          .filter(\n-            (notif) =>\n-              notif.event === NotificationEventType.PublishDocument ||\n-              notif.event === NotificationEventType.UpdateDocument\n-          )\n-          .map((notif) => getEmailMessageId(notif.id));\n+        const references = await Notification.emailReferences(notification);\n \n-        expect(references).toEqual(expectedReferences);\n+        const expectedReference = Notification.emailMessageId(\n+          `${document.id}-mentions`\n+        );\n+        expect(references?.length).toBe(1);\n+        expect(references![0]).toBe(expectedReference);\n       });\n \n-      it(\"comment creation\", async () => {\n-        const team = await buildTeam();\n-        const user = await buildUser({ teamId: team.id });\n-        const collection = await buildCollection({\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const document = await buildDocument({\n-          collectionId: collection.id,\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const pastNotifications = await Notification.bulkCreate([\n-          {\n-            event: NotificationEventType.PublishDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          ...[...Array(2)].map(() => ({\n-            event: NotificationEventType.UpdateDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          })),\n-          ...[...Array(2)].map(() => ({\n-            event: NotificationEventType.CreateComment,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          })),\n-        ]);\n-\n+      it(\"mentioned in comment\", async () => {\n+        const document = await buildDocument();\n         const notification = await buildNotification({\n-          event: NotificationEventType.CreateComment,\n+          event: NotificationEventType.MentionedInComment,\n           documentId: document.id,\n-          userId: user.id,\n-          teamId: team.id,\n         });\n-        const references = await Notification.emailReferences(notification);\n \n-        expect(references?.length).toEqual(2);\n-\n-        const expectedReferences = pastNotifications\n-          .filter(\n-            (notif) => notif.event === NotificationEventType.CreateComment\n-          )\n-          .map((notif) => getEmailMessageId(notif.id));\n+        const references = await Notification.emailReferences(notification);\n \n-        expect(references).toEqual(expectedReferences);\n+        const expectedReference = Notification.emailMessageId(\n+          `${document.id}-mentions`\n+        );\n+        expect(references?.length).toBe(1);\n+        expect(references![0]).toBe(expectedReference);\n       });\n+    });\n \n-      it(\"document mentions\", async () => {\n-        const team = await buildTeam();\n-        const user = await buildUser({ teamId: team.id });\n-        const collection = await buildCollection({\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n+    describe(\"should return comment reference\", () => {\n+      it(\"first comment in a thread\", async () => {\n+        const user = await buildUser();\n         const document = await buildDocument({\n-          collectionId: collection.id,\n           userId: user.id,\n-          teamId: team.id,\n+          teamId: user.teamId,\n         });\n         const comment = await buildComment({\n           documentId: document.id,\n           userId: user.id,\n         });\n-        const pastNotifications = await Notification.bulkCreate([\n-          {\n-            event: NotificationEventType.PublishDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.UpdateDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.CreateComment,\n-            commentId: comment.id,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.MentionedInComment,\n-            commentId: comment.id,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.MentionedInDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-        ]);\n-\n         const notification = await buildNotification({\n-          event: NotificationEventType.MentionedInDocument,\n-          documentId: document.id,\n-          userId: user.id,\n-          teamId: team.id,\n+          event: NotificationEventType.CreateComment,\n+          commentId: comment.id,\n         });\n \n         const references = await Notification.emailReferences(notification);\n \n-        expect(references?.length).toEqual(2);\n-\n-        const expectedReferences = pastNotifications\n-          .filter(\n-            (notif) =>\n-              notif.event === NotificationEventType.MentionedInDocument ||\n-              notif.event === NotificationEventType.MentionedInComment\n-          )\n-          .map((notif) => getEmailMessageId(notif.id));\n-\n-        expect(references).toEqual(expectedReferences);\n+        const expectedReference = Notification.emailMessageId(\n+          `${comment.id}-comments`\n+        );\n+        expect(references?.length).toBe(1);\n+        expect(references![0]).toBe(expectedReference);\n       });\n \n-      it(\"comment mentions\", async () => {\n-        const team = await buildTeam();\n-        const user = await buildUser({ teamId: team.id });\n-        const collection = await buildCollection({\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n+      it(\"child comments in a thread\", async () => {\n+        const user = await buildUser();\n         const document = await buildDocument({\n-          collectionId: collection.id,\n           userId: user.id,\n-          teamId: team.id,\n+          teamId: user.teamId,\n         });\n-        const comment = await buildComment({\n+        const parentComment = await buildComment({\n           documentId: document.id,\n           userId: user.id,\n         });\n-        const pastNotifications = await Notification.bulkCreate([\n-          {\n-            event: NotificationEventType.PublishDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.UpdateDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.CreateComment,\n-            commentId: comment.id,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.MentionedInComment,\n-            commentId: comment.id,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.MentionedInDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-        ]);\n-\n-        const notification = await buildNotification({\n-          event: NotificationEventType.MentionedInComment,\n+        const childComment = await buildComment({\n           documentId: document.id,\n           userId: user.id,\n-          teamId: team.id,\n+          parentCommentId: parentComment.id,\n+        });\n+        const notification = await buildNotification({\n+          event: NotificationEventType.CreateComment,\n+          commentId: childComment.id,\n         });\n-        const references = await Notification.emailReferences(notification);\n-\n-        expect(references?.length).toEqual(2);\n \n-        const expectedReferences = pastNotifications\n-          .filter(\n-            (notif) =>\n-              notif.event === NotificationEventType.MentionedInComment ||\n-              notif.event === NotificationEventType.MentionedInDocument\n-          )\n-          .map((notif) => getEmailMessageId(notif.id));\n+        const references = await Notification.emailReferences(notification);\n \n-        expect(references).toEqual(expectedReferences);\n+        const expectedReference = Notification.emailMessageId(\n+          `${parentComment.id}-comments`\n+        );\n+        expect(references?.length).toBe(1);\n+        expect(references![0]).toBe(expectedReference);\n       });\n     });\n   });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8179",
    "pr_id": 8179,
    "issue_id": 7920,
    "repo": "outline/outline",
    "problem_statement": "Move event writing to model layer\n`events` should be written automatically based on mutations in the model layer. To achieve this the request context will be passed down to model mutations. Translation must happen on a model by model basis.\n\nCommands should be removed where they only exist to group a mutation and it's associated event write.\n\n### TODO\n- [x] ApiKey\n- [x] Attachment\n- [x] Comment\n- [x] FileOperation\n- [x] Group\n- [x] GroupMembership\n- [x] GroupUser\n- [x] Pin\n- [x] Reaction\n- [x] Share\n- [x] Star\n- [x] UserMembership\n- [x] Subscription\n- [x] WebhookSubscription\n- [x] Notification\n- [ ] Team\n- [ ] Revision\n- [ ] Document\n- [ ] Collection\n- [ ] TeamDomain\n- [ ] User",
    "issue_word_count": 89,
    "test_files_count": 1,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "server/commands/groupCreator.ts",
      "server/commands/groupDestroyer.ts",
      "server/commands/groupUpdater.ts",
      "server/models/Group.ts",
      "server/routes/api/groups/groups.test.ts",
      "server/routes/api/groups/groups.ts",
      "server/types.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/groups/groups.test.ts"
    ],
    "base_commit": "adfca1e5ca96891db25ae93a30325038f0631b48",
    "head_commit": "66ae221aae7e3655b5129bd6b134e70660c9fe61",
    "repo_url": "https://github.com/outline/outline/pull/8179",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8179",
    "dockerfile": "",
    "pr_merged_at": "2025-01-02T12:45:09.000Z",
    "patch": "diff --git a/server/commands/groupCreator.ts b/server/commands/groupCreator.ts\ndeleted file mode 100644\nindex 052deaef4bc1..000000000000\n--- a/server/commands/groupCreator.ts\n+++ /dev/null\n@@ -1,42 +0,0 @@\n-import type { Transaction } from \"sequelize\";\n-import { Event, Group, type User } from \"@server/models\";\n-\n-type Props = {\n-  name: string;\n-  externalId: string | undefined;\n-  actor: User;\n-  ip: string;\n-  transaction?: Transaction;\n-};\n-\n-export default async function groupCreator({\n-  name,\n-  externalId,\n-  actor,\n-  ip,\n-  transaction,\n-}: Props): Promise<Group> {\n-  const group = await Group.create(\n-    {\n-      name,\n-      externalId,\n-      teamId: actor.teamId,\n-      createdById: actor.id,\n-    },\n-    { transaction }\n-  );\n-  await Event.create(\n-    {\n-      name: \"groups.create\",\n-      modelId: group.id,\n-      teamId: actor.teamId,\n-      actorId: actor.id,\n-      data: {\n-        name: group.name,\n-      },\n-      ip,\n-    },\n-    { transaction }\n-  );\n-  return group;\n-}\n\ndiff --git a/server/commands/groupDestroyer.ts b/server/commands/groupDestroyer.ts\ndeleted file mode 100644\nindex c1e17e3b248b..000000000000\n--- a/server/commands/groupDestroyer.ts\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-import type { Transaction } from \"sequelize\";\n-import { Event, type Group, type User } from \"@server/models\";\n-\n-type Props = {\n-  group: Group;\n-  actor: User;\n-  ip: string;\n-  transaction?: Transaction;\n-};\n-\n-export default async function groupDestroyer({\n-  group,\n-  actor,\n-  ip,\n-  transaction,\n-}: Props): Promise<void> {\n-  await group.destroy({ transaction });\n-  await Event.create(\n-    {\n-      name: \"groups.delete\",\n-      modelId: group.id,\n-      teamId: actor.teamId,\n-      actorId: actor.id,\n-      data: {\n-        name: group.name,\n-      },\n-      ip,\n-    },\n-    { transaction }\n-  );\n-}\n\ndiff --git a/server/commands/groupUpdater.ts b/server/commands/groupUpdater.ts\ndeleted file mode 100644\nindex b69460421202..000000000000\n--- a/server/commands/groupUpdater.ts\n+++ /dev/null\n@@ -1,46 +0,0 @@\n-import type { Transaction } from \"sequelize\";\n-import { Event, type Group, type User } from \"@server/models\";\n-\n-type Props = {\n-  group: Group;\n-  name: string | undefined;\n-  externalId: string | undefined;\n-  actor: User;\n-  ip: string;\n-  transaction?: Transaction;\n-};\n-\n-export default async function groupUpdater({\n-  group,\n-  name,\n-  externalId,\n-  actor,\n-  ip,\n-  transaction,\n-}: Props): Promise<Group> {\n-  if (name) {\n-    group.name = name;\n-  }\n-  if (externalId) {\n-    group.externalId = externalId;\n-  }\n-\n-  if (group.changed()) {\n-    await group.save({ transaction });\n-    await Event.create(\n-      {\n-        name: \"groups.update\",\n-        modelId: group.id,\n-        teamId: actor.teamId,\n-        actorId: actor.id,\n-        data: {\n-          name: group.name,\n-        },\n-        ip,\n-      },\n-      { transaction }\n-    );\n-  }\n-\n-  return group;\n-}\n\ndiff --git a/server/models/Group.ts b/server/models/Group.ts\nindex dee4873bf1b1..5d0d5f297b5e 100644\n--- a/server/models/Group.ts\n+++ b/server/models/Group.ts\n@@ -60,6 +60,8 @@ class Group extends ParanoidModel<\n   InferAttributes<Group>,\n   Partial<InferCreationAttributes<Group>>\n > {\n+  static eventNamespace = \"groups\";\n+\n   @Length({ min: 0, max: 255, msg: \"name must be be 255 characters or less\" })\n   @NotContainsUrl\n   @Column\n\ndiff --git a/server/routes/api/groups/groups.ts b/server/routes/api/groups/groups.ts\nindex b38fef656d04..21438ceb3de6 100644\n--- a/server/routes/api/groups/groups.ts\n+++ b/server/routes/api/groups/groups.ts\n@@ -1,9 +1,6 @@\n import Router from \"koa-router\";\n import { Op, WhereOptions } from \"sequelize\";\n import { MAX_AVATAR_DISPLAY } from \"@shared/constants\";\n-import groupCreator from \"@server/commands/groupCreator\";\n-import groupDestroyer from \"@server/commands/groupDestroyer\";\n-import groupUpdater from \"@server/commands/groupUpdater\";\n import groupUserCreator from \"@server/commands/groupUserCreator\";\n import groupUserDestroyer from \"@server/commands/groupUserDestroyer\";\n import auth from \"@server/middlewares/authentication\";\n@@ -128,15 +125,13 @@ router.post(\n   async (ctx: APIContext<T.GroupsCreateReq>) => {\n     const { name, externalId } = ctx.input.body;\n     const { user } = ctx.state.auth;\n-    const { transaction } = ctx.state;\n     authorize(user, \"createGroup\", user.team);\n \n-    const group = await groupCreator({\n+    const group = await Group.createWithCtx(ctx, {\n       name,\n       externalId,\n-      actor: user,\n-      ip: ctx.request.ip,\n-      transaction,\n+      teamId: user.teamId,\n+      createdById: user.id,\n     });\n \n     ctx.body = {\n@@ -152,21 +147,17 @@ router.post(\n   validate(T.GroupsUpdateSchema),\n   transaction(),\n   async (ctx: APIContext<T.GroupsUpdateReq>) => {\n-    const { id, name, externalId } = ctx.input.body;\n+    const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n \n-    let group = await Group.findByPk(id, { transaction });\n-    authorize(user, \"update\", group);\n-\n-    group = await groupUpdater({\n-      group,\n-      name,\n-      externalId,\n-      actor: user,\n-      ip: ctx.request.ip,\n+    const group = await Group.findByPk(id, {\n       transaction,\n+      lock: transaction.LOCK.UPDATE,\n     });\n+    authorize(user, \"update\", group);\n+\n+    await group.updateWithCtx(ctx, ctx.input.body);\n \n     ctx.body = {\n       data: await presentGroup(group),\n@@ -185,15 +176,13 @@ router.post(\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n \n-    const group = await Group.findByPk(id, { transaction });\n-    authorize(user, \"delete\", group);\n-\n-    await groupDestroyer({\n-      group,\n-      actor: user,\n-      ip: ctx.request.ip,\n+    const group = await Group.findByPk(id, {\n       transaction,\n+      lock: transaction.LOCK.UPDATE,\n     });\n+    authorize(user, \"delete\", group);\n+\n+    await group.destroyWithCtx(ctx);\n \n     ctx.body = {\n       success: true,\n\ndiff --git a/server/types.ts b/server/types.ts\nindex 44ccb92ea9a8..df1314e40831 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -354,9 +354,6 @@ export type GroupEvent = BaseEvent<Group> &\n     | {\n         name: \"groups.create\" | \"groups.delete\" | \"groups.update\";\n         modelId: string;\n-        data: {\n-          name: string;\n-        };\n       }\n   );\n \n",
    "test_patch": "diff --git a/server/routes/api/groups/groups.test.ts b/server/routes/api/groups/groups.test.ts\nindex e912100217f9..0864d2049ae6 100644\n--- a/server/routes/api/groups/groups.test.ts\n+++ b/server/routes/api/groups/groups.test.ts\n@@ -81,6 +81,7 @@ describe(\"#groups.update\", () => {\n       });\n       const events = await Event.findAll({\n         where: {\n+          name: \"groups.update\",\n           teamId: user.teamId,\n         },\n       });\n@@ -101,6 +102,7 @@ describe(\"#groups.update\", () => {\n       });\n       const events = await Event.findAll({\n         where: {\n+          name: \"groups.update\",\n           teamId: user.teamId,\n         },\n       });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8166",
    "pr_id": 8166,
    "issue_id": 7920,
    "repo": "outline/outline",
    "problem_statement": "Move event writing to model layer\n`events` should be written automatically based on mutations in the model layer. To achieve this the request context will be passed down to model mutations. Translation must happen on a model by model basis.\n\nCommands should be removed where they only exist to group a mutation and it's associated event write.\n\n### TODO\n- [x] ApiKey\n- [x] Attachment\n- [x] Comment\n- [x] FileOperation\n- [x] Group\n- [x] GroupMembership\n- [x] GroupUser\n- [x] Pin\n- [x] Reaction\n- [x] Share\n- [x] Star\n- [x] UserMembership\n- [x] Subscription\n- [x] WebhookSubscription\n- [x] Notification\n- [ ] Team\n- [ ] Revision\n- [ ] Document\n- [ ] Collection\n- [ ] TeamDomain\n- [ ] User",
    "issue_word_count": 89,
    "test_files_count": 5,
    "non_test_files_count": 12,
    "pr_changed_files": [
      "server/commands/documentDuplicator.test.ts",
      "server/commands/documentImporter.test.ts",
      "server/commands/subscriptionCreator.test.ts",
      "server/commands/subscriptionCreator.ts",
      "server/commands/subscriptionDestroyer.test.ts",
      "server/commands/subscriptionDestroyer.ts",
      "server/context.ts",
      "server/models/Subscription.ts",
      "server/models/base/Model.ts",
      "server/queues/processors/DocumentUserAddedProcessor.ts",
      "server/queues/tasks/CommentCreatedNotificationsTask.ts",
      "server/queues/tasks/DocumentImportTask.ts",
      "server/queues/tasks/ImportMarkdownZipTask.ts",
      "server/queues/tasks/ImportNotionTask.ts",
      "server/queues/tasks/ImportTask.ts",
      "server/routes/api/subscriptions/subscriptions.ts",
      "server/test/support.ts"
    ],
    "pr_changed_test_files": [
      "server/commands/documentDuplicator.test.ts",
      "server/commands/documentImporter.test.ts",
      "server/commands/subscriptionCreator.test.ts",
      "server/commands/subscriptionDestroyer.test.ts",
      "server/test/support.ts"
    ],
    "base_commit": "f448be5830045b886a890d4bf83f9e5bc1314866",
    "head_commit": "2e6fe0661c880e2c6e1be2a279e6b8272847df4a",
    "repo_url": "https://github.com/outline/outline/pull/8166",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8166",
    "dockerfile": "",
    "pr_merged_at": "2024-12-31T13:25:43.000Z",
    "patch": "diff --git a/server/commands/subscriptionCreator.ts b/server/commands/subscriptionCreator.ts\nindex fe7daf20dbb3..43049116f2c1 100644\n--- a/server/commands/subscriptionCreator.ts\n+++ b/server/commands/subscriptionCreator.ts\n@@ -1,20 +1,17 @@\n-import { Transaction } from \"sequelize\";\n-import { Subscription, Event, User, Document } from \"@server/models\";\n+import { createContext } from \"@server/context\";\n+import { Subscription, Document } from \"@server/models\";\n import { sequelize } from \"@server/storage/database\";\n-import { DocumentEvent, RevisionEvent } from \"@server/types\";\n+import { APIContext, DocumentEvent, RevisionEvent } from \"@server/types\";\n \n type Props = {\n-  /** The user creating the subscription */\n-  user: User;\n+  /** The request context, which also contains the user creating the subscription */\n+  ctx: APIContext;\n   /** The document to subscribe to */\n   documentId?: string;\n   /** Event to subscribe to */\n   event: string;\n-  /** The IP address of the incoming request */\n-  ip: string | null;\n   /** Whether the subscription should be restored if it exists in a deleted state  */\n   resubscribe?: boolean;\n-  transaction: Transaction;\n };\n \n /**\n@@ -23,55 +20,24 @@ type Props = {\n  * @returns The subscription that was created\n  */\n export default async function subscriptionCreator({\n-  user,\n+  ctx,\n   documentId,\n   event,\n-  ip,\n   resubscribe = true,\n-  transaction,\n }: Props): Promise<Subscription> {\n-  const [subscription, created] = await Subscription.findOrCreate({\n+  const { user } = ctx.context.auth;\n+  const [subscription] = await Subscription.findOrCreateWithCtx(ctx, {\n     where: {\n       userId: user.id,\n       documentId,\n       event,\n     },\n-    transaction,\n-    // Previous subscriptions are soft-deleted, we want to know about them here\n-    paranoid: false,\n+    paranoid: false, // Previous subscriptions are soft-deleted, we want to know about them here.\n   });\n \n   // If the subscription was deleted, then just restore the existing row.\n   if (subscription.deletedAt && resubscribe) {\n-    await subscription.restore({ transaction });\n-\n-    await Event.create(\n-      {\n-        name: \"subscriptions.create\",\n-        teamId: user.teamId,\n-        modelId: subscription.id,\n-        actorId: user.id,\n-        userId: user.id,\n-        documentId,\n-        ip,\n-      },\n-      { transaction }\n-    );\n-  }\n-\n-  if (created) {\n-    await Event.create(\n-      {\n-        name: \"subscriptions.create\",\n-        teamId: user.teamId,\n-        modelId: subscription.id,\n-        actorId: user.id,\n-        userId: user.id,\n-        documentId,\n-        ip,\n-      },\n-      { transaction }\n-    );\n+    await subscription.restoreWithCtx(ctx);\n   }\n \n   return subscription;\n@@ -95,12 +61,15 @@ export const createSubscriptionsForDocument = async (\n \n     for (const user of users) {\n       await subscriptionCreator({\n-        user,\n+        ctx: createContext({\n+          user,\n+          authType: event.authType,\n+          ip: event.ip,\n+          transaction,\n+        }),\n         documentId: document.id,\n         event: \"documents.update\",\n         resubscribe: false,\n-        transaction,\n-        ip: event.ip,\n       });\n     }\n   });\n\ndiff --git a/server/commands/subscriptionDestroyer.ts b/server/commands/subscriptionDestroyer.ts\ndeleted file mode 100644\nindex 4bcee46904a4..000000000000\n--- a/server/commands/subscriptionDestroyer.ts\n+++ /dev/null\n@@ -1,42 +0,0 @@\n-import { Transaction } from \"sequelize\";\n-import { Event, Subscription, User } from \"@server/models\";\n-\n-type Props = {\n-  /** The user destroying the subscription */\n-  user: User;\n-  /** The subscription to destroy */\n-  subscription: Subscription;\n-  /** The IP address of the incoming request */\n-  ip: string;\n-  transaction: Transaction;\n-};\n-\n-/**\n- * This command destroys a user subscription to a document so they will no\n- * longer receive notifications.\n- *\n- * @returns The subscription that was destroyed\n- */\n-export default async function subscriptionDestroyer({\n-  user,\n-  subscription,\n-  ip,\n-  transaction,\n-}: Props): Promise<Subscription> {\n-  await subscription.destroy({ transaction });\n-\n-  await Event.create(\n-    {\n-      name: \"subscriptions.delete\",\n-      teamId: user.teamId,\n-      modelId: subscription.id,\n-      actorId: user.id,\n-      userId: user.id,\n-      documentId: subscription.documentId,\n-      ip,\n-    },\n-    { transaction }\n-  );\n-\n-  return subscription;\n-}\n\ndiff --git a/server/context.ts b/server/context.ts\nindex 621c5b0022a2..9c05e4edbd10 100644\n--- a/server/context.ts\n+++ b/server/context.ts\n@@ -1,17 +1,23 @@\n import { Transaction } from \"sequelize\";\n import { User } from \"@server/models\";\n-import { APIContext } from \"@server/types\";\n+import { APIContext, AuthenticationType } from \"@server/types\";\n \n-export function createContext(\n-  user: User,\n-  transaction?: Transaction,\n-  ip?: string\n-) {\n+export function createContext({\n+  user,\n+  authType = AuthenticationType.APP,\n+  ip,\n+  transaction,\n+}: {\n+  user: User;\n+  authType?: AuthenticationType | null;\n+  ip?: string | null;\n+  transaction?: Transaction;\n+}) {\n   return {\n     context: {\n+      auth: { user, type: authType },\n       ip: ip ?? user.lastActiveIp,\n       transaction,\n-      auth: { user },\n     },\n   } as APIContext;\n }\n\ndiff --git a/server/models/Subscription.ts b/server/models/Subscription.ts\nindex 3b70a3a6b731..a24b7018b082 100644\n--- a/server/models/Subscription.ts\n+++ b/server/models/Subscription.ts\n@@ -28,6 +28,8 @@ class Subscription extends ParanoidModel<\n   InferAttributes<Subscription>,\n   Partial<InferCreationAttributes<Subscription>>\n > {\n+  static eventNamespace = \"subscriptions\";\n+\n   @BelongsTo(() => User, \"userId\")\n   user: User;\n \n\ndiff --git a/server/models/base/Model.ts b/server/models/base/Model.ts\nindex 1f8a6f42638f..5fab2d6bb658 100644\n--- a/server/models/base/Model.ts\n+++ b/server/models/base/Model.ts\n@@ -11,6 +11,7 @@ import {\n   FindOptions,\n   FindOrCreateOptions,\n   InstanceDestroyOptions,\n+  InstanceRestoreOptions,\n   InstanceUpdateOptions,\n   ModelStatic,\n   NonAttribute,\n@@ -19,6 +20,7 @@ import {\n import {\n   AfterCreate,\n   AfterDestroy,\n+  AfterRestore,\n   AfterUpdate,\n   AfterUpsert,\n   BeforeCreate,\n@@ -63,6 +65,13 @@ class Model<\n     return this.destroy(ctx.context as InstanceDestroyOptions);\n   }\n \n+  /**\n+   * Restore the row corresponding to this instance. Only available for paranoid models.\n+   */\n+  public restoreWithCtx(ctx: APIContext) {\n+    return this.restore(ctx.context as InstanceRestoreOptions);\n+  }\n+\n   /**\n    * Find a row that matches the query, or build and save the row if none is found\n    * The successful result of the promise will be (instance, created) - Make sure to use `.then(([...]))`\n@@ -126,6 +135,14 @@ class Model<\n     await this.insertEvent(\"delete\", model, context);\n   }\n \n+  @AfterRestore\n+  static async afterRestoreEvent<T extends Model>(\n+    model: T,\n+    context: APIContext[\"context\"]\n+  ) {\n+    await this.insertEvent(\"create\", model, context);\n+  }\n+\n   /**\n    * Insert an event into the database recording a mutation to this model.\n    *\n\ndiff --git a/server/queues/processors/DocumentUserAddedProcessor.ts b/server/queues/processors/DocumentUserAddedProcessor.ts\nindex df5fe2d62362..d93f0596704d 100644\n--- a/server/queues/processors/DocumentUserAddedProcessor.ts\n+++ b/server/queues/processors/DocumentUserAddedProcessor.ts\n@@ -1,4 +1,5 @@\n import subscriptionCreator from \"@server/commands/subscriptionCreator\";\n+import { createContext } from \"@server/context\";\n import { User } from \"@server/models\";\n import { sequelize } from \"@server/storage/database\";\n import { DocumentUserEvent, Event } from \"@server/types\";\n@@ -15,12 +16,15 @@ export default class DocumentUserAddedProcessor extends BaseProcessor {\n \n     await sequelize.transaction(async (transaction) => {\n       await subscriptionCreator({\n-        user,\n+        ctx: createContext({\n+          user,\n+          authType: event.authType,\n+          ip: event.ip,\n+          transaction,\n+        }),\n         documentId: event.documentId,\n         event: \"documents.update\",\n         resubscribe: false,\n-        transaction,\n-        ip: event.ip,\n       });\n     });\n   }\n\ndiff --git a/server/queues/tasks/CommentCreatedNotificationsTask.ts b/server/queues/tasks/CommentCreatedNotificationsTask.ts\nindex 2bed7340e858..d02eb619394c 100644\n--- a/server/queues/tasks/CommentCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/CommentCreatedNotificationsTask.ts\n@@ -1,5 +1,6 @@\n import { NotificationEventType } from \"@shared/types\";\n import subscriptionCreator from \"@server/commands/subscriptionCreator\";\n+import { createContext } from \"@server/context\";\n import { Comment, Document, Notification, User } from \"@server/models\";\n import NotificationHelper from \"@server/models/helpers/NotificationHelper\";\n import { ProsemirrorHelper } from \"@server/models/helpers/ProsemirrorHelper\";\n@@ -26,12 +27,15 @@ export default class CommentCreatedNotificationsTask extends BaseTask<CommentEve\n     // if they haven't previously had one.\n     await sequelize.transaction(async (transaction) => {\n       await subscriptionCreator({\n-        user: comment.createdBy,\n+        ctx: createContext({\n+          user: comment.createdBy,\n+          authType: event.authType,\n+          ip: event.ip,\n+          transaction,\n+        }),\n         documentId: document.id,\n         event: \"documents.update\",\n         resubscribe: false,\n-        transaction,\n-        ip: event.ip,\n       });\n     });\n \n\ndiff --git a/server/queues/tasks/DocumentImportTask.ts b/server/queues/tasks/DocumentImportTask.ts\nindex 1237af559ec9..630c02b8a085 100644\n--- a/server/queues/tasks/DocumentImportTask.ts\n+++ b/server/queues/tasks/DocumentImportTask.ts\n@@ -49,7 +49,7 @@ export default class DocumentImportTask extends BaseTask<Props> {\n           fileName: sourceMetadata.fileName,\n           mimeType: sourceMetadata.mimeType,\n           content,\n-          ctx: createContext(user, transaction, ip),\n+          ctx: createContext({ user, transaction, ip }),\n         });\n \n         return documentCreator({\n@@ -62,7 +62,7 @@ export default class DocumentImportTask extends BaseTask<Props> {\n           collectionId,\n           parentDocumentId,\n           user,\n-          ctx: createContext(user, transaction, ip),\n+          ctx: createContext({ user, transaction, ip }),\n         });\n       });\n       return { documentId: document.id };\n\ndiff --git a/server/queues/tasks/ImportMarkdownZipTask.ts b/server/queues/tasks/ImportMarkdownZipTask.ts\nindex 4f37da9bf2ab..23c72eab0f80 100644\n--- a/server/queues/tasks/ImportMarkdownZipTask.ts\n+++ b/server/queues/tasks/ImportMarkdownZipTask.ts\n@@ -94,7 +94,7 @@ export default class ImportMarkdownZipTask extends ImportTask {\n                     ? \"\"\n                     : await fs.readFile(child.path, \"utf8\"),\n                 user,\n-                ctx: createContext(user, transaction),\n+                ctx: createContext({ user, transaction }),\n               })\n           );\n \n\ndiff --git a/server/queues/tasks/ImportNotionTask.ts b/server/queues/tasks/ImportNotionTask.ts\nindex a1d00398d285..36ccd640ee44 100644\n--- a/server/queues/tasks/ImportNotionTask.ts\n+++ b/server/queues/tasks/ImportNotionTask.ts\n@@ -136,7 +136,7 @@ export default class ImportNotionTask extends ImportTask {\n                     ? \"\"\n                     : await fs.readFile(child.path, \"utf8\"),\n                 user,\n-                ctx: createContext(user, transaction),\n+                ctx: createContext({ user, transaction }),\n               })\n           );\n \n@@ -257,7 +257,7 @@ export default class ImportNotionTask extends ImportTask {\n             fileName: name,\n             content: await fs.readFile(node.path, \"utf8\"),\n             user,\n-            ctx: createContext(user, transaction),\n+            ctx: createContext({ user, transaction }),\n           })\n         );\n \n\ndiff --git a/server/queues/tasks/ImportTask.ts b/server/queues/tasks/ImportTask.ts\nindex 2c0cda639f1d..70b8337413af 100644\n--- a/server/queues/tasks/ImportTask.ts\n+++ b/server/queues/tasks/ImportTask.ts\n@@ -474,7 +474,7 @@ export default abstract class ImportTask extends BaseTask<Props> {\n               parentDocumentId: item.parentDocumentId,\n               importId: fileOperation.id,\n               user,\n-              ctx: createContext(user, transaction),\n+              ctx: createContext({ user, transaction }),\n             });\n             documents.set(item.id, document);\n \n@@ -508,7 +508,7 @@ export default abstract class ImportTask extends BaseTask<Props> {\n                 type: item.mimeType,\n                 buffer: await item.buffer(),\n                 user,\n-                ctx: createContext(user, transaction),\n+                ctx: createContext({ user, transaction }),\n               });\n               if (attachment) {\n                 attachments.set(item.id, attachment);\n\ndiff --git a/server/routes/api/subscriptions/subscriptions.ts b/server/routes/api/subscriptions/subscriptions.ts\nindex 51e4607774ef..c4dbad08d4d7 100644\n--- a/server/routes/api/subscriptions/subscriptions.ts\n+++ b/server/routes/api/subscriptions/subscriptions.ts\n@@ -2,7 +2,7 @@ import Router from \"koa-router\";\n import { Transaction } from \"sequelize\";\n import { QueryNotices } from \"@shared/types\";\n import subscriptionCreator from \"@server/commands/subscriptionCreator\";\n-import subscriptionDestroyer from \"@server/commands/subscriptionDestroyer\";\n+import { createContext } from \"@server/context\";\n import env from \"@server/env\";\n import auth from \"@server/middlewares/authentication\";\n import { rateLimiter } from \"@server/middlewares/rateLimiter\";\n@@ -84,8 +84,8 @@ router.post(\n   validate(T.SubscriptionsCreateSchema),\n   transaction(),\n   async (ctx: APIContext<T.SubscriptionsCreateReq>) => {\n-    const { auth, transaction } = ctx.state;\n-    const { user } = auth;\n+    const { transaction } = ctx.state;\n+    const { user } = ctx.state.auth;\n     const { documentId, event } = ctx.input.body;\n \n     const document = await Document.findByPk(documentId, {\n@@ -96,11 +96,9 @@ router.post(\n     authorize(user, \"subscribe\", document);\n \n     const subscription = await subscriptionCreator({\n-      user,\n+      ctx,\n       documentId: document.id,\n       event,\n-      ip: ctx.request.ip,\n-      transaction,\n     });\n \n     ctx.body = {\n@@ -146,7 +144,13 @@ router.get(\n \n     authorize(user, \"delete\", subscription);\n \n-    await subscription.destroy({ transaction });\n+    await subscription.destroyWithCtx(\n+      createContext({\n+        user,\n+        ip: ctx.request.ip,\n+        transaction,\n+      })\n+    );\n \n     ctx.redirect(\n       `${user.team.url}/home?notice=${QueryNotices.UnsubscribeDocument}`\n@@ -160,8 +164,8 @@ router.post(\n   validate(T.SubscriptionsDeleteSchema),\n   transaction(),\n   async (ctx: APIContext<T.SubscriptionsDeleteReq>) => {\n-    const { auth, transaction } = ctx.state;\n-    const { user } = auth;\n+    const { transaction } = ctx.state;\n+    const { user } = ctx.state.auth;\n     const { id } = ctx.input.body;\n \n     const subscription = await Subscription.findByPk(id, {\n@@ -171,12 +175,7 @@ router.post(\n \n     authorize(user, \"delete\", subscription);\n \n-    await subscriptionDestroyer({\n-      user,\n-      subscription,\n-      ip: ctx.request.ip,\n-      transaction,\n-    });\n+    await subscription.destroyWithCtx(ctx);\n \n     ctx.body = {\n       success: true,\n",
    "test_patch": "diff --git a/server/commands/documentDuplicator.test.ts b/server/commands/documentDuplicator.test.ts\nindex 22fda227b351..1024a5582274 100644\n--- a/server/commands/documentDuplicator.test.ts\n+++ b/server/commands/documentDuplicator.test.ts\n@@ -16,7 +16,7 @@ describe(\"documentDuplicator\", () => {\n         document: original,\n         collection: original.collection,\n         user,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n \n@@ -42,7 +42,7 @@ describe(\"documentDuplicator\", () => {\n         collection: original.collection,\n         title: \"New title\",\n         user,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n \n@@ -75,7 +75,7 @@ describe(\"documentDuplicator\", () => {\n         collection: original.collection,\n         user,\n         recursive: true,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n \n@@ -95,7 +95,7 @@ describe(\"documentDuplicator\", () => {\n         collection: original.collection,\n         publish: false,\n         user,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n \n\ndiff --git a/server/commands/documentImporter.test.ts b/server/commands/documentImporter.test.ts\nindex b2592e72e14d..a230717e6d89 100644\n--- a/server/commands/documentImporter.test.ts\n+++ b/server/commands/documentImporter.test.ts\n@@ -23,7 +23,7 @@ describe(\"documentImporter\", () => {\n           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     const attachments = await Attachment.count({\n@@ -49,7 +49,7 @@ describe(\"documentImporter\", () => {\n         mimeType: \"application/octet-stream\",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     const attachments = await Attachment.count({\n@@ -78,7 +78,7 @@ describe(\"documentImporter\", () => {\n           mimeType: \"application/octet-stream\",\n           fileName,\n           content,\n-          ctx: createContext(user, transaction),\n+          ctx: createContext({ user, transaction }),\n         })\n       );\n     } catch (err) {\n@@ -100,7 +100,7 @@ describe(\"documentImporter\", () => {\n         mimeType: \"application/octet-stream\",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     const attachments = await Attachment.count({\n@@ -127,7 +127,7 @@ describe(\"documentImporter\", () => {\n         mimeType: \"text/html\",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     expect(response.text).toContain(\"Text paragraph\");\n@@ -146,7 +146,7 @@ describe(\"documentImporter\", () => {\n         mimeType: \"application/msword\",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n \n@@ -167,7 +167,7 @@ describe(\"documentImporter\", () => {\n         mimeType: \"text/plain\",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     expect(response.text).toContain(\"This is a test paragraph\");\n@@ -184,7 +184,7 @@ describe(\"documentImporter\", () => {\n         mimeType: \"text/plain\",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n \n@@ -205,7 +205,7 @@ describe(\"documentImporter\", () => {\n         mimeType: \"application/lol\",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     expect(response.text).toContain(\"This is a test paragraph\");\n@@ -227,7 +227,7 @@ describe(\"documentImporter\", () => {\n           mimeType: \"executable/zip\",\n           fileName,\n           content,\n-          ctx: createContext(user, transaction),\n+          ctx: createContext({ user, transaction }),\n         })\n       );\n     } catch (err) {\n@@ -257,7 +257,7 @@ describe(\"documentImporter\", () => {\n         mimeType: \"text/html\",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     expect(response.text).toEqual(\"\\\\$100\");\n@@ -283,7 +283,7 @@ describe(\"documentImporter\", () => {\n         mimeType: \"text/html\",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     expect(response.text).toEqual(\"`echo $foo`\");\n@@ -309,7 +309,7 @@ describe(\"documentImporter\", () => {\n         mimeType: \"text/html\",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     expect(response.text).toEqual(\"```\\necho $foo\\n```\");\n\ndiff --git a/server/commands/subscriptionCreator.test.ts b/server/commands/subscriptionCreator.test.ts\nindex 1716e2ee6c62..9799f288a2d9 100644\n--- a/server/commands/subscriptionCreator.test.ts\n+++ b/server/commands/subscriptionCreator.test.ts\n@@ -1,8 +1,8 @@\n+import { createContext } from \"@server/context\";\n import { Subscription, Event } from \"@server/models\";\n import { sequelize } from \"@server/storage/database\";\n import { buildDocument, buildUser } from \"@server/test/factories\";\n import subscriptionCreator from \"./subscriptionCreator\";\n-import subscriptionDestroyer from \"./subscriptionDestroyer\";\n \n describe(\"subscriptionCreator\", () => {\n   const ip = \"127.0.0.1\";\n@@ -18,11 +18,9 @@ describe(\"subscriptionCreator\", () => {\n \n     const subscription = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n@@ -57,11 +55,9 @@ describe(\"subscriptionCreator\", () => {\n \n     const subscription1 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n@@ -92,21 +88,14 @@ describe(\"subscriptionCreator\", () => {\n \n     const subscription0 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n     await sequelize.transaction(async (transaction) =>\n-      subscriptionDestroyer({\n-        user,\n-        subscription: subscription0,\n-        ip,\n-        transaction,\n-      })\n+      subscription0.destroyWithCtx(createContext({ user, transaction, ip }))\n     );\n \n     expect(subscription0.id).toBeDefined();\n@@ -116,11 +105,9 @@ describe(\"subscriptionCreator\", () => {\n \n     const subscription1 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n@@ -153,21 +140,17 @@ describe(\"subscriptionCreator\", () => {\n \n     const subscription0 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n     const subscription1 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n@@ -198,21 +181,14 @@ describe(\"subscriptionCreator\", () => {\n \n     const subscription0 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n     await sequelize.transaction(async (transaction) =>\n-      subscriptionDestroyer({\n-        user,\n-        subscription: subscription0,\n-        ip,\n-        transaction,\n-      })\n+      subscription0.destroyWithCtx(createContext({ user, transaction, ip }))\n     );\n \n     expect(subscription0.id).toBeDefined();\n@@ -222,11 +198,9 @@ describe(\"subscriptionCreator\", () => {\n \n     const subscription1 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n@@ -265,11 +239,9 @@ describe(\"subscriptionCreator\", () => {\n \n     const subscription0 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n\ndiff --git a/server/commands/subscriptionDestroyer.test.ts b/server/commands/subscriptionDestroyer.test.ts\ndeleted file mode 100644\nindex a25bf2ea99e2..000000000000\n--- a/server/commands/subscriptionDestroyer.test.ts\n+++ /dev/null\n@@ -1,87 +0,0 @@\n-import { Subscription } from \"@server/models\";\n-import { sequelize } from \"@server/storage/database\";\n-import {\n-  buildDocument,\n-  buildSubscription,\n-  buildUser,\n-} from \"@server/test/factories\";\n-import subscriptionDestroyer from \"./subscriptionDestroyer\";\n-\n-describe(\"subscriptionDestroyer\", () => {\n-  const ip = \"127.0.0.1\";\n-\n-  it(\"should destroy existing subscription\", async () => {\n-    const user = await buildUser();\n-\n-    const document = await buildDocument({\n-      userId: user.id,\n-      teamId: user.teamId,\n-    });\n-\n-    const subscription = await buildSubscription({\n-      userId: user.id,\n-      documentId: document.id,\n-    });\n-\n-    await sequelize.transaction(\n-      async (transaction) =>\n-        await subscriptionDestroyer({\n-          user,\n-          subscription,\n-          ip,\n-          transaction,\n-        })\n-    );\n-\n-    const count = await Subscription.count({\n-      where: {\n-        userId: user.id,\n-      },\n-    });\n-\n-    expect(count).toEqual(0);\n-  });\n-\n-  it(\"should soft delete row\", async () => {\n-    const user = await buildUser();\n-\n-    const document = await buildDocument({\n-      userId: user.id,\n-      teamId: user.teamId,\n-    });\n-\n-    const subscription = await buildSubscription({\n-      userId: user.id,\n-      documentId: document.id,\n-    });\n-\n-    await sequelize.transaction(\n-      async (transaction) =>\n-        await subscriptionDestroyer({\n-          user,\n-          subscription,\n-          ip,\n-          transaction,\n-        })\n-    );\n-\n-    const count = await Subscription.count({\n-      where: {\n-        userId: user.id,\n-      },\n-    });\n-\n-    expect(count).toEqual(0);\n-\n-    const deletedSubscription = await Subscription.findOne({\n-      where: {\n-        userId: user.id,\n-        documentId: document.id,\n-      },\n-      paranoid: false,\n-    });\n-\n-    expect(deletedSubscription).toBeDefined();\n-    expect(deletedSubscription?.deletedAt).toBeDefined();\n-  });\n-});\n\ndiff --git a/server/test/support.ts b/server/test/support.ts\nindex 1d4c504ea7f3..e61c511b91e2 100644\n--- a/server/test/support.ts\n+++ b/server/test/support.ts\n@@ -46,7 +46,7 @@ export function withAPIContext<T>(\n       transaction,\n     };\n     return fn({\n-      ...createContext(user, transaction),\n+      ...createContext({ user, transaction }),\n       state,\n       request: {\n         ip: faker.internet.ip(),\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8161",
    "pr_id": 8161,
    "issue_id": 7920,
    "repo": "outline/outline",
    "problem_statement": "Move event writing to model layer\n`events` should be written automatically based on mutations in the model layer. To achieve this the request context will be passed down to model mutations. Translation must happen on a model by model basis.\n\nCommands should be removed where they only exist to group a mutation and it's associated event write.\n\n### TODO\n- [x] ApiKey\n- [x] Attachment\n- [x] Comment\n- [x] FileOperation\n- [x] Group\n- [x] GroupMembership\n- [x] GroupUser\n- [x] Pin\n- [x] Reaction\n- [x] Share\n- [x] Star\n- [x] UserMembership\n- [x] Subscription\n- [x] WebhookSubscription\n- [x] Notification\n- [ ] Team\n- [ ] Revision\n- [ ] Document\n- [ ] Collection\n- [ ] TeamDomain\n- [ ] User",
    "issue_word_count": 89,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "plugins/webhooks/server/api/webhookSubscriptions.test.ts",
      "plugins/webhooks/server/api/webhookSubscriptions.ts",
      "server/models/WebhookSubscription.ts"
    ],
    "pr_changed_test_files": [
      "plugins/webhooks/server/api/webhookSubscriptions.test.ts"
    ],
    "base_commit": "f448be5830045b886a890d4bf83f9e5bc1314866",
    "head_commit": "bcfb3654d32446962e612d066aeee0495be1c873",
    "repo_url": "https://github.com/outline/outline/pull/8161",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8161",
    "dockerfile": "",
    "pr_merged_at": "2024-12-31T00:11:32.000Z",
    "patch": "diff --git a/plugins/webhooks/server/api/webhookSubscriptions.ts b/plugins/webhooks/server/api/webhookSubscriptions.ts\nindex 27caa6ecbbfc..00f3da7aaf67 100644\n--- a/plugins/webhooks/server/api/webhookSubscriptions.ts\n+++ b/plugins/webhooks/server/api/webhookSubscriptions.ts\n@@ -5,7 +5,7 @@ import { UserRole } from \"@shared/types\";\n import auth from \"@server/middlewares/authentication\";\n import { transaction } from \"@server/middlewares/transaction\";\n import validate from \"@server/middlewares/validate\";\n-import { WebhookSubscription, Event } from \"@server/models\";\n+import { WebhookSubscription } from \"@server/models\";\n import { authorize } from \"@server/policies\";\n import pagination from \"@server/routes/api/middlewares/pagination\";\n import { APIContext } from \"@server/types\";\n@@ -20,7 +20,9 @@ router.post(\n   pagination(),\n   async (ctx: APIContext) => {\n     const { user } = ctx.state.auth;\n+\n     authorize(user, \"listWebhookSubscription\", user.team);\n+\n     const webhooks = await WebhookSubscription.findAll({\n       where: {\n         teamId: user.teamId,\n@@ -43,34 +45,19 @@ router.post(\n   validate(T.WebhookSubscriptionsCreateSchema),\n   transaction(),\n   async (ctx: APIContext<T.WebhookSubscriptionsCreateReq>) => {\n-    const { transaction } = ctx.state;\n+    const { name, url, secret, events } = ctx.input.body;\n     const { user } = ctx.state.auth;\n-    authorize(user, \"createWebhookSubscription\", user.team);\n \n-    const { name, url, secret } = ctx.input.body;\n-    const events: string[] = compact(ctx.input.body.events);\n+    authorize(user, \"createWebhookSubscription\", user.team);\n \n-    const webhookSubscription = await WebhookSubscription.create(\n-      {\n-        name,\n-        events,\n-        createdById: user.id,\n-        teamId: user.teamId,\n-        url,\n-        enabled: true,\n-        secret: isEmpty(secret) ? undefined : secret,\n-      },\n-      { transaction }\n-    );\n-\n-    await Event.createFromContext(ctx, {\n-      name: \"webhookSubscriptions.create\",\n-      modelId: webhookSubscription.id,\n-      data: {\n-        name,\n-        url,\n-        events,\n-      },\n+    const webhookSubscription = await WebhookSubscription.createWithCtx(ctx, {\n+      name,\n+      url,\n+      events: compact(events),\n+      enabled: true,\n+      secret: isEmpty(secret) ? undefined : secret,\n+      createdById: user.id,\n+      teamId: user.teamId,\n     });\n \n     ctx.body = {\n@@ -88,6 +75,7 @@ router.post(\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n+\n     const webhookSubscription = await WebhookSubscription.findByPk(id, {\n       rejectOnEmpty: true,\n       lock: transaction.LOCK.UPDATE,\n@@ -96,17 +84,7 @@ router.post(\n \n     authorize(user, \"delete\", webhookSubscription);\n \n-    await webhookSubscription.destroy({ transaction });\n-\n-    await Event.createFromContext(ctx, {\n-      name: \"webhookSubscriptions.delete\",\n-      modelId: webhookSubscription.id,\n-      data: {\n-        name: webhookSubscription.name,\n-        url: webhookSubscription.url,\n-        events: webhookSubscription.events,\n-      },\n-    });\n+    await webhookSubscription.destroyWithCtx(ctx);\n \n     ctx.body = {\n       success: true,\n@@ -120,10 +98,10 @@ router.post(\n   validate(T.WebhookSubscriptionsUpdateSchema),\n   transaction(),\n   async (ctx: APIContext<T.WebhookSubscriptionsUpdateReq>) => {\n-    const { id, name, url, secret } = ctx.input.body;\n+    const { id, name, url, secret, events } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n-    const events: string[] = compact(ctx.input.body.events);\n+\n     const webhookSubscription = await WebhookSubscription.findByPk(id, {\n       rejectOnEmpty: true,\n       lock: transaction.LOCK.UPDATE,\n@@ -132,25 +110,12 @@ router.post(\n \n     authorize(user, \"update\", webhookSubscription);\n \n-    await webhookSubscription.update(\n-      {\n-        name,\n-        url,\n-        events,\n-        enabled: true,\n-        secret: isEmpty(secret) ? undefined : secret,\n-      },\n-      { transaction }\n-    );\n-\n-    await Event.createFromContext(ctx, {\n-      name: \"webhookSubscriptions.update\",\n-      modelId: webhookSubscription.id,\n-      data: {\n-        name: webhookSubscription.name,\n-        url: webhookSubscription.url,\n-        events: webhookSubscription.events,\n-      },\n+    await webhookSubscription.updateWithCtx(ctx, {\n+      name,\n+      url,\n+      events: compact(events),\n+      enabled: true,\n+      secret: isEmpty(secret) ? undefined : secret,\n     });\n \n     ctx.body = {\n\ndiff --git a/server/models/WebhookSubscription.ts b/server/models/WebhookSubscription.ts\nindex 92d5bce563a3..38e227b0442e 100644\n--- a/server/models/WebhookSubscription.ts\n+++ b/server/models/WebhookSubscription.ts\n@@ -44,6 +44,8 @@ class WebhookSubscription extends ParanoidModel<\n   InferAttributes<WebhookSubscription>,\n   Partial<InferCreationAttributes<WebhookSubscription>>\n > {\n+  static eventNamespace = \"webhookSubscriptions\";\n+\n   @NotEmpty\n   @Length({ max: 255, msg: \"Webhook name be less than 255 characters\" })\n   @Column\n",
    "test_patch": "diff --git a/plugins/webhooks/server/api/webhookSubscriptions.test.ts b/plugins/webhooks/server/api/webhookSubscriptions.test.ts\nnew file mode 100644\nindex 000000000000..200c0dee9c58\n--- /dev/null\n+++ b/plugins/webhooks/server/api/webhookSubscriptions.test.ts\n@@ -0,0 +1,239 @@\n+import {\n+  buildAdmin,\n+  buildUser,\n+  buildWebhookSubscription,\n+} from \"@server/test/factories\";\n+import { getTestServer } from \"@server/test/support\";\n+\n+const server = getTestServer();\n+\n+describe(\"#webhookSubscriptions.list\", () => {\n+  it(\"should fail with status 401 unauthorized when user token is missing\", async () => {\n+    const res = await server.post(\"/api/webhookSubscriptions.list\", {\n+      body: {},\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(401);\n+    expect(body.message).toEqual(\"Authentication required\");\n+  });\n+\n+  it(\"should fail with status 403 forbidden for non-admin user\", async () => {\n+    const user = await buildUser();\n+\n+    const res = await server.post(\"/api/webhookSubscriptions.list\", {\n+      body: { token: user.getJwtToken() },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(403);\n+    expect(body.message).toEqual(\"Admin role required\");\n+  });\n+\n+  it(\"should return the webhook subscriptions for the user's team\", async () => {\n+    const user = await buildAdmin();\n+    const webhookSubscriptions = await Promise.all(\n+      Array(20)\n+        .fill(1)\n+        .map(() =>\n+          buildWebhookSubscription({\n+            createdById: user.id,\n+            teamId: user.teamId,\n+          })\n+        )\n+    );\n+\n+    const res = await server.post(\"/api/webhookSubscriptions.list\", {\n+      body: { token: user.getJwtToken() },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(webhookSubscriptions.length);\n+  });\n+});\n+\n+describe(\"#webhookSubscriptions.create\", () => {\n+  it(\"should fail with status 401 unauthorized when user token is missing\", async () => {\n+    const res = await server.post(\"/api/webhookSubscriptions.create\", {\n+      body: {},\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(401);\n+    expect(body.message).toEqual(\"Authentication required\");\n+  });\n+\n+  it(\"should fail with status 403 forbidden for non-admin user\", async () => {\n+    const user = await buildUser();\n+\n+    const res = await server.post(\"/api/webhookSubscriptions.create\", {\n+      body: { token: user.getJwtToken() },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(403);\n+    expect(body.message).toEqual(\"Admin role required\");\n+  });\n+\n+  it(\"should successfully create a webhook subscription\", async () => {\n+    const user = await buildAdmin();\n+    const name = \"Test webhook\";\n+    const url = \"https://www.example.com\";\n+    const events = [\"comments\"];\n+    const secret = \"Test secret\";\n+\n+    const res = await server.post(\"/api/webhookSubscriptions.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        name,\n+        url,\n+        events,\n+        secret,\n+      },\n+    });\n+    const body = await res.json();\n+    const webhook = body.data;\n+\n+    expect(res.status).toEqual(200);\n+    expect(webhook.name).toEqual(name);\n+    expect(webhook.url).toEqual(url);\n+    expect(webhook.events).toEqual(events);\n+    expect(webhook.secret).toEqual(secret);\n+    expect(webhook.enabled).toEqual(true);\n+  });\n+});\n+\n+describe(\"#webhookSubscriptions.update\", () => {\n+  it(\"should fail with status 401 unauthorized when user token is missing\", async () => {\n+    const res = await server.post(\"/api/webhookSubscriptions.update\", {\n+      body: {},\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(401);\n+    expect(body.message).toEqual(\"Authentication required\");\n+  });\n+\n+  it(\"should fail with status 403 forbidden for non-admin user\", async () => {\n+    const user = await buildUser();\n+\n+    const res = await server.post(\"/api/webhookSubscriptions.update\", {\n+      body: { token: user.getJwtToken() },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(403);\n+    expect(body.message).toEqual(\"Admin role required\");\n+  });\n+\n+  it(\"should successfully update a webhook subscription\", async () => {\n+    const user = await buildAdmin();\n+    const name = \"Updated webhook name\";\n+    const url = \"https://www.example.com/update\";\n+    const events = [\"comments\"];\n+\n+    const existingWebhook = await buildWebhookSubscription({\n+      name: \"Created webhook name\",\n+      url: \"https://www.example.com/create\",\n+      events: [\"*\"],\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const res = await server.post(\"/api/webhookSubscriptions.update\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: existingWebhook.id,\n+        name,\n+        url,\n+        events,\n+      },\n+    });\n+    const body = await res.json();\n+    const webhook = body.data;\n+\n+    expect(res.status).toEqual(200);\n+    expect(webhook.name).toEqual(name);\n+    expect(webhook.url).toEqual(url);\n+    expect(webhook.events).toEqual(events);\n+    expect(webhook.enabled).toEqual(true);\n+  });\n+\n+  it(\"should activate a disabled webhook subscription when it's updated\", async () => {\n+    const user = await buildAdmin();\n+    const name = \"Updated webhook name\";\n+    const url = \"https://www.example.com/update\";\n+    const events = [\"comments\"];\n+\n+    const disabledWebhook = await buildWebhookSubscription({\n+      name: \"Created webhook name\",\n+      url: \"https://www.example.com/create\",\n+      events: [\"*\"],\n+      createdById: user.id,\n+      teamId: user.teamId,\n+      enabled: false,\n+    });\n+\n+    const res = await server.post(\"/api/webhookSubscriptions.update\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: disabledWebhook.id,\n+        name,\n+        url,\n+        events,\n+      },\n+    });\n+    const body = await res.json();\n+    const webhook = body.data;\n+\n+    expect(res.status).toEqual(200);\n+    expect(webhook.name).toEqual(name);\n+    expect(webhook.url).toEqual(url);\n+    expect(webhook.events).toEqual(events);\n+    expect(webhook.enabled).toEqual(true);\n+  });\n+});\n+\n+describe(\"#webhookSubscriptions.delete\", () => {\n+  it(\"should fail with status 401 unauthorized when user token is missing\", async () => {\n+    const res = await server.post(\"/api/webhookSubscriptions.delete\", {\n+      body: {},\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(401);\n+    expect(body.message).toEqual(\"Authentication required\");\n+  });\n+\n+  it(\"should fail with status 403 forbidden for non-admin user\", async () => {\n+    const user = await buildUser();\n+\n+    const res = await server.post(\"/api/webhookSubscriptions.delete\", {\n+      body: { token: user.getJwtToken() },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(403);\n+    expect(body.message).toEqual(\"Admin role required\");\n+  });\n+\n+  it(\"should successfully delete a webhook subscription\", async () => {\n+    const user = await buildAdmin();\n+    const createdWebhook = await buildWebhookSubscription({\n+      name: \"Test webhook\",\n+      url: \"https://www.example.com\",\n+      events: [\"*\"],\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const res = await server.post(\"/api/webhookSubscriptions.delete\", {\n+      body: { token: user.getJwtToken(), id: createdWebhook.id },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.success).toEqual(true);\n+  });\n+});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8145",
    "pr_id": 8145,
    "issue_id": 8142,
    "repo": "outline/outline",
    "problem_statement": "Formatting errors in copying\nThe copied text will automatically add line breaks.\r\n\r\n**To Reproduce**\r\nWrite a list and then copy it and paste it into the console and you will find that the format is messed up.\r\n\r\n\r\n**Expected behavior**\r\nFully formatted\r\n\r\n**Screenshots**\r\n<img width=\"1265\" alt=\"image\" src=\"https://github.com/user-attachments/assets/18f2b9f2-2952-47a2-9eec-ec2c6a8b10c0\" />\r\n\r\n\r\n\r\nBrowser: Google Chrome\r\nDevice: MacBook Pro\r\nOS: macOS 14.6.1\r\nInstallation: Self-hosted server\r\nOutline Version: 0.81.1\r\n",
    "issue_word_count": 75,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "server/models/helpers/DocumentHelper.test.ts",
      "shared/editor/lib/textBetween.ts"
    ],
    "pr_changed_test_files": [
      "server/models/helpers/DocumentHelper.test.ts"
    ],
    "base_commit": "3437bd3a6c245835bc435985a5f6d0e09cc828bb",
    "head_commit": "3139f9faf4ab7563f88d1cfa78bf2af0405e557a",
    "repo_url": "https://github.com/outline/outline/pull/8145",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8145",
    "dockerfile": "",
    "pr_merged_at": "2024-12-26T11:31:13.000Z",
    "patch": "diff --git a/shared/editor/lib/textBetween.ts b/shared/editor/lib/textBetween.ts\nindex 4a3fda301181..89ba7db8902a 100644\n--- a/shared/editor/lib/textBetween.ts\n+++ b/shared/editor/lib/textBetween.ts\n@@ -16,27 +16,37 @@ export default function textBetween(\n   to: number,\n   plainTextSerializers: Record<string, PlainTextSerializer | undefined>\n ): string {\n-  const blockSeparator = \"\\n\\n\";\n   let text = \"\";\n-  let separated = true;\n+  let first = true;\n+  const blockSeparator = \"\\n\";\n \n   doc.nodesBetween(from, to, (node, pos) => {\n     const toPlainText = plainTextSerializers[node.type.name];\n+    let nodeText = \"\";\n \n     if (toPlainText) {\n-      if (node.isBlock && !separated) {\n+      nodeText += toPlainText(node);\n+    } else if (node.isText) {\n+      nodeText += node.textBetween(\n+        Math.max(from, pos) - pos,\n+        to - pos,\n+        blockSeparator\n+      );\n+    }\n+\n+    if (\n+      node.isBlock &&\n+      ((node.isLeaf && nodeText) || node.isTextblock) &&\n+      blockSeparator\n+    ) {\n+      if (first) {\n+        first = false;\n+      } else {\n         text += blockSeparator;\n-        separated = true;\n       }\n-\n-      text += toPlainText(node);\n-    } else if (node.isText) {\n-      text += node.text?.slice(Math.max(from, pos) - pos, to - pos);\n-      separated = false;\n-    } else if (node.isBlock && !separated) {\n-      text += blockSeparator;\n-      separated = true;\n     }\n+\n+    text += nodeText;\n   });\n \n   return text;\n",
    "test_patch": "diff --git a/server/models/helpers/DocumentHelper.test.ts b/server/models/helpers/DocumentHelper.test.ts\nindex 60af8f8c15d6..d8f97a186504 100644\n--- a/server/models/helpers/DocumentHelper.test.ts\n+++ b/server/models/helpers/DocumentHelper.test.ts\n@@ -248,39 +248,30 @@ This is a new paragraph.\n \n       // Strip all formatting\n       expect(text).toEqual(`This is a test paragraph\n-\n A new link\n-\n list item 1\n-\n This is a new paragraph.\n-\n This is a placeholder\n-\n this is a highlight\n-\n checklist item 1\n-\n checklist item 2\n-\n checklist item 3\n-\n checklist item 4\n-\n checklist item 5\n-\n This\n-\n Is\n-\n Table\n-\n Multiple\n \n+\n Lines\n \n+\n In a cell\n \n+\n+\n+\n `);\n     });\n   });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8127",
    "pr_id": 8127,
    "issue_id": 8099,
    "repo": "outline/outline",
    "problem_statement": "`group_permissions->documentId` and `group_permissions->sourceId`  indexes are missing\nCurrent set of indexes looks like\r\n\r\n<img width=\"576\" alt=\"image\" src=\"https://github.com/user-attachments/assets/4fc6e176-3cbb-4733-a14b-33c5d5161b2c\">\r\n",
    "issue_word_count": 23,
    "test_files_count": 1,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "app/models/Group.ts",
      "server/commands/groupCreator.ts",
      "server/commands/groupUpdater.ts",
      "server/migrations/20241219023150-group-external-id.js",
      "server/models/Group.ts",
      "server/presenters/group.ts",
      "server/routes/api/groups/groups.test.ts",
      "server/routes/api/groups/groups.ts",
      "server/routes/api/groups/schema.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/groups/groups.test.ts"
    ],
    "base_commit": "02aa4c2928018795427bf0f6a824efe4c411bee3",
    "head_commit": "6ab9387544a31a3540721825517e34ab3ac3b53b",
    "repo_url": "https://github.com/outline/outline/pull/8127",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8127",
    "dockerfile": "",
    "pr_merged_at": "2024-12-26T16:44:04.000Z",
    "patch": "diff --git a/app/models/Group.ts b/app/models/Group.ts\nindex d59c20d2176a..328f308c10be 100644\n--- a/app/models/Group.ts\n+++ b/app/models/Group.ts\n@@ -10,6 +10,9 @@ class Group extends Model {\n   @observable\n   name: string;\n \n+  @observable\n+  externalId: string | undefined;\n+\n   @observable\n   memberCount: number;\n \n\ndiff --git a/server/commands/groupCreator.ts b/server/commands/groupCreator.ts\nindex 6151cd1b7b79..052deaef4bc1 100644\n--- a/server/commands/groupCreator.ts\n+++ b/server/commands/groupCreator.ts\n@@ -3,6 +3,7 @@ import { Event, Group, type User } from \"@server/models\";\n \n type Props = {\n   name: string;\n+  externalId: string | undefined;\n   actor: User;\n   ip: string;\n   transaction?: Transaction;\n@@ -10,6 +11,7 @@ type Props = {\n \n export default async function groupCreator({\n   name,\n+  externalId,\n   actor,\n   ip,\n   transaction,\n@@ -17,6 +19,7 @@ export default async function groupCreator({\n   const group = await Group.create(\n     {\n       name,\n+      externalId,\n       teamId: actor.teamId,\n       createdById: actor.id,\n     },\n\ndiff --git a/server/commands/groupUpdater.ts b/server/commands/groupUpdater.ts\nindex 98ddb966fc7a..b69460421202 100644\n--- a/server/commands/groupUpdater.ts\n+++ b/server/commands/groupUpdater.ts\n@@ -3,7 +3,8 @@ import { Event, type Group, type User } from \"@server/models\";\n \n type Props = {\n   group: Group;\n-  name: string;\n+  name: string | undefined;\n+  externalId: string | undefined;\n   actor: User;\n   ip: string;\n   transaction?: Transaction;\n@@ -12,11 +13,17 @@ type Props = {\n export default async function groupUpdater({\n   group,\n   name,\n+  externalId,\n   actor,\n   ip,\n   transaction,\n }: Props): Promise<Group> {\n-  group.name = name;\n+  if (name) {\n+    group.name = name;\n+  }\n+  if (externalId) {\n+    group.externalId = externalId;\n+  }\n \n   if (group.changed()) {\n     await group.save({ transaction });\n\ndiff --git a/server/migrations/20241219023150-group-external-id.js b/server/migrations/20241219023150-group-external-id.js\nnew file mode 100644\nindex 000000000000..b4f239a203ba\n--- /dev/null\n+++ b/server/migrations/20241219023150-group-external-id.js\n@@ -0,0 +1,24 @@\n+\"use strict\";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.addColumn(\"groups\", \"externalId\", {\n+        type: Sequelize.STRING,\n+      }, { transaction });\n+      await queryInterface.addIndex(\"groups\", [\"externalId\"], { transaction });\n+      await queryInterface.addIndex(\"group_permissions\", [\"documentId\"], { transaction });\n+      await queryInterface.addIndex(\"group_permissions\", [\"sourceId\"], { transaction });\n+    });\n+  },\n+\n+  async down(queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.removeIndex(\"group_permissions\", [\"sourceId\"], { transaction });\n+      await queryInterface.removeIndex(\"group_permissions\", [\"documentId\"], { transaction });\n+      await queryInterface.removeIndex(\"groups\", [\"externalId\"], { transaction });\n+      await queryInterface.removeColumn(\"groups\", \"externalId\", { transaction });\n+    });\n+  },\n+};\n\ndiff --git a/server/models/Group.ts b/server/models/Group.ts\nindex 5b69ad13c775..dee4873bf1b1 100644\n--- a/server/models/Group.ts\n+++ b/server/models/Group.ts\n@@ -65,6 +65,9 @@ class Group extends ParanoidModel<\n   @Column\n   name: string;\n \n+  @Column\n+  externalId: string;\n+\n   static filterByMember(userId: string | undefined) {\n     return userId\n       ? this.scope({ method: [\"withMembership\", userId] })\n\ndiff --git a/server/presenters/group.ts b/server/presenters/group.ts\nindex 91a8057add79..a7819c31f3e8 100644\n--- a/server/presenters/group.ts\n+++ b/server/presenters/group.ts\n@@ -4,6 +4,7 @@ export default async function presentGroup(group: Group) {\n   return {\n     id: group.id,\n     name: group.name,\n+    externalId: group.externalId,\n     memberCount: await group.memberCount,\n     createdAt: group.createdAt,\n     updatedAt: group.updatedAt,\n\ndiff --git a/server/routes/api/groups/groups.ts b/server/routes/api/groups/groups.ts\nindex 623183b0c77d..4764c52e01b5 100644\n--- a/server/routes/api/groups/groups.ts\n+++ b/server/routes/api/groups/groups.ts\n@@ -31,7 +31,7 @@ router.post(\n   pagination(),\n   validate(T.GroupsListSchema),\n   async (ctx: APIContext<T.GroupsListReq>) => {\n-    const { sort, direction, query, userId, name } = ctx.input.body;\n+    const { sort, direction, query, userId, externalId, name } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     authorize(user, \"listGroups\", user.team);\n \n@@ -55,6 +55,13 @@ router.post(\n       };\n     }\n \n+    if (externalId) {\n+      where = {\n+        ...where,\n+        externalId,\n+      };\n+    }\n+\n     const groups = await Group.filterByMember(userId).findAll({\n       where,\n       order: [[sort, direction]],\n@@ -110,18 +117,19 @@ router.post(\n \n router.post(\n   \"groups.create\",\n-  rateLimiter(RateLimiterStrategy.TenPerHour),\n+  rateLimiter(RateLimiterStrategy.TenPerMinute),\n   auth(),\n   validate(T.GroupsCreateSchema),\n   transaction(),\n   async (ctx: APIContext<T.GroupsCreateReq>) => {\n-    const { name } = ctx.input.body;\n+    const { name, externalId } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n     authorize(user, \"createGroup\", user.team);\n \n     const group = await groupCreator({\n       name,\n+      externalId,\n       actor: user,\n       ip: ctx.request.ip,\n       transaction,\n@@ -140,7 +148,7 @@ router.post(\n   validate(T.GroupsUpdateSchema),\n   transaction(),\n   async (ctx: APIContext<T.GroupsUpdateReq>) => {\n-    const { id, name } = ctx.input.body;\n+    const { id, name, externalId } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n \n@@ -150,6 +158,7 @@ router.post(\n     group = await groupUpdater({\n       group,\n       name,\n+      externalId,\n       actor: user,\n       ip: ctx.request.ip,\n       transaction,\n\ndiff --git a/server/routes/api/groups/schema.ts b/server/routes/api/groups/schema.ts\nindex 4022282aeeeb..74c6d0ac7ac4 100644\n--- a/server/routes/api/groups/schema.ts\n+++ b/server/routes/api/groups/schema.ts\n@@ -13,7 +13,6 @@ export const GroupsListSchema = z.object({\n       .string()\n       .optional()\n       .transform((val) => (val !== \"ASC\" ? \"DESC\" : val)),\n-\n     /** Groups sorting column */\n     sort: z\n       .string()\n@@ -21,13 +20,12 @@ export const GroupsListSchema = z.object({\n         message: \"Invalid sort parameter\",\n       })\n       .default(\"updatedAt\"),\n-\n     /** Only list groups where this user is a member */\n     userId: z.string().uuid().optional(),\n-\n+    /** Find group matching externalId */\n+    externalId: z.string().optional(),\n     /** @deprecated Find group with matching name */\n     name: z.string().optional(),\n-\n     /** Find group matching query */\n     query: z.string().optional(),\n   }),\n@@ -45,6 +43,8 @@ export const GroupsCreateSchema = z.object({\n   body: z.object({\n     /** Group name */\n     name: z.string(),\n+    /** Optionally link this group to an external source. */\n+    externalId: z.string().optional(),\n   }),\n });\n \n@@ -53,7 +53,9 @@ export type GroupsCreateReq = z.infer<typeof GroupsCreateSchema>;\n export const GroupsUpdateSchema = z.object({\n   body: BaseIdSchema.extend({\n     /** Group name */\n-    name: z.string(),\n+    name: z.string().optional(),\n+    /** Optionally link this group to an external source. */\n+    externalId: z.string().optional(),\n   }),\n });\n \n",
    "test_patch": "diff --git a/server/routes/api/groups/groups.test.ts b/server/routes/api/groups/groups.test.ts\nindex a0a0a8d0a64b..415e5f102a04 100644\n--- a/server/routes/api/groups/groups.test.ts\n+++ b/server/routes/api/groups/groups.test.ts\n@@ -12,11 +12,13 @@ describe(\"#groups.create\", () => {\n       body: {\n         token: user.getJwtToken(),\n         name,\n+        externalId: \"123\",\n       },\n     });\n     const body = await res.json();\n     expect(res.status).toEqual(200);\n     expect(body.data.name).toEqual(name);\n+    expect(body.data.externalId).toEqual(\"123\");\n   });\n });\n \n@@ -67,12 +69,14 @@ describe(\"#groups.update\", () => {\n         teamId: user.teamId,\n       });\n     });\n+\n     it(\"allows admin to edit a group\", async () => {\n       const res = await server.post(\"/api/groups.update\", {\n         body: {\n           token: user.getJwtToken(),\n           id: group.id,\n           name: \"Test\",\n+          externalId: \"123\",\n         },\n       });\n       const events = await Event.findAll({\n@@ -84,7 +88,9 @@ describe(\"#groups.update\", () => {\n       const body = await res.json();\n       expect(res.status).toEqual(200);\n       expect(body.data.name).toBe(\"Test\");\n+      expect(body.data.externalId).toBe(\"123\");\n     });\n+\n     it(\"does not create an event if the update is a noop\", async () => {\n       const res = await server.post(\"/api/groups.update\", {\n         body: {\n@@ -103,6 +109,7 @@ describe(\"#groups.update\", () => {\n       expect(res.status).toEqual(200);\n       expect(body.data.name).toBe(group.name);\n     });\n+\n     it(\"fails with validation error when name already taken\", async () => {\n       await buildGroup({\n         teamId: user.teamId,\n@@ -275,6 +282,23 @@ describe(\"#groups.list\", () => {\n     expect(body.data.groups.length).toEqual(1);\n     expect(body.data.groups[0].id).toEqual(group.id);\n   });\n+\n+  it(\"should allow to find a group by its externalId\", async () => {\n+    const user = await buildUser();\n+    const group = await buildGroup({ teamId: user.teamId, externalId: \"123\" });\n+    await buildGroup({ teamId: user.teamId });\n+\n+    const res = await server.post(\"/api/groups.list\", {\n+      body: {\n+        externalId: \"123\",\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.groups.length).toEqual(1);\n+    expect(body.data.groups[0].id).toEqual(group.id);\n+  });\n });\n \n describe(\"#groups.info\", () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8119",
    "pr_id": 8119,
    "issue_id": 7387,
    "repo": "outline/outline",
    "problem_statement": "Allow updating a user's email from member management\nThis would need to send an email to the new address, which when clicked would perform the email change, rather than immediately modifying the database.\r\n\r\ntowards https://github.com/outline/outline/issues/6159\r\n            ",
    "issue_word_count": 33,
    "test_files_count": 3,
    "non_test_files_count": 16,
    "pr_changed_files": [
      "app/components/ConfirmationDialog.tsx",
      "app/components/UserDialogs.tsx",
      "app/menus/UserMenu.tsx",
      "app/scenes/Settings/Notifications.tsx",
      "app/scenes/Settings/Profile.tsx",
      "server/commands/userProvisioner.test.ts",
      "server/commands/userProvisioner.ts",
      "server/emails/templates/ConfirmUpdateEmail.tsx",
      "server/errors.ts",
      "server/models/Team.ts",
      "server/models/User.ts",
      "server/routes/api/teams/teams.ts",
      "server/routes/api/users/__snapshots__/users.test.ts.snap",
      "server/routes/api/users/schema.ts",
      "server/routes/api/users/users.test.ts",
      "server/routes/api/users/users.ts",
      "server/utils/jwt.ts",
      "shared/i18n/locales/en_US/translation.json",
      "shared/utils/routeHelpers.ts"
    ],
    "pr_changed_test_files": [
      "server/commands/userProvisioner.test.ts",
      "server/routes/api/users/__snapshots__/users.test.ts.snap",
      "server/routes/api/users/users.test.ts"
    ],
    "base_commit": "742c138b3df70bd2be7a4093dd44ba7c0c774ea0",
    "head_commit": "b381f9b4ff8ea420b4790e4fed4eabb9b8be56e9",
    "repo_url": "https://github.com/outline/outline/pull/8119",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8119",
    "dockerfile": "",
    "pr_merged_at": "2024-12-25T10:58:26.000Z",
    "patch": "diff --git a/app/components/ConfirmationDialog.tsx b/app/components/ConfirmationDialog.tsx\nindex 299ebd396403..7475dfbf584f 100644\n--- a/app/components/ConfirmationDialog.tsx\n+++ b/app/components/ConfirmationDialog.tsx\n@@ -8,8 +8,8 @@ import Text from \"~/components/Text\";\n import useStores from \"~/hooks/useStores\";\n \n type Props = {\n-  /** Callback when the dialog is submitted */\n-  onSubmit: () => Promise<void> | void;\n+  /** Callback when the dialog is submitted. Return false to prevent closing. */\n+  onSubmit: () => Promise<void | boolean> | void;\n   /** Text to display on the submit button */\n   submitText?: string;\n   /** Text to display while the form is saving */\n@@ -38,7 +38,10 @@ const ConfirmationDialog: React.FC<Props> = ({\n       ev.preventDefault();\n       setIsSaving(true);\n       try {\n-        await onSubmit();\n+        const res = await onSubmit();\n+        if (res === false) {\n+          return;\n+        }\n         dialogs.closeAllModals();\n       } catch (err) {\n         toast.error(err.message);\n\ndiff --git a/app/components/UserDialogs.tsx b/app/components/UserDialogs.tsx\nindex 74aac725ebb7..cbf60285838c 100644\n--- a/app/components/UserDialogs.tsx\n+++ b/app/components/UserDialogs.tsx\n@@ -1,10 +1,14 @@\n import * as React from \"react\";\n-import { useTranslation } from \"react-i18next\";\n+import { Trans, useTranslation } from \"react-i18next\";\n+import { toast } from \"sonner\";\n import { UserRole } from \"@shared/types\";\n import User from \"~/models/User\";\n import ConfirmationDialog from \"~/components/ConfirmationDialog\";\n import Input from \"~/components/Input\";\n+import useCurrentUser from \"~/hooks/useCurrentUser\";\n import useStores from \"~/hooks/useStores\";\n+import { client } from \"~/utils/ApiClient\";\n+import Text from \"./Text\";\n \n type Props = {\n   user: User;\n@@ -85,7 +89,11 @@ export function UserSuspendDialog({ user, onSubmit }: Props) {\n   };\n \n   return (\n-    <ConfirmationDialog onSubmit={handleSubmit} savingText={`${t(\"Saving\")}…`}>\n+    <ConfirmationDialog\n+      onSubmit={handleSubmit}\n+      savingText={`${t(\"Saving\")}…`}\n+      danger\n+    >\n       {t(\n         \"Are you sure you want to suspend {{ userName }}? Suspended users will be prevented from logging in.\",\n         {\n@@ -123,6 +131,68 @@ export function UserChangeNameDialog({ user, onSubmit }: Props) {\n         onChange={handleChange}\n         error={!name ? t(\"Name can't be empty\") : undefined}\n         value={name}\n+        autoSelect\n+        required\n+        flex\n+      />\n+    </ConfirmationDialog>\n+  );\n+}\n+\n+export function UserChangeEmailDialog({ user, onSubmit }: Props) {\n+  const { t } = useTranslation();\n+  const actor = useCurrentUser();\n+  const [email, setEmail] = React.useState<string>(user.email);\n+  const [error, setError] = React.useState<string | undefined>();\n+\n+  const handleSubmit = async () => {\n+    try {\n+      await client.post(`/users.updateEmail`, { id: user.id, email });\n+      onSubmit();\n+      toast.info(\n+        actor.id === user.id\n+          ? t(\"Check your email to verify the new address.\")\n+          : t(\"The email will be changed once verified.\")\n+      );\n+      return true;\n+    } catch (err) {\n+      setError(err.message);\n+      return false;\n+    }\n+  };\n+\n+  const handleChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n+    setEmail(ev.target.value);\n+  };\n+\n+  return (\n+    <ConfirmationDialog\n+      onSubmit={handleSubmit}\n+      submitText={t(\"Save\")}\n+      savingText={`${t(\"Saving\")}…`}\n+      disabled={!email || email === user.email}\n+    >\n+      <Text as=\"p\">\n+        {actor.id === user.id ? (\n+          <Trans>\n+            You will receive an email to verify your new address. It must be\n+            unique in the workspace.\n+          </Trans>\n+        ) : (\n+          <Trans>\n+            A confirmation email will be sent to the new address before it is\n+            changed.\n+          </Trans>\n+        )}\n+      </Text>\n+      <Input\n+        type=\"email\"\n+        name=\"email\"\n+        label={t(\"New email\")}\n+        onChange={handleChange}\n+        error={!email ? t(\"Email can't be empty\") : error}\n+        value={email}\n+        autoSelect\n         required\n         flex\n       />\n\ndiff --git a/app/menus/UserMenu.tsx b/app/menus/UserMenu.tsx\nindex 8a1026c24e0a..5cc58638dad6 100644\n--- a/app/menus/UserMenu.tsx\n+++ b/app/menus/UserMenu.tsx\n@@ -11,6 +11,7 @@ import Template from \"~/components/ContextMenu/Template\";\n import {\n   UserSuspendDialog,\n   UserChangeNameDialog,\n+  UserChangeEmailDialog,\n } from \"~/components/UserDialogs\";\n import { actionToMenuItem } from \"~/actions\";\n import {\n@@ -49,6 +50,22 @@ function UserMenu({ user }: Props) {\n     [dialogs, t, user]\n   );\n \n+  const handleChangeEmail = React.useCallback(\n+    (ev: React.SyntheticEvent) => {\n+      ev.preventDefault();\n+      dialogs.openModal({\n+        title: t(\"Change email\"),\n+        content: (\n+          <UserChangeEmailDialog\n+            user={user}\n+            onSubmit={dialogs.closeAllModals}\n+          />\n+        ),\n+      });\n+    },\n+    [dialogs, t, user]\n+  );\n+\n   const handleSuspend = React.useCallback(\n     (ev: React.SyntheticEvent) => {\n       ev.preventDefault();\n@@ -117,7 +134,13 @@ function UserMenu({ user }: Props) {\n               type: \"button\",\n               title: `${t(\"Change name\")}…`,\n               onClick: handleChangeName,\n-              visible: can.update && user.role !== \"admin\",\n+              visible: can.update,\n+            },\n+            {\n+              type: \"button\",\n+              title: `${t(\"Change email\")}…`,\n+              onClick: handleChangeEmail,\n+              visible: can.update,\n             },\n             {\n               type: \"button\",\n@@ -144,6 +167,7 @@ function UserMenu({ user }: Props) {\n             {\n               type: \"button\",\n               title: `${t(\"Suspend user\")}…`,\n+              dangerous: true,\n               onClick: handleSuspend,\n               visible: !user.isInvited && !user.isSuspended,\n             },\n\ndiff --git a/app/scenes/Settings/Notifications.tsx b/app/scenes/Settings/Notifications.tsx\nindex 162b09d82566..479c6564eb9b 100644\n--- a/app/scenes/Settings/Notifications.tsx\n+++ b/app/scenes/Settings/Notifications.tsx\n@@ -19,19 +19,22 @@ import { toast } from \"sonner\";\n import { NotificationEventType } from \"@shared/types\";\n import Flex from \"~/components/Flex\";\n import Heading from \"~/components/Heading\";\n-import Input from \"~/components/Input\";\n import Notice from \"~/components/Notice\";\n import Scene from \"~/components/Scene\";\n import Switch from \"~/components/Switch\";\n import Text from \"~/components/Text\";\n import env from \"~/env\";\n+import useCurrentTeam from \"~/hooks/useCurrentTeam\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n+import usePolicy from \"~/hooks/usePolicy\";\n import isCloudHosted from \"~/utils/isCloudHosted\";\n import SettingRow from \"./components/SettingRow\";\n \n function Notifications() {\n   const user = useCurrentUser();\n+  const team = useCurrentTeam();\n   const { t } = useTranslation();\n+  const can = usePolicy(team.id);\n \n   const options = [\n     {\n@@ -161,17 +164,7 @@ function Notifications() {\n         <Trans>Manage when and where you receive email notifications.</Trans>\n       </Text>\n \n-      {env.EMAIL_ENABLED ? (\n-        <SettingRow\n-          label={t(\"Email address\")}\n-          name=\"email\"\n-          description={t(\n-            \"Your email address should be updated in your SSO provider.\"\n-          )}\n-        >\n-          <Input type=\"email\" value={user.email} readOnly />\n-        </SettingRow>\n-      ) : (\n+      {env.EMAIL_ENABLED && can.manage && (\n         <Notice>\n           <Trans>\n             The email integration is currently disabled. Please set the\n\ndiff --git a/app/scenes/Settings/Profile.tsx b/app/scenes/Settings/Profile.tsx\nindex 5c5f127b534e..cc04c58f091b 100644\n--- a/app/scenes/Settings/Profile.tsx\n+++ b/app/scenes/Settings/Profile.tsx\n@@ -8,14 +8,18 @@ import Heading from \"~/components/Heading\";\n import Input from \"~/components/Input\";\n import Scene from \"~/components/Scene\";\n import Text from \"~/components/Text\";\n+import { UserChangeEmailDialog } from \"~/components/UserDialogs\";\n+import env from \"~/env\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n+import useStores from \"~/hooks/useStores\";\n import ImageInput from \"./components/ImageInput\";\n import SettingRow from \"./components/SettingRow\";\n \n const Profile = () => {\n   const user = useCurrentUser();\n+  const { dialogs } = useStores();\n   const form = React.useRef<HTMLFormElement>(null);\n-  const [name, setName] = React.useState<string>(user.name || \"\");\n+  const [name, setName] = React.useState<string>(user.name);\n   const { t } = useTranslation();\n \n   const handleSubmit = async (ev: React.SyntheticEvent) => {\n@@ -29,6 +33,15 @@ const Profile = () => {\n     }\n   };\n \n+  const handleChangeEmail = () => {\n+    dialogs.openModal({\n+      title: t(\"Change email\"),\n+      content: (\n+        <UserChangeEmailDialog user={user} onSubmit={dialogs.closeAllModals} />\n+      ),\n+    });\n+  };\n+\n   const handleNameChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n     setName(ev.target.value);\n   };\n@@ -81,6 +94,17 @@ const Profile = () => {\n           />\n         </SettingRow>\n \n+        {env.EMAIL_ENABLED && (\n+          <SettingRow label={t(\"Email address\")} name=\"email\">\n+            <Input\n+              type=\"email\"\n+              value={user.email}\n+              readOnly\n+              onClick={handleChangeEmail}\n+            />\n+          </SettingRow>\n+        )}\n+\n         <Button type=\"submit\" disabled={isSaving || !isValid}>\n           {isSaving ? `${t(\"Saving\")}…` : t(\"Save\")}\n         </Button>\n\ndiff --git a/server/commands/userProvisioner.ts b/server/commands/userProvisioner.ts\nindex 905bddbef0d3..f6221358a7f1 100644\n--- a/server/commands/userProvisioner.ts\n+++ b/server/commands/userProvisioner.ts\n@@ -1,6 +1,5 @@\n import { InferCreationAttributes } from \"sequelize\";\n import { UserRole } from \"@shared/types\";\n-import { parseEmail } from \"@shared/utils/email\";\n import InviteAcceptedEmail from \"@server/emails/templates/InviteAcceptedEmail\";\n import {\n   DomainNotAllowedError,\n@@ -227,8 +226,7 @@ export default async function userProvisioner({\n \n     // If the team settings do not allow this domain,\n     // throw an error and fail user creation.\n-    const { domain } = parseEmail(email);\n-    if (team && !(await team.isDomainAllowed(domain))) {\n+    if (team && !(await team.isDomainAllowed(email))) {\n       throw DomainNotAllowedError();\n     }\n \n\ndiff --git a/server/emails/templates/ConfirmUpdateEmail.tsx b/server/emails/templates/ConfirmUpdateEmail.tsx\nnew file mode 100644\nindex 000000000000..05b903513b3a\n--- /dev/null\n+++ b/server/emails/templates/ConfirmUpdateEmail.tsx\n@@ -0,0 +1,73 @@\n+import * as React from \"react\";\n+import env from \"@server/env\";\n+import BaseEmail, { EmailMessageCategory, EmailProps } from \"./BaseEmail\";\n+import Body from \"./components/Body\";\n+import Button from \"./components/Button\";\n+import EmailTemplate from \"./components/EmailLayout\";\n+import EmptySpace from \"./components/EmptySpace\";\n+import Footer from \"./components/Footer\";\n+import Header from \"./components/Header\";\n+import Heading from \"./components/Heading\";\n+\n+type Props = EmailProps & {\n+  code: string;\n+  previous: string | null;\n+  teamUrl: string;\n+};\n+\n+/**\n+ * Email sent to a user when they request to change their email.\n+ */\n+export default class ConfirmUpdateEmail extends BaseEmail<Props> {\n+  protected get category() {\n+    return EmailMessageCategory.Authentication;\n+  }\n+\n+  protected subject() {\n+    return `Your email update request`;\n+  }\n+\n+  protected preview() {\n+    return `Here’s your email change confirmation.`;\n+  }\n+\n+  protected renderAsText({ teamUrl, code, previous, to }: Props): string {\n+    return `\n+You requested to update your ${env.APP_NAME} account email. Please\n+follow the link below to confirm the change ${\n+      previous ? `from ${previous} ` : \"\"\n+    }to ${to}.\n+\n+  ${this.updateLink(teamUrl, code)}\n+  `;\n+  }\n+\n+  protected render({ teamUrl, code, previous, to }: Props) {\n+    return (\n+      <EmailTemplate previewText={this.preview()}>\n+        <Header />\n+\n+        <Body>\n+          <Heading>Your email update request</Heading>\n+          <p>\n+            You requested to update your {env.APP_NAME} account email. Please\n+            click below to confirm the change{\" \"}\n+            {previous ? `from ${previous} ` : \"\"}to <strong>{to}</strong>.\n+          </p>\n+          <EmptySpace height={5} />\n+          <p>\n+            <Button href={this.updateLink(teamUrl, code)}>\n+              Confirm Change\n+            </Button>\n+          </p>\n+        </Body>\n+\n+        <Footer />\n+      </EmailTemplate>\n+    );\n+  }\n+\n+  private updateLink(teamUrl: string, code: string): string {\n+    return `${teamUrl}/api/users.updateEmail?code=${code}`;\n+  }\n+}\n\ndiff --git a/server/errors.ts b/server/errors.ts\nindex f962251a19b2..9c00faf40548 100644\n--- a/server/errors.ts\n+++ b/server/errors.ts\n@@ -49,7 +49,7 @@ export function InviteRequiredError(\n }\n \n export function DomainNotAllowedError(\n-  message = \"The domain is not allowed for this team\"\n+  message = \"The domain is not allowed for this workspace\"\n ) {\n   return httpErrors(403, message, {\n     id: \"domain_not_allowed\",\n\ndiff --git a/server/models/Team.ts b/server/models/Team.ts\nindex a8c844a9a1ec..43e052f840cd 100644\n--- a/server/models/Team.ts\n+++ b/server/models/Team.ts\n@@ -27,9 +27,11 @@ import {\n   BeforeCreate,\n   IsNumeric,\n } from \"sequelize-typescript\";\n+import { isEmail } from \"validator\";\n import { TeamPreferenceDefaults } from \"@shared/constants\";\n import { TeamPreference, TeamPreferences, UserRole } from \"@shared/types\";\n import { getBaseDomain, RESERVED_SUBDOMAINS } from \"@shared/utils/domains\";\n+import { parseEmail } from \"@shared/utils/email\";\n import env from \"@server/env\";\n import { ValidationError } from \"@server/errors\";\n import DeleteAttachmentTask from \"@server/queues/tasks/DeleteAttachmentTask\";\n@@ -293,15 +295,21 @@ class Team extends ParanoidModel<\n    * Find whether the passed domain can be used to sign-in to this team. Note\n    * that this method always returns true if no domain restrictions are set.\n    *\n-   * @param domain The domain to check\n+   * @param domainOrEmail The domain or email to check\n    * @returns True if the domain is allowed to sign-in to this team\n    */\n   public isDomainAllowed = async function (\n     this: Team,\n-    domain: string\n+    domainOrEmail: string\n   ): Promise<boolean> {\n     const allowedDomains = (await this.$get(\"allowedDomains\")) || [];\n \n+    let domain = domainOrEmail;\n+    if (isEmail(domainOrEmail)) {\n+      const parsed = parseEmail(domainOrEmail);\n+      domain = parsed.domain;\n+    }\n+\n     return (\n       allowedDomains.length === 0 ||\n       allowedDomains.map((d: TeamDomain) => d.name).includes(domain)\n\ndiff --git a/server/models/User.ts b/server/models/User.ts\nindex e73dbe88700f..4d89133c7006 100644\n--- a/server/models/User.ts\n+++ b/server/models/User.ts\n@@ -48,6 +48,7 @@ import { stringToColor } from \"@shared/utils/color\";\n import { locales } from \"@shared/utils/date\";\n import env from \"@server/env\";\n import DeleteAttachmentTask from \"@server/queues/tasks/DeleteAttachmentTask\";\n+import { APIContext } from \"@server/types\";\n import parseAttachmentIds from \"@server/utils/parseAttachmentIds\";\n import { ValidationError } from \"../errors\";\n import Attachment from \"./Attachment\";\n@@ -581,6 +582,24 @@ class User extends ParanoidModel<\n       this.jwtSecret\n     );\n \n+  /**\n+   * Returns a temporary token that can be used to update the users\n+   * email address.\n+   *\n+   * @param email The new email address\n+   * @returns The token\n+   */\n+  getEmailUpdateToken = (email: string) =>\n+    JWT.sign(\n+      {\n+        id: this.id,\n+        createdAt: new Date().toISOString(),\n+        email,\n+        type: \"email-update\",\n+      },\n+      this.jwtSecret\n+    );\n+\n   /**\n    * Returns a list of teams that have a user matching this user's email.\n    *\n@@ -705,6 +724,16 @@ class User extends ParanoidModel<\n     }\n   };\n \n+  static findByEmail = async function (ctx: APIContext, email: string) {\n+    return this.findOne({\n+      where: {\n+        teamId: ctx.context.auth.user.teamId,\n+        email: email.trim().toLowerCase(),\n+      },\n+      ...ctx.context,\n+    });\n+  };\n+\n   static getCounts = async function (teamId: string) {\n     const countSql = `\n       SELECT\n\ndiff --git a/server/routes/api/teams/teams.ts b/server/routes/api/teams/teams.ts\nindex 74672af00021..563c3d053f45 100644\n--- a/server/routes/api/teams/teams.ts\n+++ b/server/routes/api/teams/teams.ts\n@@ -68,16 +68,18 @@ router.post(\n   rateLimiter(RateLimiterStrategy.FivePerHour),\n   auth(),\n   async (ctx: APIContext) => {\n+    if (!emailEnabled) {\n+      throw ValidationError(\"Email support is not setup for this instance\");\n+    }\n+\n     const { user } = ctx.state.auth;\n     const { team } = user;\n     authorize(user, \"delete\", team);\n \n-    if (emailEnabled) {\n-      await new ConfirmTeamDeleteEmail({\n-        to: user.email,\n-        deleteConfirmationCode: team.getDeleteConfirmationCode(user),\n-      }).schedule();\n-    }\n+    await new ConfirmTeamDeleteEmail({\n+      to: user.email,\n+      deleteConfirmationCode: team.getDeleteConfirmationCode(user),\n+    }).schedule();\n \n     ctx.body = {\n       success: true,\n\ndiff --git a/server/routes/api/users/schema.ts b/server/routes/api/users/schema.ts\nindex 84c9df75520b..75b7234581c6 100644\n--- a/server/routes/api/users/schema.ts\n+++ b/server/routes/api/users/schema.ts\n@@ -99,6 +99,26 @@ export const UsersDeleteSchema = BaseSchema.extend({\n \n export type UsersDeleteSchemaReq = z.infer<typeof UsersDeleteSchema>;\n \n+export const UsersUpdateEmailSchema = BaseSchema.extend({\n+  body: z.object({\n+    id: z.string().uuid().optional(),\n+    email: z.string().email(),\n+  }),\n+});\n+\n+export type UsersUpdateEmailReq = z.infer<typeof UsersUpdateEmailSchema>;\n+\n+export const UsersUpdateEmailConfirmSchema = BaseSchema.extend({\n+  query: z.object({\n+    code: z.string(),\n+    follow: z.string().default(\"\"),\n+  }),\n+});\n+\n+export type UsersUpdateEmailConfirmReq = z.infer<\n+  typeof UsersUpdateEmailConfirmSchema\n+>;\n+\n export const UsersInfoSchema = BaseSchema.extend({\n   body: z.object({\n     id: z.string().uuid().optional(),\n\ndiff --git a/server/routes/api/users/users.ts b/server/routes/api/users/users.ts\nindex d1d93897493f..bc34f3b0272a 100644\n--- a/server/routes/api/users/users.ts\n+++ b/server/routes/api/users/users.ts\n@@ -2,11 +2,13 @@ import Router from \"koa-router\";\n import { Op, Sequelize, WhereOptions } from \"sequelize\";\n import { UserPreference, UserRole } from \"@shared/types\";\n import { UserRoleHelper } from \"@shared/utils/UserRoleHelper\";\n+import { settingsPath } from \"@shared/utils/routeHelpers\";\n import { UserValidation } from \"@shared/validations\";\n import userDestroyer from \"@server/commands/userDestroyer\";\n import userInviter from \"@server/commands/userInviter\";\n import userSuspender from \"@server/commands/userSuspender\";\n import userUnsuspender from \"@server/commands/userUnsuspender\";\n+import ConfirmUpdateEmail from \"@server/emails/templates/ConfirmUpdateEmail\";\n import ConfirmUserDeleteEmail from \"@server/emails/templates/ConfirmUserDeleteEmail\";\n import InviteEmail from \"@server/emails/templates/InviteEmail\";\n import env from \"@server/env\";\n@@ -23,6 +25,7 @@ import { presentUser, presentPolicies } from \"@server/presenters\";\n import { APIContext } from \"@server/types\";\n import { RateLimiterStrategy } from \"@server/utils/RateLimiter\";\n import { safeEqual } from \"@server/utils/crypto\";\n+import { getDetailsForEmailUpdateToken } from \"@server/utils/jwt\";\n import pagination from \"../middlewares/pagination\";\n import * as T from \"./schema\";\n \n@@ -201,6 +204,108 @@ router.post(\n   }\n );\n \n+router.post(\n+  \"users.updateEmail\",\n+  rateLimiter(RateLimiterStrategy.TenPerHour),\n+  auth(),\n+  validate(T.UsersUpdateEmailSchema),\n+  async (ctx: APIContext<T.UsersUpdateEmailReq>) => {\n+    if (!emailEnabled) {\n+      throw ValidationError(\"Email support is not setup for this instance\");\n+    }\n+\n+    const { user: actor } = ctx.state.auth;\n+    const { id } = ctx.input.body;\n+    const { team } = actor;\n+    const user = id ? await User.findByPk(id) : actor;\n+    const email = ctx.input.body.email.trim().toLowerCase();\n+\n+    authorize(actor, \"update\", user);\n+\n+    // Check if email domain is allowed\n+    if (!(await team.isDomainAllowed(email))) {\n+      throw ValidationError(\"The domain is not allowed for this workspace\");\n+    }\n+\n+    // Check if email already exists in workspace\n+    if (await User.findByEmail(ctx, email)) {\n+      throw ValidationError(\"User with email already exists\");\n+    }\n+\n+    await new ConfirmUpdateEmail({\n+      to: email,\n+      previous: user.email,\n+      code: user.getEmailUpdateToken(email),\n+      teamUrl: team.url,\n+    }).schedule();\n+\n+    ctx.body = {\n+      success: true,\n+    };\n+  }\n+);\n+\n+router.get(\n+  \"users.updateEmail\",\n+  rateLimiter(RateLimiterStrategy.TenPerHour),\n+  auth(),\n+  transaction(),\n+  validate(T.UsersUpdateEmailConfirmSchema),\n+  async (ctx: APIContext<T.UsersUpdateEmailConfirmReq>) => {\n+    if (!emailEnabled) {\n+      throw ValidationError(\"Email support is not setup for this instance\");\n+    }\n+\n+    const { transaction } = ctx.state;\n+    const { code, follow } = ctx.input.query;\n+\n+    // The link in the email does not include the follow query param, this\n+    // is to help prevent anti-virus, and email clients from pre-fetching the link\n+    // and spending the token before the user clicks on it. Instead we redirect\n+    // to the same URL with the follow query param added from the client side.\n+    if (!follow) {\n+      return ctx.redirectOnClient(ctx.request.href + \"&follow=true\");\n+    }\n+    let user: User;\n+    let email: string;\n+\n+    try {\n+      const res = await getDetailsForEmailUpdateToken(code as string, {\n+        transaction,\n+        lock: transaction.LOCK.UPDATE,\n+      });\n+      user = res.user;\n+      email = res.email;\n+    } catch (err) {\n+      ctx.redirect(`/?notice=expired-token`);\n+      return;\n+    }\n+\n+    const { user: actor } = ctx.state.auth;\n+    authorize(actor, \"update\", user);\n+\n+    // Check if email domain is allowed\n+    if (!(await actor.team.isDomainAllowed(email))) {\n+      throw ValidationError(\"The domain is not allowed for this workspace\");\n+    }\n+\n+    // Check if email already exists in workspace\n+    if (await User.findByEmail(ctx, email)) {\n+      throw ValidationError(\"User with email already exists\");\n+    }\n+\n+    user.email = email;\n+    await Event.createFromContext(ctx, {\n+      name: \"users.update\",\n+      userId: user.id,\n+      changes: user.changeset,\n+    });\n+    await user.save({ transaction });\n+\n+    ctx.redirect(settingsPath());\n+  }\n+);\n+\n router.post(\n   \"users.update\",\n   auth(),\n@@ -518,15 +623,17 @@ router.post(\n   rateLimiter(RateLimiterStrategy.FivePerHour),\n   auth(),\n   async (ctx: APIContext) => {\n+    if (!emailEnabled) {\n+      throw ValidationError(\"Email support is not setup for this instance\");\n+    }\n+\n     const { user } = ctx.state.auth;\n     authorize(user, \"delete\", user);\n \n-    if (emailEnabled) {\n-      await new ConfirmUserDeleteEmail({\n-        to: user.email,\n-        deleteConfirmationCode: user.deleteConfirmationCode,\n-      }).schedule();\n-    }\n+    await new ConfirmUserDeleteEmail({\n+      to: user.email,\n+      deleteConfirmationCode: user.deleteConfirmationCode,\n+    }).schedule();\n \n     ctx.body = {\n       success: true,\n\ndiff --git a/server/utils/jwt.ts b/server/utils/jwt.ts\nindex a24b1223b1f1..0e214a5d7645 100644\n--- a/server/utils/jwt.ts\n+++ b/server/utils/jwt.ts\n@@ -1,5 +1,6 @@\n import { subMinutes } from \"date-fns\";\n import JWT from \"jsonwebtoken\";\n+import { FindOptions } from \"sequelize\";\n import { Team, User } from \"@server/models\";\n import { AuthenticationError } from \"../errors\";\n \n@@ -105,3 +106,35 @@ export async function getUserForEmailSigninToken(token: string): Promise<User> {\n \n   return user;\n }\n+\n+export async function getDetailsForEmailUpdateToken(\n+  token: string,\n+  options: FindOptions<User> = {}\n+): Promise<{ user: User; email: string }> {\n+  const payload = getJWTPayload(token);\n+\n+  if (payload.type !== \"email-update\") {\n+    throw AuthenticationError(\"Invalid token\");\n+  }\n+\n+  // check the token is within it's expiration time\n+  if (payload.createdAt) {\n+    if (new Date(payload.createdAt) < subMinutes(new Date(), 10)) {\n+      throw AuthenticationError(\"Expired token\");\n+    }\n+  }\n+\n+  const email = payload.email;\n+  const user = await User.findByPk(payload.id, {\n+    rejectOnEmpty: true,\n+    ...options,\n+  });\n+\n+  try {\n+    JWT.verify(token, user.jwtSecret);\n+  } catch (err) {\n+    throw AuthenticationError(\"Invalid token\");\n+  }\n+\n+  return { user, email };\n+}\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 6f416145ba2f..cde3ab797b76 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -402,6 +402,12 @@\n   \"Are you sure you want to suspend {{ userName }}? Suspended users will be prevented from logging in.\": \"Are you sure you want to suspend {{ userName }}? Suspended users will be prevented from logging in.\",\n   \"New name\": \"New name\",\n   \"Name can't be empty\": \"Name can't be empty\",\n+  \"Check your email to verify the new address.\": \"Check your email to verify the new address.\",\n+  \"The email will be changed once verified.\": \"The email will be changed once verified.\",\n+  \"You will receive an email to verify your new address. It must be unique in the workspace.\": \"You will receive an email to verify your new address. It must be unique in the workspace.\",\n+  \"A confirmation email will be sent to the new address before it is changed.\": \"A confirmation email will be sent to the new address before it is changed.\",\n+  \"New email\": \"New email\",\n+  \"Email can't be empty\": \"Email can't be empty\",\n   \"Your import completed\": \"Your import completed\",\n   \"Previous match\": \"Previous match\",\n   \"Next match\": \"Next match\",\n@@ -543,6 +549,7 @@\n   \"Headings you add to the document will appear here\": \"Headings you add to the document will appear here\",\n   \"Table of contents\": \"Table of contents\",\n   \"Change name\": \"Change name\",\n+  \"Change email\": \"Change email\",\n   \"Suspend user\": \"Suspend user\",\n   \"An error occurred while sending the invite\": \"An error occurred while sending the invite\",\n   \"User options\": \"User options\",\n@@ -958,8 +965,6 @@\n   \"Notifications saved\": \"Notifications saved\",\n   \"Unsubscription successful. Your notification settings were updated\": \"Unsubscription successful. Your notification settings were updated\",\n   \"Manage when and where you receive email notifications.\": \"Manage when and where you receive email notifications.\",\n-  \"Email address\": \"Email address\",\n-  \"Your email address should be updated in your SSO provider.\": \"Your email address should be updated in your SSO provider.\",\n   \"The email integration is currently disabled. Please set the associated environment variables and restart the server to enable notifications.\": \"The email integration is currently disabled. Please set the associated environment variables and restart the server to enable notifications.\",\n   \"Create personal API keys to authenticate with the API and programatically control\\n          your workspace's data. API keys have the same permissions as your user account.\\n          For more details see the <em>developer documentation</em>.\": \"Create personal API keys to authenticate with the API and programatically control\\n          your workspace's data. API keys have the same permissions as your user account.\\n          For more details see the <em>developer documentation</em>.\",\n   \"Personal keys\": \"Personal keys\",\n@@ -986,6 +991,7 @@\n   \"Photo\": \"Photo\",\n   \"Choose a photo or image to represent yourself.\": \"Choose a photo or image to represent yourself.\",\n   \"This could be your real name, or a nickname — however you’d like people to refer to you.\": \"This could be your real name, or a nickname — however you’d like people to refer to you.\",\n+  \"Email address\": \"Email address\",\n   \"Are you sure you want to require invites?\": \"Are you sure you want to require invites?\",\n   \"New users will first need to be invited to create an account. <em>Default role</em> and <em>Allowed domains</em> will no longer apply.\": \"New users will first need to be invited to create an account. <em>Default role</em> and <em>Allowed domains</em> will no longer apply.\",\n   \"Settings that impact the access, security, and content of your workspace.\": \"Settings that impact the access, security, and content of your workspace.\",\n\ndiff --git a/shared/utils/routeHelpers.ts b/shared/utils/routeHelpers.ts\nindex e8d19aac83c7..090e3e909a74 100644\n--- a/shared/utils/routeHelpers.ts\n+++ b/shared/utils/routeHelpers.ts\n@@ -2,6 +2,10 @@ export function signin(service = \"slack\"): string {\n   return `/auth/${service}`;\n }\n \n+export function settingsPath(section?: string): string {\n+  return \"/settings\" + (section ? `/${section}` : \"\");\n+}\n+\n export function integrationSettingsPath(id: string): string {\n   return `/settings/integrations/${id}`;\n }\n",
    "test_patch": "diff --git a/server/commands/userProvisioner.test.ts b/server/commands/userProvisioner.test.ts\nindex f4ac0920be49..88bc6259f8ae 100644\n--- a/server/commands/userProvisioner.test.ts\n+++ b/server/commands/userProvisioner.test.ts\n@@ -437,7 +437,7 @@ describe(\"userProvisioner\", () => {\n     }\n \n     expect(error && error.toString()).toContain(\n-      \"The domain is not allowed for this team\"\n+      \"The domain is not allowed for this workspace\"\n     );\n   });\n });\n\ndiff --git a/server/routes/api/users/__snapshots__/users.test.ts.snap b/server/routes/api/users/__snapshots__/users.test.ts.snap\nindex 3ab141b7025a..2e7f70c5f0c5 100644\n--- a/server/routes/api/users/__snapshots__/users.test.ts.snap\n+++ b/server/routes/api/users/__snapshots__/users.test.ts.snap\n@@ -71,3 +71,30 @@ exports[`#users.update should require authentication 1`] = `\n   \"status\": 401,\n }\n `;\n+\n+exports[`#users.updateEmail post should fail if email not in allowed domains 1`] = `\n+{\n+  \"error\": \"validation_error\",\n+  \"message\": \"The domain is not allowed for this workspace\",\n+  \"ok\": false,\n+  \"status\": 400,\n+}\n+`;\n+\n+exports[`#users.updateEmail post should fail if email not unique in workspace 1`] = `\n+{\n+  \"error\": \"validation_error\",\n+  \"message\": \"User with email already exists\",\n+  \"ok\": false,\n+  \"status\": 400,\n+}\n+`;\n+\n+exports[`#users.updateEmail post should require authentication 1`] = `\n+{\n+  \"error\": \"authentication_required\",\n+  \"message\": \"Authentication required\",\n+  \"ok\": false,\n+  \"status\": 401,\n+}\n+`;\n\ndiff --git a/server/routes/api/users/users.test.ts b/server/routes/api/users/users.test.ts\nindex c39e83acb745..8387429619d6 100644\n--- a/server/routes/api/users/users.test.ts\n+++ b/server/routes/api/users/users.test.ts\n@@ -1,4 +1,7 @@\n+import { faker } from \"@faker-js/faker\";\n import { TeamPreference, UserRole } from \"@shared/types\";\n+import ConfirmUpdateEmail from \"@server/emails/templates/ConfirmUpdateEmail\";\n+import { TeamDomain } from \"@server/models\";\n import {\n   buildTeam,\n   buildAdmin,\n@@ -723,6 +726,85 @@ describe(\"#users.update\", () => {\n   });\n });\n \n+describe(\"#users.updateEmail\", () => {\n+  describe(\"post\", () => {\n+    it(\"should trigger verification email\", async () => {\n+      const spy = jest.spyOn(ConfirmUpdateEmail.prototype, \"schedule\");\n+      const user = await buildUser();\n+      const res = await server.post(\"/api/users.updateEmail\", {\n+        body: {\n+          token: user.getJwtToken(),\n+          email: faker.internet.email(),\n+        },\n+      });\n+      const body = await res.json();\n+\n+      expect(res.status).toEqual(200);\n+      expect(body.success).toEqual(true);\n+      expect(spy).toHaveBeenCalled();\n+      spy.mockRestore();\n+    });\n+\n+    it(\"should fail if email not in allowed domains\", async () => {\n+      const user = await buildUser();\n+\n+      await TeamDomain.create({\n+        teamId: user.teamId,\n+        name: \"example.com\",\n+        createdById: user.id,\n+      });\n+\n+      const res = await server.post(\"/api/users.updateEmail\", {\n+        body: {\n+          token: user.getJwtToken(),\n+          email: faker.internet.email(),\n+        },\n+      });\n+      const body = await res.json();\n+      expect(res.status).toEqual(400);\n+      expect(body).toMatchSnapshot();\n+    });\n+\n+    it(\"should fail if email not unique in workspace\", async () => {\n+      const user = await buildUser();\n+      const email = faker.internet.email().toLowerCase();\n+      await buildUser({ teamId: user.teamId, email });\n+\n+      const res = await server.post(\"/api/users.updateEmail\", {\n+        body: {\n+          token: user.getJwtToken(),\n+          email,\n+        },\n+      });\n+      const body = await res.json();\n+      expect(res.status).toEqual(400);\n+      expect(body).toMatchSnapshot();\n+    });\n+\n+    it(\"should require authentication\", async () => {\n+      const res = await server.post(\"/api/users.updateEmail\");\n+      const body = await res.json();\n+      expect(res.status).toEqual(401);\n+      expect(body).toMatchSnapshot();\n+    });\n+  });\n+\n+  describe(\"get\", () => {\n+    it(\"should update email\", async () => {\n+      const user = await buildUser();\n+      const email = faker.internet.email();\n+      await server.get(\n+        `/api/users.updateEmail?token=${user.getJwtToken()}&code=${user.getEmailUpdateToken(\n+          email\n+        )}&follow=true`\n+      );\n+\n+      await user.reload();\n+      expect(user.email).toEqual(email);\n+    });\n+  });\n+});\n+\n describe(\"#users.update_role\", () => {\n   it(\"should promote\", async () => {\n     const team = await buildTeam();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-8102",
    "pr_id": 8102,
    "issue_id": 8090,
    "repo": "outline/outline",
    "problem_statement": "Document Title bug when bulk importing from .docx\n### Discussed in https://github.com/outline/outline/discussions/8089\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **adriansoewono** December  9, 2024</sup>\r\nHi, it seems to me the Document Title is buggy when I tried to bulk import from .docx files which has a dot character in the filename.\r\n\r\nso to reproduce:\r\n\r\n1. all my current document filename structure has a number+dot prefix (so I can set the document order easily).\r\nI have to use .docx files because I need to import images easily.\r\n![Screenshot 1](https://github.com/user-attachments/assets/b26f3304-6208-49da-8a6a-8843ddd881ac)\r\n\r\n2. I bulk import it using files drag and drop\r\n![Screenshot 2](https://github.com/user-attachments/assets/59ce8bbb-345c-4319-b16f-db26c04b29bc)\r\n\r\n3. then the document title in the Outline shows like this, there's a backslash character before the dot.\r\n![Screenshot 3](https://github.com/user-attachments/assets/85a87f53-f977-4c3d-b2ed-57d5b3c37fb2)\r\n\r\napparently this happens only in .docx import,\r\nI have tried to import .md files, the document title works without any backslash problem for the dot character.\r\n\r\nnow it seems like a simple bug,\r\nbut since all my documents are using number and dot prefix in the filename,\r\nthis problem makes me have to rename all my documents in the Outline after importing, which is really a tremendous task.\r\n\r\nit will be great if Outline can fix the backslash character bug.</div>",
    "issue_word_count": 235,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "server/commands/documentImporter.ts",
      "server/utils/turndown/index.ts",
      "shared/utils/markdown.ts",
      "shared/utils/parseTitle.test.ts",
      "shared/utils/parseTitle.ts"
    ],
    "pr_changed_test_files": [
      "shared/utils/parseTitle.test.ts"
    ],
    "base_commit": "6dfe7d707ae6cb48addd7227bc18bb4985511322",
    "head_commit": "1157597051cfbf8bff37affedea59a9fd1726af7",
    "repo_url": "https://github.com/outline/outline/pull/8102",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/8102",
    "dockerfile": "",
    "pr_merged_at": "2024-12-12T13:15:45.000Z",
    "patch": "diff --git a/server/commands/documentImporter.ts b/server/commands/documentImporter.ts\nindex 432d343968bb..d8d1d3138e08 100644\n--- a/server/commands/documentImporter.ts\n+++ b/server/commands/documentImporter.ts\n@@ -1,5 +1,4 @@\n import emojiRegex from \"emoji-regex\";\n-import escapeRegExp from \"lodash/escapeRegExp\";\n import truncate from \"lodash/truncate\";\n import parseTitle from \"@shared/utils/parseTitle\";\n import { DocumentValidation } from \"@shared/validations\";\n@@ -51,10 +50,7 @@ async function documentImporter({\n   if (text.trim().startsWith(\"# \")) {\n     const result = parseTitle(text);\n     title = result.title;\n-    text = text\n-      .trim()\n-      .replace(new RegExp(`#\\\\s+${escapeRegExp(title)}`), \"\")\n-      .trimStart();\n+    text = text.replace(/^.+(\\n|$)/, \"\");\n   }\n \n   // Replace any <br> generated by the turndown plugin with escaped newlines\n\ndiff --git a/server/utils/turndown/index.ts b/server/utils/turndown/index.ts\nindex a3ca5a86276c..87362b61301b 100644\n--- a/server/utils/turndown/index.ts\n+++ b/server/utils/turndown/index.ts\n@@ -1,5 +1,6 @@\n import { taskListItems, strikethrough } from \"@joplin/turndown-plugin-gfm\";\n import TurndownService from \"turndown\";\n+import { escape } from \"@shared/utils/markdown\";\n import breaks from \"./breaks\";\n import emptyLists from \"./emptyLists\";\n import emptyParagraph from \"./emptyParagraph\";\n@@ -41,36 +42,6 @@ const service = new TurndownService({\n   .use(breaks)\n   .use(emptyLists);\n \n-const escapes: [RegExp, string][] = [\n-  [/\\\\/g, \"\\\\\\\\\"],\n-  [/\\*/g, \"\\\\*\"],\n-  [/^-/g, \"\\\\-\"],\n-  [/^\\+ /g, \"\\\\+ \"],\n-  [/^(=+)/g, \"\\\\$1\"],\n-  [/^(#{1,6}) /g, \"\\\\$1 \"],\n-  [/`/g, \"\\\\`\"],\n-  [/^~~~/g, \"\\\\~~~\"],\n-  [/\\[/g, \"\\\\[\"],\n-  [/\\]/g, \"\\\\]\"],\n-  [/\\(/g, \"\\\\(\"], // OLN-91\n-  [/\\)/g, \"\\\\)\"], // OLN-91\n-  [/^>/g, \"\\\\>\"],\n-  [/_/g, \"\\\\_\"],\n-  [/^(\\d+)\\. /g, \"$1\\\\. \"],\n-  [/\\$/g, \"\\\\$\"],\n-];\n-\n-/**\n- * Overrides the Markdown escaping, as documented here:\n- * https://github.com/mixmark-io/turndown/blob/4499b5c313d30a3189a58fdd74fc4ed4b2428afd/README.md#overriding-turndownserviceprototypeescape\n- *\n- * @param text The string to escape\n- * @returns A string with Markdown syntax escaped\n- */\n-service.escape = function (text) {\n-  return escapes.reduce(function (accumulator, escape) {\n-    return accumulator.replace(escape[0], escape[1]);\n-  }, text);\n-};\n+service.escape = escape;\n \n export default service;\n\ndiff --git a/shared/utils/markdown.ts b/shared/utils/markdown.ts\nnew file mode 100644\nindex 000000000000..9565fdfaa052\n--- /dev/null\n+++ b/shared/utils/markdown.ts\n@@ -0,0 +1,40 @@\n+const escapes: [RegExp, string][] = [\n+  [/\\\\/g, \"\\\\\\\\\"],\n+  [/\\*/g, \"\\\\*\"],\n+  [/^-/g, \"\\\\-\"],\n+  [/^\\+ /g, \"\\\\+ \"],\n+  [/^(=+)/g, \"\\\\$1\"],\n+  [/^(#{1,6}) /g, \"\\\\$1 \"],\n+  [/`/g, \"\\\\`\"],\n+  [/^~~~/g, \"\\\\~~~\"],\n+  [/\\[/g, \"\\\\[\"],\n+  [/\\]/g, \"\\\\]\"],\n+  [/\\(/g, \"\\\\(\"], // OLN-91\n+  [/\\)/g, \"\\\\)\"], // OLN-91\n+  [/^>/g, \"\\\\>\"],\n+  [/_/g, \"\\\\_\"],\n+  [/^(\\d+)\\. /g, \"$1\\\\. \"],\n+  [/\\$/g, \"\\\\$\"],\n+];\n+\n+/**\n+ * Escape markdown characters in a string\n+ *\n+ * @param text - The text to escape\n+ * @returns The escaped text\n+ */\n+export const escape = function (text: string) {\n+  return escapes.reduce(function (accumulator, esc) {\n+    return accumulator.replace(esc[0], esc[1]);\n+  }, text);\n+};\n+\n+/**\n+ * Unescape markdown characters in a string\n+ *\n+ * @param text - The text to unescape\n+ * @returns The unescaped text\n+ */\n+export const unescape = function (text: string) {\n+  return text.replace(/\\\\([\\\\*+-\\d.])/g, \"$1\");\n+};\n\ndiff --git a/shared/utils/parseTitle.ts b/shared/utils/parseTitle.ts\nindex 23ecb556b663..759345bb13fa 100644\n--- a/shared/utils/parseTitle.ts\n+++ b/shared/utils/parseTitle.ts\n@@ -1,11 +1,12 @@\n import emojiRegex from \"emoji-regex\";\n+import { unescape } from \"./markdown\";\n \n export default function parseTitle(text = \"\") {\n   const regex = emojiRegex();\n \n   // find and extract title\n   const firstLine = text.trim().split(/\\r?\\n/)[0];\n-  const title = firstLine.replace(/^#/, \"\").trim();\n+  const title = unescape(firstLine.replace(/^#/, \"\").trim());\n \n   // find and extract first emoji\n   const matches = regex.exec(title);\n",
    "test_patch": "diff --git a/shared/utils/parseTitle.test.ts b/shared/utils/parseTitle.test.ts\nindex c0af2ba033de..77dbfb41fb8e 100644\n--- a/shared/utils/parseTitle.test.ts\n+++ b/shared/utils/parseTitle.test.ts\n@@ -3,14 +3,23 @@ import parseTitle from \"./parseTitle\";\n it(\"should trim the title\", () => {\n   expect(parseTitle(`#    Lots of space     `).title).toBe(\"Lots of space\");\n });\n+\n+it(\"should remove escaped characters\", () => {\n+  expect(parseTitle(`# 1\\\\. Title`).title).toBe(\"1. Title\");\n+  expect(parseTitle(`# 12\\\\. Title`).title).toBe(\"12. Title\");\n+  expect(parseTitle(`# 1\\\\.2 Title`).title).toBe(\"1.2 Title\");\n+});\n+\n it(\"should extract first title\", () => {\n   expect(parseTitle(`# Title one\\n# Title two`).title).toBe(\"Title one\");\n });\n+\n it(\"should parse emoji if first character\", () => {\n   const parsed = parseTitle(`# 😀 Title`);\n   expect(parsed.title).toBe(\"😀 Title\");\n   expect(parsed.emoji).toBe(\"😀\");\n });\n+\n it(\"should not parse emoji if not first character\", () => {\n   const parsed = parseTitle(`# Title 🌈`);\n   expect(parsed.title).toBe(\"Title 🌈\");\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7921",
    "pr_id": 7921,
    "issue_id": 7920,
    "repo": "outline/outline",
    "problem_statement": "Move event writing to model layer\n`events` should be written automatically based on mutations in the model layer. To achieve this the request context will be passed down to model mutations. Translation must happen on a model by model basis.\n\nCommands should be removed where they only exist to group a mutation and it's associated event write.\n\n### TODO\n- [x] ApiKey\n- [x] Attachment\n- [x] Comment\n- [x] FileOperation\n- [x] Group\n- [x] GroupMembership\n- [x] GroupUser\n- [x] Pin\n- [x] Reaction\n- [x] Share\n- [x] Star\n- [x] UserMembership\n- [x] Subscription\n- [x] WebhookSubscription\n- [x] Notification\n- [ ] Team\n- [ ] Revision\n- [ ] Document\n- [ ] Collection\n- [ ] TeamDomain\n- [ ] User",
    "issue_word_count": 89,
    "test_files_count": 4,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "server/commands/starCreator.test.ts",
      "server/commands/starCreator.ts",
      "server/commands/starDestroyer.test.ts",
      "server/commands/starDestroyer.ts",
      "server/commands/starUpdater.test.ts",
      "server/commands/starUpdater.ts",
      "server/models/Star.ts",
      "server/models/base/Model.ts",
      "server/routes/api/stars/stars.ts",
      "server/test/support.ts"
    ],
    "pr_changed_test_files": [
      "server/commands/starCreator.test.ts",
      "server/commands/starDestroyer.test.ts",
      "server/commands/starUpdater.test.ts",
      "server/test/support.ts"
    ],
    "base_commit": "633e547d3e6b91aa0a6f4136653181ef7a9652b6",
    "head_commit": "919b83fa2a4ca497299308f5cfaf22ae8b102f98",
    "repo_url": "https://github.com/outline/outline/pull/7921",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7921",
    "dockerfile": "",
    "pr_merged_at": "2024-11-11T03:26:27.000Z",
    "patch": "diff --git a/server/commands/starCreator.ts b/server/commands/starCreator.ts\nindex cdf960b614d2..e2bc7abd79da 100644\n--- a/server/commands/starCreator.ts\n+++ b/server/commands/starCreator.ts\n@@ -1,6 +1,7 @@\n import fractionalIndex from \"fractional-index\";\n-import { Sequelize, Transaction, WhereOptions } from \"sequelize\";\n-import { Star, User, Event } from \"@server/models\";\n+import { Sequelize, WhereOptions } from \"sequelize\";\n+import { Star, User } from \"@server/models\";\n+import { APIContext } from \"@server/types\";\n \n type Props = {\n   /** The user creating the star */\n@@ -11,9 +12,8 @@ type Props = {\n   collectionId?: string;\n   /** The sorted index for the star in the sidebar If no index is provided then it will be at the end */\n   index?: string;\n-  /** The IP address of the user creating the star */\n-  ip: string;\n-  transaction: Transaction;\n+  /** The request context */\n+  ctx: APIContext;\n };\n \n /**\n@@ -27,8 +27,7 @@ export default async function starCreator({\n   user,\n   documentId,\n   collectionId,\n-  ip,\n-  transaction,\n+  ctx,\n   ...rest\n }: Props): Promise<Star> {\n   let { index } = rest;\n@@ -47,14 +46,14 @@ export default async function starCreator({\n         Sequelize.literal('\"star\".\"index\" collate \"C\"'),\n         [\"updatedAt\", \"DESC\"],\n       ],\n-      transaction,\n+      transaction: ctx.state.transaction,\n     });\n \n     // create a star at the beginning of the list\n     index = fractionalIndex(null, stars.length ? stars[0].index : null);\n   }\n \n-  const [star, isCreated] = await Star.findOrCreate({\n+  const [star] = await Star.findOrCreateWithCtx(ctx, {\n     where: documentId\n       ? {\n           userId: user.id,\n@@ -67,24 +66,7 @@ export default async function starCreator({\n     defaults: {\n       index,\n     },\n-    transaction,\n   });\n \n-  if (isCreated) {\n-    await Event.create(\n-      {\n-        name: \"stars.create\",\n-        teamId: user.teamId,\n-        modelId: star.id,\n-        userId: user.id,\n-        actorId: user.id,\n-        documentId,\n-        collectionId,\n-        ip,\n-      },\n-      { transaction }\n-    );\n-  }\n-\n   return star;\n }\n\ndiff --git a/server/commands/starDestroyer.ts b/server/commands/starDestroyer.ts\ndeleted file mode 100644\nindex ce231e11f702..000000000000\n--- a/server/commands/starDestroyer.ts\n+++ /dev/null\n@@ -1,43 +0,0 @@\n-import { Transaction } from \"sequelize\";\n-import { Event, Star, User } from \"@server/models\";\n-\n-type Props = {\n-  /** The user destroying the star */\n-  user: User;\n-  /** The star to destroy */\n-  star: Star;\n-  /** The IP address of the user creating the star */\n-  ip: string;\n-  /** Optional existing transaction */\n-  transaction?: Transaction;\n-};\n-\n-/**\n- * This command destroys a document star. This just removes the star itself and\n- * does not touch the document\n- *\n- * @param Props The properties of the star to destroy\n- * @returns void\n- */\n-export default async function starDestroyer({\n-  user,\n-  star,\n-  ip,\n-  transaction,\n-}: Props): Promise<Star> {\n-  await star.destroy({ transaction });\n-\n-  await Event.create(\n-    {\n-      name: \"stars.delete\",\n-      modelId: star.id,\n-      teamId: user.teamId,\n-      actorId: user.id,\n-      userId: star.userId,\n-      documentId: star.documentId,\n-      ip,\n-    },\n-    { transaction }\n-  );\n-  return star;\n-}\n\ndiff --git a/server/commands/starUpdater.ts b/server/commands/starUpdater.ts\ndeleted file mode 100644\nindex 3277dc5e5dd1..000000000000\n--- a/server/commands/starUpdater.ts\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-import { Transaction } from \"sequelize\";\n-import { Event, Star, User } from \"@server/models\";\n-\n-type Props = {\n-  /** The user updating the star */\n-  user: User;\n-  /** The existing star */\n-  star: Star;\n-  /** The index to star the document at */\n-  index: string;\n-  /** The IP address of the user creating the star */\n-  ip: string;\n-  /** Optional existing transaction */\n-  transaction?: Transaction;\n-};\n-\n-/**\n- * This command updates a \"starred\" document. A star can only be moved to a new\n- * index (reordered) once created.\n- *\n- * @param Props The properties of the star to update\n- * @returns Star The updated star\n- */\n-export default async function starUpdater({\n-  user,\n-  star,\n-  index,\n-  ip,\n-  transaction,\n-}: Props): Promise<Star> {\n-  star.index = index;\n-  await star.save({ transaction });\n-\n-  await Event.create(\n-    {\n-      name: \"stars.update\",\n-      modelId: star.id,\n-      userId: star.userId,\n-      teamId: user.teamId,\n-      actorId: user.id,\n-      documentId: star.documentId,\n-      ip,\n-    },\n-    { transaction }\n-  );\n-  return star;\n-}\n\ndiff --git a/server/models/Star.ts b/server/models/Star.ts\nindex 2f71eb1bf818..585d3ca96cba 100644\n--- a/server/models/Star.ts\n+++ b/server/models/Star.ts\n@@ -19,6 +19,8 @@ class Star extends IdModel<\n   InferAttributes<Star>,\n   Partial<InferCreationAttributes<Star>>\n > {\n+  static eventNamespace = \"stars\";\n+\n   @Length({\n     max: 256,\n     msg: `index must be 256 characters or less`,\n\ndiff --git a/server/models/base/Model.ts b/server/models/base/Model.ts\nindex 647fce78751a..1f8a6f42638f 100644\n--- a/server/models/base/Model.ts\n+++ b/server/models/base/Model.ts\n@@ -4,10 +4,12 @@ import isArray from \"lodash/isArray\";\n import isObject from \"lodash/isObject\";\n import pick from \"lodash/pick\";\n import {\n+  Attributes,\n   CreateOptions,\n   CreationAttributes,\n   DataTypes,\n   FindOptions,\n+  FindOrCreateOptions,\n   InstanceDestroyOptions,\n   InstanceUpdateOptions,\n   ModelStatic,\n@@ -18,6 +20,7 @@ import {\n   AfterCreate,\n   AfterDestroy,\n   AfterUpdate,\n+  AfterUpsert,\n   BeforeCreate,\n   Model as SequelizeModel,\n } from \"sequelize-typescript\";\n@@ -47,8 +50,9 @@ class Model<\n    * This is the same as calling `set` and then calling `save`.\n    */\n   public updateWithCtx(ctx: APIContext, keys: Partial<TModelAttributes>) {\n+    this.set(keys);\n     this.cacheChangeset();\n-    return this.update(keys, ctx.context as InstanceUpdateOptions);\n+    return this.save(ctx.context as SaveOptions);\n   }\n \n   /**\n@@ -59,6 +63,21 @@ class Model<\n     return this.destroy(ctx.context as InstanceDestroyOptions);\n   }\n \n+  /**\n+   * Find a row that matches the query, or build and save the row if none is found\n+   * The successful result of the promise will be (instance, created) - Make sure to use `.then(([...]))`\n+   */\n+  public static findOrCreateWithCtx<M extends Model>(\n+    this: ModelStatic<M>,\n+    ctx: APIContext,\n+    options: FindOrCreateOptions<Attributes<M>, CreationAttributes<M>>\n+  ) {\n+    return this.findOrCreate({\n+      ...options,\n+      ...ctx.context,\n+    });\n+  }\n+\n   /**\n    * Builds a new model instance and calls save on it.\n    */\n@@ -83,6 +102,14 @@ class Model<\n     await this.insertEvent(\"create\", model, context);\n   }\n \n+  @AfterUpsert\n+  static async afterUpsertEvent<T extends Model>(\n+    model: T,\n+    context: APIContext[\"context\"]\n+  ) {\n+    await this.insertEvent(\"create\", model, context);\n+  }\n+\n   @AfterUpdate\n   static async afterUpdateEvent<T extends Model>(\n     model: T,\n@@ -267,7 +294,14 @@ class Model<\n    * Cache the current changeset for later use.\n    */\n   protected cacheChangeset() {\n-    this.previousChangeset = this.changeset;\n+    const previous = this.changeset;\n+\n+    if (\n+      Object.keys(previous.attributes).length > 0 ||\n+      Object.keys(previous.previous).length > 0\n+    ) {\n+      this.previousChangeset = previous;\n+    }\n   }\n \n   /**\n\ndiff --git a/server/routes/api/stars/stars.ts b/server/routes/api/stars/stars.ts\nindex 82d32c665ec9..6f80056c7b96 100644\n--- a/server/routes/api/stars/stars.ts\n+++ b/server/routes/api/stars/stars.ts\n@@ -1,8 +1,6 @@\n import Router from \"koa-router\";\n import { Sequelize } from \"sequelize\";\n import starCreator from \"@server/commands/starCreator\";\n-import starDestroyer from \"@server/commands/starDestroyer\";\n-import starUpdater from \"@server/commands/starUpdater\";\n import auth from \"@server/middlewares/authentication\";\n import { transaction } from \"@server/middlewares/transaction\";\n import validate from \"@server/middlewares/validate\";\n@@ -46,12 +44,11 @@ router.post(\n     }\n \n     const star = await starCreator({\n+      ctx,\n       user,\n       documentId,\n       collectionId,\n-      ip: ctx.request.ip,\n       index,\n-      transaction,\n     });\n \n     ctx.body = {\n@@ -130,19 +127,13 @@ router.post(\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n \n-    let star = await Star.findByPk(id, {\n+    const star = await Star.findByPk(id, {\n       transaction,\n       lock: transaction.LOCK.UPDATE,\n     });\n     authorize(user, \"update\", star);\n \n-    star = await starUpdater({\n-      user,\n-      star,\n-      ip: ctx.request.ip,\n-      index,\n-      transaction,\n-    });\n+    await star.updateWithCtx(ctx, { index });\n \n     ctx.body = {\n       data: presentStar(star),\n@@ -167,7 +158,7 @@ router.post(\n     });\n     authorize(user, \"delete\", star);\n \n-    await starDestroyer({ user, star, ip: ctx.request.ip, transaction });\n+    await star.destroyWithCtx(ctx);\n \n     ctx.body = {\n       success: true,\n",
    "test_patch": "diff --git a/server/commands/starCreator.test.ts b/server/commands/starCreator.test.ts\nindex f5917f10f1db..31b34f8fdc30 100644\n--- a/server/commands/starCreator.test.ts\n+++ b/server/commands/starCreator.test.ts\n@@ -1,24 +1,21 @@\n import { Star, Event } from \"@server/models\";\n-import { sequelize } from \"@server/storage/database\";\n import { buildDocument, buildUser } from \"@server/test/factories\";\n+import { withAPIContext } from \"@server/test/support\";\n import starCreator from \"./starCreator\";\n \n describe(\"starCreator\", () => {\n-  const ip = \"127.0.0.1\";\n-\n-  it(\"should create star\", async () => {\n+  it(\"should create star for document\", async () => {\n     const user = await buildUser();\n     const document = await buildDocument({\n       userId: user.id,\n       teamId: user.teamId,\n     });\n \n-    const star = await sequelize.transaction(async (transaction) =>\n+    const star = await withAPIContext(user, (ctx) =>\n       starCreator({\n+        ctx,\n         documentId: document.id,\n         user,\n-        ip,\n-        transaction,\n       })\n     );\n \n@@ -45,12 +42,11 @@ describe(\"starCreator\", () => {\n       index: \"P\",\n     });\n \n-    const star = await sequelize.transaction(async (transaction) =>\n+    const star = await withAPIContext(user, (ctx) =>\n       starCreator({\n+        ctx,\n         documentId: document.id,\n         user,\n-        ip,\n-        transaction,\n       })\n     );\n \n\ndiff --git a/server/commands/starDestroyer.test.ts b/server/commands/starDestroyer.test.ts\ndeleted file mode 100644\nindex 1ff9ded95de9..000000000000\n--- a/server/commands/starDestroyer.test.ts\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-import { Event, Star } from \"@server/models\";\n-import { buildDocument, buildUser } from \"@server/test/factories\";\n-import starDestroyer from \"./starDestroyer\";\n-\n-describe(\"starDestroyer\", () => {\n-  const ip = \"127.0.0.1\";\n-\n-  it(\"should destroy existing star\", async () => {\n-    const user = await buildUser();\n-    const document = await buildDocument({\n-      userId: user.id,\n-      teamId: user.teamId,\n-    });\n-\n-    const star = await Star.create({\n-      documentId: document.id,\n-      userId: user.id,\n-      index: \"P\",\n-    });\n-\n-    await starDestroyer({\n-      star,\n-      user,\n-      ip,\n-    });\n-\n-    const count = await Star.count({\n-      where: {\n-        userId: user.id,\n-      },\n-    });\n-    expect(count).toEqual(0);\n-\n-    const event = await Event.findLatest({\n-      teamId: user.teamId,\n-    });\n-    expect(event!.name).toEqual(\"stars.delete\");\n-    expect(event!.modelId).toEqual(star.id);\n-  });\n-});\n\ndiff --git a/server/commands/starUpdater.test.ts b/server/commands/starUpdater.test.ts\ndeleted file mode 100644\nindex 08db69d1fb1f..000000000000\n--- a/server/commands/starUpdater.test.ts\n+++ /dev/null\n@@ -1,37 +0,0 @@\n-import { Event, Star } from \"@server/models\";\n-import { buildDocument, buildUser } from \"@server/test/factories\";\n-import starUpdater from \"./starUpdater\";\n-\n-describe(\"starUpdater\", () => {\n-  const ip = \"127.0.0.1\";\n-\n-  it(\"should update (move) existing star\", async () => {\n-    const user = await buildUser();\n-    const document = await buildDocument({\n-      userId: user.id,\n-      teamId: user.teamId,\n-    });\n-\n-    let star = await Star.create({\n-      documentId: document.id,\n-      userId: user.id,\n-      index: \"P\",\n-    });\n-\n-    star = await starUpdater({\n-      star,\n-      index: \"h\",\n-      user,\n-      ip,\n-    });\n-\n-    const event = await Event.findLatest({\n-      teamId: user.teamId,\n-    });\n-    expect(star.documentId).toEqual(document.id);\n-    expect(star.userId).toEqual(user.id);\n-    expect(star.index).toEqual(\"h\");\n-    expect(event!.name).toEqual(\"stars.update\");\n-    expect(event!.modelId).toEqual(star.id);\n-  });\n-});\n\ndiff --git a/server/test/support.ts b/server/test/support.ts\nindex c2866ef827bc..1d4c504ea7f3 100644\n--- a/server/test/support.ts\n+++ b/server/test/support.ts\n@@ -1,6 +1,7 @@\n import { faker } from \"@faker-js/faker\";\n import { Transaction } from \"sequelize\";\n import sharedEnv from \"@shared/env\";\n+import { createContext } from \"@server/context\";\n import env from \"@server/env\";\n import { User } from \"@server/models\";\n import onerror from \"@server/onerror\";\n@@ -45,6 +46,7 @@ export function withAPIContext<T>(\n       transaction,\n     };\n     return fn({\n+      ...createContext(user, transaction),\n       state,\n       request: {\n         ip: faker.internet.ip(),\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7902",
    "pr_id": 7902,
    "issue_id": 7784,
    "repo": "outline/outline",
    "problem_statement": "Store timezone on user model\nLets start storing a `timezone` column on the user model, it can be updated automatically from the client without the need for an additional preference. This will be useful for showing other workspace members availability, adjusting relative times, and fine tuning notifications. ",
    "issue_word_count": 42,
    "test_files_count": 2,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "app/models/User.ts",
      "app/stores/AuthStore.ts",
      "server/migrations/20241105203523-add-user-timezone.js",
      "server/models/User.ts",
      "server/presenters/__snapshots__/user.test.ts.snap",
      "server/presenters/user.ts",
      "server/routes/api/users/schema.ts",
      "server/routes/api/users/users.test.ts",
      "server/routes/api/users/users.ts",
      "server/utils/zod.ts"
    ],
    "pr_changed_test_files": [
      "server/presenters/__snapshots__/user.test.ts.snap",
      "server/routes/api/users/users.test.ts"
    ],
    "base_commit": "fec91fb210ab80f086338471bb4b48578b239192",
    "head_commit": "4ab74c5002a49dc5202c9370aeb6101a034fade4",
    "repo_url": "https://github.com/outline/outline/pull/7902",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7902",
    "dockerfile": "",
    "pr_merged_at": "2024-11-07T02:06:19.000Z",
    "patch": "diff --git a/app/models/User.ts b/app/models/User.ts\nindex 461b10651cca..0b46d92d9631 100644\n--- a/app/models/User.ts\n+++ b/app/models/User.ts\n@@ -50,6 +50,10 @@ class User extends ParanoidModel {\n   @observable\n   notificationSettings: NotificationSettings;\n \n+  @Field\n+  @observable\n+  timezone?: string;\n+\n   @observable\n   email: string;\n \n\ndiff --git a/app/stores/AuthStore.ts b/app/stores/AuthStore.ts\nindex 52b03f6814c8..742d12b669c5 100644\n--- a/app/stores/AuthStore.ts\n+++ b/app/stores/AuthStore.ts\n@@ -225,6 +225,12 @@ export default class AuthStore extends Store<Team> {\n           });\n         }\n \n+        const currTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n+        if (data.user.timezone !== currTimezone) {\n+          const user = this.rootStore.users.get(data.user.id)!;\n+          void user.save({ timezone: currTimezone });\n+        }\n+\n         // Redirect to the correct custom domain or team subdomain if needed\n         // Occurs when the (sub)domain is changed in admin and the user hits an old url\n         const { hostname, pathname } = window.location;\n\ndiff --git a/server/migrations/20241105203523-add-user-timezone.js b/server/migrations/20241105203523-add-user-timezone.js\nnew file mode 100644\nindex 000000000000..ba1e7b767d73\n--- /dev/null\n+++ b/server/migrations/20241105203523-add-user-timezone.js\n@@ -0,0 +1,15 @@\n+\"use strict\";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.addColumn(\"users\", \"timezone\", {\n+      type: Sequelize.STRING,\n+      allowNull: true,\n+    });\n+  },\n+\n+  async down(queryInterface, Sequelize) {\n+    await queryInterface.removeColumn(\"users\", \"timezone\");\n+  },\n+};\n\ndiff --git a/server/models/User.ts b/server/models/User.ts\nindex 6322bb2076c6..e73dbe88700f 100644\n--- a/server/models/User.ts\n+++ b/server/models/User.ts\n@@ -183,6 +183,10 @@ class User extends ParanoidModel<\n   @Column(DataType.STRING)\n   language: keyof typeof locales | null;\n \n+  @AllowNull\n+  @Column(DataType.STRING)\n+  timezone: string | null;\n+\n   @AllowNull\n   @IsUrlOrRelativePath\n   @Length({ max: 4096, msg: \"avatarUrl must be less than 4096 characters\" })\n\ndiff --git a/server/presenters/user.ts b/server/presenters/user.ts\nindex c877a8603941..f9b73d55b323 100644\n--- a/server/presenters/user.ts\n+++ b/server/presenters/user.ts\n@@ -21,6 +21,7 @@ type UserPresentation = {\n   language?: string;\n   preferences?: UserPreferences | null;\n   notificationSettings?: NotificationSettings;\n+  timezone?: string | null;\n };\n \n export default function presentUser(\n@@ -37,6 +38,7 @@ export default function presentUser(\n     createdAt: user.createdAt,\n     updatedAt: user.updatedAt,\n     lastActiveAt: user.lastActiveAt,\n+    timezone: user.timezone,\n   };\n \n   if (options.includeDetails) {\n\ndiff --git a/server/routes/api/users/schema.ts b/server/routes/api/users/schema.ts\nindex fd019af5a745..84c9df75520b 100644\n--- a/server/routes/api/users/schema.ts\n+++ b/server/routes/api/users/schema.ts\n@@ -2,7 +2,7 @@ import { z } from \"zod\";\n import { NotificationEventType, UserPreference, UserRole } from \"@shared/types\";\n import { locales } from \"@shared/utils/date\";\n import User from \"@server/models/User\";\n-import { zodEnumFromObjectKeys } from \"@server/utils/zod\";\n+import { zodEnumFromObjectKeys, zodTimezone } from \"@server/utils/zod\";\n import { BaseSchema } from \"../schema\";\n \n const BaseIdSchema = z.object({\n@@ -84,6 +84,7 @@ export const UsersUpdateSchema = BaseSchema.extend({\n     avatarUrl: z.string().nullish(),\n     language: zodEnumFromObjectKeys(locales).optional(),\n     preferences: z.record(z.nativeEnum(UserPreference), z.boolean()).optional(),\n+    timezone: zodTimezone().optional(),\n   }),\n });\n \n\ndiff --git a/server/routes/api/users/users.ts b/server/routes/api/users/users.ts\nindex 887d3c55bb75..d1d93897493f 100644\n--- a/server/routes/api/users/users.ts\n+++ b/server/routes/api/users/users.ts\n@@ -209,7 +209,8 @@ router.post(\n   async (ctx: APIContext<T.UsersUpdateReq>) => {\n     const { auth, transaction } = ctx.state;\n     const actor = auth.user;\n-    const { id, name, avatarUrl, language, preferences } = ctx.input.body;\n+    const { id, name, avatarUrl, language, preferences, timezone } =\n+      ctx.input.body;\n \n     let user: User | null = actor;\n     if (id) {\n@@ -236,6 +237,9 @@ router.post(\n         user.setPreference(key, preferences[key] as boolean);\n       }\n     }\n+    if (timezone) {\n+      user.timezone = timezone;\n+    }\n \n     await Event.createFromContext(ctx, {\n       name: \"users.update\",\n\ndiff --git a/server/utils/zod.ts b/server/utils/zod.ts\nindex 88ce8cfef22f..5181c88f433e 100644\n--- a/server/utils/zod.ts\n+++ b/server/utils/zod.ts\n@@ -15,3 +15,16 @@ export const zodIconType = () =>\n     z.string().regex(emojiRegex()),\n     zodEnumFromObjectKeys(IconLibrary.mapping),\n   ]);\n+\n+export const zodTimezone = () =>\n+  z.string().refine(\n+    (timezone) => {\n+      try {\n+        Intl.DateTimeFormat(undefined, { timeZone: timezone });\n+        return true;\n+      } catch {\n+        return false;\n+      }\n+    },\n+    { message: \"invalid timezone\" }\n+  );\n",
    "test_patch": "diff --git a/server/presenters/__snapshots__/user.test.ts.snap b/server/presenters/__snapshots__/user.test.ts.snap\nindex 51abe76e0bdf..c1766ed44471 100644\n--- a/server/presenters/__snapshots__/user.test.ts.snap\n+++ b/server/presenters/__snapshots__/user.test.ts.snap\n@@ -10,6 +10,7 @@ exports[`presents a user 1`] = `\n   \"lastActiveAt\": undefined,\n   \"name\": \"Test User\",\n   \"role\": \"member\",\n+  \"timezone\": undefined,\n   \"updatedAt\": undefined,\n }\n `;\n@@ -24,6 +25,7 @@ exports[`presents a user without slack data 1`] = `\n   \"lastActiveAt\": undefined,\n   \"name\": \"Test User\",\n   \"role\": \"member\",\n+  \"timezone\": undefined,\n   \"updatedAt\": undefined,\n }\n `;\n\ndiff --git a/server/routes/api/users/users.test.ts b/server/routes/api/users/users.test.ts\nindex 33f7bafb62fb..c39e83acb745 100644\n--- a/server/routes/api/users/users.test.ts\n+++ b/server/routes/api/users/users.test.ts\n@@ -702,6 +702,19 @@ describe(\"#users.update\", () => {\n     expect(body.data.preferences.rememberLastPath).toBe(true);\n   });\n \n+  it(\"should update user timezone\", async () => {\n+    const user = await buildUser();\n+    const res = await server.post(\"/api/users.update\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        timezone: \"Asia/Calcutta\",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.timezone).toEqual(\"Asia/Calcutta\");\n+  });\n+\n   it(\"should require authentication\", async () => {\n     const res = await server.post(\"/api/users.update\");\n     const body = await res.json();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7877",
    "pr_id": 7877,
    "issue_id": 7845,
    "repo": "outline/outline",
    "problem_statement": "Store auth type on `events`\nIn the request `context` we have `auth.type` to denote whether an action was taken through the app or programmatically, we'd like to add a new column to `events` and start storing this going forward where possible.\r\n\r\n Related to #5909 but hopefully not blocked by it",
    "issue_word_count": 47,
    "test_files_count": 1,
    "non_test_files_count": 18,
    "pr_changed_files": [
      "plugins/webhooks/server/api/webhookSubscriptions.ts",
      "server/commands/collectionDestroyer.ts",
      "server/commands/documentCollaborativeUpdater.ts",
      "server/commands/revisionCreator.test.ts",
      "server/commands/revisionCreator.ts",
      "server/commands/subscriptionCreator.ts",
      "server/commands/teamUpdater.ts",
      "server/models/Event.ts",
      "server/queues/processors/RevisionsProcessor.ts",
      "server/routes/api/apiKeys/apiKeys.ts",
      "server/routes/api/attachments/attachments.ts",
      "server/routes/api/auth/auth.ts",
      "server/routes/api/authenticationProviders/authenticationProviders.ts",
      "server/routes/api/collections/collections.ts",
      "server/routes/api/comments/comments.ts",
      "server/routes/api/documents/documents.ts",
      "server/routes/api/userMemberships/userMemberships.ts",
      "server/routes/api/users/users.ts",
      "server/types.ts"
    ],
    "pr_changed_test_files": [
      "server/commands/revisionCreator.test.ts"
    ],
    "base_commit": "398be020915d8b04b1d1b1798c35ded43c7c1da6",
    "head_commit": "03e1ab318b2a13b009e7eae03f84a3c69aee13a3",
    "repo_url": "https://github.com/outline/outline/pull/7877",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7877",
    "dockerfile": "",
    "pr_merged_at": "2024-11-02T17:16:15.000Z",
    "patch": "diff --git a/plugins/webhooks/server/api/webhookSubscriptions.ts b/plugins/webhooks/server/api/webhookSubscriptions.ts\nindex f8c383259bd6..27caa6ecbbfc 100644\n--- a/plugins/webhooks/server/api/webhookSubscriptions.ts\n+++ b/plugins/webhooks/server/api/webhookSubscriptions.ts\n@@ -3,11 +3,12 @@ import compact from \"lodash/compact\";\n import isEmpty from \"lodash/isEmpty\";\n import { UserRole } from \"@shared/types\";\n import auth from \"@server/middlewares/authentication\";\n+import { transaction } from \"@server/middlewares/transaction\";\n import validate from \"@server/middlewares/validate\";\n import { WebhookSubscription, Event } from \"@server/models\";\n import { authorize } from \"@server/policies\";\n import pagination from \"@server/routes/api/middlewares/pagination\";\n-import { WebhookSubscriptionEvent, APIContext } from \"@server/types\";\n+import { APIContext } from \"@server/types\";\n import presentWebhookSubscription from \"../presenters/webhookSubscription\";\n import * as T from \"./schema\";\n \n@@ -40,36 +41,37 @@ router.post(\n   \"webhookSubscriptions.create\",\n   auth({ role: UserRole.Admin }),\n   validate(T.WebhookSubscriptionsCreateSchema),\n+  transaction(),\n   async (ctx: APIContext<T.WebhookSubscriptionsCreateReq>) => {\n+    const { transaction } = ctx.state;\n     const { user } = ctx.state.auth;\n     authorize(user, \"createWebhookSubscription\", user.team);\n \n     const { name, url, secret } = ctx.input.body;\n     const events: string[] = compact(ctx.input.body.events);\n \n-    const webhookSubscription = await WebhookSubscription.create({\n-      name,\n-      events,\n-      createdById: user.id,\n-      teamId: user.teamId,\n-      url,\n-      enabled: true,\n-      secret: isEmpty(secret) ? undefined : secret,\n-    });\n+    const webhookSubscription = await WebhookSubscription.create(\n+      {\n+        name,\n+        events,\n+        createdById: user.id,\n+        teamId: user.teamId,\n+        url,\n+        enabled: true,\n+        secret: isEmpty(secret) ? undefined : secret,\n+      },\n+      { transaction }\n+    );\n \n-    const event: WebhookSubscriptionEvent = {\n+    await Event.createFromContext(ctx, {\n       name: \"webhookSubscriptions.create\",\n       modelId: webhookSubscription.id,\n-      teamId: user.teamId,\n-      actorId: user.id,\n       data: {\n         name,\n         url,\n         events,\n       },\n-      ip: ctx.request.ip,\n-    };\n-    await Event.create(event);\n+    });\n \n     ctx.body = {\n       data: presentWebhookSubscription(webhookSubscription),\n@@ -81,28 +83,30 @@ router.post(\n   \"webhookSubscriptions.delete\",\n   auth({ role: UserRole.Admin }),\n   validate(T.WebhookSubscriptionsDeleteSchema),\n+  transaction(),\n   async (ctx: APIContext<T.WebhookSubscriptionsDeleteReq>) => {\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n-    const webhookSubscription = await WebhookSubscription.findByPk(id);\n+    const { transaction } = ctx.state;\n+    const webhookSubscription = await WebhookSubscription.findByPk(id, {\n+      rejectOnEmpty: true,\n+      lock: transaction.LOCK.UPDATE,\n+      transaction,\n+    });\n \n     authorize(user, \"delete\", webhookSubscription);\n \n-    await webhookSubscription.destroy();\n+    await webhookSubscription.destroy({ transaction });\n \n-    const event: WebhookSubscriptionEvent = {\n+    await Event.createFromContext(ctx, {\n       name: \"webhookSubscriptions.delete\",\n       modelId: webhookSubscription.id,\n-      teamId: user.teamId,\n-      actorId: user.id,\n       data: {\n         name: webhookSubscription.name,\n         url: webhookSubscription.url,\n         events: webhookSubscription.events,\n       },\n-      ip: ctx.request.ip,\n-    };\n-    await Event.create(event);\n+    });\n \n     ctx.body = {\n       success: true,\n@@ -114,37 +118,40 @@ router.post(\n   \"webhookSubscriptions.update\",\n   auth({ role: UserRole.Admin }),\n   validate(T.WebhookSubscriptionsUpdateSchema),\n+  transaction(),\n   async (ctx: APIContext<T.WebhookSubscriptionsUpdateReq>) => {\n     const { id, name, url, secret } = ctx.input.body;\n     const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n     const events: string[] = compact(ctx.input.body.events);\n     const webhookSubscription = await WebhookSubscription.findByPk(id, {\n       rejectOnEmpty: true,\n+      lock: transaction.LOCK.UPDATE,\n+      transaction,\n     });\n \n     authorize(user, \"update\", webhookSubscription);\n \n-    await webhookSubscription.update({\n-      name,\n-      url,\n-      events,\n-      enabled: true,\n-      secret: isEmpty(secret) ? undefined : secret,\n-    });\n+    await webhookSubscription.update(\n+      {\n+        name,\n+        url,\n+        events,\n+        enabled: true,\n+        secret: isEmpty(secret) ? undefined : secret,\n+      },\n+      { transaction }\n+    );\n \n-    const event: WebhookSubscriptionEvent = {\n+    await Event.createFromContext(ctx, {\n       name: \"webhookSubscriptions.update\",\n       modelId: webhookSubscription.id,\n-      teamId: user.teamId,\n-      actorId: user.id,\n       data: {\n         name: webhookSubscription.name,\n         url: webhookSubscription.url,\n         events: webhookSubscription.events,\n       },\n-      ip: ctx.request.ip,\n-    };\n-    await Event.create(event);\n+    });\n \n     ctx.body = {\n       data: presentWebhookSubscription(webhookSubscription),\n\ndiff --git a/server/commands/collectionDestroyer.ts b/server/commands/collectionDestroyer.ts\nindex 6d120d2e06c2..05b8e15cc16d 100644\n--- a/server/commands/collectionDestroyer.ts\n+++ b/server/commands/collectionDestroyer.ts\n@@ -9,7 +9,7 @@ type Props = {\n   /** The database transaction to use */\n   transaction: Transaction;\n   /** The IP address of the current request */\n-  ip: string;\n+  ip: string | null;\n };\n \n export default async function collectionDestroyer({\n\ndiff --git a/server/commands/documentCollaborativeUpdater.ts b/server/commands/documentCollaborativeUpdater.ts\nindex 9a124ac4d997..f10d9f25372e 100644\n--- a/server/commands/documentCollaborativeUpdater.ts\n+++ b/server/commands/documentCollaborativeUpdater.ts\n@@ -8,6 +8,7 @@ import { schema, serializer } from \"@server/editor\";\n import Logger from \"@server/logging/Logger\";\n import { Document, Event } from \"@server/models\";\n import { sequelize } from \"@server/storage/database\";\n+import { AuthenticationType } from \"@server/types\";\n \n type Props = {\n   /** The document ID to update. */\n@@ -89,6 +90,7 @@ export default async function documentCollaborativeUpdater({\n       collectionId: document.collectionId,\n       teamId: document.teamId,\n       actorId: lastModifiedById,\n+      authType: AuthenticationType.APP,\n       data: {\n         multiplayer: true,\n         title: document.title,\n\ndiff --git a/server/commands/revisionCreator.ts b/server/commands/revisionCreator.ts\nindex 69065e766bb7..149a5724ce05 100644\n--- a/server/commands/revisionCreator.ts\n+++ b/server/commands/revisionCreator.ts\n@@ -1,14 +1,15 @@\n import { Document, User, Event, Revision } from \"@server/models\";\n import { sequelize } from \"@server/storage/database\";\n+import { DocumentEvent, RevisionEvent } from \"@server/types\";\n \n export default async function revisionCreator({\n+  event,\n   document,\n   user,\n-  ip,\n }: {\n+  event: DocumentEvent | RevisionEvent;\n   document: Document;\n   user: User;\n-  ip?: string;\n }) {\n   return sequelize.transaction(async (transaction) => {\n     const revision = await Revision.createFromDocument(document, {\n@@ -23,7 +24,8 @@ export default async function revisionCreator({\n         teamId: document.teamId,\n         actorId: user.id,\n         createdAt: document.updatedAt,\n-        ip: ip || user.lastActiveIp,\n+        ip: event.ip,\n+        authType: event.authType,\n       },\n       {\n         transaction,\n\ndiff --git a/server/commands/subscriptionCreator.ts b/server/commands/subscriptionCreator.ts\nindex c50d9a5e8c4e..fe7daf20dbb3 100644\n--- a/server/commands/subscriptionCreator.ts\n+++ b/server/commands/subscriptionCreator.ts\n@@ -11,7 +11,7 @@ type Props = {\n   /** Event to subscribe to */\n   event: string;\n   /** The IP address of the incoming request */\n-  ip: string;\n+  ip: string | null;\n   /** Whether the subscription should be restored if it exists in a deleted state  */\n   resubscribe?: boolean;\n   transaction: Transaction;\n\ndiff --git a/server/commands/teamUpdater.ts b/server/commands/teamUpdater.ts\nindex 7cb5b9ff5b89..1292368296ff 100644\n--- a/server/commands/teamUpdater.ts\n+++ b/server/commands/teamUpdater.ts\n@@ -6,7 +6,7 @@ import { Event, Team, TeamDomain, User } from \"@server/models\";\n \n type Props = {\n   params: Partial<Omit<Team, \"allowedDomains\">> & { allowedDomains?: string[] };\n-  ip?: string;\n+  ip?: string | null;\n   user: User;\n   team: Team;\n   transaction: Transaction;\n\ndiff --git a/server/models/Event.ts b/server/models/Event.ts\nindex f1e5d4d4cc1f..11a9ac683ffa 100644\n--- a/server/models/Event.ts\n+++ b/server/models/Event.ts\n@@ -64,7 +64,7 @@ class Event extends IdModel<\n    * used for arbitrary data associated with the event.\n    */\n   @Column(DataType.JSONB)\n-  changes?: Record<string, any> | null;\n+  changes: Record<string, any> | null;\n \n   // hooks\n \n@@ -173,7 +173,10 @@ class Event extends IdModel<\n         ip: ctx.request.ip,\n         authType: ctx.state.auth.type,\n       },\n-      options\n+      {\n+        transaction: ctx.state.transaction,\n+        ...options,\n+      }\n     );\n   }\n }\n\ndiff --git a/server/queues/processors/RevisionsProcessor.ts b/server/queues/processors/RevisionsProcessor.ts\nindex 9dafe515e003..fb847b4e712f 100644\n--- a/server/queues/processors/RevisionsProcessor.ts\n+++ b/server/queues/processors/RevisionsProcessor.ts\n@@ -41,6 +41,7 @@ export default class RevisionsProcessor extends BaseProcessor {\n           rejectOnEmpty: true,\n         });\n         await revisionCreator({\n+          event,\n           user,\n           document,\n         });\n\ndiff --git a/server/routes/api/apiKeys/apiKeys.ts b/server/routes/api/apiKeys/apiKeys.ts\nindex 51962b5d2f8f..a2b5bd803371 100644\n--- a/server/routes/api/apiKeys/apiKeys.ts\n+++ b/server/routes/api/apiKeys/apiKeys.ts\n@@ -33,17 +33,13 @@ router.post(\n       { transaction }\n     );\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"api_keys.create\",\n-        modelId: key.id,\n-        data: {\n-          name,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"api_keys.create\",\n+      modelId: key.id,\n+      data: {\n+        name,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       data: presentApiKey(key),\n@@ -118,17 +114,13 @@ router.post(\n     authorize(user, \"delete\", key);\n \n     await key.destroy({ transaction });\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"api_keys.delete\",\n-        modelId: key.id,\n-        data: {\n-          name: key.name,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"api_keys.delete\",\n+      modelId: key.id,\n+      data: {\n+        name: key.name,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       success: true,\n\ndiff --git a/server/routes/api/attachments/attachments.ts b/server/routes/api/attachments/attachments.ts\nindex 5e6c27594b1f..6e0905ed373a 100644\n--- a/server/routes/api/attachments/attachments.ts\n+++ b/server/routes/api/attachments/attachments.ts\n@@ -78,17 +78,13 @@ router.post(\n       },\n       { transaction }\n     );\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"attachments.create\",\n-        data: {\n-          name,\n-        },\n-        modelId,\n+    await Event.createFromContext(ctx, {\n+      name: \"attachments.create\",\n+      data: {\n+        name,\n       },\n-      { transaction }\n-    );\n+      modelId,\n+    });\n \n     const presignedPost = await FileStorage.getPresignedPost(\n       key,\n@@ -123,22 +119,27 @@ router.post(\n   \"attachments.delete\",\n   auth(),\n   validate(T.AttachmentDeleteSchema),\n+  transaction(),\n   async (ctx: APIContext<T.AttachmentDeleteReq>) => {\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n     const attachment = await Attachment.findByPk(id, {\n       rejectOnEmpty: true,\n+      lock: transaction.LOCK.UPDATE,\n+      transaction,\n     });\n \n     if (attachment.documentId) {\n       const document = await Document.findByPk(attachment.documentId, {\n         userId: user.id,\n+        transaction,\n       });\n       authorize(user, \"update\", document);\n     }\n \n     authorize(user, \"delete\", attachment);\n-    await attachment.destroy();\n+    await attachment.destroy({ transaction });\n     await Event.createFromContext(ctx, {\n       name: \"attachments.delete\",\n     });\n\ndiff --git a/server/routes/api/auth/auth.ts b/server/routes/api/auth/auth.ts\nindex d19a8ba71dce..61b7373c933c 100644\n--- a/server/routes/api/auth/auth.ts\n+++ b/server/routes/api/auth/auth.ts\n@@ -169,19 +169,13 @@ router.post(\n     const { user } = auth;\n \n     await user.rotateJwtSecret({ transaction });\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"users.signout\",\n-        userId: user.id,\n-        data: {\n-          name: user.name,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"users.signout\",\n+      userId: user.id,\n+      data: {\n+        name: user.name,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n \n     ctx.cookies.set(\"accessToken\", \"\", {\n       sameSite: \"lax\",\n\ndiff --git a/server/routes/api/authenticationProviders/authenticationProviders.ts b/server/routes/api/authenticationProviders/authenticationProviders.ts\nindex c1898485090b..f40afaec442a 100644\n--- a/server/routes/api/authenticationProviders/authenticationProviders.ts\n+++ b/server/routes/api/authenticationProviders/authenticationProviders.ts\n@@ -57,17 +57,13 @@ router.post(\n       await authenticationProvider.disable({ transaction });\n     }\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"authenticationProviders.update\",\n-        data: {\n-          enabled,\n-        },\n-        modelId: id,\n+    await Event.createFromContext(ctx, {\n+      name: \"authenticationProviders.update\",\n+      data: {\n+        enabled,\n       },\n-      { transaction }\n-    );\n+      modelId: id,\n+    });\n \n     ctx.body = {\n       data: presentAuthenticationProvider(authenticationProvider),\n\ndiff --git a/server/routes/api/collections/collections.ts b/server/routes/api/collections/collections.ts\nindex 2cbf08dd7b31..23465f39737a 100644\n--- a/server/routes/api/collections/collections.ts\n+++ b/server/routes/api/collections/collections.ts\n@@ -92,19 +92,13 @@ router.post(\n \n     await collection.save({ transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"collections.create\",\n-        collectionId: collection.id,\n-        data: {\n-          name,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"collections.create\",\n+      collectionId: collection.id,\n+      data: {\n+        name,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n     // we must reload the collection to get memberships for policy presenter\n     const reloaded = await Collection.scope({\n       method: [\"withMembership\", user.id],\n@@ -198,19 +192,13 @@ router.post(\n       }\n     );\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"fileOperations.create\",\n-        modelId: fileOperation.id,\n-        data: {\n-          type: FileOperationType.Import,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"fileOperations.create\",\n+      modelId: fileOperation.id,\n+      data: {\n+        type: FileOperationType.Import,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n \n     ctx.body = {\n       success: true,\n@@ -253,19 +241,15 @@ router.post(\n     membership.permission = permission;\n     await membership.save({ transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"collections.add_group\",\n-        collectionId: collection.id,\n-        modelId: groupId,\n-        data: {\n-          name: group.name,\n-          membershipId: membership.id,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"collections.add_group\",\n+      collectionId: collection.id,\n+      modelId: groupId,\n+      data: {\n+        name: group.name,\n+        membershipId: membership.id,\n       },\n-      { transaction }\n-    );\n+    });\n \n     const groupMemberships = [presentGroupMembership(membership)];\n \n@@ -318,19 +302,15 @@ router.post(\n       },\n       transaction,\n     });\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"collections.remove_group\",\n-        collectionId: collection.id,\n-        modelId: groupId,\n-        data: {\n-          name: group.name,\n-          membershipId: membership.id,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"collections.remove_group\",\n+      collectionId: collection.id,\n+      modelId: groupId,\n+      data: {\n+        name: group.name,\n+        membershipId: membership.id,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       success: true,\n@@ -445,22 +425,16 @@ router.post(\n       await membership.save({ transaction });\n     }\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"collections.add_user\",\n-        userId,\n-        modelId: membership.id,\n-        collectionId: collection.id,\n-        data: {\n-          isNew,\n-          permission: membership.permission,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"collections.add_user\",\n+      userId,\n+      modelId: membership.id,\n+      collectionId: collection.id,\n+      data: {\n+        isNew,\n+        permission: membership.permission,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n \n     ctx.body = {\n       data: {\n@@ -500,19 +474,15 @@ router.post(\n \n     await collection.$remove(\"user\", user, { transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"collections.remove_user\",\n-        userId,\n-        modelId: membership.id,\n-        collectionId: collection.id,\n-        data: {\n-          name: user.name,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"collections.remove_user\",\n+      userId,\n+      modelId: membership.id,\n+      collectionId: collection.id,\n+      data: {\n+        name: user.name,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       success: true,\n@@ -755,20 +725,14 @@ router.post(\n     );\n \n     if (privacyChanged || sharingChanged) {\n-      await Event.createFromContext(\n-        ctx,\n-        {\n-          name: \"collections.permission_changed\",\n-          collectionId: collection.id,\n-          data: {\n-            privacyChanged,\n-            sharingChanged,\n-          },\n+      await Event.createFromContext(ctx, {\n+        name: \"collections.permission_changed\",\n+        collectionId: collection.id,\n+        data: {\n+          privacyChanged,\n+          sharingChanged,\n         },\n-        {\n-          transaction,\n-        }\n-      );\n+      });\n     }\n \n     // must reload to update collection membership for correct policy calculation\n@@ -972,18 +936,14 @@ router.post(\n       }\n     );\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"collections.archive\",\n-        collectionId: collection.id,\n-        data: {\n-          name: collection.name,\n-          archivedAt: collection.archivedAt,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"collections.archive\",\n+      collectionId: collection.id,\n+      data: {\n+        name: collection.name,\n+        archivedAt: collection.archivedAt,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       data: await presentCollection(ctx, collection),\n@@ -1032,18 +992,14 @@ router.post(\n     collection.archivedById = null;\n     await collection.save({ transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"collections.restore\",\n-        collectionId: collection.id,\n-        data: {\n-          name: collection.name,\n-          archivedAt: collectionArchivedAt,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"collections.restore\",\n+      collectionId: collection.id,\n+      data: {\n+        name: collection.name,\n+        archivedAt: collectionArchivedAt,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       data: await presentCollection(ctx, collection!),\n@@ -1078,19 +1034,13 @@ router.post(\n         transaction,\n       }\n     );\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"collections.move\",\n-        collectionId: collection.id,\n-        data: {\n-          index,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"collections.move\",\n+      collectionId: collection.id,\n+      data: {\n+        index,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n \n     ctx.body = {\n       success: true,\n\ndiff --git a/server/routes/api/comments/comments.ts b/server/routes/api/comments/comments.ts\nindex 0111b8bbaa49..856204d8db74 100644\n--- a/server/routes/api/comments/comments.ts\n+++ b/server/routes/api/comments/comments.ts\n@@ -295,16 +295,12 @@ router.post(\n     const changes = comment.changeset;\n     await comment.save({ transaction, silent: true });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"comments.update\",\n-        modelId: comment.id,\n-        documentId: comment.documentId,\n-        changes,\n-      },\n-      { transaction }\n-    );\n+    await Event.createFromContext(ctx, {\n+      name: \"comments.update\",\n+      modelId: comment.id,\n+      documentId: comment.documentId,\n+      changes,\n+    });\n \n     ctx.body = {\n       data: presentComment(comment),\n@@ -342,16 +338,12 @@ router.post(\n     const changes = comment.changeset;\n     await comment.save({ transaction, silent: true });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"comments.update\",\n-        modelId: comment.id,\n-        documentId: comment.documentId,\n-        changes,\n-      },\n-      { transaction }\n-    );\n+    await Event.createFromContext(ctx, {\n+      name: \"comments.update\",\n+      modelId: comment.id,\n+      documentId: comment.documentId,\n+      changes,\n+    });\n \n     ctx.body = {\n       data: presentComment(comment),\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex fff936bc3ce9..01136cc9191c 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -848,37 +848,29 @@ router.post(\n \n       // restore a previously deleted document\n       await document.restoreTo(destCollectionId!, { transaction, user }); // destCollectionId is guaranteed to be defined here\n-      await Event.createFromContext(\n-        ctx,\n-        {\n-          name: \"documents.restore\",\n-          documentId: document.id,\n-          collectionId: document.collectionId,\n-          data: {\n-            title: document.title,\n-          },\n+      await Event.createFromContext(ctx, {\n+        name: \"documents.restore\",\n+        documentId: document.id,\n+        collectionId: document.collectionId,\n+        data: {\n+          title: document.title,\n         },\n-        { transaction }\n-      );\n+      });\n     } else if (document.archivedAt) {\n       authorize(user, \"unarchive\", document);\n       authorize(user, \"updateDocument\", destCollection);\n \n       // restore a previously archived document\n       await document.restoreTo(destCollectionId!, { transaction, user }); // destCollectionId is guaranteed to be defined here\n-      await Event.createFromContext(\n-        ctx,\n-        {\n-          name: \"documents.unarchive\",\n-          documentId: document.id,\n-          collectionId: document.collectionId,\n-          data: {\n-            title: document.title,\n-            sourceCollectionId,\n-          },\n+      await Event.createFromContext(ctx, {\n+        name: \"documents.unarchive\",\n+        documentId: document.id,\n+        collectionId: document.collectionId,\n+        data: {\n+          title: document.title,\n+          sourceCollectionId,\n         },\n-        { transaction }\n-      );\n+      });\n     } else if (revisionId) {\n       // restore a document to a specific revision\n       authorize(user, \"update\", document);\n@@ -888,18 +880,14 @@ router.post(\n       document.restoreFromRevision(revision);\n       await document.save({ transaction });\n \n-      await Event.createFromContext(\n-        ctx,\n-        {\n-          name: \"documents.restore\",\n-          documentId: document.id,\n-          collectionId: document.collectionId,\n-          data: {\n-            title: document.title,\n-          },\n+      await Event.createFromContext(ctx, {\n+        name: \"documents.restore\",\n+        documentId: document.id,\n+        collectionId: document.collectionId,\n+        data: {\n+          title: document.title,\n         },\n-        { transaction }\n-      );\n+      });\n     } else {\n       assertPresent(revisionId, \"revisionId is required\");\n     }\n@@ -1136,21 +1124,15 @@ router.post(\n         transaction,\n       }\n     );\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"documents.create\",\n-        documentId: document.id,\n-        collectionId: document.collectionId,\n-        data: {\n-          title: document.title,\n-          template: true,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"documents.create\",\n+      documentId: document.id,\n+      collectionId: document.collectionId,\n+      data: {\n+        title: document.title,\n+        template: true,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n \n     // reload to get all of the data needed to present (user, collection etc)\n     const reloaded = await Document.findByPk(document.id, {\n@@ -1387,18 +1369,14 @@ router.post(\n     authorize(user, \"archive\", document);\n \n     await document.archive(user, { transaction });\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"documents.archive\",\n-        documentId: document.id,\n-        collectionId: document.collectionId,\n-        data: {\n-          title: document.title,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"documents.archive\",\n+      documentId: document.id,\n+      collectionId: document.collectionId,\n+      data: {\n+        title: document.title,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       data: await presentDocument(ctx, document),\n@@ -1756,23 +1734,17 @@ router.post(\n       await membership.save({ transaction });\n     }\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"documents.add_user\",\n-        userId,\n-        modelId: membership.id,\n-        documentId: document.id,\n-        data: {\n-          title: document.title,\n-          isNew,\n-          permission: membership.permission,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"documents.add_user\",\n+      userId,\n+      modelId: membership.id,\n+      documentId: document.id,\n+      data: {\n+        title: document.title,\n+        isNew,\n+        permission: membership.permission,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n \n     ctx.body = {\n       data: {\n@@ -1822,16 +1794,12 @@ router.post(\n \n     await membership.destroy({ transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"documents.remove_user\",\n-        userId,\n-        modelId: membership.id,\n-        documentId: document.id,\n-      },\n-      { transaction }\n-    );\n+    await Event.createFromContext(ctx, {\n+      name: \"documents.remove_user\",\n+      userId,\n+      modelId: membership.id,\n+      documentId: document.id,\n+    });\n \n     ctx.body = {\n       success: true,\n@@ -1885,21 +1853,17 @@ router.post(\n       await membership.save({ transaction });\n     }\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"documents.add_group\",\n-        documentId: document.id,\n-        modelId: groupId,\n-        data: {\n-          name: group.name,\n-          isNew,\n-          permission: membership.permission,\n-          membershipId: membership.id,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"documents.add_group\",\n+      documentId: document.id,\n+      modelId: groupId,\n+      data: {\n+        name: group.name,\n+        isNew,\n+        permission: membership.permission,\n+        membershipId: membership.id,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       data: {\n@@ -1945,19 +1909,15 @@ router.post(\n \n     await membership.destroy({ transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"documents.remove_group\",\n-        documentId: document.id,\n-        modelId: groupId,\n-        data: {\n-          name: group.name,\n-          membershipId: membership.id,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"documents.remove_group\",\n+      documentId: document.id,\n+      modelId: groupId,\n+      data: {\n+        name: group.name,\n+        membershipId: membership.id,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       success: true,\n\ndiff --git a/server/routes/api/userMemberships/userMemberships.ts b/server/routes/api/userMemberships/userMemberships.ts\nindex 3d67f96a14ea..f2ea70c64714 100644\n--- a/server/routes/api/userMemberships/userMemberships.ts\n+++ b/server/routes/api/userMemberships/userMemberships.ts\n@@ -91,19 +91,15 @@ router.post(\n     membership.index = index;\n     await membership.save({ transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"userMemberships.update\",\n-        modelId: membership.id,\n-        userId: membership.userId,\n-        documentId: membership.documentId,\n-        data: {\n-          index: membership.index,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \"userMemberships.update\",\n+      modelId: membership.id,\n+      userId: membership.userId,\n+      documentId: membership.documentId,\n+      data: {\n+        index: membership.index,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       data: presentMembership(membership),\n\ndiff --git a/server/routes/api/users/users.ts b/server/routes/api/users/users.ts\nindex 71adf6467ad1..611ab2b6751e 100644\n--- a/server/routes/api/users/users.ts\n+++ b/server/routes/api/users/users.ts\n@@ -237,15 +237,11 @@ router.post(\n       }\n     }\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"users.update\",\n-        userId: user.id,\n-        changes: user.changeset,\n-      },\n-      { transaction }\n-    );\n+    await Event.createFromContext(ctx, {\n+      name: \"users.update\",\n+      userId: user.id,\n+      changes: user.changeset,\n+    });\n     await user.save({ transaction });\n \n     ctx.body = {\n@@ -348,20 +344,14 @@ async function updateRole(ctx: APIContext<T.UsersChangeRoleReq>) {\n \n   await user.update({ role }, { transaction });\n \n-  await Event.createFromContext(\n-    ctx,\n-    {\n-      name,\n-      userId,\n-      data: {\n-        name: user.name,\n-        role,\n-      },\n+  await Event.createFromContext(ctx, {\n+    name,\n+    userId,\n+    data: {\n+      name: user.name,\n+      role,\n     },\n-    {\n-      transaction,\n-    }\n-  );\n+  });\n \n   const includeDetails = !!can(actor, \"readDetails\", user);\n \n@@ -597,15 +587,11 @@ router.post(\n     const { user } = ctx.state.auth;\n     user.setNotificationEventType(eventType, true);\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"users.update\",\n-        userId: user.id,\n-        changes: user.changeset,\n-      },\n-      { transaction }\n-    );\n+    await Event.createFromContext(ctx, {\n+      name: \"users.update\",\n+      userId: user.id,\n+      changes: user.changeset,\n+    });\n     await user.save({ transaction });\n \n     ctx.body = {\n@@ -625,15 +611,11 @@ router.post(\n     const { user } = ctx.state.auth;\n     user.setNotificationEventType(eventType, false);\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \"users.update\",\n-        userId: user.id,\n-        changes: user.changeset,\n-      },\n-      { transaction }\n-    );\n+    await Event.createFromContext(ctx, {\n+      name: \"users.update\",\n+      userId: user.id,\n+      changes: user.changeset,\n+    });\n     await user.save({ transaction });\n \n     ctx.body = {\n\ndiff --git a/server/types.ts b/server/types.ts\nindex 49c0495722a3..56a866a94e9a 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -84,11 +84,12 @@ export interface APIContext<ReqT = BaseReq, ResT = BaseRes>\n type BaseEvent<T extends Model> = {\n   teamId: string;\n   actorId: string;\n-  ip: string;\n+  ip: string | null;\n+  authType?: AuthenticationType | null;\n   changes?: {\n     attributes: Partial<InferAttributes<T>>;\n     previous: Partial<InferAttributes<T>>;\n-  };\n+  } | null;\n };\n \n export type ApiKeyEvent = BaseEvent<ApiKey> & {\n",
    "test_patch": "diff --git a/server/commands/revisionCreator.test.ts b/server/commands/revisionCreator.test.ts\nindex 8fecdfc91fb0..015cceefb586 100644\n--- a/server/commands/revisionCreator.test.ts\n+++ b/server/commands/revisionCreator.test.ts\n@@ -1,10 +1,9 @@\n import { Event } from \"@server/models\";\n import { buildDocument, buildUser } from \"@server/test/factories\";\n+import { AuthenticationType, DocumentEvent } from \"@server/types\";\n import revisionCreator from \"./revisionCreator\";\n \n describe(\"revisionCreator\", () => {\n-  const ip = \"127.0.0.1\";\n-\n   it(\"should create revision model from document\", async () => {\n     const user = await buildUser();\n     const document = await buildDocument({\n@@ -14,7 +13,10 @@ describe(\"revisionCreator\", () => {\n     const revision = await revisionCreator({\n       document,\n       user,\n-      ip,\n+      event: {\n+        name: \"documents.update\",\n+        authType: AuthenticationType.APP,\n+      } as DocumentEvent,\n     });\n     const event = await Event.findLatest({\n       teamId: user.teamId,\n@@ -25,5 +27,6 @@ describe(\"revisionCreator\", () => {\n     expect(event!.name).toEqual(\"revisions.create\");\n     expect(event!.modelId).toEqual(revision.id);\n     expect(event!.createdAt).toEqual(document.updatedAt);\n+    expect(event!.authType).toEqual(AuthenticationType.APP);\n   });\n });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7807",
    "pr_id": 7807,
    "issue_id": 7679,
    "repo": "outline/outline",
    "problem_statement": "Allow searching by email address in @mention\nIt should be possible to use email address for search here - in order to achieve this we might need to return email addresses to the client for more user types, my suggestion is:\r\n\r\n- Admin, members get to see workspace emails\r\n- Viewers, guests do not\r\n",
    "issue_word_count": 44,
    "test_files_count": 1,
    "non_test_files_count": 10,
    "pr_changed_files": [
      "app/components/HoverPreview/HoverPreview.tsx",
      "app/components/HoverPreview/HoverPreviewMention.tsx",
      "app/editor/extensions/MentionMenu.tsx",
      "server/policies/user.ts",
      "server/policies/utils.ts",
      "server/presenters/unfurl.ts",
      "server/presenters/user.ts",
      "server/routes/api/urls/urls.ts",
      "server/routes/api/users/users.test.ts",
      "server/routes/api/users/users.ts",
      "shared/types.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/users/users.test.ts"
    ],
    "base_commit": "85957c10b82afe92270e3510d1600fdc6b0b7f88",
    "head_commit": "87a7bb2245e2d53c708f936b2c208005066a0b28",
    "repo_url": "https://github.com/outline/outline/pull/7807",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7807",
    "dockerfile": "",
    "pr_merged_at": "2024-10-22T14:54:12.000Z",
    "patch": "diff --git a/app/components/HoverPreview/HoverPreview.tsx b/app/components/HoverPreview/HoverPreview.tsx\nindex 4d1c6ec0bd3e..c6a79d8f6e89 100644\n--- a/app/components/HoverPreview/HoverPreview.tsx\n+++ b/app/components/HoverPreview/HoverPreview.tsx\n@@ -125,6 +125,7 @@ function HoverPreviewDesktop({ element, data, dataLoading, onClose }: Props) {\n                 avatarUrl={data.avatarUrl}\n                 color={data.color}\n                 lastActive={data.lastActive}\n+                email={data.email}\n               />\n             ) : data.type === UnfurlResourceType.Document ? (\n               <HoverPreviewDocument\n\ndiff --git a/app/components/HoverPreview/HoverPreviewMention.tsx b/app/components/HoverPreview/HoverPreviewMention.tsx\nindex 322d50cceade..4c44fdab3d85 100644\n--- a/app/components/HoverPreview/HoverPreviewMention.tsx\n+++ b/app/components/HoverPreview/HoverPreviewMention.tsx\n@@ -7,7 +7,7 @@ import { Preview, Title, Info, Card, CardContent } from \"./Components\";\n type Props = Omit<UnfurlResponse[UnfurlResourceType.Mention], \"type\">;\n \n const HoverPreviewMention = React.forwardRef(function _HoverPreviewMention(\n-  { avatarUrl, name, lastActive, color }: Props,\n+  { avatarUrl, name, lastActive, color, email }: Props,\n   ref: React.Ref<HTMLDivElement>\n ) {\n   return (\n@@ -25,6 +25,7 @@ const HoverPreviewMention = React.forwardRef(function _HoverPreviewMention(\n             />\n             <Flex column gap={2} justify=\"center\">\n               <Title>{name}</Title>\n+              {email && <Info>{email}</Info>}\n               <Info>{lastActive}</Info>\n             </Flex>\n           </Flex>\n\ndiff --git a/app/editor/extensions/MentionMenu.tsx b/app/editor/extensions/MentionMenu.tsx\nindex ffbf16cfe75e..4e9fc1c68eff 100644\n--- a/app/editor/extensions/MentionMenu.tsx\n+++ b/app/editor/extensions/MentionMenu.tsx\n@@ -8,7 +8,7 @@ export default class MentionMenuExtension extends Suggestion {\n   get defaultOptions() {\n     return {\n       // ported from https://github.com/tc39/proposal-regexp-unicode-property-escapes#unicode-aware-version-of-w\n-      openRegex: /(?:^|\\s|\\()@([\\p{L}\\p{M}\\d\\s{1}]+)?$/u,\n+      openRegex: /(?:^|\\s|\\()@([\\p{L}\\p{M}\\d\\s{1}@\\.]+)?$/u,\n       closeRegex: /(?:^|\\s|\\()@(([\\p{L}\\p{M}\\d]*\\s{2})|(\\s+[\\p{L}\\p{M}\\d]+))$/u,\n     };\n   }\n\ndiff --git a/server/policies/user.ts b/server/policies/user.ts\nindex e254a3be5918..af8b7d897fb5 100644\n--- a/server/policies/user.ts\n+++ b/server/policies/user.ts\n@@ -1,7 +1,14 @@\n import { TeamPreference } from \"@shared/types\";\n import { User, Team } from \"@server/models\";\n import { allow } from \"./cancan\";\n-import { and, isTeamAdmin, isTeamModel, isTeamMutable, or } from \"./utils\";\n+import {\n+  and,\n+  isTeamAdmin,\n+  isTeamMember,\n+  isTeamModel,\n+  isTeamMutable,\n+  or,\n+} from \"./utils\";\n \n allow(User, \"read\", User, isTeamModel);\n \n@@ -31,6 +38,15 @@ allow(User, [\"update\", \"readDetails\", \"listApiKeys\"], User, (actor, user) =>\n   )\n );\n \n+allow(User, \"readEmail\", User, (actor, user) =>\n+  or(\n+    //\n+    isTeamAdmin(actor, user),\n+    isTeamMember(actor, user),\n+    actor.id === user?.id\n+  )\n+);\n+\n allow(User, \"delete\", User, (actor, user) =>\n   or(\n     isTeamAdmin(actor, user),\n\ndiff --git a/server/policies/utils.ts b/server/policies/utils.ts\nindex 5ed3399b98d5..d7d2d847ec7d 100644\n--- a/server/policies/utils.ts\n+++ b/server/policies/utils.ts\n@@ -72,6 +72,17 @@ export function isTeamAdmin(\n   return !!and(isTeamModel(actor, model), actor.isAdmin);\n }\n \n+/**\n+ * Check if the actor is a member of the team.\n+ *\n+ * @param actor The actor to check\n+ * @param model The model to check\n+ * @returns True if the actor is a member of the team the model belongs to\n+ */\n+export function isTeamMember(actor: User, model: Model | null | undefined) {\n+  return !!and(isTeamModel(actor, model), actor.isMember);\n+}\n+\n /**\n  * Check the actors team is mutable, meaning the team models can be modified.\n  *\n\ndiff --git a/server/presenters/unfurl.ts b/server/presenters/unfurl.ts\nindex c9fc1363729c..0a7826bbee80 100644\n--- a/server/presenters/unfurl.ts\n+++ b/server/presenters/unfurl.ts\n@@ -6,10 +6,13 @@ import { Document, User, View } from \"@server/models\";\n import { opts } from \"@server/utils/i18n\";\n import { GitHubUtils } from \"plugins/github/shared/GitHubUtils\";\n \n-async function presentUnfurl(data: Record<string, any>) {\n+async function presentUnfurl(\n+  data: Record<string, any>,\n+  options?: { includeEmail: boolean }\n+) {\n   switch (data.type) {\n     case UnfurlResourceType.Mention:\n-      return presentMention(data);\n+      return presentMention(data, options);\n     case UnfurlResourceType.Document:\n       return presentDocument(data);\n     case UnfurlResourceType.PR:\n@@ -32,7 +35,8 @@ const presentOEmbed = (\n });\n \n const presentMention = async (\n-  data: Record<string, any>\n+  data: Record<string, any>,\n+  options?: { includeEmail: boolean }\n ): Promise<UnfurlResponse[UnfurlResourceType.Mention]> => {\n   const user: User = data.user;\n   const document: Document = data.document;\n@@ -43,6 +47,7 @@ const presentMention = async (\n   return {\n     type: UnfurlResourceType.Mention,\n     name: user.name,\n+    email: options && options.includeEmail ? user.email : null,\n     avatarUrl: user.avatarUrl,\n     color: user.color,\n     lastActive: `${lastOnlineInfo} • ${lastViewedInfo}`,\n\ndiff --git a/server/presenters/user.ts b/server/presenters/user.ts\nindex d01d940f3cf1..c877a8603941 100644\n--- a/server/presenters/user.ts\n+++ b/server/presenters/user.ts\n@@ -4,6 +4,7 @@ import { User } from \"@server/models\";\n \n type Options = {\n   includeDetails?: boolean;\n+  includeEmail?: boolean;\n };\n \n type UserPresentation = {\n@@ -45,5 +46,9 @@ export default function presentUser(\n     userData.notificationSettings = user.notificationSettings;\n   }\n \n+  if (options.includeEmail) {\n+    userData.email = user.email;\n+  }\n+\n   return userData;\n }\n\ndiff --git a/server/routes/api/urls/urls.ts b/server/routes/api/urls/urls.ts\nindex 55dfb220b789..e77b985128b8 100644\n--- a/server/routes/api/urls/urls.ts\n+++ b/server/routes/api/urls/urls.ts\n@@ -10,7 +10,7 @@ import auth from \"@server/middlewares/authentication\";\n import { rateLimiter } from \"@server/middlewares/rateLimiter\";\n import validate from \"@server/middlewares/validate\";\n import { Document, Share, Team, User } from \"@server/models\";\n-import { authorize } from \"@server/policies\";\n+import { authorize, can } from \"@server/policies\";\n import presentUnfurl from \"@server/presenters/unfurl\";\n import { APIContext, Unfurl } from \"@server/types\";\n import { CacheHelper } from \"@server/utils/CacheHelper\";\n@@ -53,11 +53,14 @@ router.post(\n       authorize(actor, \"read\", user);\n       authorize(actor, \"read\", document);\n \n-      ctx.body = await presentUnfurl({\n-        type: UnfurlResourceType.Mention,\n-        user,\n-        document,\n-      });\n+      ctx.body = await presentUnfurl(\n+        {\n+          type: UnfurlResourceType.Mention,\n+          user,\n+          document,\n+        },\n+        { includeEmail: !!can(actor, \"readEmail\", user) }\n+      );\n       return;\n     }\n \n\ndiff --git a/server/routes/api/users/users.ts b/server/routes/api/users/users.ts\nindex a745ff21fd75..71adf6467ad1 100644\n--- a/server/routes/api/users/users.ts\n+++ b/server/routes/api/users/users.ts\n@@ -124,11 +124,16 @@ router.post(\n     if (query) {\n       where = {\n         ...where,\n-        [Op.and]: [\n-          Sequelize.literal(\n-            `unaccent(LOWER(name)) like unaccent(LOWER(:query))`\n-          ),\n-        ],\n+        [Op.and]: {\n+          [Op.or]: [\n+            Sequelize.literal(\n+              `unaccent(LOWER(email)) like unaccent(LOWER(:query))`\n+            ),\n+            Sequelize.literal(\n+              `unaccent(LOWER(name)) like unaccent(LOWER(:query))`\n+            ),\n+          ],\n+        },\n       };\n     }\n \n@@ -167,6 +172,7 @@ router.post(\n       pagination: { ...ctx.state.pagination, total },\n       data: users.map((user) =>\n         presentUser(user, {\n+          includeEmail: !!can(actor, \"readEmail\", user),\n           includeDetails: !!can(actor, \"readDetails\", user),\n         })\n       ),\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex 5a6488cb0761..627f6f0fd1a5 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -335,6 +335,8 @@ export type UnfurlResponse = {\n     type: UnfurlResourceType.Mention;\n     /** Mentioned user's name */\n     name: string;\n+    /** Mentioned user's email */\n+    email: string | null;\n     /** Mentioned user's avatar URL */\n     avatarUrl: string | null;\n     /** Used to create mentioned user's avatar if no avatar URL provided */\n",
    "test_patch": "diff --git a/server/routes/api/users/users.test.ts b/server/routes/api/users/users.test.ts\nindex 0d835987a76c..33f7bafb62fb 100644\n--- a/server/routes/api/users/users.test.ts\n+++ b/server/routes/api/users/users.test.ts\n@@ -18,6 +18,24 @@ afterAll(() => {\n });\n \n describe(\"#users.list\", () => {\n+  it(\"should return users whose emails match the query\", async () => {\n+    const user = await buildUser({\n+      name: \"John Doe\",\n+      email: \"john.doe@example.com\",\n+    });\n+\n+    const res = await server.post(\"/api/users.list\", {\n+      body: {\n+        query: \"john.doe@e\",\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).toHaveLength(1);\n+    expect(body.data[0].id).toEqual(user.id);\n+  });\n+\n   it(\"should allow filtering by user name\", async () => {\n     const user = await buildUser({\n       name: \"Tèster\",\n@@ -189,20 +207,142 @@ describe(\"#users.list\", () => {\n     expect(body.data[0].id).toEqual(user.id);\n   });\n \n-  it(\"should require admin for detailed info\", async () => {\n+  it(\"should restrict guest from viewing other user's email\", async () => {\n     const team = await buildTeam();\n-    await buildAdmin({ teamId: team.id });\n-    const user = await buildUser({ teamId: team.id });\n+    await buildUser({ teamId: team.id });\n+    const guest = await buildUser({ teamId: team.id, role: UserRole.Guest });\n     const res = await server.post(\"/api/users.list\", {\n       body: {\n-        token: user.getJwtToken(),\n+        token: guest.getJwtToken(),\n       },\n     });\n     const body = await res.json();\n     expect(res.status).toEqual(200);\n-    expect(body.data.length).toEqual(2);\n+    expect(body.data).toHaveLength(2);\n     expect(body.data[0].email).toEqual(undefined);\n-    expect(body.data[1].email).toEqual(user.email);\n+    expect(body.data[1].email).toEqual(guest.email);\n+  });\n+\n+  it(\"should restrict viewer from viewing other user's email\", async () => {\n+    const team = await buildTeam();\n+    await buildUser({ teamId: team.id });\n+    const viewer = await buildUser({ teamId: team.id, role: UserRole.Viewer });\n+    const res = await server.post(\"/api/users.list\", {\n+      body: {\n+        token: viewer.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).toHaveLength(2);\n+    expect(body.data[0].email).toEqual(undefined);\n+    expect(body.data[1].email).toEqual(viewer.email);\n+  });\n+\n+  it(\"should allow member to view other user's email\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const member = await buildUser({ teamId: team.id, role: UserRole.Member });\n+    const res = await server.post(\"/api/users.list\", {\n+      body: {\n+        token: member.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).toHaveLength(2);\n+    expect(body.data[0].email).toEqual(user.email);\n+    expect(body.data[1].email).toEqual(member.email);\n+  });\n+\n+  it(\"should restrict guest from viewing other user's details\", async () => {\n+    const team = await buildTeam();\n+    await buildUser({ teamId: team.id });\n+    const guest = await buildUser({ teamId: team.id, role: UserRole.Guest });\n+    const res = await server.post(\"/api/users.list\", {\n+      body: {\n+        token: guest.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).toHaveLength(2);\n+    expect(body.data[0].language).toEqual(undefined);\n+    expect(body.data[0].preferences).toEqual(undefined);\n+    expect(body.data[0].notificationSettings).toEqual(undefined);\n+    expect(body.data[1].language).toEqual(guest.language);\n+    expect(body.data[1].preferences).toEqual(guest.preferences);\n+    expect(body.data[1].notificationSettings).toEqual(\n+      guest.notificationSettings\n+    );\n+  });\n+\n+  it(\"should restrict viewer from viewing other user's details\", async () => {\n+    const team = await buildTeam();\n+    await buildUser({ teamId: team.id });\n+    const viewer = await buildUser({ teamId: team.id, role: UserRole.Viewer });\n+    const res = await server.post(\"/api/users.list\", {\n+      body: {\n+        token: viewer.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).toHaveLength(2);\n+    expect(body.data[0].language).toEqual(undefined);\n+    expect(body.data[0].preferences).toEqual(undefined);\n+    expect(body.data[0].notificationSettings).toEqual(undefined);\n+    expect(body.data[1].language).toEqual(viewer.language);\n+    expect(body.data[1].preferences).toEqual(viewer.preferences);\n+    expect(body.data[1].notificationSettings).toEqual(\n+      viewer.notificationSettings\n+    );\n+  });\n+\n+  it(\"should restrict member from viewing other user's details\", async () => {\n+    const team = await buildTeam();\n+    await buildUser({ teamId: team.id });\n+    const member = await buildUser({ teamId: team.id, role: UserRole.Member });\n+    const res = await server.post(\"/api/users.list\", {\n+      body: {\n+        token: member.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).toHaveLength(2);\n+    expect(body.data[0].language).toEqual(undefined);\n+    expect(body.data[0].preferences).toEqual(undefined);\n+    expect(body.data[0].notificationSettings).toEqual(undefined);\n+    expect(body.data[1].language).toEqual(member.language);\n+    expect(body.data[1].preferences).toEqual(member.preferences);\n+    expect(body.data[1].notificationSettings).toEqual(\n+      member.notificationSettings\n+    );\n+  });\n+\n+  it(\"should allow admin to view other user's details\", async () => {\n+    const team = await buildTeam();\n+    const admin = await buildAdmin({ teamId: team.id });\n+    const user = await buildUser({ teamId: team.id });\n+    const res = await server.post(\"/api/users.list\", {\n+      body: {\n+        token: admin.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).toHaveLength(2);\n+    expect(body.data[0].language).toEqual(user.language);\n+    expect(body.data[0].preferences).toEqual(user.preferences);\n+    expect(body.data[0].notificationSettings).toEqual(\n+      user.notificationSettings\n+    );\n+    expect(body.data[1].language).toEqual(admin.language);\n+    expect(body.data[1].preferences).toEqual(admin.preferences);\n+    expect(body.data[1].notificationSettings).toEqual(\n+      admin.notificationSettings\n+    );\n   });\n });\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7790",
    "pr_id": 7790,
    "issue_id": 7137,
    "repo": "outline/outline",
    "problem_statement": "Comment reactions\nBadly missing out on comment reactions. We already have the picker ready so can reuse that.",
    "issue_word_count": 18,
    "test_files_count": 5,
    "non_test_files_count": 59,
    "pr_changed_files": [
      "app/actions/definitions/comments.tsx",
      "app/components/CollectionDescription.tsx",
      "app/components/Emoji.tsx",
      "app/components/ErrorBoundary.tsx",
      "app/components/GroupListItem.tsx",
      "app/components/HoverPreview/Components.tsx",
      "app/components/IconPicker/components/Emoji.tsx",
      "app/components/IconPicker/components/GridTemplate.tsx",
      "app/components/IconPicker/components/SkinTonePicker.tsx",
      "app/components/List/Item.tsx",
      "app/components/Reactions/Reaction.tsx",
      "app/components/Reactions/ReactionList.tsx",
      "app/components/Reactions/ReactionPicker.tsx",
      "app/components/Reactions/ViewReactionsDialog.tsx",
      "app/components/Table.tsx",
      "app/components/WebsocketProvider.tsx",
      "app/hooks/useHover.ts",
      "app/menus/CommentMenu.tsx",
      "app/models/Comment.ts",
      "app/scenes/Document/components/CommentForm.tsx",
      "app/scenes/Document/components/CommentThread.tsx",
      "app/scenes/Document/components/CommentThreadItem.tsx",
      "app/scenes/Document/components/Comments.tsx",
      "app/scenes/Document/components/Editor.tsx",
      "app/scenes/Search/components/RecentSearchListItem.tsx",
      "app/scenes/Settings/components/DropToImport.tsx",
      "app/scenes/Settings/components/ImageInput.tsx",
      "app/types.ts",
      "app/typings/styled-components.d.ts",
      "package.json",
      "plugins/webhooks/server/tasks/DeliverWebhookTask.ts",
      "server/emails/templates/components/Diff.tsx",
      "server/migrations/20241013080608-create-reactions.js",
      "server/models/Comment.ts",
      "server/models/Reaction.ts",
      "server/models/index.ts",
      "server/policies/comment.ts",
      "server/policies/index.ts",
      "server/policies/reaction.ts",
      "server/presenters/comment.ts",
      "server/presenters/index.ts",
      "server/presenters/reaction.ts",
      "server/queues/processors/WebsocketsProcessor.ts",
      "server/routes/api/comments/__snapshots__/comments.test.ts.snap",
      "server/routes/api/comments/comments.test.ts",
      "server/routes/api/comments/comments.ts",
      "server/routes/api/comments/schema.ts",
      "server/routes/api/index.ts",
      "server/routes/api/reactions/__snapshots__/reactions.test.ts.snap",
      "server/routes/api/reactions/index.ts",
      "server/routes/api/reactions/reactions.test.ts",
      "server/routes/api/reactions/reactions.ts",
      "server/routes/api/reactions/schema.ts",
      "server/test/factories.ts",
      "server/types.ts",
      "shared/editor/components/Frame.tsx",
      "shared/editor/components/Image.tsx",
      "shared/editor/components/Styles.ts",
      "shared/editor/components/Widget.tsx",
      "shared/i18n/locales/en_US/translation.json",
      "shared/styles/theme.ts",
      "shared/types.ts",
      "shared/utils/emoji.ts",
      "yarn.lock"
    ],
    "pr_changed_test_files": [
      "server/routes/api/comments/__snapshots__/comments.test.ts.snap",
      "server/routes/api/comments/comments.test.ts",
      "server/routes/api/reactions/__snapshots__/reactions.test.ts.snap",
      "server/routes/api/reactions/reactions.test.ts",
      "server/test/factories.ts"
    ],
    "base_commit": "d87e1f626476a2a6d601b8d0f34878f6daaebabf",
    "head_commit": "b14f5f9d30bcc696b3ebd3ada4185b1eb9c30d6a",
    "repo_url": "https://github.com/outline/outline/pull/7790",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7790",
    "dockerfile": "",
    "pr_merged_at": "2024-11-02T17:58:03.000Z",
    "patch": "diff --git a/app/actions/definitions/comments.tsx b/app/actions/definitions/comments.tsx\nindex 0ed6206eb0e2..2f430dcd291e 100644\n--- a/app/actions/definitions/comments.tsx\n+++ b/app/actions/definitions/comments.tsx\n@@ -1,9 +1,10 @@\n-import { DoneIcon, TrashIcon } from \"outline-icons\";\n+import { DoneIcon, SmileyIcon, TrashIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { toast } from \"sonner\";\n import stores from \"~/stores\";\n import Comment from \"~/models/Comment\";\n import CommentDeleteDialog from \"~/components/CommentDeleteDialog\";\n+import ViewReactionsDialog from \"~/components/Reactions/ViewReactionsDialog\";\n import history from \"~/utils/history\";\n import { createAction } from \"..\";\n import { DocumentSection } from \"../sections\";\n@@ -88,3 +89,27 @@ export const unresolveCommentFactory = ({\n       onUnresolve();\n     },\n   });\n+\n+export const viewCommentReactionsFactory = ({\n+  comment,\n+}: {\n+  comment: Comment;\n+}) =>\n+  createAction({\n+    name: ({ t }) => `${t(\"View reactions\")}`,\n+    analyticsName: \"View comment reactions\",\n+    section: DocumentSection,\n+    icon: <SmileyIcon />,\n+    visible: () =>\n+      stores.policies.abilities(comment.id).read &&\n+      comment.reactions.length > 0,\n+    perform: ({ t, event }) => {\n+      event?.preventDefault();\n+      event?.stopPropagation();\n+\n+      stores.dialogs.openModal({\n+        title: t(\"Reactions\"),\n+        content: <ViewReactionsDialog model={comment} />,\n+      });\n+    },\n+  });\n\ndiff --git a/app/components/CollectionDescription.tsx b/app/components/CollectionDescription.tsx\nindex fcfe25d27d8d..b891bc3de3d4 100644\n--- a/app/components/CollectionDescription.tsx\n+++ b/app/components/CollectionDescription.tsx\n@@ -226,7 +226,7 @@ const Input = styled.div`\n   }\n \n   &[data-editing=\"true\"] {\n-    background: ${s(\"secondaryBackground\")};\n+    background: ${s(\"backgroundSecondary\")};\n   }\n \n   .block-menu-trigger,\n\ndiff --git a/app/components/Emoji.tsx b/app/components/Emoji.tsx\nnew file mode 100644\nindex 000000000000..5c5441e9dc2a\n--- /dev/null\n+++ b/app/components/Emoji.tsx\n@@ -0,0 +1,20 @@\n+import styled from \"styled-components\";\n+import { s } from \"@shared/styles\";\n+\n+type Props = {\n+  /** Width of the containing element. */\n+  width?: number | string;\n+  /** Height of the containing element. */\n+  height?: number | string;\n+  /** Controls the rendered emoji size. */\n+  size?: number;\n+};\n+\n+export const Emoji = styled.span<Props>`\n+  font-family: ${s(\"fontFamilyEmoji\")};\n+  width: ${({ width }) =>\n+    typeof width === \"string\" ? width : width ? `${width}px` : \"auto\"};\n+  height: ${({ height }) =>\n+    typeof height === \"string\" ? height : height ? `${height}px` : \"auto\"};\n+  font-size: ${({ size }) => size && `${size}px`};\n+`;\n\ndiff --git a/app/components/ErrorBoundary.tsx b/app/components/ErrorBoundary.tsx\nindex e2a0dcd1c971..207da6a698bb 100644\n--- a/app/components/ErrorBoundary.tsx\n+++ b/app/components/ErrorBoundary.tsx\n@@ -138,7 +138,7 @@ class ErrorBoundary extends React.Component<Props> {\n }\n \n const Pre = styled.pre`\n-  background: ${s(\"secondaryBackground\")};\n+  background: ${s(\"backgroundSecondary\")};\n   padding: 16px;\n   border-radius: 4px;\n   font-size: 12px;\n\ndiff --git a/app/components/GroupListItem.tsx b/app/components/GroupListItem.tsx\nindex ac18bc1b6fb8..808152580812 100644\n--- a/app/components/GroupListItem.tsx\n+++ b/app/components/GroupListItem.tsx\n@@ -75,7 +75,7 @@ const Image = styled(Flex)`\n   justify-content: center;\n   width: 32px;\n   height: 32px;\n-  background: ${s(\"secondaryBackground\")};\n+  background: ${s(\"backgroundSecondary\")};\n   border-radius: 32px;\n `;\n \n\ndiff --git a/app/components/HoverPreview/Components.tsx b/app/components/HoverPreview/Components.tsx\nindex 8f2b1dffc97d..f56cf1362584 100644\n--- a/app/components/HoverPreview/Components.tsx\n+++ b/app/components/HoverPreview/Components.tsx\n@@ -61,7 +61,7 @@ export const Label = styled(Text).attrs({ size: \"xsmall\", weight: \"bold\" })<{\n   color?: string;\n }>`\n   background-color: ${(props) =>\n-    props.color ?? props.theme.secondaryBackground};\n+    props.color ?? props.theme.backgroundSecondary};\n   color: ${(props) =>\n     props.color ? getTextColor(props.color) : props.theme.text};\n   width: fit-content;\n\ndiff --git a/app/components/IconPicker/components/Emoji.tsx b/app/components/IconPicker/components/Emoji.tsx\ndeleted file mode 100644\nindex 2223147282f5..000000000000\n--- a/app/components/IconPicker/components/Emoji.tsx\n+++ /dev/null\n@@ -1,8 +0,0 @@\n-import styled from \"styled-components\";\n-import { s } from \"@shared/styles\";\n-\n-export const Emoji = styled.span`\n-  font-family: ${s(\"fontFamilyEmoji\")};\n-  width: 24px;\n-  height: 24px;\n-`;\n\ndiff --git a/app/components/IconPicker/components/GridTemplate.tsx b/app/components/IconPicker/components/GridTemplate.tsx\nindex c3abc3589c64..832a5e1c7068 100644\n--- a/app/components/IconPicker/components/GridTemplate.tsx\n+++ b/app/components/IconPicker/components/GridTemplate.tsx\n@@ -4,9 +4,9 @@ import React from \"react\";\n import styled from \"styled-components\";\n import { IconType } from \"@shared/types\";\n import { IconLibrary } from \"@shared/utils/IconLibrary\";\n+import { Emoji } from \"~/components/Emoji\";\n import Text from \"~/components/Text\";\n import { TRANSLATED_CATEGORIES } from \"../utils\";\n-import { Emoji } from \"./Emoji\";\n import Grid from \"./Grid\";\n import { IconButton } from \"./IconButton\";\n \n@@ -85,7 +85,9 @@ const GridTemplate = (\n             key={item.id}\n             onClick={() => onIconSelect({ id: item.id, value: item.value })}\n           >\n-            <Emoji>{item.value}</Emoji>\n+            <Emoji width={24} height={24}>\n+              {item.value}\n+            </Emoji>\n           </IconButton>\n         );\n       });\n\ndiff --git a/app/components/IconPicker/components/SkinTonePicker.tsx b/app/components/IconPicker/components/SkinTonePicker.tsx\nindex 2061fd302d4a..bea78e34511f 100644\n--- a/app/components/IconPicker/components/SkinTonePicker.tsx\n+++ b/app/components/IconPicker/components/SkinTonePicker.tsx\n@@ -5,10 +5,10 @@ import styled from \"styled-components\";\n import { depths, s } from \"@shared/styles\";\n import { EmojiSkinTone } from \"@shared/types\";\n import { getEmojiVariants } from \"@shared/utils/emoji\";\n+import { Emoji } from \"~/components/Emoji\";\n import Flex from \"~/components/Flex\";\n import NudeButton from \"~/components/NudeButton\";\n import { hover } from \"~/styles\";\n-import { Emoji } from \"./Emoji\";\n import { IconButton } from \"./IconButton\";\n \n const SkinTonePicker = ({\n@@ -26,7 +26,7 @@ const SkinTonePicker = ({\n   );\n \n   const menu = useMenuState({\n-    placement: \"bottom\",\n+    placement: \"bottom-end\",\n   });\n \n   const handleSkinClick = React.useCallback(\n@@ -43,7 +43,9 @@ const SkinTonePicker = ({\n         <MenuItem {...menu} key={emoji.value}>\n           {(menuprops) => (\n             <IconButton {...menuprops} onClick={() => handleSkinClick(eskin)}>\n-              <Emoji>{emoji.value}</Emoji>\n+              <Emoji width={24} height={24}>\n+                {emoji.value}\n+              </Emoji>\n             </IconButton>\n           )}\n         </MenuItem>\n\ndiff --git a/app/components/List/Item.tsx b/app/components/List/Item.tsx\nindex 1ea2d2d04206..5dfe31560f82 100644\n--- a/app/components/List/Item.tsx\n+++ b/app/components/List/Item.tsx\n@@ -192,7 +192,7 @@ const Wrapper = styled.a<{\n   &:focus,\n   &:focus-within {\n     background: ${(props) =>\n-      props.$hover ? props.theme.secondaryBackground : \"inherit\"};\n+      props.$hover ? props.theme.backgroundSecondary : \"inherit\"};\n   }\n \n   cursor: ${(props) =>\n\ndiff --git a/app/components/Reactions/Reaction.tsx b/app/components/Reactions/Reaction.tsx\nnew file mode 100644\nindex 000000000000..0ed8d0799eed\n--- /dev/null\n+++ b/app/components/Reactions/Reaction.tsx\n@@ -0,0 +1,173 @@\n+import { observer } from \"mobx-react\";\n+import { transparentize } from \"polished\";\n+import React from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import styled, { css } from \"styled-components\";\n+import { s } from \"@shared/styles\";\n+import type { ReactionSummary } from \"@shared/types\";\n+import { getEmojiId } from \"@shared/utils/emoji\";\n+import User from \"~/models/User\";\n+import { Emoji } from \"~/components/Emoji\";\n+import Flex from \"~/components/Flex\";\n+import NudeButton from \"~/components/NudeButton\";\n+import Text from \"~/components/Text\";\n+import Tooltip from \"~/components/Tooltip\";\n+import useCurrentUser from \"~/hooks/useCurrentUser\";\n+import { hover } from \"~/styles\";\n+\n+type Props = {\n+  /** Thin reaction data - contains the emoji & active user ids for this reaction. */\n+  reaction: ReactionSummary;\n+  /** Users who reacted using this emoji. */\n+  reactedUsers: User[];\n+  /** Whether the emoji button should be disabled (prevents add/remove events). */\n+  disabled: boolean;\n+  /** Callback when the user intends to add the reaction. */\n+  onAddReaction: (emoji: string) => Promise<void>;\n+  /** Callback when the user intends to remove the reaction. */\n+  onRemoveReaction: (emoji: string) => Promise<void>;\n+};\n+\n+const useTooltipContent = ({\n+  reactedUsers,\n+  currUser,\n+  emoji,\n+  active,\n+}: {\n+  reactedUsers: User[];\n+  currUser: User;\n+  emoji: string;\n+  active: boolean;\n+}) => {\n+  const { t } = useTranslation();\n+\n+  if (!reactedUsers.length) {\n+    return;\n+  }\n+\n+  const transformedEmoji = `:${getEmojiId(emoji)}:`;\n+\n+  switch (reactedUsers.length) {\n+    case 1: {\n+      return t(\"{{ username }} reacted with {{ emoji }}\", {\n+        username: active ? t(\"You\") : reactedUsers[0].name,\n+        emoji: transformedEmoji,\n+      });\n+    }\n+\n+    case 2: {\n+      const firstUsername = active ? t(\"You\") : reactedUsers[0].name;\n+      const secondUsername = active\n+        ? reactedUsers.find((user) => user.id !== currUser.id)?.name\n+        : reactedUsers[1].name;\n+\n+      return t(\n+        \"{{ firstUsername }} and {{ secondUsername }} reacted with {{ emoji }}\",\n+        {\n+          firstUsername,\n+          secondUsername,\n+          emoji: transformedEmoji,\n+        }\n+      );\n+    }\n+\n+    default: {\n+      const firstUsername = active ? t(\"You\") : reactedUsers[0].name;\n+      const count = reactedUsers.length - 1;\n+\n+      return t(\n+        \"{{ firstUsername }} and {{ count }} others reacted with {{ emoji }}\",\n+        {\n+          firstUsername,\n+          count,\n+          emoji: transformedEmoji,\n+        }\n+      );\n+    }\n+  }\n+};\n+\n+const Reaction: React.FC<Props> = ({\n+  reaction,\n+  reactedUsers,\n+  disabled,\n+  onAddReaction,\n+  onRemoveReaction,\n+}) => {\n+  const user = useCurrentUser();\n+\n+  const active = reaction.userIds.includes(user.id);\n+\n+  const tooltipContent = useTooltipContent({\n+    reactedUsers,\n+    currUser: user,\n+    emoji: reaction.emoji,\n+    active,\n+  });\n+\n+  const handleClick = React.useCallback(\n+    (event: React.SyntheticEvent<HTMLButtonElement>) => {\n+      event.stopPropagation();\n+      active\n+        ? void onRemoveReaction(reaction.emoji)\n+        : void onAddReaction(reaction.emoji);\n+    },\n+    [reaction, active, onAddReaction, onRemoveReaction]\n+  );\n+\n+  const DisplayedEmoji = React.useMemo(\n+    () => (\n+      <EmojiButton disabled={disabled} $active={active} onClick={handleClick}>\n+        <Flex gap={6} justify=\"center\" align=\"center\">\n+          <Emoji size={15}>{reaction.emoji}</Emoji>\n+          <Count weight=\"xbold\">{reaction.userIds.length}</Count>\n+        </Flex>\n+      </EmojiButton>\n+    ),\n+    [reaction.emoji, reaction.userIds, disabled, active, handleClick]\n+  );\n+\n+  return tooltipContent ? (\n+    <Tooltip content={tooltipContent} delay={250} placement=\"bottom\">\n+      {DisplayedEmoji}\n+    </Tooltip>\n+  ) : (\n+    <>{DisplayedEmoji}</>\n+  );\n+};\n+\n+const EmojiButton = styled(NudeButton)<{\n+  $active: boolean;\n+  disabled: boolean;\n+}>`\n+  width: auto;\n+  height: 28px;\n+  padding: 6px;\n+  border-radius: 12px;\n+  transition: ${s(\"backgroundTransition\")};\n+  background: ${s(\"backgroundTertiary\")};\n+  pointer-events: ${({ disabled }) => disabled && \"none\"};\n+\n+  &: ${hover} {\n+    background: ${s(\"backgroundQuaternary\")};\n+  }\n+\n+  ${(props) =>\n+    props.$active &&\n+    css`\n+      background: ${transparentize(0.7, props.theme.accent)};\n+\n+      &: ${hover} {\n+        background: ${transparentize(0.5, props.theme.accent)};\n+      }\n+    `}\n+`;\n+\n+const Count = styled(Text)`\n+  font-size: 11px;\n+  color: ${s(\"buttonNeutralText\")};\n+  padding-right: 1px;\n+  font-variant-numeric: tabular-nums;\n+`;\n+\n+export default observer(Reaction);\n\ndiff --git a/app/components/Reactions/ReactionList.tsx b/app/components/Reactions/ReactionList.tsx\nnew file mode 100644\nindex 000000000000..fbe5b946974b\n--- /dev/null\n+++ b/app/components/Reactions/ReactionList.tsx\n@@ -0,0 +1,87 @@\n+import compact from \"lodash/compact\";\n+import { observer } from \"mobx-react\";\n+import React from \"react\";\n+import Comment from \"~/models/Comment\";\n+import useHover from \"~/hooks/useHover\";\n+import useStores from \"~/hooks/useStores\";\n+import Logger from \"~/utils/Logger\";\n+import Flex from \"../Flex\";\n+import { ResizingHeightContainer } from \"../ResizingHeightContainer\";\n+import Reaction from \"./Reaction\";\n+\n+type Props = {\n+  /** Model for which to show the reactions. */\n+  model: Comment;\n+  /** Callback when the user intends to add a reaction. */\n+  onAddReaction: (emoji: string) => Promise<void>;\n+  /** Callback when the user intends to remove a reaction. */\n+  onRemoveReaction: (emoji: string) => Promise<void>;\n+  /** classname generated by styled-components. */\n+  className?: string;\n+  /** Picker to render as the last element */\n+  picker?: React.ReactElement;\n+};\n+\n+const ReactionList: React.FC<Props> = ({\n+  model,\n+  onAddReaction,\n+  onRemoveReaction,\n+  className,\n+  picker,\n+}) => {\n+  const { users } = useStores();\n+  const listRef = React.useRef<HTMLDivElement>(null);\n+\n+  const hovered = useHover({\n+    ref: listRef,\n+    duration: 250,\n+  });\n+\n+  React.useEffect(() => {\n+    const loadReactedUsersData = async () => {\n+      try {\n+        await model.loadReactedUsersData();\n+      } catch (err) {\n+        Logger.warn(\"Could not prefetch reaction data\");\n+      }\n+    };\n+\n+    if (hovered) {\n+      void loadReactedUsersData();\n+    }\n+  }, [hovered, model]);\n+\n+  const hasReactions = !!model.reactions.length;\n+  const style = React.useMemo(() => {\n+    if (hasReactions) {\n+      return { minHeight: 28 };\n+    }\n+    return undefined;\n+  }, [hasReactions]);\n+\n+  return (\n+    <ResizingHeightContainer style={style}>\n+      <Flex ref={listRef} className={className} align=\"center\" gap={6} wrap>\n+        {model.reactions.map((reaction) => {\n+          const reactedUsers = compact(\n+            reaction.userIds.map((id) => users.get(id))\n+          );\n+\n+          return (\n+            <Reaction\n+              key={reaction.emoji}\n+              reaction={reaction}\n+              reactedUsers={reactedUsers}\n+              disabled={model.isResolved}\n+              onAddReaction={onAddReaction}\n+              onRemoveReaction={onRemoveReaction}\n+            />\n+          );\n+        })}\n+        {picker}\n+      </Flex>\n+    </ResizingHeightContainer>\n+  );\n+};\n+\n+export default observer(ReactionList);\n\ndiff --git a/app/components/Reactions/ReactionPicker.tsx b/app/components/Reactions/ReactionPicker.tsx\nnew file mode 100644\nindex 000000000000..1ca87e10b26c\n--- /dev/null\n+++ b/app/components/Reactions/ReactionPicker.tsx\n@@ -0,0 +1,161 @@\n+import { ReactionIcon } from \"outline-icons\";\n+import React from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import { PopoverDisclosure, usePopoverState } from \"reakit\";\n+import styled from \"styled-components\";\n+import Flex from \"~/components/Flex\";\n+import NudeButton from \"~/components/NudeButton\";\n+import PlaceholderText from \"~/components/PlaceholderText\";\n+import Popover from \"~/components/Popover\";\n+import useMobile from \"~/hooks/useMobile\";\n+import useOnClickOutside from \"~/hooks/useOnClickOutside\";\n+import useWindowSize from \"~/hooks/useWindowSize\";\n+\n+const EmojiPanel = React.lazy(\n+  () => import(\"~/components/IconPicker/components/EmojiPanel\")\n+);\n+\n+type Props = {\n+  /** Callback when an emoji is selected by the user. */\n+  onSelect: (emoji: string) => Promise<void>;\n+  /** Callback when the picker is opened. */\n+  onOpen?: () => void;\n+  /** Callback when the picker is closed. */\n+  onClose?: () => void;\n+  /** Optional classname. */\n+  className?: string;\n+  size?: number;\n+};\n+\n+const ReactionPicker: React.FC<Props> = ({\n+  onSelect,\n+  onOpen,\n+  onClose,\n+  className,\n+  size,\n+}) => {\n+  const { t } = useTranslation();\n+  const popover = usePopoverState({\n+    modal: true,\n+    unstable_offset: [0, 0],\n+    placement: \"bottom-end\",\n+  });\n+\n+  const { width: windowWidth } = useWindowSize();\n+  const isMobile = useMobile();\n+\n+  const [query, setQuery] = React.useState(\"\");\n+  const contentRef = React.useRef<HTMLDivElement | null>(null);\n+\n+  const popoverWidth = isMobile ? windowWidth : 300;\n+  // In mobile, popover is absolutely positioned to leave 8px on both sides.\n+  const panelWidth = isMobile ? windowWidth - 16 : popoverWidth;\n+  const { toggle, hide } = popover;\n+  const handlePopoverButtonClick = React.useCallback(\n+    (ev: React.MouseEvent) => {\n+      ev.stopPropagation();\n+      toggle();\n+    },\n+    [toggle]\n+  );\n+\n+  const handleEmojiSelect = React.useCallback(\n+    (emoji: string) => {\n+      hide();\n+      void onSelect(emoji);\n+    },\n+    [hide, onSelect]\n+  );\n+\n+  // Popover open effect\n+  React.useEffect(() => {\n+    if (popover.visible) {\n+      onOpen?.();\n+    } else {\n+      onClose?.();\n+    }\n+  }, [popover.visible, onOpen, onClose]);\n+\n+  // Custom click outside handling rather than using `hideOnClickOutside` from reakit so that we can\n+  // prevent event bubbling.\n+  useOnClickOutside(\n+    contentRef,\n+    (event) => {\n+      if (\n+        popover.visible &&\n+        !popover.unstable_disclosureRef.current?.contains(event.target as Node)\n+      ) {\n+        event.stopPropagation();\n+        event.preventDefault();\n+        popover.hide();\n+      }\n+    },\n+    { capture: true }\n+  );\n+\n+  return (\n+    <>\n+      <PopoverDisclosure {...popover}>\n+        {(props) => (\n+          <PopoverButton\n+            {...props}\n+            aria-label={t(\"Reaction picker\")}\n+            className={className}\n+            onClick={handlePopoverButtonClick}\n+            size={size}\n+          >\n+            <ReactionIcon size={22} />\n+          </PopoverButton>\n+        )}\n+      </PopoverDisclosure>\n+      <Popover\n+        {...popover}\n+        ref={contentRef}\n+        width={popoverWidth}\n+        shrink\n+        aria-label={t(\"Reaction picker\")}\n+        onClick={(e) => e.stopPropagation()}\n+        hideOnClickOutside={false}\n+      >\n+        {popover.visible && (\n+          <React.Suspense fallback={<Placeholder />}>\n+            <ScrollableContainer>\n+              <EmojiPanel\n+                panelWidth={panelWidth}\n+                query={query}\n+                panelActive={true}\n+                onEmojiChange={handleEmojiSelect}\n+                onQueryChange={setQuery}\n+              />\n+            </ScrollableContainer>\n+          </React.Suspense>\n+        )}\n+      </Popover>\n+    </>\n+  );\n+};\n+\n+const Placeholder = React.memo(\n+  () => (\n+    <Flex column gap={6} style={{ height: \"300px\", padding: \"6px 12px\" }}>\n+      <Flex gap={8}>\n+        <PlaceholderText height={32} minWidth={90} />\n+        <PlaceholderText height={32} width={32} />\n+      </Flex>\n+      <PlaceholderText height={24} width={120} />\n+    </Flex>\n+  ),\n+  () => true\n+);\n+Placeholder.displayName = \"ReactionPickerPlaceholder\";\n+\n+const ScrollableContainer = styled.div`\n+  height: 300px;\n+  overflow-y: auto;\n+`;\n+\n+const PopoverButton = styled(NudeButton)`\n+  border-radius: 50%;\n+`;\n+\n+export default ReactionPicker;\n\ndiff --git a/app/components/Reactions/ViewReactionsDialog.tsx b/app/components/Reactions/ViewReactionsDialog.tsx\nnew file mode 100644\nindex 000000000000..f824d43fb95f\n--- /dev/null\n+++ b/app/components/Reactions/ViewReactionsDialog.tsx\n@@ -0,0 +1,146 @@\n+import compact from \"lodash/compact\";\n+import { observer } from \"mobx-react\";\n+import React from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import { Tab, TabPanel, useTabState } from \"reakit\";\n+import { toast } from \"sonner\";\n+import styled, { css } from \"styled-components\";\n+import { s } from \"@shared/styles\";\n+import Comment from \"~/models/Comment\";\n+import { Avatar, AvatarSize } from \"~/components/Avatar\";\n+import { Emoji } from \"~/components/Emoji\";\n+import Flex from \"~/components/Flex\";\n+import PlaceholderText from \"~/components/PlaceholderText\";\n+import Text from \"~/components/Text\";\n+import useStores from \"~/hooks/useStores\";\n+import { hover } from \"~/styles\";\n+\n+type Props = {\n+  /** Model for which to show the reactions. */\n+  model: Comment;\n+};\n+\n+const ViewReactionsDialog: React.FC<Props> = ({ model }) => {\n+  const { t } = useTranslation();\n+  const { users } = useStores();\n+  const tab = useTabState();\n+  const { reactedUsersLoaded } = model;\n+\n+  React.useEffect(() => {\n+    const loadReactedUsersData = async () => {\n+      try {\n+        await model.loadReactedUsersData();\n+      } catch (err) {\n+        toast.error(t(\"Could not load reactions\"));\n+      }\n+    };\n+\n+    void loadReactedUsersData();\n+  }, [t, model]);\n+\n+  if (!reactedUsersLoaded) {\n+    return <PlaceHolder />;\n+  }\n+\n+  return (\n+    <>\n+      <TabActionsWrapper>\n+        {model.reactions.map((reaction) => (\n+          <StyledTab\n+            {...tab}\n+            key={reaction.emoji}\n+            id={reaction.emoji}\n+            aria-label={t(\"Reaction\")}\n+            $active={tab.selectedId === reaction.emoji}\n+          >\n+            <Emoji size={16}>{reaction.emoji}</Emoji>\n+          </StyledTab>\n+        ))}\n+      </TabActionsWrapper>\n+      {model.reactions.map((reaction) => {\n+        const reactedUsers = compact(\n+          reaction.userIds.map((id) => users.get(id))\n+        );\n+\n+        return (\n+          <StyledTabPanel {...tab} key={reaction.emoji}>\n+            {reactedUsers.map((user) => (\n+              <UserInfo key={user.name} align=\"center\" gap={8}>\n+                <Avatar model={user} size={AvatarSize.Medium} />\n+                <Text size=\"medium\">{user.name}</Text>\n+              </UserInfo>\n+            ))}\n+          </StyledTabPanel>\n+        );\n+      })}\n+    </>\n+  );\n+};\n+\n+const PlaceHolder = React.memo(\n+  () => (\n+    <>\n+      <TabActionsWrapper gap={8} style={{ paddingBottom: \"10px\" }}>\n+        <PlaceholderText width={40} height={32} />\n+        <PlaceholderText width={40} height={32} />\n+      </TabActionsWrapper>\n+      <UserInfo align=\"center\" gap={12}>\n+        <PlaceholderText width={AvatarSize.Medium} height={AvatarSize.Medium} />\n+        <PlaceholderText height={34} />\n+      </UserInfo>\n+      <UserInfo align=\"center\" gap={12}>\n+        <PlaceholderText width={AvatarSize.Medium} height={AvatarSize.Medium} />\n+        <PlaceholderText height={34} />\n+      </UserInfo>\n+    </>\n+  ),\n+  () => true\n+);\n+PlaceHolder.displayName = \"ViewReactionsPlaceholder\";\n+\n+const TabActionsWrapper = styled(Flex)`\n+  border-bottom: 1px solid ${s(\"inputBorder\")};\n+`;\n+\n+const StyledTab = styled(Tab)<{ $active: boolean }>`\n+  position: relative;\n+  font-weight: 500;\n+  font-size: 14px;\n+  cursor: var(--pointer);\n+  background: none;\n+  border: 0;\n+  border-radius: 4px 4px 0 0;\n+  padding: 8px 12px 10px;\n+  user-select: none;\n+  transition: background-color 100ms ease;\n+\n+  &: ${hover} {\n+    background-color: ${s(\"listItemHoverBackground\")};\n+  }\n+\n+  ${({ $active }) =>\n+    $active &&\n+    css`\n+      &:after {\n+        content: \"\";\n+        position: absolute;\n+        bottom: 0;\n+        left: 0;\n+        right: 0;\n+        height: 1px;\n+        background: ${s(\"textSecondary\")};\n+      }\n+    `}\n+`;\n+\n+const StyledTabPanel = styled(TabPanel)`\n+  height: 300px;\n+  padding: 5px 0;\n+  overflow-y: auto;\n+`;\n+\n+const UserInfo = styled(Flex)`\n+  padding: 10px 8px;\n+`;\n+\n+export default observer(ViewReactionsDialog);\n\ndiff --git a/app/components/Table.tsx b/app/components/Table.tsx\nindex e264a73e86e9..16d3e8e8ca38 100644\n--- a/app/components/Table.tsx\n+++ b/app/components/Table.tsx\n@@ -253,7 +253,7 @@ const SortWrapper = styled(Flex)<{ $sortable: boolean }>`\n \n   &:hover {\n     background: ${(props) =>\n-      props.$sortable ? props.theme.secondaryBackground : \"none\"};\n+      props.$sortable ? props.theme.backgroundSecondary : \"none\"};\n   }\n `;\n \n\ndiff --git a/app/components/WebsocketProvider.tsx b/app/components/WebsocketProvider.tsx\nindex 9b1902424568..f4d83ef32326 100644\n--- a/app/components/WebsocketProvider.tsx\n+++ b/app/components/WebsocketProvider.tsx\n@@ -27,6 +27,7 @@ import withStores from \"~/components/withStores\";\n import {\n   PartialExcept,\n   WebsocketCollectionUpdateIndexEvent,\n+  WebsocketCommentReactionEvent,\n   WebsocketEntitiesEvent,\n   WebsocketEntityDeletedEvent,\n } from \"~/types\";\n@@ -351,6 +352,30 @@ class WebsocketProvider extends React.Component<Props> {\n       comments.remove(event.modelId);\n     });\n \n+    this.socket.on(\n+      \"comments.add_reaction\",\n+      (event: WebsocketCommentReactionEvent) => {\n+        const comment = comments.get(event.commentId);\n+        comment?.updateReaction({\n+          type: \"add\",\n+          emoji: event.emoji,\n+          user: event.user,\n+        });\n+      }\n+    );\n+\n+    this.socket.on(\n+      \"comments.remove_reaction\",\n+      (event: WebsocketCommentReactionEvent) => {\n+        const comment = comments.get(event.commentId);\n+        comment?.updateReaction({\n+          type: \"remove\",\n+          emoji: event.emoji,\n+          user: event.user,\n+        });\n+      }\n+    );\n+\n     this.socket.on(\"groups.create\", (event: PartialExcept<Group, \"id\">) => {\n       groups.add(event);\n     });\n\ndiff --git a/app/hooks/useHover.ts b/app/hooks/useHover.ts\nnew file mode 100644\nindex 000000000000..434c7120c6cd\n--- /dev/null\n+++ b/app/hooks/useHover.ts\n@@ -0,0 +1,50 @@\n+import React from \"react\";\n+import useUnmount from \"./useUnmount\";\n+\n+type Props = {\n+  /** Ref to the element that needs to be observed. */\n+  ref: React.RefObject<HTMLElement>;\n+  /** Duration to wait until it's considered as a hover event. */\n+  duration: number;\n+};\n+\n+/**\n+ * Hook that will trigger the first time an element is hovered.\n+ *\n+ * @returns {boolean} hovered - Signals when an element is hovered by the user.\n+ */\n+const useHover = ({ ref, duration }: Props): boolean => {\n+  const [hovered, setHovered] = React.useState(false);\n+  const timer = React.useRef<number>();\n+\n+  const onMouseEnter = React.useCallback(() => {\n+    if (timer.current) {\n+      clearTimeout(timer.current);\n+    }\n+\n+    timer.current = window.setTimeout(() => setHovered(true), duration);\n+  }, [duration]);\n+\n+  const onMouseLeave = React.useCallback(() => {\n+    if (timer.current) {\n+      clearTimeout(timer.current);\n+    }\n+  }, []);\n+\n+  useUnmount(() => {\n+    if (timer.current) {\n+      clearTimeout(timer.current);\n+    }\n+  });\n+\n+  React.useEffect(() => {\n+    if (ref.current) {\n+      ref.current.onmouseenter = onMouseEnter;\n+      ref.current.onmouseleave = onMouseLeave;\n+    }\n+  }, [ref, onMouseEnter, onMouseLeave]);\n+\n+  return hovered;\n+};\n+\n+export default useHover;\n\ndiff --git a/app/menus/CommentMenu.tsx b/app/menus/CommentMenu.tsx\nindex 2935601d37fe..d2205445cf4c 100644\n--- a/app/menus/CommentMenu.tsx\n+++ b/app/menus/CommentMenu.tsx\n@@ -15,6 +15,7 @@ import {\n   deleteCommentFactory,\n   resolveCommentFactory,\n   unresolveCommentFactory,\n+  viewCommentReactionsFactory,\n } from \"~/actions/definitions/comments\";\n import useActionContext from \"~/hooks/useActionContext\";\n import usePolicy from \"~/hooks/usePolicy\";\n@@ -66,47 +67,55 @@ function CommentMenu({\n           {...menu}\n         />\n       </EventBoundary>\n-      <ContextMenu {...menu} aria-label={t(\"Comment options\")}>\n-        <Template\n-          {...menu}\n-          items={[\n-            {\n-              type: \"button\",\n-              title: `${t(\"Edit\")}…`,\n-              icon: <EditIcon />,\n-              onClick: onEdit,\n-              visible: can.update && !comment.isResolved,\n-            },\n-            actionToMenuItem(\n-              resolveCommentFactory({\n-                comment,\n-                onResolve: () => onUpdate({ resolved: true }),\n-              }),\n-              context\n-            ),\n-            actionToMenuItem(\n-              unresolveCommentFactory({\n-                comment,\n-                onUnresolve: () => onUpdate({ resolved: false }),\n-              }),\n-              context\n-            ),\n-            {\n-              type: \"button\",\n-              icon: <CopyIcon />,\n-              title: t(\"Copy link\"),\n-              onClick: handleCopyLink,\n-            },\n-            {\n-              type: \"separator\",\n-            },\n-            actionToMenuItem(\n-              deleteCommentFactory({ comment, onDelete }),\n-              context\n-            ),\n-          ]}\n-        />\n-      </ContextMenu>\n+      {menu.visible && (\n+        <ContextMenu {...menu} aria-label={t(\"Comment options\")}>\n+          <Template\n+            {...menu}\n+            items={[\n+              {\n+                type: \"button\",\n+                title: `${t(\"Edit\")}…`,\n+                icon: <EditIcon />,\n+                onClick: onEdit,\n+                visible: can.update && !comment.isResolved,\n+              },\n+              actionToMenuItem(\n+                resolveCommentFactory({\n+                  comment,\n+                  onResolve: () => onUpdate({ resolved: true }),\n+                }),\n+                context\n+              ),\n+              actionToMenuItem(\n+                unresolveCommentFactory({\n+                  comment,\n+                  onUnresolve: () => onUpdate({ resolved: false }),\n+                }),\n+                context\n+              ),\n+              actionToMenuItem(\n+                viewCommentReactionsFactory({\n+                  comment,\n+                }),\n+                context\n+              ),\n+              {\n+                type: \"button\",\n+                icon: <CopyIcon />,\n+                title: t(\"Copy link\"),\n+                onClick: handleCopyLink,\n+              },\n+              {\n+                type: \"separator\",\n+              },\n+              actionToMenuItem(\n+                deleteCommentFactory({ comment, onDelete }),\n+                context\n+              ),\n+            ]}\n+          />\n+        </ContextMenu>\n+      )}\n     </>\n   );\n }\n\ndiff --git a/app/models/Comment.ts b/app/models/Comment.ts\nindex 89461ea0978c..fa6e9d529f4e 100644\n--- a/app/models/Comment.ts\n+++ b/app/models/Comment.ts\n@@ -1,8 +1,12 @@\n import { subSeconds } from \"date-fns\";\n-import { computed, observable } from \"mobx\";\n+import invariant from \"invariant\";\n+import uniq from \"lodash/uniq\";\n+import { action, computed, observable } from \"mobx\";\n import { now } from \"mobx-utils\";\n-import type { ProsemirrorData } from \"@shared/types\";\n+import { Pagination } from \"@shared/constants\";\n+import type { ProsemirrorData, ReactionSummary } from \"@shared/types\";\n import User from \"~/models/User\";\n+import { client } from \"~/utils/ApiClient\";\n import Document from \"./Document\";\n import Model from \"./base/Model\";\n import Field from \"./decorators/Field\";\n@@ -84,6 +88,25 @@ class Comment extends Model {\n    */\n   resolvedById: string | null;\n \n+  /**\n+   * Active reactions for this comment.\n+   *\n+   * Note: This contains just the emoji with the associated user-ids.\n+   */\n+  @observable\n+  reactions: ReactionSummary[];\n+\n+  /**\n+   * Denotes whether the user data for the active reactions are loaded.\n+   */\n+  @observable\n+  reactedUsersLoaded: boolean = false;\n+\n+  /**\n+   * Denotes whether there is an in-flight request for loading reacted users.\n+   */\n+  private reactedUsersLoading = false;\n+\n   /**\n    * An array of users that are currently typing a reply in this comments thread.\n    */\n@@ -124,6 +147,156 @@ class Comment extends Model {\n   public unresolve() {\n     return this.store.rootStore.comments.unresolve(this.id);\n   }\n+\n+  /**\n+   * Add an emoji as a reaction to this comment.\n+   *\n+   * Optimistically updates the `reactions` cache and invokes the backend API.\n+   *\n+   * @param {Object} reaction - The reaction data.\n+   * @param {string} reaction.emoji - The emoji to add as a reaction.\n+   * @param {string} reaction.user - The user who added this reaction.\n+   */\n+  @action\n+  public addReaction = async ({\n+    emoji,\n+    user,\n+  }: {\n+    emoji: string;\n+    user: User;\n+  }) => {\n+    this.updateReaction({ type: \"add\", emoji, user });\n+    try {\n+      await client.post(\"/comments.add_reaction\", {\n+        id: this.id,\n+        emoji,\n+      });\n+    } catch {\n+      this.updateReaction({ type: \"remove\", emoji, user });\n+    }\n+  };\n+\n+  /**\n+   * Remove an emoji as a reaction from this comment.\n+   *\n+   * Optimistically updates the `reactions` cache and invokes the backend API.\n+   *\n+   * @param {Object} reaction - The reaction data.\n+   * @param {string} reaction.emoji - The emoji to remove as a reaction.\n+   * @param {string} reaction.user - The user who removed this reaction.\n+   */\n+  @action\n+  public removeReaction = async ({\n+    emoji,\n+    user,\n+  }: {\n+    emoji: string;\n+    user: User;\n+  }) => {\n+    this.updateReaction({ type: \"remove\", emoji, user });\n+    try {\n+      await client.post(\"/comments.remove_reaction\", {\n+        id: this.id,\n+        emoji,\n+      });\n+    } catch {\n+      this.updateReaction({ type: \"add\", emoji, user });\n+    }\n+  };\n+\n+  /**\n+   * Update the `reactions` cache.\n+   *\n+   * @param {Object} reaction - The reaction data.\n+   * @param {string} reaction.type - The type of the action.\n+   * @param {string} reaction.emoji - The emoji to update as a reaction.\n+   * @param {string} reaction.user - The user who performed this action.\n+   */\n+  @action\n+  public updateReaction = ({\n+    type,\n+    emoji,\n+    user,\n+  }: {\n+    type: \"add\" | \"remove\";\n+    emoji: string;\n+    user: User;\n+  }) => {\n+    const reaction = this.reactions.find((r) => r.emoji === emoji);\n+\n+    // Step 1: Update the reactions cache.\n+\n+    if (type === \"add\") {\n+      if (!reaction) {\n+        this.reactions.push({ emoji, userIds: [user.id] });\n+      } else {\n+        reaction.userIds = uniq([...reaction.userIds, user.id]);\n+      }\n+    } else {\n+      if (reaction) {\n+        reaction.userIds = reaction.userIds.filter((id) => id !== user.id);\n+      }\n+\n+      if (reaction?.userIds.length === 0) {\n+        this.reactions = this.reactions.filter(\n+          (r) => r.emoji !== reaction.emoji\n+        );\n+      }\n+    }\n+\n+    // Step 2: Add the user to the store.\n+    this.store.rootStore.users.add(user);\n+  };\n+\n+  /**\n+   * Load the users for the active reactions.\n+   *\n+   *\n+   * @param {Object} options - Options for loading the data.\n+   * @param {string} options.limit - Per request limit for pagination.\n+   */\n+  @action\n+  loadReactedUsersData = async (\n+    { limit }: { limit: number } = { limit: Pagination.defaultLimit }\n+  ) => {\n+    if (this.reactedUsersLoading || this.reactedUsersLoaded) {\n+      return;\n+    }\n+\n+    this.reactedUsersLoading = true;\n+\n+    try {\n+      const fetchPage = async (offset: number = 0) => {\n+        const res = await client.post(\"/reactions.list\", {\n+          commentId: this.id,\n+          offset,\n+          limit,\n+        });\n+\n+        invariant(res?.data, \"Data not available\");\n+        // @ts-expect-error reaction from server response\n+        res.data.map((reaction) =>\n+          this.store.rootStore.users.add(reaction.user)\n+        );\n+\n+        return res.pagination;\n+      };\n+\n+      const { total } = await fetchPage();\n+\n+      const pages = Math.ceil(total / limit);\n+      const fetchPages = [];\n+      for (let page = 1; page < pages; page++) {\n+        fetchPages.push(fetchPage(page * limit));\n+      }\n+\n+      await Promise.all(fetchPages);\n+\n+      this.reactedUsersLoaded = true;\n+    } finally {\n+      this.reactedUsersLoading = false;\n+    }\n+  };\n }\n \n export default Comment;\n\ndiff --git a/app/scenes/Document/components/CommentForm.tsx b/app/scenes/Document/components/CommentForm.tsx\nindex de958150705b..c161744bb96b 100644\n--- a/app/scenes/Document/components/CommentForm.tsx\n+++ b/app/scenes/Document/components/CommentForm.tsx\n@@ -109,6 +109,7 @@ function CommentForm({\n           createdAt: new Date().toISOString(),\n           documentId,\n           data: draft,\n+          reactions: [],\n         },\n         comments\n       );\n@@ -144,6 +145,7 @@ function CommentForm({\n         parentCommentId: thread?.id,\n         documentId,\n         data: draft,\n+        reactions: [],\n       },\n       comments\n     );\n\ndiff --git a/app/scenes/Document/components/CommentThread.tsx b/app/scenes/Document/components/CommentThread.tsx\nindex 04865bb1813c..bde2dc6d6f06 100644\n--- a/app/scenes/Document/components/CommentThread.tsx\n+++ b/app/scenes/Document/components/CommentThread.tsx\n@@ -36,12 +36,16 @@ type Props = {\n   focused: boolean;\n   /** Whether the thread is displayed in a recessed/backgrounded state */\n   recessed: boolean;\n+  /** Enable scroll for the comments container */\n+  enableScroll: () => void;\n+  /** Disable scroll for the comments container */\n+  disableScroll: () => void;\n };\n \n function useTypingIndicator({\n   document,\n   comment,\n-}: Omit<Props, \"focused\" | \"recessed\">): [undefined, () => void] {\n+}: Pick<Props, \"document\" | \"comment\">): [undefined, () => void] {\n   const socket = React.useContext(WebsocketContext);\n \n   const setIsTyping = React.useMemo(\n@@ -63,6 +67,8 @@ function CommentThread({\n   document,\n   recessed,\n   focused,\n+  enableScroll,\n+  disableScroll,\n }: Props) {\n   const [focusedOnMount] = React.useState(focused);\n   const { editor } = useDocumentContext();\n@@ -202,6 +208,8 @@ function CommentThread({\n             lastOfAuthor={lastOfAuthor}\n             previousCommentCreatedAt={commentsInThread[index - 1]?.createdAt}\n             dir={document.dir}\n+            enableScroll={enableScroll}\n+            disableScroll={disableScroll}\n           />\n         );\n       })}\n\ndiff --git a/app/scenes/Document/components/CommentThreadItem.tsx b/app/scenes/Document/components/CommentThreadItem.tsx\nindex 5b24906e4509..bb053cb45317 100644\n--- a/app/scenes/Document/components/CommentThreadItem.tsx\n+++ b/app/scenes/Document/components/CommentThreadItem.tsx\n@@ -16,9 +16,12 @@ import Comment from \"~/models/Comment\";\n import { Avatar } from \"~/components/Avatar\";\n import ButtonSmall from \"~/components/ButtonSmall\";\n import Flex from \"~/components/Flex\";\n+import ReactionList from \"~/components/Reactions/ReactionList\";\n+import ReactionPicker from \"~/components/Reactions/ReactionPicker\";\n import Text from \"~/components/Text\";\n import Time from \"~/components/Time\";\n import useBoolean from \"~/hooks/useBoolean\";\n+import useCurrentUser from \"~/hooks/useCurrentUser\";\n import CommentMenu from \"~/menus/CommentMenu\";\n import { hover } from \"~/styles\";\n import CommentEditor from \"./CommentEditor\";\n@@ -81,6 +84,10 @@ type Props = {\n   onUpdate?: (id: string, attrs: { resolved: boolean }) => void;\n   /** Text to highlight at the top of the comment */\n   highlightedText?: string;\n+  /** Enable scroll for the comments container */\n+  enableScroll: () => void;\n+  /** Disable scroll for the comments container */\n+  disableScroll: () => void;\n };\n \n function CommentThreadItem({\n@@ -94,8 +101,11 @@ function CommentThreadItem({\n   onDelete,\n   onUpdate,\n   highlightedText,\n+  enableScroll,\n+  disableScroll,\n }: Props) {\n   const { t } = useTranslation();\n+  const user = useCurrentUser();\n   const [data, setData] = React.useState(comment.data);\n   const showAuthor = firstOfAuthor;\n   const showTime = useShowTime(comment.createdAt, previousCommentCreatedAt);\n@@ -106,6 +116,20 @@ function CommentThreadItem({\n   const [isEditing, setEditing, setReadOnly] = useBoolean();\n   const formRef = React.useRef<HTMLFormElement>(null);\n \n+  const handleAddReaction = React.useCallback(\n+    async (emoji: string) => {\n+      await comment.addReaction({ emoji, user });\n+    },\n+    [comment, user]\n+  );\n+\n+  const handleRemoveReaction = React.useCallback(\n+    async (emoji: string) => {\n+      await comment.removeReaction({ emoji, user });\n+    },\n+    [comment, user]\n+  );\n+\n   const handleUpdate = React.useCallback(\n     (attrs: { resolved: boolean }) => {\n       onUpdate?.(comment.id, attrs);\n@@ -210,16 +234,43 @@ function CommentThreadItem({\n               </ButtonSmall>\n             </Flex>\n           )}\n+          {!!comment.reactions.length && (\n+            <ReactionListContainer gap={6} align=\"center\">\n+              <ReactionList\n+                model={comment}\n+                onAddReaction={handleAddReaction}\n+                onRemoveReaction={handleRemoveReaction}\n+                picker={\n+                  !comment.isResolved ? (\n+                    <StyledReactionPicker\n+                      onSelect={handleAddReaction}\n+                      onOpen={disableScroll}\n+                      onClose={enableScroll}\n+                      size={28}\n+                    />\n+                  ) : undefined\n+                }\n+              />\n+            </ReactionListContainer>\n+          )}\n         </Body>\n         <EventBoundary>\n           {!isEditing && (\n-            <Menu\n-              comment={comment}\n-              onEdit={setEditing}\n-              onDelete={handleDelete}\n-              onUpdate={handleUpdate}\n-              dir={dir}\n-            />\n+            <Actions gap={4} dir={dir}>\n+              {!comment.isResolved && (\n+                <StyledReactionPicker\n+                  onSelect={handleAddReaction}\n+                  onOpen={disableScroll}\n+                  onClose={enableScroll}\n+                />\n+              )}\n+              <StyledMenu\n+                comment={comment}\n+                onEdit={setEditing}\n+                onDelete={handleDelete}\n+                onUpdate={handleUpdate}\n+              />\n+            </Actions>\n           )}\n         </EventBoundary>\n       </Bubble>\n@@ -257,21 +308,41 @@ const Body = styled.form`\n   border-radius: 2px;\n `;\n \n-const Menu = styled(CommentMenu)<{ dir?: \"rtl\" | \"ltr\" }>`\n+const StyledMenu = styled(CommentMenu)`\n+  color: ${s(\"textSecondary\")};\n+\n+  &: ${hover}, &[aria-expanded= \"true\"] {\n+    background: ${s(\"backgroundQuaternary\")};\n+  }\n+`;\n+\n+const StyledReactionPicker = styled(ReactionPicker)`\n+  color: ${s(\"textSecondary\")};\n+\n+  &: ${hover}, &[aria-expanded= \"true\"] {\n+    background: ${s(\"backgroundQuaternary\")};\n+  }\n+`;\n+\n+const Actions = styled(Flex)<{ dir?: \"rtl\" | \"ltr\" }>`\n   position: absolute;\n   left: ${(props) => (props.dir !== \"rtl\" ? \"auto\" : \"4px\")};\n   right: ${(props) => (props.dir === \"rtl\" ? \"auto\" : \"4px\")};\n   top: 4px;\n   opacity: 0;\n   transition: opacity 100ms ease-in-out;\n-  color: ${s(\"textSecondary\")};\n+  background: ${s(\"backgroundSecondary\")};\n+  padding-left: 4px;\n \n-  &: ${hover}, &[aria-expanded= \"true\"] {\n+  &:has(${StyledReactionPicker}[aria-expanded=\"true\"], ${StyledMenu}[aria-expanded=\"true\"]) {\n     opacity: 1;\n-    background: ${s(\"sidebarActiveBackground\")};\n   }\n `;\n \n+const ReactionListContainer = styled(Flex)`\n+  margin-top: 6px;\n+`;\n+\n const Meta = styled(Text)`\n   margin-bottom: 2px;\n \n@@ -293,7 +364,7 @@ export const Bubble = styled(Flex)<{\n   flex-grow: 1;\n   font-size: 16px;\n   color: ${s(\"text\")};\n-  background: ${s(\"commentBackground\")};\n+  background: ${s(\"backgroundSecondary\")};\n   min-width: 2em;\n   margin-bottom: 1px;\n   padding: 8px 12px;\n@@ -317,7 +388,7 @@ export const Bubble = styled(Flex)<{\n     margin-bottom: 0;\n   }\n \n-  &: ${hover} ${Menu} {\n+  &: ${hover} ${Actions} {\n     opacity: 1;\n   }\n \n\ndiff --git a/app/scenes/Document/components/Comments.tsx b/app/scenes/Document/components/Comments.tsx\nindex 8e648b17bc6e..341aca520778 100644\n--- a/app/scenes/Document/components/Comments.tsx\n+++ b/app/scenes/Document/components/Comments.tsx\n@@ -12,6 +12,7 @@ import Empty from \"~/components/Empty\";\n import Fade from \"~/components/Fade\";\n import Flex from \"~/components/Flex\";\n import Scrollable from \"~/components/Scrollable\";\n+import useBoolean from \"~/hooks/useBoolean\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n import useFocusedComment from \"~/hooks/useFocusedComment\";\n import useKeyDown from \"~/hooks/useKeyDown\";\n@@ -32,6 +33,8 @@ function Comments() {\n   const { t } = useTranslation();\n   const match = useRouteMatch<{ documentSlug: string }>();\n   const params = useQuery();\n+  // We need to control scroll behaviour when reaction picker is opened / closed.\n+  const [scrollable, enableScroll, disableScroll] = useBoolean(true);\n   const document = documents.getByUrl(match.params.documentSlug);\n   const focusedComment = useFocusedComment();\n   const can = usePolicy(document);\n@@ -131,6 +134,8 @@ function Comments() {\n         bottomShadow={!focusedComment}\n         hiddenScrollbars\n         topShadow\n+        overflow={scrollable ? \"auto\" : \"hidden\"}\n+        style={{ overflowX: \"hidden\" }}\n         ref={scrollableRef}\n         onScroll={handleScroll}\n       >\n@@ -143,6 +148,8 @@ function Comments() {\n                 document={document}\n                 recessed={!!focusedComment && focusedComment.id !== thread.id}\n                 focused={focusedComment?.id === thread.id}\n+                enableScroll={enableScroll}\n+                disableScroll={disableScroll}\n               />\n             ))\n           ) : (\n\ndiff --git a/app/scenes/Document/components/Editor.tsx b/app/scenes/Document/components/Editor.tsx\nindex 304b33fce1bc..c0685513f44c 100644\n--- a/app/scenes/Document/components/Editor.tsx\n+++ b/app/scenes/Document/components/Editor.tsx\n@@ -150,6 +150,7 @@ function DocumentEditor(props: Props, ref: React.RefObject<any>) {\n           documentId: props.id,\n           createdAt: new Date(),\n           createdById,\n+          reactions: [],\n         },\n         comments\n       );\n\ndiff --git a/app/scenes/Search/components/RecentSearchListItem.tsx b/app/scenes/Search/components/RecentSearchListItem.tsx\nindex 32c719e5f071..b29a228541a5 100644\n--- a/app/scenes/Search/components/RecentSearchListItem.tsx\n+++ b/app/scenes/Search/components/RecentSearchListItem.tsx\n@@ -81,7 +81,7 @@ const RecentSearch = styled(Link)`\n   &:focus,\n   &:${hover} {\n     color: ${s(\"text\")};\n-    background: ${s(\"secondaryBackground\")};\n+    background: ${s(\"backgroundSecondary\")};\n \n     ${RemoveButton} {\n       opacity: 1;\n\ndiff --git a/app/scenes/Settings/components/DropToImport.tsx b/app/scenes/Settings/components/DropToImport.tsx\nindex f112fd110a73..3219140ef0de 100644\n--- a/app/scenes/Settings/components/DropToImport.tsx\n+++ b/app/scenes/Settings/components/DropToImport.tsx\n@@ -138,7 +138,7 @@ const DropzoneContainer = styled.div<{\n }>`\n   background: ${(props) =>\n     props.$isDragActive\n-      ? props.theme.secondaryBackground\n+      ? props.theme.backgroundSecondary\n       : props.theme.background};\n   border-radius: 8px;\n   border: 1px dashed ${s(\"divider\")};\n@@ -149,7 +149,7 @@ const DropzoneContainer = styled.div<{\n   opacity: ${(props) => (props.$disabled ? 0.5 : 1)};\n \n   &:hover {\n-    background: ${s(\"secondaryBackground\")};\n+    background: ${s(\"backgroundSecondary\")};\n   }\n `;\n \n\ndiff --git a/app/scenes/Settings/components/ImageInput.tsx b/app/scenes/Settings/components/ImageInput.tsx\nindex 9824a0176498..9d795cad0d11 100644\n--- a/app/scenes/Settings/components/ImageInput.tsx\n+++ b/app/scenes/Settings/components/ImageInput.tsx\n@@ -47,7 +47,7 @@ const ImageBox = styled(Flex)`\n   position: relative;\n   font-size: 14px;\n   border-radius: 8px;\n-  box-shadow: 0 0 0 1px ${s(\"secondaryBackground\")};\n+  box-shadow: 0 0 0 1px ${s(\"backgroundSecondary\")};\n   background: ${s(\"background\")};\n   overflow: hidden;\n \n\ndiff --git a/app/types.ts b/app/types.ts\nindex eb6e48939780..a7b4f662ea28 100644\n--- a/app/types.ts\n+++ b/app/types.ts\n@@ -12,6 +12,7 @@ import Document from \"./models/Document\";\n import FileOperation from \"./models/FileOperation\";\n import Pin from \"./models/Pin\";\n import Star from \"./models/Star\";\n+import User from \"./models/User\";\n import UserMembership from \"./models/UserMembership\";\n \n export type PartialExcept<T, K extends keyof T> = Partial<Omit<T, K>> &\n@@ -188,6 +189,12 @@ export type WebsocketCollectionUpdateIndexEvent = {\n   index: string;\n };\n \n+export type WebsocketCommentReactionEvent = {\n+  emoji: string;\n+  commentId: string;\n+  user: User;\n+};\n+\n export type WebsocketEvent =\n   | PartialExcept<Pin, \"id\">\n   | PartialExcept<Star, \"id\">\n@@ -195,7 +202,8 @@ export type WebsocketEvent =\n   | PartialExcept<UserMembership, \"id\">\n   | WebsocketCollectionUpdateIndexEvent\n   | WebsocketEntityDeletedEvent\n-  | WebsocketEntitiesEvent;\n+  | WebsocketEntitiesEvent\n+  | WebsocketCommentReactionEvent;\n \n export type AwarenessChangeEvent = {\n   states: { user?: { id: string }; cursor: any; scrollY: number | undefined }[];\n\ndiff --git a/app/typings/styled-components.d.ts b/app/typings/styled-components.d.ts\nindex 0a5da6e6fa69..c8ea1e7fc712 100644\n--- a/app/typings/styled-components.d.ts\n+++ b/app/typings/styled-components.d.ts\n@@ -120,10 +120,12 @@ declare module \"styled-components\" {\n       Breakpoints,\n       EditorTheme {\n     background: string;\n+    backgroundSecondary: string;\n+    backgroundTertiary: string;\n+    backgroundQuaternary: string;\n     backgroundTransition: string;\n     accent: string;\n     accentText: string;\n-    secondaryBackground: string;\n     link: string;\n     text: string;\n     cursor: string;\n@@ -135,7 +137,6 @@ declare module \"styled-components\" {\n     textDiffDeletedBackground: string;\n     placeholder: string;\n     commentMarkBackground: string;\n-    commentBackground: string;\n     sidebarBackground: string;\n     sidebarActiveBackground: string;\n     sidebarControlHoverBackground: string;\n\ndiff --git a/package.json b/package.json\nindex 3afa29a733ac..66ff408afaaa 100644\n--- a/package.json\n+++ b/package.json\n@@ -213,6 +213,7 @@\n     \"resolve-path\": \"^1.4.0\",\n     \"rfc6902\": \"^5.1.1\",\n     \"sanitize-filename\": \"^1.6.3\",\n+    \"scroll-into-view-if-needed\": \"^3.1.0\",\n     \"semver\": \"^7.6.2\",\n     \"sequelize\": \"^6.37.3\",\n     \"sequelize-cli\": \"^6.6.2\",\n@@ -220,7 +221,6 @@\n     \"sequelize-typescript\": \"^2.1.6\",\n     \"slug\": \"^5.3.0\",\n     \"slugify\": \"^1.6.6\",\n-    \"scroll-into-view-if-needed\": \"^3.1.0\",\n     \"socket.io\": \"^4.7.5\",\n     \"socket.io-client\": \"^4.8.0\",\n     \"socket.io-redis\": \"^6.1.1\",\n\ndiff --git a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\nindex 158750a410b0..6e78f182a71b 100644\n--- a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n+++ b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n@@ -178,6 +178,10 @@ export default class DeliverWebhookTask extends BaseTask<Props> {\n       case \"comments.delete\":\n         await this.handleCommentEvent(subscription, event);\n         return;\n+      case \"comments.add_reaction\":\n+      case \"comments.remove_reaction\":\n+        // Ignored\n+        return;\n       case \"groups.create\":\n       case \"groups.update\":\n       case \"groups.delete\":\n\ndiff --git a/server/emails/templates/components/Diff.tsx b/server/emails/templates/components/Diff.tsx\nindex 2228ec4d6224..652f5aed1c19 100644\n--- a/server/emails/templates/components/Diff.tsx\n+++ b/server/emails/templates/components/Diff.tsx\n@@ -8,7 +8,7 @@ type Props = {\n \n export default ({ children, ...rest }: Props) => {\n   const style = {\n-    border: `1.5px solid ${theme.secondaryBackground}`,\n+    border: `1.5px solid ${theme.backgroundSecondary}`,\n     borderRadius: \"4px\",\n     padding: \".75em 1em\",\n     color: theme.text,\n\ndiff --git a/server/migrations/20241013080608-create-reactions.js b/server/migrations/20241013080608-create-reactions.js\nnew file mode 100644\nindex 000000000000..8a1288bd146b\n--- /dev/null\n+++ b/server/migrations/20241013080608-create-reactions.js\n@@ -0,0 +1,74 @@\n+\"use strict\";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.createTable(\n+        \"reactions\",\n+        {\n+          id: {\n+            type: Sequelize.UUID,\n+            allowNull: false,\n+            primaryKey: true,\n+          },\n+          emoji: {\n+            type: Sequelize.STRING,\n+            allowNull: false,\n+          },\n+          userId: {\n+            type: Sequelize.UUID,\n+            allowNull: false,\n+            onDelete: \"cascade\",\n+            references: {\n+              model: \"users\",\n+            },\n+          },\n+          commentId: {\n+            type: Sequelize.UUID,\n+            allowNull: false,\n+            onDelete: \"cascade\",\n+            references: {\n+              model: \"comments\",\n+            },\n+          },\n+          createdAt: {\n+            type: Sequelize.DATE,\n+            allowNull: false,\n+          },\n+          updatedAt: {\n+            type: Sequelize.DATE,\n+            allowNull: false,\n+          },\n+        },\n+        { transaction }\n+      );\n+\n+      await queryInterface.addIndex(\"reactions\", [\"emoji\", \"userId\"], {\n+        transaction,\n+      });\n+      await queryInterface.addIndex(\"reactions\", [\"commentId\"], {\n+        transaction,\n+      });\n+\n+      await queryInterface.addColumn(\n+        \"comments\",\n+        \"reactions\",\n+        {\n+          type: Sequelize.JSONB,\n+          allowNull: true,\n+        },\n+        { transaction }\n+      );\n+    });\n+  },\n+\n+  async down(queryInterface, Sequelize) {\n+    queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.dropTable(\"reactions\", { transaction });\n+      await queryInterface.removeColumn(\"comments\", \"reactions\", {\n+        transaction,\n+      });\n+    });\n+  },\n+};\n\ndiff --git a/server/models/Comment.ts b/server/models/Comment.ts\nindex d13089e28fed..399c5837633b 100644\n--- a/server/models/Comment.ts\n+++ b/server/models/Comment.ts\n@@ -9,7 +9,7 @@ import {\n   Length,\n   DefaultScope,\n } from \"sequelize-typescript\";\n-import type { ProsemirrorData } from \"@shared/types\";\n+import type { ProsemirrorData, ReactionSummary } from \"@shared/types\";\n import { ProsemirrorHelper } from \"@shared/utils/ProsemirrorHelper\";\n import { CommentValidation } from \"@shared/validations\";\n import { schema } from \"@server/editor\";\n@@ -51,6 +51,9 @@ class Comment extends ParanoidModel<\n   @Column(DataType.JSONB)\n   data: ProsemirrorData;\n \n+  @Column(DataType.JSONB)\n+  reactions: ReactionSummary[] | null;\n+\n   // associations\n \n   @BelongsTo(() => User, \"createdById\")\n\ndiff --git a/server/models/Reaction.ts b/server/models/Reaction.ts\nnew file mode 100644\nindex 000000000000..e4ef1c128b0b\n--- /dev/null\n+++ b/server/models/Reaction.ts\n@@ -0,0 +1,128 @@\n+import uniq from \"lodash/uniq\";\n+import {\n+  InferAttributes,\n+  InferCreationAttributes,\n+  type SaveOptions,\n+} from \"sequelize\";\n+import {\n+  AfterCreate,\n+  AfterDestroy,\n+  BelongsTo,\n+  Column,\n+  DataType,\n+  ForeignKey,\n+  Table,\n+} from \"sequelize-typescript\";\n+import Comment from \"./Comment\";\n+import User from \"./User\";\n+import IdModel from \"./base/IdModel\";\n+import Fix from \"./decorators/Fix\";\n+import Length from \"./validators/Length\";\n+\n+@Table({ tableName: \"reactions\", modelName: \"reaction\" })\n+@Fix\n+class Reaction extends IdModel<\n+  InferAttributes<Reaction>,\n+  Partial<InferCreationAttributes<Reaction>>\n+> {\n+  @Length({\n+    max: 50,\n+    msg: `emoji must be 50 characters or less`,\n+  })\n+  @Column(DataType.STRING)\n+  emoji: string;\n+\n+  // associations\n+\n+  @BelongsTo(() => User)\n+  user: User;\n+\n+  @ForeignKey(() => User)\n+  @Column(DataType.UUID)\n+  userId: string;\n+\n+  @BelongsTo(() => Comment)\n+  comment: Comment;\n+\n+  @ForeignKey(() => Comment)\n+  @Column(DataType.UUID)\n+  commentId: string;\n+\n+  @AfterCreate\n+  public static async addReactionToCommentCache(\n+    model: Reaction,\n+    options: SaveOptions<Reaction>\n+  ) {\n+    const { transaction } = options;\n+\n+    const lock = transaction\n+      ? {\n+          level: transaction.LOCK.UPDATE,\n+          of: Comment,\n+        }\n+      : undefined;\n+\n+    const comment = await Comment.findByPk(model.commentId, {\n+      transaction,\n+      lock,\n+    });\n+\n+    if (!comment) {\n+      return;\n+    }\n+\n+    const reactions = comment.reactions ?? [];\n+    const reaction = reactions.find((r) => r.emoji === model.emoji);\n+\n+    if (!reaction) {\n+      reactions.push({ emoji: model.emoji, userIds: [model.userId] });\n+    } else {\n+      reaction.userIds = uniq([...reaction.userIds, model.userId]);\n+    }\n+\n+    comment.reactions = reactions;\n+    comment.changed(\"reactions\", true);\n+    await comment.save({ fields: [\"reactions\"], transaction, silent: true });\n+  }\n+\n+  @AfterDestroy\n+  public static async removeReactionFromCommentCache(\n+    model: Reaction,\n+    options: SaveOptions<Reaction>\n+  ) {\n+    const { transaction } = options;\n+\n+    const lock = transaction\n+      ? {\n+          level: transaction.LOCK.UPDATE,\n+          of: Comment,\n+        }\n+      : undefined;\n+\n+    const comment = await Comment.findByPk(model.commentId, {\n+      transaction,\n+      lock,\n+    });\n+\n+    if (!comment) {\n+      return;\n+    }\n+\n+    let reactions = comment.reactions ?? [];\n+    const reaction = reactions.find((r) => r.emoji === model.emoji);\n+\n+    if (reaction) {\n+      reaction.userIds = reaction.userIds.filter((id) => id !== model.userId);\n+\n+      if (reaction.userIds.length === 0) {\n+        reactions = reactions.filter((r) => r.emoji !== model.emoji);\n+      }\n+    }\n+\n+    comment.reactions = reactions;\n+    comment.changed(\"reactions\", true);\n+    await comment.save({ fields: [\"reactions\"], transaction, silent: true });\n+  }\n+}\n+\n+export default Reaction;\n\ndiff --git a/server/models/index.ts b/server/models/index.ts\nindex 6679ebe7966e..3edc7b7fdb2e 100644\n--- a/server/models/index.ts\n+++ b/server/models/index.ts\n@@ -32,6 +32,8 @@ export { default as Notification } from \"./Notification\";\n \n export { default as Pin } from \"./Pin\";\n \n+export { default as Reaction } from \"./Reaction\";\n+\n export { default as Revision } from \"./Revision\";\n \n export { default as SearchQuery } from \"./SearchQuery\";\n\ndiff --git a/server/policies/comment.ts b/server/policies/comment.ts\nindex 14abf24e4b49..5c524f866035 100644\n--- a/server/policies/comment.ts\n+++ b/server/policies/comment.ts\n@@ -30,3 +30,10 @@ allow(User, [\"update\", \"delete\"], Comment, (actor, comment) =>\n     or(actor.isAdmin, actor?.id === comment?.createdById)\n   )\n );\n+\n+allow(\n+  User,\n+  [\"readReaction\", \"addReaction\", \"removeReaction\"],\n+  Comment,\n+  (actor, comment) => isTeamModel(actor, comment?.createdBy)\n+);\n\ndiff --git a/server/policies/index.ts b/server/policies/index.ts\nindex c57f9042fdec..82e5cf5ba4c7 100644\n--- a/server/policies/index.ts\n+++ b/server/policies/index.ts\n@@ -11,6 +11,7 @@ import \"./document\";\n import \"./fileOperation\";\n import \"./integration\";\n import \"./pins\";\n+import \"./reaction\";\n import \"./searchQuery\";\n import \"./share\";\n import \"./star\";\n\ndiff --git a/server/policies/reaction.ts b/server/policies/reaction.ts\nnew file mode 100644\nindex 000000000000..95b3fdb750a2\n--- /dev/null\n+++ b/server/policies/reaction.ts\n@@ -0,0 +1,5 @@\n+import { User, Reaction } from \"@server/models\";\n+import { allow } from \"./cancan\";\n+import { isOwner } from \"./utils\";\n+\n+allow(User, \"delete\", Reaction, isOwner);\n\ndiff --git a/server/presenters/comment.ts b/server/presenters/comment.ts\nindex 9267fe7a6648..06c10e8bb278 100644\n--- a/server/presenters/comment.ts\n+++ b/server/presenters/comment.ts\n@@ -14,5 +14,6 @@ export default function present(comment: Comment) {\n     resolvedById: comment.resolvedById,\n     createdAt: comment.createdAt,\n     updatedAt: comment.updatedAt,\n+    reactions: comment.reactions ?? [],\n   };\n }\n\ndiff --git a/server/presenters/index.ts b/server/presenters/index.ts\nindex 7834353b1fb4..5b38cfee6d29 100644\n--- a/server/presenters/index.ts\n+++ b/server/presenters/index.ts\n@@ -16,6 +16,7 @@ import presentPin from \"./pin\";\n import presentPolicies from \"./policy\";\n import presentProviderConfig from \"./providerConfig\";\n import presentPublicTeam from \"./publicTeam\";\n+import presentReaction from \"./reaction\";\n import presentRevision from \"./revision\";\n import presentSearchQuery from \"./searchQuery\";\n import presentShare from \"./share\";\n@@ -44,6 +45,7 @@ export {\n   presentPin,\n   presentPolicies,\n   presentProviderConfig,\n+  presentReaction,\n   presentRevision,\n   presentSearchQuery,\n   presentShare,\n\ndiff --git a/server/presenters/reaction.ts b/server/presenters/reaction.ts\nnew file mode 100644\nindex 000000000000..60e66a2a453c\n--- /dev/null\n+++ b/server/presenters/reaction.ts\n@@ -0,0 +1,14 @@\n+import { Reaction } from \"@server/models\";\n+import presentUser from \"./user\";\n+\n+export default function present(reaction: Reaction) {\n+  return {\n+    id: reaction.id,\n+    emoji: reaction.emoji,\n+    commentId: reaction.commentId,\n+    user: presentUser(reaction.user),\n+    userId: reaction.userId,\n+    createdAt: reaction.createdAt,\n+    updatedAt: reaction.updatedAt,\n+  };\n+}\n\ndiff --git a/server/queues/processors/WebsocketsProcessor.ts b/server/queues/processors/WebsocketsProcessor.ts\nindex 87c730b2dd71..61b22f99b06f 100644\n--- a/server/queues/processors/WebsocketsProcessor.ts\n+++ b/server/queues/processors/WebsocketsProcessor.ts\n@@ -505,6 +505,37 @@ export default class WebsocketsProcessor {\n         });\n       }\n \n+      case \"comments.add_reaction\":\n+      case \"comments.remove_reaction\": {\n+        const comment = await Comment.findByPk(event.modelId, {\n+          include: [\n+            {\n+              model: Document.scope([\"withoutState\", \"withDrafts\"]),\n+              as: \"document\",\n+              required: true,\n+            },\n+          ],\n+        });\n+        if (!comment) {\n+          return;\n+        }\n+\n+        const user = await User.findByPk(event.actorId);\n+        if (!user) {\n+          return;\n+        }\n+\n+        const channels = await this.getDocumentEventChannels(\n+          event,\n+          comment.document\n+        );\n+        return socketio.to(channels).emit(event.name, {\n+          emoji: event.data.emoji,\n+          commentId: event.modelId,\n+          user: presentUser(user),\n+        });\n+      }\n+\n       case \"notifications.create\":\n       case \"notifications.update\": {\n         const notification = await Notification.findByPk(event.modelId);\n\ndiff --git a/server/routes/api/comments/comments.ts b/server/routes/api/comments/comments.ts\nindex 856204d8db74..d81875e4b4c2 100644\n--- a/server/routes/api/comments/comments.ts\n+++ b/server/routes/api/comments/comments.ts\n@@ -9,7 +9,7 @@ import { feature } from \"@server/middlewares/feature\";\n import { rateLimiter } from \"@server/middlewares/rateLimiter\";\n import { transaction } from \"@server/middlewares/transaction\";\n import validate from \"@server/middlewares/validate\";\n-import { Document, Comment, Collection, Event } from \"@server/models\";\n+import { Document, Comment, Collection, Event, Reaction } from \"@server/models\";\n import { authorize } from \"@server/policies\";\n import { presentComment, presentPolicies } from \"@server/presenters\";\n import { APIContext } from \"@server/types\";\n@@ -352,4 +352,117 @@ router.post(\n   }\n );\n \n+router.post(\n+  \"comments.add_reaction\",\n+  rateLimiter(RateLimiterStrategy.TwentyFivePerMinute),\n+  auth(),\n+  feature(TeamPreference.Commenting),\n+  validate(T.CommentsReactionSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.CommentsReactionReq>) => {\n+    const { id, emoji } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n+\n+    const comment = await Comment.findByPk(id, {\n+      transaction,\n+      rejectOnEmpty: true,\n+      lock: {\n+        level: transaction.LOCK.UPDATE,\n+        of: Comment,\n+      },\n+    });\n+    const document = await Document.findByPk(comment.documentId, {\n+      userId: user.id,\n+      transaction,\n+    });\n+\n+    authorize(user, \"comment\", document);\n+    authorize(user, \"addReaction\", comment);\n+\n+    const [, created] = await Reaction.findOrCreate({\n+      where: {\n+        emoji,\n+        userId: user.id,\n+        commentId: id,\n+      },\n+      transaction,\n+    });\n+\n+    if (created) {\n+      await Event.createFromContext(\n+        ctx,\n+        {\n+          name: \"comments.add_reaction\",\n+          modelId: comment.id,\n+          documentId: comment.documentId,\n+          data: {\n+            emoji,\n+          },\n+        },\n+        { transaction }\n+      );\n+    }\n+\n+    ctx.body = {\n+      success: true,\n+    };\n+  }\n+);\n+\n+router.post(\n+  \"comments.remove_reaction\",\n+  rateLimiter(RateLimiterStrategy.TwentyFivePerMinute),\n+  auth(),\n+  feature(TeamPreference.Commenting),\n+  validate(T.CommentsReactionSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.CommentsReactionReq>) => {\n+    const { id, emoji } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n+\n+    const comment = await Comment.findByPk(id, {\n+      transaction,\n+      rejectOnEmpty: true,\n+      lock: {\n+        level: transaction.LOCK.UPDATE,\n+        of: Comment,\n+      },\n+    });\n+    const document = await Document.findByPk(comment.documentId, {\n+      userId: user.id,\n+      transaction,\n+    });\n+\n+    authorize(user, \"comment\", document);\n+    authorize(user, \"removeReaction\", comment);\n+\n+    const reaction = await Reaction.findOne({\n+      where: { emoji, userId: user.id, commentId: id },\n+      transaction,\n+    });\n+    authorize(user, \"delete\", reaction);\n+\n+    await reaction.destroy({ transaction });\n+\n+    await Event.createFromContext(\n+      ctx,\n+      {\n+        name: \"comments.remove_reaction\",\n+        modelId: comment.id,\n+        documentId: comment.documentId,\n+        data: {\n+          emoji,\n+        },\n+      },\n+      { transaction }\n+    );\n+\n+    ctx.body = {\n+      success: true,\n+    };\n+  }\n+);\n+\n export default router;\n\ndiff --git a/server/routes/api/comments/schema.ts b/server/routes/api/comments/schema.ts\nindex 6518054fd19f..aae839fc15de 100644\n--- a/server/routes/api/comments/schema.ts\n+++ b/server/routes/api/comments/schema.ts\n@@ -1,3 +1,4 @@\n+import emojiRegex from \"emoji-regex\";\n import { z } from \"zod\";\n import { CommentStatusFilter } from \"@shared/types\";\n import { BaseSchema, ProsemirrorSchema } from \"@server/routes/api/schema\";\n@@ -86,3 +87,12 @@ export const CommentsUnresolveSchema = z.object({\n });\n \n export type CommentsUnresolveReq = z.infer<typeof CommentsUnresolveSchema>;\n+\n+export const CommentsReactionSchema = z.object({\n+  body: BaseIdSchema.extend({\n+    /**  Emoji that's added to (or) removed from a comment as a reaction. */\n+    emoji: z.string().regex(emojiRegex()),\n+  }),\n+});\n+\n+export type CommentsReactionReq = z.infer<typeof CommentsReactionSchema>;\n\ndiff --git a/server/routes/api/index.ts b/server/routes/api/index.ts\nindex ccb575a8558b..abad92bbe54e 100644\n--- a/server/routes/api/index.ts\n+++ b/server/routes/api/index.ts\n@@ -27,6 +27,7 @@ import apiTracer from \"./middlewares/apiTracer\";\n import editor from \"./middlewares/editor\";\n import notifications from \"./notifications\";\n import pins from \"./pins\";\n+import reactions from \"./reactions\";\n import revisions from \"./revisions\";\n import searches from \"./searches\";\n import shares from \"./shares\";\n@@ -91,6 +92,7 @@ router.use(\"/\", groupMemberships.routes());\n router.use(\"/\", fileOperationsRoute.routes());\n router.use(\"/\", urls.routes());\n router.use(\"/\", userMemberships.routes());\n+router.use(\"/\", reactions.routes());\n \n if (!env.isCloudHosted) {\n   router.use(\"/\", installation.routes());\n\ndiff --git a/server/routes/api/reactions/index.ts b/server/routes/api/reactions/index.ts\nnew file mode 100644\nindex 000000000000..79153411be0a\n--- /dev/null\n+++ b/server/routes/api/reactions/index.ts\n@@ -0,0 +1 @@\n+export { default } from \"./reactions\";\n\ndiff --git a/server/routes/api/reactions/reactions.ts b/server/routes/api/reactions/reactions.ts\nnew file mode 100644\nindex 000000000000..e72380220dcf\n--- /dev/null\n+++ b/server/routes/api/reactions/reactions.ts\n@@ -0,0 +1,65 @@\n+import Router from \"koa-router\";\n+import { WhereOptions } from \"sequelize\";\n+import auth from \"@server/middlewares/authentication\";\n+import validate from \"@server/middlewares/validate\";\n+import { Comment, Document, Reaction, User } from \"@server/models\";\n+import { authorize } from \"@server/policies\";\n+import { presentReaction } from \"@server/presenters\";\n+import { APIContext } from \"@server/types\";\n+import pagination from \"../middlewares/pagination\";\n+import * as T from \"./schema\";\n+\n+const router = new Router();\n+\n+router.post(\n+  \"reactions.list\",\n+  auth(),\n+  pagination(),\n+  validate(T.ReactionsListSchema),\n+  async (ctx: APIContext<T.ReactionsListReq>) => {\n+    const { commentId } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+\n+    const comment = await Comment.findByPk(commentId, {\n+      rejectOnEmpty: true,\n+    });\n+    const document = await Document.findByPk(comment.documentId, {\n+      userId: user.id,\n+    });\n+\n+    authorize(user, \"readReaction\", comment);\n+    authorize(user, \"read\", document);\n+\n+    const where: WhereOptions<Reaction> = {\n+      commentId,\n+    };\n+\n+    const include = [\n+      {\n+        model: User,\n+        required: true,\n+      },\n+    ];\n+\n+    const [reactions, total] = await Promise.all([\n+      Reaction.findAll({\n+        where,\n+        include,\n+        order: [[\"createdAt\", \"DESC\"]],\n+        offset: ctx.state.pagination.offset,\n+        limit: ctx.state.pagination.limit,\n+      }),\n+      Reaction.count({\n+        where,\n+        include,\n+      }),\n+    ]);\n+\n+    ctx.body = {\n+      pagination: { ...ctx.state.pagination, total },\n+      data: reactions.map(presentReaction),\n+    };\n+  }\n+);\n+\n+export default router;\n\ndiff --git a/server/routes/api/reactions/schema.ts b/server/routes/api/reactions/schema.ts\nnew file mode 100644\nindex 000000000000..b5b35346844a\n--- /dev/null\n+++ b/server/routes/api/reactions/schema.ts\n@@ -0,0 +1,11 @@\n+import { z } from \"zod\";\n+import { BaseSchema } from \"../schema\";\n+\n+export const ReactionsListSchema = BaseSchema.extend({\n+  body: z.object({\n+    /** Id of the comment to list reactions for. */\n+    commentId: z.string().uuid(),\n+  }),\n+});\n+\n+export type ReactionsListReq = z.infer<typeof ReactionsListSchema>;\n\ndiff --git a/server/types.ts b/server/types.ts\nindex 56a866a94e9a..07bec087888f 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -379,6 +379,15 @@ export type CommentUpdateEvent = BaseEvent<Comment> & {\n   };\n };\n \n+export type CommentReactionEvent = BaseEvent<Comment> & {\n+  name: \"comments.add_reaction\" | \"comments.remove_reaction\";\n+  modelId: string;\n+  documentId: string;\n+  data: {\n+    emoji: string;\n+  };\n+};\n+\n export type CommentEvent =\n   | (BaseEvent<Comment> & {\n       name: \"comments.create\";\n@@ -393,7 +402,8 @@ export type CommentEvent =\n       documentId: string;\n       actorId: string;\n       collectionId: string;\n-    });\n+    })\n+  | CommentReactionEvent;\n \n export type StarEvent = BaseEvent<Star> & {\n   name: \"stars.create\" | \"stars.update\" | \"stars.delete\";\n\ndiff --git a/shared/editor/components/Frame.tsx b/shared/editor/components/Frame.tsx\nindex 91ee0ea2549f..6b8ab66beba6 100644\n--- a/shared/editor/components/Frame.tsx\n+++ b/shared/editor/components/Frame.tsx\n@@ -155,7 +155,7 @@ const Bar = styled.div`\n   display: flex;\n   align-items: center;\n   border-top: 1px solid ${(props) => props.theme.embedBorder};\n-  background: ${s(\"secondaryBackground\")};\n+  background: ${s(\"backgroundSecondary\")};\n   color: ${s(\"textSecondary\")};\n   padding: 0 8px;\n   border-bottom-left-radius: 6px;\n\ndiff --git a/shared/editor/components/Image.tsx b/shared/editor/components/Image.tsx\nindex e416c621e512..6190cab71cf7 100644\n--- a/shared/editor/components/Image.tsx\n+++ b/shared/editor/components/Image.tsx\n@@ -150,7 +150,7 @@ const Error = styled(Flex)`\n   max-width: 100%;\n   color: ${s(\"textTertiary\")};\n   font-size: 14px;\n-  background: ${s(\"secondaryBackground\")};\n+  background: ${s(\"backgroundSecondary\")};\n   border-radius: 4px;\n   min-width: 33vw;\n   height: 80px;\n\ndiff --git a/shared/editor/components/Styles.ts b/shared/editor/components/Styles.ts\nindex 55c071de13b5..bf3c85ead152 100644\n--- a/shared/editor/components/Styles.ts\n+++ b/shared/editor/components/Styles.ts\n@@ -1770,7 +1770,7 @@ table {\n   &:focus {\n     cursor: var(--pointer);\n     color: ${props.theme.text};\n-    background: ${props.theme.secondaryBackground};\n+    background: ${props.theme.backgroundSecondary};\n   }\n }\n \n\ndiff --git a/shared/editor/components/Widget.tsx b/shared/editor/components/Widget.tsx\nindex 74fddb8f8746..ac0c14851a8f 100644\n--- a/shared/editor/components/Widget.tsx\n+++ b/shared/editor/components/Widget.tsx\n@@ -104,7 +104,7 @@ const Wrapper = styled.a`\n       &:active {\n         cursor: pointer !important;\n         text-decoration: none !important;\n-        background: ${s(\"secondaryBackground\")};\n+        background: ${s(\"backgroundSecondary\")};\n \n         ${Children} {\n           opacity: 1;\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 5503ca4a4c9f..494796994406 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -25,6 +25,8 @@\n   \"Mark as resolved\": \"Mark as resolved\",\n   \"Thread resolved\": \"Thread resolved\",\n   \"Mark as unresolved\": \"Mark as unresolved\",\n+  \"View reactions\": \"View reactions\",\n+  \"Reactions\": \"Reactions\",\n   \"Copy ID\": \"Copy ID\",\n   \"Clear IndexedDB cache\": \"Clear IndexedDB cache\",\n   \"IndexedDB cache cleared\": \"IndexedDB cache cleared\",\n@@ -299,6 +301,13 @@\n   \"Mark all as read\": \"Mark all as read\",\n   \"You're all caught up\": \"You're all caught up\",\n   \"Documents\": \"Documents\",\n+  \"{{ username }} reacted with {{ emoji }}\": \"{{ username }} reacted with {{ emoji }}\",\n+  \"{{ firstUsername }} and {{ secondUsername }} reacted with {{ emoji }}\": \"{{ firstUsername }} and {{ secondUsername }} reacted with {{ emoji }}\",\n+  \"{{ firstUsername }} and {{ count }} others reacted with {{ emoji }}\": \"{{ firstUsername }} and {{ count }} other reacted with {{ emoji }}\",\n+  \"{{ firstUsername }} and {{ count }} others reacted with {{ emoji }}_plural\": \"{{ firstUsername }} and {{ count }} others reacted with {{ emoji }}\",\n+  \"Reaction picker\": \"Reaction picker\",\n+  \"Could not load reactions\": \"Could not load reactions\",\n+  \"Reaction\": \"Reaction\",\n   \"Results\": \"Results\",\n   \"No results for {{query}}\": \"No results for {{query}}\",\n   \"Manage\": \"Manage\",\n\ndiff --git a/shared/styles/theme.ts b/shared/styles/theme.ts\nindex 35b410ddeaf0..f054cc50c869 100644\n--- a/shared/styles/theme.ts\n+++ b/shared/styles/theme.ts\n@@ -111,7 +111,9 @@ export const buildLightTheme = (input: Partial<Colors>): DefaultTheme => {\n     ...colors,\n     isDark: false,\n     background: colors.white,\n-    secondaryBackground: colors.warmGrey,\n+    backgroundSecondary: colors.warmGrey,\n+    backgroundTertiary: \"#d7e0ea\",\n+    backgroundQuaternary: darken(0.05, \"#d7e0ea\"),\n     link: colors.accent,\n     cursor: colors.almostBlack,\n     text: colors.almostBlack,\n@@ -130,8 +132,6 @@ export const buildLightTheme = (input: Partial<Colors>): DefaultTheme => {\n     backdrop: \"rgba(0, 0, 0, 0.2)\",\n     shadow: \"rgba(0, 0, 0, 0.2)\",\n \n-    commentBackground: colors.warmGrey,\n-\n     modalBackdrop: \"rgba(0, 0, 0, 0.15)\",\n     modalBackground: colors.white,\n     modalShadow:\n@@ -173,7 +173,9 @@ export const buildDarkTheme = (input: Partial<Colors>): DefaultTheme => {\n     ...colors,\n     isDark: true,\n     background: colors.almostBlack,\n-    secondaryBackground: colors.black50,\n+    backgroundSecondary: \"#1f232e\",\n+    backgroundTertiary: \"#2a2f3e\",\n+    backgroundQuaternary: lighten(0.1, \"#2a2f3e\"),\n     link: \"#137FFB\",\n     text: colors.almostWhite,\n     cursor: colors.almostWhite,\n@@ -192,8 +194,6 @@ export const buildDarkTheme = (input: Partial<Colors>): DefaultTheme => {\n     backdrop: \"rgba(0, 0, 0, 0.5)\",\n     shadow: \"rgba(0, 0, 0, 0.6)\",\n \n-    commentBackground: \"#1f232e\",\n-\n     modalBackdrop: colors.black50,\n     modalBackground: \"#1f2128\",\n     modalShadow:\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex 3d9eb25c78bd..b840c1115034 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -470,3 +470,8 @@ export type EmojiVariants = {\n   [EmojiSkinTone.MediumDark]?: Emoji;\n   [EmojiSkinTone.Dark]?: Emoji;\n };\n+\n+export type ReactionSummary = {\n+  emoji: string;\n+  userIds: string[];\n+};\n\ndiff --git a/shared/utils/emoji.ts b/shared/utils/emoji.ts\nindex 7da06490a26e..243e26174f7f 100644\n--- a/shared/utils/emoji.ts\n+++ b/shared/utils/emoji.ts\n@@ -137,3 +137,12 @@ export const search = ({\n     return query === nlc ? -1 : nlc.startsWith(queryLowercase) ? 0 : 1;\n   });\n };\n+\n+/**\n+ * Get am emoji's human-readable ID from its string.\n+ *\n+ * @param emoji - The string representation of the emoji.\n+ * @returns The emoji id, if found.\n+ */\n+export const getEmojiId = (emoji: string): string | undefined =>\n+  searcher.search(emoji)[0]?.id;\n\ndiff --git a/yarn.lock b/yarn.lock\nindex 2f136dcb5154..21524c2d3473 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -7581,7 +7581,7 @@ ejs@^3.1.6, ejs@^3.1.7:\n   dependencies:\n     jake \"^10.8.5\"\n \n-electron-to-chromium@^1.5.28:\n+electron-to-chromium@^1.5.28, electron-to-chromium@^1.5.4:\n   version \"1.5.32\"\n   resolved \"https://registry.yarnpkg.com/electron-to-chromium/-/electron-to-chromium-1.5.32.tgz#4a05ee78e29e240aabaf73a67ce9fe73f52e1bc7\"\n   integrity sha512-M+7ph0VGBQqqpTT2YrabjNKSQ2fEl9PVx6AK3N558gDH9NO8O6XN9SXXFWRo9u9PbEg/bWq+tjXQr+eXmxubCw==\n",
    "test_patch": "diff --git a/server/routes/api/comments/__snapshots__/comments.test.ts.snap b/server/routes/api/comments/__snapshots__/comments.test.ts.snap\nindex 549f072d4b69..56b84ed58ac6 100644\n--- a/server/routes/api/comments/__snapshots__/comments.test.ts.snap\n+++ b/server/routes/api/comments/__snapshots__/comments.test.ts.snap\n@@ -1,5 +1,14 @@\n // Jest Snapshot v1, https://goo.gl/fbAQLP\n \n+exports[`#comments.add_reaction should require authentication 1`] = `\n+{\n+  \"error\": \"authentication_required\",\n+  \"message\": \"Authentication required\",\n+  \"ok\": false,\n+  \"status\": 401,\n+}\n+`;\n+\n exports[`#comments.create should require authentication 1`] = `\n {\n   \"error\": \"authentication_required\",\n@@ -27,6 +36,15 @@ exports[`#comments.list should require authentication 1`] = `\n }\n `;\n \n+exports[`#comments.remove_reaction should require authentication 1`] = `\n+{\n+  \"error\": \"authentication_required\",\n+  \"message\": \"Authentication required\",\n+  \"ok\": false,\n+  \"status\": 401,\n+}\n+`;\n+\n exports[`#comments.resolve should require authentication 1`] = `\n {\n   \"error\": \"authentication_required\",\n\ndiff --git a/server/routes/api/comments/comments.test.ts b/server/routes/api/comments/comments.test.ts\nindex 5f65bb0b03b0..d33be0ec3d33 100644\n--- a/server/routes/api/comments/comments.test.ts\n+++ b/server/routes/api/comments/comments.test.ts\n@@ -1,4 +1,5 @@\n-import { CommentStatusFilter } from \"@shared/types\";\n+import { CommentStatusFilter, ReactionSummary } from \"@shared/types\";\n+import { Comment, Reaction } from \"@server/models\";\n import {\n   buildAdmin,\n   buildCollection,\n@@ -263,6 +264,40 @@ describe(\"#comments.list\", () => {\n     expect(body.policies[1].abilities.read).toBeTruthy();\n     expect(body.pagination.total).toEqual(2);\n   });\n+\n+  it(\"should return reactions for a comment\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const reactions: ReactionSummary[] = [\n+      { emoji: \"😄\", userIds: [user.id] },\n+      { emoji: \"🙃\", userIds: [user.id] },\n+    ];\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+      reactions,\n+    });\n+\n+    const res = await server.post(\"/api/comments.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(1);\n+    expect(body.data[0].id).toEqual(comment.id);\n+    expect(body.data[0].reactions).toEqual(reactions);\n+    expect(body.policies.length).toEqual(1);\n+    expect(body.policies[0].abilities.read).toBeTruthy();\n+    expect(body.pagination.total).toEqual(1);\n+  });\n });\n \n describe(\"#comments.create\", () => {\n@@ -605,3 +640,171 @@ describe(\"#comments.unresolve\", () => {\n     expect(body.policies[0].abilities.unresolve).toEqual(false);\n   });\n });\n+\n+describe(\"#comments.add_reaction\", () => {\n+  it(\"should require authentication\", async () => {\n+    const res = await server.post(\"/api/comments.add_reaction\");\n+    const body = await res.json();\n+    expect(res.status).toEqual(401);\n+    expect(body).toMatchSnapshot();\n+  });\n+\n+  it(\"should add a reaction to a comment\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+\n+    const res = await server.post(\"/api/comments.add_reaction\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+        emoji: \"😄\",\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.success).toEqual(true);\n+\n+    const updatedComment = await Comment.findByPk(comment.id);\n+    const addedReaction = await Reaction.findOne({\n+      where: { commentId: comment.id, emoji: \"😄\", userId: user.id },\n+    });\n+\n+    expect(updatedComment?.reactions).toEqual([\n+      { emoji: \"😄\", userIds: [user.id] },\n+    ]);\n+    expect(addedReaction).toBeTruthy();\n+  });\n+\n+  it(\"should add a reaction to a comment with existing reactions\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+      reactions: [{ emoji: \"😄\", userIds: [\"test-user\"] }],\n+    });\n+\n+    const res = await server.post(\"/api/comments.add_reaction\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+        emoji: \"😄\",\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.success).toEqual(true);\n+\n+    const updatedComment = await Comment.findByPk(comment.id);\n+    const addedReaction = await Reaction.findOne({\n+      where: { commentId: comment.id, emoji: \"😄\", userId: user.id },\n+    });\n+\n+    expect(updatedComment?.reactions).toEqual([\n+      { emoji: \"😄\", userIds: [\"test-user\", user.id] },\n+    ]);\n+    expect(addedReaction).toBeTruthy();\n+  });\n+});\n+\n+describe(\"#comments.remove_reaction\", () => {\n+  it(\"should require authentication\", async () => {\n+    const res = await server.post(\"/api/comments.remove_reaction\");\n+    const body = await res.json();\n+    expect(res.status).toEqual(401);\n+    expect(body).toMatchSnapshot();\n+  });\n+\n+  it(\"should remove a reaction from a comment\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    await Reaction.create({\n+      emoji: \"😄\",\n+      commentId: comment.id,\n+      userId: user.id,\n+    });\n+\n+    const res = await server.post(\"/api/comments.remove_reaction\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+        emoji: \"😄\",\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.success).toEqual(true);\n+\n+    const updatedComment = await Comment.findByPk(comment.id);\n+    const removedReaction = await Reaction.findOne({\n+      where: { commentId: comment.id, emoji: \"😄\", userId: user.id },\n+    });\n+\n+    expect(updatedComment?.reactions).toEqual([]);\n+    expect(removedReaction).toBeNull();\n+  });\n+\n+  it(\"should remove a reaction from a comment with existing reactions\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+      reactions: [{ emoji: \"😄\", userIds: [\"test-user\"] }],\n+    });\n+    await Reaction.create({\n+      emoji: \"😄\",\n+      commentId: comment.id,\n+      userId: user.id,\n+    });\n+\n+    const res = await server.post(\"/api/comments.remove_reaction\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+        emoji: \"😄\",\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.success).toEqual(true);\n+\n+    const updatedComment = await Comment.findByPk(comment.id);\n+    const removedReaction = await Reaction.findOne({\n+      where: { commentId: comment.id, emoji: \"😄\", userId: user.id },\n+    });\n+\n+    expect(updatedComment?.reactions).toEqual([\n+      { emoji: \"😄\", userIds: [\"test-user\"] },\n+    ]);\n+    expect(removedReaction).toBeNull();\n+  });\n+});\n\ndiff --git a/server/routes/api/reactions/__snapshots__/reactions.test.ts.snap b/server/routes/api/reactions/__snapshots__/reactions.test.ts.snap\nnew file mode 100644\nindex 000000000000..47dab5600892\n--- /dev/null\n+++ b/server/routes/api/reactions/__snapshots__/reactions.test.ts.snap\n@@ -0,0 +1,10 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`#reactions.list should require authentication 1`] = `\n+{\n+  \"error\": \"authentication_required\",\n+  \"message\": \"Authentication required\",\n+  \"ok\": false,\n+  \"status\": 401,\n+}\n+`;\n\ndiff --git a/server/routes/api/reactions/reactions.test.ts b/server/routes/api/reactions/reactions.test.ts\nnew file mode 100644\nindex 000000000000..4439ba9d7df8\n--- /dev/null\n+++ b/server/routes/api/reactions/reactions.test.ts\n@@ -0,0 +1,51 @@\n+import { Reaction } from \"@server/models\";\n+import {\n+  buildComment,\n+  buildDocument,\n+  buildTeam,\n+  buildUser,\n+} from \"@server/test/factories\";\n+import { getTestServer } from \"@server/test/support\";\n+\n+const server = getTestServer();\n+\n+describe(\"#reactions.list\", () => {\n+  it(\"should require authentication\", async () => {\n+    const res = await server.post(\"/api/reactions.list\");\n+    const body = await res.json();\n+    expect(res.status).toEqual(401);\n+    expect(body).toMatchSnapshot();\n+  });\n+\n+  it(\"should return all reactions for a comment\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    await Reaction.bulkCreate([\n+      { emoji: \"😄\", commentId: comment.id, userId: user.id },\n+      { emoji: \"😅\", commentId: comment.id, userId: user.id },\n+    ]);\n+\n+    const res = await server.post(\"/api/reactions.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        commentId: comment.id,\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(2);\n+    expect(body.data[0].commentId).toEqual(comment.id);\n+    expect(body.data[0].user.id).toEqual(user.id);\n+    expect(body.data[0].user.name).toEqual(user.name);\n+    expect(body.pagination.total).toEqual(2);\n+  });\n+});\n\ndiff --git a/server/test/factories.ts b/server/test/factories.ts\nindex 5e808f6414e5..1afdd8234978 100644\n--- a/server/test/factories.ts\n+++ b/server/test/factories.ts\n@@ -14,6 +14,7 @@ import {\n   IntegrationType,\n   NotificationEventType,\n   ProsemirrorData,\n+  ReactionSummary,\n   UserRole,\n } from \"@shared/types\";\n import { parser, schema } from \"@server/editor\";\n@@ -413,6 +414,7 @@ export async function buildComment(overrides: {\n   documentId: string;\n   parentCommentId?: string;\n   resolvedById?: string;\n+  reactions?: ReactionSummary[];\n }) {\n   const comment = await Comment.create({\n     resolvedById: overrides.resolvedById,\n@@ -434,6 +436,7 @@ export async function buildComment(overrides: {\n       ],\n     },\n     createdById: overrides.userId,\n+    reactions: overrides.reactions,\n   });\n \n   return comment;\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7766",
    "pr_id": 7766,
    "issue_id": 7675,
    "repo": "outline/outline",
    "problem_statement": "Move API Keys to a workspace list\nCurrently API keys are managed on a per-user basis, this means that as an admin of a workspace you do not have any visibility into who has keys live, which are being used, when they expire etc.\r\n\r\nThe suggestion here is to make it possible for admins to view the existence of and manage all API keys in the workspace both via the API and the UI.",
    "issue_word_count": 68,
    "test_files_count": 1,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "app/models/ApiKey.ts",
      "app/scenes/Settings/ApiKeys.tsx",
      "app/stores/ApiKeysStore.ts",
      "server/policies/apiKey.ts",
      "server/policies/user.ts",
      "server/presenters/apiKey.ts",
      "server/routes/api/apiKeys/apiKeys.test.ts",
      "server/routes/api/apiKeys/apiKeys.ts",
      "server/routes/api/apiKeys/schema.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/apiKeys/apiKeys.test.ts"
    ],
    "base_commit": "9680e5784904e144444573cf994ec81d351a4a11",
    "head_commit": "c804dd2bca4a1238af3be30c355b52954d0e62c7",
    "repo_url": "https://github.com/outline/outline/pull/7766",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7766",
    "dockerfile": "",
    "pr_merged_at": "2024-10-14T22:29:47.000Z",
    "patch": "diff --git a/app/models/ApiKey.ts b/app/models/ApiKey.ts\nindex 70c68b48b338..6bb33992c259 100644\n--- a/app/models/ApiKey.ts\n+++ b/app/models/ApiKey.ts\n@@ -16,10 +16,13 @@ class ApiKey extends ParanoidModel {\n   @observable\n   expiresAt?: string;\n \n-  /** An optional datetime that the API key was last used at. */\n+  /** Timestamp that the API key was last used. */\n   @observable\n   lastActiveAt?: string;\n \n+  /** The user ID that the API key belongs to. */\n+  userId: string;\n+\n   /** The plain text value of the API key, only available on creation. */\n   value: string;\n \n\ndiff --git a/app/scenes/Settings/ApiKeys.tsx b/app/scenes/Settings/ApiKeys.tsx\nindex de096ea2b3fa..42e382587200 100644\n--- a/app/scenes/Settings/ApiKeys.tsx\n+++ b/app/scenes/Settings/ApiKeys.tsx\n@@ -13,12 +13,14 @@ import Text from \"~/components/Text\";\n import { createApiKey } from \"~/actions/definitions/apiKeys\";\n import useActionContext from \"~/hooks/useActionContext\";\n import useCurrentTeam from \"~/hooks/useCurrentTeam\";\n+import useCurrentUser from \"~/hooks/useCurrentUser\";\n import usePolicy from \"~/hooks/usePolicy\";\n import useStores from \"~/hooks/useStores\";\n import ApiKeyListItem from \"./components/ApiKeyListItem\";\n \n function ApiKeys() {\n   const team = useCurrentTeam();\n+  const user = useCurrentUser();\n   const { t } = useTranslation();\n   const { apiKeys } = useStores();\n   const can = usePolicy(team);\n@@ -79,7 +81,8 @@ function ApiKeys() {\n       </Text>\n       <PaginatedList\n         fetch={apiKeys.fetchPage}\n-        items={apiKeys.orderedData}\n+        items={apiKeys.personalApiKeys}\n+        options={{ userId: user.id }}\n         heading={<h2>{t(\"Personal keys\")}</h2>}\n         renderItem={(apiKey: ApiKey) => (\n           <ApiKeyListItem\n\ndiff --git a/app/stores/ApiKeysStore.ts b/app/stores/ApiKeysStore.ts\nindex f479ca29976f..bd6cfbcea947 100644\n--- a/app/stores/ApiKeysStore.ts\n+++ b/app/stores/ApiKeysStore.ts\n@@ -1,3 +1,4 @@\n+import { computed } from \"mobx\";\n import ApiKey from \"~/models/ApiKey\";\n import RootStore from \"./RootStore\";\n import Store, { RPCAction } from \"./base/Store\";\n@@ -8,4 +9,12 @@ export default class ApiKeysStore extends Store<ApiKey> {\n   constructor(rootStore: RootStore) {\n     super(rootStore, ApiKey);\n   }\n+\n+  @computed\n+  get personalApiKeys() {\n+    const userId = this.rootStore.auth.user?.id;\n+    return userId\n+      ? this.orderedData.filter((key) => key.userId === userId)\n+      : [];\n+  }\n }\n\ndiff --git a/server/policies/apiKey.ts b/server/policies/apiKey.ts\nindex 7ea229ffd5fd..f51eb977d366 100644\n--- a/server/policies/apiKey.ts\n+++ b/server/policies/apiKey.ts\n@@ -5,7 +5,6 @@ import { and, isOwner, isTeamModel, isTeamMutable } from \"./utils\";\n \n allow(User, \"createApiKey\", Team, (actor, team) =>\n   and(\n-    //\n     isTeamModel(actor, team),\n     isTeamMutable(actor),\n     !actor.isViewer,\n@@ -16,4 +15,18 @@ allow(User, \"createApiKey\", Team, (actor, team) =>\n   )\n );\n \n-allow(User, [\"read\", \"update\", \"delete\"], ApiKey, isOwner);\n+allow(User, \"listApiKeys\", Team, (actor, team) =>\n+  and(\n+    //\n+    isTeamModel(actor, team),\n+    actor.isAdmin\n+  )\n+);\n+\n+allow(User, [\"read\", \"update\", \"delete\"], ApiKey, (actor, apiKey) =>\n+  and(\n+    isOwner(actor, apiKey),\n+    actor.isAdmin ||\n+      !!actor.team?.getPreference(TeamPreference.MembersCanCreateApiKey)\n+  )\n+);\n\ndiff --git a/server/policies/user.ts b/server/policies/user.ts\nindex e7f82127ead6..e254a3be5918 100644\n--- a/server/policies/user.ts\n+++ b/server/policies/user.ts\n@@ -23,7 +23,7 @@ allow(User, \"inviteUser\", Team, (actor, team) =>\n   )\n );\n \n-allow(User, [\"update\", \"readDetails\"], User, (actor, user) =>\n+allow(User, [\"update\", \"readDetails\", \"listApiKeys\"], User, (actor, user) =>\n   or(\n     //\n     isTeamAdmin(actor, user),\n\ndiff --git a/server/presenters/apiKey.ts b/server/presenters/apiKey.ts\nindex d2796bd7fae4..943cf78cb83a 100644\n--- a/server/presenters/apiKey.ts\n+++ b/server/presenters/apiKey.ts\n@@ -3,6 +3,7 @@ import ApiKey from \"@server/models/ApiKey\";\n export default function presentApiKey(apiKey: ApiKey) {\n   return {\n     id: apiKey.id,\n+    userId: apiKey.userId,\n     name: apiKey.name,\n     value: apiKey.value,\n     last4: apiKey.last4,\n\ndiff --git a/server/routes/api/apiKeys/apiKeys.ts b/server/routes/api/apiKeys/apiKeys.ts\nindex 2df8b583c834..51962b5d2f8f 100644\n--- a/server/routes/api/apiKeys/apiKeys.ts\n+++ b/server/routes/api/apiKeys/apiKeys.ts\n@@ -1,10 +1,11 @@\n import Router from \"koa-router\";\n+import { WhereOptions } from \"sequelize\";\n import { UserRole } from \"@shared/types\";\n import auth from \"@server/middlewares/authentication\";\n import { transaction } from \"@server/middlewares/transaction\";\n import validate from \"@server/middlewares/validate\";\n-import { ApiKey, Event } from \"@server/models\";\n-import { authorize } from \"@server/policies\";\n+import { ApiKey, Event, User } from \"@server/models\";\n+import { authorize, cannot } from \"@server/policies\";\n import { presentApiKey } from \"@server/presenters\";\n import { APIContext, AuthenticationType } from \"@server/types\";\n import pagination from \"../middlewares/pagination\";\n@@ -54,12 +55,40 @@ router.post(\n   \"apiKeys.list\",\n   auth({ role: UserRole.Member }),\n   pagination(),\n-  async (ctx: APIContext) => {\n-    const { user } = ctx.state.auth;\n+  validate(T.APIKeysListSchema),\n+  async (ctx: APIContext<T.APIKeysListReq>) => {\n+    const { userId } = ctx.input.body;\n+    const actor = ctx.state.auth.user;\n+\n+    let where: WhereOptions<User> = {\n+      teamId: actor.teamId,\n+    };\n+\n+    if (cannot(actor, \"listApiKeys\", actor.team)) {\n+      where = {\n+        ...where,\n+        id: actor.id,\n+      };\n+    }\n+\n+    if (userId) {\n+      const user = await User.findByPk(userId);\n+      authorize(actor, \"listApiKeys\", user);\n+\n+      where = {\n+        ...where,\n+        id: userId,\n+      };\n+    }\n+\n     const keys = await ApiKey.findAll({\n-      where: {\n-        userId: user.id,\n-      },\n+      include: [\n+        {\n+          model: User,\n+          required: true,\n+          where,\n+        },\n+      ],\n       order: [[\"createdAt\", \"DESC\"]],\n       offset: ctx.state.pagination.offset,\n       limit: ctx.state.pagination.limit,\n\ndiff --git a/server/routes/api/apiKeys/schema.ts b/server/routes/api/apiKeys/schema.ts\nindex 25271f0816eb..a26600deb9af 100644\n--- a/server/routes/api/apiKeys/schema.ts\n+++ b/server/routes/api/apiKeys/schema.ts\n@@ -12,6 +12,15 @@ export const APIKeysCreateSchema = BaseSchema.extend({\n \n export type APIKeysCreateReq = z.infer<typeof APIKeysCreateSchema>;\n \n+export const APIKeysListSchema = BaseSchema.extend({\n+  body: z.object({\n+    /** The owner of the API key */\n+    userId: z.string().uuid().optional(),\n+  }),\n+});\n+\n+export type APIKeysListReq = z.infer<typeof APIKeysListSchema>;\n+\n export const APIKeysDeleteSchema = BaseSchema.extend({\n   body: z.object({\n     /** API Key Id */\n",
    "test_patch": "diff --git a/server/routes/api/apiKeys/apiKeys.test.ts b/server/routes/api/apiKeys/apiKeys.test.ts\nindex d733b87049fa..42cc5742b801 100644\n--- a/server/routes/api/apiKeys/apiKeys.test.ts\n+++ b/server/routes/api/apiKeys/apiKeys.test.ts\n@@ -1,4 +1,4 @@\n-import { buildApiKey, buildUser } from \"@server/test/factories\";\n+import { buildAdmin, buildApiKey, buildUser } from \"@server/test/factories\";\n import { getTestServer } from \"@server/test/support\";\n \n const server = getTestServer();\n@@ -47,25 +47,58 @@ describe(\"#apiKeys.create\", () => {\n });\n \n describe(\"#apiKeys.list\", () => {\n-  it(\"should return api keys of a user\", async () => {\n-    const now = new Date();\n+  it(\"should return api keys of the specified user\", async () => {\n     const user = await buildUser();\n-    await buildApiKey({\n-      name: \"My API Key\",\n-      userId: user.id,\n-      expiresAt: now,\n+    const admin = await buildAdmin({ teamId: user.teamId });\n+    await buildApiKey({ userId: user.id });\n+\n+    const res = await server.post(\"/api/apiKeys.list\", {\n+      body: {\n+        userId: user.id,\n+        token: admin.getJwtToken(),\n+      },\n     });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(1);\n+  });\n+\n+  it(\"should return api keys of the specified user for admin\", async () => {\n+    const user = await buildUser();\n+    const admin = await buildAdmin({ teamId: user.teamId });\n+    await buildApiKey({ userId: user.id });\n+    await buildApiKey({ userId: admin.id });\n \n     const res = await server.post(\"/api/apiKeys.list\", {\n       body: {\n-        token: user.getJwtToken(),\n+        userId: admin.id,\n+        token: admin.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(1);\n+  });\n+\n+  it(\"should return api keys of all users for admin\", async () => {\n+    const admin = await buildAdmin();\n+    const user = await buildUser({ teamId: admin.teamId });\n+    await buildApiKey({ userId: admin.id });\n+    await buildApiKey({ userId: user.id });\n+    await buildApiKey();\n+\n+    const res = await server.post(\"/api/apiKeys.list\", {\n+      body: {\n+        token: admin.getJwtToken(),\n       },\n     });\n+\n     const body = await res.json();\n \n     expect(res.status).toEqual(200);\n-    expect(body.data[0].name).toEqual(\"My API Key\");\n-    expect(body.data[0].expiresAt).toEqual(now.toISOString());\n+    expect(body.data.length).toEqual(2);\n   });\n \n   it(\"should require authentication\", async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7765",
    "pr_id": 7765,
    "issue_id": 7674,
    "repo": "outline/outline",
    "problem_statement": "Add ability to filter documents without a search term\nIn particular it's important to be able to filter by collection, or author on the search page.\r\n\r\nThis will mean refactoring the logic in `SearchHelper` a bit so that query is optional and injected into SQL only when available.",
    "issue_word_count": 40,
    "test_files_count": 2,
    "non_test_files_count": 10,
    "pr_changed_files": [
      "app/components/Editor.tsx",
      "app/components/SearchPopover.tsx",
      "app/scenes/Search/Search.tsx",
      "app/scenes/Search/components/CollectionFilter.tsx",
      "app/stores/DocumentsStore.ts",
      "app/types.ts",
      "plugins/slack/server/api/hooks.ts",
      "server/models/helpers/SearchHelper.test.ts",
      "server/models/helpers/SearchHelper.ts",
      "server/routes/api/documents/documents.test.ts",
      "server/routes/api/documents/documents.ts",
      "server/routes/api/documents/schema.ts"
    ],
    "pr_changed_test_files": [
      "server/models/helpers/SearchHelper.test.ts",
      "server/routes/api/documents/documents.test.ts"
    ],
    "base_commit": "763dd2882985ac2ebb6e10c4e3c802e21f9c6088",
    "head_commit": "f2b0e4cbd98a4ed5469cc0224377cde3cf0e473a",
    "repo_url": "https://github.com/outline/outline/pull/7765",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7765",
    "dockerfile": "",
    "pr_merged_at": "2024-11-03T22:59:48.000Z",
    "patch": "diff --git a/app/components/Editor.tsx b/app/components/Editor.tsx\nindex 27b07849c5a0..00a581b56bcb 100644\n--- a/app/components/Editor.tsx\n+++ b/app/components/Editor.tsx\n@@ -98,7 +98,7 @@ function Editor(props: Props, ref: React.RefObject<SharedEditor> | null) {\n       }\n \n       // default search for anything that doesn't look like a URL\n-      const results = await documents.searchTitles(term);\n+      const results = await documents.searchTitles({ query: term });\n \n       return sortBy(\n         results.map(({ document }) => ({\n\ndiff --git a/app/components/SearchPopover.tsx b/app/components/SearchPopover.tsx\nindex 0548b91bd127..c8b5ba779039 100644\n--- a/app/components/SearchPopover.tsx\n+++ b/app/components/SearchPopover.tsx\n@@ -54,7 +54,8 @@ function SearchPopover({ shareId }: Props) {\n   const performSearch = React.useCallback(\n     async ({ query, ...options }) => {\n       if (query?.length > 0) {\n-        const response = await documents.search(query, {\n+        const response = await documents.search({\n+          query,\n           shareId,\n           ...options,\n         });\n\ndiff --git a/app/scenes/Search/Search.tsx b/app/scenes/Search/Search.tsx\nindex 1a50bb69219b..ee787ef85b0a 100644\n--- a/app/scenes/Search/Search.tsx\n+++ b/app/scenes/Search/Search.tsx\n@@ -57,9 +57,10 @@ function Search(props: Props) {\n   const recentSearchesRef = React.useRef<HTMLDivElement | null>(null);\n \n   // filters\n-  const query = decodeURIComponentSafe(\n+  const decodedQuery = decodeURIComponentSafe(\n     routeMatch.params.term ?? params.get(\"query\") ?? \"\"\n-  );\n+  ).trim();\n+  const query = decodedQuery !== \"\" ? decodedQuery : undefined;\n   const collectionId = params.get(\"collectionId\") ?? undefined;\n   const userId = params.get(\"userId\") ?? undefined;\n   const documentId = params.get(\"documentId\") ?? undefined;\n@@ -68,7 +69,19 @@ function Search(props: Props) {\n     ? (params.getAll(\"statusFilter\") as TStatusFilter[])\n     : [TStatusFilter.Published, TStatusFilter.Draft];\n   const titleFilter = params.get(\"titleFilter\") === \"true\";\n-  const hasFilters = !!(documentId || collectionId || userId || dateFilter);\n+\n+  const isSearchable = !!(query || collectionId || userId);\n+\n+  const document = documentId ? documents.get(documentId) : undefined;\n+\n+  const filterVisibility = {\n+    document: !!document,\n+    collection: !document,\n+    user: !document || !!(document && query),\n+    documentType: isSearchable,\n+    date: isSearchable,\n+    title: !!query && !document,\n+  };\n \n   const filters = React.useMemo(\n     () => ({\n@@ -100,22 +113,22 @@ function Search(props: Props) {\n         query,\n         createdAt: new Date().toISOString(),\n       });\n+    }\n \n+    if (isSearchable) {\n       return async () =>\n         titleFilter\n-          ? await documents.searchTitles(query, filters)\n-          : await documents.search(query, filters);\n+          ? await documents.searchTitles(filters)\n+          : await documents.search(filters);\n     }\n \n     return () => Promise.resolve([] as SearchResult[]);\n-  }, [query, titleFilter, filters, searches, documents]);\n+  }, [query, titleFilter, filters, searches, documents, isSearchable]);\n \n   const { data, next, end, error, loading } = usePaginatedRequest(requestFn, {\n     limit: Pagination.defaultLimit,\n   });\n \n-  const document = documentId ? documents.get(documentId) : undefined;\n-\n   const updateLocation = (query: string) => {\n     history.replace({\n       pathname: searchPath(query),\n@@ -225,39 +238,47 @@ function Search(props: Props) {\n                 : t(\"Search\")\n             }…`}\n             onKeyDown={handleKeyDown}\n-            defaultValue={query}\n+            defaultValue={query ?? \"\"}\n           />\n \n-          {(query || hasFilters) && (\n-            <Filters>\n-              {document && (\n-                <DocumentFilter\n-                  document={document}\n-                  onClick={() => {\n-                    handleFilterChange({ documentId: undefined });\n-                  }}\n-                />\n-              )}\n-              <DocumentTypeFilter\n-                statusFilter={statusFilter}\n-                onSelect={({ statusFilter }) =>\n-                  handleFilterChange({ statusFilter })\n-                }\n+          <Filters>\n+            {filterVisibility.document && (\n+              <DocumentFilter\n+                document={document!}\n+                onClick={() => {\n+                  handleFilterChange({ documentId: undefined });\n+                }}\n               />\n+            )}\n+            {filterVisibility.collection && (\n               <CollectionFilter\n                 collectionId={collectionId}\n                 onSelect={(collectionId) =>\n                   handleFilterChange({ collectionId })\n                 }\n               />\n+            )}\n+            {filterVisibility.user && (\n               <UserFilter\n                 userId={userId}\n                 onSelect={(userId) => handleFilterChange({ userId })}\n               />\n+            )}\n+            {filterVisibility.documentType && (\n+              <DocumentTypeFilter\n+                statusFilter={statusFilter}\n+                onSelect={({ statusFilter }) =>\n+                  handleFilterChange({ statusFilter })\n+                }\n+              />\n+            )}\n+            {filterVisibility.date && (\n               <DateFilter\n                 dateFilter={dateFilter}\n                 onSelect={(dateFilter) => handleFilterChange({ dateFilter })}\n               />\n+            )}\n+            {filterVisibility.title && (\n               <SearchTitlesFilter\n                 width={26}\n                 height={14}\n@@ -267,10 +288,10 @@ function Search(props: Props) {\n                 }}\n                 checked={titleFilter}\n               />\n-            </Filters>\n-          )}\n+            )}\n+          </Filters>\n         </form>\n-        {query ? (\n+        {isSearchable ? (\n           <>\n             {error ? (\n               <Fade>\n@@ -322,7 +343,7 @@ function Search(props: Props) {\n               />\n             </ResultList>\n           </>\n-        ) : documentId || collectionId ? null : (\n+        ) : documentId ? null : (\n           <RecentSearches ref={recentSearchesRef} onEscape={handleEscape} />\n         )}\n       </ResultsWrapper>\n\ndiff --git a/app/scenes/Search/components/CollectionFilter.tsx b/app/scenes/Search/components/CollectionFilter.tsx\nindex e7bb01e2a907..909424e00414 100644\n--- a/app/scenes/Search/components/CollectionFilter.tsx\n+++ b/app/scenes/Search/components/CollectionFilter.tsx\n@@ -1,7 +1,9 @@\n import { observer } from \"mobx-react\";\n+import { CollectionIcon as SVGCollectionIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import FilterOptions from \"~/components/FilterOptions\";\n+import CollectionIcon from \"~/components/Icons/CollectionIcon\";\n import useStores from \"~/hooks/useStores\";\n \n type Props = {\n@@ -16,14 +18,16 @@ function CollectionFilter(props: Props) {\n   const { collections } = useStores();\n   const { onSelect, collectionId } = props;\n   const options = React.useMemo(() => {\n-    const collectionOptions = collections.orderedData.map((user) => ({\n-      key: user.id,\n-      label: user.name,\n+    const collectionOptions = collections.orderedData.map((collection) => ({\n+      key: collection.id,\n+      label: collection.name,\n+      icon: <CollectionIcon collection={collection} size={18} />,\n     }));\n     return [\n       {\n         key: \"\",\n         label: t(\"Any collection\"),\n+        icon: <SVGCollectionIcon size={18} />,\n       },\n       ...collectionOptions,\n     ];\n\ndiff --git a/app/stores/DocumentsStore.ts b/app/stores/DocumentsStore.ts\nindex 8639ecefe226..7e8af7c4a11a 100644\n--- a/app/stores/DocumentsStore.ts\n+++ b/app/stores/DocumentsStore.ts\n@@ -33,6 +33,7 @@ type FetchPageParams = PaginationParams & {\n };\n \n export type SearchParams = {\n+  query?: string;\n   offset?: number;\n   limit?: number;\n   dateFilter?: DateFilter;\n@@ -412,14 +413,10 @@ export default class DocumentsStore extends Store<Document> {\n     this.fetchNamedPage(\"list\", options);\n \n   @action\n-  searchTitles = async (\n-    query: string,\n-    options?: SearchParams\n-  ): Promise<SearchResult[]> => {\n+  searchTitles = async (options?: SearchParams): Promise<SearchResult[]> => {\n     const compactedOptions = omitBy(options, (o) => !o);\n     const res = await client.post(\"/documents.search_titles\", {\n       ...compactedOptions,\n-      query,\n     });\n     invariant(res?.data, \"Search response should be available\");\n \n@@ -447,14 +444,10 @@ export default class DocumentsStore extends Store<Document> {\n   };\n \n   @action\n-  search = async (\n-    query: string,\n-    options: SearchParams\n-  ): Promise<SearchResult[]> => {\n+  search = async (options: SearchParams): Promise<SearchResult[]> => {\n     const compactedOptions = omitBy(options, (o) => !o);\n     const res = await client.post(\"/documents.search\", {\n       ...compactedOptions,\n-      query,\n     });\n     invariant(res?.data, \"Search response should be available\");\n \n\ndiff --git a/app/types.ts b/app/types.ts\nindex 5f9d4908ccd2..10220a72ba1f 100644\n--- a/app/types.ts\n+++ b/app/types.ts\n@@ -166,7 +166,7 @@ export type PaginationParams = {\n export type SearchResult = {\n   id: string;\n   ranking: number;\n-  context: string;\n+  context?: string;\n   document: Document;\n };\n \n\ndiff --git a/plugins/slack/server/api/hooks.ts b/plugins/slack/server/api/hooks.ts\nindex 6c93ea3013da..b7e9d8bf7b24 100644\n--- a/plugins/slack/server/api/hooks.ts\n+++ b/plugins/slack/server/api/hooks.ts\n@@ -222,6 +222,7 @@ router.post(\n     }\n \n     const options = {\n+      query: text,\n       limit: 5,\n     };\n \n@@ -235,11 +236,7 @@ router.post(\n       return;\n     }\n \n-    const { results, total } = await SearchHelper.searchForUser(\n-      user,\n-      text,\n-      options\n-    );\n+    const { results, total } = await SearchHelper.searchForUser(user, options);\n \n     await SearchQuery.create({\n       userId: user ? user.id : null,\n\ndiff --git a/server/models/helpers/SearchHelper.ts b/server/models/helpers/SearchHelper.ts\nindex 365add62d428..9acd8309520a 100644\n--- a/server/models/helpers/SearchHelper.ts\n+++ b/server/models/helpers/SearchHelper.ts\n@@ -3,7 +3,15 @@ import escapeRegExp from \"lodash/escapeRegExp\";\n import find from \"lodash/find\";\n import map from \"lodash/map\";\n import queryParser from \"pg-tsquery\";\n-import { Op, Sequelize, WhereOptions } from \"sequelize\";\n+import {\n+  BindOrReplacements,\n+  FindAttributeOptions,\n+  FindOptions,\n+  Op,\n+  Order,\n+  Sequelize,\n+  WhereOptions,\n+} from \"sequelize\";\n import { DateFilter, StatusFilter } from \"@shared/types\";\n import { regexIndexOf, regexLastIndexOf } from \"@shared/utils/string\";\n import { getUrls } from \"@shared/utils/urls\";\n@@ -21,7 +29,7 @@ type SearchResponse = {\n     /** The search ranking, for sorting results */\n     ranking: number;\n     /** A snippet of contextual text around the search result */\n-    context: string;\n+    context?: string;\n     /** The document result */\n     document: Document;\n   }[];\n@@ -34,6 +42,8 @@ type SearchOptions = {\n   limit?: number;\n   /** The query offset for pagination */\n   offset?: number;\n+  /** The text to search for */\n+  query?: string;\n   /** Limit results to a collection. Authorization is presumed to have been done before passing to this helper. */\n   collectionId?: string | null;\n   /** Limit results to a shared document. */\n@@ -67,12 +77,11 @@ export default class SearchHelper {\n \n   public static async searchForTeam(\n     team: Team,\n-    query: string,\n     options: SearchOptions = {}\n   ): Promise<SearchResponse> {\n-    const { limit = 15, offset = 0 } = options;\n+    const { limit = 15, offset = 0, query } = options;\n \n-    const where = await this.buildWhere(team, query, {\n+    const where = await this.buildWhere(team, {\n       ...options,\n       statusFilter: [...(options.statusFilter || []), StatusFilter.Published],\n     });\n@@ -92,34 +101,19 @@ export default class SearchHelper {\n       });\n     }\n \n-    const replacements = {\n-      query: this.webSearchQuery(query),\n-    };\n+    const findOptions = this.buildFindOptions(query);\n \n     try {\n       const resultsQuery = Document.unscoped().findAll({\n-        attributes: [\n-          \"id\",\n-          [\n-            Sequelize.literal(\n-              `ts_rank(\"searchVector\", to_tsquery('english', :query))`\n-            ),\n-            \"searchRanking\",\n-          ],\n-        ],\n-        replacements,\n+        ...findOptions,\n         where,\n-        order: [\n-          [\"searchRanking\", \"DESC\"],\n-          [\"updatedAt\", \"DESC\"],\n-        ],\n         limit,\n         offset,\n       }) as any as Promise<RankedDocument[]>;\n \n       const countQuery = Document.unscoped().count({\n         // @ts-expect-error Types are incorrect for count\n-        replacements,\n+        replacements: findOptions.replacements,\n         where,\n       }) as any as Promise<number>;\n       const [results, count] = await Promise.all([resultsQuery, countQuery]);\n@@ -138,7 +132,12 @@ export default class SearchHelper {\n         ],\n       });\n \n-      return this.buildResponse(query, results, documents, count);\n+      return this.buildResponse({\n+        query,\n+        results,\n+        documents,\n+        count,\n+      });\n     } catch (err) {\n       if (err.message.includes(\"syntax error in tsquery\")) {\n         throw ValidationError(\"Invalid search query\");\n@@ -149,17 +148,18 @@ export default class SearchHelper {\n \n   public static async searchTitlesForUser(\n     user: User,\n-    query: string,\n     options: SearchOptions = {}\n   ): Promise<Document[]> {\n-    const { limit = 15, offset = 0 } = options;\n-    const where = await this.buildWhere(user, undefined, options);\n+    const { limit = 15, offset = 0, query, ...rest } = options;\n+    const where = await this.buildWhere(user, rest);\n \n-    where[Op.and].push({\n-      title: {\n-        [Op.iLike]: `%${query}%`,\n-      },\n-    });\n+    if (query) {\n+      where[Op.and].push({\n+        title: {\n+          [Op.iLike]: `%${query}%`,\n+        },\n+      });\n+    }\n \n     const include = [\n       {\n@@ -206,16 +206,13 @@ export default class SearchHelper {\n \n   public static async searchForUser(\n     user: User,\n-    query: string,\n     options: SearchOptions = {}\n   ): Promise<SearchResponse> {\n-    const { limit = 15, offset = 0 } = options;\n+    const { limit = 15, offset = 0, query } = options;\n \n-    const where = await this.buildWhere(user, query, options);\n+    const where = await this.buildWhere(user, options);\n \n-    const queryReplacements = {\n-      query: this.webSearchQuery(query),\n-    };\n+    const findOptions = this.buildFindOptions(query);\n \n     const include = [\n       {\n@@ -230,23 +227,10 @@ export default class SearchHelper {\n \n     try {\n       const results = (await Document.unscoped().findAll({\n-        attributes: [\n-          \"id\",\n-          [\n-            Sequelize.literal(\n-              `ts_rank(\"searchVector\", to_tsquery('english', :query))`\n-            ),\n-            \"searchRanking\",\n-          ],\n-        ],\n+        ...findOptions,\n         subQuery: false,\n         include,\n-        replacements: queryReplacements,\n         where,\n-        order: [\n-          [\"searchRanking\", \"DESC\"],\n-          [\"updatedAt\", \"DESC\"],\n-        ],\n         limit,\n         offset,\n       })) as any as RankedDocument[];\n@@ -255,7 +239,7 @@ export default class SearchHelper {\n         // @ts-expect-error Types are incorrect for count\n         subQuery: false,\n         include,\n-        replacements: queryReplacements,\n+        replacements: findOptions.replacements,\n         where,\n       }) as any as Promise<number>;\n \n@@ -284,7 +268,12 @@ export default class SearchHelper {\n           : countQuery,\n       ]);\n \n-      return this.buildResponse(query, results, documents, count);\n+      return this.buildResponse({\n+        query,\n+        results,\n+        documents,\n+        count,\n+      });\n     } catch (err) {\n       if (err.message.includes(\"syntax error in tsquery\")) {\n         throw ValidationError(\"Invalid search query\");\n@@ -293,6 +282,25 @@ export default class SearchHelper {\n     }\n   }\n \n+  private static buildFindOptions(query?: string): FindOptions {\n+    const attributes: FindAttributeOptions = [\"id\"];\n+    const replacements: BindOrReplacements = {};\n+    const order: Order = [[\"updatedAt\", \"DESC\"]];\n+\n+    if (query) {\n+      attributes.push([\n+        Sequelize.literal(\n+          `ts_rank(\"searchVector\", to_tsquery('english', :query))`\n+        ),\n+        \"searchRanking\",\n+      ]);\n+      replacements[\"query\"] = this.webSearchQuery(query);\n+      order.unshift([\"searchRanking\", \"DESC\"]);\n+    }\n+\n+    return { attributes, replacements, order };\n+  }\n+\n   private static buildResultContext(document: Document, query: string) {\n     const quotedQueries = Array.from(query.matchAll(/\"([^\"]*)\"/g));\n     const text = DocumentHelper.toPlainText(document);\n@@ -349,11 +357,7 @@ export default class SearchHelper {\n     return context.slice(startIndex, endIndex);\n   }\n \n-  private static async buildWhere(\n-    model: User | Team,\n-    query: string | undefined,\n-    options: SearchOptions\n-  ) {\n+  private static async buildWhere(model: User | Team, options: SearchOptions) {\n     const teamId = model instanceof Team ? model.id : model.teamId;\n     const where: WhereOptions<Document> = {\n       teamId,\n@@ -459,15 +463,15 @@ export default class SearchHelper {\n       });\n     }\n \n-    if (query) {\n+    if (options.query) {\n       // find words that look like urls, these should be treated separately as the postgres full-text\n       // index will generally not match them.\n-      const likelyUrls = getUrls(query);\n+      const likelyUrls = getUrls(options.query);\n \n       // remove likely urls, and escape the rest of the query.\n       const limitedQuery = this.escapeQuery(\n         likelyUrls\n-          .reduce((q, url) => q.replace(url, \"\"), query)\n+          .reduce((q, url) => q.replace(url, \"\"), options.query)\n           .slice(0, this.maxQueryLength)\n           .trim()\n       );\n@@ -510,12 +514,17 @@ export default class SearchHelper {\n     return where;\n   }\n \n-  private static buildResponse(\n-    query: string,\n-    results: RankedDocument[],\n-    documents: Document[],\n-    count: number\n-  ): SearchResponse {\n+  private static buildResponse({\n+    query,\n+    results,\n+    documents,\n+    count,\n+  }: {\n+    query?: string;\n+    results: RankedDocument[];\n+    documents: Document[];\n+    count: number;\n+  }): SearchResponse {\n     return {\n       results: map(results, (result) => {\n         const document = find(documents, {\n@@ -524,7 +533,7 @@ export default class SearchHelper {\n \n         return {\n           ranking: result.dataValues.searchRanking,\n-          context: this.buildResultContext(document, query),\n+          context: query ? this.buildResultContext(document, query) : undefined,\n           document,\n         };\n       }),\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 3323eebda224..3cca38ab0ea3 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -914,8 +914,8 @@ router.post(\n   auth(),\n   pagination(),\n   rateLimiter(RateLimiterStrategy.OneHundredPerMinute),\n-  validate(T.DocumentsSearchSchema),\n-  async (ctx: APIContext<T.DocumentsSearchReq>) => {\n+  validate(T.DocumentsSearchTitlesSchema),\n+  async (ctx: APIContext<T.DocumentsSearchTitlesReq>) => {\n     const { query, statusFilter, dateFilter, collectionId, userId } =\n       ctx.input.body;\n     const { offset, limit } = ctx.state.pagination;\n@@ -933,7 +933,8 @@ router.post(\n       collaboratorIds = [userId];\n     }\n \n-    const documents = await SearchHelper.searchTitlesForUser(user, query, {\n+    const documents = await SearchHelper.searchTitlesForUser(user, {\n+      query,\n       dateFilter,\n       statusFilter,\n       collectionId,\n@@ -999,7 +1000,8 @@ router.post(\n       const team = await share.$get(\"team\");\n       invariant(team, \"Share must belong to a team\");\n \n-      response = await SearchHelper.searchForTeam(team, query, {\n+      response = await SearchHelper.searchForTeam(team, {\n+        query,\n         collectionId: document.collectionId,\n         share,\n         dateFilter,\n@@ -1041,7 +1043,8 @@ router.post(\n         collaboratorIds = [userId];\n       }\n \n-      response = await SearchHelper.searchForUser(user, query, {\n+      response = await SearchHelper.searchForUser(user, {\n+        query,\n         collaboratorIds,\n         collectionId,\n         documentIds,\n@@ -1069,7 +1072,7 @@ router.post(\n \n     // When requesting subsequent pages of search results we don't want to record\n     // duplicate search query records\n-    if (offset === 0) {\n+    if (query && offset === 0) {\n       await SearchQuery.create({\n         userId: user?.id,\n         teamId,\n\ndiff --git a/server/routes/api/documents/schema.ts b/server/routes/api/documents/schema.ts\nindex ed3e76c538f7..ac8b8fe86bbc 100644\n--- a/server/routes/api/documents/schema.ts\n+++ b/server/routes/api/documents/schema.ts\n@@ -36,9 +36,30 @@ const DateFilterSchema = z.object({\n     .optional(),\n });\n \n-const SearchQuerySchema = z.object({\n-  /** Query for search */\n-  query: z.string().refine((v) => v.trim() !== \"\"),\n+const BaseSearchSchema = DateFilterSchema.extend({\n+  /** Filter results for team based on the collection */\n+  collectionId: z.string().uuid().optional(),\n+\n+  /** Filter results based on user */\n+  userId: z.string().uuid().optional(),\n+\n+  /** Filter results based on content within a document and it's children */\n+  documentId: z.string().uuid().optional(),\n+\n+  /** Document statuses to include in results */\n+  statusFilter: z.nativeEnum(StatusFilter).array().optional(),\n+\n+  /** Filter results for the team derived from shareId */\n+  shareId: z\n+    .string()\n+    .refine((val) => isUUID(val) || UrlHelper.SHARE_URL_SLUG_REGEX.test(val))\n+    .optional(),\n+\n+  /** Min words to be shown in the results snippets */\n+  snippetMinWords: z.number().default(20),\n+\n+  /** Max words to be accomodated in the results snippets */\n+  snippetMaxWords: z.number().default(30),\n });\n \n const BaseIdSchema = z.object({\n@@ -153,34 +174,24 @@ export const DocumentsRestoreSchema = BaseSchema.extend({\n export type DocumentsRestoreReq = z.infer<typeof DocumentsRestoreSchema>;\n \n export const DocumentsSearchSchema = BaseSchema.extend({\n-  body: SearchQuerySchema.merge(DateFilterSchema).extend({\n-    /** Filter results for team based on the collection */\n-    collectionId: z.string().uuid().optional(),\n-\n-    /** Filter results based on user */\n-    userId: z.string().uuid().optional(),\n-\n-    /** Filter results based on content within a document and it's children */\n-    documentId: z.string().uuid().optional(),\n-\n-    /** Document statuses to include in results */\n-    statusFilter: z.nativeEnum(StatusFilter).array().optional(),\n-\n-    /** Filter results for the team derived from shareId */\n-    shareId: z\n-      .string()\n-      .refine((val) => isUUID(val) || UrlHelper.SHARE_URL_SLUG_REGEX.test(val))\n-      .optional(),\n+  body: BaseSearchSchema.extend({\n+    /** Query for search */\n+    query: z.string().optional(),\n+  }),\n+});\n \n-    /** Min words to be shown in the results snippets */\n-    snippetMinWords: z.number().default(20),\n+export type DocumentsSearchReq = z.infer<typeof DocumentsSearchSchema>;\n \n-    /** Max words to be accomodated in the results snippets */\n-    snippetMaxWords: z.number().default(30),\n+export const DocumentsSearchTitlesSchema = BaseSchema.extend({\n+  body: BaseSearchSchema.extend({\n+    /** Query for search */\n+    query: z.string().refine((val) => val.trim() !== \"\"),\n   }),\n });\n \n-export type DocumentsSearchReq = z.infer<typeof DocumentsSearchSchema>;\n+export type DocumentsSearchTitlesReq = z.infer<\n+  typeof DocumentsSearchTitlesSchema\n+>;\n \n export const DocumentsDuplicateSchema = BaseSchema.extend({\n   body: BaseIdSchema.extend({\n",
    "test_patch": "diff --git a/server/models/helpers/SearchHelper.test.ts b/server/models/helpers/SearchHelper.test.ts\nindex a4145621791c..aa5323e878c6 100644\n--- a/server/models/helpers/SearchHelper.test.ts\n+++ b/server/models/helpers/SearchHelper.test.ts\n@@ -27,11 +27,37 @@ describe(\"SearchHelper\", () => {\n         collectionId: collection.id,\n         title: \"test\",\n       });\n-      const { results } = await SearchHelper.searchForTeam(team, \"test\");\n+      const { results } = await SearchHelper.searchForTeam(team, {\n+        query: \"test\",\n+      });\n       expect(results.length).toBe(1);\n       expect(results[0].document?.id).toBe(document.id);\n     });\n \n+    test(\"should return search results from a collection without search term\", async () => {\n+      const team = await buildTeam();\n+      const collection = await buildCollection({\n+        teamId: team.id,\n+      });\n+      const documents = await Promise.all([\n+        buildDocument({\n+          teamId: team.id,\n+          collectionId: collection.id,\n+          title: \"document 1\",\n+        }),\n+        buildDocument({\n+          teamId: team.id,\n+          collectionId: collection.id,\n+          title: \"document 2\",\n+        }),\n+      ]);\n+      const { results } = await SearchHelper.searchForTeam(team);\n+      expect(results.length).toBe(2);\n+      expect(results.map((r) => r.document.id).sort()).toEqual(\n+        documents.map((doc) => doc.id).sort()\n+      );\n+    });\n+\n     test(\"should not return results from private collections without providing collectionId\", async () => {\n       const team = await buildTeam();\n       const collection = await buildCollection({\n@@ -43,7 +69,9 @@ describe(\"SearchHelper\", () => {\n         collectionId: collection.id,\n         title: \"test\",\n       });\n-      const { results } = await SearchHelper.searchForTeam(team, \"test\");\n+      const { results } = await SearchHelper.searchForTeam(team, {\n+        query: \"test\",\n+      });\n       expect(results.length).toBe(0);\n     });\n \n@@ -58,7 +86,8 @@ describe(\"SearchHelper\", () => {\n         collectionId: collection.id,\n         title: \"test\",\n       });\n-      const { results } = await SearchHelper.searchForTeam(team, \"test\", {\n+      const { results } = await SearchHelper.searchForTeam(team, {\n+        query: \"test\",\n         collectionId: collection.id,\n       });\n       expect(results.length).toBe(1);\n@@ -86,7 +115,8 @@ describe(\"SearchHelper\", () => {\n         includeChildDocuments: true,\n       });\n \n-      const { results } = await SearchHelper.searchForTeam(team, \"test\", {\n+      const { results } = await SearchHelper.searchForTeam(team, {\n+        query: \"test\",\n         collectionId: collection.id,\n         share,\n       });\n@@ -95,13 +125,17 @@ describe(\"SearchHelper\", () => {\n \n     test(\"should handle no collections\", async () => {\n       const team = await buildTeam();\n-      const { results } = await SearchHelper.searchForTeam(team, \"test\");\n+      const { results } = await SearchHelper.searchForTeam(team, {\n+        query: \"test\",\n+      });\n       expect(results.length).toBe(0);\n     });\n \n     test(\"should handle backslashes in search term\", async () => {\n       const team = await buildTeam();\n-      const { results } = await SearchHelper.searchForTeam(team, \"\\\\\\\\\");\n+      const { results } = await SearchHelper.searchForTeam(team, {\n+        query: \"\\\\\\\\\",\n+      });\n       expect(results.length).toBe(0);\n     });\n \n@@ -120,7 +154,9 @@ describe(\"SearchHelper\", () => {\n         collectionId: collection.id,\n         title: \"test number 2\",\n       });\n-      const { total } = await SearchHelper.searchForTeam(team, \"test\");\n+      const { total } = await SearchHelper.searchForTeam(team, {\n+        query: \"test\",\n+      });\n       expect(total).toBe(2);\n     });\n \n@@ -136,7 +172,9 @@ describe(\"SearchHelper\", () => {\n       });\n       document.title = \"change\";\n       await document.save();\n-      const { total } = await SearchHelper.searchForTeam(team, \"test number\");\n+      const { total } = await SearchHelper.searchForTeam(team, {\n+        query: \"test number\",\n+      });\n       expect(total).toBe(1);\n     });\n \n@@ -152,10 +190,9 @@ describe(\"SearchHelper\", () => {\n       });\n       document.title = \"change\";\n       await document.save();\n-      const { total } = await SearchHelper.searchForTeam(\n-        team,\n-        \"title doesn't exist\"\n-      );\n+      const { total } = await SearchHelper.searchForTeam(team, {\n+        query: \"title doesn't exist\",\n+      });\n       expect(total).toBe(0);\n     });\n   });\n@@ -181,16 +218,78 @@ describe(\"SearchHelper\", () => {\n         deletedAt: new Date(),\n         title: \"test\",\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \"test\");\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \"test\",\n+      });\n       expect(results.length).toBe(1);\n       expect(results[0].ranking).toBeTruthy();\n       expect(results[0].document?.id).toBe(document.id);\n     });\n \n+    test(\"should return search results for a user without search term\", async () => {\n+      const team = await buildTeam();\n+      const user = await buildUser({ teamId: team.id });\n+      const collection = await buildCollection({\n+        teamId: team.id,\n+        userId: user.id,\n+      });\n+      const documents = await Promise.all([\n+        buildDocument({\n+          teamId: team.id,\n+          userId: user.id,\n+          collectionId: collection.id,\n+          title: \"document 1\",\n+        }),\n+        buildDocument({\n+          teamId: team.id,\n+          userId: user.id,\n+          collectionId: collection.id,\n+          title: \"document 2\",\n+        }),\n+      ]);\n+      const { results } = await SearchHelper.searchForUser(user);\n+      expect(results.length).toBe(2);\n+      expect(results.map((r) => r.document.id).sort()).toEqual(\n+        documents.map((doc) => doc.id).sort()\n+      );\n+    });\n+\n+    test(\"should return search results from a collection without search term\", async () => {\n+      const team = await buildTeam();\n+      const user = await buildUser({ teamId: team.id });\n+      const collection = await buildCollection({\n+        teamId: team.id,\n+        userId: user.id,\n+      });\n+      const documents = await Promise.all([\n+        buildDocument({\n+          teamId: team.id,\n+          userId: user.id,\n+          collectionId: collection.id,\n+          title: \"document 1\",\n+        }),\n+        buildDocument({\n+          teamId: team.id,\n+          userId: user.id,\n+          collectionId: collection.id,\n+          title: \"document 2\",\n+        }),\n+      ]);\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        collectionId: collection.id,\n+      });\n+      expect(results.length).toBe(2);\n+      expect(results.map((r) => r.document.id).sort()).toEqual(\n+        documents.map((doc) => doc.id).sort()\n+      );\n+    });\n+\n     test(\"should handle no collections\", async () => {\n       const team = await buildTeam();\n       const user = await buildUser({ teamId: team.id });\n-      const { results } = await SearchHelper.searchForUser(user, \"test\");\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \"test\",\n+      });\n       expect(results.length).toBe(0);\n     });\n \n@@ -218,7 +317,8 @@ describe(\"SearchHelper\", () => {\n         title: \"test\",\n         archivedAt: new Date(),\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \"test\", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \"test\",\n         statusFilter: [StatusFilter.Draft],\n       });\n       expect(results.length).toBe(1);\n@@ -242,7 +342,8 @@ describe(\"SearchHelper\", () => {\n         permission: DocumentPermission.Read,\n       });\n \n-      const { results } = await SearchHelper.searchForUser(user, \"test\", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \"test\",\n         statusFilter: [StatusFilter.Published, StatusFilter.Archived],\n       });\n       expect(results.length).toBe(0);\n@@ -272,7 +373,8 @@ describe(\"SearchHelper\", () => {\n         title: \"test\",\n         archivedAt: new Date(),\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \"test\", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \"test\",\n         statusFilter: [StatusFilter.Published],\n       });\n       expect(results.length).toBe(1);\n@@ -308,7 +410,8 @@ describe(\"SearchHelper\", () => {\n         title: \"test\",\n         archivedAt: new Date(),\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \"test\", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \"test\",\n         statusFilter: [StatusFilter.Archived],\n       });\n       expect(results.length).toBe(1);\n@@ -335,7 +438,8 @@ describe(\"SearchHelper\", () => {\n         title: \"test\",\n         archivedAt: new Date(),\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \"test\", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \"test\",\n         statusFilter: [StatusFilter.Archived, StatusFilter.Published],\n       });\n       expect(results.length).toBe(2);\n@@ -362,7 +466,8 @@ describe(\"SearchHelper\", () => {\n         title: \"archived not draft\",\n         archivedAt: new Date(),\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \"draft\", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \"draft\",\n         statusFilter: [StatusFilter.Published, StatusFilter.Draft],\n       });\n       expect(results.length).toBe(2);\n@@ -389,7 +494,8 @@ describe(\"SearchHelper\", () => {\n         title: \"archived not draft\",\n         archivedAt: new Date(),\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \"draft\", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \"draft\",\n         statusFilter: [StatusFilter.Draft, StatusFilter.Archived],\n       });\n       expect(results.length).toBe(2);\n@@ -414,7 +520,9 @@ describe(\"SearchHelper\", () => {\n         collectionId: collection.id,\n         title: \"test number 2\",\n       });\n-      const { total } = await SearchHelper.searchForUser(user, \"test\");\n+      const { total } = await SearchHelper.searchForUser(user, {\n+        query: \"test\",\n+      });\n       expect(total).toBe(2);\n     });\n \n@@ -433,7 +541,9 @@ describe(\"SearchHelper\", () => {\n       });\n       document.title = \"change\";\n       await document.save();\n-      const { total } = await SearchHelper.searchForUser(user, \"test number\");\n+      const { total } = await SearchHelper.searchForUser(user, {\n+        query: \"test number\",\n+      });\n       expect(total).toBe(1);\n     });\n \n@@ -452,10 +562,9 @@ describe(\"SearchHelper\", () => {\n       });\n       document.title = \"change\";\n       await document.save();\n-      const { total } = await SearchHelper.searchForUser(\n-        user,\n-        \"title doesn't exist\"\n-      );\n+      const { total } = await SearchHelper.searchForUser(user, {\n+        query: \"title doesn't exist\",\n+      });\n       expect(total).toBe(0);\n     });\n \n@@ -474,7 +583,9 @@ describe(\"SearchHelper\", () => {\n       });\n       document.title = \"change\";\n       await document.save();\n-      const { total } = await SearchHelper.searchForUser(user, `\"test number\"`);\n+      const { total } = await SearchHelper.searchForUser(user, {\n+        query: `\"test number\"`,\n+      });\n       expect(total).toBe(1);\n     });\n \n@@ -493,7 +604,9 @@ describe(\"SearchHelper\", () => {\n       });\n       document.title = \"change\";\n       await document.save();\n-      const { total } = await SearchHelper.searchForUser(user, \"env: \");\n+      const { total } = await SearchHelper.searchForUser(user, {\n+        query: \"env: \",\n+      });\n       expect(total).toBe(1);\n     });\n   });\n@@ -512,7 +625,9 @@ describe(\"SearchHelper\", () => {\n         collectionId: collection.id,\n         title: \"test\",\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \"test\");\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \"test\",\n+      });\n       expect(documents.length).toBe(1);\n       expect(documents[0]?.id).toBe(document.id);\n     });\n@@ -545,7 +660,8 @@ describe(\"SearchHelper\", () => {\n         collectionId: collection1.id,\n         title: \"test\",\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \"test\", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \"test\",\n         collectionId: collection.id,\n       });\n       expect(documents.length).toBe(1);\n@@ -555,7 +671,9 @@ describe(\"SearchHelper\", () => {\n     test(\"should handle no collections\", async () => {\n       const team = await buildTeam();\n       const user = await buildUser({ teamId: team.id });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \"test\");\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \"test\",\n+      });\n       expect(documents.length).toBe(0);\n     });\n \n@@ -583,7 +701,8 @@ describe(\"SearchHelper\", () => {\n         title: \"test\",\n         archivedAt: new Date(),\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \"test\", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \"test\",\n         statusFilter: [StatusFilter.Draft],\n       });\n       expect(documents.length).toBe(1);\n@@ -613,7 +732,8 @@ describe(\"SearchHelper\", () => {\n         title: \"test\",\n         archivedAt: new Date(),\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \"test\", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \"test\",\n         statusFilter: [StatusFilter.Published],\n       });\n       expect(documents.length).toBe(1);\n@@ -649,7 +769,8 @@ describe(\"SearchHelper\", () => {\n         title: \"test\",\n         archivedAt: new Date(),\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \"test\", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \"test\",\n         statusFilter: [StatusFilter.Archived],\n       });\n       expect(documents.length).toBe(1);\n@@ -676,7 +797,8 @@ describe(\"SearchHelper\", () => {\n         title: \"test\",\n         archivedAt: new Date(),\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \"test\", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \"test\",\n         statusFilter: [StatusFilter.Archived, StatusFilter.Published],\n       });\n       expect(documents.length).toBe(2);\n@@ -703,7 +825,8 @@ describe(\"SearchHelper\", () => {\n         title: \"archived not draft\",\n         archivedAt: new Date(),\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \"draft\", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \"draft\",\n         statusFilter: [StatusFilter.Published, StatusFilter.Draft],\n       });\n       expect(documents.length).toBe(2);\n@@ -730,7 +853,8 @@ describe(\"SearchHelper\", () => {\n         title: \"archived not draft\",\n         archivedAt: new Date(),\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \"draft\", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \"draft\",\n         statusFilter: [StatusFilter.Draft, StatusFilter.Archived],\n       });\n       expect(documents.length).toBe(2);\n\ndiff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex 40afef9f3a6e..3a4adcdd647a 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -1862,17 +1862,6 @@ describe(\"#documents.search\", () => {\n     expect(body.data.length).toEqual(0);\n   });\n \n-  it(\"should expect a query\", async () => {\n-    const user = await buildUser();\n-    const res = await server.post(\"/api/documents.search\", {\n-      body: {\n-        token: user.getJwtToken(),\n-        query: \"   \",\n-      },\n-    });\n-    expect(res.status).toEqual(400);\n-  });\n-\n   it(\"should not allow unknown dateFilter values\", async () => {\n     const user = await buildUser();\n     const res = await server.post(\"/api/documents.search\", {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7760",
    "pr_id": 7760,
    "issue_id": 5509,
    "repo": "outline/outline",
    "problem_statement": "Remove `suppressImplicitAnyIndexErrors` TS rule\nCurrently 105 errors need fixing with this rule disabled\r\n\r\nhttps://github.com/outline/outline/blob/f843a20a544cd0e22e54d1377347a682ca9091df/tsconfig.json#L24-L25",
    "issue_word_count": 20,
    "test_files_count": 1,
    "non_test_files_count": 29,
    "pr_changed_files": [
      "app/components/ConfirmMoveDialog.tsx",
      "app/components/ConnectionStatus.tsx",
      "app/components/LocaleTime.tsx",
      "app/components/PaginatedList.tsx",
      "app/editor/components/EmojiMenu.tsx",
      "app/editor/menus/code.tsx",
      "app/hooks/useUserLocale.ts",
      "app/models/FileOperation.ts",
      "app/models/User.ts",
      "app/models/base/Model.ts",
      "app/models/decorators/Relation.ts",
      "app/scenes/Collection/components/MembershipPreview.tsx",
      "app/scenes/Invite.tsx",
      "app/scenes/Settings/Members.tsx",
      "app/scenes/Settings/Shares.tsx",
      "app/scenes/Settings/components/FileOperationListItem.tsx",
      "app/stores/GroupMembershipsStore.ts",
      "app/stores/MembershipsStore.ts",
      "app/stores/RootStore.ts",
      "app/stores/base/Store.ts",
      "app/utils/date.ts",
      "app/utils/download.ts",
      "app/utils/language.ts",
      "app/utils/pageVisibility.ts",
      "plugins/slack/client/components/SlackListItem.tsx",
      "plugins/slack/server/api/hooks.ts",
      "plugins/slack/shared/SlackUtils.ts",
      "plugins/webhooks/server/tasks/DeliverWebhookTask.test.ts",
      "plugins/webhooks/server/tasks/DeliverWebhookTask.ts",
      "server/emails/templates/index.ts"
    ],
    "pr_changed_test_files": [
      "plugins/webhooks/server/tasks/DeliverWebhookTask.test.ts"
    ],
    "base_commit": "0f8ac54bcbe39e982ee48842c3a42d416330f9d6",
    "head_commit": "04fc3c69883444ba375a351d1bfcc3f0d64b52e8",
    "repo_url": "https://github.com/outline/outline/pull/7760",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7760",
    "dockerfile": "",
    "pr_merged_at": "2024-10-11T19:46:46.000Z",
    "patch": "diff --git a/app/components/ConfirmMoveDialog.tsx b/app/components/ConfirmMoveDialog.tsx\nindex 3af9ee0cc4b0..e7b3371700a3 100644\n--- a/app/components/ConfirmMoveDialog.tsx\n+++ b/app/components/ConfirmMoveDialog.tsx\n@@ -21,11 +21,13 @@ function ConfirmMoveDialog({ collection, item, ...rest }: Props) {\n   const { documents, dialogs, collections } = useStores();\n   const { t } = useTranslation();\n   const prevCollection = collections.get(item.collectionId!);\n-  const accessMapping = {\n-    [CollectionPermission.ReadWrite]: t(\"view and edit access\"),\n-    [CollectionPermission.Read]: t(\"view only access\"),\n-    null: t(\"no access\"),\n-  };\n+  const accessMapping: Record<Partial<CollectionPermission> | \"null\", string> =\n+    {\n+      [CollectionPermission.Admin]: t(\"manage access\"),\n+      [CollectionPermission.ReadWrite]: t(\"view and edit access\"),\n+      [CollectionPermission.Read]: t(\"view only access\"),\n+      null: t(\"no access\"),\n+    };\n \n   const handleSubmit = async () => {\n     await documents.move({\n\ndiff --git a/app/components/ConnectionStatus.tsx b/app/components/ConnectionStatus.tsx\nindex 41234608d2cb..6d799596335c 100644\n--- a/app/components/ConnectionStatus.tsx\n+++ b/app/components/ConnectionStatus.tsx\n@@ -35,7 +35,7 @@ function ConnectionStatus() {\n   };\n \n   const message = ui.multiplayerErrorCode\n-    ? codeToMessage[ui.multiplayerErrorCode]\n+    ? codeToMessage[ui.multiplayerErrorCode as keyof typeof codeToMessage]\n     : undefined;\n \n   return ui.multiplayerStatus === \"connecting\" ||\n\ndiff --git a/app/components/LocaleTime.tsx b/app/components/LocaleTime.tsx\nindex 53efa133187a..abc1808ca6c2 100644\n--- a/app/components/LocaleTime.tsx\n+++ b/app/components/LocaleTime.tsx\n@@ -39,12 +39,15 @@ const LocaleTime: React.FC<Props> = ({\n   relative,\n   tooltipDelay,\n }: Props) => {\n-  const userLocale: string = useUserLocale() || \"\";\n-  const dateFormatLong = {\n+  const userLocale = useUserLocale();\n+  const dateFormatLong: Record<string, string> = {\n     en_US: \"MMMM do, yyyy h:mm a\",\n     fr_FR: \"'Le 'd MMMM yyyy 'à' H:mm\",\n   };\n-  const formatLocaleLong = dateFormatLong[userLocale] ?? \"MMMM do, yyyy h:mm a\";\n+  const formatLocaleLong =\n+    (userLocale ? dateFormatLong[userLocale] : undefined) ??\n+    \"MMMM do, yyyy h:mm a\";\n+  // @ts-expect-error fallback to formatLocaleLong\n   const formatLocale = format?.[userLocale] ?? formatLocaleLong;\n   const [_, setMinutesMounted] = React.useState(0); // eslint-disable-line @typescript-eslint/no-unused-vars\n   const callback = React.useRef<() => void>();\n\ndiff --git a/app/components/PaginatedList.tsx b/app/components/PaginatedList.tsx\nindex dd8ecf474c05..1784b2177f8f 100644\n--- a/app/components/PaginatedList.tsx\n+++ b/app/components/PaginatedList.tsx\n@@ -19,7 +19,8 @@ export interface PaginatedItem {\n }\n \n type Props<T> = WithTranslation &\n-  RootStore & {\n+  RootStore &\n+  React.HTMLAttributes<HTMLDivElement> & {\n     fetch?: (\n       options: Record<string, any> | undefined\n     ) => Promise<T[] | undefined> | undefined;\n\ndiff --git a/app/editor/components/EmojiMenu.tsx b/app/editor/components/EmojiMenu.tsx\nindex ce8946aa87f3..c2e21bacbffe 100644\n--- a/app/editor/components/EmojiMenu.tsx\n+++ b/app/editor/components/EmojiMenu.tsx\n@@ -29,6 +29,7 @@ const EmojiMenu = (props: Props) => {\n         .map((item) => {\n           // We snake_case the shortcode for backwards compatability with gemoji to\n           // avoid multiple formats being written into documents.\n+          // @ts-expect-error emojiMartToGemoji key\n           const shortcode = snakeCase(emojiMartToGemoji[item.id] || item.id);\n           const emoji = item.value;\n \n\ndiff --git a/app/editor/menus/code.tsx b/app/editor/menus/code.tsx\nindex 509deb432f55..07fa0b7da306 100644\n--- a/app/editor/menus/code.tsx\n+++ b/app/editor/menus/code.tsx\n@@ -14,7 +14,10 @@ export default function codeMenuItems(\n ): MenuItem[] {\n   const node = state.selection.$from.node();\n \n-  const allLanguages = Object.entries(LANGUAGES);\n+  const allLanguages = Object.entries(LANGUAGES) as [\n+    keyof typeof LANGUAGES,\n+    string\n+  ][];\n   const frequentLanguages = getFrequentCodeLanguages();\n \n   const frequentLangMenuItems = frequentLanguages.map((value) => {\n@@ -49,6 +52,7 @@ export default function codeMenuItems(\n       visible: !readOnly,\n       name: \"code_block\",\n       icon: <ExpandedIcon />,\n+      // @ts-expect-error We have a fallback for incorrect mapping\n       label: LANGUAGES[node.attrs.language ?? \"none\"],\n       children: languageMenuItems,\n     },\n\ndiff --git a/app/hooks/useUserLocale.ts b/app/hooks/useUserLocale.ts\nindex 7a981589bebd..50bfe19fd9c3 100644\n--- a/app/hooks/useUserLocale.ts\n+++ b/app/hooks/useUserLocale.ts\n@@ -3,16 +3,9 @@ import useCurrentUser from \"./useCurrentUser\";\n /**\n  * Returns the user's locale, or undefined if the user is not logged in.\n  *\n- * @param languageCode Whether to only return the language code\n  * @returns The user's locale, or undefined if the user is not logged in\n  */\n-export default function useUserLocale(languageCode?: boolean) {\n+export default function useUserLocale() {\n   const user = useCurrentUser({ rejectOnEmpty: false });\n-\n-  if (!user?.language) {\n-    return undefined;\n-  }\n-\n-  const { language } = user;\n-  return languageCode ? language.split(\"_\")[0] : language;\n+  return user?.language;\n }\n\ndiff --git a/app/models/FileOperation.ts b/app/models/FileOperation.ts\nindex ba0bcdc7169a..2663efc23fb3 100644\n--- a/app/models/FileOperation.ts\n+++ b/app/models/FileOperation.ts\n@@ -1,5 +1,9 @@\n import { computed, observable } from \"mobx\";\n-import { FileOperationFormat, FileOperationType } from \"@shared/types\";\n+import {\n+  FileOperationFormat,\n+  FileOperationState,\n+  FileOperationType,\n+} from \"@shared/types\";\n import { bytesToHumanReadable } from \"@shared/utils/files\";\n import User from \"./User\";\n import Model from \"./base/Model\";\n@@ -10,7 +14,7 @@ class FileOperation extends Model {\n   id: string;\n \n   @observable\n-  state: string;\n+  state: FileOperationState;\n \n   name: string;\n \n\ndiff --git a/app/models/User.ts b/app/models/User.ts\nindex 175486ea5dc0..461b10651cca 100644\n--- a/app/models/User.ts\n+++ b/app/models/User.ts\n@@ -11,6 +11,7 @@ import {\n   UserRole,\n } from \"@shared/types\";\n import type { NotificationSettings } from \"@shared/types\";\n+import { locales } from \"@shared/utils/date\";\n import { client } from \"~/utils/ApiClient\";\n import Document from \"./Document\";\n import Group from \"./Group\";\n@@ -39,7 +40,7 @@ class User extends ParanoidModel {\n \n   @Field\n   @observable\n-  language: string;\n+  language: keyof typeof locales;\n \n   @Field\n   @observable\n\ndiff --git a/app/models/base/Model.ts b/app/models/base/Model.ts\nindex b876d0afb5d5..747eb4e710aa 100644\n--- a/app/models/base/Model.ts\n+++ b/app/models/base/Model.ts\n@@ -40,6 +40,7 @@ export default abstract class Model {\n    * @returns A promise that resolves when loading is complete.\n    */\n   async loadRelations(\n+    this: Model,\n     options: { withoutPolicies?: boolean } = {}\n   ): Promise<any> {\n     const relations = getRelationsForModelClass(\n@@ -62,7 +63,7 @@ export default abstract class Model {\n       if (\"fetch\" in store) {\n         const id = this[properties.idKey];\n         if (id) {\n-          promises.push(store.fetch(id));\n+          promises.push(store.fetch(id as string));\n         }\n       }\n     }\n@@ -145,6 +146,7 @@ export default abstract class Model {\n         if (key === \"initialized\") {\n           continue;\n         }\n+        // @ts-expect-error TODO\n         this[key] = data[key];\n       } catch (error) {\n         Logger.warn(`Error setting ${key} on model`, error);\n\ndiff --git a/app/models/decorators/Relation.ts b/app/models/decorators/Relation.ts\nindex b83d6467f39d..5a3f22b5cc06 100644\n--- a/app/models/decorators/Relation.ts\n+++ b/app/models/decorators/Relation.ts\n@@ -17,7 +17,7 @@ type RelationOptions<T = Model> = {\n \n type RelationProperties<T = Model> = {\n   /** The name of the property on the model that stores the ID of the relation. */\n-  idKey: string;\n+  idKey: keyof T;\n   /** A function that returns the class of the relation. */\n   relationClassResolver: () => typeof Model;\n   /** Options for the relation. */\n\ndiff --git a/app/scenes/Collection/components/MembershipPreview.tsx b/app/scenes/Collection/components/MembershipPreview.tsx\nindex 942abf8aea21..1c980a57ba67 100644\n--- a/app/scenes/Collection/components/MembershipPreview.tsx\n+++ b/app/scenes/Collection/components/MembershipPreview.tsx\n@@ -43,8 +43,12 @@ const MembershipPreview = ({ collection, limit = 8 }: Props) => {\n           memberships.fetchPage(options),\n           groupMemberships.fetchPage(options),\n         ]);\n-        setUsersCount(users[PAGINATION_SYMBOL].total);\n-        setGroupsCount(groups[PAGINATION_SYMBOL].total);\n+        if (users[PAGINATION_SYMBOL]) {\n+          setUsersCount(users[PAGINATION_SYMBOL].total);\n+        }\n+        if (groups[PAGINATION_SYMBOL]) {\n+          setGroupsCount(groups[PAGINATION_SYMBOL].total);\n+        }\n       } finally {\n         setIsLoading(false);\n       }\n\ndiff --git a/app/scenes/Invite.tsx b/app/scenes/Invite.tsx\nindex fb74cd1902f6..0d4e36be601c 100644\n--- a/app/scenes/Invite.tsx\n+++ b/app/scenes/Invite.tsx\n@@ -71,10 +71,11 @@ function Invite({ onSubmit }: Props) {\n     [onSubmit, invites, role, t, users]\n   );\n \n-  const handleChange = React.useCallback((ev, index) => {\n+  const handleChange = React.useCallback((ev, index: number) => {\n     setInvites((prevInvites) => {\n       const newInvites = [...prevInvites];\n-      newInvites[index][ev.target.name] = ev.target.value;\n+      newInvites[index][ev.target.name as keyof InviteRequest] =\n+        ev.target.value;\n       return newInvites;\n     });\n   }, []);\n\ndiff --git a/app/scenes/Settings/Members.tsx b/app/scenes/Settings/Members.tsx\nindex 53b22ecafbaf..48a496dc03f2 100644\n--- a/app/scenes/Settings/Members.tsx\n+++ b/app/scenes/Settings/Members.tsx\n@@ -62,7 +62,9 @@ function Members() {\n           filter,\n           role,\n         });\n-        setTotalPages(Math.ceil(response[PAGINATION_SYMBOL].total / limit));\n+        if (response[PAGINATION_SYMBOL]) {\n+          setTotalPages(Math.ceil(response[PAGINATION_SYMBOL].total / limit));\n+        }\n         setUserIds(response.map((u: User) => u.id));\n       } finally {\n         setIsLoading(false);\n\ndiff --git a/app/scenes/Settings/Shares.tsx b/app/scenes/Settings/Shares.tsx\nindex 7d8fd2970706..0b9c1e14598f 100644\n--- a/app/scenes/Settings/Shares.tsx\n+++ b/app/scenes/Settings/Shares.tsx\n@@ -47,7 +47,9 @@ function Shares() {\n           sort,\n           direction,\n         });\n-        setTotalPages(Math.ceil(response[PAGINATION_SYMBOL].total / limit));\n+        if (response[PAGINATION_SYMBOL]) {\n+          setTotalPages(Math.ceil(response[PAGINATION_SYMBOL].total / limit));\n+        }\n         setShareIds(response.map((u: Share) => u.id));\n       } finally {\n         setIsLoading(false);\n\ndiff --git a/app/scenes/Settings/components/FileOperationListItem.tsx b/app/scenes/Settings/components/FileOperationListItem.tsx\nindex bd1600a9da9f..8e5e932276ef 100644\n--- a/app/scenes/Settings/components/FileOperationListItem.tsx\n+++ b/app/scenes/Settings/components/FileOperationListItem.tsx\n@@ -38,7 +38,7 @@ const FileOperationListItem = ({ fileOperation }: Props) => {\n     [FileOperationState.Error]: t(\"Failed\"),\n   };\n \n-  const iconMapping = {\n+  const iconMapping: Record<FileOperationState, React.JSX.Element> = {\n     [FileOperationState.Creating]: <Spinner />,\n     [FileOperationState.Uploading]: <Spinner />,\n     [FileOperationState.Expired]: <ArchiveIcon color={theme.textTertiary} />,\n@@ -46,8 +46,9 @@ const FileOperationListItem = ({ fileOperation }: Props) => {\n     [FileOperationState.Error]: <WarningIcon color={theme.danger} />,\n   };\n \n-  const formatMapping = {\n+  const formatMapping: Record<FileOperationFormat, string> = {\n     [FileOperationFormat.JSON]: \"JSON\",\n+    [FileOperationFormat.Notion]: \"Notion\",\n     [FileOperationFormat.MarkdownZip]: \"Markdown\",\n     [FileOperationFormat.HTMLZip]: \"HTML\",\n     [FileOperationFormat.PDF]: \"PDF\",\n\ndiff --git a/app/stores/GroupMembershipsStore.ts b/app/stores/GroupMembershipsStore.ts\nindex 7624c6943fa6..ec0cd90a70b1 100644\n--- a/app/stores/GroupMembershipsStore.ts\n+++ b/app/stores/GroupMembershipsStore.ts\n@@ -5,7 +5,11 @@ import GroupMembership from \"~/models/GroupMembership\";\n import { PaginationParams } from \"~/types\";\n import { client } from \"~/utils/ApiClient\";\n import RootStore from \"./RootStore\";\n-import Store, { PAGINATION_SYMBOL, RPCAction } from \"./base/Store\";\n+import Store, {\n+  PAGINATION_SYMBOL,\n+  PaginatedResponse,\n+  RPCAction,\n+} from \"./base/Store\";\n \n export default class GroupMembershipsStore extends Store<GroupMembership> {\n   actions = [RPCAction.Create, RPCAction.Delete];\n@@ -24,7 +28,7 @@ export default class GroupMembershipsStore extends Store<GroupMembership> {\n         documentId?: string;\n         collectionId?: string;\n         groupId?: string;\n-      }): Promise<GroupMembership[]> => {\n+      }): Promise<PaginatedResponse<GroupMembership>> => {\n     this.isFetching = true;\n \n     try {\n@@ -41,7 +45,7 @@ export default class GroupMembershipsStore extends Store<GroupMembership> {\n         : await client.post(`/groupMemberships.list`, params);\n       invariant(res?.data, \"Data not available\");\n \n-      let response: GroupMembership[] = [];\n+      let response: PaginatedResponse<GroupMembership> = [];\n       runInAction(`GroupMembershipsStore#fetchPage`, () => {\n         res.data.groups?.forEach(this.rootStore.groups.add);\n         res.data.documents?.forEach(this.rootStore.documents.add);\n\ndiff --git a/app/stores/MembershipsStore.ts b/app/stores/MembershipsStore.ts\nindex 6210d744276c..61cb4b8de2b0 100644\n--- a/app/stores/MembershipsStore.ts\n+++ b/app/stores/MembershipsStore.ts\n@@ -5,7 +5,11 @@ import Membership from \"~/models/Membership\";\n import { PaginationParams } from \"~/types\";\n import { client } from \"~/utils/ApiClient\";\n import RootStore from \"./RootStore\";\n-import Store, { PAGINATION_SYMBOL, RPCAction } from \"./base/Store\";\n+import Store, {\n+  PAGINATION_SYMBOL,\n+  PaginatedResponse,\n+  RPCAction,\n+} from \"./base/Store\";\n \n export default class MembershipsStore extends Store<Membership> {\n   actions = [RPCAction.Create, RPCAction.Delete];\n@@ -17,14 +21,14 @@ export default class MembershipsStore extends Store<Membership> {\n   @action\n   fetchPage = async (\n     params: (PaginationParams & { id?: string }) | undefined\n-  ): Promise<Membership[]> => {\n+  ): Promise<PaginatedResponse<Membership>> => {\n     this.isFetching = true;\n \n     try {\n       const res = await client.post(`/collections.memberships`, params);\n       invariant(res?.data, \"Data not available\");\n \n-      let response: Membership[] = [];\n+      let response: PaginatedResponse<Membership> = [];\n       runInAction(`MembershipsStore#fetchPage`, () => {\n         res.data.users.forEach(this.rootStore.users.add);\n         response = res.data.memberships.map(this.add);\n\ndiff --git a/app/stores/RootStore.ts b/app/stores/RootStore.ts\nindex 297abde26a48..3182f5618f36 100644\n--- a/app/stores/RootStore.ts\n+++ b/app/stores/RootStore.ts\n@@ -102,14 +102,11 @@ export default class RootStore {\n    *\n    * @param modelName\n    */\n-  public getStoreForModelName<K extends keyof RootStore>(\n-    modelName: string\n-  ): RootStore[K] {\n+  public getStoreForModelName<K extends keyof RootStore>(modelName: string) {\n     const storeName = this.getStoreNameForModelName(modelName);\n     const store = this[storeName];\n     invariant(store, `No store found for model name \"${modelName}\"`);\n-\n-    return store;\n+    return store as RootStore[K];\n   }\n \n   /**\n@@ -118,8 +115,9 @@ export default class RootStore {\n   public clear() {\n     Object.getOwnPropertyNames(this)\n       .filter((key) => [\"auth\", \"ui\"].includes(key) === false)\n-      .forEach((key) => {\n-        this[key]?.clear?.();\n+      .forEach((key: keyof RootStore) => {\n+        // @ts-expect-error clear exists on all stores\n+        \"clear\" in this[key] && this[key].clear();\n       });\n   }\n \n@@ -128,7 +126,10 @@ export default class RootStore {\n    *\n    * @param StoreClass\n    */\n-  private registerStore<T = typeof Store>(StoreClass: T, name?: string) {\n+  private registerStore<T = typeof Store>(\n+    StoreClass: T,\n+    name?: keyof RootStore\n+  ) {\n     // @ts-expect-error TS thinks we are instantiating an abstract class.\n     const store = new StoreClass(this);\n     const storeName = name ?? this.getStoreNameForModelName(store.modelName);\n@@ -136,6 +137,6 @@ export default class RootStore {\n   }\n \n   private getStoreNameForModelName(modelName: string) {\n-    return pluralize(lowerFirst(modelName));\n+    return pluralize(lowerFirst(modelName)) as keyof RootStore;\n   }\n }\n\ndiff --git a/app/stores/base/Store.ts b/app/stores/base/Store.ts\nindex c89874803ef2..ede7cb5e231e 100644\n--- a/app/stores/base/Store.ts\n+++ b/app/stores/base/Store.ts\n@@ -17,7 +17,6 @@ import { LifecycleManager } from \"~/models/decorators/Lifecycle\";\n import { getInverseRelationsForModelClass } from \"~/models/decorators/Relation\";\n import type { PaginationParams, PartialExcept, Properties } from \"~/types\";\n import { client } from \"~/utils/ApiClient\";\n-import Logger from \"~/utils/Logger\";\n import { AuthorizationError, NotFoundError } from \"~/utils/errors\";\n \n export enum RPCAction {\n@@ -29,10 +28,19 @@ export enum RPCAction {\n   Count = \"count\",\n }\n \n-export type FetchPageParams = PaginationParams & Record<string, any>;\n-\n export const PAGINATION_SYMBOL = Symbol.for(\"pagination\");\n \n+export type PaginatedResponse<T> = T[] & {\n+  [PAGINATION_SYMBOL]?: {\n+    total: number;\n+    limit: number;\n+    offset: number;\n+    nextPath: string;\n+  };\n+};\n+\n+export type FetchPageParams = PaginationParams & Record<string, any>;\n+\n export default abstract class Store<T extends Model> {\n   @observable\n   data: Map<string, T> = new Map();\n@@ -129,6 +137,7 @@ export default abstract class Store<T extends Model> {\n           if (deleteBehavior === \"cascade\") {\n             store.remove(item.id);\n           } else if (deleteBehavior === \"null\") {\n+            // @ts-expect-error TODO\n             item[relation.idKey] = null;\n           }\n         });\n@@ -166,6 +175,7 @@ export default abstract class Store<T extends Model> {\n           if (archiveBehavior === \"cascade\") {\n             store.addToArchive(item);\n           } else if (archiveBehavior === \"null\") {\n+            // @ts-expect-error TODO\n             item[relation.idKey] = null;\n           }\n         });\n@@ -316,7 +326,9 @@ export default abstract class Store<T extends Model> {\n   }\n \n   @action\n-  fetchPage = async (params?: FetchPageParams | undefined): Promise<T[]> => {\n+  fetchPage = async (\n+    params?: FetchPageParams | undefined\n+  ): Promise<PaginatedResponse<T>> => {\n     if (!this.actions.includes(RPCAction.List)) {\n       throw new Error(`Cannot list ${this.modelName}`);\n     }\n@@ -327,7 +339,7 @@ export default abstract class Store<T extends Model> {\n       const res = await client.post(`/${this.apiEndpoint}.list`, params);\n       invariant(res?.data, \"Data not available\");\n \n-      let response: T[] = [];\n+      let response: PaginatedResponse<T> = [];\n \n       runInAction(`list#${this.modelName}`, () => {\n         this.addPolicies(res.policies);\n@@ -343,15 +355,16 @@ export default abstract class Store<T extends Model> {\n   };\n \n   @action\n-  fetchAll = async (params?: Record<string, any>): Promise<T[]> => {\n+  fetchAll = async (\n+    params?: Record<string, any>\n+  ): Promise<PaginatedResponse<T>> => {\n     const limit = params?.limit ?? Pagination.defaultLimit;\n     const response = await this.fetchPage({ ...params, limit });\n \n-    if (!response[PAGINATION_SYMBOL]) {\n-      Logger.warn(\"Pagination information not available in response\", {\n-        params,\n-      });\n-    }\n+    invariant(\n+      response[PAGINATION_SYMBOL],\n+      \"Pagination information not available in response\"\n+    );\n \n     const pages = Math.ceil(response[PAGINATION_SYMBOL].total / limit);\n     const fetchPages = [];\n\ndiff --git a/app/utils/date.ts b/app/utils/date.ts\nindex 8918eb2d9cdf..e38113f92f7d 100644\n--- a/app/utils/date.ts\n+++ b/app/utils/date.ts\n@@ -17,13 +17,14 @@ import {\n   getCurrentTimeAsString,\n   unicodeCLDRtoBCP47,\n   dateLocale,\n+  locales,\n } from \"@shared/utils/date\";\n import User from \"~/models/User\";\n \n export function dateToHeading(\n   dateTime: string,\n   t: TFunction,\n-  userLocale: string | null | undefined\n+  userLocale: keyof typeof locales | undefined\n ) {\n   const date = Date.parse(dateTime);\n   const now = new Date();\n@@ -84,7 +85,7 @@ export function dateToHeading(\n export function dateToExpiry(\n   dateTime: string,\n   t: TFunction,\n-  userLocale: string | null | undefined\n+  userLocale: keyof typeof locales | null | undefined\n ) {\n   const date = Date.parse(dateTime);\n   const now = new Date();\n\ndiff --git a/app/utils/download.ts b/app/utils/download.ts\nindex 624d2f8f83bf..59d8aa3ae1f8 100644\n--- a/app/utils/download.ts\n+++ b/app/utils/download.ts\n@@ -33,7 +33,9 @@ export default function download(\n     // reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n     // @ts-expect-error this is weird code\n     x = [x, m];\n+    // @ts-expect-error this is weird code\n     m = x[0];\n+    // @ts-expect-error this is weird code\n     x = x[1];\n   }\n \n\ndiff --git a/app/utils/language.ts b/app/utils/language.ts\nindex ee731c4a2bae..1f75a275f395 100644\n--- a/app/utils/language.ts\n+++ b/app/utils/language.ts\n@@ -1,5 +1,5 @@\n import { i18n } from \"i18next\";\n-import { unicodeCLDRtoBCP47 } from \"@shared/utils/date\";\n+import { locales, unicodeCLDRtoBCP47 } from \"@shared/utils/date\";\n import Desktop from \"./Desktop\";\n \n /**\n@@ -25,7 +25,7 @@ export function formatNumber(number: number, locale: string) {\n export function detectLanguage() {\n   const [ln, r] = navigator.language.split(\"-\");\n   const region = (r || ln).toUpperCase();\n-  return `${ln}_${region}`;\n+  return `${ln}_${region}` as keyof typeof locales;\n }\n \n /**\n\ndiff --git a/app/utils/pageVisibility.ts b/app/utils/pageVisibility.ts\nindex d03e0305bdfb..040daf8eb102 100644\n--- a/app/utils/pageVisibility.ts\n+++ b/app/utils/pageVisibility.ts\n@@ -19,5 +19,5 @@ export function getVisibilityListener(): string {\n }\n \n export function getPageVisible(): boolean {\n-  return !document[hidden];\n+  return !document[hidden as keyof Document];\n }\n\ndiff --git a/plugins/slack/client/components/SlackListItem.tsx b/plugins/slack/client/components/SlackListItem.tsx\nindex 5b3ab1120d58..7efa2e56d404 100644\n--- a/plugins/slack/client/components/SlackListItem.tsx\n+++ b/plugins/slack/client/components/SlackListItem.tsx\n@@ -40,7 +40,7 @@ function SlackListItem({ integration, collection }: Props) {\n     toast.success(t(\"Settings saved\"));\n   };\n \n-  const mapping = {\n+  const mapping: Record<string, string> = {\n     \"documents.publish\": t(\"document published\"),\n     \"documents.update\": t(\"document updated\"),\n   };\n\ndiff --git a/plugins/slack/server/api/hooks.ts b/plugins/slack/server/api/hooks.ts\nindex 6c93ea3013da..ee9aac1f759e 100644\n--- a/plugins/slack/server/api/hooks.ts\n+++ b/plugins/slack/server/api/hooks.ts\n@@ -79,7 +79,10 @@ router.post(\n       return;\n     }\n     // get content for unfurled links\n-    const unfurls = {};\n+    const unfurls: Record<\n+      string,\n+      { title: string; text: string; color?: string | undefined }\n+    > = {};\n \n     for (const link of event.links) {\n       const documentId = parseDocumentSlug(link.url);\n@@ -109,7 +112,7 @@ router.post(\n             unfurls[link.url] = {\n               title: doc.title,\n               text: doc.getSummary(),\n-              color: doc.collection?.color,\n+              color: doc.collection?.color ?? undefined,\n             };\n           }\n         }\n\ndiff --git a/plugins/slack/shared/SlackUtils.ts b/plugins/slack/shared/SlackUtils.ts\nindex 8a14424978c4..956a8454a661 100644\n--- a/plugins/slack/shared/SlackUtils.ts\n+++ b/plugins/slack/shared/SlackUtils.ts\n@@ -74,7 +74,7 @@ export class SlackUtils {\n     redirectUri = SlackUtils.callbackUrl()\n   ): string {\n     const baseUrl = SlackUtils.authBaseUrl;\n-    const params = {\n+    const params: Record<string, string> = {\n       client_id: env.SLACK_CLIENT_ID,\n       scope: scopes ? scopes.join(\" \") : \"\",\n       redirect_uri: redirectUri,\n\ndiff --git a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\nindex 801e3a6f7be4..158750a410b0 100644\n--- a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n+++ b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n@@ -692,7 +692,7 @@ export default class DeliverWebhookTask extends BaseTask<Props> {\n         \"user-agent\": `Outline-Webhooks${\n           env.VERSION ? `/${env.VERSION.slice(0, 7)}` : \"\"\n         }`,\n-      };\n+      } as Record<string, string>;\n \n       const signature = subscription.signature(JSON.stringify(requestBody));\n       if (signature) {\n\ndiff --git a/server/emails/templates/index.ts b/server/emails/templates/index.ts\nindex 8380e010124a..261e9c7a6691 100644\n--- a/server/emails/templates/index.ts\n+++ b/server/emails/templates/index.ts\n@@ -2,9 +2,9 @@ import { Hook, PluginManager } from \"@server/utils/PluginManager\";\n import { requireDirectory } from \"@server/utils/fs\";\n import BaseEmail from \"./BaseEmail\";\n \n-const emails = {};\n+const emails: Record<string, typeof BaseEmail> = {};\n \n-requireDirectory<{ default: BaseEmail<any> }>(__dirname).forEach(\n+requireDirectory<{ default: typeof BaseEmail }>(__dirname).forEach(\n   ([module, id]) => {\n     if (id === \"index\") {\n       return;\n\ndiff --git a/server/index.ts b/server/index.ts\nindex 2dfc6187c58b..3b8ba88967a5 100644\n--- a/server/index.ts\n+++ b/server/index.ts\n@@ -127,8 +127,8 @@ async function start(_id: number, disconnect: () => void) {\n     }\n \n     Logger.info(\"lifecycle\", `Starting ${name} service`);\n-    const init = services[name];\n-    await init(app, server, env.SERVICES);\n+    const init = services[name as keyof typeof services];\n+    init(app, server as https.Server, env.SERVICES);\n   }\n \n   server.on(\"error\", (err) => {\n\ndiff --git a/server/logging/Logger.ts b/server/logging/Logger.ts\nindex 4751e98dd785..3924409b0b82 100644\n--- a/server/logging/Logger.ts\n+++ b/server/logging/Logger.ts\n@@ -237,7 +237,7 @@ class Logger {\n     }\n \n     if (isObject(input)) {\n-      const output = { ...input };\n+      const output: Record<string, any> = { ...input };\n \n       for (const key of Object.keys(output)) {\n         if (isObject(output[key])) {\n@@ -252,7 +252,7 @@ class Logger {\n           output[key] = this.sanitize(output[key], level + 1);\n         }\n       }\n-      return output;\n+      return output as T;\n     }\n \n     return input;\n\ndiff --git a/server/models/User.ts b/server/models/User.ts\nindex 8d67352bfcca..6322bb2076c6 100644\n--- a/server/models/User.ts\n+++ b/server/models/User.ts\n@@ -45,6 +45,7 @@ import {\n } from \"@shared/types\";\n import { UserRoleHelper } from \"@shared/utils/UserRoleHelper\";\n import { stringToColor } from \"@shared/utils/color\";\n+import { locales } from \"@shared/utils/date\";\n import env from \"@server/env\";\n import DeleteAttachmentTask from \"@server/queues/tasks/DeleteAttachmentTask\";\n import parseAttachmentIds from \"@server/utils/parseAttachmentIds\";\n@@ -179,8 +180,8 @@ class User extends ParanoidModel<\n \n   @Default(env.DEFAULT_LANGUAGE)\n   @IsIn([languages])\n-  @Column\n-  language: string;\n+  @Column(DataType.STRING)\n+  language: keyof typeof locales | null;\n \n   @AllowNull\n   @IsUrlOrRelativePath\n\ndiff --git a/server/models/base/Model.ts b/server/models/base/Model.ts\nindex b3d96be98c92..845bbd1b42c2 100644\n--- a/server/models/base/Model.ts\n+++ b/server/models/base/Model.ts\n@@ -69,6 +69,7 @@ class Model<\n       ) {\n         const difference = Object.keys(previous)\n           .concat(Object.keys(current))\n+          // @ts-expect-error TODO\n           .filter((key) => !isEqual(previous[key], current[key]));\n \n         previousAttributes[change] = pick(\n\ndiff --git a/server/models/decorators/CounterCache.ts b/server/models/decorators/CounterCache.ts\nindex 88fbcb4eb9c2..44de893c0b96 100644\n--- a/server/models/decorators/CounterCache.ts\n+++ b/server/models/decorators/CounterCache.ts\n@@ -36,11 +36,14 @@ export function CounterCache<\n     setImmediate(() => {\n       const recalculateCache =\n         (offset: number) => async (model: InstanceType<T>) => {\n-          const cacheKey = `${cacheKeyPrefix}:${model[options.foreignKey]}`;\n+          const cacheKey = `${cacheKeyPrefix}:${\n+            model[options.foreignKey as keyof typeof model]\n+          }`;\n \n           const count = await modelClass.count({\n             where: {\n-              [options.foreignKey]: model[options.foreignKey],\n+              [options.foreignKey]:\n+                model[options.foreignKey as keyof typeof model],\n             },\n           });\n           await CacheHelper.setData(cacheKey, count + offset);\n\ndiff --git a/server/models/helpers/SearchHelper.ts b/server/models/helpers/SearchHelper.ts\nindex 365add62d428..c0c55d1a4076 100644\n--- a/server/models/helpers/SearchHelper.ts\n+++ b/server/models/helpers/SearchHelper.ts\n@@ -355,7 +355,10 @@ export default class SearchHelper {\n     options: SearchOptions\n   ) {\n     const teamId = model instanceof Team ? model.id : model.teamId;\n-    const where: WhereOptions<Document> = {\n+    const where: WhereOptions<Document> & {\n+      [Op.or]: WhereOptions<Document>[];\n+      [Op.and]: WhereOptions<Document>[];\n+    } = {\n       teamId,\n       [Op.or]: [],\n       [Op.and]: [\n\ndiff --git a/server/policies/cancan.ts b/server/policies/cancan.ts\nindex cd2e5b3b9af3..060fbc08dc89 100644\n--- a/server/policies/cancan.ts\n+++ b/server/policies/cancan.ts\n@@ -112,7 +112,7 @@ export class CanCan {\n    * and sent in API responses to allow clients to adjust which UI is displayed.\n    */\n   public serialize = (performer: Model, target: Model | null): Policy => {\n-    const output = {};\n+    const output: Record<string, boolean | string[]> = {};\n     abilities.forEach((ability) => {\n       if (\n         performer instanceof ability.model &&\n@@ -184,11 +184,14 @@ export class CanCan {\n         (ability.action === \"manage\" || action === ability.action)\n     );\n \n-  private get = (obj: object, key: string) =>\n+  private get = <T extends object>(obj: T, key: keyof T) =>\n     \"get\" in obj && typeof obj.get === \"function\" ? obj.get(key) : obj[key];\n \n-  private isPartiallyEqual = (target: object, obj: object) =>\n-    Object.keys(obj).every((key) => this.get(target, key) === obj[key]);\n+  private isPartiallyEqual = <T extends object>(target: T, obj: T) =>\n+    Object.keys(obj).every(\n+      // @ts-expect-error TODO\n+      (key: keyof T) => this.get(target, key) === obj[key]\n+    );\n \n   private getConditionFn =\n     (condition: object) => (performer: Model, target: Model) =>\n@@ -204,6 +207,7 @@ export class CanCan {\n     if (typeof value === \"string\") {\n       return [value];\n     }\n+    // @ts-expect-error - TS doesn't know that value is iterable\n     if (typeof value[Symbol.iterator] === \"function\") {\n       // @ts-expect-error - TS doesn't know that value is iterable\n       return [...value];\n\ndiff --git a/server/queues/processors/BaseProcessor.ts b/server/queues/processors/BaseProcessor.ts\nindex 6cf0c13f9f50..72c379ce0d7a 100644\n--- a/server/queues/processors/BaseProcessor.ts\n+++ b/server/queues/processors/BaseProcessor.ts\n@@ -1,7 +1,7 @@\n import { Event } from \"@server/types\";\n \n export default abstract class BaseProcessor {\n-  static applicableEvents: Event[\"name\"][] | [\"*\"] = [];\n+  static applicableEvents: (Event[\"name\"] | \"*\")[] = [];\n \n   public abstract perform(event: Event): Promise<void>;\n }\n\ndiff --git a/server/queues/processors/index.ts b/server/queues/processors/index.ts\nindex 3834adb03570..327e7226b1cf 100644\n--- a/server/queues/processors/index.ts\n+++ b/server/queues/processors/index.ts\n@@ -2,9 +2,9 @@ import { Hook, PluginManager } from \"@server/utils/PluginManager\";\n import { requireDirectory } from \"@server/utils/fs\";\n import BaseProcessor from \"./BaseProcessor\";\n \n-const processors = {};\n+const processors: Record<string, typeof BaseProcessor> = {};\n \n-requireDirectory<{ default: BaseProcessor }>(__dirname).forEach(\n+requireDirectory<{ default: typeof BaseProcessor }>(__dirname).forEach(\n   ([module, id]) => {\n     if (id === \"index\") {\n       return;\n\ndiff --git a/server/queues/tasks/EmailTask.ts b/server/queues/tasks/EmailTask.ts\nindex fa0a564bd3b3..618226bb81d7 100644\n--- a/server/queues/tasks/EmailTask.ts\n+++ b/server/queues/tasks/EmailTask.ts\n@@ -15,6 +15,7 @@ export default class EmailTask extends BaseTask<Props> {\n       );\n     }\n \n+    // @ts-expect-error We won't instantiate an abstract class\n     const email = new EmailClass(props, metadata);\n     return email.send();\n   }\n\ndiff --git a/server/queues/tasks/index.ts b/server/queues/tasks/index.ts\nindex 4c75d3a176e0..b59e30343b61 100644\n--- a/server/queues/tasks/index.ts\n+++ b/server/queues/tasks/index.ts\n@@ -2,9 +2,9 @@ import { Hook, PluginManager } from \"@server/utils/PluginManager\";\n import { requireDirectory } from \"@server/utils/fs\";\n import BaseTask from \"./BaseTask\";\n \n-const tasks = {};\n+const tasks: Record<string, typeof BaseTask> = {};\n \n-requireDirectory<{ default: BaseTask<any> }>(__dirname).forEach(\n+requireDirectory<{ default: typeof BaseTask }>(__dirname).forEach(\n   ([module, id]) => {\n     if (id === \"index\") {\n       return;\n\ndiff --git a/server/routes/api/collections/collections.ts b/server/routes/api/collections/collections.ts\nindex f75ed915c843..2cbf08dd7b31 100644\n--- a/server/routes/api/collections/collections.ts\n+++ b/server/routes/api/collections/collections.ts\n@@ -813,7 +813,9 @@ router.post(\n     const { transaction } = ctx.state;\n     const collectionIds = await user.collectionIds({ transaction });\n \n-    const where: WhereOptions<Collection> = {\n+    const where: WhereOptions<Collection> & {\n+      [Op.and]: WhereOptions<Collection>[];\n+    } = {\n       teamId: user.teamId,\n       [Op.and]: [\n         {\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex ecf472504bd9..4a47a44e7b7d 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -97,7 +97,9 @@ router.post(\n \n     // always filter by the current team\n     const { user } = ctx.state.auth;\n-    const where: WhereOptions<Document> = {\n+    const where: WhereOptions<Document> & {\n+      [Op.and]: WhereOptions<Document>[];\n+    } = {\n       teamId: user.teamId,\n       [Op.and]: [\n         {\n\ndiff --git a/server/routes/api/users/schema.ts b/server/routes/api/users/schema.ts\nindex caedad1ad8a6..fd019af5a745 100644\n--- a/server/routes/api/users/schema.ts\n+++ b/server/routes/api/users/schema.ts\n@@ -1,6 +1,8 @@\n import { z } from \"zod\";\n import { NotificationEventType, UserPreference, UserRole } from \"@shared/types\";\n+import { locales } from \"@shared/utils/date\";\n import User from \"@server/models/User\";\n+import { zodEnumFromObjectKeys } from \"@server/utils/zod\";\n import { BaseSchema } from \"../schema\";\n \n const BaseIdSchema = z.object({\n@@ -80,7 +82,7 @@ export const UsersUpdateSchema = BaseSchema.extend({\n     id: z.string().uuid().optional(),\n     name: z.string().optional(),\n     avatarUrl: z.string().nullish(),\n-    language: z.string().optional(),\n+    language: zodEnumFromObjectKeys(locales).optional(),\n     preferences: z.record(z.nativeEnum(UserPreference), z.boolean()).optional(),\n   }),\n });\n\ndiff --git a/server/routes/index.ts b/server/routes/index.ts\nindex 871e2b457b8d..b0af61a9726e 100644\n--- a/server/routes/index.ts\n+++ b/server/routes/index.ts\n@@ -97,7 +97,7 @@ router.use(compress());\n router.get(\"/locales/:lng.json\", async (ctx) => {\n   const { lng } = ctx.params;\n \n-  if (!languages.includes(lng)) {\n+  if (!languages.includes(lng as (typeof languages)[number])) {\n     ctx.status = 404;\n     return;\n   }\n\ndiff --git a/server/scripts/20230313000000-migrate-notification-settings.ts b/server/scripts/20230313000000-migrate-notification-settings.ts\nindex c50e46c57c87..c0cbf9d9d023 100644\n--- a/server/scripts/20230313000000-migrate-notification-settings.ts\n+++ b/server/scripts/20230313000000-migrate-notification-settings.ts\n@@ -33,6 +33,7 @@ export default async function main(exit = false) {\n         user.notificationSettings = {};\n \n         for (const eventType of eventTypes) {\n+          // @ts-expect-error old migration\n           user.notificationSettings[eventType] = true;\n           user.changed(\"notificationSettings\", true);\n         }\n\ndiff --git a/server/services/index.ts b/server/services/index.ts\nindex f4e1894c656d..990e944ac4e6 100644\n--- a/server/services/index.ts\n+++ b/server/services/index.ts\n@@ -12,4 +12,4 @@ export default {\n   web,\n   worker,\n   cron,\n-};\n+} as const;\n\ndiff --git a/server/services/worker.ts b/server/services/worker.ts\nindex 5e0e7ad5f8a8..6f309c7a8135 100644\n--- a/server/services/worker.ts\n+++ b/server/services/worker.ts\n@@ -3,6 +3,7 @@ import Logger from \"@server/logging/Logger\";\n import { setResource, addTags } from \"@server/logging/tracer\";\n import { traceFunction } from \"@server/logging/tracing\";\n import HealthMonitor from \"@server/queues/HealthMonitor\";\n+import { Event } from \"@server/types\";\n import { initI18n } from \"@server/utils/i18n\";\n import {\n   globalEventQueue,\n@@ -25,7 +26,7 @@ export default function init() {\n         spanName: \"process\",\n         isRoot: true,\n       })(async function (job) {\n-        const event = job.data;\n+        const event = job.data as Event;\n         let err;\n \n         setResource(`Event.${event.name}`);\n@@ -99,6 +100,7 @@ export default function init() {\n           );\n         }\n \n+        // @ts-expect-error We will not instantiate an abstract class\n         const processor = new ProcessorClass();\n \n         if (processor.perform) {\n@@ -146,6 +148,7 @@ export default function init() {\n \n         Logger.info(\"worker\", `${name} running`, props);\n \n+        // @ts-expect-error We will not instantiate an abstract class\n         const task = new TaskClass();\n \n         try {\n\ndiff --git a/server/utils/decorators/Public.ts b/server/utils/decorators/Public.ts\nindex 7f9106986db6..10db2b384420 100644\n--- a/server/utils/decorators/Public.ts\n+++ b/server/utils/decorators/Public.ts\n@@ -23,9 +23,9 @@ export class PublicEnvironmentRegister {\n   static registerEnv(env: Environment) {\n     process.nextTick(() => {\n       const vars: string[] = Reflect.getMetadata(key, env) ?? [];\n-      vars.forEach((key: string) => {\n-        if (isUndefined(this.publicEnv[key])) {\n-          this.publicEnv[key] = env[key];\n+      vars.forEach((k: keyof Environment) => {\n+        if (isUndefined(this.publicEnv[k])) {\n+          this.publicEnv[k] = env[k];\n         }\n       });\n     });\n\ndiff --git a/server/utils/diff.ts b/server/utils/diff.ts\nindex e19c940d0f51..5e5104d95075 100644\n--- a/server/utils/diff.ts\n+++ b/server/utils/diff.ts\n@@ -59,13 +59,13 @@ type Token = {\n };\n \n type Segment = {\n-  beforeTokens: Array<Token>;\n-  afterTokens: Array<Token>;\n+  beforeTokens: Token[];\n+  afterTokens: Token[];\n   beforeIndex: number;\n   afterIndex: number;\n \n-  beforeMap: object;\n-  afterMap: object;\n+  beforeMap: Record<string, number[]>;\n+  afterMap: Record<string, number[]>;\n };\n \n type MatchT = {\n@@ -232,7 +232,7 @@ function Match(\n  *\n  * @return {Array} The list of tokens.\n  */\n-function htmlToTokens(html: string): Array<Token> {\n+function htmlToTokens(html: string): Token[] {\n   let mode = \"char\";\n   let currentWord = \"\";\n   let currentAtomicTag = \"\";\n@@ -364,7 +364,7 @@ function getKeyForToken(token: string): string {\n  *\n  * @return {Object} A mapping that can be used to search for tokens.\n  */\n-function createMap(tokens: Array<Token>): object {\n+function createMap(tokens: Token[]) {\n   return tokens.reduce(function (map, token, index) {\n     if (map[token.key]) {\n       map[token.key].push(index);\n@@ -651,8 +651,8 @@ function getFullMatch(\n  * @return {Segment} The segment object.\n  */\n function createSegment(\n-  beforeTokens: Array<Token>,\n-  afterTokens: Array<Token>,\n+  beforeTokens: Token[],\n+  afterTokens: Token[],\n   beforeIndex: number,\n   afterIndex: number\n ): Segment {\n@@ -759,8 +759,8 @@ function findMatchingBlocks(segment: Segment): Array<MatchT> {\n  *      - {number} endInAfter The end of the range in the list of after tokens.\n  */\n function calculateOperations(\n-  beforeTokens: Array<Token>,\n-  afterTokens: Array<Token>\n+  beforeTokens: Token[],\n+  afterTokens: Token[]\n ): Array<Operation> {\n   if (!beforeTokens) {\n     throw new Error(\"Missing beforeTokens\");\n@@ -902,8 +902,8 @@ function TokenWrapper(tokens: any) {\n  *      and whether those tokens are wrappable or not. The result should be a string.\n  */\n TokenWrapper.prototype.combine = function (\n-  mapFn: (wrappable: boolean, tokens: Array<Token>) => void,\n-  tagFn: (tokens: Array<Token>) => void\n+  mapFn: (wrappable: boolean, tokens: Token[]) => void,\n+  tagFn: (tokens: Token[]) => void\n ) {\n   const notes = this.notes;\n   const tokens = this.tokens.slice();\n@@ -1069,7 +1069,8 @@ function renderOperations(\n   return operations.reduce(function (rendering, op, index) {\n     return (\n       rendering +\n-      OPS[op.action](\n+      // @ts-expect-error TODO\n+      OPS[op.action]?.(\n         op,\n         beforeTokens,\n         afterTokens,\n\ndiff --git a/server/utils/indexing.ts b/server/utils/indexing.ts\nindex 56dbc6b465e3..8d2b50964696 100644\n--- a/server/utils/indexing.ts\n+++ b/server/utils/indexing.ts\n@@ -6,7 +6,7 @@ import { Collection, Document, Star } from \"@server/models\";\n export async function collectionIndexing(\n   teamId: string,\n   { transaction }: FindOptions<Collection>\n-): Promise<{ [id: string]: string }> {\n+) {\n   const collections = await Collection.findAll({\n     where: {\n       teamId,\n@@ -34,16 +34,14 @@ export async function collectionIndexing(\n \n   await Promise.all(promises);\n \n-  const indexedCollections = {};\n+  const indexedCollections: Record<string, string | null> = {};\n   sortable.forEach((collection) => {\n     indexedCollections[collection.id] = collection.index;\n   });\n   return indexedCollections;\n }\n \n-export async function starIndexing(\n-  userId: string\n-): Promise<{ [id: string]: string }> {\n+export async function starIndexing(userId: string) {\n   const stars = await Star.findAll({\n     where: { userId },\n   });\n@@ -77,7 +75,7 @@ export async function starIndexing(\n \n   await Promise.all(promises);\n \n-  const indexedStars = {};\n+  const indexedStars: Record<string, string | null> = {};\n   sortable.forEach((star) => {\n     indexedStars[star.id] = star.index;\n   });\n\ndiff --git a/server/utils/readManifestFile.ts b/server/utils/readManifestFile.ts\nindex c6691d7c33d2..bfb411e22a80 100644\n--- a/server/utils/readManifestFile.ts\n+++ b/server/utils/readManifestFile.ts\n@@ -4,6 +4,7 @@ import Logger from \"@server/logging/Logger\";\n \n export type Chunk = {\n   file: string;\n+  imports: string[];\n   src: string;\n   isEntry?: boolean;\n };\n\ndiff --git a/server/utils/turndown/tables.ts b/server/utils/turndown/tables.ts\nindex 7a38149d042d..536cc564ec52 100644\n--- a/server/utils/turndown/tables.ts\n+++ b/server/utils/turndown/tables.ts\n@@ -10,7 +10,11 @@ const tableShouldBeSkippedCache = new WeakMap<HTMLTableElement, boolean>();\n \n function getAlignment(node: HTMLElement) {\n   return node\n-    ? (node.getAttribute(\"align\") || node.style.textAlign || \"\").toLowerCase()\n+    ? ((\n+        node.getAttribute(\"align\") ||\n+        node.style.textAlign ||\n+        \"\"\n+      ).toLowerCase() as \"left\" | \"right\" | \"center\")\n     : \"\";\n }\n \n\ndiff --git a/server/utils/validators.ts b/server/utils/validators.ts\nindex 5a97f5aadf01..7b1712c4e828 100644\n--- a/server/utils/validators.ts\n+++ b/server/utils/validators.ts\n@@ -19,7 +19,7 @@ export function CannotUseWithout(\n       validator: {\n         validate<T>(value: T, args: ValidationArguments) {\n           const obj = args.object as unknown as T;\n-          const required = args.constraints[0] as string;\n+          const required = args.constraints[0] as keyof T;\n           return obj[required] !== undefined;\n         },\n         defaultMessage(args: ValidationArguments) {\n\ndiff --git a/shared/editor/lib/Extension.ts b/shared/editor/lib/Extension.ts\nindex d70b02e4024c..af866571a86d 100644\n--- a/shared/editor/lib/Extension.ts\n+++ b/shared/editor/lib/Extension.ts\n@@ -5,7 +5,9 @@ import { Command, Plugin } from \"prosemirror-state\";\n import { Primitive } from \"utility-types\";\n import type { Editor } from \"../../../app/editor\";\n \n-export type CommandFactory = (attrs?: Record<string, Primitive>) => Command;\n+export type CommandFactory = (\n+  attrs?: Record<string, Primitive>\n+) => Command | void;\n \n export type WidgetProps = { rtl: boolean; readOnly: boolean | undefined };\n \n\ndiff --git a/shared/editor/lib/ExtensionManager.ts b/shared/editor/lib/ExtensionManager.ts\nindex 4ce929a10396..2fe94f424954 100644\n--- a/shared/editor/lib/ExtensionManager.ts\n+++ b/shared/editor/lib/ExtensionManager.ts\n@@ -186,6 +186,7 @@ export default class ExtensionManager {\n       .map((extension) =>\n         [\"node\", \"mark\"].includes(extension.type)\n           ? extension.keys({\n+              // @ts-expect-error TODO\n               type: schema[`${extension.type}s`][extension.name],\n               schema,\n             })\n@@ -206,6 +207,7 @@ export default class ExtensionManager {\n       .filter((extension) => extension.inputRules)\n       .map((extension) =>\n         extension.inputRules({\n+          // @ts-expect-error TODO\n           type: schema[`${extension.type}s`][extension.name],\n           schema,\n         })\n@@ -222,13 +224,14 @@ export default class ExtensionManager {\n       .filter((extension) => extension.commands)\n       .reduce((allCommands, extension) => {\n         const { name, type } = extension;\n-        const commands = {};\n+        const commands: Record<string, CommandFactory> = {};\n \n         // @ts-expect-error FIXME\n         const value = extension.commands({\n           schema,\n           ...([\"node\", \"mark\"].includes(type)\n             ? {\n+                // @ts-expect-error TODO\n                 type: schema[`${type}s`][name],\n               }\n             : {}),\n@@ -239,12 +242,12 @@ export default class ExtensionManager {\n           attrs: Record<string, Primitive>\n         ) => {\n           if (!view.editable && !extension.allowInReadOnly) {\n-            return false;\n+            return;\n           }\n           if (extension.focusAfterExecution) {\n             view.focus();\n           }\n-          return callback(attrs)(view.state, view.dispatch, view);\n+          return callback(attrs)?.(view.state, view.dispatch, view);\n         };\n \n         const handle = (_name: string, _value: CommandFactory) => {\n@@ -252,8 +255,8 @@ export default class ExtensionManager {\n             commands[_name] = (attrs: Record<string, Primitive>) =>\n               _value.forEach((callback) => apply(callback, attrs));\n           } else if (typeof _value === \"function\") {\n-            commands[_name] = (attrs: Record<string, Primitive>) =>\n-              apply(_value, attrs);\n+            commands[_name] = ((attrs: Record<string, Primitive>) =>\n+              apply(_value, attrs)) as CommandFactory;\n           }\n         };\n \n\ndiff --git a/shared/editor/lib/code.ts b/shared/editor/lib/code.ts\nindex 51ca7c568160..92aff343e987 100644\n--- a/shared/editor/lib/code.ts\n+++ b/shared/editor/lib/code.ts\n@@ -1,4 +1,5 @@\n import Storage from \"../../utils/Storage\";\n+import { LANGUAGES } from \"../extensions/Prism\";\n \n const RecentStorageKey = \"rme-code-language\";\n const StorageKey = \"frequent-code-languages\";\n@@ -44,9 +45,10 @@ export const getRecentCodeLanguage = () => Storage.get(RecentStorageKey);\n \n export const getFrequentCodeLanguages = () => {\n   const recentLang = Storage.get(RecentStorageKey);\n-  const frequentLangEntries = Object.entries(\n-    (Storage.get(StorageKey) ?? {}) as Record<string, number>\n-  );\n+  const frequentLangEntries = Object.entries(Storage.get(StorageKey) ?? {}) as [\n+    keyof typeof LANGUAGES,\n+    number\n+  ][];\n \n   const frequentLangs = sortFrequencies(frequentLangEntries)\n     .slice(0, FrequentlyUsedCount.Get)\n@@ -61,5 +63,5 @@ export const getFrequentCodeLanguages = () => {\n   return frequentLangs;\n };\n \n-const sortFrequencies = (freqs: [string, number][]) =>\n+const sortFrequencies = <T>(freqs: [T, number][]) =>\n   freqs.sort((a, b) => (a[1] >= b[1] ? -1 : 1));\n\ndiff --git a/shared/editor/lib/emoji.ts b/shared/editor/lib/emoji.ts\nindex acdfca291635..0ff868e49d32 100644\n--- a/shared/editor/lib/emoji.ts\n+++ b/shared/editor/lib/emoji.ts\n@@ -21,6 +21,7 @@ export const nameToEmoji: Record<string, string> = Object.values(\n   (data as EmojiMartData).emojis\n ).reduce((acc, emoji) => {\n   const convertedId = snakeCase(emoji.id);\n+  // @ts-expect-error emojiMartToGemoji is a valid map\n   acc[emojiMartToGemoji[convertedId] ?? convertedId] = emoji.skins[0].native;\n   return acc;\n }, {});\n\ndiff --git a/shared/editor/lib/prosemirror-recreate-transform/getFromPath.ts b/shared/editor/lib/prosemirror-recreate-transform/getFromPath.ts\nindex 63d564e9fbb6..7364442ff43e 100644\n--- a/shared/editor/lib/prosemirror-recreate-transform/getFromPath.ts\n+++ b/shared/editor/lib/prosemirror-recreate-transform/getFromPath.ts\n@@ -13,7 +13,7 @@ export function getFromPath(obj: JSONValue, path: string): JSONValue {\n     if (typeof obj !== \"object\") {\n       throw new Error();\n     }\n-    const property = pathParts.shift() as string;\n+    const property = pathParts.shift() as keyof JSONValue;\n     obj = obj[property];\n   }\n   return obj;\n\ndiff --git a/shared/editor/nodes/Heading.ts b/shared/editor/nodes/Heading.ts\nindex 04d6ed57de03..f9c19513c63a 100644\n--- a/shared/editor/nodes/Heading.ts\n+++ b/shared/editor/nodes/Heading.ts\n@@ -220,7 +220,7 @@ export default class Heading extends Node {\n   get plugins() {\n     const getAnchors = (doc: ProsemirrorNode) => {\n       const decorations: Decoration[] = [];\n-      const previouslySeen = {};\n+      const previouslySeen: Record<string, number> = {};\n \n       doc.descendants((node, pos) => {\n         if (node.type.name !== this.name) {\n\ndiff --git a/shared/i18n/index.ts b/shared/i18n/index.ts\nindex 7a8cf281206b..e315ef413c1e 100644\n--- a/shared/i18n/index.ts\n+++ b/shared/i18n/index.ts\n@@ -1,6 +1,13 @@\n+import { locales } from \"../utils/date\";\n+\n+type LanguageOption = {\n+  label: string;\n+  value: keyof typeof locales;\n+};\n+\n // Note: Updating the available languages? Make sure to also update the\n // locales array in shared/utils/date.ts to enable translation for timestamps.\n-export const languageOptions = [\n+export const languageOptions: LanguageOption[] = [\n   {\n     label: \"English (US)\",\n     value: \"en_US\",\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 6b3f21c409e0..42e10c9c68fc 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -168,6 +168,7 @@\n   \"Are you sure you want to permanently delete this entire comment thread?\": \"Are you sure you want to permanently delete this entire comment thread?\",\n   \"Are you sure you want to permanently delete this comment?\": \"Are you sure you want to permanently delete this comment?\",\n   \"Confirm\": \"Confirm\",\n+  \"manage access\": \"manage access\",\n   \"view and edit access\": \"view and edit access\",\n   \"view only access\": \"view only access\",\n   \"no access\": \"no access\",\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex 659ded718441..5a6488cb0761 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -292,20 +292,22 @@ export type NotificationSettings = {\n     | boolean;\n };\n \n-export const NotificationEventDefaults = {\n-  [NotificationEventType.PublishDocument]: false,\n-  [NotificationEventType.UpdateDocument]: true,\n-  [NotificationEventType.CreateCollection]: false,\n-  [NotificationEventType.CreateComment]: true,\n-  [NotificationEventType.MentionedInDocument]: true,\n-  [NotificationEventType.MentionedInComment]: true,\n-  [NotificationEventType.InviteAccepted]: true,\n-  [NotificationEventType.Onboarding]: true,\n-  [NotificationEventType.Features]: true,\n-  [NotificationEventType.ExportCompleted]: true,\n-  [NotificationEventType.AddUserToDocument]: true,\n-  [NotificationEventType.AddUserToCollection]: true,\n-};\n+export const NotificationEventDefaults: Record<NotificationEventType, boolean> =\n+  {\n+    [NotificationEventType.PublishDocument]: false,\n+    [NotificationEventType.UpdateDocument]: true,\n+    [NotificationEventType.CreateCollection]: false,\n+    [NotificationEventType.CreateComment]: true,\n+    [NotificationEventType.CreateRevision]: false,\n+    [NotificationEventType.MentionedInDocument]: true,\n+    [NotificationEventType.MentionedInComment]: true,\n+    [NotificationEventType.InviteAccepted]: true,\n+    [NotificationEventType.Onboarding]: true,\n+    [NotificationEventType.Features]: true,\n+    [NotificationEventType.ExportCompleted]: true,\n+    [NotificationEventType.AddUserToDocument]: true,\n+    [NotificationEventType.AddUserToCollection]: true,\n+  };\n \n export enum UnfurlResourceType {\n   OEmbed = \"oembed\",\n\ndiff --git a/shared/utils/ProsemirrorHelper.ts b/shared/utils/ProsemirrorHelper.ts\nindex b8f0003f5e3e..595757d775c9 100644\n--- a/shared/utils/ProsemirrorHelper.ts\n+++ b/shared/utils/ProsemirrorHelper.ts\n@@ -279,7 +279,7 @@ export class ProsemirrorHelper {\n    */\n   static getHeadings(doc: Node, schema: Schema) {\n     const headings: Heading[] = [];\n-    const previouslySeen = {};\n+    const previouslySeen: Record<string, number> = {};\n \n     doc.forEach((node) => {\n       if (node.type.name === \"heading\") {\n\ndiff --git a/shared/utils/Storage.ts b/shared/utils/Storage.ts\nindex 1e2de4a091a7..451ac7e4d11f 100644\n--- a/shared/utils/Storage.ts\n+++ b/shared/utils/Storage.ts\n@@ -75,7 +75,7 @@ class Storage {\n  * when localStorage is not available.\n  */\n class MemoryStorage {\n-  private data = {};\n+  private data: Record<string, string> = {};\n \n   getItem(key: string) {\n     return this.data[key] || null;\n\ndiff --git a/shared/utils/date.ts b/shared/utils/date.ts\nindex 82b5fff42930..397b2c7a460f 100644\n--- a/shared/utils/date.ts\n+++ b/shared/utils/date.ts\n@@ -189,7 +189,7 @@ const locales = {\n  * @param language The user language\n  * @returns The date-fns locale.\n  */\n-export function dateLocale(language: string | null | undefined) {\n+export function dateLocale(language: keyof typeof locales | undefined | null) {\n   return language ? locales[language] : undefined;\n }\n \n\ndiff --git a/shared/utils/emoji.ts b/shared/utils/emoji.ts\nindex 0194012eda02..7da06490a26e 100644\n--- a/shared/utils/emoji.ts\n+++ b/shared/utils/emoji.ts\n@@ -51,7 +51,9 @@ type GetVariantsProps = {\n \n const getVariants = ({ id, name, skins }: GetVariantsProps): EmojiVariants =>\n   skins.reduce((obj, skin) => {\n-    const skinToneCode = skin.unified.split(\"-\")[1];\n+    const skinToneCode = skin.unified.split(\n+      \"-\"\n+    )[1] as keyof typeof SKINTONE_CODE_TO_ENUM;\n     const skinToneType =\n       SKINTONE_CODE_TO_ENUM[skinToneCode] ?? EmojiSkinTone.Default;\n     obj[skinToneType] = { id, name, value: skin.native } satisfies Emoji;\n@@ -72,7 +74,8 @@ const EMOJI_ID_TO_VARIANTS = Object.entries(Emojis).reduce(\n \n const CATEGORY_TO_EMOJI_IDS: Record<EmojiCategory, string[]> =\n   Categories.reduce((obj, { id, emojis }) => {\n-    const category = EmojiCategory[capitalize(id)];\n+    const key = capitalize(id) as EmojiCategory;\n+    const category = EmojiCategory[key];\n     if (!category) {\n       return obj;\n     }\n\ndiff --git a/shared/utils/naturalSort.ts b/shared/utils/naturalSort.ts\nindex 110e901f9cf9..d3cd4e255dca 100644\n--- a/shared/utils/naturalSort.ts\n+++ b/shared/utils/naturalSort.ts\n@@ -14,7 +14,7 @@ const stripEmojis = (value: string) => value.replace(regex, \"\");\n \n const cleanValue = (value: string) => stripEmojis(deburr(value));\n \n-function getSortByField<T>(\n+function getSortByField<T extends Record<string, any>>(\n   item: T,\n   keyOrCallback: string | ((item: T) => string)\n ) {\n@@ -25,7 +25,7 @@ function getSortByField<T>(\n   return cleanValue(field);\n }\n \n-function naturalSortBy<T>(\n+function naturalSortBy<T extends Record<string, any>>(\n   items: T[],\n   key: string | ((item: T) => string),\n   sortOptions?: NaturalSortOptions\n\ndiff --git a/tsconfig.json b/tsconfig.json\nindex 2736d3fc1f67..e697558ccd51 100644\n--- a/tsconfig.json\n+++ b/tsconfig.json\n@@ -23,7 +23,6 @@\n     \"noEmit\": true,\n     \"skipLibCheck\": true,\n     \"ignoreDeprecations\": \"5.0\",\n-    \"suppressImplicitAnyIndexErrors\": true,\n     \"target\": \"es2020\",\n     \"paths\": {\n       \"@server/*\": [\"./server/*\"],\n",
    "test_patch": "diff --git a/plugins/webhooks/server/tasks/DeliverWebhookTask.test.ts b/plugins/webhooks/server/tasks/DeliverWebhookTask.test.ts\nindex cf4aab8de969..0aa80c4bb3fc 100644\n--- a/plugins/webhooks/server/tasks/DeliverWebhookTask.test.ts\n+++ b/plugins/webhooks/server/tasks/DeliverWebhookTask.test.ts\n@@ -85,7 +85,10 @@ describe(\"DeliverWebhookTask\", () => {\n       event,\n     });\n \n-    const headers = fetchMock.mock.calls[0]![1]!.headers!;\n+    const headers = fetchMock.mock.calls[0]![1]!.headers! as Record<\n+      string,\n+      string\n+    >;\n \n     expect(fetchMock).toHaveBeenCalledTimes(1);\n     expect(headers[\"Outline-Signature\"]).toMatch(/^t=[0-9]+,s=[a-z0-9]+$/);\n\ndiff --git a/server/models/Collection.test.ts b/server/models/Collection.test.ts\nindex 2acf22370e36..46a076b1b2b8 100644\n--- a/server/models/Collection.test.ts\n+++ b/server/models/Collection.test.ts\n@@ -38,7 +38,7 @@ describe(\"getDocumentParents\", () => {\n     });\n     const result = collection.getDocumentParents(document.id);\n     expect(result?.length).toBe(1);\n-    expect(result[0]).toBe(parent.id);\n+    expect(result ? result[0] : undefined).toBe(parent.id);\n   });\n \n   test(\"should return array of parent document ids\", async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7756",
    "pr_id": 7756,
    "issue_id": 7526,
    "repo": "outline/outline",
    "problem_statement": "Comment email notifications should include a preview of the comment\nTitle says it all.",
    "issue_word_count": 14,
    "test_files_count": 2,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "server/emails/templates/DocumentMentionedEmail.tsx",
      "server/emails/templates/components/Diff.tsx",
      "server/models/helpers/DocumentHelper.tsx",
      "server/models/helpers/ProseMirrorHelper.test.ts",
      "server/models/helpers/ProsemirrorHelper.tsx",
      "server/queues/processors/EmailsProcessor.ts",
      "server/test/factories.ts"
    ],
    "pr_changed_test_files": [
      "server/models/helpers/ProseMirrorHelper.test.ts",
      "server/test/factories.ts"
    ],
    "base_commit": "d2a99b68726f68d75f861352a0873ee01d0019ad",
    "head_commit": "c2bc11058d7f73301c835e47a072596f7af6dd74",
    "repo_url": "https://github.com/outline/outline/pull/7756",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7756",
    "dockerfile": "",
    "pr_merged_at": "2024-10-11T19:30:09.000Z",
    "patch": "diff --git a/server/emails/templates/DocumentMentionedEmail.tsx b/server/emails/templates/DocumentMentionedEmail.tsx\nindex 15b73d42e389..dd18c2766c6a 100644\n--- a/server/emails/templates/DocumentMentionedEmail.tsx\n+++ b/server/emails/templates/DocumentMentionedEmail.tsx\n@@ -1,20 +1,31 @@\n+import differenceBy from \"lodash/differenceBy\";\n import * as React from \"react\";\n-import { Document } from \"@server/models\";\n+import { Day } from \"@shared/utils/time\";\n+import { Document, Revision } from \"@server/models\";\n+import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n+import HTMLHelper from \"@server/models/helpers/HTMLHelper\";\n+import { ProsemirrorHelper } from \"@server/models/helpers/ProsemirrorHelper\";\n+import { TextHelper } from \"@server/models/helpers/TextHelper\";\n import BaseEmail, { EmailProps } from \"./BaseEmail\";\n import Body from \"./components/Body\";\n import Button from \"./components/Button\";\n+import Diff from \"./components/Diff\";\n import EmailTemplate from \"./components/EmailLayout\";\n+import EmptySpace from \"./components/EmptySpace\";\n import Header from \"./components/Header\";\n import Heading from \"./components/Heading\";\n \n type InputProps = EmailProps & {\n   documentId: string;\n+  revisionId: string | undefined;\n+  userId: string;\n   actorName: string;\n   teamUrl: string;\n };\n \n type BeforeSend = {\n   document: Document;\n+  body: string | undefined;\n };\n \n type Props = InputProps & BeforeSend;\n@@ -26,13 +37,60 @@ export default class DocumentMentionedEmail extends BaseEmail<\n   InputProps,\n   BeforeSend\n > {\n-  protected async beforeSend({ documentId }: InputProps) {\n+  protected async beforeSend({ documentId, revisionId, userId }: InputProps) {\n     const document = await Document.unscoped().findByPk(documentId);\n     if (!document) {\n       return false;\n     }\n \n-    return { document };\n+    let currDoc: Document | Revision = document;\n+    let prevDoc: Revision | undefined;\n+\n+    if (revisionId) {\n+      const revision = await Revision.findByPk(revisionId);\n+      if (!revision) {\n+        return false;\n+      }\n+      currDoc = revision;\n+      prevDoc = (await revision.before()) ?? undefined;\n+    }\n+\n+    const currMentions = DocumentHelper.parseMentions(currDoc, {\n+      type: \"user\",\n+      modelId: userId,\n+    });\n+    const prevMentions = prevDoc\n+      ? DocumentHelper.parseMentions(prevDoc, {\n+          type: \"user\",\n+          modelId: userId,\n+        })\n+      : [];\n+\n+    const firstNewMention = differenceBy(currMentions, prevMentions, \"id\")[0];\n+\n+    let body: string | undefined;\n+\n+    if (firstNewMention) {\n+      const node = ProsemirrorHelper.getNodeForMentionEmail(\n+        DocumentHelper.toProsemirror(currDoc),\n+        firstNewMention\n+      );\n+\n+      if (node) {\n+        const content = await TextHelper.attachmentsToSignedUrls(\n+          ProsemirrorHelper.toHTML(node, { centered: false }),\n+          document.teamId,\n+          4 * Day.seconds\n+        );\n+\n+        if (content) {\n+          // inline all css so that it works in as many email providers as possible.\n+          body = await HTMLHelper.inlineCSS(content);\n+        }\n+      }\n+    }\n+\n+    return { document, body };\n   }\n \n   protected subject({ document }: Props) {\n@@ -58,7 +116,7 @@ Open Document: ${teamUrl}${document.url}\n   }\n \n   protected render(props: Props) {\n-    const { document, actorName, teamUrl } = props;\n+    const { document, actorName, teamUrl, body } = props;\n     const documentLink = `${teamUrl}${document.url}?ref=notification-email`;\n \n     return (\n@@ -74,6 +132,15 @@ Open Document: ${teamUrl}${document.url}\n             {actorName} mentioned you in the document{\" \"}\n             <a href={documentLink}>{document.title}</a>.\n           </p>\n+          {body && (\n+            <>\n+              <EmptySpace height={20} />\n+              <Diff>\n+                <div dangerouslySetInnerHTML={{ __html: body }} />\n+              </Diff>\n+              <EmptySpace height={20} />\n+            </>\n+          )}\n           <p>\n             <Button href={documentLink}>Open Document</Button>\n           </p>\n\ndiff --git a/server/emails/templates/components/Diff.tsx b/server/emails/templates/components/Diff.tsx\nindex ad73ae906dfe..2228ec4d6224 100644\n--- a/server/emails/templates/components/Diff.tsx\n+++ b/server/emails/templates/components/Diff.tsx\n@@ -8,8 +8,8 @@ type Props = {\n \n export default ({ children, ...rest }: Props) => {\n   const style = {\n+    border: `1.5px solid ${theme.secondaryBackground}`,\n     borderRadius: \"4px\",\n-    background: theme.secondaryBackground,\n     padding: \".75em 1em\",\n     color: theme.text,\n     display: \"block\",\n\ndiff --git a/server/models/helpers/DocumentHelper.tsx b/server/models/helpers/DocumentHelper.tsx\nindex c51d366c5d37..911b8bd35d9a 100644\n--- a/server/models/helpers/DocumentHelper.tsx\n+++ b/server/models/helpers/DocumentHelper.tsx\n@@ -14,7 +14,7 @@ import { addTags } from \"@server/logging/tracer\";\n import { trace } from \"@server/logging/tracing\";\n import { Collection, Document, Revision } from \"@server/models\";\n import diff from \"@server/utils/diff\";\n-import { ProsemirrorHelper } from \"./ProsemirrorHelper\";\n+import { MentionAttrs, ProsemirrorHelper } from \"./ProsemirrorHelper\";\n import { TextHelper } from \"./TextHelper\";\n \n type HTMLOptions = {\n@@ -225,11 +225,15 @@ export class DocumentHelper {\n    * Parse a list of mentions contained in a document or revision\n    *\n    * @param document Document or Revision\n+   * @param options Attributes to use for filtering mentions\n    * @returns An array of mentions in passed document or revision\n    */\n-  static parseMentions(document: Document | Revision) {\n+  static parseMentions(\n+    document: Document | Revision,\n+    options?: Partial<MentionAttrs>\n+  ) {\n     const node = DocumentHelper.toProsemirror(document);\n-    return ProsemirrorHelper.parseMentions(node);\n+    return ProsemirrorHelper.parseMentions(node, options);\n   }\n \n   /**\n\ndiff --git a/server/models/helpers/ProsemirrorHelper.tsx b/server/models/helpers/ProsemirrorHelper.tsx\nindex 7114d9d6c0d1..fcca1dec0c8e 100644\n--- a/server/models/helpers/ProsemirrorHelper.tsx\n+++ b/server/models/helpers/ProsemirrorHelper.tsx\n@@ -2,6 +2,7 @@ import { prosemirrorToYDoc } from \"@getoutline/y-prosemirror\";\n import { JSDOM } from \"jsdom\";\n import compact from \"lodash/compact\";\n import flatten from \"lodash/flatten\";\n+import isEqual from \"lodash/isEqual\";\n import uniq from \"lodash/uniq\";\n import { Node, DOMSerializer, Fragment, Mark } from \"prosemirror-model\";\n import * as React from \"react\";\n@@ -37,7 +38,7 @@ export type HTMLOptions = {\n   baseUrl?: string;\n };\n \n-type MentionAttrs = {\n+export type MentionAttrs = {\n   type: string;\n   label: string;\n   modelId: string;\n@@ -131,16 +132,29 @@ export class ProsemirrorHelper {\n    * Returns an array of attributes of all mentions in the node.\n    *\n    * @param node The node to parse mentions from\n+   * @param options Attributes to use for filtering mentions\n    * @returns An array of mention attributes\n    */\n-  static parseMentions(doc: Node) {\n+  static parseMentions(doc: Node, options?: Partial<MentionAttrs>) {\n     const mentions: MentionAttrs[] = [];\n \n-    doc.descendants((node: Node) => {\n+    const isApplicableNode = (node: Node) => {\n+      if (node.type.name !== \"mention\") {\n+        return false;\n+      }\n+\n       if (\n-        node.type.name === \"mention\" &&\n-        !mentions.some((m) => m.id === node.attrs.id)\n+        (options?.type && options.type !== node.attrs.type) ||\n+        (options?.modelId && options.modelId !== node.attrs.modelId)\n       ) {\n+        return false;\n+      }\n+\n+      return !mentions.some((m) => m.id === node.attrs.id);\n+    };\n+\n+    doc.descendants((node: Node) => {\n+      if (isApplicableNode(node)) {\n         mentions.push(node.attrs as MentionAttrs);\n         return false;\n       }\n@@ -155,6 +169,79 @@ export class ProsemirrorHelper {\n     return mentions;\n   }\n \n+  /**\n+   * Find the nearest ancestor block node which contains the mention.\n+   *\n+   * @param doc The top-level doc node of a document / revision.\n+   * @param mention The mention for which the ancestor node is needed.\n+   * @returns A new top-level doc node with the ancestor node as the only child.\n+   */\n+  static getNodeForMentionEmail(doc: Node, mention: MentionAttrs) {\n+    let blockNode: Node | undefined;\n+    const potentialBlockNodes = [\n+      \"table\",\n+      \"checkbox_list\",\n+      \"heading\",\n+      \"paragraph\",\n+    ];\n+\n+    const isNodeContainingMention = (node: Node) => {\n+      let foundMention = false;\n+\n+      node.descendants((childNode: Node) => {\n+        if (\n+          childNode.type.name === \"mention\" &&\n+          isEqual(childNode.attrs, mention)\n+        ) {\n+          foundMention = true;\n+          return false;\n+        }\n+\n+        // No need to traverse other descendants once we find the mention.\n+        if (foundMention) {\n+          return false;\n+        }\n+\n+        return true;\n+      });\n+\n+      return foundMention;\n+    };\n+\n+    doc.descendants((node: Node) => {\n+      // No need to traverse other descendants once we find the containing block node.\n+      if (blockNode) {\n+        return false;\n+      }\n+\n+      if (potentialBlockNodes.includes(node.type.name)) {\n+        if (isNodeContainingMention(node)) {\n+          blockNode = node;\n+        }\n+        return false;\n+      }\n+\n+      return true;\n+    });\n+\n+    // Use the containing block node to maintain structure during serialization.\n+    // Minify to include mentioned child only.\n+    if (blockNode && ![\"heading\", \"paragraph\"].includes(blockNode.type.name)) {\n+      const children: Node[] = [];\n+\n+      blockNode.forEach((child: Node) => {\n+        if (isNodeContainingMention(child)) {\n+          children.push(child);\n+        }\n+      });\n+\n+      blockNode = blockNode.copy(Fragment.fromArray(children));\n+    }\n+\n+    // Return a new top-level \"doc\" node to maintain structure during serialization.\n+    return blockNode ? doc.copy(Fragment.fromArray([blockNode])) : undefined;\n+  }\n+\n   /**\n    * Removes all marks from the node that match the given types.\n    *\n\ndiff --git a/server/queues/processors/EmailsProcessor.ts b/server/queues/processors/EmailsProcessor.ts\nindex a6eb671fa58c..0ab034d479a3 100644\n--- a/server/queues/processors/EmailsProcessor.ts\n+++ b/server/queues/processors/EmailsProcessor.ts\n@@ -87,6 +87,8 @@ export default class EmailsProcessor extends BaseProcessor {\n           {\n             to: notification.user.email,\n             documentId: notification.documentId,\n+            revisionId: notification.revisionId,\n+            userId: notification.userId,\n             teamUrl: notification.team.url,\n             actorName: notification.actor.name,\n           },\n",
    "test_patch": "diff --git a/server/models/helpers/ProseMirrorHelper.test.ts b/server/models/helpers/ProseMirrorHelper.test.ts\nnew file mode 100644\nindex 000000000000..5fcc101d00f3\n--- /dev/null\n+++ b/server/models/helpers/ProseMirrorHelper.test.ts\n@@ -0,0 +1,323 @@\n+import { DeepPartial } from \"utility-types\";\n+import { ProsemirrorData } from \"@shared/types\";\n+import { buildProseMirrorDoc } from \"@server/test/factories\";\n+import { MentionAttrs, ProsemirrorHelper } from \"./ProsemirrorHelper\";\n+\n+describe(\"ProseMirrorHelper\", () => {\n+  describe(\"getNodeForMentionEmail\", () => {\n+    it(\"should return the paragraph node\", () => {\n+      const mentionAttrs: MentionAttrs = {\n+        id: \"31d5899f-e544-4ff6-b6d3-c49dd6b81901\",\n+        type: \"user\",\n+        label: \"test.user\",\n+        actorId: \"ccec260a-e060-4925-ade8-17cfabaf2cac\",\n+        modelId: \"9a17c1c8-d178-4350-9001-203a73070fcb\",\n+      };\n+\n+      const mentionedParagraph: DeepPartial<ProsemirrorData> = {\n+        type: \"paragraph\",\n+        content: [\n+          {\n+            type: \"text\",\n+            text: \"a paragraph with \",\n+          },\n+          {\n+            type: \"mention\",\n+            attrs: mentionAttrs,\n+          },\n+          {\n+            type: \"text\",\n+            text: \" mentioned\",\n+          },\n+        ],\n+      };\n+\n+      const doc = buildProseMirrorDoc([\n+        {\n+          type: \"paragraph\",\n+          content: [\n+            {\n+              type: \"text\",\n+              text: \"some content in a paragraph\",\n+            },\n+          ],\n+        },\n+        mentionedParagraph,\n+      ]);\n+\n+      const expectedDoc = buildProseMirrorDoc([mentionedParagraph]);\n+\n+      const newDoc = ProsemirrorHelper.getNodeForMentionEmail(\n+        doc,\n+        mentionAttrs\n+      );\n+\n+      expect(newDoc?.toJSON()).toEqual(expectedDoc.toJSON());\n+    });\n+\n+    it(\"should return the heading node\", () => {\n+      const mentionAttrs: MentionAttrs = {\n+        id: \"31d5899f-e544-4ff6-b6d3-c49dd6b81901\",\n+        type: \"user\",\n+        label: \"test.user\",\n+        actorId: \"ccec260a-e060-4925-ade8-17cfabaf2cac\",\n+        modelId: \"9a17c1c8-d178-4350-9001-203a73070fcb\",\n+      };\n+\n+      const mentionedHeading: DeepPartial<ProsemirrorData> = {\n+        type: \"heading\",\n+        attrs: {\n+          level: 2,\n+        },\n+        content: [\n+          {\n+            type: \"text\",\n+            text: \"a heading with \",\n+          },\n+          {\n+            type: \"mention\",\n+            attrs: mentionAttrs,\n+          },\n+          {\n+            type: \"text\",\n+            text: \" mentioned\",\n+          },\n+        ],\n+      };\n+\n+      const doc = buildProseMirrorDoc([\n+        {\n+          type: \"paragraph\",\n+          content: [\n+            {\n+              type: \"text\",\n+              text: \"some content in a paragraph\",\n+            },\n+          ],\n+        },\n+        mentionedHeading,\n+      ]);\n+\n+      const expectedDoc = buildProseMirrorDoc([mentionedHeading]);\n+\n+      const newDoc = ProsemirrorHelper.getNodeForMentionEmail(\n+        doc,\n+        mentionAttrs\n+      );\n+\n+      expect(newDoc?.toJSON()).toEqual(expectedDoc.toJSON());\n+    });\n+\n+    it(\"should return the table node with the mentioned row only\", () => {\n+      const mentionAttrs: MentionAttrs = {\n+        id: \"31d5899f-e544-4ff6-b6d3-c49dd6b81901\",\n+        type: \"user\",\n+        label: \"test.user\",\n+        actorId: \"ccec260a-e060-4925-ade8-17cfabaf2cac\",\n+        modelId: \"9a17c1c8-d178-4350-9001-203a73070fcb\",\n+      };\n+\n+      const mentionedRow: DeepPartial<ProsemirrorData> = {\n+        type: \"tr\",\n+        content: [\n+          {\n+            type: \"td\",\n+            attrs: {\n+              colspan: 1,\n+              rowspan: 1,\n+            },\n+            content: [\n+              {\n+                type: \"paragraph\",\n+                content: [\n+                  {\n+                    type: \"mention\",\n+                    attrs: mentionAttrs,\n+                  },\n+                ],\n+              },\n+            ],\n+          },\n+        ],\n+      };\n+\n+      const doc = buildProseMirrorDoc([\n+        {\n+          type: \"paragraph\",\n+          content: [\n+            {\n+              type: \"text\",\n+              text: \"some content in a paragraph\",\n+            },\n+          ],\n+        },\n+        {\n+          type: \"table\",\n+          content: [\n+            {\n+              type: \"td\",\n+              attrs: {\n+                colspan: 1,\n+                rowspan: 1,\n+              },\n+              content: [\n+                {\n+                  type: \"paragraph\",\n+                  content: [\n+                    {\n+                      type: \"text\",\n+                      text: \"cell content\",\n+                    },\n+                  ],\n+                },\n+              ],\n+            },\n+            mentionedRow,\n+          ],\n+        },\n+      ]);\n+\n+      const expectedDoc = buildProseMirrorDoc([\n+        {\n+          type: \"table\",\n+          content: [mentionedRow],\n+        },\n+      ]);\n+\n+      const newDoc = ProsemirrorHelper.getNodeForMentionEmail(\n+        doc,\n+        mentionAttrs\n+      );\n+\n+      expect(newDoc?.toJSON()).toEqual(expectedDoc.toJSON());\n+    });\n+\n+    it(\"should return the checkbox list with the mentioned item only\", () => {\n+      const mentionAttrs: MentionAttrs = {\n+        id: \"31d5899f-e544-4ff6-b6d3-c49dd6b81901\",\n+        type: \"user\",\n+        label: \"test.user\",\n+        actorId: \"ccec260a-e060-4925-ade8-17cfabaf2cac\",\n+        modelId: \"9a17c1c8-d178-4350-9001-203a73070fcb\",\n+      };\n+\n+      const mentionedItem: DeepPartial<ProsemirrorData> = {\n+        type: \"checkbox_item\",\n+        content: [\n+          {\n+            type: \"paragraph\",\n+            content: [\n+              {\n+                type: \"text\",\n+                text: \"task B \",\n+              },\n+              {\n+                type: \"paragraph\",\n+                content: [\n+                  {\n+                    type: \"mention\",\n+                    attrs: mentionAttrs,\n+                  },\n+                ],\n+              },\n+            ],\n+          },\n+        ],\n+      };\n+\n+      const doc = buildProseMirrorDoc([\n+        {\n+          type: \"paragraph\",\n+          content: [\n+            {\n+              type: \"text\",\n+              text: \"some content in a paragraph\",\n+            },\n+          ],\n+        },\n+        {\n+          type: \"checkbox_list\",\n+          content: [\n+            {\n+              type: \"checkbox_item\",\n+              content: [\n+                {\n+                  type: \"paragraph\",\n+                  content: [\n+                    {\n+                      type: \"text\",\n+                      text: \"task A\",\n+                    },\n+                  ],\n+                },\n+              ],\n+            },\n+            mentionedItem,\n+          ],\n+        },\n+      ]);\n+\n+      const expectedDoc = buildProseMirrorDoc([\n+        {\n+          type: \"checkbox_list\",\n+          content: [mentionedItem],\n+        },\n+      ]);\n+\n+      const newDoc = ProsemirrorHelper.getNodeForMentionEmail(\n+        doc,\n+        mentionAttrs\n+      );\n+\n+      expect(newDoc?.toJSON()).toEqual(expectedDoc.toJSON());\n+    });\n+\n+    it(\"should not return anything when the mention attrs could not be found\", () => {\n+      const mentionAttrs: MentionAttrs = {\n+        id: \"31d5899f-e544-4ff6-b6d3-c49dd6b81901\",\n+        type: \"user\",\n+        label: \"test.user\",\n+        actorId: \"ccec260a-e060-4925-ade8-17cfabaf2cac\",\n+        modelId: \"9a17c1c8-d178-4350-9001-203a73070fcb\",\n+      };\n+\n+      const mentionedParagraph: DeepPartial<ProsemirrorData> = {\n+        type: \"paragraph\",\n+        content: [\n+          {\n+            type: \"text\",\n+            text: \"a paragraph with \",\n+          },\n+          {\n+            type: \"mention\",\n+            attrs: { ...mentionAttrs, modelId: \"test-model\" },\n+          },\n+          {\n+            type: \"text\",\n+            text: \" mentioned\",\n+          },\n+        ],\n+      };\n+\n+      const doc = buildProseMirrorDoc([\n+        {\n+          type: \"paragraph\",\n+          content: [\n+            {\n+              type: \"text\",\n+              text: \"some content in a paragraph\",\n+            },\n+          ],\n+        },\n+        mentionedParagraph,\n+      ]);\n+\n+      const newDoc = ProsemirrorHelper.getNodeForMentionEmail(\n+        doc,\n+        mentionAttrs\n+      );\n+\n+      expect(newDoc).toBeUndefined();\n+    });\n+  });\n+});\n\ndiff --git a/server/test/factories.ts b/server/test/factories.ts\nindex b24bd8c303b9..656f6ebdd2dc 100644\n--- a/server/test/factories.ts\n+++ b/server/test/factories.ts\n@@ -1,8 +1,10 @@\n import { faker } from \"@faker-js/faker\";\n import isNil from \"lodash/isNil\";\n import isNull from \"lodash/isNull\";\n+import { Node } from \"prosemirror-model\";\n import randomstring from \"randomstring\";\n import { InferCreationAttributes } from \"sequelize\";\n+import { DeepPartial } from \"utility-types\";\n import { v4 as uuidv4 } from \"uuid\";\n import {\n   CollectionPermission,\n@@ -11,9 +13,10 @@ import {\n   IntegrationService,\n   IntegrationType,\n   NotificationEventType,\n+  ProsemirrorData,\n   UserRole,\n } from \"@shared/types\";\n-import { parser } from \"@server/editor\";\n+import { parser, schema } from \"@server/editor\";\n import {\n   Share,\n   Team,\n@@ -640,3 +643,10 @@ export async function buildPin(overrides: Partial<Pin> = {}): Promise<Pin> {\n \n   return Pin.create(overrides);\n }\n+\n+export function buildProseMirrorDoc(content: DeepPartial<ProsemirrorData>[]) {\n+  return Node.fromJSON(schema, {\n+    type: \"doc\",\n+    content,\n+  });\n+}\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7751",
    "pr_id": 7751,
    "issue_id": 7534,
    "repo": "outline/outline",
    "problem_statement": "Backlinks section should show all documents that the current user has access to\nA clear and concise description of what the bug is.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Link to a public doc from a private doc\r\n2. Visit the public doc\r\n3. Private doc does not appear in backlinks\r\n\r\n**Expected behavior**\r\n\r\nThe private doc should be listed for the current user.",
    "issue_word_count": 52,
    "test_files_count": 2,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "server/models/Backlink.ts",
      "server/models/Document.test.ts",
      "server/models/Document.ts",
      "server/routes/api/documents/documents.ts",
      "server/test/factories.ts"
    ],
    "pr_changed_test_files": [
      "server/models/Document.test.ts",
      "server/test/factories.ts"
    ],
    "base_commit": "7a8d40b9e73454ee70cc5f4320d9e49ba0f48f3c",
    "head_commit": "5cc071d5965e06410e9a243595c48e7c7d9edfee",
    "repo_url": "https://github.com/outline/outline/pull/7751",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7751",
    "dockerfile": "",
    "pr_merged_at": "2024-10-11T15:38:24.000Z",
    "patch": "diff --git a/server/models/Backlink.ts b/server/models/Backlink.ts\nindex 39df9c1e3278..346103fc5eb6 100644\n--- a/server/models/Backlink.ts\n+++ b/server/models/Backlink.ts\n@@ -37,6 +37,31 @@ class Backlink extends IdModel<\n   @ForeignKey(() => Document)\n   @Column(DataType.UUID)\n   reverseDocumentId: string;\n+\n+  /**\n+   * Find all backlinks for a document that the user has access to\n+   *\n+   * @param documentId The document ID to find backlinks for\n+   * @param user The user to check access for\n+   */\n+  public static async findSourceDocumentIdsForUser(\n+    documentId: string,\n+    user: User\n+  ) {\n+    const backlinks = await this.findAll({\n+      attributes: [\"reverseDocumentId\"],\n+      where: {\n+        documentId,\n+      },\n+    });\n+\n+    const documents = await Document.findByIds(\n+      backlinks.map((backlink) => backlink.reverseDocumentId),\n+      { userId: user.id }\n+    );\n+\n+    return documents.map((doc) => doc.id);\n+  }\n }\n \n export default Backlink;\n\ndiff --git a/server/models/Document.ts b/server/models/Document.ts\nindex 1f2427a246bd..d740243f70e1 100644\n--- a/server/models/Document.ts\n+++ b/server/models/Document.ts\n@@ -733,6 +733,54 @@ class Document extends ArchivableModel<\n     return null;\n   }\n \n+  /**\n+   * Find many documents by their id, supports filtering by user memberships when `userId`\n+   * is specified in the options.\n+   *\n+   * @param ids An array of document ids\n+   * @param options FindOptions\n+   * @returns A promise resolving to the list of documents\n+   */\n+  static async findByIds(\n+    ids: string[],\n+    options: Omit<FindOptions<Document>, \"where\"> &\n+      Omit<AdditionalFindOptions, \"rejectOnEmpty\"> = {}\n+  ): Promise<Document[]> {\n+    const { userId, ...rest } = options;\n+\n+    const user = userId ? await User.findByPk(userId) : null;\n+    const documents = await this.scope([\n+      \"withDrafts\",\n+      {\n+        method: [\"withCollectionPermissions\", userId, rest.paranoid],\n+      },\n+      {\n+        method: [\"withViews\", userId],\n+      },\n+      {\n+        method: [\"withMembership\", userId],\n+      },\n+    ]).findAll({\n+      where: {\n+        ...(user && { teamId: user.teamId }),\n+        id: ids,\n+      },\n+      ...rest,\n+    });\n+\n+    if (!userId) {\n+      return documents;\n+    }\n+\n+    return documents.filter(\n+      (doc) =>\n+        (!doc.collection?.isPrivate && !user?.isGuest) ||\n+        (doc.collection?.memberships.length || 0) > 0 ||\n+        doc.memberships.length > 0 ||\n+        doc.groupMemberships.length > 0\n+    );\n+  }\n+\n   // instance methods\n \n   /**\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 3323eebda224..ecf472504bd9 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -142,8 +142,8 @@ router.post(\n           .map((node) => node.id)\n           .slice(ctx.state.pagination.offset, ctx.state.pagination.limit);\n         where[Op.and].push({ id: documentIds });\n-      } // otherwise, filter by all collections the user has access to\n-    } else {\n+      } // if it's not a backlink request, filter by all collections the user has access to\n+    } else if (!backlinkDocumentId) {\n       const collectionIds = await user.collectionIds();\n       where[Op.and].push({\n         collectionId:\n@@ -203,15 +203,15 @@ router.post(\n     }\n \n     if (backlinkDocumentId) {\n-      const backlinks = await Backlink.findAll({\n-        attributes: [\"reverseDocumentId\"],\n-        where: {\n-          documentId: backlinkDocumentId,\n-        },\n-      });\n-      where[Op.and].push({\n-        id: backlinks.map((backlink) => backlink.reverseDocumentId),\n-      });\n+      const sourceDocumentIds = await Backlink.findSourceDocumentIdsForUser(\n+        backlinkDocumentId,\n+        user\n+      );\n+\n+      where[Op.and].push({ id: sourceDocumentIds });\n+\n+      // For safety, ensure the collectionId is not set in the query.\n+      remove(where[Op.and], (cond) => has(cond, \"collectionId\"));\n     }\n \n     const statusQuery = [];\n",
    "test_patch": "diff --git a/server/models/Document.test.ts b/server/models/Document.test.ts\nindex f8543bace16e..7d5e2f9ffd99 100644\n--- a/server/models/Document.test.ts\n+++ b/server/models/Document.test.ts\n@@ -1,4 +1,5 @@\n import { EmptyResultError } from \"sequelize\";\n+import { CollectionPermission } from \"@shared/types\";\n import slugify from \"@shared/utils/slugify\";\n import { parser } from \"@server/editor\";\n import Document from \"@server/models/Document\";\n@@ -8,7 +9,9 @@ import {\n   buildCollection,\n   buildTeam,\n   buildUser,\n+  buildGuestUser,\n } from \"@server/test/factories\";\n+import UserMembership from \"./UserMembership\";\n \n beforeEach(() => {\n   jest.resetAllMocks();\n@@ -208,6 +211,77 @@ describe(\"#findByPk\", () => {\n   });\n });\n \n+describe(\"findByIds\", () => {\n+  test(\"should return documents by ids\", async () => {\n+    const document1 = await buildDocument();\n+    const document2 = await buildDocument();\n+    const documents = await Document.findByIds([document1.id, document2.id]);\n+    expect(documents.length).toBe(2);\n+  });\n+\n+  test(\"should return documents filtered to user access\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document1 = await buildDocument({ teamId: team.id });\n+    const document2 = await buildDocument({ teamId: team.id });\n+    const document3 = await buildDocument();\n+    const documents = await Document.findByIds(\n+      [document1.id, document2.id, document3.id],\n+      {\n+        userId: user.id,\n+      }\n+    );\n+    expect(documents.length).toBe(2);\n+  });\n+\n+  test(\"should return documents filtered to private collection access\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const collection = await buildCollection({\n+      teamId: team.id,\n+      permission: null,\n+    });\n+    const document1 = await buildDocument({\n+      teamId: team.id,\n+      collectionId: collection.id,\n+    });\n+    const document2 = await buildDocument({ teamId: team.id });\n+    const document3 = await buildDocument();\n+    const documents = await Document.findByIds(\n+      [document1.id, document2.id, document3.id],\n+      {\n+        userId: user.id,\n+      }\n+    );\n+    expect(documents.length).toBe(1);\n+  });\n+\n+  test(\"should return documents filtered to guest access\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildGuestUser({ teamId: team.id });\n+    const document1 = await buildDocument({ teamId: team.id });\n+    const collection = await buildCollection({ teamId: team.id });\n+    await UserMembership.create({\n+      createdById: user.id,\n+      collectionId: collection.id,\n+      userId: user.id,\n+      permission: CollectionPermission.Read,\n+    });\n+    const document2 = await buildDocument({\n+      teamId: team.id,\n+      collectionId: collection.id,\n+    });\n+    const document3 = await buildDocument();\n+    const documents = await Document.findByIds(\n+      [document1.id, document2.id, document3.id],\n+      {\n+        userId: user.id,\n+      }\n+    );\n+    expect(documents.length).toBe(1);\n+  });\n+});\n+\n describe(\"tasks\", () => {\n   test(\"should return tasks keys set to 0 if check items isn't present\", async () => {\n     const document = await buildDocument({\n\ndiff --git a/server/test/factories.ts b/server/test/factories.ts\nindex b24bd8c303b9..3428efb69829 100644\n--- a/server/test/factories.ts\n+++ b/server/test/factories.ts\n@@ -167,6 +167,7 @@ export async function buildGuestUser(overrides: Partial<User> = {}) {\n     name: faker.person.fullName(),\n     createdAt: new Date(\"2018-01-01T00:00:00.000Z\"),\n     lastActiveAt: new Date(\"2018-01-01T00:00:00.000Z\"),\n+    role: UserRole.Guest,\n     ...overrides,\n   });\n }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7744",
    "pr_id": 7744,
    "issue_id": 7700,
    "repo": "outline/outline",
    "problem_statement": "Switch to `dockerhub` as source for \"versions behind\" notification\nCurrently we use the GitHub releases API to detect if the installed community edition is behind – this works well for community, but not for the enterprise image as there is no corresponding GitHub release. Instead we should switch to using the dockerhub API as the source for this information:\r\n\r\nhttps://hub.docker.com/v2/repositories/outlinewiki/outline/tags?name=&ordering=last_updated&page=2&page_size=10",
    "issue_word_count": 65,
    "test_files_count": 1,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "app/components/Sidebar/components/Version.tsx",
      "server/routes/api/index.ts",
      "server/routes/api/installation/index.ts",
      "server/routes/api/installation/installation.test.ts",
      "server/routes/api/installation/installation.ts",
      "server/utils/getInstallationInfo.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/installation/installation.test.ts"
    ],
    "base_commit": "57e9abd77f8271a5f37521c8581fa78779af3c0c",
    "head_commit": "3815569317a30cd9b66735781882a6161bf301d8",
    "repo_url": "https://github.com/outline/outline/pull/7744",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7744",
    "dockerfile": "",
    "pr_merged_at": "2024-10-25T13:39:47.000Z",
    "patch": "diff --git a/app/components/Sidebar/components/Version.tsx b/app/components/Sidebar/components/Version.tsx\nindex 0c2174ba3e5b..f2e8810b2af4 100644\n--- a/app/components/Sidebar/components/Version.tsx\n+++ b/app/components/Sidebar/components/Version.tsx\n@@ -2,41 +2,29 @@ import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import styled from \"styled-components\";\n import Badge from \"~/components/Badge\";\n-import { version } from \"../../../../package.json\";\n+import { client } from \"~/utils/ApiClient\";\n+import Logger from \"~/utils/Logger\";\n+import { version as currentVersion } from \"../../../../package.json\";\n import SidebarLink from \"./SidebarLink\";\n \n export default function Version() {\n-  const [releasesBehind, setReleasesBehind] = React.useState(-1);\n+  const [versionsBehind, setVersionsBehind] = React.useState(-1);\n   const { t } = useTranslation();\n \n   React.useEffect(() => {\n-    async function loadReleases() {\n-      const res = await fetch(\n-        \"https://api.github.com/repos/outline/outline/releases\"\n-      );\n-      const releases = await res.json();\n-\n-      if (Array.isArray(releases)) {\n-        const everyNewRelease = releases\n-          .map((release) => release.tag_name)\n-          .findIndex((tagName) => tagName === `v${version}`);\n-\n-        const onlyFullNewRelease = releases\n-          .filter((release) => !release.prerelease)\n-          .map((release) => release.tag_name)\n-          .findIndex((tagName) => tagName === `v${version}`);\n-\n-        const computedReleasesBehind = version.includes(\"pre\")\n-          ? everyNewRelease\n-          : onlyFullNewRelease;\n-\n-        if (computedReleasesBehind >= 0) {\n-          setReleasesBehind(computedReleasesBehind);\n+    async function loadVersionInfo() {\n+      try {\n+        // Fetch version info from the server-side proxy\n+        const res = await client.post(\"/installation.info\");\n+        if (res.data && res.data.versionsBehind >= 0) {\n+          setVersionsBehind(res.data.versionsBehind);\n         }\n+      } catch (error) {\n+        Logger.error(\"Failed to load version info\", error);\n       }\n     }\n \n-    void loadReleases();\n+    void loadVersionInfo();\n   }, []);\n \n   return (\n@@ -45,16 +33,16 @@ export default function Version() {\n       href=\"https://github.com/outline/outline/releases\"\n       label={\n         <>\n-          v{version}\n-          {releasesBehind >= 0 && (\n+          v{currentVersion}\n+          {versionsBehind >= 0 && (\n             <>\n               <br />\n               <LilBadge>\n-                {releasesBehind === 0\n+                {versionsBehind === 0\n                   ? t(\"Up to date\")\n                   : t(`{{ releasesBehind }} versions behind`, {\n-                      releasesBehind,\n-                      count: releasesBehind,\n+                      releasesBehind: versionsBehind,\n+                      count: versionsBehind,\n                     })}\n               </LilBadge>\n             </>\n\ndiff --git a/server/routes/api/index.ts b/server/routes/api/index.ts\nindex b5647e868591..ccb575a8558b 100644\n--- a/server/routes/api/index.ts\n+++ b/server/routes/api/index.ts\n@@ -20,6 +20,7 @@ import events from \"./events\";\n import fileOperationsRoute from \"./fileOperations\";\n import groupMemberships from \"./groupMemberships\";\n import groups from \"./groups\";\n+import installation from \"./installation\";\n import integrations from \"./integrations\";\n import apiResponse from \"./middlewares/apiResponse\";\n import apiTracer from \"./middlewares/apiTracer\";\n@@ -91,6 +92,10 @@ router.use(\"/\", fileOperationsRoute.routes());\n router.use(\"/\", urls.routes());\n router.use(\"/\", userMemberships.routes());\n \n+if (!env.isCloudHosted) {\n+  router.use(\"/\", installation.routes());\n+}\n+\n if (env.isDevelopment) {\n   router.use(\"/\", developer.routes());\n }\n\ndiff --git a/server/routes/api/installation/index.ts b/server/routes/api/installation/index.ts\nnew file mode 100644\nindex 000000000000..1e3f1a45f1b9\n--- /dev/null\n+++ b/server/routes/api/installation/index.ts\n@@ -0,0 +1 @@\n+export { default } from \"./installation\";\n\ndiff --git a/server/routes/api/installation/installation.ts b/server/routes/api/installation/installation.ts\nnew file mode 100644\nindex 000000000000..fd40ff04d28a\n--- /dev/null\n+++ b/server/routes/api/installation/installation.ts\n@@ -0,0 +1,24 @@\n+import Router from \"koa-router\";\n+import auth from \"@server/middlewares/authentication\";\n+import { APIContext } from \"@server/types\";\n+import { getVersion, getVersionInfo } from \"@server/utils/getInstallationInfo\";\n+\n+const router = new Router();\n+\n+router.post(\"installation.info\", auth(), async (ctx: APIContext) => {\n+  const currentVersion = getVersion();\n+  const { latestVersion, versionsBehind } = await getVersionInfo(\n+    currentVersion\n+  );\n+\n+  ctx.body = {\n+    data: {\n+      version: currentVersion,\n+      latestVersion,\n+      versionsBehind,\n+    },\n+    policies: [],\n+  };\n+});\n+\n+export default router;\n\ndiff --git a/server/utils/getInstallationInfo.ts b/server/utils/getInstallationInfo.ts\nnew file mode 100644\nindex 000000000000..1d11a426cb58\n--- /dev/null\n+++ b/server/utils/getInstallationInfo.ts\n@@ -0,0 +1,62 @@\n+import { version } from \"../../package.json\";\n+import fetch from \"./fetch\";\n+\n+const dockerhubLink =\n+  \"https://hub.docker.com/v2/repositories/outlinewiki/outline\";\n+\n+function isFullReleaseVersion(versionName: string): boolean {\n+  const releaseRegex = /^(version-)?\\d+\\.\\d+\\.\\d+$/; // Matches \"N.N.N\" or \"version-N.N.N\" for dockerhub releases before v0.56.0\"\n+  return releaseRegex.test(versionName);\n+}\n+\n+export async function getVersionInfo(currentVersion: string): Promise<{\n+  latestVersion: string;\n+  versionsBehind: number;\n+}> {\n+  let allVersions: string[] = [];\n+  let latestVersion: string | null = null;\n+  let nextUrl: string | null =\n+    dockerhubLink + \"/tags?name=&ordering=last_updated&page_size=100\";\n+\n+  // Continue fetching pages until the required versions are found or no more pages\n+  while (nextUrl) {\n+    const response = await fetch(nextUrl);\n+    const data = await response.json();\n+\n+    // Map and filter the versions to keep only full releases\n+    const pageVersions = data.results\n+      .map((result: any) => result.name)\n+      .filter(isFullReleaseVersion);\n+\n+    allVersions = allVersions.concat(pageVersions);\n+\n+    // Set the latest version if not already set\n+    if (!latestVersion && pageVersions.length > 0) {\n+      latestVersion = pageVersions[0];\n+    }\n+\n+    // Check if the current version is found\n+    const currentIndex = allVersions.findIndex(\n+      (version: string) => version === currentVersion\n+    );\n+\n+    if (currentIndex !== -1) {\n+      const versionsBehind = currentIndex; // The number of versions behind\n+      return {\n+        latestVersion: latestVersion || currentVersion, // Fallback to current if no latest found\n+        versionsBehind,\n+      };\n+    }\n+\n+    nextUrl = data.next || null;\n+  }\n+\n+  return {\n+    latestVersion: latestVersion || currentVersion,\n+    versionsBehind: -1, // Return -1 if current version is not found\n+  };\n+}\n+\n+export function getVersion(): string {\n+  return version;\n+}\n",
    "test_patch": "diff --git a/server/routes/api/installation/installation.test.ts b/server/routes/api/installation/installation.test.ts\nnew file mode 100644\nindex 000000000000..287bd3d50487\n--- /dev/null\n+++ b/server/routes/api/installation/installation.test.ts\n@@ -0,0 +1,31 @@\n+import { buildUser } from \"@server/test/factories\";\n+import { getTestServer } from \"@server/test/support\";\n+\n+const server = getTestServer();\n+\n+describe(\"installation.info\", () => {\n+  it(\"should require authentication\", async () => {\n+    const res = await server.post(\"/api/installation.info\", {\n+      body: {},\n+    });\n+    expect(res.status).toEqual(401);\n+  });\n+\n+  it(\"should return installation information\", async () => {\n+    const user = await buildUser();\n+    const res = await server.post(\"/api/installation.info\", {\n+      body: {\n+        token: user.getJwtToken(),\n+      },\n+    });\n+\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data).not.toBeFalsy();\n+    expect(body.data.version).not.toBeFalsy();\n+    expect(body.data.latestVersion).not.toBeFalsy();\n+    expect(typeof body.data.versionsBehind).toBe(\"number\");\n+    expect(body.policies).not.toBeFalsy();\n+  });\n+});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7738",
    "pr_id": 7738,
    "issue_id": 7672,
    "repo": "outline/outline",
    "problem_statement": "Import Failure and Filename Encoding Issue When Markdown Path Contains Chinese Characters\nWhen attempting to import a Markdown file that is located in a directory with Chinese characters in its path, Outline fails to import the file. The error logs indicate issues with encoding the file path, resulting in corrupted characters and an error due to the path being too long.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create a directory and  Markdown file with a path that includes Chinese characters.\r\n2. Compress the directory containing the Markdown file into a ZIP archive.\r\n3. Attempt to import the Markdown file into Outline.\r\n4. Observe the failure of the import process and review the logs.\r\n\r\n**Expected behavior**\r\nThe Markdown file should be imported without any issues, and the directory and file names containing Chinese characters should be correctly encoded and displayed.\r\n\r\n**Error Log**\r\n```\r\noutline-1   | {\"event\":{\"actorId\":\"ed72f3bf-eed1-4155-8c21-5966a0a6f922\",\"changes\":null,\"collectionId\":null,\"createdAt\":\"2024-09-28T12:53:38.893Z\",\"data\":{\"type\":\"import\"},\"documentId\":null,\"id\":\"30671db1-a5f2-44d4-9430-056c47088a0e\",\"ip\":\"\",\"modelId\":\"fc987e3b-6748-4cb6-8391-5476fe3afe83\",\"name\":\"fileOperations.create\",\"teamId\":\"abc0bb8e-3a48-4e04-9a10-606e43c8c0c6\",\"userId\":null},\"label\":\"worker\",\"level\":\"info\",\"message\":\"FileOperationCreatedProcessor running fileOperations.create\"}\r\noutline-1   | {\"event\":{\"actorId\":\"ed72f3bf-eed1-4155-8c21-5966a0a6f922\",\"changes\":null,\"collectionId\":null,\"createdAt\":\"2024-09-28T12:53:38.893Z\",\"data\":{\"type\":\"import\"},\"documentId\":null,\"id\":\"30671db1-a5f2-44d4-9430-056c47088a0e\",\"ip\":\"\",\"modelId\":\"fc987e3b-6748-4cb6-8391-5476fe3afe83\",\"name\":\"fileOperations.create\",\"teamId\":\"abc0bb8e-3a48-4e04-9a10-606e43c8c0c6\",\"userId\":null},\"label\":\"worker\",\"level\":\"info\",\"message\":\"WebhookProcessor running fileOperations.create\"}\r\noutline-1   | {\"fileOperationId\":\"fc987e3b-6748-4cb6-8391-5476fe3afe83\",\"label\":\"worker\",\"level\":\"info\",\"message\":\"ImportMarkdownZipTask running\"}\r\noutline-1   | {\"label\":\"task\",\"level\":\"info\",\"message\":\"ImportTask fetching data for fc987e3b-6748-4cb6-8391-5476fe3afe83\"}\r\noutline-1   | node:events:497\r\noutline-1   |       throw er; // Unhandled 'error' event\r\noutline-1   |       ^\r\noutline-1   |\r\noutline-1   | Error: ENAMETOOLONG: name too long, open '/tmp/tmp-355-dAgGsf41E1mN/ͼ  /  Ϣ  Դ    /simpread-  Ϣ    ѧ     -      棨   ѳɣ ѧϰ ʼ  -    ߡ  ˡ  š ʮ ¡   Ϣ     +   Ϣϵͳ +   Ϣ            +   Ϣ   ߺ   Ϣ   ɡ .md'\r\noutline-1   | Emitted 'error' event on WriteStream instance at:\r\noutline-1   |     at WriteStream.onerror (node:internal/streams/readable:1026:14)\r\noutline-1   |     at WriteStream.emit (node:events:519:28)\r\noutline-1   |     at WriteStream.emit (node:domain:488:12)\r\noutline-1   |     at emitErrorNT (node:internal/streams/destroy:169:8)\r\noutline-1   |     at emitErrorCloseNT (node:internal/streams/destroy:128:3)\r\noutline-1   |     at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {\r\noutline-1   |   errno: -36,\r\noutline-1   |   code: 'ENAMETOOLONG',\r\noutline-1   |   syscall: 'open',\r\noutline-1   |   path: '/tmp/tmp-355-dAgGsf41E1mN/ͼ  /  Ϣ  Դ    /simpread-  Ϣ    ѧ     -      棨   ѳɣ ѧϰ ʼ  -    ߡ  ˡ  š ʮ ¡   Ϣ     +   Ϣϵͳ +   Ϣ            +   Ϣ   ߺ   Ϣ   ɡ .md'\r\noutline-1   | }\r\noutline-1   |\r\noutline-1   | Node.js v20.17.0\r\noutline-1   | {\"label\":\"lifecycle\",\"level\":\"info\",\"message\":\"Note: Restricting process count to 1 due to use of collaborative service\"}\r\noutline-1   | {\"label\":\"lifecycle\",\"level\":\"info\",\"message\":\"Starting collaboration service\"}\r\noutline-1   | {\"label\":\"lifecycle\",\"level\":\"info\",\"message\":\"Starting websockets service\"}\r\noutline-1   | {\"label\":\"lifecycle\",\"level\":\"info\",\"message\":\"Starting worker service\"}\r\noutline-1   | {\"label\":\"lifecycle\",\"level\":\"info\",\"message\":\"Starting web service\"}\r\n```\r\n\r\n**Outline (please complete the following information):**\r\n- Install: self hosted\r\n- Version: v0.80.2\r\n\r\n",
    "issue_word_count": 481,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "server/queues/tasks/ImportTask.ts",
      "server/utils/ZipHelper.ts",
      "server/utils/fs.test.ts",
      "server/utils/fs.ts"
    ],
    "pr_changed_test_files": [
      "server/utils/fs.test.ts"
    ],
    "base_commit": "0a1c614c558ffbd1d6e4f641a4588b681239079d",
    "head_commit": "4462ffa9063fd5795406c99cd603e586c58a4449",
    "repo_url": "https://github.com/outline/outline/pull/7738",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7738",
    "dockerfile": "",
    "pr_merged_at": "2024-10-07T12:36:18.000Z",
    "patch": "diff --git a/server/queues/tasks/ImportTask.ts b/server/queues/tasks/ImportTask.ts\nindex 2a8c5f1a5b9c..5a4af8d1645a 100644\n--- a/server/queues/tasks/ImportTask.ts\n+++ b/server/queues/tasks/ImportTask.ts\n@@ -225,9 +225,9 @@ export default abstract class ImportTask extends BaseTask<Props> {\n \n           void ZipHelper.extract(filePath, tmpDir)\n             .then(() => resolve(tmpDir))\n-            .catch((err) => {\n-              Logger.error(\"Could not extract zip file\", err);\n-              reject(err);\n+            .catch((zErr) => {\n+              Logger.error(\"Could not extract zip file\", zErr);\n+              reject(zErr);\n             });\n         });\n       });\n\ndiff --git a/server/utils/ZipHelper.ts b/server/utils/ZipHelper.ts\nindex 1fdad2011777..c355ed2277a6 100644\n--- a/server/utils/ZipHelper.ts\n+++ b/server/utils/ZipHelper.ts\n@@ -6,6 +6,10 @@ import yauzl, { Entry, validateFileName } from \"yauzl\";\n import { bytesToHumanReadable } from \"@shared/utils/files\";\n import Logger from \"@server/logging/Logger\";\n import { trace } from \"@server/logging/tracing\";\n+import { trimFileAndExt } from \"./fs\";\n+\n+const MAX_FILE_NAME_LENGTH = 255;\n+const MAX_PATH_LENGTH = 4096;\n \n @trace()\n export default class ZipHelper {\n@@ -81,9 +85,9 @@ export default class ZipHelper {\n                 }\n               }\n             )\n-            .on(\"error\", (err) => {\n+            .on(\"error\", (rErr) => {\n               dest.end();\n-              reject(err);\n+              reject(rErr);\n             })\n             .pipe(dest);\n         }\n@@ -129,35 +133,47 @@ export default class ZipHelper {\n                 // directory file names end with '/'\n                 fs.mkdirp(\n                   path.join(outputDir, fileName),\n-                  function (err: Error) {\n-                    if (err) {\n-                      throw err;\n+                  function (mErr: Error) {\n+                    if (mErr) {\n+                      return reject(mErr);\n                     }\n                     zipfile.readEntry();\n                   }\n                 );\n               } else {\n                 // file entry\n-                zipfile.openReadStream(entry, function (err, readStream) {\n-                  if (err) {\n-                    throw err;\n+                zipfile.openReadStream(entry, function (rErr, readStream) {\n+                  if (rErr) {\n+                    return reject(rErr);\n                   }\n                   // ensure parent directory exists\n                   fs.mkdirp(\n                     path.join(outputDir, path.dirname(fileName)),\n-                    function (err) {\n-                      if (err) {\n-                        throw err;\n+                    function (mkErr) {\n+                      if (mkErr) {\n+                        return reject(mkErr);\n                       }\n-                      readStream.pipe(\n-                        fs.createWriteStream(path.join(outputDir, fileName))\n+\n+                      const location = trimFileAndExt(\n+                        path.join(\n+                          outputDir,\n+                          trimFileAndExt(fileName, MAX_FILE_NAME_LENGTH)\n+                        ),\n+                        MAX_PATH_LENGTH\n                       );\n-                      readStream.on(\"end\", function () {\n-                        zipfile.readEntry();\n-                      });\n-                      readStream.on(\"error\", (err) => {\n-                        throw err;\n-                      });\n+                      const dest = fs\n+                        .createWriteStream(location)\n+                        .on(\"error\", reject);\n+\n+                      readStream\n+                        .on(\"error\", (rsErr) => {\n+                          dest.end();\n+                          reject(rsErr);\n+                        })\n+                        .on(\"end\", function () {\n+                          zipfile.readEntry();\n+                        })\n+                        .pipe(dest);\n                     }\n                   );\n                 });\n@@ -165,8 +181,8 @@ export default class ZipHelper {\n             });\n             zipfile.on(\"close\", resolve);\n             zipfile.on(\"error\", reject);\n-          } catch (err) {\n-            reject(err);\n+          } catch (zErr) {\n+            reject(zErr);\n           }\n         }\n       );\n\ndiff --git a/server/utils/fs.ts b/server/utils/fs.ts\nindex 079d1945db91..6ddbd15a5c67 100644\n--- a/server/utils/fs.ts\n+++ b/server/utils/fs.ts\n@@ -1,14 +1,58 @@\n import path from \"path\";\n import fs from \"fs-extra\";\n \n+/**\n+ * Serialize a file name for inclusion in a ZIP.\n+ *\n+ * @param text The file name to serialize.\n+ * @returns The serialized file name.\n+ */\n export function serializeFilename(text: string): string {\n   return text.replace(/\\//g, \"%2F\").replace(/\\\\/g, \"%5C\");\n }\n \n+/**\n+ * Deserialize a file name serialized with `serializeFilename`.\n+ *\n+ * @param text The file name to deserialize.\n+ * @returns The deserialized file name.\n+ */\n export function deserializeFilename(text: string): string {\n   return text.replace(/%2F/g, \"/\").replace(/%5C/g, \"\\\\\");\n }\n \n+/**\n+ * Get the UTF8 byte length of a string.\n+ *\n+ * @param str The string to measure.\n+ * @returns The byte length of the string.\n+ */\n+export function stringByteLength(str: string): number {\n+  return Buffer.byteLength(str, \"utf8\");\n+}\n+\n+/**\n+ * Trim a file name to a maximum length, retaining the extension.\n+ *\n+ * @param text The file name to trim.\n+ * @param length The maximum length of the file name.\n+ * @returns The trimmed file name.\n+ */\n+export function trimFileAndExt(text: string, length: number): string {\n+  if (stringByteLength(text) > length) {\n+    const ext = path.extname(text);\n+    const name = path.basename(text, ext);\n+    return name.slice(0, length - stringByteLength(ext)) + ext;\n+  }\n+  return text;\n+}\n+\n+/**\n+ * Get a list of file names in a directory.\n+ *\n+ * @param dirName The directory to search.\n+ * @returns A list of file names in the directory.\n+ */\n export function getFilenamesInDirectory(dirName: string): string[] {\n   return fs\n     .readdirSync(dirName)\n@@ -21,6 +65,12 @@ export function getFilenamesInDirectory(dirName: string): string[] {\n     );\n }\n \n+/**\n+ * Require all files in a directory and return them as an array of tuples.\n+ *\n+ * @param dirName The directory to search.\n+ * @returns An array of tuples containing the required files and their names.\n+ */\n export function requireDirectory<T>(dirName: string): [T, string][] {\n   return getFilenamesInDirectory(dirName).map((fileName) => {\n     const filePath = path.join(dirName, fileName);\n",
    "test_patch": "diff --git a/server/utils/fs.test.ts b/server/utils/fs.test.ts\nindex c36cd1e840c5..b4365b4e4817 100644\n--- a/server/utils/fs.test.ts\n+++ b/server/utils/fs.test.ts\n@@ -1,4 +1,9 @@\n-import { serializeFilename, deserializeFilename } from \"./fs\";\n+import {\n+  serializeFilename,\n+  deserializeFilename,\n+  trimFileAndExt,\n+  stringByteLength,\n+} from \"./fs\";\n \n describe(\"serializeFilename\", () => {\n   it(\"should serialize forward slashes\", () => {\n@@ -31,3 +36,21 @@ describe(\"deserializeFilename\", () => {\n     );\n   });\n });\n+\n+describe(\"stringByteLength\", () => {\n+  it(\"should return byte length of string\", () => {\n+    expect(stringByteLength(\"\")).toBe(0);\n+    expect(stringByteLength(\"a\")).toBe(1);\n+    expect(stringByteLength(\"🦄\")).toBe(4);\n+    expect(stringByteLength(\"你好\")).toBe(6);\n+  });\n+});\n+\n+describe(\"trimFileAndExt\", () => {\n+  it(\"should trim filename\", () => {\n+    expect(trimFileAndExt(\"file.txt\", 6)).toBe(\"fi.txt\");\n+    expect(trimFileAndExt(\"file.txt\", 8)).toBe(\"file.txt\");\n+    expect(trimFileAndExt(\"file.md\", 9)).toBe(\"file.md\");\n+    expect(trimFileAndExt(\"你好.md\", 2)).toBe(\"你.md\");\n+  });\n+});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7699",
    "pr_id": 7699,
    "issue_id": 7675,
    "repo": "outline/outline",
    "problem_statement": "Move API Keys to a workspace list\nCurrently API keys are managed on a per-user basis, this means that as an admin of a workspace you do not have any visibility into who has keys live, which are being used, when they expire etc.\r\n\r\nThe suggestion here is to make it possible for admins to view the existence of and manage all API keys in the workspace both via the API and the UI.",
    "issue_word_count": 68,
    "test_files_count": 2,
    "non_test_files_count": 9,
    "pr_changed_files": [
      "app/components/Text.ts",
      "app/models/ApiKey.ts",
      "app/scenes/ApiKeyNew/index.tsx",
      "app/scenes/Settings/components/ApiKeyListItem.tsx",
      "server/middlewares/authentication.test.ts",
      "server/middlewares/authentication.ts",
      "server/migrations/20240929194201-add-hash-to-api-key.js",
      "server/models/ApiKey.test.ts",
      "server/models/ApiKey.ts",
      "server/presenters/apiKey.ts",
      "shared/i18n/locales/en_US/translation.json"
    ],
    "pr_changed_test_files": [
      "server/middlewares/authentication.test.ts",
      "server/models/ApiKey.test.ts"
    ],
    "base_commit": "21adfdd1bf2ff74657cfb4fe63d13f99ff3ca52b",
    "head_commit": "0281fb58d4f149856929c7e4ccf27dab4b052d91",
    "repo_url": "https://github.com/outline/outline/pull/7699",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7699",
    "dockerfile": "",
    "pr_merged_at": "2024-10-01T00:16:36.000Z",
    "patch": "diff --git a/app/components/Text.ts b/app/components/Text.ts\nindex d0305170521f..2598b71744ee 100644\n--- a/app/components/Text.ts\n+++ b/app/components/Text.ts\n@@ -16,6 +16,8 @@ type Props = {\n   italic?: boolean;\n   /** Whether the text should be truncated with an ellipsis */\n   ellipsis?: boolean;\n+  /** Whether the text should be monospaced */\n+  monospace?: boolean;\n };\n \n /**\n@@ -59,6 +61,8 @@ const Text = styled.span<Props>`\n     `}\n \n   font-style: ${(props) => (props.italic ? \"italic\" : \"normal\")};\n+  font-family: ${(props) =>\n+    props.monospace ? props.theme.fontFamilyMono : \"inherit\"};\n \n   white-space: normal;\n   user-select: ${(props) => (props.selectable ? \"text\" : \"none\")};\n\ndiff --git a/app/models/ApiKey.ts b/app/models/ApiKey.ts\nindex b624828011cc..70c68b48b338 100644\n--- a/app/models/ApiKey.ts\n+++ b/app/models/ApiKey.ts\n@@ -1,44 +1,44 @@\n import { isPast } from \"date-fns\";\n import { computed, observable } from \"mobx\";\n-import Model from \"./base/Model\";\n+import ParanoidModel from \"./base/ParanoidModel\";\n import Field from \"./decorators/Field\";\n \n-class ApiKey extends Model {\n+class ApiKey extends ParanoidModel {\n   static modelName = \"ApiKey\";\n \n-  @Field\n-  @observable\n-  id: string;\n-\n-  /**\n-   * The user chosen name of the API key.\n-   */\n+  /** The user chosen name of the API key. */\n   @Field\n   @observable\n   name: string;\n \n-  /**\n-   * An optional datetime that the API key expires.\n-   */\n+  /** An optional datetime that the API key expires. */\n   @Field\n   @observable\n   expiresAt?: string;\n \n-  /**\n-   * An optional datetime that the API key was last used at.\n-   */\n+  /** An optional datetime that the API key was last used at. */\n   @observable\n   lastActiveAt?: string;\n \n-  secret: string;\n+  /** The plain text value of the API key, only available on creation. */\n+  value: string;\n+\n+  /** A preview of the last 4 characters of the API key. */\n+  last4: string;\n \n-  /**\n-   * Whether the API key has an expiry in the past.\n-   */\n+  /** Whether the API key has an expiry in the past. */\n   @computed\n   get isExpired() {\n     return this.expiresAt ? isPast(new Date(this.expiresAt)) : false;\n   }\n+\n+  @computed\n+  get obfuscatedValue() {\n+    if (this.createdAt < new Date(\"2022-12-03\").toISOString()) {\n+      return `...${this.last4}`;\n+    }\n+    return `ol...${this.last4}`;\n+  }\n }\n \n export default ApiKey;\n\ndiff --git a/app/scenes/ApiKeyNew/index.tsx b/app/scenes/ApiKeyNew/index.tsx\nindex 0d12f3ad8d60..ecae83735e7a 100644\n--- a/app/scenes/ApiKeyNew/index.tsx\n+++ b/app/scenes/ApiKeyNew/index.tsx\n@@ -71,7 +71,11 @@ function ApiKeyNew({ onSubmit }: Props) {\n           name,\n           expiresAt: expiresAt?.toISOString(),\n         });\n-        toast.success(t(\"API key created\"));\n+        toast.success(\n+          t(\n+            \"API key created. Please copy the value now as it will not be shown again.\"\n+          )\n+        );\n         onSubmit();\n       } catch (err) {\n         toast.error(err.message);\n\ndiff --git a/app/scenes/Settings/components/ApiKeyListItem.tsx b/app/scenes/Settings/components/ApiKeyListItem.tsx\nindex 243d50d3508d..f7442670bf8b 100644\n--- a/app/scenes/Settings/components/ApiKeyListItem.tsx\n+++ b/app/scenes/Settings/components/ApiKeyListItem.tsx\n@@ -52,11 +52,21 @@ const ApiKeyListItem = ({ apiKey, isCopied, onCopy }: Props) => {\n       subtitle={subtitle}\n       actions={\n         <Flex align=\"center\" gap={8}>\n-          <CopyToClipboard text={apiKey.secret} onCopy={handleCopy}>\n-            <Button type=\"button\" icon={<CopyIcon />} neutral borderOnHover>\n-              {isCopied ? t(\"Copied\") : t(\"Copy\")}\n-            </Button>\n-          </CopyToClipboard>\n+          {apiKey.value && (\n+            <CopyToClipboard text={apiKey.value} onCopy={handleCopy}>\n+              <Button type=\"button\" icon={<CopyIcon />} neutral borderOnHover>\n+                {isCopied ? t(\"Copied\") : t(\"Copy\")}\n+              </Button>\n+            </CopyToClipboard>\n+          )}\n+          <Text\n+            type=\"tertiary\"\n+            size=\"xsmall\"\n+            style={{ marginRight: 8 }}\n+            monospace\n+          >\n+            {apiKey.obfuscatedValue}\n+          </Text>\n           <ApiKeyMenu apiKey={apiKey} />\n         </Flex>\n       }\n\ndiff --git a/server/middlewares/authentication.ts b/server/middlewares/authentication.ts\nindex bd0557865b7b..5b3ec18f5374 100644\n--- a/server/middlewares/authentication.ts\n+++ b/server/middlewares/authentication.ts\n@@ -70,11 +70,7 @@ export default function auth(options: AuthenticationOptions = {}) {\n         let apiKey;\n \n         try {\n-          apiKey = await ApiKey.findOne({\n-            where: {\n-              secret: token,\n-            },\n-          });\n+          apiKey = await ApiKey.findByToken(token);\n         } catch (err) {\n           throw AuthenticationError(\"Invalid API key\");\n         }\n\ndiff --git a/server/migrations/20240929194201-add-hash-to-api-key.js b/server/migrations/20240929194201-add-hash-to-api-key.js\nnew file mode 100644\nindex 000000000000..82b2c321c18e\n--- /dev/null\n+++ b/server/migrations/20240929194201-add-hash-to-api-key.js\n@@ -0,0 +1,35 @@\n+'use strict';\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up (queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.addColumn(\"apiKeys\", \"hash\", {\n+        type: Sequelize.STRING,\n+        allowNull: true,\n+        unique: true,\n+      }, { transaction });\n+\n+      await queryInterface.addColumn(\"apiKeys\", \"last4\", {\n+        type: Sequelize.STRING(4),\n+        allowNull: true,\n+      }, { transaction });\n+\n+      await queryInterface.changeColumn(\"apiKeys\", \"secret\", {\n+        type: Sequelize.STRING,\n+        allowNull: true,\n+      }, { transaction });\n+    });\n+  },\n+\n+  async down (queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.removeColumn(\"apiKeys\", \"hash\", { transaction });\n+      await queryInterface.removeColumn(\"apiKeys\", \"last4\", { transaction });\n+      await queryInterface.changeColumn(\"apiKeys\", \"secret\", {\n+        type: Sequelize.STRING,\n+        allowNull: false,\n+      }, { transaction });\n+    });\n+  }\n+};\n\ndiff --git a/server/models/ApiKey.ts b/server/models/ApiKey.ts\nindex 9e9c9ebde371..91ebd791c2c2 100644\n--- a/server/models/ApiKey.ts\n+++ b/server/models/ApiKey.ts\n@@ -1,6 +1,8 @@\n+import crypto from \"crypto\";\n import { subMinutes } from \"date-fns\";\n import randomstring from \"randomstring\";\n-import { InferAttributes, InferCreationAttributes } from \"sequelize\";\n+import { InferAttributes, InferCreationAttributes, Op } from \"sequelize\";\n+import { type BuildOptions } from \"sequelize\";\n import {\n   Column,\n   Table,\n@@ -9,6 +11,8 @@ import {\n   BelongsTo,\n   ForeignKey,\n   IsDate,\n+  DataType,\n+  BeforeSave,\n } from \"sequelize-typescript\";\n import { ApiKeyValidation } from \"@shared/validations\";\n import User from \"./User\";\n@@ -24,6 +28,18 @@ class ApiKey extends ParanoidModel<\n > {\n   static prefix = \"ol_api_\";\n \n+  constructor(\n+    values?: Partial<InferCreationAttributes<ApiKey>>,\n+    options?: BuildOptions\n+  ) {\n+    // Temporary until last4 is backfilled and secret is removed.\n+    if (values?.secret) {\n+      values.last4 = values.secret.slice(-4);\n+    }\n+\n+    super(values, options);\n+  }\n+\n   @Length({\n     min: ApiKeyValidation.minNameLength,\n     max: ApiKeyValidation.maxNameLength,\n@@ -32,10 +48,24 @@ class ApiKey extends ParanoidModel<\n   @Column\n   name: string;\n \n+  /** @deprecated The plain text value of the API key, removed soon. */\n   @Unique\n   @Column\n   secret: string;\n \n+  /** The cached plain text value. Only available when creating the API key */\n+  @Column(DataType.VIRTUAL)\n+  value: string | null;\n+\n+  /** The hashed value of the API key */\n+  @Unique\n+  @Column\n+  hash: string;\n+\n+  /** The last 4 characters of the API key */\n+  @Column\n+  last4: string;\n+\n   @IsDate\n   @Column\n   expiresAt: Date | null;\n@@ -47,12 +77,32 @@ class ApiKey extends ParanoidModel<\n   // hooks\n \n   @BeforeValidate\n-  static async generateSecret(model: ApiKey) {\n-    if (!model.secret) {\n-      model.secret = `${ApiKey.prefix}${randomstring.generate(38)}`;\n+  public static async generateSecret(model: ApiKey) {\n+    if (!model.hash) {\n+      const secret = `${ApiKey.prefix}${randomstring.generate(38)}`;\n+      model.value = model.secret || secret;\n+      model.hash = this.hash(model.value);\n+    }\n+  }\n+\n+  @BeforeSave\n+  public static async updateLast4(model: ApiKey) {\n+    const value = model.value || model.secret;\n+    if (value) {\n+      model.last4 = value.slice(-4);\n     }\n   }\n \n+  /**\n+   * Generates a hashed API key for the given input key.\n+   *\n+   * @param key The input string to hash\n+   * @returns The hashed API key\n+   */\n+  private static hash(key: string) {\n+    return crypto.createHash(\"sha256\").update(key).digest(\"hex\");\n+  }\n+\n   /**\n    * Validates that the input touch could be an API key, this does not check\n    * that the key exists in the database.\n@@ -60,10 +110,26 @@ class ApiKey extends ParanoidModel<\n    * @param text The text to validate\n    * @returns True if likely an API key\n    */\n-  static match(text: string) {\n+  public static match(text: string) {\n+    // cannot guarantee prefix here as older keys do not include it.\n     return !!text.replace(ApiKey.prefix, \"\").match(/^[\\w]{38}$/);\n   }\n \n+  /**\n+   * Finds an API key by the given input string. This will check both the\n+   * secret and hash fields.\n+   *\n+   * @param input The input string to search for\n+   * @returns The API key if found\n+   */\n+  public static findByToken(input: string) {\n+    return this.findOne({\n+      where: {\n+        [Op.or]: [{ secret: input }, { hash: this.hash(input) }],\n+      },\n+    });\n+  }\n+\n   // associations\n \n   @BelongsTo(() => User, \"userId\")\n@@ -73,6 +139,8 @@ class ApiKey extends ParanoidModel<\n   @Column\n   userId: string;\n \n+  // methods\n+\n   updateActiveAt = async () => {\n     const fiveMinutesAgo = subMinutes(new Date(), 5);\n \n\ndiff --git a/server/presenters/apiKey.ts b/server/presenters/apiKey.ts\nindex ef331cfc294d..d2796bd7fae4 100644\n--- a/server/presenters/apiKey.ts\n+++ b/server/presenters/apiKey.ts\n@@ -1,13 +1,14 @@\n import ApiKey from \"@server/models/ApiKey\";\n \n-export default function presentApiKey(key: ApiKey) {\n+export default function presentApiKey(apiKey: ApiKey) {\n   return {\n-    id: key.id,\n-    name: key.name,\n-    secret: key.secret,\n-    createdAt: key.createdAt,\n-    updatedAt: key.updatedAt,\n-    expiresAt: key.expiresAt,\n-    lastActiveAt: key.lastActiveAt,\n+    id: apiKey.id,\n+    name: apiKey.name,\n+    value: apiKey.value,\n+    last4: apiKey.last4,\n+    createdAt: apiKey.createdAt,\n+    updatedAt: apiKey.updatedAt,\n+    expiresAt: apiKey.expiresAt,\n+    lastActiveAt: apiKey.lastActiveAt,\n   };\n }\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex b9be2d922f2b..e61565bc42cb 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -536,7 +536,7 @@\n   \"shared\": \"shared\",\n   \"invited you to\": \"invited you to\",\n   \"Choose a date\": \"Choose a date\",\n-  \"API key created\": \"API key created\",\n+  \"API key created. Please copy the value now as it will not be shown again.\": \"API key created. Please copy the value now as it will not be shown again.\",\n   \"Name your key something that will help you to remember it's use in the future, for example \\\"local development\\\" or \\\"continuous integration\\\".\": \"Name your key something that will help you to remember it's use in the future, for example \\\"local development\\\" or \\\"continuous integration\\\".\",\n   \"Expiration\": \"Expiration\",\n   \"Never expires\": \"Never expires\",\n",
    "test_patch": "diff --git a/server/middlewares/authentication.test.ts b/server/middlewares/authentication.test.ts\nindex 7b5932c1c219..24c187db5520 100644\n--- a/server/middlewares/authentication.test.ts\n+++ b/server/middlewares/authentication.test.ts\n@@ -1,7 +1,11 @@\n import { DefaultState } from \"koa\";\n import randomstring from \"randomstring\";\n-import ApiKey from \"@server/models/ApiKey\";\n-import { buildUser, buildTeam, buildAdmin } from \"@server/test/factories\";\n+import {\n+  buildUser,\n+  buildTeam,\n+  buildAdmin,\n+  buildApiKey,\n+} from \"@server/test/factories\";\n import auth from \"./authentication\";\n \n describe(\"Authentication middleware\", () => {\n@@ -51,14 +55,12 @@ describe(\"Authentication middleware\", () => {\n       const state = {} as DefaultState;\n       const user = await buildUser();\n       const authMiddleware = auth();\n-      const key = await ApiKey.create({\n-        userId: user.id,\n-      });\n+      const key = await buildApiKey({ userId: user.id });\n       await authMiddleware(\n         {\n           // @ts-expect-error mock request\n           request: {\n-            get: jest.fn(() => `Bearer ${key.secret}`),\n+            get: jest.fn(() => `Bearer ${key.value}`),\n           },\n           state,\n           cache: {},\n\ndiff --git a/server/models/ApiKey.test.ts b/server/models/ApiKey.test.ts\nindex 29f26f972c55..98b36c85ba3c 100644\n--- a/server/models/ApiKey.test.ts\n+++ b/server/models/ApiKey.test.ts\n@@ -5,10 +5,8 @@ import ApiKey from \"./ApiKey\";\n describe(\"#ApiKey\", () => {\n   describe(\"match\", () => {\n     test(\"should match an API secret\", async () => {\n-      const apiKey = await buildApiKey({\n-        name: \"Dev\",\n-      });\n-      expect(ApiKey.match(apiKey?.secret)).toBe(true);\n+      const apiKey = await buildApiKey();\n+      expect(ApiKey.match(apiKey.value!)).toBe(true);\n       expect(ApiKey.match(`${randomstring.generate(38)}`)).toBe(true);\n     });\n \n@@ -20,17 +18,13 @@ describe(\"#ApiKey\", () => {\n \n   describe(\"lastActiveAt\", () => {\n     test(\"should update lastActiveAt\", async () => {\n-      const apiKey = await buildApiKey({\n-        name: \"Dev\",\n-      });\n+      const apiKey = await buildApiKey();\n       await apiKey.updateActiveAt();\n       expect(apiKey.lastActiveAt).toBeTruthy();\n     });\n \n     test(\"should not update lastActiveAt within 5 minutes\", async () => {\n-      const apiKey = await buildApiKey({\n-        name: \"Dev\",\n-      });\n+      const apiKey = await buildApiKey();\n       await apiKey.updateActiveAt();\n       expect(apiKey.lastActiveAt).toBeTruthy();\n \n@@ -39,4 +33,15 @@ describe(\"#ApiKey\", () => {\n       expect(apiKey.lastActiveAt).toEqual(lastActiveAt);\n     });\n   });\n+\n+  describe(\"findByToken\", () => {\n+    test(\"should find by hash\", async () => {\n+      const apiKey = await buildApiKey({\n+        name: \"Dev\",\n+      });\n+      const found = await ApiKey.findByToken(apiKey.value!);\n+      expect(found?.id).toEqual(apiKey.id);\n+      expect(found?.last4).toEqual(apiKey.value!.slice(-4));\n+    });\n+  });\n });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7630",
    "pr_id": 7630,
    "issue_id": 7624,
    "repo": "outline/outline",
    "problem_statement": "Update via API, change not appearing via API call or public share URL\nOn a self hosted instance, I am using the API to update a document. Python snippet:\r\n\r\n```\r\n    payload = {\r\n        'id': docid,\r\n        'text': contents,\r\n        'publish': True,\r\n        'done': True,\r\n    }\r\n    print(requests.post(f'{HOST}/api/documents.update', headers=headers, json=payload).json())\r\n```\r\n\r\nI have a parent page shared via a public url. \r\n\r\n1. On the browser I am logged into, I can see the updated content. \r\n2. If I request the page content via an API call, I do not see the updated content.\r\n3. Even when logged in, if I try and access the document via the shared URL I see no content.\r\n4. If I try accessing the page via the shared URL in another browser I see no content.\r\n5. If I edit the page in the browser (add a new line) it appears in the other browsers and via the API request.",
    "issue_word_count": 142,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "server/commands/documentUpdater.test.ts",
      "server/models/helpers/DocumentHelper.tsx"
    ],
    "pr_changed_test_files": [
      "server/commands/documentUpdater.test.ts"
    ],
    "base_commit": "32081565913c76862373c8d7f5d4052c5af11a38",
    "head_commit": "9a5ed1e4c304cc3b289bc9cd70bd472fd2f3d6df",
    "repo_url": "https://github.com/outline/outline/pull/7630",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7630",
    "dockerfile": "",
    "pr_merged_at": "2024-09-20T14:37:42.000Z",
    "patch": "diff --git a/server/models/helpers/DocumentHelper.tsx b/server/models/helpers/DocumentHelper.tsx\nindex b7bda21ee42a..c51d366c5d37 100644\n--- a/server/models/helpers/DocumentHelper.tsx\n+++ b/server/models/helpers/DocumentHelper.tsx\n@@ -1,6 +1,5 @@\n import {\n   updateYFragment,\n-  yDocToProsemirror,\n   yDocToProsemirrorJSON,\n } from \"@getoutline/y-prosemirror\";\n import { JSDOM } from \"jsdom\";\n@@ -442,6 +441,7 @@ export class DocumentHelper {\n   ) {\n     document.text = append ? document.text + text : text;\n     const doc = parser.parse(document.text);\n+    document.content = doc.toJSON();\n \n     if (document.state) {\n       const ydoc = new Y.Doc();\n@@ -456,13 +456,9 @@ export class DocumentHelper {\n       updateYFragment(type.doc, type, doc, new Map());\n \n       const state = Y.encodeStateAsUpdate(ydoc);\n-      const node = yDocToProsemirror(schema, ydoc);\n \n-      document.content = node.toJSON();\n       document.state = Buffer.from(state);\n       document.changed(\"state\", true);\n-    } else if (doc) {\n-      document.content = doc.toJSON();\n     }\n \n     return document;\n",
    "test_patch": "diff --git a/server/commands/documentUpdater.test.ts b/server/commands/documentUpdater.test.ts\nindex 82005a3f8a35..f52d48e23457 100644\n--- a/server/commands/documentUpdater.test.ts\n+++ b/server/commands/documentUpdater.test.ts\n@@ -48,4 +48,37 @@ describe(\"documentUpdater\", () => {\n \n     expect(document.lastModifiedById).not.toEqual(user.id);\n   });\n+\n+  it(\"should update document content when changing text\", async () => {\n+    const user = await buildUser();\n+    let document = await buildDocument({\n+      teamId: user.teamId,\n+    });\n+\n+    document = await sequelize.transaction(async (transaction) =>\n+      documentUpdater({\n+        text: \"Changed\",\n+        document,\n+        user,\n+        ip,\n+        transaction,\n+      })\n+    );\n+\n+    expect(document.text).toEqual(\"Changed\");\n+    expect(document.content).toEqual({\n+      type: \"doc\",\n+      content: [\n+        {\n+          type: \"paragraph\",\n+          content: [\n+            {\n+              type: \"text\",\n+              text: \"Changed\",\n+            },\n+          ],\n+        },\n+      ],\n+    });\n+  });\n });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7628",
    "pr_id": 7628,
    "issue_id": 7627,
    "repo": "outline/outline",
    "problem_statement": "`documents.archived` fails with status 500 if the value of `sort` param in request is `\"index\"`\nThis has been the case since ages. It only got uncovered while working on #7266, particularly the part where \"Documents\" tab should show docs in an archived collection 👇\r\n\r\n<img width=\"1275\" alt=\"Screenshot 2024-09-19 at 9 54 45 PM\" src=\"https://github.com/user-attachments/assets/77fc02c9-b86c-45a4-bee0-86c6db419c3a\">\r\n\r\n",
    "issue_word_count": 53,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "server/routes/api/documents/documents.test.ts",
      "server/routes/api/documents/documents.ts",
      "server/routes/api/documents/schema.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/documents/documents.test.ts"
    ],
    "base_commit": "5c56714bc8c215d03ea8c956c53e3a9ba5895e3d",
    "head_commit": "0de149d36a31d1ad19d6c331a891ec9f9350d9ba",
    "repo_url": "https://github.com/outline/outline/pull/7628",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7628",
    "dockerfile": "",
    "pr_merged_at": "2024-09-20T05:59:20.000Z",
    "patch": "diff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex d5c61d43fc74..3da40f7d5a11 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -247,21 +247,65 @@ router.post(\n   pagination(),\n   validate(T.DocumentsArchivedSchema),\n   async (ctx: APIContext<T.DocumentsArchivedReq>) => {\n-    const { sort, direction } = ctx.input.body;\n+    const { sort, direction, collectionId } = ctx.input.body;\n+\n     const { user } = ctx.state.auth;\n-    const collectionIds = await user.collectionIds();\n-    const documents = await Document.defaultScopeWithUser(user.id).findAll({\n-      where: {\n-        teamId: user.teamId,\n-        collectionId: collectionIds,\n-        archivedAt: {\n-          [Op.ne]: null,\n-        },\n+\n+    let where: WhereOptions<Document> = {\n+      teamId: user.teamId,\n+      archivedAt: {\n+        [Op.ne]: null,\n       },\n-      order: [[sort, direction]],\n+    };\n+\n+    let documentIds: string[] = [];\n+\n+    // if a specific collection is passed then we need to check auth to view it\n+    if (collectionId) {\n+      where = { ...where, collectionId };\n+      const collection = await Collection.scope({\n+        method: [\"withMembership\", user.id],\n+      }).findByPk(collectionId);\n+      authorize(user, \"readDocument\", collection);\n+\n+      // index sort is special because it uses the order of the documents in the\n+      // collection.documentStructure rather than a database column\n+      if (sort === \"index\") {\n+        documentIds = (collection?.documentStructure || [])\n+          .map((node) => node.id)\n+          .slice(ctx.state.pagination.offset, ctx.state.pagination.limit);\n+        where = { ...where, id: documentIds };\n+      } // otherwise, filter by all collections the user has access to\n+    } else {\n+      const collectionIds = await user.collectionIds();\n+      where = {\n+        ...where,\n+        collectionId: collectionIds,\n+      };\n+    }\n+\n+    const documents = await Document.defaultScopeWithUser(user.id).findAll({\n+      where,\n+      order: [\n+        [\n+          // this needs to be done otherwise findAll will throw citing\n+          // that the column \"document\".\"index\" doesn't exist – value of sort\n+          // is required to be a column name\n+          sort === \"index\" ? \"updatedAt\" : sort,\n+          direction,\n+        ],\n+      ],\n       offset: ctx.state.pagination.offset,\n       limit: ctx.state.pagination.limit,\n     });\n+\n+    if (sort === \"index\") {\n+      // sort again so as to retain the order of documents as in collection.documentStructure\n+      documents.sort(\n+        (a, b) => documentIds.indexOf(a.id) - documentIds.indexOf(b.id)\n+      );\n+    }\n+\n     const data = await Promise.all(\n       documents.map((document) => presentDocument(ctx, document))\n     );\n\ndiff --git a/server/routes/api/documents/schema.ts b/server/routes/api/documents/schema.ts\nindex ec94fe261a37..d994a044833c 100644\n--- a/server/routes/api/documents/schema.ts\n+++ b/server/routes/api/documents/schema.ts\n@@ -82,7 +82,10 @@ export const DocumentsListSchema = BaseSchema.extend({\n export type DocumentsListReq = z.infer<typeof DocumentsListSchema>;\n \n export const DocumentsArchivedSchema = BaseSchema.extend({\n-  body: DocumentsSortParamsSchema.extend({}),\n+  body: DocumentsSortParamsSchema.extend({\n+    /** Id of the collection to which archived documents should belong */\n+    collectionId: z.string().uuid().optional(),\n+  }),\n });\n \n export type DocumentsArchivedReq = z.infer<typeof DocumentsArchivedSchema>;\n",
    "test_patch": "diff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex 288bf056df29..c826e9998950 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -2066,6 +2066,101 @@ describe(\"#documents.templatize\", () => {\n });\n \n describe(\"#documents.archived\", () => {\n+  it(\"should succeed with 200 ok if sort parameter in request is set to index\", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    await document.archive(user);\n+    const res = await server.post(\"/api/documents.archived\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        sort: \"index\",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).toHaveLength(1);\n+    expect(body.data[0].id).toEqual(document.id);\n+    expect(body.data[0].archivedAt).toBeTruthy();\n+  });\n+\n+  it(\"should return archived documents in a given collection\", async () => {\n+    const user = await buildUser();\n+    const [firstCollection, secondCollection] = await Promise.all([\n+      buildCollection({ teamId: user.teamId }),\n+      buildCollection({ teamId: user.teamId }),\n+    ]);\n+\n+    const [documentInFirstCollection, documentInSecondCollection] =\n+      await Promise.all([\n+        buildDocument({\n+          userId: user.id,\n+          teamId: user.teamId,\n+          collectionId: firstCollection.id,\n+        }),\n+        buildDocument({\n+          userId: user.id,\n+          teamId: user.teamId,\n+          collectionId: secondCollection.id,\n+        }),\n+      ]);\n+\n+    await Promise.all([\n+      documentInFirstCollection.archive(user),\n+      documentInSecondCollection.archive(user),\n+    ]);\n+\n+    const res = await server.post(\"/api/documents.archived\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        collectionId: firstCollection.id,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).toHaveLength(1);\n+    expect(body.data[0].id).toEqual(documentInFirstCollection.id);\n+    expect(body.data[0].archivedAt).toBeTruthy();\n+  });\n+\n+  it(\"should return archived documents in all user collections\", async () => {\n+    const user = await buildUser();\n+    const [firstCollection, secondCollection] = await Promise.all([\n+      buildCollection({ teamId: user.teamId }),\n+      buildCollection({ teamId: user.teamId }),\n+    ]);\n+\n+    const [documentInFirstCollection, documentInSecondCollection] =\n+      await Promise.all([\n+        buildDocument({\n+          userId: user.id,\n+          teamId: user.teamId,\n+          collectionId: firstCollection.id,\n+        }),\n+        buildDocument({\n+          userId: user.id,\n+          teamId: user.teamId,\n+          collectionId: secondCollection.id,\n+        }),\n+      ]);\n+\n+    await Promise.all([\n+      documentInFirstCollection.archive(user),\n+      documentInSecondCollection.archive(user),\n+    ]);\n+\n+    const res = await server.post(\"/api/documents.archived\", {\n+      body: {\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).toHaveLength(2);\n+  });\n+\n   it(\"should return archived documents\", async () => {\n     const user = await buildUser();\n     const document = await buildDocument({\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7590",
    "pr_id": 7590,
    "issue_id": 7585,
    "repo": "outline/outline",
    "problem_statement": "Unable to find user with diacritics in @mention\n:bug: *Not able to tag people whose names have symbols:* For example, we have someone whose name starts with a `Ça` - they don't show up when you start typing their name with a regular `ca` or a `ça` . I _can_ get to them through their last name which starts with a `Sü`, but I have to type the umlaut with the `u` or the results will not show up.",
    "issue_word_count": 70,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "server/migrations/20240912222438-add-unaccent-extension.js",
      "server/routes/api/documents/documents.test.ts",
      "server/routes/api/documents/documents.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/documents/documents.test.ts"
    ],
    "base_commit": "7c9a2bbcf6b0610dc880ba5620ce1af0d4dde526",
    "head_commit": "b4d0f0d27655cf953b84a19404116ebece029dfe",
    "repo_url": "https://github.com/outline/outline/pull/7590",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7590",
    "dockerfile": "",
    "pr_merged_at": "2024-09-12T23:42:31.000Z",
    "patch": "diff --git a/server/migrations/20240912222438-add-unaccent-extension.js b/server/migrations/20240912222438-add-unaccent-extension.js\nnew file mode 100644\nindex 000000000000..d588422cfdc2\n--- /dev/null\n+++ b/server/migrations/20240912222438-add-unaccent-extension.js\n@@ -0,0 +1,15 @@\n+\"use strict\";\n+\n+module.exports = {\n+  async up(queryInterface) {\n+    await queryInterface.sequelize.query(\n+      `CREATE EXTENSION IF NOT EXISTS \"unaccent\";`\n+    );\n+  },\n+\n+  async down(queryInterface) {\n+    await queryInterface.sequelize.query(\n+      `DROP EXTENSION IF EXISTS \"unaccent\";`\n+    );\n+  },\n+};\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex f92a9b08ecb8..0c78ebdf6b35 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -551,9 +551,11 @@ router.post(\n     if (query) {\n       where = {\n         ...where,\n-        name: {\n-          [Op.iLike]: `%${query}%`,\n-        },\n+        [Op.and]: [\n+          Sequelize.literal(\n+            `unaccent(LOWER(name)) like unaccent(LOWER('%${query}%'))`\n+          ),\n+        ],\n       };\n     }\n \n",
    "test_patch": "diff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex 7902236ca82b..1ceaeffe263e 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -4197,15 +4197,15 @@ describe(\"#documents.users\", () => {\n         teamId: user.teamId,\n       }),\n       buildUser({\n-        name: \"Bret Victor\",\n+        name: \"Brët Victor\",\n         teamId: user.teamId,\n       }),\n       buildUser({\n-        name: \"Ken Thompson\",\n+        name: \"Ken Thompsoń\",\n         teamId: user.teamId,\n       }),\n       buildUser({\n-        name: \"Jamie Zawinsky\",\n+        name: \"Jámie Zawinsky\",\n         teamId: user.teamId,\n       }),\n     ]);\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7529",
    "pr_id": 7529,
    "issue_id": 7245,
    "repo": "outline/outline",
    "problem_statement": "Link didn't consider port cause open error\nOutline didn't handle port of url which cause outline try to open document inside the workspace.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Setup a self-hosted Outline on https://example.com:3000\r\n2. Create a document and add a link to https://example.com/some/path (it's not outline)\r\n3. Open this link will cause 404 not found inside the outline.\r\n\r\n**Expected behavior**\r\nI except it will redirect me to the URL, not try to open a document inside the outline.\r\n\r\n**Outline (please complete the following information):**\r\n- Install: self hosted\r\n- Version: 0.77.3\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows\r\n - Browser: Microsoft Edge\r\n - Version: 127.0.2651.49",
    "issue_word_count": 114,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "shared/utils/domains.test.ts",
      "shared/utils/domains.ts",
      "shared/utils/urls.test.ts",
      "shared/utils/urls.ts"
    ],
    "pr_changed_test_files": [
      "shared/utils/domains.test.ts",
      "shared/utils/urls.test.ts"
    ],
    "base_commit": "bf1580a459e8eea22838ea9a4fafc23d6848c81b",
    "head_commit": "f4fc654a2778c016a6192c411beab67fcdb6c49a",
    "repo_url": "https://github.com/outline/outline/pull/7529",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7529",
    "dockerfile": "",
    "pr_merged_at": "2024-09-04T00:22:43.000Z",
    "patch": "diff --git a/shared/utils/domains.ts b/shared/utils/domains.ts\nindex 95eb997ae84a..d9a95bf19766 100644\n--- a/shared/utils/domains.ts\n+++ b/shared/utils/domains.ts\n@@ -4,6 +4,7 @@ import env from \"../env\";\n type Domain = {\n   teamSubdomain: string;\n   host: string;\n+  port?: string;\n   custom: boolean;\n };\n \n@@ -44,6 +45,14 @@ export function parseDomain(url: string): Domain {\n     throw new TypeError(\"a non-empty url is required\");\n   }\n \n+  let port;\n+  try {\n+    const parsedUrl = new URL(url);\n+    port = parsedUrl.port || undefined;\n+  } catch (e) {\n+    // ignore\n+  }\n+\n   const host = normalizeUrl(url);\n   const baseDomain = getBaseDomain();\n \n@@ -51,7 +60,7 @@ export function parseDomain(url: string): Domain {\n   const baseUrlStart = host === baseDomain ? 0 : host.indexOf(`.${baseDomain}`);\n \n   if (baseUrlStart === -1) {\n-    return { teamSubdomain: \"\", host, custom: true };\n+    return { teamSubdomain: \"\", host, port: undefined, custom: true };\n   }\n \n   // we consider anything in front of the baseUrl to be the subdomain\n@@ -61,6 +70,7 @@ export function parseDomain(url: string): Domain {\n   return {\n     teamSubdomain: isReservedSubdomain ? \"\" : subdomain,\n     host,\n+    port,\n     custom: false,\n   };\n }\n\ndiff --git a/shared/utils/urls.ts b/shared/utils/urls.ts\nindex c26d0a924b71..7079bea47a57 100644\n--- a/shared/utils/urls.ts\n+++ b/shared/utils/urls.ts\n@@ -36,7 +36,7 @@ export function isInternalUrl(href: string) {\n   const domain = parseDomain(href);\n \n   return (\n-    outline.host === domain.host ||\n+    (outline.host === domain.host && outline.port === domain.port) ||\n     (typeof window !== \"undefined\" && window.location.hostname === domain.host)\n   );\n }\n",
    "test_patch": "diff --git a/shared/utils/domains.test.ts b/shared/utils/domains.test.ts\nindex 85e680bdea10..93e5e0073c89 100644\n--- a/shared/utils/domains.test.ts\n+++ b/shared/utils/domains.test.ts\n@@ -12,16 +12,19 @@ describe(\"#parseDomain\", () => {\n     expect(parseDomain(\"http://example.com\")).toMatchObject({\n       teamSubdomain: \"\",\n       host: \"example.com\",\n+      port: undefined,\n       custom: false,\n     });\n     expect(parseDomain(\"//example.com\")).toMatchObject({\n       teamSubdomain: \"\",\n       host: \"example.com\",\n+      port: undefined,\n       custom: false,\n     });\n-    expect(parseDomain(\"https://example.com\")).toMatchObject({\n+    expect(parseDomain(\"https://example.com:3030\")).toMatchObject({\n       teamSubdomain: \"\",\n       host: \"example.com\",\n+      port: \"3030\",\n       custom: false,\n     });\n   });\n\ndiff --git a/shared/utils/urls.test.ts b/shared/utils/urls.test.ts\nindex d5eef39faf91..f4638de894d4 100644\n--- a/shared/utils/urls.test.ts\n+++ b/shared/utils/urls.test.ts\n@@ -1,3 +1,4 @@\n+import env from \"../env\";\n import * as urlsUtils from \"./urls\";\n import { urlRegex } from \"./urls\";\n \n@@ -46,10 +47,18 @@ describe(\"isBase64Url\", () => {\n });\n \n describe(\"isInternalUrl\", () => {\n+  beforeEach(() => {\n+    env.URL = \"https://example.com:3000\";\n+  });\n+\n   it(\"should return false if empty string\", () => {\n     expect(urlsUtils.isInternalUrl(\"\")).toBe(false);\n   });\n \n+  it(\"should return false if port is different\", () => {\n+    expect(urlsUtils.isInternalUrl(\"https://example.com:4000\")).toBe(false);\n+  });\n+\n   it(\"should return true if starting with relative path\", () => {\n     expect(urlsUtils.isInternalUrl(\"/drafts\")).toEqual(true);\n   });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7528",
    "pr_id": 7528,
    "issue_id": 7277,
    "repo": "outline/outline",
    "problem_statement": "Plugin `.tests.ts` are not running in CI\n> You glob and split specifically on server/**/*.test.ts and run that on yarn test (for test parallism), but yarn test:server, which is never actually called, also runs plugin tests.",
    "issue_word_count": 31,
    "test_files_count": 4,
    "non_test_files_count": 3,
    "pr_changed_files": [
      ".circleci/config.yml",
      "plugins/slack/server/api/hooks.test.ts",
      "plugins/slack/server/auth/slack.test.ts",
      "plugins/slack/server/auth/slack.ts",
      "plugins/storage/server/api/files.test.ts",
      "plugins/webhooks/server/processors/WebhookProcessor.test.ts",
      "server/models/decorators/CounterCache.ts"
    ],
    "pr_changed_test_files": [
      "plugins/slack/server/api/hooks.test.ts",
      "plugins/slack/server/auth/slack.test.ts",
      "plugins/storage/server/api/files.test.ts",
      "plugins/webhooks/server/processors/WebhookProcessor.test.ts"
    ],
    "base_commit": "bf1580a459e8eea22838ea9a4fafc23d6848c81b",
    "head_commit": "c78fbac516ed71dde046c500a5f35a503c7a16d4",
    "repo_url": "https://github.com/outline/outline/pull/7528",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7528",
    "dockerfile": "",
    "pr_merged_at": "2024-09-04T02:13:42.000Z",
    "patch": "diff --git a/.circleci/config.yml b/.circleci/config.yml\nindex 17dc295375d3..2b403240ce5f 100644\n--- a/.circleci/config.yml\n+++ b/.circleci/config.yml\n@@ -88,7 +88,7 @@ jobs:\n       - run:\n           name: test\n           command: |\n-            TESTFILES=$(circleci tests glob \"server/**/*.test.ts\" | circleci tests split)\n+            TESTFILES=$(circleci tests glob \"**/server/**/*.test.ts\" | circleci tests split)\n             yarn test --maxWorkers=2 $TESTFILES\n   bundle-size:\n     <<: *defaults\n\ndiff --git a/plugins/slack/server/auth/slack.ts b/plugins/slack/server/auth/slack.ts\nindex 12aa5de5ba4a..58064c779b48 100644\n--- a/plugins/slack/server/auth/slack.ts\n+++ b/plugins/slack/server/auth/slack.ts\n@@ -124,9 +124,7 @@ if (env.SLACK_CLIENT_ID && env.SLACK_CLIENT_SECRET) {\n \n   router.get(\n     \"slack.post\",\n-    auth({\n-      optional: true,\n-    }),\n+    auth({ optional: true }),\n     validate(T.SlackPostSchema),\n     async (ctx: APIContext<T.SlackPostReq>) => {\n       const { code, error, state } = ctx.input.query;\n\ndiff --git a/server/models/decorators/CounterCache.ts b/server/models/decorators/CounterCache.ts\nindex 0f785643cf7e..88fbcb4eb9c2 100644\n--- a/server/models/decorators/CounterCache.ts\n+++ b/server/models/decorators/CounterCache.ts\n@@ -1,8 +1,9 @@\n import isNil from \"lodash/isNil\";\n import { InferAttributes } from \"sequelize\";\n import { ModelClassGetter } from \"sequelize-typescript\";\n+import env from \"@server/env\";\n import { CacheHelper } from \"@server/utils/CacheHelper\";\n-import Model from \"../base/Model\";\n+import type Model from \"../base/Model\";\n \n type RelationOptions = {\n   /** Reference name used in cache key. */\n@@ -24,6 +25,10 @@ export function CounterCache<\n   options: RelationOptions\n ) {\n   return function (target: InstanceType<T>, _propertyKey: string) {\n+    if (env.isTest) {\n+      // No-op cache in test environment\n+      return;\n+    }\n     const modelClass = classResolver() as typeof Model;\n     const cacheKeyPrefix = `count:${target.constructor.name}:${options.as}`;\n \n",
    "test_patch": "diff --git a/plugins/slack/server/api/hooks.test.ts b/plugins/slack/server/api/hooks.test.ts\nindex f7149d836884..84770a3f98f5 100644\n--- a/plugins/slack/server/api/hooks.test.ts\n+++ b/plugins/slack/server/api/hooks.test.ts\n@@ -1,12 +1,7 @@\n import randomstring from \"randomstring\";\n import { IntegrationService } from \"@shared/types\";\n import { IntegrationAuthentication, SearchQuery } from \"@server/models\";\n-import {\n-  buildDocument,\n-  buildIntegration,\n-  buildTeam,\n-  buildUser,\n-} from \"@server/test/factories\";\n+import { buildDocument, buildTeam, buildUser } from \"@server/test/factories\";\n import { getTestServer } from \"@server/test/support\";\n import env from \"../env\";\n import * as Slack from \"../slack\";\n@@ -137,8 +132,8 @@ describe(\"#hooks.slack\", () => {\n     expect(res.status).toEqual(200);\n     expect(body.attachments.length).toEqual(1);\n     expect(body.attachments[0].title).toEqual(document.title);\n-    expect(body.attachments[0].text).toEqual(\n-      \"This title *contains* a search term\"\n+    expect(body.attachments[0].text).toContain(\n+      \"This title *contains* a search\"\n     );\n   });\n \n@@ -197,7 +192,7 @@ describe(\"#hooks.slack\", () => {\n     expect(body.text.includes(\"How to use\")).toEqual(true);\n   });\n \n-  it(\"should return search results with snippet for unknown user\", async () => {\n+  it(\"should return message for unknown user\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n     // unpublished document will not be returned\n@@ -207,11 +202,6 @@ describe(\"#hooks.slack\", () => {\n       teamId: user.teamId,\n       publishedAt: null,\n     });\n-    const document = await buildDocument({\n-      text: \"This title contains a search term\",\n-      userId: user.id,\n-      teamId: user.teamId,\n-    });\n     const res = await server.post(\"/api/hooks.slack\", {\n       body: {\n         token: env.SLACK_VERIFICATION_TOKEN,\n@@ -222,39 +212,11 @@ describe(\"#hooks.slack\", () => {\n     });\n     const body = await res.json();\n     expect(res.status).toEqual(200);\n-    expect(body.text).toContain(\"you haven’t signed in to Outline yet\");\n-    expect(body.attachments.length).toEqual(1);\n-    expect(body.attachments[0].title).toEqual(document.title);\n-    expect(body.attachments[0].text).toEqual(\n-      \"This title *contains* a search term\"\n-    );\n-  });\n \n-  it(\"should return search results with snippet for user through integration mapping\", async () => {\n-    const user = await buildUser();\n-    const integration = await buildIntegration({\n-      teamId: user.teamId,\n-    });\n-    const document = await buildDocument({\n-      text: \"This title contains a search term\",\n-      userId: user.id,\n-      teamId: user.teamId,\n-    });\n-    const res = await server.post(\"/api/hooks.slack\", {\n-      body: {\n-        token: env.SLACK_VERIFICATION_TOKEN,\n-        user_id: \"unknown-slack-user-id\",\n-        team_id: (integration.settings as any)?.serviceTeamId,\n-        text: \"contains\",\n-      },\n-    });\n-    const body = await res.json();\n-    expect(res.status).toEqual(200);\n-    expect(body.text).toContain(\"you haven’t signed in to Outline yet\");\n-    expect(body.attachments.length).toEqual(1);\n-    expect(body.attachments[0].title).toEqual(document.title);\n-    expect(body.attachments[0].text).toEqual(\n-      \"This title *contains* a search term\"\n+    expect(body.response_type).toEqual(\"ephemeral\");\n+    expect(body.blocks.length).toEqual(1);\n+    expect(body.blocks[0].text.text).toContain(\n+      \"It looks like you haven’t linked your Outline account to Slack yet\"\n     );\n   });\n \n\ndiff --git a/plugins/slack/server/auth/slack.test.ts b/plugins/slack/server/auth/slack.test.ts\nindex edea76b498d8..b465c3118df7 100644\n--- a/plugins/slack/server/auth/slack.test.ts\n+++ b/plugins/slack/server/auth/slack.test.ts\n@@ -1,13 +1,25 @@\n+import { buildUser } from \"@server/test/factories\";\n import { getTestServer } from \"@server/test/support\";\n \n const server = getTestServer();\n \n describe(\"#slack.post\", () => {\n-  it(\"should fail with status 400 bad request if query param state is not a uuid\", async () => {\n-    const res = await server.get(\"/auth/slack.post?state=123\");\n-    const body = await res.json();\n+  it(\"should fail with status 400 bad request if query param state is not valid\", async () => {\n+    const user = await buildUser();\n+    const res = await server.get(\n+      `/auth/slack.post?state=${JSON.stringify(\n+        {}\n+      )}&code=123&token=${user.getJwtToken()}`\n+    );\n+    expect(res.status).toEqual(400);\n+  });\n+\n+  it(\"should fail with status 400 bad request if query param state is not JSON\", async () => {\n+    const user = await buildUser();\n+    const res = await server.get(\n+      `/auth/slack.post?state=bad&code=123&token=${user.getJwtToken()}`\n+    );\n     expect(res.status).toEqual(400);\n-    expect(body.message).toEqual(\"state: Invalid uuid\");\n   });\n \n   it(\"should fail with status 400 bad request when both code and error are missing in query params\", async () => {\n\ndiff --git a/plugins/storage/server/api/files.test.ts b/plugins/storage/server/api/files.test.ts\nindex e3cbbcf062b1..249e53cb612d 100644\n--- a/plugins/storage/server/api/files.test.ts\n+++ b/plugins/storage/server/api/files.test.ts\n@@ -224,7 +224,8 @@ describe(\"#files.get\", () => {\n       body: form,\n     });\n \n-    const res = await server.get(await attachment.signedUrl);\n+    const url = new URL(await attachment.signedUrl);\n+    const res = await server.get(url.pathname + url.search);\n     expect(res.status).toEqual(200);\n     expect(res.headers.get(\"Content-Type\")).toEqual(attachment.contentType);\n     expect(res.headers.get(\"Content-Disposition\")).toEqual(\n@@ -247,7 +248,8 @@ describe(\"#files.get\", () => {\n       path.join(env.FILE_STORAGE_LOCAL_ROOT_DIR, key)\n     );\n \n-    const res = await server.get(signedUrl);\n+    const url = new URL(signedUrl);\n+    const res = await server.get(url.pathname + url.search);\n     expect(res.status).toEqual(200);\n     expect(res.headers.get(\"Content-Type\")).toEqual(\n       \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n\ndiff --git a/plugins/webhooks/server/processors/WebhookProcessor.test.ts b/plugins/webhooks/server/processors/WebhookProcessor.test.ts\nindex c8fa0480fafe..63d37d7f9523 100644\n--- a/plugins/webhooks/server/processors/WebhookProcessor.test.ts\n+++ b/plugins/webhooks/server/processors/WebhookProcessor.test.ts\n@@ -1,17 +1,17 @@\n import { buildUser, buildWebhookSubscription } from \"@server/test/factories\";\n-import { UserEvent } from \"@server/types\";\n+import type { UserEvent } from \"@server/types\";\n import DeliverWebhookTask from \"../tasks/DeliverWebhookTask\";\n import WebhookProcessor from \"./WebhookProcessor\";\n \n jest.mock(\"../tasks/DeliverWebhookTask\");\n const ip = \"127.0.0.1\";\n \n-beforeEach(async () => {\n+beforeEach(() => {\n   jest.resetAllMocks();\n });\n \n describe(\"WebhookProcessor\", () => {\n-  test(\"it schedules a delivery for the event\", async () => {\n+  it(\"it schedules a delivery for the event\", async () => {\n     const subscription = await buildWebhookSubscription({\n       url: \"http://example.com\",\n       events: [\"*\"],\n@@ -36,7 +36,7 @@ describe(\"WebhookProcessor\", () => {\n     });\n   });\n \n-  test(\"not schedule a delivery when not subscribed to event\", async () => {\n+  it(\"not schedule a delivery when not subscribed to event\", async () => {\n     const subscription = await buildWebhookSubscription({\n       url: \"http://example.com\",\n       events: [\"users.create\"],\n@@ -56,7 +56,7 @@ describe(\"WebhookProcessor\", () => {\n     expect(DeliverWebhookTask.schedule).toHaveBeenCalledTimes(0);\n   });\n \n-  test(\"it schedules a delivery for the event for each subscription\", async () => {\n+  it(\"it schedules a delivery for the event for each subscription\", async () => {\n     const subscription = await buildWebhookSubscription({\n       url: \"http://example.com\",\n       events: [\"*\"],\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7477",
    "pr_id": 7477,
    "issue_id": 7444,
    "repo": "outline/outline",
    "problem_statement": "Add email headers to enhance threading of notifications\nIf you have an example document like https://acme.com/doc/example-docs-hX4nZCk0ac then you can easily thread them like this:\r\n\r\n```\r\nIn-Reply-To: <edit-hX4nZCk0ac@acme.com>\r\nReferences: <edit-hX4nZCk0ac@acme.com>\r\nThread-Index: <edit-hX4nZCk0ac@acme.com>\r\n```\r\n\r\nI'm not sure if you'd want comment in a doc threaded with edits to a doc, they could be 2 sets of threads.\r\n\r\nThis way even if the document name changes they'll all get grouped together. The first two headers are the rfc headers, the second two add support for Outlook / Office365. Note that hX4nZCk0ac@acme.com is supposed to reference another message id but it doesn't need to reference a real one, all that is needed is for the related emails to reference the same id to group them. \r\n\r\nhttps://www.rfc-editor.org/rfc/rfc2822\r\n\r\n_Originally posted by @brendanheywood in https://github.com/outline/outline/discussions/7424#discussioncomment-10415468_",
    "issue_word_count": 155,
    "test_files_count": 1,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "server/emails/mailer.tsx",
      "server/emails/templates/BaseEmail.tsx",
      "server/emails/templates/CommentMentionedEmail.tsx",
      "server/migrations/20240828081032-add-notifications-index.js",
      "server/models/Notification.test.ts",
      "server/models/Notification.ts",
      "server/utils/emails.ts"
    ],
    "pr_changed_test_files": [
      "server/models/Notification.test.ts"
    ],
    "base_commit": "d930824b27696c93326fbedb4c5fc2ed199ab485",
    "head_commit": "50ffb5262789ec921c6c971c6dd81205a2129841",
    "repo_url": "https://github.com/outline/outline/pull/7477",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7477",
    "dockerfile": "",
    "pr_merged_at": "2024-09-04T00:20:56.000Z",
    "patch": "diff --git a/server/emails/mailer.tsx b/server/emails/mailer.tsx\nindex f53e44b6b64d..0f92ba4e9c8b 100644\n--- a/server/emails/mailer.tsx\n+++ b/server/emails/mailer.tsx\n@@ -14,6 +14,8 @@ type SendMailOptions = {\n   to: string;\n   fromName?: string;\n   replyTo?: string;\n+  messageId?: string;\n+  references?: string[];\n   subject: string;\n   previewText?: string;\n   text: string;\n@@ -113,6 +115,11 @@ export class Mailer {\n   `;\n   };\n \n+  /**\n+   *\n+   * @param data Email headers and body\n+   * @returns Message ID header from SMTP server\n+   */\n   sendMail = async (data: SendMailOptions): Promise<void> => {\n     const { transporter } = this;\n \n@@ -152,6 +159,9 @@ export class Mailer {\n           : env.SMTP_FROM_EMAIL,\n         replyTo: data.replyTo ?? env.SMTP_REPLY_EMAIL ?? env.SMTP_FROM_EMAIL,\n         to: data.to,\n+        messageId: data.messageId,\n+        references: data.references,\n+        inReplyTo: data.references?.at(-1),\n         subject: data.subject,\n         html,\n         text: data.text,\n\ndiff --git a/server/emails/templates/BaseEmail.tsx b/server/emails/templates/BaseEmail.tsx\nindex 7a42d0c176d5..182fa3b1d19d 100644\n--- a/server/emails/templates/BaseEmail.tsx\n+++ b/server/emails/templates/BaseEmail.tsx\n@@ -7,6 +7,7 @@ import Notification from \"@server/models/Notification\";\n import { taskQueue } from \"@server/queues\";\n import { TaskPriority } from \"@server/queues/tasks/BaseTask\";\n import { NotificationMetadata } from \"@server/types\";\n+import { getEmailMessageId } from \"@server/utils/emails\";\n \n export interface EmailProps {\n   to: string | null;\n@@ -101,11 +102,21 @@ export default abstract class BaseEmail<\n       return;\n     }\n \n+    const messageId = notification\n+      ? getEmailMessageId(notification.id)\n+      : undefined;\n+\n+    const references = notification\n+      ? await Notification.emailReferences(notification)\n+      : undefined;\n+\n     try {\n       await mailer.sendMail({\n         to: this.props.to,\n         fromName: this.fromName?.(data),\n         subject: this.subject(data),\n+        messageId,\n+        references,\n         previewText: this.preview(data),\n         component: (\n           <>\n\ndiff --git a/server/emails/templates/CommentMentionedEmail.tsx b/server/emails/templates/CommentMentionedEmail.tsx\nindex 2ab4181bdc5a..15b974586450 100644\n--- a/server/emails/templates/CommentMentionedEmail.tsx\n+++ b/server/emails/templates/CommentMentionedEmail.tsx\n@@ -92,8 +92,8 @@ export default class CommentMentionedEmail extends BaseEmail<\n     );\n   }\n \n-  protected subject({ actorName, document }: Props) {\n-    return `${actorName} mentioned you in “${document.title}”`;\n+  protected subject({ document }: Props) {\n+    return `Mentioned you in “${document.title}”`;\n   }\n \n   protected preview({ actorName }: Props): string {\n\ndiff --git a/server/migrations/20240828081032-add-notifications-index.js b/server/migrations/20240828081032-add-notifications-index.js\nnew file mode 100644\nindex 000000000000..69245ccd4e73\n--- /dev/null\n+++ b/server/migrations/20240828081032-add-notifications-index.js\n@@ -0,0 +1,12 @@\n+\"use strict\";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.addIndex(\"notifications\", [\"documentId\", \"userId\"]);\n+  },\n+\n+  async down(queryInterface, Sequelize) {\n+    await queryInterface.removeIndex(\"notifications\", [\"documentId\", \"userId\"]);\n+  },\n+};\n\ndiff --git a/server/models/Notification.ts b/server/models/Notification.ts\nindex 31dd9d19fc40..2f31f8bd4e34 100644\n--- a/server/models/Notification.ts\n+++ b/server/models/Notification.ts\n@@ -1,9 +1,11 @@\n import crypto from \"crypto\";\n+import chunk from \"lodash/chunk\";\n import type {\n   InferAttributes,\n   InferCreationAttributes,\n   SaveOptions,\n } from \"sequelize\";\n+import { Op } from \"sequelize\";\n import {\n   Table,\n   ForeignKey,\n@@ -22,6 +24,12 @@ import {\n import { NotificationEventType } from \"@shared/types\";\n import env from \"@server/env\";\n import Model from \"@server/models/base/Model\";\n+import {\n+  getEmailMessageId,\n+  getEmailThreadEventGroup,\n+  isEmailThreadSupportedNotification,\n+  MaxMessagesInEmailThread,\n+} from \"@server/utils/emails\";\n import Collection from \"./Collection\";\n import Comment from \"./Comment\";\n import Document from \"./Document\";\n@@ -218,6 +226,65 @@ class Notification extends Model<\n   public get pixelUrl() {\n     return `${env.URL}/api/notifications.pixel?token=${this.pixelToken}&id=${this.id}`;\n   }\n+\n+  /**\n+   * Returns the past message ids which are used to setup the thread chain in email clients.\n+   *\n+   * @param notification Notification for which the past notifications are fetched - used for determining the properties that form a thread.\n+   * @returns An array of email message ids that form a thread.\n+   */\n+  public static async emailReferences(\n+    notification: Notification\n+  ): Promise<string[] | undefined> {\n+    if (!isEmailThreadSupportedNotification(notification.event)) {\n+      return;\n+    }\n+\n+    const events = getEmailThreadEventGroup(notification.event);\n+\n+    if (!events) {\n+      return;\n+    }\n+\n+    const prevNotifications: Notification[] = [];\n+\n+    await this.findAllInBatches<Notification>(\n+      {\n+        attributes: [\"id\"],\n+        where: {\n+          id: {\n+            [Op.ne]: notification.id,\n+          },\n+          event: {\n+            [Op.in]: events,\n+          },\n+          documentId: notification.documentId,\n+          userId: notification.userId,\n+        },\n+        order: [[\"createdAt\", \"ASC\"]],\n+        offset: 0,\n+        batchLimit: 100,\n+      },\n+      async (notifications) => void prevNotifications.push(...notifications)\n+    );\n+\n+    const emailThreads = chunk(prevNotifications, MaxMessagesInEmailThread);\n+    const lastThread = emailThreads.at(-1);\n+\n+    // Don't return anything if there are no past notifications (or) the limit is reached.\n+    // This will start a new thread in the email clients.\n+    // Also ensures we don't face header limit errors.\n+    if (\n+      !lastThread ||\n+      lastThread.length === 0 ||\n+      lastThread.length === MaxMessagesInEmailThread\n+    ) {\n+      return;\n+    }\n+\n+    // Return references from the last thread.\n+    return lastThread.map((notif) => getEmailMessageId(notif.id));\n+  }\n }\n \n export default Notification;\n\ndiff --git a/server/utils/emails.ts b/server/utils/emails.ts\nnew file mode 100644\nindex 000000000000..123db8bdd1c6\n--- /dev/null\n+++ b/server/utils/emails.ts\n@@ -0,0 +1,44 @@\n+import { NotificationEventType } from \"@shared/types\";\n+import { getBaseDomain } from \"@shared/utils/domains\";\n+\n+const Domain = getBaseDomain();\n+\n+const EmailThreadSupportedNotifications = [\n+  NotificationEventType.PublishDocument,\n+  NotificationEventType.UpdateDocument,\n+  NotificationEventType.MentionedInDocument,\n+  NotificationEventType.CreateComment,\n+  NotificationEventType.MentionedInComment,\n+];\n+\n+// Gmail creates a new thread for every 100 messages.\n+export const MaxMessagesInEmailThread = 100;\n+\n+export const isEmailThreadSupportedNotification = (\n+  event: NotificationEventType\n+) => EmailThreadSupportedNotifications.includes(event);\n+\n+export const getEmailThreadEventGroup = (\n+  event: NotificationEventType\n+): NotificationEventType[] | undefined => {\n+  switch (event) {\n+    case NotificationEventType.PublishDocument:\n+    case NotificationEventType.UpdateDocument:\n+      return [\n+        NotificationEventType.PublishDocument,\n+        NotificationEventType.UpdateDocument,\n+      ];\n+    case NotificationEventType.MentionedInDocument:\n+    case NotificationEventType.MentionedInComment:\n+      return [\n+        NotificationEventType.MentionedInDocument,\n+        NotificationEventType.MentionedInComment,\n+      ];\n+    case NotificationEventType.CreateComment:\n+      return [NotificationEventType.CreateComment];\n+    default:\n+      return;\n+  }\n+};\n+\n+export const getEmailMessageId = (text: string) => `<${text}@${Domain}>`;\n",
    "test_patch": "diff --git a/server/models/Notification.test.ts b/server/models/Notification.test.ts\nnew file mode 100644\nindex 000000000000..89fe47223cc9\n--- /dev/null\n+++ b/server/models/Notification.test.ts\n@@ -0,0 +1,397 @@\n+import { NotificationEventType } from \"@shared/types\";\n+import {\n+  buildCollection,\n+  buildComment,\n+  buildDocument,\n+  buildNotification,\n+  buildTeam,\n+  buildUser,\n+} from \"@server/test/factories\";\n+import {\n+  getEmailMessageId,\n+  MaxMessagesInEmailThread,\n+} from \"@server/utils/emails\";\n+import Notification from \"./Notification\";\n+\n+describe(\"Notification\", () => {\n+  describe(\"emailReferences\", () => {\n+    it(\"should return no references for an unsupported notification\", async () => {\n+      const team = await buildTeam();\n+      const user = await buildUser({ teamId: team.id });\n+      const collection = await buildCollection({\n+        userId: user.id,\n+        teamId: team.id,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        userId: user.id,\n+        teamId: team.id,\n+      });\n+\n+      const notification = await buildNotification({\n+        event: NotificationEventType.AddUserToDocument,\n+        documentId: document.id,\n+        userId: user.id,\n+        teamId: team.id,\n+      });\n+      const references = await Notification.emailReferences(notification);\n+\n+      expect(references).toBeUndefined();\n+    });\n+\n+    it(\"should return no references for a new notification\", async () => {\n+      const team = await buildTeam();\n+      const user = await buildUser({ teamId: team.id });\n+      const collection = await buildCollection({\n+        userId: user.id,\n+        teamId: team.id,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        userId: user.id,\n+        teamId: team.id,\n+      });\n+\n+      const notification = await buildNotification({\n+        event: NotificationEventType.UpdateDocument,\n+        documentId: document.id,\n+        userId: user.id,\n+        teamId: team.id,\n+      });\n+      const references = await Notification.emailReferences(notification);\n+\n+      expect(references).toBeUndefined();\n+    });\n+\n+    describe(\"should return references from last thread for current notification\", () => {\n+      it(\"only one thread available\", async () => {\n+        const team = await buildTeam();\n+        const user = await buildUser({ teamId: team.id });\n+        const collection = await buildCollection({\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const document = await buildDocument({\n+          collectionId: collection.id,\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const pastNotifications = await Notification.bulkCreate(\n+          [...Array(2)].map(() => ({\n+            event: NotificationEventType.UpdateDocument,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          }))\n+        );\n+\n+        const notification = await buildNotification({\n+          event: NotificationEventType.UpdateDocument,\n+          documentId: document.id,\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const references = await Notification.emailReferences(notification);\n+\n+        expect(references?.length).toEqual(2);\n+\n+        const expectedReferences = pastNotifications.map((notif) =>\n+          getEmailMessageId(notif.id)\n+        );\n+\n+        expect(references).toEqual(expectedReferences);\n+      });\n+\n+      it(\"multiple threads available\", async () => {\n+        const team = await buildTeam();\n+        const user = await buildUser({ teamId: team.id });\n+        const collection = await buildCollection({\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const document = await buildDocument({\n+          collectionId: collection.id,\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const pastNotifications = await Notification.bulkCreate(\n+          [...Array(105)].map(() => ({\n+            event: NotificationEventType.UpdateDocument,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          }))\n+        );\n+\n+        const notification = await buildNotification({\n+          event: NotificationEventType.UpdateDocument,\n+          documentId: document.id,\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const references = await Notification.emailReferences(notification);\n+\n+        expect(references?.length).toEqual(5);\n+\n+        const expectedReferences = pastNotifications\n+          .slice(MaxMessagesInEmailThread)\n+          .map((notif) => getEmailMessageId(notif.id));\n+\n+        expect(references).toEqual(expectedReferences);\n+      });\n+    });\n+\n+    describe(\"should return references from consolidated events\", () => {\n+      it(\"document edits\", async () => {\n+        const team = await buildTeam();\n+        const user = await buildUser({ teamId: team.id });\n+        const collection = await buildCollection({\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const document = await buildDocument({\n+          collectionId: collection.id,\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const pastNotifications = await Notification.bulkCreate([\n+          {\n+            event: NotificationEventType.PublishDocument,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          },\n+          ...[...Array(2)].map(() => ({\n+            event: NotificationEventType.UpdateDocument,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          })),\n+          ...[...Array(2)].map(() => ({\n+            event: NotificationEventType.CreateComment,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          })),\n+        ]);\n+\n+        const notification = await buildNotification({\n+          event: NotificationEventType.UpdateDocument,\n+          documentId: document.id,\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const references = await Notification.emailReferences(notification);\n+\n+        expect(references?.length).toEqual(3);\n+\n+        const expectedReferences = pastNotifications\n+          .filter(\n+            (notif) =>\n+              notif.event === NotificationEventType.PublishDocument ||\n+              notif.event === NotificationEventType.UpdateDocument\n+          )\n+          .map((notif) => getEmailMessageId(notif.id));\n+\n+        expect(references).toEqual(expectedReferences);\n+      });\n+\n+      it(\"comment creation\", async () => {\n+        const team = await buildTeam();\n+        const user = await buildUser({ teamId: team.id });\n+        const collection = await buildCollection({\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const document = await buildDocument({\n+          collectionId: collection.id,\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const pastNotifications = await Notification.bulkCreate([\n+          {\n+            event: NotificationEventType.PublishDocument,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          },\n+          ...[...Array(2)].map(() => ({\n+            event: NotificationEventType.UpdateDocument,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          })),\n+          ...[...Array(2)].map(() => ({\n+            event: NotificationEventType.CreateComment,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          })),\n+        ]);\n+\n+        const notification = await buildNotification({\n+          event: NotificationEventType.CreateComment,\n+          documentId: document.id,\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const references = await Notification.emailReferences(notification);\n+\n+        expect(references?.length).toEqual(2);\n+\n+        const expectedReferences = pastNotifications\n+          .filter(\n+            (notif) => notif.event === NotificationEventType.CreateComment\n+          )\n+          .map((notif) => getEmailMessageId(notif.id));\n+\n+        expect(references).toEqual(expectedReferences);\n+      });\n+\n+      it(\"document mentions\", async () => {\n+        const team = await buildTeam();\n+        const user = await buildUser({ teamId: team.id });\n+        const collection = await buildCollection({\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const document = await buildDocument({\n+          collectionId: collection.id,\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const comment = await buildComment({\n+          documentId: document.id,\n+          userId: user.id,\n+        });\n+        const pastNotifications = await Notification.bulkCreate([\n+          {\n+            event: NotificationEventType.PublishDocument,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          },\n+          {\n+            event: NotificationEventType.UpdateDocument,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          },\n+          {\n+            event: NotificationEventType.CreateComment,\n+            commentId: comment.id,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          },\n+          {\n+            event: NotificationEventType.MentionedInComment,\n+            commentId: comment.id,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          },\n+          {\n+            event: NotificationEventType.MentionedInDocument,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          },\n+        ]);\n+\n+        const notification = await buildNotification({\n+          event: NotificationEventType.MentionedInDocument,\n+          documentId: document.id,\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+\n+        const references = await Notification.emailReferences(notification);\n+\n+        expect(references?.length).toEqual(2);\n+\n+        const expectedReferences = pastNotifications\n+          .filter(\n+            (notif) =>\n+              notif.event === NotificationEventType.MentionedInDocument ||\n+              notif.event === NotificationEventType.MentionedInComment\n+          )\n+          .map((notif) => getEmailMessageId(notif.id));\n+\n+        expect(references).toEqual(expectedReferences);\n+      });\n+\n+      it(\"comment mentions\", async () => {\n+        const team = await buildTeam();\n+        const user = await buildUser({ teamId: team.id });\n+        const collection = await buildCollection({\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const document = await buildDocument({\n+          collectionId: collection.id,\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const comment = await buildComment({\n+          documentId: document.id,\n+          userId: user.id,\n+        });\n+        const pastNotifications = await Notification.bulkCreate([\n+          {\n+            event: NotificationEventType.PublishDocument,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          },\n+          {\n+            event: NotificationEventType.UpdateDocument,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          },\n+          {\n+            event: NotificationEventType.CreateComment,\n+            commentId: comment.id,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          },\n+          {\n+            event: NotificationEventType.MentionedInComment,\n+            commentId: comment.id,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          },\n+          {\n+            event: NotificationEventType.MentionedInDocument,\n+            documentId: document.id,\n+            userId: user.id,\n+            teamId: team.id,\n+          },\n+        ]);\n+\n+        const notification = await buildNotification({\n+          event: NotificationEventType.MentionedInComment,\n+          documentId: document.id,\n+          userId: user.id,\n+          teamId: team.id,\n+        });\n+        const references = await Notification.emailReferences(notification);\n+\n+        expect(references?.length).toEqual(2);\n+\n+        const expectedReferences = pastNotifications\n+          .filter(\n+            (notif) =>\n+              notif.event === NotificationEventType.MentionedInComment ||\n+              notif.event === NotificationEventType.MentionedInDocument\n+          )\n+          .map((notif) => getEmailMessageId(notif.id));\n+\n+        expect(references).toEqual(expectedReferences);\n+      });\n+    });\n+  });\n+});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7368",
    "pr_id": 7368,
    "issue_id": 7355,
    "repo": "outline/outline",
    "problem_statement": "Links between publicly shared documents are incorrect when copied via context menu\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Share a public doc with a link to a sub document\r\n2. Right click on link\r\n3. Copy and paste elsewhere\r\n4. You will get the private link\r\n\r\n**Expected behavior**\r\n\r\nThe correct public link is copied\r\n\r\nWe should transform internal links as part of `presentDocument` for public links before sending them to the browser, this can potentially simplify a lot of the link handling on client side too.",
    "issue_word_count": 76,
    "test_files_count": 1,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "app/hooks/useEditorClickHandlers.ts",
      "server/models/helpers/DocumentHelper.test.ts",
      "server/models/helpers/DocumentHelper.tsx",
      "server/models/helpers/ProsemirrorHelper.tsx",
      "server/presenters/document.ts",
      "server/routes/api/documents/documents.ts"
    ],
    "pr_changed_test_files": [
      "server/models/helpers/DocumentHelper.test.ts"
    ],
    "base_commit": "4f35b8ea0d3776979066fc32dc6e36972155acb1",
    "head_commit": "91dff0f1b93d6d35c2936046f109213948b90a0e",
    "repo_url": "https://github.com/outline/outline/pull/7368",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7368",
    "dockerfile": "",
    "pr_merged_at": "2024-08-10T16:36:03.000Z",
    "patch": "diff --git a/app/hooks/useEditorClickHandlers.ts b/app/hooks/useEditorClickHandlers.ts\nindex f716528429e5..43f16e8381b5 100644\n--- a/app/hooks/useEditorClickHandlers.ts\n+++ b/app/hooks/useEditorClickHandlers.ts\n@@ -39,18 +39,22 @@ export default function useEditorClickHandlers({ shareId }: Params) {\n           return;\n         }\n \n-        // If we're navigating to a share link from a non-share link then open it in a new tab\n-        if (shareId && navigateTo.startsWith(\"/s/\")) {\n-          window.open(href, \"_blank\");\n-          return;\n-        }\n-\n         // If we're navigating to an internal document link then prepend the\n         // share route to the URL so that the document is loaded in context\n-        if (shareId && navigateTo.includes(\"/doc/\")) {\n+        if (\n+          shareId &&\n+          navigateTo.includes(\"/doc/\") &&\n+          !navigateTo.includes(shareId)\n+        ) {\n           navigateTo = sharedDocumentPath(shareId, navigateTo);\n         }\n \n+        // If we're navigating to a share link from a non-share link then open it in a new tab\n+        if (!shareId && navigateTo.startsWith(\"/s/\")) {\n+          window.open(href, \"_blank\");\n+          return;\n+        }\n+\n         if (!isModKey(event) && !event.shiftKey) {\n           history.push(navigateTo);\n         } else {\n\ndiff --git a/server/models/helpers/DocumentHelper.tsx b/server/models/helpers/DocumentHelper.tsx\nindex 571c4e4027c7..4626b568c2a0 100644\n--- a/server/models/helpers/DocumentHelper.tsx\n+++ b/server/models/helpers/DocumentHelper.tsx\n@@ -45,7 +45,12 @@ export class DocumentHelper {\n    * @param document The document or revision to convert\n    * @returns The document content as a Prosemirror Node\n    */\n-  static toProsemirror(document: Document | Revision | Collection) {\n+  static toProsemirror(\n+    document: Document | Revision | Collection | ProsemirrorData\n+  ) {\n+    if (\"type\" in document && document.type === \"doc\") {\n+      return Node.fromJSON(schema, document);\n+    }\n     if (\"content\" in document && document.content) {\n       return Node.fromJSON(schema, document.content);\n     }\n@@ -72,11 +77,13 @@ export class DocumentHelper {\n     document: Document | Revision | Collection,\n     options?: {\n       /** The team context */\n-      teamId: string;\n+      teamId?: string;\n       /** Whether to sign attachment urls, and if so for how many seconds is the signature valid */\n-      signedUrls: number;\n+      signedUrls?: number;\n       /** Marks to remove from the document */\n       removeMarks?: string[];\n+      /** The base path to use for internal links (will replace /doc/) */\n+      internalUrlBase?: string;\n     }\n   ): Promise<ProsemirrorData> {\n     let doc: Node | null;\n@@ -84,7 +91,11 @@ export class DocumentHelper {\n \n     if (\"content\" in document && document.content) {\n       // Optimized path for documents with content available and no transformation required.\n-      if (!options?.removeMarks && !options?.signedUrls) {\n+      if (\n+        !options?.removeMarks &&\n+        !options?.signedUrls &&\n+        !options?.internalUrlBase\n+      ) {\n         return document.content;\n       }\n       doc = Node.fromJSON(schema, document.content);\n@@ -98,7 +109,7 @@ export class DocumentHelper {\n       doc = parser.parse(document.text);\n     }\n \n-    if (doc && options?.signedUrls) {\n+    if (doc && options?.signedUrls && options?.teamId) {\n       json = await ProsemirrorHelper.signAttachmentUrls(\n         doc,\n         options.teamId,\n@@ -108,6 +119,13 @@ export class DocumentHelper {\n       json = doc?.toJSON() ?? {};\n     }\n \n+    if (options?.internalUrlBase) {\n+      json = ProsemirrorHelper.replaceInternalUrls(\n+        json,\n+        options.internalUrlBase\n+      );\n+    }\n+\n     if (options?.removeMarks) {\n       json = ProsemirrorHelper.removeMarks(json, options.removeMarks);\n     }\n@@ -126,8 +144,8 @@ export class DocumentHelper {\n     const node = DocumentHelper.toProsemirror(document);\n     const textSerializers = Object.fromEntries(\n       Object.entries(schema.nodes)\n-        .filter(([, node]) => node.spec.toPlainText)\n-        .map(([name, node]) => [name, node.spec.toPlainText])\n+        .filter(([, n]) => n.spec.toPlainText)\n+        .map(([name, n]) => [name, n.spec.toPlainText])\n     );\n \n     return textBetween(node, 0, node.content.size, textSerializers);\n@@ -139,10 +157,12 @@ export class DocumentHelper {\n    * @param document The document or revision to convert\n    * @returns The document title and content as a Markdown string\n    */\n-  static toMarkdown(document: Document | Revision | Collection) {\n+  static toMarkdown(\n+    document: Document | Revision | Collection | ProsemirrorData\n+  ) {\n     const text = serializer\n       .serialize(DocumentHelper.toProsemirror(document))\n-      .replace(/\\n\\\\(\\n|$)/g, \"\\n\\n\")\n+      .replace(/(^|\\n)\\\\(\\n|$)/g, \"\\n\\n\")\n       .replace(/“/g, '\"')\n       .replace(/”/g, '\"')\n       .replace(/‘/g, \"'\")\n@@ -153,13 +173,17 @@ export class DocumentHelper {\n       return text;\n     }\n \n-    const iconType = determineIconType(document.icon);\n+    if (document instanceof Document || document instanceof Revision) {\n+      const iconType = determineIconType(document.icon);\n \n-    const title = `${iconType === IconType.Emoji ? document.icon + \" \" : \"\"}${\n-      document.title\n-    }`;\n+      const title = `${iconType === IconType.Emoji ? document.icon + \" \" : \"\"}${\n+        document.title\n+      }`;\n+\n+      return `# ${title}\\n\\n${text}`;\n+    }\n \n-    return `# ${title}\\n\\n${text}`;\n+    return text;\n   }\n \n   /**\n\ndiff --git a/server/models/helpers/ProsemirrorHelper.tsx b/server/models/helpers/ProsemirrorHelper.tsx\nindex e5103f53bb0e..7114d9d6c0d1 100644\n--- a/server/models/helpers/ProsemirrorHelper.tsx\n+++ b/server/models/helpers/ProsemirrorHelper.tsx\n@@ -15,6 +15,7 @@ import light from \"@shared/styles/theme\";\n import { ProsemirrorData } from \"@shared/types\";\n import { attachmentRedirectRegex } from \"@shared/utils/ProsemirrorHelper\";\n import { isRTL } from \"@shared/utils/rtl\";\n+import { isInternalUrl } from \"@shared/utils/urls\";\n import { schema, parser } from \"@server/editor\";\n import Logger from \"@server/logging/Logger\";\n import { trace } from \"@server/logging/tracing\";\n@@ -161,7 +162,9 @@ export class ProsemirrorHelper {\n    * @param marks The mark types to remove\n    * @returns The content with marks removed\n    */\n-  static removeMarks(data: ProsemirrorData, marks: string[]) {\n+  static removeMarks(doc: Node | ProsemirrorData, marks: string[]) {\n+    const json = \"toJSON\" in doc ? (doc.toJSON() as ProsemirrorData) : doc;\n+\n     function removeMarksInner(node: ProsemirrorData) {\n       if (node.marks) {\n         node.marks = node.marks.filter((mark) => !marks.includes(mark.type));\n@@ -171,7 +174,7 @@ export class ProsemirrorHelper {\n       }\n       return node;\n     }\n-    return removeMarksInner(data);\n+    return removeMarksInner(json);\n   }\n \n   /**\n@@ -197,6 +200,44 @@ export class ProsemirrorHelper {\n     return replace(data);\n   }\n \n+  static async replaceInternalUrls(\n+    doc: Node | ProsemirrorData,\n+    basePath: string\n+  ) {\n+    const json = \"toJSON\" in doc ? (doc.toJSON() as ProsemirrorData) : doc;\n+\n+    if (basePath.endsWith(\"/\")) {\n+      throw new Error(\"internalUrlBase must not end with a slash\");\n+    }\n+\n+    function replaceUrl(url: string) {\n+      return url.replace(`/doc/`, `${basePath}/doc/`);\n+    }\n+\n+    function replaceInternalUrlsInner(node: ProsemirrorData) {\n+      if (typeof node.attrs?.href === \"string\") {\n+        node.attrs.href = replaceUrl(node.attrs.href);\n+      } else if (node.marks) {\n+        node.marks.forEach((mark) => {\n+          if (\n+            typeof mark.attrs?.href === \"string\" &&\n+            isInternalUrl(mark.attrs?.href)\n+          ) {\n+            mark.attrs.href = replaceUrl(mark.attrs.href);\n+          }\n+        });\n+      }\n+\n+      if (node.content) {\n+        node.content.forEach(replaceInternalUrlsInner);\n+      }\n+\n+      return node;\n+    }\n+\n+    return replaceInternalUrlsInner(json);\n+  }\n+\n   /**\n    * Returns the document as a plain JSON object with attachment URLs signed.\n    *\n\ndiff --git a/server/presenters/document.ts b/server/presenters/document.ts\nindex 83fab2b4b1fe..5d8af3815d9b 100644\n--- a/server/presenters/document.ts\n+++ b/server/presenters/document.ts\n@@ -1,13 +1,14 @@\n import { traceFunction } from \"@server/logging/tracing\";\n import { Document } from \"@server/models\";\n import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n-import { TextHelper } from \"@server/models/helpers/TextHelper\";\n import { APIContext } from \"@server/types\";\n import presentUser from \"./user\";\n \n type Options = {\n   /** Whether to render the document's public fields. */\n   isPublic?: boolean;\n+  /** The root share ID when presenting a shared document. */\n+  shareId?: string;\n   /** Always include the text of the document in the payload. */\n   includeText?: boolean;\n   /** Always include the data of the document in the payload. */\n@@ -25,28 +26,27 @@ async function presentDocument(\n   };\n \n   const asData = !ctx || Number(ctx?.headers[\"x-api-version\"] ?? 0) >= 3;\n-  const text = options.isPublic\n-    ? await TextHelper.attachmentsToSignedUrls(document.text, document.teamId)\n-    : document.text;\n \n-  const data: Record<string, any> = {\n+  const data = await DocumentHelper.toJSON(\n+    document,\n+    options.isPublic\n+      ? {\n+          signedUrls: 60,\n+          teamId: document.teamId,\n+          removeMarks: [\"comment\"],\n+          internalUrlBase: `/s/${options.shareId}`,\n+        }\n+      : undefined\n+  );\n+\n+  const text = DocumentHelper.toMarkdown(data);\n+\n+  const res: Record<string, any> = {\n     id: document.id,\n-    url: document.url,\n+    url: document.path,\n     urlId: document.urlId,\n     title: document.title,\n-    data:\n-      asData || options.includeData\n-        ? await DocumentHelper.toJSON(\n-            document,\n-            options.isPublic\n-              ? {\n-                  signedUrls: 60,\n-                  teamId: document.teamId,\n-                  removeMarks: [\"comment\"],\n-                }\n-              : undefined\n-          )\n-        : undefined,\n+    data: asData || options?.includeData ? data : undefined,\n     text: !asData || options?.includeText ? text : undefined,\n     icon: document.icon,\n     color: document.color,\n@@ -69,22 +69,22 @@ async function presentDocument(\n   };\n \n   if (!!document.views && document.views.length > 0) {\n-    data.lastViewedAt = document.views[0].updatedAt;\n+    res.lastViewedAt = document.views[0].updatedAt;\n   }\n \n   if (!options.isPublic) {\n     const source = await document.$get(\"import\");\n \n-    data.isCollectionDeleted = await document.isCollectionDeleted();\n-    data.collectionId = document.collectionId;\n-    data.parentDocumentId = document.parentDocumentId;\n-    data.createdBy = presentUser(document.createdBy);\n-    data.updatedBy = presentUser(document.updatedBy);\n-    data.collaboratorIds = document.collaboratorIds;\n-    data.templateId = document.templateId;\n-    data.template = document.template;\n-    data.insightsEnabled = document.insightsEnabled;\n-    data.sourceMetadata = document.sourceMetadata\n+    res.isCollectionDeleted = await document.isCollectionDeleted();\n+    res.collectionId = document.collectionId;\n+    res.parentDocumentId = document.parentDocumentId;\n+    res.createdBy = presentUser(document.createdBy);\n+    res.updatedBy = presentUser(document.updatedBy);\n+    res.collaboratorIds = document.collaboratorIds;\n+    res.templateId = document.templateId;\n+    res.template = document.template;\n+    res.insightsEnabled = document.insightsEnabled;\n+    res.sourceMetadata = document.sourceMetadata\n       ? {\n           importedAt: source?.createdAt ?? document.createdAt,\n           importType: source?.format,\n@@ -94,7 +94,7 @@ async function presentDocument(\n       : undefined;\n   }\n \n-  return data;\n+  return res;\n }\n \n export default traceFunction({\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 6330340fd820..9659da9525ee 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -441,6 +441,7 @@ router.post(\n     const isPublic = cannot(user, \"read\", document);\n     const serializedDocument = await presentDocument(ctx, document, {\n       isPublic,\n+      shareId,\n     });\n \n     const team = await document.$get(\"team\");\n@@ -891,6 +892,7 @@ router.post(\n       results.map(async (result) => {\n         const document = await presentDocument(ctx, result.document, {\n           isPublic,\n+          shareId,\n         });\n         return { ...result, document };\n       })\n",
    "test_patch": "diff --git a/server/models/helpers/DocumentHelper.test.ts b/server/models/helpers/DocumentHelper.test.ts\nindex 17a49428d64f..60af8f8c15d6 100644\n--- a/server/models/helpers/DocumentHelper.test.ts\n+++ b/server/models/helpers/DocumentHelper.test.ts\n@@ -12,6 +12,40 @@ describe(\"DocumentHelper\", () => {\n     jest.useRealTimers();\n   });\n \n+  describe(\"replaceInternalUrls\", () => {\n+    it(\"should replace internal urls\", async () => {\n+      const document = await buildDocument({\n+        text: `[link](/doc/internal-123)`,\n+      });\n+      const result = await DocumentHelper.toJSON(document, {\n+        internalUrlBase: \"/s/share-123\",\n+      });\n+      expect(result).toEqual({\n+        content: [\n+          {\n+            content: [\n+              {\n+                marks: [\n+                  {\n+                    attrs: {\n+                      href: \"/s/share-123/doc/internal-123\",\n+                      title: null,\n+                    },\n+                    type: \"link\",\n+                  },\n+                ],\n+                text: \"link\",\n+                type: \"text\",\n+              },\n+            ],\n+            type: \"paragraph\",\n+          },\n+        ],\n+        type: \"doc\",\n+      });\n+    });\n+  });\n+\n   describe(\"toJSON\", () => {\n     it(\"should return content directly if no transformation required\", async () => {\n       const document = await buildDocument();\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7314",
    "pr_id": 7314,
    "issue_id": 7308,
    "repo": "outline/outline",
    "problem_statement": "SequelizeDatabaseError: there is no escaped character: \"env\\\"\nSearch for `env: ` to reproduce\n\nSentry Issue: [OUTLINE-CLOUD-6W8](https://outline-jl.sentry.io/issues/5517673399/?referrer=github_integration)\n\n```\nSequelizeDatabaseError: there is no escaped character: \"env\\\"\n  File \"/app/build/server/models/helpers/SearchHelper.js\", line 164, in SearchHelper.searchForUser\n    const [results, count] = await Promise.all([resultsQuery, countQuery]);\n  File \"/app/build/server/routes/api/documents/documents.js\", line 748, in <anonymous>\n    response = await _SearchHelper.default.searchForUser(user, query, {\n  File \"/app/build/server/routes/api/middlewares/apiResponse.js\", line 12, in apiResponseMiddleware\n    await next();\n  File \"/app/build/server/routes/api/middlewares/apiTracer.js\", line 21, in apiTracerMiddleware\n    await next();\n...\n(10 additional frame(s) were not displayed)\n```",
    "issue_word_count": 104,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "server/models/helpers/SearchHelper.test.ts",
      "server/models/helpers/SearchHelper.ts"
    ],
    "pr_changed_test_files": [
      "server/models/helpers/SearchHelper.test.ts"
    ],
    "base_commit": "7de0ffb7f7b8ea8573538aebc296b81f2c020ad4",
    "head_commit": "e54a35a2f33200e9bbc95cd6683b8f5233a1b294",
    "repo_url": "https://github.com/outline/outline/pull/7314",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7314",
    "dockerfile": "",
    "pr_merged_at": "2024-07-27T03:27:57.000Z",
    "patch": "diff --git a/server/models/helpers/SearchHelper.ts b/server/models/helpers/SearchHelper.ts\nindex c24c451ee0f0..73bea5f21cd0 100644\n--- a/server/models/helpers/SearchHelper.ts\n+++ b/server/models/helpers/SearchHelper.ts\n@@ -555,7 +555,12 @@ export default class SearchHelper {\n     }\n \n     return (\n-      queryParser()(quotedSearch ? limitedQuery : `${limitedQuery}*`)\n+      queryParser()(\n+        // Although queryParser trims the query, looks like there's a\n+        // bug for certain cases where it removes other characters in addition to\n+        // spaces. Ref: https://github.com/caub/pg-tsquery/issues/27\n+        quotedSearch ? limitedQuery.trim() : `${limitedQuery.trim()}*`\n+      )\n         // Remove any trailing join characters\n         .replace(/&$/, \"\")\n     );\n",
    "test_patch": "diff --git a/server/models/helpers/SearchHelper.test.ts b/server/models/helpers/SearchHelper.test.ts\nindex dd54dcfa97e5..c46cedef9a2e 100644\n--- a/server/models/helpers/SearchHelper.test.ts\n+++ b/server/models/helpers/SearchHelper.test.ts\n@@ -486,6 +486,25 @@ describe(\"SearchHelper\", () => {\n       );\n       expect(totalCount).toBe(1);\n     });\n+\n+    test(\"should correctly handle removal of trailing spaces\", async () => {\n+      const team = await buildTeam();\n+      const user = await buildUser({ teamId: team.id });\n+      const collection = await buildCollection({\n+        teamId: team.id,\n+        userId: user.id,\n+      });\n+      const document = await buildDocument({\n+        teamId: team.id,\n+        userId: user.id,\n+        collectionId: collection.id,\n+        text: \"env: some env\",\n+      });\n+      document.title = \"change\";\n+      await document.save();\n+      const { totalCount } = await SearchHelper.searchForUser(user, \"env: \");\n+      expect(totalCount).toBe(1);\n+    });\n   });\n \n   describe(\"#searchTitlesForUser\", () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7275",
    "pr_id": 7275,
    "issue_id": 6639,
    "repo": "outline/outline",
    "problem_statement": "Add the ability to add groups to individual documents\n### Discussed in https://github.com/outline/outline/discussions/6555\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **AlexShku** February 19, 2024</sup>\r\nHello! \r\nThank you for the wonderful 0.75.0 update. \r\nIt would be great if it was possible to add predefined groups and not just users individually to Documents. </div>",
    "issue_word_count": 62,
    "test_files_count": 2,
    "non_test_files_count": 94,
    "pr_changed_files": [
      "app/actions/definitions/documents.tsx",
      "app/components/Avatar/AvatarWithPresence.tsx",
      "app/components/Avatar/GroupAvatar.tsx",
      "app/components/Avatar/index.ts",
      "app/components/Collaborators.tsx",
      "app/components/DocumentViews.tsx",
      "app/components/EventListItem.tsx",
      "app/components/Facepile.tsx",
      "app/components/GroupListItem.tsx",
      "app/components/HoverPreview/HoverPreviewIssue.tsx",
      "app/components/HoverPreview/HoverPreviewMention.tsx",
      "app/components/HoverPreview/HoverPreviewPullRequest.tsx",
      "app/components/Notifications/NotificationListItem.tsx",
      "app/components/Sharing/Collection/AccessControlList.tsx",
      "app/components/Sharing/Collection/SharePopover.tsx",
      "app/components/Sharing/Document/AccessControlList.tsx",
      "app/components/Sharing/Document/DocumentMemberList.tsx",
      "app/components/Sharing/Document/DocumentMemberListItem.tsx",
      "app/components/Sharing/Document/PublicAccess.tsx",
      "app/components/Sharing/Document/SharePopover.tsx",
      "app/components/Sharing/components/Placeholder.tsx",
      "app/components/Sharing/components/Suggestions.tsx",
      "app/components/Sidebar/Sidebar.tsx",
      "app/components/Sidebar/components/CollectionLink.tsx",
      "app/components/Sidebar/components/Disclosure.tsx",
      "app/components/Sidebar/components/DocumentLink.tsx",
      "app/components/Sidebar/components/DraggableCollectionLink.tsx",
      "app/components/Sidebar/components/GroupLink.tsx",
      "app/components/Sidebar/components/SharedContext.ts",
      "app/components/Sidebar/components/SharedWithMe.tsx",
      "app/components/Sidebar/components/SharedWithMeLink.tsx",
      "app/components/Sidebar/components/SidebarContext.ts",
      "app/components/Sidebar/components/Starred.tsx",
      "app/components/Sidebar/components/StarredContext.ts",
      "app/components/Sidebar/components/StarredLink.tsx",
      "app/components/Sidebar/components/useDragAndDrop.tsx",
      "app/components/Sidebar/hooks/useLocationState.ts",
      "app/components/TeamLogo.ts",
      "app/components/TemplatizeDialog/SelectLocation.tsx",
      "app/components/WebsocketProvider.tsx",
      "app/editor/components/MentionMenu.tsx",
      "app/hooks/useTemplateActions.tsx",
      "app/models/Collection.ts",
      "app/models/Document.ts",
      "app/models/Group.ts",
      "app/models/GroupMembership.ts",
      "app/models/User.ts",
      "app/scenes/Collection/components/MembershipPreview.tsx",
      "app/scenes/Document/components/CommentForm.tsx",
      "app/scenes/Document/components/CommentThread.tsx",
      "app/scenes/Document/components/CommentThreadItem.tsx",
      "app/scenes/Document/components/Insights.tsx",
      "app/scenes/GroupMembers/AddPeopleToGroup.tsx",
      "app/scenes/GroupMembers/components/GroupMemberListItem.tsx",
      "app/scenes/Search/components/UserFilter.tsx",
      "app/scenes/Settings/components/ImageInput.tsx",
      "app/scenes/Settings/components/PeopleTable.tsx",
      "app/scenes/Settings/components/SharesTable.tsx",
      "app/stores/AuthStore.ts",
      "app/stores/DocumentsStore.ts",
      "app/stores/GroupMembershipsStore.ts",
      "app/stores/GroupUsersStore.ts",
      "app/stores/GroupsStore.ts",
      "app/stores/RootStore.ts",
      "app/stores/UsersStore.ts",
      "app/types.ts",
      "plugins/github/client/Settings.tsx",
      "plugins/webhooks/server/tasks/DeliverWebhookTask.ts",
      "server/commands/documentCreator.ts",
      "server/commands/documentDuplicator.ts",
      "server/commands/documentMover.ts",
      "server/models/Collection.ts",
      "server/models/Document.ts",
      "server/models/GroupMembership.ts",
      "server/models/Share.ts",
      "server/models/UserMembership.ts",
      "server/policies/collection.ts",
      "server/policies/document.ts",
      "server/presenters/documentGroupMembership.ts",
      "server/presenters/groupMembership.ts",
      "server/queues/processors/NotificationsProcessor.ts",
      "server/queues/processors/WebsocketsProcessor.ts",
      "server/queues/tasks/DocumentAddGroupNotificationsTask.ts",
      "server/routes/api/auth/auth.ts",
      "server/routes/api/collections/collections.test.ts",
      "server/routes/api/collections/collections.ts",
      "server/routes/api/collections/schema.ts",
      "server/routes/api/documents/documents.ts",
      "server/routes/api/documents/schema.ts",
      "server/routes/api/groupMemberships/groupMemberships.test.ts",
      "server/routes/api/groupMemberships/groupMemberships.ts",
      "server/routes/api/groupMemberships/index.ts",
      "server/routes/api/groupMemberships/schema.ts",
      "server/routes/api/index.ts",
      "server/types.ts",
      "shared/i18n/locales/en_US/translation.json"
    ],
    "pr_changed_test_files": [
      "server/routes/api/collections/collections.test.ts",
      "server/routes/api/groupMemberships/groupMemberships.test.ts"
    ],
    "base_commit": "fefb9200f157c673e9d362eea6d3c3e2ea3bd3c0",
    "head_commit": "444010a92a8c43ff8f05347c7433e1319b82a243",
    "repo_url": "https://github.com/outline/outline/pull/7275",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7275",
    "dockerfile": "",
    "pr_merged_at": "2024-09-01T13:51:52.000Z",
    "patch": "diff --git a/app/actions/definitions/documents.tsx b/app/actions/definitions/documents.tsx\nindex 00f5a4a2a735..2be7b8577158 100644\n--- a/app/actions/definitions/documents.tsx\n+++ b/app/actions/definitions/documents.tsx\n@@ -104,9 +104,9 @@ export const createDocument = createAction({\n       !!currentTeamId && stores.policies.abilities(currentTeamId).createDocument\n     );\n   },\n-  perform: ({ activeCollectionId, inStarredSection }) =>\n+  perform: ({ activeCollectionId, sidebarContext }) =>\n     history.push(newDocumentPath(activeCollectionId), {\n-      starred: inStarredSection,\n+      sidebarContext,\n     }),\n });\n \n@@ -121,11 +121,11 @@ export const createDocumentFromTemplate = createAction({\n     !!activeDocumentId &&\n     !!stores.documents.get(activeDocumentId)?.template &&\n     stores.policies.abilities(currentTeamId).createDocument,\n-  perform: ({ activeCollectionId, activeDocumentId, inStarredSection }) =>\n+  perform: ({ activeCollectionId, activeDocumentId, sidebarContext }) =>\n     history.push(\n       newDocumentPath(activeCollectionId, { templateId: activeDocumentId }),\n       {\n-        starred: inStarredSection,\n+        sidebarContext,\n       }\n     ),\n });\n@@ -141,9 +141,9 @@ export const createNestedDocument = createAction({\n     !!activeDocumentId &&\n     stores.policies.abilities(currentTeamId).createDocument &&\n     stores.policies.abilities(activeDocumentId).createChildDocument,\n-  perform: ({ activeDocumentId, inStarredSection }) =>\n+  perform: ({ activeDocumentId, sidebarContext }) =>\n     history.push(newNestedDocumentPath(activeDocumentId), {\n-      starred: inStarredSection,\n+      sidebarContext,\n     }),\n });\n \n\ndiff --git a/app/components/Avatar/AvatarWithPresence.tsx b/app/components/Avatar/AvatarWithPresence.tsx\nindex ade894f0a0a9..106c1d6ce884 100644\n--- a/app/components/Avatar/AvatarWithPresence.tsx\n+++ b/app/components/Avatar/AvatarWithPresence.tsx\n@@ -4,8 +4,8 @@ import { useTranslation } from \"react-i18next\";\n import styled, { css } from \"styled-components\";\n import { s } from \"@shared/styles\";\n import User from \"~/models/User\";\n-import Avatar from \"~/components/Avatar\";\n import Tooltip from \"~/components/Tooltip\";\n+import Avatar from \"./Avatar\";\n \n type Props = {\n   user: User;\n\ndiff --git a/app/components/Avatar/GroupAvatar.tsx b/app/components/Avatar/GroupAvatar.tsx\nnew file mode 100644\nindex 000000000000..f179aef32403\n--- /dev/null\n+++ b/app/components/Avatar/GroupAvatar.tsx\n@@ -0,0 +1,35 @@\n+import { GroupIcon } from \"outline-icons\";\n+import * as React from \"react\";\n+import { useTheme } from \"styled-components\";\n+import Squircle from \"@shared/components/Squircle\";\n+import Group from \"~/models/Group\";\n+import { AvatarSize } from \"../Avatar\";\n+\n+type Props = {\n+  /** The group to show an avatar for */\n+  group: Group;\n+  /** The size of the icon, 24px is default to match standard avatars */\n+  size?: number;\n+  /** The color of the avatar */\n+  color?: string;\n+  /** The background color of the avatar */\n+  backgroundColor?: string;\n+  className?: string;\n+};\n+\n+export function GroupAvatar({\n+  color,\n+  backgroundColor,\n+  size = AvatarSize.Medium,\n+  className,\n+}: Props) {\n+  const theme = useTheme();\n+  return (\n+    <Squircle color={color ?? theme.text} size={size} className={className}>\n+      <GroupIcon\n+        color={backgroundColor ?? theme.background}\n+        size={size * 0.75}\n+      />\n+    </Squircle>\n+  );\n+}\n\ndiff --git a/app/components/Avatar/index.ts b/app/components/Avatar/index.ts\nindex 4dc0cb18b797..be77236300e5 100644\n--- a/app/components/Avatar/index.ts\n+++ b/app/components/Avatar/index.ts\n@@ -1,6 +1,7 @@\n-import Avatar from \"./Avatar\";\n+import Avatar, { IAvatar, AvatarSize } from \"./Avatar\";\n import AvatarWithPresence from \"./AvatarWithPresence\";\n+import { GroupAvatar } from \"./GroupAvatar\";\n \n-export { AvatarWithPresence };\n+export { Avatar, GroupAvatar, AvatarSize, AvatarWithPresence };\n \n-export default Avatar;\n+export type { IAvatar };\n\ndiff --git a/app/components/Collaborators.tsx b/app/components/Collaborators.tsx\nindex aca9ace1bc31..0442410a4ec5 100644\n--- a/app/components/Collaborators.tsx\n+++ b/app/components/Collaborators.tsx\n@@ -7,7 +7,7 @@ import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { usePopoverState, PopoverDisclosure } from \"reakit/Popover\";\n import Document from \"~/models/Document\";\n-import AvatarWithPresence from \"~/components/Avatar/AvatarWithPresence\";\n+import { AvatarWithPresence } from \"~/components/Avatar\";\n import DocumentViews from \"~/components/DocumentViews\";\n import Facepile from \"~/components/Facepile\";\n import NudeButton from \"~/components/NudeButton\";\n\ndiff --git a/app/components/DocumentViews.tsx b/app/components/DocumentViews.tsx\nindex 8d1e0f28dae7..e2ca6c0e09c3 100644\n--- a/app/components/DocumentViews.tsx\n+++ b/app/components/DocumentViews.tsx\n@@ -6,7 +6,7 @@ import { useTranslation } from \"react-i18next\";\n import { dateLocale, dateToRelative } from \"@shared/utils/date\";\n import Document from \"~/models/Document\";\n import User from \"~/models/User\";\n-import Avatar from \"~/components/Avatar\";\n+import { Avatar } from \"~/components/Avatar\";\n import ListItem from \"~/components/List/Item\";\n import PaginatedList from \"~/components/PaginatedList\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n\ndiff --git a/app/components/EventListItem.tsx b/app/components/EventListItem.tsx\nindex 4c441da992d8..6f7bbe76cb72 100644\n--- a/app/components/EventListItem.tsx\n+++ b/app/components/EventListItem.tsx\n@@ -16,7 +16,7 @@ import EventBoundary from \"@shared/components/EventBoundary\";\n import { s } from \"@shared/styles\";\n import Document from \"~/models/Document\";\n import Event from \"~/models/Event\";\n-import Avatar from \"~/components/Avatar\";\n+import { Avatar } from \"~/components/Avatar\";\n import Item, { Actions, Props as ItemProps } from \"~/components/List/Item\";\n import Time from \"~/components/Time\";\n import useStores from \"~/hooks/useStores\";\n\ndiff --git a/app/components/Facepile.tsx b/app/components/Facepile.tsx\nindex 0073d194dd8b..914fa7e9a2ca 100644\n--- a/app/components/Facepile.tsx\n+++ b/app/components/Facepile.tsx\n@@ -3,9 +3,8 @@ import * as React from \"react\";\n import styled from \"styled-components\";\n import { s } from \"@shared/styles\";\n import User from \"~/models/User\";\n-import Avatar from \"~/components/Avatar\";\n+import { Avatar, AvatarSize } from \"~/components/Avatar\";\n import Flex from \"~/components/Flex\";\n-import { AvatarSize } from \"./Avatar/Avatar\";\n \n type Props = {\n   users: User[];\n\ndiff --git a/app/components/GroupListItem.tsx b/app/components/GroupListItem.tsx\nindex a1bb92a2a598..ac18bc1b6fb8 100644\n--- a/app/components/GroupListItem.tsx\n+++ b/app/components/GroupListItem.tsx\n@@ -13,7 +13,6 @@ import Flex from \"~/components/Flex\";\n import ListItem from \"~/components/List/Item\";\n import Modal from \"~/components/Modal\";\n import useBoolean from \"~/hooks/useBoolean\";\n-import useStores from \"~/hooks/useStores\";\n import { hover } from \"~/styles\";\n import NudeButton from \"./NudeButton\";\n \n@@ -26,15 +25,11 @@ type Props = {\n };\n \n function GroupListItem({ group, showFacepile, renderActions }: Props) {\n-  const { groupUsers } = useStores();\n   const { t } = useTranslation();\n   const [membersModalOpen, setMembersModalOpen, setMembersModalClosed] =\n     useBoolean();\n   const memberCount = group.memberCount;\n-  const membershipsInGroup = groupUsers.inGroup(group.id);\n-  const users = membershipsInGroup\n-    .slice(0, MAX_AVATAR_DISPLAY)\n-    .map((gm) => gm.user);\n+  const users = group.users.slice(0, MAX_AVATAR_DISPLAY);\n   const overflow = memberCount - users.length;\n \n   return (\n\ndiff --git a/app/components/HoverPreview/HoverPreviewIssue.tsx b/app/components/HoverPreview/HoverPreviewIssue.tsx\nindex b63801d6ad6c..032328ffa0be 100644\n--- a/app/components/HoverPreview/HoverPreviewIssue.tsx\n+++ b/app/components/HoverPreview/HoverPreviewIssue.tsx\n@@ -1,8 +1,8 @@\n import * as React from \"react\";\n import { Trans } from \"react-i18next\";\n import { UnfurlResourceType, UnfurlResponse } from \"@shared/types\";\n+import { Avatar } from \"~/components/Avatar\";\n import Flex from \"~/components/Flex\";\n-import Avatar from \"../Avatar\";\n import { IssueStatusIcon } from \"../Icons/IssueStatusIcon\";\n import Text from \"../Text\";\n import Time from \"../Time\";\n\ndiff --git a/app/components/HoverPreview/HoverPreviewMention.tsx b/app/components/HoverPreview/HoverPreviewMention.tsx\nindex 973b0df7061c..322d50cceade 100644\n--- a/app/components/HoverPreview/HoverPreviewMention.tsx\n+++ b/app/components/HoverPreview/HoverPreviewMention.tsx\n@@ -1,7 +1,6 @@\n import * as React from \"react\";\n import { UnfurlResourceType, UnfurlResponse } from \"@shared/types\";\n-import Avatar from \"~/components/Avatar\";\n-import { AvatarSize } from \"~/components/Avatar/Avatar\";\n+import { Avatar, AvatarSize } from \"~/components/Avatar\";\n import Flex from \"~/components/Flex\";\n import { Preview, Title, Info, Card, CardContent } from \"./Components\";\n \n\ndiff --git a/app/components/HoverPreview/HoverPreviewPullRequest.tsx b/app/components/HoverPreview/HoverPreviewPullRequest.tsx\nindex 47ef95cc7b16..6393695134d8 100644\n--- a/app/components/HoverPreview/HoverPreviewPullRequest.tsx\n+++ b/app/components/HoverPreview/HoverPreviewPullRequest.tsx\n@@ -1,8 +1,8 @@\n import * as React from \"react\";\n import { Trans } from \"react-i18next\";\n import { UnfurlResourceType, UnfurlResponse } from \"@shared/types\";\n+import { Avatar } from \"~/components/Avatar\";\n import Flex from \"~/components/Flex\";\n-import Avatar from \"../Avatar\";\n import { PullRequestIcon } from \"../Icons/PullRequestIcon\";\n import Text from \"../Text\";\n import Time from \"../Time\";\n\ndiff --git a/app/components/Notifications/NotificationListItem.tsx b/app/components/Notifications/NotificationListItem.tsx\nindex 2e3b86b14647..c5cc268c2912 100644\n--- a/app/components/Notifications/NotificationListItem.tsx\n+++ b/app/components/Notifications/NotificationListItem.tsx\n@@ -9,8 +9,7 @@ import Notification from \"~/models/Notification\";\n import CommentEditor from \"~/scenes/Document/components/CommentEditor\";\n import useStores from \"~/hooks/useStores\";\n import { hover, truncateMultiline } from \"~/styles\";\n-import Avatar from \"../Avatar\";\n-import { AvatarSize } from \"../Avatar/Avatar\";\n+import { Avatar, AvatarSize } from \"../Avatar\";\n import Flex from \"../Flex\";\n import Text from \"../Text\";\n import Time from \"../Time\";\n\ndiff --git a/app/components/Sharing/Collection/AccessControlList.tsx b/app/components/Sharing/Collection/AccessControlList.tsx\nindex 9364bb8494f0..66214b542f60 100644\n--- a/app/components/Sharing/Collection/AccessControlList.tsx\n+++ b/app/components/Sharing/Collection/AccessControlList.tsx\n@@ -1,15 +1,14 @@\n import { observer } from \"mobx-react\";\n-import { GroupIcon, UserIcon } from \"outline-icons\";\n+import { UserIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import styled, { useTheme } from \"styled-components\";\n import Squircle from \"@shared/components/Squircle\";\n import { CollectionPermission } from \"@shared/types\";\n import Collection from \"~/models/Collection\";\n-import Avatar, { AvatarSize } from \"~/components/Avatar/Avatar\";\n+import { Avatar, GroupAvatar, AvatarSize } from \"~/components/Avatar\";\n import InputMemberPermissionSelect from \"~/components/InputMemberPermissionSelect\";\n import InputSelectPermission from \"~/components/InputSelectPermission\";\n-import LoadingIndicator from \"~/components/LoadingIndicator\";\n import Scrollable from \"~/components/Scrollable\";\n import useMaxHeight from \"~/hooks/useMaxHeight\";\n import usePolicy from \"~/hooks/usePolicy\";\n@@ -17,6 +16,7 @@ import useRequest from \"~/hooks/useRequest\";\n import useStores from \"~/hooks/useStores\";\n import { EmptySelectValue, Permission } from \"~/types\";\n import { ListItem } from \"../components/ListItem\";\n+import { Placeholder } from \"../components/Placeholder\";\n \n type Props = {\n   /** Collection to which team members are supposed to be invited */\n@@ -35,21 +35,31 @@ export const AccessControlList = observer(\n     const theme = useTheme();\n     const collectionId = collection.id;\n \n-    const { request: fetchMemberships, data: membershipData } = useRequest(\n-      React.useCallback(\n-        () => memberships.fetchAll({ id: collectionId }),\n-        [memberships, collectionId]\n-      )\n-    );\n+    const { request: fetchMemberships, loading: membershipLoading } =\n+      useRequest(\n+        React.useCallback(\n+          () => memberships.fetchAll({ id: collectionId }),\n+          [memberships, collectionId]\n+        )\n+      );\n \n-    const { request: fetchGroupMemberships, data: groupMembershipData } =\n+    const { request: fetchGroupMemberships, loading: groupMembershipLoading } =\n       useRequest(\n         React.useCallback(\n-          () => groupMemberships.fetchAll({ id: collectionId }),\n+          () => groupMemberships.fetchAll({ collectionId }),\n           [groupMemberships, collectionId]\n         )\n       );\n \n+    const groupMembershipsInCollection =\n+      groupMemberships.inCollection(collectionId);\n+    const membershipsInCollection = memberships.inCollection(collectionId);\n+    const hasMemberships =\n+      groupMembershipsInCollection.length > 0 ||\n+      membershipsInCollection.length > 0;\n+    const showLoading =\n+      !hasMemberships && (membershipLoading || groupMembershipLoading);\n+\n     React.useEffect(() => {\n       void fetchMemberships();\n       void fetchGroupMemberships();\n@@ -95,132 +105,142 @@ export const AccessControlList = observer(\n         hiddenScrollbars\n         style={{ maxHeight }}\n       >\n-        {(!membershipData || !groupMembershipData) && <LoadingIndicator />}\n-        <ListItem\n-          image={\n-            <Squircle color={theme.accent} size={AvatarSize.Medium}>\n-              <UserIcon color={theme.accentText} size={16} />\n-            </Squircle>\n-          }\n-          title={t(\"All members\")}\n-          subtitle={t(\"Everyone in the workspace\")}\n-          actions={\n-            <div style={{ marginRight: -8 }}>\n-              <InputSelectPermission\n-                style={{ margin: 0 }}\n-                onChange={(\n-                  value: CollectionPermission | typeof EmptySelectValue\n-                ) => {\n-                  void collection.save({\n-                    permission: value === EmptySelectValue ? null : value,\n-                  });\n-                }}\n-                disabled={!can.update}\n-                value={collection?.permission}\n-                labelHidden\n-                nude\n-              />\n-            </div>\n-          }\n-        />\n-        {groupMemberships\n-          .inCollection(collection.id)\n-          .sort((a, b) =>\n-            (\n-              (invitedInSession.includes(a.group.id) ? \"_\" : \"\") + a.group.name\n-            ).localeCompare(b.group.name)\n-          )\n-          .map((membership) => (\n+        {showLoading ? (\n+          <Placeholder count={2} />\n+        ) : (\n+          <>\n             <ListItem\n-              key={membership.id}\n               image={\n-                <Squircle color={theme.text} size={AvatarSize.Medium}>\n-                  <GroupIcon color={theme.background} size={16} />\n+                <Squircle color={theme.accent} size={AvatarSize.Medium}>\n+                  <UserIcon color={theme.accentText} size={16} />\n                 </Squircle>\n               }\n-              title={membership.group.name}\n-              subtitle={t(\"{{ count }} member\", {\n-                count: membership.group.memberCount,\n-              })}\n+              title={t(\"All members\")}\n+              subtitle={t(\"Everyone in the workspace\")}\n               actions={\n                 <div style={{ marginRight: -8 }}>\n-                  <InputMemberPermissionSelect\n+                  <InputSelectPermission\n                     style={{ margin: 0 }}\n-                    permissions={permissions}\n-                    onChange={async (\n-                      permission: CollectionPermission | typeof EmptySelectValue\n+                    onChange={(\n+                      value: CollectionPermission | typeof EmptySelectValue\n                     ) => {\n-                      if (permission === EmptySelectValue) {\n-                        await groupMemberships.delete({\n-                          collectionId: collection.id,\n-                          groupId: membership.groupId,\n-                        });\n-                      } else {\n-                        await groupMemberships.create({\n-                          collectionId: collection.id,\n-                          groupId: membership.groupId,\n-                          permission,\n-                        });\n-                      }\n+                      void collection.save({\n+                        permission: value === EmptySelectValue ? null : value,\n+                      });\n                     }}\n                     disabled={!can.update}\n-                    value={membership.permission}\n+                    value={collection?.permission}\n                     labelHidden\n                     nude\n                   />\n                 </div>\n               }\n             />\n-          ))}\n-        {memberships\n-          .inCollection(collection.id)\n-          .sort((a, b) =>\n-            (\n-              (invitedInSession.includes(a.user.id) ? \"_\" : \"\") + a.user.name\n-            ).localeCompare(b.user.name)\n-          )\n-          .map((membership) => (\n-            <ListItem\n-              key={membership.id}\n-              image={\n-                <Avatar\n-                  model={membership.user}\n-                  size={AvatarSize.Medium}\n-                  showBorder={false}\n+            {groupMembershipsInCollection\n+              .sort((a, b) =>\n+                (\n+                  (invitedInSession.includes(a.group.id) ? \"_\" : \"\") +\n+                  a.group.name\n+                ).localeCompare(b.group.name)\n+              )\n+              .map((membership) => (\n+                <ListItem\n+                  key={membership.id}\n+                  image={\n+                    <GroupAvatar\n+                      group={membership.group}\n+                      backgroundColor={theme.modalBackground}\n+                    />\n+                  }\n+                  title={membership.group.name}\n+                  subtitle={t(\"{{ count }} member\", {\n+                    count: membership.group.memberCount,\n+                  })}\n+                  actions={\n+                    <div style={{ marginRight: -8 }}>\n+                      <InputMemberPermissionSelect\n+                        style={{ margin: 0 }}\n+                        permissions={permissions}\n+                        onChange={async (\n+                          permission:\n+                            | CollectionPermission\n+                            | typeof EmptySelectValue\n+                        ) => {\n+                          if (permission === EmptySelectValue) {\n+                            await groupMemberships.delete({\n+                              collectionId: collection.id,\n+                              groupId: membership.groupId,\n+                            });\n+                          } else {\n+                            await groupMemberships.create({\n+                              collectionId: collection.id,\n+                              groupId: membership.groupId,\n+                              permission,\n+                            });\n+                          }\n+                        }}\n+                        disabled={!can.update}\n+                        value={membership.permission}\n+                        labelHidden\n+                        nude\n+                      />\n+                    </div>\n+                  }\n                 />\n-              }\n-              title={membership.user.name}\n-              subtitle={membership.user.email}\n-              actions={\n-                <div style={{ marginRight: -8 }}>\n-                  <InputMemberPermissionSelect\n-                    style={{ margin: 0 }}\n-                    permissions={permissions}\n-                    onChange={async (\n-                      permission: CollectionPermission | typeof EmptySelectValue\n-                    ) => {\n-                      if (permission === EmptySelectValue) {\n-                        await memberships.delete({\n-                          collectionId: collection.id,\n-                          userId: membership.userId,\n-                        });\n-                      } else {\n-                        await memberships.create({\n-                          collectionId: collection.id,\n-                          userId: membership.userId,\n-                          permission,\n-                        });\n-                      }\n-                    }}\n-                    disabled={!can.update}\n-                    value={membership.permission}\n-                    labelHidden\n-                    nude\n-                  />\n-                </div>\n-              }\n-            />\n-          ))}\n+              ))}\n+            {membershipsInCollection\n+              .sort((a, b) =>\n+                (\n+                  (invitedInSession.includes(a.user.id) ? \"_\" : \"\") +\n+                  a.user.name\n+                ).localeCompare(b.user.name)\n+              )\n+              .map((membership) => (\n+                <ListItem\n+                  key={membership.id}\n+                  image={\n+                    <Avatar\n+                      model={membership.user}\n+                      size={AvatarSize.Medium}\n+                      showBorder={false}\n+                    />\n+                  }\n+                  title={membership.user.name}\n+                  subtitle={membership.user.email}\n+                  actions={\n+                    <div style={{ marginRight: -8 }}>\n+                      <InputMemberPermissionSelect\n+                        style={{ margin: 0 }}\n+                        permissions={permissions}\n+                        onChange={async (\n+                          permission:\n+                            | CollectionPermission\n+                            | typeof EmptySelectValue\n+                        ) => {\n+                          if (permission === EmptySelectValue) {\n+                            await memberships.delete({\n+                              collectionId: collection.id,\n+                              userId: membership.userId,\n+                            });\n+                          } else {\n+                            await memberships.create({\n+                              collectionId: collection.id,\n+                              userId: membership.userId,\n+                              permission,\n+                            });\n+                          }\n+                        }}\n+                        disabled={!can.update}\n+                        value={membership.permission}\n+                        labelHidden\n+                        nude\n+                      />\n+                    </div>\n+                  }\n+                />\n+              ))}\n+          </>\n+        )}\n       </ScrollableContainer>\n     );\n   }\n\ndiff --git a/app/components/Sharing/Collection/SharePopover.tsx b/app/components/Sharing/Collection/SharePopover.tsx\nindex f86cba796052..0d76743dcf1d 100644\n--- a/app/components/Sharing/Collection/SharePopover.tsx\n+++ b/app/components/Sharing/Collection/SharePopover.tsx\n@@ -9,7 +9,7 @@ import { CollectionPermission } from \"@shared/types\";\n import Collection from \"~/models/Collection\";\n import Group from \"~/models/Group\";\n import User from \"~/models/User\";\n-import Avatar, { AvatarSize } from \"~/components/Avatar/Avatar\";\n+import { Avatar, AvatarSize } from \"~/components/Avatar\";\n import NudeButton from \"~/components/NudeButton\";\n import { createAction } from \"~/actions\";\n import { UserSection } from \"~/actions/sections\";\n@@ -357,7 +357,6 @@ function SharePopover({ collection, visible, onRequestClose }: Props) {\n           addPendingId={handleAddPendingId}\n           removePendingId={handleRemovePendingId}\n           onEscape={handleEscape}\n-          showGroups\n         />\n       )}\n \n\ndiff --git a/app/components/Sharing/Document/AccessControlList.tsx b/app/components/Sharing/Document/AccessControlList.tsx\nindex 263bd2d49f1e..2dec49efef88 100644\n--- a/app/components/Sharing/Document/AccessControlList.tsx\n+++ b/app/components/Sharing/Document/AccessControlList.tsx\n@@ -11,7 +11,6 @@ import type Collection from \"~/models/Collection\";\n import type Document from \"~/models/Document\";\n import Share from \"~/models/Share\";\n import Flex from \"~/components/Flex\";\n-import LoadingIndicator from \"~/components/LoadingIndicator\";\n import Scrollable from \"~/components/Scrollable\";\n import Text from \"~/components/Text\";\n import useCurrentTeam from \"~/hooks/useCurrentTeam\";\n@@ -20,12 +19,12 @@ import useMaxHeight from \"~/hooks/useMaxHeight\";\n import usePolicy from \"~/hooks/usePolicy\";\n import useRequest from \"~/hooks/useRequest\";\n import useStores from \"~/hooks/useStores\";\n-import Avatar from \"../../Avatar\";\n-import { AvatarSize } from \"../../Avatar/Avatar\";\n+import { Avatar, AvatarSize } from \"../../Avatar\";\n import CollectionIcon from \"../../Icons/CollectionIcon\";\n import Tooltip from \"../../Tooltip\";\n import { Separator } from \"../components\";\n import { ListItem } from \"../components/ListItem\";\n+import { Placeholder } from \"../components/Placeholder\";\n import DocumentMemberList from \"./DocumentMemberList\";\n import PublicAccess from \"./PublicAccess\";\n \n@@ -58,10 +57,12 @@ export const AccessControlList = observer(\n     const collection = document.collection;\n     const usersInCollection = useUsersInCollection(collection);\n     const user = useCurrentUser();\n-    const { userMemberships } = useStores();\n+    const { userMemberships, groupMemberships } = useStores();\n     const collectionSharingDisabled = document.collection?.sharing === false;\n     const team = useCurrentTeam();\n     const can = usePolicy(document);\n+    const canCollection = usePolicy(collection);\n+    const documentId = document.id;\n \n     const containerRef = React.useRef<HTMLDivElement | null>(null);\n     const { maxHeight, calcMaxHeight } = useMaxHeight({\n@@ -70,21 +71,36 @@ export const AccessControlList = observer(\n       margin: 24,\n     });\n \n-    const { loading: loadingDocumentMembers, request: fetchDocumentMembers } =\n+    const { loading: userMembershipLoading, request: fetchUserMemberships } =\n       useRequest(\n         React.useCallback(\n           () =>\n             userMemberships.fetchDocumentMemberships({\n-              id: document.id,\n+              id: documentId,\n               limit: Pagination.defaultLimit,\n             }),\n-          [userMemberships, document.id]\n+          [userMemberships, documentId]\n         )\n       );\n \n+    const { loading: groupMembershipLoading, request: fetchGroupMemberships } =\n+      useRequest(\n+        React.useCallback(\n+          () => groupMemberships.fetchAll({ documentId }),\n+          [groupMemberships, documentId]\n+        )\n+      );\n+\n+    const hasMemberships =\n+      groupMemberships.inDocument(documentId)?.length > 0 ||\n+      document.members.length > 0;\n+    const showLoading =\n+      !hasMemberships && (groupMembershipLoading || userMembershipLoading);\n+\n     React.useEffect(() => {\n-      void fetchDocumentMembers();\n-    }, [fetchDocumentMembers]);\n+      void fetchUserMemberships();\n+      void fetchGroupMemberships();\n+    }, [fetchUserMemberships, fetchGroupMemberships]);\n \n     React.useEffect(() => {\n       calcMaxHeight();\n@@ -96,84 +112,92 @@ export const AccessControlList = observer(\n         hiddenScrollbars\n         style={{ maxHeight }}\n       >\n-        {loadingDocumentMembers && <LoadingIndicator />}\n-        {collection ? (\n-          <>\n-            {collection.permission ? (\n-              <ListItem\n-                image={\n-                  <Squircle color={theme.accent} size={AvatarSize.Medium}>\n-                    <UserIcon color={theme.accentText} size={16} />\n-                  </Squircle>\n-                }\n-                title={t(\"All members\")}\n-                subtitle={t(\"Everyone in the workspace\")}\n-                actions={\n-                  <AccessTooltip>\n-                    {collection?.permission === CollectionPermission.ReadWrite\n-                      ? t(\"Can edit\")\n-                      : t(\"Can view\")}\n-                  </AccessTooltip>\n-                }\n-              />\n-            ) : usersInCollection ? (\n-              <ListItem\n-                image={<CollectionSquircle collection={collection} />}\n-                title={collection.name}\n-                subtitle={t(\"Everyone in the collection\")}\n-                actions={<AccessTooltip>{t(\"Can view\")}</AccessTooltip>}\n-              />\n-            ) : (\n-              <ListItem\n-                image={<Avatar model={user} showBorder={false} />}\n-                title={user.name}\n-                subtitle={t(\"You have full access\")}\n-                actions={<AccessTooltip>{t(\"Can edit\")}</AccessTooltip>}\n-              />\n-            )}\n-            <DocumentMemberList\n-              document={document}\n-              invitedInSession={invitedInSession}\n-            />\n-          </>\n-        ) : document.isDraft ? (\n-          <>\n-            <ListItem\n-              image={<Avatar model={document.createdBy} showBorder={false} />}\n-              title={document.createdBy?.name}\n-              actions={\n-                <AccessTooltip content={t(\"Created the document\")}>\n-                  {t(\"Can edit\")}\n-                </AccessTooltip>\n-              }\n-            />\n-            <DocumentMemberList\n-              document={document}\n-              invitedInSession={invitedInSession}\n-            />\n-          </>\n+        {showLoading ? (\n+          <Placeholder />\n         ) : (\n           <>\n-            <DocumentMemberList\n-              document={document}\n-              invitedInSession={invitedInSession}\n-            />\n-            <ListItem\n-              image={\n-                <Squircle color={theme.accent} size={AvatarSize.Medium}>\n-                  <MoreIcon color={theme.accentText} size={16} />\n-                </Squircle>\n-              }\n-              title={t(\"Other people\")}\n-              subtitle={t(\"Other workspace members may have access\")}\n-              actions={\n-                <AccessTooltip\n-                  content={t(\n-                    \"This document may be shared with more workspace members through a parent document or collection you do not have access to\"\n-                  )}\n+            {collection && canCollection.readDocument ? (\n+              <>\n+                {collection.permission ? (\n+                  <ListItem\n+                    image={\n+                      <Squircle color={theme.accent} size={AvatarSize.Medium}>\n+                        <UserIcon color={theme.accentText} size={16} />\n+                      </Squircle>\n+                    }\n+                    title={t(\"All members\")}\n+                    subtitle={t(\"Everyone in the workspace\")}\n+                    actions={\n+                      <AccessTooltip>\n+                        {collection?.permission ===\n+                        CollectionPermission.ReadWrite\n+                          ? t(\"Can edit\")\n+                          : t(\"Can view\")}\n+                      </AccessTooltip>\n+                    }\n+                  />\n+                ) : usersInCollection ? (\n+                  <ListItem\n+                    image={<CollectionSquircle collection={collection} />}\n+                    title={collection.name}\n+                    subtitle={t(\"Everyone in the collection\")}\n+                    actions={<AccessTooltip>{t(\"Can view\")}</AccessTooltip>}\n+                  />\n+                ) : (\n+                  <ListItem\n+                    image={<Avatar model={user} showBorder={false} />}\n+                    title={user.name}\n+                    subtitle={t(\"You have full access\")}\n+                    actions={<AccessTooltip>{t(\"Can edit\")}</AccessTooltip>}\n+                  />\n+                )}\n+                <DocumentMemberList\n+                  document={document}\n+                  invitedInSession={invitedInSession}\n                 />\n-              }\n-            />\n+              </>\n+            ) : document.isDraft ? (\n+              <>\n+                <ListItem\n+                  image={\n+                    <Avatar model={document.createdBy} showBorder={false} />\n+                  }\n+                  title={document.createdBy?.name}\n+                  actions={\n+                    <AccessTooltip content={t(\"Created the document\")}>\n+                      {t(\"Can edit\")}\n+                    </AccessTooltip>\n+                  }\n+                />\n+                <DocumentMemberList\n+                  document={document}\n+                  invitedInSession={invitedInSession}\n+                />\n+              </>\n+            ) : (\n+              <>\n+                <DocumentMemberList\n+                  document={document}\n+                  invitedInSession={invitedInSession}\n+                />\n+                <ListItem\n+                  image={\n+                    <Squircle color={theme.accent} size={AvatarSize.Medium}>\n+                      <MoreIcon color={theme.accentText} size={16} />\n+                    </Squircle>\n+                  }\n+                  title={t(\"Other people\")}\n+                  subtitle={t(\"Other workspace members may have access\")}\n+                  actions={\n+                    <AccessTooltip\n+                      content={t(\n+                        \"This document may be shared with more workspace members through a parent document or collection you do not have access to\"\n+                      )}\n+                    />\n+                  }\n+                />\n+              </>\n+            )}\n           </>\n         )}\n         {team.sharing && can.share && !collectionSharingDisabled && visible && (\n\ndiff --git a/app/components/Sharing/Document/DocumentMemberList.tsx b/app/components/Sharing/Document/DocumentMemberList.tsx\nindex 92feac33bf73..ed5b667fb2f7 100644\n--- a/app/components/Sharing/Document/DocumentMemberList.tsx\n+++ b/app/components/Sharing/Document/DocumentMemberList.tsx\n@@ -1,16 +1,23 @@\n import orderBy from \"lodash/orderBy\";\n import { observer } from \"mobx-react\";\n import * as React from \"react\";\n-import { useTranslation } from \"react-i18next\";\n-import { useHistory } from \"react-router-dom\";\n+import { useTranslation, Trans } from \"react-i18next\";\n+import { Link, useHistory } from \"react-router-dom\";\n import { toast } from \"sonner\";\n+import styled, { useTheme } from \"styled-components\";\n+import { s } from \"@shared/styles\";\n+import { DocumentPermission } from \"@shared/types\";\n import Document from \"~/models/Document\";\n import UserMembership from \"~/models/UserMembership\";\n+import { GroupAvatar } from \"~/components/Avatar\";\n+import InputMemberPermissionSelect from \"~/components/InputMemberPermissionSelect\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n import usePolicy from \"~/hooks/usePolicy\";\n import useStores from \"~/hooks/useStores\";\n+import { EmptySelectValue, Permission } from \"~/types\";\n import { homePath } from \"~/utils/routeHelpers\";\n-import MemberListItem from \"./DocumentMemberListItem\";\n+import { ListItem } from \"../components/ListItem\";\n+import DocumentMemberListItem from \"./DocumentMemberListItem\";\n \n type Props = {\n   /** Document to which team members are supposed to be invited */\n@@ -22,12 +29,13 @@ type Props = {\n };\n \n function DocumentMembersList({ document, invitedInSession }: Props) {\n-  const { userMemberships } = useStores();\n+  const { userMemberships, groupMemberships } = useStores();\n \n   const user = useCurrentUser();\n   const history = useHistory();\n   const can = usePolicy(document);\n   const { t } = useTranslation();\n+  const theme = useTheme();\n \n   const handleRemoveUser = React.useCallback(\n     async (item) => {\n@@ -50,7 +58,7 @@ function DocumentMembersList({ document, invitedInSession }: Props) {\n         toast.error(t(\"Could not remove user\"));\n       }\n     },\n-    [history, userMemberships, user, document]\n+    [t, history, userMemberships, user, document]\n   );\n \n   const handleUpdateUser = React.useCallback(\n@@ -70,7 +78,7 @@ function DocumentMembersList({ document, invitedInSession }: Props) {\n         toast.error(t(\"Could not update user\"));\n       }\n     },\n-    [userMemberships, document]\n+    [t, userMemberships, document]\n   );\n \n   // Order newly added users first during the current editing session, on reload members are\n@@ -87,10 +95,101 @@ function DocumentMembersList({ document, invitedInSession }: Props) {\n     [document.members, invitedInSession]\n   );\n \n+  const permissions = React.useMemo(\n+    () =>\n+      [\n+        {\n+          label: t(\"View only\"),\n+          value: DocumentPermission.Read,\n+        },\n+        {\n+          label: t(\"Can edit\"),\n+          value: DocumentPermission.ReadWrite,\n+        },\n+        {\n+          label: t(\"Manage\"),\n+          value: DocumentPermission.Admin,\n+        },\n+        {\n+          divider: true,\n+          label: t(\"Remove\"),\n+          value: EmptySelectValue,\n+        },\n+      ] as Permission[],\n+    [t]\n+  );\n+\n   return (\n     <>\n+      {groupMemberships\n+        .inDocument(document.id)\n+        .sort((a, b) =>\n+          (\n+            (invitedInSession.includes(a.group.id) ? \"_\" : \"\") + a.group.name\n+          ).localeCompare(b.group.name)\n+        )\n+        .map((membership) => {\n+          const MaybeLink = membership?.source ? StyledLink : React.Fragment;\n+          return (\n+            <ListItem\n+              key={membership.id}\n+              image={\n+                <GroupAvatar\n+                  group={membership.group}\n+                  backgroundColor={theme.modalBackground}\n+                />\n+              }\n+              title={membership.group.name}\n+              subtitle={\n+                membership.sourceId ? (\n+                  <Trans>\n+                    Has access through{\" \"}\n+                    <MaybeLink\n+                      // @ts-expect-error to prop does not exist on React.Fragment\n+                      to={membership.source?.document?.path ?? \"\"}\n+                    >\n+                      parent\n+                    </MaybeLink>\n+                  </Trans>\n+                ) : (\n+                  t(\"{{ count }} member\", {\n+                    count: membership.group.memberCount,\n+                  })\n+                )\n+              }\n+              actions={\n+                <div style={{ marginRight: -8 }}>\n+                  <InputMemberPermissionSelect\n+                    style={{ margin: 0 }}\n+                    permissions={permissions}\n+                    onChange={async (\n+                      permission: DocumentPermission | typeof EmptySelectValue\n+                    ) => {\n+                      if (permission === EmptySelectValue) {\n+                        await groupMemberships.delete({\n+                          documentId: document.id,\n+                          groupId: membership.groupId,\n+                        });\n+                      } else {\n+                        await groupMemberships.create({\n+                          documentId: document.id,\n+                          groupId: membership.groupId,\n+                          permission,\n+                        });\n+                      }\n+                    }}\n+                    disabled={!can.manageUsers}\n+                    value={membership.permission}\n+                    labelHidden\n+                    nude\n+                  />\n+                </div>\n+              }\n+            />\n+          );\n+        })}\n       {members.map((item) => (\n-        <MemberListItem\n+        <DocumentMemberListItem\n           key={item.id}\n           user={item}\n           membership={item.getMembership(document)}\n@@ -109,4 +208,9 @@ function DocumentMembersList({ document, invitedInSession }: Props) {\n   );\n }\n \n+const StyledLink = styled(Link)`\n+  color: ${s(\"textTertiary\")};\n+  text-decoration: underline;\n+`;\n+\n export default observer(DocumentMembersList);\n\ndiff --git a/app/components/Sharing/Document/DocumentMemberListItem.tsx b/app/components/Sharing/Document/DocumentMemberListItem.tsx\nindex 02d81baadffc..46e6c1e1539a 100644\n--- a/app/components/Sharing/Document/DocumentMemberListItem.tsx\n+++ b/app/components/Sharing/Document/DocumentMemberListItem.tsx\n@@ -7,9 +7,9 @@ import { s } from \"@shared/styles\";\n import { DocumentPermission } from \"@shared/types\";\n import User from \"~/models/User\";\n import UserMembership from \"~/models/UserMembership\";\n-import Avatar from \"~/components/Avatar\";\n-import { AvatarSize } from \"~/components/Avatar/Avatar\";\n+import { Avatar, AvatarSize } from \"~/components/Avatar\";\n import InputMemberPermissionSelect from \"~/components/InputMemberPermissionSelect\";\n+import Time from \"~/components/Time\";\n import { EmptySelectValue, Permission } from \"~/types\";\n import { ListItem } from \"../components/ListItem\";\n \n@@ -68,7 +68,6 @@ const DocumentMemberListItem = ({\n   if (!currentPermission) {\n     return null;\n   }\n-  const disabled = !onUpdate && !onLeave;\n   const MaybeLink = membership?.source ? StyledLink : React.Fragment;\n \n   return (\n@@ -90,36 +89,35 @@ const DocumentMemberListItem = ({\n           </Trans>\n         ) : user.isSuspended ? (\n           t(\"Suspended\")\n-        ) : user.email ? (\n-          user.email\n         ) : user.isInvited ? (\n           t(\"Invited\")\n-        ) : user.isViewer ? (\n-          t(\"Viewer\")\n+        ) : user.lastActiveAt ? (\n+          <Trans>\n+            Active <Time dateTime={user.lastActiveAt} /> ago\n+          </Trans>\n         ) : (\n-          t(\"Editor\")\n+          t(\"Never signed in\")\n         )\n       }\n       actions={\n-        disabled ? null : (\n-          <div style={{ marginRight: -8 }}>\n-            <InputMemberPermissionSelect\n-              permissions={\n-                onLeave\n-                  ? [\n-                      currentPermission,\n-                      {\n-                        label: `${t(\"Leave\")}…`,\n-                        value: EmptySelectValue,\n-                      },\n-                    ]\n-                  : permissions\n-              }\n-              value={membership?.permission}\n-              onChange={handleChange}\n-            />\n-          </div>\n-        )\n+        <div style={{ marginRight: -8 }}>\n+          <InputMemberPermissionSelect\n+            permissions={\n+              onLeave\n+                ? [\n+                    currentPermission,\n+                    {\n+                      label: `${t(\"Leave\")}…`,\n+                      value: EmptySelectValue,\n+                    },\n+                  ]\n+                : permissions\n+            }\n+            value={membership?.permission}\n+            onChange={handleChange}\n+            disabled={!onUpdate && !onLeave}\n+          />\n+        </div>\n       }\n     />\n   );\n\ndiff --git a/app/components/Sharing/Document/PublicAccess.tsx b/app/components/Sharing/Document/PublicAccess.tsx\nindex c9628b754714..ad4eb21b47d6 100644\n--- a/app/components/Sharing/Document/PublicAccess.tsx\n+++ b/app/components/Sharing/Document/PublicAccess.tsx\n@@ -18,7 +18,7 @@ import Switch from \"~/components/Switch\";\n import env from \"~/env\";\n import usePolicy from \"~/hooks/usePolicy\";\n import useStores from \"~/hooks/useStores\";\n-import { AvatarSize } from \"../../Avatar/Avatar\";\n+import { AvatarSize } from \"../../Avatar\";\n import CopyToClipboard from \"../../CopyToClipboard\";\n import NudeButton from \"../../NudeButton\";\n import { ResizingHeightContainer } from \"../../ResizingHeightContainer\";\n\ndiff --git a/app/components/Sharing/Document/SharePopover.tsx b/app/components/Sharing/Document/SharePopover.tsx\nindex a87bdbf2fb2f..6ab0f6262eb3 100644\n--- a/app/components/Sharing/Document/SharePopover.tsx\n+++ b/app/components/Sharing/Document/SharePopover.tsx\n@@ -7,10 +7,10 @@ import { useTranslation } from \"react-i18next\";\n import { toast } from \"sonner\";\n import { DocumentPermission } from \"@shared/types\";\n import Document from \"~/models/Document\";\n+import Group from \"~/models/Group\";\n import Share from \"~/models/Share\";\n import User from \"~/models/User\";\n-import Avatar from \"~/components/Avatar\";\n-import { AvatarSize } from \"~/components/Avatar/Avatar\";\n+import { Avatar, GroupAvatar, AvatarSize } from \"~/components/Avatar\";\n import NudeButton from \"~/components/NudeButton\";\n import { createAction } from \"~/actions\";\n import { UserSection } from \"~/actions/sections\";\n@@ -53,7 +53,7 @@ function SharePopover({\n   const { t } = useTranslation();\n   const can = usePolicy(document);\n   const [hasRendered, setHasRendered] = React.useState(visible);\n-  const { users, userMemberships } = useStores();\n+  const { users, userMemberships, groups, groupMemberships } = useStores();\n   const [query, setQuery] = React.useState(\"\");\n   const [picker, showPicker, hidePicker] = useBoolean();\n   const [invitedInSession, setInvitedInSession] = React.useState<string[]>([]);\n@@ -129,9 +129,9 @@ function SharePopover({\n         name: t(\"Invite\"),\n         section: UserSection,\n         perform: async () => {\n-          const usersInvited = await Promise.all(\n+          const invited = await Promise.all(\n             pendingIds.map(async (idOrEmail) => {\n-              let user;\n+              let user, group;\n \n               // convert email to user\n               if (isEmail(idOrEmail)) {\n@@ -145,38 +145,77 @@ function SharePopover({\n                 user = response[0];\n               } else {\n                 user = users.get(idOrEmail);\n+                group = groups.get(idOrEmail);\n               }\n \n-              if (!user) {\n-                return;\n+              if (user) {\n+                await userMemberships.create({\n+                  documentId: document.id,\n+                  userId: user.id,\n+                  permission,\n+                });\n+                return user;\n               }\n \n-              await userMemberships.create({\n-                documentId: document.id,\n-                userId: user.id,\n-                permission,\n-              });\n+              if (group) {\n+                await groupMemberships.create({\n+                  documentId: document.id,\n+                  groupId: group.id,\n+                  permission,\n+                });\n+                return group;\n+              }\n \n-              return user;\n+              return;\n             })\n           );\n \n-          if (usersInvited.length === 1) {\n-            const user = usersInvited[0] as User;\n-            toast.message(\n-              t(\"{{ userName }} was invited to the document\", {\n-                userName: user.name,\n-              }),\n-              {\n-                icon: <Avatar model={user} size={AvatarSize.Toast} />,\n-              }\n-            );\n-          } else {\n-            toast.success(\n-              t(\"{{ count }} people invited to the document\", {\n-                count: pendingIds.length,\n-              })\n-            );\n+          const invitedUsers = invited.filter(\n+            (item) => item instanceof User\n+          ) as User[];\n+          const invitedGroups = invited.filter(\n+            (item) => item instanceof Group\n+          ) as Group[];\n+\n+          if (invitedUsers.length > 0) {\n+            // Special case for the common action of adding a single user.\n+            if (invitedUsers.length === 1) {\n+              const user = invitedUsers[0];\n+              toast.message(\n+                t(\"{{ userName }} was added to the document\", {\n+                  userName: user.name,\n+                }),\n+                {\n+                  icon: <Avatar model={user} size={AvatarSize.Toast} />,\n+                }\n+              );\n+            } else {\n+              toast.message(\n+                t(\"{{ count }} people added to the document\", {\n+                  count: invitedUsers.length,\n+                })\n+              );\n+            }\n+          }\n+          if (invitedGroups.length > 0) {\n+            // Special case for the common action of adding a single group.\n+            if (invitedGroups.length === 1) {\n+              const group = invitedGroups[0];\n+              toast.message(\n+                t(\"{{ userName }} was added to the document\", {\n+                  userName: group.name,\n+                }),\n+                {\n+                  icon: <GroupAvatar group={group} size={AvatarSize.Toast} />,\n+                }\n+              );\n+            } else {\n+              toast.message(\n+                t(\"{{ count }} groups added to the document\", {\n+                  count: invitedGroups.length,\n+                })\n+              );\n+            }\n           }\n \n           setInvitedInSession((prev) => [...prev, ...pendingIds]);\n@@ -185,14 +224,16 @@ function SharePopover({\n         },\n       }),\n     [\n-      t,\n-      pendingIds,\n+      document.id,\n+      groupMemberships,\n+      groups,\n       hidePicker,\n       userMemberships,\n-      document.id,\n+      pendingIds,\n       permission,\n-      users,\n+      t,\n       team.defaultUserRole,\n+      users,\n     ]\n   );\n \n\ndiff --git a/app/components/Sharing/components/Placeholder.tsx b/app/components/Sharing/components/Placeholder.tsx\nnew file mode 100644\nindex 000000000000..13f6685162e7\n--- /dev/null\n+++ b/app/components/Sharing/components/Placeholder.tsx\n@@ -0,0 +1,47 @@\n+import times from \"lodash/times\";\n+import * as React from \"react\";\n+import { AvatarSize } from \"~/components/Avatar\";\n+import Fade from \"~/components/Fade\";\n+import PlaceholderText from \"~/components/PlaceholderText\";\n+import { ListItem } from \"../components/ListItem\";\n+\n+type Props = {\n+  count?: number;\n+};\n+\n+/**\n+ * Placeholder for a list item in the share popover.\n+ */\n+export function Placeholder({ count = 1 }: Props) {\n+  return (\n+    <Fade>\n+      {times(count, (index) => (\n+        <ListItem\n+          key={index}\n+          image={\n+            <PlaceholderText\n+              width={AvatarSize.Medium}\n+              height={AvatarSize.Medium}\n+            />\n+          }\n+          title={\n+            <PlaceholderText\n+              maxWidth={50}\n+              minWidth={30}\n+              height={14}\n+              style={{ marginTop: 4, marginBottom: 4 }}\n+            />\n+          }\n+          subtitle={\n+            <PlaceholderText\n+              maxWidth={75}\n+              minWidth={50}\n+              height={12}\n+              style={{ marginBottom: 4 }}\n+            />\n+          }\n+        />\n+      ))}\n+    </Fade>\n+  );\n+}\n\ndiff --git a/app/components/Sharing/components/Suggestions.tsx b/app/components/Sharing/components/Suggestions.tsx\nindex 27ff06471b11..69ae25e452ce 100644\n--- a/app/components/Sharing/components/Suggestions.tsx\n+++ b/app/components/Sharing/components/Suggestions.tsx\n@@ -1,11 +1,10 @@\n import { isEmail } from \"class-validator\";\n import concat from \"lodash/concat\";\n import { observer } from \"mobx-react\";\n-import { CheckmarkIcon, CloseIcon, GroupIcon } from \"outline-icons\";\n+import { CheckmarkIcon, CloseIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n-import styled, { useTheme } from \"styled-components\";\n-import Squircle from \"@shared/components/Squircle\";\n+import styled from \"styled-components\";\n import { s } from \"@shared/styles\";\n import { stringToColor } from \"@shared/utils/color\";\n import Collection from \"~/models/Collection\";\n@@ -13,8 +12,7 @@ import Document from \"~/models/Document\";\n import Group from \"~/models/Group\";\n import User from \"~/models/User\";\n import ArrowKeyNavigation from \"~/components/ArrowKeyNavigation\";\n-import Avatar from \"~/components/Avatar\";\n-import { AvatarSize, IAvatar } from \"~/components/Avatar/Avatar\";\n+import { Avatar, GroupAvatar, AvatarSize, IAvatar } from \"~/components/Avatar\";\n import Empty from \"~/components/Empty\";\n import Placeholder from \"~/components/List/Placeholder\";\n import Scrollable from \"~/components/Scrollable\";\n@@ -42,8 +40,6 @@ type Props = {\n   addPendingId: (id: string) => void;\n   /** Callback to remove a user from the pending list. */\n   removePendingId: (id: string) => void;\n-  /** Show group suggestions. */\n-  showGroups?: boolean;\n   /** Handles escape from suggestions list */\n   onEscape?: (ev: React.KeyboardEvent<HTMLDivElement>) => void;\n };\n@@ -57,7 +53,6 @@ export const Suggestions = observer(\n       pendingIds,\n       addPendingId,\n       removePendingId,\n-      showGroups,\n       onEscape,\n     }: Props,\n     ref: React.Ref<HTMLDivElement>\n@@ -66,7 +61,6 @@ export const Suggestions = observer(\n     const { users, groups } = useStores();\n     const { t } = useTranslation();\n     const user = useCurrentUser();\n-    const theme = useTheme();\n     const containerRef = React.useRef<HTMLDivElement | null>(null);\n     const { maxHeight } = useMaxHeight({\n       elementRef: containerRef,\n@@ -76,10 +70,7 @@ export const Suggestions = observer(\n     const fetchUsersByQuery = useThrottledCallback(\n       (query: string) => {\n         void users.fetchPage({ query });\n-\n-        if (showGroups) {\n-          void groups.fetchPage({ query });\n-        }\n+        void groups.fetchPage({ query });\n       },\n       250,\n       undefined,\n@@ -113,11 +104,14 @@ export const Suggestions = observer(\n         filtered.push(getSuggestionForEmail(query));\n       }\n \n-      if (collection?.id) {\n-        return [...groups.notInCollection(collection.id, query), ...filtered];\n-      }\n-\n-      return filtered;\n+      return [\n+        ...(document\n+          ? groups.notInDocument(document.id, query)\n+          : collection\n+          ? groups.notInCollection(collection.id, query)\n+          : []),\n+        ...filtered,\n+      ];\n     }, [\n       getSuggestionForEmail,\n       users,\n@@ -141,7 +135,7 @@ export const Suggestions = observer(\n               : users.get(id) ?? groups.get(id)\n           )\n           .filter(Boolean) as User[],\n-      [users, getSuggestionForEmail, pendingIds]\n+      [users, groups, getSuggestionForEmail, pendingIds]\n     );\n \n     React.useEffect(() => {\n@@ -155,11 +149,7 @@ export const Suggestions = observer(\n           subtitle: t(\"{{ count }} member\", {\n             count: suggestion.memberCount,\n           }),\n-          image: (\n-            <Squircle color={theme.text} size={AvatarSize.Medium}>\n-              <GroupIcon color={theme.background} size={16} />\n-            </Squircle>\n-          ),\n+          image: <GroupAvatar group={suggestion} />,\n         };\n       }\n       return {\n\ndiff --git a/app/components/Sidebar/Sidebar.tsx b/app/components/Sidebar/Sidebar.tsx\nindex ae4de426e577..66becdd1f095 100644\n--- a/app/components/Sidebar/Sidebar.tsx\n+++ b/app/components/Sidebar/Sidebar.tsx\n@@ -4,6 +4,7 @@ import { useLocation } from \"react-router-dom\";\n import styled, { css, useTheme } from \"styled-components\";\n import breakpoint from \"styled-components-breakpoint\";\n import { depths, s } from \"@shared/styles\";\n+import { Avatar } from \"~/components/Avatar\";\n import Flex from \"~/components/Flex\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n import useMenuContext from \"~/hooks/useMenuContext\";\n@@ -13,7 +14,6 @@ import AccountMenu from \"~/menus/AccountMenu\";\n import { fadeOnDesktopBackgrounded } from \"~/styles\";\n import { fadeIn } from \"~/styles/animations\";\n import Desktop from \"~/utils/Desktop\";\n-import Avatar from \"../Avatar\";\n import NotificationIcon from \"../Notifications/NotificationIcon\";\n import NotificationsPopover from \"../Notifications/NotificationsPopover\";\n import ResizeBorder from \"./components/ResizeBorder\";\n\ndiff --git a/app/components/Sidebar/components/CollectionLink.tsx b/app/components/Sidebar/components/CollectionLink.tsx\nindex 9b1df54423be..f5ac4f49561a 100644\n--- a/app/components/Sidebar/components/CollectionLink.tsx\n+++ b/app/components/Sidebar/components/CollectionLink.tsx\n@@ -22,8 +22,8 @@ import CollectionMenu from \"~/menus/CollectionMenu\";\n import DropToImport from \"./DropToImport\";\n import EditableTitle, { RefHandle } from \"./EditableTitle\";\n import Relative from \"./Relative\";\n+import { SidebarContextType, useSidebarContext } from \"./SidebarContext\";\n import SidebarLink, { DragObject } from \"./SidebarLink\";\n-import { useStarredContext } from \"./StarredContext\";\n \n type Props = {\n   collection: Collection;\n@@ -48,7 +48,7 @@ const CollectionLink: React.FC<Props> = ({\n   const can = usePolicy(collection);\n   const { t } = useTranslation();\n   const history = useHistory();\n-  const inStarredSection = useStarredContext();\n+  const sidebarContext = useSidebarContext();\n   const editableTitleRef = React.useRef<RefHandle>(null);\n \n   const handleTitleChange = React.useCallback(\n@@ -116,78 +116,69 @@ const CollectionLink: React.FC<Props> = ({\n     }),\n   });\n \n-  const handleTitleEditing = React.useCallback((value: boolean) => {\n-    setIsEditing(value);\n-  }, []);\n-\n   const handlePrefetch = React.useCallback(() => {\n     void collection.fetchDocuments();\n   }, [collection]);\n \n   const context = useActionContext({\n     activeCollectionId: collection.id,\n-    inStarredSection,\n+    sidebarContext,\n   });\n \n   return (\n-    <>\n-      <Relative ref={drop}>\n-        <DropToImport collectionId={collection.id}>\n-          <SidebarLink\n-            to={{\n-              pathname: collection.path,\n-              state: { starred: inStarredSection },\n-            }}\n-            expanded={expanded}\n-            onDisclosureClick={onDisclosureClick}\n-            onClickIntent={handlePrefetch}\n-            icon={\n-              <CollectionIcon collection={collection} expanded={expanded} />\n-            }\n-            showActions={menuOpen}\n-            isActiveDrop={isOver && canDrop}\n-            isActive={(match, location: Location<{ starred?: boolean }>) =>\n-              !!match && location.state?.starred === inStarredSection\n-            }\n-            label={\n-              <EditableTitle\n-                title={collection.name}\n-                onSubmit={handleTitleChange}\n-                onEditing={handleTitleEditing}\n-                canUpdate={can.update}\n-                maxLength={CollectionValidation.maxNameLength}\n-                ref={editableTitleRef}\n-              />\n-            }\n-            exact={false}\n-            depth={0}\n-            menu={\n-              !isEditing &&\n-              !isDraggingAnyCollection && (\n-                <Fade>\n-                  <NudeButton\n-                    tooltip={{ content: t(\"New doc\"), delay: 500 }}\n-                    action={createDocument}\n-                    context={context}\n-                    hideOnActionDisabled\n-                  >\n-                    <PlusIcon />\n-                  </NudeButton>\n-                  <CollectionMenu\n-                    collection={collection}\n-                    onRename={() =>\n-                      editableTitleRef.current?.setIsEditing(true)\n-                    }\n-                    onOpen={handleMenuOpen}\n-                    onClose={handleMenuClose}\n-                  />\n-                </Fade>\n-              )\n-            }\n-          />\n-        </DropToImport>\n-      </Relative>\n-    </>\n+    <Relative ref={drop}>\n+      <DropToImport collectionId={collection.id}>\n+        <SidebarLink\n+          to={{\n+            pathname: collection.path,\n+            state: { sidebarContext },\n+          }}\n+          expanded={expanded}\n+          onDisclosureClick={onDisclosureClick}\n+          onClickIntent={handlePrefetch}\n+          icon={<CollectionIcon collection={collection} expanded={expanded} />}\n+          showActions={menuOpen}\n+          isActiveDrop={isOver && canDrop}\n+          isActive={(\n+            match,\n+            location: Location<{ sidebarContext?: SidebarContextType }>\n+          ) => !!match && location.state?.sidebarContext === sidebarContext}\n+          label={\n+            <EditableTitle\n+              title={collection.name}\n+              onSubmit={handleTitleChange}\n+              onEditing={setIsEditing}\n+              canUpdate={can.update}\n+              maxLength={CollectionValidation.maxNameLength}\n+              ref={editableTitleRef}\n+            />\n+          }\n+          exact={false}\n+          depth={0}\n+          menu={\n+            !isEditing &&\n+            !isDraggingAnyCollection && (\n+              <Fade>\n+                <NudeButton\n+                  tooltip={{ content: t(\"New doc\"), delay: 500 }}\n+                  action={createDocument}\n+                  context={context}\n+                  hideOnActionDisabled\n+                >\n+                  <PlusIcon />\n+                </NudeButton>\n+                <CollectionMenu\n+                  collection={collection}\n+                  onRename={() => editableTitleRef.current?.setIsEditing(true)}\n+                  onOpen={handleMenuOpen}\n+                  onClose={handleMenuClose}\n+                />\n+              </Fade>\n+            )\n+          }\n+        />\n+      </DropToImport>\n+    </Relative>\n   );\n };\n \n\ndiff --git a/app/components/Sidebar/components/Disclosure.tsx b/app/components/Sidebar/components/Disclosure.tsx\nindex 8cccfa33de32..880fded08153 100644\n--- a/app/components/Sidebar/components/Disclosure.tsx\n+++ b/app/components/Sidebar/components/Disclosure.tsx\n@@ -42,7 +42,7 @@ const Button = styled(NudeButton)<{ $root?: boolean }>`\n     props.$root &&\n     css`\n       opacity: 0;\n-      left: -16px;\n+      left: -18px;\n \n       &:hover {\n         opacity: 1;\n\ndiff --git a/app/components/Sidebar/components/DocumentLink.tsx b/app/components/Sidebar/components/DocumentLink.tsx\nindex f45aefc9f222..9db6a206c86a 100644\n--- a/app/components/Sidebar/components/DocumentLink.tsx\n+++ b/app/components/Sidebar/components/DocumentLink.tsx\n@@ -27,9 +27,8 @@ import DropToImport from \"./DropToImport\";\n import EditableTitle, { RefHandle } from \"./EditableTitle\";\n import Folder from \"./Folder\";\n import Relative from \"./Relative\";\n-import { useSharedContext } from \"./SharedContext\";\n+import { SidebarContextType, useSidebarContext } from \"./SidebarContext\";\n import SidebarLink, { DragObject } from \"./SidebarLink\";\n-import { useStarredContext } from \"./StarredContext\";\n \n type Props = {\n   node: NavigationNode;\n@@ -65,18 +64,20 @@ function InnerDocumentLink(\n   const { fetchChildDocuments } = documents;\n   const [isEditing, setIsEditing] = React.useState(false);\n   const editableTitleRef = React.useRef<RefHandle>(null);\n-  const inStarredSection = useStarredContext();\n-  const inSharedSection = useSharedContext();\n+  const sidebarContext = useSidebarContext();\n \n   React.useEffect(() => {\n-    if (isActiveDocument && (hasChildDocuments || inSharedSection)) {\n+    if (\n+      isActiveDocument &&\n+      (hasChildDocuments || sidebarContext !== \"collections\")\n+    ) {\n       void fetchChildDocuments(node.id);\n     }\n   }, [\n     fetchChildDocuments,\n     node.id,\n     hasChildDocuments,\n-    inSharedSection,\n+    sidebarContext,\n     isActiveDocument,\n   ]);\n \n@@ -338,7 +339,7 @@ function InnerDocumentLink(\n                   pathname: node.url,\n                   state: {\n                     title: node.title,\n-                    starred: inStarredSection,\n+                    sidebarContext,\n                   },\n                 }}\n                 icon={icon && <Icon value={icon} color={color} />}\n@@ -352,16 +353,25 @@ function InnerDocumentLink(\n                     ref={editableTitleRef}\n                   />\n                 }\n-                isActive={(match, location: Location<{ starred?: boolean }>) =>\n-                  ((document && location.pathname.endsWith(document.urlId)) ||\n-                    !!match) &&\n-                  location.state?.starred === inStarredSection\n-                }\n+                isActive={(\n+                  match,\n+                  location: Location<{\n+                    sidebarContext?: SidebarContextType;\n+                  }>\n+                ) => {\n+                  if (sidebarContext !== location.state?.sidebarContext) {\n+                    return false;\n+                  }\n+                  return (\n+                    (document && location.pathname.endsWith(document.urlId)) ||\n+                    !!match\n+                  );\n+                }}\n                 isActiveDrop={isOverReparent && canDropToReparent}\n                 depth={depth}\n                 exact={false}\n                 showActions={menuOpen}\n-                scrollIntoViewIfNeeded={!inStarredSection}\n+                scrollIntoViewIfNeeded={sidebarContext === \"collections\"}\n                 isDraft={isDraft}\n                 ref={ref}\n                 menu={\n\ndiff --git a/app/components/Sidebar/components/DraggableCollectionLink.tsx b/app/components/Sidebar/components/DraggableCollectionLink.tsx\nindex 2116a21b9f59..a4b3900c63ed 100644\n--- a/app/components/Sidebar/components/DraggableCollectionLink.tsx\n+++ b/app/components/Sidebar/components/DraggableCollectionLink.tsx\n@@ -3,17 +3,18 @@ import { observer } from \"mobx-react\";\n import * as React from \"react\";\n import { useDrop, useDrag, DropTargetMonitor } from \"react-dnd\";\n import { getEmptyImage } from \"react-dnd-html5-backend\";\n-import { useLocation } from \"react-router-dom\";\n import styled from \"styled-components\";\n import Collection from \"~/models/Collection\";\n import Document from \"~/models/Document\";\n import CollectionIcon from \"~/components/Icons/CollectionIcon\";\n import usePolicy from \"~/hooks/usePolicy\";\n import useStores from \"~/hooks/useStores\";\n+import { useLocationState } from \"../hooks/useLocationState\";\n import CollectionLink from \"./CollectionLink\";\n import CollectionLinkChildren from \"./CollectionLinkChildren\";\n import DropCursor from \"./DropCursor\";\n import Relative from \"./Relative\";\n+import { useSidebarContext } from \"./SidebarContext\";\n import { DragObject } from \"./SidebarLink\";\n \n type Props = {\n@@ -23,23 +24,18 @@ type Props = {\n   belowCollection: Collection | void;\n };\n \n-function useLocationStateStarred() {\n-  const location = useLocation<{\n-    starred?: boolean;\n-  }>();\n-  return location.state?.starred;\n-}\n-\n function DraggableCollectionLink({\n   collection,\n   activeDocument,\n   prefetchDocument,\n   belowCollection,\n }: Props) {\n-  const locationStateStarred = useLocationStateStarred();\n+  const locationSidebarContext = useLocationState();\n+  const sidebarContext = useSidebarContext();\n   const { ui, collections } = useStores();\n   const [expanded, setExpanded] = React.useState(\n-    collection.id === ui.activeCollectionId && !locationStateStarred\n+    collection.id === ui.activeCollectionId &&\n+      sidebarContext === locationSidebarContext\n   );\n   const can = usePolicy(collection);\n   const belowCollectionIndex = belowCollection ? belowCollection.index : null;\n@@ -86,10 +82,18 @@ function DraggableCollectionLink({\n   // If the current collection is active and relevant to the sidebar section we\n   // are in then expand it automatically\n   React.useEffect(() => {\n-    if (collection.id === ui.activeCollectionId && !locationStateStarred) {\n+    if (\n+      collection.id === ui.activeCollectionId &&\n+      sidebarContext === locationSidebarContext\n+    ) {\n       setExpanded(true);\n     }\n-  }, [collection.id, ui.activeCollectionId, locationStateStarred]);\n+  }, [\n+    collection.id,\n+    ui.activeCollectionId,\n+    sidebarContext,\n+    locationSidebarContext,\n+  ]);\n \n   const handleDisclosureClick = React.useCallback((ev) => {\n     ev?.preventDefault();\n\ndiff --git a/app/components/Sidebar/components/GroupLink.tsx b/app/components/Sidebar/components/GroupLink.tsx\nnew file mode 100644\nindex 000000000000..63f0b98810aa\n--- /dev/null\n+++ b/app/components/Sidebar/components/GroupLink.tsx\n@@ -0,0 +1,48 @@\n+import { observer } from \"mobx-react\";\n+import { GroupIcon } from \"outline-icons\";\n+import * as React from \"react\";\n+import Group from \"~/models/Group\";\n+import Folder from \"./Folder\";\n+import Relative from \"./Relative\";\n+import SharedWithMeLink from \"./SharedWithMeLink\";\n+import SidebarContext from \"./SidebarContext\";\n+import SidebarLink from \"./SidebarLink\";\n+\n+type Props = {\n+  /** The group to render */\n+  group: Group;\n+};\n+\n+const GroupLink: React.FC<Props> = ({ group }) => {\n+  const [expanded, setExpanded] = React.useState(false);\n+\n+  const handleDisclosureClick = React.useCallback((ev) => {\n+    ev?.preventDefault();\n+    setExpanded((e) => !e);\n+  }, []);\n+\n+  return (\n+    <Relative>\n+      <SidebarLink\n+        label={group.name}\n+        icon={<GroupIcon />}\n+        expanded={expanded}\n+        onClick={handleDisclosureClick}\n+        depth={0}\n+      />\n+      <SidebarContext.Provider value={group.id}>\n+        <Folder expanded={expanded}>\n+          {group.documentMemberships.map((membership) => (\n+            <SharedWithMeLink\n+              key={membership.id}\n+              membership={membership}\n+              depth={1}\n+            />\n+          ))}\n+        </Folder>\n+      </SidebarContext.Provider>\n+    </Relative>\n+  );\n+};\n+\n+export default observer(GroupLink);\n\ndiff --git a/app/components/Sidebar/components/SharedContext.ts b/app/components/Sidebar/components/SharedContext.ts\ndeleted file mode 100644\nindex 9391466f1e38..000000000000\n--- a/app/components/Sidebar/components/SharedContext.ts\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-import * as React from \"react\";\n-\n-const SharedContext = React.createContext<boolean | undefined>(undefined);\n-\n-export const useSharedContext = () => React.useContext(SharedContext);\n-\n-export default SharedContext;\n\ndiff --git a/app/components/Sidebar/components/SharedWithMe.tsx b/app/components/Sidebar/components/SharedWithMe.tsx\nindex 94b67c61360b..fa21adb01552 100644\n--- a/app/components/Sidebar/components/SharedWithMe.tsx\n+++ b/app/components/Sidebar/components/SharedWithMe.tsx\n@@ -4,6 +4,7 @@ import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { toast } from \"sonner\";\n import { Pagination } from \"@shared/constants\";\n+import GroupMembership from \"~/models/GroupMembership\";\n import UserMembership from \"~/models/UserMembership\";\n import DelayedMount from \"~/components/DelayedMount\";\n import Flex from \"~/components/Flex\";\n@@ -11,19 +12,22 @@ import useCurrentUser from \"~/hooks/useCurrentUser\";\n import usePaginatedRequest from \"~/hooks/usePaginatedRequest\";\n import useStores from \"~/hooks/useStores\";\n import DropCursor from \"./DropCursor\";\n+import GroupLink from \"./GroupLink\";\n import Header from \"./Header\";\n import PlaceholderCollections from \"./PlaceholderCollections\";\n import Relative from \"./Relative\";\n-import SharedContext from \"./SharedContext\";\n import SharedWithMeLink from \"./SharedWithMeLink\";\n+import SidebarContext from \"./SidebarContext\";\n import SidebarLink from \"./SidebarLink\";\n import { useDropToReorderUserMembership } from \"./useDragAndDrop\";\n \n function SharedWithMe() {\n-  const { userMemberships } = useStores();\n+  const { userMemberships, groupMemberships } = useStores();\n   const { t } = useTranslation();\n   const user = useCurrentUser();\n \n+  usePaginatedRequest<GroupMembership>(groupMemberships.fetchAll);\n+\n   const { loading, next, end, error, page } =\n     usePaginatedRequest<UserMembership>(userMemberships.fetchPage, {\n       limit: Pagination.sidebarLimit,\n@@ -31,7 +35,7 @@ function SharedWithMe() {\n \n   // Drop to reorder document\n   const [reorderMonitor, dropToReorderRef] = useDropToReorderUserMembership(\n-    () => fractionalIndex(null, user.memberships[0].index)\n+    () => fractionalIndex(null, user.documentMemberships[0].index)\n   );\n \n   React.useEffect(() => {\n@@ -40,14 +44,20 @@ function SharedWithMe() {\n     }\n   }, [error, t]);\n \n-  if (!user.memberships.length) {\n+  if (\n+    !user.documentMemberships.length &&\n+    !user.groupsWithDocumentMemberships.length\n+  ) {\n     return null;\n   }\n \n   return (\n-    <SharedContext.Provider value={true}>\n+    <SidebarContext.Provider value=\"shared\">\n       <Flex column>\n         <Header id=\"shared\" title={t(\"Shared with me\")}>\n+          {user.groupsWithDocumentMemberships.map((group) => (\n+            <GroupLink key={group.id} group={group} />\n+          ))}\n           <Relative>\n             {reorderMonitor.isDragging && (\n               <DropCursor\n@@ -56,13 +66,10 @@ function SharedWithMe() {\n                 position=\"top\"\n               />\n             )}\n-            {user.memberships\n+            {user.documentMemberships\n               .slice(0, page * Pagination.sidebarLimit)\n               .map((membership) => (\n-                <SharedWithMeLink\n-                  key={membership.id}\n-                  userMembership={membership}\n-                />\n+                <SharedWithMeLink key={membership.id} membership={membership} />\n               ))}\n             {!end && (\n               <SidebarLink\n@@ -82,7 +89,7 @@ function SharedWithMe() {\n           </Relative>\n         </Header>\n       </Flex>\n-    </SharedContext.Provider>\n+    </SidebarContext.Provider>\n   );\n }\n \n\ndiff --git a/app/components/Sidebar/components/SharedWithMeLink.tsx b/app/components/Sidebar/components/SharedWithMeLink.tsx\nindex 4b370c45644b..8f3e8e058d9b 100644\n--- a/app/components/Sidebar/components/SharedWithMeLink.tsx\n+++ b/app/components/Sidebar/components/SharedWithMeLink.tsx\n@@ -1,44 +1,61 @@\n import fractionalIndex from \"fractional-index\";\n+import { Location } from \"history\";\n import { observer } from \"mobx-react\";\n import * as React from \"react\";\n import styled from \"styled-components\";\n import { IconType, NotificationEventType } from \"@shared/types\";\n import { determineIconType } from \"@shared/utils/icon\";\n+import GroupMembership from \"~/models/GroupMembership\";\n import UserMembership from \"~/models/UserMembership\";\n import Fade from \"~/components/Fade\";\n import useBoolean from \"~/hooks/useBoolean\";\n import useStores from \"~/hooks/useStores\";\n import DocumentMenu from \"~/menus/DocumentMenu\";\n+import { useLocationState } from \"../hooks/useLocationState\";\n import DocumentLink from \"./DocumentLink\";\n import DropCursor from \"./DropCursor\";\n import Folder from \"./Folder\";\n import Relative from \"./Relative\";\n+import { useSidebarContext, type SidebarContextType } from \"./SidebarContext\";\n import SidebarLink from \"./SidebarLink\";\n import {\n-  useDragUserMembership,\n+  useDragMembership,\n   useDropToReorderUserMembership,\n } from \"./useDragAndDrop\";\n import { useSidebarLabelAndIcon } from \"./useSidebarLabelAndIcon\";\n \n type Props = {\n-  userMembership: UserMembership;\n+  membership: UserMembership | GroupMembership;\n+  depth?: number;\n };\n \n-function SharedWithMeLink({ userMembership }: Props) {\n+function SharedWithMeLink({ membership, depth = 0 }: Props) {\n   const { ui, collections, documents } = useStores();\n   const { fetchChildDocuments } = documents;\n   const [menuOpen, handleMenuOpen, handleMenuClose] = useBoolean();\n-  const { documentId } = userMembership;\n+  const { documentId } = membership;\n   const isActiveDocument = documentId === ui.activeDocumentId;\n+  const locationSidebarContext = useLocationState();\n+  const sidebarContext = useSidebarContext();\n+\n   const [expanded, setExpanded] = React.useState(\n-    userMembership.documentId === ui.activeDocumentId\n+    membership.documentId === ui.activeDocumentId &&\n+      locationSidebarContext === sidebarContext\n   );\n \n   React.useEffect(() => {\n-    if (userMembership.documentId === ui.activeDocumentId) {\n+    if (\n+      membership.documentId === ui.activeDocumentId &&\n+      locationSidebarContext === sidebarContext\n+    ) {\n       setExpanded(true);\n     }\n-  }, [userMembership.documentId, ui.activeDocumentId]);\n+  }, [\n+    membership.documentId,\n+    ui.activeDocumentId,\n+    sidebarContext,\n+    locationSidebarContext,\n+  ]);\n \n   React.useEffect(() => {\n     if (documentId) {\n@@ -47,10 +64,10 @@ function SharedWithMeLink({ userMembership }: Props) {\n   }, [documentId, documents]);\n \n   React.useEffect(() => {\n-    if (isActiveDocument && userMembership.documentId) {\n-      void fetchChildDocuments(userMembership.documentId);\n+    if (isActiveDocument && membership.documentId) {\n+      void fetchChildDocuments(membership.documentId);\n     }\n-  }, [fetchChildDocuments, isActiveDocument, userMembership.documentId]);\n+  }, [fetchChildDocuments, isActiveDocument, membership.documentId]);\n \n   const handleDisclosureClick = React.useCallback(\n     (ev: React.MouseEvent<HTMLButtonElement>) => {\n@@ -61,12 +78,15 @@ function SharedWithMeLink({ userMembership }: Props) {\n     []\n   );\n \n-  const { icon } = useSidebarLabelAndIcon(userMembership);\n-  const [{ isDragging }, draggableRef] = useDragUserMembership(userMembership);\n+  const { icon } = useSidebarLabelAndIcon(membership);\n+  const [{ isDragging }, draggableRef] = useDragMembership(membership);\n \n   const getIndex = () => {\n-    const next = userMembership?.next();\n-    return fractionalIndex(userMembership?.index || null, next?.index || null);\n+    if (membership instanceof UserMembership) {\n+      const next = membership?.next();\n+      return fractionalIndex(membership?.index || null, next?.index || null);\n+    }\n+    return \"\";\n   };\n   const [reorderMonitor, dropToReorderRef] =\n     useDropToReorderUserMembership(getIndex);\n@@ -95,19 +115,23 @@ function SharedWithMeLink({ userMembership }: Props) {\n     return (\n       <>\n         <Draggable\n-          key={userMembership.id}\n+          key={membership.id}\n           ref={draggableRef}\n           $isDragging={isDragging}\n         >\n           <SidebarLink\n-            depth={0}\n+            depth={depth}\n             to={{\n               pathname: document.path,\n-              state: { starred: true },\n+              state: { sidebarContext },\n             }}\n             expanded={hasChildDocuments && !isDragging ? expanded : undefined}\n             onDisclosureClick={handleDisclosureClick}\n             icon={icon}\n+            isActive={(\n+              match,\n+              location: Location<{ sidebarContext?: SidebarContextType }>\n+            ) => !!match && location.state?.sidebarContext === sidebarContext}\n             label={label}\n             exact={false}\n             unreadBadge={\n\ndiff --git a/app/components/Sidebar/components/SidebarContext.ts b/app/components/Sidebar/components/SidebarContext.ts\nnew file mode 100644\nindex 000000000000..ba8397d2e2e6\n--- /dev/null\n+++ b/app/components/Sidebar/components/SidebarContext.ts\n@@ -0,0 +1,9 @@\n+import * as React from \"react\";\n+\n+export type SidebarContextType = \"collections\" | \"starred\" | string | undefined;\n+\n+const SidebarContext = React.createContext<SidebarContextType>(undefined);\n+\n+export const useSidebarContext = () => React.useContext(SidebarContext);\n+\n+export default SidebarContext;\n\ndiff --git a/app/components/Sidebar/components/Starred.tsx b/app/components/Sidebar/components/Starred.tsx\nindex 544897027f1f..3385aa4478c4 100644\n--- a/app/components/Sidebar/components/Starred.tsx\n+++ b/app/components/Sidebar/components/Starred.tsx\n@@ -11,8 +11,8 @@ import DropCursor from \"./DropCursor\";\n import Header from \"./Header\";\n import PlaceholderCollections from \"./PlaceholderCollections\";\n import Relative from \"./Relative\";\n+import SidebarContext from \"./SidebarContext\";\n import SidebarLink from \"./SidebarLink\";\n-import StarredContext from \"./StarredContext\";\n import StarredLink from \"./StarredLink\";\n import { useDropToCreateStar, useDropToReorderStar } from \"./useDragAndDrop\";\n \n@@ -39,7 +39,7 @@ function Starred() {\n   }\n \n   return (\n-    <StarredContext.Provider value={true}>\n+    <SidebarContext.Provider value=\"starred\">\n       <Flex column>\n         <Header id=\"starred\" title={t(\"Starred\")}>\n           <Relative>\n@@ -80,7 +80,7 @@ function Starred() {\n           </Relative>\n         </Header>\n       </Flex>\n-    </StarredContext.Provider>\n+    </SidebarContext.Provider>\n   );\n }\n \n\ndiff --git a/app/components/Sidebar/components/StarredContext.ts b/app/components/Sidebar/components/StarredContext.ts\ndeleted file mode 100644\nindex 44d9f2e0f77b..000000000000\n--- a/app/components/Sidebar/components/StarredContext.ts\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-import * as React from \"react\";\n-\n-const StarredContext = React.createContext<boolean | undefined>(undefined);\n-\n-export const useStarredContext = () => React.useContext(StarredContext);\n-\n-export default StarredContext;\n\ndiff --git a/app/components/Sidebar/components/StarredLink.tsx b/app/components/Sidebar/components/StarredLink.tsx\nindex ee64fc63e60b..3b92775f83be 100644\n--- a/app/components/Sidebar/components/StarredLink.tsx\n+++ b/app/components/Sidebar/components/StarredLink.tsx\n@@ -4,19 +4,23 @@ import { observer } from \"mobx-react\";\n import { StarredIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useEffect, useState } from \"react\";\n-import { useLocation } from \"react-router-dom\";\n import styled, { useTheme } from \"styled-components\";\n import Star from \"~/models/Star\";\n import Fade from \"~/components/Fade\";\n import useBoolean from \"~/hooks/useBoolean\";\n import useStores from \"~/hooks/useStores\";\n import DocumentMenu from \"~/menus/DocumentMenu\";\n+import { useLocationState } from \"../hooks/useLocationState\";\n import CollectionLink from \"./CollectionLink\";\n import CollectionLinkChildren from \"./CollectionLinkChildren\";\n import DocumentLink from \"./DocumentLink\";\n import DropCursor from \"./DropCursor\";\n import Folder from \"./Folder\";\n import Relative from \"./Relative\";\n+import SidebarContext, {\n+  SidebarContextType,\n+  useSidebarContext,\n+} from \"./SidebarContext\";\n import SidebarLink from \"./SidebarLink\";\n import {\n   useDragStar,\n@@ -29,29 +33,32 @@ type Props = {\n   star: Star;\n };\n \n-function useLocationStateStarred() {\n-  const location = useLocation<{\n-    starred?: boolean;\n-  }>();\n-  return location.state?.starred;\n-}\n-\n function StarredLink({ star }: Props) {\n   const theme = useTheme();\n   const { ui, collections, documents } = useStores();\n   const [menuOpen, handleMenuOpen, handleMenuClose] = useBoolean();\n   const { documentId, collectionId } = star;\n   const collection = collections.get(collectionId);\n-  const locationStateStarred = useLocationStateStarred();\n+  const locationSidebarContext = useLocationState();\n+  const sidebarContext = useSidebarContext();\n   const [expanded, setExpanded] = useState(\n-    star.collectionId === ui.activeCollectionId && !!locationStateStarred\n+    star.collectionId === ui.activeCollectionId &&\n+      sidebarContext === locationSidebarContext\n   );\n \n   React.useEffect(() => {\n-    if (star.collectionId === ui.activeCollectionId && locationStateStarred) {\n+    if (\n+      star.collectionId === ui.activeCollectionId &&\n+      sidebarContext === locationSidebarContext\n+    ) {\n       setExpanded(true);\n     }\n-  }, [star.collectionId, ui.activeCollectionId, locationStateStarred]);\n+  }, [\n+    star.collectionId,\n+    ui.activeCollectionId,\n+    sidebarContext,\n+    locationSidebarContext,\n+  ]);\n \n   useEffect(() => {\n     if (documentId) {\n@@ -120,14 +127,15 @@ function StarredLink({ star }: Props) {\n             depth={0}\n             to={{\n               pathname: document.url,\n-              state: { starred: true },\n+              state: { sidebarContext },\n             }}\n             expanded={hasChildDocuments && !isDragging ? expanded : undefined}\n             onDisclosureClick={handleDisclosureClick}\n             icon={icon}\n-            isActive={(match, location: Location<{ starred?: boolean }>) =>\n-              !!match && location.state?.starred === true\n-            }\n+            isActive={(\n+              match,\n+              location: Location<{ sidebarContext?: SidebarContextType }>\n+            ) => !!match && location.state?.sidebarContext === sidebarContext}\n             label={label}\n             exact={false}\n             showActions={menuOpen}\n@@ -144,22 +152,24 @@ function StarredLink({ star }: Props) {\n             }\n           />\n         </Draggable>\n-        <Relative>\n-          <Folder expanded={displayChildDocuments}>\n-            {childDocuments.map((node, index) => (\n-              <DocumentLink\n-                key={node.id}\n-                node={node}\n-                collection={collection}\n-                activeDocument={documents.active}\n-                isDraft={node.isDraft}\n-                depth={2}\n-                index={index}\n-              />\n-            ))}\n-          </Folder>\n-          {cursor}\n-        </Relative>\n+        <SidebarContext.Provider value={document.id}>\n+          <Relative>\n+            <Folder expanded={displayChildDocuments}>\n+              {childDocuments.map((node, index) => (\n+                <DocumentLink\n+                  key={node.id}\n+                  node={node}\n+                  collection={collection}\n+                  activeDocument={documents.active}\n+                  isDraft={node.isDraft}\n+                  depth={2}\n+                  index={index}\n+                />\n+              ))}\n+            </Folder>\n+            {cursor}\n+          </Relative>\n+        </SidebarContext.Provider>\n       </>\n     );\n   }\n@@ -176,13 +186,15 @@ function StarredLink({ star }: Props) {\n             isDraggingAnyCollection={reorderStarMonitor.isDragging}\n           />\n         </Draggable>\n-        <Relative>\n-          <CollectionLinkChildren\n-            collection={collection}\n-            expanded={displayChildDocuments}\n-          />\n-          {cursor}\n-        </Relative>\n+        <SidebarContext.Provider value={collection.id}>\n+          <Relative>\n+            <CollectionLinkChildren\n+              collection={collection}\n+              expanded={displayChildDocuments}\n+            />\n+            {cursor}\n+          </Relative>\n+        </SidebarContext.Provider>\n       </>\n     );\n   }\n\ndiff --git a/app/components/Sidebar/components/useDragAndDrop.tsx b/app/components/Sidebar/components/useDragAndDrop.tsx\nindex f0f92c275e8c..ac804018063c 100644\n--- a/app/components/Sidebar/components/useDragAndDrop.tsx\n+++ b/app/components/Sidebar/components/useDragAndDrop.tsx\n@@ -4,6 +4,7 @@ import * as React from \"react\";\n import { ConnectDragSource, useDrag, useDrop } from \"react-dnd\";\n import { getEmptyImage } from \"react-dnd-html5-backend\";\n import { useTheme } from \"styled-components\";\n+import GroupMembership from \"~/models/GroupMembership\";\n import Star from \"~/models/Star\";\n import UserMembership from \"~/models/UserMembership\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n@@ -90,11 +91,16 @@ export function useDropToReorderStar(getIndex?: () => string) {\n   });\n }\n \n-export function useDragUserMembership(\n-  userMembership: UserMembership\n+/**\n+ * Hook for shared logic that allows dragging user memberships to reorder\n+ *\n+ * @param membership The UserMembership or GroupMembership model to drag.\n+ */\n+export function useDragMembership(\n+  membership: UserMembership | GroupMembership\n ): [{ isDragging: boolean }, ConnectDragSource] {\n-  const id = userMembership.id;\n-  const { label: title, icon } = useSidebarLabelAndIcon(userMembership);\n+  const id = membership.id;\n+  const { label: title, icon } = useSidebarLabelAndIcon(membership);\n \n   const [{ isDragging }, draggableRef, preview] = useDrag({\n     type: \"userMembership\",\n@@ -106,7 +112,7 @@ export function useDragUserMembership(\n     collect: (monitor) => ({\n       isDragging: !!monitor.isDragging(),\n     }),\n-    canDrag: () => true,\n+    canDrag: () => membership instanceof UserMembership,\n   });\n \n   React.useEffect(() => {\n@@ -130,7 +136,9 @@ export function useDropToReorderUserMembership(getIndex?: () => string) {\n     drop: async (item: DragObject) => {\n       const userMembership = userMemberships.get(item.id);\n       void userMembership?.save({\n-        index: getIndex?.() ?? fractionalIndex(null, user.memberships[0].index),\n+        index:\n+          getIndex?.() ??\n+          fractionalIndex(null, user.documentMemberships[0].index),\n       });\n     },\n     collect: (monitor) => ({\n\ndiff --git a/app/components/Sidebar/hooks/useLocationState.ts b/app/components/Sidebar/hooks/useLocationState.ts\nnew file mode 100644\nindex 000000000000..f79f79e34ab0\n--- /dev/null\n+++ b/app/components/Sidebar/hooks/useLocationState.ts\n@@ -0,0 +1,12 @@\n+import { useLocation } from \"react-router-dom\";\n+import { SidebarContextType } from \"../components/SidebarContext\";\n+\n+/**\n+ * Hook to retrieve the sidebar context from the current location state.\n+ */\n+export function useLocationState() {\n+  const location = useLocation<{\n+    sidebarContext?: SidebarContextType;\n+  }>();\n+  return location.state?.sidebarContext;\n+}\n\ndiff --git a/app/components/TeamLogo.ts b/app/components/TeamLogo.ts\nindex 3c51c32dd975..baba4b34ac5a 100644\n--- a/app/components/TeamLogo.ts\n+++ b/app/components/TeamLogo.ts\n@@ -1,6 +1,6 @@\n import styled from \"styled-components\";\n import { s } from \"@shared/styles\";\n-import Avatar from \"./Avatar\";\n+import { Avatar } from \"./Avatar\";\n \n const TeamLogo = styled(Avatar)`\n   border-radius: 4px;\n\ndiff --git a/app/components/TemplatizeDialog/SelectLocation.tsx b/app/components/TemplatizeDialog/SelectLocation.tsx\nindex b7efa39f1a33..25666aa751d8 100644\n--- a/app/components/TemplatizeDialog/SelectLocation.tsx\n+++ b/app/components/TemplatizeDialog/SelectLocation.tsx\n@@ -2,7 +2,7 @@ import { observer } from \"mobx-react\";\n import React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { toast } from \"sonner\";\n-import { AvatarSize } from \"~/components/Avatar/Avatar\";\n+import { AvatarSize } from \"~/components/Avatar\";\n import CollectionIcon from \"~/components/Icons/CollectionIcon\";\n import InputSelect, { Option } from \"~/components/InputSelect\";\n import TeamLogo from \"~/components/TeamLogo\";\n\ndiff --git a/app/components/WebsocketProvider.tsx b/app/components/WebsocketProvider.tsx\nindex fd665eac55d5..0f9684e7f199 100644\n--- a/app/components/WebsocketProvider.tsx\n+++ b/app/components/WebsocketProvider.tsx\n@@ -263,42 +263,77 @@ class WebsocketProvider extends React.Component<Props> {\n       }\n     );\n \n-    this.socket.on(\"documents.add_user\", async (event: UserMembership) => {\n-      userMemberships.add(event);\n-\n-      // Any existing child policies are now invalid\n-      if (event.userId === currentUserId) {\n-        const document = documents.get(event.documentId!);\n-        if (document) {\n-          document.childDocuments.forEach((childDocument) => {\n-            policies.remove(childDocument.id);\n-          });\n+    this.socket.on(\n+      \"documents.add_user\",\n+      async (event: PartialWithId<UserMembership>) => {\n+        userMemberships.add(event);\n+\n+        // Any existing child policies are now invalid\n+        if (event.userId === currentUserId) {\n+          const document = documents.get(event.documentId!);\n+          if (document) {\n+            document.childDocuments.forEach((childDocument) => {\n+              policies.remove(childDocument.id);\n+            });\n+          }\n         }\n+\n+        await documents.fetch(event.documentId!, {\n+          force: event.userId === currentUserId,\n+        });\n       }\n+    );\n \n-      await documents.fetch(event.documentId!, {\n-        force: event.userId === currentUserId,\n-      });\n-    });\n+    this.socket.on(\n+      \"documents.remove_user\",\n+      (event: PartialWithId<UserMembership>) => {\n+        userMemberships.remove(event.id);\n+\n+        // Any existing child policies are now invalid\n+        if (event.userId === currentUserId) {\n+          const document = documents.get(event.documentId!);\n+          if (document) {\n+            document.childDocuments.forEach((childDocument) => {\n+              policies.remove(childDocument.id);\n+            });\n+          }\n+        }\n \n-    this.socket.on(\"documents.remove_user\", (event: UserMembership) => {\n-      userMemberships.remove(event.id);\n+        const policy = policies.get(event.documentId!);\n+        if (policy && policy.abilities.read === false) {\n+          documents.remove(event.documentId!);\n+        }\n+      }\n+    );\n \n-      // Any existing child policies are now invalid\n-      if (event.userId === currentUserId) {\n-        const document = documents.get(event.documentId!);\n-        if (document) {\n-          document.childDocuments.forEach((childDocument) => {\n-            policies.remove(childDocument.id);\n-          });\n+    this.socket.on(\n+      \"documents.add_group\",\n+      (event: PartialWithId<GroupMembership>) => {\n+        groupMemberships.add(event);\n+\n+        const group = groups.get(event.groupId!);\n+\n+        // Any existing child policies are now invalid\n+        if (\n+          currentUserId &&\n+          group?.users.map((u) => u.id).includes(currentUserId)\n+        ) {\n+          const document = documents.get(event.documentId!);\n+          if (document) {\n+            document.childDocuments.forEach((childDocument) => {\n+              policies.remove(childDocument.id);\n+            });\n+          }\n         }\n       }\n+    );\n \n-      const policy = policies.get(event.documentId!);\n-      if (policy && policy.abilities.read === false) {\n-        documents.remove(event.documentId!);\n+    this.socket.on(\n+      \"documents.remove_group\",\n+      (event: PartialWithId<GroupMembership>) => {\n+        groupMemberships.remove(event.id);\n       }\n-    });\n+    );\n \n     this.socket.on(\"comments.create\", (event: PartialWithId<Comment>) => {\n       comments.add(event);\n@@ -328,8 +363,11 @@ class WebsocketProvider extends React.Component<Props> {\n       groupUsers.add(event);\n     });\n \n-    this.socket.on(\"groups.remove_user\", (event: GroupUser) => {\n-      groupUsers.removeAll({ groupId: event.groupId, userId: event.userId });\n+    this.socket.on(\"groups.remove_user\", (event: PartialWithId<GroupUser>) => {\n+      groupUsers.removeAll({\n+        groupId: event.groupId,\n+        userId: event.userId,\n+      });\n     });\n \n     this.socket.on(\"collections.create\", (event: PartialWithId<Collection>) => {\n\ndiff --git a/app/editor/components/MentionMenu.tsx b/app/editor/components/MentionMenu.tsx\nindex dc90d77fd113..84319ad4031f 100644\n--- a/app/editor/components/MentionMenu.tsx\n+++ b/app/editor/components/MentionMenu.tsx\n@@ -7,8 +7,7 @@ import { MenuItem } from \"@shared/editor/types\";\n import { MentionType } from \"@shared/types\";\n import parseDocumentSlug from \"@shared/utils/parseDocumentSlug\";\n import User from \"~/models/User\";\n-import Avatar from \"~/components/Avatar\";\n-import { AvatarSize } from \"~/components/Avatar/Avatar\";\n+import { Avatar, AvatarSize } from \"~/components/Avatar\";\n import Flex from \"~/components/Flex\";\n import useRequest from \"~/hooks/useRequest\";\n import useStores from \"~/hooks/useStores\";\n\ndiff --git a/app/hooks/useTemplateActions.tsx b/app/hooks/useTemplateActions.tsx\nindex 273f151998cc..2bad996d8329 100644\n--- a/app/hooks/useTemplateActions.tsx\n+++ b/app/hooks/useTemplateActions.tsx\n@@ -27,13 +27,13 @@ const useTemplatesActions = () => {\n             <NewDocumentIcon />\n           ),\n           keywords: \"create\",\n-          perform: ({ activeCollectionId, inStarredSection }) =>\n+          perform: ({ activeCollectionId, sidebarContext }) =>\n             history.push(\n               newDocumentPath(item.collectionId ?? activeCollectionId, {\n                 templateId: item.id,\n               }),\n               {\n-                starred: inStarredSection,\n+                sidebarContext,\n               }\n             ),\n         })\n\ndiff --git a/app/models/Collection.ts b/app/models/Collection.ts\nindex a51107c97823..4b582899b02e 100644\n--- a/app/models/Collection.ts\n+++ b/app/models/Collection.ts\n@@ -12,6 +12,7 @@ import type CollectionsStore from \"~/stores/CollectionsStore\";\n import Document from \"~/models/Document\";\n import ParanoidModel from \"~/models/base/ParanoidModel\";\n import { client } from \"~/utils/ApiClient\";\n+import User from \"./User\";\n import Field from \"./decorators/Field\";\n import { AfterChange } from \"./decorators/Lifecycle\";\n \n@@ -176,6 +177,19 @@ export default class Collection extends ParanoidModel {\n     return this.url;\n   }\n \n+  /**\n+   * Returns users that have been individually given access to the collection.\n+   *\n+   * @returns A list of users that have been given access to the collection.\n+   */\n+  @computed\n+  get members(): User[] {\n+    return this.store.rootStore.memberships.orderedData\n+      .filter((m) => m.collectionId === this.id)\n+      .map((m) => m.user)\n+      .filter(Boolean);\n+  }\n+\n   fetchDocuments = async (options?: { force: boolean }) => {\n     if (this.isFetching) {\n       return;\n\ndiff --git a/app/models/Document.ts b/app/models/Document.ts\nindex 651ab075c4a9..aa072ab6681f 100644\n--- a/app/models/Document.ts\n+++ b/app/models/Document.ts\n@@ -175,6 +175,9 @@ export default class Document extends ParanoidModel {\n   @observable\n   parentDocumentId: string | undefined;\n \n+  @Relation(() => Document)\n+  parentDocument?: Document;\n+\n   @observable\n   collaboratorIds: string[];\n \n@@ -376,9 +379,26 @@ export default class Document extends ParanoidModel {\n     return floor((this.tasks.completed / this.tasks.total) * 100);\n   }\n \n+  /**\n+   * Returns the path to the document, using the collection structure if available.\n+   * otherwise if we're viewing a shared document we can iterate up the parentDocument tree.\n+   *\n+   * @returns path to the document\n+   */\n   @computed\n   get pathTo() {\n-    return this.collection?.pathToDocument(this.id) ?? [];\n+    if (this.collection?.documents) {\n+      return this.collection.pathToDocument(this.id);\n+    }\n+\n+    // find root parent document we have access to\n+    const path: Document[] = [this];\n+\n+    while (path[0]?.parentDocument) {\n+      path.unshift(path[0].parentDocument);\n+    }\n+\n+    return path.map((item) => item.asNavigationNode);\n   }\n \n   @computed\n@@ -582,6 +602,8 @@ export default class Document extends ParanoidModel {\n     return {\n       id: this.id,\n       title: this.title,\n+      color: this.color ?? undefined,\n+      icon: this.icon ?? undefined,\n       children: this.childDocuments.map((doc) => doc.asNavigationNode),\n       url: this.url,\n       isDraft: this.isDraft,\n\ndiff --git a/app/models/Group.ts b/app/models/Group.ts\nindex 0e62f408553f..fa756fdcc7ac 100644\n--- a/app/models/Group.ts\n+++ b/app/models/Group.ts\n@@ -1,4 +1,5 @@\n-import { observable } from \"mobx\";\n+import { computed, observable } from \"mobx\";\n+import GroupMembership from \"./GroupMembership\";\n import Model from \"./base/Model\";\n import Field from \"./decorators/Field\";\n \n@@ -15,6 +16,46 @@ class Group extends Model {\n \n   @observable\n   memberCount: number;\n+\n+  /**\n+   * Returns the users that are members of this group.\n+   */\n+  @computed\n+  get users() {\n+    const { users } = this.store.rootStore;\n+    return users.inGroup(this.id);\n+  }\n+\n+  /**\n+   * Returns the direct memberships that this group has to documents. Documents that the current\n+   * user already has access to through a collection and trashed documents are not included.\n+   *\n+   * @returns A list of group memberships\n+   */\n+  @computed\n+  get documentMemberships(): GroupMembership[] {\n+    const { groupMemberships, groupUsers, documents, policies, auth } =\n+      this.store.rootStore;\n+\n+    return groupMemberships.orderedData\n+      .filter((groupMembership) =>\n+        groupUsers.orderedData.some(\n+          (groupUser) =>\n+            groupUser.groupId === groupMembership.groupId &&\n+            groupUser.userId === auth.user?.id\n+        )\n+      )\n+      .filter(\n+        (m) => m.groupId === this.id && m.sourceId === null && m.documentId\n+      )\n+      .filter((m) => {\n+        const document = documents.get(m.documentId!);\n+        const policy = document?.collectionId\n+          ? policies.get(document.collectionId)\n+          : undefined;\n+        return !policy?.abilities?.readDocument && !document?.isDeleted;\n+      });\n+  }\n }\n \n export default Group;\n\ndiff --git a/app/models/GroupMembership.ts b/app/models/GroupMembership.ts\nindex fded849b51da..e9ff597c41f5 100644\n--- a/app/models/GroupMembership.ts\n+++ b/app/models/GroupMembership.ts\n@@ -34,6 +34,13 @@ class GroupMembership extends Model {\n   @Relation(() => Collection, { onDelete: \"cascade\" })\n   collection: Collection | undefined;\n \n+  /** The source ID points to the root membership from which this inherits */\n+  sourceId?: string;\n+\n+  /** The source points to the root membership from which this inherits */\n+  @Relation(() => GroupMembership, { onDelete: \"cascade\" })\n+  source?: GroupMembership;\n+\n   /** The permission level granted to the group. */\n   @observable\n   permission: CollectionPermission | DocumentPermission;\n\ndiff --git a/app/models/User.ts b/app/models/User.ts\nindex 08c967a2f6d3..175486ea5dc0 100644\n--- a/app/models/User.ts\n+++ b/app/models/User.ts\n@@ -13,6 +13,7 @@ import {\n import type { NotificationSettings } from \"@shared/types\";\n import { client } from \"~/utils/ApiClient\";\n import Document from \"./Document\";\n+import Group from \"./Group\";\n import UserMembership from \"./UserMembership\";\n import ParanoidModel from \"./base/ParanoidModel\";\n import Field from \"./decorators/Field\";\n@@ -127,21 +128,40 @@ class User extends ParanoidModel {\n     );\n   }\n \n+  /**\n+   * Returns the direct memberships that this user has to documents. Documents that the\n+   * user already has access to through a collection and trashed documents are not included.\n+   *\n+   * @returns A list of user memberships\n+   */\n   @computed\n-  get memberships(): UserMembership[] {\n-    return this.store.rootStore.userMemberships.orderedData\n+  get documentMemberships(): UserMembership[] {\n+    const { userMemberships, documents, policies } = this.store.rootStore;\n+    return userMemberships.orderedData\n       .filter(\n         (m) => m.userId === this.id && m.sourceId === null && m.documentId\n       )\n       .filter((m) => {\n-        const document = this.store.rootStore.documents.get(m.documentId!);\n+        const document = documents.get(m.documentId!);\n         const policy = document?.collectionId\n-          ? this.store.rootStore.policies.get(document.collectionId)\n+          ? policies.get(document.collectionId)\n           : undefined;\n         return !policy?.abilities?.readDocument && !document?.isDeleted;\n       });\n   }\n \n+  @computed\n+  get groupsWithDocumentMemberships() {\n+    const { groups, groupUsers } = this.store.rootStore;\n+\n+    return groupUsers.orderedData\n+      .filter((groupUser) => groupUser.userId === this.id)\n+      .map((groupUser) => groups.get(groupUser.groupId))\n+      .filter(Boolean)\n+      .filter((group) => group && group.documentMemberships.length > 0)\n+      .sort((a, b) => a!.name.localeCompare(b!.name)) as Group[];\n+  }\n+\n   /**\n    * Returns the current preference for the given notification event type taking\n    * into account the default system value.\n\ndiff --git a/app/scenes/Collection/components/MembershipPreview.tsx b/app/scenes/Collection/components/MembershipPreview.tsx\nindex af2ac490b737..ce288e6769df 100644\n--- a/app/scenes/Collection/components/MembershipPreview.tsx\n+++ b/app/scenes/Collection/components/MembershipPreview.tsx\n@@ -4,8 +4,7 @@ import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { PAGINATION_SYMBOL } from \"~/stores/base/Store\";\n import Collection from \"~/models/Collection\";\n-import Avatar from \"~/components/Avatar\";\n-import { AvatarSize } from \"~/components/Avatar/Avatar\";\n+import { Avatar, AvatarSize } from \"~/components/Avatar\";\n import Facepile from \"~/components/Facepile\";\n import Fade from \"~/components/Fade\";\n import NudeButton from \"~/components/NudeButton\";\n\ndiff --git a/app/scenes/Document/components/CommentForm.tsx b/app/scenes/Document/components/CommentForm.tsx\nindex e1f82d6bfb88..de958150705b 100644\n--- a/app/scenes/Document/components/CommentForm.tsx\n+++ b/app/scenes/Document/components/CommentForm.tsx\n@@ -12,7 +12,7 @@ import { ProsemirrorData } from \"@shared/types\";\n import { getEventFiles } from \"@shared/utils/files\";\n import { AttachmentValidation, CommentValidation } from \"@shared/validations\";\n import Comment from \"~/models/Comment\";\n-import Avatar from \"~/components/Avatar\";\n+import { Avatar } from \"~/components/Avatar\";\n import ButtonSmall from \"~/components/ButtonSmall\";\n import { useDocumentContext } from \"~/components/DocumentContext\";\n import Flex from \"~/components/Flex\";\n\ndiff --git a/app/scenes/Document/components/CommentThread.tsx b/app/scenes/Document/components/CommentThread.tsx\nindex 4269e4b077e7..2f602cf60d8e 100644\n--- a/app/scenes/Document/components/CommentThread.tsx\n+++ b/app/scenes/Document/components/CommentThread.tsx\n@@ -10,7 +10,7 @@ import { s } from \"@shared/styles\";\n import { ProsemirrorData } from \"@shared/types\";\n import Comment from \"~/models/Comment\";\n import Document from \"~/models/Document\";\n-import Avatar from \"~/components/Avatar\";\n+import { Avatar } from \"~/components/Avatar\";\n import { useDocumentContext } from \"~/components/DocumentContext\";\n import Fade from \"~/components/Fade\";\n import Flex from \"~/components/Flex\";\n\ndiff --git a/app/scenes/Document/components/CommentThreadItem.tsx b/app/scenes/Document/components/CommentThreadItem.tsx\nindex ab332fefc9f7..5c463b680367 100644\n--- a/app/scenes/Document/components/CommentThreadItem.tsx\n+++ b/app/scenes/Document/components/CommentThreadItem.tsx\n@@ -13,7 +13,7 @@ import { ProsemirrorData } from \"@shared/types\";\n import { dateToRelative } from \"@shared/utils/date\";\n import { Minute } from \"@shared/utils/time\";\n import Comment from \"~/models/Comment\";\n-import Avatar from \"~/components/Avatar\";\n+import { Avatar } from \"~/components/Avatar\";\n import ButtonSmall from \"~/components/ButtonSmall\";\n import Flex from \"~/components/Flex\";\n import Text from \"~/components/Text\";\n\ndiff --git a/app/scenes/Document/components/Insights.tsx b/app/scenes/Document/components/Insights.tsx\nindex 156178030e83..c4703cfdc715 100644\n--- a/app/scenes/Document/components/Insights.tsx\n+++ b/app/scenes/Document/components/Insights.tsx\n@@ -7,7 +7,7 @@ import styled from \"styled-components\";\n import { s } from \"@shared/styles\";\n import { stringToColor } from \"@shared/utils/color\";\n import User from \"~/models/User\";\n-import Avatar from \"~/components/Avatar\";\n+import { Avatar } from \"~/components/Avatar\";\n import { useDocumentContext } from \"~/components/DocumentContext\";\n import DocumentViews from \"~/components/DocumentViews\";\n import Flex from \"~/components/Flex\";\n\ndiff --git a/app/scenes/GroupMembers/AddPeopleToGroup.tsx b/app/scenes/GroupMembers/AddPeopleToGroup.tsx\nindex 791a34c7c2c4..63b89454c7e5 100644\n--- a/app/scenes/GroupMembers/AddPeopleToGroup.tsx\n+++ b/app/scenes/GroupMembers/AddPeopleToGroup.tsx\n@@ -6,8 +6,7 @@ import { toast } from \"sonner\";\n import Group from \"~/models/Group\";\n import User from \"~/models/User\";\n import Invite from \"~/scenes/Invite\";\n-import Avatar from \"~/components/Avatar\";\n-import { AvatarSize } from \"~/components/Avatar/Avatar\";\n+import { Avatar, AvatarSize } from \"~/components/Avatar\";\n import ButtonLink from \"~/components/ButtonLink\";\n import Empty from \"~/components/Empty\";\n import Flex from \"~/components/Flex\";\n\ndiff --git a/app/scenes/GroupMembers/components/GroupMemberListItem.tsx b/app/scenes/GroupMembers/components/GroupMemberListItem.tsx\nindex 3c7a1fad5e77..7fd27b100a2f 100644\n--- a/app/scenes/GroupMembers/components/GroupMemberListItem.tsx\n+++ b/app/scenes/GroupMembers/components/GroupMemberListItem.tsx\n@@ -2,7 +2,7 @@ import { observer } from \"mobx-react\";\n import * as React from \"react\";\n import { Trans, useTranslation } from \"react-i18next\";\n import User from \"~/models/User\";\n-import Avatar from \"~/components/Avatar\";\n+import { Avatar } from \"~/components/Avatar\";\n import Badge from \"~/components/Badge\";\n import Button from \"~/components/Button\";\n import Flex from \"~/components/Flex\";\n\ndiff --git a/app/scenes/Search/components/UserFilter.tsx b/app/scenes/Search/components/UserFilter.tsx\nindex c816ae4de08b..de01be699a1b 100644\n--- a/app/scenes/Search/components/UserFilter.tsx\n+++ b/app/scenes/Search/components/UserFilter.tsx\n@@ -3,8 +3,7 @@ import { UserIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import styled from \"styled-components\";\n-import Avatar from \"~/components/Avatar\";\n-import { AvatarSize } from \"~/components/Avatar/Avatar\";\n+import { Avatar, AvatarSize } from \"~/components/Avatar\";\n import FilterOptions from \"~/components/FilterOptions\";\n import useStores from \"~/hooks/useStores\";\n \n\ndiff --git a/app/scenes/Settings/components/ImageInput.tsx b/app/scenes/Settings/components/ImageInput.tsx\nindex 062a736eac06..9824a0176498 100644\n--- a/app/scenes/Settings/components/ImageInput.tsx\n+++ b/app/scenes/Settings/components/ImageInput.tsx\n@@ -2,7 +2,7 @@ import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import styled from \"styled-components\";\n import { s } from \"@shared/styles\";\n-import Avatar, { AvatarSize, IAvatar } from \"~/components/Avatar/Avatar\";\n+import { Avatar, AvatarSize, IAvatar } from \"~/components/Avatar\";\n import Button from \"~/components/Button\";\n import Flex from \"~/components/Flex\";\n import ImageUpload, { Props as ImageUploadProps } from \"./ImageUpload\";\n\ndiff --git a/app/scenes/Settings/components/PeopleTable.tsx b/app/scenes/Settings/components/PeopleTable.tsx\nindex 8eae6df7f903..476011ec225b 100644\n--- a/app/scenes/Settings/components/PeopleTable.tsx\n+++ b/app/scenes/Settings/components/PeopleTable.tsx\n@@ -3,7 +3,7 @@ import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import styled from \"styled-components\";\n import User from \"~/models/User\";\n-import Avatar from \"~/components/Avatar\";\n+import { Avatar } from \"~/components/Avatar\";\n import Badge from \"~/components/Badge\";\n import Flex from \"~/components/Flex\";\n import TableFromParams from \"~/components/TableFromParams\";\n\ndiff --git a/app/scenes/Settings/components/SharesTable.tsx b/app/scenes/Settings/components/SharesTable.tsx\nindex 652bc1276636..d6efd7e3256a 100644\n--- a/app/scenes/Settings/components/SharesTable.tsx\n+++ b/app/scenes/Settings/components/SharesTable.tsx\n@@ -3,7 +3,7 @@ import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { unicodeCLDRtoBCP47 } from \"@shared/utils/date\";\n import Share from \"~/models/Share\";\n-import Avatar from \"~/components/Avatar\";\n+import { Avatar } from \"~/components/Avatar\";\n import Flex from \"~/components/Flex\";\n import TableFromParams from \"~/components/TableFromParams\";\n import Time from \"~/components/Time\";\n\ndiff --git a/app/stores/AuthStore.ts b/app/stores/AuthStore.ts\nindex ef93084a5a4c..92246708c761 100644\n--- a/app/stores/AuthStore.ts\n+++ b/app/stores/AuthStore.ts\n@@ -207,6 +207,8 @@ export default class AuthStore extends Store<Team> {\n         this.addPolicies(res.policies);\n         this.add(data.team);\n         this.rootStore.users.add(data.user);\n+        data.groups.map(this.rootStore.groups.add);\n+        data.groupUsers.map(this.rootStore.groupUsers.add);\n         this.currentUserId = data.user.id;\n         this.currentTeamId = data.team.id;\n \n\ndiff --git a/app/stores/DocumentsStore.ts b/app/stores/DocumentsStore.ts\nindex 96a24fb3cce3..73d0e606db43 100644\n--- a/app/stores/DocumentsStore.ts\n+++ b/app/stores/DocumentsStore.ts\n@@ -7,7 +7,6 @@ import orderBy from \"lodash/orderBy\";\n import { observable, action, computed, runInAction } from \"mobx\";\n import type {\n   DateFilter,\n-  JSONObject,\n   NavigationNode,\n   PublicTeam,\n   StatusFilter,\n@@ -23,7 +22,6 @@ import type {\n   FetchOptions,\n   PaginationParams,\n   PartialWithId,\n-  Properties,\n   SearchResult,\n } from \"~/types\";\n import { client } from \"~/utils/ApiClient\";\n@@ -742,34 +740,6 @@ export default class DocumentsStore extends Store<Document> {\n     }\n   };\n \n-  @action\n-  async update(\n-    params: Properties<Document>,\n-    options?: JSONObject\n-  ): Promise<Document> {\n-    this.isSaving = true;\n-\n-    try {\n-      const res = await client.post(`/${this.apiEndpoint}.update`, {\n-        ...params,\n-        ...options,\n-      });\n-\n-      invariant(res?.data, \"Data should be available\");\n-\n-      const collection = this.getCollectionForDocument(res.data);\n-      await collection?.fetchDocuments({ force: true });\n-\n-      return runInAction(\"Document#update\", () => {\n-        const document = this.add(res.data);\n-        this.addPolicies(res.policies);\n-        return document;\n-      });\n-    } finally {\n-      this.isSaving = false;\n-    }\n-  }\n-\n   @action\n   unpublish = async (document: Document) => {\n     const res = await client.post(\"/documents.unpublish\", {\n\ndiff --git a/app/stores/GroupMembershipsStore.ts b/app/stores/GroupMembershipsStore.ts\nindex dbbd96178195..7624c6943fa6 100644\n--- a/app/stores/GroupMembershipsStore.ts\n+++ b/app/stores/GroupMembershipsStore.ts\n@@ -15,18 +15,36 @@ export default class GroupMembershipsStore extends Store<GroupMembership> {\n   }\n \n   @action\n-  fetchPage = async (\n-    params: PaginationParams | undefined\n-  ): Promise<GroupMembership[]> => {\n+  fetchPage = async ({\n+    collectionId,\n+    documentId,\n+    ...params\n+  }:\n+    | PaginationParams & {\n+        documentId?: string;\n+        collectionId?: string;\n+        groupId?: string;\n+      }): Promise<GroupMembership[]> => {\n     this.isFetching = true;\n \n     try {\n-      const res = await client.post(`/collections.group_memberships`, params);\n+      const res = collectionId\n+        ? await client.post(`/collections.group_memberships`, {\n+            id: collectionId,\n+            ...params,\n+          })\n+        : documentId\n+        ? await client.post(`/documents.group_memberships`, {\n+            id: documentId,\n+            ...params,\n+          })\n+        : await client.post(`/groupMemberships.list`, params);\n       invariant(res?.data, \"Data not available\");\n \n       let response: GroupMembership[] = [];\n       runInAction(`GroupMembershipsStore#fetchPage`, () => {\n-        res.data.groups.forEach(this.rootStore.groups.add);\n+        res.data.groups?.forEach(this.rootStore.groups.add);\n+        res.data.documents?.forEach(this.rootStore.documents.add);\n         response = res.data.groupMemberships.map(this.add);\n         this.isLoaded = true;\n       });\n\ndiff --git a/app/stores/GroupUserMembershipsStore.ts b/app/stores/GroupUsersStore.ts\nsimilarity index 100%\nrename from app/stores/GroupUserMembershipsStore.ts\nrename to app/stores/GroupUsersStore.ts\n\ndiff --git a/app/stores/GroupsStore.ts b/app/stores/GroupsStore.ts\nindex 4861aed087c7..60f8cfc8caa9 100644\n--- a/app/stores/GroupsStore.ts\n+++ b/app/stores/GroupsStore.ts\n@@ -41,6 +41,13 @@ export default class GroupsStore extends Store<Group> {\n     }\n   };\n \n+  /**\n+   * Returns groups that are in the given collection, optionally filtered by a query.\n+   *\n+   * @param collectionId\n+   * @param query\n+   * @returns A list of groups that are in the given collection.\n+   */\n   inCollection = (collectionId: string, query?: string) => {\n     const memberships = filter(\n       this.rootStore.groupMemberships.orderedData,\n@@ -50,12 +57,38 @@ export default class GroupsStore extends Store<Group> {\n     const groups = filter(this.orderedData, (group) =>\n       groupIds.includes(group.id)\n     );\n-    if (!query) {\n-      return groups;\n-    }\n-    return queriedGroups(groups, query);\n+\n+    return query ? queriedGroups(groups, query) : groups;\n   };\n \n+  /**\n+   * Returns groups that are not in the given document, optionally filtered by a query.\n+   *\n+   * @param documentId\n+   * @param query\n+   * @returns A list of groups that are not in the given document.\n+   */\n+  notInDocument = (documentId: string, query = \"\") => {\n+    const memberships = filter(\n+      this.rootStore.groupMemberships.orderedData,\n+      (member) => member.documentId === documentId\n+    );\n+    const groupIds = memberships.map((member) => member.groupId);\n+    const groups = filter(\n+      this.orderedData,\n+      (group) => !groupIds.includes(group.id)\n+    );\n+\n+    return query ? queriedGroups(groups, query) : groups;\n+  };\n+\n+  /**\n+   * Returns groups that are not in the given collection, optionally filtered by a query.\n+   *\n+   * @param collectionId\n+   * @param query\n+   * @returns A list of groups that are not in the given collection.\n+   */\n   notInCollection = (collectionId: string, query = \"\") => {\n     const memberships = filter(\n       this.rootStore.groupMemberships.orderedData,\n@@ -66,10 +99,8 @@ export default class GroupsStore extends Store<Group> {\n       this.orderedData,\n       (group) => !groupIds.includes(group.id)\n     );\n-    if (!query) {\n-      return groups;\n-    }\n-    return queriedGroups(groups, query);\n+\n+    return query ? queriedGroups(groups, query) : groups;\n   };\n }\n \n\ndiff --git a/app/stores/RootStore.ts b/app/stores/RootStore.ts\nindex 3ce3e218bd49..297abde26a48 100644\n--- a/app/stores/RootStore.ts\n+++ b/app/stores/RootStore.ts\n@@ -12,7 +12,7 @@ import DocumentsStore from \"./DocumentsStore\";\n import EventsStore from \"./EventsStore\";\n import FileOperationsStore from \"./FileOperationsStore\";\n import GroupMembershipsStore from \"./GroupMembershipsStore\";\n-import GroupUserMembershipsStore from \"./GroupUserMembershipsStore\";\n+import GroupUsersStore from \"./GroupUsersStore\";\n import GroupsStore from \"./GroupsStore\";\n import IntegrationsStore from \"./IntegrationsStore\";\n import MembershipsStore from \"./MembershipsStore\";\n@@ -42,7 +42,7 @@ export default class RootStore {\n   documents: DocumentsStore;\n   events: EventsStore;\n   groups: GroupsStore;\n-  groupUsers: GroupUserMembershipsStore;\n+  groupUsers: GroupUsersStore;\n   integrations: IntegrationsStore;\n   memberships: MembershipsStore;\n   notifications: NotificationsStore;\n@@ -71,7 +71,7 @@ export default class RootStore {\n     this.registerStore(DocumentsStore);\n     this.registerStore(EventsStore);\n     this.registerStore(GroupsStore);\n-    this.registerStore(GroupUserMembershipsStore);\n+    this.registerStore(GroupUsersStore);\n     this.registerStore(IntegrationsStore);\n     this.registerStore(MembershipsStore);\n     this.registerStore(NotificationsStore);\n\ndiff --git a/app/stores/UsersStore.ts b/app/stores/UsersStore.ts\nindex 540900947955..6dadcc1dcb08 100644\n--- a/app/stores/UsersStore.ts\n+++ b/app/stores/UsersStore.ts\n@@ -138,6 +138,13 @@ export default class UsersStore extends Store<User> {\n     }\n   };\n \n+  /**\n+   * Returns users that are not in the given document, optionally filtered by a query.\n+   *\n+   * @param documentId\n+   * @param query\n+   * @returns A list of users that are not in the given document.\n+   */\n   notInDocument = (documentId: string, query = \"\") => {\n     const document = this.rootStore.documents.get(documentId);\n     const teamMembers = this.activeOrInvited;\n@@ -150,6 +157,13 @@ export default class UsersStore extends Store<User> {\n     return queriedUsers(users, query);\n   };\n \n+  /**\n+   * Returns users that are not in the given collection, optionally filtered by a query.\n+   *\n+   * @param collectionId\n+   * @param query\n+   * @returns A list of users that are not in the given collection.\n+   */\n   notInCollection = (collectionId: string, query = \"\") => {\n     const groupUsers = filter(\n       this.rootStore.memberships.orderedData,\n\ndiff --git a/app/types.ts b/app/types.ts\nindex f03b064321a6..216bdcce5bd5 100644\n--- a/app/types.ts\n+++ b/app/types.ts\n@@ -7,6 +7,7 @@ import {\n   DocumentPermission,\n } from \"@shared/types\";\n import RootStore from \"~/stores/RootStore\";\n+import { SidebarContextType } from \"./components/Sidebar/components/SidebarContext\";\n import Document from \"./models/Document\";\n import FileOperation from \"./models/FileOperation\";\n import Pin from \"./models/Pin\";\n@@ -82,7 +83,7 @@ export type ActionContext = {\n   isContextMenu: boolean;\n   isCommandBar: boolean;\n   isButton: boolean;\n-  inStarredSection?: boolean;\n+  sidebarContext?: SidebarContextType;\n   activeCollectionId?: string | undefined;\n   activeDocumentId: string | undefined;\n   currentUserId: string | undefined;\n\ndiff --git a/plugins/github/client/Settings.tsx b/plugins/github/client/Settings.tsx\nindex 585efb5d65bf..f42c25c83712 100644\n--- a/plugins/github/client/Settings.tsx\n+++ b/plugins/github/client/Settings.tsx\n@@ -4,7 +4,7 @@ import * as React from \"react\";\n import { useTranslation, Trans } from \"react-i18next\";\n import { IntegrationService } from \"@shared/types\";\n import { ConnectedButton } from \"~/scenes/Settings/components/ConnectedButton\";\n-import { AvatarSize } from \"~/components/Avatar/Avatar\";\n+import { AvatarSize } from \"~/components/Avatar\";\n import Flex from \"~/components/Flex\";\n import Heading from \"~/components/Heading\";\n import List from \"~/components/List\";\n\ndiff --git a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\nindex 2a09b5ddf96e..867249856df7 100644\n--- a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n+++ b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n@@ -42,7 +42,6 @@ import {\n   presentGroupMembership,\n   presentComment,\n } from \"@server/presenters\";\n-import presentDocumentGroupMembership from \"@server/presenters/documentGroupMembership\";\n import BaseTask from \"@server/queues/tasks/BaseTask\";\n import {\n   CollectionEvent,\n@@ -611,7 +610,7 @@ export default class DeliverWebhookTask extends BaseTask<Props> {\n       subscription,\n       payload: {\n         id: event.modelId,\n-        model: model && presentDocumentGroupMembership(model),\n+        model: model && presentGroupMembership(model),\n         document,\n         group: model && (await presentGroup(model.group)),\n       },\n\ndiff --git a/server/commands/documentCreator.ts b/server/commands/documentCreator.ts\nindex c6c0e1b61d70..fcbd1885164a 100644\n--- a/server/commands/documentCreator.ts\n+++ b/server/commands/documentCreator.ts\n@@ -172,14 +172,8 @@ export default async function documentCreator({\n   // reload to get all of the data needed to present (user, collection etc)\n   // we need to specify publishedAt to bypass default scope that only returns\n   // published documents\n-  return await Document.scope([\n-    \"withDrafts\",\n-    { method: [\"withMembership\", user.id] },\n-  ]).findOne({\n-    where: {\n-      id: document.id,\n-      publishedAt: document.publishedAt,\n-    },\n+  return Document.findByPk(document.id, {\n+    userId: user.id,\n     rejectOnEmpty: true,\n     transaction,\n   });\n\ndiff --git a/server/commands/documentDuplicator.ts b/server/commands/documentDuplicator.ts\nindex c9e68a304d6a..f88c023e20c8 100644\n--- a/server/commands/documentDuplicator.ts\n+++ b/server/commands/documentDuplicator.ts\n@@ -59,7 +59,7 @@ export default async function documentDuplicator({\n     ...sharedProperties,\n   });\n \n-  duplicated.collection = collection;\n+  duplicated.collection = collection ?? null;\n   newDocuments.push(duplicated);\n \n   async function duplicateChildDocuments(\n@@ -95,7 +95,7 @@ export default async function documentDuplicator({\n         ...sharedProperties,\n       });\n \n-      duplicatedChildDocument.collection = collection;\n+      duplicatedChildDocument.collection = collection ?? null;\n       newDocuments.push(duplicatedChildDocument);\n       await duplicateChildDocuments(childDocument, duplicatedChildDocument);\n     }\n\ndiff --git a/server/commands/documentMover.ts b/server/commands/documentMover.ts\nindex cb230a3af9d3..a3d25aecad71 100644\n--- a/server/commands/documentMover.ts\n+++ b/server/commands/documentMover.ts\n@@ -8,6 +8,7 @@ import {\n   Pin,\n   Event,\n   UserMembership,\n+  GroupMembership,\n } from \"@server/models\";\n import pinDestroyer from \"./pinDestroyer\";\n \n@@ -226,9 +227,14 @@ async function documentMover({\n   await document.save({ transaction });\n   result.documents.push(document);\n \n-  // If there are any sourced permissions for this document, we need to go to the source\n-  // permission and recalculate\n-  const [documentPermissions, parentDocumentPermissions] = await Promise.all([\n+  // If there are any sourced memberships for this document, we need to go to the source\n+  // memberships and recalculate the membership for the user or group.\n+  const [\n+    userMemberships,\n+    parentDocumentUserMemberships,\n+    groupMemberships,\n+    parentDocumentGroupMemberships,\n+  ] = await Promise.all([\n     UserMembership.findRootMembershipsForDocument(document.id, undefined, {\n       transaction,\n     }),\n@@ -239,10 +245,25 @@ async function documentMover({\n           { transaction }\n         )\n       : [],\n+    GroupMembership.findRootMembershipsForDocument(document.id, undefined, {\n+      transaction,\n+    }),\n+    parentDocumentId\n+      ? GroupMembership.findRootMembershipsForDocument(\n+          parentDocumentId,\n+          undefined,\n+          { transaction }\n+        )\n+      : [],\n   ]);\n \n-  await recalculatePermissions(documentPermissions, transaction);\n-  await recalculatePermissions(parentDocumentPermissions, transaction);\n+  await recalculateUserMemberships(userMemberships, transaction);\n+  await recalculateUserMemberships(parentDocumentUserMemberships, transaction);\n+  await recalculateGroupMemberships(groupMemberships, transaction);\n+  await recalculateGroupMemberships(\n+    parentDocumentGroupMemberships,\n+    transaction\n+  );\n \n   await Event.create(\n     {\n@@ -267,12 +288,21 @@ async function documentMover({\n   return result;\n }\n \n-async function recalculatePermissions(\n-  permissions: UserMembership[],\n+async function recalculateUserMemberships(\n+  memberships: UserMembership[],\n+  transaction?: Transaction\n+) {\n+  for (const membership of memberships) {\n+    await UserMembership.createSourcedMemberships(membership, { transaction });\n+  }\n+}\n+\n+async function recalculateGroupMemberships(\n+  memberships: GroupMembership[],\n   transaction?: Transaction\n ) {\n-  for (const permission of permissions) {\n-    await UserMembership.createSourcedMemberships(permission, { transaction });\n+  for (const membership of memberships) {\n+    await GroupMembership.createSourcedMemberships(membership, { transaction });\n   }\n }\n \n\ndiff --git a/server/models/Collection.ts b/server/models/Collection.ts\nindex 66c94a41a733..45487db05448 100644\n--- a/server/models/Collection.ts\n+++ b/server/models/Collection.ts\n@@ -72,7 +72,7 @@ import NotContainsUrl from \"./validators/NotContainsUrl\";\n         separate: true,\n         // include for groups that are members of this collection,\n         // of which userId is a member of, resulting in:\n-        // CollectionGroup [inner join] Group [inner join] GroupUser [where] userId\n+        // GroupMembership [inner join] Group [inner join] GroupUser [where] userId\n         include: [\n           {\n             model: Group,\n@@ -99,47 +99,52 @@ import NotContainsUrl from \"./validators/NotContainsUrl\";\n       },\n     ],\n   }),\n-  withMembership: (userId: string) => ({\n-    include: [\n-      {\n-        model: UserMembership,\n-        as: \"memberships\",\n-        where: {\n-          userId,\n+  withMembership: (userId: string) => {\n+    if (!userId) {\n+      return {};\n+    }\n+\n+    return {\n+      include: [\n+        {\n+          association: \"memberships\",\n+          where: {\n+            userId,\n+          },\n+          required: false,\n         },\n-        required: false,\n-      },\n-      {\n-        model: GroupMembership,\n-        as: \"groupMemberships\",\n-        required: false,\n-        // use of \"separate\" property: sequelize breaks when there are\n-        // nested \"includes\" with alternating values for \"required\"\n-        // see https://github.com/sequelize/sequelize/issues/9869\n-        separate: true,\n-        // include for groups that are members of this collection,\n-        // of which userId is a member of, resulting in:\n-        // CollectionGroup [inner join] Group [inner join] GroupUser [where] userId\n-        include: [\n-          {\n-            model: Group,\n-            as: \"group\",\n-            required: true,\n-            include: [\n-              {\n-                model: GroupUser,\n-                as: \"groupUsers\",\n-                required: true,\n-                where: {\n-                  userId,\n+        {\n+          model: GroupMembership,\n+          as: \"groupMemberships\",\n+          required: false,\n+          // use of \"separate\" property: sequelize breaks when there are\n+          // nested \"includes\" with alternating values for \"required\"\n+          // see https://github.com/sequelize/sequelize/issues/9869\n+          separate: true,\n+          // include for groups that are members of this collection,\n+          // of which userId is a member of, resulting in:\n+          // CollectionGroup [inner join] Group [inner join] GroupUser [where] userId\n+          include: [\n+            {\n+              model: Group,\n+              as: \"group\",\n+              required: true,\n+              include: [\n+                {\n+                  model: GroupUser,\n+                  as: \"groupUsers\",\n+                  required: true,\n+                  where: {\n+                    userId,\n+                  },\n                 },\n-              },\n-            ],\n-          },\n-        ],\n-      },\n-    ],\n-  }),\n+              ],\n+            },\n+          ],\n+        },\n+      ],\n+    };\n+  },\n }))\n @Table({ tableName: \"collections\", modelName: \"collection\" })\n @Fix\n@@ -353,7 +358,7 @@ class Collection extends ParanoidModel<\n \n   /**\n    * Returns an array of unique userIds that are members of a collection,\n-   * either via group or direct membership\n+   * either via group or direct membership.\n    *\n    * @param collectionId\n    * @returns userIds\n@@ -362,13 +367,12 @@ class Collection extends ParanoidModel<\n     const collection = await this.scope(\"withAllMemberships\").findByPk(\n       collectionId\n     );\n-\n     if (!collection) {\n       return [];\n     }\n \n     const groupMemberships = collection.groupMemberships\n-      .map((cgm) => cgm.group.groupUsers)\n+      .map((gm) => gm.group.groupUsers)\n       .flat();\n     const membershipUserIds = [\n       ...groupMemberships,\n\ndiff --git a/server/models/Document.ts b/server/models/Document.ts\nindex 1f6630173b80..2829be2bf4e4 100644\n--- a/server/models/Document.ts\n+++ b/server/models/Document.ts\n@@ -55,6 +55,9 @@ import { generateUrlId } from \"@server/utils/url\";\n import Backlink from \"./Backlink\";\n import Collection from \"./Collection\";\n import FileOperation from \"./FileOperation\";\n+import Group from \"./Group\";\n+import GroupMembership from \"./GroupMembership\";\n+import GroupUser from \"./GroupUser\";\n import Revision from \"./Revision\";\n import Star from \"./Star\";\n import Team from \"./Team\";\n@@ -147,13 +150,11 @@ type AdditionalFindOptions = {\n   withDrafts: {\n     include: [\n       {\n-        model: User,\n-        as: \"createdBy\",\n+        association: \"createdBy\",\n         paranoid: false,\n       },\n       {\n-        model: User,\n-        as: \"updatedBy\",\n+        association: \"updatedBy\",\n         paranoid: false,\n       },\n     ],\n@@ -180,6 +181,7 @@ type AdditionalFindOptions = {\n     if (!userId) {\n       return {};\n     }\n+\n     return {\n       include: [\n         {\n@@ -189,6 +191,34 @@ type AdditionalFindOptions = {\n           },\n           required: false,\n         },\n+        {\n+          association: \"groupMemberships\",\n+          required: false,\n+          // use of \"separate\" property: sequelize breaks when there are\n+          // nested \"includes\" with alternating values for \"required\"\n+          // see https://github.com/sequelize/sequelize/issues/9869\n+          separate: true,\n+          // include for groups that are members of this document,\n+          // of which userId is a member of, resulting in:\n+          // GroupMembership [inner join] Group [inner join] GroupUser [where] userId\n+          include: [\n+            {\n+              model: Group,\n+              as: \"group\",\n+              required: true,\n+              include: [\n+                {\n+                  model: GroupUser,\n+                  as: \"groupUsers\",\n+                  required: true,\n+                  where: {\n+                    userId,\n+                  },\n+                },\n+              ],\n+            },\n+          ],\n+        },\n       ],\n     };\n   },\n@@ -196,6 +226,33 @@ type AdditionalFindOptions = {\n     include: [\n       {\n         association: \"memberships\",\n+        required: false,\n+      },\n+      {\n+        model: GroupMembership,\n+        as: \"groupMemberships\",\n+        required: false,\n+        // use of \"separate\" property: sequelize breaks when there are\n+        // nested \"includes\" with alternating values for \"required\"\n+        // see https://github.com/sequelize/sequelize/issues/9869\n+        separate: true,\n+        // include for groups that are members of this collection,\n+        // of which userId is a member of, resulting in:\n+        // CollectionGroup [inner join] Group [inner join] GroupUser [where] userId\n+        include: [\n+          {\n+            model: Group,\n+            as: \"group\",\n+            required: true,\n+            include: [\n+              {\n+                model: GroupUser,\n+                as: \"groupUsers\",\n+                required: true,\n+              },\n+            ],\n+          },\n+        ],\n       },\n     ],\n   },\n@@ -534,7 +591,7 @@ class Document extends ParanoidModel<\n   teamId: string;\n \n   @BelongsTo(() => Collection, \"collectionId\")\n-  collection: Collection | null | undefined;\n+  collection: Collection | null;\n \n   @BelongsToMany(() => User, () => UserMembership)\n   users: User[];\n@@ -546,6 +603,9 @@ class Document extends ParanoidModel<\n   @HasMany(() => UserMembership)\n   memberships: UserMembership[];\n \n+  @HasMany(() => GroupMembership, \"documentId\")\n+  groupMemberships: GroupMembership[];\n+\n   @HasMany(() => Revision)\n   revisions: Revision[];\n \n@@ -559,22 +619,28 @@ class Document extends ParanoidModel<\n   views: View[];\n \n   /**\n-   * Returns an array of unique userIds that are members of a document via direct membership\n+   * Returns an array of unique userIds that are members of a document\n+   * either via group or direct membership.\n    *\n    * @param documentId\n    * @returns userIds\n    */\n   static async membershipUserIds(documentId: string) {\n     const document = await this.scope(\"withAllMemberships\").findOne({\n-      where: {\n-        id: documentId,\n-      },\n+      where: { id: documentId },\n     });\n     if (!document) {\n       return [];\n     }\n \n-    return document.memberships.map((membership) => membership.userId);\n+    const groupMemberships = document.groupMemberships\n+      .map((gm) => gm.group.groupUsers)\n+      .flat();\n+    const membershipUserIds = [\n+      ...groupMemberships,\n+      ...document.memberships,\n+    ].map((membership) => membership.userId);\n+    return uniq(membershipUserIds);\n   }\n \n   static defaultScopeWithUser(userId: string) {\n@@ -841,31 +907,23 @@ class Document extends ParanoidModel<\n       }\n     }\n \n-    const parentDocumentPermissions = this.parentDocumentId\n-      ? await UserMembership.findAll({\n-          where: {\n-            documentId: this.parentDocumentId,\n-          },\n-          transaction,\n-        })\n-      : [];\n-\n-    await Promise.all(\n-      parentDocumentPermissions.map((permission) =>\n-        UserMembership.create(\n-          {\n-            documentId: this.id,\n-            userId: permission.userId,\n-            sourceId: permission.sourceId ?? permission.id,\n-            permission: permission.permission,\n-            createdById: permission.createdById,\n-          },\n-          {\n-            transaction,\n-          }\n-        )\n-      )\n-    );\n+    // Copy the group and user memberships from the parent document, if any\n+    if (this.parentDocumentId) {\n+      await GroupMembership.copy(\n+        {\n+          documentId: this.parentDocumentId,\n+        },\n+        this,\n+        { transaction }\n+      );\n+      await UserMembership.copy(\n+        {\n+          documentId: this.parentDocumentId,\n+        },\n+        this,\n+        { transaction }\n+      );\n+    }\n \n     this.lastModifiedById = user.id;\n     this.updatedBy = user;\n\ndiff --git a/server/models/GroupMembership.ts b/server/models/GroupMembership.ts\nindex 1d87e9c16e6f..de6ed02e99aa 100644\n--- a/server/models/GroupMembership.ts\n+++ b/server/models/GroupMembership.ts\n@@ -4,6 +4,8 @@ import {\n   Op,\n   type SaveOptions,\n   type FindOptions,\n+  type DestroyOptions,\n+  type WhereOptions,\n } from \"sequelize\";\n import {\n   BelongsTo,\n@@ -16,6 +18,7 @@ import {\n   Scopes,\n   AfterCreate,\n   AfterUpdate,\n+  AfterDestroy,\n } from \"sequelize-typescript\";\n import { CollectionPermission, DocumentPermission } from \"@shared/types\";\n import Collection from \"./Collection\";\n@@ -67,6 +70,7 @@ class GroupMembership extends ParanoidModel<\n   InferAttributes<GroupMembership>,\n   Partial<InferCreationAttributes<GroupMembership>>\n > {\n+  /** The permission granted to the group. */\n   @Default(CollectionPermission.ReadWrite)\n   @IsIn([Object.values(CollectionPermission)])\n   @Column(DataType.STRING)\n@@ -74,51 +78,86 @@ class GroupMembership extends ParanoidModel<\n \n   // associations\n \n-  /** The collection that this permission grants the group access to. */\n+  /** The collection that this membership grants the group access to. */\n   @BelongsTo(() => Collection, \"collectionId\")\n   collection?: Collection | null;\n \n-  /** The collection ID that this permission grants the group access to. */\n+  /** The collection ID that this membership grants the group access to. */\n   @ForeignKey(() => Collection)\n   @Column(DataType.UUID)\n   collectionId?: string | null;\n \n-  /** The document that this permission grants the group access to. */\n+  /** The document that this membership grants the group access to. */\n   @BelongsTo(() => Document, \"documentId\")\n   document?: Document | null;\n \n-  /** The document ID that this permission grants the group access to. */\n+  /** The document ID that this membership grants the group access to. */\n   @ForeignKey(() => Document)\n   @Column(DataType.UUID)\n   documentId?: string | null;\n \n-  /** If this represents the permission on a child then this points to the permission on the root */\n+  /** If this represents the membership on a child then this points to the membership on the root */\n   @BelongsTo(() => GroupMembership, \"sourceId\")\n   source?: GroupMembership | null;\n \n-  /** If this represents the permission on a child then this points to the permission on the root */\n+  /** If this represents the membership on a child then this points to the membership on the root */\n   @ForeignKey(() => GroupMembership)\n   @Column(DataType.UUID)\n   sourceId?: string | null;\n \n-  /** The group that this permission is granted to. */\n+  /** The group that this membership is granted to. */\n   @BelongsTo(() => Group, \"groupId\")\n   group: Group;\n \n-  /** The group ID that this permission is granted to. */\n+  /** The group ID that this membership is granted to. */\n   @ForeignKey(() => Group)\n   @Column(DataType.UUID)\n   groupId: string;\n \n-  /** The user that created this permission. */\n+  /** The user that created this membership. */\n   @BelongsTo(() => User, \"createdById\")\n   createdBy: User;\n \n-  /** The user ID that created this permission. */\n+  /** The user ID that created this membership. */\n   @ForeignKey(() => User)\n   @Column(DataType.UUID)\n   createdById: string;\n \n+  // static methods\n+\n+  /**\n+   * Copy group memberships from one document to another.\n+   *\n+   * @param where The where clause to find the group memberships to copy.\n+   * @param document The document to copy the group memberships to.\n+   * @param options Additional options to pass to the query.\n+   */\n+  public static async copy(\n+    where: WhereOptions<GroupMembership>,\n+    document: Document,\n+    options: SaveOptions\n+  ) {\n+    const { transaction } = options;\n+    const groupMemberships = await this.findAll({\n+      where,\n+      transaction,\n+    });\n+    await Promise.all(\n+      groupMemberships.map((membership) =>\n+        this.create(\n+          {\n+            documentId: document.id,\n+            groupId: membership.groupId,\n+            sourceId: membership.sourceId ?? membership.id,\n+            permission: membership.permission,\n+            createdById: membership.createdById,\n+          },\n+          { transaction }\n+        )\n+      )\n+    );\n+  }\n+\n   /**\n    * Find the root membership for a document and (optionally) group.\n    *\n@@ -127,7 +166,7 @@ class GroupMembership extends ParanoidModel<\n    * @param options Additional options to pass to the query.\n    * @returns A promise that resolves to the root memberships for the document and group, or null.\n    */\n-  static async findRootMembershipsForDocument(\n+  public static async findRootMembershipsForDocument(\n     documentId: string,\n     groupId?: string,\n     options?: FindOptions<GroupMembership>\n@@ -150,6 +189,20 @@ class GroupMembership extends ParanoidModel<\n     return rootMemberships.filter(Boolean) as GroupMembership[];\n   }\n \n+  // hooks\n+\n+  @AfterCreate\n+  static async createSourcedMemberships(\n+    model: GroupMembership,\n+    options: SaveOptions<GroupMembership>\n+  ) {\n+    if (model.sourceId || !model.documentId) {\n+      return;\n+    }\n+\n+    return this.recreateSourcedMemberships(model, options);\n+  }\n+\n   @AfterUpdate\n   static async updateSourcedMemberships(\n     model: GroupMembership,\n@@ -168,6 +221,7 @@ class GroupMembership extends ParanoidModel<\n         },\n         {\n           where: {\n+            groupId: model.groupId,\n             sourceId: model.id,\n           },\n           transaction,\n@@ -176,16 +230,23 @@ class GroupMembership extends ParanoidModel<\n     }\n   }\n \n-  @AfterCreate\n-  static async createSourcedMemberships(\n+  @AfterDestroy\n+  static async destroySourcedMemberships(\n     model: GroupMembership,\n-    options: SaveOptions<GroupMembership>\n+    options: DestroyOptions<GroupMembership>\n   ) {\n     if (model.sourceId || !model.documentId) {\n       return;\n     }\n \n-    return this.recreateSourcedMemberships(model, options);\n+    const { transaction } = options;\n+    await this.destroy({\n+      where: {\n+        groupId: model.groupId,\n+        sourceId: model.id,\n+      },\n+      transaction,\n+    });\n   }\n \n   /**\n@@ -202,6 +263,7 @@ class GroupMembership extends ParanoidModel<\n \n     await this.destroy({\n       where: {\n+        groupId: model.groupId,\n         sourceId: model.id,\n       },\n       transaction,\n\ndiff --git a/server/models/Share.ts b/server/models/Share.ts\nindex 52f4fb1c5a87..91b217681e8f 100644\n--- a/server/models/Share.ts\n+++ b/server/models/Share.ts\n@@ -48,7 +48,12 @@ import Length from \"./validators/Length\";\n   withCollectionPermissions: (userId: string) => ({\n     include: [\n       {\n-        model: Document.scope(\"withDrafts\"),\n+        model: Document.scope([\n+          \"withDrafts\",\n+          {\n+            method: [\"withMembership\", userId],\n+          },\n+        ]),\n         paranoid: true,\n         as: \"document\",\n         include: [\n@@ -59,13 +64,6 @@ import Length from \"./validators/Length\";\n             }),\n             as: \"collection\",\n           },\n-          {\n-            association: \"memberships\",\n-            where: {\n-              userId,\n-            },\n-            required: false,\n-          },\n         ],\n       },\n       {\n\ndiff --git a/server/models/UserMembership.ts b/server/models/UserMembership.ts\nindex 0345284bd159..40a295763f65 100644\n--- a/server/models/UserMembership.ts\n+++ b/server/models/UserMembership.ts\n@@ -5,6 +5,7 @@ import {\n   type SaveOptions,\n   type FindOptions,\n } from \"sequelize\";\n+import { WhereOptions } from \"sequelize\";\n import {\n   Column,\n   ForeignKey,\n@@ -67,6 +68,7 @@ class UserMembership extends IdModel<\n   InferAttributes<UserMembership>,\n   Partial<InferCreationAttributes<UserMembership>>\n > {\n+  /** The permission granted to the user. */\n   @Default(CollectionPermission.ReadWrite)\n   @IsIn([Object.values(CollectionPermission)])\n   @Column(DataType.STRING)\n@@ -82,51 +84,86 @@ class UserMembership extends IdModel<\n \n   // associations\n \n-  /** The collection that this permission grants the user access to. */\n+  /** The collection that this membership grants the user access to. */\n   @BelongsTo(() => Collection, \"collectionId\")\n   collection?: Collection | null;\n \n-  /** The collection ID that this permission grants the user access to. */\n+  /** The collection ID that this membership grants the user access to. */\n   @ForeignKey(() => Collection)\n   @Column(DataType.UUID)\n   collectionId?: string | null;\n \n-  /** The document that this permission grants the user access to. */\n+  /** The document that this membership grants the user access to. */\n   @BelongsTo(() => Document, \"documentId\")\n   document?: Document | null;\n \n-  /** The document ID that this permission grants the user access to. */\n+  /** The document ID that this membership grants the user access to. */\n   @ForeignKey(() => Document)\n   @Column(DataType.UUID)\n   documentId?: string | null;\n \n-  /** If this represents the permission on a child then this points to the permission on the root */\n+  /** If this represents the membership on a child then this points to the membership on the root */\n   @BelongsTo(() => UserMembership, \"sourceId\")\n   source?: UserMembership | null;\n \n-  /** If this represents the permission on a child then this points to the permission on the root */\n+  /** If this represents the membership on a child then this points to the membership on the root */\n   @ForeignKey(() => UserMembership)\n   @Column(DataType.UUID)\n   sourceId?: string | null;\n \n-  /** The user that this permission is granted to. */\n+  /** The user that this membership is granted to. */\n   @BelongsTo(() => User, \"userId\")\n   user: User;\n \n-  /** The user ID that this permission is granted to. */\n+  /** The user ID that this membership is granted to. */\n   @ForeignKey(() => User)\n   @Column(DataType.UUID)\n   userId: string;\n \n-  /** The user that created this permission. */\n+  /** The user that created this membership. */\n   @BelongsTo(() => User, \"createdById\")\n   createdBy: User;\n \n-  /** The user ID that created this permission. */\n+  /** The user ID that created this membership. */\n   @ForeignKey(() => User)\n   @Column(DataType.UUID)\n   createdById: string;\n \n+  // static methods\n+\n+  /**\n+   * Copy user memberships from one document to another.\n+   *\n+   * @param where The where clause to find the user memberships to copy.\n+   * @param document The document to copy the user memberships to.\n+   * @param options Additional options to pass to the query.\n+   */\n+  public static async copy(\n+    where: WhereOptions<UserMembership>,\n+    document: Document,\n+    options: SaveOptions\n+  ) {\n+    const { transaction } = options;\n+    const groupMemberships = await this.findAll({\n+      where,\n+      transaction,\n+    });\n+    await Promise.all(\n+      groupMemberships.map((membership) =>\n+        this.create(\n+          {\n+            documentId: document.id,\n+            userId: membership.userId,\n+            sourceId: membership.sourceId ?? membership.id,\n+            permission: membership.permission,\n+            createdById: membership.createdById,\n+          },\n+          { transaction }\n+        )\n+      )\n+    );\n+  }\n+\n   /**\n    * Find the root membership for a document and (optionally) user.\n    *\n@@ -158,6 +195,20 @@ class UserMembership extends IdModel<\n     return rootMemberships.filter(Boolean) as UserMembership[];\n   }\n \n+  // hooks\n+\n+  @AfterCreate\n+  static async createSourcedMemberships(\n+    model: UserMembership,\n+    options: SaveOptions<UserMembership>\n+  ) {\n+    if (model.sourceId || !model.documentId) {\n+      return;\n+    }\n+\n+    return this.recreateSourcedMemberships(model, options);\n+  }\n+\n   @AfterUpdate\n   static async updateSourcedMemberships(\n     model: UserMembership,\n@@ -176,6 +227,7 @@ class UserMembership extends IdModel<\n         },\n         {\n           where: {\n+            userId: model.userId,\n             sourceId: model.id,\n           },\n           transaction,\n@@ -184,18 +236,6 @@ class UserMembership extends IdModel<\n     }\n   }\n \n-  @AfterCreate\n-  static async createSourcedMemberships(\n-    model: UserMembership,\n-    options: SaveOptions<UserMembership>\n-  ) {\n-    if (model.sourceId || !model.documentId) {\n-      return;\n-    }\n-\n-    return this.recreateSourcedMemberships(model, options);\n-  }\n-\n   /**\n    * Recreate all sourced permissions for a given permission.\n    */\n@@ -210,6 +250,7 @@ class UserMembership extends IdModel<\n \n     await this.destroy({\n       where: {\n+        userId: model.userId,\n         sourceId: model.id,\n       },\n       transaction,\n\ndiff --git a/server/policies/collection.ts b/server/policies/collection.ts\nindex d283832d031e..96c5f609bb0d 100644\n--- a/server/policies/collection.ts\n+++ b/server/policies/collection.ts\n@@ -1,6 +1,6 @@\n import invariant from \"invariant\";\n import filter from \"lodash/filter\";\n-import { CollectionPermission, DocumentPermission } from \"@shared/types\";\n+import { CollectionPermission } from \"@shared/types\";\n import { Collection, User, Team } from \"@server/models\";\n import { allow, can } from \"./cancan\";\n import { and, isTeamAdmin, isTeamModel, isTeamMutable, or } from \"./utils\";\n@@ -150,7 +150,7 @@ allow(User, [\"update\", \"delete\"], Collection, (user, collection) => {\n \n function includesMembership(\n   collection: Collection | null,\n-  permissions: (CollectionPermission | DocumentPermission)[]\n+  permissions: CollectionPermission[]\n ) {\n   if (!collection) {\n     return false;\n@@ -160,9 +160,14 @@ function includesMembership(\n     collection.memberships,\n     \"Development: collection memberships not preloaded, did you forget `withMembership` scope?\"\n   );\n+  invariant(\n+    collection.groupMemberships,\n+    \"Development: collection groupMemberships not preloaded, did you forget `withMembership` scope?\"\n+  );\n+\n   const membershipIds = filter(\n     [...collection.memberships, ...collection.groupMemberships],\n-    (m) => permissions.includes(m.permission)\n+    (m) => permissions.includes(m.permission as CollectionPermission)\n   ).map((m) => m.id);\n \n   return membershipIds.length > 0 ? membershipIds : false;\n\ndiff --git a/server/policies/document.ts b/server/policies/document.ts\nindex e63844f10bf1..e3b10b0026fc 100644\n--- a/server/policies/document.ts\n+++ b/server/policies/document.ts\n@@ -1,10 +1,6 @@\n import invariant from \"invariant\";\n import filter from \"lodash/filter\";\n-import {\n-  CollectionPermission,\n-  DocumentPermission,\n-  TeamPreference,\n-} from \"@shared/types\";\n+import { DocumentPermission, TeamPreference } from \"@shared/types\";\n import { Document, Revision, User, Team } from \"@server/models\";\n import { allow, cannot, can } from \"./cancan\";\n import { and, isTeamAdmin, isTeamModel, isTeamMutable, or } from \"./utils\";\n@@ -285,7 +281,7 @@ allow(User, \"unpublish\", Document, (user, document) => {\n \n function includesMembership(\n   document: Document | null,\n-  permissions: (DocumentPermission | CollectionPermission)[]\n+  permissions: DocumentPermission[]\n ) {\n   if (!document) {\n     return false;\n@@ -293,11 +289,16 @@ function includesMembership(\n \n   invariant(\n     document.memberships,\n-    \"document memberships should be preloaded, did you forget withMembership scope?\"\n+    \"Development: document memberships should be preloaded, did you forget withMembership scope?\"\n+  );\n+  invariant(\n+    document.groupMemberships,\n+    \"Development: document groupMemberships should be preloaded, did you forget withMembership scope?\"\n   );\n \n-  const membershipIds = filter(document.memberships, (m) =>\n-    permissions.includes(m.permission)\n+  const membershipIds = filter(\n+    [...document.memberships, ...document.groupMemberships],\n+    (m) => permissions.includes(m.permission as DocumentPermission)\n   ).map((m) => m.id);\n \n   return membershipIds.length > 0 ? membershipIds : false;\n\ndiff --git a/server/presenters/documentGroupMembership.ts b/server/presenters/documentGroupMembership.ts\ndeleted file mode 100644\nindex f062d1309fc8..000000000000\n--- a/server/presenters/documentGroupMembership.ts\n+++ /dev/null\n@@ -1,20 +0,0 @@\n-import { DocumentPermission } from \"@shared/types\";\n-import { GroupMembership } from \"@server/models\";\n-\n-type Membership = {\n-  id: string;\n-  groupId: string;\n-  documentId?: string | null;\n-  permission: DocumentPermission;\n-};\n-\n-export default function presentDocumentGroupMembership(\n-  membership: GroupMembership\n-): Membership {\n-  return {\n-    id: membership.id,\n-    groupId: membership.groupId,\n-    documentId: membership.documentId,\n-    permission: membership.permission as DocumentPermission,\n-  };\n-}\n\ndiff --git a/server/presenters/groupMembership.ts b/server/presenters/groupMembership.ts\nindex 8e6d73e53bb5..7f42f3404d44 100644\n--- a/server/presenters/groupMembership.ts\n+++ b/server/presenters/groupMembership.ts\n@@ -7,5 +7,6 @@ export default function presentGroupMembership(membership: GroupMembership) {\n     documentId: membership.documentId,\n     collectionId: membership.collectionId,\n     permission: membership.permission,\n+    sourceId: membership.sourceId,\n   };\n }\n\ndiff --git a/server/queues/processors/NotificationsProcessor.ts b/server/queues/processors/NotificationsProcessor.ts\nindex 3edd7fbcd91a..e2b267be51d7 100644\n--- a/server/queues/processors/NotificationsProcessor.ts\n+++ b/server/queues/processors/NotificationsProcessor.ts\n@@ -6,11 +6,13 @@ import {\n   CommentEvent,\n   CollectionUserEvent,\n   DocumentUserEvent,\n+  DocumentGroupEvent,\n } from \"@server/types\";\n import CollectionAddUserNotificationsTask from \"../tasks/CollectionAddUserNotificationsTask\";\n import CollectionCreatedNotificationsTask from \"../tasks/CollectionCreatedNotificationsTask\";\n import CommentCreatedNotificationsTask from \"../tasks/CommentCreatedNotificationsTask\";\n import CommentUpdatedNotificationsTask from \"../tasks/CommentUpdatedNotificationsTask\";\n+import DocumentAddGroupNotificationsTask from \"../tasks/DocumentAddGroupNotificationsTask\";\n import DocumentAddUserNotificationsTask from \"../tasks/DocumentAddUserNotificationsTask\";\n import DocumentPublishedNotificationsTask from \"../tasks/DocumentPublishedNotificationsTask\";\n import RevisionCreatedNotificationsTask from \"../tasks/RevisionCreatedNotificationsTask\";\n@@ -20,6 +22,7 @@ export default class NotificationsProcessor extends BaseProcessor {\n   static applicableEvents: Event[\"name\"][] = [\n     \"documents.publish\",\n     \"documents.add_user\",\n+    \"documents.add_group\",\n     \"revisions.create\",\n     \"collections.create\",\n     \"collections.add_user\",\n@@ -33,6 +36,8 @@ export default class NotificationsProcessor extends BaseProcessor {\n         return this.documentPublished(event);\n       case \"documents.add_user\":\n         return this.documentAddUser(event);\n+      case \"documents.add_group\":\n+        return this.documentAddGroup(event);\n       case \"revisions.create\":\n         return this.revisionCreated(event);\n       case \"collections.create\":\n@@ -67,6 +72,13 @@ export default class NotificationsProcessor extends BaseProcessor {\n     await DocumentAddUserNotificationsTask.schedule(event);\n   }\n \n+  async documentAddGroup(event: DocumentGroupEvent) {\n+    if (!event.data.isNew) {\n+      return;\n+    }\n+    await DocumentAddGroupNotificationsTask.schedule(event);\n+  }\n+\n   async revisionCreated(event: RevisionEvent) {\n     await RevisionCreatedNotificationsTask.schedule(event);\n   }\n\ndiff --git a/server/queues/processors/WebsocketsProcessor.ts b/server/queues/processors/WebsocketsProcessor.ts\nindex d872a914fbdc..12ab205fa43a 100644\n--- a/server/queues/processors/WebsocketsProcessor.ts\n+++ b/server/queues/processors/WebsocketsProcessor.ts\n@@ -1,3 +1,4 @@\n+import uniq from \"lodash/uniq\";\n import { Server } from \"socket.io\";\n import {\n   Comment,\n@@ -152,6 +153,40 @@ export default class WebsocketsProcessor {\n         return;\n       }\n \n+      case \"documents.add_group\": {\n+        const [document, membership] = await Promise.all([\n+          Document.findByPk(event.documentId),\n+          GroupMembership.findByPk(event.data.membershipId),\n+        ]);\n+        if (!document || !membership) {\n+          return;\n+        }\n+\n+        const channels = await this.getDocumentEventChannels(event, document);\n+        socketio\n+          .to(channels)\n+          .emit(event.name, presentGroupMembership(membership));\n+        return;\n+      }\n+\n+      case \"documents.remove_group\": {\n+        const [document, group] = await Promise.all([\n+          Document.findByPk(event.documentId),\n+          Group.findByPk(event.modelId),\n+        ]);\n+        if (!document || !group) {\n+          return;\n+        }\n+\n+        const channels = await this.getDocumentEventChannels(event, document);\n+        socketio.to([...channels, `group-${event.modelId}`]).emit(event.name, {\n+          id: event.data.membershipId,\n+          groupId: event.modelId,\n+          documentId: event.documentId,\n+        });\n+        return;\n+      }\n+\n       case \"collections.create\": {\n         const collection = await Collection.findByPk(event.collectionId, {\n           paranoid: false,\n@@ -284,17 +319,15 @@ export default class WebsocketsProcessor {\n       }\n \n       case \"collections.remove_group\": {\n-        const membership = {\n-          groupId: event.modelId,\n-          collectionId: event.collectionId,\n-          id: event.data.membershipId,\n-        };\n-\n         // let everyone with access to the collection know a group was removed\n         // this includes those in the the group itself\n         socketio\n           .to(`collection-${event.collectionId}`)\n-          .emit(\"collections.remove_group\", membership);\n+          .emit(\"collections.remove_group\", {\n+            groupId: event.modelId,\n+            collectionId: event.collectionId,\n+            id: event.data.membershipId,\n+          });\n \n         await GroupUser.findAllInBatches<GroupUser>(\n           {\n@@ -482,22 +515,28 @@ export default class WebsocketsProcessor {\n           },\n           async (groupMemberships) => {\n             for (const groupMembership of groupMemberships) {\n-              if (!groupMembership.collectionId) {\n-                continue;\n+              if (groupMembership.collectionId) {\n+                socketio\n+                  .to(`user-${event.userId}`)\n+                  .emit(\n+                    \"collections.add_group\",\n+                    presentGroupMembership(groupMembership)\n+                  );\n+\n+                // tell any user clients to connect to the websocket channel for the collection\n+                socketio.to(`user-${event.userId}`).emit(\"join\", {\n+                  event: event.name,\n+                  collectionId: groupMembership.collectionId,\n+                });\n+              }\n+              if (groupMembership.documentId) {\n+                socketio\n+                  .to(`user-${event.userId}`)\n+                  .emit(\n+                    \"documents.add_group\",\n+                    presentGroupMembership(groupMembership)\n+                  );\n               }\n-\n-              socketio\n-                .to(`user-${event.userId}`)\n-                .emit(\n-                  \"collections.add_group\",\n-                  presentGroupMembership(groupMembership)\n-                );\n-\n-              // tell any user clients to connect to the websocket channel for the collection\n-              socketio.to(`user-${event.userId}`).emit(\"join\", {\n-                event: event.name,\n-                collectionId: groupMembership.collectionId,\n-              });\n             }\n           }\n         );\n@@ -595,26 +634,33 @@ export default class WebsocketsProcessor {\n           },\n           async (groupUsers) => {\n             for (const groupMembership of groupMemberships) {\n-              if (!groupMembership.collectionId) {\n-                continue;\n-              }\n               const payload = presentGroupMembership(groupMembership);\n \n-              for (const groupUser of groupUsers) {\n-                socketio\n-                  .to(`user-${groupUser.userId}`)\n-                  .emit(\"collections.remove_group\", payload);\n+              if (groupMembership.collectionId) {\n+                for (const groupUser of groupUsers) {\n+                  socketio\n+                    .to(`user-${groupUser.userId}`)\n+                    .emit(\"collections.remove_group\", payload);\n+\n+                  const collection = await Collection.scope({\n+                    method: [\"withMembership\", groupUser.userId],\n+                  }).findByPk(groupMembership.collectionId);\n+\n+                  if (cannot(groupUser.user, \"read\", collection)) {\n+                    // tell any user clients to disconnect from the websocket channel for the collection\n+                    socketio.to(`user-${groupUser.userId}`).emit(\"leave\", {\n+                      event: event.name,\n+                      collectionId: groupMembership.collectionId,\n+                    });\n+                  }\n+                }\n+              }\n \n-                const collection = await Collection.scope({\n-                  method: [\"withMembership\", groupUser.userId],\n-                }).findByPk(groupMembership.collectionId);\n-\n-                if (cannot(groupUser.user, \"read\", collection)) {\n-                  // tell any user clients to disconnect from the websocket channel for the collection\n-                  socketio.to(`user-${groupUser.userId}`).emit(\"leave\", {\n-                    event: event.name,\n-                    collectionId: groupMembership.collectionId,\n-                  });\n+              if (groupMembership.documentId) {\n+                for (const groupUser of groupUsers) {\n+                  socketio\n+                    .to(`user-${groupUser.userId}`)\n+                    .emit(\"documents.remove_group\", payload);\n                 }\n               }\n             }\n@@ -719,16 +765,27 @@ export default class WebsocketsProcessor {\n       }\n     }\n \n-    const memberships = await UserMembership.findAll({\n-      where: {\n-        documentId: document.id,\n-      },\n-    });\n-\n-    for (const membership of memberships) {\n+    const [userMemberships, groupMemberships] = await Promise.all([\n+      UserMembership.findAll({\n+        where: {\n+          documentId: document.id,\n+        },\n+      }),\n+      GroupMembership.findAll({\n+        where: {\n+          documentId: document.id,\n+        },\n+      }),\n+    ]);\n+\n+    for (const membership of userMemberships) {\n       channels.push(`user-${membership.userId}`);\n     }\n \n-    return channels;\n+    for (const membership of groupMemberships) {\n+      channels.push(`group-${membership.groupId}`);\n+    }\n+\n+    return uniq(channels);\n   }\n }\n\ndiff --git a/server/queues/tasks/DocumentAddGroupNotificationsTask.ts b/server/queues/tasks/DocumentAddGroupNotificationsTask.ts\nnew file mode 100644\nindex 000000000000..0191e407bd1a\n--- /dev/null\n+++ b/server/queues/tasks/DocumentAddGroupNotificationsTask.ts\n@@ -0,0 +1,27 @@\n+import { GroupUser } from \"@server/models\";\n+import { DocumentGroupEvent } from \"@server/types\";\n+import BaseTask, { TaskPriority } from \"./BaseTask\";\n+import DocumentAddUserNotificationsTask from \"./DocumentAddUserNotificationsTask\";\n+\n+export default class DocumentAddGroupNotificationsTask extends BaseTask<DocumentGroupEvent> {\n+  public async perform(event: DocumentGroupEvent) {\n+    const groupUsers = await GroupUser.findAll({\n+      where: {\n+        groupId: event.modelId,\n+      },\n+    });\n+\n+    for (const groupUser of groupUsers) {\n+      await DocumentAddUserNotificationsTask.schedule({\n+        ...event,\n+        userId: groupUser.userId,\n+      });\n+    }\n+  }\n+\n+  public get options() {\n+    return {\n+      priority: TaskPriority.Background,\n+    };\n+  }\n+}\n\ndiff --git a/server/routes/api/auth/auth.ts b/server/routes/api/auth/auth.ts\nindex ad579fe116b9..d19a8ba71dce 100644\n--- a/server/routes/api/auth/auth.ts\n+++ b/server/routes/api/auth/auth.ts\n@@ -14,6 +14,8 @@ import {\n   presentPolicies,\n   presentProviderConfig,\n   presentAvailableTeam,\n+  presentGroup,\n+  presentGroupUser,\n } from \"@server/presenters\";\n import ValidateSSOAccessTask from \"@server/queues/tasks/ValidateSSOAccessTask\";\n import { APIContext } from \"@server/types\";\n@@ -117,10 +119,11 @@ router.post(\"auth.info\", auth(), async (ctx: APIContext<T.AuthInfoReq>) => {\n   const sessions = getSessionsInCookie(ctx);\n   const signedInTeamIds = Object.keys(sessions);\n \n-  const [team, signedInTeams, availableTeams] = await Promise.all([\n+  const [team, groups, signedInTeams, availableTeams] = await Promise.all([\n     Team.scope(\"withDomains\").findByPk(user.teamId, {\n       rejectOnEmpty: true,\n     }),\n+    user.groups(),\n     Team.findAll({\n       where: {\n         id: signedInTeamIds,\n@@ -141,16 +144,19 @@ router.post(\"auth.info\", auth(), async (ctx: APIContext<T.AuthInfoReq>) => {\n         includeDetails: true,\n       }),\n       team: presentTeam(team),\n+      groups: await Promise.all(groups.map(presentGroup)),\n+      groupUsers: groups.map((group) => presentGroupUser(group.groupUsers[0])),\n       collaborationToken: user.getCollaborationToken(),\n       availableTeams: uniqBy([...signedInTeams, ...availableTeams], \"id\").map(\n-        (team) =>\n+        (availableTeam) =>\n           presentAvailableTeam(\n-            team,\n-            signedInTeamIds.includes(team.id) || team.id === user.teamId\n+            availableTeam,\n+            signedInTeamIds.includes(team.id) ||\n+              availableTeam.id === user.teamId\n           )\n       ),\n     },\n-    policies: presentPolicies(user, [team]),\n+    policies: presentPolicies(user, [team, user, ...groups]),\n   };\n });\n \n\ndiff --git a/server/routes/api/collections/collections.ts b/server/routes/api/collections/collections.ts\nindex 0b75087f543f..4b4f9301fda9 100644\n--- a/server/routes/api/collections/collections.ts\n+++ b/server/routes/api/collections/collections.ts\n@@ -217,47 +217,51 @@ router.post(\n   \"collections.add_group\",\n   auth(),\n   validate(T.CollectionsAddGroupSchema),\n+  transaction(),\n   async (ctx: APIContext<T.CollectionsAddGroupsReq>) => {\n     const { id, groupId, permission } = ctx.input.body;\n+    const { transaction } = ctx.state;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(id);\n+    const [collection, group] = await Promise.all([\n+      Collection.scope({\n+        method: [\"withMembership\", user.id],\n+      }).findByPk(id, { transaction }),\n+      Group.findByPk(groupId, { transaction }),\n+    ]);\n     authorize(user, \"update\", collection);\n-\n-    const group = await Group.findByPk(groupId);\n     authorize(user, \"read\", group);\n \n-    let membership = await GroupMembership.findOne({\n+    const [membership] = await GroupMembership.findOrCreate({\n       where: {\n         collectionId: id,\n         groupId,\n       },\n-    });\n-\n-    if (!membership) {\n-      membership = await GroupMembership.create({\n-        collectionId: id,\n-        groupId,\n+      defaults: {\n         permission,\n         createdById: user.id,\n-      });\n-    } else {\n-      membership.permission = permission;\n-      await membership.save();\n-    }\n-\n-    await Event.createFromContext(ctx, {\n-      name: \"collections.add_group\",\n-      collectionId: collection.id,\n-      modelId: groupId,\n-      data: {\n-        name: group.name,\n-        membershipId: membership.id,\n       },\n+      transaction,\n+      lock: transaction.LOCK.UPDATE,\n     });\n \n+    membership.permission = permission;\n+    await membership.save({ transaction });\n+\n+    await Event.createFromContext(\n+      ctx,\n+      {\n+        name: \"collections.add_group\",\n+        collectionId: collection.id,\n+        modelId: groupId,\n+        data: {\n+          name: group.name,\n+          membershipId: membership.id,\n+        },\n+      },\n+      { transaction }\n+    );\n+\n     const groupMemberships = [presentGroupMembership(membership)];\n \n     ctx.body = {\n@@ -280,12 +284,17 @@ router.post(\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n \n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(id, { transaction });\n+    const [collection, group] = await Promise.all([\n+      Collection.scope({\n+        method: [\"withMembership\", user.id],\n+      }).findByPk(id, {\n+        transaction,\n+      }),\n+      Group.findByPk(groupId, {\n+        transaction,\n+      }),\n+    ]);\n     authorize(user, \"update\", collection);\n-\n-    const group = await Group.findByPk(groupId, { transaction });\n     authorize(user, \"read\", group);\n \n     const [membership] = await collection.$get(\"groupMemberships\", {\n@@ -297,7 +306,13 @@ router.post(\n       ctx.throw(400, \"This Group is not a part of the collection\");\n     }\n \n-    await collection.$remove(\"group\", group);\n+    await GroupMembership.destroy({\n+      where: {\n+        collectionId: id,\n+        groupId,\n+      },\n+      transaction,\n+    });\n     await Event.createFromContext(\n       ctx,\n       {\n@@ -322,8 +337,8 @@ router.post(\n   \"collections.group_memberships\",\n   auth(),\n   pagination(),\n-  validate(T.CollectionsGroupMembershipsSchema),\n-  async (ctx: APIContext<T.CollectionsGroupMembershipsReq>) => {\n+  validate(T.CollectionsMembershipsSchema),\n+  async (ctx: APIContext<T.CollectionsMembershipsReq>) => {\n     const { id, query, permission } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n@@ -391,19 +406,20 @@ router.post(\n   \"collections.add_user\",\n   auth(),\n   rateLimiter(RateLimiterStrategy.OneHundredPerHour),\n-  transaction(),\n   validate(T.CollectionsAddUserSchema),\n+  transaction(),\n   async (ctx: APIContext<T.CollectionsAddUserReq>) => {\n     const { auth, transaction } = ctx.state;\n     const actor = auth.user;\n     const { id, userId, permission } = ctx.input.body;\n \n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", actor.id],\n-    }).findByPk(id, { transaction });\n+    const [collection, user] = await Promise.all([\n+      Collection.scope({\n+        method: [\"withMembership\", actor.id],\n+      }).findByPk(id, { transaction }),\n+      User.findByPk(userId, { transaction }),\n+    ]);\n     authorize(actor, \"update\", collection);\n-\n-    const user = await User.findByPk(userId);\n     authorize(actor, \"read\", user);\n \n     const [membership, isNew] = await UserMembership.findOrCreate({\n@@ -460,12 +476,13 @@ router.post(\n     const actor = auth.user;\n     const { id, userId } = ctx.input.body;\n \n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", actor.id],\n-    }).findByPk(id, { transaction });\n+    const [collection, user] = await Promise.all([\n+      Collection.scope({\n+        method: [\"withMembership\", actor.id],\n+      }).findByPk(id, { transaction }),\n+      User.findByPk(userId, { transaction }),\n+    ]);\n     authorize(actor, \"update\", collection);\n-\n-    const user = await User.findByPk(userId, { transaction });\n     authorize(actor, \"read\", user);\n \n     const [membership] = await collection.$get(\"memberships\", {\n\ndiff --git a/server/routes/api/collections/schema.ts b/server/routes/api/collections/schema.ts\nindex 6cc742a87e37..d1b5f15d0137 100644\n--- a/server/routes/api/collections/schema.ts\n+++ b/server/routes/api/collections/schema.ts\n@@ -94,17 +94,6 @@ export type CollectionsRemoveGroupReq = z.infer<\n   typeof CollectionsRemoveGroupSchema\n >;\n \n-export const CollectionsGroupMembershipsSchema = BaseSchema.extend({\n-  body: BaseIdSchema.extend({\n-    query: z.string().optional(),\n-    permission: z.nativeEnum(CollectionPermission).optional(),\n-  }),\n-});\n-\n-export type CollectionsGroupMembershipsReq = z.infer<\n-  typeof CollectionsGroupMembershipsSchema\n->;\n-\n export const CollectionsAddUserSchema = BaseSchema.extend({\n   body: BaseIdSchema.extend({\n     userId: z.string().uuid(),\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 244dfdf945ad..af850e1b4446 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -43,6 +43,9 @@ import {\n   User,\n   View,\n   UserMembership,\n+  Group,\n+  GroupUser,\n+  GroupMembership,\n } from \"@server/models\";\n import AttachmentHelper from \"@server/models/helpers/AttachmentHelper\";\n import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n@@ -57,6 +60,8 @@ import {\n   presentMembership,\n   presentPublicTeam,\n   presentUser,\n+  presentGroupMembership,\n+  presentGroup,\n } from \"@server/presenters\";\n import DocumentImportTask, {\n   DocumentImportTaskResponse,\n@@ -142,14 +147,36 @@ router.post(\n     }\n \n     if (parentDocumentId) {\n-      const membership = await UserMembership.findOne({\n-        where: {\n-          userId: user.id,\n-          documentId: parentDocumentId,\n-        },\n-      });\n+      const [groupMembership, membership] = await Promise.all([\n+        GroupMembership.findOne({\n+          where: {\n+            documentId: parentDocumentId,\n+          },\n+          include: [\n+            {\n+              model: Group,\n+              required: true,\n+              include: [\n+                {\n+                  model: GroupUser,\n+                  required: true,\n+                  where: {\n+                    userId: user.id,\n+                  },\n+                },\n+              ],\n+            },\n+          ],\n+        }),\n+        UserMembership.findOne({\n+          where: {\n+            userId: user.id,\n+            documentId: parentDocumentId,\n+          },\n+        }),\n+      ]);\n \n-      if (membership) {\n+      if (groupMembership || membership) {\n         delete where.collectionId;\n       }\n \n@@ -1491,7 +1518,9 @@ router.post(\n       transaction,\n     });\n \n-    document.collection = collection;\n+    if (collection) {\n+      document.collection = collection;\n+    }\n \n     ctx.body = {\n       data: await presentDocument(ctx, document),\n@@ -1607,8 +1636,8 @@ router.post(\n   validate(T.DocumentsRemoveUserSchema),\n   transaction(),\n   async (ctx: APIContext<T.DocumentsRemoveUserReq>) => {\n-    const { auth, transaction } = ctx.state;\n-    const actor = auth.user;\n+    const { transaction } = ctx.state;\n+    const { user: actor } = ctx.state.auth;\n     const { id, userId } = ctx.input.body;\n \n     const [document, user] = await Promise.all([\n@@ -1657,6 +1686,132 @@ router.post(\n   }\n );\n \n+router.post(\n+  \"documents.add_group\",\n+  auth(),\n+  validate(T.DocumentsAddGroupSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.DocumentsAddGroupsReq>) => {\n+    const { id, groupId, permission } = ctx.input.body;\n+    const { transaction } = ctx.state;\n+    const { user } = ctx.state.auth;\n+\n+    const [document, group] = await Promise.all([\n+      Document.findByPk(id, {\n+        userId: user.id,\n+        rejectOnEmpty: true,\n+        transaction,\n+      }),\n+      Group.findByPk(groupId, {\n+        rejectOnEmpty: true,\n+        transaction,\n+      }),\n+    ]);\n+    authorize(user, \"update\", document);\n+    authorize(user, \"read\", group);\n+\n+    const [membership, isNew] = await GroupMembership.findOrCreate({\n+      where: {\n+        documentId: id,\n+        groupId,\n+      },\n+      defaults: {\n+        permission: permission || user.defaultDocumentPermission,\n+        createdById: user.id,\n+      },\n+      lock: transaction.LOCK.UPDATE,\n+      transaction,\n+    });\n+\n+    if (permission) {\n+      membership.permission = permission;\n+\n+      // disconnect from the source if the permission is manually updated\n+      membership.sourceId = null;\n+\n+      await membership.save({ transaction });\n+    }\n+\n+    await Event.createFromContext(\n+      ctx,\n+      {\n+        name: \"documents.add_group\",\n+        documentId: document.id,\n+        modelId: groupId,\n+        data: {\n+          title: document.title,\n+          isNew,\n+          permission: membership.permission,\n+          membershipId: membership.id,\n+        },\n+      },\n+      { transaction }\n+    );\n+\n+    ctx.body = {\n+      data: {\n+        groupMemberships: [presentGroupMembership(membership)],\n+      },\n+    };\n+  }\n+);\n+\n+router.post(\n+  \"documents.remove_group\",\n+  auth(),\n+  validate(T.DocumentsRemoveGroupSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.DocumentsRemoveGroupReq>) => {\n+    const { transaction } = ctx.state;\n+    const { user } = ctx.state.auth;\n+    const { id, groupId } = ctx.input.body;\n+\n+    const [document, group] = await Promise.all([\n+      Document.findByPk(id, {\n+        userId: user.id,\n+        rejectOnEmpty: true,\n+        transaction,\n+      }),\n+      Group.findByPk(groupId, {\n+        rejectOnEmpty: true,\n+        transaction,\n+      }),\n+    ]);\n+    authorize(user, \"update\", document);\n+    authorize(user, \"read\", group);\n+\n+    const membership = await GroupMembership.findOne({\n+      where: {\n+        documentId: id,\n+        groupId,\n+      },\n+      transaction,\n+      lock: transaction.LOCK.UPDATE,\n+      rejectOnEmpty: true,\n+    });\n+\n+    await membership.destroy({ transaction });\n+\n+    await Event.createFromContext(\n+      ctx,\n+      {\n+        name: \"documents.remove_group\",\n+        documentId: document.id,\n+        modelId: groupId,\n+        data: {\n+          name: group.name,\n+          membershipId: membership.id,\n+        },\n+      },\n+      { transaction }\n+    );\n+\n+    ctx.body = {\n+      success: true,\n+    };\n+  }\n+);\n+\n router.post(\n   \"documents.memberships\",\n   auth(),\n@@ -1718,6 +1873,71 @@ router.post(\n   }\n );\n \n+router.post(\n+  \"documents.group_memberships\",\n+  auth(),\n+  pagination(),\n+  validate(T.DocumentsMembershipsSchema),\n+  async (ctx: APIContext<T.DocumentsMembershipsReq>) => {\n+    const { id, query, permission } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+\n+    const document = await Document.findByPk(id, { userId: user.id });\n+    authorize(user, \"update\", document);\n+\n+    let where: WhereOptions<GroupMembership> = {\n+      documentId: id,\n+    };\n+    let groupWhere;\n+\n+    if (query) {\n+      groupWhere = {\n+        name: {\n+          [Op.iLike]: `%${query}%`,\n+        },\n+      };\n+    }\n+\n+    if (permission) {\n+      where = { ...where, permission };\n+    }\n+\n+    const options = {\n+      where,\n+      include: [\n+        {\n+          model: Group,\n+          as: \"group\",\n+          where: groupWhere,\n+          required: true,\n+        },\n+      ],\n+    };\n+\n+    const [total, memberships] = await Promise.all([\n+      GroupMembership.count(options),\n+      GroupMembership.findAll({\n+        ...options,\n+        order: [[\"createdAt\", \"DESC\"]],\n+        offset: ctx.state.pagination.offset,\n+        limit: ctx.state.pagination.limit,\n+      }),\n+    ]);\n+\n+    const groupMemberships = memberships.map(presentGroupMembership);\n+\n+    ctx.body = {\n+      pagination: { ...ctx.state.pagination, total },\n+      data: {\n+        groupMemberships,\n+        groups: await Promise.all(\n+          memberships.map((membership) => presentGroup(membership.group))\n+        ),\n+      },\n+    };\n+  }\n+);\n+\n router.post(\n   \"documents.empty_trash\",\n   auth({ role: UserRole.Admin }),\n\ndiff --git a/server/routes/api/documents/schema.ts b/server/routes/api/documents/schema.ts\nindex 4a70787e6303..22b8b39acfcc 100644\n--- a/server/routes/api/documents/schema.ts\n+++ b/server/routes/api/documents/schema.ts\n@@ -394,6 +394,27 @@ export const DocumentsRemoveUserSchema = BaseSchema.extend({\n \n export type DocumentsRemoveUserReq = z.infer<typeof DocumentsRemoveUserSchema>;\n \n+export const DocumentsAddGroupSchema = BaseSchema.extend({\n+  body: BaseIdSchema.extend({\n+    groupId: z.string().uuid(),\n+    permission: z\n+      .nativeEnum(DocumentPermission)\n+      .default(DocumentPermission.ReadWrite),\n+  }),\n+});\n+\n+export type DocumentsAddGroupsReq = z.infer<typeof DocumentsAddGroupSchema>;\n+\n+export const DocumentsRemoveGroupSchema = BaseSchema.extend({\n+  body: BaseIdSchema.extend({\n+    groupId: z.string().uuid(),\n+  }),\n+});\n+\n+export type DocumentsRemoveGroupReq = z.infer<\n+  typeof DocumentsRemoveGroupSchema\n+>;\n+\n export const DocumentsSharedWithUserSchema = BaseSchema.extend({\n   body: DocumentsSortParamsSchema,\n });\n@@ -403,8 +424,7 @@ export type DocumentsSharedWithUserReq = z.infer<\n >;\n \n export const DocumentsMembershipsSchema = BaseSchema.extend({\n-  body: z.object({\n-    id: z.string().uuid(),\n+  body: BaseIdSchema.extend({\n     query: z.string().optional(),\n     permission: z.nativeEnum(DocumentPermission).optional(),\n   }),\n\ndiff --git a/server/routes/api/groupMemberships/groupMemberships.ts b/server/routes/api/groupMemberships/groupMemberships.ts\nnew file mode 100644\nindex 000000000000..4fdd3f239cd9\n--- /dev/null\n+++ b/server/routes/api/groupMemberships/groupMemberships.ts\n@@ -0,0 +1,94 @@\n+import Router from \"koa-router\";\n+import uniqBy from \"lodash/uniqBy\";\n+import { Op } from \"sequelize\";\n+import auth from \"@server/middlewares/authentication\";\n+import validate from \"@server/middlewares/validate\";\n+import { Document, GroupMembership } from \"@server/models\";\n+import {\n+  presentDocument,\n+  presentGroup,\n+  presentGroupMembership,\n+  presentPolicies,\n+} from \"@server/presenters\";\n+import { APIContext } from \"@server/types\";\n+import pagination from \"../middlewares/pagination\";\n+import * as T from \"./schema\";\n+\n+const router = new Router();\n+\n+router.post(\n+  \"groupMemberships.list\",\n+  auth(),\n+  pagination(),\n+  validate(T.GroupMembershipsListSchema),\n+  async (ctx: APIContext<T.GroupMembershipsListReq>) => {\n+    const { groupId } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+\n+    const memberships = await GroupMembership.findAll({\n+      where: {\n+        documentId: {\n+          [Op.ne]: null,\n+        },\n+        sourceId: {\n+          [Op.eq]: null,\n+        },\n+      },\n+      include: [\n+        {\n+          association: \"group\",\n+          required: true,\n+          where: groupId ? { id: groupId } : undefined,\n+          include: [\n+            {\n+              association: \"groupUsers\",\n+              required: true,\n+              where: {\n+                userId: user.id,\n+              },\n+            },\n+          ],\n+        },\n+      ],\n+      offset: ctx.state.pagination.offset,\n+      limit: ctx.state.pagination.limit,\n+    });\n+\n+    const documentIds = memberships\n+      .map((p) => p.documentId)\n+      .filter(Boolean) as string[];\n+    const documents = await Document.scope([\n+      \"withDrafts\",\n+      { method: [\"withMembership\", user.id] },\n+      { method: [\"withCollectionPermissions\", user.id] },\n+    ]).findAll({\n+      where: {\n+        id: documentIds,\n+      },\n+    });\n+\n+    const groups = uniqBy(\n+      memberships.map((membership) => membership.group),\n+      \"id\"\n+    );\n+    const policies = presentPolicies(user, [\n+      ...documents,\n+      ...memberships,\n+      ...groups,\n+    ]);\n+\n+    ctx.body = {\n+      pagination: ctx.state.pagination,\n+      data: {\n+        groups: await Promise.all(groups.map(presentGroup)),\n+        groupMemberships: memberships.map(presentGroupMembership),\n+        documents: await Promise.all(\n+          documents.map((document: Document) => presentDocument(ctx, document))\n+        ),\n+      },\n+      policies,\n+    };\n+  }\n+);\n+\n+export default router;\n\ndiff --git a/server/routes/api/groupMemberships/index.ts b/server/routes/api/groupMemberships/index.ts\nnew file mode 100644\nindex 000000000000..5fb034e79769\n--- /dev/null\n+++ b/server/routes/api/groupMemberships/index.ts\n@@ -0,0 +1 @@\n+export { default } from \"./groupMemberships\";\n\ndiff --git a/server/routes/api/groupMemberships/schema.ts b/server/routes/api/groupMemberships/schema.ts\nnew file mode 100644\nindex 000000000000..6229215dff4d\n--- /dev/null\n+++ b/server/routes/api/groupMemberships/schema.ts\n@@ -0,0 +1,12 @@\n+import { z } from \"zod\";\n+import { BaseSchema } from \"@server/routes/api/schema\";\n+\n+export const GroupMembershipsListSchema = BaseSchema.extend({\n+  body: z.object({\n+    groupId: z.string().uuid().optional(),\n+  }),\n+});\n+\n+export type GroupMembershipsListReq = z.infer<\n+  typeof GroupMembershipsListSchema\n+>;\n\ndiff --git a/server/routes/api/index.ts b/server/routes/api/index.ts\nindex da607fd5ee26..b5647e868591 100644\n--- a/server/routes/api/index.ts\n+++ b/server/routes/api/index.ts\n@@ -18,6 +18,7 @@ import developer from \"./developer\";\n import documents from \"./documents\";\n import events from \"./events\";\n import fileOperationsRoute from \"./fileOperations\";\n+import groupMemberships from \"./groupMemberships\";\n import groups from \"./groups\";\n import integrations from \"./integrations\";\n import apiResponse from \"./middlewares/apiResponse\";\n@@ -85,6 +86,7 @@ router.use(\"/\", notifications.routes());\n router.use(\"/\", attachments.routes());\n router.use(\"/\", cron.routes());\n router.use(\"/\", groups.routes());\n+router.use(\"/\", groupMemberships.routes());\n router.use(\"/\", fileOperationsRoute.routes());\n router.use(\"/\", urls.routes());\n router.use(\"/\", userMemberships.routes());\n\ndiff --git a/server/types.ts b/server/types.ts\nindex 46b2c9218dd1..062f31c8f0b0 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -275,7 +275,12 @@ export type DocumentGroupEvent = BaseEvent<GroupMembership> & {\n   name: \"documents.add_group\" | \"documents.remove_group\";\n   documentId: string;\n   modelId: string;\n-  data: { name: string };\n+  data: {\n+    title: string;\n+    isNew?: boolean;\n+    permission?: DocumentPermission;\n+    membershipId: string;\n+  };\n };\n \n export type CollectionEvent = BaseEvent<Collection> &\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 1730b9b50f42..ea02651c4a80 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -312,6 +312,8 @@\n   \"Has access through <2>parent</2>\": \"Has access through <2>parent</2>\",\n   \"Suspended\": \"Suspended\",\n   \"Invited\": \"Invited\",\n+  \"Active <1></1> ago\": \"Active <1></1> ago\",\n+  \"Never signed in\": \"Never signed in\",\n   \"Leave\": \"Leave\",\n   \"Only lowercase letters, digits and dashes allowed\": \"Only lowercase letters, digits and dashes allowed\",\n   \"Sorry, this link has already been used\": \"Sorry, this link has already been used\",\n@@ -322,9 +324,11 @@\n   \"Allow anyone with the link to access\": \"Allow anyone with the link to access\",\n   \"Publish to internet\": \"Publish to internet\",\n   \"Nested documents are not shared on the web. Toggle sharing to enable access, this will be the default behavior in the future\": \"Nested documents are not shared on the web. Toggle sharing to enable access, this will be the default behavior in the future\",\n-  \"{{ userName }} was invited to the document\": \"{{ userName }} was invited to the document\",\n-  \"{{ count }} people invited to the document\": \"{{ count }} people invited to the document\",\n-  \"{{ count }} people invited to the document_plural\": \"{{ count }} people invited to the document\",\n+  \"{{ userName }} was added to the document\": \"{{ userName }} was added to the document\",\n+  \"{{ count }} people added to the document\": \"{{ count }} people added to the document\",\n+  \"{{ count }} people added to the document_plural\": \"{{ count }} people added to the document\",\n+  \"{{ count }} groups added to the document\": \"{{ count }} groups added to the document\",\n+  \"{{ count }} groups added to the document_plural\": \"{{ count }} groups added to the document\",\n   \"Logo\": \"Logo\",\n   \"Move document\": \"Move document\",\n   \"New doc\": \"New doc\",\n@@ -666,8 +670,6 @@\n   \"Search people\": \"Search people\",\n   \"No people matching your search\": \"No people matching your search\",\n   \"No people left to add\": \"No people left to add\",\n-  \"Active <1></1> ago\": \"Active <1></1> ago\",\n-  \"Never signed in\": \"Never signed in\",\n   \"Admin\": \"Admin\",\n   \"{{userName}} was removed from the group\": \"{{userName}} was removed from the group\",\n   \"Add and remove members to the <em>{{groupName}}</em> group. Members of the group will have access to any collections this group has been added to.\": \"Add and remove members to the <em>{{groupName}}</em> group. Members of the group will have access to any collections this group has been added to.\",\n",
    "test_patch": "diff --git a/server/routes/api/collections/collections.test.ts b/server/routes/api/collections/collections.test.ts\nindex 6e08b9f51cd3..c3ca6b72afe4 100644\n--- a/server/routes/api/collections/collections.test.ts\n+++ b/server/routes/api/collections/collections.test.ts\n@@ -645,8 +645,8 @@ describe(\"#collections.remove_group\", () => {\n         groupId: group.id,\n       },\n     });\n-    let users = await collection.$get(\"groups\");\n-    expect(users.length).toEqual(1);\n+    let groups = await collection.$get(\"groups\");\n+    expect(groups.length).toEqual(1);\n     const res = await server.post(\"/api/collections.remove_group\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -654,9 +654,9 @@ describe(\"#collections.remove_group\", () => {\n         groupId: group.id,\n       },\n     });\n-    users = await collection.$get(\"groups\");\n+    groups = await collection.$get(\"groups\");\n     expect(res.status).toEqual(200);\n-    expect(users.length).toEqual(0);\n+    expect(groups.length).toEqual(0);\n   });\n \n   it(\"should require group in team\", async () => {\n\ndiff --git a/server/routes/api/groupMemberships/groupMemberships.test.ts b/server/routes/api/groupMemberships/groupMemberships.test.ts\nnew file mode 100644\nindex 000000000000..8ccd01147e3c\n--- /dev/null\n+++ b/server/routes/api/groupMemberships/groupMemberships.test.ts\n@@ -0,0 +1,70 @@\n+import { GroupUser } from \"@server/models\";\n+import {\n+  buildCollection,\n+  buildDocument,\n+  buildGroup,\n+  buildUser,\n+} from \"@server/test/factories\";\n+import { getTestServer } from \"@server/test/support\";\n+\n+const server = getTestServer();\n+\n+describe(\"groupMemberships.list\", () => {\n+  it(\"should require authentication\", async () => {\n+    const res = await server.post(\"/api/groupMemberships.list\", {\n+      body: {},\n+    });\n+    expect(res.status).toEqual(401);\n+  });\n+\n+  it(\"should return the list of docs shared with group\", async () => {\n+    const user = await buildUser();\n+    const collection = await buildCollection({\n+      teamId: user.teamId,\n+      createdById: user.id,\n+      permission: null,\n+    });\n+    const document = await buildDocument({\n+      collectionId: collection.id,\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+    const group = await buildGroup({\n+      teamId: user.teamId,\n+    });\n+    const member = await buildUser({\n+      teamId: user.teamId,\n+    });\n+    await GroupUser.create({\n+      groupId: group.id,\n+      userId: member.id,\n+      createdById: user.id,\n+    });\n+\n+    await server.post(\"/api/documents.add_group\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+        groupId: group.id,\n+      },\n+    });\n+\n+    const res = await server.post(\"/api/groupMemberships.list\", {\n+      body: {\n+        token: member.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).not.toBeFalsy();\n+    expect(body.data.documents).not.toBeFalsy();\n+    expect(body.data.documents).toHaveLength(1);\n+    expect(body.data.groupMemberships).not.toBeFalsy();\n+    expect(body.data.groupMemberships).toHaveLength(1);\n+    const sharedDoc = body.data.documents[0];\n+    expect(sharedDoc.id).toEqual(document.id);\n+    expect(sharedDoc.id).toEqual(body.data.groupMemberships[0].documentId);\n+    expect(body.data.groupMemberships[0].groupId).toEqual(group.id);\n+    expect(body.policies).not.toBeFalsy();\n+  });\n+});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7274",
    "pr_id": 7274,
    "issue_id": 6174,
    "repo": "outline/outline",
    "problem_statement": "`JSONImportTask` should not go through Markdown converter\nFollow on from https://github.com/outline/outline/pull/5553 – we need to avoid the markdown translation to avoid lossyness going forward.",
    "issue_word_count": 22,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "server/queues/tasks/ImportJSONTask.test.ts",
      "server/queues/tasks/ImportJSONTask.ts",
      "server/queues/tasks/ImportTask.ts",
      "server/test/fixtures/outline-json.zip"
    ],
    "pr_changed_test_files": [
      "server/queues/tasks/ImportJSONTask.test.ts",
      "server/test/fixtures/outline-json.zip"
    ],
    "base_commit": "88f405375cdda04a899f2f38533e81558c481772",
    "head_commit": "50b50794a39c48f13367348281b13c00f509c8c9",
    "repo_url": "https://github.com/outline/outline/pull/7274",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7274",
    "dockerfile": "",
    "pr_merged_at": "2024-10-10T02:04:04.000Z",
    "patch": "diff --git a/server/queues/tasks/ImportJSONTask.ts b/server/queues/tasks/ImportJSONTask.ts\nindex ad204dadedd6..af81f1d76b9b 100644\n--- a/server/queues/tasks/ImportJSONTask.ts\n+++ b/server/queues/tasks/ImportJSONTask.ts\n@@ -1,13 +1,13 @@\n import path from \"path\";\n import fs from \"fs-extra\";\n-import escapeRegExp from \"lodash/escapeRegExp\";\n import find from \"lodash/find\";\n import mime from \"mime-types\";\n-import { Node } from \"prosemirror-model\";\n+import { Fragment, Node } from \"prosemirror-model\";\n import { v4 as uuidv4 } from \"uuid\";\n+import { ProsemirrorData } from \"@shared/types\";\n import { schema, serializer } from \"@server/editor\";\n import Logger from \"@server/logging/Logger\";\n-import { FileOperation } from \"@server/models\";\n+import { Attachment, FileOperation } from \"@server/models\";\n import {\n   AttachmentJSONExport,\n   CollectionJSONExport,\n@@ -76,9 +76,10 @@ export default class ImportJSONTask extends ImportTask {\n         output.documents.push({\n           ...node,\n           path: \"\",\n-          // TODO: This is kind of temporary, we can import the document\n-          // structure directly in the future.\n+          // populate text to maintain consistency with existing data.\n+          // moving forward, `data` field will be used.\n           text: serializer.serialize(Node.fromJSON(schema, node.data)),\n+          data: node.data,\n           icon: node.icon ?? node.emoji,\n           color: node.color,\n           createdAt: node.createdAt ? new Date(node.createdAt) : undefined,\n@@ -151,21 +152,81 @@ export default class ImportJSONTask extends ImportTask {\n       }\n     }\n \n-    // Check all of the attachments we've created against urls in the text\n-    // and replace them out with attachment redirect urls before continuing.\n-    for (const document of output.documents) {\n-      for (const attachment of output.attachments) {\n-        const encodedPath = encodeURI(\n-          `/api/attachments.redirect?id=${attachment.externalId}`\n-        );\n-\n-        document.text = document.text.replace(\n-          new RegExp(escapeRegExp(encodedPath), \"g\"),\n-          `<<${attachment.id}>>`\n-        );\n-      }\n+    // Check all of the attachments we've created against urls and\n+    // replace them with the correct redirect urls before continuing.\n+    if (output.attachments.length) {\n+      this.replaceAttachmentURLs(output);\n     }\n \n     return output;\n   }\n+\n+  private replaceAttachmentURLs(output: StructuredImportData) {\n+    const attachmentTypes = [\"attachment\", \"image\", \"video\"];\n+    const urlRegex = /\\/api\\/attachments.redirect\\?id=(.+)/;\n+\n+    const attachmentExternalIdMap = output.attachments.reduce(\n+      (obj, attachment) => {\n+        if (attachment.externalId) {\n+          obj[attachment.externalId] = attachment;\n+        }\n+        return obj;\n+      },\n+      {} as Record<string, StructuredImportData[\"attachments\"][number]>\n+    );\n+\n+    const getRedirectPath = (existingPath?: string): string | undefined => {\n+      if (!existingPath) {\n+        return;\n+      }\n+\n+      const match = existingPath.match(urlRegex);\n+      if (!match) {\n+        return existingPath;\n+      }\n+\n+      const attachment = attachmentExternalIdMap[match[1]];\n+      // maintain the existing behaviour of using existingPath when attachment id is not present.\n+      return attachment\n+        ? Attachment.getRedirectUrl(attachment.id)\n+        : existingPath;\n+    };\n+\n+    const transformAttachmentNode = (node: Node): Node => {\n+      const json = node.toJSON() as ProsemirrorData;\n+      const attrs = json.attrs ?? {};\n+\n+      if (node.type.name === \"attachment\") {\n+        // attachment node uses 'href' attribute\n+        attrs.href = getRedirectPath(attrs.href as string);\n+      } else if (node.type.name === \"image\" || node.type.name === \"video\") {\n+        // image & video nodes use 'src' attribute\n+        attrs.src = getRedirectPath(attrs.src as string);\n+      }\n+\n+      json.attrs = attrs;\n+      return Node.fromJSON(schema, json);\n+    };\n+\n+    const transformFragment = (fragment: Fragment): Fragment => {\n+      const nodes: Node[] = [];\n+\n+      fragment.forEach((node) => {\n+        nodes.push(\n+          attachmentTypes.includes(node.type.name)\n+            ? transformAttachmentNode(node)\n+            : node.copy(transformFragment(node.content))\n+        );\n+      });\n+\n+      return Fragment.fromArray(nodes);\n+    };\n+\n+    for (const document of output.documents) {\n+      const node = Node.fromJSON(schema, document.data);\n+      const transformedNode = node.copy(transformFragment(node.content));\n+      document.data = transformedNode;\n+      document.text = serializer.serialize(transformedNode);\n+    }\n+  }\n }\n\ndiff --git a/server/queues/tasks/ImportTask.ts b/server/queues/tasks/ImportTask.ts\nindex 2a8c5f1a5b9c..5d15772004f8 100644\n--- a/server/queues/tasks/ImportTask.ts\n+++ b/server/queues/tasks/ImportTask.ts\n@@ -9,6 +9,7 @@ import {\n   CollectionPermission,\n   CollectionSort,\n   FileOperationState,\n+  ProsemirrorData,\n } from \"@shared/types\";\n import { CollectionValidation } from \"@shared/validations\";\n import attachmentCreator from \"@server/commands/attachmentCreator\";\n@@ -459,6 +460,7 @@ export default abstract class ImportTask extends BaseTask<Props> {\n               title: item.title,\n               urlId: item.urlId,\n               text,\n+              content: item.data ? (item.data as ProsemirrorData) : undefined,\n               collectionId: item.collectionId,\n               createdAt: item.createdAt,\n               updatedAt: item.updatedAt ?? item.createdAt,\n",
    "test_patch": "diff --git a/server/queues/tasks/ImportJSONTask.test.ts b/server/queues/tasks/ImportJSONTask.test.ts\nnew file mode 100644\nindex 000000000000..de768ef202ea\n--- /dev/null\n+++ b/server/queues/tasks/ImportJSONTask.test.ts\n@@ -0,0 +1,37 @@\n+import path from \"path\";\n+import { FileOperation } from \"@server/models\";\n+import { buildFileOperation } from \"@server/test/factories\";\n+import ImportJSONTask from \"./ImportJSONTask\";\n+\n+describe(\"ImportJSONTask\", () => {\n+  it(\"should import the documents, attachments\", async () => {\n+    const fileOperation = await buildFileOperation();\n+    Object.defineProperty(fileOperation, \"handle\", {\n+      get() {\n+        return {\n+          path: path.resolve(\n+            __dirname,\n+            \"..\",\n+            \"..\",\n+            \"test\",\n+            \"fixtures\",\n+            \"outline-json.zip\"\n+          ),\n+          cleanup: async () => {},\n+        };\n+      },\n+    });\n+    jest.spyOn(FileOperation, \"findByPk\").mockResolvedValue(fileOperation);\n+\n+    const props = {\n+      fileOperationId: fileOperation.id,\n+    };\n+\n+    const task = new ImportJSONTask();\n+    const response = await task.perform(props);\n+\n+    expect(response.collections.size).toEqual(1);\n+    expect(response.documents.size).toEqual(2);\n+    expect(response.attachments.size).toEqual(1);\n+  });\n+});\n\ndiff --git a/server/test/fixtures/outline-json.zip b/server/test/fixtures/outline-json.zip\nnew file mode 100644\nindex 000000000000..a9fe2dec430a\nBinary files /dev/null and b/server/test/fixtures/outline-json.zip differ\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7266",
    "pr_id": 7266,
    "issue_id": 3141,
    "repo": "outline/outline",
    "problem_statement": "Archive collections\n### Discussed in https://github.com/outline/outline/discussions/3138\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **michaelkarrer81** February 16, 2022</sup>\r\nWe use collections often as a \"Project Wiki\". After a project is done we would like to archive the full collectrion with all of it's content. It might be used as a reference in the future but only in very rare occasions. </div>",
    "issue_word_count": 67,
    "test_files_count": 3,
    "non_test_files_count": 27,
    "pr_changed_files": [
      "app/actions/definitions/collections.tsx",
      "app/components/CollectionBreadcrumb.tsx",
      "app/components/Sidebar/App.tsx",
      "app/components/Sidebar/components/ArchiveLink.tsx",
      "app/components/Sidebar/components/ArchivedCollectionLink.tsx",
      "app/components/Sidebar/components/CollectionLink.tsx",
      "app/components/Sidebar/components/Collections.tsx",
      "app/components/Sidebar/hooks/useDragAndDrop.tsx",
      "app/components/WebsocketProvider.tsx",
      "app/menus/CollectionMenu.tsx",
      "app/menus/DocumentMenu.tsx",
      "app/models/Collection.ts",
      "app/models/base/ArchivableModel.ts",
      "app/scenes/Collection/components/Notices.tsx",
      "app/scenes/Collection/index.tsx",
      "app/stores/CollectionsStore.ts",
      "app/stores/DocumentsStore.ts",
      "plugins/webhooks/server/tasks/DeliverWebhookTask.ts",
      "server/migrations/20240717061527-add-column-archivedAt-collections.js",
      "server/migrations/20240809054702-add-column-archivedById-to-collections.js",
      "server/models/Collection.test.ts",
      "server/models/Collection.ts",
      "server/models/Document.ts",
      "server/policies/collection.test.ts",
      "server/policies/collection.ts",
      "server/presenters/collection.ts",
      "server/queues/processors/WebsocketsProcessor.ts",
      "server/routes/api/collections/collections.test.ts",
      "server/routes/api/collections/collections.ts",
      "server/routes/api/collections/schema.ts"
    ],
    "pr_changed_test_files": [
      "server/models/Collection.test.ts",
      "server/policies/collection.test.ts",
      "server/routes/api/collections/collections.test.ts"
    ],
    "base_commit": "be5f092117acc29feeb8dfb28c2ab51548f9b428",
    "head_commit": "e5babb8028aa30eab6bf367b9af217b0e37c21f4",
    "repo_url": "https://github.com/outline/outline/pull/7266",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7266",
    "dockerfile": "",
    "pr_merged_at": "2024-10-06T12:37:11.000Z",
    "patch": "diff --git a/app/actions/definitions/collections.tsx b/app/actions/definitions/collections.tsx\nindex 6ab1e5d6d0fa..d0f4af58907b 100644\n--- a/app/actions/definitions/collections.tsx\n+++ b/app/actions/definitions/collections.tsx\n@@ -1,8 +1,10 @@\n import {\n+  ArchiveIcon,\n   CollectionIcon,\n   EditIcon,\n   PadlockIcon,\n   PlusIcon,\n+  RestoreIcon,\n   SearchIcon,\n   ShapesIcon,\n   StarredIcon,\n@@ -10,11 +12,13 @@ import {\n   UnstarredIcon,\n } from \"outline-icons\";\n import * as React from \"react\";\n+import { toast } from \"sonner\";\n import stores from \"~/stores\";\n import Collection from \"~/models/Collection\";\n import { CollectionEdit } from \"~/components/Collection/CollectionEdit\";\n import { CollectionNew } from \"~/components/Collection/CollectionNew\";\n import CollectionDeleteDialog from \"~/components/CollectionDeleteDialog\";\n+import ConfirmationDialog from \"~/components/ConfirmationDialog\";\n import DynamicCollectionIcon from \"~/components/Icons/CollectionIcon\";\n import SharePopover from \"~/components/Sharing/Collection/SharePopover\";\n import { getHeaderExpandedKey } from \"~/components/Sidebar/components/Header\";\n@@ -129,9 +133,20 @@ export const searchInCollection = createAction({\n   analyticsName: \"Search collection\",\n   section: ActiveCollectionSection,\n   icon: <SearchIcon />,\n-  visible: ({ activeCollectionId }) =>\n-    !!activeCollectionId &&\n-    stores.policies.abilities(activeCollectionId).readDocument,\n+  visible: ({ activeCollectionId }) => {\n+    if (!activeCollectionId) {\n+      return false;\n+    }\n+\n+    const collection = stores.collections.get(activeCollectionId);\n+\n+    if (!collection?.isActive) {\n+      return false;\n+    }\n+\n+    return stores.policies.abilities(activeCollectionId).readDocument;\n+  },\n+\n   perform: ({ activeCollectionId }) => {\n     history.push(searchPath(undefined, { collectionId: activeCollectionId }));\n   },\n@@ -190,6 +205,72 @@ export const unstarCollection = createAction({\n   },\n });\n \n+export const archiveCollection = createAction({\n+  name: ({ t }) => `${t(\"Archive\")}…`,\n+  analyticsName: \"Archive collection\",\n+  section: CollectionSection,\n+  icon: <ArchiveIcon />,\n+  visible: ({ activeCollectionId, stores }) => {\n+    if (!activeCollectionId) {\n+      return false;\n+    }\n+    return !!stores.policies.abilities(activeCollectionId).archive;\n+  },\n+  perform: async ({ activeCollectionId, stores, t }) => {\n+    const { dialogs, collections } = stores;\n+    if (!activeCollectionId) {\n+      return;\n+    }\n+    const collection = collections.get(activeCollectionId);\n+    if (!collection) {\n+      return;\n+    }\n+\n+    dialogs.openModal({\n+      title: t(\"Archive collection\"),\n+      content: (\n+        <ConfirmationDialog\n+          onSubmit={async () => {\n+            await collection.archive();\n+            toast.success(t(\"Collection archived\"));\n+          }}\n+          submitText={t(\"Archive\")}\n+          savingText={`${t(\"Archiving\")}…`}\n+        >\n+          {t(\n+            \"Archiving this collection will also archive all documents within it. Documents from the collection will no longer be visible in search results.\"\n+          )}\n+        </ConfirmationDialog>\n+      ),\n+    });\n+  },\n+});\n+\n+export const restoreCollection = createAction({\n+  name: ({ t }) => t(\"Restore\"),\n+  analyticsName: \"Restore collection\",\n+  section: CollectionSection,\n+  icon: <RestoreIcon />,\n+  visible: ({ activeCollectionId, stores }) => {\n+    if (!activeCollectionId) {\n+      return false;\n+    }\n+    return !!stores.policies.abilities(activeCollectionId).restore;\n+  },\n+  perform: async ({ activeCollectionId, stores, t }) => {\n+    if (!activeCollectionId) {\n+      return;\n+    }\n+    const collection = stores.collections.get(activeCollectionId);\n+    if (!collection) {\n+      return;\n+    }\n+\n+    await collection.restore();\n+    toast.success(t(\"Collection restored\"));\n+  },\n+});\n+\n export const deleteCollection = createAction({\n   name: ({ t }) => `${t(\"Delete\")}…`,\n   analyticsName: \"Delete collection\",\n\ndiff --git a/app/components/CollectionBreadcrumb.tsx b/app/components/CollectionBreadcrumb.tsx\nnew file mode 100644\nindex 000000000000..bf8c59648f35\n--- /dev/null\n+++ b/app/components/CollectionBreadcrumb.tsx\n@@ -0,0 +1,45 @@\n+import { ArchiveIcon } from \"outline-icons\";\n+import * as React from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import Collection from \"~/models/Collection\";\n+import CollectionIcon from \"~/components/Icons/CollectionIcon\";\n+import { MenuInternalLink } from \"~/types\";\n+import { archivePath, collectionPath } from \"~/utils/routeHelpers\";\n+import Breadcrumb from \"./Breadcrumb\";\n+\n+type Props = {\n+  collection: Collection;\n+};\n+\n+export const CollectionBreadcrumb: React.FC<Props> = ({ collection }) => {\n+  const { t } = useTranslation();\n+\n+  const items = React.useMemo(() => {\n+    const collectionNode: MenuInternalLink = {\n+      type: \"route\",\n+      title: collection.name,\n+      icon: <CollectionIcon collection={collection} expanded />,\n+      to: collectionPath(collection.path),\n+    };\n+\n+    const category: MenuInternalLink | undefined = collection.isArchived\n+      ? {\n+          type: \"route\",\n+          icon: <ArchiveIcon />,\n+          title: t(\"Archive\"),\n+          to: archivePath(),\n+        }\n+      : undefined;\n+\n+    const output = [];\n+    if (category) {\n+      output.push(category);\n+    }\n+\n+    output.push(collectionNode);\n+\n+    return output;\n+  }, [collection, t]);\n+\n+  return <Breadcrumb items={items} highlightFirstItem />;\n+};\n\ndiff --git a/app/components/Sidebar/App.tsx b/app/components/Sidebar/App.tsx\nindex f0dc3e673be8..e3bfd91d47de 100644\n--- a/app/components/Sidebar/App.tsx\n+++ b/app/components/Sidebar/App.tsx\n@@ -133,16 +133,16 @@ function AppSidebar() {\n             <Section>\n               <SharedWithMe />\n             </Section>\n-            <Section auto>\n+            <Section>\n               <Collections />\n             </Section>\n+            {can.createDocument && (\n+              <Section auto>\n+                <ArchiveLink />\n+              </Section>\n+            )}\n             <Section>\n-              {can.createDocument && (\n-                <>\n-                  <ArchiveLink />\n-                  <TrashLink />\n-                </>\n-              )}\n+              {can.createDocument && <TrashLink />}\n               <SidebarAction action={inviteUser} />\n             </Section>\n           </Scrollable>\n\ndiff --git a/app/components/Sidebar/components/ArchiveLink.tsx b/app/components/Sidebar/components/ArchiveLink.tsx\nindex cfa44b54e2f1..8315ebc83e21 100644\n--- a/app/components/Sidebar/components/ArchiveLink.tsx\n+++ b/app/components/Sidebar/components/ArchiveLink.tsx\n@@ -1,41 +1,101 @@\n+import isUndefined from \"lodash/isUndefined\";\n import { observer } from \"mobx-react\";\n import { ArchiveIcon } from \"outline-icons\";\n import * as React from \"react\";\n-import { useDrop } from \"react-dnd\";\n import { useTranslation } from \"react-i18next\";\n-import { toast } from \"sonner\";\n+import Flex from \"@shared/components/Flex\";\n+import Collection from \"~/models/Collection\";\n+import PaginatedList from \"~/components/PaginatedList\";\n+import useRequest from \"~/hooks/useRequest\";\n import useStores from \"~/hooks/useStores\";\n import { archivePath } from \"~/utils/routeHelpers\";\n-import SidebarLink, { DragObject } from \"./SidebarLink\";\n+import { useDropToArchive } from \"../hooks/useDragAndDrop\";\n+import { ArchivedCollectionLink } from \"./ArchivedCollectionLink\";\n+import { StyledError } from \"./Collections\";\n+import PlaceholderCollections from \"./PlaceholderCollections\";\n+import Relative from \"./Relative\";\n+import SidebarLink from \"./SidebarLink\";\n \n function ArchiveLink() {\n-  const { policies, documents } = useStores();\n+  const { collections } = useStores();\n   const { t } = useTranslation();\n \n-  const [{ isDocumentDropping }, dropToArchiveDocument] = useDrop({\n-    accept: \"document\",\n-    drop: async (item: DragObject) => {\n-      const document = documents.get(item.id);\n-      await document?.archive();\n-      toast.success(t(\"Document archived\"));\n-    },\n-    canDrop: (item) => policies.abilities(item.id).archive,\n-    collect: (monitor) => ({\n-      isDocumentDropping: monitor.isOver(),\n-    }),\n-  });\n+  const [disclosure, setDisclosure] = React.useState<boolean>(false);\n+  const [expanded, setExpanded] = React.useState<boolean | undefined>();\n+\n+  const { request, data, loading, error } = useRequest(\n+    collections.fetchArchived,\n+    true\n+  );\n+\n+  React.useEffect(() => {\n+    if (!isUndefined(data) && !loading && isUndefined(error)) {\n+      setDisclosure(data.length > 0);\n+    }\n+  }, [data, loading, error]);\n+\n+  React.useEffect(() => {\n+    setDisclosure(collections.archived.length > 0);\n+  }, [collections.archived]);\n+\n+  React.useEffect(() => {\n+    if (disclosure && isUndefined(expanded)) {\n+      setExpanded(false);\n+    }\n+  }, [disclosure]);\n+\n+  React.useEffect(() => {\n+    if (expanded) {\n+      void request();\n+    }\n+  }, [expanded, request]);\n+\n+  const handleDisclosureClick = React.useCallback((ev) => {\n+    ev.preventDefault();\n+    ev.stopPropagation();\n+    setExpanded((e) => !e);\n+  }, []);\n+\n+  const handleClick = React.useCallback(() => {\n+    setExpanded(true);\n+  }, []);\n+\n+  const [{ isOverArchiveSection, isDragging }, dropToArchiveRef] =\n+    useDropToArchive();\n \n   return (\n-    <div ref={dropToArchiveDocument}>\n-      <SidebarLink\n-        to={archivePath()}\n-        icon={<ArchiveIcon open={isDocumentDropping} />}\n-        exact={false}\n-        label={t(\"Archive\")}\n-        active={documents.active?.isArchived && !documents.active?.isDeleted}\n-        isActiveDrop={isDocumentDropping}\n-      />\n-    </div>\n+    <Flex column>\n+      <div ref={dropToArchiveRef}>\n+        <SidebarLink\n+          to={archivePath()}\n+          icon={<ArchiveIcon open={isOverArchiveSection && isDragging} />}\n+          exact={false}\n+          label={t(\"Archive\")}\n+          isActiveDrop={isOverArchiveSection && isDragging}\n+          depth={0}\n+          expanded={disclosure ? expanded : undefined}\n+          onDisclosureClick={handleDisclosureClick}\n+          onClick={handleClick}\n+        />\n+      </div>\n+      {expanded === true ? (\n+        <Relative>\n+          <PaginatedList\n+            aria-label={t(\"Archived collections\")}\n+            items={collections.archived}\n+            loading={<PlaceholderCollections />}\n+            renderError={(props) => <StyledError {...props} />}\n+            renderItem={(item: Collection) => (\n+              <ArchivedCollectionLink\n+                key={item.id}\n+                depth={1}\n+                collection={item}\n+              />\n+            )}\n+          />\n+        </Relative>\n+      ) : null}\n+    </Flex>\n   );\n }\n \n\ndiff --git a/app/components/Sidebar/components/ArchivedCollectionLink.tsx b/app/components/Sidebar/components/ArchivedCollectionLink.tsx\nnew file mode 100644\nindex 000000000000..413d0f2630d8\n--- /dev/null\n+++ b/app/components/Sidebar/components/ArchivedCollectionLink.tsx\n@@ -0,0 +1,47 @@\n+import * as React from \"react\";\n+import Collection from \"~/models/Collection\";\n+import useStores from \"~/hooks/useStores\";\n+import CollectionLink from \"./CollectionLink\";\n+import CollectionLinkChildren from \"./CollectionLinkChildren\";\n+import Relative from \"./Relative\";\n+\n+type Props = {\n+  collection: Collection;\n+  depth?: number;\n+};\n+\n+export function ArchivedCollectionLink({ collection, depth }: Props) {\n+  const { documents } = useStores();\n+\n+  const [expanded, setExpanded] = React.useState(false);\n+\n+  const handleDisclosureClick = React.useCallback((ev) => {\n+    ev.preventDefault();\n+    ev.stopPropagation();\n+    setExpanded((e) => !e);\n+  }, []);\n+\n+  const handleClick = React.useCallback(() => {\n+    setExpanded(true);\n+  }, []);\n+\n+  return (\n+    <>\n+      <CollectionLink\n+        depth={depth ? depth : 0}\n+        collection={collection}\n+        expanded={expanded}\n+        activeDocument={documents.active}\n+        onDisclosureClick={handleDisclosureClick}\n+        onClick={handleClick}\n+      />\n+      <Relative>\n+        <CollectionLinkChildren\n+          collection={collection}\n+          expanded={expanded}\n+          prefetchDocument={documents.prefetchDocument}\n+        />\n+      </Relative>\n+    </>\n+  );\n+}\n\ndiff --git a/app/components/Sidebar/components/CollectionLink.tsx b/app/components/Sidebar/components/CollectionLink.tsx\nindex 2587bbdc66bd..fee3734ea280 100644\n--- a/app/components/Sidebar/components/CollectionLink.tsx\n+++ b/app/components/Sidebar/components/CollectionLink.tsx\n@@ -30,6 +30,8 @@ type Props = {\n   onDisclosureClick: (ev?: React.MouseEvent<HTMLButtonElement>) => void;\n   activeDocument: Document | undefined;\n   isDraggingAnyCollection?: boolean;\n+  depth?: number;\n+  onClick?: () => void;\n };\n \n const CollectionLink: React.FC<Props> = ({\n@@ -37,6 +39,8 @@ const CollectionLink: React.FC<Props> = ({\n   expanded,\n   onDisclosureClick,\n   isDraggingAnyCollection,\n+  depth,\n+  onClick,\n }: Props) => {\n   const { dialogs, documents, collections } = useStores();\n   const [menuOpen, handleMenuOpen, handleMenuClose] = useBoolean();\n@@ -115,6 +119,7 @@ const CollectionLink: React.FC<Props> = ({\n     <Relative ref={drop}>\n       <DropToImport collectionId={collection.id}>\n         <SidebarLink\n+          onClick={onClick}\n           to={{\n             pathname: collection.path,\n             state: { sidebarContext },\n@@ -140,7 +145,7 @@ const CollectionLink: React.FC<Props> = ({\n             />\n           }\n           exact={false}\n-          depth={0}\n+          depth={depth ? depth : 0}\n           menu={\n             !isEditing &&\n             !isDraggingAnyCollection && (\n\ndiff --git a/app/components/Sidebar/components/Collections.tsx b/app/components/Sidebar/components/Collections.tsx\nindex 1b5419b31d31..7ee0194200d3 100644\n--- a/app/components/Sidebar/components/Collections.tsx\n+++ b/app/components/Sidebar/components/Collections.tsx\n@@ -55,7 +55,7 @@ function Collections() {\n           <PaginatedList\n             options={params}\n             aria-label={t(\"Collections\")}\n-            items={collections.orderedData}\n+            items={collections.allActive}\n             loading={<PlaceholderCollections />}\n             heading={\n               isDraggingAnyCollection ? (\n@@ -84,7 +84,7 @@ function Collections() {\n   );\n }\n \n-const StyledError = styled(Error)`\n+export const StyledError = styled(Error)`\n   font-size: 15px;\n   padding: 0 8px;\n `;\n\ndiff --git a/app/components/Sidebar/hooks/useDragAndDrop.tsx b/app/components/Sidebar/hooks/useDragAndDrop.tsx\nindex c9ce217fc5c7..26ce3759ba72 100644\n--- a/app/components/Sidebar/hooks/useDragAndDrop.tsx\n+++ b/app/components/Sidebar/hooks/useDragAndDrop.tsx\n@@ -149,6 +149,7 @@ export function useDragDocument(\n         icon: icon ? <Icon value={icon} color={color} /> : undefined,\n         collectionId: document?.collectionId || \"\",\n       } as DragObject),\n+    canDrag: () => !!document?.isActive,\n     collect: (monitor) => ({\n       isDragging: monitor.isDragging(),\n     }),\n@@ -245,6 +246,7 @@ export function useDropToReparentDocument(\n       !!pathToNode &&\n       !pathToNode.includes(monitor.getItem().id) &&\n       item.id !== node.id &&\n+      !!document?.isActive &&\n       policies.abilities(node.id).update &&\n       policies.abilities(item.id).move,\n     hover: (_item, monitor) => {\n@@ -297,6 +299,8 @@ export function useDropToReorderDocument(\n   const { t } = useTranslation();\n   const { documents, collections, dialogs, policies } = useStores();\n \n+  const document = documents.get(node.id);\n+\n   return useDrop<\n     DragObject,\n     Promise<void>,\n@@ -304,7 +308,11 @@ export function useDropToReorderDocument(\n   >({\n     accept: \"document\",\n     canDrop: (item: DragObject) => {\n-      if (item.id === node.id || !policies.abilities(item.id)?.move) {\n+      if (\n+        item.id === node.id ||\n+        !policies.abilities(item.id)?.move ||\n+        !document?.isActive\n+      ) {\n         return false;\n       }\n \n@@ -427,3 +435,44 @@ export function useDropToReorderUserMembership(getIndex?: () => string) {\n     }),\n   });\n }\n+\n+/**\n+ * Hook for shared logic that allows dropping documents and collections onto archive section\n+ */\n+export function useDropToArchive() {\n+  const accept = [\"document\", \"collection\"];\n+  const { documents, collections, policies } = useStores();\n+  const { t } = useTranslation();\n+\n+  return useDrop<\n+    DragObject,\n+    Promise<void>,\n+    { isOverArchiveSection: boolean; isDragging: boolean }\n+  >({\n+    accept,\n+    drop: async (item, monitor) => {\n+      const type = monitor.getItemType();\n+      let model;\n+\n+      if (type === \"collection\") {\n+        model = collections.get(item.id);\n+      } else {\n+        model = documents.get(item.id);\n+      }\n+\n+      if (model) {\n+        await model.archive();\n+        toast.success(\n+          type === \"collection\"\n+            ? t(\"Collection archived\")\n+            : t(\"Document archived\")\n+        );\n+      }\n+    },\n+    canDrop: (item) => policies.abilities(item.id).archive,\n+    collect: (monitor) => ({\n+      isOverArchiveSection: !!monitor.isOver(),\n+      isDragging: monitor.canDrop(),\n+    }),\n+  });\n+}\n\ndiff --git a/app/components/WebsocketProvider.tsx b/app/components/WebsocketProvider.tsx\nindex 65e4820fad6a..ff297d67d687 100644\n--- a/app/components/WebsocketProvider.tsx\n+++ b/app/components/WebsocketProvider.tsx\n@@ -407,6 +407,48 @@ class WebsocketProvider extends React.Component<Props> {\n       })\n     );\n \n+    this.socket.on(\n+      \"collections.archive\",\n+      async (event: PartialExcept<Collection, \"id\">) => {\n+        const collectionId = event.id;\n+\n+        // Fetch collection to update policies\n+        await collections.fetch(collectionId, { force: true });\n+\n+        documents.unarchivedInCollection(collectionId).forEach(\n+          action((doc) => {\n+            if (!doc.publishedAt) {\n+              // draft is to be detached from collection, not archived\n+              doc.collectionId = null;\n+            } else {\n+              doc.archivedAt = event.archivedAt as string;\n+            }\n+            policies.remove(doc.id);\n+          })\n+        );\n+      }\n+    );\n+\n+    this.socket.on(\n+      \"collections.restore\",\n+      async (event: PartialExcept<Collection, \"id\">) => {\n+        const collectionId = event.id;\n+        documents\n+          .archivedInCollection(collectionId, {\n+            archivedAt: event.archivedAt as string,\n+          })\n+          .forEach(\n+            action((doc) => {\n+              doc.archivedAt = null;\n+              policies.remove(doc.id);\n+            })\n+          );\n+\n+        // Fetch collection to update policies\n+        await collections.fetch(collectionId, { force: true });\n+      }\n+    );\n+\n     this.socket.on(\"teams.update\", (event: PartialExcept<Team, \"id\">) => {\n       if (\"sharing\" in event && event.sharing !== auth.team?.sharing) {\n         documents.all.forEach((document) => {\n\ndiff --git a/app/menus/CollectionMenu.tsx b/app/menus/CollectionMenu.tsx\nindex 0dc95fe4bc22..7dc0d9c752f5 100644\n--- a/app/menus/CollectionMenu.tsx\n+++ b/app/menus/CollectionMenu.tsx\n@@ -29,6 +29,8 @@ import {\n   unstarCollection,\n   searchInCollection,\n   createTemplate,\n+  archiveCollection,\n+  restoreCollection,\n } from \"~/actions/definitions/collections\";\n import useActionContext from \"~/hooks/useActionContext\";\n import useCurrentTeam from \"~/hooks/useCurrentTeam\";\n@@ -151,6 +153,7 @@ function CollectionMenu({\n   const canUserInTeam = usePolicy(team);\n   const items: MenuItem[] = React.useMemo(\n     () => [\n+      actionToMenuItem(restoreCollection, context),\n       actionToMenuItem(starCollection, context),\n       actionToMenuItem(unstarCollection, context),\n       {\n@@ -224,6 +227,7 @@ function CollectionMenu({\n         onClick: handleExport,\n         icon: <ExportIcon />,\n       },\n+      actionToMenuItem(archiveCollection, context),\n       actionToMenuItem(searchInCollection, context),\n       {\n         type: \"separator\",\n\ndiff --git a/app/menus/DocumentMenu.tsx b/app/menus/DocumentMenu.tsx\nindex 04fee5e12dde..97b86ed1e86d 100644\n--- a/app/menus/DocumentMenu.tsx\n+++ b/app/menus/DocumentMenu.tsx\n@@ -215,8 +215,8 @@ const MenuContent: React.FC<MenuContentProps> = ({\n             type: \"button\",\n             title: t(\"Restore\"),\n             visible:\n-              ((document.isWorkspaceTemplate || !!collection) && can.restore) ||\n-              !!can.unarchive,\n+              !!(document.isWorkspaceTemplate || collection?.isActive) &&\n+              !!(can.restore || can.unarchive),\n             onClick: (ev) => handleRestore(ev),\n             icon: <RestoreIcon />,\n           },\n@@ -224,9 +224,8 @@ const MenuContent: React.FC<MenuContentProps> = ({\n             type: \"submenu\",\n             title: t(\"Restore\"),\n             visible:\n-              !document.isWorkspaceTemplate &&\n-              !collection &&\n-              !!can.restore &&\n+              !(document.isWorkspaceTemplate || collection?.isActive) &&\n+              !!(can.restore || can.unarchive) &&\n               restoreItems.length !== 0,\n             style: {\n               left: -170,\n\ndiff --git a/app/models/Collection.ts b/app/models/Collection.ts\nindex c469fcca2e8d..5dfec65c863a 100644\n--- a/app/models/Collection.ts\n+++ b/app/models/Collection.ts\n@@ -80,6 +80,18 @@ export default class Collection extends ParanoidModel {\n   @observable\n   urlId: string;\n \n+  /**\n+   * The date and time the collection was archived.\n+   */\n+  @observable\n+  archivedAt: string;\n+\n+  /**\n+   * User who archived the collection.\n+   */\n+  @observable\n+  archivedBy?: User;\n+\n   /** Returns whether the collection is empty, or undefined if not loaded. */\n   @computed\n   get isEmpty(): boolean | undefined {\n@@ -154,6 +166,21 @@ export default class Collection extends ParanoidModel {\n       .filter(Boolean);\n   }\n \n+  @computed\n+  get isArchived() {\n+    return !!this.archivedAt;\n+  }\n+\n+  @computed\n+  get isDeleted() {\n+    return !!this.deletedAt;\n+  }\n+\n+  @computed\n+  get isActive() {\n+    return !this.isArchived && !this.isDeleted;\n+  }\n+\n   fetchDocuments = async (options?: { force: boolean }) => {\n     if (this.isFetching) {\n       return;\n@@ -314,6 +341,10 @@ export default class Collection extends ParanoidModel {\n   @action\n   unstar = async () => this.store.unstar(this);\n \n+  archive = () => this.store.archive(this);\n+\n+  restore = () => this.store.restore(this);\n+\n   export = (format: FileOperationFormat, includeAttachments: boolean) =>\n     client.post(\"/collections.export\", {\n       id: this.id,\n\ndiff --git a/app/models/base/ArchivableModel.ts b/app/models/base/ArchivableModel.ts\nindex d6489368d72d..2ab3c63e7c8f 100644\n--- a/app/models/base/ArchivableModel.ts\n+++ b/app/models/base/ArchivableModel.ts\n@@ -3,5 +3,5 @@ import ParanoidModel from \"./ParanoidModel\";\n \n export default abstract class ArchivableModel extends ParanoidModel {\n   @observable\n-  archivedAt: string | undefined;\n+  archivedAt: string | null;\n }\n\ndiff --git a/app/scenes/Collection/components/Notices.tsx b/app/scenes/Collection/components/Notices.tsx\nnew file mode 100644\nindex 000000000000..345053e2511a\n--- /dev/null\n+++ b/app/scenes/Collection/components/Notices.tsx\n@@ -0,0 +1,29 @@\n+import { ArchiveIcon } from \"outline-icons\";\n+import * as React from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import Collection from \"~/models/Collection\";\n+import ErrorBoundary from \"~/components/ErrorBoundary\";\n+import Notice from \"~/components/Notice\";\n+import Time from \"~/components/Time\";\n+\n+type Props = {\n+  collection: Collection;\n+};\n+\n+export default function Notices({ collection }: Props) {\n+  const { t } = useTranslation();\n+\n+  return (\n+    <ErrorBoundary>\n+      {collection.isArchived && !collection.isDeleted && (\n+        <Notice icon={<ArchiveIcon />}>\n+          {t(\"Archived by {{userName}}\", {\n+            userName: collection.archivedBy?.name ?? t(\"Unknown\"),\n+          })}\n+          &nbsp;\n+          <Time dateTime={collection.archivedAt} addSuffix />\n+        </Notice>\n+      )}\n+    </ErrorBoundary>\n+  );\n+}\n\ndiff --git a/app/scenes/Collection/index.tsx b/app/scenes/Collection/index.tsx\nindex 449014dc9393..f8f391c428de 100644\n--- a/app/scenes/Collection/index.tsx\n+++ b/app/scenes/Collection/index.tsx\n@@ -13,11 +13,13 @@ import {\n import styled from \"styled-components\";\n import breakpoint from \"styled-components-breakpoint\";\n import { s } from \"@shared/styles\";\n+import { StatusFilter } from \"@shared/types\";\n import { colorPalette } from \"@shared/utils/collections\";\n import Collection from \"~/models/Collection\";\n import Search from \"~/scenes/Search\";\n import { Action } from \"~/components/Actions\";\n import CenteredContent from \"~/components/CenteredContent\";\n+import { CollectionBreadcrumb } from \"~/components/CollectionBreadcrumb\";\n import CollectionDescription from \"~/components/CollectionDescription\";\n import Heading from \"~/components/Heading\";\n import Icon, { IconTitleWrapper } from \"~/components/Icon\";\n@@ -28,6 +30,7 @@ import PaginatedDocumentList from \"~/components/PaginatedDocumentList\";\n import PinnedDocuments from \"~/components/PinnedDocuments\";\n import PlaceholderText from \"~/components/PlaceholderText\";\n import Scene from \"~/components/Scene\";\n+import Subheading from \"~/components/Subheading\";\n import Tab from \"~/components/Tab\";\n import Tabs from \"~/components/Tabs\";\n import { editCollection } from \"~/actions/definitions/collections\";\n@@ -41,6 +44,7 @@ import Actions from \"./components/Actions\";\n import DropToImport from \"./components/DropToImport\";\n import Empty from \"./components/Empty\";\n import MembershipPreview from \"./components/MembershipPreview\";\n+import Notices from \"./components/Notices\";\n import ShareButton from \"./components/ShareButton\";\n \n const IconPicker = React.lazy(() => import(\"~/components/IconPicker\"));\n@@ -132,7 +136,9 @@ function CollectionScene() {\n       centered={false}\n       textTitle={collection.name}\n       left={\n-        collection.isEmpty ? undefined : (\n+        collection.isArchived ? (\n+          <CollectionBreadcrumb collection={collection} />\n+        ) : collection.isEmpty ? undefined : (\n           <InputSearchPage\n             source=\"collection\"\n             placeholder={`${t(\"Search in collection\")}…`}\n@@ -163,6 +169,7 @@ function CollectionScene() {\n         collectionId={collection.id}\n       >\n         <CenteredContent withStickyHeader>\n+          <Notices collection={collection} />\n           <CollectionHeading>\n             <IconTitleWrapper>\n               {can.update ? (\n@@ -192,26 +199,28 @@ function CollectionScene() {\n           <CollectionDescription collection={collection} />\n \n           <Documents>\n-            <Tabs>\n-              <Tab to={collectionPath(collection.path)} exact>\n-                {t(\"Documents\")}\n-              </Tab>\n-              <Tab to={collectionPath(collection.path, \"updated\")} exact>\n-                {t(\"Recently updated\")}\n-              </Tab>\n-              <Tab to={collectionPath(collection.path, \"published\")} exact>\n-                {t(\"Recently published\")}\n-              </Tab>\n-              <Tab to={collectionPath(collection.path, \"old\")} exact>\n-                {t(\"Least recently updated\")}\n-              </Tab>\n-              <Tab to={collectionPath(collection.path, \"alphabetical\")} exact>\n-                {t(\"A–Z\")}\n-              </Tab>\n-            </Tabs>\n+            {!collection.isArchived && (\n+              <Tabs>\n+                <Tab to={collectionPath(collection.path)} exact>\n+                  {t(\"Documents\")}\n+                </Tab>\n+                <Tab to={collectionPath(collection.path, \"updated\")} exact>\n+                  {t(\"Recently updated\")}\n+                </Tab>\n+                <Tab to={collectionPath(collection.path, \"published\")} exact>\n+                  {t(\"Recently published\")}\n+                </Tab>\n+                <Tab to={collectionPath(collection.path, \"old\")} exact>\n+                  {t(\"Least recently updated\")}\n+                </Tab>\n+                <Tab to={collectionPath(collection.path, \"alphabetical\")} exact>\n+                  {t(\"A–Z\")}\n+                </Tab>\n+              </Tabs>\n+            )}\n             {collection.isEmpty ? (\n               <Empty collection={collection} />\n-            ) : (\n+            ) : !collection.isArchived ? (\n               <Switch>\n                 <Route path={collectionPath(collection.path, \"alphabetical\")}>\n                   <PaginatedDocumentList\n@@ -279,6 +288,24 @@ function CollectionScene() {\n                   />\n                 </Route>\n               </Switch>\n+            ) : (\n+              <Switch>\n+                <Route path={collectionPath(collection.path)} exact>\n+                  <PaginatedDocumentList\n+                    documents={documents.archivedInCollection(collection.id)}\n+                    fetch={documents.fetchPage}\n+                    heading={<Subheading sticky>{t(\"Documents\")}</Subheading>}\n+                    options={{\n+                      collectionId: collection.id,\n+                      parentDocumentId: null,\n+                      sort: collection.sort.field,\n+                      direction: collection.sort.direction,\n+                      statusFilter: [StatusFilter.Archived],\n+                    }}\n+                    showParentDocuments\n+                  />\n+                </Route>\n+              </Switch>\n             )}\n           </Documents>\n         </CenteredContent>\n\ndiff --git a/app/stores/CollectionsStore.ts b/app/stores/CollectionsStore.ts\nindex e077d608122c..b0676bc94e62 100644\n--- a/app/stores/CollectionsStore.ts\n+++ b/app/stores/CollectionsStore.ts\n@@ -1,11 +1,16 @@\n import invariant from \"invariant\";\n import find from \"lodash/find\";\n import isEmpty from \"lodash/isEmpty\";\n+import orderBy from \"lodash/orderBy\";\n import sortBy from \"lodash/sortBy\";\n-import { computed, action } from \"mobx\";\n-import { CollectionPermission, FileOperationFormat } from \"@shared/types\";\n+import { computed, action, runInAction } from \"mobx\";\n+import {\n+  CollectionPermission,\n+  CollectionStatusFilter,\n+  FileOperationFormat,\n+} from \"@shared/types\";\n import Collection from \"~/models/Collection\";\n-import { Properties } from \"~/types\";\n+import { PaginationParams, Properties } from \"~/types\";\n import { client } from \"~/utils/ApiClient\";\n import RootStore from \"./RootStore\";\n import Store from \"./base/Store\";\n@@ -27,6 +32,11 @@ export default class CollectionsStore extends Store<Collection> {\n       : undefined;\n   }\n \n+  @computed\n+  get allActive() {\n+    return this.orderedData.filter((c) => c.isActive);\n+  }\n+\n   @computed\n   get orderedData(): Collection[] {\n     let collections = Array.from(this.data.values());\n@@ -97,6 +107,30 @@ export default class CollectionsStore extends Store<Collection> {\n     }\n   };\n \n+  @action\n+  archive = async (collection: Collection) => {\n+    const res = await client.post(\"/collections.archive\", {\n+      id: collection.id,\n+    });\n+    runInAction(\"Collection#archive\", () => {\n+      invariant(res?.data, \"Data should be available\");\n+      this.add(res.data);\n+      this.addPolicies(res.policies);\n+    });\n+  };\n+\n+  @action\n+  restore = async (collection: Collection) => {\n+    const res = await client.post(\"/collections.restore\", {\n+      id: collection.id,\n+    });\n+    runInAction(\"Collection#restore\", () => {\n+      invariant(res?.data, \"Data should be available\");\n+      this.add(res.data);\n+      this.addPolicies(res.policies);\n+    });\n+  };\n+\n   async update(params: Properties<Collection>): Promise<Collection> {\n     const result = await super.update(params);\n \n@@ -119,6 +153,52 @@ export default class CollectionsStore extends Store<Collection> {\n     return model;\n   }\n \n+  @action\n+  fetchNamedPage = async (\n+    request = \"list\",\n+    options:\n+      | (PaginationParams & { statusFilter: CollectionStatusFilter[] })\n+      | undefined\n+  ): Promise<Collection[]> => {\n+    this.isFetching = true;\n+\n+    try {\n+      const res = await client.post(`/collections.${request}`, options);\n+      invariant(res?.data, \"Collection list not available\");\n+      runInAction(\"CollectionsStore#fetchNamedPage\", () => {\n+        res.data.forEach(this.add);\n+        this.addPolicies(res.policies);\n+        this.isLoaded = true;\n+      });\n+      return res.data;\n+    } finally {\n+      this.isFetching = false;\n+    }\n+  };\n+\n+  @action\n+  fetchArchived = async (options?: PaginationParams): Promise<Collection[]> =>\n+    this.fetchNamedPage(\"list\", {\n+      ...options,\n+      statusFilter: [CollectionStatusFilter.Archived],\n+    });\n+\n+  @computed\n+  get archived(): Collection[] {\n+    return orderBy(this.orderedData, \"archivedAt\", \"desc\").filter(\n+      (c) => c.isArchived && !c.isDeleted\n+    );\n+  }\n+\n+  @computed\n+  get publicCollections() {\n+    return this.orderedData.filter(\n+      (collection) =>\n+        collection.permission &&\n+        Object.values(CollectionPermission).includes(collection.permission)\n+    );\n+  }\n+\n   star = async (collection: Collection, index?: string) => {\n     await this.rootStore.stars.create({\n       collectionId: collection.id,\n\ndiff --git a/app/stores/DocumentsStore.ts b/app/stores/DocumentsStore.ts\nindex 850a816df306..8639ecefe226 100644\n--- a/app/stores/DocumentsStore.ts\n+++ b/app/stores/DocumentsStore.ts\n@@ -121,6 +121,33 @@ export default class DocumentsStore extends Store<Document> {\n     );\n   }\n \n+  archivedInCollection(\n+    collectionId: string,\n+    options?: { archivedAt: string }\n+  ): Document[] {\n+    const filterCond = (document: Document) =>\n+      options\n+        ? document.collectionId === collectionId &&\n+          document.isArchived &&\n+          document.archivedAt === options.archivedAt &&\n+          !document.isDeleted\n+        : document.collectionId === collectionId &&\n+          document.isArchived &&\n+          !document.isDeleted;\n+\n+    return filter(this.orderedData, filterCond);\n+  }\n+\n+  unarchivedInCollection(collectionId: string): Document[] {\n+    return filter(\n+      this.orderedData,\n+      (document) =>\n+        document.collectionId === collectionId &&\n+        !document.isArchived &&\n+        !document.isDeleted\n+    );\n+  }\n+\n   templatesInCollection(collectionId: string): Document[] {\n     return orderBy(\n       filter(\n@@ -313,8 +340,18 @@ export default class DocumentsStore extends Store<Document> {\n   };\n \n   @action\n-  fetchArchived = async (options?: PaginationParams): Promise<Document[]> =>\n-    this.fetchNamedPage(\"archived\", options);\n+  fetchArchived = async (options?: PaginationParams): Promise<Document[]> => {\n+    const archivedInResponse = await this.fetchNamedPage(\"archived\", options);\n+    const archivedInMemory = this.archived;\n+\n+    archivedInMemory.forEach((docInMemory) => {\n+      !archivedInResponse.find(\n+        (docInResponse) => docInResponse.id === docInMemory.id\n+      ) && this.remove(docInMemory.id);\n+    });\n+\n+    return archivedInResponse;\n+  };\n \n   @action\n   fetchDeleted = async (options?: PaginationParams): Promise<Document[]> =>\n\ndiff --git a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\nindex 867249856df7..801e3a6f7be4 100644\n--- a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n+++ b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n@@ -161,6 +161,8 @@ export default class DeliverWebhookTask extends BaseTask<Props> {\n       case \"collections.delete\":\n       case \"collections.move\":\n       case \"collections.permission_changed\":\n+      case \"collections.archive\":\n+      case \"collections.restore\":\n         await this.handleCollectionEvent(subscription, event);\n         return;\n       case \"collections.add_user\":\n\ndiff --git a/server/migrations/20240717061527-add-column-archivedAt-collections.js b/server/migrations/20240717061527-add-column-archivedAt-collections.js\nnew file mode 100644\nindex 000000000000..b53197d1c12c\n--- /dev/null\n+++ b/server/migrations/20240717061527-add-column-archivedAt-collections.js\n@@ -0,0 +1,27 @@\n+\"use strict\";\n+\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async (transaction) => {\n+      await queryInterface.addColumn(\"collections\", \"archivedAt\", {\n+        type: Sequelize.DATE,\n+        allowNull: true,\n+        transaction,\n+      });\n+      await queryInterface.addIndex(\"collections\", [\"archivedAt\"], {\n+        transaction,\n+      });\n+    });\n+  },\n+\n+  async down(queryInterface) {\n+    await queryInterface.sequelize.transaction(async (transaction) => {\n+      await queryInterface.removeIndex(\"collections\", [\"archivedAt\"], {\n+        transaction,\n+      });\n+      await queryInterface.removeColumn(\"collections\", \"archivedAt\", {\n+        transaction,\n+      });\n+    });\n+  },\n+};\n\ndiff --git a/server/migrations/20240809054702-add-column-archivedById-to-collections.js b/server/migrations/20240809054702-add-column-archivedById-to-collections.js\nnew file mode 100644\nindex 000000000000..6e3bf3c15f3c\n--- /dev/null\n+++ b/server/migrations/20240809054702-add-column-archivedById-to-collections.js\n@@ -0,0 +1,18 @@\n+\"use strict\";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.addColumn(\"collections\", \"archivedById\", {\n+      type: Sequelize.UUID,\n+      allowNull: true,\n+      references: {\n+        model: \"users\",\n+      },\n+    });\n+  },\n+\n+  async down(queryInterface) {\n+    await queryInterface.removeColumn(\"collections\", \"archivedById\");\n+  },\n+};\n\ndiff --git a/server/models/Collection.ts b/server/models/Collection.ts\nindex 45487db05448..43b26f7910c8 100644\n--- a/server/models/Collection.ts\n+++ b/server/models/Collection.ts\n@@ -10,6 +10,7 @@ import {\n   NonNullFindOptions,\n   InferAttributes,\n   InferCreationAttributes,\n+  EmptyResultError,\n } from \"sequelize\";\n import {\n   Sequelize,\n@@ -29,6 +30,8 @@ import {\n   DataType,\n   Length as SimpleLength,\n   BeforeDestroy,\n+  IsDate,\n+  AllowNull,\n } from \"sequelize-typescript\";\n import isUUID from \"validator/lib/isUUID\";\n import type { CollectionSort, ProsemirrorData } from \"@shared/types\";\n@@ -54,6 +57,10 @@ import IsHexColor from \"./validators/IsHexColor\";\n import Length from \"./validators/Length\";\n import NotContainsUrl from \"./validators/NotContainsUrl\";\n \n+type AdditionalFindOptions = {\n+  rejectOnEmpty?: boolean | Error;\n+};\n+\n @Scopes(() => ({\n   withAllMemberships: {\n     include: [\n@@ -99,6 +106,13 @@ import NotContainsUrl from \"./validators/NotContainsUrl\";\n       },\n     ],\n   }),\n+  withArchivedBy: () => ({\n+    include: [\n+      {\n+        association: \"archivedBy\",\n+      },\n+    ],\n+  }),\n   withMembership: (userId: string) => {\n     if (!userId) {\n       return {};\n@@ -249,6 +263,11 @@ class Collection extends ParanoidModel<\n   })\n   sort: CollectionSort;\n \n+  /** Whether the collection is archived, and if so when. */\n+  @IsDate\n+  @Column\n+  archivedAt: Date | null;\n+\n   // getters\n \n   /**\n@@ -268,6 +287,16 @@ class Collection extends ParanoidModel<\n     return `/collection/${slugify(this.name)}-${this.urlId}`;\n   }\n \n+  /**\n+   * Whether this collection is considered active or not. A collection is active if\n+   * it has not been archived or deleted.\n+   *\n+   * @returns boolean\n+   */\n+  get isActive(): boolean {\n+    return !this.archivedAt && !this.deletedAt;\n+  }\n+\n   // hooks\n \n   @BeforeValidate\n@@ -321,6 +350,14 @@ class Collection extends ParanoidModel<\n   @Column(DataType.UUID)\n   importId: string | null;\n \n+  @BelongsTo(() => User, \"archivedById\")\n+  archivedBy?: User | null;\n+\n+  @AllowNull\n+  @ForeignKey(() => User)\n+  @Column(DataType.UUID)\n+  archivedById?: string | null;\n+\n   @HasMany(() => Document, \"collectionId\")\n   documents: Document[];\n \n@@ -390,37 +427,51 @@ class Collection extends ParanoidModel<\n    */\n   static async findByPk(\n     id: Identifier,\n-    options?: NonNullFindOptions<Collection>\n+    options?: NonNullFindOptions<Collection> & AdditionalFindOptions\n   ): Promise<Collection>;\n   static async findByPk(\n     id: Identifier,\n-    options?: FindOptions<Collection>\n+    options?: FindOptions<Collection> & AdditionalFindOptions\n   ): Promise<Collection | null>;\n   static async findByPk(\n     id: Identifier,\n-    options: FindOptions<Collection> = {}\n+    options: FindOptions<Collection> & AdditionalFindOptions = {}\n   ): Promise<Collection | null> {\n     if (typeof id !== \"string\") {\n       return null;\n     }\n \n     if (isUUID(id)) {\n-      return this.findOne({\n+      const collection = await this.findOne({\n         where: {\n           id,\n         },\n         ...options,\n+        rejectOnEmpty: false,\n       });\n+\n+      if (!collection && options.rejectOnEmpty) {\n+        throw new EmptyResultError(`Collection doesn't exist with id: ${id}`);\n+      }\n+\n+      return collection;\n     }\n \n     const match = id.match(UrlHelper.SLUG_URL_REGEX);\n     if (match) {\n-      return this.findOne({\n+      const collection = await this.findOne({\n         where: {\n           urlId: match[1],\n         },\n         ...options,\n+        rejectOnEmpty: false,\n       });\n+\n+      if (!collection && options.rejectOnEmpty) {\n+        throw new EmptyResultError(`Collection doesn't exist with id: ${id}`);\n+      }\n+\n+      return collection;\n     }\n \n     return null;\n@@ -662,6 +713,7 @@ class Collection extends ParanoidModel<\n     options: FindOptions & {\n       save?: boolean;\n       documentJson?: NavigationNode;\n+      includeArchived?: boolean;\n     } = {}\n   ) {\n     if (!this.documentStructure) {\n\ndiff --git a/server/models/Document.ts b/server/models/Document.ts\nindex f3b84fbe12f2..1f2427a246bd 100644\n--- a/server/models/Document.ts\n+++ b/server/models/Document.ts\n@@ -975,68 +975,76 @@ class Document extends ArchivableModel<\n \n   // Moves a document from being visible to the team within a collection\n   // to the archived area, where it can be subsequently restored.\n-  archive = async (user: User) => {\n-    await this.sequelize.transaction(async (transaction: Transaction) => {\n-      const collection = this.collectionId\n-        ? await Collection.findByPk(this.collectionId, {\n-            transaction,\n-            lock: transaction.LOCK.UPDATE,\n-          })\n-        : undefined;\n-\n-      if (collection) {\n-        await collection.removeDocumentInStructure(this, { transaction });\n-        if (this.collection) {\n-          this.collection.documentStructure = collection.documentStructure;\n-        }\n+  archive = async (user: User, options?: FindOptions) => {\n+    const { transaction } = { ...options };\n+    const collection = this.collectionId\n+      ? await Collection.findByPk(this.collectionId, {\n+          transaction,\n+          lock: transaction?.LOCK.UPDATE,\n+        })\n+      : undefined;\n+\n+    if (collection) {\n+      await collection.removeDocumentInStructure(this, { transaction });\n+      if (this.collection) {\n+        this.collection.documentStructure = collection.documentStructure;\n       }\n-    });\n+    }\n \n-    await this.archiveWithChildren(user);\n+    await this.archiveWithChildren(user, { transaction });\n     return this;\n   };\n \n   // Restore an archived document back to being visible to the team\n-  unarchive = async (user: User) => {\n-    await this.sequelize.transaction(async (transaction: Transaction) => {\n-      const collection = this.collectionId\n-        ? await Collection.findByPk(this.collectionId, {\n-            transaction,\n-            lock: transaction.LOCK.UPDATE,\n-          })\n-        : undefined;\n+  restoreTo = async (\n+    collectionId: string,\n+    options: FindOptions & { user: User }\n+  ) => {\n+    const { transaction } = { ...options };\n+    const collection = collectionId\n+      ? await Collection.findByPk(collectionId, {\n+          transaction,\n+          lock: transaction?.LOCK.UPDATE,\n+        })\n+      : undefined;\n \n-      // check to see if the documents parent hasn't been archived also\n-      // If it has then restore the document to the collection root.\n-      if (this.parentDocumentId) {\n-        const parent = await (this.constructor as typeof Document).findOne({\n-          where: {\n-            id: this.parentDocumentId,\n-          },\n-        });\n-        if (parent?.isDraft || !parent?.isActive) {\n-          this.parentDocumentId = null;\n-        }\n+    // check to see if the documents parent hasn't been archived also\n+    // If it has then restore the document to the collection root.\n+    if (this.parentDocumentId) {\n+      const parent = await (this.constructor as typeof Document).findOne({\n+        where: {\n+          id: this.parentDocumentId,\n+        },\n+        transaction,\n+      });\n+      if (parent?.isDraft || !parent?.isActive) {\n+        this.parentDocumentId = null;\n       }\n+    }\n \n-      if (!this.template && this.publishedAt && collection) {\n-        await collection.addDocumentToStructure(this, undefined, {\n-          transaction,\n-        });\n-        if (this.collection) {\n-          this.collection.documentStructure = collection.documentStructure;\n-        }\n-      }\n-    });\n+    if (!this.template && this.publishedAt && collection?.isActive) {\n+      await collection.addDocumentToStructure(this, undefined, {\n+        includeArchived: true,\n+        transaction,\n+      });\n+    }\n \n     if (this.deletedAt) {\n-      await this.restore();\n+      await this.restore({ transaction });\n+      this.collectionId = collectionId;\n+      await this.save({ transaction });\n     }\n \n-    this.archivedAt = null;\n-    this.lastModifiedById = user.id;\n-    this.updatedBy = user;\n-    await this.save();\n+    if (this.archivedAt) {\n+      await this.restoreWithChildren(collectionId, options.user, {\n+        transaction,\n+      });\n+    }\n+\n+    if (this.collection && collection) {\n+      // updating the document structure in memory just in case it's later accessed somewhere\n+      this.collection.documentStructure = collection.documentStructure;\n+    }\n     return this;\n   };\n \n@@ -1088,7 +1096,7 @@ class Document extends ArchivableModel<\n    * @returns Promise resolving to a NavigationNode\n    */\n   toNavigationNode = async (\n-    options?: FindOptions<Document>\n+    options?: FindOptions<Document> & { includeArchived?: boolean }\n   ): Promise<NavigationNode> => {\n     // Checking if the record is new is a performance optimization – new docs cannot have children\n     const childDocuments = this.isNewRecord\n@@ -1097,16 +1105,24 @@ class Document extends ArchivableModel<\n           .unscoped()\n           .scope(\"withoutState\")\n           .findAll({\n-            where: {\n-              teamId: this.teamId,\n-              parentDocumentId: this.id,\n-              archivedAt: {\n-                [Op.is]: null,\n-              },\n-              publishedAt: {\n-                [Op.ne]: null,\n-              },\n-            },\n+            where: options?.includeArchived\n+              ? {\n+                  teamId: this.teamId,\n+                  parentDocumentId: this.id,\n+                  publishedAt: {\n+                    [Op.ne]: null,\n+                  },\n+                }\n+              : {\n+                  teamId: this.teamId,\n+                  parentDocumentId: this.id,\n+                  publishedAt: {\n+                    [Op.ne]: null,\n+                  },\n+                  archivedAt: {\n+                    [Op.is]: null,\n+                  },\n+                },\n             transaction: options?.transaction,\n           });\n \n@@ -1124,6 +1140,38 @@ class Document extends ArchivableModel<\n     };\n   };\n \n+  private restoreWithChildren = async (\n+    collectionId: string,\n+    user: User,\n+    options?: FindOptions<Document>\n+  ) => {\n+    const restoreChildren = async (parentDocumentId: string) => {\n+      const childDocuments = await (\n+        this.constructor as typeof Document\n+      ).findAll({\n+        where: {\n+          parentDocumentId,\n+        },\n+        ...options,\n+      });\n+      for (const child of childDocuments) {\n+        await restoreChildren(child.id);\n+        child.archivedAt = null;\n+        child.lastModifiedById = user.id;\n+        child.updatedBy = user;\n+        child.collectionId = collectionId;\n+        await child.save(options);\n+      }\n+    };\n+\n+    await restoreChildren(this.id);\n+    this.archivedAt = null;\n+    this.lastModifiedById = user.id;\n+    this.updatedBy = user;\n+    this.collectionId = collectionId;\n+    return this.save(options);\n+  };\n+\n   private archiveWithChildren = async (\n     user: User,\n     options?: FindOptions<Document>\n@@ -1138,6 +1186,7 @@ class Document extends ArchivableModel<\n         where: {\n           parentDocumentId,\n         },\n+        ...options,\n       });\n       for (const child of childDocuments) {\n         await archiveChildren(child.id);\n\ndiff --git a/server/policies/collection.ts b/server/policies/collection.ts\nindex 96c5f609bb0d..2ec24f42d242 100644\n--- a/server/policies/collection.ts\n+++ b/server/policies/collection.ts\n@@ -28,7 +28,7 @@ allow(User, \"move\", Collection, (actor, collection) =>\n     //\n     isTeamAdmin(actor, collection),\n     isTeamMutable(actor),\n-    !collection?.deletedAt\n+    !!collection?.isActive\n   )\n );\n \n@@ -105,14 +105,38 @@ allow(User, \"share\", Collection, (user, collection) => {\n   return true;\n });\n \n+allow(User, \"updateDocument\", Collection, (user, collection) => {\n+  if (!collection || !isTeamModel(user, collection) || !isTeamMutable(user)) {\n+    return false;\n+  }\n+\n+  if (!collection.isPrivate && user.isAdmin) {\n+    return true;\n+  }\n+\n+  if (\n+    collection.permission !== CollectionPermission.ReadWrite ||\n+    user.isViewer ||\n+    user.isGuest\n+  ) {\n+    return includesMembership(collection, [\n+      CollectionPermission.ReadWrite,\n+      CollectionPermission.Admin,\n+    ]);\n+  }\n+\n+  return true;\n+});\n+\n allow(\n   User,\n-  [\"updateDocument\", \"createDocument\", \"deleteDocument\"],\n+  [\"createDocument\", \"deleteDocument\"],\n   Collection,\n   (user, collection) => {\n     if (\n       !collection ||\n-      user.teamId !== collection.teamId ||\n+      !collection.isActive ||\n+      !isTeamModel(user, collection) ||\n       !isTeamMutable(user)\n     ) {\n       return false;\n@@ -137,16 +161,38 @@ allow(\n   }\n );\n \n-allow(User, [\"update\", \"delete\"], Collection, (user, collection) => {\n-  if (!collection || user.isGuest || user.teamId !== collection.teamId) {\n-    return false;\n-  }\n-  if (user.isAdmin) {\n-    return true;\n-  }\n+allow(User, [\"update\", \"archive\"], Collection, (user, collection) =>\n+  and(\n+    !!collection,\n+    !!collection?.isActive,\n+    or(\n+      isTeamAdmin(user, collection),\n+      includesMembership(collection, [CollectionPermission.Admin])\n+    )\n+  )\n+);\n \n-  return includesMembership(collection, [CollectionPermission.Admin]);\n-});\n+allow(User, \"delete\", Collection, (user, collection) =>\n+  and(\n+    !!collection,\n+    !collection?.deletedAt,\n+    or(\n+      isTeamAdmin(user, collection),\n+      includesMembership(collection, [CollectionPermission.Admin])\n+    )\n+  )\n+);\n+\n+allow(User, \"restore\", Collection, (user, collection) =>\n+  and(\n+    !!collection,\n+    !collection?.isActive,\n+    or(\n+      isTeamAdmin(user, collection),\n+      includesMembership(collection, [CollectionPermission.Admin])\n+    )\n+  )\n+);\n \n function includesMembership(\n   collection: Collection | null,\n\ndiff --git a/server/presenters/collection.ts b/server/presenters/collection.ts\nindex 0e7a6da5e400..cc379dedb373 100644\n--- a/server/presenters/collection.ts\n+++ b/server/presenters/collection.ts\n@@ -1,6 +1,7 @@\n import Collection from \"@server/models/Collection\";\n import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n import { APIContext } from \"@server/types\";\n+import presentUser from \"./user\";\n \n export default async function presentCollection(\n   ctx: APIContext | undefined,\n@@ -24,5 +25,7 @@ export default async function presentCollection(\n     createdAt: collection.createdAt,\n     updatedAt: collection.updatedAt,\n     deletedAt: collection.deletedAt,\n+    archivedAt: collection.archivedAt,\n+    archivedBy: collection.archivedBy && presentUser(collection.archivedBy),\n   };\n }\n\ndiff --git a/server/queues/processors/WebsocketsProcessor.ts b/server/queues/processors/WebsocketsProcessor.ts\nindex 12ab205fa43a..87c730b2dd71 100644\n--- a/server/queues/processors/WebsocketsProcessor.ts\n+++ b/server/queues/processors/WebsocketsProcessor.ts\n@@ -1,4 +1,6 @@\n+import concat from \"lodash/concat\";\n import uniq from \"lodash/uniq\";\n+import uniqBy from \"lodash/uniqBy\";\n import { Server } from \"socket.io\";\n import {\n   Comment,\n@@ -41,8 +43,7 @@ export default class WebsocketsProcessor {\n       case \"documents.create\":\n       case \"documents.publish\":\n       case \"documents.unpublish\":\n-      case \"documents.restore\":\n-      case \"documents.unarchive\": {\n+      case \"documents.restore\": {\n         const document = await Document.findByPk(event.documentId, {\n           paranoid: false,\n         });\n@@ -54,6 +55,7 @@ export default class WebsocketsProcessor {\n         }\n \n         const channels = await this.getDocumentEventChannels(event, document);\n+\n         return socketio.to(channels).emit(\"entities\", {\n           event: event.name,\n           fetchIfMissing: true,\n@@ -71,6 +73,50 @@ export default class WebsocketsProcessor {\n         });\n       }\n \n+      case \"documents.unarchive\": {\n+        const [document, srcCollection] = await Promise.all([\n+          Document.findByPk(event.documentId, { paranoid: false }),\n+          Collection.findByPk(event.data.sourceCollectionId, {\n+            paranoid: false,\n+          }),\n+        ]);\n+        if (!document || !srcCollection) {\n+          return;\n+        }\n+        const documentChannels = await this.getDocumentEventChannels(\n+          event,\n+          document\n+        );\n+        const collectionChannels = this.getCollectionEventChannels(\n+          event,\n+          srcCollection\n+        );\n+\n+        const channels = uniq(concat(documentChannels, collectionChannels));\n+\n+        return socketio.to(channels).emit(\"entities\", {\n+          event: event.name,\n+          fetchIfMissing: true,\n+          documentIds: [\n+            {\n+              id: document.id,\n+              updatedAt: document.updatedAt,\n+            },\n+          ],\n+          collectionIds: uniqBy(\n+            [\n+              {\n+                id: document.collectionId,\n+              },\n+              {\n+                id: srcCollection.id,\n+              },\n+            ],\n+            \"id\"\n+          ),\n+        });\n+      }\n+\n       case \"documents.permanent_delete\": {\n         return socketio\n           .to(`collection-${event.collectionId}`)\n@@ -235,6 +281,21 @@ export default class WebsocketsProcessor {\n           });\n       }\n \n+      case \"collections.archive\":\n+      case \"collections.restore\": {\n+        const collection = await Collection.findByPk(event.collectionId);\n+        if (!collection) {\n+          return;\n+        }\n+\n+        return socketio\n+          .to(this.getCollectionEventChannels(event, collection))\n+          .emit(event.name, {\n+            id: event.collectionId,\n+            archivedAt: event.data.archivedAt,\n+          });\n+      }\n+\n       case \"collections.move\": {\n         return socketio\n           .to(`collection-${event.collectionId}`)\n\ndiff --git a/server/routes/api/collections/collections.ts b/server/routes/api/collections/collections.ts\nindex 244b06b17228..f75ed915c843 100644\n--- a/server/routes/api/collections/collections.ts\n+++ b/server/routes/api/collections/collections.ts\n@@ -4,6 +4,7 @@ import Router from \"koa-router\";\n import { Sequelize, Op, WhereOptions } from \"sequelize\";\n import {\n   CollectionPermission,\n+  CollectionStatusFilter,\n   FileOperationState,\n   FileOperationType,\n } from \"@shared/types\";\n@@ -25,6 +26,7 @@ import {\n   Group,\n   Attachment,\n   FileOperation,\n+  Document,\n } from \"@server/models\";\n import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n import { authorize } from \"@server/policies\";\n@@ -125,9 +127,12 @@ router.post(\n   async (ctx: APIContext<T.CollectionsInfoReq>) => {\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(id);\n+    const collection = await Collection.scope([\n+      {\n+        method: [\"withMembership\", user.id],\n+      },\n+      \"withArchivedBy\",\n+    ]).findByPk(id);\n \n     authorize(user, \"read\", collection);\n \n@@ -801,23 +806,60 @@ router.post(\n   auth(),\n   validate(T.CollectionsListSchema),\n   pagination(),\n+  transaction(),\n   async (ctx: APIContext<T.CollectionsListReq>) => {\n-    const { includeListOnly } = ctx.input.body;\n+    const { includeListOnly, statusFilter } = ctx.input.body;\n     const { user } = ctx.state.auth;\n-    const collectionIds = await user.collectionIds();\n-    const where: WhereOptions<Collection> =\n-      includeListOnly && user.isAdmin\n-        ? {\n-            teamId: user.teamId,\n-          }\n-        : {\n-            teamId: user.teamId,\n-            id: collectionIds,\n-          };\n+    const { transaction } = ctx.state;\n+    const collectionIds = await user.collectionIds({ transaction });\n+\n+    const where: WhereOptions<Collection> = {\n+      teamId: user.teamId,\n+      [Op.and]: [\n+        {\n+          deletedAt: {\n+            [Op.eq]: null,\n+          },\n+        },\n+      ],\n+    };\n+\n+    if (!statusFilter) {\n+      where[Op.and].push({ archivedAt: { [Op.eq]: null } });\n+    }\n+\n+    if (!includeListOnly || !user.isAdmin) {\n+      where[Op.and].push({ id: collectionIds });\n+    }\n+\n+    const statusQuery = [];\n+    if (statusFilter?.includes(CollectionStatusFilter.Archived)) {\n+      statusQuery.push({\n+        archivedAt: {\n+          [Op.ne]: null,\n+        },\n+      });\n+    }\n+\n+    if (statusQuery.length) {\n+      where[Op.and].push({\n+        [Op.or]: statusQuery,\n+      });\n+    }\n+\n     const [collections, total] = await Promise.all([\n-      Collection.scope({\n-        method: [\"withMembership\", user.id],\n-      }).findAll({\n+      Collection.scope(\n+        statusFilter?.includes(CollectionStatusFilter.Archived)\n+          ? [\n+              {\n+                method: [\"withMembership\", user.id],\n+              },\n+              \"withArchivedBy\",\n+            ]\n+          : {\n+              method: [\"withMembership\", user.id],\n+            }\n+      ).findAll({\n         where,\n         order: [\n           Sequelize.literal('\"collection\".\"index\" collate \"C\"'),\n@@ -825,8 +867,9 @@ router.post(\n         ],\n         offset: ctx.state.pagination.offset,\n         limit: ctx.state.pagination.limit,\n+        transaction,\n       }),\n-      Collection.count({ where }),\n+      Collection.count({ where, transaction }),\n     ]);\n \n     const nullIndex = collections.findIndex(\n@@ -834,7 +877,9 @@ router.post(\n     );\n \n     if (nullIndex !== -1) {\n-      const indexedCollections = await collectionIndexing(user.teamId);\n+      const indexedCollections = await collectionIndexing(user.teamId, {\n+        transaction,\n+      });\n       collections.forEach((collection) => {\n         collection.index = indexedCollections[collection.id];\n       });\n@@ -881,6 +926,130 @@ router.post(\n   }\n );\n \n+router.post(\n+  \"collections.archive\",\n+  auth(),\n+  validate(T.CollectionsArchiveSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.CollectionsArchiveReq>) => {\n+    const { transaction } = ctx.state;\n+    const { id } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+\n+    const collection = await Collection.scope([\n+      {\n+        method: [\"withMembership\", user.id],\n+      },\n+    ]).findByPk(id, {\n+      transaction,\n+      rejectOnEmpty: true,\n+    });\n+\n+    authorize(user, \"archive\", collection);\n+\n+    collection.archivedAt = new Date();\n+    collection.archivedById = user.id;\n+    await collection.save({ transaction });\n+    collection.archivedBy = user;\n+\n+    // Archive all documents within the collection\n+    await Document.update(\n+      {\n+        lastModifiedById: user.id,\n+        archivedAt: collection.archivedAt,\n+      },\n+      {\n+        where: {\n+          teamId: collection.teamId,\n+          collectionId: collection.id,\n+          archivedAt: {\n+            [Op.is]: null,\n+          },\n+        },\n+        transaction,\n+      }\n+    );\n+\n+    await Event.createFromContext(\n+      ctx,\n+      {\n+        name: \"collections.archive\",\n+        collectionId: collection.id,\n+        data: {\n+          name: collection.name,\n+          archivedAt: collection.archivedAt,\n+        },\n+      },\n+      { transaction }\n+    );\n+\n+    ctx.body = {\n+      data: await presentCollection(ctx, collection),\n+      policies: presentPolicies(user, [collection]),\n+    };\n+  }\n+);\n+\n+router.post(\n+  \"collections.restore\",\n+  auth(),\n+  validate(T.CollectionsRestoreSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.CollectionsRestoreReq>) => {\n+    const { transaction } = ctx.state;\n+    const { id } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+\n+    const collection = await Collection.scope({\n+      method: [\"withMembership\", user.id],\n+    }).findByPk(id, {\n+      transaction,\n+      rejectOnEmpty: true,\n+    });\n+\n+    authorize(user, \"restore\", collection);\n+\n+    const collectionArchivedAt = collection.archivedAt;\n+\n+    await Document.update(\n+      {\n+        lastModifiedById: user.id,\n+        archivedAt: null,\n+      },\n+      {\n+        where: {\n+          collectionId: collection.id,\n+          teamId: user.teamId,\n+          archivedAt: collection.archivedAt,\n+        },\n+        transaction,\n+      }\n+    );\n+\n+    collection.archivedAt = null;\n+    collection.archivedById = null;\n+    await collection.save({ transaction });\n+\n+    await Event.createFromContext(\n+      ctx,\n+      {\n+        name: \"collections.restore\",\n+        collectionId: collection.id,\n+        data: {\n+          name: collection.name,\n+          archivedAt: collectionArchivedAt,\n+        },\n+      },\n+      { transaction }\n+    );\n+\n+    ctx.body = {\n+      data: await presentCollection(ctx, collection!),\n+      policies: presentPolicies(user, [collection]),\n+    };\n+  }\n+);\n+\n router.post(\n   \"collections.move\",\n   auth(),\n\ndiff --git a/server/routes/api/collections/schema.ts b/server/routes/api/collections/schema.ts\nindex 24a95742001b..0d807dc1ca59 100644\n--- a/server/routes/api/collections/schema.ts\n+++ b/server/routes/api/collections/schema.ts\n@@ -1,6 +1,10 @@\n import isUndefined from \"lodash/isUndefined\";\n import { z } from \"zod\";\n-import { CollectionPermission, FileOperationFormat } from \"@shared/types\";\n+import {\n+  CollectionPermission,\n+  CollectionStatusFilter,\n+  FileOperationFormat,\n+} from \"@shared/types\";\n import { Collection } from \"@server/models\";\n import { zodIconType } from \"@server/utils/zod\";\n import { ValidateColor, ValidateIndex } from \"@server/validation\";\n@@ -174,6 +178,8 @@ export type CollectionsUpdateReq = z.infer<typeof CollectionsUpdateSchema>;\n export const CollectionsListSchema = BaseSchema.extend({\n   body: z.object({\n     includeListOnly: z.boolean().default(false),\n+    /** Collection statuses to include in results */\n+    statusFilter: z.nativeEnum(CollectionStatusFilter).array().optional(),\n   }),\n });\n \n@@ -185,6 +191,22 @@ export const CollectionsDeleteSchema = BaseSchema.extend({\n \n export type CollectionsDeleteReq = z.infer<typeof CollectionsDeleteSchema>;\n \n+export const CollectionsArchiveSchema = BaseSchema.extend({\n+  body: BaseIdSchema,\n+});\n+\n+export type CollectionsArchiveReq = z.infer<typeof CollectionsArchiveSchema>;\n+\n+export const CollectionsRestoreSchema = BaseSchema.extend({\n+  body: BaseIdSchema,\n+});\n+\n+export type CollectionsRestoreReq = z.infer<typeof CollectionsRestoreSchema>;\n+\n+export const CollectionsArchivedSchema = BaseSchema;\n+\n+export type CollectionsArchivedReq = z.infer<typeof CollectionsArchivedSchema>;\n+\n export const CollectionsMoveSchema = BaseSchema.extend({\n   body: BaseIdSchema.extend({\n     index: z\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 3da40f7d5a11..3323eebda224 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -5,11 +5,13 @@ import invariant from \"invariant\";\n import JSZip from \"jszip\";\n import Router from \"koa-router\";\n import escapeRegExp from \"lodash/escapeRegExp\";\n+import has from \"lodash/has\";\n+import remove from \"lodash/remove\";\n import uniq from \"lodash/uniq\";\n import mime from \"mime-types\";\n import { Op, ScopeOptions, Sequelize, WhereOptions } from \"sequelize\";\n import { v4 as uuidv4 } from \"uuid\";\n-import { TeamPreference, UserRole } from \"@shared/types\";\n+import { StatusFilter, TeamPreference, UserRole } from \"@shared/types\";\n import { subtractDate } from \"@shared/utils/date\";\n import slugify from \"@shared/utils/slugify\";\n import documentCreator from \"@server/commands/documentCreator\";\n@@ -20,7 +22,6 @@ import documentPermanentDeleter from \"@server/commands/documentPermanentDeleter\"\n import documentUpdater from \"@server/commands/documentUpdater\";\n import env from \"@server/env\";\n import {\n-  NotFoundError,\n   InvalidRequestError,\n   AuthenticationError,\n   ValidationError,\n@@ -83,43 +84,52 @@ router.post(\n   pagination(),\n   validate(T.DocumentsListSchema),\n   async (ctx: APIContext<T.DocumentsListReq>) => {\n-    let { sort } = ctx.input.body;\n     const {\n+      sort,\n       direction,\n       template,\n       collectionId,\n       backlinkDocumentId,\n       parentDocumentId,\n       userId: createdById,\n+      statusFilter,\n     } = ctx.input.body;\n \n     // always filter by the current team\n     const { user } = ctx.state.auth;\n-    let where: WhereOptions<Document> = {\n+    const where: WhereOptions<Document> = {\n       teamId: user.teamId,\n-      archivedAt: {\n-        [Op.is]: null,\n-      },\n+      [Op.and]: [\n+        {\n+          deletedAt: {\n+            [Op.eq]: null,\n+          },\n+        },\n+      ],\n     };\n \n+    // Exclude archived docs by default\n+    if (!statusFilter) {\n+      where[Op.and].push({ archivedAt: { [Op.eq]: null } });\n+    }\n+\n     if (template) {\n-      where = {\n-        ...where,\n+      where[Op.and].push({\n         template: true,\n-      };\n+      });\n     }\n \n     // if a specific user is passed then add to filters. If the user doesn't\n     // exist in the team then nothing will be returned, so no need to check auth\n     if (createdById) {\n-      where = { ...where, createdById };\n+      where[Op.and].push({ createdById });\n     }\n \n     let documentIds: string[] = [];\n \n     // if a specific collection is passed then we need to check auth to view it\n     if (collectionId) {\n-      where = { ...where, collectionId };\n+      where[Op.and].push({ collectionId: [collectionId] });\n       const collection = await Collection.scope({\n         method: [\"withMembership\", user.id],\n       }).findByPk(collectionId);\n@@ -131,19 +141,18 @@ router.post(\n         documentIds = (collection?.documentStructure || [])\n           .map((node) => node.id)\n           .slice(ctx.state.pagination.offset, ctx.state.pagination.limit);\n-        where = { ...where, id: documentIds };\n+        where[Op.and].push({ id: documentIds });\n       } // otherwise, filter by all collections the user has access to\n     } else {\n       const collectionIds = await user.collectionIds();\n-      where = {\n-        ...where,\n+      where[Op.and].push({\n         collectionId:\n           template && can(user, \"readTemplate\", user.team)\n             ? {\n                 [Op.or]: [{ [Op.in]: collectionIds }, { [Op.is]: null }],\n               }\n             : collectionIds,\n-      };\n+      });\n     }\n \n     if (parentDocumentId) {\n@@ -177,21 +186,20 @@ router.post(\n       ]);\n \n       if (groupMembership || membership) {\n-        delete where.collectionId;\n+        remove(where[Op.and], (cond) => has(cond, \"collectionId\"));\n       }\n \n-      where = { ...where, parentDocumentId };\n+      where[Op.and].push({ parentDocumentId });\n     }\n \n     // Explicitly passing 'null' as the parentDocumentId allows listing documents\n     // that have no parent document (aka they are at the root of the collection)\n     if (parentDocumentId === null) {\n-      where = {\n-        ...where,\n+      where[Op.and].push({\n         parentDocumentId: {\n           [Op.is]: null,\n         },\n-      };\n+      });\n     }\n \n     if (backlinkDocumentId) {\n@@ -201,29 +209,81 @@ router.post(\n           documentId: backlinkDocumentId,\n         },\n       });\n-      where = {\n-        ...where,\n+      where[Op.and].push({\n         id: backlinks.map((backlink) => backlink.reverseDocumentId),\n-      };\n+      });\n     }\n \n-    if (sort === \"index\") {\n-      sort = \"updatedAt\";\n+    const statusQuery = [];\n+    if (statusFilter?.includes(StatusFilter.Published)) {\n+      statusQuery.push({\n+        [Op.and]: [\n+          {\n+            publishedAt: {\n+              [Op.ne]: null,\n+            },\n+            archivedAt: {\n+              [Op.eq]: null,\n+            },\n+          },\n+        ],\n+      });\n+    }\n+\n+    if (statusFilter?.includes(StatusFilter.Draft)) {\n+      statusQuery.push({\n+        [Op.and]: [\n+          {\n+            publishedAt: {\n+              [Op.eq]: null,\n+            },\n+            archivedAt: {\n+              [Op.eq]: null,\n+            },\n+            [Op.or]: [\n+              // Only ever include draft results for the user's own documents\n+              { createdById: user.id },\n+              { \"$memberships.id$\": { [Op.ne]: null } },\n+            ],\n+          },\n+        ],\n+      });\n+    }\n+\n+    if (statusFilter?.includes(StatusFilter.Archived)) {\n+      statusQuery.push({\n+        archivedAt: {\n+          [Op.ne]: null,\n+        },\n+      });\n+    }\n+\n+    if (statusQuery.length) {\n+      where[Op.and].push({\n+        [Op.or]: statusQuery,\n+      });\n     }\n \n     const [documents, total] = await Promise.all([\n       Document.defaultScopeWithUser(user.id).findAll({\n         where,\n-        order: [[sort, direction]],\n+        order: [\n+          [\n+            // this needs to be done otherwise findAll will throw citing\n+            // that the column \"document\".\"index\" doesn't exist – value of sort\n+            // is required to be a column name\n+            sort === \"index\" ? \"updatedAt\" : sort,\n+            direction,\n+          ],\n+        ],\n         offset: ctx.state.pagination.offset,\n         limit: ctx.state.pagination.limit,\n       }),\n       Document.count({ where }),\n     ]);\n \n-    // index sort is special because it uses the order of the documents in the\n-    // collection.documentStructure rather than a database column\n-    if (documentIds.length) {\n+    if (sort === \"index\") {\n+      // sort again so as to retain the order of documents as in collection.documentStructure\n       documents.sort(\n         (a, b) => documentIds.indexOf(a.id) - documentIds.indexOf(b.id)\n       );\n@@ -233,6 +293,7 @@ router.post(\n       documents.map((document) => presentDocument(ctx, document))\n     );\n     const policies = presentPolicies(user, documents);\n+\n     ctx.body = {\n       pagination: { ...ctx.state.pagination, total },\n       data,\n@@ -738,81 +799,105 @@ router.post(\n   \"documents.restore\",\n   auth({ role: UserRole.Member }),\n   validate(T.DocumentsRestoreSchema),\n+  transaction(),\n   async (ctx: APIContext<T.DocumentsRestoreReq>) => {\n     const { id, collectionId, revisionId } = ctx.input.body;\n     const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n     const document = await Document.findByPk(id, {\n       userId: user.id,\n       paranoid: false,\n+      rejectOnEmpty: true,\n+      transaction,\n     });\n \n-    if (!document) {\n-      throw NotFoundError();\n-    }\n+    const sourceCollectionId = document.collectionId;\n+    const destCollectionId = collectionId ?? sourceCollectionId;\n \n-    // Passing collectionId allows restoring to a different collection than the\n-    // document was originally within\n-    if (collectionId) {\n-      document.collectionId = collectionId;\n-    }\n+    const srcCollection = sourceCollectionId\n+      ? await Collection.scope({\n+          method: [\"withMembership\", user.id],\n+        }).findByPk(sourceCollectionId)\n+      : undefined;\n \n-    const collection = document.collectionId\n+    const destCollection = destCollectionId\n       ? await Collection.scope({\n           method: [\"withMembership\", user.id],\n-        }).findByPk(document.collectionId)\n+        }).findByPk(destCollectionId)\n       : undefined;\n \n-    // if the collectionId was provided in the request and isn't valid then it will\n-    // be caught as a 403 on the authorize call below. Otherwise we're checking here\n-    // that the original collection still exists and advising to pass collectionId\n-    // if not.\n-    if (document.collection && !collectionId && !collection) {\n+    if (!destCollection?.isActive) {\n       throw ValidationError(\n-        \"Unable to restore to original collection, it may have been deleted\"\n+        \"Unable to restore, the collection may have been deleted or archived\"\n       );\n     }\n \n+    if (sourceCollectionId !== destCollectionId) {\n+      authorize(user, \"updateDocument\", srcCollection);\n+      await srcCollection?.removeDocumentInStructure(document, {\n+        save: true,\n+        transaction,\n+      });\n+    }\n+\n     if (document.deletedAt) {\n       authorize(user, \"restore\", document);\n+      authorize(user, \"updateDocument\", destCollection);\n+\n       // restore a previously deleted document\n-      await document.unarchive(user);\n-      await Event.createFromContext(ctx, {\n-        name: \"documents.restore\",\n-        documentId: document.id,\n-        collectionId: document.collectionId,\n-        data: {\n-          title: document.title,\n+      await document.restoreTo(destCollectionId!, { transaction, user }); // destCollectionId is guaranteed to be defined here\n+      await Event.createFromContext(\n+        ctx,\n+        {\n+          name: \"documents.restore\",\n+          documentId: document.id,\n+          collectionId: document.collectionId,\n+          data: {\n+            title: document.title,\n+          },\n         },\n-      });\n+        { transaction }\n+      );\n     } else if (document.archivedAt) {\n       authorize(user, \"unarchive\", document);\n+      authorize(user, \"updateDocument\", destCollection);\n+\n       // restore a previously archived document\n-      await document.unarchive(user);\n-      await Event.createFromContext(ctx, {\n-        name: \"documents.unarchive\",\n-        documentId: document.id,\n-        collectionId: document.collectionId,\n-        data: {\n-          title: document.title,\n+      await document.restoreTo(destCollectionId!, { transaction, user }); // destCollectionId is guaranteed to be defined here\n+      await Event.createFromContext(\n+        ctx,\n+        {\n+          name: \"documents.unarchive\",\n+          documentId: document.id,\n+          collectionId: document.collectionId,\n+          data: {\n+            title: document.title,\n+            sourceCollectionId,\n+          },\n         },\n-      });\n+        { transaction }\n+      );\n     } else if (revisionId) {\n       // restore a document to a specific revision\n       authorize(user, \"update\", document);\n-      const revision = await Revision.findByPk(revisionId);\n+      const revision = await Revision.findByPk(revisionId, { transaction });\n       authorize(document, \"restore\", revision);\n \n       document.restoreFromRevision(revision);\n-      await document.save();\n+      await document.save({ transaction });\n \n-      await Event.createFromContext(ctx, {\n-        name: \"documents.restore\",\n-        documentId: document.id,\n-        collectionId: document.collectionId,\n-        data: {\n-          title: document.title,\n+      await Event.createFromContext(\n+        ctx,\n+        {\n+          name: \"documents.restore\",\n+          documentId: document.id,\n+          collectionId: document.collectionId,\n+          data: {\n+            title: document.title,\n+          },\n         },\n-      });\n+        { transaction }\n+      );\n     } else {\n       assertPresent(revisionId, \"revisionId is required\");\n     }\n@@ -1286,24 +1371,32 @@ router.post(\n   \"documents.archive\",\n   auth(),\n   validate(T.DocumentsArchiveSchema),\n+  transaction(),\n   async (ctx: APIContext<T.DocumentsArchiveReq>) => {\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n \n     const document = await Document.findByPk(id, {\n       userId: user.id,\n+      rejectOnEmpty: true,\n+      transaction,\n     });\n     authorize(user, \"archive\", document);\n \n-    await document.archive(user);\n-    await Event.createFromContext(ctx, {\n-      name: \"documents.archive\",\n-      documentId: document.id,\n-      collectionId: document.collectionId,\n-      data: {\n-        title: document.title,\n+    await document.archive(user, { transaction });\n+    await Event.createFromContext(\n+      ctx,\n+      {\n+        name: \"documents.archive\",\n+        documentId: document.id,\n+        collectionId: document.collectionId,\n+        data: {\n+          title: document.title,\n+        },\n       },\n-    });\n+      { transaction }\n+    );\n \n     ctx.body = {\n       data: await presentDocument(ctx, document),\n\ndiff --git a/server/routes/api/documents/schema.ts b/server/routes/api/documents/schema.ts\nindex d994a044833c..ed3e76c538f7 100644\n--- a/server/routes/api/documents/schema.ts\n+++ b/server/routes/api/documents/schema.ts\n@@ -68,6 +68,9 @@ export const DocumentsListSchema = BaseSchema.extend({\n \n     /** Boolean which denotes whether the document is a template */\n     template: z.boolean().optional(),\n+\n+    /** Document statuses to include in results */\n+    statusFilter: z.nativeEnum(StatusFilter).array().optional(),\n   }),\n   // Maintains backwards compatibility\n }).transform((req) => {\n\ndiff --git a/server/types.ts b/server/types.ts\nindex be7dd51107b6..49c0495722a3 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -175,7 +175,6 @@ export type DocumentEvent = BaseEvent<Document> &\n           | \"documents.delete\"\n           | \"documents.permanent_delete\"\n           | \"documents.archive\"\n-          | \"documents.unarchive\"\n           | \"documents.restore\";\n         documentId: string;\n         collectionId: string;\n@@ -184,6 +183,16 @@ export type DocumentEvent = BaseEvent<Document> &\n           source?: \"import\";\n         };\n       }\n+    | {\n+        name: \"documents.unarchive\";\n+        documentId: string;\n+        collectionId: string;\n+        data: {\n+          title: string;\n+          /** Id of collection from which the document is unarchived */\n+          sourceCollectionId: string;\n+        };\n+      }\n     | {\n         name: \"documents.move\";\n         documentId: string;\n@@ -294,10 +303,15 @@ export type CollectionEvent = BaseEvent<Collection> &\n         };\n       }\n     | {\n-        name: \"collections.update\" | \"collections.delete\";\n+        name:\n+          | \"collections.update\"\n+          | \"collections.delete\"\n+          | \"collections.archive\"\n+          | \"collections.restore\";\n         collectionId: string;\n         data: {\n           name: string;\n+          archivedAt: string;\n         };\n       }\n     | {\n\ndiff --git a/server/utils/indexing.ts b/server/utils/indexing.ts\nindex e64030a3c18a..56dbc6b465e3 100644\n--- a/server/utils/indexing.ts\n+++ b/server/utils/indexing.ts\n@@ -1,9 +1,11 @@\n import fractionalIndex from \"fractional-index\";\n+import { FindOptions } from \"sequelize\";\n import naturalSort from \"@shared/utils/naturalSort\";\n import { Collection, Document, Star } from \"@server/models\";\n \n export async function collectionIndexing(\n-  teamId: string\n+  teamId: string,\n+  { transaction }: FindOptions<Collection>\n ): Promise<{ [id: string]: string }> {\n   const collections = await Collection.findAll({\n     where: {\n@@ -12,6 +14,7 @@ export async function collectionIndexing(\n       deletedAt: null,\n     },\n     attributes: [\"id\", \"index\", \"name\"],\n+    transaction,\n   });\n \n   const sortable = naturalSort(collections, (collection) => collection.name);\n@@ -23,7 +26,7 @@ export async function collectionIndexing(\n   for (const collection of sortable) {\n     if (collection.index === null) {\n       collection.index = fractionalIndex(previousIndex, null);\n-      promises.push(collection.save());\n+      promises.push(collection.save({ transaction }));\n     }\n \n     previousIndex = collection.index;\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 96611ba5ad69..0403e2d1a31d 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -11,6 +11,13 @@\n   \"Search in collection\": \"Search in collection\",\n   \"Star\": \"Star\",\n   \"Unstar\": \"Unstar\",\n+  \"Archive\": \"Archive\",\n+  \"Archive collection\": \"Archive collection\",\n+  \"Collection archived\": \"Collection archived\",\n+  \"Archiving\": \"Archiving\",\n+  \"Archiving this collection will also archive all documents within it. Documents from the collection will no longer be visible in search results.\": \"Archiving this collection will also archive all documents within it. Documents from the collection will no longer be visible in search results.\",\n+  \"Restore\": \"Restore\",\n+  \"Collection restored\": \"Collection restored\",\n   \"Delete\": \"Delete\",\n   \"Delete collection\": \"Delete collection\",\n   \"New template\": \"New template\",\n@@ -72,10 +79,8 @@\n   \"Move\": \"Move\",\n   \"Move to collection\": \"Move to collection\",\n   \"Move {{ documentType }}\": \"Move {{ documentType }}\",\n-  \"Archive\": \"Archive\",\n   \"Are you sure you want to archive this document?\": \"Are you sure you want to archive this document?\",\n   \"Document archived\": \"Document archived\",\n-  \"Archiving\": \"Archiving\",\n   \"Archiving this document will remove it from the collection and search results.\": \"Archiving this document will remove it from the collection and search results.\",\n   \"Delete {{ documentName }}\": \"Delete {{ documentName }}\",\n   \"Permanently delete\": \"Permanently delete\",\n@@ -342,6 +347,7 @@\n   \"{{ count }} groups added to the document\": \"{{ count }} groups added to the document\",\n   \"{{ count }} groups added to the document_plural\": \"{{ count }} groups added to the document\",\n   \"Logo\": \"Logo\",\n+  \"Archived collections\": \"Archived collections\",\n   \"Change permissions?\": \"Change permissions?\",\n   \"New doc\": \"New doc\",\n   \"You can't reorder documents in an alphabetically sorted collection\": \"You can't reorder documents in an alphabetically sorted collection\",\n@@ -497,7 +503,6 @@\n   \"Show document menu\": \"Show document menu\",\n   \"{{ documentName }} restored\": \"{{ documentName }} restored\",\n   \"Document options\": \"Document options\",\n-  \"Restore\": \"Restore\",\n   \"Choose a collection\": \"Choose a collection\",\n   \"Enable embeds\": \"Enable embeds\",\n   \"Export options\": \"Export options\",\n@@ -558,6 +563,7 @@\n   \"{{ usersCount }} users with access_plural\": \"{{ usersCount }} users with access\",\n   \"{{ groupsCount }} groups with access\": \"{{ groupsCount }} group with access\",\n   \"{{ groupsCount }} groups with access_plural\": \"{{ groupsCount }} groups with access\",\n+  \"Archived by {{userName}}\": \"Archived by {{userName}}\",\n   \"Share\": \"Share\",\n   \"Recently updated\": \"Recently updated\",\n   \"Recently published\": \"Recently published\",\n@@ -630,7 +636,6 @@\n   \"This document will be permanently deleted in <2></2> unless restored.\": \"This document will be permanently deleted in <2></2> unless restored.\",\n   \"Highlight some text and use the <1></1> control to add placeholders that can be filled out when creating new documents\": \"Highlight some text and use the <1></1> control to add placeholders that can be filled out when creating new documents\",\n   \"You’re editing a template\": \"You’re editing a template\",\n-  \"Archived by {{userName}}\": \"Archived by {{userName}}\",\n   \"Deleted by {{userName}}\": \"Deleted by {{userName}}\",\n   \"Observing {{ userName }}\": \"Observing {{ userName }}\",\n   \"Backlinks\": \"Backlinks\",\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex 37ce916b2fb5..659ded718441 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -13,6 +13,10 @@ export enum StatusFilter {\n   Draft = \"draft\",\n }\n \n+export enum CollectionStatusFilter {\n+  Archived = \"archived\",\n+}\n+\n export enum CommentStatusFilter {\n   Resolved = \"resolved\",\n   Unresolved = \"unresolved\",\n",
    "test_patch": "diff --git a/server/models/Collection.test.ts b/server/models/Collection.test.ts\nindex d1e22631c7e3..2acf22370e36 100644\n--- a/server/models/Collection.test.ts\n+++ b/server/models/Collection.test.ts\n@@ -175,6 +175,67 @@ describe(\"#addDocumentToStructure\", () => {\n     expect(collection.documentStructure![0].children.length).toBe(2);\n     expect(collection.documentStructure![0].children[0].id).toBe(id);\n   });\n+\n+  test(\"should add the document along with its nested document(s)\", async () => {\n+    const collection = await buildCollection();\n+\n+    const document = await buildDocument({\n+      title: \"New doc\",\n+      teamId: collection.teamId,\n+    });\n+\n+    // create a nested doc within New doc\n+    const nestedDocument = await buildDocument({\n+      title: \"Nested doc\",\n+      parentDocumentId: document.id,\n+      teamId: collection.teamId,\n+    });\n+\n+    expect(collection.documentStructure).toBeNull();\n+\n+    await collection.addDocumentToStructure(document);\n+\n+    expect(collection.documentStructure).not.toBeNull();\n+    expect(collection.documentStructure).toHaveLength(1);\n+    expect(collection.documentStructure![0].id).toBe(document.id);\n+    expect(collection.documentStructure![0].children).toHaveLength(1);\n+    expect(collection.documentStructure![0].children[0].id).toBe(\n+      nestedDocument.id\n+    );\n+  });\n+\n+  test(\"should add the document along with its archived nested document(s)\", async () => {\n+    const collection = await buildCollection();\n+\n+    const document = await buildDocument({\n+      title: \"New doc\",\n+      teamId: collection.teamId,\n+    });\n+\n+    // create a nested doc within New doc\n+    const nestedDocument = await buildDocument({\n+      title: \"Nested doc\",\n+      parentDocumentId: document.id,\n+      teamId: collection.teamId,\n+    });\n+\n+    nestedDocument.archivedAt = new Date();\n+    await nestedDocument.save();\n+\n+    expect(collection.documentStructure).toBeNull();\n+\n+    await collection.addDocumentToStructure(document, undefined, {\n+      includeArchived: true,\n+    });\n+\n+    expect(collection.documentStructure).not.toBeNull();\n+    expect(collection.documentStructure).toHaveLength(1);\n+    expect(collection.documentStructure![0].id).toBe(document.id);\n+    expect(collection.documentStructure![0].children).toHaveLength(1);\n+    expect(collection.documentStructure![0].children[0].id).toBe(\n+      nestedDocument.id\n+    );\n+  });\n   describe(\"options: documentJson\", () => {\n     test(\"should append supplied json over document's own\", async () => {\n       const collection = await buildCollection();\n\ndiff --git a/server/policies/collection.test.ts b/server/policies/collection.test.ts\nindex 5a314d67ee49..a177716c2cc5 100644\n--- a/server/policies/collection.test.ts\n+++ b/server/policies/collection.test.ts\n@@ -9,6 +9,23 @@ import {\n import { serialize } from \"./index\";\n \n describe(\"admin\", () => {\n+  it(\"should allow team admin to archive collection\", async () => {\n+    const team = await buildTeam();\n+    const admin = await buildAdmin({ teamId: team.id });\n+    const collection = await buildCollection({ teamId: team.id });\n+    // reload to get membership\n+    const reloaded = await Collection.scope({\n+      method: [\"withMembership\", admin.id],\n+    }).findByPk(collection.id);\n+    const abilities = serialize(admin, reloaded);\n+    expect(abilities.read).toBeTruthy();\n+    expect(abilities.update).toBeTruthy();\n+    expect(abilities.readDocument).toBeTruthy();\n+    expect(abilities.updateDocument).toBeTruthy();\n+    expect(abilities.createDocument).toBeTruthy();\n+    expect(abilities.archive).toBeTruthy();\n+  });\n+\n   it(\"should allow updating collection but not reading documents\", async () => {\n     const team = await buildTeam();\n     const user = await buildAdmin({\n@@ -29,6 +46,7 @@ describe(\"admin\", () => {\n     expect(abilities.share).toEqual(false);\n     expect(abilities.read).toBeTruthy();\n     expect(abilities.update).toBeTruthy();\n+    expect(abilities.archive).toBeTruthy();\n   });\n \n   it(\"should allow updating documents in view only collection\", async () => {\n@@ -40,47 +58,76 @@ describe(\"admin\", () => {\n       teamId: team.id,\n       permission: CollectionPermission.Read,\n     });\n-    const abilities = serialize(user, collection);\n+    // reload to get membership\n+    const reloaded = await Collection.scope({\n+      method: [\"withMembership\", user.id],\n+    }).findByPk(collection.id);\n+    const abilities = serialize(user, reloaded);\n     expect(abilities.readDocument).toBeTruthy();\n     expect(abilities.updateDocument).toBeTruthy();\n     expect(abilities.createDocument).toBeTruthy();\n     expect(abilities.share).toBeTruthy();\n     expect(abilities.read).toBeTruthy();\n     expect(abilities.update).toBeTruthy();\n+    expect(abilities.archive).toBeTruthy();\n   });\n });\n \n describe(\"member\", () => {\n   describe(\"admin permission\", () => {\n-    it(\"should allow updating collection\", async () => {\n+    it(\"should allow member to update collection\", async () => {\n       const team = await buildTeam();\n-      const user = await buildUser({\n-        teamId: team.id,\n-      });\n-      const collection = await buildCollection({\n-        teamId: team.id,\n-        permission: CollectionPermission.ReadWrite,\n-      });\n-      await UserMembership.create({\n-        createdById: user.id,\n-        collectionId: collection.id,\n-        userId: user.id,\n-        permission: CollectionPermission.Admin,\n+      const admin = await buildAdmin({ teamId: team.id });\n+      const member = await buildUser({ teamId: team.id });\n+      const collection = await buildCollection({ teamId: team.id });\n+      await collection.$add(\"user\", member, {\n+        through: {\n+          permission: CollectionPermission.Admin,\n+          createdById: admin.id,\n+        },\n       });\n       // reload to get membership\n       const reloaded = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n+        method: [\"withMembership\", member.id],\n       }).findByPk(collection.id);\n-      const abilities = serialize(user, reloaded);\n+      const abilities = serialize(member, reloaded);\n       expect(abilities.read).toBeTruthy();\n+      expect(abilities.update).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n-      // expect(abilities.createDocument).toBeTruthy();\n-      // expect(abilities.share).toBeTruthy();\n+      expect(abilities.updateDocument).toBeTruthy();\n+      expect(abilities.createDocument).toBeTruthy();\n+      expect(abilities.share).toBeTruthy();\n       expect(abilities.update).toBeTruthy();\n+      expect(abilities.archive).toBeTruthy();\n     });\n   });\n \n   describe(\"read_write permission\", () => {\n+    it(\"should disallow member to update collection\", async () => {\n+      const team = await buildTeam();\n+      const admin = await buildAdmin({ teamId: team.id });\n+      const member = await buildUser({ teamId: team.id });\n+\n+      const collection = await buildCollection({ teamId: team.id });\n+      await collection.$add(\"user\", member, {\n+        through: {\n+          permission: CollectionPermission.ReadWrite,\n+          createdById: admin.id,\n+        },\n+      });\n+      // reload to get membership\n+      const reloaded = await Collection.scope({\n+        method: [\"withMembership\", member.id],\n+      }).findByPk(collection.id);\n+      const abilities = serialize(member, reloaded);\n+      expect(abilities.read).toBeTruthy();\n+      expect(abilities.update).toBe(false);\n+      expect(abilities.readDocument).toBeTruthy();\n+      expect(abilities.updateDocument).toBeTruthy();\n+      expect(abilities.createDocument).toBeTruthy();\n+      expect(abilities.archive).toBe(false);\n+    });\n+\n     it(\"should allow read write documents for team member\", async () => {\n       const team = await buildTeam();\n       const user = await buildUser({\n@@ -95,6 +142,7 @@ describe(\"member\", () => {\n       expect(abilities.readDocument).toBeTruthy();\n       expect(abilities.share).toBeTruthy();\n       expect(abilities.update).toEqual(false);\n+      expect(abilities.archive).toEqual(false);\n     });\n \n     it(\"should override read membership permission\", async () => {\n@@ -121,10 +169,38 @@ describe(\"member\", () => {\n       expect(abilities.readDocument).toBeTruthy();\n       expect(abilities.share).toBeTruthy();\n       expect(abilities.update).toEqual(false);\n+      expect(abilities.archive).toEqual(false);\n     });\n   });\n \n   describe(\"read permission\", () => {\n+    it(\"should disallow member to archive collection\", async () => {\n+      const team = await buildTeam();\n+      const admin = await buildAdmin({ teamId: team.id });\n+      const member = await buildUser({ teamId: team.id });\n+      const collection = await buildCollection({\n+        teamId: team.id,\n+        permission: CollectionPermission.Read,\n+      });\n+      await collection.$add(\"user\", member, {\n+        through: {\n+          permission: CollectionPermission.Read,\n+          createdById: admin.id,\n+        },\n+      });\n+      // reload to get membership\n+      const reloaded = await Collection.scope({\n+        method: [\"withMembership\", member.id],\n+      }).findByPk(collection.id);\n+      const abilities = serialize(member, reloaded);\n+      expect(abilities.read).toBeTruthy();\n+      expect(abilities.update).not.toBeTruthy();\n+      expect(abilities.readDocument).toBeTruthy();\n+      expect(abilities.updateDocument).toBe(false);\n+      expect(abilities.createDocument).toBe(false);\n+      expect(abilities.archive).toBe(false);\n+    });\n+\n     it(\"should allow read permissions for team member\", async () => {\n       const team = await buildTeam();\n       const user = await buildUser({\n@@ -138,32 +214,33 @@ describe(\"member\", () => {\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.update).toEqual(false);\n       expect(abilities.share).toEqual(false);\n+      expect(abilities.archive).toEqual(false);\n     });\n \n     it(\"should allow override with read_write membership permission\", async () => {\n       const team = await buildTeam();\n-      const user = await buildUser({\n-        teamId: team.id,\n-      });\n+      const admin = await buildAdmin({ teamId: team.id });\n+      const member = await buildUser({ teamId: team.id });\n       const collection = await buildCollection({\n         teamId: team.id,\n         permission: CollectionPermission.Read,\n       });\n-      await UserMembership.create({\n-        createdById: user.id,\n-        collectionId: collection.id,\n-        userId: user.id,\n-        permission: CollectionPermission.ReadWrite,\n+      await collection.$add(\"user\", member, {\n+        through: {\n+          permission: CollectionPermission.ReadWrite,\n+          createdById: admin.id,\n+        },\n       });\n       // reload to get membership\n       const reloaded = await Collection.scope({\n-        method: [\"withMembership\", user.id],\n+        method: [\"withMembership\", member.id],\n       }).findByPk(collection.id);\n-      const abilities = serialize(user, reloaded);\n+      const abilities = serialize(member, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n       expect(abilities.share).toBeTruthy();\n       expect(abilities.update).toEqual(false);\n+      expect(abilities.archive).toEqual(false);\n     });\n   });\n \n@@ -183,6 +260,7 @@ describe(\"member\", () => {\n       expect(abilities.createDocument).toEqual(false);\n       expect(abilities.share).toEqual(false);\n       expect(abilities.update).toEqual(false);\n+      expect(abilities.archive).toEqual(false);\n     });\n \n     it(\"should allow override with team member membership permission\", async () => {\n@@ -210,6 +288,7 @@ describe(\"member\", () => {\n       expect(abilities.createDocument).toBeTruthy();\n       expect(abilities.share).toBeTruthy();\n       expect(abilities.update).toEqual(false);\n+      expect(abilities.archive).toEqual(false);\n     });\n   });\n });\n@@ -232,6 +311,7 @@ describe(\"viewer\", () => {\n       expect(abilities.createDocument).toEqual(false);\n       expect(abilities.update).toEqual(false);\n       expect(abilities.share).toEqual(false);\n+      expect(abilities.archive).toEqual(false);\n     });\n \n     it(\"should override read membership permission\", async () => {\n@@ -259,6 +339,7 @@ describe(\"viewer\", () => {\n       expect(abilities.readDocument).toBeTruthy();\n       expect(abilities.share).toBeTruthy();\n       expect(abilities.update).toEqual(false);\n+      expect(abilities.archive).toEqual(false);\n     });\n   });\n \n@@ -289,6 +370,7 @@ describe(\"viewer\", () => {\n       expect(abilities.createDocument).toBeTruthy();\n       expect(abilities.share).toBeTruthy();\n       expect(abilities.update).toEqual(false);\n+      expect(abilities.archive).toEqual(false);\n     });\n   });\n \n@@ -307,6 +389,7 @@ describe(\"viewer\", () => {\n       expect(abilities.read).toEqual(false);\n       expect(abilities.update).toEqual(false);\n       expect(abilities.share).toEqual(false);\n+      expect(abilities.archive).toEqual(false);\n     });\n \n     it(\"should allow override with team member membership permission\", async () => {\n@@ -335,6 +418,7 @@ describe(\"viewer\", () => {\n       expect(abilities.createDocument).toBeTruthy();\n       expect(abilities.share).toBeTruthy();\n       expect(abilities.update).toEqual(false);\n+      expect(abilities.archive).toEqual(false);\n     });\n   });\n });\n@@ -357,6 +441,7 @@ describe(\"guest\", () => {\n       expect(abilities.createDocument).toEqual(false);\n       expect(abilities.update).toEqual(false);\n       expect(abilities.share).toEqual(false);\n+      expect(abilities.archive).toEqual(false);\n     });\n   });\n \n@@ -386,5 +471,6 @@ describe(\"guest\", () => {\n     expect(abilities.createDocument).toEqual(false);\n     expect(abilities.share).toEqual(false);\n     expect(abilities.update).toEqual(false);\n+    expect(abilities.archive).toEqual(false);\n   });\n });\n\ndiff --git a/server/routes/api/collections/collections.test.ts b/server/routes/api/collections/collections.test.ts\nindex c3ca6b72afe4..1fc40f1a3ded 100644\n--- a/server/routes/api/collections/collections.test.ts\n+++ b/server/routes/api/collections/collections.test.ts\n@@ -1,4 +1,4 @@\n-import { CollectionPermission } from \"@shared/types\";\n+import { CollectionPermission, CollectionStatusFilter } from \"@shared/types\";\n import { Document, UserMembership, GroupMembership } from \"@server/models\";\n import {\n   buildUser,\n@@ -40,6 +40,44 @@ describe(\"#collections.list\", () => {\n     expect(body.policies[0].abilities.read).toBeTruthy();\n   });\n \n+  it(\"should include archived collections\", async () => {\n+    const team = await buildTeam();\n+    const admin = await buildAdmin({ teamId: team.id });\n+    const collection = await buildCollection({\n+      teamId: team.id,\n+      archivedAt: new Date(),\n+    });\n+    const res = await server.post(\"/api/collections.list\", {\n+      body: {\n+        token: admin.getJwtToken(),\n+        statusFilter: [CollectionStatusFilter.Archived],\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(1);\n+    expect(body.data[0].archivedAt).toBeTruthy();\n+    expect(body.data[0].archivedBy).toBeTruthy();\n+    expect(body.data[0].archivedBy.id).toBe(collection.archivedById);\n+  });\n+\n+  it(\"should exclude archived collections\", async () => {\n+    const team = await buildTeam();\n+    const admin = await buildAdmin({ teamId: team.id });\n+    await buildCollection({\n+      teamId: team.id,\n+      archivedAt: new Date(),\n+    });\n+    const res = await server.post(\"/api/collections.list\", {\n+      body: {\n+        token: admin.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).toHaveLength(0);\n+  });\n+\n   it(\"should not return private collections actor is not a member of\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n@@ -122,6 +160,62 @@ describe(\"#collections.list\", () => {\n     expect(body.policies.length).toEqual(2);\n     expect(body.policies[0].abilities.read).toBeTruthy();\n   });\n+\n+  it(\"should not include archived collections\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    await buildCollection({\n+      userId: user.id,\n+      teamId: team.id,\n+      archivedAt: new Date(),\n+    });\n+    const res = await server.post(\"/api/collections.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(0);\n+  });\n+\n+  it(\"should not include archived collections\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const collection = await buildCollection({\n+      userId: user.id,\n+      teamId: team.id,\n+    });\n+\n+    const beforeArchiveRes = await server.post(\"/api/collections.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const beforeArchiveBody = await beforeArchiveRes.json();\n+    expect(beforeArchiveRes.status).toEqual(200);\n+    expect(beforeArchiveBody.data).toHaveLength(1);\n+    expect(beforeArchiveBody.data[0].id).toEqual(collection.id);\n+\n+    const archiveRes = await server.post(\"/api/collections.archive\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: collection.id,\n+      },\n+    });\n+\n+    expect(archiveRes.status).toEqual(200);\n+\n+    const afterArchiveRes = await server.post(\"/api/collections.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+      },\n+    });\n+\n+    const afterArchiveBody = await afterArchiveRes.json();\n+    expect(afterArchiveRes.status).toEqual(200);\n+    expect(afterArchiveBody.data).toHaveLength(0);\n+  });\n });\n \n describe(\"#collections.import\", () => {\n@@ -1056,6 +1150,26 @@ describe(\"#collections.memberships\", () => {\n });\n \n describe(\"#collections.info\", () => {\n+  it(\"should return archivedBy for archived collections\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const collection = await buildCollection({\n+      userId: user.id,\n+      teamId: team.id,\n+      archivedAt: new Date(),\n+      archivedById: user.id,\n+    });\n+    const res = await server.post(\"/api/collections.info\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: collection.id,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.archivedBy.id).toEqual(collection.archivedById);\n+  });\n+\n   it(\"should return collection\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n@@ -1705,3 +1819,76 @@ describe(\"#collections.delete\", () => {\n     expect(body.success).toBe(true);\n   });\n });\n+\n+describe(\"#collections.archive\", () => {\n+  it(\"should archive collection\", async () => {\n+    const team = await buildTeam();\n+    const admin = await buildAdmin({ teamId: team.id });\n+    const collection = await buildCollection({ teamId: team.id });\n+    const document = await buildDocument({\n+      collectionId: collection.id,\n+      teamId: team.id,\n+      publishedAt: new Date(),\n+    });\n+\n+    await collection.reload();\n+    expect(collection.documentStructure).not.toBe(null);\n+    expect(document.archivedAt).toBe(null);\n+    const res = await server.post(\"/api/collections.archive\", {\n+      body: {\n+        token: admin.getJwtToken(),\n+        id: collection.id,\n+      },\n+    });\n+    const [, , body] = await Promise.all([\n+      collection.reload(),\n+      document.reload(),\n+      res.json(),\n+    ]);\n+    expect(res.status).toEqual(200);\n+    expect(body.data.archivedAt).not.toBe(null);\n+    expect(body.data.archivedBy).toBeTruthy();\n+    expect(body.data.archivedBy.id).toBe(collection.archivedById);\n+    expect(document.archivedAt).not.toBe(null);\n+  });\n+});\n+\n+describe(\"#collections.restore\", () => {\n+  it(\"should restore collection\", async () => {\n+    const team = await buildTeam();\n+    const admin = await buildAdmin({ teamId: team.id });\n+    const collection = await buildCollection({\n+      teamId: team.id,\n+    });\n+    await buildDocument({\n+      collectionId: collection.id,\n+      teamId: team.id,\n+      publishedAt: new Date(),\n+    });\n+    // reload to ensure documentStructure is set\n+    await collection.reload();\n+    expect(collection.documentStructure).not.toBe(null);\n+    const archiveRes = await server.post(\"/api/collections.archive\", {\n+      body: {\n+        token: admin.getJwtToken(),\n+        id: collection.id,\n+      },\n+    });\n+    const [, archiveBody] = await Promise.all([\n+      collection.reload(),\n+      archiveRes.json(),\n+    ]);\n+    expect(archiveRes.status).toEqual(200);\n+    expect(archiveBody.data.archivedAt).not.toBe(null);\n+    const res = await server.post(\"/api/collections.restore\", {\n+      body: {\n+        token: admin.getJwtToken(),\n+        id: collection.id,\n+      },\n+    });\n+    const [, body] = await Promise.all([collection.reload(), res.json()]);\n+    expect(res.status).toEqual(200);\n+    expect(body.data.archivedAt).toBe(null);\n+    expect(collection.documentStructure).not.toBe(null);\n+  });\n+});\n\ndiff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex c826e9998950..40afef9f3a6e 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -806,6 +806,85 @@ describe(\"#documents.list\", () => {\n     expect(body.data.length).toEqual(0);\n   });\n \n+  it(\"should return only archived documents in a collection\", async () => {\n+    const user = await buildUser();\n+    const collection = await buildCollection({\n+      teamId: user.teamId,\n+    });\n+    const docs = await Promise.all([\n+      buildDocument({\n+        userId: user.id,\n+        teamId: user.teamId,\n+        collectionId: collection.id,\n+      }),\n+      buildDocument({\n+        userId: user.id,\n+        teamId: user.teamId,\n+        collectionId: collection.id,\n+      }),\n+      buildDocument({\n+        userId: user.id,\n+        teamId: user.teamId,\n+        collectionId: collection.id,\n+      }),\n+    ]);\n+    await docs[0].archive(user);\n+    const res = await server.post(\"/api/documents.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        statusFilter: [StatusFilter.Archived],\n+        collectionId: collection.id,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).toHaveLength(1);\n+    expect(body.data[0].id).toEqual(docs[0].id);\n+  });\n+\n+  it(\"should return archived documents across all collections user has access to\", async () => {\n+    const user = await buildUser();\n+    const collections = await Promise.all([\n+      buildCollection({\n+        teamId: user.teamId,\n+      }),\n+      buildCollection({\n+        teamId: user.teamId,\n+      }),\n+    ]);\n+    const docs = await Promise.all([\n+      buildDocument({\n+        userId: user.id,\n+        teamId: user.teamId,\n+        collectionId: collections[0].id,\n+      }),\n+      buildDocument({\n+        userId: user.id,\n+        teamId: user.teamId,\n+        collectionId: collections[1].id,\n+      }),\n+      buildDocument({\n+        userId: user.id,\n+        teamId: user.teamId,\n+        collectionId: collections[1].id,\n+      }),\n+    ]);\n+    await Promise.all([docs[0].archive(user), docs[1].archive(user)]);\n+    const res = await server.post(\"/api/documents.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        statusFilter: [StatusFilter.Archived],\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data).toHaveLength(2);\n+    const docIds = body.data.map((doc: any) => doc.id);\n+    expect(docIds).toContain(docs[0].id);\n+    expect(docIds).toContain(docs[1].id);\n+    expect(docIds).not.toContain(docs[2].id);\n+  });\n+\n   it(\"should not return documents in private collections not a member of\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n@@ -2678,6 +2757,131 @@ describe(\"#documents.move\", () => {\n });\n \n describe(\"#documents.restore\", () => {\n+  it(\"should correctly restore document from an archived collection\", async () => {\n+    const user = await buildUser();\n+    const collection = await buildCollection({\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+    const anotherCollection = await buildCollection({\n+      teamId: user.teamId,\n+    });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      collectionId: collection.id,\n+    });\n+\n+    const archiveRes = await server.post(\"/api/collections.archive\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: collection.id,\n+      },\n+    });\n+\n+    expect(archiveRes.status).toEqual(200);\n+\n+    // check if document is part of the correct collection's structure\n+    await collection.reload();\n+    expect(collection.archivedAt).not.toBe(null);\n+    expect(collection.documentStructure).not.toBe(null);\n+    expect(collection.documentStructure).toHaveLength(1);\n+    expect(collection?.documentStructure?.[0].id).toBe(document.id);\n+    expect(anotherCollection.documentStructure).toBeNull();\n+\n+    const res = await server.post(\"/api/documents.restore\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+        collectionId: anotherCollection.id,\n+      },\n+    });\n+\n+    const [, , body] = await Promise.all([\n+      collection.reload(),\n+      anotherCollection.reload(),\n+      res.json(),\n+    ]);\n+    expect(res.status).toEqual(200);\n+    expect(body.data.deletedAt).toEqual(null);\n+    expect(body.data.collectionId).toEqual(anotherCollection.id);\n+\n+    // re-check collection structure after restore\n+    expect(collection.documentStructure).toHaveLength(0);\n+    expect(anotherCollection.documentStructure).not.toBe(null);\n+    expect(anotherCollection.documentStructure).toHaveLength(1);\n+    expect(anotherCollection?.documentStructure?.[0].id).toBe(document.id);\n+  });\n+\n+  it(\"should fail if attempting to restore document to an archived collection\", async () => {\n+    const user = await buildUser();\n+    const collection = await buildCollection({\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      collectionId: collection.id,\n+    });\n+\n+    const archiveRes = await server.post(\"/api/collections.archive\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: collection.id,\n+      },\n+    });\n+\n+    expect(archiveRes.status).toEqual(200);\n+\n+    const res = await server.post(\"/api/documents.restore\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+      },\n+    });\n+\n+    const body = await res.json();\n+    expect(res.status).toEqual(400);\n+    expect(body.message).toEqual(\n+      \"Unable to restore, the collection may have been deleted or archived\"\n+    );\n+  });\n+\n+  it(\"should fail if attempting to restore to a collection for which the user does not have access\", async () => {\n+    const user = await buildUser();\n+    const collection = await buildCollection({\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      collectionId: collection.id,\n+    });\n+\n+    const archiveRes = await server.post(\"/api/collections.archive\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: collection.id,\n+      },\n+    });\n+\n+    expect(archiveRes.status).toEqual(200);\n+\n+    const anotherCollection = await buildCollection();\n+\n+    const res = await server.post(\"/api/documents.restore\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+        collectionId: anotherCollection.id,\n+      },\n+    });\n+\n+    expect(res.status).toEqual(403);\n+  });\n+\n   it(\"should require id\", async () => {\n     const user = await buildUser();\n     const document = await buildDocument({\n@@ -2788,13 +2992,58 @@ describe(\"#documents.restore\", () => {\n     });\n     await document.destroy();\n     await collection.destroy({ hooks: false });\n+    // passing deleted collection's id\n     const res = await server.post(\"/api/documents.restore\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+        collectionId: collection.id,\n+      },\n+    });\n+    // not passing collection's id\n+    const anotherRes = await server.post(\"/api/documents.restore\", {\n       body: {\n         token: user.getJwtToken(),\n         id: document.id,\n       },\n     });\n+    const body = await res.json();\n+    const anotherBody = await anotherRes.json();\n     expect(res.status).toEqual(400);\n+    expect(body.message).toEqual(\n+      \"Unable to restore, the collection may have been deleted or archived\"\n+    );\n+    expect(anotherRes.status).toEqual(400);\n+    expect(anotherBody.message).toEqual(\n+      \"Unable to restore, the collection may have been deleted or archived\"\n+    );\n+  });\n+\n+  it(\"should not allow restore of documents in archived collection\", async () => {\n+    const user = await buildUser();\n+    const collection = await buildCollection({\n+      teamId: user.teamId,\n+    });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      collectionId: collection.id,\n+    });\n+    await document.destroy();\n+    collection.archivedAt = new Date();\n+    await collection.save();\n+    const res = await server.post(\"/api/documents.restore\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+        collectionId: collection.id,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(400);\n+    expect(body.message).toEqual(\n+      \"Unable to restore, the collection may have been deleted or archived\"\n+    );\n   });\n \n   it(\"should not allow restore of trashed documents to collection user cannot access\", async () => {\n\ndiff --git a/server/test/factories.ts b/server/test/factories.ts\nindex 94c4a9e3bf82..b24bd8c303b9 100644\n--- a/server/test/factories.ts\n+++ b/server/test/factories.ts\n@@ -284,6 +284,10 @@ export async function buildCollection(\n     overrides.userId = user.id;\n   }\n \n+  if (overrides.archivedAt && !overrides.archivedById) {\n+    overrides.archivedById = overrides.userId;\n+  }\n+\n   return Collection.create({\n     name: faker.lorem.words(2),\n     description: faker.lorem.words(4),\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7223",
    "pr_id": 7223,
    "issue_id": 7220,
    "repo": "outline/outline",
    "problem_statement": "Outdated \"lastModified\" user returned in `documents.archive` response\nHad a report of the incorrect user showing up in the archived banner on documents after archiving and before a page reload. \r\n\r\nShould also check trashing to see if it has the same issue.",
    "issue_word_count": 34,
    "test_files_count": 3,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "server/commands/accountProvisioner.ts",
      "server/commands/documentCreator.ts",
      "server/commands/documentUpdater.ts",
      "server/models/Document.test.ts",
      "server/models/Document.ts",
      "server/routes/api/documents/documents.test.ts",
      "server/routes/api/documents/documents.ts",
      "server/routes/api/shares/shares.test.ts"
    ],
    "pr_changed_test_files": [
      "server/models/Document.test.ts",
      "server/routes/api/documents/documents.test.ts",
      "server/routes/api/shares/shares.test.ts"
    ],
    "base_commit": "0d0932a6f635274406feb46e6402424c745232b0",
    "head_commit": "e08919b613126e4c94447a548bc3558a9696b47b",
    "repo_url": "https://github.com/outline/outline/pull/7223",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7223",
    "dockerfile": "",
    "pr_merged_at": "2024-07-11T00:41:30.000Z",
    "patch": "diff --git a/server/commands/accountProvisioner.ts b/server/commands/accountProvisioner.ts\nindex 06cce25546d4..ad9b4472f3c3 100644\n--- a/server/commands/accountProvisioner.ts\n+++ b/server/commands/accountProvisioner.ts\n@@ -244,7 +244,7 @@ async function provisionFirstCollection(team: Team, user: User) {\n \n       document.content = await DocumentHelper.toJSON(document);\n \n-      await document.publish(collection.createdById, collection.id, {\n+      await document.publish(user, collection.id, {\n         transaction,\n       });\n     }\n\ndiff --git a/server/commands/documentCreator.ts b/server/commands/documentCreator.ts\nindex bd2af5863b2b..0b7c5bbc7196 100644\n--- a/server/commands/documentCreator.ts\n+++ b/server/commands/documentCreator.ts\n@@ -152,7 +152,7 @@ export default async function documentCreator({\n       throw new Error(\"Collection ID is required to publish\");\n     }\n \n-    await document.publish(user.id, collectionId, { transaction });\n+    await document.publish(user, collectionId, { transaction });\n     await Event.create(\n       {\n         name: \"documents.publish\",\n\ndiff --git a/server/commands/documentUpdater.ts b/server/commands/documentUpdater.ts\nindex 155278fa914f..7db50cb3a6c0 100644\n--- a/server/commands/documentUpdater.ts\n+++ b/server/commands/documentUpdater.ts\n@@ -110,7 +110,7 @@ export default async function documentUpdater({\n     if (!document.collectionId) {\n       document.collectionId = cId;\n     }\n-    await document.publish(user.id, cId, { transaction });\n+    await document.publish(user, cId, { transaction });\n \n     await Event.create(\n       {\n@@ -121,6 +121,7 @@ export default async function documentUpdater({\n     );\n   } else if (changed) {\n     document.lastModifiedById = user.id;\n+    document.updatedBy = user;\n     await document.save({ transaction });\n \n     await Event.create(event, { transaction });\n\ndiff --git a/server/models/Document.ts b/server/models/Document.ts\nindex 3de0309db181..b08f30ef5d1f 100644\n--- a/server/models/Document.ts\n+++ b/server/models/Document.ts\n@@ -808,37 +808,8 @@ class Document extends ParanoidModel<\n     return findAllChildDocumentIds(this.id);\n   };\n \n-  archiveWithChildren = async (\n-    userId: string,\n-    options?: FindOptions<Document>\n-  ) => {\n-    const archivedAt = new Date();\n-\n-    // Helper to archive all child documents for a document\n-    const archiveChildren = async (parentDocumentId: string) => {\n-      const childDocuments = await (\n-        this.constructor as typeof Document\n-      ).findAll({\n-        where: {\n-          parentDocumentId,\n-        },\n-      });\n-      for (const child of childDocuments) {\n-        await archiveChildren(child.id);\n-        child.archivedAt = archivedAt;\n-        child.lastModifiedById = userId;\n-        await child.save(options);\n-      }\n-    };\n-\n-    await archiveChildren(this.id);\n-    this.archivedAt = archivedAt;\n-    this.lastModifiedById = userId;\n-    return this.save(options);\n-  };\n-\n   publish = async (\n-    userId: string,\n+    user: User,\n     collectionId: string,\n     { transaction }: SaveOptions<Document>\n   ) => {\n@@ -890,7 +861,8 @@ class Document extends ParanoidModel<\n       )\n     );\n \n-    this.lastModifiedById = userId;\n+    this.lastModifiedById = user.id;\n+    this.updatedBy = user;\n     this.publishedAt = new Date();\n     return this.save({ transaction });\n   };\n@@ -911,9 +883,8 @@ class Document extends ParanoidModel<\n     return false;\n   };\n \n-  unpublish = async (userId: string) => {\n-    // If the document is already a draft then calling unpublish should act like\n-    // a regular save\n+  unpublish = async (user: User) => {\n+    // If the document is already a draft then calling unpublish should act like save\n     if (!this.publishedAt) {\n       return this.save();\n     }\n@@ -934,15 +905,17 @@ class Document extends ParanoidModel<\n \n     // unpublishing a document converts the ownership to yourself, so that it\n     // will appear in your drafts rather than the original creators\n-    this.createdById = userId;\n-    this.lastModifiedById = userId;\n+    this.createdById = user.id;\n+    this.lastModifiedById = user.id;\n+    this.createdBy = user;\n+    this.updatedBy = user;\n     this.publishedAt = null;\n     return this.save();\n   };\n \n   // Moves a document from being visible to the team within a collection\n   // to the archived area, where it can be subsequently restored.\n-  archive = async (userId: string) => {\n+  archive = async (user: User) => {\n     await this.sequelize.transaction(async (transaction: Transaction) => {\n       const collection = this.collectionId\n         ? await Collection.findByPk(this.collectionId, {\n@@ -957,12 +930,12 @@ class Document extends ParanoidModel<\n       }\n     });\n \n-    await this.archiveWithChildren(userId);\n+    await this.archiveWithChildren(user);\n     return this;\n   };\n \n   // Restore an archived document back to being visible to the team\n-  unarchive = async (userId: string) => {\n+  unarchive = async (user: User) => {\n     await this.sequelize.transaction(async (transaction: Transaction) => {\n       const collection = this.collectionId\n         ? await Collection.findByPk(this.collectionId, {\n@@ -997,13 +970,14 @@ class Document extends ParanoidModel<\n     }\n \n     this.archivedAt = null;\n-    this.lastModifiedById = userId;\n+    this.lastModifiedById = user.id;\n+    this.updatedBy = user;\n     await this.save();\n     return this;\n   };\n \n   // Delete a document, archived or otherwise.\n-  delete = (userId: string) =>\n+  delete = (user: User) =>\n     this.sequelize.transaction(async (transaction: Transaction) => {\n       if (!this.archivedAt && !this.template && this.collectionId) {\n         // delete any children and remove from the document structure\n@@ -1025,15 +999,10 @@ class Document extends ParanoidModel<\n         },\n         transaction,\n       });\n-      await this.update(\n-        {\n-          lastModifiedById: userId,\n-        },\n-        {\n-          transaction,\n-        }\n-      );\n-      return this;\n+\n+      this.lastModifiedById = user.id;\n+      this.updatedBy = user;\n+      return this.save({ transaction });\n     });\n \n   getTimestamp = () => Math.round(new Date(this.updatedAt).getTime() / 1000);\n@@ -1098,6 +1067,37 @@ class Document extends ParanoidModel<\n       children,\n     };\n   };\n+\n+  private archiveWithChildren = async (\n+    user: User,\n+    options?: FindOptions<Document>\n+  ) => {\n+    const archivedAt = new Date();\n+\n+    // Helper to archive all child documents for a document\n+    const archiveChildren = async (parentDocumentId: string) => {\n+      const childDocuments = await (\n+        this.constructor as typeof Document\n+      ).findAll({\n+        where: {\n+          parentDocumentId,\n+        },\n+      });\n+      for (const child of childDocuments) {\n+        await archiveChildren(child.id);\n+        child.archivedAt = archivedAt;\n+        child.lastModifiedById = user.id;\n+        child.updatedBy = user;\n+        await child.save(options);\n+      }\n+    };\n+\n+    await archiveChildren(this.id);\n+    this.archivedAt = archivedAt;\n+    this.lastModifiedById = user.id;\n+    this.updatedBy = user;\n+    return this.save(options);\n+  };\n }\n \n export default Document;\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 17320de457f7..115837884c00 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -681,7 +681,7 @@ router.post(\n     if (document.deletedAt) {\n       authorize(user, \"restore\", document);\n       // restore a previously deleted document\n-      await document.unarchive(user.id);\n+      await document.unarchive(user);\n       await Event.createFromContext(ctx, {\n         name: \"documents.restore\",\n         documentId: document.id,\n@@ -693,7 +693,7 @@ router.post(\n     } else if (document.archivedAt) {\n       authorize(user, \"unarchive\", document);\n       // restore a previously archived document\n-      await document.unarchive(user.id);\n+      await document.unarchive(user);\n       await Event.createFromContext(ctx, {\n         name: \"documents.unarchive\",\n         documentId: document.id,\n@@ -1182,7 +1182,7 @@ router.post(\n     });\n     authorize(user, \"archive\", document);\n \n-    await document.archive(user.id);\n+    await document.archive(user);\n     await Event.createFromContext(ctx, {\n       name: \"documents.archive\",\n       documentId: document.id,\n@@ -1230,7 +1230,7 @@ router.post(\n \n       authorize(user, \"delete\", document);\n \n-      await document.delete(user.id);\n+      await document.delete(user);\n       await Event.createFromContext(ctx, {\n         name: \"documents.delete\",\n         documentId: document.id,\n@@ -1271,7 +1271,7 @@ router.post(\n       );\n     }\n \n-    await document.unpublish(user.id);\n+    await document.unpublish(user);\n     await Event.createFromContext(ctx, {\n       name: \"documents.unpublish\",\n       documentId: document.id,\n",
    "test_patch": "diff --git a/server/models/Document.test.ts b/server/models/Document.test.ts\nindex 8e43d07048db..f8543bace16e 100644\n--- a/server/models/Document.test.ts\n+++ b/server/models/Document.test.ts\n@@ -40,7 +40,7 @@ describe(\"#delete\", () => {\n   test(\"should soft delete and set last modified\", async () => {\n     const document = await buildDocument();\n     const user = await buildUser();\n-    await document.delete(user.id);\n+    await document.delete(user);\n \n     const newDocument = await Document.findByPk(document.id, {\n       paranoid: false,\n@@ -54,7 +54,7 @@ describe(\"#delete\", () => {\n       template: true,\n     });\n     const user = await buildUser();\n-    await document.delete(user.id);\n+    await document.delete(user);\n     const newDocument = await Document.findByPk(document.id, {\n       paranoid: false,\n     });\n@@ -67,7 +67,7 @@ describe(\"#delete\", () => {\n       archivedAt: new Date(),\n     });\n     const user = await buildUser();\n-    await document.delete(user.id);\n+    await document.delete(user);\n     const newDocument = await Document.findByPk(document.id, {\n       paranoid: false,\n     });\n@@ -78,7 +78,7 @@ describe(\"#delete\", () => {\n   it(\"should delete draft without collection\", async () => {\n     const user = await buildUser();\n     const document = await buildDraftDocument();\n-    await document.delete(user.id);\n+    await document.delete(user);\n     const deletedDocument = await Document.findByPk(document.id, {\n       paranoid: false,\n     });\n\ndiff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex 5bde77266aa3..dba3386184d3 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -87,7 +87,7 @@ describe(\"#documents.info\", () => {\n       userId: user.id,\n       teamId: user.teamId,\n     });\n-    await document.archive(user.id);\n+    await document.archive(user);\n     const res = await server.post(\"/api/documents.info\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -433,7 +433,7 @@ describe(\"#documents.info\", () => {\n       teamId: document.teamId,\n       userId: user.id,\n     });\n-    await document.archive(user.id);\n+    await document.archive(user);\n     const res = await server.post(\"/api/documents.info\", {\n       body: {\n         shareId: share.id,\n@@ -607,7 +607,7 @@ describe(\"#documents.export\", () => {\n       userId: user.id,\n       teamId: user.teamId,\n     });\n-    await document.archive(user.id);\n+    await document.archive(user);\n     const res = await server.post(\"/api/documents.export\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -1638,7 +1638,7 @@ describe(\"#documents.search\", () => {\n       text: \"search term\",\n       teamId: user.teamId,\n     });\n-    await document.archive(user.id);\n+    await document.archive(user);\n     const res = await server.post(\"/api/documents.search\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -1658,7 +1658,7 @@ describe(\"#documents.search\", () => {\n       text: \"search term\",\n       teamId: user.teamId,\n     });\n-    await document.archive(user.id);\n+    await document.archive(user);\n     const res = await server.post(\"/api/documents.search\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -1938,7 +1938,7 @@ describe(\"#documents.archived\", () => {\n       userId: user.id,\n       teamId: user.teamId,\n     });\n-    await document.archive(user.id);\n+    await document.archive(user);\n     const res = await server.post(\"/api/documents.archived\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -1955,7 +1955,7 @@ describe(\"#documents.archived\", () => {\n       userId: user.id,\n       teamId: user.teamId,\n     });\n-    await document.delete(user.id);\n+    await document.delete(user);\n     const res = await server.post(\"/api/documents.archived\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -1975,7 +1975,7 @@ describe(\"#documents.archived\", () => {\n       teamId: user.teamId,\n       collectionId: collection.id,\n     });\n-    await document.archive(user.id);\n+    await document.archive(user);\n     const res = await server.post(\"/api/documents.archived\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -2009,7 +2009,7 @@ describe(\"#documents.deleted\", () => {\n       userId: user.id,\n       teamId: user.teamId,\n     });\n-    await document.delete(user.id);\n+    await document.delete(user);\n     const res = await server.post(\"/api/documents.deleted\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -2041,9 +2041,9 @@ describe(\"#documents.deleted\", () => {\n       collectionId: null,\n     });\n     await Promise.all([\n-      document.delete(user.id),\n-      draftDocument.delete(user.id),\n-      otherUserDraft.delete(user2.id),\n+      document.delete(user),\n+      draftDocument.delete(user),\n+      otherUserDraft.delete(user2),\n     ]);\n     const res = await server.post(\"/api/documents.deleted\", {\n       body: {\n@@ -2067,7 +2067,7 @@ describe(\"#documents.deleted\", () => {\n       teamId: user.teamId,\n       collectionId: collection.id,\n     });\n-    await document.delete(user.id);\n+    await document.delete(user);\n     const res = await server.post(\"/api/documents.deleted\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -2476,7 +2476,7 @@ describe(\"#documents.restore\", () => {\n       userId: user.id,\n       teamId: user.teamId,\n     });\n-    await document.delete(user.id);\n+    await document.delete(user);\n     const res = await server.post(\"/api/documents.restore\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -2560,7 +2560,7 @@ describe(\"#documents.restore\", () => {\n       userId: user.id,\n       teamId: user.teamId,\n     });\n-    await document.archive(user.id);\n+    await document.archive(user);\n     const res = await server.post(\"/api/documents.restore\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -2584,8 +2584,8 @@ describe(\"#documents.restore\", () => {\n       collectionId: document.collectionId,\n       parentDocumentId: document.id,\n     });\n-    await childDocument.archive(user.id);\n-    await document.archive(user.id);\n+    await childDocument.archive(user);\n+    await document.archive(user);\n     const res = await server.post(\"/api/documents.restore\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -3286,7 +3286,7 @@ describe(\"#documents.update\", () => {\n       userId: user.id,\n       teamId: user.teamId,\n     });\n-    await document.archive(user.id);\n+    await document.archive(user);\n     const res = await server.post(\"/api/documents.update\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -3594,9 +3594,10 @@ describe(\"#documents.archive\", () => {\n   });\n \n   it(\"should allow archiving document\", async () => {\n-    const user = await buildUser();\n+    const admin = await buildAdmin();\n+    const user = await buildUser({ teamId: admin.teamId });\n     const document = await buildDocument({\n-      userId: user.id,\n+      userId: admin.id,\n       teamId: user.teamId,\n     });\n     const res = await server.post(\"/api/documents.archive\", {\n@@ -3800,6 +3801,8 @@ describe(\"#documents.unpublish\", () => {\n     expect(res.status).toEqual(200);\n     expect(body.data.id).toEqual(document.id);\n     expect(body.data.publishedAt).toBeNull();\n+    expect(body.data.createdBy.id).toEqual(user.id);\n+    expect(body.data.updatedBy.id).toEqual(user.id);\n \n     const reloaded = await Document.unscoped().findByPk(document.id);\n     expect(reloaded!.createdById).toEqual(user.id);\n@@ -3816,7 +3819,7 @@ describe(\"#documents.unpublish\", () => {\n       teamId: user.teamId,\n       parentDocumentId: document.id,\n     });\n-    await child.archive(user.id);\n+    await child.archive(user);\n     const res = await server.post(\"/api/documents.unpublish\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -3827,6 +3830,7 @@ describe(\"#documents.unpublish\", () => {\n     expect(res.status).toEqual(200);\n     expect(body.data.id).toEqual(document.id);\n     expect(body.data.publishedAt).toBeNull();\n+    expect(body.data.updatedBy.id).toEqual(user.id);\n   });\n \n   it(\"should unpublish another users document\", async () => {\n@@ -3850,6 +3854,7 @@ describe(\"#documents.unpublish\", () => {\n     expect(res.status).toEqual(200);\n     expect(body.data.id).toEqual(document.id);\n     expect(body.data.publishedAt).toBeNull();\n+    expect(body.data.updatedBy.id).toEqual(user.id);\n \n     const reloaded = await Document.unscoped().findByPk(document.id);\n     expect(reloaded!.createdById).toEqual(user.id);\n@@ -3876,7 +3881,7 @@ describe(\"#documents.unpublish\", () => {\n       userId: user.id,\n       teamId: user.teamId,\n     });\n-    await document.delete(user.id);\n+    await document.delete(user);\n     const res = await server.post(\"/api/documents.unpublish\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -3892,7 +3897,7 @@ describe(\"#documents.unpublish\", () => {\n       userId: user.id,\n       teamId: user.teamId,\n     });\n-    await document.archive(user.id);\n+    await document.archive(user);\n     const res = await server.post(\"/api/documents.unpublish\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -4496,7 +4501,7 @@ describe(\"#documents.empty_trash\", () => {\n       userId: user.id,\n       teamId: user.teamId,\n     });\n-    await document.delete(user.id);\n+    await document.delete(user);\n \n     const res = await server.post(\"/api/documents.empty_trash\", {\n       body: {\n\ndiff --git a/server/routes/api/shares/shares.test.ts b/server/routes/api/shares/shares.test.ts\nindex 4ccdcfbe4170..23db2ae2c8d5 100644\n--- a/server/routes/api/shares/shares.test.ts\n+++ b/server/routes/api/shares/shares.test.ts\n@@ -111,7 +111,7 @@ describe(\"#shares.list\", () => {\n       teamId: user.teamId,\n       userId: user.id,\n     });\n-    await document.delete(user.id);\n+    await document.delete(user);\n     const res = await server.post(\"/api/shares.list\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -966,7 +966,7 @@ describe(\"#shares.revoke\", () => {\n       teamId: user.teamId,\n       userId: user.id,\n     });\n-    await document.delete(user.id);\n+    await document.delete(user);\n     const res = await server.post(\"/api/shares.revoke\", {\n       body: {\n         token: user.getJwtToken(),\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7156",
    "pr_id": 7156,
    "issue_id": 7148,
    "repo": "outline/outline",
    "problem_statement": "Users can post \"empty\" comments\nTurns out there's a way to create empty comment. Steps 👇 \r\n\r\n1. Post a comment\r\n2. Click on \"Edit\", erase the comment and click on \"Save\".\r\n\r\n<img width=\"280\" alt=\"Screenshot 2024-06-25 at 21 13 59\" src=\"https://github.com/outline/outline/assets/15694566/58791278-4d88-4b57-aefe-10580751031d\">\r\n",
    "issue_word_count": 51,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "server/routes/api/comments/comments.test.ts",
      "server/routes/api/schema.ts",
      "shared/editor/nodes/Image.tsx",
      "shared/utils/ProsemirrorHelper.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/comments/comments.test.ts"
    ],
    "base_commit": "6a1a3eee91031b3852aeb8d77011fc1e24ca9daa",
    "head_commit": "4034f5f0e8d09ce7171906120f582c2d90b7690a",
    "repo_url": "https://github.com/outline/outline/pull/7156",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7156",
    "dockerfile": "",
    "pr_merged_at": "2024-06-30T06:08:43.000Z",
    "patch": "diff --git a/server/routes/api/schema.ts b/server/routes/api/schema.ts\nindex a22393216ee5..d44772f012e9 100644\n--- a/server/routes/api/schema.ts\n+++ b/server/routes/api/schema.ts\n@@ -2,6 +2,7 @@ import formidable from \"formidable\";\n import { Node } from \"prosemirror-model\";\n import { z } from \"zod\";\n import { ProsemirrorData as TProsemirrorData } from \"@shared/types\";\n+import { ProsemirrorHelper } from \"@shared/utils/ProsemirrorHelper\";\n import { schema } from \"@server/editor\";\n \n export const BaseSchema = z.object({\n@@ -14,7 +15,7 @@ export const ProsemirrorSchema = z.custom<TProsemirrorData>((val) => {\n   try {\n     const node = Node.fromJSON(schema, val);\n     node.check();\n-    return true;\n+    return !ProsemirrorHelper.isEmpty(node, schema);\n   } catch (_e) {\n     return false;\n   }\n\ndiff --git a/shared/editor/nodes/Image.tsx b/shared/editor/nodes/Image.tsx\nindex d67efc302ae3..ba4b32860d7c 100644\n--- a/shared/editor/nodes/Image.tsx\n+++ b/shared/editor/nodes/Image.tsx\n@@ -166,6 +166,8 @@ export default class Image extends SimpleImage {\n           [\"p\", { class: \"caption\" }, 0],\n         ];\n       },\n+      toPlainText: (node) =>\n+        node.attrs.alt ? `(image: ${node.attrs.alt})` : \"(image)\",\n     };\n   }\n \n\ndiff --git a/shared/utils/ProsemirrorHelper.ts b/shared/utils/ProsemirrorHelper.ts\nindex b2aa0f470483..bc18cdfeff62 100644\n--- a/shared/utils/ProsemirrorHelper.ts\n+++ b/shared/utils/ProsemirrorHelper.ts\n@@ -142,8 +142,35 @@ export class ProsemirrorHelper {\n    *\n    * @returns True if the editor is empty\n    */\n-  static isEmpty(doc: Node) {\n-    return !doc || doc.textContent.trim() === \"\";\n+  static isEmpty(doc: Node, schema?: Schema) {\n+    if (!schema) {\n+      return !doc || doc.textContent.trim() === \"\";\n+    }\n+\n+    const textSerializers = Object.fromEntries(\n+      Object.entries(schema.nodes)\n+        .filter(([, node]) => node.spec.toPlainText)\n+        .map(([name, node]) => [name, node.spec.toPlainText])\n+    );\n+\n+    let empty = true;\n+    doc.descendants((child: Node) => {\n+      // If we've already found non-empty data, we can stop descending further\n+      if (!empty) {\n+        return false;\n+      }\n+\n+      const toPlainText = textSerializers[child.type.name];\n+      if (toPlainText) {\n+        empty = !toPlainText(child).trim();\n+      } else if (child.isText) {\n+        empty = !child.text?.trim();\n+      }\n+\n+      return empty;\n+    });\n+\n+    return empty;\n   }\n \n   /**\n",
    "test_patch": "diff --git a/server/routes/api/comments/comments.test.ts b/server/routes/api/comments/comments.test.ts\nindex b214a6202af2..394d1d95c0ef 100644\n--- a/server/routes/api/comments/comments.test.ts\n+++ b/server/routes/api/comments/comments.test.ts\n@@ -176,7 +176,116 @@ describe(\"#comments.create\", () => {\n       },\n     });\n \n+    const anotherRes = await server.post(\"/api/comments.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        data: {\n+          type: \"doc\",\n+          content: [{ type: \"paragraph\" }],\n+        },\n+      },\n+    });\n+\n     expect(res.status).toEqual(400);\n+    expect(anotherRes.status).toEqual(400);\n+  });\n+\n+  it(\"should not allow comments containing only whitespaces\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const res = await server.post(\"/api/comments.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        data: {\n+          type: \"doc\",\n+          content: [\n+            {\n+              type: \"paragraph\",\n+              content: [{ type: \"text\", text: \"  \\n\\r\\n\" }],\n+            },\n+          ],\n+        },\n+      },\n+    });\n+\n+    expect(res.status).toEqual(400);\n+  });\n+\n+  it(\"should allow adding images to comments\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const res = await server.post(\"/api/comments.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        data: {\n+          type: \"doc\",\n+          content: [\n+            {\n+              type: \"paragraph\",\n+              content: [\n+                {\n+                  type: \"image\",\n+                  attrs: {\n+                    src: \"https://example.com/image.png\",\n+                    alt: \"Example image\",\n+                  },\n+                },\n+              ],\n+            },\n+          ],\n+        },\n+      },\n+    });\n+\n+    expect(res.status).toEqual(200);\n+  });\n+\n+  it(\"should allow adding images from internal sources\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const res = await server.post(\"/api/comments.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        data: {\n+          type: \"doc\",\n+          content: [\n+            {\n+              type: \"paragraph\",\n+              content: [\n+                {\n+                  type: \"image\",\n+                  attrs: {\n+                    src: \"/api/attachments.redirect?id=1401323b-c4e2-40de-b172-e1668ec89111\",\n+                    alt: null,\n+                  },\n+                },\n+              ],\n+            },\n+          ],\n+        },\n+      },\n+    });\n+\n+    expect(res.status).toEqual(200);\n   });\n \n   it(\"should not allow invalid comment data\", async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7150",
    "pr_id": 7150,
    "issue_id": 6978,
    "repo": "outline/outline",
    "problem_statement": "Workspace templates\nCurrently templates need to belong to a collection, this is somewhat restrictive as many templates would work well at a workspace level - for example \"Meeting notes\". Recently we've seen folks creating collections just to create templates and this is a pattern that has a lot of downsides, instead we should just support templates without a `collectionId` being visible to all workspace members.\r\n\r\n",
    "issue_word_count": 63,
    "test_files_count": 3,
    "non_test_files_count": 27,
    "pr_changed_files": [
      "app/actions/definitions/documents.tsx",
      "app/components/DocumentTemplatizeDialog.tsx",
      "app/components/Sidebar/components/CollectionLink.tsx",
      "app/components/Sidebar/components/CollectionLinkChildren.tsx",
      "app/components/Sidebar/components/DocumentLink.tsx",
      "app/components/TemplatizeDialog/Label.tsx",
      "app/components/TemplatizeDialog/SelectLocation.tsx",
      "app/components/TemplatizeDialog/index.tsx",
      "app/hooks/useSettingsConfig.ts",
      "app/menus/DocumentMenu.tsx",
      "app/menus/NewTemplateMenu.tsx",
      "app/menus/TemplatesMenu.tsx",
      "app/models/Document.ts",
      "app/scenes/Document/components/DataLoader.tsx",
      "app/scenes/Document/components/Header.tsx",
      "app/scenes/DocumentDelete.tsx",
      "app/scenes/DocumentMove.tsx",
      "app/scenes/DocumentPublish.tsx",
      "app/scenes/DocumentReparent.tsx",
      "app/stores/DocumentsStore.ts",
      "app/utils/routeHelpers.ts",
      "server/commands/documentCreator.ts",
      "server/commands/documentMover.ts",
      "server/commands/documentUpdater.ts",
      "server/models/Document.ts",
      "server/policies/document.ts",
      "server/policies/index.test.ts",
      "server/policies/team.test.ts",
      "server/policies/team.ts",
      "server/routes/api/documents/documents.test.ts"
    ],
    "pr_changed_test_files": [
      "server/policies/index.test.ts",
      "server/policies/team.test.ts",
      "server/routes/api/documents/documents.test.ts"
    ],
    "base_commit": "9c628dfc54f38e70e6755573027a51a085723ad8",
    "head_commit": "b1de4641115cca3d80bed1263693eaffa25f9435",
    "repo_url": "https://github.com/outline/outline/pull/7150",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7150",
    "dockerfile": "",
    "pr_merged_at": "2024-07-27T15:38:16.000Z",
    "patch": "diff --git a/app/actions/definitions/documents.tsx b/app/actions/definitions/documents.tsx\nindex 169d941b4e9c..88754a2d0c25 100644\n--- a/app/actions/definitions/documents.tsx\n+++ b/app/actions/definitions/documents.tsx\n@@ -37,10 +37,10 @@ import DocumentMove from \"~/scenes/DocumentMove\";\n import DocumentPermanentDelete from \"~/scenes/DocumentPermanentDelete\";\n import DocumentPublish from \"~/scenes/DocumentPublish\";\n import DeleteDocumentsInTrash from \"~/scenes/Trash/components/DeleteDocumentsInTrash\";\n-import DocumentTemplatizeDialog from \"~/components/DocumentTemplatizeDialog\";\n import DuplicateDialog from \"~/components/DuplicateDialog\";\n import SharePopover from \"~/components/Sharing/Document\";\n import { getHeaderExpandedKey } from \"~/components/Sidebar/components/Header\";\n+import DocumentTemplatizeDialog from \"~/components/TemplatizeDialog\";\n import { createAction } from \"~/actions\";\n import { DocumentSection, TrashSection } from \"~/actions/sections\";\n import env from \"~/env\";\n@@ -223,7 +223,7 @@ export const publishDocument = createAction({\n       return;\n     }\n \n-    if (document?.collectionId) {\n+    if (document?.collectionId || document?.template) {\n       await document.save(undefined, {\n         publish: true,\n       });\n@@ -688,7 +688,7 @@ export const createTemplateFromDocument = createAction({\n     }\n     return !!(\n       !!activeCollectionId &&\n-      stores.policies.abilities(activeCollectionId).update\n+      stores.policies.abilities(activeCollectionId).updateDocument\n     );\n   },\n   perform: ({ activeDocumentId, stores, t, event }) => {\n@@ -735,11 +735,50 @@ export const searchDocumentsForQuery = (searchQuery: string) =>\n     visible: ({ location }) => location.pathname !== searchPath(),\n   });\n \n-export const moveDocument = createAction({\n-  name: ({ t }) => t(\"Move\"),\n+export const moveTemplateToWorkspace = createAction({\n+  name: ({ t }) => t(\"Move to workspace\"),\n+  analyticsName: \"Move template to workspace\",\n+  section: DocumentSection,\n+  icon: <MoveIcon />,\n+  iconInContextMenu: false,\n+  visible: ({ activeDocumentId, stores }) => {\n+    if (!activeDocumentId) {\n+      return false;\n+    }\n+    const document = stores.documents.get(activeDocumentId);\n+    if (!document || !document.template || document.isWorkspaceTemplate) {\n+      return false;\n+    }\n+    return !!stores.policies.abilities(activeDocumentId).move;\n+  },\n+  perform: async ({ activeDocumentId, stores }) => {\n+    if (activeDocumentId) {\n+      const document = stores.documents.get(activeDocumentId);\n+      if (!document) {\n+        return;\n+      }\n+\n+      await document.move({\n+        collectionId: null,\n+      });\n+    }\n+  },\n+});\n+\n+export const moveDocumentToCollection = createAction({\n+  name: ({ activeDocumentId, stores, t }) => {\n+    if (!activeDocumentId) {\n+      return t(\"Move\");\n+    }\n+    const document = stores.documents.get(activeDocumentId);\n+    return document?.template && document?.collectionId\n+      ? t(\"Move to collection\")\n+      : t(\"Move\");\n+  },\n   analyticsName: \"Move document\",\n   section: DocumentSection,\n   icon: <MoveIcon />,\n+  iconInContextMenu: false,\n   visible: ({ activeDocumentId, stores }) => {\n     if (!activeDocumentId) {\n       return false;\n@@ -763,6 +802,44 @@ export const moveDocument = createAction({\n   },\n });\n \n+export const moveDocument = createAction({\n+  name: ({ t }) => t(\"Move\"),\n+  analyticsName: \"Move document\",\n+  section: DocumentSection,\n+  icon: <MoveIcon />,\n+  visible: ({ activeDocumentId, stores }) => {\n+    if (!activeDocumentId) {\n+      return false;\n+    }\n+    const document = stores.documents.get(activeDocumentId);\n+    // Don't show the button if this is a non-workspace template.\n+    if (!document || (document.template && !document.isWorkspaceTemplate)) {\n+      return false;\n+    }\n+    return !!stores.policies.abilities(activeDocumentId).move;\n+  },\n+  perform: moveDocumentToCollection.perform,\n+});\n+\n+export const moveTemplate = createAction({\n+  name: ({ t }) => t(\"Move\"),\n+  analyticsName: \"Move document\",\n+  section: DocumentSection,\n+  icon: <MoveIcon />,\n+  visible: ({ activeDocumentId, stores }) => {\n+    if (!activeDocumentId) {\n+      return false;\n+    }\n+    const document = stores.documents.get(activeDocumentId);\n+    // Don't show the menu if this is not a template (or) a workspace template.\n+    if (!document || !document.template || document.isWorkspaceTemplate) {\n+      return false;\n+    }\n+    return !!stores.policies.abilities(activeDocumentId).move;\n+  },\n+  children: [moveTemplateToWorkspace, moveDocumentToCollection],\n+});\n+\n export const archiveDocument = createAction({\n   name: ({ t }) => t(\"Archive\"),\n   analyticsName: \"Archive document\",\n@@ -997,7 +1074,8 @@ export const rootDocumentActions = [\n   subscribeDocument,\n   unsubscribeDocument,\n   duplicateDocument,\n-  moveDocument,\n+  moveTemplateToWorkspace,\n+  moveDocumentToCollection,\n   openRandomDocument,\n   permanentlyDeleteDocument,\n   permanentlyDeleteDocumentsInTrash,\n\ndiff --git a/app/components/DocumentTemplatizeDialog.tsx b/app/components/DocumentTemplatizeDialog.tsx\ndeleted file mode 100644\nindex 0750b305e361..000000000000\n--- a/app/components/DocumentTemplatizeDialog.tsx\n+++ /dev/null\n@@ -1,49 +0,0 @@\n-import invariant from \"invariant\";\n-import { observer } from \"mobx-react\";\n-import * as React from \"react\";\n-import { useTranslation, Trans } from \"react-i18next\";\n-import { useHistory } from \"react-router-dom\";\n-import { toast } from \"sonner\";\n-import ConfirmationDialog from \"~/components/ConfirmationDialog\";\n-import useStores from \"~/hooks/useStores\";\n-import { documentPath } from \"~/utils/routeHelpers\";\n-\n-type Props = {\n-  documentId: string;\n-};\n-\n-function DocumentTemplatizeDialog({ documentId }: Props) {\n-  const history = useHistory();\n-  const { t } = useTranslation();\n-  const { documents } = useStores();\n-  const document = documents.get(documentId);\n-  invariant(document, \"Document must exist\");\n-\n-  const handleSubmit = React.useCallback(async () => {\n-    const template = await document?.templatize();\n-    if (template) {\n-      history.push(documentPath(template));\n-      toast.success(t(\"Template created, go ahead and customize it\"));\n-    }\n-  }, [document, history, t]);\n-\n-  return (\n-    <ConfirmationDialog\n-      onSubmit={handleSubmit}\n-      submitText={t(\"Create template\")}\n-      savingText={`${t(\"Creating\")}…`}\n-    >\n-      <Trans\n-        defaults=\"Creating a template from <em>{{titleWithDefault}}</em> is a non-destructive action – we'll make a copy of the document and turn it into a template that can be used as a starting point for new documents.\"\n-        values={{\n-          titleWithDefault: document.titleWithDefault,\n-        }}\n-        components={{\n-          em: <strong />,\n-        }}\n-      />\n-    </ConfirmationDialog>\n-  );\n-}\n-\n-export default observer(DocumentTemplatizeDialog);\n\ndiff --git a/app/components/Sidebar/components/CollectionLink.tsx b/app/components/Sidebar/components/CollectionLink.tsx\nindex b46908dfc60f..bb0aeccfa550 100644\n--- a/app/components/Sidebar/components/CollectionLink.tsx\n+++ b/app/components/Sidebar/components/CollectionLink.tsx\n@@ -100,7 +100,7 @@ const CollectionLink: React.FC<Props> = ({\n           ),\n         });\n       } else {\n-        await documents.move(id, collection.id);\n+        await documents.move({ documentId: id, collectionId: collection.id });\n \n         if (!expanded) {\n           onDisclosureClick();\n\ndiff --git a/app/components/Sidebar/components/CollectionLinkChildren.tsx b/app/components/Sidebar/components/CollectionLinkChildren.tsx\nindex ace232dc2b2f..f09ada3aa104 100644\n--- a/app/components/Sidebar/components/CollectionLinkChildren.tsx\n+++ b/app/components/Sidebar/components/CollectionLinkChildren.tsx\n@@ -52,7 +52,11 @@ function CollectionLinkChildren({\n       if (!collection) {\n         return;\n       }\n-      void documents.move(item.id, collection.id, undefined, 0);\n+      void documents.move({\n+        documentId: item.id,\n+        collectionId: collection.id,\n+        index: 0,\n+      });\n     },\n     collect: (monitor) => ({\n       isOverReorder: !!monitor.isOver(),\n\ndiff --git a/app/components/Sidebar/components/DocumentLink.tsx b/app/components/Sidebar/components/DocumentLink.tsx\nindex 687beb610f91..4f27167d3416 100644\n--- a/app/components/Sidebar/components/DocumentLink.tsx\n+++ b/app/components/Sidebar/components/DocumentLink.tsx\n@@ -187,7 +187,11 @@ function InnerDocumentLink(\n       if (!collection) {\n         return;\n       }\n-      await documents.move(item.id, collection.id, node.id);\n+      await documents.move({\n+        documentId: item.id,\n+        collectionId: collection.id,\n+        parentDocumentId: node.id,\n+      });\n       setExpanded(true);\n     },\n     canDrop: (item, monitor) =>\n@@ -249,11 +253,21 @@ function InnerDocumentLink(\n       }\n \n       if (expanded) {\n-        void documents.move(item.id, collection.id, node.id, 0);\n+        void documents.move({\n+          documentId: item.id,\n+          collectionId: collection.id,\n+          parentDocumentId: node.id,\n+          index: 0,\n+        });\n         return;\n       }\n \n-      void documents.move(item.id, collection.id, parentId, index + 1);\n+      void documents.move({\n+        documentId: item.id,\n+        collectionId: collection.id,\n+        parentDocumentId: parentId,\n+        index: index + 1,\n+      });\n     },\n     collect: (monitor) => ({\n       isOverReorder: monitor.isOver(),\n\ndiff --git a/app/components/TemplatizeDialog/Label.tsx b/app/components/TemplatizeDialog/Label.tsx\nnew file mode 100644\nindex 000000000000..c211b87d3e85\n--- /dev/null\n+++ b/app/components/TemplatizeDialog/Label.tsx\n@@ -0,0 +1,22 @@\n+import React from \"react\";\n+import styled from \"styled-components\";\n+import Flex from \"~/components/Flex\";\n+\n+const Label = ({ icon, value }: { icon: React.ReactNode; value: string }) => (\n+  <Flex align=\"center\" gap={4}>\n+    <IconWrapper>{icon}</IconWrapper>\n+    {value}\n+  </Flex>\n+);\n+\n+const IconWrapper = styled.span`\n+  display: flex;\n+  justify-content: center;\n+  align-items: center;\n+  height: 24px;\n+  width: 24px;\n+  overflow: hidden;\n+  flex-shrink: 0;\n+`;\n+\n+export default Label;\n\ndiff --git a/app/components/TemplatizeDialog/SelectLocation.tsx b/app/components/TemplatizeDialog/SelectLocation.tsx\nnew file mode 100644\nindex 000000000000..b7efa39f1a33\n--- /dev/null\n+++ b/app/components/TemplatizeDialog/SelectLocation.tsx\n@@ -0,0 +1,113 @@\n+import { observer } from \"mobx-react\";\n+import React from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import { toast } from \"sonner\";\n+import { AvatarSize } from \"~/components/Avatar/Avatar\";\n+import CollectionIcon from \"~/components/Icons/CollectionIcon\";\n+import InputSelect, { Option } from \"~/components/InputSelect\";\n+import TeamLogo from \"~/components/TeamLogo\";\n+import useCurrentTeam from \"~/hooks/useCurrentTeam\";\n+import usePolicy from \"~/hooks/usePolicy\";\n+import useRequest from \"~/hooks/useRequest\";\n+import useStores from \"~/hooks/useStores\";\n+import Label from \"./Label\";\n+\n+type Props = {\n+  /** Collection ID to select by default. */\n+  defaultCollectionId?: string | null;\n+  /** Callback to be called when a collection is selected. */\n+  onSelect: (collectionId: string | null) => void;\n+};\n+\n+const SelectLocation = ({ defaultCollectionId, onSelect }: Props) => {\n+  const { t } = useTranslation();\n+  const team = useCurrentTeam();\n+  const { collections, policies } = useStores();\n+  const can = usePolicy(team);\n+\n+  const { loading, error } = useRequest(\n+    React.useCallback(async () => {\n+      if (!collections.isLoaded) {\n+        await collections.fetchAll({\n+          limit: 100,\n+        });\n+      }\n+    }, [collections])\n+  );\n+\n+  const workspaceOption: Option | null = can.createTemplate\n+    ? {\n+        label: (\n+          <Label\n+            icon={<TeamLogo model={team} size={AvatarSize.Toast} />}\n+            value={t(\"Workspace\")}\n+          />\n+        ),\n+        value: \"workspace\",\n+      }\n+    : null;\n+\n+  const collectionOptions: Option[] = React.useMemo(\n+    () =>\n+      collections.orderedData.reduce<Option[]>((memo, collection) => {\n+        const canCollection = policies.abilities(collection.id);\n+\n+        if (canCollection.createDocument) {\n+          memo.push({\n+            label: (\n+              <Label\n+                icon={<CollectionIcon collection={collection} />}\n+                value={collection.name}\n+              />\n+            ),\n+            value: collection.id,\n+          });\n+        }\n+\n+        return memo;\n+      }, []),\n+    [collections.orderedData, policies]\n+  );\n+\n+  const options: Option[] = workspaceOption\n+    ? collectionOptions.length\n+      ? [\n+          workspaceOption,\n+          ...collectionOptions.map((opt, idx) => {\n+            if (idx !== 0) {\n+              return opt;\n+            }\n+            opt.divider = true;\n+            return opt;\n+          }),\n+        ]\n+      : [workspaceOption]\n+    : collectionOptions;\n+\n+  const handleSelection = React.useCallback(\n+    (value: string | null) => {\n+      onSelect(value === \"workspace\" ? null : value);\n+    },\n+    [onSelect]\n+  );\n+\n+  if (error) {\n+    toast.error(t(\"Collections could not be loaded, please reload the app\"));\n+  }\n+\n+  if (loading || !options.length) {\n+    return null;\n+  }\n+\n+  return (\n+    <InputSelect\n+      value={defaultCollectionId ?? \"workspace\"}\n+      options={options}\n+      onChange={handleSelection}\n+      ariaLabel={t(\"Location\")}\n+      label={t(\"Location\")}\n+    />\n+  );\n+};\n+\n+export default observer(SelectLocation);\n\ndiff --git a/app/components/TemplatizeDialog/index.tsx b/app/components/TemplatizeDialog/index.tsx\nnew file mode 100644\nindex 000000000000..59e9e0914a48\n--- /dev/null\n+++ b/app/components/TemplatizeDialog/index.tsx\n@@ -0,0 +1,82 @@\n+import invariant from \"invariant\";\n+import { observer } from \"mobx-react\";\n+import * as React from \"react\";\n+import { useTranslation, Trans } from \"react-i18next\";\n+import { useHistory } from \"react-router-dom\";\n+import { toast } from \"sonner\";\n+import ConfirmationDialog from \"~/components/ConfirmationDialog\";\n+import Flex from \"~/components/Flex\";\n+import Switch from \"~/components/Switch\";\n+import useStores from \"~/hooks/useStores\";\n+import { documentPath } from \"~/utils/routeHelpers\";\n+import SelectLocation from \"./SelectLocation\";\n+\n+type Props = {\n+  documentId: string;\n+};\n+\n+function DocumentTemplatizeDialog({ documentId }: Props) {\n+  const history = useHistory();\n+  const { t } = useTranslation();\n+  const { documents } = useStores();\n+  const document = documents.get(documentId);\n+  invariant(document, \"Document must exist\");\n+\n+  const [publish, setPublish] = React.useState(true);\n+  const [collectionId, setCollectionId] = React.useState(\n+    document.collectionId ?? null\n+  );\n+\n+  const handlePublishChange = React.useCallback(\n+    (ev: React.ChangeEvent<HTMLInputElement>) => {\n+      setPublish(ev.target.checked);\n+    },\n+    []\n+  );\n+\n+  const handleSubmit = React.useCallback(async () => {\n+    const template = await document?.templatize({\n+      collectionId,\n+      publish,\n+    });\n+    if (template) {\n+      history.push(documentPath(template));\n+      toast.success(t(\"Template created, go ahead and customize it\"));\n+    }\n+  }, [t, document, history, collectionId, publish]);\n+\n+  return (\n+    <ConfirmationDialog\n+      onSubmit={handleSubmit}\n+      submitText={t(\"Create template\")}\n+      savingText={`${t(\"Creating\")}…`}\n+    >\n+      <Flex column gap={12}>\n+        <div>\n+          <Trans\n+            defaults=\"Creating a template from <em>{{titleWithDefault}}</em> is a non-destructive action – we'll make a copy of the document and turn it into a template that can be used as a starting point for new documents.\"\n+            values={{\n+              titleWithDefault: document.titleWithDefault,\n+            }}\n+            components={{\n+              em: <strong />,\n+            }}\n+          />\n+        </div>\n+        <SelectLocation\n+          defaultCollectionId={collectionId}\n+          onSelect={setCollectionId}\n+        />\n+        <Switch\n+          name=\"publish\"\n+          label={t(\"Published\")}\n+          note={t(\"Enable other members to use the template immediately\")}\n+          checked={publish}\n+          onChange={handlePublishChange}\n+        />\n+      </Flex>\n+    </ConfirmationDialog>\n+  );\n+}\n+\n+export default observer(DocumentTemplatizeDialog);\n\ndiff --git a/app/hooks/useSettingsConfig.ts b/app/hooks/useSettingsConfig.ts\nindex 4e3cf2ba8c49..e9bc8b915d37 100644\n--- a/app/hooks/useSettingsConfig.ts\n+++ b/app/hooks/useSettingsConfig.ts\n@@ -139,7 +139,7 @@ const useSettingsConfig = () => {\n         name: t(\"Templates\"),\n         path: settingsPath(\"templates\"),\n         component: Templates,\n-        enabled: can.update,\n+        enabled: can.readTemplate,\n         group: t(\"Workspace\"),\n         icon: ShapesIcon,\n       },\n\ndiff --git a/app/menus/DocumentMenu.tsx b/app/menus/DocumentMenu.tsx\nindex 87f666767fcd..d6e5fab96d25 100644\n--- a/app/menus/DocumentMenu.tsx\n+++ b/app/menus/DocumentMenu.tsx\n@@ -1,3 +1,4 @@\n+import capitalize from \"lodash/capitalize\";\n import { observer } from \"mobx-react\";\n import { EditIcon, InputIcon, RestoreIcon, SearchIcon } from \"outline-icons\";\n import * as React from \"react\";\n@@ -44,6 +45,7 @@ import {\n   shareDocument,\n   copyDocument,\n   searchInDocument,\n+  moveTemplate,\n } from \"~/actions/definitions/documents\";\n import useActionContext from \"~/hooks/useActionContext\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n@@ -124,7 +126,11 @@ function DocumentMenu({\n       }\n     ) => {\n       await document.restore(options);\n-      toast.success(t(\"Document restored\"));\n+      toast.success(\n+        t(\"{{ documentName }} restored\", {\n+          documentName: capitalize(document.noun),\n+        })\n+      );\n     },\n     [t, document]\n   );\n@@ -228,7 +234,10 @@ function DocumentMenu({\n             {\n               type: \"button\",\n               title: t(\"Restore\"),\n-              visible: (!!collection && can.restore) || can.unarchive,\n+              visible:\n+                ((document.isWorkspaceTemplate || !!collection) &&\n+                  can.restore) ||\n+                can.unarchive,\n               onClick: (ev) => handleRestore(ev),\n               icon: <RestoreIcon />,\n             },\n@@ -236,7 +245,10 @@ function DocumentMenu({\n               type: \"submenu\",\n               title: t(\"Restore\"),\n               visible:\n-                !collection && !!can.restore && restoreItems.length !== 0,\n+                !document.isWorkspaceTemplate &&\n+                !collection &&\n+                !!can.restore &&\n+                restoreItems.length !== 0,\n               style: {\n                 left: -170,\n                 position: \"relative\",\n@@ -290,6 +302,7 @@ function DocumentMenu({\n             actionToMenuItem(unpublishDocument, context),\n             actionToMenuItem(archiveDocument, context),\n             actionToMenuItem(moveDocument, context),\n+            actionToMenuItem(moveTemplate, context),\n             actionToMenuItem(pinDocument, context),\n             actionToMenuItem(createDocumentFromTemplate, context),\n             {\n\ndiff --git a/app/menus/NewTemplateMenu.tsx b/app/menus/NewTemplateMenu.tsx\nindex 7dd4ea3de466..d426a3ea995a 100644\n--- a/app/menus/NewTemplateMenu.tsx\n+++ b/app/menus/NewTemplateMenu.tsx\n@@ -5,9 +5,9 @@ import { useTranslation } from \"react-i18next\";\n import { MenuButton, useMenuState } from \"reakit/Menu\";\n import Button from \"~/components/Button\";\n import ContextMenu from \"~/components/ContextMenu\";\n-import Header from \"~/components/ContextMenu/Header\";\n import Template from \"~/components/ContextMenu/Template\";\n import CollectionIcon from \"~/components/Icons/CollectionIcon\";\n+import TeamLogo from \"~/components/TeamLogo\";\n import useCurrentTeam from \"~/hooks/useCurrentTeam\";\n import usePolicy from \"~/hooks/usePolicy\";\n import useStores from \"~/hooks/useStores\";\n@@ -28,7 +28,16 @@ function NewTemplateMenu() {\n     });\n   }, [collections]);\n \n-  const items = React.useMemo(\n+  const workspaceItem: MenuItem | null = can.createTemplate\n+    ? {\n+        type: \"route\",\n+        to: newTemplatePath(),\n+        title: t(\"Save in workspace\"),\n+        icon: <TeamLogo model={team} />,\n+      }\n+    : null;\n+\n+  const collectionItems = React.useMemo(\n     () =>\n       collections.orderedData.reduce<MenuItem[]>((filtered, collection) => {\n         const can = policies.abilities(collection.id);\n@@ -47,7 +56,28 @@ function NewTemplateMenu() {\n     [collections.orderedData, policies]\n   );\n \n-  if (!can.createDocument || items.length === 0) {\n+  const collectionItemsWithHeader: MenuItem[] = React.useMemo(\n+    () =>\n+      collectionItems.length\n+        ? [\n+            { type: \"heading\", title: t(\"Choose a collection\") },\n+            ...collectionItems,\n+          ]\n+        : [],\n+    [t, collectionItems]\n+  );\n+\n+  const items = workspaceItem\n+    ? collectionItemsWithHeader.length\n+      ? [\n+          workspaceItem,\n+          { type: \"separator\" } as MenuItem,\n+          ...collectionItemsWithHeader,\n+        ]\n+      : [workspaceItem]\n+    : collectionItemsWithHeader;\n+\n+  if (items.length === 0) {\n     return null;\n   }\n \n@@ -61,7 +91,6 @@ function NewTemplateMenu() {\n         )}\n       </MenuButton>\n       <ContextMenu aria-label={t(\"New template\")} {...menu}>\n-        <Header>{t(\"Choose a collection\")}</Header>\n         <Template {...menu} items={items} />\n       </ContextMenu>\n     </>\n\ndiff --git a/app/menus/TemplatesMenu.tsx b/app/menus/TemplatesMenu.tsx\nindex 9332b8b7f77a..c1a07a23c860 100644\n--- a/app/menus/TemplatesMenu.tsx\n+++ b/app/menus/TemplatesMenu.tsx\n@@ -6,11 +6,11 @@ import { MenuButton, useMenuState } from \"reakit/Menu\";\n import Document from \"~/models/Document\";\n import Button from \"~/components/Button\";\n import ContextMenu from \"~/components/ContextMenu\";\n-import MenuItem from \"~/components/ContextMenu/MenuItem\";\n-import Separator from \"~/components/ContextMenu/Separator\";\n+import Template from \"~/components/ContextMenu/Template\";\n import Icon from \"~/components/Icon\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n import useStores from \"~/hooks/useStores\";\n+import { MenuItem } from \"~/types\";\n import { replaceTitleVariables } from \"~/utils/date\";\n \n type Props = {\n@@ -25,36 +25,56 @@ function TemplatesMenu({ onSelectTemplate, document }: Props) {\n   const user = useCurrentUser();\n   const { documents } = useStores();\n   const { t } = useTranslation();\n-  const templates = documents.templates;\n \n-  if (!templates.length) {\n-    return null;\n-  }\n-\n-  const templatesInCollection = templates.filter(\n-    (t) => t.collectionId === document.collectionId\n-  );\n-  const otherTemplates = templates.filter(\n-    (t) => t.collectionId !== document.collectionId\n+  const templateToMenuItem = React.useCallback(\n+    (tmpl: Document): MenuItem => ({\n+      type: \"button\",\n+      title: replaceTitleVariables(tmpl.titleWithDefault, user),\n+      icon: tmpl.icon ? (\n+        <Icon value={tmpl.icon} color={tmpl.color ?? undefined} />\n+      ) : (\n+        <DocumentIcon />\n+      ),\n+      onClick: () => onSelectTemplate(tmpl),\n+    }),\n+    [user, onSelectTemplate]\n   );\n \n-  const renderTemplate = (template: Document) => (\n-    <MenuItem\n-      key={template.id}\n-      onClick={() => onSelectTemplate(template)}\n-      icon={\n-        template.icon ? (\n-          <Icon value={template.icon} color={template.color ?? undefined} />\n-        ) : (\n-          <DocumentIcon />\n-        )\n-      }\n-      {...menu}\n-    >\n-      {replaceTitleVariables(template.titleWithDefault, user)}\n-    </MenuItem>\n+  const templates = documents.templates.filter((tmpl) => tmpl.publishedAt);\n+\n+  const collectionItems = templates\n+    .filter(\n+      (tmpl) =>\n+        !tmpl.isWorkspaceTemplate && tmpl.collectionId === document.collectionId\n+    )\n+    .map(templateToMenuItem);\n+\n+  const workspaceTemplates = templates\n+    .filter((tmpl) => tmpl.isWorkspaceTemplate)\n+    .map(templateToMenuItem);\n+\n+  const workspaceItems: MenuItem[] = React.useMemo(\n+    () =>\n+      workspaceTemplates.length\n+        ? [{ type: \"heading\", title: t(\"Workspace\") }, ...workspaceTemplates]\n+        : [],\n+    [t, workspaceTemplates]\n   );\n \n+  const items = collectionItems\n+    ? workspaceItems.length\n+      ? [\n+          ...collectionItems,\n+          { type: \"separator\" } as MenuItem,\n+          ...workspaceItems,\n+        ]\n+      : collectionItems\n+    : workspaceItems;\n+\n+  if (!items.length) {\n+    return null;\n+  }\n+\n   return (\n     <>\n       <MenuButton {...menu}>\n@@ -65,11 +85,7 @@ function TemplatesMenu({ onSelectTemplate, document }: Props) {\n         )}\n       </MenuButton>\n       <ContextMenu {...menu} aria-label={t(\"Templates\")}>\n-        {templatesInCollection.map(renderTemplate)}\n-        {otherTemplates.length && templatesInCollection.length ? (\n-          <Separator />\n-        ) : undefined}\n-        {otherTemplates.map(renderTemplate)}\n+        <Template {...menu} items={items} />\n       </ContextMenu>\n     </>\n   );\n\ndiff --git a/app/models/Document.ts b/app/models/Document.ts\nindex 77cc48b11f4d..68631a9c4bb2 100644\n--- a/app/models/Document.ts\n+++ b/app/models/Document.ts\n@@ -381,6 +381,11 @@ export default class Document extends ParanoidModel {\n     return this.collection?.pathToDocument(this.id) ?? [];\n   }\n \n+  @computed\n+  get isWorkspaceTemplate() {\n+    return this.template && !this.collectionId;\n+  }\n+\n   get titleWithDefault(): string {\n     return this.title || i18n.t(\"Untitled\");\n   }\n@@ -490,7 +495,13 @@ export default class Document extends ParanoidModel {\n   };\n \n   @action\n-  templatize = () => this.store.templatize(this.id);\n+  templatize = ({\n+    collectionId,\n+    publish,\n+  }: {\n+    collectionId: string | null;\n+    publish: boolean;\n+  }) => this.store.templatize({ id: this.id, collectionId, publish });\n \n   @action\n   save = async (\n@@ -517,8 +528,10 @@ export default class Document extends ParanoidModel {\n     }\n   };\n \n-  move = (collectionId: string, parentDocumentId?: string | undefined) =>\n-    this.store.move(this.id, collectionId, parentDocumentId);\n+  move = (options: {\n+    collectionId?: string | null;\n+    parentDocumentId?: string;\n+  }) => this.store.move({ documentId: this.id, ...options });\n \n   duplicate = (options?: {\n     title?: string;\n\ndiff --git a/app/scenes/Document/components/DataLoader.tsx b/app/scenes/Document/components/DataLoader.tsx\nindex 28bfc2171802..2d8ee406b402 100644\n--- a/app/scenes/Document/components/DataLoader.tsx\n+++ b/app/scenes/Document/components/DataLoader.tsx\n@@ -177,7 +177,7 @@ function DataLoader({ match, children }: Props) {\n \n       // If we're attempting to update an archived, deleted, or otherwise\n       // uneditable document then forward to the canonical read url.\n-      if (!can.update && isEditRoute) {\n+      if (!can.update && isEditRoute && !document.template) {\n         history.push(document.url);\n         return;\n       }\n\ndiff --git a/app/scenes/Document/components/Header.tsx b/app/scenes/Document/components/Header.tsx\nindex 24d17c86f70f..429227255136 100644\n--- a/app/scenes/Document/components/Header.tsx\n+++ b/app/scenes/Document/components/Header.tsx\n@@ -116,8 +116,9 @@ function DocumentHeader({\n     activeDocumentId: document?.id,\n   });\n \n-  const { isDeleted, isTemplate } = document;\n   const can = usePolicy(document);\n+  const { isDeleted, isTemplate } = document;\n+  const isTemplateEditable = can.update && isTemplate;\n   const canToggleEmbeds = team?.documentEmbeds;\n   const isShare = !!shareId;\n   const showContents =\n@@ -276,7 +277,7 @@ function DocumentHeader({\n                 <ShareButton document={document} />\n               </Action>\n             )}\n-            {(isEditing || isTemplate) && (\n+            {(isEditing || isTemplateEditable) && (\n               <Action>\n                 <Tooltip\n                   content={t(\"Save\")}\n@@ -351,7 +352,9 @@ function DocumentHeader({\n                   hideOnActionDisabled\n                   hideIcon\n                 >\n-                  {document.collectionId ? t(\"Publish\") : `${t(\"Publish\")}…`}\n+                  {document.collectionId || document.isWorkspaceTemplate\n+                    ? t(\"Publish\")\n+                    : `${t(\"Publish\")}…`}\n                 </Button>\n               </Action>\n             )}\n\ndiff --git a/app/scenes/DocumentDelete.tsx b/app/scenes/DocumentDelete.tsx\nindex 6bccba417e62..70d5525d3fe5 100644\n--- a/app/scenes/DocumentDelete.tsx\n+++ b/app/scenes/DocumentDelete.tsx\n@@ -8,7 +8,11 @@ import Button from \"~/components/Button\";\n import Flex from \"~/components/Flex\";\n import Text from \"~/components/Text\";\n import useStores from \"~/hooks/useStores\";\n-import { collectionPath, documentPath } from \"~/utils/routeHelpers\";\n+import {\n+  collectionPath,\n+  documentPath,\n+  settingsPath,\n+} from \"~/utils/routeHelpers\";\n \n type Props = {\n   document: Document;\n@@ -21,7 +25,8 @@ function DocumentDelete({ document, onSubmit }: Props) {\n   const history = useHistory();\n   const [isDeleting, setDeleting] = React.useState(false);\n   const [isArchiving, setArchiving] = React.useState(false);\n-  const canArchive = !document.isDraft && !document.isArchived;\n+  const canArchive =\n+    !document.isDraft && !document.isArchived && !document.template;\n   const collection = document.collectionId\n     ? collections.get(document.collectionId)\n     : undefined;\n@@ -50,8 +55,12 @@ function DocumentDelete({ document, onSubmit }: Props) {\n             }\n           }\n \n-          // otherwise, redirect to the collection home\n-          history.push(collectionPath(collection?.path || \"/\"));\n+          // If template, redirect to the template settings.\n+          // Otherwise redirect to the collection (or) home.\n+          const path = document.template\n+            ? settingsPath(\"templates\")\n+            : collectionPath(collection?.path || \"/\");\n+          history.push(path);\n         }\n \n         onSubmit();\n\ndiff --git a/app/scenes/DocumentMove.tsx b/app/scenes/DocumentMove.tsx\nindex 3ea20460658f..bab7be78a564 100644\n--- a/app/scenes/DocumentMove.tsx\n+++ b/app/scenes/DocumentMove.tsx\n@@ -68,9 +68,9 @@ function DocumentMove({ document }: Props) {\n       const collectionId = selectedPath.collectionId as string;\n \n       if (type === \"document\") {\n-        await document.move(collectionId, parentDocumentId);\n+        await document.move({ collectionId, parentDocumentId });\n       } else {\n-        await document.move(collectionId);\n+        await document.move({ collectionId });\n       }\n \n       toast.success(t(\"Document moved\"));\n\ndiff --git a/app/scenes/DocumentPublish.tsx b/app/scenes/DocumentPublish.tsx\nindex da433b3a2361..14d6b6b10a65 100644\n--- a/app/scenes/DocumentPublish.tsx\n+++ b/app/scenes/DocumentPublish.tsx\n@@ -50,7 +50,7 @@ function DocumentPublish({ document }: Props) {\n \n       // Also move it under if selected path corresponds to another doc\n       if (type === \"document\") {\n-        await document.move(collectionId, parentDocumentId);\n+        await document.move({ collectionId, parentDocumentId });\n       }\n \n       document.collectionId = collectionId;\n\ndiff --git a/app/scenes/DocumentReparent.tsx b/app/scenes/DocumentReparent.tsx\nindex 4988abcf8941..97ad6ca910af 100644\n--- a/app/scenes/DocumentReparent.tsx\n+++ b/app/scenes/DocumentReparent.tsx\n@@ -48,7 +48,10 @@ function DocumentReparent({ collection, item, onSubmit, onCancel }: Props) {\n       setIsSaving(true);\n \n       try {\n-        await documents.move(item.id, collection.id);\n+        await documents.move({\n+          documentId: item.id,\n+          collectionId: collection.id,\n+        });\n         toast.message(t(\"Document moved\"));\n         onSubmit();\n       } catch (err) {\n\ndiff --git a/app/stores/DocumentsStore.ts b/app/stores/DocumentsStore.ts\nindex 2f83d424bd64..c22a0987cf4d 100644\n--- a/app/stores/DocumentsStore.ts\n+++ b/app/stores/DocumentsStore.ts\n@@ -457,7 +457,15 @@ export default class DocumentsStore extends Store<Document> {\n   };\n \n   @action\n-  templatize = async (id: string): Promise<Document | null | undefined> => {\n+  templatize = async ({\n+    id,\n+    collectionId,\n+    publish,\n+  }: {\n+    id: string;\n+    collectionId: string | null;\n+    publish: boolean;\n+  }): Promise<Document | null | undefined> => {\n     const doc: Document | null | undefined = this.data.get(id);\n     invariant(doc, \"Document should exist\");\n \n@@ -467,6 +475,8 @@ export default class DocumentsStore extends Store<Document> {\n \n     const res = await client.post(\"/documents.templatize\", {\n       id,\n+      collectionId,\n+      publish,\n     });\n     invariant(res?.data, \"Document not available\");\n     this.addPolicies(res.policies);\n@@ -546,12 +556,17 @@ export default class DocumentsStore extends Store<Document> {\n   };\n \n   @action\n-  move = async (\n-    documentId: string,\n-    collectionId: string,\n-    parentDocumentId?: string | null,\n-    index?: number | null\n-  ) => {\n+  move = async ({\n+    documentId,\n+    collectionId,\n+    parentDocumentId,\n+    index,\n+  }: {\n+    documentId: string;\n+    collectionId?: string | null;\n+    parentDocumentId?: string | null;\n+    index?: number | null;\n+  }) => {\n     this.movingDocumentId = documentId;\n \n     try {\n\ndiff --git a/app/utils/routeHelpers.ts b/app/utils/routeHelpers.ts\nindex 7b66080de95c..bca401324248 100644\n--- a/app/utils/routeHelpers.ts\n+++ b/app/utils/routeHelpers.ts\n@@ -81,8 +81,10 @@ export function updateDocumentPath(oldUrl: string, document: Document): string {\n   );\n }\n \n-export function newTemplatePath(collectionId: string) {\n-  return settingsPath(\"templates\") + `/new?collectionId=${collectionId}`;\n+export function newTemplatePath(collectionId?: string) {\n+  return collectionId\n+    ? settingsPath(\"templates\") + `/new?collectionId=${collectionId}`\n+    : `${settingsPath(\"templates\")}/new`;\n }\n \n export function newDocumentPath(\n\ndiff --git a/server/commands/documentCreator.ts b/server/commands/documentCreator.ts\nindex 7ee3b8e73c64..89f4a4b9179b 100644\n--- a/server/commands/documentCreator.ts\n+++ b/server/commands/documentCreator.ts\n@@ -148,14 +148,11 @@ export default async function documentCreator({\n   );\n \n   if (publish) {\n-    if (!collectionId) {\n+    if (!collectionId && !template) {\n       throw new Error(\"Collection ID is required to publish\");\n     }\n \n-    await document.publish(user, collectionId, {\n-      silent: true,\n-      transaction,\n-    });\n+    await document.publish(user, collectionId, { silent: true, transaction });\n     if (document.title) {\n       await Event.create(\n         {\n\ndiff --git a/server/commands/documentMover.ts b/server/commands/documentMover.ts\nindex dc9603abc78f..cb230a3af9d3 100644\n--- a/server/commands/documentMover.ts\n+++ b/server/commands/documentMover.ts\n@@ -1,6 +1,5 @@\n import invariant from \"invariant\";\n import { Transaction } from \"sequelize\";\n-import { ValidationError } from \"@server/errors\";\n import { traceFunction } from \"@server/logging/tracing\";\n import {\n   User,\n@@ -58,10 +57,6 @@ async function documentMover({\n   }\n \n   if (document.template) {\n-    if (!document.collectionId) {\n-      throw ValidationError(\"Templates must be in a collection\");\n-    }\n-\n     document.collectionId = collectionId;\n     document.parentDocumentId = null;\n     document.lastModifiedById = user.id;\n\ndiff --git a/server/commands/documentUpdater.ts b/server/commands/documentUpdater.ts\nindex 7db50cb3a6c0..3d626296355e 100644\n--- a/server/commands/documentUpdater.ts\n+++ b/server/commands/documentUpdater.ts\n@@ -106,7 +106,7 @@ export default async function documentUpdater({\n     ip,\n   };\n \n-  if (publish && cId) {\n+  if (publish && (document.template || cId)) {\n     if (!document.collectionId) {\n       document.collectionId = cId;\n     }\n\ndiff --git a/server/models/Document.ts b/server/models/Document.ts\nindex e49e287e0601..2537053d2f89 100644\n--- a/server/models/Document.ts\n+++ b/server/models/Document.ts\n@@ -722,6 +722,13 @@ class Document extends ParanoidModel<\n     return !!(this.importId && this.sourceMetadata?.trial);\n   }\n \n+  /**\n+   * Returns whether this document is a template created at the workspace level.\n+   */\n+  get isWorkspaceTemplate() {\n+    return this.template && !this.collectionId;\n+  }\n+\n   /**\n    * Revert the state of the document to match the passed revision.\n    *\n@@ -817,7 +824,7 @@ class Document extends ParanoidModel<\n \n   publish = async (\n     user: User,\n-    collectionId: string,\n+    collectionId: string | null | undefined,\n     options: SaveOptions\n   ): Promise<this> => {\n     const { transaction } = options;\n@@ -832,7 +839,7 @@ class Document extends ParanoidModel<\n       this.collectionId = collectionId;\n     }\n \n-    if (!this.template) {\n+    if (!this.template && this.collectionId) {\n       const collection = await Collection.findByPk(this.collectionId, {\n         transaction,\n         lock: Transaction.LOCK.UPDATE,\n\ndiff --git a/server/policies/document.ts b/server/policies/document.ts\nindex d634b10b086e..d8197ee2ebe6 100644\n--- a/server/policies/document.ts\n+++ b/server/policies/document.ts\n@@ -29,6 +29,10 @@ allow(User, \"read\", Document, (actor, document) =>\n         DocumentPermission.Admin,\n       ]),\n       and(!!document?.isDraft, actor.id === document?.createdById),\n+      and(\n+        !!document?.isWorkspaceTemplate,\n+        can(actor, \"readTemplate\", actor.team)\n+      ),\n       can(actor, \"readDocument\", document?.collection)\n     )\n   )\n@@ -98,7 +102,14 @@ allow(User, \"update\", Document, (actor, document) =>\n       ]),\n       or(\n         can(actor, \"updateDocument\", document?.collection),\n-        and(!!document?.isDraft && actor.id === document?.createdById)\n+        and(!!document?.isDraft && actor.id === document?.createdById),\n+        and(\n+          !!document?.isWorkspaceTemplate,\n+          or(\n+            actor.id === document?.createdById,\n+            can(actor, \"updateTemplate\", actor.team)\n+          )\n+        )\n       )\n     )\n   )\n@@ -118,7 +129,14 @@ allow(User, [\"manageUsers\", \"duplicate\"], Document, (actor, document) =>\n     or(\n       includesMembership(document, [DocumentPermission.Admin]),\n       can(actor, \"updateDocument\", document?.collection),\n-      !!document?.isDraft && actor.id === document?.createdById\n+      !!document?.isDraft && actor.id === document?.createdById,\n+      and(\n+        !!document?.isWorkspaceTemplate,\n+        or(\n+          actor.id === document?.createdById,\n+          can(actor, \"updateTemplate\", actor.team)\n+        )\n+      )\n     )\n   )\n );\n@@ -128,7 +146,14 @@ allow(User, \"move\", Document, (actor, document) =>\n     can(actor, \"update\", document),\n     or(\n       can(actor, \"updateDocument\", document?.collection),\n-      and(!!document?.isDraft && actor.id === document?.createdById)\n+      and(!!document?.isDraft && actor.id === document?.createdById),\n+      and(\n+        !!document?.isWorkspaceTemplate,\n+        or(\n+          actor.id === document?.createdById,\n+          can(actor, \"updateTemplate\", actor.team)\n+        )\n+      )\n     )\n   )\n );\n@@ -166,7 +191,7 @@ allow(User, \"delete\", Document, (actor, document) =>\n     or(\n       can(actor, \"unarchive\", document),\n       can(actor, \"update\", document),\n-      !document?.collection\n+      and(!document?.isWorkspaceTemplate, !document?.collection)\n     )\n   )\n );\n@@ -183,6 +208,10 @@ allow(User, [\"restore\", \"permanentDelete\"], Document, (actor, document) =>\n       ]),\n       can(actor, \"updateDocument\", document?.collection),\n       and(!!document?.isDraft && actor.id === document?.createdById),\n+      and(\n+        !!document?.isWorkspaceTemplate,\n+        can(actor, \"updateTemplate\", actor.team)\n+      ),\n       !document?.collection\n     )\n   )\n@@ -236,6 +265,14 @@ allow(User, \"unpublish\", Document, (user, document) => {\n   ) {\n     return false;\n   }\n+\n+  if (\n+    document.isWorkspaceTemplate &&\n+    (user.id === document.createdById || can(user, \"updateTemplate\", user.team))\n+  ) {\n+    return true;\n+  }\n+\n   invariant(\n     document.collection,\n     \"collection is missing, did you forget to include in the query scope?\"\n\ndiff --git a/server/policies/team.ts b/server/policies/team.ts\nindex fb9593d601c9..79698bab5188 100644\n--- a/server/policies/team.ts\n+++ b/server/policies/team.ts\n@@ -1,6 +1,13 @@\n import { Team, User } from \"@server/models\";\n import { allow } from \"./cancan\";\n-import { and, isCloudHosted, isTeamAdmin, isTeamModel, or } from \"./utils\";\n+import {\n+  and,\n+  isCloudHosted,\n+  isTeamAdmin,\n+  isTeamModel,\n+  isTeamMutable,\n+  or,\n+} from \"./utils\";\n \n allow(User, \"read\", Team, isTeamModel);\n \n@@ -32,3 +39,22 @@ allow(User, [\"delete\", \"audit\"], Team, (actor, team) =>\n     isTeamAdmin(actor, team)\n   )\n );\n+\n+allow(User, [\"createTemplate\", \"readTemplate\"], Team, (actor, team) =>\n+  and(\n+    //\n+    !actor.isGuest,\n+    !actor.isViewer,\n+    isTeamModel(actor, team),\n+    isTeamMutable(actor)\n+  )\n+);\n+\n+allow(User, \"updateTemplate\", Team, (actor, team) =>\n+  and(\n+    //\n+    actor.isAdmin,\n+    isTeamModel(actor, team),\n+    isTeamMutable(actor)\n+  )\n+);\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 115837884c00..ea36018eeb22 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -48,7 +48,7 @@ import AttachmentHelper from \"@server/models/helpers/AttachmentHelper\";\n import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n import { ProsemirrorHelper } from \"@server/models/helpers/ProsemirrorHelper\";\n import SearchHelper from \"@server/models/helpers/SearchHelper\";\n-import { authorize, cannot } from \"@server/policies\";\n+import { authorize, can, cannot } from \"@server/policies\";\n import {\n   presentCollection,\n   presentDocument,\n@@ -129,7 +129,15 @@ router.post(\n       } // otherwise, filter by all collections the user has access to\n     } else {\n       const collectionIds = await user.collectionIds();\n-      where = { ...where, collectionId: collectionIds };\n+      where = {\n+        ...where,\n+        collectionId:\n+          template && can(user, \"readTemplate\", user.team)\n+            ? {\n+                [Op.or]: [{ [Op.in]: collectionIds }, { [Op.is]: null }],\n+              }\n+            : collectionIds,\n+      };\n     }\n \n     if (parentDocumentId) {\n@@ -915,7 +923,7 @@ router.post(\n   validate(T.DocumentsTemplatizeSchema),\n   transaction(),\n   async (ctx: APIContext<T.DocumentsTemplatizeReq>) => {\n-    const { id } = ctx.input.body;\n+    const { id, collectionId, publish } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n \n@@ -926,12 +934,21 @@ router.post(\n \n     authorize(user, \"update\", original);\n \n+    if (collectionId) {\n+      const collection = await Collection.scope({\n+        method: [\"withMembership\", user.id],\n+      }).findByPk(collectionId, { transaction });\n+      authorize(user, \"createDocument\", collection);\n+    } else {\n+      authorize(user, \"createTemplate\", user.team);\n+    }\n+\n     const document = await Document.create(\n       {\n         editorVersion: original.editorVersion,\n-        collectionId: original.collectionId,\n-        teamId: original.teamId,\n-        publishedAt: new Date(),\n+        collectionId,\n+        teamId: user.teamId,\n+        publishedAt: publish ? new Date() : null,\n         lastModifiedById: user.id,\n         createdById: user.id,\n         template: true,\n@@ -1007,7 +1024,7 @@ router.post(\n         authorize(user, \"publish\", document);\n       }\n \n-      if (!document.collectionId) {\n+      if (!document.collectionId && !document.isWorkspaceTemplate) {\n         assertPresent(\n           collectionId,\n           \"collectionId is required to publish a draft without collection\"\n@@ -1026,6 +1043,8 @@ router.post(\n           }\n         );\n         authorize(user, \"createChildDocument\", parentDocument, { collection });\n+      } else if (document.isWorkspaceTemplate) {\n+        authorize(user, \"createTemplate\", user.team);\n       } else {\n         authorize(user, \"createDocument\", collection);\n       }\n@@ -1076,6 +1095,8 @@ router.post(\n \n     if (collection) {\n       authorize(user, \"updateDocument\", collection);\n+    } else if (document.isWorkspaceTemplate) {\n+      authorize(user, \"createTemplate\", user.team);\n     }\n \n     if (parentDocumentId) {\n@@ -1128,10 +1149,16 @@ router.post(\n     });\n     authorize(user, \"move\", document);\n \n-    const collection = await Collection.scope({\n-      method: [\"withMembership\", user.id],\n-    }).findByPk(collectionId, { transaction });\n-    authorize(user, \"updateDocument\", collection);\n+    if (collectionId) {\n+      const collection = await Collection.scope({\n+        method: [\"withMembership\", user.id],\n+      }).findByPk(collectionId, { transaction });\n+      authorize(user, \"updateDocument\", collection);\n+    } else if (document.template) {\n+      authorize(user, \"updateTemplate\", user.team);\n+    } else {\n+      throw InvalidRequestError(\"collectionId is required to move a document\");\n+    }\n \n     if (parentDocumentId) {\n       const parent = await Document.findByPk(parentDocumentId, {\n@@ -1148,7 +1175,7 @@ router.post(\n     const { documents, collections, collectionChanged } = await documentMover({\n       user,\n       document,\n-      collectionId,\n+      collectionId: collectionId ?? null,\n       parentDocumentId,\n       index,\n       ip: ctx.request.ip,\n@@ -1427,6 +1454,8 @@ router.post(\n         transaction,\n       });\n       authorize(user, \"createDocument\", collection);\n+    } else if (!!template && !collectionId) {\n+      authorize(user, \"createTemplate\", user.team);\n     }\n \n     let templateDocument: Document | null | undefined;\n\ndiff --git a/server/routes/api/documents/schema.ts b/server/routes/api/documents/schema.ts\nindex 0524e3d1525f..9118258d85f3 100644\n--- a/server/routes/api/documents/schema.ts\n+++ b/server/routes/api/documents/schema.ts\n@@ -196,7 +196,12 @@ export const DocumentsDuplicateSchema = BaseSchema.extend({\n export type DocumentsDuplicateReq = z.infer<typeof DocumentsDuplicateSchema>;\n \n export const DocumentsTemplatizeSchema = BaseSchema.extend({\n-  body: BaseIdSchema,\n+  body: BaseIdSchema.extend({\n+    /** Id of the collection inside which the template should be created */\n+    collectionId: z.string().nullish(),\n+    /** Whether the new template should be published */\n+    publish: z.boolean(),\n+  }),\n });\n \n export type DocumentsTemplatizeReq = z.infer<typeof DocumentsTemplatizeSchema>;\n@@ -259,7 +264,7 @@ export type DocumentsUpdateReq = z.infer<typeof DocumentsUpdateSchema>;\n export const DocumentsMoveSchema = BaseSchema.extend({\n   body: BaseIdSchema.extend({\n     /** Id of collection to which the doc is supposed to be moved */\n-    collectionId: z.string().uuid(),\n+    collectionId: z.string().uuid().nullish(),\n \n     /** Parent Id, in case if the doc is moved to a new parent */\n     parentDocumentId: z.string().uuid().nullish(),\n@@ -364,21 +369,13 @@ export const DocumentsCreateSchema = BaseSchema.extend({\n     /** Whether this should be considered a template */\n     template: z.boolean().optional(),\n   }),\n-})\n-  .refine((req) => !(req.body.template && !req.body.collectionId), {\n-    message: \"collectionId is required to create a template document\",\n-  })\n-  .refine(\n-    (req) =>\n-      !(\n-        req.body.publish &&\n-        !req.body.parentDocumentId &&\n-        !req.body.collectionId\n-      ),\n-    {\n-      message: \"collectionId or parentDocumentId is required to publish\",\n-    }\n-  );\n+}).refine(\n+  (req) =>\n+    !(req.body.publish && !req.body.parentDocumentId && !req.body.collectionId),\n+  {\n+    message: \"collectionId or parentDocumentId is required to publish\",\n+  }\n+);\n \n export type DocumentsCreateReq = z.infer<typeof DocumentsCreateSchema>;\n \n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 9df0588a3644..142ac1cb51b7 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -68,7 +68,9 @@\n   \"Create template\": \"Create template\",\n   \"Open random document\": \"Open random document\",\n   \"Search documents for \\\"{{searchQuery}}\\\"\": \"Search documents for \\\"{{searchQuery}}\\\"\",\n+  \"Move to workspace\": \"Move to workspace\",\n   \"Move\": \"Move\",\n+  \"Move to collection\": \"Move to collection\",\n   \"Move {{ documentType }}\": \"Move {{ documentType }}\",\n   \"Archive\": \"Archive\",\n   \"Document archived\": \"Document archived\",\n@@ -200,8 +202,6 @@\n   \"{{ completed }} task done\": \"{{ completed }} task done\",\n   \"{{ completed }} task done_plural\": \"{{ completed }} tasks done\",\n   \"{{ completed }} of {{ total }} tasks\": \"{{ completed }} of {{ total }} tasks\",\n-  \"Template created, go ahead and customize it\": \"Template created, go ahead and customize it\",\n-  \"Creating a template from <em>{{titleWithDefault}}</em> is a non-destructive action – we'll make a copy of the document and turn it into a template that can be used as a starting point for new documents.\": \"Creating a template from <em>{{titleWithDefault}}</em> is a non-destructive action – we'll make a copy of the document and turn it into a template that can be used as a starting point for new documents.\",\n   \"Currently editing\": \"Currently editing\",\n   \"Currently viewing\": \"Currently viewing\",\n   \"Viewed {{ timeAgo }}\": \"Viewed {{ timeAgo }}\",\n@@ -350,6 +350,10 @@\n   \"No results\": \"No results\",\n   \"Previous page\": \"Previous page\",\n   \"Next page\": \"Next page\",\n+  \"Template created, go ahead and customize it\": \"Template created, go ahead and customize it\",\n+  \"Creating a template from <em>{{titleWithDefault}}</em> is a non-destructive action – we'll make a copy of the document and turn it into a template that can be used as a starting point for new documents.\": \"Creating a template from <em>{{titleWithDefault}}</em> is a non-destructive action – we'll make a copy of the document and turn it into a template that can be used as a starting point for new documents.\",\n+  \"Enable other members to use the template immediately\": \"Enable other members to use the template immediately\",\n+  \"Location\": \"Location\",\n   \"Admins can manage the workspace and access billing.\": \"Admins can manage the workspace and access billing.\",\n   \"Editors can create, edit, and comment on documents.\": \"Editors can create, edit, and comment on documents.\",\n   \"Viewers can only view and comment on documents.\": \"Viewers can only view and comment on documents.\",\n@@ -472,7 +476,7 @@\n   \"Alphabetical sort\": \"Alphabetical sort\",\n   \"Manual sort\": \"Manual sort\",\n   \"Comment options\": \"Comment options\",\n-  \"Document restored\": \"Document restored\",\n+  \"{{ documentName }} restored\": \"{{ documentName }} restored\",\n   \"Document options\": \"Document options\",\n   \"Restore\": \"Restore\",\n   \"Choose a collection\": \"Choose a collection\",\n@@ -484,6 +488,7 @@\n   \"Member options\": \"Member options\",\n   \"New document in <em>{{ collectionName }}</em>\": \"New document in <em>{{ collectionName }}</em>\",\n   \"New child document\": \"New child document\",\n+  \"Save in workspace\": \"Save in workspace\",\n   \"Notification settings\": \"Notification settings\",\n   \"Revision options\": \"Revision options\",\n   \"Share link revoked\": \"Share link revoked\",\n@@ -558,6 +563,7 @@\n   \"No resolved comments\": \"No resolved comments\",\n   \"No comments yet\": \"No comments yet\",\n   \"Error updating comment\": \"Error updating comment\",\n+  \"Document restored\": \"Document restored\",\n   \"Images are still uploading.\\nAre you sure you want to discard them?\": \"Images are still uploading.\\nAre you sure you want to discard them?\",\n   \"{{ count }} comment\": \"{{ count }} comment\",\n   \"{{ count }} comment_plural\": \"{{ count }} comments\",\n",
    "test_patch": "diff --git a/server/policies/index.test.ts b/server/policies/index.test.ts\nindex 0489244cc154..ed9bbcaf7018 100644\n--- a/server/policies/index.test.ts\n+++ b/server/policies/index.test.ts\n@@ -14,6 +14,6 @@ it(\"should serialize domain policies on Team\", async () => {\n     teamId: team.id,\n   });\n   const response = serialize(user, team);\n-  expect(response.createDocument).toEqual(true);\n+  expect(response.createTemplate).toEqual(true);\n   expect(response.inviteUser).toEqual(true);\n });\n\ndiff --git a/server/policies/team.test.ts b/server/policies/team.test.ts\nindex 1e2cb29c0b8b..2aef1f07c89a 100644\n--- a/server/policies/team.test.ts\n+++ b/server/policies/team.test.ts\n@@ -1,8 +1,9 @@\n+import { UserRole } from \"@shared/types\";\n import { buildUser, buildTeam, buildAdmin } from \"@server/test/factories\";\n import { setSelfHosted } from \"@server/test/support\";\n import { serialize } from \"./index\";\n \n-describe.skip(\"policies/team\", () => {\n+describe(\"policies/team\", () => {\n   it(\"should allow reading only\", async () => {\n     setSelfHosted();\n \n@@ -15,7 +16,7 @@ describe.skip(\"policies/team\", () => {\n     expect(abilities.createTeam).toEqual(false);\n     expect(abilities.createAttachment).toEqual(true);\n     expect(abilities.createCollection).toEqual(true);\n-    expect(abilities.createDocument).toEqual(true);\n+    expect(abilities.createTemplate).toEqual(true);\n     expect(abilities.createGroup).toEqual(false);\n     expect(abilities.createIntegration).toEqual(false);\n   });\n@@ -32,7 +33,7 @@ describe.skip(\"policies/team\", () => {\n     expect(abilities.createTeam).toEqual(false);\n     expect(abilities.createAttachment).toEqual(true);\n     expect(abilities.createCollection).toEqual(true);\n-    expect(abilities.createDocument).toEqual(true);\n+    expect(abilities.createTemplate).toEqual(true);\n     expect(abilities.createGroup).toEqual(true);\n     expect(abilities.createIntegration).toEqual(true);\n   });\n@@ -47,8 +48,71 @@ describe.skip(\"policies/team\", () => {\n     expect(abilities.createTeam).toEqual(true);\n     expect(abilities.createAttachment).toEqual(true);\n     expect(abilities.createCollection).toEqual(true);\n-    expect(abilities.createDocument).toEqual(true);\n+    expect(abilities.createTemplate).toEqual(true);\n     expect(abilities.createGroup).toEqual(true);\n     expect(abilities.createIntegration).toEqual(true);\n   });\n+\n+  describe(\"read template\", () => {\n+    const permissions = new Map<UserRole, boolean>([\n+      [UserRole.Admin, true],\n+      [UserRole.Member, true],\n+      [UserRole.Viewer, false],\n+      [UserRole.Guest, false],\n+    ]);\n+    for (const [role, permission] of permissions.entries()) {\n+      it(`check permission for ${role}`, async () => {\n+        const team = await buildTeam();\n+        const user = await buildUser({\n+          teamId: team.id,\n+          role,\n+        });\n+\n+        const abilities = serialize(user, team);\n+        expect(abilities.readTemplate).toEqual(permission);\n+      });\n+    }\n+  });\n+\n+  describe(\"create template\", () => {\n+    const permissions = new Map<UserRole, boolean>([\n+      [UserRole.Admin, true],\n+      [UserRole.Member, true],\n+      [UserRole.Viewer, false],\n+      [UserRole.Guest, false],\n+    ]);\n+    for (const [role, permission] of permissions.entries()) {\n+      it(`check permission for ${role}`, async () => {\n+        const team = await buildTeam();\n+        const user = await buildUser({\n+          teamId: team.id,\n+          role,\n+        });\n+\n+        const abilities = serialize(user, team);\n+        expect(abilities.createTemplate).toEqual(permission);\n+      });\n+    }\n+  });\n+\n+  describe(\"update template\", () => {\n+    const permissions = new Map<UserRole, boolean>([\n+      [UserRole.Admin, true],\n+      [UserRole.Member, false],\n+      [UserRole.Viewer, false],\n+      [UserRole.Guest, false],\n+    ]);\n+    for (const [role, permission] of permissions.entries()) {\n+      it(`check permission for ${role}`, async () => {\n+        const team = await buildTeam();\n+        const user = await buildUser({\n+          teamId: team.id,\n+          role,\n+        });\n+\n+        const abilities = serialize(user, team);\n+        expect(abilities.updateTemplate).toEqual(permission);\n+      });\n+    }\n+  });\n });\n\ndiff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex 5955df194d3c..a48495cd2833 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -1929,6 +1929,140 @@ describe(\"#documents.templatize\", () => {\n     expect(res.status).toBe(400);\n     expect(body.message).toBe(\"id: Required\");\n   });\n+  it(\"should require publish\", async () => {\n+    const user = await buildUser();\n+    const res = await server.post(\"/api/documents.templatize\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: \"random-id\",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toBe(400);\n+    expect(body.message).toBe(\"publish: Required\");\n+  });\n+  it(\"should create a published non-workspace template\", async () => {\n+    const user = await buildUser();\n+    const collection = await buildCollection({\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      collectionId: collection.id,\n+    });\n+    const res = await server.post(\"/api/documents.templatize\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+        collectionId: collection.id,\n+        publish: true,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toBe(200);\n+    expect(body.data.publishedAt).toBeTruthy();\n+    expect(body.data.collectionId).toEqual(collection.id);\n+  });\n+  it(\"should create a published workspace template\", async () => {\n+    const user = await buildUser();\n+    const collection = await buildCollection({\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      collectionId: collection.id,\n+    });\n+    const res = await server.post(\"/api/documents.templatize\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+        publish: true,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toBe(200);\n+    expect(body.data.publishedAt).toBeTruthy();\n+    expect(body.data.collectionId).toBeNull();\n+  });\n+  it(\"should create a draft non-workspace template\", async () => {\n+    const user = await buildUser();\n+    const collection = await buildCollection({\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      collectionId: collection.id,\n+    });\n+    const res = await server.post(\"/api/documents.templatize\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+        collectionId: collection.id,\n+        publish: false,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toBe(200);\n+    expect(body.data.publishedAt).toBeNull();\n+    expect(body.data.collectionId).toEqual(collection.id);\n+  });\n+  it(\"should create a draft workspace template\", async () => {\n+    const user = await buildUser();\n+    const collection = await buildCollection({\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      collectionId: collection.id,\n+    });\n+    const res = await server.post(\"/api/documents.templatize\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+        publish: false,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toBe(200);\n+    expect(body.data.publishedAt).toBeNull();\n+    expect(body.data.collectionId).toBeNull();\n+  });\n+  it(\"should create a template in a different collection\", async () => {\n+    const user = await buildUser();\n+    const collection = await buildCollection({\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+    const anotherCollection = await buildCollection({\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      collectionId: collection.id,\n+    });\n+    const res = await server.post(\"/api/documents.templatize\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+        collectionId: anotherCollection.id,\n+        publish: true,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toBe(200);\n+    expect(body.data.publishedAt).toBeTruthy();\n+    expect(body.data.collectionId).toEqual(anotherCollection.id);\n+  });\n });\n \n describe(\"#documents.archived\", () => {\n@@ -2285,23 +2419,6 @@ describe(\"#documents.move\", () => {\n     expect(body.message).toEqual(\"id: Required\");\n   });\n \n-  it(\"should require collectionId\", async () => {\n-    const user = await buildUser();\n-    const document = await buildDocument({\n-      userId: user.id,\n-      teamId: user.teamId,\n-    });\n-    const res = await server.post(\"/api/documents.move\", {\n-      body: {\n-        token: user.getJwtToken(),\n-        id: document.id,\n-      },\n-    });\n-    const body = await res.json();\n-    expect(res.status).toEqual(400);\n-    expect(body.message).toEqual(\"collectionId: Required\");\n-  });\n-\n   it(\"should fail for invalid index\", async () => {\n     const user = await buildUser();\n     const collection = await buildCollection({\n@@ -2389,6 +2506,56 @@ describe(\"#documents.move\", () => {\n     expect(res.status).toEqual(403);\n   });\n \n+  it(\"should move a template to workspace\", async () => {\n+    const user = await buildAdmin();\n+    const collection = await buildCollection({\n+      teamId: user.teamId,\n+    });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      collectionId: collection.id,\n+      template: true,\n+    });\n+\n+    const res = await server.post(\"/api/documents.move\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.documents[0].collectionId).toBeNull();\n+    expect(body.policies[0].abilities.move).toEqual(true);\n+  });\n+\n+  it(\"should move a workspace template to collection\", async () => {\n+    const user = await buildUser();\n+    const collection = await buildCollection({\n+      teamId: user.teamId,\n+    });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      template: true,\n+    });\n+\n+    const res = await server.post(\"/api/documents.move\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+        collectionId: collection.id,\n+      },\n+    });\n+\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.documents[0].collectionId).toEqual(collection.id);\n+    expect(body.policies[0].abilities.move).toEqual(true);\n+  });\n+\n   it(\"should require authentication\", async () => {\n     const res = await server.post(\"/api/documents.move\");\n     expect(res.status).toEqual(401);\n@@ -2858,7 +3025,7 @@ describe(\"#documents.create\", () => {\n     expect(body.data.collectionId).toBeNull();\n   });\n \n-  it(\"should not allow creating a template with a collection\", async () => {\n+  it(\"should allow creating a draft template without a collection\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n     const res = await server.post(\"/api/documents.create\", {\n@@ -2871,10 +3038,10 @@ describe(\"#documents.create\", () => {\n     });\n     const body = await res.json();\n \n-    expect(res.status).toEqual(400);\n-    expect(body.message).toBe(\n-      \"collectionId is required to create a template document\"\n-    );\n+    expect(res.status).toEqual(200);\n+    expect(body.data.template).toBe(true);\n+    expect(body.data.publishedAt).toBeNull();\n+    expect(body.data.collectionId).toBeNull();\n   });\n \n   it(\"should not allow publishing without specifying the collection\", async () => {\n@@ -3094,6 +3261,39 @@ describe(\"#documents.update\", () => {\n     expect(body.data.text).toBe(\"Updated text\");\n   });\n \n+  it(\"should successfully publish a draft template without collection\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const collection = await buildCollection({\n+      userId: user.id,\n+      teamId: team.id,\n+    });\n+    const document = await buildDraftDocument({\n+      title: \"title\",\n+      text: \"text\",\n+      teamId: team.id,\n+      userId: user.id,\n+      collectionId: null,\n+      template: true,\n+    });\n+    const res = await server.post(\"/api/documents.update\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+        title: \"Updated title\",\n+        text: \"Updated text\",\n+        collectionId: collection.id,\n+        publish: true,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.collectionId).toBe(collection.id);\n+    expect(body.data.title).toBe(\"Updated title\");\n+    expect(body.data.text).toBe(\"Updated text\");\n+    expect(body.data.publishedAt).toBeTruthy();\n+  });\n+\n   it(\"should not allow publishing by another collection's user\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7144",
    "pr_id": 7144,
    "issue_id": 7121,
    "repo": "outline/outline",
    "problem_statement": "Remove `emoji` column\nRemove emoji column on documents and revisions.\r\n\r\nFollow onto #7038",
    "issue_word_count": 10,
    "test_files_count": 2,
    "non_test_files_count": 15,
    "pr_changed_files": [
      "app/components/Icons/CollectionIcon.tsx",
      "server/commands/documentCreator.ts",
      "server/commands/documentDuplicator.test.ts",
      "server/commands/documentDuplicator.ts",
      "server/commands/documentUpdater.ts",
      "server/migrations/20240625051656-remove-emoji-column.js",
      "server/models/Document.ts",
      "server/models/Revision.ts",
      "server/models/helpers/DocumentHelper.tsx",
      "server/presenters/document.ts",
      "server/presenters/revision.ts",
      "server/queues/tasks/ImportJSONTask.ts",
      "server/queues/tasks/ImportMarkdownZipTask.ts",
      "server/queues/tasks/ImportNotionTask.ts",
      "server/routes/api/documents/documents.test.ts",
      "server/routes/api/documents/documents.ts",
      "server/routes/api/documents/schema.ts"
    ],
    "pr_changed_test_files": [
      "server/commands/documentDuplicator.test.ts",
      "server/routes/api/documents/documents.test.ts"
    ],
    "base_commit": "340109d9a36f298fee16b3cf5c65a7ddcd1b28e9",
    "head_commit": "d47eba757e95e968cb89cdd9332d930061e4c2c4",
    "repo_url": "https://github.com/outline/outline/pull/7144",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7144",
    "dockerfile": "",
    "pr_merged_at": "2024-08-05T08:08:20.000Z",
    "patch": "diff --git a/app/components/Icons/CollectionIcon.tsx b/app/components/Icons/CollectionIcon.tsx\nindex e92a22800040..4b00c2c380c3 100644\n--- a/app/components/Icons/CollectionIcon.tsx\n+++ b/app/components/Icons/CollectionIcon.tsx\n@@ -57,6 +57,7 @@ function ResolvedCollectionIcon({\n       size={size}\n       initial={collection.initial}\n       className={className}\n+      forceColor={inputColor ? true : false}\n     />\n   );\n }\n\ndiff --git a/server/commands/documentCreator.ts b/server/commands/documentCreator.ts\nindex 54ecff1ccf06..c25bdcb06c3e 100644\n--- a/server/commands/documentCreator.ts\n+++ b/server/commands/documentCreator.ts\n@@ -99,8 +99,7 @@ export default async function documentCreator({\n       importId,\n       sourceMetadata,\n       fullWidth: templateDocument ? templateDocument.fullWidth : fullWidth,\n-      emoji: templateDocument ? templateDocument.emoji : icon,\n-      icon: templateDocument ? templateDocument.emoji : icon,\n+      icon: templateDocument ? templateDocument.icon : icon,\n       color: templateDocument ? templateDocument.color : color,\n       title: TextHelper.replaceTemplateVariables(\n         templateDocument ? templateDocument.title : title,\n\ndiff --git a/server/commands/documentDuplicator.ts b/server/commands/documentDuplicator.ts\nindex 8e0b32928253..3996cf7ff0bc 100644\n--- a/server/commands/documentDuplicator.ts\n+++ b/server/commands/documentDuplicator.ts\n@@ -45,7 +45,7 @@ export default async function documentDuplicator({\n \n   const duplicated = await documentCreator({\n     parentDocumentId: parentDocumentId ?? document.parentDocumentId,\n-    icon: document.icon ?? document.emoji,\n+    icon: document.icon,\n     color: document.color,\n     template: document.template,\n     title: title ?? document.title,\n@@ -79,7 +79,7 @@ export default async function documentDuplicator({\n     for (const childDocument of childDocuments) {\n       const duplicatedChildDocument = await documentCreator({\n         parentDocumentId: duplicated.id,\n-        icon: childDocument.icon ?? childDocument.emoji,\n+        icon: childDocument.icon,\n         color: childDocument.color,\n         title: childDocument.title,\n         text: childDocument.text,\n\ndiff --git a/server/commands/documentUpdater.ts b/server/commands/documentUpdater.ts\nindex 3d626296355e..a29179a940f8 100644\n--- a/server/commands/documentUpdater.ts\n+++ b/server/commands/documentUpdater.ts\n@@ -69,7 +69,6 @@ export default async function documentUpdater({\n     document.title = title.trim();\n   }\n   if (icon !== undefined) {\n-    document.emoji = icon;\n     document.icon = icon;\n   }\n   if (color !== undefined) {\n\ndiff --git a/server/migrations/20240625051656-remove-emoji-column.js b/server/migrations/20240625051656-remove-emoji-column.js\nnew file mode 100644\nindex 000000000000..9144e4109810\n--- /dev/null\n+++ b/server/migrations/20240625051656-remove-emoji-column.js\n@@ -0,0 +1,38 @@\n+\"use strict\";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.removeColumn(\"documents\", \"emoji\", { transaction });\n+      await queryInterface.removeColumn(\"revisions\", \"emoji\", { transaction });\n+    });\n+  },\n+\n+  async down(queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.addColumn(\n+        \"documents\",\n+        \"emoji\",\n+        {\n+          type: Sequelize.STRING,\n+          allowNull: true,\n+        },\n+        {\n+          transaction,\n+        }\n+      );\n+      await queryInterface.addColumn(\n+        \"revisions\",\n+        \"emoji\",\n+        {\n+          type: Sequelize.STRING,\n+          allowNull: true,\n+        },\n+        {\n+          transaction,\n+        }\n+      );\n+    });\n+  },\n+};\n\ndiff --git a/server/models/Document.ts b/server/models/Document.ts\nindex 2537053d2f89..18c7a4f806e9 100644\n--- a/server/models/Document.ts\n+++ b/server/models/Document.ts\n@@ -255,17 +255,6 @@ class Document extends ParanoidModel<\n   @Column\n   editorVersion: string;\n \n-  /**\n-   * An emoji to use as the document icon,\n-   * This is used as fallback (for backward compat) when icon is not set.\n-   */\n-  @Length({\n-    max: 50,\n-    msg: `Emoji must be 50 characters or less`,\n-  })\n-  @Column\n-  emoji: string | null;\n-\n   /** An icon to use as the document icon. */\n   @Length({\n     max: 50,\n@@ -742,7 +731,6 @@ class Document extends ParanoidModel<\n     this.content = revision.content;\n     this.text = revision.text;\n     this.title = revision.title;\n-    this.emoji = revision.emoji;\n     this.icon = revision.icon;\n     this.color = revision.color;\n   };\n@@ -1085,7 +1073,6 @@ class Document extends ParanoidModel<\n       id: this.id,\n       title: this.title,\n       url: this.url,\n-      emoji: isNil(this.emoji) ? undefined : this.emoji,\n       icon: isNil(this.icon) ? undefined : this.icon,\n       color: isNil(this.color) ? undefined : this.color,\n       children,\n\ndiff --git a/server/models/Revision.ts b/server/models/Revision.ts\nindex b2e39b00e1da..33bb6c950b2d 100644\n--- a/server/models/Revision.ts\n+++ b/server/models/Revision.ts\n@@ -71,17 +71,6 @@ class Revision extends IdModel<\n   @Column(DataType.JSONB)\n   content: ProsemirrorData;\n \n-  /**\n-   * An emoji to use as the document icon,\n-   * This is used as fallback (for backward compat) when icon is not set.\n-   */\n-  @Length({\n-    max: 50,\n-    msg: `Emoji must be 50 characters or less`,\n-  })\n-  @Column\n-  emoji: string | null;\n-\n   /** An icon to use as the document icon. */\n   @Length({\n     max: 50,\n@@ -138,7 +127,6 @@ class Revision extends IdModel<\n     return this.build({\n       title: document.title,\n       text: document.text,\n-      emoji: document.emoji,\n       icon: document.icon,\n       color: document.color,\n       content: document.content,\n\ndiff --git a/server/models/helpers/DocumentHelper.tsx b/server/models/helpers/DocumentHelper.tsx\nindex 171eea5b5fb8..571c4e4027c7 100644\n--- a/server/models/helpers/DocumentHelper.tsx\n+++ b/server/models/helpers/DocumentHelper.tsx\n@@ -153,10 +153,9 @@ export class DocumentHelper {\n       return text;\n     }\n \n-    const icon = document.icon ?? document.emoji;\n-    const iconType = determineIconType(icon);\n+    const iconType = determineIconType(document.icon);\n \n-    const title = `${iconType === IconType.Emoji ? icon + \" \" : \"\"}${\n+    const title = `${iconType === IconType.Emoji ? document.icon + \" \" : \"\"}${\n       document.title\n     }`;\n \n\ndiff --git a/server/presenters/document.ts b/server/presenters/document.ts\nindex 476560528dbb..83fab2b4b1fe 100644\n--- a/server/presenters/document.ts\n+++ b/server/presenters/document.ts\n@@ -48,7 +48,6 @@ async function presentDocument(\n           )\n         : undefined,\n     text: !asData || options?.includeText ? text : undefined,\n-    emoji: document.emoji,\n     icon: document.icon,\n     color: document.color,\n     tasks: document.tasks,\n\ndiff --git a/server/presenters/revision.ts b/server/presenters/revision.ts\nindex 953b4789857f..5bf6250245e9 100644\n--- a/server/presenters/revision.ts\n+++ b/server/presenters/revision.ts\n@@ -13,7 +13,7 @@ async function presentRevision(revision: Revision, diff?: string) {\n     documentId: revision.documentId,\n     title: strippedTitle,\n     data: await DocumentHelper.toJSON(revision),\n-    icon: revision.icon ?? revision.emoji ?? emoji,\n+    icon: revision.icon ?? emoji,\n     color: revision.color,\n     html: diff,\n     createdAt: revision.createdAt,\n\ndiff --git a/server/queues/tasks/ImportJSONTask.ts b/server/queues/tasks/ImportJSONTask.ts\nindex 64a6d0cb2663..ad204dadedd6 100644\n--- a/server/queues/tasks/ImportJSONTask.ts\n+++ b/server/queues/tasks/ImportJSONTask.ts\n@@ -79,7 +79,6 @@ export default class ImportJSONTask extends ImportTask {\n           // TODO: This is kind of temporary, we can import the document\n           // structure directly in the future.\n           text: serializer.serialize(Node.fromJSON(schema, node.data)),\n-          emoji: node.icon ?? node.emoji,\n           icon: node.icon ?? node.emoji,\n           color: node.color,\n           createdAt: node.createdAt ? new Date(node.createdAt) : undefined,\n\ndiff --git a/server/queues/tasks/ImportMarkdownZipTask.ts b/server/queues/tasks/ImportMarkdownZipTask.ts\nindex a7c31ee3d485..f994fccf6370 100644\n--- a/server/queues/tasks/ImportMarkdownZipTask.ts\n+++ b/server/queues/tasks/ImportMarkdownZipTask.ts\n@@ -122,7 +122,6 @@ export default class ImportMarkdownZipTask extends ImportTask {\n             output.documents.push({\n               id,\n               title,\n-              emoji: icon,\n               icon,\n               text,\n               collectionId,\n\ndiff --git a/server/queues/tasks/ImportNotionTask.ts b/server/queues/tasks/ImportNotionTask.ts\nindex ac315f8eafd3..4ccb6bc6b3ec 100644\n--- a/server/queues/tasks/ImportNotionTask.ts\n+++ b/server/queues/tasks/ImportNotionTask.ts\n@@ -130,7 +130,6 @@ export default class ImportNotionTask extends ImportTask {\n             output.documents.push({\n               id,\n               title,\n-              emoji: icon,\n               icon,\n               text,\n               collectionId,\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 44a6eb80d29e..6330340fd820 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -953,7 +953,6 @@ router.post(\n         lastModifiedById: user.id,\n         createdById: user.id,\n         template: true,\n-        emoji: original.emoji,\n         icon: original.icon,\n         color: original.color,\n         title: original.title,\n@@ -1055,7 +1054,7 @@ router.post(\n       document,\n       user,\n       ...input,\n-      icon: input.icon ?? input.emoji ?? null,\n+      icon: input.icon ?? null,\n       publish,\n       collectionId,\n       insightsEnabled,\n@@ -1404,7 +1403,6 @@ router.post(\n     const {\n       title,\n       text,\n-      emoji,\n       icon,\n       color,\n       publish,\n@@ -1477,7 +1475,7 @@ router.post(\n         ctx.request.ip,\n         transaction\n       ),\n-      icon: icon ?? emoji,\n+      icon,\n       color,\n       createdAt,\n       publish,\n\ndiff --git a/server/routes/api/documents/schema.ts b/server/routes/api/documents/schema.ts\nindex 9118258d85f3..e23d9f0a37ad 100644\n--- a/server/routes/api/documents/schema.ts\n+++ b/server/routes/api/documents/schema.ts\n@@ -214,9 +214,6 @@ export const DocumentsUpdateSchema = BaseSchema.extend({\n     /** Doc text to be updated */\n     text: z.string().optional(),\n \n-    /** Emoji displayed alongside doc title */\n-    emoji: z.string().regex(emojiRegex()).nullish(),\n-\n     /** Icon displayed alongside doc title */\n     icon: z\n       .union([\n@@ -326,9 +323,6 @@ export const DocumentsCreateSchema = BaseSchema.extend({\n     /** Document text */\n     text: z.string().default(\"\"),\n \n-    /** Emoji displayed alongside doc title */\n-    emoji: z.string().regex(emojiRegex()).nullish(),\n-\n     /** Icon displayed alongside doc title */\n     icon: z\n       .union([\n",
    "test_patch": "diff --git a/server/commands/documentDuplicator.test.ts b/server/commands/documentDuplicator.test.ts\nindex b841b5e5c340..f2fcf452e9d2 100644\n--- a/server/commands/documentDuplicator.test.ts\n+++ b/server/commands/documentDuplicator.test.ts\n@@ -25,7 +25,6 @@ describe(\"documentDuplicator\", () => {\n     expect(response).toHaveLength(1);\n     expect(response[0].title).toEqual(original.title);\n     expect(response[0].text).toEqual(original.text);\n-    expect(response[0].emoji).toEqual(original.emoji);\n     expect(response[0].icon).toEqual(original.icon);\n     expect(response[0].color).toEqual(original.color);\n     expect(response[0].publishedAt).toBeInstanceOf(Date);\n@@ -53,7 +52,6 @@ describe(\"documentDuplicator\", () => {\n     expect(response).toHaveLength(1);\n     expect(response[0].title).toEqual(\"New title\");\n     expect(response[0].text).toEqual(original.text);\n-    expect(response[0].emoji).toEqual(original.icon);\n     expect(response[0].icon).toEqual(original.icon);\n     expect(response[0].color).toEqual(original.color);\n     expect(response[0].publishedAt).toBeInstanceOf(Date);\n@@ -109,7 +107,6 @@ describe(\"documentDuplicator\", () => {\n     expect(response).toHaveLength(1);\n     expect(response[0].title).toEqual(original.title);\n     expect(response[0].text).toEqual(original.text);\n-    expect(response[0].emoji).toEqual(original.emoji);\n     expect(response[0].icon).toEqual(original.icon);\n     expect(response[0].color).toEqual(original.color);\n     expect(response[0].publishedAt).toBeNull();\n\ndiff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex a48495cd2833..11afe0f86304 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -2953,33 +2953,6 @@ describe(\"#documents.create\", () => {\n     expect(body.message).toEqual(\"parentDocumentId: Invalid uuid\");\n   });\n \n-  it(\"should create as a new document with emoji\", async () => {\n-    const team = await buildTeam();\n-    const user = await buildUser({ teamId: team.id });\n-    const collection = await buildCollection({\n-      userId: user.id,\n-      teamId: team.id,\n-    });\n-    const res = await server.post(\"/api/documents.create\", {\n-      body: {\n-        token: user.getJwtToken(),\n-        collectionId: collection.id,\n-        emoji: \"🚢\",\n-        title: \"new document\",\n-        text: \"hello\",\n-        publish: true,\n-      },\n-    });\n-    const body = await res.json();\n-    const newDocument = await Document.findByPk(body.data.id);\n-    expect(res.status).toEqual(200);\n-    expect(newDocument!.parentDocumentId).toBe(null);\n-    expect(newDocument!.collectionId).toBe(collection.id);\n-    expect(newDocument!.emoji).toBe(\"🚢\");\n-    expect(newDocument!.icon).toBe(\"🚢\");\n-    expect(body.policies[0].abilities.update).toEqual(true);\n-  });\n-\n   it(\"should create as a new document with icon\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n@@ -3002,7 +2975,6 @@ describe(\"#documents.create\", () => {\n     expect(res.status).toEqual(200);\n     expect(newDocument!.parentDocumentId).toBe(null);\n     expect(newDocument!.collectionId).toBe(collection.id);\n-    expect(newDocument!.emoji).toBe(\"🚢\");\n     expect(newDocument!.icon).toBe(\"🚢\");\n     expect(body.policies[0].abilities.update).toEqual(true);\n   });\n@@ -3342,26 +3314,6 @@ describe(\"#documents.update\", () => {\n     expect(body.message).toBe(\"icon: Invalid\");\n   });\n \n-  it(\"should successfully update the emoji\", async () => {\n-    const user = await buildUser();\n-    const document = await buildDocument({\n-      userId: user.id,\n-      teamId: user.teamId,\n-    });\n-    const res = await server.post(\"/api/documents.update\", {\n-      body: {\n-        token: user.getJwtToken(),\n-        id: document.id,\n-        emoji: \"🚢\",\n-      },\n-    });\n-    const body = await res.json();\n-    expect(res.status).toEqual(200);\n-    expect(body.data.emoji).toBe(\"🚢\");\n-    expect(body.data.icon).toBe(\"🚢\");\n-    expect(body.data.color).toBeNull;\n-  });\n-\n   it(\"should successfully update the icon\", async () => {\n     const user = await buildUser();\n     const document = await buildDocument({\n@@ -3401,7 +3353,6 @@ describe(\"#documents.update\", () => {\n     const body = await res.json();\n     expect(res.status).toEqual(200);\n     expect(body.data.icon).toBeNull();\n-    expect(body.data.emoji).toBeNull();\n     expect(body.data.color).toBeNull();\n   });\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7124",
    "pr_id": 7124,
    "issue_id": 7038,
    "repo": "outline/outline",
    "problem_statement": "feat: Unified icon picker\nCloses #6475 \r\n\r\n### What's implemented?\r\n- Unified `IconPicker` to support both Outline icons and emojis.\r\n- Allow icons and emojis to be used as collection and documents icons.\r\n\r\n### What's changed?\r\n- Custom `IconPicker` (with virtual rendering) that matches the Outline theme; supports tracking frequently used icons.\r\n- Removed dependency on `emoji-mart` picker component; we depend only on their emoji data now (useful for search).\r\n \r\n### Screen Recording\r\n\r\nhttps://github.com/outline/outline/assets/132386067/dc6d09ec-f10e-4c1a-b1f4-31a77c64e271\r\n\r\n\r\n\r\n <br>\r\nSorry, this turned out to be a bigger PR than what I anticipated.",
    "issue_word_count": 90,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "server/routes/api/documents/documents.test.ts",
      "server/routes/api/documents/documents.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/documents/documents.test.ts"
    ],
    "base_commit": "6fd3a0fa8a2ba34e40f5719c6fe12d35088bb58c",
    "head_commit": "bce5008d88fab89592da0004458e2fe96ca49219",
    "repo_url": "https://github.com/outline/outline/pull/7124",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7124",
    "dockerfile": "",
    "pr_merged_at": "2024-06-23T19:47:26.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7115",
    "pr_id": 7115,
    "issue_id": 5078,
    "repo": "outline/outline",
    "problem_statement": "Resolving comments\nAdd support for counting a comment as resolved, this should:\n\n- Hide it from the sidebar under resolved comments\n- Send a notification to those in the thread",
    "issue_word_count": 26,
    "test_files_count": 3,
    "non_test_files_count": 27,
    "pr_changed_files": [
      ".eslintrc",
      "app/actions/definitions/comments.tsx",
      "app/components/ContextMenu/Template.tsx",
      "app/editor/index.tsx",
      "app/editor/menus/formatting.tsx",
      "app/menus/CommentMenu.tsx",
      "app/models/Comment.ts",
      "app/scenes/Document/components/CommentForm.tsx",
      "app/scenes/Document/components/CommentThread.tsx",
      "app/scenes/Document/components/CommentThreadItem.tsx",
      "app/scenes/Document/components/Comments.tsx",
      "app/scenes/Document/components/DataLoader.tsx",
      "app/scenes/Document/components/DocumentMeta.tsx",
      "app/scenes/Document/components/SidebarLayout.tsx",
      "app/scenes/KeyboardShortcuts.tsx",
      "app/stores/CommentsStore.ts",
      "app/styles/animations.ts",
      "package.json",
      "server/middlewares/feature.ts",
      "server/models/Comment.ts",
      "server/onerror.ts",
      "server/policies/comment.ts",
      "server/presenters/comment.ts",
      "server/queues/processors/WebsocketsProcessor.ts",
      "server/routes/api/comments/__snapshots__/comments.test.ts.snap",
      "server/routes/api/comments/comments.test.ts",
      "server/routes/api/comments/comments.ts",
      "server/routes/api/comments/schema.ts",
      "server/test/factories.ts",
      "shared/editor/commands/addMark.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/comments/__snapshots__/comments.test.ts.snap",
      "server/routes/api/comments/comments.test.ts",
      "server/test/factories.ts"
    ],
    "base_commit": "53e3245b15d7fbed807988f4e9347e7c48022cfa",
    "head_commit": "169852b1b07bcf7258e2406c701262c413ae1bea",
    "repo_url": "https://github.com/outline/outline/pull/7115",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7115",
    "dockerfile": "",
    "pr_merged_at": "2024-07-02T10:55:16.000Z",
    "patch": "diff --git a/.eslintrc b/.eslintrc\nindex 65c2d868e32a..fcc8e7b8f7a9 100644\n--- a/.eslintrc\n+++ b/.eslintrc\n@@ -41,6 +41,7 @@\n     \"@typescript-eslint/no-shadow\": [\n       \"warn\",\n       {\n+        \"allow\": [\"transaction\"],\n         \"hoist\": \"all\",\n         \"ignoreTypeValueShadow\": true\n       }\n@@ -139,4 +140,4 @@\n       \"typescript\": {}\n     }\n   }\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/app/actions/definitions/comments.tsx b/app/actions/definitions/comments.tsx\nnew file mode 100644\nindex 000000000000..9a89393d2aa0\n--- /dev/null\n+++ b/app/actions/definitions/comments.tsx\n@@ -0,0 +1,86 @@\n+import { DoneIcon, TrashIcon } from \"outline-icons\";\n+import * as React from \"react\";\n+import { toast } from \"sonner\";\n+import stores from \"~/stores\";\n+import Comment from \"~/models/Comment\";\n+import CommentDeleteDialog from \"~/components/CommentDeleteDialog\";\n+import history from \"~/utils/history\";\n+import { createAction } from \"..\";\n+import { DocumentSection } from \"../sections\";\n+\n+export const deleteCommentFactory = ({\n+  comment,\n+  onDelete,\n+}: {\n+  comment: Comment;\n+  onDelete: () => void;\n+}) =>\n+  createAction({\n+    name: ({ t }) => `${t(\"Delete\")}…`,\n+    analyticsName: \"Delete comment\",\n+    section: DocumentSection,\n+    icon: <TrashIcon />,\n+    keywords: \"trash\",\n+    dangerous: true,\n+    visible: () => stores.policies.abilities(comment.id).delete,\n+    perform: ({ t, event }) => {\n+      event?.preventDefault();\n+      event?.stopPropagation();\n+\n+      stores.dialogs.openModal({\n+        title: t(\"Delete comment\"),\n+        content: <CommentDeleteDialog comment={comment} onSubmit={onDelete} />,\n+      });\n+    },\n+  });\n+\n+export const resolveCommentFactory = ({\n+  comment,\n+  onResolve,\n+}: {\n+  comment: Comment;\n+  onResolve: () => void;\n+}) =>\n+  createAction({\n+    name: ({ t }) => t(\"Mark as resolved\"),\n+    analyticsName: \"Resolve thread\",\n+    section: DocumentSection,\n+    icon: <DoneIcon outline />,\n+    visible: () => stores.policies.abilities(comment.id).resolve,\n+    perform: async ({ t }) => {\n+      await comment.resolve();\n+\n+      history.replace({\n+        ...history.location,\n+        state: null,\n+      });\n+\n+      onResolve();\n+      toast.success(t(\"Thread resolved\"));\n+    },\n+  });\n+\n+export const unresolveCommentFactory = ({\n+  comment,\n+  onUnresolve,\n+}: {\n+  comment: Comment;\n+  onUnresolve: () => void;\n+}) =>\n+  createAction({\n+    name: ({ t }) => t(\"Mark as unresolved\"),\n+    analyticsName: \"Unresolve thread\",\n+    section: DocumentSection,\n+    icon: <DoneIcon outline />,\n+    visible: () => stores.policies.abilities(comment.id).unresolve,\n+    perform: async () => {\n+      await comment.unresolve();\n+\n+      history.replace({\n+        ...history.location,\n+        state: null,\n+      });\n+\n+      onUnresolve();\n+    },\n+  });\n\ndiff --git a/app/components/ContextMenu/Template.tsx b/app/components/ContextMenu/Template.tsx\nindex fd874ffaa3af..cb4bf7c191ce 100644\n--- a/app/components/ContextMenu/Template.tsx\n+++ b/app/components/ContextMenu/Template.tsx\n@@ -30,6 +30,7 @@ type Props = Omit<MenuStateReturn, \"items\"> & {\n   actions?: (Action | MenuSeparator | MenuHeading)[];\n   context?: Partial<ActionContext>;\n   items?: TMenuItem[];\n+  showIcons?: boolean;\n };\n \n const Disclosure = styled(ExpandedIcon)`\n@@ -98,7 +99,7 @@ export function filterTemplateItems(items: TMenuItem[]): TMenuItem[] {\n     });\n }\n \n-function Template({ items, actions, context, ...menu }: Props) {\n+function Template({ items, actions, context, showIcons, ...menu }: Props) {\n   const ctx = useActionContext({\n     isContextMenu: true,\n   });\n@@ -124,7 +125,8 @@ function Template({ items, actions, context, ...menu }: Props) {\n         if (\n           iconIsPresentInAnyMenuItem &&\n           item.type !== \"separator\" &&\n-          item.type !== \"heading\"\n+          item.type !== \"heading\" &&\n+          showIcons !== false\n         ) {\n           item.icon = item.icon || <MenuIconWrapper aria-hidden />;\n         }\n@@ -138,7 +140,7 @@ function Template({ items, actions, context, ...menu }: Props) {\n               key={index}\n               disabled={item.disabled}\n               selected={item.selected}\n-              icon={item.icon}\n+              icon={showIcons !== false ? item.icon : undefined}\n               {...menu}\n             >\n               {item.title}\n@@ -156,7 +158,7 @@ function Template({ items, actions, context, ...menu }: Props) {\n               selected={item.selected}\n               level={item.level}\n               target={item.href.startsWith(\"#\") ? undefined : \"_blank\"}\n-              icon={item.icon}\n+              icon={showIcons !== false ? item.icon : undefined}\n               {...menu}\n             >\n               {item.title}\n@@ -174,7 +176,7 @@ function Template({ items, actions, context, ...menu }: Props) {\n               selected={item.selected}\n               dangerous={item.dangerous}\n               key={index}\n-              icon={item.icon}\n+              icon={showIcons !== false ? item.icon : undefined}\n               {...menu}\n             >\n               {item.title}\n@@ -190,7 +192,12 @@ function Template({ items, actions, context, ...menu }: Props) {\n               id={`${item.title}-${index}`}\n               templateItems={item.items}\n               parentMenuState={menu}\n-              title={<Title title={item.title} icon={item.icon} />}\n+              title={\n+                <Title\n+                  title={item.title}\n+                  icon={showIcons !== false ? item.icon : undefined}\n+                />\n+              }\n               {...menu}\n             />\n           );\n\ndiff --git a/app/editor/index.tsx b/app/editor/index.tsx\nindex d8a848c33df8..27ea8d007555 100644\n--- a/app/editor/index.tsx\n+++ b/app/editor/index.tsx\n@@ -640,27 +640,56 @@ export class Editor extends React.PureComponent<\n   public getComments = () => ProsemirrorHelper.getComments(this.view.state.doc);\n \n   /**\n-   * Remove a specific comment mark from the document.\n+   * Remove all marks related to a specific comment from the document.\n    *\n    * @param commentId The id of the comment to remove\n    */\n   public removeComment = (commentId: string) => {\n     const { state, dispatch } = this.view;\n-    let found = false;\n+\n     state.doc.descendants((node, pos) => {\n-      if (!node.isInline || found) {\n+      if (!node.isInline) {\n         return;\n       }\n \n       const mark = node.marks.find(\n-        (mark) =>\n-          mark.type === state.schema.marks.comment &&\n-          mark.attrs.id === commentId\n+        (m) => m.type === state.schema.marks.comment && m.attrs.id === commentId\n       );\n \n       if (mark) {\n         dispatch(state.tr.removeMark(pos, pos + node.nodeSize, mark));\n-        found = true;\n+      }\n+    });\n+  };\n+\n+  /**\n+   * Update all marks related to a specific comment in the document.\n+   *\n+   * @param commentId The id of the comment to remove\n+   * @param attrs The attributes to update\n+   */\n+  public updateComment = (commentId: string, attrs: { resolved: boolean }) => {\n+    const { state, dispatch } = this.view;\n+\n+    state.doc.descendants((node, pos) => {\n+      if (!node.isInline) {\n+        return;\n+      }\n+\n+      const mark = node.marks.find(\n+        (m) => m.type === state.schema.marks.comment && m.attrs.id === commentId\n+      );\n+\n+      if (mark) {\n+        const from = pos;\n+        const to = pos + node.nodeSize;\n+        const newMark = state.schema.marks.comment.create({\n+          ...mark.attrs,\n+          ...attrs,\n+        });\n+        dispatch(\n+          state.tr.removeMark(from, to, mark).addMark(from, to, newMark)\n+        );\n       }\n     });\n   };\n@@ -808,6 +837,7 @@ const EditorContainer = styled(Styles)<{\n     css`\n       #comment-${props.focusedCommentId} {\n         background: ${transparentize(0.5, props.theme.brand.marine)};\n+        border-bottom: 2px solid ${props.theme.commentMarkBackground};\n       }\n     `}\n \n\ndiff --git a/app/editor/menus/formatting.tsx b/app/editor/menus/formatting.tsx\nindex d0bae86d5002..fe6551d9c4bb 100644\n--- a/app/editor/menus/formatting.tsx\n+++ b/app/editor/menus/formatting.tsx\n@@ -209,7 +209,7 @@ export default function formattingMenuItems(\n       tooltip: dictionary.comment,\n       icon: <CommentIcon />,\n       label: isCodeBlock ? dictionary.comment : undefined,\n-      active: isMarkActive(schema.marks.comment),\n+      active: isMarkActive(schema.marks.comment, { resolved: false }),\n       visible: !isMobile || !isEmpty,\n     },\n     {\n\ndiff --git a/app/menus/CommentMenu.tsx b/app/menus/CommentMenu.tsx\nindex bbab6aae69db..71f97f1e354f 100644\n--- a/app/menus/CommentMenu.tsx\n+++ b/app/menus/CommentMenu.tsx\n@@ -1,16 +1,22 @@\n import copy from \"copy-to-clipboard\";\n import { observer } from \"mobx-react\";\n+import { CopyIcon, EditIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { useMenuState } from \"reakit/Menu\";\n import { toast } from \"sonner\";\n import EventBoundary from \"@shared/components/EventBoundary\";\n import Comment from \"~/models/Comment\";\n-import CommentDeleteDialog from \"~/components/CommentDeleteDialog\";\n import ContextMenu from \"~/components/ContextMenu\";\n-import MenuItem from \"~/components/ContextMenu/MenuItem\";\n import OverflowMenuButton from \"~/components/ContextMenu/OverflowMenuButton\";\n-import Separator from \"~/components/ContextMenu/Separator\";\n+import Template from \"~/components/ContextMenu/Template\";\n+import { actionToMenuItem } from \"~/actions\";\n+import {\n+  deleteCommentFactory,\n+  resolveCommentFactory,\n+  unresolveCommentFactory,\n+} from \"~/actions/definitions/comments\";\n+import useActionContext from \"~/hooks/useActionContext\";\n import usePolicy from \"~/hooks/usePolicy\";\n import useStores from \"~/hooks/useStores\";\n import { commentPath, urlify } from \"~/utils/routeHelpers\";\n@@ -24,24 +30,26 @@ type Props = {\n   onEdit: () => void;\n   /** Callback when the comment has been deleted */\n   onDelete: () => void;\n+  /** Callback when the comment has been updated */\n+  onUpdate: (attrs: { resolved: boolean }) => void;\n };\n \n-function CommentMenu({ comment, onEdit, onDelete, className }: Props) {\n+function CommentMenu({\n+  comment,\n+  onEdit,\n+  onDelete,\n+  onUpdate,\n+  className,\n+}: Props) {\n   const menu = useMenuState({\n     modal: true,\n   });\n-  const { documents, dialogs } = useStores();\n+  const { documents } = useStores();\n   const { t } = useTranslation();\n   const can = usePolicy(comment);\n+  const context = useActionContext({ isContextMenu: true });\n   const document = documents.get(comment.documentId);\n \n-  const handleDelete = React.useCallback(() => {\n-    dialogs.openModal({\n-      title: t(\"Delete comment\"),\n-      content: <CommentDeleteDialog comment={comment} onSubmit={onDelete} />,\n-    });\n-  }, [dialogs, comment, onDelete, t]);\n-\n   const handleCopyLink = React.useCallback(() => {\n     if (document) {\n       copy(urlify(commentPath(document, comment)));\n@@ -58,24 +66,46 @@ function CommentMenu({ comment, onEdit, onDelete, className }: Props) {\n           {...menu}\n         />\n       </EventBoundary>\n-\n       <ContextMenu {...menu} aria-label={t(\"Comment options\")}>\n-        {can.update && (\n-          <MenuItem {...menu} onClick={onEdit}>\n-            {t(\"Edit\")}\n-          </MenuItem>\n-        )}\n-        <MenuItem {...menu} onClick={handleCopyLink}>\n-          {t(\"Copy link\")}\n-        </MenuItem>\n-        {can.delete && (\n-          <>\n-            <Separator />\n-            <MenuItem {...menu} onClick={handleDelete} dangerous>\n-              {t(\"Delete\")}\n-            </MenuItem>\n-          </>\n-        )}\n+        <Template\n+          {...menu}\n+          items={[\n+            {\n+              type: \"button\",\n+              title: `${t(\"Edit\")}…`,\n+              icon: <EditIcon />,\n+              onClick: onEdit,\n+              visible: can.update,\n+            },\n+            actionToMenuItem(\n+              resolveCommentFactory({\n+                comment,\n+                onResolve: () => onUpdate({ resolved: true }),\n+              }),\n+              context\n+            ),\n+            actionToMenuItem(\n+              unresolveCommentFactory({\n+                comment,\n+                onUnresolve: () => onUpdate({ resolved: false }),\n+              }),\n+              context\n+            ),\n+            {\n+              type: \"button\",\n+              icon: <CopyIcon />,\n+              title: t(\"Copy link\"),\n+              onClick: handleCopyLink,\n+            },\n+            {\n+              type: \"separator\",\n+            },\n+            actionToMenuItem(\n+              deleteCommentFactory({ comment, onDelete }),\n+              context\n+            ),\n+          ]}\n+        />\n       </ContextMenu>\n     </>\n   );\n\ndiff --git a/app/models/Comment.ts b/app/models/Comment.ts\nindex 8fc2c3660e3c..afb0a22f3554 100644\n--- a/app/models/Comment.ts\n+++ b/app/models/Comment.ts\n@@ -3,6 +3,7 @@ import { computed, observable } from \"mobx\";\n import { now } from \"mobx-utils\";\n import type { ProsemirrorData } from \"@shared/types\";\n import User from \"~/models/User\";\n+import Document from \"./Document\";\n import Model from \"./base/Model\";\n import Field from \"./decorators/Field\";\n import Relation from \"./decorators/Relation\";\n@@ -34,7 +35,7 @@ class Comment extends Model {\n    */\n   @Field\n   @observable\n-  parentCommentId: string;\n+  parentCommentId: string | null;\n \n   /**\n    * The comment that this comment is a reply to.\n@@ -43,33 +44,86 @@ class Comment extends Model {\n   parentComment?: Comment;\n \n   /**\n-   * The document to which this comment belongs.\n+   * The document ID to which this comment belongs.\n    */\n   @Field\n   @observable\n   documentId: string;\n \n+  /**\n+   * The document that this comment belongs to.\n+   */\n+  @Relation(() => Document, { onDelete: \"cascade\" })\n+  document: Document;\n+\n+  /**\n+   * The user who created this comment.\n+   */\n   @Relation(() => User)\n   createdBy: User;\n \n+  /**\n+   * The ID of the user who created this comment.\n+   */\n   createdById: string;\n \n+  /**\n+   * The date and time that this comment was resolved, if it has been resolved.\n+   */\n   @observable\n   resolvedAt: string;\n \n+  /**\n+   * The user who resolved this comment, if it has been resolved.\n+   */\n   @Relation(() => User)\n-  resolvedBy: User;\n+  resolvedBy: User | null;\n+\n+  /**\n+   * The ID of the user who resolved this comment, if it has been resolved.\n+   */\n+  resolvedById: string | null;\n \n   /**\n    * An array of users that are currently typing a reply in this comments thread.\n    */\n   @computed\n-  get currentlyTypingUsers(): User[] {\n+  public get currentlyTypingUsers(): User[] {\n     return Array.from(this.typingUsers.entries())\n       .filter(([, lastReceivedDate]) => lastReceivedDate > subSeconds(now(), 3))\n       .map(([userId]) => this.store.rootStore.users.get(userId))\n       .filter(Boolean) as User[];\n   }\n+\n+  /**\n+   * Whether the comment is resolved\n+   */\n+  @computed\n+  public get isResolved() {\n+    return !!this.resolvedAt;\n+  }\n+\n+  /**\n+   * Whether the comment is a reply to another comment.\n+   */\n+  @computed\n+  public get isReply() {\n+    return !!this.parentCommentId;\n+  }\n+\n+  /**\n+   * Resolve the comment\n+   */\n+  public resolve() {\n+    return this.store.rootStore.comments.resolve(this.id);\n+  }\n+\n+  /**\n+   * Unresolve the comment\n+   */\n+  public unresolve() {\n+    return this.store.rootStore.comments.unresolve(this.id);\n+  }\n }\n \n export default Comment;\n\ndiff --git a/app/scenes/Document/components/CommentForm.tsx b/app/scenes/Document/components/CommentForm.tsx\nindex 0cb297f0082c..e1f82d6bfb88 100644\n--- a/app/scenes/Document/components/CommentForm.tsx\n+++ b/app/scenes/Document/components/CommentForm.tsx\n@@ -106,6 +106,7 @@ function CommentForm({\n       thread ??\n       new Comment(\n         {\n+          createdAt: new Date().toISOString(),\n           documentId,\n           data: draft,\n         },\n@@ -139,6 +140,7 @@ function CommentForm({\n \n     const comment = new Comment(\n       {\n+        createdAt: new Date().toISOString(),\n         parentCommentId: thread?.id,\n         documentId,\n         data: draft,\n\ndiff --git a/app/scenes/Document/components/CommentThread.tsx b/app/scenes/Document/components/CommentThread.tsx\nindex 61e345b498ea..4269e4b077e7 100644\n--- a/app/scenes/Document/components/CommentThread.tsx\n+++ b/app/scenes/Document/components/CommentThread.tsx\n@@ -2,7 +2,7 @@ import throttle from \"lodash/throttle\";\n import { observer } from \"mobx-react\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n-import { useHistory } from \"react-router-dom\";\n+import { useHistory, useLocation } from \"react-router-dom\";\n import scrollIntoView from \"smooth-scroll-into-view-if-needed\";\n import styled, { css } from \"styled-components\";\n import breakpoint from \"styled-components-breakpoint\";\n@@ -70,6 +70,7 @@ function CommentThread({\n   const user = useCurrentUser();\n   const { t } = useTranslation();\n   const history = useHistory();\n+  const location = useLocation();\n   const [autoFocus, setAutoFocus] = React.useState(thread.isNew);\n   const [, setIsTyping] = useTypingIndicator({\n     document,\n@@ -92,7 +93,8 @@ function CommentThread({\n       !(event.target as HTMLElement).classList.contains(\"comment\")\n     ) {\n       history.replace({\n-        pathname: window.location.pathname,\n+        search: location.search,\n+        pathname: location.pathname,\n         state: { commentId: undefined },\n       });\n     }\n@@ -100,7 +102,8 @@ function CommentThread({\n \n   const handleClickThread = () => {\n     history.replace({\n-      pathname: window.location.pathname.replace(/\\/history$/, \"\"),\n+      search: location.search,\n+      pathname: location.pathname.replace(/\\/history$/, \"\"),\n       state: { commentId: thread.id },\n     });\n   };\n@@ -177,6 +180,7 @@ function CommentThread({\n             highlightedText={index === 0 ? highlightedText : undefined}\n             comment={comment}\n             onDelete={() => editor?.removeComment(comment.id)}\n+            onUpdate={(attrs) => editor?.updateComment(comment.id, attrs)}\n             key={comment.id}\n             firstOfThread={index === 0}\n             lastOfThread={index === commentsInThread.length - 1 && !draft}\n\ndiff --git a/app/scenes/Document/components/CommentThreadItem.tsx b/app/scenes/Document/components/CommentThreadItem.tsx\nindex aeda32d28553..73a9a7b93140 100644\n--- a/app/scenes/Document/components/CommentThreadItem.tsx\n+++ b/app/scenes/Document/components/CommentThreadItem.tsx\n@@ -7,6 +7,7 @@ import { useTranslation } from \"react-i18next\";\n import { toast } from \"sonner\";\n import styled, { css } from \"styled-components\";\n import breakpoint from \"styled-components-breakpoint\";\n+import EventBoundary from \"@shared/components/EventBoundary\";\n import { s } from \"@shared/styles\";\n import { ProsemirrorData } from \"@shared/types\";\n import { dateToRelative } from \"@shared/utils/date\";\n@@ -76,6 +77,8 @@ type Props = {\n   canReply: boolean;\n   /** Callback when the comment has been deleted */\n   onDelete: () => void;\n+  /** Callback when the comment has been updated */\n+  onUpdate: (attrs: { resolved: boolean }) => void;\n   /** Text to highlight at the top of the comment */\n   highlightedText?: string;\n };\n@@ -89,6 +92,7 @@ function CommentThreadItem({\n   previousCommentCreatedAt,\n   canReply,\n   onDelete,\n+  onUpdate,\n   highlightedText,\n }: Props) {\n   const { t } = useTranslation();\n@@ -97,7 +101,9 @@ function CommentThreadItem({\n   const showAuthor = firstOfAuthor;\n   const showTime = useShowTime(comment.createdAt, previousCommentCreatedAt);\n   const showEdited =\n-    comment.updatedAt && comment.updatedAt !== comment.createdAt;\n+    comment.updatedAt &&\n+    comment.updatedAt !== comment.createdAt &&\n+    !comment.isResolved;\n   const [isEditing, setEditing, setReadOnly] = useBoolean();\n   const formRef = React.useRef<HTMLFormElement>(null);\n \n@@ -198,14 +204,17 @@ function CommentThreadItem({\n             </Flex>\n           )}\n         </Body>\n-        {!isEditing && (\n-          <Menu\n-            comment={comment}\n-            onEdit={setEditing}\n-            onDelete={onDelete}\n-            dir={dir}\n-          />\n-        )}\n+        <EventBoundary>\n+          {!isEditing && (\n+            <Menu\n+              comment={comment}\n+              onEdit={setEditing}\n+              onDelete={onDelete}\n+              onUpdate={onUpdate}\n+              dir={dir}\n+            />\n+          )}\n+        </EventBoundary>\n       </Bubble>\n     </Flex>\n   );\n\ndiff --git a/app/scenes/Document/components/Comments.tsx b/app/scenes/Document/components/Comments.tsx\nindex fe485232c300..cf5675e37c6a 100644\n--- a/app/scenes/Document/components/Comments.tsx\n+++ b/app/scenes/Document/components/Comments.tsx\n@@ -1,19 +1,25 @@\n import { AnimatePresence } from \"framer-motion\";\n import { observer } from \"mobx-react\";\n+import { DoneIcon } from \"outline-icons\";\n+import queryString from \"query-string\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n-import { useRouteMatch } from \"react-router-dom\";\n-import styled from \"styled-components\";\n+import { useHistory, useLocation, useRouteMatch } from \"react-router-dom\";\n+import styled, { css } from \"styled-components\";\n import { ProsemirrorData } from \"@shared/types\";\n+import Button from \"~/components/Button\";\n import Empty from \"~/components/Empty\";\n import Flex from \"~/components/Flex\";\n import Scrollable from \"~/components/Scrollable\";\n+import Tooltip from \"~/components/Tooltip\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n import useFocusedComment from \"~/hooks/useFocusedComment\";\n import useKeyDown from \"~/hooks/useKeyDown\";\n import usePersistedState from \"~/hooks/usePersistedState\";\n import usePolicy from \"~/hooks/usePolicy\";\n+import useQuery from \"~/hooks/useQuery\";\n import useStores from \"~/hooks/useStores\";\n+import { bigPulse } from \"~/styles/animations\";\n import CommentForm from \"./CommentForm\";\n import CommentThread from \"./CommentThread\";\n import Sidebar from \"./SidebarLayout\";\n@@ -22,7 +28,11 @@ function Comments() {\n   const { ui, comments, documents } = useStores();\n   const { t } = useTranslation();\n   const user = useCurrentUser();\n+  const location = useLocation();\n+  const history = useHistory();\n   const match = useRouteMatch<{ documentSlug: string }>();\n+  const params = useQuery();\n+  const [pulse, setPulse] = React.useState(false);\n   const document = documents.getByUrl(match.params.documentSlug);\n   const focusedComment = useFocusedComment();\n   const can = usePolicy(document);\n@@ -34,18 +44,75 @@ function Comments() {\n     undefined\n   );\n \n+  const viewingResolved = params.get(\"resolved\") === \"\";\n+  const resolvedThreads = document\n+    ? comments.resolvedThreadsInDocument(document.id)\n+    : [];\n+  const resolvedThreadsCount = resolvedThreads.length;\n+\n+  React.useEffect(() => {\n+    setPulse(true);\n+    const timeout = setTimeout(() => setPulse(false), 250);\n+\n+    return () => {\n+      clearTimeout(timeout);\n+      setPulse(false);\n+    };\n+  }, [resolvedThreadsCount]);\n+\n   if (!document) {\n     return null;\n   }\n \n-  const threads = comments\n-    .threadsInDocument(document.id)\n-    .filter((thread) => !thread.isNew || thread.createdById === user.id);\n+  const threads = (\n+    viewingResolved\n+      ? resolvedThreads\n+      : comments.unresolvedThreadsInDocument(document.id)\n+  ).filter((thread) => thread.createdById === user.id);\n   const hasComments = threads.length > 0;\n \n+  const toggleViewingResolved = () => {\n+    history.push({\n+      search: queryString.stringify({\n+        ...queryString.parse(location.search),\n+        resolved: viewingResolved ? undefined : \"\",\n+      }),\n+      pathname: location.pathname,\n+    });\n+  };\n+\n   return (\n     <Sidebar\n-      title={t(\"Comments\")}\n+      title={\n+        <Flex align=\"center\" justify=\"space-between\" auto>\n+          {viewingResolved ? (\n+            <React.Fragment key=\"resolved\">\n+              <span>{t(\"Resolved comments\")}</span>\n+              <Tooltip delay={500} content={t(\"View comments\")}>\n+                <ResolvedButton\n+                  neutral\n+                  borderOnHover\n+                  icon={<DoneIcon />}\n+                  onClick={toggleViewingResolved}\n+                />\n+              </Tooltip>\n+            </React.Fragment>\n+          ) : (\n+            <React.Fragment>\n+              <span>{t(\"Comments\")}</span>\n+              <Tooltip delay={250} content={t(\"View resolved comments\")}>\n+                <ResolvedButton\n+                  neutral\n+                  borderOnHover\n+                  icon={<DoneIcon outline />}\n+                  onClick={toggleViewingResolved}\n+                  $pulse={pulse}\n+                />\n+              </Tooltip>\n+            </React.Fragment>\n+          )}\n+        </Flex>\n+      }\n       onClose={() => ui.collapseComments(document?.id)}\n       scrollable={false}\n     >\n@@ -68,13 +135,17 @@ function Comments() {\n             ))\n           ) : (\n             <NoComments align=\"center\" justify=\"center\" auto>\n-              <PositionedEmpty>{t(\"No comments yet\")}</PositionedEmpty>\n+              <PositionedEmpty>\n+                {viewingResolved\n+                  ? t(\"No resolved comments\")\n+                  : t(\"No comments yet\")}\n+              </PositionedEmpty>\n             </NoComments>\n           )}\n         </Wrapper>\n       </Scrollable>\n       <AnimatePresence initial={false}>\n-        {!focusedComment && can.comment && (\n+        {!focusedComment && can.comment && !viewingResolved && (\n           <NewCommentForm\n             draft={draft}\n             onSaveDraft={onSaveDraft}\n@@ -91,6 +162,14 @@ function Comments() {\n   );\n }\n \n+const ResolvedButton = styled(Button)<{ $pulse: boolean }>`\n+  ${(props) =>\n+    props.$pulse &&\n+    css`\n+      animation: ${bigPulse} 250ms 1;\n+    `}\n+`;\n+\n const PositionedEmpty = styled(Empty)`\n   position: absolute;\n   top: calc(50vh - 30px);\n\ndiff --git a/app/scenes/Document/components/DataLoader.tsx b/app/scenes/Document/components/DataLoader.tsx\nindex 72b222ac808c..28bfc2171802 100644\n--- a/app/scenes/Document/components/DataLoader.tsx\n+++ b/app/scenes/Document/components/DataLoader.tsx\n@@ -186,7 +186,7 @@ function DataLoader({ match, children }: Props) {\n       // when viewing a public share link\n       if (can.read && !document.isDeleted) {\n         if (team.getPreference(TeamPreference.Commenting)) {\n-          void comments.fetchPage({\n+          void comments.fetchAll({\n             documentId: document.id,\n             limit: 100,\n           });\n\ndiff --git a/app/scenes/Document/components/DocumentMeta.tsx b/app/scenes/Document/components/DocumentMeta.tsx\nindex 5af9535c9a49..3a47259bbda8 100644\n--- a/app/scenes/Document/components/DocumentMeta.tsx\n+++ b/app/scenes/Document/components/DocumentMeta.tsx\n@@ -37,7 +37,7 @@ function TitleDocumentMeta({ to, document, revision, ...rest }: Props) {\n   const Wrapper = viewsLoadedOnMount.current ? React.Fragment : Fade;\n \n   const insightsPath = documentInsightsPath(document);\n-  const commentsCount = comments.filter({ documentId: document.id }).length;\n+  const commentsCount = comments.unresolvedCommentsInDocumentCount(document.id);\n \n   return (\n     <Meta document={document} revision={revision} to={to} replace {...rest}>\n\ndiff --git a/app/scenes/Document/components/SidebarLayout.tsx b/app/scenes/Document/components/SidebarLayout.tsx\nindex 3e8ec263d580..ff6982960a32 100644\n--- a/app/scenes/Document/components/SidebarLayout.tsx\n+++ b/app/scenes/Document/components/SidebarLayout.tsx\n@@ -13,7 +13,7 @@ import useMobile from \"~/hooks/useMobile\";\n import { draggableOnDesktop } from \"~/styles\";\n import { fadeIn } from \"~/styles/animations\";\n \n-type Props = React.HTMLAttributes<HTMLDivElement> & {\n+type Props = Omit<React.HTMLAttributes<HTMLDivElement>, \"title\"> & {\n   /* The title of the sidebar */\n   title: React.ReactNode;\n   /* The content of the sidebar */\n\ndiff --git a/app/scenes/KeyboardShortcuts.tsx b/app/scenes/KeyboardShortcuts.tsx\nindex 645e351935de..463243e709e1 100644\n--- a/app/scenes/KeyboardShortcuts.tsx\n+++ b/app/scenes/KeyboardShortcuts.tsx\n@@ -114,6 +114,19 @@ function KeyboardShortcuts() {\n           },\n         ],\n       },\n+      {\n+        title: t(\"Collaboration\"),\n+        items: [\n+          {\n+            shortcut: (\n+              <>\n+                <Key symbol>{metaDisplay}</Key> + <Key>Alt</Key> + <Key>m</Key>\n+              </>\n+            ),\n+            label: t(\"Comment\"),\n+          },\n+        ],\n+      },\n       {\n         title: t(\"Formatting\"),\n         items: [\n\ndiff --git a/app/stores/CommentsStore.ts b/app/stores/CommentsStore.ts\nindex f529476a2a36..2ada84fe0561 100644\n--- a/app/stores/CommentsStore.ts\n+++ b/app/stores/CommentsStore.ts\n@@ -1,6 +1,8 @@\n+import invariant from \"invariant\";\n import orderBy from \"lodash/orderBy\";\n import { action, computed } from \"mobx\";\n import Comment from \"~/models/Comment\";\n+import { client } from \"~/utils/ApiClient\";\n import RootStore from \"./RootStore\";\n import Store from \"./base/Store\";\n \n@@ -29,12 +31,54 @@ export default class CommentsStore extends Store<Comment> {\n   threadsInDocument(documentId: string): Comment[] {\n     return this.filter(\n       (comment: Comment) =>\n-        comment.documentId === documentId && !comment.parentCommentId\n+        comment.documentId === documentId &&\n+        !comment.parentCommentId &&\n+        (!comment.isNew ||\n+          comment.createdById === this.rootStore.auth.currentUserId)\n     );\n   }\n \n   /**\n-   * Returns a list of comments that are replies to the given comment.\n+   * Returns a list of resolved comments in a document that are not replies to other\n+   * comments.\n+   *\n+   * @param documentId ID of the document to get comments for\n+   * @returns Array of comments\n+   */\n+  resolvedThreadsInDocument(documentId: string): Comment[] {\n+    return this.threadsInDocument(documentId).filter(\n+      (comment: Comment) => comment.isResolved === true\n+    );\n+  }\n+\n+  /**\n+   * Returns a list of comments in a document that are not replies to other\n+   * comments.\n+   *\n+   * @param documentId ID of the document to get comments for\n+   * @returns Array of comments\n+   */\n+  unresolvedThreadsInDocument(documentId: string): Comment[] {\n+    return this.threadsInDocument(documentId).filter(\n+      (comment: Comment) => comment.isResolved === false\n+    );\n+  }\n+\n+  /**\n+   * Returns the total number of unresolbed comments in the given document.\n+   *\n+   * @param documentId ID of the document to get comments for\n+   * @returns A number of comments\n+   */\n+  unresolvedCommentsInDocumentCount(documentId: string): number {\n+    return this.unresolvedThreadsInDocument(documentId).reduce(\n+      (memo, thread) => memo + this.inThread(thread.id).length,\n+      0\n+    );\n+  }\n+\n+  /**\n+   * Returns a list of comments that includes the given thread ID and any of it's replies.\n    *\n    * @param commentId ID of the comment to get replies for\n    * @returns Array of comments\n@@ -46,6 +90,40 @@ export default class CommentsStore extends Store<Comment> {\n     );\n   }\n \n+  /**\n+   * Resolve a comment thread with the given ID.\n+   *\n+   * @param id ID of the comment to resolve\n+   * @returns Resolved comment\n+   */\n+  @action\n+  resolve = async (id: string): Promise<Comment> => {\n+    const res = await client.post(\"/comments.resolve\", {\n+      id,\n+    });\n+    invariant(res?.data, \"Comment not available\");\n+    this.addPolicies(res.policies);\n+    this.add(res.data);\n+    return this.data.get(res.data.id) as Comment;\n+  };\n+\n+  /**\n+   * Unresolve a comment thread with the given ID.\n+   *\n+   * @param id ID of the comment to unresolve\n+   * @returns Unresolved comment\n+   */\n+  @action\n+  unresolve = async (id: string): Promise<Comment> => {\n+    const res = await client.post(\"/comments.unresolve\", {\n+      id,\n+    });\n+    invariant(res?.data, \"Comment not available\");\n+    this.addPolicies(res.policies);\n+    this.add(res.data);\n+    return this.data.get(res.data.id) as Comment;\n+  };\n+\n   @action\n   setTyping({\n     commentId,\n\ndiff --git a/app/styles/animations.ts b/app/styles/animations.ts\nindex 4e0d6875d5b6..c00c085c3b4f 100644\n--- a/app/styles/animations.ts\n+++ b/app/styles/animations.ts\n@@ -116,6 +116,12 @@ export const pulse = keyframes`\n   100% { transform: scale(1); }\n `;\n \n+export const bigPulse = keyframes`\n+  0% { transform: scale(1); }\n+  50% { transform: scale(1.2); }\n+  100% { transform: scale(1); }\n+`;\n+\n /**\n  * The duration of the sidebar appearing animation in ms\n  */\n\ndiff --git a/package.json b/package.json\nindex a77430bbbd44..a993cd003f17 100644\n--- a/package.json\n+++ b/package.json\n@@ -158,7 +158,7 @@\n     \"node-fetch\": \"2.7.0\",\n     \"nodemailer\": \"^6.9.14\",\n     \"octokit\": \"^3.2.1\",\n-    \"outline-icons\": \"^3.4.1\",\n+    \"outline-icons\": \"^3.5.0\",\n     \"oy-vey\": \"^0.12.1\",\n     \"passport\": \"^0.7.0\",\n     \"passport-google-oauth2\": \"^0.2.0\",\n\ndiff --git a/server/middlewares/feature.ts b/server/middlewares/feature.ts\nnew file mode 100644\nindex 000000000000..8f4f3fe9ea62\n--- /dev/null\n+++ b/server/middlewares/feature.ts\n@@ -0,0 +1,19 @@\n+import { Next } from \"koa\";\n+import { TeamPreference } from \"@shared/types\";\n+import { ValidationError } from \"@server/errors\";\n+import { APIContext } from \"@server/types\";\n+\n+/**\n+ * Middleware to check if a feature is enabled for the team.\n+ *\n+ * @param preference The preference to check\n+ * @returns The middleware function\n+ */\n+export function feature(preference: TeamPreference) {\n+  return async function featureEnabledMiddleware(ctx: APIContext, next: Next) {\n+    if (!ctx.state.auth.user.team.getPreference(preference)) {\n+      throw ValidationError(`${preference} is currently disabled`);\n+    }\n+    return next();\n+  };\n+}\n\ndiff --git a/server/models/Comment.ts b/server/models/Comment.ts\nindex 7857d1eb64e0..d13089e28fed 100644\n--- a/server/models/Comment.ts\n+++ b/server/models/Comment.ts\n@@ -13,6 +13,7 @@ import type { ProsemirrorData } from \"@shared/types\";\n import { ProsemirrorHelper } from \"@shared/utils/ProsemirrorHelper\";\n import { CommentValidation } from \"@shared/validations\";\n import { schema } from \"@server/editor\";\n+import { ValidationError } from \"@server/errors\";\n import Document from \"./Document\";\n import User from \"./User\";\n import ParanoidModel from \"./base/ParanoidModel\";\n@@ -26,6 +27,11 @@ import TextLength from \"./validators/TextLength\";\n       as: \"createdBy\",\n       paranoid: false,\n     },\n+    {\n+      model: User,\n+      as: \"resolvedBy\",\n+      paranoid: false,\n+    },\n   ],\n }))\n @Table({ tableName: \"comments\", modelName: \"comment\" })\n@@ -54,12 +60,15 @@ class Comment extends ParanoidModel<\n   @Column(DataType.UUID)\n   createdById: string;\n \n+  @Column(DataType.DATE)\n+  resolvedAt: Date | null;\n+\n   @BelongsTo(() => User, \"resolvedById\")\n-  resolvedBy: User;\n+  resolvedBy: User | null;\n \n   @ForeignKey(() => User)\n   @Column(DataType.UUID)\n-  resolvedById: string;\n+  resolvedById: string | null;\n \n   @BelongsTo(() => Document, \"documentId\")\n   document: Document;\n@@ -75,6 +84,51 @@ class Comment extends ParanoidModel<\n   @Column(DataType.UUID)\n   parentCommentId: string;\n \n+  // methods\n+\n+  /**\n+   * Resolve the comment. Note this does not save the comment to the database.\n+   *\n+   * @param resolvedBy The user who resolved the comment\n+   */\n+  public resolve(resolvedBy: User) {\n+    if (this.isResolved) {\n+      throw ValidationError(\"Comment is already resolved\");\n+    }\n+    if (this.parentCommentId) {\n+      throw ValidationError(\"Cannot resolve a reply\");\n+    }\n+\n+    this.resolvedById = resolvedBy.id;\n+    this.resolvedBy = resolvedBy;\n+    this.resolvedAt = new Date();\n+  }\n+\n+  /**\n+   * Unresolve the comment. Note this does not save the comment to the database.\n+   */\n+  public unresolve() {\n+    if (!this.isResolved) {\n+      throw ValidationError(\"Comment is not resolved\");\n+    }\n+\n+    this.resolvedById = null;\n+    this.resolvedBy = null;\n+    this.resolvedAt = null;\n+  }\n+\n+  /**\n+   * Whether the comment is resolved\n+   */\n+  public get isResolved() {\n+    return !!this.resolvedAt;\n+  }\n+\n+  /**\n+   * Convert the comment data to plain text\n+   *\n+   * @returns The plain text representation of the comment data\n+   */\n   public toPlainText() {\n     const node = Node.fromJSON(schema, this.data);\n     return ProsemirrorHelper.toPlainText(node, schema);\n\ndiff --git a/server/onerror.ts b/server/onerror.ts\nindex dd5865b31de0..ad6848ee8e81 100644\n--- a/server/onerror.ts\n+++ b/server/onerror.ts\n@@ -73,6 +73,10 @@ export default function onerror(app: Koa) {\n       requestErrorHandler(err, this);\n \n       if (!(err instanceof InternalError)) {\n+        if (env.ENVIRONMENT === \"test\") {\n+          // eslint-disable-next-line no-console\n+          console.error(err);\n+        }\n         err = InternalError();\n       }\n     }\n\ndiff --git a/server/policies/comment.ts b/server/policies/comment.ts\nindex 7d411fe2861c..14abf24e4b49 100644\n--- a/server/policies/comment.ts\n+++ b/server/policies/comment.ts\n@@ -8,6 +8,22 @@ allow(User, \"read\", Comment, (actor, comment) =>\n   isTeamModel(actor, comment?.createdBy)\n );\n \n+allow(User, \"resolve\", Comment, (actor, comment) =>\n+  and(\n+    isTeamModel(actor, comment?.createdBy),\n+    comment?.parentCommentId === null,\n+    comment?.resolvedById === null\n+  )\n+);\n+\n+allow(User, \"unresolve\", Comment, (actor, comment) =>\n+  and(\n+    isTeamModel(actor, comment?.createdBy),\n+    comment?.parentCommentId === null,\n+    comment?.resolvedById !== null\n+  )\n+);\n+\n allow(User, [\"update\", \"delete\"], Comment, (actor, comment) =>\n   and(\n     isTeamModel(actor, comment?.createdBy),\n\ndiff --git a/server/presenters/comment.ts b/server/presenters/comment.ts\nindex a2509ab74a6f..9267fe7a6648 100644\n--- a/server/presenters/comment.ts\n+++ b/server/presenters/comment.ts\n@@ -9,6 +9,9 @@ export default function present(comment: Comment) {\n     parentCommentId: comment.parentCommentId,\n     createdBy: presentUser(comment.createdBy),\n     createdById: comment.createdById,\n+    resolvedAt: comment.resolvedAt,\n+    resolvedBy: comment.resolvedBy ? presentUser(comment.resolvedBy) : null,\n+    resolvedById: comment.resolvedById,\n     createdAt: comment.createdAt,\n     updatedAt: comment.updatedAt,\n   };\n\ndiff --git a/server/queues/processors/WebsocketsProcessor.ts b/server/queues/processors/WebsocketsProcessor.ts\nindex 5a7da6c43e1f..dfa9edd45ee2 100644\n--- a/server/queues/processors/WebsocketsProcessor.ts\n+++ b/server/queues/processors/WebsocketsProcessor.ts\n@@ -424,6 +424,7 @@ export default class WebsocketsProcessor {\n \n       case \"comments.delete\": {\n         const comment = await Comment.findByPk(event.modelId, {\n+          paranoid: false,\n           include: [\n             {\n               model: Document.scope([\"withoutState\", \"withDrafts\"]),\n\ndiff --git a/server/routes/api/comments/comments.ts b/server/routes/api/comments/comments.ts\nindex 78b7d1cdc27f..0ca6142ebe92 100644\n--- a/server/routes/api/comments/comments.ts\n+++ b/server/routes/api/comments/comments.ts\n@@ -1,16 +1,15 @@\n-import { Next } from \"koa\";\n import Router from \"koa-router\";\n-import { FindOptions, Op } from \"sequelize\";\n-import { TeamPreference } from \"@shared/types\";\n+import { FindOptions, Op, WhereOptions } from \"sequelize\";\n+import { CommentStatusFilter, TeamPreference } from \"@shared/types\";\n import commentCreator from \"@server/commands/commentCreator\";\n import commentDestroyer from \"@server/commands/commentDestroyer\";\n import commentUpdater from \"@server/commands/commentUpdater\";\n-import { ValidationError } from \"@server/errors\";\n import auth from \"@server/middlewares/authentication\";\n+import { feature } from \"@server/middlewares/feature\";\n import { rateLimiter } from \"@server/middlewares/rateLimiter\";\n import { transaction } from \"@server/middlewares/transaction\";\n import validate from \"@server/middlewares/validate\";\n-import { Document, Comment, Collection } from \"@server/models\";\n+import { Document, Comment, Collection, Event } from \"@server/models\";\n import { authorize } from \"@server/policies\";\n import { presentComment, presentPolicies } from \"@server/presenters\";\n import { APIContext } from \"@server/types\";\n@@ -24,7 +23,7 @@ router.post(\n   \"comments.create\",\n   rateLimiter(RateLimiterStrategy.TenPerMinute),\n   auth(),\n-  checkCommentingEnabled(),\n+  feature(TeamPreference.Commenting),\n   validate(T.CommentsCreateSchema),\n   transaction(),\n   async (ctx: APIContext<T.CommentsCreateReq>) => {\n@@ -58,7 +57,7 @@ router.post(\n router.post(\n   \"comments.info\",\n   auth(),\n-  checkCommentingEnabled(),\n+  feature(TeamPreference.Commenting),\n   validate(T.CommentsInfoSchema),\n   async (ctx: APIContext<T.CommentsInfoReq>) => {\n     const { id } = ctx.input.body;\n@@ -67,14 +66,11 @@ router.post(\n     const comment = await Comment.findByPk(id, {\n       rejectOnEmpty: true,\n     });\n+    const document = await Document.findByPk(comment.documentId, {\n+      userId: user.id,\n+    });\n     authorize(user, \"read\", comment);\n-\n-    if (comment.documentId) {\n-      const document = await Document.findByPk(comment.documentId, {\n-        userId: user.id,\n-      });\n-      authorize(user, \"read\", document);\n-    }\n+    authorize(user, \"read\", document);\n \n     ctx.body = {\n       data: presentComment(comment),\n@@ -87,13 +83,45 @@ router.post(\n   \"comments.list\",\n   auth(),\n   pagination(),\n-  checkCommentingEnabled(),\n+  feature(TeamPreference.Commenting),\n   validate(T.CommentsListSchema),\n   async (ctx: APIContext<T.CommentsListReq>) => {\n-    const { sort, direction, documentId, collectionId } = ctx.input.body;\n+    const {\n+      sort,\n+      direction,\n+      documentId,\n+      parentCommentId,\n+      statusFilter,\n+      collectionId,\n+    } = ctx.input.body;\n     const { user } = ctx.state.auth;\n+    const statusQuery = [];\n+\n+    if (statusFilter?.includes(CommentStatusFilter.Resolved)) {\n+      statusQuery.push({ resolvedById: { [Op.not]: null } });\n+    }\n+    if (statusFilter?.includes(CommentStatusFilter.Unresolved)) {\n+      statusQuery.push({ resolvedById: null });\n+    }\n+\n+    const where: WhereOptions<Comment> = {\n+      [Op.and]: [],\n+    };\n+    if (documentId) {\n+      // @ts-expect-error ignore\n+      where[Op.and].push({ documentId });\n+    }\n+    if (parentCommentId) {\n+      // @ts-expect-error ignore\n+      where[Op.and].push({ parentCommentId });\n+    }\n+    if (statusQuery.length) {\n+      // @ts-expect-error ignore\n+      where[Op.and].push({ [Op.or]: statusQuery });\n+    }\n \n     const params: FindOptions<Comment> = {\n+      where,\n       order: [[sort, direction]],\n       offset: ctx.state.pagination.offset,\n       limit: ctx.state.pagination.limit,\n@@ -103,12 +131,7 @@ router.post(\n     if (documentId) {\n       const document = await Document.findByPk(documentId, { userId: user.id });\n       authorize(user, \"read\", document);\n-      comments = await Comment.findAll({\n-        where: {\n-          documentId: document.id,\n-        },\n-        ...params,\n-      });\n+      comments = await Comment.findAll(params);\n     } else if (collectionId) {\n       const collection = await Collection.findByPk(collectionId);\n       authorize(user, \"read\", collection);\n@@ -153,7 +176,7 @@ router.post(\n router.post(\n   \"comments.update\",\n   auth(),\n-  checkCommentingEnabled(),\n+  feature(TeamPreference.Commenting),\n   validate(T.CommentsUpdateSchema),\n   transaction(),\n   async (ctx: APIContext<T.CommentsUpdateReq>) => {\n@@ -194,7 +217,7 @@ router.post(\n router.post(\n   \"comments.delete\",\n   auth(),\n-  checkCommentingEnabled(),\n+  feature(TeamPreference.Commenting),\n   validate(T.CommentsDeleteSchema),\n   transaction(),\n   async (ctx: APIContext<T.CommentsDeleteReq>) => {\n@@ -226,19 +249,98 @@ router.post(\n   }\n );\n \n-function checkCommentingEnabled() {\n-  return async function checkCommentingEnabledMiddleware(\n-    ctx: APIContext,\n-    next: Next\n-  ) {\n-    if (!ctx.state.auth.user.team.getPreference(TeamPreference.Commenting)) {\n-      throw ValidationError(\"Commenting is currently disabled\");\n-    }\n-    return next();\n-  };\n-}\n+router.post(\n+  \"comments.resolve\",\n+  auth(),\n+  feature(TeamPreference.Commenting),\n+  validate(T.CommentsResolveSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.CommentsResolveReq>) => {\n+    const { id } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n+\n+    const comment = await Comment.findByPk(id, {\n+      transaction,\n+      rejectOnEmpty: true,\n+      lock: {\n+        level: transaction.LOCK.UPDATE,\n+        of: Comment,\n+      },\n+    });\n+    const document = await Document.findByPk(comment.documentId, {\n+      userId: user.id,\n+    });\n+    authorize(user, \"resolve\", comment);\n+    authorize(user, \"update\", document);\n+\n+    comment.resolve(user);\n+    const changes = comment.changeset;\n+    await comment.save({ transaction });\n+\n+    await Event.createFromContext(\n+      ctx,\n+      {\n+        name: \"comments.update\",\n+        modelId: comment.id,\n+        documentId: comment.documentId,\n+        changes,\n+      },\n+      { transaction }\n+    );\n+\n+    ctx.body = {\n+      data: presentComment(comment),\n+      policies: presentPolicies(user, [comment]),\n+    };\n+  }\n+);\n+\n+router.post(\n+  \"comments.unresolve\",\n+  auth(),\n+  feature(TeamPreference.Commenting),\n+  validate(T.CommentsUnresolveSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.CommentsUnresolveReq>) => {\n+    const { id } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n \n-// router.post(\"comments.resolve\", auth(), async (ctx) => {\n-// router.post(\"comments.unresolve\", auth(), async (ctx) => {\n+    const comment = await Comment.findByPk(id, {\n+      transaction,\n+      rejectOnEmpty: true,\n+      lock: {\n+        level: transaction.LOCK.UPDATE,\n+        of: Comment,\n+      },\n+    });\n+    const document = await Document.findByPk(comment.documentId, {\n+      userId: user.id,\n+    });\n+    authorize(user, \"unresolve\", comment);\n+    authorize(user, \"update\", document);\n+\n+    comment.unresolve();\n+    const changes = comment.changeset;\n+    await comment.save({ transaction });\n+\n+    await Event.createFromContext(\n+      ctx,\n+      {\n+        name: \"comments.update\",\n+        modelId: comment.id,\n+        documentId: comment.documentId,\n+        changes,\n+      },\n+      { transaction }\n+    );\n+\n+    ctx.body = {\n+      data: presentComment(comment),\n+      policies: presentPolicies(user, [comment]),\n+    };\n+  }\n+);\n \n export default router;\n\ndiff --git a/server/routes/api/comments/schema.ts b/server/routes/api/comments/schema.ts\nindex f5495766cecf..a9b16b36d4c1 100644\n--- a/server/routes/api/comments/schema.ts\n+++ b/server/routes/api/comments/schema.ts\n@@ -1,4 +1,5 @@\n import { z } from \"zod\";\n+import { CommentStatusFilter } from \"@shared/types\";\n import { BaseSchema, ProsemirrorSchema } from \"@server/routes/api/schema\";\n \n const BaseIdSchema = z.object({\n@@ -57,7 +58,12 @@ export const CommentsListSchema = BaseSchema.extend({\n   body: CommentsSortParamsSchema.extend({\n     /** Id of a document to list comments for */\n     documentId: z.string().optional(),\n-    collectionId: z.string().uuid().optional(),\n+    /** Id of a collection to list comments for */\n+    collectionId: z.string().optional(),\n+    /** Id of a parent comment to list comments for */\n+    parentCommentId: z.string().uuid().optional(),\n+    /** Comment statuses to include in results */\n+    statusFilter: z.nativeEnum(CommentStatusFilter).array().optional(),\n   }),\n });\n \n@@ -68,3 +74,15 @@ export const CommentsInfoSchema = z.object({\n });\n \n export type CommentsInfoReq = z.infer<typeof CommentsInfoSchema>;\n+\n+export const CommentsResolveSchema = z.object({\n+  body: BaseIdSchema,\n+});\n+\n+export type CommentsResolveReq = z.infer<typeof CommentsResolveSchema>;\n+\n+export const CommentsUnresolveSchema = z.object({\n+  body: BaseIdSchema,\n+});\n+\n+export type CommentsUnresolveReq = z.infer<typeof CommentsUnresolveSchema>;\n\ndiff --git a/shared/editor/commands/addMark.ts b/shared/editor/commands/addMark.ts\nnew file mode 100644\nindex 000000000000..ef879e333a0a\n--- /dev/null\n+++ b/shared/editor/commands/addMark.ts\n@@ -0,0 +1,20 @@\n+import { Attrs, MarkType } from \"prosemirror-model\";\n+import { Command } from \"prosemirror-state\";\n+\n+/**\n+ * A prosemirror command to create a mark at the current selection.\n+ *\n+ * @returns A prosemirror command.\n+ */\n+export const addMark =\n+  (type: MarkType, attrs?: Attrs | null): Command =>\n+  (state, dispatch) => {\n+    dispatch?.(\n+      state.tr.addMark(\n+        state.selection.from,\n+        state.selection.to,\n+        type.create(attrs)\n+      )\n+    );\n+    return true;\n+  };\n\ndiff --git a/shared/editor/commands/collapseSelection.ts b/shared/editor/commands/collapseSelection.ts\nindex 8467c0046355..aabb106c1743 100644\n--- a/shared/editor/commands/collapseSelection.ts\n+++ b/shared/editor/commands/collapseSelection.ts\n@@ -1,6 +1,11 @@\n import { Command, TextSelection } from \"prosemirror-state\";\n \n-const collapseSelection = (): Command => (state, dispatch) => {\n+/**\n+ * A prosemirror command to collapse the current selection to a cursor at the start of the selection.\n+ *\n+ * @returns A prosemirror command.\n+ */\n+export const collapseSelection = (): Command => (state, dispatch) => {\n   dispatch?.(\n     state.tr.setSelection(\n       TextSelection.create(state.doc, state.tr.selection.from)\n@@ -8,5 +13,3 @@ const collapseSelection = (): Command => (state, dispatch) => {\n   );\n   return true;\n };\n-\n-export default collapseSelection;\n\ndiff --git a/shared/editor/commands/table.ts b/shared/editor/commands/table.ts\nindex c83592a39357..59e05260a330 100644\n--- a/shared/editor/commands/table.ts\n+++ b/shared/editor/commands/table.ts\n@@ -14,7 +14,7 @@ import {\n import { chainTransactions } from \"../lib/chainTransactions\";\n import { getCellsInColumn, isHeaderEnabled } from \"../queries/table\";\n import { TableLayout } from \"../types\";\n-import collapseSelection from \"./collapseSelection\";\n+import { collapseSelection } from \"./collapseSelection\";\n \n export function createTable({\n   rowsCount,\n\ndiff --git a/shared/editor/components/Styles.ts b/shared/editor/components/Styles.ts\nindex 4a4a4aa36e8c..9567dab95404 100644\n--- a/shared/editor/components/Styles.ts\n+++ b/shared/editor/components/Styles.ts\n@@ -857,14 +857,16 @@ h6 {\n   opacity: 1;\n }\n \n-.comment-marker {\n-  border-bottom: 2px solid ${props.theme.commentMarkBackground};\n-  transition: background 100ms ease-in-out;\n-  border-radius: 2px;\n+.${EditorStyleHelper.comment} {\n+  &:not([data-resolved]) {\n+    border-bottom: 2px solid ${props.theme.commentMarkBackground};\n+    transition: background 100ms ease-in-out;\n+    border-radius: 2px;\n \n-  &:hover {\n-    ${props.readOnly ? \"cursor: var(--pointer);\" : \"\"}\n-    background: ${props.theme.commentMarkBackground};\n+    &:hover {\n+      ${props.readOnly ? \"cursor: var(--pointer);\" : \"\"}\n+      background: ${props.theme.commentMarkBackground};\n+    }\n   }\n }\n \n@@ -1768,7 +1770,7 @@ del[data-operation-index] {\n     page-break-inside: avoid;\n   }\n \n-  .comment-marker {\n+  .${EditorStyleHelper.comment} {\n     border: 0;\n     background: none;\n   }\n\ndiff --git a/shared/editor/marks/Comment.ts b/shared/editor/marks/Comment.ts\nindex 84fac3518382..d3a511e90850 100644\n--- a/shared/editor/marks/Comment.ts\n+++ b/shared/editor/marks/Comment.ts\n@@ -2,9 +2,11 @@ import { toggleMark } from \"prosemirror-commands\";\n import { MarkSpec, MarkType, Schema, Mark as PMMark } from \"prosemirror-model\";\n import { Command, Plugin } from \"prosemirror-state\";\n import { v4 as uuidv4 } from \"uuid\";\n-import collapseSelection from \"../commands/collapseSelection\";\n+import { addMark } from \"../commands/addMark\";\n+import { collapseSelection } from \"../commands/collapseSelection\";\n import { chainTransactions } from \"../lib/chainTransactions\";\n import { isMarkActive } from \"../queries/isMarkActive\";\n+import { EditorStyleHelper } from \"../styles/EditorStyleHelper\";\n import Mark from \"./Mark\";\n \n export default class Comment extends Mark {\n@@ -17,11 +19,14 @@ export default class Comment extends Mark {\n       attrs: {\n         id: {},\n         userId: {},\n+        resolved: {\n+          default: false,\n+        },\n       },\n       inclusive: false,\n       parseDOM: [\n         {\n-          tag: \"span.comment-marker\",\n+          tag: `.${EditorStyleHelper.comment}`,\n           getAttrs: (dom: HTMLSpanElement) => {\n             // Ignore comment markers from other documents\n             const documentId = dom.getAttribute(\"data-document-id\");\n@@ -32,6 +37,7 @@ export default class Comment extends Mark {\n             return {\n               id: dom.getAttribute(\"id\")?.replace(\"comment-\", \"\"),\n               userId: dom.getAttribute(\"data-user-id\"),\n+              resolved: !!dom.getAttribute(\"data-resolved\"),\n             };\n           },\n         },\n@@ -39,8 +45,9 @@ export default class Comment extends Mark {\n       toDOM: (node) => [\n         \"span\",\n         {\n-          class: \"comment-marker\",\n+          class: EditorStyleHelper.comment,\n           id: `comment-${node.attrs.id}`,\n+          \"data-resolved\": node.attrs.resolved ? \"true\" : undefined,\n           \"data-user-id\": node.attrs.userId,\n           \"data-document-id\": this.editor?.props.id,\n         },\n@@ -56,7 +63,11 @@ export default class Comment extends Mark {\n     return this.options.onCreateCommentMark\n       ? {\n           \"Mod-Alt-m\": (state, dispatch) => {\n-            if (isMarkActive(state.schema.marks.comment)(state)) {\n+            if (\n+              isMarkActive(state.schema.marks.comment, { resolved: false })(\n+                state\n+              )\n+            ) {\n               return false;\n             }\n \n@@ -77,12 +88,14 @@ export default class Comment extends Mark {\n   commands({ type }: { type: MarkType; schema: Schema }) {\n     return this.options.onCreateCommentMark\n       ? (): Command => (state, dispatch) => {\n-          if (isMarkActive(state.schema.marks.comment)(state)) {\n+          if (\n+            isMarkActive(state.schema.marks.comment, { resolved: false })(state)\n+          ) {\n             return false;\n           }\n \n           chainTransactions(\n-            toggleMark(type, {\n+            addMark(type, {\n               id: uuidv4(),\n               userId: this.options.userId,\n             }),\n@@ -152,13 +165,16 @@ export default class Comment extends Mark {\n                 return false;\n               }\n \n-              const comment = event.target.closest(\".comment-marker\");\n+              const comment = event.target.closest(\n+                `.${EditorStyleHelper.comment}`\n+              );\n               if (!comment) {\n                 return false;\n               }\n \n               const commentId = comment.id.replace(\"comment-\", \"\");\n-              if (commentId) {\n+              const resolved = comment.getAttribute(\"data-resolved\");\n+              if (commentId && !resolved) {\n                 this.options?.onClickCommentMark?.(commentId);\n               }\n \n\ndiff --git a/shared/editor/styles/EditorStyleHelper.ts b/shared/editor/styles/EditorStyleHelper.ts\nindex f4fabb091d0e..237fe4f098c9 100644\n--- a/shared/editor/styles/EditorStyleHelper.ts\n+++ b/shared/editor/styles/EditorStyleHelper.ts\n@@ -2,6 +2,10 @@\n  * Class names and values used by the editor.\n  */\n export class EditorStyleHelper {\n+  // Comments\n+\n+  static readonly comment = \"comment-marker\";\n+\n   // Tables\n \n   /** Table wrapper */\n@@ -34,6 +38,8 @@ export class EditorStyleHelper {\n   /** Shadow on the left side of the table */\n   static readonly tableShadowLeft = \"table-shadow-left\";\n \n+  // Global\n+\n   /** Minimum padding around editor */\n   static readonly padding = 32;\n \n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 1fea3f1205f3..68810678c91a 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -14,6 +14,10 @@\n   \"Delete\": \"Delete\",\n   \"Delete collection\": \"Delete collection\",\n   \"New template\": \"New template\",\n+  \"Delete comment\": \"Delete comment\",\n+  \"Mark as resolved\": \"Mark as resolved\",\n+  \"Thread resolved\": \"Thread resolved\",\n+  \"Mark as unresolved\": \"Mark as unresolved\",\n   \"Copy ID\": \"Copy ID\",\n   \"Clear IndexedDB cache\": \"Clear IndexedDB cache\",\n   \"IndexedDB cache cleared\": \"IndexedDB cache cleared\",\n@@ -469,7 +473,6 @@\n   \"Sort in sidebar\": \"Sort in sidebar\",\n   \"Alphabetical sort\": \"Alphabetical sort\",\n   \"Manual sort\": \"Manual sort\",\n-  \"Delete comment\": \"Delete comment\",\n   \"Comment options\": \"Comment options\",\n   \"Document restored\": \"Document restored\",\n   \"Document options\": \"Document options\",\n@@ -551,6 +554,10 @@\n   \"Post\": \"Post\",\n   \"Cancel\": \"Cancel\",\n   \"Upload image\": \"Upload image\",\n+  \"Resolved comments\": \"Resolved comments\",\n+  \"View comments\": \"View comments\",\n+  \"View resolved comments\": \"View resolved comments\",\n+  \"No resolved comments\": \"No resolved comments\",\n   \"No comments yet\": \"No comments yet\",\n   \"Error updating comment\": \"Error updating comment\",\n   \"Images are still uploading.\\nAre you sure you want to discard them?\": \"Images are still uploading.\\nAre you sure you want to discard them?\",\n@@ -700,6 +707,7 @@\n   \"Publish document and exit\": \"Publish document and exit\",\n   \"Save document\": \"Save document\",\n   \"Cancel editing\": \"Cancel editing\",\n+  \"Collaboration\": \"Collaboration\",\n   \"Formatting\": \"Formatting\",\n   \"Paragraph\": \"Paragraph\",\n   \"Large header\": \"Large header\",\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex 73f90e8d0c04..031bc79b9273 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -13,6 +13,11 @@ export enum StatusFilter {\n   Draft = \"draft\",\n }\n \n+export enum CommentStatusFilter {\n+  Resolved = \"resolved\",\n+  Unresolved = \"unresolved\",\n+}\n+\n export enum Client {\n   Web = \"web\",\n   Desktop = \"desktop\",\n\ndiff --git a/yarn.lock b/yarn.lock\nindex ce96c453cd5d..3120f5962f25 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -8151,54 +8151,7 @@ error-ex@^1.3.1:\n   dependencies:\n     is-arrayish \"^0.2.1\"\n \n-es-abstract@^1.22.1, es-abstract@^1.22.3:\n-  version \"1.22.5\"\n-  resolved \"https://registry.yarnpkg.com/es-abstract/-/es-abstract-1.22.5.tgz#1417df4e97cc55f09bf7e58d1e614bc61cb8df46\"\n-  integrity sha512-oW69R+4q2wG+Hc3KZePPZxOiisRIqfKBVo/HLx94QcJeWGU/8sZhCvc829rd1kS366vlJbzBfXf9yWwf0+Ko7w==\n-  dependencies:\n-    array-buffer-byte-length \"^1.0.1\"\n-    arraybuffer.prototype.slice \"^1.0.3\"\n-    available-typed-arrays \"^1.0.7\"\n-    call-bind \"^1.0.7\"\n-    es-define-property \"^1.0.0\"\n-    es-errors \"^1.3.0\"\n-    es-set-tostringtag \"^2.0.3\"\n-    es-to-primitive \"^1.2.1\"\n-    function.prototype.name \"^1.1.6\"\n-    get-intrinsic \"^1.2.4\"\n-    get-symbol-description \"^1.0.2\"\n-    globalthis \"^1.0.3\"\n-    gopd \"^1.0.1\"\n-    has-property-descriptors \"^1.0.2\"\n-    has-proto \"^1.0.3\"\n-    has-symbols \"^1.0.3\"\n-    hasown \"^2.0.1\"\n-    internal-slot \"^1.0.7\"\n-    is-array-buffer \"^3.0.4\"\n-    is-callable \"^1.2.7\"\n-    is-negative-zero \"^2.0.3\"\n-    is-regex \"^1.1.4\"\n-    is-shared-array-buffer \"^1.0.3\"\n-    is-string \"^1.0.7\"\n-    is-typed-array \"^1.1.13\"\n-    is-weakref \"^1.0.2\"\n-    object-inspect \"^1.13.1\"\n-    object-keys \"^1.1.1\"\n-    object.assign \"^4.1.5\"\n-    regexp.prototype.flags \"^1.5.2\"\n-    safe-array-concat \"^1.1.0\"\n-    safe-regex-test \"^1.0.3\"\n-    string.prototype.trim \"^1.2.8\"\n-    string.prototype.trimend \"^1.0.7\"\n-    string.prototype.trimstart \"^1.0.7\"\n-    typed-array-buffer \"^1.0.2\"\n-    typed-array-byte-length \"^1.0.1\"\n-    typed-array-byte-offset \"^1.0.2\"\n-    typed-array-length \"^1.0.5\"\n-    unbox-primitive \"^1.0.2\"\n-    which-typed-array \"^1.1.14\"\n-\n-es-abstract@^1.23.0, es-abstract@^1.23.2, es-abstract@^1.23.3:\n+es-abstract@^1.22.1, es-abstract@^1.22.3, es-abstract@^1.23.0, es-abstract@^1.23.2, es-abstract@^1.23.3:\n   version \"1.23.3\"\n   resolved \"https://registry.yarnpkg.com/es-abstract/-/es-abstract-1.23.3.tgz#8f0c5a35cd215312573c5a27c87dfd6c881a0aa0\"\n   integrity sha512-e+HfNH61Bj1X9/jLc5v1owaLYuHdeHHSQlkhCBiTK8rBvKaULl/beGMxwrMXjpYrv4pz22BlY570vVePA2ho4A==\n@@ -12384,10 +12337,10 @@ os-tmpdir@~1.0.2:\n   resolved \"https://registry.yarnpkg.com/os-tmpdir/-/os-tmpdir-1.0.2.tgz#bbe67406c79aa85c5cfec766fe5734555dfa1274\"\n   integrity \"sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ= sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==\"\n \n-outline-icons@^3.4.1:\n-  version \"3.4.1\"\n-  resolved \"https://registry.yarnpkg.com/outline-icons/-/outline-icons-3.4.1.tgz#2a7c17f7d2b132359a6cc00f449371fa0adb3450\"\n-  integrity sha512-H6FRWVLNammxqNpA1n5ktN4T6eAhuLyTI6A8d0mukkz7y/CDCWiffcLetlWhZf9m/jv/EU8ZCOwVSY3CmVeU6Q==\n+outline-icons@^3.5.0:\n+  version \"3.5.0\"\n+  resolved \"https://registry.yarnpkg.com/outline-icons/-/outline-icons-3.5.0.tgz#acc3896a3f0eae2ab70fe693d1d1a924cced6e0f\"\n+  integrity sha512-zZAbnR6gjXI4KLEmVj3EsdrlVG3YXBmZ1clY5O1zI5LfaLXQvUAThV/z5MxZpMwcNVYOZMRyXv/W1Sy0TNwCsA==\n \n oy-vey@^0.12.1:\n   version \"0.12.1\"\n@@ -14106,16 +14059,7 @@ set-function-length@^1.2.1:\n     gopd \"^1.0.1\"\n     has-property-descriptors \"^1.0.2\"\n \n-set-function-name@^2.0.1:\n-  version \"2.0.1\"\n-  resolved \"https://registry.yarnpkg.com/set-function-name/-/set-function-name-2.0.1.tgz#12ce38b7954310b9f61faa12701620a0c882793a\"\n-  integrity \"sha1-Es44t5VDELn2H6oScBYgoMiCeTo= sha512-tMNCiqYVkXIZgc2Hnoy2IvC/f8ezc5koaRFkCjrpWzGpCd3qbZXPzVy9MAZzK1ch/X0jvSkojys3oqJN0qCmdA==\"\n-  dependencies:\n-    define-data-property \"^1.0.1\"\n-    functions-have-names \"^1.2.3\"\n-    has-property-descriptors \"^1.0.0\"\n-\n-set-function-name@^2.0.2:\n+set-function-name@^2.0.1, set-function-name@^2.0.2:\n   version \"2.0.2\"\n   resolved \"https://registry.yarnpkg.com/set-function-name/-/set-function-name-2.0.2.tgz#16a705c5a0dc2f5e638ca96d8a8cd4e1c2b90985\"\n   integrity sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==\n@@ -14167,16 +14111,7 @@ shell-quote@^1.8.1:\n   resolved \"https://registry.yarnpkg.com/shell-quote/-/shell-quote-1.8.1.tgz#6dbf4db75515ad5bac63b4f1894c3a154c766680\"\n   integrity sha512-6j1W9l1iAs/4xYBI1SYOVZyFcCis9b4KCLQ8fgAGG07QvzaRLVVRQvAy85yNmmZSjYjg4MWh4gNvlPujU/5LpA==\n \n-side-channel@^1.0.4:\n-  version \"1.0.4\"\n-  resolved \"https://registry.yarnpkg.com/side-channel/-/side-channel-1.0.4.tgz#efce5c8fdc104ee751b25c58d4290011fa5ea2cf\"\n-  integrity \"sha1-785cj9wQTudRslxY1CkAEfpeos8= sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==\"\n-  dependencies:\n-    call-bind \"^1.0.0\"\n-    get-intrinsic \"^1.0.2\"\n-    object-inspect \"^1.9.0\"\n-\n-side-channel@^1.0.6:\n+side-channel@^1.0.4, side-channel@^1.0.6:\n   version \"1.0.6\"\n   resolved \"https://registry.yarnpkg.com/side-channel/-/side-channel-1.0.6.tgz#abd25fb7cd24baf45466406b1096b7831c9215f2\"\n   integrity sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==\n@@ -14527,16 +14462,7 @@ string.prototype.matchall@^4.0.11, string.prototype.matchall@^4.0.6:\n     set-function-name \"^2.0.2\"\n     side-channel \"^1.0.6\"\n \n-string.prototype.trim@^1.2.8:\n-  version \"1.2.8\"\n-  resolved \"https://registry.yarnpkg.com/string.prototype.trim/-/string.prototype.trim-1.2.8.tgz#f9ac6f8af4bd55ddfa8895e6aea92a96395393bd\"\n-  integrity sha512-lfjY4HcixfQXOfaqCvcBuOIapyaroTXhbkfJN3gcB1OtyupngWK4sEET9Knd0cXd28kTUqu/kHoV4HKSJdnjiQ==\n-  dependencies:\n-    call-bind \"^1.0.2\"\n-    define-properties \"^1.2.0\"\n-    es-abstract \"^1.22.1\"\n-\n-string.prototype.trim@^1.2.9:\n+string.prototype.trim@^1.2.8, string.prototype.trim@^1.2.9:\n   version \"1.2.9\"\n   resolved \"https://registry.yarnpkg.com/string.prototype.trim/-/string.prototype.trim-1.2.9.tgz#b6fa326d72d2c78b6df02f7759c73f8f6274faa4\"\n   integrity sha512-klHuCNxiMZ8MlsOihJhJEBJAiMVqU3Z2nEXWfWnIqjN0gEFS9J9+IxKozWWtQGcgoa1WUZzLjKPTr4ZHNFTFxw==\n@@ -14546,16 +14472,7 @@ string.prototype.trim@^1.2.9:\n     es-abstract \"^1.23.0\"\n     es-object-atoms \"^1.0.0\"\n \n-string.prototype.trimend@^1.0.7:\n-  version \"1.0.7\"\n-  resolved \"https://registry.yarnpkg.com/string.prototype.trimend/-/string.prototype.trimend-1.0.7.tgz#1bb3afc5008661d73e2dc015cd4853732d6c471e\"\n-  integrity sha512-Ni79DqeB72ZFq1uH/L6zJ+DKZTkOtPIHovb3YZHQViE+HDouuU4mBrLOLDn5Dde3RF8qw5qVETEjhu9locMLvA==\n-  dependencies:\n-    call-bind \"^1.0.2\"\n-    define-properties \"^1.2.0\"\n-    es-abstract \"^1.22.1\"\n-\n-string.prototype.trimend@^1.0.8:\n+string.prototype.trimend@^1.0.7, string.prototype.trimend@^1.0.8:\n   version \"1.0.8\"\n   resolved \"https://registry.yarnpkg.com/string.prototype.trimend/-/string.prototype.trimend-1.0.8.tgz#3651b8513719e8a9f48de7f2f77640b26652b229\"\n   integrity sha512-p73uL5VCHCO2BZZ6krwwQE3kCzM7NKmis8S//xEC6fQonchbum4eP6kR4DLEjQFO3Wnj3Fuo8NM0kOSjVdHjZQ==\n@@ -14564,16 +14481,7 @@ string.prototype.trimend@^1.0.8:\n     define-properties \"^1.2.1\"\n     es-object-atoms \"^1.0.0\"\n \n-string.prototype.trimstart@^1.0.7:\n-  version \"1.0.7\"\n-  resolved \"https://registry.yarnpkg.com/string.prototype.trimstart/-/string.prototype.trimstart-1.0.7.tgz#d4cdb44b83a4737ffbac2d406e405d43d0184298\"\n-  integrity sha512-NGhtDFu3jCEm7B4Fy0DpLewdJQOZcQ0rGbwQ/+stjnrp2i+rlKeCvos9hOIeCmqwratM47OBxY7uFZzjxHXmrg==\n-  dependencies:\n-    call-bind \"^1.0.2\"\n-    define-properties \"^1.2.0\"\n-    es-abstract \"^1.22.1\"\n-\n-string.prototype.trimstart@^1.0.8:\n+string.prototype.trimstart@^1.0.7, string.prototype.trimstart@^1.0.8:\n   version \"1.0.8\"\n   resolved \"https://registry.yarnpkg.com/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz#7ee834dda8c7c17eff3118472bb35bfedaa34dde\"\n   integrity sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==\n@@ -15168,19 +15076,7 @@ typed-array-byte-offset@^1.0.2:\n     has-proto \"^1.0.3\"\n     is-typed-array \"^1.1.13\"\n \n-typed-array-length@^1.0.5:\n-  version \"1.0.5\"\n-  resolved \"https://registry.yarnpkg.com/typed-array-length/-/typed-array-length-1.0.5.tgz#57d44da160296d8663fd63180a1802ebf25905d5\"\n-  integrity sha512-yMi0PlwuznKHxKmcpoOdeLwxBoVPkqZxd7q2FgMkmD3bNwvF5VW0+UlUQ1k1vmktTu4Yu13Q0RIxEP8+B+wloA==\n-  dependencies:\n-    call-bind \"^1.0.7\"\n-    for-each \"^0.3.3\"\n-    gopd \"^1.0.1\"\n-    has-proto \"^1.0.3\"\n-    is-typed-array \"^1.1.13\"\n-    possible-typed-array-names \"^1.0.0\"\n-\n-typed-array-length@^1.0.6:\n+typed-array-length@^1.0.5, typed-array-length@^1.0.6:\n   version \"1.0.6\"\n   resolved \"https://registry.yarnpkg.com/typed-array-length/-/typed-array-length-1.0.6.tgz#57155207c76e64a3457482dfdc1c9d1d3c4c73a3\"\n   integrity sha512-/OxDN6OtAk5KBpGb28T+HZc2M+ADtvRxXrKKbUwtsLgdoxgX13hyy7ek6bFRl5+aBs2yZzB0c4CnQfAtVypW/g==\n",
    "test_patch": "diff --git a/server/routes/api/comments/__snapshots__/comments.test.ts.snap b/server/routes/api/comments/__snapshots__/comments.test.ts.snap\nindex dfb06a20afd2..549f072d4b69 100644\n--- a/server/routes/api/comments/__snapshots__/comments.test.ts.snap\n+++ b/server/routes/api/comments/__snapshots__/comments.test.ts.snap\n@@ -26,3 +26,30 @@ exports[`#comments.list should require authentication 1`] = `\n   \"status\": 401,\n }\n `;\n+\n+exports[`#comments.resolve should require authentication 1`] = `\n+{\n+  \"error\": \"authentication_required\",\n+  \"message\": \"Authentication required\",\n+  \"ok\": false,\n+  \"status\": 401,\n+}\n+`;\n+\n+exports[`#comments.unresolve should require authentication 1`] = `\n+{\n+  \"error\": \"authentication_required\",\n+  \"message\": \"Authentication required\",\n+  \"ok\": false,\n+  \"status\": 401,\n+}\n+`;\n+\n+exports[`#comments.update should require authentication 1`] = `\n+{\n+  \"error\": \"authentication_required\",\n+  \"message\": \"Authentication required\",\n+  \"ok\": false,\n+  \"status\": 401,\n+}\n+`;\n\ndiff --git a/server/routes/api/comments/comments.test.ts b/server/routes/api/comments/comments.test.ts\nindex b214a6202af2..21703f2a8d87 100644\n--- a/server/routes/api/comments/comments.test.ts\n+++ b/server/routes/api/comments/comments.test.ts\n@@ -1,8 +1,10 @@\n+import { CommentStatusFilter } from \"@shared/types\";\n import {\n   buildAdmin,\n   buildCollection,\n   buildComment,\n   buildDocument,\n+  buildResolvedComment,\n   buildTeam,\n   buildUser,\n } from \"@server/test/factories\";\n@@ -10,6 +12,73 @@ import { getTestServer } from \"@server/test/support\";\n \n const server = getTestServer();\n \n+describe(\"#comments.info\", () => {\n+  it(\"should require authentication\", async () => {\n+    const res = await server.post(\"/api/comments.info\");\n+    const body = await res.json();\n+    expect(res.status).toEqual(401);\n+    expect(body).toMatchSnapshot();\n+  });\n+\n+  it(\"should return comment info\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const user2 = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user2.id,\n+      documentId: document.id,\n+    });\n+    const res = await server.post(\"/api/comments.info\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.id).toEqual(comment.id);\n+    expect(body.data.data).toEqual(comment.data);\n+    expect(body.policies.length).toEqual(1);\n+    expect(body.policies[0].abilities.read).toEqual(true);\n+    expect(body.policies[0].abilities.update).toEqual(false);\n+    expect(body.policies[0].abilities.delete).toEqual(false);\n+  });\n+\n+  it(\"should return comment info for admin\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildAdmin({ teamId: team.id });\n+    const user2 = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user2.id,\n+      documentId: document.id,\n+    });\n+    const res = await server.post(\"/api/comments.info\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.id).toEqual(comment.id);\n+    expect(body.data.data).toEqual(comment.data);\n+    expect(body.policies.length).toEqual(1);\n+    expect(body.policies[0].abilities.read).toEqual(true);\n+    expect(body.policies[0].abilities.update).toEqual(true);\n+    expect(body.policies[0].abilities.delete).toEqual(true);\n+  });\n+});\n+\n describe(\"#comments.list\", () => {\n   it(\"should require authentication\", async () => {\n     const res = await server.post(\"/api/comments.list\");\n@@ -29,6 +98,10 @@ describe(\"#comments.list\", () => {\n       userId: user.id,\n       documentId: document.id,\n     });\n+    await buildResolvedComment(user, {\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n     const res = await server.post(\"/api/comments.list\", {\n       body: {\n         token: user.getJwtToken(),\n@@ -38,13 +111,14 @@ describe(\"#comments.list\", () => {\n     const body = await res.json();\n \n     expect(res.status).toEqual(200);\n-    expect(body.data.length).toEqual(1);\n-    expect(body.data[0].id).toEqual(comment.id);\n-    expect(body.policies.length).toEqual(1);\n+    expect(body.data.length).toEqual(2);\n+    expect(body.data[1].id).toEqual(comment.id);\n+    expect(body.policies.length).toEqual(2);\n     expect(body.policies[0].abilities.read).toEqual(true);\n+    expect(body.policies[1].abilities.read).toEqual(true);\n   });\n \n-  it(\"should return all comments for a collection\", async () => {\n+  it(\"should return unresolved comments for a collection\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n     const collection = await buildCollection({\n@@ -75,7 +149,71 @@ describe(\"#comments.list\", () => {\n     expect(body.policies[0].abilities.read).toEqual(true);\n   });\n \n-  it(\"should return all comments\", async () => {\n+  it(\"should return unresolved comments for a parentCommentId\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    const childComment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+      parentCommentId: comment.id,\n+    });\n+    const res = await server.post(\"/api/comments.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        parentCommentId: comment.id,\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(1);\n+    expect(body.data[0].id).toEqual(childComment.id);\n+    expect(body.policies.length).toEqual(1);\n+    expect(body.policies[0].abilities.read).toEqual(true);\n+  });\n+\n+  it(\"should return resolved comments for a statusFilter\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    const resolved = await buildResolvedComment(user, {\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    const res = await server.post(\"/api/comments.list\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        statusFilter: [CommentStatusFilter.Resolved],\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(1);\n+    expect(body.data[0].id).toEqual(resolved.id);\n+    expect(body.policies.length).toEqual(1);\n+    expect(body.policies[0].abilities.read).toEqual(true);\n+    expect(body.policies[0].abilities.unresolve).toEqual(true);\n+    expect(body.policies[0].abilities.resolve).toEqual(false);\n+  });\n+\n+  it(\"should return all unresolved comments\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n     const collection1 = await buildCollection({\n@@ -201,56 +339,67 @@ describe(\"#comments.create\", () => {\n   });\n });\n \n-describe(\"#comments.info\", () => {\n+describe(\"#comments.update\", () => {\n   it(\"should require authentication\", async () => {\n-    const res = await server.post(\"/api/comments.info\");\n+    const res = await server.post(\"/api/comments.update\");\n     const body = await res.json();\n     expect(res.status).toEqual(401);\n     expect(body).toMatchSnapshot();\n   });\n \n-  it(\"should return comment info\", async () => {\n+  it(\"should update an existing comment\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n-    const user2 = await buildUser({ teamId: team.id });\n     const document = await buildDocument({\n       userId: user.id,\n       teamId: user.teamId,\n     });\n+\n     const comment = await buildComment({\n-      userId: user2.id,\n+      userId: user.id,\n       documentId: document.id,\n     });\n-    const res = await server.post(\"/api/comments.info\", {\n+\n+    const res = await server.post(\"/api/comments.update\", {\n       body: {\n         token: user.getJwtToken(),\n         id: comment.id,\n+        data: comment.data,\n       },\n     });\n     const body = await res.json();\n \n     expect(res.status).toEqual(200);\n-    expect(body.data.id).toEqual(comment.id);\n     expect(body.data.data).toEqual(comment.data);\n     expect(body.policies.length).toEqual(1);\n     expect(body.policies[0].abilities.read).toEqual(true);\n-    expect(body.policies[0].abilities.update).toEqual(false);\n-    expect(body.policies[0].abilities.delete).toEqual(false);\n+    expect(body.policies[0].abilities.update).toEqual(true);\n+    expect(body.policies[0].abilities.delete).toEqual(true);\n   });\n+});\n \n-  it(\"should return comment info for admin\", async () => {\n+describe(\"#comments.resolve\", () => {\n+  it(\"should require authentication\", async () => {\n+    const res = await server.post(\"/api/comments.resolve\");\n+    const body = await res.json();\n+    expect(res.status).toEqual(401);\n+    expect(body).toMatchSnapshot();\n+  });\n+\n+  it(\"should allow resolving a comment thread\", async () => {\n     const team = await buildTeam();\n-    const user = await buildAdmin({ teamId: team.id });\n-    const user2 = await buildUser({ teamId: team.id });\n+    const user = await buildUser({ teamId: team.id });\n     const document = await buildDocument({\n       userId: user.id,\n       teamId: user.teamId,\n     });\n+\n     const comment = await buildComment({\n-      userId: user2.id,\n+      userId: user.id,\n       documentId: document.id,\n     });\n-    const res = await server.post(\"/api/comments.info\", {\n+\n+    const res = await server.post(\"/api/comments.resolve\", {\n       body: {\n         token: user.getJwtToken(),\n         id: comment.id,\n@@ -259,11 +408,84 @@ describe(\"#comments.info\", () => {\n     const body = await res.json();\n \n     expect(res.status).toEqual(200);\n-    expect(body.data.id).toEqual(comment.id);\n-    expect(body.data.data).toEqual(comment.data);\n+    expect(body.data.resolvedAt).toBeTruthy();\n+    expect(body.data.resolvedById).toEqual(user.id);\n+    expect(body.data.resolvedBy.id).toEqual(user.id);\n+    expect(body.policies.length).toEqual(1);\n+    expect(body.policies[0].abilities.read).toEqual(true);\n+    expect(body.policies[0].abilities.update).toEqual(true);\n+    expect(body.policies[0].abilities.delete).toEqual(true);\n+    expect(body.policies[0].abilities.unresolve).toEqual(true);\n+    expect(body.policies[0].abilities.resolve).toEqual(false);\n+  });\n+\n+  it(\"should not allow resolving a child comment\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const parentComment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+      parentCommentId: parentComment.id,\n+    });\n+\n+    const res = await server.post(\"/api/comments.resolve\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+      },\n+    });\n+    expect(res.status).toEqual(403);\n+  });\n+});\n+\n+describe(\"#comments.unresolve\", () => {\n+  it(\"should require authentication\", async () => {\n+    const res = await server.post(\"/api/comments.unresolve\");\n+    const body = await res.json();\n+    expect(res.status).toEqual(401);\n+    expect(body).toMatchSnapshot();\n+  });\n+\n+  it(\"should allow unresolving a comment\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const comment = await buildResolvedComment(user, {\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+\n+    const res = await server.post(\"/api/comments.unresolve\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.resolvedAt).toEqual(null);\n+    expect(body.data.resolvedBy).toEqual(null);\n+    expect(body.data.resolvedById).toEqual(null);\n     expect(body.policies.length).toEqual(1);\n     expect(body.policies[0].abilities.read).toEqual(true);\n     expect(body.policies[0].abilities.update).toEqual(true);\n     expect(body.policies[0].abilities.delete).toEqual(true);\n+    expect(body.policies[0].abilities.resolve).toEqual(true);\n+    expect(body.policies[0].abilities.unresolve).toEqual(false);\n   });\n });\n\ndiff --git a/server/test/factories.ts b/server/test/factories.ts\nindex 929cb0672070..1d9a46e95a2e 100644\n--- a/server/test/factories.ts\n+++ b/server/test/factories.ts\n@@ -403,8 +403,12 @@ export async function buildDocument(\n export async function buildComment(overrides: {\n   userId: string;\n   documentId: string;\n+  parentCommentId?: string;\n+  resolvedById?: string;\n }) {\n   const comment = await Comment.create({\n+    resolvedById: overrides.resolvedById,\n+    parentCommentId: overrides.parentCommentId,\n     documentId: overrides.documentId,\n     data: {\n       type: \"doc\",\n@@ -427,6 +431,16 @@ export async function buildComment(overrides: {\n   return comment;\n }\n \n+export async function buildResolvedComment(\n+  user: User,\n+  overrides: Parameters<typeof buildComment>[0]\n+) {\n+  const comment = await buildComment(overrides);\n+  comment.resolve(user);\n+  await comment.save();\n+  return comment;\n+}\n+\n export async function buildFileOperation(\n   overrides: Partial<FileOperation> = {}\n ) {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7111",
    "pr_id": 7111,
    "issue_id": 7107,
    "repo": "outline/outline",
    "problem_statement": "Document becomes uneditable after changing the title (or) emoji.\nAfter changing the title (or) emoji in a document, it becomes uneditable.\r\nShare, publish, and other actions are not displayed.\r\n\r\n**To Reproduce**\r\n1. Change the title / emoji of a document.\r\n2. Verify the document is uneditable and actions are hidden.",
    "issue_word_count": 40,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "server/routes/api/documents/documents.test.ts",
      "server/routes/api/documents/documents.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/documents/documents.test.ts"
    ],
    "base_commit": "4897f001e4cb9603308221c15c96c6cdc9f89ee6",
    "head_commit": "66e1fe20b421cd84fe676c2bb3d7a38f2cc2f75b",
    "repo_url": "https://github.com/outline/outline/pull/7111",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7111",
    "dockerfile": "",
    "pr_merged_at": "2024-06-21T23:37:39.000Z",
    "patch": "diff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex fa6b7bbd8fd8..ba4a1056f581 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -996,7 +996,7 @@ router.post(\n     const { user } = ctx.state.auth;\n     let collection: Collection | null | undefined;\n \n-    const document = await Document.findByPk(id, {\n+    let document = await Document.findByPk(id, {\n       userId: user.id,\n       includeState: true,\n       transaction,\n@@ -1037,7 +1037,7 @@ router.post(\n       }\n     }\n \n-    await documentUpdater({\n+    document = await documentUpdater({\n       document,\n       user,\n       ...input,\n",
    "test_patch": "diff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex a5685ef7ed2f..793dc6b1b73f 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -3316,13 +3316,14 @@ describe(\"#documents.update\", () => {\n       body: {\n         token: user.getJwtToken(),\n         id: document.id,\n-        text: \"Changed text\",\n+        title: \"Changed text\",\n       },\n     });\n     const body = await res.json();\n     expect(res.status).toEqual(200);\n-    expect(body.data.text).toBe(\"Changed text\");\n+    expect(body.data.title).toBe(\"Changed text\");\n     expect(body.data.updatedBy.id).toBe(user.id);\n+    expect(body.policies[0].abilities.update).toEqual(true);\n   });\n \n   it(\"does not allow editing by read-only collection user\", async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7095",
    "pr_id": 7095,
    "issue_id": 7091,
    "repo": "outline/outline",
    "problem_statement": "Cannot remove logo\nCannot remove logo.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to 'Settings'\r\n2. Click on 'Details' under workspace\r\n3. Click on 'Remove' next to a previously uploaded logo\r\n\r\n**Expected behavior**\r\nThe logo is removed and reset to default\r\n\r\n**Screenshots**\r\nScreenshot of the console:\r\n![image](https://github.com/outline/outline/assets/148170019/a7ed36ea-fb54-400c-8320-97bfbde23752)\r\n\r\n\r\n**Outline (please complete the following information):**\r\n- Install: getoutline.com\r\n- Version:\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows 11\r\n - Browser: Edge, Firefox\r\n - Version: \r\n\r\n",
    "issue_word_count": 81,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "app/scenes/Settings/Details.tsx",
      "server/routes/api/teams/schema.ts",
      "server/routes/api/teams/teams.test.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/teams/teams.test.ts"
    ],
    "base_commit": "a825925a319b05a13ecf56c1c8d65bfe9f5c47e2",
    "head_commit": "095b4ef1628832e8a58fc33ef6f890237b304f0e",
    "repo_url": "https://github.com/outline/outline/pull/7095",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7095",
    "dockerfile": "",
    "pr_merged_at": "2024-06-20T00:11:54.000Z",
    "patch": "diff --git a/app/scenes/Settings/Details.tsx b/app/scenes/Settings/Details.tsx\nindex eab2ade3b0c7..1bf8a9a8a3c7 100644\n--- a/app/scenes/Settings/Details.tsx\n+++ b/app/scenes/Settings/Details.tsx\n@@ -104,7 +104,7 @@ function Details() {\n     []\n   );\n \n-  const handleAvatarChange = async (avatarUrl: string) => {\n+  const handleAvatarChange = async (avatarUrl: string | null) => {\n     await team.save({ avatarUrl });\n     toast.success(t(\"Logo updated\"));\n   };\n\ndiff --git a/server/routes/api/teams/schema.ts b/server/routes/api/teams/schema.ts\nindex 476bd4247524..5f1c1e76b1e7 100644\n--- a/server/routes/api/teams/schema.ts\n+++ b/server/routes/api/teams/schema.ts\n@@ -7,7 +7,7 @@ export const TeamsUpdateSchema = BaseSchema.extend({\n     /** Team name */\n     name: z.string().optional(),\n     /** Avatar URL */\n-    avatarUrl: z.string().optional(),\n+    avatarUrl: z.string().nullish(),\n     /** The subdomain to access the team */\n     subdomain: z.string().nullish(),\n     /** Whether public sharing is enabled */\n",
    "test_patch": "diff --git a/server/routes/api/teams/teams.test.ts b/server/routes/api/teams/teams.test.ts\nindex 5ee519f04225..44c7f3d9927f 100644\n--- a/server/routes/api/teams/teams.test.ts\n+++ b/server/routes/api/teams/teams.test.ts\n@@ -56,6 +56,34 @@ describe(\"#team.update\", () => {\n     expect(body.data.name).toEqual(name);\n   });\n \n+  it(\"should add avatar\", async () => {\n+    const team = await buildTeam();\n+    const admin = await buildAdmin({ teamId: team.id });\n+    const res = await server.post(\"/api/team.update\", {\n+      body: {\n+        token: admin.getJwtToken(),\n+        avatarUrl: \"https://random-url.com\",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.avatarUrl).toEqual(\"https://random-url.com\");\n+  });\n+\n+  it(\"should remove avatar\", async () => {\n+    const team = await buildTeam({ avatarUrl: \"https://random-url.com\" });\n+    const admin = await buildAdmin({ teamId: team.id });\n+    const res = await server.post(\"/api/team.update\", {\n+      body: {\n+        token: admin.getJwtToken(),\n+        avatarUrl: null,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.avatarUrl).toBeNull();\n+  });\n+\n   it(\"should not invalidate request if subdomain is sent as null\", async () => {\n     const admin = await buildAdmin();\n     const res = await server.post(\"/api/team.update\", {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7066",
    "pr_id": 7066,
    "issue_id": 7038,
    "repo": "outline/outline",
    "problem_statement": "feat: Unified icon picker\nCloses #6475 \r\n\r\n### What's implemented?\r\n- Unified `IconPicker` to support both Outline icons and emojis.\r\n- Allow icons and emojis to be used as collection and documents icons.\r\n\r\n### What's changed?\r\n- Custom `IconPicker` (with virtual rendering) that matches the Outline theme; supports tracking frequently used icons.\r\n- Removed dependency on `emoji-mart` picker component; we depend only on their emoji data now (useful for search).\r\n \r\n### Screen Recording\r\n\r\nhttps://github.com/outline/outline/assets/132386067/dc6d09ec-f10e-4c1a-b1f4-31a77c64e271\r\n\r\n\r\n\r\n <br>\r\nSorry, this turned out to be a bigger PR than what I anticipated.",
    "issue_word_count": 90,
    "test_files_count": 1,
    "non_test_files_count": 9,
    "pr_changed_files": [
      "server/commands/documentCreator.ts",
      "server/commands/documentDuplicator.test.ts",
      "server/commands/documentUpdater.ts",
      "server/migrations/20240617151506-add-icon-to-document.js",
      "server/models/Document.ts",
      "server/models/Revision.ts",
      "server/queues/tasks/ImportJSONTask.ts",
      "server/queues/tasks/ImportMarkdownZipTask.ts",
      "server/queues/tasks/ImportNotionTask.ts",
      "server/queues/tasks/ImportTask.ts"
    ],
    "pr_changed_test_files": [
      "server/commands/documentDuplicator.test.ts"
    ],
    "base_commit": "15a9bd225f5c1f5ac818410a57ed291c795a02df",
    "head_commit": "1c895cb4692cd3a4a81a48fae9ecf91e765a159a",
    "repo_url": "https://github.com/outline/outline/pull/7066",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7066",
    "dockerfile": "",
    "pr_merged_at": "2024-06-21T13:26:20.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7064",
    "pr_id": 7064,
    "issue_id": 6998,
    "repo": "outline/outline",
    "problem_statement": "Add API key expiry options\nIt would be nice to have some options for automatic API key expiry, GitHub is a good model here.\r\n\r\n<img width=\"388\" alt=\"image\" src=\"https://github.com/outline/outline/assets/380914/247a7232-47c4-4121-8e37-76eaf6b2fd7a\">\r\n\r\n<img width=\"149\" alt=\"image\" src=\"https://github.com/outline/outline/assets/380914/d390dd9b-5779-4574-a275-921a48b5a72f\">\r\n",
    "issue_word_count": 55,
    "test_files_count": 1,
    "non_test_files_count": 19,
    "pr_changed_files": [
      "app/actions/definitions/apiKeys.tsx",
      "app/components/InputSelect.tsx",
      "app/models/ApiKey.ts",
      "app/scenes/APIKeyNew.tsx",
      "app/scenes/ApiKeyNew/components/ExpiryDatePicker.tsx",
      "app/scenes/ApiKeyNew/index.tsx",
      "app/scenes/ApiKeyNew/utils.ts",
      "app/scenes/Settings/ApiKeys.tsx",
      "app/scenes/Settings/components/ApiKeyListItem.tsx",
      "app/utils/date.ts",
      "package.json",
      "server/middlewares/authentication.ts",
      "server/migrations/20240617030911-add-apikey-expiry.js",
      "server/models/ApiKey.ts",
      "server/presenters/apiKey.ts",
      "server/routes/api/apiKeys/apiKeys.test.ts",
      "server/routes/api/apiKeys/apiKeys.ts",
      "server/routes/api/apiKeys/schema.ts",
      "shared/i18n/locales/en_US/translation.json",
      "yarn.lock"
    ],
    "pr_changed_test_files": [
      "server/routes/api/apiKeys/apiKeys.test.ts"
    ],
    "base_commit": "15a9bd225f5c1f5ac818410a57ed291c795a02df",
    "head_commit": "1ded2e918a16de050c3e184a807275f062e8857e",
    "repo_url": "https://github.com/outline/outline/pull/7064",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7064",
    "dockerfile": "",
    "pr_merged_at": "2024-06-19T01:34:45.000Z",
    "patch": "diff --git a/app/actions/definitions/apiKeys.tsx b/app/actions/definitions/apiKeys.tsx\nindex 0252f108637c..0bb9092e321b 100644\n--- a/app/actions/definitions/apiKeys.tsx\n+++ b/app/actions/definitions/apiKeys.tsx\n@@ -1,7 +1,7 @@\n import { PlusIcon } from \"outline-icons\";\n import * as React from \"react\";\n import stores from \"~/stores\";\n-import APIKeyNew from \"~/scenes/APIKeyNew\";\n+import ApiKeyNew from \"~/scenes/ApiKeyNew\";\n import { createAction } from \"..\";\n import { SettingsSection } from \"../sections\";\n \n@@ -19,7 +19,7 @@ export const createApiKey = createAction({\n \n     stores.dialogs.openModal({\n       title: t(\"New API key\"),\n-      content: <APIKeyNew onSubmit={stores.dialogs.closeAllModals} />,\n+      content: <ApiKeyNew onSubmit={stores.dialogs.closeAllModals} />,\n     });\n   },\n });\n\ndiff --git a/app/components/InputSelect.tsx b/app/components/InputSelect.tsx\nindex eaff10d27649..012512777245 100644\n--- a/app/components/InputSelect.tsx\n+++ b/app/components/InputSelect.tsx\n@@ -50,6 +50,11 @@ export type Props = {\n   note?: React.ReactNode;\n   onChange?: (value: string | null) => void;\n   style?: React.CSSProperties;\n+  /**\n+   * Set to true if this component is rendered inside a Modal.\n+   * The Modal will take care of preventing body scroll behaviour.\n+   */\n+  skipBodyScroll?: boolean;\n };\n \n export interface InputSelectRef {\n@@ -79,6 +84,7 @@ const InputSelect = (props: Props, ref: React.RefObject<InputSelectRef>) => {\n     note,\n     icon,\n     nude,\n+    skipBodyScroll,\n     ...rest\n   } = props;\n \n@@ -91,7 +97,7 @@ const InputSelect = (props: Props, ref: React.RefObject<InputSelectRef>) => {\n   const popover = useSelectPopover({\n     ...select,\n     hideOnClickOutside: false,\n-    preventBodyScroll: true,\n+    preventBodyScroll: skipBodyScroll ? false : true,\n     disabled,\n   });\n \n@@ -220,7 +226,12 @@ const InputSelect = (props: Props, ref: React.RefObject<InputSelectRef>) => {\n             </StyledButton>\n           )}\n         </Select>\n-        <SelectPopover {...select} {...popover} aria-label={ariaLabel}>\n+        <SelectPopover\n+          {...select}\n+          {...popover}\n+          aria-label={ariaLabel}\n+          preventBodyScroll={skipBodyScroll ? false : true}\n+        >\n           {(popoverProps: InnerProps) => {\n             const topAnchor = popoverProps.style?.top === \"0\";\n             const rightAnchor = popoverProps.placement === \"bottom-end\";\n\ndiff --git a/app/models/ApiKey.ts b/app/models/ApiKey.ts\nindex fdf652d8627c..324d568f201b 100644\n--- a/app/models/ApiKey.ts\n+++ b/app/models/ApiKey.ts\n@@ -13,6 +13,10 @@ class ApiKey extends Model {\n   @observable\n   name: string;\n \n+  @Field\n+  @observable\n+  expiresAt?: string;\n+\n   secret: string;\n }\n \n\ndiff --git a/app/scenes/APIKeyNew.tsx b/app/scenes/APIKeyNew.tsx\ndeleted file mode 100644\nindex 68125cc69d83..000000000000\n--- a/app/scenes/APIKeyNew.tsx\n+++ /dev/null\n@@ -1,74 +0,0 @@\n-import * as React from \"react\";\n-import { useTranslation } from \"react-i18next\";\n-import { toast } from \"sonner\";\n-import { ApiKeyValidation } from \"@shared/validations\";\n-import Button from \"~/components/Button\";\n-import Flex from \"~/components/Flex\";\n-import Input from \"~/components/Input\";\n-import Text from \"~/components/Text\";\n-import useStores from \"~/hooks/useStores\";\n-\n-type Props = {\n-  onSubmit: () => void;\n-};\n-\n-function APIKeyNew({ onSubmit }: Props) {\n-  const [name, setName] = React.useState(\"\");\n-  const [isSaving, setIsSaving] = React.useState(false);\n-  const { apiKeys } = useStores();\n-  const { t } = useTranslation();\n-\n-  const handleSubmit = React.useCallback(\n-    async (ev: React.SyntheticEvent) => {\n-      ev.preventDefault();\n-      setIsSaving(true);\n-\n-      try {\n-        await apiKeys.create({\n-          name,\n-        });\n-        toast.success(t(\"API Key created\"));\n-        onSubmit();\n-      } catch (err) {\n-        toast.error(err.message);\n-      } finally {\n-        setIsSaving(false);\n-      }\n-    },\n-    [t, name, onSubmit, apiKeys]\n-  );\n-\n-  const handleNameChange = React.useCallback((event) => {\n-    setName(event.target.value);\n-  }, []);\n-\n-  return (\n-    <form onSubmit={handleSubmit}>\n-      <Text as=\"p\" type=\"secondary\">\n-        {t(\n-          `Name your key something that will help you to remember it's use in the future, for example \"local development\" or \"continuous integration\".`\n-        )}\n-      </Text>\n-      <Flex>\n-        <Input\n-          type=\"text\"\n-          label={t(\"Name\")}\n-          onChange={handleNameChange}\n-          value={name}\n-          minLength={ApiKeyValidation.minNameLength}\n-          maxLength={ApiKeyValidation.maxNameLength}\n-          required\n-          autoFocus\n-          flex\n-        />\n-      </Flex>\n-      <Flex justify=\"flex-end\">\n-        <Button type=\"submit\" disabled={isSaving || !name}>\n-          {isSaving ? `${t(\"Creating\")}…` : t(\"Create\")}\n-        </Button>\n-      </Flex>\n-    </form>\n-  );\n-}\n-\n-export default APIKeyNew;\n\ndiff --git a/app/scenes/ApiKeyNew/components/ExpiryDatePicker.tsx b/app/scenes/ApiKeyNew/components/ExpiryDatePicker.tsx\nnew file mode 100644\nindex 000000000000..8eb56c2de7dd\n--- /dev/null\n+++ b/app/scenes/ApiKeyNew/components/ExpiryDatePicker.tsx\n@@ -0,0 +1,100 @@\n+import { format as formatDate } from \"date-fns\";\n+import { CalendarIcon } from \"outline-icons\";\n+import React from \"react\";\n+import { DayPicker } from \"react-day-picker\";\n+import { useTranslation } from \"react-i18next\";\n+import { usePopoverState, PopoverDisclosure } from \"reakit\";\n+import styled, { useTheme } from \"styled-components\";\n+import { dateLocale } from \"@shared/utils/date\";\n+import Button from \"~/components/Button\";\n+import Popover from \"~/components/Popover\";\n+import useUserLocale from \"~/hooks/useUserLocale\";\n+\n+type Props = {\n+  selectedDate?: Date;\n+  onSelect: (date: Date) => void;\n+};\n+\n+const ExpiryDatePicker = ({ selectedDate, onSelect }: Props) => {\n+  const { t } = useTranslation();\n+  const theme = useTheme();\n+\n+  const userLocale = useUserLocale();\n+  const locale = dateLocale(userLocale);\n+\n+  const popover = usePopoverState({ gutter: 0, placement: \"right\" });\n+  const popoverContentRef = React.useRef<HTMLDivElement>(null);\n+\n+  const styles = React.useMemo(\n+    () =>\n+      ({\n+        \"--rdp-caption-font-size\": \"16px\",\n+        \"--rdp-cell-size\": \"34px\",\n+        \"--rdp-selected-text\": theme.accentText,\n+        \"--rdp-accent-color\": theme.accent,\n+        \"--rdp-accent-color-dark\": theme.accent,\n+        \"--rdp-background-color\": theme.listItemHoverBackground,\n+        \"--rdp-background-color-dark\": theme.listItemHoverBackground,\n+      } as React.CSSProperties),\n+    [theme]\n+  );\n+\n+  const handleSelect = React.useCallback(\n+    (date: Date) => {\n+      popover.hide();\n+      onSelect(date);\n+    },\n+    [popover, onSelect]\n+  );\n+\n+  return (\n+    <>\n+      <PopoverDisclosure {...popover}>\n+        {(props) => (\n+          <StyledPopoverButton {...props} icon={<Icon />} neutral>\n+            {selectedDate\n+              ? formatDate(selectedDate, \"MMM dd, yyyy\", { locale })\n+              : t(\"Choose a date\")}\n+          </StyledPopoverButton>\n+        )}\n+      </PopoverDisclosure>\n+      <Popover\n+        {...popover}\n+        ref={popoverContentRef}\n+        width={280}\n+        shrink\n+        aria-label={t(\"Choose a date\")}\n+      >\n+        <DayPicker\n+          required\n+          mode=\"single\"\n+          selected={selectedDate}\n+          onSelect={handleSelect}\n+          style={styles}\n+          disabled={{ before: new Date() }}\n+        />\n+      </Popover>\n+    </>\n+  );\n+};\n+\n+const Icon = () => (\n+  <IconWrapper>\n+    <CalendarIcon />\n+  </IconWrapper>\n+);\n+\n+const StyledPopoverButton = styled(Button)`\n+  margin-top: 12px;\n+  width: 150px;\n+`;\n+\n+const IconWrapper = styled.span`\n+  display: flex;\n+  justify-content: center;\n+  align-items: center;\n+  width: 24px;\n+  height: 24px;\n+`;\n+\n+export default ExpiryDatePicker;\n\ndiff --git a/app/scenes/ApiKeyNew/index.tsx b/app/scenes/ApiKeyNew/index.tsx\nnew file mode 100644\nindex 000000000000..0d12f3ad8d60\n--- /dev/null\n+++ b/app/scenes/ApiKeyNew/index.tsx\n@@ -0,0 +1,145 @@\n+import { endOfDay } from \"date-fns\";\n+import * as React from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import { toast } from \"sonner\";\n+import styled from \"styled-components\";\n+import { ApiKeyValidation } from \"@shared/validations\";\n+import Button from \"~/components/Button\";\n+import Flex from \"~/components/Flex\";\n+import Input from \"~/components/Input\";\n+import InputSelect, { Option } from \"~/components/InputSelect\";\n+import Text from \"~/components/Text\";\n+import useStores from \"~/hooks/useStores\";\n+import useUserLocale from \"~/hooks/useUserLocale\";\n+import { dateToExpiry } from \"~/utils/date\";\n+import \"react-day-picker/dist/style.css\";\n+import ExpiryDatePicker from \"./components/ExpiryDatePicker\";\n+import { ExpiryType, ExpiryValues, calculateExpiryDate } from \"./utils\";\n+\n+type Props = {\n+  onSubmit: () => void;\n+};\n+\n+function ApiKeyNew({ onSubmit }: Props) {\n+  const [name, setName] = React.useState(\"\");\n+  const [expiryType, setExpiryType] = React.useState<ExpiryType>(\n+    ExpiryType.Week\n+  );\n+  const currentDate = React.useRef<Date>(new Date());\n+  const [expiresAt, setExpiresAt] = React.useState<Date | undefined>(() =>\n+    calculateExpiryDate(currentDate.current, expiryType)\n+  );\n+  const [isSaving, setIsSaving] = React.useState(false);\n+\n+  const { apiKeys } = useStores();\n+  const { t } = useTranslation();\n+  const userLocale = useUserLocale();\n+\n+  const submitDisabled =\n+    isSaving || !name || (!expiresAt && expiryType !== ExpiryType.NoExpiration);\n+\n+  const expiryOptions = React.useMemo<Option[]>(\n+    () =>\n+      [...ExpiryValues.entries()].map(([expType, { label }]) => ({\n+        label,\n+        value: expType,\n+      })),\n+    []\n+  );\n+\n+  const handleNameChange = React.useCallback((event) => {\n+    setName(event.target.value);\n+  }, []);\n+\n+  const handleExpiryTypeChange = React.useCallback((value: string) => {\n+    const expiry = value as ExpiryType;\n+    setExpiryType(expiry);\n+    setExpiresAt(calculateExpiryDate(currentDate.current, expiry));\n+  }, []);\n+\n+  const handleSelectCustomDate = React.useCallback((date: Date) => {\n+    setExpiresAt(endOfDay(date));\n+  }, []);\n+\n+  const handleSubmit = React.useCallback(\n+    async (ev: React.SyntheticEvent) => {\n+      ev.preventDefault();\n+      setIsSaving(true);\n+\n+      try {\n+        await apiKeys.create({\n+          name,\n+          expiresAt: expiresAt?.toISOString(),\n+        });\n+        toast.success(t(\"API key created\"));\n+        onSubmit();\n+      } catch (err) {\n+        toast.error(err.message);\n+      } finally {\n+        setIsSaving(false);\n+      }\n+    },\n+    [t, name, expiresAt, onSubmit, apiKeys]\n+  );\n+\n+  return (\n+    <form onSubmit={handleSubmit}>\n+      <Text as=\"p\" type=\"secondary\">\n+        {t(\n+          `Name your key something that will help you to remember it's use in the future, for example \"local development\" or \"continuous integration\".`\n+        )}\n+      </Text>\n+      <Flex column>\n+        <Input\n+          type=\"text\"\n+          label={t(\"Name\")}\n+          onChange={handleNameChange}\n+          value={name}\n+          minLength={ApiKeyValidation.minNameLength}\n+          maxLength={ApiKeyValidation.maxNameLength}\n+          required\n+          autoFocus\n+          flex\n+        />\n+        <Flex align=\"center\" gap={16}>\n+          <StyledExpirySelect\n+            ariaLabel={t(\"Expiration\")}\n+            label={t(\"Expiration\")}\n+            value={expiryType}\n+            options={expiryOptions}\n+            onChange={handleExpiryTypeChange}\n+            skipBodyScroll={true}\n+          />\n+          {expiryType === ExpiryType.Custom ? (\n+            <ExpiryDatePicker\n+              selectedDate={expiresAt}\n+              onSelect={handleSelectCustomDate}\n+            />\n+          ) : (\n+            <StyledExpiryText type=\"secondary\" size=\"small\">\n+              {expiresAt\n+                ? `${dateToExpiry(expiresAt.toString(), t, userLocale)}.`\n+                : `${t(\"Never expires\")}.`}\n+            </StyledExpiryText>\n+          )}\n+        </Flex>\n+      </Flex>\n+      <Flex justify=\"flex-end\">\n+        <Button type=\"submit\" disabled={submitDisabled}>\n+          {isSaving ? `${t(\"Creating\")}…` : t(\"Create\")}\n+        </Button>\n+      </Flex>\n+    </form>\n+  );\n+}\n+\n+const StyledExpirySelect = styled(InputSelect)`\n+  width: 150px;\n+`;\n+\n+const StyledExpiryText = styled(Text)`\n+  position: relative;\n+  top: 4px;\n+`;\n+\n+export default ApiKeyNew;\n\ndiff --git a/app/scenes/ApiKeyNew/utils.ts b/app/scenes/ApiKeyNew/utils.ts\nnew file mode 100644\nindex 000000000000..81c8dbca53a8\n--- /dev/null\n+++ b/app/scenes/ApiKeyNew/utils.ts\n@@ -0,0 +1,37 @@\n+import { addDays, endOfDay } from \"date-fns\";\n+import i18next from \"i18next\";\n+\n+export enum ExpiryType {\n+  Week = \"7 days\",\n+  Month = \"30 days\",\n+  TwoMonths = \"60 days\",\n+  ThreeMonths = \"90 days\",\n+  Custom = \"Custom\",\n+  NoExpiration = \"No expiration\",\n+}\n+\n+type ExpiryValue = {\n+  label: string;\n+  value?: number;\n+};\n+\n+export const ExpiryValues: Map<ExpiryType, ExpiryValue> = new Map([\n+  [ExpiryType.Week, { label: i18next.t(\"7 days\"), value: 7 }],\n+  [ExpiryType.Month, { label: i18next.t(\"30 days\"), value: 30 }],\n+  [ExpiryType.TwoMonths, { label: i18next.t(\"60 days\"), value: 60 }],\n+  [ExpiryType.ThreeMonths, { label: i18next.t(\"90 days\"), value: 90 }],\n+  [ExpiryType.Custom, { label: i18next.t(\"Custom\") }],\n+  [ExpiryType.NoExpiration, { label: i18next.t(\"No expiration\") }],\n+]);\n+\n+export const calculateExpiryDate = (\n+  currentDate: Date,\n+  expiryType: ExpiryType\n+): Date | undefined => {\n+  const daysToAdd = ExpiryValues.get(expiryType)?.value;\n+  if (!daysToAdd) {\n+    return;\n+  }\n+  const expiryDate = addDays(currentDate, daysToAdd);\n+  return endOfDay(expiryDate);\n+};\n\ndiff --git a/app/scenes/Settings/ApiKeys.tsx b/app/scenes/Settings/ApiKeys.tsx\nindex 000a3faa2f55..ffd38f7c5518 100644\n--- a/app/scenes/Settings/ApiKeys.tsx\n+++ b/app/scenes/Settings/ApiKeys.tsx\n@@ -2,6 +2,7 @@ import { observer } from \"mobx-react\";\n import { CodeIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useTranslation, Trans } from \"react-i18next\";\n+import { toast } from \"sonner\";\n import ApiKey from \"~/models/ApiKey\";\n import { Action } from \"~/components/Actions\";\n import Button from \"~/components/Button\";\n@@ -23,6 +24,23 @@ function ApiKeys() {\n   const can = usePolicy(team);\n   const context = useActionContext();\n \n+  const [copiedKeyId, setCopiedKeyId] = React.useState<string | null>();\n+  const copyTimeoutIdRef = React.useRef<ReturnType<typeof setTimeout>>();\n+\n+  const handleCopy = React.useCallback(\n+    (keyId: string) => {\n+      if (copyTimeoutIdRef.current) {\n+        clearTimeout(copyTimeoutIdRef.current);\n+      }\n+      setCopiedKeyId(keyId);\n+      copyTimeoutIdRef.current = setTimeout(() => {\n+        setCopiedKeyId(null);\n+      }, 3000);\n+      toast.message(t(\"API key copied to clipboard\"));\n+    },\n+    [t]\n+  );\n+\n   return (\n     <Scene\n       title={t(\"API Keys\")}\n@@ -62,9 +80,14 @@ function ApiKeys() {\n       <PaginatedList\n         fetch={apiKeys.fetchPage}\n         items={apiKeys.orderedData}\n-        heading={<h2>{t(\"Active\")}</h2>}\n+        heading={<h2>{t(\"Generated Keys\")}</h2>}\n         renderItem={(apiKey: ApiKey) => (\n-          <ApiKeyListItem key={apiKey.id} apiKey={apiKey} />\n+          <ApiKeyListItem\n+            key={apiKey.id}\n+            apiKey={apiKey}\n+            isCopied={apiKey.id === copiedKeyId}\n+            onCopy={handleCopy}\n+          />\n         )}\n       />\n     </Scene>\n\ndiff --git a/app/scenes/Settings/components/ApiKeyListItem.tsx b/app/scenes/Settings/components/ApiKeyListItem.tsx\nindex 606ef3a987b5..85a0f9324742 100644\n--- a/app/scenes/Settings/components/ApiKeyListItem.tsx\n+++ b/app/scenes/Settings/components/ApiKeyListItem.tsx\n@@ -1,45 +1,53 @@\n+import { isPast } from \"date-fns\";\n import { CopyIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n-import { toast } from \"sonner\";\n import ApiKey from \"~/models/ApiKey\";\n import Button from \"~/components/Button\";\n import CopyToClipboard from \"~/components/CopyToClipboard\";\n import Flex from \"~/components/Flex\";\n import ListItem from \"~/components/List/Item\";\n+import Text from \"~/components/Text\";\n+import useUserLocale from \"~/hooks/useUserLocale\";\n import ApiKeyMenu from \"~/menus/ApiKeyMenu\";\n+import { dateToExpiry } from \"~/utils/date\";\n \n type Props = {\n   apiKey: ApiKey;\n+  isCopied: boolean;\n+  onCopy: (keyId: string) => void;\n };\n \n-const ApiKeyListItem = ({ apiKey }: Props) => {\n+const ApiKeyListItem = ({ apiKey, isCopied, onCopy }: Props) => {\n   const { t } = useTranslation();\n-  const [linkCopied, setLinkCopied] = React.useState<boolean>(false);\n+  const userLocale = useUserLocale();\n \n-  React.useEffect(() => {\n-    if (linkCopied) {\n-      setTimeout(() => {\n-        setLinkCopied(false);\n-      }, 3000);\n-    }\n-  }, [linkCopied]);\n+  const hasExpired = apiKey.expiresAt\n+    ? isPast(new Date(apiKey.expiresAt))\n+    : false;\n+\n+  const subtitle = (\n+    <Text type={hasExpired ? \"danger\" : \"tertiary\"}>\n+      {apiKey.expiresAt\n+        ? dateToExpiry(apiKey.expiresAt, t, userLocale)\n+        : t(\"No expiry\")}\n+    </Text>\n+  );\n \n   const handleCopy = React.useCallback(() => {\n-    setLinkCopied(true);\n-    toast.message(t(\"API token copied to clipboard\"));\n-  }, [t]);\n+    onCopy(apiKey.id);\n+  }, [apiKey.id, onCopy]);\n \n   return (\n     <ListItem\n       key={apiKey.id}\n       title={apiKey.name}\n-      subtitle={<code>{apiKey.secret.slice(0, 15)}…</code>}\n+      subtitle={subtitle}\n       actions={\n         <Flex align=\"center\" gap={8}>\n           <CopyToClipboard text={apiKey.secret} onCopy={handleCopy}>\n             <Button type=\"button\" icon={<CopyIcon />} neutral borderOnHover>\n-              {linkCopied ? t(\"Copied\") : t(\"Copy\")}\n+              {isCopied ? t(\"Copied\") : t(\"Copy\")}\n             </Button>\n           </CopyToClipboard>\n           <ApiKeyMenu apiKey={apiKey} />\n\ndiff --git a/app/utils/date.ts b/app/utils/date.ts\nindex e94357146f74..8ee1364f7b24 100644\n--- a/app/utils/date.ts\n+++ b/app/utils/date.ts\n@@ -5,6 +5,9 @@ import {\n   differenceInCalendarMonths,\n   differenceInCalendarYears,\n   format as formatDate,\n+  isTomorrow,\n+  isSameWeek,\n+  isPast,\n } from \"date-fns\";\n import { TFunction } from \"i18next\";\n import startCase from \"lodash/startCase\";\n@@ -71,6 +74,42 @@ export function dateToHeading(\n   });\n }\n \n+export function dateToExpiry(\n+  dateTime: string,\n+  t: TFunction,\n+  userLocale: string | null | undefined\n+) {\n+  const date = Date.parse(dateTime);\n+  const now = new Date();\n+  const locale = dateLocale(userLocale);\n+\n+  if (isYesterday(date)) {\n+    return t(\"Expired Yesterday\");\n+  }\n+\n+  if (isPast(date)) {\n+    return `${t(\"Expired on\")} ${formatDate(date, \"MMM dd, yyyy\", { locale })}`;\n+  }\n+\n+  if (isToday(date)) {\n+    return t(\"Expires Today\");\n+  }\n+\n+  if (isTomorrow(date)) {\n+    return t(\"Expires Tomorrow\");\n+  }\n+\n+  const prefix = t(\"Expires on\");\n+\n+  if (isSameWeek(date, now)) {\n+    return `${prefix} ${formatDate(Date.parse(dateTime), \"iiii\", {\n+      locale,\n+    })}`;\n+  }\n+\n+  return `${prefix} ${formatDate(date, \"MMM dd, yyyy\", { locale })}`;\n+}\n+\n /**\n  * Replaces template variables in the given text with the current date and time.\n  *\n\ndiff --git a/package.json b/package.json\nindex 9df242b2b8a8..5e0b8547da26 100644\n--- a/package.json\n+++ b/package.json\n@@ -191,6 +191,7 @@\n     \"react\": \"^17.0.2\",\n     \"react-avatar-editor\": \"^13.0.2\",\n     \"react-color\": \"^2.17.3\",\n+    \"react-day-picker\": \"^8.10.1\",\n     \"react-dnd\": \"^16.0.1\",\n     \"react-dnd-html5-backend\": \"^16.0.1\",\n     \"react-dom\": \"^17.0.2\",\n\ndiff --git a/server/middlewares/authentication.ts b/server/middlewares/authentication.ts\nindex 4e6867fada07..65fead0310d3 100644\n--- a/server/middlewares/authentication.ts\n+++ b/server/middlewares/authentication.ts\n@@ -83,6 +83,10 @@ export default function auth(options: AuthenticationOptions = {}) {\n           throw AuthenticationError(\"Invalid API key\");\n         }\n \n+        if (apiKey.expiresAt && apiKey.expiresAt < new Date()) {\n+          throw AuthenticationError(\"Invalid API key\");\n+        }\n+\n         user = await User.findByPk(apiKey.userId, {\n           include: [\n             {\n\ndiff --git a/server/migrations/20240617030911-add-apikey-expiry.js b/server/migrations/20240617030911-add-apikey-expiry.js\nnew file mode 100644\nindex 000000000000..29e6872a55c7\n--- /dev/null\n+++ b/server/migrations/20240617030911-add-apikey-expiry.js\n@@ -0,0 +1,15 @@\n+\"use strict\";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.addColumn(\"apiKeys\", \"expiresAt\", {\n+      type: Sequelize.DATE,\n+      allowNull: true,\n+    });\n+  },\n+\n+  async down(queryInterface, Sequelize) {\n+    await queryInterface.removeColumn(\"apiKeys\", \"expiresAt\");\n+  },\n+};\n\ndiff --git a/server/models/ApiKey.ts b/server/models/ApiKey.ts\nindex f75833dd77b8..d780a86cce6d 100644\n--- a/server/models/ApiKey.ts\n+++ b/server/models/ApiKey.ts\n@@ -7,6 +7,7 @@ import {\n   BeforeValidate,\n   BelongsTo,\n   ForeignKey,\n+  IsDate,\n } from \"sequelize-typescript\";\n import { ApiKeyValidation } from \"@shared/validations\";\n import User from \"./User\";\n@@ -34,6 +35,10 @@ class ApiKey extends ParanoidModel<\n   @Column\n   secret: string;\n \n+  @IsDate\n+  @Column\n+  expiresAt: Date | null;\n+\n   // hooks\n \n   @BeforeValidate\n\ndiff --git a/server/presenters/apiKey.ts b/server/presenters/apiKey.ts\nindex 190b54319b73..498aa2262eb5 100644\n--- a/server/presenters/apiKey.ts\n+++ b/server/presenters/apiKey.ts\n@@ -7,5 +7,6 @@ export default function presentApiKey(key: ApiKey) {\n     secret: key.secret,\n     createdAt: key.createdAt,\n     updatedAt: key.updatedAt,\n+    expiresAt: key.expiresAt,\n   };\n }\n\ndiff --git a/server/routes/api/apiKeys/apiKeys.ts b/server/routes/api/apiKeys/apiKeys.ts\nindex 0d8e5c1f2890..2df8b583c834 100644\n--- a/server/routes/api/apiKeys/apiKeys.ts\n+++ b/server/routes/api/apiKeys/apiKeys.ts\n@@ -18,7 +18,7 @@ router.post(\n   validate(T.APIKeysCreateSchema),\n   transaction(),\n   async (ctx: APIContext<T.APIKeysCreateReq>) => {\n-    const { name } = ctx.input.body;\n+    const { name, expiresAt } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n \n@@ -27,6 +27,7 @@ router.post(\n       {\n         name,\n         userId: user.id,\n+        expiresAt,\n       },\n       { transaction }\n     );\n\ndiff --git a/server/routes/api/apiKeys/schema.ts b/server/routes/api/apiKeys/schema.ts\nindex f17762b8348d..25271f0816eb 100644\n--- a/server/routes/api/apiKeys/schema.ts\n+++ b/server/routes/api/apiKeys/schema.ts\n@@ -5,6 +5,8 @@ export const APIKeysCreateSchema = BaseSchema.extend({\n   body: z.object({\n     /** API Key name */\n     name: z.string(),\n+    /** API Key expiry date */\n+    expiresAt: z.coerce.date().optional(),\n   }),\n });\n \n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex acd47a42cd5e..5e98bf24f470 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -495,8 +495,17 @@\n   \"left a comment on\": \"left a comment on\",\n   \"shared\": \"shared\",\n   \"invited you to\": \"invited you to\",\n-  \"API Key created\": \"API Key created\",\n+  \"Choose a date\": \"Choose a date\",\n+  \"API key created\": \"API key created\",\n   \"Name your key something that will help you to remember it's use in the future, for example \\\"local development\\\" or \\\"continuous integration\\\".\": \"Name your key something that will help you to remember it's use in the future, for example \\\"local development\\\" or \\\"continuous integration\\\".\",\n+  \"Expiration\": \"Expiration\",\n+  \"Never expires\": \"Never expires\",\n+  \"7 days\": \"7 days\",\n+  \"30 days\": \"30 days\",\n+  \"60 days\": \"60 days\",\n+  \"90 days\": \"90 days\",\n+  \"Custom\": \"Custom\",\n+  \"No expiration\": \"No expiration\",\n   \"The document archive is empty at the moment.\": \"The document archive is empty at the moment.\",\n   \"Collection menu\": \"Collection menu\",\n   \"Drop documents to import\": \"Drop documents to import\",\n@@ -756,10 +765,11 @@\n   \"Search titles only\": \"Search titles only\",\n   \"No documents found for your search filters.\": \"No documents found for your search filters.\",\n   \"Search Results\": \"Search Results\",\n+  \"API key copied to clipboard\": \"API key copied to clipboard\",\n   \"API Keys\": \"API Keys\",\n   \"Create personal API keys to authenticate with the API and programatically control\\n          your workspace's data. API keys have the same permissions as your user account.\\n          For more details see the <em>developer documentation</em>.\": \"Create personal API keys to authenticate with the API and programatically control\\n          your workspace's data. API keys have the same permissions as your user account.\\n          For more details see the <em>developer documentation</em>.\",\n-  \"Active\": \"Active\",\n-  \"API token copied to clipboard\": \"API token copied to clipboard\",\n+  \"Generated Keys\": \"Generated Keys\",\n+  \"No expiry\": \"No expiry\",\n   \"Copied\": \"Copied\",\n   \"Revoking\": \"Revoking\",\n   \"Are you sure you want to revoke the {{ tokenName }} token?\": \"Are you sure you want to revoke the {{ tokenName }} token?\",\n@@ -808,6 +818,7 @@\n   \"Admins\": \"Admins\",\n   \"Editors\": \"Editors\",\n   \"All status\": \"All status\",\n+  \"Active\": \"Active\",\n   \"Settings saved\": \"Settings saved\",\n   \"Logo updated\": \"Logo updated\",\n   \"Unable to upload new logo\": \"Unable to upload new logo\",\n@@ -959,6 +970,11 @@\n   \"This month\": \"This month\",\n   \"Last month\": \"Last month\",\n   \"This year\": \"This year\",\n+  \"Expired Yesterday\": \"Expired Yesterday\",\n+  \"Expired on\": \"Expired on\",\n+  \"Expires Today\": \"Expires Today\",\n+  \"Expires Tomorrow\": \"Expires Tomorrow\",\n+  \"Expires on\": \"Expires on\",\n   \"Connect\": \"Connect\",\n   \"Whoops, you need to accept the permissions in GitHub to connect {{appName}} to your workspace. Try again?\": \"Whoops, you need to accept the permissions in GitHub to connect {{appName}} to your workspace. Try again?\",\n   \"Something went wrong while authenticating your request. Please try logging in again.\": \"Something went wrong while authenticating your request. Please try logging in again.\",\n\ndiff --git a/yarn.lock b/yarn.lock\nindex 3b35e45bf09d..15ae99d940cc 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -13144,6 +13144,11 @@ react-color@^2.17.3:\n     reactcss \"^1.2.0\"\n     tinycolor2 \"^1.4.1\"\n \n+react-day-picker@^8.10.1:\n+  version \"8.10.1\"\n+  resolved \"https://registry.yarnpkg.com/react-day-picker/-/react-day-picker-8.10.1.tgz#4762ec298865919b93ec09ba69621580835b8e80\"\n+  integrity sha512-TMx7fNbhLk15eqcMt+7Z7S2KF7mfTId/XJDjKE8f+IUcFn0l08/kI4FiYTL/0yuOLmEcbR4Fwe3GJf/NiiMnPA==\n+\n react-dnd-html5-backend@^16.0.1:\n   version \"16.0.1\"\n   resolved \"https://registry.yarnpkg.com/react-dnd-html5-backend/-/react-dnd-html5-backend-16.0.1.tgz#87faef15845d512a23b3c08d29ecfd34871688b6\"\n",
    "test_patch": "diff --git a/server/routes/api/apiKeys/apiKeys.test.ts b/server/routes/api/apiKeys/apiKeys.test.ts\nindex dee707e6d5a3..ea15d6d18294 100644\n--- a/server/routes/api/apiKeys/apiKeys.test.ts\n+++ b/server/routes/api/apiKeys/apiKeys.test.ts\n@@ -4,19 +4,38 @@ import { getTestServer } from \"@server/test/support\";\n const server = getTestServer();\n \n describe(\"#apiKeys.create\", () => {\n-  it(\"should allow creating an api key\", async () => {\n+  it(\"should allow creating an api key with expiry\", async () => {\n+    const now = new Date();\n     const user = await buildUser();\n \n     const res = await server.post(\"/api/apiKeys.create\", {\n       body: {\n         token: user.getJwtToken(),\n         name: \"My API Key\",\n+        expiresAt: now.toISOString(),\n       },\n     });\n     const body = await res.json();\n \n     expect(res.status).toEqual(200);\n     expect(body.data.name).toEqual(\"My API Key\");\n+    expect(body.data.expiresAt).toEqual(now.toISOString());\n+  });\n+\n+  it(\"should allow creating an api key without expiry\", async () => {\n+    const user = await buildUser();\n+\n+    const res = await server.post(\"/api/apiKeys.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        name: \"My API Key\",\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.name).toEqual(\"My API Key\");\n+    expect(body.data.expiresAt).toBeNull();\n   });\n \n   it(\"should require authentication\", async () => {\n@@ -27,10 +46,12 @@ describe(\"#apiKeys.create\", () => {\n \n describe(\"#apiKeys.list\", () => {\n   it(\"should return api keys of a user\", async () => {\n+    const now = new Date();\n     const user = await buildUser();\n     await buildApiKey({\n       name: \"My API Key\",\n       userId: user.id,\n+      expiresAt: now,\n     });\n \n     const res = await server.post(\"/api/apiKeys.list\", {\n@@ -42,6 +63,7 @@ describe(\"#apiKeys.list\", () => {\n \n     expect(res.status).toEqual(200);\n     expect(body.data[0].name).toEqual(\"My API Key\");\n+    expect(body.data[0].expiresAt).toEqual(now.toISOString());\n   });\n \n   it(\"should require authentication\", async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-7038",
    "pr_id": 7038,
    "issue_id": 6475,
    "repo": "outline/outline",
    "problem_statement": "Add option to use emoji for collection icons\nRelated https://github.com/outline/outline/issues/6469 and #2356 \r\n\r\nShould be relatively straight forward, all the pieces exist.",
    "issue_word_count": 27,
    "test_files_count": 3,
    "non_test_files_count": 80,
    "pr_changed_files": [
      "app/components/Collection/CollectionForm.tsx",
      "app/components/DocumentBreadcrumb.tsx",
      "app/components/DocumentCard.tsx",
      "app/components/DocumentExplorer.tsx",
      "app/components/DocumentListItem.tsx",
      "app/components/EmojiPicker/components.tsx",
      "app/components/EmojiPicker/index.tsx",
      "app/components/Icon.tsx",
      "app/components/IconPicker.tsx",
      "app/components/IconPicker/components/ColorPicker.tsx",
      "app/components/IconPicker/components/Emoji.tsx",
      "app/components/IconPicker/components/EmojiPanel.tsx",
      "app/components/IconPicker/components/Grid.tsx",
      "app/components/IconPicker/components/GridTemplate.tsx",
      "app/components/IconPicker/components/IconButton.tsx",
      "app/components/IconPicker/components/IconPanel.tsx",
      "app/components/IconPicker/components/PopoverButton.tsx",
      "app/components/IconPicker/components/SkinTonePicker.tsx",
      "app/components/IconPicker/index.tsx",
      "app/components/IconPicker/utils.ts",
      "app/components/Icons/CollectionIcon.tsx",
      "app/components/Icons/EmojiIcon.tsx",
      "app/components/Popover.tsx",
      "app/components/Sharing/Document/OtherAccess.tsx",
      "app/components/Sidebar/components/DocumentLink.tsx",
      "app/components/Sidebar/components/SharedDocumentLink.tsx",
      "app/components/Sidebar/components/SharedWithMeLink.tsx",
      "app/components/Sidebar/components/SidebarLink.tsx",
      "app/components/Sidebar/components/useSidebarLabelAndIcon.tsx",
      "app/editor/components/EmojiMenu.tsx",
      "app/editor/extensions/PasteHandler.ts",
      "app/hooks/useTemplateActions.tsx",
      "app/menus/TemplatesMenu.tsx",
      "app/models/Collection.ts",
      "app/models/Document.ts",
      "app/models/Revision.ts",
      "app/scenes/Collection/index.tsx",
      "app/scenes/Document/components/Document.tsx",
      "app/scenes/Document/components/DocumentTitle.tsx",
      "app/scenes/Document/components/Editor.tsx",
      "app/scenes/Document/components/Header.tsx",
      "app/scenes/Document/components/PublicBreadcrumb.tsx",
      "app/scenes/Document/components/ReferenceListItem.tsx",
      "app/scenes/Document/components/RevisionViewer.tsx",
      "app/typings/index.d.ts",
      "app/typings/styled-components.d.ts",
      "package.json",
      "plugins/webhooks/server/tasks/DeliverWebhookTask.ts",
      "server/commands/documentCreator.ts",
      "server/commands/documentDuplicator.test.ts",
      "server/commands/documentDuplicator.ts",
      "server/commands/documentImporter.ts",
      "server/commands/documentUpdater.ts",
      "server/models/Collection.ts",
      "server/models/Document.ts",
      "server/models/Revision.ts",
      "server/models/helpers/DocumentHelper.tsx",
      "server/presenters/collection.ts",
      "server/presenters/document.ts",
      "server/presenters/revision.ts",
      "server/queues/tasks/DocumentImportTask.ts",
      "server/queues/tasks/ExportJSONTask.ts",
      "server/queues/tasks/ImportJSONTask.ts",
      "server/queues/tasks/ImportMarkdownZipTask.ts",
      "server/queues/tasks/ImportNotionTask.ts",
      "server/queues/tasks/ImportTask.ts",
      "server/routes/api/collections/collections.test.ts",
      "server/routes/api/collections/schema.ts",
      "server/routes/api/documents/documents.test.ts",
      "server/routes/api/documents/documents.ts",
      "server/routes/api/documents/schema.ts",
      "server/scripts/20230815063834-migrate-emoji-in-document-title.ts",
      "server/scripts/20230827234031-migrate-emoji-in-revision-title.ts",
      "server/types.ts",
      "server/utils/zod.ts",
      "shared/i18n/locales/en_US/translation.json",
      "shared/styles/theme.ts",
      "shared/types.ts",
      "shared/utils/IconLibrary.tsx",
      "shared/utils/collections.ts",
      "shared/utils/emoji.ts",
      "shared/utils/icon.ts",
      "yarn.lock"
    ],
    "pr_changed_test_files": [
      "server/commands/documentDuplicator.test.ts",
      "server/routes/api/collections/collections.test.ts",
      "server/routes/api/documents/documents.test.ts"
    ],
    "base_commit": "56d90e6bc38f35fe3580d2c83780f74d1f7b6a6b",
    "head_commit": "97710d299ed89556e057e580066c0f23f47562a0",
    "repo_url": "https://github.com/outline/outline/pull/7038",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/7038",
    "dockerfile": "",
    "pr_merged_at": "2024-06-23T13:31:19.000Z",
    "patch": "diff --git a/app/components/Collection/CollectionForm.tsx b/app/components/Collection/CollectionForm.tsx\nindex eb1fa3868902..b567e36ed5e5 100644\n--- a/app/components/Collection/CollectionForm.tsx\n+++ b/app/components/Collection/CollectionForm.tsx\n@@ -11,7 +11,7 @@ import { CollectionValidation } from \"@shared/validations\";\n import Collection from \"~/models/Collection\";\n import Button from \"~/components/Button\";\n import Flex from \"~/components/Flex\";\n-import IconPicker from \"~/components/IconPicker\";\n+import Icon from \"~/components/Icon\";\n import Input from \"~/components/Input\";\n import InputSelectPermission from \"~/components/InputSelectPermission\";\n import Switch from \"~/components/Switch\";\n@@ -20,10 +20,12 @@ import useBoolean from \"~/hooks/useBoolean\";\n import useCurrentTeam from \"~/hooks/useCurrentTeam\";\n import { Feature, FeatureFlags } from \"~/utils/FeatureFlags\";\n \n+const IconPicker = React.lazy(() => import(\"~/components/IconPicker\"));\n+\n export interface FormData {\n   name: string;\n   icon: string;\n-  color: string;\n+  color: string | null;\n   sharing: boolean;\n   permission: CollectionPermission | undefined;\n }\n@@ -37,7 +39,16 @@ export const CollectionForm = observer(function CollectionForm_({\n }) {\n   const team = useCurrentTeam();\n   const { t } = useTranslation();\n+\n   const [hasOpenedIconPicker, setHasOpenedIconPicker] = useBoolean(false);\n+\n+  const iconColor = React.useMemo(\n+    () => collection?.color ?? randomElement(colorPalette),\n+    [collection?.color]\n+  );\n+\n+  const fallbackIcon = <Icon value=\"collection\" color={iconColor} />;\n+\n   const {\n     register,\n     handleSubmit: formHandleSubmit,\n@@ -53,7 +64,7 @@ export const CollectionForm = observer(function CollectionForm_({\n       icon: collection?.icon,\n       sharing: collection?.sharing ?? true,\n       permission: collection?.permission,\n-      color: collection?.color ?? randomElement(colorPalette),\n+      color: iconColor,\n     },\n   });\n \n@@ -70,20 +81,20 @@ export const CollectionForm = observer(function CollectionForm_({\n           \"collection\"\n       );\n     }\n-  }, [values.name, collection]);\n+  }, [collection, hasOpenedIconPicker, setValue, values.name, values.icon]);\n \n   React.useEffect(() => {\n     setTimeout(() => setFocus(\"name\", { shouldSelect: true }), 100);\n   }, [setFocus]);\n \n-  const handleIconPickerChange = React.useCallback(\n-    (color: string, icon: string) => {\n+  const handleIconChange = React.useCallback(\n+    (icon: string, color: string | null) => {\n       if (icon !== values.icon) {\n         setFocus(\"name\");\n       }\n \n-      setValue(\"color\", color);\n       setValue(\"icon\", icon);\n+      setValue(\"color\", color);\n     },\n     [setFocus, setValue, values.icon]\n   );\n@@ -105,13 +116,16 @@ export const CollectionForm = observer(function CollectionForm_({\n             maxLength: CollectionValidation.maxNameLength,\n           })}\n           prefix={\n-            <StyledIconPicker\n-              onOpen={setHasOpenedIconPicker}\n-              onChange={handleIconPickerChange}\n-              initial={values.name[0]}\n-              color={values.color}\n-              icon={values.icon}\n-            />\n+            <React.Suspense fallback={fallbackIcon}>\n+              <StyledIconPicker\n+                icon={values.icon}\n+                color={values.color ?? iconColor}\n+                initial={values.name[0]}\n+                popoverPosition=\"right\"\n+                onOpen={setHasOpenedIconPicker}\n+                onChange={handleIconChange}\n+              />\n+            </React.Suspense>\n           }\n           autoComplete=\"off\"\n           autoFocus\n\ndiff --git a/app/components/DocumentBreadcrumb.tsx b/app/components/DocumentBreadcrumb.tsx\nindex 5dcd5300bd99..96da0d700f9b 100644\n--- a/app/components/DocumentBreadcrumb.tsx\n+++ b/app/components/DocumentBreadcrumb.tsx\n@@ -6,6 +6,7 @@ import styled from \"styled-components\";\n import type { NavigationNode } from \"@shared/types\";\n import Document from \"~/models/Document\";\n import Breadcrumb from \"~/components/Breadcrumb\";\n+import Icon from \"~/components/Icon\";\n import CollectionIcon from \"~/components/Icons/CollectionIcon\";\n import useStores from \"~/hooks/useStores\";\n import { MenuInternalLink } from \"~/types\";\n@@ -15,7 +16,6 @@ import {\n   settingsPath,\n   trashPath,\n } from \"~/utils/routeHelpers\";\n-import EmojiIcon from \"./Icons/EmojiIcon\";\n \n type Props = {\n   children?: React.ReactNode;\n@@ -106,9 +106,9 @@ const DocumentBreadcrumb: React.FC<Props> = ({\n     path.slice(0, -1).forEach((node: NavigationNode) => {\n       output.push({\n         type: \"route\",\n-        title: node.emoji ? (\n+        title: node.icon ? (\n           <>\n-            <EmojiIcon emoji={node.emoji} /> {node.title}\n+            <StyledIcon value={node.icon} color={node.color} /> {node.title}\n           </>\n         ) : (\n           node.title\n@@ -144,6 +144,10 @@ const DocumentBreadcrumb: React.FC<Props> = ({\n   );\n };\n \n+const StyledIcon = styled(Icon)`\n+  margin-right: 2px;\n+`;\n+\n const SmallSlash = styled(GoToIcon)`\n   width: 12px;\n   height: 12px;\n\ndiff --git a/app/components/DocumentCard.tsx b/app/components/DocumentCard.tsx\nindex 1875f35f6746..894e160e47d8 100644\n--- a/app/components/DocumentCard.tsx\n+++ b/app/components/DocumentCard.tsx\n@@ -9,15 +9,17 @@ import { Link } from \"react-router-dom\";\n import styled, { useTheme } from \"styled-components\";\n import Squircle from \"@shared/components/Squircle\";\n import { s, ellipsis } from \"@shared/styles\";\n+import { IconType } from \"@shared/types\";\n+import { determineIconType } from \"@shared/utils/icon\";\n import Document from \"~/models/Document\";\n import Pin from \"~/models/Pin\";\n import Flex from \"~/components/Flex\";\n+import Icon from \"~/components/Icon\";\n import NudeButton from \"~/components/NudeButton\";\n import Time from \"~/components/Time\";\n import useStores from \"~/hooks/useStores\";\n import { hover } from \"~/styles\";\n import CollectionIcon from \"./Icons/CollectionIcon\";\n-import EmojiIcon from \"./Icons/EmojiIcon\";\n import Text from \"./Text\";\n import Tooltip from \"./Tooltip\";\n \n@@ -52,6 +54,8 @@ function DocumentCard(props: Props) {\n     disabled: !isDraggable || !canUpdatePin,\n   });\n \n+  const hasEmojiInTitle = determineIconType(document.icon) === IconType.Emoji;\n+\n   const style = {\n     transform: CSS.Transform.toString(transform),\n     transition,\n@@ -109,12 +113,18 @@ function DocumentCard(props: Props) {\n               <path d=\"M19.5 19.5H6C2.96243 19.5 0.5 17.0376 0.5 14V0.5H0.792893L19.5 19.2071V19.5Z\" />\n             </Fold>\n \n-            {document.emoji ? (\n-              <Squircle color={theme.slateLight}>\n-                <EmojiIcon emoji={document.emoji} size={24} />\n-              </Squircle>\n+            {document.icon ? (\n+              <DocumentSquircle\n+                icon={document.icon}\n+                color={document.color ?? undefined}\n+              />\n             ) : (\n-              <Squircle color={collection?.color}>\n+              <Squircle\n+                color={\n+                  collection?.color ??\n+                  (!pin?.collectionId ? theme.slateLight : theme.slateDark)\n+                }\n+              >\n                 {collection?.icon &&\n                 collection?.icon !== \"letter\" &&\n                 collection?.icon !== \"collection\" &&\n@@ -127,8 +137,8 @@ function DocumentCard(props: Props) {\n             )}\n             <div>\n               <Heading dir={document.dir}>\n-                {document.emoji\n-                  ? document.titleWithDefault.replace(document.emoji, \"\")\n+                {hasEmojiInTitle\n+                  ? document.titleWithDefault.replace(document.icon!, \"\")\n                   : document.titleWithDefault}\n               </Heading>\n               <DocumentMeta size=\"xsmall\">\n@@ -159,6 +169,25 @@ function DocumentCard(props: Props) {\n   );\n }\n \n+const DocumentSquircle = ({\n+  icon,\n+  color,\n+}: {\n+  icon: string;\n+  color?: string;\n+}) => {\n+  const theme = useTheme();\n+  const iconType = determineIconType(icon)!;\n+  const squircleColor =\n+    iconType === IconType.Outline ? color : theme.slateLight;\n+\n+  return (\n+    <Squircle color={squircleColor}>\n+      <Icon value={icon} color={theme.white} />\n+    </Squircle>\n+  );\n+};\n+\n const Clock = styled(ClockIcon)`\n   flex-shrink: 0;\n `;\n\ndiff --git a/app/components/DocumentExplorer.tsx b/app/components/DocumentExplorer.tsx\nindex 156f3c13deb4..24fc24ed3cda 100644\n--- a/app/components/DocumentExplorer.tsx\n+++ b/app/components/DocumentExplorer.tsx\n@@ -18,8 +18,8 @@ import { NavigationNode } from \"@shared/types\";\n import DocumentExplorerNode from \"~/components/DocumentExplorerNode\";\n import DocumentExplorerSearchResult from \"~/components/DocumentExplorerSearchResult\";\n import Flex from \"~/components/Flex\";\n+import Icon from \"~/components/Icon\";\n import CollectionIcon from \"~/components/Icons/CollectionIcon\";\n-import EmojiIcon from \"~/components/Icons/EmojiIcon\";\n import { Outline } from \"~/components/Input\";\n import InputSearch from \"~/components/InputSearch\";\n import Text from \"~/components/Text\";\n@@ -216,25 +216,30 @@ function DocumentExplorer({ onSubmit, onSelect, items }: Props) {\n     }) => {\n       const node = data[index];\n       const isCollection = node.type === \"collection\";\n-      let icon, title: string, emoji: string | undefined, path;\n+      let renderedIcon,\n+        title: string,\n+        icon: string | undefined,\n+        color: string | undefined,\n+        path;\n \n       if (isCollection) {\n         const col = collections.get(node.collectionId as string);\n-        icon = col && (\n+        renderedIcon = col && (\n           <CollectionIcon collection={col} expanded={isExpanded(index)} />\n         );\n         title = node.title;\n       } else {\n         const doc = documents.get(node.id);\n-        emoji = doc?.emoji ?? node.emoji;\n+        icon = doc?.icon ?? node.icon;\n+        color = doc?.color ?? node.color;\n         title = doc?.title ?? node.title;\n \n-        if (emoji) {\n-          icon = <EmojiIcon emoji={emoji} />;\n+        if (icon) {\n+          renderedIcon = <Icon value={icon} color={color} />;\n         } else if (doc?.isStarred) {\n-          icon = <StarredIcon color={theme.yellow} />;\n+          renderedIcon = <StarredIcon color={theme.yellow} />;\n         } else {\n-          icon = <DocumentIcon color={theme.textSecondary} />;\n+          renderedIcon = <DocumentIcon color={theme.textSecondary} />;\n         }\n \n         path = ancestors(node)\n@@ -254,7 +259,7 @@ function DocumentExplorer({ onSubmit, onSelect, items }: Props) {\n           }}\n           onPointerMove={() => setActiveNode(index)}\n           onClick={() => toggleSelect(index)}\n-          icon={icon}\n+          icon={renderedIcon}\n           title={title}\n           path={path}\n         />\n@@ -275,7 +280,7 @@ function DocumentExplorer({ onSubmit, onSelect, items }: Props) {\n           selected={isSelected(index)}\n           active={activeNode === index}\n           expanded={isExpanded(index)}\n-          icon={icon}\n+          icon={renderedIcon}\n           title={title}\n           depth={node.depth as number}\n           hasChildren={hasChildren(index)}\n\ndiff --git a/app/components/DocumentListItem.tsx b/app/components/DocumentListItem.tsx\nindex 7ac0a0e04055..b797c485eed1 100644\n--- a/app/components/DocumentListItem.tsx\n+++ b/app/components/DocumentListItem.tsx\n@@ -15,6 +15,7 @@ import Badge from \"~/components/Badge\";\n import DocumentMeta from \"~/components/DocumentMeta\";\n import Flex from \"~/components/Flex\";\n import Highlight from \"~/components/Highlight\";\n+import Icon from \"~/components/Icon\";\n import NudeButton from \"~/components/NudeButton\";\n import StarButton, { AnimatedStar } from \"~/components/Star\";\n import Tooltip from \"~/components/Tooltip\";\n@@ -23,7 +24,6 @@ import useCurrentUser from \"~/hooks/useCurrentUser\";\n import DocumentMenu from \"~/menus/DocumentMenu\";\n import { hover } from \"~/styles\";\n import { documentPath } from \"~/utils/routeHelpers\";\n-import EmojiIcon from \"./Icons/EmojiIcon\";\n \n type Props = {\n   document: Document;\n@@ -97,9 +97,9 @@ function DocumentListItem(\n     >\n       <Content>\n         <Heading dir={document.dir}>\n-          {document.emoji && (\n+          {document.icon && (\n             <>\n-              <EmojiIcon emoji={document.emoji} size={24} />\n+              <Icon value={document.icon} color={document.color ?? undefined} />\n               &nbsp;\n             </>\n           )}\n\ndiff --git a/app/components/EmojiPicker/components.tsx b/app/components/EmojiPicker/components.tsx\ndeleted file mode 100644\nindex 4713666550b6..000000000000\n--- a/app/components/EmojiPicker/components.tsx\n+++ /dev/null\n@@ -1,23 +0,0 @@\n-import styled from \"styled-components\";\n-import Button from \"~/components/Button\";\n-import { hover } from \"~/styles\";\n-import Flex from \"../Flex\";\n-\n-export const EmojiButton = styled(Button)`\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  width: 32px;\n-  height: 32px;\n-\n-  &: ${hover},\n-  &:active,\n-  &[aria-expanded= \"true\"] {\n-    opacity: 1 !important;\n-  }\n-`;\n-\n-export const Emoji = styled(Flex)<{ size?: number }>`\n-  line-height: 1.6;\n-  ${(props) => (props.size ? `font-size: ${props.size}px` : \"\")}\n-`;\n\ndiff --git a/app/components/EmojiPicker/index.tsx b/app/components/EmojiPicker/index.tsx\ndeleted file mode 100644\nindex c85d94ab7309..000000000000\n--- a/app/components/EmojiPicker/index.tsx\n+++ /dev/null\n@@ -1,262 +0,0 @@\n-import data from \"@emoji-mart/data\";\n-import Picker from \"@emoji-mart/react\";\n-import { SmileyIcon } from \"outline-icons\";\n-import * as React from \"react\";\n-import { useTranslation } from \"react-i18next\";\n-import { usePopoverState, PopoverDisclosure } from \"reakit/Popover\";\n-import styled, { useTheme } from \"styled-components\";\n-import { depths, s } from \"@shared/styles\";\n-import { toRGB } from \"@shared/utils/color\";\n-import Button from \"~/components/Button\";\n-import Popover from \"~/components/Popover\";\n-import useStores from \"~/hooks/useStores\";\n-import useUserLocale from \"~/hooks/useUserLocale\";\n-import { Emoji, EmojiButton } from \"./components\";\n-\n-/* Locales supported by emoji-mart */\n-const supportedLocales = [\n-  \"en\",\n-  \"ar\",\n-  \"be\",\n-  \"cs\",\n-  \"de\",\n-  \"es\",\n-  \"fa\",\n-  \"fi\",\n-  \"fr\",\n-  \"hi\",\n-  \"it\",\n-  \"ja\",\n-  \"ko\",\n-  \"nl\",\n-  \"pl\",\n-  \"pt\",\n-  \"ru\",\n-  \"sa\",\n-  \"tr\",\n-  \"uk\",\n-  \"vi\",\n-  \"zh\",\n-];\n-\n-/**\n- * React hook to derive emoji picker's theme from UI theme\n- *\n- * @returns {string} Theme to use for emoji picker\n- */\n-function usePickerTheme(): string {\n-  const { ui } = useStores();\n-  const { theme } = ui;\n-\n-  if (theme === \"system\") {\n-    return \"auto\";\n-  }\n-\n-  return theme;\n-}\n-\n-type Props = {\n-  /** The selected emoji, if any */\n-  value?: string | null;\n-  /** Callback when an emoji is selected */\n-  onChange: (emoji: string | null) => void | Promise<void>;\n-  /** Callback when the picker is opened */\n-  onOpen?: () => void;\n-  /** Callback when the picker is closed */\n-  onClose?: () => void;\n-  /** Callback when the picker is clicked outside of */\n-  onClickOutside: () => void;\n-  /** Whether to auto focus the search input on open */\n-  autoFocus?: boolean;\n-  /** Class name to apply to the trigger button */\n-  className?: string;\n-};\n-\n-function EmojiPicker({\n-  value,\n-  onOpen,\n-  onClose,\n-  onChange,\n-  onClickOutside,\n-  autoFocus,\n-  className,\n-}: Props) {\n-  const { t } = useTranslation();\n-  const pickerTheme = usePickerTheme();\n-  const theme = useTheme();\n-  const locale = useUserLocale(true) ?? \"en\";\n-\n-  const popover = usePopoverState({\n-    placement: \"bottom-start\",\n-    modal: true,\n-    unstable_offset: [0, 0],\n-  });\n-\n-  const [emojisPerLine, setEmojisPerLine] = React.useState(9);\n-\n-  const pickerRef = React.useRef<HTMLDivElement>(null);\n-\n-  React.useEffect(() => {\n-    if (popover.visible) {\n-      onOpen?.();\n-    } else {\n-      onClose?.();\n-    }\n-  }, [popover.visible, onOpen, onClose]);\n-\n-  React.useEffect(() => {\n-    if (popover.visible && pickerRef.current) {\n-      // 28 is picker's observed width when perLine is set to 0\n-      // and 36 is the default emojiButtonSize\n-      // Ref: https://github.com/missive/emoji-mart#options--props\n-      setEmojisPerLine(Math.floor((pickerRef.current.clientWidth - 28) / 36));\n-    }\n-  }, [popover.visible]);\n-\n-  const handleEmojiChange = React.useCallback(\n-    async (emoji) => {\n-      popover.hide();\n-      await onChange(emoji ? emoji.native : null);\n-    },\n-    [popover, onChange]\n-  );\n-\n-  const handleClick = React.useCallback(\n-    (ev: React.MouseEvent) => {\n-      ev.stopPropagation();\n-      if (popover.visible) {\n-        popover.hide();\n-      } else {\n-        popover.show();\n-      }\n-    },\n-    [popover]\n-  );\n-\n-  const handleClickOutside = React.useCallback(() => {\n-    // It was observed that onClickOutside got triggered\n-    // even when the picker wasn't open or opened at all.\n-    // Hence, this guard here...\n-    if (popover.visible) {\n-      onClickOutside();\n-    }\n-  }, [popover.visible, onClickOutside]);\n-\n-  // Auto focus search input when picker is opened\n-  React.useLayoutEffect(() => {\n-    if (autoFocus && popover.visible) {\n-      requestAnimationFrame(() => {\n-        const searchInput = pickerRef.current\n-          ?.querySelector(\"em-emoji-picker\")\n-          ?.shadowRoot?.querySelector(\n-            \"input[type=search]\"\n-          ) as HTMLInputElement | null;\n-        searchInput?.focus();\n-      });\n-    }\n-  }, [autoFocus, popover.visible]);\n-\n-  return (\n-    <>\n-      <PopoverDisclosure {...popover}>\n-        {(props) => (\n-          <EmojiButton\n-            {...props}\n-            className={className}\n-            onClick={handleClick}\n-            icon={\n-              value ? (\n-                <Emoji size={32} align=\"center\" justify=\"center\">\n-                  {value}\n-                </Emoji>\n-              ) : (\n-                <StyledSmileyIcon size={32} color={theme.textTertiary} />\n-              )\n-            }\n-            neutral\n-            borderOnHover\n-          />\n-        )}\n-      </PopoverDisclosure>\n-      <PickerPopover\n-        {...popover}\n-        tabIndex={0}\n-        // This prevents picker from closing when any of its\n-        // children are focused, e.g, clicking on search bar or\n-        // a click on skin tone button\n-        onClick={(e) => e.stopPropagation()}\n-        width={352}\n-        aria-label={t(\"Emoji Picker\")}\n-      >\n-        {popover.visible && (\n-          <>\n-            {value && (\n-              <RemoveButton neutral onClick={() => handleEmojiChange(null)}>\n-                {t(\"Remove\")}\n-              </RemoveButton>\n-            )}\n-            <PickerStyles ref={pickerRef}>\n-              <Picker\n-                locale={supportedLocales.includes(locale) ? locale : \"en\"}\n-                data={data}\n-                onEmojiSelect={handleEmojiChange}\n-                theme={pickerTheme}\n-                previewPosition=\"none\"\n-                perLine={emojisPerLine}\n-                onClickOutside={handleClickOutside}\n-              />\n-            </PickerStyles>\n-          </>\n-        )}\n-      </PickerPopover>\n-    </>\n-  );\n-}\n-\n-const StyledSmileyIcon = styled(SmileyIcon)`\n-  flex-shrink: 0;\n-\n-  @media print {\n-    display: none;\n-  }\n-`;\n-\n-const RemoveButton = styled(Button)`\n-  margin-left: -12px;\n-  margin-bottom: 8px;\n-  border-radius: 6px;\n-  height: 24px;\n-  font-size: 13px;\n-\n-  > :first-child {\n-    min-height: unset;\n-    line-height: unset;\n-  }\n-`;\n-\n-const PickerPopover = styled(Popover)`\n-  z-index: ${depths.popover};\n-  > :first-child {\n-    padding-top: 8px;\n-    padding-bottom: 0;\n-    max-height: 488px;\n-    overflow: unset;\n-  }\n-`;\n-\n-const PickerStyles = styled.div`\n-  margin-left: -24px;\n-  margin-right: -24px;\n-  em-emoji-picker {\n-    --shadow: none;\n-    --font-family: ${s(\"fontFamily\")};\n-    --rgb-background: ${(props) => toRGB(props.theme.menuBackground)};\n-    --rgb-accent: ${(props) => toRGB(props.theme.accent)};\n-    --border-radius: 6px;\n-    margin-left: auto;\n-    margin-right: auto;\n-    min-height: 443px;\n-  }\n-`;\n-\n-export default EmojiPicker;\n\ndiff --git a/app/components/Icon.tsx b/app/components/Icon.tsx\nnew file mode 100644\nindex 000000000000..4e67bb8d7a53\n--- /dev/null\n+++ b/app/components/Icon.tsx\n@@ -0,0 +1,93 @@\n+import { getLuminance } from \"polished\";\n+import * as React from \"react\";\n+import { randomElement } from \"@shared/random\";\n+import { IconType } from \"@shared/types\";\n+import { IconLibrary } from \"@shared/utils/IconLibrary\";\n+import { colorPalette } from \"@shared/utils/collections\";\n+import { determineIconType } from \"@shared/utils/icon\";\n+import EmojiIcon from \"~/components/Icons/EmojiIcon\";\n+import useStores from \"~/hooks/useStores\";\n+import Logger from \"~/utils/Logger\";\n+\n+type IconProps = {\n+  value: string;\n+  color?: string;\n+  size?: number;\n+  initial?: string;\n+  className?: string;\n+};\n+\n+const Icon = ({\n+  value: icon,\n+  color,\n+  size = 24,\n+  initial,\n+  className,\n+}: IconProps) => {\n+  const iconType = determineIconType(icon);\n+\n+  if (!iconType) {\n+    Logger.warn(\"Failed to determine icon type\", {\n+      icon,\n+    });\n+    return null;\n+  }\n+\n+  try {\n+    if (iconType === IconType.Outline) {\n+      return (\n+        <OutlineIcon\n+          value={icon}\n+          color={color}\n+          size={size}\n+          initial={initial}\n+          className={className}\n+        />\n+      );\n+    }\n+\n+    return <EmojiIcon emoji={icon} size={size} className={className} />;\n+  } catch (err) {\n+    Logger.warn(\"Failed to render icon\", {\n+      icon,\n+    });\n+  }\n+\n+  return null;\n+};\n+\n+type OutlineIconProps = {\n+  value: string;\n+  color?: string;\n+  size?: number;\n+  initial?: string;\n+  className?: string;\n+};\n+\n+const OutlineIcon = ({\n+  value: icon,\n+  color: inputColor,\n+  initial,\n+  size,\n+  className,\n+}: OutlineIconProps) => {\n+  const { ui } = useStores();\n+\n+  let color = inputColor ?? randomElement(colorPalette);\n+\n+  // If the chosen icon color is very dark then we invert it in dark mode\n+  // otherwise it will be impossible to see against the dark background.\n+  if (!inputColor && ui.resolvedTheme === \"dark\" && color !== \"currentColor\") {\n+    color = getLuminance(color) > 0.09 ? color : \"currentColor\";\n+  }\n+\n+  const Component = IconLibrary.getComponent(icon);\n+\n+  return (\n+    <Component color={color} size={size} className={className}>\n+      {initial}\n+    </Component>\n+  );\n+};\n+\n+export default Icon;\n\ndiff --git a/app/components/IconPicker.tsx b/app/components/IconPicker.tsx\ndeleted file mode 100644\nindex 182f51c4e0d8..000000000000\n--- a/app/components/IconPicker.tsx\n+++ /dev/null\n@@ -1,211 +0,0 @@\n-import * as React from \"react\";\n-import { useTranslation } from \"react-i18next\";\n-import { PopoverDisclosure, usePopoverState } from \"reakit\";\n-import { MenuItem } from \"reakit/Menu\";\n-import styled, { useTheme } from \"styled-components\";\n-import { IconLibrary } from \"@shared/utils/IconLibrary\";\n-import { colorPalette } from \"@shared/utils/collections\";\n-import Flex from \"~/components/Flex\";\n-import NudeButton from \"~/components/NudeButton\";\n-import Text from \"~/components/Text\";\n-import useOnClickOutside from \"~/hooks/useOnClickOutside\";\n-import lazyWithRetry from \"~/utils/lazyWithRetry\";\n-import DelayedMount from \"./DelayedMount\";\n-import InputSearch from \"./InputSearch\";\n-import Popover from \"./Popover\";\n-\n-const icons = IconLibrary.mapping;\n-\n-const TwitterPicker = lazyWithRetry(\n-  () => import(\"react-color/lib/components/twitter/Twitter\")\n-);\n-\n-type Props = {\n-  onOpen?: () => void;\n-  onClose?: () => void;\n-  onChange: (color: string, icon: string) => void;\n-  initial: string;\n-  icon: string;\n-  color: string;\n-  className?: string;\n-};\n-\n-function IconPicker({\n-  onOpen,\n-  onClose,\n-  icon,\n-  initial,\n-  color,\n-  onChange,\n-  className,\n-}: Props) {\n-  const [query, setQuery] = React.useState(\"\");\n-  const { t } = useTranslation();\n-  const theme = useTheme();\n-  const popover = usePopoverState({\n-    gutter: 0,\n-    placement: \"right\",\n-    modal: true,\n-  });\n-\n-  React.useEffect(() => {\n-    if (popover.visible) {\n-      onOpen?.();\n-    } else {\n-      onClose?.();\n-      setQuery(\"\");\n-    }\n-  }, [onOpen, onClose, popover.visible]);\n-\n-  const filteredIcons = IconLibrary.findIcons(query);\n-  const handleFilter = (event: React.ChangeEvent<HTMLInputElement>) => {\n-    setQuery(event.target.value.toLowerCase());\n-  };\n-\n-  const styles = React.useMemo(\n-    () => ({\n-      default: {\n-        body: {\n-          padding: 0,\n-          marginRight: -8,\n-        },\n-        hash: {\n-          color: theme.text,\n-          background: theme.inputBorder,\n-        },\n-        swatch: {\n-          cursor: \"var(--cursor-pointer)\",\n-        },\n-        input: {\n-          color: theme.text,\n-          boxShadow: `inset 0 0 0 1px ${theme.inputBorder}`,\n-          background: \"transparent\",\n-        },\n-      },\n-    }),\n-    [theme]\n-  );\n-\n-  // Custom click outside handling rather than using `hideOnClickOutside` from reakit so that we can\n-  // prevent event bubbling.\n-  useOnClickOutside(\n-    popover.unstable_popoverRef,\n-    (event) => {\n-      if (popover.visible) {\n-        event.stopPropagation();\n-        event.preventDefault();\n-        popover.hide();\n-      }\n-    },\n-    { capture: true }\n-  );\n-\n-  const iconNames = Object.keys(icons);\n-  const delayPerIcon = 250 / iconNames.length;\n-\n-  return (\n-    <>\n-      <PopoverDisclosure {...popover}>\n-        {(props) => (\n-          <NudeButton\n-            aria-label={t(\"Show menu\")}\n-            className={className}\n-            {...props}\n-          >\n-            <Icon\n-              as={IconLibrary.getComponent(icon || \"collection\")}\n-              color={color}\n-            >\n-              {initial}\n-            </Icon>\n-          </NudeButton>\n-        )}\n-      </PopoverDisclosure>\n-      <Popover\n-        {...popover}\n-        width={552}\n-        aria-label={t(\"Choose an icon\")}\n-        hideOnClickOutside={false}\n-      >\n-        <Flex column gap={12}>\n-          <Text size=\"large\" weight=\"xbold\">\n-            {t(\"Choose an icon\")}\n-          </Text>\n-          <InputSearch\n-            value={query}\n-            placeholder={`${t(\"Filter\")}…`}\n-            onChange={handleFilter}\n-            autoFocus\n-          />\n-          <div>\n-            {iconNames.map((name, index) => (\n-              <MenuItem key={name} onClick={() => onChange(color, name)}>\n-                {(props) => (\n-                  <IconButton\n-                    style={\n-                      {\n-                        opacity: query\n-                          ? filteredIcons.includes(name)\n-                            ? 1\n-                            : 0.3\n-                          : undefined,\n-                        \"--delay\": `${Math.round(index * delayPerIcon)}ms`,\n-                      } as React.CSSProperties\n-                    }\n-                    {...props}\n-                  >\n-                    <Icon\n-                      as={IconLibrary.getComponent(name)}\n-                      color={color}\n-                      size={30}\n-                    >\n-                      {initial}\n-                    </Icon>\n-                  </IconButton>\n-                )}\n-              </MenuItem>\n-            ))}\n-          </div>\n-          <Flex>\n-            <React.Suspense\n-              fallback={\n-                <DelayedMount>\n-                  <Text>{t(\"Loading\")}…</Text>\n-                </DelayedMount>\n-              }\n-            >\n-              <ColorPicker\n-                color={color}\n-                onChange={(color) => onChange(color.hex, icon)}\n-                colors={colorPalette}\n-                triangle=\"hide\"\n-                styles={styles}\n-              />\n-            </React.Suspense>\n-          </Flex>\n-        </Flex>\n-      </Popover>\n-    </>\n-  );\n-}\n-\n-const Icon = styled.svg`\n-  transition: color 150ms ease-in-out, fill 150ms ease-in-out;\n-  transition-delay: var(--delay);\n-`;\n-\n-const IconButton = styled(NudeButton)`\n-  vertical-align: top;\n-  border-radius: 4px;\n-  margin: 0px 6px 6px 0px;\n-  width: 30px;\n-  height: 30px;\n-`;\n-\n-const ColorPicker = styled(TwitterPicker)`\n-  box-shadow: none !important;\n-  background: transparent !important;\n-  width: 100% !important;\n-`;\n-\n-export default IconPicker;\n\ndiff --git a/app/components/IconPicker/components/ColorPicker.tsx b/app/components/IconPicker/components/ColorPicker.tsx\nnew file mode 100644\nindex 000000000000..1a9a9677557a\n--- /dev/null\n+++ b/app/components/IconPicker/components/ColorPicker.tsx\n@@ -0,0 +1,218 @@\n+import { BackIcon } from \"outline-icons\";\n+import React from \"react\";\n+import styled from \"styled-components\";\n+import { breakpoints, s } from \"@shared/styles\";\n+import { colorPalette } from \"@shared/utils/collections\";\n+import { validateColorHex } from \"@shared/utils/color\";\n+import Flex from \"~/components/Flex\";\n+import NudeButton from \"~/components/NudeButton\";\n+import Text from \"~/components/Text\";\n+import { hover } from \"~/styles\";\n+\n+enum Panel {\n+  Builtin,\n+  Hex,\n+}\n+\n+type Props = {\n+  width: number;\n+  activeColor: string;\n+  onSelect: (color: string) => void;\n+};\n+\n+const ColorPicker = ({ width, activeColor, onSelect }: Props) => {\n+  const [localValue, setLocalValue] = React.useState(activeColor);\n+\n+  const [panel, setPanel] = React.useState(\n+    colorPalette.includes(activeColor) ? Panel.Builtin : Panel.Hex\n+  );\n+\n+  const handleSwitcherClick = React.useCallback(() => {\n+    setPanel(panel === Panel.Builtin ? Panel.Hex : Panel.Builtin);\n+  }, [panel, setPanel]);\n+\n+  const isLargeMobile = width > breakpoints.mobileLarge + 12; // 12px for the Container padding\n+\n+  React.useEffect(() => {\n+    setLocalValue(activeColor);\n+    setPanel(colorPalette.includes(activeColor) ? Panel.Builtin : Panel.Hex);\n+  }, [activeColor]);\n+\n+  return isLargeMobile ? (\n+    <Container justify=\"space-between\">\n+      <LargeMobileBuiltinColors activeColor={activeColor} onClick={onSelect} />\n+      <LargeMobileCustomColor\n+        value={localValue}\n+        setLocalValue={setLocalValue}\n+        onValidHex={onSelect}\n+      />\n+    </Container>\n+  ) : (\n+    <Container gap={12}>\n+      <PanelSwitcher align=\"center\">\n+        <SwitcherButton panel={panel} onClick={handleSwitcherClick}>\n+          {panel === Panel.Builtin ? \"#\" : <BackIcon />}\n+        </SwitcherButton>\n+      </PanelSwitcher>\n+      {panel === Panel.Builtin ? (\n+        <BuiltinColors activeColor={activeColor} onClick={onSelect} />\n+      ) : (\n+        <CustomColor\n+          value={localValue}\n+          setLocalValue={setLocalValue}\n+          onValidHex={onSelect}\n+        />\n+      )}\n+    </Container>\n+  );\n+};\n+\n+const BuiltinColors = ({\n+  activeColor,\n+  onClick,\n+  className,\n+}: {\n+  activeColor: string;\n+  onClick: (color: string) => void;\n+  className?: string;\n+}) => (\n+  <Flex className={className} justify=\"space-between\" align=\"center\" auto>\n+    {colorPalette.map((color) => (\n+      <ColorButton\n+        key={color}\n+        color={color}\n+        active={color === activeColor}\n+        onClick={() => onClick(color)}\n+      >\n+        <Selected />\n+      </ColorButton>\n+    ))}\n+  </Flex>\n+);\n+\n+const CustomColor = ({\n+  value,\n+  setLocalValue,\n+  onValidHex,\n+  className,\n+}: {\n+  value: string;\n+  setLocalValue: (value: string) => void;\n+  onValidHex: (color: string) => void;\n+  className?: string;\n+}) => {\n+  const hasHexChars = React.useCallback(\n+    (color: string) => /(^#[0-9A-F]{1,6}$)/i.test(color),\n+    []\n+  );\n+\n+  const handleInputChange = React.useCallback(\n+    (ev: React.ChangeEvent<HTMLInputElement>) => {\n+      const val = ev.target.value;\n+\n+      if (val === \"\" || val === \"#\") {\n+        setLocalValue(\"#\");\n+        return;\n+      }\n+\n+      const uppercasedVal = val.toUpperCase();\n+\n+      if (hasHexChars(uppercasedVal)) {\n+        setLocalValue(uppercasedVal);\n+      }\n+\n+      if (validateColorHex(uppercasedVal)) {\n+        onValidHex(uppercasedVal);\n+      }\n+    },\n+    [setLocalValue, hasHexChars, onValidHex]\n+  );\n+\n+  return (\n+    <Flex className={className} align=\"center\" gap={8}>\n+      <Text type=\"tertiary\" size=\"small\">\n+        HEX\n+      </Text>\n+      <CustomColorInput\n+        maxLength={7}\n+        value={value}\n+        onChange={handleInputChange}\n+      />\n+    </Flex>\n+  );\n+};\n+\n+const Container = styled(Flex)`\n+  height: 48px;\n+  padding: 8px 12px;\n+  border-bottom: 1px solid ${s(\"inputBorder\")};\n+`;\n+\n+const Selected = styled.span`\n+  width: 8px;\n+  height: 4px;\n+  border-left: 1px solid white;\n+  border-bottom: 1px solid white;\n+  transform: translateY(-25%) rotate(-45deg);\n+`;\n+\n+const ColorButton = styled(NudeButton)<{ color: string; active: boolean }>`\n+  display: inline-flex;\n+  justify-content: center;\n+  align-items: center;\n+  width: 24px;\n+  height: 24px;\n+  border-radius: 50%;\n+  background-color: ${({ color }) => color};\n+\n+  &: ${hover} {\n+    outline: 2px solid ${s(\"menuBackground\")} !important;\n+    box-shadow: ${({ color }) => `0px 0px 3px 3px ${color}`};\n+  }\n+\n+  & ${Selected} {\n+    display: ${({ active }) => (active ? \"block\" : \"none\")};\n+  }\n+`;\n+\n+const PanelSwitcher = styled(Flex)`\n+  width: 40px;\n+  border-right: 1px solid ${s(\"inputBorder\")};\n+`;\n+\n+const SwitcherButton = styled(NudeButton)<{ panel: Panel }>`\n+  display: inline-flex;\n+  justify-content: center;\n+  align-items: center;\n+  font-size: 14px;\n+  border: 1px solid ${s(\"inputBorder\")};\n+  transition: all 100ms ease-in-out;\n+\n+  &: ${hover} {\n+    border-color: ${s(\"inputBorderFocused\")};\n+  }\n+`;\n+\n+const LargeMobileBuiltinColors = styled(BuiltinColors)`\n+  max-width: 380px;\n+  padding-right: 8px;\n+`;\n+\n+const LargeMobileCustomColor = styled(CustomColor)`\n+  padding-left: 8px;\n+  border-left: 1px solid ${s(\"inputBorder\")};\n+  width: 120px;\n+`;\n+\n+const CustomColorInput = styled.input.attrs(() => ({\n+  type: \"text\",\n+  autocomplete: \"off\",\n+}))`\n+  font-size: 14px;\n+  color: ${s(\"textSecondary\")};\n+  background: transparent;\n+  border: 0;\n+  outline: 0;\n+`;\n+\n+export default ColorPicker;\n\ndiff --git a/app/components/IconPicker/components/Emoji.tsx b/app/components/IconPicker/components/Emoji.tsx\nnew file mode 100644\nindex 000000000000..2223147282f5\n--- /dev/null\n+++ b/app/components/IconPicker/components/Emoji.tsx\n@@ -0,0 +1,8 @@\n+import styled from \"styled-components\";\n+import { s } from \"@shared/styles\";\n+\n+export const Emoji = styled.span`\n+  font-family: ${s(\"fontFamilyEmoji\")};\n+  width: 24px;\n+  height: 24px;\n+`;\n\ndiff --git a/app/components/IconPicker/components/EmojiPanel.tsx b/app/components/IconPicker/components/EmojiPanel.tsx\nnew file mode 100644\nindex 000000000000..1bc22a362a5b\n--- /dev/null\n+++ b/app/components/IconPicker/components/EmojiPanel.tsx\n@@ -0,0 +1,245 @@\n+import concat from \"lodash/concat\";\n+import React from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import styled from \"styled-components\";\n+import { EmojiCategory, EmojiSkinTone, IconType } from \"@shared/types\";\n+import { getEmojis, getEmojisWithCategory, search } from \"@shared/utils/emoji\";\n+import Flex from \"~/components/Flex\";\n+import InputSearch from \"~/components/InputSearch\";\n+import usePersistedState from \"~/hooks/usePersistedState\";\n+import {\n+  FREQUENTLY_USED_COUNT,\n+  DisplayCategory,\n+  emojiSkinToneKey,\n+  emojisFreqKey,\n+  lastEmojiKey,\n+  sortFrequencies,\n+} from \"../utils\";\n+import GridTemplate, { DataNode } from \"./GridTemplate\";\n+import SkinTonePicker from \"./SkinTonePicker\";\n+\n+/**\n+ * This is needed as a constant for react-window.\n+ * Calculated from the heights of TabPanel and InputSearch.\n+ */\n+const GRID_HEIGHT = 362;\n+\n+const useEmojiState = () => {\n+  const [emojiSkinTone, setEmojiSkinTone] = usePersistedState<EmojiSkinTone>(\n+    emojiSkinToneKey,\n+    EmojiSkinTone.Default\n+  );\n+  const [emojisFreq, setEmojisFreq] = usePersistedState<Record<string, number>>(\n+    emojisFreqKey,\n+    {}\n+  );\n+  const [lastEmoji, setLastEmoji] = usePersistedState<string | undefined>(\n+    lastEmojiKey,\n+    undefined\n+  );\n+\n+  const incrementEmojiCount = React.useCallback(\n+    (emoji: string) => {\n+      emojisFreq[emoji] = (emojisFreq[emoji] ?? 0) + 1;\n+      setEmojisFreq({ ...emojisFreq });\n+      setLastEmoji(emoji);\n+    },\n+    [emojisFreq, setEmojisFreq, setLastEmoji]\n+  );\n+\n+  const getFreqEmojis = React.useCallback(() => {\n+    const freqs = Object.entries(emojisFreq);\n+\n+    if (freqs.length > FREQUENTLY_USED_COUNT.Track) {\n+      sortFrequencies(freqs).splice(FREQUENTLY_USED_COUNT.Track);\n+      setEmojisFreq(Object.fromEntries(freqs));\n+    }\n+\n+    const emojis = sortFrequencies(freqs)\n+      .slice(0, FREQUENTLY_USED_COUNT.Get)\n+      .map(([emoji, _]) => emoji);\n+\n+    const isLastPresent = emojis.includes(lastEmoji ?? \"\");\n+    if (lastEmoji && !isLastPresent) {\n+      emojis.pop();\n+      emojis.push(lastEmoji);\n+    }\n+\n+    return emojis;\n+  }, [emojisFreq, setEmojisFreq, lastEmoji]);\n+\n+  return {\n+    emojiSkinTone,\n+    setEmojiSkinTone,\n+    incrementEmojiCount,\n+    getFreqEmojis,\n+  };\n+};\n+\n+type Props = {\n+  panelWidth: number;\n+  query: string;\n+  panelActive: boolean;\n+  onEmojiChange: (emoji: string) => void;\n+  onQueryChange: (query: string) => void;\n+};\n+\n+const EmojiPanel = ({\n+  panelWidth,\n+  query,\n+  panelActive,\n+  onEmojiChange,\n+  onQueryChange,\n+}: Props) => {\n+  const { t } = useTranslation();\n+\n+  const searchRef = React.useRef<HTMLInputElement | null>(null);\n+  const scrollableRef = React.useRef<HTMLDivElement | null>(null);\n+\n+  const {\n+    emojiSkinTone: skinTone,\n+    setEmojiSkinTone,\n+    incrementEmojiCount,\n+    getFreqEmojis,\n+  } = useEmojiState();\n+\n+  const freqEmojis = React.useMemo(() => getFreqEmojis(), [getFreqEmojis]);\n+\n+  const handleFilter = React.useCallback(\n+    (event: React.ChangeEvent<HTMLInputElement>) => {\n+      onQueryChange(event.target.value);\n+    },\n+    [onQueryChange]\n+  );\n+\n+  const handleSkinChange = React.useCallback(\n+    (emojiSkinTone: EmojiSkinTone) => {\n+      setEmojiSkinTone(emojiSkinTone);\n+    },\n+    [setEmojiSkinTone]\n+  );\n+\n+  const handleEmojiSelection = React.useCallback(\n+    ({ id, value }: { id: string; value: string }) => {\n+      onEmojiChange(value);\n+      incrementEmojiCount(id);\n+    },\n+    [onEmojiChange, incrementEmojiCount]\n+  );\n+\n+  const isSearch = query !== \"\";\n+  const templateData: DataNode[] = isSearch\n+    ? getSearchResults({\n+        query,\n+        skinTone,\n+      })\n+    : getAllEmojis({\n+        skinTone,\n+        freqEmojis,\n+      });\n+\n+  React.useEffect(() => {\n+    if (scrollableRef.current) {\n+      scrollableRef.current.scrollTop = 0;\n+    }\n+    searchRef.current?.focus();\n+  }, [panelActive]);\n+\n+  return (\n+    <Flex column>\n+      <UserInputContainer align=\"center\" gap={12}>\n+        <StyledInputSearch\n+          ref={searchRef}\n+          value={query}\n+          placeholder={`${t(\"Search emoji\")}…`}\n+          onChange={handleFilter}\n+        />\n+        <SkinTonePicker skinTone={skinTone} onChange={handleSkinChange} />\n+      </UserInputContainer>\n+      <GridTemplate\n+        ref={scrollableRef}\n+        width={panelWidth}\n+        height={GRID_HEIGHT}\n+        data={templateData}\n+        onIconSelect={handleEmojiSelection}\n+      />\n+    </Flex>\n+  );\n+};\n+\n+const getSearchResults = ({\n+  query,\n+  skinTone,\n+}: {\n+  query: string;\n+  skinTone: EmojiSkinTone;\n+}): DataNode[] => {\n+  const emojis = search({ query, skinTone });\n+  return [\n+    {\n+      category: DisplayCategory.Search,\n+      icons: emojis.map((emoji) => ({\n+        type: IconType.Emoji,\n+        id: emoji.id,\n+        value: emoji.value,\n+      })),\n+    },\n+  ];\n+};\n+\n+const getAllEmojis = ({\n+  skinTone,\n+  freqEmojis,\n+}: {\n+  skinTone: EmojiSkinTone;\n+  freqEmojis: string[];\n+}): DataNode[] => {\n+  const emojisWithCategory = getEmojisWithCategory({ skinTone });\n+\n+  const getFrequentEmojis = (): DataNode => {\n+    const emojis = getEmojis({ ids: freqEmojis, skinTone });\n+    return {\n+      category: DisplayCategory.Frequent,\n+      icons: emojis.map((emoji) => ({\n+        type: IconType.Emoji,\n+        id: emoji.id,\n+        value: emoji.value,\n+      })),\n+    };\n+  };\n+\n+  const getCategoryData = (emojiCategory: EmojiCategory): DataNode => {\n+    const emojis = emojisWithCategory[emojiCategory] ?? [];\n+    return {\n+      category: emojiCategory,\n+      icons: emojis.map((emoji) => ({\n+        type: IconType.Emoji,\n+        id: emoji.id,\n+        value: emoji.value,\n+      })),\n+    };\n+  };\n+\n+  return concat(\n+    getFrequentEmojis(),\n+    getCategoryData(EmojiCategory.People),\n+    getCategoryData(EmojiCategory.Nature),\n+    getCategoryData(EmojiCategory.Foods),\n+    getCategoryData(EmojiCategory.Activity),\n+    getCategoryData(EmojiCategory.Places),\n+    getCategoryData(EmojiCategory.Objects),\n+    getCategoryData(EmojiCategory.Symbols),\n+    getCategoryData(EmojiCategory.Flags)\n+  );\n+};\n+\n+const UserInputContainer = styled(Flex)`\n+  height: 48px;\n+  padding: 6px 12px 0px;\n+`;\n+\n+const StyledInputSearch = styled(InputSearch)`\n+  flex-grow: 1;\n+`;\n+\n+export default EmojiPanel;\n\ndiff --git a/app/components/IconPicker/components/Grid.tsx b/app/components/IconPicker/components/Grid.tsx\nnew file mode 100644\nindex 000000000000..aec654a640b3\n--- /dev/null\n+++ b/app/components/IconPicker/components/Grid.tsx\n@@ -0,0 +1,61 @@\n+import React from \"react\";\n+import { FixedSizeList, ListChildComponentProps } from \"react-window\";\n+import styled from \"styled-components\";\n+\n+type Props = {\n+  width: number;\n+  height: number;\n+  data: React.ReactNode[][];\n+  columns: number;\n+  itemWidth: number;\n+};\n+\n+const Grid = (\n+  { width, height, data, columns, itemWidth }: Props,\n+  ref: React.Ref<HTMLDivElement>\n+) => (\n+  <Container\n+    outerRef={ref}\n+    width={width}\n+    height={height}\n+    itemCount={data.length}\n+    itemSize={itemWidth}\n+    itemData={{ data, columns }}\n+  >\n+    {Row}\n+  </Container>\n+);\n+\n+type RowProps = {\n+  data: React.ReactNode[][];\n+  columns: number;\n+};\n+\n+const Row = ({ index, style, data }: ListChildComponentProps<RowProps>) => {\n+  const { data: rows, columns } = data;\n+  const row = rows[index];\n+\n+  return (\n+    <RowContainer style={style} columns={columns}>\n+      {row}\n+    </RowContainer>\n+  );\n+};\n+\n+const Container = styled(FixedSizeList<RowProps>)`\n+  padding: 0px 12px;\n+\n+  // Needed for the absolutely positioned children\n+  // to respect the VirtualList's padding\n+  & > div {\n+    position: relative;\n+  }\n+`;\n+\n+const RowContainer = styled.div<{ columns: number }>`\n+  display: grid;\n+  grid-template-columns: ${({ columns }) => `repeat(${columns}, 1fr)`};\n+  align-content: center;\n+`;\n+\n+export default React.forwardRef(Grid);\n\ndiff --git a/app/components/IconPicker/components/GridTemplate.tsx b/app/components/IconPicker/components/GridTemplate.tsx\nnew file mode 100644\nindex 000000000000..3ab7c12cc724\n--- /dev/null\n+++ b/app/components/IconPicker/components/GridTemplate.tsx\n@@ -0,0 +1,120 @@\n+import chunk from \"lodash/chunk\";\n+import compact from \"lodash/compact\";\n+import React from \"react\";\n+import styled from \"styled-components\";\n+import { IconType } from \"@shared/types\";\n+import { IconLibrary } from \"@shared/utils/IconLibrary\";\n+import Text from \"~/components/Text\";\n+import { TRANSLATED_CATEGORIES } from \"../utils\";\n+import { Emoji } from \"./Emoji\";\n+import Grid from \"./Grid\";\n+import { IconButton } from \"./IconButton\";\n+\n+/**\n+ * icon/emoji size is 24px; and we add 4px padding on all sides,\n+ */\n+const BUTTON_SIZE = 32;\n+\n+type OutlineNode = {\n+  type: IconType.Outline;\n+  name: string;\n+  color: string;\n+  initial: string;\n+  delay: number;\n+};\n+\n+type EmojiNode = {\n+  type: IconType.Emoji;\n+  id: string;\n+  value: string;\n+};\n+\n+export type DataNode = {\n+  category: keyof typeof TRANSLATED_CATEGORIES;\n+  icons: (OutlineNode | EmojiNode)[];\n+};\n+\n+type Props = {\n+  width: number;\n+  height: number;\n+  data: DataNode[];\n+  onIconSelect: ({ id, value }: { id: string; value: string }) => void;\n+};\n+\n+const GridTemplate = (\n+  { width, height, data, onIconSelect }: Props,\n+  ref: React.Ref<HTMLDivElement>\n+) => {\n+  // 24px padding for the Grid Container\n+  const itemsPerRow = Math.floor((width - 24) / BUTTON_SIZE);\n+\n+  const gridItems = compact(\n+    data.flatMap((node) => {\n+      if (node.icons.length === 0) {\n+        return [];\n+      }\n+\n+      const category = (\n+        <CategoryName\n+          key={node.category}\n+          type=\"tertiary\"\n+          size=\"xsmall\"\n+          weight=\"bold\"\n+        >\n+          {TRANSLATED_CATEGORIES[node.category]}\n+        </CategoryName>\n+      );\n+\n+      const items = node.icons.map((item) => {\n+        if (item.type === IconType.Outline) {\n+          return (\n+            <IconButton\n+              key={item.name}\n+              onClick={() => onIconSelect({ id: item.name, value: item.name })}\n+              delay={item.delay}\n+            >\n+              <Icon as={IconLibrary.getComponent(item.name)} color={item.color}>\n+                {item.initial}\n+              </Icon>\n+            </IconButton>\n+          );\n+        }\n+\n+        return (\n+          <IconButton\n+            key={item.id}\n+            onClick={() => onIconSelect({ id: item.id, value: item.value })}\n+          >\n+            <Emoji>{item.value}</Emoji>\n+          </IconButton>\n+        );\n+      });\n+\n+      const chunks = chunk(items, itemsPerRow);\n+      return [[category], ...chunks];\n+    })\n+  );\n+\n+  return (\n+    <Grid\n+      ref={ref}\n+      width={width}\n+      height={height}\n+      data={gridItems}\n+      columns={itemsPerRow}\n+      itemWidth={BUTTON_SIZE}\n+    />\n+  );\n+};\n+\n+const CategoryName = styled(Text)`\n+  grid-column: 1 / -1;\n+  padding-left: 6px;\n+`;\n+\n+const Icon = styled.svg`\n+  transition: color 150ms ease-in-out, fill 150ms ease-in-out;\n+  transition-delay: var(--delay);\n+`;\n+\n+export default React.forwardRef(GridTemplate);\n\ndiff --git a/app/components/IconPicker/components/IconButton.tsx b/app/components/IconPicker/components/IconButton.tsx\nnew file mode 100644\nindex 000000000000..af8923fb4ebb\n--- /dev/null\n+++ b/app/components/IconPicker/components/IconButton.tsx\n@@ -0,0 +1,15 @@\n+import styled from \"styled-components\";\n+import { s } from \"@shared/styles\";\n+import NudeButton from \"~/components/NudeButton\";\n+import { hover } from \"~/styles\";\n+\n+export const IconButton = styled(NudeButton)<{ delay?: number }>`\n+  width: 32px;\n+  height: 32px;\n+  padding: 4px;\n+  --delay: ${({ delay }) => delay && `${delay}ms`};\n+\n+  &: ${hover} {\n+    background: ${s(\"listItemHoverBackground\")};\n+  }\n+`;\n\ndiff --git a/app/components/IconPicker/components/IconPanel.tsx b/app/components/IconPicker/components/IconPanel.tsx\nnew file mode 100644\nindex 000000000000..c5ee144c589e\n--- /dev/null\n+++ b/app/components/IconPicker/components/IconPanel.tsx\n@@ -0,0 +1,200 @@\n+import React from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import styled from \"styled-components\";\n+import { IconType } from \"@shared/types\";\n+import { IconLibrary } from \"@shared/utils/IconLibrary\";\n+import Flex from \"~/components/Flex\";\n+import InputSearch from \"~/components/InputSearch\";\n+import usePersistedState from \"~/hooks/usePersistedState\";\n+import {\n+  FREQUENTLY_USED_COUNT,\n+  DisplayCategory,\n+  iconsFreqKey,\n+  lastIconKey,\n+  sortFrequencies,\n+} from \"../utils\";\n+import ColorPicker from \"./ColorPicker\";\n+import GridTemplate, { DataNode } from \"./GridTemplate\";\n+\n+const IconNames = Object.keys(IconLibrary.mapping);\n+const TotalIcons = IconNames.length;\n+\n+/**\n+ * This is needed as a constant for react-window.\n+ * Calculated from the heights of TabPanel, ColorPicker and InputSearch.\n+ */\n+const GRID_HEIGHT = 314;\n+\n+const useIconState = () => {\n+  const [iconsFreq, setIconsFreq] = usePersistedState<Record<string, number>>(\n+    iconsFreqKey,\n+    {}\n+  );\n+  const [lastIcon, setLastIcon] = usePersistedState<string | undefined>(\n+    lastIconKey,\n+    undefined\n+  );\n+\n+  const incrementIconCount = React.useCallback(\n+    (icon: string) => {\n+      iconsFreq[icon] = (iconsFreq[icon] ?? 0) + 1;\n+      setIconsFreq({ ...iconsFreq });\n+      setLastIcon(icon);\n+    },\n+    [iconsFreq, setIconsFreq, setLastIcon]\n+  );\n+\n+  const getFreqIcons = React.useCallback(() => {\n+    const freqs = Object.entries(iconsFreq);\n+\n+    if (freqs.length > FREQUENTLY_USED_COUNT.Track) {\n+      sortFrequencies(freqs).splice(FREQUENTLY_USED_COUNT.Track);\n+      setIconsFreq(Object.fromEntries(freqs));\n+    }\n+\n+    const icons = sortFrequencies(freqs)\n+      .slice(0, FREQUENTLY_USED_COUNT.Get)\n+      .map(([icon, _]) => icon);\n+\n+    const isLastPresent = icons.includes(lastIcon ?? \"\");\n+    if (lastIcon && !isLastPresent) {\n+      icons.pop();\n+      icons.push(lastIcon);\n+    }\n+\n+    return icons;\n+  }, [iconsFreq, setIconsFreq, lastIcon]);\n+\n+  return {\n+    incrementIconCount,\n+    getFreqIcons,\n+  };\n+};\n+\n+type Props = {\n+  panelWidth: number;\n+  initial: string;\n+  color: string;\n+  query: string;\n+  panelActive: boolean;\n+  onIconChange: (icon: string) => void;\n+  onColorChange: (icon: string) => void;\n+  onQueryChange: (query: string) => void;\n+};\n+\n+const IconPanel = ({\n+  panelWidth,\n+  initial,\n+  color,\n+  query,\n+  panelActive,\n+  onIconChange,\n+  onColorChange,\n+  onQueryChange,\n+}: Props) => {\n+  const { t } = useTranslation();\n+\n+  const searchRef = React.useRef<HTMLInputElement | null>(null);\n+  const scrollableRef = React.useRef<HTMLDivElement | null>(null);\n+\n+  const { incrementIconCount, getFreqIcons } = useIconState();\n+\n+  const freqIcons = React.useMemo(() => getFreqIcons(), [getFreqIcons]);\n+  const totalFreqIcons = freqIcons.length;\n+\n+  const filteredIcons = React.useMemo(\n+    () => IconLibrary.findIcons(query),\n+    [query]\n+  );\n+\n+  const isSearch = query !== \"\";\n+  const category = isSearch ? DisplayCategory.Search : DisplayCategory.All;\n+  const delayPerIcon = 250 / (TotalIcons + totalFreqIcons);\n+\n+  const handleFilter = React.useCallback(\n+    (event: React.ChangeEvent<HTMLInputElement>) => {\n+      onQueryChange(event.target.value);\n+    },\n+    [onQueryChange]\n+  );\n+\n+  const handleIconSelection = React.useCallback(\n+    ({ id, value }: { id: string; value: string }) => {\n+      onIconChange(value);\n+      incrementIconCount(id);\n+    },\n+    [onIconChange, incrementIconCount]\n+  );\n+\n+  const baseIcons: DataNode = {\n+    category,\n+    icons: filteredIcons.map((name, index) => ({\n+      type: IconType.Outline,\n+      name,\n+      color,\n+      initial,\n+      delay: Math.round((index + totalFreqIcons) * delayPerIcon),\n+      onClick: handleIconSelection,\n+    })),\n+  };\n+\n+  const templateData: DataNode[] = isSearch\n+    ? [baseIcons]\n+    : [\n+        {\n+          category: DisplayCategory.Frequent,\n+          icons: freqIcons.map((name, index) => ({\n+            type: IconType.Outline,\n+            name,\n+            color,\n+            initial,\n+            delay: Math.round((index + totalFreqIcons) * delayPerIcon),\n+            onClick: handleIconSelection,\n+          })),\n+        },\n+        baseIcons,\n+      ];\n+\n+  React.useEffect(() => {\n+    if (scrollableRef.current) {\n+      scrollableRef.current.scrollTop = 0;\n+    }\n+    searchRef.current?.focus();\n+  }, [panelActive]);\n+\n+  return (\n+    <Flex column>\n+      <InputSearchContainer align=\"center\">\n+        <StyledInputSearch\n+          ref={searchRef}\n+          value={query}\n+          placeholder={`${t(\"Search icons\")}…`}\n+          onChange={handleFilter}\n+        />\n+      </InputSearchContainer>\n+      <ColorPicker\n+        width={panelWidth}\n+        activeColor={color}\n+        onSelect={onColorChange}\n+      />\n+      <GridTemplate\n+        ref={scrollableRef}\n+        width={panelWidth}\n+        height={GRID_HEIGHT}\n+        data={templateData}\n+        onIconSelect={handleIconSelection}\n+      />\n+    </Flex>\n+  );\n+};\n+\n+const InputSearchContainer = styled(Flex)`\n+  height: 48px;\n+  padding: 6px 12px 0px;\n+`;\n+\n+const StyledInputSearch = styled(InputSearch)`\n+  flex-grow: 1;\n+`;\n+\n+export default IconPanel;\n\ndiff --git a/app/components/IconPicker/components/PopoverButton.tsx b/app/components/IconPicker/components/PopoverButton.tsx\nnew file mode 100644\nindex 000000000000..e53bf482ee12\n--- /dev/null\n+++ b/app/components/IconPicker/components/PopoverButton.tsx\n@@ -0,0 +1,20 @@\n+import styled, { css } from \"styled-components\";\n+import { s } from \"@shared/styles\";\n+import NudeButton from \"~/components/NudeButton\";\n+import { hover } from \"~/styles\";\n+\n+export const PopoverButton = styled(NudeButton)<{ $borderOnHover?: boolean }>`\n+  &: ${hover},\n+  &:active,\n+  &[aria-expanded= \"true\"] {\n+    opacity: 1 !important;\n+\n+    ${({ $borderOnHover }) =>\n+      $borderOnHover &&\n+      css`\n+        background: ${s(\"buttonNeutralBackground\")};\n+        box-shadow: rgba(0, 0, 0, 0.07) 0px 1px 2px,\n+          ${s(\"buttonNeutralBorder\")} 0 0 0 1px inset;\n+      `};\n+  }\n+`;\n\ndiff --git a/app/components/IconPicker/components/SkinTonePicker.tsx b/app/components/IconPicker/components/SkinTonePicker.tsx\nnew file mode 100644\nindex 000000000000..2061fd302d4a\n--- /dev/null\n+++ b/app/components/IconPicker/components/SkinTonePicker.tsx\n@@ -0,0 +1,92 @@\n+import React from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import { Menu, MenuButton, MenuItem, useMenuState } from \"reakit\";\n+import styled from \"styled-components\";\n+import { depths, s } from \"@shared/styles\";\n+import { EmojiSkinTone } from \"@shared/types\";\n+import { getEmojiVariants } from \"@shared/utils/emoji\";\n+import Flex from \"~/components/Flex\";\n+import NudeButton from \"~/components/NudeButton\";\n+import { hover } from \"~/styles\";\n+import { Emoji } from \"./Emoji\";\n+import { IconButton } from \"./IconButton\";\n+\n+const SkinTonePicker = ({\n+  skinTone,\n+  onChange,\n+}: {\n+  skinTone: EmojiSkinTone;\n+  onChange: (skin: EmojiSkinTone) => void;\n+}) => {\n+  const { t } = useTranslation();\n+\n+  const handEmojiVariants = React.useMemo(\n+    () => getEmojiVariants({ id: \"hand\" }),\n+    []\n+  );\n+\n+  const menu = useMenuState({\n+    placement: \"bottom\",\n+  });\n+\n+  const handleSkinClick = React.useCallback(\n+    (emojiSkin) => {\n+      menu.hide();\n+      onChange(emojiSkin);\n+    },\n+    [menu, onChange]\n+  );\n+\n+  const menuItems = React.useMemo(\n+    () =>\n+      Object.entries(handEmojiVariants).map(([eskin, emoji]) => (\n+        <MenuItem {...menu} key={emoji.value}>\n+          {(menuprops) => (\n+            <IconButton {...menuprops} onClick={() => handleSkinClick(eskin)}>\n+              <Emoji>{emoji.value}</Emoji>\n+            </IconButton>\n+          )}\n+        </MenuItem>\n+      )),\n+    [menu, handEmojiVariants, handleSkinClick]\n+  );\n+\n+  return (\n+    <>\n+      <MenuButton {...menu}>\n+        {(props) => (\n+          <StyledMenuButton\n+            {...props}\n+            aria-label={t(\"Choose default skin tone\")}\n+          >\n+            {handEmojiVariants[skinTone]!.value}\n+          </StyledMenuButton>\n+        )}\n+      </MenuButton>\n+      <Menu {...menu} aria-label={t(\"Choose default skin tone\")}>\n+        {(props) => <MenuContainer {...props}>{menuItems}</MenuContainer>}\n+      </Menu>\n+    </>\n+  );\n+};\n+\n+const MenuContainer = styled(Flex)`\n+  z-index: ${depths.menu};\n+  padding: 4px;\n+  border-radius: 4px;\n+  background: ${s(\"menuBackground\")};\n+  box-shadow: ${s(\"menuShadow\")};\n+`;\n+\n+const StyledMenuButton = styled(NudeButton)`\n+  width: 32px;\n+  height: 32px;\n+  border: 1px solid ${s(\"inputBorder\")};\n+  padding: 4px;\n+\n+  &: ${hover} {\n+    border: 1px solid ${s(\"inputBorderFocused\")};\n+  }\n+`;\n+\n+export default SkinTonePicker;\n\ndiff --git a/app/components/IconPicker/index.tsx b/app/components/IconPicker/index.tsx\nnew file mode 100644\nindex 000000000000..e5cdd25dda3b\n--- /dev/null\n+++ b/app/components/IconPicker/index.tsx\n@@ -0,0 +1,315 @@\n+import { SmileyIcon } from \"outline-icons\";\n+import * as React from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import {\n+  PopoverDisclosure,\n+  Tab,\n+  TabList,\n+  TabPanel,\n+  usePopoverState,\n+  useTabState,\n+} from \"reakit\";\n+import styled, { css } from \"styled-components\";\n+import { s } from \"@shared/styles\";\n+import theme from \"@shared/styles/theme\";\n+import { IconType } from \"@shared/types\";\n+import { determineIconType } from \"@shared/utils/icon\";\n+import Flex from \"~/components/Flex\";\n+import Icon from \"~/components/Icon\";\n+import NudeButton from \"~/components/NudeButton\";\n+import Popover from \"~/components/Popover\";\n+import useMobile from \"~/hooks/useMobile\";\n+import useOnClickOutside from \"~/hooks/useOnClickOutside\";\n+import useWindowSize from \"~/hooks/useWindowSize\";\n+import { hover } from \"~/styles\";\n+import EmojiPanel from \"./components/EmojiPanel\";\n+import IconPanel from \"./components/IconPanel\";\n+import { PopoverButton } from \"./components/PopoverButton\";\n+\n+const TAB_NAMES = {\n+  Icon: \"icon\",\n+  Emoji: \"emoji\",\n+} as const;\n+\n+const POPOVER_WIDTH = 408;\n+\n+type Props = {\n+  icon: string | null;\n+  color: string;\n+  size?: number;\n+  initial?: string;\n+  className?: string;\n+  popoverPosition: \"bottom-start\" | \"right\";\n+  allowDelete?: boolean;\n+  borderOnHover?: boolean;\n+  onChange: (icon: string | null, color: string | null) => void;\n+  onOpen?: () => void;\n+  onClose?: () => void;\n+};\n+\n+const IconPicker = ({\n+  icon,\n+  color,\n+  size = 24,\n+  initial,\n+  className,\n+  popoverPosition,\n+  allowDelete,\n+  onChange,\n+  onOpen,\n+  onClose,\n+  borderOnHover,\n+}: Props) => {\n+  const { t } = useTranslation();\n+\n+  const { width: windowWidth } = useWindowSize();\n+  const isMobile = useMobile();\n+\n+  const [query, setQuery] = React.useState(\"\");\n+  const [chosenColor, setChosenColor] = React.useState(color);\n+  const contentRef = React.useRef<HTMLDivElement | null>(null);\n+\n+  const iconType = determineIconType(icon);\n+  const defaultTab = React.useMemo(\n+    () =>\n+      iconType === IconType.Emoji ? TAB_NAMES[\"Emoji\"] : TAB_NAMES[\"Icon\"],\n+    [iconType]\n+  );\n+\n+  const popover = usePopoverState({\n+    placement: popoverPosition,\n+    modal: true,\n+    unstable_offset: [0, 0],\n+  });\n+  const tab = useTabState({ selectedId: defaultTab });\n+\n+  const popoverWidth = isMobile ? windowWidth : POPOVER_WIDTH;\n+  // In mobile, popover is absolutely positioned to leave 8px on both sides.\n+  const panelWidth = isMobile ? windowWidth - 16 : popoverWidth;\n+\n+  const resetDefaultTab = React.useCallback(() => {\n+    tab.select(defaultTab);\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\n+  }, [defaultTab]);\n+\n+  const handleIconChange = React.useCallback(\n+    (ic: string) => {\n+      popover.hide();\n+      const icType = determineIconType(ic);\n+      const finalColor = icType === IconType.Outline ? chosenColor : null;\n+      onChange(ic, finalColor);\n+    },\n+    [popover, onChange, chosenColor]\n+  );\n+\n+  const handleIconColorChange = React.useCallback(\n+    (c: string) => {\n+      setChosenColor(c);\n+\n+      const icType = determineIconType(icon);\n+      // Outline icon set; propagate color change\n+      if (icType === IconType.Outline) {\n+        onChange(icon, c);\n+      }\n+    },\n+    [icon, onChange]\n+  );\n+\n+  const handleIconRemove = React.useCallback(() => {\n+    popover.hide();\n+    onChange(null, null);\n+  }, [popover, onChange]);\n+\n+  const handleQueryChange = React.useCallback(\n+    (q: string) => setQuery(q),\n+    [setQuery]\n+  );\n+\n+  const handlePopoverButtonClick = React.useCallback(\n+    (ev: React.MouseEvent) => {\n+      ev.stopPropagation();\n+      if (popover.visible) {\n+        popover.hide();\n+      } else {\n+        popover.show();\n+      }\n+    },\n+    [popover]\n+  );\n+\n+  // Popover open effect\n+  React.useEffect(() => {\n+    if (popover.visible) {\n+      onOpen?.();\n+    } else {\n+      onClose?.();\n+      setQuery(\"\");\n+      resetDefaultTab();\n+    }\n+  }, [popover.visible, onOpen, onClose, setQuery, resetDefaultTab]);\n+\n+  // Custom click outside handling rather than using `hideOnClickOutside` from reakit so that we can\n+  // prevent event bubbling.\n+  useOnClickOutside(\n+    contentRef,\n+    (event) => {\n+      if (\n+        popover.visible &&\n+        !popover.unstable_disclosureRef.current?.contains(event.target as Node)\n+      ) {\n+        event.stopPropagation();\n+        event.preventDefault();\n+        popover.hide();\n+      }\n+    },\n+    { capture: true }\n+  );\n+\n+  return (\n+    <>\n+      <PopoverDisclosure {...popover}>\n+        {(props) => (\n+          <PopoverButton\n+            {...props}\n+            aria-label={t(\"Show menu\")}\n+            className={className}\n+            size={size}\n+            onClick={handlePopoverButtonClick}\n+            $borderOnHover={borderOnHover}\n+          >\n+            {iconType && icon ? (\n+              <Icon value={icon} color={color} size={size} initial={initial} />\n+            ) : (\n+              <StyledSmileyIcon color={theme.textTertiary} size={size} />\n+            )}\n+          </PopoverButton>\n+        )}\n+      </PopoverDisclosure>\n+      <Popover\n+        {...popover}\n+        ref={contentRef}\n+        width={popoverWidth}\n+        shrink\n+        aria-label={t(\"Icon Picker\")}\n+        onClick={(e) => e.stopPropagation()}\n+        hideOnClickOutside={false}\n+      >\n+        <>\n+          <TabActionsWrapper justify=\"space-between\" align=\"center\">\n+            <TabList {...tab}>\n+              <StyledTab\n+                {...tab}\n+                id={TAB_NAMES[\"Icon\"]}\n+                aria-label={t(\"Icons\")}\n+                active={tab.selectedId === TAB_NAMES[\"Icon\"]}\n+              >\n+                {t(\"Icons\")}\n+              </StyledTab>\n+              <StyledTab\n+                {...tab}\n+                id={TAB_NAMES[\"Emoji\"]}\n+                aria-label={t(\"Emojis\")}\n+                active={tab.selectedId === TAB_NAMES[\"Emoji\"]}\n+              >\n+                {t(\"Emojis\")}\n+              </StyledTab>\n+            </TabList>\n+            {allowDelete && icon && (\n+              <RemoveButton onClick={handleIconRemove}>\n+                {t(\"Remove\")}\n+              </RemoveButton>\n+            )}\n+          </TabActionsWrapper>\n+          <StyledTabPanel {...tab}>\n+            <IconPanel\n+              panelWidth={panelWidth}\n+              initial={initial ?? \"?\"}\n+              color={chosenColor}\n+              query={query}\n+              panelActive={\n+                popover.visible && tab.selectedId === TAB_NAMES[\"Icon\"]\n+              }\n+              onIconChange={handleIconChange}\n+              onColorChange={handleIconColorChange}\n+              onQueryChange={handleQueryChange}\n+            />\n+          </StyledTabPanel>\n+          <StyledTabPanel {...tab}>\n+            <EmojiPanel\n+              panelWidth={panelWidth}\n+              query={query}\n+              panelActive={\n+                popover.visible && tab.selectedId === TAB_NAMES[\"Emoji\"]\n+              }\n+              onEmojiChange={handleIconChange}\n+              onQueryChange={handleQueryChange}\n+            />\n+          </StyledTabPanel>\n+        </>\n+      </Popover>\n+    </>\n+  );\n+};\n+\n+const StyledSmileyIcon = styled(SmileyIcon)`\n+  flex-shrink: 0;\n+\n+  @media print {\n+    display: none;\n+  }\n+`;\n+\n+const RemoveButton = styled(NudeButton)`\n+  width: auto;\n+  font-weight: 500;\n+  font-size: 14px;\n+  color: ${s(\"textTertiary\")};\n+  padding: 8px 12px;\n+  transition: color 100ms ease-in-out;\n+  &: ${hover} {\n+    color: ${s(\"textSecondary\")};\n+  }\n+`;\n+\n+const TabActionsWrapper = styled(Flex)`\n+  padding-left: 12px;\n+  border-bottom: 1px solid ${s(\"inputBorder\")};\n+`;\n+\n+const StyledTab = styled(Tab)<{ active: boolean }>`\n+  position: relative;\n+  font-weight: 500;\n+  font-size: 14px;\n+  cursor: var(--pointer);\n+  background: none;\n+  border: 0;\n+  padding: 8px 12px;\n+  user-select: none;\n+  color: ${({ active }) => (active ? s(\"textSecondary\") : s(\"textTertiary\"))};\n+  transition: color 100ms ease-in-out;\n+\n+  &: ${hover} {\n+    color: ${s(\"textSecondary\")};\n+  }\n+\n+  ${({ active }) =>\n+    active &&\n+    css`\n+      &:after {\n+        content: \"\";\n+        position: absolute;\n+        bottom: 0;\n+        left: 0;\n+        right: 0;\n+        height: 1px;\n+        background: ${s(\"textSecondary\")};\n+      }\n+    `}\n+`;\n+\n+const StyledTabPanel = styled(TabPanel)`\n+  height: 410px;\n+  overflow-y: auto;\n+`;\n+\n+export default IconPicker;\n\ndiff --git a/app/components/IconPicker/utils.ts b/app/components/IconPicker/utils.ts\nnew file mode 100644\nindex 000000000000..6ef68a96905b\n--- /dev/null\n+++ b/app/components/IconPicker/utils.ts\n@@ -0,0 +1,50 @@\n+import i18next from \"i18next\";\n+\n+export enum DisplayCategory {\n+  All = \"All\",\n+  Frequent = \"Frequent\",\n+  Search = \"Search\",\n+}\n+\n+export const TRANSLATED_CATEGORIES = {\n+  All: i18next.t(\"All\"),\n+  Frequent: i18next.t(\"Frequently Used\"),\n+  Search: i18next.t(\"Search Results\"),\n+  People: i18next.t(\"Smileys & People\"),\n+  Nature: i18next.t(\"Animals & Nature\"),\n+  Foods: i18next.t(\"Food & Drink\"),\n+  Activity: i18next.t(\"Activity\"),\n+  Places: i18next.t(\"Travel & Places\"),\n+  Objects: i18next.t(\"Objects\"),\n+  Symbols: i18next.t(\"Symbols\"),\n+  Flags: i18next.t(\"Flags\"),\n+};\n+\n+export const FREQUENTLY_USED_COUNT = {\n+  Get: 24,\n+  Track: 30,\n+};\n+\n+const STORAGE_KEYS = {\n+  Base: \"icon-state\",\n+  EmojiSkinTone: \"emoji-skintone\",\n+  IconsFrequency: \"icons-freq\",\n+  EmojisFrequency: \"emojis-freq\",\n+  LastIcon: \"last-icon\",\n+  LastEmoji: \"last-emoji\",\n+};\n+\n+const getStorageKey = (key: string) => `${STORAGE_KEYS.Base}.${key}`;\n+\n+export const emojiSkinToneKey = getStorageKey(STORAGE_KEYS.EmojiSkinTone);\n+\n+export const iconsFreqKey = getStorageKey(STORAGE_KEYS.IconsFrequency);\n+\n+export const emojisFreqKey = getStorageKey(STORAGE_KEYS.EmojisFrequency);\n+\n+export const lastIconKey = getStorageKey(STORAGE_KEYS.LastIcon);\n+\n+export const lastEmojiKey = getStorageKey(STORAGE_KEYS.LastEmoji);\n+\n+export const sortFrequencies = (freqs: [string, number][]) =>\n+  freqs.sort((a, b) => (a[1] >= b[1] ? -1 : 1));\n\ndiff --git a/app/components/Icons/CollectionIcon.tsx b/app/components/Icons/CollectionIcon.tsx\nindex 2454bc3168b9..f3fbfb3453cb 100644\n--- a/app/components/Icons/CollectionIcon.tsx\n+++ b/app/components/Icons/CollectionIcon.tsx\n@@ -2,10 +2,11 @@ import { observer } from \"mobx-react\";\n import { CollectionIcon } from \"outline-icons\";\n import { getLuminance } from \"polished\";\n import * as React from \"react\";\n-import { IconLibrary } from \"@shared/utils/IconLibrary\";\n+import { randomElement } from \"@shared/random\";\n+import { colorPalette } from \"@shared/utils/collections\";\n import Collection from \"~/models/Collection\";\n+import Icon from \"~/components/Icon\";\n import useStores from \"~/hooks/useStores\";\n-import Logger from \"~/utils/Logger\";\n \n type Props = {\n   /** The collection to show an icon for */\n@@ -16,6 +17,7 @@ type Props = {\n   size?: number;\n   /** The color of the icon, defaults to the collection color */\n   color?: string;\n+  className?: string;\n };\n \n function ResolvedCollectionIcon({\n@@ -23,35 +25,41 @@ function ResolvedCollectionIcon({\n   color: inputColor,\n   expanded,\n   size,\n+  className,\n }: Props) {\n   const { ui } = useStores();\n \n-  // If the chosen icon color is very dark then we invert it in dark mode\n-  // otherwise it will be impossible to see against the dark background.\n-  const color =\n-    inputColor ||\n-    (ui.resolvedTheme === \"dark\" && collection.color !== \"currentColor\"\n-      ? getLuminance(collection.color) > 0.09\n-        ? collection.color\n-        : \"currentColor\"\n-      : collection.color);\n+  if (!collection.icon || collection.icon === \"collection\") {\n+    // If the chosen icon color is very dark then we invert it in dark mode\n+    // otherwise it will be impossible to see against the dark background.\n+    const collectionColor = collection.color ?? randomElement(colorPalette);\n+    const color =\n+      inputColor ||\n+      (ui.resolvedTheme === \"dark\" && collectionColor !== \"currentColor\"\n+        ? getLuminance(collectionColor) > 0.09\n+          ? collectionColor\n+          : \"currentColor\"\n+        : collectionColor);\n \n-  if (collection.icon && collection.icon !== \"collection\") {\n-    try {\n-      const Component = IconLibrary.getComponent(collection.icon);\n-      return (\n-        <Component color={color} size={size}>\n-          {collection.initial}\n-        </Component>\n-      );\n-    } catch (error) {\n-      Logger.warn(\"Failed to render custom icon\", {\n-        icon: collection.icon,\n-      });\n-    }\n+    return (\n+      <CollectionIcon\n+        color={color}\n+        expanded={expanded}\n+        size={size}\n+        className={className}\n+      />\n+    );\n   }\n \n-  return <CollectionIcon color={color} expanded={expanded} size={size} />;\n+  return (\n+    <Icon\n+      value={collection.icon}\n+      color={inputColor ?? collection.color ?? undefined}\n+      size={size}\n+      initial={collection.initial}\n+      className={className}\n+    />\n+  );\n }\n \n export default observer(ResolvedCollectionIcon);\n\ndiff --git a/app/components/Icons/EmojiIcon.tsx b/app/components/Icons/EmojiIcon.tsx\nindex d4ce0e61f679..6512008279be 100644\n--- a/app/components/Icons/EmojiIcon.tsx\n+++ b/app/components/Icons/EmojiIcon.tsx\n@@ -1,11 +1,13 @@\n import * as React from \"react\";\n import styled from \"styled-components\";\n+import { s } from \"@shared/styles\";\n \n type Props = {\n   /** The emoji to render */\n   emoji: string;\n   /** The size of the emoji, 24px is default to match standard icons */\n   size?: number;\n+  className?: string;\n };\n \n /**\n@@ -15,19 +17,28 @@ type Props = {\n export default function EmojiIcon({ size = 24, emoji, ...rest }: Props) {\n   return (\n     <Span $size={size} {...rest}>\n-      {emoji}\n+      <SVG size={size} emoji={emoji} />\n     </Span>\n   );\n }\n \n const Span = styled.span<{ $size: number }>`\n-  display: inline-flex;\n-  align-items: center;\n-  justify-content: center;\n-  text-align: center;\n-  flex-shrink: 0;\n+  font-family: ${s(\"fontFamilyEmoji\")};\n+  display: inline-block;\n   width: ${(props) => props.$size}px;\n   height: ${(props) => props.$size}px;\n-  text-indent: -0.15em;\n-  font-size: ${(props) => props.$size - 10}px;\n `;\n+\n+const SVG = ({ size, emoji }: { size: number; emoji: string }) => (\n+  <svg width={size} height={size} xmlns=\"http://www.w3.org/2000/svg\">\n+    <text\n+      x=\"50%\"\n+      y={\"55%\"}\n+      dominantBaseline=\"middle\"\n+      textAnchor=\"middle\"\n+      fontSize={size * 0.7}\n+    >\n+      {emoji}\n+    </text>\n+  </svg>\n+);\n\ndiff --git a/app/components/Popover.tsx b/app/components/Popover.tsx\nindex eecf0f71e511..afc1ba9b4705 100644\n--- a/app/components/Popover.tsx\n+++ b/app/components/Popover.tsx\n@@ -20,15 +20,18 @@ type Props = PopoverProps & {\n   hide: () => void;\n };\n \n-const Popover: React.FC<Props> = ({\n-  children,\n-  shrink,\n-  width = 380,\n-  scrollable = true,\n-  flex,\n-  mobilePosition,\n-  ...rest\n-}: Props) => {\n+const Popover = (\n+  {\n+    children,\n+    shrink,\n+    width = 380,\n+    scrollable = true,\n+    flex,\n+    mobilePosition,\n+    ...rest\n+  }: Props,\n+  ref: React.Ref<HTMLDivElement>\n+) => {\n   const isMobile = useMobile();\n \n   // Custom Escape handler rather than using hideOnEsc from reakit so we can\n@@ -50,6 +53,7 @@ const Popover: React.FC<Props> = ({\n     return (\n       <Dialog {...rest} modal>\n         <Contents\n+          ref={ref}\n           $shrink={shrink}\n           $scrollable={scrollable}\n           $flex={flex}\n@@ -64,6 +68,7 @@ const Popover: React.FC<Props> = ({\n   return (\n     <StyledPopover {...rest} hideOnEsc={false} hideOnClickOutside>\n       <Contents\n+        ref={ref}\n         $shrink={shrink}\n         $width={width}\n         $scrollable={scrollable}\n@@ -123,4 +128,4 @@ const Contents = styled.div<ContentsProps>`\n   `};\n `;\n \n-export default Popover;\n+export default React.forwardRef(Popover);\n\ndiff --git a/app/components/Sharing/Document/OtherAccess.tsx b/app/components/Sharing/Document/OtherAccess.tsx\nindex 1eadd30afbed..62e2993451a2 100644\n--- a/app/components/Sharing/Document/OtherAccess.tsx\n+++ b/app/components/Sharing/Document/OtherAccess.tsx\n@@ -4,7 +4,8 @@ import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { useTheme } from \"styled-components\";\n import Squircle from \"@shared/components/Squircle\";\n-import { CollectionPermission } from \"@shared/types\";\n+import { CollectionPermission, IconType } from \"@shared/types\";\n+import { determineIconType } from \"@shared/utils/icon\";\n import type Collection from \"~/models/Collection\";\n import type Document from \"~/models/Document\";\n import Flex from \"~/components/Flex\";\n@@ -54,15 +55,7 @@ export const OtherAccess = observer(({ document, children }: Props) => {\n             />\n           ) : usersInCollection ? (\n             <ListItem\n-              image={\n-                <Squircle color={collection.color} size={AvatarSize.Medium}>\n-                  <CollectionIcon\n-                    collection={collection}\n-                    color={theme.white}\n-                    size={16}\n-                  />\n-                </Squircle>\n-              }\n+              image={<CollectionSquircle collection={collection} />}\n               title={collection.name}\n               subtitle={t(\"Everyone in the collection\")}\n               actions={<AccessTooltip>{t(\"Can view\")}</AccessTooltip>}\n@@ -136,6 +129,24 @@ const AccessTooltip = ({\n   );\n };\n \n+const CollectionSquircle = ({ collection }: { collection: Collection }) => {\n+  const theme = useTheme();\n+  const iconType = determineIconType(collection.icon)!;\n+  const squircleColor =\n+    iconType === IconType.Outline ? collection.color! : theme.slateLight;\n+  const iconSize = iconType === IconType.Outline ? 16 : 22;\n+\n+  return (\n+    <Squircle color={squircleColor} size={AvatarSize.Medium}>\n+      <CollectionIcon\n+        collection={collection}\n+        color={theme.white}\n+        size={iconSize}\n+      />\n+    </Squircle>\n+  );\n+};\n+\n function useUsersInCollection(collection?: Collection) {\n   const { users, memberships } = useStores();\n   const { request } = useRequest(() =>\n\ndiff --git a/app/components/Sidebar/components/DocumentLink.tsx b/app/components/Sidebar/components/DocumentLink.tsx\nindex 628bec9bca9b..6d3581cbb8f8 100644\n--- a/app/components/Sidebar/components/DocumentLink.tsx\n+++ b/app/components/Sidebar/components/DocumentLink.tsx\n@@ -14,6 +14,7 @@ import { DocumentValidation } from \"@shared/validations\";\n import Collection from \"~/models/Collection\";\n import Document from \"~/models/Document\";\n import Fade from \"~/components/Fade\";\n+import Icon from \"~/components/Icon\";\n import NudeButton from \"~/components/NudeButton\";\n import Tooltip from \"~/components/Tooltip\";\n import useBoolean from \"~/hooks/useBoolean\";\n@@ -282,6 +283,8 @@ function InnerDocumentLink(\n   const title =\n     (activeDocument?.id === node.id ? activeDocument.title : node.title) ||\n     t(\"Untitled\");\n+  const icon = document?.icon || node.icon;\n+  const color = document?.color || node.color;\n \n   const isExpanded = expanded && !isDragging;\n   const hasChildren = nodeChildren.length > 0;\n@@ -324,7 +327,7 @@ function InnerDocumentLink(\n                     starred: inStarredSection,\n                   },\n                 }}\n-                emoji={document?.emoji || node.emoji}\n+                icon={icon && <Icon value={icon} color={color} />}\n                 label={\n                   <EditableTitle\n                     title={title}\n\ndiff --git a/app/components/Sidebar/components/SharedDocumentLink.tsx b/app/components/Sidebar/components/SharedDocumentLink.tsx\nindex 59b750774476..ff1adceb18c4 100644\n--- a/app/components/Sidebar/components/SharedDocumentLink.tsx\n+++ b/app/components/Sidebar/components/SharedDocumentLink.tsx\n@@ -5,6 +5,7 @@ import { useTranslation } from \"react-i18next\";\n import { NavigationNode } from \"@shared/types\";\n import Collection from \"~/models/Collection\";\n import Document from \"~/models/Document\";\n+import Icon from \"~/components/Icon\";\n import useStores from \"~/hooks/useStores\";\n import { sharedDocumentPath } from \"~/utils/routeHelpers\";\n import { descendants } from \"~/utils/tree\";\n@@ -111,7 +112,7 @@ function DocumentLink(\n         }}\n         expanded={hasChildDocuments && depth !== 0 ? expanded : undefined}\n         onDisclosureClick={handleDisclosureClick}\n-        emoji={node.emoji}\n+        icon={node.icon && <Icon value={node.icon} color={node.color} />}\n         label={title}\n         depth={depth}\n         exact={false}\n\ndiff --git a/app/components/Sidebar/components/SharedWithMeLink.tsx b/app/components/Sidebar/components/SharedWithMeLink.tsx\nindex 9460bed4a5cc..4b370c45644b 100644\n--- a/app/components/Sidebar/components/SharedWithMeLink.tsx\n+++ b/app/components/Sidebar/components/SharedWithMeLink.tsx\n@@ -2,7 +2,8 @@ import fractionalIndex from \"fractional-index\";\n import { observer } from \"mobx-react\";\n import * as React from \"react\";\n import styled from \"styled-components\";\n-import { NotificationEventType } from \"@shared/types\";\n+import { IconType, NotificationEventType } from \"@shared/types\";\n+import { determineIconType } from \"@shared/utils/icon\";\n import UserMembership from \"~/models/UserMembership\";\n import Fade from \"~/components/Fade\";\n import useBoolean from \"~/hooks/useBoolean\";\n@@ -78,10 +79,11 @@ function SharedWithMeLink({ userMembership }: Props) {\n       return null;\n     }\n \n-    const { emoji } = document;\n-    const label = emoji\n-      ? document.title.replace(emoji, \"\")\n-      : document.titleWithDefault;\n+    const { icon: docIcon } = document;\n+    const label =\n+      determineIconType(docIcon) === IconType.Emoji\n+        ? document.title.replace(docIcon!, \"\")\n+        : document.titleWithDefault;\n     const collection = document.collectionId\n       ? collections.get(document.collectionId)\n       : undefined;\n\ndiff --git a/app/components/Sidebar/components/SidebarLink.tsx b/app/components/Sidebar/components/SidebarLink.tsx\nindex ef8258893f20..67fe5410542c 100644\n--- a/app/components/Sidebar/components/SidebarLink.tsx\n+++ b/app/components/Sidebar/components/SidebarLink.tsx\n@@ -5,7 +5,6 @@ import breakpoint from \"styled-components-breakpoint\";\n import EventBoundary from \"@shared/components/EventBoundary\";\n import { s } from \"@shared/styles\";\n import { NavigationNode } from \"@shared/types\";\n-import EmojiIcon from \"~/components/Icons/EmojiIcon\";\n import NudeButton from \"~/components/NudeButton\";\n import { UnreadBadge } from \"~/components/UnreadBadge\";\n import useUnmount from \"~/hooks/useUnmount\";\n@@ -27,7 +26,6 @@ type Props = Omit<NavLinkProps, \"to\"> & {\n   onClickIntent?: () => void;\n   onDisclosureClick?: React.MouseEventHandler<HTMLButtonElement>;\n   icon?: React.ReactNode;\n-  emoji?: string | null;\n   label?: React.ReactNode;\n   menu?: React.ReactNode;\n   unreadBadge?: boolean;\n@@ -52,7 +50,6 @@ function SidebarLink(\n     onClick,\n     onClickIntent,\n     to,\n-    emoji,\n     label,\n     active,\n     isActiveDrop,\n@@ -142,7 +139,6 @@ function SidebarLink(\n             />\n           )}\n           {icon && <IconWrapper>{icon}</IconWrapper>}\n-          {emoji && <EmojiIcon emoji={emoji} />}\n           <Label>{label}</Label>\n           {unreadBadge && <UnreadBadge />}\n         </Content>\n\ndiff --git a/app/components/Sidebar/components/useSidebarLabelAndIcon.tsx b/app/components/Sidebar/components/useSidebarLabelAndIcon.tsx\nindex c1afa20a78cb..b729fb0d2308 100644\n--- a/app/components/Sidebar/components/useSidebarLabelAndIcon.tsx\n+++ b/app/components/Sidebar/components/useSidebarLabelAndIcon.tsx\n@@ -1,7 +1,7 @@\n import { DocumentIcon } from \"outline-icons\";\n import * as React from \"react\";\n+import Icon from \"~/components/Icon\";\n import CollectionIcon from \"~/components/Icons/CollectionIcon\";\n-import EmojiIcon from \"~/components/Icons/EmojiIcon\";\n import useStores from \"~/hooks/useStores\";\n \n interface SidebarItem {\n@@ -21,7 +21,11 @@ export function useSidebarLabelAndIcon(\n     if (document) {\n       return {\n         label: document.titleWithDefault,\n-        icon: document.emoji ? <EmojiIcon emoji={document.emoji} /> : icon,\n+        icon: document.icon ? (\n+          <Icon value={document.icon} color={document.color ?? undefined} />\n+        ) : (\n+          icon\n+        ),\n       };\n     }\n   }\n\ndiff --git a/app/editor/components/EmojiMenu.tsx b/app/editor/components/EmojiMenu.tsx\nindex 0cdb603c23dd..ce8946aa87f3 100644\n--- a/app/editor/components/EmojiMenu.tsx\n+++ b/app/editor/components/EmojiMenu.tsx\n@@ -1,11 +1,7 @@\n-import data, { type Emoji as TEmoji } from \"@emoji-mart/data\";\n-import { init, Data } from \"emoji-mart\";\n-import FuzzySearch from \"fuzzy-search\";\n import capitalize from \"lodash/capitalize\";\n-import sortBy from \"lodash/sortBy\";\n import React from \"react\";\n import { emojiMartToGemoji, snakeCase } from \"@shared/editor/lib/emoji\";\n-import { isMac } from \"@shared/utils/browser\";\n+import { search as emojiSearch } from \"@shared/utils/emoji\";\n import EmojiMenuItem from \"./EmojiMenuItem\";\n import SuggestionsMenu, {\n   Props as SuggestionsMenuProps,\n@@ -19,13 +15,6 @@ type Emoji = {\n   attrs: { markup: string; \"data-name\": string };\n };\n \n-init({\n-  data,\n-  noCountryFlags: isMac() ? false : undefined,\n-});\n-\n-let searcher: FuzzySearch<TEmoji>;\n-\n type Props = Omit<\n   SuggestionsMenuProps<Emoji>,\n   \"renderMenuItem\" | \"items\" | \"embeds\" | \"trigger\"\n@@ -34,36 +23,26 @@ type Props = Omit<\n const EmojiMenu = (props: Props) => {\n   const { search = \"\" } = props;\n \n-  if (!searcher) {\n-    searcher = new FuzzySearch(Object.values(Data.emojis), [\"search\"], {\n-      caseSensitive: false,\n-      sort: true,\n-    });\n-  }\n-\n-  const items = React.useMemo(() => {\n-    const n = search.toLowerCase();\n+  const items = React.useMemo(\n+    () =>\n+      emojiSearch({ query: search })\n+        .map((item) => {\n+          // We snake_case the shortcode for backwards compatability with gemoji to\n+          // avoid multiple formats being written into documents.\n+          const shortcode = snakeCase(emojiMartToGemoji[item.id] || item.id);\n+          const emoji = item.value;\n \n-    return sortBy(searcher.search(n), (item) => {\n-      const nlc = item.name.toLowerCase();\n-      return nlc === n ? -1 : nlc.startsWith(n) ? 0 : 1;\n-    })\n-      .map((item) => {\n-        // We snake_case the shortcode for backwards compatability with gemoji to\n-        // avoid multiple formats being written into documents.\n-        const shortcode = snakeCase(emojiMartToGemoji[item.id] || item.id);\n-        const emoji = item.skins[0].native;\n-\n-        return {\n-          name: \"emoji\",\n-          title: emoji,\n-          description: capitalize(item.name.toLowerCase()),\n-          emoji,\n-          attrs: { markup: shortcode, \"data-name\": shortcode },\n-        };\n-      })\n-      .slice(0, 15);\n-  }, [search]);\n+          return {\n+            name: \"emoji\",\n+            title: emoji,\n+            description: capitalize(item.name.toLowerCase()),\n+            emoji,\n+            attrs: { markup: shortcode, \"data-name\": shortcode },\n+          };\n+        })\n+        .slice(0, 15),\n+    [search]\n+  );\n \n   return (\n     <SuggestionsMenu\n\ndiff --git a/app/editor/extensions/PasteHandler.ts b/app/editor/extensions/PasteHandler.ts\nindex 2ddd2de3ce75..0df2ee5d6507 100644\n--- a/app/editor/extensions/PasteHandler.ts\n+++ b/app/editor/extensions/PasteHandler.ts\n@@ -7,6 +7,8 @@ import isMarkdown from \"@shared/editor/lib/isMarkdown\";\n import normalizePastedMarkdown from \"@shared/editor/lib/markdown/normalize\";\n import { isInCode } from \"@shared/editor/queries/isInCode\";\n import { isInList } from \"@shared/editor/queries/isInList\";\n+import { IconType } from \"@shared/types\";\n+import { determineIconType } from \"@shared/utils/icon\";\n import parseDocumentSlug from \"@shared/utils/parseDocumentSlug\";\n import { isDocumentUrl, isUrl } from \"@shared/utils/urls\";\n import stores from \"~/stores\";\n@@ -179,9 +181,12 @@ export default class PasteHandler extends Extension {\n                       if (document) {\n                         const { hash } = new URL(text);\n \n-                        const title = `${\n-                          document.emoji ? document.emoji + \" \" : \"\"\n-                        }${document.titleWithDefault}`;\n+                        const hasEmoji =\n+                          determineIconType(document.icon) === IconType.Emoji;\n+\n+                        const title = `${hasEmoji ? document.icon + \" \" : \"\"}${\n+                          document.titleWithDefault\n+                        }`;\n                         insertLink(`${document.path}${hash}`, title);\n                       }\n                     })\n\ndiff --git a/app/hooks/useTemplateActions.tsx b/app/hooks/useTemplateActions.tsx\nindex 0ee7e7fed1eb..273f151998cc 100644\n--- a/app/hooks/useTemplateActions.tsx\n+++ b/app/hooks/useTemplateActions.tsx\n@@ -1,6 +1,6 @@\n import { NewDocumentIcon, ShapesIcon } from \"outline-icons\";\n import * as React from \"react\";\n-import EmojiIcon from \"~/components/Icons/EmojiIcon\";\n+import Icon from \"~/components/Icon\";\n import { createAction } from \"~/actions\";\n import { DocumentSection } from \"~/actions/sections\";\n import history from \"~/utils/history\";\n@@ -21,8 +21,8 @@ const useTemplatesActions = () => {\n           name: item.titleWithDefault,\n           analyticsName: \"New document\",\n           section: DocumentSection,\n-          icon: item.emoji ? (\n-            <EmojiIcon emoji={item.emoji} />\n+          icon: item.icon ? (\n+            <Icon value={item.icon} color={item.color ?? undefined} />\n           ) : (\n             <NewDocumentIcon />\n           ),\n\ndiff --git a/app/menus/TemplatesMenu.tsx b/app/menus/TemplatesMenu.tsx\nindex a7d5e3983763..9332b8b7f77a 100644\n--- a/app/menus/TemplatesMenu.tsx\n+++ b/app/menus/TemplatesMenu.tsx\n@@ -8,7 +8,7 @@ import Button from \"~/components/Button\";\n import ContextMenu from \"~/components/ContextMenu\";\n import MenuItem from \"~/components/ContextMenu/MenuItem\";\n import Separator from \"~/components/ContextMenu/Separator\";\n-import EmojiIcon from \"~/components/Icons/EmojiIcon\";\n+import Icon from \"~/components/Icon\";\n import useCurrentUser from \"~/hooks/useCurrentUser\";\n import useStores from \"~/hooks/useStores\";\n import { replaceTitleVariables } from \"~/utils/date\";\n@@ -43,7 +43,11 @@ function TemplatesMenu({ onSelectTemplate, document }: Props) {\n       key={template.id}\n       onClick={() => onSelectTemplate(template)}\n       icon={\n-        template.emoji ? <EmojiIcon emoji={template.emoji} /> : <DocumentIcon />\n+        template.icon ? (\n+          <Icon value={template.icon} color={template.color ?? undefined} />\n+        ) : (\n+          <DocumentIcon />\n+        )\n       }\n       {...menu}\n     >\n\ndiff --git a/app/models/Collection.ts b/app/models/Collection.ts\nindex 4544c43a6405..f9ee80b1c176 100644\n--- a/app/models/Collection.ts\n+++ b/app/models/Collection.ts\n@@ -40,18 +40,18 @@ export default class Collection extends ParanoidModel {\n   data: ProsemirrorData;\n \n   /**\n-   * An emoji to use as the collection icon.\n+   * An icon (or) emoji to use as the collection icon.\n    */\n   @Field\n   @observable\n   icon: string;\n \n   /**\n-   * A color to use for the collection icon and other highlights.\n+   * The color to use for the collection icon and other highlights.\n    */\n   @Field\n   @observable\n-  color: string;\n+  color?: string | null;\n \n   /**\n    * The default permission for workspace users.\n\ndiff --git a/app/models/Document.ts b/app/models/Document.ts\nindex 7bd32f32e6ff..77cc48b11f4d 100644\n--- a/app/models/Document.ts\n+++ b/app/models/Document.ts\n@@ -129,11 +129,18 @@ export default class Document extends ParanoidModel {\n   title: string;\n \n   /**\n-   * An emoji to use as the document icon.\n+   * An icon (or) emoji to use as the document icon.\n    */\n   @Field\n   @observable\n-  emoji: string | undefined | null;\n+  icon?: string | null;\n+\n+  /**\n+   * The color to use for the document icon.\n+   */\n+  @Field\n+  @observable\n+  color?: string | null;\n \n   /**\n    * Whether this is a template.\n\ndiff --git a/app/models/Revision.ts b/app/models/Revision.ts\nindex 1a73a61453df..50be73d49d72 100644\n--- a/app/models/Revision.ts\n+++ b/app/models/Revision.ts\n@@ -22,8 +22,11 @@ class Revision extends Model {\n   /** Prosemirror data of the content when revision was created */\n   data: ProsemirrorData;\n \n-  /** The emoji of the document when the revision was created */\n-  emoji: string | null;\n+  /** The icon (or) emoji of the document when the revision was created */\n+  icon: string | null;\n+\n+  /** The color of the document icon when the revision was created */\n+  color: string | null;\n \n   /** HTML string representing the revision as a diff from the previous version */\n   html: string;\n\ndiff --git a/app/scenes/Collection/index.tsx b/app/scenes/Collection/index.tsx\nindex f2b3e1e2def5..29564982a998 100644\n--- a/app/scenes/Collection/index.tsx\n+++ b/app/scenes/Collection/index.tsx\n@@ -306,8 +306,9 @@ const HeadingWithIcon = styled(Heading)`\n `;\n \n const HeadingIcon = styled(CollectionIcon)`\n-  align-self: flex-start;\n   flex-shrink: 0;\n+  margin-left: -8px;\n+  margin-right: 8px;\n `;\n \n export default observer(CollectionScene);\n\ndiff --git a/app/scenes/Document/components/Document.tsx b/app/scenes/Document/components/Document.tsx\nindex a13bc04c992d..2ffc66ef510d 100644\n--- a/app/scenes/Document/components/Document.tsx\n+++ b/app/scenes/Document/components/Document.tsx\n@@ -19,9 +19,15 @@ import styled from \"styled-components\";\n import breakpoint from \"styled-components-breakpoint\";\n import { EditorStyleHelper } from \"@shared/editor/styles/EditorStyleHelper\";\n import { s } from \"@shared/styles\";\n-import { NavigationNode, TOCPosition, TeamPreference } from \"@shared/types\";\n+import {\n+  IconType,\n+  NavigationNode,\n+  TOCPosition,\n+  TeamPreference,\n+} from \"@shared/types\";\n import { ProsemirrorHelper, Heading } from \"@shared/utils/ProsemirrorHelper\";\n import { parseDomain } from \"@shared/utils/domains\";\n+import { determineIconType } from \"@shared/utils/icon\";\n import RootStore from \"~/stores/RootStore\";\n import Document from \"~/models/Document\";\n import Revision from \"~/models/Revision\";\n@@ -169,8 +175,11 @@ class DocumentScene extends React.Component<Props> {\n       this.title = title;\n       this.props.document.title = title;\n     }\n-    if (template.emoji) {\n-      this.props.document.emoji = template.emoji;\n+    if (template.icon) {\n+      this.props.document.icon = template.icon;\n+    }\n+    if (template.color) {\n+      this.props.document.color = template.color;\n     }\n \n     this.props.document.data = cloneDeep(template.data);\n@@ -383,8 +392,9 @@ class DocumentScene extends React.Component<Props> {\n     void this.autosave();\n   });\n \n-  handleChangeEmoji = action((value: string) => {\n-    this.props.document.emoji = value;\n+  handleChangeIcon = action((icon: string | null, color: string | null) => {\n+    this.props.document.icon = icon;\n+    this.props.document.color = color;\n     void this.onSave();\n   });\n \n@@ -425,6 +435,12 @@ class DocumentScene extends React.Component<Props> {\n       ? this.props.match.url\n       : updateDocumentPath(this.props.match.url, document);\n \n+    const hasEmojiInTitle = determineIconType(document.icon) === IconType.Emoji;\n+    const title = hasEmojiInTitle\n+      ? document.titleWithDefault.replace(document.icon!, \"\")\n+      : document.titleWithDefault;\n+    const favicon = hasEmojiInTitle ? emojiToUrl(document.icon!) : undefined;\n+\n     return (\n       <ErrorBoundary showTitle>\n         {this.props.location.pathname !== canonicalUrl && (\n@@ -459,10 +475,7 @@ class DocumentScene extends React.Component<Props> {\n           column\n           auto\n         >\n-          <PageTitle\n-            title={document.titleWithDefault.replace(document.emoji || \"\", \"\")}\n-            favicon={document.emoji ? emojiToUrl(document.emoji) : undefined}\n-          />\n+          <PageTitle title={title} favicon={favicon} />\n           {(this.isUploading || this.isSaving) && <LoadingIndicator />}\n           <Container column>\n             {!readOnly && (\n@@ -542,7 +555,7 @@ class DocumentScene extends React.Component<Props> {\n                         onSearchLink={this.props.onSearchLink}\n                         onCreateLink={this.props.onCreateLink}\n                         onChangeTitle={this.handleChangeTitle}\n-                        onChangeEmoji={this.handleChangeEmoji}\n+                        onChangeIcon={this.handleChangeIcon}\n                         onChange={this.handleChange}\n                         onHeadingsChange={this.onHeadingsChange}\n                         onSave={this.onSave}\n\ndiff --git a/app/scenes/Document/components/DocumentTitle.tsx b/app/scenes/Document/components/DocumentTitle.tsx\nindex 7eadb76a5cc0..7d689a69dc1a 100644\n--- a/app/scenes/Document/components/DocumentTitle.tsx\n+++ b/app/scenes/Document/components/DocumentTitle.tsx\n@@ -18,29 +18,32 @@ import {\n import { DocumentValidation } from \"@shared/validations\";\n import ContentEditable, { RefHandle } from \"~/components/ContentEditable\";\n import { useDocumentContext } from \"~/components/DocumentContext\";\n-import { Emoji, EmojiButton } from \"~/components/EmojiPicker/components\";\n import Flex from \"~/components/Flex\";\n+import Icon from \"~/components/Icon\";\n+import { PopoverButton } from \"~/components/IconPicker/components/PopoverButton\";\n import useBoolean from \"~/hooks/useBoolean\";\n import usePolicy from \"~/hooks/usePolicy\";\n import { isModKey } from \"~/utils/keyboard\";\n \n-const EmojiPicker = React.lazy(() => import(\"~/components/EmojiPicker\"));\n+const IconPicker = React.lazy(() => import(\"~/components/IconPicker\"));\n \n type Props = {\n   /** ID of the associated document */\n   documentId: string;\n   /** Title to display */\n   title: string;\n-  /** Emoji to display */\n-  emoji?: string | null;\n+  /** Icon to display */\n+  icon?: string | null;\n+  /** Icon color */\n+  color: string;\n   /** Placeholder to display when the document has no title */\n   placeholder?: string;\n   /** Should the title be editable, policies will also be considered separately */\n   readOnly?: boolean;\n   /** Callback called on any edits to text */\n   onChangeTitle?: (text: string) => void;\n-  /** Callback called when the user selects an emoji */\n-  onChangeEmoji?: (emoji: string | null) => void;\n+  /** Callback called when the user selects an icon */\n+  onChangeIcon?: (icon: string | null, color: string | null) => void;\n   /** Callback called when the user expects to move to the \"next\" input */\n   onGoToNextInput?: (insertParagraph?: boolean) => void;\n   /** Callback called when the user expects to save (CMD+S) */\n@@ -56,10 +59,11 @@ const DocumentTitle = React.forwardRef(function _DocumentTitle(\n   {\n     documentId,\n     title,\n-    emoji,\n+    icon,\n+    color,\n     readOnly,\n     onChangeTitle,\n-    onChangeEmoji,\n+    onChangeIcon,\n     onSave,\n     onGoToNextInput,\n     onBlur,\n@@ -68,7 +72,7 @@ const DocumentTitle = React.forwardRef(function _DocumentTitle(\n   externalRef: React.RefObject<RefHandle>\n ) {\n   const ref = React.useRef<RefHandle>(null);\n-  const [emojiPickerIsOpen, handleOpen, handleClose] = useBoolean();\n+  const [iconPickerIsOpen, handleOpen, handleClose] = useBoolean();\n   const { editor } = useDocumentContext();\n   const can = usePolicy(documentId);\n \n@@ -212,19 +216,26 @@ const DocumentTitle = React.forwardRef(function _DocumentTitle(\n     [editor]\n   );\n \n-  const handleEmojiChange = React.useCallback(\n-    async (value: string | null) => {\n-      // Restore focus on title\n-      restoreFocus();\n-      if (emoji !== value) {\n-        onChangeEmoji?.(value);\n+  const handleIconChange = React.useCallback(\n+    (chosenIcon: string | null, iconColor: string | null) => {\n+      if (icon !== chosenIcon || color !== iconColor) {\n+        onChangeIcon?.(chosenIcon, iconColor);\n       }\n     },\n-    [emoji, onChangeEmoji, restoreFocus]\n+    [icon, color, onChangeIcon]\n   );\n \n+  React.useEffect(() => {\n+    if (!iconPickerIsOpen) {\n+      restoreFocus();\n+    }\n+  }, [iconPickerIsOpen, restoreFocus]);\n+\n   const dir = ref.current?.getComputedDirection();\n-  const emojiIcon = <Emoji size={32}>{emoji}</Emoji>;\n+\n+  const fallbackIcon = icon ? (\n+    <Icon value={icon} color={color} size={40} />\n+  ) : null;\n \n   return (\n     <Title\n@@ -235,8 +246,8 @@ const DocumentTitle = React.forwardRef(function _DocumentTitle(\n       onBlur={handleBlur}\n       placeholder={placeholder}\n       value={title}\n-      $emojiPickerIsOpen={emojiPickerIsOpen}\n-      $containsEmoji={!!emoji}\n+      $iconPickerIsOpen={iconPickerIsOpen}\n+      $containsIcon={!!icon}\n       autoFocus={!title}\n       maxLength={DocumentValidation.maxTitleLength}\n       readOnly={readOnly}\n@@ -244,47 +255,33 @@ const DocumentTitle = React.forwardRef(function _DocumentTitle(\n       ref={mergeRefs([ref, externalRef])}\n     >\n       {can.update && !readOnly ? (\n-        <EmojiWrapper align=\"center\" justify=\"center\" dir={dir}>\n-          <React.Suspense fallback={emojiIcon}>\n-            <StyledEmojiPicker\n-              value={emoji}\n-              onChange={handleEmojiChange}\n+        <IconWrapper align=\"center\" justify=\"center\" dir={dir}>\n+          <React.Suspense fallback={fallbackIcon}>\n+            <StyledIconPicker\n+              icon={icon ?? null}\n+              color={color}\n+              size={40}\n+              popoverPosition=\"bottom-start\"\n+              allowDelete={true}\n+              borderOnHover={true}\n+              onChange={handleIconChange}\n               onOpen={handleOpen}\n               onClose={handleClose}\n-              onClickOutside={restoreFocus}\n-              autoFocus\n             />\n           </React.Suspense>\n-        </EmojiWrapper>\n-      ) : emoji ? (\n-        <EmojiWrapper align=\"center\" justify=\"center\" dir={dir}>\n-          {emojiIcon}\n-        </EmojiWrapper>\n+        </IconWrapper>\n+      ) : icon ? (\n+        <IconWrapper align=\"center\" justify=\"center\" dir={dir}>\n+          {fallbackIcon}\n+        </IconWrapper>\n       ) : null}\n     </Title>\n   );\n });\n \n-const StyledEmojiPicker = styled(EmojiPicker)`\n-  ${extraArea(8)}\n-`;\n-\n-const EmojiWrapper = styled(Flex)<{ dir?: string }>`\n-  position: absolute;\n-  top: 8px;\n-  height: 32px;\n-  width: 32px;\n-\n-  // Always move above TOC\n-  z-index: 1;\n-\n-  ${(props: { dir?: string }) =>\n-    props.dir === \"rtl\" ? \"right: -40px\" : \"left: -40px\"};\n-`;\n-\n type TitleProps = {\n-  $containsEmoji: boolean;\n-  $emojiPickerIsOpen: boolean;\n+  $containsIcon: boolean;\n+  $iconPickerIsOpen: boolean;\n };\n \n const Title = styled(ContentEditable)<TitleProps>`\n@@ -293,7 +290,7 @@ const Title = styled(ContentEditable)<TitleProps>`\n   margin-top: 6vh;\n   margin-bottom: 0.5em;\n   margin-left: ${(props) =>\n-    props.$containsEmoji || props.$emojiPickerIsOpen ? \"40px\" : \"0px\"};\n+    props.$containsIcon || props.$iconPickerIsOpen ? \"40px\" : \"0px\"};\n   font-size: ${fontSize};\n   font-weight: 600;\n   border: 0;\n@@ -314,14 +311,14 @@ const Title = styled(ContentEditable)<TitleProps>`\n   &:focus {\n     margin-left: 40px;\n \n-    ${EmojiButton} {\n+    ${PopoverButton} {\n       opacity: 1 !important;\n     }\n   }\n \n-  ${EmojiButton} {\n+  ${PopoverButton} {\n     opacity: ${(props: TitleProps) =>\n-      props.$containsEmoji ? \"1 !important\" : 0};\n+      props.$containsIcon ? \"1 !important\" : 0};\n   }\n \n   ${breakpoint(\"tablet\")`\n@@ -333,7 +330,7 @@ const Title = styled(ContentEditable)<TitleProps>`\n     }\n \n     &:hover {\n-      ${EmojiButton} {\n+      ${PopoverButton} {\n         opacity: 0.5;\n \n         &:hover {\n@@ -349,4 +346,21 @@ const Title = styled(ContentEditable)<TitleProps>`\n   }\n `;\n \n+const StyledIconPicker = styled(IconPicker)`\n+  ${extraArea(8)}\n+`;\n+\n+const IconWrapper = styled(Flex)<{ dir?: string }>`\n+  position: absolute;\n+  top: 3px;\n+  height: 40px;\n+  width: 40px;\n+\n+  // Always move above TOC\n+  z-index: 1;\n+\n+  ${(props: { dir?: string }) =>\n+    props.dir === \"rtl\" ? \"right: -48px\" : \"left: -48px\"};\n+`;\n+\n export default observer(DocumentTitle);\n\ndiff --git a/app/scenes/Document/components/Editor.tsx b/app/scenes/Document/components/Editor.tsx\nindex 789bf1f6a23a..f827efc20eb7 100644\n--- a/app/scenes/Document/components/Editor.tsx\n+++ b/app/scenes/Document/components/Editor.tsx\n@@ -4,7 +4,9 @@ import { useTranslation } from \"react-i18next\";\n import { mergeRefs } from \"react-merge-refs\";\n import { useHistory, useRouteMatch } from \"react-router-dom\";\n import { richExtensions, withComments } from \"@shared/editor/nodes\";\n+import { randomElement } from \"@shared/random\";\n import { TeamPreference } from \"@shared/types\";\n+import { colorPalette } from \"@shared/utils/collections\";\n import Comment from \"~/models/Comment\";\n import Document from \"~/models/Document\";\n import { RefHandle } from \"~/components/ContentEditable\";\n@@ -52,7 +54,7 @@ const extensions = [\n \n type Props = Omit<EditorProps, \"editorStyle\"> & {\n   onChangeTitle: (title: string) => void;\n-  onChangeEmoji: (emoji: string | null) => void;\n+  onChangeIcon: (icon: string | null, color: string | null) => void;\n   id: string;\n   document: Document;\n   isDraft: boolean;\n@@ -81,7 +83,7 @@ function DocumentEditor(props: Props, ref: React.RefObject<any>) {\n   const {\n     document,\n     onChangeTitle,\n-    onChangeEmoji,\n+    onChangeIcon,\n     isDraft,\n     shareId,\n     readOnly,\n@@ -91,6 +93,10 @@ function DocumentEditor(props: Props, ref: React.RefObject<any>) {\n   } = props;\n   const can = usePolicy(document);\n \n+  const iconColor = React.useMemo(\n+    () => document.color ?? randomElement(colorPalette),\n+    [document.color]\n+  );\n   const childRef = React.useRef<HTMLDivElement>(null);\n   const focusAtStart = React.useCallback(() => {\n     if (ref.current) {\n@@ -186,9 +192,10 @@ function DocumentEditor(props: Props, ref: React.RefObject<any>) {\n             ? document.titleWithDefault\n             : document.title\n         }\n-        emoji={document.emoji}\n+        icon={document.icon}\n+        color={iconColor}\n         onChangeTitle={onChangeTitle}\n-        onChangeEmoji={onChangeEmoji}\n+        onChangeIcon={onChangeIcon}\n         onGoToNextInput={handleGoToNextInput}\n         onBlur={handleBlur}\n         placeholder={t(\"Untitled\")}\n\ndiff --git a/app/scenes/Document/components/Header.tsx b/app/scenes/Document/components/Header.tsx\nindex 01fb61833fcb..79a57a7170f3 100644\n--- a/app/scenes/Document/components/Header.tsx\n+++ b/app/scenes/Document/components/Header.tsx\n@@ -24,8 +24,9 @@ import {\n   useDocumentContext,\n   useEditingFocus,\n } from \"~/components/DocumentContext\";\n+import Flex from \"~/components/Flex\";\n import Header from \"~/components/Header\";\n-import EmojiIcon from \"~/components/Icons/EmojiIcon\";\n+import Icon from \"~/components/Icon\";\n import Star from \"~/components/Star\";\n import Tooltip from \"~/components/Tooltip\";\n import { publishDocument } from \"~/actions/definitions/documents\";\n@@ -189,7 +190,14 @@ function DocumentHeader({\n     return (\n       <StyledHeader\n         $hidden={isEditingFocus}\n-        title={document.title}\n+        title={\n+          <Flex gap={4}>\n+            {document.icon && (\n+              <Icon value={document.icon} color={document.color ?? undefined} />\n+            )}\n+            {document.title}\n+          </Flex>\n+        }\n         hasSidebar={sharedTree && sharedTree.children?.length > 0}\n         left={\n           isMobile ? (\n@@ -229,17 +237,15 @@ function DocumentHeader({\n           )\n         }\n         title={\n-          <>\n-            {document.emoji && (\n-              <>\n-                <EmojiIcon size={24} emoji={document.emoji} />{\" \"}\n-              </>\n+          <Flex gap={4}>\n+            {document.icon && (\n+              <Icon value={document.icon} color={document.color ?? undefined} />\n             )}\n-            {document.title}{\" \"}\n+            {document.title}\n             {document.isArchived && (\n               <ArchivedBadge>{t(\"Archived\")}</ArchivedBadge>\n             )}\n-          </>\n+          </Flex>\n         }\n         actions={\n           <>\n\ndiff --git a/app/scenes/Document/components/PublicBreadcrumb.tsx b/app/scenes/Document/components/PublicBreadcrumb.tsx\nindex 8068016269f1..5b9f95b46c69 100644\n--- a/app/scenes/Document/components/PublicBreadcrumb.tsx\n+++ b/app/scenes/Document/components/PublicBreadcrumb.tsx\n@@ -1,7 +1,7 @@\n import * as React from \"react\";\n import { NavigationNode } from \"@shared/types\";\n import Breadcrumb from \"~/components/Breadcrumb\";\n-import EmojiIcon from \"~/components/Icons/EmojiIcon\";\n+import Icon from \"~/components/Icon\";\n import { MenuInternalLink } from \"~/types\";\n import { sharedDocumentPath } from \"~/utils/routeHelpers\";\n \n@@ -53,13 +53,10 @@ const PublicBreadcrumb: React.FC<Props> = ({\n         .slice(0, -1)\n         .map((item) => ({\n           ...item,\n-          title: item.emoji ? (\n-            <>\n-              <EmojiIcon emoji={item.emoji} /> {item.title}\n-            </>\n-          ) : (\n-            item.title\n-          ),\n+          icon: item.icon ? (\n+            <Icon value={item.icon} color={item.color} />\n+          ) : undefined,\n+          title: item.title,\n           type: \"route\",\n           to: sharedDocumentPath(shareId, item.url),\n         })),\n\ndiff --git a/app/scenes/Document/components/ReferenceListItem.tsx b/app/scenes/Document/components/ReferenceListItem.tsx\nindex 66a5306c2001..7106fbd95cba 100644\n--- a/app/scenes/Document/components/ReferenceListItem.tsx\n+++ b/app/scenes/Document/components/ReferenceListItem.tsx\n@@ -4,10 +4,11 @@ import * as React from \"react\";\n import { Link } from \"react-router-dom\";\n import styled from \"styled-components\";\n import { s, ellipsis } from \"@shared/styles\";\n-import { NavigationNode } from \"@shared/types\";\n+import { IconType, NavigationNode } from \"@shared/types\";\n+import { determineIconType } from \"@shared/utils/icon\";\n import Document from \"~/models/Document\";\n import Flex from \"~/components/Flex\";\n-import EmojiIcon from \"~/components/Icons/EmojiIcon\";\n+import Icon from \"~/components/Icon\";\n import { hover } from \"~/styles\";\n import { sharedDocumentPath } from \"~/utils/routeHelpers\";\n \n@@ -58,7 +59,8 @@ function ReferenceListItem({\n   shareId,\n   ...rest\n }: Props) {\n-  const { emoji } = document;\n+  const { icon, color } = document;\n+  const isEmoji = determineIconType(icon) === IconType.Emoji;\n \n   return (\n     <DocumentLink\n@@ -74,9 +76,13 @@ function ReferenceListItem({\n       {...rest}\n     >\n       <Content gap={4} dir=\"auto\">\n-        {emoji ? <EmojiIcon emoji={emoji} /> : <DocumentIcon />}\n+        {icon ? (\n+          <Icon value={icon} color={color ?? undefined} />\n+        ) : (\n+          <DocumentIcon />\n+        )}\n         <Title>\n-          {emoji ? document.title.replace(emoji, \"\") : document.title}\n+          {isEmoji ? document.title.replace(icon!, \"\") : document.title}\n         </Title>\n       </Content>\n     </DocumentLink>\n\ndiff --git a/app/scenes/Document/components/RevisionViewer.tsx b/app/scenes/Document/components/RevisionViewer.tsx\nindex 549e3c1ca3f9..08b017360ee9 100644\n--- a/app/scenes/Document/components/RevisionViewer.tsx\n+++ b/app/scenes/Document/components/RevisionViewer.tsx\n@@ -1,6 +1,7 @@\n import { observer } from \"mobx-react\";\n import * as React from \"react\";\n import EditorContainer from \"@shared/editor/components/Styles\";\n+import { colorPalette } from \"@shared/utils/collections\";\n import Document from \"~/models/Document\";\n import Revision from \"~/models/Revision\";\n import { Props as EditorProps } from \"~/components/Editor\";\n@@ -30,7 +31,8 @@ function RevisionViewer(props: Props) {\n       <DocumentTitle\n         documentId={revision.documentId}\n         title={revision.title}\n-        emoji={revision.emoji}\n+        icon={revision.icon}\n+        color={revision.color ?? colorPalette[0]}\n         readOnly\n       />\n       <DocumentMeta\n\ndiff --git a/app/typings/index.d.ts b/app/typings/index.d.ts\nindex be85a7b0c33a..3f5be08988b7 100644\n--- a/app/typings/index.d.ts\n+++ b/app/typings/index.d.ts\n@@ -2,8 +2,6 @@ declare module \"autotrack/autotrack.js\";\n \n declare module \"emoji-mart\";\n \n-declare module \"@emoji-mart/react\";\n-\n declare module \"string-replace-to-array\";\n \n declare module \"sequelize-encrypted\";\n\ndiff --git a/app/typings/styled-components.d.ts b/app/typings/styled-components.d.ts\nindex 31b962257255..0a5da6e6fa69 100644\n--- a/app/typings/styled-components.d.ts\n+++ b/app/typings/styled-components.d.ts\n@@ -19,6 +19,7 @@ declare module \"styled-components\" {\n     scrollbarThumb: string;\n     fontFamily: string;\n     fontFamilyMono: string;\n+    fontFamilyEmoji: string;\n     fontWeightRegular: number;\n     fontWeightMedium: number;\n     fontWeightBold: number;\n\ndiff --git a/package.json b/package.json\nindex ad043bdd73d0..d72bec340e66 100644\n--- a/package.json\n+++ b/package.json\n@@ -66,7 +66,6 @@\n     \"@dnd-kit/modifiers\": \"^6.0.1\",\n     \"@dnd-kit/sortable\": \"^7.0.2\",\n     \"@emoji-mart/data\": \"^1.2.1\",\n-    \"@emoji-mart/react\": \"^1.1.1\",\n     \"@fortawesome/fontawesome-svg-core\": \"^6.5.2\",\n     \"@fortawesome/free-solid-svg-icons\": \"^6.5.2\",\n     \"@fortawesome/react-fontawesome\": \"^0.2.0\",\n\ndiff --git a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\nindex aa593262461e..6def56ce7973 100644\n--- a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n+++ b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n@@ -1,5 +1,6 @@\n import { FetchError } from \"node-fetch\";\n import { Op } from \"sequelize\";\n+import { colorPalette } from \"@shared/utils/collections\";\n import WebhookDisabledEmail from \"@server/emails/templates/WebhookDisabledEmail\";\n import env from \"@server/env\";\n import Logger from \"@server/logging/Logger\";\n@@ -423,12 +424,18 @@ export default class DeliverWebhookTask extends BaseTask<Props> {\n       paranoid: false,\n     });\n \n+    const collection = model && (await presentCollection(undefined, model));\n+    if (collection) {\n+      // For backward compatibility, set a default color.\n+      collection.color = collection.color ?? colorPalette[0];\n+    }\n+\n     await this.sendWebhook({\n       event,\n       subscription,\n       payload: {\n         id: event.collectionId,\n-        model: model && (await presentCollection(undefined, model)),\n+        model: collection,\n       },\n     });\n   }\n@@ -448,14 +455,20 @@ export default class DeliverWebhookTask extends BaseTask<Props> {\n       paranoid: false,\n     });\n \n+    const collection =\n+      model && (await presentCollection(undefined, model.collection!));\n+    if (collection) {\n+      // For backward compatibility, set a default color.\n+      collection.color = collection.color ?? colorPalette[0];\n+    }\n+\n     await this.sendWebhook({\n       event,\n       subscription,\n       payload: {\n         id: event.modelId,\n         model: model && presentMembership(model),\n-        collection:\n-          model && (await presentCollection(undefined, model.collection!)),\n+        collection,\n         user: model && presentUser(model.user),\n       },\n     });\n@@ -476,14 +489,20 @@ export default class DeliverWebhookTask extends BaseTask<Props> {\n       paranoid: false,\n     });\n \n+    const collection =\n+      model && (await presentCollection(undefined, model.collection!));\n+    if (collection) {\n+      // For backward compatibility, set a default color.\n+      collection.color = collection.color ?? colorPalette[0];\n+    }\n+\n     await this.sendWebhook({\n       event,\n       subscription,\n       payload: {\n         id: event.modelId,\n         model: model && presentCollectionGroupMembership(model),\n-        collection:\n-          model && (await presentCollection(undefined, model.collection!)),\n+        collection,\n         group: model && presentGroup(model.group),\n       },\n     });\n\ndiff --git a/server/commands/documentCreator.ts b/server/commands/documentCreator.ts\nindex b9e8286f6e42..be0115af8d6f 100644\n--- a/server/commands/documentCreator.ts\n+++ b/server/commands/documentCreator.ts\n@@ -12,7 +12,8 @@ type Props = Optional<\n     | \"title\"\n     | \"text\"\n     | \"content\"\n-    | \"emoji\"\n+    | \"icon\"\n+    | \"color\"\n     | \"collectionId\"\n     | \"parentDocumentId\"\n     | \"importId\"\n@@ -36,7 +37,8 @@ type Props = Optional<\n export default async function documentCreator({\n   title = \"\",\n   text = \"\",\n-  emoji,\n+  icon,\n+  color,\n   state,\n   id,\n   urlId,\n@@ -96,9 +98,9 @@ export default async function documentCreator({\n       importId,\n       sourceMetadata,\n       fullWidth: templateDocument ? templateDocument.fullWidth : fullWidth,\n-      emoji: templateDocument ? templateDocument.emoji : emoji,\n-      icon: templateDocument ? templateDocument.emoji : emoji,\n-      color: templateDocument ? templateDocument.color : null,\n+      emoji: templateDocument ? templateDocument.emoji : icon,\n+      icon: templateDocument ? templateDocument.emoji : icon,\n+      color: templateDocument ? templateDocument.color : color,\n       title: TextHelper.replaceTemplateVariables(\n         templateDocument ? templateDocument.title : title,\n         user\n\ndiff --git a/server/commands/documentDuplicator.ts b/server/commands/documentDuplicator.ts\nindex eb094bfd7874..8e0b32928253 100644\n--- a/server/commands/documentDuplicator.ts\n+++ b/server/commands/documentDuplicator.ts\n@@ -45,7 +45,8 @@ export default async function documentDuplicator({\n \n   const duplicated = await documentCreator({\n     parentDocumentId: parentDocumentId ?? document.parentDocumentId,\n-    emoji: document.emoji,\n+    icon: document.icon ?? document.emoji,\n+    color: document.color,\n     template: document.template,\n     title: title ?? document.title,\n     content: document.content,\n@@ -78,7 +79,8 @@ export default async function documentDuplicator({\n     for (const childDocument of childDocuments) {\n       const duplicatedChildDocument = await documentCreator({\n         parentDocumentId: duplicated.id,\n-        emoji: childDocument.emoji,\n+        icon: childDocument.icon ?? childDocument.emoji,\n+        color: childDocument.color,\n         title: childDocument.title,\n         text: childDocument.text,\n         ...sharedProperties,\n\ndiff --git a/server/commands/documentImporter.ts b/server/commands/documentImporter.ts\nindex a17842c62002..13fa95670f6c 100644\n--- a/server/commands/documentImporter.ts\n+++ b/server/commands/documentImporter.ts\n@@ -28,7 +28,7 @@ async function documentImporter({\n   ip,\n   transaction,\n }: Props): Promise<{\n-  emoji?: string;\n+  icon?: string;\n   text: string;\n   title: string;\n   state: Buffer;\n@@ -43,9 +43,9 @@ async function documentImporter({\n   // find and extract emoji near the beginning of the document.\n   const regex = emojiRegex();\n   const matches = regex.exec(text.slice(0, 10));\n-  const emoji = matches ? matches[0] : undefined;\n-  if (emoji) {\n-    text = text.replace(emoji, \"\");\n+  const icon = matches ? matches[0] : undefined;\n+  if (icon) {\n+    text = text.replace(icon, \"\");\n   }\n \n   // If the first line of the imported text looks like a markdown heading\n@@ -96,7 +96,7 @@ async function documentImporter({\n     text,\n     state,\n     title,\n-    emoji,\n+    icon,\n   };\n }\n \n\ndiff --git a/server/commands/documentUpdater.ts b/server/commands/documentUpdater.ts\nindex 80c76bbdd9a0..155278fa914f 100644\n--- a/server/commands/documentUpdater.ts\n+++ b/server/commands/documentUpdater.ts\n@@ -9,8 +9,10 @@ type Props = {\n   document: Document;\n   /** The new title */\n   title?: string;\n-  /** The document emoji */\n-  emoji?: string | null;\n+  /** The document icon */\n+  icon?: string | null;\n+  /** The document icon's color */\n+  color?: string | null;\n   /** The new text content */\n   text?: string;\n   /** Whether the editing session is complete */\n@@ -46,7 +48,8 @@ export default async function documentUpdater({\n   user,\n   document,\n   title,\n-  emoji,\n+  icon,\n+  color,\n   text,\n   editorVersion,\n   templateId,\n@@ -65,9 +68,12 @@ export default async function documentUpdater({\n   if (title !== undefined) {\n     document.title = title.trim();\n   }\n-  if (emoji !== undefined) {\n-    document.emoji = emoji;\n-    document.icon = emoji;\n+  if (icon !== undefined) {\n+    document.emoji = icon;\n+    document.icon = icon;\n+  }\n+  if (color !== undefined) {\n+    document.color = color;\n   }\n   if (editorVersion) {\n     document.editorVersion = editorVersion;\n\ndiff --git a/server/models/Collection.ts b/server/models/Collection.ts\nindex 13ada881440d..2bf9509fb5a3 100644\n--- a/server/models/Collection.ts\n+++ b/server/models/Collection.ts\n@@ -183,6 +183,7 @@ class Collection extends ParanoidModel<\n   @Column(DataType.JSONB)\n   content: ProsemirrorData | null;\n \n+  /** An icon (or) emoji to use as the collection icon. */\n   @Length({\n     max: 50,\n     msg: `icon must be 50 characters or less`,\n@@ -190,6 +191,7 @@ class Collection extends ParanoidModel<\n   @Column\n   icon: string | null;\n \n+  /** The color of the icon. */\n   @IsHexColor\n   @Column\n   color: string | null;\n@@ -270,10 +272,6 @@ class Collection extends ParanoidModel<\n \n   @BeforeSave\n   static async onBeforeSave(model: Collection) {\n-    if (model.icon === \"collection\") {\n-      model.icon = null;\n-    }\n-\n     if (!model.content) {\n       model.content = await DocumentHelper.toJSON(model);\n     }\n\ndiff --git a/server/models/Document.ts b/server/models/Document.ts\nindex b3c4a723f55b..3de0309db181 100644\n--- a/server/models/Document.ts\n+++ b/server/models/Document.ts\n@@ -255,14 +255,18 @@ class Document extends ParanoidModel<\n   @Column\n   editorVersion: string;\n \n-  /** An emoji to use as the document icon. */\n+  /**\n+   * An emoji to use as the document icon,\n+   * This is used as fallback (for backward compat) when icon is not set.\n+   */\n   @Length({\n-    max: 1,\n-    msg: `Emoji must be a single character`,\n+    max: 50,\n+    msg: `Emoji must be 50 characters or less`,\n   })\n   @Column\n   emoji: string | null;\n \n+  /** An icon to use as the document icon. */\n   @Length({\n     max: 50,\n     msg: `icon must be 50 characters or less`,\n@@ -365,7 +369,11 @@ class Document extends ParanoidModel<\n       model.archivedAt ||\n       model.template ||\n       !model.publishedAt ||\n-      !(model.changed(\"title\") || model.changed(\"emoji\")) ||\n+      !(\n+        model.changed(\"title\") ||\n+        model.changed(\"icon\") ||\n+        model.changed(\"color\")\n+      ) ||\n       !model.collectionId\n     ) {\n       return;\n@@ -721,6 +729,8 @@ class Document extends ParanoidModel<\n     this.text = revision.text;\n     this.title = revision.title;\n     this.emoji = revision.emoji;\n+    this.icon = revision.icon;\n+    this.color = revision.color;\n   };\n \n   /**\n@@ -1083,6 +1093,8 @@ class Document extends ParanoidModel<\n       title: this.title,\n       url: this.url,\n       emoji: isNil(this.emoji) ? undefined : this.emoji,\n+      icon: isNil(this.icon) ? undefined : this.icon,\n+      color: isNil(this.color) ? undefined : this.color,\n       children,\n     };\n   };\n\ndiff --git a/server/models/Revision.ts b/server/models/Revision.ts\nindex f1e8500fec37..b2e39b00e1da 100644\n--- a/server/models/Revision.ts\n+++ b/server/models/Revision.ts\n@@ -71,13 +71,18 @@ class Revision extends IdModel<\n   @Column(DataType.JSONB)\n   content: ProsemirrorData;\n \n+  /**\n+   * An emoji to use as the document icon,\n+   * This is used as fallback (for backward compat) when icon is not set.\n+   */\n   @Length({\n-    max: 1,\n-    msg: `Emoji must be a single character`,\n+    max: 50,\n+    msg: `Emoji must be 50 characters or less`,\n   })\n   @Column\n   emoji: string | null;\n \n+  /** An icon to use as the document icon. */\n   @Length({\n     max: 50,\n     msg: `icon must be 50 characters or less`,\n@@ -134,7 +139,7 @@ class Revision extends IdModel<\n       title: document.title,\n       text: document.text,\n       emoji: document.emoji,\n-      icon: document.emoji,\n+      icon: document.icon,\n       color: document.color,\n       content: document.content,\n       userId: document.lastModifiedById,\n\ndiff --git a/server/models/helpers/DocumentHelper.tsx b/server/models/helpers/DocumentHelper.tsx\nindex 0d5bf837aa00..be461d42fb49 100644\n--- a/server/models/helpers/DocumentHelper.tsx\n+++ b/server/models/helpers/DocumentHelper.tsx\n@@ -8,7 +8,8 @@ import { Node } from \"prosemirror-model\";\n import * as Y from \"yjs\";\n import textBetween from \"@shared/editor/lib/textBetween\";\n import { EditorStyleHelper } from \"@shared/editor/styles/EditorStyleHelper\";\n-import { ProsemirrorData } from \"@shared/types\";\n+import { IconType, ProsemirrorData } from \"@shared/types\";\n+import { determineIconType } from \"@shared/utils/icon\";\n import { parser, serializer, schema } from \"@server/editor\";\n import { addTags } from \"@server/logging/tracer\";\n import { trace } from \"@server/logging/tracing\";\n@@ -148,7 +149,10 @@ export class DocumentHelper {\n       return text;\n     }\n \n-    const title = `${document.emoji ? document.emoji + \" \" : \"\"}${\n+    const icon = document.icon ?? document.emoji;\n+    const iconType = determineIconType(icon);\n+\n+    const title = `${iconType === IconType.Emoji ? icon + \" \" : \"\"}${\n       document.title\n     }`;\n \n\ndiff --git a/server/presenters/collection.ts b/server/presenters/collection.ts\nindex 70e8da24c3e5..0e7a6da5e400 100644\n--- a/server/presenters/collection.ts\n+++ b/server/presenters/collection.ts\n@@ -1,4 +1,3 @@\n-import { colorPalette } from \"@shared/utils/collections\";\n import Collection from \"@server/models/Collection\";\n import { DocumentHelper } from \"@server/models/helpers/DocumentHelper\";\n import { APIContext } from \"@server/types\";\n@@ -19,7 +18,7 @@ export default async function presentCollection(\n     sort: collection.sort,\n     icon: collection.icon,\n     index: collection.index,\n-    color: collection.color || colorPalette[0],\n+    color: collection.color,\n     permission: collection.permission,\n     sharing: collection.sharing,\n     createdAt: collection.createdAt,\n\ndiff --git a/server/presenters/document.ts b/server/presenters/document.ts\nindex a353965566d7..476560528dbb 100644\n--- a/server/presenters/document.ts\n+++ b/server/presenters/document.ts\n@@ -49,6 +49,8 @@ async function presentDocument(\n         : undefined,\n     text: !asData || options?.includeText ? text : undefined,\n     emoji: document.emoji,\n+    icon: document.icon,\n+    color: document.color,\n     tasks: document.tasks,\n     createdAt: document.createdAt,\n     createdBy: undefined,\n\ndiff --git a/server/presenters/revision.ts b/server/presenters/revision.ts\nindex df6c90875428..953b4789857f 100644\n--- a/server/presenters/revision.ts\n+++ b/server/presenters/revision.ts\n@@ -13,7 +13,8 @@ async function presentRevision(revision: Revision, diff?: string) {\n     documentId: revision.documentId,\n     title: strippedTitle,\n     data: await DocumentHelper.toJSON(revision),\n-    emoji: revision.emoji ?? emoji,\n+    icon: revision.icon ?? revision.emoji ?? emoji,\n+    color: revision.color,\n     html: diff,\n     createdAt: revision.createdAt,\n     createdBy: presentUser(revision.user),\n\ndiff --git a/server/queues/tasks/DocumentImportTask.ts b/server/queues/tasks/DocumentImportTask.ts\nindex 0dff34cce5ec..78a787b6c552 100644\n--- a/server/queues/tasks/DocumentImportTask.ts\n+++ b/server/queues/tasks/DocumentImportTask.ts\n@@ -43,7 +43,7 @@ export default class DocumentImportTask extends BaseTask<Props> {\n           transaction,\n         });\n \n-        const { text, state, title, emoji } = await documentImporter({\n+        const { text, state, title, icon } = await documentImporter({\n           user,\n           fileName: sourceMetadata.fileName,\n           mimeType: sourceMetadata.mimeType,\n@@ -55,7 +55,7 @@ export default class DocumentImportTask extends BaseTask<Props> {\n         return documentCreator({\n           sourceMetadata,\n           title,\n-          emoji,\n+          icon,\n           text,\n           state,\n           publish,\n\ndiff --git a/server/queues/tasks/ExportJSONTask.ts b/server/queues/tasks/ExportJSONTask.ts\nindex 17f5a6608699..f888f947c83e 100644\n--- a/server/queues/tasks/ExportJSONTask.ts\n+++ b/server/queues/tasks/ExportJSONTask.ts\n@@ -124,7 +124,8 @@ export default class ExportJSONTask extends ExportTask {\n           id: document.id,\n           urlId: document.urlId,\n           title: document.title,\n-          emoji: document.emoji,\n+          icon: document.icon,\n+          color: document.color,\n           data: DocumentHelper.toProsemirror(document),\n           createdById: document.createdById,\n           createdByName: document.createdBy.name,\n\ndiff --git a/server/queues/tasks/ImportJSONTask.ts b/server/queues/tasks/ImportJSONTask.ts\nindex a7cb2545394b..64a6d0cb2663 100644\n--- a/server/queues/tasks/ImportJSONTask.ts\n+++ b/server/queues/tasks/ImportJSONTask.ts\n@@ -79,9 +79,9 @@ export default class ImportJSONTask extends ImportTask {\n           // TODO: This is kind of temporary, we can import the document\n           // structure directly in the future.\n           text: serializer.serialize(Node.fromJSON(schema, node.data)),\n-          emoji: node.emoji,\n-          icon: node.emoji,\n-          color: null,\n+          emoji: node.icon ?? node.emoji,\n+          icon: node.icon ?? node.emoji,\n+          color: node.color,\n           createdAt: node.createdAt ? new Date(node.createdAt) : undefined,\n           updatedAt: node.updatedAt ? new Date(node.updatedAt) : undefined,\n           publishedAt: node.publishedAt ? new Date(node.publishedAt) : null,\n\ndiff --git a/server/queues/tasks/ImportMarkdownZipTask.ts b/server/queues/tasks/ImportMarkdownZipTask.ts\nindex 6a7ec2c15530..8d1d8d4f4d30 100644\n--- a/server/queues/tasks/ImportMarkdownZipTask.ts\n+++ b/server/queues/tasks/ImportMarkdownZipTask.ts\n@@ -79,7 +79,7 @@ export default class ImportMarkdownZipTask extends ImportTask {\n             return;\n           }\n \n-          const { title, emoji, text } = await documentImporter({\n+          const { title, icon, text } = await documentImporter({\n             mimeType: \"text/markdown\",\n             fileName: child.name,\n             content:\n@@ -115,8 +115,8 @@ export default class ImportMarkdownZipTask extends ImportTask {\n             output.documents.push({\n               id,\n               title,\n-              emoji,\n-              icon: emoji,\n+              emoji: icon,\n+              icon,\n               text,\n               collectionId,\n               parentDocumentId,\n\ndiff --git a/server/queues/tasks/ImportNotionTask.ts b/server/queues/tasks/ImportNotionTask.ts\nindex 86d01d6832ce..ac315f8eafd3 100644\n--- a/server/queues/tasks/ImportNotionTask.ts\n+++ b/server/queues/tasks/ImportNotionTask.ts\n@@ -96,7 +96,7 @@ export default class ImportNotionTask extends ImportTask {\n \n           Logger.debug(\"task\", `Processing ${name} as ${mimeType}`);\n \n-          const { title, emoji, text } = await documentImporter({\n+          const { title, icon, text } = await documentImporter({\n             mimeType: mimeType || \"text/markdown\",\n             fileName: name,\n             content:\n@@ -130,8 +130,8 @@ export default class ImportNotionTask extends ImportTask {\n             output.documents.push({\n               id,\n               title,\n-              emoji,\n-              icon: emoji,\n+              emoji: icon,\n+              icon,\n               text,\n               collectionId,\n               parentDocumentId,\n\ndiff --git a/server/queues/tasks/ImportTask.ts b/server/queues/tasks/ImportTask.ts\nindex a0d9d5f9903b..8596a157486f 100644\n--- a/server/queues/tasks/ImportTask.ts\n+++ b/server/queues/tasks/ImportTask.ts\n@@ -38,7 +38,7 @@ export type StructuredImportData = {\n   collections: {\n     id: string;\n     urlId?: string;\n-    color?: string;\n+    color?: string | null;\n     icon?: string | null;\n     sort?: CollectionSort;\n     permission?: CollectionPermission | null;\n\ndiff --git a/server/routes/api/collections/schema.ts b/server/routes/api/collections/schema.ts\nindex 0c33e4c2336c..c69097530afd 100644\n--- a/server/routes/api/collections/schema.ts\n+++ b/server/routes/api/collections/schema.ts\n@@ -1,21 +1,13 @@\n+import emojiRegex from \"emoji-regex\";\n import isUndefined from \"lodash/isUndefined\";\n import { z } from \"zod\";\n-import { randomElement } from \"@shared/random\";\n import { CollectionPermission, FileOperationFormat } from \"@shared/types\";\n import { IconLibrary } from \"@shared/utils/IconLibrary\";\n-import { colorPalette } from \"@shared/utils/collections\";\n import { Collection } from \"@server/models\";\n+import { zodEnumFromObjectKeys } from \"@server/utils/zod\";\n import { ValidateColor, ValidateIndex } from \"@server/validation\";\n import { BaseSchema, ProsemirrorSchema } from \"../schema\";\n \n-function zodEnumFromObjectKeys<\n-  TI extends Record<string, any>,\n-  R extends string = TI extends Record<infer R, any> ? R : never\n->(input: TI): z.ZodEnum<[R, ...R[]]> {\n-  const [firstKey, ...otherKeys] = Object.keys(input) as [R, ...R[]];\n-  return z.enum([firstKey, ...otherKeys]);\n-}\n-\n const BaseIdSchema = z.object({\n   /** Id of the collection to be updated */\n   id: z.string(),\n@@ -27,7 +19,7 @@ export const CollectionsCreateSchema = BaseSchema.extend({\n     color: z\n       .string()\n       .regex(ValidateColor.regex, { message: ValidateColor.message })\n-      .default(randomElement(colorPalette)),\n+      .nullish(),\n     description: z.string().nullish(),\n     data: ProsemirrorSchema.nullish(),\n     permission: z\n@@ -35,7 +27,12 @@ export const CollectionsCreateSchema = BaseSchema.extend({\n       .nullish()\n       .transform((val) => (isUndefined(val) ? null : val)),\n     sharing: z.boolean().default(true),\n-    icon: zodEnumFromObjectKeys(IconLibrary.mapping).optional(),\n+    icon: z\n+      .union([\n+        z.string().regex(emojiRegex()),\n+        zodEnumFromObjectKeys(IconLibrary.mapping),\n+      ])\n+      .optional(),\n     sort: z\n       .object({\n         field: z.union([z.literal(\"title\"), z.literal(\"index\")]),\n@@ -174,7 +171,12 @@ export const CollectionsUpdateSchema = BaseSchema.extend({\n     name: z.string().optional(),\n     description: z.string().nullish(),\n     data: ProsemirrorSchema.nullish(),\n-    icon: zodEnumFromObjectKeys(IconLibrary.mapping).nullish(),\n+    icon: z\n+      .union([\n+        z.string().regex(emojiRegex()),\n+        zodEnumFromObjectKeys(IconLibrary.mapping),\n+      ])\n+      .nullish(),\n     permission: z.nativeEnum(CollectionPermission).nullish(),\n     color: z\n       .string()\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex ba4a1056f581..d583d1ec2fa8 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -944,6 +944,8 @@ router.post(\n         createdById: user.id,\n         template: true,\n         emoji: original.emoji,\n+        icon: original.icon,\n+        color: original.color,\n         title: original.title,\n         text: original.text,\n         content: original.content,\n@@ -1041,6 +1043,7 @@ router.post(\n       document,\n       user,\n       ...input,\n+      icon: input.icon ?? input.emoji,\n       publish,\n       collectionId,\n       insightsEnabled,\n@@ -1382,6 +1385,8 @@ router.post(\n       title,\n       text,\n       emoji,\n+      icon,\n+      color,\n       publish,\n       collectionId,\n       parentDocumentId,\n@@ -1445,7 +1450,8 @@ router.post(\n     const document = await documentCreator({\n       title,\n       text,\n-      emoji,\n+      icon: icon ?? emoji,\n+      color,\n       createdAt,\n       publish,\n       collectionId: collection?.id,\n\ndiff --git a/server/routes/api/documents/schema.ts b/server/routes/api/documents/schema.ts\nindex 8d40117d570d..ea7b4a6bce97 100644\n--- a/server/routes/api/documents/schema.ts\n+++ b/server/routes/api/documents/schema.ts\n@@ -4,8 +4,11 @@ import isEmpty from \"lodash/isEmpty\";\n import isUUID from \"validator/lib/isUUID\";\n import { z } from \"zod\";\n import { DocumentPermission, StatusFilter } from \"@shared/types\";\n+import { IconLibrary } from \"@shared/utils/IconLibrary\";\n import { UrlHelper } from \"@shared/utils/UrlHelper\";\n import { BaseSchema } from \"@server/routes/api/schema\";\n+import { zodEnumFromObjectKeys } from \"@server/utils/zod\";\n+import { ValidateColor } from \"@server/validation\";\n \n const DocumentsSortParamsSchema = z.object({\n   /** Specifies the attributes by which documents will be sorted in the list */\n@@ -223,6 +226,20 @@ export const DocumentsUpdateSchema = BaseSchema.extend({\n     /** Emoji displayed alongside doc title */\n     emoji: z.string().regex(emojiRegex()).nullish(),\n \n+    /** Icon displayed alongside doc title */\n+    icon: z\n+      .union([\n+        z.string().regex(emojiRegex()),\n+        zodEnumFromObjectKeys(IconLibrary.mapping),\n+      ])\n+      .nullish(),\n+\n+    /** Icon color */\n+    color: z\n+      .string()\n+      .regex(ValidateColor.regex, { message: ValidateColor.message })\n+      .nullish(),\n+\n     /** Boolean to denote if the doc should occupy full width */\n     fullWidth: z.boolean().optional(),\n \n@@ -319,7 +336,21 @@ export const DocumentsCreateSchema = BaseSchema.extend({\n     text: z.string().default(\"\"),\n \n     /** Emoji displayed alongside doc title */\n-    emoji: z.string().regex(emojiRegex()).optional(),\n+    emoji: z.string().regex(emojiRegex()).nullish(),\n+\n+    /** Icon displayed alongside doc title */\n+    icon: z\n+      .union([\n+        z.string().regex(emojiRegex()),\n+        zodEnumFromObjectKeys(IconLibrary.mapping),\n+      ])\n+      .optional(),\n+\n+    /** Icon color */\n+    color: z\n+      .string()\n+      .regex(ValidateColor.regex, { message: ValidateColor.message })\n+      .nullish(),\n \n     /** Boolean to denote if the doc should be published */\n     publish: z.boolean().optional(),\n\ndiff --git a/server/scripts/20230815063834-migrate-emoji-in-document-title.ts b/server/scripts/20230815063834-migrate-emoji-in-document-title.ts\nindex 19da81ef71e8..bbfd5ef9bc5b 100644\n--- a/server/scripts/20230815063834-migrate-emoji-in-document-title.ts\n+++ b/server/scripts/20230815063834-migrate-emoji-in-document-title.ts\n@@ -52,7 +52,7 @@ export default async function main(exit = false, limit = 1000) {\n         try {\n           const { emoji, strippedTitle } = parseTitle(document.title);\n           if (emoji) {\n-            document.emoji = emoji;\n+            document.icon = emoji;\n             document.title = strippedTitle;\n \n             if (document.changed()) {\n\ndiff --git a/server/scripts/20230827234031-migrate-emoji-in-revision-title.ts b/server/scripts/20230827234031-migrate-emoji-in-revision-title.ts\nindex 0e290b00f377..9680ab06d337 100644\n--- a/server/scripts/20230827234031-migrate-emoji-in-revision-title.ts\n+++ b/server/scripts/20230827234031-migrate-emoji-in-revision-title.ts\n@@ -26,7 +26,7 @@ export default async function main(exit = false, limit = 1000) {\n         try {\n           const { emoji, strippedTitle } = parseTitle(revision.title);\n           if (emoji) {\n-            revision.emoji = emoji;\n+            revision.icon = emoji;\n             revision.title = strippedTitle;\n \n             if (revision.changed()) {\n\ndiff --git a/server/types.ts b/server/types.ts\nindex 69571e4bacbc..f661e62068de 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -468,7 +468,13 @@ export type DocumentJSONExport = {\n   id: string;\n   urlId: string;\n   title: string;\n-  emoji: string | null;\n+  /**\n+   * For backward compatibility, maintain the `emoji` field.\n+   * Future exports will use the `icon` field.\n+   * */\n+  emoji?: string | null;\n+  icon: string | null;\n+  color: string | null;\n   data: Record<string, any>;\n   createdById: string;\n   createdByName: string;\n@@ -498,7 +504,7 @@ export type CollectionJSONExport = {\n     data?: ProsemirrorData | null;\n     description?: ProsemirrorData | null;\n     permission?: CollectionPermission | null;\n-    color: string;\n+    color?: string | null;\n     icon?: string | null;\n     sort: CollectionSort;\n     documentStructure: NavigationNode[] | null;\n\ndiff --git a/server/utils/zod.ts b/server/utils/zod.ts\nnew file mode 100644\nindex 000000000000..bbd84c48de46\n--- /dev/null\n+++ b/server/utils/zod.ts\n@@ -0,0 +1,9 @@\n+import { z } from \"zod\";\n+\n+export function zodEnumFromObjectKeys<\n+  TI extends Record<string, any>,\n+  R extends string = TI extends Record<infer R, any> ? R : never\n+>(input: TI): z.ZodEnum<[R, ...R[]]> {\n+  const [firstKey, ...otherKeys] = Object.keys(input) as [R, ...R[]];\n+  return z.enum([firstKey, ...otherKeys]);\n+}\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 2c9256f6a684..75ce40c6b8d8 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -207,8 +207,6 @@\n   \"Title\": \"Title\",\n   \"Published\": \"Published\",\n   \"Include nested documents\": \"Include nested documents\",\n-  \"Emoji Picker\": \"Emoji Picker\",\n-  \"Remove\": \"Remove\",\n   \"Module failed to load\": \"Module failed to load\",\n   \"Loading Failed\": \"Loading Failed\",\n   \"Sorry, part of the application failed to load. This may be because it was updated since you opened the tab or because of a failed network request. Please try reloading.\": \"Sorry, part of the application failed to load. This may be because it was updated since you opened the tab or because of a failed network request. Please try reloading.\",\n@@ -244,11 +242,27 @@\n   \"Group members\": \"Group members\",\n   \"{{authorName}} created <3></3>\": \"{{authorName}} created <3></3>\",\n   \"{{authorName}} opened <3></3>\": \"{{authorName}} opened <3></3>\",\n+  \"Search emoji\": \"Search emoji\",\n+  \"Search icons\": \"Search icons\",\n+  \"Choose default skin tone\": \"Choose default skin tone\",\n   \"Show menu\": \"Show menu\",\n-  \"Choose an icon\": \"Choose an icon\",\n-  \"Filter\": \"Filter\",\n-  \"Loading\": \"Loading\",\n+  \"Icon Picker\": \"Icon Picker\",\n+  \"Icons\": \"Icons\",\n+  \"Emojis\": \"Emojis\",\n+  \"Remove\": \"Remove\",\n+  \"All\": \"All\",\n+  \"Frequently Used\": \"Frequently Used\",\n+  \"Search Results\": \"Search Results\",\n+  \"Smileys & People\": \"Smileys & People\",\n+  \"Animals & Nature\": \"Animals & Nature\",\n+  \"Food & Drink\": \"Food & Drink\",\n+  \"Activity\": \"Activity\",\n+  \"Travel & Places\": \"Travel & Places\",\n+  \"Objects\": \"Objects\",\n+  \"Symbols\": \"Symbols\",\n+  \"Flags\": \"Flags\",\n   \"Select a color\": \"Select a color\",\n+  \"Loading\": \"Loading\",\n   \"Search\": \"Search\",\n   \"Permission\": \"Permission\",\n   \"View only\": \"View only\",\n@@ -765,7 +779,6 @@\n   \"We were unable to find the page you’re looking for.\": \"We were unable to find the page you’re looking for.\",\n   \"Search titles only\": \"Search titles only\",\n   \"No documents found for your search filters.\": \"No documents found for your search filters.\",\n-  \"Search Results\": \"Search Results\",\n   \"API key copied to clipboard\": \"API key copied to clipboard\",\n   \"Create personal API keys to authenticate with the API and programatically control\\n          your workspace's data. API keys have the same permissions as your user account.\\n          For more details see the <em>developer documentation</em>.\": \"Create personal API keys to authenticate with the API and programatically control\\n          your workspace's data. API keys have the same permissions as your user account.\\n          For more details see the <em>developer documentation</em>.\",\n   \"Personal keys\": \"Personal keys\",\n@@ -858,7 +871,6 @@\n   \"New group\": \"New group\",\n   \"Groups can be used to organize and manage the people on your team.\": \"Groups can be used to organize and manage the people on your team.\",\n   \"No groups have been created yet\": \"No groups have been created yet\",\n-  \"All\": \"All\",\n   \"Create a group\": \"Create a group\",\n   \"Quickly transfer your existing documents, pages, and files from other tools and services into {{appName}}. You can also drag and drop any HTML, Markdown, and text documents directly into Collections in the app.\": \"Quickly transfer your existing documents, pages, and files from other tools and services into {{appName}}. You can also drag and drop any HTML, Markdown, and text documents directly into Collections in the app.\",\n   \"Import a zip file of Markdown documents (exported from version 0.67.0 or earlier)\": \"Import a zip file of Markdown documents (exported from version 0.67.0 or earlier)\",\n@@ -869,6 +881,7 @@\n   \"Enterprise\": \"Enterprise\",\n   \"Recent imports\": \"Recent imports\",\n   \"Everyone that has signed into {{appName}} is listed here. It’s possible that there are other users who have access through {{signinMethods}} but haven’t signed in yet.\": \"Everyone that has signed into {{appName}} is listed here. It’s possible that there are other users who have access through {{signinMethods}} but haven’t signed in yet.\",\n+  \"Filter\": \"Filter\",\n   \"Receive a notification whenever a new document is published\": \"Receive a notification whenever a new document is published\",\n   \"Document updated\": \"Document updated\",\n   \"Receive a notification when a document you are subscribed to is edited\": \"Receive a notification when a document you are subscribed to is edited\",\n\ndiff --git a/shared/styles/theme.ts b/shared/styles/theme.ts\nindex dc4001015619..35b410ddeaf0 100644\n--- a/shared/styles/theme.ts\n+++ b/shared/styles/theme.ts\n@@ -61,6 +61,8 @@ const buildBaseTheme = (input: Partial<Colors>) => {\n       \"-apple-system, BlinkMacSystemFont, Inter, 'Segoe UI', Roboto, Oxygen, sans-serif\",\n     fontFamilyMono:\n       \"'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace\",\n+    fontFamilyEmoji:\n+      \"Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Segoe UI, Twemoji Mozilla, Noto Color Emoji, Android Emoji\",\n     fontWeightRegular: 400,\n     fontWeightMedium: 500,\n     fontWeightBold: 600,\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex ff531f48866c..73f90e8d0c04 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -230,6 +230,8 @@ export type NavigationNode = {\n   title: string;\n   url: string;\n   emoji?: string;\n+  icon?: string;\n+  color?: string;\n   children: NavigationNode[];\n   isDraft?: boolean;\n   collectionId?: string;\n@@ -405,3 +407,43 @@ export type ProsemirrorDoc = {\n   type: \"doc\";\n   content: ProsemirrorData[];\n };\n+\n+export enum IconType {\n+  Outline = \"outline\",\n+  Emoji = \"emoji\",\n+}\n+\n+export enum EmojiCategory {\n+  People = \"People\",\n+  Nature = \"Nature\",\n+  Foods = \"Foods\",\n+  Activity = \"Activity\",\n+  Places = \"Places\",\n+  Objects = \"Objects\",\n+  Symbols = \"Symbols\",\n+  Flags = \"Flags\",\n+}\n+\n+export enum EmojiSkinTone {\n+  Default = \"Default\",\n+  Light = \"Light\",\n+  MediumLight = \"MediumLight\",\n+  Medium = \"Medium\",\n+  MediumDark = \"MediumDark\",\n+  Dark = \"Dark\",\n+}\n+\n+export type Emoji = {\n+  id: string;\n+  name: string;\n+  value: string;\n+};\n+\n+export type EmojiVariants = {\n+  [EmojiSkinTone.Default]: Emoji;\n+  [EmojiSkinTone.Light]?: Emoji;\n+  [EmojiSkinTone.MediumLight]?: Emoji;\n+  [EmojiSkinTone.Medium]?: Emoji;\n+  [EmojiSkinTone.MediumDark]?: Emoji;\n+  [EmojiSkinTone.Dark]?: Emoji;\n+};\n\ndiff --git a/shared/utils/IconLibrary.tsx b/shared/utils/IconLibrary.tsx\nindex 1e69bd98441b..025f4185d75a 100644\n--- a/shared/utils/IconLibrary.tsx\n+++ b/shared/utils/IconLibrary.tsx\n@@ -210,7 +210,7 @@ export class IconLibrary {\n         }\n         return undefined;\n       })\n-      .filter(Boolean);\n+      .filter((icon: string | undefined): icon is string => !!icon);\n   }\n \n   /**\n\ndiff --git a/shared/utils/collections.ts b/shared/utils/collections.ts\nindex deed689713ce..b153f539fbb5 100644\n--- a/shared/utils/collections.ts\n+++ b/shared/utils/collections.ts\n@@ -31,7 +31,7 @@ export const sortNavigationNodes = (\n \n export const colorPalette = [\n   \"#4E5C6E\",\n-  \"#0366d6\",\n+  \"#0366D6\",\n   \"#9E5CF7\",\n   \"#FF825C\",\n   \"#FF5C80\",\n\ndiff --git a/shared/utils/emoji.ts b/shared/utils/emoji.ts\nnew file mode 100644\nindex 000000000000..0194012eda02\n--- /dev/null\n+++ b/shared/utils/emoji.ts\n@@ -0,0 +1,136 @@\n+import RawData from \"@emoji-mart/data\";\n+import type { EmojiMartData, Skin } from \"@emoji-mart/data\";\n+import { init, Data } from \"emoji-mart\";\n+import FuzzySearch from \"fuzzy-search\";\n+import capitalize from \"lodash/capitalize\";\n+import sortBy from \"lodash/sortBy\";\n+import { Emoji, EmojiCategory, EmojiSkinTone, EmojiVariants } from \"../types\";\n+import { isMac } from \"./browser\";\n+\n+const isMacEnv = isMac();\n+\n+init({ data: RawData });\n+\n+// Data has the pre-processed \"search\" terms.\n+const TypedData = Data as EmojiMartData;\n+\n+const flagEmojiIds =\n+  TypedData.categories\n+    .filter(({ id }) => id === EmojiCategory.Flags.toLowerCase())\n+    .map(({ emojis }) => emojis)[0] ?? [];\n+\n+const Categories = TypedData.categories.filter(\n+  ({ id }) => isMacEnv || capitalize(id) !== EmojiCategory.Flags\n+);\n+\n+const Emojis = Object.fromEntries(\n+  Object.entries(TypedData.emojis).filter(\n+    ([id]) => isMacEnv || !flagEmojiIds.includes(id)\n+  )\n+);\n+\n+const searcher = new FuzzySearch(Object.values(Emojis), [\"search\"], {\n+  caseSensitive: false,\n+  sort: true,\n+});\n+\n+// Codes defined by unicode.org\n+const SKINTONE_CODE_TO_ENUM = {\n+  \"1f3fb\": EmojiSkinTone.Light,\n+  \"1f3fc\": EmojiSkinTone.MediumLight,\n+  \"1f3fd\": EmojiSkinTone.Medium,\n+  \"1f3fe\": EmojiSkinTone.MediumDark,\n+  \"1f3ff\": EmojiSkinTone.Dark,\n+};\n+\n+type GetVariantsProps = {\n+  id: string;\n+  name: string;\n+  skins: Skin[];\n+};\n+\n+const getVariants = ({ id, name, skins }: GetVariantsProps): EmojiVariants =>\n+  skins.reduce((obj, skin) => {\n+    const skinToneCode = skin.unified.split(\"-\")[1];\n+    const skinToneType =\n+      SKINTONE_CODE_TO_ENUM[skinToneCode] ?? EmojiSkinTone.Default;\n+    obj[skinToneType] = { id, name, value: skin.native } satisfies Emoji;\n+    return obj;\n+  }, {} as EmojiVariants);\n+\n+const EMOJI_ID_TO_VARIANTS = Object.entries(Emojis).reduce(\n+  (obj, [id, emoji]) => {\n+    obj[id] = getVariants({\n+      id,\n+      name: emoji.name,\n+      skins: emoji.skins,\n+    });\n+    return obj;\n+  },\n+  {} as Record<string, EmojiVariants>\n+);\n+\n+const CATEGORY_TO_EMOJI_IDS: Record<EmojiCategory, string[]> =\n+  Categories.reduce((obj, { id, emojis }) => {\n+    const category = EmojiCategory[capitalize(id)];\n+    if (!category) {\n+      return obj;\n+    }\n+    obj[category] = emojis;\n+    return obj;\n+  }, {} as Record<EmojiCategory, string[]>);\n+\n+export const getEmojis = ({\n+  ids,\n+  skinTone,\n+}: {\n+  ids: string[];\n+  skinTone: EmojiSkinTone;\n+}): Emoji[] =>\n+  ids.map(\n+    (id) =>\n+      EMOJI_ID_TO_VARIANTS[id][skinTone] ??\n+      EMOJI_ID_TO_VARIANTS[id][EmojiSkinTone.Default]\n+  );\n+\n+export const getEmojisWithCategory = ({\n+  skinTone,\n+}: {\n+  skinTone: EmojiSkinTone;\n+}): Record<EmojiCategory, Emoji[]> =>\n+  Object.keys(CATEGORY_TO_EMOJI_IDS).reduce((obj, category: EmojiCategory) => {\n+    const emojiIds = CATEGORY_TO_EMOJI_IDS[category];\n+    const emojis = emojiIds.map(\n+      (emojiId) =>\n+        EMOJI_ID_TO_VARIANTS[emojiId][skinTone] ??\n+        EMOJI_ID_TO_VARIANTS[emojiId][EmojiSkinTone.Default]\n+    );\n+    obj[category] = emojis;\n+    return obj;\n+  }, {} as Record<EmojiCategory, Emoji[]>);\n+\n+export const getEmojiVariants = ({ id }: { id: string }) =>\n+  EMOJI_ID_TO_VARIANTS[id];\n+\n+export const search = ({\n+  query,\n+  skinTone,\n+}: {\n+  query: string;\n+  skinTone?: EmojiSkinTone;\n+}) => {\n+  const queryLowercase = query.toLowerCase();\n+  const emojiSkinTone = skinTone ?? EmojiSkinTone.Default;\n+\n+  const matchedEmojis = searcher\n+    .search(queryLowercase)\n+    .map(\n+      (emoji) =>\n+        EMOJI_ID_TO_VARIANTS[emoji.id][emojiSkinTone] ??\n+        EMOJI_ID_TO_VARIANTS[emoji.id][EmojiSkinTone.Default]\n+    );\n+  return sortBy(matchedEmojis, (emoji) => {\n+    const nlc = emoji.name.toLowerCase();\n+    return query === nlc ? -1 : nlc.startsWith(queryLowercase) ? 0 : 1;\n+  });\n+};\n\ndiff --git a/shared/utils/icon.ts b/shared/utils/icon.ts\nnew file mode 100644\nindex 000000000000..7f0f0ea63e5d\n--- /dev/null\n+++ b/shared/utils/icon.ts\n@@ -0,0 +1,13 @@\n+import { IconType } from \"../types\";\n+import { IconLibrary } from \"./IconLibrary\";\n+\n+const outlineIconNames = new Set(Object.keys(IconLibrary.mapping));\n+\n+export const determineIconType = (\n+  icon?: string | null\n+): IconType | undefined => {\n+  if (!icon) {\n+    return;\n+  }\n+  return outlineIconNames.has(icon) ? IconType.Outline : IconType.Emoji;\n+};\n\ndiff --git a/yarn.lock b/yarn.lock\nindex d97cab671cb1..ea9c1b7edd83 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -2410,11 +2410,6 @@\n   resolved \"https://registry.yarnpkg.com/@emoji-mart/data/-/data-1.2.1.tgz#0ad70c662e3bc603e23e7d98413bd1e64c4fcb6c\"\n   integrity sha512-no2pQMWiBy6gpBEiqGeU77/bFejDqUTRY7KX+0+iur13op3bqUsXdnwoZs6Xb1zbv0gAj5VvS1PWoUUckSr5Dw==\n \n-\"@emoji-mart/react@^1.1.1\":\n-  version \"1.1.1\"\n-  resolved \"https://registry.yarnpkg.com/@emoji-mart/react/-/react-1.1.1.tgz#ddad52f93a25baf31c5383c3e7e4c6e05554312a\"\n-  integrity \"sha1-3a1S+ToluvMcU4PD5+TG4FVUMSo= sha512-NMlFNeWgv1//uPsvLxvGQoIerPuVdXwK/EUek8OOkJ6wVOWPUizRBJU0hDqWZCOROVpfBgCemaC3m6jDOXi03g==\"\n-\n \"@emotion/is-prop-valid@^0.8.2\":\n   version \"0.8.8\"\n   resolved \"https://registry.yarnpkg.com/@emotion/is-prop-valid/-/is-prop-valid-0.8.8.tgz#db28b1c4368a259b60a97311d6a952d4fd01ac1a\"\n@@ -13375,7 +13370,7 @@ react-waypoint@^10.3.0:\n react-window@^1.8.10:\n   version \"1.8.10\"\n   resolved \"https://registry.yarnpkg.com/react-window/-/react-window-1.8.10.tgz#9e6b08548316814b443f7002b1cf8fd3a1bdde03\"\n-  integrity \"sha1-nmsIVIMWgUtEP3ACsc+P06G93gM= sha512-Y0Cx+dnU6NLa5/EvoHukUD0BklJ8qITCtVEPY1C/nL8wwoZ0b5aEw8Ff1dOVHw7fCzMt55XfJDd8S8W8LCaUCg==\"\n+  integrity sha512-Y0Cx+dnU6NLa5/EvoHukUD0BklJ8qITCtVEPY1C/nL8wwoZ0b5aEw8Ff1dOVHw7fCzMt55XfJDd8S8W8LCaUCg==\n   dependencies:\n     \"@babel/runtime\" \"^7.0.0\"\n     memoize-one \">=3.1.1 <6\"\n",
    "test_patch": "diff --git a/server/commands/documentDuplicator.test.ts b/server/commands/documentDuplicator.test.ts\nindex 4d88964aa210..b841b5e5c340 100644\n--- a/server/commands/documentDuplicator.test.ts\n+++ b/server/commands/documentDuplicator.test.ts\n@@ -26,7 +26,8 @@ describe(\"documentDuplicator\", () => {\n     expect(response[0].title).toEqual(original.title);\n     expect(response[0].text).toEqual(original.text);\n     expect(response[0].emoji).toEqual(original.emoji);\n-    expect(response[0].icon).toEqual(original.emoji);\n+    expect(response[0].icon).toEqual(original.icon);\n+    expect(response[0].color).toEqual(original.color);\n     expect(response[0].publishedAt).toBeInstanceOf(Date);\n   });\n \n@@ -35,7 +36,7 @@ describe(\"documentDuplicator\", () => {\n     const original = await buildDocument({\n       userId: user.id,\n       teamId: user.teamId,\n-      emoji: \"👋\",\n+      icon: \"👋\",\n     });\n \n     const response = await sequelize.transaction((transaction) =>\n@@ -52,8 +53,9 @@ describe(\"documentDuplicator\", () => {\n     expect(response).toHaveLength(1);\n     expect(response[0].title).toEqual(\"New title\");\n     expect(response[0].text).toEqual(original.text);\n-    expect(response[0].emoji).toEqual(original.emoji);\n-    expect(response[0].icon).toEqual(original.emoji);\n+    expect(response[0].emoji).toEqual(original.icon);\n+    expect(response[0].icon).toEqual(original.icon);\n+    expect(response[0].color).toEqual(original.color);\n     expect(response[0].publishedAt).toBeInstanceOf(Date);\n   });\n \n@@ -62,7 +64,7 @@ describe(\"documentDuplicator\", () => {\n     const original = await buildDocument({\n       userId: user.id,\n       teamId: user.teamId,\n-      emoji: \"👋\",\n+      icon: \"👋\",\n     });\n \n     await buildDocument({\n@@ -108,7 +110,8 @@ describe(\"documentDuplicator\", () => {\n     expect(response[0].title).toEqual(original.title);\n     expect(response[0].text).toEqual(original.text);\n     expect(response[0].emoji).toEqual(original.emoji);\n-    expect(response[0].icon).toEqual(original.emoji);\n+    expect(response[0].icon).toEqual(original.icon);\n+    expect(response[0].color).toEqual(original.color);\n     expect(response[0].publishedAt).toBeNull();\n   });\n });\n\ndiff --git a/server/routes/api/collections/collections.test.ts b/server/routes/api/collections/collections.test.ts\nindex b50d44df1834..58dc0841bd15 100644\n--- a/server/routes/api/collections/collections.test.ts\n+++ b/server/routes/api/collections/collections.test.ts\n@@ -1,5 +1,4 @@\n import { CollectionPermission } from \"@shared/types\";\n-import { colorPalette } from \"@shared/utils/collections\";\n import { Document, UserMembership, GroupPermission } from \"@server/models\";\n import {\n   buildUser,\n@@ -182,6 +181,23 @@ describe(\"#collections.move\", () => {\n     expect(body.success).toBe(true);\n   });\n \n+  it(\"should allow setting an emoji as icon\", async () => {\n+    const team = await buildTeam();\n+    const admin = await buildAdmin({ teamId: team.id });\n+    const collection = await buildCollection({ teamId: team.id });\n+    const res = await server.post(\"/api/collections.move\", {\n+      body: {\n+        token: admin.getJwtToken(),\n+        id: collection.id,\n+        index: \"P\",\n+        icon: \"😁\",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.success).toBe(true);\n+  });\n+\n   it(\"should return error when icon is not valid\", async () => {\n     const team = await buildTeam();\n     const admin = await buildAdmin({ teamId: team.id });\n@@ -1150,7 +1166,6 @@ describe(\"#collections.create\", () => {\n     expect(body.data.name).toBe(\"Test\");\n     expect(body.data.sort.field).toBe(\"index\");\n     expect(body.data.sort.direction).toBe(\"asc\");\n-    expect(colorPalette.includes(body.data.color)).toBeTruthy();\n     expect(body.policies.length).toBe(1);\n     expect(body.policies[0].abilities.read).toBeTruthy();\n   });\n\ndiff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex d7be7b32375e..41b9dd99ff0a 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -2786,7 +2786,7 @@ describe(\"#documents.create\", () => {\n     expect(body.message).toEqual(\"parentDocumentId: Invalid uuid\");\n   });\n \n-  it(\"should create as a new document\", async () => {\n+  it(\"should create as a new document with emoji\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n     const collection = await buildCollection({\n@@ -2809,6 +2809,34 @@ describe(\"#documents.create\", () => {\n     expect(newDocument!.parentDocumentId).toBe(null);\n     expect(newDocument!.collectionId).toBe(collection.id);\n     expect(newDocument!.emoji).toBe(\"🚢\");\n+    expect(newDocument!.icon).toBe(\"🚢\");\n+    expect(body.policies[0].abilities.update).toEqual(true);\n+  });\n+\n+  it(\"should create as a new document with icon\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const collection = await buildCollection({\n+      userId: user.id,\n+      teamId: team.id,\n+    });\n+    const res = await server.post(\"/api/documents.create\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        collectionId: collection.id,\n+        icon: \"🚢\",\n+        title: \"new document\",\n+        text: \"hello\",\n+        publish: true,\n+      },\n+    });\n+    const body = await res.json();\n+    const newDocument = await Document.findByPk(body.data.id);\n+    expect(res.status).toEqual(200);\n+    expect(newDocument!.parentDocumentId).toBe(null);\n+    expect(newDocument!.collectionId).toBe(collection.id);\n+    expect(newDocument!.emoji).toBe(\"🚢\");\n+    expect(newDocument!.icon).toBe(\"🚢\");\n     expect(body.policies[0].abilities.update).toEqual(true);\n   });\n \n@@ -3094,7 +3122,7 @@ describe(\"#documents.update\", () => {\n     expect(res.status).toEqual(403);\n   });\n \n-  it(\"should fail to update an invalid emoji value\", async () => {\n+  it(\"should fail to update an invalid icon value\", async () => {\n     const user = await buildUser();\n     const document = await buildDocument({\n       userId: user.id,\n@@ -3105,13 +3133,13 @@ describe(\"#documents.update\", () => {\n       body: {\n         token: user.getJwtToken(),\n         id: document.id,\n-        emoji: \":)\",\n+        icon: \":)\",\n       },\n     });\n     const body = await res.json();\n     expect(res.status).toEqual(400);\n \n-    expect(body.message).toBe(\"emoji: Invalid\");\n+    expect(body.message).toBe(\"icon: Invalid\");\n   });\n \n   it(\"should successfully update the emoji\", async () => {\n@@ -3124,12 +3152,34 @@ describe(\"#documents.update\", () => {\n       body: {\n         token: user.getJwtToken(),\n         id: document.id,\n-        emoji: \"😂\",\n+        emoji: \"🚢\",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.emoji).toBe(\"🚢\");\n+    expect(body.data.icon).toBe(\"🚢\");\n+    expect(body.data.color).toBeNull;\n+  });\n+\n+  it(\"should successfully update the icon\", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const res = await server.post(\"/api/documents.update\", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: document.id,\n+        icon: \"beaker\",\n+        color: \"#FFDDEE\",\n       },\n     });\n     const body = await res.json();\n     expect(res.status).toEqual(200);\n-    expect(body.data.emoji).toBe(\"😂\");\n+    expect(body.data.icon).toBe(\"beaker\");\n+    expect(body.data.color).toBe(\"#FFDDEE\");\n   });\n \n   it(\"should not add template to collection structure when publishing\", async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-6944",
    "pr_id": 6944,
    "issue_id": 5553,
    "repo": "outline/outline",
    "problem_statement": "JSON to client\nSee issue for what this unlocks in terms of future functionality. Makes JSON rather than markdown the canonical source of truth for reading documents.\r\n\r\n- [x] Test public shares\r\n- [x] Test restoring revisions\r\n- [x] Test applying templates\r\n- [x] Bump editor version to force reload\r\n- [x] Images in public docs\r\n- [x] Backwards compat API requests\r\n- [x] Bug: Cycle detected in computation `asNavigationNode`\r\n- [x] Testing\r\n- [x] Welcome collection\r\n- [x] Testing, testing…\r\n- [x] Strip comment marks from shared docs\r\n- [x] Testing, testing…\r\n\r\ncloses #3000",
    "issue_word_count": 80,
    "test_files_count": 1,
    "non_test_files_count": 14,
    "pr_changed_files": [
      "app/components/CollectionDescription.tsx",
      "app/models/Collection.ts",
      "plugins/webhooks/server/tasks/DeliverWebhookTask.ts",
      "server/migrations/20240524234042-add-content-to-collection.js",
      "server/models/Collection.ts",
      "server/models/helpers/DocumentHelper.tsx",
      "server/presenters/collection.ts",
      "server/queues/processors/WebsocketsProcessor.ts",
      "server/queues/tasks/ExportJSONTask.ts",
      "server/queues/tasks/ImportJSONTask.ts",
      "server/routes/api/collections/collections.test.ts",
      "server/routes/api/collections/collections.ts",
      "server/routes/api/collections/schema.ts",
      "server/routes/api/documents/documents.ts",
      "server/types.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/collections/collections.test.ts"
    ],
    "base_commit": "d51267b8bcdc7cadf6860ca8efcc9247de7f5eaf",
    "head_commit": "3cf86a5ee767721a9323b81af16b9ab8f8d770d3",
    "repo_url": "https://github.com/outline/outline/pull/6944",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/6944",
    "dockerfile": "",
    "pr_merged_at": "2024-05-25T22:17:19.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-6862",
    "pr_id": 6862,
    "issue_id": 6861,
    "repo": "outline/outline",
    "problem_statement": "cannot unarchive archived documents\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Archive a document (published)\r\n2. Go to the archive menu\r\n3. Try to unarchive the document\r\n4. There's no option to restore it. See screenshot\r\n\r\n**Expected behavior**\r\nYou can unarchive the document\r\n\r\n**Screenshots**\r\n![image](https://github.com/outline/outline/assets/19886441/a32ded17-8a25-40b7-a644-6712361f157d)\r\n\r\n**Outline (please complete the following information):**\r\n- Install: self hosted\r\n- Version: v0.76.0 (f7ea19cfcd5250bf02cc5e6378592fa5d31ca006)\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: win 11\r\n - Browser: chrome\r\n - Version: 124.0.6367.119 (Official Build) (64-bit)",
    "issue_word_count": 89,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "app/actions/definitions/documents.tsx",
      "server/policies/document.test.ts",
      "server/policies/document.ts",
      "server/routes/api/documents/documents.ts"
    ],
    "pr_changed_test_files": [
      "server/policies/document.test.ts"
    ],
    "base_commit": "3298a1cd7d484cb57747fa143503b032e76e9b0b",
    "head_commit": "452cc7ba428c3588dbda04a4157b434931c35948",
    "repo_url": "https://github.com/outline/outline/pull/6862",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/6862",
    "dockerfile": "",
    "pr_merged_at": "2024-05-02T01:02:01.000Z",
    "patch": "diff --git a/app/actions/definitions/documents.tsx b/app/actions/definitions/documents.tsx\nindex 0128a7e1a48d..8c865166b803 100644\n--- a/app/actions/definitions/documents.tsx\n+++ b/app/actions/definitions/documents.tsx\n@@ -616,7 +616,7 @@ export const searchInDocument = createAction({\n       return false;\n     }\n     const document = stores.documents.get(activeDocumentId);\n-    return !document?.isDeleted;\n+    return !!document?.isActive;\n   },\n   perform: ({ activeDocumentId }) => {\n     history.push(searchPath(undefined, { documentId: activeDocumentId }));\n@@ -692,7 +692,7 @@ export const createTemplate = createAction({\n       !!activeCollectionId &&\n       stores.policies.abilities(activeCollectionId).update &&\n       !document?.isTemplate &&\n-      !document?.isDeleted\n+      !!document?.isActive\n     );\n   },\n   perform: ({ activeDocumentId, stores, t, event }) => {\n\ndiff --git a/server/policies/document.ts b/server/policies/document.ts\nindex 59494fa730d0..903c2890d972 100644\n--- a/server/policies/document.ts\n+++ b/server/policies/document.ts\n@@ -147,7 +147,7 @@ allow(User, \"pinToHome\", Document, (actor, document) =>\n     isTeamMutable(actor),\n     !document?.isDraft,\n     !document?.template,\n-    !document?.isDeleted\n+    !!document?.isActive\n   )\n );\n \n@@ -157,7 +157,11 @@ allow(User, \"delete\", Document, (actor, document) =>\n     isTeamMutable(actor),\n     !actor.isGuest,\n     !document?.isDeleted,\n-    or(can(actor, \"update\", document), !document?.collection)\n+    or(\n+      can(actor, \"unarchive\", document),\n+      can(actor, \"update\", document),\n+      !document?.collection\n+    )\n   )\n );\n \n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex a2238f14960c..f4f3acea1efe 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -210,17 +210,7 @@ router.post(\n     const { sort, direction } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const collectionIds = await user.collectionIds();\n-    const collectionScope: Readonly<ScopeOptions> = {\n-      method: [\"withCollectionPermissions\", user.id],\n-    };\n-    const viewScope: Readonly<ScopeOptions> = {\n-      method: [\"withViews\", user.id],\n-    };\n-    const documents = await Document.scope([\n-      \"defaultScope\",\n-      collectionScope,\n-      viewScope,\n-    ]).findAll({\n+    const documents = await Document.defaultScopeWithUser(user.id).findAll({\n       where: {\n         teamId: user.teamId,\n         collectionId: collectionIds,\n",
    "test_patch": "diff --git a/server/policies/document.test.ts b/server/policies/document.test.ts\nindex 84f66c6148bb..15faa03f57d3 100644\n--- a/server/policies/document.test.ts\n+++ b/server/policies/document.test.ts\n@@ -277,3 +277,29 @@ describe(\"no collection\", () => {\n     expect(abilities.comment).toEqual(true);\n   });\n });\n+\n+describe(\"archived document\", () => {\n+  it(\"should have correct permissions\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const doc = await buildDocument({\n+      teamId: team.id,\n+      userId: user.id,\n+      archivedAt: new Date(),\n+    });\n+    // reload to get membership\n+    const document = await Document.findByPk(doc.id, { userId: user.id });\n+    const abilities = serialize(user, document);\n+    expect(abilities.read).toEqual(true);\n+    expect(abilities.download).toEqual(true);\n+    expect(abilities.delete).toEqual(true);\n+    expect(abilities.unsubscribe).toEqual(true);\n+    expect(abilities.unarchive).toEqual(true);\n+    expect(abilities.update).toEqual(false);\n+    expect(abilities.createChildDocument).toEqual(false);\n+    expect(abilities.archive).toEqual(false);\n+    expect(abilities.share).toEqual(false);\n+    expect(abilities.move).toEqual(false);\n+    expect(abilities.comment).toEqual(false);\n+  });\n+});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-6782",
    "pr_id": 6782,
    "issue_id": 6778,
    "repo": "outline/outline",
    "problem_statement": "Allow duplicating a document as draft\nIt would be nice if one could decide to copy a page as \"Unpublished\". This would especially be useful if the page has mentions on it, as they get notified immediately after the duplication.\r\nI think this could be done relatively easy in the Dialog that already pops up when duplicating a page.\r\n\r\n_Originally posted by @nliechti in https://github.com/outline/outline/discussions/6766_",
    "issue_word_count": 65,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "app/components/DuplicateDialog.tsx",
      "app/models/Document.ts",
      "app/stores/DocumentsStore.ts",
      "server/commands/documentDuplicator.test.ts",
      "shared/i18n/locales/en_US/translation.json"
    ],
    "pr_changed_test_files": [
      "server/commands/documentDuplicator.test.ts"
    ],
    "base_commit": "b458bb3af96759812e43087318b6c453d2eff8bd",
    "head_commit": "1b2025147d5ce1a571a0a5775b40bb900545ea8b",
    "repo_url": "https://github.com/outline/outline/pull/6782",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/6782",
    "dockerfile": "",
    "pr_merged_at": "2024-04-13T00:48:00.000Z",
    "patch": "diff --git a/app/components/DuplicateDialog.tsx b/app/components/DuplicateDialog.tsx\nindex 2a6992ad69c3..95785ec4430e 100644\n--- a/app/components/DuplicateDialog.tsx\n+++ b/app/components/DuplicateDialog.tsx\n@@ -19,9 +19,17 @@ function DuplicateDialog({ document, onSubmit }: Props) {\n   const defaultTitle = t(`Copy of {{ documentName }}`, {\n     documentName: document.title,\n   });\n+  const [publish, setPublish] = React.useState<boolean>(!!document.publishedAt);\n   const [recursive, setRecursive] = React.useState<boolean>(true);\n   const [title, setTitle] = React.useState<string>(defaultTitle);\n \n+  const handlePublishChange = React.useCallback(\n+    (ev: React.ChangeEvent<HTMLInputElement>) => {\n+      setPublish(ev.target.checked);\n+    },\n+    []\n+  );\n+\n   const handleRecursiveChange = React.useCallback(\n     (ev: React.ChangeEvent<HTMLInputElement>) => {\n       setRecursive(ev.target.checked);\n@@ -38,6 +46,7 @@ function DuplicateDialog({ document, onSubmit }: Props) {\n \n   const handleSubmit = async () => {\n     const result = await document.duplicate({\n+      publish,\n       recursive,\n       title,\n     });\n@@ -56,15 +65,26 @@ function DuplicateDialog({ document, onSubmit }: Props) {\n         defaultValue={defaultTitle}\n       />\n       {document.publishedAt && !document.isTemplate && (\n-        <Text size=\"small\">\n-          <Switch\n-            name=\"recursive\"\n-            label={t(\"Include nested documents\")}\n-            labelPosition=\"right\"\n-            checked={recursive}\n-            onChange={handleRecursiveChange}\n-          />\n-        </Text>\n+        <>\n+          <Text size=\"small\">\n+            <Switch\n+              name=\"publish\"\n+              label={t(\"Published\")}\n+              labelPosition=\"right\"\n+              checked={publish}\n+              onChange={handlePublishChange}\n+            />\n+          </Text>\n+          <Text size=\"small\">\n+            <Switch\n+              name=\"recursive\"\n+              label={t(\"Include nested documents\")}\n+              labelPosition=\"right\"\n+              checked={recursive}\n+              onChange={handleRecursiveChange}\n+            />\n+          </Text>\n+        </>\n       )}\n     </ConfirmationDialog>\n   );\n\ndiff --git a/app/models/Document.ts b/app/models/Document.ts\nindex c2b465ba728c..048a50a27161 100644\n--- a/app/models/Document.ts\n+++ b/app/models/Document.ts\n@@ -509,8 +509,11 @@ export default class Document extends ParanoidModel {\n   move = (collectionId: string, parentDocumentId?: string | undefined) =>\n     this.store.move(this.id, collectionId, parentDocumentId);\n \n-  duplicate = (options?: { title?: string; recursive?: boolean }) =>\n-    this.store.duplicate(this, options);\n+  duplicate = (options?: {\n+    title?: string;\n+    publish?: boolean;\n+    recursive?: boolean;\n+  }) => this.store.duplicate(this, options);\n \n   @computed\n   get pinned(): boolean {\n\ndiff --git a/app/stores/DocumentsStore.ts b/app/stores/DocumentsStore.ts\nindex 0391b824b0c4..6b7a52881023 100644\n--- a/app/stores/DocumentsStore.ts\n+++ b/app/stores/DocumentsStore.ts\n@@ -567,6 +567,7 @@ export default class DocumentsStore extends Store<Document> {\n     document: Document,\n     options?: {\n       title?: string;\n+      publish?: boolean;\n       recursive?: boolean;\n     }\n   ): Promise<Document[]> => {\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex b7d87d5eed4e..a5112d2221e1 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -193,6 +193,7 @@\n   \"Viewed {{ timeAgo }}\": \"Viewed {{ timeAgo }}\",\n   \"Copy of {{ documentName }}\": \"Copy of {{ documentName }}\",\n   \"Title\": \"Title\",\n+  \"Published\": \"Published\",\n   \"Include nested documents\": \"Include nested documents\",\n   \"Emoji Picker\": \"Emoji Picker\",\n   \"Remove\": \"Remove\",\n",
    "test_patch": "diff --git a/server/commands/documentDuplicator.test.ts b/server/commands/documentDuplicator.test.ts\nindex 4c06e1d9032a..4816c7f82042 100644\n--- a/server/commands/documentDuplicator.test.ts\n+++ b/server/commands/documentDuplicator.test.ts\n@@ -26,6 +26,7 @@ describe(\"documentDuplicator\", () => {\n     expect(response[0].title).toEqual(original.title);\n     expect(response[0].text).toEqual(original.text);\n     expect(response[0].emoji).toEqual(original.emoji);\n+    expect(response[0].publishedAt).toBeInstanceOf(Date);\n   });\n \n   it(\"should duplicate document with title override\", async () => {\n@@ -51,6 +52,7 @@ describe(\"documentDuplicator\", () => {\n     expect(response[0].title).toEqual(\"New title\");\n     expect(response[0].text).toEqual(original.text);\n     expect(response[0].emoji).toEqual(original.emoji);\n+    expect(response[0].publishedAt).toBeInstanceOf(Date);\n   });\n \n   it(\"should duplicate child documents with recursive=true\", async () => {\n@@ -81,4 +83,29 @@ describe(\"documentDuplicator\", () => {\n \n     expect(response).toHaveLength(2);\n   });\n+\n+  it(\"should duplicate existing document as draft\", async () => {\n+    const user = await buildUser();\n+    const original = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const response = await sequelize.transaction((transaction) =>\n+      documentDuplicator({\n+        document: original,\n+        collection: original.collection,\n+        transaction,\n+        publish: false,\n+        user,\n+        ip,\n+      })\n+    );\n+\n+    expect(response).toHaveLength(1);\n+    expect(response[0].title).toEqual(original.title);\n+    expect(response[0].text).toEqual(original.text);\n+    expect(response[0].emoji).toEqual(original.emoji);\n+    expect(response[0].publishedAt).toBeNull();\n+  });\n });\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-6772",
    "pr_id": 6772,
    "issue_id": 6215,
    "repo": "outline/outline",
    "problem_statement": "Add button to empty trash\n- This functionality should only be available to admins\r\n- Should include a confirmation prompt\r\n- Needs a new API endpoint so we don't need to make hundreds of API requests\r\n",
    "issue_word_count": 29,
    "test_files_count": 2,
    "non_test_files_count": 9,
    "pr_changed_files": [
      "app/actions/definitions/documents.tsx",
      "app/actions/sections.ts",
      "app/components/Collection/CollectionForm.tsx",
      "app/scenes/Trash/components/DeleteDocumentsInTrash.tsx",
      "app/scenes/Trash/index.tsx",
      "app/stores/DocumentsStore.ts",
      "server/commands/documentPermanentDeleter.ts",
      "server/routes/api/documents/__snapshots__/documents.test.ts.snap",
      "server/routes/api/documents/documents.test.ts",
      "server/routes/api/documents/documents.ts",
      "shared/i18n/locales/en_US/translation.json"
    ],
    "pr_changed_test_files": [
      "server/routes/api/documents/__snapshots__/documents.test.ts.snap",
      "server/routes/api/documents/documents.test.ts"
    ],
    "base_commit": "a5d2752122a12be3ad5db498f4d70ffbc813aead",
    "head_commit": "46040a086fcafcff98cbff75da3edc6ab5bbf263",
    "repo_url": "https://github.com/outline/outline/pull/6772",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/6772",
    "dockerfile": "",
    "pr_merged_at": "2024-04-16T13:04:56.000Z",
    "patch": "diff --git a/app/actions/definitions/documents.tsx b/app/actions/definitions/documents.tsx\nindex 72f592be05ef..affb19ed6261 100644\n--- a/app/actions/definitions/documents.tsx\n+++ b/app/actions/definitions/documents.tsx\n@@ -37,11 +37,12 @@ import DocumentDelete from \"~/scenes/DocumentDelete\";\n import DocumentMove from \"~/scenes/DocumentMove\";\n import DocumentPermanentDelete from \"~/scenes/DocumentPermanentDelete\";\n import DocumentPublish from \"~/scenes/DocumentPublish\";\n+import DeleteDocumentsInTrash from \"~/scenes/Trash/components/DeleteDocumentsInTrash\";\n import DocumentTemplatizeDialog from \"~/components/DocumentTemplatizeDialog\";\n import DuplicateDialog from \"~/components/DuplicateDialog\";\n import SharePopover from \"~/components/Sharing\";\n import { createAction } from \"~/actions\";\n-import { DocumentSection } from \"~/actions/sections\";\n+import { DocumentSection, TrashSection } from \"~/actions/sections\";\n import env from \"~/env\";\n import history from \"~/utils/history\";\n import {\n@@ -52,6 +53,7 @@ import {\n   searchPath,\n   documentPath,\n   urlify,\n+  trashPath,\n } from \"~/utils/routeHelpers\";\n \n export const openDocument = createAction({\n@@ -828,6 +830,27 @@ export const permanentlyDeleteDocument = createAction({\n   },\n });\n \n+export const permanentlyDeleteDocumentsInTrash = createAction({\n+  name: ({ t }) => t(\"Empty\"),\n+  analyticsName: \"Empty trash\",\n+  section: TrashSection,\n+  icon: <TrashIcon />,\n+  dangerous: true,\n+  visible: ({ stores }) =>\n+    stores.documents.deleted.length > 0 && !!stores.auth.user?.isAdmin,\n+  perform: ({ stores, t, location }) => {\n+    stores.dialogs.openModal({\n+      title: t(\"Permanently delete documents in trash\"),\n+      content: (\n+        <DeleteDocumentsInTrash\n+          onSubmit={stores.dialogs.closeAllModals}\n+          shouldRedirect={location.pathname === trashPath()}\n+        />\n+      ),\n+    });\n+  },\n+});\n+\n export const openDocumentComments = createAction({\n   name: ({ t }) => t(\"Comments\"),\n   analyticsName: \"Open comments\",\n@@ -952,6 +975,7 @@ export const rootDocumentActions = [\n   moveDocument,\n   openRandomDocument,\n   permanentlyDeleteDocument,\n+  permanentlyDeleteDocumentsInTrash,\n   printDocument,\n   pinDocumentToCollection,\n   pinDocumentToHome,\n\ndiff --git a/app/actions/sections.ts b/app/actions/sections.ts\nindex 1541637d2a89..0224757c6662 100644\n--- a/app/actions/sections.ts\n+++ b/app/actions/sections.ts\n@@ -20,3 +20,5 @@ export const TeamSection = ({ t }: ActionContext) => t(\"Workspace\");\n \n export const RecentSearchesSection = ({ t }: ActionContext) =>\n   t(\"Recent searches\");\n+\n+export const TrashSection = ({ t }: ActionContext) => t(\"Trash\");\n\ndiff --git a/app/components/Collection/CollectionForm.tsx b/app/components/Collection/CollectionForm.tsx\nindex 8c629b5d54c3..69f9dcea17e3 100644\n--- a/app/components/Collection/CollectionForm.tsx\n+++ b/app/components/Collection/CollectionForm.tsx\n@@ -61,7 +61,7 @@ export const CollectionForm = observer(function CollectionForm_({\n   React.useEffect(() => {\n     // If the user hasn't picked an icon yet, go ahead and suggest one based on\n     // the name of the collection. It's the little things sometimes.\n-    if (!hasOpenedIconPicker) {\n+    if (!hasOpenedIconPicker && !collection) {\n       setValue(\n         \"icon\",\n         IconLibrary.findIconByKeyword(values.name) ??\n@@ -69,7 +69,7 @@ export const CollectionForm = observer(function CollectionForm_({\n           \"collection\"\n       );\n     }\n-  }, [values.name]);\n+  }, [values.name, collection]);\n \n   const handleIconPickerChange = React.useCallback(\n     (color: string, icon: string) => {\n\ndiff --git a/app/scenes/Trash/components/DeleteDocumentsInTrash.tsx b/app/scenes/Trash/components/DeleteDocumentsInTrash.tsx\nnew file mode 100644\nindex 000000000000..6189511a00fa\n--- /dev/null\n+++ b/app/scenes/Trash/components/DeleteDocumentsInTrash.tsx\n@@ -0,0 +1,43 @@\n+import { observer } from \"mobx-react\";\n+import * as React from \"react\";\n+import { useTranslation, Trans } from \"react-i18next\";\n+import { useHistory } from \"react-router-dom\";\n+import { toast } from \"sonner\";\n+import ConfirmationDialog from \"~/components/ConfirmationDialog\";\n+import Flex from \"~/components/Flex\";\n+import useStores from \"~/hooks/useStores\";\n+\n+type Props = {\n+  onSubmit: () => void;\n+  shouldRedirect: boolean;\n+};\n+\n+function DeleteDocumentsInTrash({ onSubmit, shouldRedirect }: Props) {\n+  const { t } = useTranslation();\n+  const { documents } = useStores();\n+  const history = useHistory();\n+\n+  const handleSubmit = async () => {\n+    await documents.emptyTrash();\n+    toast.success(t(\"Trash emptied\"));\n+    onSubmit();\n+    if (shouldRedirect) {\n+      history.push(\"/home\");\n+    }\n+  };\n+\n+  return (\n+    <Flex column>\n+      <ConfirmationDialog\n+        submitText={t(\"I’m sure – Delete\")}\n+        savingText={`${t(\"Deleting\")}…`}\n+        onSubmit={handleSubmit}\n+        danger\n+      >\n+        <Trans defaults=\"Are you sure you want to permanently delete all the documents in Trash? This action is immediate and cannot be undone.\" />\n+      </ConfirmationDialog>\n+    </Flex>\n+  );\n+}\n+\n+export default observer(DeleteDocumentsInTrash);\n\ndiff --git a/app/scenes/Trash.tsx b/app/scenes/Trash/index.tsx\nsimilarity index 63%\nrename from app/scenes/Trash.tsx\nrename to app/scenes/Trash/index.tsx\nindex ee659372e116..4f571da7cf41 100644\n--- a/app/scenes/Trash.tsx\n+++ b/app/scenes/Trash/index.tsx\n@@ -2,18 +2,36 @@ import { observer } from \"mobx-react\";\n import { TrashIcon } from \"outline-icons\";\n import * as React from \"react\";\n import { useTranslation } from \"react-i18next\";\n+import Button from \"~/components/Button\";\n import Empty from \"~/components/Empty\";\n import Heading from \"~/components/Heading\";\n import PaginatedDocumentList from \"~/components/PaginatedDocumentList\";\n import Scene from \"~/components/Scene\";\n import Subheading from \"~/components/Subheading\";\n+import { permanentlyDeleteDocumentsInTrash } from \"~/actions/definitions/documents\";\n+import useActionContext from \"~/hooks/useActionContext\";\n import useStores from \"~/hooks/useStores\";\n \n function Trash() {\n   const { t } = useTranslation();\n   const { documents } = useStores();\n+  const context = useActionContext();\n   return (\n-    <Scene icon={<TrashIcon />} title={t(\"Trash\")}>\n+    <Scene\n+      icon={<TrashIcon />}\n+      title={t(\"Trash\")}\n+      actions={\n+        documents.deleted.length > 0 && (\n+          <Button\n+            neutral\n+            action={permanentlyDeleteDocumentsInTrash}\n+            context={context}\n+          >\n+            Empty\n+          </Button>\n+        )\n+      }\n+    >\n       <Heading>{t(\"Trash\")}</Heading>\n       <PaginatedDocumentList\n         documents={documents.deleted}\n\ndiff --git a/app/stores/DocumentsStore.ts b/app/stores/DocumentsStore.ts\nindex 6b7a52881023..a236fee1e21d 100644\n--- a/app/stores/DocumentsStore.ts\n+++ b/app/stores/DocumentsStore.ts\n@@ -765,6 +765,14 @@ export default class DocumentsStore extends Store<Document> {\n     });\n   };\n \n+  @action\n+  emptyTrash = async () => {\n+    await client.post(\"/documents.empty_trash\");\n+\n+    const documentIdsSet = new Set(this.deleted.map((doc) => doc.id));\n+    this.removeAll((doc: Document) => documentIdsSet.has(doc.id));\n+  };\n+\n   star = (document: Document, index?: string) =>\n     this.rootStore.stars.create({\n       documentId: document.id,\n\ndiff --git a/server/commands/documentPermanentDeleter.ts b/server/commands/documentPermanentDeleter.ts\nindex a0c4a23b36e7..ec02a9d22662 100644\n--- a/server/commands/documentPermanentDeleter.ts\n+++ b/server/commands/documentPermanentDeleter.ts\n@@ -1,5 +1,5 @@\n import uniq from \"lodash/uniq\";\n-import { QueryTypes } from \"sequelize\";\n+import { Op, QueryTypes } from \"sequelize\";\n import Logger from \"@server/logging/Logger\";\n import { Document, Attachment } from \"@server/models\";\n import DeleteAttachmentTask from \"@server/queues/tasks/DeleteAttachmentTask\";\n@@ -73,6 +73,21 @@ export default async function documentPermanentDeleter(documents: Document[]) {\n     );\n   }\n \n+  const documentIds = documents.map((document) => document.id);\n+  await Document.update(\n+    {\n+      parentDocumentId: null,\n+    },\n+    {\n+      where: {\n+        parentDocumentId: {\n+          [Op.in]: documentIds,\n+        },\n+      },\n+      paranoid: false,\n+    }\n+  );\n+\n   return Document.scope(\"withDrafts\").destroy({\n     where: {\n       id: documents.map((document) => document.id),\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 8f4581fb3271..04835376582f 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -1213,17 +1213,6 @@ router.post(\n       });\n       authorize(user, \"permanentDelete\", document);\n \n-      await Document.update(\n-        {\n-          parentDocumentId: null,\n-        },\n-        {\n-          where: {\n-            parentDocumentId: document.id,\n-          },\n-          paranoid: false,\n-        }\n-      );\n       await documentPermanentDeleter([document]);\n       await Event.create({\n         name: \"documents.permanent_delete\",\n@@ -1701,4 +1690,55 @@ router.post(\n   }\n );\n \n+router.post(\n+  \"documents.empty_trash\",\n+  auth({ role: UserRole.Admin }),\n+  async (ctx: APIContext) => {\n+    const { user } = ctx.state.auth;\n+\n+    const collectionIds = await user.collectionIds({\n+      paranoid: false,\n+    });\n+    const collectionScope: Readonly<ScopeOptions> = {\n+      method: [\"withCollectionPermissions\", user.id],\n+    };\n+    const documents = await Document.scope([\n+      collectionScope,\n+      \"withDrafts\",\n+    ]).findAll({\n+      where: {\n+        deletedAt: {\n+          [Op.ne]: null,\n+        },\n+        [Op.or]: [\n+          {\n+            collectionId: {\n+              [Op.in]: collectionIds,\n+            },\n+          },\n+          {\n+            createdById: user.id,\n+            collectionId: {\n+              [Op.is]: null,\n+            },\n+          },\n+        ],\n+      },\n+      paranoid: false,\n+    });\n+\n+    await documentPermanentDeleter(documents);\n+    await Event.create({\n+      name: \"documents.empty_trash\",\n+      teamId: user.teamId,\n+      actorId: user.id,\n+      ip: ctx.request.ip,\n+    });\n+\n+    ctx.body = {\n+      success: true,\n+    };\n+  }\n+);\n+\n export default router;\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 270c191150f7..c5794bf9cb03 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -66,6 +66,8 @@\n   \"Delete {{ documentName }}\": \"Delete {{ documentName }}\",\n   \"Permanently delete\": \"Permanently delete\",\n   \"Permanently delete {{ documentName }}\": \"Permanently delete {{ documentName }}\",\n+  \"Empty\": \"Empty\",\n+  \"Permanently delete documents in trash\": \"Permanently delete documents in trash\",\n   \"Comments\": \"Comments\",\n   \"History\": \"History\",\n   \"Insights\": \"Insights\",\n@@ -89,7 +91,6 @@\n   \"Download {{ platform }} app\": \"Download {{ platform }} app\",\n   \"Log out\": \"Log out\",\n   \"Mark notifications as read\": \"Mark notifications as read\",\n-  \"Notification settings\": \"Notification settings\",\n   \"Archive all notifications\": \"Archive all notifications\",\n   \"Restore revision\": \"Restore revision\",\n   \"Link copied\": \"Link copied\",\n@@ -302,7 +303,6 @@\n   \"You can't reorder documents in an alphabetically sorted collection\": \"You can't reorder documents in an alphabetically sorted collection\",\n   \"Collections\": \"Collections\",\n   \"Document not supported – try Markdown, Plain text, HTML, or Word\": \"Document not supported – try Markdown, Plain text, HTML, or Word\",\n-  \"Empty\": \"Empty\",\n   \"Go back\": \"Go back\",\n   \"Go forward\": \"Go forward\",\n   \"Could not load shared documents\": \"Could not load shared documents\",\n@@ -453,6 +453,7 @@\n   \"New child document\": \"New child document\",\n   \"New document in <em>{{ collectionName }}</em>\": \"New document in <em>{{ collectionName }}</em>\",\n   \"New template\": \"New template\",\n+  \"Notification settings\": \"Notification settings\",\n   \"Revision options\": \"Revision options\",\n   \"Share link revoked\": \"Share link revoked\",\n   \"Share link copied\": \"Share link copied\",\n@@ -953,6 +954,8 @@\n   \"Workspace name\": \"Workspace name\",\n   \"You are creating a new workspace using your current account — <em>{{email}}</em>\": \"You are creating a new workspace using your current account — <em>{{email}}</em>\",\n   \"To create a workspace under another email please sign up from the homepage\": \"To create a workspace under another email please sign up from the homepage\",\n+  \"Trash emptied\": \"Trash emptied\",\n+  \"Are you sure you want to permanently delete all the documents in Trash? This action is immediate and cannot be undone.\": \"Are you sure you want to permanently delete all the documents in Trash? This action is immediate and cannot be undone.\",\n   \"Recently deleted\": \"Recently deleted\",\n   \"Trash is empty at the moment.\": \"Trash is empty at the moment.\",\n   \"A confirmation code has been sent to your email address, please enter the code below to permanently destroy your account.\": \"A confirmation code has been sent to your email address, please enter the code below to permanently destroy your account.\",\n",
    "test_patch": "diff --git a/server/routes/api/documents/__snapshots__/documents.test.ts.snap b/server/routes/api/documents/__snapshots__/documents.test.ts.snap\nindex bd99e53f383f..d1eaf5ed784c 100644\n--- a/server/routes/api/documents/__snapshots__/documents.test.ts.snap\n+++ b/server/routes/api/documents/__snapshots__/documents.test.ts.snap\n@@ -18,6 +18,24 @@ exports[`#documents.delete should require authentication 1`] = `\n }\n `;\n \n+exports[`#documents.empty_trash should not allow non-admin users 1`] = `\n+{\n+  \"error\": \"authorization_error\",\n+  \"message\": \"Admin role required\",\n+  \"ok\": false,\n+  \"status\": 403,\n+}\n+`;\n+\n+exports[`#documents.empty_trash should require authentication 1`] = `\n+{\n+  \"error\": \"authentication_required\",\n+  \"message\": \"Authentication required\",\n+  \"ok\": false,\n+  \"status\": 401,\n+}\n+`;\n+\n exports[`#documents.list should require authentication 1`] = `\n {\n   \"error\": \"authentication_required\",\n\ndiff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex cd294b9e53fb..1a820b147b5a 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -4345,3 +4345,58 @@ describe(\"#documents.memberships\", () => {\n     expect(body.data.users[0].id).toEqual(members[1].id);\n   });\n });\n+\n+describe(\"#documents.empty_trash\", () => {\n+  it(\"should require authentication\", async () => {\n+    const res = await server.post(\"/api/documents.empty_trash\");\n+    const body = await res.json();\n+    expect(res.status).toEqual(401);\n+    expect(body).toMatchSnapshot();\n+  });\n+  it(\"should allow admin users\", async () => {\n+    const user = await buildAdmin();\n+    const res = await server.post(\"/api/documents.empty_trash\", {\n+      body: {\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.success).toEqual(true);\n+  });\n+  it(\"should not allow non-admin users\", async () => {\n+    const user = await buildUser();\n+    const res = await server.post(\"/api/documents.empty_trash\", {\n+      body: {\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(403);\n+    expect(body).toMatchSnapshot();\n+  });\n+  it(\"should permanently delete documents\", async () => {\n+    const user = await buildAdmin();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    await document.delete(user.id);\n+\n+    const res = await server.post(\"/api/documents.empty_trash\", {\n+      body: {\n+        token: user.getJwtToken(),\n+      },\n+    });\n+\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.success).toEqual(true);\n+\n+    const deletedDoc = await Document.findByPk(document.id, {\n+      userId: user.id,\n+      paranoid: false,\n+    });\n+    expect(deletedDoc).toBeNull();\n+  });\n+});\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-6738",
    "pr_id": 6738,
    "issue_id": 6734,
    "repo": "outline/outline",
    "problem_statement": "chore: Remove `isViewer` and `isAdmin` columns\nFinal step of migration to `role`, towards https://github.com/outline/outline/issues/2946\r\n\r\n1. https://github.com/outline/outline/pull/6721\r\n2. https://github.com/outline/outline/pull/6724\r\n3. This PR.",
    "issue_word_count": 33,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "server/presenters/__snapshots__/user.test.ts.snap",
      "server/presenters/user.ts",
      "server/routes/api/users/users.test.ts"
    ],
    "pr_changed_test_files": [
      "server/presenters/__snapshots__/user.test.ts.snap",
      "server/routes/api/users/users.test.ts"
    ],
    "base_commit": "7c083b4bfe0af60504077b4e275fd9a54b3f6d2b",
    "head_commit": "5b0a440cc4b0b1abb43b2bd36f11169ff0b0d8fd",
    "repo_url": "https://github.com/outline/outline/pull/6738",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/6738",
    "dockerfile": "",
    "pr_merged_at": "2024-03-29T13:29:59.000Z",
    "patch": null,
    "test_patch": null,
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-6732",
    "pr_id": 6732,
    "issue_id": 2946,
    "repo": "outline/outline",
    "problem_statement": "Guest role with restricted permissions\nIf I invite several external users to my outline installation, everyone could see other users who have viewed / edited an article. When you invite external users from company A and from company B they can see each other \r\n - on articles viewed in the past\r\n - on articles edited\r\n - on articles viewed at the moment\r\n - in the settings menu (groups/members)\r\n - maybe other pages\r\n\r\nwhich would be an GDPR incident.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create an external user by inviting per mail \r\n2. Give the user minimal access (viewer)\r\n3. Login with \"magic link\"\r\n4. Visit settings page and then members or groups\r\n5. Visit an arbitrary page and click the avatar button to see\r\n    - who is online (now)\r\n    - who viewed this page\r\n    - who edited this page\r\n\r\n**Expected behavior**\r\nExternal users must not see others to avoid GDPR penalties. There should also be an feature to disable the avatar - button on \r\n- user\r\n- role\r\n- login type\r\n- global\r\n\r\nlevel and forbid access to settings menu. \r\n\r\nIf the disabling is not possible, the information should be anonymized e.g. \r\n- 3 people are watching this article now (instead of User A, User B, User C)\r\n- 24 people viewed/edited this article.\r\n\r\n**Screenshots**\r\n<img width=\"634\" alt=\"image\" src=\"https://user-images.githubusercontent.com/97874931/149734507-ce97a07a-ea7c-4e0b-a0f8-ed7cb3b3cfb5.png\">\r\nThe screenshot is made from an external user which can see other (external users) marked with red rectangle.\r\n\r\n<img width=\"655\" alt=\"image\" src=\"https://user-images.githubusercontent.com/97874931/149735615-f7e1b9a0-2337-49e8-bf33-7f78d2343c90.png\">\r\n\r\n\r\n**Outline (please complete the following information):**\r\n- Install: self hosted\r\n- Version: v0.61.1",
    "issue_word_count": 269,
    "test_files_count": 2,
    "non_test_files_count": 28,
    "pr_changed_files": [
      "app/actions/definitions/documents.tsx",
      "app/components/AuthenticatedLayout.tsx",
      "app/hooks/useSettingsConfig.ts",
      "app/menus/DocumentMenu.tsx",
      "app/models/User.ts",
      "app/models/base/Model.ts",
      "app/scenes/Document/components/DocumentMeta.tsx",
      "app/scenes/Document/components/Header.tsx",
      "app/scenes/Settings/components/PeopleTable.tsx",
      "app/utils/PluginLoader.ts",
      "plugins/slack/plugin.json",
      "server/models/Share.ts",
      "server/models/User.ts",
      "server/models/base/ParanoidModel.ts",
      "server/policies/apiKey.ts",
      "server/policies/attachment.ts",
      "server/policies/authenticationProvider.ts",
      "server/policies/collection.test.ts",
      "server/policies/collection.ts",
      "server/policies/comment.ts",
      "server/policies/document.test.ts",
      "server/policies/document.ts",
      "server/policies/fileOperation.ts",
      "server/policies/group.ts",
      "server/policies/integration.ts",
      "server/policies/notification.ts",
      "server/policies/pins.ts",
      "server/policies/searchQuery.ts",
      "server/policies/share.ts",
      "server/policies/star.ts"
    ],
    "pr_changed_test_files": [
      "server/policies/collection.test.ts",
      "server/policies/document.test.ts"
    ],
    "base_commit": "0dede0b56e5495d701874239491630895479faf9",
    "head_commit": "937ea6de31697aae140d2a7e3595935861acbae6",
    "repo_url": "https://github.com/outline/outline/pull/6732",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/6732",
    "dockerfile": "",
    "pr_merged_at": "2024-04-01T00:28:36.000Z",
    "patch": "diff --git a/app/actions/definitions/documents.tsx b/app/actions/definitions/documents.tsx\nindex b045b57c57e1..72f592be05ef 100644\n--- a/app/actions/definitions/documents.tsx\n+++ b/app/actions/definitions/documents.tsx\n@@ -432,7 +432,8 @@ export const copyDocumentAsMarkdown = createAction({\n   name: ({ t }) => t(\"Copy as Markdown\"),\n   section: DocumentSection,\n   keywords: \"clipboard\",\n-  visible: ({ activeDocumentId }) => !!activeDocumentId,\n+  visible: ({ activeDocumentId, stores }) =>\n+    !!activeDocumentId && stores.policies.abilities(activeDocumentId).download,\n   perform: ({ stores, activeDocumentId, t }) => {\n     const document = activeDocumentId\n       ? stores.documents.get(activeDocumentId)\n@@ -856,7 +857,7 @@ export const openDocumentHistory = createAction({\n   icon: <HistoryIcon />,\n   visible: ({ activeDocumentId, stores }) => {\n     const can = stores.policies.abilities(activeDocumentId ?? \"\");\n-    return !!activeDocumentId && can.read && !can.restore;\n+    return !!activeDocumentId && can.listRevisions;\n   },\n   perform: ({ activeDocumentId, stores }) => {\n     if (!activeDocumentId) {\n@@ -883,7 +884,7 @@ export const openDocumentInsights = createAction({\n \n     return (\n       !!activeDocumentId &&\n-      can.read &&\n+      can.listViews &&\n       !document?.isTemplate &&\n       !document?.isDeleted\n     );\n\ndiff --git a/app/components/AuthenticatedLayout.tsx b/app/components/AuthenticatedLayout.tsx\nindex 94567c9daefe..c0202a8f41d1 100644\n--- a/app/components/AuthenticatedLayout.tsx\n+++ b/app/components/AuthenticatedLayout.tsx\n@@ -47,7 +47,8 @@ const AuthenticatedLayout: React.FC = ({ children }: Props) => {\n   const { ui, auth } = useStores();\n   const location = useLocation();\n   const layoutRef = React.useRef<HTMLDivElement>(null);\n-  const can = usePolicy(ui.activeCollectionId);\n+  const can = usePolicy(ui.activeDocumentId);\n+  const canCollection = usePolicy(ui.activeCollectionId);\n   const team = useCurrentTeam();\n   const documentContext = useLocalStore<DocumentContextValue>(() => ({\n     editor: null,\n@@ -69,7 +70,7 @@ const AuthenticatedLayout: React.FC = ({ children }: Props) => {\n       return;\n     }\n     const { activeCollectionId } = ui;\n-    if (!activeCollectionId || !can.createDocument) {\n+    if (!activeCollectionId || !canCollection.createDocument) {\n       return;\n     }\n     history.push(newDocumentPath(activeCollectionId));\n@@ -88,15 +89,18 @@ const AuthenticatedLayout: React.FC = ({ children }: Props) => {\n     </Fade>\n   );\n \n-  const showHistory = !!matchPath(location.pathname, {\n-    path: matchDocumentHistory,\n-  });\n-  const showInsights = !!matchPath(location.pathname, {\n-    path: matchDocumentInsights,\n-  });\n+  const showHistory =\n+    !!matchPath(location.pathname, {\n+      path: matchDocumentHistory,\n+    }) && can.listRevisions;\n+  const showInsights =\n+    !!matchPath(location.pathname, {\n+      path: matchDocumentInsights,\n+    }) && can.listViews;\n   const showComments =\n     !showInsights &&\n     !showHistory &&\n+    can.comment &&\n     ui.activeDocumentId &&\n     ui.commentsExpanded.includes(ui.activeDocumentId) &&\n     team.getPreference(TeamPreference.Commenting);\n\ndiff --git a/app/hooks/useSettingsConfig.ts b/app/hooks/useSettingsConfig.ts\nindex b228bbffb274..1183acd9549e 100644\n--- a/app/hooks/useSettingsConfig.ts\n+++ b/app/hooks/useSettingsConfig.ts\n@@ -25,6 +25,7 @@ import isCloudHosted from \"~/utils/isCloudHosted\";\n import lazy from \"~/utils/lazyWithRetry\";\n import { settingsPath } from \"~/utils/routeHelpers\";\n import useCurrentTeam from \"./useCurrentTeam\";\n+import useCurrentUser from \"./useCurrentUser\";\n import usePolicy from \"./usePolicy\";\n \n const ApiKeys = lazy(() => import(\"~/scenes/Settings/ApiKeys\"));\n@@ -54,6 +55,7 @@ export type ConfigItem = {\n };\n \n const useSettingsConfig = () => {\n+  const user = useCurrentUser();\n   const team = useCurrentTeam();\n   const can = usePolicy(team);\n   const { t } = useTranslation();\n@@ -122,7 +124,7 @@ const useSettingsConfig = () => {\n         name: t(\"Members\"),\n         path: settingsPath(\"members\"),\n         component: Members,\n-        enabled: true,\n+        enabled: can.listUsers,\n         group: t(\"Workspace\"),\n         icon: UserIcon,\n       },\n@@ -130,7 +132,7 @@ const useSettingsConfig = () => {\n         name: t(\"Groups\"),\n         path: settingsPath(\"groups\"),\n         component: Groups,\n-        enabled: true,\n+        enabled: can.listGroups,\n         group: t(\"Workspace\"),\n         icon: GroupIcon,\n       },\n@@ -138,7 +140,7 @@ const useSettingsConfig = () => {\n         name: t(\"Templates\"),\n         path: settingsPath(\"templates\"),\n         component: Templates,\n-        enabled: true,\n+        enabled: can.update,\n         group: t(\"Workspace\"),\n         icon: ShapesIcon,\n       },\n@@ -146,7 +148,7 @@ const useSettingsConfig = () => {\n         name: t(\"Shared Links\"),\n         path: settingsPath(\"shares\"),\n         component: Shares,\n-        enabled: true,\n+        enabled: can.listShares,\n         group: t(\"Workspace\"),\n         icon: GlobeIcon,\n       },\n@@ -211,7 +213,7 @@ const useSettingsConfig = () => {\n         enabled:\n           enabledInDeployment &&\n           hasSettings &&\n-          (plugin.config.adminOnly === false || can.update),\n+          (plugin.config.roles?.includes(user.role) || can.update),\n         icon: plugin.icon,\n       } as ConfigItem;\n \n\ndiff --git a/app/menus/DocumentMenu.tsx b/app/menus/DocumentMenu.tsx\nindex d0cb614dda25..df9b0e7b3039 100644\n--- a/app/menus/DocumentMenu.tsx\n+++ b/app/menus/DocumentMenu.tsx\n@@ -312,7 +312,7 @@ function DocumentMenu({\n             actionToMenuItem(permanentlyDeleteDocument, context),\n           ]}\n         />\n-        {(showDisplayOptions || showToggleEmbeds) && (\n+        {(showDisplayOptions || showToggleEmbeds) && can.update && (\n           <>\n             <Separator />\n             <DisplayOptions>\n@@ -332,7 +332,7 @@ function DocumentMenu({\n                   />\n                 </Style>\n               )}\n-              {showDisplayOptions && !isMobile && can.update && (\n+              {showDisplayOptions && !isMobile && (\n                 <Style>\n                   <ToggleMenuItem\n                     width={26}\n\ndiff --git a/app/models/User.ts b/app/models/User.ts\nindex ffa5a9cb2b1e..cc7f4d5ce80c 100644\n--- a/app/models/User.ts\n+++ b/app/models/User.ts\n@@ -79,6 +79,13 @@ class User extends ParanoidModel {\n     return this.role === UserRole.Admin;\n   }\n \n+  /**\n+   * Whether the user is a member (editor).\n+   */\n+  get isMember(): boolean {\n+    return this.role === UserRole.Member;\n+  }\n+\n   /**\n    * Whether the user is a viewer.\n    */\n@@ -86,6 +93,13 @@ class User extends ParanoidModel {\n     return this.role === UserRole.Viewer;\n   }\n \n+  /**\n+   * Whether the user is a guest.\n+   */\n+  get isGuest(): boolean {\n+    return this.role === UserRole.Guest;\n+  }\n+\n   /**\n    * Whether the user has been recently active. Recently is currently defined\n    * as within the last 5 minutes.\n\ndiff --git a/app/models/base/Model.ts b/app/models/base/Model.ts\nindex 2704c5a399fe..15d311cb44fd 100644\n--- a/app/models/base/Model.ts\n+++ b/app/models/base/Model.ts\n@@ -119,7 +119,6 @@ export default abstract class Model {\n       try {\n         this[key] = data[key];\n       } catch (error) {\n-        // Temporary as isViewer and isAdmin properties changed to getters\n         Logger.warn(`Error setting ${key} on model`, error);\n       }\n     }\n\ndiff --git a/app/scenes/Document/components/DocumentMeta.tsx b/app/scenes/Document/components/DocumentMeta.tsx\nindex 9ef0fecd67c1..5af9535c9a49 100644\n--- a/app/scenes/Document/components/DocumentMeta.tsx\n+++ b/app/scenes/Document/components/DocumentMeta.tsx\n@@ -55,7 +55,10 @@ function TitleDocumentMeta({ to, document, revision, ...rest }: Props) {\n           </CommentLink>\n         </>\n       )}\n-      {totalViewers && !document.isDraft && !document.isTemplate ? (\n+      {totalViewers &&\n+      can.listViews &&\n+      !document.isDraft &&\n+      !document.isTemplate ? (\n         <Wrapper>\n           &nbsp;•&nbsp;\n           <Link\n\ndiff --git a/app/scenes/Document/components/Header.tsx b/app/scenes/Document/components/Header.tsx\nindex 86a6b1287907..bb0dcc71558b 100644\n--- a/app/scenes/Document/components/Header.tsx\n+++ b/app/scenes/Document/components/Header.tsx\n@@ -248,7 +248,9 @@ function DocumentHeader({\n             {!isPublishing && isSaving && user?.separateEditMode && (\n               <Status>{t(\"Saving\")}…</Status>\n             )}\n-            {!isDeleted && !isRevision && <Collaborators document={document} />}\n+            {!isDeleted && !isRevision && can.listViews && (\n+              <Collaborators document={document} />\n+            )}\n             {(isEditing || !user?.separateEditMode) && !isTemplate && isNew && (\n               <Action>\n                 <TemplatesMenu\n\ndiff --git a/app/scenes/Settings/components/PeopleTable.tsx b/app/scenes/Settings/components/PeopleTable.tsx\nindex dcbc72a0d50d..8eae6df7f903 100644\n--- a/app/scenes/Settings/components/PeopleTable.tsx\n+++ b/app/scenes/Settings/components/PeopleTable.tsx\n@@ -62,6 +62,8 @@ function PeopleTable({ canManage, ...rest }: Props) {\n                 <Badge primary>{t(\"Admin\")}</Badge>\n               ) : row.original.isViewer ? (\n                 <Badge>{t(\"Viewer\")}</Badge>\n+              ) : row.original.isGuest ? (\n+                <Badge yellow>{t(\"Guest\")}</Badge>\n               ) : (\n                 <Badge>{t(\"Editor\")}</Badge>\n               )}\n\ndiff --git a/app/utils/PluginLoader.ts b/app/utils/PluginLoader.ts\nindex 9e7a541b21b2..2f74bcfeeaf3 100644\n--- a/app/utils/PluginLoader.ts\n+++ b/app/utils/PluginLoader.ts\n@@ -1,11 +1,12 @@\n import React from \"react\";\n+import { UserRole } from \"@shared/types\";\n \n interface Plugin {\n   id: string;\n   config: {\n     name: string;\n     description: string;\n-    adminOnly?: boolean;\n+    roles?: UserRole[];\n     deployments?: string[];\n   };\n   settings: React.FC;\n\ndiff --git a/plugins/slack/plugin.json b/plugins/slack/plugin.json\nindex 5288a0d71b9c..6a34e53e3fd3 100644\n--- a/plugins/slack/plugin.json\n+++ b/plugins/slack/plugin.json\n@@ -2,6 +2,6 @@\n   \"id\": \"slack\",\n   \"name\": \"Slack\",\n   \"priority\": 40,\n-  \"adminOnly\": false,\n+  \"roles\": [\"admin\", \"member\"],\n   \"description\": \"Adds a Slack authentication provider, support for the /outline slash command, and link unfurling.\"\n }\n\ndiff --git a/server/models/Share.ts b/server/models/Share.ts\nindex ee2191dad771..52f4fb1c5a87 100644\n--- a/server/models/Share.ts\n+++ b/server/models/Share.ts\n@@ -59,6 +59,13 @@ import Length from \"./validators/Length\";\n             }),\n             as: \"collection\",\n           },\n+          {\n+            association: \"memberships\",\n+            where: {\n+              userId,\n+            },\n+            required: false,\n+          },\n         ],\n       },\n       {\n\ndiff --git a/server/models/User.ts b/server/models/User.ts\nindex 712f468109de..6961aaa2dbe0 100644\n--- a/server/models/User.ts\n+++ b/server/models/User.ts\n@@ -238,18 +238,41 @@ class User extends ParanoidModel<\n     return !!this.suspendedAt || !!this.team?.isSuspended;\n   }\n \n+  /**\n+   * Whether the user has been invited but not yet signed in.\n+   */\n   get isInvited() {\n     return !this.lastActiveAt;\n   }\n \n+  /**\n+   * Whether the user is an admin.\n+   */\n   get isAdmin() {\n     return this.role === UserRole.Admin;\n   }\n \n+  /**\n+   * Whether the user is a member (editor).\n+   */\n+  get isMember() {\n+    return this.role === UserRole.Member;\n+  }\n+\n+  /**\n+   * Whether the user is a viewer.\n+   */\n   get isViewer() {\n     return this.role === UserRole.Viewer;\n   }\n \n+  /**\n+   * Whether the user is a guest.\n+   */\n+  get isGuest() {\n+    return this.role === UserRole.Guest;\n+  }\n+\n   get color() {\n     return stringToColor(this.id);\n   }\n@@ -404,9 +427,10 @@ class User extends ParanoidModel<\n     return collectionStubs\n       .filter(\n         (c) =>\n-          Object.values(CollectionPermission).includes(\n+          (Object.values(CollectionPermission).includes(\n             c.permission as CollectionPermission\n-          ) ||\n+          ) &&\n+            !this.isGuest) ||\n           c.memberships.length > 0 ||\n           c.collectionGroupMemberships.length > 0\n       )\n\ndiff --git a/server/models/base/ParanoidModel.ts b/server/models/base/ParanoidModel.ts\nindex 7ebd8147e26f..5ec84514a981 100644\n--- a/server/models/base/ParanoidModel.ts\n+++ b/server/models/base/ParanoidModel.ts\n@@ -8,6 +8,15 @@ class ParanoidModel<\n > extends IdModel<TModelAttributes, TCreationAttributes> {\n   @DeletedAt\n   deletedAt: Date | null;\n+\n+  /**\n+   * Whether the model has been deleted.\n+   *\n+   * @returns True if the model has been deleted\n+   */\n+  get isDeleted() {\n+    return !!this.deletedAt;\n+  }\n }\n \n export default ParanoidModel;\n\ndiff --git a/server/policies/apiKey.ts b/server/policies/apiKey.ts\nindex 07e6145dff99..b128d698f64c 100644\n--- a/server/policies/apiKey.ts\n+++ b/server/policies/apiKey.ts\n@@ -1,19 +1,15 @@\n import { ApiKey, User, Team } from \"@server/models\";\n import { allow } from \"./cancan\";\n+import { and, isOwner, isTeamModel, isTeamMutable } from \"./utils\";\n \n-allow(User, \"createApiKey\", Team, (user, team) => {\n-  if (!team || user.isViewer || user.teamId !== team.id) {\n-    return false;\n-  }\n-  return true;\n-});\n+allow(User, \"createApiKey\", Team, (actor, team) =>\n+  and(\n+    //\n+    isTeamModel(actor, team),\n+    isTeamMutable(actor),\n+    !actor.isViewer,\n+    !actor.isGuest\n+  )\n+);\n \n-allow(User, [\"read\", \"update\", \"delete\"], ApiKey, (user, apiKey) => {\n-  if (!apiKey) {\n-    return false;\n-  }\n-  if (user.isViewer) {\n-    return false;\n-  }\n-  return user && user.id === apiKey.userId;\n-});\n+allow(User, [\"read\", \"update\", \"delete\"], ApiKey, isOwner);\n\ndiff --git a/server/policies/attachment.ts b/server/policies/attachment.ts\nindex 6c486ed1f737..60ac2fa6144c 100644\n--- a/server/policies/attachment.ts\n+++ b/server/policies/attachment.ts\n@@ -1,38 +1,12 @@\n import { Attachment, User, Team } from \"@server/models\";\n import { allow } from \"./cancan\";\n+import { and, isOwner, isTeamModel, or } from \"./utils\";\n \n-allow(User, \"createAttachment\", Team, (user, team) => {\n-  if (!team || user.isViewer || user.teamId !== team.id) {\n-    return false;\n-  }\n-  return true;\n-});\n+allow(User, \"createAttachment\", Team, isTeamModel);\n \n-allow(User, \"read\", Attachment, (actor, attachment) => {\n-  if (!attachment || !actor || attachment.teamId !== actor.teamId) {\n-    return false;\n-  }\n-  if (actor.isAdmin) {\n-    return true;\n-  }\n-  if (actor.id === attachment.userId) {\n-    return true;\n-  }\n-  return false;\n-});\n-\n-allow(User, \"delete\", Attachment, (actor, attachment) => {\n-  if (actor.isViewer) {\n-    return false;\n-  }\n-  if (!attachment || attachment.teamId !== actor.teamId) {\n-    return false;\n-  }\n-  if (actor.isAdmin) {\n-    return true;\n-  }\n-  if (actor.id === attachment.userId) {\n-    return true;\n-  }\n-  return false;\n-});\n+allow(User, [\"read\", \"update\", \"delete\"], Attachment, (actor, attachment) =>\n+  and(\n+    isTeamModel(actor, attachment),\n+    or(actor.isAdmin, isOwner(actor, attachment))\n+  )\n+);\n\ndiff --git a/server/policies/authenticationProvider.ts b/server/policies/authenticationProvider.ts\nindex 2a08ad3eaf9a..e47aafa0cbe5 100644\n--- a/server/policies/authenticationProvider.ts\n+++ b/server/policies/authenticationProvider.ts\n@@ -1,40 +1,9 @@\n import { AuthenticationProvider, User, Team } from \"@server/models\";\n-import { AdminRequiredError } from \"../errors\";\n import { allow } from \"./cancan\";\n+import { isTeamAdmin, isTeamModel } from \"./utils\";\n \n-allow(User, \"createAuthenticationProvider\", Team, (actor, team) => {\n-  if (!team || actor.teamId !== team.id) {\n-    return false;\n-  }\n-  if (actor.isAdmin) {\n-    return true;\n-  }\n+allow(User, \"createAuthenticationProvider\", Team, isTeamAdmin);\n \n-  throw AdminRequiredError();\n-});\n+allow(User, \"read\", AuthenticationProvider, isTeamModel);\n \n-allow(\n-  User,\n-  \"read\",\n-  AuthenticationProvider,\n-\n-  (actor, authenticationProvider) =>\n-    actor && actor.teamId === authenticationProvider?.teamId\n-);\n-\n-allow(\n-  User,\n-  [\"update\", \"delete\"],\n-  AuthenticationProvider,\n-\n-  (actor, authenticationProvider) => {\n-    if (actor.teamId !== authenticationProvider?.teamId) {\n-      return false;\n-    }\n-    if (actor.isAdmin) {\n-      return true;\n-    }\n-\n-    throw AdminRequiredError();\n-  }\n-);\n+allow(User, [\"update\", \"delete\"], AuthenticationProvider, isTeamAdmin);\n\ndiff --git a/server/policies/collection.ts b/server/policies/collection.ts\nindex fdb6e08a068e..bd0db9c9a5d5 100644\n--- a/server/policies/collection.ts\n+++ b/server/policies/collection.ts\n@@ -2,70 +2,72 @@ import invariant from \"invariant\";\n import some from \"lodash/some\";\n import { CollectionPermission, DocumentPermission } from \"@shared/types\";\n import { Collection, User, Team } from \"@server/models\";\n-import { AdminRequiredError } from \"../errors\";\n-import { allow } from \"./cancan\";\n-\n-allow(User, \"createCollection\", Team, (user, team) => {\n-  if (!team || user.isViewer || user.teamId !== team.id) {\n-    return false;\n-  }\n-  if (user.isAdmin || team.memberCollectionCreate) {\n-    return true;\n-  }\n-  return false;\n-});\n-\n-allow(User, \"importCollection\", Team, (actor, team) => {\n-  if (!team || actor.teamId !== team.id) {\n-    return false;\n-  }\n-  if (actor.isAdmin) {\n-    return true;\n-  }\n-\n-  throw AdminRequiredError();\n-});\n-\n-allow(User, \"move\", Collection, (user, collection) => {\n-  if (!collection || user.teamId !== collection.teamId) {\n-    return false;\n-  }\n-  if (collection.deletedAt) {\n-    return false;\n-  }\n-  if (user.isAdmin) {\n-    return true;\n-  }\n-\n-  throw AdminRequiredError();\n-});\n+import { allow, _can as can } from \"./cancan\";\n+import { and, isTeamAdmin, isTeamModel, isTeamMutable, or } from \"./utils\";\n+\n+allow(User, \"createCollection\", Team, (actor, team) =>\n+  and(\n+    isTeamModel(actor, team),\n+    isTeamMutable(actor),\n+    !actor.isGuest,\n+    !actor.isViewer,\n+    or(actor.isAdmin, !!team?.memberCollectionCreate)\n+  )\n+);\n \n-allow(User, \"read\", Collection, (user, collection) => {\n-  if (!collection || user.teamId !== collection.teamId) {\n-    return false;\n-  }\n+allow(User, \"importCollection\", Team, (actor, team) =>\n+  and(\n+    //\n+    isTeamAdmin(actor, team),\n+    isTeamMutable(actor)\n+  )\n+);\n \n-  if (collection.isPrivate) {\n-    return includesMembership(collection, Object.values(CollectionPermission));\n-  }\n+allow(User, \"move\", Collection, (actor, collection) =>\n+  and(\n+    //\n+    isTeamAdmin(actor, collection),\n+    isTeamMutable(actor),\n+    !collection?.deletedAt\n+  )\n+);\n \n-  return true;\n-});\n+allow(\n+  User,\n+  [\"read\", \"readDocument\", \"star\", \"unstar\"],\n+  Collection,\n+  (user, collection) => {\n+    if (!collection || user.teamId !== collection.teamId) {\n+      return false;\n+    }\n \n-allow(User, [\"star\", \"unstar\"], Collection, (user, collection) => {\n-  if (!collection || user.teamId !== collection.teamId) {\n-    return false;\n-  }\n+    if (collection.isPrivate || user.isGuest) {\n+      return includesMembership(\n+        collection,\n+        Object.values(CollectionPermission)\n+      );\n+    }\n \n-  if (collection.isPrivate) {\n-    return includesMembership(collection, Object.values(CollectionPermission));\n+    return true;\n   }\n+);\n \n-  return true;\n-});\n+allow(User, \"export\", Collection, (actor, collection) =>\n+  and(\n+    //\n+    can(actor, \"read\", collection),\n+    !actor.isViewer,\n+    !actor.isGuest\n+  )\n+);\n \n allow(User, \"share\", Collection, (user, collection) => {\n-  if (!collection || user.teamId !== collection.teamId) {\n+  if (\n+    !collection ||\n+    user.isGuest ||\n+    user.teamId !== collection.teamId ||\n+    !isTeamMutable(user)\n+  ) {\n     return false;\n   }\n   if (!collection.sharing) {\n@@ -88,24 +90,16 @@ allow(User, \"share\", Collection, (user, collection) => {\n   return true;\n });\n \n-allow(User, [\"readDocument\", \"export\"], Collection, (user, collection) => {\n-  if (!collection || user.teamId !== collection.teamId) {\n-    return false;\n-  }\n-\n-  if (collection.isPrivate) {\n-    return includesMembership(collection, Object.values(CollectionPermission));\n-  }\n-\n-  return true;\n-});\n-\n allow(\n   User,\n   [\"updateDocument\", \"createDocument\", \"deleteDocument\"],\n   Collection,\n   (user, collection) => {\n-    if (!collection || user.teamId !== collection.teamId) {\n+    if (\n+      !collection ||\n+      user.teamId !== collection.teamId ||\n+      !isTeamMutable(user)\n+    ) {\n       return false;\n     }\n \n@@ -115,7 +109,8 @@ allow(\n \n     if (\n       collection.permission !== CollectionPermission.ReadWrite ||\n-      user.isViewer\n+      user.isViewer ||\n+      user.isGuest\n     ) {\n       return includesMembership(collection, [\n         CollectionPermission.ReadWrite,\n@@ -128,7 +123,7 @@ allow(\n );\n \n allow(User, [\"update\", \"delete\"], Collection, (user, collection) => {\n-  if (!collection || user.teamId !== collection.teamId) {\n+  if (!collection || user.isGuest || user.teamId !== collection.teamId) {\n     return false;\n   }\n   if (user.isAdmin) {\n@@ -139,12 +134,16 @@ allow(User, [\"update\", \"delete\"], Collection, (user, collection) => {\n });\n \n function includesMembership(\n-  collection: Collection,\n+  collection: Collection | null,\n   permissions: (CollectionPermission | DocumentPermission)[]\n ) {\n+  if (!collection) {\n+    return false;\n+  }\n+\n   invariant(\n     collection.memberships,\n-    \"collection memberships should be preloaded, did you forget withMembership scope?\"\n+    \"Development: collection memberships not preloaded, did you forget `withMembership` scope?\"\n   );\n   return some(\n     [...collection.memberships, ...collection.collectionGroupMemberships],\n\ndiff --git a/server/policies/comment.ts b/server/policies/comment.ts\nindex de666e0fe382..7d411fe2861c 100644\n--- a/server/policies/comment.ts\n+++ b/server/policies/comment.ts\n@@ -1,27 +1,16 @@\n import { Comment, User, Team } from \"@server/models\";\n import { allow } from \"./cancan\";\n+import { and, isTeamModel, or } from \"./utils\";\n \n-allow(User, \"createComment\", Team, (user, team) => {\n-  if (!team || user.teamId !== team.id) {\n-    return false;\n-  }\n-  return true;\n-});\n+allow(User, \"createComment\", Team, isTeamModel);\n \n-allow(User, \"read\", Comment, (user, comment) => {\n-  if (!comment) {\n-    return false;\n-  }\n-  return user.teamId === comment.createdBy.teamId;\n-});\n+allow(User, \"read\", Comment, (actor, comment) =>\n+  isTeamModel(actor, comment?.createdBy)\n+);\n \n-allow(User, [\"update\", \"delete\"], Comment, (user, comment) => {\n-  if (!comment) {\n-    return false;\n-  }\n-  if (user.teamId !== comment.createdBy.teamId) {\n-    return false;\n-  }\n-\n-  return user.isAdmin || user?.id === comment.createdById;\n-});\n+allow(User, [\"update\", \"delete\"], Comment, (actor, comment) =>\n+  and(\n+    isTeamModel(actor, comment?.createdBy),\n+    or(actor.isAdmin, actor?.id === comment?.createdById)\n+  )\n+);\n\ndiff --git a/server/policies/document.ts b/server/policies/document.ts\nindex 85f01052acb8..a50c25b9bdc8 100644\n--- a/server/policies/document.ts\n+++ b/server/policies/document.ts\n@@ -7,446 +7,201 @@ import {\n } from \"@shared/types\";\n import { Document, Revision, User, Team } from \"@server/models\";\n import { allow, _cannot as cannot, _can as can } from \"./cancan\";\n+import { and, isTeamAdmin, isTeamModel, isTeamMutable, or } from \"./utils\";\n+\n+allow(User, \"createDocument\", Team, (actor, document) =>\n+  and(\n+    //\n+    !actor.isGuest,\n+    !actor.isViewer,\n+    isTeamModel(actor, document),\n+    isTeamMutable(actor)\n+  )\n+);\n \n-allow(User, \"createDocument\", Team, (user, team) => {\n-  if (!team || user.isViewer || user.teamId !== team.id) {\n-    return false;\n-  }\n-  return true;\n-});\n-\n-allow(User, \"read\", Document, (user, document) => {\n-  if (!document) {\n-    return false;\n-  }\n-\n-  if (\n-    includesMembership(document, [\n-      DocumentPermission.Read,\n-      DocumentPermission.ReadWrite,\n-    ])\n-  ) {\n-    return true;\n-  }\n-\n-  // existence of collection option is not required here to account for share tokens\n-  if (\n-    document.collection &&\n-    cannot(user, \"readDocument\", document.collection)\n-  ) {\n-    return false;\n-  }\n-\n-  if (document.isDraft) {\n-    return user.id === document.createdById;\n-  }\n-\n-  return user.teamId === document.teamId;\n-});\n-\n-allow(User, \"download\", Document, (user, document) => {\n-  if (!document) {\n-    return false;\n-  }\n-\n-  if (\n-    user.isViewer &&\n-    !user.team.getPreference(TeamPreference.ViewersCanExport)\n-  ) {\n-    return false;\n-  }\n-\n-  if (\n-    includesMembership(document, [\n-      DocumentPermission.Read,\n-      DocumentPermission.ReadWrite,\n-    ])\n-  ) {\n-    return true;\n-  }\n-\n-  // existence of collection option is not required here to account for share tokens\n-  if (\n-    document.collection &&\n-    cannot(user, \"readDocument\", document.collection)\n-  ) {\n-    return false;\n-  }\n-\n-  if (document.isDraft) {\n-    return user.id === document.createdById;\n-  }\n-\n-  return user.teamId === document.teamId;\n-});\n-\n-allow(User, \"comment\", Document, (user, document) => {\n-  if (!document || !document.isActive || document.template) {\n-    return false;\n-  }\n-\n-  if (\n-    includesMembership(document, [\n-      DocumentPermission.Read,\n-      DocumentPermission.ReadWrite,\n-    ])\n-  ) {\n-    return true;\n-  }\n-\n-  if (document.collectionId) {\n-    invariant(\n-      document.collection,\n-      \"collection is missing, did you forget to include in the query scope?\"\n-    );\n-    if (can(user, \"readDocument\", document.collection)) {\n-      return true;\n-    }\n-  }\n-\n-  return user.id === document.createdById;\n-});\n-\n-allow(User, [\"star\", \"unstar\"], Document, (user, document) => {\n-  if (!document || !document.isActive || document.template) {\n-    return false;\n-  }\n-\n-  if (\n-    includesMembership(document, [\n-      DocumentPermission.Read,\n-      DocumentPermission.ReadWrite,\n-    ])\n-  ) {\n-    return true;\n-  }\n-\n-  if (document.collectionId) {\n-    invariant(\n-      document.collection,\n-      \"collection is missing, did you forget to include in the query scope?\"\n-    );\n-    if (cannot(user, \"readDocument\", document.collection)) {\n-      return false;\n-    }\n-  }\n-\n-  return user.teamId === document.teamId;\n-});\n-\n-allow(User, \"share\", Document, (user, document) => {\n-  if (\n-    !document ||\n-    document.archivedAt ||\n-    document.deletedAt ||\n-    document.template\n-  ) {\n-    return false;\n-  }\n-\n-  if (document.collectionId) {\n-    invariant(\n-      document.collection,\n-      \"collection is missing, did you forget to include in the query scope?\"\n-    );\n-    if (cannot(user, \"share\", document.collection)) {\n-      return false;\n-    }\n-  }\n-\n-  if (document.isDraft) {\n-    return user.id === document.createdById;\n-  }\n-\n-  return user.teamId === document.teamId;\n-});\n-\n-allow(User, \"update\", Document, (user, document) => {\n-  if (!document || !document.isActive) {\n-    return false;\n-  }\n-\n-  if (includesMembership(document, [DocumentPermission.ReadWrite])) {\n-    return true;\n-  }\n-\n-  if (document.collectionId) {\n-    invariant(\n-      document.collection,\n-      \"collection is missing, did you forget to include in the query scope?\"\n-    );\n-    if (cannot(user, \"updateDocument\", document.collection)) {\n-      return false;\n-    }\n-  }\n-\n-  if (document.isDraft) {\n-    return user.id === document.createdById;\n-  }\n-\n-  return user.teamId === document.teamId;\n-});\n-\n-allow(User, \"publish\", Document, (user, document) => {\n-  if (!document || !document.isActive || !document.isDraft) {\n-    return false;\n-  }\n-\n-  if (document.collectionId) {\n-    invariant(\n-      document.collection,\n-      \"collection is missing, did you forget to include in the query scope?\"\n-    );\n-    if (can(user, \"updateDocument\", document.collection)) {\n-      return true;\n-    }\n-  }\n-\n-  return user.id === document.createdById;\n-});\n-\n-allow(User, [\"manageUsers\", \"duplicate\"], Document, (user, document) => {\n-  if (!document || !document.isActive) {\n-    return false;\n-  }\n-\n-  if (document.collectionId) {\n-    invariant(\n-      document.collection,\n-      \"collection is missing, did you forget to include in the query scope?\"\n-    );\n-    if (can(user, \"updateDocument\", document.collection)) {\n-      return true;\n-    }\n-  }\n-\n-  return user.id === document.createdById;\n-});\n-\n-allow(User, \"updateInsights\", Document, (user, document) => {\n-  if (!document || !document.isActive) {\n-    return false;\n-  }\n-\n-  if (document.collectionId) {\n-    invariant(\n-      document.collection,\n-      \"collection is missing, did you forget to include in the query scope?\"\n-    );\n-    if (can(user, \"update\", document.collection)) {\n-      return true;\n-    }\n-  }\n-\n-  return user.id === document.createdById;\n-});\n-\n-allow(User, \"createChildDocument\", Document, (user, document) => {\n-  if (\n-    !document ||\n-    !document.isActive ||\n-    document.isDraft ||\n-    document.template\n-  ) {\n-    return false;\n-  }\n-\n-  invariant(\n-    document.collection,\n-    \"collection is missing, did you forget to include in the query scope?\"\n-  );\n-  if (can(user, \"updateDocument\", document.collection)) {\n-    return true;\n-  }\n-  return user.id === document.createdById;\n-});\n-\n-allow(User, \"move\", Document, (user, document) => {\n-  if (!document || !document.isActive) {\n-    return false;\n-  }\n-  if (document.collection && can(user, \"updateDocument\", document.collection)) {\n-    return true;\n-  }\n-  return user.id === document.createdById;\n-});\n-\n-allow(User, \"pin\", Document, (user, document) => {\n-  if (\n-    !document ||\n-    !document.isActive ||\n-    document.isDraft ||\n-    document.template\n-  ) {\n-    return false;\n-  }\n-  invariant(\n-    document.collection,\n-    \"collection is missing, did you forget to include in the query scope?\"\n-  );\n-  if (can(user, \"update\", document.collection)) {\n-    return true;\n-  }\n-  return user.id === document.createdById;\n-});\n-\n-allow(User, \"unpin\", Document, (user, document) => {\n-  if (!document || document.isDraft || document.template) {\n-    return false;\n-  }\n-  invariant(\n-    document.collection,\n-    \"collection is missing, did you forget to include in the query scope?\"\n-  );\n-  if (can(user, \"update\", document.collection)) {\n-    return true;\n-  }\n-  return user.id === document.createdById;\n-});\n-\n-allow(User, [\"subscribe\", \"unsubscribe\"], Document, (user, document) => {\n-  if (\n-    !document ||\n-    !document.isActive ||\n-    document.isDraft ||\n-    document.template\n-  ) {\n-    return false;\n-  }\n-\n-  if (\n-    includesMembership(document, [\n-      DocumentPermission.Read,\n-      DocumentPermission.ReadWrite,\n-    ])\n-  ) {\n-    return true;\n-  }\n-\n-  invariant(\n-    document.collection,\n-    \"collection is missing, did you forget to include in the query scope?\"\n-  );\n-  if (can(user, \"readDocument\", document.collection)) {\n-    return true;\n-  }\n-\n-  return user.id === document.createdById;\n-});\n-\n-allow(User, \"pinToHome\", Document, (user, document) => {\n-  if (\n-    !document ||\n-    !document.isActive ||\n-    document.isDraft ||\n-    document.template\n-  ) {\n-    return false;\n-  }\n-\n-  return user.teamId === document.teamId && user.isAdmin;\n-});\n-\n-allow(User, \"delete\", Document, (user, document) => {\n-  if (!document || document.deletedAt || user.isViewer) {\n-    return false;\n-  }\n-\n-  // allow deleting document without a collection\n-  if (\n-    document.collection &&\n-    cannot(user, \"deleteDocument\", document.collection)\n-  ) {\n-    return false;\n-  }\n+allow(User, \"read\", Document, (actor, document) =>\n+  and(\n+    isTeamModel(actor, document),\n+    or(\n+      includesMembership(document, [\n+        DocumentPermission.Read,\n+        DocumentPermission.ReadWrite,\n+      ]),\n+      and(!!document?.isDraft, actor.id === document?.createdById),\n+      can(actor, \"readDocument\", document?.collection)\n+    )\n+  )\n+);\n \n-  // unpublished drafts can always be deleted by their owner\n-  if (document.isDraft) {\n-    return user.id === document.createdById;\n-  }\n+allow(User, [\"listRevisions\", \"listViews\"], Document, (actor, document) =>\n+  and(\n+    //\n+    can(actor, \"read\", document),\n+    !actor.isGuest\n+  )\n+);\n \n-  return user.teamId === document.teamId;\n-});\n+allow(User, \"download\", Document, (actor, document) =>\n+  and(\n+    can(actor, \"read\", document),\n+    or(\n+      and(!actor.isGuest, !actor.isViewer),\n+      !!actor.team.getPreference(TeamPreference.ViewersCanExport)\n+    )\n+  )\n+);\n \n-allow(User, \"permanentDelete\", Document, (user, document) => {\n-  if (!document || !document.deletedAt || user.isViewer) {\n-    return false;\n-  }\n+allow(User, \"comment\", Document, (actor, document) =>\n+  and(\n+    //\n+    can(actor, \"read\", document),\n+    isTeamMutable(actor),\n+    !!document?.isActive,\n+    !document?.template\n+  )\n+);\n \n-  // allow deleting document without a collection\n-  if (\n-    document.collection &&\n-    cannot(user, \"updateDocument\", document.collection)\n-  ) {\n-    return false;\n-  }\n+allow(\n+  User,\n+  [\"star\", \"unstar\", \"subscribe\", \"unsubscribe\"],\n+  Document,\n+  (actor, document) =>\n+    and(\n+      //\n+      can(actor, \"read\", document),\n+      !document?.template\n+    )\n+);\n \n-  // unpublished drafts can always be deleted by their owner\n-  if (document.isDraft && user.id === document.createdById) {\n-    return true;\n-  }\n+allow(User, \"share\", Document, (actor, document) =>\n+  and(\n+    can(actor, \"read\", document),\n+    isTeamMutable(actor),\n+    !!document?.isActive,\n+    !document?.template,\n+    !actor.isGuest,\n+    or(!document?.collection, can(actor, \"share\", document?.collection))\n+  )\n+);\n \n-  return user.teamId === document.teamId && user.isAdmin;\n-});\n+allow(User, \"update\", Document, (actor, document) =>\n+  and(\n+    can(actor, \"read\", document),\n+    isTeamMutable(actor),\n+    !!document?.isActive,\n+    or(\n+      includesMembership(document, [DocumentPermission.ReadWrite]),\n+      or(\n+        can(actor, \"updateDocument\", document?.collection),\n+        and(!!document?.isDraft && actor.id === document?.createdById)\n+      )\n+    )\n+  )\n+);\n \n-allow(User, \"restore\", Document, (user, document) => {\n-  if (!document || !document.deletedAt) {\n-    return false;\n-  }\n+allow(User, \"publish\", Document, (actor, document) =>\n+  and(\n+    //\n+    can(actor, \"update\", document),\n+    !!document?.isDraft\n+  )\n+);\n \n-  if (\n-    document.collection &&\n-    cannot(user, \"updateDocument\", document.collection)\n-  ) {\n-    return false;\n-  }\n+allow(User, [\"move\", \"duplicate\", \"manageUsers\"], Document, (actor, document) =>\n+  and(\n+    !actor.isGuest,\n+    can(actor, \"update\", document),\n+    or(\n+      can(actor, \"updateDocument\", document?.collection),\n+      and(!!document?.isDraft && actor.id === document?.createdById)\n+    )\n+  )\n+);\n \n-  // unpublished drafts can always be restored by their owner\n-  if (document.isDraft && user.id === document.createdById) {\n-    return true;\n-  }\n+allow(User, \"createChildDocument\", Document, (actor, document) =>\n+  and(\n+    can(actor, \"update\", document),\n+    !document?.isDraft,\n+    !document?.template,\n+    !actor.isGuest\n+  )\n+);\n \n-  return user.teamId === document.teamId;\n-});\n+allow(User, [\"pin\", \"unpin\"], Document, (actor, document) =>\n+  and(\n+    can(actor, \"update\", document),\n+    can(actor, \"update\", document?.collection),\n+    !document?.isDraft,\n+    !document?.template,\n+    !actor.isGuest\n+  )\n+);\n \n-allow(User, \"archive\", Document, (user, document) => {\n-  if (\n-    !document ||\n-    !document.isActive ||\n-    document.isDraft ||\n-    document.template\n-  ) {\n-    return false;\n-  }\n-  invariant(\n-    document.collection,\n-    \"collection is missing, did you forget to include in the query scope?\"\n-  );\n-  if (cannot(user, \"updateDocument\", document.collection)) {\n-    return false;\n-  }\n-  return user.teamId === document.teamId;\n-});\n+allow(User, \"pinToHome\", Document, (actor, document) =>\n+  and(\n+    //\n+    isTeamAdmin(actor, document),\n+    isTeamMutable(actor)\n+  )\n+);\n \n-allow(User, \"unarchive\", Document, (user, document) => {\n-  if (!document || !document.archivedAt || document.deletedAt) {\n-    return false;\n-  }\n+allow(User, \"delete\", Document, (actor, document) =>\n+  and(\n+    isTeamModel(actor, document),\n+    isTeamMutable(actor),\n+    !actor.isGuest,\n+    !document?.isDeleted,\n+    or(can(actor, \"update\", document), !document?.collection)\n+  )\n+);\n \n-  invariant(\n-    document.collection,\n-    \"collection is missing, did you forget to include in the query scope?\"\n-  );\n-  if (cannot(user, \"updateDocument\", document.collection)) {\n-    return false;\n-  }\n+allow(User, [\"restore\", \"permanentDelete\"], Document, (actor, document) =>\n+  and(\n+    isTeamModel(actor, document),\n+    !actor.isGuest,\n+    !!document?.isDeleted,\n+    or(\n+      includesMembership(document, [DocumentPermission.ReadWrite]),\n+      or(\n+        can(actor, \"updateDocument\", document?.collection),\n+        and(!!document?.isDraft && actor.id === document?.createdById)\n+      ),\n+      !document?.collection\n+    )\n+  )\n+);\n \n-  if (document.isDraft) {\n-    return user.id === document.createdById;\n-  }\n+allow(User, \"archive\", Document, (actor, document) =>\n+  and(\n+    !actor.isGuest,\n+    !document?.template,\n+    !document?.isDraft,\n+    !!document?.isActive,\n+    can(actor, \"update\", document),\n+    can(actor, \"updateDocument\", document?.collection)\n+  )\n+);\n \n-  return user.teamId === document.teamId;\n-});\n+allow(User, \"unarchive\", Document, (actor, document) =>\n+  and(\n+    !actor.isGuest,\n+    !document?.template,\n+    !document?.isDraft,\n+    !document?.isDeleted,\n+    !!document?.archivedAt,\n+    and(\n+      can(actor, \"read\", document),\n+      or(\n+        includesMembership(document, [DocumentPermission.ReadWrite]),\n+        or(\n+          can(actor, \"updateDocument\", document?.collection),\n+          and(!!document?.isDraft && actor.id === document?.createdById)\n+        )\n+      )\n+    ),\n+    can(actor, \"updateDocument\", document?.collection)\n+  )\n+);\n \n allow(\n   Document,\n@@ -456,7 +211,13 @@ allow(\n );\n \n allow(User, \"unpublish\", Document, (user, document) => {\n-  if (!document || !document.isActive || document.isDraft || user.isViewer) {\n+  if (\n+    !document ||\n+    user.isGuest ||\n+    user.isViewer ||\n+    !document.isActive ||\n+    document.isDraft\n+  ) {\n     return false;\n   }\n   invariant(\n@@ -470,9 +231,13 @@ allow(User, \"unpublish\", Document, (user, document) => {\n });\n \n function includesMembership(\n-  document: Document,\n+  document: Document | null,\n   permissions: (DocumentPermission | CollectionPermission)[]\n ) {\n+  if (!document) {\n+    return false;\n+  }\n+\n   invariant(\n     document.memberships,\n     \"document memberships should be preloaded, did you forget withMembership scope?\"\n\ndiff --git a/server/policies/fileOperation.ts b/server/policies/fileOperation.ts\nindex 1891638490a0..586e9b47dce6 100644\n--- a/server/policies/fileOperation.ts\n+++ b/server/policies/fileOperation.ts\n@@ -1,35 +1,25 @@\n import { FileOperationState, FileOperationType } from \"@shared/types\";\n import { User, Team, FileOperation } from \"@server/models\";\n import { allow } from \"./cancan\";\n+import { and, isTeamAdmin, isTeamMutable, or } from \"./utils\";\n \n allow(\n   User,\n   [\"createFileOperation\", \"createImport\", \"createExport\"],\n   Team,\n-  (user, team) => {\n-    if (!team || user.isViewer || user.teamId !== team.id) {\n-      return false;\n-    }\n-    return user.isAdmin;\n-  }\n+  // Note: Not checking for isTeamMutable here because we want to allow exporting data in read-only.\n+  isTeamAdmin\n );\n \n-allow(User, \"read\", FileOperation, (user, fileOperation) => {\n-  if (!fileOperation || user.isViewer || user.teamId !== fileOperation.teamId) {\n-    return false;\n-  }\n-  return user.isAdmin;\n-});\n+allow(User, \"read\", FileOperation, isTeamAdmin);\n \n-allow(User, \"delete\", FileOperation, (user, fileOperation) => {\n-  if (!fileOperation || user.isViewer || user.teamId !== fileOperation.teamId) {\n-    return false;\n-  }\n-  if (\n-    fileOperation.type === FileOperationType.Export &&\n-    fileOperation.state !== FileOperationState.Complete\n-  ) {\n-    return false;\n-  }\n-  return user.isAdmin;\n-});\n+allow(User, \"delete\", FileOperation, (actor, fileOperation) =>\n+  and(\n+    isTeamAdmin(actor, fileOperation),\n+    isTeamMutable(actor),\n+    or(\n+      fileOperation?.type !== FileOperationType.Export,\n+      fileOperation?.state === FileOperationState.Complete\n+    )\n+  )\n+);\n\ndiff --git a/server/policies/group.ts b/server/policies/group.ts\nindex 3922cd6ca3a5..8c142227e3a7 100644\n--- a/server/policies/group.ts\n+++ b/server/policies/group.ts\n@@ -1,34 +1,35 @@\n import { Group, User, Team } from \"@server/models\";\n-import { AdminRequiredError } from \"../errors\";\n import { allow } from \"./cancan\";\n+import { and, isTeamAdmin, isTeamModel, isTeamMutable } from \"./utils\";\n \n-allow(User, \"createGroup\", Team, (actor, team) => {\n-  if (!team || actor.isViewer || actor.teamId !== team.id) {\n-    return false;\n-  }\n-  if (actor.isAdmin) {\n-    return true;\n-  }\n+allow(User, \"createGroup\", Team, (actor, team) =>\n+  and(\n+    //\n+    isTeamAdmin(actor, team),\n+    isTeamMutable(actor)\n+  )\n+);\n \n-  throw AdminRequiredError();\n-});\n+allow(User, \"listGroups\", Team, (actor, team) =>\n+  and(\n+    //\n+    isTeamModel(actor, team),\n+    !actor.isGuest\n+  )\n+);\n \n-allow(User, \"read\", Group, (actor, group) => {\n-  // for the time being, we're going to let everyone on the team see every group\n-  // we may need to make this more granular in the future\n-  if (!group || actor.teamId !== group.teamId) {\n-    return false;\n-  }\n-  return true;\n-});\n+allow(User, \"read\", Group, (actor, team) =>\n+  and(\n+    //\n+    isTeamModel(actor, team),\n+    !actor.isGuest\n+  )\n+);\n \n-allow(User, [\"update\", \"delete\"], Group, (actor, group) => {\n-  if (!group || actor.isViewer || actor.teamId !== group.teamId) {\n-    return false;\n-  }\n-  if (actor.isAdmin) {\n-    return true;\n-  }\n-\n-  throw AdminRequiredError();\n-});\n+allow(User, [\"update\", \"delete\"], Group, (actor, team) =>\n+  and(\n+    //\n+    isTeamAdmin(actor, team),\n+    isTeamMutable(actor)\n+  )\n+);\n\ndiff --git a/server/policies/integration.ts b/server/policies/integration.ts\nindex 1409f609152b..b4850c2f3ddc 100644\n--- a/server/policies/integration.ts\n+++ b/server/policies/integration.ts\n@@ -1,42 +1,31 @@\n import { IntegrationType } from \"@shared/types\";\n import { Integration, User, Team } from \"@server/models\";\n-import { AdminRequiredError } from \"../errors\";\n import { allow } from \"./cancan\";\n+import {\n+  and,\n+  isOwner,\n+  isTeamAdmin,\n+  isTeamModel,\n+  isTeamMutable,\n+  or,\n+} from \"./utils\";\n \n-allow(User, \"createIntegration\", Team, (actor, team) => {\n-  if (!team || actor.isViewer || actor.teamId !== team.id) {\n-    return false;\n-  }\n-  if (actor.isAdmin) {\n-    return true;\n-  }\n-\n-  throw AdminRequiredError();\n-});\n-\n-allow(\n-  User,\n-  \"read\",\n-  Integration,\n-  (user, integration) => user.teamId === integration?.teamId\n+allow(User, \"createIntegration\", Team, (actor, team) =>\n+  and(isTeamAdmin(actor, team), isTeamMutable(actor))\n );\n \n-allow(User, [\"update\", \"delete\"], Integration, (user, integration) => {\n-  if (!integration || user.teamId !== integration.teamId) {\n-    return false;\n-  }\n-  if (\n-    integration.userId === user.id &&\n-    integration.type === IntegrationType.LinkedAccount\n-  ) {\n-    return true;\n-  }\n-  if (user.isViewer) {\n-    return false;\n-  }\n-  if (user.isAdmin) {\n-    return true;\n-  }\n+allow(User, \"read\", Integration, isTeamModel);\n \n-  throw AdminRequiredError();\n-});\n+allow(User, [\"update\", \"delete\"], Integration, (actor, integration) =>\n+  and(\n+    isTeamModel(actor, integration),\n+    isTeamMutable(actor),\n+    !actor.isGuest,\n+    !actor.isViewer,\n+    or(\n+      actor.isAdmin,\n+      isOwner(actor, integration) &&\n+        integration.type === IntegrationType.LinkedAccount\n+    )\n+  )\n+);\n\ndiff --git a/server/policies/notification.ts b/server/policies/notification.ts\nindex e66731b508cd..36a854481489 100644\n--- a/server/policies/notification.ts\n+++ b/server/policies/notification.ts\n@@ -1,9 +1,5 @@\n import { Notification, User } from \"@server/models\";\n import { allow } from \"./cancan\";\n+import { isOwner } from \"./utils\";\n \n-allow(User, [\"read\", \"update\"], Notification, (user, notification) => {\n-  if (!notification) {\n-    return false;\n-  }\n-  return user?.id === notification.userId;\n-});\n+allow(User, [\"read\", \"update\"], Notification, isOwner);\n\ndiff --git a/server/policies/pins.ts b/server/policies/pins.ts\nindex 5235ce6f1e1e..9a0cc962ac39 100644\n--- a/server/policies/pins.ts\n+++ b/server/policies/pins.ts\n@@ -1,9 +1,5 @@\n import { User, Pin } from \"@server/models\";\n import { allow } from \"./cancan\";\n+import { isTeamAdmin } from \"./utils\";\n \n-allow(\n-  User,\n-  [\"update\", \"delete\"],\n-  Pin,\n-  (user, pin) => user.teamId === pin?.teamId && user.isAdmin\n-);\n+allow(User, [\"update\", \"delete\"], Pin, isTeamAdmin);\n\ndiff --git a/server/policies/searchQuery.ts b/server/policies/searchQuery.ts\nindex 8827cecead1a..feeb111ebcb5 100644\n--- a/server/policies/searchQuery.ts\n+++ b/server/policies/searchQuery.ts\n@@ -1,9 +1,5 @@\n import { SearchQuery, User } from \"@server/models\";\n import { allow } from \"./cancan\";\n+import { isOwner } from \"./utils\";\n \n-allow(\n-  User,\n-  [\"read\", \"delete\"],\n-  SearchQuery,\n-  (user, searchQuery) => user && user.id === searchQuery?.userId\n-);\n+allow(User, [\"read\", \"delete\"], SearchQuery, isOwner);\n\ndiff --git a/server/policies/share.ts b/server/policies/share.ts\nindex b0139ae9c7ee..b64830b603f0 100644\n--- a/server/policies/share.ts\n+++ b/server/policies/share.ts\n@@ -1,41 +1,46 @@\n-import { Share, User } from \"@server/models\";\n-import { AdminRequiredError } from \"../errors\";\n-import { allow, _cannot as cannot } from \"./cancan\";\n+import { Share, Team, User } from \"@server/models\";\n+import { allow, _can as can } from \"./cancan\";\n+import { and, isOwner, isTeamModel, isTeamMutable, or } from \"./utils\";\n \n-allow(User, \"read\", Share, (user, share) => user.teamId === share?.teamId);\n+allow(User, \"createShare\", Team, (actor, team) =>\n+  and(\n+    //\n+    isTeamModel(actor, team),\n+    isTeamMutable(actor),\n+    !actor.isGuest\n+  )\n+);\n \n-allow(User, \"update\", Share, (user, share) => {\n-  if (!share) {\n-    return false;\n-  }\n-  if (user.isViewer) {\n-    return false;\n-  }\n+allow(User, \"listShares\", Team, (actor, team) =>\n+  and(\n+    //\n+    isTeamModel(actor, team),\n+    !actor.isGuest\n+  )\n+);\n \n-  // only the user who can share the document publicly can update the share.\n-  if (cannot(user, \"share\", share.document)) {\n-    return false;\n-  }\n+allow(User, \"read\", Share, (actor, share) =>\n+  and(\n+    //\n+    isTeamModel(actor, share),\n+    !actor.isGuest\n+  )\n+);\n \n-  return user.teamId === share.teamId;\n-});\n+allow(User, \"update\", Share, (actor, share) =>\n+  and(\n+    isTeamModel(actor, share),\n+    !actor.isGuest,\n+    !actor.isViewer,\n+    can(actor, \"share\", share?.document)\n+  )\n+);\n \n-allow(User, \"revoke\", Share, (user, share) => {\n-  if (!share) {\n-    return false;\n-  }\n-  if (user.isViewer) {\n-    return false;\n-  }\n-  if (user.teamId !== share.teamId) {\n-    return false;\n-  }\n-  if (user.id === share.userId) {\n-    return true;\n-  }\n-  if (user.isAdmin) {\n-    return true;\n-  }\n-\n-  throw AdminRequiredError();\n-});\n+allow(User, \"revoke\", Share, (actor, share) =>\n+  and(\n+    isTeamModel(actor, share),\n+    !actor.isGuest,\n+    !actor.isViewer,\n+    or(actor.isAdmin, isOwner(actor, share))\n+  )\n+);\n\ndiff --git a/server/policies/star.ts b/server/policies/star.ts\nindex faa4bde2bd69..edd80b02e385 100644\n--- a/server/policies/star.ts\n+++ b/server/policies/star.ts\n@@ -1,9 +1,5 @@\n import { User, Star } from \"@server/models\";\n import { allow } from \"./cancan\";\n+import { isOwner } from \"./utils\";\n \n-allow(\n-  User,\n-  [\"update\", \"delete\"],\n-  Star,\n-  (user, star) => user.id === star?.userId\n-);\n+allow(User, [\"read\", \"update\", \"delete\"], Star, isOwner);\n\ndiff --git a/server/policies/subscription.ts b/server/policies/subscription.ts\nindex b600d4e258ea..2ae71f3ca9fa 100644\n--- a/server/policies/subscription.ts\n+++ b/server/policies/subscription.ts\n@@ -1,21 +1,5 @@\n import { Subscription, User } from \"@server/models\";\n import { allow } from \"./cancan\";\n+import { isOwner } from \"./utils\";\n \n-allow(\n-  User,\n-  [\"read\", \"update\", \"delete\"],\n-  Subscription,\n-  (user, subscription) => {\n-    if (!subscription) {\n-      return false;\n-    }\n-\n-    // If `user` is an admin, early exit with allow.\n-    if (user.isAdmin) {\n-      return true;\n-    }\n-\n-    // User should be able to read their subscriptions.\n-    return user.id === subscription.userId;\n-  }\n-);\n+allow(User, [\"read\", \"update\", \"delete\"], Subscription, isOwner);\n\ndiff --git a/server/policies/team.ts b/server/policies/team.ts\nindex 7c311fd52246..9e50f3bb04b9 100644\n--- a/server/policies/team.ts\n+++ b/server/policies/team.ts\n@@ -1,41 +1,33 @@\n-import env from \"@server/env\";\n-import { IncorrectEditionError } from \"@server/errors\";\n import { Team, User } from \"@server/models\";\n import { allow } from \"./cancan\";\n+import { and, isCloudHosted, isTeamAdmin, isTeamModel } from \"./utils\";\n \n-allow(User, \"read\", Team, (user, team) => user.teamId === team?.id);\n+allow(User, \"read\", Team, isTeamModel);\n \n-allow(User, \"share\", Team, (user, team) => {\n-  if (!team || user.isViewer || user.teamId !== team.id) {\n-    return false;\n-  }\n-  return team.sharing;\n-});\n+allow(User, \"share\", Team, (actor, team) =>\n+  and(\n+    isTeamModel(actor, team),\n+    !actor.isGuest,\n+    !actor.isViewer,\n+    !!team?.sharing\n+  )\n+);\n \n-allow(User, \"createTeam\", Team, () => {\n-  if (!env.isCloudHosted) {\n-    throw IncorrectEditionError(\n-      \"Functionality is not available in this edition\"\n-    );\n-  }\n-  return true;\n-});\n+allow(User, \"createTeam\", Team, (actor) =>\n+  and(\n+    //\n+    isCloudHosted(),\n+    !actor.isGuest,\n+    !actor.isViewer\n+  )\n+);\n \n-allow(User, \"update\", Team, (user, team) => {\n-  if (!team || user.isViewer || user.teamId !== team.id) {\n-    return false;\n-  }\n-  return user.isAdmin;\n-});\n+allow(User, \"update\", Team, isTeamAdmin);\n \n-allow(User, [\"delete\", \"audit\"], Team, (user, team) => {\n-  if (!env.isCloudHosted) {\n-    throw IncorrectEditionError(\n-      \"Functionality is not available in this edition\"\n-    );\n-  }\n-  if (!team || user.isViewer || user.teamId !== team.id) {\n-    return false;\n-  }\n-  return user.isAdmin;\n-});\n+allow(User, [\"delete\", \"audit\"], Team, (actor, team) =>\n+  and(\n+    //\n+    isCloudHosted(),\n+    isTeamAdmin(actor, team)\n+  )\n+);\n\ndiff --git a/server/policies/user.ts b/server/policies/user.ts\nindex c77b339dd70a..f618e75e4551 100644\n--- a/server/policies/user.ts\n+++ b/server/policies/user.ts\n@@ -1,114 +1,59 @@\n import { TeamPreference } from \"@shared/types\";\n import { User, Team } from \"@server/models\";\n-import { AdminRequiredError } from \"../errors\";\n import { allow } from \"./cancan\";\n+import { and, isTeamAdmin, isTeamModel, isTeamMutable, or } from \"./utils\";\n \n-allow(\n-  User,\n-  \"read\",\n-  User,\n-  (actor, user) => user && user.teamId === actor.teamId\n-);\n-\n-allow(User, \"inviteUser\", Team, (actor, team) => {\n-  if (!team || actor.teamId !== team.id || actor.isViewer) {\n-    return false;\n-  }\n-  if (actor.isAdmin || team.getPreference(TeamPreference.MembersCanInvite)) {\n-    return true;\n-  }\n-\n-  throw AdminRequiredError();\n-});\n-\n-allow(User, \"update\", User, (actor, user) => {\n-  if (!user || user.teamId !== actor.teamId) {\n-    return false;\n-  }\n-  if (user.id === actor.id) {\n-    return true;\n-  }\n-\n-  if (actor.isAdmin) {\n-    return true;\n-  }\n-\n-  return false;\n-});\n-\n-allow(User, \"delete\", User, (actor, user) => {\n-  if (!user || user.teamId !== actor.teamId) {\n-    return false;\n-  }\n-  if (user.id === actor.id) {\n-    return true;\n-  }\n-  if (actor.isAdmin) {\n-    return true;\n-  }\n-\n-  throw AdminRequiredError();\n-});\n+allow(User, \"read\", User, isTeamModel);\n \n-allow(User, [\"activate\", \"suspend\"], User, (actor, user) => {\n-  if (!user || user.teamId !== actor.teamId) {\n-    return false;\n-  }\n-  if (actor.isAdmin) {\n-    return true;\n-  }\n-\n-  throw AdminRequiredError();\n-});\n-\n-allow(User, \"readDetails\", User, (actor, user) => {\n-  if (!user || user.teamId !== actor.teamId) {\n-    return false;\n-  }\n-  if (user === actor) {\n-    return true;\n-  }\n-  return actor.isAdmin;\n-});\n+allow(User, \"listUsers\", Team, (actor, team) =>\n+  and(\n+    //\n+    isTeamModel(actor, team),\n+    !actor.isGuest\n+  )\n+);\n \n-allow(User, \"promote\", User, (actor, user) => {\n-  if (!user || user.teamId !== actor.teamId) {\n-    return false;\n-  }\n-  if (user.isAdmin || user.isSuspended) {\n-    return false;\n-  }\n-  if (actor.isAdmin) {\n-    return true;\n-  }\n+allow(User, \"inviteUser\", Team, (actor, team) =>\n+  and(\n+    isTeamModel(actor, team),\n+    isTeamMutable(actor),\n+    !actor.isGuest,\n+    !actor.isViewer,\n+    actor.isAdmin || !!team?.getPreference(TeamPreference.MembersCanInvite)\n+  )\n+);\n \n-  throw AdminRequiredError();\n-});\n+allow(User, [\"update\", \"delete\", \"readDetails\"], User, (actor, user) =>\n+  or(\n+    //\n+    isTeamAdmin(actor, user),\n+    actor.id === user?.id\n+  )\n+);\n \n-allow(User, \"resendInvite\", User, (actor, user) => {\n-  if (!user || user.teamId !== actor.teamId) {\n-    return false;\n-  }\n-  if (!user.isInvited) {\n-    return false;\n-  }\n-  if (actor.isAdmin) {\n-    return true;\n-  }\n+allow(User, [\"activate\", \"suspend\"], User, isTeamAdmin);\n \n-  throw AdminRequiredError();\n-});\n+allow(User, \"promote\", User, (actor, user) =>\n+  and(\n+    //\n+    isTeamAdmin(actor, user),\n+    !user?.isAdmin,\n+    !user?.isSuspended\n+  )\n+);\n \n-allow(User, \"demote\", User, (actor, user) => {\n-  if (!user || user.teamId !== actor.teamId) {\n-    return false;\n-  }\n-  if (user.isSuspended) {\n-    return false;\n-  }\n-  if (actor.isAdmin) {\n-    return true;\n-  }\n+allow(User, \"demote\", User, (actor, user) =>\n+  and(\n+    //\n+    isTeamAdmin(actor, user),\n+    !user?.isSuspended\n+  )\n+);\n \n-  throw AdminRequiredError();\n-});\n+allow(User, \"resendInvite\", User, (actor, user) =>\n+  and(\n+    //\n+    isTeamAdmin(actor, user),\n+    !!user?.isInvited\n+  )\n+);\n\ndiff --git a/server/policies/userMembership.ts b/server/policies/userMembership.ts\nindex 9eefdce2f8e6..855cf49b6e55 100644\n--- a/server/policies/userMembership.ts\n+++ b/server/policies/userMembership.ts\n@@ -1,9 +1,11 @@\n import { User, UserMembership } from \"@server/models\";\n import { allow } from \"./cancan\";\n+import { isOwner, or } from \"./utils\";\n \n-allow(\n-  User,\n-  [\"update\", \"delete\"],\n-  UserMembership,\n-  (user, membership) => user.id === membership?.userId || user.isAdmin\n+allow(User, [\"update\", \"delete\"], UserMembership, (actor, membership) =>\n+  or(\n+    //\n+    isOwner(actor, membership),\n+    actor.isAdmin\n+  )\n );\n\ndiff --git a/server/policies/utils.ts b/server/policies/utils.ts\nnew file mode 100644\nindex 000000000000..0b42cf2c612b\n--- /dev/null\n+++ b/server/policies/utils.ts\n@@ -0,0 +1,91 @@\n+import env from \"@server/env\";\n+import { IncorrectEditionError } from \"@server/errors\";\n+import { User, Team } from \"@server/models\";\n+import Model from \"@server/models/base/Model\";\n+\n+export function and(...args: boolean[]) {\n+  return args.every(Boolean);\n+}\n+\n+export function or(...args: boolean[]) {\n+  return args.some(Boolean);\n+}\n+\n+/**\n+ * Check if the actor is present in the same team as the model.\n+ *\n+ * @param actor The actor to check\n+ * @param model The model to check\n+ * @returns True if the actor is in the same team as the model\n+ */\n+export function isTeamModel(\n+  actor: User,\n+  model: Model | null | undefined\n+): model is Model {\n+  if (!model) {\n+    return false;\n+  }\n+  if (model instanceof Team) {\n+    return actor.teamId === model.id;\n+  }\n+  if (\"teamId\" in model) {\n+    return actor.teamId === model.teamId;\n+  }\n+  return false;\n+}\n+\n+/**\n+ * Check if the actor is the owner of the model.\n+ *\n+ * @param actor The actor to check\n+ * @param model The model to check\n+ * @returns True if the actor is the owner of the model\n+ */\n+export function isOwner(\n+  actor: User,\n+  model: Model | null | undefined\n+): model is Model {\n+  if (!model) {\n+    return false;\n+  }\n+  if (\"userId\" in model) {\n+    return actor.id === model.userId;\n+  }\n+  return false;\n+}\n+\n+/**\n+ * Check if the actor is an admin of the team.\n+ *\n+ * @param actor The actor to check\n+ * @param mode The model to check\n+ * @returns True if the actor is an admin of the team the model belongs to\n+ */\n+export function isTeamAdmin(\n+  actor: User,\n+  model: Model | null | undefined\n+): model is Model {\n+  return and(isTeamModel(actor, model), actor.isAdmin);\n+}\n+\n+/**\n+ * Check the actors team is mutable, meaning the team models can be modified.\n+ *\n+ * @param actor The actor to check\n+ * @returns True if the actor's team is mutable\n+ */\n+export function isTeamMutable(_actor: User, _model?: Model | null) {\n+  return true;\n+}\n+\n+/**\n+ * Check if this instance is running in the cloud-hosted environment.\n+ */\n+export function isCloudHosted() {\n+  if (!env.isCloudHosted) {\n+    throw IncorrectEditionError(\n+      \"Functionality is not available in this edition\"\n+    );\n+  }\n+  return true;\n+}\n\ndiff --git a/server/policies/webhookSubscription.ts b/server/policies/webhookSubscription.ts\nindex 27a155333100..95f71ebb5469 100644\n--- a/server/policies/webhookSubscription.ts\n+++ b/server/policies/webhookSubscription.ts\n@@ -1,35 +1,15 @@\n import { User, Team, WebhookSubscription } from \"@server/models\";\n import { allow } from \"./cancan\";\n+import { and, isTeamAdmin, isTeamMutable } from \"./utils\";\n+\n+allow(User, \"createWebhookSubscription\", Team, (actor, team) =>\n+  and(\n+    //\n+    isTeamAdmin(actor, team),\n+    isTeamMutable(actor)\n+  )\n+);\n \n-allow(User, \"listWebhookSubscription\", Team, (user, team) => {\n-  if (!team || user.isViewer || user.teamId !== team.id) {\n-    return false;\n-  }\n-\n-  return user.isAdmin;\n-});\n-\n-allow(User, \"createWebhookSubscription\", Team, (user, team) => {\n-  if (!team || user.isViewer || user.teamId !== team.id) {\n-    return false;\n-  }\n-\n-  return user.isAdmin;\n-});\n-\n-allow(\n-  User,\n-  [\"read\", \"update\", \"delete\"],\n-  WebhookSubscription,\n-  (user, webhook): boolean => {\n-    if (!user || !webhook) {\n-      return false;\n-    }\n-\n-    if (!user.isAdmin) {\n-      return false;\n-    }\n+allow(User, \"listWebhookSubscription\", Team, isTeamAdmin);\n \n-    return user.teamId === webhook.teamId;\n-  }\n-);\n+allow(User, [\"read\", \"update\", \"delete\"], WebhookSubscription, isTeamAdmin);\n\ndiff --git a/server/routes/api/groups/groups.ts b/server/routes/api/groups/groups.ts\nindex 8fb3a621a9a2..0e21bed4d2ec 100644\n--- a/server/routes/api/groups/groups.ts\n+++ b/server/routes/api/groups/groups.ts\n@@ -27,6 +27,7 @@ router.post(\n   async (ctx: APIContext<T.GroupsListReq>) => {\n     const { direction, sort, userId, name } = ctx.input.body;\n     const { user } = ctx.state.auth;\n+    authorize(user, \"listGroups\", user.team);\n \n     let where: WhereOptions<Group> = {\n       teamId: user.teamId,\n\ndiff --git a/server/routes/api/revisions/revisions.ts b/server/routes/api/revisions/revisions.ts\nindex 21f8e35d8eeb..45d39dd517f2 100644\n--- a/server/routes/api/revisions/revisions.ts\n+++ b/server/routes/api/revisions/revisions.ts\n@@ -32,14 +32,14 @@ router.post(\n       const document = await Document.findByPk(revision.documentId, {\n         userId: user.id,\n       });\n-      authorize(user, \"read\", document);\n+      authorize(user, \"listRevisions\", document);\n       after = revision;\n       before = await revision.before();\n     } else if (documentId) {\n       const document = await Document.findByPk(documentId, {\n         userId: user.id,\n       });\n-      authorize(user, \"read\", document);\n+      authorize(user, \"listRevisions\", document);\n       after = Revision.buildFromDocument(document);\n       after.id = RevisionHelper.latestId(document.id);\n       after.user = document.updatedBy;\n@@ -75,7 +75,7 @@ router.post(\n     const document = await Document.findByPk(revision.documentId, {\n       userId: user.id,\n     });\n-    authorize(user, \"read\", document);\n+    authorize(user, \"listRevisions\", document);\n \n     let before;\n     if (compareToId) {\n@@ -126,7 +126,7 @@ router.post(\n     const document = await Document.findByPk(documentId, {\n       userId: user.id,\n     });\n-    authorize(user, \"read\", document);\n+    authorize(user, \"listRevisions\", document);\n \n     const revisions = await Revision.findAll({\n       where: {\n\ndiff --git a/server/routes/api/shares/shares.ts b/server/routes/api/shares/shares.ts\nindex 9e955bc44c46..445649ef8112 100644\n--- a/server/routes/api/shares/shares.ts\n+++ b/server/routes/api/shares/shares.ts\n@@ -99,6 +99,8 @@ router.post(\n   async (ctx: APIContext<T.SharesListReq>) => {\n     const { sort, direction } = ctx.input.body;\n     const { user } = ctx.state.auth;\n+    authorize(user, \"listShares\", user.team);\n+\n     const where: WhereOptions<Share> = {\n       teamId: user.teamId,\n       userId: user.id,\n@@ -169,6 +171,8 @@ router.post(\n     const { documentId, published, urlId, includeChildDocuments } =\n       ctx.input.body;\n     const { user } = ctx.state.auth;\n+    authorize(user, \"createShare\", user.team);\n+\n     const document = await Document.findByPk(documentId, {\n       userId: user.id,\n     });\n\ndiff --git a/server/routes/api/views/views.ts b/server/routes/api/views/views.ts\nindex 37be7b26afce..e5f9f9ce07af 100644\n--- a/server/routes/api/views/views.ts\n+++ b/server/routes/api/views/views.ts\n@@ -23,7 +23,7 @@ router.post(\n     const document = await Document.findByPk(documentId, {\n       userId: user.id,\n     });\n-    authorize(user, \"read\", document);\n+    authorize(user, \"listViews\", document);\n \n     if (!document.insightsEnabled) {\n       throw ValidationError(\"Insights are not enabled for this document\");\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 9ef1b0ff82c5..8c12a861e705 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -795,6 +795,7 @@\n   \"Where do I find the file?\": \"Where do I find the file?\",\n   \"In Notion, click <em>Settings & Members</em> in the left sidebar and open Settings. Look for the Export section, and click <em>Export all workspace content</em>. Choose <em>HTML</em> as the format for the best data compatability.\": \"In Notion, click <em>Settings & Members</em> in the left sidebar and open Settings. Look for the Export section, and click <em>Export all workspace content</em>. Choose <em>HTML</em> as the format for the best data compatability.\",\n   \"Last active\": \"Last active\",\n+  \"Guest\": \"Guest\",\n   \"Shared\": \"Shared\",\n   \"by {{ name }}\": \"by {{ name }}\",\n   \"Last accessed\": \"Last accessed\",\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex 65afb6cfb391..84360174b751 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -2,6 +2,7 @@ export enum UserRole {\n   Admin = \"admin\",\n   Member = \"member\",\n   Viewer = \"viewer\",\n+  Guest = \"guest\",\n }\n \n export type DateFilter = \"day\" | \"week\" | \"month\" | \"year\";\n",
    "test_patch": "diff --git a/server/policies/collection.test.ts b/server/policies/collection.test.ts\nindex de1f8595eb28..543488d93a1d 100644\n--- a/server/policies/collection.test.ts\n+++ b/server/policies/collection.test.ts\n@@ -24,6 +24,7 @@ describe(\"admin\", () => {\n     }).findByPk(collection.id);\n     const abilities = serialize(user, reloaded);\n     expect(abilities.readDocument).toEqual(false);\n+    expect(abilities.updateDocument).toEqual(false);\n     expect(abilities.createDocument).toEqual(false);\n     expect(abilities.share).toEqual(false);\n     expect(abilities.read).toEqual(false);\n@@ -41,6 +42,7 @@ describe(\"admin\", () => {\n     });\n     const abilities = serialize(user, collection);\n     expect(abilities.readDocument).toEqual(true);\n+    expect(abilities.updateDocument).toEqual(true);\n     expect(abilities.createDocument).toEqual(true);\n     expect(abilities.share).toEqual(true);\n     expect(abilities.read).toEqual(true);\n@@ -72,8 +74,8 @@ describe(\"member\", () => {\n       const abilities = serialize(user, reloaded);\n       expect(abilities.read).toEqual(true);\n       expect(abilities.readDocument).toEqual(true);\n-      expect(abilities.createDocument).toEqual(true);\n-      expect(abilities.share).toEqual(true);\n+      // expect(abilities.createDocument).toEqual(true);\n+      // expect(abilities.share).toEqual(true);\n       expect(abilities.update).toEqual(true);\n     });\n   });\n@@ -336,3 +338,53 @@ describe(\"viewer\", () => {\n     });\n   });\n });\n+\n+describe(\"guest\", () => {\n+  describe(\"read_write permission\", () => {\n+    it(\"should allow no permissions for guest\", async () => {\n+      const team = await buildTeam();\n+      const user = await buildUser({\n+        role: UserRole.Guest,\n+        teamId: team.id,\n+      });\n+      const collection = await buildCollection({\n+        teamId: team.id,\n+        permission: CollectionPermission.ReadWrite,\n+      });\n+      const abilities = serialize(user, collection);\n+      expect(abilities.read).toEqual(false);\n+      expect(abilities.readDocument).toEqual(false);\n+      expect(abilities.createDocument).toEqual(false);\n+      expect(abilities.update).toEqual(false);\n+      expect(abilities.share).toEqual(false);\n+    });\n+  });\n+\n+  it(\"should allow override with team member membership permission\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({\n+      role: UserRole.Guest,\n+      teamId: team.id,\n+    });\n+    const collection = await buildCollection({\n+      teamId: team.id,\n+      permission: null,\n+    });\n+    await UserMembership.create({\n+      createdById: user.id,\n+      collectionId: collection.id,\n+      userId: user.id,\n+      permission: CollectionPermission.Read,\n+    });\n+    // reload to get membership\n+    const reloaded = await Collection.scope({\n+      method: [\"withMembership\", user.id],\n+    }).findByPk(collection.id);\n+    const abilities = serialize(user, reloaded);\n+    expect(abilities.read).toEqual(true);\n+    expect(abilities.readDocument).toEqual(true);\n+    expect(abilities.createDocument).toEqual(false);\n+    expect(abilities.share).toEqual(false);\n+    expect(abilities.update).toEqual(false);\n+  });\n+});\n\ndiff --git a/server/policies/document.test.ts b/server/policies/document.test.ts\nindex 793da61ba809..84f66c6148bb 100644\n--- a/server/policies/document.test.ts\n+++ b/server/policies/document.test.ts\n@@ -64,6 +64,36 @@ describe(\"read_write collection\", () => {\n     expect(abilities.unsubscribe).toEqual(true);\n     expect(abilities.comment).toEqual(true);\n   });\n+\n+  it(\"should allow no permissions for guest\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({\n+      teamId: team.id,\n+      role: UserRole.Guest,\n+    });\n+    const collection = await buildCollection({\n+      teamId: team.id,\n+      permission: CollectionPermission.ReadWrite,\n+    });\n+    const doc = await buildDocument({\n+      teamId: team.id,\n+      collectionId: collection.id,\n+    });\n+    // reload to get membership\n+    const document = await Document.findByPk(doc.id, { userId: user.id });\n+    const abilities = serialize(user, document);\n+    expect(abilities.read).toEqual(false);\n+    expect(abilities.download).toEqual(false);\n+    expect(abilities.update).toEqual(false);\n+    expect(abilities.createChildDocument).toEqual(false);\n+    expect(abilities.archive).toEqual(false);\n+    expect(abilities.delete).toEqual(false);\n+    expect(abilities.share).toEqual(false);\n+    expect(abilities.move).toEqual(false);\n+    expect(abilities.subscribe).toEqual(false);\n+    expect(abilities.unsubscribe).toEqual(false);\n+    expect(abilities.comment).toEqual(false);\n+  });\n });\n \n describe(\"read collection\", () => {\n@@ -93,6 +123,36 @@ describe(\"read collection\", () => {\n     expect(abilities.unsubscribe).toEqual(true);\n     expect(abilities.comment).toEqual(true);\n   });\n+\n+  it(\"should allow no permissions for guest\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({\n+      teamId: team.id,\n+      role: UserRole.Guest,\n+    });\n+    const collection = await buildCollection({\n+      teamId: team.id,\n+      permission: CollectionPermission.Read,\n+    });\n+    const doc = await buildDocument({\n+      teamId: team.id,\n+      collectionId: collection.id,\n+    });\n+    // reload to get membership\n+    const document = await Document.findByPk(doc.id, { userId: user.id });\n+    const abilities = serialize(user, document);\n+    expect(abilities.read).toEqual(false);\n+    expect(abilities.download).toEqual(false);\n+    expect(abilities.update).toEqual(false);\n+    expect(abilities.createChildDocument).toEqual(false);\n+    expect(abilities.archive).toEqual(false);\n+    expect(abilities.delete).toEqual(false);\n+    expect(abilities.share).toEqual(false);\n+    expect(abilities.move).toEqual(false);\n+    expect(abilities.subscribe).toEqual(false);\n+    expect(abilities.unsubscribe).toEqual(false);\n+    expect(abilities.comment).toEqual(false);\n+  });\n });\n \n describe(\"private collection\", () => {\n@@ -120,6 +180,34 @@ describe(\"private collection\", () => {\n     expect(abilities.unsubscribe).toEqual(false);\n     expect(abilities.comment).toEqual(false);\n   });\n+\n+  it(\"should allow no permissions for guest\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({\n+      teamId: team.id,\n+      role: UserRole.Guest,\n+    });\n+    const collection = await buildCollection({\n+      teamId: team.id,\n+      permission: null,\n+    });\n+    const document = await buildDocument({\n+      teamId: team.id,\n+      collectionId: collection.id,\n+    });\n+    const abilities = serialize(user, document);\n+    expect(abilities.read).toEqual(false);\n+    expect(abilities.download).toEqual(false);\n+    expect(abilities.update).toEqual(false);\n+    expect(abilities.createChildDocument).toEqual(false);\n+    expect(abilities.archive).toEqual(false);\n+    expect(abilities.delete).toEqual(false);\n+    expect(abilities.share).toEqual(false);\n+    expect(abilities.move).toEqual(false);\n+    expect(abilities.subscribe).toEqual(false);\n+    expect(abilities.unsubscribe).toEqual(false);\n+    expect(abilities.comment).toEqual(false);\n+  });\n });\n \n describe(\"no collection\", () => {\n@@ -143,6 +231,29 @@ describe(\"no collection\", () => {\n     expect(abilities.comment).toEqual(false);\n   });\n \n+  it(\"should allow no permissions for guest\", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({\n+      teamId: team.id,\n+      role: UserRole.Guest,\n+    });\n+    const document = await buildDraftDocument({\n+      teamId: team.id,\n+    });\n+    const abilities = serialize(user, document);\n+    expect(abilities.read).toEqual(false);\n+    expect(abilities.download).toEqual(false);\n+    expect(abilities.update).toEqual(false);\n+    expect(abilities.createChildDocument).toEqual(false);\n+    expect(abilities.archive).toEqual(false);\n+    expect(abilities.delete).toEqual(false);\n+    expect(abilities.share).toEqual(false);\n+    expect(abilities.move).toEqual(false);\n+    expect(abilities.subscribe).toEqual(false);\n+    expect(abilities.unsubscribe).toEqual(false);\n+    expect(abilities.comment).toEqual(false);\n+  });\n+\n   it(\"should allow edit permissions for creator\", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n@@ -161,8 +272,8 @@ describe(\"no collection\", () => {\n     expect(abilities.delete).toEqual(true);\n     expect(abilities.share).toEqual(true);\n     expect(abilities.move).toEqual(true);\n-    expect(abilities.subscribe).toEqual(false);\n-    expect(abilities.unsubscribe).toEqual(false);\n+    expect(abilities.subscribe).toEqual(true);\n+    expect(abilities.unsubscribe).toEqual(true);\n     expect(abilities.comment).toEqual(true);\n   });\n });\n\ndiff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex 135d512adac5..cd294b9e53fb 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -2564,30 +2564,6 @@ describe(\"#documents.restore\", () => {\n     expect(body.data.archivedAt).toEqual(null);\n   });\n \n-  it(\"should not add restored templates to collection structure\", async () => {\n-    const user = await buildUser();\n-    const collection = await buildCollection({\n-      teamId: user.teamId,\n-    });\n-    const template = await buildDocument({\n-      teamId: user.teamId,\n-      collectionId: collection.id,\n-      template: true,\n-    });\n-    await template.archive(user.id);\n-    const res = await server.post(\"/api/documents.restore\", {\n-      body: {\n-        token: user.getJwtToken(),\n-        id: template.id,\n-      },\n-    });\n-    const body = await res.json();\n-    expect(res.status).toEqual(200);\n-    expect(body.data.archivedAt).toEqual(null);\n-    await collection.reload();\n-    expect(collection.documentStructure).toEqual(null);\n-  });\n-\n   it(\"should restore archived when previous parent is archived\", async () => {\n     const user = await buildUser();\n     const document = await buildDocument({\n\ndiff --git a/server/routes/api/groups/__snapshots__/groups.test.ts.snap b/server/routes/api/groups/__snapshots__/groups.test.ts.snap\nindex 46721c171025..e0102cc81aa5 100644\n--- a/server/routes/api/groups/__snapshots__/groups.test.ts.snap\n+++ b/server/routes/api/groups/__snapshots__/groups.test.ts.snap\n@@ -2,8 +2,8 @@\n \n exports[`#groups.add_user should require admin 1`] = `\n {\n-  \"error\": \"admin_required\",\n-  \"message\": \"An admin role is required to access this resource\",\n+  \"error\": \"authorization_error\",\n+  \"message\": \"Authorization error\",\n   \"ok\": false,\n   \"status\": 403,\n }\n@@ -56,8 +56,8 @@ exports[`#groups.memberships should require authentication 1`] = `\n \n exports[`#groups.remove_user should require admin 1`] = `\n {\n-  \"error\": \"admin_required\",\n-  \"message\": \"An admin role is required to access this resource\",\n+  \"error\": \"authorization_error\",\n+  \"message\": \"Authorization error\",\n   \"ok\": false,\n   \"status\": 403,\n }\n\ndiff --git a/server/routes/api/users/__snapshots__/users.test.ts.snap b/server/routes/api/users/__snapshots__/users.test.ts.snap\nindex 128114e092c1..b2929a4176f6 100644\n--- a/server/routes/api/users/__snapshots__/users.test.ts.snap\n+++ b/server/routes/api/users/__snapshots__/users.test.ts.snap\n@@ -2,8 +2,8 @@\n \n exports[`#users.activate should require admin 1`] = `\n {\n-  \"error\": \"admin_required\",\n-  \"message\": \"An admin role is required to access this resource\",\n+  \"error\": \"authorization_error\",\n+  \"message\": \"Authorization error\",\n   \"ok\": false,\n   \"status\": 403,\n }\n@@ -29,8 +29,8 @@ exports[`#users.demote should not allow demoting self 1`] = `\n \n exports[`#users.demote should require admin 1`] = `\n {\n-  \"error\": \"admin_required\",\n-  \"message\": \"An admin role is required to access this resource\",\n+  \"error\": \"authorization_error\",\n+  \"message\": \"Authorization error\",\n   \"ok\": false,\n   \"status\": 403,\n }\n@@ -38,8 +38,8 @@ exports[`#users.demote should require admin 1`] = `\n \n exports[`#users.promote should require admin 1`] = `\n {\n-  \"error\": \"admin_required\",\n-  \"message\": \"An admin role is required to access this resource\",\n+  \"error\": \"authorization_error\",\n+  \"message\": \"Authorization error\",\n   \"ok\": false,\n   \"status\": 403,\n }\n@@ -56,8 +56,8 @@ exports[`#users.suspend should not allow suspending the user themselves 1`] = `\n \n exports[`#users.suspend should require admin 1`] = `\n {\n-  \"error\": \"admin_required\",\n-  \"message\": \"An admin role is required to access this resource\",\n+  \"error\": \"authorization_error\",\n+  \"message\": \"Authorization error\",\n   \"ok\": false,\n   \"status\": 403,\n }\n\ndiff --git a/server/routes/api/users/users.test.ts b/server/routes/api/users/users.test.ts\nindex 5c9bfa67cf08..478e22259b52 100644\n--- a/server/routes/api/users/users.test.ts\n+++ b/server/routes/api/users/users.test.ts\n@@ -182,7 +182,7 @@ describe(\"#users.list\", () => {\n     expect(res.status).toEqual(200);\n     expect(body.data.length).toEqual(2);\n     expect(body.data[0].email).toEqual(undefined);\n-    expect(body.data[1].email).toEqual(undefined);\n+    expect(body.data[1].email).toEqual(user.email);\n   });\n });\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-6730",
    "pr_id": 6730,
    "issue_id": 6729,
    "repo": "outline/outline",
    "problem_statement": "Refactor types related to unfurling\nSome of these types are getting hard to work with all the generics stuff. Hoping to prevent the same fate as that of integration settings 🤞 ",
    "issue_word_count": 25,
    "test_files_count": 1,
    "non_test_files_count": 18,
    "pr_changed_files": [
      "app/components/HoverPreview/HoverPreview.tsx",
      "app/components/HoverPreview/HoverPreviewDocument.tsx",
      "app/components/HoverPreview/HoverPreviewIssue.tsx",
      "app/components/HoverPreview/HoverPreviewMention.tsx",
      "app/components/HoverPreview/HoverPreviewPullRequest.tsx",
      "plugins/github/server/github.ts",
      "plugins/iframely/server/iframely.ts",
      "server/presenters/unfurl.ts",
      "server/presenters/unfurls/common.ts",
      "server/presenters/unfurls/document.ts",
      "server/presenters/unfurls/index.ts",
      "server/presenters/unfurls/mention.ts",
      "server/presenters/unfurls/unfurl.ts",
      "server/routes/api/urls/urls.test.ts",
      "server/routes/api/urls/urls.ts",
      "server/types.ts",
      "server/utils/CacheHelper.ts",
      "server/utils/PluginManager.ts",
      "shared/types.ts"
    ],
    "pr_changed_test_files": [
      "server/routes/api/urls/urls.test.ts"
    ],
    "base_commit": "278b81a8fb26f9e75501526145750bec86535e29",
    "head_commit": "c5137db5b4ed3e1f17e1fc305a9dae92b73088d7",
    "repo_url": "https://github.com/outline/outline/pull/6730",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/6730",
    "dockerfile": "",
    "pr_merged_at": "2024-04-03T01:58:31.000Z",
    "patch": "diff --git a/app/components/HoverPreview/HoverPreview.tsx b/app/components/HoverPreview/HoverPreview.tsx\nindex 3b2974bba010..4d96d0fd138e 100644\n--- a/app/components/HoverPreview/HoverPreview.tsx\n+++ b/app/components/HoverPreview/HoverPreview.tsx\n@@ -3,7 +3,7 @@ import * as React from \"react\";\n import { Portal } from \"react-portal\";\n import styled from \"styled-components\";\n import { depths } from \"@shared/styles\";\n-import { UnfurlType } from \"@shared/types\";\n+import { UnfurlResourceType } from \"@shared/types\";\n import LoadingIndicator from \"~/components/LoadingIndicator\";\n import env from \"~/env\";\n import useEventListener from \"~/hooks/useEventListener\";\n@@ -120,41 +120,41 @@ function HoverPreviewDesktop({ element, onClose }: Props) {\n                 transitionEnd: { pointerEvents: \"auto\" },\n               }}\n             >\n-              {data.type === UnfurlType.Mention ? (\n+              {data.type === UnfurlResourceType.Mention ? (\n                 <HoverPreviewMention\n-                  url={data.thumbnailUrl}\n-                  title={data.title}\n-                  info={data.meta.info}\n-                  color={data.meta.color}\n+                  name={data.name}\n+                  avatarUrl={data.avatarUrl}\n+                  color={data.color}\n+                  lastActive={data.lastActive}\n                 />\n-              ) : data.type === UnfurlType.Document ? (\n+              ) : data.type === UnfurlResourceType.Document ? (\n                 <HoverPreviewDocument\n-                  id={data.meta.id}\n                   url={data.url}\n+                  id={data.id}\n                   title={data.title}\n-                  description={data.description}\n-                  info={data.meta.info}\n+                  summary={data.summary}\n+                  lastActivityByViewer={data.lastActivityByViewer}\n                 />\n-              ) : data.type === UnfurlType.Issue ? (\n+              ) : data.type === UnfurlResourceType.Issue ? (\n                 <HoverPreviewIssue\n                   url={data.url}\n+                  id={data.id}\n                   title={data.title}\n                   description={data.description}\n                   author={data.author}\n+                  labels={data.labels}\n+                  state={data.state}\n                   createdAt={data.createdAt}\n-                  identifier={data.meta.identifier}\n-                  labels={data.meta.labels}\n-                  status={data.meta.status}\n                 />\n-              ) : data.type === UnfurlType.Pull ? (\n+              ) : data.type === UnfurlResourceType.PR ? (\n                 <HoverPreviewPullRequest\n                   url={data.url}\n+                  id={data.id}\n                   title={data.title}\n                   description={data.description}\n                   author={data.author}\n                   createdAt={data.createdAt}\n-                  identifier={data.meta.identifier}\n-                  status={data.meta.status}\n+                  state={data.state}\n                 />\n               ) : (\n                 <HoverPreviewLink\n\ndiff --git a/app/components/HoverPreview/HoverPreviewDocument.tsx b/app/components/HoverPreview/HoverPreviewDocument.tsx\nindex b8487190142a..c9fed507cb80 100644\n--- a/app/components/HoverPreview/HoverPreviewDocument.tsx\n+++ b/app/components/HoverPreview/HoverPreviewDocument.tsx\n@@ -1,4 +1,5 @@\n import * as React from \"react\";\n+import { UnfurlResourceType, UnfurlResponse } from \"@shared/types\";\n import Editor from \"~/components/Editor\";\n import Flex from \"~/components/Flex\";\n import {\n@@ -10,21 +11,10 @@ import {\n   Description,\n } from \"./Components\";\n \n-type Props = {\n-  /** Document id associated with the editor, if any */\n-  id?: string;\n-  /** Document url */\n-  url: string;\n-  /** Title for the preview card */\n-  title: string;\n-  /** Info about last activity on the document */\n-  info: string;\n-  /** Text preview of document content */\n-  description: string;\n-};\n+type Props = Omit<UnfurlResponse[UnfurlResourceType.Document], \"type\">;\n \n const HoverPreviewDocument = React.forwardRef(function _HoverPreviewDocument(\n-  { id, url, title, info, description }: Props,\n+  { url, id, title, summary, lastActivityByViewer }: Props,\n   ref: React.Ref<HTMLDivElement>\n ) {\n   return (\n@@ -33,12 +23,12 @@ const HoverPreviewDocument = React.forwardRef(function _HoverPreviewDocument(\n         <CardContent>\n           <Flex column gap={2}>\n             <Title>{title}</Title>\n-            <Info>{info}</Info>\n+            <Info>{lastActivityByViewer}</Info>\n             <Description as=\"div\">\n               <React.Suspense fallback={<div />}>\n                 <Editor\n                   key={id}\n-                  defaultValue={description}\n+                  defaultValue={summary}\n                   embedsDisabled\n                   readOnly\n                 />\n\ndiff --git a/app/components/HoverPreview/HoverPreviewIssue.tsx b/app/components/HoverPreview/HoverPreviewIssue.tsx\nindex d839cd76310a..b63801d6ad6c 100644\n--- a/app/components/HoverPreview/HoverPreviewIssue.tsx\n+++ b/app/components/HoverPreview/HoverPreviewIssue.tsx\n@@ -1,5 +1,6 @@\n import * as React from \"react\";\n import { Trans } from \"react-i18next\";\n+import { UnfurlResourceType, UnfurlResponse } from \"@shared/types\";\n import Flex from \"~/components/Flex\";\n import Avatar from \"../Avatar\";\n import { IssueStatusIcon } from \"../Icons/IssueStatusIcon\";\n@@ -15,36 +16,10 @@ import {\n   Info,\n } from \"./Components\";\n \n-type Props = {\n-  /** Issue url */\n-  url: string;\n-  /** Issue title */\n-  title: string;\n-  /** Issue description */\n-  description: string;\n-  /** Wehn the issue was created */\n-  createdAt: string;\n-  /** Author of the issue */\n-  author: { name: string; avatarUrl: string };\n-  /** Labels attached to the issue */\n-  labels: Array<{ name: string; color: string }>;\n-  /** Issue status */\n-  status: { name: string; color: string };\n-  /** Issue identifier */\n-  identifier: string;\n-};\n+type Props = Omit<UnfurlResponse[UnfurlResourceType.Issue], \"type\">;\n \n const HoverPreviewIssue = React.forwardRef(function _HoverPreviewIssue(\n-  {\n-    url,\n-    title,\n-    identifier,\n-    description,\n-    author,\n-    labels,\n-    status,\n-    createdAt,\n-  }: Props,\n+  { url, id, title, description, author, labels, state, createdAt }: Props,\n   ref: React.Ref<HTMLDivElement>\n ) {\n   const authorName = author.name;\n@@ -56,9 +31,9 @@ const HoverPreviewIssue = React.forwardRef(function _HoverPreviewIssue(\n           <CardContent>\n             <Flex gap={2} column>\n               <Title>\n-                <IssueStatusIcon status={status.name} color={status.color} />\n+                <IssueStatusIcon status={state.name} color={state.color} />\n                 <span>\n-                  {title}&nbsp;<Text type=\"tertiary\">{identifier}</Text>\n+                  {title}&nbsp;<Text type=\"tertiary\">{id}</Text>\n                 </span>\n               </Title>\n               <Flex align=\"center\" gap={4}>\n\ndiff --git a/app/components/HoverPreview/HoverPreviewMention.tsx b/app/components/HoverPreview/HoverPreviewMention.tsx\nindex a79b209abcc5..973b0df7061c 100644\n--- a/app/components/HoverPreview/HoverPreviewMention.tsx\n+++ b/app/components/HoverPreview/HoverPreviewMention.tsx\n@@ -1,22 +1,14 @@\n import * as React from \"react\";\n+import { UnfurlResourceType, UnfurlResponse } from \"@shared/types\";\n import Avatar from \"~/components/Avatar\";\n import { AvatarSize } from \"~/components/Avatar/Avatar\";\n import Flex from \"~/components/Flex\";\n import { Preview, Title, Info, Card, CardContent } from \"./Components\";\n \n-type Props = {\n-  /** Resource url, avatar url in case of user mention */\n-  url: string;\n-  /** Title for the preview card*/\n-  title: string;\n-  /** Info about mentioned user's recent activity */\n-  info: string;\n-  /** Used for avatar's background color in absence of avatar url */\n-  color: string;\n-};\n+type Props = Omit<UnfurlResponse[UnfurlResourceType.Mention], \"type\">;\n \n const HoverPreviewMention = React.forwardRef(function _HoverPreviewMention(\n-  { url, title, info, color }: Props,\n+  { avatarUrl, name, lastActive, color }: Props,\n   ref: React.Ref<HTMLDivElement>\n ) {\n   return (\n@@ -26,15 +18,15 @@ const HoverPreviewMention = React.forwardRef(function _HoverPreviewMention(\n           <Flex gap={12}>\n             <Avatar\n               model={{\n-                avatarUrl: url,\n-                initial: title ? title[0] : \"?\",\n+                avatarUrl,\n+                initial: name ? name[0] : \"?\",\n                 color,\n               }}\n               size={AvatarSize.XLarge}\n             />\n             <Flex column gap={2} justify=\"center\">\n-              <Title>{title}</Title>\n-              <Info>{info}</Info>\n+              <Title>{name}</Title>\n+              <Info>{lastActive}</Info>\n             </Flex>\n           </Flex>\n         </CardContent>\n\ndiff --git a/app/components/HoverPreview/HoverPreviewPullRequest.tsx b/app/components/HoverPreview/HoverPreviewPullRequest.tsx\nindex 616c23eb19ac..47ef95cc7b16 100644\n--- a/app/components/HoverPreview/HoverPreviewPullRequest.tsx\n+++ b/app/components/HoverPreview/HoverPreviewPullRequest.tsx\n@@ -1,5 +1,6 @@\n import * as React from \"react\";\n import { Trans } from \"react-i18next\";\n+import { UnfurlResourceType, UnfurlResponse } from \"@shared/types\";\n import Flex from \"~/components/Flex\";\n import Avatar from \"../Avatar\";\n import { PullRequestIcon } from \"../Icons/PullRequestIcon\";\n@@ -14,26 +15,11 @@ import {\n   Info,\n } from \"./Components\";\n \n-type Props = {\n-  /** Pull request url */\n-  url: string;\n-  /** Pull request title */\n-  title: string;\n-  /** Pull request description */\n-  description: string;\n-  /** When the pull request was opened */\n-  createdAt: string;\n-  /** Author of the pull request */\n-  author: { name: string; avatarUrl: string };\n-  /** Pull request status */\n-  status: { name: string; color: string };\n-  /** Pull request identifier */\n-  identifier: string;\n-};\n+type Props = Omit<UnfurlResponse[UnfurlResourceType.PR], \"type\">;\n \n const HoverPreviewPullRequest = React.forwardRef(\n   function _HoverPreviewPullRequest(\n-    { url, title, identifier, description, author, status, createdAt }: Props,\n+    { url, title, id, description, author, state, createdAt }: Props,\n     ref: React.Ref<HTMLDivElement>\n   ) {\n     const authorName = author.name;\n@@ -45,9 +31,9 @@ const HoverPreviewPullRequest = React.forwardRef(\n             <CardContent>\n               <Flex gap={2} column>\n                 <Title>\n-                  <PullRequestIcon status={status.name} color={status.color} />\n+                  <PullRequestIcon status={state.name} color={state.color} />\n                   <span>\n-                    {title}&nbsp;<Text type=\"tertiary\">{identifier}</Text>\n+                    {title}&nbsp;<Text type=\"tertiary\">{id}</Text>\n                   </span>\n                 </Title>\n                 <Flex align=\"center\" gap={4}>\n\ndiff --git a/plugins/github/server/github.ts b/plugins/github/server/github.ts\nindex 1ed8147ea94c..0604488c7e16 100644\n--- a/plugins/github/server/github.ts\n+++ b/plugins/github/server/github.ts\n@@ -6,45 +6,17 @@ import {\n } from \"@octokit/auth-app\";\n import { Octokit } from \"octokit\";\n import pluralize from \"pluralize\";\n-import { IntegrationService, IntegrationType, Unfurl } from \"@shared/types\";\n+import {\n+  IntegrationService,\n+  IntegrationType,\n+  JSONObject,\n+  UnfurlResourceType,\n+} from \"@shared/types\";\n import Logger from \"@server/logging/Logger\";\n import { Integration, User } from \"@server/models\";\n-import { GitHubUtils } from \"../shared/GitHubUtils\";\n+import { UnfurlSignature } from \"@server/types\";\n import env from \"./env\";\n \n-enum Resource {\n-  PR = \"pull\",\n-  Issue = \"issue\",\n-}\n-\n-type PreviewData = {\n-  [Resource.PR]: {\n-    url: string;\n-    type: Resource.PR;\n-    title: string;\n-    description: string;\n-    author: { name: string; avatarUrl: string };\n-    createdAt: string;\n-    meta: {\n-      identifier: string;\n-      status: { name: string; color: string };\n-    };\n-  };\n-  [Resource.Issue]: {\n-    url: string;\n-    type: Resource.Issue;\n-    title: string;\n-    description: string;\n-    author: { name: string; avatarUrl: string };\n-    createdAt: string;\n-    meta: {\n-      identifier: string;\n-      labels: Array<{ name: string; color: string }>;\n-      status: { name: string; color: string };\n-    };\n-  };\n-};\n-\n const requestPlugin = (octokit: Octokit) => ({\n   requestPR: async (params: ReturnType<typeof GitHub.parseUrl>) =>\n     octokit.request(`GET /repos/{owner}/{repo}/pulls/{id}`, {\n@@ -84,11 +56,11 @@ const requestPlugin = (octokit: Octokit) => ({\n    */\n   requestResource: async function requestResource(\n     resource: ReturnType<typeof GitHub.parseUrl>\n-  ) {\n+  ): Promise<{ data?: JSONObject }> {\n     switch (resource?.type) {\n-      case Resource.PR:\n+      case UnfurlResourceType.PR:\n         return this.requestPR(resource);\n-      case Resource.Issue:\n+      case UnfurlResourceType.Issue:\n         return this.requestIssue(resource);\n       default:\n         return { data: undefined };\n@@ -119,57 +91,7 @@ export class GitHub {\n \n   private static appOctokit: Octokit;\n \n-  private static supportedResources = Object.values(Resource);\n-\n-  private static transformPRData = (\n-    resource: ReturnType<typeof GitHub.parseUrl>,\n-    data: Record<string, any>\n-  ): PreviewData[Resource.PR] => ({\n-    url: resource!.url,\n-    type: Resource.PR,\n-    title: data.title,\n-    description: data.body,\n-    author: {\n-      name: data.user.login,\n-      avatarUrl: data.user.avatar_url,\n-    },\n-    createdAt: data.created_at,\n-    meta: {\n-      identifier: `#${data.number}`,\n-      status: {\n-        name: data.merged ? \"merged\" : data.state,\n-        color: GitHubUtils.getColorForStatus(\n-          data.merged ? \"merged\" : data.state\n-        ),\n-      },\n-    },\n-  });\n-\n-  private static transformIssueData = (\n-    resource: ReturnType<typeof GitHub.parseUrl>,\n-    data: Record<string, any>\n-  ): PreviewData[Resource.Issue] => ({\n-    url: resource!.url,\n-    type: Resource.Issue,\n-    title: data.title,\n-    description: data.body_text,\n-    author: {\n-      name: data.user.login,\n-      avatarUrl: data.user.avatar_url,\n-    },\n-    createdAt: data.created_at,\n-    meta: {\n-      identifier: `#${data.number}`,\n-      labels: data.labels.map((label: { name: string; color: string }) => ({\n-        name: label.name,\n-        color: `#${label.color}`,\n-      })),\n-      status: {\n-        name: data.state,\n-        color: GitHubUtils.getColorForStatus(data.state),\n-      },\n-    },\n-  });\n+  private static supportedResources = Object.values(UnfurlResourceType);\n \n   /**\n    * Parses a given URL and returns resource identifiers for GitHub specific URLs\n@@ -187,7 +109,7 @@ export class GitHub {\n     const owner = parts[1];\n     const repo = parts[2];\n     const type = parts[3]\n-      ? (pluralize.singular(parts[3]) as Resource)\n+      ? (pluralize.singular(parts[3]) as UnfurlResourceType)\n       : undefined;\n     const id = parts[4];\n \n@@ -253,38 +175,13 @@ export class GitHub {\n         }),\n     }) as Promise<InstanceType<typeof CustomOctokit>>;\n \n-  /**\n-   * Transforms resource data obtained from GitHub to our own pre-defined preview data\n-   * which will be consumed by our API clients\n-   *\n-   * @param resourceType Resource type for which to transform the data, e.g, an issue\n-   * @param data Resource data obtained from GitHub via REST calls\n-   * @returns {PreviewData} Transformed data suitable for our API clients\n-   */\n-  public static transformResourceData = (\n-    resource: ReturnType<typeof GitHub.parseUrl>,\n-    data: Record<string, any>\n-  ) => {\n-    switch (resource?.type) {\n-      case Resource.PR:\n-        return GitHub.transformPRData(resource, data);\n-      case Resource.Issue:\n-        return GitHub.transformIssueData(resource, data);\n-      default:\n-        return;\n-    }\n-  };\n-\n   /**\n    *\n    * @param url GitHub resource url\n    * @param actor User attempting to unfurl resource url\n-   * @returns {object} An object containing resource details e.g, a GitHub Pull Request details\n+   * @returns An object containing resource details e.g, a GitHub Pull Request details\n    */\n-  public static unfurl = async (\n-    url: string,\n-    actor: User\n-  ): Promise<Unfurl | undefined> => {\n+  public static unfurl: UnfurlSignature = async (url: string, actor: User) => {\n     const resource = GitHub.parseUrl(url);\n \n     if (!resource) {\n@@ -311,7 +208,7 @@ export class GitHub {\n       if (!data) {\n         return;\n       }\n-      return GitHub.transformResourceData(resource, data);\n+      return { ...data, type: resource.type };\n     } catch (err) {\n       Logger.warn(\"Failed to fetch resource from GitHub\", err);\n       return;\n\ndiff --git a/plugins/iframely/server/iframely.ts b/plugins/iframely/server/iframely.ts\nindex f408b14b9c4d..51152a608d71 100644\n--- a/plugins/iframely/server/iframely.ts\n+++ b/plugins/iframely/server/iframely.ts\n@@ -1,15 +1,16 @@\n-import type { Unfurl } from \"@shared/types\";\n-import { InternalError } from \"@server/errors\";\n+import { JSONObject, UnfurlResourceType } from \"@shared/types\";\n+import Logger from \"@server/logging/Logger\";\n+import { UnfurlSignature } from \"@server/types\";\n import fetch from \"@server/utils/fetch\";\n import env from \"./env\";\n \n class Iframely {\n   public static defaultUrl = \"https://iframe.ly\";\n \n-  public static async fetch(\n+  public static async requestResource(\n     url: string,\n     type = \"oembed\"\n-  ): Promise<Unfurl | void> {\n+  ): Promise<JSONObject | undefined> {\n     const isDefaultHost = env.IFRAMELY_URL === this.defaultUrl;\n \n     // Cloud Iframely requires /api path, while self-hosted does not.\n@@ -23,19 +24,20 @@ class Iframely {\n       );\n       return res.json();\n     } catch (err) {\n-      throw InternalError(err);\n+      Logger.error(`Error fetching data from Iframely for url: ${url}`, err);\n+      return;\n     }\n   }\n \n   /**\n-   * Fetches the preview data for the given url using Iframely oEmbed API\n    *\n-   * @param url\n-   * @returns Preview data for the url\n+   * @param url Resource url\n+   * @returns An object containing resource details e.g, resource title, description etc.\n    */\n-  public static async unfurl(url: string): Promise<Unfurl | void> {\n-    return Iframely.fetch(url);\n-  }\n+  public static unfurl: UnfurlSignature = async (url: string) => {\n+    const data = await Iframely.requestResource(url);\n+    return { ...data, type: UnfurlResourceType.OEmbed };\n+  };\n }\n \n export default Iframely;\n\ndiff --git a/server/presenters/unfurl.ts b/server/presenters/unfurl.ts\nnew file mode 100644\nindex 000000000000..87d861c6c541\n--- /dev/null\n+++ b/server/presenters/unfurl.ts\n@@ -0,0 +1,209 @@\n+import { differenceInMinutes, formatDistanceToNowStrict } from \"date-fns\";\n+import { t } from \"i18next\";\n+import { UnfurlResourceType, UnfurlResponse } from \"@shared/types\";\n+import { dateLocale } from \"@shared/utils/date\";\n+import { Document, User, View } from \"@server/models\";\n+import { opts } from \"@server/utils/i18n\";\n+import { GitHubUtils } from \"plugins/github/shared/GitHubUtils\";\n+\n+async function presentUnfurl(data: Record<string, any>) {\n+  switch (data.type) {\n+    case UnfurlResourceType.Mention:\n+      return presentMention(data);\n+    case UnfurlResourceType.Document:\n+      return presentDocument(data);\n+    case UnfurlResourceType.PR:\n+      return presentPR(data);\n+    case UnfurlResourceType.Issue:\n+      return presentIssue(data);\n+    default:\n+      return presentOEmbed(data);\n+  }\n+}\n+\n+const presentOEmbed = (\n+  data: Record<string, any>\n+): UnfurlResponse[UnfurlResourceType.OEmbed] => ({\n+  type: UnfurlResourceType.OEmbed,\n+  url: data.url,\n+  title: data.title,\n+  description: data.description,\n+  thumbnailUrl: data.thumbnail_url,\n+});\n+\n+const presentMention = async (\n+  data: Record<string, any>\n+): Promise<UnfurlResponse[UnfurlResourceType.Mention]> => {\n+  const user: User = data.user;\n+  const document: Document = data.document;\n+\n+  const lastOnlineInfo = presentLastOnlineInfoFor(user);\n+  const lastViewedInfo = await presentLastViewedInfoFor(user, document);\n+\n+  return {\n+    type: UnfurlResourceType.Mention,\n+    name: user.name,\n+    avatarUrl: user.avatarUrl,\n+    color: user.color,\n+    lastActive: `${lastOnlineInfo} • ${lastViewedInfo}`,\n+  };\n+};\n+\n+const presentDocument = (\n+  data: Record<string, any>\n+): UnfurlResponse[UnfurlResourceType.Document] => {\n+  const document: Document = data.document;\n+  const viewer: User = data.viewer;\n+  return {\n+    url: document.url,\n+    type: UnfurlResourceType.Document,\n+    id: document.id,\n+    title: document.titleWithDefault,\n+    summary: document.getSummary(),\n+    lastActivityByViewer: presentLastActivityInfoFor(document, viewer),\n+  };\n+};\n+\n+const presentPR = (\n+  data: Record<string, any>\n+): UnfurlResponse[UnfurlResourceType.PR] => ({\n+  url: data.html_url,\n+  type: UnfurlResourceType.PR,\n+  id: `#${data.number}`,\n+  title: data.title,\n+  description: data.body,\n+  author: {\n+    name: data.user.login,\n+    avatarUrl: data.user.avatar_url,\n+  },\n+  state: {\n+    name: data.merged ? \"merged\" : data.state,\n+    color: GitHubUtils.getColorForStatus(data.merged ? \"merged\" : data.state),\n+  },\n+  createdAt: data.created_at,\n+});\n+\n+const presentIssue = (\n+  data: Record<string, any>\n+): UnfurlResponse[UnfurlResourceType.Issue] => ({\n+  url: data.html_url,\n+  type: UnfurlResourceType.Issue,\n+  id: `#${data.number}`,\n+  title: data.title,\n+  description: data.body_text,\n+  author: {\n+    name: data.user.login,\n+    avatarUrl: data.user.avatar_url,\n+  },\n+  labels: data.labels.map((label: { name: string; color: string }) => ({\n+    name: label.name,\n+    color: `#${label.color}`,\n+  })),\n+  state: {\n+    name: data.state,\n+    color: GitHubUtils.getColorForStatus(data.state),\n+  },\n+  createdAt: data.created_at,\n+});\n+\n+const presentLastOnlineInfoFor = (user: User) => {\n+  const locale = dateLocale(user.language);\n+\n+  let info: string;\n+  if (!user.lastActiveAt) {\n+    info = t(\"Never logged in\", { ...opts(user) });\n+  } else if (differenceInMinutes(new Date(), user.lastActiveAt) < 5) {\n+    info = t(\"Online now\", { ...opts(user) });\n+  } else {\n+    info = t(\"Online {{ timeAgo }}\", {\n+      timeAgo: formatDistanceToNowStrict(user.lastActiveAt, {\n+        addSuffix: true,\n+        locale,\n+      }),\n+      ...opts(user),\n+    });\n+  }\n+\n+  return info;\n+};\n+\n+const presentLastViewedInfoFor = async (user: User, document: Document) => {\n+  const lastView = await View.findOne({\n+    where: {\n+      userId: user.id,\n+      documentId: document.id,\n+    },\n+    order: [[\"updatedAt\", \"DESC\"]],\n+  });\n+  const lastViewedAt = lastView ? lastView.updatedAt : undefined;\n+  const locale = dateLocale(user.language);\n+\n+  let info: string;\n+  if (!lastViewedAt) {\n+    info = t(\"Never viewed\", { ...opts(user) });\n+  } else if (differenceInMinutes(new Date(), lastViewedAt) < 5) {\n+    info = t(\"Viewed just now\", { ...opts(user) });\n+  } else {\n+    info = t(\"Viewed {{ timeAgo }}\", {\n+      timeAgo: formatDistanceToNowStrict(lastViewedAt, {\n+        addSuffix: true,\n+        locale,\n+      }),\n+      ...opts(user),\n+    });\n+  }\n+\n+  return info;\n+};\n+\n+const presentLastActivityInfoFor = (document: Document, viewer: User) => {\n+  const locale = dateLocale(viewer.language);\n+  const wasUpdated = document.createdAt !== document.updatedAt;\n+\n+  let info: string;\n+  if (wasUpdated) {\n+    const lastUpdatedByViewer = document.updatedBy.id === viewer.id;\n+    if (lastUpdatedByViewer) {\n+      info = t(\"You updated {{ timeAgo }}\", {\n+        timeAgo: formatDistanceToNowStrict(document.updatedAt, {\n+          addSuffix: true,\n+          locale,\n+        }),\n+        ...opts(viewer),\n+      });\n+    } else {\n+      info = t(\"{{ user }} updated {{ timeAgo }}\", {\n+        user: document.updatedBy.name,\n+        timeAgo: formatDistanceToNowStrict(document.updatedAt, {\n+          addSuffix: true,\n+          locale,\n+        }),\n+        ...opts(viewer),\n+      });\n+    }\n+  } else {\n+    const lastCreatedByViewer = document.createdById === viewer.id;\n+    if (lastCreatedByViewer) {\n+      info = t(\"You created {{ timeAgo }}\", {\n+        timeAgo: formatDistanceToNowStrict(document.createdAt, {\n+          addSuffix: true,\n+          locale,\n+        }),\n+        ...opts(viewer),\n+      });\n+    } else {\n+      info = t(\"{{ user }} created {{ timeAgo }}\", {\n+        user: document.createdBy.name,\n+        timeAgo: formatDistanceToNowStrict(document.createdAt, {\n+          addSuffix: true,\n+          locale,\n+        }),\n+        ...opts(viewer),\n+      });\n+    }\n+  }\n+\n+  return info;\n+};\n+\n+export default presentUnfurl;\n\ndiff --git a/server/presenters/unfurls/common.ts b/server/presenters/unfurls/common.ts\ndeleted file mode 100644\nindex 8c572541c870..000000000000\n--- a/server/presenters/unfurls/common.ts\n+++ /dev/null\n@@ -1,111 +0,0 @@\n-import { differenceInMinutes, formatDistanceToNowStrict } from \"date-fns\";\n-import { t } from \"i18next\";\n-import { dateLocale } from \"@shared/utils/date\";\n-import { Document, User, View } from \"@server/models\";\n-import { opts } from \"@server/utils/i18n\";\n-\n-export const presentLastOnlineInfoFor = (user: User) => {\n-  const locale = dateLocale(user.language);\n-\n-  let info: string;\n-  if (!user.lastActiveAt) {\n-    info = t(\"Never logged in\", { ...opts(user) });\n-  } else if (differenceInMinutes(new Date(), user.lastActiveAt) < 5) {\n-    info = t(\"Online now\", { ...opts(user) });\n-  } else {\n-    info = t(\"Online {{ timeAgo }}\", {\n-      timeAgo: formatDistanceToNowStrict(user.lastActiveAt, {\n-        addSuffix: true,\n-        locale,\n-      }),\n-      ...opts(user),\n-    });\n-  }\n-\n-  return info;\n-};\n-\n-export const presentLastViewedInfoFor = async (\n-  user: User,\n-  document: Document\n-) => {\n-  const lastView = await View.findOne({\n-    where: {\n-      userId: user.id,\n-      documentId: document.id,\n-    },\n-    order: [[\"updatedAt\", \"DESC\"]],\n-  });\n-  const lastViewedAt = lastView ? lastView.updatedAt : undefined;\n-  const locale = dateLocale(user.language);\n-\n-  let info: string;\n-  if (!lastViewedAt) {\n-    info = t(\"Never viewed\", { ...opts(user) });\n-  } else if (differenceInMinutes(new Date(), lastViewedAt) < 5) {\n-    info = t(\"Viewed just now\", { ...opts(user) });\n-  } else {\n-    info = t(\"Viewed {{ timeAgo }}\", {\n-      timeAgo: formatDistanceToNowStrict(lastViewedAt, {\n-        addSuffix: true,\n-        locale,\n-      }),\n-      ...opts(user),\n-    });\n-  }\n-\n-  return info;\n-};\n-\n-export const presentLastActivityInfoFor = (\n-  document: Document,\n-  viewer: User\n-) => {\n-  const locale = dateLocale(viewer.language);\n-  const wasUpdated = document.createdAt !== document.updatedAt;\n-\n-  let info: string;\n-  if (wasUpdated) {\n-    const lastUpdatedByViewer = document.updatedBy.id === viewer.id;\n-    if (lastUpdatedByViewer) {\n-      info = t(\"You updated {{ timeAgo }}\", {\n-        timeAgo: formatDistanceToNowStrict(document.updatedAt, {\n-          addSuffix: true,\n-          locale,\n-        }),\n-        ...opts(viewer),\n-      });\n-    } else {\n-      info = t(\"{{ user }} updated {{ timeAgo }}\", {\n-        user: document.updatedBy.name,\n-        timeAgo: formatDistanceToNowStrict(document.updatedAt, {\n-          addSuffix: true,\n-          locale,\n-        }),\n-        ...opts(viewer),\n-      });\n-    }\n-  } else {\n-    const lastCreatedByViewer = document.createdById === viewer.id;\n-    if (lastCreatedByViewer) {\n-      info = t(\"You created {{ timeAgo }}\", {\n-        timeAgo: formatDistanceToNowStrict(document.createdAt, {\n-          addSuffix: true,\n-          locale,\n-        }),\n-        ...opts(viewer),\n-      });\n-    } else {\n-      info = t(\"{{ user }} created {{ timeAgo }}\", {\n-        user: document.createdBy.name,\n-        timeAgo: formatDistanceToNowStrict(document.createdAt, {\n-          addSuffix: true,\n-          locale,\n-        }),\n-        ...opts(viewer),\n-      });\n-    }\n-  }\n-\n-  return info;\n-};\n\ndiff --git a/server/presenters/unfurls/document.ts b/server/presenters/unfurls/document.ts\ndeleted file mode 100644\nindex 03ea58a01958..000000000000\n--- a/server/presenters/unfurls/document.ts\n+++ /dev/null\n@@ -1,21 +0,0 @@\n-import { UnfurlResponse, UnfurlType } from \"@shared/types\";\n-import { User, Document } from \"@server/models\";\n-import { presentLastActivityInfoFor } from \"./common\";\n-\n-function presentDocument(\n-  document: Document,\n-  viewer: User\n-): UnfurlResponse<UnfurlType.Document> {\n-  return {\n-    url: document.url,\n-    type: UnfurlType.Document,\n-    title: document.titleWithDefault,\n-    description: document.getSummary(),\n-    meta: {\n-      id: document.id,\n-      info: presentLastActivityInfoFor(document, viewer),\n-    },\n-  };\n-}\n-\n-export default presentDocument;\n\ndiff --git a/server/presenters/unfurls/index.ts b/server/presenters/unfurls/index.ts\ndeleted file mode 100644\nindex dbf49bb0cf86..000000000000\n--- a/server/presenters/unfurls/index.ts\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-import presentDocument from \"./document\";\n-import presentMention from \"./mention\";\n-\n-export { presentDocument, presentMention };\n\ndiff --git a/server/presenters/unfurls/mention.ts b/server/presenters/unfurls/mention.ts\ndeleted file mode 100644\nindex 4fa0ad593a8f..000000000000\n--- a/server/presenters/unfurls/mention.ts\n+++ /dev/null\n@@ -1,24 +0,0 @@\n-import { UnfurlResponse, UnfurlType } from \"@shared/types\";\n-import { Document, User } from \"@server/models\";\n-import { presentLastOnlineInfoFor, presentLastViewedInfoFor } from \"./common\";\n-\n-async function presentMention(\n-  user: User,\n-  document: Document\n-): Promise<UnfurlResponse<UnfurlType.Mention>> {\n-  const lastOnlineInfo = presentLastOnlineInfoFor(user);\n-  const lastViewedInfo = await presentLastViewedInfoFor(user, document);\n-\n-  return {\n-    type: UnfurlType.Mention,\n-    title: user.name,\n-    thumbnailUrl: user.avatarUrl,\n-    meta: {\n-      id: user.id,\n-      color: user.color,\n-      info: `${lastOnlineInfo} • ${lastViewedInfo}`,\n-    },\n-  };\n-}\n-\n-export default presentMention;\n\ndiff --git a/server/presenters/unfurls/unfurl.ts b/server/presenters/unfurls/unfurl.ts\ndeleted file mode 100644\nindex 28f932bf3cac..000000000000\n--- a/server/presenters/unfurls/unfurl.ts\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-import { UnfurlResponse } from \"@shared/types\";\n-\n-function presentUnfurl(data: any): UnfurlResponse {\n-  return {\n-    url: data.url,\n-    type: data.type,\n-    title: data.title,\n-    createdAt: data.createdAt,\n-    description: data.description,\n-    thumbnailUrl: data.thumbnail_url,\n-    author: data.author,\n-    meta: data.meta,\n-  };\n-}\n-\n-export default presentUnfurl;\n\ndiff --git a/server/routes/api/urls/urls.ts b/server/routes/api/urls/urls.ts\nindex 7ce698df49e3..2b1b10c0c0c9 100644\n--- a/server/routes/api/urls/urls.ts\n+++ b/server/routes/api/urls/urls.ts\n@@ -1,5 +1,6 @@\n import dns from \"dns\";\n import Router from \"koa-router\";\n+import { UnfurlResourceType } from \"@shared/types\";\n import { getBaseDomain, parseDomain } from \"@shared/utils/domains\";\n import parseDocumentSlug from \"@shared/utils/parseDocumentSlug\";\n import parseMentionUrl from \"@shared/utils/parseMentionUrl\";\n@@ -10,8 +11,7 @@ import { rateLimiter } from \"@server/middlewares/rateLimiter\";\n import validate from \"@server/middlewares/validate\";\n import { Document, Share, Team, User } from \"@server/models\";\n import { authorize } from \"@server/policies\";\n-import { presentDocument, presentMention } from \"@server/presenters/unfurls\";\n-import presentUnfurl from \"@server/presenters/unfurls/unfurl\";\n+import presentUnfurl from \"@server/presenters/unfurl\";\n import { APIContext } from \"@server/types\";\n import { CacheHelper } from \"@server/utils/CacheHelper\";\n import { Hook, PluginManager } from \"@server/utils/PluginManager\";\n@@ -53,7 +53,11 @@ router.post(\n       authorize(actor, \"read\", user);\n       authorize(actor, \"read\", document);\n \n-      ctx.body = await presentMention(user, document);\n+      ctx.body = await presentUnfurl({\n+        type: UnfurlResourceType.Mention,\n+        user,\n+        document,\n+      });\n       return;\n     }\n \n@@ -69,7 +73,11 @@ router.post(\n         }\n         authorize(actor, \"read\", document);\n \n-        ctx.body = presentDocument(document, actor);\n+        ctx.body = await presentUnfurl({\n+          type: UnfurlResourceType.Document,\n+          document,\n+          viewer: actor,\n+        });\n         return;\n       }\n       return (ctx.response.status = 204);\n@@ -80,7 +88,7 @@ router.post(\n       CacheHelper.getUnfurlKey(actor.teamId, url)\n     );\n     if (cachedData) {\n-      return (ctx.body = presentUnfurl(cachedData));\n+      return (ctx.body = await presentUnfurl(cachedData));\n     }\n \n     for (const plugin of plugins) {\n@@ -94,7 +102,7 @@ router.post(\n             data,\n             plugin.value.cacheExpiry\n           );\n-          return (ctx.body = presentUnfurl(data));\n+          return (ctx.body = await presentUnfurl(data));\n         }\n       }\n     }\n\ndiff --git a/server/types.ts b/server/types.ts\nindex 11edbf11d9a8..f16052d56284 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -8,6 +8,8 @@ import {\n   Client,\n   CollectionPermission,\n   DocumentPermission,\n+  JSONValue,\n+  UnfurlResourceType,\n } from \"@shared/types\";\n import { BaseSchema } from \"@server/routes/api/schema\";\n import { AccountProvisionerResult } from \"./commands/accountProvisioner\";\n@@ -507,6 +509,11 @@ export type CollectionJSONExport = {\n   };\n };\n \n-export type UnfurlResolver = {\n-  unfurl: (url: string, actor?: User) => Promise<any>;\n-};\n+export type Unfurl = { [x: string]: JSONValue; type: UnfurlResourceType };\n+\n+export type UnfurlSignature = (\n+  url: string,\n+  actor?: User\n+) => Promise<Unfurl | void>;\n+\n+export type UninstallSignature = (integration: Integration) => Promise<void>;\n\ndiff --git a/server/utils/CacheHelper.ts b/server/utils/CacheHelper.ts\nindex 38dcb317e6d4..10f37eebe6f2 100644\n--- a/server/utils/CacheHelper.ts\n+++ b/server/utils/CacheHelper.ts\n@@ -1,6 +1,7 @@\n import { Day } from \"@shared/utils/time\";\n import Logger from \"@server/logging/Logger\";\n import Redis from \"@server/storage/redis\";\n+import { Unfurl, UnfurlSignature } from \"@server/types\";\n \n /**\n  * A Helper class for server-side cache management\n@@ -13,7 +14,7 @@ export class CacheHelper {\n    *\n    * @param key Key against which data will be accessed\n    */\n-  public static async getData(key: string) {\n+  public static async getData(key: string): ReturnType<UnfurlSignature> {\n     try {\n       const data = await Redis.defaultClient.get(key);\n       if (data) {\n@@ -21,7 +22,10 @@ export class CacheHelper {\n       }\n     } catch (err) {\n       // just log it, response can still be obtained using the fetch call\n-      Logger.error(`Could not fetch cached response against ${key}`, err);\n+      return Logger.error(\n+        `Could not fetch cached response against ${key}`,\n+        err\n+      );\n     }\n   }\n \n@@ -32,11 +36,7 @@ export class CacheHelper {\n    * @param data Data to be saved against the key\n    * @param expiry Cache data expiry\n    */\n-  public static async setData(\n-    key: string,\n-    data: Record<string, any>,\n-    expiry?: number\n-  ) {\n+  public static async setData(key: string, data: Unfurl, expiry?: number) {\n     if (\"error\" in data) {\n       return;\n     }\n\ndiff --git a/server/utils/PluginManager.ts b/server/utils/PluginManager.ts\nindex 2db602b6f466..1f3521cdb458 100644\n--- a/server/utils/PluginManager.ts\n+++ b/server/utils/PluginManager.ts\n@@ -3,12 +3,12 @@ import { glob } from \"glob\";\n import type Router from \"koa-router\";\n import isArray from \"lodash/isArray\";\n import sortBy from \"lodash/sortBy\";\n-import { UnfurlSignature, UninstallSignature } from \"@shared/types\";\n import type BaseEmail from \"@server/emails/templates/BaseEmail\";\n import env from \"@server/env\";\n import Logger from \"@server/logging/Logger\";\n import type BaseProcessor from \"@server/queues/processors/BaseProcessor\";\n import type BaseTask from \"@server/queues/tasks/BaseTask\";\n+import { UnfurlSignature, UninstallSignature } from \"@server/types\";\n \n export enum PluginPriority {\n   VeryHigh = 0,\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex 65afb6cfb391..8b575b9fc58a 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -271,45 +271,97 @@ export const NotificationEventDefaults = {\n   [NotificationEventType.AddUserToCollection]: true,\n };\n \n-export enum UnfurlType {\n+export enum UnfurlResourceType {\n+  OEmbed = \"oembed\",\n   Mention = \"mention\",\n   Document = \"document\",\n   Issue = \"issue\",\n-  Pull = \"pull\",\n+  PR = \"pull\",\n }\n \n+export type UnfurlResponse = {\n+  [UnfurlResourceType.OEmbed]: {\n+    /** The resource type */\n+    type: UnfurlResourceType.OEmbed;\n+    /** URL pointing to the resource */\n+    url: string;\n+    /** A text title, describing the resource */\n+    title: string;\n+    /** A brief description about the resource */\n+    description: string;\n+    /** A URL to a thumbnail image representing the resource */\n+    thumbnailUrl: string;\n+  };\n+  [UnfurlResourceType.Mention]: {\n+    /** The resource type */\n+    type: UnfurlResourceType.Mention;\n+    /** Mentioned user's name */\n+    name: string;\n+    /** Mentioned user's avatar URL */\n+    avatarUrl: string | null;\n+    /** Used to create mentioned user's avatar if no avatar URL provided */\n+    color: string;\n+    /** Mentiond user's recent activity */\n+    lastActive: string;\n+  };\n+  [UnfurlResourceType.Document]: {\n+    /** The resource type */\n+    type: UnfurlResourceType.Document;\n+    /** URL pointing to the resource */\n+    url: string;\n+    /** Document id */\n+    id: string;\n+    /** Document title */\n+    title: string;\n+    /** Document summary */\n+    summary: string;\n+    /** Viewer's last activity on this document */\n+    lastActivityByViewer: string;\n+  };\n+  [UnfurlResourceType.Issue]: {\n+    /** The resource type */\n+    type: UnfurlResourceType.Issue;\n+    /** Issue link */\n+    url: string;\n+    /** Issue identifier */\n+    id: string;\n+    /** Issue title */\n+    title: string;\n+    /** Issue description */\n+    description: string;\n+    /** Issue's author */\n+    author: { name: string; avatarUrl: string };\n+    /** Issue's labels */\n+    labels: Array<{ name: string; color: string }>;\n+    /** Issue's status */\n+    state: { name: string; color: string };\n+    /** Issue's creation time */\n+    createdAt: string;\n+  };\n+  [UnfurlResourceType.PR]: {\n+    /** The resource type */\n+    type: UnfurlResourceType.PR;\n+    /** Pull Request link */\n+    url: string;\n+    /** Pull Request identifier */\n+    id: string;\n+    /** Pull Request title */\n+    title: string;\n+    /** Pull Request description */\n+    description: string;\n+    /** Pull Request author */\n+    author: { name: string; avatarUrl: string };\n+    /** Pull Request status */\n+    state: { name: string; color: string };\n+    /** Pull Request creation time */\n+    createdAt: string;\n+  };\n+};\n+\n export enum QueryNotices {\n   UnsubscribeDocument = \"unsubscribe-document\",\n }\n \n-export type OEmbedType = \"photo\" | \"video\" | \"rich\";\n-\n-export type UnfurlResponse<S = OEmbedType, T = Record<string, any>> = {\n-  url?: string;\n-  type: S | (\"issue\" | \"pull\" | \"commit\");\n-  title: string;\n-  description?: string;\n-  createdAt?: string;\n-  thumbnailUrl?: string | null;\n-  author?: { name: string; avatarUrl: string };\n-  meta?: T;\n-};\n-\n-export type Unfurl =\n-  | UnfurlResponse\n-  | {\n-      error: string;\n-    };\n-\n-export type UnfurlSignature = (\n-  url: string,\n-  actor?: any\n-) => Promise<Unfurl | void>;\n-\n-export type UninstallSignature = (\n-  integration: Record<string, any>\n-) => Promise<void>;\n-\n export type JSONValue =\n   | string\n   | number\n",
    "test_patch": "diff --git a/server/routes/api/urls/urls.test.ts b/server/routes/api/urls/urls.test.ts\nindex 178c172659cc..6f7f1b96f710 100644\n--- a/server/routes/api/urls/urls.test.ts\n+++ b/server/routes/api/urls/urls.test.ts\n@@ -1,3 +1,4 @@\n+import { UnfurlResourceType } from \"@shared/types\";\n import env from \"@server/env\";\n import { User } from \"@server/models\";\n import { buildDocument, buildUser } from \"@server/test/factories\";\n@@ -18,7 +19,7 @@ jest.mock(\"dns\", () => ({\n }));\n \n jest\n-  .spyOn(Iframely, \"fetch\")\n+  .spyOn(Iframely, \"requestResource\")\n   .mockImplementation(() => Promise.resolve(undefined));\n \n const server = getTestServer();\n@@ -133,9 +134,8 @@ describe(\"#urls.unfurl\", () => {\n     });\n     const body = await res.json();\n     expect(res.status).toEqual(200);\n-    expect(body.type).toEqual(\"mention\");\n-    expect(body.title).toEqual(mentionedUser.name);\n-    expect(body.meta.id).toEqual(mentionedUser.id);\n+    expect(body.type).toEqual(UnfurlResourceType.Mention);\n+    expect(body.name).toEqual(mentionedUser.name);\n   });\n \n   it(\"should succeed with status 200 ok when valid document url is supplied\", async () => {\n@@ -152,13 +152,13 @@ describe(\"#urls.unfurl\", () => {\n     });\n     const body = await res.json();\n     expect(res.status).toEqual(200);\n-    expect(body.type).toEqual(\"document\");\n+    expect(body.type).toEqual(UnfurlResourceType.Document);\n     expect(body.title).toEqual(document.titleWithDefault);\n-    expect(body.meta.id).toEqual(document.id);\n+    expect(body.id).toEqual(document.id);\n   });\n \n   it(\"should succeed with status 200 ok for a valid external url\", async () => {\n-    (Iframely.fetch as jest.Mock).mockResolvedValue(\n+    (Iframely.requestResource as jest.Mock).mockResolvedValue(\n       Promise.resolve({\n         url: \"https://www.flickr.com\",\n         type: \"rich\",\n@@ -182,7 +182,7 @@ describe(\"#urls.unfurl\", () => {\n \n     expect(res.status).toEqual(200);\n     expect(body.url).toEqual(\"https://www.flickr.com\");\n-    expect(body.type).toEqual(\"rich\");\n+    expect(body.type).toEqual(UnfurlResourceType.OEmbed);\n     expect(body.title).toEqual(\"Flickr\");\n     expect(body.description).toEqual(\n       \"The safest and most inclusive global community of photography enthusiasts. The best place for inspiration, connection, and sharing!\"\n@@ -193,7 +193,7 @@ describe(\"#urls.unfurl\", () => {\n   });\n \n   it(\"should succeed with status 204 no content for a non-existing external url\", async () => {\n-    (Iframely.fetch as jest.Mock).mockResolvedValue(\n+    (Iframely.requestResource as jest.Mock).mockResolvedValue(\n       Promise.resolve({\n         status: 404,\n         error:\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "outline__outline-6724",
    "pr_id": 6724,
    "issue_id": 2946,
    "repo": "outline/outline",
    "problem_statement": "Guest role with restricted permissions\nIf I invite several external users to my outline installation, everyone could see other users who have viewed / edited an article. When you invite external users from company A and from company B they can see each other \r\n - on articles viewed in the past\r\n - on articles edited\r\n - on articles viewed at the moment\r\n - in the settings menu (groups/members)\r\n - maybe other pages\r\n\r\nwhich would be an GDPR incident.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create an external user by inviting per mail \r\n2. Give the user minimal access (viewer)\r\n3. Login with \"magic link\"\r\n4. Visit settings page and then members or groups\r\n5. Visit an arbitrary page and click the avatar button to see\r\n    - who is online (now)\r\n    - who viewed this page\r\n    - who edited this page\r\n\r\n**Expected behavior**\r\nExternal users must not see others to avoid GDPR penalties. There should also be an feature to disable the avatar - button on \r\n- user\r\n- role\r\n- login type\r\n- global\r\n\r\nlevel and forbid access to settings menu. \r\n\r\nIf the disabling is not possible, the information should be anonymized e.g. \r\n- 3 people are watching this article now (instead of User A, User B, User C)\r\n- 24 people viewed/edited this article.\r\n\r\n**Screenshots**\r\n<img width=\"634\" alt=\"image\" src=\"https://user-images.githubusercontent.com/97874931/149734507-ce97a07a-ea7c-4e0b-a0f8-ed7cb3b3cfb5.png\">\r\nThe screenshot is made from an external user which can see other (external users) marked with red rectangle.\r\n\r\n<img width=\"655\" alt=\"image\" src=\"https://user-images.githubusercontent.com/97874931/149735615-f7e1b9a0-2337-49e8-bf33-7f78d2343c90.png\">\r\n\r\n\r\n**Outline (please complete the following information):**\r\n- Install: self hosted\r\n- Version: v0.61.1",
    "issue_word_count": 269,
    "test_files_count": 6,
    "non_test_files_count": 14,
    "pr_changed_files": [
      "app/models/User.ts",
      "app/models/base/Model.ts",
      "server/commands/accountProvisioner.ts",
      "server/commands/userDestroyer.ts",
      "server/commands/userInviter.ts",
      "server/commands/userProvisioner.test.ts",
      "server/commands/userProvisioner.ts",
      "server/migrations/20240327235446-role-non-nullable.js",
      "server/models/Team.ts",
      "server/models/User.ts",
      "server/policies/collection.test.ts",
      "server/policies/document.test.ts",
      "server/presenters/__snapshots__/user.test.ts.snap",
      "server/presenters/user.ts",
      "server/routes/api/teams/teams.ts",
      "server/routes/api/users/users.test.ts",
      "server/routes/api/users/users.ts",
      "server/scripts/seed.ts",
      "server/test/factories.ts",
      "yarn.lock"
    ],
    "pr_changed_test_files": [
      "server/commands/userProvisioner.test.ts",
      "server/policies/collection.test.ts",
      "server/policies/document.test.ts",
      "server/presenters/__snapshots__/user.test.ts.snap",
      "server/routes/api/users/users.test.ts",
      "server/test/factories.ts"
    ],
    "base_commit": "278b81a8fb26f9e75501526145750bec86535e29",
    "head_commit": "7e79a5b06472dab9fb6a53e77b820dc94a421a52",
    "repo_url": "https://github.com/outline/outline/pull/6724",
    "swe_url": "https://swe-bench-plus.turing.com/repos/outline__outline/6724",
    "dockerfile": "",
    "pr_merged_at": "2024-03-28T23:00:35.000Z",
    "patch": "diff --git a/app/models/User.ts b/app/models/User.ts\nindex 6ae9274fd50b..ffa5a9cb2b1e 100644\n--- a/app/models/User.ts\n+++ b/app/models/User.ts\n@@ -52,10 +52,7 @@ class User extends ParanoidModel {\n   email: string;\n \n   @observable\n-  isAdmin: boolean;\n-\n-  @observable\n-  isViewer: boolean;\n+  role: UserRole;\n \n   @observable\n   lastActiveAt: string;\n@@ -68,11 +65,27 @@ class User extends ParanoidModel {\n     return (this.name ? this.name[0] : \"?\").toUpperCase();\n   }\n \n-  @computed\n+  /**\n+   * Whether the user has been invited but not yet signed in.\n+   */\n   get isInvited(): boolean {\n     return !this.lastActiveAt;\n   }\n \n+  /**\n+   * Whether the user is an admin.\n+   */\n+  get isAdmin(): boolean {\n+    return this.role === UserRole.Admin;\n+  }\n+\n+  /**\n+   * Whether the user is a viewer.\n+   */\n+  get isViewer(): boolean {\n+    return this.role === UserRole.Viewer;\n+  }\n+\n   /**\n    * Whether the user has been recently active. Recently is currently defined\n    * as within the last 5 minutes.\n@@ -84,17 +97,6 @@ class User extends ParanoidModel {\n     return new Date(this.lastActiveAt) > subMinutes(now(10000), 5);\n   }\n \n-  @computed\n-  get role(): UserRole {\n-    if (this.isAdmin) {\n-      return UserRole.Admin;\n-    } else if (this.isViewer) {\n-      return UserRole.Viewer;\n-    } else {\n-      return UserRole.Member;\n-    }\n-  }\n-\n   /**\n    * Returns whether this user is using a separate editing mode behind an \"Edit\"\n    * button rather than seamless always-editing.\n\ndiff --git a/app/models/base/Model.ts b/app/models/base/Model.ts\nindex bf4b5ec1a9a3..2704c5a399fe 100644\n--- a/app/models/base/Model.ts\n+++ b/app/models/base/Model.ts\n@@ -116,7 +116,12 @@ export default abstract class Model {\n \n   updateData = action((data: Partial<Model>) => {\n     for (const key in data) {\n-      this[key] = data[key];\n+      try {\n+        this[key] = data[key];\n+      } catch (error) {\n+        // Temporary as isViewer and isAdmin properties changed to getters\n+        Logger.warn(`Error setting ${key} on model`, error);\n+      }\n     }\n \n     this.isNew = false;\n\ndiff --git a/server/commands/accountProvisioner.ts b/server/commands/accountProvisioner.ts\nindex e91702fd7423..b93116a514c0 100644\n--- a/server/commands/accountProvisioner.ts\n+++ b/server/commands/accountProvisioner.ts\n@@ -1,4 +1,5 @@\n import invariant from \"invariant\";\n+import { UserRole } from \"@shared/types\";\n import WelcomeEmail from \"@server/emails/templates/WelcomeEmail\";\n import {\n   InvalidAuthenticationError,\n@@ -132,7 +133,7 @@ async function accountProvisioner({\n     name: userParams.name,\n     email: userParams.email,\n     language: userParams.language,\n-    isAdmin: isNewTeam || undefined,\n+    role: isNewTeam ? UserRole.Admin : undefined,\n     avatarUrl: userParams.avatarUrl,\n     teamId: team.id,\n     ip,\n\ndiff --git a/server/commands/userDestroyer.ts b/server/commands/userDestroyer.ts\nindex 1d15e7086c77..40d47ad9b3a8 100644\n--- a/server/commands/userDestroyer.ts\n+++ b/server/commands/userDestroyer.ts\n@@ -1,4 +1,5 @@\n import { Op, Transaction } from \"sequelize\";\n+import { UserRole } from \"@shared/types\";\n import { Event, User } from \"@server/models\";\n import { ValidationError } from \"../errors\";\n \n@@ -29,7 +30,7 @@ export default async function userDestroyer({\n   if (user.isAdmin) {\n     const otherAdminsCount = await User.count({\n       where: {\n-        isAdmin: true,\n+        role: UserRole.Admin,\n         teamId,\n         id: {\n           [Op.ne]: user.id,\n\ndiff --git a/server/commands/userInviter.ts b/server/commands/userInviter.ts\nindex 567f1ac614fc..6b811cd7c988 100644\n--- a/server/commands/userInviter.ts\n+++ b/server/commands/userInviter.ts\n@@ -58,8 +58,12 @@ export default async function userInviter({\n       teamId: user.teamId,\n       name: invite.name,\n       email: invite.email,\n-      isAdmin: user.isAdmin && invite.role === UserRole.Admin,\n-      isViewer: user.isViewer || invite.role === UserRole.Viewer,\n+      role:\n+        user.isAdmin && invite.role === UserRole.Admin\n+          ? UserRole.Admin\n+          : user.isViewer || invite.role === UserRole.Viewer\n+          ? UserRole.Viewer\n+          : UserRole.Member,\n       invitedById: user.id,\n       flags: {\n         [UserFlag.InviteSent]: 1,\n\ndiff --git a/server/commands/userProvisioner.ts b/server/commands/userProvisioner.ts\nindex 801f624dd3d5..207aa9526d80 100644\n--- a/server/commands/userProvisioner.ts\n+++ b/server/commands/userProvisioner.ts\n@@ -1,4 +1,5 @@\n import { InferCreationAttributes } from \"sequelize\";\n+import { UserRole } from \"@shared/types\";\n import InviteAcceptedEmail from \"@server/emails/templates/InviteAcceptedEmail\";\n import {\n   DomainNotAllowedError,\n@@ -22,8 +23,8 @@ type Props = {\n   email: string;\n   /** The language of the user, if known */\n   language?: string;\n-  /** Provision the new user as an administrator */\n-  isAdmin?: boolean;\n+  /** The role for new user, Member if none is provided */\n+  role?: UserRole;\n   /** The public url of an image representing the user */\n   avatarUrl?: string | null;\n   /**\n@@ -52,7 +53,7 @@ type Props = {\n export default async function userProvisioner({\n   name,\n   email,\n-  isAdmin,\n+  role,\n   language,\n   avatarUrl,\n   teamId,\n@@ -230,15 +231,12 @@ export default async function userProvisioner({\n       throw DomainNotAllowedError();\n     }\n \n-    const defaultUserRole = team?.defaultUserRole;\n-\n     const user = await User.create(\n       {\n         name,\n         email,\n         language,\n-        isAdmin: typeof isAdmin === \"boolean\" && isAdmin,\n-        isViewer: isAdmin === true ? false : defaultUserRole === \"viewer\",\n+        role: role ?? team?.defaultUserRole,\n         teamId,\n         avatarUrl,\n         authentications: authentication ? [authentication] : [],\n\ndiff --git a/server/migrations/20240327235446-role-non-nullable.js b/server/migrations/20240327235446-role-non-nullable.js\nnew file mode 100644\nindex 000000000000..a61504c64149\n--- /dev/null\n+++ b/server/migrations/20240327235446-role-non-nullable.js\n@@ -0,0 +1,15 @@\n+'use strict';\n+\n+module.exports = {\n+  async up (queryInterface, Sequelize) {\n+    await queryInterface.sequelize.query(\n+      'ALTER TABLE users ALTER COLUMN role SET NOT NULL;'\n+    );\n+  },\n+\n+  async down (queryInterface) {\n+    await queryInterface.sequelize.query(\n+      'ALTER TABLE users ALTER COLUMN role DROP NOT NULL;'\n+    );\n+  }\n+};\n\\ No newline at end of file\n\ndiff --git a/server/models/Team.ts b/server/models/Team.ts\nindex 4d02e4a59579..c3d37e340b41 100644\n--- a/server/models/Team.ts\n+++ b/server/models/Team.ts\n@@ -34,6 +34,7 @@ import {\n   CollectionPermission,\n   TeamPreference,\n   TeamPreferences,\n+  UserRole,\n } from \"@shared/types\";\n import { getBaseDomain, RESERVED_SUBDOMAINS } from \"@shared/utils/domains\";\n import env from \"@server/env\";\n@@ -151,10 +152,10 @@ class Team extends ParanoidModel<\n   @Column\n   memberCollectionCreate: boolean;\n \n-  @Default(\"member\")\n-  @IsIn([[\"viewer\", \"member\"]])\n-  @Column\n-  defaultUserRole: string;\n+  @Default(UserRole.Member)\n+  @IsIn([[UserRole.Viewer, UserRole.Member]])\n+  @Column(DataType.STRING)\n+  defaultUserRole: UserRole;\n \n   @AllowNull\n   @Column(DataType.JSONB)\n\ndiff --git a/server/models/User.ts b/server/models/User.ts\nindex da616b8d771d..712f468109de 100644\n--- a/server/models/User.ts\n+++ b/server/models/User.ts\n@@ -29,7 +29,6 @@ import {\n   IsDate,\n   AllowNull,\n   AfterUpdate,\n-  BeforeSave,\n } from \"sequelize-typescript\";\n import { UserPreferenceDefaults } from \"@shared/constants\";\n import { languages } from \"@shared/i18n\";\n@@ -137,14 +136,6 @@ class User extends ParanoidModel<\n   @Column\n   name: string;\n \n-  @Default(false)\n-  @Column\n-  isAdmin: boolean;\n-\n-  @Default(false)\n-  @Column\n-  isViewer: boolean;\n-\n   @Default(UserRole.Member)\n   @Column(DataType.ENUM(...Object.values(UserRole)))\n   role: UserRole;\n@@ -251,6 +242,14 @@ class User extends ParanoidModel<\n     return !this.lastActiveAt;\n   }\n \n+  get isAdmin() {\n+    return this.role === UserRole.Admin;\n+  }\n+\n+  get isViewer() {\n+    return this.role === UserRole.Viewer;\n+  }\n+\n   get color() {\n     return stringToColor(this.id);\n   }\n@@ -551,7 +550,7 @@ class User extends ParanoidModel<\n     const res = await (this.constructor as typeof User).findAndCountAll({\n       where: {\n         teamId: this.teamId,\n-        isAdmin: true,\n+        role: UserRole.Admin,\n         id: {\n           [Op.ne]: this.id,\n         },\n@@ -562,21 +561,9 @@ class User extends ParanoidModel<\n \n     if (res.count >= 1) {\n       if (to === UserRole.Member) {\n-        await this.update(\n-          {\n-            isAdmin: false,\n-            isViewer: false,\n-          },\n-          options\n-        );\n+        await this.update({ role: to }, options);\n       } else if (to === UserRole.Viewer) {\n-        await this.update(\n-          {\n-            isAdmin: false,\n-            isViewer: true,\n-          },\n-          options\n-        );\n+        await this.update({ role: to }, options);\n         await UserMembership.update(\n           {\n             permission: CollectionPermission.Read,\n@@ -599,13 +586,7 @@ class User extends ParanoidModel<\n   promote: (\n     options?: InstanceUpdateOptions<InferAttributes<User>>\n   ) => Promise<User> = (options) =>\n-    this.update(\n-      {\n-        isAdmin: true,\n-        isViewer: false,\n-      },\n-      options\n-    );\n+    this.update({ role: UserRole.Admin }, options);\n \n   // hooks\n \n@@ -628,20 +609,6 @@ class User extends ParanoidModel<\n     });\n   };\n \n-  /**\n-   * Temporary hook to double write role while we transition to the new field.\n-   */\n-  @BeforeSave\n-  static doubleWriteRole = async (model: User) => {\n-    if (model.isAdmin) {\n-      model.role = UserRole.Admin;\n-    } else if (model.isViewer) {\n-      model.role = UserRole.Viewer;\n-    } else {\n-      model.role = UserRole.Member;\n-    }\n-  };\n-\n   @BeforeCreate\n   static setRandomJwtSecret = (model: User) => {\n     model.jwtSecret = crypto.randomBytes(64).toString(\"hex\");\n@@ -677,8 +644,8 @@ class User extends ParanoidModel<\n     const countSql = `\n       SELECT\n         COUNT(CASE WHEN \"suspendedAt\" IS NOT NULL THEN 1 END) as \"suspendedCount\",\n-        COUNT(CASE WHEN \"isAdmin\" = true THEN 1 END) as \"adminCount\",\n-        COUNT(CASE WHEN \"isViewer\" = true THEN 1 END) as \"viewerCount\",\n+        COUNT(CASE WHEN \"role\" = :roleAdmin THEN 1 END) as \"adminCount\",\n+        COUNT(CASE WHEN \"role\" = :roleViewer THEN 1 END) as \"viewerCount\",\n         COUNT(CASE WHEN \"lastActiveAt\" IS NULL THEN 1 END) as \"invitedCount\",\n         COUNT(CASE WHEN \"suspendedAt\" IS NULL AND \"lastActiveAt\" IS NOT NULL THEN 1 END) as \"activeCount\",\n         COUNT(*) as count\n@@ -690,6 +657,8 @@ class User extends ParanoidModel<\n       type: QueryTypes.SELECT,\n       replacements: {\n         teamId,\n+        roleAdmin: UserRole.Admin,\n+        roleViewer: UserRole.Viewer,\n       },\n     });\n \n\ndiff --git a/server/presenters/user.ts b/server/presenters/user.ts\nindex 73032da49062..2d6821448ba2 100644\n--- a/server/presenters/user.ts\n+++ b/server/presenters/user.ts\n@@ -1,4 +1,4 @@\n-import { NotificationSettings, UserPreferences } from \"@shared/types\";\n+import { NotificationSettings, UserPreferences, UserRole } from \"@shared/types\";\n import env from \"@server/env\";\n import { User } from \"@server/models\";\n \n@@ -14,6 +14,7 @@ type UserPresentation = {\n   updatedAt: Date;\n   lastActiveAt: Date | null;\n   color: string;\n+  role: UserRole;\n   isAdmin: boolean;\n   isSuspended: boolean;\n   isViewer: boolean;\n@@ -32,6 +33,7 @@ export default function presentUser(\n     name: user.name,\n     avatarUrl: user.avatarUrl,\n     color: user.color,\n+    role: user.role,\n     isAdmin: user.isAdmin,\n     isSuspended: user.isSuspended,\n     isViewer: user.isViewer,\n\ndiff --git a/server/routes/api/teams/teams.ts b/server/routes/api/teams/teams.ts\nindex ce03e285dfef..cb89366f7e85 100644\n--- a/server/routes/api/teams/teams.ts\n+++ b/server/routes/api/teams/teams.ts\n@@ -1,5 +1,6 @@\n import invariant from \"invariant\";\n import Router from \"koa-router\";\n+import { UserRole } from \"@shared/types\";\n import teamCreator from \"@server/commands/teamCreator\";\n import teamDestroyer from \"@server/commands/teamDestroyer\";\n import teamUpdater from \"@server/commands/teamUpdater\";\n@@ -164,7 +165,7 @@ router.post(\n         teamId: team.id,\n         name: user.name,\n         email: user.email,\n-        isAdmin: true,\n+        role: UserRole.Admin,\n       },\n       { transaction }\n     );\n\ndiff --git a/server/routes/api/users/users.ts b/server/routes/api/users/users.ts\nindex f0f96bd76258..740dd6caa72f 100644\n--- a/server/routes/api/users/users.ts\n+++ b/server/routes/api/users/users.ts\n@@ -1,6 +1,6 @@\n import Router from \"koa-router\";\n import { Op, WhereOptions } from \"sequelize\";\n-import { UserPreference } from \"@shared/types\";\n+import { UserPreference, UserRole } from \"@shared/types\";\n import { UserValidation } from \"@shared/validations\";\n import userDemoter from \"@server/commands/userDemoter\";\n import userDestroyer from \"@server/commands/userDestroyer\";\n@@ -59,17 +59,17 @@ router.post(\n       }\n \n       case \"viewers\": {\n-        where = { ...where, isViewer: true };\n+        where = { ...where, role: UserRole.Viewer };\n         break;\n       }\n \n       case \"admins\": {\n-        where = { ...where, isAdmin: true };\n+        where = { ...where, role: UserRole.Admin };\n         break;\n       }\n \n       case \"members\": {\n-        where = { ...where, isAdmin: false, isViewer: false };\n+        where = { ...where, role: UserRole.Member };\n         break;\n       }\n \n\ndiff --git a/server/scripts/seed.ts b/server/scripts/seed.ts\nindex 8498f8a0e8a5..cef1735e2a34 100644\n--- a/server/scripts/seed.ts\n+++ b/server/scripts/seed.ts\n@@ -1,4 +1,5 @@\n import \"./bootstrap\";\n+import { UserRole } from \"@shared/types\";\n import teamCreator from \"@server/commands/teamCreator\";\n import env from \"@server/env\";\n import { Team, User } from \"@server/models\";\n@@ -23,8 +24,7 @@ export default async function main(exit = false) {\n           teamId: team.id,\n           name: email.split(\"@\")[0],\n           email,\n-          isAdmin: true,\n-          isViewer: false,\n+          role: UserRole.Admin,\n         },\n         {\n           transaction,\n\ndiff --git a/yarn.lock b/yarn.lock\nindex 50d0889633f0..81bcc5745952 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -1079,16 +1079,7 @@\n     debug \"^4.3.1\"\n     globals \"^11.1.0\"\n \n-\"@babel/types@^7.0.0\", \"@babel/types@^7.18.6\", \"@babel/types@^7.18.9\", \"@babel/types@^7.20.2\", \"@babel/types@^7.20.5\", \"@babel/types@^7.22.15\", \"@babel/types@^7.22.5\", \"@babel/types@^7.23.0\", \"@babel/types@^7.23.6\", \"@babel/types@^7.3.0\", \"@babel/types@^7.3.3\", \"@babel/types@^7.4.4\", \"@babel/types@^7.7.0\":\n-  version \"7.23.6\"\n-  resolved \"https://registry.yarnpkg.com/@babel/types/-/types-7.23.6.tgz#be33fdb151e1f5a56877d704492c240fc71c7ccd\"\n-  integrity \"sha1-vjP9sVHh9aVod9cESSwkD8ccfM0= sha512-+uarb83brBzPKN38NX1MkB6vb6+mwvR6amUulqAE7ccQw1pEl+bCia9TbdG1lsnFP7lZySvUn37CHyXQdfTwzg==\"\n-  dependencies:\n-    \"@babel/helper-string-parser\" \"^7.23.4\"\n-    \"@babel/helper-validator-identifier\" \"^7.22.20\"\n-    to-fast-properties \"^2.0.0\"\n-\n-\"@babel/types@^7.23.4\":\n+\"@babel/types@^7.0.0\", \"@babel/types@^7.18.6\", \"@babel/types@^7.18.9\", \"@babel/types@^7.20.2\", \"@babel/types@^7.20.5\", \"@babel/types@^7.22.15\", \"@babel/types@^7.22.5\", \"@babel/types@^7.23.0\", \"@babel/types@^7.23.4\", \"@babel/types@^7.23.6\", \"@babel/types@^7.3.0\", \"@babel/types@^7.3.3\", \"@babel/types@^7.4.4\", \"@babel/types@^7.7.0\":\n   version \"7.24.0\"\n   resolved \"https://registry.yarnpkg.com/@babel/types/-/types-7.24.0.tgz#3b951f435a92e7333eba05b7566fd297960ea1bf\"\n   integrity sha512-+j7a5c253RfKh8iABBhywc8NSfP5LURe7Uh4qpsh6jc+aLJguvmIUBdjSdEMQv2bENrCR5MfRdjGo7vzS/ob7w==\n",
    "test_patch": "diff --git a/server/commands/userProvisioner.test.ts b/server/commands/userProvisioner.test.ts\nindex 2740387cdf31..0897ed861654 100644\n--- a/server/commands/userProvisioner.test.ts\n+++ b/server/commands/userProvisioner.test.ts\n@@ -1,5 +1,6 @@\n import { faker } from \"@faker-js/faker\";\n import { v4 as uuidv4 } from \"uuid\";\n+import { UserRole } from \"@shared/types\";\n import { TeamDomain } from \"@server/models\";\n import {\n   buildUser,\n@@ -185,8 +186,7 @@ describe(\"userProvisioner\", () => {\n     expect(authentication?.scopes.length).toEqual(1);\n     expect(authentication?.scopes[0]).toEqual(\"read\");\n     expect(user.email).toEqual(\"test@example.com\");\n-    expect(user.isAdmin).toEqual(false);\n-    expect(user.isViewer).toEqual(false);\n+    expect(user.role).toEqual(UserRole.Member);\n     expect(isNewUser).toEqual(true);\n   });\n \n@@ -200,7 +200,7 @@ describe(\"userProvisioner\", () => {\n       name: \"Test Name\",\n       email: \"test@example.com\",\n       teamId: team.id,\n-      isAdmin: true,\n+      role: UserRole.Admin,\n       ip,\n       authentication: {\n         authenticationProviderId: authenticationProvider.id,\n@@ -210,12 +210,12 @@ describe(\"userProvisioner\", () => {\n       },\n     });\n     const { user } = result;\n-    expect(user.isAdmin).toEqual(true);\n+    expect(user.role).toEqual(UserRole.Admin);\n   });\n \n   it(\"should prefer defaultUserRole when isAdmin is undefined or false\", async () => {\n     const team = await buildTeam({\n-      defaultUserRole: \"viewer\",\n+      defaultUserRole: UserRole.Viewer,\n     });\n     const authenticationProviders = await team.$get(\"authenticationProviders\");\n     const authenticationProvider = authenticationProviders[0];\n@@ -232,13 +232,11 @@ describe(\"userProvisioner\", () => {\n       },\n     });\n     const { user: tname } = result;\n-    expect(tname.isAdmin).toEqual(false);\n-    expect(tname.isViewer).toEqual(true);\n+    expect(tname.role).toEqual(UserRole.Viewer);\n     const tname2Result = await userProvisioner({\n       name: \"Test2 Name\",\n       email: \"tes2@example.com\",\n       teamId: team.id,\n-      isAdmin: false,\n       ip,\n       authentication: {\n         authenticationProviderId: authenticationProvider.id,\n@@ -248,8 +246,7 @@ describe(\"userProvisioner\", () => {\n       },\n     });\n     const { user: tname2 } = tname2Result;\n-    expect(tname2.isAdmin).toEqual(false);\n-    expect(tname2.isViewer).toEqual(true);\n+    expect(tname2.role).toEqual(UserRole.Viewer);\n   });\n \n   it(\"should create a user from an invited user\", async () => {\n\ndiff --git a/server/policies/collection.test.ts b/server/policies/collection.test.ts\nindex 451b45eefb89..de1f8595eb28 100644\n--- a/server/policies/collection.test.ts\n+++ b/server/policies/collection.test.ts\n@@ -1,4 +1,4 @@\n-import { CollectionPermission } from \"@shared/types\";\n+import { CollectionPermission, UserRole } from \"@shared/types\";\n import { UserMembership, Collection } from \"@server/models\";\n import {\n   buildUser,\n@@ -217,7 +217,7 @@ describe(\"viewer\", () => {\n     it(\"should allow read permissions for viewer\", async () => {\n       const team = await buildTeam();\n       const user = await buildUser({\n-        isViewer: true,\n+        role: UserRole.Viewer,\n         teamId: team.id,\n       });\n       const collection = await buildCollection({\n@@ -235,7 +235,7 @@ describe(\"viewer\", () => {\n     it(\"should override read membership permission\", async () => {\n       const team = await buildTeam();\n       const user = await buildUser({\n-        isViewer: true,\n+        role: UserRole.Viewer,\n         teamId: team.id,\n       });\n       const collection = await buildCollection({\n@@ -264,7 +264,7 @@ describe(\"viewer\", () => {\n     it(\"should allow override with read_write membership permission\", async () => {\n       const team = await buildTeam();\n       const user = await buildUser({\n-        isViewer: true,\n+        role: UserRole.Viewer,\n         teamId: team.id,\n       });\n       const collection = await buildCollection({\n@@ -294,7 +294,7 @@ describe(\"viewer\", () => {\n     it(\"should allow no permissions for viewer\", async () => {\n       const team = await buildTeam();\n       const user = await buildUser({\n-        isViewer: true,\n+        role: UserRole.Viewer,\n         teamId: team.id,\n       });\n       const collection = await buildCollection({\n@@ -310,7 +310,7 @@ describe(\"viewer\", () => {\n     it(\"should allow override with team member membership permission\", async () => {\n       const team = await buildTeam();\n       const user = await buildUser({\n-        isViewer: true,\n+        role: UserRole.Viewer,\n         teamId: team.id,\n       });\n       const collection = await buildCollection({\n\ndiff --git a/server/policies/document.test.ts b/server/policies/document.test.ts\nindex bc7e507845ec..793da61ba809 100644\n--- a/server/policies/document.test.ts\n+++ b/server/policies/document.test.ts\n@@ -1,4 +1,4 @@\n-import { CollectionPermission } from \"@shared/types\";\n+import { CollectionPermission, UserRole } from \"@shared/types\";\n import { Document } from \"@server/models\";\n import {\n   buildUser,\n@@ -39,7 +39,7 @@ describe(\"read_write collection\", () => {\n     const team = await buildTeam();\n     const user = await buildUser({\n       teamId: team.id,\n-      isViewer: true,\n+      role: UserRole.Viewer,\n     });\n     const collection = await buildCollection({\n       teamId: team.id,\n\ndiff --git a/server/presenters/__snapshots__/user.test.ts.snap b/server/presenters/__snapshots__/user.test.ts.snap\nindex 6d9b83f95e87..3869fbb8685b 100644\n--- a/server/presenters/__snapshots__/user.test.ts.snap\n+++ b/server/presenters/__snapshots__/user.test.ts.snap\n@@ -11,6 +11,7 @@ exports[`presents a user 1`] = `\n   \"isViewer\": false,\n   \"lastActiveAt\": undefined,\n   \"name\": \"Test User\",\n+  \"role\": \"member\",\n   \"updatedAt\": undefined,\n }\n `;\n@@ -26,6 +27,7 @@ exports[`presents a user without slack data 1`] = `\n   \"isViewer\": false,\n   \"lastActiveAt\": undefined,\n   \"name\": \"Test User\",\n+  \"role\": \"member\",\n   \"updatedAt\": undefined,\n }\n `;\n\ndiff --git a/server/routes/api/users/users.test.ts b/server/routes/api/users/users.test.ts\nindex f21ddcb9333e..5c9bfa67cf08 100644\n--- a/server/routes/api/users/users.test.ts\n+++ b/server/routes/api/users/users.test.ts\n@@ -1,4 +1,4 @@\n-import { TeamPreference } from \"@shared/types\";\n+import { TeamPreference, UserRole } from \"@shared/types\";\n import {\n   buildTeam,\n   buildAdmin,\n@@ -368,8 +368,7 @@ describe(\"#users.invite\", () => {\n     const body = await res.json();\n     expect(res.status).toEqual(200);\n     expect(body.data.sent.length).toEqual(1);\n-    expect(body.data.users[0].isViewer).toBeTruthy();\n-    expect(body.data.users[0].isAdmin).toBeFalsy();\n+    expect(body.data.users[0].role).toEqual(UserRole.Viewer);\n   });\n \n   it(\"should require authentication\", async () => {\n@@ -383,7 +382,6 @@ describe(\"#users.delete\", () => {\n     const user = await buildAdmin();\n     await buildUser({\n       teamId: user.teamId,\n-      isAdmin: false,\n     });\n     const res = await server.post(\"/api/users.delete\", {\n       body: {\n@@ -397,7 +395,6 @@ describe(\"#users.delete\", () => {\n     const user = await buildAdmin();\n     await buildUser({\n       teamId: user.teamId,\n-      isAdmin: false,\n     });\n     const res = await server.post(\"/api/users.delete\", {\n       body: {\n@@ -572,11 +569,7 @@ describe(\"#users.demote\", () => {\n   it(\"should demote an admin\", async () => {\n     const team = await buildTeam();\n     const admin = await buildAdmin({ teamId: team.id });\n-    const user = await buildUser({ teamId: team.id });\n-\n-    await user.update({\n-      isAdmin: true,\n-    }); // Make another admin\n+    const user = await buildAdmin({ teamId: team.id });\n \n     const res = await server.post(\"/api/users.demote\", {\n       body: {\n@@ -590,11 +583,7 @@ describe(\"#users.demote\", () => {\n   it(\"should demote an admin to viewer\", async () => {\n     const team = await buildTeam();\n     const admin = await buildAdmin({ teamId: team.id });\n-    const user = await buildUser({ teamId: team.id });\n-\n-    await user.update({\n-      isAdmin: true,\n-    }); // Make another admin\n+    const user = await buildAdmin({ teamId: team.id });\n \n     const res = await server.post(\"/api/users.demote\", {\n       body: {\n@@ -609,11 +598,7 @@ describe(\"#users.demote\", () => {\n   it(\"should demote an admin to member\", async () => {\n     const team = await buildTeam();\n     const admin = await buildAdmin({ teamId: team.id });\n-    const user = await buildUser({ teamId: team.id });\n-\n-    await user.update({\n-      isAdmin: true,\n-    }); // Make another admin\n+    const user = await buildAdmin({ teamId: team.id });\n \n     const res = await server.post(\"/api/users.demote\", {\n       body: {\n@@ -748,9 +733,8 @@ describe(\"#users.count\", () => {\n \n   it(\"should count admin users\", async () => {\n     const team = await buildTeam();\n-    const user = await buildUser({\n+    const user = await buildAdmin({\n       teamId: team.id,\n-      isAdmin: true,\n     });\n     const res = await server.post(\"/api/users.count\", {\n       body: {\n\ndiff --git a/server/test/factories.ts b/server/test/factories.ts\nindex 6636e87dbc2c..e6ca51ca7bb6 100644\n--- a/server/test/factories.ts\n+++ b/server/test/factories.ts\n@@ -11,6 +11,7 @@ import {\n   IntegrationService,\n   IntegrationType,\n   NotificationEventType,\n+  UserRole,\n } from \"@shared/types\";\n import {\n   Share,\n@@ -213,11 +214,11 @@ export async function buildUser(overrides: Partial<User> = {}) {\n }\n \n export async function buildAdmin(overrides: Partial<User> = {}) {\n-  return buildUser({ ...overrides, isAdmin: true });\n+  return buildUser({ ...overrides, role: UserRole.Admin });\n }\n \n export async function buildViewer(overrides: Partial<User> = {}) {\n-  return buildUser({ ...overrides, isViewer: true });\n+  return buildUser({ ...overrides, role: UserRole.Viewer });\n }\n \n export async function buildInvite(overrides: Partial<User> = {}) {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  }
]