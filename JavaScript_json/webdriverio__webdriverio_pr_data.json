[
  {
    "instance_id": "webdriverio__webdriverio-14572",
    "pr_id": 14572,
    "issue_id": 14529,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Inconsistent behaviour when using isAndroid with Browserstack\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.14.0\n\n### Node.js Version\n\n20.8.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\ncapabilities: [\n    {\n      \"bstack:options\": {\n        osVersion: '15.0',\n        deviceName: 'Samsung Galaxy S25',\n        realMobile: 'true',\n        appiumVersion: '2.4.1',\n        projectName: \"ProjectName\",\n        buildName: \"BuildName + \" + new Date().toISOString(),\n        sessionName: \"SessionName\",\n        seleniumVersion: \"4.20.0\",\n        debug: \"true\",\n        networkLogs: \"true\",\n        consoleLogs: \"verbose\",\n      },\n    browserName: 'chrome',\n\n    } as Capabilities.BrowserStackCapabilities,\n  ],\n```\n\n### What happened?\n\n\n console.log('before the test of the test: ', browser.isAndroid); // -> Returns false\n\n(browser.isAndroid ? it.skip : it)('A test that should not run on Android devices', async function () {\n        console.log('inside of the test: ', browser.isAndroid); // -> Returns true\n    });\n\nif `browsername `is set to `chrome`, `isAndroid `will return `false `in the first console log (the one outside of the test). If you remove `browserName` as a capability, the test will still run and the browser will default to chrome. If you set `browserName` to something completely irrelevant, e.g \"Galaxy\", the console log outside of the test will return `true`.\n\n### What is your expected behavior?\n\nIn my oppinion, `browserName` should always return `true` if the deviced used for executing the test is Android. The console log inside of the test appears to be working as expected, but a user should expect the same behaviour if `isAndroid `is used outside of a test (e.g as a condition to skip a test). \n\nI don't know if a user should be able to set `browserName` to anything other than the two valid browsers available at Browserstack (samsung & chrome) but that is in my oppinion a different topic. No matter what value `browserName `is set to, `isAndroid` should always return true is the tests are executed on an Android device. It should not matter if I try access it from inside of a test or outside of a test. \n\n### How to reproduce the bug.\n\nUse the snippet provided and add it to a spec-file: \n\nconsole.log('before the test of the test: ', browser.isAndroid); // -> Returns false\n\n(browser.isAndroid ? it.skip : it)('A test that should not run on Android devices', async function () {\n        console.log('inside of the test: ', browser.isAndroid); // -> Returns true\n });\n\nuse the following capabilities when running your test using Browserstack: \n\n  capabilities: [\n    {\n      \"bstack:options\": {\n        osVersion: '15.0',\n        deviceName: 'Samsung Galaxy S25',\n        realMobile: 'true',\n        appiumVersion: '2.4.1',\n        projectName: \"ProjectName\",\n        buildName: \"BuildName + \" + new Date().toISOString(),\n        sessionName: \"SessionName\",\n        seleniumVersion: \"4.20.0\",\n        debug: \"true\",\n        networkLogs: \"true\",\n        consoleLogs: \"verbose\",\n      },\n    browserName: 'chrome',\n\n    } as Capabilities.BrowserStackCapabilities,\n  ],\n\nAdjust the `browserName` value to \"galaxy\" instead of chrome and observe how the first console logs outputs `true` instead of `false` which in my oppinion is the expected behaviour. `browserName` when using an Android device should not determine whether isAndroid returns `true` or `false`\n\n### Relevant log output\n\n```typescript\n-\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 515,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-utils/src/envDetector.ts",
      "packages/wdio-utils/tests/envDetector.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-utils/tests/envDetector.test.ts"
    ],
    "base_commit": "072e5513787960952f352b966e0ecf3bc2db6505",
    "head_commit": "f76c577c3bbf36f3d25dc6ba8dd56065f8c48b36",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14572",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14572",
    "dockerfile": "",
    "pr_merged_at": "2025-06-19T15:51:27.000Z",
    "patch": "diff --git a/packages/wdio-utils/src/envDetector.ts b/packages/wdio-utils/src/envDetector.ts\nindex 4dd50937b97..e59f39fbc19 100644\n--- a/packages/wdio-utils/src/envDetector.ts\n+++ b/packages/wdio-utils/src/envDetector.ts\n@@ -199,13 +199,17 @@ function isAndroid(capabilities?: WebdriverIO.Capabilities) {\n         return false\n     }\n \n-    return Boolean(\n+    const hasAndroidPlatform = Boolean(\n         (capabilities.platformName && capabilities.platformName.match(/Android/i)) ||\n         (/Android/i.test(bsOptions.platformName || '')) ||\n         (/Android/i.test(bsOptions.browserName || '')) ||\n-        (/Samsung/i.test(bsOptions.deviceName || '')) ||\n         (capabilities.browserName && capabilities.browserName.match(/Android/i))\n     )\n+\n+    const deviceName = bsOptions.deviceName || ''\n+    const hasAndroidDeviceName = /android|galaxy|pixel|nexus|oneplus|lg|htc|motorola|sony|huawei|vivo|oppo|xiaomi|redmi|realme|samsung/i.test(deviceName)\n+\n+    return Boolean(hasAndroidPlatform || hasAndroidDeviceName)\n }\n \n /**\n",
    "test_patch": "diff --git a/packages/wdio-utils/tests/envDetector.test.ts b/packages/wdio-utils/tests/envDetector.test.ts\nindex 16e9516d67b..80c4a09772d 100644\n--- a/packages/wdio-utils/tests/envDetector.test.ts\n+++ b/packages/wdio-utils/tests/envDetector.test.ts\n@@ -223,6 +223,193 @@ describe('sessionEnvironmentDetector', () => {\n             const { isAndroid } = sessionEnvironmentDetector({ capabilities, requestedCapabilities })\n             expect(isAndroid).toEqual(true)\n         })\n+\n+        it('should detect Android by device name in bstack:options using sessionEnvironmentDetector', () => {\n+            expect(sessionEnvironmentDetector({\n+                capabilities: { 'bstack:options': { deviceName: 'Samsung Galaxy S21' } },\n+                requestedCapabilities: {}\n+            }).isAndroid).toBe(true)\n+\n+            expect(sessionEnvironmentDetector({\n+                capabilities: { 'bstack:options': { deviceName: 'Google Pixel 7' } },\n+                requestedCapabilities: {}\n+            }).isAndroid).toBe(true)\n+\n+            expect(sessionEnvironmentDetector({\n+                capabilities: { 'bstack:options': { deviceName: 'OnePlus 9 Pro' } },\n+                requestedCapabilities: {}\n+            }).isAndroid).toBe(true)\n+\n+            expect(sessionEnvironmentDetector({\n+                capabilities: { 'bstack:options': { deviceName: 'Nexus 5X' } },\n+                requestedCapabilities: {}\n+            }).isAndroid).toBe(true)\n+        })\n+\n+        it('should detect Android by device name in bstack:options using capabilitiesEnvironmentDetector', () => {\n+            expect(capabilitiesEnvironmentDetector({\n+                'bstack:options': { deviceName: 'Samsung Galaxy S21' }\n+            }).isAndroid).toBe(true)\n+\n+            expect(capabilitiesEnvironmentDetector({\n+                'bstack:options': { deviceName: 'Google Pixel 7' }\n+            }).isAndroid).toBe(true)\n+\n+            expect(capabilitiesEnvironmentDetector({\n+                'bstack:options': { deviceName: 'OnePlus 9 Pro' }\n+            }).isAndroid).toBe(true)\n+\n+            expect(capabilitiesEnvironmentDetector({\n+                'bstack:options': { deviceName: 'Nexus 5X' }\n+            }).isAndroid).toBe(true)\n+        })\n+\n+        it('should detect Android by various manufacturer device names with sessionEnvironmentDetector', () => {\n+            const androidDevices = [\n+                'LG G8',\n+                'HTC One',\n+                'Motorola Edge',\n+                'Sony Xperia',\n+                'Huawei P30',\n+                'Vivo V21',\n+                'Oppo Find X3',\n+                'Xiaomi Mi 11',\n+                'Redmi Note 10',\n+                'Realme GT',\n+                'Samsung Galaxy Note'\n+            ]\n+\n+            androidDevices.forEach(deviceName => {\n+                expect(sessionEnvironmentDetector({\n+                    capabilities: { 'bstack:options': { deviceName } },\n+                    requestedCapabilities: {}\n+                }).isAndroid).toBe(true)\n+            })\n+        })\n+\n+        it('should detect Android by various manufacturer device names with capabilitiesEnvironmentDetector', () => {\n+            const androidDevices = [\n+                'LG G8',\n+                'HTC One',\n+                'Motorola Edge',\n+                'Sony Xperia',\n+                'Huawei P30',\n+                'Vivo V21',\n+                'Oppo Find X3',\n+                'Xiaomi Mi 11',\n+                'Redmi Note 10',\n+                'Realme GT',\n+                'Samsung Galaxy Note'\n+            ]\n+\n+            androidDevices.forEach(deviceName => {\n+                expect(capabilitiesEnvironmentDetector({\n+                    'bstack:options': { deviceName }\n+                }).isAndroid).toBe(true)\n+            })\n+        })\n+\n+        it('should not detect Android for non-Android device names with sessionEnvironmentDetector', () => {\n+            const nonAndroidDevices = [\n+                'iPhone 13',\n+                'iPad Pro',\n+                'iPhone SE',\n+                'iPad Mini',\n+                'Desktop Chrome',\n+                'MacBook Pro'\n+            ]\n+\n+            nonAndroidDevices.forEach(deviceName => {\n+                expect(sessionEnvironmentDetector({\n+                    capabilities: { 'bstack:options': { deviceName } },\n+                    requestedCapabilities: {}\n+                }).isAndroid).toBe(false)\n+            })\n+        })\n+\n+        it('should not detect Android for non-Android device names with capabilitiesEnvironmentDetector', () => {\n+            const nonAndroidDevices = [\n+                'iPhone 13',\n+                'iPad Pro',\n+                'iPhone SE',\n+                'iPad Mini',\n+                'Desktop Chrome',\n+                'MacBook Pro'\n+            ]\n+\n+            nonAndroidDevices.forEach(deviceName => {\n+                expect(capabilitiesEnvironmentDetector({\n+                    'bstack:options': { deviceName }\n+                }).isAndroid).toBe(false)\n+            })\n+        })\n+\n+        it('should detect Android case-insensitively by device name with both detectors', () => {\n+            expect(sessionEnvironmentDetector({\n+                capabilities: { 'bstack:options': { deviceName: 'SAMSUNG GALAXY S21' } },\n+                requestedCapabilities: {}\n+            }).isAndroid).toBe(true)\n+\n+            expect(capabilitiesEnvironmentDetector({\n+                'bstack:options': { deviceName: 'google pixel 7' }\n+            }).isAndroid).toBe(true)\n+\n+            expect(sessionEnvironmentDetector({\n+                capabilities: { 'bstack:options': { deviceName: 'Galaxy S22' } },\n+                requestedCapabilities: {}\n+            }).isAndroid).toBe(true)\n+\n+            expect(capabilitiesEnvironmentDetector({\n+                'bstack:options': { deviceName: 'ONEPLUS 10' }\n+            }).isAndroid).toBe(true)\n+        })\n+\n+        it('should detect Android when both platform and device name are present', () => {\n+            const capabilities = {\n+                platformName: 'Android',\n+                'bstack:options': { deviceName: 'Samsung Galaxy S21' }\n+            }\n+\n+            expect(sessionEnvironmentDetector({\n+                capabilities,\n+                requestedCapabilities: {}\n+            }).isAndroid).toBe(true)\n+\n+            expect(capabilitiesEnvironmentDetector(capabilities).isAndroid).toBe(true)\n+        })\n+\n+        it('should detect Android when only device name is present without platform', () => {\n+            const capabilities = { 'bstack:options': { deviceName: 'Pixel 7' } }\n+\n+            expect(sessionEnvironmentDetector({\n+                capabilities,\n+                requestedCapabilities: {}\n+            }).isAndroid).toBe(true)\n+\n+            expect(capabilitiesEnvironmentDetector(capabilities).isAndroid).toBe(true)\n+        })\n+\n+        it('should handle empty deviceName in bstack:options', () => {\n+            const capabilities = { 'bstack:options': { deviceName: '' } }\n+\n+            expect(sessionEnvironmentDetector({\n+                capabilities,\n+                requestedCapabilities: {}\n+            }).isAndroid).toBe(false)\n+\n+            expect(capabilitiesEnvironmentDetector(capabilities).isAndroid).toBe(false)\n+        })\n+\n+        it('should handle missing deviceName in bstack:options', () => {\n+            const capabilities = { 'bstack:options': {} }\n+\n+            expect(sessionEnvironmentDetector({\n+                capabilities,\n+                requestedCapabilities: {}\n+            }).isAndroid).toBe(false)\n+\n+            expect(capabilitiesEnvironmentDetector(capabilities).isAndroid).toBe(false)\n+        })\n     })\n \n     it('isSeleniumStandalone', () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14565",
    "pr_id": 14565,
    "issue_id": 14532,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Failed to import custom reporter module\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\nv20.18.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\ncapabilities: [\n        {\n            browserName: 'chrome',\n        },\n    ],\n\n    reporters: ['spec', ['C:\\\\u01\\\\workspace\\\\vscode-webdriverio\\\\packages\\\\vscode-webdriverio\\\\dist\\\\worker.cjs', {outputDir:'logs',stdout:true}]],\n```\n\n### What happened?\n\nBased on [this document](https://webdriver.io/docs/customreporter), I set the full path of the custom reporter's module (typescript source code file) in the reporters configuration and it imported and worked properly as expected on Linux/macOS, but on Windows, It does not import properly and an error occurs.\n\ne.g.\nat linux/macOS: ['/path/to/reporter.js', { someOption: 'foobar' }] --> ok\nat Windows: ['c:\\\\path\\\\to\\\\reporter.js', { someOption: 'foobar' }] --> error\n\n\n### What is your expected behavior?\n\nThe module of a custom reporter can be imported even if windows environment.\n\n### How to reproduce the bug.\n\n1. set the full path of the custom reporter module file to `reporters` on the Windows platform.\n\n1. run wdio \n\n### Note.\nRoot cause is here. it will work fine In the posix system, but it won't in the windows system.\nhttps://github.com/webdriverio/webdriverio/blob/f460f0061269e5109c23cf071603682a296acc44/packages/wdio-utils/src/utils.ts#L20-L23\n\n⬆️This called from\nhttps://github.com/webdriverio/webdriverio/blob/f460f0061269e5109c23cf071603682a296acc44/packages/wdio-utils/src/initializePlugin.ts#L11-L15\n\n⬆️This called from\nhttps://github.com/webdriverio/webdriverio/blob/f460f0061269e5109c23cf071603682a296acc44/packages/wdio-runner/src/reporter.ts#L257\n\n### Relevant log output\n\n```typescript\npnpm  run test\n\n> @vscode-wdio/smoke-update-config@1.0.0 test C:\\u01\\workspace\\vscode-webdriverio\\samples\\smoke\\update-config\n> wdio run ./wdio.conf.ts\n\n\nExecution of 1 workers started at 2025-06-02T00:55:42.055Z\n\n2025-06-02T00:55:42.118Z INFO @wdio/cli:launcher: Run onPrepare hook\n2025-06-02T00:55:42.120Z INFO @wdio/utils: Setting up browser driver for: chrome@stable\n2025-06-02T00:55:42.121Z INFO @wdio/utils: Setting up browser binaries for: chrome@stable\n2025-06-02T00:55:42.125Z INFO webdriver: Using Chromedriver v137.0.7151.41 from cache directory C:\\Users\\TAIKIA~1\\AppData\\Local\\Temp\n2025-06-02T00:55:42.134Z INFO @wdio/cli:launcher: Run onWorkerStart hook\n2025-06-02T00:55:42.136Z INFO @wdio/local-runner: Start worker 0-0 with arg: run ./wdio.conf.ts\n[0-0] 2025-06-02T00:55:43.733Z INFO @wdio/local-runner: Run worker command: run\n[0-0] 2025-06-02T00:55:43.813Z ERROR @wdio/local-runner: Failed launching test session: Error: Couldn't initialize \"wdio-c:\\u01\\workspace\\vscode-webdriverio\\packages\\vscode-webdriverio\\dist\\worker.cjs-reporter\".\n[0-0] Error [ERR_UNSUPPORTED_ESM_URL_SCHEME]: Only URLs with a scheme in: file, data, and node are supported by the default ESM loader. Received protocol 'wdio-c:'\n[0-0]     at throwIfUnsupportedURLScheme (node:internal/modules/esm/load:241:11)\n[0-0]     at defaultLoad (node:internal/modules/esm/load:132:3)\n[0-0]     at nextLoad (node:internal/modules/esm/hooks:864:28)\n[0-0]     at load (file:///C:/u01/workspace/vscode-webdriverio/node_modules/.pnpm/tsx@4.19.4/node_modules/tsx/dist/esm/index.mjs?1748825742396:2:1768)\n[0-0]     at nextLoad (node:internal/modules/esm/hooks:864:28)\n[0-0]     at Hooks.load (node:internal/modules/esm/hooks:451:26)\n[0-0]     at handleMessage (node:internal/modules/esm/worker:196:24)\n[0-0]     at Immediate.checkForMessages (node:internal/modules/esm/worker:138:28)\n[0-0]     at process.processImmediate (node:internal/timers:483:21)\n[0-0]     at safeImport (C:\\u01\\workspace\\vscode-webdriverio\\node_modules\\.pnpm\\@wdio+utils@9.14.0\\node_modules\\@wdio\\utils\\build\\index.js:292:11)\n[0-0]     at async initializePlugin (C:\\u01\\workspace\\vscode-webdriverio\\node_modules\\.pnpm\\@wdio+utils@9.14.0\\node_modules\\@wdio\\utils\\build\\index.js:489:18)\n[0-0]     at async BaseReporter._loadReporter (file:///C:/u01/workspace/vscode-webdriverio/node_modules/.pnpm/@wdio+runner@9.14.0/node_modules/@wdio/runner/build/index.js:611:24)\n[0-0]     at async Promise.all (index 1)\n[0-0]     at async BaseReporter.initReporters (file:///C:/u01/workspace/vscode-webdriverio/node_modules/.pnpm/@wdio+runner@9.14.0/node_modules/@wdio/runner/build/index.js:485:23)\n[0-0]     at async Runner.run (file:///C:/u01/workspace/vscode-webdriverio/node_modules/.pnpm/@wdio+runner@9.14.0/node_modules/@wdio/runner/build/index.js:690:5)      \n[0-0] FAILED\n2025-06-02T00:55:43.881Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\n\nSpec Files:      0 passed, 1 failed, 1 total (100% completed) in 00:00:01\n\n2025-06-02T00:55:43.883Z INFO @wdio/local-runner: Shutting down spawned worker\n2025-06-02T00:55:44.138Z INFO @wdio/local-runner: Waiting for 0 to shut down gracefully\n2025-06-02T00:55:44.140Z INFO @wdio/local-runner: shutting down\n2025-06-02T00:55:44.141Z INFO @wdio/cli:launcher: Run onComplete hook\n ELIFECYCLE  Test failed. See above for more details.\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 855,
    "test_files_count": 5,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/wdio-utils/src/initializePlugin.ts",
      "packages/wdio-utils/src/utils.ts",
      "packages/wdio-utils/tests/__fixtures__/plugins/bar-service.js",
      "packages/wdio-utils/tests/__fixtures__/plugins/foo-service.js",
      "packages/wdio-utils/tests/initializePlugin.test.ts",
      "packages/wdio-utils/tests/initializeServices.test.ts",
      "packages/wdio-utils/tests/utils.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-utils/tests/__fixtures__/plugins/bar-service.js",
      "packages/wdio-utils/tests/__fixtures__/plugins/foo-service.js",
      "packages/wdio-utils/tests/initializePlugin.test.ts",
      "packages/wdio-utils/tests/initializeServices.test.ts",
      "packages/wdio-utils/tests/utils.test.ts"
    ],
    "base_commit": "10cddfd73c40f1ba50c228f8bac024b000511c01",
    "head_commit": "a02cc2785790526bdca9e36646c9a03bfcd5b8b4",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14565",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14565",
    "dockerfile": "",
    "pr_merged_at": "2025-06-16T16:23:06.000Z",
    "patch": "diff --git a/packages/wdio-utils/src/initializePlugin.ts b/packages/wdio-utils/src/initializePlugin.ts\nindex a9cc3f9ce28..9f8a70f051c 100644\n--- a/packages/wdio-utils/src/initializePlugin.ts\n+++ b/packages/wdio-utils/src/initializePlugin.ts\n@@ -1,6 +1,8 @@\n import type { Services } from '@wdio/types'\n \n-import { safeImport, isAbsolute } from './utils.js'\n+import { safeImport, isAbsolute, REG_EXP_WINDOWS_ABS_PATH, SLASH } from './utils.js'\n+\n+const FILE_PROTOCOL = 'file://'\n \n /**\n  * initialize WebdriverIO compliant plugins like reporter or services in the following way:\n@@ -13,7 +15,8 @@ export default async function initializePlugin (name: string, type?: string): Pr\n      * directly import packages that are scoped or start with an absolute path\n      */\n     if (name[0] === '@' || isAbsolute(name)) {\n-        const service = await safeImport(name)\n+        const fileUrl = name[0] === '@' ? name : ensureFileURL(name)\n+        const service = await safeImport(fileUrl)\n \n         if (service) {\n             return service\n@@ -46,3 +49,21 @@ export default async function initializePlugin (name: string, type?: string): Pr\n         `\"wdio-${name.toLowerCase()}-${type}\". Please make sure you have it installed!`\n     )\n }\n+\n+function ensureFileURL(path:string) {\n+    if (path.startsWith(FILE_PROTOCOL)) {\n+        return path\n+    }\n+\n+    // Windows drive path\n+    if (REG_EXP_WINDOWS_ABS_PATH.test(path)) {\n+        return `${FILE_PROTOCOL}/${path.replace(/\\\\/g, '/')}`\n+    }\n+\n+    // Unix absolute path\n+    if (path.startsWith(SLASH)) {\n+        return `${FILE_PROTOCOL}${path}`\n+    }\n+\n+    return path\n+}\n\ndiff --git a/packages/wdio-utils/src/utils.ts b/packages/wdio-utils/src/utils.ts\nindex fa3d0daeec2..b85a5646ad8 100644\n--- a/packages/wdio-utils/src/utils.ts\n+++ b/packages/wdio-utils/src/utils.ts\n@@ -9,7 +9,8 @@ import { SUPPORTED_BROWSERNAMES, DEFAULT_PROTOCOL, DEFAULT_HOSTNAME, DEFAULT_PAT\n const SCREENSHOT_REPLACEMENT = '\"<Screenshot[base64]>\"'\n const SCRIPT_PLACEHOLDER = '\"<Script[base64]>\"'\n const REGEX_SCRIPT_NAME = /return \\((async )?function (\\w+)/\n-const SLASH = '/'\n+export const SLASH = '/'\n+export const REG_EXP_WINDOWS_ABS_PATH = /^[A-Za-z]:\\\\/\n \n function assertPath(path?: unknown) {\n     if (typeof path !== 'string') {\n@@ -19,7 +20,7 @@ function assertPath(path?: unknown) {\n \n export function isAbsolute(p: string) {\n     assertPath(p)\n-    return p.length > 0 && p.charCodeAt(0) === SLASH.codePointAt(0)\n+    return p.length > 0 && (p.charCodeAt(0) === SLASH.codePointAt(0) || REG_EXP_WINDOWS_ABS_PATH.test(p))\n }\n \n /**\n",
    "test_patch": "diff --git a/packages/wdio-utils/tests/__fixtures__/plugins/bar-service.js b/packages/wdio-utils/tests/__fixtures__/plugins/bar-service.js\nnew file mode 100644\nindex 00000000000..a8e97574674\n--- /dev/null\n+++ b/packages/wdio-utils/tests/__fixtures__/plugins/bar-service.js\n@@ -0,0 +1,6 @@\n+module.exports = class MyService {\n+    constructor () {\n+        this.isScoped = true\n+        this.foo = 'bar'\n+    }\n+}\n\ndiff --git a/packages/wdio-utils/tests/__fixtures__/plugins/foo-service.js b/packages/wdio-utils/tests/__fixtures__/plugins/foo-service.js\nnew file mode 100644\nindex 00000000000..2ab29c24dea\n--- /dev/null\n+++ b/packages/wdio-utils/tests/__fixtures__/plugins/foo-service.js\n@@ -0,0 +1,6 @@\n+module.exports = class MyService {\n+    constructor () {\n+        this.isScoped = true\n+        this.foo = 'foo'\n+    }\n+}\n\ndiff --git a/packages/wdio-utils/tests/initializePlugin.test.ts b/packages/wdio-utils/tests/initializePlugin.test.ts\nindex 10359a59f07..5c2d4f52535 100644\n--- a/packages/wdio-utils/tests/initializePlugin.test.ts\n+++ b/packages/wdio-utils/tests/initializePlugin.test.ts\n@@ -2,61 +2,111 @@ import { describe, it, expect, vi } from 'vitest'\n import type { Services } from '@wdio/types'\n \n import initializePlugin from '../src/initializePlugin.js'\n+import { fileURLToPath, pathToFileURL } from 'node:url'\n+import path from 'node:path'\n+import { resolve } from 'import-meta-resolve'\n \n interface TestService extends Services.ServiceInstance {\n     foo: string\n     isScoped: boolean\n }\n \n-vi.mock('@wdio/foobar-service')\n+vi.mock('import-meta-resolve', ()=>({\n+    resolve: vi.fn()\n+}))\n \n-/**\n- * vitest can't load non existing packages\n- * https://github.com/vitest-dev/vitest/pull/1298\n- */\n-describe.skip('initializePlugin', () => {\n-    it('should allow to load a scoped service plugin', async () => {\n-        const Service = await initializePlugin('foobar', 'service')\n-        const service = new Service({} as any, {}, {}) as TestService\n-        expect(service.foo).toBe('foobar')\n-    })\n+const __dirname = (path.dirname(fileURLToPath(import.meta.url)))\n+const fixtureDir = path.resolve(__dirname, path.join('__fixtures__', 'plugins'))\n+\n+function createMockResolver(specifier:string, result:string) {\n+    const filepath = path.resolve(fixtureDir, result)\n+    return function(_specifier:string, _result:string){\n+        if (_specifier === specifier){\n+            return pathToFileURL(filepath).href\n+        }\n+        throw new Error(`Unexpected specifier: ${_specifier}`)\n+    }\n+}\n+\n+describe('initializePlugin', () => {\n+    it('should allow to load scoped service plugin', async ()=>{\n+        vi.mocked(resolve).mockImplementation(\n+            createMockResolver('@custom/foo-service', 'foo-service.js')\n+        )\n \n-    it('should allow to load unscoped service plugin from wdio', async () => {\n-        const Service = await initializePlugin('@wdio/foobar-service', 'service')\n+        const { default: Service } = await initializePlugin('@custom/foo-service', 'service')\n         const service = new Service({} as any, {}, {}) as TestService\n-        expect(service.foo).toBe('foobar')\n+        expect(service.foo).toBe('foo')\n     })\n \n-    it('should allow to load unscoped service plugin', async () => {\n-        const Service = await initializePlugin('test', 'service')\n+    it('should allow to load the service specified by absolute path', async ()=>{\n+        const servicePath = path.resolve(__dirname, 'foo-service.js')\n+        vi.mocked(resolve).mockImplementation(\n+            createMockResolver(pathToFileURL(servicePath).href, path.basename(servicePath))\n+        )\n+\n+        const { default: Service } = await initializePlugin(servicePath, 'service')\n         const service = new Service({} as any, {}, {}) as TestService\n-        expect(service.foo).toBe('bar')\n+        expect(service.foo).toBe('foo')\n     })\n \n-    it('should allow to load scoped services', async () => {\n-        const Service = await initializePlugin('@saucelabs/wdio-foobar-reporter', 'reporter')\n+    it('should allow to load a scoped service plugin', async ()=>{\n+        const name = 'foo'\n+        const type = 'service'\n+        vi.mocked(resolve).mockImplementation(\n+            createMockResolver(`@wdio/${name.toLowerCase()}-${type}`, 'foo-service.js')\n+        )\n+\n+        const { default: Service } = await initializePlugin(name, type)\n         const service = new Service({} as any, {}, {}) as TestService\n-        expect(service.foo).toBe('barfoo')\n+        expect(service.foo).toBe('foo')\n     })\n \n-    it('should allow to load service referenced with an absolute path', async () => {\n-        const Service = await initializePlugin(__dirname + '/__mocks__/@saucelabs/wdio-foobar-reporter')\n+    it('should allow to load a unscoped service plugin from wdio', async ()=>{\n+        const name = 'foo'\n+        const type = 'service'\n+        vi.mocked(resolve).mockImplementation(\n+            createMockResolver(`wdio-${name.toLowerCase()}-${type}`, 'foo-service.js')\n+        )\n+\n+        const { default: Service } = await initializePlugin(name, type)\n         const service = new Service({} as any, {}, {}) as TestService\n-        expect(service.foo).toBe('barfoo')\n+        expect(service.foo).toBe('foo')\n     })\n \n-    it('should prefer scoped over unscoped packages', async () => {\n-        const Service = await initializePlugin('scoped', 'service')\n+    it('should prefer scoped over unscoped packages', async ()=>{\n+        const name = 'foo'\n+        const type = 'service'\n+        vi.mocked(resolve).mockImplementation(\n+            (specifier:string, _parent:string)=>{\n+                switch (specifier) {\n+                case `wdio-${name.toLowerCase()}-${type}`:\n+                    return pathToFileURL( path.resolve(fixtureDir, 'foo-service.js')).href\n+                case `@wdio/${name.toLowerCase()}-${type}`:\n+                    return pathToFileURL( path.resolve(fixtureDir, 'bar-service.js')).href\n+                default:\n+                    throw new Error(`Unexpected specifier: ${specifier}`)\n+                }\n+            }\n+        )\n+\n+        const { default: Service } = await initializePlugin(name, type)\n         const service = new Service({} as any, {}, {}) as TestService\n-        expect(service.isScoped).toBe(true)\n+        expect(service.foo).toBe('bar')\n     })\n \n     it('should throw meaningful error message', async () => {\n-        await expect(() => initializePlugin('lala', 'service'))\n+        const name = 'borked'\n+        const type = 'framework'\n+        vi.mocked(resolve).mockImplementation(\n+            createMockResolver(`@wdio/${name.toLowerCase()}-${type}`, 'NOT_FOUND')\n+        )\n+\n+        await expect(() => initializePlugin('lala', 'service')).rejects\n             .toThrow(/Please make sure you have it installed!/)\n-        await expect(() => initializePlugin('borked', 'framework'))\n-            .toThrow(/Error: foobar/)\n-        await expect(() => initializePlugin('foobar'))\n+        await expect(() => initializePlugin(name, type)).rejects\n+            .toThrow(/Couldn't initialize \"@wdio\\/borked-framework\"/)\n+        await expect(() => initializePlugin('foobar')).rejects\n             .toThrow(/No plugin type provided/)\n     })\n })\n\ndiff --git a/packages/wdio-utils/tests/initializeServices.test.ts b/packages/wdio-utils/tests/initializeServices.test.ts\nindex c4de2a93918..7396af1035d 100644\n--- a/packages/wdio-utils/tests/initializeServices.test.ts\n+++ b/packages/wdio-utils/tests/initializeServices.test.ts\n@@ -9,10 +9,14 @@ import { initializeLauncherService, initializeWorkerService } from '../src/initi\n import { safeImport } from '../src/utils.js'\n \n vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdio/logger')))\n-vi.mock('../src/utils.js', () => ({\n-    safeImport: vi.fn(),\n-    isAbsolute: vi.fn().mockReturnValue(true)\n-}))\n+vi.mock('../src/utils.js', async (importActual) => {\n+    // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n+    const actual = await importActual<typeof import('../src/utils.js')>()\n+    return {\n+        ...actual,\n+        safeImport: vi.fn(),\n+        isAbsolute: vi.fn().mockReturnValue(true) }\n+})\n const log = logger('test')\n \n interface TestLauncherService extends Services.ServiceInstance {\n\ndiff --git a/packages/wdio-utils/tests/utils.test.ts b/packages/wdio-utils/tests/utils.test.ts\nindex e05f182d867..ec451a1d294 100644\n--- a/packages/wdio-utils/tests/utils.test.ts\n+++ b/packages/wdio-utils/tests/utils.test.ts\n@@ -6,7 +6,8 @@ import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest'\n import {\n     overwriteElementCommands, commandCallStructure, isValidParameter, definesRemoteDriver,\n     getArgumentType, isFunctionAsync, filterSpecArgs, isBase64, transformCommandLogResult,\n-    userImport, getBrowserObject, enableFileLogging, isAppiumCapability\n+    userImport, getBrowserObject, enableFileLogging, isAppiumCapability,\n+    isAbsolute\n } from '../src/utils.js'\n \n describe('utils', () => {\n@@ -264,6 +265,20 @@ describe('utils:userImport', () => {\n     })\n })\n \n+describe('utils:isAbsolute', () => {\n+    it.each([\n+        [true, 'absolute path for POSIX systems', '/path/to/file',],\n+        [true, 'absolute path for Windows system', 'c:\\\\path\\\\to\\\\file'],\n+        [false, 'relative path for POSIX system', 'path/to/file'],\n+        [false, 'relative path for Windows system', 'path\\\\to\\\\file'],\n+        [false, 'UNC path for Windows system', '\\\\\\\\server\\\\path\\\\to\\\\file'],\n+        [false, 'null value', ''],\n+    ])('should return %s when input %s', (expected:boolean, _pattern:string, pathString:string)=>{\n+        expect(isAbsolute(pathString)).toBe(expected)\n+    })\n+\n+})\n+\n describe('getBrowserObject', () => {\n     it('should traverse up', () => {\n         expect(getBrowserObject({\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14557",
    "pr_id": 14557,
    "issue_id": 14525,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: BrowserStack false error about `ACCESSIBILITY Build creation failed null`\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.15.0\n\n### Node.js Version\n\nN/A\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\n{\n    platformName: 'android',\n    'appium:deviceName': '^(?!REDMI|Samsung Galaxy Tab|OnePlus 12R).*$',\n    'appium:platformVersion': '1[345]',\n    'appium:autoGrantPermissions': true,\n    'wdio:specs': [ '../../src/tests/all/**/*.test.ts' ],\n    'goto:caps': {\n      isLocalRun: false,\n      iosEnterpriseBuild: false,\n      testUserEmail: '',\n      isDevMode: true\n    },\n    'bstack:options': {\n      projectName: 'REDACTED',\n      buildName: 'REDACTED',\n      sessionName: 'BStack wdio tests',\n      debug: true,\n      networkLogs: false,\n      interactiveDebugging: true,\n      appiumLogs: false,\n      maskCommands: 'setValues, getValues, setCookies, getCookies'\n    },\n    'appium:settings[allowInvisibleElements]': true,\n    'appium:locale': 'US',\n    'appium:language': 'en'\n  }\n```\n\n### What happened?\n\nBrowser stack report error `ACCESSIBILITY Build creation failed null` while this has 0 impact on our tests, and we do not care about accessibility.\n\nAccording to the logs, our product map has `accessibility: null`, which suggests that the product is not enabled or not working for us.\n\n[This PR](https://github.com/webdriverio/webdriverio/pull/14438) auto-enabled accessibility features, which, with the above, I doubt is the proper approach. Either the working conditions should be reinforced, or a simple disable flag should be implemented, so that when not needed, it can be disabled.\n\n### What is your expected behavior?\n\nNot see a browser stack error for the service ACCESSIBILITY I do not need.\n\n### How to reproduce the bug.\n\n1. Upgrade to 9.15.0\n2. Launch a test from my machine to BrowserStack\n3. Observe the log \n4. The error is output for `@wdio/browserstack-service`\n\n### Relevant log output\n\n```typescript\n...\nprocessLaunchBuildResponse called with response: {\n  observability: {\n    success: true,\n    options: { allow_screenshots: true },\n    code: null,\n    errors: null,\n    error_trace_id: null\n  },\n  accessibility: null,\n  automate: null,\n  build_hashed_id: ‘REDACTED’,\n  jwt: 'REDACTED',\n  discard_build: null,\n  app_automate: {\n    success: true,\n    options: { allow_screenshots: true },\n    code: null,\n    errors: null,\n    error_trace_id: null\n  }\n}\n...\n2025-06-01T15:03:27.984Z ERROR @wdio/browserstack-service: ACCESSIBILITY Build creation failed null\n...\n2025-06-01T15:03:27.390Z DEBUG @wdio/browserstack-service: Sending SDK event with data {\n  userName: '[REDACTED]',\n  accessKey: '[REDACTED]',\n  event_type: 'SDKTestAttempted',\n  detectedFramework: 'WebdriverIO-mocha',\n  event_properties: {\n    sdkRunId: ‘REDACTED’,\n    testhub_uuid: undefined,\n    language_framework: 'WebdriverIO_mocha',\n    referrer: 'WebdriverIO-mocha/9.14.0',\n    language: 'WebdriverIO',\n    languageVersion: 'v18.20.4',\n    buildName: 'REDACTED’,\n    buildIdentifier: 'undefined',\n    os: 'Darwin',\n    hostname: 'REDACTED’',\n    productMap: {\n      observability: true,\n      accessibility: null,\n      percy: false,\n      automate: false,\n      app_automate: true\n    },\n    product: [ 'observability', 'app-automate' ],\n    framework: 'mocha'\n  }\n}\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 425,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-browserstack-service/src/util.ts",
      "packages/wdio-browserstack-service/tests/util.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-browserstack-service/tests/util.test.ts"
    ],
    "base_commit": "ce33265ece6792e8cfbdfa17fece0b054da7f8d2",
    "head_commit": "108425198495cef26465325a06d4652f2bdef416",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14557",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14557",
    "dockerfile": "",
    "pr_merged_at": "2025-06-10T18:10:27.000Z",
    "patch": "diff --git a/packages/wdio-browserstack-service/src/util.ts b/packages/wdio-browserstack-service/src/util.ts\nindex 8e5f33bea15..ec95eadb67e 100644\n--- a/packages/wdio-browserstack-service/src/util.ts\n+++ b/packages/wdio-browserstack-service/src/util.ts\n@@ -316,9 +316,11 @@ export const jsonifyAccessibilityArray = (\n     return result\n }\n \n-export const  processAccessibilityResponse = (response: LaunchResponse) => {\n+export const  processAccessibilityResponse = (response: LaunchResponse, options: BrowserstackConfig & Options.Testrunner) => {\n     if (!response.accessibility) {\n-        handleErrorForAccessibility(null)\n+        if (options.accessibility === true) {\n+            handleErrorForAccessibility(null)\n+        }\n         return\n     }\n     if (!response.accessibility.success) {\n@@ -355,7 +357,7 @@ export const processLaunchBuildResponse = (response: LaunchResponse, options: Br\n     if (options.testObservability) {\n         processTestObservabilityResponse(response)\n     }\n-    processAccessibilityResponse(response)\n+    processAccessibilityResponse(response, options)\n }\n \n export const launchTestSession = PerformanceTester.measureWrapper(PERFORMANCE_SDK_EVENTS.TESTHUB_EVENTS.START, o11yErrorHandler(async function launchTestSession(options: BrowserstackConfig & Options.Testrunner, config: Options.Testrunner, bsConfig: UserConfig, bStackConfig: BrowserStackConfig, accessibilityAutomation: boolean | null) {\n",
    "test_patch": "diff --git a/packages/wdio-browserstack-service/tests/util.test.ts b/packages/wdio-browserstack-service/tests/util.test.ts\nindex 4a05c47407c..6f73aba98a9 100644\n--- a/packages/wdio-browserstack-service/tests/util.test.ts\n+++ b/packages/wdio-browserstack-service/tests/util.test.ts\n@@ -58,6 +58,7 @@ import { BROWSERSTACK_OBSERVABILITY, TESTOPS_BUILD_COMPLETED_ENV, BROWSERSTACK_T\n import * as testHubUtils from '../src/testHub/utils.js'\n import * as fs from 'node:fs/promises'\n import * as os from 'node:os'\n+import type { Options } from '@wdio/types'\n \n const log = logger('test')\n \n@@ -1408,6 +1409,7 @@ describe('processTestObservabilityResponse', () => {\n \n describe('processAccessibilityResponse', () => {\n     let response: LaunchResponse, handleErrorForAccessibilitySpy\n+    let options: BrowserstackConfig & Options.Testrunner\n     beforeAll(() => {\n         response = {\n             jwt: 'abc',\n@@ -1443,25 +1445,41 @@ describe('processAccessibilityResponse', () => {\n                 errors: undefined\n             }\n         }\n+        options = {}\n     })\n     it ('processAccessibilityResponse should not log an error', function () {\n-        processAccessibilityResponse(response)\n+        const optionsWithAccessibilityTrue = options\n+        optionsWithAccessibilityTrue.accessibility = true\n+        processAccessibilityResponse(response, optionsWithAccessibilityTrue)\n         expect(process.env[BROWSERSTACK_ACCESSIBILITY]).toEqual('true')\n     })\n     it ('processAccessibilityResponse should log error if accessibility success is false', function () {\n         handleErrorForAccessibilitySpy = vi.spyOn(testHubUtils, 'handleErrorForAccessibility').mockReturnValue({} as any)\n         const res = response\n         res.accessibility!.success = false\n-        processAccessibilityResponse(res)\n+        const optionsWithAccessibilityTrue = options\n+        optionsWithAccessibilityTrue.accessibility = true\n+        processAccessibilityResponse(res, optionsWithAccessibilityTrue)\n         expect(handleErrorForAccessibilitySpy).toBeCalled()\n     })\n     it ('processAccessibilityResponse should log error if accessibility field not found', function () {\n         handleErrorForAccessibilitySpy = vi.spyOn(testHubUtils, 'handleErrorForAccessibility').mockReturnValue({} as any)\n         const res = response\n         res.accessibility = undefined\n-        processAccessibilityResponse(res)\n+        const optionsWithAccessibilityTrue = options\n+        optionsWithAccessibilityTrue.accessibility = true\n+        processAccessibilityResponse(res, optionsWithAccessibilityTrue)\n         expect(handleErrorForAccessibilitySpy).toBeCalled()\n     })\n+    it ('processAccessibilityResponse should not log error if accessibility field not found & accessibility not found in options', function () {\n+        handleErrorForAccessibilitySpy = vi.spyOn(testHubUtils, 'handleErrorForAccessibility').mockReturnValue({} as any)\n+        const res = response\n+        res.accessibility = undefined\n+        const optionsWithAccessibilityNull = options\n+        optionsWithAccessibilityNull.accessibility = null\n+        processAccessibilityResponse(res, optionsWithAccessibilityNull)\n+        expect(handleErrorForAccessibilitySpy).toBeCalledTimes(0)\n+    })\n     afterEach(() => {\n         handleErrorForAccessibilitySpy?.mockClear()\n     })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14549",
    "pr_id": 14549,
    "issue_id": 14548,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Overwrite command's original function type problem\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.15.0\n\n### Node.js Version\n\n18\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\nN/A\n```\n\n### What happened?\n\n\nThe below code shows the `originalFunction` as `(parameter) originalFunction: (...args: any[]) => (this: WebdriverIO.Element) => Promise<string>` while it should `(parameter) originalFunction: () => Promise<string>`\n\n```ts\nbrowser.overwriteCommand(\n  'getText',\n  async function (this: WebdriverIO.Element, originalFunction) {\n    // Error with `Type '(this: Element) => Promise<string>' is not assignable to type 'string'.ts(2322)`, while typeof text is string\n    const text: string = await originalFunction();\n    return text\n  },\n  true,\n);\n```\n\nThis is caused by the two types below, where `origCommand` is using `(...args: any[]) =>`, and because `$ElementCommands[ElementKey]` is missing `OmitThisParameter`\n\n```ts\ntype OverwriteCommandFnScoped<ElementKey extends keyof $ElementCommands, BrowserKey extends keyof $BrowserCommands, IsElement extends boolean = false> = (this: IsElement extends true ? WebdriverIO.Element : WebdriverIO.Browser, origCommand: (...args: any[]) => IsElement extends true ? $ElementCommands[ElementKey] : $BrowserCommands[BrowserKey], ...args: any[]) => Promise<any>;\ntype OverwriteCommandFn<ElementKey extends keyof $ElementCommands, BrowserKey extends keyof $BrowserCommands, IsElement extends boolean = false> = (origCommand: (...args: any[]) => IsElement extends true ? $ElementCommands[ElementKey] : $BrowserCommands[BrowserKey], ...args: any[]) => Promise<any>;\n```\n\nWhen using the below types, the `originalFunction` is now correctly inferred\n\n```ts\ntype OverwriteCommandFnScoped<ElementKey extends keyof $ElementCommands, BrowserKey extends keyof $BrowserCommands, IsElement extends boolean = false> = (this: IsElement extends true ? WebdriverIO.Element : WebdriverIO.Browser, origCommand: IsElement extends true ? OmitThisParameter<$ElementCommands[ElementKey]> : $BrowserCommands[BrowserKey], ...args: any[]) => Promise<any>;\ntype OverwriteCommandFn<ElementKey extends keyof $ElementCommands, BrowserKey extends keyof $BrowserCommands, IsElement extends boolean = false> = (origCommand: IsElement extends true ? OmitThisParameter<$ElementCommands[ElementKey]> : $BrowserCommands[BrowserKey], ...args: any[]) => Promise<any>;\n```\n\nWe also encounter a similar issue when overriding the command in the browser.\n\nPR is coming…\n\n### What is your expected behavior?\n\nWhen overriding a command, the IDE should properly resolve the type of the original function so that I can call it properly and have the result of the function also correctly typed.\n\n\n### How to reproduce the bug.\n\nTry the below snippet, and a type error will appear saying the `text` is not of type string but `Promise<string>`\n\n```ts\nbrowser.overwriteCommand(\n  'getText',\n  async function (this: WebdriverIO.Element, originalFunction) {\n    // Error with `Type '(this: Element) => Promise<string>' is not assignable to type 'string'.ts(2322)`, while typeof text is string\n    const text: string = await originalFunction();\n    return text\n  },\n  true,\n);\n```\n\n### Relevant log output\n\n```typescript\nType '(this: Element) => Promise<string>' is not assignable to type 'string'.ts(2322)\n⚠ Error (TS2322)  | \n\nType \n is not assignable to type \n .\nconst text: string\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 453,
    "test_files_count": 2,
    "non_test_files_count": 27,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/browser/custom$.ts",
      "packages/webdriverio/src/commands/browser/debug.ts",
      "packages/webdriverio/src/commands/browser/getWindowSize.ts",
      "packages/webdriverio/src/commands/browser/keys.ts",
      "packages/webdriverio/src/commands/browser/mockClearAll.ts",
      "packages/webdriverio/src/commands/browser/mockRestoreAll.ts",
      "packages/webdriverio/src/commands/browser/pause.ts",
      "packages/webdriverio/src/commands/browser/react$$.ts",
      "packages/webdriverio/src/commands/browser/react$.ts",
      "packages/webdriverio/src/commands/browser/reloadSession.ts",
      "packages/webdriverio/src/commands/browser/restore.ts",
      "packages/webdriverio/src/commands/browser/savePDF.ts",
      "packages/webdriverio/src/commands/browser/saveRecordingScreen.ts",
      "packages/webdriverio/src/commands/browser/saveScreenshot.ts",
      "packages/webdriverio/src/commands/browser/scroll.ts",
      "packages/webdriverio/src/commands/browser/setCookies.ts",
      "packages/webdriverio/src/commands/browser/setViewport.ts",
      "packages/webdriverio/src/commands/browser/setWindowSize.ts",
      "packages/webdriverio/src/commands/browser/switchFrame.ts",
      "packages/webdriverio/src/commands/browser/switchWindow.ts",
      "packages/webdriverio/src/commands/browser/throttle.ts",
      "packages/webdriverio/src/commands/browser/throttleCPU.ts",
      "packages/webdriverio/src/commands/browser/throttleNetwork.ts",
      "packages/webdriverio/src/commands/browser/touchAction.ts",
      "packages/webdriverio/src/index.ts",
      "packages/webdriverio/src/types.ts",
      "packages/webdriverio/tests/addCommand.test.ts",
      "packages/webdriverio/tests/overwriteCommand.test.ts",
      "website/docs/CustomCommands.md"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/addCommand.test.ts",
      "packages/webdriverio/tests/overwriteCommand.test.ts"
    ],
    "base_commit": "2e40754b8f8209c02d0544a531171745846f3bdf",
    "head_commit": "655a3d6d0273efe02b2bbcc9299db4881b828f3e",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14549",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14549",
    "dockerfile": "",
    "pr_merged_at": "2025-06-10T00:34:59.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/custom$.ts b/packages/webdriverio/src/commands/browser/custom$.ts\nindex 74a911972f6..bfc3bafa7ab 100644\n--- a/packages/webdriverio/src/commands/browser/custom$.ts\n+++ b/packages/webdriverio/src/commands/browser/custom$.ts\n@@ -34,7 +34,7 @@ export async function custom$ (\n     this: WebdriverIO.Browser,\n     strategyName: string,\n     ...strategyArguments: unknown[]\n-) {\n+) : Promise<WebdriverIO.Element> {\n     const strategy = this.strategies.get(strategyName) as CustomStrategyFunction\n \n     if (!strategy) {\n\ndiff --git a/packages/webdriverio/src/commands/browser/debug.ts b/packages/webdriverio/src/commands/browser/debug.ts\nindex 1a66791fbcd..a82b720ac99 100644\n--- a/packages/webdriverio/src/commands/browser/debug.ts\n+++ b/packages/webdriverio/src/commands/browser/debug.ts\n@@ -34,7 +34,7 @@ import WDIORepl from '@wdio/repl'\n export function debug(\n     this: WebdriverIO.Browser,\n     commandTimeout = 5000\n-) {\n+): Promise<void | unknown> {\n     const repl = new WDIORepl()\n     const { introMessage } = WDIORepl\n \n\ndiff --git a/packages/webdriverio/src/commands/browser/getWindowSize.ts b/packages/webdriverio/src/commands/browser/getWindowSize.ts\nindex 93265093eee..cac7f8aeb4b 100644\n--- a/packages/webdriverio/src/commands/browser/getWindowSize.ts\n+++ b/packages/webdriverio/src/commands/browser/getWindowSize.ts\n@@ -23,9 +23,9 @@ interface BrowserSize {\n  * @type window\n  *\n  */\n-export async function getWindowSize(this: WebdriverIO.Browser) {\n+export async function getWindowSize(this: WebdriverIO.Browser): Promise<BrowserSize> {\n     const browser = getBrowserObject(this)\n \n     const { width, height } = await browser.getWindowRect() as BrowserSize\n-    return { width, height } as BrowserSize\n+    return { width, height } satisfies BrowserSize\n }\n\ndiff --git a/packages/webdriverio/src/commands/browser/keys.ts b/packages/webdriverio/src/commands/browser/keys.ts\nindex c06397722bf..fca322ac0af 100644\n--- a/packages/webdriverio/src/commands/browser/keys.ts\n+++ b/packages/webdriverio/src/commands/browser/keys.ts\n@@ -26,7 +26,7 @@ import { checkUnicode } from '../../utils/index.js'\n export async function keys (\n     this: WebdriverIO.Browser,\n     value: string | string[]\n-) {\n+): Promise<void> {\n     let keySequence: string[] = []\n \n     /**\n\ndiff --git a/packages/webdriverio/src/commands/browser/mockClearAll.ts b/packages/webdriverio/src/commands/browser/mockClearAll.ts\nindex dcc6204a471..a77ac1d516f 100644\n--- a/packages/webdriverio/src/commands/browser/mockClearAll.ts\n+++ b/packages/webdriverio/src/commands/browser/mockClearAll.ts\n@@ -30,7 +30,7 @@ const log = logger('webdriverio:mockClearAll')\n  *\n  * @alias browser.mockClearAll\n  */\n-export async function mockClearAll () {\n+export async function mockClearAll (): Promise<void> {\n     for (const [handle, mocks] of Object.entries(SESSION_MOCKS)) {\n         log.trace(`Clearing mocks for ${handle}`)\n         for (const mock of mocks) {\n\ndiff --git a/packages/webdriverio/src/commands/browser/mockRestoreAll.ts b/packages/webdriverio/src/commands/browser/mockRestoreAll.ts\nindex af94b76d4d7..54cdc4916cd 100644\n--- a/packages/webdriverio/src/commands/browser/mockRestoreAll.ts\n+++ b/packages/webdriverio/src/commands/browser/mockRestoreAll.ts\n@@ -28,7 +28,7 @@ const log = logger('webdriverio:mockRestoreAll')\n  *\n  * @alias browser.mockRestoreAll\n  */\n-export async function mockRestoreAll () {\n+export async function mockRestoreAll (): Promise<void> {\n     for (const [handle, mocks] of Object.entries(SESSION_MOCKS)) {\n         log.trace(`Clearing mocks for ${handle}`)\n         for (const mock of mocks) {\n\ndiff --git a/packages/webdriverio/src/commands/browser/pause.ts b/packages/webdriverio/src/commands/browser/pause.ts\nindex dc1dc79da7e..7233b20cfe0 100644\n--- a/packages/webdriverio/src/commands/browser/pause.ts\n+++ b/packages/webdriverio/src/commands/browser/pause.ts\n@@ -22,6 +22,6 @@\n export function pause (\n     this: WebdriverIO.Browser,\n     milliseconds = 1000\n-) {\n+): Promise<void> {\n     return new Promise((resolve) => setTimeout(resolve, milliseconds))\n }\n\ndiff --git a/packages/webdriverio/src/commands/browser/react$$.ts b/packages/webdriverio/src/commands/browser/react$$.ts\nindex f8b2be729c4..d500dbd4e5b 100644\n--- a/packages/webdriverio/src/commands/browser/react$$.ts\n+++ b/packages/webdriverio/src/commands/browser/react$$.ts\n@@ -43,7 +43,7 @@ export async function react$$ (\n     this: WebdriverIO.Browser,\n     selector: string,\n     { props = {}, state = {} }: ReactSelectorOptions = {}\n-) {\n+): Promise<WebdriverIO.ElementArray> {\n     await this.executeScript(resqScript, [])\n     await this.execute(waitToLoadReact)\n     const res = await this.execute(\n\ndiff --git a/packages/webdriverio/src/commands/browser/react$.ts b/packages/webdriverio/src/commands/browser/react$.ts\nindex 3a437772c7d..5f67c7e1975 100644\n--- a/packages/webdriverio/src/commands/browser/react$.ts\n+++ b/packages/webdriverio/src/commands/browser/react$.ts\n@@ -52,7 +52,7 @@ export async function react$ (\n     this: WebdriverIO.Browser,\n     selector: string,\n     { props = {}, state = {} }: ReactSelectorOptions = {}\n-) {\n+): Promise<WebdriverIO.Element> {\n     await this.executeScript(resqScript.toString(), [])\n     await this.execute(waitToLoadReact)\n     const res = await this.execute(\n\ndiff --git a/packages/webdriverio/src/commands/browser/reloadSession.ts b/packages/webdriverio/src/commands/browser/reloadSession.ts\nindex bb2aa522e79..af49a80ff6d 100644\n--- a/packages/webdriverio/src/commands/browser/reloadSession.ts\n+++ b/packages/webdriverio/src/commands/browser/reloadSession.ts\n@@ -55,7 +55,7 @@ const log = logger('webdriverio')\n  * @type utility\n  *\n  */\n-export async function reloadSession (this: WebdriverIO.Browser, newCapabilities?: WebdriverIO.Capabilities) {\n+export async function reloadSession (this: WebdriverIO.Browser, newCapabilities?: WebdriverIO.Capabilities): Promise<string> {\n     const oldSessionId = (this as WebdriverIO.Browser).sessionId\n \n     /**\n@@ -91,5 +91,5 @@ export async function reloadSession (this: WebdriverIO.Browser, newCapabilities?\n         await Promise.all(options.onReload.map((hook) => hook(oldSessionId, (this as WebdriverIO.Browser).sessionId)))\n     }\n \n-    return this.sessionId as string\n+    return this.sessionId\n }\n\ndiff --git a/packages/webdriverio/src/commands/browser/restore.ts b/packages/webdriverio/src/commands/browser/restore.ts\nindex bed91f154fd..90ecfaec005 100644\n--- a/packages/webdriverio/src/commands/browser/restore.ts\n+++ b/packages/webdriverio/src/commands/browser/restore.ts\n@@ -34,7 +34,7 @@ import { restoreFunctions } from '../../constants.js'\n export async function restore (\n     this: WebdriverIO.Browser,\n     scopes?: SupportedScopes | SupportedScopes[]\n-) {\n+): Promise<void> {\n     const scopeArray = !scopes || Array.isArray(scopes) ? scopes : [scopes]\n     const instanceRestoreFunctions = restoreFunctions.get(this)\n     if (!instanceRestoreFunctions) {\n\ndiff --git a/packages/webdriverio/src/commands/browser/savePDF.ts b/packages/webdriverio/src/commands/browser/savePDF.ts\nindex 38a48a70760..6ddd34e311b 100644\n--- a/packages/webdriverio/src/commands/browser/savePDF.ts\n+++ b/packages/webdriverio/src/commands/browser/savePDF.ts\n@@ -47,7 +47,7 @@ export async function savePDF (\n     this: WebdriverIO.Browser,\n     filepath: string,\n     options?: PDFPrintOptions\n-) {\n+): Promise<Buffer<ArrayBuffer>> {\n     /**\n      * run command implementation based on given environment\n      */\n\ndiff --git a/packages/webdriverio/src/commands/browser/saveRecordingScreen.ts b/packages/webdriverio/src/commands/browser/saveRecordingScreen.ts\nindex d3e3362d922..1a835954486 100644\n--- a/packages/webdriverio/src/commands/browser/saveRecordingScreen.ts\n+++ b/packages/webdriverio/src/commands/browser/saveRecordingScreen.ts\n@@ -28,7 +28,7 @@ import { environment } from '../../environment.js'\n export async function saveRecordingScreen (\n     this: WebdriverIO.Browser,\n     filepath: string\n-) {\n+): Promise<Buffer<ArrayBuffer>> {\n     /**\n      * run command implementation based on given environment\n      */\n\ndiff --git a/packages/webdriverio/src/commands/browser/saveScreenshot.ts b/packages/webdriverio/src/commands/browser/saveScreenshot.ts\nindex 0e086d565b6..0f59cadba2a 100644\n--- a/packages/webdriverio/src/commands/browser/saveScreenshot.ts\n+++ b/packages/webdriverio/src/commands/browser/saveScreenshot.ts\n@@ -52,7 +52,7 @@ export async function saveScreenshot (\n     this: WebdriverIO.Browser,\n     filepath: string,\n     options?: SaveScreenshotOptions\n-) {\n+): Promise<Buffer<ArrayBuffer>> {\n     /**\n      * run command implementation based on given environment\n      */\n\ndiff --git a/packages/webdriverio/src/commands/browser/scroll.ts b/packages/webdriverio/src/commands/browser/scroll.ts\nindex 8f0a5a81aa9..fb37fbd87f4 100644\n--- a/packages/webdriverio/src/commands/browser/scroll.ts\n+++ b/packages/webdriverio/src/commands/browser/scroll.ts\n@@ -29,9 +29,10 @@ export function scroll (\n     this: WebdriverIO.Browser,\n     x = 0,\n     y = 0\n-) {\n+): Promise<void> {\n     if (!x && !y) {\n-        return log.warn('\"scroll\" command was called with no parameters, skipping execution')\n+        log.warn('\"scroll\" command was called with no parameters, skipping execution')\n+        return Promise.resolve()\n     }\n \n     // Appium does not support the \"wheel\" action\n\ndiff --git a/packages/webdriverio/src/commands/browser/setCookies.ts b/packages/webdriverio/src/commands/browser/setCookies.ts\nindex f3e54e4c234..e7245be9aa5 100644\n--- a/packages/webdriverio/src/commands/browser/setCookies.ts\n+++ b/packages/webdriverio/src/commands/browser/setCookies.ts\n@@ -57,7 +57,7 @@ import type { Cookie } from '@wdio/protocols'\n export async function setCookies(\n     this: WebdriverIO.Browser,\n     cookieObjs: Cookie | Cookie[]\n-) {\n+): Promise<void> {\n     const cookieObjsList = !Array.isArray(cookieObjs) ? [cookieObjs] : cookieObjs\n \n     if (cookieObjsList.some(obj => (typeof obj !== 'object'))) {\n\ndiff --git a/packages/webdriverio/src/commands/browser/setViewport.ts b/packages/webdriverio/src/commands/browser/setViewport.ts\nindex 9045f67c064..79435a0a974 100644\n--- a/packages/webdriverio/src/commands/browser/setViewport.ts\n+++ b/packages/webdriverio/src/commands/browser/setViewport.ts\n@@ -36,7 +36,7 @@ export interface SetViewportOptions {\n export async function setViewport(\n     this: WebdriverIO.Browser,\n     options: SetViewportOptions\n-) {\n+): Promise<void> {\n     /**\n      * type check\n      */\n\ndiff --git a/packages/webdriverio/src/commands/browser/setWindowSize.ts b/packages/webdriverio/src/commands/browser/setWindowSize.ts\nindex c3693139287..fb1212dd151 100644\n--- a/packages/webdriverio/src/commands/browser/setWindowSize.ts\n+++ b/packages/webdriverio/src/commands/browser/setWindowSize.ts\n@@ -27,7 +27,7 @@ export async function setWindowSize(\n     this: WebdriverIO.Browser,\n     width: number,\n     height: number\n-) {\n+): Promise<void> {\n     /**\n      * type check\n      */\n\ndiff --git a/packages/webdriverio/src/commands/browser/switchFrame.ts b/packages/webdriverio/src/commands/browser/switchFrame.ts\nindex ecc5d65facc..1d0620aae8a 100644\n--- a/packages/webdriverio/src/commands/browser/switchFrame.ts\n+++ b/packages/webdriverio/src/commands/browser/switchFrame.ts\n@@ -68,7 +68,7 @@ const log = logger('webdriverio:switchFrame')\n export async function switchFrame (\n     this: WebdriverIO.Browser,\n     context: WebdriverIO.Element | ChainablePromiseElement | string | null | ((tree: FlatContextTree) => boolean | Promise<boolean>)\n-) {\n+): Promise<string | void> {\n     function isPossiblyUnresolvedElement(input: typeof context): input is WebdriverIO.Element | ChainablePromiseElement {\n         return Boolean(input) && typeof input === 'object' && typeof (input as WebdriverIO.Element).getElement === 'function'\n     }\n\ndiff --git a/packages/webdriverio/src/commands/browser/switchWindow.ts b/packages/webdriverio/src/commands/browser/switchWindow.ts\nindex 19fda72ff42..98c3ad3fb81 100644\n--- a/packages/webdriverio/src/commands/browser/switchWindow.ts\n+++ b/packages/webdriverio/src/commands/browser/switchWindow.ts\n@@ -37,7 +37,7 @@ import { getContextManager } from '../../session/context.js'\n export async function switchWindow (\n     this: WebdriverIO.Browser,\n     matcher: string | RegExp\n-) {\n+): Promise<string> {\n     /**\n      * parameter check\n      */\n\ndiff --git a/packages/webdriverio/src/commands/browser/throttle.ts b/packages/webdriverio/src/commands/browser/throttle.ts\nindex bec71ee3dd9..412f428230f 100644\n--- a/packages/webdriverio/src/commands/browser/throttle.ts\n+++ b/packages/webdriverio/src/commands/browser/throttle.ts\n@@ -10,7 +10,7 @@ const log = logger('webdriverio:throttle')\n export async function throttle (\n     this: WebdriverIO.Browser,\n     params: ThrottleOptions\n-) {\n+): Promise<void> {\n     log.warn('Command \"throttle\" is deprecated and will be removed with the next major version release! Use `throttleNetwork` instead.')\n     const browser = getBrowserObject(this)\n     await browser.throttleNetwork(params)\n\ndiff --git a/packages/webdriverio/src/commands/browser/throttleCPU.ts b/packages/webdriverio/src/commands/browser/throttleCPU.ts\nindex 0b380c3bd8d..f10bf08e52b 100644\n--- a/packages/webdriverio/src/commands/browser/throttleCPU.ts\n+++ b/packages/webdriverio/src/commands/browser/throttleCPU.ts\n@@ -26,7 +26,7 @@\n export async function throttleCPU (\n     this: WebdriverIO.Browser,\n     factor: number\n-) {\n+): Promise<void> {\n     if (typeof factor !== 'number') {\n         throw new Error('Invalid factor for \"throttleCPU\". Expected it to be a number (int)')\n     }\n\ndiff --git a/packages/webdriverio/src/commands/browser/throttleNetwork.ts b/packages/webdriverio/src/commands/browser/throttleNetwork.ts\nindex 3ea905a5433..30b30dae5a7 100644\n--- a/packages/webdriverio/src/commands/browser/throttleNetwork.ts\n+++ b/packages/webdriverio/src/commands/browser/throttleNetwork.ts\n@@ -114,7 +114,7 @@ const NETWORK_PRESET_TYPES = Object.keys(NETWORK_PRESETS)\n export async function throttleNetwork (\n     this: WebdriverIO.Browser,\n     params: ThrottleOptions\n-) {\n+): Promise<void> {\n     if (\n         /**\n          * check string parameter\n@@ -134,7 +134,7 @@ export async function throttleNetwork (\n     if (this.isSauce) {\n         const browser = getBrowserObject(this)\n         await browser.sauceThrottleNetwork(params)\n-        return null\n+        return\n     }\n \n     const failedConnectionMessage = 'No Puppeteer connection could be established which is required to use this command'\n@@ -161,5 +161,5 @@ export async function throttleNetwork (\n             : params\n     )\n \n-    return null\n+    return\n }\n\ndiff --git a/packages/webdriverio/src/commands/browser/touchAction.ts b/packages/webdriverio/src/commands/browser/touchAction.ts\nindex 144094a6f3b..46c28bf89d5 100644\n--- a/packages/webdriverio/src/commands/browser/touchAction.ts\n+++ b/packages/webdriverio/src/commands/browser/touchAction.ts\n@@ -75,6 +75,6 @@ import type { TouchActions } from '../../types.js'\n export function touchAction (\n     this: WebdriverIO.Browser,\n     actions: TouchActions\n-) {\n+): Promise<void> {\n     return touchActionCommand.call(this, actions)\n }\n\ndiff --git a/packages/webdriverio/src/index.ts b/packages/webdriverio/src/index.ts\nindex a74d629cf9a..20c174ac8b8 100644\n--- a/packages/webdriverio/src/index.ts\n+++ b/packages/webdriverio/src/index.ts\n@@ -68,15 +68,9 @@ export const remote = async function(\n      * we need to overwrite the original addCommand and overwriteCommand\n      */\n     if ((params as Options.Testrunner).framework && !isStub(params.automationProtocol)) {\n-        const origAddCommand = instance.addCommand.bind(instance) as typeof instance.addCommand\n-        instance.addCommand = (name: string, fn: (...args: any[]) => any, attachToElement) => (\n-            origAddCommand(name, fn, attachToElement)\n-        )\n-\n-        const origOverwriteCommand = instance.overwriteCommand.bind(instance) as typeof instance.overwriteCommand\n-        instance.overwriteCommand = (name: string, fn: (...args: any[]) => any, attachToElement) => (\n-            origOverwriteCommand<keyof typeof elementCommands, any, any>(name, fn, attachToElement)\n-        )\n+        instance.addCommand = instance.addCommand.bind(instance)\n+\n+        instance.overwriteCommand = instance.overwriteCommand.bind(instance)\n     }\n \n     instance.addLocatorStrategy = addLocatorStrategyHandler(instance)\n@@ -178,9 +172,9 @@ export const multiremote = async function (\n      */\n     if (!isStub(automationProtocol)) {\n         const origAddCommand = driver.addCommand.bind(driver)\n-        driver.addCommand = (name: string, fn: (...args: any[]) => any, attachToElement) => {\n-            driver.instances.forEach(instance =>\n-                driver.getInstance(instance).addCommand(name, fn, attachToElement)\n+        driver.addCommand = (name: string, fn, attachToElement) => {\n+            driver.instances.forEach(instanceName =>\n+                driver.getInstance(instanceName).addCommand(name, fn, attachToElement)\n             )\n \n             return origAddCommand(\n@@ -193,7 +187,7 @@ export const multiremote = async function (\n         }\n \n         const origOverwriteCommand = driver.overwriteCommand.bind(driver) as typeof driver.overwriteCommand\n-        driver.overwriteCommand = (name: string, fn: (...args: any[]) => any, attachToElement) => {\n+        driver.overwriteCommand = (name, fn, attachToElement) => {\n             return origOverwriteCommand<keyof typeof elementCommands, any, any>(\n                 name,\n                 fn,\n\ndiff --git a/packages/webdriverio/src/types.ts b/packages/webdriverio/src/types.ts\nindex a114ba74e2b..964597b9582 100644\n--- a/packages/webdriverio/src/types.ts\n+++ b/packages/webdriverio/src/types.ts\n@@ -189,7 +189,7 @@ type AddCommandFnScoped<\n     InstanceType = WebdriverIO.Browser,\n     IsElement extends boolean = false\n > = (\n-    this: IsElement extends true ? Element : InstanceType,\n+    this: IsElement extends true ? WebdriverIO.Element : InstanceType,\n     ...args: any[]\n ) => any\n \n@@ -201,7 +201,7 @@ type OverwriteCommandFnScoped<\n     IsElement extends boolean = false\n > = (\n     this: IsElement extends true ? WebdriverIO.Element : WebdriverIO.Browser,\n-    origCommand: (...args: any[]) => IsElement extends true ? $ElementCommands[ElementKey] : $BrowserCommands[BrowserKey],\n+    originalCommand: IsElement extends true ? OmitThisParameter<$ElementCommands[ElementKey]> : OmitThisParameter<$BrowserCommands[BrowserKey]>,\n     ...args: any[]\n ) => Promise<any>\n \n@@ -210,21 +210,25 @@ type OverwriteCommandFn<\n     BrowserKey extends keyof $BrowserCommands,\n     IsElement extends boolean = false\n > = (\n-    origCommand: (...args: any[]) => IsElement extends true ? $ElementCommands[ElementKey] : $BrowserCommands[BrowserKey],\n+    this: IsElement extends true ? WebdriverIO.Element : WebdriverIO.Browser,\n+    originalCommand: IsElement extends true ? OmitThisParameter<$ElementCommands[ElementKey]> : OmitThisParameter<$BrowserCommands[BrowserKey]>,\n     ...args: any[]\n ) => Promise<any>\n \n export type CustomLocatorReturnValue = HTMLElement | HTMLElement[] | NodeListOf<HTMLElement>\n+\n+type Instances = WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser\n+\n export interface CustomInstanceCommands<T> {\n     /**\n      * add command to `browser` or `element` scope\n      */\n-    addCommand<IsElement extends boolean = false>(\n+    addCommand<IsElement extends boolean = false, Instance extends Instances = WebdriverIO.Browser>(\n         name: string,\n-        func: AddCommandFn | AddCommandFnScoped<T, IsElement>,\n+        func: IsElement extends true ? AddCommandFnScoped<T | Instance, IsElement> : AddCommandFn,\n         attachToElement?: IsElement,\n         proto?: Record<string, any>,\n-        instances?: Record<string, WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser>\n+        instances?: Record<string, Instances>\n     ): void;\n \n     /**\n@@ -232,10 +236,10 @@ export interface CustomInstanceCommands<T> {\n      */\n     overwriteCommand<ElementKey extends keyof $ElementCommands, BrowserKey extends keyof $BrowserCommands, IsElement extends boolean = false>(\n         name: IsElement extends true ? ElementKey : BrowserKey,\n-        func: OverwriteCommandFn<ElementKey, BrowserKey, IsElement> | OverwriteCommandFnScoped<ElementKey, BrowserKey, IsElement>,\n+        func: IsElement extends true ? OverwriteCommandFnScoped<ElementKey, BrowserKey, IsElement> : OverwriteCommandFn<ElementKey, BrowserKey, IsElement>,\n         attachToElement?: IsElement,\n         proto?: Record<string, any>,\n-        instances?: Record<string, WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser>\n+        instances?: Record<string, Instances>\n     ): void;\n \n     /**\n\ndiff --git a/website/docs/CustomCommands.md b/website/docs/CustomCommands.md\nindex 38209d7b1c2..7dcd8435ad8 100644\n--- a/website/docs/CustomCommands.md\n+++ b/website/docs/CustomCommands.md\n@@ -267,13 +267,16 @@ The overall approach is similar to `addCommand`, the only difference is that the\n \n ```js\n /**\n- * print milliseconds before pause and return its value.\n- */\n-// 'pause'            - name of command to be overwritten\n-// origPauseFunction  - original pause function\n-browser.overwriteCommand('pause', async (origPauseFunction, ms) => {\n+ * Print milliseconds before pause and return its value.\n+ * \n+ * @param pause - name of command to be overwritten\n+ * @param this of func - the original browser instance on which the function was called\n+ * @param originalPauseFunction of func - the original pause function\n+ * @param ms of func - the actual parameters passed\n+  */\n+browser.overwriteCommand('pause', async function (this, originalPauseFunction, ms) {\n     console.log(`sleeping for ${ms}`)\n-    await origPauseFunction(ms)\n+    await originalPauseFunction(ms)\n     return ms\n })\n \n@@ -289,34 +292,41 @@ Overwriting commands on element level is almost the same. Simply pass `true` as\n /**\n  * Attempt to scroll to element if it is not clickable.\n  * Pass { force: true } to click with JS even if element is not visible or clickable.\n+ * Show that the original function argument type can be kept with `options?: ClickOptions`\n+ *\n+ * @param this of func - the element on which the original function was called\n+ * @param originalClickFunction of func - the original pause function\n+ * @param options of func - the actual parameters passed\n  */\n-// 'click'            - name of command to be overwritten\n-// origClickFunction  - original click function\n-browser.overwriteCommand('click', async function (origClickFunction, { force = false } = {}) {\n-    if (!force) {\n-        try {\n-            // attempt to click\n-            await origClickFunction()\n-            return null\n-        } catch (err) {\n-            if (err.message.includes('not clickable at point')) {\n-                console.warn('WARN: Element', this.selector, 'is not clickable.',\n-                    'Scrolling to it before clicking again.')\n-\n-                // scroll to element and click again\n-                await this.scrollIntoView()\n-                return origClickFunction()\n+browser.overwriteCommand(\n+    'click',\n+    async function (this, originalClickFunction, options?: ClickOptions & { force?: boolean }) {\n+        const { force, ...restOptions } = options || {}\n+        if (!force) {\n+            try {\n+                // attempt to click\n+                await originalClickFunction(options)\n+                return\n+            } catch (err) {\n+                if ((err as Error).message.includes('not clickable at point')) {\n+                    console.warn('WARN: Element', this.selector, 'is not clickable.', 'Scrolling to it before clicking again.')\n+\n+                    // scroll to element and click again\n+                    await this.scrollIntoView()\n+                    return originalClickFunction(options)\n+                }\n+                throw err\n             }\n-            throw err\n         }\n-    }\n \n-    // clicking with js\n-    console.warn('WARN: Using force click for', this.selector)\n-    await browser.execute((el) => {\n-        el.click()\n-    }, this)\n-}, true) // don't forget to pass `true` as 3rd argument\n+        // clicking with js\n+        console.warn('WARN: Using force click for', this.selector)\n+        await browser.execute((el) => {\n+            el.click()\n+        }, this)\n+    },\n+    true, // don't forget to pass `true` as 3rd argument\n+)\n \n // then use it as before\n const elem = await $('body')\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/addCommand.test.ts b/packages/webdriverio/tests/addCommand.test.ts\nindex e10a4644570..87c5b5ffdf4 100644\n--- a/packages/webdriverio/tests/addCommand.test.ts\n+++ b/packages/webdriverio/tests/addCommand.test.ts\n@@ -59,6 +59,26 @@ const customCommand = async () => {\n \n describe('addCommand', () => {\n     describe('remote', () => {\n+\n+        test('should resolve the this parameter by inference', async () => {\n+            const browser = await remote(remoteConfig)\n+            browser.addCommand(\n+                'press',\n+                async function (this /* Expect to be infer to WebDriverIO.Element by default */) {\n+                    await this.click()\n+                    return\n+                },\n+                true,\n+            )\n+\n+            const element = await browser.$('.someRandomElement')\n+            vi.spyOn(element, 'click')\n+\n+            // @ts-expect-error undefined custom command\n+            expect(await element.press()).toBeUndefined()\n+            expect(element.click).toBeCalledTimes(1)\n+        })\n+\n         test('should be able to handle async', async () => {\n             const browser = await remote(remoteConfig)\n \n\ndiff --git a/packages/webdriverio/tests/overwriteCommand.test.ts b/packages/webdriverio/tests/overwriteCommand.test.ts\nindex ae6d68d28c4..02764460689 100644\n--- a/packages/webdriverio/tests/overwriteCommand.test.ts\n+++ b/packages/webdriverio/tests/overwriteCommand.test.ts\n@@ -1,5 +1,6 @@\n import path from 'node:path'\n-import { describe, expect, test, vi } from 'vitest'\n+import { describe, expect, expectTypeOf, test, vi } from 'vitest'\n+import type { ClickOptions } from '../src/index.js'\n import { remote, multiremote } from '../src/index.js'\n \n vi.mock('fetch')\n@@ -45,84 +46,209 @@ const customBrowserCommand = async (origCmd: Function, origCmdArg: number, arg =\n \n describe('overwriteCommand', () => {\n     describe('remote', () => {\n-        test('should be able to handle async', async () => {\n-            const browser = await remote(remoteConfig)\n-            browser.overwriteCommand('pause', customBrowserCommand)\n \n-            // @ts-expect-error command overwritten\n-            expect(await browser.pause(10, 10)).toBeGreaterThanOrEqual(20)\n-        })\n+        describe('given browser scope', () => {\n \n-        test('should still work on browser calls after fetching an element', async () => {\n-            const browser = await remote(remoteConfig)\n-            await browser.$('#foo')\n-            browser.overwriteCommand('pause', customBrowserCommand)\n+            test('should be able to handle async', async () => {\n+                const browser = await remote(remoteConfig)\n+                browser.overwriteCommand('pause', customBrowserCommand)\n \n-            expect(await browser.pause(9)).toBeGreaterThanOrEqual(9)\n-        })\n+                // @ts-expect-error command overwritten\n+                expect(await browser.pause(10, 10)).toBeGreaterThanOrEqual(20)\n+            })\n \n-        test('should be able to overwrite element command', async () => {\n-            const browser = await remote(remoteConfig)\n-            browser.overwriteCommand('getAttribute', customElementCommand, true)\n-            const elem = await browser.$('#foo')\n+            test('should be able to handle async', async () => {\n+                const browser = await remote(remoteConfig)\n+                browser.overwriteCommand('pause', customBrowserCommand)\n \n-            // @ts-expect-error command overwritten\n-            expect(await elem.getAttribute('foo', 'bar')).toBe('foo-value foo bar')\n-        })\n+                // @ts-expect-error command overwritten\n+                expect(await browser.pause(10, 10)).toBeGreaterThanOrEqual(20)\n+            })\n \n-        test('should propagate element commands for all prototypes', async () => {\n-            const browser = await remote(remoteConfig)\n-            browser.overwriteCommand('getAttribute', customElementCommand, true)\n-            const elems = await browser.$$('.someRandomElement')\n+            test('should still work on browser calls after fetching an element', async () => {\n+                const browser = await remote(remoteConfig)\n+                await browser.$('#foo')\n+                browser.overwriteCommand('pause', customBrowserCommand)\n \n-            // @ts-expect-error command overwritten\n-            expect(await elems[0].getAttribute('0', 'q')).toBe('0-value 0 q')\n-            // @ts-expect-error command overwritten\n-            expect(await elems[1].getAttribute('1', 'w')).toBe('1-value 1 w')\n-            // @ts-expect-error command overwritten\n-            expect(await elems[2].getAttribute('2', 'e')).toBe('2-value 2 e')\n-        })\n+                expect(await browser.pause(9)).toBeGreaterThanOrEqual(9)\n+            })\n \n-        test('should propagate element commands to sub elements', async () => {\n-            const browser = await remote(remoteConfig)\n-            browser.overwriteCommand('getAttribute', customElementCommand, true)\n-            const elem = await browser.$('#foo')\n-            const subElem = await elem.$('.subElem')\n+            test('should properly throw exceptions on the browser scope', async () => {\n+                const browser = await remote(remoteConfig)\n+                browser.overwriteCommand('waitUntil', function () {\n+                    throw error1\n+                })\n \n-            // @ts-expect-error command overwritten\n-            expect(await subElem.getAttribute('bar', 'foo')).toBe('bar-value bar foo')\n-        })\n+                browser.overwriteCommand('url', async function () {\n+                    await browser.$('#foo')\n+                    throw error2\n+                })\n \n-        test('should properly throw exceptions on the browser scope', async () => {\n-            const browser = await remote(remoteConfig)\n-            browser.overwriteCommand('waitUntil', function () {\n-                throw error1\n+                // @ts-expect-error command overwritten\n+                await expect(() => browser.waitUntil()).rejects.toThrow(error1)\n+                // @ts-expect-error command overwritten\n+                await expect(browser.url()).rejects.toThrow(error2)\n             })\n \n-            browser.overwriteCommand('url', async function () {\n-                await browser.$('#foo')\n-                throw error2\n+            test('should resolve return type properly', async () => {\n+                const browser = await remote(remoteConfig)\n+                let origCommand\n+                browser.overwriteCommand(\n+                    'pause',\n+                    async function (originalFunction /* (milliseconds?: number | undefined) => Promise<void> */) {\n+                        origCommand = originalFunction\n+\n+                        const promise: Promise<void> = originalFunction(10)\n+                        return await promise\n+                    },\n+                    false,\n+                )\n+\n+                await expect(browser.pause()).resolves.toBeUndefined()\n+                expect(origCommand).toBeDefined()\n             })\n \n-            // @ts-expect-error command overwritten\n-            await expect(() => browser.waitUntil()).rejects.toThrow(error1)\n-            // @ts-expect-error command overwritten\n-            await expect(browser.url()).rejects.toThrow(error2)\n+            test('should get a ts error and runtime error when trying to overwrite an non-existing command', async () => {\n+                const browser = await remote(remoteConfig)\n+\n+                expect(() => browser.overwriteCommand(\n+                    // @ts-expect-error cannot overwrite non-existing command\n+                    'click',\n+                    async function () {}\n+                )).toThrow('overwriteCommand: no command to be overwritten: click')\n+            })\n+\n+            test('should infer properly the argument this of the func to the Browser type', async () => {\n+                const browser = await remote(remoteConfig)\n+                vi.spyOn(browser, 'scroll')\n+\n+                browser.overwriteCommand('pause', async function (this) {\n+                    this.scroll(0, 100)\n+                })\n+\n+                await browser.pause(10)\n+\n+                expect(browser.scroll).toHaveBeenCalledTimes(1)\n+            })\n         })\n+        describe('given element scope', () => {\n+            const isElementScope = true\n \n-        test('should properly throw exceptions on the element scope', async () => {\n-            const browser = await remote(remoteConfig)\n-            browser.overwriteCommand('click', function () {\n-                throw error1\n-            }, true)\n-            browser.overwriteCommand('waitForDisplayed', async function () {\n-                await browser.$('#foo')\n-                throw error2\n-            }, true)\n-            const elem = await browser.$('#foo')\n+            test('should propagate element commands for all prototypes', async () => {\n+                const browser = await remote(remoteConfig)\n+                browser.overwriteCommand('getAttribute', customElementCommand, isElementScope)\n+                const elems = await browser.$$('.someRandomElement')\n+\n+                // @ts-expect-error command overwritten\n+                expect(await elems[0].getAttribute('0', 'q')).toBe('0-value 0 q')\n+                // @ts-expect-error command overwritten\n+                expect(await elems[1].getAttribute('1', 'w')).toBe('1-value 1 w')\n+                // @ts-expect-error command overwritten\n+                expect(await elems[2].getAttribute('2', 'e')).toBe('2-value 2 e')\n+            })\n+\n+            test('should propagate element commands to sub elements', async () => {\n+                const browser = await remote(remoteConfig)\n+                browser.overwriteCommand('getAttribute', customElementCommand, isElementScope)\n+                const elem = await browser.$('#foo')\n+                const subElem = await elem.$('.subElem')\n+\n+                // @ts-expect-error command overwritten\n+                expect(await subElem.getAttribute('bar', 'foo')).toBe('bar-value bar foo')\n+            })\n+\n+            test('should be able to overwrite element command', async () => {\n+                const browser = await remote(remoteConfig)\n+                browser.overwriteCommand('getAttribute', customElementCommand, isElementScope)\n+                const elem = await browser.$('#foo')\n+\n+                // @ts-expect-error command overwritten\n+                expect(await elem.getAttribute('foo', 'bar')).toBe('foo-value foo bar')\n+            })\n+\n+            test('should properly throw exceptions on the element scope', async () => {\n+                const browser = await remote(remoteConfig)\n+                browser.overwriteCommand('click', function () {\n+                    throw error1\n+                }, isElementScope)\n+                browser.overwriteCommand('waitForDisplayed', async function () {\n+                    await browser.$('#foo')\n+                    throw error2\n+                }, isElementScope)\n+                const elem = await browser.$('#foo')\n+\n+                await expect(() => elem.click()).rejects.toThrow(error1)\n+                await expect(elem.waitForDisplayed()).rejects.toThrow(error2)\n+            })\n+\n+            test('should resolve the return of the original command function type properly', async () => {\n+\n+                const browser = await remote(remoteConfig)\n \n-            await expect(() => elem.click()).rejects.toThrow(error1)\n-            await expect(elem.waitForDisplayed()).rejects.toThrow(error2)\n+                browser.overwriteCommand(\n+                    'getText',\n+                    async function (originalFunction /* Expecting return a Promise<string> */) {\n+\n+                        const text: string = await originalFunction()\n+                        return text + ' - overwritten'\n+                    },\n+                    isElementScope,\n+                )\n+\n+                const element = await browser.$('.someRandomElement')\n+                vi.spyOn(element, 'getElementText').mockResolvedValue('some text')\n+\n+                expect(await element.getText()).toBe('some text - overwritten')\n+            })\n+\n+            test('should resolve the parameters of the original command function type properly', async () => {\n+                const browser = await remote(remoteConfig)\n+                let origFunction\n+                browser.overwriteCommand(\n+                    'click',\n+                    async function (originalFunction /* Expecting the type to be (options: Partial<ClickOptions>) => Promise<void> */) {\n+                        origFunction = originalFunction\n+                        expectTypeOf<Parameters<typeof originalFunction>[0]>().toEqualTypeOf<Partial<ClickOptions> | undefined>()\n+\n+                        const clickOptions: Partial<ClickOptions> = { skipRelease: true }\n+                        return originalFunction(clickOptions)\n+                    },\n+                    isElementScope,\n+                )\n+\n+                const element = await browser.$('.someRandomElement')\n+\n+                await expect(element.click()).resolves.toBeUndefined()\n+                expect(origFunction).toBeDefined()\n+            })\n+\n+            test('should resolve the this parameters type by inference automatically', async () => {\n+                const browser = await remote(remoteConfig)\n+                browser.overwriteCommand(\n+                    'click',\n+                    async function (this /* Expect to be WebdriverIO.Element */ ) {\n+                        return this.getText()\n+                    },\n+                    isElementScope,\n+                )\n+\n+                const element = await browser.$('.someRandomElement')\n+                vi.spyOn(element, 'getText')\n+                vi.spyOn(element, 'getElementText').mockResolvedValue('some text')\n+\n+                expect(await element.click()).toBe('some text')\n+                expect(element.getText).toHaveBeenCalledTimes(1)\n+            })\n+\n+            test('should get a ts error error when trying to overwrite an non-existing command', async () => {\n+                const browser = await remote(remoteConfig)\n+\n+                browser.overwriteCommand(\n+                    // @ts-expect-error cannot overwrite non-existing command\n+                    'press',\n+                    async function () {},\n+                    isElementScope)\n+            })\n         })\n     })\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14546",
    "pr_id": 14546,
    "issue_id": 1836,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "waitForVisible on MAC uses ES6 and causes strange failures \n## The problem\r\n\r\nMy tests fail with timeout when I try to waitForVisible on MAC but waitForExist works fine.\r\n\r\n## Environment\r\n\r\n* WebdriverIO version: 4.6.1\r\n* Node.js version: v6.9.1\r\n* [Standalone mode or wdio testrunner](http://webdriver.io/guide/getstarted/modes.html): WDIO\r\n* if wdio testrunner, running synchronous or asynchronous tests: synchronous\r\n* Additional wdio packages used (if applicable): \r\n\r\n    \"wdio-allure-reporter\": \"^0.1.2\",\r\n    \"wdio-mocha-framework\": \"^0.5.8\",\r\n    \"wdio-selenium-standalone-service\": \"0.0.7\",\r\n    \"webdriverio\": \"^4.6.1\"\r\n\r\n\r\n## Details\r\n\r\n Unfortunately the company uses MAC as default dev environment. What I noticed is same test and setup works just fine at home on my WINDOWS machine. After some digging I noticed that the waitForVisible.js on MAC is using ES6 syntax, and the one on WINDOWS is not. waitForExists works fine as it is not using ES6 syntax on both OS`s.\r\n\r\n## Link to Selenium/WebdriverIO logs\r\n```\r\n[17:58:28]  INFO\tWait for Dashboard to load\r\nF\r\n\r\n0 passing (48.30s)\r\n1 failing\r\n\r\n1) New register creation -  Insurance register creation:\r\nTimeout of 30000ms exceeded. Try to reduce the run time or increase your timeout for test specs (http://webdriver.io/guide/testrunner/timeouts.html); if returning a Promise, ensure it resolves.\r\n```\r\n\r\n## Code To Reproduce Issue [ Good To Have ]\r\n\r\nJust use a waitForVisible with no ES6 support .\r\n\r\nThe content of waitForVisible.js - \r\n```js\r\nimport { WaitUntilTimeoutError, isTimeoutError } from '../utils/ErrorHandler'\r\n\r\n\r\nreturn this.waitUntil(() => {\r\n        return this.isVisible(selector).then((isVisible) => {\r\n            if (!Array.isArray(isVisible)) {\r\n                return isVisible !== reverse\r\n            }\r\n\r\n            let result = reverse\r\n            for (let val of isVisible) {\r\n                if (!reverse) {\r\n                    result = result || val\r\n                } else {\r\n                    result = result && val\r\n                }\r\n            }\r\n\r\n            return result !== reverse\r\n        })\r\n    }, ms).catch((e) => {\r\n        selector = selector || this.lastResult.selector\r\n```\r\nAs I do not use babel lib this code is red in Webstorm :)",
    "issue_word_count": 296,
    "test_files_count": 2,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "__mocks__/expect-webdriverio.ts",
      "e2e/browser-runner/react.test.tsx",
      "packages/wdio-config/src/constants.ts",
      "packages/wdio-runner/package.json",
      "packages/wdio-runner/src/index.ts",
      "packages/wdio-runner/tests/index.test.ts",
      "packages/wdio-types/src/Options.ts",
      "pnpm-lock.yaml",
      "website/docs/Assertion.md",
      "website/docs/Configuration.md"
    ],
    "pr_changed_test_files": [
      "e2e/browser-runner/react.test.tsx",
      "packages/wdio-runner/tests/index.test.ts"
    ],
    "base_commit": "5d47023f08cbf977b806e788a06cd72c85670835",
    "head_commit": "c4324c08785ba21848f983133e93e432a6396745",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14546",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14546",
    "dockerfile": "",
    "pr_merged_at": "2025-06-11T22:16:37.000Z",
    "patch": "diff --git a/__mocks__/expect-webdriverio.ts b/__mocks__/expect-webdriverio.ts\nindex 5b60f1afafe..362f85a7b7b 100644\n--- a/__mocks__/expect-webdriverio.ts\n+++ b/__mocks__/expect-webdriverio.ts\n@@ -3,4 +3,5 @@ process.env.WDIO_ASSERTION_LIB_ACTIVATED = '1'\n const setOptions = vi.fn()\n const expect = vi.fn()\n const matchers = new Map()\n-export { setOptions, expect, matchers }\n+const SoftAssertionService = vi.fn()\n+export { setOptions, expect, matchers, SoftAssertionService }\n\ndiff --git a/packages/wdio-config/src/constants.ts b/packages/wdio-config/src/constants.ts\nindex ee66266ddcc..8775ccb7bb1 100644\n--- a/packages/wdio-config/src/constants.ts\n+++ b/packages/wdio-config/src/constants.ts\n@@ -35,6 +35,7 @@ export const DEFAULT_CONFIGS: () => WebdriverIO.Config = () => ({\n     specFileRetries: 0,\n     specFileRetriesDelay: 0,\n     specFileRetriesDeferred: false,\n+    autoAssertOnTestEnd: true,\n     reporterSyncInterval: 100,\n     reporterSyncTimeout: 5000,\n     cucumberFeaturesWithLineNumbers: [],\n\ndiff --git a/packages/wdio-runner/package.json b/packages/wdio-runner/package.json\nindex 8d2921176f1..ab4e85816c5 100644\n--- a/packages/wdio-runner/package.json\n+++ b/packages/wdio-runner/package.json\n@@ -39,7 +39,7 @@\n     \"@wdio/types\": \"workspace:*\",\n     \"@wdio/utils\": \"workspace:*\",\n     \"deepmerge-ts\": \"^7.0.3\",\n-    \"expect-webdriverio\": \"^5.1.0\",\n+    \"expect-webdriverio\": \"^5.3.0\",\n     \"webdriver\": \"workspace:*\",\n     \"webdriverio\": \"workspace:*\"\n   },\n\ndiff --git a/packages/wdio-runner/src/index.ts b/packages/wdio-runner/src/index.ts\nindex a3b15c5ba69..ca9949bdcab 100644\n--- a/packages/wdio-runner/src/index.ts\n+++ b/packages/wdio-runner/src/index.ts\n@@ -5,7 +5,7 @@ import logger from '@wdio/logger'\n import { initializeWorkerService, initializePlugin, executeHooksWithArgs } from '@wdio/utils'\n import { ConfigParser } from '@wdio/config/node'\n import { _setGlobal } from '@wdio/globals'\n-import { expect, setOptions, SnapshotService } from 'expect-webdriverio'\n+import { expect, setOptions, SnapshotService, SoftAssertionService } from 'expect-webdriverio'\n import { attach } from 'webdriverio'\n import type { Selector } from 'webdriverio'\n import type { Options, Capabilities } from '@wdio/types'\n@@ -75,11 +75,16 @@ export default class Runner extends EventEmitter {\n         /**\n          * add built-in services\n          */\n+        const softAssertionService = new SoftAssertionService({\n+            autoAssertOnTestEnd: this._config.autoAssertOnTestEnd || true\n+        }, this._caps, this._config)\n+\n         const snapshotService = SnapshotService.initiate({\n             updateState: this._config.updateSnapshots,\n             resolveSnapshotPath: this._config.resolveSnapshotPath\n         })\n         // ToDo(Christian): resolve type incompatibility between v8 and v9\n+        this._configParser.addService(softAssertionService as any)\n         this._configParser.addService(snapshotService as any)\n \n         this._caps = this._isMultiremote\n\ndiff --git a/packages/wdio-types/src/Options.ts b/packages/wdio-types/src/Options.ts\nindex 1b2a18ad2b7..1dcea085b7a 100644\n--- a/packages/wdio-types/src/Options.ts\n+++ b/packages/wdio-types/src/Options.ts\n@@ -246,6 +246,11 @@ export interface Testrunner extends Hooks, WebdriverIO, WebdriverIO.HookFunction\n      * @default __snapshots__ stores snapshot files in __snapshots__ directory next to the test file.\n      */\n     resolveSnapshotPath?: (testPath: string, snapExtension: string) => string\n+    /**\n+     * If set to true, soft assertions will be automatically asserted at the end of each test.\n+     * @default true\n+     */\n+    autoAssertOnTestEnd?: boolean\n     /**\n      * The number of retry attempts for an entire specfile when it fails as a whole.\n      */\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex e8171570924..4a03920cfbc 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -1197,8 +1197,8 @@ importers:\n         specifier: ^7.0.3\n         version: 7.1.5\n       expect-webdriverio:\n-        specifier: ^5.1.0\n-        version: 5.1.0(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio)\n+        specifier: ^5.3.0\n+        version: 5.3.0(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio)\n       webdriver:\n         specifier: workspace:*\n         version: link:../webdriver\n@@ -5492,9 +5492,6 @@ packages:\n   '@types/react@19.0.2':\n     resolution: {integrity: sha512-USU8ZI/xyKJwFTpjSVIrSeHBVAGagkHQKPNbxeWwql/vDmnTIBgx+TJnhFnj1NXgz8XfprU0egV2dROLGpsBEg==}\n \n-  '@types/react@19.1.0':\n-    resolution: {integrity: sha512-UaicktuQI+9UKyA4njtDOGBD/67t8YEBt2xdfqu8+gP9hqPUPsiXlNPcpS2gVdjmis5GKPG3fCxbQLVgxsQZ8w==}\n-\n   '@types/react@19.1.6':\n     resolution: {integrity: sha512-JeG0rEWak0N6Itr6QUx+X60uQmN+5t3j9r/OVDtWzFXKaj6kD1BwJzOksD0FF6iWxZlbE1kB0q9vtnU2ekqa1Q==}\n \n@@ -5714,6 +5711,9 @@ packages:\n   '@vitest/pretty-format@2.1.9':\n     resolution: {integrity: sha512-KhRIdGV2U9HOUzxfiHmY8IFHTdqtOhIzCpd8WRdJiE7D/HUcZVD0EgQCVjm+Q9gkUXWgBvMmTtZgIG48wq7sOQ==}\n \n+  '@vitest/pretty-format@3.2.2':\n+    resolution: {integrity: sha512-FY4o4U1UDhO9KMd2Wee5vumwcaHw7Vg4V7yR4Oq6uK34nhEJOmdRYrk3ClburPRUA09lXD/oXWZ8y/Sdma0aUQ==}\n+\n   '@vitest/runner@2.1.9':\n     resolution: {integrity: sha512-ZXSSqTFIrzduD63btIfEyOmNcBmQvgOVsPNPe0jYtESiXkhd8u2erDLnMxmGrDCwHCCHE7hxwRDCT3pt0esT4g==}\n \n@@ -5723,6 +5723,9 @@ packages:\n   '@vitest/snapshot@2.1.9':\n     resolution: {integrity: sha512-oBO82rEjsxLNJincVhLhaxxZdEtV0EFHMK5Kmx5sJ6H9L183dHECjiefOAdnqpIgT5eZwT04PoggUnW88vOBNQ==}\n \n+  '@vitest/snapshot@3.2.2':\n+    resolution: {integrity: sha512-aMEI2XFlR1aNECbBs5C5IZopfi5Lb8QJZGGpzS8ZUHML5La5wCbrbhLOVSME68qwpT05ROEEOAZPRXFpxZV2wA==}\n+\n   '@vitest/spy@2.1.8':\n     resolution: {integrity: sha512-5swjf2q95gXeYPevtW0BLk6H8+bPlMb4Vw/9Em4hFxDcaOxS+e0LOX4yqNxoHzMR2akEB2xfpnWUzkZokmgWDg==}\n \n@@ -6653,10 +6656,6 @@ packages:\n     resolution: {integrity: sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==}\n     engines: {node: '>=8'}\n \n-  ci-info@4.1.0:\n-    resolution: {integrity: sha512-HutrvTNsF48wnxkzERIXOe5/mlcfFcbfCmwcg6CJnizbSue78AbDt+1cgl26zwn61WFxhcPykPfZrbqjGmBb4A==}\n-    engines: {node: '>=8'}\n-\n   ci-info@4.2.0:\n     resolution: {integrity: sha512-cYY9mypksY8NRqgDB1XD1RiJL338v/551niynFTGkZOO2LHuB2OmOYxDIe/ttN9AHwrqdum1360G3ald0W9kCg==}\n     engines: {node: '>=8'}\n@@ -8062,6 +8061,14 @@ packages:\n       '@wdio/logger': ^9.0.0\n       webdriverio: ^9.0.0\n \n+  expect-webdriverio@5.3.0:\n+    resolution: {integrity: sha512-EUiibBYXWzSn9mJFuF914yeKUxvRxrhR9nImfe0YttG+wVg0v5jY1DPPnRz8sE0wlmoLHyLr155b5/d1+oZmxg==}\n+    engines: {node: '>=18 || >=20 || >=22'}\n+    peerDependencies:\n+      '@wdio/globals': ^9.0.0\n+      '@wdio/logger': ^9.0.0\n+      webdriverio: ^9.0.0\n+\n   expect@29.7.0:\n     resolution: {integrity: sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==}\n     engines: {node: ^14.15.0 || ^16.10.0 || >=18.0.0}\n@@ -10963,6 +10970,9 @@ packages:\n   pathe@2.0.2:\n     resolution: {integrity: sha512-15Ztpk+nov8DR524R4BF7uEuzESgzUEAV4Ah7CUMNGXdE5ELuvxElxGXndBl32vMSsWa1jpNf22Z+Er3sKwq+w==}\n \n+  pathe@2.0.3:\n+    resolution: {integrity: sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==}\n+\n   pathval@2.0.0:\n     resolution: {integrity: sha512-vE7JKRyES09KiunauX7nd2Q9/L7lhok4smP9RZTDeD4MVs72Dp2qNFVz39Nz5a0FVEW0BJR6C0DYrq6unoziZA==}\n     engines: {node: '>= 14.16'}\n@@ -12942,6 +12952,10 @@ packages:\n     resolution: {integrity: sha512-weEDEq7Z5eTHPDh4xjX789+fHfF+P8boiFB+0vbWzpbnbsEr/GRaohi/uMKxg8RZMXnl1ItAi/IUHWMsjDV7kQ==}\n     engines: {node: '>=14.0.0'}\n \n+  tinyrainbow@2.0.0:\n+    resolution: {integrity: sha512-op4nsTR47R6p0vMUUoYl/a+ljLFVtlfaXkLQmqfLR1qHma1h/ysYk4hEXZ880bf2CYgTskvTa/e196Vd5dDQXw==}\n+    engines: {node: '>=14.0.0'}\n+\n   tinyspy@3.0.2:\n     resolution: {integrity: sha512-n1cw8k1k0x4pgA2+9XrOkFydTerNcJ1zWCO5Nn9scWHTD+5tp8dghT2x1uduQePZTZgd3Tupf+x9BxJjeJi77Q==}\n     engines: {node: '>=14.0.0'}\n@@ -14760,7 +14774,7 @@ snapshots:\n \n   '@babel/code-frame@7.26.2':\n     dependencies:\n-      '@babel/helper-validator-identifier': 7.25.9\n+      '@babel/helper-validator-identifier': 7.27.1\n       js-tokens: 4.0.0\n       picocolors: 1.1.1\n \n@@ -14858,7 +14872,7 @@ snapshots:\n     dependencies:\n       '@babel/core': 7.26.8\n       '@babel/helper-module-imports': 7.25.9\n-      '@babel/helper-validator-identifier': 7.25.9\n+      '@babel/helper-validator-identifier': 7.27.1\n       '@babel/traverse': 7.26.8\n     transitivePeerDependencies:\n       - supports-color\n@@ -15163,7 +15177,7 @@ snapshots:\n       '@babel/core': 7.26.8\n       '@babel/helper-module-transforms': 7.26.0(@babel/core@7.26.8)\n       '@babel/helper-plugin-utils': 7.25.9\n-      '@babel/helper-validator-identifier': 7.25.9\n+      '@babel/helper-validator-identifier': 7.27.1\n       '@babel/traverse': 7.26.8\n     transitivePeerDependencies:\n       - supports-color\n@@ -15537,17 +15551,17 @@ snapshots:\n   '@babel/types@7.26.3':\n     dependencies:\n       '@babel/helper-string-parser': 7.25.9\n-      '@babel/helper-validator-identifier': 7.25.9\n+      '@babel/helper-validator-identifier': 7.27.1\n \n   '@babel/types@7.26.7':\n     dependencies:\n       '@babel/helper-string-parser': 7.25.9\n-      '@babel/helper-validator-identifier': 7.25.9\n+      '@babel/helper-validator-identifier': 7.27.1\n \n   '@babel/types@7.26.8':\n     dependencies:\n       '@babel/helper-string-parser': 7.25.9\n-      '@babel/helper-validator-identifier': 7.25.9\n+      '@babel/helper-validator-identifier': 7.27.1\n \n   '@babel/types@7.27.3':\n     dependencies:\n@@ -19071,16 +19085,12 @@ snapshots:\n   '@types/react-router@5.1.20':\n     dependencies:\n       '@types/history': 4.7.11\n-      '@types/react': 19.1.0\n+      '@types/react': 19.1.6\n \n   '@types/react@19.0.2':\n     dependencies:\n       csstype: 3.1.3\n \n-  '@types/react@19.1.0':\n-    dependencies:\n-      csstype: 3.1.3\n-\n   '@types/react@19.1.6':\n     dependencies:\n       csstype: 3.1.3\n@@ -19364,6 +19374,10 @@ snapshots:\n     dependencies:\n       tinyrainbow: 1.2.0\n \n+  '@vitest/pretty-format@3.2.2':\n+    dependencies:\n+      tinyrainbow: 2.0.0\n+\n   '@vitest/runner@2.1.9':\n     dependencies:\n       '@vitest/utils': 2.1.9\n@@ -19381,6 +19395,12 @@ snapshots:\n       magic-string: 0.30.17\n       pathe: 1.1.2\n \n+  '@vitest/snapshot@3.2.2':\n+    dependencies:\n+      '@vitest/pretty-format': 3.2.2\n+      magic-string: 0.30.17\n+      pathe: 2.0.3\n+\n   '@vitest/spy@2.1.8':\n     dependencies:\n       tinyspy: 3.0.2\n@@ -19589,7 +19609,7 @@ snapshots:\n \n   '@wdio/globals@9.15.0(@wdio/logger@9.15.0)(puppeteer-core@23.11.1)':\n     optionalDependencies:\n-      expect-webdriverio: 5.1.0(@wdio/globals@9.15.0(@wdio/logger@9.15.0)(puppeteer-core@23.11.1))(@wdio/logger@9.15.0)(webdriverio@9.15.0(puppeteer-core@23.11.1))\n+      expect-webdriverio: 5.3.0(@wdio/globals@9.15.0(@wdio/logger@9.15.0)(puppeteer-core@23.11.1))(@wdio/logger@9.15.0)(webdriverio@9.15.0(puppeteer-core@23.11.1))\n       webdriverio: 9.15.0(puppeteer-core@23.11.1)\n     transitivePeerDependencies:\n       - '@wdio/logger'\n@@ -19601,7 +19621,7 @@ snapshots:\n \n   '@wdio/globals@9.4.3(@wdio/logger@9.1.3)(puppeteer-core@23.11.1)':\n     optionalDependencies:\n-      expect-webdriverio: 5.1.0(@wdio/globals@9.4.3(@wdio/logger@9.1.3)(puppeteer-core@23.11.1))(@wdio/logger@9.1.3)(webdriverio@9.4.3(puppeteer-core@23.11.1))\n+      expect-webdriverio: 5.3.0(@wdio/globals@9.4.3(@wdio/logger@9.1.3)(puppeteer-core@23.11.1))(@wdio/logger@9.1.3)(webdriverio@9.4.3(puppeteer-core@23.11.1))\n       webdriverio: 9.4.3(puppeteer-core@23.11.1)\n     transitivePeerDependencies:\n       - '@wdio/logger'\n@@ -20662,8 +20682,6 @@ snapshots:\n \n   ci-info@3.9.0: {}\n \n-  ci-info@4.1.0: {}\n-\n   ci-info@4.2.0: {}\n \n   citty@0.1.6:\n@@ -22267,17 +22285,6 @@ snapshots:\n       webdriverio: link:packages/webdriverio\n     optional: true\n \n-  expect-webdriverio@5.1.0(@wdio/globals@9.4.3(@wdio/logger@9.1.3)(puppeteer-core@23.11.1))(@wdio/logger@9.1.3)(webdriverio@9.4.3(puppeteer-core@23.11.1)):\n-    dependencies:\n-      '@vitest/snapshot': 2.1.9\n-      '@wdio/globals': 9.4.3(@wdio/logger@9.1.3)(puppeteer-core@23.11.1)\n-      '@wdio/logger': 9.1.3\n-      expect: 29.7.0\n-      jest-matcher-utils: 29.7.0\n-      lodash.isequal: 4.5.0\n-      webdriverio: 9.4.3(puppeteer-core@23.11.1)\n-    optional: true\n-\n   expect-webdriverio@5.1.0(@wdio/globals@packages+wdio-globals)(@wdio/logger@9.15.0)(webdriverio@packages+webdriverio):\n     dependencies:\n       '@vitest/snapshot': 2.1.9\n@@ -22308,6 +22315,38 @@ snapshots:\n       lodash.isequal: 4.5.0\n       webdriverio: link:packages/webdriverio\n \n+  expect-webdriverio@5.3.0(@wdio/globals@9.15.0(@wdio/logger@9.15.0)(puppeteer-core@23.11.1))(@wdio/logger@9.15.0)(webdriverio@9.15.0(puppeteer-core@23.11.1)):\n+    dependencies:\n+      '@vitest/snapshot': 3.2.2\n+      '@wdio/globals': 9.15.0(@wdio/logger@9.15.0)(puppeteer-core@23.11.1)\n+      '@wdio/logger': 9.15.0\n+      expect: 29.7.0\n+      jest-matcher-utils: 29.7.0\n+      lodash.isequal: 4.5.0\n+      webdriverio: 9.15.0(puppeteer-core@23.11.1)\n+    optional: true\n+\n+  expect-webdriverio@5.3.0(@wdio/globals@9.4.3(@wdio/logger@9.1.3)(puppeteer-core@23.11.1))(@wdio/logger@9.1.3)(webdriverio@9.4.3(puppeteer-core@23.11.1)):\n+    dependencies:\n+      '@vitest/snapshot': 3.2.2\n+      '@wdio/globals': 9.4.3(@wdio/logger@9.1.3)(puppeteer-core@23.11.1)\n+      '@wdio/logger': 9.1.3\n+      expect: 29.7.0\n+      jest-matcher-utils: 29.7.0\n+      lodash.isequal: 4.5.0\n+      webdriverio: 9.4.3(puppeteer-core@23.11.1)\n+    optional: true\n+\n+  expect-webdriverio@5.3.0(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio):\n+    dependencies:\n+      '@vitest/snapshot': 3.2.2\n+      '@wdio/globals': link:packages/wdio-globals\n+      '@wdio/logger': link:packages/wdio-logger\n+      expect: 29.7.0\n+      jest-matcher-utils: 29.7.0\n+      lodash.isequal: 4.5.0\n+      webdriverio: link:packages/webdriverio\n+\n   expect@29.7.0:\n     dependencies:\n       '@jest/expect-utils': 29.7.0\n@@ -23929,7 +23968,7 @@ snapshots:\n       '@jest/types': 30.0.0-alpha.7\n       '@types/node': 20.17.57\n       chalk: 4.1.2\n-      ci-info: 4.1.0\n+      ci-info: 4.2.0\n       graceful-fs: 4.2.11\n       picomatch: 4.0.2\n \n@@ -24239,7 +24278,7 @@ snapshots:\n \n   libnpmpublish@9.0.9:\n     dependencies:\n-      ci-info: 4.1.0\n+      ci-info: 4.2.0\n       normalize-package-data: 6.0.2\n       npm-package-arg: 11.0.2\n       npm-registry-fetch: 17.1.0\n@@ -25999,6 +26038,8 @@ snapshots:\n \n   pathe@2.0.2: {}\n \n+  pathe@2.0.3: {}\n+\n   pathval@2.0.0: {}\n \n   pause-stream@0.0.11:\n@@ -28339,6 +28380,8 @@ snapshots:\n \n   tinyrainbow@1.2.0: {}\n \n+  tinyrainbow@2.0.0: {}\n+\n   tinyspy@3.0.2: {}\n \n   tldts-core@6.1.68: {}\n\ndiff --git a/website/docs/Assertion.md b/website/docs/Assertion.md\nindex 7f42b081074..9f8d842e736 100644\n--- a/website/docs/Assertion.md\n+++ b/website/docs/Assertion.md\n@@ -21,6 +21,21 @@ await expect(selectOptions).toHaveChildren({ gte: 1 })\n \n For the full list, see the [expect API doc](/docs/api/expect-webdriverio).\n \n+## Soft Assertions\n+\n+WebdriverIO includes soft assertions by default from expect-webdriver(5.2.0). Soft assertions allow your tests to continue execution even when an assertion fails. All failures are collected and reported at the end of the test.\n+\n+### Usage\n+\n+```js\n+// These won't throw immediately if they fail\n+await expect.soft(await $('h1').getText()).toEqual('Basketball Shoes');\n+await expect.soft(await $('#price').getText()).toMatch(/€\\d+/);\n+\n+// Regular assertions still throw immediately\n+await expect(await $('.add-to-cart').isClickable()).toBe(true);\n+```\n+\n ## Migrating from Chai\n \n [Chai](https://www.chaijs.com/) and [expect-webdriverio](https://github.com/webdriverio/expect-webdriverio#readme) can coexist, and with some minor adjustments a smooth transition to expect-webdriverio can be achieved. If you've upgraded to WebdriverIO v6 then by default you will have access to all the assertions from `expect-webdriverio` out of the box. This means that globally wherever you use `expect` you would call an `expect-webdriverio` assertion. That is, unless you you set [`injectGlobals`](/docs/configuration#injectglobals) to `false` or have explicitly overridden the global `expect` to use Chai. In this case you would not have access to any of the expect-webdriverio assertions without explicitly importing the expect-webdriverio package where you need it.\n\ndiff --git a/website/docs/Configuration.md b/website/docs/Configuration.md\nindex 29b0760bd4e..2e83d9f47e7 100644\n--- a/website/docs/Configuration.md\n+++ b/website/docs/Configuration.md\n@@ -424,6 +424,13 @@ By default, it is set to `false` so logs are printed in real-time.\n Type: `Boolean`<br />\n Default: `false`\n \n+### autoAssertOnTestEnd\n+\n+Controls whether WebdriverIO automatically asserts all soft assertions at the end of each test. When set to `true`, any accumulated soft assertions will be automatically checked and cause the test to fail if any assertions failed. When set to `false`, you must manually call the assert method to check soft assertions.\n+\n+Type: `Boolean`<br />\n+Default: `true`\n+\n ### services\n \n Services take over a specific job you don't want to take care of. They enhance your test setup with almost no effort.\n",
    "test_patch": "diff --git a/e2e/browser-runner/react.test.tsx b/e2e/browser-runner/react.test.tsx\nindex 07086e06cf2..630c93c347d 100644\n--- a/e2e/browser-runner/react.test.tsx\n+++ b/e2e/browser-runner/react.test.tsx\n@@ -21,9 +21,9 @@ describe('React Component Testing', () => {\n         const { container } = render(<App />)\n         await expect(container).toMatchSnapshot()\n         await expect(container).toMatchInlineSnapshot(`\n-          \"<div>\n-            <button>Current theme: light</button>\n-          </div>\"\n-        `)\n+\"<div>\n+  <button>Current theme: light</button>\n+</div>\"\n+`)\n     })\n })\n\ndiff --git a/packages/wdio-runner/tests/index.test.ts b/packages/wdio-runner/tests/index.test.ts\nindex 23d4467c223..bf7105e31ec 100644\n--- a/packages/wdio-runner/tests/index.test.ts\n+++ b/packages/wdio-runner/tests/index.test.ts\n@@ -6,7 +6,7 @@ import { executeHooksWithArgs } from '@wdio/utils'\n import { ConfigParser } from '@wdio/config/node'\n import { attach } from 'webdriverio'\n import { _setGlobal } from '@wdio/globals'\n-import { setOptions, SnapshotService } from 'expect-webdriverio'\n+import { setOptions, SnapshotService, SoftAssertionService } from 'expect-webdriverio'\n \n import WDIORunner from '../src/index.js'\n \n@@ -18,6 +18,7 @@ vi.mock('util')\n vi.mock('expect-webdriverio', () => ({\n     setOptions: vi.fn(),\n     expect: vi.fn(),\n+    SoftAssertionService: vi.fn(),\n     SnapshotService: {\n         initiate: vi.fn().mockReturnValue({\n             results: ['foobar']\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14531",
    "pr_id": 14531,
    "issue_id": 14529,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Inconsistent behaviour when using isAndroid with Browserstack\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.14.0\n\n### Node.js Version\n\n20.8.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\ncapabilities: [\n    {\n      \"bstack:options\": {\n        osVersion: '15.0',\n        deviceName: 'Samsung Galaxy S25',\n        realMobile: 'true',\n        appiumVersion: '2.4.1',\n        projectName: \"ProjectName\",\n        buildName: \"BuildName + \" + new Date().toISOString(),\n        sessionName: \"SessionName\",\n        seleniumVersion: \"4.20.0\",\n        debug: \"true\",\n        networkLogs: \"true\",\n        consoleLogs: \"verbose\",\n      },\n    browserName: 'chrome',\n\n    } as Capabilities.BrowserStackCapabilities,\n  ],\n```\n\n### What happened?\n\n\n console.log('before the test of the test: ', browser.isAndroid); // -> Returns false\n\n(browser.isAndroid ? it.skip : it)('A test that should not run on Android devices', async function () {\n        console.log('inside of the test: ', browser.isAndroid); // -> Returns true\n    });\n\nif `browsername `is set to `chrome`, `isAndroid `will return `false `in the first console log (the one outside of the test). If you remove `browserName` as a capability, the test will still run and the browser will default to chrome. If you set `browserName` to something completely irrelevant, e.g \"Galaxy\", the console log outside of the test will return `true`.\n\n### What is your expected behavior?\n\nIn my oppinion, `browserName` should always return `true` if the deviced used for executing the test is Android. The console log inside of the test appears to be working as expected, but a user should expect the same behaviour if `isAndroid `is used outside of a test (e.g as a condition to skip a test). \n\nI don't know if a user should be able to set `browserName` to anything other than the two valid browsers available at Browserstack (samsung & chrome) but that is in my oppinion a different topic. No matter what value `browserName `is set to, `isAndroid` should always return true is the tests are executed on an Android device. It should not matter if I try access it from inside of a test or outside of a test. \n\n### How to reproduce the bug.\n\nUse the snippet provided and add it to a spec-file: \n\nconsole.log('before the test of the test: ', browser.isAndroid); // -> Returns false\n\n(browser.isAndroid ? it.skip : it)('A test that should not run on Android devices', async function () {\n        console.log('inside of the test: ', browser.isAndroid); // -> Returns true\n });\n\nuse the following capabilities when running your test using Browserstack: \n\n  capabilities: [\n    {\n      \"bstack:options\": {\n        osVersion: '15.0',\n        deviceName: 'Samsung Galaxy S25',\n        realMobile: 'true',\n        appiumVersion: '2.4.1',\n        projectName: \"ProjectName\",\n        buildName: \"BuildName + \" + new Date().toISOString(),\n        sessionName: \"SessionName\",\n        seleniumVersion: \"4.20.0\",\n        debug: \"true\",\n        networkLogs: \"true\",\n        consoleLogs: \"verbose\",\n      },\n    browserName: 'chrome',\n\n    } as Capabilities.BrowserStackCapabilities,\n  ],\n\nAdjust the `browserName` value to \"galaxy\" instead of chrome and observe how the first console logs outputs `true` instead of `false` which in my oppinion is the expected behaviour. `browserName` when using an Android device should not determine whether isAndroid returns `true` or `false`\n\n### Relevant log output\n\n```typescript\n-\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 515,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-utils/src/envDetector.ts",
      "packages/wdio-utils/tests/envDetector.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-utils/tests/envDetector.test.ts"
    ],
    "base_commit": "4c44755fdbf1e7ffa342f3d6d393b9896cbfa3ac",
    "head_commit": "d63b7779c26a4e786ee3234e013708775e790e05",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14531",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14531",
    "dockerfile": "",
    "pr_merged_at": "2025-06-02T16:10:05.000Z",
    "patch": "diff --git a/packages/wdio-utils/src/envDetector.ts b/packages/wdio-utils/src/envDetector.ts\nindex b64d3ac8023..4dd50937b97 100644\n--- a/packages/wdio-utils/src/envDetector.ts\n+++ b/packages/wdio-utils/src/envDetector.ts\n@@ -203,6 +203,7 @@ function isAndroid(capabilities?: WebdriverIO.Capabilities) {\n         (capabilities.platformName && capabilities.platformName.match(/Android/i)) ||\n         (/Android/i.test(bsOptions.platformName || '')) ||\n         (/Android/i.test(bsOptions.browserName || '')) ||\n+        (/Samsung/i.test(bsOptions.deviceName || '')) ||\n         (capabilities.browserName && capabilities.browserName.match(/Android/i))\n     )\n }\n",
    "test_patch": "diff --git a/packages/wdio-utils/tests/envDetector.test.ts b/packages/wdio-utils/tests/envDetector.test.ts\nindex 48976ab3e7b..16e9516d67b 100644\n--- a/packages/wdio-utils/tests/envDetector.test.ts\n+++ b/packages/wdio-utils/tests/envDetector.test.ts\n@@ -201,6 +201,30 @@ describe('sessionEnvironmentDetector', () => {\n         expect(sessionEnvironmentDetector({ capabilities, requestedCapabilities }).isSauce).toBe(false)\n     })\n \n+    describe('isAndroid', () => {\n+        it('should detect Android device', () => {\n+            const capabilities: WebdriverIO.Capabilities = {\n+                'bstack:options': {\n+                    osVersion: '15.0',\n+                    deviceName: 'Samsung Galaxy S25',\n+                    realMobile: true,\n+                    appiumVersion: '2.4.1',\n+                    projectName: 'ProjectName',\n+                    buildName: 'BuildName + ' + new Date().toISOString(),\n+                    sessionName: 'SessionName',\n+                    seleniumVersion: '4.20.0',\n+                    debug: true,\n+                    networkLogs: true,\n+                    consoleLogs: 'verbose',\n+                },\n+                browserName: 'chrome',\n+            }\n+            const requestedCapabilities = { browserName: 'chrome' }\n+            const { isAndroid } = sessionEnvironmentDetector({ capabilities, requestedCapabilities })\n+            expect(isAndroid).toEqual(true)\n+        })\n+    })\n+\n     it('isSeleniumStandalone', () => {\n         const requestedCapabilities = { browserName: '' }\n         expect(sessionEnvironmentDetector({ capabilities: {}, requestedCapabilities: {} }).isSeleniumStandalone).toBe(false)\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14511",
    "pr_id": 14511,
    "issue_id": 10,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "Drag & Drop Support?\nHey Camme,\n\nCorrect me if I'm wrong... so webdriverjs uses JsonWireProtocol, which doesn't have drag/drop commands?\n\nThanks, :)\nQuang\n",
    "issue_word_count": 24,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "packages/wdio-local-runner/package.json",
      "packages/wdio-local-runner/src/run.ts",
      "packages/wdio-local-runner/tests/run.test.ts",
      "pnpm-lock.yaml"
    ],
    "pr_changed_test_files": [
      "packages/wdio-local-runner/tests/run.test.ts"
    ],
    "base_commit": "405284e2bd46a9d9026223156d62ecbc8cf893e3",
    "head_commit": "9bfc1fc5720391ed5f9285f5176f9267c4a8c7de",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14511",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14511",
    "dockerfile": "",
    "pr_merged_at": "2025-06-02T20:15:01.000Z",
    "patch": "diff --git a/packages/wdio-local-runner/package.json b/packages/wdio-local-runner/package.json\nindex 1378069823a..57341fcfe1b 100644\n--- a/packages/wdio-local-runner/package.json\n+++ b/packages/wdio-local-runner/package.json\n@@ -41,12 +41,11 @@\n     \"@wdio/repl\": \"workspace:*\",\n     \"@wdio/runner\": \"workspace:*\",\n     \"@wdio/types\": \"workspace:*\",\n-    \"async-exit-hook\": \"^2.0.1\",\n+    \"exit-hook\": \"^4.0.0\",\n     \"split2\": \"^4.1.0\",\n     \"stream-buffers\": \"^3.0.2\"\n   },\n   \"devDependencies\": {\n-    \"@types/async-exit-hook\": \"^2.0.0\",\n     \"@types/stream-buffers\": \"^3.0.4\"\n   },\n   \"publishConfig\": {\n\ndiff --git a/packages/wdio-local-runner/src/run.ts b/packages/wdio-local-runner/src/run.ts\nindex c8ee8aeb551..23bf47ec461 100644\n--- a/packages/wdio-local-runner/src/run.ts\n+++ b/packages/wdio-local-runner/src/run.ts\n@@ -1,4 +1,4 @@\n-import exitHook from 'async-exit-hook'\n+import exitHook from 'exit-hook'\n \n import Runner from '@wdio/runner'\n import logger from '@wdio/logger'\n@@ -59,13 +59,13 @@ process.on('message', (m: Workers.WorkerCommand) => {\n /**\n  * catch sigint messages as they are handled by main process\n  */\n-export const exitHookFn = (callback: () => void) => {\n-    if (!callback) {\n-        return\n-    }\n-\n+exitHook(() => {\n     runner.sigintWasCalled = true\n     log.info(`Received SIGINT, giving process ${SHUTDOWN_TIMEOUT}ms to shutdown gracefully`)\n-    setTimeout(callback, SHUTDOWN_TIMEOUT)\n-}\n-exitHook(exitHookFn)\n+\n+    return new Promise<void>((resolve) => {\n+        setTimeout(() => {\n+            resolve()\n+        }, SHUTDOWN_TIMEOUT)\n+    })\n+})\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex df5ae82ea85..e8171570924 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -320,7 +320,7 @@ importers:\n         version: 3.4.17\n       vite:\n         specifier: ^5.1.3\n-        version: 5.4.19(@types/node@22.15.29)(terser@5.37.0)\n+        version: 5.4.19(@types/node@20.17.57)(terser@5.37.0)\n       webdriver:\n         specifier: workspace:*\n         version: link:../packages/webdriver\n@@ -437,7 +437,7 @@ importers:\n         version: 10.0.10\n       '@vitejs/plugin-vue':\n         specifier: ^5.0.3\n-        version: 5.2.4(vite@5.4.19(@types/node@22.15.29)(terser@5.37.0))(vue@3.5.16(typescript@5.7.3))\n+        version: 5.2.4(vite@5.4.19(@types/node@20.17.57)(terser@5.37.0))(vue@3.5.16(typescript@5.7.3))\n       expect-webdriverio:\n         specifier: 5.1.0\n         version: 5.1.0(@wdio/globals@9.15.0(@wdio/logger@9.15.0)(puppeteer-core@23.11.1))(@wdio/logger@9.15.0)(webdriverio@9.15.0(puppeteer-core@23.11.1))\n@@ -449,7 +449,7 @@ importers:\n         version: 5.7.3\n       vite:\n         specifier: ^5.0.12\n-        version: 5.4.19(@types/node@22.15.29)(terser@5.37.0)\n+        version: 5.4.19(@types/node@20.17.57)(terser@5.37.0)\n       vue-tsc:\n         specifier: ^2.0.17\n         version: 2.2.10(typescript@5.7.3)\n@@ -617,13 +617,13 @@ importers:\n         version: 0.5.21\n       vite:\n         specifier: ^5.4.10\n-        version: 5.4.19(@types/node@22.15.29)(terser@5.37.0)\n+        version: 5.4.19(@types/node@20.17.57)(terser@5.37.0)\n       vite-plugin-istanbul:\n         specifier: ^6.0.0\n-        version: 6.0.2(vite@5.4.19(@types/node@22.15.29)(terser@5.37.0))\n+        version: 6.0.2(vite@5.4.19(@types/node@20.17.57)(terser@5.37.0))\n       vite-plugin-top-level-await:\n         specifier: ^1.4.1\n-        version: 1.4.4(rollup@4.40.1)(vite@5.4.19(@types/node@22.15.29)(terser@5.37.0))\n+        version: 1.4.4(rollup@4.40.1)(vite@5.4.19(@types/node@20.17.57)(terser@5.37.0))\n       webdriver:\n         specifier: workspace:*\n         version: link:../webdriver\n@@ -1078,9 +1078,9 @@ importers:\n       '@wdio/types':\n         specifier: workspace:*\n         version: link:../wdio-types\n-      async-exit-hook:\n-        specifier: ^2.0.1\n-        version: 2.0.1\n+      exit-hook:\n+        specifier: ^4.0.0\n+        version: 4.0.0\n       split2:\n         specifier: ^4.1.0\n         version: 4.2.0\n@@ -1088,9 +1088,6 @@ importers:\n         specifier: ^3.0.2\n         version: 3.0.3\n     devDependencies:\n-      '@types/async-exit-hook':\n-        specifier: ^2.0.0\n-        version: 2.0.2\n       '@types/stream-buffers':\n         specifier: ^3.0.4\n         version: 3.0.7\n@@ -8041,6 +8038,10 @@ packages:\n     resolution: {integrity: sha512-QFNnTvU3UjgWFy8Ef9iDHvIdcgZ344ebkwYx4/KLbR+CKQA4xBaHzv+iRpp86QfMHP8faFQLh8iOc57215y4Rg==}\n     engines: {node: ^18.19.0 || >=20.5.0}\n \n+  exit-hook@4.0.0:\n+    resolution: {integrity: sha512-Fqs7ChZm72y40wKjOFXBKg7nJZvQJmewP5/7LtePDdnah/+FH9Hp5sgMujSCMPXlxOAW2//1jrW9pnsY7o20vQ==}\n+    engines: {node: '>=18'}\n+\n   expand-template@2.0.3:\n     resolution: {integrity: sha512-XYfuKMvj4O35f/pOXLObndIRvyQ+/+6AhODh+OKWj9S9498pHHn/IMszH+gt0fBCRWMNfk1ZSp5x3AifmnI2vg==}\n     engines: {node: '>=6'}\n@@ -14781,7 +14782,7 @@ snapshots:\n       '@babel/types': 7.26.8\n       '@types/gensync': 1.0.4\n       convert-source-map: 2.0.0\n-      debug: 4.4.0(supports-color@8.1.1)\n+      debug: 4.4.1\n       gensync: 1.0.0-beta.2\n       json5: 2.2.3\n       semver: 6.3.1\n@@ -15528,7 +15529,7 @@ snapshots:\n       '@babel/parser': 7.26.8\n       '@babel/template': 7.26.8\n       '@babel/types': 7.26.8\n-      debug: 4.4.0(supports-color@8.1.1)\n+      debug: 4.4.1\n       globals: 11.12.0\n     transitivePeerDependencies:\n       - supports-color\n@@ -17896,7 +17897,7 @@ snapshots:\n \n   '@puppeteer/browsers@2.4.0':\n     dependencies:\n-      debug: 4.4.0(supports-color@8.1.1)\n+      debug: 4.4.1\n       extract-zip: 2.0.1\n       progress: 2.0.3\n       proxy-agent: 6.5.0\n@@ -19322,16 +19323,11 @@ snapshots:\n       vite: 5.4.19(@types/node@20.17.57)(terser@5.37.0)\n       vue: 3.5.16(typescript@5.7.3)\n \n-  '@vitejs/plugin-vue@5.2.4(vite@5.4.19(@types/node@22.15.29)(terser@5.37.0))(vue@3.5.16(typescript@5.7.3))':\n-    dependencies:\n-      vite: 5.4.19(@types/node@22.15.29)(terser@5.37.0)\n-      vue: 3.5.16(typescript@5.7.3)\n-\n   '@vitest/coverage-v8@2.1.8(vitest@2.1.9(@types/node@20.17.57)(jsdom@25.0.1)(terser@5.37.0))':\n     dependencies:\n       '@ampproject/remapping': 2.3.0\n       '@bcoe/v8-coverage': 0.2.3\n-      debug: 4.4.0(supports-color@8.1.1)\n+      debug: 4.4.1\n       istanbul-lib-coverage: 3.2.2\n       istanbul-lib-report: 3.0.1\n       istanbul-lib-source-maps: 5.0.6\n@@ -21462,7 +21458,7 @@ snapshots:\n   detect-port@1.6.1:\n     dependencies:\n       address: 1.2.2\n-      debug: 4.4.0(supports-color@8.1.1)\n+      debug: 4.4.1\n     transitivePeerDependencies:\n       - supports-color\n \n@@ -22240,6 +22236,8 @@ snapshots:\n       strip-final-newline: 4.0.0\n       yoctocolors: 2.1.1\n \n+  exit-hook@4.0.0: {}\n+\n   expand-template@2.0.3: {}\n \n   expand-tilde@2.0.2:\n@@ -22379,7 +22377,7 @@ snapshots:\n \n   extract-zip@2.0.1:\n     dependencies:\n-      debug: 4.4.0(supports-color@8.1.1)\n+      debug: 4.4.1\n       get-stream: 5.2.0\n       yauzl: 2.10.0\n     optionalDependencies:\n@@ -22754,7 +22752,7 @@ snapshots:\n     dependencies:\n       basic-ftp: 5.0.5\n       data-uri-to-buffer: 6.0.2\n-      debug: 4.4.0(supports-color@8.1.1)\n+      debug: 4.4.1\n     transitivePeerDependencies:\n       - supports-color\n \n@@ -24492,8 +24490,8 @@ snapshots:\n \n   magicast@0.3.5:\n     dependencies:\n-      '@babel/parser': 7.26.8\n-      '@babel/types': 7.26.8\n+      '@babel/parser': 7.27.4\n+      '@babel/types': 7.27.3\n       source-map-js: 1.2.1\n \n   make-dir@2.1.0:\n@@ -25793,7 +25791,7 @@ snapshots:\n     dependencies:\n       '@tootallnate/quickjs-emscripten': 0.23.0\n       agent-base: 7.1.3\n-      debug: 4.4.0(supports-color@8.1.1)\n+      debug: 4.4.1\n       get-uri: 6.0.4\n       http-proxy-agent: 7.0.2\n       https-proxy-agent: 7.0.6\n@@ -26670,7 +26668,7 @@ snapshots:\n   proxy-agent@6.5.0:\n     dependencies:\n       agent-base: 7.1.3\n-      debug: 4.4.0(supports-color@8.1.1)\n+      debug: 4.4.1\n       http-proxy-agent: 7.0.2\n       https-proxy-agent: 7.0.6\n       lru-cache: 7.18.3\n@@ -27743,7 +27741,7 @@ snapshots:\n   socks-proxy-agent@8.0.5:\n     dependencies:\n       agent-base: 7.1.3\n-      debug: 4.4.0(supports-color@8.1.1)\n+      debug: 4.4.1\n       socks: 2.8.4\n     transitivePeerDependencies:\n       - supports-color\n@@ -28881,7 +28879,7 @@ snapshots:\n       - supports-color\n       - terser\n \n-  vite-plugin-istanbul@6.0.2(vite@5.4.19(@types/node@22.15.29)(terser@5.37.0)):\n+  vite-plugin-istanbul@6.0.2(vite@5.4.19(@types/node@20.17.57)(terser@5.37.0)):\n     dependencies:\n       '@istanbuljs/load-nyc-config': 1.1.0\n       espree: 10.3.0\n@@ -28889,16 +28887,16 @@ snapshots:\n       picocolors: 1.1.1\n       source-map: 0.7.4\n       test-exclude: 6.0.0\n-      vite: 5.4.19(@types/node@22.15.29)(terser@5.37.0)\n+      vite: 5.4.19(@types/node@20.17.57)(terser@5.37.0)\n     transitivePeerDependencies:\n       - supports-color\n \n-  vite-plugin-top-level-await@1.4.4(rollup@4.40.1)(vite@5.4.19(@types/node@22.15.29)(terser@5.37.0)):\n+  vite-plugin-top-level-await@1.4.4(rollup@4.40.1)(vite@5.4.19(@types/node@20.17.57)(terser@5.37.0)):\n     dependencies:\n       '@rollup/plugin-virtual': 3.0.2(rollup@4.40.1)\n       '@swc/core': 1.10.1\n       uuid: 10.0.0\n-      vite: 5.4.19(@types/node@22.15.29)(terser@5.37.0)\n+      vite: 5.4.19(@types/node@20.17.57)(terser@5.37.0)\n     transitivePeerDependencies:\n       - '@swc/helpers'\n       - rollup\n@@ -28914,23 +28912,13 @@ snapshots:\n   vite@5.4.19(@types/node@20.17.57)(terser@5.37.0):\n     dependencies:\n       esbuild: 0.21.5\n-      postcss: 8.5.3\n+      postcss: 8.5.4\n       rollup: 4.40.1\n     optionalDependencies:\n       '@types/node': 20.17.57\n       fsevents: 2.3.3\n       terser: 5.37.0\n \n-  vite@5.4.19(@types/node@22.15.29)(terser@5.37.0):\n-    dependencies:\n-      esbuild: 0.21.5\n-      postcss: 8.5.3\n-      rollup: 4.40.1\n-    optionalDependencies:\n-      '@types/node': 22.15.29\n-      fsevents: 2.3.3\n-      terser: 5.37.0\n-\n   vitefu@0.2.5(vite@5.4.19(@types/node@20.17.57)(terser@5.37.0)):\n     optionalDependencies:\n       vite: 5.4.19(@types/node@20.17.57)(terser@5.37.0)\n",
    "test_patch": "diff --git a/packages/wdio-local-runner/tests/run.test.ts b/packages/wdio-local-runner/tests/run.test.ts\nindex d2421975cc8..9627bad850c 100644\n--- a/packages/wdio-local-runner/tests/run.test.ts\n+++ b/packages/wdio-local-runner/tests/run.test.ts\n@@ -1,5 +1,4 @@\n import path from 'node:path'\n-import exitHook from 'async-exit-hook'\n import { beforeAll, expect, test, afterAll, vi } from 'vitest'\n \n // @ts-ignore mock exports instances, package doesn't\n@@ -8,6 +7,16 @@ import { instances } from '@wdio/runner'\n vi.mock('@wdio/runner', () => import(path.join(process.cwd(), '__mocks__', '@wdio/runner')))\n vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdio/logger')))\n \n+let exitHookCallback: Function | undefined\n+const exitHookMock = vi.fn((callback: Function) => {\n+    exitHookCallback = callback\n+    return () => {} // return unsubscribe function\n+})\n+\n+vi.mock('exit-hook', () => ({\n+    default: exitHookMock\n+}))\n+\n vi.mock('../src/constants', () => ({\n     SHUTDOWN_TIMEOUT: 1\n }))\n@@ -15,7 +24,6 @@ vi.mock('../src/constants', () => ({\n const sleep = (ms = 100) => new Promise(\n     (resolve) => setTimeout(resolve, ms))\n \n-let exitHookFn: Function\n let runner: any\n const origExit = process.exit.bind(process)\n \n@@ -23,13 +31,14 @@ beforeAll(async () => {\n     vi.spyOn(process, 'on')\n     process.send = vi.fn()\n     process.exit = vi.fn() as any\n+\n     const run = await import('../src/run.js')\n-    exitHookFn = run.exitHookFn\n     runner = run.runner\n })\n \n-test.skip('should register exitHook', () => {\n-    expect(exitHook).toHaveBeenCalled()\n+test('should register exitHook', () => {\n+    expect(exitHookMock).toHaveBeenCalled()\n+    expect(exitHookCallback).toBeDefined()\n })\n \n test('should have registered runner listener', () => {\n@@ -74,19 +83,29 @@ test('should exit process if failing to execute', async () => {\n \n })\n \n-test('exitHookFn do nothing if no callback is provided', async () => {\n-    exitHookFn()\n-    await sleep()\n+test('exitHook should set sigintWasCalled when triggered', async () => {\n     expect(runner.sigintWasCalled).toBe(undefined)\n+\n+    // Trigger the exit hook callback\n+    if (exitHookCallback) {\n+        const promise = exitHookCallback()\n+        expect(runner.sigintWasCalled).toBe(true)\n+\n+        // The callback should return a promise that resolves after SHUTDOWN_TIMEOUT\n+        expect(promise).toBeInstanceOf(Promise)\n+        await promise\n+    }\n })\n \n-test('exitHookFn should call callback after shutdown timeout', async () => {\n-    const cb = vi.fn()\n-    exitHookFn(cb)\n-    expect(runner.sigintWasCalled).toBe(true)\n-    expect(cb).toHaveBeenCalledTimes(0)\n-    await sleep()\n-    expect(cb).toHaveBeenCalledTimes(1)\n+test('exitHook should wait for shutdown timeout', async () => {\n+    if (exitHookCallback) {\n+        const startTime = Date.now()\n+        await exitHookCallback()\n+        const endTime = Date.now()\n+\n+        // Should wait at least SHUTDOWN_TIMEOUT (1ms in test due to mock)\n+        expect(endTime - startTime).toBeGreaterThanOrEqual(1)\n+    }\n })\n \n afterAll(() => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14493",
    "pr_id": 14493,
    "issue_id": 14492,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Webdriver creates a new agent object for each individual request which is expensive\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.14.0\n\n### Node.js Version\n\n20.10.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\n            browserName: 'chrome',\n            'wdio:enforceWebDriverClassic': true,\n            'goog:platformName': 'desktop',\n            'wdio:exclude': [\n                './test/specs/**/*mobile*.js'\n            ],\n            'goog:loggingPrefs': { browser: 'WARNING' },\n            'goog:chromeOptions': {\n                args: [\n                    '--no-sandbox',\n                    '--disable-dev-shm-usage',\n                    '--window-position=1050,210',\n                    '--window-size=1366,768',\n                    ...headlessCapability\n                ],\n            },\n        }\n```\n\n### What happened?\n\nIt's not a bug per se, just an unnecessary operation from what i can tell.\n\n### What is your expected behavior?\n\nThe agent should be reused for the entire duration of the test, i am not sure i see the benefit for creating a new agent for each individual request, even if this operation costs ~0.3-0.5 ms, but this small extra time is 10% for lots of requests\n\n### How to reproduce the bug.\n\nIn order to get an idea of how much time this operation adds to each request, i wrote a performance test for 3 very common operations: `fetch element`, `click element` and `is element displayed`.\n\nClone the issue highlight repo below, and run the same performance test for the original wdio, and patched wdio:\n```\nENABLE_HEADLESS=1 DEBUG= yarn test --spec test/specs/suite1/validatePerformance.desktop.test.js\n```\n`Original` wdio 9.14.0 branch: https://github.com/dragosMC91/wdio-exclude-pattern-bug-highlight/pull/11\n`Patched` wdio 9.14.0 branch: https://github.com/dragosMC91/wdio-exclude-pattern-bug-highlight/pull/10 (this just adds a cached dispatcher to the [FetchRequest class](https://github.com/webdriverio/webdriverio/blob/v9.14.0/packages/webdriver/src/request/node.ts#L28))\n`Baseline` wdio 8.44.1 branch: https://github.com/dragosMC91/wdio-exclude-pattern-bug-highlight/pull/8\n\nafter checking out each branch, don't forget to `yarn install` to make sure you have the applied patch\n\n### Relevant log output\n\n```typescript\nHere are the results for the performance test i ran on an M2 Pro machine (the median is the most relevant item):\n\n### Wdio 9.14.0 original\n\n--- Performance Test ---\nStarting warm-up phase...\nWarm-up complete. Starting measurement phase...\nSelector: #testButton find test\nTest Iterations: 1000\nMeasurement complete.\n\n--- Request Timings Results (1000 samples) ---\nP50:    3.414 ms (Median)\nP75:    3.588 ms\nP90:    4.096 ms\nP95:    4.301 ms\nIQR:    0.267 ms\nStdDev: 0.394 ms\nMin:    3.097 ms\nMax:    6.691 ms\n------------------------------------\n\nSelector: #testButton click test\nTest Iterations: 1000\nMeasurement complete.\n\n--- Request Timings Results (1000 samples) ---\nP50:    15.802 ms (Median)\nP75:    16.084 ms\nP90:    16.477 ms\nP95:    16.763 ms\nIQR:    0.462 ms\nStdDev: 1.273 ms\nMin:    14.677 ms\nMax:    52.523 ms\n------------------------------------\n\nSelector: #testButton isDisplayed test\nTest Iterations: 1000\nMeasurement complete.\n\n--- Request Timings Results (1000 samples) ---\nP50:    3.955 ms (Median)\nP75:    4.082 ms\nP90:    4.312 ms\nP95:    4.558 ms\nIQR:    0.229 ms\nStdDev: 0.318 ms\nMin:    3.398 ms\nMax:    6.359 ms\n------------------------------------\n\n\n### Wdio 9.14.0 patched\n\n--- Performance Test ---\nStarting warm-up phase...\nWarm-up complete. Starting measurement phase...\nSelector: #testButton find test\nTest Iterations: 1000\nMeasurement complete.\n\n--- Request Timings Results (1000 samples) ---\nP50:    3.121 ms (Median)\nP75:    3.243 ms\nP90:    3.410 ms\nP95:    3.554 ms\nIQR:    0.209 ms\nStdDev: 0.247 ms\nMin:    2.800 ms\nMax:    6.134 ms\n------------------------------------\n\nSelector: #testButton click test\nTest Iterations: 1000\nMeasurement complete.\n\n--- Request Timings Results (1000 samples) ---\nP50:    15.329 ms (Median)\nP75:    15.992 ms\nP90:    16.970 ms\nP95:    17.218 ms\nIQR:    0.861 ms\nStdDev: 0.825 ms\nMin:    13.535 ms\nMax:    23.268 ms\n------------------------------------\n\nSelector: #testButton isDisplayed test\nTest Iterations: 1000\nMeasurement complete.\n\n--- Request Timings Results (1000 samples) ---\nP50:    3.341 ms (Median)\nP75:    3.444 ms\nP90:    3.569 ms\nP95:    3.667 ms\nIQR:    0.163 ms\nStdDev: 0.304 ms\nMin:    2.837 ms\nMax:    9.907 ms\n------------------------------------\n\n\n### (Optional for reference) Wdio 8.44.1\n\n--- Performance Test ---\nStarting warm-up phase...\nWarm-up complete. Starting measurement phase...\nSelector: #testButton find test\nTest Iterations: 1000\nMeasurement complete.\n\n--- Request Timings Results (1000 samples) ---\nP50:    3.083 ms (Median)\nP75:    3.213 ms\nP90:    3.491 ms\nP95:    3.602 ms\nIQR:    0.235 ms\nStdDev: 0.249 ms\nMin:    2.745 ms\nMax:    5.071 ms\n------------------------------------\n\nSelector: #testButton click test\nTest Iterations: 1000\nMeasurement complete.\n\n--- Request Timings Results (1000 samples) ---\nP50:    15.225 ms (Median)\nP75:    15.609 ms\nP90:    16.091 ms\nP95:    16.485 ms\nIQR:    0.603 ms\nStdDev: 0.825 ms\nMin:    12.290 ms\nMax:    22.453 ms\n------------------------------------\n\nSelector: #testButton isDisplayed test\nTest Iterations: 1000\nMeasurement complete.\n\n--- Request Timings Results (1000 samples) ---\nP50:    1.659 ms (Median)\nP75:    1.726 ms\nP90:    1.811 ms\nP95:    1.885 ms\nIQR:    0.110 ms\nStdDev: 0.125 ms\nMin:    1.459 ms\nMax:    3.016 ms\n------------------------------------\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 869,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriver/src/request/node.ts",
      "packages/webdriver/tests/request.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriver/tests/request.test.ts"
    ],
    "base_commit": "bf9c56b128fd36451696c2b338fbeaef44164bc0",
    "head_commit": "8a42dcf4a4912aadf7645127fb13f07c813128ee",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14493",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14493",
    "dockerfile": "",
    "pr_merged_at": "2025-05-20T02:22:01.000Z",
    "patch": "diff --git a/packages/webdriver/src/request/node.ts b/packages/webdriver/src/request/node.ts\nindex 8afe85a9180..42f44c8a294 100644\n--- a/packages/webdriver/src/request/node.ts\n+++ b/packages/webdriver/src/request/node.ts\n@@ -1,5 +1,5 @@\n import dns from 'node:dns'\n-import { fetch, Agent, type RequestInit as UndiciRequestInit, ProxyAgent } from 'undici'\n+import { fetch, Agent, type RequestInit as UndiciRequestInit, ProxyAgent, type Dispatcher } from 'undici'\n \n import { environment } from '../environment.js'\n import { WebDriverRequest } from './request.js'\n@@ -9,36 +9,70 @@ import type { RequestOptions } from './types.js'\n // This can be removed when we drop Node18 support.\n dns.setDefaultResultOrder('ipv4first')\n \n+const { PROXY_URL, NO_PROXY } = environment.value.variables\n+export const SESSION_DISPATCHERS: Map<string, Dispatcher> = new Map()\n+\n /**\n  * Node implementation of WebDriverRequest using undici fetch\n  */\n export class FetchRequest extends WebDriverRequest {\n-    fetch (url: URL, opts: RequestInit) {\n-        return fetch(url, opts as UndiciRequestInit) as unknown as Promise<Response>\n+    async fetch (url: URL, opts: RequestInit) {\n+        const response = await fetch(url, opts as UndiciRequestInit) as unknown as Promise<Response>\n+        if (opts.method === 'DELETE') {\n+            // regex should only target the delete session request, not other\n+            // delete requests, full list: https://www.w3.org/TR/webdriver2/#endpoints\n+            const match = url.pathname.match(/\\/session\\/([^/]+)$/)\n+            const sessionId = match?.[1]\n+            if (sessionId) {\n+                this.cleanupSessionDispatcher(sessionId)\n+            }\n+        }\n+        return response\n     }\n \n-    async createOptions (options: RequestOptions, sessionId?: string, isBrowser: boolean = false) {\n-        const { url, requestOptions } = await super.createOptions(options, sessionId, isBrowser)\n+    private getDispatcher(url: URL, options: RequestOptions, sessionId?: string): Dispatcher {\n+        if (sessionId && SESSION_DISPATCHERS.has(sessionId)) {\n+            return SESSION_DISPATCHERS.get(sessionId)!\n+        }\n \n         /**\n          * Use a proxy agent if we have a proxy url set\n          */\n-        const { PROXY_URL, NO_PROXY } = environment.value.variables\n+        const shouldUseProxy =\n+            PROXY_URL && !NO_PROXY?.some((str) => url.hostname.endsWith(str))\n \n-        const dispatcher = PROXY_URL && !NO_PROXY?.some((str) => url.hostname.endsWith(str))\n-            ? new ProxyAgent({\n-                uri: PROXY_URL,\n-                connectTimeout: options.connectionRetryTimeout,\n-                headersTimeout: options.connectionRetryTimeout,\n-                bodyTimeout: options.connectionRetryTimeout,\n-            })\n-            : new Agent({\n+        const dispatcher = shouldUseProxy ? new ProxyAgent({\n+            uri: PROXY_URL,\n+            connectTimeout: options.connectionRetryTimeout,\n+            headersTimeout: options.connectionRetryTimeout,\n+            bodyTimeout: options.connectionRetryTimeout,\n+        }) :\n+            new Agent({\n                 connectTimeout: options.connectionRetryTimeout,\n                 headersTimeout: options.connectionRetryTimeout,\n                 bodyTimeout: options.connectionRetryTimeout,\n             })\n \n-        ;(requestOptions as UndiciRequestInit).dispatcher = dispatcher\n+        if (sessionId){\n+            SESSION_DISPATCHERS.set(sessionId, dispatcher)\n+        }\n+\n+        return dispatcher\n+    }\n+\n+    private cleanupSessionDispatcher(sessionId: string) {\n+        const dispatcher = SESSION_DISPATCHERS.get(sessionId)\n+        if (dispatcher && typeof dispatcher.close === 'function') {\n+            // Close the dispatcher to free up resources\n+            dispatcher.close()\n+        }\n+        SESSION_DISPATCHERS.delete(sessionId)\n+    }\n+\n+    async createOptions (options: RequestOptions, sessionId?: string, isBrowser: boolean = false) {\n+        const { url, requestOptions } = await super.createOptions(options, sessionId, isBrowser)\n+\n+        ;(requestOptions as UndiciRequestInit).dispatcher = this.getDispatcher(url, options, sessionId)\n         return { url, requestOptions }\n     }\n }\n",
    "test_patch": "diff --git a/packages/webdriver/tests/request.test.ts b/packages/webdriver/tests/request.test.ts\nindex a807a21efa9..8bf212ce1a4 100644\n--- a/packages/webdriver/tests/request.test.ts\n+++ b/packages/webdriver/tests/request.test.ts\n@@ -6,10 +6,19 @@ import logger from '@wdio/logger'\n import type { Options } from '@wdio/types'\n \n import '../src/browser.js'\n-import { FetchRequest } from '../src/request/web.js'\n+import { FetchRequest as WebFetchRequest } from '../src/request/web.js'\n+import { FetchRequest, SESSION_DISPATCHERS } from '../src/request/node.js'\n \n vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdio/logger')))\n vi.mock('fetch')\n+vi.mock('undici', () => {\n+    return {\n+        fetch: vi.fn(async () => ({ ok: true, status: 200, json: async () => ({}) })),\n+        Agent: vi.fn().mockImplementation(() => ({ close: vi.fn() })),\n+        ProxyAgent: vi.fn().mockImplementation(() => ({ close: vi.fn() })),\n+    }\n+})\n+\n const { warn, error } = logger('test')\n \n const webdriverPath = '/session'\n@@ -23,16 +32,17 @@ const baseUrl = `${defaultOptions.protocol}://${defaultOptions.hostname}:${defau\n describe('webdriver request', () => {\n     beforeEach(() => {\n         vi.mocked(fetch).mockClear()\n+        SESSION_DISPATCHERS.clear()\n     })\n \n     it('should have some default options', () => {\n-        const req = new FetchRequest('POST', '/foo/bar', { foo: 'bar' })\n+        const req = new WebFetchRequest('POST', '/foo/bar', { foo: 'bar' })\n         expect(req.method).toBe('POST')\n         expect(req.endpoint).toBe('/foo/bar')\n     })\n \n     it('should be able to make request', async () => {\n-        const req = new FetchRequest('POST', '/foo/bar', { foo: 'bar' })\n+        const req = new WebFetchRequest('POST', '/foo/bar', { foo: 'bar' })\n         const url =  new URL('/foo/bar', baseUrl)\n         req.createOptions = vi.fn().mockImplementation((opts, sessionId) => ({\n             url,\n@@ -54,7 +64,7 @@ describe('webdriver request', () => {\n     })\n \n     it('should pick up the fullRequestOptions returned by transformRequest', async () => {\n-        const req = new FetchRequest('POST', '/foo/bar', { foo: 'bar' })\n+        const req = new WebFetchRequest('POST', '/foo/bar', { foo: 'bar' })\n         const transformRequest = vi.fn().mockImplementation((requestOptions) => ({\n             ...requestOptions,\n             body: { foo: 'baz' }\n@@ -75,7 +85,7 @@ describe('webdriver request', () => {\n     })\n \n     it('should resolve with the body returned by transformResponse', async () => {\n-        const req = new FetchRequest('POST', 'session/:sessionId/element', { foo: 'requestBody' })\n+        const req = new WebFetchRequest('POST', 'session/:sessionId/element', { foo: 'requestBody' })\n \n         const transformResponse = vi.fn().mockImplementation((response) => ({\n             ...response,\n@@ -100,12 +110,12 @@ describe('webdriver request', () => {\n \n     describe('createOptions', () => {\n         it('fails if command requires sessionId but none given', async () => {\n-            const req = new FetchRequest('POST', `${webdriverPath}/:sessionId/element`, {})\n+            const req = new WebFetchRequest('POST', `${webdriverPath}/:sessionId/element`, {})\n             await expect(() => req.createOptions({ logLevel: 'warn' })).rejects.toThrow('A sessionId is required')\n         })\n \n         it('creates proper options set', async () => {\n-            const req = new FetchRequest('POST', `${webdriverPath}/:sessionId/element`, {})\n+            const req = new WebFetchRequest('POST', `${webdriverPath}/:sessionId/element`, {})\n             const { url, requestOptions } = await req.createOptions({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -124,7 +134,7 @@ describe('webdriver request', () => {\n         })\n \n         it('ignors path when command is a hub command', async () => {\n-            const req = new FetchRequest('POST', '/grid/api/hub', {}, undefined, true)\n+            const req = new WebFetchRequest('POST', '/grid/api/hub', {}, undefined, true)\n             const options = await req.createOptions({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -136,7 +146,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should add authorization header if user and key is given', async () => {\n-            const req = new FetchRequest('POST', webdriverPath, { some: 'body' })\n+            const req = new WebFetchRequest('POST', webdriverPath, { some: 'body' })\n             const user = 'foo'\n             const key = 'bar'\n             const { requestOptions } = await req.createOptions({\n@@ -151,7 +161,7 @@ describe('webdriver request', () => {\n         })\n \n         it('sets request body to \"undefined\" when request object is empty and DELETE is used', async () => {\n-            const req = new FetchRequest('DELETE', webdriverPath, {})\n+            const req = new WebFetchRequest('DELETE', webdriverPath, {})\n             const { requestOptions } = await req.createOptions({\n                 ...defaultOptions,\n                 path: '/',\n@@ -161,7 +171,7 @@ describe('webdriver request', () => {\n         })\n \n         it('sets request body to \"undefined\" when request object is empty and GET is used', async () => {\n-            const req = new FetchRequest('GET', `${webdriverPath}/title`, {})\n+            const req = new WebFetchRequest('GET', `${webdriverPath}/title`, {})\n             const { requestOptions } = await req.createOptions({\n                 ...defaultOptions,\n                 path: '/',\n@@ -171,7 +181,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should attach an empty object body when POST is used', async () => {\n-            const req = new FetchRequest('POST', '/status', {})\n+            const req = new WebFetchRequest('POST', '/status', {})\n             const { requestOptions } = await req.createOptions({\n                 ...defaultOptions,\n                 path: '/',\n@@ -181,7 +191,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should add the Content-Length header when a request object has a body', async () => {\n-            const req = new FetchRequest('POST', webdriverPath, { foo: 'bar' })\n+            const req = new WebFetchRequest('POST', webdriverPath, { foo: 'bar' })\n             const { requestOptions } = await req.createOptions({\n                 ...defaultOptions,\n                 path: '/',\n@@ -193,7 +203,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should add Content-Length as well any other header provided in the request options if there is body in the request object', async () => {\n-            const req = new FetchRequest('POST', webdriverPath, { foo: 'bar' })\n+            const req = new WebFetchRequest('POST', webdriverPath, { foo: 'bar' })\n             const { requestOptions } = await req.createOptions({\n                 ...defaultOptions, path: '/',\n                 headers: { foo: 'bar' },\n@@ -204,7 +214,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should add only the headers provided if the request body is empty', async () => {\n-            const req = new FetchRequest('POST', webdriverPath)\n+            const req = new WebFetchRequest('POST', webdriverPath)\n             const { requestOptions } = await req.createOptions({\n                 ...defaultOptions,\n                 path: '/',\n@@ -221,7 +231,7 @@ describe('webdriver request', () => {\n             const expectedResponse = { value: { 'element-6066-11e4-a52e-4f735466cecf': 'some-elem-123' } }\n             const onResponse = vi.fn()\n             const onPerformance = vi.fn()\n-            const req = new FetchRequest('POST', webdriverPath, {}, undefined, false, {\n+            const req = new WebFetchRequest('POST', webdriverPath, {}, undefined, false, {\n                 onResponse, onPerformance\n             })\n \n@@ -242,7 +252,7 @@ describe('webdriver request', () => {\n         it('should short circuit if request throws a stale element exception', async () => {\n             const onResponse = vi.fn()\n             const onPerformance = vi.fn()\n-            const req = new FetchRequest('POST', 'session/:sessionId/element', {}, undefined, false, {\n+            const req = new WebFetchRequest('POST', 'session/:sessionId/element', {}, undefined, false, {\n                 onResponse, onPerformance\n             })\n \n@@ -262,7 +272,7 @@ describe('webdriver request', () => {\n         it('should not fail code due to an empty server response', async () => {\n             const onResponse = vi.fn()\n             const onPerformance = vi.fn()\n-            const req = new FetchRequest('POST', webdriverPath, {}, undefined, false, {\n+            const req = new WebFetchRequest('POST', webdriverPath, {}, undefined, false, {\n                 onResponse, onPerformance\n             })\n \n@@ -281,7 +291,7 @@ describe('webdriver request', () => {\n             const onRetry = vi.fn()\n             const onResponse = vi.fn()\n             const onPerformance = vi.fn()\n-            const req = new FetchRequest('POST', webdriverPath, {}, undefined, false, {\n+            const req = new WebFetchRequest('POST', webdriverPath, {}, undefined, false, {\n                 onResponse, onPerformance, onRetry\n             })\n \n@@ -304,7 +314,7 @@ describe('webdriver request', () => {\n             const onRetry = vi.fn()\n             const onResponse = vi.fn()\n             const onPerformance = vi.fn()\n-            const req = new FetchRequest('POST', webdriverPath, {}, undefined, false, {\n+            const req = new WebFetchRequest('POST', webdriverPath, {}, undefined, false, {\n                 onResponse, onPerformance, onRetry\n             })\n \n@@ -324,7 +334,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should manage hub commands', async () => {\n-            const req = new FetchRequest('POST', '/grid/api/hub', {}, undefined, true)\n+            const req = new WebFetchRequest('POST', '/grid/api/hub', {}, undefined, true)\n             expect(await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -335,7 +345,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should fail if hub command is called on node', async () => {\n-            const req = new FetchRequest('POST', '/grid/api/testsession', {}, undefined, true)\n+            const req = new WebFetchRequest('POST', '/grid/api/testsession', {}, undefined, true)\n             const result = await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -353,7 +363,7 @@ describe('webdriver request', () => {\n             it('should throw if timeout happens too often', async () => {\n                 const retryCnt = 3\n                 const onRetry = vi.fn()\n-                const req = new FetchRequest('POST', '/timeout', {}, undefined, true, { onRetry })\n+                const req = new WebFetchRequest('POST', '/timeout', {}, undefined, true, { onRetry })\n                 const result = await req.makeRequest({\n                     protocol: 'https',\n                     hostname: 'localhost',\n@@ -374,7 +384,7 @@ describe('webdriver request', () => {\n                 const onRequest = vi.fn()\n                 const onResponse = vi.fn()\n                 const onPerformance = vi.fn()\n-                const req = new FetchRequest('GET', '/timeout', {}, undefined, true, { onRetry, onRequest, onResponse, onPerformance })\n+                const req = new WebFetchRequest('GET', '/timeout', {}, undefined, true, { onRetry, onRequest, onResponse, onPerformance })\n                 const reqOpts = {\n                     protocol: 'https',\n                     hostname: 'localhost',\n@@ -395,7 +405,7 @@ describe('webdriver request', () => {\n         it('should return proper response if retry passes', async () => {\n             const retryCnt = 7\n             const onRetry = vi.fn()\n-            const req = new FetchRequest('POST', '/timeout', {}, undefined, true, { onRetry })\n+            const req = new WebFetchRequest('POST', '/timeout', {}, undefined, true, { onRetry })\n             const result = await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -414,7 +424,7 @@ describe('webdriver request', () => {\n         it('should retry on connection refused error', async () => {\n             const retryCnt = 7\n             const onRetry = vi.fn()\n-            const req = new FetchRequest('POST', '/connectionRefused', {}, undefined, false, { onRetry })\n+            const req = new WebFetchRequest('POST', '/connectionRefused', {}, undefined, false, { onRetry })\n             const result = await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -431,7 +441,7 @@ describe('webdriver request', () => {\n \n         it('should throw if request error is unknown', async () => {\n             console.log('TESTING', AbortSignal)\n-            const req = new FetchRequest('POST', '/sumoerror', {}, undefined, true)\n+            const req = new WebFetchRequest('POST', '/sumoerror', {}, undefined, true)\n             const result = await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -445,6 +455,63 @@ describe('webdriver request', () => {\n             )\n             expect(result.message).toEqual(expect.stringContaining('ups'))\n         })\n+\n+        it('should validate dispatcher is reused within the same session', async () => {\n+            const sessionId = 'reuse-session-id'\n+\n+            const req1 = new FetchRequest('POST', `/session/${sessionId}/element`, {})\n+            const req2 = new FetchRequest('GET', `/session/${sessionId}/cookie`, {})\n+            await req1.makeRequest(defaultOptions, sessionId).then((res) => res, (e) => e)\n+            await req2.makeRequest(defaultOptions, sessionId).then((res) => res, (e) => e)\n+\n+            expect(SESSION_DISPATCHERS.has(sessionId)).toBe(true)\n+            expect(SESSION_DISPATCHERS.size).toBe(1)\n+        })\n+\n+        it('should validate a new dispatcher is created for each individual session', async () => {\n+            const sessionId1 = 'session-id-1'\n+            const sessionId2 = 'session-id-2'\n+\n+            const req1 = new FetchRequest('POST', `/session/${sessionId1}/element`, {})\n+            const req2 = new FetchRequest('GET', `/session/${sessionId2}/cookie`, {})\n+            await req1.makeRequest(defaultOptions, sessionId1).then((res) => res, (e) => e)\n+            await req2.makeRequest(defaultOptions, sessionId2).then((res) => res, (e) => e)\n+\n+            expect(SESSION_DISPATCHERS.has(sessionId1)).toBe(true)\n+            expect(SESSION_DISPATCHERS.has(sessionId2)).toBe(true)\n+            expect(SESSION_DISPATCHERS.size).toBe(2)\n+        })\n+\n+        it('should cleanup session dispatcher on DELETE /session/:sessionId', async () => {\n+            const sessionId = 'delete-session-id'\n+            const deleteSessionRequest = new FetchRequest('DELETE', `/session/${sessionId}`, {})\n+            const getElementRequest = new FetchRequest('POST', `/session/${sessionId}/element`, {})\n+\n+            // initial request to initialize the dispatcher map\n+            await getElementRequest.makeRequest(defaultOptions, sessionId).then((res) => res, (e) => e)\n+            expect(SESSION_DISPATCHERS.has(sessionId)).toBe(true)\n+\n+            const currentDispatcher = SESSION_DISPATCHERS.get(sessionId) || { close:undefined }\n+            await deleteSessionRequest.makeRequest(defaultOptions, sessionId).then((res) => res, (e) => e)\n+\n+            expect(currentDispatcher.close).toHaveBeenCalled()\n+            expect(SESSION_DISPATCHERS.has(sessionId)).toBe(false)\n+            expect(SESSION_DISPATCHERS.size).toBe(0)\n+        })\n+\n+        it('should not cleanup session dispatcher on non delete session DELETE requests', async () => {\n+            const sessionId = 'other-delete-session-id'\n+            const deleteCookieRequest = new FetchRequest('DELETE', `/session/${sessionId}/cookie`, {})\n+\n+            await deleteCookieRequest.makeRequest(defaultOptions, sessionId).then((res) => res, (e) => e)\n+            expect(SESSION_DISPATCHERS.has(sessionId)).toBe(true)\n+\n+            const currentDispatcher = SESSION_DISPATCHERS.get(sessionId) || { close:undefined }\n+\n+            expect(currentDispatcher.close).not.toHaveBeenCalled()\n+            expect(SESSION_DISPATCHERS.has(sessionId)).toBe(true)\n+            expect(SESSION_DISPATCHERS.size).toBe(1)\n+        })\n     })\n \n     afterEach(() => {\n@@ -454,5 +521,7 @@ describe('webdriver request', () => {\n         vi.mocked(fetch).mockClear()\n         vi.mocked(warn).mockClear()\n         vi.mocked(error).mockClear()\n+\n+        SESSION_DISPATCHERS.clear()\n     })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14491",
    "pr_id": 14491,
    "issue_id": 14489,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: RangeError: Maximum Call Stack Size Exceeded When Validating Large Base64 Strings\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\n20\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\n{\n  browserName: 'chrome',\n  browserVersion: '136'\n}\n```\n\n### What happened?\n\nThe screenshots are not processed normally.\n\n\nCurrently, we use a regex to check if a given string matches a valid format (e.g., Base64). This works well for smaller strings. However, when the input string is very large (over ~4053844 characters), the regex engine struggles — likely due to performance or internal engine limitations.\n\nThe error stack we get: \n\nRangeError: Maximum call stack size exceeded\n    at RegExp.test (<anonymous>)\n    at #handleResponse (file:///Users/nikolaoslytras/work/wdio_v9/node_modules/webdriver/build/node.js:450:150)\n    at WebSocket.emit (node:events:530:35)\n    at WebSocket.emit (node:domain:488:12)\n    at Receiver.receiverOnMessage (/Users/nikolaoslytras/work/wdio_v9/node_modules/ws/lib/websocket.js:1220:20)\n    at Receiver.emit (node:events:518:28)\n    at Receiver.emit (node:domain:488:12)\n    at Receiver.dataMessage (/Users/nikolaoslytras/work/wdio_v9/node_modules/ws/lib/receiver.js:596:14)\n    at /Users/nikolaoslytras/work/wdio_v9/node_modules/ws/lib/receiver.js:530:12\n    at /Users/nikolaoslytras/work/wdio_v9/node_modules/ws/lib/permessage-deflate.js:309:9\n\nSuggested Fix:\nIntroduce a dynamic chunking mechanism based on the total string length — for example, derive the number of chunks from the length itself. This makes the solution more scalable for very large strings, even in the millions of characters range.\n\n### What is your expected behavior?\n\nThe expected behavior is for the screenshot to be processed normally.\n\n### How to reproduce the bug.\n\nTo reproduce the issue, you can try taking a screenshot using either the Visual Service’s checkScreen method or the browsingContextCaptureScreenshot function provided by WDIO. Use an image that contains a high level of visual detail, as this will generate a very large Base64 string.\n\nYou can also refer to the following repository for a ready-made example:\n👉 https://github.com/gromanas/wdio_v9 (bidi-issue branch)\nIt contains both a working and a non-working screenshot to illustrate the problem.\n\n### Relevant log output\n\n```typescript\n2025-05-16T13:45:40.412Z INFO webdriver: Initiate new session using the WebDriver protocol\nindex.js:912025-05-16T13:45:40.532Z INFO webdriver: Using Chromedriver v136.0.7103.114 from cache directory /var/folders/2n/b8wjvxm93r71688x4gb3g9_w0000gn/T\nindex.js:912025-05-16T13:45:40.546Z INFO chromedriver: Starting ChromeDriver 136.0.7103.114 (cedfcc36d433dba0d681ec32e86b8d0593fc820c-refs/branch-heads/7103_108@{#4}) on port 59195\nindex.js:912025-05-16T13:45:40.546Z INFO chromedriver: Remote connections are allowed by an allowlist (0.0.0.0).\nindex.js:912025-05-16T13:45:40.546Z INFO chromedriver: Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.\nindex.js:912025-05-16T13:45:40.562Z INFO chromedriver: ChromeDriver was started successfully on port 59195.\nindex.js:912025-05-16T13:45:40.641Z INFO @wdio/utils: Started Chromedriver v136.0.7103.114 with params --port=59195 --allowed-origins=* --allowed-ips=0.0.0.0 in 144ms on port 59195\nindex.js:912025-05-16T13:45:40.654Z INFO webdriver: [POST] http://localhost:59195/session\nindex.js:912025-05-16T13:45:40.654Z INFO webdriver: DATA \nObject {capabilities: {…}}\nindex.js:912025-05-16T13:45:41.599Z INFO webdriver: Register BiDi handler for session with id cf0e5e20ab09299d9b18d0e09615d642\nindex.js:912025-05-16T13:45:41.599Z INFO webdriver: Connecting to webSocketUrl ws://127.0.0.1:59195/session/cf0e5e20ab09299d9b18d0e09615d642\nindex.js:912025-05-16T13:45:41.601Z DEBUG webdriver: Attempt to connect to webSocketUrl ws://127.0.0.1:59195/session/cf0e5e20ab09299d9b18d0e09615d642\nindex.js:912025-05-16T13:45:41.605Z INFO webdriver: Connected to Bidi protocol at ws://127.0.0.1:59195/session/cf0e5e20ab09299d9b18d0e09615d642\nindex.js:912025-05-16T13:45:41.605Z INFO webdriver: Connected to WebDriver Bidi interface at ws://127.0.0.1:59195/session/cf0e5e20ab09299d9b18d0e09615d642\nindex.js:912025-05-16T13:45:41.605Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.contextCreated\"]}\nindex.js:912025-05-16T13:45:41.606Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"log.entryAdded\",\"browsingContext.navigationStarted\"]}\nindex.js:912025-05-16T13:45:41.606Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[1319 bytes]>, contexts: undefined }\nindex.js:912025-05-16T13:45:41.607Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\",\"browsingContext.fragmentNavigated\",\"network.responseCompleted\",\"network.beforeRequestSent\",\"network.fetchError\"]}\nindex.js:912025-05-16T13:45:41.607Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.userPromptOpened\"]}\nindex.js:912025-05-16T13:45:41.607Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\"]}\nindex.js:912025-05-16T13:45:41.607Z INFO webdriver: COMMAND getWindowHandle()\nindex.js:912025-05-16T13:45:41.608Z INFO webdriver: BIDI COMMAND browsingContext.getTree {}\nindex.js:912025-05-16T13:45:41.608Z INFO webdriver: [GET] http://localhost:59195/session/cf0e5e20ab09299d9b18d0e09615d642/window\nindex.js:912025-05-16T13:45:41.611Z INFO webdriver: RESULT ED0880FB0989BAD969B76D529C016D49\nindex.js:912025-05-16T13:45:41.612Z INFO webdriverio:PolyfillManager: Adding polyfill script to context with id ED0880FB0989BAD969B76D529C016D49\nindex.js:912025-05-16T13:45:41.613Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[442 bytes] webdriverioPolyfill>\",\"target\":{\"children\":null,\"clientWindow\":\"1579773110\",\"context\":\"ED0880FB0989BAD969B76D529C016D49\",\"originalOpener\":null,\"parent\":null,\"url\":\"about:blank\",\"userContext\":\"default\"},\"awaitPromise\":false}\nindex.js:912025-05-16T13:45:41.613Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[442 bytes]>, contexts: [\"ED0880FB0989BAD969B76D529C016D49\"] }\nindex.js:912025-05-16T13:45:41.613Z INFO webdriver: BIDI RESULT {\"id\":1,\"result\":{\"subscription\":\"63ef4476-6c77-4538-8128-2277158972ed\"},\"type\":\"success\"}\nindex.js:912025-05-16T13:45:41.614Z INFO webdriver: BIDI RESULT {\"id\":2,\"result\":{\"subscription\":\"3f6e4255-f29a-4262-b4fe-18080aff0cfe\"},\"type\":\"success\"}\nindex.js:912025-05-16T13:45:41.614Z INFO webdriver: BIDI RESULT {\"id\":4,\"result\":{\"subscription\":\"fb27ca05-ce45-49a5-9be9-e55a5f06289c\"},\"type\":\"success\"}\nindex.js:912025-05-16T13:45:41.614Z INFO webdriver: BIDI RESULT {\"id\":5,\"result\":{\"subscription\":\"b0afd68a-66bd-484e-a3a1-b9f64e816842\"},\"type\":\"success\"}\nindex.js:912025-05-16T13:45:41.615Z INFO webdriver: BIDI RESULT {\"id\":3,\"result\":{\"script\":\"c4321e25-2c0b-4381-914a-e1af524a9bb0\"},\"type\":\"success\"}\nindex.js:912025-05-16T13:45:41.615Z INFO webdriver: BIDI RESULT {\"id\":6,\"result\":{\"subscription\":\"3935c6b5-1efe-4fe2-81c4-56935f53ce10\"},\"type\":\"success\"}\nindex.js:912025-05-16T13:45:41.615Z INFO webdriver: BIDI RESULT {\"id\":7,\"result\":{\"contexts\":[{\"children\":[],\"clientWindow\":\"1579773110\",\"context\":\"ED0880FB0989BAD969B76D529C016D49\",\"originalOpener\":null,\"parent\":null,\"url\":\"about:blank\",\"userContext\":\"default\"}]},\"type\":\"success\"}\nindex.js:912025-05-16T13:45:41.616Z INFO @wdio/visual-service: Adding commands to global browser\nindex.js:912025-05-16T13:45:41.616Z INFO @wdio/visual-service: Adding element command \"saveElement\" to browser object\nindex.js:912025-05-16T13:45:41.616Z INFO @wdio/visual-service: Adding element command \"checkElement\" to browser object\nindex.js:912025-05-16T13:45:41.616Z INFO @wdio/visual-service: Adding browser command \"saveScreen\" to browser object\nindex.js:912025-05-16T13:45:41.616Z INFO @wdio/visual-service: Adding browser command \"saveFullPageScreen\" to browser object\nindex.js:912025-05-16T13:45:41.616Z INFO @wdio/visual-service: Adding browser command \"saveTabbablePage\" to browser object\nindex.js:912025-05-16T13:45:41.616Z INFO @wdio/visual-service: Adding browser command \"checkScreen\" to browser object\nindex.js:912025-05-16T13:45:41.617Z INFO @wdio/visual-service: Adding browser command \"checkFullPageScreen\" to browser object\nindex.js:912025-05-16T13:45:41.617Z INFO @wdio/visual-service: Adding browser command \"checkTabbablePage\" to browser object\nindex.js:912025-05-16T13:45:41.617Z INFO @wdio/visual-service: Adding browser command \"waitForStorybookComponentToBeLoaded\" to browser object\nindex.js:912025-05-16T13:45:41.617Z DEBUG @wdio/utils:shim: Finished to run \"before\" hook in 1ms\nindex.js:912025-05-16T13:45:41.619Z INFO webdriver: BIDI COMMAND browsingContext.setViewport {\"context\":\"ED0880FB0989BAD969B76D529C016D49\",\"devicePixelRatio\":4.5,\"viewport\":{\"width\":320,\"height\":658}}\nindex.js:912025-05-16T13:45:41.619Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[271 bytes]>, contexts: undefined }\nindex.js:912025-05-16T13:45:41.620Z INFO webdriver: BIDI RESULT {\"id\":8,\"result\":{\"realm\":\"-219785209916946295.3726575127658728009\",\"result\":{\"type\":\"undefined\"},\"type\":\"success\"},\"type\":\"success\"}\nindex.js:912025-05-16T13:45:41.620Z INFO webdriver: BIDI RESULT {\"id\":9,\"result\":{\"script\":\"45e3cc92-8342-41c4-b6c1-2c54322507c0\"},\"type\":\"success\"}\nindex.js:912025-05-16T13:45:41.622Z INFO webdriver: BIDI RESULT {\"id\":10,\"result\":{},\"type\":\"success\"}\nindex.js:912025-05-16T13:45:41.622Z INFO webdriver: BIDI RESULT {\"id\":11,\"result\":{\"script\":\"0608f338-c528-48a6-a041-c161f4e8a11e\"},\"type\":\"success\"}\nindex.js:912025-05-16T13:45:41.624Z DEBUG @wdio/utils:shim: Finished to run \"beforeTest\" hook in 1ms\nindex.js:912025-05-16T13:45:41.624Z INFO webdriver: COMMAND navigateTo(\"file:///Users/nikolaoslytras/work/wdio_v9/test/specs/wp10469173-2000x2000-wallpapers.jpg\")\nindex.js:912025-05-16T13:45:41.624Z INFO webdriver: [POST] http://localhost:59195/session/cf0e5e20ab09299d9b18d0e09615d642/url\nindex.js:912025-05-16T13:45:41.624Z INFO webdriver: DATA \nObject {url: \"file:///Users/nikolaoslytras/work/wdio_v9/test/specs/wp10469173-2000x2000-wallpapers.jpg\"}\nindex.js:912025-05-16T13:45:41.644Z INFO webdriver: RESULT null\nindex.js:912025-05-16T13:45:41.644Z INFO webdriver: BIDI COMMAND browsingContext.getTree {}\nindex.js:912025-05-16T13:45:41.645Z INFO webdriver: BIDI RESULT {\"id\":12,\"result\":{\"contexts\":[{\"children\":[],\"clientWindow\":\"1579773110\",\"context\":\"ED0880FB0989BAD969B76D529C016D49\",\"originalOpener\":null,\"parent\":null,\"url\":\"file:///Users/nikolaoslytras/work/wdio_v9/test/specs/wp10469173-2000x2000-wallpapers.jpg\",\"userContext\":\"default\"}]},\"type\":\"success\"}\nindex.js:912025-05-16T13:45:41.645Z INFO webdriver: BIDI COMMAND browsingContext.captureScreenshot {\"context\":\"ED0880FB0989BAD969B76D529C016D49\"}\nindex.js:912025-05-16T13:45:42.386Z ERROR webdriver: Failed parse message: Maximum call stack size exceeded\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 1636,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "packages/webdriver/src/bidi/core.ts",
      "packages/webdriver/src/bidi/utils.ts",
      "packages/webdriver/src/constants.ts",
      "packages/webdriver/tests/bidi-utils.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriver/tests/bidi-utils.test.ts"
    ],
    "base_commit": "bf9c56b128fd36451696c2b338fbeaef44164bc0",
    "head_commit": "b869edc9fd85da6b5c1b4bb0e5ab87bfb50fc389",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14491",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14491",
    "dockerfile": "",
    "pr_merged_at": "2025-05-18T20:04:13.000Z",
    "patch": "diff --git a/packages/webdriver/src/bidi/core.ts b/packages/webdriver/src/bidi/core.ts\nindex fec7bfb0a2d..5ddd051e957 100644\n--- a/packages/webdriver/src/bidi/core.ts\n+++ b/packages/webdriver/src/bidi/core.ts\n@@ -8,10 +8,10 @@ import type { CommandData } from './remoteTypes.js'\n import type { CommandResponse, ErrorResponse } from './localTypes.js'\n \n import type { Client } from '../types.js'\n+import { isBase64Safe } from './utils.js'\n \n const SCRIPT_PREFIX = '/* __wdio script__ */'\n const SCRIPT_SUFFIX = '/* __wdio script end__ */'\n-const base64Regex = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$/\n \n const log = logger('webdriver')\n const RESPONSE_TIMEOUT = 1000 * 60\n@@ -125,7 +125,7 @@ export class BidiCore {\n              * of the result instead of the raw base64 encoded string\n              */\n             let resultLog = data.toString()\n-            if (typeof payload.result === 'object' && payload.result && 'data' in payload.result && typeof payload.result.data === 'string' && base64Regex.test(payload.result.data)) {\n+            if (typeof payload.result === 'object' && payload.result && 'data' in payload.result && typeof payload.result.data === 'string' && isBase64Safe(payload.result.data)) {\n                 resultLog = JSON.stringify({\n                     ...payload.result,\n                     data: `Base64 string [${payload.result.data.length} chars]`\n\ndiff --git a/packages/webdriver/src/bidi/utils.ts b/packages/webdriver/src/bidi/utils.ts\nnew file mode 100644\nindex 00000000000..e4238282dd1\n--- /dev/null\n+++ b/packages/webdriver/src/bidi/utils.ts\n@@ -0,0 +1,36 @@\n+import { BASE_64_REGEX, BASE_64_SAFE_STRING_TO_PROCESS_LENGTH } from '../constants.js'\n+\n+export function isBase64Safe(str: string): boolean {\n+    if (typeof str !== 'string') {\n+        return false\n+    }\n+\n+    if (str.length === 0) {\n+        return true\n+    }\n+\n+    if (str.length % 4 !== 0) {\n+        return false\n+    }\n+\n+    const length = str.length\n+\n+    // Calculate number of digits in the length (e.g., 1000000 => 7)\n+    const digitCount = length.toString().length\n+\n+    // Only chunk if length > BASE_64_SAFE_STRING_TO_PROCESS_LENGTH\n+    if (length > BASE_64_SAFE_STRING_TO_PROCESS_LENGTH) {\n+        const chunkSize = Math.floor(length / digitCount / 4) * 4\n+        for (let i = 0; i < length; i += chunkSize) {\n+            const chunk = str.slice(i, i + chunkSize)\n+            if (!BASE_64_REGEX.test(chunk)) {\n+                return false\n+            }\n+        }\n+        return true\n+    }\n+\n+    // For shorter strings, validate whole thing\n+    return BASE_64_REGEX.test(str)\n+}\n+\n\ndiff --git a/packages/webdriver/src/constants.ts b/packages/webdriver/src/constants.ts\nindex a5b83d179bc..126da88f856 100644\n--- a/packages/webdriver/src/constants.ts\n+++ b/packages/webdriver/src/constants.ts\n@@ -146,3 +146,6 @@ export const DEFAULTS: Options.Definition<Required<RemoteConfig>> = {\n \n export const ELEMENT_KEY = 'element-6066-11e4-a52e-4f735466cecf'\n export const SHADOW_ELEMENT_KEY = 'shadow-6066-11e4-a52e-4f735466cecf'\n+\n+export const BASE_64_REGEX = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$/\n+export const BASE_64_SAFE_STRING_TO_PROCESS_LENGTH = 200_000\n",
    "test_patch": "diff --git a/packages/webdriver/tests/bidi-utils.test.ts b/packages/webdriver/tests/bidi-utils.test.ts\nnew file mode 100644\nindex 00000000000..b319894cac7\n--- /dev/null\n+++ b/packages/webdriver/tests/bidi-utils.test.ts\n@@ -0,0 +1,177 @@\n+import crypto from 'node:crypto'\n+import { describe, it, expect, vi } from 'vitest'\n+\n+import { isBase64Safe } from '../src/bidi/utils.js'\n+\n+// Helper functions for the tests\n+const generateBase64 = (length: number): string => {\n+    const randomBytes = crypto.randomBytes(length)\n+    return Buffer.from(randomBytes).toString('base64')\n+}\n+\n+const generateInvalidBase64 = (length: number): string => {\n+    let validBase64 = generateBase64(length)\n+    if (validBase64.length === 0) {\n+        validBase64 = 'AA=='\n+    }\n+\n+    // Choose a method to make it invalid (randomly)\n+    const invalidationMethods = [\n+        // Add invalid characters\n+        () => {\n+            const position = Math.floor(Math.random() * validBase64.length)\n+            const invalidChars = '!@#$%^&*()_{}[]|\"\\'\\\\:;<>,.?~`'\n+            const invalidChar = invalidChars.charAt(Math.floor(Math.random() * invalidChars.length))\n+            return validBase64.substring(0, position) + invalidChar + validBase64.substring(position + 1)\n+        },\n+        // Incorrect padding by adding extra padding or removing required padding\n+        () => {\n+            if (validBase64.endsWith('==')) {\n+                // Remove one = to make it invalid\n+                return validBase64.substring(0, validBase64.length - 1)\n+            } else if (validBase64.endsWith('=')) {\n+                // Add two more = to make it invalid (three = is never valid)\n+                return validBase64 + '=='\n+            }\n+            // For strings without padding, add a single = which will be invalid\n+            // if the length isn't right for padding\n+            const validLength = validBase64.length % 4\n+            if (validLength === 0) {\n+                // For strings with length multiple of 4, adding a single = is invalid\n+                return validBase64 + '='\n+            }\n+            // Remove a character to disrupt the length then add =\n+            return validBase64.substring(0, validBase64.length - 1) + '='\n+\n+        },\n+        // Insert padding character in the middle (always invalid)\n+        () => {\n+            const position = Math.floor(Math.random() * (validBase64.length - 1)) + 1\n+            return validBase64.substring(0, position) + '=' + validBase64.substring(position)\n+        },\n+        // Disrupt the length to make it invalid (base64 length must be multiple of 4)\n+        () => {\n+            if (validBase64.length % 4 === 0) {\n+                // Remove 1 character to make length not a multiple of 4\n+                return validBase64.substring(0, validBase64.length - 1)\n+            }\n+            // Remove extra to ensure the length is invalid\n+            return validBase64.substring(0, validBase64.length - (validBase64.length % 4) - 1)\n+\n+        },\n+        // Guaranteed invalid method - always prepend an invalid character\n+        () => {\n+            return '?' + validBase64\n+        }\n+    ]\n+\n+    const method = invalidationMethods[Math.floor(Math.random() * invalidationMethods.length)]\n+    const result = method()\n+\n+    return result\n+}\n+\n+describe('bidi utils', () => {\n+    describe('isBase64Safe', () => {\n+        it('should return false for non-string inputs', () => {\n+            expect(isBase64Safe(null as any)).toBe(false)\n+            expect(isBase64Safe(undefined as any)).toBe(false)\n+            expect(isBase64Safe(123 as any)).toBe(false)\n+            expect(isBase64Safe({} as any)).toBe(false)\n+            expect(isBase64Safe([] as any)).toBe(false)\n+        })\n+\n+        it('should return true for valid base64 strings', () => {\n+            expect(isBase64Safe('SGVsbG8gV29ybGQ=')).toBe(true)\n+            expect(isBase64Safe('dGVzdA==')).toBe(true)\n+            expect(isBase64Safe('YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NTY3ODk=')).toBe(true)\n+            expect(isBase64Safe('')).toBe(true) // Empty string is valid base64\n+        })\n+\n+        it('should return false for invalid base64 strings', () => {\n+            expect(isBase64Safe('SGVsbG8gV29ybGQ')).toBe(false) // Missing padding\n+            expect(isBase64Safe('SGVsbG8gV29ybGQ===')).toBe(false) // Too much padding\n+            expect(isBase64Safe('SGVsbG8_V29ybGQ=')).toBe(false) // Invalid character\n+            expect(isBase64Safe('Hello World')).toBe(false) // Not base64\n+            expect(isBase64Safe('*&^%$#@!')).toBe(false) // Special characters\n+        })\n+\n+        it('should handle large strings efficiently', () => {\n+            const superLargeValidBase64 = 'A'.repeat(1000000)\n+            expect(isBase64Safe(superLargeValidBase64)).toBe(true)\n+\n+            const invalidAtStart = '?' + 'A'.repeat(999999)\n+            expect(isBase64Safe(invalidAtStart)).toBe(false)\n+\n+            const invalidAtEnd = 'A'.repeat(999999) + '?'\n+            expect(isBase64Safe(invalidAtEnd)).toBe(false)\n+\n+            const invalidAtMiddle = 'A'.repeat(500000) + '?' + 'A'.repeat(499999)\n+            expect(isBase64Safe(invalidAtMiddle)).toBe(false)\n+\n+            const invalidAtChunkBoundary = 'A'.repeat(99999) + '?' + 'A'.repeat(900000)\n+            expect(isBase64Safe(invalidAtChunkBoundary)).toBe(false)\n+\n+            const invalidAtMultipleChunkBoundaries =\n+                'A'.repeat(99999) + '?' +\n+                'A'.repeat(99999) + '?' +\n+                'A'.repeat(800000)\n+            expect(isBase64Safe(invalidAtMultipleChunkBoundaries)).toBe(false)\n+        })\n+\n+        // The case that produced the error\n+        it('should handle exactly 4,053,844 character strings', () => {\n+            const exactSizeValidString = 'A'.repeat(4053844)\n+            expect(isBase64Safe(exactSizeValidString)).toBe(true)\n+\n+            const invalidAtStartExact = '?' + 'A'.repeat(4053843)\n+            expect(isBase64Safe(invalidAtStartExact)).toBe(false)\n+\n+            const invalidAtMiddleExact = 'A'.repeat(2026922) + '?' + 'A'.repeat(2026921)\n+            expect(isBase64Safe(invalidAtMiddleExact)).toBe(false)\n+\n+            const invalidAtEndExact = 'A'.repeat(4053843) + '?'\n+            expect(isBase64Safe(invalidAtEndExact)).toBe(false)\n+\n+            expect(isBase64Safe(exactSizeValidString)).toBe(true)\n+            expect(isBase64Safe(exactSizeValidString)).toBe(true)\n+            expect(isBase64Safe(invalidAtMiddleExact)).toBe(false)\n+        })\n+\n+        it('should validate random valid base64 strings of various lengths', () => {\n+            // Test valid strings\n+            for (let i = 0; i < 10000; i++) {\n+                // Generate random length between 0 and 1000000\n+                const length = Math.floor(Math.pow(Math.random(), 2) * 1000000)\n+                const validString = generateBase64(length)\n+\n+                const result = isBase64Safe(validString)\n+                if (!result) {\n+                    // If validation fails, log the string details\n+                    console.error(`Valid string failed validation: Length=${validString.length}`)\n+                    console.error(`String: ${validString}`)\n+                    console.error(`Padding count: ${(validString.match(/=/g) || []).length}`)\n+                }\n+                expect(result).toBe(true)\n+            }\n+        })\n+\n+        it('should identify random invalid base64 strings of various lengths', () => {\n+            // Test invalid strings\n+            for (let i = 0; i < 10000; i++) {\n+                // Generate random length between 1 and 1000000\n+                const length = Math.max(1, Math.floor(Math.pow(Math.random(), 2) * 1000000))\n+                const invalidString = generateInvalidBase64(length)\n+\n+                const result = isBase64Safe(invalidString)\n+                if (result) {\n+                    // If validation unexpectedly passes, log the string details\n+                    console.error(`Invalid string incorrectly passed validation: Length=${invalidString.length}`)\n+                    console.error(`String: ${invalidString}`)\n+                    console.error(`Padding count: ${(invalidString.match(/=/g) || []).length}`)\n+                }\n+                expect(result).toBe(false)\n+            }\n+        })\n+    })\n+})\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14465",
    "pr_id": 14465,
    "issue_id": 6486,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "Incorrect typing of `browser.execute()` (InnerArguments) for elements\n**Environment:**\r\n - **WebdriverIO version:** `7.0.5`\r\n - **Mode:** WDIO Testrunner\r\n - **If WDIO Testrunner, running sync/async:** async\r\n - **Node.js version:** `15.6.0`\r\n - **NPM version:** `7.4.0`\r\n - **Browser name and version:** _not applicable_\r\n - **Platform name and version:** _not applicable_\r\n - **Additional wdio packages used (if applicable):** _not applicable_\r\n\r\n**Config of WebdriverIO**\r\n_not applicable_\r\n\r\n**Describe the bug**\r\nIn version 7 of WDIO, the type definitions for `browser.execute()` seem to have changed but have become incorrect when using `WebdriverIO.Element`s as arguments. The type definitions do not model the conversion of `WebdriverIO.Element`s into W3C DOM `Element`s. Instead, _inner arguments_ types are expected to also be the _outer_ ones.\r\n\r\n**To Reproduce**\r\n\r\n1. Setup WebdriverIO project with TypeScript as described here:\r\n2. Put this code into any file:\r\n```javascript\r\nfunction foo(wdioElement: WebdriverIO.Element) {\r\n  await browser.execute((domElement: Element) => {\r\n    domElement.addEventListener(\"click\", () => console.log(\"whatever\"));\r\n  }, wdioElement);\r\n}\r\n```\r\n3. Run TypeScript to check for errors\r\n\r\n**Expected behavior**\r\nTS should not show errors since at runtime `WebdriverIO.Element` is landing in the browser-side as a DOM `Element`. Note, that stripping the `Element` type from `domElement: Element` will move the error to the `domElement.addEventListener(...)` line.\r\n\r\n**Log**\r\n```\r\nsystem-tests/src/safariClickHack.ts:35:8 - error TS2345: Argument of type 'WebdriverIO.Element' is not assignable to parameter of type 'Element'.\r\n  Type 'Element' is missing the following properties from type 'Element': assignedSlot, attributes, classList, className, and 120 more.\r\n\r\n35     }, element);\r\n          ~~~~~~~\r\n```\r\n\r\n**Additional context**\r\nUsed TypeScript version `4.1.5`.",
    "issue_word_count": 251,
    "test_files_count": 4,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/browser/execute.ts",
      "packages/webdriverio/src/commands/browser/executeAsync.ts",
      "packages/webdriverio/src/commands/element/execute.ts",
      "packages/webdriverio/src/commands/element/executeAsync.ts",
      "packages/webdriverio/src/commands/element/getHTML.ts",
      "packages/webdriverio/src/types.ts",
      "packages/webdriverio/tests/commands/browser/execute.test-d.ts",
      "packages/webdriverio/tests/commands/browser/executeAsync.test-d.ts",
      "packages/webdriverio/tests/commands/element/execute.test-d.ts",
      "packages/webdriverio/tests/commands/element/executeAsync.test-d.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/browser/execute.test-d.ts",
      "packages/webdriverio/tests/commands/browser/executeAsync.test-d.ts",
      "packages/webdriverio/tests/commands/element/execute.test-d.ts",
      "packages/webdriverio/tests/commands/element/executeAsync.test-d.ts"
    ],
    "base_commit": "ce760c90fbe71457db1144a043746842331a6a25",
    "head_commit": "e2250c38e475d39fc8057e5e100540948d91acfb",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14465",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14465",
    "dockerfile": "",
    "pr_merged_at": "2025-05-18T20:43:26.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/execute.ts b/packages/webdriverio/src/commands/browser/execute.ts\nindex b15e660f200..60e24c37327 100644\n--- a/packages/webdriverio/src/commands/browser/execute.ts\n+++ b/packages/webdriverio/src/commands/browser/execute.ts\n@@ -6,6 +6,7 @@ import { LocalValue } from '../../utils/bidi/value.js'\n import { parseScriptResult } from '../../utils/bidi/index.js'\n import { getContextManager } from '../../session/context.js'\n import { polyfillFn } from '../../session/polyfill.js'\n+import type { TransformElement, TransformReturn } from '../../types.js'\n \n /**\n  *\n@@ -44,9 +45,9 @@ import { polyfillFn } from '../../session/polyfill.js'\n  */\n export async function execute<ReturnValue, InnerArguments extends unknown[]> (\n     this: WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser,\n-    script: string | ((...innerArgs: InnerArguments) => ReturnValue),\n+    script: string | ((...innerArgs: TransformElement<InnerArguments>) => ReturnValue),\n     ...args: InnerArguments\n-): Promise<ReturnValue> {\n+): Promise<TransformReturn<ReturnValue>> {\n     /**\n      * parameter check\n      */\n\ndiff --git a/packages/webdriverio/src/commands/browser/executeAsync.ts b/packages/webdriverio/src/commands/browser/executeAsync.ts\nindex c4c7246f76c..0b8b63de939 100644\n--- a/packages/webdriverio/src/commands/browser/executeAsync.ts\n+++ b/packages/webdriverio/src/commands/browser/executeAsync.ts\n@@ -6,6 +6,7 @@ import { LocalValue } from '../../utils/bidi/value.js'\n import { parseScriptResult } from '../../utils/bidi/index.js'\n import { getContextManager } from '../../session/context.js'\n import { polyfillFn } from '../../session/polyfill.js'\n+import type { TransformElement } from '../../types.js'\n \n /**\n  * :::warning\n@@ -44,6 +45,15 @@ import { polyfillFn } from '../../session/polyfill.js'\n         // node.js context - client and console are available\n         console.log(result) // outputs: 10\n     });\n+\n+    :executeAsync.ts\n+    // explicitly type the return value of the script to ensure type safety\n+    const result: number = await browser.executeAsync(function(a, b, c, d, done) {\n+        // browser context - you may not access client or console\n+        setTimeout(() => {\n+            done(a + b + c + d)\n+        }, 3000);\n+    }, 1, 2, 3, 4)\n  * </example>\n  *\n  * @param {String|Function} script     The script to execute.\n@@ -59,7 +69,12 @@ export async function executeAsync<ReturnValue, InnerArguments extends unknown[]\n     this: WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser,\n     script:\n         string |\n-        ((...args: [...innerArgs: InnerArguments, callback: (result?: ReturnValue) => void]) => void),\n+        (\n+            (\n+                ...args: [...innerArgs: { [K in keyof InnerArguments]: TransformElement<InnerArguments[K]> },\n+                callback: (result?: TransformElement<ReturnValue>) => void]\n+            ) => void\n+        ),\n     ...args: InnerArguments\n ): Promise<ReturnValue> {\n     /**\n\ndiff --git a/packages/webdriverio/src/commands/element/execute.ts b/packages/webdriverio/src/commands/element/execute.ts\nindex c7e08b8e282..cb09229113a 100644\n--- a/packages/webdriverio/src/commands/element/execute.ts\n+++ b/packages/webdriverio/src/commands/element/execute.ts\n@@ -1,4 +1,5 @@\n import { getBrowserObject } from '@wdio/utils'\n+import type { TransformElement, TransformReturn } from '../../types.js'\n \n /**\n  *\n@@ -38,10 +39,11 @@ import { getBrowserObject } from '@wdio/utils'\n  */\n export async function execute<ReturnValue, InnerArguments extends unknown[]> (\n     this: WebdriverIO.Element,\n-    script: string | ((...innerArgs: [WebdriverIO.Element, ...InnerArguments]) => ReturnValue),\n+    script: string | ((...innerArgs: TransformElement<[WebdriverIO.Element, ...InnerArguments]>) => ReturnValue),\n     ...args: InnerArguments\n-): Promise<ReturnValue> {\n-    const browser = getBrowserObject(this)\n-    await this.waitForExist()\n-    return browser.execute(script, this, ...args)\n+): Promise<TransformReturn<ReturnValue>> {\n+    const scope = this as WebdriverIO.Element\n+    const browser = getBrowserObject(scope)\n+    await scope.waitForExist()\n+    return browser.execute(script, scope, ...args)\n }\n\ndiff --git a/packages/webdriverio/src/commands/element/executeAsync.ts b/packages/webdriverio/src/commands/element/executeAsync.ts\nindex 146b64a07fd..ed79ab2a8cf 100644\n--- a/packages/webdriverio/src/commands/element/executeAsync.ts\n+++ b/packages/webdriverio/src/commands/element/executeAsync.ts\n@@ -1,5 +1,5 @@\n import { getBrowserObject } from '@wdio/utils'\n-\n+import type { TransformElement } from '../../types.js'\n /**\n  * :::warning\n  * The `executeAsync` command is deprecated and will be removed in a future version.\n@@ -36,7 +36,23 @@ import { getBrowserObject } from '@wdio/utils'\n                 done(elem.textContent + a + b + c + d)\n             }, 3000);\n         }, 1, 2, 3, 4);\n+\n         // node.js context - client and console are available\n+        console.log(text); // outputs \"Hello World1234\"\n+    });\n+\n+    :executeAsync.ts\n+    it('should wait for the element to exist, then executes async javascript on the page with the element as first argument', async () => {\n+        await browser.setTimeout({ script: 5000 })\n+\n+        // explicitly type the return value of the script to ensure type safety\n+        const text: number = await $('div').execute((elem, a, b, c, d) => {\n+            // browser context - you may not access client or console\n+            setTimeout(() => {\n+                done(elem.textContent + a + b + c + d)\n+            }, 3000);\n+        }, 1, 2, 3, 4);\n+\n         // node.js context - client and console are available\n         console.log(text); // outputs \"Hello World1234\"\n     });\n@@ -55,9 +71,18 @@ export async function executeAsync<ReturnValue, InnerArguments extends unknown[]\n     this: WebdriverIO.Browser | WebdriverIO.Element,\n     script:\n         string |\n-        ((...args: [...innerArgs: [WebdriverIO.Element, ...InnerArguments], callback: (result?: ReturnValue) => void]) => void),\n+        (\n+            (\n+                ...args: [\n+                    element: HTMLElement,\n+                    ...innerArgs: { [K in keyof InnerArguments]: TransformElement<InnerArguments[K]> },\n+                    callback: (result?: TransformElement<ReturnValue>) => void\n+                ]\n+            ) => void\n+        ),\n     ...args: InnerArguments\n ): Promise<ReturnValue> {\n-    const browser = getBrowserObject(this)\n-    return browser.executeAsync(script, this, ...args)\n+    const scope = this as WebdriverIO.Element\n+    const browser = getBrowserObject(scope)\n+    return browser.executeAsync(script, scope, ...args)\n }\n\ndiff --git a/packages/webdriverio/src/commands/element/getHTML.ts b/packages/webdriverio/src/commands/element/getHTML.ts\nindex 10550013179..ca293925e3c 100644\n--- a/packages/webdriverio/src/commands/element/getHTML.ts\n+++ b/packages/webdriverio/src/commands/element/getHTML.ts\n@@ -141,9 +141,8 @@ export async function getHTML(\n         /**\n          * then get the HTML of the element and its shadow roots\n          */\n-        const { html, shadowElementHTML } = await browser.execute(\n+        const { html, shadowElementHTML } = await this.execute(\n             getHTMLShadowScript,\n-            { [ELEMENT_KEY]: this.elementId } as unknown as HTMLElement,\n             includeSelectorTag,\n             elementsWithShadowRootAndIdVerified\n         )\n\ndiff --git a/packages/webdriverio/src/types.ts b/packages/webdriverio/src/types.ts\nindex 3f179a62dd8..7e8d6e6f4aa 100644\n--- a/packages/webdriverio/src/types.ts\n+++ b/packages/webdriverio/src/types.ts\n@@ -677,6 +677,22 @@ export interface SaveScreenshotOptions {\n     }\n }\n \n+export type TransformElement<T> =\n+    T extends WebdriverIO.Element ? HTMLElement :\n+        T extends ChainablePromiseElement ? HTMLElement :\n+            T extends WebdriverIO.Element[] ? HTMLElement[] :\n+                T extends ChainablePromiseArray ? HTMLElement[] :\n+                    T extends [infer First, ...infer Rest] ? [TransformElement<First>, ...TransformElement<Rest>] :\n+                        T extends Array<infer U> ? Array<TransformElement<U>> :\n+                            T\n+\n+export type TransformReturn<T> =\n+    T extends HTMLElement ? WebdriverIO.Element :\n+        T extends HTMLElement[] ? WebdriverIO.Element[] :\n+            T extends [infer First, ...infer Rest] ? [TransformReturn<First>, ...TransformReturn<Rest>] :\n+                T extends Array<infer U> ? Array<TransformReturn<U>> :\n+                    T\n+\n declare global {\n     namespace WebdriverIO {\n         /**\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/browser/execute.test-d.ts b/packages/webdriverio/tests/commands/browser/execute.test-d.ts\nnew file mode 100644\nindex 00000000000..8e17ecd6fad\n--- /dev/null\n+++ b/packages/webdriverio/tests/commands/browser/execute.test-d.ts\n@@ -0,0 +1,23 @@\n+import { expectTypeOf } from 'vitest'\n+import { remote } from '../../../src/index.js'\n+\n+test('properly transforms element arguments', async () => {\n+    const browser = await remote({\n+        capabilities: {}\n+    })\n+    const elem = await browser.$('body')\n+    const result = await browser.execute((a, b, c, d) => {\n+        expectTypeOf(a).toEqualTypeOf<number>()\n+        expectTypeOf(b).toEqualTypeOf<string>()\n+        expectTypeOf(c).toEqualTypeOf<boolean>()\n+        expectTypeOf(d).toEqualTypeOf<HTMLElement>()\n+        return document.body\n+    }, 1, '2', true, elem)\n+    expectTypeOf(result).toEqualTypeOf<WebdriverIO.Element>()\n+\n+    const result2 = await browser.execute(() => document.querySelector('div'))\n+    expectTypeOf(result2).toEqualTypeOf<WebdriverIO.Element | null>()\n+\n+    const result3 = await browser.execute(() => 123)\n+    expectTypeOf(result3).toEqualTypeOf<number>()\n+})\n\\ No newline at end of file\n\ndiff --git a/packages/webdriverio/tests/commands/browser/executeAsync.test-d.ts b/packages/webdriverio/tests/commands/browser/executeAsync.test-d.ts\nnew file mode 100644\nindex 00000000000..7f76e1e52ae\n--- /dev/null\n+++ b/packages/webdriverio/tests/commands/browser/executeAsync.test-d.ts\n@@ -0,0 +1,29 @@\n+import { expectTypeOf } from 'vitest'\n+import { remote } from '../../../src/index.js'\n+\n+test('properly transforms element arguments', async () => {\n+    const browser = await remote({\n+        capabilities: {}\n+    })\n+    const elem = await browser.$('body')\n+\n+    const result: WebdriverIO.Element = await browser.executeAsync((a, b, c, d, done) => {\n+        expectTypeOf(a).toEqualTypeOf<number>()\n+        expectTypeOf(b).toEqualTypeOf<string>()\n+        expectTypeOf(c).toEqualTypeOf<boolean>()\n+        expectTypeOf(d).toEqualTypeOf<HTMLElement>()\n+        done(document.body)\n+    }, 1, '2', true, elem)\n+    expectTypeOf(result).toEqualTypeOf<WebdriverIO.Element>()\n+\n+    const el: WebdriverIO.Element | null = await browser.executeAsync((done) => {\n+        done(document.querySelector('body'))\n+    })\n+    expectTypeOf(el).toEqualTypeOf<WebdriverIO.Element | null>()\n+\n+    const result2: WebdriverIO.Element | null = await browser.executeAsync((done) => done(document.querySelector('div')))\n+    expectTypeOf(result2).toEqualTypeOf<WebdriverIO.Element | null>()\n+\n+    const result3: number = await browser.executeAsync((done) => done(123))\n+    expectTypeOf(result3).toEqualTypeOf<number>()\n+})\n\\ No newline at end of file\n\ndiff --git a/packages/webdriverio/tests/commands/element/execute.test-d.ts b/packages/webdriverio/tests/commands/element/execute.test-d.ts\nnew file mode 100644\nindex 00000000000..0b1217dbb1e\n--- /dev/null\n+++ b/packages/webdriverio/tests/commands/element/execute.test-d.ts\n@@ -0,0 +1,24 @@\n+import { expectTypeOf } from 'vitest'\n+import { remote } from '../../../src/index.js'\n+\n+test('properly transforms element arguments', async () => {\n+    const browser = await remote({\n+        capabilities: {}\n+    })\n+    const elem = await browser.$('body')\n+    const result = await elem.execute((el, a, b, c, d) => {\n+        expectTypeOf(el).toEqualTypeOf<HTMLElement>()\n+        expectTypeOf(a).toEqualTypeOf<number>()\n+        expectTypeOf(b).toEqualTypeOf<string>()\n+        expectTypeOf(c).toEqualTypeOf<boolean>()\n+        expectTypeOf(d).toEqualTypeOf<HTMLElement>()\n+        return document.body\n+    }, 1, '2', true, elem)\n+    expectTypeOf(result).toEqualTypeOf<WebdriverIO.Element>()\n+\n+    const result2 = await elem.execute(() => document.querySelector('div'))\n+    expectTypeOf(result2).toEqualTypeOf<WebdriverIO.Element | null>()\n+\n+    const result3 = await elem.execute(() => 123)\n+    expectTypeOf(result3).toEqualTypeOf<number>()\n+})\n\\ No newline at end of file\n\ndiff --git a/packages/webdriverio/tests/commands/element/executeAsync.test-d.ts b/packages/webdriverio/tests/commands/element/executeAsync.test-d.ts\nnew file mode 100644\nindex 00000000000..d9aadd3ef92\n--- /dev/null\n+++ b/packages/webdriverio/tests/commands/element/executeAsync.test-d.ts\n@@ -0,0 +1,30 @@\n+import { expectTypeOf } from 'vitest'\n+import { remote } from '../../../src/index.js'\n+\n+test('properly transforms element arguments', async () => {\n+    const browser = await remote({\n+        capabilities: {}\n+    })\n+    const elem = await browser.$('body')\n+\n+    const result: WebdriverIO.Element = await elem.executeAsync((el, a, b, c, d, done) => {\n+        expectTypeOf(el).toEqualTypeOf<HTMLElement>()\n+        expectTypeOf(a).toEqualTypeOf<number>()\n+        expectTypeOf(b).toEqualTypeOf<string>()\n+        expectTypeOf(c).toEqualTypeOf<boolean>()\n+        expectTypeOf(d).toEqualTypeOf<HTMLElement>()\n+        done(document.body)\n+    }, 1, '2', true, elem)\n+    expectTypeOf(result).toEqualTypeOf<WebdriverIO.Element>()\n+\n+    const el: WebdriverIO.Element | null = await elem.executeAsync((el, done) => {\n+        done(document.querySelector('body'))\n+    })\n+    expectTypeOf(el).toEqualTypeOf<WebdriverIO.Element | null>()\n+\n+    const result2: WebdriverIO.Element | null = await elem.executeAsync((el, done) => done(document.querySelector('div')))\n+    expectTypeOf(result2).toEqualTypeOf<WebdriverIO.Element | null>()\n+\n+    const result3: number = await elem.executeAsync((el, done) => done(123))\n+    expectTypeOf(result3).toEqualTypeOf<number>()\n+})\n\\ No newline at end of file\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14448",
    "pr_id": 14448,
    "issue_id": 14295,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Errors interacting with native browser dialogs (Bidi protocol)\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.12.0\n\n### Node.js Version\n\n20.17.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\n    browserName: \"chrome\",\n    \"goog:chromeOptions\": {\n            args: [\n            \"--no-sandbox\",\n            \"--start-maximized\",\n            \"--window-size=1920,1080\",\n            \"--disable-dev-shm-usage\",\n            //\"--headless=new\",\n            \"--lang=en-GB\"\n        ]\n    },\n    // \"wdio:enforceWebDriverClassic\": true,\n}\n```\n\n### What happened?\n\nI am testing an application that uses native browser dialogs to confirm some user actions (like deletes, ...). With Bidi protocol, I face 2 issues that do not happen with WebdriverClassic.\n\n1. Sometimes, the dialog does not open or opens and closes automatically and almost immediately. This causes the error: \"no such alert: WebDriverError: no such alert\"\n2. When the first error does not happen, and there is an interaction with the dialog, then there is the  following error on the next action after the dialog interaction: \"no such frame - Context 9467FF542C3FAB062A8D6E7FF8570DD9 not found\". When this error happens, the test breaks and the browser remains open until I manually close it.\n\n### What is your expected behavior?\n\nTo have a similar behavior as we have running the tests with WebdriverClassic.\n\n### How to reproduce the bug.\n\nFor the first error, here is a reproducible example:\n[browser_native_dialogs.zip](https://github.com/user-attachments/files/19289893/browser_native_dialogs.zip)\n\nAnd the logs of the error happening: \n[log_1.txt](https://github.com/user-attachments/files/19290056/log_1.txt)\n\n\nFor the second example, I cannot provide a reproducible example (maybe after you first the first one, you will face this one), just the logs:\n\n[log_2.txt](https://github.com/user-attachments/files/19290432/log_2.txt)\n\n### Relevant log output\n\n```typescript\nProvided above.\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 326,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/session/dialog.ts",
      "packages/webdriverio/tests/commands/dialog/accept.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/dialog/accept.test.ts"
    ],
    "base_commit": "3e1a01d4b7ee4a493b5ea10e89d288d774788eea",
    "head_commit": "42960d186300b51651c516b5c176205be1a4597b",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14448",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14448",
    "dockerfile": "",
    "pr_merged_at": "2025-05-03T16:28:51.000Z",
    "patch": "diff --git a/packages/webdriverio/src/session/dialog.ts b/packages/webdriverio/src/session/dialog.ts\nindex 55e05a4b878..5d2def7d6d9 100644\n--- a/packages/webdriverio/src/session/dialog.ts\n+++ b/packages/webdriverio/src/session/dialog.ts\n@@ -1,5 +1,6 @@\n import { type local } from 'webdriver'\n import { SessionManager } from './session.js'\n+import { getContextManager } from './context.js'\n \n export function getDialogManager(browser: WebdriverIO.Browser) {\n     return SessionManager.getSessionManager(browser, DialogManager)\n@@ -111,6 +112,13 @@ export class Dialog {\n      * @returns {Promise<void>}\n      */\n     async accept(userText?: string) {\n+        const contextManager = getContextManager(this.#browser)\n+        const context = await contextManager.getCurrentContext()\n+\n+        if (this.#context !== context) {\n+            return\n+        }\n+\n         await this.#browser.browsingContextHandleUserPrompt({\n             accept: true,\n             context: this.#context,\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/dialog/accept.test.ts b/packages/webdriverio/tests/commands/dialog/accept.test.ts\nnew file mode 100644\nindex 00000000000..c84329d79ea\n--- /dev/null\n+++ b/packages/webdriverio/tests/commands/dialog/accept.test.ts\n@@ -0,0 +1,114 @@\n+import { describe, it, expect, beforeEach, vi, type Mock } from 'vitest'\n+import { remote } from '../../../src/index.js'\n+import { Dialog } from '../../../src/session/dialog.js'\n+import type { BrowsingContextUserPromptOpenedParameters } from '../../../../webdriver/build/bidi/localTypes.js'\n+\n+vi.mock('../../../src/session/context.js', () => ({\n+    getContextManager: vi.fn(),\n+}))\n+import { getContextManager } from '../../../src/session/context.js'\n+\n+describe('accept', () => {\n+    let browser: WebdriverIO.Browser\n+    let dialog: Dialog\n+    let mockContextManager: { getCurrentContext: () => Promise<string> }\n+    let browseStub\n+\n+    beforeEach(async () => {\n+        browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: { browserName: 'dialog' }\n+        })\n+\n+        browseStub = vi.spyOn(browser, 'browsingContextHandleUserPrompt')\n+            .mockResolvedValue({})\n+\n+        mockContextManager = {\n+            getCurrentContext: vi.fn()\n+        };\n+\n+        (getContextManager as Mock).mockReturnValue(mockContextManager)\n+    })\n+\n+    it('should NOT call browsingContextHandleUserPrompt if contexts differ', async () => {\n+        const fakeEvent = {\n+            context: 'ctx-A',\n+            message: 'ignored',\n+            defaultValue: '',\n+            type: 'alert',\n+        } as BrowsingContextUserPromptOpenedParameters\n+\n+        dialog = new Dialog(fakeEvent, browser)\n+\n+        // simulate a *different* active context\n+        mockContextManager.getCurrentContext = vi.fn().mockResolvedValue('ctx-B')\n+        await dialog.accept('foo')\n+\n+        expect(browseStub).not.toHaveBeenCalled()\n+    })\n+\n+    it('should call browsingContextHandleUserPrompt if contexts match', async () => {\n+        const fakeEvent = {\n+            context: 'ctx-A',\n+            message: 'ignored',\n+            defaultValue: '',\n+            type: 'prompt',\n+        } as BrowsingContextUserPromptOpenedParameters\n+\n+        dialog = new Dialog(fakeEvent, browser)\n+\n+        // simulate *same* active context\n+        mockContextManager.getCurrentContext = vi.fn().mockResolvedValue('ctx-A')\n+        await dialog.accept('my input')\n+\n+        expect(browseStub).toHaveBeenCalledWith({\n+            accept: true,\n+            context: 'ctx-A',\n+            userText: 'my input'\n+        })\n+    })\n+\n+    it('should call getCurrentContext once and pass undefined userText when none provided', async () => {\n+        const fakeEvent = {\n+            context: 'ctx-A',\n+            message: 'msg',\n+            defaultValue: '',\n+            type: 'prompt',\n+        } as BrowsingContextUserPromptOpenedParameters\n+\n+        dialog = new Dialog(fakeEvent, browser)\n+        mockContextManager.getCurrentContext = vi.fn().mockResolvedValue('ctx-A')\n+\n+        await dialog.accept()\n+\n+        expect(mockContextManager.getCurrentContext).toHaveBeenCalledTimes(1)\n+\n+        expect(browseStub).toHaveBeenCalledWith({\n+            accept: true,\n+            context: 'ctx-A',\n+            userText: undefined\n+        })\n+    })\n+\n+    it('should handle any dialog type the same way when contexts match', async () => {\n+        for (const type of ['alert', 'confirm', 'prompt', 'beforeunload'] as const) {\n+            const fakeEvent = {\n+                context: 'ctx-X',\n+                message: 'm',\n+                defaultValue: '',\n+                type: type,\n+            } as BrowsingContextUserPromptOpenedParameters\n+\n+            dialog = new Dialog(fakeEvent, browser)\n+            mockContextManager.getCurrentContext = vi.fn().mockResolvedValue('ctx-X')\n+            browseStub.mockClear()\n+\n+            await dialog.accept('foo')\n+            expect(browseStub).toHaveBeenCalledWith({\n+                accept: true,\n+                context: 'ctx-X',\n+                userText: 'foo'\n+            })\n+        }\n+    })\n+})\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14413",
    "pr_id": 14413,
    "issue_id": 14409,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Mock.respond returns an error\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.12.5\n\n### Node.js Version\n\n20.15.1\n\n### Mode\n\nWDIO Testrunner\n\n### What happened?\n\nWhen setting the response of a mock, the error `Invalid input in \\\"body\\\".` is thrown. I've tried simplifying the body of the mock as much as possible, and still get the same error.\n\n### What is your expected behavior?\n\nThe mock response is set properly without an error, and returns when a request is made to the specified path.\n\n### How to reproduce the bug.\n\n```js\n  const recommendationsMock = await browser.mock('https://some.site.com/some/endPoint');\n\n  recommendationsMock.respond({ test: 'some string' }, {\n    statusCode: 200,\n    headers: {\n      'access-control-allow-origin': '*',\n      'access-control-allow-methods': '*',\n      'access-control-allow-headers': '*',\n      'content-type': 'application/json; charset=utf-8'\n    },\n    fetchResponse: false\n  });\n```\n\n1. Create the mock, and set a response.\n2. Reach a page in the test that will make a network request that should trigger the mocked response.\n3. The error `BIDI RESULT {\"error\":\"invalid argument\",\"id\":95,\"message\":\"Invalid input in \\\"body\\\".\",\"type\":\"error\"}` will return from BiDi.\n\n### Relevant log output\n\n```typescript\n[0-0] 2025-04-14T14:01:15.462Z INFO webdriver: BIDI COMMAND network.provideResponse {\"request\":\"D6E0BC8B5795336DA041D144FD908717\",\"body\":\"{\\\"test\\\":\\\"some string\\\"}\",\"headers\":[{\"name\":\"access-control-allow-origin\",\"value\":{\"type\":\"string\",\"value\":\"*\"}},{\"name\":\"access-control-allow-methods\",\"value\":{\"type\":\"string\",\"value\":\"*\"}},{\"name\":\"access-control-allow-headers\",\"value\":{\"type\":\"string\",\"value\":\"*\"}},{\"name\":\"content-type\",\"value\":{\"type\":\"string\",\"value\":\"application/json; charset=utf-8\"}}],\"statusCode\":200}\n[0-0] 2025-04-14T14:01:15.464Z INFO webdriver: BIDI RESULT {\"error\":\"invalid argument\",\"id\":95,\"message\":\"Invalid input in \\\"body\\\".\",\"type\":\"error\"}\n[0-0] Error: WebDriver Bidi command \"network.provideResponse\" failed with error: invalid argument - Invalid input in \"body\".\n[0-0]     at BidiHandler.send (file:///Users/user/code/web-e2e-tests/node_modules/webdriver/build/node.js:472:23)\n[0-0]     at BidiHandler.networkProvideResponse (file:///Users/user/code/web-e2e-tests/node_modules/webdriver/build/node.js:886:31)\n[0-0]     at Browser.value (file:///Users/user/code/web-e2e-tests/node_modules/webdriver/build/node.js:1298:26)\n[0-0]     at Browser.wrapCommandFn (/Users/user/code/web-e2e-tests/node_modules/webdriverio/node_modules/@wdio/utils/build/index.js:907:32)\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 417,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/utils/interception/index.ts",
      "packages/webdriverio/tests/utils/interception/index.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/utils/interception/index.test.ts"
    ],
    "base_commit": "58194b5992cea36818c56c2e716b539c28171819",
    "head_commit": "2d1d1e950d60f1582c6fda4d8aaf8a53baac2912",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14413",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14413",
    "dockerfile": "",
    "pr_merged_at": "2025-04-18T22:42:27.000Z",
    "patch": "diff --git a/packages/webdriverio/src/utils/interception/index.ts b/packages/webdriverio/src/utils/interception/index.ts\nindex edc3d0ed32c..17fc2678aba 100644\n--- a/packages/webdriverio/src/utils/interception/index.ts\n+++ b/packages/webdriverio/src/utils/interception/index.ts\n@@ -207,11 +207,9 @@ export default class WebDriverInterception {\n             if (responseData.body) {\n                 this.#responseBodies.set(request.request.request, responseData.body)\n             }\n-            const bodyToSend = responseData.body?.type === 'string' ? responseData.body.value : responseData.body\n             return this.#browser.networkProvideResponse({\n                 request: request.request.request,\n                 ...responseData,\n-                body: bodyToSend as remote.NetworkBytesValue | undefined\n             }).catch(this.#handleNetworkProvideResponseError)\n         }\n \n",
    "test_patch": "diff --git a/packages/webdriverio/tests/utils/interception/index.test.ts b/packages/webdriverio/tests/utils/interception/index.test.ts\nindex efdf3ce447c..bc02e12514f 100644\n--- a/packages/webdriverio/tests/utils/interception/index.test.ts\n+++ b/packages/webdriverio/tests/utils/interception/index.test.ts\n@@ -254,7 +254,7 @@ describe('WebDriverInterception', () => {\n         expect(browser.networkProvideResponse).toHaveBeenCalledTimes(1)\n         expect(browser.networkProvideResponse).toHaveBeenCalledWith({\n             request: 123,\n-            body: '{\"foo\":\"bar\"}'\n+            body: { type: 'string', value: '{\"foo\":\"bar\"}' }\n         })\n         browser.emit('network.responseStarted', {\n             isBlocked: true,\n@@ -290,7 +290,7 @@ describe('WebDriverInterception', () => {\n         expect(browser.networkProvideResponse).toHaveBeenCalledTimes(1)\n         expect(browser.networkProvideResponse).toHaveBeenCalledWith({\n             request: 123,\n-            body: 'hello'\n+            body: { type: 'string', value: 'hello' }\n         })\n         expect(mock.getBinaryResponse('123')).toBeNull()\n     })\n@@ -358,7 +358,10 @@ describe('WebDriverInterception', () => {\n         [\n           [\n             {\n-              \"body\": \"{\"data\":{\"someProperty\":123}}\",\n+              \"body\": {\n+                \"type\": \"string\",\n+                \"value\": \"{\"data\":{\"someProperty\":123}}\",\n+              },\n               \"request\": \"req-123\",\n             },\n           ],\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14412",
    "pr_id": 14412,
    "issue_id": 14405,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Wrong test status when calling `this.skip()`\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\n20\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\nconst parallelConfig = {\n  user: process.env.BROWSERSTACK_USERNAME || 'BROWSERSTACK_USERNAME',\n  key: process.env.BROWSERSTACK_ACCESS_KEY || 'BROWSERSTACK_ACCESS_KEY',\n  hostname: 'hub-euw.browserstack.com',\n  capabilities: [\n    {\n      browserName: 'Chrome',\n      'bstack:options': {\n        os: 'Windows',\n        osVersion: '10',\n        browserVersion: '120.0',\n      },\n    }\n  ],\n  commonCapabilities: {\n    'bstack:options': {\n      projectName: 'wdioDupilcate',\n      buildName: 'wdioDupilcate',\n    },\n  },\n  maxInstances: 10,\n\n  afterTest: function (test, context, { error, result, duration, passed, retries }) {\n    console.log(`Test ${test.title} finished with status: ${passed ? 'passed' : 'failed'}`);\n  }\n};\n```\n\n### What happened?\n\nWhen skipping a test using the `this.skip()` command, the result received at `afterTest` hook is reporting the test as failed. The result object in afterTest hook is set as failed. However we are seeing that in the WDIOReporter the onSkipTest() gets triggered with the status as skip. \n\n### What is your expected behavior?\n\nThe `result` object should not contain the test status as skipped instead of failed. No exceptions should be there.\n\n### How to reproduce the bug.\n\nSample Test Snippet\n\n```js\ndescribe(\"Title Check and Skip Test\", function () {\n  it(\"check title and skip test\", async function () {\n    const title = await browser.getTitle();\n    this.skip(); // Skip this test case\n  });\n});\n```\n\nAfterTest Hook\n\n```js\n  afterTest: function (test, context, { error, result, duration, passed, retries }) {\n    console.log(`Test ${test.title} finished with status: ${passed ? 'passed' : 'failed'}`);\n  }\n```\n\n\n### Relevant log output\n\n```typescript\n➜  webdriverio-browserstack git:(master) ✗ npm run test\n\n> webdriverio-browserstack@1.0.1 test\n> npx wdio conf/test.conf.js\n\nExecution of 1 workers started at 2025-04-11T09:39:08.545Z\n\n[0-0] RUNNING in Chrome - file:///tests/specs/test.js\n[0-0] Test check title and skip test finished with status: failed\n[0-0] PASSED in Chrome - file:///tests/specs/test.js\n\nSpec Files:      1 passed, 1 total (100% completed) in 00:00:28  \n\n\nVisit https://observability.browserstack.com/builds/qgelnvlg4ip19nallfqxm7lleb8ihcqrijmaetno to view build report, insights, and many more debugging information all at one place!\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 371,
    "test_files_count": 2,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "packages/wdio-utils/src/test-framework/testFnWrapper.ts",
      "packages/wdio-utils/tests/test-framework/testFnWrapper-async.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-utils/src/test-framework/testFnWrapper.ts",
      "packages/wdio-utils/tests/test-framework/testFnWrapper-async.test.ts"
    ],
    "base_commit": "c6cf43f67aa46a294a4df158ddd194d79f11ac90",
    "head_commit": "146bf028743d6cb3942a31a0291c290cf9fb40e1",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14412",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14412",
    "dockerfile": "",
    "pr_merged_at": "2025-04-16T15:12:13.000Z",
    "patch": "",
    "test_patch": "diff --git a/packages/wdio-utils/src/test-framework/testFnWrapper.ts b/packages/wdio-utils/src/test-framework/testFnWrapper.ts\nindex b5e478fa09d..265d6254664 100644\n--- a/packages/wdio-utils/src/test-framework/testFnWrapper.ts\n+++ b/packages/wdio-utils/src/test-framework/testFnWrapper.ts\n@@ -88,6 +88,7 @@ export const testFrameworkFnWrapper = async function (\n \n     let result\n     let error\n+    let skip = false\n \n     const testStart = Date.now()\n     try {\n@@ -103,12 +104,19 @@ export const testFrameworkFnWrapper = async function (\n             globalThis._wdioDynamicJasmineResultErrorList = undefined\n         }\n     } catch (_err: unknown) {\n-        const err = _err instanceof Error ? _err : new Error(typeof _err === 'string' ? _err : 'An unknown error occurred')\n-        if (err.stack) {\n-            err.stack = filterStackTrace(err.stack)\n-        }\n+        /**\n+         * To address skipping tests for Mocha and Jasmine\n+         */\n+        if (!(JSON.stringify(_err, Object.getOwnPropertyNames(_err)).includes('sync skip; aborting execution') || JSON.stringify(_err, Object.getOwnPropertyNames(_err)).includes('marked Pending'))) {\n+            const err = _err instanceof Error ? _err : new Error(typeof _err === 'string' ? _err : 'An unknown error occurred')\n+            if (err.stack) {\n+                err.stack = filterStackTrace(err.stack)\n+            }\n \n-        error = err\n+            error = err\n+        } else {\n+            skip = true\n+        }\n     }\n     const duration = Date.now() - testStart\n     const afterArgs = afterFnArgs(this)\n@@ -117,7 +125,8 @@ export const testFrameworkFnWrapper = async function (\n         error,\n         result,\n         duration,\n-        passed: !error\n+        passed: !error && !skip,\n+        skipped: skip\n     })\n \n     if (type === 'Hook' && hookName) {\n\ndiff --git a/packages/wdio-utils/tests/test-framework/testFnWrapper-async.test.ts b/packages/wdio-utils/tests/test-framework/testFnWrapper-async.test.ts\nindex e3acc3dd4fb..5b42bf21c2e 100644\n--- a/packages/wdio-utils/tests/test-framework/testFnWrapper-async.test.ts\n+++ b/packages/wdio-utils/tests/test-framework/testFnWrapper-async.test.ts\n@@ -39,7 +39,8 @@ describe('testFnWrapper', () => {\n             retries: {\n                 limit: 0,\n                 attempts: 0\n-            }\n+            },\n+            skipped: false\n         }])\n     })\n \n@@ -60,7 +61,8 @@ describe('testFnWrapper', () => {\n             retries: {\n                 limit: 11,\n                 attempts: 0\n-            }\n+            },\n+            skipped: false,\n         }])\n     })\n \n@@ -90,7 +92,37 @@ describe('testFnWrapper', () => {\n             retries: {\n                 limit: 0,\n                 attempts: 0\n-            }\n+            },\n+            skipped: false,\n+        }])\n+    })\n+\n+    it('should not throw on error on skip test', async () => {\n+        const args = buildArgs((mode: string, repeatTest: boolean, arg: any) => {\n+            throw new Error('sync skip; aborting execution')\n+        }, undefined, () => ['beforeFnArgs'], () => ['afterFnArgs'])\n+\n+        let error\n+        try {\n+            // @ts-expect-error\n+            await testFnWrapper(...args)\n+        } catch (err) {\n+            error = err\n+        }\n+\n+        expect(error).toBe(undefined)\n+        expect(executeHooksWithArgs).toBeCalledTimes(2)\n+        expect(executeHooksWithArgs).toBeCalledWith('beforeFoo', 'beforeFn', ['beforeFnArgs'])\n+        expect(executeHooksWithArgs).toBeCalledWith('afterFoo', 'afterFn', ['afterFnArgs', {\n+            duration: expect.any(Number),\n+            error: undefined,\n+            result: undefined,\n+            passed: false,\n+            retries: {\n+                limit: 0,\n+                attempts: 0\n+            },\n+            skipped: true,\n         }])\n     })\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14398",
    "pr_id": 14398,
    "issue_id": 14326,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Opening a new tab crashes webdriver\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\nlatest\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\n{\n        browserName: 'chrome',\n        'goog:chromeOptions': {\n            args: process.env.CI ? ['headless', 'disable-gpu'] : []\n        }\n    }\n```\n\n### What happened?\n\nWhen clicking on a button on a page that opens a new tab, webdriver crashes with the following error message:\n\n\n### What is your expected behavior?\n\nWebdriver should not crash.\n\n### How to reproduce the bug.\n\n```js\nimport { remote } from 'webdriverio'\n\nconst browser = await remote({\n    capabilities: {\n        browserName: 'chrome',\n        'goog:chromeOptions': {\n            args: process.env.CI ? ['headless', 'disable-gpu'] : []\n        }\n    }\n})\n\nawait browser.url('https://pestpatrol1.com/pay-now/');\nlet allTabs = await browser.getWindowHandles();\nlet currentTab = allTabs[0]\nawait browser.$('#custrefid').setValue('123');\nawait browser.$('#Submit').click();\n\n// NOTE: Everything below can be commented out and it still crashes, this is for the positive case\n// When the the number of tabs change, try to change tabs\nlet newTabs = await browser.getWindowHandles();\n\nif (newTabs.length !== allTabs.length) {\n    let newTab = newTabs.find(tab => tab !== currentTab);\n    await browser.switchToWindow(newTab);\n}\n\nawait new Promise(resolve => setTimeout(resolve, 5000));\n\nawait browser.$('#btncancel1').click();\n```\n\n\nNote that the following does work, this seems to only be an issue for standalone:\n```js\nimport { expect, browser } from '@wdio/globals'\n\ndescribe('My Login application', () => {\n    it('should login with valid credentials', async () => {\n        await browser.url('https://pestpatrol1.com/pay-now/');\n        let allTabs = await browser.getWindowHandles();\n        let currentTab = allTabs[0]\n        await browser.$('#custrefid').setValue('123');\n        await browser.$('#Submit').click();\n        \n\n        // When the the number of tabs change, try to change tabs\n        let newTabs = await browser.getWindowHandles();\n        console.log(allTabs);\n        \n        if (newTabs.length !== allTabs.length) {\n            let newTab = newTabs.find(tab => tab !== currentTab);\n            await browser.switchToWindow(newTab);\n        }\n\n        await new Promise(resolve => setTimeout(resolve, 5000));\n\n      await browser.$('#btncancel1').click();\n    })\n})\n```\n\n### Relevant log output\n\n```typescript\n2025-03-26T23:12:02.472Z INFO webdriver: Initiate new session using the WebDriver protocol\n2025-03-26T23:12:02.623Z INFO webdriver: Using Chromedriver v134.0.6998.166 from cache directory /var/folders/g_/8bjqys8d57b2pw2xs91fxl5m0000gp/T\n2025-03-26T23:12:02.633Z INFO chromedriver: Starting ChromeDriver 134.0.6998.166 (0b26d3a1ee1e44572492002c2e52ffcd13ac701b-refs/branch-heads/6998@{#2123}) on port 52454\n2025-03-26T23:12:02.633Z INFO chromedriver: Remote connections are allowed by an allowlist (0.0.0.0).\n2025-03-26T23:12:02.633Z INFO chromedriver: Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.\n2025-03-26T23:12:02.634Z INFO chromedriver: ChromeDriver was started successfully on port 52454.\n2025-03-26T23:12:03.632Z INFO @wdio/utils: Started Chromedriver v134.0.6998.166 with params --port=52454 --allowed-origins=* --allowed-ips=0.0.0.0 in 1100ms on port 52454\n2025-03-26T23:12:03.635Z INFO webdriver: [POST] http://localhost:52454/session\n2025-03-26T23:12:03.635Z INFO webdriver: DATA {\n  capabilities: {\n    alwaysMatch: {\n      browserName: 'chrome',\n      'goog:chromeOptions': [Object],\n      webSocketUrl: true,\n      unhandledPromptBehavior: 'ignore'\n    },\n    firstMatch: [ {} ]\n  }\n}\n2025-03-26T23:12:04.226Z INFO webdriver: Register BiDi handler for session with id c63499cfcd29d4c286f0d64bde64c51c\n2025-03-26T23:12:04.226Z INFO webdriver: Connecting to webSocketUrl ws://127.0.0.1:52454/session/c63499cfcd29d4c286f0d64bde64c51c\n2025-03-26T23:12:04.230Z INFO webdriver: Connected to Bidi protocol at ws://127.0.0.1:52454/session/c63499cfcd29d4c286f0d64bde64c51c\n2025-03-26T23:12:04.230Z INFO webdriver: Connected to WebDriver Bidi interface at ws://127.0.0.1:52454/session/c63499cfcd29d4c286f0d64bde64c51c\n2025-03-26T23:12:04.231Z INFO webdriver: BIDI COMMAND browsingContext.getTree {}\n2025-03-26T23:12:04.231Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.contextCreated\"]}\n2025-03-26T23:12:04.231Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"log.entryAdded\",\"browsingContext.navigationStarted\"]}\n2025-03-26T23:12:04.231Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[1319 bytes]>, contexts: undefined }\n2025-03-26T23:12:04.231Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\",\"browsingContext.fragmentNavigated\",\"network.responseCompleted\",\"network.beforeRequestSent\",\"network.fetchError\"]}\n2025-03-26T23:12:04.231Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.userPromptOpened\"]}\n2025-03-26T23:12:04.231Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\"]}\n2025-03-26T23:12:04.232Z INFO webdriver: COMMAND getWindowHandle()\n2025-03-26T23:12:04.232Z INFO webdriver: [GET] http://localhost:52454/session/c63499cfcd29d4c286f0d64bde64c51c/window\n2025-03-26T23:12:04.233Z INFO webdriver: RESULT C4ACBD240614E9524B97B1A10FE2C7C2\n2025-03-26T23:12:04.234Z INFO webdriver: BIDI RESULT {\"id\":1,\"result\":{\"contexts\":[{\"children\":[],\"clientWindow\":\"\",\"context\":\"C4ACBD240614E9524B97B1A10FE2C7C2\",\"originalOpener\":null,\"parent\":null,\"url\":\"about:blank\",\"userContext\":\"default\"}]},\"type\":\"success\"}\n2025-03-26T23:12:04.234Z INFO webdriverio:PolyfillManager: Adding polyfill script to context with id C4ACBD240614E9524B97B1A10FE2C7C2\n2025-03-26T23:12:04.234Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[442 bytes]>, contexts: [\"C4ACBD240614E9524B97B1A10FE2C7C2\"] }\n2025-03-26T23:12:04.234Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[442 bytes] webdriverioPolyfill>\",\"target\":{\"children\":[],\"clientWindow\":\"\",\"context\":\"C4ACBD240614E9524B97B1A10FE2C7C2\",\"originalOpener\":null,\"parent\":null,\"url\":\"about:blank\",\"userContext\":\"default\"},\"awaitPromise\":false}\n2025-03-26T23:12:04.235Z INFO webdriver: BIDI RESULT {\"id\":2,\"result\":{\"subscription\":\"dfab98da-f0d4-4107-901d-5319354f26a0\"},\"type\":\"success\"}\n2025-03-26T23:12:04.236Z INFO webdriver: BIDI RESULT {\"id\":3,\"result\":{\"subscription\":\"d4895911-52b2-42c0-ab51-5ed9e9a2363f\"},\"type\":\"success\"}\n2025-03-26T23:12:04.236Z INFO webdriver: BIDI RESULT {\"id\":5,\"result\":{\"subscription\":\"c5f27717-df58-45a7-98fc-8a19bd667b6c\"},\"type\":\"success\"}\n2025-03-26T23:12:04.237Z INFO webdriver: BIDI RESULT {\"id\":6,\"result\":{\"subscription\":\"716d9121-fbe6-4cb2-8085-db91b3c5c90e\"},\"type\":\"success\"}\n2025-03-26T23:12:04.237Z INFO webdriver: BIDI RESULT {\"id\":7,\"result\":{\"subscription\":\"5b0667c8-f0ab-4fc9-a935-097eb1a162ab\"},\"type\":\"success\"}\n2025-03-26T23:12:04.237Z INFO webdriver: BIDI RESULT {\"id\":4,\"result\":{\"script\":\"253ce926-9add-46bd-ae42-81c2c0f4acd8\"},\"type\":\"success\"}\n2025-03-26T23:12:04.237Z INFO webdriver: BIDI RESULT {\"id\":8,\"result\":{\"script\":\"7791a686-75bb-45c8-8e22-d82c71460e23\"},\"type\":\"success\"}\n2025-03-26T23:12:04.238Z INFO webdriver: BIDI RESULT {\"id\":9,\"result\":{\"realm\":\"990482507606306629.-2900255483271870153\",\"result\":{\"type\":\"undefined\"},\"type\":\"success\"},\"type\":\"success\"}\n2025-03-26T23:12:04.238Z INFO webdriver: BIDI COMMAND browsingContext.navigate {\"context\":\"C4ACBD240614E9524B97B1A10FE2C7C2\",\"url\":\"https://pestpatrol1.com/pay-now/\",\"wait\":\"complete\"}\n2025-03-26T23:12:06.162Z INFO webdriver: BIDI RESULT {\"id\":10,\"result\":{\"navigation\":\"df2b88a7-31e5-4370-bd2d-161e2e060cdd\",\"url\":\"https://pestpatrol1.com/pay-now/\"},\"type\":\"success\"}\n2025-03-26T23:12:06.163Z INFO webdriver: COMMAND getWindowHandles()\n2025-03-26T23:12:06.163Z INFO webdriver: [GET] http://localhost:52454/session/c63499cfcd29d4c286f0d64bde64c51c/window/handles\n2025-03-26T23:12:06.165Z INFO webdriver: RESULT [ 'C4ACBD240614E9524B97B1A10FE2C7C2' ]\n2025-03-26T23:12:06.167Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"css\",\"value\":\"#custrefid\"},\"context\":\"C4ACBD240614E9524B97B1A10FE2C7C2\"}\n2025-03-26T23:12:06.170Z INFO webdriver: BIDI RESULT {\"id\":11,\"result\":{\"nodes\":[{\"sharedId\":\"f.C4ACBD240614E9524B97B1A10FE2C7C2.d.CE9B46137BFDA880287DEC9BF9BBF76E.e.34\",\"type\":\"node\",\"value\":{\"attributes\":{\"id\":\"custrefid\",\"name\":\"custrefid\",\"required\":\"\",\"type\":\"text\",\"value\":\"\"},\"childNodeCount\":0,\"localName\":\"input\",\"namespaceURI\":\"http://www.w3.org/1999/xhtml\",\"nodeType\":1,\"shadowRoot\":{\"sharedId\":\"f.C4ACBD240614E9524B97B1A10FE2C7C2.d.CE9B46137BFDA880287DEC9BF9BBF76E.e.48\",\"type\":\"node\",\"value\":{\"childNodeCount\":1,\"mode\":\"closed\",\"nodeType\":11}}}}]},\"type\":\"success\"}\n2025-03-26T23:12:06.174Z INFO webdriver: COMMAND elementClear(\"f.C4ACBD240614E9524B97B1A10FE2C7C2.d.CE9B46137BFDA880287DEC9BF9BBF76E.e.34\")\n2025-03-26T23:12:06.174Z INFO webdriver: [POST] http://localhost:52454/session/c63499cfcd29d4c286f0d64bde64c51c/element/f.C4ACBD240614E9524B97B1A10FE2C7C2.d.CE9B46137BFDA880287DEC9BF9BBF76E.e.34/clear\n2025-03-26T23:12:06.191Z INFO webdriver: RESULT null\n2025-03-26T23:12:06.192Z INFO webdriver: COMMAND elementSendKeys(\"f.C4ACBD240614E9524B97B1A10FE2C7C2.d.CE9B46137BFDA880287DEC9BF9BBF76E.e.34\", \"123\")\n2025-03-26T23:12:06.192Z INFO webdriver: [POST] http://localhost:52454/session/c63499cfcd29d4c286f0d64bde64c51c/element/f.C4ACBD240614E9524B97B1A10FE2C7C2.d.CE9B46137BFDA880287DEC9BF9BBF76E.e.34/value\n2025-03-26T23:12:06.192Z INFO webdriver: DATA { text: '123' }\n2025-03-26T23:12:06.249Z INFO webdriver: RESULT null\n2025-03-26T23:12:06.249Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"css\",\"value\":\"#Submit\"},\"context\":\"C4ACBD240614E9524B97B1A10FE2C7C2\"}\n2025-03-26T23:12:06.251Z INFO webdriver: BIDI RESULT {\"id\":12,\"result\":{\"nodes\":[{\"sharedId\":\"f.C4ACBD240614E9524B97B1A10FE2C7C2.d.CE9B46137BFDA880287DEC9BF9BBF76E.e.50\",\"type\":\"node\",\"value\":{\"attributes\":{\"id\":\"Submit\",\"name\":\"Submit\",\"type\":\"Submit\",\"value\":\"Pay Now\"},\"childNodeCount\":0,\"localName\":\"input\",\"namespaceURI\":\"http://www.w3.org/1999/xhtml\",\"nodeType\":1,\"shadowRoot\":{\"sharedId\":\"f.C4ACBD240614E9524B97B1A10FE2C7C2.d.CE9B46137BFDA880287DEC9BF9BBF76E.e.51\",\"type\":\"node\",\"value\":{\"childNodeCount\":1,\"mode\":\"closed\",\"nodeType\":11}}}}]},\"type\":\"success\"}\n2025-03-26T23:12:06.252Z INFO webdriver: COMMAND elementClick(\"f.C4ACBD240614E9524B97B1A10FE2C7C2.d.CE9B46137BFDA880287DEC9BF9BBF76E.e.50\")\n2025-03-26T23:12:06.252Z INFO webdriver: [POST] http://localhost:52454/session/c63499cfcd29d4c286f0d64bde64c51c/element/f.C4ACBD240614E9524B97B1A10FE2C7C2.d.CE9B46137BFDA880287DEC9BF9BBF76E.e.50/click\n2025-03-26T23:12:06.284Z INFO webdriver: RESULT null\n2025-03-26T23:12:06.284Z INFO webdriver: COMMAND getWindowHandles()\n2025-03-26T23:12:06.284Z INFO webdriver: [GET] http://localhost:52454/session/c63499cfcd29d4c286f0d64bde64c51c/window/handles\n2025-03-26T23:12:07.072Z INFO webdriverio:PolyfillManager: Adding polyfill script to context with id FD12DB91BE86F1B509613A557E4F0690\n2025-03-26T23:12:07.072Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[442 bytes]>, contexts: [\"FD12DB91BE86F1B509613A557E4F0690\"] }\n2025-03-26T23:12:07.072Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[442 bytes] webdriverioPolyfill>\",\"target\":{\"children\":null,\"clientWindow\":\"\",\"context\":\"FD12DB91BE86F1B509613A557E4F0690\",\"originalOpener\":\"C4ACBD240614E9524B97B1A10FE2C7C2\",\"parent\":null,\"url\":\"about:blank\",\"userContext\":\"default\"},\"awaitPromise\":false}\n2025-03-26T23:12:07.073Z INFO webdriver: RESULT [\n  'C4ACBD240614E9524B97B1A10FE2C7C2',\n  'FD12DB91BE86F1B509613A557E4F0690'\n]\n[ 'C4ACBD240614E9524B97B1A10FE2C7C2' ]\n2025-03-26T23:12:07.074Z INFO webdriver: COMMAND switchToWindow(\"<Screenshot[base64]>\")\n2025-03-26T23:12:07.074Z INFO webdriver: [POST] http://localhost:52454/session/c63499cfcd29d4c286f0d64bde64c51c/window\n2025-03-26T23:12:07.074Z INFO webdriver: DATA { handle: 'FD12DB91BE86F1B509613A557E4F0690' }\n2025-03-26T23:12:07.081Z INFO webdriver: RESULT null\n2025-03-26T23:12:07.086Z INFO webdriver: BIDI RESULT {\"id\":13,\"result\":{\"script\":\"0cd35aa1-44ea-4e13-a970-5c977e5d69da\"},\"type\":\"success\"}\n2025-03-26T23:12:07.086Z INFO webdriver: BIDI RESULT {\"id\":14,\"result\":{\"realm\":\"-8093778767850116313.7995754667242821924\",\"result\":{\"type\":\"undefined\"},\"type\":\"success\"},\"type\":\"success\"}\n2025-03-26T23:12:07.870Z INFO webdriverio:PolyfillManager: Adding polyfill script to context with id 0D888D163B521DA053E632A9B98D7999\n2025-03-26T23:12:07.870Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[442 bytes]>, contexts: [\"0D888D163B521DA053E632A9B98D7999\"] }\n2025-03-26T23:12:07.870Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[442 bytes] webdriverioPolyfill>\",\"target\":{\"children\":null,\"clientWindow\":\"\",\"context\":\"0D888D163B521DA053E632A9B98D7999\",\"originalOpener\":\"FD12DB91BE86F1B509613A557E4F0690\",\"parent\":null,\"url\":\"about:blank\",\"userContext\":\"default\"},\"awaitPromise\":false}\n2025-03-26T23:12:07.904Z INFO webdriver: BIDI RESULT {\"error\":\"no such frame\",\"id\":15,\"message\":\"Context 0D888D163B521DA053E632A9B98D7999 not found\",\"type\":\"error\"}\nfile:///Users/xxxx/Documents/projects/wdio-test/node_modules/webdriver/build/node.js:472\n    const failError = new Error(`WebDriver Bidi command \"${params.method}\" failed`);\n                      ^\n\nError: WebDriver Bidi command \"script.addPreloadScript\" failed with error: no such frame - Context 0D888D163B521DA053E632A9B98D7999 not found\n    at BidiHandler.send (file:///Users/xxxx/Documents/projects/wdio-test/node_modules/webdriver/build/node.js:472:23)\n    at BidiHandler.scriptAddPreloadScript (file:///Users/xxxx/Documents/projects/wdio-test/node_modules/webdriver/build/node.js:912:31)\n    at Browser.value (file:///Users/xxxx/Documents/projects/wdio-test/node_modules/webdriver/build/node.js:1298:26)\n    at Browser.wrapCommandFn (file:///Users/xxxx/Documents/projects/wdio-test/node_modules/@wdio/utils/build/index.js:902:32)\n    at Browser.<anonymous> (file:///Users/xxxx/Documents/projects/wdio-test/node_modules/@wdio/utils/build/index.js:1017:20)\n    at #registerScripts (file:///Users/xxxx/Documents/projects/wdio-test/node_modules/webdriverio/build/node.js:3578:39)\n    at EventEmitter.emit (node:events:524:28)\n    at EventEmitter.emit (node:domain:489:12)\n    at WebDriver.prototype.<computed> [as emit] (file:///Users/xxxx/Documents/projects/wdio-test/node_modules/@wdio/utils/build/index.js:462:29)\n    at Browser.parseBidiMessage (file:///Users/xxxx/Documents/projects/wdio-test/node_modules/webdriver/build/node.js:1311:10)\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 1915,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/session/polyfill.ts",
      "packages/webdriverio/tests/session/polyfill.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/session/polyfill.test.ts"
    ],
    "base_commit": "795e4525599909356d02ef0788c1ece7a7d85ecf",
    "head_commit": "2eb49e188f7ac3cd17b20b0f237594ea64bc5518",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14398",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14398",
    "dockerfile": "",
    "pr_merged_at": "2025-04-16T15:16:24.000Z",
    "patch": "diff --git a/packages/webdriverio/src/session/polyfill.ts b/packages/webdriverio/src/session/polyfill.ts\nindex 7ecd407f05f..fb692a85052 100644\n--- a/packages/webdriverio/src/session/polyfill.ts\n+++ b/packages/webdriverio/src/session/polyfill.ts\n@@ -81,6 +81,15 @@ export class PolyfillManager extends SessionManager {\n                 ? this.#browser.scriptAddPreloadScript({\n                     functionDeclaration,\n                     contexts: [context.context]\n+                }).catch(() => {\n+                    /**\n+                     * In case the context is already destroyed before this promise is finished\n+                     * For example:\n+                     *   - an unsuspecting window (context) is opened\n+                     *   - registerScripts is triggered\n+                     *   - that window closes before the bidi call starts\n+                     *   - bidi call sends the request and gets something like `call rejected because the connection has been closed` error back\n+                     */\n                 })\n                 : Promise.resolve(),\n             this.#browser.scriptCallFunction({\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/session/polyfill.test.ts b/packages/webdriverio/tests/session/polyfill.test.ts\nindex 1843b0943eb..21d8dc1039d 100644\n--- a/packages/webdriverio/tests/session/polyfill.test.ts\n+++ b/packages/webdriverio/tests/session/polyfill.test.ts\n@@ -39,7 +39,7 @@ describe('PolyfillManager', () => {\n             on: vi.fn(),\n             browsingContextGetTree: vi.fn().mockResolvedValue({ contexts: [{ context: '123' }, { context: '456', parent: '789' }] }),\n             sessionSubscribe: vi.fn(),\n-            scriptAddPreloadScript: vi.fn(),\n+            scriptAddPreloadScript: vi.fn().mockResolvedValue({}),\n             scriptCallFunction: vi.fn().mockResolvedValue({}),\n             isEnabled: vi.fn().mockReturnValue(true),\n             options: { automationProtocol: 'webdriver' }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14360",
    "pr_id": 14360,
    "issue_id": 11709,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Mock callback receives invalid body of response for binary files\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\nlatest\r\n\r\n### Node.js Version\r\n\r\nlatest\r\n\r\n### Mode\r\n\r\nStandalone Mode\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\n{\r\n          browserName: 'chrome',\r\n}\r\n```\r\n\r\n\r\n### What happened?\r\n\r\n- Setup mocking with callback to receive responses\r\n- Visit a site\r\n- See all binary responses have damaged body (wrongly encoded to UTF-8 string)\r\n\r\n### What is your expected behavior?\r\n\r\nAll binary responses have body of type Buffer not encoded as UTF-8 string\r\n\r\nThe source is this line https://github.com/webdriverio/webdriverio/blob/8549f43c3d788cab575ee83727126cf549025785/packages/webdriverio/src/utils/interception/devtools.ts#L102 \r\n\r\nIt doesn't only damages binary resources but also probably will damage any text resources encoded with other encodings.\r\n\r\nAs quick fix, I changed it to:\r\n\r\n```js\r\n                const { body, base64Encoded = undefined } = isRequest ? { body: '' } : await client.send('Fetch.getResponseBody', { requestId }).catch(/* istanbul ignore next */ () => ({}));\r\n                if (base64Encoded)\r\n                {\r\n                    request.bodyBuf = Buffer.from(body, 'base64');\r\n                    request.body = request.bodyBuf.toString('utf8');\r\n                }\r\n                else\r\n                    request.body = body;\r\n```\r\n\r\nso that request always has unencoded buffer and body could be damaged or not but in fact there must be more advanced logic to properly encode body according to content-encoding and content-type\r\n\r\n### How to reproduce the bug.\r\n\r\n```js\r\n'use strict';\r\n\r\nconst wdio = require('webdriverio');\r\n\r\n/** @typedef {import ('webdriverio/build/types')} wdio */ // linter happy\r\n/** @typedef {import ('webdriverio/build/utils/interception/types').MockOverwriteFunction} wdio.MockOverwriteFunction */\r\n/** @typedef {import ('webdriverio/build/types').Mock} wdio.Mock */\r\n\r\n/** @type {wdio.MockOverwriteFunction} */\r\nfunction cb(resp)\r\n{\r\n  console.log(resp.url);\r\n  require('fs').writeFileSync(String(new Date().getTime()) + '.png', Buffer.from(resp.body, 'utf-8'));\r\n}\r\n\r\n/** Console main */\r\nasync function main()\r\n{\r\n  // Init WebDriver\r\n  const browser = await wdio.remote({\r\n    capabilities:\r\n      {\r\n        browserName: 'chrome'\r\n      }});\r\n  /** @type {wdio.Mock} */\r\n  const mock = await browser.mock('**/*.png');\r\n  mock.respond(cb);\r\n  await browser.url('https://www.google.com/');\r\n  await browser.deleteSession();\r\n}\r\n\r\nmain();\r\n```\r\n\r\nAnd see all the PNG's damaged\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\n2023-11-22T12:33:53.868Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n2023-11-22T12:33:53.922Z INFO webdriver: [POST] http://localhost:4444/session\r\n2023-11-22T12:33:53.923Z INFO webdriver: DATA {\r\n  capabilities: { alwaysMatch: { browserName: 'chrome' }, firstMatch: [ {} ] },\r\n  desiredCapabilities: { browserName: 'chrome' }\r\n}\r\n2023-11-22T12:33:55.759Z INFO webdriver: COMMAND getWindowHandle()\r\n2023-11-22T12:33:55.761Z INFO webdriver: [GET] http://localhost:4444/session/cf98f0e99b8c2412270d4285f3f29390/window\r\n2023-11-22T12:33:55.764Z INFO webdriver: RESULT CDwindow-0AAD6EBFC585506394CE7AD4BF9F78F8\r\n2023-11-22T12:33:55.782Z INFO webdriver: COMMAND navigateTo(\"https://www.google.com/favicon.ico\")\r\n2023-11-22T12:33:55.782Z INFO webdriver: [POST] http://localhost:4444/session/cf98f0e99b8c2412270d4285f3f29390/url\r\n2023-11-22T12:33:55.783Z INFO webdriver: DATA { url: 'https://www.google.com/favicon.ico' }\r\nhttps://www.google.com/favicon.ico\r\n2023-11-22T12:33:55.944Z INFO webdriver: COMMAND deleteSession()\r\n2023-11-22T12:33:55.945Z INFO webdriver: [DELETE] http://localhost:4444/session/cf98f0e99b8c2412270d4285f3f29390\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 514,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/webdriverio/src/utils/interception/index.ts",
      "packages/webdriverio/src/utils/interception/utils.ts",
      "packages/webdriverio/tests/utils/interception/index.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/utils/interception/index.test.ts"
    ],
    "base_commit": "736d1f3076cb2554b661c2c4e6baf1582176c055",
    "head_commit": "08d830c5068f208b3a768a33d387b5ad55fdfe17",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14360",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14360",
    "dockerfile": "",
    "pr_merged_at": "2025-04-02T06:27:03.000Z",
    "patch": "diff --git a/packages/webdriverio/src/utils/interception/index.ts b/packages/webdriverio/src/utils/interception/index.ts\nindex a26f1baeef4..250082579b2 100644\n--- a/packages/webdriverio/src/utils/interception/index.ts\n+++ b/packages/webdriverio/src/utils/interception/index.ts\n@@ -1,6 +1,6 @@\n import logger from '@wdio/logger'\n import type { JsonCompatible } from '@wdio/types'\n-import { type local } from 'webdriver'\n+import { type local, type remote } from 'webdriver'\n import { URLPattern } from 'urlpattern-polyfill'\n \n import Timer from '../Timer.js'\n@@ -37,6 +37,7 @@ export default class WebDriverInterception {\n     #requestOverwrites: Overwrite[] = []\n     #respondOverwrites: Overwrite[] = []\n     #calls: local.NetworkResponseCompletedParameters[] = []\n+    #responseBodies = new Map<string, remote.NetworkBytesValue>()\n \n     constructor (\n         pattern: URLPattern,\n@@ -202,9 +203,13 @@ export default class WebDriverInterception {\n          */\n         if (overwrite) {\n             this.#emit('overwrite', request)\n+            const responseData = parseOverwrite(overwrite, request)\n+            if (responseData.body) {\n+                this.#responseBodies.set(request.request.request, responseData.body)\n+            }\n             return this.#browser.networkProvideResponse({\n                 request: request.request.request,\n-                ...parseOverwrite(overwrite, request)\n+                ...responseData\n             }).catch(this.#handleNetworkProvideResponseError)\n         }\n \n@@ -230,8 +235,48 @@ export default class WebDriverInterception {\n         throw err\n     }\n \n+    /**\n+     * Get the raw binary data for a mock response by request ID\n+     * @param {string} requestId  The ID of the request to retrieve the binary response for\n+     * @returns {Buffer | null}   The binary data as a Buffer, or null if no matching binary response is found\n+     */\n+    getBinaryResponse(requestId: string): Buffer | null {\n+        const body = this.#responseBodies.get(requestId)\n+        if (body?.type === 'base64') {\n+            try {\n+                const decoded = Buffer.from(body.value, 'base64').toString()\n+                const parsed = JSON.parse(decoded)\n+                if (parsed.type === 'base64' || parsed.base64Encoded) {\n+                    return Buffer.from(parsed.value, 'base64')\n+                }\n+                return Buffer.from(parsed.value)\n+            } catch {\n+                return Buffer.from(body.value, 'base64')\n+            }\n+        }\n+        return null\n+    }\n+\n+    /**\n+     * Simulate a responseStarted event for testing purposes\n+     * @param request NetworkResponseCompletedParameters to simulate\n+     */\n+    public simulateResponseStarted(request: local.NetworkResponseCompletedParameters): void {\n+        try {\n+            this.#handleResponseStarted(request)\n+        } catch (e) {\n+            console.log('DEBUG: Error in simulateResponseStarted:', e)\n+            throw e\n+        }\n+    }\n+\n+    public debugResponseBodies(): Map<string, remote.NetworkBytesValue> {\n+        return this.#responseBodies\n+    }\n+\n     #isRequestMatching<T extends local.NetworkBeforeRequestSentParameters | local.NetworkResponseCompletedParameters> (request: T) {\n-        return request.isBlocked && this.#pattern && this.#pattern.test(request.request.url)\n+        const matches = this.#pattern && this.#pattern.test(request.request.url)\n+        return request.isBlocked && matches\n     }\n \n     #matchesFilterOptions<T extends local.NetworkBeforeRequestSentParameters | local.NetworkResponseCompletedParameters> (request: T) {\n@@ -309,6 +354,7 @@ export default class WebDriverInterception {\n      */\n     clear() {\n         this.#calls = []\n+        this.#responseBodies.clear()\n         return this\n     }\n \n@@ -372,11 +418,9 @@ export default class WebDriverInterception {\n      */\n     respond(payload: RespondBody, params: Omit<RespondWithOptions, 'body'> = {}, once?: boolean) {\n         this.#ensureNotRestored()\n-        const body = typeof payload === 'string'\n-            ? payload\n-            : globalThis.Buffer && globalThis.Buffer.isBuffer(payload)\n-                ? payload.toString('base64')\n-                : JSON.stringify(payload)\n+        const body = Buffer.isBuffer(payload)\n+            ? { type: 'base64', value: payload.toString('base64') }\n+            : { type: 'string', value: typeof payload === 'string' ? payload : JSON.stringify(payload) }\n         const overwrite: RespondWithOptions = { body, ...params }\n         this.#respondOverwrites = this.#setOverwrite(this.#respondOverwrites, { overwrite, once })\n         return this\n\ndiff --git a/packages/webdriverio/src/utils/interception/utils.ts b/packages/webdriverio/src/utils/interception/utils.ts\nindex 646f15d280d..33447d54c57 100644\n--- a/packages/webdriverio/src/utils/interception/utils.ts\n+++ b/packages/webdriverio/src/utils/interception/utils.ts\n@@ -33,9 +33,7 @@ export function parseOverwrite<\n              */\n             {\n                 type: 'base64',\n-                value: globalThis.Buffer\n-                    ? globalThis.Buffer.from(JSON.stringify(bodyOverwrite || '')).toString('base64')\n-                    : btoa(JSON.stringify(bodyOverwrite))\n+                value: Buffer.from(JSON.stringify(bodyOverwrite || '')).toString('base64')\n             }\n     }\n \n",
    "test_patch": "diff --git a/packages/webdriverio/tests/utils/interception/index.test.ts b/packages/webdriverio/tests/utils/interception/index.test.ts\nindex 2040222bf3d..28b71533ca4 100644\n--- a/packages/webdriverio/tests/utils/interception/index.test.ts\n+++ b/packages/webdriverio/tests/utils/interception/index.test.ts\n@@ -1,5 +1,6 @@\n import { EventEmitter } from 'node:events'\n import { describe, it, expect, vi } from 'vitest'\n+import { type local } from 'webdriver'\n import WebDriverInterception from '../../../src/utils/interception/index.js'\n \n describe('WebDriverInterception', () => {\n@@ -188,6 +189,20 @@ describe('WebDriverInterception', () => {\n         browser.emit('network.beforeRequestSent', blockedRequest)\n         expect(browser.networkContinueRequest).toHaveBeenCalledWith({ request: 123 })\n         expect(browser.networkFailRequest).toHaveBeenCalledTimes(0)\n+\n+        browser.networkContinueRequest.mockClear()\n+        browser.networkFailRequest.mockClear()\n+        const binaryBody = Buffer.from('binary data')\n+        mock.request({ body: binaryBody })\n+        browser.emit('network.beforeRequestSent', blockedRequest)\n+        expect(browser.networkFailRequest).toHaveBeenCalledTimes(0)\n+        expect(browser.networkContinueRequest).toHaveBeenCalledWith({\n+            request: 123,\n+            body: {\n+                type: 'base64',\n+                value: Buffer.from(JSON.stringify(binaryBody)).toString('base64')\n+            }\n+        })\n     })\n \n     it('handleResponseStarted', async () => {\n@@ -239,8 +254,8 @@ describe('WebDriverInterception', () => {\n         expect(browser.networkProvideResponse).toHaveBeenCalledWith({\n             request: 123,\n             body: {\n-                type: 'string',\n-                value: JSON.stringify({ foo: 'bar' })\n+                type: 'base64',\n+                value: Buffer.from(JSON.stringify({ type: 'string', value: JSON.stringify({ foo: 'bar' }) })).toString('base64')\n             }\n         })\n         browser.emit('network.responseStarted', {\n@@ -256,5 +271,101 @@ describe('WebDriverInterception', () => {\n         expect(browser.networkProvideResponse).toHaveBeenCalledWith({\n             request: 123\n         })\n+        vi.mocked(browser.networkProvideResponse).mockClear()\n+\n+        mock.clear()\n+        vi.mocked(browser.networkProvideResponse).mockClear()\n+        mock.respondOnce('hello')\n+        browser.emit('network.responseStarted', {\n+            isBlocked: true,\n+            request: {\n+                url: 'http://foobar.com:1234/foo/bar.html?foo=bar',\n+                method: 'get',\n+                request: 123,\n+                headers: [{ name: 'foo', value: { type: 'string', value: 'bar' } }]\n+            },\n+            response: {\n+                status: 200,\n+                headers: [{ name: 'bar', value: { type: 'string', value: 'foo' } }]\n+            }\n+        })\n+        expect(browser.networkProvideResponse).toHaveBeenCalledTimes(1)\n+        expect(browser.networkProvideResponse).toHaveBeenCalledWith({\n+            request: 123,\n+            body: {\n+                type: 'base64',\n+                value: Buffer.from(JSON.stringify({ type: 'string', value: 'hello' })).toString('base64')\n+            }\n+        })\n+        expect(mock.getBinaryResponse('123')).toBeNull()\n+    })\n+\n+    it('handles binary response and clear', () => {\n+        const browserMock = Object.assign(new EventEmitter(), {\n+            networkProvideResponse: vi.fn().mockResolvedValue(undefined)\n+        }) as unknown as WebdriverIO.Browser\n+\n+        const interception = new WebDriverInterception(\n+            new URLPattern({ pathname: '/test/*' }),\n+            'mock-id',\n+            {},\n+            browserMock\n+        )\n+\n+        const binaryData = Buffer.from('binary data')\n+        interception.respond(binaryData)\n+\n+        const mockRequest: local.NetworkResponseCompletedParameters = {\n+            context: 'mock-context',\n+            navigation: null,\n+            redirectCount: 0,\n+            timestamp: 0,\n+            request: {\n+                request: 'req-123',\n+                url: 'http://localhost/test/bin',\n+                method: 'GET',\n+                headers: [],\n+                cookies: [],\n+                headersSize: 0,\n+                bodySize: 0,\n+                timings: {\n+                    timeOrigin: 0,\n+                    requestTime: 0,\n+                    redirectStart: 0,\n+                    redirectEnd: 0,\n+                    fetchStart: 0,\n+                    dnsStart: 0,\n+                    dnsEnd: 0,\n+                    connectStart: 0,\n+                    connectEnd: 0,\n+                    tlsStart: 0,\n+                    requestStart: 0,\n+                    responseStart: 0,\n+                    responseEnd: 0\n+                }\n+            },\n+            response: {\n+                url: 'http://localhost/test/bin',\n+                status: 200,\n+                headers: [],\n+                mimeType: 'application/octet-stream',\n+                bytesReceived: 2,\n+                headersSize: 0,\n+                bodySize: 0,\n+                content: { size: 0 },\n+                protocol: 'http',\n+                statusText: 'OK',\n+                fromCache: false\n+            },\n+            isBlocked: true\n+        }\n+\n+        interception.simulateResponseStarted(mockRequest)\n+\n+        console.log('DEBUG responseBodies:', interception.debugResponseBodies())\n+\n+        expect(interception.getBinaryResponse('req-123')).toEqual(binaryData)\n+        interception.clear()\n+        expect(interception.getBinaryResponse('req-123')).toBeNull()\n     })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14336",
    "pr_id": 14336,
    "issue_id": 14315,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: BiDi ip addresses resolution causes getaddrinfo EAI_AGAIN error\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.12.1\n\n### Node.js Version\n\n22.14.0\n\n### Mode\n\nWDIO Testrunner\n\n### What happened?\n\nSince upgrading to WebdriverIO v9.12.1, when running a test that relies on a Selenoid instance running in Docker, I get the following error :\n```\n[0-0] node:internal/dns/promises:99\n[0-0]     this.reject(new DNSException(err, 'getaddrinfo', this.hostname));\n[0-0]                 ^\n[0-0]\n[0-0] Error: getaddrinfo EAI_AGAIN 8f3a4490710c\n[0-0]     at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:internal/dns/promises:99:17) {\n[0-0]   errno: -3001,\n[0-0]   code: 'EAI_AGAIN',\n[0-0]   syscall: 'getaddrinfo',\n[0-0]   hostname: '8f3a4490710c'\n[0-0] }\n```\n\nThis seems to be a regression introduced with #14259, more precisely by [these lines](https://github.com/webdriverio/webdriverio/pull/14259/files#diff-b8bbe21e33827dc40f7dca1936dc85d6607625ae638d49a890e0ff4c11081518R195-R198).\n\nI assume that WebdriverIO tries to resolve the browser container's hostname (`8f3a4490710c`) to an IP address but since that hostname is only known inside the Docker network, the resolution crashes. Before that change, WebdriverIO would have fallen back to the classic Webdriver protocol.\n\n### What is your expected behavior?\n\nI expect WebdriverIO to ignore such errors, fallback to the classic Webdriver protocol, and run the test like it used to.\n\n### How to reproduce the bug.\n\nTo reproduce the bug, all you have to do is run a test that relies on a Selenoid instance running in Docker. To make this easier, I've created a minimal reproducible example that you can find [here](https://github.com/nicolasbouffard/webdriverio-dns-issue), with all the instructions needed.\n\n### Relevant log output\n\n```\n[0-0] INFO webdriver: Connecting to webSocketUrl ws://8f3a4490710c:4444/session/a8968f21d3d37460598ee9f1e2f4af7f\n[0-0] node:internal/dns/promises:99\n[0-0]     this.reject(new DNSException(err, 'getaddrinfo', this.hostname));\n[0-0]                 ^\n[0-0]\n[0-0] Error: getaddrinfo EAI_AGAIN 8f3a4490710c\n[0-0]     at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:internal/dns/promises:99:17) {\n[0-0]   errno: -3001,\n[0-0]   code: 'EAI_AGAIN',\n[0-0]   syscall: 'getaddrinfo',\n[0-0]   hostname: '8f3a4490710c'\n[0-0] }\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 388,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriver/src/node/bidi.ts",
      "packages/webdriver/tests/node/bidi.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriver/tests/node/bidi.test.ts"
    ],
    "base_commit": "ac7a2af9bdaab48841143a4f16435a864d5bc102",
    "head_commit": "d60acb6821a3aa0064b34b09fa516fd24b3f4e8e",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14336",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14336",
    "dockerfile": "",
    "pr_merged_at": "2025-03-27T22:24:26.000Z",
    "patch": "diff --git a/packages/webdriver/src/node/bidi.ts b/packages/webdriver/src/node/bidi.ts\nindex 8bf188d29ba..80b84c2462b 100644\n--- a/packages/webdriver/src/node/bidi.ts\n+++ b/packages/webdriver/src/node/bidi.ts\n@@ -26,14 +26,19 @@ export async function listWebsocketCandidateUrls(webSocketUrl: string): Promise<\n         return candidateUrls\n     }\n \n-    const candidateIps = await dns.lookup(parsedUrl.hostname, { family:0, all:true })\n-    // If the host resolves to a single IP address\n-    // then it does not make sense to try additional candidates\n-    // as the web socket DNS resolver would do extactly the same\n-    if (candidateIps.length > 1) {\n-        const hostnameMapper = (result: LookupAddress) => webSocketUrl.replace(parsedUrl.hostname, result.address)\n-        candidateUrls.push(...candidateIps.map(hostnameMapper))\n+    try {\n+        const candidateIps = await dns.lookup(parsedUrl.hostname, { family:0, all:true })\n+        // If the host resolves to a single IP address\n+        // then it does not make sense to try additional candidates\n+        // as the web socket DNS resolver would do extactly the same\n+        if (candidateIps.length > 1) {\n+            const hostnameMapper = (result: LookupAddress) => webSocketUrl.replace(parsedUrl.hostname, result.address)\n+            candidateUrls.push(...candidateIps.map(hostnameMapper))\n+        }\n+    } catch (error) {\n+        log.error(`Could not resolve hostname ${parsedUrl.hostname}: ${error}`)\n     }\n+\n     return candidateUrls\n }\n \n",
    "test_patch": "diff --git a/packages/webdriver/tests/node/bidi.test.ts b/packages/webdriver/tests/node/bidi.test.ts\nindex 43e9e7f0446..ab890094116 100644\n--- a/packages/webdriver/tests/node/bidi.test.ts\n+++ b/packages/webdriver/tests/node/bidi.test.ts\n@@ -1,4 +1,5 @@\n import path from 'node:path'\n+import dns from 'node:dns/promises'\n // @ts-expect-error mock feature\n import { instances, setThrowError, clearInstances, type ClientOptions } from 'ws'\n import { describe, it, expect, vi, beforeEach } from 'vitest'\n@@ -52,15 +53,24 @@ const log = logger('test')\n describe('Bidi Node.js implementation', () => {\n     beforeEach(() => {\n         clearInstances()\n+        vi.mocked(log.error).mockClear()\n     })\n \n-    it('listWebsocketCandidateUrls', async () => {\n-        const candidateUrls = await listWebsocketCandidateUrls('ws://foo/bar')\n-        expect(candidateUrls).toEqual([\n-            'ws://foo/bar',\n-            'ws://127.0.0.1/bar',\n-            'ws://::1/bar'\n-        ])\n+    describe('listWebsocketCandidateUrls', () => {\n+        it('should return the correct candidate urls', async () => {\n+            const candidateUrls = await listWebsocketCandidateUrls('ws://foo/bar')\n+            expect(candidateUrls).toEqual([\n+                'ws://foo/bar',\n+                'ws://127.0.0.1/bar',\n+                'ws://::1/bar'\n+            ])\n+        })\n+\n+        it('should return an empty array if the hostname is not resolvable', async () => {\n+            vi.mocked(dns.lookup).mockRejectedValueOnce(new Error('ESERVFAIL'))\n+            const candidateUrls = await listWebsocketCandidateUrls('ws://foo/bar')\n+            expect(candidateUrls).toEqual(['ws://foo/bar'])\n+        })\n     })\n \n     it('createBidiConnection', async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14298",
    "pr_id": 14298,
    "issue_id": 14297,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Possible EventEmitter memory leak detected at SessionManager\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\nv20.18.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\n    browserName: 'chrome',\n}\n```\n\n### What happened?\n\nToo many listener were registered at `SessionManager`.\nAs a result following log is appeared.\n\n\nhttps://github.com/webdriverio/webdriverio/actions/runs/13893726286/job/38870400774\n```\n[0-2] (node:7859) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 command listeners added to [EventEmitter]. Use emitter.setMaxListeners() to increase limit\n```\n\n### What is your expected behavior?\n\nThe log is not appeared.\n\n### How to reproduce the bug.\n\nRun CI and check the log for test runner.\n\n### Relevant log output\n\n```typescript\n[0-2] (node:7859) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 command listeners added to [EventEmitter]. Use emitter.setMaxListeners() to increase limit\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 183,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/session/session.ts",
      "packages/webdriverio/tests/session/session.test.ts",
      "packages/webdriverio/tests/shadowRoot.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/session/session.test.ts",
      "packages/webdriverio/tests/shadowRoot.test.ts"
    ],
    "base_commit": "f56e47bf373854de13a763e491b963e3cdbb46ca",
    "head_commit": "b0d3bed0fd175098dfe9d669d24627c9d7b9de7f",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14298",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14298",
    "dockerfile": "",
    "pr_merged_at": "2025-03-18T07:23:46.000Z",
    "patch": "diff --git a/packages/webdriverio/src/session/session.ts b/packages/webdriverio/src/session/session.ts\nindex 337854b16ea..58ae0b92bcc 100644\n--- a/packages/webdriverio/src/session/session.ts\n+++ b/packages/webdriverio/src/session/session.ts\n@@ -1,5 +1,7 @@\n const sessionManager = new Map<string, Map<WebdriverIO.Browser, SessionManager>>()\n \n+const listenerRegisteredSession = new Set<string>()\n+\n export class SessionManager {\n     #browser: WebdriverIO.Browser\n     #scope: string\n@@ -13,8 +15,12 @@ export class SessionManager {\n      */\n     constructor(browser: WebdriverIO.Browser, scope: string) {\n         this.#browser = browser\n-        this.#browser.on('command', this.#onCommand.bind(this))\n         this.#scope = scope\n+        const registrationId = `${this.#browser.sessionId}-${this.#scope}`\n+        if (!listenerRegisteredSession.has(registrationId)) {\n+            this.#browser.on('command', this.#onCommand.bind(this))\n+            listenerRegisteredSession.add(registrationId)\n+        }\n     }\n \n     #onCommand(ev: { command: string }) {\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/session/session.test.ts b/packages/webdriverio/tests/session/session.test.ts\nnew file mode 100644\nindex 00000000000..7076fd840a7\n--- /dev/null\n+++ b/packages/webdriverio/tests/session/session.test.ts\n@@ -0,0 +1,26 @@\n+import { beforeEach, describe, expect, it, vi } from 'vitest'\n+\n+import { SessionManager } from '../../src/session/session.js'\n+\n+describe('SessionManager', () => {\n+    const browser ={\n+        sessionId: '123',\n+        on: vi.fn(),\n+    } as unknown as WebdriverIO.Browser\n+\n+    beforeEach(()=>{\n+        vi.mocked(browser.on).mockClear()\n+    })\n+\n+    it('should listener registered', ()=>{\n+        new SessionManager(browser, 'dummy')\n+        expect(browser.on).toHaveBeenCalledTimes(1)\n+    })\n+\n+    it('should listener registered only once when initialized multiple times', ()=>{\n+        browser.sessionId = '456'\n+        new SessionManager(browser, 'dummy')\n+        new SessionManager(browser, 'dummy')\n+        expect(browser.on).toHaveBeenCalledTimes(1)\n+    })\n+})\n\\ No newline at end of file\n\ndiff --git a/packages/webdriverio/tests/shadowRoot.test.ts b/packages/webdriverio/tests/shadowRoot.test.ts\nindex 070b6e9d279..80d1b10ba3c 100644\n--- a/packages/webdriverio/tests/shadowRoot.test.ts\n+++ b/packages/webdriverio/tests/shadowRoot.test.ts\n@@ -3,6 +3,7 @@ import { describe, it, vi, expect, beforeEach } from 'vitest'\n import { getShadowRootManager, ShadowRootTree } from '../src/session/shadowRoot.js'\n \n const defaultBrowser = {\n+    sessionId: '123',\n     sessionSubscribe: vi.fn().mockResolvedValue({}),\n     on: vi.fn(),\n     scriptAddPreloadScript: vi.fn(),\n@@ -28,6 +29,7 @@ describe('ShadowRootManager', () => {\n         const wid = process.env.WDIO_UNIT_TESTS\n         delete process.env.WDIO_UNIT_TESTS\n         const browser = { ...defaultBrowser, isBidi: true, options: { capabilities: { webSocketUrl: './' } } } as any\n+        browser.sessionId = '234'\n         const manager = getShadowRootManager(browser)\n         process.env.WDIO_UNIT_TESTS = wid\n         expect(await manager.initialize()).toBe(true)\n@@ -38,6 +40,7 @@ describe('ShadowRootManager', () => {\n \n     it('should not register event listeners if not in bidi mode', async () => {\n         const browser = { ...defaultBrowser } as any\n+        browser.sessionId = '345'\n         const manager = getShadowRootManager(browser)\n         expect(await manager.initialize()).toBe(true)\n         expect(browser.sessionSubscribe).toBeCalledTimes(0)\n@@ -47,6 +50,7 @@ describe('ShadowRootManager', () => {\n \n     it('should not register event listeners if not using webdriver as automation protocol', async () => {\n         const browser = { ...defaultBrowser, isBidi: true, automationProtocol: './protocol-stub.js' } as any\n+        browser.sessionId = '456'\n         const manager = getShadowRootManager(browser)\n         expect(await manager.initialize()).toBe(true)\n         expect(browser.sessionSubscribe).toBeCalledTimes(0)\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14296",
    "pr_id": 14296,
    "issue_id": 14119,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: After a window closes, I should be able to switch to a different present window.\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.7.1\n\n### Node.js Version\n\n20.12.2\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\n[\n    {\n      browserName: 'chrome',\n    },\n    {\n      browserName: 'firefox',\n    },\n]\n```\n\n### What happened?\n\nAfter a window closed, I received an error when attempting to switch to a present window.\n```\nno such window: WebDriverError: no such window: target window already closed\nfrom unknown error: web view not found\n```\n\n### What is your expected behavior?\n\nI expect to be able to switch windows upon a window closing (in particular, a window closing when browser.closeWindow() is not explicitly called in a test).\n\n### How to reproduce the bug.\n```\nit('should be able to run any browser.url after window closes', async () => {\n    await browser.url('https://guinea-pig.webdriver.io');\n    await $('#newWindow').click();\n    await browser.switchWindow('https://guinea-pig.webdriver.io/two.html');\n    await $('#closeButton').click();\n    await browser.waitUntil(\n        async () => (await browser.getWindowHandles()).length === 1,\n        { timeout: 10000 },\n    );\n    await browser.switchWindow('https://guinea-pig.webdriver.io')\n});\n```\n\n### Relevant log output\n\n```typescript\n[0-0] 2025-01-27T14:50:50.788Z WARN webdriverio: Failed to execute browser.browsingContextLocateNodes({ ... }) due to Error: WebDriver Bidi command \"browsingContext.locateNodes\" failed with error: no such frame - Context 3C31FACC9C0509DA894CCEE8DACD45ED not found, falling back to regular WebDriver Classic command\n[0-0] 2025-01-27T14:50:50.791Z WARN webdriver: WebDriverError: no such window: target window already closed\n[0-0] from unknown error: web view not found\n[0-0]   (Session info: chrome=131.0.6778.265) when running \"element\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\"#closeButton\"}\"\n[0-0] 2025-01-27T14:50:51.305Z WARN webdriver: WebDriverError: no such window: target window already closed\n[0-0] from unknown error: web view not found\n[0-0]   (Session info: chrome=131.0.6778.265) when running \"element\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\"#closeButton\"}\"\n[0-0] 2025-01-27T14:50:52.319Z WARN webdriver: WebDriverError: no such window: target window already closed\n[0-0] from unknown error: web view not found\n[0-0]   (Session info: chrome=131.0.6778.265) when running \"element\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\"#closeButton\"}\"\n[0-0] 2025-01-27T14:50:52.320Z ERROR webdriver: WebDriverError: no such window: target window already closed\n[0-0] from unknown error: web view not found\n[0-0]   (Session info: chrome=131.0.6778.265) when running \"element\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\"#closeButton\"}\"\n[0-0] no such window in \"should consider an element to not be displayed if a window has been closed\"\nno such window: WebDriverError: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=131.0.6778.265) when running \"element\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\"#closeButton\"}\"\n    at Browser.wrapCommandFn (C:\\dev\\wdio\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at Browser.findDeepElement (C:\\dev\\wdio\\node_modules\\webdriverio\\build\\node.js:7918:29)\n    at Browser.$ (C:\\dev\\wdio\\node_modules\\webdriverio\\build\\node.js:903:15)\n    at Browser.wrapCommandFn (C:\\dev\\wdio\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async Context.<anonymous> (C:\\dev\\wdio\\test.spec.js:6:3)\n    at Context.executeAsync (C:\\dev\\wdio\\node_modules\\@wdio\\utils\\build\\index.js:1013:20)\n    at Context.testFrameworkFnWrapper (C:\\dev\\wdio\\node_modules\\@wdio\\utils\\build\\index.js:1084:14)\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 617,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/browser/switchWindow.ts",
      "packages/webdriverio/tests/commands/browser/switchWindow.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/browser/switchWindow.test.ts"
    ],
    "base_commit": "91e5d981a5805ddd27c113f523f6d95543fdf006",
    "head_commit": "e8138142e0ec41e335edab22f28e877230605c7d",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14296",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14296",
    "dockerfile": "",
    "pr_merged_at": "2025-03-18T18:14:28.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/switchWindow.ts b/packages/webdriverio/src/commands/browser/switchWindow.ts\nindex 8ee8246776c..19fda72ff42 100644\n--- a/packages/webdriverio/src/commands/browser/switchWindow.ts\n+++ b/packages/webdriverio/src/commands/browser/switchWindow.ts\n@@ -46,6 +46,13 @@ export async function switchWindow (\n     }\n \n     const currentWindow = await this.getWindowHandle()\n+        /**\n+         * in cases where a browser window was closed by e.g. clicking on a button\n+         * this command may throws an \"no such window: target window already closed\"\n+         * error. In this case we return `undefined` and determine the new window\n+         * based on the command parameter.\n+         */\n+        .catch(() => undefined)\n \n     // is the matcher a window handle, and are we in the right window already?\n     if (typeof matcher === 'string' && currentWindow === matcher) {\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/browser/switchWindow.test.ts b/packages/webdriverio/tests/commands/browser/switchWindow.test.ts\nindex 0201bdab609..76bdffd1e37 100644\n--- a/packages/webdriverio/tests/commands/browser/switchWindow.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/switchWindow.test.ts\n@@ -105,6 +105,15 @@ describe('switchWindow', () => {\n         expect(tabId).toBe('window-handle-1')\n     })\n \n+    it('should allow switchWindow call even when the currently active one is closed', async () => {\n+        vi.spyOn(browser, 'getWindowHandle').mockImplementation(() =>\n+            Promise.reject('target window already closed')\n+        )\n+\n+        const tabId = await browser.switchWindow('webdriver.io')\n+        expect(tabId).toBe('window-handle-1')\n+    })\n+\n     afterAll(() => {\n         // @ts-expect-error\n         delete global.window\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14288",
    "pr_id": 14288,
    "issue_id": 14289,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: isClickable method doesn't scroll the page back to the initial position\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nall versions, tested on 9.11 | 8.43\n\n### Node.js Version\n\n20.10.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n        {\n            browserName: 'chrome',\n            'goog:platformName': 'mobile',\n            exclude: [\n                './test/specs/**/*desktop*.js'\n            ],\n            'goog:loggingPrefs': { browser: 'WARNING' },\n            'goog:chromeOptions': {\n                mobileEmulation: {\n                    deviceName: 'iPhone 8',\n                },\n                args: [\n                    '--window-position=1050,210',\n                    'use-mobile-user-agent',\n                ],\n                prefs: {\n                    protocol_handler: {\n                        excluded_schemes: {\n                            sms: false,\n                            tel: false,\n                        },\n                    },\n                },\n            },\n        },\n```\n\n### What happened?\n\nisClickable() is supposed to scroll to the element when not in viewport then scroll back to the initial position.\nThe scroll back to initial position does not happen (because of this line i think: https://github.com/webdriverio/webdriverio/blob/main/packages/webdriverio/src/scripts/isElementClickable.ts#L146)\n\n### What is your expected behavior?\n\n_No response_\n\n### How to reproduce the bug.\n\n1. Clone this repo: https://github.com/dragosMC91/wdio-exclude-pattern-bug-highlight\n2. Run `yarn install` (using yarn 1.22.19 + node 20.10.0)\n3. Run the following test which showcases the bug:\n```\nyarn test --spec test/specs/suite1/exampleS1.desktop.test.js\n```\n\nNotice that after the `isClickable()` call, the page remains scrolled all the way to the bottom, which is not expected according to the description here https://github.com/webdriverio/webdriverio/blob/main/packages/webdriverio/src/scripts/isElementClickable.ts#L135\n\nSee the attached video with the above steps for more details:\n\nhttps://github.com/user-attachments/assets/a006ebf8-01ce-48c6-a7ec-a5f451cf4900\n\n### Relevant log output\n\n```typescript\nPage scrool coordinates after isClickable check: { x: 0, y: 4389 }\nexpected { x: 0, y: 0 }\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 318,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/scripts/isElementClickable.ts",
      "packages/webdriverio/tests/scripts/isElementClickable.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/scripts/isElementClickable.test.ts"
    ],
    "base_commit": "91e5d981a5805ddd27c113f523f6d95543fdf006",
    "head_commit": "a40b07a2002b1f4611c7a2dbf02a770f6119e4e4",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14288",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14288",
    "dockerfile": "",
    "pr_merged_at": "2025-03-20T07:02:06.000Z",
    "patch": "diff --git a/packages/webdriverio/src/scripts/isElementClickable.ts b/packages/webdriverio/src/scripts/isElementClickable.ts\nindex a3c1b1b4be2..9c11a5f6dc6 100644\n--- a/packages/webdriverio/src/scripts/isElementClickable.ts\n+++ b/packages/webdriverio/src/scripts/isElementClickable.ts\n@@ -129,21 +129,28 @@ export default function isElementClickable (elem: HTMLElement) {\n         return isElementInViewport(elem) && !hasOverlaps(elem)\n     }\n \n+    function getViewportScrollPositions() {\n+        return {\n+            // Cross-browser compatibility\n+            x: window.scrollX ?? window.pageXOffset,\n+            y: window.scrollY ?? window.pageYOffset,\n+        }\n+    }\n+\n     // scroll the element to the center of the viewport when\n     // it is not fully displayed in the viewport or is overlapped by another element\n     // to check if it still overlapped/not in the viewport\n     // afterwards we scroll back to the original position\n     let _isFullyDisplayedInViewport = isFullyDisplayedInViewport(elem)\n     if (!_isFullyDisplayedInViewport) {\n-        const { x: originalX, y: originalY } = elem.getBoundingClientRect()\n+        const { x: originalX, y: originalY } = getViewportScrollPositions()\n \n         elem.scrollIntoView(scrollIntoViewFullSupport ? { block: 'center', inline: 'center' } : false)\n \n         _isFullyDisplayedInViewport = isFullyDisplayedInViewport(elem)\n-\n-        const { x, y } = elem.getBoundingClientRect()\n-        if (x !== originalX || y !== originalY) {\n-            elem.scroll(scrollX, scrollY)\n+        const { x: currentX, y: currentY } = getViewportScrollPositions()\n+        if (currentX !== originalX || currentY !== originalY) {\n+            window.scroll(originalX, originalY)\n         }\n     }\n \n",
    "test_patch": "diff --git a/packages/webdriverio/tests/scripts/isElementClickable.test.ts b/packages/webdriverio/tests/scripts/isElementClickable.test.ts\nindex 12ddc4ddc8c..c4024008c15 100644\n--- a/packages/webdriverio/tests/scripts/isElementClickable.test.ts\n+++ b/packages/webdriverio/tests/scripts/isElementClickable.test.ts\n@@ -1,11 +1,74 @@\n import { describe, it, vi, expect, beforeAll, afterEach, afterAll } from 'vitest'\n import isElementClickable from '../../src/scripts/isElementClickable.js'\n \n+/**\n+* A minimalistic scrollIntoView function that emulates browser behavior\n+* to be attached to the Element.prototype\n+* @param options - Scroll options or boolean for legacy behavior\n+*/\n+function scrollIntoView(options?: {\n+    block?: 'start' | 'center' | 'end'\n+    inline?: 'start' | 'center' | 'end'\n+} | boolean): void {\n+    const originalRect = this.getBoundingClientRect()\n+    const originalScrollY = window.scrollY\n+    const originalScrollX = window.scrollX\n+\n+    // Handle boolean (legacy) parameter or no options\n+    const align = typeof options === 'boolean' || !options ?\n+        {\n+            block: 'start', inline: 'start'\n+        } :\n+        options\n+\n+    const getHorizontalScroll = () => {\n+        switch (align.inline) {\n+        case 'center':\n+            return originalScrollX + originalRect.left - window.innerWidth/2 + originalRect.width/2\n+        case 'end':\n+            return originalScrollX + originalRect.right - window.innerWidth\n+        default:\n+            return originalScrollX + originalRect.left\n+        }\n+    }\n+\n+    const getVerticalScroll = () => {\n+        switch (align.inline) {\n+        case 'center':\n+            return originalScrollY + originalRect.top - window.innerHeight/2 + originalRect.height/2\n+        case 'end':\n+            return originalScrollY + originalRect.bottom - window.innerHeight\n+        default:\n+            return originalScrollY + originalRect.top\n+        }\n+    }\n+\n+    // Set the scroll position\n+    window.scroll(getHorizontalScroll(), getVerticalScroll())\n+\n+    // Calculate scroll delta\n+    const deltaY = originalScrollY - window.scrollY\n+    const deltaX = originalScrollX - window.scrollX\n+\n+    // Update element's apparent position after scrolling\n+    this.getBoundingClientRect = () => ({\n+        ...originalRect,\n+        top: originalRect.top + deltaY,\n+        left: originalRect.left + deltaX\n+    })\n+}\n+\n describe('isElementClickable script', () => {\n     beforeAll(() => {\n         global.window = {\n             innerWidth: 800,\n-            innerHeight: 600\n+            innerHeight: 600,\n+            scrollX: 0,\n+            scrollY: 0,\n+            scroll(x:any, y: any) {\n+                this.scrollX = Math.max(0, x)\n+                this.scrollY = Math.max(0, y)\n+            }\n         } as any\n     })\n \n@@ -223,7 +286,7 @@ describe('isElementClickable script', () => {\n         expect(isElementClickable(elemMock)).toBe(false)\n     })\n \n-    it('should be not clickable if not in viewport', () => {\n+    it('should be clickable if not in viewport', () => {\n         const elemMock: any = {\n             getBoundingClientRect: () => ({\n                 height: 55,\n@@ -232,12 +295,38 @@ describe('isElementClickable script', () => {\n                 left: 999\n             }),\n             getClientRects: () => [{}],\n-            scrollIntoView: () => vi.fn(),\n+            scrollIntoView: scrollIntoView,\n             contains: () => false\n         } as unknown as Element\n         global.document = { elementFromPoint: () => elemMock } as any\n \n-        expect(isElementClickable(elemMock)).toBe(false)\n+        expect(isElementClickable(elemMock)).toBe(true)\n+    })\n+\n+    it('should scroll to the initial position when element not in viewport', () => {\n+        const elemMock: any = {\n+            getBoundingClientRect: () => ({\n+                height: 55,\n+                width: 22,\n+                top: 600,\n+                left: 999\n+            }),\n+            getClientRects: () => [{}],\n+            scrollIntoView: scrollIntoView,\n+            contains: () => false\n+        } as unknown as Element\n+        global.document = { elementFromPoint: () => elemMock } as any\n+\n+        // page scrolled passed element scenario\n+        window.scroll(5000, 5000)\n+        isElementClickable(elemMock)\n+        expect(window.scrollX).toBe(5000)\n+        expect(window.scrollY).toBe(5000)\n+        // page scrolled to the beginning scenario\n+        window.scroll(0, 0)\n+        isElementClickable(elemMock)\n+        expect(window.scrollX).toBe(0)\n+        expect(window.scrollY).toBe(0)\n     })\n \n     afterEach(() => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14287",
    "pr_id": 14287,
    "issue_id": 14258,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: waitForDisplayed and isDisplayed methods are not working for windows apps\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.11.0\n\n### Node.js Version\n\n22.12.0\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\ncapabilities: {                                                                        \n   chromeBrowser: {                                                                     \n     capabilities: {                                                                    \n       'browserName': 'chrome',                                                         \n       'acceptInsecureCerts': true,                                                     \n       'goog:chromeOptions': {                                                          \n         debuggerAddress: 'localhost:9222',                                             \n       },                                                                               \n     },                                                                                 \n   },                                                                                   \n   workstation: {                                                                       \n     path: '/',                                                                         \n     hostname: '127.0.0.1',                                                             \n     port: 4723,                                                                        \n     capabilities: {                                                                    \n       'platformName': 'Windows',                                                       \n       'appium:automationName': 'windows',                                              \n       'appium:app': 'C:\\\\Program Files\\\\MicroStrategy\\\\Workstation\\\\Workstation.exe',  \n       'appium:appArguments': '-p 54213 -l 1033',                                       \n       'appium:newCommandTimeout': 200000,                                              \n     },                                                                                 \n   },                                                                                   \n },\n```\n\n### What happened?\n\nAfter webdriverIO upgrade I noticed that waitForDisplayed and isDisplayed methods do not work on automation of a windows app. This used to work in the past.\nSimilar issue to https://github.com/webdriverio/webdriverio/issues/14084\n\n\n### What is your expected behavior?\n\n_No response_\n\n### How to reproduce the bug.\n\nUsing appium-windows-driver I create automation for a windows app, unfortunately I cannot share the files. \nBut I face the error simply after using waitForDisplayed, I found that waitForExist is working well \n\n\n### Relevant log output\n\n```typescript\nWARN webdriver: WebDriverError: Unsupported execute method 'function webdriverioPolyfill() {\n[0-0]   const __defProp2 = Object.defineProperty;\n[0-0]   const __name = function(target, value) {\n[0-0]     return __defProp2(target, \"name\", { value, configurable: true });\n[0-0]   };\n[0-0]   const __globalThis = typeof globalThis === \"object\" && globalThis || typeof window === \"object\" && window;\n[0-0]   __globalThis.__name = __name;\n[0-0] }\n[0-0]             webdriverioPolyfill()\n[0-0]             return (function checkVisibility(elem, params) {\n[0-0]       return elem.checkVisibility(params);\n[0-0]     }).apply(null, arguments)', did you mean 'windows: startRecordingScreen'? Make sure the installed WindowsDriver is up-to-date. Execute methods available in the current driver version are: windows: startRecordingScreen,\n windows: stopRecordingScreen, windows: deleteFolder, windows: setClipboard, windows: getClipboard, windows: deleteFile, windows: clickAndDrag, windows: launchApp, windows: closeApp, windows: scroll, windows: click, windows: hover, windows: keys when running \"execute/sync\" with method \"POST\" and args \"function checkVisibility(elem, params) {\n[0-0]       return elem.checkVisibility(params);\n[0-0]     }\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 362,
    "test_files_count": 6,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "__mocks__/fetch.ts",
      "packages/wdio-utils/src/envDetector.ts",
      "packages/wdio-utils/tests/envDetector.test.ts",
      "packages/webdriver/src/types.ts",
      "packages/webdriver/src/utils.ts",
      "packages/webdriver/tests/command.test.ts",
      "packages/webdriver/tests/index.test.ts",
      "packages/webdriverio/src/commands/element/isDisplayed.ts",
      "packages/webdriverio/tests/commands/element/isDisplayed.test.ts",
      "packages/webdriverio/tests/module.test.ts",
      "packages/webdriverio/tests/protocol-stub.test.ts",
      "website/docs/api/Browser.md"
    ],
    "pr_changed_test_files": [
      "packages/wdio-utils/tests/envDetector.test.ts",
      "packages/webdriver/tests/command.test.ts",
      "packages/webdriver/tests/index.test.ts",
      "packages/webdriverio/tests/commands/element/isDisplayed.test.ts",
      "packages/webdriverio/tests/module.test.ts",
      "packages/webdriverio/tests/protocol-stub.test.ts"
    ],
    "base_commit": "3021c043ee2f2039f936d019d01ab62fc21f02f2",
    "head_commit": "d1879c20ff5e3a4f67fd9e8aa1a8d4ba32b35a7c",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14287",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14287",
    "dockerfile": "",
    "pr_merged_at": "2025-03-20T07:00:45.000Z",
    "patch": "diff --git a/__mocks__/fetch.ts b/__mocks__/fetch.ts\nindex 4fee0b308be..da5977caf22 100644\n--- a/__mocks__/fetch.ts\n+++ b/__mocks__/fetch.ts\n@@ -108,6 +108,26 @@ const requestMock: any = vi.fn().mockImplementation((uri, params) => {\n         delete sessionResponse.capabilities.browserName\n     }\n \n+    if (\n+        body &&\n+        body.capabilities &&\n+        body.capabilities.alwaysMatch.mobileMode &&\n+        body.capabilities.alwaysMatch.windowsAppMode\n+    ) {\n+        sessionResponse.capabilities['appium:automationName'] = 'windows'\n+        delete sessionResponse.capabilities.browserName\n+    }\n+\n+    if (\n+        body &&\n+        body.capabilities &&\n+        body.capabilities.alwaysMatch.mobileMode &&\n+        body.capabilities.alwaysMatch.macAppMode\n+    ) {\n+        sessionResponse.capabilities['appium:automationName'] = 'mac2'\n+        delete sessionResponse.capabilities.browserName\n+    }\n+\n     if (\n         body &&\n         body.capabilities &&\n\ndiff --git a/packages/wdio-utils/src/envDetector.ts b/packages/wdio-utils/src/envDetector.ts\nindex 7b93369d4ce..f82143779ef 100644\n--- a/packages/wdio-utils/src/envDetector.ts\n+++ b/packages/wdio-utils/src/envDetector.ts\n@@ -95,11 +95,21 @@ function isFirefox(capabilities?: WebdriverIO.Capabilities) {\n     )\n }\n \n+/**\n+ * get the automation name value of the session\n+ *\n+ * @param  {Object}  capabilities  capabilities\n+ * @return {Boolean}               true if platform is mobile device\n+ */\n+function getAutomationName(capabilities: WebdriverIO.Capabilities) {\n+    return capabilities['appium:options']?.automationName || capabilities['appium:automationName']\n+}\n+\n /**\n  * check if current platform is mobile device\n  *\n- * @param  {Object}  caps  capabilities\n- * @return {Boolean}       true if platform is mobile device\n+ * @param  {Object}  capabilities  capabilities\n+ * @return {Boolean}               true if platform is mobile device\n  */\n function isMobile(capabilities: WebdriverIO.Capabilities) {\n     const browserName = (capabilities.browserName || '').toLowerCase()\n@@ -114,7 +124,7 @@ function isMobile(capabilities: WebdriverIO.Capabilities) {\n      * Return `isMobile:false` for those cases. There we also accepts that specific mobile browser\n      * tests (like the FF one on Android) are not seen as a mobile one\n      */\n-    const automationName = capabilities['appium:options']?.automationName || capabilities['appium:automationName']\n+    const automationName = getAutomationName(capabilities)\n     if (automationName && ['gecko', 'safari', 'chrome', 'chromium'].includes(automationName.toLocaleLowerCase())) {\n         return false\n     }\n@@ -190,6 +200,44 @@ function isAndroid(capabilities?: WebdriverIO.Capabilities) {\n     )\n }\n \n+/**\n+ * Check if session uses a specific automation name\n+ * @param  {Object}  capabilities  caps of session response\n+ * @param  {String}  platform      platform to check for (e.g., 'windows', 'mac2')\n+ * @return {Boolean}               true if run for specified platform\n+ */\n+function matchesAppAutomationName(automationNameValue: string, capabilities?: WebdriverIO.Capabilities): boolean {\n+    if (!capabilities) {\n+        return false\n+    }\n+\n+    const automationName = getAutomationName(capabilities)\n+\n+    if (!automationName) {\n+        return false\n+    }\n+\n+    return Boolean(automationName.match(new RegExp(automationNameValue, 'i')))\n+}\n+\n+/**\n+ * Check if session is run for Windows apps\n+ * @param  {Object}  capabilities  caps of session response\n+ * @return {Boolean}               true if run for Windows Apps\n+ */\n+function isWindowsApp(capabilities?: WebdriverIO.Capabilities): boolean {\n+    return matchesAppAutomationName('windows', capabilities)\n+}\n+\n+/**\n+ * Check if session is run for Mac apps\n+ * @param  {Object}  capabilities  caps of session response\n+ * @return {Boolean}               true if run for Mac Apps\n+ */\n+function isMacApp(capabilities?: WebdriverIO.Capabilities): boolean {\n+    return matchesAppAutomationName('mac2', capabilities)\n+}\n+\n /**\n  * detects if session is run on Sauce with extended debugging enabled\n  * @param  {object}  capabilities session capabilities\n@@ -270,7 +318,9 @@ export function capabilitiesEnvironmentDetector(capabilities: WebdriverIO.Capabi\n         isAndroid: isAndroid(capabilities),\n         isSauce: isSauce(capabilities),\n         isBidi: isBidi(capabilities),\n-        isChromium: isChromium(capabilities)\n+        isChromium: isChromium(capabilities),\n+        isWindowsApp: isWindowsApp(capabilities),\n+        isMacApp: isMacApp(capabilities)\n     }\n }\n \n@@ -297,6 +347,8 @@ export function sessionEnvironmentDetector({\n         isSauce: isSauce(requestedCapabilities),\n         isSeleniumStandalone: isSeleniumStandalone(capabilities),\n         isBidi: isBidi(capabilities),\n-        isChromium: isChromium(capabilities)\n+        isChromium: isChromium(capabilities),\n+        isWindowsApp: isWindowsApp(capabilities),\n+        isMacApp: isMacApp(capabilities)\n     }\n }\n\ndiff --git a/packages/webdriver/src/types.ts b/packages/webdriver/src/types.ts\nindex be4aefa8011..4476505d920 100644\n--- a/packages/webdriver/src/types.ts\n+++ b/packages/webdriver/src/types.ts\n@@ -27,6 +27,8 @@ export interface SessionFlags {\n     isSauce: boolean\n     isSeleniumStandalone: boolean\n     isBidi: boolean\n+    isWindowsApp: boolean\n+    isMacApp: boolean\n }\n \n type Fn = (...args: unknown[]) => unknown\n\ndiff --git a/packages/webdriver/src/utils.ts b/packages/webdriver/src/utils.ts\nindex 3f05d9f470c..e374dd5090e 100644\n--- a/packages/webdriver/src/utils.ts\n+++ b/packages/webdriver/src/utils.ts\n@@ -278,7 +278,7 @@ export function getPrototype ({ isW3C, isChromium, isFirefox, isMobile, isSauce,\n  * @param  {Object} options   driver instance or option object containing these flags\n  * @return {Object}           prototype object\n  */\n-export function getEnvironmentVars({ isW3C, isMobile, isIOS, isAndroid, isFirefox, isSauce, isSeleniumStandalone, isChromium }: Partial<SessionFlags>): PropertyDescriptorMap {\n+export function getEnvironmentVars({ isW3C, isMobile, isIOS, isAndroid, isFirefox, isSauce, isSeleniumStandalone, isChromium, isWindowsApp, isMacApp }: Partial<SessionFlags>): PropertyDescriptorMap {\n     return {\n         isW3C: { value: isW3C },\n         isMobile: { value: isMobile },\n@@ -298,6 +298,8 @@ export function getEnvironmentVars({ isW3C, isMobile, isIOS, isAndroid, isFirefo\n             }\n         },\n         isChromium: { value: isChromium },\n+        isWindowsApp: { value: isWindowsApp },\n+        isMacApp: { value: isMacApp }\n     }\n }\n \n\ndiff --git a/packages/webdriverio/src/commands/element/isDisplayed.ts b/packages/webdriverio/src/commands/element/isDisplayed.ts\nindex a0ead998b09..8b0e9c3f23a 100644\n--- a/packages/webdriverio/src/commands/element/isDisplayed.ts\n+++ b/packages/webdriverio/src/commands/element/isDisplayed.ts\n@@ -110,7 +110,7 @@ export async function isDisplayed (\n      * For mobile sessions with Appium we continue to use the elementDisplayed command\n      * as we can't run JS in native apps\n      */\n-    if (browser.isMobile && browser.isNativeContext) {\n+    if (browser.isMobile && (browser.isNativeContext || browser.isWindowsApp || browser.isMacApp)) {\n         /**\n          * there is no support yet for checking if an element is displayed within the\n          * viewport for native apps. We can only check if it's displayed at all.\n\ndiff --git a/website/docs/api/Browser.md b/website/docs/api/Browser.md\nindex a0582195de2..977d6cd45b6 100644\n--- a/website/docs/api/Browser.md\n+++ b/website/docs/api/Browser.md\n@@ -25,6 +25,8 @@ A browser object has the following properties:\n | `isFirefox` | `Boolean` | Indicates if this Firefox instance |\n | `isBidi` | `Boolean` | Indicates if this session uses Bidi |\n | `isSauce` | `Boolean` | Indicates if this session is Running on Sauce Labs |\n+| `isMacApp` | `Boolean` | Indicates if this session is Running for a native Mac App |\n+| `isWindowsApp` | `Boolean` | Indicates if this session is Running for a native Windows App |\n | `isMobile` | `Boolean` | Indicates a mobile session. See more under [Mobile Flags](#mobile-flags). |\n | `isIOS` | `Boolean` | Indicates an iOS session. See more under [Mobile Flags](#mobile-flags). |\n | `isAndroid` | `Boolean` | Indicates an Android session. See more under [Mobile Flags](#mobile-flags). |\n",
    "test_patch": "diff --git a/packages/wdio-utils/tests/envDetector.test.ts b/packages/wdio-utils/tests/envDetector.test.ts\nindex 2640604167e..dbc572b2c18 100644\n--- a/packages/wdio-utils/tests/envDetector.test.ts\n+++ b/packages/wdio-utils/tests/envDetector.test.ts\n@@ -266,14 +266,30 @@ describe('sessionEnvironmentDetector', () => {\n             platformName: 'WINDOWS',\n             'ms:experimental-webdriver': true,\n             'ms:waitForAppLaunch': 10,\n-            app: 'C:\\\\Program Files\\\\foo\\\\bar.exe',\n-            appArguments: '-noCloseConfirmationPopUp -shouldDisplayDiesToTake'\n+            'appium:app': 'C:\\\\Program Files\\\\foo\\\\bar.exe',\n+            'appium:appArguments': '-noCloseConfirmationPopUp -shouldDisplayDiesToTake',\n+            'appium:automationName': 'Windows'\n         }\n         const requestedCapabilities = { browserName: '' }\n-        const { isMobile, isIOS, isAndroid } = sessionEnvironmentDetector({ capabilities, requestedCapabilities })\n+        const { isMobile, isIOS, isAndroid, isWindowsApp } = sessionEnvironmentDetector({ capabilities, requestedCapabilities })\n+        expect(isMobile).toEqual(true)\n+        expect(isIOS).toEqual(false)\n+        expect(isAndroid).toEqual(false)\n+        expect(isWindowsApp).toEqual(true)\n+    })\n+\n+    it('should detect a Mac application automated through Appium', () => {\n+        const capabilities: any = {\n+            platformName: 'mac',\n+            'appium:appPath': '/Applications/MyAppName.app',\n+            'appium:automationName': 'mac2'\n+        }\n+        const requestedCapabilities = { browserName: '' }\n+        const { isMobile, isIOS, isAndroid, isMacApp } = sessionEnvironmentDetector({ capabilities, requestedCapabilities })\n         expect(isMobile).toEqual(true)\n         expect(isIOS).toEqual(false)\n         expect(isAndroid).toEqual(false)\n+        expect(isMacApp).toEqual(true)\n     })\n \n     it('should detect Android mobile app', function () {\n\ndiff --git a/packages/webdriver/tests/command.test.ts b/packages/webdriver/tests/command.test.ts\nindex 0e070ad9a73..08975777cf0 100644\n--- a/packages/webdriver/tests/command.test.ts\n+++ b/packages/webdriver/tests/command.test.ts\n@@ -85,6 +85,8 @@ class FakeClient extends EventEmitter {\n     isSauce = false\n     isFirefox = false\n     isBidi = false\n+    isWindowsApp = false\n+    isMacApp = false\n     isSeleniumStandalone = false\n     isNativeContext = false\n     mobileContext = ''\n\ndiff --git a/packages/webdriver/tests/index.test.ts b/packages/webdriver/tests/index.test.ts\nindex 6945de99e09..77a66827bfa 100644\n--- a/packages/webdriver/tests/index.test.ts\n+++ b/packages/webdriver/tests/index.test.ts\n@@ -245,7 +245,9 @@ describe('WebDriver', () => {\n                 isIOS: false,\n                 isAndroid: false,\n                 isChromium: false,\n-                isSauce: false\n+                isSauce: false,\n+                isWindowsApp: false,\n+                isMacApp: false\n             })\n             expect(client.isW3C).toBe(false)\n             expect(client.isMobile).toBe(false)\n@@ -253,6 +255,8 @@ describe('WebDriver', () => {\n             expect(client.isAndroid).toBe(false)\n             expect(client.isChromium).toBe(false)\n             expect(client.isSauce).toBe(false)\n+            expect(client.isWindowsApp).toBe(false)\n+            expect(client.isMacApp).toBe(false)\n \n             const anotherClient = WebDriver.attachToSession({ ...sessionOptions,\n                 isW3C: true,\n@@ -260,7 +264,9 @@ describe('WebDriver', () => {\n                 isIOS: true,\n                 isAndroid: true,\n                 isChromium: true,\n-                isSauce: true\n+                isSauce: true,\n+                isWindowsApp: true,\n+                isMacApp: true\n             })\n             expect(anotherClient.isW3C).toBe(true)\n             expect(anotherClient.isMobile).toBe(true)\n@@ -268,6 +274,8 @@ describe('WebDriver', () => {\n             expect(anotherClient.isAndroid).toBe(true)\n             expect(anotherClient.isChromium).toBe(true)\n             expect(anotherClient.isSauce).toBe(true)\n+            expect(anotherClient.isWindowsApp).toBe(true)\n+            expect(anotherClient.isMacApp).toBe(true)\n         })\n \n         it('should apply default connection details', () => {\n\ndiff --git a/packages/webdriverio/tests/commands/element/isDisplayed.test.ts b/packages/webdriverio/tests/commands/element/isDisplayed.test.ts\nindex 8f1c6592be4..4d63096b0d7 100644\n--- a/packages/webdriverio/tests/commands/element/isDisplayed.test.ts\n+++ b/packages/webdriverio/tests/commands/element/isDisplayed.test.ts\n@@ -108,6 +108,46 @@ describe('isDisplayed test', () => {\n             .toBe('/session/foobar-123/element/some-elem-123/displayed')\n     })\n \n+    it('should allow to check if element is displayed in mobile mode for Windows Apps', async () => {\n+        browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: {\n+                // @ts-ignore mock feature\n+                keepBrowserName: true,\n+                mobileMode: true,\n+                windowsAppMode: true,\n+            } as any\n+        })\n+        elem = await browser.$('#foo')\n+        vi.mocked(fetch).mockClear()\n+        expect(await elem.isDisplayed()).toBe(true)\n+        // Due to mobileMode being enabled we will have extra calls to fetch\n+        expect(fetch).toBeCalledTimes(1)\n+        // @ts-expect-error mock implementation\n+        expect(vi.mocked(fetch).mock.calls[0][0]!.pathname)\n+            .toBe('/session/foobar-123/element/some-elem-123/displayed')\n+    })\n+\n+    it('should allow to check if element is displayed in mobile mode for Mac Apps', async () => {\n+        browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: {\n+                // @ts-ignore mock feature\n+                keepBrowserName: true,\n+                mobileMode: true,\n+                macAppMode: true,\n+            } as any\n+        })\n+        elem = await browser.$('#foo')\n+        vi.mocked(fetch).mockClear()\n+        expect(await elem.isDisplayed()).toBe(true)\n+        // Due to mobileMode being enabled we will have extra calls to fetch\n+        expect(fetch).toBeCalledTimes(1)\n+        // @ts-expect-error mock implementation\n+        expect(vi.mocked(fetch).mock.calls[0][0]!.pathname)\n+            .toBe('/session/foobar-123/element/some-elem-123/displayed')\n+    })\n+\n     it('should throw if displayed check within viewport is done for native mobile apps', async () => {\n         browser = await remote({\n             baseUrl: 'http://foobar.com',\n\ndiff --git a/packages/webdriverio/tests/module.test.ts b/packages/webdriverio/tests/module.test.ts\nindex a6ba384fd66..1d99b0ec987 100644\n--- a/packages/webdriverio/tests/module.test.ts\n+++ b/packages/webdriverio/tests/module.test.ts\n@@ -166,7 +166,9 @@ describe('WebdriverIO module interface', () => {\n                 isIOS: false,\n                 isMobile: false,\n                 isSauce: false,\n-                isBidi: false\n+                isBidi: false,\n+                isWindowsApp: false,\n+                isMacApp: false,\n             })\n         })\n     })\n\ndiff --git a/packages/webdriverio/tests/protocol-stub.test.ts b/packages/webdriverio/tests/protocol-stub.test.ts\nindex 53e82479231..974cfc255ac 100644\n--- a/packages/webdriverio/tests/protocol-stub.test.ts\n+++ b/packages/webdriverio/tests/protocol-stub.test.ts\n@@ -19,7 +19,7 @@ describe('newSession', () => {\n                 foo: 'bar'\n             }\n         })\n-        expect(Object.keys(session)).toHaveLength(19)\n+        expect(Object.keys(session)).toHaveLength(21)\n         expect(session.isAndroid).toBe(false)\n         expect(session.isChrome).toBe(false)\n         expect(session.isChromium).toBe(false)\n@@ -28,6 +28,8 @@ describe('newSession', () => {\n         expect(session.isMobile).toBe(true)\n         expect(session.isSauce).toBe(false)\n         expect(session.isBidi).toBe(false)\n+        expect(session.isWindowsApp).toBe(false)\n+        expect(session.isMacApp).toBe(false)\n         expect(session.capabilities).toEqual({\n             deviceName: 'Some Device',\n             platformName: 'iOS',\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14282",
    "pr_id": 14282,
    "issue_id": 14281,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Mobile Swipe -  percentage calculation issue\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.11.0\n\n### Node.js Version\n\n20.11.1\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n\n```\n\n### What happened?\n\nFor the mobile commands [swipe](https://webdriver.io/docs/api/mobile/swipe) and [scrollIntoView](https://webdriver.io/docs/api/mobile/scrollIntoView), we have the option to set 'percent'\n\nAccording to documentation _\"The percentage of the (default) scrollable element to swipe. This is a value between 0 and 1. Default is 0.95.\"_ \n\nIn reality, when you pass 0.5, it stops swiping all, and if you pass < 0.5, the swipe will start swiping opposite to what you set direction.\n\nThe problem is coming from [this code](https://github.com/webdriverio/webdriverio/blob/main/packages/webdriverio/src/commands/mobile/swipe.ts#L141) because we subtract swipePercentage from the beginning of FROM and from the end of TO swipe line.   \n\nI left 2 direction(DOWN, UP) for better readability :\n\n```{javascript}\nconst { x, y, width, height } = await browser.getElementRect(await scrollableElement?.elementId)\n\nconst scrollRectangles = {\n  top: { x: Math.round(x + width / 2), y: Math.round(y + height - height * swipePercentage) },\n  bottom: { x: Math.round(x + width / 2), y: Math.round(y + height * swipePercentage) },\n}\n\n// 3. Swipe in the given direction\nlet from: XY\nlet to: XY\n\nswitch (direction) {\ncase MobileScrollDirection.Down:\n        from = scrollRectangles.top\n        to = scrollRectangles.bottom\n        break\ncase MobileScrollDirection.Up:\n        from = scrollRectangles.bottom\n        to = scrollRectangles.top\n        break\n```\n\nLet's calculate scroll rectangles with 0.95 percent for the next scrollableElement:  `x: 21, y 300, width 1059, height: 2316`\n\n```\nconst scrollRectangles = {\n  top: { x:  21 + 1059 / 2  = 550.5, y: 300 + 2316 - 2316 * 0.95 =  415.8 },\n  bottom: { x:  21 + 1059 / 2  = 550.5, y: 300 + 2316 * 0.95 = 2500.2  },\n}\n```\nThe top \"y\" is 415.8, and the bottom \"y\" is 2500.2, which is fine.\n\n\nNow let's do the same for 0.5 swipePercentage\n\n```\nconst scrollRectangles = {\n  top: { x:  21 + 1059 / 2  = 550.5, y: 300 + 2316 - 2316 * 0.5 = 1458  },\n  bottom: { x:  21 + 1059 / 2  = 550.5, y: 300 + 2316 * 0.5 = 1458  },\n}\n```\nAt this point, the \"y\" coordinate for the top and bottom is the same, meaning no vertical swipe will happen.\n\n### What is your expected behavior?\n\nI would propose reducing \"swipePercentage\" only from the beginning of the swipe line. I did not notice any problem if the swipe ends at the edge of the screen.\n\n```\nconst scrollRectangles = {\n  from: {\n    top: { x: Math.round(x + width / 2), y: Math.round(y + height - height * swipePercentage) },\n    right: { x: Math.round(x + width * swipePercentage), y: Math.round(y + height / 2) },\n    bottom: { x: Math.round(x + width / 2), y: Math.round(y + height * swipePercentage) },\n    left: { x: Math.round(x + width - width * swipePercentage), y: Math.round(y + height / 2) },\n  },\n  to: {\n    top: { x: Math.round(x + width / 2), y: Math.round(y + height) },\n    right: { x: Math.round(x + width), y: Math.round(y + height / 2) },\n    bottom: { x: Math.round(x + width / 2), y: Math.round(y + height) },\n    left: { x: Math.round(x + width), y: Math.round(y + height / 2) },\n    },\n}\n\n// 3. Swipe in the given direction\nlet from: XY\nlet to: XY\n\nswitch (direction) {\ncase MobileScrollDirection.Down:\n  from = scrollRectangles.from.top\n  to = scrollRectangles.to.bottom\n  break\n  case MobileScrollDirection.Left:\n    from = scrollRectangles.from.right\n    to= scrollRectangles.to.left\n    break\n  case MobileScrollDirection.Right:\n    from = scrollRectangles.from.left\n    to = scrollRectangles.to.right\n    break\n  case MobileScrollDirection.Up:\n    from = scrollRectangles.from.bottom\n    to = scrollRectangles.to.top\n    break\n  default:\n    throw new Error(`Unknown direction: ${direction}`)\n  }\n\n  return { from, to }\n```\n\n### How to reproduce the bug.\n\nTo reproduce this bug, you need to call the `swipe` or `scrollIntoView` mobile command with a percent <= 0.5 \n\n### Relevant log output\n\n```typescript\nno output\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 659,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/mobile/swipe.ts",
      "packages/webdriverio/tests/commands/mobile/__snapshots__/swipe.test.ts.snap",
      "packages/webdriverio/tests/commands/mobile/swipe.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/mobile/__snapshots__/swipe.test.ts.snap",
      "packages/webdriverio/tests/commands/mobile/swipe.test.ts"
    ],
    "base_commit": "f56e47bf373854de13a763e491b963e3cdbb46ca",
    "head_commit": "3c5b96ae42eb909ddb1c78c5cb0a4429f0100f1e",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14282",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14282",
    "dockerfile": "",
    "pr_merged_at": "2025-03-18T05:32:35.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/mobile/swipe.ts b/packages/webdriverio/src/commands/mobile/swipe.ts\nindex 0ffd6d1f8d5..be539e2b1da 100644\n--- a/packages/webdriverio/src/commands/mobile/swipe.ts\n+++ b/packages/webdriverio/src/commands/mobile/swipe.ts\n@@ -137,12 +137,17 @@ async function calculateFromTo({\n     //    - left\n     //    of the element. These positions will contain the x and y coordinates on where to put the finger\n     const { x, y, width, height } = await browser.getElementRect(await scrollableElement?.elementId)\n+\n+    // calculate the offset\n+    const verticalOffset = height - height * swipePercentage\n+    const horizontalOffset = width - width * swipePercentage\n+\n     // It's always advisable to swipe from the center of the element.\n     const scrollRectangles = {\n-        top: { x: Math.round(x + width / 2), y: Math.round(y + height - height * swipePercentage) },\n-        right: { x: Math.round(x + width * swipePercentage), y: Math.round(y + height / 2) },\n-        bottom: { x: Math.round(x + width / 2), y: Math.round(y + height * swipePercentage) },\n-        left: { x: Math.round(x + width - width * swipePercentage), y: Math.round(y + height / 2) },\n+        top: { x: Math.round(x + width / 2), y: Math.round(y + verticalOffset / 2) },\n+        right: { x: Math.round(x + width - horizontalOffset / 2), y: Math.round(y + height / 2) },\n+        bottom: { x: Math.round(x + width / 2), y: Math.round(y + height - verticalOffset / 2 ) },\n+        left: { x: Math.round(x + horizontalOffset / 2), y: Math.round(y + height / 2) },\n     }\n \n     // 3. Swipe in the given direction\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/mobile/__snapshots__/swipe.test.ts.snap b/packages/webdriverio/tests/commands/mobile/__snapshots__/swipe.test.ts.snap\nindex 7202a1eec02..d641187c302 100644\n--- a/packages/webdriverio/tests/commands/mobile/__snapshots__/swipe.test.ts.snap\n+++ b/packages/webdriverio/tests/commands/mobile/__snapshots__/swipe.test.ts.snap\n@@ -57,7 +57,7 @@ exports[`swipe test > should call a swipe down command with 25% for a scrollable\n       \"origin\": \"viewport\",\n       \"type\": \"pointerMove\",\n       \"x\": 250,\n-      \"y\": 500,\n+      \"y\": 350,\n     },\n     {\n       \"button\": 0,\n@@ -73,7 +73,7 @@ exports[`swipe test > should call a swipe down command with 25% for a scrollable\n       \"origin\": \"viewport\",\n       \"type\": \"pointerMove\",\n       \"x\": 250,\n-      \"y\": 300,\n+      \"y\": 450,\n     },\n     {\n       \"button\": 0,\n@@ -97,7 +97,7 @@ exports[`swipe test > should call a swipe down command with duration 5000 for a\n       \"origin\": \"viewport\",\n       \"type\": \"pointerMove\",\n       \"x\": 250,\n-      \"y\": 580,\n+      \"y\": 590,\n     },\n     {\n       \"button\": 0,\n@@ -113,7 +113,7 @@ exports[`swipe test > should call a swipe down command with duration 5000 for a\n       \"origin\": \"viewport\",\n       \"type\": \"pointerMove\",\n       \"x\": 250,\n-      \"y\": 220,\n+      \"y\": 210,\n     },\n     {\n       \"button\": 0,\n@@ -128,7 +128,7 @@ exports[`swipe test > should call a swipe down command with duration 5000 for a\n }\n `;\n \n-exports[`swipe test > should call a swipe left command with 75% for a scrollable element 1`] = `\n+exports[`swipe test > should call a swipe left command with 50% for a scrollable element 1`] = `\n {\n   \"actions\": [\n     {\n@@ -168,7 +168,7 @@ exports[`swipe test > should call a swipe left command with 75% for a scrollable\n }\n `;\n \n-exports[`swipe test > should call a swipe right command with 80% for a scrollable element 1`] = `\n+exports[`swipe test > should call a swipe right command with 75% for a scrollable element 1`] = `\n {\n   \"actions\": [\n     {\n@@ -176,7 +176,7 @@ exports[`swipe test > should call a swipe right command with 80% for a scrollabl\n       \"duration\": 100,\n       \"origin\": \"viewport\",\n       \"type\": \"pointerMove\",\n-      \"x\": 160,\n+      \"x\": 138,\n       \"y\": 400,\n     },\n     {\n@@ -192,7 +192,7 @@ exports[`swipe test > should call a swipe right command with 80% for a scrollabl\n       \"duration\": 1500,\n       \"origin\": \"viewport\",\n       \"type\": \"pointerMove\",\n-      \"x\": 340,\n+      \"x\": 363,\n       \"y\": 400,\n     },\n     {\n@@ -217,7 +217,7 @@ exports[`swipe test > should call a swipe up command with 45% for a scrollable e\n       \"origin\": \"viewport\",\n       \"type\": \"pointerMove\",\n       \"x\": 250,\n-      \"y\": 380,\n+      \"y\": 490,\n     },\n     {\n       \"button\": 0,\n@@ -233,7 +233,7 @@ exports[`swipe test > should call a swipe up command with 45% for a scrollable e\n       \"origin\": \"viewport\",\n       \"type\": \"pointerMove\",\n       \"x\": 250,\n-      \"y\": 420,\n+      \"y\": 310,\n     },\n     {\n       \"button\": 0,\n\ndiff --git a/packages/webdriverio/tests/commands/mobile/swipe.test.ts b/packages/webdriverio/tests/commands/mobile/swipe.test.ts\nindex 4c8f513bac8..e96bad3a9e4 100644\n--- a/packages/webdriverio/tests/commands/mobile/swipe.test.ts\n+++ b/packages/webdriverio/tests/commands/mobile/swipe.test.ts\n@@ -108,8 +108,8 @@ describe('swipe test', () => {\n         expect(logSpy).toHaveBeenCalledWith('The percentage to swipe should be a number between 0 and 1.')\n     })\n \n-    const percentages = [0.25, 0.45, 0.75, 0.8]\n-    Object.values(MobileScrollDirection) .forEach((direction, index) => {\n+    const percentages = [0.25, 0.45, 0.5, 0.75, 0.8]\n+    Object.values(MobileScrollDirection).forEach((direction, index) => {\n         const percent = percentages[index % percentages.length]\n \n         it(`should call a swipe ${direction} command with ${percent * 100}% for a scrollable element`, async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14278",
    "pr_id": 14278,
    "issue_id": 14257,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Possible EventEmitter memory leak detected\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.11.0\n\n### Node.js Version\n\nv20.18.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\n      'browserName': 'electron',\n      'wdio:electronServiceOptions': {\n        appBinaryPath,\n        appArgs: ['foo', 'bar=baz'],\n      },\n    },\n```\n\n### What happened?\n\nWhen execute test suite which runs `execute` command many times, the following message is displayed multiple times. I don't know if this is a direct cause, but the test results are not stable.\n\nPlease check the Relevant log output.\n*) `NODE_OPTIONS=\"--trace-warnings\"` is set when run `wdio` command at the command prompt\n\n\nThis issue is related to #14246\nhttps://github.com/webdriverio/webdriverio/blob/9127b92109987dff12d9c8203a96e2c3a76dfcab/packages/webdriver/src/command.ts#L223-L264\n\n### What is your expected behavior?\n\nThe log is not displayed.\n\n### How to reproduce the bug.\n\n1. Clone and checkout \n  https://github.com/mato533/webdriverio/tree/inv/14257\n    repository: `mato533/webdriverio`\n    branch: `inv/14257`\n\n1. build\n   ```\n   $ pnpm run setup   \n   ```\n\n1. Run test\n   ```\n   $ pnpm test:e2e:testrunner  \n   ```\n\n### Relevant log output\n\n```typescript\n> wdio run ./wdio.conf.ts\n\nExecution of 1 workers started at 2025-03-10T05:45:52.194Z\n\n[0-0] RUNNING in chrome - file:///test/api.spec.ts\n[0-0] (node:49036) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 result listeners added to [EventEmitter]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit\n[0-0]     at genericNodeError (node:internal/errors:984:15)\n[0-0]     at wrappedFn (node:internal/errors:538:14)\n[0-0]     at _addListener (node:events:593:17)\n[0-0]     at EventEmitter.addListener (node:events:611:10)\n[0-0]     at Browser.WebDriver.prototype.<computed> (/work/wdio-electron-service/node_modules/.pnpm/@wdio+utils@9.11.0/node_modules/@wdio/utils/build/index.js:462:29)\n[0-0]     at Browser.manageSessionAbortions (file:///work/wdio-electron-service/node_modules/.pnpm/webdriver@9.11.0/node_modules/webdriver/build/node.js:180:8)\n[0-0]     at Browser.protocolCommand (file:///work/wdio-electron-service/node_modules/.pnpm/webdriver@9.11.0/node_modules/webdriver/build/node.js:100:72)\n[0-0]     at Browser.wrapCommandFn (/work/wdio-electron-service/node_modules/.pnpm/@wdio+utils@9.11.0/node_modules/@wdio/utils/build/index.js:902:32)\n[0-0]     at Browser.<anonymous> (/work/wdio-electron-service/node_modules/.pnpm/@wdio+utils@9.11.0/node_modules/@wdio/utils/build/index.js:1017:20)\n[0-0]     at Browser.execute (/work/wdio-electron-service/node_modules/.pnpm/webdriverio@9.11.0_puppeteer-core@22.15.0/node_modules/webdriverio/build/node.js:3576:15)\n[0-0]     at Browser.wrapCommandFn (/work/wdio-electron-service/node_modules/.pnpm/@wdio+utils@9.11.0/node_modules/@wdio/utils/build/index.js:902:32)\n[0-0]     at Browser.<anonymous> (/work/wdio-electron-service/node_modules/.pnpm/@wdio+utils@9.11.0/node_modules/@wdio/utils/build/index.js:1017:20)\n[0-0]     at ElectronWorkerService.execute (/work/wdio-electron-service/packages/src/commands/execute.ts:26:37)\n[0-0]     at Object.execute (/work/wdio-electron-service/packages/src/service.ts:68:77)\n[0-0]     at Function.mock.update (/work/wdio-electron-service/packages/src/mock.ts:290:2)\n[0-0]     at <anonymous> (/work/wdio-electron-service/packages/src/service.ts:196:73)\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 558,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriver/src/command.ts",
      "packages/webdriver/tests/command.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriver/tests/command.test.ts"
    ],
    "base_commit": "f56e47bf373854de13a763e491b963e3cdbb46ca",
    "head_commit": "889a378d4742d94ea0f9c46bb56bab74b5a2255a",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14278",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14278",
    "dockerfile": "",
    "pr_merged_at": "2025-03-18T07:19:39.000Z",
    "patch": "diff --git a/packages/webdriver/src/command.ts b/packages/webdriver/src/command.ts\nindex 6302fafab96..0c0f24e6bc4 100644\n--- a/packages/webdriver/src/command.ts\n+++ b/packages/webdriver/src/command.ts\n@@ -226,10 +226,26 @@ function manageSessionAbortions (this: BaseClient): {\n     cleanup: () => void\n } {\n     const abort = new AbortController()\n+    const abortOnSessionEnd = (result: WebDriverResultEvent) => {\n+        if (result.command !== 'deleteSession') {\n+            return\n+        }\n+        const abortListeners = sessionAbortListeners.get(this.sessionId)\n+        if (abortListeners) {\n+            for (const abortListener of abortListeners) {\n+                abortListener.abort()\n+            }\n+            abortListeners.clear()\n+            sessionAbortListeners.set(this.sessionId, null)\n+        }\n+\n+    }\n+\n     let abortListenerForCurrentSession = sessionAbortListeners.get(this.sessionId)\n     if (typeof abortListenerForCurrentSession === 'undefined') {\n         abortListenerForCurrentSession = new Set()\n         sessionAbortListeners.set(this.sessionId, abortListenerForCurrentSession)\n+        this.on('result', abortOnSessionEnd)\n     }\n \n     /**\n@@ -243,16 +259,7 @@ function manageSessionAbortions (this: BaseClient): {\n      * listen for session deletion and abort all requests\n      */\n     abortListenerForCurrentSession.add(abort)\n-    const abortOnSessionEnd = (result: WebDriverResultEvent) => {\n-        if (result.command === 'deleteSession') {\n-            for (const abortListener of abortListenerForCurrentSession) {\n-                abortListener.abort()\n-            }\n-            abortListenerForCurrentSession.clear()\n-            sessionAbortListeners.set(this.sessionId, null)\n-        }\n-    }\n-    this.on('result', abortOnSessionEnd)\n+\n     return {\n         isAborted: false,\n         abortSignal: abort.signal,\n@@ -261,4 +268,4 @@ function manageSessionAbortions (this: BaseClient): {\n             abortListenerForCurrentSession?.delete(abort)\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
    "test_patch": "diff --git a/packages/webdriver/tests/command.test.ts b/packages/webdriver/tests/command.test.ts\nindex 2cb6a4a4cc7..0e070ad9a73 100644\n--- a/packages/webdriver/tests/command.test.ts\n+++ b/packages/webdriver/tests/command.test.ts\n@@ -95,6 +95,7 @@ class FakeClient extends EventEmitter {\n         logLevel: 'warn' as Options.WebDriverLogTypes\n     } as any\n     emit = vi.fn()\n+    on = vi.fn()\n }\n \n const scope: BaseClient = new FakeClient()\n@@ -104,6 +105,7 @@ describe('command wrapper', () => {\n     beforeEach(() => {\n         vi.mocked(log.warn).mockClear()\n         vi.mocked(scope.emit).mockClear()\n+        vi.mocked(scope.on).mockClear()\n         vi.mocked(thenMock).mockClear()\n         vi.mocked(catchMock).mockClear()\n     })\n@@ -204,6 +206,24 @@ describe('command wrapper', () => {\n         expect(log.warn).toHaveBeenCalledTimes(0)\n     })\n \n+    it('should register abort listener', async () => {\n+        scope.sessionId = '456' // Emulate new session\n+        const commandFn = commandWrapper(commandMethod, commandPath, commandEndpoint, true)\n+        await commandFn.call(scope, '/path', 'css selector', '#body', 123)\n+\n+        expect(scope.on).toHaveBeenCalledTimes(1)\n+        expect(scope.on).toHaveBeenLastCalledWith('result', expect.any(Function))\n+    })\n+\n+    it('should register abort listener once when request was called multiple times', async () => {\n+        scope.sessionId = '789' // Emulate new session\n+        const commandFn = commandWrapper(commandMethod, commandPath, commandEndpoint, true)\n+        await commandFn.call(scope, '/path', 'css selector', '#body', 123)\n+        await commandFn.call(scope, '/path', 'css selector', '#body', 123)\n+\n+        expect(scope.on).toHaveBeenCalledTimes(1)\n+    })\n+\n     it('should log deprecation notice', async () => {\n         const deprecatedCommandEndpoint = {\n             deprecated: 'This command will soon be deprecated.',\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14270",
    "pr_id": 14270,
    "issue_id": 4801,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "browser.execute doesn't refetch element\n**Environment (please complete the following information):**\r\n - **WebdriverIO version:** 5.16.5\r\n\r\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n**To Reproduce**\r\n```\r\nbrowser.url(\"http://guinea-pig.webdriver.io\")\r\nconst el = $('.box')\r\nbrowser.refresh()\r\nbrowser.execute(el => el, el)\r\n```\r\n\r\n**Expected behavior**\r\n`browser.execute` should refetch element \r\n\r\n**Log**\r\n`stale element reference: element is not attached to the page document\r\n  (Session info: headless chrome=78.0.3904.108)`\r\n\r\n**Additional context**\r\nUsing `el.isExisting()` doesn't help neither because it's not updating element id to the new one (and I'm not sure if t actually should)",
    "issue_word_count": 105,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/element/execute.ts",
      "packages/webdriverio/tests/commands/element/execute.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/element/execute.test.ts"
    ],
    "base_commit": "8f45cfeb6a04d6d0c4ff6f54b1f5a389366bbc32",
    "head_commit": "d34da8033ed8d77a7103fcffdbb4491eb111bc74",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14270",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14270",
    "dockerfile": "",
    "pr_merged_at": "2025-03-12T00:47:12.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/element/execute.ts b/packages/webdriverio/src/commands/element/execute.ts\nindex e6185b04eed..c7e08b8e282 100644\n--- a/packages/webdriverio/src/commands/element/execute.ts\n+++ b/packages/webdriverio/src/commands/element/execute.ts\n@@ -42,5 +42,6 @@ export async function execute<ReturnValue, InnerArguments extends unknown[]> (\n     ...args: InnerArguments\n ): Promise<ReturnValue> {\n     const browser = getBrowserObject(this)\n+    await this.waitForExist()\n     return browser.execute(script, this, ...args)\n }\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/element/execute.test.ts b/packages/webdriverio/tests/commands/element/execute.test.ts\nindex e939a142497..b3410c25590 100644\n--- a/packages/webdriverio/tests/commands/element/execute.test.ts\n+++ b/packages/webdriverio/tests/commands/element/execute.test.ts\n@@ -1,5 +1,5 @@\n import path from 'node:path'\n-import { expect, describe, it, vi } from 'vitest'\n+import { expect, describe, it, vi, beforeEach } from 'vitest'\n import { ELEMENT_KEY } from 'webdriver'\n \n import { remote } from '../../../src/index.js'\n@@ -8,6 +8,10 @@ vi.mock('fetch')\n vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdio/logger')))\n \n describe('execute test', () => {\n+    beforeEach(() => {\n+        vi.mocked(fetch).mockClear()\n+    })\n+\n     it('should execute the script', async () => {\n         const browser = await remote({\n             baseUrl: 'http://foobar.com',\n@@ -19,12 +23,32 @@ describe('execute test', () => {\n         await browser.$('#foo').execute((elem, a, b, c) => (elem.selector as string) + a + b + c, 1, 2, 3)\n         expect((vi.mocked(fetch).mock.calls[1][0] as any).pathname)\n             .toBe('/session/foobar-123/element')\n-        expect(JSON.parse(vi.mocked(fetch).mock.calls[2][1]?.body as string)).toEqual(expect.objectContaining({\n+        expect(JSON.parse(vi.mocked(fetch).mock.calls[4][1]?.body as string)).toEqual(expect.objectContaining({\n             script: expect.stringContaining('return ((elem, a, b, c) => elem.selector + a + b + c).apply(null, arguments)'),\n             args: [{ [ELEMENT_KEY]: 'some-elem-123', ELEMENT: 'some-elem-123' }, 1, 2, 3]\n         }))\n     })\n \n+    it('should wait for element to exist', async () => {\n+        const browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: {\n+                browserName: 'foobar'\n+            }\n+        })\n+\n+        await browser.$('#foo').execute((elem) => elem)\n+        expect(vi.mocked(fetch).mock.calls.map(call => call[0])).toMatchInlineSnapshot(`\n+          [\n+            \"http://localhost:4321/session\",\n+            \"http://localhost:4321/session/foobar-123/element\",\n+            \"http://localhost:4321/session/foobar-123/elements\",\n+            \"http://localhost:4321/session/foobar-123/element\",\n+            \"http://localhost:4321/session/foobar-123/execute/sync\",\n+          ]\n+        `)\n+    })\n+\n     it('should return correct value', async () => {\n         const browser = await remote({\n             baseUrl: 'http://foobar.com',\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14250",
    "pr_id": 14250,
    "issue_id": 13516,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Cannot find mocha.css\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.0.7 and 8.38.3\n\n### Node.js Version\n\n20.13.1\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n_No response_\n\n### What happened?\n\nTried to run my tests as usual:\r\nhttps://github.com/humanwhocodes/humanfs/pull/130\r\n\r\nIn v8.38.3, received the following error:\r\n\r\n```\r\n[0-0]  Error:  Test failed due to following error(s):\r\n  - mocha.css: Failed to load resource: the server responded with a status of 404 \r\n(Not Found)\r\n\r\n[0-0] FAILED in chrome - file:///C:/Users/nzaka/projects/humanwhocodes/fsx/packages/web/tests/web-hfs.test.js\r\n```\r\n\r\nIn v9.0.7, I receive the same error, but also the Firefox run fails with a timeout of 60s.\n\n### What is your expected behavior?\n\nThe tests to run successfully.\n\n### How to reproduce the bug.\n\nThis is the package in question:\r\nhttps://github.com/humanwhocodes/humanfs/tree/main/packages/web\r\n\r\nUp until recently, this was working fine. After cloning the repo:\r\n\r\n```shell\r\ncd packages/web\r\nnpm install\r\nnpm test\r\n```\n\n### Relevant log output\n\n```typescript\n[0-0]  Error:  Test failed due to following error(s):\r\n  - mocha.css: Failed to load resource: the server responded with a status of 404 \r\n(Not Found)\r\n\r\n[0-0] FAILED in chrome - file:///C:/Users/nzaka/projects/humanwhocodes/fsx/packages/web/tests/web-hfs.test.js\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 274,
    "test_files_count": 2,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "packages/wdio-browser-runner/package.json",
      "packages/wdio-browser-runner/src/browser/frameworks/mocha.ts",
      "packages/wdio-browser-runner/src/vite/plugins/testrunner.ts",
      "packages/wdio-browser-runner/src/vite/utils.ts",
      "packages/wdio-browser-runner/tests/vite/__snapshots__/utils.test.ts.snap"
    ],
    "pr_changed_test_files": [
      "packages/wdio-browser-runner/src/vite/plugins/testrunner.ts",
      "packages/wdio-browser-runner/tests/vite/__snapshots__/utils.test.ts.snap"
    ],
    "base_commit": "948a387dd0d8fe7fb691f1f6f1da7dfa4a5e2c8e",
    "head_commit": "783707e67abe8641f00ee08078ca09c1fd7aa1aa",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14250",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14250",
    "dockerfile": "",
    "pr_merged_at": "2025-03-05T18:56:39.000Z",
    "patch": "diff --git a/packages/wdio-browser-runner/package.json b/packages/wdio-browser-runner/package.json\nindex d5741da9334..4de17f80831 100644\n--- a/packages/wdio-browser-runner/package.json\n+++ b/packages/wdio-browser-runner/package.json\n@@ -58,6 +58,9 @@\n       \"browserSource\": \"./src/browser/expect.ts\",\n       \"browser\": \"./build/browser/expect.js\",\n       \"types\": \"./build/browser/expect.d.ts\"\n+    },\n+    \"./third_party/*\": {\n+      \"import\": \"./build/third_party/*\"\n     }\n   },\n   \"scripts\": {\n\ndiff --git a/packages/wdio-browser-runner/src/browser/frameworks/mocha.ts b/packages/wdio-browser-runner/src/browser/frameworks/mocha.ts\nindex 109d1f2d6de..5ec7d5214ae 100644\n--- a/packages/wdio-browser-runner/src/browser/frameworks/mocha.ts\n+++ b/packages/wdio-browser-runner/src/browser/frameworks/mocha.ts\n@@ -265,7 +265,7 @@ export class MochaFramework extends HTMLElement {\n const template = document.createElement('template')\n template.innerHTML = /*html*/`\n <style>\n-    @import \"/node_modules/mocha/mocha.css\";\n+    @import \"@wdio/browser-runner/third_party/mocha.css\";\n \n     .reporter {\n         transition: width .3s;\n\ndiff --git a/packages/wdio-browser-runner/src/vite/utils.ts b/packages/wdio-browser-runner/src/vite/utils.ts\nindex c1d9690b2b1..303bcca231e 100644\n--- a/packages/wdio-browser-runner/src/vite/utils.ts\n+++ b/packages/wdio-browser-runner/src/vite/utils.ts\n@@ -18,8 +18,6 @@ export async function getTemplate(options: WebdriverIO.BrowserRunnerOptions, env\n     const isHeadless = options.headless || Boolean(process.env.CI)\n     const alias = (options.viteConfig as (InlineConfig | undefined))?.resolve?.alias || {}\n     const usesTailwindCSS = await hasFileByExtensions(path.join(root, 'tailwind.config'))\n-    const mochaCSSHref = path.join(__dirname, 'third_party', 'mocha.css')\n-    const mochaJSSrc = path.join(__dirname, 'third_party', 'mocha.js')\n \n     /**\n      * clean up some values that might cause serialization issues\n@@ -71,8 +69,8 @@ export async function getTemplate(options: WebdriverIO.BrowserRunnerOptions, env\n                     return mod\n                 }\n             </script>\n-            <link rel=\"stylesheet\" href=\"/@fs/${mochaCSSHref}\">\n-            <script type=\"module\" src=\"/@fs/${mochaJSSrc}\"></script>\n+            <link rel=\"stylesheet\" href=\"@wdio/browser-runner/third_party/mocha.css\">\n+            <script type=\"module\" src=\"@wdio/browser-runner/third_party/mocha.js\"></script>\n             ${sourceMapScript}\n             <script type=\"module\">\n                 ${sourceMapSetupCommand}\n",
    "test_patch": "diff --git a/packages/wdio-browser-runner/src/vite/plugins/testrunner.ts b/packages/wdio-browser-runner/src/vite/plugins/testrunner.ts\nindex 449d19cf7f1..8eff95d154f 100644\n--- a/packages/wdio-browser-runner/src/vite/plugins/testrunner.ts\n+++ b/packages/wdio-browser-runner/src/vite/plugins/testrunner.ts\n@@ -96,6 +96,13 @@ export function testrunner(options: WebdriverIO.BrowserRunnerOptions): Plugin[]\n             if (MODULES_TO_MOCK.includes(id)) {\n                 return mockModulePath\n             }\n+\n+            /**\n+             * redirect requests to 3rd party dependencies\n+             */\n+            if (id.startsWith('/@wdio/browser-runner/third_party/')) {\n+                return path.resolve(__dirname, ...id.split('/').slice(3))\n+            }\n         },\n         load(id) {\n             /**\n\ndiff --git a/packages/wdio-browser-runner/tests/vite/__snapshots__/utils.test.ts.snap b/packages/wdio-browser-runner/tests/vite/__snapshots__/utils.test.ts.snap\nindex aab59db3561..7355870c1cf 100644\n--- a/packages/wdio-browser-runner/tests/vite/__snapshots__/utils.test.ts.snap\n+++ b/packages/wdio-browser-runner/tests/vite/__snapshots__/utils.test.ts.snap\n@@ -34,8 +34,8 @@ exports[`getTemplate > renders template correctly 1`] = `\n                     return mod\n                 }\n             </script>\n-            <link rel=\"stylesheet\" href=\"/@fs//foo/bar/mocha.css\">\n-            <script type=\"module\" src=\"/@fs//foo/bar/mocha.js\"></script>\n+            <link rel=\"stylesheet\" href=\"@wdio/browser-runner/third_party/mocha.css\">\n+            <script type=\"module\" src=\"@wdio/browser-runner/third_party/mocha.js\"></script>\n             <script src=\"/@fs//foo/bar/browser-source-map-support.js\"></script>\n             <script type=\"module\">\n                 sourceMapSupport.install()\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14246",
    "pr_id": 14246,
    "issue_id": 14240,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: waitForDisplayed command leaks\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.10.1\n\n### Node.js Version\n\nv20.18.2\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\n{\n  browserName: \"chrome\",\n  \"goog:chromeOptions\": {\n    args: [\"--headless=new\", \"--disable-gpu\"],\n  },\n  \"wdio:enforceWebDriverClassic\": true,\n}\n```\n\n### What happened?\n\nWhen running `waitForDisplayed({ reverse: true })`, there are leaking interval checks even after the session is closed\n\n### What is your expected behavior?\n\nThere are no leaks\n\n### How to reproduce the bug.\n\nPut this into a sample project for convenience: https://github.com/just-boris/wdio-leaking-wait\n\nWebdriver code\n\n```js\nimport { remote } from \"webdriverio\";\n\nconst browser = await remote({\n  logLevel: \"info\",\n  capabilities: {\n    browserName: \"chrome\",\n    \"goog:chromeOptions\": {\n      args: [\"--headless=new\", \"--disable-gpu\"],\n    },\n    // without this capability the waitForDisplayed does not work at all\n    \"wdio:enforceWebDriverClassic\": true,\n  },\n});\n\nawait browser.url(\"http://localhost:8080\");\n\nawait browser.saveScreenshot(\"before.png\");\ntry {\n  await browser.$(\".loading\").waitForDisplayed({ reverse: true });\n} finally {\n  await browser.saveScreenshot(\"after.png\");\n  await browser.deleteSession();\n}\n```\n\nHTML file\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n\n    <title>Document</title>\n</head>\n<body>\n<div class=\"loading\">Loading...</div>\n<script>\n    setTimeout(() => {\n        document.querySelector('.loading').remove();\n\n        const container = document.createElement('div');\n        container.textContent = 'Ready!';\n        document.body.appendChild(container);\n    }, 500);\n</script>\n</body>\n</html>\n\n```\n\n### Relevant log output\n\n```typescript\n2025-02-28T18:38:41.806Z INFO webdriver: Initiate new session using the WebDriver protocol\n2025-02-28T18:38:41.983Z INFO webdriver: Using Chromedriver v133.0.6943.142 from cache directory /var/folders/0l/559pbvtj5jddk352fybx93l80000gr/T\n2025-02-28T18:38:41.995Z INFO chromedriver: Starting ChromeDriver 133.0.6943.142 (f217c2438a8e1f4b9e730de378ce20f754b2c3d0-refs/branch-heads/6943@{#1913}) on port 51804\n2025-02-28T18:38:41.995Z INFO chromedriver: Remote connections are allowed by an allowlist (0.0.0.0).\n2025-02-28T18:38:41.995Z INFO chromedriver: Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.\n2025-02-28T18:38:41.996Z INFO chromedriver: ChromeDriver was started successfully on port 51804.\n2025-02-28T18:38:42.996Z INFO @wdio/utils: Started Chromedriver v133.0.6943.142 with params --port=51804 --allowed-origins=* --allowed-ips=0.0.0.0 in 1108ms on port 51804\n2025-02-28T18:38:43.012Z INFO webdriver: [POST] http://localhost:51804/session\n2025-02-28T18:38:43.013Z INFO webdriver: DATA {\n  capabilities: {\n    alwaysMatch: {\n      browserName: 'chrome',\n      'goog:chromeOptions': [Object],\n      'wdio:enforceWebDriverClassic': true\n    },\n    firstMatch: [ {} ]\n  }\n}\n2025-02-28T18:38:43.675Z INFO webdriver: COMMAND navigateTo(\"http://localhost:8080/\")\n2025-02-28T18:38:43.675Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/url\n2025-02-28T18:38:43.675Z INFO webdriver: DATA { url: 'http://localhost:8080/' }\n2025-02-28T18:38:43.703Z INFO webdriver: RESULT null\n2025-02-28T18:38:43.703Z INFO webdriver: COMMAND takeScreenshot()\n2025-02-28T18:38:43.703Z INFO webdriver: [GET] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/screenshot\n2025-02-28T18:38:43.886Z INFO webdriver: RESULT iVBORw0KGgoAAAANSUhEUgAACWAAAAZWCAIAAACnRA9gAAABK2lDQ1BTa2lhA...\n2025-02-28T18:38:43.888Z INFO webdriver: COMMAND findElement(\"css selector\", \".loading\")\n2025-02-28T18:38:43.888Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/element\n2025-02-28T18:38:43.888Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:43.895Z INFO webdriver: RESULT {\n  'element-6066-11e4-a52e-4f735466cecf': 'f.AE6545EA1F8E20C5EB2A0DD2E4DFEC3C.d.EEB4F38365188B17A73A83D9F397D7E3.e.3'\n}\n2025-02-28T18:38:43.898Z INFO webdriver: COMMAND executeScript(\"\n            function webdriverioPolyfill() {\n  const __defProp2 = Object.defineProperty;\n  const __name = function(target, value) {\n    return __defProp2(target, \"name\", { value, configurable: true });\n  };\n  const __globalThis = typeof globalThis === \"object\" && globalThis || typeof window === \"object\" && window;\n  __globalThis.__name = __name;\n}\n            webdriverioPolyfill()\n            return (function checkVisibility(elem, params) {\n      return elem.checkVisibility(params);\n    }).apply(null, arguments)\n        \", <object>)\n2025-02-28T18:38:43.898Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/execute/sync\n2025-02-28T18:38:43.898Z INFO webdriver: DATA {\n  script: 'checkVisibility(...) [527 bytes]',\n  args: [\n    {\n      'element-6066-11e4-a52e-4f735466cecf': 'f.AE6545EA1F8E20C5EB2A0DD2E4DFEC3C.d.EEB4F38365188B17A73A83D9F397D7E3.e.3',\n      ELEMENT: 'f.AE6545EA1F8E20C5EB2A0DD2E4DFEC3C.d.EEB4F38365188B17A73A83D9F397D7E3.e.3'\n    },\n    { withinViewport: false }\n  ]\n}\n2025-02-28T18:38:43.899Z INFO webdriver: COMMAND getElementCSSValue(\"f.AE6545EA1F8E20C5EB2A0DD2E4DFEC3C.d.EEB4F38365188B17A73A83D9F397D7E3.e.3\", \"display\")\n2025-02-28T18:38:43.899Z INFO webdriver: [GET] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/element/f.AE6545EA1F8E20C5EB2A0DD2E4DFEC3C.d.EEB4F38365188B17A73A83D9F397D7E3.e.3/css/display\n2025-02-28T18:38:43.903Z INFO webdriver: RESULT true\n2025-02-28T18:38:43.907Z INFO webdriver: RESULT block\n2025-02-28T18:38:44.401Z INFO webdriver: COMMAND executeScript(\"\n            function webdriverioPolyfill() {\n  const __defProp2 = Object.defineProperty;\n  const __name = function(target, value) {\n    return __defProp2(target, \"name\", { value, configurable: true });\n  };\n  const __globalThis = typeof globalThis === \"object\" && globalThis || typeof window === \"object\" && window;\n  __globalThis.__name = __name;\n}\n            webdriverioPolyfill()\n            return (function checkVisibility(elem, params) {\n      return elem.checkVisibility(params);\n    }).apply(null, arguments)\n        \", <object>)\n2025-02-28T18:38:44.403Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/execute/sync\n2025-02-28T18:38:44.403Z INFO webdriver: DATA {\n  script: 'checkVisibility(...) [527 bytes]',\n  args: [\n    {\n      'element-6066-11e4-a52e-4f735466cecf': 'f.AE6545EA1F8E20C5EB2A0DD2E4DFEC3C.d.EEB4F38365188B17A73A83D9F397D7E3.e.3',\n      ELEMENT: 'f.AE6545EA1F8E20C5EB2A0DD2E4DFEC3C.d.EEB4F38365188B17A73A83D9F397D7E3.e.3'\n    },\n    { withinViewport: false }\n  ]\n}\n2025-02-28T18:38:44.405Z INFO webdriver: COMMAND getElementCSSValue(\"f.AE6545EA1F8E20C5EB2A0DD2E4DFEC3C.d.EEB4F38365188B17A73A83D9F397D7E3.e.3\", \"display\")\n2025-02-28T18:38:44.406Z INFO webdriver: [GET] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/element/f.AE6545EA1F8E20C5EB2A0DD2E4DFEC3C.d.EEB4F38365188B17A73A83D9F397D7E3.e.3/css/display\n2025-02-28T18:38:44.417Z WARN webdriver: Request encountered a stale element - terminating request\n2025-02-28T18:38:44.418Z INFO webdriver: COMMAND findElement(\"css selector\", \".loading\")\n2025-02-28T18:38:44.418Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/element\n2025-02-28T18:38:44.418Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:44.421Z WARN webdriver: Request encountered a stale element - terminating request\n2025-02-28T18:38:44.421Z INFO webdriver: COMMAND findElement(\"css selector\", \".loading\")\n2025-02-28T18:38:44.421Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/element\n2025-02-28T18:38:44.422Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:44.426Z INFO webdriver: RESULT {\n  error: 'no such element',\n  message: 'no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".loading\"}\\n' +\n    '  (Session info: chrome=133.0.6943.142)',\n  stacktrace: '0   chromedriver                        0x00000001033f429c cxxbridge1$str$ptr + 2739836\\n' +\n    '1   chromedriver                        0x00000001033ec8fc cxxbridge1$str$ptr + 2708700\\n' +\n    '2   chromedriver                        0x0000000102f4df90 cxxbridge1$string$len + 93360\\n' +\n    '3   chromedriver                        0x0000000102f94de4 cxxbridge1$string$len + 383748\\n' +\n    '4   chromedriver                        0x0000000102fd5e80 cxxbridge1$string$len + 650144\\n' +\n    '5   chromedriver                        0x0000000102f89060 cxxbridge1$string$len + 335232\\n' +\n    '6   chromedriver                        0x00000001033bcc00 cxxbridge1$str$ptr + 2512864\\n' +\n    '7   chromedriver                        0x00000001033bff20 cxxbridge1$str$ptr + 2525952\\n' +\n    '8   chromedriver                        0x00000001033a2540 cxxbridge1$str$ptr + 2404640\\n' +\n    '9   chromedriver                        0x00000001033c07e0 cxxbridge1$str$ptr + 2528192\\n' +\n    '10  chromedriver                        0x0000000103392ef4 cxxbridge1$str$ptr + 2341588\\n' +\n    '11  chromedriver                        0x00000001033dca28 cxxbridge1$str$ptr + 2643464\\n' +\n    '12  chromedriver                        0x00000001033dcbb0 cxxbridge1$str$ptr + 2643856\\n' +\n    '13  chromedriver                        0x00000001033ec570 cxxbridge1$str$ptr + 2707792\\n' +\n    '14  libsystem_pthread.dylib             0x000000019e2c42e4 _pthread_start + 136\\n' +\n    '15  libsystem_pthread.dylib             0x000000019e2bf0fc thread_start + 8\\n'\n}\n2025-02-28T18:38:44.429Z INFO webdriver: COMMAND findElements(\"css selector\", \".loading\")\n2025-02-28T18:38:44.429Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/elements\n2025-02-28T18:38:44.429Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:44.431Z INFO webdriver: RESULT {\n  error: 'no such element',\n  message: 'no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".loading\"}\\n' +\n    '  (Session info: chrome=133.0.6943.142)',\n  stacktrace: '0   chromedriver                        0x00000001033f429c cxxbridge1$str$ptr + 2739836\\n' +\n    '1   chromedriver                        0x00000001033ec8fc cxxbridge1$str$ptr + 2708700\\n' +\n    '2   chromedriver                        0x0000000102f4df90 cxxbridge1$string$len + 93360\\n' +\n    '3   chromedriver                        0x0000000102f94de4 cxxbridge1$string$len + 383748\\n' +\n    '4   chromedriver                        0x0000000102fd5e80 cxxbridge1$string$len + 650144\\n' +\n    '5   chromedriver                        0x0000000102f89060 cxxbridge1$string$len + 335232\\n' +\n    '6   chromedriver                        0x00000001033bcc00 cxxbridge1$str$ptr + 2512864\\n' +\n    '7   chromedriver                        0x00000001033bff20 cxxbridge1$str$ptr + 2525952\\n' +\n    '8   chromedriver                        0x00000001033a2540 cxxbridge1$str$ptr + 2404640\\n' +\n    '9   chromedriver                        0x00000001033c07e0 cxxbridge1$str$ptr + 2528192\\n' +\n    '10  chromedriver                        0x0000000103392ef4 cxxbridge1$str$ptr + 2341588\\n' +\n    '11  chromedriver                        0x00000001033dca28 cxxbridge1$str$ptr + 2643464\\n' +\n    '12  chromedriver                        0x00000001033dcbb0 cxxbridge1$str$ptr + 2643856\\n' +\n    '13  chromedriver                        0x00000001033ec570 cxxbridge1$str$ptr + 2707792\\n' +\n    '14  libsystem_pthread.dylib             0x000000019e2c42e4 _pthread_start + 136\\n' +\n    '15  libsystem_pthread.dylib             0x000000019e2bf0fc thread_start + 8\\n'\n}\n2025-02-28T18:38:44.433Z INFO webdriver: COMMAND findElement(\"css selector\", \".loading\")\n2025-02-28T18:38:44.433Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/element\n2025-02-28T18:38:44.433Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:44.438Z INFO webdriver: RESULT []\n2025-02-28T18:38:44.442Z INFO webdriver: RESULT {\n  error: 'no such element',\n  message: 'no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".loading\"}\\n' +\n    '  (Session info: chrome=133.0.6943.142)',\n  stacktrace: '0   chromedriver                        0x00000001033f429c cxxbridge1$str$ptr + 2739836\\n' +\n    '1   chromedriver                        0x00000001033ec8fc cxxbridge1$str$ptr + 2708700\\n' +\n    '2   chromedriver                        0x0000000102f4df90 cxxbridge1$string$len + 93360\\n' +\n    '3   chromedriver                        0x0000000102f94de4 cxxbridge1$string$len + 383748\\n' +\n    '4   chromedriver                        0x0000000102fd5e80 cxxbridge1$string$len + 650144\\n' +\n    '5   chromedriver                        0x0000000102f89060 cxxbridge1$string$len + 335232\\n' +\n    '6   chromedriver                        0x00000001033bcc00 cxxbridge1$str$ptr + 2512864\\n' +\n    '7   chromedriver                        0x00000001033bff20 cxxbridge1$str$ptr + 2525952\\n' +\n    '8   chromedriver                        0x00000001033a2540 cxxbridge1$str$ptr + 2404640\\n' +\n    '9   chromedriver                        0x00000001033c07e0 cxxbridge1$str$ptr + 2528192\\n' +\n    '10  chromedriver                        0x0000000103392ef4 cxxbridge1$str$ptr + 2341588\\n' +\n    '11  chromedriver                        0x00000001033dca28 cxxbridge1$str$ptr + 2643464\\n' +\n    '12  chromedriver                        0x00000001033dcbb0 cxxbridge1$str$ptr + 2643856\\n' +\n    '13  chromedriver                        0x00000001033ec570 cxxbridge1$str$ptr + 2707792\\n' +\n    '14  libsystem_pthread.dylib             0x000000019e2c42e4 _pthread_start + 136\\n' +\n    '15  libsystem_pthread.dylib             0x000000019e2bf0fc thread_start + 8\\n'\n}\n2025-02-28T18:38:44.444Z INFO webdriver: COMMAND takeScreenshot()\n2025-02-28T18:38:44.445Z INFO webdriver: [GET] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/screenshot\n2025-02-28T18:38:44.587Z INFO webdriver: RESULT iVBORw0KGgoAAAANSUhEUgAACWAAAAZWCAIAAACnRA9gAAABK2lDQ1BTa2lhA...\n2025-02-28T18:38:44.588Z INFO webdriver: COMMAND deleteSession()\n2025-02-28T18:38:44.588Z INFO webdriver: [DELETE] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89\n2025-02-28T18:38:44.641Z INFO webdriver: RESULT null\n2025-02-28T18:38:44.641Z INFO webdriver: Kill driver process with PID 79123\n2025-02-28T18:38:44.931Z INFO webdriver: COMMAND findElements(\"css selector\", \".loading\")\n2025-02-28T18:38:44.937Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/elements\n2025-02-28T18:38:44.938Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:44.945Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"elements\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\".loading\"}\"\n2025-02-28T18:38:44.945Z INFO webdriver: Retrying 1/3\n2025-02-28T18:38:44.945Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/elements\n2025-02-28T18:38:44.945Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:45.449Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"elements\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\".loading\"}\"\n2025-02-28T18:38:45.450Z INFO webdriver: Retrying 2/3\n2025-02-28T18:38:45.450Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/elements\n2025-02-28T18:38:45.450Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:46.456Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"elements\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\".loading\"}\"\n2025-02-28T18:38:46.457Z INFO webdriver: Retrying 3/3\n2025-02-28T18:38:46.457Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/elements\n2025-02-28T18:38:46.457Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:46.464Z ERROR webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"elements\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\".loading\"}\"\n2025-02-28T18:38:46.466Z INFO webdriver: COMMAND findElements(\"css selector\", \".loading\")\n2025-02-28T18:38:46.467Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/elements\n2025-02-28T18:38:46.467Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:46.473Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"elements\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\".loading\"}\"\n2025-02-28T18:38:46.473Z INFO webdriver: Retrying 1/3\n2025-02-28T18:38:46.473Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/elements\n2025-02-28T18:38:46.473Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:46.977Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"elements\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\".loading\"}\"\n2025-02-28T18:38:46.977Z INFO webdriver: Retrying 2/3\n2025-02-28T18:38:46.977Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/elements\n2025-02-28T18:38:46.977Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:47.982Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"elements\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\".loading\"}\"\n2025-02-28T18:38:47.983Z INFO webdriver: Retrying 3/3\n2025-02-28T18:38:47.983Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/elements\n2025-02-28T18:38:47.983Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:47.988Z ERROR webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"elements\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\".loading\"}\"\n2025-02-28T18:38:47.991Z INFO webdriver: COMMAND findElements(\"css selector\", \".loading\")\n2025-02-28T18:38:47.991Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/elements\n2025-02-28T18:38:47.991Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:47.993Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"elements\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\".loading\"}\"\n2025-02-28T18:38:47.993Z INFO webdriver: Retrying 1/3\n2025-02-28T18:38:47.993Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/elements\n2025-02-28T18:38:47.993Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:48.497Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"elements\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\".loading\"}\"\n2025-02-28T18:38:48.497Z INFO webdriver: Retrying 2/3\n2025-02-28T18:38:48.497Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/elements\n2025-02-28T18:38:48.497Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:49.501Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"elements\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\".loading\"}\"\n2025-02-28T18:38:49.502Z INFO webdriver: Retrying 3/3\n2025-02-28T18:38:49.502Z INFO webdriver: [POST] http://localhost:51804/session/c24b39e9f60855e4eff78141e6536a89/elements\n2025-02-28T18:38:49.502Z INFO webdriver: DATA { using: 'css selector', value: '.loading' }\n2025-02-28T18:38:49.507Z ERROR webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"elements\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\".loading\"}\"\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 2484,
    "test_files_count": 6,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "packages/webdriver/src/bidi/core.ts",
      "packages/webdriver/src/command.ts",
      "packages/webdriver/src/request/polyfill.ts",
      "packages/webdriver/src/request/request.ts",
      "packages/webdriver/src/types.ts",
      "packages/webdriver/tests/command.test.ts",
      "packages/webdriver/tests/request.test.ts",
      "packages/webdriverio/src/commands/browser/waitUntil.ts",
      "packages/webdriverio/src/commands/element/waitForDisplayed.ts",
      "packages/webdriverio/src/utils/Timer.ts",
      "packages/webdriverio/tests/commands/browser/reloadSession.test.ts",
      "packages/webdriverio/tests/commands/element/waitForClickable.test.ts",
      "packages/webdriverio/tests/commands/element/waitForDisplayed.test.ts",
      "packages/webdriverio/tests/commands/element/waitForEnabled.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriver/tests/command.test.ts",
      "packages/webdriver/tests/request.test.ts",
      "packages/webdriverio/tests/commands/browser/reloadSession.test.ts",
      "packages/webdriverio/tests/commands/element/waitForClickable.test.ts",
      "packages/webdriverio/tests/commands/element/waitForDisplayed.test.ts",
      "packages/webdriverio/tests/commands/element/waitForEnabled.test.ts"
    ],
    "base_commit": "45b889b20b4169445920d40b7c0679c6e2ace5c8",
    "head_commit": "7f61bd254346b97fc03896304665198490e7cf87",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14246",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14246",
    "dockerfile": "",
    "pr_merged_at": "2025-03-05T19:11:21.000Z",
    "patch": "diff --git a/packages/webdriver/src/bidi/core.ts b/packages/webdriver/src/bidi/core.ts\nindex 9a82954a227..718a9c9b818 100644\n--- a/packages/webdriver/src/bidi/core.ts\n+++ b/packages/webdriver/src/bidi/core.ts\n@@ -10,6 +10,7 @@ import type { Client } from '../types.js'\n \n const SCRIPT_PREFIX = '/* __wdio script__ */'\n const SCRIPT_SUFFIX = '/* __wdio script end__ */'\n+const base64Regex = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$/\n \n const log = logger('webdriver')\n const RESPONSE_TIMEOUT = 1000 * 60\n@@ -120,7 +121,19 @@ export class BidiCore {\n                 return\n             }\n \n-            log.info('BIDI RESULT', data.toString())\n+            /**\n+             * If the result is a base64 encoded string, we want to log a simplified version\n+             * of the result instead of the raw base64 encoded string\n+             */\n+            let resultLog = data.toString()\n+            if (typeof payload.result === 'object' && payload.result && 'data' in payload.result && typeof payload.result.data === 'string' && base64Regex.test(payload.result.data)) {\n+                resultLog = JSON.stringify({\n+                    ...payload.result,\n+                    data: `Base64 string [${payload.result.data.length} chars]`\n+                })\n+            }\n+\n+            log.info('BIDI RESULT', resultLog)\n             this.client?.emit('bidiResult', payload)\n             const resolve = this.#pendingCommands.get(payload.id)\n             if (!resolve) {\n\ndiff --git a/packages/webdriver/src/command.ts b/packages/webdriver/src/command.ts\nindex 777a3e2be99..6302fafab96 100644\n--- a/packages/webdriver/src/command.ts\n+++ b/packages/webdriver/src/command.ts\n@@ -5,10 +5,11 @@ import { WebDriverBidiProtocol, type CommandEndpoint } from '@wdio/protocols'\n import { environment } from './environment.js'\n import type { BidiHandler } from './bidi/handler.js'\n import type { WebDriverResponse } from './request/types.js'\n-import type { BaseClient, BidiCommands, BidiResponses } from './types.js'\n+import type { BaseClient, BidiCommands, BidiResponses, WebDriverResultEvent } from './types.js'\n \n const log = logger('webdriver')\n const BIDI_COMMANDS: BidiCommands[] = Object.values(WebDriverBidiProtocol).map((def) => def.socket.command)\n+const sessionAbortListeners = new Map<string, Set<AbortController> | null>()\n \n export default function (\n     method: string,\n@@ -120,7 +121,22 @@ export default function (\n             body[commandParams[i].name] = arg\n         }\n \n-        const request = new environment.value.Request(method, endpoint, body, isHubCommand, {\n+        /**\n+         * Make sure we pass along an abort signal to the request class so we\n+         * can abort the request as well as any retries in case the session is\n+         * deleted.\n+         *\n+         * Abort the attempt to make the WebDriver call, except for:\n+         *   - `deleteSession` calls which should go through in case we retry the command.\n+         *   - requests that don't require a session.\n+         */\n+        const { isAborted, abortSignal, cleanup } = manageSessionAbortions.call(this)\n+        const requiresSession = endpointUri.includes('/:sessionId/')\n+        if (isAborted && command !== 'deleteSession' && requiresSession) {\n+            throw new Error(`Trying to run command \"${commandCallStructure(command, args)}\" after session has been deleted, aborting request without executing it`)\n+        }\n+\n+        const request = new environment.value.Request(method, endpoint, body, abortSignal, isHubCommand, {\n             onPerformance: (data) => this.emit('request.performance', data),\n             onRequest: (data) => this.emit('request.start', data),\n             onResponse: (data) => this.emit('request.end', data),\n@@ -193,6 +209,56 @@ export default function (\n         }).catch((error) => {\n             this.emit('result', { command, method, endpoint, body, result: { error } })\n             throw error\n+        }).finally(() => {\n+            cleanup()\n         })\n     }\n }\n+\n+/**\n+ * Manage session abortions, e.g. abort requests after session has been deleted.\n+ * @param this - WebDriver client instance\n+ * @returns Object with `isAborted`, `abortSignal`, and `cleanup`\n+ */\n+function manageSessionAbortions (this: BaseClient): {\n+    isAborted: boolean\n+    abortSignal?: AbortSignal\n+    cleanup: () => void\n+} {\n+    const abort = new AbortController()\n+    let abortListenerForCurrentSession = sessionAbortListeners.get(this.sessionId)\n+    if (typeof abortListenerForCurrentSession === 'undefined') {\n+        abortListenerForCurrentSession = new Set()\n+        sessionAbortListeners.set(this.sessionId, abortListenerForCurrentSession)\n+    }\n+\n+    /**\n+     * If the session has been deleted, we don't want to run any further commands\n+     */\n+    if (abortListenerForCurrentSession === null) {\n+        return { isAborted: true, abortSignal: undefined, cleanup: () => {} }\n+    }\n+\n+    /**\n+     * listen for session deletion and abort all requests\n+     */\n+    abortListenerForCurrentSession.add(abort)\n+    const abortOnSessionEnd = (result: WebDriverResultEvent) => {\n+        if (result.command === 'deleteSession') {\n+            for (const abortListener of abortListenerForCurrentSession) {\n+                abortListener.abort()\n+            }\n+            abortListenerForCurrentSession.clear()\n+            sessionAbortListeners.set(this.sessionId, null)\n+        }\n+    }\n+    this.on('result', abortOnSessionEnd)\n+    return {\n+        isAborted: false,\n+        abortSignal: abort.signal,\n+        cleanup: () => {\n+            this.off('result', abortOnSessionEnd)\n+            abortListenerForCurrentSession?.delete(abort)\n+        }\n+    }\n+}\n\ndiff --git a/packages/webdriver/src/request/polyfill.ts b/packages/webdriver/src/request/polyfill.ts\nnew file mode 100644\nindex 00000000000..db83e72eb5d\n--- /dev/null\n+++ b/packages/webdriver/src/request/polyfill.ts\n@@ -0,0 +1,56 @@\n+/**\n+ * Polyfill for AbortSignal.any()\n+ *\n+ * Creates a new AbortSignal that aborts when any of the given signals abort.\n+ *\n+ * @param signals - An array of AbortSignal objects\n+ * @returns A new AbortSignal that aborts when any of the input signals abort\n+ */\n+if (!AbortSignal.any) {\n+    AbortSignal.any = function (signals: AbortSignal[]): AbortSignal {\n+        // Validate input\n+        if (!signals || !Array.isArray(signals)) {\n+            throw new TypeError('AbortSignal.any requires an array of AbortSignal objects')\n+        }\n+\n+        // Create a new controller for our combined signal\n+        const controller = new AbortController()\n+\n+        // If any signal is already aborted, abort immediately\n+        if (signals.some(signal => signal.aborted)) {\n+            controller.abort()\n+            return controller.signal\n+        }\n+\n+        // Set up listeners for each signal\n+        const listeners = signals.map(signal => {\n+            const listener = () => {\n+                // When any signal aborts, abort our controller\n+                // and forward the abort reason if available\n+                if ('reason' in signal && signal.reason !== undefined) {\n+                    controller.abort(signal.reason)\n+                } else {\n+                    controller.abort()\n+                }\n+\n+                // Clean up other listeners when one signal aborts\n+                cleanup()\n+            }\n+\n+            signal.addEventListener('abort', listener)\n+            return { signal, listener }\n+        })\n+\n+        // Function to remove all event listeners\n+        const cleanup = () => {\n+            listeners.forEach(({ signal, listener }) => {\n+                signal.removeEventListener('abort', listener)\n+            })\n+        }\n+\n+        // Make sure to clean up if our combined signal is aborted\n+        controller.signal.addEventListener('abort', cleanup)\n+\n+        return controller.signal\n+    }\n+}\n\ndiff --git a/packages/webdriver/src/request/request.ts b/packages/webdriver/src/request/request.ts\nindex 8b7e9678484..25f9e90b214 100644\n--- a/packages/webdriver/src/request/request.ts\n+++ b/packages/webdriver/src/request/request.ts\n@@ -10,6 +10,8 @@ import { isSuccessfulResponse } from '../utils.js'\n import { DEFAULTS } from '../constants.js'\n import pkg from '../../package.json' with { type: 'json' }\n \n+import './polyfill.js'\n+\n const ERRORS_TO_EXCLUDE_FROM_RETRY = [\n     'detached shadow root',\n     'move target out of bounds'\n@@ -33,14 +35,22 @@ export abstract class WebDriverRequest {\n     isHubCommand: boolean\n     requiresSessionId: boolean\n     eventHandler: RequestEventHandler\n-\n-    constructor (method: string, endpoint: string, body?: Record<string, unknown>, isHubCommand: boolean = false, eventHandler: RequestEventHandler = {}) {\n+    abortSignal?: AbortSignal\n+    constructor (\n+        method: string,\n+        endpoint: string,\n+        body?: Record<string, unknown>,\n+        abortSignal?: AbortSignal,\n+        isHubCommand: boolean = false,\n+        eventHandler: RequestEventHandler = {}\n+    ) {\n         this.body = body\n         this.method = method\n         this.endpoint = endpoint\n         this.isHubCommand = isHubCommand\n         this.requiresSessionId = Boolean(this.endpoint.match(/:sessionId/))\n         this.eventHandler = eventHandler\n+        this.abortSignal = abortSignal\n     }\n \n     async makeRequest (options: RequestOptions, sessionId?: string) {\n@@ -54,7 +64,10 @@ export abstract class WebDriverRequest {\n         const requestOptions: RequestInit = {\n             method: this.method,\n             redirect: 'follow',\n-            signal: AbortSignal.timeout(timeout)\n+            signal: AbortSignal.any([\n+                AbortSignal.timeout(timeout),\n+                ...(this.abortSignal ? [this.abortSignal] : [])\n+            ])\n         }\n \n         const requestHeaders: HeadersInit = new Headers({\n@@ -198,11 +211,16 @@ export abstract class WebDriverRequest {\n             const resError = response as WebDriverRequestError\n \n             /**\n-             * retry failed requests\n+             * retry failed requests, only if:\n+             * - the abort signal is not aborted\n+             * - the error code or status code is retryable\n              */\n             if (\n-                (resError.code && RETRYABLE_ERROR_CODES.includes(resError.code)) ||\n-                (resError.statusCode && RETRYABLE_STATUS_CODES.includes(resError.statusCode))\n+                !(this.abortSignal && this.abortSignal.aborted) &&\n+                (\n+                    (resError.code && RETRYABLE_ERROR_CODES.includes(resError.code)) ||\n+                    (resError.statusCode && RETRYABLE_STATUS_CODES.includes(resError.statusCode))\n+                )\n             ) {\n                 return retry(resError)\n             }\n\ndiff --git a/packages/webdriver/src/types.ts b/packages/webdriver/src/types.ts\nindex 65e38964fa1..be4aefa8011 100644\n--- a/packages/webdriver/src/types.ts\n+++ b/packages/webdriver/src/types.ts\n@@ -38,9 +38,22 @@ export type BidiResponses = ValueOf<ObtainMethods<Pick<BidiHandler, BidiCommands\n export type RemoteConfig = Options.WebDriver & Capabilities.WithRequestedCapabilities\n \n type BidiInterface = ObtainMethods<Pick<BidiHandler, BidiCommands>>\n+export interface WebDriverCommandEvent {\n+    command: string\n+    method: string\n+    endpoint: string\n+    body: unknown\n+}\n+export interface WebDriverResultEvent {\n+    command: string\n+    method: string\n+    endpoint: string\n+    body: unknown\n+    result: unknown\n+}\n type WebDriverClassicEvents = {\n-    command: { command: string, method: string, endpoint: string, body: unknown }\n-    result: { command: string, method: string, endpoint: string, body: unknown, result: unknown }\n+    command: WebDriverCommandEvent\n+    result: WebDriverResultEvent\n     bidiCommand: Omit<CommandData, 'id'>,\n     bidiResult: CommandResponse,\n     'request.performance': RequestPerformanceEvent\n\ndiff --git a/packages/webdriverio/src/commands/browser/waitUntil.ts b/packages/webdriverio/src/commands/browser/waitUntil.ts\nindex ef221ea9730..d7b6ae0b5e2 100644\n--- a/packages/webdriverio/src/commands/browser/waitUntil.ts\n+++ b/packages/webdriverio/src/commands/browser/waitUntil.ts\n@@ -1,3 +1,6 @@\n+import { getBrowserObject } from '@wdio/utils'\n+import type { WebDriverResultEvent } from 'webdriver'\n+\n import Timer from '../../utils/Timer.js'\n import type { WaitUntilOptions } from '../../types.js'\n \n@@ -44,8 +47,20 @@ export function waitUntil<ReturnValue>(\n         interval = this.options.waitforInterval as number\n     }\n \n+    /**\n+     * abort the Timer if the session is deleted during the wait\n+     */\n+    const browser = getBrowserObject(this)\n+    const abort = new AbortController()\n+    const abortOnSessionEnd = (result: WebDriverResultEvent) => {\n+        if (result.command === 'deleteSession') {\n+            abort.abort()\n+        }\n+    }\n+    browser.on('result', abortOnSessionEnd)\n+\n     const fn = condition.bind(this)\n-    const timer = new Timer(interval as number, timeout as number, fn, true)\n+    const timer = new Timer(interval as number, timeout as number, fn, true, abort.signal)\n     return timer.catch<Exclude<ReturnValue, false | 0 | '' | null | undefined>>((e: Error) => {\n         if (e.message === 'timeout') {\n             if (typeof timeoutMsg === 'string') {\n@@ -75,5 +90,7 @@ export function waitUntil<ReturnValue>(\n         )).join('\\n')\n \n         throw err\n+    }).finally(() => {\n+        browser.off('result', abortOnSessionEnd)\n     })\n }\n\ndiff --git a/packages/webdriverio/src/commands/element/waitForDisplayed.ts b/packages/webdriverio/src/commands/element/waitForDisplayed.ts\nindex 8d7057484cd..dc253bea93d 100644\n--- a/packages/webdriverio/src/commands/element/waitForDisplayed.ts\n+++ b/packages/webdriverio/src/commands/element/waitForDisplayed.ts\n@@ -24,7 +24,7 @@ import type { WaitForOptions } from '../../types.js'\n  * @example https://github.com/webdriverio/example-recipes/blob/9ac16b4d4cf4bc8ec87f6369439a2d0bcaae4483/waitForDisplayed/waitForDisplayedExample.js#L6-L14\n  * @type utility\n  */\n-export async function waitForDisplayed (\n+export function waitForDisplayed (\n     this: WebdriverIO.Element,\n     {\n         timeout = this.options.waitforTimeout,\n\ndiff --git a/packages/webdriverio/src/utils/Timer.ts b/packages/webdriverio/src/utils/Timer.ts\nindex 830f20625c0..43bdd94eb2b 100644\n--- a/packages/webdriverio/src/utils/Timer.ts\n+++ b/packages/webdriverio/src/utils/Timer.ts\n@@ -26,7 +26,8 @@ class Timer {\n         private _delay: number,\n         private _timeout: number,\n         private _fn: Function,\n-        private _leading = false\n+        private _leading = false,\n+        private _signal?: AbortSignal\n     ) {\n         this.#retPromise = new Promise<boolean>((resolve, reject) => {\n             this._resolve = resolve\n@@ -101,9 +102,21 @@ class Timer {\n     }\n \n     private _checkCondition (err?: Error, res?: unknown) {\n-        ++this._conditionExecutedCnt\n         this._lastError = err\n \n+        /**\n+         * If the signal is aborted, reject the promise with the last error or a new error\n+         * and stop the timer\n+         */\n+        if (this._signal?.aborted) {\n+            this._reject(this._lastError || new Error('Aborted'))\n+            this._stop()\n+            this._stopMain()\n+            return\n+        }\n+\n+        ++this._conditionExecutedCnt\n+\n         // resolve timer only on truthy values\n         if (res) {\n             this._resolve(res)\n",
    "test_patch": "diff --git a/packages/webdriver/tests/command.test.ts b/packages/webdriver/tests/command.test.ts\nindex 6e13dbabc8c..2cb6a4a4cc7 100644\n--- a/packages/webdriver/tests/command.test.ts\n+++ b/packages/webdriver/tests/command.test.ts\n@@ -58,9 +58,10 @@ const requestHandler = {\n \n vi.mock('../src/request/request', () => {\n     const thenMock = vi.fn()\n-    const catchMock = vi.fn()\n+    const finallyMock = vi.fn()\n+    const catchMock = vi.fn().mockReturnValue({ finally: finallyMock })\n \n-    const promise = { then: thenMock, catch: catchMock }\n+    const promise = { then: thenMock, catch: catchMock, finally: finallyMock }\n     const WebDriverRequest = vi.fn().mockReturnValue({\n         makeRequest: () => (promise),\n         on: vi.fn()\n@@ -70,6 +71,7 @@ vi.mock('../src/request/request', () => {\n     return {\n         thenMock,\n         catchMock,\n+        finallyMock,\n         WebDriverRequest,\n     }\n })\n@@ -102,7 +104,6 @@ describe('command wrapper', () => {\n     beforeEach(() => {\n         vi.mocked(log.warn).mockClear()\n         vi.mocked(scope.emit).mockClear()\n-        vi.mocked(RequestMock).mockClear()\n         vi.mocked(thenMock).mockClear()\n         vi.mocked(catchMock).mockClear()\n     })\n@@ -151,10 +152,10 @@ describe('command wrapper', () => {\n                 using: 'css selector',\n                 value: '#body'\n             },\n+            expect.any(AbortSignal),\n             false,\n             requestHandler\n         )\n-        vi.mocked(RequestMock).mockClear()\n     })\n \n     it('should do a proper request with non required params', async () => {\n@@ -168,10 +169,10 @@ describe('command wrapper', () => {\n                 value: '#body',\n                 customParam: 123\n             },\n+            expect.any(AbortSignal),\n             false,\n             requestHandler\n         )\n-        vi.mocked(RequestMock).mockClear()\n     })\n \n     it('should encode uri parameters', async () => {\n@@ -182,10 +183,10 @@ describe('command wrapper', () => {\n             'POST',\n             '/session/:sessionId/element/%2Fpath/element',\n             expect.anything(),\n+            expect.any(AbortSignal),\n             false,\n             requestHandler\n         )\n-        vi.mocked(RequestMock).mockClear()\n     })\n \n     it('should double encode uri parameters if using selenium', async () => {\n@@ -196,10 +197,10 @@ describe('command wrapper', () => {\n             'POST',\n             '/session/:sessionId/element/%252Fpath/element',\n             expect.anything(),\n+            expect.any(AbortSignal),\n             false,\n             requestHandler\n         )\n-        vi.mocked(RequestMock).mockClear()\n         expect(log.warn).toHaveBeenCalledTimes(0)\n     })\n \n@@ -236,11 +237,10 @@ describe('command wrapper result log', () => {\n         const commandFn = commandWrapper(method, path, endpoint)\n         await commandFn.call(scope)\n         expect(RequestMock).toHaveBeenCalledTimes(1)\n-        expect(RequestMock).toHaveBeenCalledWith(method, path, expect.any(Object), false, requestHandler)\n+        expect(RequestMock).toHaveBeenCalledWith(method, path, expect.any(Object), expect.any(AbortSignal), false, requestHandler)\n \n         const callback = thenMock.mock.calls[0][0]\n \n-        vi.mocked(RequestMock).mockClear()\n         vi.mocked(thenMock).mockClear()\n         vi.mocked(log.info).mockClear()\n \n\ndiff --git a/packages/webdriver/tests/request.test.ts b/packages/webdriver/tests/request.test.ts\nindex ce3123c391d..a807a21efa9 100644\n--- a/packages/webdriver/tests/request.test.ts\n+++ b/packages/webdriver/tests/request.test.ts\n@@ -124,7 +124,7 @@ describe('webdriver request', () => {\n         })\n \n         it('ignors path when command is a hub command', async () => {\n-            const req = new FetchRequest('POST', '/grid/api/hub', {}, true)\n+            const req = new FetchRequest('POST', '/grid/api/hub', {}, undefined, true)\n             const options = await req.createOptions({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -221,7 +221,7 @@ describe('webdriver request', () => {\n             const expectedResponse = { value: { 'element-6066-11e4-a52e-4f735466cecf': 'some-elem-123' } }\n             const onResponse = vi.fn()\n             const onPerformance = vi.fn()\n-            const req = new FetchRequest('POST', webdriverPath, {}, false, {\n+            const req = new FetchRequest('POST', webdriverPath, {}, undefined, false, {\n                 onResponse, onPerformance\n             })\n \n@@ -242,7 +242,7 @@ describe('webdriver request', () => {\n         it('should short circuit if request throws a stale element exception', async () => {\n             const onResponse = vi.fn()\n             const onPerformance = vi.fn()\n-            const req = new FetchRequest('POST', 'session/:sessionId/element', {}, false, {\n+            const req = new FetchRequest('POST', 'session/:sessionId/element', {}, undefined, false, {\n                 onResponse, onPerformance\n             })\n \n@@ -262,7 +262,7 @@ describe('webdriver request', () => {\n         it('should not fail code due to an empty server response', async () => {\n             const onResponse = vi.fn()\n             const onPerformance = vi.fn()\n-            const req = new FetchRequest('POST', webdriverPath, {}, false, {\n+            const req = new FetchRequest('POST', webdriverPath, {}, undefined, false, {\n                 onResponse, onPerformance\n             })\n \n@@ -281,7 +281,7 @@ describe('webdriver request', () => {\n             const onRetry = vi.fn()\n             const onResponse = vi.fn()\n             const onPerformance = vi.fn()\n-            const req = new FetchRequest('POST', webdriverPath, {}, false, {\n+            const req = new FetchRequest('POST', webdriverPath, {}, undefined, false, {\n                 onResponse, onPerformance, onRetry\n             })\n \n@@ -304,7 +304,7 @@ describe('webdriver request', () => {\n             const onRetry = vi.fn()\n             const onResponse = vi.fn()\n             const onPerformance = vi.fn()\n-            const req = new FetchRequest('POST', webdriverPath, {}, false, {\n+            const req = new FetchRequest('POST', webdriverPath, {}, undefined, false, {\n                 onResponse, onPerformance, onRetry\n             })\n \n@@ -324,7 +324,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should manage hub commands', async () => {\n-            const req = new FetchRequest('POST', '/grid/api/hub', {}, true)\n+            const req = new FetchRequest('POST', '/grid/api/hub', {}, undefined, true)\n             expect(await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -335,7 +335,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should fail if hub command is called on node', async () => {\n-            const req = new FetchRequest('POST', '/grid/api/testsession', {}, true)\n+            const req = new FetchRequest('POST', '/grid/api/testsession', {}, undefined, true)\n             const result = await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -353,7 +353,7 @@ describe('webdriver request', () => {\n             it('should throw if timeout happens too often', async () => {\n                 const retryCnt = 3\n                 const onRetry = vi.fn()\n-                const req = new FetchRequest('POST', '/timeout', {}, true, { onRetry })\n+                const req = new FetchRequest('POST', '/timeout', {}, undefined, true, { onRetry })\n                 const result = await req.makeRequest({\n                     protocol: 'https',\n                     hostname: 'localhost',\n@@ -374,7 +374,7 @@ describe('webdriver request', () => {\n                 const onRequest = vi.fn()\n                 const onResponse = vi.fn()\n                 const onPerformance = vi.fn()\n-                const req = new FetchRequest('GET', '/timeout', {}, true, { onRetry, onRequest, onResponse, onPerformance })\n+                const req = new FetchRequest('GET', '/timeout', {}, undefined, true, { onRetry, onRequest, onResponse, onPerformance })\n                 const reqOpts = {\n                     protocol: 'https',\n                     hostname: 'localhost',\n@@ -395,7 +395,7 @@ describe('webdriver request', () => {\n         it('should return proper response if retry passes', async () => {\n             const retryCnt = 7\n             const onRetry = vi.fn()\n-            const req = new FetchRequest('POST', '/timeout', {}, true, { onRetry })\n+            const req = new FetchRequest('POST', '/timeout', {}, undefined, true, { onRetry })\n             const result = await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -414,7 +414,7 @@ describe('webdriver request', () => {\n         it('should retry on connection refused error', async () => {\n             const retryCnt = 7\n             const onRetry = vi.fn()\n-            const req = new FetchRequest('POST', '/connectionRefused', {}, false, { onRetry })\n+            const req = new FetchRequest('POST', '/connectionRefused', {}, undefined, false, { onRetry })\n             const result = await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -430,7 +430,8 @@ describe('webdriver request', () => {\n         }, 20_000)\n \n         it('should throw if request error is unknown', async () => {\n-            const req = new FetchRequest('POST', '/sumoerror', {}, true)\n+            console.log('TESTING', AbortSignal)\n+            const req = new FetchRequest('POST', '/sumoerror', {}, undefined, true)\n             const result = await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n\ndiff --git a/packages/webdriverio/tests/commands/browser/reloadSession.test.ts b/packages/webdriverio/tests/commands/browser/reloadSession.test.ts\nindex b710023e4e7..2f08449137a 100644\n--- a/packages/webdriverio/tests/commands/browser/reloadSession.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/reloadSession.test.ts\n@@ -15,12 +15,14 @@ vi.mock('@wdio/utils', async (origMod) => {\n describe('reloadSession test', () => {\n     const scenarios = [{\n         name: 'should be undefined if sessionId is missing in response',\n+        startingSessionId: 'some-session-id-1',\n         sessionIdMock: 'ignored if jsonwpMode is false',\n         requestMock: [{}, {}],\n         newSessionId: undefined,\n         jsonwpMode: false\n     }, {\n         name: 'should be ok if sessionId is in response',\n+        startingSessionId: 'some-session-id-2',\n         sessionIdMock: 'foobar-234',\n         requestMock: [{}, {}],\n         newSessionId: 'foobar-234',\n\ndiff --git a/packages/webdriverio/tests/commands/element/waitForClickable.test.ts b/packages/webdriverio/tests/commands/element/waitForClickable.test.ts\nindex 42beea4a869..f042f864162 100644\n--- a/packages/webdriverio/tests/commands/element/waitForClickable.test.ts\n+++ b/packages/webdriverio/tests/commands/element/waitForClickable.test.ts\n@@ -23,6 +23,8 @@ describe('waitForClickable', () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n             selector : '#foo',\n+            on: vi.fn(),\n+            off: vi.fn(),\n             waitForClickable : tmpElem.waitForClickable,\n             elementId : 123,\n             waitUntil : vi.fn(((cb))),\n@@ -39,6 +41,8 @@ describe('waitForClickable', () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n             selector : '#foo',\n+            on: vi.fn(),\n+            off: vi.fn(),\n             waitForClickable : tmpElem.waitForClickable,\n             elementId : 123,\n             waitUntil : tmpElem.waitUntil,\n@@ -54,6 +58,8 @@ describe('waitForClickable', () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n             selector : '#foo',\n+            on: vi.fn(),\n+            off: vi.fn(),\n             waitForClickable : tmpElem.waitForClickable,\n             elementId : 123,\n             waitUntil : tmpElem.waitUntil,\n@@ -74,6 +80,8 @@ describe('waitForClickable', () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n             selector : '#foo',\n+            on: vi.fn(),\n+            off: vi.fn(),\n             waitForClickable : tmpElem.waitForClickable,\n             elementId : 123,\n             waitUntil : tmpElem.waitUntil,\n@@ -92,7 +100,11 @@ describe('waitForClickable', () => {\n         const tmpElem = await browser.$('#foo')\n         const elem: any = {\n             selector : '#foo',\n-            parent: { $: vi.fn(() => { return elem}) },\n+            parent: {\n+                $: vi.fn(() => { return elem}),\n+                on: vi.fn(),\n+                off: vi.fn(),\n+            },\n             waitForClickable : tmpElem.waitForClickable,\n             waitUntil : tmpElem.waitUntil,\n             isDisplayed : tmpElem.isDisplayed,\n@@ -113,6 +125,8 @@ describe('waitForClickable', () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n             selector : '#foo',\n+            on: vi.fn(),\n+            off: vi.fn(),\n             waitForClickable : tmpElem.waitForClickable,\n             elementId : 123,\n             waitUntil : vi.fn(((cb))),\n@@ -131,6 +145,8 @@ describe('waitForClickable', () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n             selector : '#foo',\n+            on: vi.fn(),\n+            off: vi.fn(),\n             waitForClickable : tmpElem.waitForClickable,\n             elementId : 123,\n             waitUntil : tmpElem.waitUntil,\n\ndiff --git a/packages/webdriverio/tests/commands/element/waitForDisplayed.test.ts b/packages/webdriverio/tests/commands/element/waitForDisplayed.test.ts\nindex 19be864e6b4..612740c0029 100644\n--- a/packages/webdriverio/tests/commands/element/waitForDisplayed.test.ts\n+++ b/packages/webdriverio/tests/commands/element/waitForDisplayed.test.ts\n@@ -26,6 +26,8 @@ describe('waitForDisplayed', () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n             selector: '#foo',\n+            on: vi.fn(),\n+            off: vi.fn(),\n             waitForDisplayed: tmpElem.waitForDisplayed,\n             elementId: 123,\n             waitUntil: vi.fn().mockImplementation(cb),\n@@ -51,6 +53,8 @@ describe('waitForDisplayed', () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n             selector: '#foo',\n+            on: vi.fn(),\n+            off: vi.fn(),\n             waitForDisplayed: tmpElem.waitForDisplayed,\n             elementId: 123,\n             waitUntil: tmpElem.waitUntil,\n@@ -71,6 +75,8 @@ describe('waitForDisplayed', () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n             selector: '#foo',\n+            on: vi.fn(),\n+            off: vi.fn(),\n             waitForDisplayed: tmpElem.waitForDisplayed,\n             elementId: 123,\n             waitUntil: tmpElem.waitUntil,\n@@ -91,13 +97,16 @@ describe('waitForDisplayed', () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n             selector: '#foo',\n-            parent: { $: vi.fn(() => { return elem}) },\n+            parent: {\n+                $: vi.fn(() => { return elem}),\n+                on: vi.fn(),\n+                off: vi.fn(),\n+            },\n             waitForDisplayed: tmpElem.waitForDisplayed,\n             waitUntil: tmpElem.waitUntil,\n             isDisplayed: tmpElem.isDisplayed,\n             options: { waitforTimeout: 500, waitforInterval: 50 },\n         } as unknown as WebdriverIO.Element\n-        // @ts-expect-error\n         elem.getElement = () => Promise.resolve(elem)\n \n         try {\n@@ -129,6 +138,8 @@ describe('waitForDisplayed', () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n             selector: '#foo',\n+            on: vi.fn(),\n+            off: vi.fn(),\n             waitForDisplayed: tmpElem.waitForDisplayed,\n             elementId: 123,\n             waitUntil: tmpElem.waitUntil,\n\ndiff --git a/packages/webdriverio/tests/commands/element/waitForEnabled.test.ts b/packages/webdriverio/tests/commands/element/waitForEnabled.test.ts\nindex f6b5f5e9672..d77a87fda8b 100644\n--- a/packages/webdriverio/tests/commands/element/waitForEnabled.test.ts\n+++ b/packages/webdriverio/tests/commands/element/waitForEnabled.test.ts\n@@ -24,6 +24,8 @@ describe('waitForEnabled', () => {\n     it('should wait for the element to exist', async () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n+            on: vi.fn(),\n+            off: vi.fn(),\n             waitForEnabled : tmpElem.waitForEnabled,\n             waitForExist : vi.fn(),\n             elementId : null,\n@@ -38,6 +40,8 @@ describe('waitForEnabled', () => {\n     it('element should already exist on the page', async () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n+            on: vi.fn(),\n+            off: vi.fn(),\n             waitForEnabled : tmpElem.waitForEnabled,\n             waitForExist : vi.fn(),\n             elementId : 123,\n@@ -54,6 +58,8 @@ describe('waitForEnabled', () => {\n         const cb = vi.fn()\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n+            on: vi.fn(),\n+            off: vi.fn(),\n             selector : '#foo',\n             waitForEnabled : tmpElem.waitForEnabled,\n             waitForExist : vi.fn(),\n@@ -72,6 +78,8 @@ describe('waitForEnabled', () => {\n     it('should call isEnabled and return true', async () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n+            on: vi.fn(),\n+            off: vi.fn(),\n             selector : '#foo',\n             waitForEnabled : tmpElem.waitForEnabled,\n             waitForExist : vi.fn(),\n@@ -88,6 +96,8 @@ describe('waitForEnabled', () => {\n     it('should call isEnabled and return false', async () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n+            on: vi.fn(),\n+            off: vi.fn(),\n             selector : '#foo',\n             waitForEnabled : tmpElem.waitForEnabled,\n             waitForExist : vi.fn(),\n@@ -108,6 +118,8 @@ describe('waitForEnabled', () => {\n         const cb = vi.fn()\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n+            on: vi.fn(),\n+            off: vi.fn(),\n             selector : '#foo',\n             waitForEnabled : tmpElem.waitForEnabled,\n             waitForExist : vi.fn(),\n@@ -124,6 +136,8 @@ describe('waitForEnabled', () => {\n     it('should call isEnabled and return false with custom error', async () => {\n         const tmpElem = await browser.$('#foo')\n         const elem = {\n+            on: vi.fn(),\n+            off: vi.fn(),\n             selector : '#foo',\n             waitForEnabled : tmpElem.waitForEnabled,\n             waitForExist : vi.fn(),\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14229",
    "pr_id": 14229,
    "issue_id": 14227,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Wrong config file will be read when multiple config files with same filename and different extensions\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.10.0\n\n### Node.js Version\n\nv20.18.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\ncapabilities: [\n    {\n      'browserName': 'electron',\n      'wdio:electronServiceOptions': {\n        appBinaryPath: '/path/to/binary',\n        appArgs: ['foo', 'bar=baz'],\n      },\n    },\n  ],\n```\n\n### What happened?\n\n### Assumptions\nWe have multiple configuration files with same filename and different extensions.\nExample is follows.\n```bash\n# Omit irrelevant outputs\n$ ls -1\nwdio.conf.js\nwdio.conf.ts\nwdio.no-binary.conf.js\nwdio.no-binary.conf.ts\n```\n\n### Issue\nIf we run this command, the wrong configuration file will be used and the result will be incorrect.\n(In the following example, `wdio.conf.js` will be used)\n\n```bash\n$ pnpm exec wdio run ./wdio.conf.ts\n```\n\n### Related change\nThis PR is likely to be the cause of the problem.\n#14195\n\nIt changed to use `confAccess` as the path to the configuration file instead of `wdioConf.fullPath`.\n```diff\n    if (process.stdin.isTTY || !process.stdout.isTTY) {\n-        return launch(wdioConf.fullPath, params)\n+        return launch(confAccess, params)\n    }\n```\n`confAccess` is the output of the following functions, but `wdio.conf.js` is selected because the specification is to return the file with the first successful `fs.access` in the order of extensions defined in the `SUPPORTED_CONFIG_FILE_EXTENSION`.\n\nhttps://github.com/webdriverio/webdriverio/blob/f5daf047c67612bd565b5ee52e14858271d17fd3/packages/wdio-cli/src/commands/config.ts#L199-L207\n\nhttps://github.com/webdriverio/webdriverio/blob/dc41a90e711d7b7a10e8129fb74650ad7a5956d0/packages/wdio-cli/src/constants.ts#L30\n\n### What is your expected behavior?\n\nIf we run this command, selected `wdio.conf.ts` even if `wdio.conf.js` is existed in the same directory.\n\n```bash\n$ pnpm exec wdio run ./wdio.conf.ts\n```\n\n### How to reproduce the bug.\n\nCreate multiple configuration files with same filename and different extensions.\n\n```bash\n$ ls -1\nwdio.conf.js\nwdio.conf.ts\n\n$ pnpm exec wdio run ./wdio.conf.ts\n```\n\n\n### Relevant log output\n\n```typescript\nN/A\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 367,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/wdio-cli/src/commands/config.ts",
      "packages/wdio-cli/src/commands/run.ts",
      "packages/wdio-cli/tests/commands/config.test.ts",
      "packages/wdio-cli/tests/commands/run.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-cli/tests/commands/config.test.ts",
      "packages/wdio-cli/tests/commands/run.test.ts"
    ],
    "base_commit": "dc41a90e711d7b7a10e8129fb74650ad7a5956d0",
    "head_commit": "e767b6d71307da4729fbfcb5da6f121565d21087",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14229",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14229",
    "dockerfile": "",
    "pr_merged_at": "2025-02-25T22:57:44.000Z",
    "patch": "diff --git a/packages/wdio-cli/src/commands/config.ts b/packages/wdio-cli/src/commands/config.ts\nindex 0c802f6382e..43c3919a2c5 100644\n--- a/packages/wdio-cli/src/commands/config.ts\n+++ b/packages/wdio-cli/src/commands/config.ts\n@@ -193,17 +193,25 @@ export async function formatConfigFilePaths(config: string) {\n \n /**\n  * Helper utility used in `run` and `install` command to check whether a config file currently exists\n- * @param configPath the file path to the WDIO config file\n+ * @param configPathNoExtension the file path to the WDIO config file without extension\n+ * @param configPath the file path to the WDIO config file that is checked first if set\n  * @returns {string} the path to the config file that exists, otherwise undefined\n  */\n-export async function canAccessConfigPath(configPath: string) {\n-    return Promise.all(SUPPORTED_CONFIG_FILE_EXTENSION.map(async (supportedExtension) => {\n-        const configPathWithExtension = `${configPath}.${supportedExtension}`\n+export async function canAccessConfigPath(configPathNoExtension:string, configPath?:string) {\n+    return new Promise<string | undefined>((resolve, reject)=>{\n+        if (configPath) {\n+            const _configPath = configPath\n+            fs.access(_configPath).then(()=>resolve(_configPath), reject)\n+        } else {\n+            reject()\n+        }\n+    }).catch(()=>Promise.all(SUPPORTED_CONFIG_FILE_EXTENSION.map(async (supportedExtension) => {\n+        const configPathWithExtension = `${configPathNoExtension}.${supportedExtension}`\n         return fs.access(configPathWithExtension).then(() => configPathWithExtension, () => undefined)\n     })).then(\n         (configFilePaths) => configFilePaths.find(Boolean),\n         () => undefined\n-    )\n+    ))\n }\n \n /**\n\ndiff --git a/packages/wdio-cli/src/commands/run.ts b/packages/wdio-cli/src/commands/run.ts\nindex f84309eb08e..e6323ee20ba 100644\n--- a/packages/wdio-cli/src/commands/run.ts\n+++ b/packages/wdio-cli/src/commands/run.ts\n@@ -176,7 +176,7 @@ export async function handler(argv: RunCommandArguments) {\n     const { configPath = 'wdio.conf.js', ...params } = argv\n \n     const wdioConf = await formatConfigFilePaths(configPath)\n-    const confAccess = await canAccessConfigPath(wdioConf.fullPathNoExtension)\n+    const confAccess = await canAccessConfigPath(wdioConf.fullPathNoExtension, wdioConf.fullPath)\n     if (!confAccess) {\n         try {\n             await missingConfigurationPrompt('run', wdioConf.fullPathNoExtension)\n",
    "test_patch": "diff --git a/packages/wdio-cli/tests/commands/config.test.ts b/packages/wdio-cli/tests/commands/config.test.ts\nindex aec802e7107..b90a47d2052 100644\n--- a/packages/wdio-cli/tests/commands/config.test.ts\n+++ b/packages/wdio-cli/tests/commands/config.test.ts\n@@ -172,17 +172,45 @@ test('missingConfigurationPrompt does run config if user agrees', async () => {\n     expect(runConfigCmd).toBeCalledTimes(1)\n })\n \n-test('canAccessConfigPath', async () => {\n-    vi.mocked(fs.access)\n-        .mockRejectedValueOnce(new Error('not found'))\n-        .mockRejectedValueOnce(new Error('not found'))\n-        .mockRejectedValueOnce(new Error('not found'))\n-        .mockResolvedValue('Yay' as any)\n-    expect(await canAccessConfigPath('/foo/bar')).toBe('/foo/bar.mts')\n-    expect(fs.access).toBeCalledWith('/foo/bar.js')\n-    expect(fs.access).toBeCalledWith('/foo/bar.ts')\n-    expect(fs.access).toBeCalledWith('/foo/bar.mjs')\n-    expect(fs.access).toBeCalledWith('/foo/bar.mts')\n+describe('canAccessConfigPath', () => {\n+    beforeEach(()=>{\n+        vi.mocked(fs.access).mockClear()\n+    })\n+    test('no extension only', async () => {\n+        vi.mocked(fs.access)\n+            .mockRejectedValueOnce(new Error('not found'))\n+            .mockRejectedValueOnce(new Error('not found'))\n+            .mockRejectedValueOnce(new Error('not found'))\n+            .mockResolvedValue('Yay' as any)\n+        expect(await canAccessConfigPath('/foo/bar')).toBe('/foo/bar.mts')\n+        expect(fs.access).not.toBeCalledWith('/foo/bar')\n+        expect(fs.access).toBeCalledWith('/foo/bar.js')\n+        expect(fs.access).toBeCalledWith('/foo/bar.ts')\n+        expect(fs.access).toBeCalledWith('/foo/bar.mjs')\n+        expect(fs.access).toBeCalledWith('/foo/bar.mts')\n+    })\n+\n+    test('with full path of the existed file', async () => {\n+        vi.mocked(fs.access)\n+            .mockResolvedValue('Yay' as any)\n+        expect(await canAccessConfigPath('/foo/bar', '/foo/bar.ts')).toBe('/foo/bar.ts')\n+        expect(fs.access).toHaveBeenCalledTimes(1)\n+        expect(fs.access).toBeCalledWith('/foo/bar.ts')\n+    })\n+\n+    test('with full path of the not existed file', async () => {\n+        vi.mocked(fs.access)\n+            .mockRejectedValueOnce(new Error('not found'))\n+            .mockRejectedValueOnce(new Error('not found'))\n+            .mockRejectedValueOnce(new Error('not found'))\n+            .mockRejectedValueOnce(new Error('not found'))\n+            .mockResolvedValue('Yay' as any)\n+        expect(await canAccessConfigPath('/foo/bar', '/foo/bar.ts')).toBe('/foo/bar.mts')\n+        expect(fs.access).toBeCalledWith('/foo/bar.js')\n+        expect(fs.access).toBeCalledWith('/foo/bar.ts')\n+        expect(fs.access).toBeCalledWith('/foo/bar.mjs')\n+        expect(fs.access).toBeCalledWith('/foo/bar.mts')\n+    })\n })\n \n describe('Serenity/JS project generation', () => {\n\ndiff --git a/packages/wdio-cli/tests/commands/run.test.ts b/packages/wdio-cli/tests/commands/run.test.ts\nindex 32d6b37f7db..ace505c7a4d 100644\n--- a/packages/wdio-cli/tests/commands/run.test.ts\n+++ b/packages/wdio-cli/tests/commands/run.test.ts\n@@ -66,7 +66,9 @@ describe('Command: run', () => {\n     })\n \n     it('should check for js and ts default config files', async () => {\n-        vi.mocked(fs.access).mockRejectedValueOnce('not found')\n+        vi.mocked(fs.access)\n+            .mockRejectedValueOnce('not found')\n+            .mockRejectedValueOnce('not found')\n         const result = await runCmd.handler({ configPath: 'sample.conf.js' } as any)\n         expect(result).toContain('sample.conf.ts')\n     })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14212",
    "pr_id": 14212,
    "issue_id": 6538,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "Integrate deep link into `url` command\nUsing deeplinks in mobile automation can be a very useful feature as it allows to open specific views of an app with one single call rather than walking through the app over and over again. I suggest to enhance to enhance the `url` command to support this functionality from the [`wdio-mobile-utils`](https://github.com/martinfrancois/wdio-mobile-utils/blob/master/src/lib/deeplink.ts) package with the following interface:\r\n\r\n- before: `url(path: string)`\r\n- after: `url(path: string, urlOpts: UrlCommandOptions)`\r\n  - where `UrlCommandOptions = { id: string }`\r\n  - where `id` is the bundle or app id depending which environment the user is using\r\n  - the original implementation comes with a timeout option for its iOS implementation, I suggest to make a good guess here and hard code this timeout to avoid to many options that only confuse users and aren't gonna be used much anyway",
    "issue_word_count": 148,
    "test_files_count": 2,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/browser.ts",
      "packages/webdriverio/src/commands/mobile.ts",
      "packages/webdriverio/src/commands/mobile/deepLink.ts",
      "packages/webdriverio/tests/commands/mobile/deepLink.test.ts",
      "packages/webdriverio/tests/commands/mobile/relaunchActiveApp.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/mobile/deepLink.test.ts",
      "packages/webdriverio/tests/commands/mobile/relaunchActiveApp.test.ts"
    ],
    "base_commit": "522d990f7d5b30c73920e527c15fb1e5103cb7f0",
    "head_commit": "1b3726d872cccf1731e7d096b847977fe9feb510",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14212",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14212",
    "dockerfile": "",
    "pr_merged_at": "2025-02-22T06:42:12.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser.ts b/packages/webdriverio/src/commands/browser.ts\nindex 6699b3450c4..ffe970432c1 100644\n--- a/packages/webdriverio/src/commands/browser.ts\n+++ b/packages/webdriverio/src/commands/browser.ts\n@@ -51,3 +51,4 @@ export * from './mobile/getContext.js'\n export * from './mobile/getContexts.js'\n export * from './mobile/switchContext.js'\n export * from './mobile/relaunchActiveApp.js'\n+export * from './mobile/deepLink.js'\n\ndiff --git a/packages/webdriverio/src/commands/mobile.ts b/packages/webdriverio/src/commands/mobile.ts\nindex 23ce609402d..d67f69344a2 100644\n--- a/packages/webdriverio/src/commands/mobile.ts\n+++ b/packages/webdriverio/src/commands/mobile.ts\n@@ -6,3 +6,4 @@ export * from './mobile/zoom.js'\n export * from './mobile/getContext.js'\n export * from './mobile/getContexts.js'\n export * from './mobile/switchContext.js'\n+export * from './mobile/deepLink.js'\n\ndiff --git a/packages/webdriverio/src/commands/mobile/deepLink.ts b/packages/webdriverio/src/commands/mobile/deepLink.ts\nnew file mode 100644\nindex 00000000000..5eab6e1b802\n--- /dev/null\n+++ b/packages/webdriverio/src/commands/mobile/deepLink.ts\n@@ -0,0 +1,54 @@\n+/**\n+ *\n+ * Open a deep link URL in the mobile app based on the url and the app's package name (Android) or bundle ID (iOS).\n+ *\n+ * <example>\n+    :deeplink.js\n+    it('should open a deep link for the WDIO native demo app', async () => {\n+        // open the Drag tab with a deep link (this the bundleId for the iOS Demo App)\n+        await browser.deepLink('wdio://drag', 'org.reactjs.native.example.wdiodemoapp');\n+\n+        // Or open the Drag tab with a deep link (this the packageName for the Android Demo App)\n+        await browser.deepLink('wdio://drag', 'com.wdiodemoapp');\n+\n+        // Or if you want to have it \"cross-platform\" you can use it like this\n+        await browser.deepLink('wdio://drag', browser.isIOS ? 'org.reactjs.native.example.wdiodemoapp' : 'com.wdiodemoapp');\n+    })\n+ * </example>\n+ *\n+ * @param {string}  link            The deep link URL that should be opened in the mobile app. It should be a valid deep link URL (e.g. `myapp://path`). If it's a universal deep link, which can be used for iOS, use the `browser.url(\"your-url\")`-method.\n+ * @param {string}  appIdentifier   The value of the `packageName` (Android) or `bundleId` (iOS) of the app that the deep link should open.\n+ */\n+export async function deepLink(\n+    this: WebdriverIO.Browser,\n+    link: string,\n+    appIdentifier: string\n+) {\n+    const browser = this\n+\n+    if (!browser.isMobile) {\n+        throw new Error('The `deepLink` command is only available for mobile platforms.')\n+    }\n+\n+    if (!isDeepLinkUrl(link)) {\n+        throw new Error(`The provided link is not a valid deep link URL.${browser.isIOS ? ' If your url is a `universal deep link` then use the `url` command instead.' : ''}`)\n+    }\n+\n+    if (!appIdentifier) {\n+        const mobileOS = browser.isIOS ? 'iOS' : 'Android'\n+        const identifierValue = browser.isIOS ? 'bundleId' : 'packageName'\n+\n+        throw new Error(`When using a deep link URL for ${mobileOS}, you need to provide the \\`${identifierValue}\\` of the app that the deep link should open.`)\n+    }\n+\n+    return browser.execute('mobile:deepLink', {\n+        url: link,\n+        [browser.isIOS ? 'bundleId' : 'packageName']: appIdentifier,\n+    })\n+}\n+\n+function isDeepLinkUrl(link: string): boolean {\n+    const deepLinkRegex = /^(?!https?:\\/\\/)[a-zA-Z][\\w+\\-.]*:\\/\\//\n+\n+    return deepLinkRegex.test(link)\n+}\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/mobile/deepLink.test.ts b/packages/webdriverio/tests/commands/mobile/deepLink.test.ts\nnew file mode 100644\nindex 00000000000..4f8d3748c44\n--- /dev/null\n+++ b/packages/webdriverio/tests/commands/mobile/deepLink.test.ts\n@@ -0,0 +1,106 @@\n+import { expect, describe, it, vi, beforeEach } from 'vitest'\n+import { remote } from '../../../src/index.js'\n+\n+vi.mock('fetch')\n+\n+describe('deepLink test', () => {\n+    let browser: WebdriverIO.Browser\n+\n+    beforeEach(async () => {\n+        vi.mocked(fetch).mockClear()\n+    })\n+\n+    it('should open a deep link for iOS', async () => {\n+        browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: {\n+                browserName: 'foobar',\n+                mobileMode: true,\n+                platformName: 'iOS',\n+            } as any\n+        })\n+\n+        const executeSpy = vi.spyOn(browser, 'execute')\n+\n+        await expect(browser.deepLink('wdio://drag', 'com.wdio.app'))\n+\n+        expect(executeSpy).toHaveBeenCalledTimes(1)\n+        expect(executeSpy).toHaveBeenCalledWith('mobile:deepLink', {\n+            url: 'wdio://drag',\n+            bundleId: 'com.wdio.app'\n+        })\n+    })\n+\n+    it('should open a deep link for Android', async () => {\n+        browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: {\n+                browserName: 'foobar',\n+                mobileMode: true,\n+                platformName: 'Android',\n+            } as any\n+        })\n+\n+        const executeSpy = vi.spyOn(browser, 'execute')\n+\n+        await expect(browser.deepLink('wdio://drag', 'com.wdio.app'))\n+\n+        expect(executeSpy).toHaveBeenCalledTimes(1)\n+        expect(executeSpy).toHaveBeenCalledWith('mobile:deepLink', {\n+            url: 'wdio://drag',\n+            packageName: 'com.wdio.app'\n+        })\n+    })\n+\n+    it('should throw an error for non-mobile platforms', async () => {\n+        browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: {\n+                browserName: 'foobar',\n+            } as any\n+        })\n+        await expect(browser.deepLink('string', 'string')).rejects.toThrow('The `deepLink` command is only available for mobile platforms.')\n+    })\n+\n+    it('should throw an error when the an invalid deep link is provided', async () => {\n+        browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: {\n+                browserName: 'foobar',\n+                mobileMode: true,\n+                platformName: 'iOS',\n+            } as any\n+        })\n+\n+        // @ts-expect-error test invalid input\n+        await expect(browser.deepLink('string')).rejects.toThrow('The provided link is not a valid deep link URL. If your url is a `universal deep link` then use the `url` command instead.')\n+    })\n+\n+    it('should throw an error when no bundleId is provided for iOS', async () => {\n+        browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: {\n+                browserName: 'foobar',\n+                mobileMode: true,\n+                platformName: 'iOS',\n+            } as any\n+        })\n+\n+        // @ts-expect-error test invalid input\n+        await expect(browser.deepLink('wdio://drag')).rejects.toThrow('When using a deep link URL for iOS, you need to provide the `bundleId` of the app that the deep link should open.')\n+    })\n+\n+    it('should throw an error when no packageName is provided for Android', async () => {\n+        browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: {\n+                browserName: 'foobar',\n+                mobileMode: true,\n+                platformName: 'Android',\n+            } as any\n+        })\n+\n+        // @ts-expect-error test invalid input\n+        await expect(browser.deepLink('wdio://drag')).rejects.toThrow('When using a deep link URL for Android, you need to provide the `packageName` of the app that the deep link should open.')\n+    })\n+})\n\ndiff --git a/packages/webdriverio/tests/commands/mobile/relaunchActiveApp.test.ts b/packages/webdriverio/tests/commands/mobile/relaunchActiveApp.test.ts\nindex bc6a788357f..c85196f6cd2 100644\n--- a/packages/webdriverio/tests/commands/mobile/relaunchActiveApp.test.ts\n+++ b/packages/webdriverio/tests/commands/mobile/relaunchActiveApp.test.ts\n@@ -1,15 +1,10 @@\n-import path from 'node:path'\n import { expect, describe, it, vi, beforeEach } from 'vitest'\n-import logger from '@wdio/logger'\n import { remote } from '../../../src/index.js'\n \n vi.mock('fetch')\n-const log = logger('test')\n-vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdio/logger')))\n \n describe('relaunchActiveApp test', () => {\n     let browser: WebdriverIO.Browser\n-    let logSpy\n \n     beforeEach(async () => {\n         vi.mocked(fetch).mockClear()\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14207",
    "pr_id": 14207,
    "issue_id": 14206,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Can't disable default `tlsPassthroughDomains` and/or set `tlsResignDomains` for SauceConnect\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nv9.9.3\n\n### Node.js Version\n\nv22.11.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\n    runner: 'local',\n    tsConfigPath: './tsconfig.json',\n    user: process.env.SAUCE_USERNAME,\n    key: process.env.SAUCE_ACCESS_KEY,\n    region: 'eu',\n    specs: [\n        './test/specs/**/*.ts'\n    ],\n    maxInstances: 1,\n    capabilities: [{\n        browserName: 'chrome'\n    }],\n    logLevel: 'info',\n    bail: 0,\n    waitforTimeout: 10000,\n    connectionRetryTimeout: 120000,\n    connectionRetryCount: 3,\n    services: [[\n        'sauce',\n        {\n            sauceConnect: true,\n            sauceConnectOpts: {\n                tlsResignDomains: 'localhost'\n            }\n        }\n    ]],\n    framework: 'mocha',\n    reporters: ['spec'],\n    mochaOpts: {\n        ui: 'bdd',\n        timeout: 60000\n    },\n    outputDir: 'logs'\n}\n```\n\n### What happened?\n\nTrying to specify the option `tlsResignDomains` produces an error as is forced to have always the values \"127.0.0.1\" and \"localhost\", even if you don't set it, and is not possible to unset it.\n\n### What is your expected behavior?\n\nThere should be an option to not use the default values for `tlsPassthroughDomains`, or just don't define it by default on the service\n\n### How to reproduce the bug.\n\nCreate a wdio project with sauce and enable sauce connect\n\nEdit the config file to add `tlsResignDomains: ['localhost']` to `sauceConnectOpts`\n\nRun it and check \"wdio.log\" file\n\n### Relevant log output\n\n```typescript\n2025-02-20T19:35:55.957Z INFO @wdio/cli:launcher: Run onPrepare hook\n2025-02-20T19:35:55.960Z INFO @wdio/sauce-service: Starting Sauce Connect Tunnel\n2025-02-20T19:35:56.161Z ERROR @wdio/cli:utils: A service failed in the 'onPrepare' hook\nError: Error: if any flags in the group [tls-resign-domains tls-passthrough-domains] are set none of the others can be; [tls-passthrough-domains tls-resign-domains] were all set\n\n    at Socket.<anonymous> (<project_path>/wdio-minefield/node_modules/saucelabs/build/sauceConnectManager.js:24:23)\n    at Socket.emit (node:events:518:28)\n    at Socket.emit (node:domain:489:12)\n    at addChunk (node:internal/streams/readable:561:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:512:3)\n    at Readable.push (node:internal/streams/readable:392:5)\n    at Pipe.onStreamRead (node:internal/stream_base_commons:189:23)\n\nContinue...\n2025-02-20T19:35:56.165Z INFO @wdio/cli:launcher: Run onWorkerStart hook\n2025-02-20T19:35:56.166Z INFO @wdio/local-runner: Start worker 0-0 with arg: run ./wdio.conf.ts\n2025-02-20T19:35:59.984Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\n2025-02-20T19:35:59.985Z INFO @wdio/local-runner: Shutting down spawned worker\n2025-02-20T19:36:00.236Z INFO @wdio/local-runner: Waiting for 0 to shut down gracefully\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 458,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/wdio-sauce-service/src/launcher.ts",
      "packages/wdio-sauce-service/src/utils.ts",
      "packages/wdio-sauce-service/tests/launcher.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-sauce-service/tests/launcher.test.ts"
    ],
    "base_commit": "8908cc4e3cd75e85bf47692477fc5c0ab58f9168",
    "head_commit": "81a0ccc9b874c442b847d6ae0eaa29a7b253e0af",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14207",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14207",
    "dockerfile": "",
    "pr_merged_at": "2025-02-21T05:06:00.000Z",
    "patch": "diff --git a/packages/wdio-sauce-service/src/launcher.ts b/packages/wdio-sauce-service/src/launcher.ts\nindex 31292e223b3..f9376ce2f5d 100644\n--- a/packages/wdio-sauce-service/src/launcher.ts\n+++ b/packages/wdio-sauce-service/src/launcher.ts\n@@ -9,7 +9,7 @@ import {\n import logger from '@wdio/logger'\n import type { Services, Capabilities, Options } from '@wdio/types'\n \n-import { makeCapabilityFactory, getLocalIpAddress } from './utils.js'\n+import { makeCapabilityFactory } from './utils.js'\n import type { SauceServiceConfig } from './types.js'\n import { DEFAULT_RUNNER_NAME } from './constants.js'\n import path from 'node:path'\n@@ -47,11 +47,6 @@ export default class SauceLauncher implements Services.ServiceInstance {\n              */\n             `SC-tunnel-${Math.random().toString().slice(2)}`)\n \n-        const tlsPassthroughDomains = new Set(['127.0.0.1', 'localhost', getLocalIpAddress()])\n-        if (this._options.sauceConnectOpts?.tlsPassthroughDomains) {\n-            this._options.sauceConnectOpts.tlsPassthroughDomains.split(',').forEach((domain) => tlsPassthroughDomains.add(domain))\n-        }\n-\n         let metadata = this._options.sauceConnectOpts?.metadata || ''\n         if (!metadata.includes('runner=')) {\n             metadata += `runner=${DEFAULT_RUNNER_NAME}`\n@@ -60,7 +55,6 @@ export default class SauceLauncher implements Services.ServiceInstance {\n         const sauceConnectOpts: SauceConnectOptions = {\n             tunnelName: sauceConnectTunnelName,\n             ...this._options.sauceConnectOpts,\n-            tlsPassthroughDomains: Array.from(tlsPassthroughDomains).join(','),\n             metadata: metadata,\n             logger: this._options.sauceConnectOpts?.logger || ((output) => log.debug(`Sauce Connect Log: ${output}`)),\n             ...(!this._options.sauceConnectOpts?.logFile && this._config.outputDir\n\ndiff --git a/packages/wdio-sauce-service/src/utils.ts b/packages/wdio-sauce-service/src/utils.ts\nindex 4e5473616a9..88c48f39a88 100644\n--- a/packages/wdio-sauce-service/src/utils.ts\n+++ b/packages/wdio-sauce-service/src/utils.ts\n@@ -1,5 +1,3 @@\n-import os from 'node:os'\n-\n /**\n  * Determine if the current instance is a RDC instance. RDC tests are Real Device tests\n  * that can be started with different sets of capabilities. A deviceName is not mandatory, the only mandatory cap for\n@@ -87,14 +85,3 @@ export function ansiRegex() {\n \n     return new RegExp(pattern, 'g')\n }\n-\n-export function getLocalIpAddress(): string {\n-    const interfaces = os.networkInterfaces()\n-    const internalAddresses = Object.keys(interfaces)\n-        .map((nic) => {\n-            const addresses = interfaces[nic]?.filter((details) => details.internal) || []\n-            return addresses.length ? addresses[0].address : undefined\n-        })\n-        .filter(Boolean) as string[]\n-    return internalAddresses.length ? internalAddresses[0] : '127.0.0.1'\n-}\n",
    "test_patch": "diff --git a/packages/wdio-sauce-service/tests/launcher.test.ts b/packages/wdio-sauce-service/tests/launcher.test.ts\nindex c28a2584fdd..a18c6390204 100644\n--- a/packages/wdio-sauce-service/tests/launcher.test.ts\n+++ b/packages/wdio-sauce-service/tests/launcher.test.ts\n@@ -1,4 +1,3 @@\n-import os from 'node:os'\n import path from 'node:path'\n import logger from '@wdio/logger'\n import SauceLabs from 'saucelabs'\n@@ -57,26 +56,6 @@ test('onPrepare w/ SauceConnect w/ tunnelName w/ JWP', async () => {\n     expect(service['_sauceConnectProcess']).not.toBeUndefined()\n })\n \n-test('onPrepare only sets unique tlsPassthroughDomains values', async () => {\n-    const options: SauceServiceConfig = {\n-        sauceConnect: true,\n-        sauceConnectOpts: {\n-            tlsPassthroughDomains: 'foo,bar,127.0.0.1,bar'\n-        },\n-    }\n-    const caps = [{}] as WebdriverIO.Capabilities[]\n-    const config = {} as Options.Testrunner\n-    const service = new SauceServiceLauncher(options, caps as never, config)\n-    const startTunnelMock = vi.fn()\n-    service.startTunnel = startTunnelMock\n-    await service.onPrepare(config, caps)\n-    if (os.type() === 'Windows_NT') {\n-        expect(startTunnelMock.mock.calls[0][0].tlsPassthroughDomains).toBe('127.0.0.1,localhost,::1,foo,bar')\n-    } else {\n-        expect(startTunnelMock.mock.calls[0][0].tlsPassthroughDomains).toBe('127.0.0.1,localhost,foo,bar')\n-    }\n-})\n-\n test('onPrepare sets runner in metadata', async () => {\n     const options: SauceServiceConfig = {\n         sauceConnect: true,\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14196",
    "pr_id": 14196,
    "issue_id": 14162,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Navigation to 'page.html#hash' timed out as no request payload was received\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.7.2\n\n### Node.js Version\n\nv22.11.0\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\n{\n   runner: 'local',\n\n    waitforTimeout: 10_000,\n    connectionRetryTimeout: 30_000,\n\n    capabilities: [{\n        browserName: 'chrome',\n        'goog:chromeOptions': {\n            excludeSwitches: [ 'enable-automation' ],\n            args: [\n                '--disable-web-security',\n                '--allow-file-access-from-files',\n                '--allow-file-access',\n                '--ignore-certificate-errors',\n                '--headless',\n                '--no-sandbox',\n                '--disable-gpu',\n                '--disable-popup-blocking',\n                '--window-size=1024x768',\n            ],\n        }\n    }],\n}\n```\n\n### What happened?\n\nWhen WebdriverIO 9 is used with the latest stable Chrome for Testing (mac_arm-133.0.6943.53), navigating to a URL containing a `#hash` results in the following error:\n\n```\nNavigation to 'http://localhost:8080/page.html#example' timed out as no request payload was received\n```\n\nNavigating to URLs containing a hash works correctly with the previous major version of Chrome for Testing (mac_arm-132.0.6834.159)\n\nThe error is similar to the one reported in #14137 \n\n### What is your expected behavior?\n\nNavigating to URLs containing a `#hash` should not result in an error.\n\n### How to reproduce the bug.\n\nCreate a basic HTML page called e.g. 'page.html' and make it available on localhost:\n```html\n<html lang=\"en\">\n<head>\n    <title>Main page title</title>\n</head>\n<body>\n    <h1 id=\"example\">example</h1>\n</body>\n</html>\n```\nCreate WebdriverIO / Mocha a spec file with two test scenarios:\n\n```ts\ndescribe('navigation', () => {\n\n  it(`navigates to url without hash`, async () => {\n      await global.browser.url(`http://localhost:8080/page.html`);\n  });\n  \n  it(`navigates to url with a hash`, async () => {\n      await global.browser.url(`http://localhost:8080/page.html#example`);\n  });\n})\n```\n\n- Run WebdriverIO using a local runner and Chrome 132 and note how both scenarios pass.\n- Run WebdriverIO using a local runner with the latest stable Chrome 133 and note how the first scenario is passes and the second one fails.\n\n\n### Relevant log output\n\nWith Chrome 133:\n\n```\n[chrome 133.0.6943.53 mac #0-0] Error: Navigation to 'http://localhost:8080/page.html#example' timed out as no request payload was received\n[chrome 133.0.6943.53 mac #0-0]     at <anonymous> (/Users/jan/Projects/serenity-js/serenity-js/node_modules/.pnpm/webdriverio@9.7.2/node_modules/webdriverio/build/node.js:5576:15)\n[chrome 133.0.6943.53 mac #0-0]     at async Browser.wrapCommandFn (/Users/jan/Projects/serenity-js/serenity-js/node_modules/.pnpm/@wdio+utils@9.7.2/node_modules/@wdio/utils/build/index.js:893:23)\n[chrome 133.0.6943.53 mac #0-0]     at async Browser.url (/Users/jan/Projects/serenity-js/serenity-js/node_modules/.pnpm/webdriverio@9.7.2/node_modules/webdriverio/build/node.js:5538:21)\n[chrome 133.0.6943.53 mac #0-0]     at async Browser.wrapCommandFn (/Users/jan/Projects/serenity-js/serenity-js/node_modules/.pnpm/@wdio+utils@9.7.2/node_modules/@wdio/utils/build/index.js:893:23)\n[chrome 133.0.6943.53 mac #0-0]     at async Context.<anonymous> (/Users/jan/Projects/serenity-js/serenity-js/integration/web-specs/spec/screenplay/models/Page.spec.ts:100:21)\n```\n\nWith Chrome 132 both scenarios pass.\n\nThe issue was first detected using a test in the Serenity/JS + WebdriverIO 9 integration test suite. Log output:\n\n```\n[0-0] 2025-02-07T00:21:44.310Z INFO webdriver: Register BiDi handler for session with id e50f67e5504cae8ec5c0b7656ed3e331\n[0-0] 2025-02-07T00:21:44.310Z INFO webdriver: Connect to webSocketUrl ws://127.0.0.1:60570/session/e50f67e5504cae8ec5c0b7656ed3e331\n[0-0] 2025-02-07T00:21:44.315Z INFO webdriver: Connected session to Bidi protocol\n[0-0] 2025-02-07T00:21:44.315Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.contextCreated\"]}\n[0-0] 2025-02-07T00:21:44.316Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"log.entryAdded\",\"browsingContext.navigationStarted\"]}\n[0-0] 2025-02-07T00:21:44.316Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[1319 bytes]>, contexts: undefined }\n[0-0] 2025-02-07T00:21:44.316Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\",\"network.responseCompleted\",\"network.beforeRequestSent\",\"network.fetchError\"]}\n[0-0] 2025-02-07T00:21:44.316Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.userPromptOpened\"]}\n[0-0] 2025-02-07T00:21:44.317Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.317Z INFO webdriver: Connected to WebDriver Bidi interface at ws://127.0.0.1:60570/session/e50f67e5504cae8ec5c0b7656ed3e331\n[0-0] 2025-02-07T00:21:44.317Z INFO webdriver: BIDI COMMAND browsingContext.getTree {}\n[0-0] 2025-02-07T00:21:44.317Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.318Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.321Z INFO webdriverio:PolyfillManager: Adding polyfill script to context with id D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.321Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[442 bytes] webdriverioPolyfill>\",\"target\":{\"children\":null,\"clientWindow\":\"\",\"context\":\"D431D8B40A98935E2BC0DF76AF81E0AF\",\"originalOpener\":null,\"parent\":null,\"url\":\"about:blank\",\"userContext\":\"default\"},\"awaitPromise\":false}\n[0-0] 2025-02-07T00:21:44.321Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[442 bytes]>, contexts: [\"D431D8B40A98935E2BC0DF76AF81E0AF\"] }\n[0-0] 2025-02-07T00:21:44.321Z INFO webdriver: BIDI RESULT {\"id\":1,\"result\":{},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:44.322Z INFO webdriver: BIDI RESULT {\"id\":2,\"result\":{},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:44.322Z INFO webdriver: BIDI RESULT {\"id\":4,\"result\":{},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:44.322Z INFO webdriver: BIDI RESULT {\"id\":5,\"result\":{},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:44.322Z INFO webdriver: BIDI RESULT {\"id\":6,\"result\":{\"contexts\":[{\"children\":[],\"clientWindow\":\"\",\"context\":\"D431D8B40A98935E2BC0DF76AF81E0AF\",\"originalOpener\":null,\"parent\":null,\"url\":\"about:blank\",\"userContext\":\"default\"}]},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:44.326Z INFO webdriver: BIDI RESULT {\"id\":3,\"result\":{\"script\":\"1264c289-59a0-4ddf-928e-da5a6660eab7\"},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:44.330Z INFO webdriver: BIDI RESULT {\"id\":7,\"result\":{\"realm\":\"1418936845499090870.3823304612386403300\",\"result\":{\"type\":\"undefined\"},\"type\":\"success\"},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:44.333Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.333Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.333Z INFO webdriver: BIDI RESULT {\"id\":8,\"result\":{\"script\":\"d2537bd1-8cff-4b0c-9b2f-8f9896d033e2\"},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:44.334Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.334Z INFO webdriver: COMMAND getWindowHandles()\n[0-0] 2025-02-07T00:21:44.334Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window/handles\n[0-0] 2025-02-07T00:21:44.336Z INFO webdriver: RESULT [ 'D431D8B40A98935E2BC0DF76AF81E0AF' ]\n[0-0] 2025-02-07T00:21:44.336Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.336Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.337Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.337Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.337Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.337Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.337Z INFO webdriver: BIDI COMMAND browsingContext.navigate {\"context\":\"D431D8B40A98935E2BC0DF76AF81E0AF\",\"url\":\"http://localhost:8080/screenplay/models/page/main_page.html\",\"wait\":\"complete\"}\n[0-0] 2025-02-07T00:21:44.351Z INFO webdriver: BIDI RESULT {\"id\":9,\"result\":{\"navigation\":\"78277a00-9886-480d-96ff-bd91bc40786c\",\"url\":\"http://localhost:8080/screenplay/models/page/main_page.html\"},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:44.351Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.352Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.352Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.353Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.353Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.354Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.354Z INFO webdriver: COMMAND switchToFrame(null)\n[0-0] 2025-02-07T00:21:44.354Z INFO webdriver: [POST] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/frame\n[0-0] 2025-02-07T00:21:44.354Z INFO webdriver: DATA { id: null }\n[0-0] 2025-02-07T00:21:44.355Z INFO webdriver: RESULT null\n[0-0] 2025-02-07T00:21:44.367Z INFO webdriver: BIDI COMMAND browsingContext.navigate {\"context\":\"D431D8B40A98935E2BC0DF76AF81E0AF\",\"url\":\"http://localhost:8080/screenplay/models/page/main_page.html\",\"wait\":\"complete\"}\n[0-0] 2025-02-07T00:21:44.373Z INFO webdriver: BIDI RESULT {\"id\":10,\"result\":{\"navigation\":\"5534bacd-ee03-4f36-842d-fbcdd6d0736c\",\"url\":\"http://localhost:8080/screenplay/models/page/main_page.html\"},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:44.376Z INFO webdriver: COMMAND getWindowHandles()\n[0-0] 2025-02-07T00:21:44.376Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window/handles\n[0-0] 2025-02-07T00:21:44.377Z INFO webdriver: RESULT [ 'D431D8B40A98935E2BC0DF76AF81E0AF' ]\n[0-0] 2025-02-07T00:21:44.377Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.377Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.378Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.378Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.378Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.378Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.379Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[131 bytes] anonymous>\",\"awaitPromise\":true,\"arguments\":[],\"target\":{\"context\":\"D431D8B40A98935E2BC0DF76AF81E0AF\"}}\n[0-0] 2025-02-07T00:21:44.382Z INFO webdriver: BIDI RESULT {\"id\":11,\"result\":{\"realm\":\"-2929371366084440304.-9116511575151775884\",\"result\":{\"type\":\"string\",\"value\":\"http://localhost:8080/screenplay/models/page/main_page.html\"},\"type\":\"success\"},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:44.382Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.383Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.383Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.384Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.384Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.384Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.384Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.384Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.385Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.395Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.395Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.396Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.396Z INFO webdriver: COMMAND getWindowHandles()\n[0-0] 2025-02-07T00:21:44.396Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window/handles\n[0-0] 2025-02-07T00:21:44.397Z INFO webdriver: RESULT [ 'D431D8B40A98935E2BC0DF76AF81E0AF' ]\n[0-0] 2025-02-07T00:21:44.397Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.397Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.398Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.421Z INFO webdriver: COMMAND getWindowHandles()\n[0-0] 2025-02-07T00:21:44.421Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window/handles\n[0-0] 2025-02-07T00:21:44.422Z INFO webdriver: RESULT [ 'D431D8B40A98935E2BC0DF76AF81E0AF' ]\n[0-0] 2025-02-07T00:21:44.435Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.435Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.435Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.435Z INFO webdriver: COMMAND getWindowHandles()\n[0-0] 2025-02-07T00:21:44.435Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window/handles\n[0-0] 2025-02-07T00:21:44.436Z INFO webdriver: RESULT [ 'D431D8B40A98935E2BC0DF76AF81E0AF' ]\n[0-0] 2025-02-07T00:21:44.436Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.436Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.437Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.437Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.437Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.438Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.438Z INFO webdriver: BIDI COMMAND browsingContext.navigate {\"context\":\"D431D8B40A98935E2BC0DF76AF81E0AF\",\"url\":\"http://localhost:8080/screenplay/models/page/main_page.html\",\"wait\":\"complete\"}\n[0-0] 2025-02-07T00:21:44.444Z INFO webdriver: BIDI RESULT {\"id\":12,\"result\":{\"navigation\":\"9cee331a-0075-48bd-b4e6-fb269b8eb508\",\"url\":\"http://localhost:8080/screenplay/models/page/main_page.html\"},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:44.444Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.444Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.445Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.445Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:44.445Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:44.446Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:44.446Z INFO webdriver: COMMAND switchToFrame(null)\n[0-0] 2025-02-07T00:21:44.446Z INFO webdriver: [POST] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/frame\n[0-0] 2025-02-07T00:21:44.446Z INFO webdriver: DATA { id: null }\n[0-0] 2025-02-07T00:21:44.448Z INFO webdriver: RESULT null\n[0-0] 2025-02-07T00:21:44.459Z INFO webdriver: BIDI COMMAND browsingContext.navigate {\"context\":\"D431D8B40A98935E2BC0DF76AF81E0AF\",\"url\":\"http://localhost:8080/screenplay/models/page/main_page.html#example\",\"wait\":\"complete\"}\n[0-0] 2025-02-07T00:21:44.461Z INFO webdriver: BIDI RESULT {\"id\":13,\"result\":{\"navigation\":\"c134f8ed-76e2-4358-92ef-12684b8d040f\",\"url\":\"http://localhost:8080/screenplay/models/page/main_page.html#example\"},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:54.467Z INFO webdriver: COMMAND getWindowHandles()\n[0-0] 2025-02-07T00:21:54.468Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window/handles\n[0-0] 2025-02-07T00:21:54.472Z INFO webdriver: RESULT [ 'D431D8B40A98935E2BC0DF76AF81E0AF' ]\n[0-0] 2025-02-07T00:21:54.472Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:54.472Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:54.475Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:54.475Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:54.476Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:54.476Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:54.477Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[131 bytes] anonymous>\",\"awaitPromise\":true,\"arguments\":[],\"target\":{\"context\":\"D431D8B40A98935E2BC0DF76AF81E0AF\"}}\n[0-0] 2025-02-07T00:21:54.480Z INFO webdriver: BIDI RESULT {\"id\":14,\"result\":{\"realm\":\"3369878203305039942.-2051981981596534914\",\"result\":{\"type\":\"string\",\"value\":\"http://localhost:8080/screenplay/models/page/main_page.html#example\"},\"type\":\"success\"},\"type\":\"success\"}\n[0-0] 2025-02-07T00:21:54.480Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:54.480Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:54.481Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:54.481Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:54.481Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:54.482Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:54.482Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:54.483Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:54.483Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:54.495Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:54.495Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:54.496Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:54.496Z INFO webdriver: COMMAND getWindowHandles()\n[0-0] 2025-02-07T00:21:54.496Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window/handles\n[0-0] 2025-02-07T00:21:54.497Z INFO webdriver: RESULT [ 'D431D8B40A98935E2BC0DF76AF81E0AF' ]\n[0-0] 2025-02-07T00:21:54.497Z INFO webdriver: COMMAND getWindowHandle()\n[0-0] 2025-02-07T00:21:54.497Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window\n[0-0] 2025-02-07T00:21:54.498Z INFO webdriver: RESULT D431D8B40A98935E2BC0DF76AF81E0AF\n[0-0] 2025-02-07T00:21:54.521Z INFO webdriver: COMMAND getWindowHandles()\n[0-0] 2025-02-07T00:21:54.521Z INFO webdriver: [GET] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331/window/handles\n[0-0] 2025-02-07T00:21:54.523Z INFO webdriver: RESULT [ 'D431D8B40A98935E2BC0DF76AF81E0AF' ]\n[0-0] Error in \"Page when managing the page current() url() () fails to navigate to url with a hash (plain WDIO)\"\nError: Navigation to 'http://localhost:8080/screenplay/models/page/main_page.html#example' timed out as no request payload was received\n    at <anonymous> (/Users/jan/Projects/serenity-js/serenity-js/node_modules/.pnpm/webdriverio@9.7.2/node_modules/webdriverio/build/node.js:5576:15)\n    at async Browser.wrapCommandFn (/Users/jan/Projects/serenity-js/serenity-js/node_modules/.pnpm/@wdio+utils@9.7.2/node_modules/@wdio/utils/build/index.js:893:23)\n    at async Browser.url (/Users/jan/Projects/serenity-js/serenity-js/node_modules/.pnpm/webdriverio@9.7.2/node_modules/webdriverio/build/node.js:5538:21)\n    at async Browser.wrapCommandFn (/Users/jan/Projects/serenity-js/serenity-js/node_modules/.pnpm/@wdio+utils@9.7.2/node_modules/@wdio/utils/build/index.js:893:23)\n    at async Context.<anonymous> (/Users/jan/Projects/serenity-js/serenity-js/integration/web-specs/spec/screenplay/models/Page.spec.ts:100:21)\n[0-0] 2025-02-07T00:21:54.631Z INFO webdriver: COMMAND deleteSession()\n[0-0] 2025-02-07T00:21:54.631Z INFO webdriver: [DELETE] http://localhost:60570/session/e50f67e5504cae8ec5c0b7656ed3e331\n[0-0] 2025-02-07T00:21:54.687Z INFO webdriver: RESULT null\n[0-0] 2025-02-07T00:21:54.687Z INFO webdriver: Close Bidi connection to ws://127.0.0.1:60570/session/e50f67e5504cae8ec5c0b7656ed3e331\n[0-0] 2025-02-07T00:21:54.687Z INFO webdriver: Kill driver process with PID 16973\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 3070,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "e2e/wdio/headless/test.e2e.ts",
      "packages/webdriverio/src/commands/browser/url.ts",
      "packages/webdriverio/src/session/networkManager.ts"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/test.e2e.ts"
    ],
    "base_commit": "292e40acae161effb13259ca8cf53b521a16bce2",
    "head_commit": "82d45931d0bfd5780ea634909daa67a5802f9bb9",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14196",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14196",
    "dockerfile": "",
    "pr_merged_at": "2025-02-18T18:43:58.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/url.ts b/packages/webdriverio/src/commands/browser/url.ts\nindex ad8f24c2b84..95d8a8da5c3 100644\n--- a/packages/webdriverio/src/commands/browser/url.ts\n+++ b/packages/webdriverio/src/commands/browser/url.ts\n@@ -12,7 +12,9 @@ const DEFAULT_WAIT_STATE = 'complete'\n  *\n  * The `url` command loads an URL in the browser. If a baseUrl is specified in the config,\n  * it will be prepended to the url parameter using node's url.resolve() method. Calling\n- * `browser.url('...')` with the same url as last time will trigger a page reload.\n+ * `browser.url('...')` with the same url as last time will trigger a page reload. However,\n+ * if the url contains a hash, the browser will not trigger a new navigation and the user\n+ * has to [refresh](/docs/api/webdriver#refresh) the page to trigger one.\n  *\n  * The command returns an `WebdriverIO.Request` object that contains information about the\n  * request and response data of the page load.\n\ndiff --git a/packages/webdriverio/src/session/networkManager.ts b/packages/webdriverio/src/session/networkManager.ts\nindex ba38b4afd76..cd8af40bbbd 100644\n--- a/packages/webdriverio/src/session/networkManager.ts\n+++ b/packages/webdriverio/src/session/networkManager.ts\n@@ -217,6 +217,20 @@ export class NetworkManager extends SessionManager {\n     }\n \n     getRequestResponseData(navigationId: string) {\n+        /**\n+         * In case the user reloads the page with a hash, we need to return the last request\n+         * as there was no new navigation.\n+         */\n+        if (!this.#requests.has(navigationId)) {\n+            const lastRequest = Array.from(this.#requests.values()).pop()\n+            if (!lastRequest) {\n+                return undefined\n+            }\n+            const lastRequestUrl = new URL(lastRequest.url)\n+            if (lastRequestUrl.hash !== '') {\n+                return lastRequest\n+            }\n+        }\n         return this.#requests.get(navigationId)\n     }\n \n",
    "test_patch": "diff --git a/e2e/wdio/headless/test.e2e.ts b/e2e/wdio/headless/test.e2e.ts\nindex 29ab293ae35..66c8e667ef0 100644\n--- a/e2e/wdio/headless/test.e2e.ts\n+++ b/e2e/wdio/headless/test.e2e.ts\n@@ -679,4 +679,24 @@ describe('main suite 1', () => {\n             await expect(browser).toHaveTitle('About Version')\n         })\n     })\n+\n+    describe('reloading applications with different strategies', () => {\n+        const scenarions = {\n+            nothing: ['', '1'],\n+            query: ['?foo=bar', '1'],\n+            hash: ['#reloadCounter', '0']\n+        }\n+        for (const [name, [value, expected]] of Object.entries(scenarions)) {\n+            it(`reloads with ${name}`, async () => {\n+                const url = `https://guinea-pig.webdriver.io/reloadCounter.html${value}`\n+                await browser.url(url)\n+                await $('#reset').click()\n+                await expect($('#counter')).toHaveValue('0')\n+                await browser.url(url)\n+                await expect($('#counter')).toHaveValue('0')\n+                await browser.url(url)\n+                await expect($('#counter')).toHaveValue(expected)\n+            })\n+        }\n+    })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14195",
    "pr_id": 14195,
    "issue_id": 14178,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: WDIO 9.4.3 and up no longer picks wdio.conf.ts config file by default, tries to use wdio.conf.js instead\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.4.3\n\n### Node.js Version\n\n22.13.1\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n\n```\n\n### What happened?\n\nWhen I migrated to using WDIO 9 from WDIO 8 using Typescript, I was happy to learn that I didn't need to specify the config file `wdio.conf.ts` file on the command line each time I ran WDIO. This was true with `@wdio-cli` 9.4.2.\n\nStarting with 9.4.3, this got broken and now the default configuration file that it is looking for is `wdio.conf.js`, which I think is backward steps since the project itself and most people are trying to move to using TypeScript instead of Javascript. The shortened error message is this:\n\n ```bash\nERROR @wdio/config:ConfigParser: Failed loading configuration file: file:///Users/ianrenauld/dev/wdio9/wdio.conf.js: Cannot find module '/Users/ianrenauld/dev/wdio9/wdio.conf.js' imported from /Users/ianrenauld/dev/wdio9/node_modules/@wdio/config/build/node/index.js\n```\n\n\n### What is your expected behavior?\n\nUsing this command-line:\n\n```bash\nnpx wdio --spec tests/simple.spec.ts\n```\n\nwill start the test properly\n\n### How to reproduce the bug.\n\nOn a WDIO 9 project (you can get my minimal project to reproduce easily here: https://github.com/ianrenauld/wdio9, but this will happen on any WDIO 9 repo using 9.4.3 and up) do:\n\n```bash\nnpx wdio --spec tests/simple.spec.ts\n```\n\nWorkaround to the bug is to specify the config file each time on the CLI:\n\n```bash\nnpx wdio wdio.conf.ts --spec tests/simple.spec.ts\n```\n\nTo see previous (working behavior), change `package.json` and set the `wdio-cli` line to this:\n\n```bash\n    \"@wdio/cli\": \"9.4.2\",\n```\n\nDo `npm install` and try running again without specifying the config file, it will work.\n\n\n### Relevant log output\n\n```typescript\n2025-02-11T21:52:38.093Z ERROR @wdio/config:ConfigParser: Failed loading configuration file: file:///Users/ianrenauld/dev/wdio9/wdio.conf.js: Cannot find module '/Users/ianrenauld/dev/wdio9/wdio.conf.js' imported from /Users/ianrenauld/dev/wdio9/node_modules/@wdio/config/build/node/index.js\nError [ERR_MODULE_NOT_FOUND]: Cannot find module '/Users/ianrenauld/dev/wdio9/wdio.conf.js' imported from /Users/ianrenauld/dev/wdio9/node_modules/@wdio/config/build/node/index.js\n    at finalizeResolution (node:internal/modules/esm/resolve:275:11)\n    at moduleResolve (node:internal/modules/esm/resolve:932:10)\n    at defaultResolve (node:internal/modules/esm/resolve:1056:11)\n    at ModuleLoader.defaultResolve (node:internal/modules/esm/loader:654:12)\n    at #cachedDefaultResolve (node:internal/modules/esm/loader:603:25)\n    at ModuleLoader.resolve (node:internal/modules/esm/loader:586:38)\n    at ModuleLoader.getModuleJobForImport (node:internal/modules/esm/loader:242:38)\n    at onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:546:36)\n    at TracingChannel.tracePromise (node:diagnostics_channel:344:14)\n    at ModuleLoader.import (node:internal/modules/esm/loader:545:21) {\n  code: 'ERR_MODULE_NOT_FOUND',\n  url: 'file:///Users/ianrenauld/dev/wdio9/wdio.conf.js'\n}\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 557,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/wdio-cli/src/commands/config.ts",
      "packages/wdio-cli/src/commands/run.ts",
      "packages/wdio-cli/tests/commands/run.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-cli/tests/commands/run.test.ts"
    ],
    "base_commit": "292e40acae161effb13259ca8cf53b521a16bce2",
    "head_commit": "f9691ea4c62ed5021440238aea76acd04806d901",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14195",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14195",
    "dockerfile": "",
    "pr_merged_at": "2025-02-18T18:33:44.000Z",
    "patch": "diff --git a/packages/wdio-cli/src/commands/config.ts b/packages/wdio-cli/src/commands/config.ts\nindex 5dad74b6324..0c802f6382e 100644\n--- a/packages/wdio-cli/src/commands/config.ts\n+++ b/packages/wdio-cli/src/commands/config.ts\n@@ -214,7 +214,6 @@ export async function canAccessConfigPath(configPath: string) {\n  * @param {Function} runConfigCmd   runConfig method to be replaceable for unit testing\n  */\n export async function missingConfigurationPrompt(command: string, configPath: string, runConfigCmd = runConfigCommand) {\n-\n     const message = (\n         `Could not execute \"${command}\" due to missing configuration, file ` +\n         `\"${path.parse(configPath).name}[.js/.ts]\" not found! ` +\n@@ -236,9 +235,13 @@ export async function missingConfigurationPrompt(command: string, configPath: st\n         console.log(`No WebdriverIO configuration found in \"${process.cwd()}\"`)\n \n         /* istanbul ignore next */\n-        return !process.env.WDIO_UNIT_TESTS && process.exit(0)\n+        if (!process.env.WDIO_UNIT_TESTS) {\n+            process.exit(0)\n+        }\n+        return configPath\n     }\n \n     const parsedAnswers = await parseAnswers(false)\n     await runConfigCmd(parsedAnswers, 'latest')\n+    return configPath\n }\n\ndiff --git a/packages/wdio-cli/src/commands/run.ts b/packages/wdio-cli/src/commands/run.ts\nindex ad8677dd0c2..f84309eb08e 100644\n--- a/packages/wdio-cli/src/commands/run.ts\n+++ b/packages/wdio-cli/src/commands/run.ts\n@@ -180,6 +180,11 @@ export async function handler(argv: RunCommandArguments) {\n     if (!confAccess) {\n         try {\n             await missingConfigurationPrompt('run', wdioConf.fullPathNoExtension)\n+            if (process.env.WDIO_UNIT_TESTS) {\n+                return\n+            }\n+\n+            return handler(argv)\n         } catch {\n             process.exit(1)\n         }\n@@ -196,7 +201,7 @@ export async function handler(argv: RunCommandArguments) {\n         process.env.TSX_TSCONFIG_PATH && path.resolve(process.cwd(), process.env.TSX_TSCONFIG_PATH)\n     )\n     const tsConfigPathFromParams = params.tsConfigPath && path.resolve(process.cwd(), params.tsConfigPath)\n-    const tsConfigPathRelativeToWdioConfig = path.join(path.dirname(wdioConf.fullPath), 'tsconfig.json')\n+    const tsConfigPathRelativeToWdioConfig = path.join(path.dirname(confAccess), 'tsconfig.json')\n     const localTSConfigPath = (\n         tsConfigPathFromEnvVar ||\n         tsConfigPathFromParams ||\n@@ -211,7 +216,7 @@ export async function handler(argv: RunCommandArguments) {\n      * if `--watch` param is set, run launcher in watch mode\n      */\n     if (params.watch) {\n-        const watcher = new Watcher(wdioConf.fullPath, params)\n+        const watcher = new Watcher(confAccess, params)\n         return watcher.watch()\n     }\n \n@@ -223,12 +228,12 @@ export async function handler(argv: RunCommandArguments) {\n      * stdin.isTTY is false when command is from nodes spawn since it's treated as a pipe\n      */\n     if (process.stdin.isTTY || !process.stdout.isTTY) {\n-        return launch(wdioConf.fullPath, params)\n+        return launch(confAccess, params)\n     }\n \n     /*\n      * get a list of spec files to run from stdin, overriding any other\n      * configuration suite or specs.\n      */\n-    launchWithStdin(wdioConf.fullPath, params)\n+    launchWithStdin(confAccess, params)\n }\n",
    "test_patch": "diff --git a/packages/wdio-cli/tests/commands/run.test.ts b/packages/wdio-cli/tests/commands/run.test.ts\nindex cf68912df0f..32d6b37f7db 100644\n--- a/packages/wdio-cli/tests/commands/run.test.ts\n+++ b/packages/wdio-cli/tests/commands/run.test.ts\n@@ -65,6 +65,12 @@ describe('Command: run', () => {\n             .toContain('sample.conf')\n     })\n \n+    it('should check for js and ts default config files', async () => {\n+        vi.mocked(fs.access).mockRejectedValueOnce('not found')\n+        const result = await runCmd.handler({ configPath: 'sample.conf.js' } as any)\n+        expect(result).toContain('sample.conf.ts')\n+    })\n+\n     it('should use local conf if nothing defined', async () => {\n         const launcher = await runCmd.handler({ argv: {} } as any)\n         expect(launcher).toContain('wdio.conf.js')\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14185",
    "pr_id": 14185,
    "issue_id": 14175,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: toMatchSnapshot doesn't work with Cucumber runner\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\nv20.18.2\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\nNothing beyond default set by yarn create\n```\n\n### What happened?\n\nI tried to make snapshots work with Cucumber.\n\n### What is your expected behavior?\n\nI would have expected the snapshot to work, but instead I'm getting an error message.\n\n### How to reproduce the bug.\n\n1. Initialize new project with `yarn create wdio`.\n2. Select all default option, except `Cucumber` as the framework.\n3. Update generated test to use `toMatchSnapshot` as documented in https://webdriver.io/docs/snapshot/\n4. Run the tests,\n\n\n### Relevant log output\n\n```typescript\nError: Snapshot service is not initialized\n    at toMatchSnapshotHelper (file:///home/jbb/temp2/node_modules/expect-webdriverio/lib/matchers/snapshot.js:52:15)\n    at Object.toMatchSnapshot (file:///home/jbb/temp2/node_modules/expect-webdriverio/lib/matchers/snapshot.js:62:12)\n    at __EXTERNAL_MATCHER_TRAP__ (/home/jbb/temp2/node_modules/expect/build/index.js:325:30)\n    at Object.throwingMatcher [as toMatchSnapshot] (/home/jbb/temp2/node_modules/expect/build/index.js:326:15)\n    at World.<anonymous> (file:///home/jbb/temp2/features/step-definitions/steps.js:21:41)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 254,
    "test_files_count": 5,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "examples/wdio/vite-vue-example/package.json",
      "packages/wdio-browser-runner/package.json",
      "packages/wdio-globals/package.json",
      "packages/wdio-jasmine-framework/package.json",
      "packages/wdio-runner/package.json",
      "pnpm-lock.yaml",
      "tests/cucumber/__snapshots__/test.feature.snap",
      "tests/cucumber/step-definitions/given.js",
      "tests/cucumber/test.feature",
      "tests/package.json",
      "tests/typings/jasmine/package.json"
    ],
    "pr_changed_test_files": [
      "tests/cucumber/__snapshots__/test.feature.snap",
      "tests/cucumber/step-definitions/given.js",
      "tests/cucumber/test.feature",
      "tests/package.json",
      "tests/typings/jasmine/package.json"
    ],
    "base_commit": "620e092391d7bcc71cd7cd55ad146ad72e522da9",
    "head_commit": "c3a0867e6f6bca2d07fb7ed03bf08a053c664173",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14185",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14185",
    "dockerfile": "",
    "pr_merged_at": "2025-02-14T19:17:09.000Z",
    "patch": "diff --git a/examples/wdio/vite-vue-example/package.json b/examples/wdio/vite-vue-example/package.json\nindex 4fe016bccac..9f1a1d3a987 100644\n--- a/examples/wdio/vite-vue-example/package.json\n+++ b/examples/wdio/vite-vue-example/package.json\n@@ -17,7 +17,7 @@\n     \"@testing-library/vue\": \"^8.0.1\",\n     \"@types/mocha\": \"^10.0.6\",\n     \"@vitejs/plugin-vue\": \"^5.0.3\",\n-    \"expect-webdriverio\": \"5.0.5\",\n+    \"expect-webdriverio\": \"5.1.0\",\n     \"mocha\": \"^10.2.0\",\n     \"typescript\": \"^5.3.3\",\n     \"vite\": \"^5.0.12\",\n\ndiff --git a/packages/wdio-browser-runner/package.json b/packages/wdio-browser-runner/package.json\nindex 4b397b0c297..9799faa2757 100644\n--- a/packages/wdio-browser-runner/package.json\n+++ b/packages/wdio-browser-runner/package.json\n@@ -81,7 +81,7 @@\n     \"@wdio/utils\": \"workspace:*\",\n     \"deepmerge-ts\": \"^7.0.3\",\n     \"expect\": \"30.0.0-alpha.7\",\n-    \"expect-webdriverio\": \"^5.0.1\",\n+    \"expect-webdriverio\": \"^5.1.0\",\n     \"get-port\": \"^7.1.0\",\n     \"import-meta-resolve\": \"^4.0.0\",\n     \"istanbul-lib-coverage\": \"^3.2.2\",\n\ndiff --git a/packages/wdio-globals/package.json b/packages/wdio-globals/package.json\nindex cf24c17ac54..f65bf23d0f5 100644\n--- a/packages/wdio-globals/package.json\n+++ b/packages/wdio-globals/package.json\n@@ -40,7 +40,7 @@\n     \"access\": \"public\"\n   },\n   \"optionalDependencies\": {\n-    \"expect-webdriverio\": \"^5.0.1\",\n+    \"expect-webdriverio\": \"^5.1.0\",\n     \"webdriverio\": \"workspace:*\"\n   }\n }\n\ndiff --git a/packages/wdio-jasmine-framework/package.json b/packages/wdio-jasmine-framework/package.json\nindex 35961dd48fe..8a808a117a5 100644\n--- a/packages/wdio-jasmine-framework/package.json\n+++ b/packages/wdio-jasmine-framework/package.json\n@@ -39,7 +39,7 @@\n     \"@wdio/logger\": \"workspace:*\",\n     \"@wdio/types\": \"workspace:*\",\n     \"@wdio/utils\": \"workspace:*\",\n-    \"expect-webdriverio\": \"^5.0.1\",\n+    \"expect-webdriverio\": \"^5.1.0\",\n     \"jasmine\": \"^5.0.0\"\n   },\n   \"devDependencies\": {\n\ndiff --git a/packages/wdio-runner/package.json b/packages/wdio-runner/package.json\nindex 5433b19862b..bc09bf577dc 100644\n--- a/packages/wdio-runner/package.json\n+++ b/packages/wdio-runner/package.json\n@@ -39,7 +39,7 @@\n     \"@wdio/types\": \"workspace:*\",\n     \"@wdio/utils\": \"workspace:*\",\n     \"deepmerge-ts\": \"^7.0.3\",\n-    \"expect-webdriverio\": \"^5.0.1\",\n+    \"expect-webdriverio\": \"^5.1.0\",\n     \"webdriver\": \"workspace:*\",\n     \"webdriverio\": \"workspace:*\"\n   },\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex e8f6854f45b..9187e7f13bd 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -320,7 +320,7 @@ importers:\n         version: 3.4.17\n       vite:\n         specifier: ^5.1.3\n-        version: 5.4.12(@types/node@22.13.1)(terser@5.37.0)\n+        version: 5.4.12(@types/node@20.17.17)(terser@5.37.0)\n       webdriver:\n         specifier: workspace:*\n         version: link:../packages/webdriver\n@@ -437,10 +437,10 @@ importers:\n         version: 10.0.10\n       '@vitejs/plugin-vue':\n         specifier: ^5.0.3\n-        version: 5.2.1(vite@5.4.12(@types/node@22.13.1)(terser@5.37.0))(vue@3.5.13(typescript@5.7.3))\n+        version: 5.2.1(vite@5.4.12(@types/node@20.17.17)(terser@5.37.0))(vue@3.5.13(typescript@5.7.3))\n       expect-webdriverio:\n-        specifier: 5.0.5\n-        version: 5.0.5(@wdio/globals@9.8.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1))(@wdio/logger@9.4.4)(webdriverio@9.8.0(puppeteer-core@23.11.1))\n+        specifier: 5.1.0\n+        version: 5.1.0(@wdio/globals@9.9.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1))(@wdio/logger@9.4.4)(webdriverio@9.9.0(puppeteer-core@23.11.1))\n       mocha:\n         specifier: ^10.2.0\n         version: 10.8.2\n@@ -449,7 +449,7 @@ importers:\n         version: 5.7.3\n       vite:\n         specifier: ^5.0.12\n-        version: 5.4.12(@types/node@22.13.1)(terser@5.37.0)\n+        version: 5.4.12(@types/node@20.17.17)(terser@5.37.0)\n       vue-tsc:\n         specifier: ^2.0.17\n         version: 2.2.0(typescript@5.7.3)\n@@ -580,8 +580,8 @@ importers:\n         specifier: 30.0.0-alpha.7\n         version: 30.0.0-alpha.7\n       expect-webdriverio:\n-        specifier: ^5.0.1\n-        version: 5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio)\n+        specifier: ^5.1.0\n+        version: 5.1.0(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio)\n       get-port:\n         specifier: ^7.1.0\n         version: 7.1.0\n@@ -617,13 +617,13 @@ importers:\n         version: 0.5.21\n       vite:\n         specifier: ^5.4.10\n-        version: 5.4.12(@types/node@22.13.1)(terser@5.37.0)\n+        version: 5.4.12(@types/node@20.17.17)(terser@5.37.0)\n       vite-plugin-istanbul:\n         specifier: ^6.0.0\n-        version: 6.0.2(vite@5.4.12(@types/node@22.13.1)(terser@5.37.0))\n+        version: 6.0.2(vite@5.4.12(@types/node@20.17.17)(terser@5.37.0))\n       vite-plugin-top-level-await:\n         specifier: ^1.4.1\n-        version: 1.4.4(rollup@4.34.3)(vite@5.4.12(@types/node@22.13.1)(terser@5.37.0))\n+        version: 1.4.4(rollup@4.34.3)(vite@5.4.12(@types/node@20.17.17)(terser@5.37.0))\n       webdriver:\n         specifier: workspace:*\n         version: link:../webdriver\n@@ -938,8 +938,8 @@ importers:\n   packages/wdio-globals:\n     optionalDependencies:\n       expect-webdriverio:\n-        specifier: ^5.0.1\n-        version: 5.0.5(@wdio/globals@9.8.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1))(@wdio/logger@9.4.4)(webdriverio@packages+webdriverio)\n+        specifier: ^5.1.0\n+        version: 5.1.0(@wdio/globals@9.9.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1))(@wdio/logger@9.4.4)(webdriverio@packages+webdriverio)\n       webdriverio:\n         specifier: workspace:*\n         version: link:../webdriverio\n@@ -962,8 +962,8 @@ importers:\n         specifier: workspace:*\n         version: link:../wdio-utils\n       expect-webdriverio:\n-        specifier: ^5.0.1\n-        version: 5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@9.8.0(puppeteer-core@23.11.1))\n+        specifier: ^5.1.0\n+        version: 5.1.0(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@9.9.0(puppeteer-core@23.11.1))\n       jasmine:\n         specifier: ^5.0.0\n         version: 5.6.0\n@@ -1197,8 +1197,8 @@ importers:\n         specifier: ^7.0.3\n         version: 7.1.4\n       expect-webdriverio:\n-        specifier: ^5.0.1\n-        version: 5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio)\n+        specifier: ^5.1.0\n+        version: 5.1.0(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio)\n       webdriver:\n         specifier: workspace:*\n         version: link:../webdriver\n@@ -1660,8 +1660,8 @@ importers:\n         specifier: workspace:*\n         version: link:../packages/wdio-webdriver-mock-service\n       expect-webdriverio:\n-        specifier: ^5.0.1\n-        version: 5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio)\n+        specifier: ^5.1.0\n+        version: 5.1.0(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio)\n       webdriver:\n         specifier: workspace:*\n         version: link:../packages/webdriver\n@@ -1833,8 +1833,8 @@ importers:\n         specifier: workspace:*\n         version: link:../../../packages/wdio-utils\n       expect-webdriverio:\n-        specifier: ^5.0.1\n-        version: 5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@9.4.4)(webdriverio@packages+webdriverio)\n+        specifier: ^5.1.0\n+        version: 5.1.0(@wdio/globals@packages+wdio-globals)(@wdio/logger@9.4.4)(webdriverio@packages+webdriverio)\n       webdriver:\n         specifier: workspace:*\n         version: link:../../../packages/webdriver\n@@ -5967,8 +5967,8 @@ packages:\n     resolution: {integrity: sha512-8h3SO925efnyIOkKnaNbLbMnJpmvm4wfUWoo26kq8ZPU7DSQsEWvJ7EZ4Hw8RGu+kY4VO7r54ljicnnrFVh/ZA==}\n     engines: {node: '>=18.20.0'}\n \n-  '@wdio/config@9.7.3':\n-    resolution: {integrity: sha512-rWiGR0WMcUpGTTMn3XP9OzNW3WH64AcNK93b9kSwq9WzVGVIzMBCZK8LPXpdQ+pFwizq/ExIXTx/Z39kc0LCyw==}\n+  '@wdio/config@9.9.0':\n+    resolution: {integrity: sha512-TonCzSBjfk6fLV9zEvH58Opg3te4gl+VapZeShwfJWuL5T8YAWfSKIUVbb9auIEaOWx2OtOap4DK+jK9CLSTVA==}\n     engines: {node: '>=18.20.0'}\n \n   '@wdio/eslint@0.0.5':\n@@ -5978,8 +5978,8 @@ packages:\n     resolution: {integrity: sha512-IyjiS6jtCMCbDedLZNUUaI9IpGAxkItfVKlGUgQ2kNcjOYUyKf/g8MEE0m8lR50yEEVENJ4rEn9IQ+foeFIZjQ==}\n     engines: {node: '>=18.20.0'}\n \n-  '@wdio/globals@9.8.0':\n-    resolution: {integrity: sha512-W8XbOzTGQG1J1k9yAMSYtxWEGrxMQi++xdD62MsnbDU++RHiBD9ZDm8yRVPo9HoPL3Y+xovtsWbKbZ0eC4xFDQ==}\n+  '@wdio/globals@9.9.0':\n+    resolution: {integrity: sha512-5W+G6wtNYXTx32UqTkYqaZoi04i8d3OBMn6SOn2h/khDCbmPxxxYulN45vOTVZGUmag4oKDVjFuXJiD2sKVtkw==}\n     engines: {node: '>=18.20.0'}\n \n   '@wdio/logger@9.1.3':\n@@ -6008,16 +6008,16 @@ packages:\n     resolution: {integrity: sha512-ShXtWdtjmFUX1qT3c0Ldj7v9VB+2WnWpU3JxD0d+WL0W4TSQV8yFxVmwahRPvBsFO+ust4F38o6gOZEANCVhgA==}\n     engines: {node: '>=18.20.0'}\n \n-  '@wdio/types@9.6.3':\n-    resolution: {integrity: sha512-K3Lu7K5g5bsUcQV6/95XaS3jMwcGUn2pDdryYibKZafklhHjVt3o/xnw6Vgd/JzoSneCKHdwj941n+yDpTJHAw==}\n+  '@wdio/types@9.9.0':\n+    resolution: {integrity: sha512-Mh7ryL7uWKECStKcF6pWSbYkC51OemOwQR2pmvymP5HOfG74s6RVbJ+Z6Om8ffiJeTI5nZuvNDzYNkUpm7Elzg==}\n     engines: {node: '>=18.20.0'}\n \n   '@wdio/utils@9.4.3':\n     resolution: {integrity: sha512-HIA9bzqADRsTmXZDbVAX3jI0vzFXI9RJ6a92emrkANVG27etEL0KEGXDgoTbdwn7lFLkvY6xp7vY3VR1+Dux0w==}\n     engines: {node: '>=18.20.0'}\n \n-  '@wdio/utils@9.7.3':\n-    resolution: {integrity: sha512-gScYudyuq/aOmiPTz7vTvEhWtmiUMdrrzkOSQqGCQk0AMy7WpAzKM19NESPe9iPTN96i11jLJnpLOXwm2j+6LQ==}\n+  '@wdio/utils@9.9.0':\n+    resolution: {integrity: sha512-CgPE/fh4SLTZmQZO99/B/swrQ8uwaavlVfeUtxQ5iZ5rTpXKx+V4ScCSuU0qX5Kwm9e1ZG6ALuzDTo8zQ1gJ4w==}\n     engines: {node: '>=18.20.0'}\n \n   '@webassemblyjs/ast@1.14.1':\n@@ -8189,8 +8189,8 @@ packages:\n     resolution: {integrity: sha512-bFi65yM+xZgk+u/KRIpekdSYkTB5W1pEf0Lt8Q8Msh7b+eQ7LXVtIB1Bkm4fvclDEL1b2CZkMhv2mOeF8tMdkA==}\n     engines: {node: '>=12.0.0'}\n \n-  expect-webdriverio@5.0.5:\n-    resolution: {integrity: sha512-h04OGd7ZksVj8bgv3bYdjFpmJuKeCnyRrBmpMxYpMDmYSspxg9vsSr0kD5p9oOM16bX0ZXEVXr42RbI2hoLpTw==}\n+  expect-webdriverio@5.1.0:\n+    resolution: {integrity: sha512-4u3q+Dqx/lXNgvCx1gKia4CfS28z1UxGGfVUkoMNbrsBlTBB2fYqXG+4+YtYoerxvp/XPwIb/+89IGEdyPbDXQ==}\n     engines: {node: '>=18 || >=20 || >=22'}\n     peerDependencies:\n       '@wdio/globals': ^9.0.0\n@@ -13701,8 +13701,8 @@ packages:\n     resolution: {integrity: sha512-aZrJq+FwJFrrSX18PHqFK3iEw+Pdu/cvJwgIiuur4/ffP47jrirwCqabCVaIV3eut+mJBc1nY7IV3Jd3i4MekQ==}\n     engines: {node: '>=18.20.0'}\n \n-  webdriver@9.7.3:\n-    resolution: {integrity: sha512-Mpi277WKw37Yg5xZ0MT2BcG/Q/5Y5reYA0wDXOMldVI1nLxA7eOzAvsBA8NpjPbi/+yZijZhNMrXRAtQ5Eu8NQ==}\n+  webdriver@9.9.0:\n+    resolution: {integrity: sha512-vrT7KW3Gh6tW9GYT9rl6m/4KH/jCxT4mlLGbAOIaA42I3FQi61AReH7M0hur4BsJ8ZpjXukIMc3xlFR6vTgM2w==}\n     engines: {node: '>=18.20.0'}\n \n   webdriverio@9.4.3:\n@@ -13714,8 +13714,8 @@ packages:\n       puppeteer-core:\n         optional: true\n \n-  webdriverio@9.8.0:\n-    resolution: {integrity: sha512-30qTo27eNrqQTFGjzPYarAXD1aJ2fD5J+r+TUfLM3Ozlai6AuqbicLv4ysM8StfvN44jwyN+av/R3ul4SGaFjg==}\n+  webdriverio@9.9.0:\n+    resolution: {integrity: sha512-jT7avwQAAgVopJSyFkn8j/Pwpmum0q0q+1cMLWXhc2LlAZj2qpclQ6qxt0P5SYY40WzHYhoZbXu3/QI9sxjPNQ==}\n     engines: {node: '>=18.20.0'}\n     peerDependencies:\n       puppeteer-core: ^22.3.0\n@@ -19471,9 +19471,9 @@ snapshots:\n     transitivePeerDependencies:\n       - supports-color\n \n-  '@vitejs/plugin-vue@5.2.1(vite@5.4.12(@types/node@22.13.1)(terser@5.37.0))(vue@3.5.13(typescript@5.7.3))':\n+  '@vitejs/plugin-vue@5.2.1(vite@5.4.12(@types/node@20.17.17)(terser@5.37.0))(vue@3.5.13(typescript@5.7.3))':\n     dependencies:\n-      vite: 5.4.12(@types/node@22.13.1)(terser@5.37.0)\n+      vite: 5.4.12(@types/node@20.17.17)(terser@5.37.0)\n       vue: 3.5.13(typescript@5.7.3)\n \n   '@vitejs/plugin-vue@5.2.1(vite@5.4.14(@types/node@20.17.17)(terser@5.37.0))(vue@3.5.13(typescript@5.7.3))':\n@@ -19685,11 +19685,11 @@ snapshots:\n     transitivePeerDependencies:\n       - supports-color\n \n-  '@wdio/config@9.7.3':\n+  '@wdio/config@9.9.0':\n     dependencies:\n       '@wdio/logger': 9.4.4\n-      '@wdio/types': 9.6.3\n-      '@wdio/utils': 9.7.3\n+      '@wdio/types': 9.9.0\n+      '@wdio/utils': 9.9.0\n       deepmerge-ts: 7.1.4\n       glob: 10.4.5\n       import-meta-resolve: 4.1.0\n@@ -19714,7 +19714,7 @@ snapshots:\n \n   '@wdio/globals@9.4.3(@wdio/logger@9.1.3)(puppeteer-core@23.11.1)':\n     optionalDependencies:\n-      expect-webdriverio: 5.0.5(@wdio/globals@9.4.3(@wdio/logger@9.1.3)(puppeteer-core@23.11.1))(@wdio/logger@9.1.3)(webdriverio@9.4.3(puppeteer-core@23.11.1))\n+      expect-webdriverio: 5.1.0(@wdio/globals@9.4.3(@wdio/logger@9.1.3)(puppeteer-core@23.11.1))(@wdio/logger@9.1.3)(webdriverio@9.4.3(puppeteer-core@23.11.1))\n       webdriverio: 9.4.3(puppeteer-core@23.11.1)\n     transitivePeerDependencies:\n       - '@wdio/logger'\n@@ -19723,10 +19723,10 @@ snapshots:\n       - supports-color\n       - utf-8-validate\n \n-  '@wdio/globals@9.8.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1)':\n+  '@wdio/globals@9.9.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1)':\n     optionalDependencies:\n-      expect-webdriverio: 5.0.5(@wdio/globals@9.8.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1))(@wdio/logger@9.4.4)(webdriverio@9.8.0(puppeteer-core@23.11.1))\n-      webdriverio: 9.8.0(puppeteer-core@23.11.1)\n+      expect-webdriverio: 5.1.0(@wdio/globals@9.9.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1))(@wdio/logger@9.4.4)(webdriverio@9.9.0(puppeteer-core@23.11.1))\n+      webdriverio: 9.9.0(puppeteer-core@23.11.1)\n     transitivePeerDependencies:\n       - '@wdio/logger'\n       - bare-buffer\n@@ -19765,7 +19765,7 @@ snapshots:\n     dependencies:\n       '@types/node': 20.17.17\n \n-  '@wdio/types@9.6.3':\n+  '@wdio/types@9.9.0':\n     dependencies:\n       '@types/node': 20.17.17\n \n@@ -19787,11 +19787,11 @@ snapshots:\n     transitivePeerDependencies:\n       - supports-color\n \n-  '@wdio/utils@9.7.3':\n+  '@wdio/utils@9.9.0':\n     dependencies:\n       '@puppeteer/browsers': 2.7.1\n       '@wdio/logger': 9.4.4\n-      '@wdio/types': 9.6.3\n+      '@wdio/types': 9.9.0\n       decamelize: 6.0.0\n       deepmerge-ts: 7.1.4\n       edgedriver: 6.1.1\n@@ -22367,9 +22367,9 @@ snapshots:\n \n   expect-type@1.1.0: {}\n \n-  expect-webdriverio@5.0.5(@wdio/globals@9.4.3(@wdio/logger@9.1.3)(puppeteer-core@23.11.1))(@wdio/logger@9.1.3)(webdriverio@9.4.3(puppeteer-core@23.11.1)):\n+  expect-webdriverio@5.1.0(@wdio/globals@9.4.3(@wdio/logger@9.1.3)(puppeteer-core@23.11.1))(@wdio/logger@9.1.3)(webdriverio@9.4.3(puppeteer-core@23.11.1)):\n     dependencies:\n-      '@vitest/snapshot': 2.1.8\n+      '@vitest/snapshot': 2.1.9\n       '@wdio/globals': 9.4.3(@wdio/logger@9.1.3)(puppeteer-core@23.11.1)\n       '@wdio/logger': 9.1.3\n       expect: 29.7.0\n@@ -22378,20 +22378,20 @@ snapshots:\n       webdriverio: 9.4.3(puppeteer-core@23.11.1)\n     optional: true\n \n-  expect-webdriverio@5.0.5(@wdio/globals@9.8.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1))(@wdio/logger@9.4.4)(webdriverio@9.8.0(puppeteer-core@23.11.1)):\n+  expect-webdriverio@5.1.0(@wdio/globals@9.9.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1))(@wdio/logger@9.4.4)(webdriverio@9.9.0(puppeteer-core@23.11.1)):\n     dependencies:\n-      '@vitest/snapshot': 2.1.8\n-      '@wdio/globals': 9.8.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1)\n+      '@vitest/snapshot': 2.1.9\n+      '@wdio/globals': 9.9.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1)\n       '@wdio/logger': 9.4.4\n       expect: 29.7.0\n       jest-matcher-utils: 29.7.0\n       lodash.isequal: 4.5.0\n-      webdriverio: 9.8.0(puppeteer-core@23.11.1)\n+      webdriverio: 9.9.0(puppeteer-core@23.11.1)\n \n-  expect-webdriverio@5.0.5(@wdio/globals@9.8.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1))(@wdio/logger@9.4.4)(webdriverio@packages+webdriverio):\n+  expect-webdriverio@5.1.0(@wdio/globals@9.9.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1))(@wdio/logger@9.4.4)(webdriverio@packages+webdriverio):\n     dependencies:\n-      '@vitest/snapshot': 2.1.8\n-      '@wdio/globals': 9.8.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1)\n+      '@vitest/snapshot': 2.1.9\n+      '@wdio/globals': 9.9.0(@wdio/logger@9.4.4)(puppeteer-core@23.11.1)\n       '@wdio/logger': 9.4.4\n       expect: 29.7.0\n       jest-matcher-utils: 29.7.0\n@@ -22399,9 +22399,9 @@ snapshots:\n       webdriverio: link:packages/webdriverio\n     optional: true\n \n-  expect-webdriverio@5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@9.4.4)(webdriverio@packages+webdriverio):\n+  expect-webdriverio@5.1.0(@wdio/globals@packages+wdio-globals)(@wdio/logger@9.4.4)(webdriverio@packages+webdriverio):\n     dependencies:\n-      '@vitest/snapshot': 2.1.8\n+      '@vitest/snapshot': 2.1.9\n       '@wdio/globals': link:packages/wdio-globals\n       '@wdio/logger': 9.4.4\n       expect: 29.7.0\n@@ -22409,19 +22409,19 @@ snapshots:\n       lodash.isequal: 4.5.0\n       webdriverio: link:packages/webdriverio\n \n-  expect-webdriverio@5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@9.8.0(puppeteer-core@23.11.1)):\n+  expect-webdriverio@5.1.0(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@9.9.0(puppeteer-core@23.11.1)):\n     dependencies:\n-      '@vitest/snapshot': 2.1.8\n+      '@vitest/snapshot': 2.1.9\n       '@wdio/globals': link:packages/wdio-globals\n       '@wdio/logger': link:packages/wdio-logger\n       expect: 29.7.0\n       jest-matcher-utils: 29.7.0\n       lodash.isequal: 4.5.0\n-      webdriverio: 9.8.0(puppeteer-core@23.11.1)\n+      webdriverio: 9.9.0(puppeteer-core@23.11.1)\n \n-  expect-webdriverio@5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio):\n+  expect-webdriverio@5.1.0(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio):\n     dependencies:\n-      '@vitest/snapshot': 2.1.8\n+      '@vitest/snapshot': 2.1.9\n       '@wdio/globals': link:packages/wdio-globals\n       '@wdio/logger': link:packages/wdio-logger\n       expect: 29.7.0\n@@ -28983,7 +28983,7 @@ snapshots:\n       - supports-color\n       - terser\n \n-  vite-plugin-istanbul@6.0.2(vite@5.4.12(@types/node@22.13.1)(terser@5.37.0)):\n+  vite-plugin-istanbul@6.0.2(vite@5.4.12(@types/node@20.17.17)(terser@5.37.0)):\n     dependencies:\n       '@istanbuljs/load-nyc-config': 1.1.0\n       espree: 10.3.0\n@@ -28991,16 +28991,16 @@ snapshots:\n       picocolors: 1.1.1\n       source-map: 0.7.4\n       test-exclude: 6.0.0\n-      vite: 5.4.12(@types/node@22.13.1)(terser@5.37.0)\n+      vite: 5.4.12(@types/node@20.17.17)(terser@5.37.0)\n     transitivePeerDependencies:\n       - supports-color\n \n-  vite-plugin-top-level-await@1.4.4(rollup@4.34.3)(vite@5.4.12(@types/node@22.13.1)(terser@5.37.0)):\n+  vite-plugin-top-level-await@1.4.4(rollup@4.34.3)(vite@5.4.12(@types/node@20.17.17)(terser@5.37.0)):\n     dependencies:\n       '@rollup/plugin-virtual': 3.0.2(rollup@4.34.3)\n       '@swc/core': 1.10.1\n       uuid: 10.0.0\n-      vite: 5.4.12(@types/node@22.13.1)(terser@5.37.0)\n+      vite: 5.4.12(@types/node@20.17.17)(terser@5.37.0)\n     transitivePeerDependencies:\n       - '@swc/helpers'\n       - rollup\n@@ -29013,13 +29013,13 @@ snapshots:\n       source-map: 0.7.4\n       stack-trace: 1.0.0-pre2\n \n-  vite@5.4.12(@types/node@22.13.1)(terser@5.37.0):\n+  vite@5.4.12(@types/node@20.17.17)(terser@5.37.0):\n     dependencies:\n       esbuild: 0.21.5\n       postcss: 8.5.1\n       rollup: 4.31.0\n     optionalDependencies:\n-      '@types/node': 22.13.1\n+      '@types/node': 20.17.17\n       fsevents: 2.3.3\n       terser: 5.37.0\n \n@@ -29145,15 +29145,15 @@ snapshots:\n       - supports-color\n       - utf-8-validate\n \n-  webdriver@9.7.3:\n+  webdriver@9.9.0:\n     dependencies:\n       '@types/node': 20.17.17\n       '@types/ws': 8.5.14\n-      '@wdio/config': 9.7.3\n+      '@wdio/config': 9.9.0\n       '@wdio/logger': 9.4.4\n       '@wdio/protocols': 9.7.0\n-      '@wdio/types': 9.6.3\n-      '@wdio/utils': 9.7.3\n+      '@wdio/types': 9.9.0\n+      '@wdio/utils': 9.9.0\n       deepmerge-ts: 7.1.4\n       undici: 6.21.1\n       ws: 8.18.0\n@@ -29199,16 +29199,16 @@ snapshots:\n       - supports-color\n       - utf-8-validate\n \n-  webdriverio@9.8.0(puppeteer-core@23.11.1):\n+  webdriverio@9.9.0(puppeteer-core@23.11.1):\n     dependencies:\n       '@types/node': 20.17.17\n       '@types/sinonjs__fake-timers': 8.1.5\n-      '@wdio/config': 9.7.3\n+      '@wdio/config': 9.9.0\n       '@wdio/logger': 9.4.4\n       '@wdio/protocols': 9.7.0\n       '@wdio/repl': 9.4.4\n-      '@wdio/types': 9.6.3\n-      '@wdio/utils': 9.7.3\n+      '@wdio/types': 9.9.0\n+      '@wdio/utils': 9.9.0\n       archiver: 7.0.1\n       aria-query: 5.3.2\n       cheerio: 1.0.0\n@@ -29216,18 +29216,16 @@ snapshots:\n       css-value: 0.0.1\n       grapheme-splitter: 1.0.4\n       htmlfy: 0.6.0\n-      import-meta-resolve: 4.1.0\n       is-plain-obj: 4.1.0\n       jszip: 3.10.1\n       lodash.clonedeep: 4.5.0\n       lodash.zip: 4.2.0\n-      minimatch: 9.0.5\n       query-selector-shadow-dom: 1.0.1\n       resq: 1.11.0\n       rgb2hex: 0.2.5\n       serialize-error: 11.0.3\n       urlpattern-polyfill: 10.0.0\n-      webdriver: 9.7.3\n+      webdriver: 9.9.0\n     optionalDependencies:\n       puppeteer-core: 23.11.1\n     transitivePeerDependencies:\n",
    "test_patch": "diff --git a/tests/cucumber/__snapshots__/test.feature.snap b/tests/cucumber/__snapshots__/test.feature.snap\nnew file mode 100644\nindex 00000000000..06934415ec8\n--- /dev/null\n+++ b/tests/cucumber/__snapshots__/test.feature.snap\n@@ -0,0 +1,7 @@\n+// Snapshot v1\n+\n+exports[`Using Snapshot matcher in Cucumber works > I use the snapshot matcher 1`] = `\n+{\n+  \"foo\": \"bar\",\n+}\n+`;\n\ndiff --git a/tests/cucumber/step-definitions/given.js b/tests/cucumber/step-definitions/given.js\nindex 4470fe74562..41003f5949a 100644\n--- a/tests/cucumber/step-definitions/given.js\n+++ b/tests/cucumber/step-definitions/given.js\n@@ -92,3 +92,7 @@ Given('this is ambiguous', () => {\n Given('this is a step with timeout', { timeout: 6000 }, async () => {\n     await browser.pause(5500)\n })\n+\n+Given('I use the snapshot matcher', async () => {\n+    await expect({ foo: 'bar' }).toMatchSnapshot()\n+})\n\ndiff --git a/tests/cucumber/test.feature b/tests/cucumber/test.feature\nindex de4736e6ef1..ff3006401a1 100644\n--- a/tests/cucumber/test.feature\n+++ b/tests/cucumber/test.feature\n@@ -53,3 +53,7 @@ Feature: Example feature\n \n     Scenario: timeout step\n         Then this is a step with timeout\n+\n+    Scenario: Using Snapshot matcher in Cucumber works\n+        # Test is simply to make sure snapshot matcher doesn't fail\n+        When I use the snapshot matcher\n\ndiff --git a/tests/package.json b/tests/package.json\nindex cf7e424d154..367b69382ec 100644\n--- a/tests/package.json\n+++ b/tests/package.json\n@@ -3,7 +3,7 @@\n   \"private\": true,\n   \"type\": \"module\",\n   \"dependencies\": {\n-    \"expect-webdriverio\": \"^5.0.1\",\n+    \"expect-webdriverio\": \"^5.1.0\",\n     \"webdriver\": \"workspace:*\",\n     \"webdriverio\": \"workspace:*\",\n     \"@wdio/cli\": \"workspace:*\",\n\ndiff --git a/tests/typings/jasmine/package.json b/tests/typings/jasmine/package.json\nindex 29273966300..259800340f8 100644\n--- a/tests/typings/jasmine/package.json\n+++ b/tests/typings/jasmine/package.json\n@@ -25,7 +25,7 @@\n     \"@wdio/static-server-service\": \"workspace:*\",\n     \"@wdio/sumologic-reporter\": \"workspace:*\",\n     \"@wdio/testingbot-service\": \"workspace:*\",\n-    \"expect-webdriverio\": \"^5.0.1\",\n+    \"expect-webdriverio\": \"^5.1.0\",\n     \"webdriver\": \"workspace:*\",\n     \"webdriverio\": \"workspace:*\"\n   }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14184",
    "pr_id": 14184,
    "issue_id": 14082,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: `switchFrame(selector)` tries to wait for a delayed iframe - but fails\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.5.7\n\n### Node.js Version\n\n20.15.1\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\ncapabilities: [{\n    browserName: 'chrome'\n}, {\n    browserName: 'firefox'\n}],\n```\n\n### What happened?\n\nI have an Iframe that is inserted to the dom at some point.\nI use `browser.switchFrame` to switch to that iframe.\n\nI found out, that switchFrame seems to wait for the iframe to appear, but then it fails anyway.\nI can see that, because switchFrame takes longer, the longer it takes to load the iframe.\nIn the same moment the iframe appears, switchFrame fails.\n\n```ts\n    it(`(almost) waits automatically for delayedIframe`, async () => {\n        await expect( () => browser.switchFrame(delayedIframe())).rejects.toThrow();\n        \n        // this means, that switchFrame waited, but failed anyway.\n        await expect(delayedIframe()).toExist({wait:0});\n        await expect(h1()).toHaveText(\"Delayed Iframe\"); // still in parent frame\n    });\n```\n\nI tried to create a helper function, that wraps `browser.switchFrame` and additionally waits using `.waitForExist`.\nBut this fails with different errors in chrome and firefox:\n\n* firefox: `WebDriver Bidi command \"script.callFunction\" failed with error: invalid argument - Expected \"type\" to be a string, got \n[object Undefined] undefined`\n* chrome: `WebDriver Bidi command \"script.callFunction\" failed with error: invalid argument - Invalid input in \"arguments\"/0.`\n\n```ts\n    it(`should let us use our custom switchFrame to wait for delayedIframe`, async () => {\n        await switchFrame(delayedIframe());\n        await expect(h1()).toHaveText(\"Delayed Inner Iframe\");\n    });\n    async function switchFrame(sel: ChainablePromiseElement) {\n        await sel.waitForExist();\n        await browser.switchFrame(sel);\n    }\n```\n\n### What is your expected behavior?\n\nSince we are almost there, I think `browser.switchFrame` should not fail, but properly switch the frame, after it waited.\n\nWell, and I think it should be possible to pass a selector to another function and use it there.\n\n### How to reproduce the bug.\n\nI created a repository that I can reuse to report bugs: https://github.com/htho/wdio-repro-collection\n\n1. `git clone https://github.com/htho/wdio-repro-collection.git`\n2. `cd wdio-repro-collection`\n3. `npm ci`\n4. `npm run test:delayedIframe`\n\n### Relevant log output\n\n```typescript\nI included error messages above, the other messages can be reproduced in the repository.\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 408,
    "test_files_count": 3,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/wdio-webdriver-mock-service/src/index.ts",
      "packages/webdriverio/src/commands/element/waitForExist.ts",
      "packages/webdriverio/tests/commands/browser/action.test.ts",
      "packages/webdriverio/tests/commands/element/dragAndDrop.test.ts",
      "tests/mocha/test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/browser/action.test.ts",
      "packages/webdriverio/tests/commands/element/dragAndDrop.test.ts",
      "tests/mocha/test.ts"
    ],
    "base_commit": "620e092391d7bcc71cd7cd55ad146ad72e522da9",
    "head_commit": "5022a3bff1020e7896e91549738b6524dd3ea28a",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14184",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14184",
    "dockerfile": "",
    "pr_merged_at": "2025-02-14T16:58:23.000Z",
    "patch": "diff --git a/packages/wdio-webdriver-mock-service/src/index.ts b/packages/wdio-webdriver-mock-service/src/index.ts\nindex a6195d436bc..de82858b573 100644\n--- a/packages/wdio-webdriver-mock-service/src/index.ts\n+++ b/packages/wdio-webdriver-mock-service/src/index.ts\n@@ -68,6 +68,7 @@ export default class WebdriverMockService implements Services.ServiceInstance {\n         this._browser.addCommand('asyncIterationScenario', this.asyncIterationScenario.bind(this))\n         this._browser.addCommand('parentElementChaining', this.parentNextPreviousElementChaining.bind(this))\n         this._browser.addCommand('refetchElementScenario', this.refetchElementScenario.bind(this))\n+        this._browser.addCommand('waitForExistScenario', this.waitForExistScenario.bind(this))\n         this._browser.addCommand('executeMemLeakScenario', this.executeMemLeakScenario.bind(this))\n         this._browser.addCommand('requestRetryScenario', this.requestRetryScenario.bind(this))\n     }\n@@ -173,6 +174,14 @@ export default class WebdriverMockService implements Services.ServiceInstance {\n         this._mock.command.findElements().times(1).reply(200, { value: [elemResponse1, elemResponse2, elemResponse3, elemResponse4] })\n     }\n \n+    waitForExistScenario() {\n+        const elemResponse = { [ELEM_PROP]: '1' }\n+        this._mock.command.findElement().times(1).reply(404, NO_SUCH_ELEMENT)\n+        this._mock.command.findElement().times(1).reply(200, { value: elemResponse })\n+        this._mock.command.findElements().times(4).reply(200, { value: [] })\n+        this._mock.command.findElements().times(2).reply(200, { value: [elemResponse] })\n+    }\n+\n     asyncIterationScenario () {\n         const elemResponse = { [ELEM_PROP]: ELEMENT_ID }\n         const elem2Response = { [ELEM_PROP]: ELEMENT_REFETCHED }\n\ndiff --git a/packages/webdriverio/src/commands/element/waitForExist.ts b/packages/webdriverio/src/commands/element/waitForExist.ts\nindex 3011d6a21dd..702b3547d29 100644\n--- a/packages/webdriverio/src/commands/element/waitForExist.ts\n+++ b/packages/webdriverio/src/commands/element/waitForExist.ts\n@@ -43,7 +43,7 @@ import type { WaitForOptions } from '../../types.js'\n  * @type utility\n  *\n  */\n-export function waitForExist (\n+export async function waitForExist (\n     this: WebdriverIO.Element,\n     {\n         timeout = this.options.waitforTimeout,\n@@ -52,8 +52,21 @@ export function waitForExist (\n         timeoutMsg = `element (\"${this.selector}\") still ${reverse ? '' : 'not '}existing after ${timeout}ms`\n     }: WaitForOptions = {}\n ) {\n-    return this.waitUntil(\n+    const isExisting = await this.waitUntil(\n         async () => reverse !== await this.isExisting(),\n         { timeout, interval, timeoutMsg }\n     )\n+\n+    /**\n+     * If we were waiting for an element to exist and it did, we can update the\n+     * elementId of the current element and remove the error. This is important\n+     * as the user may expect to be able to access an element id after it has\n+     * calling `waitForExist`.\n+     */\n+    if (!reverse && isExisting && typeof this.selector === 'string') {\n+        this.elementId = await this.parent.$(this.selector).elementId\n+        delete this.error\n+    }\n+\n+    return isExisting\n }\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/browser/action.test.ts b/packages/webdriverio/tests/commands/browser/action.test.ts\nindex 56804f03f22..1f1f62d583d 100644\n--- a/packages/webdriverio/tests/commands/browser/action.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/action.test.ts\n@@ -209,7 +209,7 @@ describe('action command', () => {\n             .move({ origin: browser.$('#drag') })\n             .perform()\n         const calls = vi.mocked(fetch).mock.calls\n-        const [,, [, performActionParam]] = calls as any\n+        const [,,, [, performActionParam]] = calls as any\n         expect(JSON.parse(performActionParam.body)).toMatchSnapshot()\n     })\n \n@@ -218,7 +218,7 @@ describe('action command', () => {\n             .scroll({ origin: browser.$('#drag') })\n             .perform()\n         const calls = vi.mocked(fetch).mock.calls\n-        const [,, [, performActionParam]] = calls as any\n+        const [,,, [, performActionParam]] = calls as any\n         expect(JSON.parse(performActionParam.body)).toMatchSnapshot()\n     })\n })\n\ndiff --git a/packages/webdriverio/tests/commands/element/dragAndDrop.test.ts b/packages/webdriverio/tests/commands/element/dragAndDrop.test.ts\nindex 2729383d8ab..ed7037885b4 100644\n--- a/packages/webdriverio/tests/commands/element/dragAndDrop.test.ts\n+++ b/packages/webdriverio/tests/commands/element/dragAndDrop.test.ts\n@@ -81,11 +81,11 @@ describe('dragAndDrop', () => {\n \n         // move to\n         // @ts-expect-error mock implementation\n-        expect(vi.mocked(fetch).mock.calls[7][0].pathname).toContain('/foobar-123/actions')\n+        expect(vi.mocked(fetch).mock.calls[9][0].pathname).toContain('/foobar-123/actions')\n         expect(JSON.parse(vi.mocked(fetch).mock.calls[3][1]?.body as any).actions).toMatchSnapshot()\n         // @ts-expect-error mock implementation\n-        expect(vi.mocked(fetch).mock.calls[8][0].pathname).toContain('/foobar-123/actions')\n-        expect(vi.mocked(fetch).mock.calls[8][1]?.method).toContain('DELETE')\n+        expect(vi.mocked(fetch).mock.calls[10][0].pathname).toContain('/foobar-123/actions')\n+        expect(vi.mocked(fetch).mock.calls[10][1]?.method).toContain('DELETE')\n     })\n \n     it('should do a dragAndDrop for mobile', async () => {\n\ndiff --git a/tests/mocha/test.ts b/tests/mocha/test.ts\nindex bc59e930184..c0d5261626f 100644\n--- a/tests/mocha/test.ts\n+++ b/tests/mocha/test.ts\n@@ -417,4 +417,17 @@ describe('Mocha smoke test', () => {\n             await browser.url('https://mymockpage.com')\n         })\n     })\n+\n+    describe('waitForExist', () => {\n+        it('should return true if element exists', async () => {\n+            // @ts-expect-error custom command\n+            await browser.waitForExistScenario()\n+            const elem = await $('elem')\n+            expect(elem.error).toBeDefined()\n+            expect(elem.elementId).toBeUndefined()\n+            expect(await elem.waitForExist()).toBe(true)\n+            expect(elem.error).toBeUndefined()\n+            expect(elem.elementId).toBeDefined()\n+        })\n+    })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14183",
    "pr_id": 14183,
    "issue_id": 14137,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Navigation to timed out as no request payload was received\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\n18.20.0\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\n{\n    browserName: 'chrome',\n    browserVersion: '128.0',\n\n    webSocketUrl: true,\n}\n```\n\n### What happened?\n\nI get an error like `Navigation to 'https://webdriver.io' timed out as no request payload was received` when create session in master process and then attach to it from worker.\n\n### What is your expected behavior?\n\nI expect that url will open without any error in my case.\n\n### How to reproduce the bug.\n\n```js\n// wdio-master.js\n\nconst cp = require(\"child_process\");\nconst path = require('path');\nconst { remote } = require('webdriverio');\n\nconst worker = cp.fork(path.join(process.cwd(), './wdio-worker'));\n\nlet client;\n\n(async function () {\n    client = await remote({\n        protocol: 'http',\n        hostname: '127.0.0.1',\n        port: 4444,\n        path: '/wd/hub',\n\n        logLevel: 'debug',\n\n        capabilities: {\n            browserName: 'chrome',\n            browserVersion: '128.0',\n\n            webSocketUrl: true,\n        }\n    });\n\n    worker.send({browser: client, options: client.options});\n\n    worker.on('message', async () => {\n        await client.deleteSession();\n        process.exit(0);\n    });\n})()\n    .catch(async (e) => {\n        console.error(e.stack);\n        await client.deleteSession();\n        process.exit(1);\n    });\n```\n\n```js\n// wdio-worker.js\n\nconst { attach } = require('webdriverio');\n\nprocess.on('message', async ({browser, options}) => {\n    const client = await attach({...options, options, ...browser});\n\n    await client.url('https://webdriver.io');\n\n    client.on('log.entryAdded', (entryAdded) => console.log('LOG FROM CONSOLE:', JSON.stringify(entryAdded, null, 4)));\n    await client.execute(() => console.log('Hello Bidi'));\n\n    process.send(`worker.${browser.sessionId}.freeBrowser`);\n});\n```\n\n### Relevant log output\n\n```typescript\nnode wdio-master.js\n\n2025-01-31T12:08:02.059Z INFO webdriver: Initiate new session using the WebDriver protocol\n2025-01-31T12:08:02.059Z INFO @wdio/utils: Connecting to existing driver at http://127.0.0.1:4444/wd/hub\n2025-01-31T12:08:02.065Z INFO webdriver: [POST] http://127.0.0.1:4444/wd/hub/session\n2025-01-31T12:08:02.065Z INFO webdriver: DATA {\n  capabilities: {\n    alwaysMatch: {\n      browserName: 'chrome',\n      browserVersion: '128.0',\n      webSocketUrl: true,\n      unhandledPromptBehavior: 'ignore'\n    },\n    firstMatch: [ {} ]\n  }\n}\n2025-01-31T12:08:17.815Z INFO webdriver: Register BiDi handler for session with id 35ff912c6419627168ac66905e4e3db2\n2025-01-31T12:08:17.816Z INFO webdriver: Connect to webSocketUrl ws://127.0.0.1:4444/session/35ff912c6419627168ac66905e4e3db2\n2025-01-31T12:08:17.932Z INFO webdriver: Connected session to Bidi protocol\n2025-01-31T12:08:17.933Z INFO webdriver: BIDI COMMAND browsingContext.getTree {}\n2025-01-31T12:08:17.934Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.contextCreated\"]}\n2025-01-31T12:08:17.934Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"log.entryAdded\",\"browsingContext.navigationStarted\"]}\n2025-01-31T12:08:17.934Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[1319 bytes]>, contexts: undefined }\n2025-01-31T12:08:17.934Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\",\"network.responseCompleted\",\"network.beforeRequestSent\",\"network.fetchError\"]}\n2025-01-31T12:08:17.934Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.userPromptOpened\"]}\n2025-01-31T12:08:17.935Z INFO webdriver: COMMAND getWindowHandle()\n2025-01-31T12:08:17.935Z INFO webdriver: Connected to WebDriver Bidi interface at ws://127.0.0.1:4444/session/35ff912c6419627168ac66905e4e3db2\n2025-01-31T12:08:17.935Z INFO webdriver: [GET] http://127.0.0.1:4444/wd/hub/session/35ff912c6419627168ac66905e4e3db2/window\n2025-01-31T12:08:17.988Z INFO webdriver: RESULT 71C925FEB5EF1E07363E6A18C4D9AE42\n2025-01-31T12:08:18.031Z INFO webdriver: BIDI RESULT {\"id\":1,\"result\":{\"contexts\":[{\"children\":[],\"context\":\"71C925FEB5EF1E07363E6A18C4D9AE42\",\"originalOpener\":null,\"parent\":null,\"url\":\"about:blank\",\"userContext\":\"default\"}]},\"type\":\"success\"}\n2025-01-31T12:08:18.034Z INFO webdriverio:PolyfillManager: Adding polyfill script to context with id 71C925FEB5EF1E07363E6A18C4D9AE42\n2025-01-31T12:08:18.034Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[442 bytes]>, contexts: [\"71C925FEB5EF1E07363E6A18C4D9AE42\"] }\n2025-01-31T12:08:18.034Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[442 bytes] webdriverioPolyfill>\",\"target\":{\"children\":[],\"context\":\"71C925FEB5EF1E07363E6A18C4D9AE42\",\"originalOpener\":null,\"parent\":null,\"url\":\"about:blank\",\"userContext\":\"default\"},\"awaitPromise\":false}\n2025-01-31T12:08:18.047Z INFO webdriver: BIDI RESULT {\"id\":2,\"result\":{},\"type\":\"success\"}\n2025-01-31T12:08:18.079Z INFO webdriver: BIDI RESULT {\"id\":3,\"result\":{},\"type\":\"success\"}\n2025-01-31T12:08:18.135Z INFO webdriver: BIDI RESULT {\"id\":6,\"result\":{},\"type\":\"success\"}\n2025-01-31T12:08:18.271Z INFO webdriver: BIDI RESULT {\"id\":4,\"result\":{\"script\":\"6f790670-bb3c-454d-b14f-82b1d25d35db\"},\"type\":\"success\"}\n2025-01-31T12:08:18.282Z INFO webdriver: BIDI RESULT {\"id\":5,\"result\":{},\"type\":\"success\"}\n2025-01-31T12:08:18.291Z INFO webdriver: BIDI RESULT {\"id\":7,\"result\":{\"script\":\"d0418786-85e9-4d53-8452-204fdccabf97\"},\"type\":\"success\"}\n2025-01-31T12:08:18.298Z INFO webdriver: BIDI RESULT {\"id\":8,\"result\":{\"realm\":\"-9201519364494380300.-3030457451366164436\",\"result\":{\"type\":\"undefined\"},\"type\":\"success\"},\"type\":\"success\"}\n2025-01-31T12:08:18.578Z INFO webdriver: Register BiDi handler for session with id 35ff912c6419627168ac66905e4e3db2\n2025-01-31T12:08:18.579Z INFO webdriver: Connect to webSocketUrl ws://127.0.0.1:4444/session/35ff912c6419627168ac66905e4e3db2\n2025-01-31T12:08:18.583Z INFO webdriver: COMMAND getWindowHandle()\n2025-01-31T12:08:18.588Z INFO webdriver: [GET] http://127.0.0.1:4444/wd/hub/session/35ff912c6419627168ac66905e4e3db2/window\n2025-01-31T12:08:18.647Z INFO webdriver: Connected session to Bidi protocol\n2025-01-31T12:08:18.647Z INFO webdriver: Connected to WebDriver Bidi interface at ws://127.0.0.1:4444/session/35ff912c6419627168ac66905e4e3db2\n2025-01-31T12:08:18.658Z INFO webdriver: RESULT 71C925FEB5EF1E07363E6A18C4D9AE42\n2025-01-31T12:08:18.658Z INFO webdriver: BIDI COMMAND browsingContext.navigate {\"context\":\"71C925FEB5EF1E07363E6A18C4D9AE42\",\"url\":\"https://webdriver.io\",\"wait\":\"complete\"}\n2025-01-31T12:08:28.447Z INFO webdriverio:PolyfillManager: Adding polyfill script to context with id 704132F251E094004B5E7F5DF4363ED2\n2025-01-31T12:08:28.447Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[442 bytes] webdriverioPolyfill>\",\"target\":{\"children\":null,\"context\":\"704132F251E094004B5E7F5DF4363ED2\",\"originalOpener\":null,\"parent\":\"71C925FEB5EF1E07363E6A18C4D9AE42\",\"url\":\"about:blank\",\"userContext\":\"default\"},\"awaitPromise\":false}\n2025-01-31T12:08:30.899Z INFO webdriver: BIDI RESULT {\"error\":\"unknown error\",\"id\":9,\"message\":\"execution contexts cleared\",\"stacktrace\":\"Error\\n    at new UnknownErrorException (\\u003Canonymous>:81:4569)\\n    at \\u003Canonymous>:597:8761\\n    at \\u003Canonymous>:1:1010\\n    at Array.map (\\u003Canonymous>)\\n    at Object.emit (\\u003Canonymous>:1:993)\\n    at MapperCdpClient.emit (\\u003Canonymous>:17:387)\\n    at #onMessage (\\u003Canonymous>:823:2977)\\n    at WindowCdpTransport.window.cdp.onmessage (\\u003Canonymous>:888:4763)\\n    at \\u003Canonymous>:1:18\",\"type\":\"error\"}\n2025-01-31T12:08:45.572Z INFO webdriverio:PolyfillManager: Adding polyfill script to context with id 035DE8E6F5655ECB126B29FA953280B2\n2025-01-31T12:08:45.573Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[442 bytes] webdriverioPolyfill>\",\"target\":{\"children\":null,\"context\":\"035DE8E6F5655ECB126B29FA953280B2\",\"originalOpener\":null,\"parent\":\"704132F251E094004B5E7F5DF4363ED2\",\"url\":\"about:blank\",\"userContext\":\"default\"},\"awaitPromise\":false}\n2025-01-31T12:08:52.023Z INFO webdriver: BIDI RESULT {\"error\":\"unknown error\",\"id\":10,\"message\":\"Cannot find context with specified id\",\"stacktrace\":\"Error\\n    at new UnknownErrorException (\\u003Canonymous>:81:4569)\\n    at CommandProcessor.processCommand (\\u003Canonymous>:517:8835)\",\"type\":\"error\"}\n2025-01-31T12:08:56.932Z INFO webdriverio:PolyfillManager: Adding polyfill script to context with id 3B08222136B02BBECA93167085CAFE81\n2025-01-31T12:08:56.933Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[442 bytes] webdriverioPolyfill>\",\"target\":{\"children\":null,\"context\":\"3B08222136B02BBECA93167085CAFE81\",\"originalOpener\":null,\"parent\":\"704132F251E094004B5E7F5DF4363ED2\",\"url\":\"about:blank\",\"userContext\":\"default\"},\"awaitPromise\":false}\n2025-01-31T12:09:03.247Z INFO webdriver: BIDI RESULT {\"error\":\"unknown error\",\"id\":11,\"message\":\"Cannot find context with specified id\",\"stacktrace\":\"Error\\n    at new UnknownErrorException (\\u003Canonymous>:81:4569)\\n    at CommandProcessor.processCommand (\\u003Canonymous>:517:8835)\",\"type\":\"error\"}\n2025-01-31T12:09:06.985Z INFO webdriver: BIDI RESULT {\"id\":1,\"result\":{\"navigation\":\"e17ba5ab-8cd6-4615-8ca7-698718171a56\",\"url\":\"https://webdriver.io/\"},\"type\":\"success\"}\nfile:///project_folder/node_modules/webdriverio/build/node.js:5576\n        throw new Error(timeoutMsg);\n              ^\n\nError: Navigation to 'https://webdriver.io' timed out as no request payload was received\n    at file:///project_folder/node_modules/webdriverio/build/node.js:5576:15\n    at async Browser.wrapCommandFn (file:///project_folder/node_modules/@wdio/utils/build/index.js:893:23)\n    at async Browser.url (file:///project_folder/node_modules/webdriverio/build/node.js:5538:21)\n    at async Browser.wrapCommandFn (file:///project_folder/node_modules/@wdio/utils/build/index.js:893:23)\n    at async process.<anonymous> (/project_folder/wdio-worker.js:9:5)\n\nNode.js v18.20.0\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 1356,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "e2e/standalone/attach.test.ts",
      "packages/webdriverio/src/index.ts"
    ],
    "pr_changed_test_files": [
      "e2e/standalone/attach.test.ts"
    ],
    "base_commit": "620e092391d7bcc71cd7cd55ad146ad72e522da9",
    "head_commit": "bec749f0e16c1bd913bc709c40cbcca8b632e113",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14183",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14183",
    "dockerfile": "",
    "pr_merged_at": "2025-02-14T17:48:18.000Z",
    "patch": "diff --git a/packages/webdriverio/src/index.ts b/packages/webdriverio/src/index.ts\nindex 10476f8735a..a74d629cf9a 100644\n--- a/packages/webdriverio/src/index.ts\n+++ b/packages/webdriverio/src/index.ts\n@@ -3,7 +3,7 @@ import logger from '@wdio/logger'\n \n import WebDriver, { DEFAULTS } from 'webdriver'\n import { validateConfig } from '@wdio/config'\n-import { enableFileLogging, wrapCommand } from '@wdio/utils'\n+import { enableFileLogging, wrapCommand, isBidi } from '@wdio/utils'\n import type { Options, Capabilities } from '@wdio/types'\n import type * as WebDriverTypes from 'webdriver'\n \n@@ -104,8 +104,14 @@ export const attach = async function (attachOptions: AttachOptions): Promise<Web\n         prototype,\n         wrapCommand\n     ) as WebdriverIO.Browser\n-\n     driver.addLocatorStrategy = addLocatorStrategyHandler(driver)\n+\n+    /**\n+     * Wait for the Bidi handler to be connected before registering the session manager\n+     */\n+    if (isBidi(driver.capabilities) && '_bidiHandler' in driver) {\n+        await (driver['_bidiHandler'] as WebDriverTypes.BidiHandler).waitForConnected()\n+    }\n     await registerSessionManager(driver)\n     return driver\n }\n",
    "test_patch": "diff --git a/e2e/standalone/attach.test.ts b/e2e/standalone/attach.test.ts\nindex 468999e12bc..3424bd83cdd 100644\n--- a/e2e/standalone/attach.test.ts\n+++ b/e2e/standalone/attach.test.ts\n@@ -38,6 +38,12 @@ test('allow to attach to an existing session', async () => {\n     const newContextTree = await otherBrowser.browsingContextGetTree({ maxDepth: 1 })\n     expect(origContextTree.contexts[0].context).toBe(newContextTree.contexts[0].context)\n \n+    /**\n+     * can open other pages which requires e.g. network manager to be reinitialized correctly\n+     */\n+    await otherBrowser.url('https://guinea-pig.webdriver.io/two.html')\n+    expect(await otherBrowser.getTitle()).toBe('two')\n+\n     await otherBrowser.deleteSession()\n \n     /**\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14169",
    "pr_id": 14169,
    "issue_id": 14167,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[💡 Feature]: wildcards for --spec cli\n### Is your feature request related to a problem?\n\nwildcards aren't available in cli\n\n### Describe the solution you'd like.\n\nI'd suggest to change it like i did here in [WDIO8] branch https://github.com/webdriverio/webdriverio/commit/9376e3a02a4f906c07fd06515ebf7d8801633ed0\n\nthen anyone can use cli option --spec with wildcards like \n\n```\nwdio --spec ./test/**/* --exclude ./test/login/**/*\n```\n\nFor supporting groups like specs: [[]] in wdio config i'd suggest to add option --group \n\n```\nwdio --spec ./test/**/* --exclude ./test/login/**/* --group\n```\n\n### Describe alternatives you've considered.\n\n_No response_\n\n### Additional context\n\nI haven't seen any issue with that so far, it seems working as expected as with single files as with wildcards\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n- [x] [implementation for wdio8](https://github.com/webdriverio/webdriverio/pull/14169) \n\n- [ ] implementation for wdio9",
    "issue_word_count": 142,
    "test_files_count": 5,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "packages/wdio-cli/src/commands/run.ts",
      "packages/wdio-config/src/node/ConfigParser.ts",
      "packages/wdio-config/src/node/utils.ts",
      "tests/smoke.runner.js",
      "tests/tests-cli-spec-arg/mocha.test011.js",
      "tests/tests-cli-spec-arg/wdio-with-all-passed-wildcard.conf.js",
      "website/docs/OrganizingTestSuites.md",
      "website/docs/Testrunner.md"
    ],
    "pr_changed_test_files": [
      "tests/smoke.runner.js",
      "tests/tests-cli-spec-arg/mocha.test011.js",
      "tests/tests-cli-spec-arg/wdio-with-all-passed-wildcard.conf.js",
      "website/docs/OrganizingTestSuites.md",
      "website/docs/Testrunner.md"
    ],
    "base_commit": "acbd06b9e7971553ba285aec6443a47a7b94484f",
    "head_commit": "31fb0f6ad0084a38e7bf4f89a8f2149419f1ef1b",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14169",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14169",
    "dockerfile": "",
    "pr_merged_at": "2025-03-05T17:46:47.000Z",
    "patch": "diff --git a/packages/wdio-cli/src/commands/run.ts b/packages/wdio-cli/src/commands/run.ts\nindex dab6f88c87d..4f74e7aafb7 100644\n--- a/packages/wdio-cli/src/commands/run.ts\n+++ b/packages/wdio-cli/src/commands/run.ts\n@@ -97,11 +97,11 @@ export const cmdArgs = {\n         type: 'array'\n     },\n     spec: {\n-        desc: 'run only a certain spec file - overrides specs piped from stdin',\n+        desc: 'run only a certain spec file or wildcard - overrides specs piped from stdin',\n         type: 'array'\n     },\n     exclude: {\n-        desc: 'exclude certain spec file from the test run - overrides exclude piped from stdin',\n+        desc: 'exclude certain spec file or wildcard from the test run - overrides exclude piped from stdin',\n         type: 'array'\n     },\n     'multi-run': {\n\ndiff --git a/packages/wdio-config/src/node/ConfigParser.ts b/packages/wdio-config/src/node/ConfigParser.ts\nindex 1f5f7547bf4..5a46af2df58 100644\n--- a/packages/wdio-config/src/node/ConfigParser.ts\n+++ b/packages/wdio-config/src/node/ConfigParser.ts\n@@ -36,6 +36,7 @@ interface MergeConfig extends Omit<Partial<TestrunnerOptionsWithParameters>, 'sp\n     'wdio:specs'?: Spec[]\n     exclude?: string[]\n     'wdio:exclude'?: string[]\n+    group?: boolean\n }\n \n export default class ConfigParser {\n@@ -235,7 +236,7 @@ export default class ConfigParser {\n          * run single spec file only, regardless of multiple-spec specification\n          */\n         if (addPathToSpecs && spec.length > 0) {\n-            this._config.specs = this.setFilePathToFilterOptions(spec, this._config.specs!)\n+            this._config.specs = this.setFilePathToFilterOptions(spec, this._config.specs!, object.group)\n         }\n         /**\n          * At this step function allKeywordsContainPath() allows us to make sure\n@@ -338,7 +339,7 @@ export default class ConfigParser {\n         }\n \n         // Remove any duplicate tests from the final specs array\n-        specs = [...new Set(specs)]\n+        specs = filterDublicationArrayItems(specs)\n \n         // If the --multi-run flag is set, duplicate the specs array N times\n         // Ensure that when --multi-run is used that either --spec or --suite is also used\n@@ -363,15 +364,15 @@ export default class ConfigParser {\n      * cli argument\n      * @return {String[]} List of files that should be included or excluded\n      */\n-    setFilePathToFilterOptions(cliArgFileList: string[], specs: Spec[]) {\n+    setFilePathToFilterOptions(cliArgFileList: string[], specs: Spec[], group?: boolean) {\n         const filesToFilter = new Set<string>()\n         const fileList = ConfigParser.getFilePaths(specs, this._config.rootDir, this._pathService)\n         cliArgFileList.forEach(filteredFile => {\n             filteredFile = removeLineNumbers(filteredFile)\n-            // Send single file/file glob to getFilePaths - not supporting hierarchy in spec/exclude\n-            // Return value will always be string[]\n+            // Send wildcard or single file glob to getFilePaths\n+            // Return value will always be string[] or string [][]\n             const globMatchedFiles = <string[]>ConfigParser.getFilePaths(\n-                this._pathService.glob(filteredFile, path.dirname(this.#configFilePath)),\n+                group ? [[filteredFile]] : [filteredFile],\n                 this._config.rootDir,\n                 this._pathService\n             )\n@@ -388,12 +389,12 @@ export default class ConfigParser {\n                 // fileList can be a string[] or a string[][]\n                 fileList.forEach(file => {\n                     if (typeof file === 'string') {\n-                        if (file.match(filteredFile)) {\n+                        if (isValidRegex(filteredFile) && file.match(filteredFile)) {\n                             filesToFilter.add(file)\n                         }\n                     } else if (Array.isArray(file)) {\n                         file.forEach(subFile => {\n-                            if (subFile.match(filteredFile)) {\n+                            if (isValidRegex(filteredFile) && subFile.match(filteredFile)) {\n                                 filesToFilter.add(subFile)\n                             }\n                         })\n@@ -503,7 +504,7 @@ export default class ConfigParser {\n     filterSpecs(specs: Spec[], excludeList: string[]) {\n         // If 'exclude' is array of paths\n         if (allKeywordsContainPath(excludeList)) {\n-            return specs.reduce((returnVal: Spec[], currSpec) => {\n+            const filteredSpec = specs.reduce((returnVal: Spec[], currSpec) => {\n                 if (Array.isArray(currSpec)) {\n                     returnVal.push(currSpec.filter(specItem => !excludeList.includes(specItem)))\n                 } else if (excludeList.indexOf(currSpec) === -1) {\n@@ -511,9 +512,10 @@ export default class ConfigParser {\n                 }\n                 return returnVal\n             }, [])\n+            return filterEmptyArrayItems(filteredSpec)\n         }\n         // If 'exclude' is array of keywords\n-        return specs.reduce((returnVal: Spec[], currSpec) => {\n+        const filteredSpec = specs.reduce((returnVal: Spec[], currSpec) => {\n             if (Array.isArray(currSpec)) {\n                 returnVal.push(currSpec.filter(specItem => !excludeList.some(excludeVal => specItem.includes(excludeVal))))\n             }\n@@ -523,6 +525,7 @@ export default class ConfigParser {\n             }\n             return returnVal\n         }, [])\n+        return filterEmptyArrayItems(filteredSpec)\n     }\n \n     shard(specs: Spec[]) {\n@@ -539,5 +542,22 @@ export default class ConfigParser {\n }\n \n function allKeywordsContainPath(excludedSpecList: string[]) {\n-    return excludedSpecList.every(val => val.includes('/') || val.includes('\\\\'))\n+    return excludedSpecList.every(val => val.includes('/') || val.includes('\\\\') || val.includes('*'))\n+}\n+\n+function filterEmptyArrayItems(specList: Spec[]) {\n+    return specList.filter(item=>(Array.isArray(item) && item.length) || !Array.isArray(item))\n+}\n+\n+function filterDublicationArrayItems(specList: Spec[]) {\n+    return [...new Set(specList.map(item=> Array.isArray(item) ? [...new Set(item)] : item))]\n+}\n+\n+function isValidRegex(expression: string) {\n+    try {\n+        new RegExp(expression)\n+        return true\n+    } catch {\n+        return false\n+    }\n }\n\ndiff --git a/packages/wdio-config/src/node/utils.ts b/packages/wdio-config/src/node/utils.ts\nindex d266f26083b..7ce1dd5d7ec 100644\n--- a/packages/wdio-config/src/node/utils.ts\n+++ b/packages/wdio-config/src/node/utils.ts\n@@ -50,7 +50,7 @@ export function makeRelativeToCWD (files: (string | string[])[] = []): (string |\n \n         returnFiles.push(file.startsWith('file:///')\n             ? url.fileURLToPath(file)\n-            : file.includes('/')\n+            : file.includes('/') && !file.includes('*')\n                 ? path.resolve(process.cwd(), file)\n                 : file\n         )\n",
    "test_patch": "diff --git a/tests/smoke.runner.js b/tests/smoke.runner.js\nindex 047d1b9d406..01baee01e3e 100644\n--- a/tests/smoke.runner.js\n+++ b/tests/smoke.runner.js\n@@ -13,6 +13,7 @@ const jasmineConfig = path.resolve(__dirname, 'helpers', 'configJasmine.js')\n const allPassedConfig = path.resolve(__dirname, 'tests-cli-spec-arg/wdio-with-all-passed.conf.js')\n const noArgConfig = path.resolve(__dirname, 'tests-cli-spec-arg/wdio-with-no-arg.conf.js')\n const severalPassedConfig = path.resolve(__dirname, 'tests-cli-spec-arg/wdio-with-failed.conf.js')\n+const allPassedWildCardConfig = path.resolve(__dirname, 'tests-cli-spec-arg/wdio-with-all-passed-wildcard.conf.js')\n \n // eslint-disable-next-line no-control-regex\n const ansiColorRegex = /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g\n@@ -863,6 +864,121 @@ const cliExcludeParamValidationExcludeMultipleSpecsByPath = async () => {\n     assert.strictEqual(skippedSpecs, 0)\n     assert.strictEqual(failed, 0)\n }\n+\n+const cliSpecsWithWildCard = async () => {\n+    const { passed, skippedSpecs, failed } = await launch(\n+        'cliSpecsWithWildCard',\n+        path.resolve(severalPassedConfig),\n+        {\n+            spec: ['./mocha.test01*.js']\n+        }\n+    )\n+    assert.strictEqual(passed, 2)\n+    assert.strictEqual(skippedSpecs, 0)\n+    assert.strictEqual(failed, 0)\n+}\n+\n+const cliSpecsWithWildCardLikeWord = async () => {\n+    const { passed, skippedSpecs, failed } = await launch(\n+        'cliSpecsWithWildCard',\n+        path.resolve(severalPassedConfig),\n+        {\n+            spec: ['mocha.test01*.js']\n+        }\n+    )\n+    assert.strictEqual(passed, 2)\n+    assert.strictEqual(skippedSpecs, 0)\n+    assert.strictEqual(failed, 0)\n+}\n+\n+const cliSpecsTheSameWithWildCard = async () => {\n+    const { passed, skippedSpecs, failed } = await launch(\n+        'cliSpecsTheSameWithWildCard',\n+        path.resolve(severalPassedConfig),\n+        {\n+            spec: [\n+                './mocha.test01*.js',\n+                './mocha.test01*.js'\n+            ]\n+        }\n+    )\n+    assert.strictEqual(passed, 2)\n+    assert.strictEqual(skippedSpecs, 0)\n+    assert.strictEqual(failed, 0)\n+}\n+\n+const cliSpecsWithWildCardAndGroup = async () => {\n+    const { passed, skippedSpecs, failed } = await launch(\n+        'cliSpecsWithWildCardAndGroup',\n+        path.resolve(severalPassedConfig),\n+        {\n+            spec: ['./mocha.test01*.js'],\n+            group: true\n+        }\n+    )\n+    assert.strictEqual(passed, 1)\n+    assert.strictEqual(skippedSpecs, 0)\n+    assert.strictEqual(failed, 0)\n+}\n+\n+const cliExcludeCertainWithWildCard = async () => {\n+    const { passed, skippedSpecs, failed } = await launch(\n+        'cliExcludeCertainWithWildCard',\n+        path.resolve(severalPassedConfig),\n+        {\n+            spec: ['./mocha.test01*.js'],\n+            exclude: [\n+                './mocha.test01.js',\n+            ]\n+        }\n+    )\n+    assert.strictEqual(passed, 1)\n+    assert.strictEqual(skippedSpecs, 0)\n+    assert.strictEqual(failed, 0)\n+}\n+\n+const cliExcludeSomeFromConfWithWildCard = async () => {\n+    const { passed, skippedSpecs, failed } = await launch(\n+        'cliExcludeSomeFromConfWithWildCard',\n+        path.resolve(allPassedWildCardConfig),\n+        {\n+            exclude: ['./mocha.test01*.js'],\n+        }\n+    )\n+    assert.strictEqual(passed, 1)\n+    assert.strictEqual(skippedSpecs, 0)\n+    assert.strictEqual(failed, 0)\n+}\n+\n+const cliExcludeSomeFromConfWithWildCardAndGroup = async () => {\n+    const { passed, skippedSpecs, failed } = await launch(\n+        'cliExcludeSomeFromConfWithWildCardAndGroup',\n+        path.resolve(allPassedWildCardConfig),\n+        {\n+            exclude: ['./mocha.test01*.js'],\n+            group: true\n+        }\n+    )\n+    assert.strictEqual(passed, 1)\n+    assert.strictEqual(skippedSpecs, 0)\n+    assert.strictEqual(failed, 0)\n+}\n+\n+const cliExcludeAllWithWildCard = async () => {\n+    try {\n+        await launch(\n+            'cliExcludeAllWithWildCard',\n+            path.resolve(allPassedWildCardConfig),\n+            {\n+                spec: ['./mocha.test*.js'],\n+                exclude: ['./mocha.test*.js'],\n+            }\n+        )\n+        assert.ok(false)\n+    } catch {\n+        assert.ok(true)\n+    }\n+}\n // *** END - tests for CLI --spec ***\n \n // *************************\n@@ -988,7 +1104,15 @@ const jasmineAfterHookArgsValidation = async () => {\n         cliExcludeParamValidationSomeExcludedByPath,\n         cliExcludeParamValidationExcludeNonExistentByKeyword,\n         cliExcludeParamValidationExcludeFromConfigByKeyword,\n-        cliExcludeParamValidationExcludeMultipleSpecsByPath\n+        cliExcludeParamValidationExcludeMultipleSpecsByPath,\n+        cliSpecsWithWildCard,\n+        cliSpecsWithWildCardLikeWord,\n+        cliSpecsTheSameWithWildCard,\n+        cliSpecsWithWildCardAndGroup,\n+        cliExcludeCertainWithWildCard,\n+        cliExcludeSomeFromConfWithWildCard,\n+        cliExcludeSomeFromConfWithWildCardAndGroup,\n+        cliExcludeAllWithWildCard\n     ]\n \n     console.log('\\nRunning smoke tests...\\n')\n\ndiff --git a/tests/tests-cli-spec-arg/mocha.test011.js b/tests/tests-cli-spec-arg/mocha.test011.js\nnew file mode 100644\nindex 00000000000..51f54e7fdbd\n--- /dev/null\n+++ b/tests/tests-cli-spec-arg/mocha.test011.js\n@@ -0,0 +1,7 @@\n+import { expect } from '@wdio/globals'\n+\n+describe('This test', () => {\n+    it('should be passed', async () => {\n+        await expect(1).toEqual(1)\n+    })\n+})\n\ndiff --git a/tests/tests-cli-spec-arg/wdio-with-all-passed-wildcard.conf.js b/tests/tests-cli-spec-arg/wdio-with-all-passed-wildcard.conf.js\nnew file mode 100644\nindex 00000000000..927920260f6\n--- /dev/null\n+++ b/tests/tests-cli-spec-arg/wdio-with-all-passed-wildcard.conf.js\n@@ -0,0 +1,35 @@\n+import url from 'node:url'\n+import path from 'node:path'\n+\n+const __dirname = url.fileURLToPath(new URL('.', import.meta.url))\n+const outputDirPathAllPassed = path.resolve(__dirname, 'logs-AllPassedSpec')\n+\n+export const config =\n+    {\n+        capabilities: [{\n+            browserName: 'chrome'\n+        }],\n+        logLevel: 'trace',\n+        framework: 'mocha',\n+\n+        reporters: ['spec'],\n+        services: ['webdriver-mock'],\n+\n+        mochaOpts: {\n+            ui: 'bdd',\n+            timeout: 15000\n+        },\n+        specs:\n+        [\n+            path.resolve(__dirname, 'mocha.test01.js'),\n+            [\n+                path.resolve(__dirname, 'mocha.test02.js'),\n+                path.resolve(__dirname, 'mocha.test03.js'),\n+                path.resolve(__dirname, 'mocha.test04.js'),\n+            ],\n+            [\n+                path.resolve(__dirname, 'mocha.test011.js')\n+            ]\n+        ],\n+        outputDir: outputDirPathAllPassed\n+    }\n\ndiff --git a/website/docs/OrganizingTestSuites.md b/website/docs/OrganizingTestSuites.md\nindex 2976b8a36d7..ab86f04657c 100644\n--- a/website/docs/OrganizingTestSuites.md\n+++ b/website/docs/OrganizingTestSuites.md\n@@ -153,6 +153,18 @@ This will run the files matching the pattern above in the following order:\n   ]\n ```\n \n+Now, if you want to only run all files sequentially, you can do the same in cli pass the command as a CLI argument:\n+\n+```sh\n+wdio wdio.conf.js --spec \"./test/specs/**/*.js\" --group\n+```\n+\n+The group command group every --spec even though it's been added like two or more specs\n+\n+```sh\n+wdio wdio.conf.js --spec \"./test/specs/**/*.js\" --spec \"./test/standolone/login.js\" --group\n+```\n+\n ## Run Selected Tests\n \n In some cases, you may wish to only execute a single test (or subset of tests) of your suites.\n@@ -171,6 +183,12 @@ Or run multiple specs at once:\n wdio wdio.conf.js --spec ./test/specs/signup.js --spec ./test/specs/forgot-password.js\n ```\n \n+Or run wildcards:\n+\n+```sh\n+wdio wdio.conf.js --spec \"./test/specs/**/*.js\"\n+```\n+\n If the `--spec` value does not point to a particular spec file, it is instead used to filter the spec filenames defined in your configuration.\n \n To run all specs with the word “dialog” in the spec file names, you could use:\n@@ -201,6 +219,19 @@ Or, exclude multiple spec files:\n wdio wdio.conf.js --exclude ./test/specs/signup.js --exclude ./test/specs/forgot-password.js\n ```\n \n+Or, exclude specs from group and single files in wdio config by wildcards:\n+\n+ ```sh\n+wdio wdio.conf.js --exclude \"./test/specs/**/*.js\"\n+```\n+\n+Or, exclude specs from cli by wildcards:\n+\n+ ```sh\n+wdio wdio.conf.js --spec \"./test/specs/**/*.js\" --exclude \"./test/specs/**/login.js\"\n+wdio wdio.conf.js --spec \"./test/specs/**/*.js\" --group --exclude \"./test/specs/**/login.js\"\n+```\n+\n Or, exclude a spec file when filtering using a suite:\n \n ```sh\n\ndiff --git a/website/docs/Testrunner.md b/website/docs/Testrunner.md\nindex 20c402d3a80..81b566a413b 100644\n--- a/website/docs/Testrunner.md\n+++ b/website/docs/Testrunner.md\n@@ -115,7 +115,7 @@ Options:\n --reporters, -r       reporters to print out the results on stdout     [array]\n --suite               overwrites the specs attribute and runs the defined\n                         suite                                            [array]\n---spec                run only a certain spec file - overrides specs piped\n+--spec                run a certain spec file or wildcards - overrides specs piped\n                         from stdin                                       [array]\n --exclude             exclude spec file(s) from a run - overrides specs piped\n                         from stdin                                       [array]\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14153",
    "pr_id": 14153,
    "issue_id": 14066,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: cant `expect` after `switchFrame` to a non-child\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.5.2\n\n### Node.js Version\n\nv20.15.1\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\r\n\tbrowserName: 'chrome',\r\n\t'goog:chromeOptions': {\r\n\t\targs: [\r\n\t\t\t\"disable-search-engine-choice-screen\",\r\n\t\t\t\"ignore-certificate-errors\",\r\n\t\t\t...(process.env[\"CI\"] ? ['headless', 'disable-gpu'] : [])\r\n\t\t],\r\n\t}\r\n}\n```\n\n\n### What happened?\n\nThe first test fails:\r\n```ts\r\nimport { expect, browser } from '@wdio/globals'\r\n\r\nbeforeEach(async () => {\r\n    await browser.url(`https://htho.github.io/wdio-repro-iframes/`);\r\n});\r\n\r\n// without this, the next test will load the url in the last selected frame\r\nafterEach(() => browser.switchFrame(null));\r\n\r\ndescribe('switchFrame', () => {\r\n    it('allows expect after switching to non-children', async () => {\r\n        await expect($(\"h1,h2,h3\")).toHaveText(\"Frame Demo\");\r\n\r\n        await browser.switchFrame($(\"#A\")); // child\r\n        await expect($(\"h1,h2,h3\")).toHaveText(\"IFrame A\");\r\n        \r\n        // child, we use this to proof switch frame with a function works\r\n        await browser.switchFrame(() => window.location.href === \"https://htho.github.io/wdio-repro-iframes/iframeA1.html\");\r\n        await expect($(\"h1,h2,h3\")).toHaveText(\"IFrame A1\");\r\n        \r\n        // sibling\r\n        await browser.switchFrame(() => window.location.href === \"https://htho.github.io/wdio-repro-iframes/iframeA2.html\");\r\n        console.log(await $(\"body\").getHTML()); // as expected: `<h3>IFrame A2</h3><pre>index 1, position 1</pre>`\r\n        await expect($(\"h1,h2,h3\")).toHaveText(\"IFrame A2\"); // FAILS \"no such element\"\r\n    });\r\n\r\n    it('allows expect after switching to non-children (fixed)', async () => {\r\n        await expect($(\"h1,h2,h3\")).toHaveText(\"Frame Demo\");\r\n\r\n        await browser.switchFrame($(\"#A\")); // child\r\n        await expect($(\"h1,h2,h3\")).toHaveText(\"IFrame A\");\r\n        \r\n        // child, we use this to proof switch frame with a function works\r\n        await browser.switchFrame(() => window.location.href === \"https://htho.github.io/wdio-repro-iframes/iframeA1.html\");\r\n        await expect($(\"h1,h2,h3\")).toHaveText(\"IFrame A1\");\r\n\r\n        await browser.switchFrame(null); // THIS FIXES IT\r\n        // await browser.switchToParentFrame(); // can't use because of #14064\r\n        \r\n        // sibling\r\n        await browser.switchFrame(() => window.location.href === \"https://htho.github.io/wdio-repro-iframes/iframeA2.html\");\r\n        console.log(await $(\"body\").getHTML()); // as expected: `<h3>IFrame A2</h3><pre>index 1, position 1</pre>`\r\n        await expect($(\"h1,h2,h3\")).toHaveText(\"IFrame A2\"); // OK - as expected\r\n    });\r\n});\r\n```\n\n### What is your expected behavior?\n\nThe first test should also pass.\r\n\r\nThe second test passes because I switch to the top-level context first.\r\nI encountered this, when I wrote a workaround for #14064\r\n\n\n### How to reproduce the bug.\n\ncode from above should be sufficient\n\n### Relevant log output\n\n```typescript\ncode from above should be sufficient\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 441,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "e2e/wdio/headless/test.e2e.ts",
      "packages/webdriverio/src/commands/browser/switchFrame.ts"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/test.e2e.ts"
    ],
    "base_commit": "c7c20abfa92187a8572bb578b16bde722ebcb49d",
    "head_commit": "a480521d61ae9dcfce2285310fdd3558b9e4b333",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14153",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14153",
    "dockerfile": "",
    "pr_merged_at": "2025-02-05T20:06:06.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/switchFrame.ts b/packages/webdriverio/src/commands/browser/switchFrame.ts\nindex 12fba48cd7e..da019b4c3a5 100644\n--- a/packages/webdriverio/src/commands/browser/switchFrame.ts\n+++ b/packages/webdriverio/src/commands/browser/switchFrame.ts\n@@ -294,6 +294,11 @@ export async function switchFrame (\n                 continue\n             }\n \n+            /**\n+             * reset the context to the top level frame first so we can start the search from the root context\n+             */\n+            await browser.switchFrame(null)\n+\n             await this.switchFrame(contextId)\n             return contextId\n         }\n",
    "test_patch": "diff --git a/e2e/wdio/headless/test.e2e.ts b/e2e/wdio/headless/test.e2e.ts\nindex c87b8ced16b..17483723515 100644\n--- a/e2e/wdio/headless/test.e2e.ts\n+++ b/e2e/wdio/headless/test.e2e.ts\n@@ -569,6 +569,22 @@ describe('main suite 1', () => {\n             await expect($('#tinymce')).toBePresent()\n         })\n \n+        it('allows expect after switching to non-children', async () => {\n+            await browser.url('https://guinea-pig.webdriver.io/iframe.html')\n+            await expect($('h1,h2,h3')).toHaveText('Frame Demo')\n+\n+            await browser.switchFrame($('#A')) // child\n+            await expect($('h1,h2,h3')).toHaveText('IFrame A')\n+\n+            // child, we use this to proof switch frame with a function works\n+            await browser.switchFrame(() => window.location.href === 'https://guinea-pig.webdriver.io/iframeA1.html')\n+            await expect($('h1,h2,h3')).toHaveText('IFrame A1')\n+\n+            // sibling\n+            await browser.switchFrame(() => window.location.href === 'https://guinea-pig.webdriver.io/iframeA2.html')\n+            await expect($('h1,h2,h3')).toHaveText('IFrame A2') // FAILS \"no such element\"\n+        })\n+\n         describe('switchToParentFrame', () => {\n             it('switches to parent (not top-level)', async () => {\n                 await browser.url('https://guinea-pig.webdriver.io/iframe.html')\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14132",
    "pr_id": 14132,
    "issue_id": 14131,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[💡 Feature]: Unable to set different capabilities for different workers\n### Is your feature request related to a problem?\n\nWe want to enhance the `wdio-electron-service`\nIn this activity, we want to set a different capability for each worker.\n\nWe have tried to use the `onWorkerStart` hook to accomplish this, but when it is called, it references the same capability object for all of them, so we cannot set different capacities.\n\n### Describe the solution you'd like.\n\nI think the relevant code is here.\nhttps://github.com/webdriverio/webdriverio/blob/63ac0e07bef1ac9e9075bbef24bd9c9340085bdc/packages/wdio-cli/src/launcher.ts#L516-L541\n\nThe solution is to deep copy the capability objects before calling `runLauncherHook' and `runServiceHook' and call them and `this.runner.run` with the copied capability object  .\n\n### Describe alternatives you've considered.\n\n_No response_\n\n### Additional context\n\n_No response_\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct",
    "issue_word_count": 149,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-cli/src/launcher.ts",
      "packages/wdio-cli/tests/launcher.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-cli/tests/launcher.test.ts"
    ],
    "base_commit": "63ac0e07bef1ac9e9075bbef24bd9c9340085bdc",
    "head_commit": "14916c67d5ef8b5b03ab16bdf34f83aa540a1bd5",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14132",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14132",
    "dockerfile": "",
    "pr_merged_at": "2025-02-03T17:53:40.000Z",
    "patch": "diff --git a/packages/wdio-cli/src/launcher.ts b/packages/wdio-cli/src/launcher.ts\nindex bf6cb222077..996c594da6e 100644\n--- a/packages/wdio-cli/src/launcher.ts\n+++ b/packages/wdio-cli/src/launcher.ts\n@@ -513,11 +513,14 @@ class Launcher {\n         // bump up worker count\n         this._runnerStarted++\n \n+        // Prepare to pass different capability objects for each worker\n+        const workerCaps = structuredClone(caps)\n+\n         // run worker hook to allow modify runtime and capabilities of a specific worker\n         log.info('Run onWorkerStart hook')\n-        await runLauncherHook(config.onWorkerStart, runnerId, caps, specs, this._args, execArgv)\n+        await runLauncherHook(config.onWorkerStart, runnerId, workerCaps, specs, this._args, execArgv)\n             .catch((error) => this._workerHookError(error))\n-        await runServiceHook(this._launcher!, 'onWorkerStart', runnerId, caps, specs, this._args, execArgv)\n+        await runServiceHook(this._launcher!, 'onWorkerStart', runnerId, workerCaps, specs, this._args, execArgv)\n             .catch((error) => this._workerHookError(error))\n \n         // prefer launcher settings in capabilities over general launcher\n@@ -534,7 +537,7 @@ class Launcher {\n                 user: config.user,\n                 key: config.key\n             },\n-            caps,\n+            caps: workerCaps,\n             specs,\n             execArgv,\n             retries\n",
    "test_patch": "diff --git a/packages/wdio-cli/tests/launcher.test.ts b/packages/wdio-cli/tests/launcher.test.ts\nindex 96caeedc7de..014a520c1cd 100644\n--- a/packages/wdio-cli/tests/launcher.test.ts\n+++ b/packages/wdio-cli/tests/launcher.test.ts\n@@ -651,6 +651,46 @@ describe('launcher', () => {\n             )\n         })\n \n+        it('should start an instance with different capability worker by worker', async () => {\n+            const hostname = '127.0.0.2'\n+            const caps = {\n+                browserName: 'chrome'\n+            }\n+            const expectedCaps = Object.assign({}, caps, {\n+                'goog:chromeOptions': {\n+                    args: `--inspect=${hostname}:50000`,\n+                }\n+            })\n+            const onWorkerStartMock = vi.fn().mockImplementation((_runnerId, caps)=>{\n+                caps['goog:chromeOptions'] = {\n+                    args: `--inspect=${hostname}:50000`\n+                }\n+            })\n+            launcher.configParser.getConfig = () => ({ onWorkerStart: onWorkerStartMock }) as any\n+            launcher['_args'].hostname = hostname\n+\n+            expect(launcher['_runnerStarted']).toBe(0)\n+            await launcher['_startInstance'](\n+                ['/foo.test.js'],\n+                caps,\n+                0,\n+                '0-5',\n+                0\n+            )\n+\n+            expect(onWorkerStartMock).toHaveBeenCalledWith(\n+                '0-5',\n+                expectedCaps,\n+                ['/foo.test.js'],\n+                { hostname: '127.0.0.2' },\n+                []\n+            )\n+\n+            expect(caps).toStrictEqual({\n+                browserName: 'chrome'\n+            })\n+        })\n+\n         it('should wait before starting an instance on retry', async () => {\n             const onWorkerStartMock = vi.fn()\n             const caps = {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14128",
    "pr_id": 14128,
    "issue_id": 14123,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: top level navigation from iframe breaks browsing context\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.7.1\n\n### Node.js Version\n\nv22.13.1\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\ncapabilities: [\n        {\n            browserName: 'chrome',\n            unhandledPromptBehavior: \"ignore\",\n        },\n        {\n            browserName: 'firefox',\n            unhandledPromptBehavior: \"ignore\",\n        },\n    ],\n```\n\n### What happened?\n\nI have a button/link in an Iframe that triggers a navigation in the top-level frame.\nI switch to the iframe and click the button.\nAfter that, assertions don't work, and the next test fails because browser.url cannot be used.\n\n### What is your expected behavior?\n\nAfter a top-level navigation the top-level frame should be selected.\n\n### How to reproduce the bug.\n\nI created a repository where I reproduce wdio bugs: https://github.com/htho/wdio-repro-collection\n\nJust `git clone`, `npm i` & `npm run test:iframeNavigation`\n\nhttps://github.com/htho/wdio-repro-collection/blob/main/docs/iframeNavigation.html\n```html\n<body>\n    <h1>Iframe Navigation</h1>\n    <iframe src=\"iframeNavigationInner.html\"></iframe>\n</body>\n```\nhttps://github.com/htho/wdio-repro-collection/blob/main/docs/iframeNavigationInner.html:\n```html\n<body>\n    <h1>Iframe Navigation Inner</h1>\n    <button onclick=\"window.top.location.assign('iframeTarget.html')\">Take me somewhere else...</button>\n    <a href=\"iframeTarget.html\" target=\"_top\">Take me somewhere else...</a>\n</body>\n```\nhttps://github.com/htho/wdio-repro-collection/blob/main/docs/iframeTarget.html:\n```html\n<body>\n    <h1>Iframe Target</h1>\n</body>\n```\n\nhttps://github.com/htho/wdio-repro-collection/blob/main/test/specs/iframeNavigation.e2e.ts\n```ts\nimport { expect, browser } from '@wdio/globals'\n\nbeforeEach(async () => {\n    await browser.url(`https://htho.github.io/wdio-repro-collection/iframeNavigation.html`);\n});\n\nfor (const goToTop of [\"\", \"go to top after navigation\"] as const) {\n    describe(`iframeNavigation (${goToTop})`, () => {\n        it(\"should work by using a link with target=_top\", async () => {\n            await browser.switchFrame(\"iframeNavigationInner.html\");\n            await $(\"a\").click();\n            if(goToTop !== \"\") await browser.switchFrame(null);\n            await expect($(\"h1\")).toHaveText(\"Iframe Target\");\n        });\n\n        it(\"should work by setting the location\", async () => {\n            await browser.switchFrame(\"iframeNavigationInner.html\");\n            await $(\"button\").click();\n            if(goToTop !== \"\") await browser.switchFrame(null);\n            await expect($(\"h1\")).toHaveText(\"Iframe Target\");\n        });\n    });\n}\n```\n\n### Relevant log output\n\n```typescript\n[0-0] Error in \"iframeNavigation ().should work by using a link with target=_top\"\nError: Can't call getText on element with selector \"h1\" because element wasn't found\n    at implicitWait (C:\\dev\\github.com\\htho\\wdio-repro-collection\\node_modules\\webdriverio\\build\\node.js:523:13)\n    at async Element.elementErrorHandlerCallbackFn (C:\\dev\\github.com\\htho\\wdio-repro-collection\\node_modules\\webdriverio\\build\\node.js:8174:23)\n    at async Element.wrapCommandFn (C:\\dev\\github.com\\htho\\wdio-repro-collection\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async condition (file:///C:/dev/github.com/htho/wdio-repro-collection/node_modules/expect-webdriverio/lib/matchers/element/toHaveText.js:19:28)      \n    at async Object.executeCommand (file:///C:/dev/github.com/htho/wdio-repro-collection/node_modules/expect-webdriverio/lib/util/executeCommand.js:2:20)   \n    at async file:///C:/dev/github.com/htho/wdio-repro-collection/node_modules/expect-webdriverio/lib/matchers/element/toHaveText.js:45:24\n    at async waitUntil (file:///C:/dev/github.com/htho/wdio-repro-collection/node_modules/expect-webdriverio/lib/utils.js:36:43)\n    at async Object.toHaveText (file:///C:/dev/github.com/htho/wdio-repro-collection/node_modules/expect-webdriverio/lib/matchers/element/toHaveText.js:44:18)\n    at async Context.<anonymous> (C:\\dev\\github.com\\htho\\wdio-repro-collection\\test\\specs\\iframeNavigation.e2e.ts:14:13)\n    at async Context.executeAsync (C:\\dev\\github.com\\htho\\wdio-repro-collection\\node_modules\\@wdio\\utils\\build\\index.js:1013:20)\n[0-0] FAILED in chrome - file:///C:/dev/github.com/htho/wdio-repro-collection/test/specs/iframeNavigation.e2e.ts\n[1-0] 2025-01-28T11:40:06.620Z ERROR webdriver: WebDriverError: Browsing context has been discarded when running \"element/4060a7e1-f8fe-4d58-b6d8-0d4072f22e65/text\" with method \"GET\"\n[1-0] no such window in \"iframeNavigation ().should work by using a link with target=_top\"\nno such window: WebDriverError: Browsing context has been discarded when running \"element/4060a7e1-f8fe-4d58-b6d8-0d4072f22e65/text\" with method \"GET\"      \n    at async Element.wrapCommandFn (C:\\dev\\github.com\\htho\\wdio-repro-collection\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async Element.wrapCommandFn (C:\\dev\\github.com\\htho\\wdio-repro-collection\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async Element.elementErrorHandlerCallbackFn (C:\\dev\\github.com\\htho\\wdio-repro-collection\\node_modules\\webdriverio\\build\\node.js:8178:24)\n    at async Element.wrapCommandFn (C:\\dev\\github.com\\htho\\wdio-repro-collection\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async Element.wrapCommandFn (C:\\dev\\github.com\\htho\\wdio-repro-collection\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async Element.elementErrorHandlerCallbackFn (C:\\dev\\github.com\\htho\\wdio-repro-collection\\node_modules\\webdriverio\\build\\node.js:8178:24)\n    at async Element.wrapCommandFn (C:\\dev\\github.com\\htho\\wdio-repro-collection\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async condition (file:///C:/dev/github.com/htho/wdio-repro-collection/node_modules/expect-webdriverio/lib/matchers/element/toHaveText.js:19:28)      \n[1-0] FAILED in firefox - file:///C:/dev/github.com/htho/wdio-repro-collection/test/specs/iframeNavigation.e2e.ts\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 881,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "e2e/wdio/headless/test.e2e.ts",
      "examples/wdio/package.json",
      "packages/webdriverio/src/session/context.ts"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/test.e2e.ts"
    ],
    "base_commit": "c7c20abfa92187a8572bb578b16bde722ebcb49d",
    "head_commit": "fad1cf7832f1519ef357c1803bdccfef28109806",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14128",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14128",
    "dockerfile": "",
    "pr_merged_at": "2025-02-05T20:03:42.000Z",
    "patch": "diff --git a/examples/wdio/package.json b/examples/wdio/package.json\nindex 69bdc575255..e3eb22747d1 100644\n--- a/examples/wdio/package.json\n+++ b/examples/wdio/package.json\n@@ -5,7 +5,7 @@\n   \"type\": \"module\",\n   \"private\": true,\n   \"scripts\": {\n-    \"test:mocha\": \"wdio run ./mocha/wdio.conf.js\",\n+    \"test:mocha\": \"wdio run ./mocha/wdio.conf.ts\",\n     \"test:jasmine\": \"wdio run ./jasmine/wdio.conf.ts\",\n     \"test:cucumber\": \"wdio run ./cucumber/wdio.conf.ts\",\n     \"test:multiremote\": \"wdio run ./multiremote/wdio.conf.js\",\n\ndiff --git a/packages/webdriverio/src/session/context.ts b/packages/webdriverio/src/session/context.ts\nindex c727be0e22a..f5673188a40 100644\n--- a/packages/webdriverio/src/session/context.ts\n+++ b/packages/webdriverio/src/session/context.ts\n@@ -54,6 +54,42 @@ export class ContextManager extends SessionManager {\n          */\n         this.#browser.on('command', this.#onCommand.bind(this))\n \n+        /**\n+         * Listen to the 'browsingContext.navigationStarted' event to handle context changes\n+         * through navigation within e.g. frames.\n+         */\n+        this.#browser.sessionSubscribe({\n+            events: ['browsingContext.navigationStarted']\n+        })\n+        this.#browser.on('browsingContext.navigationStarted', async (nav) => {\n+            /**\n+             * no need to do anything as we navigate within the same context\n+             */\n+            if (!this.#currentContext || nav.context === this.#currentContext) {\n+                return\n+            }\n+\n+            /**\n+             * a navigation event may have changed the tree structure, so we need to get the\n+             * current tree and see if our context is still there, if not, we need to reset\n+             * the context to the first context in the tree.\n+             */\n+            const { contexts } = await this.#browser.browsingContextGetTree({})\n+            /**\n+             * check if the context is still in the tree, if not, switch to...\n+             */\n+            const hasContext = this.findContext(this.#currentContext, contexts, 'byContextId')\n+            /**\n+             * ...the context we are navigating to\n+             */\n+            const newContext = contexts.find((context) => context.context === nav.context)\n+            if (!hasContext && newContext) {\n+                this.setCurrentContext(newContext.context)\n+                this.#browser.switchToWindow(this.#currentContext)\n+                return\n+            }\n+        })\n+\n         /**\n          * Listens for the 'closeWindow' browser command to handle context changes.\n          */\n",
    "test_patch": "diff --git a/e2e/wdio/headless/test.e2e.ts b/e2e/wdio/headless/test.e2e.ts\nindex c87b8ced16b..dcd9a06001f 100644\n--- a/e2e/wdio/headless/test.e2e.ts\n+++ b/e2e/wdio/headless/test.e2e.ts\n@@ -538,10 +538,10 @@ describe('main suite 1', () => {\n         })\n \n         it('can switch to a frame via url', async () => {\n-            await browser.url('https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_iframe')\n-            await browser.switchFrame('https://www.w3schools.com')\n+            await browser.url('https://guinea-pig.webdriver.io/iframe.html')\n+            await browser.switchFrame('https://guinea-pig.webdriver.io/iframeA2.html')\n             expect(await browser.execute(() => [document.title, document.URL]))\n-                .toEqual(['W3Schools Online Web Tutorials', 'https://www.w3schools.com/'])\n+                .toEqual(['IFrame A2', 'https://guinea-pig.webdriver.io/iframeA2.html'])\n         })\n \n         it('can switch to a frame via element', async () => {\n@@ -614,6 +614,26 @@ describe('main suite 1', () => {\n \n             after(() => browser.switchFrame(null))\n         })\n+\n+        describe('iframe navigations', () => {\n+            beforeEach(async () => {\n+                await browser.url('https://guinea-pig.webdriver.io/iframeNavigation.html')\n+            })\n+\n+            describe('ability to catch navigation event within iframe', () => {\n+                it('should work by using a link with target=_top', async () => {\n+                    await browser.switchFrame('iframeNavigationInner.html')\n+                    await $('a').click()\n+                    await expect($('h1')).toHaveText('Iframe Target')\n+                })\n+\n+                it('should work by setting the location', async () => {\n+                    await browser.switchFrame('iframeNavigationInner.html')\n+                    await $('button').click()\n+                    await expect($('h1')).toHaveText('Iframe Target')\n+                })\n+            })\n+        })\n     })\n \n     describe('open resources with different protocols', () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14122",
    "pr_id": 14122,
    "issue_id": 13722,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: v9 - Problems running tests on Browserstack\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.1.2\n\n### Node.js Version\n\n20.17.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\ncapabilities: [\r\n    {\r\n        browserName: 'Chrome',       \r\n        'bstack:options': {\r\n          browserVersion: '127.0',\r\n          os: 'Windows',\r\n          osVersion: '10',\r\n        }\r\n        \r\n      }\r\n  ],\r\n\r\n  user: xxxxx,\r\n  key: xxxxx,\r\n\r\n  services: [\r\n    [\r\n      \"browserstack\",\r\n      {\r\n        browserstackLocal: true,\r\n        testObservability: true,\r\n        testObservabilityOptions: {\r\n            projectName: \"Your project name goes here\",\r\n            buildName: \"The static build job name goes here e.g. Nightly regression\"\r\n        },\r\n       \r\n      },\r\n    ],\r\n  ],\n```\n\n\n### What happened?\n\nI tried updating from v.8.x to latest v.9 and ran into problems trying to run my tests using browserstack. I spoke to Erwin at Discord and he thought it might be related to https://github.com/webdriverio/webdriverio/pull/13701 and adviced me to submit a ticket. Please see logs below for relevant output regarding the error. \r\n\r\n\n\n### What is your expected behavior?\n\nI should be able to connect to browserstack service\n\n### How to reproduce the bug.\n\nTry running any tests using browserstack service to trigger the error. I have tried to adjust the flags but I always get the same error. \r\n\r\n**package.json**\r\n\r\n    \"@types/mocha\": \"^10.0.8\",\r\n    \"@wdio/browserstack-service\": \"^9.1.2\",\r\n    \"@wdio/cli\": \"^9.1.2\",\r\n    \"@wdio/local-runner\": \"^9.1.2\",\r\n    \"@wdio/mocha-framework\": \"^9.1.2\",\n\n### Relevant log output\n\n```typescript\n**WDIO logs:**\r\n\r\n2024-10-01T05:07:15.689Z ERROR @wdio/browserstack-service: Data upload to BrowserStack Test Observability failed due to TypeError: fetch failed\r\n2024-10-01T05:07:15.708Z ERROR @wdio/cli:utils: A service failed in the 'onPrepare' hook\r\nError: spawn UNKNOWN\r\n    at ChildProcess.spawn (node:internal/child_process:421:11)\r\n    at spawn (node:child_process:762:9)\r\n    at Object.execFile (node:child_process:351:17)\r\n    at C:\\Projects\\webdriverio-9\\node_modules\\browserstack-local\\lib\\Local.js:88:34\r\n    at LocalBinary.binaryPath (C:\\Projects\\webdriverio-9\\node_modules\\browserstack-local\\lib\\LocalBinary.js:158:7)\r\n    at Local.getBinaryPath (C:\\Projects\\webdriverio-9\\node_modules\\browserstack-local\\lib\\Local.js:259:19)\r\n    at Local.start (C:\\Projects\\webdriverio-9\\node_modules\\browserstack-local\\lib\\Local.js:83:10)\r\n    at node:internal/util:432:7\r\n    at new Promise (<anonymous>)\r\n    at bound  (node:internal/util:418:12)\r\n\r\n**bstack-wdio-service.log;**\r\n\r\n\u001b[90m2024-10-01T05:18:43.162Z\u001b[39m \u001b[32mDEBUG\u001b[39m \u001b[97m@wdio/browserstack-service\u001b[39m Exception in sending funnel data: TypeError: fetch failed\r\n\u001b[90m2024-10-01T05:18:43.162Z\u001b[39m \u001b[32mDEBUG\u001b[39m \u001b[97m@wdio/browserstack-service\u001b[39m app is not defined in browserstack-service config, skipping ...\r\n\u001b[90m2024-10-01T05:18:45.984Z\u001b[39m \u001b[32mDEBUG\u001b[39m \u001b[97m@wdio/browserstack-service\u001b[39m teardown started\r\n\u001b[90m2024-10-01T05:18:45.984Z\u001b[39m \u001b[32mDEBUG\u001b[39m \u001b[97m@wdio/browserstack-service\u001b[39m teardown ended\r\n\u001b[90m2024-10-01T05:18:46.147Z\u001b[39m \u001b[32mDEBUG\u001b[39m \u001b[97m@wdio/browserstack-service\u001b[39m Inside OnComplete hook..\r\n\u001b[90m2024-10-01T05:18:46.148Z\u001b[39m \u001b[32mDEBUG\u001b[39m \u001b[97m@wdio/browserstack-service\u001b[39m Reading worker file worker-data-29044.json\r\n\u001b[90m2024-10-01T05:18:46.150Z\u001b[39m \u001b[32mDEBUG\u001b[39m \u001b[97m@wdio/browserstack-service\u001b[39m Sending SDK event with data \r\n\r\n----\r\n\r\n[90m2024-10-01T05:18:46.178Z\u001b[39m \u001b[32mDEBUG\u001b[39m \u001b[97m@wdio/browserstack-service\u001b[39m Exception in sending funnel data: TypeError: fetch failed\r\n\u001b[90m2024-10-01T05:18:46.178Z\u001b[39m \u001b[96mINFO\u001b[39m \u001b[97m@wdio/browserstack-service\u001b[39m If facing any issues, please contact BrowserStack support with the Build Run Id - xxxx\r\n\u001b[90m2024-10-01T05:18:46.207Z\u001b[39m \u001b[32mDEBUG\u001b[39m \u001b[97m@wdio/browserstack-service\u001b[39m Failed to fire api request due to TypeError: fetch failed - TypeError: fetch failed\r\n    at node:internal/deps/undici/undici:13178:13\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n    at async nodeRequest (C:\\Projects\\webdriverio-9\\node_modules\\@wdio\\browserstack-service\\build\\index.js:880:22)\r\n    at async uploadLogs (C:\\Projects\\webdriverio-9\\node_modules\\@wdio\\browserstack-service\\build\\index.js:1808:20)\r\n    at async BrowserstackLauncherService._uploadServiceLogs (C:\\Projects\\webdriverio-9\\node_modules\\@wdio\\browserstack-service\\build\\index.js:3327:22)\r\n    at async BrowserstackLauncherService.onComplete (C:\\Projects\\webdriverio-9\\node_modules\\@wdio\\browserstack-service\\build\\index.js:3203:7)\r\n    at async file:///C:/Projects/webdriverio-9/node_modules/@wdio/cli/build/index.js:1207:9\r\n    at async Promise.all (index 0)\r\n    at async Launcher.run (file:///C:/Projects/webdriverio-9/node_modules/@wdio/cli/build/index.js:2198:7)\r\n    at async Module.run (file:///C:/Projects/webdriverio-9/node_modules/@wdio/cli/build/index.js:3214:16)\r\n\u001b[90m2024-10-01T05:18:46.207Z\u001b[39m \u001b[32mDEBUG\u001b[39m \u001b[97m@wdio/browserstack-service\u001b[39m Response - undefined\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 774,
    "test_files_count": 2,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "packages/wdio-browserstack-service/package.json",
      "packages/wdio-browserstack-service/src/Percy/Percy.ts",
      "packages/wdio-browserstack-service/src/Percy/PercySDK.ts",
      "packages/wdio-browserstack-service/src/accessibility-handler.ts",
      "packages/wdio-browserstack-service/src/insights-handler.ts",
      "packages/wdio-browserstack-service/src/launcher.ts",
      "packages/wdio-browserstack-service/src/service.ts",
      "packages/wdio-browserstack-service/src/util.ts",
      "packages/wdio-browserstack-service/tests/service.test.ts",
      "packages/wdio-browserstack-service/tests/util.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-browserstack-service/tests/service.test.ts",
      "packages/wdio-browserstack-service/tests/util.test.ts"
    ],
    "base_commit": "ec0f3216a76a13564c1fad4b631e03c24298e16a",
    "head_commit": "cc3893e2c19947c733fd589358c3207a53fe2520",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14122",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14122",
    "dockerfile": "",
    "pr_merged_at": "2025-01-28T16:15:31.000Z",
    "patch": "diff --git a/packages/wdio-browserstack-service/package.json b/packages/wdio-browserstack-service/package.json\nindex 58147d759a1..1d97cea6166 100644\n--- a/packages/wdio-browserstack-service/package.json\n+++ b/packages/wdio-browserstack-service/package.json\n@@ -28,6 +28,10 @@\n     \".\": {\n       \"types\": \"./build/index.d.ts\",\n       \"import\": \"./build/index.js\"\n+    },\n+    \"./cleanup\": {\n+      \"import\": \"./build/cleanup.js\",\n+      \"source\": \"./src/cleanup.ts\"\n     }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n\ndiff --git a/packages/wdio-browserstack-service/src/Percy/Percy.ts b/packages/wdio-browserstack-service/src/Percy/Percy.ts\nindex c0b1c14bbd9..e6b61e7b29a 100644\n--- a/packages/wdio-browserstack-service/src/Percy/Percy.ts\n+++ b/packages/wdio-browserstack-service/src/Percy/Percy.ts\n@@ -137,19 +137,23 @@ class Percy {\n             }\n             params.set('percy', String(this.#options.percy))\n             const query = `api/app_percy/get_project_token?${params.toString()}`\n-            const response = await nodeRequest('GET', query,\n-                {\n-                    username: getBrowserStackUser(this.#config),\n-                    password: getBrowserStackKey(this.#config)\n-                } as RequestInit,\n-                'https://api.browserstack.com'\n-            )\n-            PercyLogger.debug('Percy fetch token success : ' + response.token)\n+            const requestInit: RequestInit = {\n+                headers: {\n+                    Authorization: `Basic ${Buffer.from(`${getBrowserStackUser(this.#config)}:${getBrowserStackKey(this.#config)}`).toString('base64')}`,\n+                },\n+            }\n+            const response = await nodeRequest('GET', query, requestInit, 'https://api.browserstack.com')\n             if (!this.#options.percy && response.success) {\n                 this.percyAutoEnabled = response.success\n             }\n             this.percyCaptureMode = response.percy_capture_mode\n             this.percy = response.success\n+            if (response.token) {\n+                PercyLogger.debug('Percy fetch token success: ' + response.token)\n+                return response.token\n+            }\n+            PercyLogger.error('Unable to fetch percy project token')\n+            return null\n         } catch (err) {\n             PercyLogger.error(`Percy unable to fetch project token: ${err}`)\n             return null\n\ndiff --git a/packages/wdio-browserstack-service/src/Percy/PercySDK.ts b/packages/wdio-browserstack-service/src/Percy/PercySDK.ts\nindex 0708c1da089..38b523bf1bb 100644\n--- a/packages/wdio-browserstack-service/src/Percy/PercySDK.ts\n+++ b/packages/wdio-browserstack-service/src/Percy/PercySDK.ts\n@@ -29,8 +29,7 @@ if (percySnapshot) {\n             options ||= {}\n             options = {\n                 ...options,\n-                testCase: name || '',\n-                thTestCaseExecutionId: uuid || '',\n+                testCase: name || ''\n             }\n             return percySnapshot(browser, snapshotName, options)\n         }\n@@ -52,16 +51,14 @@ const screenshotHelper = (type: string, driverOrName: WebdriverIO.Browser | Webd\n         if (typeof nameOrOptions === 'object') {\n             nameOrOptions = {\n                 ...nameOrOptions,\n-                testCase: name || '',\n-                thTestCaseExecutionId: uuid || '',\n+                testCase: name || ''\n             }\n         }\n     } else {\n         options ||= {}\n         options = {\n             ...options,\n-            testCase: name || '',\n-            thTestCaseExecutionId: uuid || '',\n+            testCase: name || ''\n         }\n     }\n     if (type === 'app') {\n\ndiff --git a/packages/wdio-browserstack-service/src/accessibility-handler.ts b/packages/wdio-browserstack-service/src/accessibility-handler.ts\nindex 60d2ce7117a..040a696eb62 100644\n--- a/packages/wdio-browserstack-service/src/accessibility-handler.ts\n+++ b/packages/wdio-browserstack-service/src/accessibility-handler.ts\n@@ -21,7 +21,8 @@ import {\n     validateCapsWithA11y,\n     isTrue,\n     validateCapsWithAppA11y,\n-    getAppA11yResults\n+    getAppA11yResults,\n+    executeAccessibilityScript\n } from './util.js'\n import accessibilityScripts from './scripts/accessibility-scripts.js'\n \n@@ -327,8 +328,12 @@ class _AccessibilityHandler {\n         if (isAppAccessibilityAutomationSession(this._accessibility, this.isAppAutomate)) {\n             return\n         }\n-        const results: unknown = await (browser as WebdriverIO.Browser).executeAsync(accessibilityScripts.saveTestResults as string, dataForExtension)\n-        BStackLogger.debug(util.format(results as string))\n+        if (accessibilityScripts.saveTestResults) {\n+            const results: unknown = await executeAccessibilityScript(browser, accessibilityScripts.saveTestResults, dataForExtension)\n+            BStackLogger.debug(util.format(results as string))\n+        } else {\n+            BStackLogger.error('saveTestResults script is null or undefined')\n+        }\n     }\n \n     private getIdentifier (test: Frameworks.Test | ITestCaseHookParameter) {\n\ndiff --git a/packages/wdio-browserstack-service/src/insights-handler.ts b/packages/wdio-browserstack-service/src/insights-handler.ts\nindex 6bc102a0790..9f2c394d98f 100644\n--- a/packages/wdio-browserstack-service/src/insights-handler.ts\n+++ b/packages/wdio-browserstack-service/src/insights-handler.ts\n@@ -95,13 +95,13 @@ class _InsightsHandler {\n \n     async before () {\n         if (isBrowserstackSession(this._browser)) {\n-            await (this._browser as WebdriverIO.Browser).execute(`browserstack_executor: ${JSON.stringify({\n+            await (this._browser as WebdriverIO.Browser).executeScript(`browserstack_executor: ${JSON.stringify({\n                 action: 'annotate',\n                 arguments: {\n                     data: `ObservabilitySync:${Date.now()}`,\n                     level: 'debug'\n                 }\n-            })}`)\n+            })}`, [])\n         }\n \n         const gitMeta = await getGitMetaData()\n\ndiff --git a/packages/wdio-browserstack-service/src/launcher.ts b/packages/wdio-browserstack-service/src/launcher.ts\nindex 78ac8946ef8..c0f098446b1 100644\n--- a/packages/wdio-browserstack-service/src/launcher.ts\n+++ b/packages/wdio-browserstack-service/src/launcher.ts\n@@ -446,7 +446,7 @@ export default class BrowserstackLauncherService implements Services.ServiceInst\n         }\n         try {\n             this._percy = await startPercy(options, config, bsConfig)\n-            if (!this._percy) {\n+            if (!this._percy || (typeof this._percy === 'object' && Object.keys(this._percy).length === 0)) {\n                 throw new Error('Could not start percy, check percy logs for info.')\n             }\n             PercyLogger.info('Percy started successfully')\n@@ -539,9 +539,11 @@ export default class BrowserstackLauncherService implements Services.ServiceInst\n \n     async _uploadServiceLogs() {\n         const clientBuildUuid = this._getClientBuildUuid()\n-\n         const response = await uploadLogs(getBrowserStackUser(this._config), getBrowserStackKey(this._config), clientBuildUuid)\n-        BStackLogger.logToFile(`Response - ${format(response)}`, 'debug')\n+        if (response) {\n+            BStackLogger.info(`Upload response: ${JSON.stringify(response, null, 2)}`)\n+            BStackLogger.logToFile(`Response - ${format(response)}`, 'debug')\n+        }\n     }\n \n     _updateObjectTypeCaps(capabilities?: Capabilities.TestrunnerCapabilities, capType?: string, value?: { [key: string]: unknown }) {\n\ndiff --git a/packages/wdio-browserstack-service/src/service.ts b/packages/wdio-browserstack-service/src/service.ts\nindex 80a3d89e2f4..38c8209e0db 100644\n--- a/packages/wdio-browserstack-service/src/service.ts\n+++ b/packages/wdio-browserstack-service/src/service.ts\n@@ -553,7 +553,7 @@ export default class BrowserstackService implements Services.ServiceInstance {\n         return this._executeCommand('annotate', { data, level: 'info' })\n     }\n \n-    private async _executeCommand<T = unknown>(\n+    private async _executeCommand(\n         action: string,\n         args?: object,\n     ) {\n@@ -568,11 +568,11 @@ export default class BrowserstackService implements Services.ServiceInstance {\n             const multiRemoteBrowser = this._browser as unknown as WebdriverIO.MultiRemoteBrowser\n             return Promise.all(Object.keys(this._caps).map(async (browserName) => {\n                 const browser = multiRemoteBrowser.getInstance(browserName)\n-                return (await browser.execute<T, []>(script))\n+                return (await browser.executeScript(script, []))\n             }))\n         }\n \n-        return (await this._browser.execute<T, []>(script))\n+        return (await this._browser.executeScript(script, []))\n     }\n \n     private saveWorkerData() {\n\ndiff --git a/packages/wdio-browserstack-service/src/util.ts b/packages/wdio-browserstack-service/src/util.ts\nindex d1be4a68fbb..08692088df5 100644\n--- a/packages/wdio-browserstack-service/src/util.ts\n+++ b/packages/wdio-browserstack-service/src/util.ts\n@@ -43,7 +43,6 @@ import {\n } from './constants.js'\n import CrashReporter from './crash-reporter.js'\n import { BStackLogger } from './bstackLogger.js'\n-import { FileStream } from './fileStream.js'\n import UsageStats from './testOps/usageStats.js'\n import TestOpsConfig from './testOps/testOpsConfig.js'\n \n@@ -563,9 +562,12 @@ export const performA11yScan = async (isAppAutomate: boolean, browser: Webdriver\n             BStackLogger.debug(util.format(results as string))\n             return ( results as { [key: string]: any; } | undefined )\n         }\n-        const results: unknown = await (browser as WebdriverIO.Browser).executeAsync(AccessibilityScripts.performScan as string, { 'method': commandName || '' })\n-        BStackLogger.debug(util.format(results as string))\n-        return ( results as { [key: string]: unknown; } | undefined )\n+        if (AccessibilityScripts.performScan) {\n+            const results = await executeAccessibilityScript(browser, AccessibilityScripts.performScan, { method: commandName || '' })\n+            return ( results as { [key: string]: unknown; } | undefined )\n+        }\n+        BStackLogger.error('AccessibilityScripts.performScan is null')\n+        return\n     } catch (err) {\n         BStackLogger.error('Accessibility Scan could not be performed : ' + err)\n         return\n@@ -586,8 +588,12 @@ export const getA11yResults = async (isAppAutomate: boolean, browser: WebdriverI\n     try {\n         BStackLogger.debug('Performing scan before getting results')\n         await performA11yScan(isAppAutomate, browser, isBrowserStackSession, isAccessibility)\n-        const results: Array<{ [key: string]: unknown }> = await (browser as WebdriverIO.Browser).executeAsync(AccessibilityScripts.getResults as string)\n-        return results\n+        if (AccessibilityScripts.getResults) {\n+            const results: Array<{ [key: string]: unknown }> = await executeAccessibilityScript(browser, AccessibilityScripts.getResults)\n+            return results\n+        }\n+        BStackLogger.error('AccessibilityScripts.getResults is null')\n+        return []\n     } catch (error: any) {\n         BStackLogger.error('No accessibility results were found.')\n         BStackLogger.debug(`getA11yResults Failed. Error: ${error}`)\n@@ -664,8 +670,12 @@ export const getA11yResultsSummary = async (isAppAutomate: boolean, browser: Web\n     try {\n         BStackLogger.debug('Performing scan before getting results summary')\n         await performA11yScan(isAppAutomate, browser, isBrowserStackSession, isAccessibility)\n-        const summaryResults: { [key: string]: unknown; } = await (browser as WebdriverIO.Browser).executeAsync(AccessibilityScripts.getResultsSummary as string)\n-        return summaryResults\n+        if (AccessibilityScripts.getResultsSummary) {\n+            const summaryResults: { [key: string]: unknown; } = await executeAccessibilityScript(browser, AccessibilityScripts.getResultsSummary)\n+            return summaryResults\n+        }\n+        BStackLogger.error('AccessibilityScripts.getResultsSummary is null')\n+        return {}\n     } catch {\n         BStackLogger.error('No accessibility summary was found.')\n         return {}\n@@ -1320,27 +1330,40 @@ export async function uploadLogs(user: string | undefined, key: string | undefin\n         BStackLogger.debug('Uploading logs failed due to no credentials')\n         return\n     }\n-    const fileStream = fs.createReadStream(BStackLogger.logFilePath)\n-    const uploadAddress = UPLOAD_LOGS_ADDRESS\n-    const zip = zlib.createGzip({ level: 1 })\n-    fileStream.pipe(zip)\n \n-    const formData = new FormData()\n-    formData.append('data', new FileStream(zip), 'logs.gz')\n-    formData.append('clientBuildUuid', clientBuildUuid)\n+    try {\n+        const fileContent = await fs.promises.readFile(BStackLogger.logFilePath)\n+        const uploadAddress = UPLOAD_LOGS_ADDRESS\n+        const compressed = await new Promise<Buffer>((resolve, reject) => {\n+            zlib.gzip(fileContent, { level: 1 }, (err, result) => {\n+                if (err) {\n+                    reject(err)\n+                } else {\n+                    resolve(result)\n+                }\n+            })\n+        })\n+        const formData = new FormData()\n+        formData.append('data', new Blob([compressed]), 'logs.gz')\n+        formData.append('clientBuildUuid', clientBuildUuid)\n \n-    const requestOptions: RequestInit = {\n-        body: formData as BodyInit,\n-        headers: {\n-            'Authorization': getBasicAuthHeader(user, key)\n-        }\n-    }\n+        const requestOptions: RequestInit = {\n+            method: 'POST',\n+            body: formData as unknown as BodyInit,\n+            headers: {\n+                'Authorization': getBasicAuthHeader(user, key)\n+            }\n+        } satisfies RequestInit\n \n-    const response = await nodeRequest(\n-        'POST', UPLOAD_LOGS_ENDPOINT, requestOptions, uploadAddress\n-    )\n+        const response = await nodeRequest(\n+            'POST', UPLOAD_LOGS_ENDPOINT, requestOptions, uploadAddress\n+        )\n \n-    return response\n+        return response\n+    } catch (error) {\n+        BStackLogger.debug(`Error in uploading logs: ${error}`)\n+        throw error\n+    }\n }\n \n export const isObject = (object: unknown) => {\n@@ -1566,3 +1589,19 @@ async function makeGetRequest(url: string, params: Record<string, any>, headers:\n \n     return response\n }\n+\n+export async function executeAccessibilityScript<ReturnType>(\n+    browser: any,\n+    fnBody: string,\n+    arg?: unknown\n+): Promise<ReturnType> {\n+    return browser.execute(\n+        `return (function (...bstackSdkArgs) {\n+            return new Promise((resolve, reject) => {\n+                const data = bstackSdkArgs[0];\n+                bstackSdkArgs.push(resolve);\n+                ${fnBody.replace(/arguments/g, 'bstackSdkArgs')}\n+            });\n+        })(${arg ? JSON.stringify(arg) : ''})`\n+    )\n+}\n",
    "test_patch": "diff --git a/packages/wdio-browserstack-service/tests/service.test.ts b/packages/wdio-browserstack-service/tests/service.test.ts\nindex cd238862ed0..13bcc037ca3 100644\n--- a/packages/wdio-browserstack-service/tests/service.test.ts\n+++ b/packages/wdio-browserstack-service/tests/service.test.ts\n@@ -42,6 +42,7 @@ beforeEach(() => {\n \n     browser = {\n         execute: vi.fn(),\n+        executeScript: vi.fn(),\n         on: vi.fn(),\n         sessionId: sessionId,\n         config: {},\n@@ -605,8 +606,12 @@ describe('beforeTest', () => {\n \n     describe('sessionNamePrependTopLevelSuiteTitle is true', () => {\n         it('should set title for Mocha tests using concatenation of top level suite name, innermost suite name, and test title', async () => {\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n             const service = new BrowserstackService({ sessionNamePrependTopLevelSuiteTitle: true } as any, [] as any, { user: 'foo', key: 'bar' } as any)\n-            await service.before(service['_config'] as any, [], browser)\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeSuite({ title: 'Project Title' } as any)\n             expect(service['_fullTitle']).toBe('Project Title')\n             await service.beforeTest({ title: 'Test Title', parent: 'Suite Title' } as any)\n@@ -636,7 +641,11 @@ describe('beforeTest', () => {\n             service = new BrowserstackService({ sessionNameOmitTestTitle: true } as any, [] as any, { user: 'foo', key: 'bar' } as any)\n         })\n         it('should not set title for Mocha tests', async () => {\n-            await service.before(service['_config'] as any, [], browser)\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeSuite({ title: 'Suite Title' } as any)\n             expect(service['_fullTitle']).toBe('Suite Title')\n             await service.beforeTest({ title: 'bar', parent: 'Suite Title' } as any)\n@@ -660,7 +669,11 @@ describe('beforeTest', () => {\n             service = new BrowserstackService({ sessionNameOmitTestTitle: true, sessionNamePrependTopLevelSuiteTitle: true } as any, [] as any, { user: 'foo', key: 'bar' } as any)\n         })\n         it('should set title for Mocha tests using concatenation of top level suite name and innermost suite name', async () => {\n-            await service.before(service['_config'] as any, [], browser)\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeSuite({ title: 'Project Title' } as any)\n             expect(service['_fullTitle']).toBe('Project Title')\n             await service.beforeTest({ title: 'Test Title', parent: 'Suite Title' } as any)\n@@ -703,8 +716,12 @@ describe('beforeTest', () => {\n             } as any)\n         })\n         it('should set title via sessionNameFormat method', async () => {\n-            await service.before(service['_config'] as any, [], browser)\n-            service['_browser'] = browser\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n+            service['_browser'] = browserWithExecuteScript\n             service['_suiteTitle'] = 'Suite Title'\n             await service.beforeSuite({ title: 'Suite Title' } as any)\n             expect(service['_fullTitle']).toBe('barfoo - foobar - Suite Title')\n@@ -732,7 +749,11 @@ describe('beforeTest', () => {\n \n     describe('Jasmine only', () => {\n         it('should set suite name of first test as title', async () => {\n-            await service.before(service['_config'] as any, [], browser)\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeSuite({ title: jasmineSuiteTitle } as any)\n             await service.beforeTest({ fullName: 'foo bar baz', description: 'baz' } as any)\n             service.afterTest({ fullName: 'foo bar baz', description: 'baz' } as any, undefined as never, {} as any)\n@@ -748,7 +769,11 @@ describe('beforeTest', () => {\n         })\n \n         it('should set parent suite name as title', async () => {\n-            await service.before(service['_config'] as any, [], browser)\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeSuite({ title: jasmineSuiteTitle } as any)\n             await service.beforeTest({ fullName: 'foo bar baz', description: 'baz' } as any)\n             await service.beforeTest({ fullName: 'foo xyz', description: 'xyz' } as any)\n@@ -1020,8 +1045,11 @@ describe('after', () => {\n                 { user: 'foo', key: 'bar', cucumberOpts: { strict: true } } as any)\n \n             const updateSpy = vi.spyOn(service, '_update')\n-\n-            await service.before(service['_config'] as any, [], browser)\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeFeature(null, { name: 'Feature1' })\n \n             await service.afterScenario({ pickle: { name: 'Can do something but pending 1' },  result: { status: 'PENDING' } as any })\n@@ -1045,8 +1073,11 @@ describe('after', () => {\n                 { user: 'foo', key: 'bar', cucumberOpts: { strict: false } } as any)\n \n             const updateSpy = vi.spyOn(service, '_update')\n-\n-            await service.before(service['_config'] as any, [], browser)\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeFeature(null, { name: 'Feature1' })\n \n             await service.afterScenario({ pickle: { name: 'Can do something' },  result: { status: 'PASSED' } as any })\n@@ -1067,8 +1098,11 @@ describe('after', () => {\n                 { user: 'foo', key: 'bar', cucumberOpts: { strict: true } } as any)\n \n             const updateSpy = vi.spyOn(service, '_update')\n-\n-            await service.before(service['_config'] as any, [], browser)\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeFeature(null, { name: 'Feature1' })\n \n             await service.afterScenario({ pickle: { name: 'Can do something 1' },  result: { status: 'PASSED' } as any })\n@@ -1087,8 +1121,11 @@ describe('after', () => {\n \n         it('should call _update with status \"passed\" when all tests are skipped', async () => {\n             const updateSpy = vi.spyOn(service, '_update')\n-\n-            await service.before(service['_config'] as any, [], browser)\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeFeature(null, { name: 'Feature1' })\n \n             await service.afterScenario({ pickle: { name: 'Can do something skipped 1' },  result: { status: 'SKIPPED' } as any })\n@@ -1109,9 +1146,12 @@ describe('after', () => {\n \n             const updateSpy = vi.spyOn(service, '_update')\n             const afterSpy = vi.spyOn(service, 'after')\n-\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n             await service.beforeSession(service['_config'] as any)\n-            await service.before(service['_config'] as any, [], browser)\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeFeature(null, { name: 'Feature1' })\n \n             expect(updateSpy).toHaveBeenCalledWith(service['_browser']?.sessionId, {\n@@ -1139,9 +1179,12 @@ describe('after', () => {\n \n         it('should call _update with status \"failed\" when strict mode is \"off\" and only failed and pending tests ran', async () => {\n             const updateSpy = vi.spyOn(service, '_update')\n-\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n             await service.beforeSession(service['_config'] as any)\n-            await service.before(service['_config'] as any, [], browser)\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeFeature(null, { name: 'Feature1' })\n \n             expect(updateSpy).toHaveBeenCalledWith(service['_browser']?.sessionId, {\n@@ -1177,7 +1220,11 @@ describe('after', () => {\n                     it(`should call _update /w status failed and name of Scenario when single \"${status}\" Scenario ran`, async () => {\n                         service = new BrowserstackService({ testObservability: false, preferScenarioName : true } as any, [] as any,\n                             { user: 'foo', key: 'bar', cucumberOpts: { strict: false } } as any)\n-                        service.before({}, [], browser)\n+                        const browserWithExecuteScript = {\n+                            ...browser,\n+                            executeScript: browser.execute\n+                        } as WebdriverIO.Browser\n+                        service.before({}, [], browserWithExecuteScript)\n \n                         const updateSpy = vi.spyOn(service, '_update')\n \n@@ -1192,7 +1239,11 @@ describe('after', () => {\n                 it('should call _update /w status passed and name of Scenario when single \"passed\" Scenario ran', async () => {\n                     service = new BrowserstackService({ testObservability: false, preferScenarioName : true } as any, [] as any,\n                         { user: 'foo', key: 'bar', cucumberOpts: { strict: false } } as any)\n-                    service.before({}, [], browser)\n+                    const browserWithExecuteScript = {\n+                        ...browser,\n+                        executeScript: browser.execute\n+                    } as WebdriverIO.Browser\n+                    service.before({}, [], browserWithExecuteScript)\n \n                     const updateSpy = vi.spyOn(service, '_update')\n \n@@ -1217,7 +1268,11 @@ describe('after', () => {\n                     it(`should call _update /w status failed and name of Feature when single \"${status}\" Scenario ran`, async () => {\n                         service = new BrowserstackService({ testObservability: false, preferScenarioName : false } as any, [] as any,\n                             { user: 'foo', key: 'bar', cucumberOpts: { strict: false } } as any)\n-                        service.before({}, [], browser)\n+                        const browserWithExecuteScript = {\n+                            ...browser,\n+                            executeScript: browser.execute\n+                        } as WebdriverIO.Browser\n+                        service.before({}, [], browserWithExecuteScript)\n \n                         const updateSpy = vi.spyOn(service, '_update')\n \n@@ -1238,7 +1293,11 @@ describe('after', () => {\n                 it('should call _update /w status passed and name of Feature when single \"passed\" Scenario ran', async () => {\n                     service = new BrowserstackService({ testObservability: false, preferScenarioName : false } as any, [] as any,\n                         { user: 'foo', key: 'bar', cucumberOpts: { strict: false } } as any)\n-                    service.before({}, [], browser)\n+                    const browserWithExecuteScript = {\n+                        ...browser,\n+                        executeScript: browser.execute\n+                    } as WebdriverIO.Browser\n+                    service.before({}, [], browserWithExecuteScript)\n \n                     const updateSpy = vi.spyOn(service, '_update')\n \n@@ -1291,7 +1350,12 @@ describe('_updateCaps', () => {\n describe('setAnnotation', () => {\n     describe('Cucumber', () => {\n         it('should correctly annotate Features, Scenarios, and Steps', async () => {\n-            await service.before(service['_config'] as any, [], browser)\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n+            const service = new BrowserstackService({ sessionNamePrependTopLevelSuiteTitle: true } as any, [] as any, { user: 'foo', key: 'bar' } as any)\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeFeature(null, { name: 'Feature1' })\n             await service.beforeScenario({ pickle: { name: 'foobar' } })\n             const step = {\n@@ -1302,29 +1366,37 @@ describe('setAnnotation', () => {\n             }\n             await service.beforeStep(step)\n             expect(browser.execute).toBeCalledTimes(3)\n-            expect(browser.execute).toBeCalledWith('browserstack_executor: {\"action\":\"annotate\",\"arguments\":{\"data\":\"Feature: Feature1\",\"level\":\"info\"}}')\n-            expect(browser.execute).toBeCalledWith('browserstack_executor: {\"action\":\"annotate\",\"arguments\":{\"data\":\"Scenario: foobar\",\"level\":\"info\"}}')\n-            expect(browser.execute).toBeCalledWith('browserstack_executor: {\"action\":\"annotate\",\"arguments\":{\"data\":\"Step: Given I am a step\",\"level\":\"info\"}}')\n+            expect(browserWithExecuteScript.executeScript).toHaveBeenNthCalledWith(1, 'browserstack_executor: {\"action\":\"annotate\",\"arguments\":{\"data\":\"Feature: Feature1\",\"level\":\"info\"}}', [])\n+            expect(browserWithExecuteScript.executeScript).toHaveBeenNthCalledWith(2, 'browserstack_executor: {\"action\":\"annotate\",\"arguments\":{\"data\":\"Scenario: foobar\",\"level\":\"info\"}}', [])\n+            expect(browserWithExecuteScript.executeScript).toHaveBeenNthCalledWith(3, 'browserstack_executor: {\"action\":\"annotate\",\"arguments\":{\"data\":\"Step: Given I am a step\",\"level\":\"info\"}}', [])\n         })\n     })\n \n     describe('Jasmine', () => {\n         it('should correctly annotate Tests', async () => {\n-            await service.before(service['_config'] as any, [], browser)\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeSuite({ title: jasmineSuiteTitle } as any)\n             await service.beforeTest({ fullName: 'foo bar baz', description: 'baz' } as any)\n             expect(browser.execute).toBeCalledTimes(1)\n-            expect(browser.execute).toBeCalledWith('browserstack_executor: {\"action\":\"annotate\",\"arguments\":{\"data\":\"Test: foo bar baz\",\"level\":\"info\"}}')\n+            expect(browser.execute).toBeCalledWith('browserstack_executor: {\"action\":\"annotate\",\"arguments\":{\"data\":\"Test: foo bar baz\",\"level\":\"info\"}}', [])\n         })\n     })\n \n     describe('Mocha', () => {\n         it('should correctly annotate Tests', async () => {\n-            await service.before(service['_config'] as any, [], browser)\n+            const browserWithExecuteScript = {\n+                ...browser,\n+                executeScript: browser.execute\n+            } as WebdriverIO.Browser\n+            await service.before(service['_config'] as any, [], browserWithExecuteScript)\n             await service.beforeSuite({ title: 'My Feature' } as any)\n             await service.beforeTest({ title: 'Test Title', parent: 'Suite Title' } as any)\n             expect(browser.execute).toBeCalledTimes(1)\n-            expect(browser.execute).toBeCalledWith('browserstack_executor: {\"action\":\"annotate\",\"arguments\":{\"data\":\"Test: Test Title\",\"level\":\"info\"}}')\n+            expect(browser.execute).toBeCalledWith('browserstack_executor: {\"action\":\"annotate\",\"arguments\":{\"data\":\"Test: Test Title\",\"level\":\"info\"}}', [])\n         })\n     })\n })\n\ndiff --git a/packages/wdio-browserstack-service/tests/util.test.ts b/packages/wdio-browserstack-service/tests/util.test.ts\nindex 76b2d5c7361..5d733fc09eb 100644\n--- a/packages/wdio-browserstack-service/tests/util.test.ts\n+++ b/packages/wdio-browserstack-service/tests/util.test.ts\n@@ -56,6 +56,8 @@ import {\n import * as bstackLogger from '../src/bstackLogger.js'\n import { BROWSERSTACK_OBSERVABILITY, TESTOPS_BUILD_COMPLETED_ENV, BROWSERSTACK_TESTHUB_JWT, BROWSERSTACK_ACCESSIBILITY } from '../src/constants.js'\n import * as testHubUtils from '../src/testHub/utils.js'\n+import * as fs from 'node:fs/promises'\n+import * as os from 'node:os'\n \n const log = logger('test')\n \n@@ -77,6 +79,17 @@ vi.mock('fs', () => ({\n \n vi.mock('./fileStream')\n \n+vi.mock('fs', async (importOriginal) => {\n+    const actual = await importOriginal()\n+    return {\n+        ...actual,\n+        promises: {\n+            readFile: vi.fn().mockImplementation((path) =>\n+                fs.readFile(path))\n+        }\n+    }\n+})\n+\n const bstackLoggerSpy = vi.spyOn(bstackLogger.BStackLogger, 'logToFile')\n bstackLoggerSpy.mockImplementation(() => {})\n \n@@ -1125,12 +1138,17 @@ describe('getA11yResults', () => {\n         expect(result).toEqual([])\n     })\n \n-    it('return results object if bstack as well as accessibility session', async () => {\n+    it('should call executeAccessibilityScript if bstack and accessibility session are enabled', async () => {\n         process.env.BSTACK_A11Y_JWT = 'abc'\n         vi.spyOn(utils, 'isAccessibilityAutomationSession').mockReturnValue(true)\n-        await utils.getA11yResults(false, browser as WebdriverIO.Browser, true, true)\n+        const executeAccessibilityScriptSpy = vi\n+            .spyOn(utils, 'executeAccessibilityScript')\n+            .mockResolvedValue(undefined)\n+        vi.spyOn(AccessibilityScripts, 'getResults', 'get').mockReturnValue('mocked_results_script')\n+        const results = await utils.getA11yResults(false, browser as WebdriverIO.Browser, true, true)\n+        expect(results).toEqual(undefined)\n+        executeAccessibilityScriptSpy.mockRestore()\n         delete process.env.BSTACK_A11Y_JWT\n-        expect(browser.executeAsync).toBeCalledTimes(2)\n     })\n })\n \n@@ -1173,16 +1191,16 @@ describe('getA11yResultsSummary', () => {\n         expect(result).toEqual({})\n     })\n \n-    it('return results object if bstack as well as accessibility session', async () => {\n+    it('returns results object for an accessibility session', async () => {\n         process.env.BSTACK_A11Y_JWT = 'abc'\n+        AccessibilityScripts.getResultsSummary = 'mockScript'\n         vi.spyOn(utils, 'isAccessibilityAutomationSession').mockReturnValue(true)\n-        browser.executeAsync = vi.fn()\n-            .mockResolvedValueOnce({ total: 5, critical: 2 })  // First call result\n-            .mockResolvedValueOnce({ summary: { total: 5, critical: 2 } })  // Second call result\n-\n-        await utils.getA11yResultsSummary(false, browser as WebdriverIO.Browser, true, true)\n+        const mockExecuteAccessibilityScript = vi\n+            .spyOn(utils, 'executeAccessibilityScript')\n+            .mockResolvedValue({ })\n+        const result = await utils.getA11yResultsSummary(false, {} as WebdriverIO.Browser, true, true)\n         delete process.env.BSTACK_A11Y_JWT\n-        expect(browser.executeAsync).toBeCalledTimes(2)\n+        expect(result).toEqual({ })\n     })\n })\n \n@@ -1258,7 +1276,11 @@ describe('frameworkSupportsHook', function () {\n })\n \n describe('uploadLogs', function () {\n-    beforeAll(() => {\n+    let tempLogFile: string\n+    beforeAll(async () => {\n+        tempLogFile = path.join(os.tmpdir(), 'test-logs.txt')\n+        await fs.writeFile(tempLogFile, 'mock log content')\n+        bstackLogger.BStackLogger.logFilePath = tempLogFile\n         vi.mocked(fetch).mockClear()\n         vi.mocked(fetch).mockReturnValueOnce(Promise.resolve(Response.json({ status: 'success', message: 'Logs uploaded Successfully' })))\n     })\n@@ -1274,8 +1296,10 @@ describe('uploadLogs', function () {\n         await uploadLogs('some_user', 'some_key', 'some_uuid')\n         expect(fetch).toHaveBeenCalled()\n     })\n-    afterAll(() => {\n+    afterAll(async () => {\n+        await fs.unlink(tempLogFile)\n         vi.mocked(fetch).mockClear()\n+        vi.restoreAllMocks()\n     })\n })\n \n@@ -1494,16 +1518,22 @@ describe('jsonifyAccessibilityArray', () => {\n })\n \n describe('logPatcher', () => {\n-    const BSTestOpsPatcher = new logPatcher({})\n-    const emitSpy = vi.spyOn(process, 'emit')\n+    let emitSpy: jest.SpyInstance\n+    beforeEach(() => {\n+        emitSpy = vi.spyOn(process, 'emit') as unknown as vi.SpyInstance\n+    })\n+    afterEach(() => {\n+        emitSpy.mockRestore()\n+    })\n     it('logPatcher methods should emit data', () => {\n+        const BSTestOpsPatcher = new logPatcher({})\n         BSTestOpsPatcher.info('abc')\n         BSTestOpsPatcher.error('abc')\n         BSTestOpsPatcher.warn('abc')\n         BSTestOpsPatcher.trace('abc')\n         BSTestOpsPatcher.debug('abc')\n         BSTestOpsPatcher.log('abc')\n-        expect(emitSpy).toBeCalled()\n+        expect(emitSpy).toHaveBeenCalled()\n     })\n })\n \n@@ -1696,9 +1726,6 @@ describe('performA11yScan', () => {\n     it('should perform web accessibility scan when isAppAutomate is false', async () => {\n         const mockResults = { success: true }\n \n-        const mockScanScript = 'scan script for web: %s'\n-        vi.spyOn(AccessibilityScripts, 'performScan', 'get').mockReturnValue(mockScanScript)\n-\n         const browser = {\n             execute: vi.fn().mockResolvedValue(mockResults),\n             executeAsync: vi.fn().mockResolvedValue(mockResults),\n@@ -1711,16 +1738,15 @@ describe('performA11yScan', () => {\n         process.env.BSTACK_A11Y_JWT = 'auth-abc'\n \n         vi.spyOn(utils, 'isAccessibilityAutomationSession').mockReturnValue(true)\n-        vi.spyOn(utils, 'isAppAccessibilityAutomationSession').mockReturnValue(false) // Set to false for this test\n+        vi.spyOn(utils, 'isAppAccessibilityAutomationSession').mockReturnValue(false)\n+        vi.spyOn(AccessibilityScripts, 'performScan', 'get').mockReturnValue('scan_script_for_web')\n \n         const result = await performA11yScan(false, browser, true, true, 'clickElement')\n \n         expect(result).toEqual(mockResults)\n-        expect(browser.executeAsync).toHaveBeenCalledWith(\n-            expect.stringContaining('scan script for web:'),\n-            { method: 'clickElement' }\n+        expect(browser.execute).toHaveBeenCalledWith(\n+            expect.stringContaining('scan_script_for_web'),\n         )\n-\n         delete process.env.TEST_ANALYTICS_ID\n         delete process.env.BROWSERSTACK_TESTHUB_UUID\n         delete process.env.BROWSERSTACK_TESTHUB_JWT\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14113",
    "pr_id": 14113,
    "issue_id": 14112,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: waitForDisplayed({ reverse: true }) functions differently in v9.6.2\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n>=9.6.2\n\n### Node.js Version\n\n20\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\ncapabilities: [{\n        browserName: 'chrome'\n    }],\n```\n\n### What happened?\n\nwhen checking `waitForDisplayed({reverse:true})` if the element isn't present it errors and fails\n\n### What is your expected behavior?\n\nIt should not error out\n\nIt works in versions <9.6.2\nMy guess would be something in this PR https://github.com/webdriverio/webdriverio/pull/14103\n\n### How to reproduce the bug.\n\n```typescript\nawait browser.url(`https://v4.mui.com/components/modal/`)\n\nconst button = await $('button=Open Modal').getElement();\nconst modal = await $('h2#simple-modal-title').getElement();\nawait expect(modal).not.toBeDisplayed();\nawait button.click();\nawait expect(modal).toBeDisplayed();\nawait browser.action('pointer').move({  x: 0, y: 0 })\n.down({ button: 0 }) // left button\n.perform()\nawait modal.waitForDisplayed({ reverse: true });\n```\n\n### Relevant log output\n\n```typescript\n[0-0] Error in \"My Login application.should login with valid credentials\"\nError: waitUntil condition failed with the following reason: Can't call getElementCSSValue on element with selector \"h2#simple-modal-title\" because element wasn't found\n    at implicitWait (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\build\\node.js:523:13)\n    at async <anonymous> (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\build\\node.js:544:12)\n    at async Element.elementErrorHandlerCallbackFn (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\build\\node.js:7944:28)\n    at async Element.wrapCommandFn (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async Element.getPropertyCSSValue (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\build\\node.js:6143:10)\n    at async Element.getCSSProperty (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\build\\node.js:6103:21)\n    at async Element.wrapCommandFn (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async Element.elementErrorHandlerCallbackFn (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\build\\node.js:7921:24)\n    at async Element.wrapCommandFn (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async Promise.all (index 1)\n    ---\n    at <anonymous> (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\build\\node.js:5577:17)\n    at async Element.wrapCommandFn (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async Element.elementErrorHandlerCallbackFn (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\build\\node.js:7921:24)\n    at async Element.wrapCommandFn (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async Element.wrapCommandFn (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async Element.elementErrorHandlerCallbackFn (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\build\\node.js:7921:24)\n    at async Element.wrapCommandFn (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\webdriverio\\node_modules\\@wdio\\utils\\build\\index.js:893:23)\n    at async Context.<anonymous> (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\test\\specs\\test.e2e.ts:14:9)\n    at async Context.executeAsync (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\@wdio\\utils\\build\\index.js:1013:20)\n    at async Context.testFrameworkFnWrapper (C:\\Users\\josh\\Documents\\git\\wdio-test\\e2e\\node_modules\\@wdio\\utils\\build\\index.js:1084:14)\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 625,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/element/isDisplayed.ts",
      "packages/webdriverio/tests/commands/element/isDisplayed.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/element/isDisplayed.test.ts"
    ],
    "base_commit": "29ad74e52d121774b3a82b41a1fd533b49ad32cc",
    "head_commit": "298bbf3cd7cf4a193b24fa27f218e688dd2c39af",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14113",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14113",
    "dockerfile": "",
    "pr_merged_at": "2025-01-24T23:28:40.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/element/isDisplayed.ts b/packages/webdriverio/src/commands/element/isDisplayed.ts\nindex b680ed198b0..55db202cd31 100644\n--- a/packages/webdriverio/src/commands/element/isDisplayed.ts\n+++ b/packages/webdriverio/src/commands/element/isDisplayed.ts\n@@ -141,7 +141,10 @@ export async function isDisplayed (\n             }\n             throw err\n         }),\n-        this.getCSSProperty('display')\n+        /**\n+         * don't fail if element is not existing\n+         */\n+        this.getCSSProperty('display').catch(() => ({ value: '' }))\n     ])\n \n     /**\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/element/isDisplayed.test.ts b/packages/webdriverio/tests/commands/element/isDisplayed.test.ts\nindex b9686649107..82ad8406c38 100644\n--- a/packages/webdriverio/tests/commands/element/isDisplayed.test.ts\n+++ b/packages/webdriverio/tests/commands/element/isDisplayed.test.ts\n@@ -159,7 +159,7 @@ describe('isDisplayed test', () => {\n         elem.selector = '#nonexisting'\n         // @ts-ignore mock feature\n         vi.mocked(fetch).setMockResponse([\n-            { value: 'block' },\n+            { error: 'no such element', statusCode: 404 },\n             { error: 'no such element', statusCode: 404 }\n         ])\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14103",
    "pr_id": 14103,
    "issue_id": 14098,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: element.isDisplayed() is no longer true for elements with `display: contents`\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\nv20\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\n{\n  browserName: 'chrome'\n}\n```\n\n### What happened?\n\nA recent change (https://github.com/webdriverio/webdriverio/commit/ea3f50b7780a7f43b230749a98e6c40451ec7f3d) to the element.isDisplayed() to utilise the browser's checkVisibility() method introduced a regression. Now this method returns `false` when targeting elements with CSS `display: contents`.\n\n### What is your expected behavior?\n\nI think the element.isDisplayed() should actually return `true` in such cases provided the actual contents of the target element are displayed. If not possible, then at least the documentation page should be updated accordingly: https://webdriver.io/docs/api/element/isDisplayed.\n\n### How to reproduce the bug.\n\nTo reproduce a bug, run the element.isVisibility() on an element with CSS `display: contents` that includes another element with the actually visible content.\n\n### Relevant log output\n\nThe logs are application specific as there is no exception thrown by the WebdriverIO - it is only that the result of the element.isDisplayed() is now different.\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 231,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "__mocks__/fetch.ts",
      "packages/wdio-webdriver-mock-service/src/index.ts",
      "packages/webdriverio/src/commands/element/isDisplayed.ts",
      "packages/webdriverio/tests/commands/element/isDisplayed.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/element/isDisplayed.test.ts"
    ],
    "base_commit": "940cd30939864bdbdacb2e94ee6e8ada9b1cc74c",
    "head_commit": "3e19bf2346079b305edf8a3c2aae19b914eae1a5",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14103",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14103",
    "dockerfile": "",
    "pr_merged_at": "2025-01-23T20:19:22.000Z",
    "patch": "diff --git a/__mocks__/fetch.ts b/__mocks__/fetch.ts\nindex 3e1c65ca673..4fee0b308be 100644\n--- a/__mocks__/fetch.ts\n+++ b/__mocks__/fetch.ts\n@@ -245,6 +245,9 @@ const requestMock: any = vi.fn().mockImplementation((uri, params) => {\n     case `${path}/${sessionId}/element/${genericElementId}/property/tagName`:\n         value = 'BODY'\n         break\n+    case `/session/${sessionId}/element/${genericElementId}/css/display`:\n+        value = 'contents'\n+        break\n     case `/session/${sessionId}/execute`:\n     case `/session/${sessionId}/execute/sync`: {\n         const script = Function(body.script)\n@@ -499,6 +502,11 @@ requestMock.setMockResponse = (value: any) => {\n     manualMockResponse = value\n }\n requestMock.customResponseFor = (pattern: RegExp, response: any) => {\n+    const existingEntry = Array.from(customResponses.values())\n+        .find((p) => p.pattern.toString() === pattern.toString())\n+    if (existingEntry) {\n+        customResponses.delete(existingEntry)\n+    }\n     customResponses.add({ pattern, response })\n }\n \n\ndiff --git a/packages/wdio-webdriver-mock-service/src/index.ts b/packages/wdio-webdriver-mock-service/src/index.ts\nindex 690848516fd..a6195d436bc 100644\n--- a/packages/wdio-webdriver-mock-service/src/index.ts\n+++ b/packages/wdio-webdriver-mock-service/src/index.ts\n@@ -34,6 +34,7 @@ export default class WebdriverMockService implements Services.ServiceInstance {\n         this._mock.command.getElementRect(ELEMENT_ID).times(2).reply(200, { value: { width: 1, height: 2, x: 3, y: 4 } })\n         this._mock.command.getElementRect(ELEMENT_ALT).times(3).reply(200, { value: { width: 10, height: 20, x: 30, y: 40 } })\n         this._mock.command.getElementRect(ELEMENT_REFETCHED).times(1).reply(200, { value: { width: 1, height: 2, x: 3, y: 4 } })\n+        this._mock.command.getElementCSSValue(ELEMENT_ID, 'display').times(Infinity).reply(200, { value: 'block' })\n         this._mock.command.getLogTypes().reply(200, { value: [] })\n     }\n \n\ndiff --git a/packages/webdriverio/src/commands/element/isDisplayed.ts b/packages/webdriverio/src/commands/element/isDisplayed.ts\nindex 0e0ab75f346..b680ed198b0 100644\n--- a/packages/webdriverio/src/commands/element/isDisplayed.ts\n+++ b/packages/webdriverio/src/commands/element/isDisplayed.ts\n@@ -87,12 +87,15 @@ import isElementInViewportScript from '../../scripts/isElementInViewport.js'\n  * </example>\n  *\n  * @alias element.isDisplayed\n- * @param {Boolean} [isWithinViewport=false] set to true to check if element is within viewport\n+ * @param {Boolean} [withinViewport=false] `true` to check if the element is within the viewport. `false` by default.\n+ * @param {Boolean} [contentVisibilityAuto=true] `true` to check if the element content-visibility property has (or inherits) the value auto, and it is currently skipping its rendering. `true` by default.\n+ * @param {Boolean} [opacityProperty=true] `true` to check if the element opacity property has (or inherits) a value of 0. `true` by default.\n+ * @param {Boolean} [visibilityProperty=true] `true` to check if the element is invisible due to the value of its visibility property. `true` by default.\n  * @return {Boolean} true if element is displayed\n  * @uses protocol/elements, protocol/elementIdDisplayed\n  * @type state\n- *\n  */\n+\n export async function isDisplayed (\n     this: WebdriverIO.Element,\n     commandParams: IsDisplayedParams = DEFAULT_PARAMS\n@@ -124,23 +127,39 @@ export async function isDisplayed (\n         return await this.isElementDisplayed(this.elementId)\n     }\n \n-    const isDisplayed = await browser.execute(function checkVisibility (elem, params) {\n-        return elem.checkVisibility(params)\n-    }, this as unknown as HTMLElement, commandParams).catch((err) => {\n-        /**\n-         * Fallback to legacy script if checkVisibility is not available\n-         */\n-        if (err.message.includes('checkVisibility is not a function')) {\n-            return browser.execute(isElementDisplayedLegacyScript, this as unknown as HTMLElement)\n-        }\n-        throw err\n-    })\n+    let hadToFallback = false\n+    const [isDisplayed, displayProperty] = await Promise.all([\n+        browser.execute(function checkVisibility (elem, params) {\n+            return elem.checkVisibility(params)\n+        }, this as unknown as HTMLElement, commandParams).catch((err) => {\n+            /**\n+             * Fallback to legacy script if checkVisibility is not available\n+             */\n+            if (err.message.includes('checkVisibility is not a function')) {\n+                hadToFallback = true\n+                return browser.execute(isElementDisplayedLegacyScript, this as unknown as HTMLElement)\n+            }\n+            throw err\n+        }),\n+        this.getCSSProperty('display')\n+    ])\n+\n+    /**\n+     * If the element is displayed with `display: contents` we need to recheck\n+     * the visibility as the element itself is not visible but its children are\n+     * (if there are any). Hence, we run the legacy script for it.\n+     */\n+    const hasDisplayContentsCSSProperty = displayProperty.value === 'contents'\n+    const shouldRecheckContentVisibility = !hadToFallback && hasDisplayContentsCSSProperty\n+    const finalResponse = shouldRecheckContentVisibility\n+        ? await browser.execute(isElementDisplayedLegacyScript, this as unknown as HTMLElement).catch(() => false)\n+        : isDisplayed\n \n-    if (isDisplayed && commandParams?.withinViewport) {\n+    if (finalResponse && commandParams?.withinViewport) {\n         return browser.execute(isElementInViewportScript, this as unknown as HTMLElement)\n     }\n \n-    return isDisplayed\n+    return finalResponse\n }\n \n const DEFAULT_PARAMS: IsDisplayedParams = {\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/element/isDisplayed.test.ts b/packages/webdriverio/tests/commands/element/isDisplayed.test.ts\nindex e19d9e43f2f..b9686649107 100644\n--- a/packages/webdriverio/tests/commands/element/isDisplayed.test.ts\n+++ b/packages/webdriverio/tests/commands/element/isDisplayed.test.ts\n@@ -28,12 +28,22 @@ describe('isDisplayed test', () => {\n             }\n         })\n         elem = await browser.$('#foo')\n+        elem.addCommand('checkVisibility', vi.fn())\n         vi.mocked(fetch).mockClear()\n     })\n \n     it('should allow to check if element is displayed', async () => {\n+        // @ts-expect-error mock feature\n+        fetch.customResponseFor(/\\/css\\/display/, { value: 'block' })\n         expect(await elem.isDisplayed()).toBe(true)\n-        expect(fetch).toBeCalledTimes(1)\n+\n+        /**\n+         * expect fetch to be called for\n+         *   - isElementDisplayed script\n+         *   - getCSSProperty for display property\n+         */\n+        expect(fetch).toBeCalledTimes(2)\n+\n         // @ts-expect-error mock implementation\n         expect(vi.mocked(fetch).mock.calls[0][0]!.pathname)\n             .toBe('/session/foobar-123/execute/sync')\n@@ -44,8 +54,10 @@ describe('isDisplayed test', () => {\n     })\n \n     it('should allow to check if element is displayed within viewport', async () => {\n+        // @ts-expect-error mock feature\n+        fetch.customResponseFor(/\\/css\\/display/, { value: 'block' })\n         expect(await elem.isDisplayed({ withinViewport: true })).toBe(true)\n-        expect(fetch).toBeCalledTimes(2)\n+        expect(fetch).toBeCalledTimes(3)\n         // @ts-expect-error mock implementation\n         expect(vi.mocked(fetch).mock.calls[0][0]!.pathname)\n             .toBe('/session/foobar-123/execute/sync')\n@@ -54,14 +66,28 @@ describe('isDisplayed test', () => {\n             'element-6066-11e4-a52e-4f735466cecf': 'some-elem-123',\n         })\n         // @ts-expect-error mock implementation\n-        expect(vi.mocked(fetch).mock.calls[1][0]!.pathname)\n+        expect(vi.mocked(fetch).mock.calls[2][0]!.pathname)\n             .toBe('/session/foobar-123/execute/sync')\n-        expect(JSON.parse(vi.mocked(fetch).mock.calls[1][1]?.body as any).args[0]).toEqual({\n+        expect(JSON.parse(vi.mocked(fetch).mock.calls[2][1]?.body as any).args[0]).toEqual({\n             ELEMENT: 'some-elem-123',\n             'element-6066-11e4-a52e-4f735466cecf': 'some-elem-123',\n         })\n     })\n \n+    it('should use legacy script if element has display: contents set', async () => {\n+        // @ts-expect-error mock feature\n+        fetch.customResponseFor(/\\/css\\/display/, { value: 'contents' })\n+        expect(await elem.isDisplayed()).toBe(true)\n+        expect(fetch).toBeCalledTimes(3)\n+\n+        // @ts-expect-error mock implementation\n+        expect(vi.mocked(fetch).mock.calls[0][0]!.pathname)\n+            .toBe('/session/foobar-123/execute/sync')\n+        // @ts-expect-error mock implementation\n+        expect(vi.mocked(fetch).mock.calls[2][0]!.pathname)\n+            .toBe('/session/foobar-123/execute/sync')\n+    })\n+\n     it('should allow to check if element is displayed in mobile mode without browserName', async () => {\n         browser = await remote({\n             baseUrl: 'http://foobar.com',\n@@ -100,7 +126,7 @@ describe('isDisplayed test', () => {\n         // @ts-ignore test scenario\n         delete elem.elementId\n         expect(await elem.isDisplayed()).toBe(true)\n-        expect(fetch).toBeCalledTimes(2)\n+        expect(fetch).toBeCalledTimes(4)\n         // @ts-expect-error mock implementation\n         expect(vi.mocked(fetch).mock.calls[0][0]!.pathname)\n             .toBe('/session/foobar-123/element')\n@@ -132,7 +158,10 @@ describe('isDisplayed test', () => {\n \n         elem.selector = '#nonexisting'\n         // @ts-ignore mock feature\n-        vi.mocked(fetch).setMockResponse([{ error: 'no such element', statusCode: 404 }])\n+        vi.mocked(fetch).setMockResponse([\n+            { value: 'block' },\n+            { error: 'no such element', statusCode: 404 }\n+        ])\n \n         expect(await elem.isDisplayed()).toBe(false)\n     })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14102",
    "pr_id": 14102,
    "issue_id": 14088,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Error: Couldn't find plugin \"dot\" reporter\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.5.7\n\n### Node.js Version\n\nv20.12.2\n\n### Mode\n\nWDIO Testrunner\n\n### What happened?\n\n> `[0-0] 2025-01-19T23:59:43.272Z ERROR @wdio/local-runner: Failed launching test session: Error: Couldn't find plugin \"dot\" reporter, neither as wdio scoped package \"@wdio/dot-reporter\" nor as community package \"wdio-dot-reporter\". Please make sure you have it installed!`\n\n### What is your expected behavior?\n\nTo work by default with only a dependency on `@wdio/cli`. Or for the first-party examples and docs to state what the new default is, or that there is none.\n\n### How to reproduce the bug.\n\n\nIn my case, I got it from https://webdriver.io/docs/gettingstarted:\n\n1. `npm init wdio@latest`\n2. select \"spec\" during wizard.\n3. review the generated config file, find it saying \"dot\" is supported by default.\n4. nice, change to \"dot\" and remove `@wdio/spec-reporter` dependency from package.json.\n5. We the above error. Not nice.\n\nI confirmed it also via https://webdriver.io/docs/configurationfile and the information is fairly widespread, e.g. 101 results in code search within this org, for `The only one supported by default is 'dot'`.\n\nhttps://github.com/search?q=org%3Awebdriverio+The+only+one+supported+by+default+is&type=code.\n\nIn the end, to reproduce the issue we have this `package.json`:\n\n```js\n{\n  \"name\": \"foo\",\n  \"type\": \"module\",\n  \"devDependencies\": {\n    \"@wdio/cli\": \"^9.5.7\",\n    \"@wdio/local-runner\": \"^9.5.7\"\n  },\n  \"scripts\": {\n    \"wdio\": \"wdio run ./wdio.conf.js\"\n  }\n}\n\n```\n\nAnd this `wdio.conf.js` file:\n\n```js\nexport const config = {\n    runner: 'local',\n    specs: [\n        './test/specs/**/*.js'\n    ],\n    maxInstances: 10,\n    capabilities: [{\n        browserName: 'chrome'\n    }],\n    logLevel: 'info',\n\n    // Test reporter for stdout.\n    // The only one supported by default is 'dot'\n    // see also: https://webdriver.io/docs/dot-reporter\n    reporters: ['dot']\n}\n```\n\nAnd the unchanged auto-generated example spec at `test/specs/test.e2e.js`:\n\n```js\nimport { expect, browser, $ } from '@wdio/globals'\n\ndescribe('My Login application', () => {\n    it('should login with valid credentials', async () => {\n        await browser.url(`https://the-internet.herokuapp.com/login`)\n\n        await $('#username').setValue('tomsmith')\n        await $('#password').setValue('SuperSecretPassword!')\n        await $('button[type=\"submit\"]').click()\n\n        await expect($('#flash')).toBeExisting()\n        await expect($('#flash')).toHaveText(\n            expect.stringContaining('You logged into a secure area!'))\n    })\n})\n```\n\nThen this command fails with the given error.\n\n```\nwdio run ./wdio.conf.js\n```\n\n\n### Relevant log output\n\n```\nExecution of 1 workers started at 2025-01-20T05:41:02.965Z\n\n2025-01-20T05:41:02.979Z INFO @wdio/cli:launcher: Run onPrepare hook\n2025-01-20T05:41:02.981Z INFO @wdio/utils: Setting up browser driver for: chrome@stable\n2025-01-20T05:41:02.986Z INFO @wdio/utils: Setting up browser binaries for: chrome@stable\n2025-01-20T05:41:03.154Z INFO webdriver: Downloading Chromedriver v132.0.6834.83\n2025-01-20T05:41:03.288Z INFO webdriver: Setting up chrome v132.0.6834.83\n2025-01-20T05:41:04.698Z INFO webdriver: Download of Chromedriver v132.0.6834.83 was successful\n2025-01-20T05:41:28.114Z INFO @wdio/cli:launcher: Run onWorkerStart hook\n2025-01-20T05:41:28.115Z INFO @wdio/local-runner: Start worker 0-0 with arg: run ./wdio.conf.js\n[0-0] 2025-01-20T05:41:29.656Z INFO @wdio/local-runner: Run worker command: run\n[0-0] 2025-01-20T05:41:29.701Z ERROR @wdio/local-runner: Failed launching test session: Error: Couldn't find plugin \"dot\" reporter, neither as wdio scoped package \"@wdio/dot-reporter\" nor as community package \"wdio-dot-reporter\". Please make sure you have it installed!\n[0-0]     at initializePlugin (/Temp/foo/node_modules/@wdio/utils/build/index.js:479:9)\n[0-0]     at async BaseReporter._loadReporter (file:///Temp/foo/node_modules/@wdio/runner/build/index.js:606:24)\n[0-0]     at async Promise.all (index 0)\n[0-0]     at async BaseReporter.initReporters (file:///Temp/foo/node_modules/@wdio/runner/build/index.js:480:23)\n[0-0]     at async Runner.run (file:///Temp/foo/node_modules/@wdio/runner/build/index.js:684:5)\n[0-0] FAILED\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 714,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "packages/wdio-mocha-framework/package.json",
      "packages/wdio-runner/package.json",
      "packages/wdio-runner/src/reporter.ts",
      "packages/wdio-runner/tests/reporter.test.ts",
      "pnpm-lock.yaml"
    ],
    "pr_changed_test_files": [
      "packages/wdio-runner/tests/reporter.test.ts"
    ],
    "base_commit": "940cd30939864bdbdacb2e94ee6e8ada9b1cc74c",
    "head_commit": "8f9616ce73bc7ae18bf08eafcc73f7dec803ae46",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14102",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14102",
    "dockerfile": "",
    "pr_merged_at": "2025-01-23T19:42:12.000Z",
    "patch": "diff --git a/packages/wdio-mocha-framework/package.json b/packages/wdio-mocha-framework/package.json\nindex c071d44806d..45db46bd984 100644\n--- a/packages/wdio-mocha-framework/package.json\n+++ b/packages/wdio-mocha-framework/package.json\n@@ -38,9 +38,9 @@\n   \"dependencies\": {\n     \"@types/mocha\": \"^10.0.6\",\n     \"@types/node\": \"^20.11.28\",\n-    \"@wdio/logger\": \"workspace:9.4.4\",\n-    \"@wdio/types\": \"workspace:9.5.0\",\n-    \"@wdio/utils\": \"workspace:9.5.0\",\n+    \"@wdio/logger\": \"workspace:*\",\n+    \"@wdio/types\": \"workspace:*\",\n+    \"@wdio/utils\": \"workspace:*\",\n     \"mocha\": \"^10.3.0\"\n   },\n   \"publishConfig\": {\n\ndiff --git a/packages/wdio-runner/package.json b/packages/wdio-runner/package.json\nindex c953690ba47..9dd5fd02574 100644\n--- a/packages/wdio-runner/package.json\n+++ b/packages/wdio-runner/package.json\n@@ -32,15 +32,16 @@\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n     \"@types/node\": \"^20.11.28\",\n-    \"@wdio/config\": \"workspace:9.5.0\",\n-    \"@wdio/globals\": \"workspace:9.6.1\",\n-    \"@wdio/logger\": \"workspace:9.4.4\",\n-    \"@wdio/types\": \"workspace:9.5.0\",\n-    \"@wdio/utils\": \"workspace:9.5.0\",\n+    \"@wdio/config\": \"workspace:*\",\n+    \"@wdio/dot-reporter\": \"workspace:*\",\n+    \"@wdio/globals\": \"workspace:*\",\n+    \"@wdio/logger\": \"workspace:*\",\n+    \"@wdio/types\": \"workspace:*\",\n+    \"@wdio/utils\": \"workspace:*\",\n     \"deepmerge-ts\": \"^7.0.3\",\n     \"expect-webdriverio\": \"^5.0.1\",\n-    \"webdriver\": \"workspace:9.6.0\",\n-    \"webdriverio\": \"workspace:9.6.1\"\n+    \"webdriver\": \"workspace:*\",\n+    \"webdriverio\": \"workspace:*\"\n   },\n   \"publishConfig\": {\n     \"access\": \"public\"\n\ndiff --git a/packages/wdio-runner/src/reporter.ts b/packages/wdio-runner/src/reporter.ts\nindex ce5a7046ed3..d837b37cb37 100644\n--- a/packages/wdio-runner/src/reporter.ts\n+++ b/packages/wdio-runner/src/reporter.ts\n@@ -1,5 +1,6 @@\n import path from 'node:path'\n import logger from '@wdio/logger'\n+import DotReporter from '@wdio/dot-reporter'\n import { initializePlugin } from '@wdio/utils'\n import type { Options, Capabilities, Reporters } from '@wdio/types'\n \n@@ -19,7 +20,16 @@ export default class BaseReporter {\n         private _config: Options.Testrunner,\n         private _cid: string,\n         public caps: Capabilities.RequestedStandaloneCapabilities | Capabilities.RequestedMultiremoteCapabilities\n-    ) {}\n+    ) {\n+\n+        /**\n+         * make sure there is at least on default reporter set up (dot reporter is default)\n+         */\n+        this._config.reporters = this._config.reporters || []\n+        if (this._config.reporters.length === 0) {\n+            this._config.reporters.push([DotReporter, {}])\n+        }\n+    }\n \n     async initReporters () {\n         this._reporters = await Promise.all(\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex 21a2dd57769..df7cd66fd79 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -1116,13 +1116,13 @@ importers:\n         specifier: ^20.11.28\n         version: 20.17.10\n       '@wdio/logger':\n-        specifier: workspace:9.4.4\n+        specifier: workspace:*\n         version: link:../wdio-logger\n       '@wdio/types':\n-        specifier: workspace:9.5.0\n+        specifier: workspace:*\n         version: link:../wdio-types\n       '@wdio/utils':\n-        specifier: workspace:9.5.0\n+        specifier: workspace:*\n         version: link:../wdio-utils\n       mocha:\n         specifier: ^10.3.0\n@@ -1176,19 +1176,22 @@ importers:\n         specifier: ^20.11.28\n         version: 20.17.10\n       '@wdio/config':\n-        specifier: workspace:9.5.0\n+        specifier: workspace:*\n         version: link:../wdio-config\n+      '@wdio/dot-reporter':\n+        specifier: workspace:*\n+        version: link:../wdio-dot-reporter\n       '@wdio/globals':\n-        specifier: workspace:9.6.1\n+        specifier: workspace:*\n         version: link:../wdio-globals\n       '@wdio/logger':\n-        specifier: workspace:9.4.4\n+        specifier: workspace:*\n         version: link:../wdio-logger\n       '@wdio/types':\n-        specifier: workspace:9.5.0\n+        specifier: workspace:*\n         version: link:../wdio-types\n       '@wdio/utils':\n-        specifier: workspace:9.5.0\n+        specifier: workspace:*\n         version: link:../wdio-utils\n       deepmerge-ts:\n         specifier: ^7.0.3\n@@ -1197,10 +1200,10 @@ importers:\n         specifier: ^5.0.1\n         version: 5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio)\n       webdriver:\n-        specifier: workspace:9.6.0\n+        specifier: workspace:*\n         version: link:../webdriver\n       webdriverio:\n-        specifier: workspace:9.6.1\n+        specifier: workspace:*\n         version: link:../webdriverio\n \n   packages/wdio-sauce-service:\n",
    "test_patch": "diff --git a/packages/wdio-runner/tests/reporter.test.ts b/packages/wdio-runner/tests/reporter.test.ts\nindex 993ca1f28b7..8ba054d7561 100644\n--- a/packages/wdio-runner/tests/reporter.test.ts\n+++ b/packages/wdio-runner/tests/reporter.test.ts\n@@ -1,6 +1,6 @@\n import path from 'node:path'\n import { describe, expect, it, vi, test, afterEach } from 'vitest'\n-import type { Options, Capabilities } from '@wdio/types'\n+import type { Options } from '@wdio/types'\n \n import BaseReporter from '../src/reporter.js'\n \n@@ -20,7 +20,7 @@ class CustomReporter {\n     }\n }\n \n-const capability: Capabilities.WebdriverIO = { browserName: 'foo' }\n+const capability: WebdriverIO.Capabilities = { browserName: 'foo' }\n \n process.send = vi.fn()\n \n@@ -38,6 +38,17 @@ describe('BaseReporter', () => {\n         expect(reporter['_reporters']).toHaveLength(2)\n     })\n \n+    it('should make \"dot\" reporter default', async () => {\n+        const reporter = new BaseReporter({\n+            outputDir: '/foo/bar',\n+            reporters: []\n+        } as Options.Testrunner, '0-0', capability)\n+        await reporter.initReporters()\n+\n+        expect(reporter['_reporters']).toHaveLength(1)\n+        expect(reporter['_reporters'][0].constructor.name).toBe('DotReporter')\n+    })\n+\n     it('getLogFile', async () => {\n         const reporter = new BaseReporter({\n             outputDir: '/foo/bar',\n@@ -148,7 +159,7 @@ describe('BaseReporter', () => {\n         } as Options.Testrunner, '0-0', capability)\n         await reporter.initReporters()\n \n-        const payload = { foo: [1, 2, 3] }\n+        const payload: any = { foo: [1, 2, 3] }\n         reporter.emit('runner:start', payload)\n         expect(reporter['_reporters'].map((r) => vi.mocked(r.emit).mock.calls)).toEqual([\n             [['runner:start', Object.assign(payload, { cid: '0-0' })]],\n@@ -167,7 +178,7 @@ describe('BaseReporter', () => {\n         } as Options.Testrunner, '0-0', capability)\n         await reporter.initReporters()\n \n-        const payload = { foo: [1, 2, 3] }\n+        const payload: any = { foo: [1, 2, 3] }\n         reporter.emit('test:fail', payload)\n \n         reporter['_reporters'].forEach((reporter) => {\n@@ -212,7 +223,7 @@ describe('BaseReporter', () => {\n             throw new Error('Reporter throws an error')\n         })\n \n-        const payload = { foo: [1] }\n+        const payload: any = { foo: [1] }\n         reporter.emit('any', payload)\n \n         expect(faultyReporterInstance.emit).toBeCalledTimes(1)\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14085",
    "pr_id": 14085,
    "issue_id": 14083,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: this[#browser].getContext is not a function TypeError thrown by @wdio/runner\n### Have you read the Contributing Guidelines on issues?\n\n- [x] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.5.7\n\n### Node.js Version\n\n22.12.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\n    // capabilities for local Appium web tests on iOS\n    platformName: 'iOS',\n    browserName: 'Safari',\n    'appium:deviceName': 'iPhone 15',\n    'appium:platformVersion': '18.0',\n    'appium:automationName': 'XCUITest'\n}\n```\n\n### What happened?\n\nI have setup a simple sample project starting with `npm init wdio .` After finishing answering questions I've run it with `npm run wdio` script defined in `package.json` but it thrown an error `ERROR @wdio/runner: TypeError: this[#browser].getContext is not a function`. It is not blocking the test run from continuing though.\n\n### What is your expected behavior?\n\nI would expect that no errors are thrown during test session initializing as long as correct configuration has been provided.\n\n### How to reproduce the bug.\n\n[Github project](https://github.com/szarlatan/wdio9-getContext-not-function/tree/main) with code reproducing the bug\n\nThe problem seems to be related, or the same as described [here](https://github.com/webdriverio/webdriverio/issues/13809) and [here](https://github.com/webdriverio/webdriverio/issues/14044)\n\n### Relevant log output\n\n```typescript\n╰─$ npm run wdio                                                                                                              1 ↵\n\n> wdio\n> wdio run ./wdio.conf.ts\n\n\nExecution of 1 workers started at 2025-01-17T14:19:58.004Z\n\n2025-01-17T14:19:58.031Z INFO @wdio/cli:launcher: Run onPrepare hook\n2025-01-17T14:19:58.041Z INFO @wdio/appium-service: Will spawn Appium process: node /Users/krzysztof.biszta/git/wdiov9/node_modules/appium/index.js --base-path / --port 4723\n2025-01-17T14:20:00.249Z INFO @wdio/appium-service: Appium started with ID: 32967\n2025-01-17T14:20:00.249Z INFO @wdio/appium-service: Appium logs written to stdout\n2025-01-17T14:20:00.251Z INFO @wdio/cli:launcher: Run onWorkerStart hook\n2025-01-17T14:20:00.251Z INFO @wdio/local-runner: Start worker 0-0 with arg: run ./wdio.conf.ts\n[0-0] 2025-01-17T14:20:00.920Z INFO @wdio/local-runner: Run worker command: run\n[0-0] 2025-01-17T14:20:00.926Z ERROR @wdio/runner: TypeError: this[#browser].getContext is not a function\n[0-0]     at _ContextManager.initialize (/Users/krzysztof.biszta/git/wdiov9/node_modules/webdriverio/build/index.js:3183:43)\n[0-0]     at registerSessionManager (/Users/krzysztof.biszta/git/wdiov9/node_modules/webdriverio/build/index.js:4710:33)\n[0-0]     at remote (/Users/krzysztof.biszta/git/wdiov9/node_modules/webdriverio/build/index.js:8165:9)\n[0-0]     at async Runner._startSession (file:///Users/krzysztof.biszta/git/wdiov9/node_modules/@wdio/runner/build/index.js:809:23)\n[0-0]     at async Runner.run (file:///Users/krzysztof.biszta/git/wdiov9/node_modules/@wdio/runner/build/index.js:670:20)\n[0-0] RUNNING in Safari - file:///test/specs/test.e2e.ts\n[0-0] 2025-01-17T14:20:01.068Z INFO webdriver: Initiate new session using the WebDriver protocol\n[0-0] 2025-01-17T14:20:01.068Z INFO @wdio/utils: Connecting to existing driver at http://127.0.0.1:4723/\n[0-0] 2025-01-17T14:20:01.074Z INFO webdriver: [POST] http://127.0.0.1:4723/session\n[0-0] 2025-01-17T14:20:01.074Z INFO webdriver: DATA {\n[0-0]   capabilities: {\n[0-0]     alwaysMatch: {\n[0-0]       platformName: 'iOS',\n[0-0]       browserName: 'Safari',\n[0-0]       'appium:deviceName': 'iPhone 15',\n[0-0]       'appium:platformVersion': '18.0',\n[0-0]       'appium:automationName': 'XCUITest'\n[0-0]     },\n[0-0]     firstMatch: [ {} ]\n[0-0]   }\n[0-0] }\n2025-01-17T14:21:12.639Z WARN @wdio/appium-service: [139041f1][Xcode] xcodebuild exited with code '65' and signal 'null'\n\n[0-0] 2025-01-17T14:21:47.606Z INFO webdriver: COMMAND getContext()\n[0-0] 2025-01-17T14:21:47.606Z INFO webdriver: [GET] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/context\n[0-0] 2025-01-17T14:21:47.619Z INFO webdriver: RESULT WEBVIEW_33881.1\n[0-0] 2025-01-17T14:21:47.624Z INFO webdriver: COMMAND navigateTo(\"https://the-internet.herokuapp.com/login\")\n[0-0] 2025-01-17T14:21:47.624Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/url\n[0-0] 2025-01-17T14:21:47.624Z INFO webdriver: DATA { url: 'https://the-internet.herokuapp.com/login' }\n[0-0] 2025-01-17T14:21:50.389Z INFO webdriver: RESULT null\n[0-0] 2025-01-17T14:21:50.391Z INFO webdriver: COMMAND findElement(\"css selector\", \"#username\")\n[0-0] 2025-01-17T14:21:50.391Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/element\n[0-0] 2025-01-17T14:21:50.391Z INFO webdriver: DATA { using: 'css selector', value: '#username' }\n[0-0] 2025-01-17T14:21:50.408Z INFO webdriver: RESULT {\n[0-0]   'element-6066-11e4-a52e-4f735466cecf': ':wdc:1737123710406',\n[0-0]   ELEMENT: ':wdc:1737123710406'\n[0-0] }\n[0-0] 2025-01-17T14:21:50.412Z INFO webdriver: COMMAND elementClear(\":wdc:1737123710406\")\n[0-0] 2025-01-17T14:21:50.413Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/element/%3Awdc%3A1737123710406/clear\n[0-0] 2025-01-17T14:21:50.429Z INFO webdriver: RESULT null\n[0-0] 2025-01-17T14:21:50.430Z INFO webdriver: COMMAND elementSendKeys(\":wdc:1737123710406\", \"<Screenshot[base64]>\")\n[0-0] 2025-01-17T14:21:50.430Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/element/%3Awdc%3A1737123710406/value\n[0-0] 2025-01-17T14:21:50.430Z INFO webdriver: DATA { text: 'tomsmith' }\n[0-0] 2025-01-17T14:21:50.474Z INFO webdriver: RESULT null\n[0-0] 2025-01-17T14:21:50.474Z INFO webdriver: COMMAND findElement(\"css selector\", \"#password\")\n[0-0] 2025-01-17T14:21:50.474Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/element\n[0-0] 2025-01-17T14:21:50.474Z INFO webdriver: DATA { using: 'css selector', value: '#password' }\n[0-0] 2025-01-17T14:21:50.490Z INFO webdriver: RESULT {\n[0-0]   'element-6066-11e4-a52e-4f735466cecf': ':wdc:1737123710407',\n[0-0]   ELEMENT: ':wdc:1737123710407'\n[0-0] }\n[0-0] 2025-01-17T14:21:50.493Z INFO webdriver: COMMAND elementClear(\":wdc:1737123710407\")\n[0-0] 2025-01-17T14:21:50.493Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/element/%3Awdc%3A1737123710407/clear\n[0-0] 2025-01-17T14:21:50.505Z INFO webdriver: RESULT null\n[0-0] 2025-01-17T14:21:50.505Z INFO webdriver: COMMAND elementSendKeys(\":wdc:1737123710407\", \"SuperSecretPassword!\")\n[0-0] 2025-01-17T14:21:50.505Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/element/%3Awdc%3A1737123710407/value\n[0-0] 2025-01-17T14:21:50.505Z INFO webdriver: DATA { text: 'SuperSecretPassword!' }\n[0-0] 2025-01-17T14:21:50.544Z INFO webdriver: RESULT null\n[0-0] 2025-01-17T14:21:50.544Z INFO webdriver: COMMAND findElement(\"css selector\", \"button[type=\"submit\"]\")\n[0-0] 2025-01-17T14:21:50.545Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/element\n[0-0] 2025-01-17T14:21:50.545Z INFO webdriver: DATA { using: 'css selector', value: 'button[type=\"submit\"]' }\n[0-0] 2025-01-17T14:21:50.554Z INFO webdriver: RESULT {\n[0-0]   'element-6066-11e4-a52e-4f735466cecf': ':wdc:1737123710408',\n[0-0]   ELEMENT: ':wdc:1737123710408'\n[0-0] }\n[0-0] 2025-01-17T14:21:50.556Z INFO webdriver: COMMAND elementClick(\":wdc:1737123710408\")\n[0-0] 2025-01-17T14:21:50.556Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/element/%3Awdc%3A1737123710408/click\n[0-0] 2025-01-17T14:21:50.601Z INFO webdriver: RESULT null\n[0-0] 2025-01-17T14:21:50.602Z INFO webdriver: COMMAND findElement(\"css selector\", \"#flash\")\n[0-0] 2025-01-17T14:21:50.603Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/element\n[0-0] 2025-01-17T14:21:50.603Z INFO webdriver: DATA { using: 'css selector', value: '#flash' }\n[0-0] 2025-01-17T14:21:50.676Z INFO webdriver: RESULT {\n[0-0]   error: 'no such element',\n[0-0]   message: 'An element could not be located on the page using the given search parameters.',\n[0-0]   stacktrace: 'NoSuchElementError: An element could not be located on the page using the given search parameters.\\n' +\n[0-0]     '    at XCUITestDriver.findWebElementOrElements (/Users/krzysztof.biszta/git/wdiov9/node_modules/appium-xcuitest-driver/lib/commands/web.js:444:13)\\n' +\n[0-0]     '    at XCUITestDriver.findElOrEls (/Users/krzysztof.biszta/git/wdiov9/node_modules/appium-xcuitest-driver/lib/commands/find.js:22:14)\\n' +\n[0-0]     '    at XCUITestDriver.findElOrElsWithProcessing (/Users/krzysztof.biszta/git/wdiov9/node_modules/@appium/base-driver/lib/basedriver/commands/find.ts:60:12)\\n' +\n[0-0]     '    at XCUITestDriver.findElement (/Users/krzysztof.biszta/git/wdiov9/node_modules/@appium/base-driver/lib/basedriver/commands/find.ts:75:12)'\n[0-0] }\n[0-0] 2025-01-17T14:21:50.679Z INFO webdriver: COMMAND findElements(\"css selector\", \"#flash\")\n[0-0] 2025-01-17T14:21:50.679Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/elements\n[0-0] 2025-01-17T14:21:50.679Z INFO webdriver: DATA { using: 'css selector', value: '#flash' }\n[0-0] 2025-01-17T14:21:50.710Z INFO webdriver: RESULT []\n[0-0] 2025-01-17T14:21:51.213Z INFO webdriver: COMMAND findElements(\"css selector\", \"#flash\")\n[0-0] 2025-01-17T14:21:51.213Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/elements\n[0-0] 2025-01-17T14:21:51.213Z INFO webdriver: DATA { using: 'css selector', value: '#flash' }\n[0-0] 2025-01-17T14:21:51.218Z INFO webdriver: RESULT []\n[0-0] 2025-01-17T14:21:51.721Z INFO webdriver: COMMAND findElements(\"css selector\", \"#flash\")\n[0-0] 2025-01-17T14:21:51.721Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/elements\n[0-0] 2025-01-17T14:21:51.721Z INFO webdriver: DATA { using: 'css selector', value: '#flash' }\n[0-0] 2025-01-17T14:21:51.728Z INFO webdriver: RESULT [\n[0-0]   {\n[0-0]     'element-6066-11e4-a52e-4f735466cecf': ':wdc:1737123711726',\n[0-0]     ELEMENT: ':wdc:1737123711726'\n[0-0]   }\n[0-0] ]\n[0-0] 2025-01-17T14:21:51.731Z INFO webdriver: COMMAND findElement(\"css selector\", \"#flash\")\n[0-0] 2025-01-17T14:21:51.731Z INFO webdriver: [POST] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/element\n[0-0] 2025-01-17T14:21:51.731Z INFO webdriver: DATA { using: 'css selector', value: '#flash' }\n[0-0] 2025-01-17T14:21:51.737Z INFO webdriver: RESULT {\n[0-0]   'element-6066-11e4-a52e-4f735466cecf': ':wdc:1737123711726',\n[0-0]   ELEMENT: ':wdc:1737123711726'\n[0-0] }\n[0-0] 2025-01-17T14:21:51.738Z INFO webdriver: COMMAND getElementText(\":wdc:1737123711726\")\n[0-0] 2025-01-17T14:21:51.739Z INFO webdriver: [GET] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2/element/%3Awdc%3A1737123711726/text\n[0-0] 2025-01-17T14:21:51.749Z INFO webdriver: RESULT You logged into a secure area!\n[0-0] ×\n[0-0] 2025-01-17T14:21:51.751Z INFO webdriver: COMMAND deleteSession()\n[0-0] 2025-01-17T14:21:51.751Z INFO webdriver: [DELETE] http://127.0.0.1:4723/session/139041f1-c2b8-47c9-af96-7ba5a7b3b2c2\n2025-01-17T14:21:53.582Z WARN @wdio/appium-service: [139041f1][Xcode] xcodebuild exited with code '75' and signal 'null'\n\n[0-0] 2025-01-17T14:21:58.136Z INFO webdriver: RESULT null\n[0-0] PASSED in Safari - file:///test/specs/test.e2e.ts\n2025-01-17T14:21:58.246Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\n\n \"spec\" Reporter:\n------------------------------------------------------------------\n[Safari iOS #0-0] Running: Safari on iOS\n[Safari iOS #0-0] Session ID: 139041f1-c2b8-47c9-af96-7ba5a7b3b2c2\n[Safari iOS #0-0]\n[Safari iOS #0-0] » /test/specs/test.e2e.ts\n[Safari iOS #0-0] My Login application\n[Safari iOS #0-0]    ✓ should login with valid credentials\n[Safari iOS #0-0]\n[Safari iOS #0-0] 1 passing (10.5s)\n\n\nSpec Files:      1 passed, 1 total (100% completed) in 00:02:00  \n\n2025-01-17T14:21:58.247Z INFO @wdio/local-runner: Shutting down spawned worker\n2025-01-17T14:21:58.498Z INFO @wdio/local-runner: Waiting for 0 to shut down gracefully\n2025-01-17T14:21:58.499Z INFO @wdio/local-runner: shutting down\n2025-01-17T14:21:58.499Z INFO @wdio/cli:launcher: Run onComplete hook\n2025-01-17T14:21:58.499Z INFO @wdio/appium-service: Killing entire Appium tree\n2025-01-17T14:21:58.537Z INFO @wdio/appium-service: Process and its children successfully terminated\n```\n\n### Code of Conduct\n\n- [x] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues",
    "issue_word_count": 2109,
    "test_files_count": 13,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "e2e/launch/aws.test.ts",
      "e2e/launch/reloadSession.test.ts",
      "e2e/standalone/attach.test.ts",
      "e2e/wdio/headless/bidi.e2e.ts",
      "e2e/wdio/headless/classic.e2e.ts",
      "e2e/wdio/headless/launch.e2e.ts",
      "e2e/wdio/headless/mocking.e2e.ts",
      "e2e/wdio/headless/test.e2e.ts",
      "e2e/wdio/wdio.conf.ts",
      "packages/webdriver/src/utils.ts",
      "packages/webdriverio/src/commands/browser/mockClearAll.ts",
      "packages/webdriverio/src/session/index.ts",
      "packages/webdriverio/tests/module.test.ts",
      "packages/webdriverio/tests/session/index.test.ts",
      "website/docs/Emulation.md",
      "website/docs/Snapshot.md",
      "website/docs/VisualTesting.md",
      "website/docs/visual-testing/test-output.md"
    ],
    "pr_changed_test_files": [
      "e2e/launch/aws.test.ts",
      "e2e/launch/reloadSession.test.ts",
      "e2e/standalone/attach.test.ts",
      "e2e/wdio/headless/bidi.e2e.ts",
      "e2e/wdio/headless/classic.e2e.ts",
      "e2e/wdio/headless/launch.e2e.ts",
      "e2e/wdio/headless/mocking.e2e.ts",
      "e2e/wdio/headless/test.e2e.ts",
      "e2e/wdio/wdio.conf.ts",
      "packages/webdriverio/tests/module.test.ts",
      "packages/webdriverio/tests/session/index.test.ts",
      "website/docs/VisualTesting.md",
      "website/docs/visual-testing/test-output.md"
    ],
    "base_commit": "438c790f947e6d127f35c650448916a9a9693579",
    "head_commit": "aa49adb844ca6cc30a6fb5a89263de5490a8c162",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14085",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14085",
    "dockerfile": "",
    "pr_merged_at": "2025-01-17T18:44:47.000Z",
    "patch": "diff --git a/packages/webdriver/src/utils.ts b/packages/webdriver/src/utils.ts\nindex eb828084eaf..88647f8ac1e 100644\n--- a/packages/webdriver/src/utils.ts\n+++ b/packages/webdriver/src/utils.ts\n@@ -54,6 +54,8 @@ export async function startWebDriverSession (params: RemoteConfig): Promise<{ se\n          */\n         : { alwaysMatch: params.capabilities, firstMatch: [{}] }\n \n+    console.log(capabilities)\n+\n     /**\n      * automatically opt-into WebDriver Bidi (@ref https://w3c.github.io/webdriver-bidi/)\n      */\n\ndiff --git a/packages/webdriverio/src/commands/browser/mockClearAll.ts b/packages/webdriverio/src/commands/browser/mockClearAll.ts\nindex 0e03a34103c..dcc6204a471 100644\n--- a/packages/webdriverio/src/commands/browser/mockClearAll.ts\n+++ b/packages/webdriverio/src/commands/browser/mockClearAll.ts\n@@ -17,10 +17,10 @@ const log = logger('webdriverio:mockClearAll')\n             headers: { 'Content-Type': 'application/javascript' }\n         })\n \n-        await browser.url('http://guinea-pig.webdriver.io/')\n+        await browser.url('https://guinea-pig.webdriver.io/')\n         console.log(docMock.calls.length, jsMock.calls.length) // returns \"1 4\"\n \n-        await browser.url('http://guinea-pig.webdriver.io/')\n+        await browser.url('https://guinea-pig.webdriver.io/')\n         console.log(docMock.calls.length, jsMock.calls.length) // returns \"2 4\" (JavaScript comes from cache)\n \n         await browser.mockClearAll()\n\ndiff --git a/packages/webdriverio/src/session/index.ts b/packages/webdriverio/src/session/index.ts\nindex 9c8a599d821..05ab93b623f 100644\n--- a/packages/webdriverio/src/session/index.ts\n+++ b/packages/webdriverio/src/session/index.ts\n@@ -7,7 +7,15 @@ import { getContextManager } from './context.js'\n /**\n  * register all session relevant singletons on the instance\n  */\n-export function registerSessionManager (instance: WebdriverIO.Browser) {\n+export function registerSessionManager(instance: WebdriverIO.Browser) {\n+    /**\n+     * only register session manager for WebDriver protocol instances\n+     * and don't run them for the protocol stub.\n+     */\n+    if (instance.options.automationProtocol !== 'webdriver') {\n+        return\n+    }\n+\n     return Promise.all([\n         getPolyfillManager(instance).initialize(),\n         getShadowRootManager(instance).initialize(),\n\ndiff --git a/website/docs/Emulation.md b/website/docs/Emulation.md\nindex c4e47487a19..e423465aabb 100644\n--- a/website/docs/Emulation.md\n+++ b/website/docs/Emulation.md\n@@ -105,7 +105,7 @@ await clock.restore()\n console.log(await browser.execute(() => (new Date()).toString()))\n // returns \"Thu Aug 01 2024 17:59:59 GMT-0700 (Pacific Daylight Time)\"\n \n-await browser.url('http://guinea-pig.webdriver.io/pointer.html')\n+await browser.url('https://guinea-pig.webdriver.io/pointer.html')\n console.log(await browser.execute(() => (new Date()).toString()))\n // returns \"Thu Aug 01 2024 17:59:59 GMT-0700 (Pacific Daylight Time)\"\n ```\n\ndiff --git a/website/docs/Snapshot.md b/website/docs/Snapshot.md\nindex fc36d04a699..69649714f85 100644\n--- a/website/docs/Snapshot.md\n+++ b/website/docs/Snapshot.md\n@@ -20,7 +20,7 @@ To snapshot a value, you can use the `toMatchSnapshot()` from [`expect()`](/docs\n import { browser, expect } from '@wdio/globals'\n \n it('can take a DOM snapshot', () => {\n-    await browser.url('http://guinea-pig.webdriver.io/')\n+    await browser.url('https://guinea-pig.webdriver.io/')\n     await expect($('.findme')).toMatchSnapshot()\n })\n ```\n",
    "test_patch": "diff --git a/e2e/launch/aws.test.ts b/e2e/launch/aws.test.ts\nindex dd8ae8aef2e..0b8f4be9737 100644\n--- a/e2e/launch/aws.test.ts\n+++ b/e2e/launch/aws.test.ts\n@@ -38,7 +38,7 @@ test('allow to attach to an existing session', async () => {\n         }\n     })\n \n-    await browser.url('http://guinea-pig.webdriver.io/')\n+    await browser.url('https://guinea-pig.webdriver.io/')\n \n     const title = await browser.getTitle()\n     expect(title).toBe('WebdriverJS Testpage')\n\ndiff --git a/e2e/launch/reloadSession.test.ts b/e2e/launch/reloadSession.test.ts\nindex 11ab6855854..ef0466e412f 100644\n--- a/e2e/launch/reloadSession.test.ts\n+++ b/e2e/launch/reloadSession.test.ts\n@@ -23,7 +23,7 @@ test('can reconnect to WebDriver Bidi session', async () => {\n     console.log('\\n\\nRESTARTED\\n\\n')\n \n     expect(typeof await browser.browsingContextGetTree({})).toBe('object')\n-    await browser.url('http://guinea-pig.webdriver.io')\n+    await browser.url('https://guinea-pig.webdriver.io')\n     expect(await browser.getTitle()).toBe('WebdriverJS Testpage')\n     const h1 = await browser.$('h1')\n     expect(await h1.getText()).toBe('WebdriverJS Testpage')\n\ndiff --git a/e2e/standalone/attach.test.ts b/e2e/standalone/attach.test.ts\nindex dd0531372a6..468999e12bc 100644\n--- a/e2e/standalone/attach.test.ts\n+++ b/e2e/standalone/attach.test.ts\n@@ -12,7 +12,7 @@ import { remote, attach } from 'webdriverio'\n test('allow to attach to an existing session', async () => {\n     /**\n      * fails in windows due to timeout:\n-     * > Command browsingContext.navigate with id 1 (with the following parameter: {\"context\":\"BD746B5679530BC3403539C2FEC5A45A\",\"url\":\"http://guinea-pig.webdriver.io\",\"wait\":\"interactive\"}) timed out\n+     * > Command browsingContext.navigate with id 1 (with the following parameter: {\"context\":\"BD746B5679530BC3403539C2FEC5A45A\",\"url\":\"https://guinea-pig.webdriver.io\",\"wait\":\"interactive\"}) timed out\n      */\n     if (os.platform() === 'win32') {\n         return\n@@ -27,7 +27,7 @@ test('allow to attach to an existing session', async () => {\n         }\n     })\n \n-    await browser.url('http://guinea-pig.webdriver.io')\n+    await browser.url('https://guinea-pig.webdriver.io')\n     expect(await browser.getTitle()).toBe('WebdriverJS Testpage')\n     const origContextTree = await browser.browsingContextGetTree({ maxDepth: 1 })\n     expect(origContextTree.contexts).toHaveLength(1)\n\ndiff --git a/e2e/wdio/headless/bidi.e2e.ts b/e2e/wdio/headless/bidi.e2e.ts\nindex 843fdcb13db..e4a8e1a314a 100644\n--- a/e2e/wdio/headless/bidi.e2e.ts\n+++ b/e2e/wdio/headless/bidi.e2e.ts\n@@ -206,7 +206,7 @@ describe('bidi e2e test', () => {\n     })\n \n     it('supports execute with bidi on element scope', async () => {\n-        await browser.url('http://guinea-pig.webdriver.io')\n+        await browser.url('https://guinea-pig.webdriver.io')\n         const result = await browser.$('.findme').execute(function (elem, a, b, c, d) {\n             return (elem as unknown as HTMLElement).innerText.length + a + b + c + d\n         }, 1, 2, 3, 4)\n@@ -236,7 +236,7 @@ describe('bidi e2e test', () => {\n         })\n \n         it('works on element scope', async () => {\n-            await browser.url('http://guinea-pig.webdriver.io')\n+            await browser.url('https://guinea-pig.webdriver.io')\n             const result = await browser.$('.findme').executeAsync(function (elem, a, b, c, d, done) {\n                 // browser context - you may not access client or console\n                 setTimeout(() => {\n\ndiff --git a/e2e/wdio/headless/classic.e2e.ts b/e2e/wdio/headless/classic.e2e.ts\nindex b2fa0ca036c..3309a9dcab4 100644\n--- a/e2e/wdio/headless/classic.e2e.ts\n+++ b/e2e/wdio/headless/classic.e2e.ts\n@@ -3,7 +3,7 @@ import scripts from './__fixtures__/script.js'\n \n describe('__name polyfill', () => {\n     it('suppports __name polyfill for classic sessions', async () => {\n-        await browser.url('http://guinea-pig.webdriver.io')\n+        await browser.url('https://guinea-pig.webdriver.io')\n         expect(await browser.execute(scripts.someScript, 'foo')).toBe('Hello World! foo')\n         expect(await browser.executeAsync(scripts.someAsyncScript, 'foo')).toBe('Hello World! foo')\n     })\n\ndiff --git a/e2e/wdio/headless/launch.e2e.ts b/e2e/wdio/headless/launch.e2e.ts\nindex 39b7b0b4532..cce81fecbc2 100644\n--- a/e2e/wdio/headless/launch.e2e.ts\n+++ b/e2e/wdio/headless/launch.e2e.ts\n@@ -6,7 +6,7 @@ describe('Launch Test', () => {\n         const assertionValue = caps.browserName?.toLowerCase().includes('edge')\n             ? 'Edg/'\n             : caps.browserName && caps.browserName.includes('chrome') ? 'chrome/' : caps.browserName!.toLowerCase()\n-        await browser.url('http://guinea-pig.webdriver.io/')\n+        await browser.url('https://guinea-pig.webdriver.io/')\n         await expect($('#useragent')).toHaveText(expect.stringContaining(assertionValue), { ignoreCase: true })\n \n     // @ts-expect-error\n\ndiff --git a/e2e/wdio/headless/mocking.e2e.ts b/e2e/wdio/headless/mocking.e2e.ts\nindex dcfc52d1afe..893f67edc40 100644\n--- a/e2e/wdio/headless/mocking.e2e.ts\n+++ b/e2e/wdio/headless/mocking.e2e.ts\n@@ -1,13 +1,16 @@\n-import { browser, expect } from '@wdio/globals'\n+import { browser } from '@wdio/globals'\n \n describe('network mocking', () => {\n     it('marks a request as mocked even without overwrites', async () => {\n-        const baseUrl = 'http://guinea-pig.webdriver.io/'\n+        const baseUrl = 'https://guinea-pig.webdriver.io/'\n         const mock = await browser.mock(`${baseUrl}components/hammerjs/hammer.js`, {\n             method: 'get',\n             statusCode: 200,\n         })\n         await browser.url(baseUrl)\n-        expect(mock.calls.length).toBe(1)\n+        await browser.waitUntil(() => mock.calls.length === 1, {\n+            timeoutMsg: 'Expected mock to be made',\n+            timeout: 2000\n+        })\n     })\n })\n\ndiff --git a/e2e/wdio/headless/test.e2e.ts b/e2e/wdio/headless/test.e2e.ts\nindex 9a19b1e723a..c09e0fa4aed 100644\n--- a/e2e/wdio/headless/test.e2e.ts\n+++ b/e2e/wdio/headless/test.e2e.ts\n@@ -9,7 +9,7 @@ const __dirname = path.dirname(url.fileURLToPath(import.meta.url))\n \n describe('main suite 1', () => {\n     it('supports snapshot testing', async () => {\n-        await browser.url('http://guinea-pig.webdriver.io/')\n+        await browser.url('https://guinea-pig.webdriver.io/')\n         await expect($('.findme')).toMatchSnapshot()\n         await expect($('.findme')).toMatchInlineSnapshot('\"<h1 class=\"findme\">Test CSS Attributes</h1>\"')\n     })\n@@ -130,7 +130,7 @@ describe('main suite 1', () => {\n         ]\n \n         before(async () => {\n-            await browser.url('http://guinea-pig.webdriver.io/pointer.html')\n+            await browser.url('https://guinea-pig.webdriver.io/pointer.html')\n             await browser.$('#parent').waitForExist()\n         })\n \n@@ -257,7 +257,7 @@ describe('main suite 1', () => {\n \n     describe('wdio scrollIntoView behaves like native scrollIntoView', () => {\n         beforeEach(async () => {\n-            await browser.url('http://guinea-pig.webdriver.io')\n+            await browser.url('https://guinea-pig.webdriver.io')\n             await browser.setWindowSize(500, 500)\n         })\n \n@@ -288,7 +288,7 @@ describe('main suite 1', () => {\n     })\n \n     it('should be able to handle successive scrollIntoView', async () => {\n-        await browser.url('http://guinea-pig.webdriver.io')\n+        await browser.url('https://guinea-pig.webdriver.io')\n         await browser.setWindowSize(500, 500)\n         const searchInput = await $('.searchinput')\n \n@@ -325,7 +325,7 @@ describe('main suite 1', () => {\n         })\n \n         it('should return a request object', async () => {\n-            const request = await browser.url('http://guinea-pig.webdriver.io/')\n+            const request = await browser.url('https://guinea-pig.webdriver.io/')\n             if (!request) {\n                 throw new Error('Request object is not defined')\n             }\n@@ -334,7 +334,7 @@ describe('main suite 1', () => {\n         })\n \n         it('should not contain any children due to \"none\" wait property', async () => {\n-            const request = await browser.url('http://guinea-pig.webdriver.io/', {\n+            const request = await browser.url('https://guinea-pig.webdriver.io/', {\n                 wait: 'none'\n             })\n \n@@ -359,7 +359,7 @@ describe('main suite 1', () => {\n \n     describe('dialog handling', () => {\n         it('should automatically accept alerts', async () => {\n-            await browser.url('http://guinea-pig.webdriver.io')\n+            await browser.url('https://guinea-pig.webdriver.io')\n \n             await browser.execute(() => alert('123'))\n \n@@ -374,7 +374,7 @@ describe('main suite 1', () => {\n          * fails due to https://github.com/GoogleChromeLabs/chromium-bidi/issues/2556\n          */\n         it('should be able to handle dialogs', async () => {\n-            await browser.url('http://guinea-pig.webdriver.io')\n+            await browser.url('https://guinea-pig.webdriver.io')\n             browser.execute(() => alert('123'))\n             const dialog = await new Promise<WebdriverIO.Dialog>((resolve) => browser.on('dialog', resolve))\n \n@@ -418,7 +418,7 @@ describe('main suite 1', () => {\n             await browser.emulate('clock', { now })\n             expect(await browser.execute(getDateString))\n                 .toBe(now.toString())\n-            await browser.url('http://guinea-pig.webdriver.io')\n+            await browser.url('https://guinea-pig.webdriver.io')\n             expect(await browser.execute(getDateString))\n                 .toBe(now.toString())\n         })\n@@ -427,7 +427,7 @@ describe('main suite 1', () => {\n             await browser.restore('clock')\n             expect(await browser.execute(getDateString))\n                 .not.toBe(now.toString())\n-            await browser.url('http://guinea-pig.webdriver.io/pointer.html')\n+            await browser.url('https://guinea-pig.webdriver.io/pointer.html')\n             expect(await browser.execute(getDateString))\n                 .not.toBe(now.toString())\n         })\n@@ -455,7 +455,7 @@ describe('main suite 1', () => {\n         }\n \n         it('should allow user to switch between contexts', async () => {\n-            await browser.url('http://guinea-pig.webdriver.io/')\n+            await browser.url('https://guinea-pig.webdriver.io/')\n \n             await browser.newWindow('https://webdriver.io')\n             await expect($('.hero__subtitle')).toBePresent()\n@@ -472,7 +472,7 @@ describe('main suite 1', () => {\n \n         it('should not switch window if requested window was not found', async () => {\n             await closeAllWindowsButFirst()\n-            await browser.navigateTo('http://guinea-pig.webdriver.io/')\n+            await browser.navigateTo('https://guinea-pig.webdriver.io/')\n             const firstWindowHandle = await browser.getWindowHandle()\n \n             await browser.newWindow('https://webdriver.io')\n@@ -488,7 +488,7 @@ describe('main suite 1', () => {\n \n         it('Should update BiDi browsingContext when performing switchToWindow in WebDriver Classic', async () => {\n             await closeAllWindowsButFirst()\n-            await browser.url('http://guinea-pig.webdriver.io/')\n+            await browser.url('https://guinea-pig.webdriver.io/')\n             await $('#newWindow').click()\n \n             const handles = await browser.getWindowHandles()\n@@ -553,8 +553,8 @@ describe('main suite 1', () => {\n \n     describe.only('open resources with different protocols', () => {\n         it('http', async () => {\n-            browser.url('http://guinea-pig.webdriver.io/')\n-            await expect(browser).toHaveUrl('http://guinea-pig.webdriver.io/')\n+            browser.url('https://guinea-pig.webdriver.io/')\n+            await expect(browser).toHaveUrl('https://guinea-pig.webdriver.io/')\n         })\n \n         it('https', async () => {\n\ndiff --git a/e2e/wdio/wdio.conf.ts b/e2e/wdio/wdio.conf.ts\nindex fa42cda732b..fc4c59c7f67 100644\n--- a/e2e/wdio/wdio.conf.ts\n+++ b/e2e/wdio/wdio.conf.ts\n@@ -21,9 +21,9 @@ export const config: WebdriverIO.Config = {\n     capabilities: [{\n         browserName: 'chrome',\n         browserVersion: 'stable',\n-        'goog:chromeOptions': {\n-            args: ['headless', 'disable-gpu']\n-        }\n+        // 'goog:chromeOptions': {\n+        //     args: ['headless', 'disable-gpu']\n+        // }\n     }],\n     bail: 1,\n     services: ['lighthouse'],\n\ndiff --git a/packages/webdriverio/tests/module.test.ts b/packages/webdriverio/tests/module.test.ts\nindex 4971cbb967f..aced08113cc 100644\n--- a/packages/webdriverio/tests/module.test.ts\n+++ b/packages/webdriverio/tests/module.test.ts\n@@ -12,6 +12,7 @@ vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdi\n vi.mock('webdriver', () => {\n     const client = {\n         sessionId: 'foobar-123',\n+        options: {},\n         addCommand: vi.fn(),\n         overwriteCommand: vi.fn(),\n         strategies: new Map(),\n\ndiff --git a/packages/webdriverio/tests/session/index.test.ts b/packages/webdriverio/tests/session/index.test.ts\nnew file mode 100644\nindex 00000000000..95884632eff\n--- /dev/null\n+++ b/packages/webdriverio/tests/session/index.test.ts\n@@ -0,0 +1,54 @@\n+import { describe, it, expect, vi } from 'vitest'\n+\n+import { getPolyfillManager } from '../../src/session/polyfill.js'\n+import { getShadowRootManager } from '../../src/session/shadowRoot.js'\n+import { getNetworkManager } from '../../src/session/networkManager.js'\n+import { getDialogManager } from '../../src/session/dialog.js'\n+import { getContextManager } from '../../src/session/context.js'\n+import { registerSessionManager } from '../../src/session/index.js'\n+\n+vi.mock('../../src/session/polyfill.js', () => ({\n+    getPolyfillManager: vi.fn(() => ({ initialize: vi.fn() }))\n+}))\n+vi.mock('../../src/session/shadowRoot.js', () => ({\n+    getShadowRootManager: vi.fn(() => ({ initialize: vi.fn() }))\n+}))\n+vi.mock('../../src/session/networkManager.js', () => ({\n+    getNetworkManager: vi.fn(() => ({ initialize: vi.fn() }))\n+}))\n+vi.mock('../../src/session/dialog.js', () => ({\n+    getDialogManager: vi.fn(() => ({ initialize: vi.fn() }))\n+}))\n+vi.mock('../../src/session/context.js', () => ({\n+    getContextManager: vi.fn(() => ({ initialize: vi.fn() }))\n+}))\n+\n+describe('webdriverio session manager', () => {\n+    it('registers all session manager', async () => {\n+        const browser = {\n+            options: {\n+                automationProtocol: 'webdriver'\n+            }\n+        } as unknown as WebdriverIO.Browser\n+        registerSessionManager(browser)\n+        expect(getPolyfillManager).toBeCalledWith(browser)\n+        expect(getShadowRootManager).toBeCalledWith(browser)\n+        expect(getNetworkManager).toBeCalledWith(browser)\n+        expect(getDialogManager).toBeCalledWith(browser)\n+        expect(getContextManager).toBeCalledWith(browser)\n+    })\n+\n+    it('does not register for protocol stub', async () => {\n+        const browser = {\n+            options: {\n+                automationProtocol: 'protocol-stub'\n+            }\n+        } as unknown as WebdriverIO.Browser\n+        registerSessionManager(browser)\n+        expect(getPolyfillManager).not.toBeCalledWith(browser)\n+        expect(getShadowRootManager).not.toBeCalledWith(browser)\n+        expect(getNetworkManager).not.toBeCalledWith(browser)\n+        expect(getDialogManager).not.toBeCalledWith(browser)\n+        expect(getContextManager).not.toBeCalledWith(browser)\n+    })\n+})\n\ndiff --git a/website/docs/VisualTesting.md b/website/docs/VisualTesting.md\nindex 3891167aac6..d2784ff66c4 100644\n--- a/website/docs/VisualTesting.md\n+++ b/website/docs/VisualTesting.md\n@@ -187,7 +187,7 @@ Both methods use the same options as the [`saveFullPageScreen`](https://github.c\n \n #### Example\n \n-This is an example of how the tabbing works on our [guinea pig website](http://guinea-pig.webdriver.io/image-compare.html):\n+This is an example of how the tabbing works on our [guinea pig website](https://guinea-pig.webdriver.io/image-compare.html):\n \n ![WDIO tabbing example](/img/visual/tabbable-chrome-latest-1366x768.png)\n \n\ndiff --git a/website/docs/visual-testing/test-output.md b/website/docs/visual-testing/test-output.md\nindex f366d348e43..a86e754c3c5 100644\n--- a/website/docs/visual-testing/test-output.md\n+++ b/website/docs/visual-testing/test-output.md\n@@ -5,7 +5,7 @@ title: Test Output\n \n :::info\n \n-[This WebdriverIO](http://guinea-pig.webdriver.io/image-compare.html) demo site has been used for the example image output.\n+[This WebdriverIO](https://guinea-pig.webdriver.io/image-compare.html) demo site has been used for the example image output.\n \n :::\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14071",
    "pr_id": 14071,
    "issue_id": 14065,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: unable to take screenshot using \"saveScreenshot\" inside an iframe\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest 9.5.3\n\n### Node.js Version\n\nv20.15.1\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\nRunning in Windows/Chrome browser\r\nchrome version - 131.0.6778.205\r\nProtocol: Webdriver BiDi\n```\n\n\n### What happened?\n\nAfter upgrading to webdriverIO 9, unable to take screenshot inside an iFrame using browser.saveScreenshot\r\nI tried to use BiDi's \"browsingContextCaptureScreenshot\" but no matter what ever context ID i passed, it didn't work.\n\n### What is your expected behavior?\n\nour application is wrapped inside an iframe, there is a workaround to use cdp to take screenshot, but sometimes getting target closed exception in after test.\n\n### How to reproduce the bug.\n\nawait browser.url('https://www.w3schools.com/html/html_iframe.asp');\r\n        await browser.pause(10000);//wait for it to load\r\n\r\n        // // switch to a frame\r\n        await browser.switchFrame($(`//iframe[@title='W3Schools HTML Tutorial']`));\r\n        await browser.pause(3000);\r\n\r\n        await $(`.w3-right.w3-btn`).click();\r\n\r\n        await browser.pause(3000);\r\n\r\n        await browser.saveScreenshot(`.testshot.png`);\n\n### Relevant log output\n\n```typescript\nError: WebDriver Bidi command \"browsingContext.captureScreenshot\" failed with error: unsupported operation - Non-top-level 'context' (4F8F8662A1A190C6542C420AD203A227) is currently not supported\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 249,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      ".gitignore",
      "e2e/wdio/headless/test.e2e.ts",
      "package.json",
      "packages/webdriverio/src/commands/browser/saveScreenshot.ts",
      "pnpm-lock.yaml"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/test.e2e.ts"
    ],
    "base_commit": "8d10a8f0f2bb26316d136f1347090aac8d50f74f",
    "head_commit": "9ad67c758ff6560fa2eef4e28ecfb5482c568364",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14071",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14071",
    "dockerfile": "",
    "pr_merged_at": "2025-01-17T18:28:47.000Z",
    "patch": "diff --git a/.gitignore b/.gitignore\nindex ce65682795b..0989b9c01da 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -117,3 +117,4 @@ examples/wdio/mocha/*.json\n e2e/screenshot.png\n website/community/events\n website/events.json\n+e2e/wdio/headless/*.png\n\ndiff --git a/package.json b/package.json\nindex d79f6fcac54..fcc24614adb 100644\n--- a/package.json\n+++ b/package.json\n@@ -107,6 +107,7 @@\n     \"glob\": \"^11.0.0\",\n     \"globals\": \"^15.12.0\",\n     \"husky\": \"^9.1.4\",\n+    \"image-size\": \"^1.2.0\",\n     \"inquirer\": \"^11.0.1\",\n     \"jsdom\": \"^25.0.0\",\n     \"lerna\": \"8.1.9\",\n\ndiff --git a/packages/webdriverio/src/commands/browser/saveScreenshot.ts b/packages/webdriverio/src/commands/browser/saveScreenshot.ts\nindex 0cde86ddbc8..2e85daa84aa 100644\n--- a/packages/webdriverio/src/commands/browser/saveScreenshot.ts\n+++ b/packages/webdriverio/src/commands/browser/saveScreenshot.ts\n@@ -49,7 +49,18 @@ export async function saveScreenshot (\n         const browser = getBrowserObject(this)\n         const contextManager = getContextManager(browser)\n         const context = await contextManager.getCurrentContext()\n-        const { data } = await this.browsingContextCaptureScreenshot({ context })\n+        const tree = await this.browsingContextGetTree({})\n+\n+        /**\n+         * WebDriver Bidi doesn't allow to take a screenshot of an iframe, it fails with:\n+         * \"unsupported operation - Non-top-level 'context'\". Therefor we need to check if\n+         * we are within an iframe and if so, take a screenshot of the document element\n+         * instead.\n+         */\n+        const { data } = contextManager.findParentContext(context, tree.contexts)\n+            ? await browser.$('html').getElement().then(\n+                (el) => this.takeElementScreenshot(el.elementId).then((data) => ({ data })))\n+            : await this.browsingContextCaptureScreenshot({ context })\n         screenBuffer = data\n     } else {\n         screenBuffer = await this.takeScreenshot()\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex 445ecdc21cc..4464538bdb9 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -137,6 +137,9 @@ importers:\n       husky:\n         specifier: ^9.1.4\n         version: 9.1.7\n+      image-size:\n+        specifier: ^1.2.0\n+        version: 1.2.0\n       inquirer:\n         specifier: ^11.0.1\n         version: 11.1.0\n@@ -8867,8 +8870,8 @@ packages:\n     resolution: {integrity: sha512-InwqeHHN2XpumIkMvpl/DCJVrAHgCsG5+cn1XlnLWGwtZBm8QJfSusItfrwx81CTp5agNZqpKU2J/ccC5nGT4A==}\n     engines: {node: '>= 4'}\n \n-  image-size@1.1.1:\n-    resolution: {integrity: sha512-541xKlUw6jr/6gGuk92F+mYM5zaFAc5ahphvkqvNe2bQ6gVBkd6bfrmVJ2t4KDAfikAYZyIqTnktX3i6/aQDrQ==}\n+  image-size@1.2.0:\n+    resolution: {integrity: sha512-4S8fwbO6w3GeCVN6OPtA9I5IGKkcDMPcKndtUlpJuCwu7JLjtj7JZpwqLuyY2nrmQT3AWsCJLSKPsc2mPBSl3w==}\n     engines: {node: '>=16.x'}\n     hasBin: true\n \n@@ -15997,7 +16000,7 @@ snapshots:\n       estree-util-value-to-estree: 3.2.1\n       file-loader: 6.2.0(webpack@5.97.1(@swc/core@1.10.1))\n       fs-extra: 11.2.0\n-      image-size: 1.1.1\n+      image-size: 1.2.0\n       mdast-util-mdx: 3.0.0\n       mdast-util-to-string: 4.0.0\n       react: 18.3.1\n@@ -23199,7 +23202,7 @@ snapshots:\n   ignore@6.0.2:\n     optional: true\n \n-  image-size@1.1.1:\n+  image-size@1.2.0:\n     dependencies:\n       queue: 6.0.2\n \n",
    "test_patch": "diff --git a/e2e/wdio/headless/test.e2e.ts b/e2e/wdio/headless/test.e2e.ts\nindex dd65d962b74..fe56bf45e6b 100644\n--- a/e2e/wdio/headless/test.e2e.ts\n+++ b/e2e/wdio/headless/test.e2e.ts\n@@ -5,6 +5,8 @@ import url from 'node:url'\n import path from 'node:path'\n import { browser, $, expect } from '@wdio/globals'\n \n+import { imageSize } from 'image-size'\n+\n const __dirname = path.dirname(url.fileURLToPath(import.meta.url))\n \n describe('main suite 1', () => {\n@@ -550,26 +552,46 @@ describe('main suite 1', () => {\n             await expect($('#tinymce')).toBePresent()\n         })\n \n-        it('switches to parent (not top-level)', async () => {\n-            await browser.url('http://guinea-pig.webdriver.io/iframe.html')\n-            await expect($('h1')).toHaveText('Frame Demo')\n-            await expect($('h2')).not.toExist()\n-            await expect($('h3')).not.toExist()\n+        describe('switchToParentFrame', () => {\n+            it('switches to parent (not top-level)', async () => {\n+                await browser.url('http://guinea-pig.webdriver.io/iframe.html')\n+                await expect($('h1')).toHaveText('Frame Demo')\n+                await expect($('h2')).not.toExist()\n+                await expect($('h3')).not.toExist()\n \n-            await browser.switchFrame($('#A'))\n-            await expect($('h1')).not.toExist()\n-            await expect($('h2')).toHaveText('IFrame A')\n-            await expect($('h3')).not.toExist()\n+                await browser.switchFrame($('#A'))\n+                await expect($('h1')).not.toExist()\n+                await expect($('h2')).toHaveText('IFrame A')\n+                await expect($('h3')).not.toExist()\n \n-            await browser.switchFrame($('#A2'))\n-            await expect($('h1')).not.toExist()\n-            await expect($('h2')).not.toExist()\n-            await expect($('h3')).toHaveText('IFrame A2')\n+                await browser.switchFrame($('#A2'))\n+                await expect($('h1')).not.toExist()\n+                await expect($('h2')).not.toExist()\n+                await expect($('h3')).toHaveText('IFrame A2')\n \n-            await browser.switchToParentFrame()\n-            await expect($('h1')).not.toExist()\n-            await expect($('h2')).toHaveText('IFrame A')\n-            await expect($('h3')).not.toExist()\n+                await browser.switchToParentFrame()\n+                await expect($('h1')).not.toExist()\n+                await expect($('h2')).toHaveText('IFrame A')\n+                await expect($('h3')).not.toExist()\n+            })\n+\n+            after(() => browser.switchFrame(null))\n+        })\n+\n+        describe('taking screenshots', () => {\n+            it('should take a screenshot of the iframe', async () => {\n+                await browser.url('http://guinea-pig.webdriver.io/iframe.html')\n+                await browser.switchFrame($('#A'))\n+                await browser.switchFrame($('#A2'))\n+\n+                const screenshotPath = path.resolve(__dirname, 'iframe.png')\n+                await browser.saveScreenshot(screenshotPath)\n+                const dimensions = imageSize(screenshotPath)\n+                expect(dimensions.width).toBe(187)\n+                expect(dimensions.height).toBe(85)\n+            })\n+\n+            after(() => browser.switchFrame(null))\n         })\n     })\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14056",
    "pr_id": 14056,
    "issue_id": 14055,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[📖 Docs]: dragAndDrop: emphasize that the target element must be awaited  \n### Pre-check\n\n- [X] I know I can edit the docs but prefer to file this issue\n\n### Describe the improvement\n\nUnclear documentation\n\n### Description of the improvement / report\n\nI read the documentation a few times, but missed that the target element must be awaited for dragAndDrop to work.\r\n\r\n```ts\r\nawait $(\"#elementToDrag\").dragAndDrop($(\"#dropTarget\")); // fails\r\nawait $(\"#elementToDrag\").dragAndDrop(await $(\"#dropTarget\")); // works - but TypeScript says the await is not needed\r\n```\r\n\r\nOn the other hand the [documentation](https://webdriver.io/docs/api/mobile/dragAndDrop/#example) awaits `$(\"#someElem\")` but that is not needed.\r\n\r\nI suggest to write the example like this:\r\n\r\n```ts\r\nit('should demonstrate the dragAndDrop command', async () => {\r\n    const elem = $('#someElem')\r\n    const target = $('#someTarget')\r\n\r\n    // drag and drop to other element\r\n    await elem.dragAndDrop(await target); // target MUST be awaited!\r\n\r\n    // drag and drop relative from current position\r\n    await elem.dragAndDrop({ x: 100, y: 200 })\r\n})\r\n```\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct",
    "issue_word_count": 162,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/element/dragAndDrop.ts",
      "packages/webdriverio/tests/commands/element/__snapshots__/dragAndDrop.test.ts.snap",
      "packages/webdriverio/tests/commands/element/dragAndDrop.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/element/__snapshots__/dragAndDrop.test.ts.snap",
      "packages/webdriverio/tests/commands/element/dragAndDrop.test.ts"
    ],
    "base_commit": "2d653ca7304cd1af6c7519cd9fe3c25edf984609",
    "head_commit": "1cac267cac9b2af50d8e40986f54e091a9dc04d7",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14056",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14056",
    "dockerfile": "",
    "pr_merged_at": "2025-01-10T17:45:43.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/element/dragAndDrop.ts b/packages/webdriverio/src/commands/element/dragAndDrop.ts\nindex 4d5fbf3c4a8..75d73acf363 100644\n--- a/packages/webdriverio/src/commands/element/dragAndDrop.ts\n+++ b/packages/webdriverio/src/commands/element/dragAndDrop.ts\n@@ -40,7 +40,7 @@ export async function dragAndDrop (\n     options: DragAndDropOptions = {}\n ) {\n     const moveToCoordinates = target as DragAndDropCoordinate\n-    const moveToElement = target as WebdriverIO.Element\n+    const moveToElement = await target as WebdriverIO.Element\n \n     /**\n      * fail if\n@@ -49,12 +49,12 @@ export async function dragAndDrop (\n         /**\n          * no target was specified\n          */\n-        !target ||\n+        !moveToElement ||\n         (\n             /**\n              * target is not from type element\n              */\n-            target.constructor.name !== 'Element' &&\n+            moveToElement.constructor.name !== 'Element' &&\n             /**\n              * and is also not an object with x and y number parameters\n              */\n@@ -75,7 +75,7 @@ export async function dragAndDrop (\n     /**\n      * allow to specify an element or an x/y vector\n      */\n-    const isMovingToElement = target.constructor.name === 'Element'\n+    const isMovingToElement = moveToElement.constructor.name === 'Element'\n \n     const sourceRef: ElementReference = { [ELEMENT_KEY]: this[ELEMENT_KEY] }\n     const targetRef: ElementReference = { [ELEMENT_KEY]: moveToElement[ELEMENT_KEY] }\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/element/__snapshots__/dragAndDrop.test.ts.snap b/packages/webdriverio/tests/commands/element/__snapshots__/dragAndDrop.test.ts.snap\nindex e6a786a08ae..6c40ef18ed9 100644\n--- a/packages/webdriverio/tests/commands/element/__snapshots__/dragAndDrop.test.ts.snap\n+++ b/packages/webdriverio/tests/commands/element/__snapshots__/dragAndDrop.test.ts.snap\n@@ -35,7 +35,7 @@ exports[`dragAndDrop > should allow drag and drop to 0 coordinates 1`] = `\n         \"type\": \"pointerUp\",\n       },\n     ],\n-    \"id\": \"action4\",\n+    \"id\": \"action5\",\n     \"parameters\": {\n       \"pointerType\": \"mouse\",\n     },\n@@ -127,7 +127,7 @@ exports[`dragAndDrop > should do a dragAndDrop for mobile 1`] = `\n         \"type\": \"pointerUp\",\n       },\n     ],\n-    \"id\": \"action2\",\n+    \"id\": \"action3\",\n     \"parameters\": {\n       \"pointerType\": \"touch\",\n     },\n@@ -171,7 +171,7 @@ exports[`dragAndDrop > should do a dragAndDrop with coordinates 1`] = `\n         \"type\": \"pointerUp\",\n       },\n     ],\n-    \"id\": \"action3\",\n+    \"id\": \"action4\",\n     \"parameters\": {\n       \"pointerType\": \"mouse\",\n     },\n@@ -179,3 +179,5 @@ exports[`dragAndDrop > should do a dragAndDrop with coordinates 1`] = `\n   },\n ]\n `;\n+\n+exports[`dragAndDrop > should resolve target element 1`] = `undefined`;\n\ndiff --git a/packages/webdriverio/tests/commands/element/dragAndDrop.test.ts b/packages/webdriverio/tests/commands/element/dragAndDrop.test.ts\nindex cd7590f5fb2..2729383d8ab 100644\n--- a/packages/webdriverio/tests/commands/element/dragAndDrop.test.ts\n+++ b/packages/webdriverio/tests/commands/element/dragAndDrop.test.ts\n@@ -65,6 +65,29 @@ describe('dragAndDrop', () => {\n         expect(vi.mocked(fetch).mock.calls[4][1]?.method).toContain('DELETE')\n     })\n \n+    it('should resolve target element', async () => {\n+        const browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: {\n+                browserName: 'foobar'\n+            }\n+        })\n+\n+        const elem = browser.$('#foo')\n+        const subElem = elem.$('#subfoo')\n+        // @ts-ignore mock feature\n+        vi.mocked(fetch).setMockResponse([{ scrollX: 0, scrollY: 20 }])\n+        await elem.dragAndDrop(subElem)\n+\n+        // move to\n+        // @ts-expect-error mock implementation\n+        expect(vi.mocked(fetch).mock.calls[7][0].pathname).toContain('/foobar-123/actions')\n+        expect(JSON.parse(vi.mocked(fetch).mock.calls[3][1]?.body as any).actions).toMatchSnapshot()\n+        // @ts-expect-error mock implementation\n+        expect(vi.mocked(fetch).mock.calls[8][0].pathname).toContain('/foobar-123/actions')\n+        expect(vi.mocked(fetch).mock.calls[8][1]?.method).toContain('DELETE')\n+    })\n+\n     it('should do a dragAndDrop for mobile', async () => {\n         const browser = await remote({\n             baseUrl: 'http://foobar.com',\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14037",
    "pr_id": 14037,
    "issue_id": 14035,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Type definition for `element.getProperty` is wrong\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.4.2\n\n### Node.js Version\n\nv20.15.1\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n_No response_\n\n### What happened?\n\nI use `$(\"#myNumericInput\").getProperty(\"valueAsNumber\")`.\r\n\r\nI receive a `number`, but the type definition of `element.getProperty` says it should be a `string`.\n\n### What is your expected behavior?\n\nThe type definition should be something like: `object|string|boolean|number|null` OR `unknown`.\n\n### How to reproduce the bug.\n\n*does not apply*\n\n### Relevant log output\n\n```typescript\n*does not apply*\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 144,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/element/getProperty.ts",
      "tests/typings/webdriverio/async.ts"
    ],
    "pr_changed_test_files": [
      "tests/typings/webdriverio/async.ts"
    ],
    "base_commit": "9563708729bc0d5061e3a58e8d26a6112c7d81aa",
    "head_commit": "e0cbe814afc8531adcab9ecb1938305deba16c6a",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14037",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14037",
    "dockerfile": "",
    "pr_merged_at": "2025-01-07T22:23:58.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/element/getProperty.ts b/packages/webdriverio/src/commands/element/getProperty.ts\nindex 99568694dff..ab44d0cfd3c 100644\n--- a/packages/webdriverio/src/commands/element/getProperty.ts\n+++ b/packages/webdriverio/src/commands/element/getProperty.ts\n@@ -1,5 +1,6 @@\n /**\n- * The Get Element Property command will return the result of getting a property of an element.\n+ * The Get Element Property command will return the result of getting a property of an\n+ * element.\n  *\n  * <example>\n     :getProperty.js\n@@ -12,11 +13,11 @@\n  *\n  * @alias element.getProperty\n  * @param {string} property  name of the element property\n- * @return {Object|String|Boolean|Number|null} the value of the property of the selected element\n+ * @return {unknown} the value of the property of the selected element\n  */\n export function getProperty (\n     this: WebdriverIO.Element,\n     property: string\n-) {\n+): Promise<unknown> {\n     return this.getElementProperty(this.elementId, property)\n }\n",
    "test_patch": "diff --git a/tests/typings/webdriverio/async.ts b/tests/typings/webdriverio/async.ts\nindex 958686750a4..0bf7f9471f2 100644\n--- a/tests/typings/webdriverio/async.ts\n+++ b/tests/typings/webdriverio/async.ts\n@@ -235,6 +235,9 @@ async function bar() {\n     expectType<number>(width)\n     expectType<number>(height)\n \n+    // getProperty return type\n+    expectType<unknown>($('#foo').getProperty('bar'))\n+\n     // protocol command return unmapped object\n     const { foo, bar } = await browser.takeHeapSnapshot()\n     expectType<any>(foo)\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14033",
    "pr_id": 14033,
    "issue_id": 13670,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: BeforeTest hook in sauce-service throws an error `Error in \"BeforeTest Hook\" Invalid left-hand side in assignment`\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\nlatest\r\n\r\n### Node.js Version\r\n\r\n20.11.1\r\n\r\n### Mode\r\n\r\nStandalone Mode\r\n\r\n### Which capabilities are you using?\r\n\r\n_No response_\r\n\r\n### What happened?\r\n\r\nWhen running a test on Sauce the sauce-service updates the name of the test, see [this](https://github.com/webdriverio/webdriverio/blob/main/packages/wdio-sauce-service/src/service.ts#L103), with the execute method, see [this](https://github.com/webdriverio/webdriverio/blob/main/packages/wdio-sauce-service/src/service.ts#L424).\r\n\r\nThis now throws an error\r\n\r\n```logs\r\n[0-0] 2024-09-30T05:22:33.072Z ERROR @wdio/utils:shim: SyntaxError: Invalid left-hand side in assignment\r\n[0-0]     at new Function (<anonymous>)\r\n[0-0]     at Browser.execute (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/webdriverio@9.1.2/node_modules/webdriverio/build/index.js:3032:53)\r\n[0-0]     at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n[0-0]     at Browser.wrapCommandFn (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+utils@9.1.2/node_modules/@wdio/utils/build/index.js:1380:23)\r\n[0-0]     at async SauceService._setJobName (file:///Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+sauce-service@9.1.2/node_modules/@wdio/sauce-service/build/index.js:488:5)\r\n[0-0]     at async SauceService.beforeTest (file:///Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+sauce-service@9.1.2/node_modules/@wdio/sauce-service/build/index.js:259:7)\r\n[0-0]     at async Promise.all (index 1)\r\n[0-0]     at executeHooksWithArgs (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+utils@9.1.2/node_modules/@wdio/utils/build/index.js:1363:18)\r\n[0-0]     at Context.testFrameworkFnWrapper (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+utils@9.1.2/node_modules/@wdio/utils/build/index.js:1566:39)\r\n[0-0] 2024-09-30T05:22:33.072Z DEBUG @wdio/utils:shim: Finished to run \"beforeTest\" hook in 0ms\r\n[0-0] Error in \"BeforeTest Hook\"\r\nInvalid left-hand side in assignment\r\n```\r\n\r\n### What is your expected behavior?\r\n\r\nThe testname can be updated, which works with `\"^9.0.7\"`\r\n\r\n### How to reproduce the bug.\r\n\r\nCreate a simple test, use the latest `sauce-service` and let it automatically update the test in Sauce\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\n[0-0] 2024-09-30T05:22:33.072Z ERROR @wdio/utils:shim: SyntaxError: Invalid left-hand side in assignment\r\n[0-0]     at new Function (<anonymous>)\r\n[0-0]     at Browser.execute (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/webdriverio@9.1.2/node_modules/webdriverio/build/index.js:3032:53)\r\n[0-0]     at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n[0-0]     at Browser.wrapCommandFn (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+utils@9.1.2/node_modules/@wdio/utils/build/index.js:1380:23)\r\n[0-0]     at async SauceService._setJobName (file:///Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+sauce-service@9.1.2/node_modules/@wdio/sauce-service/build/index.js:488:5)\r\n[0-0]     at async SauceService.beforeTest (file:///Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+sauce-service@9.1.2/node_modules/@wdio/sauce-service/build/index.js:259:7)\r\n[0-0]     at async Promise.all (index 1)\r\n[0-0]     at executeHooksWithArgs (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+utils@9.1.2/node_modules/@wdio/utils/build/index.js:1363:18)\r\n[0-0]     at Context.testFrameworkFnWrapper (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+utils@9.1.2/node_modules/@wdio/utils/build/index.js:1566:39)\r\n[0-0] 2024-09-30T05:22:33.072Z DEBUG @wdio/utils:shim: Finished to run \"beforeTest\" hook in 0ms\r\n[0-0] Error in \"BeforeTest Hook\"\r\nInvalid left-hand side in assignment\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 671,
    "test_files_count": 2,
    "non_test_files_count": 0,
    "pr_changed_files": [
      "packages/wdio-testingbot-service/src/service.ts",
      "packages/wdio-testingbot-service/tests/service.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-testingbot-service/src/service.ts",
      "packages/wdio-testingbot-service/tests/service.test.ts"
    ],
    "base_commit": "ae6b6ff27ef481c350b48e43fa7ab1fb4b043226",
    "head_commit": "f3967ec4fcfb9ae0a11fb307e67e72aca33d9ca5",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14033",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14033",
    "dockerfile": "",
    "pr_merged_at": "2025-01-06T22:59:07.000Z",
    "patch": "",
    "test_patch": "diff --git a/packages/wdio-testingbot-service/src/service.ts b/packages/wdio-testingbot-service/src/service.ts\nindex 09a02df28e8..96493497df7 100644\n--- a/packages/wdio-testingbot-service/src/service.ts\n+++ b/packages/wdio-testingbot-service/src/service.ts\n@@ -71,8 +71,25 @@ export default class TestingBotService implements Services.ServiceInstance {\n              */\n             `${test.parent} - ${test.title}`\n         )\n+        return this.setAnnotation(`tb:test-context=${context}`)\n+    }\n+\n+    /**\n+     * Update the running test on TestingBot with an annotation\n+     */\n+    async setAnnotation (annotation: string) {\n+        if (!this._browser) {\n+            return\n+        }\n+\n+        if (this._browser.isMultiremote) {\n+            return Promise.all(Object.keys(this._capabilities).map(async (browserName) => {\n+                const multiRemoteBrowser = (this._browser as WebdriverIO.MultiRemoteBrowser).getInstance(browserName)\n+                return multiRemoteBrowser.executeScript(annotation, [])\n+            }))\n+        }\n \n-        this._browser.execute('tb:test-context=' + context)\n+        return (this._browser as WebdriverIO.Browser).executeScript(annotation, [])\n     }\n \n     afterSuite (suite: Frameworks.Suite) {\n@@ -106,7 +123,7 @@ export default class TestingBotService implements Services.ServiceInstance {\n         }\n \n         this._suiteTitle = feature.name\n-        this._browser.execute('tb:test-context=Feature: ' + this._suiteTitle)\n+        return this.setAnnotation(`tb:test-context=Feature: ${this._suiteTitle}`)\n     }\n \n     /**\n@@ -120,7 +137,7 @@ export default class TestingBotService implements Services.ServiceInstance {\n             return\n         }\n         const scenarioName = world.pickle.name\n-        this._browser.execute('tb:test-context=Scenario: ' + scenarioName)\n+        return this.setAnnotation(`tb:test-context=Scenario: ${scenarioName}`)\n     }\n \n     /**\n\ndiff --git a/packages/wdio-testingbot-service/tests/service.test.ts b/packages/wdio-testingbot-service/tests/service.test.ts\nindex 089a8cd0a35..d8c04c7eab1 100644\n--- a/packages/wdio-testingbot-service/tests/service.test.ts\n+++ b/packages/wdio-testingbot-service/tests/service.test.ts\n@@ -13,12 +13,10 @@ vi.mock('fetch')\n vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdio/logger')))\n \n describe('wdio-testingbot-service', () => {\n-    const execute = vi.fn()\n-\n     let browser: WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser\n     beforeEach(() => {\n         browser = {\n-            execute,\n+            executeScript: vi.fn(),\n             sessionId: 'globalSessionId',\n             requestHandler: {\n                 auth: {\n@@ -27,16 +25,18 @@ describe('wdio-testingbot-service', () => {\n                 }\n             },\n             config: {},\n-            getInstance: vi.fn().mockImplementation((browserName: string) => browser[browserName]),\n-            chromeA: { sessionId: 'sessionChromeA' },\n-            chromeB: { sessionId: 'sessionChromeB' },\n-            chromeC: { sessionId: 'sessionChromeC' },\n+            getInstance: vi.fn().mockImplementation((browserName: string) => {\n+                // @ts-expect-error\n+                return browser[browserName] as WebdriverIO.Browser\n+            }),\n+            chromeA: { sessionId: 'sessionChromeA', executeScript: vi.fn() },\n+            chromeB: { sessionId: 'sessionChromeB', executeScript: vi.fn() },\n+            chromeC: { sessionId: 'sessionChromeC', executeScript: vi.fn() },\n             instances: ['chromeA', 'chromeB', 'chromeC'],\n-        } as any\n+        } as unknown as WebdriverIO.MultiRemoteBrowser\n     })\n \n     afterEach(() => {\n-        execute.mockReset()\n         vi.mocked(fetch).mockClear()\n     })\n \n@@ -71,9 +71,10 @@ describe('wdio-testingbot-service', () => {\n         expect(tbService['_suiteTitle']).toEqual(suiteTitle)\n     })\n \n-    it('beforeTest: execute not called', () => {\n+    it('beforeTest: setAnnotation not called', () => {\n         const tbService = new TestingBotService({}, {}, {})\n         tbService['_browser'] = browser\n+        tbService.setAnnotation = vi.fn()\n         const test = {\n             fullName: 'Test #1',\n             parent: 'Test parent'\n@@ -83,16 +84,17 @@ describe('wdio-testingbot-service', () => {\n         tbService['_suiteTitle'] = 'Test suite'\n         tbService.beforeTest(test)\n \n-        expect(execute).not.toBeCalled()\n+        expect(tbService.setAnnotation).not.toBeCalled()\n         expect(tbService['_suiteTitle']).toEqual('Test suite')\n     })\n \n-    it('beforeTest: execute called', () => {\n+    it('beforeTest: setAnnotation called', async () => {\n         const tbService = new TestingBotService({}, {}, {\n             user: 'user',\n             key: 'secret'\n         })\n         tbService['_browser'] = browser\n+        tbService.setAnnotation = vi.fn()\n         const test: Frameworks.Test = {\n             name: 'Test name',\n             fullName: 'Test #1',\n@@ -100,18 +102,19 @@ describe('wdio-testingbot-service', () => {\n             parent: 'Test parent'\n         } as any\n         tbService.beforeSuite({ title: 'Test suite' } as Frameworks.Suite)\n-        tbService.beforeTest(test)\n+        await tbService.beforeTest(test)\n \n-        expect(execute).toBeCalledWith('tb:test-context=Test #1')\n+        expect(tbService.setAnnotation).toBeCalledWith('tb:test-context=Test #1')\n         expect(tbService['_suiteTitle']).toEqual('Test suite')\n     })\n \n-    it('beforeTest: execute called for Jasmine tests', () => {\n+    it('beforeTest: setAnnotation called for Jasmine tests', async () => {\n         const tbService = new TestingBotService({}, {}, {\n             user: 'user',\n             key: 'secret'\n         })\n         tbService['_browser'] = browser\n+        tbService.setAnnotation = vi.fn()\n         const test: Frameworks.Test = {\n             name: 'Test name',\n             fullName: 'Test #1',\n@@ -120,18 +123,19 @@ describe('wdio-testingbot-service', () => {\n         } as any\n \n         tbService.beforeSuite({ title: 'Jasmine__TopLevel__Suite' } as Frameworks.Suite)\n-        tbService.beforeTest(test)\n+        await tbService.beforeTest(test)\n \n-        expect(execute).toBeCalledWith('tb:test-context=Test #1')\n+        expect(tbService.setAnnotation).toBeCalledWith('tb:test-context=Test #1')\n         expect(tbService['_suiteTitle']).toEqual('Test ')\n     })\n \n-    it('beforeTest: execute called for Mocha test', () => {\n+    it('beforeTest: setAnnotation called for Mocha test', () => {\n         const tbService = new TestingBotService({}, {}, {\n             user: 'user',\n             key: 'secret'\n         })\n         tbService['_browser'] = browser\n+        tbService.setAnnotation = vi.fn()\n         const test: Frameworks.Test = {\n             name: 'Test name',\n             title: 'Test title',\n@@ -141,7 +145,7 @@ describe('wdio-testingbot-service', () => {\n         tbService.beforeSuite({} as Frameworks.Suite)\n         tbService.beforeTest(test)\n \n-        expect(execute).toBeCalledWith('tb:test-context=Test parent - Test title')\n+        expect(tbService.setAnnotation).toBeCalledWith('tb:test-context=Test parent - Test title')\n     })\n \n     it('afterTest: failed test', () => {\n@@ -168,24 +172,26 @@ describe('wdio-testingbot-service', () => {\n         expect(tbService['_failures']).toEqual(1)\n     })\n \n-    it('beforeFeature: execute not called', () => {\n+    it('beforeFeature: setAnnotation not called', () => {\n         const tbService = new TestingBotService({}, {}, {})\n         tbService['_browser'] = browser\n+        tbService.setAnnotation = vi.fn()\n         tbService.beforeFeature(uri, featureObject)\n \n-        expect(execute).not.toBeCalled()\n+        expect(tbService.setAnnotation).not.toBeCalled()\n     })\n \n-    it('beforeFeature: execute called', () => {\n+    it('beforeFeature: setAnnotation called', () => {\n         const tbService = new TestingBotService({}, {}, {\n             user: 'user',\n             key: 'secret'\n         })\n         tbService['_browser'] = browser\n+        tbService.setAnnotation = vi.fn()\n         tbService.beforeFeature(uri, featureObject)\n \n         expect(tbService['_suiteTitle']).toEqual('Create a feature')\n-        expect(execute).toBeCalledWith('tb:test-context=Feature: Create a feature')\n+        expect(tbService.setAnnotation).toBeCalledWith('tb:test-context=Feature: Create a feature')\n     })\n \n     it('afterScenario: exception happened', () => {\n@@ -208,26 +214,28 @@ describe('wdio-testingbot-service', () => {\n         expect(tbService['_failures']).toBe(2)\n     })\n \n-    it('beforeScenario: execute not called', () => {\n+    it('beforeScenario: setAnnotation not called', () => {\n         const tbService = new TestingBotService({}, {}, {\n             user: 'user',\n             key: undefined\n         })\n         tbService['_browser'] = browser\n+        tbService.setAnnotation = vi.fn()\n         tbService.beforeScenario({ pickle: {} })\n \n-        expect(execute).not.toBeCalled()\n+        expect(tbService.setAnnotation).not.toBeCalled()\n     })\n \n-    it('beforeScenario: execute called', () => {\n+    it('beforeScenario: setAnnotation called', () => {\n         const tbService = new TestingBotService({}, {}, {\n             user: 'user',\n             key: 'secret'\n         })\n         tbService['_browser'] = browser\n+        tbService.setAnnotation = vi.fn()\n         tbService.beforeScenario({ pickle: { name: 'Scenario name' } })\n \n-        expect(execute).toBeCalledWith('tb:test-context=Scenario: Scenario name')\n+        expect(tbService.setAnnotation).toBeCalledWith('tb:test-context=Scenario: Scenario name')\n     })\n \n     it('after: updatedJob not called', async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14032",
    "pr_id": 14032,
    "issue_id": 14027,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: @wdio/appium-service is unable to start appium server on a multiremote capabilitites setup\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\n9.5.1\r\n\r\n### Node.js Version\r\n\r\n20.14.0\r\n\r\n### Mode\r\n\r\nWDIO Testrunner\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\ncapabilities: {\r\n    chromiumDriver: {\r\n      capabilities: {\r\n        browserName: \"chrome\",\r\n        browserVersion: \"133.0.6929.0\",  // Have to specify version, otherwise its failing with 404 chrome version not found.\r\n        \"goog:chromeOptions\": {\r\n          args: [\"--headless\"],\r\n        },\r\n      },\r\n    },\r\nmobileDriver: {\r\n  capabilities: {\r\n     platformName: \"iOS\",\r\n    \"appium:deviceName\": \"iPhone 15\",\r\n    \"appium:platformVersion\": \"17.5\",\r\n    \"appium:orientation\": \"PORTRAIT\",\r\n    \"appium:automationName\": \"XCUITest\",\r\n    \"appium:app\": APP_FILE_PATH,\r\n    \"appium:newCommandTimeout\": 240,\r\n    \"appium:webviewConnectTimeout\": 5000,\r\n    \"appium:autoLaunch\": true,\r\n    \"appium:autoAcceptAlerts\": false,\r\n  },\r\n  },\r\n```\r\n\r\n\r\n### What happened?\r\n\r\nOn multi remote capability setup(desktop chrome + android app), appium service is not able to start appium properly.\r\nGetting below error.\r\n```\r\n2025-01-03T16:05:32.841Z WARN @wdio/appium-service: Could not identify any capability that indicates a local Appium session, skipping Appium launch\r\nWebDriverError: Request failed with error code ECONNREFUSED when running \"http://127.0.0.1:57723/session\" with method \"POST\" and args \"{\"capabilities\":{\"alwaysMatch\":{\"platformName\":\"iOS\",\"appium:deviceName\":\"iPhone 15\",\"appium:platformVersion\":\"17.5\",\"appium:orientation\":\"PORTRAIT\",\"appium:automationName\":\"XCUITest\",\"appium:app\":\"/Users/home/Library/Developer/Xcode/DerivedData/XXX-gxgawsgfnyudatatssesutogkjvy/Build/Products/Debug-iphonesimulator/XXX-Dev.app\",\"appium:newCommandTimeout\":240,\"appium:webviewConnectTimeout\":5000,\"appium:autoLaunch\":true,\"appium:autoAcceptAlerts\":false},\"firstMatch\":[{}]}}\"\r\n[0-0] 2025-01-03T16:05:33.984Z INFO webdriver: Retrying 1/2\r\n\r\n```\r\n\r\nIf i downgrade to `@wdio/appium-service` to `8.41.0` it works as expected ✅ \r\n\r\n### What is your expected behavior?\r\n\r\nAppium service should start and kill the appium server properly on latest `9.5.1` version\r\n\r\n### How to reproduce the bug.\r\n\r\nFollowing capabilities can be used\r\n\r\n```\r\ncapabilities: {\r\n    chromiumDriver: {\r\n      capabilities: {\r\n        browserName: \"chrome\",\r\n        browserVersion: \"133.0.6929.0\",  // Have to specify version, otherwise its failing with 404 chrome version not found.\r\n        \"goog:chromeOptions\": {\r\n          args: [\"--headless\"],\r\n        },\r\n      },\r\n    },\r\nmobileDriver: {\r\n  capabilities: {\r\n    platformName: \"Android\",\r\n    \"appium:platformVersion\": \"14.0\",\r\n    \"appium:automationName\": \"UiAutomator2\",\r\n    \"appium:app\": APK_FILE_PATH,\r\n    \"appium:appPackage\": `${process.env.ANDROID_APP_ID}`,\r\n    \"appium:autoLaunch\": false,\r\n    \"appium:autoGrantPermissions\": false,\r\n    \"appium:uiautomator2ServerLaunchTimeout\": 60000,\r\n    \"appium:uiautomator2ServerInstallTimeout\": 60000,\r\n    \"appium:avdLaunchTimeout\": 120000,\r\n    \"appium:avdReadyTimeout\": 120000,\r\n    \"appium:fullReset\": false,\r\n    \"appium:noReset\": true,\r\n    ...(process.env.ANDROID_UDID\r\n      ? {\r\n          \"appium:udid\": process.env.ANDROID_UDID,\r\n        }\r\n      : { \"appium:avd\": AVD_NAME }),\r\n    \"appium:port\": 4723,\r\n  },\r\n  },\r\n```\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\n2025-01-03T16:05:32.837Z INFO @wdio/cli:launcher: Run onPrepare hook\r\n2025-01-03T16:05:32.841Z WARN @wdio/appium-service: Could not identify any capability that indicates a local Appium session, skipping Appium launch\r\n2025-01-03T16:05:32.842Z INFO @wdio/utils: Setting up browser driver for: chrome@133.0.6929.0\r\n2025-01-03T16:05:32.842Z INFO @wdio/utils: Setting up browser binaries for: chrome@133.0.6929.0\r\n2025-01-03T16:05:32.868Z INFO webdriver: Using Chromedriver v133.0.6929.0 from cache directory /var/folders/97/7yl5_4hn0sl5lb2hz9n28bj00000gn/T\r\n2025-01-03T16:05:32.976Z INFO webdriver: Setting up chrome v133.0.6929.0\r\n2025-01-03T16:05:32.977Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2025-01-03T16:05:32.977Z INFO @wdio/local-runner: Start worker 0-0 with arg: run ./src/configs/ios.config.ts --spec newUserSetup.test --env develop\r\n[0-0] 2025-01-03T16:05:33.569Z INFO @wdio/local-runner: Run worker command: run\r\n[0-0] RUNNING in MultiRemote - file:///src/tests/newUserSetup.test.ts\r\n[0-0] 2025-01-03T16:05:33.967Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n[0-0] 2025-01-03T16:05:33.967Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n[0-0] 2025-01-03T16:05:33.967Z INFO @wdio/utils: Connecting to existing driver at http://127.0.0.1:57723/\r\n[0-0] 2025-01-03T16:05:33.978Z INFO webdriver: [POST] http://127.0.0.1:57723/session\r\n[0-0] 2025-01-03T16:05:33.978Z INFO webdriver: DATA {\r\n[0-0]   capabilities: {\r\n[0-0]     alwaysMatch: {\r\n[0-0]       platformName: 'iOS',\r\n[0-0]       'appium:deviceName': 'iPhone 15',\r\n[0-0]       'appium:platformVersion': '17.5',\r\n[0-0]       'appium:orientation': 'PORTRAIT',\r\n[0-0]       'appium:automationName': 'XCUITest',\r\n[0-0]       'appium:app': '/Users/home/Library/Developer/Xcode/DerivedData/XXX-gxgawsgfnyudatatssesutogkjvy/Build/Products/Debug-iphonesimulator/XXXX-Dev.app',\r\n[0-0]       'appium:newCommandTimeout': 240,\r\n[0-0]       'appium:webviewConnectTimeout': 5000,\r\n[0-0]       'appium:autoLaunch': true,\r\n[0-0]       'appium:autoAcceptAlerts': false\r\n[0-0]     },\r\n[0-0]     firstMatch: [ {} ]\r\n[0-0]   }\r\n[0-0] }\r\n[0-0] 2025-01-03T16:05:33.984Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"http://127.0.0.1:57723/session\" with method \"POST\" and args \"{\"capabilities\":{\"alwaysMatch\":{\"platformName\":\"iOS\",\"appium:deviceName\":\"iPhone 15\",\"appium:platformVersion\":\"17.5\",\"appium:orientation\":\"PORTRAIT\",\"appium:automationName\":\"XCUITest\",\"appium:app\":\"/Users/home/Library/Developer/Xcode/DerivedData/XXXX-gxgawsgfnyudatatssesutogkjvy/Build/Products/Debug-iphonesimulator/XXX-Dev.app\",\"appium:newCommandTimeout\":240,\"appium:webviewConnectTimeout\":5000,\"appium:autoLaunch\":true,\"appium:autoAcceptAlerts\":false},\"firstMatch\":[{}]}}\"\r\n[0-0] 2025-01-03T16:05:33.984Z INFO webdriver: Retrying 1/2\r\n[0-0] 2025-01-03T16:05:33.984Z INFO webdriver: [POST] http://127.0.0.1:57723/session\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 869,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-appium-service/src/launcher.ts",
      "packages/wdio-appium-service/tests/launcher.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-appium-service/tests/launcher.test.ts"
    ],
    "base_commit": "ae6b6ff27ef481c350b48e43fa7ab1fb4b043226",
    "head_commit": "356ff2ba027064e37caa1f8628c0dc2e9a24984f",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14032",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14032",
    "dockerfile": "",
    "pr_merged_at": "2025-01-06T22:57:29.000Z",
    "patch": "diff --git a/packages/wdio-appium-service/src/launcher.ts b/packages/wdio-appium-service/src/launcher.ts\nindex 300d136966f..cb15972f20b 100644\n--- a/packages/wdio-appium-service/src/launcher.ts\n+++ b/packages/wdio-appium-service/src/launcher.ts\n@@ -93,7 +93,7 @@ export default class AppiumLauncher implements Services.ServiceInstance {\n                     )\n                 }\n             }\n-            return\n+            return capabilityWasUpdated\n         }\n \n         this._capabilities.forEach((cap) => {\n",
    "test_patch": "diff --git a/packages/wdio-appium-service/tests/launcher.test.ts b/packages/wdio-appium-service/tests/launcher.test.ts\nindex b5186604c3b..575083c9741 100644\n--- a/packages/wdio-appium-service/tests/launcher.test.ts\n+++ b/packages/wdio-appium-service/tests/launcher.test.ts\n@@ -42,8 +42,9 @@ vi.mock('child_process', () => ({\n     spawn: vi.fn(),\n     exec: vi.fn()\n }))\n-vi.mock('import-meta-resolve', () => ({ resolve: vi.fn().mockResolvedValue(\n-    url.pathToFileURL(path.resolve(process.cwd(), '/', 'foo', 'bar', 'appium')))\n+vi.mock('import-meta-resolve', () => ({\n+    resolve: vi.fn().mockResolvedValue(\n+        url.pathToFileURL(path.resolve(process.cwd(), '/', 'foo', 'bar', 'appium')))\n }))\n \n vi.mock('get-port', () => ({\n@@ -161,7 +162,7 @@ describe('Appium launcher', () => {\n         test('mac: should set correct config properties', async () => {\n             const options = {\n                 logPath: './',\n-                command:'path/to/my_custom_appium',\n+                command: 'path/to/my_custom_appium',\n                 args: { address: 'bar', defaultCapabilities: { 'foo': 'bar' } },\n             }\n             const capabilities = [{ port: 1234, 'appium:deviceName': 'baz' }] as WebdriverIO.Capabilities[]\n@@ -195,7 +196,7 @@ describe('Appium launcher', () => {\n             vi.mocked(os.platform).mockReturnValueOnce('win32')\n             const options = {\n                 logPath: './',\n-                command:'path/to/my_custom_appium',\n+                command: 'path/to/my_custom_appium',\n                 args: { address: 'bar', defaultCapabilities: { 'foo': 'bar' } },\n             }\n             const capabilities = [{ port: 1234, 'appium:deviceName': 'baz' }] as WebdriverIO.Capabilities[]\n@@ -306,9 +307,9 @@ describe('Appium launcher', () => {\n \n         test('should not override cloud config using multiremote', async () => {\n             const options = {\n-                logPath : './',\n-                args : { address: 'foo' },\n-                installArgs : { bar : 'bar' },\n+                logPath: './',\n+                args: { address: 'foo' },\n+                installArgs: { bar: 'bar' },\n             }\n             const capabilities: Capabilities.RequestedMultiremoteCapabilities = {\n                 browserA: { port: 1234, capabilities: { 'appium:deviceName': 'baz' } },\n@@ -331,7 +332,7 @@ describe('Appium launcher', () => {\n             const options = {\n                 logPath: './',\n                 command: 'path/to/my_custom_appium',\n-                args: { address:'bar', port: 1234 }\n+                args: { address: 'bar', port: 1234 }\n             }\n             const capabilities = [{ 'appium:deviceName': 'baz' }] as WebdriverIO.Capabilities[]\n             const launcher = new AppiumLauncher(options, capabilities, {} as any)\n@@ -363,7 +364,7 @@ describe('Appium launcher', () => {\n             const options = {\n                 logPath: './',\n                 command: 'path/to/my_custom_appium',\n-                args: { address:'bar', port: 1234 }\n+                args: { address: 'bar', port: 1234 }\n             }\n             const capabilities = [{ 'appium:deviceName': 'baz' }] as WebdriverIO.Capabilities[]\n             const launcher = new AppiumLauncher(options, capabilities, {} as any)\n@@ -669,6 +670,43 @@ describe('Appium launcher', () => {\n             expect(capabilities[1].browserD.port).toBe(4723)\n             expect(capabilities[1].browserD.path).toBe('/')\n         })\n+\n+        test('should set host and port capabilities for normal multiremote capabilities', async () => {\n+            const options = {\n+                logPath: './',\n+                command: 'path/to/my_custom_appium',\n+                args: { address: 'bar' }\n+            }\n+            const capabilities: Capabilities.RequestedMultiremoteCapabilities = {\n+                chromiumDriver: {\n+                    capabilities: {\n+                        browserName: 'chrome',\n+                        browserVersion: '133.0.6929.0',  // Have to specify version, otherwise its failing with 404 chrome version not found.\n+                        'goog:chromeOptions': {\n+                            args: ['--headless'],\n+                        },\n+                    },\n+                },\n+                mobileDriver: {\n+                    capabilities: {\n+                        platformName: 'iOS',\n+                        'appium:deviceName': 'iPhone 15',\n+                        'appium:platformVersion': '17.5',\n+                        'appium:orientation': 'PORTRAIT',\n+                        'appium:automationName': 'XCUITest',\n+                        'appium:app': 'APP_FILE_PATH',\n+                        'appium:newCommandTimeout': 240,\n+                        'appium:webviewConnectTimeout': 5000,\n+                        'appium:autoLaunch': true,\n+                        'appium:autoAcceptAlerts': false,\n+                    },\n+                }\n+            }\n+            const launcher = new AppiumLauncher(options, capabilities, {} as any)\n+            launcher['_startAppium'] = vi.fn().mockResolvedValue(new MockProcess())\n+            await launcher.onPrepare()\n+            expect(launcher['_startAppium']).toHaveBeenCalledTimes(1)\n+        })\n     })\n \n     describe('onComplete', () => {\n@@ -858,11 +896,10 @@ describe('Appium launcher', () => {\n             const mockLogError = vi.spyOn(log, 'error')\n             const launcher = new AppiumLauncher({}, [], {} as any)\n \n-            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n             const processPromise = launcher['_startAppium']('node', [], 2000)\n \n             const errorHandler = vi.mocked(spawn).mock.results[0].value.stderr.on.mock.calls\n-                .find(call => call[0] === 'data')?.[1]\n+                .find((call: string[]) => call[0] === 'data')?.[1]\n \n             errorHandler(Buffer.from('Debugger attached'))\n             expect(mockLogError).not.toHaveBeenCalled()\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14025",
    "pr_id": 14025,
    "issue_id": 13989,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "Multi tabs, after calling closeWindow , switchWindow fails with 'WebDriverError: no such window: target window already closed\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\nlatest\r\n\r\n### Node.js Version\r\n\r\n22.9\r\n\r\n### Mode\r\n\r\nWDIO Testrunner\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\ncapabilities: [\r\n    {\r\n      browserName: \"chrome\",\r\n      \"wdio:enforceWebDriverClassic\": true,\r\n}]\r\n```\r\n\r\n\r\n### What happened?\r\n\r\nThis is the same bug that was reported by issue 13882. Erwin H in the Support Chat mentioned to create a new issue off of that PR. To avoid repeating details, the original issue is https://github.com/webdriverio/webdriverio/issues/13882\r\n\r\n### What is your expected behavior?\r\n\r\nTo not receive errors when switching windows and closing.\r\n\r\n### How to reproduce the bug.\r\n\r\nSee details in https://github.com/webdriverio/webdriverio/issues/13882\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\nWebDriverError: no such window: target window already closed\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 181,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "e2e/wdio/headless/classic.e2e.ts",
      "packages/webdriverio/src/commands/browser/switchWindow.ts",
      "packages/webdriverio/src/context.ts",
      "packages/webdriverio/tests/module.test.ts"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/classic.e2e.ts",
      "packages/webdriverio/tests/module.test.ts"
    ],
    "base_commit": "901276c7bbbd2b33f8a7609b8e0c1de8c4d5b35f",
    "head_commit": "78b256ae495b386d4f9ce2a761abb6396e434c41",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14025",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14025",
    "dockerfile": "",
    "pr_merged_at": "2025-01-08T19:21:49.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/switchWindow.ts b/packages/webdriverio/src/commands/browser/switchWindow.ts\nindex 9e6d79d2d82..6f7af93ed0a 100644\n--- a/packages/webdriverio/src/commands/browser/switchWindow.ts\n+++ b/packages/webdriverio/src/commands/browser/switchWindow.ts\n@@ -101,5 +101,6 @@ export async function switchWindow (\n     }\n \n     await this.switchToWindow(currentWindow)\n+\n     throw new Error(`No window found with title, url, name or window handle matching \"${matcher}\"`)\n }\n\ndiff --git a/packages/webdriverio/src/context.ts b/packages/webdriverio/src/context.ts\nindex 176f710af95..4060e5ee83b 100644\n--- a/packages/webdriverio/src/context.ts\n+++ b/packages/webdriverio/src/context.ts\n@@ -36,6 +36,21 @@ export class ContextManager {\n             isNativeContext: this.#isNativeContext\n         })\n \n+        /**\n+         * Listens for the 'closeWindow' browser command to handle context changes.\n+         * (classic + bidi)\n+         */\n+        this.#browser.on('result', (event) => {\n+            /**\n+             * the `closeWindow` command returns:\n+             *   > the result of running the remote end steps for the Get Window Handles command, with session, URL variables and parameters.\n+             */\n+            if (event.command === 'closeWindow') {\n+                this.#currentContext = (event.result as { value: string[] }).value[0]\n+                return this.#browser.switchToWindow(this.#currentContext)\n+            }\n+        })\n+\n         if (!this.#isEnabled()) {\n             return\n         }\n@@ -77,14 +92,6 @@ export class ContextManager {\n          * Listens for the 'closeWindow' browser command to handle context changes.\n          */\n         this.#browser.on('result', (event) => {\n-            /**\n-             * the `closeWindow` command returns:\n-             *   > the result of running the remote end steps for the Get Window Handles command, with session, URL variables and parameters.\n-             */\n-            if (event.command === 'closeWindow') {\n-                this.#currentContext = (event.result as { value: string[] }).value[0]\n-                return this.#browser.switchToWindow(this.#currentContext)\n-            }\n \n             if (this.#browser.isMobile) {\n                 if (event.command === 'getContext') {\n",
    "test_patch": "diff --git a/e2e/wdio/headless/classic.e2e.ts b/e2e/wdio/headless/classic.e2e.ts\nindex 6c13387c307..b2fa0ca036c 100644\n--- a/e2e/wdio/headless/classic.e2e.ts\n+++ b/e2e/wdio/headless/classic.e2e.ts\n@@ -8,3 +8,22 @@ describe('__name polyfill', () => {\n         expect(await browser.executeAsync(scripts.someAsyncScript, 'foo')).toBe('Hello World! foo')\n     })\n })\n+\n+describe('handle windows in webdriver classic', () => {\n+    it('should handle window closing and switching in WebDriver Classic mode', async () => {\n+        await browser.url('https://the-internet.herokuapp.com/iframe')\n+        const elementalSeleniumLink = await $('/html/body/div[3]/div/div/a')\n+        await elementalSeleniumLink.waitForDisplayed()\n+        await elementalSeleniumLink.click()\n+        await browser.waitUntil(async () => (await browser.getWindowHandles()).length === 2)\n+        await browser.switchWindow('https://elementalselenium.com/')\n+        await $('#__docusaurus_skipToContent_fallback').waitForDisplayed()\n+        await browser.closeWindow()\n+        await $('#__docusaurus_skipToContent_fallback').waitForDisplayed({ reverse: true })\n+        await browser.waitUntil(async () => (await browser.getWindowHandles()).length === 1)\n+        await browser.switchWindow('https://the-internet.herokuapp.com/iframe')\n+\n+        // Verify we're on the original window\n+        expect(await $('.example h3').getText()).toBe('An iFrame containing the TinyMCE WYSIWYG Editor')\n+    })\n+})\n\ndiff --git a/packages/webdriverio/tests/module.test.ts b/packages/webdriverio/tests/module.test.ts\nindex d85dff67e53..4971cbb967f 100644\n--- a/packages/webdriverio/tests/module.test.ts\n+++ b/packages/webdriverio/tests/module.test.ts\n@@ -15,7 +15,8 @@ vi.mock('webdriver', () => {\n         addCommand: vi.fn(),\n         overwriteCommand: vi.fn(),\n         strategies: new Map(),\n-        isWebDriver: true\n+        isWebDriver: true,\n+        on: vi.fn()\n     }\n     const newSessionMock = vi.fn()\n     newSessionMock.mockReturnValue(new Promise((resolve) => resolve(client)))\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14024",
    "pr_id": 14024,
    "issue_id": 13954,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[💡 Feature]: Support .entries() for ChainablePromiseArray\n### Is your feature request related to a problem?\r\n\r\nRelated to https://github.com/webdriverio/webdriverio/issues/13943\r\n\r\nFor now, it's not possible to access loop index from a \"for...of loop\" with the following example:\r\n\r\nfor await (const [index, element] of await browser.$$('a').entries()) {\r\n        console.log(await element.getText())\r\n}\r\n\r\nBecause:\r\n* \".entries()\" doesn't exist for an ChainablePromiseArray\r\n* Without the \".entries()\" the type is in a error because element doesn't have method  'Symbol.iterator' \r\n\r\n\r\n\r\n### Describe the solution you'd like.\r\n\r\nThe iterator/index of the loop is available\r\n\r\n### Describe alternatives you've considered.\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct",
    "issue_word_count": 120,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/wdio-utils/src/shim.ts",
      "packages/webdriverio/src/types.ts",
      "packages/webdriverio/tests/commands/element/$$.test.ts",
      "tests/typings/webdriverio/async.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/element/$$.test.ts",
      "tests/typings/webdriverio/async.ts"
    ],
    "base_commit": "e6e03a67bd5e71d7d8fe570ff53a977cb9848e83",
    "head_commit": "6742b361534b1c257335c716531b6052e5fe1f70",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14024",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14024",
    "dockerfile": "",
    "pr_merged_at": "2025-01-27T16:20:31.000Z",
    "patch": "diff --git a/packages/wdio-utils/src/shim.ts b/packages/wdio-utils/src/shim.ts\nindex 59670a461c9..18f033ae405 100644\n--- a/packages/wdio-utils/src/shim.ts\n+++ b/packages/wdio-utils/src/shim.ts\n@@ -155,7 +155,7 @@ export function wrapCommand<T>(commandName: string, fn: Function): (...args: unk\n                     /**\n                      * handle symbols, e.g. async iterators\n                      */\n-                    if (typeof prop === 'symbol') {\n+                    if (typeof prop === 'symbol'|| prop === 'entries') {\n                         return () => ({\n                             i: 0,\n                             target,\n@@ -166,6 +166,10 @@ export function wrapCommand<T>(commandName: string, fn: Function): (...args: unk\n                                 }\n \n                                 if (this.i < elems.length) {\n+                                    // For entries(), return [index, element] pair\n+                                    if (prop === 'entries') {\n+                                        return { value: [this.i, elems[this.i++]], done: false }\n+                                    }\n                                     return { value: elems[this.i++], done: false }\n                                 }\n \n\ndiff --git a/packages/webdriverio/src/types.ts b/packages/webdriverio/src/types.ts\nindex f43744f7496..b27dea0ca84 100644\n--- a/packages/webdriverio/src/types.ts\n+++ b/packages/webdriverio/src/types.ts\n@@ -92,6 +92,7 @@ interface AsyncIterators<T> {\n     filter: <T>(callback: (currentValue: WebdriverIO.Element, index: number, array: T[]) => boolean | Promise<boolean>, thisArg?: T) => Promise<WebdriverIO.Element[]>;\n     filterSeries: <T>(callback: (currentValue: WebdriverIO.Element, index: number, array: T[]) => boolean | Promise<boolean>, thisArg?: T) => Promise<WebdriverIO.Element[]>;\n     reduce: <T, U>(callback: (accumulator: U, currentValue: WebdriverIO.Element, currentIndex: number, array: T[]) => U | Promise<U>, initialValue?: U) => Promise<U>;\n+    entries(): AsyncIterableIterator<[number, WebdriverIO.Element]>;\n }\n \n export interface ChainablePromiseArray extends AsyncIterators<WebdriverIO.Element> {\n@@ -121,6 +122,11 @@ export interface ChainablePromiseArray extends AsyncIterators<WebdriverIO.Elemen\n      * get the `WebdriverIO.Element[]` list\n      */\n     getElements(): Promise<WebdriverIO.ElementArray>\n+\n+    /**\n+     * Returns an async iterator of key/value pairs for every index in the array.\n+     */\n+    entries(): AsyncIterableIterator<[number, WebdriverIO.Element]>\n }\n \n export type BrowserCommandsType = Omit<$BrowserCommands, keyof ChainablePrototype> & ChainablePrototype\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/element/$$.test.ts b/packages/webdriverio/tests/commands/element/$$.test.ts\nindex b7e6e2c8dfa..58858c69947 100644\n--- a/packages/webdriverio/tests/commands/element/$$.test.ts\n+++ b/packages/webdriverio/tests/commands/element/$$.test.ts\n@@ -68,6 +68,52 @@ describe('element', () => {\n         expect(elems[2].isMobile).toBe(true)\n     })\n \n+    it('should be able to use entries', async () => {\n+        const browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: {\n+                browserName: 'foobar'\n+            }\n+        })\n+\n+        const elem = await browser.$('#foo')\n+        const elems = await elem.$$('.foo')\n+        const entries = []\n+        for await (const entry of elems.entries()) {\n+            const [index, element] = entry\n+            entries.push([\n+                index,\n+                {\n+                    elementId: element.elementId,\n+                    [ELEMENT_KEY]: element[ELEMENT_KEY],\n+                    selector: element.selector,\n+                    index: element.index\n+                }\n+            ])\n+        }\n+\n+        expect(entries).toStrictEqual([\n+            [0, {\n+                [ELEMENT_KEY]: 'some-sub-elem-321',\n+                selector: '.foo',\n+                index: 0,\n+                elementId: 'some-sub-elem-321'\n+            }],\n+            [1, {\n+                [ELEMENT_KEY]: 'some-elem-456',\n+                selector: '.foo',\n+                index: 1,\n+                elementId: 'some-elem-456'\n+            }],\n+            [2, {\n+                [ELEMENT_KEY]: 'some-elem-789',\n+                selector: '.foo',\n+                index: 2,\n+                elementId: 'some-elem-789'\n+            }]\n+        ])\n+    })\n+\n     afterEach(() => {\n         vi.mocked(fetch).mockClear()\n     })\n\ndiff --git a/tests/typings/webdriverio/async.ts b/tests/typings/webdriverio/async.ts\nindex 0bf7f9471f2..969890f525c 100644\n--- a/tests/typings/webdriverio/async.ts\n+++ b/tests/typings/webdriverio/async.ts\n@@ -539,6 +539,23 @@ async function bar() {\n     // @ts-expect-error\n     const multiElementError2 = multiElements.getElement()\n \n+    // test entries() functionality\n+    for await (const [index, element] of await browser.$$('foo').entries()) {\n+        expectType<number>(index)\n+        expectType<WebdriverIO.Element>(element)\n+    }\n+\n+    // test with elements array\n+    const elemArray = await browser.$$('foo').getElements()\n+    for await (const [index, element] of elemArray.entries()) {\n+        expectType<number>(index)\n+        expectType<WebdriverIO.Element>(element)\n+    }\n+\n+    // test return type of entries()\n+    const entriesIterator = browser.$$('foo').entries()\n+    expectType<AsyncIterableIterator<[number, WebdriverIO.Element]>>(entriesIterator)\n+\n     // Emulate tests\n     let restore = await browser.emulate('geolocation', { latitude: 1, longitude: 2 })\n     await restore()\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14023",
    "pr_id": 14023,
    "issue_id": 14019,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Swipe method will not recognize scrollableElement if user pass it as variable and also type error \n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.5\n\n### Node.js Version\n\n22.12\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n_No response_\n\n### What happened?\n\n<img width=\"1624\" alt=\"Screenshot 2025-01-01 at 11 12 36\" src=\"https://github.com/user-attachments/assets/ad53ebda-f83a-4dac-b817-14d618c117cb\" />\r\nWhen using swipe method I passed scrollableElement as variable the code not work and returned an error\r\n`Error: Malformed type for \"elementId\" parameter of command getElementRect\r\nExpected: string\r\nActual: object`\r\nAlso as in the image the scrollEle also has type error even when it's the same as the doc example\r\n`Type 'ChainablePromiseElement' is not assignable to type 'Element'.\r\n  Types of property 'parent' are incompatible.\r\n    Type 'Promise<Browser | Element | MultiRemoteBrowser>' is not assignable to type 'Browser | Element'.ts(2322)`\r\n \n\n### What is your expected behavior?\n\n_No response_\n\n### How to reproduce the bug.\n\ndeclare the scrollableElement as variable and pass that variable into swipe method\n\n### Relevant log output\n\n```typescript\nError: Malformed type for \"elementId\" parameter of command getElementRect\r\nExpected: string\r\nActual: object\r\n\r\nFor more info see https://w3c.github.io/webdriver/#dfn-get-element-rect\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 252,
    "test_files_count": 3,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/element/scrollIntoView.ts",
      "packages/webdriverio/src/commands/mobile/swipe.ts",
      "packages/webdriverio/src/types.ts",
      "packages/webdriverio/tests/commands/element/scrollIntoView.test.ts",
      "packages/webdriverio/tests/commands/mobile/swipe.test.ts",
      "packages/webdriverio/tests/commands/mobile/tap.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/element/scrollIntoView.test.ts",
      "packages/webdriverio/tests/commands/mobile/swipe.test.ts",
      "packages/webdriverio/tests/commands/mobile/tap.test.ts"
    ],
    "base_commit": "94f0c0d6127ec44e82f3bda3527ef558038dbc24",
    "head_commit": "760351673fbb765f1776f70abfe4173e6612fdf2",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14023",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14023",
    "dockerfile": "",
    "pr_merged_at": "2025-01-02T20:35:33.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/element/scrollIntoView.ts b/packages/webdriverio/src/commands/element/scrollIntoView.ts\nindex 7640ef13596..6a9bd774066 100644\n--- a/packages/webdriverio/src/commands/element/scrollIntoView.ts\n+++ b/packages/webdriverio/src/commands/element/scrollIntoView.ts\n@@ -2,7 +2,7 @@ import logger from '@wdio/logger'\n import { ELEMENT_KEY } from 'webdriver'\n \n import { getBrowserObject } from '@wdio/utils'\n-import type { CustomScrollIntoViewOptions, MobileScrollIntoViewOptions } from '../../types.js'\n+import type { ChainablePromiseElement, CustomScrollIntoViewOptions, MobileScrollIntoViewOptions } from '../../types.js'\n import { MobileScrollDirection } from '../../types.js'\n \n const log = logger('webdriverio')\n@@ -145,8 +145,8 @@ type MobileScrollUntilVisibleOptions = {\n     browser: WebdriverIO.Browser;\n     element: WebdriverIO.Element;\n     maxScrolls: number;\n-    direction: MobileScrollDirection;\n-    scrollableElement?: WebdriverIO.Element | null;\n+    direction: `${MobileScrollDirection}`;\n+    scrollableElement?: WebdriverIO.Element | ChainablePromiseElement | null;\n     duration?: number;\n     percent?: number;\n };\n\ndiff --git a/packages/webdriverio/src/commands/mobile/swipe.ts b/packages/webdriverio/src/commands/mobile/swipe.ts\nindex 51645bc0ba6..0ffd6d1f8d5 100644\n--- a/packages/webdriverio/src/commands/mobile/swipe.ts\n+++ b/packages/webdriverio/src/commands/mobile/swipe.ts\n@@ -1,6 +1,6 @@\n import logger from '@wdio/logger'\n \n-import type { SwipeOptions, XY } from '../../types.js'\n+import type { ChainablePromiseElement, SwipeOptions, XY } from '../../types.js'\n import { MobileScrollDirection } from '../../types.js'\n \n const log = logger('webdriverio')\n@@ -106,9 +106,9 @@ async function calculateFromTo({\n     scrollableElement\n }: {\n     browser: WebdriverIO.Browser,\n-    direction: MobileScrollDirection,\n+    direction: `${MobileScrollDirection}`,\n     percentage?: number,\n-    scrollableElement: WebdriverIO.Element\n+    scrollableElement: WebdriverIO.Element | ChainablePromiseElement\n     }): Promise<{ from: XY, to: XY }> {\n     // 1. Determine the percentage of the scrollable container to be scrolled\n     // The swipe percentage is the percentage of the scrollable container that should be scrolled\n@@ -136,7 +136,7 @@ async function calculateFromTo({\n     //    - bottom\n     //    - left\n     //    of the element. These positions will contain the x and y coordinates on where to put the finger\n-    const { x, y, width, height } = await browser.getElementRect(scrollableElement?.elementId)\n+    const { x, y, width, height } = await browser.getElementRect(await scrollableElement?.elementId)\n     // It's always advisable to swipe from the center of the element.\n     const scrollRectangles = {\n         top: { x: Math.round(x + width / 2), y: Math.round(y + height - height * swipePercentage) },\n\ndiff --git a/packages/webdriverio/src/types.ts b/packages/webdriverio/src/types.ts\nindex fb22e9310b1..d1bf75c2e67 100644\n--- a/packages/webdriverio/src/types.ts\n+++ b/packages/webdriverio/src/types.ts\n@@ -537,11 +537,11 @@ export type XY = {\n }\n \n export type SwipeOptions = {\n-    direction?: MobileScrollDirection;\n+    direction?: `${MobileScrollDirection}`;\n     duration?: number;\n     from?: XY;\n     percent?: number;\n-    scrollableElement?: WebdriverIO.Element ;\n+    scrollableElement?: WebdriverIO.Element | ChainablePromiseElement ;\n     to?: XY;\n }\n \n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/element/scrollIntoView.test.ts b/packages/webdriverio/tests/commands/element/scrollIntoView.test.ts\nindex ddd204fd13c..34ea5fa97cc 100644\n--- a/packages/webdriverio/tests/commands/element/scrollIntoView.test.ts\n+++ b/packages/webdriverio/tests/commands/element/scrollIntoView.test.ts\n@@ -207,7 +207,6 @@ describe('scrollIntoView test', () => {\n             const swipeSpy = vi.spyOn(browser, 'swipe').mockResolvedValue(undefined)\n \n             await elem.scrollIntoView({\n-                // @ts-expect-error\n                 direction: 'left',\n                 duration: 3000,\n                 percent: 0.5,\n\ndiff --git a/packages/webdriverio/tests/commands/mobile/swipe.test.ts b/packages/webdriverio/tests/commands/mobile/swipe.test.ts\nindex b8fab856650..4c8f513bac8 100644\n--- a/packages/webdriverio/tests/commands/mobile/swipe.test.ts\n+++ b/packages/webdriverio/tests/commands/mobile/swipe.test.ts\n@@ -1,5 +1,5 @@\n import path from 'node:path'\n-import type { Mock } from 'vitest'\n+import type { Mock, VitestUtils } from 'vitest'\n import { beforeEach, expect, describe, it, afterEach, vi, beforeAll } from 'vitest'\n import logger from '@wdio/logger'\n import { MobileScrollDirection, remote } from '../../../src/index.js'\n@@ -10,8 +10,8 @@ vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdi\n \n let browser: WebdriverIO.Browser\n let elem: WebdriverIO.Element\n-let rectSpy\n-let logSpy\n+let rectSpy: any\n+let logSpy: any\n const defaultAndroidSelector = '//android.widget.ScrollView'\n \n describe('swipe test', () => {\n\ndiff --git a/packages/webdriverio/tests/commands/mobile/tap.test.ts b/packages/webdriverio/tests/commands/mobile/tap.test.ts\nindex ae3158f4a51..230ff7fb190 100644\n--- a/packages/webdriverio/tests/commands/mobile/tap.test.ts\n+++ b/packages/webdriverio/tests/commands/mobile/tap.test.ts\n@@ -348,7 +348,6 @@ describe('generic error test', () => {\n         })\n         const elem = await browser.$('#foo')\n \n-        // @ts-expect-error invalid param\n         await expect(elem.tap({ x: 50, y: 100, direction: 'down' })).rejects.toThrowErrorMatchingSnapshot()\n     })\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14022",
    "pr_id": 14022,
    "issue_id": 14017,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Appium port is already be in use\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\nlatest\r\n\r\n### Node.js Version\r\n\r\nv21.7.1\r\n\r\n### Mode\r\n\r\nStandalone Mode\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\n{\r\n  maxInstances: 1,\r\n    platformName: 'iOS',\r\n    port: 4723,\r\n    'appium:platformName': 'iOS',\r\n    'appium:deviceName': 'iPhone 15 Pro',\r\n    'appium:platformVersion': '17.4',\r\n    'appium:automationName': 'XCUITest',\r\n    'appium:app': 'app/location' ,\r\n    'appium:language': 'en',\r\n    'appium:locale': 'en_US',\r\n    'appium:udid': 'auto',\r\n    acceptInsecureCerts: true,\r\n    timeouts: { implicit: 60000, pageLoad: 60000, script: 60000 },\r\n}\r\n```\r\nSame for Android\r\n\r\n### What happened?\r\n\r\nFirst time when I run test appium server is up and running.\r\nSecond time when I run test I get error: \r\n\r\n2024-12-30T14:26:29.285Z ERROR @wdio/appium-service: [HTTP] Could not start REST http interface listener. The requested port may already be in use. Please make sure there is no other instance of this server running already.\r\n\r\n2024-12-30T14:26:29.286Z ERROR @wdio/cli:utils: A service failed in the 'onPrepare' hook\r\nError: [HTTP] Could not start REST http interface listener. The requested port may already be in use. Please make sure there is no other instance of this server running already.\r\n\r\nBefore I had 9.4.1 version everything was fine \r\n\r\n### What is your expected behavior?\r\n\r\nEach time when I run test port shouldn't be used by appium\r\n\r\n### How to reproduce the bug.\r\n\r\nSimple test to open simple app will be enough, the issue with appium server itself \r\n\r\n### Relevant log output\r\n\r\n```typescript\r\n2024-12-30T14:26:28.216Z INFO @wdio/cli:launcher: Run onPrepare hook\r\n2024-12-30T14:26:28.218Z INFO @wdio/appium-service: Will spawn Appium process: appium --base-path / --log ./logs/wdio-appium_android1.log --debug-log-spacing --session-override --port 4724 --allow-insecure chromedriver_autodownload\r\n2024-12-30T14:26:29.285Z ERROR @wdio/appium-service: [HTTP] Could not start REST http interface listener. The requested port may already be in use. Please make sure there is no other instance of this server running already.\r\n\r\n2024-12-30T14:26:29.286Z ERROR @wdio/cli:utils: A service failed in the 'onPrepare' hook\r\nError: [HTTP] Could not start REST http interface listener. The requested port may already be in use. Please make sure there is no other instance of this server running already.\r\n\r\n    at Socket.onErrorMessage (file:///*/node_modules/@wdio/appium-service/build/index.js:200:20)\r\n    at Object.onceWrapper (node:events:634:26)\r\n    at Socket.emit (node:events:519:28)\r\n    at Socket.emit (node:domain:488:12)\r\n    at addChunk (node:internal/streams/readable:559:12)\r\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\r\n    at Readable.push (node:internal/streams/readable:390:5)\r\n    at Pipe.onStreamRead (node:internal/stream_base_commons:190:23)\r\n\r\nContinue...\r\n2024-12-30T14:26:29.286Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2024-12-30T14:26:29.287Z INFO @wdio/local-runner: Start worker 0-0 with arg: run ./wdio.conf.ts test --android --spec tests/specs/android/test.spec.ts\r\n2024-12-30T14:26:29.291Z ERROR @wdio/appium-service: Appium exited before timeout (exit code: 1)\r\n[HTTP] Could not start REST http interface listener. The requested port may already be in use. Please make sure there is no other instance of this server running already.\r\n\r\n2024-12-30T14:26:36.909Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\r\n2024-12-30T14:26:36.910Z INFO @wdio/local-runner: Shutting down spawned worker\r\n2024-12-30T14:26:37.162Z INFO @wdio/local-runner: Waiting for 0 to shut down gracefully\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 621,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/wdio-appium-service/src/launcher.ts",
      "packages/wdio-appium-service/src/utils.ts",
      "packages/wdio-appium-service/tests/launcher.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-appium-service/tests/launcher.test.ts"
    ],
    "base_commit": "4bc6272315b05d596663928eaf32ab3516aede6f",
    "head_commit": "6b99adad2b67e65a9d1fbb90d6b079110e678526",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14022",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14022",
    "dockerfile": "",
    "pr_merged_at": "2025-01-03T05:15:01.000Z",
    "patch": "diff --git a/packages/wdio-appium-service/src/launcher.ts b/packages/wdio-appium-service/src/launcher.ts\nindex df32f319b4a..300d136966f 100644\n--- a/packages/wdio-appium-service/src/launcher.ts\n+++ b/packages/wdio-appium-service/src/launcher.ts\n@@ -3,9 +3,9 @@ import fs from 'node:fs'\n import fsp from 'node:fs/promises'\n import url from 'node:url'\n import path from 'node:path'\n-import treeKill from 'tree-kill'\n import { spawn, type ChildProcessByStdio } from 'node:child_process'\n import { type Readable } from 'node:stream'\n+import { promisify } from 'node:util'\n \n import logger from '@wdio/logger'\n import getPort from 'get-port'\n@@ -17,6 +17,7 @@ import { isAppiumCapability } from '@wdio/utils'\n \n import { getFilePath, formatCliArgs } from './utils.js'\n import type { AppiumServerArguments, AppiumServiceConfig } from './types.js'\n+import treeKill from 'tree-kill'\n \n const log = logger('@wdio/appium-service')\n const DEFAULT_APPIUM_PORT = 4723\n@@ -182,9 +183,9 @@ export default class AppiumLauncher implements Services.ServiceInstance {\n         log.warn(data.toString())\n     }\n \n-    onComplete() {\n+    private promisifiedTreeKill = promisify<number, string>(treeKill)\n+    async onComplete() {\n         this._isShuttingDown = true\n-\n         /**\n          * Kill appium and all process' spawned from it\n          */\n@@ -194,18 +195,28 @@ export default class AppiumLauncher implements Services.ServiceInstance {\n              */\n             this._process.stdout.off('data', this.#logStdout)\n             this._process.stderr.off('data', this.#logStderr)\n-\n             /**\n              * Ensure all child processes are also killed\n-             */\n+            */\n             log.info('Killing entire Appium tree')\n-            treeKill(this._process.pid, 'SIGTERM', (err) => {\n-                if (err) {\n-                    return log.warn('Failed to kill process:', err)\n-                }\n-\n+            try {\n+                // First attempt with SIGTERM\n+                await this.promisifiedTreeKill(this._process.pid, 'SIGTERM')\n+                    .catch(async (err) => {\n+                        log.warn('SIGTERM failed, attempting SIGKILL:', err)\n+                        // If SIGTERM fails, try SIGKILL\n+                        await this.promisifiedTreeKill(this._process!.pid!, 'SIGKILL')\n+                    })\n                 log.info('Process and its children successfully terminated')\n-            })\n+            } catch (err) {\n+                log.error('Failed to kill Appium process tree:', err)\n+                try {\n+                    this._process.kill('SIGKILL')\n+                    log.info('Killed main process directly')\n+                } catch (e) {\n+                    log.error('Failed to kill process directly:', e)\n+                }\n+            }\n         }\n     }\n     private _startAppium(command: string, args: Array<string>, timeout = APPIUM_START_TIMEOUT) {\n\ndiff --git a/packages/wdio-appium-service/src/utils.ts b/packages/wdio-appium-service/src/utils.ts\nindex 3885efcdbc0..b59eb89fdb8 100644\n--- a/packages/wdio-appium-service/src/utils.ts\n+++ b/packages/wdio-appium-service/src/utils.ts\n@@ -1,6 +1,5 @@\n import { basename, join, resolve } from 'node:path'\n import { kebabCase } from 'change-case'\n-\n import type { ArgValue, KeyValueArgs } from './types.js'\n \n const FILE_EXTENSION_REGEX = /\\.[0-9a-z]+$/i\n",
    "test_patch": "diff --git a/packages/wdio-appium-service/tests/launcher.test.ts b/packages/wdio-appium-service/tests/launcher.test.ts\nindex 8685acf6c6b..b5186604c3b 100644\n--- a/packages/wdio-appium-service/tests/launcher.test.ts\n+++ b/packages/wdio-appium-service/tests/launcher.test.ts\n@@ -54,9 +54,9 @@ vi.mock('tree-kill', () => ({\n     default: vi.fn()\n }))\n \n-class MockProcess {\n-    removeListener() {}\n-    kill() {}\n+class MockProcess implements Partial<ChildProcessByStdio<null, Readable, Readable>> {\n+    removeListener = vi.fn()\n+    kill = vi.fn()\n     stdout = {\n         pipe: vi.fn(),\n         on: vi.fn((event: string, callback: Function) => {\n@@ -64,12 +64,13 @@ class MockProcess {\n             callback('[Appium] Appium REST http interface listener started on 127.0.0.1:4723')\n         }),\n         off: vi.fn(),\n-    }\n+    } as unknown as Readable\n     stderr = {\n-        pipe: vi.fn(), once: vi.fn(),\n+        pipe: vi.fn(),\n+        once: vi.fn(),\n         on: vi.fn(),\n         off: vi.fn()\n-    }\n+    } as unknown as Readable\n }\n \n class MockFailingProcess extends MockProcess {\n@@ -79,16 +80,16 @@ class MockFailingProcess extends MockProcess {\n         this.exitCode = exitCode\n     }\n \n-    once(event: string, callback: Function) {\n+    once = vi.fn((event: string, callback: Function) => {\n         if (event === 'exit') {\n             callback(this.exitCode)\n         }\n-    }\n+    })\n     stdout = {\n         pipe: vi.fn(),\n         on: vi.fn(),\n         off: vi.fn()\n-    }\n+    } as unknown as Readable\n }\n \n // MockProcess2 class. Mocks the entire _process object so we can set specific values on it, such as pid\n@@ -137,7 +138,7 @@ class MockCustomFailingProcess extends MockFailingProcess {\n         once: vi.fn().mockImplementation((event, cb) => cb(new Error('Uups'))),\n         on: vi.fn(),\n         off: vi.fn()\n-    }\n+    } as unknown as Readable\n }\n \n vi.mock('../src/utils', async () => {\n@@ -671,25 +672,93 @@ describe('Appium launcher', () => {\n     })\n \n     describe('onComplete', () => {\n-        test('should call treeKill', async () => {\n+        test('should call treeKill with SIGTERM first', async () => {\n             const launcher = new AppiumLauncher({}, [], {} as any)\n             await launcher.onPrepare()\n \n-            // Mock the _process property using MockProcess2 class\n-            launcher['_process'] = new MockProcess2(1234) as unknown as ChildProcessByStdio<null, Readable, Readable>\n+            vi.mocked(treeKill).mockClear()\n+            const mockProcess = new MockProcess2(1234) as unknown as ChildProcessByStdio<null, Readable, Readable>\n+            launcher['_process'] = mockProcess\n+            vi.mocked(treeKill).mockImplementation((pid, signal, cb) => {\n+                expect(pid).toBe(1234)\n+                expect(signal).toBe('SIGTERM')\n+                if (cb) { cb() } return undefined\n+            })\n+            await launcher.onComplete()\n+            expect(treeKill).toHaveBeenCalledTimes(1)\n+            expect(treeKill).toHaveBeenCalledWith(1234, 'SIGTERM', expect.any(Function))\n+            expect(log.info).toHaveBeenCalledWith('Process and its children successfully terminated')\n+        })\n \n-            // Call onComplete\n-            launcher.onComplete()\n+        test('should try SIGKILL if SIGTERM fails', async () => {\n+            const launcher = new AppiumLauncher({}, [], {} as any)\n+            await launcher.onPrepare()\n+            const mockProcess = new MockProcess2(1234) as unknown as ChildProcessByStdio<null, Readable, Readable>\n+            launcher['_process'] = mockProcess\n+            vi.mocked(treeKill)\n+                .mockImplementationOnce((pid, signal, cb) => {\n+                    if (cb) { cb(new Error('SIGTERM failed')) }\n+                    return undefined\n+                })\n+                .mockImplementationOnce((pid, signal, cb) => {\n+                    if (cb) { cb() }\n+                    return undefined\n+                })\n+            await launcher.onComplete()\n+            expect(treeKill).toHaveBeenCalledWith(1234, 'SIGTERM', expect.any(Function))\n+            expect(treeKill).toHaveBeenCalledWith(1234, 'SIGKILL', expect.any(Function))\n+            expect(log.warn).toHaveBeenCalledWith('SIGTERM failed, attempting SIGKILL:', expect.any(Error))\n+            expect(log.info).toHaveBeenCalledWith('Process and its children successfully terminated')\n+        })\n \n-            // Verify treeKill is called with correct parameters\n+        test('should try direct process kill if both SIGTERM and SIGKILL fail', async () => {\n+            const launcher = new AppiumLauncher({}, [], {} as any)\n+            await launcher.onPrepare()\n+            const mockProcess = new MockProcess2(1234) as unknown as ChildProcessByStdio<null, Readable, Readable>\n+            launcher['_process'] = mockProcess\n+            vi.mocked(treeKill)\n+                .mockImplementationOnce((pid, signal, cb) => {\n+                    if (cb) { cb(new Error('SIGTERM failed')) }\n+                    return undefined\n+                })\n+                .mockImplementationOnce((pid, signal, cb) => {\n+                    if (cb) { cb(new Error('SIGKILL failed')) }\n+                    return undefined\n+                })\n+            await launcher.onComplete()\n             expect(treeKill).toHaveBeenCalledWith(1234, 'SIGTERM', expect.any(Function))\n+            expect(treeKill).toHaveBeenCalledWith(1234, 'SIGKILL', expect.any(Function))\n+            expect(log.error).toHaveBeenCalledWith('Failed to kill Appium process tree:', expect.any(Error))\n+            expect(mockProcess.kill).toHaveBeenCalledWith('SIGKILL')\n+            expect(log.info).toHaveBeenCalledWith('Killed main process directly')\n         })\n \n-        test('should not call process.kill', () => {\n+        test('should handle direct kill failure', async () => {\n+            const launcher = new AppiumLauncher({}, [], {} as any)\n+            await launcher.onPrepare()\n+            const mockProcess = new MockProcess2(1234) as unknown as ChildProcessByStdio<null, Readable, Readable>\n+            vi.spyOn(mockProcess, 'kill').mockImplementation(() => {\n+                throw new Error('Kill failed')\n+            })\n+            launcher['_process'] = mockProcess\n+            vi.mocked(treeKill)\n+                .mockImplementationOnce((pid, signal, cb) => {\n+                    if (cb) { cb(new Error('SIGTERM failed')) }\n+                    return undefined\n+                })\n+                .mockImplementationOnce((pid, signal, cb) => {\n+                    if (cb) { cb(new Error('SIGKILL failed')) }\n+                    return undefined\n+                })\n+            await launcher.onComplete()\n+            expect(log.error).toHaveBeenCalledWith('Failed to kill process directly:', expect.any(Error))\n+        })\n+\n+        test('should do nothing when process is undefined', async () => {\n             const launcher = new AppiumLauncher({}, [], {} as any)\n             expect(launcher['_process']).toBe(undefined)\n-            launcher.onComplete()\n-            expect(launcher['_process']).toBe(undefined)\n+            await launcher.onComplete()\n+            expect(launcher['_isShuttingDown']).toBe(true)\n         })\n     })\n \n@@ -706,8 +775,11 @@ describe('Appium launcher', () => {\n             await launcher.onPrepare()\n \n             expect(vi.mocked(fs.createWriteStream).mock.calls[0][0]).toBe('/some/file/path')\n-            expect(launcher['_process']!.stdout.pipe).toBeCalled()\n-            expect(launcher['_process']!.stderr.pipe).toBeCalled()\n+            // Since we're awaiting onPrepare, _process should be defined at this point\n+            const process = launcher['_process']\n+            expect(process).toBeDefined()\n+            expect(process?.stdout.pipe).toBeCalled()\n+            expect(process?.stderr.pipe).toBeCalled()\n         })\n \n         test('throws if process is not set', async () => {\n@@ -723,11 +795,11 @@ describe('Appium launcher', () => {\n             const launcher = new AppiumLauncher({}, [{ 'appium:deviceName': 'baz' }], {} as any)\n             const mockProcess = new MockProcess()\n             launcher['_startAppium'] = vi.fn().mockResolvedValue(mockProcess)\n-            expect(mockProcess.stdout.on).not.toHaveBeenCalledOnce()\n-            expect(mockProcess.stderr.on).not.toHaveBeenCalledOnce()\n+            expect(mockProcess.stdout.on).not.toBeCalled()\n+            expect(mockProcess.stderr.on).not.toBeCalled()\n             await launcher.onPrepare()\n-            expect(mockProcess.stdout.on).toHaveBeenCalledOnce()\n-            expect(mockProcess.stderr.on).toHaveBeenCalledOnce()\n+            expect(mockProcess.stdout.on).toBeCalled()\n+            expect(mockProcess.stderr.on).toBeCalled()\n         })\n     })\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14020",
    "pr_id": 14020,
    "issue_id": 13153,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: BidiCore does not send headers declared in wdio.conf.js on the upgrade GET request.\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n8.38.2\n\n### Node.js Version\n\nv18.14.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\r\n  browserName: 'chrome',\r\n  webSocketUrl: true,\r\n  acceptInsecureCerts: true,\r\n  'cal:nodeOptions': { debug: true },\r\n  'goog:chromeOptions': {\r\n    extensions: [chromeExtension],\r\n    args: ['--no-sandbox', '--disable-infobars']\r\n  },\r\n}\n```\n\n\n### What happened?\n\nWe use CloudFlare to protect internal domains, including the domain for a selenium grid.\r\n\r\nWe have a header declared in wdio.conf.js to provide `cf-access-token` on all requests made by the driver to the grid.  This has usually worked just fine - it's supported for standard requests, as well as cdp websockets. \r\n\r\nex: our WDIO config starts with:\r\n```\r\nexports.config = {\r\n  //\r\n  // ====================\r\n  // Runner Configuration\r\n  // ====================\r\n  runner: 'local',\r\n  hostname: 'cf.protected.domain',\r\n  port: 443,\r\n  path: '/wd/hub',\r\n  protocol: 'https',\r\n  headers: {\r\n    'cf-access-token': token,\r\n  }\r\n  ...\r\n```\r\n\r\nI have been experimenting with the new Bidi protocol support, and when I run an unprotected selenium grid locally, things work just fine (I am able to connect successfully, calls work as expected).\r\n\r\nHowever when I point at the protected grid, I started encountering 302 errors because the initial upgrade request does not contain the header declared in the conf file, see request captured with BurpSuite:\r\n\r\n```\r\nGET /session/eaf58f4c46c0085af16d64833dffd782/se/bidi HTTP/2\r\nHost: cf.protected.domain\r\nSec-Websocket-Version: 13\r\nSec-Websocket-Key: VXb45CB2mKTB0Q9Itu73Yw==\r\nConnection: Upgrade\r\nUpgrade: websocket\r\n```\r\n\r\n\r\nI can manually patch BidiCore and pass the header into the WebSocket constructor here: https://github.com/webdriverio/webdriverio/blob/43868ec82075db90009f00bb737f6df0f1744ca6/packages/webdriver/src/bidi/core.ts#L18 and things work.\r\n\r\n```\r\nGET /session/c052b894e06f0d2e24215cba6b1ba7a2/se/bidi HTTP/2\r\nHost: cf.protected.domain\r\nCf-Access-Token: ABCD...\r\nSec-Websocket-Version: 13\r\nSec-Websocket-Key: OJeok1BuGE69MPkIYsEipQ==\r\nConnection: Upgrade\r\nUpgrade: websocket\r\n```\r\n\r\nI am not entirely sure if this will cause issues with the folks who are using the `runner: 'browser'` configuration (I don't believe WebSocket accepts a header param in that instance) and I believe Bidi was intended to also support that case?\r\n\r\nBut as it stands - this was unexpected behavior when I have declared a \"header\" setting in the config.\r\n\n\n### What is your expected behavior?\n\nHeaders declared in wdio.conf.js are included in the GET request for Bidi socket upgrades.\n\n### How to reproduce the bug.\n\nCreate a wdio.conf.js file that declares a header option:\r\n\r\n```\r\nexports.config = {\r\n  //\r\n  // ====================\r\n  // Runner Configuration\r\n  // ====================\r\n  runner: 'local',\r\n  hostname: 'cf.protected.domain',\r\n  port: 443,\r\n  path: '/wd/hub',\r\n  protocol: 'https',\r\n  headers: {\r\n    'cf-access-token': token,\r\n  }\r\n  ...\r\n```\r\n\r\nMake a request to a Bidi method \r\n```\r\n    const sessStatus = await browser.sessionStatus({});\r\n    console.log(sessStatus);\r\n```\r\n\r\nObserve that the socket upgrade request does not include the header. \n\n### Relevant log output\n\n```typescript\n[0-0] ----Debug session for chrome----\r\n[0-0] \r\n[0-0] https://cf.protected.domain\r\n[0-0] \r\n[0-0] \r\n[0-0] 2024-07-12T16:36:25.056Z DEBUG @wdio/runner: init remote session\r\n[0-0] 2024-07-12T16:36:25.150Z DEBUG @wdio/runner: init remote session\r\n[0-0] 2024-07-12T16:36:25.151Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n[0-0] 2024-07-12T16:36:25.151Z INFO @wdio/utils: Connecting to existing driver at https://cf.protected.domain:443/wd/hub\r\n[0-0] 2024-07-12T16:36:25.294Z INFO webdriver: [POST] https://cf.protected.domain/wd/hub/session\r\n[0-0] 2024-07-12T16:36:25.294Z INFO webdriver: DATA {\r\n[0-0]   capabilities: {\r\n[0-0]     alwaysMatch: {\r\n[0-0]       browserName: 'chrome',\r\n[0-0]       webSocketUrl: true,\r\n[0-0]       acceptInsecureCerts: true,\r\n[0-0]       'cal:nodeOptions': [Object],\r\n[0-0]       'goog:chromeOptions': [Object]\r\n[0-0]     },\r\n[0-0]     firstMatch: [ {} ]\r\n[0-0]   },\r\n[0-0]   desiredCapabilities: {\r\n[0-0]     browserName: 'chrome',\r\n[0-0]     webSocketUrl: true,\r\n[0-0]     acceptInsecureCerts: true,\r\n[0-0]     'cal:nodeOptions': { debug: true },\r\n[0-0]     'goog:chromeOptions': { extensions: [Array], args: [Array] }\r\n[0-0]   }\r\n[0-0] }\r\n[0-0] RUNNING in chrome - file:///apps/wdio-e2e/src/specs/login.spec.ts\r\n[0-0] 2024-07-12T16:36:30.119Z INFO webdriver: Register BiDi handler for session with id 6bc8d1a963f2eb8f225395327ff8cd68\r\n[0-0] 2024-07-12T16:36:30.119Z INFO webdriver: Connect to webSocketUrl wss://cf.protected.domain/session/6bc8d1a963f2eb8f225395327ff8cd68/se/bidi\r\n[0-0] /Users/n.tinkler/projects/calendly/client-core/node_modules/ws/lib/websocket.js:912\r\n[0-0]       abortHandshake(\r\n[0-0]       ^\r\n[0-0] Error: Unexpected server response: 302\r\n[0-0]     at ClientRequest.<anonymous> (/Users/n.tinkler/projects/calendly/client-core/node_modules/ws/lib/websocket.js:912:7)\r\n[0-0]     at ClientRequest.emit (node:events:513:28)\r\n[0-0]     at ClientRequest.emit (node:domain:489:12)\r\n[0-0]     at HTTPParser.parserOnIncomingClient (node:_http_client:701:27)\r\n[0-0]     at HTTPParser.parserOnHeadersComplete (node:_http_common:119:17)\r\n[0-0]     at TLSSocket.socketOnData (node:_http_client:542:22)\r\n[0-0]     at TLSSocket.emit (node:events:513:28)\r\n[0-0]     at TLSSocket.emit (node:domain:489:12)\r\n[0-0]     at addChunk (node:internal/streams/readable:324:12)\r\n[0-0]     at readableAddChunk (node:internal/streams/readable:297:9)\r\n2024-07-12T16:36:30.244Z DEBUG @wdio/local-runner: Runner 0-0 finished with exit code 1\r\n[0-0] FAILED in chrome - file:///apps/wdio-e2e/src/specs/login.spec.ts\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 891,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/webdriver/src/index.ts",
      "packages/webdriver/src/utils.ts",
      "packages/webdriver/tests/bidi.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriver/tests/bidi.test.ts"
    ],
    "base_commit": "b60ab80750058c43b9a6119e06ee97a40381ce83",
    "head_commit": "5adb73c29d53d3a1ed3f676423e999675ae0328f",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14020",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14020",
    "dockerfile": "",
    "pr_merged_at": "2025-01-02T15:54:34.000Z",
    "patch": "diff --git a/packages/webdriver/src/index.ts b/packages/webdriver/src/index.ts\nindex 4a084998db6..781de0cc909 100644\n--- a/packages/webdriver/src/index.ts\n+++ b/packages/webdriver/src/index.ts\n@@ -129,7 +129,11 @@ export default class WebDriver {\n         if (isBidi(options.capabilities || {})) {\n             const webSocketUrl = options.capabilities?.webSocketUrl as unknown as string\n             log.info(`Register BiDi handler for session with id ${options.sessionId}`)\n-            Object.assign(bidiPrototype, initiateBidi(webSocketUrl as unknown as string, options.strictSSL))\n+            Object.assign(bidiPrototype, initiateBidi(\n+                webSocketUrl as string,\n+                options.strictSSL,\n+                options.headers\n+            ))\n         }\n \n         const prototype = { ...protocolCommands, ...environmentPrototype, ...userPrototype, ...bidiPrototype }\n\ndiff --git a/packages/webdriver/src/utils.ts b/packages/webdriver/src/utils.ts\nindex f0d991d6fd5..eb828084eaf 100644\n--- a/packages/webdriver/src/utils.ts\n+++ b/packages/webdriver/src/utils.ts\n@@ -326,8 +326,9 @@ export function setupDirectConnect(client: Client) {\n }\n \n /**\n- * get human readable message from response error\n+ * get human-readable message from response error\n  * @param {Error} err response error\n+ * @param params\n  */\n export const getSessionError = (err: JSONWPCommandError, params: Partial<Options.WebDriver> = {}) => {\n     // browser driver / service is not started\n@@ -385,9 +386,15 @@ export const getSessionError = (err: JSONWPCommandError, params: Partial<Options\n /**\n  * Enhance the monad with WebDriver Bidi primitives if a connection can be established successfully\n  * @param socketUrl url to bidi interface\n+ * @param strictSSL\n+ * @param userHeaders\n  * @returns prototype with interface for bidi primitives\n  */\n-export function initiateBidi (socketUrl: string, strictSSL: boolean = true): PropertyDescriptorMap {\n+export function initiateBidi (\n+    socketUrl: string,\n+    strictSSL: boolean = true,\n+    userHeaders?: Record<string, string>\n+): PropertyDescriptorMap {\n     /**\n      * don't connect and stale unit tests when the websocket url is set to a dummy value\n      */\n@@ -406,7 +413,10 @@ export function initiateBidi (socketUrl: string, strictSSL: boolean = true): Pro\n     }\n \n     socketUrl = socketUrl.replace('localhost', '127.0.0.1')\n-    const bidiReqOpts = strictSSL ? {} : { rejectUnauthorized: false }\n+    const bidiReqOpts: { rejectUnauthorized?: boolean, headers?: Record<string, string> } = strictSSL ? {} : { rejectUnauthorized: false }\n+    if (userHeaders) {\n+        bidiReqOpts.headers = userHeaders\n+    }\n     const handler = new BidiHandler(socketUrl, bidiReqOpts)\n     handler.connect().then((isConnected) => isConnected && log.info(`Connected to WebDriver Bidi interface at ${socketUrl}`))\n \n",
    "test_patch": "diff --git a/packages/webdriver/tests/bidi.test.ts b/packages/webdriver/tests/bidi.test.ts\nindex 39169800e5b..7b13bde234f 100644\n--- a/packages/webdriver/tests/bidi.test.ts\n+++ b/packages/webdriver/tests/bidi.test.ts\n@@ -1,14 +1,27 @@\n import path from 'node:path'\n import { describe, it, vi, expect, beforeAll, afterAll } from 'vitest'\n+import { WebSocket as ws } from 'ws'\n \n import '../src/node.js'\n import { BidiCore } from '../src/bidi/core.js'\n \n vi.mock('ws')\n vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdio/logger')))\n+vi.mock('ws', () => {\n+    const WS = vi.fn().mockImplementation((url: string) => ({\n+        wsUrl: url,\n+        on: vi.fn(),\n+        send: vi.fn()\n+    }))\n+    return {\n+        __esModule: true,\n+        default: WS,\n+        WebSocket: WS\n+    }\n+})\n \n describe('BidiCore', () => {\n-    it('iniates with a WebSocket', () => {\n+    it('initiates with a WebSocket', () => {\n         const handler = new BidiCore('ws://foo/bar')\n         // @ts-expect-error \"wsUrl\" is a mock property\n         expect(handler.socket.wsUrl).toBe('ws://foo/bar')\n@@ -79,11 +92,19 @@ describe('BidiCore', () => {\n \n             const error = await promise.catch((err) => err)\n             const errorMessage = 'WebDriver Bidi command \"session.new\" failed with error: foobar - I am an error!'\n-            expect(error.stack).toContain(path.join('packages', 'webdriver', 'tests', 'bidi.test.ts:70:'))\n+            expect(error.stack).toContain(path.join('packages', 'webdriver', 'tests', 'bidi.test.ts:83:'))\n             expect(error.stack).toContain(errorMessage)\n             expect(error.message).toBe(errorMessage)\n         })\n \n+        it('should pass custom headers to Bidi Core', async () => {\n+            const handler = new BidiCore('ws://foo/bar', { headers: { 'cf-access-token': 'MY_TOKEN', 'X-Custom': 'xyz' } })\n+            expect(vi.mocked(ws)).toHaveBeenCalledWith(\n+                'ws://foo/bar',\n+                expect.objectContaining({ headers: { 'cf-access-token': 'MY_TOKEN', 'X-Custom': 'xyz' } })\n+            )\n+        })\n+\n         afterAll(() => {\n             process.env.WDIO_UNIT_TESTS = '1'\n         })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14018",
    "pr_id": 14018,
    "issue_id": 13972,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Bidi - deserialization issue with array reference\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\n9.4.1\r\n\r\n### Node.js Version\r\n\r\n18\r\n\r\n### Mode\r\n\r\nWDIO Testrunner\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\n{\r\n   browserName: 'chrome'\r\n   browserVersion: 'latest'\r\n}\r\n```\r\n\r\n\r\n### What happened?\r\n\r\nwith webdriverBidi, when using `browser.execute`, I have an issue when the browser returns a duplicated array:\r\nfor e.g., with :\r\n```\r\nawait browser.execute(() => {\r\n            const toto = [];\r\n            const result= [\r\n                {\r\n                    \"id\": \"__button1\",\r\n                    \"properties\": toto\r\n                },\r\n                {\r\n                    \"id\": \"__button2\",\r\n                    \"properties\": toto\r\n                }\r\n            ]\r\n            return result;\r\n        })\r\n```\r\nI get:\r\n```\r\n[0-0] TypeError in \"test webdriverio bidi.test with array reference\"\r\nTypeError: Cannot read properties of undefined (reading 'map')\r\n    at Array.map (<anonymous>)\r\n    at Array.map (<anonymous>)\r\n```\r\n\r\nThis is because `browser.execute` returns the two arrays which have the same `internalId`; the first one has the value, the second one doesn't:\r\n\r\n<img width=\"976\" alt=\"image\" src=\"https://github.com/user-attachments/assets/53396657-20f3-4f74-99b8-326b46ca99dd\" />\r\n\r\nSo, in the [deserializeValue() function](https://github.com/webdriverio/webdriverio/blob/e42d3e8d6958fd9a734fe1d9a9768357b6045893/packages/webdriverio/src/utils/bidi/index.ts#L27), we try to perform a `.map` on an `undefined` value.\r\n\r\nIn [W3C InternalId](https://www.w3.org/TR/webdriver-bidi/#type-script-InternalId), it says that:\r\n```\r\nIn case of duplicated objects in the same script.RemoteValue, the value is provided only for one of the remote values, while the unique-per-ECMAScript-object internalId is provided for all the duplicated objects for a given serialization.\r\n```\r\n\r\n### What is your expected behavior?\r\n\r\nNo error\r\n\r\n### How to reproduce the bug.\r\n\r\nrun:\r\n```\r\nconst result = await browser.execute(() => {\r\n            const toto = [];\r\n            const result= [\r\n                {\r\n                    \"id\": \"__button1\",\r\n                    \"properties\": toto\r\n                },\r\n                {\r\n                    \"id\": \"__button2\",\r\n                    \"properties\": toto\r\n                }\r\n            ]\r\n            return result;\r\n        })\r\n```\r\nhere a repo: https://github.com/NIBOSAP/webdriverio-bidi/tree/main\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\nExecution of 1 workers started at 2024-12-12T18:34:04.452Z\r\n\r\n2024-12-12T18:34:04.457Z INFO @wdio/cli:launcher: Run onPrepare hook\r\n2024-12-12T18:34:04.457Z INFO @wdio/utils: Setting up browser driver for: chrome@stable\r\n2024-12-12T18:34:04.458Z INFO @wdio/utils: Setting up browser binaries for: chrome@stable\r\n2024-12-12T18:34:04.572Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2024-12-12T18:34:04.572Z INFO @wdio/local-runner: Start worker 0-0 with arg: ./wdio.default.conf.js\r\n[0-0] 2024-12-12T18:34:04.911Z INFO @wdio/local-runner: Run worker command: run\r\n[0-0] RUNNING in chrome - file:///test.spec.js\r\n[0-0] 2024-12-12T18:34:05.072Z INFO chromedriver: Starting ChromeDriver 131.0.6778.140 \r\n[0-0] 2024-12-12T18:34:05.072Z INFO chromedriver: Remote connections are allowed by an allowlist (0.0.0.0).\r\n[0-0] 2024-12-12T18:34:05.072Z INFO chromedriver: Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.\r\n[0-0] 2024-12-12T18:34:05.073Z INFO chromedriver: ChromeDriver was started successfully on port 52995.\r\n[0-0] 2024-12-12T18:34:06.074Z INFO @wdio/utils: Started Chromedriver v131.0.6778.140 with params --port=52995 --allowed-origins=* --allowed-ips=0.0.0.0 in 1049ms on port 52995\r\n[0-0] 2024-12-12T18:34:06.881Z INFO webdriverio:PolyfillManager: polyfill script added\r\n[0-0] TypeError in \"test webdriverio bidi.test with array reference\"\r\nTypeError: Cannot read properties of undefined (reading 'map')\r\n    at Array.map (<anonymous>)\r\n    at Array.map (<anonymous>)\r\n[0-0] FAILED in chrome - file:///test.spec.js\r\n2024-12-12T18:34:08.578Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\r\n2024-12-12T18:34:08.578Z INFO @wdio/cli:launcher: Run onComplete hook\r\n\r\n \"spec\" Reporter:\r\n------------------------------------------------------------------\r\n[chrome 131.0.6778.140 mac #0-0] Running: chrome (v131.0.6778.140)\r\n[chrome 131.0.6778.140 mac #0-0] Session ID: f5386dfb1f57276ca015ce4df0434a87\r\n[chrome 131.0.6778.140 mac #0-0]\r\n[chrome 131.0.6778.140 mac #0-0] » /test.spec.js\r\n[chrome 131.0.6778.140 mac #0-0] test webdriverio bidi\r\n[chrome 131.0.6778.140 mac #0-0]    ✖ test with array reference\r\n[chrome 131.0.6778.140 mac #0-0]\r\n[chrome 131.0.6778.140 mac #0-0] 1 failing (1.5s)\r\n[chrome 131.0.6778.140 mac #0-0]\r\n[chrome 131.0.6778.140 mac #0-0] 1) test webdriverio bidi test with array reference\r\n[chrome 131.0.6778.140 mac #0-0] Cannot read properties of undefined (reading 'map')\r\n[chrome 131.0.6778.140 mac #0-0] TypeError: Cannot read properties of undefined (reading 'map')\r\n[chrome 131.0.6778.140 mac #0-0]     at Array.map (<anonymous>)\r\n[chrome 131.0.6778.140 mac #0-0]     at Array.map (<anonymous>)\r\n\r\n\r\nSpec Files:      0 passed, 1 failed, 1 total (100% completed) in 00:00:04\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 814,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/browser/addInitScript.ts",
      "packages/webdriverio/src/utils/bidi/index.ts",
      "packages/webdriverio/tests/utils/bidi/value.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/utils/bidi/value.test.ts"
    ],
    "base_commit": "ba09aebe8ee0c039482afe0d0f0cd097e1c089d0",
    "head_commit": "cca4e7e88635ac9b4fa6aa4ec4ff32558cc35a33",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14018",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14018",
    "dockerfile": "",
    "pr_merged_at": "2024-12-30T18:39:12.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/addInitScript.ts b/packages/webdriverio/src/commands/browser/addInitScript.ts\nindex 43a5098c0b2..f2c99a224ac 100644\n--- a/packages/webdriverio/src/commands/browser/addInitScript.ts\n+++ b/packages/webdriverio/src/commands/browser/addInitScript.ts\n@@ -1,7 +1,7 @@\n import { EventEmitter } from 'node:events'\n import type { local, remote } from 'webdriver'\n \n-import { deserializeValue } from '../../utils/bidi/index.js'\n+import { deserialize } from '../../utils/bidi/index.js'\n \n export interface InitScript<Payload = undefined> {\n     remove: () => Promise<void>\n@@ -163,7 +163,7 @@ export async function addInitScript<Payload, Arg1, Arg2, Arg3, Arg4, Arg5> (\n     const emitter = new EventEmitter()\n     const messageHandler = (msg: local.ScriptMessageParameters) => {\n         if (msg.channel === channel) {\n-            emitter.emit('data', deserializeValue(msg.data as remote.ScriptLocalValue))\n+            emitter.emit('data', deserialize(msg.data as remote.ScriptLocalValue))\n         }\n     }\n     this.on('script.message', messageHandler)\n\ndiff --git a/packages/webdriverio/src/utils/bidi/index.ts b/packages/webdriverio/src/utils/bidi/index.ts\nindex ad1c9d4b3f5..0bed8da05c6 100644\n--- a/packages/webdriverio/src/utils/bidi/index.ts\n+++ b/packages/webdriverio/src/utils/bidi/index.ts\n@@ -7,8 +7,7 @@ export function parseScriptResult(params: remote.ScriptCallFunctionParameters, r\n     const type = result.type\n \n     if (type === EvaluateResultType.Success) {\n-        // @ts-expect-error\n-        return deserializeValue(result.result)\n+        return deserialize(result.result as remote.ScriptLocalValue)\n     }\n     if (type === EvaluateResultType.Exception) {\n         throw new WebdriverBidiExeception(params, result)\n@@ -17,7 +16,136 @@ export function parseScriptResult(params: remote.ScriptCallFunctionParameters, r\n     throw new Error(`Unknown evaluate result type: ${type}`)\n }\n \n-export function deserializeValue(result: remote.ScriptLocalValue) {\n+/**\n+ * Deserialize WebDriver Bidi result and clear up cache for internal objects\n+ * referenced in the result. This is necessary because WebDriver Bidi only\n+ * provides the actual value of a referenced object once and provides an internalId\n+ * to reference the object in subsequent calls. For example, given the following script:\n+ *\n+ * ```ts\n+ * await browser.execute(() => {\n+ *     const foobar = [1, 2, 3]\n+ *     const result= [\n+ *         {\n+ *             'id': 'foo',\n+ *             'properties': foobar\n+ *         },\n+ *         {\n+ *             'id': 'bar',\n+ *             'properties': foobar\n+ *         }\n+ *     ]\n+ *     return result\n+ * })\n+ * ```\n+ *\n+ * This will return the following result:\n+ *\n+ * ```json\n+ * {\n+ *   \"id\": 8,\n+ *   \"result\": {\n+ *     \"realm\": \"9122925300023882510.7575046498635851678\",\n+ *     \"result\": {\n+ *       \"type\": \"array\",\n+ *       \"value\": [\n+ *         {\n+ *           \"type\": \"object\",\n+ *           \"value\": [\n+ *             [\n+ *               \"id\",\n+ *               {\n+ *                 \"type\": \"string\",\n+ *                 \"value\": \"__button1\"\n+ *               }\n+ *             ],\n+ *             [\n+ *               \"properties\",\n+ *               {\n+ *                 \"internalId\": \"8f3ed8d7-b8f7-4f8c-a958-49a94e85d18c\",\n+ *                 \"type\": \"array\",\n+ *                 \"value\": [\n+ *                   {\n+ *                     \"type\": \"number\",\n+ *                     \"value\": 1\n+ *                   },\n+ *                   {\n+ *                     \"type\": \"number\",\n+ *                     \"value\": 2\n+ *                   },\n+ *                   {\n+ *                     \"type\": \"number\",\n+ *                     \"value\": 3\n+ *                   }\n+ *                 ]\n+ *               }\n+ *             ]\n+ *           ]\n+ *         },\n+ *         {\n+ *           \"type\": \"object\",\n+ *           \"value\": [\n+ *             [\n+ *               \"id\",\n+ *               {\n+ *                 \"type\": \"string\",\n+ *                 \"value\": \"__button2\"\n+ *               }\n+ *             ],\n+ *             [\n+ *               \"properties\",\n+ *               {\n+ *                 \"internalId\": \"8f3ed8d7-b8f7-4f8c-a958-49a94e85d18c\",\n+ *                 \"type\": \"array\"\n+ *               }\n+ *             ]\n+ *           ]\n+ *         }\n+ *       ]\n+ *     },\n+ *     \"type\": \"success\"\n+ *   },\n+ *   \"type\": \"success\"\n+ * }\n+ * ```\n+ *\n+ * This requires us to store the value behind the internalId in a cache and replace\n+ * the internalId with the actual value. However to avoid memory leaks, we need to\n+ * clear the cache after the result has been deserialized.\n+ *\n+ * @param result WebDriver Bidi result to deserialize\n+ * @returns      deserialized value\n+ */\n+const references = new Map<string, unknown>()\n+export function deserialize(result: remote.ScriptLocalValue) {\n+    const deserializedValue = deserializeValue(result)\n+\n+    /**\n+     * clear cache after deserialization\n+     */\n+    references.clear()\n+\n+    return deserializedValue\n+}\n+\n+function deserializeValue(result: remote.ScriptLocalValue) {\n+    /**\n+     * handle `internalId` references\n+     */\n+    if (result && 'internalId' in result && typeof result.internalId === 'string') {\n+        if ('value' in result) {\n+            /**\n+             * cache the reference if a value is provided\n+             */\n+            references.set(result.internalId, result.value)\n+        } else {\n+            /**\n+             * otherwise set the value from the cache\n+             */\n+            result.value = references.get(result.internalId)\n+        }\n+    }\n+\n     // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     const { type, value } = result as any\n     if (type === NonPrimitiveType.RegularExpression) {\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/utils/bidi/value.test.ts b/packages/webdriverio/tests/utils/bidi/value.test.ts\nindex 98e05a86314..23071132e8e 100644\n--- a/packages/webdriverio/tests/utils/bidi/value.test.ts\n+++ b/packages/webdriverio/tests/utils/bidi/value.test.ts\n@@ -2,7 +2,7 @@ import { describe, it, expect } from 'vitest'\n import { ELEMENT_KEY } from 'webdriver'\n import stringify from 'safe-stable-stringify'\n \n-import { deserializeValue } from '../../../src/utils/bidi/index.js'\n+import { deserialize } from '../../../src/utils/bidi/index.js'\n import { LocalValue } from '../../../src/utils/bidi/value.js'\n \n describe('LocalValue', () => {\n@@ -18,7 +18,7 @@ describe('LocalValue', () => {\n         new Map([[1, 2]]),\n         new Set([1, new Map([['string', true]]), 3, new Map([[1, 2]])]),\n         /foobar/,\n-        { 'foo': 'bar', nested: new Map([['this', 'works']]) },\n+        { foo: 'bar', nested: new Map([['this', 'works']]) },\n         { [ELEMENT_KEY]: 'foobar' }\n     ])\n \n@@ -157,7 +157,7 @@ describe('LocalValue', () => {\n     })\n \n     it('should be able to deserialize it', () => {\n-        expect(deserializeValue(value.asMap() as any)).toMatchInlineSnapshot(`\n+        expect(deserialize(value.asMap() as any)).toMatchInlineSnapshot(`\n           [\n             undefined,\n             \"string\",\n@@ -190,7 +190,7 @@ describe('LocalValue', () => {\n             undefined,\n           ]\n         `)\n-        expect(deserializeValue({\n+        expect(deserialize({\n             sharedId: 'f.44C98D3D1D8C6C82E24E94E038744493.d.123615DE0B294C5077D7F1903A856E6A.e.9',\n             type: 'node',\n             value: {\n@@ -205,4 +205,83 @@ describe('LocalValue', () => {\n             [ELEMENT_KEY]: 'f.44C98D3D1D8C6C82E24E94E038744493.d.123615DE0B294C5077D7F1903A856E6A.e.9'\n         })\n     })\n+\n+    it('should resolve references', () => {\n+        expect(deserialize({\n+            type: 'array',\n+            value: [\n+                {\n+                    type: 'object',\n+                    value: [\n+                        [\n+                            'id',\n+                            {\n+                                type: 'string',\n+                                value: '__button1'\n+                            }\n+                        ] as any,\n+                        [\n+                            'properties',\n+                            {\n+                                internalId: '8f3ed8d7-b8f7-4f8c-a958-49a94e85d18c',\n+                                type: 'array',\n+                                value: [\n+                                    {\n+                                        type: 'number',\n+                                        value: 1\n+                                    },\n+                                    {\n+                                        type: 'number',\n+                                        value: 2\n+                                    },\n+                                    {\n+                                        type: 'number',\n+                                        value: 3\n+                                    }\n+                                ]\n+                            }\n+                        ]\n+                    ]\n+                },\n+                {\n+                    type: 'object',\n+                    value: [\n+                        [\n+                            'id',\n+                            {\n+                                type: 'string',\n+                                value: '__button2'\n+                            }\n+                        ],\n+                        [\n+                            'properties',\n+                            {\n+                                internalId: '8f3ed8d7-b8f7-4f8c-a958-49a94e85d18c',\n+                                type: 'array'\n+                            }\n+                        ]\n+                    ]\n+                }\n+            ]\n+        })).toMatchInlineSnapshot(`\n+          [\n+            {\n+              \"id\": \"__button1\",\n+              \"properties\": [\n+                1,\n+                2,\n+                3,\n+              ],\n+            },\n+            {\n+              \"id\": \"__button2\",\n+              \"properties\": [\n+                1,\n+                2,\n+                3,\n+              ],\n+            },\n+          ]\n+        `)\n+    })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-14000",
    "pr_id": 14000,
    "issue_id": 13999,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: @wdio/appium-service skip Appium Launch since it can't load capabilities\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\nv22.12.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n`capabilities: [\r\n    {\r\n      // capabilities for local Appium web tests on an Android Emulator\r\n      platformName: \"Android\",\r\n    //   browserName: \"Chrome\",\r\n      \"appium:automationName\": \"UiAutomator2\",\r\n      \"appium:options\": {\r\n        udid: \"emulator-5554\",\r\n      },\r\n      port: 4724,\r\n    },\r\n  ],`\r\nAbove code is the worked one but if we move automationName inside \"appium:options\" the error will occur for E.g.\r\n`capabilities: [\r\n    {\r\n      // capabilities for local Appium web tests on an Android Emulator\r\n      platformName: \"Android\",\r\n      //   browserName: \"Chrome\",\r\n      //   \"appium:automationName\": \"UiAutomator2\",\r\n      \"appium:options\": {\r\n        udid: \"emulator-5554\",\r\n        automationName: \"UiAutomator2\",\r\n      },\r\n      port: 4724,\r\n    },\r\n  ],`\n```\n\n\n### What happened?\n\nWhile running test the @wdio/appium-service will skip launching appium server if we have the capabilities with automationName inside \"appium:options\"\r\nError msg: `2024-12-20T13:41:20.959Z WARN @wdio/appium-service: Could not identify any capability that indicates a local Appium session, skipping Appium launch`\n\n### What is your expected behavior?\n\nThe wdio/appium-service should run with the capabilities like i mentioned\n\n### How to reproduce the bug.\n\nRun test with the config above\n\n### Relevant log output\n\n```typescript\n2024-12-20T13:41:20.959Z WARN @wdio/appium-service: Could not identify any capability that indicates a local Appium session, skipping Appium launch\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 267,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/wdio-utils/src/utils.ts",
      "packages/wdio-utils/tests/utils.test.ts",
      "pnpm-lock.yaml"
    ],
    "pr_changed_test_files": [
      "packages/wdio-utils/tests/utils.test.ts"
    ],
    "base_commit": "cef3ee07f23f9029e3a73cfee2ab2326b5d44b05",
    "head_commit": "841981ee9fab9ce722b2322febced509bcb4d7c7",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/14000",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/14000",
    "dockerfile": "",
    "pr_merged_at": "2024-12-20T18:37:17.000Z",
    "patch": "diff --git a/packages/wdio-utils/src/utils.ts b/packages/wdio-utils/src/utils.ts\nindex 9ba555afca8..8ff19265ab5 100644\n--- a/packages/wdio-utils/src/utils.ts\n+++ b/packages/wdio-utils/src/utils.ts\n@@ -326,12 +326,15 @@ export function isAppiumCapability(caps: WebdriverIO.Capabilities): boolean {\n             // @ts-expect-error outdated jsonwp cap\n             caps.automationName ||\n             caps['appium:automationName'] ||\n+            ('appium:options' in caps && caps['appium:options']?.automationName) ||\n             // @ts-expect-error outdated jsonwp cap\n             caps.deviceName ||\n             caps['appium:deviceName'] ||\n+            ('appium:options' in caps && caps['appium:options']?.deviceName) ||\n             // @ts-expect-error outdated jsonwp cap\n             caps.appiumVersion ||\n-            caps['appium:appiumVersion']\n+            caps['appium:appiumVersion'] ||\n+            ('appium:options' in caps && caps['appium:options']?.appiumVersion)\n         )\n     )\n }\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex d109667d7a7..a43d2828822 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -437,7 +437,7 @@ importers:\n         version: 5.2.1(vite@5.4.11(@types/node@20.17.10)(terser@5.37.0))(vue@3.5.13(typescript@5.7.2))\n       expect-webdriverio:\n         specifier: 5.0.5\n-        version: 5.0.5(@wdio/globals@9.4.4(@wdio/logger@9.4.4)(puppeteer-core@23.4.1))(@wdio/logger@9.4.4)(webdriverio@9.4.4(puppeteer-core@23.4.1))\n+        version: 5.0.5(@wdio/globals@9.4.5(@wdio/logger@9.4.4)(puppeteer-core@23.4.1))(@wdio/logger@9.4.4)(webdriverio@9.4.5(puppeteer-core@23.4.1))\n       mocha:\n         specifier: ^10.2.0\n         version: 10.8.2\n@@ -936,7 +936,7 @@ importers:\n     optionalDependencies:\n       expect-webdriverio:\n         specifier: ^5.0.1\n-        version: 5.0.5(@wdio/globals@9.4.4(@wdio/logger@9.4.4)(puppeteer-core@23.4.1))(@wdio/logger@9.4.4)(webdriverio@packages+webdriverio)\n+        version: 5.0.5(@wdio/globals@9.4.5(@wdio/logger@9.4.4)(puppeteer-core@23.4.1))(@wdio/logger@9.4.4)(webdriverio@packages+webdriverio)\n       webdriverio:\n         specifier: workspace:*\n         version: link:../webdriverio\n@@ -960,7 +960,7 @@ importers:\n         version: link:../wdio-utils\n       expect-webdriverio:\n         specifier: ^5.0.1\n-        version: 5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@9.4.4(puppeteer-core@23.4.1))\n+        version: 5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@9.4.5(puppeteer-core@23.4.1))\n       jasmine:\n         specifier: ^5.0.0\n         version: 5.5.0\n@@ -1176,7 +1176,7 @@ importers:\n         specifier: workspace:9.4.4\n         version: link:../wdio-config\n       '@wdio/globals':\n-        specifier: workspace:9.4.4\n+        specifier: workspace:9.4.5\n         version: link:../wdio-globals\n       '@wdio/logger':\n         specifier: workspace:9.4.4\n@@ -1197,7 +1197,7 @@ importers:\n         specifier: workspace:9.4.4\n         version: link:../webdriver\n       webdriverio:\n-        specifier: workspace:9.4.4\n+        specifier: workspace:9.4.5\n         version: link:../webdriverio\n \n   packages/wdio-sauce-service:\n@@ -5829,8 +5829,8 @@ packages:\n     resolution: {integrity: sha512-IyjiS6jtCMCbDedLZNUUaI9IpGAxkItfVKlGUgQ2kNcjOYUyKf/g8MEE0m8lR50yEEVENJ4rEn9IQ+foeFIZjQ==}\n     engines: {node: '>=18.20.0'}\n \n-  '@wdio/globals@9.4.4':\n-    resolution: {integrity: sha512-CJgK714KPlQu+1ud5EaRrHkcYR8EEmVWYhH99U+6eoOgOAfjAnAZ8hWVADFMW3Ev4Szc2mIuF4Wc0bRQ63m8LQ==}\n+  '@wdio/globals@9.4.5':\n+    resolution: {integrity: sha512-zdN/2EGOr2HER59CNAtSfmr/M7BMAH5gQJix4iPkDN5buf8PQZHE16GnfKtqKTIBeNgpkBkUyjyCKoIKSUngjw==}\n     engines: {node: '>=18.20.0'}\n \n   '@wdio/logger@9.1.3':\n@@ -13434,8 +13434,8 @@ packages:\n       puppeteer-core:\n         optional: true\n \n-  webdriverio@9.4.4:\n-    resolution: {integrity: sha512-4fPff4SJKQY4BV9OBnu2x9gcx4xKIzds4RE3TN/edB3wYnxM+oUwzS0lLHz+FzcumIirkpgxJ0hzYZMsibJQaw==}\n+  webdriverio@9.4.5:\n+    resolution: {integrity: sha512-tc22NSwKbXNROhafzktoQnhfkx0bhvh9a+XVaVu3mLhaiOmymIGDcS2NyRoOn3Sq4JxWJuOUwTO6f6jNkFJ5bQ==}\n     engines: {node: '>=18.20.0'}\n     peerDependencies:\n       puppeteer-core: ^22.3.0\n@@ -19377,10 +19377,10 @@ snapshots:\n       - supports-color\n       - utf-8-validate\n \n-  '@wdio/globals@9.4.4(@wdio/logger@9.4.4)(puppeteer-core@23.4.1)':\n+  '@wdio/globals@9.4.5(@wdio/logger@9.4.4)(puppeteer-core@23.4.1)':\n     optionalDependencies:\n-      expect-webdriverio: 5.0.5(@wdio/globals@9.4.4(@wdio/logger@9.4.4)(puppeteer-core@23.4.1))(@wdio/logger@9.4.4)(webdriverio@9.4.4(puppeteer-core@23.4.1))\n-      webdriverio: 9.4.4(puppeteer-core@23.4.1)\n+      expect-webdriverio: 5.0.5(@wdio/globals@9.4.5(@wdio/logger@9.4.4)(puppeteer-core@23.4.1))(@wdio/logger@9.4.4)(webdriverio@9.4.5(puppeteer-core@23.4.1))\n+      webdriverio: 9.4.5(puppeteer-core@23.4.1)\n     transitivePeerDependencies:\n       - '@wdio/logger'\n       - bufferutil\n@@ -21983,20 +21983,20 @@ snapshots:\n       webdriverio: 9.4.3(puppeteer-core@23.4.1)\n     optional: true\n \n-  expect-webdriverio@5.0.5(@wdio/globals@9.4.4(@wdio/logger@9.4.4)(puppeteer-core@23.4.1))(@wdio/logger@9.4.4)(webdriverio@9.4.4(puppeteer-core@23.4.1)):\n+  expect-webdriverio@5.0.5(@wdio/globals@9.4.5(@wdio/logger@9.4.4)(puppeteer-core@23.4.1))(@wdio/logger@9.4.4)(webdriverio@9.4.5(puppeteer-core@23.4.1)):\n     dependencies:\n       '@vitest/snapshot': 2.1.8\n-      '@wdio/globals': 9.4.4(@wdio/logger@9.4.4)(puppeteer-core@23.4.1)\n+      '@wdio/globals': 9.4.5(@wdio/logger@9.4.4)(puppeteer-core@23.4.1)\n       '@wdio/logger': 9.4.4\n       expect: 29.7.0\n       jest-matcher-utils: 29.7.0\n       lodash.isequal: 4.5.0\n-      webdriverio: 9.4.4(puppeteer-core@23.4.1)\n+      webdriverio: 9.4.5(puppeteer-core@23.4.1)\n \n-  expect-webdriverio@5.0.5(@wdio/globals@9.4.4(@wdio/logger@9.4.4)(puppeteer-core@23.4.1))(@wdio/logger@9.4.4)(webdriverio@packages+webdriverio):\n+  expect-webdriverio@5.0.5(@wdio/globals@9.4.5(@wdio/logger@9.4.4)(puppeteer-core@23.4.1))(@wdio/logger@9.4.4)(webdriverio@packages+webdriverio):\n     dependencies:\n       '@vitest/snapshot': 2.1.8\n-      '@wdio/globals': 9.4.4(@wdio/logger@9.4.4)(puppeteer-core@23.4.1)\n+      '@wdio/globals': 9.4.5(@wdio/logger@9.4.4)(puppeteer-core@23.4.1)\n       '@wdio/logger': 9.4.4\n       expect: 29.7.0\n       jest-matcher-utils: 29.7.0\n@@ -22014,7 +22014,7 @@ snapshots:\n       lodash.isequal: 4.5.0\n       webdriverio: link:packages/webdriverio\n \n-  expect-webdriverio@5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@9.4.4(puppeteer-core@23.4.1)):\n+  expect-webdriverio@5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@9.4.5(puppeteer-core@23.4.1)):\n     dependencies:\n       '@vitest/snapshot': 2.1.8\n       '@wdio/globals': link:packages/wdio-globals\n@@ -22022,7 +22022,7 @@ snapshots:\n       expect: 29.7.0\n       jest-matcher-utils: 29.7.0\n       lodash.isequal: 4.5.0\n-      webdriverio: 9.4.4(puppeteer-core@23.4.1)\n+      webdriverio: 9.4.5(puppeteer-core@23.4.1)\n \n   expect-webdriverio@5.0.5(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio):\n     dependencies:\n@@ -28680,7 +28680,7 @@ snapshots:\n       - supports-color\n       - utf-8-validate\n \n-  webdriverio@9.4.4(puppeteer-core@23.4.1):\n+  webdriverio@9.4.5(puppeteer-core@23.4.1):\n     dependencies:\n       '@types/node': 20.17.10\n       '@types/sinonjs__fake-timers': 8.1.5\n",
    "test_patch": "diff --git a/packages/wdio-utils/tests/utils.test.ts b/packages/wdio-utils/tests/utils.test.ts\nindex 5830f05fe91..d1503a98198 100644\n--- a/packages/wdio-utils/tests/utils.test.ts\n+++ b/packages/wdio-utils/tests/utils.test.ts\n@@ -6,7 +6,7 @@ import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest'\n import {\n     overwriteElementCommands, commandCallStructure, isValidParameter, definesRemoteDriver,\n     getArgumentType, isFunctionAsync, filterSpecArgs, isBase64, transformCommandLogResult,\n-    userImport, getBrowserObject, enableFileLogging,\n+    userImport, getBrowserObject, enableFileLogging, isAppiumCapability\n } from '../src/utils.js'\n \n describe('utils', () => {\n@@ -300,4 +300,23 @@ describe('enableFileLogging', () => {\n         expect(fs.mkdir).toHaveBeenCalledWith(path.join(outputDir), { recursive: true })\n         expect(process.env.WDIO_LOG_PATH).toBe(expectedLogPath)\n     })\n-})\n\\ No newline at end of file\n+})\n+\n+describe('isAppiumCapability', () => {\n+    it('should return true if it indicates an Appium capability', () => {\n+        expect(isAppiumCapability({})).toBe(false)\n+        expect(isAppiumCapability({ browserName: 'chrome' })).toBe(false)\n+        // @ts-expect-error outdated jsonwp cap\n+        expect(isAppiumCapability({ automationName: 'android' })).toBe(true)\n+        expect(isAppiumCapability({ 'appium:automationName': 'android' })).toBe(true)\n+        expect(isAppiumCapability({ 'appium:options': { automationName: 'android' } })).toBe(true)\n+        // @ts-expect-error outdated jsonwp cap\n+        expect(isAppiumCapability({ deviceName: 'android' })).toBe(true)\n+        expect(isAppiumCapability({ 'appium:deviceName': 'android' })).toBe(true)\n+        expect(isAppiumCapability({ 'appium:options': { deviceName: 'android' } })).toBe(true)\n+        // @ts-expect-error outdated jsonwp cap\n+        expect(isAppiumCapability({ appiumVersion: 'android' })).toBe(true)\n+        expect(isAppiumCapability({ 'appium:appiumVersion': 'android' })).toBe(true)\n+        expect(isAppiumCapability({ 'appium:options': { appiumVersion: 'android' } })).toBe(true)\n+    })\n+})\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13960",
    "pr_id": 13960,
    "issue_id": 13956,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Timeout when opening url 'file://'\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.4.1\n\n### Node.js Version\n\nv20.11.1\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\r\n    browserName: 'chrome'\r\n}\n```\n\n\n### What happened?\n\nA simple test timed out loading the URL file://\r\n```\r\ndescribe('example', () => {\r\n    it('load page', async () => {\r\n        await browser.url('file:///Some/valid/path/test.html');\r\n    });\r\n});\r\n```\r\n\r\n```\r\n------------------------------------------------------------------\r\n[chrome 131.0.6778.109 mac #0-0] Running: chrome (v131.0.6778.109) on mac\r\n[chrome 131.0.6778.109 mac #0-0] Session ID: 43ae91a4726d6ec62ea3c108d9225aec\r\n[chrome 131.0.6778.109 mac #0-0]\r\n[chrome 131.0.6778.109 mac #0-0] » /simple.ts\r\n[chrome 131.0.6778.109 mac #0-0] example\r\n[chrome 131.0.6778.109 mac #0-0]    ✖ load page\r\n[chrome 131.0.6778.109 mac #0-0]\r\n[chrome 131.0.6778.109 mac #0-0] 1 failing (5s)\r\n[chrome 131.0.6778.109 mac #0-0]\r\n[chrome 131.0.6778.109 mac #0-0] 1) example load page\r\n[chrome 131.0.6778.109 mac #0-0] Error: waitUntil condition timed out after 5000ms\r\n```\n\n### What is your expected behavior?\n\nTo succeed and not timeout. \n\n### How to reproduce the bug.\n\nUploading a simple example. \r\n[simple.zip](https://github.com/user-attachments/files/18045334/simple.zip)\r\n```\r\nnpm I\r\nnpm run test-simple\r\n```\n\n### Relevant log output\n\n```typescript\n------------------------------------------------------------------\r\n[chrome 131.0.6778.109 mac #0-0] Running: chrome (v131.0.6778.109) on mac\r\n[chrome 131.0.6778.109 mac #0-0] Session ID: 43ae91a4726d6ec62ea3c108d9225aec\r\n[chrome 131.0.6778.109 mac #0-0]\r\n[chrome 131.0.6778.109 mac #0-0] » /simple.ts\r\n[chrome 131.0.6778.109 mac #0-0] example\r\n[chrome 131.0.6778.109 mac #0-0]    ✖ load page\r\n[chrome 131.0.6778.109 mac #0-0]\r\n[chrome 131.0.6778.109 mac #0-0] 1 failing (5s)\r\n[chrome 131.0.6778.109 mac #0-0]\r\n[chrome 131.0.6778.109 mac #0-0] 1) example load page\r\n[chrome 131.0.6778.109 mac #0-0] Error: waitUntil condition timed out after 5000ms\r\n\r\nIf I change the code to: await browser.url('file:///Some/valid/path/test.html').catch(console.error);\r\nThen I see:\r\n\r\n[0-0] Error: waitUntil condition timed out after 5000ms\r\n[0-0]     at <anonymous> (.../simple-file/node_modules/webdriverio/build/index.js:4924:13)\r\n[0-0]     at Browser.wrapCommandFn (.../simple-file/node_modules/@wdio/utils/build/index.js:884:23)\r\n[0-0]     at Browser.url3 (.../simple-file/node_modules/webdriverio/build/index.js:4885:21)\r\n[0-0]     at Browser.wrapCommandFn (.../simple-file/node_modules/@wdio/utils/build/index.js:884:23)\r\n[0-0]     at UserContext.<anonymous> (.../simple-file/simple.ts:4:9)\r\n[0-0]     at UserContext.executeAsync (.../simple-file/node_modules/@wdio/utils/build/index.js:1004:20)\r\n[0-0]     at UserContext.testFrameworkFnWrapper (.../simple-file/node_modules/@wdio/utils/build/index.js:1075:14)\r\n```\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 515,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "e2e/wdio/headless/__fixtures__/test.html",
      "e2e/wdio/headless/test.e2e.ts",
      "packages/wdio-utils/src/envDetector.ts",
      "packages/webdriverio/src/networkManager.ts"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/__fixtures__/test.html",
      "e2e/wdio/headless/test.e2e.ts"
    ],
    "base_commit": "832f1b7e8c41436a46a81a5f777950047c6475cd",
    "head_commit": "b8c2c26030db1d195144ce085bbca5548ed4d5ee",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13960",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13960",
    "dockerfile": "",
    "pr_merged_at": "2024-12-09T19:46:28.000Z",
    "patch": "diff --git a/packages/wdio-utils/src/envDetector.ts b/packages/wdio-utils/src/envDetector.ts\nindex 8305b63cc96..22630246091 100644\n--- a/packages/wdio-utils/src/envDetector.ts\n+++ b/packages/wdio-utils/src/envDetector.ts\n@@ -108,9 +108,9 @@ function isMobile(capabilities: WebdriverIO.Capabilities) {\n     const browserstackBrowserName = (bsOptions.browserName || '').toLowerCase()\n \n     /**\n-     * There are cases where sessions with `appium:*` prefixed capabilities do not fully support all \"native\"-mobile commands.  \n-     * In this case the `appium:automationName` is set with something else than the \n-     * `xcuitest|uiautomator2|flutter|espress|..` value. This can be a browser driver or \n+     * There are cases where sessions with `appium:*` prefixed capabilities do not fully support all \"native\"-mobile commands.\n+     * In this case the `appium:automationName` is set with something else than the\n+     * `xcuitest|uiautomator2|flutter|espress|..` value. This can be a browser driver or\n      * a \"wrapped\" appium browser-driver. See also https://github.com/webdriverio/webdriverio/issues/13947\n      * Return `isMobile:false` for those cases. There we also accepts that specific mobile browser\n      * tests (like the FF one on Android) are not seen as a mobile one\n\ndiff --git a/packages/webdriverio/src/networkManager.ts b/packages/webdriverio/src/networkManager.ts\nindex b68f97aba26..22ece7635af 100644\n--- a/packages/webdriverio/src/networkManager.ts\n+++ b/packages/webdriverio/src/networkManager.ts\n@@ -15,6 +15,7 @@ export function getNetworkManager(browser: WebdriverIO.Browser) {\n \n type Context = string\n const UNKNOWN_NAVIGATION_ID = 'UNKNOWN_NAVIGATION_ID'\n+const SUPPORTED_NAVIGATION_PROTOCOLS = ['http', 'https', 'data', 'file']\n \n /**\n  * This class is responsible for managing shadow roots and their elements.\n@@ -101,9 +102,9 @@ export class NetworkManager {\n              */\n             !log.navigation ||\n             /**\n-             * ignore urls that do not start with http\n+             * ignore urls that users wouldn't navigate to\n              */\n-            !log.url.startsWith('http')\n+            !SUPPORTED_NAVIGATION_PROTOCOLS.some((protocol) => log.url.startsWith(protocol))\n         ) {\n             /**\n              * Chrome v127 and below does not support yet navigation ids, hence we have to\n",
    "test_patch": "diff --git a/e2e/wdio/headless/__fixtures__/test.html b/e2e/wdio/headless/__fixtures__/test.html\nnew file mode 100644\nindex 00000000000..f3e333e80d2\n--- /dev/null\n+++ b/e2e/wdio/headless/__fixtures__/test.html\n@@ -0,0 +1 @@\n+<h1>Hello World</h1>\n\ndiff --git a/e2e/wdio/headless/test.e2e.ts b/e2e/wdio/headless/test.e2e.ts\nindex 371ce5783db..9a19b1e723a 100644\n--- a/e2e/wdio/headless/test.e2e.ts\n+++ b/e2e/wdio/headless/test.e2e.ts\n@@ -1,6 +1,11 @@\n /// <reference types=\"@wdio/lighthouse-service\" />\n-import { browser, $, expect } from '@wdio/globals'\n+\n import os from 'node:os'\n+import url from 'node:url'\n+import path from 'node:path'\n+import { browser, $, expect } from '@wdio/globals'\n+\n+const __dirname = path.dirname(url.fileURLToPath(import.meta.url))\n \n describe('main suite 1', () => {\n     it('supports snapshot testing', async () => {\n@@ -545,4 +550,27 @@ describe('main suite 1', () => {\n             await expect($('#tinymce')).toBePresent()\n         })\n     })\n+\n+    describe.only('open resources with different protocols', () => {\n+        it('http', async () => {\n+            browser.url('http://guinea-pig.webdriver.io/')\n+            await expect(browser).toHaveUrl('http://guinea-pig.webdriver.io/')\n+        })\n+\n+        it('https', async () => {\n+            await browser.url('https://webdriver.io/')\n+            await expect(browser).toHaveUrl('https://webdriver.io/')\n+        })\n+\n+        it('data', async () => {\n+            await browser.url('data:text/html,<h1>Test</h1>')\n+            await expect($('h1')).toHaveText('Test')\n+        })\n+\n+        it('file', async () => {\n+            const resource = path.resolve(__dirname, '__fixtures__', 'test.html')\n+            await browser.url(url.pathToFileURL(resource).href)\n+            await expect($('h1')).toHaveText('Hello World')\n+        })\n+    })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13958",
    "pr_id": 13958,
    "issue_id": 13915,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Wdio can hangs generating allure-report when combining afterAll hook and a leak of startStep\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\n8.39.0\r\n\r\n### Node.js Version\r\n\r\nv18.20.4\r\n\r\n### Mode\r\n\r\nWDIO Testrunner\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\nconfig {\r\n  \"runner\": \"local\",\r\n  \"waitforTimeout\": 5000,\r\n  \"connectionRetryTimeout\": 10000,\r\n  \"connectionRetryCount\": 3,\r\n  \"framework\": \"mocha\",\r\n  \"specs\": [\r\n    \"../../src/tests/**/*.test.ts\"\r\n  ],\r\n  \"mochaOpts\": {\r\n    \"ui\": \"bdd\",\r\n    \"timeout\": 240000,\r\n    \"retries\": 0\r\n  },\r\n  \"reporters\": [\r\n    [\r\n      \"allure\",\r\n      {\r\n        \"outputDir\": \"logs/allure-results\",\r\n        \"addConsoleLogs\": true\r\n      }\r\n    ],\r\n    [\r\n      \"spec\",\r\n      {\r\n        \"showPreface\": false,\r\n        \"realtimeReporting\": false\r\n      }\r\n    ]\r\n  ],\r\n  \"services\": [\r\n    [\r\n      \"appium\",\r\n      {\r\n        \"args\": {\r\n          \"port\": 4723,\r\n          \"relaxedSecurity\": true,\r\n          \"log\": \"./logs/appium.log\",\r\n          \"logFilters\": \"./appiumPasswordLogFilters.json\"\r\n        }\r\n      }\r\n    ]\r\n  ],\r\n  \"capabilities\": [\r\n    {\r\n      \"platformName\": \"Android\",\r\n      \"appium:udid\": \"MASKED\",\r\n      \"appium:automationName\": \"UiAutomator2\",\r\n      \"appium:appPackage\": \"com.mypackage\",\r\n      \"appium:appActivity\": \"MainActivity\",\r\n      \"appium:newCommandTimeout\": 240,\r\n      \"appium:noReset\": true,\r\n      \"goto:caps\": {\r\n        \"isLocalRun\": true,\r\n        \"iosEnterpriseBuild\": false,\r\n        \"testUserEmail\": \"\",\r\n        \"isDevMode\": true\r\n      },\r\n      \"appium:settings[allowInvisibleElements]\": true,\r\n      \"appium:locale\": \"en_US\",\r\n      \"appium:language\": \"\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n\r\n### What happened?\r\n\r\nWhen a precise test structure (see code in next section) combines an `afterAll` hook with an allure `startStep` that was never ended with `endStep`, the allure-reporter throws an error on the `on:suite:end`, and since the `WDIOReporter` does not seem to handle it gracefully, the reporter hangs indefinitely.\r\n\r\nThis case happened to us precisely because we used the `waitForEnabled` method on a selector, which starts steps without finishing them. Switching to `waitForExist` fixed the `startStep` leaks, and as a consequence, it stopped throwing on the onEndTestSuite, and therefore, the report stopped hanging.\r\n\r\nOn my side, I added a patch with a try-catch on [this line](https://github.com/webdriverio/webdriverio/blob/bd45bf9b879b4947d2adfa0197ee7b8e2d027774/packages/wdio-reporter/src/index.ts#L204) (on both v8 and v9) with a console log in case we ever get that problem again.\r\n\r\n### What is your expected behavior?\r\n\r\nEven if a reporter throws on the `on:suite:end`, the `WDIOReporter` should be able to report the error and stop instead of hanging.\r\n\r\n### How to reproduce the bug.\r\n\r\nTo reproduce, create a test file using the information below.\r\nNote: Our real-case scenario is way more complex than the one below, but I was able to simplify it and reach the below.\r\n\r\n```typescript\r\nimport { startStep } from '@wdio/allure-reporter';\r\n\r\ndescribe('A', function () {\r\n  context('B', () => {\r\n    before(async () => {\r\n      console.log('Before B step');\r\n\r\n      this.afterAll(async () => {\r\n        console.log('After all B step');\r\n      });\r\n\r\n      try {\r\n        startStep('Before B step');\r\n        console.log('waitForEnabled-before');\r\n        await $('element-no-enalbed').waitForEnabled();\r\n      } catch (error) {\r\n        console.log('waitForEnabled-error');\r\n        // silence error\r\n      }\r\n    });\r\n\r\n    context('C', () => {\r\n      it('D', async () => {\r\n        console.log('Test D step');\r\n        expect(true).toBe(true);\r\n      });\r\n    });\r\n  });\r\n});\r\n```\r\n\r\nTo get the same log output as I set below, a try/catch will be required in the following file `/node_modules/@wdio/reporter/build/index.js#ln165`\r\n```typescript\r\n        this.on('suite:end', /* istanbul ignore next */ (suite) => {\r\n            const suiteStat = this.suites[suite.uid];\r\n            suiteStat.complete();\r\n            this.currentSuites.pop();\r\n            /* added try-catch below */\r\n            try {\r\n                this.onSuiteEnd(suiteStat);\r\n            } catch(e) {\r\n                console.error(\"@wdio/reporter: Error in onSuiteEnd, potential stepStart not ended. Happens with waitForEnabled use waitForExists instead\", e)\r\n            }\r\n        });\r\n```\r\n\r\n\r\n\r\n### Relevant log output\r\n\r\nThe log below shows that the test hangs forever without the try/cath.\r\n```\r\nRUNNING in Android - file:///src/tests/example/template.test.ts\r\nBefore B step\r\nwaitForEnabled-before\r\nwaitForEnabled-error\r\nTest D step\r\nAfter all B step <==== last log ever output\r\n```\r\n\r\n\r\nWith the try/catch in `/node_modules/@wdio/reporter/build/index.js#ln165`\r\n```\r\nRUNNING in Android - file:///src/tests/example/template.test.ts\r\nBefore B step\r\nwaitForEnabled-before\r\nwaitForEnabled-error\r\nTest D step\r\nAfter all B step\r\n@wdio/reporter: Error in onSuiteEnd, potential stepStart not ended. Happens with waitForEnabled use waitForExists instead Error: There isn't any active suite!\r\n    at AllureReporter._endSuite (node_modules/@wdio/allure-reporter/build/reporter.js:80:19)\r\n    at AllureReporter.onSuiteEnd (node_modules/@wdio/allure-reporter/build/reporter.js:307:14)\r\n    at AllureReporter.<anonymous> (node_modules/@wdio/reporter/build/index.js:166:22)\r\n    at AllureReporter.emit (node:events:517:28)\r\n    at AllureReporter.emit (node:domain:489:12)\r\n    at node_modules/@wdio/runner/build/reporter.js:47:56\r\n    at Array.forEach (<anonymous>)\r\n    at BaseReporter.emit (node_modules/@wdio/runner/build/reporter.js:47:25)\r\n    at MochaAdapter.emit (node_modules/@wdio/mocha-framework/build/index.js:162:24)\r\n    at Runner.emit (node:events:529:35)\r\nPASSED in Android - file:///src/tests/example/template.test.ts\r\nReport successfully generated to logs/allure-report\r\n```\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 742,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      ".vscode/settings.json",
      "packages/wdio-runner/src/reporter.ts",
      "packages/wdio-runner/tests/index.test.ts",
      "packages/wdio-runner/tests/reporter.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-runner/tests/index.test.ts",
      "packages/wdio-runner/tests/reporter.test.ts"
    ],
    "base_commit": "3f7bd0d91b34cb4d3590a89cd67b3294398d2d54",
    "head_commit": "088700e40c59ddc674042b3d68f45d33fd31dba9",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13958",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13958",
    "dockerfile": "",
    "pr_merged_at": "2024-12-09T12:27:50.000Z",
    "patch": "diff --git a/.vscode/settings.json b/.vscode/settings.json\nindex f0ccf826afb..3d6f4df5bd1 100644\n--- a/.vscode/settings.json\n+++ b/.vscode/settings.json\n@@ -4,6 +4,9 @@\n     \"javascript\",\n     \"typescript\",\n   ],\n+  \"editor.codeActionsOnSave\": {\n+    \"source.fixAll\": \"explicit\"\n+  },\n   // Debugging.\n   \"debug.javascript.unmapMissingSources\": true,\n   \"files.exclude\": {\n@@ -43,5 +46,5 @@\n     \"WDIO\",\n     \"webdriver\",\n     \"webdriverio\"\n-  ]\n+  ],\n }\n\ndiff --git a/packages/wdio-runner/src/reporter.ts b/packages/wdio-runner/src/reporter.ts\nindex f538fafab61..db8393c2fd1 100644\n--- a/packages/wdio-runner/src/reporter.ts\n+++ b/packages/wdio-runner/src/reporter.ts\n@@ -8,7 +8,7 @@ const mochaAllHooks = ['\"before all\" hook', '\"after all\" hook']\n \n /**\n  * BaseReporter\n- * responsible for initialising reporters for every testrun and propagating events\n+ * responsible for initializing reporters for every testrun and propagating events\n  * to all these reporters\n  */\n export default class BaseReporter {\n@@ -53,7 +53,23 @@ export default class BaseReporter {\n             })\n         }\n \n-        this._reporters.forEach((reporter) => reporter.emit(e, payload))\n+        this._reporters.forEach((reporter) => {\n+            try {\n+                reporter.emit(e, payload)\n+            } catch (err: any) {\n+                // When reporter throws an exception, log the error and continue with the next reporter\n+                this.#emitData({\n+                    origin: 'reporter',\n+                    name: 'printFailureMessage',\n+                    content: {\n+                        cid: this._cid,\n+                        // Destructing of message and stack is required else nothing is outputted\n+                        error: { message: err?.message, stack: err?.stack },\n+                        fullTitle: `reporter ${reporter.constructor.name}`,\n+                    }\n+                })\n+            }\n+        })\n     }\n \n     onMessage (listener: (ev: any) => void) {\n@@ -149,7 +165,7 @@ export default class BaseReporter {\n                     return resolve(true)\n                 }\n \n-                log.info(`Wait for ${unsyncedReporter.length} reporter to synchronise`)\n+                log.info(`Wait for ${unsyncedReporter.length} reporter to synchronize`)\n                 // wait otherwise\n             }, this._config.reporterSyncInterval)\n         })\n",
    "test_patch": "diff --git a/packages/wdio-runner/tests/index.test.ts b/packages/wdio-runner/tests/index.test.ts\nindex 0e6088845d9..4100b7719fd 100644\n--- a/packages/wdio-runner/tests/index.test.ts\n+++ b/packages/wdio-runner/tests/index.test.ts\n@@ -472,7 +472,7 @@ describe('wdio-runner', () => {\n             expect(log.error).toHaveBeenCalledWith('foo')\n         })\n \n-        it('should emit runner:start if the initialisation failed', async () => {\n+        it('should emit runner:start if the initialization failed', async () => {\n             const runner = new WDIORunner()\n             runner['_configParser'] = { getCapabilities: vi.fn().mockReturnValue([{ browserName: 'safari' }]) } as any\n             runner['_browser'] = {} as any as BrowserObject\n\ndiff --git a/packages/wdio-runner/tests/reporter.test.ts b/packages/wdio-runner/tests/reporter.test.ts\nindex 7881dcb659c..993ca1f28b7 100644\n--- a/packages/wdio-runner/tests/reporter.test.ts\n+++ b/packages/wdio-runner/tests/reporter.test.ts\n@@ -157,7 +157,7 @@ describe('BaseReporter', () => {\n         expect(process.send).not.toBeCalled()\n     })\n \n-    it('should send printFailureMessage', async () => {\n+    it('should send printFailureMessage on `test:fail`', async () => {\n         const reporter = new BaseReporter({\n             outputDir: '/foo/bar',\n             reporters: [\n@@ -169,12 +169,69 @@ describe('BaseReporter', () => {\n \n         const payload = { foo: [1, 2, 3] }\n         reporter.emit('test:fail', payload)\n-        expect(reporter['_reporters'].map((r) => vi.mocked(r.emit).mock.calls)).toEqual([\n-            [['test:fail', Object.assign(payload, { cid: '0-0' })]],\n-            [['test:fail', Object.assign(payload, { cid: '0-0' })]]\n-        ])\n+\n+        reporter['_reporters'].forEach((reporter) => {\n+            expect(reporter.emit).toHaveBeenCalledWith('test:fail', { ...payload,  cid: '0-0' })\n+        })\n+        expect(process.send).toBeCalledTimes(1)\n+        expect(process.send).toHaveBeenCalledWith(expect.objectContaining({ name: 'printFailureMessage' }))\n+    })\n+\n+    it('should send printFailureMessage on `hook:end`', async () => {\n+        const reporter = new BaseReporter({\n+            outputDir: '/foo/bar',\n+            reporters: [\n+                'dot',\n+                ['dot', { foo: 'bar' }]\n+            ]\n+        } as Options.Testrunner, '0-0', capability)\n+        await reporter.initReporters()\n+        const error = new Error('foobar')\n+\n+        const payload = { foo: [1, 2, 3], error, title: '\"before all\" hook' }\n+        reporter.emit('hook:end', payload)\n+\n+        reporter['_reporters'].forEach((reporter) => {\n+            expect(reporter.emit).toHaveBeenCalledWith('hook:end', { ...payload,  cid: '0-0' })\n+        })\n         expect(process.send).toBeCalledTimes(1)\n-        expect(vi.mocked(process.send)!.mock.calls[0][0].name).toBe('printFailureMessage')\n+        expect(process.send).toHaveBeenCalledWith(expect.objectContaining({ name: 'printFailureMessage' }))\n+    })\n+\n+    it('should send printFailureMessage and continue when reporter throws an error', async () => {\n+        const faultyReporter = 'dot'\n+        const workingReporter = ['dot', { foo: 'bar' }]\n+        const reporter = new BaseReporter({\n+            outputDir: '/foo/bar',\n+            reporters: [faultyReporter, workingReporter] } as Options.Testrunner, '0-0', capability)\n+\n+        await reporter.initReporters()\n+        const faultyReporterInstance = reporter['_reporters'][0]\n+        const workingReporterInstance = reporter['_reporters'][1]\n+        vi.spyOn(faultyReporterInstance, 'emit').mockImplementation(() => {\n+            throw new Error('Reporter throws an error')\n+        })\n+\n+        const payload = { foo: [1] }\n+        reporter.emit('any', payload)\n+\n+        expect(faultyReporterInstance.emit).toBeCalledTimes(1)\n+        expect(workingReporterInstance.emit).toBeCalledTimes(1)\n+        expect(process.send).toBeCalledTimes(1)\n+        expect(process.send).toHaveBeenCalledWith({\n+            'content': {\n+                'cid': '0-0',\n+                'error': {\n+                    'message': 'Reporter throws an error',\n+                    'stack': expect.stringContaining('Error: Reporter throws an error\\n    at DotReporter.<anonymous>')\n+\n+                },\n+                'fullTitle': 'reporter DotReporter',\n+            },\n+            'name': 'printFailureMessage',\n+            'origin': 'reporter',\n+        })\n+\n     })\n \n     it('should allow to load custom reporters', async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13949",
    "pr_id": 13949,
    "issue_id": 13947,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: WDIO 9.4.1 fails to create a session with chromedriver or geckodriver\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.4.1\n\n### Node.js Version\n\n22\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\n{\r\n  capabilities: {\r\n    alwaysMatch: {\r\n      browserName: 'MozillaFirefox',\r\n      platformName: 'linux',\r\n      'appium:automationName': 'Gecko',\r\n      webSocketUrl: true,\r\n      unhandledPromptBehavior: 'ignore'\r\n    },\r\n    firstMatch: [ {} ]\r\n  }\r\n}\n```\n\n\n### What happened?\n\nAfter WDIO upgrade to 9.4.1 session creation with safaridriver or geckdriver@Android always fails. I assume this happens because of the context check call, which is not supported by these drivers.\r\n\r\nSee \r\n\r\n- https://github.com/appium/appium-geckodriver/actions/runs/12138841083/job/33845133024?pr=123\r\n- https://github.com/appium/appium-safari-driver/actions/runs/12138808640/job/33845033745?pr=130\r\n\r\nfor more details\n\n### What is your expected behavior?\n\nIt should be possible to create a session same way it was working in previous wdio versions.\n\n### How to reproduce the bug.\n\nJust run the corresponding pipeline\n\n### Relevant log output\n\n```typescript\nSee the links above\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 209,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-utils/src/envDetector.ts",
      "packages/wdio-utils/tests/envDetector.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-utils/tests/envDetector.test.ts"
    ],
    "base_commit": "54fd52dc02054be70c5faf06fe38d072ddbe85d3",
    "head_commit": "51fce64c5570a16af04f700127c3ba27519d79fb",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13949",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13949",
    "dockerfile": "",
    "pr_merged_at": "2024-12-09T15:59:21.000Z",
    "patch": "diff --git a/packages/wdio-utils/src/envDetector.ts b/packages/wdio-utils/src/envDetector.ts\nindex ba666e66f34..8305b63cc96 100644\n--- a/packages/wdio-utils/src/envDetector.ts\n+++ b/packages/wdio-utils/src/envDetector.ts\n@@ -106,6 +106,20 @@ function isMobile(capabilities: WebdriverIO.Capabilities) {\n     const browserName = (capabilities.browserName || '').toLowerCase()\n     const bsOptions = capabilities['bstack:options'] || {}\n     const browserstackBrowserName = (bsOptions.browserName || '').toLowerCase()\n+\n+    /**\n+     * There are cases where sessions with `appium:*` prefixed capabilities do not fully support all \"native\"-mobile commands.  \n+     * In this case the `appium:automationName` is set with something else than the \n+     * `xcuitest|uiautomator2|flutter|espress|..` value. This can be a browser driver or \n+     * a \"wrapped\" appium browser-driver. See also https://github.com/webdriverio/webdriverio/issues/13947\n+     * Return `isMobile:false` for those cases. There we also accepts that specific mobile browser\n+     * tests (like the FF one on Android) are not seen as a mobile one\n+     */\n+    const automationName = capabilities['appium:options']?.automationName || capabilities['appium:automationName']\n+    if (automationName && ['gecko', 'safari', 'chrome', 'chromium'].includes(automationName.toLocaleLowerCase())) {\n+        return false\n+    }\n+\n     /**\n      * we have mobile capabilities if\n      */\n",
    "test_patch": "diff --git a/packages/wdio-utils/tests/envDetector.test.ts b/packages/wdio-utils/tests/envDetector.test.ts\nindex c05a0edecd6..57e95fcfcb5 100644\n--- a/packages/wdio-utils/tests/envDetector.test.ts\n+++ b/packages/wdio-utils/tests/envDetector.test.ts\n@@ -60,6 +60,13 @@ describe('sessionEnvironmentDetector', () => {\n         expect(sessionEnvironmentDetector({ capabilities: tvOSCapsBS, requestedCapabilities }).isMobile).toBe(true)\n         const androidCapsBS = { 'bstack:options': { ...chromeCaps, 'platformName': 'Android' } }\n         expect(sessionEnvironmentDetector({ capabilities: androidCapsBS, requestedCapabilities }).isMobile).toBe(true)\n+\n+        const geckoAppiumCaps = { 'appium:automationName': 'Gecko' }\n+        expect(sessionEnvironmentDetector({ capabilities: geckoAppiumCaps, requestedCapabilities }).isMobile).toBe(false)\n+        const safariAppiumCaps = { 'appium:options': { automationName: 'safari' } }\n+        expect(sessionEnvironmentDetector({ capabilities: safariAppiumCaps, requestedCapabilities }).isMobile).toBe(false)\n+        const chromiumAppiumCaps = { 'appium:automationName': 'chrome' }\n+        expect(sessionEnvironmentDetector({ capabilities: chromiumAppiumCaps, requestedCapabilities }).isMobile).toBe(false)\n     })\n \n     it('isW3C', () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13925",
    "pr_id": 13925,
    "issue_id": 13923,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: The error: \"Type 'ChainablePromiseArray' must have a '[Symbol.iterator]()' method that returns an iterator.ts(2488)\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.3.1\n\n### Node.js Version\n\n22.11.0\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\nconst chromeArgs: string[] = [\r\n  // The following commands are needed to resolve the \"cannot activate web view\" error ---------↓\r\n  '--no-sandbox',\r\n  '--enable-logging',\r\n  '--v=1',\r\n  '--disable-popup-blocking',\r\n  '--disable-notifications',\r\n  '--disable-infobars', \r\n  '--disable-dev-shm-usage', \r\n  '--disable-browser-side-navigation', \r\n  '--disable-gpu',\r\n];\r\n\r\nif (process.env.GUI !== 'true') {\r\n  chromeArgs.push('--headless');\r\n}\r\n\r\nconst capabilities = [\r\n  {\r\n    browserName: 'chrome',\r\n    browserVersion: 'stable',\r\n    'goog:chromeOptions': {\r\n      args: chromeArgs,\r\n    },\r\n    acceptInsecureCerts: true,\r\n  },\r\n];\n```\n\n\n### What happened?\n\n\r\n in wdio v8 we had been using the following code as the part of POM and it worked great:\r\n\r\n```\r\n  get btnPanels() {\r\n    return $$('.panel__button');\r\n  }\r\n```\r\nand then invoked it as: \r\n```\r\nconst panels = await Page.btnPanels;\r\n\r\nfor (const panel of panels) {\r\n  await expect(panel).toHaveAttr('class', 'false');\r\n}\r\n```\r\nIn wdio v9.3.1 I see the typescript error: \"Type 'ChainablePromiseArray' must have a '[Symbol.iterator]()' method that returns an iterator.ts(2488)\" for the `panels` selector in the loop. I may fix it if I will specify the `ChainablePromiseArray` return type like this:\r\n\r\n```\r\n  get btnPanels(): ChainablePromiseArray {\r\n    return $$('.panel__button');\r\n  }\r\n```\n\n### What is your expected behavior?\n\nTypeScript should not show error and figure out the type automatically like it did it in the previous version\n\n### How to reproduce the bug.\n\nUse code provided above in any IDE editor like VSC in TypeScript project\r\n\r\n\n\n### Relevant log output\n\n```typescript\nno log output\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 298,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/types.ts",
      "tests/typings/webdriverio/async.ts"
    ],
    "pr_changed_test_files": [
      "tests/typings/webdriverio/async.ts"
    ],
    "base_commit": "abc2ec893b7597ac73b061f8617aeb7d90f88574",
    "head_commit": "ce922660bb8a526dacfa03534d085d31f8272786",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13925",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13925",
    "dockerfile": "",
    "pr_merged_at": "2024-11-26T19:20:12.000Z",
    "patch": "diff --git a/packages/webdriverio/src/types.ts b/packages/webdriverio/src/types.ts\nindex 9a9835d6269..719b84c8293 100644\n--- a/packages/webdriverio/src/types.ts\n+++ b/packages/webdriverio/src/types.ts\n@@ -95,6 +95,7 @@ interface AsyncIterators<T> {\n \n export interface ChainablePromiseArray extends AsyncIterators<WebdriverIO.Element> {\n     [Symbol.asyncIterator](): AsyncIterableIterator<WebdriverIO.Element>\n+    [Symbol.iterator](): IterableIterator<WebdriverIO.Element>\n \n     /**\n      * Amount of element fetched.\n",
    "test_patch": "diff --git a/tests/typings/webdriverio/async.ts b/tests/typings/webdriverio/async.ts\nindex 267c8a6128d..679a53331f1 100644\n--- a/tests/typings/webdriverio/async.ts\n+++ b/tests/typings/webdriverio/async.ts\n@@ -489,6 +489,15 @@ async function bar() {\n     expectType<WebdriverIO.Element[]>(\n         await browser.$$('foo').filter(async () => true)\n     )\n+\n+    for await (const el of browser.$$('foo')) {\n+        expectType<WebdriverIO.Element>(el)\n+    }\n+    const panels = await browser.$$('foo')\n+    for (const panel of panels) {\n+        await expect(panel).toHaveAttr('class', 'false')\n+    }\n+\n     type Random = {\n         foo: WebdriverIO.Element\n         bar: WebdriverIO.Browser\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13913",
    "pr_id": 13913,
    "issue_id": 12227,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: [appium-service] Running Appium WDIO spec from VS Code debugger is rarely working (extremely flaky)\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\n8.31.1\r\n\r\n### Node.js Version\r\n\r\nv20.9.0\r\n\r\n### Mode\r\n\r\nWDIO Testrunner\r\n\r\n### Which capabilities are you using?\r\n\r\n_No response_\r\n\r\n### What happened?\r\n\r\n- Running the WDIO Appium spec from VS Code debugger is extremely flaky. The majority of times it fails\r\n- Triggering debugging from the terminal `npm run wdio-ios` works without issues (tried multiple times in the row)\r\n\r\n### What is your expected behavior?\r\n\r\nWhen I run WDIO Appium spec from VS Code Run and Debug extension it should work without errors (just like running from the terminal `npm run wdio-ios` works without errors)\r\n\r\n### How to reproduce the bug.\r\n\r\n# Steps to reproduce:\r\n- Pull the code from: https://github.com/AlexZagriychuk/appium-service-error\r\n- `npm i`\r\n- In VSCode add a breakpoint in the `/test/specs/test.e2e.js` on the line 5, and keep this file as active\r\n- Open the VS Code \"Run and debug\" extension, select \"run select spec (iOS)\" config (https://webdriver.io/docs/debugging/)\r\n- Run this spec from VS Code debugger multiple times in the row\r\n\r\n\r\n# There are a few problems:\r\nProblem 1 (the main one). Running the WDIO Appium spec from VS Code debugger is extremely flaky. The majority of times it fails with the following console output:\r\n```\r\n{USER}@{USER} appium-service-error %  cd /Users/{USER}/dev/appium-service-bug/appium-service-error ; /usr/b\r\nin/env 'NODE_OPTIONS= --require \"/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/ms-vscode.js-debug/src/bootloader.js\"\r\n--inspect-publish-uid=http' 'VSCODE_INSPECTOR_OPTIONS=:::{\"inspectorIpc\":\"/var/folders/sm/swqb23fd0jv0s33zs257l0sc0000gp/T/node-cdp.22312-7a188\r\n243-1122.sock\",\"deferredMode\":false,\"waitForDebugger\":\"\",\"execPath\":\"/Users/{USER}/.nvm/versions/node/v20.9.0/bin/node\",\"onlyEntryp\r\noint\":false,\"autoAttachMode\":\"always\",\"fileCallback\":\"/var/folders/sm/swqb23fd0jv0s33zs257l0sc0000gp/T/node-debug-callback-8c5b8ce04287aa37\"}'\r\n/Users/{USER}/.nvm/versions/node/v20.9.0/bin/node ./node_modules/@wdio/cli/bin/wdio.js wdio.ios.conf.js --spec /Users/alexzagriychu\r\nk-mbp/dev/appium-service-bug/appium-service-error/test/specs/test.e2e.js\r\nDebugger attached.\r\n\r\nExecution of 1 workers started at 2024-02-13T02:54:24.288Z\r\n\r\n2024-02-13T02:54:24.321Z INFO @wdio/cli:launcher: Run onPrepare hook\r\n2024-02-13T02:54:24.322Z INFO @wdio/appium-service: Will spawn Appium process: node /Users/{USER}/dev/appium-service-bug/appium-service-error/node_modules/appium/index.js --base-path / --relaxed-security --log ./_results_/appium.log --port 4723\r\n2024-02-13T02:54:24.426Z ERROR @wdio/appium-service: Debugger attached.\r\n\r\n2024-02-13T02:54:24.427Z ERROR @wdio/cli:utils: A service failed in the 'onPrepare' hook\r\nError: Debugger attached.\r\n\r\n    at Socket.<anonymous> (file:///Users/{USER}/dev/appium-service-bug/appium-service-error/node_modules/@wdio/appium-service/build/launcher.js:172:28)\r\n    at Object.onceWrapper (node:events:629:26)\r\n    at Socket.emit (node:events:514:28)\r\n    at Socket.emit (node:domain:488:12)\r\n    at addChunk (node:internal/streams/readable:376:12)\r\n    at readableAddChunk (node:internal/streams/readable:349:9)\r\n    at Readable.push (node:internal/streams/readable:286:10)\r\n    at Pipe.onStreamRead (node:internal/stream_base_commons:190:23)\r\n    at Pipe.callbackTrampoline (node:internal/async_hooks:130:17)\r\n\r\nContinue...\r\n2024-02-13T02:54:24.427Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2024-02-13T02:54:24.428Z INFO @wdio/local-runner: Start worker 0-0 with arg: wdio.ios.conf.js,--spec,/Users/{USER}/dev/appium-service-bug/appium-service-error/test/specs/test.e2e.js\r\n[0-0] 2024-02-13T02:54:25.964Z INFO @wdio/local-runner: Run worker command: run\r\n[0-0] RUNNING in Safari - file:///test/specs/test.e2e.js\r\n[0-0] 2024-02-13T02:54:26.149Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n[0-0] 2024-02-13T02:54:26.149Z INFO @wdio/utils: Connecting to existing driver at http://127.0.0.1:4723/\r\n[0-0] 2024-02-13T02:54:26.251Z INFO webdriver: [POST] http://127.0.0.1:4723/session\r\n[0-0] 2024-02-13T02:54:26.252Z INFO webdriver: DATA {\r\n[0-0]   capabilities: {\r\n[0-0]     alwaysMatch: {\r\n[0-0]       platformName: 'iOS',\r\n[0-0]       browserName: 'Safari',\r\n[0-0]       'appium:deviceName': 'iPhone 14 Pro',\r\n[0-0]       'appium:platformVersion': '16.4',\r\n[0-0]       'appium:automationName': 'XCUITest'\r\n[0-0]     },\r\n[0-0]     firstMatch: [ {} ]\r\n[0-0]   },\r\n[0-0]   desiredCapabilities: {\r\n[0-0]     platformName: 'iOS',\r\n[0-0]     browserName: 'Safari',\r\n[0-0]     'appium:deviceName': 'iPhone 14 Pro',\r\n[0-0]     'appium:platformVersion': '16.4',\r\n[0-0]     'appium:automationName': 'XCUITest'\r\n[0-0]   }\r\n[0-0] }\r\n[0-0] 2024-02-13T02:54:26.572Z ERROR webdriver: RequestError: connect ECONNREFUSED 127.0.0.1:4723\r\n[0-0]     at ClientRequest.<anonymous> (file:///Users/{USER}/dev/appium-service-bug/appium-service-error/node_modules/got/dist/source/core/index.js:790:107)\r\n[0-0]     at Object.onceWrapper (node:events:629:26)\r\n[0-0]     at ClientRequest.emit (node:events:526:35)\r\n[0-0]     at ClientRequest.emit (node:domain:488:12)\r\n[0-0]     at Socket.socketErrorListener (node:_http_client:495:9)\r\n[0-0]     at Socket.emit (node:events:514:28)\r\n[0-0]     at Socket.emit (node:domain:488:12)\r\n[0-0]     at emitErrorNT (node:internal/streams/destroy:151:8)\r\n[0-0]     at emitErrorCloseNT (node:internal/streams/destroy:116:3)\r\n[0-0]     at process.processTicksAndRejections (node:internal/process/task_queues:82:21)\r\n[0-0]     at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1595:16)\r\n[0-0]     at TCPConnectWrap.callbackTrampoline (node:internal/async_hooks:130:17)\r\n[0-0] 2024-02-13T02:54:26.572Z ERROR @wdio/runner: Error: Failed to create session.\r\n[0-0] Unable to connect to \"http://127.0.0.1:4723/\", make sure browser driver is running on that address.\r\n[0-0] It seems like the service failed to start or is rejecting any connections.\r\n[0-0]     at startWebDriverSession (file:///Users/{USER}/dev/appium-service-bug/appium-service-error/node_modules/webdriver/build/utils.js:69:15)\r\n[0-0]     at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n[0-0]     at async WebDriver.newSession (file:///Users/{USER}/dev/appium-service-bug/appium-service-error/node_modules/webdriver/build/index.js:20:45)\r\n[0-0]     at async remote (file:///Users/{USER}/dev/appium-service-bug/appium-service-error/node_modules/webdriverio/build/index.js:45:22)\r\n[0-0]     at async Runner._startSession (file:///Users/{USER}/dev/appium-service-bug/appium-service-error/node_modules/@wdio/runner/build/index.js:241:29)\r\n[0-0]     at async Runner._initSession (file:///Users/{USER}/dev/appium-service-bug/appium-service-error/node_modules/@wdio/runner/build/index.js:207:25)\r\n[0-0]     at async Runner.run (file:///Users/{USER}/dev/appium-service-bug/appium-service-error/node_modules/@wdio/runner/build/index.js:88:19)\r\n[0-0] FAILED in Safari - file:///test/specs/test.e2e.js\r\n2024-02-13T02:54:26.702Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\r\n2024-02-13T02:54:26.705Z INFO @wdio/cli:launcher: Run onComplete hook\r\n\r\nSpec Files:      0 passed, 1 failed, 1 total (100% completed) in 00:00:02\r\n\r\n2024-02-13T02:54:26.706Z INFO @wdio/local-runner: Shutting down spawned worker\r\n2024-02-13T02:54:26.957Z INFO @wdio/local-runner: Waiting for 0 to shut down gracefully\r\n2024-02-13T02:54:26.958Z INFO @wdio/local-runner: shutting down\r\nWaiting for the debugger to disconnect...\r\n```\r\n\r\n\r\nProblem 2. Even if in rare cases it actually starts and we see the debug runner paused at the breakpoint, we still see the console error (which seem to make consecutive successful execution impossible, and overall execution from the VS Code debugger extremely flaky)\r\n```\r\nExecution of 1 workers started at 2024-02-13T03:00:25.450Z\r\n\r\n2024-02-13T03:00:25.479Z INFO @wdio/cli:launcher: Run onPrepare hook\r\n2024-02-13T03:00:25.480Z INFO @wdio/appium-service: Will spawn Appium process: node /Users/{USER}/dev/appium-service-bug/appium-service-error/node_modules/appium/index.js --base-path / --relaxed-security --log ./_results_/appium.log --port 4723\r\n2024-02-13T03:00:25.581Z ERROR @wdio/appium-service: Debugger attached.\r\n\r\n2024-02-13T03:00:25.581Z ERROR @wdio/cli:utils: A service failed in the 'onPrepare' hook\r\nError: Debugger attached.\r\n\r\n    at Socket.<anonymous> (file:///Users/{USER}/dev/appium-service-bug/appium-service-error/node_modules/@wdio/appium-service/build/launcher.js:172:28)\r\n    at Object.onceWrapper (node:events:629:26)\r\n    at Socket.emit (node:events:514:28)\r\n    at Socket.emit (node:domain:488:12)\r\n    at addChunk (node:internal/streams/readable:376:12)\r\n    at readableAddChunk (node:internal/streams/readable:349:9)\r\n    at Readable.push (node:internal/streams/readable:286:10)\r\n    at Pipe.onStreamRead (node:internal/stream_base_commons:190:23)\r\n    at Pipe.callbackTrampoline (node:internal/async_hooks:130:17)\r\n\r\nContinue...\r\n```\r\n\r\n# Notes:\r\n- If I run `npm run wdio-ios` multiple times in the row I see no 1 nor 2 issue, and successfully stop at the breakpoint every time (sometimes need to execute `npm run appium-kill` once before running the script). So both 1 and 2 issues seem to only be present when running from the VSCode debugger\r\n- seems like the 1 problem flakiness rate reduces if I `npm uninstall appium-uiautomator2-driver` (which is not a fix, just an observation), but 2 still present every time\r\n\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\nAdded above (with markdown support)\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 1562,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-appium-service/src/launcher.ts",
      "packages/wdio-appium-service/tests/launcher.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-appium-service/tests/launcher.test.ts"
    ],
    "base_commit": "bd45bf9b879b4947d2adfa0197ee7b8e2d027774",
    "head_commit": "ec37e29880f484c41124fb4022a7f09c0a73841a",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13913",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13913",
    "dockerfile": "",
    "pr_merged_at": "2024-12-31T16:52:15.000Z",
    "patch": "diff --git a/packages/wdio-appium-service/src/launcher.ts b/packages/wdio-appium-service/src/launcher.ts\nindex ccc5d5d6b20..a67f92c1fda 100644\n--- a/packages/wdio-appium-service/src/launcher.ts\n+++ b/packages/wdio-appium-service/src/launcher.ts\n@@ -247,8 +247,13 @@ export default class AppiumLauncher implements Services.ServiceInstance {\n              * only capture first error to print it in case Appium failed to start.\n              */\n             const onErrorMessage = (data: Buffer) => {\n+                /**\n+                 * filter 'Debugger attached' message as it is not an error\n+                 */\n                 error = data.toString() || 'Appium exited without unknown error message'\n-                log.error(error)\n+                if (!data.toString().includes('Debugger attached')) {\n+                    log.error(error)\n+                }\n                 rejectOnce(new Error(error))\n             }\n \n",
    "test_patch": "diff --git a/packages/wdio-appium-service/tests/launcher.test.ts b/packages/wdio-appium-service/tests/launcher.test.ts\nindex 655cef38233..8685acf6c6b 100644\n--- a/packages/wdio-appium-service/tests/launcher.test.ts\n+++ b/packages/wdio-appium-service/tests/launcher.test.ts\n@@ -11,9 +11,12 @@ import { Readable, type Writable } from 'node:stream'\n import { describe, expect, beforeEach, afterEach, test, vi } from 'vitest'\n import { resolve } from 'import-meta-resolve'\n import type { Capabilities } from '@wdio/types'\n+import logger from '@wdio/logger'\n \n import AppiumLauncher from '../src/launcher.js'\n \n+const log = logger('@wdio/appium-service')\n+\n vi.mock('node:fs', () => ({\n     default: {\n         createWriteStream: vi.fn()\n@@ -771,6 +774,27 @@ describe('Appium launcher', () => {\n                 10000\n             )).resolves.toEqual(expect.objectContaining({ spawnargs: expect.arrayContaining(['-e', expect.any(String)]) }))\n         })\n+\n+        test('should filter out \"Debugger attached\" message as an error', async () => {\n+            const eventListener = { on: vi.fn(), off: vi.fn(), once: vi.fn() }\n+            vi.mocked(spawn).mockReturnValue({\n+                ...eventListener,\n+                stdout: { ...eventListener },\n+                stderr: { ...eventListener },\n+            } as unknown as cp.ChildProcess)\n+\n+            const mockLogError = vi.spyOn(log, 'error')\n+            const launcher = new AppiumLauncher({}, [], {} as any)\n+\n+            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n+            const processPromise = launcher['_startAppium']('node', [], 2000)\n+\n+            const errorHandler = vi.mocked(spawn).mock.results[0].value.stderr.on.mock.calls\n+                .find(call => call[0] === 'data')?.[1]\n+\n+            errorHandler(Buffer.from('Debugger attached'))\n+            expect(mockLogError).not.toHaveBeenCalled()\n+        })\n     })\n \n     afterEach(() => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13910",
    "pr_id": 13910,
    "issue_id": 13908,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[💡 Feature]: Update Cucumber to >= 10.8.0 to support `world` and `context` to allow accessing state from arrow functions\n### Is your feature request related to a problem?\n\nIn order to work with state, I can not use arrow functions to define steps, because they don't provide the proper `this` value.\r\n\n\n### Describe the solution you'd like.\n\nI want to use the new `world` and `context` exports from cucumber to access state from arrow functions.\n\n### Describe alternatives you've considered.\n\nI have to use the old and tedious `function` syntax - which is not even endorsed by Cucumbers vscode extension.\n\n### Additional context\n\nThe feature is added in [10.8.0](https://github.com/cucumber/cucumber-js/blob/main/CHANGELOG.md#1080---2024-05-26).\r\nThe next non-breaking minor version is [10.9.0](https://github.com/cucumber/cucumber-js/blob/main/CHANGELOG.md#1090---2024-08-13).\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct",
    "issue_word_count": 161,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/wdio-cucumber-framework/src/index.ts",
      "packages/wdio-cucumber-framework/tests/adapter.test.ts",
      "website/docs/Frameworks.md"
    ],
    "pr_changed_test_files": [
      "packages/wdio-cucumber-framework/tests/adapter.test.ts"
    ],
    "base_commit": "5b4467245872092295ea947a039430288fd8b448",
    "head_commit": "606e3a3e4430a6c90496832067e123784a524916",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13910",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13910",
    "dockerfile": "",
    "pr_merged_at": "2024-11-22T19:12:56.000Z",
    "patch": "diff --git a/packages/wdio-cucumber-framework/src/index.ts b/packages/wdio-cucumber-framework/src/index.ts\nindex a04ee18ba37..7e9393eef12 100644\n--- a/packages/wdio-cucumber-framework/src/index.ts\n+++ b/packages/wdio-cucumber-framework/src/index.ts\n@@ -15,27 +15,9 @@ import { executeHooksWithArgs, testFnWrapper } from '@wdio/utils'\n import type { Capabilities, Options, Frameworks } from '@wdio/types'\n \n import {\n-    After,\n-    AfterAll,\n-    AfterStep,\n-\n-    Before,\n-    BeforeAll,\n-    BeforeStep,\n-\n-    Given,\n-    When,\n-    Then,\n-\n     setDefaultTimeout,\n     setDefinitionFunctionWrapper,\n     supportCodeLibraryBuilder,\n-    setWorldConstructor,\n-    defineParameterType,\n-    defineStep,\n-\n-    DataTable,\n-    World,\n     Status,\n } from '@cucumber/cucumber'\n import Gherkin from '@cucumber/gherkin'\n@@ -72,7 +54,7 @@ function getResultObject(\n     }\n }\n \n-class CucumberAdapter {\n+export class CucumberAdapter {\n     private _cwd = process.cwd()\n     private _newId = IdGenerator.incrementing()\n     private _cucumberOpts: Required<CucumberOptions>\n@@ -544,7 +526,7 @@ class CucumberAdapter {\n  * @returns {Promise<void>} - A Promise that resolves when the report is successfully published.\n  * @throws {Error} - Throws an error if there are issues with file reading or the publishing process.\n  */\n-const publishCucumberReport = async (cucumberMessageDir: string): Promise<void> => {\n+export const publishCucumberReport = async (cucumberMessageDir: string): Promise<void> => {\n     const url = process.env.CUCUMBER_PUBLISH_REPORT_URL || 'https://messages.cucumber.io/api/reports'\n     const token = process.env.CUCUMBER_PUBLISH_REPORT_TOKEN\n     if (!token) {\n@@ -584,7 +566,7 @@ const publishCucumberReport = async (cucumberMessageDir: string): Promise<void>\n }\n \n const _CucumberAdapter = CucumberAdapter\n-const adapterFactory: { init?: Function } = {}\n+export const adapterFactory: { init?: Function } = {}\n \n /**\n  * tested by smoke tests\n@@ -598,34 +580,7 @@ adapterFactory.init = async function (...args: any[]) {\n }\n \n export default adapterFactory\n-export {\n-    CucumberAdapter,\n-    adapterFactory,\n-\n-    After,\n-    AfterAll,\n-    AfterStep,\n-\n-    Before,\n-    BeforeAll,\n-    BeforeStep,\n-\n-    Given,\n-    When,\n-    Then,\n-\n-    DataTable,\n-\n-    World,\n-\n-    setDefaultTimeout,\n-    setDefinitionFunctionWrapper,\n-    setWorldConstructor,\n-    defineParameterType,\n-    defineStep,\n-\n-    publishCucumberReport\n-}\n+export * from '@cucumber/cucumber'\n \n declare global {\n     namespace WebdriverIO {\n\ndiff --git a/website/docs/Frameworks.md b/website/docs/Frameworks.md\nindex a0ec26b8935..8a8093e3667 100644\n--- a/website/docs/Frameworks.md\n+++ b/website/docs/Frameworks.md\n@@ -480,7 +480,7 @@ import { Given, When, Then } from '@cucumber/cucumber'\n Now, if you use Cucumber already for other types of tests unrelated to WebdriverIO for which you use a specific version you need to import these helpers in your e2e tests from the WebdriverIO Cucumber package, e.g.:\n \n ```js\n-import { Given, When, Then } from '@wdio/cucumber-framework'\n+import { Given, When, Then, world, context } from '@wdio/cucumber-framework'\n ```\n \n This ensures that you use the right helpers within the WebdriverIO framework and allows you to use an independent Cucumber version for other types of testing.\n",
    "test_patch": "diff --git a/packages/wdio-cucumber-framework/tests/adapter.test.ts b/packages/wdio-cucumber-framework/tests/adapter.test.ts\nindex 165270d539c..2742de893d8 100644\n--- a/packages/wdio-cucumber-framework/tests/adapter.test.ts\n+++ b/packages/wdio-cucumber-framework/tests/adapter.test.ts\n@@ -19,8 +19,11 @@ vi.mock('@wdio/utils')\n vi.mock('@wdio/utils/node')\n vi.mock('expect-webdriverio')\n vi.mock('@cucumber/cucumber', async (orig) => {\n-    const origMod = await orig() as typeof Cucumber\n+    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n+    const { default: _def, ...origMod } = await orig() as typeof Cucumber\n+\n     const mod = {\n+        ...origMod,\n         setDefinitionFunctionWrapper: vi.fn(),\n         BeforeAll: vi.fn(),\n         AfterAll: vi.fn(),\n@@ -106,6 +109,10 @@ describe('CucumberAdapter', () => {\n             .toContain('World')\n         expect(Object.keys(packageExports))\n             .toContain('DataTable')\n+        expect(Object.keys(packageExports))\n+            .toContain('world')\n+        expect(Object.keys(packageExports))\n+            .toContain('context')\n     })\n \n     it('can be initiated with tests', async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13906",
    "pr_id": 13906,
    "issue_id": 14046,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: WebDriver Bidi command \"browsingContext.navigate\" failed with error: no such frame after using reloadSession\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest 9\n\n### Node.js Version\n\nv20.15.1\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\nRunning in Windows/Chrome browser\r\nchrome version - 131.0.6778.205\n```\n\n\n### What happened?\n\nWe are required to use reloadSession command to clear out the cookies and other saved data in between the test.\r\nIt was working fine until WDIO8, post upgrading to WDIO 9 and when using BIDI specifically after a **reloadSession** call, browser.url call fails with the below error\r\n\r\nError: WebDriver Bidi command \"browsingContext.navigate\" failed with error: no such frame - Context C242C6328D7748295EDE32939A9DBFA3 not found\n\n### What is your expected behavior?\n\nBut when i enforce 'wdio:enforceWebDriverClassic': true, it works just fine, I face this issue only when using BIDI protocol\n\n### How to reproduce the bug.\n\n```\r\nawait browser.url('https://google.com');\r\nawait browser.pause(10000);//wait for it to load\r\n\r\nawait browser.reloadSession();\r\nawait browser.url('https://google.com');\r\nawait await browser.pause(10000);//wait for it to load\r\n```\r\n\r\nCode provided above is a simple example to reproduce the issue, below is my package.json\r\n\r\n`\"@wdio/cli\": \"^9.5.1\",\r\n        \"@wdio/devtools-service\": \"^8.40.2\",\r\n        \"@wdio/jasmine-framework\": \"^9.5.1\",\r\n        \"@wdio/local-runner\": \"^9.5.1\",\r\n        \"@wdio/spec-reporter\": \"^9.5.0\",`\n\n### Relevant log output\n\n```typescript\nError: WebDriver Bidi command \"browsingContext.navigate\" failed with error: no such frame - Context C242C6328D7748295EDE32939A9DBFA3 not found\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 297,
    "test_files_count": 7,
    "non_test_files_count": 22,
    "pr_changed_files": [
      "e2e/.eslintrc.json",
      "e2e/launch/aws.test.ts",
      "e2e/launch/reloadSession.test.ts",
      "packages/webdriver/src/index.ts",
      "packages/webdriverio/src/commands/browser/execute.ts",
      "packages/webdriverio/src/commands/browser/executeAsync.ts",
      "packages/webdriverio/src/commands/browser/mock.ts",
      "packages/webdriverio/src/commands/browser/newWindow.ts",
      "packages/webdriverio/src/commands/browser/reloadSession.ts",
      "packages/webdriverio/src/commands/browser/saveScreenshot.ts",
      "packages/webdriverio/src/commands/browser/setViewport.ts",
      "packages/webdriverio/src/commands/browser/switchFrame.ts",
      "packages/webdriverio/src/commands/browser/switchWindow.ts",
      "packages/webdriverio/src/commands/browser/url.ts",
      "packages/webdriverio/src/commands/element/getHTML.ts",
      "packages/webdriverio/src/index.ts",
      "packages/webdriverio/src/session/context.ts",
      "packages/webdriverio/src/session/dialog.ts",
      "packages/webdriverio/src/session/index.ts",
      "packages/webdriverio/src/session/networkManager.ts",
      "packages/webdriverio/src/session/polyfill.ts",
      "packages/webdriverio/src/session/session.ts",
      "packages/webdriverio/src/session/shadowRoot.ts",
      "packages/webdriverio/src/types.ts",
      "packages/webdriverio/src/utils/index.ts",
      "packages/webdriverio/tests/commands/browser/switchFrame.test.ts",
      "packages/webdriverio/tests/shadowRoot.test.ts",
      "packages/webdriverio/tests/utils.test.ts",
      "packages/webdriverio/tests/utils/index.test.ts"
    ],
    "pr_changed_test_files": [
      "e2e/.eslintrc.json",
      "e2e/launch/aws.test.ts",
      "e2e/launch/reloadSession.test.ts",
      "packages/webdriverio/tests/commands/browser/switchFrame.test.ts",
      "packages/webdriverio/tests/shadowRoot.test.ts",
      "packages/webdriverio/tests/utils.test.ts",
      "packages/webdriverio/tests/utils/index.test.ts"
    ],
    "base_commit": "78f4d0136268668aa39f0c3d5e6c9282f44f30b4",
    "head_commit": "34fc03dbd8ba9710d99458568c5993d82668c6dd",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13906",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13906",
    "dockerfile": "",
    "pr_merged_at": "2025-01-09T19:41:35.000Z",
    "patch": "diff --git a/packages/webdriver/src/index.ts b/packages/webdriver/src/index.ts\nindex 781de0cc909..8b1367f21b0 100644\n--- a/packages/webdriver/src/index.ts\n+++ b/packages/webdriver/src/index.ts\n@@ -209,6 +209,7 @@ export default class WebDriver {\n         if (isBidi(instance.capabilities || {})) {\n             const bidiReqOpts = instance.options.strictSSL ? {} : { rejectUnauthorized: false }\n             await instance._bidiHandler?.reconnect(newSessionCapabilities.webSocketUrl as unknown as string, bidiReqOpts)\n+            instance._bidiHandler?.socket.on('message', parseBidiMessage.bind(instance))\n         }\n \n         return sessionId\n\ndiff --git a/packages/webdriverio/src/commands/browser/execute.ts b/packages/webdriverio/src/commands/browser/execute.ts\nindex 1d8383ee273..c5bf7f1eda7 100644\n--- a/packages/webdriverio/src/commands/browser/execute.ts\n+++ b/packages/webdriverio/src/commands/browser/execute.ts\n@@ -4,9 +4,9 @@ import type { remote } from 'webdriver'\n import { verifyArgsAndStripIfElement } from '../../utils/index.js'\n import { LocalValue } from '../../utils/bidi/value.js'\n import { parseScriptResult } from '../../utils/bidi/index.js'\n-import { getContextManager } from '../../context.js'\n+import { getContextManager } from '../../session/context.js'\n import { SCRIPT_PREFIX, SCRIPT_SUFFIX } from '../constant.js'\n-import { NAME_POLYFILL } from '../../polyfill.js'\n+import { NAME_POLYFILL } from '../../session/polyfill.js'\n \n /**\n  *\n\ndiff --git a/packages/webdriverio/src/commands/browser/executeAsync.ts b/packages/webdriverio/src/commands/browser/executeAsync.ts\nindex 27b47329b1a..8182002f00f 100644\n--- a/packages/webdriverio/src/commands/browser/executeAsync.ts\n+++ b/packages/webdriverio/src/commands/browser/executeAsync.ts\n@@ -4,8 +4,8 @@ import type { remote } from 'webdriver'\n import { verifyArgsAndStripIfElement } from '../../utils/index.js'\n import { LocalValue } from '../../utils/bidi/value.js'\n import { parseScriptResult } from '../../utils/bidi/index.js'\n-import { getContextManager } from '../../context.js'\n-import { NAME_POLYFILL } from '../../polyfill.js'\n+import { getContextManager } from '../../session/context.js'\n+import { NAME_POLYFILL } from '../../session/polyfill.js'\n \n /**\n  * :::warning\n\ndiff --git a/packages/webdriverio/src/commands/browser/mock.ts b/packages/webdriverio/src/commands/browser/mock.ts\nindex f1ab44394f2..dcd6890d716 100644\n--- a/packages/webdriverio/src/commands/browser/mock.ts\n+++ b/packages/webdriverio/src/commands/browser/mock.ts\n@@ -2,7 +2,7 @@ import { getBrowserObject } from '@wdio/utils'\n \n import type { MockFilterOptions } from '../../utils/interception/types.js'\n import WebDriverInterception from '../../utils/interception/index.js'\n-import { getContextManager } from '../../context.js'\n+import { getContextManager } from '../../session/context.js'\n \n export const SESSION_MOCKS: Record<string, Set<WebDriverInterception>> = {}\n \n\ndiff --git a/packages/webdriverio/src/commands/browser/newWindow.ts b/packages/webdriverio/src/commands/browser/newWindow.ts\nindex 9bd4f06d7ed..6cc9cddc8fa 100644\n--- a/packages/webdriverio/src/commands/browser/newWindow.ts\n+++ b/packages/webdriverio/src/commands/browser/newWindow.ts\n@@ -1,7 +1,7 @@\n import { sleep } from '@wdio/utils'\n \n import newWindowHelper from '../../scripts/newWindow.js'\n-import { getContextManager } from '../../context.js'\n+import { getContextManager } from '../../session/context.js'\n import type { NewWindowOptions } from '../../types.js'\n import logger from '@wdio/logger'\n const log = logger('webdriverio:newWindow')\n\ndiff --git a/packages/webdriverio/src/commands/browser/reloadSession.ts b/packages/webdriverio/src/commands/browser/reloadSession.ts\nindex d2f185dcba9..3c4c5ed812c 100644\n--- a/packages/webdriverio/src/commands/browser/reloadSession.ts\n+++ b/packages/webdriverio/src/commands/browser/reloadSession.ts\n@@ -1,6 +1,8 @@\n import logger from '@wdio/logger'\n import type { Options } from '@wdio/types'\n \n+import { registerSessionManager } from '../../session/index.js'\n+\n const log = logger('webdriverio')\n \n /**\n@@ -82,6 +84,7 @@ export async function reloadSession (this: WebdriverIO.Browser, newCapabilities?\n \n     const ProtocolDriver = (await import(/* @vite-ignore */this.options.automationProtocol!)).default\n     await ProtocolDriver.reloadSession(this, newCapabilities)\n+    await registerSessionManager(this)\n \n     const options = this.options as Options.Testrunner\n     if (Array.isArray(options.onReload) && options.onReload.length) {\n\ndiff --git a/packages/webdriverio/src/commands/browser/saveScreenshot.ts b/packages/webdriverio/src/commands/browser/saveScreenshot.ts\nindex 1139b5dc1ba..0cde86ddbc8 100644\n--- a/packages/webdriverio/src/commands/browser/saveScreenshot.ts\n+++ b/packages/webdriverio/src/commands/browser/saveScreenshot.ts\n@@ -1,7 +1,7 @@\n import fs from 'node:fs'\n import { getBrowserObject } from '@wdio/utils'\n \n-import { getContextManager } from '../../context.js'\n+import { getContextManager } from '../../session/context.js'\n import { getAbsoluteFilepath, assertDirectoryExists } from '../../utils/index.js'\n \n /**\n\ndiff --git a/packages/webdriverio/src/commands/browser/setViewport.ts b/packages/webdriverio/src/commands/browser/setViewport.ts\nindex f138288dfc3..686e28d8a0a 100644\n--- a/packages/webdriverio/src/commands/browser/setViewport.ts\n+++ b/packages/webdriverio/src/commands/browser/setViewport.ts\n@@ -1,5 +1,5 @@\n /// <reference path=\"../../types.ts\" />\n-import { getContextManager } from '../../context.js'\n+import { getContextManager } from '../../session/context.js'\n \n const minWindowSize = 0\n const maxWindowSize = Number.MAX_SAFE_INTEGER\n\ndiff --git a/packages/webdriverio/src/commands/browser/switchFrame.ts b/packages/webdriverio/src/commands/browser/switchFrame.ts\nindex 8af205e33fc..160f76de692 100644\n--- a/packages/webdriverio/src/commands/browser/switchFrame.ts\n+++ b/packages/webdriverio/src/commands/browser/switchFrame.ts\n@@ -2,7 +2,7 @@ import logger from '@wdio/logger'\n import { ELEMENT_KEY, type local, type remote } from 'webdriver'\n import type { ElementReference } from '@wdio/protocols'\n \n-import { getContextManager } from '../../context.js'\n+import { getContextManager } from '../../session/context.js'\n import { LocalValue } from '../../utils/bidi/value.js'\n import { parseScriptResult } from '../../utils/bidi/index.js'\n import { SCRIPT_PREFIX, SCRIPT_SUFFIX } from '../constant.js'\n@@ -302,7 +302,7 @@ export async function switchFrame (\n \n     throw new Error(\n         `Invalid type for context parameter: ${typeof context}, expected one of number, string or null. ` +\n-        'Check out our docs: https://webdriver.io/docs/api/browser/switchToFrame.html'\n+        'Check out our docs: https://webdriver.io/docs/api/browser/switchFrame.html'\n     )\n }\n \n\ndiff --git a/packages/webdriverio/src/commands/browser/switchWindow.ts b/packages/webdriverio/src/commands/browser/switchWindow.ts\nindex 6f7af93ed0a..fc0963f52ac 100644\n--- a/packages/webdriverio/src/commands/browser/switchWindow.ts\n+++ b/packages/webdriverio/src/commands/browser/switchWindow.ts\n@@ -1,4 +1,4 @@\n-import { getContextManager } from '../../context.js'\n+import { getContextManager } from '../../session/context.js'\n \n /**\n  *\n\ndiff --git a/packages/webdriverio/src/commands/browser/url.ts b/packages/webdriverio/src/commands/browser/url.ts\nindex 003b325ca4f..d578c439ce2 100644\n--- a/packages/webdriverio/src/commands/browser/url.ts\n+++ b/packages/webdriverio/src/commands/browser/url.ts\n@@ -1,6 +1,6 @@\n import { validateUrl } from '../../utils/index.js'\n-import { getNetworkManager } from '../../networkManager.js'\n-import { getContextManager } from '../../context.js'\n+import { getNetworkManager } from '../../session/networkManager.js'\n+import { getContextManager } from '../../session/context.js'\n import type { InitScript } from './addInitScript.js'\n \n type WaitState = 'none' | 'interactive' | 'networkIdle' | 'complete'\n@@ -207,6 +207,7 @@ export async function url (\n              */\n             {\n                 interval: 1,\n+                timeoutMsg: `Navigation to '${path}' timed out as no request payload was received`\n             }\n         )\n         return request\n\ndiff --git a/packages/webdriverio/src/commands/element/getHTML.ts b/packages/webdriverio/src/commands/element/getHTML.ts\nindex f870a8090dd..036da82214b 100644\n--- a/packages/webdriverio/src/commands/element/getHTML.ts\n+++ b/packages/webdriverio/src/commands/element/getHTML.ts\n@@ -3,8 +3,8 @@ import type { CheerioAPI } from 'cheerio'\n import { prettify as prettifyFn } from 'htmlfy'\n \n import { getBrowserObject } from '@wdio/utils'\n-import { getShadowRootManager } from '../../shadowRoot.js'\n-import { getContextManager } from '../../context.js'\n+import { getShadowRootManager } from '../../session/shadowRoot.js'\n+import { getContextManager } from '../../session/context.js'\n import getHTMLScript from '../../scripts/getHTML.js'\n import getHTMLShadowScript from '../../scripts/getHTMLShadow.js'\n \n\ndiff --git a/packages/webdriverio/src/index.ts b/packages/webdriverio/src/index.ts\nindex 83af44af972..382a9a8c646 100644\n--- a/packages/webdriverio/src/index.ts\n+++ b/packages/webdriverio/src/index.ts\n@@ -13,11 +13,8 @@ import detectBackend from './utils/detectBackend.js'\n import { getProtocolDriver } from './utils/driver.js'\n import { WDIO_DEFAULTS, SupportedAutomationProtocols, Key as KeyConstant } from './constants.js'\n import { getPrototype, addLocatorStrategyHandler, isStub } from './utils/index.js'\n-import { getShadowRootManager } from './shadowRoot.js'\n-import { getNetworkManager } from './networkManager.js'\n-import { getDialogManager } from './dialog.js'\n-import { getContextManager } from './context.js'\n-import { getPolyfillManager } from './polyfill.js'\n+import { registerSessionManager } from './session/index.js'\n+\n import type { AttachOptions } from './types.js'\n import type * as elementCommands from './commands/element.js'\n \n@@ -83,13 +80,7 @@ export const remote = async function(\n     }\n \n     instance.addLocatorStrategy = addLocatorStrategyHandler(instance)\n-    await Promise.all([\n-        getPolyfillManager(instance).initialize(),\n-        getShadowRootManager(instance).initialize(),\n-        getNetworkManager(instance).initialize(),\n-        getDialogManager(instance).initialize(),\n-        getContextManager(instance).initialize()\n-    ])\n+    await registerSessionManager(instance)\n     return instance\n }\n \n@@ -115,16 +106,7 @@ export const attach = async function (attachOptions: AttachOptions): Promise<Web\n     ) as WebdriverIO.Browser\n \n     driver.addLocatorStrategy = addLocatorStrategyHandler(driver)\n-    // @ts-expect-error `bidiHandler` is a private property\n-    await driver._bidiHandler?.connect().then(() => (\n-        Promise.all([\n-            getPolyfillManager(driver).initialize(),\n-            getShadowRootManager(driver).initialize(),\n-            getNetworkManager(driver).initialize(),\n-            getDialogManager(driver).initialize(),\n-            getContextManager(driver).initialize()\n-        ])\n-    ))\n+    await registerSessionManager(driver)\n     return driver\n }\n \n\ndiff --git a/packages/webdriverio/src/context.ts b/packages/webdriverio/src/session/context.ts\nsimilarity index 51%\nrename from packages/webdriverio/src/context.ts\nrename to packages/webdriverio/src/session/context.ts\nindex 4060e5ee83b..b3a2b876b52 100644\n--- a/packages/webdriverio/src/context.ts\n+++ b/packages/webdriverio/src/session/context.ts\n@@ -1,18 +1,13 @@\n import logger from '@wdio/logger'\n-import { getMobileContext, getNativeContext } from './utils/mobile.js'\n \n-const contextManager = new Map<WebdriverIO.Browser, ContextManager>()\n+import { SessionManager } from './session.js'\n+import { getMobileContext, getNativeContext } from '../utils/mobile.js'\n+\n const log = logger('webdriverio:context')\n+const COMMANDS_REQUIRING_RESET = ['deleteSession', 'refresh', 'switchToParentFrame']\n \n export function getContextManager(browser: WebdriverIO.Browser) {\n-    const existingContextManager = contextManager.get(browser)\n-    if (existingContextManager) {\n-        return existingContextManager\n-    }\n-\n-    const newContext = new ContextManager(browser)\n-    contextManager.set(browser, newContext)\n-    return newContext\n+    return SessionManager.getSessionManager(browser, ContextManager)\n }\n \n /**\n@@ -20,13 +15,14 @@ export function getContextManager(browser: WebdriverIO.Browser) {\n  * require to be executed in a specific context. This class is responsible for keeping track\n  * of the current context and providing the current context the user is in.\n  */\n-export class ContextManager {\n+export class ContextManager extends SessionManager {\n     #browser: WebdriverIO.Browser\n     #currentContext?: string\n     #mobileContext?: string\n     #isNativeContext: boolean\n \n     constructor(browser: WebdriverIO.Browser) {\n+        super(browser, ContextManager.name)\n         this.#browser = browser\n         const capabilities = this.#browser.capabilities\n         this.#isNativeContext = getNativeContext({ capabilities, isMobile: this.#browser.isMobile })\n@@ -40,18 +36,9 @@ export class ContextManager {\n          * Listens for the 'closeWindow' browser command to handle context changes.\n          * (classic + bidi)\n          */\n-        this.#browser.on('result', (event) => {\n-            /**\n-             * the `closeWindow` command returns:\n-             *   > the result of running the remote end steps for the Get Window Handles command, with session, URL variables and parameters.\n-             */\n-            if (event.command === 'closeWindow') {\n-                this.#currentContext = (event.result as { value: string[] }).value[0]\n-                return this.#browser.switchToWindow(this.#currentContext)\n-            }\n-        })\n+        this.#browser.on('result', this.#onCommandResultBidiAndClassic.bind(this))\n \n-        if (!this.#isEnabled()) {\n+        if (!this.isEnabled()) {\n             return\n         }\n \n@@ -59,67 +46,84 @@ export class ContextManager {\n          * Listens for the 'switchToWindow' browser command to handle context changes.\n          * Updates the browsingContext with the context passed in 'switchToWindow'.\n          */\n-        this.#browser.on('command', (event) => {\n-            /**\n-             * update frame context if user switches using 'switchToWindow'\n-             * which is WebDriver Classic only\n-             */\n-            if (event.command === 'switchToWindow') {\n-                this.setCurrentContext((event.body as { handle: string }).handle)\n-            }\n-\n-            /**\n-             * reset current context if:\n-             *   - user uses 'switchToParentFrame' which only impacts WebDriver Classic commands\n-             *   - user uses 'refresh' which resets the context in Classic and so should in Bidi\n-             */\n-            if (\n-                event.command === 'switchToParentFrame' ||\n-                event.command === 'refresh'\n-            ) {\n-                this.#currentContext = undefined\n-            }\n-\n-            /**\n-             * Keep track of the context to which we switch\n-             */\n-            if (this.#browser.isMobile && event.command === 'switchContext') {\n-                this.#mobileContext = (event.body as { name: string }).name\n-            }\n-        })\n+        this.#browser.on('command', this.#onCommand.bind(this))\n \n         /**\n          * Listens for the 'closeWindow' browser command to handle context changes.\n          */\n-        this.#browser.on('result', (event) => {\n-\n-            if (this.#browser.isMobile) {\n-                if (event.command === 'getContext') {\n-                    this.setCurrentContext((event.result as { value: string }).value)\n-                }\n-                if (\n-                    event.command === 'switchContext' &&\n-                    (event.result as { value: string | null }).value === null &&\n-                    this.#mobileContext\n-                ) {\n-                    this.setCurrentContext(this.#mobileContext)\n-                }\n-            }\n-        })\n+        if (this.#browser.isMobile) {\n+            this.#browser.on('result', this.#onCommandResultMobile.bind(this))\n+        }\n     }\n \n-    /**\n-     * Only run this session helper if BiDi is enabled and we're not in unit tests.\n-     */\n-    #isEnabled () {\n-        return !process.env.WDIO_UNIT_TESTS && (this.#browser.isBidi || this.#browser.isMobile)\n+    removeListeners(): void {\n+        super.removeListeners()\n+        this.#browser.off('result', this.#onCommandResultBidiAndClassic.bind(this))\n+        this.#browser.off('command', this.#onCommand.bind(this))\n+        if (this.#browser.isMobile) {\n+            this.#browser.off('result', this.#onCommandResultMobile.bind(this))\n+        }\n+    }\n+\n+    #onCommandResultBidiAndClassic(event: { command: string, result: unknown }) {\n+        /**\n+         * the `closeWindow` command returns:\n+         *   > the result of running the remote end steps for the Get Window Handles command, with session, URL variables and parameters.\n+         */\n+        if (event.command === 'closeWindow') {\n+            this.#currentContext = (event.result as { value: string[] }).value[0]\n+            return this.#browser.switchToWindow(this.#currentContext)\n+        }\n+    }\n+\n+    #onCommand(event: { command: string, body: unknown }) {\n+        /**\n+         * update frame context if user switches using 'switchToWindow'\n+         * which is WebDriver Classic only\n+         */\n+        if (event.command === 'switchToWindow') {\n+            this.setCurrentContext((event.body as { handle: string }).handle)\n+        }\n+\n+        /**\n+         * reset current context if:\n+         *   - user uses 'switchToParentFrame' which only impacts WebDriver Classic commands\n+         *   - user uses 'refresh' which resets the context in Classic and so should in Bidi\n+         *   - user uses 'reload' to reload the session\n+         */\n+        if (COMMANDS_REQUIRING_RESET.includes(event.command)) {\n+            this.#currentContext = undefined\n+        }\n+\n+        /**\n+         * Keep track of the context to which we switch\n+         */\n+        if (this.#browser.isMobile && event.command === 'switchContext') {\n+            this.#mobileContext = (event.body as { name: string }).name\n+        }\n+    }\n+\n+    #onCommandResultMobile(event: { command: string, result: unknown }) {\n+        if (event.command === 'getContext') {\n+            this.setCurrentContext((event.result as { value: string }).value)\n+        }\n+        if (\n+            event.command === 'switchContext' &&\n+            (event.result as { value: string | null }).value === null &&\n+            this.#mobileContext\n+        ) {\n+            this.setCurrentContext(this.#mobileContext)\n+        }\n     }\n \n     /**\n      * set context at the start of the session\n      */\n     async initialize () {\n-        if (!this.#isEnabled()) {\n+        /**\n+         * don't run this in unit tests\n+         */\n+        if (process.env.WDIO_UNIT_TESTS) {\n             return ''\n         }\n \n\ndiff --git a/packages/webdriverio/src/dialog.ts b/packages/webdriverio/src/session/dialog.ts\nsimilarity index 86%\nrename from packages/webdriverio/src/dialog.ts\nrename to packages/webdriverio/src/session/dialog.ts\nindex 06285063a70..55e05a4b878 100644\n--- a/packages/webdriverio/src/dialog.ts\n+++ b/packages/webdriverio/src/session/dialog.ts\n@@ -1,16 +1,8 @@\n import { type local } from 'webdriver'\n-\n-const dialogManager = new Map<WebdriverIO.Browser, DialogManager>()\n+import { SessionManager } from './session.js'\n \n export function getDialogManager(browser: WebdriverIO.Browser) {\n-    const existingDialogManager = dialogManager.get(browser)\n-    if (existingDialogManager) {\n-        return existingDialogManager\n-    }\n-\n-    const newContext = new DialogManager(browser)\n-    dialogManager.set(browser, newContext)\n-    return newContext\n+    return SessionManager.getSessionManager(browser, DialogManager)\n }\n \n /**\n@@ -18,18 +10,19 @@ export function getDialogManager(browser: WebdriverIO.Browser) {\n  * It allows to do deep element lookups and pierce into shadow DOMs across\n  * all components of a page.\n  */\n-export class DialogManager {\n+export class DialogManager extends SessionManager {\n     #browser: WebdriverIO.Browser\n     #initialize: Promise<boolean>\n     #autoHandleDialog = true\n \n     constructor(browser: WebdriverIO.Browser) {\n+        super(browser, DialogManager.name)\n         this.#browser = browser\n \n         /**\n          * don't run setup when Bidi is not supported or running unit tests\n          */\n-        if (!browser.isBidi || process.env.WDIO_UNIT_TESTS || browser.options?.automationProtocol !== 'webdriver') {\n+        if (!this.isEnabled()) {\n             this.#initialize = Promise.resolve(true)\n             return\n         }\n@@ -47,6 +40,13 @@ export class DialogManager {\n         this.#browser.on('browsingContext.userPromptOpened', this.#handleUserPrompt.bind(this))\n     }\n \n+    removeListeners(): void {\n+        super.removeListeners()\n+        this.#browser.off('browsingContext.userPromptOpened', this.#handleUserPrompt.bind(this))\n+        this.#browser.removeAllListeners('_dialogListenerRegistered')\n+        this.#browser.removeAllListeners('_dialogListenerRemoved')\n+    }\n+\n     async initialize () {\n         return this.#initialize\n     }\n\ndiff --git a/packages/webdriverio/src/session/index.ts b/packages/webdriverio/src/session/index.ts\nnew file mode 100644\nindex 00000000000..9c8a599d821\n--- /dev/null\n+++ b/packages/webdriverio/src/session/index.ts\n@@ -0,0 +1,18 @@\n+import { getPolyfillManager } from './polyfill.js'\n+import { getShadowRootManager } from './shadowRoot.js'\n+import { getNetworkManager } from './networkManager.js'\n+import { getDialogManager } from './dialog.js'\n+import { getContextManager } from './context.js'\n+\n+/**\n+ * register all session relevant singletons on the instance\n+ */\n+export function registerSessionManager (instance: WebdriverIO.Browser) {\n+    return Promise.all([\n+        getPolyfillManager(instance).initialize(),\n+        getShadowRootManager(instance).initialize(),\n+        getNetworkManager(instance).initialize(),\n+        getDialogManager(instance).initialize(),\n+        getContextManager(instance).initialize()\n+    ])\n+}\n\ndiff --git a/packages/webdriverio/src/networkManager.ts b/packages/webdriverio/src/session/networkManager.ts\nsimilarity index 92%\nrename from packages/webdriverio/src/networkManager.ts\nrename to packages/webdriverio/src/session/networkManager.ts\nindex 430c7755da5..ba38b4afd76 100644\n--- a/packages/webdriverio/src/networkManager.ts\n+++ b/packages/webdriverio/src/session/networkManager.ts\n@@ -1,16 +1,8 @@\n import { type local } from 'webdriver'\n-\n-export const networkManager = new Map<WebdriverIO.Browser, NetworkManager>()\n+import { SessionManager } from './session.js'\n \n export function getNetworkManager(browser: WebdriverIO.Browser) {\n-    const existingNetworkManager = networkManager.get(browser)\n-    if (existingNetworkManager) {\n-        return existingNetworkManager\n-    }\n-\n-    const newContext = new NetworkManager(browser)\n-    networkManager.set(browser, newContext)\n-    return newContext\n+    return SessionManager.getSessionManager(browser, NetworkManager)\n }\n \n type Context = string\n@@ -22,19 +14,20 @@ const SUPPORTED_NAVIGATION_PROTOCOLS = ['http', 'https', 'data', 'file']\n  * It allows to do deep element lookups and pierce into shadow DOMs across\n  * all components of a page.\n  */\n-export class NetworkManager {\n+export class NetworkManager extends SessionManager {\n     #browser: WebdriverIO.Browser\n     #initialize: Promise<boolean>\n     #requests = new Map<Context, WebdriverIO.Request>()\n     #lastNetworkId?: string\n \n     constructor(browser: WebdriverIO.Browser) {\n+        super(browser, NetworkManager.name)\n         this.#browser = browser\n \n         /**\n          * don't run setup when Bidi is not supported or running unit tests\n          */\n-        if (!browser.isBidi || process.env.WDIO_UNIT_TESTS || browser.options?.automationProtocol !== 'webdriver') {\n+        if (!this.isEnabled()) {\n             this.#initialize = Promise.resolve(true)\n             return\n         }\n@@ -56,6 +49,14 @@ export class NetworkManager {\n         this.#browser.on('network.fetchError', this.#fetchError.bind(this))\n     }\n \n+    removeListeners(): void {\n+        super.removeListeners()\n+        this.#browser.off('browsingContext.navigationStarted', this.#navigationStarted.bind(this))\n+        this.#browser.off('network.responseCompleted', this.#responseCompleted.bind(this))\n+        this.#browser.off('network.beforeRequestSent', this.#beforeRequestSent.bind(this))\n+        this.#browser.off('network.fetchError', this.#fetchError.bind(this))\n+    }\n+\n     async initialize () {\n         return this.#initialize\n     }\n\ndiff --git a/packages/webdriverio/src/polyfill.ts b/packages/webdriverio/src/session/polyfill.ts\nsimilarity index 79%\nrename from packages/webdriverio/src/polyfill.ts\nrename to packages/webdriverio/src/session/polyfill.ts\nindex 412989aa830..f7fa982e23c 100644\n--- a/packages/webdriverio/src/polyfill.ts\n+++ b/packages/webdriverio/src/session/polyfill.ts\n@@ -1,6 +1,11 @@\n import logger from '@wdio/logger'\n \n-const polyfillManager = new Map<WebdriverIO.Browser, PolyfillManager>()\n+import { SessionManager } from './session.js'\n+\n+export function getPolyfillManager(browser: WebdriverIO.Browser) {\n+    return SessionManager.getSessionManager(browser, PolyfillManager)\n+}\n+\n const log = logger('webdriverio:PolyfillManager')\n \n export const NAME_POLYFILL = (\n@@ -10,28 +15,19 @@ export const NAME_POLYFILL = (\n     '__globalThis.__name = __name;'\n )\n \n-export function getPolyfillManager(browser: WebdriverIO.Browser) {\n-    const existingPolyfillManager = polyfillManager.get(browser)\n-    if (existingPolyfillManager) {\n-        return existingPolyfillManager\n-    }\n-\n-    const newContext = new PolyfillManager(browser)\n-    polyfillManager.set(browser, newContext)\n-    return newContext\n-}\n-\n /**\n  * This class is responsible for setting polyfill scripts in the browser.\n  */\n-export class PolyfillManager {\n+export class PolyfillManager extends SessionManager {\n     #initialize: Promise<boolean>\n \n     constructor(browser: WebdriverIO.Browser) {\n+        super(browser, PolyfillManager.name)\n+\n         /**\n          * don't run setup when Bidi is not supported or running unit tests\n          */\n-        if (!browser.isBidi || process.env.WDIO_UNIT_TESTS || browser.options?.automationProtocol !== 'webdriver') {\n+        if (!this.isEnabled()) {\n             this.#initialize = Promise.resolve(true)\n             return\n         }\n\ndiff --git a/packages/webdriverio/src/session/session.ts b/packages/webdriverio/src/session/session.ts\nnew file mode 100644\nindex 00000000000..910af8bb3c9\n--- /dev/null\n+++ b/packages/webdriverio/src/session/session.ts\n@@ -0,0 +1,69 @@\n+const sessionManager = new Map<string, Map<WebdriverIO.Browser, SessionManager>>()\n+\n+export class SessionManager {\n+    #browser: WebdriverIO.Browser\n+    #scope: string\n+\n+    /**\n+     * SessionManager constructor\n+     * Logic in here should be executed for all session singletons, e.g. remove instance\n+     * of itself when a session was deleted.\n+     * @param browser WebdriverIO.Browser\n+     * @param scope   scope of the session manager, e.g. context, network etc.\n+     */\n+    constructor(browser: WebdriverIO.Browser, scope: string) {\n+        this.#browser = browser\n+        this.#browser.on('command', this.#onCommand.bind(this))\n+        this.#scope = scope\n+    }\n+\n+    #onCommand(ev: { command: string }) {\n+        if (ev.command === 'deleteSession') {\n+            const sessionManagerInstances = sessionManager.get(this.#scope)\n+            const sessionManagerInstance = sessionManagerInstances?.get(this.#browser)\n+            if (sessionManagerInstance && sessionManagerInstances) {\n+                sessionManagerInstance.removeListeners()\n+                sessionManagerInstances.delete(this.#browser)\n+            }\n+        }\n+    }\n+\n+    removeListeners() {\n+        this.#browser.off('result', this.#onCommand.bind(this))\n+    }\n+\n+    initialize(): unknown {\n+        return undefined as unknown\n+    }\n+\n+    /**\n+     * check if session manager should be enabled, if\n+     */\n+    isEnabled() {\n+        return (\n+            // we are in a Bidi session\n+            this.#browser.isBidi &&\n+            // we are not running unit tests\n+            !process.env.WDIO_UNIT_TESTS &&\n+            // we are running a WebDriver session\n+            this.#browser.options?.automationProtocol === 'webdriver'\n+        )\n+    }\n+\n+    static getSessionManager<T extends SessionManager>(browser: WebdriverIO.Browser, Manager: new (browser: WebdriverIO.Browser) => T): T {\n+        const scope = Manager.name\n+        let sessionManagerInstances = sessionManager.get(scope)\n+        if (!sessionManagerInstances) {\n+            sessionManagerInstances = new Map()\n+            sessionManager.set(scope, sessionManagerInstances)\n+        }\n+\n+        let sessionManagerInstance = sessionManagerInstances.get(browser)\n+        if (!sessionManagerInstance) {\n+            sessionManagerInstance = new Manager(browser)\n+            sessionManagerInstances.set(browser, sessionManagerInstance)\n+        }\n+\n+        return sessionManagerInstance as T\n+    }\n+}\n\ndiff --git a/packages/webdriverio/src/shadowRoot.ts b/packages/webdriverio/src/session/shadowRoot.ts\nsimilarity index 94%\nrename from packages/webdriverio/src/shadowRoot.ts\nrename to packages/webdriverio/src/session/shadowRoot.ts\nindex 09510eff53c..3e8cc33e443 100644\n--- a/packages/webdriverio/src/shadowRoot.ts\n+++ b/packages/webdriverio/src/session/shadowRoot.ts\n@@ -1,21 +1,15 @@\n import { type local } from 'webdriver'\n import logger from '@wdio/logger'\n \n-import customElementWrapper from './scripts/customElement.js'\n import type { remote } from 'webdriver'\n \n-const shadowRootManager = new Map<WebdriverIO.Browser, ShadowRootManager>()\n+import { SessionManager } from './session.js'\n+import customElementWrapper from '../scripts/customElement.js'\n+\n const log = logger('webdriverio:ShadowRootManager')\n \n export function getShadowRootManager(browser: WebdriverIO.Browser) {\n-    const existingShadowRootManager = shadowRootManager.get(browser)\n-    if (existingShadowRootManager) {\n-        return existingShadowRootManager\n-    }\n-\n-    const newContext = new ShadowRootManager(browser)\n-    shadowRootManager.set(browser, newContext)\n-    return newContext\n+    return SessionManager.getSessionManager(browser, ShadowRootManager)\n }\n \n /**\n@@ -23,7 +17,7 @@ export function getShadowRootManager(browser: WebdriverIO.Browser) {\n  * It allows to do deep element lookups and pierce into shadow DOMs across\n  * all components of a page.\n  */\n-export class ShadowRootManager {\n+export class ShadowRootManager extends SessionManager {\n     #browser: WebdriverIO.Browser\n     #initialize: Promise<boolean>\n     #shadowRoots = new Map<string, ShadowRootTree>()\n@@ -31,12 +25,13 @@ export class ShadowRootManager {\n     #frameDepth = 0\n \n     constructor(browser: WebdriverIO.Browser) {\n+        super(browser, ShadowRootManager.name)\n         this.#browser = browser\n \n         /**\n          * don't run setup when Bidi is not supported or running unit tests\n          */\n-        if (!browser.isBidi || process.env.WDIO_UNIT_TESTS || browser.options?.automationProtocol !== 'webdriver') {\n+        if (!this.isEnabled()) {\n             this.#initialize = Promise.resolve(true)\n             return\n         }\n@@ -50,11 +45,18 @@ export class ShadowRootManager {\n         this.#browser.on('log.entryAdded', this.handleLogEntry.bind(this))\n         this.#browser.on('result', this.#commandResultHandler.bind(this))\n         this.#browser.on('bidiCommand', this.#handleBidiCommand.bind(this))\n-        browser.scriptAddPreloadScript({\n+        this.#browser.scriptAddPreloadScript({\n             functionDeclaration: customElementWrapper.toString()\n         })\n     }\n \n+    removeListeners(): void {\n+        super.removeListeners()\n+        this.#browser.off('log.entryAdded', this.handleLogEntry.bind(this))\n+        this.#browser.off('result', this.#commandResultHandler.bind(this))\n+        this.#browser.off('bidiCommand', this.#handleBidiCommand.bind(this))\n+    }\n+\n     async initialize () {\n         return this.#initialize\n     }\n\ndiff --git a/packages/webdriverio/src/types.ts b/packages/webdriverio/src/types.ts\nindex d1bf75c2e67..3ef034c6dc3 100644\n--- a/packages/webdriverio/src/types.ts\n+++ b/packages/webdriverio/src/types.ts\n@@ -5,7 +5,7 @@ import type { Capabilities, Options, ThenArg } from '@wdio/types'\n import type { ElementReference, ProtocolCommands } from '@wdio/protocols'\n import type { Browser as PuppeteerBrowser } from 'puppeteer-core'\n \n-import type { Dialog as DialogImport } from './dialog.js'\n+import type { Dialog as DialogImport } from './session/dialog.js'\n import type * as BrowserCommands from './commands/browser.js'\n import type * as ElementCommands from './commands/element.js'\n import type { Button, ButtonNames } from './utils/actions/pointer.js'\n\ndiff --git a/packages/webdriverio/src/utils/index.ts b/packages/webdriverio/src/utils/index.ts\nindex 6fb09ac2dbc..8ef406bbb78 100644\n--- a/packages/webdriverio/src/utils/index.ts\n+++ b/packages/webdriverio/src/utils/index.ts\n@@ -17,8 +17,8 @@ import elementContains from '../scripts/elementContains.js'\n import querySelectorAllDeep from './thirdParty/querySelectorShadowDom.js'\n import { DEEP_SELECTOR, Key } from '../constants.js'\n import { findStrategy } from './findStrategy.js'\n-import { getShadowRootManager, type ShadowRootManager } from '../shadowRoot.js'\n-import { getContextManager } from '../context.js'\n+import { getShadowRootManager, type ShadowRootManager } from '../session/shadowRoot.js'\n+import { getContextManager } from '../session/context.js'\n import type { ElementFunction, Selector, ParsedCSSValue, CustomLocatorReturnValue } from '../types.js'\n import type { CustomStrategyReference, ExtendedElementReference } from '../types.js'\n \n",
    "test_patch": "diff --git a/e2e/.eslintrc.json b/e2e/.eslintrc.json\ndeleted file mode 100644\nindex 18f1d6602e8..00000000000\n--- a/e2e/.eslintrc.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"plugins\": [\"wdio\"],\n-  \"env\": {\n-    \"mocha\": true,\n-    \"browser\": true\n-  },\n-  \"extends\": [\n-    \"eslint:recommended\",\n-    \"plugin:wdio/recommended\",\n-    \"../.eslintrc.cjs\"\n-  ]\n-}\n\ndiff --git a/e2e/launch/aws.test.ts b/e2e/launch/aws.test.ts\nindex c9136e85894..dd8ae8aef2e 100644\n--- a/e2e/launch/aws.test.ts\n+++ b/e2e/launch/aws.test.ts\n@@ -14,6 +14,7 @@ if (!projectArn) {\n }\n \n test('allow to attach to an existing session', async () => {\n+    return\n     const devicefarm = new AWS.DeviceFarm({ region: 'us-west-2' })\n     const testGridUrlResult = await devicefarm.createTestGridUrl({\n         projectArn,\n\ndiff --git a/e2e/reloadSession.test.ts b/e2e/launch/reloadSession.test.ts\nsimilarity index 73%\nrename from e2e/reloadSession.test.ts\nrename to e2e/launch/reloadSession.test.ts\nindex cd3210dd2c8..008f6d06a26 100644\n--- a/e2e/reloadSession.test.ts\n+++ b/e2e/launch/reloadSession.test.ts\n@@ -20,6 +20,12 @@ test('can reconnect to WebDriver Bidi session', async () => {\n \n     expect(typeof await browser.browsingContextGetTree({})).toBe('object')\n     await browser.reloadSession()\n+    console.log('\\n\\nRESTARTED\\n\\n')\n+\n     expect(typeof await browser.browsingContextGetTree({})).toBe('object')\n+    await browser.url('http://guinea-pig.webdriver.io')\n+    expect(await browser.getTitle()).toBe('WebdriverJS Testpage')\n+    const h1 = await browser.$('h1')\n+    expect(await h1.getText()).toBe('Test CSS Attributes')\n     await browser.deleteSession()\n })\n\ndiff --git a/packages/webdriverio/tests/commands/browser/switchFrame.test.ts b/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\nindex 248e08cf92a..25328653b91 100644\n--- a/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\n@@ -1,13 +1,13 @@\n import path from 'node:path'\n import { describe, it, vi, expect, beforeEach } from 'vitest'\n import { remote } from '../../../src/index.js'\n-import { getContextManager } from '../../../src/context.js'\n+import { getContextManager } from '../../../src/session/context.js'\n import { ELEMENT_KEY } from 'webdriver'\n \n let browser: WebdriverIO.Browser\n \n vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdio/logger')))\n-vi.mock('../../../src/context.ts', () => {\n+vi.mock('../../../src/session/context.ts', () => {\n     const manager = {\n         getCurrentContext: vi.fn().mockResolvedValue('5D4662C2B4465334DFD34239BA1E9E66'),\n         setCurrentContext: vi.fn(),\n@@ -16,7 +16,7 @@ vi.mock('../../../src/context.ts', () => {\n     return { getContextManager: () => manager }\n })\n \n-const contextManager = getContextManager({} as any)\n+const contextManager = getContextManager({ on: vi.fn() } as any)\n \n describe('switchFrame command', () => {\n     describe('non bidi', () => {\n@@ -130,7 +130,7 @@ describe('switchFrame command', () => {\n             elemExecute.mockResolvedValue({\n                 context: '5D4662C2B4465334DFD34239BA1E9E66'\n             })\n-            vi.spyOn(elem, 'waitForExist').mockResolvedValue({})\n+            vi.spyOn(elem, 'waitForExist').mockResolvedValue(true)\n \n             await browser.switchFrame(elem)\n             expect(contextManager.setCurrentContext).toBeCalledWith('5D4662C2B4465334DFD34239BA1E9E66')\n\ndiff --git a/packages/webdriverio/tests/shadowRoot.test.ts b/packages/webdriverio/tests/shadowRoot.test.ts\nindex 795ab3741bb..281474b4927 100644\n--- a/packages/webdriverio/tests/shadowRoot.test.ts\n+++ b/packages/webdriverio/tests/shadowRoot.test.ts\n@@ -1,6 +1,6 @@\n import { describe, it, vi, expect, beforeEach } from 'vitest'\n \n-import { getShadowRootManager, ShadowRootTree } from '../src/shadowRoot.js'\n+import { getShadowRootManager, ShadowRootTree } from '../src/session/shadowRoot.js'\n \n const defaultBrowser = {\n     sessionSubscribe: vi.fn().mockResolvedValue({}),\n@@ -31,7 +31,7 @@ describe('ShadowRootManager', () => {\n         process.env.WDIO_UNIT_TESTS = wid\n         expect(await manager.initialize()).toBe(true)\n         expect(browser.sessionSubscribe).toBeCalledTimes(1)\n-        expect(browser.on).toBeCalledTimes(3)\n+        expect(browser.on).toBeCalledTimes(4)\n         expect(browser.scriptAddPreloadScript).toBeCalledTimes(1)\n     })\n \n@@ -40,7 +40,7 @@ describe('ShadowRootManager', () => {\n         const manager = getShadowRootManager(browser)\n         expect(await manager.initialize()).toBe(true)\n         expect(browser.sessionSubscribe).toBeCalledTimes(0)\n-        expect(browser.on).toBeCalledTimes(0)\n+        expect(browser.on).toBeCalledTimes(1)\n         expect(browser.scriptAddPreloadScript).toBeCalledTimes(0)\n     })\n \n@@ -49,7 +49,7 @@ describe('ShadowRootManager', () => {\n         const manager = getShadowRootManager(browser)\n         expect(await manager.initialize()).toBe(true)\n         expect(browser.sessionSubscribe).toBeCalledTimes(0)\n-        expect(browser.on).toBeCalledTimes(0)\n+        expect(browser.on).toBeCalledTimes(1)\n         expect(browser.scriptAddPreloadScript).toBeCalledTimes(0)\n     })\n \n\ndiff --git a/packages/webdriverio/tests/utils.test.ts b/packages/webdriverio/tests/utils.test.ts\nindex 4240836887b..6c048b340fb 100644\n--- a/packages/webdriverio/tests/utils.test.ts\n+++ b/packages/webdriverio/tests/utils.test.ts\n@@ -165,7 +165,9 @@ describe('utils', () => {\n                 findElements: vi.fn(),\n                 findElement: vi.fn(),\n                 execute: vi.fn(),\n-                executeScript: vi.fn()\n+                executeScript: vi.fn(),\n+                on: vi.fn(),\n+                removeAllListeners: vi.fn()\n             } as unknown as WebdriverIO.Element\n         })\n \n\ndiff --git a/packages/webdriverio/tests/utils/index.test.ts b/packages/webdriverio/tests/utils/index.test.ts\nindex 075a19ab7ba..34af8b862da 100644\n--- a/packages/webdriverio/tests/utils/index.test.ts\n+++ b/packages/webdriverio/tests/utils/index.test.ts\n@@ -11,6 +11,7 @@ describe('findElement', () => {\n     it('should find element using JS function', async () => {\n         const elemRes = { [ELEMENT_KEY]: 'element-0' }\n         const browser: any = {\n+            on: vi.fn(),\n             elementId: 'source-elem',\n             executeScript: vi.fn().mockReturnValue(elemRes)\n         }\n@@ -21,6 +22,7 @@ describe('findElement', () => {\n     it('should find element using JS function with referenceId', async () => {\n         const elemRes = { [ELEMENT_KEY]: 'element-0' }\n         const browser: any = {\n+            on: vi.fn(),\n             elementId: 'source-elem',\n             executeScript: vi.fn().mockResolvedValue(elemRes)\n         }\n@@ -39,6 +41,7 @@ describe('findElement', () => {\n \n     it('should not find element using JS function with referenceId', async () => {\n         const browser: any = {\n+            on: vi.fn(),\n             elementId: 'source-elem',\n             executeScript: vi.fn().mockRejectedValue(new Error('stale element reference: element is not attached to the page document'))\n         }\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13904",
    "pr_id": 13904,
    "issue_id": 13836,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: AddCommand -> Command doesn't exist for all browser\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.0.8\n\n### Node.js Version\n\n22.9.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\nexport const mobileWebCapabilities = [\r\n    {\r\n        chromeBrowser: {\r\n            hostname: '127.0.0.1',\r\n            \"port\": 9515,\r\n            \"path\": \"/\",\r\n            capabilities: {\r\n                browserName: 'chrome',\r\n                'goog:chromeOptions': {\r\n                    args: ['--start-maximized']\r\n                },\r\n                'webdriver:options': {\r\n                    hostname: '127.0.0.1',\r\n                    port: 41325,\r\n                    path: '/'\r\n                }\r\n            }\r\n        },\r\n        androidDevice: {\r\n            hostname: '127.0.0.1',\r\n            port: 4723,\r\n            path: '/wd/hub',\r\n            capabilities: {\r\n                //Device 1\r\n                ...commonMobileCapabilities,\r\n                \"appium:systemPort\": 8200,\r\n            }\r\n        }\r\n    }\r\n]\n```\n\n\n### What happened?\n\nIf I use addCommand with multiple browser capabilities or at least one named browser, the addCommand is not applied to all browser.\r\n\r\nWith : \r\n```\r\nbefore(() => {\r\n    browser.addCommand('test', async function () {\r\n        console.log('test')\r\n    })\r\n})\r\n```\r\n\r\nCurrent behavior : \r\n- browser.test() -> Working\r\n- chromeBrowser.test() -> is not a function\r\n- androidDevice.test() -> is not a function\r\n\n\n### What is your expected behavior?\n\nThe command should be available for all browser so : \r\n- browser.test() -> Working\r\n- chromeBrowser.test() -> Working\r\n- androidDevice.test() -> Working\n\n### How to reproduce the bug.\n\n1) Use a capabilities with at least one named browser\r\n2) AddCommand on \"browser\" (not on the name of the browser from step 1)\r\n3) Use the new command chain to browser name from step 1\r\n\r\nIssue similar to [this old fixed issue](https://github.com/webdriverio/webdriverio/issues/3445) ?\n\n### Relevant log output\n\n```typescript\nandroidDevice.test() is not a function\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 273,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/webdriverio/src/index.ts",
      "packages/webdriverio/tests/addCommand.test.ts",
      "website/docs/CustomCommands.md"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/addCommand.test.ts"
    ],
    "base_commit": "5b4467245872092295ea947a039430288fd8b448",
    "head_commit": "3a357021470f6a50b038b2a444da51554d48f72c",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13904",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13904",
    "dockerfile": "",
    "pr_merged_at": "2024-11-22T19:12:19.000Z",
    "patch": "diff --git a/packages/webdriverio/src/index.ts b/packages/webdriverio/src/index.ts\nindex 713fe5976d2..f0f004e0004 100644\n--- a/packages/webdriverio/src/index.ts\n+++ b/packages/webdriverio/src/index.ts\n@@ -190,6 +190,10 @@ export const multiremote = async function (\n     if (!isStub(automationProtocol)) {\n         const origAddCommand = driver.addCommand.bind(driver)\n         driver.addCommand = (name: string, fn: (...args: any[]) => any, attachToElement) => {\n+            driver.instances.forEach(instance =>\n+                driver.getInstance(instance).addCommand(name, fn, attachToElement)\n+            )\n+\n             return origAddCommand(\n                 name,\n                 fn,\n\ndiff --git a/website/docs/CustomCommands.md b/website/docs/CustomCommands.md\nindex 04f208961f1..38209d7b1c2 100644\n--- a/website/docs/CustomCommands.md\n+++ b/website/docs/CustomCommands.md\n@@ -97,6 +97,48 @@ Be careful to not overload the `browser` scope with too many custom commands.\n \n We recommend defining custom logic in [page objects](pageobjects), so they are bound to a specific page.\n \n+### Multiremote\n+\n+`addCommand` works in a similar way for multiremote, except the new command will propagate down to the children instances. You have to be mindful when using `this` object since the multiremote `browser` and its children instances have different `this`.\n+\n+This example shows how to add a new command for multiremote.\n+\n+```js\n+import { multiremotebrowser } from '@wdio/globals'\n+\n+multiremotebrowser.addCommand('getUrlAndTitle', async function (this: WebdriverIO.MultiRemoteBrowser, customVar: any) {\n+    // `this` refers to:\n+    //      - MultiRemoteBrowser scope for browser\n+    //      - Browser scope for instances\n+    return {\n+        url: await this.getUrl(),\n+        title: await this.getTitle(),\n+        customVar: customVar\n+    }\n+})\n+\n+multiremotebrowser.getUrlAndTitle()\n+/*\n+{\n+    url: [ 'https://webdriver.io/', 'https://webdriver.io/' ],\n+    title: [\n+        'WebdriverIO · Next-gen browser and mobile automation test framework for Node.js | WebdriverIO',\n+        'WebdriverIO · Next-gen browser and mobile automation test framework for Node.js | WebdriverIO'\n+    ],\n+    customVar: undefined\n+}\n+*/\n+\n+multiremotebrowser.getInstance('browserA').getUrlAndTitle()\n+/*\n+{\n+    url: 'https://webdriver.io/',\n+    title: 'WebdriverIO · Next-gen browser and mobile automation test framework for Node.js | WebdriverIO',\n+    customVar: undefined\n+}\n+*/\n+```\n+\n ## Extend Type Definitions\n \n With TypeScript, it's easy to extend WebdriverIO interfaces. Add types to your custom commands like this:\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/addCommand.test.ts b/packages/webdriverio/tests/addCommand.test.ts\nindex 3d545c86653..e10a4644570 100644\n--- a/packages/webdriverio/tests/addCommand.test.ts\n+++ b/packages/webdriverio/tests/addCommand.test.ts\n@@ -17,6 +17,7 @@ const remoteConfig: Capabilities.WebdriverIOConfig = {\n declare global {\n     namespace WebdriverIO {\n         interface Browser {\n+            myCustomCommand: (arg: any) => Promise<void>\n             myOtherCustomCommand: (param: string) => Promise<{ param: string, commandResult: string }>\n         }\n \n@@ -348,10 +349,24 @@ describe('addCommand', () => {\n             })\n \n             expect(typeof browser.myCustomCommand).toBe('function')\n+            expect(typeof browser.getInstance('browserA').myCustomCommand).toBe('function')\n+            expect(typeof browser.getInstance('browserB').myCustomCommand).toBe('function')\n             // @ts-expect-error undefined custom command\n             const { param, commandResult } = await browser.myCustomCommand('barfoo')\n             expect(param).toBe('barfoo')\n             expect(commandResult).toEqual(['foobar', 'foobar'])\n+\n+            const resultA = await browser.getInstance('browserA').myCustomCommand('barfoo')\n+            // @ts-expect-error undefined custom command\n+            expect(resultA.param).toBe('barfoo')\n+            // @ts-expect-error undefined custom command\n+            expect(resultA.commandResult).toEqual('foobar')\n+\n+            const resultB = await browser.getInstance('browserB').myCustomCommand('barfoo')\n+            // @ts-expect-error undefined custom command\n+            expect(resultB.param).toBe('barfoo')\n+            // @ts-expect-error undefined custom command\n+            expect(resultB.commandResult).toEqual('foobar')\n         })\n \n         test('should allow to register custom commands to a single multiremote instance', async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13896",
    "pr_id": 13896,
    "issue_id": 13893,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: WebdriverIO V9 support with AWS Device Farm\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\n9.2.14\r\n\r\n### Node.js Version\r\n\r\n20.18.0\r\n\r\n### Mode\r\n\r\nStandalone Mode\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\n{\r\n  browserName: \"chrome\"\r\n}\r\n```\r\n\r\n\r\n### What happened?\r\n\r\nRunning my local webdriverIO script on AWS Device Farm Browser Testing using TestGridUrl by following AWS Device Farm Docs https://docs.aws.amazon.com/devicefarm/latest/testgrid/testing-frameworks-nodejs.html \r\n\r\nGetting error related to websocketURL running on 127.0.0.1:8080, not able to set websocketURL or disable it.\r\n\r\n\r\n### What is your expected behavior?\r\n\r\nAWS Device Farm Desktop Browser Session should be created and steps should have been performed without any errors on AWS Device Farm Desktop browser testing.\r\n\r\n### How to reproduce the bug.\r\n\r\nNode  -> 20.18.0\r\n\r\n1. npm init -y\r\n2. npm i @wdio/cli@latest @wdio/local-runner @wdio/mocha-framework aws-sdk\r\n3. Create a script file as mentioned in https://docs.aws.amazon.com/devicefarm/latest/testgrid/testing-frameworks-nodejs.html \r\n\r\n\r\n```\r\nconst webdriverio = require('webdriverio');\r\nconst AWS = require(\"aws-sdk\");\r\n\r\nvar PROJECT_ARN = process.env.TEST_GRID_PROJECT\r\nvar devicefarm = new AWS.DeviceFarm({ region: \"us-west-2\" });\r\n\r\n(async () => {\r\n    // Get a new signed WebDriver hub URL.\r\n    const testGridUrlResult = await devicefarm.createTestGridUrl({\r\n        projectArn: PROJECT_ARN,\r\n        expiresInSeconds: 600\r\n    }).promise();\r\n\r\n    console.log(\"Created url result:\", testGridUrlResult);\r\n    runExample(testGridUrlResult.url);\r\n\r\n})().catch((e) => console.error(e));\r\n\r\nvar runExample = async (urlString) => {\r\n    var url = new URL(urlString)\r\n\r\n    console.log(\"Starting a new remote driver\")\r\n    const browser = await webdriverio.remote({\r\n        logLevel: 'trace',\r\n        hostname: url.host,\r\n        path: url.pathname,\r\n        protocol: 'https',\r\n        port: 443,\r\n        connectionRetryTimeout: 180000,\r\n        capabilities: {\r\n            browserName: 'chrome',\r\n        }\r\n    })\r\n\r\n    await browser.url('https://aws.amazon.com/')\r\n\r\n    const title = await browser.getTitle()\r\n    console.log('Title was: ' + title)\r\n\r\n    await browser.deleteSession()\r\n}\r\n```\r\n4. Run the script \r\n\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\nnode:events:497\r\n      throw er; // Unhandled 'error' event\r\n      ^\r\n\r\nError: connect ECONNREFUSED 127.0.0.1:8080\r\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1607:16)\r\nEmitted 'error' event on WebSocket instance at:\r\n    at emitErrorAndClose (/Users/devansh/Desktop/testing-aws-device-farm-v2/node_modules/ws/lib/websocket.js:1041:13)\r\n    at ClientRequest.<anonymous> (/Users/devansh/Desktop/testing-aws-device-farm-v2/node_modules/ws/lib/websocket.js:881:5)\r\n    at ClientRequest.emit (node:events:519:28)\r\n    at ClientRequest.emit (node:domain:488:12)\r\n    at emitErrorEvent (node:_http_client:101:11)\r\n    at Socket.socketErrorListener (node:_http_client:504:5)\r\n    at Socket.emit (node:events:519:28)\r\n    at Socket.emit (node:domain:488:12)\r\n    at emitErrorNT (node:internal/streams/destroy:169:8)\r\n    at emitErrorCloseNT (node:internal/streams/destroy:128:3) {\r\n  errno: -61,\r\n  code: 'ECONNREFUSED',\r\n  syscall: 'connect',\r\n  address: '127.0.0.1',\r\n  port: 8080\r\n}\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 475,
    "test_files_count": 4,
    "non_test_files_count": 4,
    "pr_changed_files": [
      ".github/workflows/test-cloud.yml",
      "e2e/launch/aws.test.ts",
      "e2e/standalone/attach.test.ts",
      "e2e/vitest.config.ts",
      "package.json",
      "packages/webdriver/src/bidi/core.ts",
      "packages/webdriver/src/utils.ts",
      "pnpm-lock.yaml"
    ],
    "pr_changed_test_files": [
      ".github/workflows/test-cloud.yml",
      "e2e/launch/aws.test.ts",
      "e2e/standalone/attach.test.ts",
      "e2e/vitest.config.ts"
    ],
    "base_commit": "a5e135328dccabd39b98c55e4655ea8f948e0b22",
    "head_commit": "d660a3b5d3c04b0684bd1aae96ee588077180cfc",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13896",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13896",
    "dockerfile": "",
    "pr_merged_at": "2024-11-20T18:55:50.000Z",
    "patch": "diff --git a/package.json b/package.json\nindex 5c1ca8a73ff..8dc84f9a648 100644\n--- a/package.json\n+++ b/package.json\n@@ -51,10 +51,11 @@\n     \"test:smoke\": \"cd ./tests && node ./smoke.runner.js\",\n     \"test:e2e:testrunner\": \"cd ./e2e && npx wdio run ./wdio/wdio.conf.ts\",\n     \"test:e2e:multiremote\": \"cd ./e2e && npx wdio run ./wdio/wdio-multiremote.conf.ts\",\n-    \"test:e2e:standalone\": \"vitest --config ./e2e/vitest.config.ts --run\",\n+    \"test:e2e:standalone\": \"vitest --config ./e2e/vitest.config.ts --run standalone\",\n     \"test:e2e:webdriver\": \"cd ./e2e && npx wdio run ./wdio/wdio.local.conf.ts\",\n     \"test:e2e:classic\": \"cd ./e2e && npx wdio run ./wdio/wdio.classic.conf.ts\",\n     \"test:e2e:cloud\": \"cd ./e2e && npx wdio run ./wdio/wdio.sauce.conf.ts\",\n+    \"test:e2e:launch\": \"vitest --config ./e2e/vitest.config.ts --run launch\",\n     \"test:e2e\": \"run-s test:e2e:* \",\n     \"dev\": \"pnpm -r --filter=@wdio/compiler run build --watch\",\n     \"watch:docs\": \"pnpm docs:generate && cd website && pnpm i && pnpm start\",\n@@ -64,6 +65,7 @@\n   },\n   \"devDependencies\": {\n     \"@aws-sdk/client-cloudfront\": \"^3.624.0\",\n+    \"@aws-sdk/client-device-farm\": \"^3.693.0\",\n     \"@aws-sdk/client-s3\": \"^3.624.0\",\n     \"@aws-sdk/lib-storage\": \"^3.624.0\",\n     \"@octokit/rest\": \"^21.0.1\",\n\ndiff --git a/packages/webdriver/src/bidi/core.ts b/packages/webdriver/src/bidi/core.ts\nindex 49abd0ef0da..5c3dceded22 100644\n--- a/packages/webdriver/src/bidi/core.ts\n+++ b/packages/webdriver/src/bidi/core.ts\n@@ -14,12 +14,15 @@ const RESPONSE_TIMEOUT = 1000 * 60\n export class BidiCore {\n     #id = 0\n     #ws: WebSocket\n-    #isConnected = false\n-    #waitForConnected = Promise.resolve()\n+    #waitForConnected = Promise.resolve(false)\n     #webSocketUrl: string\n     #pendingCommands: Map<number, (value: CommandResponse) => void> = new Map()\n \n     client: Client | undefined\n+    /**\n+     * @private\n+     */\n+    private _isConnected = false\n \n     constructor (webSocketUrl: string, opts?: ClientOptions) {\n         this.#webSocketUrl = webSocketUrl\n@@ -34,14 +37,22 @@ export class BidiCore {\n          * Note: the value is defined in __mocks__/fetch.ts\n          */\n         if (process.env.WDIO_UNIT_TESTS) {\n+            this._isConnected = true\n             return\n         }\n \n-        this.#waitForConnected = new Promise<void>((resolve) => this.#ws.on('open', () => {\n-            log.info('Connected session to Bidi protocol')\n-            this.#isConnected = true\n-            resolve()\n-        }))\n+        this.#waitForConnected = new Promise<boolean>((resolve) => {\n+            this.#ws.on('open', () => {\n+                log.info('Connected session to Bidi protocol')\n+                this._isConnected = true\n+                resolve(this._isConnected)\n+            })\n+            this.#ws.on('error', (err) => {\n+                log.warn(`Couldn't connect to Bidi protocol: ${err.message}`)\n+                this._isConnected = false\n+                resolve(this._isConnected)\n+            })\n+        })\n         return this.#waitForConnected\n     }\n \n@@ -58,7 +69,7 @@ export class BidiCore {\n     }\n \n     get isConnected () {\n-        return this.#isConnected\n+        return this._isConnected\n     }\n \n     /**\n@@ -124,7 +135,7 @@ export class BidiCore {\n     }\n \n     public sendAsync (params: Omit<CommandData, 'id'>) {\n-        if (!this.#isConnected) {\n+        if (!this._isConnected) {\n             throw new Error('No connection to WebDriver Bidi was established')\n         }\n \n\ndiff --git a/packages/webdriver/src/utils.ts b/packages/webdriver/src/utils.ts\nindex 87a7515628e..82295dcda32 100644\n--- a/packages/webdriver/src/utils.ts\n+++ b/packages/webdriver/src/utils.ts\n@@ -262,7 +262,7 @@ export function getPrototype ({ isW3C, isChromium, isFirefox, isMobile, isSauce,\n  * @param  {Object} options   driver instance or option object containing these flags\n  * @return {Object}           prototype object\n  */\n-export function getEnvironmentVars({ isW3C, isMobile, isIOS, isAndroid, isFirefox, isSauce, isSeleniumStandalone, isBidi, isChromium }: Partial<SessionFlags>): PropertyDescriptorMap {\n+export function getEnvironmentVars({ isW3C, isMobile, isIOS, isAndroid, isFirefox, isSauce, isSeleniumStandalone, isChromium }: Partial<SessionFlags>): PropertyDescriptorMap {\n     return {\n         isW3C: { value: isW3C },\n         isMobile: { value: isMobile },\n@@ -271,7 +271,16 @@ export function getEnvironmentVars({ isW3C, isMobile, isIOS, isAndroid, isFirefo\n         isFirefox: { value: isFirefox },\n         isSauce: { value: isSauce },\n         isSeleniumStandalone: { value: isSeleniumStandalone },\n-        isBidi: { value: isBidi },\n+        isBidi: {\n+            /**\n+             * Return the value of this flag dynamically based on whether the\n+             * BidiHandler was able to connect to the `webSocketUrl` url provided\n+             * by the session response.\n+             */\n+            get: function (this: Client & { _bidiHandler?: BidiHandler }) {\n+                return Boolean(this._bidiHandler?.isConnected)\n+            }\n+        },\n         isChromium: { value: isChromium },\n     }\n }\n@@ -366,7 +375,7 @@ export function initiateBidi (socketUrl: string, strictSSL: boolean = true): Pro\n     socketUrl = socketUrl.replace('localhost', '127.0.0.1')\n     const bidiReqOpts = strictSSL ? {} : { rejectUnauthorized: false }\n     const handler = new BidiHandler(socketUrl, bidiReqOpts)\n-    handler.connect().then(() => log.info(`Connected to WebDriver Bidi interface at ${socketUrl}`))\n+    handler.connect().then((isConnected) => isConnected && log.info(`Connected to WebDriver Bidi interface at ${socketUrl}`))\n \n     return {\n         _bidiHandler: { value: handler },\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex 9fca3a93f46..b786903f487 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -11,6 +11,9 @@ importers:\n       '@aws-sdk/client-cloudfront':\n         specifier: ^3.624.0\n         version: 3.658.1\n+      '@aws-sdk/client-device-farm':\n+        specifier: ^3.693.0\n+        version: 3.693.0\n       '@aws-sdk/client-s3':\n         specifier: ^3.624.0\n         version: 3.658.1\n@@ -2246,6 +2249,10 @@ packages:\n     resolution: {integrity: sha512-v5bfHSHJ3LbTeWzxV1HReF0HuCwOZO4L5L1Esc5CSt8IX+pfTRR7i3iY7qTt5CfDsHQP4UEETrSEdKGwOl63YA==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/client-device-farm@3.693.0':\n+    resolution: {integrity: sha512-xdyS1ZESKZyHvtb8uOhWG7c+qN9b0+bfon+l/ZVZMDDKF9mvxZnxLFNc2+8tOnVOXot1iGYKOhmmOYZnY4hvqg==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/client-s3@3.658.1':\n     resolution: {integrity: sha512-rxYW7ONoh1y/SM292jt0TEH+LSiztoPCJxT3gst4S2o/85apFY3RxL8TrhOqzXoIeMu2LNzyN51Zygme6AbQAA==}\n     engines: {node: '>=16.0.0'}\n@@ -2256,50 +2263,100 @@ packages:\n     peerDependencies:\n       '@aws-sdk/client-sts': ^3.658.1\n \n+  '@aws-sdk/client-sso-oidc@3.693.0':\n+    resolution: {integrity: sha512-UEDbYlYtK/e86OOMyFR4zEPyenIxDzO2DRdz3fwVW7RzZ94wfmSwBh/8skzPTuY1G7sI064cjHW0b0QG01Sdtg==}\n+    engines: {node: '>=16.0.0'}\n+    peerDependencies:\n+      '@aws-sdk/client-sts': ^3.693.0\n+\n   '@aws-sdk/client-sso@3.658.1':\n     resolution: {integrity: sha512-lOuaBtqPTYGn6xpXlQF4LsNDsQ8Ij2kOdnk+i69Kp6yS76TYvtUuukyLL5kx8zE1c8WbYtxj9y8VNw9/6uKl7Q==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/client-sso@3.693.0':\n+    resolution: {integrity: sha512-QEynrBC26x6TG9ZMzApR/kZ3lmt4lEIs2D+cHuDxt6fDGzahBUsQFBwJqhizzsM97JJI5YvmJhmihoYjdSSaXA==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/client-sts@3.658.1':\n     resolution: {integrity: sha512-yw9hc5blTnbT1V6mR7Cx9HGc9KQpcLQ1QXj8rntiJi6tIYu3aFNVEyy81JHL7NsuBSeQulJTvHO3y6r3O0sfRg==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/client-sts@3.693.0':\n+    resolution: {integrity: sha512-4S2y7VEtvdnjJX4JPl4kDQlslxXEZFnC50/UXVUYSt/AMc5A/GgspFNA5FVz4E3Gwpfobbf23hR2NBF8AGvYoQ==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/core@3.658.1':\n     resolution: {integrity: sha512-vJVMoMcSKXK2gBRSu9Ywwv6wQ7tXH8VL1fqB1uVxgCqBZ3IHfqNn4zvpMPWrwgO2/3wv7XFyikGQ5ypPTCw4jA==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/core@3.693.0':\n+    resolution: {integrity: sha512-v6Z/kWmLFqRLDPEwl9hJGhtTgIFHjZugSfF1Yqffdxf4n1AWgtHS7qSegakuMyN5pP4K2tvUD8qHJ+gGe2Bw2A==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/credential-provider-env@3.654.0':\n     resolution: {integrity: sha512-kogsx3Ql81JouHS7DkheCDU9MYAvK0AokxjcshDveGmf7BbgbWCA8Fnb9wjQyNDaOXNvkZu8Z8rgkX91z324/w==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/credential-provider-env@3.693.0':\n+    resolution: {integrity: sha512-hMUZaRSF7+iBKZfBHNLihFs9zvpM1CB8MBOTnTp5NGCVkRYF3SB2LH+Kcippe0ats4qCyB1eEoyQX99rERp2iQ==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/credential-provider-http@3.658.1':\n     resolution: {integrity: sha512-4ubkJjEVCZflxkZnV1JDQv8P2pburxk1LrEp55telfJRzXrnowzBKwuV2ED0QMNC448g2B3VCaffS+Ct7c4IWQ==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/credential-provider-http@3.693.0':\n+    resolution: {integrity: sha512-sL8MvwNJU7ZpD7/d2VVb3by1GknIJUxzTIgYtVkDVA/ojo+KRQSSHxcj0EWWXF5DTSh2Tm+LrEug3y1ZyKHsDA==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/credential-provider-ini@3.658.1':\n     resolution: {integrity: sha512-2uwOamQg5ppwfegwen1ddPu5HM3/IBSnaGlaKLFhltkdtZ0jiqTZWUtX2V+4Q+buLnT0hQvLS/frQ+7QUam+0Q==}\n     engines: {node: '>=16.0.0'}\n     peerDependencies:\n       '@aws-sdk/client-sts': ^3.658.1\n \n+  '@aws-sdk/credential-provider-ini@3.693.0':\n+    resolution: {integrity: sha512-kvaa4mXhCCOuW7UQnBhYqYfgWmwy7WSBSDClutwSLPZvgrhYj2l16SD2lN4IfYdxARYMJJ1lFYp3/jJG/9Yk4Q==}\n+    engines: {node: '>=16.0.0'}\n+    peerDependencies:\n+      '@aws-sdk/client-sts': ^3.693.0\n+\n   '@aws-sdk/credential-provider-node@3.658.1':\n     resolution: {integrity: sha512-XwxW6N+uPXPYAuyq+GfOEdfL/MZGAlCSfB5gEWtLBFmFbikhmEuqfWtI6CD60OwudCUOh6argd21BsJf8o1SJA==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/credential-provider-node@3.693.0':\n+    resolution: {integrity: sha512-42WMsBjTNnjYxYuM3qD/Nq+8b7UdMopUq5OduMDxoM3mFTV6PXMMnfI4Z1TNnR4tYRvPXAnuNltF6xmjKbSJRA==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/credential-provider-process@3.654.0':\n     resolution: {integrity: sha512-PmQoo8sZ9Q2Ow8OMzK++Z9lI7MsRUG7sNq3E72DVA215dhtTICTDQwGlXH2AAmIp7n+G9LLRds+4wo2ehG4mkg==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/credential-provider-process@3.693.0':\n+    resolution: {integrity: sha512-cvxQkrTWHHjeHrPlj7EWXPnFSq8x7vMx+Zn1oTsMpCY445N9KuzjfJTkmNGwU2GT6rSZI9/0MM02aQvl5bBBTQ==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/credential-provider-sso@3.658.1':\n     resolution: {integrity: sha512-YOagVEsZEk9DmgJEBg+4MBXrPcw/tYas0VQ5OVBqC5XHNbi2OBGJqgmjVPesuu393E7W0VQxtJFDS00O1ewQgA==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/credential-provider-sso@3.693.0':\n+    resolution: {integrity: sha512-479UlJxY+BFjj3pJFYUNC0DCMrykuG7wBAXfsvZqQxKUa83DnH5Q1ID/N2hZLkxjGd4ZW0AC3lTOMxFelGzzpQ==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/credential-provider-web-identity@3.654.0':\n     resolution: {integrity: sha512-6a2g9gMtZToqSu+CusjNK5zvbLJahQ9di7buO3iXgbizXpLXU1rnawCpWxwslMpT5fLgMSKDnKDrr6wdEk7jSw==}\n     engines: {node: '>=16.0.0'}\n     peerDependencies:\n       '@aws-sdk/client-sts': ^3.654.0\n \n+  '@aws-sdk/credential-provider-web-identity@3.693.0':\n+    resolution: {integrity: sha512-8LB210Pr6VeCiSb2hIra+sAH4KUBLyGaN50axHtIgufVK8jbKIctTZcVY5TO9Se+1107TsruzeXS7VeqVdJfFA==}\n+    engines: {node: '>=16.0.0'}\n+    peerDependencies:\n+      '@aws-sdk/client-sts': ^3.693.0\n+\n   '@aws-sdk/lib-storage@3.658.1':\n     resolution: {integrity: sha512-qk/CoTpsBj9A9KRT24MrB92TcoKxteCGKLuszU0fAb5KMx3tgJ5kNTkc7Ag/B+sZ1EWO+psqWUJKm2co5u1pDQ==}\n     engines: {node: '>=16.0.0'}\n@@ -2322,6 +2379,10 @@ packages:\n     resolution: {integrity: sha512-rxGgVHWKp8U2ubMv+t+vlIk7QYUaRCHaVpmUlJv0Wv6Q0KeO9a42T9FxHphjOTlCGQOLcjCreL9CF8Qhtb4mdQ==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/middleware-host-header@3.693.0':\n+    resolution: {integrity: sha512-BCki6sAZ5jYwIN/t3ElCiwerHad69ipHwPsDCxJQyeiOnJ8HG+lEpnVIfrnI8A0fLQNSF3Gtx6ahfBpKiv1Oug==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/middleware-location-constraint@3.654.0':\n     resolution: {integrity: sha512-Duvv5c4DEQ7P6c0YlcvEUW3xCJi6X2uktafNGjILhVDMQwShSF/aFqNv/ikWU/luQcmWHZ9DtDjTR9UKLh6eTA==}\n     engines: {node: '>=16.0.0'}\n@@ -2330,10 +2391,18 @@ packages:\n     resolution: {integrity: sha512-OQYb+nWlmASyXfRb989pwkJ9EVUMP1CrKn2eyTk3usl20JZmKo2Vjis6I0tLUkMSxMhnBJJlQKyWkRpD/u1FVg==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/middleware-logger@3.693.0':\n+    resolution: {integrity: sha512-dXnXDPr+wIiJ1TLADACI1g9pkSB21KkMIko2u4CJ2JCBoxi5IqeTnVoa6YcC8GdFNVRl+PorZ3Zqfmf1EOTC6w==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/middleware-recursion-detection@3.654.0':\n     resolution: {integrity: sha512-gKSomgltKVmsT8sC6W7CrADZ4GHwX9epk3GcH6QhebVO3LA9LRbkL3TwOPUXakxxOLLUTYdOZLIOtFf7iH00lg==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/middleware-recursion-detection@3.693.0':\n+    resolution: {integrity: sha512-0LDmM+VxXp0u3rG0xQRWD/q6Ubi7G8I44tBPahevD5CaiDZTkmNTrVUf0VEJgVe0iCKBppACMBDkLB0/ETqkFw==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/middleware-sdk-s3@3.658.1':\n     resolution: {integrity: sha512-UdiwCY4Eg7e1ZbseKvBr83SARukcqS5R9R3bnx4sb3cEK0wFDXWrlhRMgK94jr8IJeskV1ySyxozdb1XOzOU3w==}\n     engines: {node: '>=16.0.0'}\n@@ -2346,10 +2415,18 @@ packages:\n     resolution: {integrity: sha512-liCcqPAyRsr53cy2tYu4qeH4MMN0eh9g6k56XzI5xd4SghXH5YWh4qOYAlQ8T66ZV4nPMtD8GLtLXGzsH8moFg==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/middleware-user-agent@3.693.0':\n+    resolution: {integrity: sha512-/KUq/KEpFFbQmNmpp7SpAtFAdViquDfD2W0QcG07zYBfz9MwE2ig48ALynXm5sMpRmnG7sJXjdvPtTsSVPfkiw==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/region-config-resolver@3.654.0':\n     resolution: {integrity: sha512-ydGOrXJxj3x0sJhsXyTmvJVLAE0xxuTWFJihTl67RtaO7VRNtd82I3P3bwoMMaDn5WpmV5mPo8fEUDRlBm3fPg==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/region-config-resolver@3.693.0':\n+    resolution: {integrity: sha512-YLUkMsUY0GLW/nfwlZ69cy1u07EZRmsv8Z9m0qW317/EZaVx59hcvmcvb+W4bFqj5E8YImTjoGfE4cZ0F9mkyw==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/signature-v4-multi-region@3.658.1':\n     resolution: {integrity: sha512-gad2cOtmwLuiR096PB1vJsv2+KYwI+eN5D+eLaRLCTD9MMGvVWB5xkIXXGmn99ks4gAgtSpzZp8RD6viBj0gIw==}\n     engines: {node: '>=16.0.0'}\n@@ -2360,10 +2437,20 @@ packages:\n     peerDependencies:\n       '@aws-sdk/client-sso-oidc': ^3.654.0\n \n+  '@aws-sdk/token-providers@3.693.0':\n+    resolution: {integrity: sha512-nDBTJMk1l/YmFULGfRbToOA2wjf+FkQT4dMgYCv+V9uSYsMzQj8A7Tha2dz9yv4vnQgYaEiErQ8d7HVyXcVEoA==}\n+    engines: {node: '>=16.0.0'}\n+    peerDependencies:\n+      '@aws-sdk/client-sso-oidc': ^3.693.0\n+\n   '@aws-sdk/types@3.654.0':\n     resolution: {integrity: sha512-VWvbED3SV+10QJIcmU/PKjsKilsTV16d1I7/on4bvD/jo1qGeMXqLDBSen3ks/tuvXZF/mFc7ZW/W2DiLVtO7A==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/types@3.692.0':\n+    resolution: {integrity: sha512-RpNvzD7zMEhiKgmlxGzyXaEcg2khvM7wd5sSHVapOcrde1awQSOMGI4zKBQ+wy5TnDfrm170ROz/ERLYtrjPZA==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/util-arn-parser@3.568.0':\n     resolution: {integrity: sha512-XUKJWWo+KOB7fbnPP0+g/o5Ulku/X53t7i/h+sPHr5xxYTJJ9CYnbToo95mzxe7xWvkLrsNtJ8L+MnNn9INs2w==}\n     engines: {node: '>=16.0.0'}\n@@ -2372,6 +2459,10 @@ packages:\n     resolution: {integrity: sha512-i902fcBknHs0Irgdpi62+QMvzxE+bczvILXigYrlHL4+PiEnlMVpni5L5W1qCkNZXf8AaMrSBuR1NZAGp6UOUw==}\n     engines: {node: '>=16.0.0'}\n \n+  '@aws-sdk/util-endpoints@3.693.0':\n+    resolution: {integrity: sha512-eo4F6DRQ/kxS3gxJpLRv+aDNy76DxQJL5B3DPzpr9Vkq0ygVoi4GT5oIZLVaAVIJmi6k5qq9dLsYZfWLUxJJSg==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@aws-sdk/util-locate-window@3.568.0':\n     resolution: {integrity: sha512-3nh4TINkXYr+H41QaPelCceEB2FXP3fxp93YZXB/kqJvX0U9j0N0Uk45gvsjmEPzG8XxkPEeLIfT2I1M7A6Lig==}\n     engines: {node: '>=16.0.0'}\n@@ -2379,6 +2470,9 @@ packages:\n   '@aws-sdk/util-user-agent-browser@3.654.0':\n     resolution: {integrity: sha512-ykYAJqvnxLt7wfrqya28wuH3/7NdrwzfiFd7NqEVQf7dXVxL5RPEpD7DxjcyQo3DsHvvdUvGZVaQhozycn1pzA==}\n \n+  '@aws-sdk/util-user-agent-browser@3.693.0':\n+    resolution: {integrity: sha512-6EUfuKOujtddy18OLJUaXfKBgs+UcbZ6N/3QV4iOkubCUdeM1maIqs++B9bhCbWeaeF5ORizJw5FTwnyNjE/mw==}\n+\n   '@aws-sdk/util-user-agent-node@3.654.0':\n     resolution: {integrity: sha512-a0ojjdBN6pqv6gB4H/QPPSfhs7mFtlVwnmKCM/QrTaFzN0U810PJ1BST3lBx5sa23I5jWHGaoFY+5q65C3clLQ==}\n     engines: {node: '>=16.0.0'}\n@@ -2388,6 +2482,15 @@ packages:\n       aws-crt:\n         optional: true\n \n+  '@aws-sdk/util-user-agent-node@3.693.0':\n+    resolution: {integrity: sha512-td0OVX8m5ZKiXtecIDuzY3Y3UZIzvxEr57Hp21NOwieqKCG2UeyQWWeGPv0FQaU7dpTkvFmVNI+tx9iB8V/Nhg==}\n+    engines: {node: '>=16.0.0'}\n+    peerDependencies:\n+      aws-crt: '>=1.0.0'\n+    peerDependenciesMeta:\n+      aws-crt:\n+        optional: true\n+\n   '@aws-sdk/xml-builder@3.654.0':\n     resolution: {integrity: sha512-qA2diK3d/ztC8HUb7NwPKbJRV01NpzTzxFn+L5G3HzJBNeKbjLcprQ/9uG9gp2UEx2Go782FI1ddrMNa0qBICA==}\n     engines: {node: '>=16.0.0'}\n@@ -4935,12 +5038,20 @@ packages:\n     resolution: {integrity: sha512-VupaALAQlXViW3/enTf/f5l5JZYSAxoJL7f0nanhNNKnww6DGCg1oYIuNP78KDugnkwthBO6iEcym16HhWV8RQ==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/abort-controller@3.1.8':\n+    resolution: {integrity: sha512-+3DOBcUn5/rVjlxGvUPKc416SExarAQ+Qe0bqk30YSUjbepwpS7QN0cyKUSifvLJhdMZ0WPzPP5ymut0oonrpQ==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/chunked-blob-reader-native@3.0.0':\n     resolution: {integrity: sha512-VDkpCYW+peSuM4zJip5WDfqvg2Mo/e8yxOv3VF1m11y7B8KKMKVFtmZWDe36Fvk8rGuWrPZHHXZ7rR7uM5yWyg==}\n \n   '@smithy/chunked-blob-reader@3.0.0':\n     resolution: {integrity: sha512-sbnURCwjF0gSToGlsBiAmd1lRCmSn72nu9axfJu5lIx6RUEgHu6GwTMbqCdhQSi0Pumcm5vFxsi9XWXb2mTaoA==}\n \n+  '@smithy/config-resolver@3.0.12':\n+    resolution: {integrity: sha512-YAJP9UJFZRZ8N+UruTeq78zkdjUHmzsY62J4qKWZ4SXB4QXJ/+680EfXXgkYA2xj77ooMqtUY9m406zGNqwivQ==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/config-resolver@3.0.8':\n     resolution: {integrity: sha512-Tv1obAC18XOd2OnDAjSWmmthzx6Pdeh63FbLin8MlPiuJ2ATpKkq0NcNOJFr0dO+JmZXnwu8FQxKJ3TKJ3Hulw==}\n     engines: {node: '>=16.0.0'}\n@@ -4949,10 +5060,18 @@ packages:\n     resolution: {integrity: sha512-6lQQp99hnyuNNIzeTYSzCUXJHwvvFLY7hfdFGSJM95tjRDJGfzWYFRBXPaM9766LiiTsQ561KErtbufzUFSYUg==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/core@2.5.3':\n+    resolution: {integrity: sha512-96uW8maifUSmehaeW7uydWn7wBc98NEeNI3zN8vqakGpyCQgzyJaA64Z4FCOUmAdCJkhppd/7SZ798Fo4Xx37g==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/credential-provider-imds@3.2.3':\n     resolution: {integrity: sha512-VoxMzSzdvkkjMJNE38yQgx4CfnmT+Z+5EUXkg4x7yag93eQkVQgZvN3XBSHC/ylfBbLbAtdu7flTCChX9I+mVg==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/credential-provider-imds@3.2.7':\n+    resolution: {integrity: sha512-cEfbau+rrWF8ylkmmVAObOmjbTIzKyUC5TkBL58SbLywD0RCBC4JAUKbmtSm2w5KUJNRPGgpGFMvE2FKnuNlWQ==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/eventstream-codec@3.1.5':\n     resolution: {integrity: sha512-6pu+PT2r+5ZnWEV3vLV1DzyrpJ0TmehQlniIDCSpZg6+Ji2SfOI38EqUyQ+O8lotVElCrfVc9chKtSMe9cmCZQ==}\n \n@@ -4975,9 +5094,16 @@ packages:\n   '@smithy/fetch-http-handler@3.2.8':\n     resolution: {integrity: sha512-Lqe0B8F5RM7zkw//6avq1SJ8AfaRd3ubFUS1eVp5WszV7p6Ne5hQ4dSuMHDpNRPhgTvj4va9Kd/pcVigHEHRow==}\n \n+  '@smithy/fetch-http-handler@4.1.1':\n+    resolution: {integrity: sha512-bH7QW0+JdX0bPBadXt8GwMof/jz0H28I84hU1Uet9ISpzUqXqRQ3fEZJ+ANPOhzSEczYvANNl3uDQDYArSFDtA==}\n+\n   '@smithy/hash-blob-browser@3.1.5':\n     resolution: {integrity: sha512-Vi3eoNCmao4iKglS80ktYnBOIqZhjbDDwa1IIbF/VaJ8PsHnZTQ5wSicicPrU7nTI4JPFn92/txzWkh4GlK18Q==}\n \n+  '@smithy/hash-node@3.0.10':\n+    resolution: {integrity: sha512-3zWGWCHI+FlJ5WJwx73Mw2llYR8aflVyZN5JhoqLxbdPZi6UyKSdCeXAWJw9ja22m6S6Tzz1KZ+kAaSwvydi0g==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/hash-node@3.0.6':\n     resolution: {integrity: sha512-c/FHEdKK/7DU2z6ZE91L36ahyXWayR3B+FzELjnYq7wH5YqIseM24V+pWCS9kFn1Ln8OFGTf+pyYPiHZuX0s/Q==}\n     engines: {node: '>=16.0.0'}\n@@ -4986,6 +5112,9 @@ packages:\n     resolution: {integrity: sha512-61CyFCzqN3VBfcnGX7mof/rkzLb8oHjm4Lr6ZwBIRpBssBb8d09ChrZAqinP2rUrA915BRNkq9NpJz18N7+3hQ==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/invalid-dependency@3.0.10':\n+    resolution: {integrity: sha512-Lp2L65vFi+cj0vFMu2obpPW69DU+6O5g3086lmI4XcnRCG8PxvpWC7XyaVwJCxsZFzueHjXnrOH/E0pl0zikfA==}\n+\n   '@smithy/invalid-dependency@3.0.6':\n     resolution: {integrity: sha512-czM7Ioq3s8pIXht7oD+vmgy4Wfb4XavU/k/irO8NdXFFOx7YAlsCCcKOh/lJD1mJSYQqiR7NmpZ9JviryD/7AQ==}\n \n@@ -5000,6 +5129,10 @@ packages:\n   '@smithy/md5-js@3.0.6':\n     resolution: {integrity: sha512-Ze690T8O3M5SVbb70WormwrKzVf9QQRtIuxtJDgpUQDkmt+PtdYDetBbyCbF9ryupxLw6tgzWKgwffAShhVIXQ==}\n \n+  '@smithy/middleware-content-length@3.0.12':\n+    resolution: {integrity: sha512-1mDEXqzM20yywaMDuf5o9ue8OkJ373lSPbaSjyEvkWdqELhFMyNNgKGWL/rCSf4KME8B+HlHKuR8u9kRj8HzEQ==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/middleware-content-length@3.0.8':\n     resolution: {integrity: sha512-VuyszlSO49WKh3H9/kIO2kf07VUwGV80QRiaDxUfP8P8UKlokz381ETJvwLhwuypBYhLymCYyNhB3fLAGBX2og==}\n     engines: {node: '>=16.0.0'}\n@@ -5008,18 +5141,38 @@ packages:\n     resolution: {integrity: sha512-KeM/OrK8MVFUsoJsmCN0MZMVPjKKLudn13xpgwIMpGTYpA8QZB2Xq5tJ+RE6iu3A6NhOI4VajDTwBsm8pwwrhg==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/middleware-endpoint@3.2.3':\n+    resolution: {integrity: sha512-Hdl9296i/EMptaX7agrSzJZDiz5Y8XPUeBbctTmMtnCguGpqfU3jVsTUan0VLaOhsnquqWLL8Bl5HrlbVGT1og==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/middleware-retry@3.0.21':\n     resolution: {integrity: sha512-/h0fElV95LekVVEJuSw+aI11S1Y3zIUwBc6h9ZbUv43Gl2weXsbQwjLoet6j/Qtb0phfrSxS6pNg6FqgJOWZkA==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/middleware-retry@3.0.27':\n+    resolution: {integrity: sha512-H3J/PjJpLL7Tt+fxDKiOD25sMc94YetlQhCnYeNmina2LZscAdu0ZEZPas/kwePHABaEtqp7hqa5S4UJgMs1Tg==}\n+    engines: {node: '>=16.0.0'}\n+\n+  '@smithy/middleware-serde@3.0.10':\n+    resolution: {integrity: sha512-MnAuhh+dD14F428ubSJuRnmRsfOpxSzvRhaGVTvd/lrUDE3kxzCCmH8lnVTvoNQnV2BbJ4c15QwZ3UdQBtFNZA==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/middleware-serde@3.0.6':\n     resolution: {integrity: sha512-KKTUSl1MzOM0MAjGbudeaVNtIDo+PpekTBkCNwvfZlKndodrnvRo+00USatiyLOc0ujjO9UydMRu3O9dYML7ag==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/middleware-stack@3.0.10':\n+    resolution: {integrity: sha512-grCHyoiARDBBGPyw2BeicpjgpsDFWZZxptbVKb3CRd/ZA15F/T6rZjCCuBUjJwdck1nwUuIxYtsS4H9DDpbP5w==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/middleware-stack@3.0.6':\n     resolution: {integrity: sha512-2c0eSYhTQ8xQqHMcRxLMpadFbTXg6Zla5l0mwNftFCZMQmuhI7EbAJMx6R5eqfuV3YbJ3QGyS3d5uSmrHV8Khg==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/node-config-provider@3.1.11':\n+    resolution: {integrity: sha512-URq3gT3RpDikh/8MBJUB+QGZzfS7Bm6TQTqoh4CqE8NBuyPkWa5eUXj0XFcFfeZVgg3WMh1u19iaXn8FvvXxZw==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/node-config-provider@3.1.7':\n     resolution: {integrity: sha512-g3mfnC3Oo8pOI0dYuPXLtdW1WGVb3bR2tkV21GNkm0ZvQjLTtamXAwCWt/FCb0HGvKt3gHHmF1XerG0ICfalOg==}\n     engines: {node: '>=16.0.0'}\n@@ -5028,6 +5181,14 @@ packages:\n     resolution: {integrity: sha512-/gcm5DJ3k1b1zEInzBGAZC8ntJ+jwrz1NcSIu+9dSXd1FfG0G6QgkDI40tt8/WYUbHtLyo8fEqtm2v29koWo/w==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/node-http-handler@3.3.1':\n+    resolution: {integrity: sha512-fr+UAOMGWh6bn4YSEezBCpJn9Ukp9oR4D32sCjCo7U81evE11YePOQ58ogzyfgmjIO79YeOdfXXqr0jyhPQeMg==}\n+    engines: {node: '>=16.0.0'}\n+\n+  '@smithy/property-provider@3.1.10':\n+    resolution: {integrity: sha512-n1MJZGTorTH2DvyTVj+3wXnd4CzjJxyXeOgnTlgNVFxaaMeT4OteEp4QrzF8p9ee2yg42nvyVK6R/awLCakjeQ==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/property-provider@3.1.6':\n     resolution: {integrity: sha512-NK3y/T7Q/Bw+Z8vsVs9MYIQ5v7gOX7clyrXcwhhIBQhbPgRl6JDrZbusO9qWDhcEus75Tg+VCxtIRfo3H76fpw==}\n     engines: {node: '>=16.0.0'}\n@@ -5036,18 +5197,38 @@ packages:\n     resolution: {integrity: sha512-GcbMmOYpH9iRqtC05RbRnc/0FssxSTHlmaNhYBTgSgNCYpdR3Kt88u5GAZTBmouzv+Zlj/VRv92J9ruuDeJuEw==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/protocol-http@4.1.7':\n+    resolution: {integrity: sha512-FP2LepWD0eJeOTm0SjssPcgqAlDFzOmRXqXmGhfIM52G7Lrox/pcpQf6RP4F21k0+O12zaqQt5fCDOeBtqY6Cg==}\n+    engines: {node: '>=16.0.0'}\n+\n+  '@smithy/querystring-builder@3.0.10':\n+    resolution: {integrity: sha512-nT9CQF3EIJtIUepXQuBFb8dxJi3WVZS3XfuDksxSCSn+/CzZowRLdhDn+2acbBv8R6eaJqPupoI/aRFIImNVPQ==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/querystring-builder@3.0.6':\n     resolution: {integrity: sha512-sQe08RunoObe+Usujn9+R2zrLuQERi3CWvRO3BvnoWSYUaIrLKuAIeY7cMeDax6xGyfIP3x/yFWbEKSXvOnvVg==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/querystring-parser@3.0.10':\n+    resolution: {integrity: sha512-Oa0XDcpo9SmjhiDD9ua2UyM3uU01ZTuIrNdZvzwUTykW1PM8o2yJvMh1Do1rY5sUQg4NDV70dMi0JhDx4GyxuQ==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/querystring-parser@3.0.6':\n     resolution: {integrity: sha512-UJKw4LlEkytzz2Wq+uIdHf6qOtFfee/o7ruH0jF5I6UAuU+19r9QV7nU3P/uI0l6+oElRHmG/5cBBcGJrD7Ozg==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/service-error-classification@3.0.10':\n+    resolution: {integrity: sha512-zHe642KCqDxXLuhs6xmHVgRwy078RfqxP2wRDpIyiF8EmsWXptMwnMwbVa50lw+WOGNrYm9zbaEg0oDe3PTtvQ==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/service-error-classification@3.0.6':\n     resolution: {integrity: sha512-53SpchU3+DUZrN7J6sBx9tBiCVGzsib2e4sc512Q7K9fpC5zkJKs6Z9s+qbMxSYrkEkle6hnMtrts7XNkMJJMg==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/shared-ini-file-loader@3.1.11':\n+    resolution: {integrity: sha512-AUdrIZHFtUgmfSN4Gq9nHu3IkHMa1YDcN+s061Nfm+6pQ0mJy85YQDB0tZBCmls0Vuj22pLwDPmL92+Hvfwwlg==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/shared-ini-file-loader@3.1.7':\n     resolution: {integrity: sha512-IA4K2qTJYXkF5OfVN4vsY1hfnUZjaslEE8Fsr/gGFza4TAC2A9NfnZuSY2srQIbt9bwtjHiAayrRVgKse4Q7fA==}\n     engines: {node: '>=16.0.0'}\n@@ -5056,14 +5237,29 @@ packages:\n     resolution: {integrity: sha512-72MiK7xYukNsnLJI9NqvUHqTu0ziEsfMsYNlWpiJfuGQnCTFKpckThlEatirvcA/LmT1h7rRO+pJD06PYsPu9Q==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/signature-v4@4.2.3':\n+    resolution: {integrity: sha512-pPSQQ2v2vu9vc8iew7sszLd0O09I5TRc5zhY71KA+Ao0xYazIG+uLeHbTJfIWGO3BGVLiXjUr3EEeCcEQLjpWQ==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/smithy-client@3.3.5':\n     resolution: {integrity: sha512-7IZi8J3Dr9n3tX+lcpmJ/5tCYIqoXdblFBaPuv0SEKZFRpCxE+TqIWL6I3t7jLlk9TWu3JSvEZAhtjB9yvB+zA==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/smithy-client@3.4.4':\n+    resolution: {integrity: sha512-dPGoJuSZqvirBq+yROapBcHHvFjChoAQT8YPWJ820aPHHiowBlB3RL1Q4kPT1hx0qKgJuf+HhyzKi5Gbof4fNA==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/types@3.4.2':\n     resolution: {integrity: sha512-tHiFcfcVedVBHpmHUEUHOCCih8iZbIAYn9NvPsNzaPm/237I3imdDdZoOC8c87H5HBAVEa06tTgb+OcSWV9g5w==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/types@3.7.1':\n+    resolution: {integrity: sha512-XKLcLXZY7sUQgvvWyeaL/qwNPp6V3dWcUjqrQKjSb+tzYiCy340R/c64LV5j+Tnb2GhmunEX0eou+L+m2hJNYA==}\n+    engines: {node: '>=16.0.0'}\n+\n+  '@smithy/url-parser@3.0.10':\n+    resolution: {integrity: sha512-j90NUalTSBR2NaZTuruEgavSdh8MLirf58LoGSk4AtQfyIymogIhgnGUU2Mga2bkMkpSoC9gxb74xBXL5afKAQ==}\n+\n   '@smithy/url-parser@3.0.6':\n     resolution: {integrity: sha512-47Op/NU8Opt49KyGpHtVdnmmJMsp2hEwBdyjuFB9M2V5QVOwA7pBhhxKN5z6ztKGrMw76gd8MlbPuzzvaAncuQ==}\n \n@@ -5094,22 +5290,42 @@ packages:\n     resolution: {integrity: sha512-M/FhTBk4c/SsB91dD/M4gMGfJO7z/qJaM9+XQQIqBOf4qzZYMExnP7R4VdGwxxH8IKMGW+8F0I4rNtVRrcfPoA==}\n     engines: {node: '>= 10.0.0'}\n \n+  '@smithy/util-defaults-mode-browser@3.0.27':\n+    resolution: {integrity: sha512-GV8NvPy1vAGp7u5iD/xNKUxCorE4nQzlyl057qRac+KwpH5zq8wVq6rE3lPPeuFLyQXofPN6JwxL1N9ojGapiQ==}\n+    engines: {node: '>= 10.0.0'}\n+\n   '@smithy/util-defaults-mode-node@3.0.21':\n     resolution: {integrity: sha512-NiLinPvF86U3S2Pdx/ycqd4bnY5dmFSPNL5KYRwbNjqQFS09M5Wzqk8BNk61/47xCYz1X/6KeiSk9qgYPTtuDw==}\n     engines: {node: '>= 10.0.0'}\n \n+  '@smithy/util-defaults-mode-node@3.0.27':\n+    resolution: {integrity: sha512-7+4wjWfZqZxZVJvDutO+i1GvL6bgOajEkop4FuR6wudFlqBiqwxw3HoH6M9NgeCd37km8ga8NPp2JacQEtAMPg==}\n+    engines: {node: '>= 10.0.0'}\n+\n   '@smithy/util-endpoints@2.1.2':\n     resolution: {integrity: sha512-FEISzffb4H8DLzGq1g4MuDpcv6CIG15fXoQzDH9SjpRJv6h7J++1STFWWinilG0tQh9H1v2UKWG19Jjr2B16zQ==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/util-endpoints@2.1.6':\n+    resolution: {integrity: sha512-mFV1t3ndBh0yZOJgWxO9J/4cHZVn5UG1D8DeCc6/echfNkeEJWu9LD7mgGH5fHrEdR7LDoWw7PQO6QiGpHXhgA==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/util-hex-encoding@3.0.0':\n     resolution: {integrity: sha512-eFndh1WEK5YMUYvy3lPlVmYY/fZcQE1D8oSf41Id2vCeIkKJXPcYDCZD+4+xViI6b1XSd7tE+s5AmXzz5ilabQ==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/util-middleware@3.0.10':\n+    resolution: {integrity: sha512-eJO+/+RsrG2RpmY68jZdwQtnfsxjmPxzMlQpnHKjFPwrYqvlcT+fHdT+ZVwcjlWSrByOhGr9Ff2GG17efc192A==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/util-middleware@3.0.6':\n     resolution: {integrity: sha512-BxbX4aBhI1O9p87/xM+zWy0GzT3CEVcXFPBRDoHAM+pV0eSW156pR+PSYEz0DQHDMYDsYAflC2bQNz2uaDBUZQ==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/util-retry@3.0.10':\n+    resolution: {integrity: sha512-1l4qatFp4PiU6j7UsbasUHL2VU023NRB/gfaa1M0rDqVrRN4g3mCArLRyH3OuktApA4ye+yjWQHjdziunw2eWA==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/util-retry@3.0.6':\n     resolution: {integrity: sha512-BRZiuF7IwDntAbevqMco67an0Sr9oLQJqqRCsSPZZHYRnehS0LHDAkJk/pSmI7Z8c/1Vet294H7fY2fWUgB+Rg==}\n     engines: {node: '>=16.0.0'}\n@@ -5118,6 +5334,10 @@ packages:\n     resolution: {integrity: sha512-hoKOqSmb8FD3WLObuB5hwbM7bNIWgcnvkThokTvVq7J5PKjlLUK5qQQcB9zWLHIoSaIlf3VIv2OxZY2wtQjcRQ==}\n     engines: {node: '>=16.0.0'}\n \n+  '@smithy/util-stream@3.3.1':\n+    resolution: {integrity: sha512-Ff68R5lJh2zj+AUTvbAU/4yx+6QPRzg7+pI7M1FbtQHcRIp7xvguxVsQBKyB3fwiOwhAKu0lnNyYBaQfSW6TNw==}\n+    engines: {node: '>=16.0.0'}\n+\n   '@smithy/util-uri-escape@3.0.0':\n     resolution: {integrity: sha512-LqR7qYLgZTD7nWLBecUi4aqolw8Mhza9ArpNEQ881MJJIU2sE5iHCK6TdyqqzcDLy0OPe10IY4T8ctVdtynubg==}\n     engines: {node: '>=16.0.0'}\n@@ -14231,6 +14451,52 @@ snapshots:\n     transitivePeerDependencies:\n       - aws-crt\n \n+  '@aws-sdk/client-device-farm@3.693.0':\n+    dependencies:\n+      '@aws-crypto/sha256-browser': 5.2.0\n+      '@aws-crypto/sha256-js': 5.2.0\n+      '@aws-sdk/client-sso-oidc': 3.693.0(@aws-sdk/client-sts@3.658.1)\n+      '@aws-sdk/client-sts': 3.693.0\n+      '@aws-sdk/core': 3.693.0\n+      '@aws-sdk/credential-provider-node': 3.693.0(@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.693.0))(@aws-sdk/client-sts@3.658.1)\n+      '@aws-sdk/middleware-host-header': 3.693.0\n+      '@aws-sdk/middleware-logger': 3.693.0\n+      '@aws-sdk/middleware-recursion-detection': 3.693.0\n+      '@aws-sdk/middleware-user-agent': 3.693.0\n+      '@aws-sdk/region-config-resolver': 3.693.0\n+      '@aws-sdk/types': 3.692.0\n+      '@aws-sdk/util-endpoints': 3.693.0\n+      '@aws-sdk/util-user-agent-browser': 3.693.0\n+      '@aws-sdk/util-user-agent-node': 3.693.0\n+      '@smithy/config-resolver': 3.0.12\n+      '@smithy/core': 2.5.3\n+      '@smithy/fetch-http-handler': 4.1.1\n+      '@smithy/hash-node': 3.0.10\n+      '@smithy/invalid-dependency': 3.0.10\n+      '@smithy/middleware-content-length': 3.0.12\n+      '@smithy/middleware-endpoint': 3.2.3\n+      '@smithy/middleware-retry': 3.0.27\n+      '@smithy/middleware-serde': 3.0.10\n+      '@smithy/middleware-stack': 3.0.10\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/node-http-handler': 3.3.1\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/smithy-client': 3.4.4\n+      '@smithy/types': 3.7.1\n+      '@smithy/url-parser': 3.0.10\n+      '@smithy/util-base64': 3.0.0\n+      '@smithy/util-body-length-browser': 3.0.0\n+      '@smithy/util-body-length-node': 3.0.0\n+      '@smithy/util-defaults-mode-browser': 3.0.27\n+      '@smithy/util-defaults-mode-node': 3.0.27\n+      '@smithy/util-endpoints': 2.1.6\n+      '@smithy/util-middleware': 3.0.10\n+      '@smithy/util-retry': 3.0.10\n+      '@smithy/util-utf8': 3.0.0\n+      tslib: 2.8.1\n+    transitivePeerDependencies:\n+      - aws-crt\n+\n   '@aws-sdk/client-s3@3.658.1':\n     dependencies:\n       '@aws-crypto/sha1-browser': 5.2.0\n@@ -14339,6 +14605,96 @@ snapshots:\n     transitivePeerDependencies:\n       - aws-crt\n \n+  '@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.658.1)':\n+    dependencies:\n+      '@aws-crypto/sha256-browser': 5.2.0\n+      '@aws-crypto/sha256-js': 5.2.0\n+      '@aws-sdk/client-sts': 3.658.1\n+      '@aws-sdk/core': 3.693.0\n+      '@aws-sdk/credential-provider-node': 3.693.0(@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.693.0))(@aws-sdk/client-sts@3.658.1)\n+      '@aws-sdk/middleware-host-header': 3.693.0\n+      '@aws-sdk/middleware-logger': 3.693.0\n+      '@aws-sdk/middleware-recursion-detection': 3.693.0\n+      '@aws-sdk/middleware-user-agent': 3.693.0\n+      '@aws-sdk/region-config-resolver': 3.693.0\n+      '@aws-sdk/types': 3.692.0\n+      '@aws-sdk/util-endpoints': 3.693.0\n+      '@aws-sdk/util-user-agent-browser': 3.693.0\n+      '@aws-sdk/util-user-agent-node': 3.693.0\n+      '@smithy/config-resolver': 3.0.12\n+      '@smithy/core': 2.5.3\n+      '@smithy/fetch-http-handler': 4.1.1\n+      '@smithy/hash-node': 3.0.10\n+      '@smithy/invalid-dependency': 3.0.10\n+      '@smithy/middleware-content-length': 3.0.12\n+      '@smithy/middleware-endpoint': 3.2.3\n+      '@smithy/middleware-retry': 3.0.27\n+      '@smithy/middleware-serde': 3.0.10\n+      '@smithy/middleware-stack': 3.0.10\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/node-http-handler': 3.3.1\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/smithy-client': 3.4.4\n+      '@smithy/types': 3.7.1\n+      '@smithy/url-parser': 3.0.10\n+      '@smithy/util-base64': 3.0.0\n+      '@smithy/util-body-length-browser': 3.0.0\n+      '@smithy/util-body-length-node': 3.0.0\n+      '@smithy/util-defaults-mode-browser': 3.0.27\n+      '@smithy/util-defaults-mode-node': 3.0.27\n+      '@smithy/util-endpoints': 2.1.6\n+      '@smithy/util-middleware': 3.0.10\n+      '@smithy/util-retry': 3.0.10\n+      '@smithy/util-utf8': 3.0.0\n+      tslib: 2.8.1\n+    transitivePeerDependencies:\n+      - aws-crt\n+\n+  '@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.693.0)':\n+    dependencies:\n+      '@aws-crypto/sha256-browser': 5.2.0\n+      '@aws-crypto/sha256-js': 5.2.0\n+      '@aws-sdk/client-sts': 3.693.0\n+      '@aws-sdk/core': 3.693.0\n+      '@aws-sdk/credential-provider-node': 3.693.0(@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.693.0))(@aws-sdk/client-sts@3.658.1)\n+      '@aws-sdk/middleware-host-header': 3.693.0\n+      '@aws-sdk/middleware-logger': 3.693.0\n+      '@aws-sdk/middleware-recursion-detection': 3.693.0\n+      '@aws-sdk/middleware-user-agent': 3.693.0\n+      '@aws-sdk/region-config-resolver': 3.693.0\n+      '@aws-sdk/types': 3.692.0\n+      '@aws-sdk/util-endpoints': 3.693.0\n+      '@aws-sdk/util-user-agent-browser': 3.693.0\n+      '@aws-sdk/util-user-agent-node': 3.693.0\n+      '@smithy/config-resolver': 3.0.12\n+      '@smithy/core': 2.5.3\n+      '@smithy/fetch-http-handler': 4.1.1\n+      '@smithy/hash-node': 3.0.10\n+      '@smithy/invalid-dependency': 3.0.10\n+      '@smithy/middleware-content-length': 3.0.12\n+      '@smithy/middleware-endpoint': 3.2.3\n+      '@smithy/middleware-retry': 3.0.27\n+      '@smithy/middleware-serde': 3.0.10\n+      '@smithy/middleware-stack': 3.0.10\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/node-http-handler': 3.3.1\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/smithy-client': 3.4.4\n+      '@smithy/types': 3.7.1\n+      '@smithy/url-parser': 3.0.10\n+      '@smithy/util-base64': 3.0.0\n+      '@smithy/util-body-length-browser': 3.0.0\n+      '@smithy/util-body-length-node': 3.0.0\n+      '@smithy/util-defaults-mode-browser': 3.0.27\n+      '@smithy/util-defaults-mode-node': 3.0.27\n+      '@smithy/util-endpoints': 2.1.6\n+      '@smithy/util-middleware': 3.0.10\n+      '@smithy/util-retry': 3.0.10\n+      '@smithy/util-utf8': 3.0.0\n+      tslib: 2.8.1\n+    transitivePeerDependencies:\n+      - aws-crt\n+\n   '@aws-sdk/client-sso@3.658.1':\n     dependencies:\n       '@aws-crypto/sha256-browser': 5.2.0\n@@ -14378,7 +14734,50 @@ snapshots:\n       '@smithy/util-middleware': 3.0.6\n       '@smithy/util-retry': 3.0.6\n       '@smithy/util-utf8': 3.0.0\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n+    transitivePeerDependencies:\n+      - aws-crt\n+\n+  '@aws-sdk/client-sso@3.693.0':\n+    dependencies:\n+      '@aws-crypto/sha256-browser': 5.2.0\n+      '@aws-crypto/sha256-js': 5.2.0\n+      '@aws-sdk/core': 3.693.0\n+      '@aws-sdk/middleware-host-header': 3.693.0\n+      '@aws-sdk/middleware-logger': 3.693.0\n+      '@aws-sdk/middleware-recursion-detection': 3.693.0\n+      '@aws-sdk/middleware-user-agent': 3.693.0\n+      '@aws-sdk/region-config-resolver': 3.693.0\n+      '@aws-sdk/types': 3.692.0\n+      '@aws-sdk/util-endpoints': 3.693.0\n+      '@aws-sdk/util-user-agent-browser': 3.693.0\n+      '@aws-sdk/util-user-agent-node': 3.693.0\n+      '@smithy/config-resolver': 3.0.12\n+      '@smithy/core': 2.5.3\n+      '@smithy/fetch-http-handler': 4.1.1\n+      '@smithy/hash-node': 3.0.10\n+      '@smithy/invalid-dependency': 3.0.10\n+      '@smithy/middleware-content-length': 3.0.12\n+      '@smithy/middleware-endpoint': 3.2.3\n+      '@smithy/middleware-retry': 3.0.27\n+      '@smithy/middleware-serde': 3.0.10\n+      '@smithy/middleware-stack': 3.0.10\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/node-http-handler': 3.3.1\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/smithy-client': 3.4.4\n+      '@smithy/types': 3.7.1\n+      '@smithy/url-parser': 3.0.10\n+      '@smithy/util-base64': 3.0.0\n+      '@smithy/util-body-length-browser': 3.0.0\n+      '@smithy/util-body-length-node': 3.0.0\n+      '@smithy/util-defaults-mode-browser': 3.0.27\n+      '@smithy/util-defaults-mode-node': 3.0.27\n+      '@smithy/util-endpoints': 2.1.6\n+      '@smithy/util-middleware': 3.0.10\n+      '@smithy/util-retry': 3.0.10\n+      '@smithy/util-utf8': 3.0.0\n+      tslib: 2.8.1\n     transitivePeerDependencies:\n       - aws-crt\n \n@@ -14427,6 +14826,51 @@ snapshots:\n     transitivePeerDependencies:\n       - aws-crt\n \n+  '@aws-sdk/client-sts@3.693.0':\n+    dependencies:\n+      '@aws-crypto/sha256-browser': 5.2.0\n+      '@aws-crypto/sha256-js': 5.2.0\n+      '@aws-sdk/client-sso-oidc': 3.693.0(@aws-sdk/client-sts@3.693.0)\n+      '@aws-sdk/core': 3.693.0\n+      '@aws-sdk/credential-provider-node': 3.693.0(@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.693.0))(@aws-sdk/client-sts@3.658.1)\n+      '@aws-sdk/middleware-host-header': 3.693.0\n+      '@aws-sdk/middleware-logger': 3.693.0\n+      '@aws-sdk/middleware-recursion-detection': 3.693.0\n+      '@aws-sdk/middleware-user-agent': 3.693.0\n+      '@aws-sdk/region-config-resolver': 3.693.0\n+      '@aws-sdk/types': 3.692.0\n+      '@aws-sdk/util-endpoints': 3.693.0\n+      '@aws-sdk/util-user-agent-browser': 3.693.0\n+      '@aws-sdk/util-user-agent-node': 3.693.0\n+      '@smithy/config-resolver': 3.0.12\n+      '@smithy/core': 2.5.3\n+      '@smithy/fetch-http-handler': 4.1.1\n+      '@smithy/hash-node': 3.0.10\n+      '@smithy/invalid-dependency': 3.0.10\n+      '@smithy/middleware-content-length': 3.0.12\n+      '@smithy/middleware-endpoint': 3.2.3\n+      '@smithy/middleware-retry': 3.0.27\n+      '@smithy/middleware-serde': 3.0.10\n+      '@smithy/middleware-stack': 3.0.10\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/node-http-handler': 3.3.1\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/smithy-client': 3.4.4\n+      '@smithy/types': 3.7.1\n+      '@smithy/url-parser': 3.0.10\n+      '@smithy/util-base64': 3.0.0\n+      '@smithy/util-body-length-browser': 3.0.0\n+      '@smithy/util-body-length-node': 3.0.0\n+      '@smithy/util-defaults-mode-browser': 3.0.27\n+      '@smithy/util-defaults-mode-node': 3.0.27\n+      '@smithy/util-endpoints': 2.1.6\n+      '@smithy/util-middleware': 3.0.10\n+      '@smithy/util-retry': 3.0.10\n+      '@smithy/util-utf8': 3.0.0\n+      tslib: 2.8.1\n+    transitivePeerDependencies:\n+      - aws-crt\n+\n   '@aws-sdk/core@3.658.1':\n     dependencies:\n       '@smithy/core': 2.4.6\n@@ -14440,6 +14884,20 @@ snapshots:\n       fast-xml-parser: 4.4.1\n       tslib: 2.7.0\n \n+  '@aws-sdk/core@3.693.0':\n+    dependencies:\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/core': 2.5.3\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/property-provider': 3.1.10\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/signature-v4': 4.2.3\n+      '@smithy/smithy-client': 3.4.4\n+      '@smithy/types': 3.7.1\n+      '@smithy/util-middleware': 3.0.10\n+      fast-xml-parser: 4.4.1\n+      tslib: 2.8.1\n+\n   '@aws-sdk/credential-provider-env@3.654.0':\n     dependencies:\n       '@aws-sdk/types': 3.654.0\n@@ -14447,6 +14905,14 @@ snapshots:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@aws-sdk/credential-provider-env@3.693.0':\n+    dependencies:\n+      '@aws-sdk/core': 3.693.0\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/property-provider': 3.1.10\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@aws-sdk/credential-provider-http@3.658.1':\n     dependencies:\n       '@aws-sdk/types': 3.654.0\n@@ -14459,6 +14925,19 @@ snapshots:\n       '@smithy/util-stream': 3.1.8\n       tslib: 2.7.0\n \n+  '@aws-sdk/credential-provider-http@3.693.0':\n+    dependencies:\n+      '@aws-sdk/core': 3.693.0\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/fetch-http-handler': 4.1.1\n+      '@smithy/node-http-handler': 3.3.1\n+      '@smithy/property-provider': 3.1.10\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/smithy-client': 3.4.4\n+      '@smithy/types': 3.7.1\n+      '@smithy/util-stream': 3.3.1\n+      tslib: 2.8.1\n+\n   '@aws-sdk/credential-provider-ini@3.658.1(@aws-sdk/client-sso-oidc@3.658.1(@aws-sdk/client-sts@3.658.1))(@aws-sdk/client-sts@3.658.1)':\n     dependencies:\n       '@aws-sdk/client-sts': 3.658.1\n@@ -14477,6 +14956,25 @@ snapshots:\n       - '@aws-sdk/client-sso-oidc'\n       - aws-crt\n \n+  '@aws-sdk/credential-provider-ini@3.693.0(@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.693.0))(@aws-sdk/client-sts@3.658.1)':\n+    dependencies:\n+      '@aws-sdk/client-sts': 3.658.1\n+      '@aws-sdk/core': 3.693.0\n+      '@aws-sdk/credential-provider-env': 3.693.0\n+      '@aws-sdk/credential-provider-http': 3.693.0\n+      '@aws-sdk/credential-provider-process': 3.693.0\n+      '@aws-sdk/credential-provider-sso': 3.693.0(@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.693.0))\n+      '@aws-sdk/credential-provider-web-identity': 3.693.0(@aws-sdk/client-sts@3.658.1)\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/credential-provider-imds': 3.2.7\n+      '@smithy/property-provider': 3.1.10\n+      '@smithy/shared-ini-file-loader': 3.1.11\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+    transitivePeerDependencies:\n+      - '@aws-sdk/client-sso-oidc'\n+      - aws-crt\n+\n   '@aws-sdk/credential-provider-node@3.658.1(@aws-sdk/client-sso-oidc@3.658.1(@aws-sdk/client-sts@3.658.1))(@aws-sdk/client-sts@3.658.1)':\n     dependencies:\n       '@aws-sdk/credential-provider-env': 3.654.0\n@@ -14496,6 +14994,25 @@ snapshots:\n       - '@aws-sdk/client-sts'\n       - aws-crt\n \n+  '@aws-sdk/credential-provider-node@3.693.0(@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.693.0))(@aws-sdk/client-sts@3.658.1)':\n+    dependencies:\n+      '@aws-sdk/credential-provider-env': 3.693.0\n+      '@aws-sdk/credential-provider-http': 3.693.0\n+      '@aws-sdk/credential-provider-ini': 3.693.0(@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.693.0))(@aws-sdk/client-sts@3.658.1)\n+      '@aws-sdk/credential-provider-process': 3.693.0\n+      '@aws-sdk/credential-provider-sso': 3.693.0(@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.693.0))\n+      '@aws-sdk/credential-provider-web-identity': 3.693.0(@aws-sdk/client-sts@3.658.1)\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/credential-provider-imds': 3.2.7\n+      '@smithy/property-provider': 3.1.10\n+      '@smithy/shared-ini-file-loader': 3.1.11\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+    transitivePeerDependencies:\n+      - '@aws-sdk/client-sso-oidc'\n+      - '@aws-sdk/client-sts'\n+      - aws-crt\n+\n   '@aws-sdk/credential-provider-process@3.654.0':\n     dependencies:\n       '@aws-sdk/types': 3.654.0\n@@ -14504,6 +15021,15 @@ snapshots:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@aws-sdk/credential-provider-process@3.693.0':\n+    dependencies:\n+      '@aws-sdk/core': 3.693.0\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/property-provider': 3.1.10\n+      '@smithy/shared-ini-file-loader': 3.1.11\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@aws-sdk/credential-provider-sso@3.658.1(@aws-sdk/client-sso-oidc@3.658.1(@aws-sdk/client-sts@3.658.1))':\n     dependencies:\n       '@aws-sdk/client-sso': 3.658.1\n@@ -14517,6 +15043,20 @@ snapshots:\n       - '@aws-sdk/client-sso-oidc'\n       - aws-crt\n \n+  '@aws-sdk/credential-provider-sso@3.693.0(@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.693.0))':\n+    dependencies:\n+      '@aws-sdk/client-sso': 3.693.0\n+      '@aws-sdk/core': 3.693.0\n+      '@aws-sdk/token-providers': 3.693.0(@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.693.0))\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/property-provider': 3.1.10\n+      '@smithy/shared-ini-file-loader': 3.1.11\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+    transitivePeerDependencies:\n+      - '@aws-sdk/client-sso-oidc'\n+      - aws-crt\n+\n   '@aws-sdk/credential-provider-web-identity@3.654.0(@aws-sdk/client-sts@3.658.1)':\n     dependencies:\n       '@aws-sdk/client-sts': 3.658.1\n@@ -14525,6 +15065,15 @@ snapshots:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@aws-sdk/credential-provider-web-identity@3.693.0(@aws-sdk/client-sts@3.658.1)':\n+    dependencies:\n+      '@aws-sdk/client-sts': 3.658.1\n+      '@aws-sdk/core': 3.693.0\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/property-provider': 3.1.10\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@aws-sdk/lib-storage@3.658.1(@aws-sdk/client-s3@3.658.1)':\n     dependencies:\n       '@aws-sdk/client-s3': 3.658.1\n@@ -14573,6 +15122,13 @@ snapshots:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@aws-sdk/middleware-host-header@3.693.0':\n+    dependencies:\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@aws-sdk/middleware-location-constraint@3.654.0':\n     dependencies:\n       '@aws-sdk/types': 3.654.0\n@@ -14585,6 +15141,12 @@ snapshots:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@aws-sdk/middleware-logger@3.693.0':\n+    dependencies:\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@aws-sdk/middleware-recursion-detection@3.654.0':\n     dependencies:\n       '@aws-sdk/types': 3.654.0\n@@ -14592,6 +15154,13 @@ snapshots:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@aws-sdk/middleware-recursion-detection@3.693.0':\n+    dependencies:\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@aws-sdk/middleware-sdk-s3@3.658.1':\n     dependencies:\n       '@aws-sdk/core': 3.658.1\n@@ -14623,6 +15192,16 @@ snapshots:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@aws-sdk/middleware-user-agent@3.693.0':\n+    dependencies:\n+      '@aws-sdk/core': 3.693.0\n+      '@aws-sdk/types': 3.692.0\n+      '@aws-sdk/util-endpoints': 3.693.0\n+      '@smithy/core': 2.5.3\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@aws-sdk/region-config-resolver@3.654.0':\n     dependencies:\n       '@aws-sdk/types': 3.654.0\n@@ -14632,6 +15211,15 @@ snapshots:\n       '@smithy/util-middleware': 3.0.6\n       tslib: 2.7.0\n \n+  '@aws-sdk/region-config-resolver@3.693.0':\n+    dependencies:\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/types': 3.7.1\n+      '@smithy/util-config-provider': 3.0.0\n+      '@smithy/util-middleware': 3.0.10\n+      tslib: 2.8.1\n+\n   '@aws-sdk/signature-v4-multi-region@3.658.1':\n     dependencies:\n       '@aws-sdk/middleware-sdk-s3': 3.658.1\n@@ -14648,13 +15236,27 @@ snapshots:\n       '@smithy/property-provider': 3.1.6\n       '@smithy/shared-ini-file-loader': 3.1.7\n       '@smithy/types': 3.4.2\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n+\n+  '@aws-sdk/token-providers@3.693.0(@aws-sdk/client-sso-oidc@3.693.0(@aws-sdk/client-sts@3.693.0))':\n+    dependencies:\n+      '@aws-sdk/client-sso-oidc': 3.693.0(@aws-sdk/client-sts@3.658.1)\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/property-provider': 3.1.10\n+      '@smithy/shared-ini-file-loader': 3.1.11\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n \n   '@aws-sdk/types@3.654.0':\n     dependencies:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@aws-sdk/types@3.692.0':\n+    dependencies:\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@aws-sdk/util-arn-parser@3.568.0':\n     dependencies:\n       tslib: 2.7.0\n@@ -14666,6 +15268,13 @@ snapshots:\n       '@smithy/util-endpoints': 2.1.2\n       tslib: 2.7.0\n \n+  '@aws-sdk/util-endpoints@3.693.0':\n+    dependencies:\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/types': 3.7.1\n+      '@smithy/util-endpoints': 2.1.6\n+      tslib: 2.8.1\n+\n   '@aws-sdk/util-locate-window@3.568.0':\n     dependencies:\n       tslib: 2.7.0\n@@ -14677,6 +15286,13 @@ snapshots:\n       bowser: 2.11.0\n       tslib: 2.7.0\n \n+  '@aws-sdk/util-user-agent-browser@3.693.0':\n+    dependencies:\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/types': 3.7.1\n+      bowser: 2.11.0\n+      tslib: 2.8.1\n+\n   '@aws-sdk/util-user-agent-node@3.654.0':\n     dependencies:\n       '@aws-sdk/types': 3.654.0\n@@ -14684,6 +15300,14 @@ snapshots:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@aws-sdk/util-user-agent-node@3.693.0':\n+    dependencies:\n+      '@aws-sdk/middleware-user-agent': 3.693.0\n+      '@aws-sdk/types': 3.692.0\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@aws-sdk/xml-builder@3.654.0':\n     dependencies:\n       '@smithy/types': 3.4.2\n@@ -15930,12 +16554,12 @@ snapshots:\n       cssnano-preset-advanced: 6.1.2(postcss@8.4.47)\n       postcss: 8.4.47\n       postcss-sort-media-queries: 5.2.0(postcss@8.4.47)\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   '@docusaurus/logger@3.5.2':\n     dependencies:\n       chalk: 4.1.2\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   '@docusaurus/lqip-loader@3.5.2(webpack@5.94.0(@swc/core@1.7.26))':\n     dependencies:\n@@ -16590,7 +17214,7 @@ snapshots:\n       joi: 17.13.3\n       js-yaml: 4.1.0\n       lodash: 4.17.21\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n     transitivePeerDependencies:\n       - '@docusaurus/types'\n       - '@swc/core'\n@@ -18207,6 +18831,11 @@ snapshots:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@smithy/abort-controller@3.1.8':\n+    dependencies:\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/chunked-blob-reader-native@3.0.0':\n     dependencies:\n       '@smithy/util-base64': 3.0.0\n@@ -18216,6 +18845,14 @@ snapshots:\n     dependencies:\n       tslib: 2.7.0\n \n+  '@smithy/config-resolver@3.0.12':\n+    dependencies:\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/types': 3.7.1\n+      '@smithy/util-config-provider': 3.0.0\n+      '@smithy/util-middleware': 3.0.10\n+      tslib: 2.8.1\n+\n   '@smithy/config-resolver@3.0.8':\n     dependencies:\n       '@smithy/node-config-provider': 3.1.7\n@@ -18237,6 +18874,17 @@ snapshots:\n       '@smithy/util-utf8': 3.0.0\n       tslib: 2.7.0\n \n+  '@smithy/core@2.5.3':\n+    dependencies:\n+      '@smithy/middleware-serde': 3.0.10\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/types': 3.7.1\n+      '@smithy/util-body-length-browser': 3.0.0\n+      '@smithy/util-middleware': 3.0.10\n+      '@smithy/util-stream': 3.3.1\n+      '@smithy/util-utf8': 3.0.0\n+      tslib: 2.8.1\n+\n   '@smithy/credential-provider-imds@3.2.3':\n     dependencies:\n       '@smithy/node-config-provider': 3.1.7\n@@ -18245,12 +18893,20 @@ snapshots:\n       '@smithy/url-parser': 3.0.6\n       tslib: 2.7.0\n \n+  '@smithy/credential-provider-imds@3.2.7':\n+    dependencies:\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/property-provider': 3.1.10\n+      '@smithy/types': 3.7.1\n+      '@smithy/url-parser': 3.0.10\n+      tslib: 2.8.1\n+\n   '@smithy/eventstream-codec@3.1.5':\n     dependencies:\n       '@aws-crypto/crc32': 5.2.0\n       '@smithy/types': 3.4.2\n       '@smithy/util-hex-encoding': 3.0.0\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   '@smithy/eventstream-serde-browser@3.0.9':\n     dependencies:\n@@ -18283,6 +18939,14 @@ snapshots:\n       '@smithy/util-base64': 3.0.0\n       tslib: 2.7.0\n \n+  '@smithy/fetch-http-handler@4.1.1':\n+    dependencies:\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/querystring-builder': 3.0.10\n+      '@smithy/types': 3.7.1\n+      '@smithy/util-base64': 3.0.0\n+      tslib: 2.8.1\n+\n   '@smithy/hash-blob-browser@3.1.5':\n     dependencies:\n       '@smithy/chunked-blob-reader': 3.0.0\n@@ -18290,6 +18954,13 @@ snapshots:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@smithy/hash-node@3.0.10':\n+    dependencies:\n+      '@smithy/types': 3.7.1\n+      '@smithy/util-buffer-from': 3.0.0\n+      '@smithy/util-utf8': 3.0.0\n+      tslib: 2.8.1\n+\n   '@smithy/hash-node@3.0.6':\n     dependencies:\n       '@smithy/types': 3.4.2\n@@ -18303,6 +18974,11 @@ snapshots:\n       '@smithy/util-utf8': 3.0.0\n       tslib: 2.7.0\n \n+  '@smithy/invalid-dependency@3.0.10':\n+    dependencies:\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/invalid-dependency@3.0.6':\n     dependencies:\n       '@smithy/types': 3.4.2\n@@ -18310,7 +18986,7 @@ snapshots:\n \n   '@smithy/is-array-buffer@2.2.0':\n     dependencies:\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   '@smithy/is-array-buffer@3.0.0':\n     dependencies:\n@@ -18322,6 +18998,12 @@ snapshots:\n       '@smithy/util-utf8': 3.0.0\n       tslib: 2.7.0\n \n+  '@smithy/middleware-content-length@3.0.12':\n+    dependencies:\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/middleware-content-length@3.0.8':\n     dependencies:\n       '@smithy/protocol-http': 4.1.3\n@@ -18338,6 +19020,17 @@ snapshots:\n       '@smithy/util-middleware': 3.0.6\n       tslib: 2.7.0\n \n+  '@smithy/middleware-endpoint@3.2.3':\n+    dependencies:\n+      '@smithy/core': 2.5.3\n+      '@smithy/middleware-serde': 3.0.10\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/shared-ini-file-loader': 3.1.11\n+      '@smithy/types': 3.7.1\n+      '@smithy/url-parser': 3.0.10\n+      '@smithy/util-middleware': 3.0.10\n+      tslib: 2.8.1\n+\n   '@smithy/middleware-retry@3.0.21':\n     dependencies:\n       '@smithy/node-config-provider': 3.1.7\n@@ -18350,16 +19043,45 @@ snapshots:\n       tslib: 2.7.0\n       uuid: 9.0.1\n \n+  '@smithy/middleware-retry@3.0.27':\n+    dependencies:\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/service-error-classification': 3.0.10\n+      '@smithy/smithy-client': 3.4.4\n+      '@smithy/types': 3.7.1\n+      '@smithy/util-middleware': 3.0.10\n+      '@smithy/util-retry': 3.0.10\n+      tslib: 2.8.1\n+      uuid: 9.0.1\n+\n+  '@smithy/middleware-serde@3.0.10':\n+    dependencies:\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/middleware-serde@3.0.6':\n     dependencies:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@smithy/middleware-stack@3.0.10':\n+    dependencies:\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/middleware-stack@3.0.6':\n     dependencies:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@smithy/node-config-provider@3.1.11':\n+    dependencies:\n+      '@smithy/property-provider': 3.1.10\n+      '@smithy/shared-ini-file-loader': 3.1.11\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/node-config-provider@3.1.7':\n     dependencies:\n       '@smithy/property-provider': 3.1.6\n@@ -18375,6 +19097,19 @@ snapshots:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@smithy/node-http-handler@3.3.1':\n+    dependencies:\n+      '@smithy/abort-controller': 3.1.8\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/querystring-builder': 3.0.10\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n+  '@smithy/property-provider@3.1.10':\n+    dependencies:\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/property-provider@3.1.6':\n     dependencies:\n       '@smithy/types': 3.4.2\n@@ -18385,21 +19120,46 @@ snapshots:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@smithy/protocol-http@4.1.7':\n+    dependencies:\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n+  '@smithy/querystring-builder@3.0.10':\n+    dependencies:\n+      '@smithy/types': 3.7.1\n+      '@smithy/util-uri-escape': 3.0.0\n+      tslib: 2.8.1\n+\n   '@smithy/querystring-builder@3.0.6':\n     dependencies:\n       '@smithy/types': 3.4.2\n       '@smithy/util-uri-escape': 3.0.0\n       tslib: 2.7.0\n \n+  '@smithy/querystring-parser@3.0.10':\n+    dependencies:\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/querystring-parser@3.0.6':\n     dependencies:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@smithy/service-error-classification@3.0.10':\n+    dependencies:\n+      '@smithy/types': 3.7.1\n+\n   '@smithy/service-error-classification@3.0.6':\n     dependencies:\n       '@smithy/types': 3.4.2\n \n+  '@smithy/shared-ini-file-loader@3.1.11':\n+    dependencies:\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/shared-ini-file-loader@3.1.7':\n     dependencies:\n       '@smithy/types': 3.4.2\n@@ -18416,6 +19176,17 @@ snapshots:\n       '@smithy/util-utf8': 3.0.0\n       tslib: 2.7.0\n \n+  '@smithy/signature-v4@4.2.3':\n+    dependencies:\n+      '@smithy/is-array-buffer': 3.0.0\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/types': 3.7.1\n+      '@smithy/util-hex-encoding': 3.0.0\n+      '@smithy/util-middleware': 3.0.10\n+      '@smithy/util-uri-escape': 3.0.0\n+      '@smithy/util-utf8': 3.0.0\n+      tslib: 2.8.1\n+\n   '@smithy/smithy-client@3.3.5':\n     dependencies:\n       '@smithy/middleware-endpoint': 3.1.3\n@@ -18425,10 +19196,30 @@ snapshots:\n       '@smithy/util-stream': 3.1.8\n       tslib: 2.7.0\n \n+  '@smithy/smithy-client@3.4.4':\n+    dependencies:\n+      '@smithy/core': 2.5.3\n+      '@smithy/middleware-endpoint': 3.2.3\n+      '@smithy/middleware-stack': 3.0.10\n+      '@smithy/protocol-http': 4.1.7\n+      '@smithy/types': 3.7.1\n+      '@smithy/util-stream': 3.3.1\n+      tslib: 2.8.1\n+\n   '@smithy/types@3.4.2':\n     dependencies:\n       tslib: 2.7.0\n \n+  '@smithy/types@3.7.1':\n+    dependencies:\n+      tslib: 2.8.1\n+\n+  '@smithy/url-parser@3.0.10':\n+    dependencies:\n+      '@smithy/querystring-parser': 3.0.10\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/url-parser@3.0.6':\n     dependencies:\n       '@smithy/querystring-parser': 3.0.6\n@@ -18452,7 +19243,7 @@ snapshots:\n   '@smithy/util-buffer-from@2.2.0':\n     dependencies:\n       '@smithy/is-array-buffer': 2.2.0\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   '@smithy/util-buffer-from@3.0.0':\n     dependencies:\n@@ -18471,6 +19262,14 @@ snapshots:\n       bowser: 2.11.0\n       tslib: 2.7.0\n \n+  '@smithy/util-defaults-mode-browser@3.0.27':\n+    dependencies:\n+      '@smithy/property-provider': 3.1.10\n+      '@smithy/smithy-client': 3.4.4\n+      '@smithy/types': 3.7.1\n+      bowser: 2.11.0\n+      tslib: 2.8.1\n+\n   '@smithy/util-defaults-mode-node@3.0.21':\n     dependencies:\n       '@smithy/config-resolver': 3.0.8\n@@ -18481,21 +19280,48 @@ snapshots:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@smithy/util-defaults-mode-node@3.0.27':\n+    dependencies:\n+      '@smithy/config-resolver': 3.0.12\n+      '@smithy/credential-provider-imds': 3.2.7\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/property-provider': 3.1.10\n+      '@smithy/smithy-client': 3.4.4\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/util-endpoints@2.1.2':\n     dependencies:\n       '@smithy/node-config-provider': 3.1.7\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@smithy/util-endpoints@2.1.6':\n+    dependencies:\n+      '@smithy/node-config-provider': 3.1.11\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/util-hex-encoding@3.0.0':\n     dependencies:\n       tslib: 2.7.0\n \n+  '@smithy/util-middleware@3.0.10':\n+    dependencies:\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/util-middleware@3.0.6':\n     dependencies:\n       '@smithy/types': 3.4.2\n       tslib: 2.7.0\n \n+  '@smithy/util-retry@3.0.10':\n+    dependencies:\n+      '@smithy/service-error-classification': 3.0.10\n+      '@smithy/types': 3.7.1\n+      tslib: 2.8.1\n+\n   '@smithy/util-retry@3.0.6':\n     dependencies:\n       '@smithy/service-error-classification': 3.0.6\n@@ -18513,9 +19339,20 @@ snapshots:\n       '@smithy/util-utf8': 3.0.0\n       tslib: 2.7.0\n \n+  '@smithy/util-stream@3.3.1':\n+    dependencies:\n+      '@smithy/fetch-http-handler': 4.1.1\n+      '@smithy/node-http-handler': 3.3.1\n+      '@smithy/types': 3.7.1\n+      '@smithy/util-base64': 3.0.0\n+      '@smithy/util-buffer-from': 3.0.0\n+      '@smithy/util-hex-encoding': 3.0.0\n+      '@smithy/util-utf8': 3.0.0\n+      tslib: 2.8.1\n+\n   '@smithy/util-uri-escape@3.0.0':\n     dependencies:\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   '@smithy/util-utf8@2.3.0':\n     dependencies:\n@@ -20494,7 +21331,7 @@ snapshots:\n   camel-case@4.1.2:\n     dependencies:\n       pascal-case: 3.1.2\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   camelcase-css@2.0.1: {}\n \n@@ -20952,7 +21789,7 @@ snapshots:\n   constant-case@3.0.4:\n     dependencies:\n       no-case: 3.0.4\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n       upper-case: 2.0.2\n \n   content-disposition@0.5.2: {}\n@@ -21589,7 +22426,7 @@ snapshots:\n   dot-case@3.0.4:\n     dependencies:\n       no-case: 3.0.4\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   dot-prop@5.3.0:\n     dependencies:\n@@ -23299,7 +24136,7 @@ snapshots:\n   header-case@2.0.4:\n     dependencies:\n       capital-case: 1.0.4\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   headers-utils@1.2.5: {}\n \n@@ -24608,7 +25445,7 @@ snapshots:\n \n   lower-case@2.0.2:\n     dependencies:\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   lowercase-keys@1.0.1: {}\n \n@@ -25534,7 +26371,7 @@ snapshots:\n   no-case@3.0.4:\n     dependencies:\n       lower-case: 2.0.2\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   nock@14.0.0-beta.14:\n     dependencies:\n@@ -26054,7 +26891,7 @@ snapshots:\n   param-case@3.0.4:\n     dependencies:\n       dot-case: 3.0.4\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   parent-module@1.0.1:\n     dependencies:\n@@ -26139,14 +26976,14 @@ snapshots:\n   pascal-case@3.1.2:\n     dependencies:\n       no-case: 3.0.4\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   path-browserify@1.0.1: {}\n \n   path-case@3.0.4:\n     dependencies:\n       dot-case: 3.0.4\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   path-exists@3.0.0: {}\n \n@@ -27461,7 +28298,7 @@ snapshots:\n   sentence-case@3.0.4:\n     dependencies:\n       no-case: 3.0.4\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n       upper-case-first: 2.0.2\n \n   serialize-error@11.0.3:\n@@ -27627,7 +28464,7 @@ snapshots:\n   snake-case@3.0.4:\n     dependencies:\n       dot-case: 3.0.4\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   sockjs@0.3.24:\n     dependencies:\n@@ -28635,11 +29472,11 @@ snapshots:\n \n   upper-case-first@2.0.2:\n     dependencies:\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   upper-case@2.0.2:\n     dependencies:\n-      tslib: 2.7.0\n+      tslib: 2.8.1\n \n   uri-js@4.4.1:\n     dependencies:\n",
    "test_patch": "diff --git a/.github/workflows/test-cloud.yml b/.github/workflows/test-cloud.yml\nindex 84d3157ce61..e1aa448479d 100644\n--- a/.github/workflows/test-cloud.yml\n+++ b/.github/workflows/test-cloud.yml\n@@ -38,6 +38,14 @@ jobs:\n           SAUCE_USERNAME_PARAM: ${{secrets.SAUCE_USERNAME}}\n           SAUCE_ACCESS_KEY_PARAM: ${{secrets.SAUCE_ACCESS_KEY}}\n \n+      - name: E2E Connection AWS Device Farm\n+        run: pnpm run test:e2e:aws\n+        if: github.ref == 'refs/heads/main'\n+        env:\n+          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}\n+          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}\n+          AWS_DEVICE_FARM_ARN: ${{secrets.AWS_DEVICE_FARM_ARN}}\n+\n       - uses: actions/upload-artifact@v4\n         if: failure()\n         with:\n\ndiff --git a/e2e/launch/aws.test.ts b/e2e/launch/aws.test.ts\nnew file mode 100644\nindex 00000000000..c9136e85894\n--- /dev/null\n+++ b/e2e/launch/aws.test.ts\n@@ -0,0 +1,46 @@\n+import { test, expect } from 'vitest'\n+import { remote } from 'webdriverio'\n+import AWS from '@aws-sdk/client-device-farm'\n+\n+let browser: WebdriverIO.Browser | undefined\n+\n+if (!process.env.AWS_ACCESS_KEY_ID || !process.env.AWS_SECRET_ACCESS_KEY) {\n+    throw new Error('Please provide AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY in your environment')\n+}\n+\n+const projectArn = process.env.AWS_DEVICE_FARM_ARN\n+if (!projectArn) {\n+    throw new Error('Please provide AWS_DEVICE_FARM_ARN in your environment')\n+}\n+\n+test('allow to attach to an existing session', async () => {\n+    const devicefarm = new AWS.DeviceFarm({ region: 'us-west-2' })\n+    const testGridUrlResult = await devicefarm.createTestGridUrl({\n+        projectArn,\n+        expiresInSeconds: 600\n+    })\n+\n+    if (!testGridUrlResult.url) {\n+        throw new Error('Could not create a test grid url')\n+    }\n+\n+    const url = new URL(testGridUrlResult.url)\n+    browser = await remote({\n+        logLevel: 'trace',\n+        hostname: url.host,\n+        path: url.pathname,\n+        protocol: 'https',\n+        port: 443,\n+        connectionRetryTimeout: 180000,\n+        capabilities: {\n+            browserName: 'chrome',\n+        }\n+    })\n+\n+    await browser.url('http://guinea-pig.webdriver.io/')\n+\n+    const title = await browser.getTitle()\n+    expect(title).toBe('WebdriverJS Testpage')\n+\n+    await browser.deleteSession()\n+})\n\ndiff --git a/e2e/attach.test.ts b/e2e/standalone/attach.test.ts\nsimilarity index 100%\nrename from e2e/attach.test.ts\nrename to e2e/standalone/attach.test.ts\n\ndiff --git a/e2e/vitest.config.ts b/e2e/vitest.config.ts\nindex 12950e2460b..8e3fbc16cc3 100644\n--- a/e2e/vitest.config.ts\n+++ b/e2e/vitest.config.ts\n@@ -3,7 +3,10 @@ import { defineConfig } from 'vitest/config'\n export default defineConfig({\n     test: {\n         testTimeout: 1000 * 60 * 3,\n-        include: ['./e2e/*.test.ts'],\n+        include: [\n+            './e2e/standalone/*.test.ts',\n+            './e2e/launch/*.test.ts'\n+        ],\n         hookTimeout: 60 * 1000\n     }\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13892",
    "pr_id": 13892,
    "issue_id": 13882,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Multi tabs, after calling closeWindow , switchWindow fails with 'WebDriverError: no such window: target window already closed'\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.2.11\n\n### Node.js Version\n\nv20.12.1\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\n'wdio:enforceWebDriverClassic': true\n```\n\n\n### What happened?\n\nI upgraded from wdio v8.33.0 to v9.2.11\n\n### What is your expected behavior?\n\nAfter opening more than 2 tabs if i close the latest, I expect to be able to switchWindow to another opened tab. \r\nIt is not more possible with wdiov9 (it was ok with 8.33.0) as it fails with WebDriverError: no such window: target window already closed error.\r\n\r\n\n\n### How to reproduce the bug.\n\n```javascript\r\ndescribe('open multiple tabs and closeWindow then switchWindow', function () {\r\n  it('open multiple tabs and closeWindow then switchWindow', async function () {\r\n    await browser.url('https://www.google.com/');\r\n    await browser.newWindow('https://webdriver.io/docs/api/');\r\n    await browser.newWindow('https://github.com/');\r\n    await browser.pause(1000);\r\n    await browser.closeWindow();\r\n    await browser.switchWindow('google');\r\n\r\n    /*\r\n  //getting current handle also triggers the error\r\n  let currentHandle = await browser.getWindowHandle();\r\n  */\r\n  });\r\n});\r\n\r\n``` \n\n### Relevant log output\n\n```typescript\n2024-11-14T16:24:20.087Z INFO @wdio/cli:launcher: Run onPrepare hook\r\n2024-11-14T16:24:20.093Z DEBUG @wdio/cli:utils: Finished to run \"onPrepare\" hook in 3ms\r\n2024-11-14T16:24:20.094Z INFO @wdio/utils: Setting up browser driver for: chrome@stable\r\n2024-11-14T16:24:20.102Z INFO @wdio/utils: Setting up browser binaries for: chrome@stable\r\n2024-11-14T16:24:20.266Z INFO webdriver: Using Chromedriver v131.0.6778.69 from cache directory C:\\Users\\me\\Documents\\\\webdriverStorage\r\n2024-11-14T16:24:20.514Z INFO webdriver: Setting up chrome v131.0.6778.69\r\n2024-11-14T16:24:20.541Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2024-11-14T16:24:20.542Z DEBUG @wdio/cli:utils: Finished to run \"onWorkerStart\" hook in 1ms\r\n2024-11-14T16:24:20.543Z INFO @wdio/local-runner: Start worker 0-0 with arg: testFull.conf.js --spec e2e\\specs\\test.spec.js\r\n2024-11-14T16:24:20.551Z DEBUG @wdio/local-runner: Send command run to worker with cid \"0-0\"\r\n[0-0] 2024-11-14T16:24:22.975Z INFO @wdio/local-runner: Run worker command: run\r\n[0-0] 2024-11-14T16:24:24.222Z DEBUG @wdio/runner: init remote session\r\n[0-0] 2024-11-14T16:24:24.226Z DEBUG @wdio/utils:shim: Finished to run \"beforeSession\" hook in 0ms\r\n[0-0] RUNNING in chrome - file:///C:/Users/me/Documents/e2e/specs/test.spec.js\r\n[0-0] 2024-11-14T16:24:24.461Z DEBUG @wdio/runner: init remote session\r\n[0-0] 2024-11-14T16:24:24.484Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n[0-0] 2024-11-14T16:24:25.701Z INFO webdriver: Setting up chrome v131.0.6778.69\r\n[0-0] 2024-11-14T16:24:25.737Z INFO webdriver: Using Chromedriver v131.0.6778.69 from cache directory C:\\Users\\me\\Documents\\\\webdriverStorage\r\n[0-0] 2024-11-14T16:24:25.769Z INFO chromedriver: Starting ChromeDriver 131.0.6778.69 (77e2244bbcda3ab9362d5b8aeeb006a86a6d4832-refs/branch-heads/6778@{#2141}) on port 56957\r\n[0-0] 2024-11-14T16:24:25.770Z INFO chromedriver: Remote connections are allowed by an allowlist (0.0.0.0).\r\n[0-0] 2024-11-14T16:24:25.771Z INFO chromedriver: Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.\r\n[0-0] 2024-11-14T16:24:25.774Z INFO chromedriver: ChromeDriver was started successfully on port 56957.\r\n[0-0] 2024-11-14T16:24:26.768Z INFO @wdio/utils: Started Chromedriver v131.0.6778.69 with params --port=56957 --allowed-origins=* --allowed-ips=0.0.0.0 in 1403ms on port 56957\r\n[0-0] 2024-11-14T16:24:26.794Z INFO webdriver: [POST] http://localhost:56957/session\r\n[0-0] 2024-11-14T16:24:26.794Z INFO webdriver: DATA {\r\n[0-0]   capabilities: {\r\n[0-0]     alwaysMatch: {\r\n[0-0]       browserName: 'chrome',\r\n[0-0]       acceptInsecureCerts: true,\r\n[0-0]       'wdio:enforceWebDriverClassic': true,\r\n[0-0]       browserVersion: 'stable',\r\n[0-0]       'goog:chromeOptions': [Object]\r\n[0-0]     },\r\n[0-0]     firstMatch: [ {} ]\r\n[0-0]   }\r\n[0-0] }\r\n[2292:20144:1114/172427.117:ERROR:sandbox_win.cc(791)] Sandbox cannot access executable. Check filesystem permissions are valid. See https://bit.ly/31yqMJR.: Acc├¿s refus├®. (0x5)\r\n\r\nDevTools listening on ws://127.0.0.1:56983/devtools/browser/f1464e91-e855-42fc-b25d-dd2be36c6754\r\n[2292:19064:1114/172427.274:ERROR:network_service_instance_impl.cc(613)] Network service crashed, restarting service.\r\n[0-0] 2024-11-14T16:24:27.625Z INFO webdriver: COMMAND setWindowRect(null, null, 1920, 1080)\r\n[0-0] 2024-11-14T16:24:27.627Z INFO webdriver: [POST] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window/rect\r\n[0-0] 2024-11-14T16:24:27.627Z INFO webdriver: DATA { x: null, y: null, width: 1920, height: 1080 }\r\n[0-0] 2024-11-14T16:24:27.736Z INFO webdriver: RESULT { height: 1080, width: 1920, x: 10, y: 10 }\r\n[0-0] 2024-11-14T16:24:27.738Z DEBUG @wdio/utils:shim: Finished to run \"before\" hook in 116ms\r\n[0-0] 2024-11-14T16:24:27.755Z DEBUG @wdio/utils:shim: Finished to run \"beforeTest\" hook in 3ms\r\n[0-0] 2024-11-14T16:24:27.758Z INFO webdriver: COMMAND navigateTo(\"https://www.google.com/\")\r\n[0-0] 2024-11-14T16:24:27.759Z INFO webdriver: [POST] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/url\r\n[0-0] 2024-11-14T16:24:27.760Z INFO webdriver: DATA { url: 'https://www.google.com/' }\r\n[0-0] 2024-11-14T16:24:28.826Z INFO webdriver: RESULT null\r\n[0-0] 2024-11-14T16:24:28.828Z INFO webdriver: COMMAND getWindowHandles()\r\n[0-0] 2024-11-14T16:24:28.829Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window/handles\r\n[0-0] 2024-11-14T16:24:28.844Z INFO webdriver: RESULT [ '63AECD1F8EB92E6E6691BFC8451343B8' ]\r\n[0-0] 2024-11-14T16:24:28.845Z INFO webdriver: COMMAND executeScript(\"\r\n[0-0]             var __defProp = Object.defineProperty;var __name = function (target, value) { return __defProp(target, 'name', { value: value, configurable: true }); };var __globalThis = (typeof globalThis === 'object' && globalThis) || (typeof window === 'object' && window);__globalThis.__name = __name;\r\n[0-0]             return (function newWindow(url, windowName, windowFeatures) {\r\n[0-0]   window.open(url, windowName || \"\", windowFeatures || \"\");\r\n[0-0] }).apply(null, arguments)\r\n[0-0]         \", <object>)\r\n[0-0] 2024-11-14T16:24:28.846Z INFO webdriver: [POST] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/execute/sync\r\n[0-0] 2024-11-14T16:24:28.846Z INFO webdriver: DATA {\r\n[0-0]   script: 'newWindow(...) [471 bytes]',\r\n[0-0]   args: [ 'https://webdriver.io/docs/api/', '', '' ]\r\n[0-0] }\r\n[0-0] 2024-11-14T16:24:28.914Z INFO webdriver: RESULT null\r\n[0-0] 2024-11-14T16:24:28.915Z INFO webdriver: COMMAND getWindowHandles()\r\n[0-0] 2024-11-14T16:24:28.916Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window/handles\r\n[0-0] 2024-11-14T16:24:28.938Z INFO webdriver: RESULT [\r\n[0-0]   '63AECD1F8EB92E6E6691BFC8451343B8',\r\n[0-0]   'EB182F79E192981E0B7706346D460F67'\r\n[0-0] ]\r\n[0-0] 2024-11-14T16:24:28.940Z INFO webdriver: COMMAND getWindowHandles()\r\n[0-0] 2024-11-14T16:24:28.941Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window/handles\r\n[0-0] 2024-11-14T16:24:28.957Z INFO webdriver: RESULT [\r\n[0-0]   '63AECD1F8EB92E6E6691BFC8451343B8',\r\n[0-0]   'EB182F79E192981E0B7706346D460F67'\r\n[0-0] ]\r\n[0-0] 2024-11-14T16:24:28.959Z INFO webdriver: COMMAND switchToWindow(\"<Screenshot[base64]>\")\r\n[0-0] 2024-11-14T16:24:28.960Z INFO webdriver: [POST] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window\r\n[0-0] 2024-11-14T16:24:28.961Z INFO webdriver: DATA { handle: 'EB182F79E192981E0B7706346D460F67' }\r\n[0-0] 2024-11-14T16:24:28.987Z INFO webdriver: RESULT null\r\n[0-0] 2024-11-14T16:24:28.988Z INFO webdriver: COMMAND getWindowHandles()\r\n[0-0] 2024-11-14T16:24:28.989Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window/handles\r\n[0-0] 2024-11-14T16:24:29.004Z INFO webdriver: RESULT [\r\n[0-0]   '63AECD1F8EB92E6E6691BFC8451343B8',\r\n[0-0]   'EB182F79E192981E0B7706346D460F67'\r\n[0-0] ]\r\n[0-0] 2024-11-14T16:24:29.006Z INFO webdriver: COMMAND executeScript(\"\r\n[0-0]             var __defProp = Object.defineProperty;var __name = function (target, value) { return __defProp(target, 'name', { value: value, configurable: true }); };var __globalThis = (typeof globalThis === 'object' && globalThis) || (typeof window === 'object' && window);__globalThis.__name = __name;\r\n[0-0]             return (function newWindow(url, windowName, windowFeatures) {\r\n[0-0]   window.open(url, windowName || \"\", windowFeatures || \"\");\r\n[0-0] }).apply(null, arguments)\r\n[0-0]         \", <object>)\r\n[0-0] 2024-11-14T16:24:29.007Z INFO webdriver: [POST] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/execute/sync\r\n[0-0] 2024-11-14T16:24:29.007Z INFO webdriver: DATA {\r\n[0-0]   script: 'newWindow(...) [471 bytes]',\r\n[0-0]   args: [ 'https://github.com/', '', '' ]\r\n[0-0] }\r\n[0-0] 2024-11-14T16:24:30.246Z INFO webdriver: RESULT null\r\n[0-0] 2024-11-14T16:24:30.247Z INFO webdriver: COMMAND getWindowHandles()\r\n[0-0] 2024-11-14T16:24:30.248Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window/handles\r\n[0-0] 2024-11-14T16:24:30.341Z INFO webdriver: RESULT [\r\n[0-0]   '63AECD1F8EB92E6E6691BFC8451343B8',\r\n[0-0]   'EB182F79E192981E0B7706346D460F67',\r\n[0-0]   'B62FF6E9ECFB80B484601C697047DB42'\r\n[0-0] ]\r\n[0-0] 2024-11-14T16:24:30.343Z INFO webdriver: COMMAND getWindowHandles()\r\n[0-0] 2024-11-14T16:24:30.344Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window/handles\r\n[0-0] 2024-11-14T16:24:30.359Z INFO webdriver: RESULT [\r\n[0-0]   '63AECD1F8EB92E6E6691BFC8451343B8',\r\n[0-0]   'EB182F79E192981E0B7706346D460F67',\r\n[0-0]   'B62FF6E9ECFB80B484601C697047DB42'\r\n[0-0] ]\r\n[0-0] 2024-11-14T16:24:30.361Z INFO webdriver: COMMAND switchToWindow(\"<Screenshot[base64]>\")\r\n[0-0] 2024-11-14T16:24:30.362Z INFO webdriver: [POST] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window\r\n[0-0] 2024-11-14T16:24:30.362Z INFO webdriver: DATA { handle: 'B62FF6E9ECFB80B484601C697047DB42' }\r\n[0-0] 2024-11-14T16:24:30.372Z INFO webdriver: RESULT null\r\n[0-0] 2024-11-14T16:24:31.414Z INFO webdriver: COMMAND closeWindow()\r\n[0-0] 2024-11-14T16:24:31.416Z INFO webdriver: [DELETE] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window\r\n[0-0] 2024-11-14T16:24:31.830Z INFO webdriver: RESULT [\r\n[0-0]   '63AECD1F8EB92E6E6691BFC8451343B8',\r\n[0-0]   'EB182F79E192981E0B7706346D460F67'\r\n[0-0] ]\r\n[0-0] 2024-11-14T16:24:31.832Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-11-14T16:24:31.833Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window\r\n[0-0] 2024-11-14T16:24:31.840Z DEBUG webdriver: request failed due to response error: no such window\r\n[0-0] 2024-11-14T16:24:31.841Z WARN webdriver: WebDriverError: no such window: target window already closed\r\n[0-0] from unknown error: web view not found\r\n[0-0]   (Session info: chrome=131.0.6778.69) when running \"window\" with method \"GET\"\r\n[0-0] 2024-11-14T16:24:31.842Z INFO webdriver: Retrying 1/3\r\n[0-0] 2024-11-14T16:24:31.843Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window\r\n[0-0] 2024-11-14T16:24:31.856Z DEBUG webdriver: request failed due to response error: no such window\r\n[0-0] 2024-11-14T16:24:32.365Z WARN webdriver: WebDriverError: no such window: target window already closed\r\n[0-0] from unknown error: web view not found\r\n[0-0]   (Session info: chrome=131.0.6778.69) when running \"window\" with method \"GET\"\r\n[0-0] 2024-11-14T16:24:32.367Z INFO webdriver: Retrying 2/3\r\n[0-0] 2024-11-14T16:24:32.367Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window\r\n[0-0] 2024-11-14T16:24:32.374Z DEBUG webdriver: request failed due to response error: no such window\r\n[0-0] 2024-11-14T16:24:33.384Z WARN webdriver: WebDriverError: no such window: target window already closed\r\n[0-0] from unknown error: web view not found\r\n[0-0]   (Session info: chrome=131.0.6778.69) when running \"window\" with method \"GET\"\r\n[0-0] 2024-11-14T16:24:33.385Z INFO webdriver: Retrying 3/3\r\n[0-0] 2024-11-14T16:24:33.385Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/window\r\n[0-0] 2024-11-14T16:24:33.391Z DEBUG webdriver: request failed due to response error: no such window\r\n[0-0] 2024-11-14T16:24:33.391Z ERROR webdriver: WebDriverError: no such window: target window already closed\r\n[0-0] from unknown error: web view not found\r\n[0-0]   (Session info: chrome=131.0.6778.69) when running \"window\" with method \"GET\"\r\n[0-0] 2024-11-14T16:24:33.440Z INFO webdriver: COMMAND takeScreenshot()\r\n[0-0] 2024-11-14T16:24:33.441Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/screenshot\r\n[0-0] 2024-11-14T16:24:33.446Z DEBUG webdriver: request failed due to response error: no such window\r\n[0-0] 2024-11-14T16:24:33.446Z WARN webdriver: WebDriverError: no such window: target window already closed\r\n[0-0] from unknown error: web view not found\r\n[0-0]   (Session info: chrome=131.0.6778.69) when running \"screenshot\" with method \"GET\"\r\n[0-0] 2024-11-14T16:24:33.447Z INFO webdriver: Retrying 1/3\r\n[0-0] 2024-11-14T16:24:33.447Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/screenshot\r\n[0-0] 2024-11-14T16:24:33.455Z DEBUG webdriver: request failed due to response error: no such window\r\n[0-0] 2024-11-14T16:24:33.963Z WARN webdriver: WebDriverError: no such window: target window already closed\r\n[0-0] from unknown error: web view not found\r\n[0-0]   (Session info: chrome=131.0.6778.69) when running \"screenshot\" with method \"GET\"\r\n[0-0] 2024-11-14T16:24:33.964Z INFO webdriver: Retrying 2/3\r\n[0-0] 2024-11-14T16:24:33.964Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/screenshot\r\n[0-0] 2024-11-14T16:24:33.971Z DEBUG webdriver: request failed due to response error: no such window\r\n[0-0] 2024-11-14T16:24:34.973Z WARN webdriver: WebDriverError: no such window: target window already closed\r\n[0-0] from unknown error: web view not found\r\n[0-0]   (Session info: chrome=131.0.6778.69) when running \"screenshot\" with method \"GET\"\r\n[0-0] 2024-11-14T16:24:34.974Z INFO webdriver: Retrying 3/3\r\n[0-0] 2024-11-14T16:24:34.975Z INFO webdriver: [GET] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c/screenshot\r\n[0-0] 2024-11-14T16:24:34.983Z DEBUG webdriver: request failed due to response error: no such window\r\n[0-0] 2024-11-14T16:24:34.983Z ERROR webdriver: WebDriverError: no such window: target window already closed\r\n[0-0] from unknown error: web view not found\r\n[0-0]   (Session info: chrome=131.0.6778.69) when running \"screenshot\" with method \"GET\"\r\n[0-0] 2024-11-14T16:24:34.985Z ERROR @wdio/utils:shim: no such window: WebDriverError: no such window: target window already closed\r\n[0-0] from unknown error: web view not found\r\n[0-0]   (Session info: chrome=131.0.6778.69) when running \"screenshot\" with method \"GET\"\r\n[0-0]     at FetchRequest._request (C:\\Users\\me\\Documents\\\\node_modules\\webdriver\\build\\index.js:1373:19)\r\n[0-0]     at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n[0-0]     at Browser.wrapCommandFn (C:\\Users\\me\\Documents\\\\node_modules\\@wdio\\utils\\build\\index.js:884:23)\r\n[0-0]     at async Object.afterTest (file:///C:/Users/me/Documents/shared.conf.js:438:7)\r\n[0-0]     at async Promise.all (index 0)\r\n[0-0]     at executeHooksWithArgs (C:\\Users\\me\\Documents\\\\node_modules\\@wdio\\utils\\build\\index.js:867:18)\r\n[0-0]     at Context.testFrameworkFnWrapper (C:\\Users\\me\\Documents\\\\node_modules\\@wdio\\utils\\build\\index.js:1103:38)\r\n[0-0] 2024-11-14T16:24:34.986Z DEBUG @wdio/utils:shim: Finished to run \"afterTest\" hook in 1546ms\r\n[0-0] Error in \"AfterTest Hook\"\r\nWebDriverError: no such window: target window already closed\r\nfrom unknown error: web view not found\r\n  (Session info: chrome=131.0.6778.69) when running \"screenshot\" with method \"GET\"\r\n[0-0] no such window in \"open multiple tabs and closeWindow then switchWindow.open multiple tabs and closeWindow then switchWindow\"\r\nno such window: WebDriverError: no such window: target window already closed\r\nfrom unknown error: web view not found\r\n  (Session info: chrome=131.0.6778.69) when running \"window\" with method \"GET\"\r\n    at FetchRequest._request (C:\\Users\\me\\Documents\\\\node_modules\\webdriver\\build\\index.js:1373:19)\r\n    at Browser.wrapCommandFn (C:\\Users\\me\\Documents\\\\node_modules\\@wdio\\utils\\build\\index.js:884:23)\r\n    at Browser.switchWindow (C:\\Users\\me\\Documents\\\\node_modules\\webdriverio\\build\\index.js:4144:25)\r\n    at Browser.wrapCommandFn (C:\\Users\\me\\Documents\\\\node_modules\\@wdio\\utils\\build\\index.js:884:23)\r\n    at async Context.<anonymous> (file:///C:/Users/me/Documents/e2e/specs/test.spec.js:8:5)\r\n    at Context.executeAsync (C:\\Users\\me\\Documents\\\\node_modules\\@wdio\\utils\\build\\index.js:1004:20)\r\n    at Context.testFrameworkFnWrapper (C:\\Users\\me\\Documents\\\\node_modules\\@wdio\\utils\\build\\index.js:1075:14)\r\n[0-0] 2024-11-14T16:24:34.992Z DEBUG @wdio/utils:shim: Finished to run \"after\" hook in 1ms\r\n[0-0] 2024-11-14T16:24:34.993Z INFO webdriver: COMMAND deleteSession()\r\n[0-0] 2024-11-14T16:24:34.993Z INFO webdriver: [DELETE] http://localhost:56957/session/8d3fc59d4972892622927cee678a045c\r\n[0-0] 2024-11-14T16:24:35.390Z INFO webdriver: RESULT null\r\n[0-0] 2024-11-14T16:24:35.391Z INFO webdriver: Kill driver process with PID 3780\r\n2024-11-14T16:24:35.634Z DEBUG @wdio/local-runner: Runner 0-0 finished with exit code 1\r\n[0-0] FAILED in chrome - file:///C:/Users/me/Documents/e2e/specs/test.spec.js\r\n2024-11-14T16:24:35.636Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\r\n2024-11-14T16:24:35.643Z DEBUG @wdio/cli:utils: Finished to run \"onWorkerEnd\" hook in 0ms\r\n2024-11-14T16:24:35.644Z INFO @wdio/cli:launcher: Run onComplete hook\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 2890,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "e2e/wdio/headless/test.e2e.ts",
      "packages/webdriverio/src/context.ts"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/test.e2e.ts"
    ],
    "base_commit": "a5e135328dccabd39b98c55e4655ea8f948e0b22",
    "head_commit": "a7dce63db345bd9c9b74a7a1c632dafc8bd5b462",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13892",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13892",
    "dockerfile": "",
    "pr_merged_at": "2024-11-20T18:56:07.000Z",
    "patch": "diff --git a/packages/webdriverio/src/context.ts b/packages/webdriverio/src/context.ts\nindex 8524c214278..a549b4d36e5 100644\n--- a/packages/webdriverio/src/context.ts\n+++ b/packages/webdriverio/src/context.ts\n@@ -51,6 +51,20 @@ export class ContextManager {\n                 this.#currentContext = undefined\n             }\n         })\n+\n+        /**\n+         * Listens for the 'closeWindow' browser command to handle context changes.\n+         */\n+        this.#browser.on('result', (event) => {\n+            /**\n+             * the `closeWindow` command returns:\n+             *   > the result of running the remote end steps for the Get Window Handles command, with session, URL variables and parameters.\n+             */\n+            if (event.command === 'closeWindow') {\n+                this.#currentContext = (event.result as { value: string[] }).value[0]\n+                return this.#browser.switchToWindow(this.#currentContext)\n+            }\n+        })\n     }\n \n     /**\n@@ -69,7 +83,7 @@ export class ContextManager {\n         }\n \n         const windowHandle = await this.#browser.getWindowHandle()\n-        this.#currentContext = windowHandle\n+        this.setCurrentContext(windowHandle)\n         return windowHandle\n     }\n \n",
    "test_patch": "diff --git a/e2e/wdio/headless/test.e2e.ts b/e2e/wdio/headless/test.e2e.ts\nindex f705fd73107..371ce5783db 100644\n--- a/e2e/wdio/headless/test.e2e.ts\n+++ b/e2e/wdio/headless/test.e2e.ts\n@@ -145,7 +145,10 @@ describe('main suite 1', () => {\n             it(`moves to position x,y outside of iframe when passing the arguments ${JSON.stringify(input)}`, async () => {\n                 await browser.execute(() => {\n                     const mouse = { x:0, y:0 }\n-                    document.onmousemove = function(e){ mouse.x = e.clientX, mouse.y = e.clientY }\n+                    document.onmousemove = (e) => {\n+                        mouse.x = e.clientX\n+                        mouse.y = e.clientY\n+                    }\n                     //@ts-ignore\n                     document.mouseMoveTo = mouse\n                 })\n@@ -182,7 +185,10 @@ describe('main suite 1', () => {\n             it(`moves to position x,y inside of iframe when passing the arguments ${JSON.stringify(input)}`, async () => {\n                 await browser.execute(() => {\n                     const mouse = { x: 0, y: 0 }\n-                    document.onmousemove = function(e){ mouse.x = e.clientX, mouse.y = e.clientY }\n+                    document.onmousemove = (e) => {\n+                        mouse.x = e.clientX\n+                        mouse.y = e.clientY\n+                    }\n                     //@ts-ignore\n                     document.mouseMoveTo = mouse\n                 })\n@@ -254,10 +260,10 @@ describe('main suite 1', () => {\n             const inputDescription = typeof input === 'boolean' ? input : JSON.stringify(input)\n             it(`should vertically scroll like the native scrollIntoView when passing ${inputDescription} as argument`, async () => {\n                 const searchInput = await $('.searchinput')\n-                await searchInput.scrollIntoView(input as any)\n+                await searchInput.scrollIntoView(input)\n                 const wdioY = await browser.execute(() => window.scrollY)\n \n-                await browser.execute((elem, _params) => elem.scrollIntoView(_params), searchInput, input as any)\n+                await browser.execute((elem, _params) => elem.scrollIntoView(_params), searchInput, input)\n                 const nativeY = await browser.execute(() => window.scrollY)\n \n                 expect(Math.floor(wdioY)).toEqual(Math.floor(nativeY))\n@@ -265,10 +271,10 @@ describe('main suite 1', () => {\n \n             it(`should horizontally scroll like the native scrollIntoView when passing ${inputDescription} as argument`, async () => {\n                 const searchInput = await $('.searchinput')\n-                await searchInput.scrollIntoView(input as any)\n+                await searchInput.scrollIntoView(input)\n                 const wdioX = await browser.execute(() => window.scrollX)\n \n-                await browser.execute((elem, _params) => elem.scrollIntoView(_params), searchInput, input as any)\n+                await browser.execute((elem, _params) => elem.scrollIntoView(_params), searchInput, input)\n                 const nativeX = await browser.execute(() => window.scrollX)\n \n                 expect(Math.floor(wdioX)).toEqual(Math.floor(nativeX))\n@@ -486,6 +492,20 @@ describe('main suite 1', () => {\n             // Verify element text to ensure the browsing context has changed and can interact with elements\n             await expect(await $('.page').getText()).toBe('Second page!')\n         })\n+\n+        it('should see that content is no longer displayed when window is closed', async () => {\n+            await browser.url('https://the-internet.herokuapp.com/iframe')\n+            const elementalSeleniumLink = await $('/html/body/div[3]/div/div/a')\n+            await elementalSeleniumLink.waitForDisplayed()\n+            await elementalSeleniumLink.click()\n+            await browser.waitUntil(async () => (await browser.getWindowHandles()).length === 3)\n+            await browser.switchWindow('https://elementalselenium.com/')\n+            await $('#__docusaurus_skipToContent_fallback').waitForDisplayed()\n+            await browser.closeWindow()\n+            await $('#__docusaurus_skipToContent_fallback').waitForDisplayed({ reverse: true })\n+            await browser.waitUntil(async () => (await browser.getWindowHandles()).length === 2)\n+            await browser.switchWindow('https://the-internet.herokuapp.com/iframe')\n+        })\n     })\n \n     describe('switchFrame', () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13878",
    "pr_id": 13878,
    "issue_id": 13875,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Skips creating multiremote session when that session is excluded\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.2.11\n\n### Node.js Version\n\nv20.9.0\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n_No response_\n\n### What happened?\n\nWhen you have for example two capabilities defined and a suite is included in `specs`, but the same suite is excluded for one of the capabilities via:\r\n```\r\n'wdio:exclude': [\r\n                    'test/example.spec.ts'\r\n                ]\r\n```\r\nStill both browsers are open even though one of them is excluded from that spec run.\r\n\r\n\n\n### What is your expected behavior?\n\nI expect to have the browser capability  participant1 to be used in this scenario and only one browser session to be created.\r\n\n\n### How to reproduce the bug.\n\nhave a file `test/example.spec.ts`:\r\n```\r\ndescribe('some example test', () => {\r\n    console.log('the example after describe');\r\n    it('abc', async () => {\r\n        console.log('the example it');\r\n    });\r\n});\r\n```\r\nUse the following config:\r\n```\r\nimport url from 'node:url'\r\nimport path from 'node:path'\r\n\r\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url))\r\n\r\nexport const config: Omit<WebdriverIO.Config, 'capabilities'> = {\r\n    runner: 'local',\r\n    specs: [\r\n        'test/example.spec.ts'\r\n    ],\r\n\r\n    capabilities: {\r\n        participant1: {\r\n            capabilities: {\r\n                browserName: 'chrome'\r\n            }\r\n        },\r\n        participant2: {\r\n            capabilities: {\r\n                browserName: 'chrome',\r\n                'wdio:exclude': [\r\n                    'test/example.spec.ts'\r\n                ]\r\n            }\r\n        }\r\n    },\r\n\r\n    maxInstances: 1,\r\n    logLevel: 'trace',\r\n    outputDir: path.resolve(__dirname, 'logs'),\r\n    framework: 'jasmine',\r\n    jasmineOpts: {\r\n        defaultTimeoutInterval: 60000,\r\n    }\r\n}\r\n```\r\nUse the [package.json](https://github.com/webdriverio/jasmine-boilerplate/blob/main/package.json) from jasmine-boilerplate.\r\n\r\nWhen you run the example it will create two browser windows although participant2 has that test excluded.\n\n### Relevant log output\n\n```typescript\nwdio-0-0-chromedriver.log\r\n\r\nStarting ChromeDriver 130.0.6723.117 (37382504fe66965a688029d08706ddadca7ceb46-refs/branch-heads/6723@{#1765}) on port 54252\r\nRemote connections are allowed by an allowlist (0.0.0.0).\r\nPlease see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.\r\nChromeDriver was started successfully on port 54252.\r\n```\r\n\r\nwdio-0-0.log:\r\n```\r\n2024-11-11T23:38:31.238Z INFO @wdio/local-runner: Run worker command: run\r\n2024-11-11T23:38:31.243Z DEBUG @wdio/runner: init multiremote session\r\n2024-11-11T23:38:31.306Z DEBUG @wdio/runner: init multiremote session\r\n2024-11-11T23:38:31.307Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n2024-11-11T23:38:31.307Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n2024-11-11T23:38:31.603Z INFO webdriver: Using Chromedriver v130.0.6723.117 from cache directory /var/folders/ds/rc1dsq2s12n1yg6wp9mfr4900000gq/T\r\n2024-11-11T23:38:31.608Z INFO webdriver: Using Chromedriver v130.0.6723.117 from cache directory /var/folders/ds/rc1dsq2s12n1yg6wp9mfr4900000gq/T\r\n2024-11-11T23:38:32.618Z INFO @wdio/utils: Started Chromedriver v130.0.6723.117 with params --port=54251 --allowed-origins=* --allowed-ips=0.0.0.0 in 1090ms on port 54251\r\n2024-11-11T23:38:32.648Z INFO webdriver: [POST] http://localhost:54251/session\r\n2024-11-11T23:38:32.648Z INFO webdriver: DATA {\r\n  capabilities: {\r\n    alwaysMatch: {\r\n      browserName: 'chrome',\r\n      'goog:chromeOptions': [Object],\r\n      webSocketUrl: true,\r\n      unhandledPromptBehavior: 'ignore'\r\n    },\r\n    firstMatch: [ {} ]\r\n  }\r\n}\r\n2024-11-11T23:38:32.653Z INFO @wdio/utils: Started Chromedriver v130.0.6723.117 with params --port=54252 --allowed-origins=* --allowed-ips=0.0.0.0 in 1124ms on port 54252\r\n2024-11-11T23:38:32.653Z INFO webdriver: [POST] http://localhost:54252/session\r\n2024-11-11T23:38:32.653Z INFO webdriver: DATA {\r\n  capabilities: {\r\n    alwaysMatch: {\r\n      browserName: 'chrome',\r\n      'wdio:exclude': [Array],\r\n      'goog:chromeOptions': [Object],\r\n      webSocketUrl: true,\r\n      unhandledPromptBehavior: 'ignore'\r\n    },\r\n    firstMatch: [ {} ]\r\n  }\r\n}\r\n2024-11-11T23:38:33.816Z INFO webdriver: Register BiDi handler for session with id 67595f98288e27a3cb7ddbffd5aaafcc\r\n2024-11-11T23:38:33.816Z INFO webdriver: Connect to webSocketUrl ws://127.0.0.1:54252/session/67595f98288e27a3cb7ddbffd5aaafcc\r\n2024-11-11T23:38:33.838Z INFO webdriver: Register BiDi handler for session with id 43d1923def99e1d0330c3446734db5f5\r\n2024-11-11T23:38:33.838Z INFO webdriver: Connect to webSocketUrl ws://127.0.0.1:54251/session/43d1923def99e1d0330c3446734db5f5\r\n2024-11-11T23:38:33.852Z INFO webdriver: Connected session to Bidi protocol\r\n2024-11-11T23:38:33.861Z INFO webdriver: COMMAND getWindowHandle()\r\n2024-11-11T23:38:33.861Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"log.entryAdded\",\"browsingContext.navigationStarted\"]}\r\n2024-11-11T23:38:33.862Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[1267 bytes]>, contexts: undefined }\r\n2024-11-11T23:38:33.862Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\",\"network.responseCompleted\",\"network.beforeRequestSent\",\"network.fetchError\"]}\r\n2024-11-11T23:38:33.862Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.userPromptOpened\"]}\r\n2024-11-11T23:38:33.862Z INFO webdriver: COMMAND getWindowHandle()\r\n2024-11-11T23:38:33.862Z INFO webdriver: Connected to WebDriver Bidi interface at ws://127.0.0.1:54252/session/67595f98288e27a3cb7ddbffd5aaafcc\r\n2024-11-11T23:38:33.862Z INFO webdriver: [GET] http://localhost:54252/session/67595f98288e27a3cb7ddbffd5aaafcc/window\r\n2024-11-11T23:38:33.862Z INFO webdriver: [GET] http://localhost:54252/session/67595f98288e27a3cb7ddbffd5aaafcc/window\r\n2024-11-11T23:38:33.863Z INFO webdriver: COMMAND getWindowHandle()\r\n2024-11-11T23:38:33.863Z INFO webdriver: [GET] http://localhost:54252/session/67595f98288e27a3cb7ddbffd5aaafcc/window\r\n2024-11-11T23:38:33.868Z INFO webdriver: Connected session to Bidi protocol\r\n2024-11-11T23:38:33.869Z INFO webdriver: COMMAND getWindowHandle()\r\n2024-11-11T23:38:33.869Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"log.entryAdded\",\"browsingContext.navigationStarted\"]}\r\n2024-11-11T23:38:33.869Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[1267 bytes]>, contexts: undefined }\r\n2024-11-11T23:38:33.869Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\",\"network.responseCompleted\",\"network.beforeRequestSent\",\"network.fetchError\"]}\r\n2024-11-11T23:38:33.870Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.userPromptOpened\"]}\r\n2024-11-11T23:38:33.870Z INFO webdriver: COMMAND getWindowHandle()\r\n2024-11-11T23:38:33.870Z INFO webdriver: Connected to WebDriver Bidi interface at ws://127.0.0.1:54251/session/43d1923def99e1d0330c3446734db5f5\r\n2024-11-11T23:38:33.870Z INFO webdriver: [GET] http://localhost:54251/session/43d1923def99e1d0330c3446734db5f5/window\r\n2024-11-11T23:38:33.870Z INFO webdriver: [GET] http://localhost:54251/session/43d1923def99e1d0330c3446734db5f5/window\r\n2024-11-11T23:38:33.873Z INFO webdriver: COMMAND getWindowHandle()\r\n2024-11-11T23:38:33.874Z INFO webdriver: [GET] http://localhost:54251/session/43d1923def99e1d0330c3446734db5f5/window\r\n2024-11-11T23:38:33.895Z INFO webdriver: RESULT E8D18EB7FECF6AB717A74C79D6147703\r\n2024-11-11T23:38:33.896Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[220 bytes]>\",\"awaitPromise\":true,\"arguments\":[{\"type\":\"string\",\"value\":\"var __defProp = Object.defineProperty;var __name = function (target, value) { return __defProp(target, 'name', { value: value, configurable: true }); };var __globalThis = (typeof globalThis === 'object' && globalThis) || (typeof window === 'object' && window);__globalThis.__name = __name;\"}],\"target\":{\"context\":\"E8D18EB7FECF6AB717A74C79D6147703\"}}\r\n2024-11-11T23:38:33.896Z INFO webdriver: RESULT 5E2BB28C6D0AC760C8E47A9E9C0C0BAC\r\n2024-11-11T23:38:33.896Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[220 bytes]>\",\"awaitPromise\":true,\"arguments\":[{\"type\":\"string\",\"value\":\"var __defProp = Object.defineProperty;var __name = function (target, value) { return __defProp(target, 'name', { value: value, configurable: true }); };var __globalThis = (typeof globalThis === 'object' && globalThis) || (typeof window === 'object' && window);__globalThis.__name = __name;\"}],\"target\":{\"context\":\"5E2BB28C6D0AC760C8E47A9E9C0C0BAC\"}}\r\n2024-11-11T23:38:33.901Z INFO webdriver: RESULT E8D18EB7FECF6AB717A74C79D6147703\r\n2024-11-11T23:38:33.902Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[482 bytes]>, contexts: [\"E8D18EB7FECF6AB717A74C79D6147703\"] }\r\n2024-11-11T23:38:33.909Z INFO webdriver: RESULT 5E2BB28C6D0AC760C8E47A9E9C0C0BAC\r\n2024-11-11T23:38:33.911Z DEBUG webdriver: BIDI RESULT {\"id\":1,\"result\":{},\"type\":\"success\"}\r\n2024-11-11T23:38:33.912Z INFO webdriver: RESULT 5E2BB28C6D0AC760C8E47A9E9C0C0BAC\r\n2024-11-11T23:38:33.912Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[482 bytes]>, contexts: [\"5E2BB28C6D0AC760C8E47A9E9C0C0BAC\"] }\r\n2024-11-11T23:38:33.913Z INFO webdriver: RESULT E8D18EB7FECF6AB717A74C79D6147703\r\n2024-11-11T23:38:33.913Z DEBUG webdriver: BIDI RESULT {\"id\":1,\"result\":{},\"type\":\"success\"}\r\n2024-11-11T23:38:33.914Z DEBUG webdriver: BIDI RESULT {\"id\":2,\"result\":{\"script\":\"eeddc31b-7e88-4c94-99f1-d3eb78dca244\"},\"type\":\"success\"}\r\n2024-11-11T23:38:33.915Z DEBUG webdriver: BIDI RESULT {\"id\":2,\"result\":{\"script\":\"994c063f-8693-4135-ac51-613464126207\"},\"type\":\"success\"}\r\n2024-11-11T23:38:33.915Z DEBUG webdriver: BIDI RESULT {\"id\":3,\"result\":{},\"type\":\"success\"}\r\n2024-11-11T23:38:33.916Z DEBUG webdriver: BIDI RESULT {\"id\":3,\"result\":{},\"type\":\"success\"}\r\n2024-11-11T23:38:33.916Z DEBUG webdriver: BIDI RESULT {\"id\":4,\"result\":{},\"type\":\"success\"}\r\n2024-11-11T23:38:33.916Z DEBUG webdriver: BIDI RESULT {\"id\":4,\"result\":{},\"type\":\"success\"}\r\n2024-11-11T23:38:33.917Z DEBUG webdriver: BIDI RESULT {\"id\":5,\"result\":{\"realm\":\"-6562042341287976135.-4125209509117237242\",\"result\":{\"type\":\"undefined\"},\"type\":\"success\"},\"type\":\"success\"}\r\n2024-11-11T23:38:33.918Z DEBUG webdriver: BIDI RESULT {\"id\":5,\"result\":{\"realm\":\"-5916183859845247061.7368435214604586277\",\"result\":{\"type\":\"undefined\"},\"type\":\"success\"},\"type\":\"success\"}\r\n2024-11-11T23:38:33.918Z DEBUG webdriver: BIDI RESULT {\"id\":6,\"result\":{\"script\":\"1edb2c91-fdff-497d-b457-16318f613f5f\"},\"type\":\"success\"}\r\n2024-11-11T23:38:33.918Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"script.message\"]}\r\n2024-11-11T23:38:33.918Z DEBUG webdriver: BIDI RESULT {\"id\":6,\"result\":{\"script\":\"288c71ad-beb2-4bf2-acfd-f1d3bdbb745e\"},\"type\":\"success\"}\r\n2024-11-11T23:38:33.918Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"script.message\"]}\r\n2024-11-11T23:38:33.919Z DEBUG webdriver: BIDI RESULT {\"id\":7,\"result\":{},\"type\":\"success\"}\r\n2024-11-11T23:38:33.920Z INFO webdriverio:PolyfillManager: polyfill script added\r\n2024-11-11T23:38:33.920Z DEBUG webdriver: BIDI RESULT {\"id\":7,\"result\":{},\"type\":\"success\"}\r\n2024-11-11T23:38:33.920Z INFO webdriverio:PolyfillManager: polyfill script added\r\n2024-11-11T23:38:33.925Z DEBUG @wdio/utils:shim: Finished to run \"beforeTest\" hook in 0ms\r\n2024-11-11T23:38:33.926Z DEBUG @wdio/utils:shim: Finished to run \"after\" hook in 0ms\r\n2024-11-11T23:38:33.926Z INFO webdriver: COMMAND deleteSession()\r\n2024-11-11T23:38:33.926Z INFO webdriver: [DELETE] http://localhost:54252/session/67595f98288e27a3cb7ddbffd5aaafcc\r\n2024-11-11T23:38:33.927Z INFO webdriver: COMMAND deleteSession()\r\n2024-11-11T23:38:33.927Z INFO webdriver: [DELETE] http://localhost:54251/session/43d1923def99e1d0330c3446734db5f5\r\n2024-11-11T23:38:33.983Z INFO webdriver: RESULT null\r\n2024-11-11T23:38:33.983Z INFO webdriver: Kill driver process with PID 54473\r\n2024-11-11T23:38:33.983Z INFO webdriver: RESULT null\r\n2024-11-11T23:38:33.983Z INFO webdriver: Kill driver process with PID 54474\r\n```\r\n\r\nwdio.log:\r\n```\r\n2024-11-11T23:38:30.741Z INFO @wdio/cli:launcher: Run onPrepare hook\r\n2024-11-11T23:38:30.742Z INFO @wdio/utils: Setting up browser driver for: chrome@stable\r\n2024-11-11T23:38:30.742Z INFO @wdio/utils: Setting up browser binaries for: chrome@stable\r\n2024-11-11T23:38:30.774Z INFO webdriver: Using Chromedriver v130.0.6723.117 from cache directory /var/folders/ds/rc1dsq2s12n1yg6wp9mfr4900000gq/T\r\n2024-11-11T23:38:30.805Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2024-11-11T23:38:30.806Z INFO @wdio/local-runner: Start worker 0-0 with arg: run wdio.conf.ts\r\n2024-11-11T23:38:30.807Z DEBUG @wdio/local-runner: Send command run to worker with cid \"0-0\"\r\n2024-11-11T23:38:34.093Z DEBUG @wdio/local-runner: Runner 0-0 finished with exit code 0\r\n2024-11-11T23:38:34.094Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\r\n2024-11-11T23:38:34.094Z INFO @wdio/cli:launcher: Run onComplete hook\r\n2024-11-11T23:38:34.116Z INFO @wdio/local-runner: Shutting down spawned worker\r\n2024-11-11T23:38:34.368Z INFO @wdio/local-runner: Waiting for 0 to shut down gracefully\r\n```\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 1871,
    "test_files_count": 3,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-runner/src/index.ts",
      "tests/multiremote/test-filter1.js",
      "tests/multiremote/test-filter2.js",
      "tests/smoke.runner.js"
    ],
    "pr_changed_test_files": [
      "tests/multiremote/test-filter1.js",
      "tests/multiremote/test-filter2.js",
      "tests/smoke.runner.js"
    ],
    "base_commit": "0b789f3a1a47bd9b7e7b5ee23561655b0e08ec1f",
    "head_commit": "da7986f0472aeee8e4756841b7a528790294a782",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13878",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13878",
    "dockerfile": "",
    "pr_merged_at": "2024-11-14T18:10:25.000Z",
    "patch": "diff --git a/packages/wdio-runner/src/index.ts b/packages/wdio-runner/src/index.ts\nindex 3e84a8437ad..84184a5d6f4 100644\n--- a/packages/wdio-runner/src/index.ts\n+++ b/packages/wdio-runner/src/index.ts\n@@ -47,7 +47,6 @@ export default class Runner extends EventEmitter {\n         this._configParser = new ConfigParser(configFile, args)\n         this._cid = cid\n         this._specs = specs\n-        this._caps = caps\n \n         /**\n          * add config file\n@@ -76,6 +75,24 @@ export default class Runner extends EventEmitter {\n         // ToDo(Christian): resolve type incompatibility between v8 and v9\n         this._configParser.addService(snapshotService as any)\n \n+        this._caps = this._isMultiremote\n+            /**\n+             * Filter driver instances based on 'wdio:exclude' capability and allow\n+             * user to exclude them if not needed for given spec file\n+             */\n+            ? Object.entries(caps).reduce((filteredCaps, [browserName, browserCaps]) => {\n+                const ex = browserCaps.capabilities['wdio:exclude']\n+                if (ex) {\n+                    const sp = this._configParser?.getSpecs(specs, ex)\n+                    if (sp && sp.length === 0) {\n+                        return filteredCaps\n+                    }\n+                }\n+                filteredCaps[browserName] = browserCaps\n+                return filteredCaps\n+            }, {} as Capabilities.RequestedMultiremoteCapabilities)\n+            : caps\n+\n         /**\n          * create `browser` stub only if `specFiltering` feature is enabled\n          */\n@@ -84,28 +101,28 @@ export default class Runner extends EventEmitter {\n             // @ts-ignore used in `/packages/webdriverio/src/protocol-stub.ts`\n             _automationProtocol: this._config.automationProtocol,\n             automationProtocol: './protocol-stub.js'\n-        }, caps)\n+        }, this._caps)\n \n         /**\n          * run `beforeSession` command before framework and browser are initiated\n          */\n         ;(await initializeWorkerService(\n             this._config as Options.Testrunner,\n-            caps as WebdriverIO.Capabilities,\n+            this._caps as WebdriverIO.Capabilities,\n             args.ignoredWorkerServices\n         )).map(this._configParser.addService.bind(this._configParser))\n \n         const beforeSessionParams: BeforeSessionArgs = [this._config, this._caps, this._specs, this._cid]\n         await executeHooksWithArgs('beforeSession', this._config.beforeSession, beforeSessionParams)\n \n-        this._reporter = new BaseReporter(this._config, this._cid, { ...caps })\n+        this._reporter = new BaseReporter(this._config, this._cid, { ...this._caps })\n         await this._reporter.initReporters()\n \n         /**\n          * initialize framework\n          */\n-        this._framework = await this.#initFramework(cid, this._config, caps, this._reporter, specs)\n-        process.send!({ name: 'testFrameworkInit', content: { cid, caps, specs, hasTests: this._framework.hasTests() } })\n+        this._framework = await this.#initFramework(cid, this._config, this._caps, this._reporter, specs)\n+        process.send!({ name: 'testFrameworkInit', content: { cid, caps: this._caps, specs, hasTests: this._framework.hasTests() } })\n         if (!this._framework.hasTests()) {\n             return this._shutdown(0, retries, true)\n         }\n",
    "test_patch": "diff --git a/tests/multiremote/test-filter1.js b/tests/multiremote/test-filter1.js\nnew file mode 100644\nindex 00000000000..41f782237a8\n--- /dev/null\n+++ b/tests/multiremote/test-filter1.js\n@@ -0,0 +1,7 @@\n+import assert from 'node:assert'\n+\n+describe('smoke test multiremote filter caps', () => {\n+    it('should have two instances', async () => {\n+        assert.equal(browser.instances.length, 2)\n+    })\n+})\n\ndiff --git a/tests/multiremote/test-filter2.js b/tests/multiremote/test-filter2.js\nnew file mode 100644\nindex 00000000000..800892d2c95\n--- /dev/null\n+++ b/tests/multiremote/test-filter2.js\n@@ -0,0 +1,7 @@\n+import assert from 'node:assert'\n+\n+describe('smoke test multiremote filter caps', () => {\n+    it('should have one instance', async () => {\n+        assert.equal(browser.instances.length, 1)\n+    })\n+})\n\ndiff --git a/tests/smoke.runner.js b/tests/smoke.runner.js\nindex ce714589abf..7d5d1b53953 100644\n--- a/tests/smoke.runner.js\n+++ b/tests/smoke.runner.js\n@@ -547,6 +547,29 @@ const multiremote = async () => {\n             }\n         }\n     })\n+\n+    const { skippedSpecs, passed, failed } = await launch('multiremote', baseConfig, {\n+        specs: [\n+            path.resolve(__dirname, 'multiremote', 'test-filter1.js'),\n+            path.resolve(__dirname, 'multiremote', 'test-filter2.js')\n+        ],\n+        capabilities: {\n+            browserA: {\n+                capabilities: { browserName: 'chrome',  }\n+            },\n+            browserB: {\n+                capabilities: {\n+                    browserName: 'chrome',\n+                    'wdio:exclude': [\n+                        path.resolve(__dirname, 'multiremote', 'test-filter2.js')\n+                    ]\n+                }\n+            }\n+        }\n+    })\n+    assert.strictEqual(skippedSpecs, 0)\n+    assert.strictEqual(passed, 2)\n+    assert.strictEqual(failed, 0)\n }\n \n /**\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13869",
    "pr_id": 13869,
    "issue_id": 13868,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: browser.switchFrame(null) throws TypeError in Webdriver Classic mode\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.2.11\n\n### Node.js Version\n\n20.16.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\r\n    \"wdio:enforceWebDriverClassic\": true\r\n}\n```\n\n\n### What happened?\n\nAn error is thrown when attempting to switch to a parent frame using webdriver classic. \n\n### What is your expected behavior?\n\nThe context should be switched to the parent frame.\n\n### How to reproduce the bug.\n\n```js\r\nbrowser.switchFrame(null);\r\n```\n\n### Relevant log output\n\n```typescript\nTypeError: Cannot read properties of null (reading 'getElement')\r\nat isPossiblyUnresolvedElement (.../node_modules/webdriverio/build/index.js:4190:54)\r\nat Browser.switchFrame (.../node_modules/webdriverio/build/index.js:4199:9)\r\nat Browser.wrapCommandFn (.../node_modules/@wdio/utils/build/index.js:884:32)\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 172,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/browser/switchFrame.ts",
      "packages/webdriverio/tests/commands/browser/switchFrame.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/browser/switchFrame.test.ts"
    ],
    "base_commit": "0525efdad783af9d6f96ade9d8a3ada8454ad5c6",
    "head_commit": "1bf075a9b414d476ff2e14e89fe003b9fc193806",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13869",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13869",
    "dockerfile": "",
    "pr_merged_at": "2024-11-08T21:49:25.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/switchFrame.ts b/packages/webdriverio/src/commands/browser/switchFrame.ts\nindex a0a16373c8e..f925da77d83 100644\n--- a/packages/webdriverio/src/commands/browser/switchFrame.ts\n+++ b/packages/webdriverio/src/commands/browser/switchFrame.ts\n@@ -71,7 +71,7 @@ export async function switchFrame (\n     context: WebdriverIO.Element | ChainablePromiseElement | string | null | ((tree: FlatContextTree) => boolean | Promise<boolean>)\n ) {\n     function isPossiblyUnresolvedElement(input: typeof context): input is WebdriverIO.Element | ChainablePromiseElement {\n-        return typeof input === 'object' && typeof (input as WebdriverIO.Element).getElement === 'function'\n+        return Boolean(input) && typeof input === 'object' && typeof (input as WebdriverIO.Element).getElement === 'function'\n     }\n \n     /**\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/browser/switchFrame.test.ts b/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\nindex 301c55015bc..248e08cf92a 100644\n--- a/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\n@@ -60,6 +60,12 @@ describe('switchFrame command', () => {\n                 })\n             )\n         })\n+\n+        it('switch to parent frame', async () => {\n+            const switchToFrame = vi.spyOn(browser, 'switchToFrame')\n+            await browser.switchFrame(null)\n+            expect(switchToFrame).toHaveBeenCalledWith(null)\n+        })\n     })\n \n     describe('bidi', () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13866",
    "pr_id": 13866,
    "issue_id": 13775,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[📖 Docs]: Documentation for using eslint-plugin-wdio with the new ESLint v9 flat config\n### Pre-check\n\n- [X] I know I can edit the docs but prefer to file this issue\n\n### Describe the improvement\n\nMissing documentation\n\n### Description of the improvement / report\n\nI see functionality was completed on the eslint-wdio-plugin for compatibility with ESLint v9's Flat Config, https://github.com/webdriverio/webdriverio/issues/12547\r\nBut there is no documentation on how to implement the plugin with the new flat config method.\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct",
    "issue_word_count": 96,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "e2e/wdio/wdio.local.conf.ts",
      "packages/eslint-plugin-wdio/README.md"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/wdio.local.conf.ts"
    ],
    "base_commit": "2d9aeb9ca8a074e8fd8b41a22e34c40f5c4faa9e",
    "head_commit": "ed37288aabc7ad2f3201c2dc85f77fd94ed1b46c",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13866",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13866",
    "dockerfile": "",
    "pr_merged_at": "2024-11-07T20:17:01.000Z",
    "patch": "diff --git a/packages/eslint-plugin-wdio/README.md b/packages/eslint-plugin-wdio/README.md\nindex 0f9a7f95af7..f3e5b0bb430 100644\n--- a/packages/eslint-plugin-wdio/README.md\n+++ b/packages/eslint-plugin-wdio/README.md\n@@ -22,6 +22,8 @@ npm install eslint-plugin-wdio --save-dev\n \n This plugin export a recommended configuration that enforce good practices.\n \n+### With Eslint v8 and below\n+\n To enable this configuration use the extends property in your `.eslintrc` config file:\n \n ```json\n@@ -34,7 +36,25 @@ To enable this configuration use the extends property in your `.eslintrc` config\n }\n ```\n \n-See [ESLint documentation](https://eslint.org/docs/user-guide/configuring#extending-configuration-files) for more information about extending configuration files.\n+### With Eslint v9 and Flat Config\n+\n+If you are using the latest version of Eslint with the [flat configuration](https://eslint.org/docs/latest/use/configure/migration-guide), you can embed this plugin as follows:\n+\n+```js\n+// eslint.config.mjs\n+import { config as wdioConfig } from \"eslint-plugin-wdio\";\n+\n+export default [\n+    {\n+        extends: [\n+            wdioConfig['flat/recommended'],\n+            // ...\n+        ]\n+    }\n+];\n+```\n+\n+See [ESLint documentation](https://eslint.org/docs/latest/use/configure/configuration-files) for more information about extending configuration files.\n \n ## List of supported rules\n \n",
    "test_patch": "diff --git a/e2e/wdio/wdio.local.conf.ts b/e2e/wdio/wdio.local.conf.ts\nindex 6d6afea94f4..acbda4c024d 100644\n--- a/e2e/wdio/wdio.local.conf.ts\n+++ b/e2e/wdio/wdio.local.conf.ts\n@@ -26,13 +26,13 @@ export const config: WebdriverIO.Config = {\n         'goog:chromeOptions': {\n             args: ['headless', 'disable-gpu']\n         }\n-    }, {\n-        browserName: 'chrome',\n-        browserVersion: 'canary',\n-        webSocketUrl: true,\n-        'goog:chromeOptions': {\n-            args: ['headless', 'disable-gpu']\n-        }\n+    // }, {\n+    //     browserName: 'chrome',\n+    //     browserVersion: 'canary',\n+    //     webSocketUrl: true,\n+    //     'goog:chromeOptions': {\n+    //         args: ['headless', 'disable-gpu']\n+    //     }\n     }, {\n         browserName: 'firefox',\n         webSocketUrl: true,\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13863",
    "pr_id": 13863,
    "issue_id": 13856,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: `switchFrame()` doesn't always accept promise\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\nv9.2.8\r\n\r\n### Node.js Version\r\n\r\nv22.6.0\r\n\r\n### Mode\r\n\r\nStandalone Mode\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\n{\r\n    browserName: 'electron',\r\n    browserVersion: '33.0.0',\r\n    'wdio:electronServiceOptions': {\r\n        appArgs: []\r\n    }\r\n}\r\n```\r\n\r\n\r\n### What happened?\r\n\r\nThe `await browser.switchFrame($('iframe'))` will fail in Electron app test setup with `wdio-electron-service` with the following error:\r\n> WebDriverError: invalid argument: missing 'ELEMENT'\r\n\r\n### What is your expected behavior?\r\n\r\nBased on [`switchFrame()`](https://webdriver.io/docs/api/browser/switchFrame/) WDIO docs and [existing test](https://github.com/webdriverio/webdriverio/blob/v9.2.10/e2e/wdio/headless/test.e2e.ts#L517-L526) in E2E test suite, the following construct should work with no errors:\r\n\r\n```javascript\r\nawait browser.switchFrame($('iframe'))\r\n```\r\n\r\n### How to reproduce the bug.\r\n\r\nHere is the repo to reproduce the problem: https://github.com/gavvvr/wdio-electron-service-818\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\n[0-0] 2024-11-05T22:00:38.362Z ERROR webdriver: WebDriverError: invalid argument: missing 'ELEMENT'\r\n[0-0]   (Session info: chrome=130.0.6723.59) when running \"frame\" with method \"POST\" and args \"{\"id\":{}}\"\r\n[0-0] invalid argument in \"My Login application.should reset the frame when the page is reloaded\"\r\ninvalid argument: WebDriverError: invalid argument: missing 'ELEMENT'\r\n  (Session info: chrome=130.0.6723.59) when running \"frame\" with method \"POST\" and args \"{\"id\":{}}\"\r\n    at async Context.<anonymous> (/Users/user/Documents/sandboxes/wdio-electron-iframe-ts/test/specs/test.e2e.ts:4:5\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 291,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/browser/switchFrame.ts",
      "packages/webdriverio/tests/commands/browser/switchFrame.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/browser/switchFrame.test.ts"
    ],
    "base_commit": "86fb00f5551d9431c1baa1cfbd924fe8f30982a0",
    "head_commit": "818e496c73a5d448cb9199c5e98c3673e5db94c1",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13863",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13863",
    "dockerfile": "",
    "pr_merged_at": "2024-11-07T22:45:26.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/switchFrame.ts b/packages/webdriverio/src/commands/browser/switchFrame.ts\nindex 467fe2ae4ca..a0a16373c8e 100644\n--- a/packages/webdriverio/src/commands/browser/switchFrame.ts\n+++ b/packages/webdriverio/src/commands/browser/switchFrame.ts\n@@ -70,6 +70,10 @@ export async function switchFrame (\n     this: WebdriverIO.Browser,\n     context: WebdriverIO.Element | ChainablePromiseElement | string | null | ((tree: FlatContextTree) => boolean | Promise<boolean>)\n ) {\n+    function isPossiblyUnresolvedElement(input: typeof context): input is WebdriverIO.Element | ChainablePromiseElement {\n+        return typeof input === 'object' && typeof (input as WebdriverIO.Element).getElement === 'function'\n+    }\n+\n     /**\n      * Check if Bidi is supported, if not, just use the WebDriver Classic `switchToFrame`\n      */\n@@ -80,6 +84,13 @@ export async function switchFrame (\n         if (typeof context === 'string') {\n             throw new Error('Cannot use a string to fetch a context in WebDriver Classic')\n         }\n+        if (isPossiblyUnresolvedElement(context)) {\n+            const element = await context.getElement()\n+            await element.waitForExist({\n+                timeoutMsg: `Can't switch to frame with selector ${element.selector} because it doesn't exist`\n+            })\n+            return switchToFrame(this, element)\n+        }\n         return switchToFrame(this, context)\n     }\n \n@@ -248,7 +259,7 @@ export async function switchFrame (\n      * If given context is a WebdriverIO.Element the user wants to switch to an iframe\n      * that was previously queried.\n      */\n-    if (typeof context === 'object' && typeof (context as WebdriverIO.Element).getElement === 'function') {\n+    if (isPossiblyUnresolvedElement(context)) {\n         const element = await context.getElement()\n         await element.waitForExist({\n             timeoutMsg: `Can't switch to frame with selector ${element.selector} because it doesn't exist`\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/browser/switchFrame.test.ts b/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\nindex 92fe79b3954..301c55015bc 100644\n--- a/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\n@@ -2,6 +2,7 @@ import path from 'node:path'\n import { describe, it, vi, expect, beforeEach } from 'vitest'\n import { remote } from '../../../src/index.js'\n import { getContextManager } from '../../../src/context.js'\n+import { ELEMENT_KEY } from 'webdriver'\n \n let browser: WebdriverIO.Browser\n \n@@ -49,6 +50,16 @@ describe('switchFrame command', () => {\n                 })\n             )\n         })\n+\n+        it('should switch context via unresolved WDIO element', async () => {\n+            const switchToFrame = vi.spyOn(browser, 'switchToFrame')\n+            await browser.switchFrame(browser.$('iframe'))\n+            expect(switchToFrame).toHaveBeenCalledWith(\n+                expect.objectContaining({\n+                    [ELEMENT_KEY]: 'some-elem-123'\n+                })\n+            )\n+        })\n     })\n \n     describe('bidi', () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13857",
    "pr_id": 13857,
    "issue_id": 2572,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "step definitions are not loading\n## The problem\r\n     IN my project,step definitions are not loading.while running test scripts\r\n\r\n\r\n\r\n## Environment\r\n\r\n* WebdriverIO version:\r\n* Node.js version:\r\n* [Standalone mode or wdio testrunner](http://webdriver.io/guide/getstarted/modes.html):\r\n* if wdio testrunner, running synchronous or asynchronous tests:\r\n* Additional wdio packages used (if applicable):\r\n\r\n## Details\r\n\r\nDescribe in more detail the problem you have been experiencing, if necessary.\r\n\r\n## Link to Selenium/WebdriverIO logs\r\n\r\nCreate a [gist](https://gist.github.com) which is a paste of your _full_ Selenium/WebdriverIO logs, and link them here. Do _not_ paste your full Appium logs here, as it will make this issue very long and hard to read! If you are reporting a bug, _always_ include Selenium/WebdriverIO logs!\r\n\r\n## Code To Reproduce Issue [ Good To Have ]\r\n\r\nPlease remember that, with sample code; it's easier to reproduce bug and much faster to fix it.\r\n",
    "issue_word_count": 146,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/commands/browser/switchWindow.ts",
      "packages/webdriverio/tests/commands/browser/switchWindow.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/browser/switchWindow.test.ts"
    ],
    "base_commit": "d2437d48efd41b02420f79977ae0b5e315bd6985",
    "head_commit": "56e263b4c310b741d4f9c9ee92b1cf33349275aa",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13857",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13857",
    "dockerfile": "",
    "pr_merged_at": "2024-11-06T21:45:04.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/switchWindow.ts b/packages/webdriverio/src/commands/browser/switchWindow.ts\nindex b1c293b86ac..9e6d79d2d82 100644\n--- a/packages/webdriverio/src/commands/browser/switchWindow.ts\n+++ b/packages/webdriverio/src/commands/browser/switchWindow.ts\n@@ -10,6 +10,9 @@ import { getContextManager } from '../../context.js'\n         // open url\n         await browser.url('https://google.com')\n \n+        // get window handle\n+        const handle = await browser.getWindowHandle()\n+\n         // create new window\n         await browser.newWindow('https://webdriver.io')\n \n@@ -18,10 +21,13 @@ import { getContextManager } from '../../context.js'\n \n         // switch back via title match\n         await browser.switchWindow('Next-gen browser and mobile automation test framework for Node.js')\n+\n+        // switch back via window handle\n+        await browser.switchWindow(handle)\n     });\n  * </example>\n  *\n- * @param {String|RegExp}  matcher  String or regular expression that matches the title and url of the page or window name\n+ * @param {String|RegExp}  matcher  String or regular expression that matches either the page title or URL, the window name, or the window handle\n  *\n  * @uses protocol/getWindowHandles, protocol/switchToWindow, protocol/getUrl, protocol/getTitle\n  * @alias browser.switchTab\n@@ -36,12 +42,26 @@ export async function switchWindow (\n      * parameter check\n      */\n     if (typeof matcher !== 'string' && !(matcher instanceof RegExp)) {\n-        throw new Error('Unsupported parameter for switchWindow, required is \"string\" or an RegExp')\n+        throw new Error('Unsupported parameter for switchWindow, required is \"string\" or a RegExp')\n     }\n \n     const currentWindow = await this.getWindowHandle()\n+\n+    // is the matcher a window handle, and are we in the right window already?\n+    if (typeof matcher === 'string' && currentWindow === matcher) {\n+        return currentWindow\n+    }\n+\n+    const contextManager = getContextManager(this)\n     const tabs = await this.getWindowHandles()\n \n+    // is the matcher a window handle and is it in the list of tabs?\n+    if (typeof matcher === 'string' && tabs.includes(matcher)) {\n+        await this.switchToWindow(matcher)\n+        contextManager.setCurrentContext(matcher)\n+        return matcher\n+    }\n+\n     const matchesTarget = (target: string): boolean => {\n         if (typeof matcher ==='string') {\n             return target.includes(matcher)\n@@ -49,7 +69,6 @@ export async function switchWindow (\n         return !!target.match(matcher)\n     }\n \n-    const contextManager = getContextManager(this)\n     for (const tab of tabs) {\n         await this.switchToWindow(tab)\n         contextManager.setCurrentContext(tab)\n@@ -82,5 +101,5 @@ export async function switchWindow (\n     }\n \n     await this.switchToWindow(currentWindow)\n-    throw new Error(`No window found with title, url or name matching \"${matcher}\"`)\n+    throw new Error(`No window found with title, url, name or window handle matching \"${matcher}\"`)\n }\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/browser/switchWindow.test.ts b/packages/webdriverio/tests/commands/browser/switchWindow.test.ts\nindex befc08ddc43..0201bdab609 100644\n--- a/packages/webdriverio/tests/commands/browser/switchWindow.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/switchWindow.test.ts\n@@ -28,11 +28,32 @@ describe('switchWindow', () => {\n         })\n     })\n \n-    it('should allow to switch to a window handle', async () => {\n-        const tabId = await browser.switchWindow('webdriver')\n+    it('should allow to switch to a window handle based on a partial URL match', async () => {\n+        const tabId = await browser.switchWindow('webdriver.io')\n         expect(tabId).toBe('window-handle-1')\n     })\n \n+    it('should not trigger a switchWindow call when the requested window handle matches the currently active one', async () => {\n+        const current = await browser.getWindowHandle()\n+\n+        vi.spyOn(browser, 'switchToWindow').mockImplementation(() => {\n+            throw new Error('switchToWindow should not have been called')\n+        })\n+\n+        const tabId = await browser.switchWindow(current)\n+        expect(tabId).toBe(current)\n+    })\n+\n+    it('should allow to switch to a window handle based on an exact window handle match', async () => {\n+        const desiredHandle = 'window-handle-2'\n+        const spy = vi.spyOn(browser, 'switchToWindow')\n+\n+        const tabId = await browser.switchWindow(desiredHandle)\n+\n+        expect(tabId).toBe(desiredHandle)\n+        expect(spy).toHaveBeenCalledOnce()\n+    })\n+\n     it('should iterate over all available handles to find the right window', async () => {\n         // @ts-expect-error mock feature\n         vi.mocked(fetch).setMockResponse([...webdriverResponses])\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13852",
    "pr_id": 13852,
    "issue_id": 13778,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: connectionRetryTimeout  does not affect the actual fetch timeout for greater values\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\nlatest LTS\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\nDoes not matter\n```\n\n\n### What happened?\n\nIt looks like the `fetch` API timeout is currently not configured by WDIO, so it always uses the default one. See https://stackoverflow.com/questions/76755913/increase-timeout-in-nodejs-built-in-fetch-api for more details.\n\n### What is your expected behavior?\n\nWDIO should wait until the provided timeout occurs or the session creation request is finished\n\n### How to reproduce the bug.\n\n- Set [connectionRetryTimeout](https://webdriver.io/docs/configuration#connectionretrytimeout) option to 6 or more minutes.\r\n- Send a session creation request, which takes more than 5 minutes\n\n### Relevant log output\n\n```typescript\nWebDriverError: Request failed with error code UND_ERR_HEADERS_TIMEOUT when running \"http://127.0.0.1:4567/session\" with method \"POST\" and args \"{\"capabilities\":{\"alwaysMatch\":{\"platformName\":\"iOS\",\"appium:platformVersion\":\"17.5\",\"appium:deviceName\":\"iPhone 15\",\"appium:automationName\":\"XCUITest\",\"appium:launchWithIDB\":true,\"appium:noReset\":true,\"appium:maxTypingFrequency\":30,\"appium:clearSystemFiles\":true,\"appium:showXcodeLog\":true,\"appium:wdaLaunchTimeout\":960000,\"appium:wdaConnectionTimeout\":960000,\"appium:useNewWDA\":true,\"appium:webviewConnectTimeout\":30000,\"appium:simulatorStartupTimeout\":960000,\"appium:app\":\"/Users/runner/work/appium-xcuitest-driver/appium-xcuitest-driver/test/assets/UIKitCatalog-iphonesimulator.app\",\"appium:usePrebuiltWDA\":false},\"firstMatch\":[{}]}}\"\r\n      at startWebDriverSession (file:///Users/runner/work/appium-xcuitest-driver/appium-xcuitest-driver/node_modules/webdriver/build/index.js:857:11)\r\n      at async Function.newSession (file:///Users/runner/work/appium-xcuitest-driver/appium-xcuitest-driver/node_modules/webdriver/build/index.js:1558:41)\r\n      at async remote (file:///Users/runner/work/appium-xcuitest-driver/appium-xcuitest-driver/node_modules/webdriverio/build/index.js:7339:20)\r\n      at async initSession (test/functional/helpers/session.js:14:14)\r\n      at async Context.<anonymous> (test/functional/basic/basic-e2e-specs.js:26:14)\r\n```\r\n\r\nhttps://github.com/appium/appium-xcuitest-driver/actions/runs/11381654527?pr=2480\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 363,
    "test_files_count": 8,
    "non_test_files_count": 22,
    "pr_changed_files": [
      "infra/compiler/src/plugins.ts",
      "infra/compiler/src/utils.ts",
      "packages/wdio-webdriver-mock-service/package.json",
      "packages/wdio-webdriver-mock-service/src/WebDriverMock.ts",
      "packages/wdio-webdriver-mock-service/src/index.ts",
      "packages/webdriver/package.json",
      "packages/webdriver/src/bidi/core.ts",
      "packages/webdriver/src/bidi/socket.ts",
      "packages/webdriver/src/browser.ts",
      "packages/webdriver/src/command.ts",
      "packages/webdriver/src/constants.ts",
      "packages/webdriver/src/environment.ts",
      "packages/webdriver/src/index.cts",
      "packages/webdriver/src/index.ts",
      "packages/webdriver/src/node.ts",
      "packages/webdriver/src/request/index.ts",
      "packages/webdriver/src/request/node.ts",
      "packages/webdriver/src/request/request.ts",
      "packages/webdriver/src/request/types.ts",
      "packages/webdriver/src/request/web.ts",
      "packages/webdriver/src/utils.ts",
      "packages/webdriver/tests/__snapshots__/request.test.ts.snap",
      "packages/webdriver/tests/bidi.test.ts",
      "packages/webdriver/tests/command.test.ts",
      "packages/webdriver/tests/constants.test.ts",
      "packages/webdriver/tests/index.test.ts",
      "packages/webdriver/tests/request.test.ts",
      "packages/webdriver/tests/request/error.test.ts",
      "packages/webdriver/tests/utils.test.ts",
      "pnpm-lock.yaml"
    ],
    "pr_changed_test_files": [
      "packages/webdriver/tests/__snapshots__/request.test.ts.snap",
      "packages/webdriver/tests/bidi.test.ts",
      "packages/webdriver/tests/command.test.ts",
      "packages/webdriver/tests/constants.test.ts",
      "packages/webdriver/tests/index.test.ts",
      "packages/webdriver/tests/request.test.ts",
      "packages/webdriver/tests/request/error.test.ts",
      "packages/webdriver/tests/utils.test.ts"
    ],
    "base_commit": "db5eb1b432c0e5a58089a3f725c61ac1cfe82bbe",
    "head_commit": "6a0c0184ba9d5d1166176ee176f1374cc95dc870",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13852",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13852",
    "dockerfile": "",
    "pr_merged_at": "2024-11-26T07:26:46.000Z",
    "patch": "diff --git a/infra/compiler/src/plugins.ts b/infra/compiler/src/plugins.ts\nindex d7795d1ef22..e7e3cb141c4 100644\n--- a/infra/compiler/src/plugins.ts\n+++ b/infra/compiler/src/plugins.ts\n@@ -32,11 +32,11 @@ export function log(options: BuildOptions, pkg: PackageJson): Plugin {\n         name: 'LogPlugin',\n         setup(build) {\n             build.onStart(() => {\n-                console.log(`${l.name(pkg.name)} 🏗️ Building ${l.format(options.format)} package: ${l.file(srcFile)} → ${l.file(outFile)}`)\n+                console.log(`${l.name(pkg.name)} 🏗️ Building ${l.format(`${options.platform}:${options.format}`)} package: ${l.file(srcFile)} → ${l.file(outFile)}`)\n             })\n             build.onEnd((result) => {\n                 if (result.errors.length === 0) {\n-                    console.log(`${l.name(pkg.name)} ✅ Success building ${l.format(options.format)} package: ${l.file(srcFile)} → ${l.file(outFile)}`)\n+                    console.log(`${l.name(pkg.name)} ✅ Success building ${l.format(`${options.platform}:${options.format}`)} package: ${l.file(srcFile)} → ${l.file(outFile)}`)\n                 }\n             })\n         }\n\ndiff --git a/infra/compiler/src/utils.ts b/infra/compiler/src/utils.ts\nindex 21cb354062a..66cf75d199a 100644\n--- a/infra/compiler/src/utils.ts\n+++ b/infra/compiler/src/utils.ts\n@@ -9,5 +9,6 @@ export function getExternal(pkg: PackageJson) {\n         ...Object.keys(pkg.dependencies || {}),\n         ...Object.keys(pkg.peerDependencies || {}),\n         ...Object.keys(pkg.optionalDependencies || {}),\n+        './node.js'\n     ]\n }\n\ndiff --git a/packages/wdio-webdriver-mock-service/package.json b/packages/wdio-webdriver-mock-service/package.json\nindex 62205b82dfe..35419a24221 100644\n--- a/packages/wdio-webdriver-mock-service/package.json\n+++ b/packages/wdio-webdriver-mock-service/package.json\n@@ -30,7 +30,7 @@\n     \"@types/uuid\": \"^10.0.0\",\n     \"@wdio/protocols\": \"workspace:*\",\n     \"@wdio/types\": \"workspace:*\",\n-    \"nock\": \"14.0.0-beta.14\",\n+    \"nock\": \"14.0.0-beta.18\",\n     \"uuid\": \"^10.0.0\",\n     \"webdriverio\": \"workspace:*\"\n   },\n\ndiff --git a/packages/wdio-webdriver-mock-service/src/WebDriverMock.ts b/packages/wdio-webdriver-mock-service/src/WebDriverMock.ts\nindex e812e8d6a10..41ee222eeb9 100644\n--- a/packages/wdio-webdriver-mock-service/src/WebDriverMock.ts\n+++ b/packages/wdio-webdriver-mock-service/src/WebDriverMock.ts\n@@ -33,7 +33,9 @@ export default class WebDriverMock {\n     command: CommandMock\n     scope: nock.Scope\n     constructor(host: string = 'localhost', port: number = 4444, public path: string = '/') {\n-        this.scope = nock(`http://${host}:${port}`, { 'encodedQueryParams': true })\n+        this.scope = nock(`http://${host}:${port}`, {\n+            encodedQueryParams: true\n+        })\n         this.command = new Proxy({}, { get: this.get.bind(this) })\n     }\n \n\ndiff --git a/packages/wdio-webdriver-mock-service/src/index.ts b/packages/wdio-webdriver-mock-service/src/index.ts\nindex dde5952c5ab..690848516fd 100644\n--- a/packages/wdio-webdriver-mock-service/src/index.ts\n+++ b/packages/wdio-webdriver-mock-service/src/index.ts\n@@ -275,5 +275,9 @@ export const launcher = class WebdriverMockLauncher {\n     onPrepare(config: WebdriverIO.Config) {\n         config.hostname = 'localhost'\n         config.port = 4444\n+        config.runnerEnv = {\n+            ...(config.runnerEnv || {}),\n+            WDIO_USE_NATIVE_FETCH: 'true'\n+        }\n     }\n }\n\ndiff --git a/packages/webdriver/package.json b/packages/webdriver/package.json\nindex 6546d02b7a1..1266c5dd06b 100644\n--- a/packages/webdriver/package.json\n+++ b/packages/webdriver/package.json\n@@ -5,13 +5,16 @@\n   \"author\": \"Christian Bromann <mail@bromann.dev>\",\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/webdriver\",\n   \"license\": \"MIT\",\n-  \"main\": \"./build/index.cjs\",\n   \"type\": \"module\",\n+  \"main\": \"./build/index.cjs\",\n   \"module\": \"./build/index.js\",\n   \"exports\": {\n     \".\": {\n       \"types\": \"./build/index.d.ts\",\n-      \"import\": \"./build/index.js\",\n+      \"browserSource\": \"./src/browser.js\",\n+      \"browser\": \"./build/index.js\",\n+      \"importSource\": \"./src/node.ts\",\n+      \"import\": \"./build/node.js\",\n       \"requireSource\": \"./src/index.cts\",\n       \"require\": \"./build/index.cjs\"\n     }\n@@ -41,6 +44,7 @@\n     \"@wdio/types\": \"workspace:*\",\n     \"@wdio/utils\": \"workspace:*\",\n     \"deepmerge-ts\": \"^7.0.3\",\n+    \"undici\": \"^6.20.1\",\n     \"ws\": \"^8.8.0\"\n   }\n }\n\ndiff --git a/packages/webdriver/src/bidi/core.ts b/packages/webdriver/src/bidi/core.ts\nindex e6a5daba72e..e0c4bc5c7d3 100644\n--- a/packages/webdriver/src/bidi/core.ts\n+++ b/packages/webdriver/src/bidi/core.ts\n@@ -1,7 +1,7 @@\n import logger from '@wdio/logger'\n import type { ClientOptions, RawData, WebSocket } from 'ws'\n \n-import Socket from './socket.js'\n+import { environment } from '../environment.js'\n import type * as remote from './remoteTypes.js'\n import type { CommandData } from './remoteTypes.js'\n import type { CommandResponse } from './localTypes.js'\n@@ -27,7 +27,7 @@ export class BidiCore {\n     constructor (webSocketUrl: string, opts?: ClientOptions) {\n         this.#webSocketUrl = webSocketUrl\n         log.info(`Connect to webSocketUrl ${this.#webSocketUrl}`)\n-        this.#ws = new Socket(this.#webSocketUrl, opts) as WebSocket\n+        this.#ws = new environment.value.Socket(this.#webSocketUrl, opts) as unknown as WebSocket\n         this.#ws.on('message', this.#handleResponse.bind(this))\n     }\n \n@@ -81,7 +81,7 @@ export class BidiCore {\n         log.info(`Reconnect to new Bidi session at ${webSocketUrl}`)\n         this.close()\n         this.#webSocketUrl = webSocketUrl\n-        this.#ws = new Socket(this.#webSocketUrl, opts) as WebSocket\n+        this.#ws = new environment.value.Socket(this.#webSocketUrl, opts) as unknown as WebSocket\n         this.#ws.on('message', this.#handleResponse.bind(this))\n         return this.connect()\n     }\n\ndiff --git a/packages/webdriver/src/bidi/socket.ts b/packages/webdriver/src/bidi/socket.ts\nindex ddec2b42474..e276e59d076 100644\n--- a/packages/webdriver/src/bidi/socket.ts\n+++ b/packages/webdriver/src/bidi/socket.ts\n@@ -2,13 +2,13 @@\n  * A WebSocket implementation that wraps the browser native WebSocket\n  * interface and exposes a similar interface to the Node.js WebSocket\n  */\n-class BrowserSocket {\n+export class BrowserSocket {\n     #callbacks = new Set<any>()\n     #ws: WebSocket\n \n     // eslint-disable-next-line @typescript-eslint/no-unused-vars\n     constructor (wsUrl: string, opts: any) {\n-        this.#ws = new globalThis.WebSocket(wsUrl) as any\n+        this.#ws = new WebSocket(wsUrl) as any\n         this.#ws.onmessage = this.handleMessage.bind(this)\n     }\n \n@@ -45,10 +45,3 @@ class BrowserSocket {\n         this.#ws.close()\n     }\n }\n-\n-/**\n- * make sure to use the correct WebSocket implementation based on the environment\n- */\n-export default globalThis.window\n-    ? BrowserSocket\n-    : (await import('ws')).default\n\ndiff --git a/packages/webdriver/src/browser.ts b/packages/webdriver/src/browser.ts\nnew file mode 100644\nindex 00000000000..29e0481ee43\n--- /dev/null\n+++ b/packages/webdriver/src/browser.ts\n@@ -0,0 +1,15 @@\n+import WebDriver from './index.js'\n+import { BrowserSocket } from './bidi/socket.js'\n+import { FetchRequest } from './request/web.js'\n+\n+export default WebDriver\n+export * from './index.js'\n+\n+import { environment } from './environment.js'\n+\n+environment.value = {\n+    Request: FetchRequest,\n+    Socket: BrowserSocket,\n+    variables: {}\n+}\n+\n\ndiff --git a/packages/webdriver/src/command.ts b/packages/webdriver/src/command.ts\nindex 63a6443e003..e8da94e9fdc 100644\n--- a/packages/webdriver/src/command.ts\n+++ b/packages/webdriver/src/command.ts\n@@ -2,7 +2,7 @@ import logger from '@wdio/logger'\n import { commandCallStructure, isValidParameter, getArgumentType } from '@wdio/utils'\n import { WebDriverBidiProtocol, type CommandEndpoint } from '@wdio/protocols'\n \n-import Request from './request/request.js'\n+import { environment } from './environment.js'\n import type { BidiHandler } from './bidi/handler.js'\n import type { WebDriverResponse } from './request/types.js'\n import type { BaseClient, BidiCommands, BidiResponses } from './types.js'\n@@ -120,7 +120,7 @@ export default function (\n             body[commandParams[i].name] = arg\n         }\n \n-        const request = new Request(method, endpoint, body, isHubCommand)\n+        const request = new environment.value.Request(method, endpoint, body, isHubCommand)\n         request.on('performance', (...args) => this.emit('request.performance', ...args))\n         this.emit('command', { command, method, endpoint, body })\n         log.info('COMMAND', commandCallStructure(command, args))\n\ndiff --git a/packages/webdriver/src/constants.ts b/packages/webdriver/src/constants.ts\nindex 5bf361d9dd6..a5b83d179bc 100644\n--- a/packages/webdriver/src/constants.ts\n+++ b/packages/webdriver/src/constants.ts\n@@ -1,5 +1,6 @@\n-import os from 'node:os'\n import type { Options } from '@wdio/types'\n+\n+import { environment } from './environment.js'\n import type { RemoteConfig } from './types.js'\n \n export const DEFAULTS: Options.Definition<Required<RemoteConfig>> = {\n@@ -139,7 +140,7 @@ export const DEFAULTS: Options.Definition<Required<RemoteConfig>> = {\n      */\n     cacheDir: {\n         type: 'string',\n-        default: process.env.WEBDRIVER_CACHE_DIR || os.tmpdir()\n+        default: environment.value.variables.WEBDRIVER_CACHE_DIR\n     }\n }\n \n\ndiff --git a/packages/webdriver/src/environment.ts b/packages/webdriver/src/environment.ts\nnew file mode 100644\nindex 00000000000..1be7a5cac0f\n--- /dev/null\n+++ b/packages/webdriver/src/environment.ts\n@@ -0,0 +1,38 @@\n+import type { BrowserSocket } from './bidi/socket.js'\n+import type { FetchRequest } from './request/web.js'\n+\n+/**\n+ * @internal\n+ */\n+export const isNode = !!(typeof process !== 'undefined' && process.version)\n+\n+export interface EnvironmentVariables {\n+    WEBDRIVER_CACHE_DIR?: string\n+    PROXY_URL?: string\n+}\n+\n+export interface EnvironmentDependencies {\n+    Request: typeof FetchRequest,\n+    Socket: typeof BrowserSocket,\n+    variables: EnvironmentVariables\n+}\n+\n+/**\n+ * Holder for environment dependencies. These dependencies cannot\n+ * be used during the module instantiation.\n+ */\n+export const environment: {\n+    value: EnvironmentDependencies;\n+} = {\n+    value: {\n+        get Request(): EnvironmentDependencies['Request'] {\n+            throw new Error('Request is not available in this environment')\n+        },\n+        get Socket(): EnvironmentDependencies['Socket'] {\n+            throw new Error('Socket is not available in this environment')\n+        },\n+        get variables(): EnvironmentDependencies['variables'] {\n+            return {}\n+        }\n+    }\n+}\n\ndiff --git a/packages/webdriver/src/index.cts b/packages/webdriver/src/index.cts\nindex 9fd03de94aa..22c3f3af0d3 100644\n--- a/packages/webdriver/src/index.cts\n+++ b/packages/webdriver/src/index.cts\n@@ -1,7 +1,9 @@\n+const esmModule = import('./node.js')\n+\n function command (method: string, encodeUri: string, commandInfo: any, doubleEncodeVariables = false) {\n     return async function protocolCommand(this: unknown, ...args: unknown[]) {\n-        const commandESM = await import('./command.js')\n-        return commandESM.default(method, encodeUri, commandInfo, doubleEncodeVariables).apply(this, args)\n+        const commandESM = await esmModule\n+        return commandESM.command(method, encodeUri, commandInfo, doubleEncodeVariables).apply(this, args)\n     }\n }\n \n@@ -12,7 +14,7 @@ class WebDriver {\n         userPrototype = {},\n         customCommandWrapper?: () => any\n     ): Promise<any> {\n-        const WebDriver = (await import('./index.js')).default\n+        const WebDriver = (await esmModule).WebDriver\n         return WebDriver.newSession(options, modifier, userPrototype, customCommandWrapper)\n     }\n \n@@ -25,19 +27,19 @@ class WebDriver {\n         userPrototype = {},\n         commandWrapper?: () => any\n     ): Promise<any> {\n-        const WebDriver = (await import('./index.js')).default\n+        const WebDriver = (await esmModule).WebDriver\n         return WebDriver.attachToSession(options, modifier, userPrototype, commandWrapper)\n     }\n \n     /**\n      * Changes The instance session id and browser capabilities for the new session\n-     * directly into the passed in browser object\n+     * directly into the passed in browser object!!\n      *\n      * @param   {object} instance  the object we get from a new browser session.\n      * @returns {string}           the new session id of the browser\n      */\n     static async reloadSession (instance: any) {\n-        const WebDriver = (await import('./index.js')).default\n+        const WebDriver = (await esmModule).WebDriver\n         return WebDriver.reloadSession(instance)\n     }\n \n\ndiff --git a/packages/webdriver/src/index.ts b/packages/webdriver/src/index.ts\nindex e66d33f5d07..2e936da713a 100644\n--- a/packages/webdriver/src/index.ts\n+++ b/packages/webdriver/src/index.ts\n@@ -217,7 +217,7 @@ export default class WebDriver {\n /**\n  * Helper methods consumed by webdriverio package\n  */\n-export { getPrototype, DEFAULTS, command, getEnvironmentVars, initiateBidi, parseBidiMessage }\n+export { getPrototype, DEFAULTS, command, getEnvironmentVars, initiateBidi, parseBidiMessage, WebDriver }\n export * from './types.js'\n export * from './constants.js'\n export * from './bidi/handler.js'\n\ndiff --git a/packages/webdriver/src/node.ts b/packages/webdriver/src/node.ts\nnew file mode 100644\nindex 00000000000..fa571c87d3c\n--- /dev/null\n+++ b/packages/webdriver/src/node.ts\n@@ -0,0 +1,35 @@\n+import os from 'node:os'\n+import ws from 'ws'\n+\n+import WebDriver from './index.js'\n+import { FetchRequest } from './request/node.js'\n+import { FetchRequest as WebFetchRequest } from './request/web.js'\n+import type { BrowserSocket } from './bidi/socket.js'\n+\n+export default WebDriver\n+export * from './index.js'\n+\n+import { environment } from './environment.js'\n+\n+environment.value = {\n+    Request: (\n+        /**\n+         * Currently Nock doesn't support the mocking of undici requests, therefore for all\n+         * Smoke test we use the native fetch implementation.\n+         *\n+         * @see https://github.com/nock/nock/issues/2183#issuecomment-2252525890\n+         */\n+        process.env.WDIO_USE_NATIVE_FETCH ||\n+        /**\n+         * For unit tests we use the WebFetchRequest implementation as we can better mock the\n+         * requests in the unit tests.\n+         */\n+        process.env.WDIO_UNIT_TESTS\n+    ) ? WebFetchRequest : FetchRequest,\n+    Socket: ws as unknown as typeof BrowserSocket,\n+    variables: {\n+        WEBDRIVER_CACHE_DIR: process.env.WEBDRIVER_CACHE_DIR || os.tmpdir(),\n+        PROXY_URL: process.env.HTTP_PROXY || process.env.HTTPS_PROXY\n+    }\n+}\n+\n\ndiff --git a/packages/webdriver/src/request/index.ts b/packages/webdriver/src/request/index.ts\ndeleted file mode 100644\nindex ecae46498f6..00000000000\n--- a/packages/webdriver/src/request/index.ts\n+++ /dev/null\n@@ -1,281 +0,0 @@\n-import path from 'node:path'\n-import { EventEmitter } from 'node:events'\n-import { WebDriverProtocol } from '@wdio/protocols'\n-import { URL } from 'node:url'\n-\n-import logger from '@wdio/logger'\n-import { transformCommandLogResult, sleep } from '@wdio/utils'\n-import type { Options } from '@wdio/types'\n-\n-import  { WebDriverResponseError, type WebDriverRequestError } from './error.js'\n-import { RETRYABLE_STATUS_CODES, RETRYABLE_ERROR_CODES } from './constants.js'\n-import type { WebDriverResponse } from './types.js'\n-\n-import { isSuccessfulResponse } from '../utils.js'\n-import { DEFAULTS } from '../constants.js'\n-import pkg from '../../package.json' with { type: 'json' }\n-\n-type RequestLibResponse = Options.RequestLibResponse\n-type RequestOptions = Omit<Options.WebDriver, 'capabilities'>\n-\n-const ERRORS_TO_EXCLUDE_FROM_RETRY = [\n-    'detached shadow root',\n-    'move target out of bounds'\n-]\n-\n-export const COMMANDS_WITHOUT_RETRY = [\n-    findCommandPathByName('performActions'),\n-]\n-\n-const DEFAULT_HEADERS = {\n-    'Content-Type': 'application/json; charset=utf-8',\n-    'Connection': 'keep-alive',\n-    'Accept': 'application/json',\n-    'User-Agent': 'webdriver/' + pkg.version\n-}\n-\n-const log = logger('webdriver')\n-\n-export default abstract class WebDriverRequest extends EventEmitter {\n-    #requestTimeout?: NodeJS.Timeout\n-\n-    body?: Record<string, unknown>\n-    method: string\n-    endpoint: string\n-    isHubCommand: boolean\n-    requiresSessionId: boolean\n-\n-    constructor (method: string, endpoint: string, body?: Record<string, unknown>, isHubCommand: boolean = false) {\n-        super()\n-        this.body = body\n-        this.method = method\n-        this.endpoint = endpoint\n-        this.isHubCommand = isHubCommand\n-        this.requiresSessionId = Boolean(this.endpoint.match(/:sessionId/))\n-    }\n-\n-    async makeRequest (options: RequestOptions, sessionId?: string) {\n-        const { url, requestOptions } = await this._createOptions(options, sessionId)\n-        let fullRequestOptions: RequestInit = Object.assign(\n-            { method: this.method },\n-            requestOptions\n-        )\n-        if (typeof options.transformRequest === 'function') {\n-            fullRequestOptions = options.transformRequest(fullRequestOptions)\n-        }\n-\n-        this.emit('request', fullRequestOptions)\n-        return this._request(url, fullRequestOptions, options.transformResponse, options.connectionRetryCount, 0)\n-    }\n-\n-    protected async _createOptions (options: RequestOptions, sessionId?: string, isBrowser: boolean = false): Promise<{url: URL; requestOptions: RequestInit;}> {\n-        const controller = new AbortController()\n-        this.#requestTimeout = setTimeout(\n-            () => controller.abort(),\n-            options.connectionRetryTimeout || DEFAULTS.connectionRetryTimeout.default\n-        )\n-\n-        const requestOptions: RequestInit = {\n-            signal: controller.signal\n-        }\n-\n-        const requestHeaders: HeadersInit = new Headers({\n-            ...DEFAULT_HEADERS,\n-            ...(typeof options.headers === 'object' ? options.headers : {})\n-        })\n-\n-        const searchParams = isBrowser ? undefined : (typeof options.queryParams === 'object' ? options.queryParams : undefined)\n-\n-        /**\n-         * only apply body property if existing\n-         */\n-        if (this.body && (Object.keys(this.body).length || this.method === 'POST')) {\n-            const contentLength = Buffer.byteLength(JSON.stringify(this.body), 'utf8')\n-            requestOptions.body = this.body as any\n-            requestHeaders.set('Content-Length', `${contentLength}`)\n-        }\n-\n-        /**\n-         * if we don't have a session id we set it here, unless we call commands that don't require session ids, for\n-         * example /sessions. The call to /sessions is not connected to a session itself and it therefore doesn't\n-         * require it\n-         */\n-        let endpoint = this.endpoint\n-        if (this.requiresSessionId) {\n-            if (!sessionId) {\n-                throw new Error('A sessionId is required for this command')\n-            }\n-            endpoint = endpoint.replace(':sessionId', sessionId)\n-        }\n-\n-        const url = new URL(`${options.protocol}://${options.hostname}:${options.port}${this.isHubCommand ? this.endpoint : path.join(options.path || '', endpoint)}`)\n-\n-        if (searchParams) {\n-            url.search = new URLSearchParams(searchParams).toString()\n-        }\n-\n-        /**\n-         * send authentication credentials only when creating new session\n-         */\n-        if (this.endpoint === '/session' && options.user && options.key) {\n-            requestHeaders.set('Authorization', 'Basic ' + btoa(options.user + ':' + options.key))\n-        }\n-\n-        requestOptions.headers = requestHeaders\n-\n-        return { url, requestOptions }\n-    }\n-\n-    protected async _libRequest(url: URL, options: RequestInit): Promise<RequestLibResponse> { // eslint-disable-line @typescript-eslint/no-unused-vars\n-        throw new Error('This function must be implemented')\n-    }\n-\n-    protected _libPerformanceNow(): number {\n-        throw new Error('This function must be implemented')\n-    }\n-\n-    private async _request (\n-        url: URL,\n-        fullRequestOptions: RequestInit,\n-        transformResponse?: (response: RequestLibResponse, requestOptions: RequestInit) => RequestLibResponse,\n-        totalRetryCount = 0,\n-        retryCount = 0\n-    ): Promise<WebDriverResponse> {\n-        log.info(`[${fullRequestOptions.method}] ${(url as URL).href}`)\n-\n-        if (fullRequestOptions.body && Object.keys(fullRequestOptions.body).length) {\n-            log.info('DATA', transformCommandLogResult(fullRequestOptions.body as any))\n-        }\n-\n-        const { ...requestLibOptions } = fullRequestOptions\n-        const startTime = this._libPerformanceNow()\n-        let response = await this._libRequest(url!, requestLibOptions)\n-            .catch((err: WebDriverRequestError) => err)\n-        const durationMillisecond = this._libPerformanceNow() - startTime\n-\n-        if (this.#requestTimeout) {\n-            clearTimeout(this.#requestTimeout)\n-        }\n-\n-        /**\n-         * handle retries for requests\n-         * @param {Error} error  error object that causes the retry\n-         * @param {string} msg   message that is being shown as warning to user\n-         */\n-        const retry = async (error: Error) => {\n-            /**\n-             * stop retrying if totalRetryCount was exceeded or there is no reason to\n-             * retry, e.g. if sessionId is invalid\n-             */\n-            if (retryCount >= totalRetryCount || error.message.includes('invalid session id')) {\n-                log.error(error.message)\n-                this.emit('response', { error })\n-                this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: false, error, retryCount })\n-                throw error\n-            }\n-\n-            if (retryCount > 0) {\n-                /*\n-                 * Exponential backoff with a minimum of 500ms and a maximum of 10_000ms.\n-                 */\n-                await sleep(Math.min(10000, 250 * Math.pow(2, retryCount)))\n-            }\n-\n-            ++retryCount\n-\n-            this.emit('retry', { error, retryCount })\n-            this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: false, error, retryCount })\n-            log.warn(error.message)\n-            log.info(`Retrying ${retryCount}/${totalRetryCount}`)\n-            return this._request(url, fullRequestOptions, transformResponse, totalRetryCount, retryCount)\n-        }\n-\n-        /**\n-         * handle request errors\n-         */\n-        if (response instanceof Error) {\n-            const resError = response as WebDriverRequestError\n-\n-            /**\n-             * retry failed requests\n-             */\n-            if (\n-                (resError.code && RETRYABLE_ERROR_CODES.includes(resError.code)) ||\n-                (resError.statusCode && RETRYABLE_STATUS_CODES.includes(resError.statusCode))\n-            ) {\n-                return retry(resError)\n-            }\n-\n-            /**\n-             * throw if request error is unknown\n-             */\n-            this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: false, error: response, retryCount })\n-            throw response\n-        }\n-\n-        if (typeof transformResponse === 'function') {\n-            response = transformResponse(response, fullRequestOptions) as RequestLibResponse\n-        }\n-\n-        /**\n-         * Resolve only if successful response\n-         */\n-        if (isSuccessfulResponse(response.statusCode, response.body)) {\n-            this.emit('response', { result: response.body })\n-            this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: true, retryCount })\n-            return response.body\n-        }\n-\n-        const error = new WebDriverResponseError(response, url, fullRequestOptions)\n-\n-        /**\n-         * hub commands don't follow standard response formats\n-         * and can have empty bodies\n-         */\n-        if (this.isHubCommand) {\n-            /**\n-             * if body contains HTML the command was called on a node\n-             * directly without using a hub, therefore throw\n-             */\n-            if (typeof response.body === 'string' && response.body.startsWith('<!DOCTYPE html>')) {\n-                this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: false, error, retryCount })\n-                return Promise.reject(new Error('Command can only be called to a Selenium Hub'))\n-            }\n-\n-            return { value: response.body || null }\n-        }\n-\n-        /**\n-         * stop retrying as this will never be successful.\n-         * we will handle this at the elementErrorHandler\n-         */\n-        if (error.name === 'stale element reference') {\n-            log.warn('Request encountered a stale element - terminating request')\n-            this.emit('response', { error })\n-            this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: false, error, retryCount })\n-            throw error\n-        }\n-\n-        /**\n-         * some errors can be excluded from the request retry mechanism as\n-         * it likely does not changes anything and the error is handled within the command.\n-         */\n-        if (ERRORS_TO_EXCLUDE_FROM_RETRY.includes(error.name)) {\n-            throw error\n-        }\n-\n-        return retry(error)\n-    }\n-}\n-\n-function findCommandPathByName (commandName: string) {\n-    const command = Object.entries(WebDriverProtocol).find(\n-        ([, command]) => Object.values(command).find(\n-            (cmd) => cmd.command === commandName))\n-\n-    if (!command) {\n-        throw new Error(`Couldn't find command \"${commandName}\"`)\n-    }\n-\n-    return command[0]\n-}\n\ndiff --git a/packages/webdriver/src/request/node.ts b/packages/webdriver/src/request/node.ts\nnew file mode 100644\nindex 00000000000..47aa9435173\n--- /dev/null\n+++ b/packages/webdriver/src/request/node.ts\n@@ -0,0 +1,33 @@\n+import dns from 'node:dns'\n+import { fetch, Agent, type RequestInit as UndiciRequestInit, ProxyAgent } from 'undici'\n+\n+import { environment } from '../environment.js'\n+import { WebDriverRequest } from './request.js'\n+import type { RequestOptions } from './types.js'\n+\n+// As per this https://github.com/node-fetch/node-fetch/issues/1624#issuecomment-1407717012 we are setting ipv4first as default IP resolver.\n+// This can be removed when we drop Node18 support.\n+dns.setDefaultResultOrder('ipv4first')\n+\n+/**\n+ * Node implementation of WebDriverRequest using undici fetch\n+ */\n+export class FetchRequest extends WebDriverRequest {\n+    fetch (url: URL, opts: RequestInit) {\n+        return fetch(url, opts as UndiciRequestInit) as Promise<Response>\n+    }\n+\n+    async createOptions (options: RequestOptions, sessionId?: string, isBrowser: boolean = false) {\n+        const { url, requestOptions } = await super.createOptions(options, sessionId, isBrowser)\n+\n+        /**\n+         * Use a proxy agent if we have a proxy url set\n+         */\n+        const dispatcher = environment.value.variables.PROXY_URL\n+            ? new ProxyAgent(environment.value.variables.PROXY_URL)\n+            : new Agent({ connectTimeout: options.connectionRetryTimeout })\n+\n+        ;(requestOptions as UndiciRequestInit).dispatcher = dispatcher\n+        return { url, requestOptions }\n+    }\n+}\n\ndiff --git a/packages/webdriver/src/request/request.ts b/packages/webdriver/src/request/request.ts\nindex 5b0a06796f0..e4f6d398ba0 100644\n--- a/packages/webdriver/src/request/request.ts\n+++ b/packages/webdriver/src/request/request.ts\n@@ -1,29 +1,121 @@\n-import { performance } from 'node:perf_hooks'\n-import type { URL } from 'node:url'\n-import dns from 'node:dns'\n+import path from 'node:path'\n+import { EventEmitter } from 'node:events'\n \n+import logger from '@wdio/logger'\n+import { transformCommandLogResult, sleep } from '@wdio/utils'\n import type { Options } from '@wdio/types'\n \n-import WebDriverRequest from './index.js'\n-import { WebDriverRequestError } from './error.js'\n+import  { WebDriverResponseError, WebDriverRequestError } from './error.js'\n+import { RETRYABLE_STATUS_CODES, RETRYABLE_ERROR_CODES } from './constants.js'\n+import type { WebDriverResponse, RequestLibResponse, RequestOptions } from './types.js'\n \n-// As per this https://github.com/node-fetch/node-fetch/issues/1624#issuecomment-1407717012 we are setting ipv4first as default IP resolver.\n-// This can be removed when we drop Node18 support.\n-if ('process' in globalThis && globalThis.process.versions?.node) {\n-    dns.setDefaultResultOrder('ipv4first')\n+import { isSuccessfulResponse } from '../utils.js'\n+import { DEFAULTS } from '../constants.js'\n+import pkg from '../../package.json' with { type: 'json' }\n+\n+const ERRORS_TO_EXCLUDE_FROM_RETRY = [\n+    'detached shadow root',\n+    'move target out of bounds'\n+]\n+\n+const DEFAULT_HEADERS = {\n+    'Content-Type': 'application/json; charset=utf-8',\n+    'Connection': 'keep-alive',\n+    'Accept': 'application/json',\n+    'User-Agent': 'webdriver/' + pkg.version\n }\n \n-export default class FetchRequest extends WebDriverRequest {\n+const log = logger('webdriver')\n+\n+export abstract class WebDriverRequest extends EventEmitter {\n+    protected abstract fetch(url: URL, opts: RequestInit): Promise<Response>\n+\n+    body?: Record<string, unknown>\n+    method: string\n+    endpoint: string\n+    isHubCommand: boolean\n+    requiresSessionId: boolean\n+\n     constructor (method: string, endpoint: string, body?: Record<string, unknown>, isHubCommand: boolean = false) {\n-        super(method, endpoint, body, isHubCommand)\n+        super()\n+        this.body = body\n+        this.method = method\n+        this.endpoint = endpoint\n+        this.isHubCommand = isHubCommand\n+        this.requiresSessionId = Boolean(this.endpoint.match(/:sessionId/))\n+    }\n+\n+    async makeRequest (options: RequestOptions, sessionId?: string) {\n+        const { url, requestOptions } = await this.createOptions(options, sessionId)\n+        this.emit('request', requestOptions)\n+        return this._request(url, requestOptions, options.transformResponse, options.connectionRetryCount, 0)\n+    }\n+\n+    async createOptions (options: RequestOptions, sessionId?: string, isBrowser: boolean = false): Promise<{url: URL; requestOptions: RequestInit;}> {\n+        const timeout = options.connectionRetryTimeout || DEFAULTS.connectionRetryTimeout.default as number\n+        const requestOptions: RequestInit = {\n+            method: this.method,\n+            signal: AbortSignal.timeout(timeout)\n+        }\n+\n+        const requestHeaders: HeadersInit = new Headers({\n+            ...DEFAULT_HEADERS,\n+            ...(typeof options.headers === 'object' ? options.headers : {})\n+        })\n+\n+        const searchParams = isBrowser ? undefined : (typeof options.queryParams === 'object' ? options.queryParams : undefined)\n+\n+        /**\n+         * only apply body property if existing\n+         */\n+        if (this.body && (Object.keys(this.body).length || this.method === 'POST')) {\n+            const contentLength = Buffer.byteLength(JSON.stringify(this.body), 'utf8')\n+            requestOptions.body = this.body as any\n+            requestHeaders.set('Content-Length', `${contentLength}`)\n+        }\n+\n+        /**\n+         * if we don't have a session id we set it here, unless we call commands that don't require session ids, for\n+         * example /sessions. The call to /sessions is not connected to a session itself and it therefore doesn't\n+         * require it\n+         */\n+        let endpoint = this.endpoint\n+        if (this.requiresSessionId) {\n+            if (!sessionId) {\n+                throw new Error('A sessionId is required for this command')\n+            }\n+            endpoint = endpoint.replace(':sessionId', sessionId)\n+        }\n+\n+        const url = new URL(`${options.protocol}://${options.hostname}:${options.port}${this.isHubCommand ? this.endpoint : path.join(options.path || '', endpoint)}`)\n+\n+        if (searchParams) {\n+            url.search = new URLSearchParams(searchParams).toString()\n+        }\n+\n+        /**\n+         * send authentication credentials only when creating new session\n+         */\n+        if (this.endpoint === '/session' && options.user && options.key) {\n+            requestHeaders.set('Authorization', 'Basic ' + btoa(options.user + ':' + options.key))\n+        }\n+\n+        requestOptions.headers = requestHeaders\n+\n+        return {\n+            url,\n+            requestOptions: typeof options.transformRequest === 'function'\n+                ? options.transformRequest(requestOptions)\n+                : requestOptions\n+        }\n     }\n \n     protected async _libRequest (url: URL, opts: RequestInit): Promise<Options.RequestLibResponse> {\n         try {\n-            const response = await fetch(url, {\n+            const response = await this.fetch(url, {\n                 method: opts.method,\n                 body: JSON.stringify(opts.body),\n-                headers: opts.headers,\n+                headers: opts.headers as Record<string, string>,\n                 signal: opts.signal,\n             })\n \n@@ -47,7 +139,132 @@ export default class FetchRequest extends WebDriverRequest {\n         }\n     }\n \n-    protected _libPerformanceNow(): number {\n-        return performance.now()\n+    protected async _request (\n+        url: URL,\n+        fullRequestOptions: RequestInit,\n+        transformResponse?: (response: RequestLibResponse, requestOptions: RequestInit) => RequestLibResponse,\n+        totalRetryCount = 0,\n+        retryCount = 0\n+    ): Promise<WebDriverResponse> {\n+        log.info(`[${fullRequestOptions.method}] ${(url as URL).href}`)\n+\n+        if (fullRequestOptions.body && Object.keys(fullRequestOptions.body).length) {\n+            log.info('DATA', transformCommandLogResult(fullRequestOptions.body as any))\n+        }\n+\n+        const { ...requestLibOptions } = fullRequestOptions\n+        const startTime = performance.now()\n+        let response = await this._libRequest(url!, requestLibOptions)\n+            .catch((err: WebDriverRequestError) => err)\n+        const durationMillisecond = performance.now() - startTime\n+\n+        /**\n+         * handle retries for requests\n+         * @param {Error} error  error object that causes the retry\n+         * @param {string} msg   message that is being shown as warning to user\n+         */\n+        const retry = async (error: Error) => {\n+            /**\n+             * stop retrying if totalRetryCount was exceeded or there is no reason to\n+             * retry, e.g. if sessionId is invalid\n+             */\n+            if (retryCount >= totalRetryCount || error.message.includes('invalid session id')) {\n+                log.error(error.message)\n+                this.emit('response', { error })\n+                this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: false, error, retryCount })\n+                throw error\n+            }\n+\n+            if (retryCount > 0) {\n+                /*\n+                 * Exponential backoff with a minimum of 500ms and a maximum of 10_000ms.\n+                 */\n+                await sleep(Math.min(10000, 250 * Math.pow(2, retryCount)))\n+            }\n+\n+            ++retryCount\n+\n+            this.emit('retry', { error, retryCount })\n+            this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: false, error, retryCount })\n+            log.warn(error.message)\n+            log.info(`Retrying ${retryCount}/${totalRetryCount}`)\n+            return this._request(url, fullRequestOptions, transformResponse, totalRetryCount, retryCount)\n+        }\n+\n+        /**\n+         * handle request errors\n+         */\n+        if (response instanceof Error) {\n+            const resError = response as WebDriverRequestError\n+\n+            /**\n+             * retry failed requests\n+             */\n+            if (\n+                (resError.code && RETRYABLE_ERROR_CODES.includes(resError.code)) ||\n+                (resError.statusCode && RETRYABLE_STATUS_CODES.includes(resError.statusCode))\n+            ) {\n+                return retry(resError)\n+            }\n+\n+            /**\n+             * throw if request error is unknown\n+             */\n+            this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: false, error: response, retryCount })\n+            throw response\n+        }\n+\n+        if (typeof transformResponse === 'function') {\n+            response = transformResponse(response, fullRequestOptions) as RequestLibResponse\n+        }\n+\n+        /**\n+         * Resolve only if successful response\n+         */\n+        if (isSuccessfulResponse(response.statusCode, response.body)) {\n+            this.emit('response', { result: response.body })\n+            this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: true, retryCount })\n+            return response.body\n+        }\n+\n+        const error = new WebDriverResponseError(response, url, fullRequestOptions)\n+\n+        /**\n+         * hub commands don't follow standard response formats\n+         * and can have empty bodies\n+         */\n+        if (this.isHubCommand) {\n+            /**\n+             * if body contains HTML the command was called on a node\n+             * directly without using a hub, therefore throw\n+             */\n+            if (typeof response.body === 'string' && response.body.startsWith('<!DOCTYPE html>')) {\n+                this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: false, error, retryCount })\n+                return Promise.reject(new Error('Command can only be called to a Selenium Hub'))\n+            }\n+\n+            return { value: response.body || null }\n+        }\n+\n+        /**\n+         * stop retrying as this will never be successful.\n+         * we will handle this at the elementErrorHandler\n+         */\n+        if (error.name === 'stale element reference') {\n+            log.warn('Request encountered a stale element - terminating request')\n+            this.emit('response', { error })\n+            this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: false, error, retryCount })\n+            throw error\n+        }\n+\n+        /**\n+         * some errors can be excluded from the request retry mechanism as\n+         * it likely does not changes anything and the error is handled within the command.\n+         */\n+        if (ERRORS_TO_EXCLUDE_FROM_RETRY.includes(error.name)) {\n+            throw error\n+        }\n+\n+        return retry(error)\n     }\n }\n\ndiff --git a/packages/webdriver/src/request/types.ts b/packages/webdriver/src/request/types.ts\nindex 839de92dd52..f8d3eeb4c14 100644\n--- a/packages/webdriver/src/request/types.ts\n+++ b/packages/webdriver/src/request/types.ts\n@@ -1,3 +1,5 @@\n+import type { Options } from '@wdio/types'\n+\n export interface WebDriverResponse {\n     value: any\n     /**\n@@ -14,3 +16,6 @@ export interface WebDriverResponse {\n     status?: number\n     sessionId?: string\n }\n+\n+export type RequestLibResponse = Options.RequestLibResponse\n+export type RequestOptions = Omit<Options.WebDriver, 'capabilities'>\n\ndiff --git a/packages/webdriver/src/request/web.ts b/packages/webdriver/src/request/web.ts\nnew file mode 100644\nindex 00000000000..7fb66e081df\n--- /dev/null\n+++ b/packages/webdriver/src/request/web.ts\n@@ -0,0 +1,10 @@\n+import { WebDriverRequest } from './request.js'\n+\n+/**\n+ * Cross platform implementation of a fetch based request using native fetch\n+ */\n+export class FetchRequest extends WebDriverRequest {\n+    fetch (url: URL, opts: RequestInit) {\n+        return fetch(url, opts)\n+    }\n+}\n\ndiff --git a/packages/webdriver/src/utils.ts b/packages/webdriver/src/utils.ts\nindex 56a6ea81595..162cef40ae9 100644\n--- a/packages/webdriver/src/utils.ts\n+++ b/packages/webdriver/src/utils.ts\n@@ -10,9 +10,9 @@ import {\n import { CAPABILITY_KEYS } from '@wdio/protocols'\n import type { Options } from '@wdio/types'\n \n-import Request from './request/request.js'\n import type { WebDriverResponse } from './request/types.js'\n import command from './command.js'\n+import { environment } from './environment.js'\n import { BidiHandler } from './bidi/handler.js'\n import type { Event } from './bidi/localTypes.js'\n import type { Client, JSONWPCommandError, SessionFlags, RemoteConfig } from './types.js'\n@@ -72,7 +72,7 @@ export async function startWebDriverSession (params: RemoteConfig): Promise<{ se\n     }\n \n     validateCapabilities(capabilities.alwaysMatch)\n-    const sessionRequest = new Request(\n+    const sessionRequest = new environment.value.Request(\n         'POST',\n         '/session',\n         { capabilities }\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex 3745b18bd0b..beacb233e56 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -1433,8 +1433,8 @@ importers:\n         specifier: workspace:*\n         version: link:../wdio-types\n       nock:\n-        specifier: 14.0.0-beta.14\n-        version: 14.0.0-beta.14\n+        specifier: 14.0.0-beta.18\n+        version: 14.0.0-beta.18\n       uuid:\n         specifier: ^10.0.0\n         version: 10.0.0\n@@ -1472,6 +1472,9 @@ importers:\n       deepmerge-ts:\n         specifier: ^7.0.3\n         version: 7.1.0\n+      undici:\n+        specifier: ^6.20.1\n+        version: 6.20.1\n       ws:\n         specifier: ^8.8.0\n         version: 8.18.0\n@@ -4260,8 +4263,8 @@ packages:\n       react: ^17.x || ^18.x\n       react-dom: ^17.x || ^18.x\n \n-  '@mswjs/interceptors@0.35.6':\n-    resolution: {integrity: sha512-PpD687w7qLxVMK176bpQjbzU9O0VC75QnBK5U1lKd29s4hIuxfTItUD6raNKyQ6BN8b64/8HE34RuYTkwH9uPQ==}\n+  '@mswjs/interceptors@0.36.10':\n+    resolution: {integrity: sha512-GXrJgakgJW3DWKueebkvtYgGKkxA7s0u5B0P5syJM5rvQUnrpLPigvci8Hukl7yEM+sU06l+er2Fgvx/gmiRgg==}\n     engines: {node: '>=18'}\n \n   '@napi-rs/wasm-runtime@0.2.4':\n@@ -10871,8 +10874,8 @@ packages:\n   no-case@3.0.4:\n     resolution: {integrity: sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==}\n \n-  nock@14.0.0-beta.14:\n-    resolution: {integrity: sha512-nbUIuqYkixyazl4hWBQ+EJzb5F0/NJabIQFEEIQwBHPaG+RxvVSs4uSCasHMnCrNuCmOndxgUBqS860g6/OwJw==}\n+  nock@14.0.0-beta.18:\n+    resolution: {integrity: sha512-pG+QkbovRb8XMdSTnV/GgFWdwWAv2y7bWMzdCQnk2gQ3JjrpHgBAd0V8IIIhSBLJVvrOAqhSBsZrxSntISvXjA==}\n     engines: {node: '>= 18'}\n \n   node-abi@3.67.0:\n@@ -13437,6 +13440,10 @@ packages:\n     resolution: {integrity: sha512-U8uCCl2x9TK3WANvmBavymRzxbfFYG+tAu+fgx3zxQy3qdagQqBLwJVrdyO1TBfUXvfKveMKJZhpvUYoOjM+4g==}\n     engines: {node: '>=18.17'}\n \n+  undici@6.20.1:\n+    resolution: {integrity: sha512-AjQF1QsmqfJys+LXfGTNum+qw4S88CojRInG/6t31W/1fk6G59s92bnAvGz5Cmur+kQv2SURXEvvudLmbrE8QA==}\n+    engines: {node: '>=18.17'}\n+\n   unicode-canonical-property-names-ecmascript@2.0.1:\n     resolution: {integrity: sha512-dA8WbNeb2a6oQzAQ55YlT5vQAWGV9WXOsi3SskE3bcCdM0P4SDd+24zS/OCacdRq5BkdsRj9q3Pg6YyQoxIGqg==}\n     engines: {node: '>=4'}\n@@ -17968,7 +17975,7 @@ snapshots:\n       react: 18.3.1\n       react-dom: 18.3.1(react@18.3.1)\n \n-  '@mswjs/interceptors@0.35.6':\n+  '@mswjs/interceptors@0.36.10':\n     dependencies:\n       '@open-draft/deferred-promise': 2.2.0\n       '@open-draft/logger': 0.3.0\n@@ -26373,9 +26380,9 @@ snapshots:\n       lower-case: 2.0.2\n       tslib: 2.8.1\n \n-  nock@14.0.0-beta.14:\n+  nock@14.0.0-beta.18:\n     dependencies:\n-      '@mswjs/interceptors': 0.35.6\n+      '@mswjs/interceptors': 0.36.10\n       json-stringify-safe: 5.0.1\n       propagate: 2.0.1\n \n@@ -29285,6 +29292,8 @@ snapshots:\n \n   undici@6.19.8: {}\n \n+  undici@6.20.1: {}\n+\n   unicode-canonical-property-names-ecmascript@2.0.1: {}\n \n   unicode-emoji-modifier-base@1.0.0: {}\n",
    "test_patch": "diff --git a/packages/webdriver/tests/__snapshots__/request.test.ts.snap b/packages/webdriver/tests/__snapshots__/request.test.ts.snap\ndeleted file mode 100644\nindex a5560191e10..00000000000\n--- a/packages/webdriver/tests/__snapshots__/request.test.ts.snap\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html\n-\n-exports[`webdriver request > defines correct exceptions for request retries 1`] = `\n-[\n-  \"/session/:sessionId/actions\",\n-]\n-`;\n\ndiff --git a/packages/webdriver/tests/bidi.test.ts b/packages/webdriver/tests/bidi.test.ts\nindex b0b619dedf6..39169800e5b 100644\n--- a/packages/webdriver/tests/bidi.test.ts\n+++ b/packages/webdriver/tests/bidi.test.ts\n@@ -1,5 +1,7 @@\n import path from 'node:path'\n import { describe, it, vi, expect, beforeAll, afterAll } from 'vitest'\n+\n+import '../src/node.js'\n import { BidiCore } from '../src/bidi/core.js'\n \n vi.mock('ws')\n@@ -77,7 +79,7 @@ describe('BidiCore', () => {\n \n             const error = await promise.catch((err) => err)\n             const errorMessage = 'WebDriver Bidi command \"session.new\" failed with error: foobar - I am an error!'\n-            expect(error.stack).toContain(path.join('packages', 'webdriver', 'tests', 'bidi.test.ts:68:'))\n+            expect(error.stack).toContain(path.join('packages', 'webdriver', 'tests', 'bidi.test.ts:70:'))\n             expect(error.stack).toContain(errorMessage)\n             expect(error.message).toBe(errorMessage)\n         })\n\ndiff --git a/packages/webdriver/tests/command.test.ts b/packages/webdriver/tests/command.test.ts\nindex b5880eb612e..a179190e939 100644\n--- a/packages/webdriver/tests/command.test.ts\n+++ b/packages/webdriver/tests/command.test.ts\n@@ -6,8 +6,9 @@ import logger from '@wdio/logger'\n import type { CommandEndpoint } from '@wdio/protocols'\n import type { Options } from '@wdio/types'\n \n+import '../src/browser.js'\n // @ts-expect-error mock feature\n-import RequestMock, { thenMock } from '../src/request/request.js'\n+import { WebDriverRequest as RequestMock, thenMock } from '../src/request/request.js'\n import commandWrapper from '../src/command.js'\n import type { BaseClient } from '../src/types.js'\n \n@@ -52,7 +53,7 @@ vi.mock('../src/request/request', () => {\n     const thenMock = vi.fn().mockResolvedValue({ value: 15 })\n     return {\n         thenMock,\n-        default: vi.fn().mockReturnValue({\n+        WebDriverRequest: vi.fn().mockReturnValue({\n             makeRequest: () => ({\n                 then: thenMock,\n                 catch: vi.fn()\n@@ -72,6 +73,8 @@ class FakeClient extends EventEmitter {\n     isFirefox = false\n     isBidi = false\n     isSeleniumStandalone = false\n+    isNativeContext = false\n+    mobileContext = ''\n     sessionId = '123'\n     capabilities = {}\n     requestedCapabilities = {}\n@@ -89,7 +92,7 @@ describe('command wrapper', () => {\n     })\n \n     it('should fail if wrong arguments are passed in', async () => {\n-        const commandFn = commandWrapper(commandMethod, commandPath, commandEndpoint).bind({})\n+        const commandFn = commandWrapper(commandMethod, commandPath, commandEndpoint).bind({} as unknown)\n         await expect(commandFn)\n             .rejects\n             .toThrow(/Wrong parameters applied for findElementFromElement/)\n\ndiff --git a/packages/webdriver/tests/constants.test.ts b/packages/webdriver/tests/constants.test.ts\nindex 2bbd8044a22..bf1194e3fae 100644\n--- a/packages/webdriver/tests/constants.test.ts\n+++ b/packages/webdriver/tests/constants.test.ts\n@@ -1,4 +1,6 @@\n import { test, expect } from 'vitest'\n+\n+import '../src/browser.js'\n import { DEFAULTS } from '../src/constants.js'\n \n test('should do correct type check for \"path\"', () => {\n\ndiff --git a/packages/webdriver/tests/index.test.ts b/packages/webdriver/tests/index.test.ts\nindex a7760dd24c3..845f88c64fb 100644\n--- a/packages/webdriver/tests/index.test.ts\n+++ b/packages/webdriver/tests/index.test.ts\n@@ -5,6 +5,8 @@ import logger, { logMock } from '@wdio/logger'\n import { sessionEnvironmentDetector } from '@wdio/utils'\n import { startWebDriver } from '@wdio/utils'\n \n+import '../src/browser.js'\n+\n import WebDriver, { getPrototype, DEFAULTS, command } from '../src/index.js'\n // @ts-expect-error mock feature\n import { initCount } from '../src/bidi/core.js'\n\ndiff --git a/packages/webdriver/tests/request.test.ts b/packages/webdriver/tests/request.test.ts\nindex 40a6b679d1c..a255390ad6b 100644\n--- a/packages/webdriver/tests/request.test.ts\n+++ b/packages/webdriver/tests/request.test.ts\n@@ -5,8 +5,8 @@ import path from 'node:path'\n import logger from '@wdio/logger'\n import type { Options } from '@wdio/types'\n \n-import WebDriverRequest from '../src/request/request.js'\n-import { COMMANDS_WITHOUT_RETRY } from '../src/request/index.js'\n+import '../src/browser.js'\n+import { FetchRequest } from '../src/request/web.js'\n \n vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdio/logger')))\n vi.mock('fetch')\n@@ -26,15 +26,15 @@ describe('webdriver request', () => {\n     })\n \n     it('should have some default options', () => {\n-        const req = new WebDriverRequest('POST', '/foo/bar', { foo: 'bar' })\n+        const req = new FetchRequest('POST', '/foo/bar', { foo: 'bar' })\n         expect(req.method).toBe('POST')\n         expect(req.endpoint).toBe('/foo/bar')\n     })\n \n     it('should be able to make request', async () => {\n-        const req = new WebDriverRequest('POST', '/foo/bar', { foo: 'bar' })\n+        const req = new FetchRequest('POST', '/foo/bar', { foo: 'bar' })\n         const url =  new URL('/foo/bar', baseUrl)\n-        req['_createOptions'] = vi.fn().mockImplementation((opts, sessionId) => ({\n+        req.createOptions = vi.fn().mockImplementation((opts, sessionId) => ({\n             url,\n             requestOptions:{\n                 foo: 'bar',\n@@ -55,7 +55,7 @@ describe('webdriver request', () => {\n     })\n \n     it('should pick up the fullRequestOptions returned by transformRequest', async () => {\n-        const req = new WebDriverRequest('POST', '/foo/bar', { foo: 'bar' })\n+        const req = new FetchRequest('POST', '/foo/bar', { foo: 'bar' })\n         const transformRequest = vi.fn().mockImplementation((requestOptions) => ({\n             ...requestOptions,\n             body: { foo: 'baz' }\n@@ -76,7 +76,7 @@ describe('webdriver request', () => {\n     })\n \n     it('should resolve with the body returned by transformResponse', async () => {\n-        const req = new WebDriverRequest('POST', 'session/:sessionId/element', { foo: 'requestBody' })\n+        const req = new FetchRequest('POST', 'session/:sessionId/element', { foo: 'requestBody' })\n \n         const transformResponse = vi.fn().mockImplementation((response) => ({\n             ...response,\n@@ -101,13 +101,13 @@ describe('webdriver request', () => {\n \n     describe('createOptions', () => {\n         it('fails if command requires sessionId but none given', async () => {\n-            const req = new WebDriverRequest('POST', `${webdriverPath}/:sessionId/element`, {})\n-            await expect(() => req['_createOptions']({ logLevel: 'warn' })).rejects.toThrow('A sessionId is required')\n+            const req = new FetchRequest('POST', `${webdriverPath}/:sessionId/element`, {})\n+            await expect(() => req.createOptions({ logLevel: 'warn' })).rejects.toThrow('A sessionId is required')\n         })\n \n         it('creates proper options set', async () => {\n-            const req = new WebDriverRequest('POST', `${webdriverPath}/:sessionId/element`, {})\n-            const { url, requestOptions } = await req['_createOptions']({\n+            const req = new FetchRequest('POST', `${webdriverPath}/:sessionId/element`, {})\n+            const { url, requestOptions } = await req.createOptions({\n                 protocol: 'https',\n                 hostname: 'localhost',\n                 port: 4445,\n@@ -119,14 +119,14 @@ describe('webdriver request', () => {\n \n             expect((url! as URL).href)\n                 .toBe('https://localhost:4445/session/foobar12345/element')\n-            expect([...requestOptions.headers.keys()])\n+            expect([...(requestOptions.headers as unknown as Map<string, string>).keys()])\n                 .toEqual(['accept', 'connection', 'content-length', 'content-type', 'foo', 'user-agent'])\n             expect(requestOptions.signal?.aborted).toBeFalsy()\n         })\n \n         it('ignors path when command is a hub command', async () => {\n-            const req = new WebDriverRequest('POST', '/grid/api/hub', {}, true)\n-            const options = await req['_createOptions']({\n+            const req = new FetchRequest('POST', '/grid/api/hub', {}, true)\n+            const options = await req.createOptions({\n                 protocol: 'https',\n                 hostname: 'localhost',\n                 port: 4445,\n@@ -137,23 +137,23 @@ describe('webdriver request', () => {\n         })\n \n         it('should add authorization header if user and key is given', async () => {\n-            const req = new WebDriverRequest('POST', webdriverPath, { some: 'body' })\n+            const req = new FetchRequest('POST', webdriverPath, { some: 'body' })\n             const user = 'foo'\n             const key = 'bar'\n-            const { requestOptions } = await req['_createOptions']({\n+            const { requestOptions } = await req.createOptions({\n                 ...defaultOptions,\n                 user,\n                 key,\n                 path: '/',\n                 logLevel: 'warn'\n             })\n-            expect(requestOptions.headers.get('Authorization')).toEqual('Basic ' + btoa(user + ':' + key))\n+            expect((requestOptions.headers as unknown as Map<string, string>).get('Authorization')).toEqual('Basic ' + btoa(user + ':' + key))\n             expect(requestOptions.body).toEqual({ some: 'body' })\n         })\n \n         it('sets request body to \"undefined\" when request object is empty and DELETE is used', async () => {\n-            const req = new WebDriverRequest('DELETE', webdriverPath, {})\n-            const { requestOptions } = await req['_createOptions']({\n+            const req = new FetchRequest('DELETE', webdriverPath, {})\n+            const { requestOptions } = await req.createOptions({\n                 ...defaultOptions,\n                 path: '/',\n                 logLevel: 'warn'\n@@ -162,8 +162,8 @@ describe('webdriver request', () => {\n         })\n \n         it('sets request body to \"undefined\" when request object is empty and GET is used', async () => {\n-            const req = new WebDriverRequest('GET', `${webdriverPath}/title`, {})\n-            const { requestOptions } = await req['_createOptions']({\n+            const req = new FetchRequest('GET', `${webdriverPath}/title`, {})\n+            const { requestOptions } = await req.createOptions({\n                 ...defaultOptions,\n                 path: '/',\n                 logLevel: 'warn'\n@@ -172,8 +172,8 @@ describe('webdriver request', () => {\n         })\n \n         it('should attach an empty object body when POST is used', async () => {\n-            const req = new WebDriverRequest('POST', '/status', {})\n-            const { requestOptions } = await req['_createOptions']({\n+            const req = new FetchRequest('POST', '/status', {})\n+            const { requestOptions } = await req.createOptions({\n                 ...defaultOptions,\n                 path: '/',\n                 logLevel: 'warn'\n@@ -182,45 +182,45 @@ describe('webdriver request', () => {\n         })\n \n         it('should add the Content-Length header when a request object has a body', async () => {\n-            const req = new WebDriverRequest('POST', webdriverPath, { foo: 'bar' })\n-            const { requestOptions } = await req['_createOptions']({\n+            const req = new FetchRequest('POST', webdriverPath, { foo: 'bar' })\n+            const { requestOptions } = await req.createOptions({\n                 ...defaultOptions,\n                 path: '/',\n                 logLevel: 'warn'\n             })\n-            expect([...requestOptions.headers.keys()])\n+            expect([...(requestOptions.headers as unknown as Map<string, string>).keys()])\n                 .toEqual(['accept', 'connection', 'content-length', 'content-type', 'user-agent'])\n-            expect(requestOptions.headers.get('Content-Length')).toBe('13')\n+            expect((requestOptions.headers as unknown as Map<string, string>).get('Content-Length')).toBe('13')\n         })\n \n         it('should add Content-Length as well any other header provided in the request options if there is body in the request object', async () => {\n-            const req = new WebDriverRequest('POST', webdriverPath, { foo: 'bar' })\n-            const { requestOptions } = await req['_createOptions']({\n+            const req = new FetchRequest('POST', webdriverPath, { foo: 'bar' })\n+            const { requestOptions } = await req.createOptions({\n                 ...defaultOptions, path: '/',\n                 headers: { foo: 'bar' },\n                 logLevel: 'warn'\n             })\n-            expect(requestOptions.headers.get('foo')).toContain('bar')\n-            expect(requestOptions.headers.get('Content-Length')).toBe('13')\n+            expect((requestOptions.headers as unknown as Map<string, string>).get('foo')).toContain('bar')\n+            expect((requestOptions.headers as unknown as Map<string, string>).get('Content-Length')).toBe('13')\n         })\n \n         it('should add only the headers provided if the request body is empty', async () => {\n-            const req = new WebDriverRequest('POST', webdriverPath)\n-            const { requestOptions } = await req['_createOptions']({\n+            const req = new FetchRequest('POST', webdriverPath)\n+            const { requestOptions } = await req.createOptions({\n                 ...defaultOptions,\n                 path: '/',\n                 headers: { foo: 'bar' },\n                 logLevel: 'warn'\n             })\n-            expect([...requestOptions.headers.keys()]).not.toContain('content-length')\n-            expect(requestOptions.headers.get('foo')).toContain('bar')\n+            expect([...(requestOptions.headers as unknown as Map<string, string>).keys()]).not.toContain('content-length')\n+            expect((requestOptions.headers as unknown as Map<string, string>).get('foo')).toContain('bar')\n         })\n     })\n \n     describe('_request', () => {\n         it('should make a request', async () => {\n             const expectedResponse = { value: { 'element-6066-11e4-a52e-4f735466cecf': 'some-elem-123' } }\n-            const req = new WebDriverRequest('POST', webdriverPath, {})\n+            const req = new FetchRequest('POST', webdriverPath, {})\n             req.emit = vi.fn()\n \n             const url = new URL('/session/foobar-123/element', baseUrl)\n@@ -239,7 +239,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should short circuit if request throws a stale element exception', async () => {\n-            const req = new WebDriverRequest('POST', 'session/:sessionId/element', {})\n+            const req = new FetchRequest('POST', 'session/:sessionId/element', {})\n             req.emit = vi.fn()\n \n             const url = new URL('/session/foobar-123/element/some-sub-sub-elem-231/click', baseUrl)\n@@ -257,7 +257,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should not fail code due to an empty server response', async () => {\n-            const req = new WebDriverRequest('POST', webdriverPath, {})\n+            const req = new FetchRequest('POST', webdriverPath, {})\n             req.emit = vi.fn()\n \n             const url = new URL('/empty', baseUrl)\n@@ -273,7 +273,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should retry requests but still fail', async () => {\n-            const req = new WebDriverRequest('POST', webdriverPath, {})\n+            const req = new FetchRequest('POST', webdriverPath, {})\n             req.emit = vi.fn()\n \n             const url = new URL('/failing', baseUrl)\n@@ -293,7 +293,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should retry and eventually respond', async () => {\n-            const req = new WebDriverRequest('POST', webdriverPath, {})\n+            const req = new FetchRequest('POST', webdriverPath, {})\n             req.emit = vi.fn()\n \n             const url = new URL('/failing', baseUrl)\n@@ -313,7 +313,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should manage hub commands', async () => {\n-            const req = new WebDriverRequest('POST', '/grid/api/hub', {}, true)\n+            const req = new FetchRequest('POST', '/grid/api/hub', {}, true)\n             expect(await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -324,7 +324,7 @@ describe('webdriver request', () => {\n         })\n \n         it('should fail if hub command is called on node', async () => {\n-            const req = new WebDriverRequest('POST', '/grid/api/testsession', {}, true)\n+            const req = new FetchRequest('POST', '/grid/api/testsession', {}, true)\n             const result = await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -341,7 +341,7 @@ describe('webdriver request', () => {\n         describe('\"ETIMEDOUT\" error', () => {\n             it('should throw if timeout happens too often', async () => {\n                 const retryCnt = 3\n-                const req = new WebDriverRequest('POST', '/timeout', {}, true)\n+                const req = new FetchRequest('POST', '/timeout', {}, true)\n                 const reqRetryCnt = vi.fn()\n                 req.on('retry', reqRetryCnt)\n                 const result = await req.makeRequest({\n@@ -360,7 +360,7 @@ describe('webdriver request', () => {\n             })\n \n             it('should use error from \"getRequestError\" helper', async () => {\n-                const req = new WebDriverRequest('GET', '/timeout', {}, true)\n+                const req = new FetchRequest('GET', '/timeout', {}, true)\n                 req.emit = vi.fn()\n                 const reqOpts = {\n                     protocol: 'https',\n@@ -381,7 +381,7 @@ describe('webdriver request', () => {\n \n         it('should return proper response if retry passes', async () => {\n             const retryCnt = 7\n-            const req = new WebDriverRequest('POST', '/timeout', {}, true)\n+            const req = new FetchRequest('POST', '/timeout', {}, true)\n             const reqRetryCnt = vi.fn()\n             req.on('retry', reqRetryCnt)\n             const result = await req.makeRequest({\n@@ -401,7 +401,7 @@ describe('webdriver request', () => {\n \n         it('should retry on connection refused error', async () => {\n             const retryCnt = 7\n-            const req = new WebDriverRequest('POST', '/connectionRefused', {}, false)\n+            const req = new FetchRequest('POST', '/connectionRefused', {}, false)\n             const reqRetryCnt = vi.fn()\n             req.on('retry', reqRetryCnt)\n             const result = await req.makeRequest({\n@@ -419,7 +419,7 @@ describe('webdriver request', () => {\n         }, 20_000)\n \n         it('should throw if request error is unknown', async () => {\n-            const req = new WebDriverRequest('POST', '/sumoerror', {}, true)\n+            const req = new FetchRequest('POST', '/sumoerror', {}, true)\n             const result = await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n@@ -435,10 +435,6 @@ describe('webdriver request', () => {\n         })\n     })\n \n-    it('defines correct exceptions for request retries', () => {\n-        expect(COMMANDS_WITHOUT_RETRY).toMatchSnapshot()\n-    })\n-\n     afterEach(() => {\n         // @ts-ignore\n         vi.mocked(fetch).retryCnt = 0\n\ndiff --git a/packages/webdriver/tests/request/error.test.ts b/packages/webdriver/tests/request/error.test.ts\nindex a33cc18bd8f..1214279a09a 100644\n--- a/packages/webdriver/tests/request/error.test.ts\n+++ b/packages/webdriver/tests/request/error.test.ts\n@@ -4,6 +4,7 @@ import type { MockedFunction } from 'vitest'\n import { transformCommandLogResult } from '@wdio/utils'\n import { describe, it, expect, vi } from 'vitest'\n \n+import '../../src/browser.js'\n import { WebDriverResponseError, WebDriverRequestError } from '../../src/request/error.js'\n \n const cmdURL = new URL('http://localhost:1234/session/abc123/url')\n\ndiff --git a/packages/webdriver/tests/utils.test.ts b/packages/webdriver/tests/utils.test.ts\nindex 0f927682595..ed9502d7651 100644\n--- a/packages/webdriver/tests/utils.test.ts\n+++ b/packages/webdriver/tests/utils.test.ts\n@@ -2,6 +2,8 @@ import path from 'node:path'\n import { describe, it, expect, vi, afterEach } from 'vitest'\n import type { Capabilities, Options } from '@wdio/types'\n \n+import '../src/browser.js'\n+\n import {\n     isSuccessfulResponse, getPrototype, getSessionError,\n     startWebDriverSession, setupDirectConnect, validateCapabilities\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13838",
    "pr_id": 13838,
    "issue_id": 13789,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Timeout error with reloadSession API\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\nlatest\r\n\r\n### Node.js Version\r\n\r\n20\r\n\r\n### Mode\r\n\r\nStandalone Mode\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\n{\r\n    browserName: 'chrome',\r\n    acceptInsecureCerts: true,\r\n    'goog:chromeOptions': {\r\n      args: [\r\n        '--disable-backgrounding-occluded-windows',\r\n        '--window-size=1980,1080',\r\n        '--lang=fr_FR.UTF-8',\r\n        '--disable-search-engine-choice-screen',\r\n      ],\r\n    },\r\n  },\r\n\r\nGrid with Selenium-server-4.25.0\r\n```\r\n\r\n\r\n### What happened?\r\n\r\nIf reload session is used, the test breaks with a timeout error.\r\n\r\n### What is your expected behavior?\r\n\r\n_No response_\r\n\r\n### How to reproduce the bug.\r\n\r\n```\r\n  await browser.reloadSession();\r\n  await browser.url(\r\n    'https://webdriver.io/blog/2024/08/15/webdriverio-v9-release'\r\n  );\r\n  await $('[href=\"/blog\"]').waitForDisplayed();\r\n```\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\n[0-0] 2024-10-22T13:55:30.142Z INFO webdriver: COMMAND deleteSession(<object>)\r\n[0-0] 2024-10-22T13:55:30.143Z INFO webdriver: [DELETE] http://127.0.0.1:4444/wd/hub/session/bff0845355593ed7b100644eaccc694f\r\n[0-0] 2024-10-22T13:55:30.143Z INFO webdriver: DATA { deleteSessionOpts: { shutdownDriver: false } }\r\n[0-0] 2024-10-22T13:55:30.809Z INFO webdriver: RESULT null\r\n[0-0] 2024-10-22T13:55:30.812Z INFO webdriver: [POST] http://127.0.0.1:4444/wd/hub/session\r\n[0-0] 2024-10-22T13:55:30.812Z INFO webdriver: DATA {\r\n[0-0]   capabilities: {\r\n[0-0]     alwaysMatch: {\r\n[0-0]       browserName: 'chrome',\r\n[0-0]       acceptInsecureCerts: true,\r\n[0-0]       'goog:chromeOptions': [Object],\r\n[0-0]       webSocketUrl: true\r\n[0-0]     },\r\n[0-0]     firstMatch: [ {} ]\r\n[0-0]   }\r\n[0-0] }\r\n[0-0] 2024-10-22T13:55:33.211Z INFO webdriver: BIDI COMMAND browsingContext.navigate {\"context\":\"CE6C5F1343C782BBC3DED3A225FE0C50\",\"url\":\"https://webdriver.io/blog/2024/08/15/webdriverio-v9-release\",\"wait\":\"complete\"}\r\n[0-0] 2024-10-22T13:56:33.257Z INFO webdriver: COMMAND getUrl()\r\n[0-0] 2024-10-22T13:56:33.258Z INFO webdriver: [GET] http://127.0.0.1:4444/wd/hub/session/cdbf45f49986aea09d6a6f435e50e69d/url\r\n[0-0] 2024-10-22T13:56:33.278Z INFO webdriver: RESULT about:blank\r\n[0-0] Error: Command browsingContext.navigate with id 9 (with the following parameter: {\"context\":\"CE6C5F1343C782BBC3DED3A225FE0C50\",\"url\":\"https://webdriver.io/blog/2024/08/15/webdriverio-v9-release\",\"wait\":\"complete\"}) timed out\r\n    at Timeout._onTimeout (C:\\2-gitlab\\end-to-end-tests-wdio\\node_modules\\webdriver\\build\\index.js:246:16)\r\n    at listOnTimeout (node:internal/timers:581:17)\r\n    at process.processTimers (node:internal/timers:519:7)\r\n```\r\nSelenium grid errors\r\n```\r\n Session request received by the Distributor:\r\n [Capabilities {acceptInsecureCerts: true, browserName: chrome, goog:chromeOptions: {args: [--disable-backgrounding-occ..., --window-size=1980,1080, --lang=fr_FR.UTF-8, --disable-search-engine-cho...], prefs: {}}, webSocketUrl: true}]\r\n10:11:50.268 INFO [LocalNode.newSession] - Session created by the Node. Id: e65e05edb82b40d7ed9cc92839a42efd, Caps: Capabilities {acceptInsecureCerts: true, browserName: chrome, browserVersion: 130.0.6723.58, chrome: {chromedriverVersion: 130.0.6723.69 (3ec172b971b9..., userDataDir: C:\\Users\\FABIEN~1\\AppData\\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62413}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: Windows 10, proxy: Proxy(), se:cdp: ws://172.23.176.1:4444/sess..., se:cdpVersion: 130.0.6723.58, se:gridWebSocketUrl: ws://localhost:14852/sessio..., setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webSocketUrl: ws://172.23.176.1:4444/sess..., webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}\r\n10:11:50.277 INFO [LocalDistributor.newSession] - Session created by the Distributor. Id: e65e05edb82b40d7ed9cc92839a42efd\r\n Caps: Capabilities {acceptInsecureCerts: true, browserName: chrome, browserVersion: 130.0.6723.58, chrome: {chromedriverVersion: 130.0.6723.69 (3ec172b971b9..., userDataDir: C:\\Users\\FABIEN~1\\AppData\\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62413}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: Windows 10, proxy: Proxy(), se:cdp: ws://172.23.176.1:4444/sess..., se:cdpVersion: 130.0.6723.58, se:gridWebSocketUrl: ws://localhost:14852/sessio..., setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webSocketUrl: ws://172.23.176.1:4444/sess..., webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}\r\n10:11:50.334 INFO [ProxyNodeWebsockets.createWsEndPoint] - Establishing connection to ws://localhost:14852/session/e65e05edb82b40d7ed9cc92839a42efd\r\n10:12:00.244 INFO [LocalSessionMap.remove] - Deleted session from local Session Map, Id: e65e05edb82b40d7ed9cc92839a42efd\r\n10:12:00.247 INFO [GridModel.release] - Releasing slot for session id e65e05edb82b40d7ed9cc92839a42efd\r\n10:12:00.253 INFO [SessionSlot.stop] - Stopping session e65e05edb82b40d7ed9cc92839a42efd\r\n10:12:00.282 INFO [LocalDistributor.newSession] - Session request received by the Distributor:\r\n [Capabilities {acceptInsecureCerts: true, browserName: chrome, goog:chromeOptions: {args: [--disable-backgrounding-occ..., --window-size=1980,1080, --lang=fr_FR.UTF-8, --disable-search-engine-cho...], prefs: {}}, webSocketUrl: true}]\r\n10:12:02.484 INFO [LocalNode.newSession] - Session created by the Node. Id: 86f60d538758d2e1472e2934bd45bb25, Caps: Capabilities {acceptInsecureCerts: true, browserName: chrome, browserVersion: 130.0.6723.58, chrome: {chromedriverVersion: 130.0.6723.69 (3ec172b971b9..., userDataDir: C:\\Users\\FABIEN~1\\AppData\\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62469}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: Windows 10, proxy: Proxy(), se:cdp: ws://172.23.176.1:4444/sess..., se:cdpVersion: 130.0.6723.58, se:gridWebSocketUrl: ws://localhost:32182/sessio..., setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webSocketUrl: ws://172.23.176.1:4444/sess..., webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}\r\n10:12:02.490 INFO [LocalDistributor.newSession] - Session created by the Distributor. Id: 86f60d538758d2e1472e2934bd45bb25\r\n Caps: Capabilities {acceptInsecureCerts: true, browserName: chrome, browserVersion: 130.0.6723.58, chrome: {chromedriverVersion: 130.0.6723.69 (3ec172b971b9..., userDataDir: C:\\Users\\FABIEN~1\\AppData\\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62469}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: Windows 10, proxy: Proxy(), se:cdp: ws://172.23.176.1:4444/sess..., se:cdpVersion: 130.0.6723.58, se:gridWebSocketUrl: ws://localhost:32182/sessio..., setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webSocketUrl: ws://172.23.176.1:4444/sess..., webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}\r\n10:12:02.500 WARN [DefaultChannelPipeline.onUnhandledInboundException] - An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.\r\norg.openqa.selenium.WebDriverException: java.io.IOException: Output closed\r\nBuild info: version: '4.25.0', revision: '030fcf7918'\r\nSystem info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '15.0.1'\r\nDriver info: driver.version: unknown\r\n        at org.openqa.selenium.remote.http.jdk.JdkHttpClient$4.send(JdkHttpClient.java:320)\r\n        at org.openqa.selenium.grid.node.ProxyNodeWebsockets.lambda$createWsEndPoint$6(ProxyNodeWebsockets.java:237)\r\n        at org.openqa.selenium.netty.server.WebSocketMessageHandler.lambda$channelRead0$0(WebSocketMessageHandler.java:47)\r\n        at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)\r\n        at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)\r\n        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:566)\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\r\n        at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n        at java.base/java.lang.Thread.run(Thread.java:832)\r\nCaused by: java.io.IOException: Output closed\r\n        at java.net.http/jdk.internal.net.http.websocket.MessageEncoder.encodeText(MessageEncoder.java:136)\r\n        at java.net.http/jdk.internal.net.http.websocket.TransportImpl$SendTask$1.onText(TransportImpl.java:366)\r\n        at java.net.http/jdk.internal.net.http.websocket.TransportImpl$SendTask$1.onText(TransportImpl.java:357)\r\n        at java.net.http/jdk.internal.net.http.websocket.MessageQueue.peek(MessageQueue.java:223)\r\n        at java.net.http/jdk.internal.net.http.websocket.TransportImpl$SendTask.run(TransportImpl.java:545)\r\n        at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:147)\r\n        at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:198)\r\n        at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:271)\r\n        at java.net.http/jdk.internal.net.http.common.SequentialScheduler.runOrSchedule(SequentialScheduler.java:224)\r\n        at java.net.http/jdk.internal.net.http.websocket.TransportImpl.sendText(TransportImpl.java:149)\r\n        at java.net.http/jdk.internal.net.http.websocket.WebSocketImpl.sendText(WebSocketImpl.java:184)\r\n        at org.openqa.selenium.remote.http.jdk.JdkHttpClient$4.lambda$send$1(JdkHttpClient.java:271)\r\n        at org.openqa.selenium.remote.http.jdk.JdkHttpClient$4.send(JdkHttpClient.java:310)\r\n        ... 10 more\r\n```\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 1419,
    "test_files_count": 4,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "e2e/reloadSession.test.ts",
      "e2e/wdio/headless/puppeteer.e2e.ts",
      "e2e/wdio/headless/reloadSession.e2e.ts",
      "e2e/wdio/headless/source-maps.e2e.ts",
      "packages/webdriver/src/bidi/core.ts",
      "packages/webdriver/src/command.ts",
      "packages/webdriver/src/index.ts",
      "packages/webdriver/src/utils.ts"
    ],
    "pr_changed_test_files": [
      "e2e/reloadSession.test.ts",
      "e2e/wdio/headless/puppeteer.e2e.ts",
      "e2e/wdio/headless/reloadSession.e2e.ts",
      "e2e/wdio/headless/source-maps.e2e.ts"
    ],
    "base_commit": "32a5e8f638a1e021d2414f2e7a513ac6dfcafe82",
    "head_commit": "e29c75faa54f60f2d371f629ab20a7fc16381eed",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13838",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13838",
    "dockerfile": "",
    "pr_merged_at": "2024-11-20T18:57:00.000Z",
    "patch": "diff --git a/packages/webdriver/src/bidi/core.ts b/packages/webdriver/src/bidi/core.ts\nindex 49abd0ef0da..dfc248906c2 100644\n--- a/packages/webdriver/src/bidi/core.ts\n+++ b/packages/webdriver/src/bidi/core.ts\n@@ -28,6 +28,15 @@ export class BidiCore {\n         this.#ws.on('message', this.#handleResponse.bind(this))\n     }\n \n+    /**\n+     * We initiate the Bidi instance before a WebdriverIO instance is created.\n+     * In order to emit Bidi events we have to attach the WebdriverIO instance\n+     * to the Bidi instance afterwards.\n+     */\n+    public attachClient (client: Client) {\n+        this.client = client\n+    }\n+\n     public async connect () {\n         /**\n          * don't connect and stale unit tests when the websocket url is set to a dummy value\n@@ -45,6 +54,27 @@ export class BidiCore {\n         return this.#waitForConnected\n     }\n \n+    public close () {\n+        if (!this.#isConnected) {\n+            return\n+        }\n+\n+        log.info(`Close Bidi connection to ${this.#webSocketUrl}`)\n+        this.#isConnected = false\n+        this.#ws.off('message', this.#handleResponse.bind(this))\n+        this.#ws.close()\n+        this.#ws.terminate()\n+    }\n+\n+    public reconnect (webSocketUrl: string, opts?: ClientOptions) {\n+        log.info(`Reconnect to new Bidi session at ${webSocketUrl}`)\n+        this.close()\n+        this.#webSocketUrl = webSocketUrl\n+        this.#ws = new Socket(this.#webSocketUrl, opts) as WebSocket\n+        this.#ws.on('message', this.#handleResponse.bind(this))\n+        return this.connect()\n+    }\n+\n     /**\n      * Helper function that allows to wait until Bidi connection establishes\n      * @returns a promise that resolves once the connection to WebDriver Bidi protocol was established\n@@ -76,7 +106,7 @@ export class BidiCore {\n                 return\n             }\n \n-            log.debug('BIDI RESULT', data.toString())\n+            log.info('BIDI RESULT', data.toString())\n             this.client?.emit('bidiResult', payload)\n             const resolve = this.#pendingCommands.get(payload.id)\n             if (!resolve) {\n\ndiff --git a/packages/webdriver/src/command.ts b/packages/webdriver/src/command.ts\nindex 6565fa9cb01..63a6443e003 100644\n--- a/packages/webdriver/src/command.ts\n+++ b/packages/webdriver/src/command.ts\n@@ -3,6 +3,7 @@ import { commandCallStructure, isValidParameter, getArgumentType } from '@wdio/u\n import { WebDriverBidiProtocol, type CommandEndpoint } from '@wdio/protocols'\n \n import Request from './request/request.js'\n+import type { BidiHandler } from './bidi/handler.js'\n import type { WebDriverResponse } from './request/types.js'\n import type { BaseClient, BidiCommands, BidiResponses } from './types.js'\n \n@@ -142,15 +143,25 @@ export default function (\n             this.emit('result', { command, method, endpoint, body, result })\n \n             if (command === 'deleteSession') {\n+                /**\n+                 * close WebDriver Bidi socket\n+                 */\n+                const browser = this as { _bidiHandler?: BidiHandler }\n+                browser._bidiHandler?.close()\n+\n                 const shutdownDriver = body.deleteSessionOpts?.shutdownDriver !== false\n                 /**\n                  * kill driver process if there is one\n                  */\n                 if (shutdownDriver && 'wdio:driverPID' in this.capabilities && this.capabilities['wdio:driverPID']) {\n                     log.info(`Kill driver process with PID ${this.capabilities['wdio:driverPID']}`)\n-                    const killedSuccessfully = process.kill(this.capabilities['wdio:driverPID'], 'SIGKILL')\n-                    if (!killedSuccessfully) {\n-                        log.warn('Failed to kill driver process, manually clean-up might be required')\n+                    try {\n+                        const killedSuccessfully = process.kill(this.capabilities['wdio:driverPID'], 'SIGKILL')\n+                        if (!killedSuccessfully) {\n+                            log.warn('Failed to kill driver process, manually clean-up might be required')\n+                        }\n+                    } catch (err) {\n+                        log.warn('Failed to kill driver process', err)\n                     }\n \n                     setTimeout(() => {\n\ndiff --git a/packages/webdriver/src/index.ts b/packages/webdriver/src/index.ts\nindex 5ee231a7fad..e66d33f5d07 100644\n--- a/packages/webdriver/src/index.ts\n+++ b/packages/webdriver/src/index.ts\n@@ -8,6 +8,7 @@ import type { Capabilities, Options } from '@wdio/types'\n \n import command from './command.js'\n import { DEFAULTS } from './constants.js'\n+import type { BidiHandler } from './bidi/handler.js'\n import { startWebDriverSession, getPrototype, getEnvironmentVars, setupDirectConnect, initiateBidi, parseBidiMessage } from './utils.js'\n import type { Client, AttachOptions, SessionFlags } from './types.js'\n \n@@ -150,7 +151,7 @@ export default class WebDriver {\n      * @param   {object} instance  the object we get from a new browser session.\n      * @returns {string}           the new session id of the browser\n      */\n-    static async reloadSession(instance: Client, newCapabilities?: WebdriverIO.Capabilities) {\n+    static async reloadSession(instance: Client & { _bidiHandler?: BidiHandler }, newCapabilities?: WebdriverIO.Capabilities) {\n         const capabilities = newCapabilities ? newCapabilities : Object.assign({}, instance.requestedCapabilities) as WebdriverIO.Capabilities\n         let params: Capabilities.RemoteConfig = { ...instance.options, capabilities }\n \n@@ -190,9 +191,21 @@ export default class WebDriver {\n         for (const prop in instance.requestedCapabilities) {\n             delete instance.requestedCapabilities[prop as keyof typeof instance.requestedCapabilities]\n         }\n+\n+        const driverPid = instance.capabilities['wdio:driverPID']\n         instance.sessionId = sessionId\n         instance.capabilities = newSessionCapabilities\n+        instance.capabilities['wdio:driverPID'] = driverPid\n         Object.assign(instance.requestedCapabilities, capabilities)\n+\n+        /**\n+         * reconnect to new Bidi session\n+         */\n+        if (isBidi(instance.requestedCapabilities || {}, instance.capabilities || {})) {\n+            const bidiReqOpts = instance.options.strictSSL ? {} : { rejectUnauthorized: false }\n+            await instance._bidiHandler?.reconnect(newSessionCapabilities.webSocketUrl as unknown as string, bidiReqOpts)\n+        }\n+\n         return sessionId\n     }\n \n\ndiff --git a/packages/webdriver/src/utils.ts b/packages/webdriver/src/utils.ts\nindex 87a7515628e..a49275aea0d 100644\n--- a/packages/webdriver/src/utils.ts\n+++ b/packages/webdriver/src/utils.ts\n@@ -378,7 +378,7 @@ export function initiateBidi (socketUrl: string, strictSSL: boolean = true): Pro\n                     /**\n                      * attach the client to the handler to emit events\n                      */\n-                    handler.client = this\n+                    handler.attachClient(this)\n \n                     this.emit(cur.command, args)\n                     return bidiFn?.apply(handler, args)\n",
    "test_patch": "diff --git a/e2e/reloadSession.test.ts b/e2e/reloadSession.test.ts\nnew file mode 100644\nindex 00000000000..cd3210dd2c8\n--- /dev/null\n+++ b/e2e/reloadSession.test.ts\n@@ -0,0 +1,25 @@\n+import { test, expect } from 'vitest'\n+/**\n+ * in order to run this file make sure you have `webdriverio`\n+ * installed using NPM before running it:\n+ *\n+ *   $ npm install webdriverio\n+ *\n+ */\n+import { remote } from 'webdriverio'\n+\n+test('can reconnect to WebDriver Bidi session', async () => {\n+    const browser = await remote({\n+        capabilities: {\n+            browserName: 'chrome',\n+            'goog:chromeOptions': {\n+                args: ['headless', 'disable-gpu']\n+            }\n+        }\n+    })\n+\n+    expect(typeof await browser.browsingContextGetTree({})).toBe('object')\n+    await browser.reloadSession()\n+    expect(typeof await browser.browsingContextGetTree({})).toBe('object')\n+    await browser.deleteSession()\n+})\n\ndiff --git a/e2e/wdio/headless/puppeteer.e2e.ts b/e2e/wdio/headless/puppeteer.e2e.ts\nindex 18321e5e4c0..2042eabeade 100644\n--- a/e2e/wdio/headless/puppeteer.e2e.ts\n+++ b/e2e/wdio/headless/puppeteer.e2e.ts\n@@ -1,7 +1,7 @@\n-import { browser } from '../../../packages/wdio-globals/build/index.js'\n+import { browser, expect } from '@wdio/globals'\n \n describe('WebdriverIO', () => {\n-    it.skip('should provide access to Puppeteer', async () => {\n+    it('should provide access to Puppeteer', async () => {\n         const puppeteerInstance = await browser.getPuppeteer()\n         expect(puppeteerInstance).toBeDefined()\n     })\n\ndiff --git a/e2e/wdio/headless/reloadSession.e2e.ts b/e2e/wdio/headless/reloadSession.e2e.ts\nindex 06f256447e9..43c33cb1274 100644\n--- a/e2e/wdio/headless/reloadSession.e2e.ts\n+++ b/e2e/wdio/headless/reloadSession.e2e.ts\n@@ -1,13 +1,8 @@\n import { browser, expect } from '@wdio/globals'\n \n describe('reloadSession', () => {\n-    it('can reload a session', async () => {\n-        const sessionId = browser.sessionId\n-        await browser.reloadSession()\n-        expect(browser.sessionId).not.toBe(sessionId)\n-    })\n-\n     it('can reload a session with new capabilities', async () => {\n+        const sessionId = browser.sessionId\n         expect(browser.capabilities.browserName).toBe('chrome')\n         await browser.reloadSession({\n             browserName: 'edge',\n@@ -16,5 +11,6 @@ describe('reloadSession', () => {\n             }\n         })\n         expect(browser.capabilities.browserName).toContain('MicrosoftEdge')\n+        expect(browser.sessionId).not.toBe(sessionId)\n     })\n })\n\ndiff --git a/e2e/wdio/headless/source-maps.e2e.ts b/e2e/wdio/headless/source-maps.e2e.ts\nindex 7bbf95c13bc..3415f9fd3fd 100644\n--- a/e2e/wdio/headless/source-maps.e2e.ts\n+++ b/e2e/wdio/headless/source-maps.e2e.ts\n@@ -1,3 +1,4 @@\n+import { expect } from '@wdio/globals'\n import { Task } from '@serenity-js/core'\n \n // eslint-disable-next-line no-undef\n@@ -13,10 +14,10 @@ describe.skip('Source maps support for ESM projects', () => {\n         const locations = frames.map(frame => frame.match(/.*\\/(.*?\\d+:\\d+)/)[1]).slice(0, 4)\n \n         expect(locations).toEqual([\n-            'source-maps.e2e.ts:43:19',   // the line where we instantiate the Error object\n-            'source-maps.e2e.ts:39:12',   // fn2 calls readStack\n-            'source-maps.e2e.ts:35:12',   // fn1 calls fn2\n-            'source-maps.e2e.ts:8:38',    // fn1 called in the spec\n+            'source-maps.e2e.ts:44:19',   // the line where we instantiate the Error object\n+            'source-maps.e2e.ts:40:12',   // fn2 calls readStack\n+            'source-maps.e2e.ts:36:12',   // fn1 calls fn2\n+            'source-maps.e2e.ts:9:38',    // fn1 called in the spec\n         ])\n     })\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13837",
    "pr_id": 13837,
    "issue_id": 13829,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Elements (specifically iframes) cannot be found after browser.refresh\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\n9.2.4\r\n\r\n### Node.js Version\r\n\r\nv20.18.0\r\n\r\n### Mode\r\n\r\nStandalone Mode\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\n{\r\n  browserName: 'chrome',\r\n  webSocketUrl: true,\r\n}\r\n```\r\n\r\n\r\n### What happened?\r\n\r\nIn a test, I am able to initially switch to an iframe and retrieve an element.\r\n\r\nThen in that same test, if I were to run browser.refresh(), I would be unable to switch to the same iframe and retrieve the same element.\r\n\r\n### What is your expected behavior?\r\n\r\nAfter a browser refresh, I should already be in the iframe I switched to and should be able to retrieve an element in the iframe.\r\n\r\n### How to reproduce the bug.\r\n\r\nhttps://github.com/thamp59/wdio-iframe-elements/pull/1\r\n\r\nminimal reproduction\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\nExecution of 2 workers started at 2024-10-29T19:44:20.031Z\r\n\r\n2024-10-29T19:44:20.038Z INFO @wdio/cli:launcher: Run onPrepare hook\r\n2024-10-29T19:44:20.039Z INFO @wdio/utils: Setting up browser driver for: chrome@stable\r\n2024-10-29T19:44:20.039Z INFO @wdio/utils: Setting up browser binaries for: chrome@stable\r\n2024-10-29T19:44:20.150Z INFO webdriver: Using Chromedriver v130.0.6723.91 from cache directory C:\\Users\\thamp\\AppData\\Local\\Temp\r\n2024-10-29T19:44:20.315Z INFO webdriver: Setting up chrome v130.0.6723.91\r\n2024-10-29T19:44:20.379Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2024-10-29T19:44:20.380Z INFO @wdio/local-runner: Start worker 0-0 with arg: run wdio.conf.js\r\n[0-0] 2024-10-29T19:44:21.047Z INFO @wdio/local-runner: Run worker command: run\r\n[0-0] RUNNING in chrome - file:///C:/dev/wdio-iframe-elements/switchFrameTest.spec.js\r\n[0-0] 2024-10-29T19:44:21.116Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n[0-0] 2024-10-29T19:44:21.371Z INFO webdriver: Setting up chrome v130.0.6723.91\r\n[0-0] 2024-10-29T19:44:21.431Z INFO webdriver: Using Chromedriver v130.0.6723.91 from cache directory C:\\Users\\thamp\\AppData\\Local\\Temp\r\n[0-0] 2024-10-29T19:44:21.446Z INFO chromedriver: Starting ChromeDriver 130.0.6723.91 (53ac076783696778ecc8f360ea31765c29c240ad-refs/branch-heads/6723@{#1517}) on port 54344\r\n[0-0] 2024-10-29T19:44:21.446Z INFO chromedriver: Remote connections are allowed by an allowlist (0.0.0.0).\r\n[0-0] 2024-10-29T19:44:21.446Z INFO chromedriver: Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.\r\n[0-0] 2024-10-29T19:44:21.448Z INFO chromedriver: ChromeDriver was started successfully on port 54344.\r\n[0-0] 2024-10-29T19:44:22.439Z INFO @wdio/utils: Started Chromedriver v130.0.6723.91 with params --port=54344 --allowed-origins=* --allowed-ips=0.0.0.0 in 1323ms on port 54344\r\n[0-0] 2024-10-29T19:44:22.447Z INFO webdriver: [POST] http://localhost:54344/session\r\n[0-0] 2024-10-29T19:44:22.447Z INFO webdriver: DATA {\r\n[0-0]   capabilities: {\r\n[0-0]     alwaysMatch: {\r\n[0-0]       browserName: 'chrome',\r\n[0-0]       webSocketUrl: true,\r\n[0-0]       'goog:chromeOptions': [Object],\r\n[0-0]       unhandledPromptBehavior: 'ignore'\r\n[0-0]     },\r\n[0-0]     firstMatch: [ {} ]\r\n[0-0]   }\r\n[0-0] }\r\n\r\nDevTools listening on ws://127.0.0.1:54351/devtools/browser/07094b9c-f296-45f3-88f5-d1bc5661a365\r\n[0-0] 2024-10-29T19:44:23.018Z INFO webdriver: Register BiDi handler for session with id ca2063a231a60f0aa5467d62ed9212fb\r\n[0-0] 2024-10-29T19:44:23.018Z INFO webdriver: Connect to webSocketUrl ws://127.0.0.1:54344/session/ca2063a231a60f0aa5467d62ed9212fb\r\n[0-0] 2024-10-29T19:44:23.022Z INFO webdriver: Connected session to Bidi protocol\r\n[0-0] 2024-10-29T19:44:23.023Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-10-29T19:44:23.023Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"log.entryAdded\",\"browsingContext.navigationStarted\"]}\r\n[0-0] 2024-10-29T19:44:23.024Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[1267 bytes]>, contexts: undefined }\r\n[0-0] 2024-10-29T19:44:23.024Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\",\"network.responseCompleted\",\"network.beforeRequestSent\",\"network.fetchError\"]}\r\n[0-0] 2024-10-29T19:44:23.024Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.userPromptOpened\"]}\r\n[0-0] 2024-10-29T19:44:23.024Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-10-29T19:44:23.024Z INFO webdriver: Connected to WebDriver Bidi interface at ws://127.0.0.1:54344/session/ca2063a231a60f0aa5467d62ed9212fb\r\n[0-0] 2024-10-29T19:44:23.024Z INFO webdriver: [GET] http://localhost:54344/session/ca2063a231a60f0aa5467d62ed9212fb/window\r\n[0-0] 2024-10-29T19:44:23.025Z INFO webdriver: [GET] http://localhost:54344/session/ca2063a231a60f0aa5467d62ed9212fb/window\r\n[0-0] 2024-10-29T19:44:23.025Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-10-29T19:44:23.026Z INFO webdriver: [GET] http://localhost:54344/session/ca2063a231a60f0aa5467d62ed9212fb/window\r\n[0-0] 2024-10-29T19:44:23.027Z INFO webdriver: RESULT 98957082E909E42369E9B7CB446EF754\r\n[0-0] 2024-10-29T19:44:23.027Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[220 bytes]>\",\"awaitPromise\":true,\"arguments\":[{\"type\":\"string\",\"value\":\"var __defProp = Object.defineProperty;var \r\n__name = function (target, value) { return __defProp(target, 'name', { value: value, configurable: true }); };var __globalThis = (typeof globalThis === 'object' && globalThis) || (typeof window === 'object' && window);__globalThis.__name = __name;\"}],\"target\":{\"context\":\"98957082E909E42369E9B7CB446EF754\"}}\r\n[0-0] 2024-10-29T19:44:23.029Z INFO webdriver: RESULT 98957082E909E42369E9B7CB446EF754\r\n[0-0] 2024-10-29T19:44:23.030Z INFO webdriver: RESULT 98957082E909E42369E9B7CB446EF754\r\n[0-0] 2024-10-29T19:44:23.030Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[482 bytes]>, contexts: [\"98957082E909E42369E9B7CB446EF754\"] }\r\n[0-0] 2024-10-29T19:44:23.036Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"script.message\"]}\r\n[0-0] 2024-10-29T19:44:23.037Z INFO webdriverio:PolyfillManager: polyfill script added\r\n[0-0] 2024-10-29T19:44:23.040Z INFO webdriver: BIDI COMMAND browsingContext.navigate {\"context\":\"98957082E909E42369E9B7CB446EF754\",\"url\":\"https://chips-site-a.glitch.me/\",\"wait\":\"complete\"}\r\n[0-0] 2024-10-29T19:44:24.073Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"css\",\"value\":\"iframe\"},\"context\":\"98957082E909E42369E9B7CB446EF754\"}\r\n[0-0] 2024-10-29T19:44:24.079Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[159 bytes]>\",\"awaitPromise\":true,\"arguments\":[{\"sharedId\":\"f.98957082E909E42369E9B7CB446EF754.d.CA6582CA24EA8173727C2DC00A09BD37.e.6\"}],\"target\":{\"context\":\"98957082E909E42369E9B7CB446EF754\"}}\r\n[0-0] 2024-10-29T19:44:24.081Z INFO webdriver: COMMAND switchToFrame(<object>)\r\n[0-0] 2024-10-29T19:44:24.082Z INFO webdriver: [POST] http://localhost:54344/session/ca2063a231a60f0aa5467d62ed9212fb/frame\r\n[0-0] 2024-10-29T19:44:24.082Z INFO webdriver: DATA {\r\n[0-0]   id: {\r\n[0-0]     'element-6066-11e4-a52e-4f735466cecf': 'f.98957082E909E42369E9B7CB446EF754.d.CA6582CA24EA8173727C2DC00A09BD37.e.6'\r\n[0-0]   }\r\n[0-0] }\r\n[0-0] 2024-10-29T19:44:24.091Z INFO webdriver: RESULT null\r\n[0-0] 2024-10-29T19:44:24.092Z INFO webdriver: COMMAND findElement(\"css selector\", \"#cookies\")\r\n[0-0] 2024-10-29T19:44:24.092Z INFO webdriver: [POST] http://localhost:54344/session/ca2063a231a60f0aa5467d62ed9212fb/element\r\n[0-0] 2024-10-29T19:44:24.092Z INFO webdriver: DATA { using: 'css selector', value: '#cookies' }\r\n[0-0] 2024-10-29T19:44:24.098Z INFO webdriver: RESULT {\r\n[0-0]   'element-6066-11e4-a52e-4f735466cecf': 'f.415B050182D3AA5C1577476507A32D2F.d.C927FE3815D996F0B0AD21E7784BC0E9.e.2'\r\n[0-0] }\r\n[0-0] 2024-10-29T19:44:24.100Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"css\",\"value\":\"#cookies\"},\"context\":\"415B050182D3AA5C1577476507A32D2F\"}\r\n[0-0] 2024-10-29T19:44:24.103Z INFO webdriver: COMMAND refresh()\r\n[0-0] 2024-10-29T19:44:24.103Z INFO webdriver: [POST] http://localhost:54344/session/ca2063a231a60f0aa5467d62ed9212fb/refresh\r\n[0-0] 2024-10-29T19:44:24.274Z INFO webdriver: RESULT null\r\n[0-0] 2024-10-29T19:44:24.274Z INFO webdriver: COMMAND findElement(\"css selector\", \"#cookies\")\r\n[0-0] 2024-10-29T19:44:24.274Z INFO webdriver: [POST] http://localhost:54344/session/ca2063a231a60f0aa5467d62ed9212fb/element\r\n[0-0] 2024-10-29T19:44:24.274Z INFO webdriver: DATA { using: 'css selector', value: '#cookies' }\r\n[0-0] 2024-10-29T19:44:24.282Z INFO webdriver: RESULT {\r\n[0-0]   error: 'no such element',\r\n[0-0]   message: 'no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#cookies\"}\\n' +\r\n[0-0]     '  (Session info: chrome=130.0.6723.91)',\r\n[0-0]   stacktrace: '\\tGetHandleVerifier [0x00007FF668F93AF5+28005]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668EF83F0]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668D9580A]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668DE5A3E]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668DE5D2C]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668E2EA97]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668E0BA7F]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668E2B8B3]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668E0B7E3]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668DD75C8]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668DD8731]\\n' +\r\n[0-0]     '\\tGetHandleVerifier [0x00007FF66928646D+3118813]\\n' +\r\n[0-0]     '\\tGetHandleVerifier [0x00007FF6692D6CC0+3448624]\\n' +\r\n[0-0]     '\\tGetHandleVerifier [0x00007FF6692CCF3D+3408301]\\n' +\r\n[0-0]     '\\tGetHandleVerifier [0x00007FF66905A44B+841403]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668F0344F]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668EFF4C4]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668EFF65D]\\n' +\r\n[0-0]     '\\t(No symbol) [0x00007FF668EEEBB9]\\n' +\r\n[0-0]     '\\tBaseThreadInitThunk [0x00007FFA72C1DBE7+23]\\n' +\r\n[0-0]     '\\tRtlUserThreadStart [0x00007FFA74545A4C+44]\\n'\r\n[0-0] }\r\n[0-0] 2024-10-29T19:44:24.284Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"css\",\"value\":\"#cookies\"},\"context\":\"415B050182D3AA5C1577476507A32D2F\"}\r\n[0-0] 2024-10-29T19:44:24.285Z WARN webdriverio: Failed to execute browser.browsingContextLocateNodes({ ... }) due to Error: WebDriver Bidi command \"browsingContext.locateNodes\" failed with error: no such frame - Context 415B050182D3AA5C1577476507A32D2F not found, falling back to regular WebDriver Classic command\r\n[0-0] 2024-10-29T19:44:24.285Z INFO webdriver: COMMAND findElements(\"css selector\", \"#cookies\")\r\n[0-0] 2024-10-29T19:44:24.286Z INFO webdriver: [POST] http://localhost:54344/session/ca2063a231a60f0aa5467d62ed9212fb/elements\r\n[0-0] 2024-10-29T19:44:24.286Z INFO webdriver: DATA { using: 'css selector', value: '#cookies' }\r\n[0-0] 2024-10-29T19:44:24.291Z INFO webdriver: RESULT []\r\n[0-0] 2024-10-29T19:44:24.292Z INFO webdriver: COMMAND findElement(\"css selector\", \"iframe\")\r\n[0-0] 2024-10-29T19:44:24.292Z INFO webdriver: [POST] http://localhost:54344/session/ca2063a231a60f0aa5467d62ed9212fb/element\r\n[0-0] 2024-10-29T19:44:24.292Z INFO webdriver: DATA { using: 'css selector', value: 'iframe' }\r\n[0-0] 2024-10-29T19:44:24.298Z INFO webdriver: RESULT {\r\n[0-0]   'element-6066-11e4-a52e-4f735466cecf': 'f.98957082E909E42369E9B7CB446EF754.d.0998A7BCE0D140681D092654828E8DDD.e.11'\r\n[0-0] }\r\n[0-0] 2024-10-29T19:44:24.299Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[159 bytes]>\",\"awaitPromise\":true,\"arguments\":[{\"sharedId\":\"f.98957082E909E42369E9B7CB446EF754.d.0998A7BCE0D140681D092654828E8DDD.e.11\"}],\"target\":{\"context\":\"415B050182D3AA5C1577476507A32D2F\"}}\r\n[0-0] Error in \"should see element text when using browser.switchFrame\"\r\nError: WebDriver Bidi command \"script.callFunction\" failed with error: no such frame - Context 415B050182D3AA5C1577476507A32D2F not found\r\n    at BidiHandler.send (C:\\dev\\wdio-iframe-elements\\node_modules\\webdriver\\build\\index.js:253:23)\r\n    at BidiHandler.scriptCallFunction (C:\\dev\\wdio-iframe-elements\\node_modules\\webdriver\\build\\index.js:704:31)\r\n    at Browser.value (C:\\dev\\wdio-iframe-elements\\node_modules\\webdriver\\build\\index.js:1033:26)\r\n    at Browser.wrapCommandFn (C:\\dev\\wdio-iframe-elements\\node_modules\\@wdio\\utils\\build\\index.js:1380:32)\r\n    at async Browser.execute (C:\\dev\\wdio-iframe-elements\\node_modules\\webdriverio\\build\\index.js:3085:20)\r\n    at async Browser.wrapCommandFn (C:\\dev\\wdio-iframe-elements\\node_modules\\@wdio\\utils\\build\\index.js:1380:23)\r\n    at async switchToFrameUsingElement (C:\\dev\\wdio-iframe-elements\\node_modules\\webdriverio\\build\\index.js:4321:17)\r\n    at async Browser.wrapCommandFn (C:\\dev\\wdio-iframe-elements\\node_modules\\@wdio\\utils\\build\\index.js:1380:23)\r\n    at async Context.<anonymous> (C:\\dev\\wdio-iframe-elements\\switchFrameTest.spec.js:7:3)\r\n[0-0] 2024-10-29T19:44:24.320Z INFO webdriver: COMMAND deleteSession()\r\n[0-0] 2024-10-29T19:44:24.320Z INFO webdriver: [DELETE] http://localhost:54344/session/ca2063a231a60f0aa5467d62ed9212fb\r\n[0-0] 2024-10-29T19:44:24.351Z INFO webdriver: RESULT null\r\n[0-0] 2024-10-29T19:44:24.351Z INFO webdriver: Kill driver process with PID 128332\r\n[0-0] FAILED in chrome - file:///C:/dev/wdio-iframe-elements/switchFrameTest.spec.js\r\n2024-10-29T19:44:24.477Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\r\n2024-10-29T19:44:24.478Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2024-10-29T19:44:24.478Z INFO @wdio/local-runner: Start worker 0-1 with arg: run wdio.conf.js\r\n[0-1] 2024-10-29T19:44:25.148Z INFO @wdio/local-runner: Run worker command: run\r\n[0-1] RUNNING in chrome - file:///C:/dev/wdio-iframe-elements/switchToFrameTest.spec.js\r\n[0-1] 2024-10-29T19:44:25.216Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n[0-1] 2024-10-29T19:44:25.980Z INFO webdriver: Setting up chrome v130.0.6723.91\r\n[0-1] 2024-10-29T19:44:26.040Z INFO webdriver: Using Chromedriver v130.0.6723.91 from cache directory C:\\Users\\thamp\\AppData\\Local\\Temp\r\n[0-1] 2024-10-29T19:44:26.054Z INFO chromedriver: Starting ChromeDriver 130.0.6723.91 (53ac076783696778ecc8f360ea31765c29c240ad-refs/branch-heads/6723@{#1517}) on port 52425\r\n[0-1] 2024-10-29T19:44:26.054Z INFO chromedriver: Remote connections are allowed by an allowlist (0.0.0.0).\r\n[0-1] 2024-10-29T19:44:26.054Z INFO chromedriver: Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.\r\n[0-1] 2024-10-29T19:44:26.056Z INFO chromedriver: ChromeDriver was started successfully on port 52425.\r\n[0-1] 2024-10-29T19:44:27.054Z INFO @wdio/utils: Started Chromedriver v130.0.6723.91 with params --port=52425 --allowed-origins=* --allowed-ips=0.0.0.0 in 1838ms on port 52425\r\n[0-1] 2024-10-29T19:44:27.062Z INFO webdriver: [POST] http://localhost:52425/session\r\n[0-1] 2024-10-29T19:44:27.062Z INFO webdriver: DATA {\r\n[0-1]   capabilities: {\r\n[0-1]     alwaysMatch: {\r\n[0-1]       browserName: 'chrome',\r\n[0-1]       webSocketUrl: true,\r\n[0-1]       'goog:chromeOptions': [Object],\r\n[0-1]       unhandledPromptBehavior: 'ignore'\r\n[0-1]     },\r\n[0-1]     firstMatch: [ {} ]\r\n[0-1]   }\r\n[0-1] }\r\n\r\nDevTools listening on ws://127.0.0.1:52434/devtools/browser/3ba65c5f-817d-47b9-9d0b-3122ba39d949\r\n[0-1] 2024-10-29T19:44:27.629Z INFO webdriver: Register BiDi handler for session with id bf7da795af3be3f78bb31418851b2b49\r\n[0-1] 2024-10-29T19:44:27.629Z INFO webdriver: Connect to webSocketUrl ws://127.0.0.1:52425/session/bf7da795af3be3f78bb31418851b2b49\r\n[0-1] 2024-10-29T19:44:27.633Z INFO webdriver: Connected session to Bidi protocol\r\n[0-1] 2024-10-29T19:44:27.634Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-1] 2024-10-29T19:44:27.634Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"log.entryAdded\",\"browsingContext.navigationStarted\"]}\r\n[0-1] 2024-10-29T19:44:27.635Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[1267 bytes]>, contexts: undefined }\r\n[0-1] 2024-10-29T19:44:27.635Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\",\"network.responseCompleted\",\"network.beforeRequestSent\",\"network.fetchError\"]}\r\n[0-1] 2024-10-29T19:44:27.635Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.userPromptOpened\"]}\r\n[0-1] 2024-10-29T19:44:27.635Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-1] 2024-10-29T19:44:27.635Z INFO webdriver: Connected to WebDriver Bidi interface at ws://127.0.0.1:52425/session/bf7da795af3be3f78bb31418851b2b49\r\n[0-1] 2024-10-29T19:44:27.635Z INFO webdriver: [GET] http://localhost:52425/session/bf7da795af3be3f78bb31418851b2b49/window\r\n[0-1] 2024-10-29T19:44:27.636Z INFO webdriver: [GET] http://localhost:52425/session/bf7da795af3be3f78bb31418851b2b49/window\r\n[0-1] 2024-10-29T19:44:27.636Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-1] 2024-10-29T19:44:27.636Z INFO webdriver: [GET] http://localhost:52425/session/bf7da795af3be3f78bb31418851b2b49/window\r\n[0-1] 2024-10-29T19:44:27.638Z INFO webdriver: RESULT AE358AB7C24F7EDCD25A4C863B73CAFB\r\n[0-1] 2024-10-29T19:44:27.638Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[220 bytes]>\",\"awaitPromise\":true,\"arguments\":[{\"type\":\"string\",\"value\":\"var __defProp = Object.defineProperty;var \r\n__name = function (target, value) { return __defProp(target, 'name', { value: value, configurable: true }); };var __globalThis = (typeof globalThis === 'object' && globalThis) || (typeof window === 'object' && window);__globalThis.__name = __name;\"}],\"target\":{\"context\":\"AE358AB7C24F7EDCD25A4C863B73CAFB\"}}\r\n[0-1] 2024-10-29T19:44:27.640Z INFO webdriver: RESULT AE358AB7C24F7EDCD25A4C863B73CAFB\r\n[0-1] 2024-10-29T19:44:27.640Z INFO webdriver: RESULT AE358AB7C24F7EDCD25A4C863B73CAFB\r\n[0-1] 2024-10-29T19:44:27.640Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[482 bytes]>, contexts: [\"AE358AB7C24F7EDCD25A4C863B73CAFB\"] }\r\n[0-1] 2024-10-29T19:44:27.645Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"script.message\"]}\r\n[0-1] 2024-10-29T19:44:27.646Z INFO webdriverio:PolyfillManager: polyfill script added\r\n[0-1] 2024-10-29T19:44:27.649Z INFO webdriver: BIDI COMMAND browsingContext.navigate {\"context\":\"AE358AB7C24F7EDCD25A4C863B73CAFB\",\"url\":\"https://chips-site-a.glitch.me/\",\"wait\":\"complete\"}\r\n[0-1] 2024-10-29T19:44:28.365Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"css\",\"value\":\"iframe\"},\"context\":\"AE358AB7C24F7EDCD25A4C863B73CAFB\"}\r\n[0-1] 2024-10-29T19:44:28.371Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[159 bytes]>\",\"awaitPromise\":true,\"arguments\":[{\"sharedId\":\"f.AE358AB7C24F7EDCD25A4C863B73CAFB.d.E3239F41CB8ECA87FE0A7B18747CA5DE.e.6\"}],\"target\":{\"context\":\"AE358AB7C24F7EDCD25A4C863B73CAFB\"}}\r\n[0-1] 2024-10-29T19:44:28.373Z INFO webdriver: COMMAND switchToFrame(<object>)\r\n[0-1] 2024-10-29T19:44:28.373Z INFO webdriver: [POST] http://localhost:52425/session/bf7da795af3be3f78bb31418851b2b49/frame\r\n[0-1] 2024-10-29T19:44:28.373Z INFO webdriver: DATA {\r\n[0-1]   id: {\r\n[0-1]     'element-6066-11e4-a52e-4f735466cecf': 'f.AE358AB7C24F7EDCD25A4C863B73CAFB.d.E3239F41CB8ECA87FE0A7B18747CA5DE.e.6'\r\n[0-1]   }\r\n[0-1] }\r\n[0-1] 2024-10-29T19:44:28.383Z INFO webdriver: RESULT null\r\n[0-1] 2024-10-29T19:44:28.383Z INFO webdriver: COMMAND findElement(\"css selector\", \"#cookies\")\r\n[0-1] 2024-10-29T19:44:28.383Z INFO webdriver: [POST] http://localhost:52425/session/bf7da795af3be3f78bb31418851b2b49/element\r\n[0-1] 2024-10-29T19:44:28.383Z INFO webdriver: DATA { using: 'css selector', value: '#cookies' }\r\n[0-1] 2024-10-29T19:44:28.389Z INFO webdriver: RESULT {\r\n[0-1]   'element-6066-11e4-a52e-4f735466cecf': 'f.C8E9FB063B267CF87EE21020ADEBFCDD.d.41BF09C3B2E9A0D8D5E3329AAFA68FA6.e.2'\r\n[0-1] }\r\n[0-1] 2024-10-29T19:44:28.391Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"css\",\"value\":\"#cookies\"},\"context\":\"C8E9FB063B267CF87EE21020ADEBFCDD\"}\r\n[0-1] 2024-10-29T19:44:28.394Z INFO webdriver: COMMAND refresh()\r\n[0-1] 2024-10-29T19:44:28.394Z INFO webdriver: [POST] http://localhost:52425/session/bf7da795af3be3f78bb31418851b2b49/refresh\r\n[0-1] 2024-10-29T19:44:28.561Z INFO webdriver: RESULT null\r\n[0-1] 2024-10-29T19:44:28.561Z INFO webdriver: COMMAND findElement(\"css selector\", \"#cookies\")\r\n[0-1] 2024-10-29T19:44:28.561Z INFO webdriver: [POST] http://localhost:52425/session/bf7da795af3be3f78bb31418851b2b49/element\r\n[0-1] 2024-10-29T19:44:28.561Z INFO webdriver: DATA { using: 'css selector', value: '#cookies' }\r\n[0-1] 2024-10-29T19:44:28.569Z INFO webdriver: RESULT {\r\n[0-1]   error: 'no such element',\r\n[0-1]   message: 'no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#cookies\"}\\n' +\r\n[0-1]     '  (Session info: chrome=130.0.6723.91)',\r\n[0-1]   stacktrace: '\\tGetHandleVerifier [0x00007FF668F93AF5+28005]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668EF83F0]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668D9580A]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668DE5A3E]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668DE5D2C]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668E2EA97]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668E0BA7F]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668E2B8B3]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668E0B7E3]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668DD75C8]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668DD8731]\\n' +\r\n[0-1]     '\\tGetHandleVerifier [0x00007FF66928646D+3118813]\\n' +\r\n[0-1]     '\\tGetHandleVerifier [0x00007FF6692D6CC0+3448624]\\n' +\r\n[0-1]     '\\tGetHandleVerifier [0x00007FF6692CCF3D+3408301]\\n' +\r\n[0-1]     '\\tGetHandleVerifier [0x00007FF66905A44B+841403]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668F0344F]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668EFF4C4]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668EFF65D]\\n' +\r\n[0-1]     '\\t(No symbol) [0x00007FF668EEEBB9]\\n' +\r\n[0-1]     '\\tBaseThreadInitThunk [0x00007FFA72C1DBE7+23]\\n' +\r\n[0-1]     '\\tRtlUserThreadStart [0x00007FFA74545A4C+44]\\n'\r\n[0-1] }\r\n[0-1] 2024-10-29T19:44:28.570Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"css\",\"value\":\"#cookies\"},\"context\":\"C8E9FB063B267CF87EE21020ADEBFCDD\"}\r\n[0-1] 2024-10-29T19:44:28.571Z WARN webdriverio: Failed to execute browser.browsingContextLocateNodes({ ... }) due to Error: WebDriver Bidi command \"browsingContext.locateNodes\" failed with error: no such frame - Context C8E9FB063B267CF87EE21020ADEBFCDD not found, falling back to regular WebDriver Classic command\r\n[0-1] 2024-10-29T19:44:28.572Z INFO webdriver: COMMAND findElements(\"css selector\", \"#cookies\")\r\n[0-1] 2024-10-29T19:44:28.572Z INFO webdriver: [POST] http://localhost:52425/session/bf7da795af3be3f78bb31418851b2b49/elements\r\n[0-1] 2024-10-29T19:44:28.572Z INFO webdriver: DATA { using: 'css selector', value: '#cookies' }\r\n[0-1] 2024-10-29T19:44:28.577Z INFO webdriver: RESULT []\r\n[0-1] 2024-10-29T19:44:28.577Z INFO webdriver: COMMAND findElement(\"css selector\", \"iframe\")\r\n[0-1] 2024-10-29T19:44:28.577Z INFO webdriver: [POST] http://localhost:52425/session/bf7da795af3be3f78bb31418851b2b49/element\r\n[0-1] 2024-10-29T19:44:28.578Z INFO webdriver: DATA { using: 'css selector', value: 'iframe' }\r\n[0-1] 2024-10-29T19:44:28.584Z INFO webdriver: RESULT {\r\n[0-1]   'element-6066-11e4-a52e-4f735466cecf': 'f.AE358AB7C24F7EDCD25A4C863B73CAFB.d.B6B6CBBB2EBA923DDA6A2B4B54B1083F.e.11'\r\n[0-1] }\r\n[0-1] 2024-10-29T19:44:28.585Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[159 bytes]>\",\"awaitPromise\":true,\"arguments\":[{\"sharedId\":\"f.AE358AB7C24F7EDCD25A4C863B73CAFB.d.B6B6CBBB2EBA923DDA6A2B4B54B1083F.e.11\"}],\"target\":{\"context\":\"C8E9FB063B267CF87EE21020ADEBFCDD\"}}\r\n[0-1] Error in \"should see element exists when using browser.switchToFrame\"\r\nError: WebDriver Bidi command \"script.callFunction\" failed with error: no such frame - Context C8E9FB063B267CF87EE21020ADEBFCDD not found\r\n    at BidiHandler.send (C:\\dev\\wdio-iframe-elements\\node_modules\\webdriver\\build\\index.js:253:23)\r\n    at BidiHandler.scriptCallFunction (C:\\dev\\wdio-iframe-elements\\node_modules\\webdriver\\build\\index.js:704:31)\r\n    at Browser.value (C:\\dev\\wdio-iframe-elements\\node_modules\\webdriver\\build\\index.js:1033:26)\r\n    at Browser.wrapCommandFn (C:\\dev\\wdio-iframe-elements\\node_modules\\@wdio\\utils\\build\\index.js:1380:32)\r\n    at async Browser.execute (C:\\dev\\wdio-iframe-elements\\node_modules\\webdriverio\\build\\index.js:3085:20)\r\n    at async Browser.wrapCommandFn (C:\\dev\\wdio-iframe-elements\\node_modules\\@wdio\\utils\\build\\index.js:1380:23)\r\n    at async switchToFrameUsingElement (C:\\dev\\wdio-iframe-elements\\node_modules\\webdriverio\\build\\index.js:4321:17)\r\n    at async Browser.wrapCommandFn (C:\\dev\\wdio-iframe-elements\\node_modules\\@wdio\\utils\\build\\index.js:1380:23)\r\n    at async Context.<anonymous> (C:\\dev\\wdio-iframe-elements\\switchToFrameTest.spec.js:7:3)\r\n[0-1] 2024-10-29T19:44:28.606Z INFO webdriver: COMMAND deleteSession()\r\n[0-1] 2024-10-29T19:44:28.606Z INFO webdriver: [DELETE] http://localhost:52425/session/bf7da795af3be3f78bb31418851b2b49\r\n[0-1] 2024-10-29T19:44:28.636Z INFO webdriver: RESULT null\r\n[0-1] 2024-10-29T19:44:28.636Z INFO webdriver: Kill driver process with PID 131568\r\n[0-1] FAILED in chrome - file:///C:/dev/wdio-iframe-elements/switchToFrameTest.spec.js\r\n2024-10-29T19:44:28.766Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\r\n2024-10-29T19:44:28.766Z INFO @wdio/cli:launcher: Run onComplete hook\r\n\r\n \"spec\" Reporter:\r\n------------------------------------------------------------------\r\n[chrome 130.0.6723.91 windows #0-0] Running: chrome (v130.0.6723.91) on windows\r\n[chrome 130.0.6723.91 windows #0-0] Session ID: ca2063a231a60f0aa5467d62ed9212fb\r\n[chrome 130.0.6723.91 windows #0-0]\r\n[chrome 130.0.6723.91 windows #0-0] (root)\r\n[chrome 130.0.6723.91 windows #0-0] (root)\r\n[chrome 130.0.6723.91 windows #0-0] 1 failing (1.3s)\r\n------------------------------------------------------------------\r\n[chrome 130.0.6723.91 windows #0-1] Running: chrome (v130.0.6723.91) on windows\r\n[chrome 130.0.6723.91 windows #0-1] Session ID: bf7da795af3be3f78bb31418851b2b49\r\n[chrome 130.0.6723.91 windows #0-1]\r\n[chrome 130.0.6723.91 windows #0-1] (root)\r\n[chrome 130.0.6723.91 windows #0-1] (root)\r\n[chrome 130.0.6723.91 windows #0-1] 1 failing (990ms)\r\n\r\n\r\nSpec Files:      0 passed, 2 failed, 2 total (100% completed) in 00:00:08\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 3839,
    "test_files_count": 2,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "e2e/wdio/headless/test.e2e.ts",
      "packages/webdriverio/src/commands/browser/switchFrame.ts",
      "packages/webdriverio/src/context.ts",
      "packages/webdriverio/tests/commands/browser/switchFrame.test.ts"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/test.e2e.ts",
      "packages/webdriverio/tests/commands/browser/switchFrame.test.ts"
    ],
    "base_commit": "05521ffbd276c852891846bb3401232aaa071803",
    "head_commit": "a3cd9a8a16b0967054fb52a71e60ad6e73d1675d",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13837",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13837",
    "dockerfile": "",
    "pr_merged_at": "2024-10-30T18:04:33.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/switchFrame.ts b/packages/webdriverio/src/commands/browser/switchFrame.ts\nindex 1ec29a94b2f..467fe2ae4ca 100644\n--- a/packages/webdriverio/src/commands/browser/switchFrame.ts\n+++ b/packages/webdriverio/src/commands/browser/switchFrame.ts\n@@ -250,6 +250,9 @@ export async function switchFrame (\n      */\n     if (typeof context === 'object' && typeof (context as WebdriverIO.Element).getElement === 'function') {\n         const element = await context.getElement()\n+        await element.waitForExist({\n+            timeoutMsg: `Can't switch to frame with selector ${element.selector} because it doesn't exist`\n+        })\n         return switchToFrameUsingElement(this, element)\n     }\n \n\ndiff --git a/packages/webdriverio/src/context.ts b/packages/webdriverio/src/context.ts\nindex 36ba3ce0df7..8524c214278 100644\n--- a/packages/webdriverio/src/context.ts\n+++ b/packages/webdriverio/src/context.ts\n@@ -40,10 +40,14 @@ export class ContextManager {\n             }\n \n             /**\n-             * reset current context if user uses 'switchToParentFrame' which\n-             * only impacts WebDriver Classic commands\n+             * reset current context if:\n+             *   - user uses 'switchToParentFrame' which only impacts WebDriver Classic commands\n+             *   - user uses 'refresh' which resets the context in Classic and so should in Bidi\n              */\n-            if (event.command === 'switchToParentFrame') {\n+            if (\n+                event.command === 'switchToParentFrame' ||\n+                event.command === 'refresh'\n+            ) {\n                 this.#currentContext = undefined\n             }\n         })\n",
    "test_patch": "diff --git a/e2e/wdio/headless/test.e2e.ts b/e2e/wdio/headless/test.e2e.ts\nindex cfe441d4fec..f705fd73107 100644\n--- a/e2e/wdio/headless/test.e2e.ts\n+++ b/e2e/wdio/headless/test.e2e.ts\n@@ -513,5 +513,16 @@ describe('main suite 1', () => {\n             expect(await browser.execute(() => document.URL))\n                 .toBe('https://the-internet.herokuapp.com/frame_right')\n         })\n+\n+        it('should reset the frame when the page is reloaded', async () => {\n+            await browser.url('https://the-internet.herokuapp.com/iframe')\n+            await expect($('#tinymce')).not.toBePresent()\n+            await browser.switchFrame($('iframe'))\n+            await expect($('#tinymce')).toBePresent()\n+            await browser.refresh()\n+            await expect($('#tinymce')).not.toBePresent()\n+            await browser.switchFrame($('iframe'))\n+            await expect($('#tinymce')).toBePresent()\n+        })\n     })\n })\n\ndiff --git a/packages/webdriverio/tests/commands/browser/switchFrame.test.ts b/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\nindex 80e7a7fe0b1..92fe79b3954 100644\n--- a/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\n@@ -113,6 +113,7 @@ describe('switchFrame command', () => {\n             elemExecute.mockResolvedValue({\n                 context: '5D4662C2B4465334DFD34239BA1E9E66'\n             })\n+            vi.spyOn(elem, 'waitForExist').mockResolvedValue({})\n \n             await browser.switchFrame(elem)\n             expect(contextManager.setCurrentContext).toBeCalledWith('5D4662C2B4465334DFD34239BA1E9E66')\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13827",
    "pr_id": 13827,
    "issue_id": 13821,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Creating new Appium session fails\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\nlatest\r\n\r\n### Node.js Version\r\n\r\nv18.19.0\r\n\r\n### Mode\r\n\r\nStandalone Mode\r\n\r\n### Which capabilities are you using?\r\n\r\n_No response_\r\n\r\n### What happened?\r\n\r\nI am creating automated tests to run on an iPhone simulator. When trying to create a session with an Appium server (Appium version 2.12.1, running on localhost), an exception is raised. See attached log output.\r\n\r\nNote that this error occurs as of webdriverIO version 9.2.2. Using 9.2.1, the session is created correctly.\r\n\r\n\r\n### What is your expected behavior?\r\n\r\nI expect the session to be started correctly, with no exceptions.\r\n\r\n### How to reproduce the bug.\r\n\r\nTo reproduce the bug, create a file, named reproduce.js with the following content:\r\n\r\n```js\r\nconst { remote } = require('webdriverio');\r\n\r\nremote({\r\n    hostname: 'localhost',\r\n    port: 4723,\r\n    capabilities: {\r\n        \"appium:app\": \"com.apple.MobileAddressBook\",\r\n        \"appium:automationName\": \"XCUITest\",\r\n        \"platformName\": \"iOS\"\r\n    }\r\n}).then((b) => {\r\n    console.log('success');\r\n}).catch((err) => {\r\n    console.log(err);\r\n})\r\n\r\n```\r\n\r\nand run the following command on the command line. Make sure that an appium server is running on localhost.\r\n\r\n```sh\r\n$ node reproduce.js\r\n```\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\n2024-10-29T10:16:46.465Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n2024-10-29T10:16:46.465Z INFO @wdio/utils: Connecting to existing driver at http://localhost:4723/\r\n2024-10-29T10:16:46.472Z INFO webdriver: [POST] http://localhost:4723/session\r\n2024-10-29T10:16:46.472Z INFO webdriver: DATA {\r\n  capabilities: {\r\n    alwaysMatch: {\r\n      'appium:app': 'com.apple.MobileAddressBook',\r\n      'appium:automationName': 'XCUITest',\r\n      platformName: 'iOS'\r\n    },\r\n    firstMatch: [ {} ]\r\n  }\r\n}\r\n2024-10-29T10:16:49.769Z INFO webdriver: COMMAND getWindowHandle()\r\n2024-10-29T10:16:49.769Z INFO webdriver: [GET] http://localhost:4723/session/141ca9c0-64c5-4c60-8ed1-5224bbcb86dd/window\r\n2024-10-29T10:16:49.776Z WARN webdriver: WebDriverError: Method is not implemented when running \"window\" with method \"GET\"\r\n2024-10-29T10:16:49.776Z INFO webdriver: Retrying 1/3\r\n2024-10-29T10:16:49.776Z INFO webdriver: [GET] http://localhost:4723/session/141ca9c0-64c5-4c60-8ed1-5224bbcb86dd/window\r\n2024-10-29T10:16:50.283Z WARN webdriver: WebDriverError: Method is not implemented when running \"window\" with method \"GET\"\r\n2024-10-29T10:16:50.284Z INFO webdriver: Retrying 2/3\r\n2024-10-29T10:16:50.285Z INFO webdriver: [GET] http://localhost:4723/session/141ca9c0-64c5-4c60-8ed1-5224bbcb86dd/window\r\n2024-10-29T10:16:51.297Z WARN webdriver: WebDriverError: Method is not implemented when running \"window\" with method \"GET\"\r\n2024-10-29T10:16:51.297Z INFO webdriver: Retrying 3/3\r\n2024-10-29T10:16:51.297Z INFO webdriver: [GET] http://localhost:4723/session/141ca9c0-64c5-4c60-8ed1-5224bbcb86dd/window\r\n2024-10-29T10:16:51.309Z ERROR webdriver: WebDriverError: Method is not implemented when running \"window\" with method \"GET\"\r\nunknown method: WebDriverError: Method is not implemented when running \"window\" with method \"GET\"\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 510,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/context.ts",
      "packages/webdriverio/tests/commands/browser/setViewport.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/browser/setViewport.test.ts"
    ],
    "base_commit": "53c79a5b21c0a84805f2515926aef6bb30c17a11",
    "head_commit": "642b156d914d6881a95c7153a164c49703756b6c",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13827",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13827",
    "dockerfile": "",
    "pr_merged_at": "2024-10-29T16:59:03.000Z",
    "patch": "diff --git a/packages/webdriverio/src/context.ts b/packages/webdriverio/src/context.ts\nindex faba8006eb8..f31c0c1260a 100644\n--- a/packages/webdriverio/src/context.ts\n+++ b/packages/webdriverio/src/context.ts\n@@ -22,11 +22,7 @@ export class ContextManager {\n \n     constructor(browser: WebdriverIO.Browser) {\n         this.#browser = browser\n-\n-        /**\n-         * just ignore if we run unit tests that don't have a listener mock\n-         */\n-        if (process.env.WDIO_UNIT_TESTS) {\n+        if (!this.#isEnabled()) {\n             return\n         }\n \n@@ -53,15 +49,19 @@ export class ContextManager {\n         })\n     }\n \n+    /**\n+     * Only run this session helper if BiDi is enabled and we're not in unit tests.\n+     */\n+    #isEnabled () {\n+        return !process.env.WDIO_UNIT_TESTS && browser.isBidi\n+    }\n+\n     /**\n      * set context at the start of the session\n      */\n     async initialize () {\n-        /**\n-         * just ignore in unit tests where we don't mock `getWindowHandle`\n-         */\n-        if (process.env.WDIO_UNIT_TESTS) {\n-            return 'fake-context'\n+        if (!this.#isEnabled()) {\n+            return ''\n         }\n \n         const windowHandle = await this.#browser.getWindowHandle()\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/browser/setViewport.test.ts b/packages/webdriverio/tests/commands/browser/setViewport.test.ts\nindex 343761b6987..eeaf6eba669 100644\n--- a/packages/webdriverio/tests/commands/browser/setViewport.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/setViewport.test.ts\n@@ -28,7 +28,7 @@ describe('setWindowSize', () => {\n         await browser.setViewport({ width: 777, height: 888, devicePixelRatio: 123 })\n         expect(browsingContextSetViewport).toBeCalledTimes(1)\n         expect(browsingContextSetViewport).toBeCalledWith({\n-            context: 'fake-context',\n+            context: '',\n             viewport: {\n                 width: 777,\n                 height: 888,\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13800",
    "pr_id": 13800,
    "issue_id": 13521,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Some elements not detected by the new shadow element detection \n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.0.9\n\n### Node.js Version\n\n20\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\n{\r\n    browserName: 'chrome',\r\n    acceptInsecureCerts: true,\r\n    'goog:chromeOptions': {\r\n      args: [\r\n        '--disable-backgrounding-occluded-windows',\r\n        '--window-size=1980,1080',\r\n        '--lang=fr_FR.UTF-8',\r\n        '--disable-search-engine-choice-screen',\r\n      ],\r\n    },\r\n  },\n```\n\n\n### What happened?\n\nsome elements in shadow roots are not detected\n\n### What is your expected behavior?\n\n_No response_\n\n### How to reproduce the bug.\n\n```\r\n  await browser.url('https://taskmob.demo.vaadin.com');\r\n  await expect($('#overlay')).toBeDisplayed();\r\n  console.log(await $('>>>.button-group').isDisplayed()); //return true\r\n  console.log(await $('.button-group').isExisting()); // return false\r\n```\n\n### Relevant log output\n\n```typescript\n[0-0] 2024-09-05T14:39:14.092Z INFO webdriver: COMMAND $(\">>>.button-group\")\r\n[0-0] 2024-09-05T14:39:14.096Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[7173 bytes]>\",\"awaitPromise\":true,\"arguments\":[{\"type\":\"boolean\",\"value\":false},{\"type\":\"string\",\"value\":\".button-group\"},{\"type\":\"undefined\"}],\"target\":{\"context\":\"613B1F05C64413A244B0C3DD5F201863\"}}\r\n[0-0] 2024-09-05T14:39:14.112Z DEBUG webdriver: BIDI RESULT {\"id\":12,\"result\":{\"realm\":\"8836307554755929525.-3443602311682276086\",\"result\":{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.398\",\"type\":\"node\",\"value\":{\"attributes\":{\"class\":\"button-group\"},\"childNodeCount\":5,\"localName\":\"div\",\"namespaceURI\":\"http://www.w3.org/1999/xhtml\",\"nodeType\":1,\"shadowRoot\":null}},\"type\":\"success\"},\"type\":\"success\"}\r\n[0-0] 2024-09-05T14:39:14.121Z INFO webdriver: RESULT WebdriverIO.Element<f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.398>\r\n[0-0] 2024-09-05T14:39:14.123Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[5465 bytes]>\",\"awaitPromise\":true,\"arguments\":[{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.398\"}],\"target\":{\"context\":\"613B1F05C64413A244B0C3DD5F201863\"}}\r\n[0-0] 2024-09-05T14:39:14.132Z DEBUG webdriver: BIDI RESULT {\"id\":13,\"result\":{\"realm\":\"8836307554755929525.-3443602311682276086\",\"result\":{\"type\":\"boolean\",\"value\":true},\"type\":\"success\"},\"type\":\"success\"}\r\n[0-0] true\r\n[0-0] 2024-09-05T14:39:14.134Z INFO webdriver: COMMAND $(\".button-group\")\r\n[0-0] 2024-09-05T14:39:14.138Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"css\",\"value\":\".button-group\"},\"context\":\"613B1F05C64413A244B0C3DD5F201863\",\"startNodes\":[{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.2\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.57\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.59\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.61\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.63\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.61\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.59\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.57\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.57\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.63\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.63\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.67\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.70\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.72\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.72\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.75\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.75\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.75\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.70\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.77\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.77\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.79\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.79\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.81\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.81\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.83\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.83\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.85\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.85\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.87\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.87\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.89\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.89\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.92\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.92\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.94\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.94\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.96\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.98\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.98\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.100\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.100\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.102\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.102\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.104\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.104\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.106\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.106\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.96\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.108\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.110\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.110\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.110\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.108\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.116\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.119\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.121\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.123\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.126\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.128\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.130\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.133\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.135\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.137\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.140\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.142\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.67\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.67\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.112\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.155\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.157\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.157\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.159\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.159\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.161\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.161\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.163\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.165\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.165\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.168\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.168\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.168\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.163\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.170\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.170\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.172\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.172\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.174\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.174\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.176\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.176\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.178\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.178\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.180\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.180\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.182\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.182\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.185\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.185\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.187\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.187\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.189\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.189\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.191\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.191\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.193\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.195\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.195\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.197\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.197\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.199\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.199\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.201\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.201\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.203\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.203\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.193\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.205\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.207\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.207\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.210\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.210\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.210\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.205\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.227\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.229\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.229\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.229\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.227\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.231\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.233\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.233\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.231\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.235\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.238\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.240\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.242\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.244\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.247\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.249\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.251\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.253\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.256\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.258\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.260\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.262\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.265\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.267\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.269\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.271\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.274\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.276\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.278\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.280\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.283\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.285\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.287\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.289\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.292\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.294\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.296\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.298\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.301\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.303\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.305\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.307\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.310\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.312\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.314\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.316\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.319\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.321\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.323\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.325\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.328\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.330\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.332\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.334\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.337\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.339\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.341\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.343\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.346\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.348\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.350\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.352\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.355\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.357\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.359\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.155\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.155\"}]}\r\n[0-0] 2024-09-05T14:39:14.203Z DEBUG webdriver: BIDI RESULT {\"id\":14,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n[0-0] 2024-09-05T14:39:14.209Z INFO webdriver: RESULT WebdriverIO.Element<.button-group>\r\n[0-0] 2024-09-05T14:39:14.210Z INFO webdriver: COMMAND $$(\".button-group\")\r\n[0-0] 2024-09-05T14:39:14.214Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"css\",\"value\":\".button-group\"},\"context\":\"613B1F05C64413A244B0C3DD5F201863\",\"startNodes\":[{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.2\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.57\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.59\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.61\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.63\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.61\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.59\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.57\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.57\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.63\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.63\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.67\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.70\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.72\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.72\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.75\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.75\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.75\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.70\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.77\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.77\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.79\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.79\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.81\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.81\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.83\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.83\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.85\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.85\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.87\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.87\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.89\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.89\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.92\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.92\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.94\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.94\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.96\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.98\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.98\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.100\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.100\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.102\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.102\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.104\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.104\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.106\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.106\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.96\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.108\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.110\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.110\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.110\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.108\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.116\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.119\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.121\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.123\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.126\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.128\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.130\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.133\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.135\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.137\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.140\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.142\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.67\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.67\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.112\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.155\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.157\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.157\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.159\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.159\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.161\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.161\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.163\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.165\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.165\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.168\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.168\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.168\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.163\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.170\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.170\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.172\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.172\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.174\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.174\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.176\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.176\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.178\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.178\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.180\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.180\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.182\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.182\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.185\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.185\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.187\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.187\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.189\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.189\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.191\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.191\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.193\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.195\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.195\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.197\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.197\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.199\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.199\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.201\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.201\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.203\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.203\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.193\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.205\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.207\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.207\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.210\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.210\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.210\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.205\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.227\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.229\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.229\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.229\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.227\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.231\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.233\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.233\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.231\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.235\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.238\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.240\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.242\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.244\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.247\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.249\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.251\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.253\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.256\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.258\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.260\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.262\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.265\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.267\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.269\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.271\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.274\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.276\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.278\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.280\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.283\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.285\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.287\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.289\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.292\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.294\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.296\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.298\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.301\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.303\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.305\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.307\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.310\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.312\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.314\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.316\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.319\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.321\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.323\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.325\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.328\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.330\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.332\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.334\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.337\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.339\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.341\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.343\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.346\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.348\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.350\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.352\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.355\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.357\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.359\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.155\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.155\"}]}\r\n[0-0] 2024-09-05T14:39:14.217Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"css\",\"value\":\".button-group\"},\"context\":\"613B1F05C64413A244B0C3DD5F201863\",\"startNodes\":[{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.2\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.57\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.59\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.61\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.63\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.61\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.59\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.57\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.57\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.63\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.63\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.67\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.70\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.72\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.72\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.75\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.75\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.75\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.70\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.77\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.77\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.79\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.79\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.81\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.81\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.83\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.83\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.85\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.85\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.87\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.87\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.89\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.89\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.92\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.92\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.94\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.94\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.96\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.98\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.98\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.100\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.100\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.102\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.102\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.104\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.104\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.106\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.106\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.96\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.108\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.110\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.110\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.110\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.108\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.116\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.119\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.121\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.123\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.126\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.128\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.130\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.133\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.135\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.137\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.140\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.142\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.67\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.67\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.112\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.155\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.157\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.157\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.159\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.159\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.161\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.161\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.163\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.165\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.165\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.168\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.168\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.168\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.163\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.170\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.170\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.172\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.172\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.174\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.174\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.176\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.176\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.178\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.178\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.180\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.180\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.182\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.182\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.185\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.185\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.187\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.187\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.189\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.189\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.191\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.191\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.193\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.195\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.195\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.197\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.197\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.199\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.199\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.201\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.201\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.203\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.203\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.193\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.205\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.207\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.207\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.210\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.210\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.210\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.205\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.227\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.229\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.229\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.229\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.227\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.231\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.233\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.233\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.231\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.235\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.238\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.240\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.242\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.244\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.247\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.249\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.251\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.253\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.256\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.258\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.260\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.262\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.265\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.267\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.269\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.271\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.274\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.276\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.278\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.280\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.283\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.285\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.287\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.289\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.292\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.294\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.296\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.298\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.301\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.303\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.305\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.307\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.310\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.312\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.314\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.316\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.319\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.321\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.323\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.325\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.328\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.330\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.332\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.334\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.337\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.339\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.341\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.343\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.346\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.348\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.350\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.352\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.355\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.357\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.359\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.155\"},{\"sharedId\":\"f.613B1F05C64413A244B0C3DD5F201863.d.B8BBCBBA1031815CBCFDF6AEFD1A3473.e.155\"}]}\r\n[0-0] 2024-09-05T14:39:14.359Z DEBUG webdriver: BIDI RESULT {\"id\":15,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n[0-0] 2024-09-05T14:39:14.366Z INFO webdriver: RESULT [\r\n[0-0]   selector: '.button-group',\r\n[0-0]   every: [Function: bound every],\r\n[0-0]   everySeries: [Function: bound everySeries] AsyncFunction,\r\n[0-0]   filter: [Function: bound filter],\r\n[0-0]   filterSeries: [Function: bound filterSeries] AsyncFunction,\r\n[0-0]   find: [Function: bound find],\r\n[0-0]   findIndex: [Function: bound findIndex],\r\n[0-0]   findIndexSeries: [Function: bound findIndexSeries] AsyncFunction,\r\n[0-0]   findSeries: [Function: bound findSeries] AsyncFunction,\r\n[0-0]   forEach: [Function: bound forEach] AsyncFunction,\r\n[0-0]   forEachSeries: [Function: bound forEachSeries] AsyncFunction,\r\n[0-0]   map: [Function: bound map] AsyncFunction,\r\n[0-0]   mapSeries: [Function: bound mapSeries] AsyncFunction,\r\n[0-0]   reduce: [Function: bound reduce] AsyncFunction,\r\n[0-0]   some: [Function: bound some],\r\n[0-0]   someSeries: [Function: bound someSeries] AsyncFunction,\r\n[0-0]   parent: Browser {\r\n[0-0]     sessionId: '438e67d6ec502e7d89c8014017dd522d',\r\n[0-0]     capabilities: {\r\n[0-0]       acceptInsecureCerts: true,\r\n[0-0]       browserName: 'chrome',\r\n[0-0]       browserVersion: '128.0.6613.120',\r\n[0-0]       chrome: [Object],\r\n[0-0]       'fedcm:accounts': true,\r\n[0-0]       'goog:chromeOptions': [Object],\r\n[0-0]       networkConnectionEnabled: false,\r\n[0-0]       pageLoadStrategy: 'normal',\r\n[0-0]       platformName: 'Windows 10',\r\n[0-0]       proxy: {},\r\n[0-0]       'se:bidi': 'ws://172.21.144.1:4444/session/438e67d6ec502e7d89c8014017dd522d/se/bidi',\r\n[0-0]       'se:cdp': 'ws://172.21.144.1:4444/session/438e67d6ec502e7d89c8014017dd522d/se/cdp',\r\n[0-0]       'se:cdpVersion': '128.0.6613.120',\r\n[0-0]       setWindowRect: true,\r\n[0-0]       strictFileInteractability: false,\r\n[0-0]       timeouts: [Object],\r\n[0-0]       unhandledPromptBehavior: 'dismiss and notify',\r\n[0-0]       webSocketUrl: 'ws://localhost:1068/session/438e67d6ec502e7d89c8014017dd522d',\r\n[0-0]       'webauthn:extension:credBlob': true,\r\n[0-0]       'webauthn:extension:largeBlob': true,\r\n[0-0]       'webauthn:extension:minPinLength': true,\r\n[0-0]       'webauthn:extension:prf': true,\r\n[0-0]       'webauthn:virtualAuthenticators': true\r\n[0-0]     },\r\n[0-0]     addCommand: [Function (anonymous)],\r\n[0-0]     overwriteCommand: [Function (anonymous)],\r\n[0-0]     addLocatorStrategy: [Function (anonymous)]\r\n[0-0]   },\r\n[0-0]   foundWith: '$$',\r\n[0-0]   props: [],\r\n[0-0]   getElements: [AsyncFunction (anonymous)]\r\n[0-0] ]\r\n[0-0] false\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 4799,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/shadowRoot.ts",
      "packages/webdriverio/tests/shadowRoot.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/shadowRoot.test.ts"
    ],
    "base_commit": "6c3dc077327edcc1043f23a7a536257bc45a7527",
    "head_commit": "3f8d600d89dc61c367754445176d0171c04c45e0",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13800",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13800",
    "dockerfile": "",
    "pr_merged_at": "2024-10-25T02:44:41.000Z",
    "patch": "diff --git a/packages/webdriverio/src/shadowRoot.ts b/packages/webdriverio/src/shadowRoot.ts\nindex 7e683607525..4a191ad379d 100644\n--- a/packages/webdriverio/src/shadowRoot.ts\n+++ b/packages/webdriverio/src/shadowRoot.ts\n@@ -339,12 +339,13 @@ export class ShadowRootTree {\n     }\n \n     remove (element: string): boolean {\n-        for (const child of this.children) {\n-            if (child.element === element) {\n-                return this.children.delete(child)\n+        const childArray = Array.from(this.children)\n+        for (let i = childArray.length - 1; i >= 0; i--) {\n+            if (childArray[i].element === element) {\n+                return this.children.delete(childArray[i])\n             }\n \n-            const wasFound = child.remove(element)\n+            const wasFound = childArray[i].remove(element)\n             if (wasFound) {\n                 return true\n             }\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/shadowRoot.test.ts b/packages/webdriverio/tests/shadowRoot.test.ts\nindex 61479cf1dec..c5b0c6b4c99 100644\n--- a/packages/webdriverio/tests/shadowRoot.test.ts\n+++ b/packages/webdriverio/tests/shadowRoot.test.ts\n@@ -123,6 +123,10 @@ describe('ShadowRootTree', () => {\n     root.addShadowElement('8', new ShadowRootTree('10', '11'))\n     root.addShadowElement('8', new ShadowRootTree('12', '13'))\n     root.addShadowElement('12', new ShadowRootTree('14', '15'))\n+    root.addShadowElement(new ShadowRootTree('16', '17'))\n+    root.addShadowElement('16', new ShadowRootTree('18', '19'))\n+    root.addShadowElement('16', new ShadowRootTree('18', '19'))\n+    root.addShadowElement('18', new ShadowRootTree('20', '21'))\n \n     it('can find the root of a tree', () => {\n         const tree = root.find('8')\n@@ -148,6 +152,10 @@ describe('ShadowRootTree', () => {\n             \"13\",\n             \"15\",\n             \"7\",\n+            \"17\",\n+            \"19\",\n+            \"21\",\n+            \"19\",\n           ]\n         `)\n         expect(root.find('8')?.getAllLookupScopes()).toMatchInlineSnapshot(`\n@@ -170,6 +178,22 @@ describe('ShadowRootTree', () => {\n             \"3\",\n             \"5\",\n             \"7\",\n+            \"17\",\n+            \"19\",\n+            \"21\",\n+            \"19\",\n+          ]\n+        `)\n+    })\n+\n+    it('can delete children in the right order', () => {\n+        expect(root.remove('18')).toBe(true)\n+        const child = root.find('16')\n+        expect(child?.getAllLookupScopes()).toMatchInlineSnapshot(`\n+          [\n+            \"17\",\n+            \"19\",\n+            \"21\",\n           ]\n         `)\n     })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13796",
    "pr_id": 13796,
    "issue_id": 12753,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[💡 Feature]: Support configuring NODE_OPTIONS for ChromeDriver separately from NODE_OPTIONS for WDIO itself\n### Is your feature request related to a problem?\r\n\r\nHere's the background: https://github.com/webdriverio-community/wdio-electron-service/issues/331\r\n\r\ntldr: we were stuck in getting Electron (dev mode, not prod) to start within WDIO. We've figured that the root cause is because NODE_OPTIONS was set on ChromeDriver. The NODE_OPTIONS (intended for WDIO) happens to cause issue in Electron.\r\n\r\nSpecifically, WDIO sets `NODE_OPTIONS=' --loader ts-node/esm/transpile-only --no-warnings'` ([ref](https://github.com/webdriverio/webdriverio/blob/main/packages/wdio-local-runner/src/worker.ts#L129)), which is carried over to ChromeDriver and, thus, Electron.\r\n\r\nTo verify the impact of this env, we can run: `NODE_OPTIONS=' --loader ts-node/esm/transpile-only --no-warnings' ./node_modules/.bin/electron` in Terminal, and Electron will crash.\r\n\r\n### Describe the solution you'd like.\r\n\r\nWe want to be able to to configure NODE_OPTIONS for ChromeDriver separately from the NODE_OPTIONS for WDIO.\r\n\r\nToday NODE_OPTIONS for WDIO is carried over to ChromeDriver; in turn, it is carried over to Electron (dev mode), and Electron crashes because of it.\r\n\r\nHere's the line that we want to inject NODE_OPTIONS only for ChromeDriver: https://github.com/webdriverio/webdriverio/blob/main/packages/wdio-utils/src/node/startWebDriver.ts#L86\r\n\r\nWe want to change it to something like:\r\n\r\n```\r\ndriverProcess = cp.spawn(chromedriverExcecuteablePath, driverParams, { env: {...process.env, NODE_OPTIONS: configured_node_options } })\r\n```\r\n\r\nI would also consider adding `shell: true`, so it closely resembles when the Electron is started directly from command line.\r\n\r\n### Describe alternatives you've considered.\r\n\r\nWe could just filter out NODE_OPTIONS altogether as well like:\r\n\r\n```\r\ndriverProcess = cp.spawn(chromedriverExcecuteablePath, driverParams, { env: { ...process.env, NODE_OPTIONS: null } })\r\n```\r\n\r\nThis also might be preferable because it's more minimal, and we currently don't have a reason to set NODE_OPTIONS for ChromeDriver/Electron.\r\n\r\n### Additional context\r\n\r\nWe are trying to get wdio-electron-service to support testing against Electron (dev mode), not just prod mode.\r\n\r\nElectron (prod mode) doesn't have the same problem because the prod mode forbids NODE_OPTIONS ([ref](https://github.com/electron/electron/blob/0346e0a8bff7b712f86f51075b3effcc1d8358f1/docs/api/environment-variables.md)).\r\n\r\ncc @goosewobbler  @christian-bromann \r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct",
    "issue_word_count": 369,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-utils/src/node/startWebDriver.ts",
      "packages/wdio-utils/tests/node/index.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-utils/tests/node/index.test.ts"
    ],
    "base_commit": "05521ffbd276c852891846bb3401232aaa071803",
    "head_commit": "097071aea33c0d607ee9fa961ea52c429c72ca04",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13796",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13796",
    "dockerfile": "",
    "pr_merged_at": "2024-10-30T17:35:32.000Z",
    "patch": "diff --git a/packages/wdio-utils/src/node/startWebDriver.ts b/packages/wdio-utils/src/node/startWebDriver.ts\nindex d2bd0e6d947..cc5188ff33b 100644\n--- a/packages/wdio-utils/src/node/startWebDriver.ts\n+++ b/packages/wdio-utils/src/node/startWebDriver.ts\n@@ -86,7 +86,12 @@ export async function startWebDriver (options: Capabilities.RemoteConfig) {\n         chromedriverOptions.allowedOrigins = chromedriverOptions.allowedOrigins || ['*']\n         chromedriverOptions.allowedIps = chromedriverOptions.allowedIps || ['0.0.0.0']\n         const driverParams = parseParams({ port, ...chromedriverOptions })\n-        driverProcess = cp.spawn(chromedriverExcecuteablePath, driverParams)\n+        /**\n+         * Set NODE_OPTIONS empty to avoid passing it to the chromedriver process so that Electron doesn't crash\n+         */\n+        driverProcess = cp.spawn(chromedriverExcecuteablePath, driverParams, {\n+            env: { ...process.env, NODE_OPTIONS: '' }\n+        })\n         driver = `Chromedriver v${browserVersion} with params ${driverParams.join(' ')}`\n     } else if (isSafari(caps.browserName)) {\n         const safaridriverOptions = caps['wdio:safaridriverOptions'] || ({} as WebdriverIO.SafaridriverOptions)\n",
    "test_patch": "diff --git a/packages/wdio-utils/tests/node/index.test.ts b/packages/wdio-utils/tests/node/index.test.ts\nindex 90708f76aaa..015e4397e0c 100644\n--- a/packages/wdio-utils/tests/node/index.test.ts\n+++ b/packages/wdio-utils/tests/node/index.test.ts\n@@ -216,7 +216,12 @@ describe('startWebDriver', () => {\n         expect(cp.spawn).toBeCalledTimes(1)\n         expect(cp.spawn).toBeCalledWith(\n             '/foo/bar/executable',\n-            ['--port=1234', '--foo=bar', '--allowed-origins=*', '--allowed-ips=0.0.0.0']\n+            ['--port=1234', '--foo=bar', '--allowed-origins=*', '--allowed-ips=0.0.0.0'],\n+            expect.objectContaining({\n+                env: expect.objectContaining({\n+                    NODE_OPTIONS: ''\n+                })\n+            })\n         )\n     })\n \n@@ -248,7 +253,12 @@ describe('startWebDriver', () => {\n         expect(cp.spawn).toBeCalledTimes(1)\n         expect(cp.spawn).toBeCalledWith(\n             '/my/chromedriver',\n-            ['--port=1234', '--binary=/my/chromedriver', '--allowed-origins=*', '--allowed-ips=0.0.0.0']\n+            ['--port=1234', '--binary=/my/chromedriver', '--allowed-origins=*', '--allowed-ips=0.0.0.0'],\n+            expect.objectContaining({\n+                env: expect.objectContaining({\n+                    NODE_OPTIONS: ''\n+                })\n+            })\n         )\n     })\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13793",
    "pr_id": 13793,
    "issue_id": 13790,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[💡 Feature]: <title>browser.newWindow() should be able to open a new tab in the same Chrome instance\n### Is your feature request related to a problem?\n\nCurrently, browser.newWindow() opens a new Chrome window. I would like to open a new tab within the same window.\n\n### Describe the solution you'd like.\n\nThis feature request is to update the browser.newWindow() command to support opening a new tab in the same Chrome instance, instead of a new window.\n\n### Describe alternatives you've considered.\n\n_No response_\n\n### Additional context\n\n_No response_\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct",
    "issue_word_count": 102,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "package.json",
      "packages/webdriverio/src/commands/browser/newWindow.ts",
      "packages/webdriverio/src/types.ts",
      "packages/webdriverio/tests/commands/browser/newWindow.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/browser/newWindow.test.ts"
    ],
    "base_commit": "5d7e81dfcbf28105ab65827b24e05fe3c82d9f5f",
    "head_commit": "36debdb1d9d8a9683e53469746673b837782b084",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13793",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13793",
    "dockerfile": "",
    "pr_merged_at": "2024-10-24T20:12:44.000Z",
    "patch": "diff --git a/package.json b/package.json\nindex e2adf8318f1..7d4dd06bdd1 100644\n--- a/package.json\n+++ b/package.json\n@@ -57,7 +57,7 @@\n     \"test:e2e:cloud\": \"cd ./e2e && npx wdio run ./wdio/wdio.sauce.conf.ts\",\n     \"test:e2e\": \"run-s test:e2e:* \",\n     \"dev\": \"pnpm -r --filter=@wdio/compiler run build --watch\",\n-    \"watch:docs\": \"pnpm docs:generate && cd website && npm i && npm start\",\n+    \"watch:docs\": \"pnpm docs:generate && cd website && pnpm i && pnpm start\",\n     \"version\": \"pnpm changelog && git add CHANGELOG.md\",\n     \"postinstall\": \"run-s postinstall:*\",\n     \"postinstall:husky\": \"husky\"\n\ndiff --git a/packages/webdriverio/src/commands/browser/newWindow.ts b/packages/webdriverio/src/commands/browser/newWindow.ts\nindex b89d6b6d862..9bd4f06d7ed 100644\n--- a/packages/webdriverio/src/commands/browser/newWindow.ts\n+++ b/packages/webdriverio/src/commands/browser/newWindow.ts\n@@ -3,28 +3,30 @@ import { sleep } from '@wdio/utils'\n import newWindowHelper from '../../scripts/newWindow.js'\n import { getContextManager } from '../../context.js'\n import type { NewWindowOptions } from '../../types.js'\n+import logger from '@wdio/logger'\n+const log = logger('webdriverio:newWindow')\n \n const WAIT_FOR_NEW_HANDLE_TIMEOUT = 3000\n \n /**\n  *\n- * Open new window in browser. This command is the equivalent function to `window.open()`. This command does not\n- * work in mobile environments.\n+ * Open new window or tab in browser (defaults to a new window if not specified).\n+ * This command is the equivalent function to `window.open()`. This command does not work in mobile environments.\n  *\n- * __Note:__ When calling this command you automatically switch to the new window.\n+ * __Note:__ When calling this command you automatically switch to the new window or tab.\n  *\n  * <example>\n     :newWindowSync.js\n-    it('should open a new tab', async () => {\n+    it('should open a new window', async () => {\n         await browser.url('https://google.com')\n         console.log(await browser.getTitle()) // outputs: \"Google\"\n \n-        await browser.newWindow('https://webdriver.io', {\n+        const result = await browser.newWindow('https://webdriver.io', {\n             windowName: 'WebdriverIO window',\n             windowFeature: 'width=420,height=230,resizable,scrollbars=yes,status=1',\n         })\n         console.log(await browser.getTitle()) // outputs: \"WebdriverIO · Next-gen browser and mobile automation test framework for Node.js\"\n-\n+        console.log(result.type) // outputs: \"window\"\n         const handles = await browser.getWindowHandles()\n         await browser.switchToWindow(handles[1])\n         await browser.closeWindow()\n@@ -32,23 +34,48 @@ const WAIT_FOR_NEW_HANDLE_TIMEOUT = 3000\n         console.log(await browser.getTitle()) // outputs: \"Google\"\n     });\n  * </example>\n+ * <example>\n+      :newTabSync.js\n+      it('should open a new tab', async () => {\n+          await browser.url('https://google.com')\n+          console.log(await browser.getTitle()) // outputs: \"Google\"\n+\n+          await browser.newWindow('https://webdriver.io', {\n+              type:'tab',\n+              windowName: 'WebdriverIO window',\n+              windowFeature: 'width=420,height=230,resizable,scrollbars=yes,status=1',\n+          })\n+          console.log(await browser.getTitle()) // outputs: \"WebdriverIO · Next-gen browser and mobile automation test framework for Node.js\"\n+          console.log(result.type) // outputs: \"tab\"\n+          const handles = await browser.getWindowHandles()\n+          await browser.switchToWindow(handles[1])\n+          await browser.closeWindow()\n+          await browser.switchToWindow(handles[0])\n+          console.log(await browser.getTitle()) // outputs: \"Google\"\n+     });\n+ * </example>\n  *\n  * @param {string}  url      website URL to open\n  * @param {NewWindowOptions=} options                newWindow command options\n+ * @param {string=}           options.type           type of new window: 'tab' or 'window'\n  * @param {String=}           options.windowName     name of the new window\n  * @param {String=}           options.windowFeatures features of opened window (e.g. size, position, scrollbars, etc.)\n  *\n- * @return {String}          id of window handle of new tab\n+ * @return {Object}          An object containing the window handle and the type of new window\n+ * @return {String}          handle - The ID of the window handle of the new tab or window\n+ * @return {String}          type - The type of the new window, either 'tab' or 'window'\n+ *\n+ * @throws {Error} If `url` is invalid, if the command is used on mobile, or `type` is not 'tab' or 'window'.\n  *\n  * @uses browser/execute, protocol/getWindowHandles, protocol/switchToWindow\n  * @alias browser.newWindow\n- * @type window\n+ * @type window or tab\n  */\n export async function newWindow (\n     this: WebdriverIO.Browser,\n     url: string,\n-    { windowName = '', windowFeatures = '' }: NewWindowOptions = {}\n-) {\n+    { type = 'window', windowName = '', windowFeatures = '' }: NewWindowOptions = {}\n+): Promise<{ handle: string, type: 'tab' | 'window' }> {\n     /**\n      * parameter check\n      */\n@@ -56,6 +83,17 @@ export async function newWindow (\n         throw new Error('number or type of arguments don\\'t agree with newWindow command')\n     }\n \n+    /**\n+    * Validate the 'type' parameter to ensure it is either 'tab' or 'window'\n+    */\n+    if (!['tab', 'window'].includes(type)) {\n+        throw new Error(`Invalid type '${type}' provided to newWindow command. Use either 'tab' or 'window'`)\n+    }\n+\n+    if (windowName || windowFeatures) {\n+        log.warn('The \"windowName\" and \"windowFeatures\" options are deprecated and only supported in WebDriver Classic sessions.')\n+    }\n+\n     /**\n      * mobile check\n      */\n@@ -67,7 +105,7 @@ export async function newWindow (\n \n     if (this.isBidi) {\n         const contextManager = getContextManager(this)\n-        const { context } = await this.browsingContextCreate({ type: 'window' })\n+        const { context } = await this.browsingContextCreate({ type })\n         contextManager.setCurrentContext(context)\n         await this.browsingContextNavigate({ context, url })\n     } else {\n@@ -95,5 +133,5 @@ export async function newWindow (\n     }\n \n     await this.switchToWindow(newTab)\n-    return newTab\n+    return { handle: newTab, type }\n }\n\ndiff --git a/packages/webdriverio/src/types.ts b/packages/webdriverio/src/types.ts\nindex 48401ecdd46..324fb6fa0cc 100644\n--- a/packages/webdriverio/src/types.ts\n+++ b/packages/webdriverio/src/types.ts\n@@ -488,6 +488,7 @@ export type DragAndDropOptions = {\n }\n \n export type NewWindowOptions = {\n+    type?: 'tab' | 'window',\n     windowName?: string,\n     windowFeatures?: string\n }\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/browser/newWindow.test.ts b/packages/webdriverio/tests/commands/browser/newWindow.test.ts\nindex 5105994efd5..4deea516409 100644\n--- a/packages/webdriverio/tests/commands/browser/newWindow.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/newWindow.test.ts\n@@ -2,7 +2,7 @@\n  * @vitest-environment jsdom\n  */\n import path from 'node:path'\n-import { expect, describe, beforeEach, afterEach, it, vi } from 'vitest'\n+import { expect, describe, beforeEach, afterEach, it, vi, type MockInstance } from 'vitest'\n \n import { remote } from '../../../src/index.js'\n \n@@ -42,7 +42,7 @@ describe('newWindow', () => {\n             windowName: 'some name',\n             windowFeatures: 'some params'\n         })\n-        expect(newHandle).toBe('new-window-handle')\n+        expect(newHandle.handle).toBe('new-window-handle')\n         expect(vi.mocked(fetch).mock.calls).toHaveLength(8)\n         expect(JSON.parse(vi.mocked(fetch).mock.calls[2][1]?.body as any).args)\n             .toEqual(['https://webdriver.io', 'some name', 'some params'])\n@@ -108,4 +108,59 @@ describe('newWindow', () => {\n         }).catch((err: Error) => err) as Error\n         expect(error.message).toContain('not supported on mobile')\n     })\n+\n+    it('should open a new window by default', async () => {\n+        const browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: {\n+                browserName: 'bidi'\n+            }\n+        })\n+\n+        const browsingContextCreateSpy: MockInstance = vi.spyOn(browser, 'browsingContextCreate')\n+        browsingContextCreateSpy.mockImplementation(() => ({ context: 'new-window-handle', type: 'window' }))\n+        const browsingContextNavigateSpy: MockInstance = vi.spyOn(browser, 'browsingContextNavigate')\n+        browsingContextNavigateSpy.mockImplementation(() => ({}))\n+\n+        const newHandle = await browser.newWindow('https://webdriver.io', {\n+            windowName: 'some window'\n+        })\n+\n+        expect(newHandle.type).toBe('window')\n+        expect(browsingContextCreateSpy).toHaveBeenCalledTimes(1)\n+        expect(browsingContextCreateSpy).toHaveBeenCalledWith({ type: 'window' })\n+        expect(browsingContextNavigateSpy).toHaveBeenCalledTimes(1)\n+        expect(browsingContextNavigateSpy).toHaveBeenCalledWith({\n+            context: 'new-window-handle',\n+            url: 'https://webdriver.io'\n+        })\n+    })\n+\n+    it('should open a new tab when type is tab', async () => {\n+        const browser = await remote({\n+            baseUrl: 'http://foobar.com',\n+            capabilities: {\n+                browserName: 'bidi'\n+            }\n+        })\n+\n+        const browsingContextCreateSpy: MockInstance = vi.spyOn(browser, 'browsingContextCreate')\n+        browsingContextCreateSpy.mockImplementation(() => ({ context: 'new-tab-handle', type: 'tab' }))\n+        const browsingContextNavigateSpy: MockInstance = vi.spyOn(browser, 'browsingContextNavigate')\n+        browsingContextNavigateSpy.mockImplementation(() => ({}))\n+\n+        const newHandle = await browser.newWindow('https://webdriver.io', {\n+            type: 'tab',\n+            windowName: 'some tab'\n+        })\n+\n+        expect(newHandle.type).toBe('tab')\n+        expect(browsingContextCreateSpy).toHaveBeenCalledTimes(1)\n+        expect(browsingContextCreateSpy).toHaveBeenCalledWith({ type: 'tab' })\n+        expect(browsingContextNavigateSpy).toHaveBeenCalledTimes(1)\n+        expect(browsingContextNavigateSpy).toHaveBeenCalledWith({\n+            context: 'new-tab-handle',\n+            url: 'https://webdriver.io'\n+        })\n+    })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13782",
    "pr_id": 13782,
    "issue_id": 13516,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Cannot find mocha.css\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.0.7 and 8.38.3\n\n### Node.js Version\n\n20.13.1\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n_No response_\n\n### What happened?\n\nTried to run my tests as usual:\r\nhttps://github.com/humanwhocodes/humanfs/pull/130\r\n\r\nIn v8.38.3, received the following error:\r\n\r\n```\r\n[0-0]  Error:  Test failed due to following error(s):\r\n  - mocha.css: Failed to load resource: the server responded with a status of 404 \r\n(Not Found)\r\n\r\n[0-0] FAILED in chrome - file:///C:/Users/nzaka/projects/humanwhocodes/fsx/packages/web/tests/web-hfs.test.js\r\n```\r\n\r\nIn v9.0.7, I receive the same error, but also the Firefox run fails with a timeout of 60s.\n\n### What is your expected behavior?\n\nThe tests to run successfully.\n\n### How to reproduce the bug.\n\nThis is the package in question:\r\nhttps://github.com/humanwhocodes/humanfs/tree/main/packages/web\r\n\r\nUp until recently, this was working fine. After cloning the repo:\r\n\r\n```shell\r\ncd packages/web\r\nnpm install\r\nnpm test\r\n```\n\n### Relevant log output\n\n```typescript\n[0-0]  Error:  Test failed due to following error(s):\r\n  - mocha.css: Failed to load resource: the server responded with a status of 404 \r\n(Not Found)\r\n\r\n[0-0] FAILED in chrome - file:///C:/Users/nzaka/projects/humanwhocodes/fsx/packages/web/tests/web-hfs.test.js\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 274,
    "test_files_count": 1,
    "non_test_files_count": 6,
    "pr_changed_files": [
      "infra/compiler/src/index.ts",
      "infra/compiler/src/plugins.ts",
      "packages/wdio-browser-runner/package.json",
      "packages/wdio-browser-runner/src/vite/utils.ts",
      "packages/wdio-browser-runner/tests/vite/utils.test.ts",
      "packages/webdriver/src/request/constants.ts",
      "pnpm-lock.yaml"
    ],
    "pr_changed_test_files": [
      "packages/wdio-browser-runner/tests/vite/utils.test.ts"
    ],
    "base_commit": "08b496c511c4e55cdf8c05f852d3b36316ac79af",
    "head_commit": "a02ffe71612960feb6f5f85c32ae58b2a7562ec4",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13782",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13782",
    "dockerfile": "",
    "pr_merged_at": "2024-10-26T17:05:03.000Z",
    "patch": "diff --git a/infra/compiler/src/index.ts b/infra/compiler/src/index.ts\nindex acc5283c50f..dad2a148b47 100644\n--- a/infra/compiler/src/index.ts\n+++ b/infra/compiler/src/index.ts\n@@ -7,7 +7,7 @@ import { build, context, type BuildOptions, type Plugin } from 'esbuild'\n import type { PackageJson } from 'type-fest'\n \n import { getExternal } from './utils.js'\n-import { log, clear, generateDts, copyEJSTemplates, externalScripts } from './plugins.js'\n+import { log, clear, generateDts, copyEJSTemplates, externalScripts, runBuildScript } from './plugins.js'\n import { generateTypes } from './type-generation/index.js'\n \n const __dirname = path.dirname(url.fileURLToPath(import.meta.url))\n@@ -133,6 +133,10 @@ const configs = packages.map(([packageDir, pkg]) => {\n              */\n             if (typeof exp.types === 'string' && target === '.') {\n                 esmBuild.plugins?.push(generateDts(absWorkingDir, pkg))\n+\n+                if (pkg.scripts?.build) {\n+                    esmBuild.plugins?.push(runBuildScript(absWorkingDir, pkg))\n+                }\n             }\n \n             if (values.clear) {\n\ndiff --git a/infra/compiler/src/plugins.ts b/infra/compiler/src/plugins.ts\nindex 1bcc76ee92d..d7795d1ef22 100644\n--- a/infra/compiler/src/plugins.ts\n+++ b/infra/compiler/src/plugins.ts\n@@ -142,3 +142,24 @@ export function externalScripts(): Plugin {\n         }\n     }\n }\n+\n+export function runBuildScript(absWorkingDir: string, pkg: PackageJson): Plugin {\n+    return {\n+        name: `build-${pkg.name || 'unknown'}`,\n+        setup(build) {\n+            build.onEnd(async () => {\n+                const child =cp.spawn('pnpm',\n+                    ['run', 'build'],\n+                    { cwd: absWorkingDir, stdio: 'inherit' }\n+                )\n+                child.on('exit', (code) => {\n+                    if (code !== 0) {\n+                        console.log(`${l.name(pkg.name)} ❌ Failed run build script for ${pkg.name}`)\n+                        return\n+                    }\n+                    console.log(`${l.name(pkg.name)} ✅ Successfully ran build script for ${pkg.name}: \"${pkg.scripts?.build}\"`)\n+                })\n+            })\n+        }\n+    }\n+}\n\ndiff --git a/packages/wdio-browser-runner/package.json b/packages/wdio-browser-runner/package.json\nindex 925bb648d0b..f542ba6e99f 100644\n--- a/packages/wdio-browser-runner/package.json\n+++ b/packages/wdio-browser-runner/package.json\n@@ -60,19 +60,16 @@\n       \"types\": \"./build/browser/expect.d.ts\"\n     }\n   },\n+  \"scripts\": {\n+    \"build\": \"mkdir ./build/third_party && cp ./node_modules/mocha/mocha.css ./build/third_party/mocha.css && cp ./node_modules/mocha/mocha.js ./build/third_party/mocha.js\"\n+  },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n     \"@originjs/vite-plugin-commonjs\": \"^1.0.3\",\n-    \"@types/istanbul-lib-source-maps\": \"^4.0.4\",\n     \"@vitest/spy\": \"^2.0.4\",\n-    \"@wdio/globals\": \"workspace:*\",\n     \"@wdio/local-runner\": \"workspace:*\",\n     \"@wdio/logger\": \"workspace:*\",\n-    \"@wdio/mocha-framework\": \"workspace:*\",\n     \"@wdio/protocols\": \"workspace:*\",\n-    \"@wdio/runner\": \"workspace:*\",\n-    \"@wdio/types\": \"workspace:*\",\n-    \"@wdio/utils\": \"workspace:*\",\n     \"deepmerge-ts\": \"^7.0.3\",\n     \"expect\": \"30.0.0-alpha.6\",\n     \"expect-webdriverio\": \"^5.0.1\",\n@@ -89,16 +86,16 @@\n     \"source-map-support\": \"^0.5.21\",\n     \"vite\": \"~5.4.0\",\n     \"vite-plugin-istanbul\": \"^6.0.0\",\n-    \"vite-plugin-top-level-await\": \"^1.4.1\",\n-    \"webdriver\": \"workspace:*\",\n-    \"webdriverio\": \"workspace:*\"\n+    \"vite-plugin-top-level-await\": \"^1.4.1\"\n   },\n   \"devDependencies\": {\n     \"@types/istanbul-lib-coverage\": \"^2.0.6\",\n     \"@types/istanbul-lib-report\": \"^3.0.3\",\n+    \"@types/istanbul-lib-source-maps\": \"^4.0.4\",\n     \"@types/istanbul-reports\": \"^3.0.4\",\n     \"esbuild\": \"^0.24.0\",\n-    \"geckodriver\": \"^4.4.4\"\n+    \"geckodriver\": \"^4.4.4\",\n+    \"mocha\": \"^10.7.3\"\n   },\n   \"optionalDependencies\": {\n     \"@nuxt/kit\": \"^3.12.4\",\n@@ -106,10 +103,31 @@\n     \"unimport\": \"^3.10.0\"\n   },\n   \"peerDependencies\": {\n-    \"mocha\": \"^10.7.3\"\n+    \"@wdio/globals\": \"workspace:*\",\n+    \"@wdio/mocha-framework\": \"workspace:*\",\n+    \"@wdio/runner\": \"workspace:*\",\n+    \"@wdio/types\": \"workspace:*\",\n+    \"@wdio/utils\": \"workspace:*\",\n+    \"webdriver\": \"workspace:*\",\n+    \"webdriverio\": \"workspace:*\"\n   },\n   \"peerDependenciesMeta\": {\n-    \"mocha\": {\n+    \"@wdio/globals\": {\n+      \"optional\": true\n+    },\n+    \"@wdio/mocha-framework\": {\n+      \"optional\": false\n+    },\n+    \"@wdio/runner\": {\n+      \"optional\": false\n+    },\n+    \"@wdio/types\": {\n+      \"optional\": true\n+    },\n+    \"webdriver\": {\n+      \"optional\": false\n+    },\n+    \"@wdio/webdriverio\": {\n       \"optional\": false\n     }\n   },\n\ndiff --git a/packages/wdio-browser-runner/src/vite/utils.ts b/packages/wdio-browser-runner/src/vite/utils.ts\nindex f1b6f813be1..abc5bb9ce4b 100644\n--- a/packages/wdio-browser-runner/src/vite/utils.ts\n+++ b/packages/wdio-browser-runner/src/vite/utils.ts\n@@ -11,13 +11,15 @@ import { MOCHA_VARIABELS } from '../constants.js'\n import type { Environment, FrameworkPreset } from '../types.js'\n \n const log = logger('@wdio/browser-runner')\n+const __dirname = path.dirname(url.fileURLToPath(import.meta.url))\n \n export async function getTemplate(options: WebdriverIO.BrowserRunnerOptions, env: Environment, spec: string, p = process) {\n     const root = options.rootDir || process.cwd()\n-    const rootFileUrl = url.pathToFileURL(root).href\n     const isHeadless = options.headless || Boolean(process.env.CI)\n     const alias = (options.viteConfig as (InlineConfig | undefined))?.resolve?.alias || {}\n     const usesTailwindCSS = await hasFileByExtensions(path.join(root, 'tailwind.config'))\n+    const mochaCSSHref = path.join(__dirname, 'third_party', 'mocha.css')\n+    const mochaJSSrc = path.join(__dirname, 'third_party', 'mocha.js')\n \n     /**\n      * clean up some values that might cause serialization issues\n@@ -36,10 +38,6 @@ export async function getTemplate(options: WebdriverIO.BrowserRunnerOptions, env\n         log.error(`Failed to setup source-map-support: ${(err as Error).message}`)\n     }\n \n-    const mochaPath = await resolve('mocha', `${rootFileUrl}/node_modules`)\n-    const mochaCSSHref = path.join(url.fileURLToPath(path.dirname(mochaPath)), 'mocha.css')\n-    const mochaJSSrc = path.join(url.fileURLToPath(path.dirname(mochaPath)), 'mocha.js')\n-\n     return /* html */`\n     <!doctype html>\n     <html>\n\ndiff --git a/packages/webdriver/src/request/constants.ts b/packages/webdriver/src/request/constants.ts\nindex e52a2401669..5e2621121ce 100644\n--- a/packages/webdriver/src/request/constants.ts\n+++ b/packages/webdriver/src/request/constants.ts\n@@ -9,7 +9,7 @@ export const RETRYABLE_ERROR_CODES = [\n     'ETIMEDOUT', 'ECONNRESET', 'EADDRINUSE', 'ECONNREFUSED', 'EPIPE', 'ENOTFOUND',\n     'ENETUNREACH', 'EAI_AGAIN',\n     // additional error codes we like to retry\n-    'UND_ERR_CONNECT_TIMEOUT'\n+    'UND_ERR_CONNECT_TIMEOUT', 'UND_ERR_SOCKET'\n ]\n \n export const REG_EXPS = {\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex 2923a2defa7..48c218e384e 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -552,9 +552,6 @@ importers:\n       '@originjs/vite-plugin-commonjs':\n         specifier: ^1.0.3\n         version: 1.0.3\n-      '@types/istanbul-lib-source-maps':\n-        specifier: ^4.0.4\n-        version: 4.0.4\n       '@vitest/spy':\n         specifier: ^2.0.4\n         version: 2.1.1\n@@ -612,9 +609,6 @@ importers:\n       mlly:\n         specifier: ^1.6.1\n         version: 1.7.1\n-      mocha:\n-        specifier: ^10.7.3\n-        version: 10.7.3\n       modern-node-polyfills:\n         specifier: ^1.0.0\n         version: 1.0.0(esbuild@0.24.0)(rollup@4.24.0)\n@@ -659,6 +653,9 @@ importers:\n       '@types/istanbul-lib-report':\n         specifier: ^3.0.3\n         version: 3.0.3\n+      '@types/istanbul-lib-source-maps':\n+        specifier: ^4.0.4\n+        version: 4.0.4\n       '@types/istanbul-reports':\n         specifier: ^3.0.4\n         version: 3.0.4\n@@ -668,6 +665,9 @@ importers:\n       geckodriver:\n         specifier: ^4.4.4\n         version: 4.4.4\n+      mocha:\n+        specifier: ^10.7.3\n+        version: 10.7.3\n \n   packages/wdio-browserstack-service:\n     dependencies:\n",
    "test_patch": "diff --git a/packages/wdio-browser-runner/tests/vite/utils.test.ts b/packages/wdio-browser-runner/tests/vite/utils.test.ts\nindex 049e794e0df..2ef9bb911ca 100644\n--- a/packages/wdio-browser-runner/tests/vite/utils.test.ts\n+++ b/packages/wdio-browser-runner/tests/vite/utils.test.ts\n@@ -2,7 +2,7 @@ import os from 'node:os'\n import url from 'node:url'\n import path from 'node:path'\n \n-import { describe, it, vi, expect } from 'vitest'\n+import { describe, it, vi, expect, beforeAll, afterAll } from 'vitest'\n import { resolve } from 'import-meta-resolve'\n \n import { getTemplate, userfriendlyImport, getErrorTemplate, getFilesFromDirectory } from '../../src/vite/utils.js'\n@@ -25,6 +25,14 @@ vi.mock('fakeDep', () => ({\n     default: 'I am fake'\n }))\n \n+const join = vi.spyOn(path, 'join')\n+beforeAll(() => {\n+    join.mockImplementation((...args) => `/foo/bar/${args[args.length - 1]}`)\n+})\n+afterAll(() => {\n+    join.mockRestore()\n+})\n+\n // skip for Windows\n if (os.platform() !== 'win32') {\n     describe('getTemplate', () => {\n@@ -68,6 +76,7 @@ describe('getFilesFromDirectory', () => {\n     })\n \n     it('returns all files and subfiles', async () => {\n+        join.mockRestore()\n         const files = await getFilesFromDirectory(path.join(__dirname, '..', '__fixtures__', '__mocks__'))\n         expect(files.map((f) => path.basename(f))).toEqual(['otherModule.js', 'someModule.ts'])\n     })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13781",
    "pr_id": 13781,
    "issue_id": 13776,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: switchFrame only works for bidi\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\n20.14.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\ncapabilities: [{\r\n        'wdio:enforceWebDriverClassic': true,\r\n        browserName: 'chrome'\r\n    }],\n```\n\n\n### What happened?\n\nGetting an error when trying to use switchFrame passing in something that has to be queried like a selector or url: Failed to execute WebDriver Bidi command \"browsingContextGetTree\" as no Bidi session was established. Make sure you enable it by setting \"webSocketUrl: true\" in your capabilities and verify that your environment and browser supports it.\n\n### What is your expected behavior?\n\nswitchFrame should work without bidi enabled\n\n### How to reproduce the bug.\n\nTo reproduce:\r\n\r\n1. Create a wdio project\r\n2. In wdio.conf.ts, update the capabilities to use 'wdio:enforceWebDriverClassic': true\r\n3. Add a page object for something with iframe\r\n4. Add a method that switches to the iframe using a url or frame element parameter\r\n5. Use the new method in a wdio test\r\n\r\nI have a sample repo at https://github.com/ShannonH/wdio-test-repo where I've done the above already using the same 'the-internet' app and sample code from the docs to switch to the iframe on the page using the iframe's url (it might be the wrong url, but the error happens on the query)\n\n### Relevant log output\n\n```typescript\n[chrome 130.0.6723.59 mac #0-0] Running: chrome (v130.0.6723.59) on mac\r\n[chrome 130.0.6723.59 mac #0-0] Session ID: 734f51e68eaaab8549222b10790d4726\r\n[chrome 130.0.6723.59 mac #0-0]\r\n[chrome 130.0.6723.59 mac #0-0] » /test/specs/test.e2e.ts\r\n[chrome 130.0.6723.59 mac #0-0] My Login application\r\n[chrome 130.0.6723.59 mac #0-0]    ✓ should login with valid credentials\r\n[chrome 130.0.6723.59 mac #0-0]    ✖ should switch to iframes\r\n[chrome 130.0.6723.59 mac #0-0]\r\n[chrome 130.0.6723.59 mac #0-0] 1 passing (2.1s)\r\n[chrome 130.0.6723.59 mac #0-0] 1 failing\r\n[chrome 130.0.6723.59 mac #0-0]\r\n[chrome 130.0.6723.59 mac #0-0] 1) My Login application should switch to iframes\r\n[chrome 130.0.6723.59 mac #0-0] Failed to execute WebDriver Bidi command \"browsingContextGetTree\" as no Bidi session was established. Make sure you enable it by setting \"webSocketUrl: true\" in your capabilities and verify that your environment and browser supports it.\r\n[chrome 130.0.6723.59 mac #0-0] Error: Failed to execute WebDriver Bidi command \"browsingContextGetTree\" as no Bidi session was established. Make sure you enable it by setting \"webSocketUrl: true\" in your capabilities and verify that your environment and browser supports it.\r\n[chrome 130.0.6723.59 mac #0-0]     at iFramePage.switchToFrame (/Users/shannon.harris/work/wdio-test-repo/test/pageobjects/iframe.page.ts:21:9)\r\n[chrome 130.0.6723.59 mac #0-0]     at iFramePage.assertEditorContent (/Users/shannon.harris/work/wdio-test-repo/test/pageobjects/iframe.page.ts:16:9)\r\n[chrome 130.0.6723.59 mac #0-0]     at Context.<anonymous> (/Users/shannon.harris/work/wdio-test-repo/test/specs/test.e2e.ts:18:9)\r\n\r\n\r\nSpec Files:      0 passed, 1 failed, 1 total (100% completed) in 00:00:04\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 588,
    "test_files_count": 8,
    "non_test_files_count": 18,
    "pr_changed_files": [
      "__mocks__/fetch.ts",
      "e2e/wdio/headless/test.e2e.ts",
      "packages/wdio-browser-runner/src/browser/driver.ts",
      "packages/wdio-browser-runner/tests/vite/utils.test.ts",
      "packages/wdio-cli/src/commands/config.ts",
      "packages/wdio-cli/src/commands/run.ts",
      "packages/wdio-cli/src/run.ts",
      "packages/wdio-cli/src/utils.ts",
      "packages/wdio-config/src/node/utils.ts",
      "packages/wdio-local-runner/src/worker.ts",
      "packages/wdio-spec-reporter/src/index.ts",
      "packages/webdriver/src/bidi/core.ts",
      "packages/webdriver/src/command.ts",
      "packages/webdriver/src/index.ts",
      "packages/webdriver/tests/bidi.test.ts",
      "packages/webdriver/tests/index.test.ts",
      "packages/webdriverio/src/commands/browser/switchFrame.ts",
      "packages/webdriverio/src/context.ts",
      "packages/webdriverio/src/dialog.ts",
      "packages/webdriverio/src/networkManager.ts",
      "packages/webdriverio/src/polyfill.ts",
      "packages/webdriverio/src/shadowRoot.ts",
      "packages/webdriverio/tests/commands/browser/setViewport.test.ts",
      "packages/webdriverio/tests/commands/browser/switchFrame.test.ts",
      "packages/webdriverio/tests/shadowRoot.test.ts",
      "tests/smoke.runner.js"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/test.e2e.ts",
      "packages/wdio-browser-runner/tests/vite/utils.test.ts",
      "packages/webdriver/tests/bidi.test.ts",
      "packages/webdriver/tests/index.test.ts",
      "packages/webdriverio/tests/commands/browser/setViewport.test.ts",
      "packages/webdriverio/tests/commands/browser/switchFrame.test.ts",
      "packages/webdriverio/tests/shadowRoot.test.ts",
      "tests/smoke.runner.js"
    ],
    "base_commit": "7d07432151169c9a56962fb1ccea2ad53f3c1a57",
    "head_commit": "5de1736f22f6bba1d799e156d237f64e796bf155",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13781",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13781",
    "dockerfile": "",
    "pr_merged_at": "2024-10-27T02:25:23.000Z",
    "patch": "diff --git a/__mocks__/fetch.ts b/__mocks__/fetch.ts\nindex f43174bdb75..07255921117 100644\n--- a/__mocks__/fetch.ts\n+++ b/__mocks__/fetch.ts\n@@ -1,5 +1,12 @@\n import { vi } from 'vitest'\n \n+/**\n+ * This flag helps to indicate that WebdriverIO is running in a unit test environment.\n+ * Setting this environment changes the behavior of some functions to e.g. not exit\n+ * the process or enter code sections that are hard to mock out.\n+ */\n+process.env.WDIO_UNIT_TESTS = '1'\n+\n const ELEMENT_KEY = 'element-6066-11e4-a52e-4f735466cecf'\n const SHADOW_ELEMENT_KEY = 'shadow-6066-11e4-a52e-4f735466cecf'\n \n\ndiff --git a/packages/wdio-browser-runner/src/browser/driver.ts b/packages/wdio-browser-runner/src/browser/driver.ts\nindex 2d06f992a3f..02c69e63c5a 100644\n--- a/packages/wdio-browser-runner/src/browser/driver.ts\n+++ b/packages/wdio-browser-runner/src/browser/driver.ts\n@@ -3,7 +3,6 @@ import { commands } from 'virtual:wdio'\n import { webdriverMonad, sessionEnvironmentDetector } from '@wdio/utils'\n import { getEnvironmentVars, initiateBidi, parseBidiMessage } from 'webdriver'\n import { MESSAGE_TYPES, type Workers } from '@wdio/types'\n-import { browser } from '@wdio/globals'\n import safeStringify from 'safe-stringify'\n \n /**\n@@ -27,6 +26,8 @@ interface CommandMessagePromise {\n const HIDE_REPORTER_FOR_COMMANDS = ['saveScreenshot', 'savePDF']\n const mochaFramework = document.querySelector('mocha-framework')\n let id = 0\n+let browser: WebdriverIO.Browser | undefined\n+\n export default class ProxyDriver {\n     static #commandMessages = new Map<number, CommandMessagePromise>()\n \n@@ -154,6 +155,7 @@ export default class ProxyDriver {\n             value: { cid }\n         })\n \n+        browser = client\n         return client\n     }\n \n@@ -251,6 +253,11 @@ export default class ProxyDriver {\n         if (!cid) {\n             return\n         }\n+\n+        if (!browser) {\n+            throw new Error('Could not connect to browser')\n+        }\n+\n         for (const commandName of value.customCommands) {\n             browser.addCommand(commandName, this.#getMockedCommand(commandName))\n         }\n\ndiff --git a/packages/wdio-cli/src/commands/config.ts b/packages/wdio-cli/src/commands/config.ts\nindex 40439b08986..5dad74b6324 100644\n--- a/packages/wdio-cli/src/commands/config.ts\n+++ b/packages/wdio-cli/src/commands/config.ts\n@@ -236,7 +236,7 @@ export async function missingConfigurationPrompt(command: string, configPath: st\n         console.log(`No WebdriverIO configuration found in \"${process.cwd()}\"`)\n \n         /* istanbul ignore next */\n-        return !process.env.VITEST_WORKER_ID && process.exit(0)\n+        return !process.env.WDIO_UNIT_TESTS && process.exit(0)\n     }\n \n     const parsedAnswers = await parseAnswers(false)\n\ndiff --git a/packages/wdio-cli/src/commands/run.ts b/packages/wdio-cli/src/commands/run.ts\nindex a8a1c4c96eb..73de0ea93af 100644\n--- a/packages/wdio-cli/src/commands/run.ts\n+++ b/packages/wdio-cli/src/commands/run.ts\n@@ -169,14 +169,14 @@ export async function launch(wdioConfPath: string, params: Partial<RunCommandArg\n     return launcher.run()\n         .then((...args) => {\n             /* istanbul ignore if */\n-            if (!process.env.VITEST_WORKER_ID) {\n+            if (!process.env.WDIO_UNIT_TESTS) {\n                 process.exit(...args)\n             }\n         })\n         .catch(err => {\n             console.error(err)\n             /* istanbul ignore if */\n-            if (!process.env.VITEST_WORKER_ID) {\n+            if (!process.env.WDIO_UNIT_TESTS) {\n                 process.exit(1)\n             }\n         })\n@@ -251,7 +251,7 @@ export async function handler(argv: RunCommandArguments) {\n                 NODE_OPTIONS\n             }\n         })\n-        return !process.env.VITEST_WORKER_ID && process.exit(p.exitCode)\n+        return !process.env.WDIO_UNIT_TESTS && process.exit(p.exitCode)\n     }\n \n     /**\n\ndiff --git a/packages/wdio-cli/src/run.ts b/packages/wdio-cli/src/run.ts\nindex 3a19e39a139..514f0ffe476 100644\n--- a/packages/wdio-cli/src/run.ts\n+++ b/packages/wdio-cli/src/run.ts\n@@ -75,8 +75,12 @@ export default async function run() {\n         )\n \n         console.error(`${output}\\n\\n${err.stack}`)\n+\n+        /**\n+         * only exit process if we are run by a user and not running unit tests\n+         */\n         /* istanbul ignore if */\n-        if (!process.env.VITEST_WORKER_ID) {\n+        if (!process.env.WDIO_UNIT_TESTS) {\n             process.exit(1)\n         }\n     }\n\ndiff --git a/packages/wdio-cli/src/utils.ts b/packages/wdio-cli/src/utils.ts\nindex e37e6cda098..235dd986d91 100644\n--- a/packages/wdio-cli/src/utils.ts\n+++ b/packages/wdio-cli/src/utils.ts\n@@ -701,7 +701,7 @@ export async function createPackageJSON(parsedAnswers: ParsedAnswers) {\n         /* istanbul ignore if */\n         if (!packageJsonExists) {\n             console.log(`No WebdriverIO configuration found in \"${parsedAnswers.wdioConfigPath}\"`)\n-            return !process.env.VITEST_WORKER_ID && process.exit(0)\n+            return !process.env.WDIO_UNIT_TESTS && process.exit(0)\n         }\n         return\n     }\n\ndiff --git a/packages/wdio-config/src/node/utils.ts b/packages/wdio-config/src/node/utils.ts\nindex b177bac28de..285534f1d56 100644\n--- a/packages/wdio-config/src/node/utils.ts\n+++ b/packages/wdio-config/src/node/utils.ts\n@@ -22,7 +22,7 @@ export async function loadTypeScriptCompiler (tsConfigPath?: string) {\n         /**\n          * only for testing purposes\n          */\n-        if (process.env.VITEST_WORKER_ID && process.env.THROW_TSX_RESOLVE) {\n+        if (process.env.WDIO_UNIT_TESTS && process.env.THROW_TSX_RESOLVE) {\n             throw new Error('test fail')\n         }\n         const loaderPath = await resolve('tsx', import.meta.url)\n\ndiff --git a/packages/wdio-local-runner/src/worker.ts b/packages/wdio-local-runner/src/worker.ts\nindex 133d2d5bd22..cf811bd3e6e 100644\n--- a/packages/wdio-local-runner/src/worker.ts\n+++ b/packages/wdio-local-runner/src/worker.ts\n@@ -134,7 +134,7 @@ export default class WorkerInstance extends EventEmitter implements Workers.Work\n         childProcess.on('exit', this._handleExit.bind(this))\n \n         /* istanbul ignore if */\n-        if (!process.env.VITEST_WORKER_ID) {\n+        if (!process.env.WDIO_UNIT_TESTS) {\n             if (childProcess.stdout !== null) {\n                 if (this.config.groupLogsByTestSpec) {\n                     // Test spec logs are collected only from child stdout stream\n\ndiff --git a/packages/wdio-spec-reporter/src/index.ts b/packages/wdio-spec-reporter/src/index.ts\nindex 9bdfcaed068..1d92111c8ae 100644\n--- a/packages/wdio-spec-reporter/src/index.ts\n+++ b/packages/wdio-spec-reporter/src/index.ts\n@@ -170,7 +170,7 @@ export default class SpecReporter extends WDIOReporter {\n          *   - there is content to send\n          *   - we are not running a unit test\n          */\n-        if (process.send && content && !process.env.VITEST_WORKER_ID) {\n+        if (process.send && content && !process.env.WDIO_UNIT_TESTS) {\n             process.send({ name: 'reporterRealTime', content })\n         }\n     }\n\ndiff --git a/packages/webdriver/src/bidi/core.ts b/packages/webdriver/src/bidi/core.ts\nindex 4a9e1d624bc..49abd0ef0da 100644\n--- a/packages/webdriver/src/bidi/core.ts\n+++ b/packages/webdriver/src/bidi/core.ts\n@@ -15,6 +15,7 @@ export class BidiCore {\n     #id = 0\n     #ws: WebSocket\n     #isConnected = false\n+    #waitForConnected = Promise.resolve()\n     #webSocketUrl: string\n     #pendingCommands: Map<number, (value: CommandResponse) => void> = new Map()\n \n@@ -32,14 +33,24 @@ export class BidiCore {\n          * don't connect and stale unit tests when the websocket url is set to a dummy value\n          * Note: the value is defined in __mocks__/fetch.ts\n          */\n-        if (process.env.VITEST_WORKER_ID && this.#webSocketUrl === 'ws://webdriver.io') {\n+        if (process.env.WDIO_UNIT_TESTS) {\n             return\n         }\n-        return new Promise<void>((resolve) => this.#ws.on('open', () => {\n+\n+        this.#waitForConnected = new Promise<void>((resolve) => this.#ws.on('open', () => {\n             log.info('Connected session to Bidi protocol')\n             this.#isConnected = true\n             resolve()\n         }))\n+        return this.#waitForConnected\n+    }\n+\n+    /**\n+     * Helper function that allows to wait until Bidi connection establishes\n+     * @returns a promise that resolves once the connection to WebDriver Bidi protocol was established\n+     */\n+    waitForConnected () {\n+        return this.#waitForConnected\n     }\n \n     get socket () {\n\ndiff --git a/packages/webdriver/src/command.ts b/packages/webdriver/src/command.ts\nindex 47756317be6..6565fa9cb01 100644\n--- a/packages/webdriver/src/command.ts\n+++ b/packages/webdriver/src/command.ts\n@@ -34,8 +34,12 @@ export default function (\n \n         /**\n          * log deprecation warning if command is deprecated\n+         *\n+         * Note: there are situations where we have to use deprecated commands, e.g. `switchToFrame`\n+         * internally where we don't want to have the message shown to the user. In these cases we\n+         * use the `DISABLE_WEBDRIVERIO_DEPRECATION_WARNINGS` env variable to suppress the message.\n          */\n-        if (typeof deprecated === 'string') {\n+        if (typeof deprecated === 'string' && !process.env.DISABLE_WEBDRIVERIO_DEPRECATION_WARNINGS) {\n             const warning = deprecated.replace('This command', `The \"${command}\" command`)\n             log.warn(warning)\n             console.warn(`⚠️ [WEBDRIVERIO DEPRECATION NOTICE] ${warning}`)\n\ndiff --git a/packages/webdriver/src/index.ts b/packages/webdriver/src/index.ts\nindex 84f78d3f4b6..5ee231a7fad 100644\n--- a/packages/webdriver/src/index.ts\n+++ b/packages/webdriver/src/index.ts\n@@ -69,8 +69,10 @@ export default class WebDriver {\n          * parse and propagate all Bidi events to the browser instance\n          */\n         if (isBidi(requestedCapabilities, capabilities)) {\n-            // make sure the Bidi connection is established before returning\n-            await client._bidiHandler.connect()\n+            /**\n+             * make sure the Bidi connection is established before returning\n+             */\n+            await client._bidiHandler.waitForConnected()\n             client._bidiHandler.socket.on('message', parseBidiMessage.bind(client))\n         }\n \n\ndiff --git a/packages/webdriverio/src/commands/browser/switchFrame.ts b/packages/webdriverio/src/commands/browser/switchFrame.ts\nindex 364e311fde7..1ec29a94b2f 100644\n--- a/packages/webdriverio/src/commands/browser/switchFrame.ts\n+++ b/packages/webdriverio/src/commands/browser/switchFrame.ts\n@@ -1,9 +1,15 @@\n-import { type local } from 'webdriver'\n+import logger from '@wdio/logger'\n+import { ELEMENT_KEY, type local, type remote } from 'webdriver'\n+import type { ElementReference } from '@wdio/protocols'\n \n import { getContextManager } from '../../context.js'\n+import { LocalValue } from '../../utils/bidi/value.js'\n+import { parseScriptResult } from '../../utils/bidi/index.js'\n+import { SCRIPT_PREFIX, SCRIPT_SUFFIX } from '../constant.js'\n import type { ChainablePromiseElement } from '../../types.js'\n \n type FlatContextTree = Omit<local.BrowsingContextInfo, 'children'> & { children: string[] }\n+const log = logger('webdriverio:switchFrame')\n \n /**\n  * Switches the active context to a frame, e.g. an iframe on the page. There are multiple ways you can query a frame\n@@ -11,8 +17,18 @@ type FlatContextTree = Omit<local.BrowsingContextInfo, 'children'> & { children:\n  *\n  *   - If given a string it switches to the frame with a matching context id, url or url that contains that string\n  *     ```ts\n- *     // switch to a frame that has the url \"https://the-internet.herokuapp.com/iframe\"\n- *     await browser.switchFrame('https://the-internet.herokuapp.com/iframe')\n+ *     // switch to a frame that has a specific url or contains a string in the url\n+ *     await browser.url('https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_iframe')\n+ *     // Note: this frame is located in a nested iframe, however you only need to provide\n+ *     // the frame url of your desired frame\n+ *     await browser.switchFrame('https://www.w3schools.com')\n+ *     // check the title of the page\n+ *     console.log(await browser.execute(() => [document.title, document.URL]))\n+ *     // outputs: [ 'W3Schools Online Web Tutorials', 'https://www.w3schools.com/' ]\n+ *     ```\n+ *\n+ *   - If you have the context id of the frame you can use it directly\n+ *     ```ts\n  *     // switch to a frame that has a certain context id\n  *     await browser.switchFrame('A5734774C41F8C91D483BDD4022B2EF3')\n  *     ```\n@@ -23,12 +39,14 @@ type FlatContextTree = Omit<local.BrowsingContextInfo, 'children'> & { children:\n  *     await browser.switchFrame($('iframe'))\n  *     ```\n  *\n- *   - If given a function it will loop through all iframes on the page and call the function with the context\n- *     object. The function should return a boolean indicating if the frame should be selected. Within the function\n- *     you can use WebdriverIO commands to e.g. check if a certain frame element exists.\n+ *   - If given a function it will loop through all iframes on the page and call the function within the context\n+ *     object. The function should return a boolean indicating if the frame should be selected. The function\n+ *     will be executed within the browser and allows access to all Web APIs, e.g.:\n  *     ```ts\n  *     // switch to first frame that contains an element with id \"#frameContent\"\n- *     await browser.switchFrame(() => $('#frameContent').isExisting())\n+ *     await browser.switchFrame(() => Boolean(document.querySelector('#frameContent')))\n+ *     // switch to first frame that contains \"webdriver\" in the URL\n+ *     await browser.switchFrame(() => document.URL.includes('webdriver'))\n  *     ```\n  *\n  *   - If given `null` it will switch to the top level frame\n@@ -41,6 +59,9 @@ type FlatContextTree = Omit<local.BrowsingContextInfo, 'children'> & { children:\n  *     await browser.switchFrame(null)\n  *     ```\n  *\n+ * Once you switched to a frame, all further commands will be executed in the context of that frame,\n+ * including navigating to different pages.\n+ *\n  * @alias browser.switchFrame\n  * @param {string|object|function} context\n  * @returns {Promise<string>} the current active context id\n@@ -49,77 +70,219 @@ export async function switchFrame (\n     this: WebdriverIO.Browser,\n     context: WebdriverIO.Element | ChainablePromiseElement | string | null | ((tree: FlatContextTree) => boolean | Promise<boolean>)\n ) {\n+    /**\n+     * Check if Bidi is supported, if not, just use the WebDriver Classic `switchToFrame`\n+     */\n+    if (!this.isBidi) {\n+        if (typeof context === 'function') {\n+            throw new Error('Cannot use a function to fetch a context in WebDriver Classic')\n+        }\n+        if (typeof context === 'string') {\n+            throw new Error('Cannot use a string to fetch a context in WebDriver Classic')\n+        }\n+        return switchToFrame(this, context)\n+    }\n+\n     /**\n      * if context is `null` the user is switching to the top level frame\n      * which is always represented by the value of `getWindowHandle`\n      */\n     if (context === null) {\n         const handle = await this.getWindowHandle()\n-        await switchToFrameHelper(this, handle)\n+        switchToFrameHelper(this, handle)\n+        await switchToFrame(this, context)\n         return handle\n     }\n \n+    /**\n+     * if context is a string the user is trying to switch to a frame\n+     * that has a url that matches the string or a context id that matches\n+     * the string.\n+     */\n     if (typeof context === 'string') {\n         const tree = await this.browsingContextGetTree({})\n-        const urlContext = findContext(context, tree.contexts, byUrl)?.context\n+        let newContextId: string | undefined\n+\n+        const urlContext = (\n+            findContext(context, tree.contexts, byUrl) ||\n+            /**\n+             * In case the user provides an url without `/` at the end, e.g. `https://example.com`,\n+             * the `browsingContextGetTree` command may return a context with the url `https://example.com/`.\n+             */\n+            findContext(`${context}/`, tree.contexts, byUrl)\n+        )\n+        const urlContextContaining = findContext(context, tree.contexts, byUrlContaining)\n+        const contextIdContext = findContext(context, tree.contexts, byContextId)\n         if (urlContext) {\n-            await switchToFrameHelper(this, urlContext)\n-            return urlContext\n+            log.info(`Found context by url \"${urlContext.url}\" with context id \"${urlContext.context}\"`)\n+            newContextId = urlContext.context\n+        } else if (urlContextContaining) {\n+            log.info(`Found context by url containing \"${urlContextContaining.url}\" with context id \"${urlContextContaining.context}\"`)\n+            newContextId = urlContextContaining.context\n+        } else if (contextIdContext) {\n+            log.info(`Found context by id \"${contextIdContext}\" with url \"${contextIdContext.url}\"`)\n+            newContextId = contextIdContext.context\n+        }\n+\n+        if (!newContextId) {\n+            throw new Error(`No frame with url or id \"${context}\" found!`)\n+        }\n+\n+        const sessionContext = getContextManager(this)\n+        const currentContext = await sessionContext.getCurrentContext()\n+        const allContexts = await getFlatContextTree(this)\n+\n+        /**\n+         * Fetch all iframes located in any available frame\n+         */\n+        const allFrames = (await Promise.all(Object.keys(allContexts).map(async (id) => {\n+            /**\n+             * first, fetch all iframes in given browsing context\n+             */\n+            const { nodes } = await this.browsingContextLocateNodes({\n+                locator: { type: 'css', value: 'iframe, frame' },\n+                context: id\n+            }).catch(() => ({ nodes: [] }))\n+\n+            /**\n+             * For every iframe located in a browsing context, identify its context id\n+             * by calling a user script that fetches the content window of the iframe.\n+             */\n+            return Promise.all(nodes.map(async (node) => {\n+                const html = `<iframe${Object.entries(node.value?.attributes || {}).reduce((acc, [key, value]) => `${acc} ${key}=\"${value}\"`, ' ')}></iframe>`\n+                const args = [{ [ELEMENT_KEY]: node.sharedId }]\n+                const userScript = (iframe: unknown) => (iframe as HTMLIFrameElement).contentWindow\n+                const functionDeclaration = new Function(`\n+                    return (${SCRIPT_PREFIX}${userScript.toString()}${SCRIPT_SUFFIX}).apply(this, arguments);\n+                `).toString()\n+                const params: remote.ScriptCallFunctionParameters = {\n+                    functionDeclaration,\n+                    awaitPromise: false,\n+                    arguments: args.map((arg) => LocalValue.getArgument(arg)) as any,\n+                    target: { context: id }\n+                }\n+\n+                const result = await this.scriptCallFunction(params).catch((err) => (\n+                    log.warn(`Failed to identify frame context id: ${err.message}`)))\n+\n+                /**\n+                 * if the script for some reason throws an error, return an empty array\n+                 * which just gets flattened and removed from the list\n+                 */\n+                if (!result) {\n+                    return [] as FrameResult[]\n+                }\n+\n+                const { context } = parseScriptResult(params, result) as { context: string }\n+\n+                /**\n+                 * return all useful information we need to switch to the frame\n+                 */\n+                return {\n+                    /**\n+                     * the actual frame context we need to switch WebDriver Bidi commands to\n+                     */\n+                    context,\n+                    /**\n+                     * the element reference of the iframe so we can call `switchToFrame` to\n+                     * switch context for WebDriver Classic commands\n+                     */\n+                    frameElement: { [ELEMENT_KEY]: node.sharedId },\n+                    /**\n+                     * the context id in which the iframe was found\n+                     */\n+                    parentContext: id,\n+                    /**\n+                     * an HTML representation of the iframe for a good error message in case\n+                     * we can't find the desired frame from this list\n+                     */\n+                    html,\n+                } as FrameResult\n+            }))\n+        }))).flat(Infinity) as FrameResult[]\n+\n+        /**\n+         * Our desired frame may be somewhere nested in other frames. In order to properly\n+         * switch to it, we need to ensure we switch into all nested frames first.\n+         */\n+        let desiredFrame: FrameResult | undefined\n+        let desiredContext = newContextId\n+        const contextQueue: FrameResult[] = []\n+        log.info(`Available frames to switch to: ${allFrames.length}, desired context to switch: ${desiredContext}`)\n+        while (desiredContext !== currentContext) {\n+            desiredFrame = allFrames.find(({ context }) => context === desiredContext)\n+            if (!desiredFrame) {\n+                break\n+            }\n+\n+            log.info(contextQueue.length === 0\n+                ? `Found desired frame with element id ${desiredFrame.frameElement[ELEMENT_KEY]}`\n+                : `to switch to desired frame, we need to switch to ${desiredFrame.context} first`\n+            )\n+\n+            /**\n+             * call `unshift` so our desired frame comes last in the queue\n+             */\n+            contextQueue.unshift(desiredFrame)\n+            desiredContext = desiredFrame.parentContext\n         }\n \n-        const urlContextContaining = findContext(context, tree.contexts, byUrlContaining)?.context\n-        if (urlContextContaining) {\n-            await switchToFrameHelper(this, urlContextContaining)\n-            return urlContextContaining\n+        if (contextQueue.length === 0) {\n+            throw new Error(`Frame with url or context id \"${context}\" not found, available frames to switch to:\\n  - ${allFrames.map(({ html }) => html).join('\\n  - ')}`)\n         }\n \n-        const contextIdContext = findContext(context, tree.contexts, byContextId)?.context\n-        if (contextIdContext) {\n-            await switchToFrameHelper(this, contextIdContext)\n-            return contextIdContext\n+        /**\n+         * The `contextQueue` contains all frames we have to switch to in order to\n+         * get to the desired frame. We switch to each frame in the queue and then\n+         * switch to the desired frame at the end.\n+         */\n+        for (const contextToSwitch of contextQueue) {\n+            switchToFrameHelper(this, contextToSwitch.context)\n+            await switchToFrame(this, contextToSwitch.frameElement)\n         }\n \n-        throw new Error(`Frame with url or context id \"${context}\" not found`)\n+        return newContextId\n     }\n \n     /**\n-     * we are dealing with a WebdriverIO element\n+     * If given context is a WebdriverIO.Element the user wants to switch to an iframe\n+     * that was previously queried.\n      */\n     if (typeof context === 'object' && typeof (context as WebdriverIO.Element).getElement === 'function') {\n         const element = await context.getElement()\n         return switchToFrameUsingElement(this, element)\n     }\n \n+    /**\n+     * If given context is a function, the user wants to switch to an iframe in which\n+     * the function returns `true`. We loop through all iframes on the page and call\n+     * the function for each of them.\n+     */\n     if (typeof context === 'function') {\n-        const tree = await this.browsingContextGetTree({})\n-        const mapContext = (context: local.BrowsingContextInfo): any => [\n-            context.context,\n-            ...(context.children || []).map(mapContext)\n-        ]\n-        const sessionContext = getContextManager(this)\n-        const currentContext = await sessionContext.getCurrentContext()\n+        const allContexts = await getFlatContextTree(this)\n+        const allContextIds = Object.keys(allContexts)\n+        for (const contextId of allContextIds) {\n+            const functionDeclaration = new Function(`\n+                return (${SCRIPT_PREFIX}${context.toString()}${SCRIPT_SUFFIX}).apply(this, arguments);\n+            `).toString()\n+            const params: remote.ScriptCallFunctionParameters = {\n+                functionDeclaration,\n+                awaitPromise: false,\n+                arguments: [],\n+                target: { context: contextId }\n+            }\n \n-        /**\n-         * transform context tree into a flat list of context objects with references\n-         * to children\n-         */\n-        const allContexts: Record<string, FlatContextTree> = tree.contexts.map(mapContext).flat(Infinity)\n-            .filter((ctx) => ctx !== currentContext)\n-            .reduce((acc, ctx) => {\n-                const context = findContext(ctx, tree.contexts, byContextId)\n-                acc[ctx] = context\n-                return acc\n-            }, {} as Record<string, FlatContextTree>)\n-\n-        for (const [contextId, ctx] of Object.entries(allContexts)) {\n-            sessionContext.setCurrentContext(contextId)\n-            const isDesiredFrame = await context(ctx)\n-            if (isDesiredFrame) {\n-                return context\n+            const result = await this.scriptCallFunction(params).catch((err) => (\n+                log.warn(`switchFrame context callback threw error: ${err.message}`)))\n+\n+            if (!result || result.type !== 'success' || result.result.type !== 'boolean' || !result.result.value) {\n+                continue\n             }\n+\n+            await this.switchFrame(contextId)\n+            return contextId\n         }\n \n-        sessionContext.setCurrentContext(currentContext)\n         throw new Error('Could not find the desired frame')\n     }\n \n@@ -129,42 +292,30 @@ export async function switchFrame (\n     )\n }\n \n+interface FrameResult {\n+    context: string\n+    parentContext: string\n+    frameElement: { [ELEMENT_KEY]: string }\n+    html: string\n+}\n+\n function switchToFrameHelper (browser: WebdriverIO.Browser, context: string) {\n     const sessionContext = getContextManager(browser)\n     sessionContext.setCurrentContext(context)\n }\n \n async function switchToFrameUsingElement (browser: WebdriverIO.Browser, element: WebdriverIO.Element) {\n-    let frameSrc = await element.getAttribute('src')\n-    if (!frameSrc) {\n-        const source = await element.getHTML({ includeSelectorTag: true })\n-        throw new Error(\n-            `The provided frame element (\"${source}\") does not have a src attribute needed ` +\n-            'to detect the context, please use a different method to select the frame. For more ' +\n-            'information checkout our docs: https://webdriver.io/docs/api/browser/switchFrame.html'\n-        )\n-    }\n-\n-    if (!frameSrc.startsWith('http')) {\n-        /**\n-         * use the browser to access `URL.parse` as it is not available in Node.js until v22\n-         */\n-        frameSrc = await browser.execute((urlPath: string) => (\n-            URL.parse(urlPath, window.location.href)?.href\n-        ), frameSrc) || frameSrc\n-    }\n+    // await switchToFrame(browser, element)\n+    const frame = await browser.execute(\n+        (iframe: unknown) => (iframe as HTMLIFrameElement).contentWindow,\n+        element\n+    ) as unknown as { context: string }\n \n-    const tree = await browser.browsingContextGetTree({})\n-    const urlContext = findContext(frameSrc, tree.contexts, byUrl)?.context\n-    if (!urlContext) {\n-        throw new Error(\n-            `Frame with url \"${frameSrc}\" not found! Please try a different method to select ` +\n-            'the frame. For more information checkout our docs: https://webdriver.io/docs/api/browser/switchFrame.html'\n-        )\n-    }\n+    switchToFrameHelper(browser, frame.context)\n \n-    await switchToFrameHelper(browser, urlContext)\n-    return urlContext\n+    const elementId = element[ELEMENT_KEY]\n+    await switchToFrame(browser, { [ELEMENT_KEY]: elementId })\n+    return frame.context\n }\n \n function byUrl (context: local.BrowsingContextInfo, url: string) {\n@@ -180,17 +331,17 @@ function byContextId (context: local.BrowsingContextInfo, contextId: string) {\n }\n \n function findContext (\n-    url: string,\n+    urlOrId: string,\n     contexts: local.BrowsingContextInfoList | null,\n     matcher: typeof byUrl | typeof byUrlContaining | typeof byContextId\n ): local.BrowsingContextInfo | undefined {\n     for (const context of contexts || []) {\n-        if (matcher(context, url)) {\n+        if (matcher(context, urlOrId)) {\n             return context\n         }\n \n         if (Array.isArray(context.children) && context.children.length > 0) {\n-            const result = findContext(url, context.children, matcher)\n+            const result = findContext(urlOrId, context.children, matcher)\n             if (result) {\n                 return result\n             }\n@@ -199,3 +350,37 @@ function findContext (\n \n     return undefined\n }\n+\n+async function getFlatContextTree (browser: WebdriverIO.Browser): Promise<Record<string, FlatContextTree>> {\n+    const tree = await browser.browsingContextGetTree({})\n+\n+    const mapContext = (context: local.BrowsingContextInfo): any => [\n+        context.context,\n+        ...(context.children || []).map(mapContext)\n+    ]\n+\n+    /**\n+     * transform context tree into a flat list of context objects with references\n+     * to children\n+     */\n+    const allContexts: Record<string, FlatContextTree> = tree.contexts.map(mapContext).flat(Infinity)\n+        .reduce((acc, ctx) => {\n+            const context = findContext(ctx, tree.contexts, byContextId)\n+            acc[ctx] = context\n+            return acc\n+        }, {} as Record<string, FlatContextTree>)\n+    return allContexts\n+}\n+\n+/**\n+ * While we deprecated the `switchToFrame` command for users, we still\n+ * have to use it internally to enable support for WebDriver Classic.\n+ * In order to avoid unnecessary deprecation warnings, we disable the\n+ * deprecation message by setting a flag in the environment variable.\n+ */\n+function switchToFrame (browser: WebdriverIO.Browser, frame: ElementReference | number | null) {\n+    process.env.DISABLE_WEBDRIVERIO_DEPRECATION_WARNINGS = 'true'\n+    return browser.switchToFrame(frame).finally(() => {\n+        delete process.env.DISABLE_WEBDRIVERIO_DEPRECATION_WARNINGS\n+    })\n+}\n\ndiff --git a/packages/webdriverio/src/context.ts b/packages/webdriverio/src/context.ts\nindex 9f4b0809813..faba8006eb8 100644\n--- a/packages/webdriverio/src/context.ts\n+++ b/packages/webdriverio/src/context.ts\n@@ -1,8 +1,4 @@\n-import { type local } from 'webdriver'\n-import logger from '@wdio/logger'\n-\n const contextManager = new Map<WebdriverIO.Browser, ContextManager>()\n-const log = logger('webdriverio:ContextManager')\n \n export function getContextManager(browser: WebdriverIO.Browser) {\n     const existingContextManager = contextManager.get(browser)\n@@ -22,65 +18,64 @@ export function getContextManager(browser: WebdriverIO.Browser) {\n  */\n export class ContextManager {\n     #browser: WebdriverIO.Browser\n-    #initialize: Promise<boolean>\n     #currentContext?: string\n \n     constructor(browser: WebdriverIO.Browser) {\n         this.#browser = browser\n \n         /**\n-         * don't run setup when Bidi is not supported or running unit tests\n+         * just ignore if we run unit tests that don't have a listener mock\n          */\n-        if (!browser.isBidi || process.env.VITEST_WORKER_ID || browser.options?.automationProtocol !== 'webdriver') {\n-            this.#initialize = Promise.resolve(true)\n+        if (process.env.WDIO_UNIT_TESTS) {\n             return\n         }\n \n-        /**\n-         * listen on required bidi events\n-         */\n-        this.#initialize = this.#browser.sessionSubscribe({\n-            events: ['browsingContext.navigationStarted']\n-        }).then(() => true, () => false)\n-        this.#browser.on('browsingContext.navigationStarted', this.#handleNavigationStarted.bind(this))\n         /**\n          * Listens for the 'switchToWindow' browser command to handle context changes.\n          * Updates the browsingContext with the context passed in 'switchToWindow'.\n          */\n         this.#browser.on('command', (event) => {\n+            /**\n+             * update frame context if user switches using 'switchToWindow'\n+             * which is WebDriver Classic only\n+             */\n             if (event.command === 'switchToWindow') {\n                 this.setCurrentContext(event.body.handle)\n             }\n-        })\n-    }\n \n-    async initialize () {\n-        return this.#initialize\n+            /**\n+             * reset current context if user uses 'switchToParentFrame' which\n+             * only impacts WebDriver Classic commands\n+             */\n+            if (event.command === 'switchToParentFrame') {\n+                this.#currentContext = undefined\n+            }\n+        })\n     }\n \n     /**\n-     * We use this handler to observe the current context which is used to navigate to a certain url.\n-     * This is most likely the context that the user is using. However if a frame was loaded on the page\n-     * then this handler is triggered with the context of the frame. To find out which context we are in\n-     * we use the `getWindowHandle` method to validate our assumption before setting the `#currentContext`\n-     * value.\n-     *\n-     * @param {local.BrowsingContextNavigationInfo} context  browsing context used to navigate\n+     * set context at the start of the session\n      */\n-    async #handleNavigationStarted (context: local.BrowsingContextNavigationInfo) {\n-        const windowHandle = await this.#browser.getWindowHandle()\n-        if (context.context === windowHandle && context.url !== 'UNKNOWN') {\n-            log.info(`Update current context: ${context.context}`)\n-            this.#currentContext = context.context\n+    async initialize () {\n+        /**\n+         * just ignore in unit tests where we don't mock `getWindowHandle`\n+         */\n+        if (process.env.WDIO_UNIT_TESTS) {\n+            return 'fake-context'\n         }\n+\n+        const windowHandle = await this.#browser.getWindowHandle()\n+        this.#currentContext = windowHandle\n+        return windowHandle\n     }\n+\n     setCurrentContext (context: string) {\n         this.#currentContext = context\n     }\n \n     async getCurrentContext () {\n         if (!this.#currentContext) {\n-            this.#currentContext = await this.#browser.getWindowHandle()\n+            return this.initialize()\n         }\n         return this.#currentContext\n     }\n\ndiff --git a/packages/webdriverio/src/dialog.ts b/packages/webdriverio/src/dialog.ts\nindex dee68f249ae..06285063a70 100644\n--- a/packages/webdriverio/src/dialog.ts\n+++ b/packages/webdriverio/src/dialog.ts\n@@ -29,7 +29,7 @@ export class DialogManager {\n         /**\n          * don't run setup when Bidi is not supported or running unit tests\n          */\n-        if (!browser.isBidi || process.env.VITEST_WORKER_ID || browser.options?.automationProtocol !== 'webdriver') {\n+        if (!browser.isBidi || process.env.WDIO_UNIT_TESTS || browser.options?.automationProtocol !== 'webdriver') {\n             this.#initialize = Promise.resolve(true)\n             return\n         }\n\ndiff --git a/packages/webdriverio/src/networkManager.ts b/packages/webdriverio/src/networkManager.ts\nindex b30ab7c0ce7..b68f97aba26 100644\n--- a/packages/webdriverio/src/networkManager.ts\n+++ b/packages/webdriverio/src/networkManager.ts\n@@ -33,7 +33,7 @@ export class NetworkManager {\n         /**\n          * don't run setup when Bidi is not supported or running unit tests\n          */\n-        if (!browser.isBidi || browser.options?.automationProtocol !== 'webdriver') {\n+        if (!browser.isBidi || process.env.WDIO_UNIT_TESTS || browser.options?.automationProtocol !== 'webdriver') {\n             this.#initialize = Promise.resolve(true)\n             return\n         }\n\ndiff --git a/packages/webdriverio/src/polyfill.ts b/packages/webdriverio/src/polyfill.ts\nindex bca3d93244c..412989aa830 100644\n--- a/packages/webdriverio/src/polyfill.ts\n+++ b/packages/webdriverio/src/polyfill.ts\n@@ -31,7 +31,7 @@ export class PolyfillManager {\n         /**\n          * don't run setup when Bidi is not supported or running unit tests\n          */\n-        if (!browser.isBidi || process.env.VITEST_WORKER_ID || browser.options?.automationProtocol !== 'webdriver') {\n+        if (!browser.isBidi || process.env.WDIO_UNIT_TESTS || browser.options?.automationProtocol !== 'webdriver') {\n             this.#initialize = Promise.resolve(true)\n             return\n         }\n\ndiff --git a/packages/webdriverio/src/shadowRoot.ts b/packages/webdriverio/src/shadowRoot.ts\nindex 4a191ad379d..e2b0ef825ae 100644\n--- a/packages/webdriverio/src/shadowRoot.ts\n+++ b/packages/webdriverio/src/shadowRoot.ts\n@@ -35,7 +35,7 @@ export class ShadowRootManager {\n         /**\n          * don't run setup when Bidi is not supported or running unit tests\n          */\n-        if (!browser.isBidi || process.env.VITEST_WORKER_ID || browser.options?.automationProtocol !== 'webdriver') {\n+        if (!browser.isBidi || process.env.WDIO_UNIT_TESTS || browser.options?.automationProtocol !== 'webdriver') {\n             this.#initialize = Promise.resolve(true)\n             return\n         }\n",
    "test_patch": "diff --git a/e2e/wdio/headless/test.e2e.ts b/e2e/wdio/headless/test.e2e.ts\nindex 283614f8ffd..e538e76cc8b 100644\n--- a/e2e/wdio/headless/test.e2e.ts\n+++ b/e2e/wdio/headless/test.e2e.ts\n@@ -3,8 +3,6 @@ import { browser, $, expect } from '@wdio/globals'\n import os from 'node:os'\n \n describe('main suite 1', () => {\n-    afterEach(() => browser.setViewport({ width: 1200, height: 900 }))\n-\n     it('supports snapshot testing', async () => {\n         await browser.url('http://guinea-pig.webdriver.io/')\n         await expect($('.findme')).toMatchSnapshot()\n@@ -56,7 +54,7 @@ describe('main suite 1', () => {\n         })\n \n         after(async () => {\n-            await browser.setViewport({ width: 900, height: 600 })\n+            await browser.setViewport({ width: 1200, height: 900 })\n         })\n     })\n \n@@ -434,6 +432,17 @@ describe('main suite 1', () => {\n     })\n \n     describe('context management', () => {\n+        const closeAllWindowsButFirst = async () => {\n+            const allHandles = await browser.getWindowHandles()\n+\n+            if (allHandles.length < 2) {return}\n+            for (const windowHandle of allHandles.slice(1)) {\n+                await browser.switchToWindow(windowHandle)\n+                await browser.closeWindow()\n+            }\n+            await browser.switchToWindow(allHandles[0])\n+        }\n+\n         it('should allow user to switch between contexts', async () => {\n             await browser.url('http://guinea-pig.webdriver.io/')\n \n@@ -479,14 +488,30 @@ describe('main suite 1', () => {\n         })\n     })\n \n-    const closeAllWindowsButFirst = async () => {\n-        const allHandles = await browser.getWindowHandles()\n+    describe('switchFrame', () => {\n+        afterEach(async () => {\n+            await browser.switchFrame(null)\n+        })\n \n-        if (allHandles.length < 2) {return}\n-        for (const windowHandle of allHandles.slice(1)) {\n-            await browser.switchToWindow(windowHandle)\n-            await browser.closeWindow()\n-        }\n-        await browser.switchToWindow(allHandles[0])\n-    }\n+        it('can switch to a frame via url', async () => {\n+            await browser.url('https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_iframe')\n+            await browser.switchFrame('https://www.w3schools.com')\n+            expect(await browser.execute(() => [document.title, document.URL]))\n+                .toEqual(['W3Schools Online Web Tutorials', 'https://www.w3schools.com/'])\n+        })\n+\n+        it('can switch to a frame via element', async () => {\n+            await browser.url('https://the-internet.herokuapp.com/nested_frames')\n+            await browser.switchFrame($('frame'))\n+            expect(await browser.execute(() => document.URL))\n+                .toBe('https://the-internet.herokuapp.com/frame_top')\n+        })\n+\n+        it('can switch to a frame via function', async () => {\n+            await browser.url('https://the-internet.herokuapp.com/nested_frames')\n+            await browser.switchFrame(() => document.URL.includes('frame_right'))\n+            expect(await browser.execute(() => document.URL))\n+                .toBe('https://the-internet.herokuapp.com/frame_right')\n+        })\n+    })\n })\n\ndiff --git a/packages/wdio-browser-runner/tests/vite/utils.test.ts b/packages/wdio-browser-runner/tests/vite/utils.test.ts\nindex 2ef9bb911ca..170d89e023c 100644\n--- a/packages/wdio-browser-runner/tests/vite/utils.test.ts\n+++ b/packages/wdio-browser-runner/tests/vite/utils.test.ts\n@@ -1,3 +1,4 @@\n+import type fs from 'node:fs'\n import os from 'node:os'\n import url from 'node:url'\n import path from 'node:path'\n\ndiff --git a/packages/webdriver/tests/bidi.test.ts b/packages/webdriver/tests/bidi.test.ts\nindex ec368c82601..b0b619dedf6 100644\n--- a/packages/webdriver/tests/bidi.test.ts\n+++ b/packages/webdriver/tests/bidi.test.ts\n@@ -1,5 +1,5 @@\n import path from 'node:path'\n-import { describe, it, vi, expect } from 'vitest'\n+import { describe, it, vi, expect, beforeAll, afterAll } from 'vitest'\n import { BidiCore } from '../src/bidi/core.js'\n \n vi.mock('ws')\n@@ -13,17 +13,30 @@ describe('BidiCore', () => {\n         expect(handler.isConnected).toBe(false)\n     })\n \n-    it('can connect', async () => {\n-        const handler = new BidiCore('ws://foo/bar')\n-        handler.connect()\n-        expect(handler.socket.on).toBeCalledWith('open', expect.any(Function))\n+    describe('can connect', () => {\n+        beforeAll(() => {\n+            delete process.env.WDIO_UNIT_TESTS\n+        })\n \n-        const [, cb] = vi.mocked(handler.socket.on).mock.calls[1]\n-        cb.call(this as  any)\n-        expect(handler.isConnected).toBe(true)\n+        it('can connect', async () => {\n+            const handler = new BidiCore('ws://foo/bar')\n+            handler.connect()\n+            expect(handler.socket.on).toBeCalledWith('open', expect.any(Function))\n+            const [, cb] = vi.mocked(handler.socket.on).mock.calls[1]\n+            cb.call(this as  any)\n+            expect(handler.isConnected).toBe(true)\n+        })\n+\n+        afterAll(() => {\n+            process.env.WDIO_UNIT_TESTS = '1'\n+        })\n     })\n \n     describe('send', () => {\n+        beforeAll(() => {\n+            delete process.env.WDIO_UNIT_TESTS\n+        })\n+\n         it('fails if sending a message while not connected', async () => {\n             const handler = new BidiCore('ws://foo/bar')\n             await expect(async () => handler.send({ method: 'session.new', params: {} }))\n@@ -64,13 +77,21 @@ describe('BidiCore', () => {\n \n             const error = await promise.catch((err) => err)\n             const errorMessage = 'WebDriver Bidi command \"session.new\" failed with error: foobar - I am an error!'\n-            expect(error.stack).toContain(path.join('packages', 'webdriver', 'tests', 'bidi.test.ts:55:'))\n+            expect(error.stack).toContain(path.join('packages', 'webdriver', 'tests', 'bidi.test.ts:68:'))\n             expect(error.stack).toContain(errorMessage)\n             expect(error.message).toBe(errorMessage)\n         })\n+\n+        afterAll(() => {\n+            process.env.WDIO_UNIT_TESTS = '1'\n+        })\n     })\n \n     describe('sendAsync', () => {\n+        beforeAll(() => {\n+            delete process.env.WDIO_UNIT_TESTS\n+        })\n+\n         it('fails if sending a message while not connected', async () => {\n             const handler = new BidiCore('ws://foo/bar')\n             await expect(async () => handler.sendAsync({ method: 'session.new', params: {} }))\n@@ -87,5 +108,9 @@ describe('BidiCore', () => {\n                 .toEqual(1)\n             expect(vi.mocked(handler.socket.send).mock.calls).toMatchSnapshot()\n         })\n+\n+        afterAll(() => {\n+            process.env.WDIO_UNIT_TESTS = '1'\n+        })\n     })\n })\n\ndiff --git a/packages/webdriver/tests/index.test.ts b/packages/webdriver/tests/index.test.ts\nindex 56b7eb49319..4a5d38798dd 100644\n--- a/packages/webdriver/tests/index.test.ts\n+++ b/packages/webdriver/tests/index.test.ts\n@@ -27,6 +27,9 @@ vi.mock('../src/bidi/core.js', () => {\n             constructor () {\n                 ++initCount\n             }\n+            waitForConnected() {\n+                return Promise.resolve()\n+            }\n             get socket () {\n                 return {\n                     on: vi.fn(),\n\ndiff --git a/packages/webdriverio/tests/commands/browser/setViewport.test.ts b/packages/webdriverio/tests/commands/browser/setViewport.test.ts\nindex 08f8d575e41..343761b6987 100644\n--- a/packages/webdriverio/tests/commands/browser/setViewport.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/setViewport.test.ts\n@@ -28,7 +28,7 @@ describe('setWindowSize', () => {\n         await browser.setViewport({ width: 777, height: 888, devicePixelRatio: 123 })\n         expect(browsingContextSetViewport).toBeCalledTimes(1)\n         expect(browsingContextSetViewport).toBeCalledWith({\n-            context: 'window-handle-1',\n+            context: 'fake-context',\n             viewport: {\n                 width: 777,\n                 height: 888,\n\ndiff --git a/packages/webdriverio/tests/commands/browser/switchFrame.test.ts b/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\nindex f5dd3802e48..80e7a7fe0b1 100644\n--- a/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/switchFrame.test.ts\n@@ -18,76 +18,109 @@ vi.mock('../../../src/context.ts', () => {\n const contextManager = getContextManager({} as any)\n \n describe('switchFrame command', () => {\n-    beforeEach(async () => {\n-        vi.mocked(contextManager.initialize).mockClear()\n-        vi.mocked(contextManager.setCurrentContext).mockClear()\n-        vi.mocked(contextManager.getCurrentContext).mockClear()\n+    describe('non bidi', () => {\n+        beforeEach(async () => {\n+            browser = await remote({\n+                baseUrl: 'http://foobar.com',\n+                capabilities: {\n+                    browserName: 'foobar'\n+                }\n+            })\n+        })\n \n-        browser = await remote({\n-            baseUrl: 'http://foobar.com',\n-            capabilities: {\n-                browserName: 'foobar'\n-            }\n+        it('fails when applying a function parameter', async () => {\n+            await expect(\n+                browser.switchFrame((ctx: { url: string }) => Promise.resolve(ctx.url === 'https://mno.com'))\n+            ).rejects.toThrow('Cannot use a function to fetch a context in WebDriver Classic')\n         })\n \n-        const execute = vi.spyOn(browser, 'execute')\n-        execute.mockResolvedValue('https://jkl.com')\n-        const browsingContextActivate = vi.spyOn(browser, 'browsingContextActivate')\n-        browsingContextActivate.mockResolvedValue({})\n-        const getWindowHandle = vi.spyOn(browser, 'getWindowHandle')\n-        getWindowHandle.mockResolvedValue('5D4662C2B4465334DFD34239BA1E9E66')\n-        const browsingContextGetTree = vi.spyOn(browser, 'browsingContextGetTree')\n-        browsingContextGetTree.mockResolvedValue({\n-            contexts: [{\n-                children: [{\n-                    children: [],\n-                    context: '2',\n-                    url: 'https://def.com',\n-                    userContext: 'default'\n-                }, {\n+        it('fails when applying a string parameter', async () => {\n+            await expect(\n+                browser.switchFrame('https://mno.com')\n+            ).rejects.toThrow('Cannot use a string to fetch a context in WebDriver Classic')\n+        })\n+\n+        it('calls classic switchToFrame', async () => {\n+            const switchToFrame = vi.spyOn(browser, 'switchToFrame')\n+            await browser.switchFrame(await browser.$('iframe'))\n+            expect(switchToFrame).toHaveBeenCalledWith(\n+                expect.objectContaining({\n+                    elementId: 'some-elem-123'\n+                })\n+            )\n+        })\n+    })\n+\n+    describe('bidi', () => {\n+        beforeEach(async () => {\n+            vi.mocked(contextManager.initialize).mockClear()\n+            vi.mocked(contextManager.setCurrentContext).mockClear()\n+            vi.mocked(contextManager.getCurrentContext).mockClear()\n+\n+            browser = await remote({\n+                baseUrl: 'http://foobar.com',\n+                capabilities: {\n+                    browserName: 'bidi'\n+                }\n+            })\n+\n+            const execute = vi.spyOn(browser, 'execute')\n+            execute.mockResolvedValue({\n+                context: '5D4662C2B4465334DFD34239BA1E9E66'\n+            })\n+            const browsingContextActivate = vi.spyOn(browser, 'browsingContextActivate')\n+            browsingContextActivate.mockResolvedValue({})\n+            const getWindowHandle = vi.spyOn(browser, 'getWindowHandle')\n+            getWindowHandle.mockResolvedValue('5D4662C2B4465334DFD34239BA1E9E66')\n+            const browsingContextLocateNodes = vi.spyOn(browser, 'browsingContextLocateNodes')\n+            browsingContextLocateNodes.mockResolvedValue({\n+                nodes: []\n+            })\n+            const browsingContextGetTree = vi.spyOn(browser, 'browsingContextGetTree')\n+            browsingContextGetTree.mockResolvedValue({\n+                contexts: [{\n                     children: [{\n+                        children: [],\n+                        context: '2',\n+                        url: 'https://def.com',\n+                        userContext: 'default'\n+                    }, {\n                         children: [{\n-                            children: [],\n-                            context: '5',\n-                            url: 'https://mno.com',\n+                            children: [{\n+                                children: [],\n+                                context: '5',\n+                                url: 'https://mno.com',\n+                                userContext: 'default'\n+                            }],\n+                            context: '4',\n+                            url: 'https://jkl.com',\n                             userContext: 'default'\n                         }],\n-                        context: '4',\n-                        url: 'https://jkl.com',\n+                        context: '3',\n+                        url: 'https://3.com',\n                         userContext: 'default'\n                     }],\n-                    context: '3',\n-                    url: 'https://3.com',\n+                    context: '1',\n+                    url: 'https://abc.com',\n                     userContext: 'default'\n-                }],\n-                context: '1',\n-                url: 'https://abc.com',\n-                userContext: 'default'\n-            }]\n+                }]\n+            })\n         })\n-    })\n-\n-    it('should switch context via string', async () => {\n-        await browser.switchFrame('https://mno.com')\n-        expect(contextManager.setCurrentContext).toBeCalledWith('5')\n-        await browser.switchFrame('jkl')\n-        expect(contextManager.setCurrentContext).toBeCalledWith('4')\n-        await browser.switchFrame('3')\n-        expect(contextManager.setCurrentContext).toBeCalledWith('3')\n-    })\n \n-    it('should switch context via element', async () => {\n-        await browser.switchFrame(browser.$('iframe'))\n-        expect(contextManager.setCurrentContext).toBeCalledWith('4')\n-    })\n+        it('should switch context via element', async () => {\n+            const elem = await browser.$('iframe')\n+            const elemExecute = vi.spyOn(elem, 'execute')\n+            elemExecute.mockResolvedValue({\n+                context: '5D4662C2B4465334DFD34239BA1E9E66'\n+            })\n \n-    it('should switch context via function', async () => {\n-        await browser.switchFrame((ctx: { url: string }) => Promise.resolve(ctx.url === 'https://mno.com'))\n-        expect(contextManager.setCurrentContext).toBeCalledWith('5')\n-    })\n+            await browser.switchFrame(elem)\n+            expect(contextManager.setCurrentContext).toBeCalledWith('5D4662C2B4465334DFD34239BA1E9E66')\n+        })\n \n-    it('should switch context via null', async () => {\n-        await browser.switchFrame(null)\n-        expect(contextManager.setCurrentContext).toBeCalledWith('5D4662C2B4465334DFD34239BA1E9E66')\n+        it('should switch context via null', async () => {\n+            await browser.switchFrame(null)\n+            expect(contextManager.setCurrentContext).toBeCalledWith('5D4662C2B4465334DFD34239BA1E9E66')\n+        })\n     })\n })\n\ndiff --git a/packages/webdriverio/tests/shadowRoot.test.ts b/packages/webdriverio/tests/shadowRoot.test.ts\nindex c5b0c6b4c99..795ab3741bb 100644\n--- a/packages/webdriverio/tests/shadowRoot.test.ts\n+++ b/packages/webdriverio/tests/shadowRoot.test.ts\n@@ -24,11 +24,11 @@ describe('ShadowRootManager', () => {\n     })\n \n     it('registers correct event listeners', async () => {\n-        const wid = process.env.VITEST_WORKER_ID\n-        delete process.env.VITEST_WORKER_ID\n+        const wid = process.env.WDIO_UNIT_TESTS\n+        delete process.env.WDIO_UNIT_TESTS\n         const browser = { ...defaultBrowser, isBidi: true, options: { automationProtocol: 'webdriver' } } as any\n         const manager = getShadowRootManager(browser)\n-        process.env.VITEST_WORKER_ID = wid\n+        process.env.WDIO_UNIT_TESTS = wid\n         expect(await manager.initialize()).toBe(true)\n         expect(browser.sessionSubscribe).toBeCalledTimes(1)\n         expect(browser.on).toBeCalledTimes(3)\n\ndiff --git a/tests/smoke.runner.js b/tests/smoke.runner.js\nindex a6aa777cea5..ce714589abf 100644\n--- a/tests/smoke.runner.js\n+++ b/tests/smoke.runner.js\n@@ -17,6 +17,8 @@ const severalPassedConfig = path.resolve(__dirname, 'tests-cli-spec-arg/wdio-wit\n // eslint-disable-next-line no-control-regex\n const ansiColorRegex = /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g\n \n+process.env.WDIO_UNIT_TESTS = '1'\n+\n import launch from './helpers/launch.js'\n import {\n     SERVICE_LOGS,\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13780",
    "pr_id": 13780,
    "issue_id": 13771,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: 'wdio config' fails in the middle of questionnaire if there was no package.json at CWD\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nv9.2.0\n\n### Node.js Version\n\nv22.6.0\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n_No response_\n\n### What happened?\n\nIf I run `npx @wdio/cli config` in an empty directory (without `package.json`), the 1st question is if I want the CLI to create one for me. The default answer is Yes and I agree, but then in the middle of questionnaire (after choosing JS testing framework) it fail with exception (see \"Relevant log output\")\n\n### What is your expected behavior?\n\n_No response_\n\n### How to reproduce the bug.\n\nSee \"What happened?\"\n\n### Relevant log output\n\n```typescript\nError: Could not find project root directory with a package.json\r\n    at getProjectRoot (file:///Users/user/.npm/_npx/c99d4c13e0dee746/node_modules/@wdio/cli/build/index.js:1808:11)\r\n    at async detectCompiler (file:///Users/user/.npm/_npx/c99d4c13e0dee746/node_modules/@wdio/cli/build/index.js:1416:16)\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 216,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-cli/src/utils.ts",
      "packages/wdio-cli/tests/utils.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-cli/tests/utils.test.ts"
    ],
    "base_commit": "1faf83831cab8e5e91d46c8452045206be78f426",
    "head_commit": "902e9e3e1c45183850d22881ed7a40127309a057",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13780",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13780",
    "dockerfile": "",
    "pr_merged_at": "2025-01-23T05:35:14.000Z",
    "patch": "diff --git a/packages/wdio-cli/src/utils.ts b/packages/wdio-cli/src/utils.ts\nindex 79cde40dd9d..a1d8f4f629f 100644\n--- a/packages/wdio-cli/src/utils.ts\n+++ b/packages/wdio-cli/src/utils.ts\n@@ -358,6 +358,11 @@ export function hasBabelConfig(rootDir: string) {\n  * detect if project has a compiler file\n  */\n export async function detectCompiler(answers: Questionnair) {\n+    // obviously there is no compiler, if there is no package.json\n+    if (answers.createPackageJSON) {\n+        return false\n+    }\n+\n     const root = await getProjectRoot(answers)\n     const rootTSConfigExist = await fs.access(path.resolve(root, 'tsconfig.json')).then(() => true, () => false)\n     return (await hasBabelConfig(root) || rootTSConfigExist) ? true : false\n@@ -533,42 +538,41 @@ export async function getAnswers(yes: boolean): Promise<Questionnair> {\n \n     const projectProps = await getProjectProps(process.cwd())\n     const isProjectExisting = Boolean(projectProps)\n+    const nameInPackageJsonIsNotCreateWdioDefault = projectProps?.packageJson?.name !== 'my-new-project'\n     const projectName = projectProps?.packageJson?.name ? ` named \"${projectProps.packageJson.name}\"` : ''\n-    const questions = [\n-        /**\n-         * in case the `wdio config` was called using a global installed @wdio/cli package\n-         */\n-        ...(!isProjectExisting\n-            ? [{\n-                type: 'confirm',\n-                name: 'createPackageJSON',\n-                default: true,\n-                message: `Couldn't find a package.json in \"${process.cwd()}\" or any of the parent directories, do you want to create one?`,\n-            }]\n-            /**\n-             * in case create-wdio was used which creates a package.json with name \"my-new-project\"\n-             * we don't need to ask this question\n-             */\n-            : projectProps?.packageJson?.name !== 'my-new-project'\n-                ? [{\n-                    type: 'confirm',\n-                    name: 'projectRootCorrect',\n-                    default: true,\n-                    message: `A project${projectName} was detected at \"${projectProps?.path}\", correct?`,\n-                }, {\n-                    type: 'input',\n-                    name: 'projectRoot',\n-                    message: 'What is the project root for your test project?',\n-                    default: projectProps?.path,\n-                    // only ask if there are more than 1 runner to pick from\n-                    when: /* istanbul ignore next */ (answers: Questionnair) => !answers.projectRootCorrect\n-                }]\n-                : []\n-        ),\n-        ...QUESTIONNAIRE\n+\n+    const projectRootQuestions = [\n+        {\n+            type: 'confirm',\n+            name: 'createPackageJSON',\n+            default: true,\n+            message: `Couldn't find a package.json in \"${process.cwd()}\" or any of the parent directories, do you want to create one?`,\n+            when: !isProjectExisting\n+        },\n+        {\n+            type: 'confirm',\n+            name: 'projectRootCorrect',\n+            default: true,\n+            message: `A project${projectName} was detected at \"${projectProps?.path}\", correct?`,\n+            when: isProjectExisting && nameInPackageJsonIsNotCreateWdioDefault\n+        }, {\n+            type: 'input',\n+            name: 'projectRoot',\n+            message: 'What is the project root for your test project?',\n+            default: projectProps?.path,\n+            // only ask if there are more than 1 runner to pick from\n+            when: /* istanbul ignore next */ (answers: Questionnair) => isProjectExisting && nameInPackageJsonIsNotCreateWdioDefault && !answers.projectRootCorrect\n+        }\n     ]\n+\n+    // @ts-expect-error\n+    const answers = await inquirer.prompt(projectRootQuestions)\n+    if (answers.createPackageJSON) {\n+        answers.projectRoot = process.cwd()\n+    }\n+\n     // @ts-expect-error\n-    return inquirer.prompt(questions)\n+    return inquirer.prompt(QUESTIONNAIRE, answers)\n }\n \n /**\n@@ -995,6 +999,10 @@ export async function createWDIOConfig(parsedAnswers: ParsedAnswers) {\n  * @returns project root path\n  */\n export async function getProjectRoot (parsedAnswers?: Questionnair) {\n+    if (parsedAnswers?.createPackageJSON && parsedAnswers.projectRoot) {\n+        return parsedAnswers.projectRoot\n+    }\n+\n     const root = (await getProjectProps())?.path\n     if (!root) {\n         throw new Error('Could not find project root directory with a package.json')\n",
    "test_patch": "diff --git a/packages/wdio-cli/tests/utils.test.ts b/packages/wdio-cli/tests/utils.test.ts\nindex 072ff7dc7a3..d5911a75b73 100644\n--- a/packages/wdio-cli/tests/utils.test.ts\n+++ b/packages/wdio-cli/tests/utils.test.ts\n@@ -36,7 +36,8 @@ import {\n     createWDIOConfig,\n     createWDIOScript,\n     runAppiumInstaller,\n-    detectPackageManager\n+    detectPackageManager,\n+    detectCompiler\n } from '../src/utils.js'\n import { parseAnswers } from '../src/commands/config.js'\n import { installPackages } from '../src/install.js'\n@@ -61,15 +62,7 @@ vi.mock('child_process', () => {\n     return m\n })\n \n-vi.mock('read-pkg-up', () => ({\n-    readPackageUp: vi.fn().mockResolvedValue({\n-        path: '/foo/package.json',\n-        packageJson: {\n-            name: 'cool-test-module',\n-            type: 'module'\n-        }\n-    })\n-}))\n+vi.mock('read-pkg-up')\n \n vi.mock('node:fs/promises', () => ({\n     default: {\n@@ -97,6 +90,14 @@ vi.mock('../src/install', () => ({\n \n beforeEach(() => {\n     global.console.log = vi.fn()\n+\n+    vi.mocked(readPackageUp).mockReturnValue({\n+        path: '/foo/package.json',\n+        packageJson: {\n+            name: 'cool-test-module',\n+            type: 'module'\n+        }\n+    })\n })\n \n describe('runServiceHook', () => {\n@@ -753,6 +754,13 @@ test('getDefaultFiles', async () => {\n         .toBe(path.join('/bar', 'foo', 'bar.js'))\n })\n \n+test('original implementation of getDefaultFiles handles projectRoot with no package.json', async () => {\n+    const files = '/foo/bar'\n+    vi.mocked(readPackageUp).mockRestore()\n+    expect(await getDefaultFiles({ createPackageJSON: true, projectRoot: '/project-root-with-no-package.json', isUsingTypeScript: false } as any, files))\n+        .toBe(path.join('/project-root-with-no-package.json', 'foo', 'bar.js'))\n+})\n+\n test('specifyVersionIfNeeded', () => {\n     expect(specifyVersionIfNeeded(\n         ['webdriverio', '@wdio/spec-reporter'],\n@@ -782,6 +790,12 @@ test('hasBabelConfig', async () => {\n     expect(await hasBabelConfig('/foo')).toBe(false)\n })\n \n+test('detectCompiler', async () => {\n+    vi.mocked(readPackageUp).mockRestore()\n+    const answers = { createPackageJSON: true }\n+    expect(await detectCompiler(answers)).toBe(false)\n+})\n+\n test('getAnswers', async () => {\n     let answers = await getAnswers(true)\n     delete answers.pages // delete so it doesn't fail in Windows\n@@ -792,17 +806,15 @@ test('getAnswers', async () => {\n     delete answers.pages // delete so it doesn't fail in Windows\n     delete answers.specs // delete so it doesn't fail in Windows\n     expect(answers).toBe('some value')\n-    expect(inquirer.prompt).toBeCalledTimes(1)\n+    expect(inquirer.prompt).toBeCalledTimes(2)\n     // @ts-ignore\n-    expect(vi.mocked(inquirer.prompt).mock.calls[0][0][0].message)\n-        .toContain('A project named \"cool-test-module\" was detected')\n+    expect(vi.mocked(inquirer.prompt).mock.calls[0][0][0].when).toBe(false)\n     vi.mocked(readPackageUp).mockResolvedValue(undefined)\n     vi.mocked(inquirer.prompt).mockClear()\n     expect(await getAnswers(false)).toBe('some value')\n-    expect(inquirer.prompt).toBeCalledTimes(1)\n+    expect(inquirer.prompt).toBeCalledTimes(2)\n     // @ts-ignore\n-    expect(vi.mocked(inquirer.prompt).mock.calls[0][0][0].message)\n-        .toContain('Couldn\\'t find a package.json in')\n+    expect(vi.mocked(inquirer.prompt).mock.calls[0][0][0].when).toBe(true)\n })\n \n test('getProjectProps', async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13772",
    "pr_id": 13772,
    "issue_id": 13766,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]:  await browser.switchToWindow() not working as expected\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.2.1\n\n### Node.js Version\n\nv20.11.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\ncapabilities: [{\r\n        browserName: 'chrome'\r\n    }],\n```\n\n\n### What happened?\n\nSome test cases that interact with multiple browser windows get lost after migrating to` wdio v9`. The attached repository shows an example of a scenario that opens two different windows when trying to use the ` await browser.switchToWindow()` method to jump from one window to another the script gets lost.\n\n### What is your expected behavior?\n\nIn wdio v8 this test cases works properly. The `await browser.switchToWindow()` method works as expected.\n\n### How to reproduce the bug.\n\nPlease feel free to reproduce this behaviour cloning the following public repository.\r\n[https://github.com/deyvisPedrosa/wdio-windows-handles](https://github.com/deyvisPedrosa/wdio-windows-handles)\n\n### Relevant log output\n\n```typescript\nI noted that even the switchToWindows() method is executed properly when we want to interact with elements in the new windows wdio still uses the context of the previous window.\r\n\r\n\r\n[0-0] 2024-10-15T17:07:58.161Z INFO webdriver: COMMAND getWindowHandles()\r\n[0-0] 2024-10-15T17:07:58.162Z INFO webdriver: [GET] http://localhost:57556/session/b97c34d04159a469f09e917c7b2da5b7/window/handles\r\n[0-0] 2024-10-15T17:07:59.341Z INFO webdriver: RESULT [\r\n[0-0]   'EBBFCC98D57BD36E2BB528DB3D6D2E67',\r\n[0-0]   '2343309B34378B88439E30F2BD4AC0D3'\r\n[0-0] ]\r\n[0-0] 2024-10-15T17:08:06.428Z INFO webdriver: COMMAND switchToWindow(\"<Screenshot[base64]>\")\r\n[0-0] 2024-10-15T17:08:06.430Z INFO webdriver: [POST] http://localhost:57556/session/b97c34d04159a469f09e917c7b2da5b7/window\r\n[0-0] 2024-10-15T17:08:06.430Z INFO webdriver: DATA { handle: '2343309B34378B88439E30F2BD4AC0D3' }\r\n[0-0] 2024-10-15T17:08:06.457Z INFO webdriver: RESULT null\r\n[0-0] 2024-10-15T17:08:11.004Z INFO webdriver: COMMAND getTitle()\r\n[0-0] 2024-10-15T17:08:11.005Z INFO webdriver: [GET] http://localhost:57556/session/b97c34d04159a469f09e917c7b2da5b7/title\r\n[0-0] 2024-10-15T17:08:11.043Z INFO webdriver: RESULT GitHub - webdriverio/webdriverio: Next-gen browser and mobile automation test framework for Node.js\r\n[0-0] GitHub - webdriverio/webdriverio: Next-gen browser and mobile automation test framework for Node.js\r\nCreated TensorFlow Lite XNNPACK delegate for CPU.\r\n[0-0] 2024-10-15T17:08:21.424Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"css\",\"value\":\"[aria-label=\\\"Go to file\\\"]\"},\"context\":\"EBBFCC98D57BD36E2BB528DB3D6D2E67\"}\r\n[0-0] 2024-10-15T17:08:21.616Z INFO webdriverio:ShadowRootManager: Registered new shadow root for element <include-fragment /> with id f.2343309B34378B88439E30F2BD4AC0D3.d.BD7CB3B9185D5D7D86F7AF0D950C0DD3.e.37\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 460,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "e2e/wdio/headless/test.e2e.ts",
      "packages/webdriverio/src/context.ts"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/test.e2e.ts"
    ],
    "base_commit": "960f07f345d3fba61aa4a3a2e8193008ebcd2f7d",
    "head_commit": "c85800e20ba2a734d733559a0c6f36bcaaf2ac0e",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13772",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13772",
    "dockerfile": "",
    "pr_merged_at": "2024-10-18T15:29:47.000Z",
    "patch": "diff --git a/packages/webdriverio/src/context.ts b/packages/webdriverio/src/context.ts\nindex 331939a88a5..9f4b0809813 100644\n--- a/packages/webdriverio/src/context.ts\n+++ b/packages/webdriverio/src/context.ts\n@@ -43,6 +43,15 @@ export class ContextManager {\n             events: ['browsingContext.navigationStarted']\n         }).then(() => true, () => false)\n         this.#browser.on('browsingContext.navigationStarted', this.#handleNavigationStarted.bind(this))\n+        /**\n+         * Listens for the 'switchToWindow' browser command to handle context changes.\n+         * Updates the browsingContext with the context passed in 'switchToWindow'.\n+         */\n+        this.#browser.on('command', (event) => {\n+            if (event.command === 'switchToWindow') {\n+                this.setCurrentContext(event.body.handle)\n+            }\n+        })\n     }\n \n     async initialize () {\n@@ -65,7 +74,6 @@ export class ContextManager {\n             this.#currentContext = context.context\n         }\n     }\n-\n     setCurrentContext (context: string) {\n         this.#currentContext = context\n     }\n",
    "test_patch": "diff --git a/e2e/wdio/headless/test.e2e.ts b/e2e/wdio/headless/test.e2e.ts\nindex ac8db8345c3..b4584db2275 100644\n--- a/e2e/wdio/headless/test.e2e.ts\n+++ b/e2e/wdio/headless/test.e2e.ts\n@@ -328,6 +328,7 @@ describe('main suite 1', () => {\n             const request = await browser.url('http://guinea-pig.webdriver.io/', {\n                 wait: 'none'\n             })\n+\n             if (!request) {\n                 throw new Error('Request object is not defined')\n             }\n@@ -464,6 +465,18 @@ describe('main suite 1', () => {\n \n             expect(await browser.getWindowHandle()).toBe(firstWindowHandle)\n         })\n+\n+        it('Should update BiDi browsingContext when performing switchToWindow in WebDriver Classic', async () => {\n+            await closeAllWindowsButFirst()\n+            await browser.url('http://guinea-pig.webdriver.io/')\n+            await $('#newWindow').click()\n+\n+            const handles = await browser.getWindowHandles()\n+            await browser.switchToWindow(handles[1])\n+\n+            // Verify element text to ensure the browsing context has changed and can interact with elements\n+            await expect(await $('.page').getText()).toBe('Second page!')\n+        })\n     })\n \n     const closeAllWindowsButFirst = async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13760",
    "pr_id": 13760,
    "issue_id": 13759,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: switchWindow switches to the latest available window even if requested window was not found\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\nv9.2.1\r\n\r\n### Node.js Version\r\n\r\nv22.6.0\r\n\r\n### Mode\r\n\r\nStandalone Mode\r\n\r\n### Which capabilities are you using?\r\n\r\n```\r\n{\r\n    browserName: 'chrome'\r\n}\r\n```\r\n\r\n### What happened?\r\n\r\nInitially, I though it's a problem of wdio-electron-service (see webdriverio-community/wdio-electron-service#762), and formulated it differently. Today I've spent some time debugging the code, understood that it's a problem of webdriverio and came up to the following observation:\r\n- If you ask `switchWindow` for some window, which is not known, WDIO throws exception (expected), but switched the window to the latest available (not expected side effect)\r\n\r\n### What is your expected behavior?\r\n\r\nThe window switch is not expected, if invalid window was requested from `switchWindow()`\r\n\r\n### How to reproduce the bug.\r\n\r\nConsider the simplest possible E2E browser testing project generated with `npm init wdio@latest .`\r\n\r\nHere is the test scenario:\r\n\r\n```javascript\r\nawait browser.url(`https://the-internet.herokuapp.com/login`);\r\n\r\n// Open another website in a new tab\r\nconst newTab = await browser.createWindow(\"tabs\");\r\nawait browser.switchToWindow(newTab.handle);\r\nawait browser.navigateTo(`https://example.com`);\r\n\r\n// Switch back to the 1st tab\r\nawait browser.switchToWindow((await browser.getWindowHandles())[0]);\r\n// Proof the switch was successful, you will see 'The Inernet' logged\r\nconsole.log(await browser.getTitle());\r\n\r\n// Pass incorrect input to `switchWindow`\r\ntry {\r\n  await browser.switchWindow(\"not-existing-window\");\r\n} catch (e) {\r\n  // There is an error, but WDIO swicthed to the latest available window anyway and you'll see 'Example Domain' printed\r\n  console.error(e);\r\n}\r\nconsole.log(await browser.getTitle());\r\n```\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\nYou'll have 2 tabs opened ('The Internet' and 'Example Domain').\r\nInitially, 'The Internet' is in focus. (proven by console output).\r\n\r\nUnfortunately, `await browser.switchWindow(\"garbage-input\")` will throw error (expected) and at the same time switch the tab to the latest available (not expected). You'll see the unexpected switch happened by 'Example Domain' printed to console.\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 377,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "e2e/wdio/headless/test.e2e.ts",
      "packages/webdriverio/src/commands/browser/switchWindow.ts",
      "packages/webdriverio/tests/commands/browser/switchWindow.test.ts"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/test.e2e.ts",
      "packages/webdriverio/tests/commands/browser/switchWindow.test.ts"
    ],
    "base_commit": "9dd5b4d1fb54c4f1135eee1cd544972496fa5e83",
    "head_commit": "fffdfc89bf0d6aaf3c52e9231bd358cee8d2e878",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13760",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13760",
    "dockerfile": "",
    "pr_merged_at": "2024-10-14T15:25:50.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/switchWindow.ts b/packages/webdriverio/src/commands/browser/switchWindow.ts\nindex c9a203afd7b..b1c293b86ac 100644\n--- a/packages/webdriverio/src/commands/browser/switchWindow.ts\n+++ b/packages/webdriverio/src/commands/browser/switchWindow.ts\n@@ -39,6 +39,7 @@ export async function switchWindow (\n         throw new Error('Unsupported parameter for switchWindow, required is \"string\" or an RegExp')\n     }\n \n+    const currentWindow = await this.getWindowHandle()\n     const tabs = await this.getWindowHandles()\n \n     const matchesTarget = (target: string): boolean => {\n@@ -80,5 +81,6 @@ export async function switchWindow (\n         }\n     }\n \n+    await this.switchToWindow(currentWindow)\n     throw new Error(`No window found with title, url or name matching \"${matcher}\"`)\n }\n",
    "test_patch": "diff --git a/e2e/wdio/headless/test.e2e.ts b/e2e/wdio/headless/test.e2e.ts\nindex e623b59e38a..ac8db8345c3 100644\n--- a/e2e/wdio/headless/test.e2e.ts\n+++ b/e2e/wdio/headless/test.e2e.ts\n@@ -448,5 +448,32 @@ describe('main suite 1', () => {\n             await expect($('.hero__subtitle')).toBePresent()\n             await expect($('.red')).not.toBePresent()\n         })\n+\n+        it('should not switch window if requested window was not found', async () => {\n+            await closeAllWindowsButFirst()\n+            await browser.navigateTo('http://guinea-pig.webdriver.io/')\n+            const firstWindowHandle = await browser.getWindowHandle()\n+\n+            await browser.newWindow('https://webdriver.io')\n+\n+            await browser.switchWindow('guinea-pig.webdriver.io')\n+            expect(await browser.getWindowHandle()).toBe(firstWindowHandle)\n+\n+            const err = await browser.switchWindow('not-existing-window').catch((err) => err)\n+            expect(err.message).toContain('No window')\n+\n+            expect(await browser.getWindowHandle()).toBe(firstWindowHandle)\n+        })\n     })\n+\n+    const closeAllWindowsButFirst = async () => {\n+        const allHandles = await browser.getWindowHandles()\n+\n+        if (allHandles.length < 2) {return}\n+        for (const windowHandle of allHandles.slice(1)) {\n+            await browser.switchToWindow(windowHandle)\n+            await browser.closeWindow()\n+        }\n+        await browser.switchToWindow(allHandles[0])\n+    }\n })\n\ndiff --git a/packages/webdriverio/tests/commands/browser/switchWindow.test.ts b/packages/webdriverio/tests/commands/browser/switchWindow.test.ts\nindex c168aeea672..befc08ddc43 100644\n--- a/packages/webdriverio/tests/commands/browser/switchWindow.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/switchWindow.test.ts\n@@ -4,7 +4,7 @@ import { remote } from '../../../src/index.js'\n \n vi.mock('fetch')\n vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdio/logger')))\n-const webdriverResponses = [null, null, 'foo', 'bar', 'loo', null, 'hello', 'world', 'yo', null, 'some', 'url', 'here']\n+const webdriverResponses = [null, null, null, 'foo', 'bar', 'loo', null, 'hello', 'world', 'yo', null, 'some', 'url', 'here']\n \n describe('switchWindow', () => {\n     // @ts-ignore\n@@ -79,7 +79,7 @@ describe('switchWindow', () => {\n \n     it('should find url with query string', async () => {\n         // @ts-expect-error mock feature\n-        vi.mocked(fetch).setMockResponse([null, null, 'foo.com?foo=bar', 'bar', null, 'hello', 'world', null, 'some', 'url'])\n+        vi.mocked(fetch).setMockResponse([null, null, null, 'foo.com?foo=bar', 'bar', null, 'hello', 'world', null, 'some', 'url'])\n         const tabId = await browser.switchWindow('foo.com?foo=bar')\n         expect(tabId).toBe('window-handle-1')\n     })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13736",
    "pr_id": 13736,
    "issue_id": 13725,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[💡 Feature]: Improve HTTP request retry behavior\n### Is your feature request related to a problem?\r\n\r\nVersion 9 of webdriverio changed the HTTP request error handling in a way, that for many errors, no more retrying was done. I already reported this in #13553 and it's already fixed. But rarely, I still see `ECONNREFUSED` errors. I assume that his errors occur while the test machine is under heavy load and sometimes it is not able to recover fast enough so that even with retrying, the request finally fails.\r\n\r\n### Describe the solution you'd like.\r\n\r\nCurrently, the requests are retried immediately after the error occurs. This produces even more load, so the machine is sometimes not able to recover in time.\r\n\r\nI suggest we add a wait time to give the machine time to recover. It could start really small afer the first few times and increase with each retry. That way, we shouldn't lose time for errors that resolve after a short time but also allow for recovery from longer periods of overload.\r\n\r\n### Describe alternatives you've considered.\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\nThis was logged when retrying didn't fix the error. As we can see, all the requests were done within about 500 ms.\r\n\r\n```\r\n[0-97] 2024-09-30T11:08:23.107Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.688/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.112Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.689/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.114Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.691/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.115Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.690/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.118Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.693/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.121Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.692/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.123Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.694/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.125Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.695/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.187Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.696/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.330Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.694/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.332Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.695/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.337Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.697/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.346Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.698/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.347Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.700/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.358Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.699/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.359Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.702/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.360Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.701/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.403Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.709/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.405Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.708/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.406Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.711/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.408Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.710/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.410Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.713/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.412Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.712/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.414Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.714/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.415Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.694/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.417Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.695/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.419Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.697/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.426Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.698/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.428Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.700/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.430Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.699/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.432Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.702/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.436Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.701/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.513Z WARN webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.714/text\" with method \"GET\"\r\n[0-97] 2024-09-30T11:08:23.518Z ERROR webdriver: WebDriverError: Request failed with error code ECONNREFUSED when running \"element/f.59E5FD05714032DB194D599054178984.d.1C81EC4A8A3D1B24984E5BEC89D68304.e.694/text\" with method \"GET\"\r\n```\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct",
    "issue_word_count": 1239,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriver/src/request/index.ts",
      "packages/webdriver/tests/request.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriver/tests/request.test.ts"
    ],
    "base_commit": "09932b2544262f68560e6f2050484e06854cde44",
    "head_commit": "9be35fdc7e81701901efc4d8df0e58a2bc2384db",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13736",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13736",
    "dockerfile": "",
    "pr_merged_at": "2024-10-08T16:06:29.000Z",
    "patch": "diff --git a/packages/webdriver/src/request/index.ts b/packages/webdriver/src/request/index.ts\nindex 86187ac1234..ecae46498f6 100644\n--- a/packages/webdriver/src/request/index.ts\n+++ b/packages/webdriver/src/request/index.ts\n@@ -4,7 +4,7 @@ import { WebDriverProtocol } from '@wdio/protocols'\n import { URL } from 'node:url'\n \n import logger from '@wdio/logger'\n-import { transformCommandLogResult } from '@wdio/utils'\n+import { transformCommandLogResult, sleep } from '@wdio/utils'\n import type { Options } from '@wdio/types'\n \n import  { WebDriverResponseError, type WebDriverRequestError } from './error.js'\n@@ -162,7 +162,7 @@ export default abstract class WebDriverRequest extends EventEmitter {\n          * @param {Error} error  error object that causes the retry\n          * @param {string} msg   message that is being shown as warning to user\n          */\n-        const retry = (error: Error) => {\n+        const retry = async (error: Error) => {\n             /**\n              * stop retrying if totalRetryCount was exceeded or there is no reason to\n              * retry, e.g. if sessionId is invalid\n@@ -174,7 +174,15 @@ export default abstract class WebDriverRequest extends EventEmitter {\n                 throw error\n             }\n \n+            if (retryCount > 0) {\n+                /*\n+                 * Exponential backoff with a minimum of 500ms and a maximum of 10_000ms.\n+                 */\n+                await sleep(Math.min(10000, 250 * Math.pow(2, retryCount)))\n+            }\n+\n             ++retryCount\n+\n             this.emit('retry', { error, retryCount })\n             this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: false, error, retryCount })\n             log.warn(error.message)\n",
    "test_patch": "diff --git a/packages/webdriver/tests/request.test.ts b/packages/webdriver/tests/request.test.ts\nindex 4dd2e0fd93a..40a6b679d1c 100644\n--- a/packages/webdriver/tests/request.test.ts\n+++ b/packages/webdriver/tests/request.test.ts\n@@ -397,7 +397,7 @@ describe('webdriver request', () => {\n             )\n             expect(result).toEqual({ value: {} })\n             expect(reqRetryCnt).toBeCalledTimes(5)\n-        })\n+        }, 20_000)\n \n         it('should retry on connection refused error', async () => {\n             const retryCnt = 7\n@@ -416,7 +416,7 @@ describe('webdriver request', () => {\n             )\n             expect(result).toEqual({ value: { foo: 'bar' } })\n             expect(reqRetryCnt).toBeCalledTimes(5)\n-        })\n+        }, 20_000)\n \n         it('should throw if request error is unknown', async () => {\n             const req = new WebDriverRequest('POST', '/sumoerror', {}, true)\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13701",
    "pr_id": 13701,
    "issue_id": 13670,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: BeforeTest hook in sauce-service throws an error `Error in \"BeforeTest Hook\" Invalid left-hand side in assignment`\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\nlatest\r\n\r\n### Node.js Version\r\n\r\n20.11.1\r\n\r\n### Mode\r\n\r\nStandalone Mode\r\n\r\n### Which capabilities are you using?\r\n\r\n_No response_\r\n\r\n### What happened?\r\n\r\nWhen running a test on Sauce the sauce-service updates the name of the test, see [this](https://github.com/webdriverio/webdriverio/blob/main/packages/wdio-sauce-service/src/service.ts#L103), with the execute method, see [this](https://github.com/webdriverio/webdriverio/blob/main/packages/wdio-sauce-service/src/service.ts#L424).\r\n\r\nThis now throws an error\r\n\r\n```logs\r\n[0-0] 2024-09-30T05:22:33.072Z ERROR @wdio/utils:shim: SyntaxError: Invalid left-hand side in assignment\r\n[0-0]     at new Function (<anonymous>)\r\n[0-0]     at Browser.execute (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/webdriverio@9.1.2/node_modules/webdriverio/build/index.js:3032:53)\r\n[0-0]     at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n[0-0]     at Browser.wrapCommandFn (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+utils@9.1.2/node_modules/@wdio/utils/build/index.js:1380:23)\r\n[0-0]     at async SauceService._setJobName (file:///Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+sauce-service@9.1.2/node_modules/@wdio/sauce-service/build/index.js:488:5)\r\n[0-0]     at async SauceService.beforeTest (file:///Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+sauce-service@9.1.2/node_modules/@wdio/sauce-service/build/index.js:259:7)\r\n[0-0]     at async Promise.all (index 1)\r\n[0-0]     at executeHooksWithArgs (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+utils@9.1.2/node_modules/@wdio/utils/build/index.js:1363:18)\r\n[0-0]     at Context.testFrameworkFnWrapper (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+utils@9.1.2/node_modules/@wdio/utils/build/index.js:1566:39)\r\n[0-0] 2024-09-30T05:22:33.072Z DEBUG @wdio/utils:shim: Finished to run \"beforeTest\" hook in 0ms\r\n[0-0] Error in \"BeforeTest Hook\"\r\nInvalid left-hand side in assignment\r\n```\r\n\r\n### What is your expected behavior?\r\n\r\nThe testname can be updated, which works with `\"^9.0.7\"`\r\n\r\n### How to reproduce the bug.\r\n\r\nCreate a simple test, use the latest `sauce-service` and let it automatically update the test in Sauce\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\n[0-0] 2024-09-30T05:22:33.072Z ERROR @wdio/utils:shim: SyntaxError: Invalid left-hand side in assignment\r\n[0-0]     at new Function (<anonymous>)\r\n[0-0]     at Browser.execute (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/webdriverio@9.1.2/node_modules/webdriverio/build/index.js:3032:53)\r\n[0-0]     at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n[0-0]     at Browser.wrapCommandFn (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+utils@9.1.2/node_modules/@wdio/utils/build/index.js:1380:23)\r\n[0-0]     at async SauceService._setJobName (file:///Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+sauce-service@9.1.2/node_modules/@wdio/sauce-service/build/index.js:488:5)\r\n[0-0]     at async SauceService.beforeTest (file:///Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+sauce-service@9.1.2/node_modules/@wdio/sauce-service/build/index.js:259:7)\r\n[0-0]     at async Promise.all (index 1)\r\n[0-0]     at executeHooksWithArgs (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+utils@9.1.2/node_modules/@wdio/utils/build/index.js:1363:18)\r\n[0-0]     at Context.testFrameworkFnWrapper (/Users/wimselles/Git/wdio/visual-testing/node_modules/.pnpm/@wdio+utils@9.1.2/node_modules/@wdio/utils/build/index.js:1566:39)\r\n[0-0] 2024-09-30T05:22:33.072Z DEBUG @wdio/utils:shim: Finished to run \"beforeTest\" hook in 0ms\r\n[0-0] Error in \"BeforeTest Hook\"\r\nInvalid left-hand side in assignment\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 671,
    "test_files_count": 4,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "e2e/package.json",
      "e2e/wdio/wdio.sauce.conf.ts",
      "packages/wdio-sauce-service/src/service.ts",
      "packages/wdio-sauce-service/tests/service.test.ts",
      "packages/wdio-spec-reporter/tests/__snapshots__/index.test.ts.snap",
      "pnpm-lock.yaml"
    ],
    "pr_changed_test_files": [
      "e2e/package.json",
      "e2e/wdio/wdio.sauce.conf.ts",
      "packages/wdio-sauce-service/tests/service.test.ts",
      "packages/wdio-spec-reporter/tests/__snapshots__/index.test.ts.snap"
    ],
    "base_commit": "86f1863843cccea7313d9f28ce1f5746b40fea4f",
    "head_commit": "8ceda517d395652ff4ccdee3e48e9d13bbd62110",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13701",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13701",
    "dockerfile": "",
    "pr_merged_at": "2024-09-30T19:50:07.000Z",
    "patch": "diff --git a/packages/wdio-sauce-service/src/service.ts b/packages/wdio-sauce-service/src/service.ts\nindex 96fc3264f2d..c0c3697ba35 100644\n--- a/packages/wdio-sauce-service/src/service.ts\n+++ b/packages/wdio-sauce-service/src/service.ts\n@@ -414,11 +414,11 @@ export default class SauceService implements Services.ServiceInstance {\n         if (this._browser.isMultiremote) {\n             return Promise.all(Object.keys(this._capabilities).map(async (browserName) => {\n                 const multiRemoteBrowser = (this._browser as WebdriverIO.MultiRemoteBrowser).getInstance(browserName)\n-                return multiRemoteBrowser.execute(annotation)\n+                return multiRemoteBrowser.executeScript(annotation, [])\n             }))\n         }\n \n-        return (this._browser as WebdriverIO.Browser).execute(annotation)\n+        return (this._browser as WebdriverIO.Browser).executeScript(annotation, [])\n     }\n \n     private async _setJobName(suiteTitle: string | undefined) {\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex 54f7fb60eb9..90796b89b7f 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -288,6 +288,9 @@ importers:\n       '@wdio/repl':\n         specifier: workspace:*\n         version: link:../packages/wdio-repl\n+      '@wdio/sauce-service':\n+        specifier: workspace:*\n+        version: link:../packages/wdio-sauce-service\n       '@wdio/shared-store-service':\n         specifier: workspace:*\n         version: link:../packages/wdio-shared-store-service\n",
    "test_patch": "diff --git a/e2e/package.json b/e2e/package.json\nindex e94bb286d17..ef4037ea7d8 100644\n--- a/e2e/package.json\n+++ b/e2e/package.json\n@@ -58,6 +58,7 @@\n     \"@wdio/local-runner\": \"workspace:*\",\n     \"@wdio/mocha-framework\": \"workspace:*\",\n     \"@wdio/repl\": \"workspace:*\",\n+    \"@wdio/sauce-service\": \"workspace:*\",\n     \"@wdio/shared-store-service\": \"workspace:*\",\n     \"@wdio/spec-reporter\": \"workspace:*\",\n     \"@wdio/types\": \"workspace:*\",\n\ndiff --git a/e2e/wdio/wdio.sauce.conf.ts b/e2e/wdio/wdio.sauce.conf.ts\nindex 60b2d186518..fc68475cd7a 100644\n--- a/e2e/wdio/wdio.sauce.conf.ts\n+++ b/e2e/wdio/wdio.sauce.conf.ts\n@@ -13,6 +13,7 @@ export const config: WebdriverIO.Config = {\n      * Sauce specific config\n      */\n     specs: [path.resolve(__dirname, 'cloud', '*.e2e.ts')],\n+    services: ['sauce'],\n     capabilities: [{\n         browserName: 'Chrome',\n         browserVersion: 'latest',\n\ndiff --git a/packages/wdio-sauce-service/tests/service.test.ts b/packages/wdio-sauce-service/tests/service.test.ts\nindex e6d6a00060d..ef867ba7fb5 100644\n--- a/packages/wdio-sauce-service/tests/service.test.ts\n+++ b/packages/wdio-sauce-service/tests/service.test.ts\n@@ -62,14 +62,14 @@ vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdi\n let browser: WebdriverIO.MultiRemoteBrowser\n beforeEach(() => {\n     browser = {\n-        execute: vi.fn(),\n+        executeScript: vi.fn(),\n         getInstance: vi.fn().mockImplementation((browserName: string) => {\n             // @ts-expect-error\n             return browser[browserName] as WebdriverIO.Browser\n         }),\n-        chromeA: { sessionId: 'sessionChromeA', execute: vi.fn() },\n-        chromeB: { sessionId: 'sessionChromeB', execute: vi.fn() },\n-        chromeC: { sessionId: 'sessionChromeC', execute: vi.fn() },\n+        chromeA: { sessionId: 'sessionChromeA', executeScript: vi.fn() },\n+        chromeB: { sessionId: 'sessionChromeB', executeScript: vi.fn() },\n+        chromeC: { sessionId: 'sessionChromeC', executeScript: vi.fn() },\n         instances: ['chromeA', 'chromeB', 'chromeC'],\n     } as any as WebdriverIO.MultiRemoteBrowser\n     vi.mocked(log.info).mockClear()\n@@ -1032,7 +1032,7 @@ test('setAnnotation without a browser', async () => {\n     const service = new SauceService({}, {}, {} as any)\n     await service.setAnnotation('foo')\n \n-    expect(browser.execute).toBeCalledTimes(0)\n+    expect(browser.executeScript).toBeCalledTimes(0)\n })\n \n test('setAnnotation', async () => {\n@@ -1042,7 +1042,7 @@ test('setAnnotation', async () => {\n     browser.isMultiremote = false\n     await service.setAnnotation('foo')\n \n-    expect(browser.execute).toBeCalledWith('foo')\n+    expect(browser.executeScript).toBeCalledWith('foo', [])\n })\n \n test('setAnnotation for VDC and RDC with multi remote', async () => {\n@@ -1063,9 +1063,9 @@ test('setAnnotation for VDC and RDC with multi remote', async () => {\n     const browserChromeB = browser.getInstance('chromeB')\n     const browserChromeC = browser.getInstance('chromeC')\n \n-    expect(browserChromeA.execute).toBeCalledWith('sauce:context=foo')\n-    expect(browserChromeB.execute).toBeCalledWith('sauce:context=foo')\n-    expect(browserChromeC.execute).toBeCalledWith('sauce:context=foo')\n+    expect(browserChromeA.executeScript).toBeCalledWith('sauce:context=foo', [])\n+    expect(browserChromeB.executeScript).toBeCalledWith('sauce:context=foo', [])\n+    expect(browserChromeC.executeScript).toBeCalledWith('sauce:context=foo', [])\n })\n \n afterEach(() => {\n\ndiff --git a/packages/wdio-spec-reporter/tests/__snapshots__/index.test.ts.snap b/packages/wdio-spec-reporter/tests/__snapshots__/index.test.ts.snap\nindex f367c2428de..8f02e44f2b9 100644\n--- a/packages/wdio-spec-reporter/tests/__snapshots__/index.test.ts.snap\n+++ b/packages/wdio-spec-reporter/tests/__snapshots__/index.test.ts.snap\n@@ -392,46 +392,6 @@ exports[`SpecReporter > printReport > with normal setup > should print link to S\n ]\n `;\n \n-exports[`SpecReporter > printReport > with normal setup > should print link to Sauce Labs for many regions 3`] = `\n-[\n-  [\n-    \"------------------------------------------------------------------\n-[loremipsum 50 Windows 10 #0-0] Running: loremipsum (v50) on Windows 10\n-[loremipsum 50 Windows 10 #0-0] Session ID: foobar\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] » /foo/bar/loo.e2e.js\n-[loremipsum 50 Windows 10 #0-0] Foo test\n-[loremipsum 50 Windows 10 #0-0]    green ✓ foo\n-[loremipsum 50 Windows 10 #0-0]    green ✓ bar\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] » /bar/foo/loo.e2e.js\n-[loremipsum 50 Windows 10 #0-0] Bar test\n-[loremipsum 50 Windows 10 #0-0]    green ✓ some test\n-[loremipsum 50 Windows 10 #0-0]    red ✖ a failed test\n-[loremipsum 50 Windows 10 #0-0]    red ✖ a failed test with no stack\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] » /bar/loo/foo.e2e.js\n-[loremipsum 50 Windows 10 #0-0] Baz test\n-[loremipsum 50 Windows 10 #0-0]    green ✓ foo bar baz\n-[loremipsum 50 Windows 10 #0-0]    cyan - a skipped test\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] green 4 passing (5s)\n-[loremipsum 50 Windows 10 #0-0] red 1 failing\n-[loremipsum 50 Windows 10 #0-0] cyan 1 skipped\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] 1) Bar test a failed test\n-[loremipsum 50 Windows 10 #0-0] red expected foo to equal bar\n-[loremipsum 50 Windows 10 #0-0] gray Failed test stack trace\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] 2) Bar test a failed test with no stack\n-[loremipsum 50 Windows 10 #0-0] red expected foo to equal bar\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] Check out job at https://app.us-east-4.saucelabs.com/tests/ba86cbcb70774ef8a0757c1702c3bdf9?auth=364414eae3ee11cb8b8bb3fc3e3b5e12\n-\",\n-  ],\n-]\n-`;\n-\n exports[`SpecReporter > printReport > with normal setup > should print link to Sauce Labs job details page for RDC 1`] = `\n [\n   [\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13695",
    "pr_id": 13695,
    "issue_id": 13671,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: browser execute API return an error:  __name is not defined\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\n9.1.2\r\n\r\n### Node.js Version\r\n\r\n20\r\n\r\n### Mode\r\n\r\nStandalone Mode\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\n{\r\n        browserName: 'chrome',\r\n       'wdio:enforceWebDriverClassic': true,\r\n}\r\n```\r\n\r\n\r\n### What happened?\r\n\r\nWith enforceWebDriverClassic capability, browser.execute doesn't work correctly with scripts in parameter.\r\n\r\n`await browser.execute(script.start);`\r\n\r\n### What is your expected behavior?\r\n\r\nNo error\r\n\r\n### How to reproduce the bug.\r\n\r\nTo reproduce this bug\r\n```\r\ngit clone https://github.com/lacell75/cucumber-boilerplate.git\r\ngit checkout executeError  (https://github.com/lacell75/cucumber-boilerplate/tree/executeError)\r\nyarn install\r\nnpx wdio wdio.conf.ts --spec ./src/features/execute.feature\r\n```\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\njavascript error: WebDriverError: javascript error: __name is not defined\r\n  (Session info: chrome=129.0.6668.60) when running \"execute/sync\" with method \"POST\" and args \"function start(){const nAMESPACE=\"toasts\";window[nAMESPACE]={[nAMESPACE]:[]};if(window.sessionStorage?.removeItem){window.sessionStorage.removeItem(nAMESPACE)}function pushToSessionStorage(toast){if(!window.sessionStorage?.setItem){return}const rawData=window.sessionStorage.getItem(nAMESPACE);let parsed;if(rawData){try{parsed=JSON.parse(rawData)}catch(error){throw new Error(`Could not parse sessionStorage data: ${error.message}`)}}else{parsed=[]}if(!parsed.includes(toast))parsed.push(toast);window.sessionStorage.setItem(nAMESPACE,JSON.stringify(parsed))}__name(pushToSessionStorage,\"pushToSessionStorage\");function addToast(toast){toast=toast.replaceAll(/\\s{2,}/gi,\" \").replace(\" \",\"\");if(!window[nAMESPACE].toasts.includes(toast))window[nAMESPACE].toasts.push(toast);pushToSessionStorage(toast)}__name(addToast,\"addToast\");function getNotificationText(){const alerts=document?.querySelectorAll(\"sl-alert\");alerts.forEach(alert=>{const testContext=alert?.textContent;if(testContext){addToast(testContext)}})}__name(getNotificationText,\"getNotificationText\");getNotificationText();setInterval(getNotificationText,2500);console.log(\"Toast Interceptor started\")}\"\r\n    at FetchRequest._request (C:\\2-gitlab\\cucumber-boilerplate\\node_modules\\webdriver\\build\\index.js:1350:19)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n    at async Browser.wrapCommandFn (C:\\2-gitlab\\cucumber-boilerplate\\node_modules\\@wdio\\utils\\build\\index.js:1380:23)     \r\n    at async Browser.wrapCommandFn (C:\\2-gitlab\\cucumber-boilerplate\\node_modules\\@wdio\\utils\\build\\index.js:1380:23)     \r\n    at async World.<anonymous> (C:\\2-gitlab\\cucumber-boilerplate\\src\\steps\\given.ts:32:5)\r\n```\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 388,
    "test_files_count": 12,
    "non_test_files_count": 4,
    "pr_changed_files": [
      ".github/workflows/test-testrunner.yml",
      "e2e/attach.test.ts",
      "e2e/wdio/headless/__fixtures__/script.ts",
      "e2e/wdio/headless/classic.e2e.ts",
      "e2e/wdio/wdio.classic.conf.ts",
      "package.json",
      "packages/wdio-spec-reporter/tests/__snapshots__/index.test.ts.snap",
      "packages/webdriverio/src/commands/browser/execute.ts",
      "packages/webdriverio/src/commands/browser/executeAsync.ts",
      "packages/webdriverio/src/polyfill.ts",
      "packages/webdriverio/tests/commands/browser/execute.test.ts",
      "packages/webdriverio/tests/commands/browser/executeAsync.test.ts",
      "packages/webdriverio/tests/commands/browser/scroll.test.ts",
      "packages/webdriverio/tests/commands/element/execute.test.ts",
      "packages/webdriverio/tests/commands/element/executeAsync.test.ts",
      "packages/webdriverio/tests/commands/element/scrollIntoView.test.ts"
    ],
    "pr_changed_test_files": [
      ".github/workflows/test-testrunner.yml",
      "e2e/attach.test.ts",
      "e2e/wdio/headless/__fixtures__/script.ts",
      "e2e/wdio/headless/classic.e2e.ts",
      "e2e/wdio/wdio.classic.conf.ts",
      "packages/wdio-spec-reporter/tests/__snapshots__/index.test.ts.snap",
      "packages/webdriverio/tests/commands/browser/execute.test.ts",
      "packages/webdriverio/tests/commands/browser/executeAsync.test.ts",
      "packages/webdriverio/tests/commands/browser/scroll.test.ts",
      "packages/webdriverio/tests/commands/element/execute.test.ts",
      "packages/webdriverio/tests/commands/element/executeAsync.test.ts",
      "packages/webdriverio/tests/commands/element/scrollIntoView.test.ts"
    ],
    "base_commit": "f94676f83c81c6fa48b22635ddebc8825e812d29",
    "head_commit": "6a919fbfc491983fb7def16d4c614bfde6230579",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13695",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13695",
    "dockerfile": "",
    "pr_merged_at": "2024-10-08T16:23:18.000Z",
    "patch": "diff --git a/package.json b/package.json\nindex e7523deb0bb..1cca8ee814c 100644\n--- a/package.json\n+++ b/package.json\n@@ -53,6 +53,7 @@\n     \"test:e2e:multiremote\": \"cd ./e2e && npx wdio run ./wdio/wdio-multiremote.conf.ts\",\n     \"test:e2e:standalone\": \"vitest --config ./e2e/vitest.config.ts --run\",\n     \"test:e2e:webdriver\": \"cd ./e2e && npx wdio run ./wdio/wdio.local.conf.ts\",\n+    \"test:e2e:classic\": \"cd ./e2e && npx wdio run ./wdio/wdio.classic.conf.ts\",\n     \"test:e2e:cloud\": \"cd ./e2e && npx wdio run ./wdio/wdio.sauce.conf.ts\",\n     \"dev\": \"pnpm -r --filter=@wdio/compiler run build --watch\",\n     \"watch:docs\": \"pnpm docs:generate && cd website && npm i && npm start\",\n\ndiff --git a/packages/webdriverio/src/commands/browser/execute.ts b/packages/webdriverio/src/commands/browser/execute.ts\nindex 3a47b540fce..2e3a9e1971c 100644\n--- a/packages/webdriverio/src/commands/browser/execute.ts\n+++ b/packages/webdriverio/src/commands/browser/execute.ts\n@@ -6,6 +6,7 @@ import { LocalValue } from '../../utils/bidi/value.js'\n import { parseScriptResult } from '../../utils/bidi/index.js'\n import { getContextManager } from '../../context.js'\n import { SCRIPT_PREFIX, SCRIPT_SUFFIX } from '../constant.js'\n+import { NAME_POLYFILL } from '../../polyfill.js'\n \n /**\n  *\n@@ -79,7 +80,10 @@ export async function execute<ReturnValue, InnerArguments extends any[]> (\n      * a function parameter, therefore we need to check if it starts with \"function () {\"\n      */\n     if (typeof script === 'function') {\n-        script = `return (${script}).apply(null, arguments)`\n+        script = `\n+            ${NAME_POLYFILL}\n+            return (${script}).apply(null, arguments)\n+        `\n     }\n \n     return this.executeScript(script, verifyArgsAndStripIfElement(args))\n\ndiff --git a/packages/webdriverio/src/commands/browser/executeAsync.ts b/packages/webdriverio/src/commands/browser/executeAsync.ts\nindex a335b7bd600..35f38ec3153 100644\n--- a/packages/webdriverio/src/commands/browser/executeAsync.ts\n+++ b/packages/webdriverio/src/commands/browser/executeAsync.ts\n@@ -5,6 +5,7 @@ import { verifyArgsAndStripIfElement } from '../../utils/index.js'\n import { LocalValue } from '../../utils/bidi/value.js'\n import { parseScriptResult } from '../../utils/bidi/index.js'\n import { getContextManager } from '../../context.js'\n+import { NAME_POLYFILL } from '../../polyfill.js'\n \n /**\n  * :::warning\n@@ -101,7 +102,10 @@ export async function executeAsync<ReturnValue, InnerArguments extends any[]>(\n      * a function parameter, therefore we need to check if it starts with \"function () {\"\n      */\n     if (typeof script === 'function') {\n-        script = `return (${script}).apply(null, arguments)`\n+        script = `\n+            ${NAME_POLYFILL}\n+            return (${script}).apply(null, arguments)\n+        `\n     }\n \n     return this.executeAsyncScript(script, verifyArgsAndStripIfElement(args))\n\ndiff --git a/packages/webdriverio/src/polyfill.ts b/packages/webdriverio/src/polyfill.ts\nindex e526db70f70..3c98a10a3f3 100644\n--- a/packages/webdriverio/src/polyfill.ts\n+++ b/packages/webdriverio/src/polyfill.ts\n@@ -3,6 +3,12 @@ import logger from '@wdio/logger'\n const polyfillManager = new Map<WebdriverIO.Browser, PolyfillManager>()\n const log = logger('webdriverio:PolyfillManager')\n \n+export const NAME_POLYFILL = (\n+    'var __defProp = Object.defineProperty;' +\n+    'var __name = (target, value) => __defProp(target, \\'name\\', { value, configurable: true });' +\n+    'globalThis.__name = __name;'\n+)\n+\n export function getPolyfillManager(browser: WebdriverIO.Browser) {\n     const existingPolyfillManager = polyfillManager.get(browser)\n     if (existingPolyfillManager) {\n@@ -38,11 +44,7 @@ export class PolyfillManager {\n          * @see https://github.com/evanw/esbuild/issues/2605\n          */\n         const polyfill = () => {\n-            const closure = new Function(\n-                'var __defProp = Object.defineProperty;' +\n-                'var __name = (target, value) => __defProp(target, \\'name\\', { value, configurable: true });' +\n-                'globalThis.__name = __name;'\n-            )\n+            const closure = new Function(NAME_POLYFILL)\n             return closure()\n         }\n \n",
    "test_patch": "diff --git a/.github/workflows/test-testrunner.yml b/.github/workflows/test-testrunner.yml\nindex 73a1d01649a..cd208ed4df6 100644\n--- a/.github/workflows/test-testrunner.yml\n+++ b/.github/workflows/test-testrunner.yml\n@@ -28,7 +28,9 @@ jobs:\n           filename: webdriverio-build.zip\n \n       - name: Testrunner Tests\n-        run: pnpm run test:e2e:testrunner\n+        run: |\n+          pnpm run test:e2e:testrunner\n+          pnpm run test:e2e:classic\n         shell: bash\n \n       - uses: actions/upload-artifact@v4\n\ndiff --git a/e2e/attach.test.ts b/e2e/attach.test.ts\nindex daab144ddc1..dd0531372a6 100644\n--- a/e2e/attach.test.ts\n+++ b/e2e/attach.test.ts\n@@ -7,7 +7,7 @@ import { test, expect } from 'vitest'\n  *   $ npm install webdriverio\n  *\n  */\n-import { remote, attach } from '../packages/webdriverio/build/index.js'\n+import { remote, attach } from 'webdriverio'\n \n test('allow to attach to an existing session', async () => {\n     /**\n\ndiff --git a/e2e/wdio/headless/__fixtures__/script.ts b/e2e/wdio/headless/__fixtures__/script.ts\nnew file mode 100644\nindex 00000000000..3327b94d9e6\n--- /dev/null\n+++ b/e2e/wdio/headless/__fixtures__/script.ts\n@@ -0,0 +1,18 @@\n+export default {\n+    someScript: (param: string) => {\n+        function foo() {\n+            return param\n+        }\n+\n+        return 'Hello World! ' + foo()\n+    },\n+    someAsyncScript: (param: string, cb: (res: string) => void) => {\n+        function foo() {\n+            return param\n+        }\n+\n+        setTimeout(() => {\n+            cb('Hello World! ' + foo())\n+        }, 1000)\n+    }\n+}\n\ndiff --git a/e2e/wdio/headless/classic.e2e.ts b/e2e/wdio/headless/classic.e2e.ts\nnew file mode 100644\nindex 00000000000..6c13387c307\n--- /dev/null\n+++ b/e2e/wdio/headless/classic.e2e.ts\n@@ -0,0 +1,10 @@\n+import { browser } from '@wdio/globals'\n+import scripts from './__fixtures__/script.js'\n+\n+describe('__name polyfill', () => {\n+    it('suppports __name polyfill for classic sessions', async () => {\n+        await browser.url('http://guinea-pig.webdriver.io')\n+        expect(await browser.execute(scripts.someScript, 'foo')).toBe('Hello World! foo')\n+        expect(await browser.executeAsync(scripts.someAsyncScript, 'foo')).toBe('Hello World! foo')\n+    })\n+})\n\ndiff --git a/e2e/wdio/wdio.classic.conf.ts b/e2e/wdio/wdio.classic.conf.ts\nnew file mode 100644\nindex 00000000000..e6f9abbf97a\n--- /dev/null\n+++ b/e2e/wdio/wdio.classic.conf.ts\n@@ -0,0 +1,40 @@\n+import url from 'node:url'\n+import path from 'node:path'\n+\n+const __dirname = path.dirname(url.fileURLToPath(import.meta.url))\n+\n+export const config: WebdriverIO.Config = {\n+    /**\n+     * specify test files\n+     */\n+    specs: [\n+        path.join(__dirname, 'headless', 'classic.e2e.ts')\n+    ],\n+\n+    /**\n+     * capabilities\n+     */\n+    capabilities: [{\n+        browserName: 'chrome',\n+        browserVersion: 'stable',\n+        'wdio:enforceWebDriverClassic': true,\n+        'goog:chromeOptions': {\n+            args: ['headless', 'disable-gpu']\n+        }\n+    }],\n+    bail: 1,\n+\n+    /**\n+     * test configurations\n+     */\n+    logLevel: 'info',\n+    framework: 'mocha',\n+    outputDir: __dirname,\n+\n+    reporters: ['spec'],\n+\n+    mochaOpts: {\n+        ui: 'bdd',\n+        timeout: 60000\n+    }\n+}\n\ndiff --git a/packages/wdio-spec-reporter/tests/__snapshots__/index.test.ts.snap b/packages/wdio-spec-reporter/tests/__snapshots__/index.test.ts.snap\nindex f367c2428de..8f02e44f2b9 100644\n--- a/packages/wdio-spec-reporter/tests/__snapshots__/index.test.ts.snap\n+++ b/packages/wdio-spec-reporter/tests/__snapshots__/index.test.ts.snap\n@@ -392,46 +392,6 @@ exports[`SpecReporter > printReport > with normal setup > should print link to S\n ]\n `;\n \n-exports[`SpecReporter > printReport > with normal setup > should print link to Sauce Labs for many regions 3`] = `\n-[\n-  [\n-    \"------------------------------------------------------------------\n-[loremipsum 50 Windows 10 #0-0] Running: loremipsum (v50) on Windows 10\n-[loremipsum 50 Windows 10 #0-0] Session ID: foobar\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] » /foo/bar/loo.e2e.js\n-[loremipsum 50 Windows 10 #0-0] Foo test\n-[loremipsum 50 Windows 10 #0-0]    green ✓ foo\n-[loremipsum 50 Windows 10 #0-0]    green ✓ bar\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] » /bar/foo/loo.e2e.js\n-[loremipsum 50 Windows 10 #0-0] Bar test\n-[loremipsum 50 Windows 10 #0-0]    green ✓ some test\n-[loremipsum 50 Windows 10 #0-0]    red ✖ a failed test\n-[loremipsum 50 Windows 10 #0-0]    red ✖ a failed test with no stack\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] » /bar/loo/foo.e2e.js\n-[loremipsum 50 Windows 10 #0-0] Baz test\n-[loremipsum 50 Windows 10 #0-0]    green ✓ foo bar baz\n-[loremipsum 50 Windows 10 #0-0]    cyan - a skipped test\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] green 4 passing (5s)\n-[loremipsum 50 Windows 10 #0-0] red 1 failing\n-[loremipsum 50 Windows 10 #0-0] cyan 1 skipped\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] 1) Bar test a failed test\n-[loremipsum 50 Windows 10 #0-0] red expected foo to equal bar\n-[loremipsum 50 Windows 10 #0-0] gray Failed test stack trace\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] 2) Bar test a failed test with no stack\n-[loremipsum 50 Windows 10 #0-0] red expected foo to equal bar\n-[loremipsum 50 Windows 10 #0-0]\n-[loremipsum 50 Windows 10 #0-0] Check out job at https://app.us-east-4.saucelabs.com/tests/ba86cbcb70774ef8a0757c1702c3bdf9?auth=364414eae3ee11cb8b8bb3fc3e3b5e12\n-\",\n-  ],\n-]\n-`;\n-\n exports[`SpecReporter > printReport > with normal setup > should print link to Sauce Labs job details page for RDC 1`] = `\n [\n   [\n\ndiff --git a/packages/webdriverio/tests/commands/browser/execute.test.ts b/packages/webdriverio/tests/commands/browser/execute.test.ts\nindex 9dde2695bd3..2cde1a9104a 100644\n--- a/packages/webdriverio/tests/commands/browser/execute.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/execute.test.ts\n@@ -6,7 +6,7 @@ import { remote } from '../../../src/index.js'\n vi.mock('fetch')\n vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdio/logger')))\n \n-describe('isEnabled test', () => {\n+describe('execute test', () => {\n     it('should execute the script', async () => {\n         const browser = await remote({\n             baseUrl: 'http://foobar.com',\n@@ -18,8 +18,8 @@ describe('isEnabled test', () => {\n         await browser.execute((a, b, c) => a + b + c, 1, 2, 3)\n         expect((vi.mocked(fetch).mock.calls[1][0] as any).pathname)\n             .toBe('/session/foobar-123/execute/sync')\n-        expect(vi.mocked(fetch).mock.calls[1][1]?.body).toMatchObject(JSON.stringify({\n-            script: 'return ((a, b, c) => a + b + c).apply(null, arguments)',\n+        expect(JSON.parse(vi.mocked(fetch).mock.calls[1][1]?.body as string)).toEqual(expect.objectContaining({\n+            script: expect.stringContaining('return ((a, b, c) => a + b + c).apply(null, arguments)'),\n             args: [1, 2, 3]\n         }))\n     })\n\ndiff --git a/packages/webdriverio/tests/commands/browser/executeAsync.test.ts b/packages/webdriverio/tests/commands/browser/executeAsync.test.ts\nindex 8949f8f1993..87b95bd0642 100644\n--- a/packages/webdriverio/tests/commands/browser/executeAsync.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/executeAsync.test.ts\n@@ -5,7 +5,7 @@ import { remote } from '../../../src/index.js'\n vi.mock('fetch')\n vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdio/logger')))\n \n-describe('isEnabled test', () => {\n+describe('executeAsync test', () => {\n     it('should allow to check if an element is enabled', async () => {\n         const browser: WebdriverIO.Browser = await remote({\n             baseUrl: 'http://foobar.com',\n@@ -18,8 +18,8 @@ describe('isEnabled test', () => {\n         // @ts-expect-error mock implementation\n         expect(vi.mocked(fetch).mock.calls[1][0]!.pathname)\n             .toBe('/session/foobar-123/execute/async')\n-        expect(vi.mocked(fetch).mock.calls[1][1]?.body).toMatchObject(JSON.stringify({\n-            script: 'return (() => \"foobar\").apply(null, arguments)',\n+        expect(JSON.parse(vi.mocked(fetch).mock.calls[1][1]?.body as string)).toEqual(expect.objectContaining({\n+            script: expect.stringContaining('return (() => \"foobar\").apply(null, arguments)'),\n             args: [1, 2, 3]\n         }))\n     })\n\ndiff --git a/packages/webdriverio/tests/commands/browser/scroll.test.ts b/packages/webdriverio/tests/commands/browser/scroll.test.ts\nindex 1a1df1be218..8262f95fdb3 100644\n--- a/packages/webdriverio/tests/commands/browser/scroll.test.ts\n+++ b/packages/webdriverio/tests/commands/browser/scroll.test.ts\n@@ -70,7 +70,8 @@ describe('scroll', () => {\n                 [executeCallUrl, executeCallOptions]\n             ] = calls as any\n             expect(executeCallUrl.pathname).toEqual('/session/foobar-123/execute/sync')\n-            expect(JSON.parse(executeCallOptions.body).script).toEqual('return ((x2, y2) => window.scrollBy(x2, y2)).apply(null, arguments)')\n+            expect(JSON.parse(executeCallOptions.body).script).toEqual(\n+                expect.stringContaining('return ((x2, y2) => window.scrollBy(x2, y2)).apply(null, arguments)'))\n             expect(JSON.parse(executeCallOptions.body).args).toHaveLength(2)\n             expect(JSON.parse(executeCallOptions.body).args[0]).toEqual(10)\n             expect(JSON.parse(executeCallOptions.body).args[1]).toEqual(100)\n\ndiff --git a/packages/webdriverio/tests/commands/element/execute.test.ts b/packages/webdriverio/tests/commands/element/execute.test.ts\nindex 7c1ccc8e9f3..e939a142497 100644\n--- a/packages/webdriverio/tests/commands/element/execute.test.ts\n+++ b/packages/webdriverio/tests/commands/element/execute.test.ts\n@@ -19,8 +19,8 @@ describe('execute test', () => {\n         await browser.$('#foo').execute((elem, a, b, c) => (elem.selector as string) + a + b + c, 1, 2, 3)\n         expect((vi.mocked(fetch).mock.calls[1][0] as any).pathname)\n             .toBe('/session/foobar-123/element')\n-        expect(vi.mocked(fetch).mock.calls[2][1]?.body).toMatchObject(JSON.stringify({\n-            script: 'return ((elem, a, b, c) => elem.selector + a + b + c).apply(null, arguments)',\n+        expect(JSON.parse(vi.mocked(fetch).mock.calls[2][1]?.body as string)).toEqual(expect.objectContaining({\n+            script: expect.stringContaining('return ((elem, a, b, c) => elem.selector + a + b + c).apply(null, arguments)'),\n             args: [{ [ELEMENT_KEY]: 'some-elem-123', ELEMENT: 'some-elem-123' }, 1, 2, 3]\n         }))\n     })\n\ndiff --git a/packages/webdriverio/tests/commands/element/executeAsync.test.ts b/packages/webdriverio/tests/commands/element/executeAsync.test.ts\nindex 096e76b4099..6a2fa1278c5 100644\n--- a/packages/webdriverio/tests/commands/element/executeAsync.test.ts\n+++ b/packages/webdriverio/tests/commands/element/executeAsync.test.ts\n@@ -20,8 +20,8 @@ describe('executeAsync test', () => {\n         // @ts-expect-error mock implementation\n         expect(vi.mocked(fetch).mock.calls[1][0]!.pathname)\n             .toBe('/session/foobar-123/element')\n-        expect(vi.mocked(fetch).mock.calls[2][1]?.body).toMatchObject(JSON.stringify({\n-            script: 'return (() => \"foobar\").apply(null, arguments)',\n+        expect(JSON.parse(vi.mocked(fetch).mock.calls[2][1]?.body as string)).toEqual(expect.objectContaining({\n+            script: expect.stringContaining('return (() => \"foobar\").apply(null, arguments)'),\n             args: [{ [ELEMENT_KEY]: 'some-elem-123', ELEMENT: 'some-elem-123' }, 1, 2, 3]\n         }))\n     })\n@@ -36,7 +36,7 @@ describe('executeAsync test', () => {\n \n         const result: string = await browser.$('#foo').executeAsync((elem, a, b, done) => {\n             done(`${elem.ELEMENT}, ${a}${b}`)\n-        }, 'foo', 1)\n+        }, 'foo', 1) as string\n         expect(result).toEqual('some-elem-123, foo1')\n     })\n \n\ndiff --git a/packages/webdriverio/tests/commands/element/scrollIntoView.test.ts b/packages/webdriverio/tests/commands/element/scrollIntoView.test.ts\nindex cc369e7cb40..72aa2085b9b 100644\n--- a/packages/webdriverio/tests/commands/element/scrollIntoView.test.ts\n+++ b/packages/webdriverio/tests/commands/element/scrollIntoView.test.ts\n@@ -102,7 +102,8 @@ describe('scrollIntoView test', () => {\n             expect(calls).toHaveLength(1)\n             const [[executeCallUrl, executeCallOptions]] = calls as any\n             expect(executeCallUrl.pathname).toEqual('/session/foobar-123/execute/sync')\n-            expect(JSON.parse(executeCallOptions.body).script).toEqual('return ((elem, options2) => elem.scrollIntoView(options2)).apply(null, arguments)')\n+            expect(JSON.parse(executeCallOptions.body).script).toEqual(\n+                expect.stringContaining('return ((elem, options2) => elem.scrollIntoView(options2)).apply(null, arguments)'))\n             expect(JSON.parse(executeCallOptions.body).args).toHaveLength(2)\n             expect(JSON.parse(executeCallOptions.body).args[1]).toEqual({ block: 'start', inline: 'nearest' })\n         })\n@@ -113,7 +114,8 @@ describe('scrollIntoView test', () => {\n             expect(calls).toHaveLength(1)\n             const [[executeCallUrl, executeCallOptions]] = calls as any\n             expect(executeCallUrl.pathname).toEqual('/session/foobar-123/execute/sync')\n-            expect(JSON.parse(executeCallOptions.body).script).toEqual('return ((elem, options2) => elem.scrollIntoView(options2)).apply(null, arguments)')\n+            expect(JSON.parse(executeCallOptions.body).script).toEqual(\n+                expect.stringContaining('return ((elem, options2) => elem.scrollIntoView(options2)).apply(null, arguments)'))\n             expect(JSON.parse(executeCallOptions.body).args).toHaveLength(2)\n             expect(JSON.parse(executeCallOptions.body).args[1]).toEqual(true)\n         })\n@@ -124,7 +126,8 @@ describe('scrollIntoView test', () => {\n             expect(calls).toHaveLength(1)\n             const [[executeCallUrl, executeCallOptions]] = calls as any\n             expect(executeCallUrl.pathname).toEqual('/session/foobar-123/execute/sync')\n-            expect(JSON.parse(executeCallOptions.body).script).toEqual('return ((elem, options2) => elem.scrollIntoView(options2)).apply(null, arguments)')\n+            expect(JSON.parse(executeCallOptions.body).script).toEqual(\n+                expect.stringContaining('return ((elem, options2) => elem.scrollIntoView(options2)).apply(null, arguments)'))\n             expect(JSON.parse(executeCallOptions.body).args).toHaveLength(2)\n             expect(JSON.parse(executeCallOptions.body).args[1]).toEqual({ block: 'end', inline: 'center' })\n         })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13694",
    "pr_id": 13694,
    "issue_id": 13692,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: In webdriverio v9, getting element by full tag does not work\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.1.2\n\n### Node.js Version\n\n20\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n_No response_\n\n### What happened?\n\nTests that referenced elements by using things like `<div>` no longer work. Instead, they need to be switched to `div`.\n\n### What is your expected behavior?\n\nThis should either work like it did in v8 or it should be noted as a breaking change for v9.\n\n### How to reproduce the bug.\n\ntest/specs/test.e2e.ts\r\n```js\r\nimport { browser } from '@wdio/globals';\r\n\r\ndescribe('Get element by full tag', () => {\r\n    it('works', async () => {\r\n        await browser.url(`https://example.com/`);\r\n        await $('<div>');\r\n    })\r\n})\r\n```\n\n### Relevant log output\n\n```typescript\n[0-0] Error in \"Get element by full tag.works\"\r\nError: Can't transform classic selector tag name to Bidi selector\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 193,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/utils/index.ts",
      "packages/webdriverio/tests/utils/index.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/utils/index.test.ts"
    ],
    "base_commit": "f94676f83c81c6fa48b22635ddebc8825e812d29",
    "head_commit": "7408c9717dcd6a8888039ace0decab358f870664",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13694",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13694",
    "dockerfile": "",
    "pr_merged_at": "2024-09-30T21:09:41.000Z",
    "patch": "diff --git a/packages/webdriverio/src/utils/index.ts b/packages/webdriverio/src/utils/index.ts\nindex 04bcb1f2874..2cbc6826df4 100644\n--- a/packages/webdriverio/src/utils/index.ts\n+++ b/packages/webdriverio/src/utils/index.ts\n@@ -258,7 +258,7 @@ export function elementPromiseHandler <T extends object>(handle: string, shadowR\n }\n \n export function transformClassicToBidiSelector (using: string, value: string): remote.BrowsingContextCssLocator | remote.BrowsingContextXPathLocator | remote.BrowsingContextInnerTextLocator {\n-    if (using === 'css selector') {\n+    if (using === 'css selector' || using === 'tag name') {\n         return { type: 'css', value }\n     }\n \n",
    "test_patch": "diff --git a/packages/webdriverio/tests/utils/index.test.ts b/packages/webdriverio/tests/utils/index.test.ts\nindex 84cfa0d5eb1..0bcad1dad76 100644\n--- a/packages/webdriverio/tests/utils/index.test.ts\n+++ b/packages/webdriverio/tests/utils/index.test.ts\n@@ -1,7 +1,7 @@\n import { describe, it, expect, vi } from 'vitest'\n import { ELEMENT_KEY } from 'webdriver'\n \n-import { findElement, isStaleElementError, elementPromiseHandler } from '../../src/utils/index.js'\n+import { findElement, isStaleElementError, elementPromiseHandler, transformClassicToBidiSelector } from '../../src/utils/index.js'\n \n vi.mock('is-plain-obj', () => ({\n     default: vi.fn().mockReturnValue(false)\n@@ -124,3 +124,36 @@ it('isStaleElementError', () => {\n     const otherError = new Error('something else')\n     expect(isStaleElementError(otherError)).toBe(false)\n })\n+\n+describe('transformClassicToBidiSelector', () => {\n+    it('transforms classic css selector to BiDi', () => {\n+        const bidiSelector = transformClassicToBidiSelector('css selector', '.red')\n+        expect(bidiSelector.type).toBe('css')\n+        expect(bidiSelector.value).toBe('.red')\n+    })\n+\n+    it('transforms classic tag name selector to BiDi', () => {\n+        const bidiSelector = transformClassicToBidiSelector('tag name', 'div')\n+        expect(bidiSelector.type).toBe('css')\n+        expect(bidiSelector.value).toBe('div')\n+    })\n+\n+    it('transforms classic xpath selector to BiDi', () => {\n+        const bidiSelector = transformClassicToBidiSelector('xpath', '//html/body/section/div[6]/div/span')\n+        expect(bidiSelector.type).toBe('xpath')\n+        expect(bidiSelector.value).toBe('//html/body/section/div[6]/div/span')\n+    })\n+\n+    it('transforms classic link text selector to BiDi', () => {\n+        const bidiSelector = transformClassicToBidiSelector('link text', 'GitHub Repo')\n+        expect(bidiSelector.type).toBe('innerText')\n+        expect(bidiSelector.value).toBe('GitHub Repo')\n+    })\n+\n+    it('transforms classic partial link text selector to BiDi', () => {\n+        const bidiSelector = transformClassicToBidiSelector('partial link text', 'new')\n+        expect(bidiSelector.type).toBe('innerText')\n+        expect(bidiSelector.value).toBe('new')\n+        expect(bidiSelector.matchType).toBe('partial')\n+    })\n+})\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13669",
    "pr_id": 13669,
    "issue_id": 13443,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: WDIO v9 breaks backwards compatibility of `executeAsync` when used with BiDi\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\n20\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\ncapabilities: [\r\n    {\r\n      // capabilities for local browser web tests\r\n      browserName: \"chrome\",\r\n      // \"wdio:enforceWebDriverClassic\": true, - toggled on to check usage differences\r\n    },\r\n  ]\n```\n\n\n### What happened?\n\nToggling `wdio:enforceWebDriverClassic` or using v8 passing a statement string to `browser.executeAsync` executes as expected, example: \r\n\r\n```ts\r\nconst res = await browser.executeAsync(`\r\n    const callback = arguments[arguments.length - 1];\r\n    return Promise.resolve(arguments[0] * 2).then(callback);\r\n`, 6);\r\n\r\nconsole.log({ res }); // 12\r\n```\r\n\r\nWhen using WDIO v9 which defaults to use the BiDi protocol, I get an error: \r\n\r\n```\r\n[0-0] 2024-08-23T17:36:47.136Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[391 bytes]>\",\"awaitPromise\":true,\"arguments\":[{\"type\":\"number\",\"value\":6}],\"target\":{\"context\":\"C510048CD98884A967DA0A57E837406F\"}}\r\n[0-0] {\r\n[0-0]   res: {\r\n[0-0]     error: {\r\n[0-0]       message: \"SyntaxError: Unexpected token 'const'\",\r\n[0-0]       columnNumber: 26,\r\n[0-0]       exception: [Object],\r\n[0-0]       lineNumber: 9,\r\n[0-0]       stackTrace: [Object]\r\n[0-0]     }\r\n[0-0]   }\r\n[0-0] }\r\n```\r\nTo get around this I've had to replace my string with a function: \r\n\r\n```ts\r\nconst res = await browser.executeAsync(function myFunc(...args: any[]) {\r\n  return Promise.resolve(args[0] * 2).then(args[args.length - 1]);\r\n}, 6);\r\n\r\nconsole.log({ res }); // 12\r\n```\r\n\r\nThis appears to have been introduced in: https://github.com/webdriverio/webdriverio/pull/13389\n\n### What is your expected behavior?\n\n`browser.executeAsync` Function to execute as expected regardless if passed as a string or function declaration.\n\n### How to reproduce the bug.\n\nWith WDIO v9 use: \r\n\r\n```ts\r\nconst res = await browser.executeAsync(`\r\n    const callback = arguments[arguments.length - 1];\r\n    return Promise.resolve(arguments[0] * 2).then(callback);\r\n`, 6);\r\n\r\nconsole.log({ res }); // 12\r\n```\n\n### Relevant log output\n\n```typescript\n[0-0] 2024-08-23T17:36:47.136Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[391 bytes]>\",\"awaitPromise\":true,\"arguments\":[{\"type\":\"number\",\"value\":6}],\"target\":{\"context\":\"C510048CD98884A967DA0A57E837406F\"}}\r\n[0-0] {\r\n[0-0]   res: {\r\n[0-0]     error: {\r\n[0-0]       message: \"SyntaxError: Unexpected token 'const'\",\r\n[0-0]       columnNumber: 26,\r\n[0-0]       exception: [Object],\r\n[0-0]       lineNumber: 9,\r\n[0-0]       stackTrace: [Object]\r\n[0-0]     }\r\n[0-0]   }\r\n[0-0] }\r\n```\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 405,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "e2e/wdio/headless/bidi.e2e.ts",
      "packages/webdriverio/src/commands/browser/execute.ts",
      "packages/webdriverio/src/commands/browser/executeAsync.ts"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/bidi.e2e.ts"
    ],
    "base_commit": "b793d5df700ab25ee3f47c8bc2a4ab1fb7387d6f",
    "head_commit": "6d4b8f1df33bc11ee0e027f0efda21d3c87431d2",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13669",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13669",
    "dockerfile": "",
    "pr_merged_at": "2024-09-28T22:59:40.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/execute.ts b/packages/webdriverio/src/commands/browser/execute.ts\nindex 0f105b88efc..3a47b540fce 100644\n--- a/packages/webdriverio/src/commands/browser/execute.ts\n+++ b/packages/webdriverio/src/commands/browser/execute.ts\n@@ -58,8 +58,9 @@ export async function execute<ReturnValue, InnerArguments extends any[]> (\n         const browser = getBrowserObject(this)\n         const contextManager = getContextManager(browser)\n         const context = await contextManager.getCurrentContext()\n+        const userScript = typeof script === 'string' ? new Function(script) : script\n         const functionDeclaration = new Function(`\n-            return (${SCRIPT_PREFIX}${script.toString()}${SCRIPT_SUFFIX}).apply(this, arguments);\n+            return (${SCRIPT_PREFIX}${userScript.toString()}${SCRIPT_SUFFIX}).apply(this, arguments);\n         `).toString()\n         const params: remote.ScriptCallFunctionParameters = {\n             functionDeclaration,\n\ndiff --git a/packages/webdriverio/src/commands/browser/executeAsync.ts b/packages/webdriverio/src/commands/browser/executeAsync.ts\nindex d9ec799a298..a335b7bd600 100644\n--- a/packages/webdriverio/src/commands/browser/executeAsync.ts\n+++ b/packages/webdriverio/src/commands/browser/executeAsync.ts\n@@ -72,12 +72,13 @@ export async function executeAsync<ReturnValue, InnerArguments extends any[]>(\n         const browser = getBrowserObject(this)\n         const contextManager = getContextManager(browser)\n         const context = await contextManager.getCurrentContext()\n+        const userScript = typeof script === 'string' ? new Function(script) : script\n         const functionDeclaration = new Function(`\n             const args = Array.from(arguments)\n             return new Promise(async (resolve, reject) => {\n                 const cb = (result) => resolve(result)\n                 try {\n-                    await (${script.toString()}).apply(this, [...args, cb])\n+                    await (${userScript.toString()}).apply(this, [...args, cb])\n                 } catch (err) {\n                     return reject(err)\n                 }\n",
    "test_patch": "diff --git a/e2e/wdio/headless/bidi.e2e.ts b/e2e/wdio/headless/bidi.e2e.ts\nindex e6141082573..843fdcb13db 100644\n--- a/e2e/wdio/headless/bidi.e2e.ts\n+++ b/e2e/wdio/headless/bidi.e2e.ts\n@@ -214,6 +214,17 @@ describe('bidi e2e test', () => {\n     })\n \n     describe('executeAsync', () => {\n+        it('allows to pass in a string', async () => {\n+            const script = `\n+                const callback = arguments[arguments.length - 1]\n+                Promise.resolve(...arguments)\n+                    .then(() => { return 2 * arguments[0] })\n+                    .then(callback)\n+            `\n+            const res = await browser.executeAsync(script, 2)\n+            expect(res).toBe(4)\n+        })\n+\n         it('works in browser scope', async () => {\n             const result = await browser.executeAsync(function (a, b, c, d, done) {\n                 // browser context - you may not access client or console\n@@ -236,4 +247,12 @@ describe('bidi e2e test', () => {\n             expect(result).toBe(29)\n         })\n     })\n+\n+    describe('execute', () => {\n+        it('allows to pass in a string', async () => {\n+            const script = 'return 2 * arguments[0]'\n+            const res = await browser.execute(script, 2)\n+            expect(res).toBe(4)\n+        })\n+    })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13668",
    "pr_id": 13668,
    "issue_id": 13555,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: v9 browser.mock not returning mock response\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\nlatest\r\n\r\n### Node.js Version\r\n\r\n20.11.1\r\n\r\n### Mode\r\n\r\nWDIO Testrunner\r\n\r\n### Which capabilities are you using?\r\n\r\n_No response_\r\n\r\n### What happened?\r\n\r\nUsing browser.mock in v9 doesn't appear to intercept the network request and therefore doesn't update the reponse. Reverting to version 8.32.3 works as expected\r\n\r\n### What is your expected behavior?\r\n\r\n_No response_\r\n\r\n### How to reproduce the bug.\r\n```\r\ndescribe('Mocking the BBC Sports Page with JS Alert on failure', () => {\r\n    it('should show an alert when navigating to the sports page fails', async () => {\r\n      // Mock the request for the BBC Sports page\r\n      const bbcSportsMock = await browser.mock('https://www.bbc.co.uk/sport', {\r\n        method: 'get',\r\n      });\r\n  \r\n      // Simulate a 500 Internal Server Error\r\n      bbcSportsMock.respond({}, {\r\n        statusCode: 500,\r\n        headers: { 'Content-Type': 'text/html' }\r\n      });\r\n  \r\n      // Navigate to the BBC Sports page\r\n      await browser.url('https://www.bbc.co.uk/sport');\r\n  \r\n      // Inject JavaScript into the page to trigger an alert when there's an error\r\n      await browser.execute(() => {\r\n        // Check if the page failed to load properly (status 500)\r\n        const errorStatus = 500; // Simulated error status\r\n        if (errorStatus === 500) {\r\n          alert('Page failed to load due to server error!');\r\n        }\r\n      });\r\n\r\n      await browser.debug(); // should see the JS alert but don't\r\n    });\r\n  });\r\n```\r\n### Relevant log output\r\n\r\n```typescript\r\nN/A\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 264,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriverio/src/utils/interception/index.ts",
      "packages/webdriverio/tests/utils/interception/index.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/utils/interception/index.test.ts"
    ],
    "base_commit": "b793d5df700ab25ee3f47c8bc2a4ab1fb7387d6f",
    "head_commit": "771a70f7ecb91a9c96b685cd5ee6f22c18c46fab",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13668",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13668",
    "dockerfile": "",
    "pr_merged_at": "2024-09-28T22:59:24.000Z",
    "patch": "diff --git a/packages/webdriverio/src/utils/interception/index.ts b/packages/webdriverio/src/utils/interception/index.ts\nindex cbee84930e5..e5cfb43dd91 100644\n--- a/packages/webdriverio/src/utils/interception/index.ts\n+++ b/packages/webdriverio/src/utils/interception/index.ts\n@@ -216,13 +216,13 @@ export default class WebDriverInterception {\n     #matchesFilterOptions<T extends local.NetworkBeforeRequestSentParameters | local.NetworkResponseCompletedParameters> (request: T) {\n         let isRequestMatching = true\n \n-        if (this.#filterOptions.method) {\n+        if (isRequestMatching && this.#filterOptions.method) {\n             isRequestMatching = typeof this.#filterOptions.method === 'function'\n                 ? this.#filterOptions.method(request.request.method)\n-                : this.#filterOptions.method === request.request.method\n+                : this.#filterOptions.method.toLowerCase() === request.request.method.toLowerCase()\n         }\n \n-        if (this.#filterOptions.requestHeaders) {\n+        if (isRequestMatching && this.#filterOptions.requestHeaders) {\n             isRequestMatching = typeof this.#filterOptions.requestHeaders === 'function'\n                 ? this.#filterOptions.requestHeaders(request.request.headers.reduce((acc, { name, value }) => {\n                     acc[name] = value.type === 'string' ? value.value : Buffer.from(value.value, 'base64').toString()\n@@ -240,7 +240,7 @@ export default class WebDriverInterception {\n                 })\n         }\n \n-        if (this.#filterOptions.responseHeaders && 'response' in request) {\n+        if (isRequestMatching && this.#filterOptions.responseHeaders && 'response' in request) {\n             isRequestMatching = typeof this.#filterOptions.responseHeaders === 'function'\n                 ? this.#filterOptions.responseHeaders(request.response.headers.reduce((acc, { name, value }) => {\n                     acc[name] = value.type === 'string' ? value.value : Buffer.from(value.value, 'base64').toString()\n@@ -258,7 +258,7 @@ export default class WebDriverInterception {\n                 })\n         }\n \n-        if (this.#filterOptions.statusCode && 'response' in request) {\n+        if (isRequestMatching && this.#filterOptions.statusCode && 'response' in request) {\n             isRequestMatching = typeof this.#filterOptions.statusCode === 'function'\n                 ? this.#filterOptions.statusCode(request.response.status)\n                 : this.#filterOptions.statusCode === request.response.status\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/utils/interception/index.test.ts b/packages/webdriverio/tests/utils/interception/index.test.ts\nindex 781f8b0e02a..2040222bf3d 100644\n--- a/packages/webdriverio/tests/utils/interception/index.test.ts\n+++ b/packages/webdriverio/tests/utils/interception/index.test.ts\n@@ -189,4 +189,72 @@ describe('WebDriverInterception', () => {\n         expect(browser.networkContinueRequest).toHaveBeenCalledWith({ request: 123 })\n         expect(browser.networkFailRequest).toHaveBeenCalledTimes(0)\n     })\n+\n+    it('handleResponseStarted', async () => {\n+        const browser: any = new EventEmitter()\n+        browser.sessionSubscribe = vi.fn().mockReturnValue(Promise.resolve())\n+        browser.networkProvideResponse = vi.fn().mockReturnValue(Promise.resolve())\n+        browser.networkAddIntercept = vi.fn().mockReturnValue(Promise.resolve({ intercept: '123' }))\n+        const mock = await WebDriverInterception.initiate('http://foobar.com:1234/foo/bar.html?foo=bar', {\n+            method: 'get',\n+            requestHeaders: { foo: 'bar' },\n+            responseHeaders: { bar: 'foo' },\n+            statusCode: 200\n+        }, browser)\n+        browser.emit('network.responseStarted', {\n+            request: {\n+                url: 'http://foobar.com:1234/foo/bar.html?foo=bar',\n+                method: 'GET',\n+                headers: [{ name: 'foo', value: { type: 'string', value: 'bar' } }]\n+            }\n+        })\n+        expect(browser.networkProvideResponse).toHaveBeenCalledTimes(0)\n+\n+        browser.emit('network.responseStarted', {\n+            isBlocked: true,\n+            request: {\n+                url: 'http://foobar.com:1234/foo/bar.html?foo=bar',\n+                method: 'GET',\n+                request: 123,\n+                headers: [{ name: 'foo', value: { type: 'string', value: 'bar' } }]\n+            }\n+        })\n+        expect(browser.networkProvideResponse).toHaveBeenCalledTimes(1)\n+        expect(browser.networkProvideResponse).toHaveBeenCalledWith({\n+            request: 123,\n+        })\n+        vi.mocked(browser.networkProvideResponse).mockClear()\n+\n+        mock.respondOnce({ foo: 'bar' })\n+        browser.emit('network.responseStarted', {\n+            isBlocked: true,\n+            request: {\n+                url: 'http://foobar.com:1234/foo/bar.html?foo=bar',\n+                method: 'GET',\n+                request: 123,\n+                headers: [{ name: 'foo', value: { type: 'string', value: 'bar' } }]\n+            }\n+        })\n+        expect(browser.networkProvideResponse).toHaveBeenCalledTimes(1)\n+        expect(browser.networkProvideResponse).toHaveBeenCalledWith({\n+            request: 123,\n+            body: {\n+                type: 'string',\n+                value: JSON.stringify({ foo: 'bar' })\n+            }\n+        })\n+        browser.emit('network.responseStarted', {\n+            isBlocked: true,\n+            request: {\n+                url: 'http://foobar.com:1234/foo/bar.html?foo=bar',\n+                method: 'GET',\n+                request: 123,\n+                headers: [{ name: 'foo', value: { type: 'string', value: 'bar' } }]\n+            }\n+        })\n+        expect(browser.networkProvideResponse).toHaveBeenCalledTimes(2)\n+        expect(browser.networkProvideResponse).toHaveBeenCalledWith({\n+            request: 123\n+        })\n+    })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13667",
    "pr_id": 13667,
    "issue_id": 13553,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: v9: TypeError: fetch failed (ECONNREFUSED)\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.0.9\n\n### Node.js Version\n\n18.20.4\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\r\n  'wdio:maxInstances': 1,\r\n  'wdio:enforceWebDriverClassic': true,\r\n  browserName: 'chrome',\r\n  browserVersion: '123',\r\n  'goog:chromeOptions': {\r\n    args: ['--disable-http2', '--headless', '--disable-dev-shm-usage', '--disable-gpu', '--no-sandbox', '--disable-extensions', '--accept-lang=de'],\r\n    prefs: {\r\n      'intl.accept_languages': 'de-DE',\r\n      'download.prompt_for_download': false,\r\n      'download.directory_upgrade': true,\r\n      'download.default_directory': pathToDownloadDirectory\r\n    }\r\n  },\r\n  acceptInsecureCerts: true\r\n}\n```\n\n\n### What happened?\n\nSporadically, the following error occurs:\r\n\r\n    TypeError: fetch failed\r\n\r\n    error properties: Object({ cause: Error: connect ECONNREFUSED 127.0.0.1:62837 })\r\n        at node:internal/deps/undici/undici:12618:11\r\n    Caused by: Error: connect ECONNREFUSED 127.0.0.1:62837\r\n    error properties: Object({ errno: -4078, code: 'ECONNREFUSED', syscall: 'connect', address: '127.0.0.1', port: 62837 })\r\n        at __node_internal_captureLargerStackTrace (node:internal/errors:496:5)\r\n        at __node_internal_exceptionWithHostPort (node:internal/errors:671:12)\r\n        at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)\r\n\r\nWe have a large number of tests and I couldn't find a pattern which tests fail and which not. It seems to be completely random. I even ran the tests on different machines, the error occurs seemingly on any machine (at least Windows 10 and 11).\r\n\r\nThe error did not occur with webdriverio 8.\n\n### What is your expected behavior?\n\nThe error should not occur.\n\n### How to reproduce the bug.\n\nI am not able to create a reproducible example since the error seems to occur completely randomly.\n\n### Relevant log output\n\n```typescript\nTypeError: fetch failed\r\n\r\nerror properties: Object({ cause: Error: connect ECONNREFUSED 127.0.0.1:62837 })\r\n    at node:internal/deps/undici/undici:12618:11\r\nCaused by: Error: connect ECONNREFUSED 127.0.0.1:62837\r\nerror properties: Object({ errno: -4078, code: 'ECONNREFUSED', syscall: 'connect', address: '127.0.0.1', port: 62837 })\r\n    at __node_internal_captureLargerStackTrace (node:internal/errors:496:5)\r\n    at __node_internal_exceptionWithHostPort (node:internal/errors:671:12)\r\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 370,
    "test_files_count": 6,
    "non_test_files_count": 9,
    "pr_changed_files": [
      "e2e/attach.test.ts",
      "e2e/browser-runner/lit.test.js",
      "packages/wdio-types/src/Options.ts",
      "packages/webdriver/src/command.ts",
      "packages/webdriver/src/constants.ts",
      "packages/webdriver/src/request/constants.ts",
      "packages/webdriver/src/request/error.ts",
      "packages/webdriver/src/request/index.ts",
      "packages/webdriver/src/request/request.ts",
      "packages/webdriver/src/request/types.ts",
      "packages/webdriver/src/utils.ts",
      "packages/webdriver/tests/__snapshots__/utils.test.ts.snap",
      "packages/webdriver/tests/request.test.ts",
      "packages/webdriver/tests/request/error.test.ts",
      "packages/webdriver/tests/utils.test.ts"
    ],
    "pr_changed_test_files": [
      "e2e/attach.test.ts",
      "e2e/browser-runner/lit.test.js",
      "packages/webdriver/tests/__snapshots__/utils.test.ts.snap",
      "packages/webdriver/tests/request.test.ts",
      "packages/webdriver/tests/request/error.test.ts",
      "packages/webdriver/tests/utils.test.ts"
    ],
    "base_commit": "b793d5df700ab25ee3f47c8bc2a4ab1fb7387d6f",
    "head_commit": "06f24b3cbac6ed1968d42cec20caff81bdaa11f8",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13667",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13667",
    "dockerfile": "",
    "pr_merged_at": "2024-09-28T23:05:27.000Z",
    "patch": "diff --git a/packages/wdio-types/src/Options.ts b/packages/wdio-types/src/Options.ts\nindex 17c18e391ae..08cf6ab398c 100644\n--- a/packages/wdio-types/src/Options.ts\n+++ b/packages/wdio-types/src/Options.ts\n@@ -6,9 +6,9 @@ export type SupportedProtocols = 'webdriver' | './protocol-stub.js'\n \n export type Method = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'HEAD' | 'DELETE' | 'OPTIONS' | 'TRACE' | 'get' | 'post' | 'put' | 'patch' | 'head' | 'delete' | 'options' | 'trace'\n \n-export interface RequestLibResponse {\n+export interface RequestLibResponse<Body = any> {\n     statusCode: number\n-    body?: any\n+    body?: Body\n     rawBody?: Buffer\n }\n \n\ndiff --git a/packages/webdriver/src/command.ts b/packages/webdriver/src/command.ts\nindex de078e4bdb8..bf9dc0e3826 100644\n--- a/packages/webdriver/src/command.ts\n+++ b/packages/webdriver/src/command.ts\n@@ -1,12 +1,9 @@\n import logger from '@wdio/logger'\n import { commandCallStructure, isValidParameter, getArgumentType } from '@wdio/utils'\n-import {\n-    WebDriverBidiProtocol,\n-    type CommandEndpoint,\n-} from '@wdio/protocols'\n+import { WebDriverBidiProtocol, type CommandEndpoint } from '@wdio/protocols'\n \n import Request from './request/request.js'\n-import type { WebDriverResponse } from './request/index.js'\n+import type { WebDriverResponse } from './request/types.js'\n import type { BaseClient, BidiCommands, BidiResponses } from './types.js'\n \n const log = logger('webdriver')\n\ndiff --git a/packages/webdriver/src/constants.ts b/packages/webdriver/src/constants.ts\nindex 8f9e743e5d3..5bf361d9dd6 100644\n--- a/packages/webdriver/src/constants.ts\n+++ b/packages/webdriver/src/constants.ts\n@@ -143,10 +143,5 @@ export const DEFAULTS: Options.Definition<Required<RemoteConfig>> = {\n     }\n }\n \n-export const REG_EXPS = {\n-    commandName: /.*\\/session\\/[0-9a-f-]+\\/(.*)/,\n-    execFn: /return \\(([\\s\\S]*)\\)\\.apply\\(null, arguments\\)/\n-}\n-\n export const ELEMENT_KEY = 'element-6066-11e4-a52e-4f735466cecf'\n export const SHADOW_ELEMENT_KEY = 'shadow-6066-11e4-a52e-4f735466cecf'\n\ndiff --git a/packages/webdriver/src/request/constants.ts b/packages/webdriver/src/request/constants.ts\nindex e24ed76acef..e52a2401669 100644\n--- a/packages/webdriver/src/request/constants.ts\n+++ b/packages/webdriver/src/request/constants.ts\n@@ -7,5 +7,12 @@ export const RETRYABLE_STATUS_CODES = [408, 413, 429, 500, 502, 503, 504]\n  */\n export const RETRYABLE_ERROR_CODES = [\n     'ETIMEDOUT', 'ECONNRESET', 'EADDRINUSE', 'ECONNREFUSED', 'EPIPE', 'ENOTFOUND',\n-    'ENETUNREACH', 'EAI_AGAIN'\n+    'ENETUNREACH', 'EAI_AGAIN',\n+    // additional error codes we like to retry\n+    'UND_ERR_CONNECT_TIMEOUT'\n ]\n+\n+export const REG_EXPS = {\n+    commandName: /.*\\/session\\/[0-9a-f-]+\\/(.*)/,\n+    execFn: /return \\(([\\s\\S]*)\\)\\.apply\\(null, arguments\\)/\n+}\n\ndiff --git a/packages/webdriver/src/request/error.ts b/packages/webdriver/src/request/error.ts\nnew file mode 100644\nindex 00000000000..94ef0e9e43e\n--- /dev/null\n+++ b/packages/webdriver/src/request/error.ts\n@@ -0,0 +1,146 @@\n+import { transformCommandLogResult } from '@wdio/utils'\n+import type { Options } from '@wdio/types'\n+import { REG_EXPS } from './constants.js'\n+\n+abstract class WebDriverError extends Error {\n+    abstract url: URL\n+    abstract opts: RequestInit\n+\n+    /**\n+     * return timeout error with information about the executing command on which the test hangs\n+     */\n+    computeErrorMessage() {\n+        const cmdName = this.#getExecCmdName()\n+        const cmdArgs = this.#getExecCmdArgs(this.opts)\n+\n+        const cmdInfoMsg = `when running \"${cmdName}\" with method \"${this.opts.method}\"`\n+        const cmdArgsMsg = cmdArgs ? ` and args ${cmdArgs}` : ''\n+\n+        return `WebDriverError: ${this.message} ${cmdInfoMsg}${cmdArgsMsg}`\n+    }\n+\n+    #getExecCmdName(): string {\n+        const { href } = this.url\n+        const res = href.match(REG_EXPS.commandName) || []\n+\n+        return res[1] || href\n+    }\n+\n+    #getExecCmdArgs(requestOptions: RequestInit): string {\n+        const { body: cmdJson }: any = requestOptions\n+\n+        if (typeof cmdJson !== 'object') {\n+            return ''\n+        }\n+\n+        const transformedRes = transformCommandLogResult(cmdJson)\n+\n+        if (typeof transformedRes === 'string') {\n+            return transformedRes\n+        }\n+\n+        if (typeof cmdJson.script === 'string') {\n+            const scriptRes = cmdJson.script.match(REG_EXPS.execFn) || []\n+\n+            return `\"${scriptRes[1] || cmdJson.script}\"`\n+        }\n+\n+        return Object.keys(cmdJson).length ? `\"${JSON.stringify(cmdJson)}\"` : ''\n+    }\n+}\n+\n+export class WebDriverRequestError extends WebDriverError {\n+    url: URL\n+    opts: RequestInit\n+\n+    statusCode?: number\n+    body?: any\n+    code?: string\n+\n+    constructor (err: Error, url: URL, opts: RequestInit) {\n+        let message = err.message\n+        if (err.message === 'fetch failed') {\n+            message = `Failed to fetch [${opts.method}] ${url.href}: please make sure you have a WebDriver compatible server running on ${url.origin}`\n+        }\n+\n+        super(message)\n+        this.url = url\n+        this.opts = opts\n+\n+        const errorCode = typeof err.cause === 'object' && err.cause && 'code' in err.cause && typeof err.cause.code === 'string'\n+            ? err.cause.code\n+            : 'code' in err && typeof err.code === 'string'\n+                ? err.code\n+                : undefined\n+        if (errorCode) {\n+            this.code = errorCode\n+            this.message = errorCode === 'UND_ERR_CONNECT_TIMEOUT'\n+                ? 'Request timed out! Consider increasing the \"connectionRetryTimeout\" option.'\n+                : 'Request failed with error code ' + errorCode\n+        }\n+\n+        this.message = this.computeErrorMessage()\n+    }\n+}\n+\n+export class WebDriverResponseError extends WebDriverError {\n+    url: URL\n+    opts: RequestInit\n+    constructor (response: Options.RequestLibResponse, url: URL, opts: RequestInit) {\n+        const errorObj = !response.body\n+            ? new Error('Response has empty body')\n+            : typeof response.body === 'string' && response.body.length\n+                ? new Error(response.body)\n+                : typeof response.body !== 'object'\n+                    ? new Error('Unknown error')\n+                    : response.body.value || response.body\n+\n+        /**\n+         * e.g. in Firefox or Safari, error are following the following structure:\n+         * ```\n+         * {\n+         *   value: {\n+         *     error: '...',\n+         *     message: '...',\n+         *     stacktrace: '...'\n+         *   }\n+         * }\n+         * ```\n+         */\n+        let errorMessage = errorObj.message || errorObj.error || errorObj.class || 'unknown error'\n+\n+        /**\n+         * Improve Chromedriver's error message for an invalid selector\n+         *\n+         * Chrome:\n+         *  error: 'invalid argument'\n+         * message: 'invalid argument: invalid locator\\n  (Session info: chrome=122.0.6261.94)'\n+         * Firefox:\n+         *  error: 'invalid selector'\n+         *  message: 'Given xpath expression \"//button\" is invalid: NotSupportedError: Operation is not supported'\n+         * Safari:\n+         *  error: 'timeout'\n+         *  message: ''\n+         */\n+        if (typeof errorMessage === 'string' && errorMessage.includes('invalid locator')) {\n+            const requestOptions = opts.body as unknown as { using: string; value: string }\n+            errorMessage = (\n+                `The selector \"${requestOptions.value}\" used with strategy \"${requestOptions.using}\" is invalid!`\n+            )\n+        }\n+\n+        super(errorMessage)\n+        if (errorObj.error) {\n+            this.name = errorObj.error\n+        } else if (errorMessage && errorMessage.includes('stale element reference')) {\n+            this.name = 'stale element reference'\n+        } else {\n+            this.name = errorObj.name || 'WebDriver Error'\n+        }\n+\n+        Error.captureStackTrace(this, WebDriverResponseError)\n+        this.url = url\n+        this.opts = opts\n+        this.message = this.computeErrorMessage()\n+    }\n+}\n\ndiff --git a/packages/webdriver/src/request/index.ts b/packages/webdriver/src/request/index.ts\nindex acb149175e2..86187ac1234 100644\n--- a/packages/webdriver/src/request/index.ts\n+++ b/packages/webdriver/src/request/index.ts\n@@ -7,8 +7,11 @@ import logger from '@wdio/logger'\n import { transformCommandLogResult } from '@wdio/utils'\n import type { Options } from '@wdio/types'\n \n+import  { WebDriverResponseError, type WebDriverRequestError } from './error.js'\n import { RETRYABLE_STATUS_CODES, RETRYABLE_ERROR_CODES } from './constants.js'\n-import { isSuccessfulResponse, getErrorFromResponseBody, getRequestError } from '../utils.js'\n+import type { WebDriverResponse } from './types.js'\n+\n+import { isSuccessfulResponse } from '../utils.js'\n import { DEFAULTS } from '../constants.js'\n import pkg from '../../package.json' with { type: 'json' }\n \n@@ -20,29 +23,6 @@ const ERRORS_TO_EXCLUDE_FROM_RETRY = [\n     'move target out of bounds'\n ]\n \n-export class RequestLibError extends Error {\n-    statusCode?: number\n-    body?: any\n-    code?: string\n-}\n-\n-export interface WebDriverResponse {\n-    value: any\n-    /**\n-     * error case\n-     * https://w3c.github.io/webdriver/webdriver-spec.html#dfn-send-an-error\n-     */\n-    error?: string\n-    message?: string\n-    stacktrace?: string\n-\n-    /**\n-     * JSONWP property\n-     */\n-    status?: number\n-    sessionId?: string\n-}\n-\n export const COMMANDS_WITHOUT_RETRY = [\n     findCommandPathByName('performActions'),\n ]\n@@ -170,7 +150,7 @@ export default abstract class WebDriverRequest extends EventEmitter {\n         const { ...requestLibOptions } = fullRequestOptions\n         const startTime = this._libPerformanceNow()\n         let response = await this._libRequest(url!, requestLibOptions)\n-            .catch((err: RequestLibError) => err)\n+            .catch((err: WebDriverRequestError) => err)\n         const durationMillisecond = this._libPerformanceNow() - startTime\n \n         if (this.#requestTimeout) {\n@@ -182,13 +162,13 @@ export default abstract class WebDriverRequest extends EventEmitter {\n          * @param {Error} error  error object that causes the retry\n          * @param {string} msg   message that is being shown as warning to user\n          */\n-        const retry = (error: Error, msg: string) => {\n+        const retry = (error: Error) => {\n             /**\n              * stop retrying if totalRetryCount was exceeded or there is no reason to\n              * retry, e.g. if sessionId is invalid\n              */\n             if (retryCount >= totalRetryCount || error.message.includes('invalid session id')) {\n-                log.error(`Request failed with status ${response.statusCode} due to ${error}`)\n+                log.error(error.message)\n                 this.emit('response', { error })\n                 this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: false, error, retryCount })\n                 throw error\n@@ -197,7 +177,7 @@ export default abstract class WebDriverRequest extends EventEmitter {\n             ++retryCount\n             this.emit('retry', { error, retryCount })\n             this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: false, error, retryCount })\n-            log.warn(msg)\n+            log.warn(error.message)\n             log.info(`Retrying ${retryCount}/${totalRetryCount}`)\n             return this._request(url, fullRequestOptions, transformResponse, totalRetryCount, retryCount)\n         }\n@@ -206,19 +186,16 @@ export default abstract class WebDriverRequest extends EventEmitter {\n          * handle request errors\n          */\n         if (response instanceof Error) {\n+            const resError = response as WebDriverRequestError\n+\n             /**\n-             * handle timeouts\n+             * retry failed requests\n              */\n-            const errorCode = (response as RequestLibError).code\n-            if (errorCode && RETRYABLE_ERROR_CODES.includes(errorCode)) {\n-                const error = getRequestError(response, fullRequestOptions, url)\n-                return retry(error, 'Request timed out! Consider increasing the \"connectionRetryTimeout\" option.')\n-            }\n-\n-            const statusCode = (response as RequestLibError).statusCode\n-            if (statusCode && RETRYABLE_STATUS_CODES.includes(statusCode)) {\n-                const error = getRequestError(response, fullRequestOptions, url)\n-                return retry(error, 'Request failed with status code ' + statusCode)\n+            if (\n+                (resError.code && RETRYABLE_ERROR_CODES.includes(resError.code)) ||\n+                (resError.statusCode && RETRYABLE_STATUS_CODES.includes(resError.statusCode))\n+            ) {\n+                return retry(resError)\n             }\n \n             /**\n@@ -232,15 +209,17 @@ export default abstract class WebDriverRequest extends EventEmitter {\n             response = transformResponse(response, fullRequestOptions) as RequestLibResponse\n         }\n \n-        const error = getErrorFromResponseBody(response.body, fullRequestOptions.body)\n-\n         /**\n-         * retry connection refused errors\n+         * Resolve only if successful response\n          */\n-        if (error.message === 'java.net.ConnectException: Connection refused: connect') {\n-            return retry(error, 'Connection to Selenium Standalone server was refused.')\n+        if (isSuccessfulResponse(response.statusCode, response.body)) {\n+            this.emit('response', { result: response.body })\n+            this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: true, retryCount })\n+            return response.body\n         }\n \n+        const error = new WebDriverResponseError(response, url, fullRequestOptions)\n+\n         /**\n          * hub commands don't follow standard response formats\n          * and can have empty bodies\n@@ -258,15 +237,6 @@ export default abstract class WebDriverRequest extends EventEmitter {\n             return { value: response.body || null }\n         }\n \n-        /**\n-         * Resolve only if successful response\n-         */\n-        if (isSuccessfulResponse(response.statusCode, response.body)) {\n-            this.emit('response', { result: response.body })\n-            this.emit('performance', { request: fullRequestOptions, durationMillisecond, success: true, retryCount })\n-            return response.body\n-        }\n-\n         /**\n          * stop retrying as this will never be successful.\n          * we will handle this at the elementErrorHandler\n@@ -286,7 +256,7 @@ export default abstract class WebDriverRequest extends EventEmitter {\n             throw error\n         }\n \n-        return retry(error, `Request failed with status ${response.statusCode} due to ${error.message}`)\n+        return retry(error)\n     }\n }\n \n\ndiff --git a/packages/webdriver/src/request/request.ts b/packages/webdriver/src/request/request.ts\nindex 0153a1e2175..5b0a06796f0 100644\n--- a/packages/webdriver/src/request/request.ts\n+++ b/packages/webdriver/src/request/request.ts\n@@ -4,7 +4,8 @@ import dns from 'node:dns'\n \n import type { Options } from '@wdio/types'\n \n-import WebDriverRequest, { RequestLibError } from './index.js'\n+import WebDriverRequest from './index.js'\n+import { WebDriverRequestError } from './error.js'\n \n // As per this https://github.com/node-fetch/node-fetch/issues/1624#issuecomment-1407717012 we are setting ipv4first as default IP resolver.\n // This can be removed when we drop Node18 support.\n@@ -35,9 +36,14 @@ export default class FetchRequest extends WebDriverRequest {\n             } as Options.RequestLibResponse\n         } catch (err: any) {\n             if (!(err instanceof Error)) {\n-                throw new RequestLibError(`Failed to fetch ${url.href}: ${err.message || err || 'Unknown error'}`)\n+                throw new WebDriverRequestError(\n+                    new Error(`Failed to fetch ${url.href}: ${err.message || err || 'Unknown error'}`),\n+                    url,\n+                    opts\n+                )\n             }\n-            throw err\n+\n+            throw new WebDriverRequestError(err, url, opts)\n         }\n     }\n \n\ndiff --git a/packages/webdriver/src/request/types.ts b/packages/webdriver/src/request/types.ts\nnew file mode 100644\nindex 00000000000..839de92dd52\n--- /dev/null\n+++ b/packages/webdriver/src/request/types.ts\n@@ -0,0 +1,16 @@\n+export interface WebDriverResponse {\n+    value: any\n+    /**\n+     * error case\n+     * https://w3c.github.io/webdriver/webdriver-spec.html#dfn-send-an-error\n+     */\n+    error?: string\n+    message?: string\n+    stacktrace?: string\n+\n+    /**\n+     * JSONWP property\n+     */\n+    status?: number\n+    sessionId?: string\n+}\n\ndiff --git a/packages/webdriver/src/utils.ts b/packages/webdriver/src/utils.ts\nindex fef19781570..96fad5ee964 100644\n--- a/packages/webdriver/src/utils.ts\n+++ b/packages/webdriver/src/utils.ts\n@@ -7,16 +7,14 @@ import {\n     WebDriverProtocol, MJsonWProtocol, AppiumProtocol, ChromiumProtocol,\n     SauceLabsProtocol, SeleniumProtocol, GeckoProtocol, WebDriverBidiProtocol\n } from '@wdio/protocols'\n-import { transformCommandLogResult } from '@wdio/utils'\n import { CAPABILITY_KEYS } from '@wdio/protocols'\n import type { Options } from '@wdio/types'\n \n import Request from './request/request.js'\n+import type { WebDriverResponse } from './request/types.js'\n import command from './command.js'\n import { BidiHandler } from './bidi/handler.js'\n import type { Event } from './bidi/localTypes.js'\n-import { REG_EXPS } from './constants.js'\n-import type { WebDriverResponse } from './request/index.js'\n import type { Client, JSONWPCommandError, SessionFlags, RemoteConfig } from './types.js'\n \n const log = logger('webdriver')\n@@ -251,77 +249,6 @@ export function getPrototype ({ isW3C, isChromium, isFirefox, isMobile, isSauce,\n     return prototype\n }\n \n-/**\n- * helper method to determine the error from webdriver response\n- * @param  {Object} body body object\n- * @return {Object} error\n- */\n-export function getErrorFromResponseBody (body: any, requestOptions: any) {\n-    if (!body) {\n-        return new Error('Response has empty body')\n-    }\n-\n-    if (typeof body === 'string' && body.length) {\n-        return new Error(body)\n-    }\n-\n-    if (typeof body !== 'object') {\n-        return new Error('Unknown error')\n-    }\n-\n-    return new CustomRequestError(body, requestOptions)\n-}\n-\n-//Exporting for testability\n-export class CustomRequestError extends Error {\n-    constructor (body: WebDriverResponse, requestOptions: any) {\n-        const errorObj = body.value || body\n-        /**\n-         * e.g. in Firefox or Safari, error are following the following structure:\n-         * ```\n-         * {\n-         *   value: {\n-         *     error: '...',\n-         *     message: '...',\n-         *     stacktrace: '...'\n-         *   }\n-         * }\n-         * ```\n-         */\n-        let errorMessage = errorObj.message || errorObj.error || errorObj.class || 'unknown error'\n-\n-        /**\n-         * Improve Chromedriver's error message for an invalid selector\n-         *\n-         * Chrome:\n-         *  error: 'invalid argument'\n-         * message: 'invalid argument: invalid locator\\n  (Session info: chrome=122.0.6261.94)'\n-         * Firefox:\n-         *  error: 'invalid selector'\n-         *  message: 'Given xpath expression \"//button\" is invalid: NotSupportedError: Operation is not supported'\n-         * Safari:\n-         *  error: 'timeout'\n-         *  message: ''\n-         */\n-        if (typeof errorMessage === 'string' && errorMessage.includes('invalid locator')) {\n-            errorMessage = (\n-                `The selector \"${requestOptions.value}\" used with strategy \"${requestOptions.using}\" is invalid!`\n-            )\n-        }\n-\n-        super(errorMessage)\n-        if (errorObj.error) {\n-            this.name = errorObj.error\n-        } else if (errorMessage && errorMessage.includes('stale element reference')) {\n-            this.name = 'stale element reference'\n-        } else {\n-            this.name = errorObj.name || 'WebDriver Error'\n-        }\n-\n-        Error.captureStackTrace(this, CustomRequestError)\n-    }\n-}\n-\n /**\n  * return all supported flags and return them in a format so we can attach them\n  * to the instance protocol\n@@ -423,49 +350,6 @@ export const getSessionError = (err: JSONWPCommandError, params: Partial<Options\n     return err.message\n }\n \n-/**\n- * return timeout error with information about the executing command on which the test hangs\n- */\n-export function getRequestError(error: Error, requestOptions: RequestInit, url: URL): Error {\n-    const cmdName = getExecCmdName(url)\n-    const cmdArgs = getExecCmdArgs(requestOptions)\n-\n-    const cmdInfoMsg = `when running \"${cmdName}\" with method \"${requestOptions.method}\"`\n-    const cmdArgsMsg = cmdArgs ? ` and args ${cmdArgs}` : ''\n-\n-    const timeoutErr = new Error(`${error.message} ${cmdInfoMsg}${cmdArgsMsg}`)\n-    return Object.assign(timeoutErr, error)\n-}\n-\n-function getExecCmdName(url: URL): string {\n-    const { href } = url\n-    const res = href.match(REG_EXPS.commandName) || []\n-\n-    return res[1] || href\n-}\n-\n-function getExecCmdArgs(requestOptions: RequestInit): string {\n-    const { body: cmdJson }: any = requestOptions\n-\n-    if (typeof cmdJson !== 'object') {\n-        return ''\n-    }\n-\n-    const transformedRes = transformCommandLogResult(cmdJson)\n-\n-    if (typeof transformedRes === 'string') {\n-        return transformedRes\n-    }\n-\n-    if (typeof cmdJson.script === 'string') {\n-        const scriptRes = cmdJson.script.match(REG_EXPS.execFn) || []\n-\n-        return `\"${scriptRes[1] || cmdJson.script}\"`\n-    }\n-\n-    return Object.keys(cmdJson).length ? `\"${JSON.stringify(cmdJson)}\"` : ''\n-}\n-\n /**\n  * Enhance the monad with WebDriver Bidi primitives if a connection can be established successfully\n  * @param socketUrl url to bidi interface\n",
    "test_patch": "diff --git a/e2e/attach.test.ts b/e2e/attach.test.ts\nindex 461a2d284d5..daab144ddc1 100644\n--- a/e2e/attach.test.ts\n+++ b/e2e/attach.test.ts\n@@ -45,5 +45,5 @@ test('allow to attach to an existing session', async () => {\n      */\n     const error = await browser.status().catch((err) => err)\n     expect(error.message).not.toBe('ChromeDriver ready for new sessions.')\n-    expect(error.message).toEqual(expect.stringContaining('fetch failed'))\n+    expect(error.message).toEqual(expect.stringContaining('Request failed with error code ECONNREFUSED'))\n })\n\ndiff --git a/e2e/browser-runner/lit.test.js b/e2e/browser-runner/lit.test.js\nindex 095ae0f962b..791cbcee39d 100644\n--- a/e2e/browser-runner/lit.test.js\n+++ b/e2e/browser-runner/lit.test.js\n@@ -269,7 +269,6 @@ describe('Lit Component testing', () => {\n         const err = await $('input').click().catch((err) => err)\n         expect(err.name).toBe('webdriverio(middleware): element did not become interactable')\n         expect(err.message).toBe('Element <input style=\"display: none;\"> did not become interactable')\n-        expect(err.stack).toContain('at getErrorFromResponseBody')\n     })\n \n     it('intercepts \"element not interactable\" errors and waits for the element to be interactable', async () => {\n\ndiff --git a/packages/webdriver/tests/__snapshots__/utils.test.ts.snap b/packages/webdriver/tests/__snapshots__/utils.test.ts.snap\ndeleted file mode 100644\nindex 3b8aa07d717..00000000000\n--- a/packages/webdriver/tests/__snapshots__/utils.test.ts.snap\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html\n-\n-exports[`utils > CustomRequestError 1`] = `\"The selector \"!!\" used with strategy \"css selector\" is invalid!\"`;\n\ndiff --git a/packages/webdriver/tests/request.test.ts b/packages/webdriver/tests/request.test.ts\nindex b4b3a5591bd..4dd2e0fd93a 100644\n--- a/packages/webdriver/tests/request.test.ts\n+++ b/packages/webdriver/tests/request.test.ts\n@@ -5,7 +5,6 @@ import path from 'node:path'\n import logger from '@wdio/logger'\n import type { Options } from '@wdio/types'\n \n-import * as utils from '../src/utils.js'\n import WebDriverRequest from '../src/request/request.js'\n import { COMMANDS_WITHOUT_RETRY } from '../src/request/index.js'\n \n@@ -249,7 +248,7 @@ describe('webdriver request', () => {\n             })\n \n             const error = await req['_request'](url, opts).catch(err => err)\n-            expect(error.message).toBe('element is not attached to the page document')\n+            expect(error.message).toContain('element is not attached to the page document')\n             expect(vi.mocked(req.emit).mock.calls).toHaveLength(2)\n             expect(req.emit).toHaveBeenNthCalledWith(1, 'response', expect.anything())\n             expect(req.emit).toHaveBeenNthCalledWith(2, 'performance', expect.objectContaining({ success: false }))\n@@ -263,7 +262,9 @@ describe('webdriver request', () => {\n \n             const url = new URL('/empty', baseUrl)\n             const opts = {}\n-            await expect(req['_request'](url, opts)).rejects.toEqual(new Error('Response has empty body'))\n+            await expect(req['_request'](url, opts)).rejects.toEqual(expect.objectContaining({\n+                message: expect.stringContaining('Response has empty body')\n+            }))\n             expect(vi.mocked(req.emit).mock.calls).toHaveLength(2)\n             expect(req.emit).toHaveBeenNthCalledWith(1, 'response', expect.anything())\n             expect(req.emit).toHaveBeenNthCalledWith(2, 'performance', expect.objectContaining({ success: false }))\n@@ -277,7 +278,9 @@ describe('webdriver request', () => {\n \n             const url = new URL('/failing', baseUrl)\n             const opts = {}\n-            await expect(req['_request'](url, opts, undefined, 2)).rejects.toEqual(new Error('unknown error'))\n+            await expect(req['_request'](url, opts, undefined, 2)).rejects.toEqual(expect.objectContaining({\n+                message: expect.stringContaining('unknown error')\n+            }))\n             expect(vi.mocked(req.emit).mock.calls).toHaveLength(6)\n             expect(req.emit).toHaveBeenNthCalledWith(1, 'retry', expect.anything())\n             expect(req.emit).toHaveBeenNthCalledWith(2, 'performance', expect.objectContaining({ success: false }))\n@@ -357,9 +360,6 @@ describe('webdriver request', () => {\n             })\n \n             it('should use error from \"getRequestError\" helper', async () => {\n-                const timeoutErr = new Error('Timeout')\n-                const spy = vi.spyOn(utils, 'getRequestError').mockReturnValue(timeoutErr)\n-\n                 const req = new WebDriverRequest('GET', '/timeout', {}, true)\n                 req.emit = vi.fn()\n                 const reqOpts = {\n@@ -372,15 +372,10 @@ describe('webdriver request', () => {\n                     // ignore error\n                     .catch((e) => e)\n \n-                const url = new URL('/timeout', `${reqOpts.protocol}://${reqOpts.hostname}:${reqOpts.port}`)\n-                expect(spy).toBeCalledTimes(1)\n-                expect(spy).toBeCalledWith(expect.any(Error), expect.objectContaining({ method: 'GET' }), url)\n                 expect(vi.mocked(req.emit).mock.calls).toHaveLength(3)\n                 expect(req.emit).toHaveBeenNthCalledWith(1, 'request', expect.anything())\n-                expect(req.emit).toHaveBeenNthCalledWith(2, 'response', { error: timeoutErr })\n+                expect(req.emit).toHaveBeenNthCalledWith(2, 'response', { error: expect.objectContaining({ code: 'ETIMEDOUT' }) })\n                 expect(req.emit).toHaveBeenNthCalledWith(3, 'performance', expect.objectContaining({ success: false }))\n-\n-                spy.mockRestore()\n             })\n         })\n \n@@ -400,27 +395,26 @@ describe('webdriver request', () => {\n                 (res) => res,\n                 (e) => e\n             )\n-            expect(result).toEqual({ value: { value: {} } })\n+            expect(result).toEqual({ value: {} })\n             expect(reqRetryCnt).toBeCalledTimes(5)\n         })\n \n         it('should retry on connection refused error', async () => {\n             const retryCnt = 7\n-            const req = new WebDriverRequest('POST', '/connectionRefused', {}, true)\n+            const req = new WebDriverRequest('POST', '/connectionRefused', {}, false)\n             const reqRetryCnt = vi.fn()\n             req.on('retry', reqRetryCnt)\n             const result = await req.makeRequest({\n                 protocol: 'https',\n                 hostname: 'localhost',\n                 port: 4445,\n-                path: '/connectionRefused',\n                 connectionRetryCount: retryCnt,\n                 logLevel: 'warn'\n             }, 'foobar').then(\n                 (res) => res,\n                 (e) => e\n             )\n-            expect(result).toEqual({ value: { value: { foo: 'bar' } } })\n+            expect(result).toEqual({ value: { foo: 'bar' } })\n             expect(reqRetryCnt).toBeCalledTimes(5)\n         })\n \n@@ -437,7 +431,7 @@ describe('webdriver request', () => {\n                 (res) => res,\n                 (e) => e\n             )\n-            expect(result.message).toBe('ups')\n+            expect(result.message).toEqual(expect.stringContaining('ups'))\n         })\n     })\n \n\ndiff --git a/packages/webdriver/tests/request/error.test.ts b/packages/webdriver/tests/request/error.test.ts\nnew file mode 100644\nindex 00000000000..a33cc18bd8f\n--- /dev/null\n+++ b/packages/webdriver/tests/request/error.test.ts\n@@ -0,0 +1,209 @@\n+/* eslint-disable quotes */\n+import { URL } from 'node:url'\n+import type { MockedFunction } from 'vitest'\n+import { transformCommandLogResult } from '@wdio/utils'\n+import { describe, it, expect, vi } from 'vitest'\n+\n+import { WebDriverResponseError, WebDriverRequestError } from '../../src/request/error.js'\n+\n+const cmdURL = new URL('http://localhost:1234/session/abc123/url')\n+const init = { method: 'POST' }\n+\n+vi.mock('@wdio/utils')\n+\n+describe('WebDriverResponseError', () => {\n+    it('captures errors without body', () => {\n+        const error = new WebDriverResponseError({} as any, cmdURL, init)\n+        expect(error.message).toBe('WebDriverError: Response has empty body when running \"url\" with method \"POST\"')\n+        expect(error.stack).toMatch('Response has empty body')\n+    })\n+\n+    it('captures errors with unknown body', () => {\n+        const error = new WebDriverResponseError({ body: {} } as any, cmdURL, init)\n+        expect(error.message).toBe('WebDriverError: unknown error when running \"url\" with method \"POST\"')\n+        expect(error.stack).toMatch('unknown error')\n+    })\n+\n+    it('captures Firefox errors', () => {\n+        //Firefox\n+        const error = new WebDriverResponseError({\n+            body: {\n+                value: {\n+                    error: 'foo',\n+                    message: 'bar'\n+                }\n+            }\n+        } as any, cmdURL, init)\n+        expect(error.name).toBe('foo')\n+        expect(error.message).toBe('WebDriverError: bar when running \"url\" with method \"POST\"')\n+    })\n+\n+    it('captures Chrome errors', () => {\n+        const error = new WebDriverResponseError({\n+            body: { value: { message: 'stale element reference' } }\n+        } as any, cmdURL, init)\n+        expect(error.name).toBe('stale element reference')\n+        expect(error.message).toBe('WebDriverError: stale element reference when running \"url\" with method \"POST\"')\n+        expect(error.stack).toMatch('stale element reference')\n+        expect(error.stack).toMatch('stale element reference')\n+    })\n+\n+    it('captures errors with message', () => {\n+        const error = new WebDriverResponseError({\n+            body: { value: { message: 'message error' } }\n+        } as any, cmdURL, init)\n+        expect(error.name).toBe('WebDriver Error')\n+        expect(error.message).toBe('WebDriverError: message error when running \"url\" with method \"POST\"')\n+        expect(error.stack).toMatch('WebDriver Error')\n+        expect(error.stack).toMatch('message')\n+    })\n+\n+    it('captures errors with class', () => {\n+        const error = new WebDriverResponseError({\n+            body: { value: { class: 'class error' } }\n+        } as any, cmdURL, init)\n+        expect(error.name).toBe('WebDriver Error')\n+        expect(error.message).toBe('WebDriverError: class error when running \"url\" with method \"POST\"')\n+        expect(error.stack).toMatch('WebDriver Error')\n+        expect(error.stack).toMatch('class')\n+    })\n+\n+    it('captures errors with name', () => {\n+        const error = new WebDriverResponseError({\n+            body: { value: { name: 'Protocol Error' } }\n+        } as any, cmdURL, init)\n+        expect(error.name).toBe('Protocol Error')\n+        expect(error.message).toBe('WebDriverError: unknown error when running \"url\" with method \"POST\"')\n+        expect(error.stack).toMatch('Protocol Error')\n+        expect(error.stack).toMatch('unknown error')\n+    })\n+\n+    it('captures errors without value', () => {\n+        const error = new WebDriverResponseError({\n+            body: { value: { } }\n+        } as any, cmdURL, init)\n+        expect(error.name).toBe('WebDriver Error')\n+        expect(error.message).toBe('WebDriverError: unknown error when running \"url\" with method \"POST\"')\n+        expect(error.stack).toMatch('WebDriver Error')\n+        expect(error.stack).toMatch('unknown error')\n+    })\n+\n+    it('captures invalid selector errors', () => {\n+        const error = new WebDriverResponseError(\n+            { body: { value: { message: 'invalid locator' } } } as any,\n+            cmdURL,\n+            { body: { using: 'css selector', value: '!!' }, method: 'POST' } as any\n+        )\n+        expect(error.message).toMatchInlineSnapshot(`\"WebDriverError: The selector \"!!\" used with strategy \"css selector\" is invalid! when running \"url\" with method \"POST\" and args \"{\"using\":\"css selector\",\"value\":\"!!\"}\"\"`)\n+    })\n+\n+    it('captures unknown command errors', () => {\n+        const error = new WebDriverResponseError(\n+            {\n+                body: {\n+                    message: 'Command not found: POST /some/command',\n+                    error: 'unknown method',\n+                    name: 'Protocol Error'\n+                }\n+            } as any,\n+            cmdURL,\n+            init\n+        )\n+        expect(error.message).toMatchInlineSnapshot(`\"WebDriverError: Command not found: POST /some/command when running \"url\" with method \"POST\"\"`)\n+        expect(error.name).toBe('unknown method')\n+    })\n+\n+    it('command name as full endpoint', async () => {\n+        const timeoutErr = new WebDriverResponseError(\n+            { body: { message: 'Timeout' } } as any,\n+            new URL('https://localhost:4445/wd/hub/session'),\n+            { method: 'GET' }\n+        )\n+\n+        expect(timeoutErr.message).toEqual(expect.stringMatching('when running \"https://localhost:4445/wd/hub/session\"'))\n+    })\n+\n+    it('command args as stringified object', async () => {\n+        const timeoutErr = new WebDriverResponseError(\n+            { body: { message: 'Timeout' } } as any,\n+            new URL('https://localhost:4445/default/method'),\n+            { method: 'GET', body: { foo: 'bar' } as any }\n+        )\n+\n+        expect(timeoutErr.message).toEqual(\n+            expect.stringMatching(new RegExp(`when running .+ with method .+ and args \"${JSON.stringify({ foo: 'bar' })}\"`))\n+        )\n+    })\n+\n+    it('command args with base64 script', async () => {\n+        (transformCommandLogResult as MockedFunction<any>).mockReturnValueOnce('\"<Script[base64]>\"')\n+\n+        const cmdArgs = { script: Buffer.from('script').toString('base64') }\n+        const reqOpts = { body: cmdArgs, method: 'POST' }\n+\n+        const timeoutErr = new WebDriverResponseError(\n+            { body: { message: 'Timeout' } } as any,\n+            new URL('https://localhost:4445/default/method'),\n+            reqOpts as any\n+        )\n+\n+        expect(timeoutErr.message).toEqual(\n+            expect.stringMatching(/when running .+ with method .+ and args \"<Script\\[base64\\]>\"/)\n+        )\n+    })\n+\n+    it('command args with function script without extra wrapper', async () => {\n+        const cmdArgs = { script: 'return (function() {\\nconsole.log(\"hi\")\\n}).apply(null, arguments)' }\n+        const reqOpts = { body: cmdArgs, method: 'POST' }\n+\n+        const timeoutErr = new WebDriverResponseError(\n+            { body: { message: 'Timeout' } } as any,\n+            new URL('https://localhost:4445/default/method'),\n+            reqOpts as any\n+        )\n+        expect(timeoutErr.message).toEqual(\n+            expect.stringMatching(/when running .+ with method .+ and args \"function\\(\\) {\\nconsole\\.log\\(\"hi\"\\)\\n}/)\n+        )\n+    })\n+\n+    it('command args with base64 screenshot', async () => {\n+        (transformCommandLogResult as MockedFunction<any>).mockReturnValueOnce('\"<Screenshot[base64]>\"')\n+\n+        const cmdArgs = { file: Buffer.from('screen').toString('base64') }\n+        const reqOpts = { body: cmdArgs, method: 'POST' }\n+\n+        const timeoutErr = new WebDriverResponseError(\n+            { body: { message: 'Timeout' } } as any,\n+            new URL('https://localhost:4445/default/method'),\n+            reqOpts as any\n+        )\n+\n+        expect(timeoutErr.message).toEqual(\n+            expect.stringMatching(/when running .+ with method .+ and args \"<Screenshot\\[base64\\]>\"/)\n+        )\n+    })\n+})\n+\n+describe('WebDriverRequestError', () => {\n+    const url = new URL('http://localhost:1234')\n+    const init: any = { method: 'POST' }\n+\n+    it('captures basic error', () => {\n+        const error = new WebDriverRequestError(new Error('ups'), url, init)\n+        expect(error.message).toBe('WebDriverError: ups when running \"http://localhost:1234/\" with method \"POST\"')\n+    })\n+\n+    it('captures fetch errors', () => {\n+        const err = new Error('fetch failed')\n+        err.cause = { code: 'ECONNREFUSED' }\n+        const error = new WebDriverRequestError(err, url, init)\n+        expect(error.message).toBe('WebDriverError: Request failed with error code ECONNREFUSED when running \"http://localhost:1234/\" with method \"POST\"')\n+    })\n+\n+    it('captures timeout errors', () => {\n+        const err = new Error('fetch failed')\n+        err.cause = { code: 'UND_ERR_CONNECT_TIMEOUT' }\n+        const error = new WebDriverRequestError(err, url, init)\n+        expect(error.message).toBe('WebDriverError: Request timed out! Consider increasing the \"connectionRetryTimeout\" option. when running \"http://localhost:1234/\" with method \"POST\"')\n+    })\n+})\n\ndiff --git a/packages/webdriver/tests/utils.test.ts b/packages/webdriver/tests/utils.test.ts\nindex 4c96d2710b7..0f927682595 100644\n--- a/packages/webdriver/tests/utils.test.ts\n+++ b/packages/webdriver/tests/utils.test.ts\n@@ -1,14 +1,10 @@\n import path from 'node:path'\n-import { URL } from 'node:url'\n-import type { MockedFunction } from 'vitest'\n import { describe, it, expect, vi, afterEach } from 'vitest'\n-import { transformCommandLogResult } from '@wdio/utils'\n import type { Capabilities, Options } from '@wdio/types'\n \n import {\n     isSuccessfulResponse, getPrototype, getSessionError,\n-    getErrorFromResponseBody, CustomRequestError, startWebDriverSession,\n-    getRequestError, setupDirectConnect, validateCapabilities\n+    startWebDriverSession, setupDirectConnect, validateCapabilities\n } from '../src/utils.js'\n import type { Client, RemoteConfig } from '../src/types.js'\n \n@@ -98,82 +94,6 @@ describe('utils', () => {\n         expect(typeof saucePrototype.getPageLogs.value).toBe('function')\n     })\n \n-    it('getErrorFromResponseBody', () => {\n-        const emptyBodyError = new Error('Response has empty body')\n-        expect(getErrorFromResponseBody('', {})).toEqual(emptyBodyError)\n-        expect(getErrorFromResponseBody(null, {})).toEqual(emptyBodyError)\n-\n-        const unknownError = new Error('unknown error')\n-        expect(getErrorFromResponseBody({}, {})).toEqual(unknownError)\n-\n-        const nonWebDriverError = new Error('expected')\n-        const expectedError = new Error('expected')\n-        expect(getErrorFromResponseBody('expected', {})).toEqual(nonWebDriverError)\n-        expect(getErrorFromResponseBody({ value: { message: 'expected' } }, {}))\n-            .toEqual(expectedError)\n-        expect(getErrorFromResponseBody({ value: { class: 'expected' } }, {}))\n-            .toEqual(expectedError)\n-        expect(getErrorFromResponseBody({ value: { error: 'expected' } }, {}))\n-            .toEqual(expectedError)\n-\n-        const ieError = new Error('Command not found: POST /some/command')\n-        ieError.name = 'unknown method'\n-        expect(getErrorFromResponseBody({\n-            message: 'Command not found: POST /some/command',\n-            error: 'unknown method',\n-            name: 'Protocol Error'\n-        }, {})).toEqual(ieError)\n-    })\n-\n-    it('CustomRequestError', function () {\n-        //Firefox\n-        let error = new CustomRequestError({\n-            value: {\n-                error: 'foo',\n-                message: 'bar'\n-            }\n-        }, {})\n-        expect(error.name).toBe('foo')\n-        expect(error.message).toBe('bar')\n-\n-        //Chrome\n-        error = new CustomRequestError({ value: { message: 'stale element reference' } }, {})\n-        expect(error.name).toBe('stale element reference')\n-        expect(error.message).toBe('stale element reference')\n-        expect(error.stack).toMatch('stale element reference')\n-        expect(error.stack).toMatch('stale element reference')\n-\n-        error = new CustomRequestError({ value: { message: 'message' } }, {})\n-        expect(error.name).toBe('WebDriver Error')\n-        expect(error.message).toBe('message')\n-        expect(error.stack).toMatch('WebDriver Error')\n-        expect(error.stack).toMatch('message')\n-\n-        error = new CustomRequestError({ value: { class: 'class' } }, {})\n-        expect(error.name).toBe('WebDriver Error')\n-        expect(error.message).toBe('class')\n-        expect(error.stack).toMatch('WebDriver Error')\n-        expect(error.stack).toMatch('class')\n-\n-        error = new CustomRequestError({ value: { name: 'Protocol Error' } }, {})\n-        expect(error.name).toBe('Protocol Error')\n-        expect(error.message).toBe('unknown error')\n-        expect(error.stack).toMatch('Protocol Error')\n-        expect(error.stack).toMatch('unknown error')\n-\n-        error = new CustomRequestError({ value: { } }, {})\n-        expect(error.name).toBe('WebDriver Error')\n-        expect(error.message).toBe('unknown error')\n-        expect(error.stack).toMatch('WebDriver Error')\n-        expect(error.stack).toMatch('unknown error')\n-\n-        error = new CustomRequestError(\n-            { value: { message: 'invalid locator' } },\n-            { using: 'css selector', value: '!!' }\n-        )\n-        expect(error.message).toMatchSnapshot()\n-    })\n-\n     describe('setupDirectConnect', () => {\n         class TestClient implements Client {\n             // @ts-expect-error\n@@ -436,96 +356,6 @@ describe('utils', () => {\n         })\n     })\n \n-    describe('getRequestError', () => {\n-        const mkReqOpts = (opts = {}) => {\n-            return {\n-                method: 'GET',\n-                ...opts\n-            }\n-        }\n-\n-        describe('should return error with', () => {\n-            it('command name as full endpoint', async () => {\n-                const err = new Error('Timeout')\n-                const reqOpts = mkReqOpts({})\n-\n-                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/wd/hub/session'))\n-\n-                expect(timeoutErr.message).toEqual(expect.stringMatching('when running \"https://localhost:4445/wd/hub/session\"'))\n-            })\n-\n-            it('command name in shortened form', async () => {\n-                const err = new Error('Timeout')\n-                const reqOpts = mkReqOpts({})\n-\n-                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/wd/hub/session/abc123/url'))\n-\n-                expect(timeoutErr.message).toEqual(expect.stringMatching('when running \"url\"'))\n-            })\n-\n-            it('command method', async () => {\n-                const err = new Error('Timeout')\n-                const reqOpts = mkReqOpts({ method: 'GET' })\n-\n-                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n-\n-                expect(timeoutErr.message).toEqual(expect.stringMatching(/when running .+ with method \"GET\"/))\n-            })\n-\n-            it('command args as stringified object', async () => {\n-                const err = new Error('Timeout')\n-                const cmdArgs = { foo: 'bar' }\n-                const reqOpts = mkReqOpts({ body: cmdArgs })\n-\n-                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n-\n-                expect(timeoutErr.message).toEqual(\n-                    expect.stringMatching(new RegExp(`when running .+ with method .+ and args \"${JSON.stringify(cmdArgs)}\"`))\n-                )\n-            })\n-\n-            it('command args with base64 script', async () => {\n-                (transformCommandLogResult as MockedFunction<any>).mockReturnValueOnce('\"<Script[base64]>\"')\n-\n-                const err = new Error('Timeout')\n-                const cmdArgs = { script: Buffer.from('script').toString('base64') }\n-                const reqOpts = mkReqOpts({ body: cmdArgs })\n-\n-                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n-\n-                expect(timeoutErr.message).toEqual(\n-                    expect.stringMatching(/when running .+ with method .+ and args \"<Script\\[base64\\]>\"/)\n-                )\n-            })\n-\n-            it('command args with function script without extra wrapper', async () => {\n-                const err = new Error('Timeout')\n-                const cmdArgs = { script: 'return (function() {\\nconsole.log(\"hi\")\\n}).apply(null, arguments)' }\n-                const reqOpts = mkReqOpts({ body: cmdArgs })\n-\n-                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n-\n-                expect(timeoutErr.message).toEqual(\n-                    expect.stringMatching(/when running .+ with method .+ and args \"function\\(\\) {\\nconsole\\.log\\(\"hi\"\\)\\n}/)\n-                )\n-            })\n-\n-            it('command args with base64 screenshot', async () => {\n-                (transformCommandLogResult as MockedFunction<any>).mockReturnValueOnce('\"<Screenshot[base64]>\"')\n-\n-                const err = new Error('Timeout')\n-                const cmdArgs = { file: Buffer.from('screen').toString('base64') }\n-                const reqOpts = mkReqOpts({ body: cmdArgs })\n-\n-                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n-\n-                expect(timeoutErr.message).toEqual(\n-                    expect.stringMatching(/when running .+ with method .+ and args \"<Screenshot\\[base64\\]>\"/)\n-                )\n-            })\n-        })\n-    })\n-\n     describe('validateCapabilities', () => {\n         it('should throw an error if incognito is defined', () => {\n             expect(() => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13659",
    "pr_id": 13659,
    "issue_id": 13442,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: V9: newer versions of V9 break switchWindow functionality\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.0.7\n\n### Node.js Version\n\n20\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\nDefault Chrome within Jasmine boilerplate project attached as an example\n```\n\n\n### What happened?\n\nIn the more recent versions of WebdriverIO V9 ~9.0.7  after updating all my tests that required tab or window switching we failing. Upon investigation there seems to be some regression or breaking change where switchWindow doesn't behave as expected and using the devtools logic of not switchingWindows doesn't work either.\n\n### What is your expected behavior?\n\nI would expect WebdriverIO to be able to switchWindows and context either by default like devtools or by the switchWindow function that worked up until a very recent change.\n\n### How to reproduce the bug.\n\nPull down my forked Jasmine-Boilerplate project and run the two tests with `npm run test:local`\r\nhttps://github.com/DanLambe/jasmine-boilerplate\n\n### Relevant log output\n\n```typescript\n2024-08-23T17:53:58.729Z INFO @wdio/local-runner: Run worker command: run\r\n2024-08-23T17:53:58.735Z DEBUG @wdio/runner: init remote session\r\n2024-08-23T17:53:58.794Z DEBUG @wdio/runner: init remote session\r\n2024-08-23T17:53:58.795Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n2024-08-23T17:53:59.035Z INFO webdriver: Setting up chrome v128.0.6613.84\r\n2024-08-23T17:53:59.085Z INFO webdriver: Using Chromedriver v128.0.6613.84 from cache directory C:\\Users\\sheer\\AppData\\Local\\Temp\r\n2024-08-23T17:54:00.104Z INFO @wdio/utils: Started Chromedriver v128.0.6613.84 with params --port=50122 --allowed-origins=* --allowed-ips=0.0.0.0 in 1309ms on port 50122\r\n2024-08-23T17:54:00.111Z INFO webdriver: [POST] http://localhost:50122/session\r\n2024-08-23T17:54:00.111Z INFO webdriver: DATA {\r\n  capabilities: {\r\n    alwaysMatch: {\r\n      browserName: 'chrome',\r\n      'goog:chromeOptions': [Object],\r\n      webSocketUrl: true\r\n    },\r\n    firstMatch: [ {} ]\r\n  },\r\n  desiredCapabilities: {\r\n    browserName: 'chrome',\r\n    'goog:chromeOptions': {\r\n      binary: 'C:\\\\Users\\\\sheer\\\\AppData\\\\Local\\\\Temp\\\\chrome\\\\win64-128.0.6613.84\\\\chrome-win64\\\\chrome.exe'\r\n    },\r\n    webSocketUrl: true\r\n  }\r\n}\r\n2024-08-23T17:54:00.633Z INFO webdriver: Register BiDi handler for session with id c54c2ea4f9e75c2c31fab1ebd42bf937\r\n2024-08-23T17:54:00.633Z INFO webdriver: Connect to webSocketUrl ws://127.0.0.1:50122/session/c54c2ea4f9e75c2c31fab1ebd42bf937\r\n2024-08-23T17:54:00.637Z INFO webdriver: Connected session to Bidi protocol\r\n2024-08-23T17:54:00.637Z INFO webdriver: Connected session to Bidi protocol\r\n2024-08-23T17:54:00.637Z INFO webdriver: Connected to WebDriver Bidi interface at ws://127.0.0.1:50122/session/c54c2ea4f9e75c2c31fab1ebd42bf937\r\n2024-08-23T17:54:00.637Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[868 bytes]>, contexts: undefined }\r\n2024-08-23T17:54:00.638Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\",\"network.responseCompleted\",\"network.beforeRequestSent\",\"network.fetchError\"]}\r\n2024-08-23T17:54:00.638Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.userPromptOpened\"]}\r\n2024-08-23T17:54:00.639Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\"]}\r\n2024-08-23T17:54:00.639Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"log.entryAdded\"]}\r\n2024-08-23T17:54:00.643Z DEBUG webdriver: BIDI RESULT {\"id\":3,\"result\":{},\"type\":\"success\"}\r\n2024-08-23T17:54:00.643Z DEBUG webdriver: BIDI RESULT {\"id\":4,\"result\":{},\"type\":\"success\"}\r\n2024-08-23T17:54:00.643Z DEBUG webdriver: BIDI RESULT {\"id\":5,\"result\":{},\"type\":\"success\"}\r\n2024-08-23T17:54:00.644Z DEBUG webdriver: BIDI RESULT {\"id\":1,\"result\":{\"script\":\"074bfd66-0d2f-4141-9044-f1813f2e7f51\"},\"type\":\"success\"}\r\n2024-08-23T17:54:00.644Z DEBUG webdriver: BIDI RESULT {\"id\":2,\"result\":{},\"type\":\"success\"}\r\n2024-08-23T17:54:00.647Z DEBUG @wdio/utils:shim: Finished to run \"beforeTest\" hook in 0ms\r\n2024-08-23T17:54:00.648Z INFO webdriver: COMMAND getWindowHandle()\r\n2024-08-23T17:54:00.648Z INFO webdriver: [GET] http://localhost:50122/session/c54c2ea4f9e75c2c31fab1ebd42bf937/window\r\n2024-08-23T17:54:00.650Z INFO webdriver: RESULT 669BC74EFC91B228BDF3DA1B604EE903\r\n2024-08-23T17:54:00.650Z INFO webdriver: BIDI COMMAND browsingContext.navigate {\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\",\"url\":\"http://the-internet.herokuapp.com/windows\",\"wait\":\"complete\"}\r\n2024-08-23T17:54:00.653Z INFO webdriver: COMMAND getWindowHandle()\r\n2024-08-23T17:54:00.653Z INFO webdriver: [GET] http://localhost:50122/session/c54c2ea4f9e75c2c31fab1ebd42bf937/window\r\n2024-08-23T17:54:00.655Z INFO webdriver: RESULT 669BC74EFC91B228BDF3DA1B604EE903\r\n2024-08-23T17:54:00.655Z INFO webdriverio:ContextManager: Update current context: 669BC74EFC91B228BDF3DA1B604EE903\r\n2024-08-23T17:54:01.296Z DEBUG webdriver: BIDI RESULT {\"id\":6,\"result\":{\"navigation\":\"bdc7fb1d-fe98-4a3a-be30-44ae64ad36ee\",\"url\":\"https://the-internet.herokuapp.com/windows\"},\"type\":\"success\"}\r\n2024-08-23T17:54:01.297Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//a[normalize-space(text()) = \\\"Click Here\\\"] | .//a[not(.//a[normalize-space(text()) = \\\"Click Here\\\"]) and normalize-space() = \\\"Click Here\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:01.300Z DEBUG webdriver: BIDI RESULT {\"id\":7,\"result\":{\"nodes\":[{\"sharedId\":\"f.669BC74EFC91B228BDF3DA1B604EE903.d.4E5DAB4EF66CD2105A6C51BA356640D9.e.4\",\"type\":\"node\",\"value\":{\"attributes\":{\",\":\"\",\"href\":\"/windows/new\",\"target\":\"_blank\"},\"childNodeCount\":1,\"localName\":\"a\",\"namespaceURI\":\"http://www.w3.org/1999/xhtml\",\"nodeType\":1,\"shadowRoot\":null}}]},\"type\":\"success\"}\r\n2024-08-23T17:54:01.304Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[5338 bytes]>\",\"awaitPromise\":false,\"arguments\":[{\"sharedId\":\"f.669BC74EFC91B228BDF3DA1B604EE903.d.4E5DAB4EF66CD2105A6C51BA356640D9.e.4\"}],\"target\":{\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}}\r\n2024-08-23T17:54:01.307Z DEBUG webdriver: BIDI RESULT {\"id\":8,\"result\":{\"realm\":\"2170561311408543738.7117217003302546026\",\"result\":{\"type\":\"boolean\",\"value\":true},\"type\":\"success\"},\"type\":\"success\"}\r\n2024-08-23T17:54:01.307Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//a[normalize-space(text()) = \\\"Click Here\\\"] | .//a[not(.//a[normalize-space(text()) = \\\"Click Here\\\"]) and normalize-space() = \\\"Click Here\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:01.308Z DEBUG webdriver: BIDI RESULT {\"id\":9,\"result\":{\"nodes\":[{\"sharedId\":\"f.669BC74EFC91B228BDF3DA1B604EE903.d.4E5DAB4EF66CD2105A6C51BA356640D9.e.4\",\"type\":\"node\",\"value\":{\"attributes\":{\",\":\"\",\"href\":\"/windows/new\",\"target\":\"_blank\"},\"childNodeCount\":1,\"localName\":\"a\",\"namespaceURI\":\"http://www.w3.org/1999/xhtml\",\"nodeType\":1,\"shadowRoot\":null}}]},\"type\":\"success\"}\r\n2024-08-23T17:54:01.310Z INFO webdriver: COMMAND elementClick(\"f.669BC74EFC91B228BDF3DA1B604EE903.d.4E5DAB4EF66CD2105A6C51BA356640D9.e.4\")\r\n2024-08-23T17:54:01.310Z INFO webdriver: [POST] http://localhost:50122/session/c54c2ea4f9e75c2c31fab1ebd42bf937/element/f.669BC74EFC91B228BDF3DA1B604EE903.d.4E5DAB4EF66CD2105A6C51BA356640D9.e.4/click\r\n2024-08-23T17:54:01.355Z INFO webdriver: RESULT null\r\n2024-08-23T17:54:01.356Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:01.358Z DEBUG webdriver: BIDI RESULT {\"id\":10,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:01.359Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:01.363Z DEBUG webdriver: BIDI RESULT {\"id\":11,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:01.871Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:01.873Z DEBUG webdriver: BIDI RESULT {\"id\":12,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:02.387Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:02.389Z DEBUG webdriver: BIDI RESULT {\"id\":13,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:02.900Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:02.902Z DEBUG webdriver: BIDI RESULT {\"id\":14,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:03.410Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:03.412Z DEBUG webdriver: BIDI RESULT {\"id\":15,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:03.922Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:03.923Z DEBUG webdriver: BIDI RESULT {\"id\":16,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:04.437Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:04.439Z DEBUG webdriver: BIDI RESULT {\"id\":17,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:04.951Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:04.953Z DEBUG webdriver: BIDI RESULT {\"id\":18,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:05.464Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:05.466Z DEBUG webdriver: BIDI RESULT {\"id\":19,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:05.979Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:05.981Z DEBUG webdriver: BIDI RESULT {\"id\":20,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:06.495Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:06.497Z DEBUG webdriver: BIDI RESULT {\"id\":21,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:07.007Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:07.008Z DEBUG webdriver: BIDI RESULT {\"id\":22,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:07.518Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:07.520Z DEBUG webdriver: BIDI RESULT {\"id\":23,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:08.031Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:08.033Z DEBUG webdriver: BIDI RESULT {\"id\":24,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:08.542Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:08.544Z DEBUG webdriver: BIDI RESULT {\"id\":25,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:09.054Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:09.056Z DEBUG webdriver: BIDI RESULT {\"id\":26,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:09.567Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:09.569Z DEBUG webdriver: BIDI RESULT {\"id\":27,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:10.080Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:10.083Z DEBUG webdriver: BIDI RESULT {\"id\":28,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:10.592Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:10.593Z DEBUG webdriver: BIDI RESULT {\"id\":29,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:11.103Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"xpath\",\"value\":\".//h3[normalize-space(text()) = \\\"New Window\\\"] | .//h3[not(.//h3[normalize-space(text()) = \\\"New Window\\\"]) and normalize-space() = \\\"New Window\\\"]\"},\"context\":\"669BC74EFC91B228BDF3DA1B604EE903\"}\r\n2024-08-23T17:54:11.105Z DEBUG webdriver: BIDI RESULT {\"id\":30,\"result\":{\"nodes\":[]},\"type\":\"success\"}\r\n2024-08-23T17:54:11.618Z DEBUG @wdio/utils:shim: Finished to run \"after\" hook in 0ms\r\n2024-08-23T17:54:11.618Z INFO webdriver: COMMAND deleteSession()\r\n2024-08-23T17:54:11.618Z INFO webdriver: [DELETE] http://localhost:50122/session/c54c2ea4f9e75c2c31fab1ebd42bf937\r\n2024-08-23T17:54:11.645Z INFO webdriver: RESULT null\r\n2024-08-23T17:54:11.645Z INFO webdriver: Kill driver process with PID 35168\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 2242,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "e2e/wdio/headless/test.e2e.ts",
      "packages/webdriverio/src/commands/browser/newWindow.ts",
      "packages/webdriverio/src/commands/browser/switchWindow.ts",
      "packages/webdriverio/src/context.ts"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/test.e2e.ts"
    ],
    "base_commit": "195dccddb6862d2a2d644f52935454f8cb04d98e",
    "head_commit": "28ab95497aa013c807afa3c35f22ba305c7487ac",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13659",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13659",
    "dockerfile": "",
    "pr_merged_at": "2024-09-26T06:20:01.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/newWindow.ts b/packages/webdriverio/src/commands/browser/newWindow.ts\nindex 188a6924631..b89d6b6d862 100644\n--- a/packages/webdriverio/src/commands/browser/newWindow.ts\n+++ b/packages/webdriverio/src/commands/browser/newWindow.ts\n@@ -1,6 +1,7 @@\n import { sleep } from '@wdio/utils'\n \n import newWindowHelper from '../../scripts/newWindow.js'\n+import { getContextManager } from '../../context.js'\n import type { NewWindowOptions } from '../../types.js'\n \n const WAIT_FOR_NEW_HANDLE_TIMEOUT = 3000\n@@ -65,7 +66,9 @@ export async function newWindow (\n     const tabsBefore = await this.getWindowHandles()\n \n     if (this.isBidi) {\n+        const contextManager = getContextManager(this)\n         const { context } = await this.browsingContextCreate({ type: 'window' })\n+        contextManager.setCurrentContext(context)\n         await this.browsingContextNavigate({ context, url })\n     } else {\n         await this.execute(newWindowHelper, url, windowName, windowFeatures)\n\ndiff --git a/packages/webdriverio/src/commands/browser/switchWindow.ts b/packages/webdriverio/src/commands/browser/switchWindow.ts\nindex bfebae366ee..c9a203afd7b 100644\n--- a/packages/webdriverio/src/commands/browser/switchWindow.ts\n+++ b/packages/webdriverio/src/commands/browser/switchWindow.ts\n@@ -1,3 +1,5 @@\n+import { getContextManager } from '../../context.js'\n+\n /**\n  *\n  * Switch focus to a particular tab / window.\n@@ -46,8 +48,10 @@ export async function switchWindow (\n         return !!target.match(matcher)\n     }\n \n+    const contextManager = getContextManager(this)\n     for (const tab of tabs) {\n         await this.switchToWindow(tab)\n+        contextManager.setCurrentContext(tab)\n \n         /**\n          * check if url matches\n\ndiff --git a/packages/webdriverio/src/context.ts b/packages/webdriverio/src/context.ts\nindex d031380a93a..09e956da79f 100644\n--- a/packages/webdriverio/src/context.ts\n+++ b/packages/webdriverio/src/context.ts\n@@ -58,13 +58,16 @@ export class ContextManager {\n      *\n      * @param {local.BrowsingContextNavigationInfo} context  browsing context used to navigate\n      */\n-    #handleNavigationStarted (context: local.BrowsingContextNavigationInfo) {\n-        this.#browser.getWindowHandle().then((windowHandle) => {\n-            if (context.context === windowHandle) {\n-                log.info(`Update current context: ${context.context}`)\n-                this.#currentContext = context.context\n-            }\n-        })\n+    async #handleNavigationStarted (context: local.BrowsingContextNavigationInfo) {\n+        const windowHandle = await this.#browser.getWindowHandle()\n+        if (context.context === windowHandle) {\n+            log.info(`Update current context: ${context.context}`)\n+            this.#currentContext = context.context\n+        }\n+    }\n+\n+    setCurrentContext (context: string) {\n+        this.#currentContext = context\n     }\n \n     async getCurrentContext () {\n",
    "test_patch": "diff --git a/e2e/wdio/headless/test.e2e.ts b/e2e/wdio/headless/test.e2e.ts\nindex 484efd3da5e..0af5e474957 100644\n--- a/e2e/wdio/headless/test.e2e.ts\n+++ b/e2e/wdio/headless/test.e2e.ts\n@@ -431,4 +431,22 @@ describe('main suite 1', () => {\n             await expect($('.new-todo')).toBePresent()\n         })\n     })\n+\n+    describe('context management', () => {\n+        it('should allow user to switch between contexts', async () => {\n+            await browser.url('http://guinea-pig.webdriver.io/')\n+\n+            await browser.newWindow('https://webdriver.io')\n+            await expect($('.hero__subtitle')).toBePresent()\n+            await expect($('.red')).not.toBePresent()\n+\n+            await browser.switchWindow('guinea-pig.webdriver.io')\n+            await expect($('.red')).toBePresent()\n+            await expect($('.hero__subtitle')).not.toBePresent()\n+\n+            await browser.switchWindow('Next-gen browser and mobile automation test framework for Node.js')\n+            await expect($('.hero__subtitle')).toBePresent()\n+            await expect($('.red')).not.toBePresent()\n+        })\n+    })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13657",
    "pr_id": 13657,
    "issue_id": 13467,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Issue with ShadowRootManager after refreshing the page\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\nv9.0.7 (still exists in v9.0.9)\r\n\r\n### Node.js Version\r\n\r\nv20.15.1\r\n\r\n### Mode\r\n\r\nWDIO Testrunner\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\n{\r\n  browserName: 'chrome',\r\n  browserVersion: 'stable',\r\n  maxInstances: 5,\r\n  acceptInsecureCerts: true\r\n}\r\n```\r\n\r\n\r\n### What happened?\r\n\r\nI have a weird behavior where reloading the web page I'm currently on will try registering shadow root elements again, but failed... Resulting in queries to any elements to fail.\r\n\r\n-----\r\n\r\nThe first time the page is loaded we can see that shadow root elements are registered without issues:\r\n```sh\r\nINFO webdriverio:ShadowRootManager: Registered new shadow root for element <demo-app-main /> with id f.CBE533B5B39838B151E5097253DE2415.d.64E1F3AF651C502FA3D66BD3A2329D1B.e.42\r\n...\r\n```\r\nBut after the page is refreshed (ex: with `browser.refresh()`), I have this kind of error:\r\n```sh\r\nINFO webdriverio:ShadowRootManager: Registered new shadow root for element <demo-app-main /> with id f.CBE533B5B39838B151E5097253DE2415.d.E356085DB1150F458CA71F29C40C24BA.e.116\r\nERROR webdriver: Failed parse WebDriver Bidi message: Couldn't find element with id f.CBE533B5B39838B151E5097253DE2415.d.E356085DB1150F458CA71F29C40C24BA.e.117\r\n...\r\n```\r\n\r\n-----\r\n\r\nAnd it seems to happen only with this page : https://badisi.github.io/auth-js/demo-app/ngx-auth/.\r\nBecause I've tried other pages with shadow-dom like this one : https://www.mdui.org/en/docs/2/components/button/, and it's working without issues.\r\n\r\n\r\n\r\n### What is your expected behavior?\r\n\r\n_No response_\r\n\r\n### How to reproduce the bug.\r\n\r\nSimply run this test:\r\n```ts\r\nit('test', async () => {\r\n  await browser.url('https://badisi.github.io/auth-js/demo-app/ngx-auth/');\r\n  await browser.refresh();\r\n  await browser.pause(2000);\r\n});\r\n```\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\nExecution of 1 workers started at 2024-08-26T20:25:12.972Z\r\n\r\n2024-08-26T20:25:12.984Z INFO @wdio/cli:launcher: Run onPrepare hook\r\n2024-08-26T20:25:12.985Z INFO @wdio/utils: Setting up browser driver for: chrome@stable\r\n2024-08-26T20:25:12.997Z INFO @wdio/utils: Setting up browser binaries for: chrome@stable\r\n2024-08-26T20:25:13.126Z INFO webdriver: Using Chromedriver v128.0.6613.84 from cache directory /var/folders/nh/qx9wychn2jzf99lqdw_x7sn40000gp/T\r\n2024-08-26T20:25:13.348Z INFO webdriver: Setting up chrome v128.0.6613.84\r\n2024-08-26T20:25:13.352Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2024-08-26T20:25:13.353Z INFO @wdio/local-runner: Start worker 0-0 with arg: run,wdio.config.ts,--watch=false,--debug=true,--headless=false\r\n2024-08-26T20:25:13.358Z DEBUG @wdio/local-runner: Send command run to worker with cid \"0-0\"\r\n[0-0] 2024-08-26T20:25:14.188Z INFO @wdio/local-runner: Run worker command: run\r\n[0-0] 2024-08-26T20:25:14.196Z DEBUG @wdio/runner: init remote session\r\n[0-0] RUNNING in chrome - file:///src/specs/test.e2e.ts\r\n[0-0] 2024-08-26T20:25:14.286Z DEBUG @wdio/runner: init remote session\r\n[0-0] 2024-08-26T20:25:14.287Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n[0-0] 2024-08-26T20:25:14.645Z INFO webdriver: Setting up chrome v128.0.6613.84\r\n[0-0] 2024-08-26T20:25:14.648Z INFO webdriver: Using Chromedriver v128.0.6613.84 from cache directory /var/folders/nh/qx9wychn2jzf99lqdw_x7sn40000gp/T\r\n[0-0] 2024-08-26T20:25:14.664Z INFO chromedriver: Starting ChromeDriver 128.0.6613.84 (606aa55c7d687518d34b55accc5a71ea0bd28727-refs/branch-heads/6613@{#1335}) on port 62533\r\n[0-0] 2024-08-26T20:25:14.664Z INFO chromedriver: Remote connections are allowed by an allowlist (0.0.0.0).\r\n[0-0] 2024-08-26T20:25:14.664Z INFO chromedriver: Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.\r\n[0-0] 2024-08-26T20:25:14.667Z INFO chromedriver: ChromeDriver was started successfully on port 62533.\r\n[0-0] 2024-08-26T20:25:15.659Z INFO @wdio/utils: Started Chromedriver v128.0.6613.84 with params --port=62533 --allowed-origins=* --allowed-ips=0.0.0.0 in 1371ms on port 62533\r\n[0-0] 2024-08-26T20:25:15.676Z INFO webdriver: [POST] http://localhost:62533/session\r\n[0-0] 2024-08-26T20:25:15.676Z INFO webdriver: DATA {\r\n[0-0]   capabilities: {\r\n[0-0]     alwaysMatch: {\r\n[0-0]       browserName: 'chrome',\r\n[0-0]       browserVersion: 'stable',\r\n[0-0]       acceptInsecureCerts: true,\r\n[0-0]       'goog:chromeOptions': [Object],\r\n[0-0]       webSocketUrl: true\r\n[0-0]     },\r\n[0-0]     firstMatch: [ {} ]\r\n[0-0]   },\r\n[0-0]   desiredCapabilities: {\r\n[0-0]     browserName: 'chrome',\r\n[0-0]     browserVersion: 'stable',\r\n[0-0]     acceptInsecureCerts: true,\r\n[0-0]     'goog:chromeOptions': {\r\n[0-0]       binary: '/var/folders/nh/qx9wychn2jzf99lqdw_x7sn40000gp/T/chrome/mac-128.0.6613.84/chrome-mac-x64/Google Chrome for Testing.app/Contents/MacOS/Google Chrome for Testing',\r\n[0-0]       args: [Array]\r\n[0-0]     },\r\n[0-0]     webSocketUrl: true\r\n[0-0]   }\r\n[0-0] }\r\n[0-0] 2024-08-26T20:25:17.062Z INFO webdriver: Register BiDi handler for session with id 7b8122f2d24c8fd6372001c7af6e6d78\r\n[0-0] 2024-08-26T20:25:17.062Z INFO webdriver: Connect to webSocketUrl ws://127.0.0.1:62533/session/7b8122f2d24c8fd6372001c7af6e6d78\r\n[0-0] 2024-08-26T20:25:17.078Z INFO webdriver: Connected session to Bidi protocol\r\n[0-0] 2024-08-26T20:25:17.079Z INFO webdriver: Connected session to Bidi protocol\r\n[0-0] 2024-08-26T20:25:17.079Z INFO webdriver: Connected to WebDriver Bidi interface at ws://127.0.0.1:62533/session/7b8122f2d24c8fd6372001c7af6e6d78\r\n[0-0] 2024-08-26T20:25:17.082Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[868 bytes]>, contexts: undefined }\r\n[0-0] 2024-08-26T20:25:17.083Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\",\"network.responseCompleted\",\"network.beforeRequestSent\",\"network.fetchError\"]}\r\n[0-0] 2024-08-26T20:25:17.084Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.userPromptOpened\"]}\r\n[0-0] 2024-08-26T20:25:17.084Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\"]}\r\n[0-0] 2024-08-26T20:25:17.084Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"log.entryAdded\"]}\r\n[0-0] 2024-08-26T20:25:17.106Z DEBUG webdriver: BIDI RESULT {\"id\":3,\"result\":{},\"type\":\"success\"}\r\n[0-0] 2024-08-26T20:25:17.107Z DEBUG webdriver: BIDI RESULT {\"id\":4,\"result\":{},\"type\":\"success\"}\r\n[0-0] 2024-08-26T20:25:17.107Z DEBUG webdriver: BIDI RESULT {\"id\":5,\"result\":{},\"type\":\"success\"}\r\n[0-0] 2024-08-26T20:25:17.108Z DEBUG webdriver: BIDI RESULT {\"id\":1,\"result\":{\"script\":\"a45a8b3b-a579-4e35-bea0-21b52613dbb4\"},\"type\":\"success\"}\r\n[0-0] 2024-08-26T20:25:17.111Z DEBUG webdriver: BIDI RESULT {\"id\":2,\"result\":{},\"type\":\"success\"}\r\n[0-0] 2024-08-26T20:25:17.126Z DEBUG @wdio/utils:shim: Finished to run \"beforeTest\" hook in 2ms\r\n[0-0] 2024-08-26T20:25:17.128Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-08-26T20:25:17.128Z INFO webdriver: [GET] http://localhost:62533/session/7b8122f2d24c8fd6372001c7af6e6d78/window\r\n[0-0] 2024-08-26T20:25:17.132Z INFO webdriver: RESULT CBE533B5B39838B151E5097253DE2415\r\n[0-0] 2024-08-26T20:25:17.132Z INFO webdriver: BIDI COMMAND browsingContext.navigate {\"context\":\"CBE533B5B39838B151E5097253DE2415\",\"url\":\"https://badisi.github.io/auth-js/demo-app/ngx-auth/\",\"wait\":\"complete\"}\r\n[0-0] 2024-08-26T20:25:17.149Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-08-26T20:25:17.149Z INFO webdriver: [GET] http://localhost:62533/session/7b8122f2d24c8fd6372001c7af6e6d78/window\r\n[0-0] 2024-08-26T20:25:17.154Z INFO webdriver: RESULT CBE533B5B39838B151E5097253DE2415\r\n[0-0] 2024-08-26T20:25:17.156Z INFO webdriverio:ContextManager: Update current context: CBE533B5B39838B151E5097253DE2415\r\n[0-0] 2024-08-26T20:25:17.514Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-08-26T20:25:17.514Z INFO webdriver: [GET] http://localhost:62533/session/7b8122f2d24c8fd6372001c7af6e6d78/window\r\n[0-0] 2024-08-26T20:25:17.516Z INFO webdriver: RESULT CBE533B5B39838B151E5097253DE2415\r\n[0-0] 2024-08-26T20:25:17.676Z INFO webdriverio:ShadowRootManager: Registered new shadow root for element <demo-app-main /> with id f.CBE533B5B39838B151E5097253DE2415.d.64E1F3AF651C502FA3D66BD3A2329D1B.e.42\r\n[0-0] 2024-08-26T20:25:17.679Z INFO webdriverio:ShadowRootManager: Registered new shadow root for element <demo-app-header /> with id f.CBE533B5B39838B151E5097253DE2415.d.64E1F3AF651C502FA3D66BD3A2329D1B.e.44\r\n[0-0] 2024-08-26T20:25:17.684Z INFO webdriverio:ShadowRootManager: Registered new shadow root for element <demo-app-playground /> with id f.CBE533B5B39838B151E5097253DE2415.d.64E1F3AF651C502FA3D66BD3A2329D1B.e.49\r\n[0-0] 2024-08-26T20:25:17.691Z INFO webdriverio:ShadowRootManager: Registered new shadow root for element <demo-app-debug /> with id f.CBE533B5B39838B151E5097253DE2415.d.64E1F3AF651C502FA3D66BD3A2329D1B.e.51\r\n[0-0] 2024-08-26T20:25:17.700Z INFO webdriverio:ShadowRootManager: Registered new shadow root for element <demo-app-settings /> with id f.CBE533B5B39838B151E5097253DE2415.d.64E1F3AF651C502FA3D66BD3A2329D1B.e.62\r\n[0-0] 2024-08-26T20:25:17.802Z DEBUG webdriver: BIDI RESULT {\"id\":6,\"result\":{\"navigation\":\"4aad26ff-a90f-44a6-94f0-f98808bf9ccd\",\"url\":\"https://badisi.github.io/auth-js/demo-app/ngx-auth/\"},\"type\":\"success\"}\r\n[0-0] 2024-08-26T20:25:17.802Z INFO webdriver: COMMAND refresh()\r\n[0-0] 2024-08-26T20:25:17.802Z INFO webdriver: [POST] http://localhost:62533/session/7b8122f2d24c8fd6372001c7af6e6d78/refresh\r\n[0-0] 2024-08-26T20:25:17.810Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-08-26T20:25:17.811Z INFO webdriver: [GET] http://localhost:62533/session/7b8122f2d24c8fd6372001c7af6e6d78/window\r\n[0-0] 2024-08-26T20:25:17.950Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-08-26T20:25:17.950Z INFO webdriver: [GET] http://localhost:62533/session/7b8122f2d24c8fd6372001c7af6e6d78/window\r\n[0-0] 2024-08-26T20:25:18.046Z INFO webdriverio:ShadowRootManager: Registered new shadow root for element <demo-app-main /> with id f.CBE533B5B39838B151E5097253DE2415.d.E356085DB1150F458CA71F29C40C24BA.e.116\r\n[0-0] 2024-08-26T20:25:18.046Z ERROR webdriver: Failed parse WebDriver Bidi message: Couldn't find element with id f.CBE533B5B39838B151E5097253DE2415.d.E356085DB1150F458CA71F29C40C24BA.e.117\r\n[0-0] 2024-08-26T20:25:18.049Z INFO webdriver: RESULT null\r\n[0-0] 2024-08-26T20:25:18.050Z INFO webdriver: RESULT CBE533B5B39838B151E5097253DE2415\r\n[0-0] 2024-08-26T20:25:18.050Z INFO webdriverio:ContextManager: Update current context: CBE533B5B39838B151E5097253DE2415\r\n[0-0] 2024-08-26T20:25:18.051Z INFO webdriver: RESULT CBE533B5B39838B151E5097253DE2415\r\n[0-0] 2024-08-26T20:25:18.060Z INFO webdriverio:ShadowRootManager: Registered new shadow root for element <demo-app-header /> with id f.CBE533B5B39838B151E5097253DE2415.d.E356085DB1150F458CA71F29C40C24BA.e.118\r\n[0-0] 2024-08-26T20:25:18.060Z ERROR webdriver: Failed parse WebDriver Bidi message: Couldn't find element with id f.CBE533B5B39838B151E5097253DE2415.d.E356085DB1150F458CA71F29C40C24BA.e.116\r\n[0-0] 2024-08-26T20:25:18.061Z INFO webdriverio:ShadowRootManager: Registered new shadow root for element <demo-app-playground /> with id f.CBE533B5B39838B151E5097253DE2415.d.E356085DB1150F458CA71F29C40C24BA.e.119\r\n[0-0] 2024-08-26T20:25:18.061Z ERROR webdriver: Failed parse WebDriver Bidi message: Couldn't find element with id f.CBE533B5B39838B151E5097253DE2415.d.E356085DB1150F458CA71F29C40C24BA.e.117\r\n[0-0] 2024-08-26T20:25:18.067Z INFO webdriverio:ShadowRootManager: Registered new shadow root for element <demo-app-debug /> with id f.CBE533B5B39838B151E5097253DE2415.d.E356085DB1150F458CA71F29C40C24BA.e.121\r\n[0-0] 2024-08-26T20:25:18.068Z ERROR webdriver: Failed parse WebDriver Bidi message: Couldn't find element with id f.CBE533B5B39838B151E5097253DE2415.d.E356085DB1150F458CA71F29C40C24BA.e.117\r\n[0-0] 2024-08-26T20:25:18.076Z INFO webdriverio:ShadowRootManager: Registered new shadow root for element <demo-app-settings /> with id f.CBE533B5B39838B151E5097253DE2415.d.E356085DB1150F458CA71F29C40C24BA.e.122\r\n[0-0] 2024-08-26T20:25:18.077Z ERROR webdriver: Failed parse WebDriver Bidi message: Couldn't find element with id f.CBE533B5B39838B151E5097253DE2415.d.E356085DB1150F458CA71F29C40C24BA.e.117\r\n[0-0] 2024-08-26T20:25:18.110Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-08-26T20:25:18.111Z INFO webdriver: [GET] http://localhost:62533/session/7b8122f2d24c8fd6372001c7af6e6d78/window\r\n[0-0] 2024-08-26T20:25:18.116Z INFO webdriver: RESULT CBE533B5B39838B151E5097253DE2415\r\n[0-0] 2024-08-26T20:25:18.457Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-08-26T20:25:18.457Z INFO webdriver: [GET] http://localhost:62533/session/7b8122f2d24c8fd6372001c7af6e6d78/window\r\n[0-0] 2024-08-26T20:25:18.460Z INFO webdriver: RESULT CBE533B5B39838B151E5097253DE2415\r\n[0-0] 2024-08-26T20:25:18.466Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-08-26T20:25:18.467Z INFO webdriver: [GET] http://localhost:62533/session/7b8122f2d24c8fd6372001c7af6e6d78/window\r\n[0-0] 2024-08-26T20:25:18.469Z INFO webdriver: RESULT CBE533B5B39838B151E5097253DE2415\r\n[0-0] 2024-08-26T20:25:20.055Z DEBUG @wdio/utils:shim: Finished to run \"after\" hook in 0ms\r\n[0-0] 2024-08-26T20:25:20.055Z INFO webdriver: COMMAND deleteSession()\r\n[0-0] 2024-08-26T20:25:20.056Z INFO webdriver: [DELETE] http://localhost:62533/session/7b8122f2d24c8fd6372001c7af6e6d78\r\n[0-0] 2024-08-26T20:25:20.110Z INFO webdriver: RESULT null\r\n[0-0] 2024-08-26T20:25:20.111Z INFO webdriver: Kill driver process with PID 13301\r\n2024-08-26T20:25:20.236Z DEBUG @wdio/local-runner: Runner 0-0 finished with exit code 0\r\n[0-0] PASSED in chrome - file:///src/specs/test.e2e.ts\r\n2024-08-26T20:25:20.237Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\r\n2024-08-26T20:25:20.237Z INFO @wdio/cli:launcher: Run onComplete hook\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 2128,
    "test_files_count": 2,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "e2e/wdio/headless/test.e2e.ts",
      "packages/webdriverio/src/shadowRoot.ts",
      "packages/webdriverio/tests/shadowRoot.test.ts"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/test.e2e.ts",
      "packages/webdriverio/tests/shadowRoot.test.ts"
    ],
    "base_commit": "3d7f248de11df9b4b38319081387963b277a0ce1",
    "head_commit": "98ab872135849e7205f0d66a7b1814d490d5c676",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13657",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13657",
    "dockerfile": "",
    "pr_merged_at": "2024-09-26T05:52:00.000Z",
    "patch": "diff --git a/packages/webdriverio/src/shadowRoot.ts b/packages/webdriverio/src/shadowRoot.ts\nindex b049a68ab8f..de4c0bd4724 100644\n--- a/packages/webdriverio/src/shadowRoot.ts\n+++ b/packages/webdriverio/src/shadowRoot.ts\n@@ -43,10 +43,11 @@ export class ShadowRootManager {\n          * listen on required bidi events\n          */\n         this.#initialize = this.#browser.sessionSubscribe({\n-            events: ['log.entryAdded']\n+            events: ['log.entryAdded', 'browsingContext.navigationStarted']\n         }).then(() => true, () => false)\n         this.#browser.on('log.entryAdded', this.handleLogEntry.bind(this))\n         this.#browser.on('result', this.#commandResultHandler.bind(this))\n+        this.#browser.on('browsingContext.navigationStarted', this.#handleNavigationStarted.bind(this))\n         browser.scriptAddPreloadScript({\n             functionDeclaration: customElementWrapper.toString()\n         })\n@@ -56,6 +57,13 @@ export class ShadowRootManager {\n         return this.#initialize\n     }\n \n+    /**\n+     * keep track of navigation events and remove shadow roots when they are no longer needed\n+     */\n+    #handleNavigationStarted (context: local.BrowsingContextNavigationInfo) {\n+        this.#shadowRoots.delete(context.context)\n+    }\n+\n     /**\n      * keep track of frame depth\n      */\n",
    "test_patch": "diff --git a/e2e/wdio/headless/test.e2e.ts b/e2e/wdio/headless/test.e2e.ts\nindex b86dcab7283..484efd3da5e 100644\n--- a/e2e/wdio/headless/test.e2e.ts\n+++ b/e2e/wdio/headless/test.e2e.ts\n@@ -422,4 +422,13 @@ describe('main suite 1', () => {\n                 .not.toBe(now.toString())\n         })\n     })\n+\n+    describe('shadow root piercing', () => {\n+        it('recognises new shadow root ids when page refreshes', async () => {\n+            await browser.url('https://todomvc.com/examples/lit/dist/')\n+            await expect($('.new-todo')).toBePresent()\n+            await browser.refresh()\n+            await expect($('.new-todo')).toBePresent()\n+        })\n+    })\n })\n\ndiff --git a/packages/webdriverio/tests/shadowRoot.test.ts b/packages/webdriverio/tests/shadowRoot.test.ts\nindex c0f1a3e57c0..61479cf1dec 100644\n--- a/packages/webdriverio/tests/shadowRoot.test.ts\n+++ b/packages/webdriverio/tests/shadowRoot.test.ts\n@@ -31,7 +31,7 @@ describe('ShadowRootManager', () => {\n         process.env.VITEST_WORKER_ID = wid\n         expect(await manager.initialize()).toBe(true)\n         expect(browser.sessionSubscribe).toBeCalledTimes(1)\n-        expect(browser.on).toBeCalledTimes(2)\n+        expect(browser.on).toBeCalledTimes(3)\n         expect(browser.scriptAddPreloadScript).toBeCalledTimes(1)\n     })\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13650",
    "pr_id": 13650,
    "issue_id": 13608,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: v9: junit-reporter: Report is empty\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.0.9\n\n### Node.js Version\n\n18.20.4\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n_No response_\n\n### What happened?\n\nAfter updating wdio including @wdio/junit-reporter to version 9, the generated report is empty:\r\n\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <testsuites tests=\"0\" failures=\"0\" errors=\"0\" skipped=\"0\"/>\r\n\r\nI debugged this and found the reason. [This method](https://github.com/webdriverio/webdriverio/blob/d6c0af67c69e2ccf75bb539b067fafe18f681afc/packages/wdio-junit-reporter/src/index.ts#L364) compares file paths of different types and cases. The first file path (specFileName) has the form `file:///C:/[...]`, the second file path `c:\\[...]`. After the conversion with `fileURLToPath` the paths are `C:\\[...]` and `c:\\[...]`. So the case of the drive letters does not match. Maybe on Windows the comparison should be done case-insensitive.\n\n### What is your expected behavior?\n\nThe report should not be empty.\n\n### How to reproduce the bug.\n\nRun tests with junit-reporter on Windows.\n\n### Relevant log output\n\n```typescript\nNothing\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 224,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-junit-reporter/src/index.ts",
      "packages/wdio-junit-reporter/tests/reporter.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-junit-reporter/tests/reporter.test.ts"
    ],
    "base_commit": "f69315cfee0745d3ec819314a35e031791997fec",
    "head_commit": "a7d73b2bc42aa5c0621b29d771151be92d15fbda",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13650",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13650",
    "dockerfile": "",
    "pr_merged_at": "2024-09-25T15:48:06.000Z",
    "patch": "diff --git a/packages/wdio-junit-reporter/src/index.ts b/packages/wdio-junit-reporter/src/index.ts\nindex a136bd6a2b4..108709632eb 100644\n--- a/packages/wdio-junit-reporter/src/index.ts\n+++ b/packages/wdio-junit-reporter/src/index.ts\n@@ -1,4 +1,5 @@\n import url from 'node:url'\n+import os from 'node:os'\n \n import type { RunnerStats, SuiteStats, TestStats } from '@wdio/reporter'\n import WDIOReporter from '@wdio/reporter'\n@@ -40,9 +41,11 @@ class JunitReporter extends WDIOReporter {\n     private _currentTest?: TestStats\n     private _originalStdoutWrite: Function\n     private _addWorkerLogs: boolean\n+    private _isWindows: boolean\n \n     constructor(public options: JUnitReporterOptions) {\n         super(options)\n+        this._isWindows = os.platform() === 'win32'\n         this._addWorkerLogs = options.addWorkerLogs ?? false\n         this._testToAdditionalInformation = {}\n         this._originalStdoutWrite = process.stdout.write.bind(process.stdout)\n@@ -377,10 +380,20 @@ class JunitReporter extends WDIOReporter {\n     }\n \n     private _sameFileName(file1?: string, file2?: string) {\n+        if (!file1 && !file2) {\n+            // both null -> same\n+            return true\n+        }\n+        if (!file1 || !file2) {\n+            // only one null -> not the same\n+            return false\n+        }\n+\n         // ensure both files are not a file URL\n-        file1 = file1?.startsWith('file://') ? url.fileURLToPath(file1) : file1\n-        file2 = file2?.startsWith('file://') ? url.fileURLToPath(file2) : file2\n-        return file1 === file2\n+        file1 = file1.startsWith('file://') ? url.fileURLToPath(file1) : file1\n+        file2 = file2.startsWith('file://') ? url.fileURLToPath(file2) : file2\n+\n+        return file1.localeCompare(file2, undefined, { sensitivity: this._isWindows ? 'accent' : 'variant' }) === 0\n     }\n }\n \n",
    "test_patch": "diff --git a/packages/wdio-junit-reporter/tests/reporter.test.ts b/packages/wdio-junit-reporter/tests/reporter.test.ts\nindex 78086a5a9a3..c3558aecf08 100644\n--- a/packages/wdio-junit-reporter/tests/reporter.test.ts\n+++ b/packages/wdio-junit-reporter/tests/reporter.test.ts\n@@ -346,6 +346,26 @@ describe('wdio-junit-reporter', () => {\n         expect(reporter['_buildOrderedReport'](null, null as any, specFileName, 'feature', true)).toBe('_addCucumberFeatureToBuilder')\n     })\n \n+    it('_sameFileName - case independent on win32', function (context) {\n+        if (os.platform() !== 'win32') {\n+            context.skip()\n+        }\n+        expect(reporter['_sameFileName']('file:///C:/foo/bar', 'file:///C:/foo/bar')).toBeTruthy()\n+        expect(reporter['_sameFileName']('file:///c:/foo/bar', 'file:///C:/foo/bar')).toBeTruthy()\n+        expect(reporter['_sameFileName']('file:///c:/foo/bar', 'C:\\\\foo\\\\bar')).toBeTruthy()\n+        expect(reporter['_sameFileName']('file:///C:/foo/bar', 'c:\\\\foo\\\\bar')).toBeTruthy()\n+        expect(reporter['_sameFileName']('file:///C:/foo/bar', 'C:\\\\FOO\\\\bar')).toBeTruthy()\n+        expect(reporter['_sameFileName']('file:///c:/foo/bar', 'C:\\\\bar\\\\foo')).toBeFalsy()\n+    })\n+\n+    it('_sameFileName - case sensitive on everything except win32', function (context) {\n+        if (os.platform() === 'win32') {\n+            context.skip()\n+        }\n+        expect(reporter['_sameFileName']('file:///foo/bar', 'file:///Foo/bar')).toBeFalsy()\n+        expect(reporter['_sameFileName']('file:///foo/bar', '/Foo/bar')).toBeFalsy()\n+    })\n+\n     it('_sameFileName', () => {\n         reporter = new WDIOJunitReporter({ stdout: true })\n         const file1URL = os.platform() === 'win32' ? 'file:///C:/foo/bar' : 'file:///foo/bar'\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13649",
    "pr_id": 13649,
    "issue_id": 13553,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: v9: TypeError: fetch failed (ECONNREFUSED)\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.0.9\n\n### Node.js Version\n\n18.20.4\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\r\n  'wdio:maxInstances': 1,\r\n  'wdio:enforceWebDriverClassic': true,\r\n  browserName: 'chrome',\r\n  browserVersion: '123',\r\n  'goog:chromeOptions': {\r\n    args: ['--disable-http2', '--headless', '--disable-dev-shm-usage', '--disable-gpu', '--no-sandbox', '--disable-extensions', '--accept-lang=de'],\r\n    prefs: {\r\n      'intl.accept_languages': 'de-DE',\r\n      'download.prompt_for_download': false,\r\n      'download.directory_upgrade': true,\r\n      'download.default_directory': pathToDownloadDirectory\r\n    }\r\n  },\r\n  acceptInsecureCerts: true\r\n}\n```\n\n\n### What happened?\n\nSporadically, the following error occurs:\r\n\r\n    TypeError: fetch failed\r\n\r\n    error properties: Object({ cause: Error: connect ECONNREFUSED 127.0.0.1:62837 })\r\n        at node:internal/deps/undici/undici:12618:11\r\n    Caused by: Error: connect ECONNREFUSED 127.0.0.1:62837\r\n    error properties: Object({ errno: -4078, code: 'ECONNREFUSED', syscall: 'connect', address: '127.0.0.1', port: 62837 })\r\n        at __node_internal_captureLargerStackTrace (node:internal/errors:496:5)\r\n        at __node_internal_exceptionWithHostPort (node:internal/errors:671:12)\r\n        at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)\r\n\r\nWe have a large number of tests and I couldn't find a pattern which tests fail and which not. It seems to be completely random. I even ran the tests on different machines, the error occurs seemingly on any machine (at least Windows 10 and 11).\r\n\r\nThe error did not occur with webdriverio 8.\n\n### What is your expected behavior?\n\nThe error should not occur.\n\n### How to reproduce the bug.\n\nI am not able to create a reproducible example since the error seems to occur completely randomly.\n\n### Relevant log output\n\n```typescript\nTypeError: fetch failed\r\n\r\nerror properties: Object({ cause: Error: connect ECONNREFUSED 127.0.0.1:62837 })\r\n    at node:internal/deps/undici/undici:12618:11\r\nCaused by: Error: connect ECONNREFUSED 127.0.0.1:62837\r\nerror properties: Object({ errno: -4078, code: 'ECONNREFUSED', syscall: 'connect', address: '127.0.0.1', port: 62837 })\r\n    at __node_internal_captureLargerStackTrace (node:internal/errors:496:5)\r\n    at __node_internal_exceptionWithHostPort (node:internal/errors:671:12)\r\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 370,
    "test_files_count": 4,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "packages/wdio-webdriver-mock-service/src/index.ts",
      "packages/webdriver/src/request/constants.ts",
      "packages/webdriver/src/request/index.ts",
      "packages/webdriver/src/utils.ts",
      "packages/webdriver/tests/request.test.ts",
      "packages/webdriver/tests/utils.test.ts",
      "tests/mocha/test.ts",
      "tests/smoke.runner.js"
    ],
    "pr_changed_test_files": [
      "packages/webdriver/tests/request.test.ts",
      "packages/webdriver/tests/utils.test.ts",
      "tests/mocha/test.ts",
      "tests/smoke.runner.js"
    ],
    "base_commit": "abcf71c37f8f784ca2e3281c0b066a30aac04155",
    "head_commit": "06ff6b9eb85d72dfc06f22db5ca3ad8fecf3139c",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13649",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13649",
    "dockerfile": "",
    "pr_merged_at": "2024-09-24T06:05:02.000Z",
    "patch": "diff --git a/packages/wdio-webdriver-mock-service/src/index.ts b/packages/wdio-webdriver-mock-service/src/index.ts\nindex 112caa19653..dde5952c5ab 100644\n--- a/packages/wdio-webdriver-mock-service/src/index.ts\n+++ b/packages/wdio-webdriver-mock-service/src/index.ts\n@@ -68,6 +68,7 @@ export default class WebdriverMockService implements Services.ServiceInstance {\n         this._browser.addCommand('parentElementChaining', this.parentNextPreviousElementChaining.bind(this))\n         this._browser.addCommand('refetchElementScenario', this.refetchElementScenario.bind(this))\n         this._browser.addCommand('executeMemLeakScenario', this.executeMemLeakScenario.bind(this))\n+        this._browser.addCommand('requestRetryScenario', this.requestRetryScenario.bind(this))\n     }\n \n     clickScenario() {\n@@ -251,6 +252,13 @@ export default class WebdriverMockService implements Services.ServiceInstance {\n         return () => this.nockReset()\n     }\n \n+    requestRetryScenario() {\n+        this.nockReset()\n+\n+        this._mock.command.navigateTo().times(3).reply(500, {})\n+        this._mock.command.navigateTo().reply(200, { value: null })\n+    }\n+\n     nockReset() {\n         nock.cleanAll()\n         nock.abortPendingRequests()\n\ndiff --git a/packages/webdriver/src/request/constants.ts b/packages/webdriver/src/request/constants.ts\nnew file mode 100644\nindex 00000000000..81a7b787b51\n--- /dev/null\n+++ b/packages/webdriver/src/request/constants.ts\n@@ -0,0 +1,4 @@\n+/**\n+ * retrieved from https://github.com/sindresorhus/ky/blob/3ba40cc6333cf1847c02c51744e22ab7c04407f5/source/utils/normalize.ts#L10\n+ */\n+export const RETRYABLE_STATUS_CODES = [408, 413, 429, 500, 502, 503, 504]\n\ndiff --git a/packages/webdriver/src/request/index.ts b/packages/webdriver/src/request/index.ts\nindex 78d8598c7e0..b343b46d348 100644\n--- a/packages/webdriver/src/request/index.ts\n+++ b/packages/webdriver/src/request/index.ts\n@@ -7,7 +7,8 @@ import logger from '@wdio/logger'\n import { transformCommandLogResult } from '@wdio/utils'\n import type { Options } from '@wdio/types'\n \n-import { isSuccessfulResponse, getErrorFromResponseBody, getTimeoutError } from '../utils.js'\n+import { RETRYABLE_STATUS_CODES } from './constants.js'\n+import { isSuccessfulResponse, getErrorFromResponseBody, getRequestError } from '../utils.js'\n import { DEFAULTS } from '../constants.js'\n import pkg from '../../package.json' with { type: 'json' }\n \n@@ -209,11 +210,16 @@ export default abstract class WebDriverRequest extends EventEmitter {\n              * handle timeouts\n              */\n             if ((response as RequestLibError).code === 'ETIMEDOUT') {\n-                const error = getTimeoutError(response, fullRequestOptions, url)\n-\n+                const error = getRequestError(response, fullRequestOptions, url)\n                 return retry(error, 'Request timed out! Consider increasing the \"connectionRetryTimeout\" option.')\n             }\n \n+            const statusCode = (response as RequestLibError).statusCode\n+            if (statusCode && RETRYABLE_STATUS_CODES.includes(statusCode)) {\n+                const error = getRequestError(response, fullRequestOptions, url)\n+                return retry(error, 'Request failed with status code ' + statusCode)\n+            }\n+\n             /**\n              * throw if request error is unknown\n              */\n\ndiff --git a/packages/webdriver/src/utils.ts b/packages/webdriver/src/utils.ts\nindex 3d214270401..fef19781570 100644\n--- a/packages/webdriver/src/utils.ts\n+++ b/packages/webdriver/src/utils.ts\n@@ -426,7 +426,7 @@ export const getSessionError = (err: JSONWPCommandError, params: Partial<Options\n /**\n  * return timeout error with information about the executing command on which the test hangs\n  */\n-export function getTimeoutError(error: Error, requestOptions: RequestInit, url: URL): Error {\n+export function getRequestError(error: Error, requestOptions: RequestInit, url: URL): Error {\n     const cmdName = getExecCmdName(url)\n     const cmdArgs = getExecCmdArgs(requestOptions)\n \n",
    "test_patch": "diff --git a/packages/webdriver/tests/request.test.ts b/packages/webdriver/tests/request.test.ts\nindex c0295078aa4..b4b3a5591bd 100644\n--- a/packages/webdriver/tests/request.test.ts\n+++ b/packages/webdriver/tests/request.test.ts\n@@ -356,9 +356,9 @@ describe('webdriver request', () => {\n                 expect(reqRetryCnt).toBeCalledTimes(retryCnt)\n             })\n \n-            it('should use error from \"getTimeoutError\" helper', async () => {\n+            it('should use error from \"getRequestError\" helper', async () => {\n                 const timeoutErr = new Error('Timeout')\n-                const spy = vi.spyOn(utils, 'getTimeoutError').mockReturnValue(timeoutErr)\n+                const spy = vi.spyOn(utils, 'getRequestError').mockReturnValue(timeoutErr)\n \n                 const req = new WebDriverRequest('GET', '/timeout', {}, true)\n                 req.emit = vi.fn()\n\ndiff --git a/packages/webdriver/tests/utils.test.ts b/packages/webdriver/tests/utils.test.ts\nindex feeb21b4033..4c96d2710b7 100644\n--- a/packages/webdriver/tests/utils.test.ts\n+++ b/packages/webdriver/tests/utils.test.ts\n@@ -8,7 +8,7 @@ import type { Capabilities, Options } from '@wdio/types'\n import {\n     isSuccessfulResponse, getPrototype, getSessionError,\n     getErrorFromResponseBody, CustomRequestError, startWebDriverSession,\n-    getTimeoutError, setupDirectConnect, validateCapabilities\n+    getRequestError, setupDirectConnect, validateCapabilities\n } from '../src/utils.js'\n import type { Client, RemoteConfig } from '../src/types.js'\n \n@@ -436,7 +436,7 @@ describe('utils', () => {\n         })\n     })\n \n-    describe('getTimeoutError', () => {\n+    describe('getRequestError', () => {\n         const mkReqOpts = (opts = {}) => {\n             return {\n                 method: 'GET',\n@@ -449,7 +449,7 @@ describe('utils', () => {\n                 const err = new Error('Timeout')\n                 const reqOpts = mkReqOpts({})\n \n-                const timeoutErr = getTimeoutError(err, reqOpts, new URL('https://localhost:4445/wd/hub/session'))\n+                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/wd/hub/session'))\n \n                 expect(timeoutErr.message).toEqual(expect.stringMatching('when running \"https://localhost:4445/wd/hub/session\"'))\n             })\n@@ -458,7 +458,7 @@ describe('utils', () => {\n                 const err = new Error('Timeout')\n                 const reqOpts = mkReqOpts({})\n \n-                const timeoutErr = getTimeoutError(err, reqOpts, new URL('https://localhost:4445/wd/hub/session/abc123/url'))\n+                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/wd/hub/session/abc123/url'))\n \n                 expect(timeoutErr.message).toEqual(expect.stringMatching('when running \"url\"'))\n             })\n@@ -467,7 +467,7 @@ describe('utils', () => {\n                 const err = new Error('Timeout')\n                 const reqOpts = mkReqOpts({ method: 'GET' })\n \n-                const timeoutErr = getTimeoutError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n+                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n \n                 expect(timeoutErr.message).toEqual(expect.stringMatching(/when running .+ with method \"GET\"/))\n             })\n@@ -477,7 +477,7 @@ describe('utils', () => {\n                 const cmdArgs = { foo: 'bar' }\n                 const reqOpts = mkReqOpts({ body: cmdArgs })\n \n-                const timeoutErr = getTimeoutError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n+                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n \n                 expect(timeoutErr.message).toEqual(\n                     expect.stringMatching(new RegExp(`when running .+ with method .+ and args \"${JSON.stringify(cmdArgs)}\"`))\n@@ -491,7 +491,7 @@ describe('utils', () => {\n                 const cmdArgs = { script: Buffer.from('script').toString('base64') }\n                 const reqOpts = mkReqOpts({ body: cmdArgs })\n \n-                const timeoutErr = getTimeoutError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n+                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n \n                 expect(timeoutErr.message).toEqual(\n                     expect.stringMatching(/when running .+ with method .+ and args \"<Script\\[base64\\]>\"/)\n@@ -503,7 +503,7 @@ describe('utils', () => {\n                 const cmdArgs = { script: 'return (function() {\\nconsole.log(\"hi\")\\n}).apply(null, arguments)' }\n                 const reqOpts = mkReqOpts({ body: cmdArgs })\n \n-                const timeoutErr = getTimeoutError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n+                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n \n                 expect(timeoutErr.message).toEqual(\n                     expect.stringMatching(/when running .+ with method .+ and args \"function\\(\\) {\\nconsole\\.log\\(\"hi\"\\)\\n}/)\n@@ -517,7 +517,7 @@ describe('utils', () => {\n                 const cmdArgs = { file: Buffer.from('screen').toString('base64') }\n                 const reqOpts = mkReqOpts({ body: cmdArgs })\n \n-                const timeoutErr = getTimeoutError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n+                const timeoutErr = getRequestError(err, reqOpts, new URL('https://localhost:4445/default/method'))\n \n                 expect(timeoutErr.message).toEqual(\n                     expect.stringMatching(/when running .+ with method .+ and args \"<Screenshot\\[base64\\]>\"/)\n\ndiff --git a/tests/mocha/test.ts b/tests/mocha/test.ts\nindex c2efa36932b..6a205494b6d 100644\n--- a/tests/mocha/test.ts\n+++ b/tests/mocha/test.ts\n@@ -338,9 +338,9 @@ describe('Mocha smoke test', () => {\n         it('should throw if promise rejects', async () => {\n             // @ts-expect-error custom command\n             await browser.customCommandScenario()\n-            browser.overwriteCommand('deleteCookies', (async (origCommand: Function, fail: boolean) => {\n-                const result = await origCommand()\n-                return fail ? Promise.reject(new Error(result)) : result\n+            browser.overwriteCommand('deleteCookies', (async (origCommand: Function) => {\n+                await origCommand()\n+                return Promise.reject(new Error('deleteAllCookies'))\n             }) as any)\n \n             await assert.rejects(\n@@ -362,9 +362,9 @@ describe('Mocha smoke test', () => {\n         it('should throw if promise rejects (async execution)', async () => {\n             // @ts-expect-error custom command\n             await browser.customCommandScenario()\n-            browser.overwriteCommand('deleteCookies', async (origCommand, fail) => {\n-                const result = (await origCommand()) as any as string\n-                return fail ? Promise.reject(new Error(result)) : result\n+            browser.overwriteCommand('deleteCookies', async (origCommand: Function) => {\n+                await origCommand()\n+                return Promise.reject(new Error('deleteAllCookies'))\n             })\n \n             await assert.rejects(\n@@ -409,4 +409,12 @@ describe('Mocha smoke test', () => {\n             expect(await browser.$$('.foo')[3].getText()).toBe('some element text 4')\n         })\n     })\n+\n+    describe('request retries', () => {\n+        it('should retry request', async () => {\n+            // @ts-expect-error mock feature\n+            await browser.requestRetryScenario()\n+            await browser.url('https://mymockpage.com')\n+        })\n+    })\n })\n\ndiff --git a/tests/smoke.runner.js b/tests/smoke.runner.js\nindex c6f11742c30..a6aa777cea5 100644\n--- a/tests/smoke.runner.js\n+++ b/tests/smoke.runner.js\n@@ -69,9 +69,9 @@ async function runTests (tests) {\n  * Mocha wdio testrunner tests\n  */\n const mochaTestrunner = async () => {\n-    const { skippedSpecs } = await launch('mochaTestrunner', baseConfig, {\n+    const { skippedSpecs, passed } = await launch('mochaTestrunner', baseConfig, {\n         specs: [\n-            './mocha/test.ts',\n+            '../mocha/test.ts',\n             path.resolve(__dirname, 'mocha', 'test-middleware.ts'),\n             path.resolve(__dirname, 'mocha', 'test-waitForElement.ts'),\n             path.resolve(__dirname, 'mocha', 'test-skipped.ts'),\n@@ -87,6 +87,7 @@ const mochaTestrunner = async () => {\n         return\n     }\n     assert.strictEqual(skippedSpecs, 1)\n+    assert.strictEqual(passed, 4)\n }\n \n /**\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13648",
    "pr_id": 13648,
    "issue_id": 13546,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: @wdio/appium-service: [AppiumDriver@3989] Error: WebSocket is not open: readyState 0 (CONNECTING)\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\n^9.0.7\r\n\r\n### Node.js Version\r\n\r\nv20.17.0\r\n\r\n### Mode\r\n\r\nStandalone Mode\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\ncapabilities: [{\r\n        browserName: 'chrome',\r\n        platformName: 'windows',\r\n        'appium:automationName': 'Chromium',\r\n        'goog:chromeOptions': {\r\n            args: ['user-data-dir=C:/Users/me/AppData/Local/Google/Chrome/User Data'],\r\n        }\r\n    }],\r\n```\r\n\r\n\r\n### What happened?\r\n\r\nIn most of cases It can't start executing the test cases due to the error\r\nERROR @wdio/appium-service: [AppiumDriver@3989] [session b2156158-1abc-40ad-a85a-b0549fd6c329] Error: WebSocket is not open: readyState 0 (CONNECTING)\r\n\r\n### What is your expected behavior?\r\n\r\nIt should not fail and text execution starts\r\n\r\n### How to reproduce the bug.\r\n\r\nInstall \"webdriverio\": \"^9.0.7\", configure the above capabilities, write some test cases and execute few times, in most of them the error will be present\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\n[session e75941ad-4e7b-48f7-be3c-3583536ff3e3] Error: WebSocket is not open: readyState 0 (CONNECTING)\r\nCreated TensorFlow Lite XNNPACK delegate for CPU.\r\n[0-0] C:\\Users\\me\\Documents\\Dev\\amebot-chatbot-e2e\\node_modules\\webdriver\\build\\index.js:144\r\n[0-0]         reject(new Error(`Command ${params.method} with id ${id} (with the following parameter: ${JSON.stringify(params.params)}) timed out`));\r\n[0-0]                ^\r\n[0-0]\r\n[0-0]\r\n[0-0] Error: Command script.addPreloadScript with id 1 (with the following parameter: {\"functionDeclaration\":\"function customElementWrapper() {\\n  const origFn = customElements.define.bind(customElements);\\n  customElements.define = function(name, Constructor, options) {\\n    const origConnectedCallback = Constructor.prototype.connectedCallback;\\n    Constructor.prototype.connectedCallback = function() {\\n      let parentNode = this;\\n      while (parentNode.parentNode) {\\n        parentNode = parentNode.parentNode;\\n      }\\n      console.debug(\\\"[WDIO]\\\", \\\"newShadowRoot\\\", this, parentNode, parentNode === document);\\n      return origConnectedCallback.call(this);\\n    };\\n    const origDisconnectedCallback = Constructor.prototype.disconnectedCallback;\\n    Constructor.prototype.disconnectedCallback = function() {\\n      console.debug(\\\"[WDIO]\\\", \\\"removeShadowRoot\\\", this);\\n      return origDisconnectedCallback.call(this);\\n    };\\n    return origFn(name, Constructor, options);\\n  };\\n}\"}) timed out\r\n[0-0]     at Timeout._onTimeout (C:\\Users\\me\\Documents\\Dev\\amebot-chatbot-e2e\\node_modules\\webdriver\\build\\index.js:144:16)\r\n[0-0]     at listOnTimeout (node:internal/timers:581:17)\r\n[0-0]     at process.processTimers (node:internal/timers:519:7)\r\n[0-0]\r\n[0-0] Node.js v20.17.0\r\n[0-0] FAILED in chrome - file:///C:/Users/me/Documents/.....e2e.ts\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 426,
    "test_files_count": 1,
    "non_test_files_count": 2,
    "pr_changed_files": [
      "packages/wdio-utils/src/envDetector.ts",
      "packages/wdio-utils/tests/envDetector.test.ts",
      "packages/webdriver/src/index.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-utils/tests/envDetector.test.ts"
    ],
    "base_commit": "abcf71c37f8f784ca2e3281c0b066a30aac04155",
    "head_commit": "4aa7bae33e851cb84ad20d01abe9460c061f261e",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13648",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13648",
    "dockerfile": "",
    "pr_merged_at": "2024-09-24T05:49:16.000Z",
    "patch": "diff --git a/packages/wdio-utils/src/envDetector.ts b/packages/wdio-utils/src/envDetector.ts\nindex 563a94e1ebd..ba666e66f34 100644\n--- a/packages/wdio-utils/src/envDetector.ts\n+++ b/packages/wdio-utils/src/envDetector.ts\n@@ -1,6 +1,7 @@\n import type { Capabilities } from '@wdio/types'\n import { SUPPORTED_BROWSERNAMES } from './constants.js'\n \n+const APPIUM_CAPABILITY_PREFIX = 'appium:'\n const MOBILE_BROWSER_NAMES = ['ipad', 'iphone', 'android']\n const MOBILE_CAPABILITIES = [\n     'appium-version', 'appiumVersion', 'device-type', 'deviceType', 'app', 'appArguments',\n@@ -195,16 +196,24 @@ function isSauce(capabilities?: Capabilities.WithRequestedCapabilities['capabili\n     )\n }\n \n+function isAppiumCapability(capabilityName: string) {\n+    return capabilityName.startsWith(APPIUM_CAPABILITY_PREFIX)\n+}\n+\n /**\n  * detects if session has support for WebDriver Bidi\n  * @param  {object}  capabilities session capabilities\n  * @return {Boolean}              true if session has WebDriver Bidi support\n  */\n-export function isBidi(capabilities?: WebdriverIO.Capabilities) {\n+export function isBidi(requestedCapabilities: Capabilities.RequestedStandaloneCapabilities, capabilities: WebdriverIO.Capabilities) {\n     if (!capabilities) {\n         return false\n     }\n \n+    if (Object.keys(requestedCapabilities).some(isAppiumCapability)) {\n+        return false\n+    }\n+\n     return typeof capabilities.webSocketUrl === 'string'\n }\n \n@@ -255,7 +264,7 @@ export function capabilitiesEnvironmentDetector(capabilities: WebdriverIO.Capabi\n         isIOS: isIOS(capabilities),\n         isAndroid: isAndroid(capabilities),\n         isSauce: isSauce(capabilities),\n-        isBidi: isBidi(capabilities),\n+        isBidi: isBidi({}, capabilities),\n         isChromium: isChromium(capabilities)\n     }\n }\n@@ -282,7 +291,7 @@ export function sessionEnvironmentDetector({\n         isAndroid: isAndroid(capabilities),\n         isSauce: isSauce(requestedCapabilities),\n         isSeleniumStandalone: isSeleniumStandalone(capabilities),\n-        isBidi: isBidi(capabilities),\n+        isBidi: isBidi(requestedCapabilities, capabilities),\n         isChromium: isChromium(capabilities)\n     }\n }\n\ndiff --git a/packages/webdriver/src/index.ts b/packages/webdriver/src/index.ts\nindex 5286b5a0b2b..84f78d3f4b6 100644\n--- a/packages/webdriver/src/index.ts\n+++ b/packages/webdriver/src/index.ts\n@@ -48,7 +48,7 @@ export default class WebDriver {\n          * initiate WebDriver Bidi\n          */\n         const bidiPrototype: PropertyDescriptorMap = {}\n-        if (isBidi(capabilities)) {\n+        if (isBidi(requestedCapabilities, capabilities)) {\n             log.info(`Register BiDi handler for session with id ${sessionId}`)\n             Object.assign(bidiPrototype, initiateBidi(capabilities.webSocketUrl as any as string, options.strictSSL))\n         }\n@@ -68,10 +68,10 @@ export default class WebDriver {\n         /**\n          * parse and propagate all Bidi events to the browser instance\n          */\n-        if (isBidi(capabilities)) {\n+        if (isBidi(requestedCapabilities, capabilities)) {\n             // make sure the Bidi connection is established before returning\n             await client._bidiHandler.connect()\n-            client._bidiHandler?.socket.on('message', parseBidiMessage.bind(client))\n+            client._bidiHandler.socket.on('message', parseBidiMessage.bind(client))\n         }\n \n         /**\n@@ -122,7 +122,7 @@ export default class WebDriver {\n          * initiate WebDriver Bidi\n          */\n         const bidiPrototype: PropertyDescriptorMap = {}\n-        if (isBidi(options.capabilities)) {\n+        if (isBidi(options.requestedCapabilities || {}, options.capabilities || {})) {\n             const webSocketUrl = options.capabilities?.webSocketUrl as unknown as string\n             log.info(`Register BiDi handler for session with id ${options.sessionId}`)\n             Object.assign(bidiPrototype, initiateBidi(webSocketUrl as unknown as string, options.strictSSL))\n@@ -135,7 +135,7 @@ export default class WebDriver {\n         /**\n          * parse and propagate all Bidi events to the browser instance\n          */\n-        if (isBidi(options.capabilities)) {\n+        if (isBidi(options.requestedCapabilities || {}, options.capabilities || {})) {\n             client._bidiHandler?.socket.on('message', parseBidiMessage.bind(client))\n         }\n         return client\n",
    "test_patch": "diff --git a/packages/wdio-utils/tests/envDetector.test.ts b/packages/wdio-utils/tests/envDetector.test.ts\nindex a68af338a0f..c05a0edecd6 100644\n--- a/packages/wdio-utils/tests/envDetector.test.ts\n+++ b/packages/wdio-utils/tests/envDetector.test.ts\n@@ -118,13 +118,23 @@ describe('sessionEnvironmentDetector', () => {\n \n     it('isBidi', () => {\n         const requestedCapabilities = { browserName: '' }\n+        const requestedAppiumCapabilities = {\n+            browserName: 'chrome',\n+            platformName: 'windows',\n+            'appium:automationName': 'Chromium',\n+            'goog:chromeOptions': {\n+                args: ['user-data-dir=C:/Users/me/AppData/Local/Google/Chrome/User Data'],\n+            }\n+        }\n         expect(sessionEnvironmentDetector({ capabilities: {}, requestedCapabilities: {} }).isBidi).toBe(false)\n         expect(sessionEnvironmentDetector({ capabilities: appiumCaps, requestedCapabilities }).isBidi).toBe(false)\n         expect(sessionEnvironmentDetector({ capabilities: chromeCaps, requestedCapabilities }).isBidi).toBe(false)\n         expect(sessionEnvironmentDetector({ capabilities: geckoCaps, requestedCapabilities }).isBidi).toBe(false)\n         expect(sessionEnvironmentDetector({ capabilities: phantomCaps, requestedCapabilities }).isBidi).toBe(false)\n-        // @ts-expect-error JSON import is not properly typed\n-        expect(sessionEnvironmentDetector({ capabilities: bidiResponse, requestedCapabilities }).isBidi).toBe(true)\n+        expect(sessionEnvironmentDetector({ capabilities: bidiResponse as any as WebdriverIO.Capabilities, requestedCapabilities }).isBidi)\n+            .toBe(true)\n+        expect(sessionEnvironmentDetector({ capabilities: bidiResponse as any as WebdriverIO.Capabilities, requestedCapabilities: requestedAppiumCapabilities }).isBidi)\n+            .toBe(false)\n         expect(sessionEnvironmentDetector({ capabilities: {\n             webSocketUrl: true\n         }, requestedCapabilities: {} }).isBidi).toBe(false)\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13616",
    "pr_id": 13616,
    "issue_id": 13562,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: cucumber.js path overrides wdio.conf.js exclude\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.0.9\n\n### Node.js Version\n\n18.20.4\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n_No response_\n\n### What happened?\n\nI have an API test suite and UI test suite combined within the same repository. I want to use WDIO to execute the UI tests only.\r\n\r\nI have the API features in the wdio config `exclude` array. But they are being picked up from the cucumber.js config's `path` array.\r\n\r\nWDIO is not logging the API feature's path, but the tests are executed. When I comment out the cucumber.js path then the API suite is not executed by WDIO.\n\n### What is your expected behavior?\n\nI expect the wdio.conf.js `exclude` to override the cucumber.js `path` contents.\n\n### How to reproduce the bug.\n\nI have pushed an example to my repository.\r\n\r\nhttps://github.com/jvisco/wdio-example\r\n\r\n```\r\nnpm run ui\r\n```\r\nWill run the UI script.\r\n```\r\nnpx wdio run wdio.conf.mjs --cucumberOpts.tags='(@test and not @ignore)'\r\n```\r\nThere is an API scenario, and UI scenario with `@test`.\r\n\r\nIf the line [cucumber.js:42](https://github.com/jvisco/wdio-example/blob/main/cucumber.mjs#L42) is commented out then only the UI scenario is executed.\n\n### Relevant log output\n\n```typescript\nExecution of 1 workers started at 2024-09-13T18:02:41.726Z\r\n\r\n2024-09-13T18:02:41.740Z INFO @wdio/cli:launcher: Run onPrepare hook\r\n2024-09-13T18:02:41.741Z INFO @wdio/utils: Setting up browser driver for: chrome@stable\r\n2024-09-13T18:02:41.742Z INFO @wdio/utils: Setting up browser binaries for: chrome@stable\r\n2024-09-13T18:02:41.800Z INFO webdriver: Using Chromedriver v128.0.6613.138 from cache directory /var/folders/lp/2c7xrj6939d00cw1xqq9lkl40000gp/T\r\n2024-09-13T18:02:41.860Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2024-09-13T18:02:41.861Z INFO @wdio/local-runner: Start worker 0-0 with arg: run,wdio.conf.mjs,--cucumberOpts.tags=(@test and not @ignore)\r\n2024-09-13T18:02:41.864Z DEBUG @wdio/local-runner: Send command run to worker with cid \"0-0\"\r\n[0-0] 2024-09-13T18:02:42.933Z INFO @wdio/local-runner: Run worker command: run\r\n[0-0] 2024-09-13T18:02:42.939Z DEBUG @wdio/runner: init remote session\r\n[0-0] RUNNING in chrome - file:///features/feature_files/ui/suite2/ui_test.feature\r\n[0-0] 2024-09-13T18:02:43.529Z DEBUG @wdio/runner: init remote session\r\n[0-0] 2024-09-13T18:02:43.531Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n[0-0] 2024-09-13T18:02:43.593Z INFO webdriver: Using Chromedriver v128.0.6613.138 from cache directory /var/folders/lp/2c7xrj6939d00cw1xqq9lkl40000gp/T\r\n[0-0] 2024-09-13T18:02:43.632Z INFO chromedriver: Starting ChromeDriver 128.0.6613.138 (d6209c7e65ea9d64ce403e9de18f8915e2f8708a-refs/branch-heads/6613@{#1712}) on port 54788\r\n[0-0] 2024-09-13T18:02:43.632Z INFO chromedriver: Remote connections are allowed by an allowlist (0.0.0.0).\r\n[0-0] 2024-09-13T18:02:43.633Z INFO chromedriver: Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.\r\n[0-0] 2024-09-13T18:02:43.663Z INFO chromedriver: ChromeDriver was started successfully on port 54788.\r\n[0-0] 2024-09-13T18:02:44.608Z INFO @wdio/utils: Started Chromedriver v128.0.6613.138 with params --port=54788 --allowed-origins=* --allowed-ips=0.0.0.0 in 1077ms on port 54788\r\n[0-0] 2024-09-13T18:02:44.625Z INFO webdriver: [POST] http://localhost:54788/session\r\n[0-0] 2024-09-13T18:02:44.625Z INFO webdriver: DATA {\r\n[0-0]   capabilities: {\r\n[0-0]     alwaysMatch: {\r\n[0-0]       browserName: 'chrome',\r\n[0-0]       'goog:chromeOptions': [Object],\r\n[0-0]       acceptInsecureCerts: true,\r\n[0-0]       webSocketUrl: true\r\n[0-0]     },\r\n[0-0]     firstMatch: [ {} ]\r\n[0-0]   },\r\n[0-0]   desiredCapabilities: {\r\n[0-0]     browserName: 'chrome',\r\n[0-0]     'goog:chromeOptions': {\r\n[0-0]       binary: '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\r\n[0-0]       args: [Array]\r\n[0-0]     },\r\n[0-0]     acceptInsecureCerts: true,\r\n[0-0]     webSocketUrl: true\r\n[0-0]   }\r\n[0-0] }\r\n[0-0] 2024-09-13T18:02:46.069Z INFO webdriver: Register BiDi handler for session with id 4bc84b96d913f727ba194644cca92300\r\n[0-0] 2024-09-13T18:02:46.069Z INFO webdriver: Connect to webSocketUrl ws://127.0.0.1:54788/session/4bc84b96d913f727ba194644cca92300\r\n[0-0] 2024-09-13T18:02:46.084Z INFO webdriver: Connected session to Bidi protocol\r\n[0-0] 2024-09-13T18:02:46.084Z INFO webdriver: Connected session to Bidi protocol\r\n[0-0] 2024-09-13T18:02:46.084Z INFO webdriver: Connected to WebDriver Bidi interface at ws://127.0.0.1:54788/session/4bc84b96d913f727ba194644cca92300\r\n[0-0] 2024-09-13T18:02:46.085Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\"]}\r\n[0-0] 2024-09-13T18:02:46.087Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-09-13T18:02:46.087Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"log.entryAdded\"]}\r\n[0-0] 2024-09-13T18:02:46.087Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[1265 bytes]>, contexts: undefined }\r\n[0-0] 2024-09-13T18:02:46.087Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\",\"network.responseCompleted\",\"network.beforeRequestSent\",\"network.fetchError\"]}\r\n[0-0] 2024-09-13T18:02:46.088Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.userPromptOpened\"]}\r\n[0-0] 2024-09-13T18:02:46.088Z INFO webdriver: [GET] http://localhost:54788/session/4bc84b96d913f727ba194644cca92300/window\r\n[0-0] 2024-09-13T18:02:46.089Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-09-13T18:02:46.089Z INFO webdriver: [GET] http://localhost:54788/session/4bc84b96d913f727ba194644cca92300/window\r\n[0-0] 2024-09-13T18:02:46.095Z INFO webdriver: RESULT C9201FD227E55555F84D78024453D2E9\r\n[0-0] 2024-09-13T18:02:46.095Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[374 bytes]>\",\"awaitPromise\":true,\"arguments\":[],\"target\":{\"context\":\"C9201FD227E55555F84D78024453D2E9\"}}\r\n[0-0] 2024-09-13T18:02:46.099Z INFO webdriver: RESULT C9201FD227E55555F84D78024453D2E9\r\n[0-0] 2024-09-13T18:02:46.100Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[343 bytes]>, contexts: [\"C9201FD227E55555F84D78024453D2E9\"] }\r\n[0-0] 2024-09-13T18:02:46.102Z DEBUG webdriver: BIDI RESULT {\"id\":1,\"result\":{},\"type\":\"success\"}\r\n[0-0] 2024-09-13T18:02:46.103Z DEBUG webdriver: BIDI RESULT {\"id\":2,\"result\":{},\"type\":\"success\"}\r\n[0-0] 2024-09-13T18:02:46.103Z DEBUG webdriver: BIDI RESULT {\"id\":3,\"result\":{\"script\":\"0416cdbf-81f3-401f-b571-de60a8d0e223\"},\"type\":\"success\"}\r\n[0-0] 2024-09-13T18:02:46.104Z DEBUG webdriver: BIDI RESULT {\"id\":5,\"result\":{},\"type\":\"success\"}\r\n[0-0] 2024-09-13T18:02:46.104Z DEBUG webdriver: BIDI RESULT {\"id\":4,\"result\":{},\"type\":\"success\"}\r\n[0-0] 2024-09-13T18:02:46.107Z DEBUG webdriver: BIDI RESULT {\"id\":6,\"result\":{\"realm\":\"-862283768552260756.4187916920636257700\",\"result\":{\"type\":\"undefined\"},\"type\":\"success\"},\"type\":\"success\"}\r\n[0-0] 2024-09-13T18:02:46.108Z DEBUG webdriver: BIDI RESULT {\"id\":7,\"result\":{\"script\":\"14289ac6-9eda-47f1-bead-8336f3bd00ea\"},\"type\":\"success\"}\r\n[0-0] 2024-09-13T18:02:46.108Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"script.message\"]}\r\n[0-0] 2024-09-13T18:02:46.110Z DEBUG webdriver: BIDI RESULT {\"id\":8,\"result\":{},\"type\":\"success\"}\r\n[0-0] 2024-09-13T18:02:46.111Z INFO webdriverio:PolyfillManager: polyfill script added\r\n[0-0] 2024-09-13T18:02:46.361Z DEBUG @wdio/utils:shim: Finished to run \"beforeScenario\" hook in 0ms\r\n[0-0] 2024-09-13T18:02:46.364Z DEBUG @wdio/utils:shim: Finished to run \"afterStep\" hook in 0ms\r\n[0-0] 2024-09-13T18:02:46.364Z DEBUG @wdio/utils:shim: Finished to run \"afterScenario\" hook in 0ms\r\n[0-0] Error in \"0: Undefined Step\"\r\nError: Scenario with this step should be excluded.\r\n    at CustomWorld.<anonymous> (file:///Users/jvisco/git/wdio-example/features/step_definitions/api/setup.mjs:6:11)\r\n[0-0] 2024-09-13T18:02:46.366Z DEBUG @wdio/utils:shim: Finished to run \"beforeScenario\" hook in 0ms\r\n[0-0] 2024-09-13T18:02:46.366Z INFO webdriver: BIDI COMMAND browsingContext.navigate {\"context\":\"C9201FD227E55555F84D78024453D2E9\",\"url\":\"https://webdriver.io/\",\"wait\":\"complete\"}\r\n[0-0] 2024-09-13T18:02:46.373Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-09-13T18:02:46.373Z INFO webdriver: [GET] http://localhost:54788/session/4bc84b96d913f727ba194644cca92300/window\r\n[0-0] 2024-09-13T18:02:46.378Z INFO webdriver: RESULT C9201FD227E55555F84D78024453D2E9\r\n[0-0] 2024-09-13T18:02:46.378Z INFO webdriverio:ContextManager: Update current context: C9201FD227E55555F84D78024453D2E9\r\n[0-0] 2024-09-13T18:02:47.171Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-09-13T18:02:47.173Z INFO webdriver: [GET] http://localhost:54788/session/4bc84b96d913f727ba194644cca92300/window\r\n[0-0] 2024-09-13T18:02:47.183Z INFO webdriver: RESULT C9201FD227E55555F84D78024453D2E9\r\n[0-0] 2024-09-13T18:02:49.492Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-09-13T18:02:49.492Z INFO webdriver: [GET] http://localhost:54788/session/4bc84b96d913f727ba194644cca92300/window\r\n[0-0] 2024-09-13T18:02:49.495Z INFO webdriver: RESULT C9201FD227E55555F84D78024453D2E9\r\n[0-0] 2024-09-13T18:02:49.648Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-09-13T18:02:49.649Z INFO webdriver: [GET] http://localhost:54788/session/4bc84b96d913f727ba194644cca92300/window\r\n[0-0] 2024-09-13T18:02:49.653Z INFO webdriver: RESULT C9201FD227E55555F84D78024453D2E9\r\n[0-0] 2024-09-13T18:02:49.768Z DEBUG webdriver: BIDI RESULT {\"id\":9,\"result\":{\"navigation\":\"d4967c4f-b45b-4768-943a-3d7e2dd35ed4\",\"url\":\"https://webdriver.io/\"},\"type\":\"success\"}\r\n[0-0] 2024-09-13T18:02:49.769Z DEBUG @wdio/utils:shim: Finished to run \"afterStep\" hook in 0ms\r\n[0-0] 2024-09-13T18:02:49.772Z INFO webdriver: BIDI COMMAND browsingContext.locateNodes {\"locator\":{\"type\":\"css\",\"value\":\".hero__subtitle\"},\"context\":\"C9201FD227E55555F84D78024453D2E9\"}\r\n[0-0] 2024-09-13T18:02:49.799Z DEBUG webdriver: BIDI RESULT {\"id\":10,\"result\":{\"nodes\":[{\"sharedId\":\"f.C9201FD227E55555F84D78024453D2E9.d.865E989DFBF8A2273490CB0CC283FAFF.e.476\",\"type\":\"node\",\"value\":{\"attributes\":{\"class\":\"hero__subtitle\"},\"childNodeCount\":1,\"localName\":\"p\",\"namespaceURI\":\"http://www.w3.org/1999/xhtml\",\"nodeType\":1,\"shadowRoot\":null}}]},\"type\":\"success\"}\r\n[0-0] 2024-09-13T18:02:49.807Z INFO webdriver: COMMAND getElementText(\"f.C9201FD227E55555F84D78024453D2E9.d.865E989DFBF8A2273490CB0CC283FAFF.e.476\")\r\n[0-0] 2024-09-13T18:02:49.807Z INFO webdriver: [GET] http://localhost:54788/session/4bc84b96d913f727ba194644cca92300/element/f.C9201FD227E55555F84D78024453D2E9.d.865E989DFBF8A2273490CB0CC283FAFF.e.476/text\r\n[0-0] 2024-09-13T18:02:49.972Z INFO webdriver: RESULT Next-gen browser and mobile automation test framework for Node.js\r\n[0-0] 2024-09-13T18:02:49.973Z DEBUG @wdio/utils:shim: Finished to run \"afterStep\" hook in 0ms\r\n[0-0] 2024-09-13T18:02:49.974Z DEBUG @wdio/utils:shim: Finished to run \"afterScenario\" hook in 0ms\r\n[0-0] 2024-09-13T18:02:50.056Z DEBUG @wdio/utils:shim: Finished to run \"after\" hook in 0ms\r\n[0-0] 2024-09-13T18:02:50.057Z INFO webdriver: COMMAND deleteSession()\r\n[0-0] 2024-09-13T18:02:50.057Z INFO webdriver: [DELETE] http://localhost:54788/session/4bc84b96d913f727ba194644cca92300\r\n[0-0] 2024-09-13T18:02:50.162Z INFO webdriver: RESULT null\r\n[0-0] 2024-09-13T18:02:50.162Z INFO webdriver: Kill driver process with PID 64688\r\n2024-09-13T18:02:50.290Z DEBUG @wdio/local-runner: Runner 0-0 finished with exit code 1\r\n[0-0] FAILED in chrome - file:///features/feature_files/ui/suite2/ui_test.feature\r\n2024-09-13T18:02:50.291Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\r\n2024-09-13T18:02:50.291Z INFO @wdio/cli:launcher: Run onComplete hook\r\n\r\n \"spec\" Reporter:\r\n------------------------------------------------------------------\r\n[chrome 128.0.6613.138 mac #0-0] Running: chrome (v128.0.6613.138) on mac\r\n[chrome 128.0.6613.138 mac #0-0] Session ID: 4bc84b96d913f727ba194644cca92300\r\n[chrome 128.0.6613.138 mac #0-0]\r\n[chrome 128.0.6613.138 mac #0-0] » /features/feature_files/api/suite1/api_test.feature\r\n[chrome 128.0.6613.138 mac #0-0] Suite 1\r\n[chrome 128.0.6613.138 mac #0-0]    ✖ Verify api suite is excluded\r\n[chrome 128.0.6613.138 mac #0-0]\r\n[chrome 128.0.6613.138 mac #0-0] » /features/feature_files/ui/suite2/ui_test.feature\r\n[chrome 128.0.6613.138 mac #0-0] Suite 2\r\n[chrome 128.0.6613.138 mac #0-0]    ✓ Successfully load a web page\r\n[chrome 128.0.6613.138 mac #0-0]\r\n[chrome 128.0.6613.138 mac #0-0] 1 passing (4s)\r\n[chrome 128.0.6613.138 mac #0-0] 1 failing\r\n[chrome 128.0.6613.138 mac #0-0]\r\n[chrome 128.0.6613.138 mac #0-0] 1) Suite 1 Verify api suite is excluded\r\n[chrome 128.0.6613.138 mac #0-0] Error: Scenario with this step should be excluded.\r\n[chrome 128.0.6613.138 mac #0-0] Error: Scenario with this step should be excluded.\r\n[chrome 128.0.6613.138 mac #0-0]     at CustomWorld.<anonymous> (file:///Users/jvisco/git/wdio-example/features/step_definitions/api/setup.mjs:6:11)\r\n\r\n\r\nSpec Files:\t 0 passed, 1 failed, 1 total (100% completed) in 00:00:08  \r\n\r\n2024-09-13T18:02:50.292Z INFO @wdio/local-runner: Shutting down spawned worker\r\n2024-09-13T18:02:50.543Z INFO @wdio/local-runner: Waiting for 0 to shut down gracefully\r\n2024-09-13T18:02:50.543Z INFO @wdio/local-runner: shutting down\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 2160,
    "test_files_count": 2,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "packages/wdio-cucumber-framework/src/constants.ts",
      "packages/wdio-cucumber-framework/src/index.ts",
      "packages/wdio-cucumber-framework/src/types.ts",
      "tests/cucumber/cucumber.js",
      "tests/smoke.runner.js"
    ],
    "pr_changed_test_files": [
      "tests/cucumber/cucumber.js",
      "tests/smoke.runner.js"
    ],
    "base_commit": "ace0c195d155d0d160ae46b4c53109bab0c207d5",
    "head_commit": "8eb26302d8acb7852f15555efb07f5b66a924292",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13616",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13616",
    "dockerfile": "",
    "pr_merged_at": "2024-09-20T14:19:32.000Z",
    "patch": "diff --git a/packages/wdio-cucumber-framework/src/constants.ts b/packages/wdio-cucumber-framework/src/constants.ts\nindex 3fb26287663..22b5a7824b9 100644\n--- a/packages/wdio-cucumber-framework/src/constants.ts\n+++ b/packages/wdio-cucumber-framework/src/constants.ts\n@@ -27,7 +27,8 @@ export const DEFAULT_OPTS: CucumberOptions = {\n     ignoreUndefinedDefinitions: false,\n     failAmbiguousDefinitions: false,\n     tagExpression: '',\n-    profiles: []\n+    profiles: [],\n+    file: undefined\n }\n \n export const CUCUMBER_HOOK_DEFINITION_TYPES = [\n\ndiff --git a/packages/wdio-cucumber-framework/src/index.ts b/packages/wdio-cucumber-framework/src/index.ts\nindex 6dd74d86b1a..a04ee18ba37 100644\n--- a/packages/wdio-cucumber-framework/src/index.ts\n+++ b/packages/wdio-cucumber-framework/src/index.ts\n@@ -273,7 +273,7 @@ class CucumberAdapter {\n             }\n \n             const { runConfiguration } = await loadConfiguration(\n-                { profiles: this._cucumberOpts.profiles, provided: this._cucumberOpts as Partial<IConfiguration> },\n+                { profiles: this._cucumberOpts.profiles, provided: this._cucumberOpts as Partial<IConfiguration>, file: this._cucumberOpts.file },\n                 environment\n             )\n \n\ndiff --git a/packages/wdio-cucumber-framework/src/types.ts b/packages/wdio-cucumber-framework/src/types.ts\nindex 7d560f952a2..a366f466585 100644\n--- a/packages/wdio-cucumber-framework/src/types.ts\n+++ b/packages/wdio-cucumber-framework/src/types.ts\n@@ -143,6 +143,12 @@ export interface CucumberOptions {\n      * @default []\n      */\n     profiles?: string[];\n+    /**\n+     * Path to load configuration file from, or `false` to skip.\n+     * Not setting this results in undefined which ends up using default cucumber config files\n+     * @default undefined\n+     */\n+    file?: string | false | undefined;\n }\n \n export interface HookParams {\n",
    "test_patch": "diff --git a/tests/cucumber/cucumber.js b/tests/cucumber/cucumber.js\nnew file mode 100644\nindex 00000000000..ed42cc00521\n--- /dev/null\n+++ b/tests/cucumber/cucumber.js\n@@ -0,0 +1,10 @@\n+import path from 'node:path'\n+import url from 'node:url'\n+\n+const __dirname = path.dirname(url.fileURLToPath(import.meta.url))\n+\n+export default {\n+    paths: [\n+        path.resolve(__dirname, 'test-skipped.feature')\n+    ],\n+}\n\ndiff --git a/tests/smoke.runner.js b/tests/smoke.runner.js\nindex 0c5ca72bffc..c6f11742c30 100644\n--- a/tests/smoke.runner.js\n+++ b/tests/smoke.runner.js\n@@ -406,6 +406,42 @@ const cucumberReporter = async () => {\n     await fs.unlink(reporterLogsPath)\n }\n \n+/**\n+ * Cucumber file option\n+ */\n+const cucumberFileOption = async () => {\n+    const logFile = path.resolve(__dirname, 'cucumber', 'cucumberFileOption.log')\n+    await fs.rm(logFile, { force: true })\n+    const { passed } = await launch(\n+        'cucumberFileOption',\n+        path.resolve(__dirname, 'helpers', 'cucumber-hooks.conf.js'),\n+        {\n+            specs: [\n+                path.resolve(__dirname, 'cucumber', 'test.feature'),\n+            ],\n+            reporters: [\n+                ['spec', {\n+                    outputDir: __dirname,\n+                    stdout: false,\n+                    logFile\n+                }]],\n+            cucumberOpts: {\n+                ignoreUndefinedDefinitions: true,\n+                scenarioLevelReporter: true,\n+                retry: 1,\n+                retryTagFilter: '@retry',\n+                file: './cucumber/cucumber.js'\n+            }\n+        }\n+    )\n+    assert.strictEqual(passed, 1)\n+    const specLogs = (await fs.readFile(logFile)).toString().replace(ansiColorRegex, '')\n+    assert.ok(\n+        specLogs.includes('test-skipped.feature'),\n+        'scenario not included according to cucumber config'\n+    )\n+}\n+\n /**\n  * wdio test run with custom service\n  */\n@@ -929,6 +965,7 @@ const jasmineAfterHookArgsValidation = async () => {\n         cucumberTestrunnerMultipleByLineNumber,\n         cucumberFailAmbiguousDefinitions,\n         cucumberReporter,\n+        cucumberFileOption,\n         standaloneTest,\n         mochaAsyncTestrunner,\n         customService,\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13568",
    "pr_id": 13568,
    "issue_id": 769,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "webdrivercss  can't make a screenshot  ,error\nI want to use \"webdrivercss\" to make a screenshot , but png did not be creaeted.(the browser is open)\nwebdrivercss version:1.1.1\nwebdriverio version: 2.4.3\n\nmy code :  \nvar webdriverio = require('webdriverio');\nvar client = webdriverio.remote(options);\nrequire('webdrivercss').init(client,{\nscreenshotRoot: xpath + '/' + time\n});\nclient\n.init()\n.url(url)\n.setViewportSize({\nwidth: 1280,\nheight: 800\n})\n.webdrivercss('screenshot',[\n{\nname: 'screenshot',\nelem: 'body'\n}\n], function(err, res) {\nconsole.log(err);\n})\n.end();\n\nmy  error:\n{ [Error: [webdrivercss(\"screenshot\",[])] <= \n[saveDocumentScreenshot(\"/workspace/test_webd/tieba.baidu.com/L3AvMzUzMDM5Nzg2OD9fX3FhX3BhZ2VfZGlmZj0x/1441678124472/screenshot.png\")] <= \nCommand failed: gm convert: Unable to open file (/workspace/test_webd/node_modules/webdrivercss/lib/../.tmp/0-1.png) [No such file or directory].\n] code: 1, signal: null }\n",
    "issue_word_count": 117,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-cli/src/utils.ts",
      "packages/wdio-cli/tests/utils.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-cli/tests/utils.test.ts"
    ],
    "base_commit": "b187de922456f21d96fd44acc14d2faf291fe6c7",
    "head_commit": "2261ca0ce1aa3f23626e5a156e338b6980586dc7",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13568",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13568",
    "dockerfile": "",
    "pr_merged_at": "2024-09-15T17:08:05.000Z",
    "patch": "diff --git a/packages/wdio-cli/src/utils.ts b/packages/wdio-cli/src/utils.ts\nindex fb8bbfaf8cd..8db2fd39676 100644\n--- a/packages/wdio-cli/src/utils.ts\n+++ b/packages/wdio-cli/src/utils.ts\n@@ -825,16 +825,18 @@ export async function npmInstall(parsedAnswers: ParsedAnswers, npmTag: string) {\n \n /**\n  * detect the package manager that was used\n+ * uses the environment variable `npm_config_user_agent` to detect the package manager\n+ * falls back to `npm` if no package manager could be detected\n  */\n-export function detectPackageManager(argv = process.argv) {\n-    return PMs.find((pm) => (\n-        // for pnpm check \"~/Library/pnpm/store/v3/...\"\n-        // for NPM check \"~/.npm/npx/...\"\n-        // for Yarn check \"~/.yarn/bin/create-wdio\"\n-        // for Bun check \"~/.bun/bin/create-wdio\"\n-        argv[1].includes(`${path.sep}${pm}${path.sep}`) ||\n-        argv[1].includes(`${path.sep}.${pm}${path.sep}`)\n-    )) || 'npm'\n+export function detectPackageManager() {\n+    if (!process.env.npm_config_user_agent) {\n+        return 'npm'\n+    }\n+    const detectedPM = process.env.npm_config_user_agent.split('/')[0].toLowerCase()\n+\n+    const matchedPM = PMs.find(pm => pm.toLowerCase() === detectedPM)\n+\n+    return matchedPM || 'npm'\n }\n \n /**\n",
    "test_patch": "diff --git a/packages/wdio-cli/tests/utils.test.ts b/packages/wdio-cli/tests/utils.test.ts\nindex 25841a6da37..deeb4e25488 100644\n--- a/packages/wdio-cli/tests/utils.test.ts\n+++ b/packages/wdio-cli/tests/utils.test.ts\n@@ -983,13 +983,15 @@ test('runAppiumInstaller', async () => {\n })\n \n test.each([\n-    ['', 'npm'],\n-    [path.resolve('~/Library/pnpm/store/v3/...'), 'pnpm'],\n-    [path.resolve('~/.npm/npx/...'), 'npm'],\n-    [path.resolve('~/.yarn/bin/create-wdio'), 'yarn'],\n-    [path.resolve('~/.bun/bin/create-wdio'), 'bun']\n-])('detectPackageManager', async (path, pm) => {\n-    expect(detectPackageManager(['', path])).toEqual(pm)\n+    ['with empty variable should fallback to npm', '', 'npm'],\n+    ['with pnpm should return pnpm', 'pnpm/9.10.0 npm/? node/v20.11.0 darwin arm64', 'pnpm'],\n+    ['with yarn should return yarn', 'yarn/4.5.0 npm/? node/v20.11.0 darwin arm64', 'yarn'],\n+    ['with npm should return npm', 'npm/10.2.4 node/v20.11.0 darwin arm64 workspaces/false', 'npm'],\n+    ['with bun should return bun', 'bun/1.1.27 npm/? node/v22.6.0 darwin arm64', 'bun'],\n+    ['with unsupported package manager should return npm', 'not supported package manager/x.x.x npm/? node/v22.6.0 darwin arm64', 'npm'],\n+])('detectPackageManager %s', async (_, stub, pm) => {\n+    vi.stubEnv('npm_config_user_agent', stub)\n+    expect(detectPackageManager()).toEqual(pm)\n })\n \n afterEach(() => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13526",
    "pr_id": 13526,
    "issue_id": 13522,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[💡 Feature]: Add option to add console logs to junit report\n### Is your feature request related to a problem?\r\n\r\nWhen viewing junit xml results in e.g. jenkins it'd be very helpful to have the ability to view the console logs for a testcase.\r\n\r\nCurrently i'm only able to see the commands sent by webdriverio\r\n\r\n### Describe the solution you'd like.\r\n\r\nAs implemented for allure and spec reporter in https://github.com/webdriverio/webdriverio/pull/7134 i'd like to add a option to add console logs to junit xml report.\r\n\r\nIf activated the standardout will contain:\r\n\r\n```\r\nconsole log line 0\r\nconsole log line 1\r\n\r\n...Command output...\r\n\r\nCOMMAND: POST /session/4875944f97c944d80e944a399b682656/url - {\"url\":\"http://google.com/\"}\r\nRESULT: {\"url\":\"http://google.com/\"}\r\nCOMMAND: GET /session/4875944f97c944d80e944a399b682656/title - {}\r\nRESULT: {}\r\n```\r\n\r\n### Describe alternatives you've considered.\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\nIf this feature is accepted i'm happy to send a PR for this feature.\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct",
    "issue_word_count": 166,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "packages/wdio-junit-reporter/README.md",
      "packages/wdio-junit-reporter/src/index.ts",
      "packages/wdio-junit-reporter/src/types.ts",
      "packages/wdio-junit-reporter/tests/reporter.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-junit-reporter/tests/reporter.test.ts"
    ],
    "base_commit": "b1d8c631e0a6098d35a6041ab2d7cbcd7d390599",
    "head_commit": "378b2ad7b5e3997ab18fb33a7b580dcdb593a98d",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13526",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13526",
    "dockerfile": "",
    "pr_merged_at": "2024-09-17T09:56:40.000Z",
    "patch": "diff --git a/packages/wdio-junit-reporter/README.md b/packages/wdio-junit-reporter/README.md\nindex 85479b13001..d8dec8f0dde 100644\n--- a/packages/wdio-junit-reporter/README.md\n+++ b/packages/wdio-junit-reporter/README.md\n@@ -270,6 +270,31 @@ module.exports = {\n };\n ```\n \n+### addWorkerLogs\n+\n+Optional parameter, set this parameter to true in order to attach console logs from the test in the reporter.\n+\n+Type: `Boolean`<br />\n+Default: `false`<br />\n+Example:\n+\n+```js\n+// wdio.conf.js\n+module.exports = {\n+    // ...\n+    reporters: [\n+        'dot',\n+        ['junit', {\n+            outputDir: './',\n+            addWorkerLogs: true\n+        }]\n+    ],\n+    // ...\n+};\n+```\n+\n+\n+\n ## Jenkins Setup\n \n Last but not least you need to tell your CI job (e.g. Jenkins) where it can find the xml file. To do that, add a post-build action to your job that gets executed after the test has run and point Jenkins (or your desired CI system) to your XML test results:\n\ndiff --git a/packages/wdio-junit-reporter/src/index.ts b/packages/wdio-junit-reporter/src/index.ts\nindex 1be47e864ca..cc7e8588e98 100644\n--- a/packages/wdio-junit-reporter/src/index.ts\n+++ b/packages/wdio-junit-reporter/src/index.ts\n@@ -12,6 +12,14 @@ const ansiRegex = new RegExp([\n     '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n ].join('|'), 'g')\n \n+/** Interface to store additional information for a given testcase */\n+interface JunitReporterAdditionalInformation {\n+    /** uid of the test case */\n+    uid: string\n+    /** Worker console log for this test. only filled if addWorkerLogs is true */\n+    workerConsoleLog: string\n+}\n+\n /**\n  * Reporter that converts test results from a single instance/runner into an XML JUnit report. This class\n  * uses junit-report-builder (https://github.com/davidparsson/junit-report-builder) to build report.The report\n@@ -25,24 +33,54 @@ class JunitReporter extends WDIOReporter {\n     private _fileNameLabel?: string\n     private _activeFeature?: any\n     private _activeFeatureName?: any\n+    private _testToAdditionalInformation: { [keys: string]: JunitReporterAdditionalInformation }\n+    private _currentTest?: TestStats\n+    private _originalStdoutWrite: Function\n+    private _addWorkerLogs: boolean\n \n-    constructor (public options: JUnitReporterOptions) {\n+    constructor(public options: JUnitReporterOptions) {\n         super(options)\n+        this._addWorkerLogs = options.addWorkerLogs ?? false\n+        this._testToAdditionalInformation = {}\n+        this._originalStdoutWrite = process.stdout.write.bind(process.stdout)\n         this._suiteNameRegEx = this.options.suiteNameFormat instanceof RegExp\n             ? this.options.suiteNameFormat\n             : /[^a-zA-Z0-9@]+/ // Reason for ignoring @ is; reporters like wdio-report-portal will fetch the tags from testcase name given as @foo @bar\n+\n+        const processObj: any = process\n+        if (this._addWorkerLogs) {\n+            processObj.stdout.write = this._appendConsoleLog.bind(this)\n+        }\n     }\n \n-    onTestRetry (testStats: TestStats) {\n+    onTestRetry(testStats: TestStats) {\n         testStats.skip('Retry')\n     }\n \n-    onRunnerEnd (runner: RunnerStats) {\n+    onTestStart(test: TestStats) {\n+        // Reset stdout when a test starts\n+        this._currentTest = test\n+        this._testToAdditionalInformation[test.uid] = {\n+            workerConsoleLog: '',\n+            uid: test.uid\n+        }\n+    }\n+\n+    onRunnerEnd(runner: RunnerStats) {\n         const xml = this._buildJunitXml(runner)\n         this.write(xml)\n     }\n \n-    private _prepareName (name = 'Skipped test') {\n+    private _appendConsoleLog(chunk: string, encoding: BufferEncoding, callback: ((err?: Error) => void)) {\n+        if (this._currentTest?.uid) {\n+            if (typeof chunk === 'string' && !chunk.includes('mwebdriver')) {\n+                this._testToAdditionalInformation[this._currentTest.uid].workerConsoleLog = (this._testToAdditionalInformation[this._currentTest.uid].workerConsoleLog ?? '') + chunk\n+            }\n+        }\n+        return this._originalStdoutWrite(chunk, encoding, callback)\n+    }\n+\n+    private _prepareName(name = 'Skipped test') {\n         return name.split(this._suiteNameRegEx).filter(\n             (item) => item && item.length\n         ).join(' ')\n@@ -87,7 +125,7 @@ class JunitReporter extends WDIOReporter {\n         } else if (this._activeFeature) {\n             let scenario = suite\n             const testName = this._prepareName(suite.title)\n-            const classNameFormat = this.options.classNameFormat ? this.options.classNameFormat({ packageName: this._packageName, activeFeatureName: this._activeFeatureName }): `${this._packageName}.${this._activeFeatureName}`\n+            const classNameFormat = this.options.classNameFormat ? this.options.classNameFormat({ packageName: this._packageName, activeFeatureName: this._activeFeatureName }) : `${this._packageName}.${this._activeFeatureName}`\n             const testCase = this._activeFeature.testCase()\n                 .className(classNameFormat)\n                 .name(`${testName}`)\n@@ -191,7 +229,7 @@ class JunitReporter extends WDIOReporter {\n                 }\n             } else if (test.state === 'failed') {\n                 if (test.error) {\n-                    if (test.error.message){\n+                    if (test.error.message) {\n                         test.error.message = test.error.message.replace(ansiRegex, '')\n                     }\n \n@@ -218,7 +256,7 @@ class JunitReporter extends WDIOReporter {\n         return builder\n     }\n \n-    private _buildJunitXml (runner: RunnerStats) {\n+    private _buildJunitXml(runner: RunnerStats) {\n         const builder = junit.newBuilder()\n         if (runner.config.hostname !== undefined && runner.config.hostname.indexOf('browserstack') > -1) {\n             // NOTE: deviceUUID is used to build sanitizedCapabilities resulting in a ever-changing package name in runner.sanitizedCapabilities when running Android tests under Browserstack. (i.e. ht79v1a03938.android.9)\n@@ -281,7 +319,25 @@ class JunitReporter extends WDIOReporter {\n         return builder\n     }\n \n-    private _getStandardOutput (test: TestStats) {\n+    private _getStandardOutput(test: TestStats) {\n+        let consoleOutput = ''\n+        if (this._addWorkerLogs) {\n+            consoleOutput = this._testToAdditionalInformation[test.uid]?.workerConsoleLog ?? ''\n+        }\n+        const commandText = this._getCommandStandardOutput(test)\n+        let result = ''\n+        if (consoleOutput !== '') {\n+            result += consoleOutput\n+        }\n+        if (commandText !== '' && consoleOutput !== '') {\n+            result += '\\n...command output...\\n\\n'\n+        }\n+        result += commandText\n+\n+        return result\n+    }\n+\n+    private _getCommandStandardOutput(test: TestStats) {\n         const standardOutput: string[] = []\n         test.output.forEach((data) => {\n             switch (data.type) {\n@@ -289,7 +345,7 @@ class JunitReporter extends WDIOReporter {\n                 standardOutput.push(\n                     data.method\n                         ? `COMMAND: ${data.method.toUpperCase()} ` +\n-                          `${data.endpoint.replace(':sessionId', data.sessionId)} - ${this._format(data.body)}`\n+                            `${data.endpoint.replace(':sessionId', data.sessionId)} - ${this._format(data.body)}`\n                         : `COMMAND: ${data.command} - ${this._format(data.params)}`\n                 )\n                 break\n@@ -301,7 +357,7 @@ class JunitReporter extends WDIOReporter {\n         return standardOutput.length ? standardOutput.join('\\n') : ''\n     }\n \n-    private _format (val: any) {\n+    private _format(val: any) {\n         return JSON.stringify(limit(val))\n     }\n \n\ndiff --git a/packages/wdio-junit-reporter/src/types.ts b/packages/wdio-junit-reporter/src/types.ts\nindex 89bf2a5047c..356dd2e9995 100644\n--- a/packages/wdio-junit-reporter/src/types.ts\n+++ b/packages/wdio-junit-reporter/src/types.ts\n@@ -113,4 +113,27 @@ export interface JUnitReporterOptions extends Reporters.Options {\n      * ```\n      */\n     errorOptions?: Record<string, string>\n+\n+    /**\n+     * Optional parameter, set this parameter to true in order to attach console logs from the test in the reporter.\n+     * @default false\n+     *\n+     * @example\n+     *\n+     * ```js\n+     * // wdio.conf.js\n+     * module.exports = {\n+     *     // ...\n+     *     reporters: [\n+     *         'dot',\n+     *         ['junit', {\n+     *             outputDir: './',\n+     *             addWorkerLogs: true\n+     *         }]\n+     *     ],\n+     *     // ...\n+     * };\n+     * ```\n+     */\n+    addWorkerLogs?: boolean\n }\n",
    "test_patch": "diff --git a/packages/wdio-junit-reporter/tests/reporter.test.ts b/packages/wdio-junit-reporter/tests/reporter.test.ts\nindex 46e865a0278..611322d828d 100644\n--- a/packages/wdio-junit-reporter/tests/reporter.test.ts\n+++ b/packages/wdio-junit-reporter/tests/reporter.test.ts\n@@ -4,6 +4,7 @@ import { describe, expect, it, vi, beforeEach } from 'vitest'\n import { TestStats } from '@wdio/reporter'\n \n import WDIOJunitReporter from '../src/index.js'\n+import type { SuiteStats } from '@wdio/reporter'\n \n const mochaRunnerLog = (await vi.importActual('./__fixtures__/mocha-runner.json') as any).default\n const mochaRunnerNestedArrayOfSuitesLog = (await vi.importActual('./__fixtures__/mocha-runner-nested-array-specs.json') as any).default\n@@ -365,4 +366,27 @@ describe('wdio-junit-reporter', () => {\n         expect(reporter['_sameFileName'](file1Path, undefined)).toBeFalsy()\n         expect(reporter['_sameFileName'](undefined, undefined)).toBeTruthy()\n     })\n+\n+    const options = { stdout: true, addWorkerLogs: true }\n+\n+    it('addWorkerLogs: should add worker console log to report for test if activated', () => {\n+        reporter = new WDIOJunitReporter(options)\n+        const suite = Object.values(suitesLog)[0] as SuiteStats\n+        reporter.onSuiteStart(suite)\n+        const test1 = suite.tests[0]\n+        const test2 = suite.tests[1]\n+        reporter.onTestStart(test1)\n+        reporter['_appendConsoleLog']('0 - line 0', 'utf-8', () => {})\n+        reporter['_appendConsoleLog']('0 - line 1', 'utf-8', () => {})\n+        reporter.onTestPass(test1)\n+        reporter.onTestStart(test2)\n+        reporter['_appendConsoleLog']('1 - line 0', 'utf-8', () => {})\n+        reporter['_appendConsoleLog']('1 - line 1', 'utf-8', () => {})\n+        reporter.onTestPass(suite.tests[0])\n+        expect(reporter['_getStandardOutput'](test1).toString()).toContain('0 - line 1')\n+        expect(reporter['_getStandardOutput'](test2).toString()).toContain('1 - line 1')\n+\n+        expect(reporter['_getStandardOutput'](test1).toString()).not.toContain('1 - line 1')\n+        expect(reporter['_getStandardOutput'](test2).toString()).not.toContain('0 - line 1')\n+    })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13523",
    "pr_id": 13523,
    "issue_id": 13524,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Fix customElement wrapper for custom elements which don't define connectedCallback or disconnectedCallback\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\nlatest\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n_No response_\n\n### What happened?\n\nStarting with v9.0.6 webdriver.io has a bug which causes tests to fail when a custom element doesn't define a connectedCallback or a disconnectedCallback.\r\nThe reason is with https://github.com/webdriverio/webdriverio/pull/13430 there is no check anymore if the original function is defined before calling it.\r\n\r\nFix: https://github.com/webdriverio/webdriverio/pull/13523\n\n### What is your expected behavior?\n\n_No response_\n\n### How to reproduce the bug.\n\nIn the code under test, call `customElements.define(...)` without defining a `connectedCallback`.\n\n### Relevant log output\n\n```typescript\nCannot read properties of undefined (reading 'call')\r\n[chrome 130.0.6700.0 mac #0-0] TypeError: Cannot read properties of undefined (reading 'call')\r\n[chrome 130.0.6700.0 mac #0-0]     at Constructor.disconnectedCallback (<anonymous>:16:39)\r\n[chrome 130.0.6700.0 mac #0-0]     at Context.<anonymous> (http://localhost:55160/Users/D073613/webdriverio/e2e/browser-runner/lit.test.js:845:11)\r\n[chrome 130.0.6700.0 mac #0-0]     at Context.executeAsync (http://localhost:55160/Users/D073613/webdriverio/packages/src/shim.ts:340:16)\r\n[chrome 130.0.6700.0 mac #0-0]     at Context.testFrameworkFnWrapper (http://localhost:55160/Users/D073613/webdriverio/packages/src/test-framework/testFnWrapper.ts:94:37)\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 288,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "e2e/browser-runner/lit.test.js",
      "packages/webdriverio/src/scripts/customElement.ts"
    ],
    "pr_changed_test_files": [
      "e2e/browser-runner/lit.test.js"
    ],
    "base_commit": "b1d8c631e0a6098d35a6041ab2d7cbcd7d390599",
    "head_commit": "dc9e92501d58f16893de03473739dac412db4c04",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13523",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13523",
    "dockerfile": "",
    "pr_merged_at": "2024-09-17T09:55:23.000Z",
    "patch": "diff --git a/packages/webdriverio/src/scripts/customElement.ts b/packages/webdriverio/src/scripts/customElement.ts\nindex 2a5550f19f1..f5774a84bd2 100644\n--- a/packages/webdriverio/src/scripts/customElement.ts\n+++ b/packages/webdriverio/src/scripts/customElement.ts\n@@ -17,13 +17,13 @@ export default function customElementWrapper () {\n                 parentNode = parentNode.parentNode\n             }\n             console.debug('[WDIO]', 'newShadowRoot', this, parentNode, parentNode === document)\n-            return origConnectedCallback.call(this)\n+            return origConnectedCallback?.call(this)\n         }\n \n         const origDisconnectedCallback = Constructor.prototype.disconnectedCallback\n         Constructor.prototype.disconnectedCallback = function(this: HTMLElement) {\n             console.debug('[WDIO]', 'removeShadowRoot', this)\n-            return origDisconnectedCallback.call(this)\n+            return origDisconnectedCallback?.call(this)\n         }\n         return origFn(name, Constructor, options)\n     }\n",
    "test_patch": "diff --git a/e2e/browser-runner/lit.test.js b/e2e/browser-runner/lit.test.js\nindex bbe654a2bf9..fa16e5ea315 100644\n--- a/e2e/browser-runner/lit.test.js\n+++ b/e2e/browser-runner/lit.test.js\n@@ -830,4 +830,18 @@ describe('Lit Component testing', () => {\n         const a = new Foo ()\n         expect(a.tagName).toBe('X-FOO')\n     })\n+\n+    it('connectedCallback should not fail if no original connectedCallback is defined', () => {\n+        class Foo extends HTMLElement {}\n+        customElements.define('y-foo', Foo)\n+        const a = new Foo ()\n+        a.connectedCallback()\n+    })\n+\n+    it('disConnectedCallback should not fail if no original disConnectedCallback is defined', () => {\n+        class Foo extends HTMLElement {}\n+        customElements.define('z-foo', Foo)\n+        const a = new Foo ()\n+        a.disconnectedCallback()\n+    })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13489",
    "pr_id": 13489,
    "issue_id": 13487,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Browser runner hangs and times out on Firefox in wdio v9\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.0.7\n\n### Node.js Version\n\n22.7.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\r\n  browserName: 'firefox'\r\n}\n```\n\n\n### What happened?\n\nIn browser-runner v8.40.5, everything works fine, but in v9 (tested with v9.0.0 and 9.0.7) the tests hang in Firefox. A complete, minimal test case is available at: https://github.com/Mr0grog/test-wdio-9-firefox-hang\r\n\r\nWhen running the tests, the browser opens and loads the mocha harness/UI, but never loads or runs the actual tests (it shows a loading spinner the whole time). On the command line, the test polls for a result until it times out and fails.\r\n\r\nLooking at the logs (and devtools in the browser), it looks like the problem is probably something with a websocket handshake:\r\n\r\n```\r\nWARN geckodriver: JavaScript error: chrome://remote/content/server/WebSocketHandshake.sys.mjs, line 166: Error: The handshake request has incorrect Origin header http://localhost:61600\r\n```\r\n\r\nLooking at the network panel in the browser dev tools, it appears to be trying to load the websocket from `127.0.0.1` (functionally the same, but 🤷) and from a different port than the one listed in the message above.\n\n### What is your expected behavior?\n\nThe test should run and wdio should finish without an error.\n\n### How to reproduce the bug.\n\nThe following repository has a complete example: https://github.com/Mr0grog/test-wdio-9-firefox-hang\r\n\r\nJust `npm install` and then `npm test`.\r\n\r\nMainly, the relevant code is the `wdio.conf.js`:\r\n\r\n```js\r\n// wdio.conf.js\r\nexports.config = {\r\n    runner: 'browser',\r\n    specs: [\r\n        './example.test.js'\r\n    ],\r\n    capabilities: [{\r\n        browserName: 'firefox'\r\n    }],\r\n    logLevel: 'debug',  // trace | debug | info | warn | error | silent\r\n    framework: 'mocha',\r\n    mochaOpts: {\r\n        ui: 'bdd',\r\n        timeout: 10000\r\n    },\r\n};\r\n```\r\n\r\nAnd a simple test for it to run in `example.test.js`:\r\n\r\n```js\r\n// example.test.js\r\nimport { expect } from '@wdio/globals'\r\n\r\ndescribe('WebdriverIO Test', () => {\r\n  it('should work', async () => {\r\n    expect(true).toEqual(true);\r\n  });\r\n});\r\n```\r\n\r\nYou can test that this works fine in v8 by changing the dependencies in `package.json` to:\r\n\r\n```js\r\n  \"devDependencies\": {\r\n    \"@wdio/browser-runner\": \"^8.40.5\",\r\n    \"@wdio/cli\": \"^8.40.5\",\r\n    \"@wdio/mocha-framework\": \"^8.40.3\"\r\n  }\r\n```\r\n\r\nThen reinstall and re-run. Everything should succeed.\n\n### Relevant log output\n\n```typescript\nComplete log output:\r\n\r\n% npm test\r\n\r\n> test-wdio-firefox-hang@1.0.0 test\r\n> npm run wdio\r\n\r\n\r\n> test-wdio-firefox-hang@1.0.0 wdio\r\n> wdio run ./wdio.conf.js\r\n\r\n\r\nExecution of 1 workers started at 2024-09-01T21:11:45.017Z\r\n\r\n2024-09-01T21:11:45.271Z INFO @wdio/browser-runner: Initiate browser environment\r\n2024-09-01T21:11:45.272Z INFO @wdio/cli:launcher: Run onPrepare hook\r\n2024-09-01T21:11:45.272Z INFO @wdio/utils: Setting up browser driver for: firefox@stable\r\n2024-09-01T21:11:45.272Z INFO @wdio/utils: Setting up browser binaries for: firefox@stable\r\n2024-09-01T21:11:45.407Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2024-09-01T21:11:45.427Z INFO @wdio/browser-runner:vite: Re-optimizing dependencies because lockfile has changed\r\n2024-09-01T21:11:45.435Z WARN @wdio/browser-runner:vite: Failed to resolve dependency: lodash.merge, present in 'optimizeDeps.include'\r\n2024-09-01T21:11:45.437Z WARN @wdio/browser-runner:vite: Failed to resolve dependency: p-iteration, present in 'optimizeDeps.include'\r\n2024-09-01T21:11:45.447Z INFO @wdio/browser-runner:ViteServer: Vite server started successfully on port 61600, root directory: /Users/rbrackett/Dev/test/webdriverio2\r\n2024-09-01T21:11:45.447Z INFO @wdio/local-runner: Start worker 0-0 with arg: run,./wdio.conf.js\r\n2024-09-01T21:11:45.448Z DEBUG @wdio/local-runner: Send command run to worker with cid \"0-0\"\r\n[0-0] 2024-09-01T21:11:45.954Z INFO @wdio/local-runner: Run worker command: run\r\n[0-0] 2024-09-01T21:11:45.958Z DEBUG @wdio/runner: init remote session\r\n[0-0] RUNNING in firefox - file:///example.test.js\r\n[0-0] 2024-09-01T21:11:45.959Z DEBUG @wdio/runner: init remote session\r\n[0-0] 2024-09-01T21:11:45.960Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n[0-0] 2024-09-01T21:11:46.065Z INFO geckodriver: Starting Geckodriver at /var/folders/jk/1hv06w454vj4q4rk2gl0zg800000gn/T/geckodriver with params: --port=61602 --allow-hosts=localhost --host=0.0.0.0 --websocket-port=0\r\n[0-0] 2024-09-01T21:11:46.071Z INFO geckodriver: 1725225106068\tgeckodriver\tINFO\tListening on 0.0.0.0:61602\r\n[0-0] 2024-09-01T21:11:46.077Z INFO @wdio/utils: Started GeckoDriver in 117ms on port 61602\r\n[0-0] 2024-09-01T21:11:46.078Z INFO webdriver: [POST] http://localhost:61602/session\r\n[0-0] 2024-09-01T21:11:46.078Z INFO webdriver: DATA {\r\n[0-0]   capabilities: {\r\n[0-0]     alwaysMatch: {\r\n[0-0]       browserName: 'firefox',\r\n[0-0]       'moz:firefoxOptions': [Object],\r\n[0-0]       webSocketUrl: true\r\n[0-0]     },\r\n[0-0]     firstMatch: [ {} ]\r\n[0-0]   },\r\n[0-0]   desiredCapabilities: {\r\n[0-0]     browserName: 'firefox',\r\n[0-0]     'moz:firefoxOptions': { binary: '/Applications/Firefox.app/Contents/MacOS/Firefox' },\r\n[0-0]     webSocketUrl: true\r\n[0-0]   }\r\n[0-0] }\r\n[0-0] 2024-09-01T21:11:46.090Z INFO geckodriver: 1725225106090\tmozrunner::runner\tINFO\tRunning command: MOZ_CRASHREPORTER=\"1\" MOZ_CRASHREPORTER_NO_REPORT=\"1\" MOZ_CRASHREPORTER_SHUTDOWN=\"1\" MOZ_NO_REMOTE=\"1\" \"/App ... s\" \"localhost\" \"-foreground\" \"-no-remote\" \"-profile\" \"/var/folders/jk/1hv06w454vj4q4rk2gl0zg800000gn/T/rust_mozprofilenmsuqI\"\r\n[0-0] 2024-09-01T21:11:46.234Z INFO geckodriver: console.warn: services.settings: Ignoring preference override of remote settings server\r\n[0-0] 2024-09-01T21:11:46.234Z INFO geckodriver: console.warn: services.settings: Allow by setting MOZ_REMOTE_SETTINGS_DEVTOOLS=1 in the environment\r\n[0-0] 2024-09-01T21:11:46.323Z INFO geckodriver: 1725225106322\tMarionette\tINFO\tMarionette enabled\r\n[0-0] 2024-09-01T21:11:46.529Z INFO geckodriver: console.error: \"Warning: unrecognized command line flag\" \"-remote-allow-hosts\"\r\n[0-0] 2024-09-01T21:11:46.542Z INFO geckodriver: 1725225106542\tMarionette\tINFO\tListening on port 61605\r\n[0-0] 2024-09-01T21:11:46.549Z WARN geckodriver: WebDriver BiDi listening on ws://127.0.0.1:61606\r\n[0-0] 2024-09-01T21:11:46.613Z INFO geckodriver: Read port: 61605\r\n[0-0] 2024-09-01T21:11:47.029Z WARN geckodriver: UNSUPPORTED (log once): POSSIBLE ISSUE: unit 1 GLD_TEXTURE_INDEX_2D is unloadable and bound to sampler type (Float) - using zero texture because texture unloadable\r\n[0-0] 2024-09-01T21:11:47.379Z INFO webdriver: Register BiDi handler for session with id b9a656d2-896a-4779-9c7c-5af14f84c0e8\r\n[0-0] 2024-09-01T21:11:47.379Z INFO webdriver: Connect to webSocketUrl ws://127.0.0.1:61606/session/b9a656d2-896a-4779-9c7c-5af14f84c0e8\r\n[0-0] 2024-09-01T21:11:47.383Z INFO geckodriver: 1725225107383\tRemoteAgent\tINFO\tPerform WebSocket upgrade for incoming connection from 127.0.0.1:61616\r\n[0-0] 2024-09-01T21:11:47.385Z INFO webdriver: Connected session to Bidi protocol\r\n[0-0] 2024-09-01T21:11:47.385Z INFO webdriver: Connected session to Bidi protocol\r\n[0-0] 2024-09-01T21:11:47.385Z INFO webdriver: Connected to WebDriver Bidi interface at ws://127.0.0.1:61606/session/b9a656d2-896a-4779-9c7c-5af14f84c0e8\r\n[0-0] 2024-09-01T21:11:47.385Z INFO webdriver: BIDI COMMAND script.addPreloadScript { functionDeclaration: <PreloadScript[868 bytes]>, contexts: undefined }\r\n[0-0] 2024-09-01T21:11:47.386Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\",\"network.responseCompleted\",\"network.beforeRequestSent\",\"network.fetchError\"]}\r\n[0-0] 2024-09-01T21:11:47.386Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.userPromptOpened\"]}\r\n[0-0] 2024-09-01T21:11:47.386Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"browsingContext.navigationStarted\"]}\r\n[0-0] 2024-09-01T21:11:47.386Z INFO webdriver: BIDI COMMAND session.subscribe {\"events\":[\"log.entryAdded\"]}\r\n[0-0] 2024-09-01T21:11:47.401Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":4,\"result\":{}}\r\n[0-0] 2024-09-01T21:11:47.402Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":1,\"result\":{\"script\":\"61a7f7f6-57da-4093-9f6d-5feda8171639\"}}\r\n[0-0] 2024-09-01T21:11:47.402Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":2,\"result\":{}}\r\n[0-0] 2024-09-01T21:11:47.402Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":3,\"result\":{}}\r\n[0-0] 2024-09-01T21:11:47.403Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":5,\"result\":{}}\r\n[0-0] 2024-09-01T21:11:47.403Z INFO @wdio/runner: Run spec file file:///Users/rbrackett/Dev/test/webdriverio2/example.test.js for cid 0-0\r\n[0-0] 2024-09-01T21:11:47.403Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-09-01T21:11:47.403Z INFO webdriver: [GET] http://localhost:61602/session/b9a656d2-896a-4779-9c7c-5af14f84c0e8/window\r\n[0-0] 2024-09-01T21:11:47.406Z INFO webdriver: RESULT 897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\r\n[0-0] 2024-09-01T21:11:47.406Z INFO webdriver: BIDI COMMAND browsingContext.navigate {\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\",\"url\":\"http://localhost:61600/?cid=0-0&spec=/Users/rbrackett/Dev/test/webdriverio2/example.test.js\",\"wait\":\"complete\"}\r\n[0-0] 2024-09-01T21:11:47.411Z INFO webdriver: COMMAND getWindowHandle()\r\n[0-0] 2024-09-01T21:11:47.411Z INFO webdriver: [GET] http://localhost:61602/session/b9a656d2-896a-4779-9c7c-5af14f84c0e8/window\r\n2024-09-01T21:11:47.416Z INFO @wdio/browser-runner:plugin: Received request for: /?cid=0-0&spec=/Users/rbrackett/Dev/test/webdriverio2/example.test.js\r\n2024-09-01T21:11:47.418Z DEBUG @wdio/browser-runner:plugin: Render template for /?cid=0-0&spec=/Users/rbrackett/Dev/test/webdriverio2/example.test.js\r\n[0-0] 2024-09-01T21:11:47.417Z INFO webdriver: RESULT 897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\r\n[0-0] 2024-09-01T21:11:47.417Z INFO webdriverio:ContextManager: Update current context: 897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\r\n2024-09-01T21:11:47.819Z DEBUG @wdio/local-runner: Send command workerRequest to worker with cid \"0-0\"\r\n[0-0] 2024-09-01T21:11:47.827Z INFO webdriverio:ShadowRootManager: Registered new shadow root for element <mocha-framework /> with id eeaf2e5c-4b01-4a82-965f-07f311a5abbb\r\n[0-0] 2024-09-01T21:11:47.838Z INFO geckodriver: 1725225107838\tRemoteAgent\tINFO\tPerform WebSocket upgrade for incoming connection from 127.0.0.1:61626\r\n[0-0] 2024-09-01T21:11:47.838Z WARN geckodriver: JavaScript error: chrome://remote/content/server/WebSocketHandshake.sys.mjs, line 166: Error: The handshake request has incorrect Origin header http://localhost:61600\r\n[0-0] 2024-09-01T21:11:47.843Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":6,\"result\":{\"navigation\":\"1edcd6cb-43b0-4f67-879f-f464f37e85c7\",\"url\":\"http://localhost:61600/?cid=0-0&spec=/Users/rbrackett/Dev/test/webdriverio2/example.test.js\"}}\r\n[0-0] 2024-09-01T21:11:47.843Z INFO webdriver: COMMAND addCookie(<object>)\r\n[0-0] 2024-09-01T21:11:47.843Z INFO webdriver: [POST] http://localhost:61602/session/b9a656d2-896a-4779-9c7c-5af14f84c0e8/cookie\r\n[0-0] 2024-09-01T21:11:47.843Z INFO webdriver: DATA {\r\n[0-0]   cookie: {\r\n[0-0]     name: 'WDIO_SPEC',\r\n[0-0]     value: '/Users/rbrackett/Dev/test/webdriverio2/example.test.js'\r\n[0-0]   }\r\n[0-0] }\r\n[0-0] 2024-09-01T21:11:47.852Z INFO webdriver: RESULT null\r\n[0-0] 2024-09-01T21:11:47.852Z INFO webdriver: COMMAND addCookie(<object>)\r\n[0-0] 2024-09-01T21:11:47.852Z INFO webdriver: [POST] http://localhost:61602/session/b9a656d2-896a-4779-9c7c-5af14f84c0e8/cookie\r\n[0-0] 2024-09-01T21:11:47.852Z INFO webdriver: DATA { cookie: { name: 'WDIO_CID', value: '0-0' } }\r\n[0-0] 2024-09-01T21:11:47.856Z INFO webdriver: RESULT null\r\n[0-0] 2024-09-01T21:11:48.359Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:48.408Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":7,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:48.858Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:48.863Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":8,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:49.361Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:49.365Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":9,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:49.862Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:49.866Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":10,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:50.363Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:50.368Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":11,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:50.864Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:50.869Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":12,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:51.365Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:51.368Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":13,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:51.866Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:51.872Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":14,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:52.370Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:52.374Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":15,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:52.873Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:52.881Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":16,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:53.373Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:53.376Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":17,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:53.875Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:53.880Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":18,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:54.375Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:54.379Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":19,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:54.875Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:54.876Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":20,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:55.375Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:55.385Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":21,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:55.877Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:55.882Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":22,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:56.379Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:56.385Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":23,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:56.881Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:56.885Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":24,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0] 2024-09-01T21:11:57.381Z INFO webdriver: BIDI COMMAND script.callFunction {\"functionDeclaration\":\"<Function[849 bytes]>\",\"awaitPromise\":false,\"arguments\":[],\"target\":{\"context\":\"897d0cc4-382a-4b89-ace0-e2a4f0a8ebfa\"}}\r\n[0-0] 2024-09-01T21:11:57.397Z DEBUG webdriver: BIDI RESULT {\"type\":\"success\",\"id\":25,\"result\":{\"realm\":\"86c39598-e1a8-49d0-9f78-0749e142901b\",\"type\":\"success\",\"result\":{\"type\":\"object\",\"value\":[[\"errors\",{\"type\":\"array\",\"value\":[]}],[\"hasViteError\",{\"type\":\"boolean\",\"value\":false}]]}}}\r\n[0-0]  Error:  Test failed due to following error(s):\r\n  - example.test.js: Timed out after 10s waiting for test results\r\n\r\n[0-0] 2024-09-01T21:11:57.857Z INFO webdriver: COMMAND deleteSession()\r\n[0-0] 2024-09-01T21:11:57.857Z INFO webdriver: [DELETE] http://localhost:61602/session/b9a656d2-896a-4779-9c7c-5af14f84c0e8\r\n[0-0] 2024-09-01T21:11:57.861Z INFO geckodriver: 1725225117861\tMarionette\tINFO\tStopped listening on port 61605\r\n[0-0] 2024-09-01T21:11:58.307Z INFO webdriver: RESULT null\r\n[0-0] 2024-09-01T21:11:58.307Z INFO webdriver: Kill driver process with PID 7743\r\n2024-09-01T21:11:58.416Z DEBUG @wdio/local-runner: Runner 0-0 finished with exit code 1\r\n[0-0] FAILED in firefox - file:///example.test.js\r\n2024-09-01T21:11:58.416Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\r\n2024-09-01T21:11:58.416Z INFO @wdio/cli:launcher: Run onComplete hook\r\n\r\nSpec Files:\t 0 passed, 1 failed, 1 total (100% completed) in 00:00:13\r\n\r\n2024-09-01T21:11:58.416Z INFO @wdio/local-runner: Shutting down spawned worker\r\n2024-09-01T21:11:58.668Z INFO @wdio/local-runner: Waiting for 0 to shut down gracefully\r\n2024-09-01T21:11:58.669Z INFO @wdio/local-runner: shutting down\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 3378,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "packages/wdio-browser-runner/package.json",
      "packages/wdio-browser-runner/src/index.ts",
      "packages/wdio-browser-runner/src/vite/server.ts",
      "packages/wdio-browser-runner/tests/runner.test.ts",
      "pnpm-lock.yaml"
    ],
    "pr_changed_test_files": [
      "packages/wdio-browser-runner/tests/runner.test.ts"
    ],
    "base_commit": "0c44c6868b23bd40a62f767be64c58dd4825c2e4",
    "head_commit": "c7b15d92c160c46b78214b976806e29034bfe77d",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13489",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13489",
    "dockerfile": "",
    "pr_merged_at": "2024-09-02T10:06:38.000Z",
    "patch": "diff --git a/packages/wdio-browser-runner/package.json b/packages/wdio-browser-runner/package.json\nindex 8528b4e3aa9..411b549f257 100644\n--- a/packages/wdio-browser-runner/package.json\n+++ b/packages/wdio-browser-runner/package.json\n@@ -97,7 +97,8 @@\n     \"@types/istanbul-lib-coverage\": \"^2.0.6\",\n     \"@types/istanbul-lib-report\": \"^3.0.3\",\n     \"@types/istanbul-reports\": \"^3.0.4\",\n-    \"esbuild\": \"^0.21.3\"\n+    \"esbuild\": \"^0.21.3\",\n+    \"geckodriver\": \"^4.4.4\"\n   },\n   \"optionalDependencies\": {\n     \"@nuxt/kit\": \"^3.12.4\",\n\ndiff --git a/packages/wdio-browser-runner/src/index.ts b/packages/wdio-browser-runner/src/index.ts\nindex 5e8efd3b9d8..553a644034d 100644\n--- a/packages/wdio-browser-runner/src/index.ts\n+++ b/packages/wdio-browser-runner/src/index.ts\n@@ -1,3 +1,5 @@\n+/// <reference types=\"geckodriver\" />\n+\n import fs from 'node:fs/promises'\n import url from 'node:url'\n import path from 'node:path'\n@@ -96,9 +98,18 @@ export default class BrowserRunner extends LocalRunner {\n         this.#servers.add(server)\n \n         try {\n-            await server.start()\n+            const port = await server.start()\n             const host = this.#options.host || DEFAULT_HOST\n-            runArgs.args.baseUrl = `${host}:${server.config.server?.port}`\n+            runArgs.args.baseUrl = `${host}:${port}`\n+\n+            /**\n+             * enable Geckodriver to accept Bidi messages from the browser\n+             */\n+            if (runArgs.caps.browserName === 'firefox') {\n+                runArgs.caps['wdio:geckodriverOptions'] = {\n+                    allowOrigins: [`http://localhost:${port}`]\n+                }\n+            }\n         } catch (err: any) {\n             throw new Error(`Vite server failed to start: ${err.stack}`)\n         }\n\ndiff --git a/packages/wdio-browser-runner/src/vite/server.ts b/packages/wdio-browser-runner/src/vite/server.ts\nindex 4aac8f0b8db..9064780c707 100644\n--- a/packages/wdio-browser-runner/src/vite/server.ts\n+++ b/packages/wdio-browser-runner/src/vite/server.ts\n@@ -118,6 +118,8 @@ export class ViteServer extends EventEmitter {\n         this.#server = await createServer(this.#viteConfig)\n         await this.#server.listen()\n         log.info(`Vite server started successfully on port ${vitePort}, root directory: ${this.#viteConfig.root}`)\n+\n+        return vitePort\n     }\n \n     async close () {\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex bc3d7e4498f..7acfcb8a3c4 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -326,7 +326,7 @@ importers:\n         version: 3.4.10\n       vite:\n         specifier: ^5.1.3\n-        version: 5.4.0(@types/node@20.14.15)(terser@5.31.6)\n+        version: 5.4.0(@types/node@22.2.0)(terser@5.31.6)\n       webdriver:\n         specifier: workspace:*\n         version: link:../packages/webdriver\n@@ -421,10 +421,10 @@ importers:\n         version: 10.0.7\n       '@vitejs/plugin-vue':\n         specifier: ^5.0.3\n-        version: 5.1.2(vite@5.4.0(@types/node@20.14.15)(terser@5.31.6))(vue@3.4.37(typescript@5.5.4))\n+        version: 5.1.2(vite@5.4.0(@types/node@22.2.0)(terser@5.31.6))(vue@3.4.37(typescript@5.5.4))\n       expect-webdriverio:\n         specifier: 5.0.0-alpha.2\n-        version: 5.0.0-alpha.2(@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@23.1.1))(@wdio/logger@9.0.4)(webdriverio@9.0.7(puppeteer-core@23.1.1))\n+        version: 5.0.0-alpha.2(@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@22.15.0))(@wdio/logger@9.0.4)(webdriverio@9.0.7(puppeteer-core@22.15.0))\n       mocha:\n         specifier: ^10.2.0\n         version: 10.7.3\n@@ -433,7 +433,7 @@ importers:\n         version: 5.5.4\n       vite:\n         specifier: ^5.0.12\n-        version: 5.4.0(@types/node@20.14.15)(terser@5.31.6)\n+        version: 5.4.0(@types/node@22.2.0)(terser@5.31.6)\n       vue-tsc:\n         specifier: ^2.0.17\n         version: 2.0.29(typescript@5.5.4)\n@@ -604,13 +604,13 @@ importers:\n         version: 0.5.21\n       vite:\n         specifier: ~5.4.0\n-        version: 5.4.0(@types/node@20.14.15)(terser@5.31.6)\n+        version: 5.4.0(@types/node@22.2.0)(terser@5.31.6)\n       vite-plugin-istanbul:\n         specifier: ^6.0.0\n-        version: 6.0.2(vite@5.4.0(@types/node@20.14.15)(terser@5.31.6))\n+        version: 6.0.2(vite@5.4.0(@types/node@22.2.0)(terser@5.31.6))\n       vite-plugin-top-level-await:\n         specifier: ^1.4.1\n-        version: 1.4.4(rollup@4.20.0)(vite@5.4.0(@types/node@20.14.15)(terser@5.31.6))\n+        version: 1.4.4(rollup@4.20.0)(vite@5.4.0(@types/node@22.2.0)(terser@5.31.6))\n       webdriver:\n         specifier: workspace:*\n         version: link:../webdriver\n@@ -640,6 +640,9 @@ importers:\n       esbuild:\n         specifier: ^0.21.3\n         version: 0.21.5\n+      geckodriver:\n+        specifier: ^4.4.4\n+        version: 4.4.4\n \n   packages/wdio-browserstack-service:\n     dependencies:\n@@ -923,7 +926,7 @@ importers:\n     optionalDependencies:\n       expect-webdriverio:\n         specifier: ^5.0.1\n-        version: 5.0.1(@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@23.1.1))(@wdio/logger@9.0.4)(webdriverio@packages+webdriverio)\n+        version: 5.0.1(@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@22.15.0))(@wdio/logger@9.0.4)(webdriverio@packages+webdriverio)\n       webdriverio:\n         specifier: workspace:*\n         version: link:../webdriverio\n@@ -947,7 +950,7 @@ importers:\n         version: link:../wdio-utils\n       expect-webdriverio:\n         specifier: ^5.0.1\n-        version: 5.0.1(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@9.0.7(puppeteer-core@23.1.1))\n+        version: 5.0.1(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@9.0.7(puppeteer-core@22.15.0))\n       jasmine:\n         specifier: ^5.0.0\n         version: 5.2.0\n@@ -2028,31 +2031,31 @@ importers:\n     dependencies:\n       '@docusaurus/core':\n         specifier: ^3.5.2\n-        version: 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+        version: 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/module-type-aliases':\n         specifier: ^3.5.2\n         version: 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n       '@docusaurus/plugin-client-redirects':\n         specifier: ^3.5.2\n-        version: 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+        version: 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/plugin-google-analytics':\n         specifier: ^3.5.2\n-        version: 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+        version: 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/plugin-ideal-image':\n         specifier: ^3.5.2\n-        version: 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(prop-types@15.8.1)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+        version: 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(prop-types@15.8.1)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/plugin-pwa':\n         specifier: ^3.5.2\n-        version: 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/babel__core@7.20.5)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+        version: 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/babel__core@7.20.5)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/preset-classic':\n         specifier: ^3.5.2\n-        version: 3.5.2(@algolia/client-search@4.24.0)(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.16.3)(typescript@5.5.4)\n+        version: 3.5.2(@algolia/client-search@4.24.0)(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.16.3)(typescript@5.5.4)\n       '@docusaurus/remark-plugin-npm2yarn':\n         specifier: ^3.5.2\n         version: 3.5.2\n       '@docusaurus/theme-search-algolia':\n         specifier: ^3.5.2\n-        version: 3.5.2(@algolia/client-search@4.24.0)(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.16.3)(typescript@5.5.4)\n+        version: 3.5.2(@algolia/client-search@4.24.0)(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.16.3)(typescript@5.5.4)\n       '@docusaurus/tsconfig':\n         specifier: ^3.5.2\n         version: 3.5.2\n@@ -2092,7 +2095,7 @@ importers:\n     devDependencies:\n       '@docusaurus/theme-common':\n         specifier: ^3.5.2\n-        version: 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+        version: 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       babel-loader:\n         specifier: ^9.1.3\n         version: 9.1.3(@babel/core@7.25.2)(webpack@5.93.0(@swc/core@1.7.10))\n@@ -8017,8 +8020,8 @@ packages:\n     engines: {node: ^16.13 || >=18 || >=20}\n     hasBin: true\n \n-  geckodriver@4.4.3:\n-    resolution: {integrity: sha512-79rvaq8pvKVUtuM9XBjQApb04kOVkl3TFRX+zTt1wlmL+wqpt85ocWCdqiENU/3zIzg2Me21eClUcnE7F1kL2w==}\n+  geckodriver@4.4.4:\n+    resolution: {integrity: sha512-0zaw19tcmWeluqx7+Y559JGBtidu1D0Lb8ElYKiNEQu8r3sCfrLUf5V10xypl8u29ZLbgRV7WflxCJVTCkCMFA==}\n     engines: {node: ^16.13 || >=18 || >=20}\n     hasBin: true\n \n@@ -15204,10 +15207,10 @@ snapshots:\n       '@cucumber/ci-environment': 10.0.1\n       '@cucumber/cucumber-expressions': 17.1.0\n       '@cucumber/gherkin': 28.0.0\n-      '@cucumber/gherkin-streams': 5.0.1(@cucumber/gherkin@28.0.0)(@cucumber/message-streams@4.0.1(@cucumber/messages@24.1.0))(@cucumber/messages@24.1.0)\n+      '@cucumber/gherkin-streams': 5.0.1(@cucumber/gherkin@28.0.0)(@cucumber/message-streams@4.0.1(@cucumber/messages@25.0.1))(@cucumber/messages@24.1.0)\n       '@cucumber/gherkin-utils': 9.0.0\n       '@cucumber/html-formatter': 21.6.0(@cucumber/messages@24.1.0)\n-      '@cucumber/message-streams': 4.0.1(@cucumber/messages@25.0.1)\n+      '@cucumber/message-streams': 4.0.1(@cucumber/messages@24.1.0)\n       '@cucumber/messages': 24.1.0\n       '@cucumber/tag-expressions': 6.1.0\n       assertion-error-formatter: 3.0.0\n@@ -15244,10 +15247,10 @@ snapshots:\n       yaml: 2.5.0\n       yup: 1.2.0\n \n-  '@cucumber/gherkin-streams@5.0.1(@cucumber/gherkin@28.0.0)(@cucumber/message-streams@4.0.1(@cucumber/messages@24.1.0))(@cucumber/messages@24.1.0)':\n+  '@cucumber/gherkin-streams@5.0.1(@cucumber/gherkin@28.0.0)(@cucumber/message-streams@4.0.1(@cucumber/messages@25.0.1))(@cucumber/messages@24.1.0)':\n     dependencies:\n       '@cucumber/gherkin': 28.0.0\n-      '@cucumber/message-streams': 4.0.1(@cucumber/messages@25.0.1)\n+      '@cucumber/message-streams': 4.0.1(@cucumber/messages@24.1.0)\n       '@cucumber/messages': 24.1.0\n       commander: 9.1.0\n       source-map-support: 0.5.21\n@@ -15268,9 +15271,9 @@ snapshots:\n     dependencies:\n       '@cucumber/messages': 24.1.0\n \n-  '@cucumber/message-streams@4.0.1(@cucumber/messages@25.0.1)':\n+  '@cucumber/message-streams@4.0.1(@cucumber/messages@24.1.0)':\n     dependencies:\n-      '@cucumber/messages': 25.0.1\n+      '@cucumber/messages': 24.1.0\n \n   '@cucumber/messages@24.1.0':\n     dependencies:\n@@ -15306,7 +15309,7 @@ snapshots:\n     transitivePeerDependencies:\n       - '@algolia/client-search'\n \n-  '@docusaurus/core@3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/core@3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n       '@babel/core': 7.25.2\n       '@babel/generator': 7.25.0\n@@ -15358,7 +15361,7 @@ snapshots:\n       postcss-loader: 7.3.4(postcss@8.4.41)(typescript@5.5.4)(webpack@5.93.0(@swc/core@1.7.10))\n       prompts: 2.4.2\n       react: 18.3.1\n-      react-dev-utils: 12.0.1(eslint@9.9.0(jiti@1.21.6))(typescript@5.5.4)(webpack@5.93.0(@swc/core@1.7.10))\n+      react-dev-utils: 12.0.1(eslint@9.9.0)(typescript@5.5.4)(webpack@5.93.0(@swc/core@1.7.10))\n       react-dom: 18.3.1(react@18.3.1)\n       react-helmet-async: 1.3.0(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n       react-loadable: '@docusaurus/react-loadable@6.0.0(react@18.3.1)'\n@@ -15475,9 +15478,9 @@ snapshots:\n       - uglify-js\n       - webpack-cli\n \n-  '@docusaurus/plugin-client-redirects@3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/plugin-client-redirects@3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/logger': 3.5.2\n       '@docusaurus/utils': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n       '@docusaurus/utils-common': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))\n@@ -15508,13 +15511,13 @@ snapshots:\n       - vue-template-compiler\n       - webpack-cli\n \n-  '@docusaurus/plugin-content-blog@3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/plugin-content-blog@3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/logger': 3.5.2\n       '@docusaurus/mdx-loader': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/plugin-content-docs': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/theme-common': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-content-docs': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/theme-common': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/types': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n       '@docusaurus/utils': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n       '@docusaurus/utils-common': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))\n@@ -15550,13 +15553,13 @@ snapshots:\n       - vue-template-compiler\n       - webpack-cli\n \n-  '@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/logger': 3.5.2\n       '@docusaurus/mdx-loader': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/module-type-aliases': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n-      '@docusaurus/theme-common': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/theme-common': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/types': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n       '@docusaurus/utils': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n       '@docusaurus/utils-common': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))\n@@ -15590,9 +15593,9 @@ snapshots:\n       - vue-template-compiler\n       - webpack-cli\n \n-  '@docusaurus/plugin-content-pages@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/plugin-content-pages@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/mdx-loader': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/types': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n       '@docusaurus/utils': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n@@ -15621,9 +15624,9 @@ snapshots:\n       - vue-template-compiler\n       - webpack-cli\n \n-  '@docusaurus/plugin-debug@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/plugin-debug@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/types': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n       '@docusaurus/utils': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n       fs-extra: 11.2.0\n@@ -15650,9 +15653,9 @@ snapshots:\n       - vue-template-compiler\n       - webpack-cli\n \n-  '@docusaurus/plugin-google-analytics@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/plugin-google-analytics@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/types': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n       '@docusaurus/utils-validation': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n       react: 18.3.1\n@@ -15677,9 +15680,9 @@ snapshots:\n       - vue-template-compiler\n       - webpack-cli\n \n-  '@docusaurus/plugin-google-gtag@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/plugin-google-gtag@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/types': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n       '@docusaurus/utils-validation': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n       '@types/gtag.js': 0.0.12\n@@ -15705,9 +15708,9 @@ snapshots:\n       - vue-template-compiler\n       - webpack-cli\n \n-  '@docusaurus/plugin-google-tag-manager@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/plugin-google-tag-manager@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/types': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n       '@docusaurus/utils-validation': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n       react: 18.3.1\n@@ -15732,9 +15735,9 @@ snapshots:\n       - vue-template-compiler\n       - webpack-cli\n \n-  '@docusaurus/plugin-ideal-image@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(prop-types@15.8.1)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/plugin-ideal-image@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(prop-types@15.8.1)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/lqip-loader': 3.5.2(webpack@5.93.0(@swc/core@1.7.10))\n       '@docusaurus/responsive-loader': 1.7.0(sharp@0.32.6)\n       '@docusaurus/theme-translations': 3.5.2\n@@ -15767,13 +15770,13 @@ snapshots:\n       - vue-template-compiler\n       - webpack-cli\n \n-  '@docusaurus/plugin-pwa@3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/babel__core@7.20.5)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/plugin-pwa@3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/babel__core@7.20.5)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n       '@babel/core': 7.25.2\n       '@babel/preset-env': 7.25.3(@babel/core@7.25.2)\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/logger': 3.5.2\n-      '@docusaurus/theme-common': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/theme-common': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/theme-translations': 3.5.2\n       '@docusaurus/types': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n       '@docusaurus/utils': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n@@ -15812,9 +15815,9 @@ snapshots:\n       - vue-template-compiler\n       - webpack-cli\n \n-  '@docusaurus/plugin-sitemap@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/plugin-sitemap@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/logger': 3.5.2\n       '@docusaurus/types': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n       '@docusaurus/utils': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n@@ -15844,20 +15847,20 @@ snapshots:\n       - vue-template-compiler\n       - webpack-cli\n \n-  '@docusaurus/preset-classic@3.5.2(@algolia/client-search@4.24.0)(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.16.3)(typescript@5.5.4)':\n-    dependencies:\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/plugin-content-blog': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/plugin-content-docs': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/plugin-content-pages': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/plugin-debug': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/plugin-google-analytics': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/plugin-google-gtag': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/plugin-google-tag-manager': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/plugin-sitemap': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/theme-classic': 3.5.2(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/theme-common': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/theme-search-algolia': 3.5.2(@algolia/client-search@4.24.0)(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.16.3)(typescript@5.5.4)\n+  '@docusaurus/preset-classic@3.5.2(@algolia/client-search@4.24.0)(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.16.3)(typescript@5.5.4)':\n+    dependencies:\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-content-blog': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-content-docs': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-content-pages': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-debug': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-google-analytics': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-google-gtag': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-google-tag-manager': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-sitemap': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/theme-classic': 3.5.2(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/theme-common': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/theme-search-algolia': 3.5.2(@algolia/client-search@4.24.0)(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.16.3)(typescript@5.5.4)\n       '@docusaurus/types': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n       react: 18.3.1\n       react-dom: 18.3.1(react@18.3.1)\n@@ -15904,15 +15907,15 @@ snapshots:\n     optionalDependencies:\n       sharp: 0.32.6\n \n-  '@docusaurus/theme-classic@3.5.2(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/theme-classic@3.5.2(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/mdx-loader': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/module-type-aliases': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n-      '@docusaurus/plugin-content-blog': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/plugin-content-docs': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/plugin-content-pages': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/theme-common': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-content-blog': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-content-docs': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-content-pages': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/theme-common': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/theme-translations': 3.5.2\n       '@docusaurus/types': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n       '@docusaurus/utils': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n@@ -15952,11 +15955,11 @@ snapshots:\n       - vue-template-compiler\n       - webpack-cli\n \n-  '@docusaurus/theme-common@3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n+  '@docusaurus/theme-common@3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)':\n     dependencies:\n       '@docusaurus/mdx-loader': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/module-type-aliases': 3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)\n-      '@docusaurus/plugin-content-docs': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-content-docs': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/utils': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n       '@docusaurus/utils-common': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))\n       '@types/history': 4.7.11\n@@ -15978,13 +15981,13 @@ snapshots:\n       - uglify-js\n       - webpack-cli\n \n-  '@docusaurus/theme-search-algolia@3.5.2(@algolia/client-search@4.24.0)(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.16.3)(typescript@5.5.4)':\n+  '@docusaurus/theme-search-algolia@3.5.2(@algolia/client-search@4.24.0)(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(@types/react@18.3.3)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.16.3)(typescript@5.5.4)':\n     dependencies:\n       '@docsearch/react': 3.6.1(@algolia/client-search@4.24.0)(@types/react@18.3.3)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(search-insights@2.16.3)\n-      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/core': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/logger': 3.5.2\n-      '@docusaurus/plugin-content-docs': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n-      '@docusaurus/theme-common': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0(jiti@1.21.6))(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/plugin-content-docs': 3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n+      '@docusaurus/theme-common': 3.5.2(@docusaurus/plugin-content-docs@3.5.2(@mdx-js/react@3.0.1(@types/react@18.3.3)(react@18.3.1))(@swc/core@1.7.10)(eslint@9.9.0)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4))(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1)(typescript@5.5.4)\n       '@docusaurus/theme-translations': 3.5.2\n       '@docusaurus/utils': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n       '@docusaurus/utils-validation': 3.5.2(@docusaurus/types@3.5.2(@swc/core@1.7.10)(react-dom@18.3.1(react@18.3.1))(react@18.3.1))(@swc/core@1.7.10)(typescript@5.5.4)\n@@ -16277,6 +16280,12 @@ snapshots:\n       eslint: 9.9.0(jiti@1.21.6)\n       eslint-visitor-keys: 3.4.3\n \n+  '@eslint-community/eslint-utils@4.4.0(eslint@9.9.0)':\n+    dependencies:\n+      eslint: 9.9.0\n+      eslint-visitor-keys: 3.4.3\n+    optional: true\n+\n   '@eslint-community/regexpp@4.11.0': {}\n \n   '@eslint/config-array@0.17.1':\n@@ -18534,9 +18543,9 @@ snapshots:\n     transitivePeerDependencies:\n       - supports-color\n \n-  '@vitejs/plugin-vue@5.1.2(vite@5.4.0(@types/node@20.14.15)(terser@5.31.6))(vue@3.4.37(typescript@5.5.4))':\n+  '@vitejs/plugin-vue@5.1.2(vite@5.4.0(@types/node@22.2.0)(terser@5.31.6))(vue@3.4.37(typescript@5.5.4))':\n     dependencies:\n-      vite: 5.4.0(@types/node@20.14.15)(terser@5.31.6)\n+      vite: 5.4.0(@types/node@22.2.0)(terser@5.31.6)\n       vue: 3.4.37(typescript@5.5.4)\n \n   '@vitejs/plugin-vue@5.1.2(vite@5.4.1(@types/node@20.14.15)(terser@5.31.6))(vue@3.4.38(typescript@5.5.4))':\n@@ -18812,10 +18821,10 @@ snapshots:\n       - supports-color\n       - utf-8-validate\n \n-  '@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@23.1.1)':\n+  '@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@22.15.0)':\n     optionalDependencies:\n-      expect-webdriverio: 5.0.1(@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@23.1.1))(@wdio/logger@9.0.4)(webdriverio@9.0.7(puppeteer-core@23.1.1))\n-      webdriverio: 9.0.7(puppeteer-core@23.1.1)\n+      expect-webdriverio: 5.0.1(@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@22.15.0))(@wdio/logger@9.0.4)(webdriverio@9.0.7(puppeteer-core@22.15.0))\n+      webdriverio: 9.0.7(puppeteer-core@22.15.0)\n     transitivePeerDependencies:\n       - '@wdio/logger'\n       - bufferutil\n@@ -18865,7 +18874,7 @@ snapshots:\n       decamelize: 6.0.0\n       deepmerge-ts: 5.1.0\n       edgedriver: 5.6.1\n-      geckodriver: 4.4.2\n+      geckodriver: 4.4.4\n       get-port: 7.1.0\n       import-meta-resolve: 4.1.0\n       locate-app: 2.4.26\n@@ -18883,7 +18892,7 @@ snapshots:\n       decamelize: 6.0.0\n       deepmerge-ts: 7.1.0\n       edgedriver: 5.6.1\n-      geckodriver: 4.4.3\n+      geckodriver: 4.4.4\n       get-port: 7.1.0\n       import-meta-resolve: 4.1.0\n       locate-app: 2.4.31\n@@ -21292,6 +21301,46 @@ snapshots:\n     transitivePeerDependencies:\n       - supports-color\n \n+  eslint@9.9.0:\n+    dependencies:\n+      '@eslint-community/eslint-utils': 4.4.0(eslint@9.9.0)\n+      '@eslint-community/regexpp': 4.11.0\n+      '@eslint/config-array': 0.17.1\n+      '@eslint/eslintrc': 3.1.0\n+      '@eslint/js': 9.9.0\n+      '@humanwhocodes/module-importer': 1.0.1\n+      '@humanwhocodes/retry': 0.3.0\n+      '@nodelib/fs.walk': 1.2.8\n+      ajv: 6.12.6\n+      chalk: 4.1.2\n+      cross-spawn: 7.0.3\n+      debug: 4.3.6(supports-color@8.1.1)\n+      escape-string-regexp: 4.0.0\n+      eslint-scope: 8.0.2\n+      eslint-visitor-keys: 4.0.0\n+      espree: 10.1.0\n+      esquery: 1.6.0\n+      esutils: 2.0.3\n+      fast-deep-equal: 3.1.3\n+      file-entry-cache: 8.0.0\n+      find-up: 5.0.0\n+      glob-parent: 6.0.2\n+      ignore: 5.3.2\n+      imurmurhash: 0.1.4\n+      is-glob: 4.0.3\n+      is-path-inside: 3.0.3\n+      json-stable-stringify-without-jsonify: 1.0.1\n+      levn: 0.4.1\n+      lodash.merge: 4.6.2\n+      minimatch: 3.1.2\n+      natural-compare: 1.4.0\n+      optionator: 0.9.4\n+      strip-ansi: 6.0.1\n+      text-table: 0.2.0\n+    transitivePeerDependencies:\n+      - supports-color\n+    optional: true\n+\n   eslint@9.9.0(jiti@1.21.6):\n     dependencies:\n       '@eslint-community/eslint-utils': 4.4.0(eslint@9.9.0(jiti@1.21.6))\n@@ -21499,31 +21548,31 @@ snapshots:\n       - utf-8-validate\n     optional: true\n \n-  expect-webdriverio@5.0.0-alpha.2(@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@23.1.1))(@wdio/logger@9.0.4)(webdriverio@9.0.7(puppeteer-core@23.1.1)):\n+  expect-webdriverio@5.0.0-alpha.2(@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@22.15.0))(@wdio/logger@9.0.4)(webdriverio@9.0.7(puppeteer-core@22.15.0)):\n     dependencies:\n       '@vitest/snapshot': 1.6.0\n-      '@wdio/globals': 9.0.7(@wdio/logger@9.0.4)(puppeteer-core@23.1.1)\n+      '@wdio/globals': 9.0.7(@wdio/logger@9.0.4)(puppeteer-core@22.15.0)\n       '@wdio/logger': 9.0.4\n       expect: 29.7.0\n       jest-matcher-utils: 29.7.0\n       lodash.isequal: 4.5.0\n-      webdriverio: 9.0.7(puppeteer-core@23.1.1)\n+      webdriverio: 9.0.7(puppeteer-core@22.15.0)\n \n-  expect-webdriverio@5.0.1(@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@23.1.1))(@wdio/logger@9.0.4)(webdriverio@9.0.7(puppeteer-core@23.1.1)):\n+  expect-webdriverio@5.0.1(@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@22.15.0))(@wdio/logger@9.0.4)(webdriverio@9.0.7(puppeteer-core@22.15.0)):\n     dependencies:\n       '@vitest/snapshot': 2.0.5\n-      '@wdio/globals': 9.0.7(@wdio/logger@9.0.4)(puppeteer-core@23.1.1)\n+      '@wdio/globals': 9.0.7(@wdio/logger@9.0.4)(puppeteer-core@22.15.0)\n       '@wdio/logger': 9.0.4\n       expect: 29.7.0\n       jest-matcher-utils: 29.7.0\n       lodash.isequal: 4.5.0\n-      webdriverio: 9.0.7(puppeteer-core@23.1.1)\n+      webdriverio: 9.0.7(puppeteer-core@22.15.0)\n     optional: true\n \n-  expect-webdriverio@5.0.1(@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@23.1.1))(@wdio/logger@9.0.4)(webdriverio@packages+webdriverio):\n+  expect-webdriverio@5.0.1(@wdio/globals@9.0.7(@wdio/logger@9.0.4)(puppeteer-core@22.15.0))(@wdio/logger@9.0.4)(webdriverio@packages+webdriverio):\n     dependencies:\n       '@vitest/snapshot': 2.0.5\n-      '@wdio/globals': 9.0.7(@wdio/logger@9.0.4)(puppeteer-core@23.1.1)\n+      '@wdio/globals': 9.0.7(@wdio/logger@9.0.4)(puppeteer-core@22.15.0)\n       '@wdio/logger': 9.0.4\n       expect: 29.7.0\n       jest-matcher-utils: 29.7.0\n@@ -21541,7 +21590,7 @@ snapshots:\n       lodash.isequal: 4.5.0\n       webdriverio: link:packages/webdriverio\n \n-  expect-webdriverio@5.0.1(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@9.0.7(puppeteer-core@23.1.1)):\n+  expect-webdriverio@5.0.1(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@9.0.7(puppeteer-core@22.15.0)):\n     dependencies:\n       '@vitest/snapshot': 2.0.5\n       '@wdio/globals': link:packages/wdio-globals\n@@ -21549,7 +21598,7 @@ snapshots:\n       expect: 29.7.0\n       jest-matcher-utils: 29.7.0\n       lodash.isequal: 4.5.0\n-      webdriverio: 9.0.7(puppeteer-core@23.1.1)\n+      webdriverio: 9.0.7(puppeteer-core@22.15.0)\n \n   expect-webdriverio@5.0.1(@wdio/globals@packages+wdio-globals)(@wdio/logger@packages+wdio-logger)(webdriverio@packages+webdriverio):\n     dependencies:\n@@ -21820,7 +21869,7 @@ snapshots:\n       cross-spawn: 7.0.3\n       signal-exit: 4.1.0\n \n-  fork-ts-checker-webpack-plugin@6.5.3(eslint@9.9.0(jiti@1.21.6))(typescript@5.5.4)(webpack@5.93.0(@swc/core@1.7.10)):\n+  fork-ts-checker-webpack-plugin@6.5.3(eslint@9.9.0)(typescript@5.5.4)(webpack@5.93.0(@swc/core@1.7.10)):\n     dependencies:\n       '@babel/code-frame': 7.24.7\n       '@types/json-schema': 7.0.15\n@@ -21838,7 +21887,7 @@ snapshots:\n       typescript: 5.5.4\n       webpack: 5.93.0(@swc/core@1.7.10)\n     optionalDependencies:\n-      eslint: 9.9.0(jiti@1.21.6)\n+      eslint: 9.9.0\n \n   form-data-encoder@2.1.4: {}\n \n@@ -21935,7 +21984,7 @@ snapshots:\n     transitivePeerDependencies:\n       - supports-color\n \n-  geckodriver@4.4.3:\n+  geckodriver@4.4.4:\n     dependencies:\n       '@wdio/logger': 9.0.4\n       '@zip.js/zip.js': 2.7.48\n@@ -25858,7 +25907,7 @@ snapshots:\n       minimist: 1.2.8\n       strip-json-comments: 2.0.1\n \n-  react-dev-utils@12.0.1(eslint@9.9.0(jiti@1.21.6))(typescript@5.5.4)(webpack@5.93.0(@swc/core@1.7.10)):\n+  react-dev-utils@12.0.1(eslint@9.9.0)(typescript@5.5.4)(webpack@5.93.0(@swc/core@1.7.10)):\n     dependencies:\n       '@babel/code-frame': 7.24.7\n       address: 1.2.2\n@@ -25869,7 +25918,7 @@ snapshots:\n       escape-string-regexp: 4.0.0\n       filesize: 8.0.7\n       find-up: 5.0.0\n-      fork-ts-checker-webpack-plugin: 6.5.3(eslint@9.9.0(jiti@1.21.6))(typescript@5.5.4)(webpack@5.93.0(@swc/core@1.7.10))\n+      fork-ts-checker-webpack-plugin: 6.5.3(eslint@9.9.0)(typescript@5.5.4)(webpack@5.93.0(@swc/core@1.7.10))\n       global-modules: 2.0.0\n       globby: 11.1.0\n       gzip-size: 6.0.0\n@@ -27770,7 +27819,7 @@ snapshots:\n       - supports-color\n       - terser\n \n-  vite-plugin-istanbul@6.0.2(vite@5.4.0(@types/node@20.14.15)(terser@5.31.6)):\n+  vite-plugin-istanbul@6.0.2(vite@5.4.0(@types/node@22.2.0)(terser@5.31.6)):\n     dependencies:\n       '@istanbuljs/load-nyc-config': 1.1.0\n       espree: 10.1.0\n@@ -27778,27 +27827,27 @@ snapshots:\n       picocolors: 1.0.1\n       source-map: 0.7.4\n       test-exclude: 6.0.0\n-      vite: 5.4.0(@types/node@20.14.15)(terser@5.31.6)\n+      vite: 5.4.0(@types/node@22.2.0)(terser@5.31.6)\n     transitivePeerDependencies:\n       - supports-color\n \n-  vite-plugin-top-level-await@1.4.4(rollup@4.20.0)(vite@5.4.0(@types/node@20.14.15)(terser@5.31.6)):\n+  vite-plugin-top-level-await@1.4.4(rollup@4.20.0)(vite@5.4.0(@types/node@22.2.0)(terser@5.31.6)):\n     dependencies:\n       '@rollup/plugin-virtual': 3.0.2(rollup@4.20.0)\n       '@swc/core': 1.7.10\n       uuid: 10.0.0\n-      vite: 5.4.0(@types/node@20.14.15)(terser@5.31.6)\n+      vite: 5.4.0(@types/node@22.2.0)(terser@5.31.6)\n     transitivePeerDependencies:\n       - '@swc/helpers'\n       - rollup\n \n-  vite@5.4.0(@types/node@20.14.15)(terser@5.31.6):\n+  vite@5.4.0(@types/node@22.2.0)(terser@5.31.6):\n     dependencies:\n       esbuild: 0.21.5\n       postcss: 8.4.41\n       rollup: 4.20.0\n     optionalDependencies:\n-      '@types/node': 20.14.15\n+      '@types/node': 22.2.0\n       fsevents: 2.3.3\n       terser: 5.31.6\n \n@@ -27983,7 +28032,7 @@ snapshots:\n       - supports-color\n       - utf-8-validate\n \n-  webdriverio@9.0.7(puppeteer-core@23.1.1):\n+  webdriverio@9.0.7(puppeteer-core@22.15.0):\n     dependencies:\n       '@types/node': 20.14.15\n       '@types/sinonjs__fake-timers': 8.1.5\n@@ -28013,7 +28062,7 @@ snapshots:\n       urlpattern-polyfill: 10.0.0\n       webdriver: 9.0.7\n     optionalDependencies:\n-      puppeteer-core: 23.1.1\n+      puppeteer-core: 22.15.0\n     transitivePeerDependencies:\n       - bufferutil\n       - supports-color\n",
    "test_patch": "diff --git a/packages/wdio-browser-runner/tests/runner.test.ts b/packages/wdio-browser-runner/tests/runner.test.ts\nindex ff96dbd118d..998ffc98448 100644\n--- a/packages/wdio-browser-runner/tests/runner.test.ts\n+++ b/packages/wdio-browser-runner/tests/runner.test.ts\n@@ -20,7 +20,7 @@ vi.mock('../src/communicator.js', () => ({\n }))\n vi.mock('../src/vite/server.js', () => ({\n     ViteServer: class {\n-        start = vi.fn()\n+        start = vi.fn().mockResolvedValue(1234)\n         close = vi.fn()\n         onBrowserEvent = vi.fn()\n         config = { server: { port: 1234 } }\n@@ -93,7 +93,21 @@ describe('BrowserRunner', () => {\n             command: 'run'\n         })\n         expect(runner['_servers'].size).toBe(1)\n-        expect(runner['_servers'].values().next().value.start).toHaveBeenCalledTimes(1)\n+        expect(runner['_servers'].values().next().value!.start).toHaveBeenCalledTimes(1)\n+    })\n+\n+    it('modifies runArgs to set allowOrigins', async () => {\n+        const runner = new BrowserRunner({}, {\n+            rootDir: '/foo/bar',\n+            framework: 'mocha'\n+        } as any)\n+        await runner.initialize()\n+\n+        const on = vi.fn()\n+        vi.mocked(LocalRunner.prototype.run).mockReturnValue({ on } as any)\n+        const runArgs = { caps: { browserName: 'firefox' }, command: 'run', args: {} } as any\n+        await runner.run(runArgs)\n+        expect(runArgs.caps['wdio:geckodriverOptions'].allowOrigins).toEqual(['http://localhost:1234'])\n     })\n \n     it('shutdown', async () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13482",
    "pr_id": 13482,
    "issue_id": 13480,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: V9: cannot run tests using node.js v18.16.0\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.0.7\n\n### Node.js Version\n\n18.16.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n_No response_\n\n### What happened?\n\nUpgraded to V9. Attempted to run the tests and was presented with an error. `SyntaxError: The requested module 'node:events' does not provide an export named 'addAbortListener'`\n\n### What is your expected behavior?\n\nSince nodejs v18 is supported I would have expected it to work. Doing a little digging I found [events.addAbortListener(signal, listener)](https://nodejs.org/api/events.html#eventsaddabortlistenersignal-listener) was added as an experimental feature in `Added in: v20.5.0, v18.18.0`. Node 18 versions under `v18.18.0` won't currently work.\n\n### How to reproduce the bug.\n\nI can reproduce the issue with the jasmine boilerplate project. https://github.com/webdriverio/jasmine-boilerplate\r\n`npm i` then `npm run test:local`. Make sure you have nodejs v18.16.0 installed.\n\n### Relevant log output\n\n```typescript\n> jasmine-boilerplate@1.0.0 test:local\r\n> wdio run wdio.local.conf.ts\r\n\r\nfile:///C:/Users/mjohnston/Downloads/jasmine-boilerplate-main/node_modules/execa/lib/utils/max-listeners.js:1\r\nimport {addAbortListener} from 'node:events';\r\n        ^^^^^^^^^^^^^^^^\r\nSyntaxError: The requested module 'node:events' does not provide an export named 'addAbortListener'\r\n    at ModuleJob._instantiate (node:internal/modules/esm/module_job:124:21)\r\n    at async ModuleJob.run (node:internal/modules/esm/module_job:190:5)\r\n\r\nNode.js v18.16.0\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 293,
    "test_files_count": 5,
    "non_test_files_count": 32,
    "pr_changed_files": [
      ".github/workflows/test-smoke.yml",
      "packages/eslint-plugin-wdio/package.json",
      "packages/wdio-allure-reporter/package.json",
      "packages/wdio-appium-service/package.json",
      "packages/wdio-browser-runner/package.json",
      "packages/wdio-browserstack-service/package.json",
      "packages/wdio-cli/package.json",
      "packages/wdio-concise-reporter/package.json",
      "packages/wdio-config/package.json",
      "packages/wdio-cucumber-framework/package.json",
      "packages/wdio-dot-reporter/package.json",
      "packages/wdio-firefox-profile-service/package.json",
      "packages/wdio-globals/package.json",
      "packages/wdio-jasmine-framework/package.json",
      "packages/wdio-junit-reporter/package.json",
      "packages/wdio-lighthouse-service/package.json",
      "packages/wdio-local-runner/package.json",
      "packages/wdio-logger/package.json",
      "packages/wdio-mocha-framework/package.json",
      "packages/wdio-repl/package.json",
      "packages/wdio-reporter/package.json",
      "packages/wdio-runner/package.json",
      "packages/wdio-sauce-service/package.json",
      "packages/wdio-shared-store-service/package.json",
      "packages/wdio-smoke-test-cjs-service/package.json",
      "packages/wdio-smoke-test-reporter/package.json",
      "packages/wdio-smoke-test-service/package.json",
      "packages/wdio-spec-reporter/package.json",
      "packages/wdio-static-server-service/package.json",
      "packages/wdio-sumologic-reporter/package.json",
      "packages/wdio-testingbot-service/package.json",
      "packages/wdio-types/package.json",
      "packages/wdio-utils/package.json",
      "packages/wdio-webdriver-mock-service/package.json",
      "packages/webdriver/package.json",
      "packages/webdriverio/package.json",
      "website/docs/GettingStarted.md"
    ],
    "pr_changed_test_files": [
      ".github/workflows/test-smoke.yml",
      "packages/wdio-smoke-test-cjs-service/package.json",
      "packages/wdio-smoke-test-reporter/package.json",
      "packages/wdio-smoke-test-service/package.json",
      "packages/wdio-testingbot-service/package.json"
    ],
    "base_commit": "7f07bdea660646460e092b113b8901b17680160f",
    "head_commit": "74e9f72f18a15c1ec3cfee90df066b5dcce3d6a6",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13482",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13482",
    "dockerfile": "",
    "pr_merged_at": "2024-09-05T09:20:36.000Z",
    "patch": "diff --git a/packages/eslint-plugin-wdio/package.json b/packages/eslint-plugin-wdio/package.json\nindex dd9fda9505b..3d8f3a57799 100644\n--- a/packages/eslint-plugin-wdio/package.json\n+++ b/packages/eslint-plugin-wdio/package.json\n@@ -18,7 +18,7 @@\n   \"type\": \"module\",\n   \"typeScriptVersion\": \"3.8.3\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-allure-reporter/package.json b/packages/wdio-allure-reporter/package.json\nindex 588f87fd745..4ecf6d9cde1 100644\n--- a/packages/wdio-allure-reporter/package.json\n+++ b/packages/wdio-allure-reporter/package.json\n@@ -33,7 +33,7 @@\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"dependencies\": {\n     \"@types/node\": \"^20.1.0\",\n\ndiff --git a/packages/wdio-appium-service/package.json b/packages/wdio-appium-service/package.json\nindex ce3f88e2a94..10bc8471d90 100644\n--- a/packages/wdio-appium-service/package.json\n+++ b/packages/wdio-appium-service/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-appium-service\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-browser-runner/package.json b/packages/wdio-browser-runner/package.json\nindex 411b549f257..9dfcf91ea3f 100644\n--- a/packages/wdio-browser-runner/package.json\n+++ b/packages/wdio-browser-runner/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-browser-runner\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-browserstack-service/package.json b/packages/wdio-browserstack-service/package.json\nindex aae07fe6dc4..3fc0f1c9647 100644\n--- a/packages/wdio-browserstack-service/package.json\n+++ b/packages/wdio-browserstack-service/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-browserstack-service\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-cli/package.json b/packages/wdio-cli/package.json\nindex 3ec15e4076d..958327b00d3 100644\n--- a/packages/wdio-cli/package.json\n+++ b/packages/wdio-cli/package.json\n@@ -9,7 +9,7 @@\n     \"wdio\": \"./bin/wdio.js\"\n   },\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-concise-reporter/package.json b/packages/wdio-concise-reporter/package.json\nindex 728ef018939..4dd3c2eb0c8 100644\n--- a/packages/wdio-concise-reporter/package.json\n+++ b/packages/wdio-concise-reporter/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-concise-reporter\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-config/package.json b/packages/wdio-config/package.json\nindex 7d597d789b6..fb68abb025d 100644\n--- a/packages/wdio-config/package.json\n+++ b/packages/wdio-config/package.json\n@@ -20,7 +20,7 @@\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-cucumber-framework/package.json b/packages/wdio-cucumber-framework/package.json\nindex e791cfcf3ef..7ebb287d9d2 100644\n--- a/packages/wdio-cucumber-framework/package.json\n+++ b/packages/wdio-cucumber-framework/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-cucumber-framework\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-dot-reporter/package.json b/packages/wdio-dot-reporter/package.json\nindex 1d88bc55b17..3d67b910791 100644\n--- a/packages/wdio-dot-reporter/package.json\n+++ b/packages/wdio-dot-reporter/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-dot-reporter\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-firefox-profile-service/package.json b/packages/wdio-firefox-profile-service/package.json\nindex cc5e621da94..697f99617ee 100644\n--- a/packages/wdio-firefox-profile-service/package.json\n+++ b/packages/wdio-firefox-profile-service/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-firefox-profile-service\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-globals/package.json b/packages/wdio-globals/package.json\nindex abf0579c530..7926fdb1d78 100644\n--- a/packages/wdio-globals/package.json\n+++ b/packages/wdio-globals/package.json\n@@ -21,7 +21,7 @@\n   \"types\": \"./build/index.d.ts\",\n   \"typeScriptVersion\": \"3.8.3\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-jasmine-framework/package.json b/packages/wdio-jasmine-framework/package.json\nindex 2bd1e8604f0..e1710f1f1d7 100644\n--- a/packages/wdio-jasmine-framework/package.json\n+++ b/packages/wdio-jasmine-framework/package.json\n@@ -15,7 +15,7 @@\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-junit-reporter/package.json b/packages/wdio-junit-reporter/package.json\nindex b41bcc09179..55f2617ef5b 100644\n--- a/packages/wdio-junit-reporter/package.json\n+++ b/packages/wdio-junit-reporter/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-junit-reporter\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-lighthouse-service/package.json b/packages/wdio-lighthouse-service/package.json\nindex 84038fdf29d..cad5431feca 100644\n--- a/packages/wdio-lighthouse-service/package.json\n+++ b/packages/wdio-lighthouse-service/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-lighthouse-service\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-local-runner/package.json b/packages/wdio-local-runner/package.json\nindex e2c6810d032..625295efba3 100644\n--- a/packages/wdio-local-runner/package.json\n+++ b/packages/wdio-local-runner/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-local-runner\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-logger/package.json b/packages/wdio-logger/package.json\nindex 2927f79a6f3..db92d7f33c7 100644\n--- a/packages/wdio-logger/package.json\n+++ b/packages/wdio-logger/package.json\n@@ -13,6 +13,7 @@\n     \".\": {\n       \"browser\": \"./build/browser.js\",\n       \"import\": \"./build/index.js\",\n+      \"require\": \"./build/index.cjs\",\n       \"types\": \"./build/index.d.ts\",\n       \"browserSource\": \"./src/browser.ts\"\n     },\n@@ -20,7 +21,7 @@\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-mocha-framework/package.json b/packages/wdio-mocha-framework/package.json\nindex 52a71327889..580781fd4dd 100644\n--- a/packages/wdio-mocha-framework/package.json\n+++ b/packages/wdio-mocha-framework/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-mocha-framework\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-repl/package.json b/packages/wdio-repl/package.json\nindex 723880a2f29..378d7bcc72f 100644\n--- a/packages/wdio-repl/package.json\n+++ b/packages/wdio-repl/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-repl\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-reporter/package.json b/packages/wdio-reporter/package.json\nindex 74ed481eca7..2b987b8f733 100644\n--- a/packages/wdio-reporter/package.json\n+++ b/packages/wdio-reporter/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-reporter\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-runner/package.json b/packages/wdio-runner/package.json\nindex 6dacf1275a2..60d404af9ff 100644\n--- a/packages/wdio-runner/package.json\n+++ b/packages/wdio-runner/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-runner\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-sauce-service/package.json b/packages/wdio-sauce-service/package.json\nindex 71054b16422..c2ced7e05d7 100644\n--- a/packages/wdio-sauce-service/package.json\n+++ b/packages/wdio-sauce-service/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-sauce-service\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-shared-store-service/package.json b/packages/wdio-shared-store-service/package.json\nindex 35f91d90748..19d5dbf4797 100644\n--- a/packages/wdio-shared-store-service/package.json\n+++ b/packages/wdio-shared-store-service/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-shared-store-service\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-spec-reporter/package.json b/packages/wdio-spec-reporter/package.json\nindex 396cc382972..208a36af99d 100644\n--- a/packages/wdio-spec-reporter/package.json\n+++ b/packages/wdio-spec-reporter/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-spec-reporter\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-static-server-service/package.json b/packages/wdio-static-server-service/package.json\nindex 361c27adf09..f293e559520 100644\n--- a/packages/wdio-static-server-service/package.json\n+++ b/packages/wdio-static-server-service/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-static-server-service\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-sumologic-reporter/package.json b/packages/wdio-sumologic-reporter/package.json\nindex 853a52ea2a4..fddde23c389 100644\n--- a/packages/wdio-sumologic-reporter/package.json\n+++ b/packages/wdio-sumologic-reporter/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-sumologic-reporter\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-types/package.json b/packages/wdio-types/package.json\nindex 335123b24e1..11a59808cb0 100644\n--- a/packages/wdio-types/package.json\n+++ b/packages/wdio-types/package.json\n@@ -14,7 +14,7 @@\n     }\n   },\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-utils/package.json b/packages/wdio-utils/package.json\nindex 9e4ee28fe25..910d92b36ae 100644\n--- a/packages/wdio-utils/package.json\n+++ b/packages/wdio-utils/package.json\n@@ -19,7 +19,7 @@\n   \"types\": \"./build/index.d.ts\",\n   \"typeScriptVersion\": \"3.8.3\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-webdriver-mock-service/package.json b/packages/wdio-webdriver-mock-service/package.json\nindex 2e8b83bb47d..fc26550a459 100644\n--- a/packages/wdio-webdriver-mock-service/package.json\n+++ b/packages/wdio-webdriver-mock-service/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-webdriver-mock-service\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/webdriver/package.json b/packages/webdriver/package.json\nindex 7849e8fbb22..90b61ecbe50 100644\n--- a/packages/webdriver/package.json\n+++ b/packages/webdriver/package.json\n@@ -19,7 +19,7 @@\n   \"types\": \"./build/index.d.ts\",\n   \"typeScriptVersion\": \"3.8.3\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/webdriverio/package.json b/packages/webdriverio/package.json\nindex 3a397f9d796..4e7bb68d74a 100644\n--- a/packages/webdriverio/package.json\n+++ b/packages/webdriverio/package.json\n@@ -14,7 +14,7 @@\n     \"url\": \"https://github.com/webdriverio/webdriverio/issues\"\n   },\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"tags\": [\n     \"webdriver\",\n\ndiff --git a/website/docs/GettingStarted.md b/website/docs/GettingStarted.md\nindex 9f8219823e1..64bda719dd3 100644\n--- a/website/docs/GettingStarted.md\n+++ b/website/docs/GettingStarted.md\n@@ -184,7 +184,7 @@ WebdriverIO provides tools to help you get started by recording your test action\n \n You’ll need [Node.js](http://nodejs.org) installed.\n \n-- Install at least v16.x or higher as this is the oldest active LTS version\n+- Install at least v18.20.0 or higher as this is the oldest active LTS version\n - Only releases that are or will become an LTS release are officially supported\n \n If Node is not currently installed on your system, we suggest utilizing a tool such as [NVM](https://github.com/creationix/nvm) or [Volta](https://volta.sh/) to assist in managing multiple active Node.js versions. NVM is a popular choice, while Volta is also a good alternative.\n",
    "test_patch": "diff --git a/.github/workflows/test-smoke.yml b/.github/workflows/test-smoke.yml\nindex 0906d421860..b3cca5d07ed 100644\n--- a/.github/workflows/test-smoke.yml\n+++ b/.github/workflows/test-smoke.yml\n@@ -11,7 +11,7 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        node: ['18', '20', '22']\n+        node: ['18.20.0', '20', '22']\n         os: ['ubuntu-latest', 'windows-latest', 'macos-latest']\n     runs-on: ${{ matrix.os }}\n     steps:\n\ndiff --git a/packages/wdio-smoke-test-cjs-service/package.json b/packages/wdio-smoke-test-cjs-service/package.json\nindex b167a44c2f6..c6d0a8cc9f0 100644\n--- a/packages/wdio-smoke-test-cjs-service/package.json\n+++ b/packages/wdio-smoke-test-cjs-service/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-smoke-test-service\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-smoke-test-reporter/package.json b/packages/wdio-smoke-test-reporter/package.json\nindex ea2b7410856..d4751510ead 100644\n--- a/packages/wdio-smoke-test-reporter/package.json\n+++ b/packages/wdio-smoke-test-reporter/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-smoke-test-reporter\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-smoke-test-service/package.json b/packages/wdio-smoke-test-service/package.json\nindex 3ffe8acece3..6b81101888f 100644\n--- a/packages/wdio-smoke-test-service/package.json\n+++ b/packages/wdio-smoke-test-service/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-smoke-test-service\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n\ndiff --git a/packages/wdio-testingbot-service/package.json b/packages/wdio-testingbot-service/package.json\nindex 57ec6e3249a..ed3404a602a 100644\n--- a/packages/wdio-testingbot-service/package.json\n+++ b/packages/wdio-testingbot-service/package.json\n@@ -6,7 +6,7 @@\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-testingbot-service\",\n   \"license\": \"MIT\",\n   \"engines\": {\n-    \"node\": \">=18\"\n+    \"node\": \">=18.20.0\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13435",
    "pr_id": 13435,
    "issue_id": 13433,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: Only Android does not show appName in wdio-spec-reporter\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\nlatest\n\n### Node.js Version\n\nlatest\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n**android**\r\n\r\n{\r\n  platformName: \"Android\",\r\n  \"appium:automationName\": \"uiautomator2\",\r\n  \"appium:appPackage\": \"com.example.android\",\r\n  \"appium:appActivity\": \".MainActivity\"\r\n}\r\n\r\n----\r\n\r\n**iOS**\r\n\r\n{\r\n  platformName: \"iOS\",\r\n  \"appium:automationName\": \"xcuitest\",\r\n  \"appium:bundleId\": \"com.example.ios\",\r\n  \"appium:udid\": \"dummy\",\r\n  \"appium:xcodeOrgId\": \"dummy\",\r\n  \"appium:xcodeSigningId\": \"dummy\"\r\n}\n```\n\n\n### What happened?\n\nOn iOS, the configured `bundleId` is displayed, but on android, `undefined` is displayed even though `appPackage` is configured.\r\n\r\niOS outputs:\r\n\r\n```\r\n...\r\n[com.example.ios iOS #1-0]\r\n[com.example.ios iOS #1-0]\r\n..\r\n```\r\n\r\nandroid outputs:\r\n\r\n```\r\n...\r\n[undefined Android #1-0]\r\n[undefined Android #1-0]\r\n...\r\n```\n\n### What is your expected behavior?\n\nThe cause is probably that only iOS is being handled here.\r\n\r\nhttps://github.com/webdriverio/webdriverio/blob/9e5beb548b6862b7353b834f8e7294804d10204d/packages/wdio-spec-reporter/src/index.ts#L603C15-L603C22\r\n\r\n```ts\r\nconst appName = app || caps['appium:bundleId'] || (caps as any).bundleId\r\n```\r\n\r\nThe following change made it possible to display the values correctly on my environment as well as on iOS.\r\n\r\n```ts\r\nconst appName = app || caps['appium:bundleId'] || (caps as any).bundleId || caps['appium:appPackage'] || (caps as any).appPackage\r\n```\n\n### How to reproduce the bug.\n\nskip (I will try to prepare it if necessary.)\n\n### Relevant log output\n\n```typescript\niOS outputs:\r\n\r\n\r\n...\r\n[com.example.ios iOS #1-0]\r\n[com.example.ios iOS #1-0]\r\n..\r\n```\r\n\r\nandroid outputs:\r\n\r\n```\r\n...\r\n[undefined Android #1-0]\r\n[undefined Android #1-0]\r\n...\r\n```\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 284,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-spec-reporter/src/index.ts",
      "packages/wdio-spec-reporter/tests/index.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-spec-reporter/tests/index.test.ts"
    ],
    "base_commit": "9e5beb548b6862b7353b834f8e7294804d10204d",
    "head_commit": "17b13c0b0c3c69102f3797a6ed07ada6f33d2d00",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13435",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13435",
    "dockerfile": "",
    "pr_merged_at": "2024-08-21T16:18:16.000Z",
    "patch": "diff --git a/packages/wdio-spec-reporter/src/index.ts b/packages/wdio-spec-reporter/src/index.ts\nindex 8d324bb64f1..3e1983d7c60 100644\n--- a/packages/wdio-spec-reporter/src/index.ts\n+++ b/packages/wdio-spec-reporter/src/index.ts\n@@ -600,7 +600,7 @@ export default class SpecReporter extends WDIOReporter {\n         const device = caps['appium:deviceName']\n         // @ts-expect-error outdated JSONWP capabilities\n         const app = ((caps['appium:app'] || caps.app) || '').replace('sauce-storage:', '')\n-        const appName = app || caps['appium:bundleId'] || (caps as any).bundleId\n+        const appName = app || caps['appium:bundleId'] || caps['appium:appPackage']\n         // @ts-expect-error outdated JSONWP capabilities\n         const browser = caps.browserName || caps.browser || appName\n         /**\n",
    "test_patch": "diff --git a/packages/wdio-spec-reporter/tests/index.test.ts b/packages/wdio-spec-reporter/tests/index.test.ts\nindex 740d95ba844..95a0d9432ea 100644\n--- a/packages/wdio-spec-reporter/tests/index.test.ts\n+++ b/packages/wdio-spec-reporter/tests/index.test.ts\n@@ -977,6 +977,14 @@ describe('SpecReporter', () => {\n             } as any, false)).toBe('Chrome 50 Windows')\n         })\n \n+        it('should return preface desktop combo when using W3C capabilities', () => {\n+            expect(tmpReporter.getEnviromentCombo({\n+                browser: 'Chrome',\n+                browserVersion: 50,\n+                platformName: 'Windows',\n+            } as any, false)).toBe('Chrome 50 Windows')\n+        })\n+\n         it('should return verbose desktop combo without platform', () => {\n             expect(tmpReporter.getEnviromentCombo({\n                 browserName: 'chrome',\n@@ -995,10 +1003,19 @@ describe('SpecReporter', () => {\n             expect(tmpReporter.getEnviromentCombo({\n                 platformName: 'Mac',\n                 automationName: 'Mac2',\n-                bundleId: 'com.apple.calculator',\n+                'appium:bundleId': 'com.apple.calculator',\n                 sessionId: '53d1c8fd-23d9-4e81-a94b-011d2e694b9a'\n             } as any, false)).toBe('com.apple.calculator Mac')\n         })\n+\n+        it('should recognise appPackage', () => {\n+            expect(tmpReporter.getEnviromentCombo({\n+                platformName: 'Android',\n+                'appium:automationName': 'uiautomator2',\n+                'appium:appPackage': 'com.example.android',\n+                'appium:appActivity': '.MainActivity'\n+            }, false)).toBe('com.example.android Android')\n+        })\n     })\n \n     describe('add real time report', () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13423",
    "pr_id": 13423,
    "issue_id": 13377,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: v9 fails in non-headless, incognito mode\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9\n\n### Node.js Version\n\n20.16.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\r\n    browserName: 'chrome',\r\n    'goog:chromeOptions': {\r\n        args: ['incognito', 'disable-gpu']\r\n    }\r\n}\n```\n\n\n### What happened?\n\nIt seems that all tests fail when running non-headless and in incognito mode. The browser window(s) show and disappear quickly, sort of flashing. I used a macOS (14.6.1).\r\n\r\nnpm run test:local\r\n\r\n> jasmine-boilerplate@1.0.0 test:local\r\n> wdio run wdio.local.conf.ts\r\n\r\n\r\nExecution of 3 workers started at 2024-08-16T14:12:50.600Z\r\n\r\n[0-1] RUNNING in chrome - file:///test/specs/dynamic.spec.ts\r\n[0-2] RUNNING in chrome - file:///test/specs/form.spec.ts\r\n[0-0] RUNNING in chrome - file:///test/specs/checkbox.spec.ts\r\n[0-1] FAILED in chrome - file:///test/specs/dynamic.spec.ts\r\n[0-2] FAILED in chrome - file:///test/specs/form.spec.ts\r\n[0-0] FAILED in chrome - file:///test/specs/checkbox.spec.ts\r\n\r\nSpec Files:\t 0 passed, 3 failed, 3 total (100% completed) in 00:00:05\n\n### What is your expected behavior?\n\nRegular execution and passing tests.\n\n### How to reproduce the bug.\n\n1. Clone https://github.com/webdriverio/jasmine-boilerplate and npm install.\r\n\r\n2. Modify\r\ndiff --git a/wdio.local.conf.ts b/wdio.local.conf.ts\r\nindex 9a5ed83..83528fe 100644\r\n--- a/wdio.local.conf.ts\r\n+++ b/wdio.local.conf.ts\r\n@@ -6,7 +6,7 @@ export const config: WebdriverIO.Config = {\r\n         capabilities: [{\r\n             browserName: 'chrome',\r\n             'goog:chromeOptions': {\r\n-                args: ['headless', 'disable-gpu']\r\n+                args: ['incognito', 'disable-gpu']\r\n             }\r\n         }]\r\n     }\r\n\r\n3. npm run test:local\n\n### Relevant log output\n\n```typescript\n**wdio.log:**\r\n\r\n2024-08-16T14:12:50.606Z INFO @wdio/cli:launcher: Run onPrepare hook\r\n2024-08-16T14:12:50.606Z INFO @wdio/utils: Setting up browser driver for: chrome@stable\r\n2024-08-16T14:12:50.607Z INFO @wdio/utils: Setting up browser binaries for: chrome@stable\r\n2024-08-16T14:12:50.637Z INFO webdriver: Using Chromedriver v127.0.6533.120 from cache directory /var/folders/5m/zcxth49d19q9p2rc0w_0k48c0000gn/T\r\n2024-08-16T14:12:50.665Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2024-08-16T14:12:50.665Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2024-08-16T14:12:50.665Z INFO @wdio/cli:launcher: Run onWorkerStart hook\r\n2024-08-16T14:12:50.666Z INFO @wdio/local-runner: Start worker 0-0 with arg: run,wdio.local.conf.ts\r\n2024-08-16T14:12:50.668Z DEBUG @wdio/local-runner: Send command run to worker with cid \"0-0\"\r\n2024-08-16T14:12:50.668Z INFO @wdio/local-runner: Start worker 0-1 with arg: run,wdio.local.conf.ts\r\n2024-08-16T14:12:50.668Z DEBUG @wdio/local-runner: Send command run to worker with cid \"0-1\"\r\n2024-08-16T14:12:50.668Z INFO @wdio/local-runner: Start worker 0-2 with arg: run,wdio.local.conf.ts\r\n2024-08-16T14:12:50.669Z DEBUG @wdio/local-runner: Send command run to worker with cid \"0-2\"\r\n2024-08-16T14:12:55.686Z DEBUG @wdio/local-runner: Runner 0-1 finished with exit code 1\r\n2024-08-16T14:12:55.687Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\r\n2024-08-16T14:12:55.707Z DEBUG @wdio/local-runner: Runner 0-2 finished with exit code 1\r\n2024-08-16T14:12:55.707Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\r\n2024-08-16T14:12:55.712Z DEBUG @wdio/local-runner: Runner 0-0 finished with exit code 1\r\n2024-08-16T14:12:55.712Z INFO @wdio/cli:launcher: Run onWorkerEnd hook\r\n2024-08-16T14:12:55.712Z INFO @wdio/cli:launcher: Run onComplete hook\r\n2024-08-16T14:12:55.734Z INFO @wdio/local-runner: Shutting down spawned worker\r\n2024-08-16T14:12:55.986Z INFO @wdio/local-runner: Waiting for 0 to shut down gracefully\r\n\r\n\r\n**wdio-0-0-chromedriver.log:**\r\n\r\nStarting ChromeDriver 127.0.6533.120 (c51f2916e4a14157c276fd33c8bfb24155aac1ad-refs/branch-heads/6533@{#2000}) on port 51950\r\nRemote connections are allowed by an allowlist (0.0.0.0).\r\nPlease see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.\r\nChromeDriver was started successfully.\r\n\r\n\r\n**wdio-0-0.log:**\r\n2024-08-16T14:12:51.156Z INFO @wdio/local-runner: Run worker command: run\r\n2024-08-16T14:12:51.161Z DEBUG @wdio/runner: init remote session\r\n2024-08-16T14:12:51.194Z DEBUG @wdio/runner: init remote session\r\n2024-08-16T14:12:51.195Z INFO webdriver: Initiate new session using the WebDriver protocol\r\n2024-08-16T14:12:51.226Z INFO webdriver: Using Chromedriver v127.0.6533.120 from cache directory /var/folders/5m/zcxth49d19q9p2rc0w_0k48c0000gn/T\r\n2024-08-16T14:12:52.236Z INFO @wdio/utils: Started Chromedriver v127.0.6533.120 with params --port=51950 --allowed-origins=* --allowed-ips=0.0.0.0 in 1041ms on port 51950\r\n2024-08-16T14:12:52.251Z INFO webdriver: [POST] http://localhost:51950/session\r\n2024-08-16T14:12:52.251Z INFO webdriver: DATA {\r\n  capabilities: {\r\n    alwaysMatch: {\r\n      browserName: 'chrome',\r\n      'goog:chromeOptions': [Object],\r\n      webSocketUrl: true\r\n    },\r\n    firstMatch: [ {} ]\r\n  },\r\n  desiredCapabilities: {\r\n    browserName: 'chrome',\r\n    'goog:chromeOptions': {\r\n      binary: '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\r\n      args: [Array]\r\n    },\r\n    webSocketUrl: true\r\n  }\r\n}\r\n2024-08-16T14:12:53.238Z DEBUG webdriver: request failed due to response error: unknown error\r\n2024-08-16T14:12:53.238Z WARN webdriver: Request failed with status 500 due to unknown error: unhandled inspector error: {\"code\":-32000,\"message\":\"Failed to open new tab - no browser is open\"}\r\n  (Session info: chrome=127.0.6533.120)\r\n2024-08-16T14:12:53.238Z INFO webdriver: Retrying 1/3\r\n2024-08-16T14:12:53.238Z INFO webdriver: [POST] http://localhost:51950/session\r\n2024-08-16T14:12:53.238Z INFO webdriver: DATA {\r\n  capabilities: {\r\n    alwaysMatch: {\r\n      browserName: 'chrome',\r\n      'goog:chromeOptions': [Object],\r\n      webSocketUrl: true\r\n    },\r\n    firstMatch: [ {} ]\r\n  },\r\n  desiredCapabilities: {\r\n    browserName: 'chrome',\r\n    'goog:chromeOptions': {\r\n      binary: '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\r\n      args: [Array]\r\n    },\r\n    webSocketUrl: true\r\n  }\r\n}\r\n2024-08-16T14:12:53.958Z DEBUG webdriver: request failed due to response error: unknown error\r\n2024-08-16T14:12:53.958Z WARN webdriver: Request failed with status 500 due to unknown error: unhandled inspector error: {\"code\":-32000,\"message\":\"Failed to open new tab - no browser is open\"}\r\n  (Session info: chrome=127.0.6533.120)\r\n2024-08-16T14:12:53.958Z INFO webdriver: Retrying 2/3\r\n2024-08-16T14:12:53.958Z INFO webdriver: [POST] http://localhost:51950/session\r\n2024-08-16T14:12:53.958Z INFO webdriver: DATA {\r\n  capabilities: {\r\n    alwaysMatch: {\r\n      browserName: 'chrome',\r\n      'goog:chromeOptions': [Object],\r\n      webSocketUrl: true\r\n    },\r\n    firstMatch: [ {} ]\r\n  },\r\n  desiredCapabilities: {\r\n    browserName: 'chrome',\r\n    'goog:chromeOptions': {\r\n      binary: '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\r\n      args: [Array]\r\n    },\r\n    webSocketUrl: true\r\n  }\r\n}\r\n2024-08-16T14:12:54.767Z DEBUG webdriver: request failed due to response error: unknown error\r\n2024-08-16T14:12:54.767Z WARN webdriver: Request failed with status 500 due to unknown error: unhandled inspector error: {\"code\":-32000,\"message\":\"Failed to open new tab - no browser is open\"}\r\n  (Session info: chrome=127.0.6533.120)\r\n2024-08-16T14:12:54.767Z INFO webdriver: Retrying 3/3\r\n2024-08-16T14:12:54.767Z INFO webdriver: [POST] http://localhost:51950/session\r\n2024-08-16T14:12:54.767Z INFO webdriver: DATA {\r\n  capabilities: {\r\n    alwaysMatch: {\r\n      browserName: 'chrome',\r\n      'goog:chromeOptions': [Object],\r\n      webSocketUrl: true\r\n    },\r\n    firstMatch: [ {} ]\r\n  },\r\n  desiredCapabilities: {\r\n    browserName: 'chrome',\r\n    'goog:chromeOptions': {\r\n      binary: '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\r\n      args: [Array]\r\n    },\r\n    webSocketUrl: true\r\n  }\r\n}\r\n2024-08-16T14:12:55.577Z DEBUG webdriver: request failed due to response error: unknown error\r\n2024-08-16T14:12:55.577Z ERROR webdriver: Request failed with status 500 due to unknown error: unknown error: unhandled inspector error: {\"code\":-32000,\"message\":\"Failed to open new tab - no browser is open\"}\r\n  (Session info: chrome=127.0.6533.120)\r\n2024-08-16T14:12:55.577Z ERROR webdriver: unknown error: unknown error: unhandled inspector error: {\"code\":-32000,\"message\":\"Failed to open new tab - no browser is open\"}\r\n  (Session info: chrome=127.0.6533.120)\r\n    at getErrorFromResponseBody (/Users/zarko/repos/ext/jasmine-boilerplate/node_modules/webdriver/build/index.js:996:10)\r\n    at FetchRequest._request (/Users/zarko/repos/ext/jasmine-boilerplate/node_modules/webdriver/build/index.js:1304:19)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n    at startWebDriverSession (/Users/zarko/repos/ext/jasmine-boilerplate/node_modules/webdriver/build/index.js:906:16)\r\n    at Function.newSession (/Users/zarko/repos/ext/jasmine-boilerplate/node_modules/webdriver/build/index.js:1502:41)\r\n    at remote (/Users/zarko/repos/ext/jasmine-boilerplate/node_modules/webdriverio/build/index.js:6910:20)\r\n    at async Runner._startSession (file:///Users/zarko/repos/ext/jasmine-boilerplate/node_modules/@wdio/runner/build/index.js:778:23)\r\n    at async Runner._initSession (file:///Users/zarko/repos/ext/jasmine-boilerplate/node_modules/@wdio/runner/build/index.js:752:22)\r\n    at async Runner.run (file:///Users/zarko/repos/ext/jasmine-boilerplate/node_modules/@wdio/runner/build/index.js:659:16)\r\n2024-08-16T14:12:55.603Z ERROR @wdio/runner: Error: Failed to create session.\r\nunknown error: unhandled inspector error: {\"code\":-32000,\"message\":\"Failed to open new tab - no browser is open\"}\r\n  (Session info: chrome=127.0.6533.120)\r\n    at startWebDriverSession (/Users/zarko/repos/ext/jasmine-boilerplate/node_modules/webdriver/build/index.js:910:11)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n    at Function.newSession (/Users/zarko/repos/ext/jasmine-boilerplate/node_modules/webdriver/build/index.js:1502:41)\r\n    at remote (/Users/zarko/repos/ext/jasmine-boilerplate/node_modules/webdriverio/build/index.js:6910:20)\r\n    at async Runner._startSession (file:///Users/zarko/repos/ext/jasmine-boilerplate/node_modules/@wdio/runner/build/index.js:778:23)\r\n    at async Runner._initSession (file:///Users/zarko/repos/ext/jasmine-boilerplate/node_modules/@wdio/runner/build/index.js:752:22)\r\n    at async Runner.run (file:///Users/zarko/repos/ext/jasmine-boilerplate/node_modules/@wdio/runner/build/index.js:659:16)\r\n2024-08-16T14:12:55.603Z DEBUG @wdio/utils:shim: Finished to run \"after\" hook in 0ms\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 1643,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/webdriver/src/utils.ts",
      "packages/webdriver/tests/utils.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriver/tests/utils.test.ts"
    ],
    "base_commit": "f97ad3f83b85b631295b22398b5ad1caba051489",
    "head_commit": "a32a5ba7b051d2e9a343973e88b8e57284dbe4d6",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13423",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13423",
    "dockerfile": "",
    "pr_merged_at": "2024-08-20T01:34:01.000Z",
    "patch": "diff --git a/packages/webdriver/src/utils.ts b/packages/webdriver/src/utils.ts\nindex fcf24e73878..414b8ddce5b 100644\n--- a/packages/webdriver/src/utils.ts\n+++ b/packages/webdriver/src/utils.ts\n@@ -33,31 +33,6 @@ const BROWSER_DRIVER_ERRORS = [\n  * start browser session with WebDriver protocol\n  */\n export async function startWebDriverSession (params: RemoteConfig): Promise<{ sessionId: string, capabilities: WebdriverIO.Capabilities }> {\n-    /**\n-     * validate capabilities to check if there are no obvious mix between\n-     * JSONWireProtocol and WebDriver protocol, e.g.\n-     */\n-    if (params.capabilities) {\n-        const extensionCaps = Object.keys(params.capabilities).filter((cap) => cap.includes(':'))\n-        const invalidWebDriverCaps = Object.keys(params.capabilities)\n-            .filter((cap) => !CAPABILITY_KEYS.includes(cap) && !cap.includes(':'))\n-\n-        /**\n-         * if there are vendor extensions, e.g. sauce:options or appium:app\n-         * used (only WebDriver compatible) and caps that aren't defined\n-         * in the WebDriver spec\n-         */\n-        if (extensionCaps.length && invalidWebDriverCaps.length) {\n-            throw new Error(\n-                `Invalid or unsupported WebDriver capabilities found (\"${invalidWebDriverCaps.join('\", \"')}\"). ` +\n-                'Ensure to only use valid W3C WebDriver capabilities (see https://w3c.github.io/webdriver/#capabilities).' +\n-                'If you run your tests on a remote vendor, like Sauce Labs or BrowserStack, make sure that you put them ' +\n-                'into vendor specific capabilities, e.g. \"sauce:options\" or \"bstack:options\". Please reach out ' +\n-                'to your vendor support team if you have further questions.'\n-            )\n-        }\n-    }\n-\n     /**\n      * the user could have passed in either w3c style or jsonwp style caps\n      * and we want to pass both styles to the server, which means we need\n@@ -84,6 +59,7 @@ export async function startWebDriverSession (params: RemoteConfig): Promise<{ se\n         jsonwpCaps.webSocketUrl = true\n     }\n \n+    validateCapabilities(w3cCaps.alwaysMatch)\n     const sessionRequest = new Request(\n         'POST',\n         '/session',\n@@ -111,6 +87,47 @@ export async function startWebDriverSession (params: RemoteConfig): Promise<{ se\n     return { sessionId, capabilities: params.capabilities }\n }\n \n+/**\n+ * Validates the given WebdriverIO capabilities.\n+ *\n+ * @param {WebdriverIO.Capabilities} capabilities - The capabilities to validate.\n+ * @throws {Error} If the capabilities contain incognito mode.\n+ */\n+export function validateCapabilities (capabilities: WebdriverIO.Capabilities) {\n+    const chromeArgs = capabilities['goog:chromeOptions']?.args || []\n+    if (chromeArgs.includes('incognito') || chromeArgs.includes('--incognito')) {\n+        throw new Error(\n+            'Please remove \"incognito\" from `\"goog:chromeOptions\".args` as it is not supported running Chrome with WebDriver. ' +\n+            'WebDriver sessions are always incognito mode and do not persist across browser sessions.'\n+        )\n+    }\n+\n+    /**\n+     * validate capabilities to check if there are no obvious mix between\n+     * JSONWireProtocol and WebDriver protocol, e.g.\n+     */\n+    if (capabilities) {\n+        const extensionCaps = Object.keys(capabilities).filter((cap) => cap.includes(':'))\n+        const invalidWebDriverCaps = Object.keys(capabilities)\n+            .filter((cap) => !CAPABILITY_KEYS.includes(cap) && !cap.includes(':'))\n+\n+        /**\n+         * if there are vendor extensions, e.g. sauce:options or appium:app\n+         * used (only WebDriver compatible) and caps that aren't defined\n+         * in the WebDriver spec\n+         */\n+        if (extensionCaps.length && invalidWebDriverCaps.length) {\n+            throw new Error(\n+                `Invalid or unsupported WebDriver capabilities found (\"${invalidWebDriverCaps.join('\", \"')}\"). ` +\n+                'Ensure to only use valid W3C WebDriver capabilities (see https://w3c.github.io/webdriver/#capabilities).' +\n+                'If you run your tests on a remote vendor, like Sauce Labs or BrowserStack, make sure that you put them ' +\n+                'into vendor specific capabilities, e.g. \"sauce:options\" or \"bstack:options\". Please reach out ' +\n+                'to your vendor support team if you have further questions.'\n+            )\n+        }\n+    }\n+}\n+\n /**\n  * check if WebDriver requests was successful\n  * @param  {number}  statusCode status code of request\n",
    "test_patch": "diff --git a/packages/webdriver/tests/utils.test.ts b/packages/webdriver/tests/utils.test.ts\nindex cfdbf0fb9b1..1de4e42933d 100644\n--- a/packages/webdriver/tests/utils.test.ts\n+++ b/packages/webdriver/tests/utils.test.ts\n@@ -8,8 +8,7 @@ import type { Capabilities, Options } from '@wdio/types'\n import {\n     isSuccessfulResponse, getPrototype, getSessionError,\n     getErrorFromResponseBody, CustomRequestError, startWebDriverSession,\n-    getTimeoutError,\n-    setupDirectConnect\n+    getTimeoutError, setupDirectConnect, validateCapabilities\n } from '../src/utils.js'\n import type { Client, RemoteConfig } from '../src/types.js'\n \n@@ -511,4 +510,36 @@ describe('utils', () => {\n             })\n         })\n     })\n+\n+    describe('validateCapabilities', () => {\n+        it('should throw an error if incognito is defined', () => {\n+            expect(() => {\n+                validateCapabilities({\n+                    browserName: 'chrome',\n+                    'goog:chromeOptions': {\n+                        args: ['--incognito']\n+                    }\n+                })\n+            }).toThrow('Please remove \"incognito\" from `\"goog:chromeOptions\".args`')\n+        })\n+\n+        it('should throw an error if incognito is defined as string', () => {\n+            expect(() => {\n+                validateCapabilities({\n+                    browserName: 'chrome',\n+                    'goog:chromeOptions': {\n+                        args: ['incognito']\n+                    }\n+                })\n+            }).toThrow('Please remove \"incognito\" from `\"goog:chromeOptions\".args`')\n+        })\n+\n+        it('should not throw an error if incognito is not defined', () => {\n+            expect(() => {\n+                validateCapabilities({\n+                    browserName: 'chrome'\n+                })\n+            }).not.toThrow()\n+        })\n+    })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13417",
    "pr_id": 13417,
    "issue_id": 13415,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: TypeError: socketUrl.replace is not a function after upgrade to v9\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n9.04\n\n### Node.js Version\n\nLTS\n\n### Mode\n\nStandalone Mode\n\n### Which capabilities are you using?\n\n```typescript\n{\r\n  capabilities: {\r\n    alwaysMatch: {\r\n      browserName: 'MozillaFirefox',\r\n      platformName: 'linux',\r\n      'appium:automationName': 'Gecko',\r\n      webSocketUrl: true\r\n    },\r\n    firstMatch: [ {} ]\r\n  },\r\n  desiredCapabilities: {\r\n    browserName: 'MozillaFirefox',\r\n    platformName: 'linux',\r\n    'appium:automationName': 'Gecko',\r\n    webSocketUrl: true\r\n  }\r\n}\r\n```\n```\n\n\n### What happened?\n\nTrying to initialise mobile geckodriver session using above capabilities fails with the following exception after upgrade to v9.0.4:\r\n\r\n```\r\n1) Desktop Gecko Driver\r\n       \"before each\" hook for \"should start and stop a session\":\r\n     TypeError: socketUrl.replace is not a function\r\n      at initiateBidi (file:///home/runner/work/appium-geckodriver/appium-geckodriver/node_modules/webdriver/build/index.js:1104:25)\r\n      at Function.newSession (file:///home/runner/work/appium-geckodriver/appium-geckodriver/node_modules/webdriver/build/index.js:1512:36)\r\n      at processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n      at async remote (file:///home/runner/work/appium-geckodriver/appium-geckodriver/node_modules/webdriverio/build/index.js:6964:20)\r\n      at async Context.<anonymous> (test/functional/desktop-driver-e2e-specs.js:26:14)\r\n```\r\n\r\nhttps://github.com/appium/appium-geckodriver/actions/runs/10452627737/job/28942898563\r\n\r\nThere is no such exception if WDIO v8 is used.\n\n### What is your expected behavior?\n\nThe session should start properly\n\n### How to reproduce the bug.\n\nhttps://github.com/appium/appium-geckodriver/pull/120\n\n### Relevant log output\n\n```typescript\nhttps://github.com/appium/appium-geckodriver/actions/runs/10452627737/job/28942898563?pr=120\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 286,
    "test_files_count": 1,
    "non_test_files_count": 4,
    "pr_changed_files": [
      "__mocks__/@wdio/utils.ts",
      "packages/wdio-utils/src/envDetector.ts",
      "packages/wdio-utils/src/index.ts",
      "packages/wdio-utils/tests/envDetector.test.ts",
      "packages/webdriver/src/index.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-utils/tests/envDetector.test.ts"
    ],
    "base_commit": "0b2c9c094dc4d0e6f93faca42e732b6cf8659972",
    "head_commit": "24a5be8ebefe75310ceaa337120d79f95840e64c",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13417",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13417",
    "dockerfile": "",
    "pr_merged_at": "2024-08-19T20:34:41.000Z",
    "patch": "diff --git a/__mocks__/@wdio/utils.ts b/__mocks__/@wdio/utils.ts\nindex 7c3da2818d2..617b08b6f41 100644\n--- a/__mocks__/@wdio/utils.ts\n+++ b/__mocks__/@wdio/utils.ts\n@@ -9,6 +9,7 @@ import {\n import webdriverMonadOrig from '../../packages/wdio-utils/src/monad.js'\n import {\n     isW3C as isW3cOrig,\n+    isBidi as isBidiOrig,\n     sessionEnvironmentDetector as sessionEnvDetector,\n     capabilitiesEnvironmentDetector as capabilitiesEnvDetector\n } from '../../packages/wdio-utils/src/envDetector.js'\n@@ -101,6 +102,7 @@ export const setWdioSyncSupport = (value: boolean) => { hasWdioSyncSupport = val\n export let hasWdioSyncSupport = false\n export const testFnWrapper = vi.fn()\n export const isW3C = isW3cOrig\n+export const isBidi = isBidiOrig\n export const sessionEnvironmentDetector = vi.fn().mockImplementation(\n     // @ts-ignore\n     (...args) => sessionEnvDetector(...args))\n\ndiff --git a/packages/wdio-utils/src/envDetector.ts b/packages/wdio-utils/src/envDetector.ts\nindex 5e23e1296e2..bf08db5759a 100644\n--- a/packages/wdio-utils/src/envDetector.ts\n+++ b/packages/wdio-utils/src/envDetector.ts\n@@ -198,12 +198,12 @@ function isSauce(capabilities?: Capabilities.WithRequestedCapabilities['capabili\n  * @param  {object}  capabilities session capabilities\n  * @return {Boolean}              true if session has WebDriver Bidi support\n  */\n-function isBidi(capabilities?: WebdriverIO.Capabilities) {\n+export function isBidi(capabilities?: WebdriverIO.Capabilities) {\n     if (!capabilities) {\n         return false\n     }\n \n-    return Boolean(capabilities.webSocketUrl)\n+    return typeof capabilities.webSocketUrl === 'string'\n }\n \n /**\n\ndiff --git a/packages/wdio-utils/src/index.ts b/packages/wdio-utils/src/index.ts\nindex 9e4b1d32bcf..bf3587e9d7e 100644\n--- a/packages/wdio-utils/src/index.ts\n+++ b/packages/wdio-utils/src/index.ts\n@@ -12,7 +12,7 @@ import {\n import { wrapCommand, executeHooksWithArgs, executeAsync } from './shim.js'\n import * as asyncIterators from './pIteration.js'\n import { testFnWrapper, wrapGlobalTestMethod } from './test-framework/index.js'\n-import { isW3C, capabilitiesEnvironmentDetector, sessionEnvironmentDetector } from './envDetector.js'\n+import { isW3C, isBidi, capabilitiesEnvironmentDetector, sessionEnvironmentDetector } from './envDetector.js'\n import { UNICODE_CHARACTERS, HOOK_DEFINITION } from './constants.js'\n \n export {\n@@ -47,6 +47,7 @@ export {\n      * environmentDetector\n      */\n     isW3C,\n+    isBidi,\n     sessionEnvironmentDetector,\n     capabilitiesEnvironmentDetector,\n \n\ndiff --git a/packages/webdriver/src/index.ts b/packages/webdriver/src/index.ts\nindex b7ee19b2066..5286b5a0b2b 100644\n--- a/packages/webdriver/src/index.ts\n+++ b/packages/webdriver/src/index.ts\n@@ -2,7 +2,7 @@ import type { ChildProcess } from 'node:child_process'\n \n import logger from '@wdio/logger'\n \n-import { webdriverMonad, sessionEnvironmentDetector, startWebDriver } from '@wdio/utils'\n+import { webdriverMonad, sessionEnvironmentDetector, startWebDriver, isBidi } from '@wdio/utils'\n import { validateConfig } from '@wdio/config'\n import type { Capabilities, Options } from '@wdio/types'\n \n@@ -48,7 +48,7 @@ export default class WebDriver {\n          * initiate WebDriver Bidi\n          */\n         const bidiPrototype: PropertyDescriptorMap = {}\n-        if (capabilities.webSocketUrl) {\n+        if (isBidi(capabilities)) {\n             log.info(`Register BiDi handler for session with id ${sessionId}`)\n             Object.assign(bidiPrototype, initiateBidi(capabilities.webSocketUrl as any as string, options.strictSSL))\n         }\n@@ -68,7 +68,7 @@ export default class WebDriver {\n         /**\n          * parse and propagate all Bidi events to the browser instance\n          */\n-        if (capabilities.webSocketUrl) {\n+        if (isBidi(capabilities)) {\n             // make sure the Bidi connection is established before returning\n             await client._bidiHandler.connect()\n             client._bidiHandler?.socket.on('message', parseBidiMessage.bind(client))\n@@ -122,8 +122,8 @@ export default class WebDriver {\n          * initiate WebDriver Bidi\n          */\n         const bidiPrototype: PropertyDescriptorMap = {}\n-        const webSocketUrl = options.capabilities?.webSocketUrl as unknown as string\n-        if (typeof webSocketUrl === 'string') {\n+        if (isBidi(options.capabilities)) {\n+            const webSocketUrl = options.capabilities?.webSocketUrl as unknown as string\n             log.info(`Register BiDi handler for session with id ${options.sessionId}`)\n             Object.assign(bidiPrototype, initiateBidi(webSocketUrl as unknown as string, options.strictSSL))\n         }\n@@ -135,7 +135,7 @@ export default class WebDriver {\n         /**\n          * parse and propagate all Bidi events to the browser instance\n          */\n-        if (webSocketUrl) {\n+        if (isBidi(options.capabilities)) {\n             client._bidiHandler?.socket.on('message', parseBidiMessage.bind(client))\n         }\n         return client\n",
    "test_patch": "diff --git a/packages/wdio-utils/tests/envDetector.test.ts b/packages/wdio-utils/tests/envDetector.test.ts\nindex c0c3d067ab7..fb1d9fde831 100644\n--- a/packages/wdio-utils/tests/envDetector.test.ts\n+++ b/packages/wdio-utils/tests/envDetector.test.ts\n@@ -123,6 +123,9 @@ describe('sessionEnvironmentDetector', () => {\n         expect(sessionEnvironmentDetector({ capabilities: phantomCaps, requestedCapabilities }).isBidi).toBe(false)\n         // @ts-expect-error JSON import is not properly typed\n         expect(sessionEnvironmentDetector({ capabilities: bidiResponse, requestedCapabilities }).isBidi).toBe(true)\n+        expect(sessionEnvironmentDetector({ capabilities: {\n+            webSocketUrl: true\n+        }, requestedCapabilities: {} }).isBidi).toBe(false)\n     })\n \n     it('isSauce', () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13389",
    "pr_id": 13389,
    "issue_id": 13376,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: `browser.executeAsync(script, arguments)` returns an undefined.\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\n9.0.0\r\n\r\n### Node.js Version\r\n\r\nv22.6.0\r\n\r\n### Mode\r\n\r\nWDIO Testrunner\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\ncapabilities: [{ browserName: 'firefox' }]\r\n```\r\n\r\n\r\n### What happened?\r\n\r\nThe `browser.executeAsync(script, arguments)` function returns an undefined type instead of what is passed in `done` callback.\r\n\r\n### What is your expected behavior?\r\n\r\nThe `browser.executeAsync(script, arguments)` function returns what is passed to the `done` callback.\r\n\r\n### How to reproduce the bug.\r\n\r\n```sh\r\n$ mkdir wdio-mre; cd wdio-mre\r\n$ curl https://pastebin.com/raw/dEU6NW9M > mre-setup.js\r\n$ node mre-setup.js\r\n$ npx wdio run ./wdio.conf.js\r\n```\r\n\r\n### Relevant log output\r\n\r\n```typescript\r\n[firefox 129.0.1 linux #0-0] executeAsync performs well\r\n[firefox 129.0.1 linux #0-0]    ✖ should execute async JavaScript on the page\r\n[firefox 129.0.1 linux #0-0]\r\n[firefox 129.0.1 linux #0-0] 1 failing (586ms)\r\n[firefox 129.0.1 linux #0-0]\r\n[firefox 129.0.1 linux #0-0] 1) executeAsync performs well should execute async JavaScript on the page\r\n[firefox 129.0.1 linux #0-0] expect(received).toEqual(expected) // deep equality\r\n\r\nExpected: 10\r\nReceived: undefined\r\n[firefox 129.0.1 linux #0-0] Error: expect(received).toEqual(expected) // deep equality\r\n[firefox 129.0.1 linux #0-0]\r\n[firefox 129.0.1 linux #0-0] Expected: 10\r\n[firefox 129.0.1 linux #0-0] Received: undefined\r\n[firefox 129.0.1 linux #0-0]     at Context.<anonymous> (file:///home/greenowl/Downloads/wdio-mre/main.test.js:15:20)\r\n```\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 305,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "e2e/wdio/headless/bidi.e2e.ts",
      "packages/webdriverio/src/commands/browser/executeAsync.ts",
      "packages/webdriverio/src/commands/element/execute.ts",
      "packages/webdriverio/src/commands/element/executeAsync.ts"
    ],
    "pr_changed_test_files": [
      "e2e/wdio/headless/bidi.e2e.ts"
    ],
    "base_commit": "acdeee69f0b809276f38c9b2b4d38b2a1a768336",
    "head_commit": "c16ce41a20972047836a5faced942d32d372cae9",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13389",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13389",
    "dockerfile": "",
    "pr_merged_at": "2024-08-19T04:03:47.000Z",
    "patch": "diff --git a/packages/webdriverio/src/commands/browser/executeAsync.ts b/packages/webdriverio/src/commands/browser/executeAsync.ts\nindex 3d118deee00..e0b8ec11b7f 100644\n--- a/packages/webdriverio/src/commands/browser/executeAsync.ts\n+++ b/packages/webdriverio/src/commands/browser/executeAsync.ts\n@@ -62,8 +62,17 @@ export async function executeAsync<ReturnValue, InnerArguments extends any[]>(\n \n     if (this.isBidi) {\n         const context = await this.getWindowHandle() as string\n+        const functionDeclaration = `function (...args) {\n+            return new Promise(async (resolve, reject) => {\n+                try {\n+                    await ${script.toString()}.call(this, ...args, resolve)\n+                } catch (err) {\n+                    return reject(err)\n+                }\n+            })\n+        }`\n         const result: any = await (this as Browser).scriptCallFunction({\n-            functionDeclaration: script.toString(),\n+            functionDeclaration,\n             awaitPromise: true,\n             arguments: args.map((arg) => LocalValue.getArgument(arg)) as any,\n             target: {\n\ndiff --git a/packages/webdriverio/src/commands/element/execute.ts b/packages/webdriverio/src/commands/element/execute.ts\nindex 9e08656f652..90fe9c8afce 100644\n--- a/packages/webdriverio/src/commands/element/execute.ts\n+++ b/packages/webdriverio/src/commands/element/execute.ts\n@@ -1,5 +1,7 @@\n import { verifyArgsAndStripIfElement } from '../../utils/index.js'\n-import type { ChainablePromiseElement } from '../../types.js'\n+import { LocalValue } from '../../utils/bidi/value.js'\n+import { parseScriptResult } from '../../utils/bidi/index.js'\n+import type { Browser } from '../../types.js'\n \n /**\n  *\n@@ -38,7 +40,7 @@ import type { ChainablePromiseElement } from '../../types.js'\n  *\n  */\n export async function execute<ReturnValue, InnerArguments extends any[]> (\n-    this: ChainablePromiseElement,\n+    this: WebdriverIO.Browser | WebdriverIO.Element | WebdriverIO.MultiRemoteBrowser,\n     script: string | ((...innerArgs: [WebdriverIO.Element, ...InnerArguments]) => ReturnValue),\n     ...args: InnerArguments): Promise<ReturnValue> {\n     /**\n@@ -48,6 +50,19 @@ export async function execute<ReturnValue, InnerArguments extends any[]> (\n         throw new Error('number or type of arguments don\\'t agree with execute protocol command')\n     }\n \n+    if (this.isBidi) {\n+        const context = await this.getWindowHandle() as string\n+        const result: any = await (this as Browser).scriptCallFunction({\n+            functionDeclaration: script.toString(),\n+            awaitPromise: false,\n+            arguments: [this, ...args].map((arg) => LocalValue.getArgument(arg)) as any,\n+            target: {\n+                context\n+            }\n+        })\n+        return parseScriptResult(result)\n+    }\n+\n     /**\n      * instances started as multibrowserinstance can't getting called with\n      * a function parameter, therefore we need to check if it starts with \"function () {\"\n\ndiff --git a/packages/webdriverio/src/commands/element/executeAsync.ts b/packages/webdriverio/src/commands/element/executeAsync.ts\nindex d0425d6c200..2efda065741 100644\n--- a/packages/webdriverio/src/commands/element/executeAsync.ts\n+++ b/packages/webdriverio/src/commands/element/executeAsync.ts\n@@ -1,5 +1,7 @@\n import { verifyArgsAndStripIfElement } from '../../utils/index.js'\n-import type { ChainablePromiseElement } from '../../types.js'\n+import { LocalValue } from '../../utils/bidi/value.js'\n+import { parseScriptResult } from '../../utils/bidi/index.js'\n+import type { Browser } from '../../types.js'\n \n /**\n  *\n@@ -48,7 +50,7 @@ import type { ChainablePromiseElement } from '../../types.js'\n  *\n  */\n export async function executeAsync<ReturnValue, InnerArguments extends any[]> (\n-    this: ChainablePromiseElement,\n+    this: WebdriverIO.Browser | WebdriverIO.Element,\n     script:\n         string |\n         ((...args: [...innerArgs: [WebdriverIO.Element, ...InnerArguments], callback: (result?: ReturnValue) => void]) => void),\n@@ -61,6 +63,28 @@ export async function executeAsync<ReturnValue, InnerArguments extends any[]> (\n         throw new Error('number or type of arguments don\\'t agree with execute protocol command')\n     }\n \n+    if (this.isBidi) {\n+        const context = await this.getWindowHandle() as string\n+        const functionDeclaration = `function (...args) {\n+            return new Promise(async (resolve, reject) => {\n+                try {\n+                    await ${script.toString()}.call(this, ...args, resolve)\n+                } catch (err) {\n+                    return reject(err)\n+                }\n+            })\n+        }`\n+        const result: any = await (this as Browser).scriptCallFunction({\n+            functionDeclaration,\n+            awaitPromise: true,\n+            arguments: [this, ...args].map((arg) => LocalValue.getArgument(arg)) as any,\n+            target: {\n+                context\n+            }\n+        })\n+        return parseScriptResult(result)\n+    }\n+\n     /**\n      * instances started as multibrowserinstance can't getting called with\n      * a function parameter, therefore we need to check if it starts with \"function () {\"\n",
    "test_patch": "diff --git a/e2e/wdio/headless/bidi.e2e.ts b/e2e/wdio/headless/bidi.e2e.ts\nindex 481d3902ef1..a492f8273c3 100644\n--- a/e2e/wdio/headless/bidi.e2e.ts\n+++ b/e2e/wdio/headless/bidi.e2e.ts\n@@ -1,4 +1,4 @@\n-import { browser } from '@wdio/globals'\n+import { browser, expect } from '@wdio/globals'\n import type { local } from 'webdriver'\n \n describe('bidi e2e test', () => {\n@@ -169,4 +169,36 @@ describe('bidi e2e test', () => {\n             '\\n'\n         ])\n     })\n+\n+    it('supports execute with bidi on element scope', async () => {\n+        await browser.url('http://guinea-pig.webdriver.io')\n+        const result = await browser.$('.findme').execute(function (elem, a, b, c, d) {\n+            return (elem as unknown as HTMLElement).innerText.length + a + b + c + d\n+        }, 1, 2, 3, 4)\n+        expect(result).toBe(29)\n+    })\n+\n+    describe('executeAsync', () => {\n+        it('works in browser scope', async () => {\n+            const result = await browser.executeAsync(function (a, b, c, d, done) {\n+                // browser context - you may not access client or console\n+                setTimeout(() => {\n+                    done(a + b + c + d)\n+                }, 3000)\n+            }, 1, 2, 3, 4)\n+            expect(result).toBe(10)\n+        })\n+\n+        it('works on element scope', async () => {\n+            await browser.url('http://guinea-pig.webdriver.io')\n+            const result = await browser.$('.findme').executeAsync(function (elem, a, b, c, d, done) {\n+                // browser context - you may not access client or console\n+                setTimeout(() => {\n+                    // \"Test CSS Attributes\" = 19 + 1 + 2 + 3 + 4 = 29\n+                    done((elem as unknown as HTMLElement).innerText.length + a + b + c + d)\n+                }, 3000)\n+            }, 1, 2, 3, 4)\n+            expect(result).toBe(29)\n+        })\n+    })\n })\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13338",
    "pr_id": 13338,
    "issue_id": 11713,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[💡 Feature]: Replace current build system with Vite\n### Is your feature request related to a problem?\r\n\r\nThis issue is a follow up to comment https://github.com/webdriverio/webdriverio/pull/11712#issuecomment-1823159517\r\n\r\nSome older browsers [configured in `capabilities`](https://webdriver.io/docs/configuration#capabilities) throw errors when running scripts from [**webdriverio**/src/scripts](https://github.com/webdriverio/webdriverio/tree/main/packages/webdriverio/src/scripts), is this something we could solve or prevent using automation?\r\n\r\nI've added some suggestions below\r\n\r\n### Script errors in older browsers\r\nFor example, I've fixed some element method issues in older Firefox and IE11:\r\n\r\n* https://github.com/webdriverio/webdriverio/issues/11705\r\n* https://github.com/webdriverio/webdriverio/issues/11711\r\n\r\nI'm getting there, but some are still failing:\r\n\r\n[See GitHub Actions logs](https://github.com/alphagov/accessible-autocomplete/actions/runs/6960833744/job/18941141174) and [Sauce Labs output](https://app.saucelabs.com/tests/1c73bf850de1406db2de4304235851c8) for more info\r\n\r\n```console\r\n[internet explorer 11 windows #2-0] 25 passing (2m 3.7s)\r\n[internet explorer 11 windows #2-0] 6 failing\r\n```\r\n\r\n### Describe the solution you'd like.\r\n\r\nSince the scripts in [**webdriverio**/src/scripts](https://github.com/webdriverio/webdriverio/tree/main/packages/webdriverio/src/scripts) are TypeScript, could we target an older ECMAScript version?\r\n\r\nThey're currently using TypeScript `\"target\": \"es2022\"`\r\n\r\n### Describe alternatives you've considered.\r\n\r\n1. Using TypeScript `\"target\": \"es5\"` or lower for downleveling (and warnings)\r\n2. Using ESLint with [`eslint-plugin-es-x`](https://github.com/eslint-community/eslint-plugin-es-x?tab=readme-ov-file#eslint-plugin-es-x) to check syntax against `ecmaVersion`\r\n3. Using Babel presets to transform scripts without heavy polyfills\r\n4. Using Internet Explorer 11 as a \"token old browser\" in E2E tests\r\n\r\n### Additional context\r\n\r\nWhat tests could be added to prevent unsupported syntax from being added again in future?\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct",
    "issue_word_count": 310,
    "test_files_count": 6,
    "non_test_files_count": 94,
    "pr_changed_files": [
      ".eslintignore",
      ".github/workflows/build.yml",
      ".github/workflows/publish.yml",
      "CONTRIBUTING.md",
      "README.md",
      "e2e/browser-runner/__snapshots__/lit.test.js.snap",
      "e2e/package.json",
      "infra/compiler/README.md",
      "infra/compiler/package.json",
      "infra/compiler/src/index.ts",
      "infra/compiler/src/plugins.ts",
      "infra/compiler/src/type-generation/constants.ts",
      "infra/compiler/src/type-generation/index.ts",
      "infra/compiler/src/utils.ts",
      "package.json",
      "packages/eslint-plugin-wdio/cjs/package.json",
      "packages/eslint-plugin-wdio/package.json",
      "packages/eslint-plugin-wdio/src/index.ts",
      "packages/eslint-plugin-wdio/tsconfig.cjs.json",
      "packages/eslint-plugin-wdio/tsconfig.prod.json",
      "packages/wdio-allure-reporter/cjs/package.json",
      "packages/wdio-allure-reporter/package.json",
      "packages/wdio-allure-reporter/tsconfig.cjs.json",
      "packages/wdio-allure-reporter/tsconfig.prod.json",
      "packages/wdio-appium-service/package.json",
      "packages/wdio-appium-service/tsconfig.prod.json",
      "packages/wdio-browser-runner/package.json",
      "packages/wdio-browser-runner/src/browser/mock.ts",
      "packages/wdio-browser-runner/src/vite/frameworks/stencil.ts",
      "packages/wdio-browser-runner/src/vite/plugins/testrunner.ts",
      "packages/wdio-browser-runner/src/vite/utils.ts",
      "packages/wdio-browser-runner/tests/vite/__snapshots__/utils.test.ts.snap",
      "packages/wdio-browser-runner/tests/vite/utils.test.ts",
      "packages/wdio-browser-runner/tsconfig.json",
      "packages/wdio-browser-runner/tsconfig.prod.json",
      "packages/wdio-browserstack-service/package.json",
      "packages/wdio-browserstack-service/src/constants.ts",
      "packages/wdio-browserstack-service/tsconfig.prod.json",
      "packages/wdio-cli/package.json",
      "packages/wdio-cli/src/commands/config.ts",
      "packages/wdio-cli/src/commands/repl.ts",
      "packages/wdio-cli/src/constants.ts",
      "packages/wdio-cli/src/index.cts",
      "packages/wdio-cli/src/run.ts",
      "packages/wdio-cli/src/utils.ts",
      "packages/wdio-cli/tsconfig.json",
      "packages/wdio-cli/tsconfig.prod.json",
      "packages/wdio-concise-reporter/package.json",
      "packages/wdio-concise-reporter/tsconfig.prod.json",
      "packages/wdio-config/package.json",
      "packages/wdio-config/src/node/ConfigParser.ts",
      "packages/wdio-config/tsconfig.prod.json",
      "packages/wdio-cucumber-framework/package.json",
      "packages/wdio-cucumber-framework/src/index.ts",
      "packages/wdio-cucumber-framework/src/utils.ts",
      "packages/wdio-cucumber-framework/tsconfig.prod.json",
      "packages/wdio-dot-reporter/package.json",
      "packages/wdio-dot-reporter/tsconfig.prod.json",
      "packages/wdio-firefox-profile-service/package.json",
      "packages/wdio-firefox-profile-service/tsconfig.prod.json",
      "packages/wdio-globals/.npmignore",
      "packages/wdio-globals/cjs/package.json",
      "packages/wdio-globals/package.json",
      "packages/wdio-globals/src/index.ts",
      "packages/wdio-globals/tsconfig.cjs.json",
      "packages/wdio-globals/tsconfig.prod.json",
      "packages/wdio-jasmine-framework/package.json",
      "packages/wdio-jasmine-framework/tsconfig.prod.json",
      "packages/wdio-json-reporter/package.json",
      "packages/wdio-json-reporter/src/mergeResults.cts",
      "packages/wdio-json-reporter/tsconfig.prod.json",
      "packages/wdio-junit-reporter/package.json",
      "packages/wdio-junit-reporter/tsconfig.prod.json",
      "packages/wdio-lighthouse-service/package.json",
      "packages/wdio-lighthouse-service/tsconfig.prod.json",
      "packages/wdio-local-runner/package.json",
      "packages/wdio-local-runner/tsconfig.prod.json",
      "packages/wdio-logger/package.json",
      "packages/wdio-logger/src/browser.ts",
      "packages/wdio-logger/src/index.ts",
      "packages/wdio-logger/src/node.ts",
      "packages/wdio-logger/tests/node.test.ts",
      "packages/wdio-logger/tsconfig.prod.json",
      "packages/wdio-mocha-framework/package.json",
      "packages/wdio-mocha-framework/src/index.ts",
      "packages/wdio-mocha-framework/tsconfig.prod.json",
      "packages/wdio-protocols/package.json",
      "packages/wdio-protocols/tsconfig.prod.json",
      "packages/wdio-repl/package.json",
      "packages/wdio-repl/tsconfig.prod.json",
      "packages/wdio-reporter/cjs/package.json",
      "packages/wdio-reporter/package.json",
      "packages/wdio-reporter/src/index.ts",
      "packages/wdio-reporter/tsconfig.cjs.json",
      "packages/wdio-reporter/tsconfig.prod.json",
      "packages/wdio-runner/package.json",
      "packages/wdio-runner/src/browser.ts",
      "packages/wdio-runner/tsconfig.prod.json",
      "packages/wdio-sauce-service/package.json",
      "packages/wdio-sauce-service/tsconfig.prod.json"
    ],
    "pr_changed_test_files": [
      "e2e/browser-runner/__snapshots__/lit.test.js.snap",
      "e2e/package.json",
      "packages/wdio-browser-runner/src/vite/plugins/testrunner.ts",
      "packages/wdio-browser-runner/tests/vite/__snapshots__/utils.test.ts.snap",
      "packages/wdio-browser-runner/tests/vite/utils.test.ts",
      "packages/wdio-logger/tests/node.test.ts"
    ],
    "base_commit": "4e349a2d2c3b2f2b29cc560c820e2bedb9cbcb52",
    "head_commit": "122f59c8e2c4359216faf756203cd89852269bf5",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13338",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13338",
    "dockerfile": "",
    "pr_merged_at": "2024-08-09T06:47:30.000Z",
    "patch": "diff --git a/.eslintignore b/.eslintignore\nindex 5764a8908fb..cb4ad500f9a 100644\n--- a/.eslintignore\n+++ b/.eslintignore\n@@ -5,6 +5,5 @@\n /packages/**/coverage\n /tests/typings\n *.d.ts\n-!packages/**/src/cjs\n packages/wdio-protocols/src/protocols/webdriverBidi.ts\n packages/webdriverio/third_party/fake-timers.js\n\ndiff --git a/.github/workflows/build.yml b/.github/workflows/build.yml\nindex bbc47840c41..bc35c2d3527 100644\n--- a/.github/workflows/build.yml\n+++ b/.github/workflows/build.yml\n@@ -21,10 +21,6 @@ jobs:\n         env:\n           GITHUB_AUTH: ${{ secrets.GITHUB_TOKEN }}\n \n-      - name: 🏗️ Generate Typings\n-        run: pnpm run generate:typings\n-        shell: bash\n-\n       - name: ⬆️ Upload Build Artifacts\n         uses: ./.github/workflows/actions/upload-archive\n         with:\n\ndiff --git a/.github/workflows/publish.yml b/.github/workflows/publish.yml\nindex ee62a119157..4ac98a3f51f 100644\n--- a/.github/workflows/publish.yml\n+++ b/.github/workflows/publish.yml\n@@ -62,7 +62,6 @@ jobs:\n       - name: Release\n         run: |\n           pnpm run setup\n-          pnpm run generate:typings\n           pnpm lerna publish ${{github.event.inputs.releaseType}} --exact --yes --dist-tag ${{github.event.inputs.distTag}}\n           pnpm run pushReleaseTag\n         env:\n\ndiff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\nindex 8a4a842fcc3..dbdb00718e7 100644\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -142,13 +142,9 @@ You can immediately start working on the code using [a pre-setup Gitpod environm\n \n         If you have compiled the code this command will remove them as well as all dependencies of the subpackages.\n \n-    * Bootstraps sub-projects via ```pnpm run bootstrap```\n+    * Compiles the project ```pnpm run compile:all```\n \n-        Many packages depend on each other, in order to properly set up the dependency tree you need to run the [Lerna Bootstrap](https://github.com/lerna/lerna#bootstrap) command to create all necessary links. As this project also does some other house keeping tasks, it is recommended to use the package bootstrap command.\n-\n-    * Builds all subpackages via ```pnpm run build```\n-\n-        As the last step you need to build all sub-packages in order to resolve the internal dependencies. WebdriverIO uses [TypeScript](https://www.typescriptlang.org/) as a compiler.\n+        As the last step you need to build all sub-packages in order to resolve the internal dependencies. WebdriverIO uses [`@wdio/compiler`](https://github.com/webdriverio/webdriverio/tree/main/infa/compiler) which is an internal package that uses Esbuild to compile the project.\n \n * Run Tests to ensure that everything is set up correctly\n \n@@ -195,13 +191,7 @@ All type definitions are generated by the TypeScript compiler. There are some es\n - the `@wdio/protocol` package defines all protocol commands, their function parameters and return types\n - all other types should be defined in the package where they are used, here we tend to have general types defined in a `types.ts` file\n \n-You can find all files responsible for the generating the typings [here](https://github.com/webdriverio/webdriverio/tree/main/scripts/type-generation). You can trigger the process by calling:\n-\n-```sh\n-npm run generate:typings\n-```\n-\n-This will run the scripts in the directory shown above and generate the typings for all protocol commands. Whenever you change those [protocol commands](https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-protocols/src/protocols), make sure you re-generate the types with the command shown above.\n+The protocol types are generated as part of the `@wdio/compiler` build command and is part of the [`generate-types`](https://github.com/webdriverio/webdriverio/blob/main/infra/compiler/src/type-generation/index.ts#L27-L35) plugin.\n \n ### Test Changes\n \n\ndiff --git a/README.md b/README.md\nindex 9173de1b201..c65ca6721bb 100644\n--- a/README.md\n+++ b/README.md\n@@ -139,6 +139,12 @@ __Did you build a WebdriverIO service or reporter?__ That's awesome! Please add\n - [@wdio/smoke-test-service](https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-smoke-test-service) - A WebdriverIO utility to smoke test services for internal testing purposes\n - [@wdio/webdriver-mock-service](https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-webdriver-mock-service) - A WebdriverIO service to stub all endpoints for internal testing purposes\n \n+### Infrastructure Packages\n+\n+These packages are not released to NPM and used to work on this codebase.\n+\n+- [@wdio/compiler](https://github.com/webdriverio/webdriverio/tree/main/infa/compiler) - Esbuild script to compile the source code all of all packages\n+\n ## :handshake: Project Governance\n \n This project is maintained by [awesome people](/AUTHORS.md) following a common [set of rules](/GOVERNANCE.md) and treating each other with [respect and appreciation](/CODE_OF_CONDUCT.md).\n\ndiff --git a/infra/compiler/README.md b/infra/compiler/README.md\nnew file mode 100644\nindex 00000000000..fcb97a3ed46\n--- /dev/null\n+++ b/infra/compiler/README.md\n@@ -0,0 +1,32 @@\n+# WebdriverIO Build Tool\n+\n+This sub-package is being used to build WebdriverIO. It uses [Esbuild](https://esbuild.github.io) to bundle the packages.\n+\n+## Usage\n+\n+In order to use this package run:\n+\n+```sh\n+pnpm -r --filter=@wdio/build run build\n+```\n+\n+## Options\n+\n+You can pass in the following options to customize the build command.\n+\n+### `-p` / `--project`\n+\n+With this argument you can specify which sub package in `<root>/packages` will be build. It accepts either the NPM package name or the directory name. If you omit this parameter the tool will try to build all packages. You can pass in one or multiple packages, e.g.\n+\n+```sh\n+$ pnpm -r --filter=@wdio/build run build -p webdriverio -p @wdio/logger -p wdio-globals\n+```\n+\n+### `--watch`\n+\n+If you pass in this flag, the build task will run within a \"watch\" context and will continue to run and rebuild individual changes when changes are being made, e.g.\n+\n+```sh\n+# watch changes in logger package\n+$ pnpm -r --filter=@wdio/build run build -p @wdio/logger --watch\n+```\n\ndiff --git a/infra/compiler/package.json b/infra/compiler/package.json\nnew file mode 100644\nindex 00000000000..ab222b84732\n--- /dev/null\n+++ b/infra/compiler/package.json\n@@ -0,0 +1,16 @@\n+{\n+  \"name\": \"@wdio/compiler\",\n+  \"private\": true,\n+  \"type\": \"module\",\n+  \"scripts\": {\n+    \"build\": \"tsx ./src/index.ts\"\n+  },\n+  \"dependencies\": {\n+    \"esbuild\": \"^0.23.0\",\n+    \"esbuild-plugin-copy\": \"^2.1.1\",\n+    \"esbuild-plugin-d.ts\": \"^1.3.0\",\n+    \"camelcase\": \"^8.0.0\",\n+    \"tsx\": \"^4.17.0\",\n+    \"type-fest\": \"^4.24.0\"\n+  }\n+}\n\ndiff --git a/infra/compiler/src/index.ts b/infra/compiler/src/index.ts\nnew file mode 100644\nindex 00000000000..d03441c6e2e\n--- /dev/null\n+++ b/infra/compiler/src/index.ts\n@@ -0,0 +1,227 @@\n+import fs from 'node:fs/promises'\n+import path from 'node:path'\n+import url from 'node:url'\n+import { parseArgs } from 'node:util'\n+import { build, context, type BuildOptions, type Plugin } from 'esbuild'\n+import type { PackageJson } from 'type-fest'\n+\n+import { getExternal } from './utils.js'\n+import { log, clear, generateDts, copyEJSTemplates, externalScripts } from './plugins.js'\n+import { generateTypes } from './type-generation/index.js'\n+\n+const __dirname = path.dirname(url.fileURLToPath(import.meta.url))\n+const rootDir = path.resolve(__dirname, '..', '..', '..')\n+const args = process.argv.slice(2)\n+const options = {\n+    project: {\n+        type: 'string',\n+        short: 'p',\n+        multiple: true,\n+    },\n+    watch: {\n+        type: 'boolean',\n+    },\n+    clear: {\n+        type: 'boolean'\n+    }\n+} as const\n+\n+const { values } = parseArgs({ args, options })\n+\n+/**\n+ * parse through all packages and filter based on command parameters\n+ */\n+const projects = (await fs.readdir(\n+    path.resolve(rootDir, 'packages')\n+)).filter((dir) => dir !== 'node_modules')\n+\n+const packages = (\n+    await Promise.all(\n+        projects.map(async (project) => {\n+            const pkg = await import(path.resolve(rootDir, 'packages', project, 'package.json'), { assert: { type: 'json' } })\n+            return [project, pkg.default]\n+        })\n+    ) as [string, PackageJson][]\n+).filter(([packageDir, pkg]) => (\n+    !values.project ||\n+    (pkg.name && values.project.includes(pkg.name)) ||\n+    values.project.includes(packageDir)\n+))\n+\n+/**\n+ * plugins for the ESM build\n+ */\n+const esmPlugins: Record<string, Plugin[]> = {\n+    '@wdio/protocols': [generateTypes()],\n+    '@wdio/cli': [copyEJSTemplates()],\n+    'webdriverio': [externalScripts()]\n+}\n+/**\n+ * plugins for the cjs build\n+ */\n+const cjsPlugins: Record<string, Plugin[]> = {}\n+/**\n+ * plugins for the browser build\n+ */\n+const browserPlugins: Record<string, Plugin[]> = {}\n+\n+/**\n+ * compose Esbuild configs\n+ */\n+const configs = packages.map(([packageDir, pkg]) => {\n+    const packageBuilds: BuildOptions[] = []\n+    const exports = (pkg.exports || {}) as PackageJson.ExportConditions\n+\n+    if (!pkg.name) {\n+        throw new Error(`Package in ${packageDir} does not have a \"name\" field, which is required to build the package`)\n+    }\n+\n+    /**\n+     * in cases where we don't have an exports field but a main field\n+     * we assume that the main field is the main entry point of the package\n+     */\n+    if (!pkg.exports && pkg.main) {\n+        exports['.'] = {\n+            require: pkg.main\n+        }\n+    }\n+\n+    const exportedModules = Object.entries(exports).filter?.(([, exp]) => typeof exp === 'object' && !Array.isArray(exp)) as [string, PackageJson.ExportConditions][]\n+    for (const [target, exp] of exportedModules) {\n+        const absWorkingDir = path.resolve(rootDir, 'packages', packageDir)\n+        const source = (exp.source as string | undefined) || './src/index.ts'\n+        const baseConfig: BuildOptions = {\n+            sourceRoot: absWorkingDir,\n+            tsconfig: path.resolve(absWorkingDir, 'tsconfig.json'),\n+            sourcemap: process.env.NODE_ENV !== 'production',\n+            external: getExternal(pkg),\n+            target: 'node18',\n+            bundle: true,\n+            absWorkingDir\n+        }\n+\n+        if (typeof exp.import === 'string') {\n+            const esmSource = (exp.importSource as string | undefined) || source\n+            const esmBuild: BuildOptions = {\n+                ...baseConfig,\n+                entryPoints: [path.resolve(absWorkingDir, esmSource)],\n+                platform: 'node',\n+                format: 'esm',\n+                plugins: []\n+            }\n+\n+            if (exp.import.endsWith('*')) {\n+                esmBuild.outdir = path.resolve(absWorkingDir, path.dirname(exp.import))\n+            } else {\n+                esmBuild.outfile = path.resolve(absWorkingDir, exp.import)\n+            }\n+\n+            esmBuild.plugins?.push(\n+                log(esmBuild, pkg),\n+                ...(esmPlugins[pkg.name] || [])\n+            )\n+\n+            /**\n+             * if types field is a string, generate TypeScript declarations\n+             */\n+            if (typeof exp.types === 'string' && target === '.') {\n+                esmBuild.plugins?.push(generateDts(absWorkingDir))\n+            }\n+\n+            if (values.clear) {\n+                esmBuild.plugins?.push(clear(esmBuild))\n+            }\n+\n+            packageBuilds.push(esmBuild)\n+        }\n+\n+        if (typeof exp.require === 'string') {\n+            const requireSource = (exp.requireSource as string | undefined) || source\n+            const cjsBuild: BuildOptions = {\n+                ...baseConfig,\n+                external: getExternal(pkg),\n+                entryPoints: [path.resolve(absWorkingDir, requireSource)],\n+                platform: 'node',\n+                format: 'cjs',\n+                plugins: [],\n+                banner: {\n+                    'js': 'const __importMetaUrl = require(\\'url\\').pathToFileURL(__filename).href;'\n+                },\n+                define: {\n+                    'import.meta.url': '__importMetaUrl',\n+                    'import.meta.resolve': 'require.resolve'\n+                }\n+            }\n+\n+            if (exp.require.endsWith('*')) {\n+                cjsBuild.outdir = path.resolve(absWorkingDir, path.dirname(exp.require))\n+            } else {\n+                cjsBuild.outfile = path.resolve(absWorkingDir, exp.require)\n+            }\n+\n+            /**\n+             * if we define an `index.cts` as require source it is suppose to be a small wrapper\n+             * around the main source file that exports the main source file within the CJS context,\n+             * hence we need to mark this export as external\n+             */\n+            if (requireSource.endsWith('.cts')) {\n+                cjsBuild.external?.push('./index.js')\n+            }\n+\n+            cjsBuild.plugins?.push(\n+                log(cjsBuild, pkg),\n+                ...(cjsPlugins[pkg.name] || [])\n+            )\n+            packageBuilds.push(cjsBuild)\n+        }\n+\n+        if (typeof exp.browser === 'string') {\n+            const browserSource = (exp.browserSource as string | undefined) || source\n+            const browserBuild: BuildOptions = {\n+                ...baseConfig,\n+                entryPoints: [path.resolve(absWorkingDir, browserSource)],\n+                platform: 'browser',\n+                format: 'esm',\n+                target: ['es2021', 'chrome90', 'edge90', 'firefox90', 'safari12'],\n+                plugins: [],\n+                supported: {\n+                    'top-level-await': true //browsers can handle top-level-await features\n+                }\n+            }\n+\n+            if (exp.browser.endsWith('*')) {\n+                browserBuild.outdir = path.resolve(absWorkingDir, path.dirname(exp.browser))\n+            } else {\n+                browserBuild.outfile = path.resolve(absWorkingDir, exp.browser)\n+            }\n+\n+            browserBuild.plugins?.push(\n+                log(browserBuild, pkg),\n+                ...(browserPlugins[pkg.name] || [])\n+            )\n+\n+            packageBuilds.push(browserBuild)\n+        }\n+    }\n+    return packageBuilds\n+}).flat()\n+\n+if (configs.length === 0) {\n+    throw new Error(`No packages found to build using params: ${JSON.stringify(values)}`)\n+}\n+\n+/**\n+ * build packages\n+ */\n+await Promise.all(configs.map(async (config) => {\n+    if (values.watch) {\n+        const ctx = await context(config)\n+        return ctx.watch()\n+    }\n+\n+    const result = await build(config)\n+    if (result.errors.length > 0) {\n+        console.error(result.errors)\n+        throw new Error('Failed to build packages')\n+    }\n+}))\n\ndiff --git a/infra/compiler/src/plugins.ts b/infra/compiler/src/plugins.ts\nnew file mode 100644\nindex 00000000000..cca9dcb41b1\n--- /dev/null\n+++ b/infra/compiler/src/plugins.ts\n@@ -0,0 +1,116 @@\n+import cp from 'node:child_process'\n+import url from 'node:url'\n+import path from 'node:path'\n+import { rimraf } from 'rimraf'\n+import { copy } from 'esbuild-plugin-copy'\n+import type { Plugin, BuildOptions } from 'esbuild'\n+import type { PackageJson } from 'type-fest'\n+\n+const __dirname = path.dirname(url.fileURLToPath(import.meta.url))\n+\n+/**\n+ * little logger plugin for Esbuild\n+ * @param {BuildOptions} options  Esbuild options\n+ * @param {PackageJson} pkg package.json of given project as object\n+ * @returns\n+ */\n+export function log(options: BuildOptions, pkg: PackageJson): Plugin {\n+    const srcFile = path.relative(options.absWorkingDir || process.cwd(), (options.entryPoints as string[])[0])\n+    const outFile = path.relative(options.absWorkingDir || process.cwd(), options.outfile || options.outdir as string)\n+    return {\n+        name: 'LogPlugin',\n+        setup(build) {\n+            build.onStart(() => {\n+                console.log(`🏗️ Building \"${pkg.name}\" for ${options.format}: ${srcFile} → ${outFile}`)\n+            })\n+            build.onEnd((result) => {\n+                if (result.errors.length === 0) {\n+                    console.log(`✅ Success building \"${pkg.name}\" for ${options.format}: ${srcFile} → ${outFile}`)\n+                }\n+            })\n+        }\n+    }\n+}\n+\n+/**\n+ * clear previously generated build files\n+ * @param {string} outfile directory that Esbuild usually compiles to\n+ * @returns an Esbuild plugin\n+ */\n+export function clear(config: BuildOptions): Plugin {\n+    const rimrafOptions = { maxRetries: 1 }\n+    const outfile = config.outfile || config.outdir\n+    if (!outfile) {\n+        throw new Error('No outfile defined')\n+    }\n+\n+    return {\n+        name: 'ClearPlugin',\n+        async setup() {\n+            await Promise.all([\n+                rimraf(path.dirname(outfile), rimrafOptions),\n+            ])\n+        }\n+    }\n+}\n+\n+/**\n+ * generate type definition files (d.ts) for working dir\n+ * @param {string} absWorkingDir absolute path to the working directory\n+ * @returns an Esbuild plugin\n+ */\n+export function generateDts(absWorkingDir: string): Plugin {\n+    return {\n+        name: 'TypeScriptDeclarationsPlugin',\n+        setup(build) {\n+            build.onEnd((result) => {\n+                if (result.errors.length > 0) {\n+                    return\n+                }\n+\n+                try {\n+                    cp.execSync('tsc --emitDeclarationOnly', {\n+                        cwd: absWorkingDir,\n+                        stdio: 'inherit'\n+                    })\n+                } catch {\n+                    console.log('Failed to generate TypeScript declarations')\n+                }\n+            })\n+        }\n+    }\n+}\n+\n+/**\n+ * Plugin to copy EJS templates from the `@wdio/cli` package to build directory\n+ * @returns {Plugin} an Esbuild plugin\n+ */\n+export function copyEJSTemplates () {\n+    const cliPackage = path.resolve(__dirname, '..', '..', 'packages', 'wdio-cli')\n+    return copy({\n+        resolveFrom: cliPackage,\n+        assets: [{\n+            from: [path.resolve(cliPackage, 'src', 'templates', '**', '*.ejs')],\n+            to: path.resolve(cliPackage, 'build', 'templates')\n+        }]\n+    })\n+}\n+\n+/**\n+ * Plugin to mark all WebdriverIO scripts in `packages/webdriverio/src/scripts` as external\n+ */\n+export function externalScripts(): Plugin {\n+    const name = 'ExternalScripts'\n+    return {\n+        name,\n+        setup(build) {\n+            build.onResolve({ filter: /\\/scripts\\// }, (args) => {\n+                return {\n+                    path: args.path.replace('../../', './'),\n+                    external: true,\n+                    pluginName: name\n+                }\n+            })\n+        }\n+    }\n+}\n\ndiff --git a/scripts/type-generation/constants.ts b/infra/compiler/src/type-generation/constants.ts\nsimilarity index 100%\nrename from scripts/type-generation/constants.ts\nrename to infra/compiler/src/type-generation/constants.ts\n\ndiff --git a/infra/compiler/src/type-generation/index.ts b/infra/compiler/src/type-generation/index.ts\nnew file mode 100644\nindex 00000000000..6b6310a2337\n--- /dev/null\n+++ b/infra/compiler/src/type-generation/index.ts\n@@ -0,0 +1,130 @@\n+#!/usr/bin/env node\n+\n+import fs from 'node:fs'\n+import url from 'node:url'\n+import path from 'node:path'\n+import camelCase from 'camelcase'\n+import { type Plugin } from 'esbuild'\n+\n+import { paramTypeMap, returnTypeMap } from './constants.js'\n+import { PROTOCOLS } from '../../../../scripts/protocols.js'\n+\n+const __dirname = path.dirname(url.fileURLToPath(import.meta.url))\n+const TYPINGS_PATH = path.join(__dirname, '..', '..', '..', '..', 'packages', 'wdio-protocols', 'src', 'commands')\n+\n+const INDENTATION = ' '.repeat(4)\n+const EXAMPLE_INDENTATION = `${INDENTATION} * `\n+const DEPRECATED_INDENTATION = `\\n${INDENTATION} * @deprecated`\n+const jsDocTemplate = `\n+${INDENTATION}/**\n+${INDENTATION} * {PROTOCOL} Protocol Command\n+${INDENTATION} *\n+${INDENTATION} * {DESCRIPTION}\n+${INDENTATION} * @ref {REF}\n+${INDENTATION} *{EXAMPLE}\n+${INDENTATION} */`\n+\n+export function generateTypes (): Plugin {\n+    return {\n+        name: 'generate-types',\n+        setup (build) {\n+            build.onStart(() => generate())\n+        }\n+    }\n+}\n+\n+function generate () {\n+    /**\n+     * create directory if not existing\n+     */\n+    if (!fs.existsSync(TYPINGS_PATH)) {\n+        fs.mkdirSync(TYPINGS_PATH)\n+    }\n+\n+    for (const [protocolName, definition] of Object.entries(PROTOCOLS)) {\n+        if (protocolName === 'webdriverBidi') {\n+            continue\n+        }\n+        const interfaceName = protocolName.slice(0, 1).toUpperCase() + protocolName.slice(1)\n+        const customTypes = new Set()\n+        const lines = ['']\n+\n+        lines.push(`// ${protocolName} types`)\n+        lines.push(`export default interface ${interfaceName}Commands {`)\n+\n+        for (const methods of Object.values(definition)) {\n+            for (const description of Object.values(methods)) {\n+                const { command, parameters = [], variables = [], returns, ref, deprecated, examples } = description\n+                if (!ref) {\n+                    throw new Error(`missing ref for command ${command} in ${protocolName}`)\n+                }\n+                const vars = variables\n+                    // sessionId is handled by WebdriverIO for all protocol requests\n+                    .filter((v) => v.name !== 'sessionId')\n+                    // url params are always type of string\n+                    .map((v) => `${v.name}: string`)\n+                const params = parameters.map((p, idx) => {\n+                    const hasCustomType = (\n+                        paramTypeMap[command as keyof typeof paramTypeMap] &&\n+                        paramTypeMap[command as keyof typeof paramTypeMap][idx] &&\n+                        paramTypeMap[command as keyof typeof paramTypeMap][idx].name === p.name\n+                    )\n+                    const paramType = hasCustomType\n+                        ? paramTypeMap[command as keyof typeof paramTypeMap][idx].type\n+                        : p.type.toLowerCase()\n+                    if (hasCustomType && Boolean(paramTypeMap[command as keyof typeof paramTypeMap][idx].requiresImport)) {\n+                        customTypes.add(paramType)\n+                    }\n+                    return `${camelCase(p.name)}${p.required === false ? '?' : ''}: ${paramType}`\n+                })\n+                const varsAndParams = vars.concat(params)\n+                let returnValue = returns ? returns.type.toLowerCase() : 'void'\n+                returnValue = returnValue === '*' ? 'any' : returnValue\n+                if (returnTypeMap[command as keyof typeof returnTypeMap]) {\n+                    returnValue = returnTypeMap[command as keyof typeof returnTypeMap]\n+                    customTypes.add(returnTypeMap[command as keyof typeof returnTypeMap].replace('[]', ''))\n+                }\n+                if (returnValue === 'object') {\n+                    returnValue = 'ProtocolCommandResponse'\n+                    customTypes.add(returnValue)\n+                }\n+\n+                const jsDoc = jsDocTemplate\n+                    .replace('{PROTOCOL}', interfaceName)\n+                    .replace('{DESCRIPTION}', description.description || 'No description available, please see reference link.')\n+                    .replace('{EXAMPLE}', (\n+                        (examples || [])\n+                            .map((example) => (\n+                                `\\n${EXAMPLE_INDENTATION}@example\\n` +\n+                                `${EXAMPLE_INDENTATION}\\`\\`\\`js\\n` +\n+                                EXAMPLE_INDENTATION +\n+                                    `${example.map((l, i) => (i === 0\n+                                        ? `${l}`\n+                                        : `${EXAMPLE_INDENTATION}${l.replace(/(\\/\\*\\*|\\s\\*\\s|\\s\\*\\/)/, '// ')}`.trimEnd())\n+                                    ).join('\\n')}\\n` +\n+                                `${EXAMPLE_INDENTATION}` + '```'\n+                            ))\n+                            .join(`\\n${EXAMPLE_INDENTATION}`.trim())\n+                    )\n+                    )\n+                    // Conditionally adds the '@deprecated' tag next to '{REF}' if 'deprecated' value is passed, otherwise leaves it unchanged.\n+                    .replace('{REF}', deprecated ? `{REF}${DEPRECATED_INDENTATION} ${deprecated}` : '{REF}')\n+                    .replace('{REF}', ref)\n+                lines.push(jsDoc)\n+                lines.push(`${INDENTATION}${command}(${varsAndParams.join(', ')}): Promise<${returnValue}>;`)\n+            }\n+        }\n+\n+        /**\n+         * import missing protocol types\n+         */\n+        if (customTypes.size) {\n+            lines.unshift(`import type { ${[...customTypes].join(', ')} } from '../types.js'`)\n+        }\n+\n+        lines.push('}')\n+\n+        fs.writeFileSync(path.join(TYPINGS_PATH, `${protocolName}.ts`), lines.join('\\n'), 'utf8')\n+        console.log(`  🧩 Generated typings file for ${protocolName}`)\n+    }\n+}\n\ndiff --git a/infra/compiler/src/utils.ts b/infra/compiler/src/utils.ts\nnew file mode 100644\nindex 00000000000..21cb354062a\n--- /dev/null\n+++ b/infra/compiler/src/utils.ts\n@@ -0,0 +1,13 @@\n+import { builtinModules } from 'node:module'\n+import type { PackageJson } from 'type-fest'\n+\n+export function getExternal(pkg: PackageJson) {\n+    return [\n+        'virtual:*',\n+        ...builtinModules,\n+        ...builtinModules.map((mod) => `node:${mod}`),\n+        ...Object.keys(pkg.dependencies || {}),\n+        ...Object.keys(pkg.peerDependencies || {}),\n+        ...Object.keys(pkg.optionalDependencies || {}),\n+    ]\n+}\n\ndiff --git a/package.json b/package.json\nindex 84733a1dc29..bd758b5ef18 100644\n--- a/package.json\n+++ b/package.json\n@@ -6,7 +6,7 @@\n   \"scripts\": {\n     \"create\": \"tsx ./scripts/generateSubPackage.ts\",\n     \"backport\": \"tsx ./scripts/backport.ts\",\n-    \"build\": \"run-s clean:build generate compile copy\",\n+    \"build\": \"run-s clean:build generate compile:all\",\n     \"changelog\": \"tsx ./scripts/changelog.ts\",\n     \"ci\": \"run-s setup test test:e2e\",\n     \"clean\": \"run-p clean:*\",\n@@ -18,11 +18,13 @@\n     \"clean:cache\": \"rimraf --glob .eslintcache\",\n     \"clean:protocols\": \"rimraf --glob packages/wdio-protocols/src/commands\",\n     \"clean:cddl\": \"rimraf --glob scripts/bidi/cddl\",\n-    \"compile\": \"tsx ./scripts/build.ts\",\n-    \"copy\": \"cd packages/wdio-cli && pnpm copy && cd ../../\",\n+    \"compile\": \"pnpm -r --filter=@wdio/compiler run build\",\n+    \"compile:all\": \"run-s compile:all:*\",\n+    \"compile:all:core\": \"pnpm -r --filter=@wdio/compiler run build -p @wdio/logger -p @wdio/types -p @wdio/globals -p @wdio/protocols -p @wdio/repl\",\n+    \"compile:all:main\": \"pnpm -r --filter=@wdio/compiler run build -p @wdio/utils -p @wdio/reporter -p @wdio/config -p webdriver -p webdriverio\",\n+    \"compile:all:all\": \"pnpm -r --filter=@wdio/compiler run build\",\n     \"generate\": \"run-s generate:*\",\n     \"generate:bidi\": \"tsx ./scripts/bidi/index.ts\",\n-    \"generate:typings\": \"tsx ./scripts/type-generation/generate-all-typings.ts\",\n     \"link\": \"tsx ./scripts/link.ts\",\n     \"pushReleaseTag\": \"tsx ./scripts/pushTags.ts\",\n     \"setup\": \"run-s clean link build\",\n@@ -53,7 +55,7 @@\n     \"test:e2e:standalone\": \"vitest --config ./e2e/vitest.config.ts --run\",\n     \"test:e2e:webdriver\": \"node ./packages/wdio-cli/bin/wdio.js ./e2e/wdio/wdio.local.conf.ts\",\n     \"test:e2e:cloud\": \"tsx ./packages/wdio-cli/bin/wdio.js ./e2e/wdio/wdio.sauce.conf.ts\",\n-    \"watch\": \"tsx ./scripts/build.ts --watch\",\n+    \"dev\": \"pnpm -r --filter=@wdio/compiler run build --watch\",\n     \"watch:docs\": \"pnpm docs:generate && cd website && npm i && npm start\",\n     \"version\": \"pnpm changelog && git add CHANGELOG.md\",\n     \"postinstall\": \"run-s postinstall:*\",\n\ndiff --git a/packages/eslint-plugin-wdio/cjs/package.json b/packages/eslint-plugin-wdio/cjs/package.json\ndeleted file mode 100644\nindex 23ab478e2df..00000000000\n--- a/packages/eslint-plugin-wdio/cjs/package.json\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-{\n-  \"name\": \"eslint-plugin-wdio-cjs\",\n-  \"type\": \"commonjs\",\n-  \"private\": true\n-}\n\ndiff --git a/packages/eslint-plugin-wdio/package.json b/packages/eslint-plugin-wdio/package.json\nindex b5455bab19b..fad0d5a2a7d 100644\n--- a/packages/eslint-plugin-wdio/package.json\n+++ b/packages/eslint-plugin-wdio/package.json\n@@ -5,19 +5,17 @@\n   \"author\": \"Christian Bromann <mail@bromann.dev>\",\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/eslint-plugin-wdio\",\n   \"license\": \"MIT\",\n-  \"main\": \"./cjs/index.js\",\n+  \"main\": \"./build/index.cjs\",\n   \"module\": \"./build/index.js\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \"import\": {\n+    \".\": {\n       \"types\": \"./build/index.d.ts\",\n-      \"default\": \"./build/index.js\"\n-    },\n-    \"require\": {\n-      \"types\": \"./build/index.d.ts\",\n-      \"default\": \"./cjs/index.js\"\n+      \"import\": \"./build/index.js\",\n+      \"require\": \"./build/index.cjs\"\n     }\n   },\n+  \"type\": \"module\",\n   \"typeScriptVersion\": \"3.8.3\",\n   \"engines\": {\n     \"node\": \">=18\"\n\ndiff --git a/packages/eslint-plugin-wdio/src/index.ts b/packages/eslint-plugin-wdio/src/index.ts\nindex 825f843a98c..fa428c5e390 100644\n--- a/packages/eslint-plugin-wdio/src/index.ts\n+++ b/packages/eslint-plugin-wdio/src/index.ts\n@@ -44,7 +44,7 @@ const flatConfig = {\n     },\n }\n \n-export = {\n+export default {\n     ...index,\n     configs: {\n         'flat/recommended': flatConfig,\n\ndiff --git a/packages/eslint-plugin-wdio/tsconfig.cjs.json b/packages/eslint-plugin-wdio/tsconfig.cjs.json\ndeleted file mode 100644\nindex 7d3411ff77d..00000000000\n--- a/packages/eslint-plugin-wdio/tsconfig.cjs.json\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-{\n-  \"extends\": \"./tsconfig.prod.json\",\n-  \"compilerOptions\": {\n-    \"module\": \"CommonJS\",\n-    \"moduleResolution\": \"Node\",\n-    \"outDir\": \"./cjs\",\n-    \"declaration\": false,\n-    \"declarationMap\": false\n-  }\n-}\n\ndiff --git a/packages/eslint-plugin-wdio/tsconfig.prod.json b/packages/eslint-plugin-wdio/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/eslint-plugin-wdio/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-allure-reporter/cjs/package.json b/packages/wdio-allure-reporter/cjs/package.json\ndeleted file mode 100644\nindex 577663efa07..00000000000\n--- a/packages/wdio-allure-reporter/cjs/package.json\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-{\n-  \"name\": \"@wdio/allure-reporter-cjs\",\n-  \"type\": \"commonjs\",\n-  \"private\": true\n-}\n\ndiff --git a/packages/wdio-allure-reporter/package.json b/packages/wdio-allure-reporter/package.json\nindex 7c90e866b05..5263f2a76a6 100644\n--- a/packages/wdio-allure-reporter/package.json\n+++ b/packages/wdio-allure-reporter/package.json\n@@ -24,15 +24,12 @@\n   \"module\": \"./build/index.js\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": [\n-      {\n-        \"types\": \"./build/index.d.ts\",\n-        \"import\": \"./build/index.js\",\n-        \"require\": \"./cjs/common/api.js\"\n-      },\n-      \"./cjs/common/api.js\"\n-    ],\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"types\": \"./build/index.d.ts\",\n+      \"import\": \"./build/index.js\",\n+      \"requireSource\": \"./src/common/api.ts\",\n+      \"require\": \"./build/index.cjs\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"engines\": {\n\ndiff --git a/packages/wdio-allure-reporter/tsconfig.cjs.json b/packages/wdio-allure-reporter/tsconfig.cjs.json\ndeleted file mode 100644\nindex 177d36c6616..00000000000\n--- a/packages/wdio-allure-reporter/tsconfig.cjs.json\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-{\n-  \"extends\": \"./tsconfig.prod.json\",\n-  \"compilerOptions\": {\n-    \"module\": \"CommonJS\",\n-    \"moduleResolution\": \"Node\",\n-    \"outDir\": \"./cjs\",\n-    \"declaration\": false,\n-    \"declarationMap\": false\n-  },\n-  \"include\": [\n-    \"src/common\",\n-    \"src/constants\",\n-  ]\n-}\n\ndiff --git a/packages/wdio-allure-reporter/tsconfig.prod.json b/packages/wdio-allure-reporter/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-allure-reporter/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-appium-service/package.json b/packages/wdio-appium-service/package.json\nindex beb3dc74e42..2fca00cf1ab 100644\n--- a/packages/wdio-appium-service/package.json\n+++ b/packages/wdio-appium-service/package.json\n@@ -28,8 +28,10 @@\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"import\": \"./build/index.js\",\n+      \"types\": \"./build/index.d.ts\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n\ndiff --git a/packages/wdio-appium-service/tsconfig.prod.json b/packages/wdio-appium-service/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-appium-service/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-browser-runner/package.json b/packages/wdio-browser-runner/package.json\nindex b3b643b5a87..870e2895ead 100644\n--- a/packages/wdio-browser-runner/package.json\n+++ b/packages/wdio-browser-runner/package.json\n@@ -25,11 +25,39 @@\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\",\n+    \".\": {\n+      \"types\": \"./build/index.d.ts\",\n+      \"import\": \"./build/index.js\"\n+    },\n     \"./stencil\": {\n+      \"importSource\": \"./src/browser/integrations/stencil.ts\",\n       \"import\": \"./build/browser/integrations/stencil.js\",\n-      \"types\": \"./stencil/index.d.ts\"\n+      \"types\": \"./build/browser/integrations/stencil.d.ts\"\n+    },\n+    \"./driver\": {\n+      \"browserSource\": \"./src/browser/driver.ts\",\n+      \"browser\": \"./build/browser/driver.js\",\n+      \"types\": \"./build/browser/driver.d.ts\"\n+    },\n+    \"./mock\": {\n+      \"browserSource\": \"./src/browser/mock.ts\",\n+      \"browser\": \"./build/browser/mock.js\",\n+      \"types\": \"./build/browser/mock.d.ts\"\n+    },\n+    \"./setup\": {\n+      \"browserSource\": \"./src/browser/setup.ts\",\n+      \"browser\": \"./build/browser/setup.js\",\n+      \"types\": \"./build/browser/setup.d.ts\"\n+    },\n+    \"./spy\": {\n+      \"browserSource\": \"./src/browser/spy.ts\",\n+      \"browser\": \"./build/browser/spy.js\",\n+      \"types\": \"./build/browser/spy.d.ts\"\n+    },\n+    \"./expect\": {\n+      \"browserSource\": \"./src/browser/expect.ts\",\n+      \"browser\": \"./build/browser/expect.js\",\n+      \"types\": \"./build/browser/expect.d.ts\"\n     }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n@@ -65,16 +93,18 @@\n     \"webdriver\": \"workspace:*\",\n     \"webdriverio\": \"workspace:*\"\n   },\n-  \"scripts\": {\n-    \"prepare\": \"rimraf node_modules/@wdio/config node_modules/@wdio/repl node_modules/@wdio/utils\"\n-  },\n-  \"publishConfig\": {\n-    \"access\": \"public\"\n-  },\n   \"devDependencies\": {\n     \"@types/istanbul-lib-coverage\": \"^2.0.6\",\n     \"@types/istanbul-lib-report\": \"^3.0.3\",\n     \"@types/istanbul-reports\": \"^3.0.4\",\n     \"esbuild\": \"^0.21.3\"\n+  },\n+  \"optionalDependencies\": {\n+    \"@nuxt/kit\": \"^3.12.4\",\n+    \"@stencil/core\": \"^4.20.0\",\n+    \"unimport\": \"^3.10.0\"\n+  },\n+  \"publishConfig\": {\n+    \"access\": \"public\"\n   }\n }\n\ndiff --git a/packages/wdio-browser-runner/src/browser/mock.ts b/packages/wdio-browser-runner/src/browser/mock.ts\nindex 59e0e999b0c..23549404da4 100644\n--- a/packages/wdio-browser-runner/src/browser/mock.ts\n+++ b/packages/wdio-browser-runner/src/browser/mock.ts\n@@ -31,4 +31,5 @@ export const type = 'browser'\n export const sync = () => {}\n export const locateChrome = () => {}\n export const locateFirefox = () => {}\n+export const locateApp = () => {}\n export default () => {}\n\ndiff --git a/packages/wdio-browser-runner/src/vite/frameworks/stencil.ts b/packages/wdio-browser-runner/src/vite/frameworks/stencil.ts\nindex d65496a985d..b296536f089 100644\n--- a/packages/wdio-browser-runner/src/vite/frameworks/stencil.ts\n+++ b/packages/wdio-browser-runner/src/vite/frameworks/stencil.ts\n@@ -47,7 +47,7 @@ export async function optimizeForStencil(rootDir: string) {\n \n async function stencilVitePlugin(rootDir: string): Promise<Plugin> {\n     const { transpileSync, ts } = await import('@stencil/core/compiler/stencil.js')\n-    const stencilHelperPath = path.resolve(__dirname, '..', '..', 'browser', 'integrations', 'stencil.js')\n+    const stencilHelperPath = path.resolve(__dirname, 'browser', 'integrations', 'stencil.js')\n     return {\n         name: 'wdio-stencil',\n         enforce: 'pre',\n\ndiff --git a/packages/wdio-browser-runner/src/vite/utils.ts b/packages/wdio-browser-runner/src/vite/utils.ts\nindex 6cd8133eb30..f1b6f813be1 100644\n--- a/packages/wdio-browser-runner/src/vite/utils.ts\n+++ b/packages/wdio-browser-runner/src/vite/utils.ts\n@@ -26,32 +26,6 @@ export async function getTemplate(options: WebdriverIO.BrowserRunnerOptions, env\n         delete env.config.runner\n     }\n \n-    let vueDeps = ''\n-    if (options.preset === 'vue') {\n-        try {\n-            const vueDir = path.dirname(url.fileURLToPath(await resolve('vue', `${rootFileUrl}/node_modules`)))\n-            const vueScript = (await fs.readFile(path.join(vueDir, 'dist', 'vue.global.prod.js'), 'utf-8')).toString()\n-            vueDeps += /*html*/`\n-            <script type=\"module\">\n-                ${vueScript}\n-                window.Vue = Vue\n-            </script>`\n-            const vueCompilerDir = path.dirname(url.fileURLToPath(await resolve('@vue/compiler-dom', `${rootFileUrl}/node_modules`)))\n-            const vueCompilerScript = (await fs.readFile(path.join(vueCompilerDir, 'dist', 'compiler-dom.global.prod.js'))).toString()\n-            vueDeps += /*html*/`\n-            <script type=\"module\">\n-                ${vueCompilerScript}\n-                window.VueCompilerDOM = VueCompilerDOM\n-            </script>`\n-        } catch (err: any) {\n-            throw new Error(\n-                `Fail to set-up Vue environment: ${err.message}\\n\\n` +\n-                'Make sure you have \"vue\" and \"@vue/compiler-dom\" installed as dependencies!\\n' +\n-                `Error: ${err.stack}`\n-            )\n-        }\n-    }\n-\n     let sourceMapScript = ''\n     let sourceMapSetupCommand = ''\n     try {\n@@ -141,7 +115,6 @@ export async function getTemplate(options: WebdriverIO.BrowserRunnerOptions, env\n                     margin: 0;\n                 }\n             </style>\n-            ${vueDeps}\n         </head>\n         <body>\n             <mocha-framework spec=\"${spec}\" ${isHeadless ? 'style=\"display: none\"' : ''}></mocha-framework>\n\ndiff --git a/packages/wdio-browser-runner/tsconfig.json b/packages/wdio-browser-runner/tsconfig.json\nindex 2eaa0a1f2a3..b7296acea86 100644\n--- a/packages/wdio-browser-runner/tsconfig.json\n+++ b/packages/wdio-browser-runner/tsconfig.json\n@@ -3,8 +3,7 @@\n   \"compilerOptions\": {\n     \"baseUrl\": \".\",\n     \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\",\n-    \"types\": [\"@wdio/globals/types\"]\n+    \"rootDir\": \"./src\"\n   },\n   \"include\": [\n     \"src/**/*\",\n\ndiff --git a/packages/wdio-browser-runner/tsconfig.prod.json b/packages/wdio-browser-runner/tsconfig.prod.json\ndeleted file mode 100644\nindex 4887c54a93d..00000000000\n--- a/packages/wdio-browser-runner/tsconfig.prod.json\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\",\n-    \"types\": [\"@wdio/globals/types\"]\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\",\n-    \"../wdio-globals/types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-browserstack-service/package.json b/packages/wdio-browserstack-service/package.json\nindex 667794b1c43..bc9de5a8dac 100644\n--- a/packages/wdio-browserstack-service/package.json\n+++ b/packages/wdio-browserstack-service/package.json\n@@ -25,8 +25,10 @@\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"types\": \"./build/index.d.ts\",\n+      \"import\": \"./build/index.js\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n\ndiff --git a/packages/wdio-browserstack-service/src/constants.ts b/packages/wdio-browserstack-service/src/constants.ts\nindex 884e5857082..3873f36df08 100644\n--- a/packages/wdio-browserstack-service/src/constants.ts\n+++ b/packages/wdio-browserstack-service/src/constants.ts\n@@ -1,7 +1,7 @@\n import type { BrowserstackConfig } from './types.js'\n-import { createRequire } from 'node:module'\n-const require = createRequire(import.meta.url)\n-const { version: bstackServiceVersion } = require('../package.json')\n+import pkg from '../package.json' assert { type: 'json' }\n+\n+const bstackServiceVersion = pkg.version\n \n export const BROWSER_DESCRIPTION = [\n     'device',\n\ndiff --git a/packages/wdio-browserstack-service/tsconfig.prod.json b/packages/wdio-browserstack-service/tsconfig.prod.json\ndeleted file mode 100644\nindex 396aa3c8f9d..00000000000\n--- a/packages/wdio-browserstack-service/tsconfig.prod.json\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\",\n-    \"types\": [\"@wdio/globals/types\"]\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-cli/package.json b/packages/wdio-cli/package.json\nindex ac13b2ae6e1..0fbeee05df0 100644\n--- a/packages/wdio-cli/package.json\n+++ b/packages/wdio-cli/package.json\n@@ -11,9 +11,6 @@\n   \"engines\": {\n     \"node\": \">=18\"\n   },\n-  \"scripts\": {\n-    \"copy\": \"copyfiles -u 1 -V \\\"src/templates/**/*\\\" ./build/\"\n-  },\n   \"repository\": {\n     \"type\": \"git\",\n     \"url\": \"git://github.com/webdriverio/webdriverio.git\",\n@@ -33,15 +30,12 @@\n   \"module\": \"./build/index.js\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": [\n-      {\n-        \"types\": \"./build/index.d.ts\",\n-        \"import\": \"./build/index.js\",\n-        \"require\": \"./build/index.cjs\"\n-      },\n-      \"./build/index.cjs\"\n-    ],\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"types\": \"./build/index.d.ts\",\n+      \"import\": \"./build/index.js\",\n+      \"requireSource\": \"./src/index.cts\",\n+      \"require\": \"./build/index.cjs\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n\ndiff --git a/packages/wdio-cli/src/commands/config.ts b/packages/wdio-cli/src/commands/config.ts\nindex 7bdd4cca240..3932bd75db8 100644\n--- a/packages/wdio-cli/src/commands/config.ts\n+++ b/packages/wdio-cli/src/commands/config.ts\n@@ -1,4 +1,5 @@\n import fs from 'node:fs/promises'\n+import fss from 'node:fs'\n import path from 'node:path'\n \n import inquirer from 'inquirer'\n@@ -15,7 +16,13 @@ import {\n } from '../utils.js'\n import type { ConfigCommandArguments, ParsedAnswers } from '../types.js'\n \n-const hasYarnLock = await fs.access('yarn.lock').then(() => true, () => false)\n+let hasYarnLock = false\n+try {\n+    fss.accessSync('yarn.lock')\n+    hasYarnLock = true\n+} catch {\n+    hasYarnLock = false\n+}\n \n export const command = 'config'\n export const desc = 'Initialize WebdriverIO and setup configuration in your current project.'\n\ndiff --git a/packages/wdio-cli/src/commands/repl.ts b/packages/wdio-cli/src/commands/repl.ts\nindex b02c29c68d4..d27a4090827 100644\n--- a/packages/wdio-cli/src/commands/repl.ts\n+++ b/packages/wdio-cli/src/commands/repl.ts\n@@ -1,3 +1,4 @@\n+/// <reference types=\"@wdio/globals/types\" />\n import pickBy from 'lodash.pickby'\n import { remote } from 'webdriverio'\n import type { Argv, Options } from 'yargs'\n\ndiff --git a/packages/wdio-cli/src/constants.ts b/packages/wdio-cli/src/constants.ts\nindex a4325485c98..9c3ddfaf499 100644\n--- a/packages/wdio-cli/src/constants.ts\n+++ b/packages/wdio-cli/src/constants.ts\n@@ -1,6 +1,5 @@\n-import fs from 'node:fs/promises'\n+import fs from 'node:fs'\n import path from 'node:path'\n-import { createRequire } from 'node:module'\n import { HOOK_DEFINITION } from '@wdio/utils'\n import type { Options, Services, Reporters } from '@wdio/types'\n \n@@ -12,10 +11,9 @@ import {\n     detectPackageManager,\n } from './utils.js'\n import type { Questionnair } from './types.js'\n+import pkgJSON from '../package.json' with { type: 'json' }\n \n-const require = createRequire(import.meta.url)\n-export const pkg = require('../package.json')\n-\n+export const pkg = pkgJSON\n export const CLI_EPILOGUE = `Documentation: https://webdriver.io\\n@wdio/cli (v${pkg.version})`\n \n export const CONFIG_HELPER_INTRO = `\n@@ -24,6 +22,7 @@ export const CONFIG_HELPER_INTRO = `\n ===============================\n `\n \n+export const SUPPORTED_COMMANDS = ['run', 'install', 'config', 'repl']\n export const PMs = ['npm', 'yarn', 'pnpm', 'bun'] as const\n export const SUPPORTED_CONFIG_FILE_EXTENSION = ['js', 'ts', 'mjs', 'mts', 'cjs', 'cts']\n export const configHelperSuccessMessage = ({ projectRootDir, runScript, extraInfo = '' }: { projectRootDir: string, runScript: string, extraInfo: string }) => `\n@@ -229,19 +228,19 @@ function getTestingPurpose (answers: Questionnair) {\n     return convertPackageHashToObject(answers.runner).purpose as 'e2e' | 'electron' | 'component' | 'vscode' | 'macos'\n }\n \n-export const isNuxtProject = await Promise.all(\n-    [\n-        path.join(process.cwd(), 'nuxt.config.js'),\n-        path.join(process.cwd(), 'nuxt.config.ts'),\n-        path.join(process.cwd(), 'nuxt.config.mjs'),\n-        path.join(process.cwd(), 'nuxt.config.mts')\n-    ].map(\n-        (p) => fs.access(p).then(() => true, () => false)\n-    )\n-).then(\n-    (res) => res.some(Boolean),\n-    () => false\n-)\n+export const isNuxtProject = [\n+    path.join(process.cwd(), 'nuxt.config.js'),\n+    path.join(process.cwd(), 'nuxt.config.ts'),\n+    path.join(process.cwd(), 'nuxt.config.mjs'),\n+    path.join(process.cwd(), 'nuxt.config.mts')\n+].map((p) => {\n+    try {\n+        fs.accessSync(p)\n+        return true\n+    } catch {\n+        return false\n+    }\n+}).some(Boolean)\n \n function selectDefaultService (serviceNames: string | string[]) {\n     serviceNames = Array.isArray(serviceNames) ? serviceNames : [serviceNames]\n\ndiff --git a/packages/wdio-cli/src/index.cts b/packages/wdio-cli/src/index.cts\nindex 9f2ce1b5daa..ff9ad569c3a 100644\n--- a/packages/wdio-cli/src/index.cts\n+++ b/packages/wdio-cli/src/index.cts\n@@ -6,8 +6,8 @@ class Launcher {\n         args: any = {},\n         isWatchMode = false\n     ) {\n-        this.#esmLauncher = import('./launcher.js').then(\n-            ({ default: Launcher }) => new Launcher(configFilePath, args, isWatchMode))\n+        this.#esmLauncher = import('./index.js').then(\n+            ({ Launcher }) => new Launcher(configFilePath, args, isWatchMode))\n     }\n \n     /**\n\ndiff --git a/packages/wdio-cli/src/run.ts b/packages/wdio-cli/src/run.ts\nindex 55b5c51dfaa..3a19e39a139 100644\n--- a/packages/wdio-cli/src/run.ts\n+++ b/packages/wdio-cli/src/run.ts\n@@ -1,5 +1,3 @@\n-import fs from 'node:fs'\n-import url from 'node:url'\n import path from 'node:path'\n \n import yargs from 'yargs'\n@@ -7,11 +5,9 @@ import { hideBin } from 'yargs/helpers'\n \n import { commands } from './commands/index.js'\n import { handler, cmdArgs } from './commands/run.js'\n-import { CLI_EPILOGUE, pkg } from './constants.js'\n+import { CLI_EPILOGUE, pkg, SUPPORTED_COMMANDS } from './constants.js'\n import type { RunCommandArguments } from './types.js'\n \n-const __dirname = path.dirname(url.fileURLToPath(import.meta.url))\n-\n const DEFAULT_CONFIG_FILENAME = 'wdio.conf.js'\n const DESCRIPTION = [\n     'The `wdio` command allows you run and manage your WebdriverIO test suite.',\n@@ -26,7 +22,6 @@ const DESCRIPTION = [\n ]\n \n export default async function run() {\n-    const commandDir = path.join(__dirname, 'commands')\n     const argv = yargs(hideBin(process.argv))\n         .command(commands)\n         .example('wdio run wdio.conf.js --suite foobar', 'Run suite on testsuite \"foobar\"')\n@@ -58,11 +53,7 @@ export default async function run() {\n      * we don't have to check that again here.\n      */\n     const params = await argv.parse()\n-    const supportedCommands = fs\n-        .readdirSync(commandDir)\n-        .map((file) => file.slice(0, -3))\n-\n-    if (!params._ || params._.find((param: string) => supportedCommands.includes(param))) {\n+    if (!params._ || params._.find((param: string) => SUPPORTED_COMMANDS.includes(param))) {\n         return\n     }\n \n\ndiff --git a/packages/wdio-cli/src/utils.ts b/packages/wdio-cli/src/utils.ts\nindex 21ebe0d8d0e..4133dd18085 100644\n--- a/packages/wdio-cli/src/utils.ts\n+++ b/packages/wdio-cli/src/utils.ts\n@@ -328,7 +328,7 @@ export async function getCapabilities(arg: ReplCommandArguments) {\n             // multiremote\n             (requiredCaps as Capabilities.RequestedMultiremoteCapabilities)[arg.capabilities]\n         )\n-        const requiredW3CCaps = pickBy(requiredCaps, (_, key) => CAPABILITY_KEYS.includes(key) || key.includes(':'))\n+        const requiredW3CCaps = pickBy(requiredCaps, (_: never, key: string) => CAPABILITY_KEYS.includes(key) || key.includes(':'))\n         if (!Object.keys(requiredW3CCaps).length) {\n             throw Error(`No capability found in given config file with the provided capability indexed/named property: ${arg.capabilities}. Please check the capability in your wdio config file.`)\n         }\n\ndiff --git a/packages/wdio-cli/tsconfig.json b/packages/wdio-cli/tsconfig.json\nindex 0f516ae16f2..d660189bdb9 100644\n--- a/packages/wdio-cli/tsconfig.json\n+++ b/packages/wdio-cli/tsconfig.json\n@@ -3,8 +3,7 @@\n   \"compilerOptions\": {\n     \"baseUrl\": \".\",\n     \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\",\n-    \"types\": [\"@wdio/globals/types\"]\n+    \"rootDir\": \"./src\"\n   },\n   \"include\": [\n     \"src/**/*\",\n\ndiff --git a/packages/wdio-cli/tsconfig.prod.json b/packages/wdio-cli/tsconfig.prod.json\ndeleted file mode 100644\nindex bb03dcf8c21..00000000000\n--- a/packages/wdio-cli/tsconfig.prod.json\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\",\n-    \"types\": [\"@wdio/globals/types\"]\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\",\n-    \"src/cjs/package.json\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-concise-reporter/package.json b/packages/wdio-concise-reporter/package.json\nindex 94746ee0307..b65e77a4ac0 100644\n--- a/packages/wdio-concise-reporter/package.json\n+++ b/packages/wdio-concise-reporter/package.json\n@@ -24,8 +24,10 @@\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"types\": \"./build/index.d.ts\",\n+      \"import\": \"./build/index.js\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n\ndiff --git a/packages/wdio-concise-reporter/tsconfig.prod.json b/packages/wdio-concise-reporter/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-concise-reporter/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-config/package.json b/packages/wdio-config/package.json\nindex 19689e6a0aa..9d54d021aa9 100644\n--- a/packages/wdio-config/package.json\n+++ b/packages/wdio-config/package.json\n@@ -13,10 +13,10 @@\n       \"types\": \"./build/index.d.ts\"\n     },\n     \"./node\": {\n+      \"importSource\": \"./src/node/index.ts\",\n       \"import\": \"./build/node/index.js\",\n       \"types\": \"./build/node/index.d.ts\"\n-    },\n-    \"./package.json\": \"./package.json\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"engines\": {\n\ndiff --git a/packages/wdio-config/src/node/ConfigParser.ts b/packages/wdio-config/src/node/ConfigParser.ts\nindex 87a9f248960..869383560ce 100644\n--- a/packages/wdio-config/src/node/ConfigParser.ts\n+++ b/packages/wdio-config/src/node/ConfigParser.ts\n@@ -418,7 +418,7 @@ export default class ConfigParser {\n     /**\n      * return capabilities\n      */\n-    getCapabilities(i?: number) {\n+    getCapabilities(i?: number): Capabilities.TestrunnerCapabilities | Capabilities.RequestedStandaloneCapabilities {\n         if (!this.#isInitialised) {\n             throw new Error('ConfigParser was not initialized, call \"await config.initialize()\" first!')\n         }\n@@ -427,7 +427,7 @@ export default class ConfigParser {\n             return this._capabilities[i]\n         }\n \n-        return this._capabilities\n+        return this._capabilities!\n     }\n \n     /**\n\ndiff --git a/packages/wdio-config/tsconfig.prod.json b/packages/wdio-config/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-config/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-cucumber-framework/package.json b/packages/wdio-cucumber-framework/package.json\nindex 32d82b8e434..567821f5d1b 100644\n--- a/packages/wdio-cucumber-framework/package.json\n+++ b/packages/wdio-cucumber-framework/package.json\n@@ -25,15 +25,16 @@\n   \"type\": \"module\",\n   \"module\": \"./build/index.js\",\n   \"exports\": {\n-    \".\": [\n-      {\n-        \"types\": \"./build/index.d.ts\",\n-        \"import\": \"./build/index.js\",\n-        \"require\": \"./build/index.cjs\"\n-      },\n-      \"./build/index.cjs\"\n-    ],\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"types\": \"./build/index.d.ts\",\n+      \"import\": \"./build/index.js\",\n+      \"requireSource\": \"./src/index.cts\",\n+      \"require\": \"./build/index.cjs\"\n+    },\n+    \"./formatter\": {\n+      \"source\": \"./src/cucumberFormatter.ts\",\n+      \"import\": \"./build/cucumberFormatter.js\"\n+    }\n   },\n   \"types\": \"./build/index.d.ts\",\n   \"typeScriptVersion\": \"3.8.3\",\n@@ -45,6 +46,7 @@\n     \"@wdio/logger\": \"workspace:*\",\n     \"@wdio/types\": \"workspace:*\",\n     \"@wdio/utils\": \"workspace:*\",\n+    \"import-meta-resolve\": \"^4.1.0\",\n     \"glob\": \"^10.2.2\",\n     \"is-glob\": \"^4.0.0\"\n   },\n\ndiff --git a/packages/wdio-cucumber-framework/src/index.ts b/packages/wdio-cucumber-framework/src/index.ts\nindex 7a7508384e8..211416dd71f 100644\n--- a/packages/wdio-cucumber-framework/src/index.ts\n+++ b/packages/wdio-cucumber-framework/src/index.ts\n@@ -57,6 +57,7 @@ export const FILE_PROTOCOL = 'file://'\n const uuidFn = IdGenerator.uuid()\n const log = logger('@wdio/cucumber-framework')\n const require = createRequire(import.meta.url)\n+const __dirname = path.dirname(url.fileURLToPath(import.meta.url))\n \n function getResultObject(\n     world: Cucumber.ITestCaseHookParameter\n@@ -87,7 +88,7 @@ class CucumberAdapter {\n         private _reporter: EventEmitter,\n         private _eventEmitter: EventEmitter,\n         private _generateSkipTags: boolean = true,\n-        private _cucumberFormatter: string = url.pathToFileURL(path.resolve(url.fileURLToPath(import.meta.url), '..', 'cucumberFormatter.js')).href\n+        private _cucumberFormatter: string = url.pathToFileURL(path.resolve(__dirname, 'cucumberFormatter.js')).href\n     ) {\n         this._eventEmitter = new EventEmitter()\n         this._cucumberOpts = Object.assign(\n\ndiff --git a/packages/wdio-cucumber-framework/src/utils.ts b/packages/wdio-cucumber-framework/src/utils.ts\nindex 6ea3a362fb4..e17f72c9d72 100644\n--- a/packages/wdio-cucumber-framework/src/utils.ts\n+++ b/packages/wdio-cucumber-framework/src/utils.ts\n@@ -204,7 +204,7 @@ export function generateSkipTagsFromCapabilities(capabilities: Capabilities.Reso\n             const pos = splitItem.indexOf('=')\n             if (pos > 0) {\n                 try {\n-                    acc[splitItem.substring(0, pos)] = eval(\n+                    acc[splitItem.substring(0, pos)] = (0, eval)(\n                         splitItem.substring(pos + 1)\n                     )\n                 } catch (err: any) {\n\ndiff --git a/packages/wdio-cucumber-framework/tsconfig.prod.json b/packages/wdio-cucumber-framework/tsconfig.prod.json\ndeleted file mode 100644\nindex a4c7398840a..00000000000\n--- a/packages/wdio-cucumber-framework/tsconfig.prod.json\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\",\n-    \"src/cjs/package.json\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-dot-reporter/package.json b/packages/wdio-dot-reporter/package.json\nindex 5d0277ee1d5..3b2c2bb43a3 100644\n--- a/packages/wdio-dot-reporter/package.json\n+++ b/packages/wdio-dot-reporter/package.json\n@@ -23,8 +23,10 @@\n   },\n   \"type\": \"module\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"import\": \"./build/index.js\",\n+      \"types\": \"./build/index.d.ts\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n\ndiff --git a/packages/wdio-dot-reporter/tsconfig.prod.json b/packages/wdio-dot-reporter/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-dot-reporter/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-firefox-profile-service/package.json b/packages/wdio-firefox-profile-service/package.json\nindex 98e3bd4f640..ca59455451b 100644\n--- a/packages/wdio-firefox-profile-service/package.json\n+++ b/packages/wdio-firefox-profile-service/package.json\n@@ -31,8 +31,10 @@\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"import\": \"./build/index.js\",\n+      \"types\": \"./build/index.d.ts\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n\ndiff --git a/packages/wdio-firefox-profile-service/tsconfig.prod.json b/packages/wdio-firefox-profile-service/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-firefox-profile-service/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-globals/.npmignore b/packages/wdio-globals/.npmignore\nindex 366d7b4c5a1..ae0194d100f 100644\n--- a/packages/wdio-globals/.npmignore\n+++ b/packages/wdio-globals/.npmignore\n@@ -1,5 +1,4 @@\n src\n tests\n tsconfig.json\n-tsconfig.prod.json\n-tsconfig.cjs.json\n+tsconfig.prod.jsontsconfig.cjs.json\n\ndiff --git a/packages/wdio-globals/cjs/package.json b/packages/wdio-globals/cjs/package.json\ndeleted file mode 100644\nindex c71d20b989d..00000000000\n--- a/packages/wdio-globals/cjs/package.json\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-{\n-  \"name\": \"@wdio/globals-cjs\",\n-  \"type\": \"commonjs\",\n-  \"private\": true\n-}\n\ndiff --git a/packages/wdio-globals/package.json b/packages/wdio-globals/package.json\nindex efa45ef43f9..181fd2217fa 100644\n--- a/packages/wdio-globals/package.json\n+++ b/packages/wdio-globals/package.json\n@@ -5,20 +5,18 @@\n   \"author\": \"Christian Bromann <mail@bromann.dev>\",\n   \"homepage\": \"https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-globals\",\n   \"license\": \"MIT\",\n-  \"main\": \"./cjs/index.js\",\n+  \"main\": \"./build/index.cjs\",\n   \"type\": \"module\",\n   \"module\": \"./build/index.js\",\n   \"exports\": {\n-    \".\": [\n-      {\n-        \"types\": \"./build/index.d.ts\",\n-        \"import\": \"./build/index.js\",\n-        \"require\": \"./cjs/index.js\"\n-      },\n-      \"./cjs/index.js\"\n-    ],\n-    \"./types\": \"./types.d.ts\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"types\": \"./build/index.d.ts\",\n+      \"import\": \"./build/index.js\",\n+      \"require\": \"./build/index.cjs\"\n+    },\n+    \"./types\": {\n+      \"types\": \"./types.d.ts\"\n+    }\n   },\n   \"types\": \"./build/index.d.ts\",\n   \"typeScriptVersion\": \"3.8.3\",\n\ndiff --git a/packages/wdio-globals/src/index.ts b/packages/wdio-globals/src/index.ts\nindex 929908862f8..9889ad5dd3f 100644\n--- a/packages/wdio-globals/src/index.ts\n+++ b/packages/wdio-globals/src/index.ts\n@@ -5,6 +5,11 @@ type SupportedGlobals = 'browser' | 'driver' | 'multiremotebrowser' | '$' | '$$'\n declare global {\n     // eslint-disable-next-line no-var\n     var _wdioGlobals: Map<SupportedGlobals, any>\n+    namespace WebdriverIO {\n+        interface Browser {}\n+        interface Element {}\n+        interface MultiRemoteBrowser {}\n+    }\n }\n \n /**\n\ndiff --git a/packages/wdio-globals/tsconfig.cjs.json b/packages/wdio-globals/tsconfig.cjs.json\ndeleted file mode 100644\nindex 7d3411ff77d..00000000000\n--- a/packages/wdio-globals/tsconfig.cjs.json\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-{\n-  \"extends\": \"./tsconfig.prod.json\",\n-  \"compilerOptions\": {\n-    \"module\": \"CommonJS\",\n-    \"moduleResolution\": \"Node\",\n-    \"outDir\": \"./cjs\",\n-    \"declaration\": false,\n-    \"declarationMap\": false\n-  }\n-}\n\ndiff --git a/packages/wdio-globals/tsconfig.prod.json b/packages/wdio-globals/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-globals/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-jasmine-framework/package.json b/packages/wdio-jasmine-framework/package.json\nindex 2f6aeeeaa47..8106cf0ecd4 100644\n--- a/packages/wdio-jasmine-framework/package.json\n+++ b/packages/wdio-jasmine-framework/package.json\n@@ -8,8 +8,10 @@\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"import\": \"./build/index.js\",\n+      \"types\": \"./build/index.d.ts\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"engines\": {\n\ndiff --git a/packages/wdio-jasmine-framework/tsconfig.prod.json b/packages/wdio-jasmine-framework/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-jasmine-framework/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-json-reporter/package.json b/packages/wdio-json-reporter/package.json\nindex 60de087bd86..21f5dc1bc87 100644\n--- a/packages/wdio-json-reporter/package.json\n+++ b/packages/wdio-json-reporter/package.json\n@@ -25,12 +25,14 @@\n   \"type\": \"module\",\n   \"exports\": {\n     \"./mergeResults\": {\n-      \"types\": \"./build/mergeResults.d.ts\",\n+      \"source\": \"./src/mergeResults.ts\",\n       \"import\": \"./build/mergeResults.js\",\n       \"require\": \"./build/mergeResults.cjs\"\n     },\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"import\": \"./build/index.js\",\n+      \"types\": \"./build/index.d.ts\"\n+    }\n   },\n   \"types\": \"./build/index.d.ts\",\n   \"typeScriptVersion\": \"3.8.3\",\n\ndiff --git a/packages/wdio-json-reporter/src/mergeResults.cts b/packages/wdio-json-reporter/src/mergeResults.cts\ndeleted file mode 100644\nindex a1473329bbb..00000000000\n--- a/packages/wdio-json-reporter/src/mergeResults.cts\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-module.exports = async function (...args: any[]) {\n-    const mergeResults = (await import('./mergeResults.js')).default\n-    return mergeResults(...args)\n-}\n\ndiff --git a/packages/wdio-json-reporter/tsconfig.prod.json b/packages/wdio-json-reporter/tsconfig.prod.json\ndeleted file mode 100644\nindex a4c7398840a..00000000000\n--- a/packages/wdio-json-reporter/tsconfig.prod.json\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\",\n-    \"src/cjs/package.json\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-junit-reporter/package.json b/packages/wdio-junit-reporter/package.json\nindex 96f87773b04..1202a04f331 100644\n--- a/packages/wdio-junit-reporter/package.json\n+++ b/packages/wdio-junit-reporter/package.json\n@@ -26,8 +26,10 @@\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"import\": \"./build/index.js\",\n+      \"types\": \"./build/index.d.ts\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n\ndiff --git a/packages/wdio-junit-reporter/tsconfig.prod.json b/packages/wdio-junit-reporter/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-junit-reporter/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-lighthouse-service/package.json b/packages/wdio-lighthouse-service/package.json\nindex 857b69a750f..8bc157e8f45 100644\n--- a/packages/wdio-lighthouse-service/package.json\n+++ b/packages/wdio-lighthouse-service/package.json\n@@ -33,8 +33,10 @@\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"types\": \"./build/index.d.ts\",\n+      \"import\": \"./build/index.js\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n\ndiff --git a/packages/wdio-lighthouse-service/tsconfig.prod.json b/packages/wdio-lighthouse-service/tsconfig.prod.json\ndeleted file mode 100644\nindex 396aa3c8f9d..00000000000\n--- a/packages/wdio-lighthouse-service/tsconfig.prod.json\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\",\n-    \"types\": [\"@wdio/globals/types\"]\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-local-runner/package.json b/packages/wdio-local-runner/package.json\nindex 198a320e847..d4e06fd85eb 100644\n--- a/packages/wdio-local-runner/package.json\n+++ b/packages/wdio-local-runner/package.json\n@@ -25,8 +25,14 @@\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"types\": \"./build/index.d.ts\",\n+      \"import\": \"./build/index.js\"\n+    },\n+    \"./run\": {\n+      \"source\": \"./src/run.ts\",\n+      \"import\": \"./build/run.js\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n\ndiff --git a/packages/wdio-local-runner/tsconfig.prod.json b/packages/wdio-local-runner/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-local-runner/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-logger/package.json b/packages/wdio-logger/package.json\nindex f5dc44d264b..8c87ff95b9b 100644\n--- a/packages/wdio-logger/package.json\n+++ b/packages/wdio-logger/package.json\n@@ -7,8 +7,15 @@\n   \"license\": \"MIT\",\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n+  \"main\": \"./build/index.cjs\",\n+  \"browser\": \"./build/browser.js\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n+    \".\": {\n+      \"browser\": \"./build/browser.js\",\n+      \"import\": \"./build/index.js\",\n+      \"types\": \"./build/index.d.ts\",\n+      \"browserSource\": \"./src/browser.ts\"\n+    },\n     \"./package.json\": \"./package.json\"\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n\ndiff --git a/packages/wdio-logger/src/web.ts b/packages/wdio-logger/src/browser.ts\nsimilarity index 84%\nrename from packages/wdio-logger/src/web.ts\nrename to packages/wdio-logger/src/browser.ts\nindex 9a070b1044f..393fe86aeea 100644\n--- a/packages/wdio-logger/src/web.ts\n+++ b/packages/wdio-logger/src/browser.ts\n@@ -2,6 +2,12 @@\n \n const LOG_METHODS = ['error', 'warn', 'info', 'debug', 'trace', 'silent']\n \n+export type { Logger } from './index.js'\n+\n+/**\n+ * This implementation of the Logger package is a simple adptation to run it within\n+ * a browser environment.\n+ */\n export default function getLogger (component: string) {\n     return LOG_METHODS.reduce((acc: Console, cur: string): Console => {\n         const prop = cur as keyof Console\n\ndiff --git a/packages/wdio-logger/src/index.ts b/packages/wdio-logger/src/index.ts\nindex fd0c2d6604f..7c43a0e93a0 100644\n--- a/packages/wdio-logger/src/index.ts\n+++ b/packages/wdio-logger/src/index.ts\n@@ -1,25 +1,232 @@\n-/* istanbul ignore file */\n+import fs from 'node:fs'\n+import util from 'node:util'\n \n-import type loggerType from './node.js'\n-export type { Logger } from './node.js'\n+import log from 'loglevel'\n+import type { ColorName } from 'chalk'\n+import chalk from 'chalk'\n+import prefix from 'loglevel-plugin-prefix'\n+import ansiStrip from 'strip-ansi'\n \n+prefix.reg(log)\n+\n+const DEFAULT_LEVEL = process.env.WDIO_DEBUG\n+    ? 'trace'\n+    : 'info'\n+const COLORS: Record<string, ColorName> = {\n+    error: 'red',\n+    warn: 'yellow',\n+    info: 'cyanBright',\n+    debug: 'green',\n+    trace: 'cyan',\n+    progress: 'magenta'\n+}\n+\n+const matches = {\n+    COMMAND: 'COMMAND',\n+    BIDICOMMAND: 'BIDI COMMAND',\n+    DATA: 'DATA',\n+    RESULT: 'RESULT',\n+    BIDIRESULT: 'BIDI RESULT'\n+}\n+\n+const SERIALIZERS = [{\n+    /**\n+     * display error stack\n+     */\n+    matches: (err: any) => err instanceof Error,\n+    serialize: (err: any) => err.stack\n+}, {\n+    /**\n+     * color commands blue\n+     */\n+    matches: (log: string) => log === matches.COMMAND || log === matches.BIDICOMMAND,\n+    serialize: (log: string) => chalk.magenta(log)\n+}, {\n+    /**\n+     * color data yellow\n+     */\n+    matches: (log: string) => log === matches.DATA,\n+    serialize: (log: string) => chalk.yellow(log)\n+}, {\n+    /**\n+     * color result cyan\n+     */\n+    matches: (log: string) => log === matches.RESULT || log === matches.BIDIRESULT,\n+    serialize: (log: string) => chalk.cyan(log)\n+}]\n+\n+interface LoggerInterface extends log.Logger {\n+    progress(...msg: any[]): void;\n+}\n+\n+interface Loggers {\n+    [name: string]: LoggerInterface\n+}\n+\n+const loggers: Loggers = log.getLoggers() as Loggers\n+let logLevelsConfig: Record<string, log.LogLevelDesc> = {}\n+const logCache = new Set()\n+let logFile: fs.WriteStream | null\n+\n+const originalFactory = log.methodFactory\n+const wdioLoggerMethodFactory = function (this: log.Logger, methodName: log.LogLevelNames, logLevel: log.LogLevelNumbers, loggerName: string) {\n+    const rawMethod = originalFactory(methodName, logLevel, loggerName)\n+    return (...args: string[]) => {\n+        /**\n+         * create logFile lazily\n+         */\n+        if (!logFile && process.env.WDIO_LOG_PATH) {\n+            logFile = fs.createWriteStream(process.env.WDIO_LOG_PATH)\n+        }\n+\n+        /**\n+         * split `prefixer: value` sting to `prefixer: ` and `value`\n+         * so that SERIALIZERS can match certain string\n+         */\n+        const match = Object.values(matches).filter(x => args[0].endsWith(`: ${x}`))[0]\n+        if (match) {\n+            const prefixStr = args.shift()!.slice(0, -match.length - 1)\n+            args.unshift(prefixStr, match)\n+        }\n+\n+        args = args.map((arg) => {\n+            for (const s of SERIALIZERS) {\n+                if (s.matches(arg)) {\n+                    return s.serialize(arg)\n+                }\n+            }\n+            return arg\n+        })\n+\n+        const logText = ansiStrip(`${util.format.apply(this, args as [format: string, ...params: string[]])}\\n`)\n+        if (logFile && logFile.writable) {\n+            /**\n+             * empty logging cache if stuff got logged before\n+             */\n+            if (logCache.size) {\n+                logCache.forEach((log) => {\n+                    if (logFile) {\n+                        logFile.write(log)\n+                    }\n+                })\n+                logCache.clear()\n+            }\n+\n+            if (!logsContainInitPackageError(logText)) {\n+                return logFile.write(logText)\n+            }\n+            // If we get Error during init of integration packages, write logs to both \"outputDir\" and the terminal\n+            logFile.write(logText)\n+        }\n+\n+        logCache.add(logText)\n+        rawMethod(...args)\n+    }\n+}\n+\n+const progress = function (this: any, data: string) {\n+    if (process.stdout.isTTY && this.getLevel() <= log.levels.INFO) {\n+        const level = 'progress'\n+        const timestampFormatter = chalk.gray(new Date().toISOString())\n+        const levelFormatter = chalk[COLORS[level]](level.toUpperCase())\n+        const nameFormatter = chalk.whiteBright(this.name)\n+        const _data = data.length > 0 ? `${timestampFormatter} ${levelFormatter} ${nameFormatter}: ${data}` : '\\r\\x1b[K\\x1b[?25h'\n+        process.stdout.write('\\u001B[?25l') // Disable cursor in terminal\n+        process.stdout.write(`${_data}\\r`)\n+    }\n+}\n+\n+export default function getLogger (name: string) {\n+    /**\n+     * check if logger was already initiated\n+     */\n+    if (loggers[name]) {\n+        return loggers[name]\n+    }\n+\n+    let logLevel: log.LogLevelDesc = (process.env.WDIO_LOG_LEVEL || DEFAULT_LEVEL) as log.LogLevelDesc\n+    const logLevelName = getLogLevelName(name)\n+    if (logLevelsConfig[logLevelName]) {\n+        logLevel = logLevelsConfig[logLevelName]\n+    }\n+\n+    loggers[name] = log.getLogger(name) as LoggerInterface\n+    loggers[name].setLevel(logLevel)\n+    loggers[name].methodFactory = wdioLoggerMethodFactory\n+    loggers[name].progress = progress\n+    prefix.apply(loggers[name], {\n+        template: '%t %l %n:',\n+        timestampFormatter: (date) => chalk.gray(date.toISOString()),\n+        levelFormatter: (level: string) => chalk[COLORS[level]](level.toUpperCase()),\n+        nameFormatter: (name) => chalk.whiteBright(name)\n+    })\n+    return loggers[name]\n+}\n /**\n- * environment check to allow to use this package in a web context\n+ * Wait for writable stream to be flushed.\n+ * Calling this prevents part of the logs in the very env to be lost.\n  */\n-// By default, import the web code using a literal require, so that in webpack\n-// contexts, it will always be bundled\n-let mode = await import('./web.js') as any\n-\n-// Then, if we're in a Node.js context, require the node version of this module\n-// using a variable, so that it will _not_ be included in a bundle, either\n-// during compilation or execution\n-if (typeof process !== 'undefined' && typeof process.release !== 'undefined' && process.release.name === 'node') {\n-    const nodeMode = './node.js'\n-    mode = await import(nodeMode)\n-}\n-\n-// The net result will be that in a Node context, we'll have required both\n-// files but will use the correct one, and in the web context, we'll have only\n-// required the web file, thus ensuring that the Node file and related\n-// dependencies will not be bundled inadvertently.\n-export default mode.default as typeof loggerType\n+getLogger.waitForBuffer = async () => new Promise<void>(resolve => {\n+    // @ts-ignore\n+    if (logFile && Array.isArray(logFile.writableBuffer) && logFile.writableBuffer.length !== 0) {\n+        return setTimeout(async () => {\n+            await getLogger.waitForBuffer()\n+            resolve()\n+        }, 20)\n+    }\n+    resolve()\n+})\n+getLogger.setLevel = (name: string, level: log.LogLevelDesc) => loggers[name].setLevel(level)\n+getLogger.clearLogger = () => {\n+    if (logFile) {\n+        logFile.end()\n+    }\n+    logFile = null\n+}\n+getLogger.setLogLevelsConfig = (logLevels: Record<string, log.LogLevelDesc> = {}, wdioLogLevel: log.LogLevelDesc = DEFAULT_LEVEL) => {\n+    /**\n+     * set log level\n+     */\n+    if (process.env.WDIO_LOG_LEVEL === undefined) {\n+        process.env.WDIO_LOG_LEVEL = wdioLogLevel as string\n+    }\n+\n+    logLevelsConfig = {}\n+\n+    /**\n+     * build logLevelsConfig object\n+     */\n+    Object.entries(logLevels).forEach(([logName, logLevel]) => {\n+        const logLevelName = getLogLevelName(logName)\n+        logLevelsConfig[logLevelName] = logLevel\n+    })\n+\n+    /**\n+     * set log level for each logger\n+     */\n+    Object.keys(loggers).forEach(logName => {\n+        const logLevelName = getLogLevelName(logName)\n+\n+        /**\n+         * either apply log level from logLevels object or use global logLevel\n+         */\n+        const logLevel = typeof logLevelsConfig[logLevelName] !== 'undefined' ? logLevelsConfig[logLevelName] : process.env.WDIO_LOG_LEVEL as log.LogLevelDesc\n+\n+        loggers[logName].setLevel(logLevel)\n+    })\n+}\n+const getLogLevelName = (logName: string) => logName.split(':').shift() as log.LogLevelDesc\n+\n+export type Logger = LoggerInterface\n+\n+function logsContainInitPackageError(logText: string) {\n+    return ERROR_LOG_VALIDATOR.every(pattern => logText.includes(pattern))\n+}\n+\n+const ERROR_LOG_VALIDATOR = [\n+    'Couldn\\'t find plugin',\n+    'neither as wdio scoped package',\n+    'nor as community package',\n+    'Please make sure you have it installed'\n+]\n+\n\ndiff --git a/packages/wdio-logger/src/node.ts b/packages/wdio-logger/src/node.ts\ndeleted file mode 100644\nindex 7c43a0e93a0..00000000000\n--- a/packages/wdio-logger/src/node.ts\n+++ /dev/null\n@@ -1,232 +0,0 @@\n-import fs from 'node:fs'\n-import util from 'node:util'\n-\n-import log from 'loglevel'\n-import type { ColorName } from 'chalk'\n-import chalk from 'chalk'\n-import prefix from 'loglevel-plugin-prefix'\n-import ansiStrip from 'strip-ansi'\n-\n-prefix.reg(log)\n-\n-const DEFAULT_LEVEL = process.env.WDIO_DEBUG\n-    ? 'trace'\n-    : 'info'\n-const COLORS: Record<string, ColorName> = {\n-    error: 'red',\n-    warn: 'yellow',\n-    info: 'cyanBright',\n-    debug: 'green',\n-    trace: 'cyan',\n-    progress: 'magenta'\n-}\n-\n-const matches = {\n-    COMMAND: 'COMMAND',\n-    BIDICOMMAND: 'BIDI COMMAND',\n-    DATA: 'DATA',\n-    RESULT: 'RESULT',\n-    BIDIRESULT: 'BIDI RESULT'\n-}\n-\n-const SERIALIZERS = [{\n-    /**\n-     * display error stack\n-     */\n-    matches: (err: any) => err instanceof Error,\n-    serialize: (err: any) => err.stack\n-}, {\n-    /**\n-     * color commands blue\n-     */\n-    matches: (log: string) => log === matches.COMMAND || log === matches.BIDICOMMAND,\n-    serialize: (log: string) => chalk.magenta(log)\n-}, {\n-    /**\n-     * color data yellow\n-     */\n-    matches: (log: string) => log === matches.DATA,\n-    serialize: (log: string) => chalk.yellow(log)\n-}, {\n-    /**\n-     * color result cyan\n-     */\n-    matches: (log: string) => log === matches.RESULT || log === matches.BIDIRESULT,\n-    serialize: (log: string) => chalk.cyan(log)\n-}]\n-\n-interface LoggerInterface extends log.Logger {\n-    progress(...msg: any[]): void;\n-}\n-\n-interface Loggers {\n-    [name: string]: LoggerInterface\n-}\n-\n-const loggers: Loggers = log.getLoggers() as Loggers\n-let logLevelsConfig: Record<string, log.LogLevelDesc> = {}\n-const logCache = new Set()\n-let logFile: fs.WriteStream | null\n-\n-const originalFactory = log.methodFactory\n-const wdioLoggerMethodFactory = function (this: log.Logger, methodName: log.LogLevelNames, logLevel: log.LogLevelNumbers, loggerName: string) {\n-    const rawMethod = originalFactory(methodName, logLevel, loggerName)\n-    return (...args: string[]) => {\n-        /**\n-         * create logFile lazily\n-         */\n-        if (!logFile && process.env.WDIO_LOG_PATH) {\n-            logFile = fs.createWriteStream(process.env.WDIO_LOG_PATH)\n-        }\n-\n-        /**\n-         * split `prefixer: value` sting to `prefixer: ` and `value`\n-         * so that SERIALIZERS can match certain string\n-         */\n-        const match = Object.values(matches).filter(x => args[0].endsWith(`: ${x}`))[0]\n-        if (match) {\n-            const prefixStr = args.shift()!.slice(0, -match.length - 1)\n-            args.unshift(prefixStr, match)\n-        }\n-\n-        args = args.map((arg) => {\n-            for (const s of SERIALIZERS) {\n-                if (s.matches(arg)) {\n-                    return s.serialize(arg)\n-                }\n-            }\n-            return arg\n-        })\n-\n-        const logText = ansiStrip(`${util.format.apply(this, args as [format: string, ...params: string[]])}\\n`)\n-        if (logFile && logFile.writable) {\n-            /**\n-             * empty logging cache if stuff got logged before\n-             */\n-            if (logCache.size) {\n-                logCache.forEach((log) => {\n-                    if (logFile) {\n-                        logFile.write(log)\n-                    }\n-                })\n-                logCache.clear()\n-            }\n-\n-            if (!logsContainInitPackageError(logText)) {\n-                return logFile.write(logText)\n-            }\n-            // If we get Error during init of integration packages, write logs to both \"outputDir\" and the terminal\n-            logFile.write(logText)\n-        }\n-\n-        logCache.add(logText)\n-        rawMethod(...args)\n-    }\n-}\n-\n-const progress = function (this: any, data: string) {\n-    if (process.stdout.isTTY && this.getLevel() <= log.levels.INFO) {\n-        const level = 'progress'\n-        const timestampFormatter = chalk.gray(new Date().toISOString())\n-        const levelFormatter = chalk[COLORS[level]](level.toUpperCase())\n-        const nameFormatter = chalk.whiteBright(this.name)\n-        const _data = data.length > 0 ? `${timestampFormatter} ${levelFormatter} ${nameFormatter}: ${data}` : '\\r\\x1b[K\\x1b[?25h'\n-        process.stdout.write('\\u001B[?25l') // Disable cursor in terminal\n-        process.stdout.write(`${_data}\\r`)\n-    }\n-}\n-\n-export default function getLogger (name: string) {\n-    /**\n-     * check if logger was already initiated\n-     */\n-    if (loggers[name]) {\n-        return loggers[name]\n-    }\n-\n-    let logLevel: log.LogLevelDesc = (process.env.WDIO_LOG_LEVEL || DEFAULT_LEVEL) as log.LogLevelDesc\n-    const logLevelName = getLogLevelName(name)\n-    if (logLevelsConfig[logLevelName]) {\n-        logLevel = logLevelsConfig[logLevelName]\n-    }\n-\n-    loggers[name] = log.getLogger(name) as LoggerInterface\n-    loggers[name].setLevel(logLevel)\n-    loggers[name].methodFactory = wdioLoggerMethodFactory\n-    loggers[name].progress = progress\n-    prefix.apply(loggers[name], {\n-        template: '%t %l %n:',\n-        timestampFormatter: (date) => chalk.gray(date.toISOString()),\n-        levelFormatter: (level: string) => chalk[COLORS[level]](level.toUpperCase()),\n-        nameFormatter: (name) => chalk.whiteBright(name)\n-    })\n-    return loggers[name]\n-}\n-/**\n- * Wait for writable stream to be flushed.\n- * Calling this prevents part of the logs in the very env to be lost.\n- */\n-getLogger.waitForBuffer = async () => new Promise<void>(resolve => {\n-    // @ts-ignore\n-    if (logFile && Array.isArray(logFile.writableBuffer) && logFile.writableBuffer.length !== 0) {\n-        return setTimeout(async () => {\n-            await getLogger.waitForBuffer()\n-            resolve()\n-        }, 20)\n-    }\n-    resolve()\n-})\n-getLogger.setLevel = (name: string, level: log.LogLevelDesc) => loggers[name].setLevel(level)\n-getLogger.clearLogger = () => {\n-    if (logFile) {\n-        logFile.end()\n-    }\n-    logFile = null\n-}\n-getLogger.setLogLevelsConfig = (logLevels: Record<string, log.LogLevelDesc> = {}, wdioLogLevel: log.LogLevelDesc = DEFAULT_LEVEL) => {\n-    /**\n-     * set log level\n-     */\n-    if (process.env.WDIO_LOG_LEVEL === undefined) {\n-        process.env.WDIO_LOG_LEVEL = wdioLogLevel as string\n-    }\n-\n-    logLevelsConfig = {}\n-\n-    /**\n-     * build logLevelsConfig object\n-     */\n-    Object.entries(logLevels).forEach(([logName, logLevel]) => {\n-        const logLevelName = getLogLevelName(logName)\n-        logLevelsConfig[logLevelName] = logLevel\n-    })\n-\n-    /**\n-     * set log level for each logger\n-     */\n-    Object.keys(loggers).forEach(logName => {\n-        const logLevelName = getLogLevelName(logName)\n-\n-        /**\n-         * either apply log level from logLevels object or use global logLevel\n-         */\n-        const logLevel = typeof logLevelsConfig[logLevelName] !== 'undefined' ? logLevelsConfig[logLevelName] : process.env.WDIO_LOG_LEVEL as log.LogLevelDesc\n-\n-        loggers[logName].setLevel(logLevel)\n-    })\n-}\n-const getLogLevelName = (logName: string) => logName.split(':').shift() as log.LogLevelDesc\n-\n-export type Logger = LoggerInterface\n-\n-function logsContainInitPackageError(logText: string) {\n-    return ERROR_LOG_VALIDATOR.every(pattern => logText.includes(pattern))\n-}\n-\n-const ERROR_LOG_VALIDATOR = [\n-    'Couldn\\'t find plugin',\n-    'neither as wdio scoped package',\n-    'nor as community package',\n-    'Please make sure you have it installed'\n-]\n-\n\ndiff --git a/packages/wdio-logger/tsconfig.prod.json b/packages/wdio-logger/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-logger/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-mocha-framework/package.json b/packages/wdio-mocha-framework/package.json\nindex d54ba21d2c6..8dad99cfe7f 100644\n--- a/packages/wdio-mocha-framework/package.json\n+++ b/packages/wdio-mocha-framework/package.json\n@@ -28,8 +28,8 @@\n       \"types\": \"./build/index.d.ts\"\n     },\n     \"./common\": {\n-      \"import\": \"./build/common.js\",\n-      \"types\": \"./build/common.d.ts\"\n+      \"source\": \"./src/common.ts\",\n+      \"import\": \"./build/common.js\"\n     },\n     \"./package.json\": \"./package.json\"\n   },\n\ndiff --git a/packages/wdio-mocha-framework/src/index.ts b/packages/wdio-mocha-framework/src/index.ts\nindex 9b01eb4156b..d15d2fa9793 100644\n--- a/packages/wdio-mocha-framework/src/index.ts\n+++ b/packages/wdio-mocha-framework/src/index.ts\n@@ -21,6 +21,7 @@ type EventTypes = 'hook' | 'test' | 'suite'\n type EventTypeProps = '_hookCnt' | '_testCnt' | '_suiteCnt'\n interface ParsedConfiguration extends Required<Options.Testrunner> {\n     rootDir: string\n+    mochaOpts: MochaOptsImport\n }\n \n /**\n\ndiff --git a/packages/wdio-mocha-framework/tsconfig.prod.json b/packages/wdio-mocha-framework/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-mocha-framework/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-protocols/package.json b/packages/wdio-protocols/package.json\nindex 40bb7476b8c..1956df0a7b1 100644\n--- a/packages/wdio-protocols/package.json\n+++ b/packages/wdio-protocols/package.json\n@@ -8,8 +8,10 @@\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"import\": \"./build/index.js\",\n+      \"types\": \"./build/index.d.ts\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"repository\": {\n\ndiff --git a/packages/wdio-protocols/tsconfig.prod.json b/packages/wdio-protocols/tsconfig.prod.json\ndeleted file mode 100644\nindex 7ea439427b0..00000000000\n--- a/packages/wdio-protocols/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"build\",\n-    \"rootDir\": \"src\",\n-    \"removeComments\": false\n-  },\n-  \"include\": [\n-    \"src/**/*\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-repl/package.json b/packages/wdio-repl/package.json\nindex 33c0051f768..6ffaca9f56e 100644\n--- a/packages/wdio-repl/package.json\n+++ b/packages/wdio-repl/package.json\n@@ -25,8 +25,10 @@\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"import\": \"./build/index.js\",\n+      \"types\": \"./build/index.d.ts\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n\ndiff --git a/packages/wdio-repl/tsconfig.prod.json b/packages/wdio-repl/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-repl/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-reporter/cjs/package.json b/packages/wdio-reporter/cjs/package.json\ndeleted file mode 100644\nindex 007356d205b..00000000000\n--- a/packages/wdio-reporter/cjs/package.json\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-{\n-  \"name\": \"@wdio/reporter-cjs\",\n-  \"type\": \"commonjs\",\n-  \"private\": true\n-}\n\ndiff --git a/packages/wdio-reporter/package.json b/packages/wdio-reporter/package.json\nindex b5c2b5262ef..48a76bd7e66 100644\n--- a/packages/wdio-reporter/package.json\n+++ b/packages/wdio-reporter/package.json\n@@ -25,19 +25,15 @@\n     \"access\": \"public\"\n   },\n   \"type\": \"module\",\n-  \"main\": \"./cjs/index.js\",\n+  \"main\": \"./build/index.cjs\",\n   \"module\": \"./build/index.js\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \"./package.json\": \"./package.json\",\n-    \".\": [\n-      {\n-        \"types\": \"./build/index.d.ts\",\n-        \"import\": \"./build/index.js\",\n-        \"require\": \"./cjs/index.js\"\n-      },\n-      \"./cjs/index.js\"\n-    ]\n+    \".\": {\n+      \"types\": \"./build/index.d.ts\",\n+      \"import\": \"./build/index.js\",\n+      \"require\": \"./build/index.cjs\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n\ndiff --git a/packages/wdio-reporter/src/index.ts b/packages/wdio-reporter/src/index.ts\nindex a9e13d924cb..8ffd9ad5af2 100644\n--- a/packages/wdio-reporter/src/index.ts\n+++ b/packages/wdio-reporter/src/index.ts\n@@ -8,7 +8,7 @@ import type { Suite } from './stats/suite.js'\n import SuiteStats from './stats/suite.js'\n import type { Hook } from './stats/hook.js'\n import HookStats from './stats/hook.js'\n-import TestStats, { Test } from './stats/test.js'\n+import TestStats, { type Test } from './stats/test.js'\n import RunnerStats from './stats/runner.js'\n import type { AfterCommandArgs, BeforeCommandArgs, CommandArgs, Tag, Argument } from './types.js'\n \n\ndiff --git a/packages/wdio-reporter/tsconfig.cjs.json b/packages/wdio-reporter/tsconfig.cjs.json\ndeleted file mode 100644\nindex 7d3411ff77d..00000000000\n--- a/packages/wdio-reporter/tsconfig.cjs.json\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-{\n-  \"extends\": \"./tsconfig.prod.json\",\n-  \"compilerOptions\": {\n-    \"module\": \"CommonJS\",\n-    \"moduleResolution\": \"Node\",\n-    \"outDir\": \"./cjs\",\n-    \"declaration\": false,\n-    \"declarationMap\": false\n-  }\n-}\n\ndiff --git a/packages/wdio-reporter/tsconfig.prod.json b/packages/wdio-reporter/tsconfig.prod.json\ndeleted file mode 100644\nindex 2a0e7e84140..00000000000\n--- a/packages/wdio-reporter/tsconfig.prod.json\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\"\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-runner/package.json b/packages/wdio-runner/package.json\nindex 77912123dd3..6aaa98363be 100644\n--- a/packages/wdio-runner/package.json\n+++ b/packages/wdio-runner/package.json\n@@ -24,8 +24,10 @@\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"types\": \"./build/index.d.ts\",\n+      \"import\": \"./build/index.js\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n\ndiff --git a/packages/wdio-runner/src/browser.ts b/packages/wdio-runner/src/browser.ts\nindex f18dde33fb4..b4d1190c76e 100644\n--- a/packages/wdio-runner/src/browser.ts\n+++ b/packages/wdio-runner/src/browser.ts\n@@ -120,7 +120,7 @@ export default class BrowserFramework implements Omit<TestFramework, 'init'> {\n          * is no need to call the url command again\n          */\n         if (!this._config.sessionId) {\n-            await browser.url(`/?cid=${this._cid}&spec=${url.parse(spec).pathname}`)\n+            await browser.url(`/?cid=${this._cid}&spec=${(new URL(spec)).pathname}`)\n         }\n         // await browser.debug()\n \n@@ -473,8 +473,8 @@ export default class BrowserFramework implements Omit<TestFramework, 'init'> {\n         const logs = typeof browser.getLogs === 'function'\n             ? (await browser.getLogs('browser').catch(() => []))\n             : []\n-        const severeLogs = logs.filter((log: LogMessage) => log.level === 'SEVERE') as LogMessage[]\n-        if (logs.length) {\n+        const severeLogs = logs.filter((log: LogMessage) => log.level === 'SEVERE' && log.source !== 'deprecation') as LogMessage[]\n+        if (severeLogs.length) {\n             if (!this.#retryOutdatedOptimizeDep && severeLogs.some((log) => log.message?.includes('(Outdated Optimize Dep)'))) {\n                 log.info('Retry test run due to outdated optimize dep')\n                 this.#retryOutdatedOptimizeDep = true\n\ndiff --git a/packages/wdio-runner/tsconfig.prod.json b/packages/wdio-runner/tsconfig.prod.json\ndeleted file mode 100644\nindex 396aa3c8f9d..00000000000\n--- a/packages/wdio-runner/tsconfig.prod.json\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\",\n-    \"types\": [\"@wdio/globals/types\"]\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n\ndiff --git a/packages/wdio-sauce-service/package.json b/packages/wdio-sauce-service/package.json\nindex 9df2daecf33..044de32d992 100644\n--- a/packages/wdio-sauce-service/package.json\n+++ b/packages/wdio-sauce-service/package.json\n@@ -25,8 +25,10 @@\n   \"type\": \"module\",\n   \"types\": \"./build/index.d.ts\",\n   \"exports\": {\n-    \".\": \"./build/index.js\",\n-    \"./package.json\": \"./package.json\"\n+    \".\": {\n+      \"types\": \"./build/index.d.ts\",\n+      \"import\": \"./build/index.js\"\n+    }\n   },\n   \"typeScriptVersion\": \"3.8.3\",\n   \"dependencies\": {\n\ndiff --git a/packages/wdio-sauce-service/tsconfig.prod.json b/packages/wdio-sauce-service/tsconfig.prod.json\ndeleted file mode 100644\nindex 396aa3c8f9d..00000000000\n--- a/packages/wdio-sauce-service/tsconfig.prod.json\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-{\n-  \"extends\": \"../../tsconfig.prod\",\n-  \"compilerOptions\": {\n-    \"baseUrl\": \".\",\n-    \"outDir\": \"./build\",\n-    \"rootDir\": \"./src\",\n-    \"types\": [\"@wdio/globals/types\"]\n-  },\n-  \"include\": [\n-    \"src/**/*\",\n-    \"../../@types\"\n-  ]\n-}\n",
    "test_patch": "diff --git a/e2e/browser-runner/__snapshots__/lit.test.js.snap b/e2e/browser-runner/__snapshots__/lit.test.js.snap\nindex 51702eaf156..82927700136 100644\n--- a/e2e/browser-runner/__snapshots__/lit.test.js.snap\n+++ b/e2e/browser-runner/__snapshots__/lit.test.js.snap\n@@ -41,3 +41,22 @@ exports[`snapshot testing > of objects 3`] = `\n   \"foo\": \"bar\",\n }\n `;\n+\n+exports[`snapshot testing > of objects 5`] = `\n+{\n+  \"parsed\": {\n+    \"alpha\": 0,\n+    \"hex\": \"#000000\",\n+    \"rgba\": \"rgba(0,0,0,0)\",\n+    \"type\": \"color\",\n+  },\n+  \"property\": \"background-color\",\n+  \"value\": \"rgba(0,0,0,0)\",\n+}\n+`;\n+\n+exports[`snapshot testing > of objects 7`] = `\n+{\n+  \"foo\": \"bar\",\n+}\n+`;\n\ndiff --git a/e2e/package.json b/e2e/package.json\nindex b5bc960848d..b8f493d8607 100644\n--- a/e2e/package.json\n+++ b/e2e/package.json\n@@ -76,6 +76,6 @@\n     \"preact\": \"^10.19.3\",\n     \"react\": \"^18.2.0\",\n     \"svelte\": \"^4.2.9\",\n-    \"vue\": \"^3.4.15\"\n+    \"vue\": \"^3.4.37\"\n   }\n }\n\ndiff --git a/packages/wdio-browser-runner/src/vite/plugins/testrunner.ts b/packages/wdio-browser-runner/src/vite/plugins/testrunner.ts\nindex b1b82e66e2d..3c3617b3877 100644\n--- a/packages/wdio-browser-runner/src/vite/plugins/testrunner.ts\n+++ b/packages/wdio-browser-runner/src/vite/plugins/testrunner.ts\n@@ -50,7 +50,7 @@ const POLYFILLS = [\n     ...builtinModules.map((m) => `node:${m}`)\n ]\n export function testrunner(options: WebdriverIO.BrowserRunnerOptions): Plugin[] {\n-    const browserModules = path.resolve(__dirname, '..', '..', 'browser')\n+    const browserModules = path.resolve(__dirname, 'browser')\n     const automationProtocolPath = `/@fs${url.pathToFileURL(path.resolve(browserModules, 'driver.js')).pathname}`\n     const mockModulePath = path.resolve(browserModules, 'mock.js')\n     const setupModulePath = path.resolve(browserModules, 'setup.js')\n@@ -91,6 +91,11 @@ export function testrunner(options: WebdriverIO.BrowserRunnerOptions): Plugin[]\n                 return wdioExpectModulePath\n             }\n \n+            if (id === '@wdio/logger') {\n+                const newId = url.fileURLToPath(await resolve(id, import.meta.url))\n+                return path.resolve(path.dirname(newId), 'browser.js')\n+            }\n+\n             /**\n              * make sure WDIO imports are resolved properly as ESM module\n              */\n\ndiff --git a/packages/wdio-browser-runner/tests/vite/__snapshots__/utils.test.ts.snap b/packages/wdio-browser-runner/tests/vite/__snapshots__/utils.test.ts.snap\nindex f7c998fbb0e..aab59db3561 100644\n--- a/packages/wdio-browser-runner/tests/vite/__snapshots__/utils.test.ts.snap\n+++ b/packages/wdio-browser-runner/tests/vite/__snapshots__/utils.test.ts.snap\n@@ -139,15 +139,6 @@ exports[`getTemplate > renders template correctly 1`] = `\n                     margin: 0;\n                 }\n             </style>\n-            \n-            <script type=\"module\">\n-                some code\n-                window.Vue = Vue\n-            </script>\n-            <script type=\"module\">\n-                some code\n-                window.VueCompilerDOM = VueCompilerDOM\n-            </script>\n         </head>\n         <body>\n             <mocha-framework spec=\"/spec.js\" style=\"display: none\"></mocha-framework>\n\ndiff --git a/packages/wdio-browser-runner/tests/vite/utils.test.ts b/packages/wdio-browser-runner/tests/vite/utils.test.ts\nindex 0d46aab4f57..049e794e0df 100644\n--- a/packages/wdio-browser-runner/tests/vite/utils.test.ts\n+++ b/packages/wdio-browser-runner/tests/vite/utils.test.ts\n@@ -1,7 +1,6 @@\n import os from 'node:os'\n import url from 'node:url'\n import path from 'node:path'\n-import fs from 'node:fs/promises'\n \n import { describe, it, vi, expect } from 'vitest'\n import { resolve } from 'import-meta-resolve'\n@@ -29,12 +28,6 @@ vi.mock('fakeDep', () => ({\n // skip for Windows\n if (os.platform() !== 'win32') {\n     describe('getTemplate', () => {\n-        it('fails if vue helpers are not installed', async () => {\n-            vi.mocked(resolve).mockRejectedValue(new Error('not there'))\n-            await expect(getTemplate({ preset: 'vue' }, { config: {} } as any, ''))\n-                .rejects.toThrow(/Fail to set-up Vue environment/)\n-        })\n-\n         it('renders template correctly', async () => {\n             vi.mocked(resolve).mockResolvedValue('file:///foo/bar/vue')\n             /**\n@@ -44,8 +37,7 @@ if (os.platform() !== 'win32') {\n                 process.env.CI = '1'\n             }\n             const p: any = { env: { some: 'env' }, cwd: () => '/some/cwd' }\n-            expect(await getTemplate({ preset: 'vue' }, { config: {} } as any, '/spec.js', p)).toMatchSnapshot()\n-            expect(fs.readFile).toBeCalledTimes(2)\n+            expect(await getTemplate({ preset: 'lit' }, { config: {} } as any, '/spec.js', p)).toMatchSnapshot()\n         })\n     })\n }\n\ndiff --git a/packages/wdio-logger/tests/node.test.ts b/packages/wdio-logger/tests/node.test.ts\nindex 3d6b0dfcec9..60cdec13903 100644\n--- a/packages/wdio-logger/tests/node.test.ts\n+++ b/packages/wdio-logger/tests/node.test.ts\n@@ -1,8 +1,8 @@\n import fs from 'node:fs'\n import { it, describe, expect, vi, afterEach, beforeEach, afterAll } from 'vitest'\n \n-import nodeLogger from '../src/node.js'\n-import nodeLogger2 from '../build/node.js'\n+import nodeLogger from '../src/index.js'\n+import nodeLogger2 from '../build/index.js'\n \n import type log from 'loglevel'\n \n@@ -151,7 +151,6 @@ describe('wdio-logger node', () => {\n                 // @ts-ignore\n                 return writableBuffer\n             },\n-            // @ts-expect-error\n             end: vi.fn()\n         }))\n \n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13151",
    "pr_id": 13151,
    "issue_id": 13108,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: DETERMINISTIC FAILURE - Lingering Appium Process After Test Execution has Successfully Finished\n### Have you read the Contributing Guidelines on issues?\n\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\n\n### WebdriverIO Version\n\n8.35.1\n\n### Node.js Version\n\nv18.19.0\n\n### Mode\n\nWDIO Testrunner\n\n### Which capabilities are you using?\n\n```typescript\n{\r\n      maxInstances: 1,\r\n      platformName: 'windows',\r\n      hostname: '127.0.0.1',\r\n      'appium:automationName': 'windows',\r\n      'appium:deviceName': 'WindowsPC',\r\n      'appium:appTopLevelWindow': nativeWindowHandle,\r\n    },\n```\n\n\n### What happened?\n\n**Background** I'm running E2E testing with WebdriverIO/Appium on Windows.\r\n\r\nWhen I run the WebDriverIO test runner in my cmd, my testing passes successfully. However, I notice at the end of the run, I get the following error:\r\n`ERROR @wdio/appium-service: Appium exited before timeout (exit code: null)`\r\n\r\nThis is the only error I get - the actual tests all pass successfully. \r\n\r\nThen, using the same command prompt instance, I'll run the same exact tests again, changing nothing. This time, I get errors as WebDriverIO attempts to launch Appium:\r\n`2024-07-01T22:39:19.725Z ERROR @wdio/appium-service: Appium exited before timeout (exit code: 1)\r\n[HTTP] Could not start REST http interface listener. The requested port may already be in use. Please make sure there is no other instance of this server running already.`\r\n\r\nAfter seeing this, I checked my task manager. I found that there is a lingering node process after the first test run. I checked the command line that spawned this node process to be extra sure, and I can confirm that the command line that spawned it is:\r\n`\"C:\\Program Files\\nodejs\\node.exe\" C:\\my_local_project_path\\node_modules\\appium\\index.js --base-path /`.\r\n\r\nThis is the exact command that @wdio/appium-service uses to initially launch appium. I found this in the `_startAppium(command, args)` function in launcher.ts file (packages\\wdio-appium-service\\src\\launcher.ts).\r\n\r\nSo, it looks like this process isn't being shutdown correctly by WebDriverIO. We see _something_ is going wrong on the initial test execution as mentioned above: `ERROR @wdio/appium-service: Appium exited before timeout (exit code: null)`. \r\n\r\nI take it something is going wrong when trying to shutdown this process.\r\n\r\n\n\n### What is your expected behavior?\n\n_No response_\n\n### How to reproduce the bug.\n\nIn a cmd, run WebDriverIO's test runner with the Appium plugin. Run it multiple times to see the subsequent test failures. You can also open up task manager to see the extra node process after testing as finished.\n\n### Relevant log output\n\n```typescript\n2024-07-01T22:39:17.194Z INFO @wdio/appium-service: Will spawn Appium process: cmd /c node E:\\local_path\\node_modules\\appium\\index.js --base-path /\r\n2024-07-01T22:39:19.725Z ERROR @wdio/appium-service: Appium exited before timeout (exit code: 1)\r\n[HTTP] Could not start REST http interface listener. The requested port may already be in use. Please make sure there is no other instance of this server running already.\r\n\r\n2024-07-01T22:39:19.728Z ERROR @wdio/cli:utils: A service failed in the 'onPrepare' hook\r\nError: Appium exited before timeout (exit code: 1)\r\n[HTTP] Could not start REST http interface listener. The requested port may already be in use. Please make sure there is no other instance of this server running already.\r\n\r\n    at ChildProcess.<anonymous> (file:///E:/local_path/node_modules/@wdio/appium-service/build/launcher.js:154:24)\r\n    at Object.onceWrapper (node:events:632:26)\r\n    at ChildProcess.emit (node:events:517:28)\r\n    at ChildProcess.emit (node:domain:489:12)\r\n    at Process.ChildProcess._handle.onexit (node:internal/child_process:292:12)\n```\n\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues",
    "issue_word_count": 619,
    "test_files_count": 1,
    "non_test_files_count": 3,
    "pr_changed_files": [
      "packages/wdio-appium-service/package.json",
      "packages/wdio-appium-service/src/launcher.ts",
      "packages/wdio-appium-service/tests/launcher.test.ts",
      "pnpm-lock.yaml"
    ],
    "pr_changed_test_files": [
      "packages/wdio-appium-service/tests/launcher.test.ts"
    ],
    "base_commit": "175721998f20e9f16425133598953b429ab5d20b",
    "head_commit": "748ebf4ae5158aad8bc1553196ff34246ba9c9f4",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13151",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13151",
    "dockerfile": "",
    "pr_merged_at": "2024-08-04T05:49:06.000Z",
    "patch": "diff --git a/packages/wdio-appium-service/package.json b/packages/wdio-appium-service/package.json\nindex c8ad8902abb..beb3dc74e42 100644\n--- a/packages/wdio-appium-service/package.json\n+++ b/packages/wdio-appium-service/package.json\n@@ -40,6 +40,7 @@\n     \"change-case\": \"^5.4.3\",\n     \"get-port\": \"^7.0.0\",\n     \"import-meta-resolve\": \"^4.0.0\",\n+    \"tree-kill\": \"^1.2.2\",\n     \"webdriverio\": \"workspace:*\"\n   },\n   \"publishConfig\": {\n\ndiff --git a/packages/wdio-appium-service/src/launcher.ts b/packages/wdio-appium-service/src/launcher.ts\nindex 4e09b62665f..1a4c7a8ade1 100644\n--- a/packages/wdio-appium-service/src/launcher.ts\n+++ b/packages/wdio-appium-service/src/launcher.ts\n@@ -2,6 +2,7 @@ import fs from 'node:fs'\n import fsp from 'node:fs/promises'\n import url from 'node:url'\n import path from 'node:path'\n+import treeKill from 'tree-kill'\n import { spawn, type ChildProcessByStdio } from 'node:child_process'\n import { type Readable } from 'node:stream'\n \n@@ -153,9 +154,19 @@ export default class AppiumLauncher implements Services.ServiceInstance {\n     }\n \n     onComplete() {\n-        if (this._process) {\n-            log.info(`Appium (pid: ${this._process.pid}) killed`)\n-            this._process.kill()\n+        // Kill appium and all process' spawned from it\n+        if (this._process && this._process.pid) {\n+            // Ensure all child processes are also killed\n+            log.info('Killing entire Appium tree')\n+            treeKill(this._process.pid, 'SIGTERM', (err) => {\n+                if (err) {\n+                    log.warn('Failed to kill process:', err)\n+                } else {\n+                    log.info(\n+                        'Process and its children successfully terminated'\n+                    )\n+                }\n+            })\n         }\n     }\n     private _startAppium(command: string, args: Array<string>, timeout = APPIUM_START_TIMEOUT) {\n@@ -256,4 +267,4 @@ export default class AppiumLauncher implements Services.ServiceInstance {\n             throw new SevereServiceError(errorMessage)\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex 707754e269c..58f2791f6f8 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -484,6 +484,9 @@ importers:\n       import-meta-resolve:\n         specifier: ^4.0.0\n         version: 4.1.0\n+      tree-kill:\n+        specifier: ^1.2.2\n+        version: 1.2.2\n       webdriverio:\n         specifier: workspace:*\n         version: link:../webdriverio\n@@ -12340,6 +12343,10 @@ packages:\n     resolution: {integrity: sha512-tk2G5R2KRwBd+ZN0zaEXpmzdKyOYksXwywulIX95MBODjSzMIuQnQ3m8JxgbhnL1LeVo7lqQKsYa1O3Htl7K5g==}\n     engines: {node: '>=18'}\n \n+  tree-kill@1.2.2:\n+    resolution: {integrity: sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==}\n+    hasBin: true\n+\n   treeverse@3.0.0:\n     resolution: {integrity: sha512-gcANaAnd2QDZFmHFEOF4k7uc1J/6a6z3DJMd/QwEyxLoKGiptJRwid582r7QIsFlFMIZ3SnxfS52S4hm2DHkuQ==}\n     engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}\n@@ -27269,6 +27276,8 @@ snapshots:\n     dependencies:\n       punycode: 2.3.1\n \n+  tree-kill@1.2.2: {}\n+\n   treeverse@3.0.0: {}\n \n   trim-lines@3.0.1: {}\n",
    "test_patch": "diff --git a/packages/wdio-appium-service/tests/launcher.test.ts b/packages/wdio-appium-service/tests/launcher.test.ts\nindex bdb6c5548e5..09d313c0128 100644\n--- a/packages/wdio-appium-service/tests/launcher.test.ts\n+++ b/packages/wdio-appium-service/tests/launcher.test.ts\n@@ -1,9 +1,11 @@\n import fs from 'node:fs'\n import url from 'node:url'\n import path from 'node:path'\n-import { spawn } from 'node:child_process'\n+import treeKill from 'tree-kill'\n+import { spawn, type ChildProcessByStdio } from 'node:child_process'\n import type cp from 'node:child_process'\n import getPort from 'get-port'\n+import { Readable, type Writable } from 'node:stream'\n \n import { describe, expect, beforeEach, afterEach, test, vi } from 'vitest'\n import { resolve } from 'import-meta-resolve'\n@@ -37,6 +39,10 @@ vi.mock('get-port', () => ({\n     default: vi.fn().mockResolvedValue(4723)\n }))\n \n+vi.mock('tree-kill', () => ({\n+    default: vi.fn()\n+}))\n+\n class MockProcess {\n     removeListener() {}\n     kill() {}\n@@ -69,6 +75,46 @@ class MockFailingProcess extends MockProcess {\n     }\n }\n \n+// MockProcess2 class. Mocks the entire _process object so we can set specific values on it, such as pid\n+class MockProcess2 implements Partial<ChildProcessByStdio<null, Readable, Readable>> {\n+    pid: number\n+    exitCode: number | null = null\n+    signalCode: null\n+    spawnargs: string[] = []\n+    spawnfile: string = ''\n+    stdin: null = null\n+    stdout: Readable = new Readable({\n+        read() {\n+            this.push(null)\n+        }\n+    })\n+    stderr: Readable = new Readable({\n+        read() {\n+            this.push(null)\n+        }\n+    })\n+    stdio: [null, Readable, Readable, Readable | Writable | null | undefined, Readable | Writable | null | undefined] = [null, this.stdout, this.stderr, null, null]\n+    killed = false\n+    connected = true\n+    kill = vi.fn()\n+    send = vi.fn()\n+    disconnect = vi.fn()\n+    unref = vi.fn()\n+    ref = vi.fn()\n+    addListener = vi.fn()\n+    emit = vi.fn()\n+    on = vi.fn()\n+    once = vi.fn()\n+    prependListener = vi.fn()\n+    prependOnceListener = vi.fn()\n+    removeAllListeners = vi.fn()\n+    removeListener = vi.fn()\n+\n+    constructor(pid: number) {\n+        this.pid = pid\n+    }\n+}\n+\n class MockCustomFailingProcess extends MockFailingProcess {\n     stderr = { pipe: vi.fn(), once: vi.fn().mockImplementation((event, cb) => cb(new Error('Uups'))) }\n }\n@@ -622,12 +668,18 @@ describe('Appium launcher', () => {\n     })\n \n     describe('onComplete', () => {\n-        test('should call process.kill', async () => {\n+        test('should call treeKill', async () => {\n             const launcher = new AppiumLauncher({}, [], {} as any)\n             await launcher.onPrepare()\n-            launcher['_process']!.kill = vi.fn()\n+\n+            // Mock the _process property using MockProcess2 class\n+            launcher['_process'] = new MockProcess2(1234) as unknown as ChildProcessByStdio<null, Readable, Readable>\n+\n+            // Call onComplete\n             launcher.onComplete()\n-            expect(launcher['_process']!.kill).toBeCalled()\n+\n+            // Verify treeKill is called with correct parameters\n+            expect(treeKill).toHaveBeenCalledWith(1234, 'SIGTERM', expect.any(Function))\n         })\n \n         test('should not call process.kill', () => {\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13055",
    "pr_id": 13055,
    "issue_id": 12914,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[💡 Feature]: Modification of outbound network request props\n### Is your feature request related to a problem?\n\nI would like to capture the network calls happening in the background while running the tests and modify the captured request headers and body before the request leaves the browser\n\n### Describe the solution you'd like.\n\nIf there is browser.intercept() method available which takes a call back function like\r\nbrowser.intercept(“regex of url to be intercepted”, (request)=>{ // request modification commands});\r\nThis could be used to do all the actions that we want before a request is sent.\n\n### Describe alternatives you've considered.\n\nwe have used cypress to automate single tab use cases. it supports these kind of request interception and modification.\n\n### Additional context\n\n_No response_\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct",
    "issue_word_count": 136,
    "test_files_count": 4,
    "non_test_files_count": 8,
    "pr_changed_files": [
      "packages/wdio-cli/src/utils.ts",
      "packages/wdio-cli/tests/__snapshots__/utils.test.ts.snap",
      "packages/webdriver/src/bidi/remoteTypes.ts",
      "packages/webdriver/src/request/index.ts",
      "packages/webdriver/src/utils.ts",
      "packages/webdriverio/src/commands/browser/mock.ts",
      "packages/webdriverio/src/utils/interception/index.ts",
      "packages/webdriverio/src/utils/interception/types.ts",
      "packages/webdriverio/src/utils/interception/utils.ts",
      "packages/webdriverio/tests/utils/interception/index.test.ts",
      "packages/webdriverio/tests/utils/interception/utils.test.ts",
      "tests/typings/webdriverio/async.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-cli/tests/__snapshots__/utils.test.ts.snap",
      "packages/webdriverio/tests/utils/interception/index.test.ts",
      "packages/webdriverio/tests/utils/interception/utils.test.ts",
      "tests/typings/webdriverio/async.ts"
    ],
    "base_commit": "b66d97fe4f137745efb5a0435fb456b54e82f14f",
    "head_commit": "d36c17cf17e26f601515ffb621ba204006edfe6e",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13055",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13055",
    "dockerfile": "",
    "pr_merged_at": "2024-06-22T07:24:49.000Z",
    "patch": "diff --git a/packages/wdio-cli/src/utils.ts b/packages/wdio-cli/src/utils.ts\nindex 6d7f8c9c495..14b85c1df89 100644\n--- a/packages/wdio-cli/src/utils.ts\n+++ b/packages/wdio-cli/src/utils.ts\n@@ -316,7 +316,7 @@ export async function getCapabilities(arg: ReplCommandArguments) {\n             await config.initialize()\n         } catch (e) {\n             throw Error((e as any).code === 'MODULE_NOT_FOUND' ? `Config File not found: ${arg.option}` :\n-                `Could not parse ${arg.option}, failed with error : ${(e as Error).message}`)\n+                `Could not parse ${arg.option}, failed with error: ${(e as Error).message}`)\n         }\n         if (typeof arg.capabilities === 'undefined') {\n             throw Error('Please provide index/named property of capability to use from the capabilities array/object in wdio config file')\n\ndiff --git a/packages/webdriver/src/bidi/remoteTypes.ts b/packages/webdriver/src/bidi/remoteTypes.ts\nindex 27c24ad793c..e0f78e9db9a 100644\n--- a/packages/webdriver/src/bidi/remoteTypes.ts\n+++ b/packages/webdriver/src/bidi/remoteTypes.ts\n@@ -470,8 +470,8 @@ export interface NetworkContinueRequest extends Command {\n \n export interface NetworkContinueRequestParameters {\n   request: NetworkRequest;\n-  body?: NetworkBytesValue;\n   cookies?: NetworkCookieHeader[];\n+  body?: NetworkBytesValue;\n   headers?: NetworkHeader[];\n   method?: string;\n   url?: string;\n@@ -1144,4 +1144,4 @@ export interface InputSetFilesParameters {\n   context: BrowsingContextBrowsingContext;\n   element: ScriptSharedReference;\n   files: string[];\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/packages/webdriver/src/request/index.ts b/packages/webdriver/src/request/index.ts\nindex ea7e4faca5b..09edf309f7c 100644\n--- a/packages/webdriver/src/request/index.ts\n+++ b/packages/webdriver/src/request/index.ts\n@@ -9,6 +9,7 @@ import { transformCommandLogResult } from '@wdio/utils'\n import type { Options } from '@wdio/types'\n \n import { isSuccessfulResponse, getErrorFromResponseBody, getTimeoutError } from '../utils.js'\n+import { DEFAULTS } from '../constants.js'\n \n let pkg = { version: '' }\n if ('process' in globalThis && globalThis.process.versions?.node) {\n@@ -61,6 +62,8 @@ const DEFAULT_HEADERS = {\n const log = logger('webdriver')\n \n export default abstract class WebDriverRequest extends EventEmitter {\n+    #requestTimeout?: NodeJS.Timeout\n+\n     body?: Record<string, unknown>\n     method: string\n     endpoint: string\n@@ -92,7 +95,10 @@ export default abstract class WebDriverRequest extends EventEmitter {\n \n     protected async _createOptions (options: RequestOptions, sessionId?: string, isBrowser: boolean = false): Promise<{url: URL; requestOptions: RequestInit;}> {\n         const controller = new AbortController()\n-        setTimeout(() => controller.abort(), options.connectionRetryTimeout|| 120000)\n+        this.#requestTimeout = setTimeout(\n+            () => controller.abort(),\n+            options.connectionRetryTimeout || DEFAULTS.connectionRetryTimeout.default\n+        )\n \n         const requestOptions: RequestInit = {\n             signal: controller.signal\n@@ -172,6 +178,10 @@ export default abstract class WebDriverRequest extends EventEmitter {\n             .catch((err: RequestLibError) => err)\n         const durationMillisecond = this._libPerformanceNow() - startTime\n \n+        if (this.#requestTimeout) {\n+            clearTimeout(this.#requestTimeout)\n+        }\n+\n         /**\n          * handle retries for requests\n          * @param {Error} error  error object that causes the retry\n\ndiff --git a/packages/webdriver/src/utils.ts b/packages/webdriver/src/utils.ts\nindex 88ce85b16c3..d8a43a9f8d4 100644\n--- a/packages/webdriver/src/utils.ts\n+++ b/packages/webdriver/src/utils.ts\n@@ -447,14 +447,11 @@ export function initiateBidi (socketUrl: string, strictSSL: boolean = true): Pro\n \n export function parseBidiMessage (this: EventEmitter, data: Buffer) {\n     try {\n-        // keep backwards compatibility\n-        // ToDo(Christian): remove in v9\n-        this.emit('message', data)\n-\n         const payload: Event = JSON.parse(data.toString())\n         if (payload.type !== 'event') {\n             return\n         }\n+\n         this.emit(payload.method, payload.params)\n     } catch (err: unknown) {\n         log.error(`Failed parse WebDriver Bidi message: ${(err as Error).message}`)\n\ndiff --git a/packages/webdriverio/src/commands/browser/mock.ts b/packages/webdriverio/src/commands/browser/mock.ts\nindex db20f7f85cb..b45a7f182d7 100644\n--- a/packages/webdriverio/src/commands/browser/mock.ts\n+++ b/packages/webdriverio/src/commands/browser/mock.ts\n@@ -1,6 +1,6 @@\n import { getBrowserObject } from '@wdio/utils'\n \n-import type { MockOptions } from '../../utils/interception/types.js'\n+import type { MockFilterOptions } from '../../utils/interception/types.js'\n import WebDriverInterception from '../../utils/interception/index.js'\n \n export const SESSION_MOCKS: Record<string, Set<WebDriverInterception>> = {}\n@@ -114,7 +114,7 @@ export const SESSION_MOCKS: Record<string, Set<WebDriverInterception>> = {}\n export async function mock(\n     this: WebdriverIO.Browser,\n     url: string,\n-    filterOptions?: MockOptions\n+    filterOptions?: MockFilterOptions\n ): Promise<WebdriverIO.Mock> {\n     if (!this.isBidi) {\n         throw new Error('Mocking is only supported when running tests using WebDriver Bidi')\n\ndiff --git a/packages/webdriverio/src/utils/interception/index.ts b/packages/webdriverio/src/utils/interception/index.ts\nindex 86b77c354c8..6affbf5ee28 100644\n--- a/packages/webdriverio/src/utils/interception/index.ts\n+++ b/packages/webdriverio/src/utils/interception/index.ts\n@@ -9,7 +9,7 @@ import { URLPattern } from 'urlpattern-polyfill'\n import Timer from '../Timer.js'\n import { parseOverwrite, getPatternParam } from './utils.js'\n import { SESSION_MOCKS } from '../../commands/browser/mock.js'\n-import type { MockOptions, RequestWithOptions, RespondWithOptions } from './types.js'\n+import type { MockFilterOptions, RequestWithOptions, RespondWithOptions } from './types.js'\n import type { WaitForOptions } from '../../types.js'\n \n const log = logger('WebDriverInterception')\n@@ -17,6 +17,11 @@ const log = logger('WebDriverInterception')\n let hasSubscribedToEvents = false\n \n type RespondBody = string | JsonCompatible | Buffer\n+interface Overwrite {\n+    overwrite?: RequestWithOptions | RespondWithOptions\n+    once?: boolean\n+    abort?: boolean\n+}\n \n /**\n  * Network interception class based on a WebDriver Bidi implementation.\n@@ -27,25 +32,24 @@ type RespondBody = string | JsonCompatible | Buffer\n export default class WebDriverInterception {\n     #pattern: URLPattern\n     #mockId: string\n+    #filterOptions: MockFilterOptions\n     #browser: WebdriverIO.Browser\n \n     #emitter = new EventEmitter()\n     #restored = false\n-    #respondOverwrites: {\n-        overwrite?: RequestWithOptions | RespondWithOptions\n-        requestWith?: RequestWithOptions\n-        once?: boolean\n-        abort?: boolean\n-    }[] = []\n+    #requestOverwrites: Overwrite[] = []\n+    #respondOverwrites: Overwrite[] = []\n     #calls: local.NetworkResponseCompletedParameters[] = []\n \n     private constructor (\n         pattern: URLPattern,\n         mockId: string,\n+        filterOptions: MockFilterOptions,\n         browser: WebdriverIO.Browser\n     ) {\n         this.#pattern = pattern\n         this.#mockId = mockId\n+        this.#filterOptions = filterOptions\n         this.#browser = browser\n \n         /**\n@@ -57,10 +61,7 @@ export default class WebDriverInterception {\n \n     static async initiate(\n         url: string,\n-        /**\n-         * ToDo(Christian): incorporate filterOptions\n-         */\n-        filterOptions: MockOptions,\n+        filterOptions: MockFilterOptions,\n         browser: WebdriverIO.Browser\n     ) {\n         const pattern = parseUrlPattern(url)\n@@ -90,7 +91,7 @@ export default class WebDriverInterception {\n             }]\n         })\n \n-        return new WebDriverInterception(pattern, interception.intercept, browser)\n+        return new WebDriverInterception(pattern, interception.intercept, filterOptions, browser)\n     }\n \n     #handleBeforeRequestSent(request: local.NetworkBeforeRequestSentParameters) {\n@@ -104,57 +105,37 @@ export default class WebDriverInterception {\n         }\n \n         /**\n-         * continue the request without modifications, if:\n-         */\n-        const continueRequest = (\n-            /**\n-             * - mock has no request/respond overwrites\n-             * - no request modifications are set\n-             *   - no errorReason is set\n-             *   - no requestWith is set\n-             */\n-            this.#respondOverwrites.length === 0 ||\n-            (\n-                !this.#respondOverwrites[0].abort &&\n-                !this.#respondOverwrites[0].requestWith\n-            )\n-        )\n-\n-        /**\n-         * check if request matches the mock url\n+         * check if request matches filter option and do nothing if not\n          */\n-        if (continueRequest) {\n-            this.#emitter.emit('continue', request.request.request)\n+        if (!this.#matchesFilterOptions(request)) {\n             return this.#browser.networkContinueRequest({\n                 request: request.request.request\n             })\n         }\n \n         this.#emitter.emit('request', request)\n-        const { requestWith, abort } = this.#respondOverwrites[0].once\n-            ? this.#respondOverwrites.shift() || {}\n-            : this.#respondOverwrites[0]\n-\n-        /**\n-         * check if should abort the request\n-         */\n-        if (abort) {\n-            this.#emitter.emit('fail', request.request.request)\n-            return this.#browser.networkFailRequest({ request: request.request.request })\n-        }\n+        const hasRequestOverwrites = this.#requestOverwrites.length > 0\n+        if (hasRequestOverwrites) {\n+            const { overwrite, abort } = this.#requestOverwrites[0].once\n+                ? this.#requestOverwrites.shift() || {}\n+                : this.#requestOverwrites[0]\n+\n+            if (abort) {\n+                this.#emitter.emit('fail', request.request.request)\n+                return this.#browser.networkFailRequest({ request: request.request.request })\n+            }\n \n-        /**\n-         * continue request (possibly with overwrites)\n-         */\n-        if (requestWith) {\n             this.#emitter.emit('overwrite', request)\n             return this.#browser.networkContinueRequest({\n                 request: request.request.request,\n-                ...parseOverwrite(requestWith, request)\n+                ...(overwrite ? parseOverwrite(overwrite, request) : {})\n             })\n         }\n \n-        throw new Error('This should never happen')\n+        this.#emitter.emit('continue', request.request.request)\n+        return this.#browser.networkContinueRequest({\n+            request: request.request.request\n+        })\n     }\n \n     #handleResponseStarted(request: local.NetworkResponseCompletedParameters) {\n@@ -175,6 +156,7 @@ export default class WebDriverInterception {\n              * - mock has no request/respond overwrites\n              * - no request modifications are set, e.g. no overwrite is set\n              */\n+            !this.#matchesFilterOptions(request) ||\n             this.#respondOverwrites.length === 0 ||\n             !this.#respondOverwrites[0].overwrite\n         )\n@@ -186,7 +168,7 @@ export default class WebDriverInterception {\n             this.#emitter.emit('continue', request.request.request)\n             return this.#browser.networkProvideResponse({\n                 request: request.request.request\n-            })\n+            }).catch(this.#handleNetworkProvideResponseError)\n         }\n \n         this.#calls.push(request)\n@@ -202,7 +184,7 @@ export default class WebDriverInterception {\n             return this.#browser.networkProvideResponse({\n                 request: request.request.request,\n                 ...parseOverwrite(overwrite, request)\n-            })\n+            }).catch(this.#handleNetworkProvideResponseError)\n         }\n \n         /**\n@@ -211,13 +193,89 @@ export default class WebDriverInterception {\n         this.#emitter.emit('continue', request.request.request)\n         return this.#browser.networkProvideResponse({\n             request: request.request.request\n-        })\n+        }).catch(this.#handleNetworkProvideResponseError)\n+    }\n+\n+    /**\n+     * It appears that the networkProvideResponse method may throw an \"no such request\" error even though the request\n+     * is marked as \"blocked\", in these cases we can safely ignore the error.\n+     * @param err Bidi message error\n+     */\n+    #handleNetworkProvideResponseError(err: Error) {\n+        if (err.message.endsWith('no such request')) {\n+            return\n+        }\n+\n+        throw err\n     }\n \n-    #isRequestMatching (request: local.NetworkBeforeRequestSentParameters | local.NetworkResponseCompletedParameters) {\n+    #isRequestMatching<T extends local.NetworkBeforeRequestSentParameters | local.NetworkResponseCompletedParameters> (request: T) {\n         return request.isBlocked && this.#pattern && this.#pattern.test(request.request.url)\n     }\n \n+    #matchesFilterOptions<T extends local.NetworkBeforeRequestSentParameters | local.NetworkResponseCompletedParameters> (request: T) {\n+        let isRequestMatching = true\n+\n+        if (this.#filterOptions.method) {\n+            isRequestMatching = typeof this.#filterOptions.method === 'function'\n+                ? this.#filterOptions.method(request.request.method)\n+                : this.#filterOptions.method === request.request.method\n+        }\n+\n+        if (this.#filterOptions.requestHeaders) {\n+            isRequestMatching = typeof this.#filterOptions.requestHeaders === 'function'\n+                ? this.#filterOptions.requestHeaders(request.request.headers.reduce((acc, { name, value }) => {\n+                    acc[name] = value.type === 'string' ? value.value : Buffer.from(value.value, 'base64').toString()\n+                    return acc\n+                }, {} as Record<string, string>))\n+                : Object.entries(this.#filterOptions.requestHeaders).every(([key, value]) => {\n+                    const header = request.request.headers.find(({ name }) => name === key)\n+                    if (!header) {\n+                        return false\n+                    }\n+\n+                    return header.value.type === 'string'\n+                        ? header.value.value === value\n+                        : Buffer.from(header.value.value, 'base64').toString() === value\n+                })\n+        }\n+\n+        if (this.#filterOptions.responseHeaders && 'response' in request) {\n+            isRequestMatching = typeof this.#filterOptions.responseHeaders === 'function'\n+                ? this.#filterOptions.responseHeaders(request.response.headers.reduce((acc, { name, value }) => {\n+                    acc[name] = value.type === 'string' ? value.value : Buffer.from(value.value, 'base64').toString()\n+                    return acc\n+                }, {} as Record<string, string>))\n+                : Object.entries(this.#filterOptions.responseHeaders).every(([key, value]) => {\n+                    const header = request.response.headers.find(({ name }) => name === key)\n+                    if (!header) {\n+                        return false\n+                    }\n+\n+                    return header.value.type === 'string'\n+                        ? header.value.value === value\n+                        : Buffer.from(header.value.value, 'base64').toString() === value\n+                })\n+        }\n+\n+        if (this.#filterOptions.statusCode && 'response' in request) {\n+            isRequestMatching = typeof this.#filterOptions.statusCode === 'function'\n+                ? this.#filterOptions.statusCode(request.response.status)\n+                : this.#filterOptions.statusCode === request.response.status\n+        }\n+\n+        return isRequestMatching\n+    }\n+\n+    #setOverwrite = (overwriteProp: Overwrite[], { overwrite, abort, once }: Overwrite) => {\n+        return once\n+            ? [\n+                ...overwriteProp.filter(({ once }) => once),\n+                { overwrite, abort, once }\n+            ]\n+            : [{ overwrite, abort }]\n+    }\n+\n     /**\n      * allows access to all requests made with given pattern\n      */\n@@ -240,6 +298,7 @@ export default class WebDriverInterception {\n     reset() {\n         this.clear()\n         this.#respondOverwrites = []\n+        this.#requestOverwrites = []\n         return this\n     }\n \n@@ -264,11 +323,31 @@ export default class WebDriverInterception {\n         return this\n     }\n \n+    /**\n+     * Always use request modification for the next request done by the browser.\n+     * @param payload  payload to overwrite the request\n+     * @param once     apply overwrite only once for the next request\n+     * @returns        this instance to chain commands\n+     */\n+    request(overwrite: RequestWithOptions, once?: boolean) {\n+        this.#ensureNotRestored()\n+        this.#requestOverwrites = this.#setOverwrite(this.#requestOverwrites, { overwrite, once })\n+        return this\n+    }\n+\n+    /**\n+     * alias for `mock.request(…, true)`\n+     */\n+    requestOnce(payload: RequestWithOptions) {\n+        return this.request(payload, true)\n+    }\n+\n     /**\n      * Always respond with same overwrite\n-     * @param {*} overwrites  payload to overwrite the response\n-     * @param {*} params      additional respond parameters to overwrite\n-     * @param {boolean} once  apply overwrite only once for the next request\n+     * @param {*}       payload  payload to overwrite the response\n+     * @param {*}       params   additional respond parameters to overwrite\n+     * @param {boolean} once     apply overwrite only once for the next request\n+     * @returns                  this instance to chain commands\n      */\n     respond(payload: RespondBody, params: Omit<RespondWithOptions, 'body'> = {}, once?: boolean) {\n         this.#ensureNotRestored()\n@@ -278,7 +357,7 @@ export default class WebDriverInterception {\n                 ? payload.toString('base64')\n                 : JSON.stringify(payload)\n         const overwrite: RespondWithOptions = { body, ...params }\n-        this.#respondOverwrites.push({ overwrite, once })\n+        this.#respondOverwrites = this.#setOverwrite(this.#respondOverwrites, { overwrite, once })\n         return this\n     }\n \n@@ -296,7 +375,7 @@ export default class WebDriverInterception {\n      */\n     abort(once?: boolean) {\n         this.#ensureNotRestored()\n-        this.#respondOverwrites.push({ abort: true, once })\n+        this.#requestOverwrites = this.#setOverwrite(this.#requestOverwrites, { abort: true, once })\n         return this\n     }\n \n@@ -315,7 +394,7 @@ export default class WebDriverInterception {\n     redirect(redirectUrl: string, once?: boolean) {\n         this.#ensureNotRestored()\n         const requestWith = { url: redirectUrl }\n-        this.#respondOverwrites.push({ requestWith, once })\n+        this.request(requestWith, once)\n         return this\n     }\n \n\ndiff --git a/packages/webdriverio/src/utils/interception/types.ts b/packages/webdriverio/src/utils/interception/types.ts\nindex b42c1059e5c..5f89b9630d4 100644\n--- a/packages/webdriverio/src/utils/interception/types.ts\n+++ b/packages/webdriverio/src/utils/interception/types.ts\n@@ -3,11 +3,9 @@ import type { Cookie } from '@wdio/protocols'\n \n export type MockFilterOptions = {\n     method?: string | ((method: string) => boolean)\n-    headers?: Record<string, string> | ((headers: Record<string, string>) => boolean)\n     requestHeaders?: Record<string, string> | ((headers: Record<string, string>) => boolean)\n     responseHeaders?: Record<string, string> | ((headers: Record<string, string>) => boolean)\n     statusCode?: number | ((statusCode: number) => boolean)\n-    postData?: string | ((payload: string | undefined) => boolean)\n }\n \n type Overwrite <T, Request> = T | ((request: Request) => T)\n@@ -28,5 +26,3 @@ export interface RespondWithOptions extends Omit<RequestWithOptions, 'url' | 'me\n export interface MockRequestOptions {\n     requestWith?: RequestWithOptions\n }\n-\n-export type MockOptions = MockFilterOptions & MockRequestOptions\n\ndiff --git a/packages/webdriverio/src/utils/interception/utils.ts b/packages/webdriverio/src/utils/interception/utils.ts\nindex 025275839ea..3c25d28dd68 100644\n--- a/packages/webdriverio/src/utils/interception/utils.ts\n+++ b/packages/webdriverio/src/utils/interception/utils.ts\n@@ -6,13 +6,18 @@ import type { RequestWithOptions, RespondWithOptions } from './types.js'\n  * @param overwrite request or response overwrite\n  * @returns object to pass to the protocol\n  */\n-export function parseOverwrite(overwrite: RequestWithOptions | RespondWithOptions, request: local.NetworkBeforeRequestSentParameters | local.NetworkResponseCompletedParameters) {\n-    let body: remote.NetworkBytesValue | undefined = undefined\n+export function parseOverwrite<\n+    T extends RequestWithOptions | RespondWithOptions\n+>(\n+    overwrite: T,\n+    request: local.NetworkBeforeRequestSentParameters | local.NetworkResponseCompletedParameters\n+) {\n+    const result: Omit<T extends RequestWithOptions ? remote.NetworkContinueRequestParameters : remote.NetworkContinueResponseParameters, 'request'> = {} as any\n     if ('body' in overwrite && overwrite.body) {\n         const bodyOverwrite = typeof overwrite.body === 'function'\n             ? overwrite.body(request as local.NetworkBeforeRequestSentParameters)\n             : overwrite.body\n-        body = typeof bodyOverwrite === 'string' ?\n+        result.body = typeof bodyOverwrite === 'string' ?\n             /**\n              * if body is a string we can pass it as is\n              */\n@@ -32,23 +37,21 @@ export function parseOverwrite(overwrite: RequestWithOptions | RespondWithOption\n             }\n     }\n \n-    let headers: remote.NetworkHeader[] = []\n-    const headersOverwrite = typeof overwrite.headers === 'function'\n-        ? overwrite.headers(request as local.NetworkBeforeRequestSentParameters)\n-        : overwrite.headers\n-    if (headersOverwrite) {\n-        headers = Object.entries(headersOverwrite).map(([name, value]) => ({\n+    if ('headers' in overwrite) {\n+        const headersOverwrite = typeof overwrite.headers === 'function'\n+            ? overwrite.headers(request as local.NetworkBeforeRequestSentParameters)\n+            : overwrite.headers\n+        result.headers = Object.entries(headersOverwrite || {}).map(([name, value]) => ({\n             name,\n             value: { type: 'string', value }\n         }))\n     }\n \n-    let cookies: remote.NetworkSetCookieHeader[] = []\n     if ('cookies' in overwrite && overwrite.cookies) {\n         const cookieOverwrite = typeof overwrite.cookies === 'function'\n             ? overwrite.cookies(request as local.NetworkBeforeRequestSentParameters) || []\n             : overwrite.cookies\n-        cookies = cookieOverwrite.map((cookie) => ({\n+        result.cookies = cookieOverwrite.map((cookie) => ({\n             name: cookie.name,\n             value: <remote.NetworkStringValue>{\n                 type: 'string',\n@@ -63,26 +66,26 @@ export function parseOverwrite(overwrite: RequestWithOptions | RespondWithOption\n         }))\n     }\n \n-    let statusCode: number | undefined = undefined\n     if ('statusCode' in overwrite && overwrite.statusCode) {\n         const statusCodeOverwrite = typeof overwrite.statusCode === 'function'\n             ? overwrite.statusCode(request as local.NetworkResponseCompletedParameters)\n             : overwrite.statusCode\n-        statusCode = statusCodeOverwrite\n+        ;(result as RespondWithOptions).statusCode = statusCodeOverwrite\n     }\n \n-    const method: string | undefined = 'method' in overwrite\n-        ? typeof overwrite.method === 'function'\n+    if ('method' in overwrite) {\n+        result.method = typeof overwrite.method === 'function'\n             ? overwrite.method(request as local.NetworkBeforeRequestSentParameters)\n             : overwrite.method\n-        : undefined\n+    }\n \n-    const url = 'url' in overwrite\n-        ? typeof overwrite.url === 'function'\n+    if ('url' in overwrite) {\n+        result.url = typeof overwrite.url === 'function'\n             ? overwrite.url(request as local.NetworkBeforeRequestSentParameters)\n             : overwrite.url\n-        : undefined\n-    return { body, headers, cookies, method, statusCode, url }\n+    }\n+\n+    return result\n }\n \n export function getPatternParam (pattern: URLPattern, key: keyof Omit<remote.NetworkUrlPatternPattern, 'type'>) {\n",
    "test_patch": "diff --git a/packages/wdio-cli/tests/__snapshots__/utils.test.ts.snap b/packages/wdio-cli/tests/__snapshots__/utils.test.ts.snap\nindex 17180c58afb..d5ad566d4d9 100644\n--- a/packages/wdio-cli/tests/__snapshots__/utils.test.ts.snap\n+++ b/packages/wdio-cli/tests/__snapshots__/utils.test.ts.snap\n@@ -97,7 +97,7 @@ exports[`getCapabilities > should throw capability not provided 1`] = `[Error: P\n \n exports[`getCapabilities > should throw config not found error 1`] = `[Error: Config File not found: ./test.js]`;\n \n-exports[`getCapabilities > should throw config not found error 2`] = `[Error: Could not parse ./test.js, failed with error : ups]`;\n+exports[`getCapabilities > should throw config not found error 2`] = `[Error: Could not parse ./test.js, failed with error: ups]`;\n \n exports[`npmInstall 1`] = `\n [\n\ndiff --git a/packages/webdriverio/tests/utils/interception/index.test.ts b/packages/webdriverio/tests/utils/interception/index.test.ts\nnew file mode 100644\nindex 00000000000..781f8b0e02a\n--- /dev/null\n+++ b/packages/webdriverio/tests/utils/interception/index.test.ts\n@@ -0,0 +1,192 @@\n+import { EventEmitter } from 'node:events'\n+import { describe, it, expect, vi } from 'vitest'\n+import WebDriverInterception from '../../../src/utils/interception/index.js'\n+\n+describe('WebDriverInterception', () => {\n+    it('initiate', async () => {\n+        const browser: any = {\n+            on: vi.fn(),\n+            sessionSubscribe: vi.fn().mockReturnValue(Promise.resolve()),\n+            networkAddIntercept: vi.fn().mockReturnValue(Promise.resolve({ intercept: '123' }))\n+        }\n+        const mock = await WebDriverInterception.initiate('http://foobar.com:1234/foo/bar.html?foo=bar', {\n+            method: 'GET',\n+            requestHeaders: { foo: 'bar' },\n+            responseHeaders: { bar: 'foo' },\n+            statusCode: 200\n+        }, browser)\n+        expect(mock).toBeInstanceOf(WebDriverInterception)\n+        expect(browser.on).toHaveBeenCalledTimes(2)\n+        expect(browser.sessionSubscribe).toHaveBeenCalledTimes(1)\n+        expect(browser.networkAddIntercept).toHaveBeenCalledTimes(1)\n+        expect(browser.networkAddIntercept.mock.calls).toMatchInlineSnapshot(`\n+          [\n+            [\n+              {\n+                \"phases\": [\n+                  \"beforeRequestSent\",\n+                  \"responseStarted\",\n+                ],\n+                \"urlPatterns\": [\n+                  {\n+                    \"hostname\": \"foobar.com\",\n+                    \"pathname\": \"/foo/bar.html\",\n+                    \"port\": \"1234\",\n+                    \"protocol\": \"http\",\n+                    \"search\": \"foo=bar\",\n+                    \"type\": \"pattern\",\n+                  },\n+                ],\n+              },\n+            ],\n+          ]\n+        `)\n+    })\n+\n+    it('handleBeforeRequestSent', async () => {\n+        const browser: any = new EventEmitter()\n+        browser.sessionSubscribe = vi.fn().mockReturnValue(Promise.resolve())\n+        browser.networkAddIntercept = vi.fn().mockReturnValue(Promise.resolve({ intercept: '123' }))\n+        browser.networkContinueRequest = vi.fn().mockReturnValue(Promise.resolve())\n+        browser.networkFailRequest = vi.fn().mockReturnValue(Promise.resolve())\n+        const mock = await WebDriverInterception.initiate('http://foobar.com:1234/foo/bar.html?foo=bar', {\n+            method: 'GET',\n+            requestHeaders: { foo: 'bar' },\n+            responseHeaders: { bar: 'foo' },\n+            statusCode: 200\n+        }, browser)\n+        browser.emit('network.beforeRequestSent', {\n+            request: {\n+                url: 'http://foobar.com:1234/foo/bar.html?foo=bar',\n+                method: 'GET',\n+                headers: [{ name: 'foo', value: { type: 'string', value: 'bar' } }]\n+            }\n+        })\n+        expect(browser.networkFailRequest).toHaveBeenCalledTimes(0)\n+        expect(browser.networkContinueRequest).toHaveBeenCalledTimes(0)\n+\n+        mock.abort()\n+        browser.emit('network.beforeRequestSent', {\n+            isBlocked: true,\n+            request: {\n+                request: 123,\n+                url: 'http://foobar.com:1234/foo/bar.html?foo=bar',\n+                method: 'POST',\n+                headers: []\n+            }\n+        })\n+        expect(browser.networkFailRequest).toHaveBeenCalledTimes(0)\n+        expect(browser.networkContinueRequest).toHaveBeenCalledWith({ request: 123 })\n+        browser.networkContinueRequest.mockClear()\n+        browser.networkFailRequest.mockClear()\n+        mock.reset()\n+\n+        const blockedRequest = {\n+            isBlocked: true,\n+            request: {\n+                request: 123,\n+                url: 'http://foobar.com:1234/foo/bar.html?foo=bar',\n+                method: 'GET',\n+                headers: [{ name: 'foo', value: { type: 'string', value: 'bar' } }]\n+            }\n+        }\n+        browser.emit('network.beforeRequestSent', blockedRequest)\n+        expect(browser.networkFailRequest).toHaveBeenCalledTimes(0)\n+        expect(browser.networkContinueRequest).toHaveBeenCalledTimes(1)\n+        expect(browser.networkContinueRequest).toHaveBeenCalledWith({ request: 123 })\n+        browser.networkContinueRequest.mockClear()\n+\n+        mock.redirect('https://webdriver.io')\n+        browser.emit('network.beforeRequestSent', blockedRequest)\n+        expect(browser.networkFailRequest).toHaveBeenCalledTimes(0)\n+        expect(browser.networkContinueRequest).toHaveBeenCalledWith({\n+            request: 123,\n+            url: 'https://webdriver.io'\n+        })\n+        browser.networkContinueRequest.mockClear()\n+\n+        mock.abort()\n+        browser.emit('network.beforeRequestSent', blockedRequest)\n+        expect(browser.networkFailRequest).toHaveBeenCalledWith({ request: 123 })\n+        expect(browser.networkContinueRequest).toHaveBeenCalledTimes(0)\n+        browser.networkContinueRequest.mockClear()\n+        browser.networkFailRequest.mockClear()\n+\n+        mock.request({ method: 'POST', headers: { foo: 'bar' }, body: 'foobar' })\n+        browser.emit('network.beforeRequestSent', blockedRequest)\n+        expect(browser.networkFailRequest).toHaveBeenCalledTimes(0)\n+        expect(browser.networkContinueRequest.mock.calls).toMatchInlineSnapshot(`\n+          [\n+            [\n+              {\n+                \"body\": {\n+                  \"type\": \"string\",\n+                  \"value\": \"foobar\",\n+                },\n+                \"headers\": [\n+                  {\n+                    \"name\": \"foo\",\n+                    \"value\": {\n+                      \"type\": \"string\",\n+                      \"value\": \"bar\",\n+                    },\n+                  },\n+                ],\n+                \"method\": \"POST\",\n+                \"request\": 123,\n+              },\n+            ],\n+          ]\n+        `)\n+        browser.networkContinueRequest.mockClear()\n+        browser.networkFailRequest.mockClear()\n+\n+        /**\n+         * allows to overwrite mock behavior, e.g. by having a mock to abort\n+         */\n+        mock.abort()\n+        browser.emit('network.beforeRequestSent', blockedRequest)\n+        expect(browser.networkFailRequest).toHaveBeenCalledWith({ request: 123 })\n+        expect(browser.networkContinueRequest).toHaveBeenCalledTimes(0)\n+        browser.networkContinueRequest.mockClear()\n+        browser.networkFailRequest.mockClear()\n+\n+        mock.requestOnce({ method: 'POST', headers: { foo: 'bar' }, body: 'foobar' })\n+        mock.abortOnce()\n+        browser.emit('network.beforeRequestSent', blockedRequest)\n+        expect(browser.networkFailRequest).toHaveBeenCalledTimes(0)\n+        expect(browser.networkContinueRequest.mock.calls).toMatchInlineSnapshot(`\n+          [\n+            [\n+              {\n+                \"body\": {\n+                  \"type\": \"string\",\n+                  \"value\": \"foobar\",\n+                },\n+                \"headers\": [\n+                  {\n+                    \"name\": \"foo\",\n+                    \"value\": {\n+                      \"type\": \"string\",\n+                      \"value\": \"bar\",\n+                    },\n+                  },\n+                ],\n+                \"method\": \"POST\",\n+                \"request\": 123,\n+              },\n+            ],\n+          ]\n+        `)\n+        browser.networkContinueRequest.mockClear()\n+        browser.networkFailRequest.mockClear()\n+        browser.emit('network.beforeRequestSent', blockedRequest)\n+        expect(browser.networkFailRequest).toHaveBeenCalledWith({ request: 123 })\n+        expect(browser.networkContinueRequest).toHaveBeenCalledTimes(0)\n+        browser.networkContinueRequest.mockClear()\n+        browser.networkFailRequest.mockClear()\n+        browser.emit('network.beforeRequestSent', blockedRequest)\n+        expect(browser.networkContinueRequest).toHaveBeenCalledWith({ request: 123 })\n+        expect(browser.networkFailRequest).toHaveBeenCalledTimes(0)\n+    })\n+})\n\ndiff --git a/packages/webdriverio/tests/utils/interception/utils.test.ts b/packages/webdriverio/tests/utils/interception/utils.test.ts\nindex b5d379f9e3a..e8ad5d27f20 100644\n--- a/packages/webdriverio/tests/utils/interception/utils.test.ts\n+++ b/packages/webdriverio/tests/utils/interception/utils.test.ts\n@@ -3,16 +3,7 @@ import { parseOverwrite, getPatternParam } from '../../../src/utils/interception\n \n describe('parseOverwrite', () => {\n     it('should parse request overwrite', () => {\n-        expect(parseOverwrite({}, {} as any)).toMatchInlineSnapshot(`\n-          {\n-            \"body\": undefined,\n-            \"cookies\": [],\n-            \"headers\": [],\n-            \"method\": undefined,\n-            \"statusCode\": undefined,\n-            \"url\": undefined,\n-          }\n-        `)\n+        expect(parseOverwrite({}, {} as any)).toEqual({})\n         expect(parseOverwrite({\n             body: 'foobar',\n             headers: { foo: 'bar' },\n\ndiff --git a/tests/typings/webdriverio/async.ts b/tests/typings/webdriverio/async.ts\nindex 4628b87e80e..18528fa9c68 100644\n--- a/tests/typings/webdriverio/async.ts\n+++ b/tests/typings/webdriverio/async.ts\n@@ -418,7 +418,7 @@ async function bar() {\n     browser.mock('**/image.jpg')\n     const mock = await browser.mock('**/image.jpg', {\n         method: 'get',\n-        headers: { foo: 'bar' }\n+        requestHeaders: { foo: 'bar' }\n     })\n     mock.abort(true)\n     mock.abortOnce()\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-13051",
    "pr_id": 13051,
    "issue_id": 12591,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[🐛 Bug]: VSCode adds parentheses around methods during auto-completion\n### Have you read the Contributing Guidelines on issues?\r\n\r\n- [X] I have read the [Contributing Guidelines on issues](https://github.com/webdriverio/webdriverio/blob/main/CONTRIBUTING.md#reporting-new-issues).\r\n\r\n### WebdriverIO Version\r\n\r\n8.35.0\r\n\r\n### Node.js Version\r\n\r\n20\r\n\r\n### Mode\r\n\r\nWDIO Testrunner\r\n\r\n### Which capabilities are you using?\r\n\r\n```typescript\r\n{\r\n    browserName: 'chrome'\r\n}\r\n```\r\n\r\n\r\n### What happened?\r\n\r\nI have encountered strange behavior with auto-inserting unwanted parentheses around WDIO methods in VSCode.\r\n\r\nPerhaps this is due to the way VSCode interprets types and doesn't recognize that this methods can be chained.\r\nOr could it be a bug in the WDIO types?\r\n\r\nMaybe someone has encountered such behavior and can give advice or a solution.\r\n\r\n### What is your expected behavior?\r\n\r\n_No response_\r\n\r\n### How to reproduce the bug.\r\n\r\nRepo to reproduce: https://github.com/k03mad/wdio-reproduce-autocomplete\r\nCreated with the default `npm init wdio@latest .`\r\n\r\nReproduced in both GitHub Codespaces and local VSCode installations.\r\nPlease refer to the GIF below.\r\n\r\n### Relevant log output\r\n\r\nFile: `wdio-reproduce-autocomplete/test/pageobjects/login.page.js`\r\n\r\n![](https://github.com/k03mad/wdio-reproduce-autocomplete/raw/master/autocomplete.gif)\r\n\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's Code of Conduct\r\n\r\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues",
    "issue_word_count": 214,
    "test_files_count": 6,
    "non_test_files_count": 10,
    "pr_changed_files": [
      "packages/wdio-browser-runner/src/browser/expect.ts",
      "packages/wdio-utils/src/shim.ts",
      "packages/webdriverio/src/commands/element/dragAndDrop.ts",
      "packages/webdriverio/src/commands/element/isExisting.ts",
      "packages/webdriverio/src/types.ts",
      "packages/webdriverio/src/utils/actions/pointer.ts",
      "packages/webdriverio/src/utils/actions/wheel.ts",
      "packages/webdriverio/src/utils/implicitWait.ts",
      "packages/webdriverio/src/utils/index.ts",
      "packages/webdriverio/src/utils/refetchElement.ts",
      "packages/webdriverio/tests/commands/element/shadow$$.test.ts",
      "packages/webdriverio/tests/commands/element/shadow$.test.ts",
      "packages/webdriverio/tests/commands/element/waitForClickable.test.ts",
      "packages/webdriverio/tests/commands/element/waitForDisplayed.test.ts",
      "tests/typings/webdriverio/async.ts",
      "tests/typings/webdriverio/globalImport.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/element/shadow$$.test.ts",
      "packages/webdriverio/tests/commands/element/shadow$.test.ts",
      "packages/webdriverio/tests/commands/element/waitForClickable.test.ts",
      "packages/webdriverio/tests/commands/element/waitForDisplayed.test.ts",
      "tests/typings/webdriverio/async.ts",
      "tests/typings/webdriverio/globalImport.ts"
    ],
    "base_commit": "c38781b567a344b47a59c9401d30d398dd7799d1",
    "head_commit": "4beaecc503f6abaa6c7352e6ab57a867e404622c",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/13051",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/13051",
    "dockerfile": "",
    "pr_merged_at": "2024-06-20T01:55:55.000Z",
    "patch": "diff --git a/packages/wdio-browser-runner/src/browser/expect.ts b/packages/wdio-browser-runner/src/browser/expect.ts\nindex 96d7b62682b..9e355924da7 100644\n--- a/packages/wdio-browser-runner/src/browser/expect.ts\n+++ b/packages/wdio-browser-runner/src/browser/expect.ts\n@@ -31,7 +31,7 @@ const COMMAND_TIMEOUT = 30 * 1000 // 30s\n  * @returns a matcher result computed in the Node.js environment\n  */\n function createMatcher (matcherName: string) {\n-    return async function (this: MatcherContext, context: WebdriverIO.Browser | WebdriverIO.Element | ChainablePromiseElement<WebdriverIO.Element> | ChainablePromiseArray, ...args: any[]) {\n+    return async function (this: MatcherContext, context: WebdriverIO.Browser | WebdriverIO.Element | ChainablePromiseElement | ChainablePromiseArray, ...args: any[]) {\n         const cid = getCID()\n         if (!import.meta.hot || !cid) {\n             return {\n\ndiff --git a/packages/wdio-utils/src/shim.ts b/packages/wdio-utils/src/shim.ts\nindex ff552d32730..cb0f80de58b 100644\n--- a/packages/wdio-utils/src/shim.ts\n+++ b/packages/wdio-utils/src/shim.ts\n@@ -19,6 +19,7 @@ const ELEMENT_PROPS = [\n ]\n const ACTION_COMMANDS = ['action', 'actions']\n const PROMISE_METHODS = ['then', 'catch', 'finally']\n+const ELEMENT_RETURN_COMMANDS = ['getElement', 'getElements']\n \n const TIME_BUFFER = 3\n \n@@ -238,6 +239,16 @@ export function wrapCommand<T>(commandName: string, fn: Function): (...args: any\n                         return target[prop as 'then' | 'catch' | 'finally'].bind(target)\n                     }\n \n+                    /**\n+                     * Convenience methods to get the element promise. Technically we could just\n+                     * await an `ChainablePromiseElement` directly but this causes bad DX when\n+                     * chaining commands and e.g. VS Code tries to wrap promises around thenable\n+                     * objects.\n+                     */\n+                    if (ELEMENT_RETURN_COMMANDS.includes(prop)) {\n+                        return () => target\n+                    }\n+\n                     /**\n                      * call a command on an element query, e.g.:\n                      * ```js\n\ndiff --git a/packages/webdriverio/src/commands/element/dragAndDrop.ts b/packages/webdriverio/src/commands/element/dragAndDrop.ts\nindex 11c369b0cb4..71369054754 100644\n--- a/packages/webdriverio/src/commands/element/dragAndDrop.ts\n+++ b/packages/webdriverio/src/commands/element/dragAndDrop.ts\n@@ -3,6 +3,8 @@ import type { ElementReference } from '@wdio/protocols'\n \n import { getBrowserObject } from '@wdio/utils'\n \n+import type { ChainablePromiseElement } from '../../types.js'\n+\n const ACTION_BUTTON = 0 as const\n \n type DragAndDropOptions = {\n@@ -47,7 +49,7 @@ type ElementCoordinates = {\n  */\n export async function dragAndDrop (\n     this: WebdriverIO.Element,\n-    target: WebdriverIO.Element | ElementCoordinates,\n+    target: WebdriverIO.Element | ChainablePromiseElement | ElementCoordinates,\n     { duration = 10 }: DragAndDropOptions = {}\n ) {\n     const moveToCoordinates = target as ElementCoordinates\n\ndiff --git a/packages/webdriverio/src/commands/element/isExisting.ts b/packages/webdriverio/src/commands/element/isExisting.ts\nindex bc7fc4dbcca..85585b8dfdb 100644\n--- a/packages/webdriverio/src/commands/element/isExisting.ts\n+++ b/packages/webdriverio/src/commands/element/isExisting.ts\n@@ -66,5 +66,7 @@ export async function isExisting (this: WebdriverIO.Element) {\n         : this.isShadowElement\n             ? this.shadow$$.bind(this.parent)\n             : this.parent.$$.bind(this.parent)\n-    return command(this.selector as string).then((res) => res.length > 0)\n+    return command(this.selector as string)\n+        .getElements()\n+        .then((res) => res.length > 0)\n }\n\ndiff --git a/packages/webdriverio/src/types.ts b/packages/webdriverio/src/types.ts\nindex b89b16b4e99..068d41ab0e6 100644\n--- a/packages/webdriverio/src/types.ts\n+++ b/packages/webdriverio/src/types.ts\n@@ -16,9 +16,9 @@ type $ElementCommands = typeof ElementCommands\n type ElementQueryCommands = '$' | 'custom$' | 'shadow$' | 'react$'\n type ElementsQueryCommands = '$$' | 'custom$$' | 'shadow$$' | 'react$$'\n type ChainablePrototype = {\n-    [K in ElementQueryCommands]: (...args: Parameters<$ElementCommands[K]>) => ChainablePromiseElement<ThenArg<ReturnType<$ElementCommands[K]>>>\n+    [K in ElementQueryCommands]: (...args: Parameters<$ElementCommands[K]>) => ChainablePromiseElement\n } & {\n-    [K in ElementsQueryCommands]: (...args: Parameters<$ElementCommands[K]>) => ChainablePromiseArray<ThenArg<ReturnType<$ElementCommands[K]>>>\n+    [K in ElementsQueryCommands]: (...args: Parameters<$ElementCommands[K]>) => ChainablePromiseArray\n }\n \n type AsyncElementProto = {\n@@ -49,11 +49,14 @@ interface ChainablePromiseBaseElement {\n      * index of the element if fetched with `$$`\n      */\n     index?: Promise<number>\n+    /**\n+     * get the `WebdriverIO.Element` reference\n+     */\n+    getElement(): Promise<WebdriverIO.Element>\n }\n-export interface ChainablePromiseElement<T> extends\n+export interface ChainablePromiseElement extends\n     ChainablePromiseBaseElement,\n     AsyncElementProto,\n-    Promise<T>,\n     Omit<WebdriverIO.Element, keyof ChainablePromiseBaseElement | keyof AsyncElementProto> {}\n \n interface AsyncIterators<T> {\n@@ -77,7 +80,7 @@ interface AsyncIterators<T> {\n     reduce: <T, U>(callback: (accumulator: U, currentValue: WebdriverIO.Element, currentIndex: number, array: T[]) => U | Promise<U>, initialValue?: U) => Promise<U>;\n }\n \n-export interface ChainablePromiseArray<T> extends Promise<T>, AsyncIterators<T> {\n+export interface ChainablePromiseArray extends AsyncIterators<WebdriverIO.Element> {\n     [Symbol.asyncIterator](): AsyncIterableIterator<WebdriverIO.Element>\n \n     /**\n@@ -98,7 +101,11 @@ export interface ChainablePromiseArray<T> extends Promise<T>, AsyncIterators<T>\n     /**\n      * allow to access a specific index of the element set\n      */\n-    [n: number]: ChainablePromiseElement<WebdriverIO.Element | undefined>\n+    [n: number]: ChainablePromiseElement\n+    /**\n+     * get the `WebdriverIO.Element[]` list\n+     */\n+    getElements(): Promise<WebdriverIO.ElementArray>\n }\n \n export type BrowserCommandsType = Omit<$BrowserCommands, keyof ChainablePrototype> & ChainablePrototype\n\ndiff --git a/packages/webdriverio/src/utils/actions/pointer.ts b/packages/webdriverio/src/utils/actions/pointer.ts\nindex 79aa411ff8f..49a3fed8484 100644\n--- a/packages/webdriverio/src/utils/actions/pointer.ts\n+++ b/packages/webdriverio/src/utils/actions/pointer.ts\n@@ -42,7 +42,7 @@ const MOVE_PARAM_DEFAULTS = {\n     x: 0,\n     y: 0,\n     duration: 100,\n-    origin: ORIGIN_DEFAULT as (Origin | ElementReference | ChainablePromiseElement<WebdriverIO.Element> | WebdriverIO.Element)\n+    origin: ORIGIN_DEFAULT as (Origin | ElementReference | ChainablePromiseElement | WebdriverIO.Element)\n }\n \n type PointerActionParams = Partial<typeof PARAM_DEFAULTS> & Partial<PointerActionUpParams>\n\ndiff --git a/packages/webdriverio/src/utils/actions/wheel.ts b/packages/webdriverio/src/utils/actions/wheel.ts\nindex 99761146037..6b37b60efbc 100644\n--- a/packages/webdriverio/src/utils/actions/wheel.ts\n+++ b/packages/webdriverio/src/utils/actions/wheel.ts\n@@ -22,7 +22,7 @@ export interface ScrollParams {\n     /**\n      * element origin\n      */\n-    origin?: WebdriverIO.Element | ChainablePromiseElement<WebdriverIO.Element>\n+    origin?: WebdriverIO.Element | ChainablePromiseElement\n     /**\n      * duration ratio be the ratio of time delta and duration\n      */\n\ndiff --git a/packages/webdriverio/src/utils/implicitWait.ts b/packages/webdriverio/src/utils/implicitWait.ts\nindex 47d37523f26..9c4d9bcca84 100644\n--- a/packages/webdriverio/src/utils/implicitWait.ts\n+++ b/packages/webdriverio/src/utils/implicitWait.ts\n@@ -19,7 +19,7 @@ export default async function implicitWait (currentElement: WebdriverIO.Element,\n             /**\n              * if waitForExist was successful requery element and assign elementId to the scope\n              */\n-            return (currentElement.parent as WebdriverIO.Element).$(currentElement.selector)\n+            return (currentElement.parent as WebdriverIO.Element).$(currentElement.selector).getElement()\n         } catch {\n             if (currentElement.selector.toString().includes('this.previousElementSibling')) {\n                 throw new Error(\n\ndiff --git a/packages/webdriverio/src/utils/index.ts b/packages/webdriverio/src/utils/index.ts\nindex 4dc6b50ae1e..6045e0d3763 100644\n--- a/packages/webdriverio/src/utils/index.ts\n+++ b/packages/webdriverio/src/utils/index.ts\n@@ -665,7 +665,7 @@ export async function hasElementId (element: WebdriverIO.Element) {\n             : element.isShadowElement\n                 ? element.parent.shadow$.bind(element.parent)\n                 : element.parent.$.bind(element.parent)\n-        element.elementId = (await command(element.selector as string)).elementId\n+        element.elementId = (await command(element.selector as string).getElement()).elementId\n     }\n \n     /*\n\ndiff --git a/packages/webdriverio/src/utils/refetchElement.ts b/packages/webdriverio/src/utils/refetchElement.ts\nindex 3f370c8154e..c025e420860 100644\n--- a/packages/webdriverio/src/utils/refetchElement.ts\n+++ b/packages/webdriverio/src/utils/refetchElement.ts\n@@ -30,8 +30,8 @@ export default async function refetchElement (\n      */\n     return selectors.reduce(async (elementPromise, { selector, index }, currentIndex) => {\n         const resolvedElement = await elementPromise\n-        let nextElement = index > 0 ? (await resolvedElement.$$(selector as string))[index] : null\n-        nextElement = nextElement || await resolvedElement.$(selector)\n+        let nextElement = index > 0 ? await resolvedElement.$$(selector as string)[index]?.getElement() : null\n+        nextElement = nextElement || await resolvedElement.$(selector).getElement()\n         /**\n          *  For error purposes, changing command name to '$' if we aren't\n          *  on the last element of the array\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/element/shadow$$.test.ts b/packages/webdriverio/tests/commands/element/shadow$$.test.ts\nindex 376594e12e0..d959376e026 100644\n--- a/packages/webdriverio/tests/commands/element/shadow$$.test.ts\n+++ b/packages/webdriverio/tests/commands/element/shadow$$.test.ts\n@@ -58,15 +58,19 @@ describe('shadow$$', () => {\n         })\n         const errorResponse = { error: 'ups' }\n         const el = await browser.$('#foo')\n+        // @ts-expect-error mock feature\n         fetch.setMockResponse([errorResponse, errorResponse, errorResponse, errorResponse])\n+        const queryResult = [{ elem: 123 }]\n+        // @ts-expect-error\n+        queryResult.getElements = vi.fn().mockReturnValue(queryResult)\n         const mock: any = {\n             $$: vi.fn().mockReturnValue([{ elem: 123 }]),\n             options: {},\n             selector: 'foo',\n         }\n-        mock.parent = { $: vi.fn().mockReturnValue({}) }\n+        mock.parent = { $: vi.fn().mockReturnValue({ getElement: () => ({}) }) }\n         mock.waitForExist = vi.fn().mockResolvedValue(mock)\n-        const elem = await el.shadow$$.call(mock, '#shadowfoo')\n+        const elem = await el.shadow$$.call(mock, '#shadowfoo').getElements()\n         expect(elem).toEqual([{ elem: 123 }])\n \n         expect(vi.mocked(fetch).mock.calls[1][0]!.pathname)\n\ndiff --git a/packages/webdriverio/tests/commands/element/shadow$.test.ts b/packages/webdriverio/tests/commands/element/shadow$.test.ts\nindex 10a1a0ff172..b64f730286e 100644\n--- a/packages/webdriverio/tests/commands/element/shadow$.test.ts\n+++ b/packages/webdriverio/tests/commands/element/shadow$.test.ts\n@@ -32,9 +32,9 @@ describe('shadow$', () => {\n         expect(subElem.elementId).toBe('some-shadow-sub-elem-321')\n         expect(subElem[ELEMENT_KEY]).toBe('some-shadow-sub-elem-321')\n \n-        expect(vi.mocked(fetch).mock.calls[2][0]!.pathname)\n+        expect((vi.mocked(fetch).mock.calls[2][0] as any).pathname)\n             .toBe('/session/foobar-123/element/some-elem-123/shadow')\n-        expect(vi.mocked(fetch).mock.calls[3][0]!.pathname)\n+        expect((vi.mocked(fetch).mock.calls[3][0] as any).pathname)\n             .toBe('/session/foobar-123/shadow/some-shadow-elem-123/element')\n     })\n \n@@ -63,18 +63,19 @@ describe('shadow$', () => {\n         })\n         const errorResponse = { error: 'ups' }\n         const el = await browser.$('#foo')\n+        // @ts-expect-error mock feature\n         fetch.setMockResponse([errorResponse, errorResponse, errorResponse, errorResponse])\n         const mock: any = {\n             $: vi.fn().mockReturnValue({ elem: 123 }),\n             options: {},\n             selector: 'foo',\n         }\n-        mock.parent = { $: vi.fn().mockReturnValue({}) }\n+        mock.parent = { $: vi.fn().mockReturnValue({ getElement: () => ({}) }) }\n         mock.waitForExist = vi.fn().mockResolvedValue(mock)\n         const elem = await el.shadow$.call(mock, '#shadowfoo')\n         expect(elem).toEqual({ elem: 123 })\n \n-        expect(vi.mocked(fetch).mock.calls[1][0]!.pathname)\n+        expect((vi.mocked(fetch).mock.calls[1][0] as any).pathname)\n             .toBe('/session/foobar-123/element')\n     })\n })\n\ndiff --git a/packages/webdriverio/tests/commands/element/waitForClickable.test.ts b/packages/webdriverio/tests/commands/element/waitForClickable.test.ts\nindex d0881bb5553..ab8263841e1 100644\n--- a/packages/webdriverio/tests/commands/element/waitForClickable.test.ts\n+++ b/packages/webdriverio/tests/commands/element/waitForClickable.test.ts\n@@ -99,6 +99,7 @@ describe('waitForClickable', () => {\n             isClickable : tmpElem.isClickable,\n             options : { waitforTimeout : 500, waitforInterval: 50 },\n         }\n+        elem.getElement = () => Promise.resolve(elem)\n \n         try {\n             await elem.waitForClickable({ timeout: duration })\n\ndiff --git a/packages/webdriverio/tests/commands/element/waitForDisplayed.test.ts b/packages/webdriverio/tests/commands/element/waitForDisplayed.test.ts\nindex 9b0219d599b..54f3c31ae34 100644\n--- a/packages/webdriverio/tests/commands/element/waitForDisplayed.test.ts\n+++ b/packages/webdriverio/tests/commands/element/waitForDisplayed.test.ts\n@@ -97,6 +97,8 @@ describe('waitForDisplayed', () => {\n             isDisplayed: tmpElem.isDisplayed,\n             options: { waitforTimeout: 500, waitforInterval: 50 },\n         } as any as WebdriverIO.Element\n+        // @ts-expect-error\n+        elem.getElement = () => Promise.resolve(elem)\n \n         try {\n             await elem.waitForDisplayed({ timeout })\n\ndiff --git a/tests/typings/webdriverio/async.ts b/tests/typings/webdriverio/async.ts\nindex 170619ebfc7..4628b87e80e 100644\n--- a/tests/typings/webdriverio/async.ts\n+++ b/tests/typings/webdriverio/async.ts\n@@ -66,7 +66,7 @@ async function bar() {\n     // instances array\n     expectType<string[]>(mr.instances)\n \n-    const elements = await browser.$$('foo')\n+    const elements = await browser.$$('foo').getElements()\n     expectType<string>(elements.foundWith)\n \n     ////////////////////////////////////////////////////////////////////////////////\n@@ -80,8 +80,11 @@ async function bar() {\n \n     const elemA = await remoteBrowser.$('')\n     const elemB = await remoteBrowser.$('')\n-    const multipleElems = await $$([elemA, elemB])\n+    const multipleElems = await $$([elemA, elemB]).getElements()\n+    const multipleElemsChain = $$([elemA, elemB])\n     expectType<WebdriverIO.ElementArray>(multipleElems)\n+    // @ts-expect-error\n+    expectType<ChainablePromiseArray>(multipleElemsChain)\n \n     ////////////////////////////////////////////////////////////////////////////////\n \n@@ -142,7 +145,7 @@ async function bar() {\n     )\n     expectType<true | void>(waitUntil)\n     const waitUntilElems = await browser.waitUntil(async () => {\n-        const elems = await $$('elems')\n+        const elems = await $$('elems').getElements()\n         if (elems.length < 2) {\n             return false\n         }\n@@ -247,7 +250,7 @@ async function bar() {\n     expectType<number>(ambientResult)\n \n     // $\n-    const el1 = await $('')\n+    const el1 = await $('').getElement()\n     const strFunction = (str: string) => str\n     strFunction(el1.selector as string)\n     strFunction(el1.elementId)\n@@ -303,7 +306,7 @@ async function bar() {\n     expectType<number>(elcResult)\n \n     // $$\n-    const elems = await $$('')\n+    const elems = await $$('').getElements()\n     const el4 = elems[0]\n     const el5 = await el4.$('')\n     expectType<string>(await el4.getAttribute('class'))\n@@ -377,7 +380,7 @@ async function bar() {\n     const ele = await $('')\n     const touchAction: TouchAction = {\n         action: 'longPress',\n-        element: await $(''),\n+        element: await $('').getElement(),\n         ms: 0,\n         x: 0,\n         y: 0\n@@ -439,7 +442,7 @@ async function bar() {\n \n     // async chain API\n     expectType<WebdriverIO.Element>(\n-        await browser.$('foo').$('bar').$$('loo')[2].$('foo').$('bar'))\n+        await browser.$('foo').$('bar').$$('loo')[2].$('foo').$('bar').getElement())\n     expectType<Selector>(\n         await browser.$('foo').$('bar').selector)\n     expectType<Error>(\n@@ -457,7 +460,7 @@ async function bar() {\n \n     // promise chain API\n     expectType<string>(\n-        await browser.$('foo').then(_ => _.getText()))\n+        await browser.$('foo').getElement().then(_ => _.getText()))\n \n     expectType<void>(\n         await browser.$$('foo').forEach(() => true)\n\ndiff --git a/tests/typings/webdriverio/globalImport.ts b/tests/typings/webdriverio/globalImport.ts\nindex 42ad0bc2635..b420c7e6a9b 100644\n--- a/tests/typings/webdriverio/globalImport.ts\n+++ b/tests/typings/webdriverio/globalImport.ts\n@@ -3,12 +3,12 @@ import { $, $$, browser, driver, multiremotebrowser } from '@wdio/globals'\n import { fn, spyOn, mock, unmock, mocked } from '@wdio/browser-runner'\n \n ;(async () => {\n-    const elem = await $('foo')\n+    const elem = await $('foo').getElement()\n     expectType<string>(elem.elementId)\n     const label = await $('foo').$('bar').getComputedLabel()\n     expectType<string>(label)\n \n-    const elems = await $$('foo')\n+    const elems = await $$('foo').getElements()\n     expectType<string>(elems.foundWith)\n     const tagNames = await $$('foo').map((el) => el.getTagName())\n     expectType<string[]>(tagNames)\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-12891",
    "pr_id": 12891,
    "issue_id": 12663,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[💡 Feature]: Find the `wdio.conf.ts` if you call `wdio` without anything else\n### Is your feature request related to a problem?\n\nIf you currently run `npx wdio` and use TypeScript it will fail, saying it can't find the config file `wdio.conf.js`.\n\n### Describe the solution you'd like.\n\nMake it check for a default TS version of the config file.\n\n### Describe alternatives you've considered.\n\nn/a\n\n### Additional context\n\nn/a\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct",
    "issue_word_count": 87,
    "test_files_count": 1,
    "non_test_files_count": 1,
    "pr_changed_files": [
      "packages/wdio-cli/src/commands/run.ts",
      "packages/wdio-cli/tests/commands/run.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/wdio-cli/tests/commands/run.test.ts"
    ],
    "base_commit": "dc8dd0f2d21249b72307c03dc4b8ceceaeabc94c",
    "head_commit": "9576c474326a7306548bfef51676dc1550ee8da8",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/12891",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/12891",
    "dockerfile": "",
    "pr_merged_at": "2024-06-03T14:38:04.000Z",
    "patch": "diff --git a/packages/wdio-cli/src/commands/run.ts b/packages/wdio-cli/src/commands/run.ts\nindex 5ae46325151..11ca849bd8a 100644\n--- a/packages/wdio-cli/src/commands/run.ts\n+++ b/packages/wdio-cli/src/commands/run.ts\n@@ -210,7 +210,7 @@ export async function handler(argv: RunCommandArguments) {\n      */\n     const nodePath = process.argv[0]\n     let NODE_OPTIONS = process.env.NODE_OPTIONS || ''\n-    const isTSFile = wdioConf.fullPath.endsWith('.ts') || wdioConf.fullPath.endsWith('.mts')\n+    const isTSFile = wdioConf.fullPath.endsWith('.ts') || wdioConf.fullPath.endsWith('.mts') || confAccess?.endsWith('.ts') || confAccess?.endsWith('.mts')\n     const runsWithLoader = (\n         Boolean(\n             process.argv.find((arg) => arg.startsWith('--import') || arg.startsWith('--loader')) &&\n",
    "test_patch": "diff --git a/packages/wdio-cli/tests/commands/run.test.ts b/packages/wdio-cli/tests/commands/run.test.ts\nindex 41c2116ba71..9129cf4b1e2 100644\n--- a/packages/wdio-cli/tests/commands/run.test.ts\n+++ b/packages/wdio-cli/tests/commands/run.test.ts\n@@ -48,6 +48,7 @@ describe('Command: run', () => {\n \n     beforeEach(() => {\n         vi.mocked(fs.access).mockClear()\n+        vi.mocked(execa).mockClear()\n         vi.spyOn(configCmd, 'missingConfigurationPrompt').mockImplementation((): Promise<never> => {\n             return undefined as never\n         })\n@@ -64,6 +65,13 @@ describe('Command: run', () => {\n             .toContain('sample.conf')\n     })\n \n+    it('should allow if config is of type .ts ', async () => {\n+        vi.mocked(fs.access).mockResolvedValue()\n+        vi.mocked(execa).mockReturnValue({ on: vi.fn() } as any)\n+        await runCmd.handler({ configPath: 'sample.conf.ts' } as any)\n+        expect(execa).toBeCalled()\n+    })\n+\n     it('should use local conf if nothing defined', async () => {\n         await runCmd.handler({ argv: {} } as any)\n         expect(fs.access).toBeCalledTimes(6)\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  },
  {
    "instance_id": "webdriverio__webdriverio-12778",
    "pr_id": 12778,
    "issue_id": 12671,
    "repo": "webdriverio/webdriverio",
    "problem_statement": "[💡 Feature]: Support for Grid Managed Downloads\n### Is your feature request related to a problem?\n\nNo\n\n### Describe the solution you'd like.\n\nWebdriverIO should support the use of Selenium Grid manged downloads.\n\n### Describe alternatives you've considered.\n\nI'm not aware of any alternatives for fetching files downloaded onto remote workers.\n\n### Additional context\n\nSelenium Grid version 4.8 introduced support for Manged Download, which allows the Grid to pull files from the remote browser worker to the client using a new `downloadFile` operation. The feature is described at [https://www.selenium.dev/documentation/webdriver/drivers/remote_webdriver/#downloads].\n\n### Code of Conduct\n\n- [X] I agree to follow this project's Code of Conduct",
    "issue_word_count": 110,
    "test_files_count": 1,
    "non_test_files_count": 5,
    "pr_changed_files": [
      "package-lock.json",
      "packages/wdio-protocols/src/protocols/selenium.ts",
      "packages/webdriverio/package.json",
      "packages/webdriverio/src/commands/browser.ts",
      "packages/webdriverio/src/commands/browser/downloadFile.ts",
      "packages/webdriverio/tests/commands/browser/downloadFile.test.ts"
    ],
    "pr_changed_test_files": [
      "packages/webdriverio/tests/commands/browser/downloadFile.test.ts"
    ],
    "base_commit": "1c78854aee8a341b47b0ee6b44c2e148a61a7f5a",
    "head_commit": "0147540d860bc8019faa7e937d52857ae9fcb045",
    "repo_url": "https://github.com/webdriverio/webdriverio/pull/12778",
    "swe_url": "https://swe-bench-plus.turing.com/repos/webdriverio__webdriverio/12778",
    "dockerfile": "",
    "pr_merged_at": "2024-05-23T17:23:40.000Z",
    "patch": "diff --git a/package-lock.json b/package-lock.json\nindex 8f70cf3fd0b..abd989e3bcb 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -21135,6 +21135,11 @@\n       \"resolved\": \"https://registry.npmjs.org/image-ssim/-/image-ssim-0.2.0.tgz\",\n       \"integrity\": \"sha512-W7+sO6/yhxy83L0G7xR8YAc5Z5QFtYEXXRV6EaE8tuYBZJnA3gVgp3q7X7muhLZVodeb9UfvjSbwt9VJwjIYAg==\"\n     },\n+    \"node_modules/immediate\": {\n+      \"version\": \"3.0.6\",\n+      \"resolved\": \"https://registry.npmjs.org/immediate/-/immediate-3.0.6.tgz\",\n+      \"integrity\": \"sha512-XXOFtyqDjNDAQxVfYxuF7g9Il/IbWmmlQg2MYKOH8ExIT1qg6xc4zyS3HaEEATgs1btfzxq15ciUiY7gjSXRGQ==\"\n+    },\n     \"node_modules/import-fresh\": {\n       \"version\": \"3.3.0\",\n       \"resolved\": \"https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz\",\n@@ -22542,6 +22547,49 @@\n         \"node\": \">=0.6.0\"\n       }\n     },\n+    \"node_modules/jszip\": {\n+      \"version\": \"3.10.1\",\n+      \"resolved\": \"https://registry.npmjs.org/jszip/-/jszip-3.10.1.tgz\",\n+      \"integrity\": \"sha512-xXDvecyTpGLrqFrvkrUSoxxfJI5AH7U8zxxtVclpsUtMCq4JQ290LY8AW5c7Ggnr/Y/oK+bQMbqK2qmtk3pN4g==\",\n+      \"dependencies\": {\n+        \"lie\": \"~3.3.0\",\n+        \"pako\": \"~1.0.2\",\n+        \"readable-stream\": \"~2.3.6\",\n+        \"setimmediate\": \"^1.0.5\"\n+      }\n+    },\n+    \"node_modules/jszip/node_modules/isarray\": {\n+      \"version\": \"1.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",\n+      \"integrity\": \"sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==\"\n+    },\n+    \"node_modules/jszip/node_modules/readable-stream\": {\n+      \"version\": \"2.3.8\",\n+      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz\",\n+      \"integrity\": \"sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==\",\n+      \"dependencies\": {\n+        \"core-util-is\": \"~1.0.0\",\n+        \"inherits\": \"~2.0.3\",\n+        \"isarray\": \"~1.0.0\",\n+        \"process-nextick-args\": \"~2.0.0\",\n+        \"safe-buffer\": \"~5.1.1\",\n+        \"string_decoder\": \"~1.1.1\",\n+        \"util-deprecate\": \"~1.0.1\"\n+      }\n+    },\n+    \"node_modules/jszip/node_modules/safe-buffer\": {\n+      \"version\": \"5.1.2\",\n+      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz\",\n+      \"integrity\": \"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\"\n+    },\n+    \"node_modules/jszip/node_modules/string_decoder\": {\n+      \"version\": \"1.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n+      \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n+      \"dependencies\": {\n+        \"safe-buffer\": \"~5.1.0\"\n+      }\n+    },\n     \"node_modules/junit-report-builder\": {\n       \"version\": \"3.2.1\",\n       \"resolved\": \"https://registry.npmjs.org/junit-report-builder/-/junit-report-builder-3.2.1.tgz\",\n@@ -23645,6 +23693,14 @@\n         \"node\": \"^14.17.0 || ^16.13.0 || >=18.0.0\"\n       }\n     },\n+    \"node_modules/lie\": {\n+      \"version\": \"3.3.0\",\n+      \"resolved\": \"https://registry.npmjs.org/lie/-/lie-3.3.0.tgz\",\n+      \"integrity\": \"sha512-UaiMJzeWRlEujzAuw5LokY1L5ecNQYZKfmyZ9L7wDHb/p5etKaxXhohBcrw0EYby+G/NA52vRSN4N39dxHAIwQ==\",\n+      \"dependencies\": {\n+        \"immediate\": \"~3.0.5\"\n+      }\n+    },\n     \"node_modules/lighthouse\": {\n       \"version\": \"8.6.0\",\n       \"resolved\": \"https://registry.npmjs.org/lighthouse/-/lighthouse-8.6.0.tgz\",\n@@ -28214,6 +28270,11 @@\n         \"node\": \">=0.10.0\"\n       }\n     },\n+    \"node_modules/pako\": {\n+      \"version\": \"1.0.11\",\n+      \"resolved\": \"https://registry.npmjs.org/pako/-/pako-1.0.11.tgz\",\n+      \"integrity\": \"sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==\"\n+    },\n     \"node_modules/param-case\": {\n       \"version\": \"3.0.4\",\n       \"resolved\": \"https://registry.npmjs.org/param-case/-/param-case-3.0.4.tgz\",\n@@ -30901,6 +30962,11 @@\n         \"node\": \">= 0.4\"\n       }\n     },\n+    \"node_modules/setimmediate\": {\n+      \"version\": \"1.0.5\",\n+      \"resolved\": \"https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz\",\n+      \"integrity\": \"sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA==\"\n+    },\n     \"node_modules/setprototypeof\": {\n       \"version\": \"1.2.0\",\n       \"resolved\": \"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz\",\n@@ -36362,6 +36428,7 @@\n         \"grapheme-splitter\": \"^1.0.2\",\n         \"import-meta-resolve\": \"^4.0.0\",\n         \"is-plain-obj\": \"^4.1.0\",\n+        \"jszip\": \"^3.10.1\",\n         \"lodash.clonedeep\": \"^4.5.0\",\n         \"lodash.zip\": \"^4.2.0\",\n         \"minimatch\": \"^9.0.0\",\n@@ -53530,6 +53597,11 @@\n       \"resolved\": \"https://registry.npmjs.org/image-ssim/-/image-ssim-0.2.0.tgz\",\n       \"integrity\": \"sha512-W7+sO6/yhxy83L0G7xR8YAc5Z5QFtYEXXRV6EaE8tuYBZJnA3gVgp3q7X7muhLZVodeb9UfvjSbwt9VJwjIYAg==\"\n     },\n+    \"immediate\": {\n+      \"version\": \"3.0.6\",\n+      \"resolved\": \"https://registry.npmjs.org/immediate/-/immediate-3.0.6.tgz\",\n+      \"integrity\": \"sha512-XXOFtyqDjNDAQxVfYxuF7g9Il/IbWmmlQg2MYKOH8ExIT1qg6xc4zyS3HaEEATgs1btfzxq15ciUiY7gjSXRGQ==\"\n+    },\n     \"import-fresh\": {\n       \"version\": \"3.3.0\",\n       \"resolved\": \"https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz\",\n@@ -54537,6 +54609,51 @@\n         \"verror\": \"1.10.0\"\n       }\n     },\n+    \"jszip\": {\n+      \"version\": \"3.10.1\",\n+      \"resolved\": \"https://registry.npmjs.org/jszip/-/jszip-3.10.1.tgz\",\n+      \"integrity\": \"sha512-xXDvecyTpGLrqFrvkrUSoxxfJI5AH7U8zxxtVclpsUtMCq4JQ290LY8AW5c7Ggnr/Y/oK+bQMbqK2qmtk3pN4g==\",\n+      \"requires\": {\n+        \"lie\": \"~3.3.0\",\n+        \"pako\": \"~1.0.2\",\n+        \"readable-stream\": \"~2.3.6\",\n+        \"setimmediate\": \"^1.0.5\"\n+      },\n+      \"dependencies\": {\n+        \"isarray\": {\n+          \"version\": \"1.0.0\",\n+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",\n+          \"integrity\": \"sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==\"\n+        },\n+        \"readable-stream\": {\n+          \"version\": \"2.3.8\",\n+          \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz\",\n+          \"integrity\": \"sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==\",\n+          \"requires\": {\n+            \"core-util-is\": \"~1.0.0\",\n+            \"inherits\": \"~2.0.3\",\n+            \"isarray\": \"~1.0.0\",\n+            \"process-nextick-args\": \"~2.0.0\",\n+            \"safe-buffer\": \"~5.1.1\",\n+            \"string_decoder\": \"~1.1.1\",\n+            \"util-deprecate\": \"~1.0.1\"\n+          }\n+        },\n+        \"safe-buffer\": {\n+          \"version\": \"5.1.2\",\n+          \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz\",\n+          \"integrity\": \"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\"\n+        },\n+        \"string_decoder\": {\n+          \"version\": \"1.1.1\",\n+          \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n+          \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n+          \"requires\": {\n+            \"safe-buffer\": \"~5.1.0\"\n+          }\n+        }\n+      }\n+    },\n     \"junit-report-builder\": {\n       \"version\": \"3.2.1\",\n       \"resolved\": \"https://registry.npmjs.org/junit-report-builder/-/junit-report-builder-3.2.1.tgz\",\n@@ -55363,6 +55480,14 @@\n         }\n       }\n     },\n+    \"lie\": {\n+      \"version\": \"3.3.0\",\n+      \"resolved\": \"https://registry.npmjs.org/lie/-/lie-3.3.0.tgz\",\n+      \"integrity\": \"sha512-UaiMJzeWRlEujzAuw5LokY1L5ecNQYZKfmyZ9L7wDHb/p5etKaxXhohBcrw0EYby+G/NA52vRSN4N39dxHAIwQ==\",\n+      \"requires\": {\n+        \"immediate\": \"~3.0.5\"\n+      }\n+    },\n     \"lighthouse\": {\n       \"version\": \"8.6.0\",\n       \"resolved\": \"https://registry.npmjs.org/lighthouse/-/lighthouse-8.6.0.tgz\",\n@@ -58857,6 +58982,11 @@\n         \"repeat-string\": \"^1.5.2\"\n       }\n     },\n+    \"pako\": {\n+      \"version\": \"1.0.11\",\n+      \"resolved\": \"https://registry.npmjs.org/pako/-/pako-1.0.11.tgz\",\n+      \"integrity\": \"sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==\"\n+    },\n     \"param-case\": {\n       \"version\": \"3.0.4\",\n       \"resolved\": \"https://registry.npmjs.org/param-case/-/param-case-3.0.4.tgz\",\n@@ -60862,6 +60992,11 @@\n         \"has-property-descriptors\": \"^1.0.0\"\n       }\n     },\n+    \"setimmediate\": {\n+      \"version\": \"1.0.5\",\n+      \"resolved\": \"https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz\",\n+      \"integrity\": \"sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA==\"\n+    },\n     \"setprototypeof\": {\n       \"version\": \"1.2.0\",\n       \"resolved\": \"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz\",\n@@ -63259,6 +63394,7 @@\n         \"grapheme-splitter\": \"^1.0.2\",\n         \"import-meta-resolve\": \"^4.0.0\",\n         \"is-plain-obj\": \"^4.1.0\",\n+        \"jszip\": \"^3.10.1\",\n         \"lodash.clonedeep\": \"^4.5.0\",\n         \"lodash.zip\": \"^4.2.0\",\n         \"minimatch\": \"^9.0.0\",\n\ndiff --git a/packages/wdio-protocols/src/protocols/selenium.ts b/packages/wdio-protocols/src/protocols/selenium.ts\nindex 76b410eba2f..71535b9a881 100644\n--- a/packages/wdio-protocols/src/protocols/selenium.ts\n+++ b/packages/wdio-protocols/src/protocols/selenium.ts\n@@ -22,6 +22,49 @@ export default {\n             },\n         },\n     },\n+    '/session/:sessionId/se/files': {\n+        GET: {\n+            command: 'getDownloadableFiles',\n+            description:\n+                'List files from remote machine available for download.',\n+            ref: 'https://www.seleniumhq.org/',\n+            parameters: [],\n+            returns: {\n+                type: 'Object',\n+                name: 'names',\n+                description:\n+                    'Object containing a list of downloadable files on remote machine.',\n+            },\n+        },\n+        POST: {\n+            command: 'download',\n+            description:\n+                'Download a file from remote machine on which the browser is running.',\n+            ref: 'https://www.seleniumhq.org/',\n+            parameters: [\n+                {\n+                    name: 'name',\n+                    type: 'string',\n+                    description:\n+                        'Name of the file to be downloaded',\n+                    required: true,\n+                },\n+            ],\n+            returns: {\n+                type: 'Object',\n+                name: 'data',\n+                description:\n+                    'Object containing downloaded file name and its content',\n+            },\n+        },\n+        DELETE: {\n+            command: 'deleteDownloadableFiles',\n+            description:\n+                'Remove all downloadable files from remote machine on which the browser is running.',\n+            ref: 'https://www.seleniumhq.org/',\n+            parameters: [],\n+        },\n+    },\n     '/grid/api/hub/': {\n         GET: {\n             isHubCommand: true,\n\ndiff --git a/packages/webdriverio/package.json b/packages/webdriverio/package.json\nindex e1313083e3d..0703ba90805 100644\n--- a/packages/webdriverio/package.json\n+++ b/packages/webdriverio/package.json\n@@ -83,6 +83,7 @@\n     \"grapheme-splitter\": \"^1.0.2\",\n     \"import-meta-resolve\": \"^4.0.0\",\n     \"is-plain-obj\": \"^4.1.0\",\n+    \"jszip\": \"^3.10.1\",\n     \"lodash.clonedeep\": \"^4.5.0\",\n     \"lodash.zip\": \"^4.2.0\",\n     \"minimatch\": \"^9.0.0\",\n\ndiff --git a/packages/webdriverio/src/commands/browser.ts b/packages/webdriverio/src/commands/browser.ts\nindex fc8be6734a2..8df26fb6741 100644\n--- a/packages/webdriverio/src/commands/browser.ts\n+++ b/packages/webdriverio/src/commands/browser.ts\n@@ -7,6 +7,7 @@ export * from './browser/custom$$.js'\n export * from './browser/custom$.js'\n export * from './browser/debug.js'\n export * from './browser/deleteCookies.js'\n+export * from './browser/downloadFile.js'\n export * from './browser/emulate.js'\n export * from './browser/execute.js'\n export * from './browser/executeAsync.js'\n\ndiff --git a/packages/webdriverio/src/commands/browser/downloadFile.ts b/packages/webdriverio/src/commands/browser/downloadFile.ts\nnew file mode 100644\nindex 00000000000..4561d05f6f8\n--- /dev/null\n+++ b/packages/webdriverio/src/commands/browser/downloadFile.ts\n@@ -0,0 +1,102 @@\n+import fs from 'node:fs'\n+import path from 'node:path'\n+import JSZip from 'jszip'\n+import logger from '@wdio/logger'\n+\n+const log = logger('webdriverio')\n+\n+/**\n+ *\n+ * Download a file from the remote computer running Selenium node to local file system\n+ * by using the [`downloadFile`](https://webdriver.io/docs/api/selenium#downloadFile) command.\n+ *\n+ * :::info\n+ * Note that this command is only supported if you use a\n+ * [Selenium Grid](https://www.selenium.dev/documentation/en/grid/) with Chrome, Edge or Firefox.\n+ * :::\n+ *\n+ * <example>\n+ :downloadFile.js\n+ it('should download a file', async () => {\n+        // capabilities: [\n+        //  {\n+        //      browserName: 'chrome',\n+        //      se:downloadsEnabled': true\n+        //  }]\n+\n+        await browser.url('https://www.selenium.dev/selenium/web/downloads/download.html')\n+\n+        await $('#file-1').click()\n+\n+        await browser.waitUntil(async function () {\n+            return (await browser.getDownloadableFiles()).names.includes('file_1.txt')\n+        }, {timeout: 5000})\n+\n+        const files = await browser.getDownloadableFiles()\n+\n+        const downloaded = await browser.downloadFile(files.names[0], process.cwd())\n+\n+        await browser.deleteDownloadableFiles()\n+    })\n+ * </example>\n+ *\n+ * @alias browser.downloadFile\n+ * @param {string} fileName remote path to file\n+ * @param {string} targetDirectory target location on local computer\n+ * @type utility\n+ * @uses protocol/download\n+ *\n+ */\n+export async function downloadFile(\n+    this: WebdriverIO.Browser,\n+    fileName: string,\n+    targetDirectory: string\n+): Promise<object> {\n+    /**\n+     * parameter check\n+     */\n+    if (typeof fileName !== 'string' || typeof targetDirectory !== 'string') {\n+        throw new Error('number or type of arguments don\\'t agree with downloadFile command')\n+    }\n+\n+    /**\n+     * check if command is available\n+     */\n+    if (typeof this.download !== 'function') {\n+        throw new Error(`The downloadFile command is not available in ${(this.capabilities as WebdriverIO.Capabilities).browserName} and only available when using Selenium Grid`)\n+    }\n+\n+    const response = await this.download(fileName)\n+    const base64Content = response.contents\n+\n+    if (!targetDirectory.endsWith('/')) {\n+        targetDirectory += '/'\n+    }\n+\n+    fs.mkdirSync(targetDirectory, { recursive: true })\n+    const zipFilePath = path.join(targetDirectory, `${fileName}.zip`)\n+    fs.writeFileSync(zipFilePath, Buffer.from(base64Content, 'base64'))\n+\n+    const zipData = fs.readFileSync(zipFilePath)\n+    const filesData: string[] = []\n+\n+    try {\n+        const zip = await JSZip.loadAsync(zipData)\n+        const keys = Object.keys(zip.files)\n+\n+        // Iterate through each file in the zip archive\n+        for (let i = 0; i < keys.length; i++) {\n+            const fileData = await zip.files[keys[i]].async('nodebuffer')\n+            const dir = path.resolve(targetDirectory, keys[i])\n+            fs.writeFileSync(dir, fileData)\n+            log.info(`File extracted: ${keys[i]}`)\n+            filesData.push(dir)\n+        }\n+    } catch (error) {\n+        log.error('Error unzipping file:', error)\n+    }\n+\n+    return Promise.resolve({\n+        files: filesData\n+    })\n+}\n",
    "test_patch": "diff --git a/packages/webdriverio/tests/commands/browser/downloadFile.test.ts b/packages/webdriverio/tests/commands/browser/downloadFile.test.ts\nnew file mode 100644\nindex 00000000000..dce7999b5a8\n--- /dev/null\n+++ b/packages/webdriverio/tests/commands/browser/downloadFile.test.ts\n@@ -0,0 +1,110 @@\n+import { expect, describe, it, afterEach, vi } from 'vitest'\n+\n+import fs from 'node:fs'\n+import path from 'node:path'\n+import JSZip from 'jszip'\n+import { remote } from '../../../src/index.js'\n+import logger from '@wdio/logger'\n+\n+vi.mock('node:fs', () => ({\n+    default: {\n+        mkdirSync: vi.fn(),\n+        readFileSync: vi.fn(),\n+        writeFileSync: vi.fn()\n+    }\n+}))\n+vi.mock('got')\n+vi.mock('JSZip', () => ({\n+    default: {\n+        loadAsync: vi.fn()\n+    }\n+}))\n+vi.mock('devtools')\n+vi.mock('@wdio/logger', () => import(path.join(process.cwd(), '__mocks__', '@wdio/logger')))\n+\n+describe('downloadFile', () => {\n+    it('should throw if browser does not support it', async function () {\n+        const browser = await remote({\n+            baseUrl: 'http://webdriver.io',\n+            capabilities: {\n+                browserName: 'safari'\n+            }\n+        })\n+\n+        await expect(browser.downloadFile('bar.jpg', '/foo/bar')).rejects.toEqual(\n+            new Error('The downloadFile command is not available in mockBrowser and only available when using Selenium Grid'))\n+    })\n+\n+    it('should throw if path is not a string', async function () {\n+        const browser = await remote({\n+            baseUrl: 'http://webdriver.io',\n+            capabilities: {\n+                browserName: 'chrome'\n+            }\n+        })\n+\n+        // @ts-expect-error wrong parameter\n+        await expect(browser.downloadFile(123, 456)).rejects.toEqual(\n+            new Error('number or type of arguments don\\'t agree with downloadFile command'))\n+    })\n+\n+    it('should unzip the file and use downloadFile command', async () => {\n+        vi.spyOn(JSZip, 'loadAsync').mockReturnValue(Promise.resolve(\n+            {\n+                files: {\n+                    'file_1': {\n+                        async: vi.fn()\n+                    }\n+                }\n+            })\n+        )\n+\n+        const browser = await remote({\n+            baseUrl: 'http://webdriver.io',\n+            capabilities: {\n+                browserName: 'chrome'\n+            }\n+        })\n+        browser.download = vi.fn().mockReturnValue({\n+            fileName: 'test',\n+            contents: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=='\n+        })\n+\n+        await browser.downloadFile('toDownload.jpg', __dirname)\n+        const log = logger('test')\n+\n+        expect(log.info).toHaveBeenCalledWith(\n+            expect.stringContaining('File extracted: file_1')\n+        )\n+        expect(fs.writeFileSync).toHaveBeenCalledTimes(2)\n+    })\n+\n+    it('reject on error', async () => {\n+        vi.spyOn(JSZip, 'loadAsync').mockReturnValue(Promise.reject('test')\n+        )\n+        const browser = await remote({\n+            baseUrl: 'http://webdriver.io',\n+            capabilities: {\n+                browserName: 'chrome'\n+            }\n+        })\n+        browser.download = vi.fn().mockReturnValue({\n+            fileName: 'test',\n+            contents: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=='\n+        })\n+\n+        await browser.downloadFile('toDownload.jpg', __dirname)\n+        const log = logger('test')\n+\n+        expect(log.error).toHaveBeenCalledWith('Error unzipping file:', 'test')\n+    })\n+\n+    afterEach(() => {\n+        const log = logger('test')\n+        vi.mocked(log.info).mockClear()\n+        vi.mocked(log.error).mockClear()\n+        vi.mocked(fs.mkdirSync).mockClear()\n+        vi.mocked(fs.readFileSync).mockClear()\n+        vi.mocked(fs.writeFileSync).mockClear()\n+    })\n+})\n",
    "agent_patch": null,
    "FAIL_TO_PASS": [],
    "PASS_TO_PASS": [],
    "test_output_before": null,
    "errors_before": [],
    "failed_before": [],
    "test_output_after": null,
    "errors_after": [],
    "failed_after": []
  }
]