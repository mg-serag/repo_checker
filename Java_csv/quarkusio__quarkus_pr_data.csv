metadata
"{""instance_id"": ""quarkusio__quarkus-48479"", ""pr_id"": 48479, ""issue_id"": 48036, ""repo"": ""quarkusio/quarkus"", ""problem_statement"": ""Default property values for syslog logging\n### Describe the bug\n\nThe default values for syslog logging cause log messages not to be accepted. This was tested when using Keycloak. The original [issue](https://github.com/keycloak/keycloak/issues/39893) was raised with Keycloak and redirected here. \n\nThe issue comes down the [quarkus.log.syslog.use-counting-framing](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-use-counting-framing) flag. When the [quarkus.log.syslog.protocol](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-protocol) parameter is set to `tcp` or `ssl-tcp`, RFC5424 states that byte counting framing should be used. For Quarkus, this means also manually setting the [quarkus.log.syslog.use-counting-framing](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-use-counting-framing) flag (which Keycloak does not have a proxy option for).\n\nWhen sending logs to a receiver such as syslog-ng without the flag, these log messages are rejected with an 'invalid framing' error and the connection is dropped.\n\n### Expected behavior\n\nThe request here is to automatically set [quarkus.log.syslog.use-counting-framing](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-use-counting-framing) to `true` if the [quarkus.log.syslog.protocol](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-protocol) parameter is set to `tcp` or `ssl-tcp`. It should be possible to override this manually in case there are specific edge cases not following RFC5424.\n\n### Actual behavior\n\nPresently, when using syslog logging, the  [quarkus.log.syslog.use-counting-framing](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-use-counting-framing) must be manually set. In Keycloak, this is performed by setting the quarkus.properties. This is something that is recommended against in the [documentation](https://www.keycloak.org/server/configuration#_format_for_raw_quarkus_properties)\n\n### How to Reproduce?\n\n1. Setup a syslog receiver (see example on the [Keycloak issue](https://github.com/keycloak/keycloak/issues/39893)). \n2. Set the approvriate log flags\n* [quarkus.log.syslog.enable](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-enable)=true\n* [quarkus.log.syslog.endpoint](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-endpoint)=localhost:514\n* [quarkus.log.syslog.app-name](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-app-name)=example\n* [quarkus.log.syslog.facility](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-facility)= local-use-0\n* [quarkus.log.syslog.syslog-type](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-syslog-type)=rfc5424\n* [quarkus.log.syslog.protocol](https://quarkus.io/guides/logging#quarkus-core_quarkus-log-syslog-protocol)=tcp\n3. Create logging events\n\n### Output of `uname -a` or `ver`\n\nDarwin Kernel Version 24.4.0: Fri Apr 11 18:33:46 PDT 2025; root:xnu-11417.101.15~117/RELEASE_ARM64_T8112\n\n### Output of `java -version`\n\nopenjdk version \""21.0.7\"" 2025-04-15 OpenJDK Runtime Environment Homebrew (build 21.0.7) OpenJDK 64-Bit Server VM Homebrew (build 21.0.7, mixed mode, sharing)\n\n### Quarkus version or git rev\n\nFrom Keycloak 26.2.4 (Quarkus 3.20.0)\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nN/A\n\n### Additional information\n\n_No response_"", ""issue_word_count"": 512, ""test_files_count"": 2, ""non_test_files_count"": 2, ""pr_changed_files"": [""core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java"", ""core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java"", ""integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogCountingFramingTest.java"", ""integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogHandlerTest.java""], ""pr_changed_test_files"": [""integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogCountingFramingTest.java"", ""integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogHandlerTest.java""], ""base_commit"": ""4435c0d33396dd5b6c7c6ac170a6c44e584a74e3"", ""head_commit"": ""f2e530cc49620d7366603258dca64d6ad5fead9e"", ""repo_url"": ""https://github.com/quarkusio/quarkus/pull/48479"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/48479"", ""dockerfile"": """", ""pr_merged_at"": ""2025-06-23T08:43:13.000Z"", ""patch"": ""diff --git a/core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java b/core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java\nindex 49932653cbdb5..8490f6b097bd0 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/logging/LogRuntimeConfig.java\n@@ -372,8 +372,8 @@ interface SyslogConfig {\n         /**\n          * If enabled, the message being sent is prefixed with the size of the message\n          */\n-        @WithDefault(\""false\"")\n-        boolean useCountingFraming();\n+        @WithDefault(\""protocol-dependent\"")\n+        CountingFraming useCountingFraming();\n \n         /**\n          * Set to {@code true} to truncate the message if it exceeds maximum length\n@@ -420,6 +420,20 @@ interface SyslogConfig {\n          * Syslog async logging config\n          */\n         AsyncConfig async();\n+\n+        /**\n+         * Syslog counting framing type used for smarter handling of counting framing value.\n+         * <p>\n+         * If {@link CountingFraming#PROTOCOL_DEPENDENT} is used, the counting framing will be {@code true}, when the\n+         * {@link Protocol#TCP} or {@link Protocol#SSL_TCP} is used. Otherwise {@code false}.\n+         * <p>\n+         * More information in <a href=\""http://tools.ietf.org/html/rfc6587#section-3.4.1\"">http://tools.ietf.org/html/rfc6587</a>\n+         */\n+        enum CountingFraming {\n+            TRUE,\n+            FALSE,\n+            PROTOCOL_DEPENDENT\n+        }\n     }\n \n     interface SocketConfig {\n\ndiff --git a/core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java b/core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java\nindex 9f825efff2ee5..46e37b7b274eb 100644\n--- a/core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java\n+++ b/core/runtime/src/main/java/io/quarkus/runtime/logging/LoggingSetupRecorder.java\n@@ -745,7 +745,12 @@ private static Handler configureSyslogHandler(final LogRuntimeConfig.SyslogConfi\n             handler.setProtocol(config.protocol());\n             handler.setBlockOnReconnect(config.blockOnReconnect());\n             handler.setTruncate(config.truncate());\n-            handler.setUseCountingFraming(config.useCountingFraming());\n+            handler.setUseCountingFraming(switch (config.useCountingFraming()) {\n+                case PROTOCOL_DEPENDENT ->\n+                    config.protocol() == SyslogHandler.Protocol.TCP || config.protocol() == SyslogHandler.Protocol.SSL_TCP;\n+                case TRUE -> true;\n+                case FALSE -> false;\n+            });\n             handler.setLevel(config.level());\n             if (config.maxLength().isPresent()) {\n                 BigInteger maxLen = config.maxLength().get().asBigInteger();\n"", ""test_patch"": ""diff --git a/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogCountingFramingTest.java b/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogCountingFramingTest.java\nnew file mode 100644\nindex 0000000000000..2c825964703f6\n--- /dev/null\n+++ b/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogCountingFramingTest.java\n@@ -0,0 +1,28 @@\n+package io.quarkus.logging;\n+\n+import static io.quarkus.logging.LoggingTestsHelper.getHandler;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.jboss.logmanager.handlers.SyslogHandler;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class SyslogCountingFramingTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withConfigurationResource(\""application-syslog-output.properties\"")\n+            .overrideConfigKey(\""quarkus.log.syslog.protocol\"", \""UDP\"")\n+            .withApplicationRoot((jar) -> jar.addClass(LoggingTestsHelper.class));\n+\n+    @Test\n+    public void syslogOutputTest() {\n+        SyslogHandler syslogHandler = (SyslogHandler) getHandler(SyslogHandler.class);\n+\n+        assertThat(syslogHandler.getProtocol()).isEqualTo(SyslogHandler.Protocol.UDP);\n+        // counting framing is default 'protocol_dependent', and for UDP the counting framing is off\n+        assertThat(syslogHandler.isUseCountingFraming()).isEqualTo(false);\n+    }\n+}\n\ndiff --git a/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogHandlerTest.java b/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogHandlerTest.java\nindex e2e568b6d69be..b123ddc81e9a5 100644\n--- a/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogHandlerTest.java\n+++ b/integration-tests/test-extension/extension/deployment/src/test/java/io/quarkus/logging/SyslogHandlerTest.java\n@@ -42,7 +42,7 @@ public void syslogOutputTest() {\n         assertThat(syslogHandler.getFacility()).isEqualTo(SyslogHandler.Facility.USER_LEVEL);\n         assertThat(syslogHandler.getSyslogType()).isEqualTo(SyslogHandler.SyslogType.RFC5424);\n         assertThat(syslogHandler.getProtocol()).isEqualTo(SyslogHandler.Protocol.TCP);\n-        assertThat(syslogHandler.isUseCountingFraming()).isEqualTo(false);\n+        assertThat(syslogHandler.isUseCountingFraming()).isEqualTo(true);\n         assertThat(syslogHandler.isTruncate()).isEqualTo(true);\n         assertThat(syslogHandler.isBlockOnReconnect()).isEqualTo(false);\n     }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""quarkusio__quarkus-47795"", ""pr_id"": 47795, ""issue_id"": 47783, ""repo"": ""quarkusio/quarkus"", ""problem_statement"": ""`quarkus-maven-plugin:create` fails with missing codestart even for minimal project (no extensions)\n### Describe the bug\n\nUsing the `quarkus-maven-plugin` version **3.22.1**, the `create` goal fails when generating a **minimal Quarkus project** with **no extensions explicitly requested**. The error is caused by a missing codestart artifact:\n\n```\ncom.github.mcollovati:quarkus-hilla:jar:codestarts:24.8-SNAPSHOT\n```\n\nThis happens even in a clean environment, and the extension in question is not part of the platform or requested by the user.\n\n**Key Points**:\n\n* No extensions are specified.\n* The failure references a `SNAPSHOT` codestart from an external project (`quarkus-hilla`) that is not part of the platform BOM.\n* The user has no control over this dependency being pulled.\n\n### Expected behavior\n\n* The CLI should never include codestarts for non-platform extensions unless explicitly requested.\n* If codestarts are unavailable or broken, the plugin should **fail gracefully**, optionally with a warning or suggestion to use `-DnoCodestarts`.\n* Project scaffolding should **succeed by default**, even if external codestarts are unavailable.\n\n### Actual behavior\n\n```\n[ERROR] Failed to generate Quarkus project: Failed to resolve codestart artifact\ncom.github.mcollovati:quarkus-hilla:jar:codestarts:24.8-SNAPSHOT\n(absent): Could not find artifact ...\n```\n\n### How to Reproduce?\n\n```bash\nmvn io.quarkus.platform:quarkus-maven-plugin:3.22.1:create \\\n  -DprojectGroupId=org.example \\\n  -DprojectArtifactId=my-app\n```\n\n### Output of `uname -a` or `ver`\n\nDarwin ricferna-mac 24.4.0 Darwin Kernel Version 24.4.0: Fri Apr 11 18:33:47 PDT 2025; root:xnu-11417.101.15~117/RELEASE_ARM64_T6030 arm64\n\n### Output of `java -version`\n\nopenjdk version \""17.0.9\"" 2023-10-17 OpenJDK Runtime Environment GraalVM CE 17.0.9+9.1 (build 17.0.9+9-jvmci-23.0-b22) OpenJDK 64-Bit Server VM GraalVM CE 17.0.9+9.1 (build 17.0.9+9-jvmci-23.0-b22, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.22\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nMaven home: /opt/homebrew/Cellar/maven/3.9.9/libexec Java version: 17.0.9, vendor: GraalVM Community, runtime: /Users/ricferna/.sdkman/candidates/java/17.0.9-graalce Default locale: en_CA, platform encoding: UTF-8 OS name: \""mac os x\"", version: \""15.4.1\"", arch: \""aarch64\"", family: \""mac\""\n\n### Additional information\n\n**Related Zulip Discussions**:\n\n* [[Users thread](https://quarkusio.zulipchat.com/#narrow/stream/187030-users/topic/.60quarkus.20create.20cli.60.20is.20possibly.20broken.3F/near/517184095)](https://quarkusio.zulipchat.com/#narrow/stream/187030-users/topic/.60quarkus.20create.20cli.60.20is.20possibly.20broken.3F/near/517184095)\n* [[Dev thread](https://quarkusio.zulipchat.com/#narrow/stream/187038-dev/topic/Problem.20creating.20a.20new.20project.20with.20Quarkus.20Plugin/near/517185495)](https://quarkusio.zulipchat.com/#narrow/stream/187038-dev/topic/Problem.20creating.20a.20new.20project.20with.20Quarkus.20Plugin/near/517185495)"", ""issue_word_count"": 454, ""test_files_count"": 6, ""non_test_files_count"": 10, ""pr_changed_files"": [""devtools/maven/src/main/java/io/quarkus/maven/CreateJBangMojo.java"", ""devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java"", ""devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java"", ""independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartCatalog.java"", ""independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartCatalog.java"", ""independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartCatalog.java"", ""independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateExtensionCommandHandler.java"", ""independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/CodestartResourceLoadersBuilder.java"", ""independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/QuarkusProjectHelper.java"", ""independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/MavenProjectBuildFile.java"", ""independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/FakeExtensionCatalog.java"", ""independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/PlatformAwareTestBase.java"", ""independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/codestarts/QuarkusCodestartTest.java"", ""independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartGenerationTest.java"", ""independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartGenerationTest.java"", ""integration-tests/devtools/src/test/java/io/quarkus/platform/catalog/CatalogCompatibilityTest.java""], ""pr_changed_test_files"": [""independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/FakeExtensionCatalog.java"", ""independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/PlatformAwareTestBase.java"", ""independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/codestarts/QuarkusCodestartTest.java"", ""independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartGenerationTest.java"", ""independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartGenerationTest.java"", ""integration-tests/devtools/src/test/java/io/quarkus/platform/catalog/CatalogCompatibilityTest.java""], ""base_commit"": ""96640d81e35c37201bf30263d67e2854e37b0068"", ""head_commit"": ""3ee44a41abd8020a3ff3a5eb60391922342665f1"", ""repo_url"": ""https://github.com/quarkusio/quarkus/pull/47795"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47795"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-12T13:32:21.000Z"", ""patch"": ""diff --git a/devtools/maven/src/main/java/io/quarkus/maven/CreateJBangMojo.java b/devtools/maven/src/main/java/io/quarkus/maven/CreateJBangMojo.java\nindex 2a8e407bdd1f5..5e50c19bf598c 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/CreateJBangMojo.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/CreateJBangMojo.java\n@@ -113,7 +113,7 @@ public void execute() throws MojoExecutionException {\n             throw new MojoExecutionException(\""Failed to resolve Quarkus extension catalog\"", e);\n         }\n \n-        final List<ResourceLoader> codestartsResourceLoader = codestartLoadersBuilder()\n+        final List<ResourceLoader> codestartsResourceLoader = codestartLoadersBuilder(log)\n                 .catalog(catalog)\n                 .artifactResolver(mvn)\n                 .build();\n\ndiff --git a/devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java b/devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java\nindex c39bff63a8052..e5d0c86e77f9b 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java\n@@ -296,7 +296,7 @@ public void execute() throws MojoExecutionException {\n             catalog = CreateProjectHelper.completeCatalog(catalog, extensions, mvn);\n             sanitizeOptions();\n \n-            final List<ResourceLoader> codestartsResourceLoader = codestartLoadersBuilder()\n+            final List<ResourceLoader> codestartsResourceLoader = codestartLoadersBuilder(log)\n                     .catalog(catalog)\n                     .artifactResolver(mvn)\n                     .build();\n\ndiff --git a/devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java b/devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java\nindex 122ffd5be3a1c..7ba51f458ac2a 100644\n--- a/devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java\n+++ b/devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java\n@@ -103,7 +103,7 @@ public void execute() throws MojoExecutionException {\n         } else {\n             final ExtensionCatalog extensionCatalog = resolveExtensionCatalog();\n             final List<ResourceLoader> codestartsResourceLoader = CodestartResourceLoadersBuilder\n-                    .codestartLoadersBuilder()\n+                    .codestartLoadersBuilder(log)\n                     .artifactResolver(artifactResolver())\n                     .catalog(extensionCatalog)\n                     .build();\n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartCatalog.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartCatalog.java\nindex 3ff7119e2ce10..11f05ec724a55 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartCatalog.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartCatalog.java\n@@ -12,6 +12,7 @@\n import io.quarkus.devtools.codestarts.Codestart;\n import io.quarkus.devtools.codestarts.DataKey;\n import io.quarkus.devtools.codestarts.core.GenericCodestartCatalog;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n \n public final class QuarkusExtensionCodestartCatalog extends GenericCodestartCatalog<QuarkusExtensionCodestartProjectInput> {\n \n@@ -78,9 +79,9 @@ public enum Tooling implements DataKey {\n         GIT\n     }\n \n-    public static QuarkusExtensionCodestartCatalog fromBaseCodestartsResources()\n+    public static QuarkusExtensionCodestartCatalog fromBaseCodestartsResources(MessageWriter log)\n             throws IOException {\n-        final Map<String, Codestart> codestarts = loadCodestartsFromResources(getCodestartResourceLoaders(),\n+        final Map<String, Codestart> codestarts = loadCodestartsFromResources(getCodestartResourceLoaders(log),\n                 QUARKUS_EXTENSION_CODESTARTS_DIR);\n         return new QuarkusExtensionCodestartCatalog(codestarts.values());\n     }\n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartCatalog.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartCatalog.java\nindex ad195eb11669b..441517bbc2c83 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartCatalog.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartCatalog.java\n@@ -12,6 +12,7 @@\n import io.quarkus.devtools.codestarts.Codestart;\n import io.quarkus.devtools.codestarts.DataKey;\n import io.quarkus.devtools.codestarts.core.GenericCodestartCatalog;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.platform.descriptor.loader.json.ResourceLoader;\n \n public final class QuarkusJBangCodestartCatalog extends GenericCodestartCatalog<QuarkusJBangCodestartProjectInput> {\n@@ -48,9 +49,9 @@ private QuarkusJBangCodestartCatalog(Collection<Codestart> codestarts) {\n         super(codestarts);\n     }\n \n-    public static QuarkusJBangCodestartCatalog fromBaseCodestartsResources()\n+    public static QuarkusJBangCodestartCatalog fromBaseCodestartsResources(MessageWriter log)\n             throws IOException {\n-        final Map<String, Codestart> codestarts = loadCodestartsFromResources(getCodestartResourceLoaders(),\n+        final Map<String, Codestart> codestarts = loadCodestartsFromResources(getCodestartResourceLoaders(log),\n                 QUARKUS_JBANG_CODESTARTS_DIR);\n         return new QuarkusJBangCodestartCatalog(codestarts.values());\n     }\n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartCatalog.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartCatalog.java\nindex 7dc99d904ac26..d8297719cb069 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartCatalog.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartCatalog.java\n@@ -10,7 +10,6 @@\n import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -28,6 +27,7 @@\n import io.quarkus.devtools.codestarts.CodestartType;\n import io.quarkus.devtools.codestarts.DataKey;\n import io.quarkus.devtools.codestarts.core.GenericCodestartCatalog;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.devtools.project.extensions.Extensions;\n import io.quarkus.maven.dependency.ArtifactCoords;\n import io.quarkus.platform.catalog.processor.ExtensionProcessor;\n@@ -86,22 +86,23 @@ private QuarkusCodestartCatalog(Collection<Codestart> codestarts,\n         this.extensionsMapping = extensionsMapping;\n     }\n \n-    public static QuarkusCodestartCatalog fromBaseCodestartsResources(Map<String, Extension> extensionsMapping)\n+    public static QuarkusCodestartCatalog fromBaseCodestartsResources(MessageWriter log,\n+            Map<String, Extension> extensionsMapping)\n             throws IOException {\n-        final Map<String, Codestart> codestarts = loadCodestartsFromResources(getCodestartResourceLoaders(),\n+        final Map<String, Codestart> codestarts = loadCodestartsFromResources(getCodestartResourceLoaders(log),\n                 QUARKUS_CODESTARTS_DIR);\n         return new QuarkusCodestartCatalog(codestarts.values(), extensionsMapping);\n     }\n \n-    public static QuarkusCodestartCatalog fromBaseCodestartsResources()\n+    public static QuarkusCodestartCatalog fromBaseCodestartsResources(MessageWriter log)\n             throws IOException {\n-        return fromBaseCodestartsResources(Collections.emptyMap());\n+        return fromBaseCodestartsResources(log, Map.of());\n     }\n \n     public static QuarkusCodestartCatalog fromExtensionsCatalogAndDirectories(\n-            ExtensionCatalog catalog, Collection<Path> directories)\n+            MessageWriter log, ExtensionCatalog catalog, Collection<Path> directories)\n             throws IOException {\n-        final List<ResourceLoader> loaders = getCodestartResourceLoaders(catalog);\n+        final List<ResourceLoader> loaders = getCodestartResourceLoaders(log, catalog);\n         final Map<String, Codestart> codestarts = loadCodestartsFromResources(loaders,\n                 QUARKUS_CODESTARTS_DIR);\n         for (Path directory : directories) {\n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateExtensionCommandHandler.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateExtensionCommandHandler.java\nindex bcdbebad8ca67..262cd206db49d 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateExtensionCommandHandler.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateExtensionCommandHandler.java\n@@ -63,7 +63,7 @@ public QuarkusCommandOutcome execute(MessageWriter log)\n             throws QuarkusCommandException {\n         try {\n             final QuarkusExtensionCodestartCatalog catalog = QuarkusExtensionCodestartCatalog\n-                    .fromBaseCodestartsResources();\n+                    .fromBaseCodestartsResources(log);\n             catalog.createProject(input).generate(newExtensionDir);\n \n             final String extensionDirName = newExtensionDir.getFileName().toString();\n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/CodestartResourceLoadersBuilder.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/CodestartResourceLoadersBuilder.java\nindex b4b9c95f6fd91..fb15bae77de1a 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/CodestartResourceLoadersBuilder.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/CodestartResourceLoadersBuilder.java\n@@ -19,6 +19,7 @@\n \n import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n import io.quarkus.bootstrap.util.DependencyUtils;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.platform.descriptor.loader.json.ResourceLoader;\n import io.quarkus.registry.catalog.Extension;\n import io.quarkus.registry.catalog.ExtensionCatalog;\n@@ -33,6 +34,7 @@ public final class CodestartResourceLoadersBuilder {\n     private MavenArtifactResolver artifactResolver;\n     private String baseCodestartsArtifactCoords = BASE_CODESTARTS_ARTIFACT_COORDS;\n     private Collection<String> extraCodestartsArtifactCoords = new ArrayList<>();\n+    private MessageWriter log;\n \n     private static String retrieveBaseCodestartsArtifactCoords() {\n         final String artifact = PropertiesUtil.getProperty(BASE_CODESTARTS_ARTIFACT_PROPERTY);\n@@ -52,19 +54,20 @@ private static String retrieveBaseCodestartsArtifactCoords() {\n         }\n     }\n \n-    private CodestartResourceLoadersBuilder() {\n+    private CodestartResourceLoadersBuilder(MessageWriter log) {\n+        this.log = log;\n     }\n \n-    public static CodestartResourceLoadersBuilder codestartLoadersBuilder() {\n-        return new CodestartResourceLoadersBuilder();\n+    public static CodestartResourceLoadersBuilder codestartLoadersBuilder(MessageWriter log) {\n+        return new CodestartResourceLoadersBuilder(log);\n     }\n \n-    public static List<ResourceLoader> getCodestartResourceLoaders() {\n-        return codestartLoadersBuilder().build();\n+    public static List<ResourceLoader> getCodestartResourceLoaders(MessageWriter log) {\n+        return codestartLoadersBuilder(log).build();\n     }\n \n-    public static List<ResourceLoader> getCodestartResourceLoaders(ExtensionCatalog catalog) {\n-        return codestartLoadersBuilder().catalog(catalog).build();\n+    public static List<ResourceLoader> getCodestartResourceLoaders(MessageWriter log, ExtensionCatalog catalog) {\n+        return codestartLoadersBuilder(log).catalog(catalog).build();\n     }\n \n     public CodestartResourceLoadersBuilder catalog(ExtensionCatalog catalog) {\n@@ -94,13 +97,14 @@ public CodestartResourceLoadersBuilder addExtraCodestartsArtifactCoords(Collecti\n \n     public List<ResourceLoader> build() {\n         return getCodestartResourceLoaders(baseCodestartsArtifactCoords, extraCodestartsArtifactCoords, catalog,\n-                artifactResolver == null ? QuarkusProjectHelper.artifactResolver() : artifactResolver);\n+                artifactResolver == null ? QuarkusProjectHelper.artifactResolver() : artifactResolver, log);\n     }\n \n     private static List<ResourceLoader> getCodestartResourceLoaders(String baseCodestartsArtifactCoords,\n             Collection<String> extraCodestartsArtifactCoords,\n             ExtensionCatalog catalog,\n-            MavenArtifactResolver mvn) {\n+            MavenArtifactResolver mavenArtifactResolver,\n+            MessageWriter log) {\n \n         final Map<String, Artifact> codestartsArtifacts = new LinkedHashMap<>();\n \n@@ -146,10 +150,11 @@ private static List<ResourceLoader> getCodestartResourceLoaders(String baseCodes\n         final List<ResourceLoader> codestartResourceLoaders = new ArrayList<>(codestartsArtifacts.size());\n         for (Artifact a : codestartsArtifacts.values()) {\n             try {\n-                final File artifactFile = mvn.resolve(a).getArtifact().getFile();\n+                final File artifactFile = mavenArtifactResolver.resolve(a).getArtifact().getFile();\n                 codestartResourceLoaders.add(resolveFileResourceLoader(artifactFile));\n             } catch (Exception e) {\n-                throw new RuntimeException(\""Failed to resolve codestart artifact \"" + a, e);\n+                log.warn(\""Unable to resolve codestart artifact for %s: %s\"", a, e.getMessage());\n+                continue;\n             }\n         }\n         return codestartResourceLoaders;\n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/QuarkusProjectHelper.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/QuarkusProjectHelper.java\nindex 379cf8460636a..7471c7b1c19a9 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/QuarkusProjectHelper.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/QuarkusProjectHelper.java\n@@ -146,7 +146,7 @@ public static QuarkusProject getProject(Path projectDir, ExtensionCatalog catalo\n     public static QuarkusProject getProject(Path projectDir, ExtensionCatalog catalog, BuildTool buildTool,\n             JavaVersion javaVersion,\n             MessageWriter log) {\n-        return QuarkusProject.of(projectDir, catalog, getCodestartResourceLoaders(catalog),\n+        return QuarkusProject.of(projectDir, catalog, getCodestartResourceLoaders(log, catalog),\n                 log, buildTool, javaVersion);\n     }\n \n@@ -161,7 +161,7 @@ public static ExtensionCatalog resolveExtensionCatalog() throws RegistryResoluti\n     public static QuarkusProject getProject(Path projectDir, ExtensionCatalog catalog, ExtensionManager extManager,\n             JavaVersion javaVersion,\n             MessageWriter log) {\n-        return QuarkusProject.of(projectDir, catalog, getCodestartResourceLoaders(catalog),\n+        return QuarkusProject.of(projectDir, catalog, getCodestartResourceLoaders(log, catalog),\n                 log, extManager, javaVersion);\n     }\n \n\ndiff --git a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/MavenProjectBuildFile.java b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/MavenProjectBuildFile.java\nindex 7a9f65bf28b34..94023e37fbae5 100644\n--- a/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/MavenProjectBuildFile.java\n+++ b/independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/MavenProjectBuildFile.java\n@@ -121,7 +121,7 @@ public static QuarkusProject getProject(Artifact projectPom, Model projectModel,\n         }\n         final MavenProjectBuildFile extensionManager = new MavenProjectBuildFile(projectDir, extensionCatalog,\n                 projectModel, deps, managedDeps, projectProps, projectPom == null ? null : artifactResolver);\n-        final List<ResourceLoader> codestartResourceLoaders = codestartLoadersBuilder().catalog(extensionCatalog)\n+        final List<ResourceLoader> codestartResourceLoaders = codestartLoadersBuilder(log).catalog(extensionCatalog)\n                 .artifactResolver(artifactResolver).build();\n         final JavaVersion javaVersion = resolveJavaVersion(projectProps);\n         return QuarkusProject.of(projectDir, extensionCatalog,\n"", ""test_patch"": ""diff --git a/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/FakeExtensionCatalog.java b/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/FakeExtensionCatalog.java\nindex 0bf3fa0ff5750..63695255472f3 100644\n--- a/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/FakeExtensionCatalog.java\n+++ b/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/FakeExtensionCatalog.java\n@@ -6,6 +6,7 @@\n import java.util.Map;\n \n import io.quarkus.devtools.codestarts.quarkus.QuarkusCodestartCatalog;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.registry.catalog.ExtensionCatalog;\n \n public final class FakeExtensionCatalog {\n@@ -20,6 +21,7 @@ private FakeExtensionCatalog() {\n     private static QuarkusCodestartCatalog getQuarkusCodestartCatalog() {\n         try {\n             return QuarkusCodestartCatalog.fromBaseCodestartsResources(\n+                    MessageWriter.info(),\n                     QuarkusCodestartCatalog.buildExtensionsMapping(FAKE_EXTENSION_CATALOG.getExtensions()));\n         } catch (IOException e) {\n             throw new UncheckedIOException(e);\n\ndiff --git a/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/PlatformAwareTestBase.java b/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/PlatformAwareTestBase.java\nindex 0df745c109208..50a44c012075a 100644\n--- a/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/PlatformAwareTestBase.java\n+++ b/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/PlatformAwareTestBase.java\n@@ -7,6 +7,7 @@\n \n import org.junit.jupiter.api.extension.RegisterExtension;\n \n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.devtools.project.QuarkusProjectHelper;\n import io.quarkus.platform.descriptor.loader.json.ResourceLoader;\n import io.quarkus.platform.tools.ToolsUtils;\n@@ -21,7 +22,7 @@ public class PlatformAwareTestBase {\n     private Properties quarkusProps;\n \n     protected List<ResourceLoader> getCodestartsResourceLoaders() {\n-        return getCodestartResourceLoaders(getExtensionsCatalog());\n+        return getCodestartResourceLoaders(MessageWriter.info(), getExtensionsCatalog());\n     }\n \n     protected ExtensionCatalog getExtensionsCatalog() {\n\ndiff --git a/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/codestarts/QuarkusCodestartTest.java b/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/codestarts/QuarkusCodestartTest.java\nindex dc74497729923..ddf6a15882f5f 100644\n--- a/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/codestarts/QuarkusCodestartTest.java\n+++ b/independent-projects/tools/devtools-testing/src/main/java/io/quarkus/devtools/testing/codestarts/QuarkusCodestartTest.java\n@@ -39,6 +39,7 @@\n import io.quarkus.devtools.codestarts.quarkus.QuarkusCodestartCatalog;\n import io.quarkus.devtools.codestarts.quarkus.QuarkusCodestartCatalog.Language;\n import io.quarkus.devtools.codestarts.quarkus.QuarkusCodestartProjectInput;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.devtools.project.BuildTool;\n import io.quarkus.devtools.project.QuarkusProjectHelper;\n import io.quarkus.devtools.testing.SnapshotTesting;\n@@ -354,7 +355,7 @@ public void afterAll(ExtensionContext extensionContext) throws Exception {\n     }\n \n     protected List<ResourceLoader> getCodestartsResourceLoaders() {\n-        return codestartLoadersBuilder()\n+        return codestartLoadersBuilder(MessageWriter.info())\n                 .catalog(getExtensionsCatalog())\n                 .addExtraCodestartsArtifactCoords(artifacts)\n                 .build();\n\ndiff --git a/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartGenerationTest.java b/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartGenerationTest.java\nindex fae3f7d36961d..8d99e22185129 100644\n--- a/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartGenerationTest.java\n+++ b/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/extension/QuarkusExtensionCodestartGenerationTest.java\n@@ -11,6 +11,7 @@\n import org.junit.jupiter.api.TestInfo;\n \n import io.quarkus.devtools.codestarts.extension.QuarkusExtensionCodestartCatalog.QuarkusExtensionData;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.devtools.testing.SnapshotTesting;\n \n class QuarkusExtensionCodestartGenerationTest {\n@@ -57,7 +58,7 @@ void generateProjectWithoutTests(TestInfo testInfo) throws Throwable {\n     }\n \n     private QuarkusExtensionCodestartCatalog getCatalog() throws IOException {\n-        return QuarkusExtensionCodestartCatalog.fromBaseCodestartsResources();\n+        return QuarkusExtensionCodestartCatalog.fromBaseCodestartsResources(MessageWriter.info());\n     }\n \n }\n\ndiff --git a/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartGenerationTest.java b/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartGenerationTest.java\nindex 89630945bdbce..b971023d64c36 100644\n--- a/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartGenerationTest.java\n+++ b/independent-projects/tools/devtools-testing/src/test/java/io/quarkus/devtools/codestarts/jbang/QuarkusJBangCodestartGenerationTest.java\n@@ -16,6 +16,7 @@\n import org.junit.jupiter.api.TestInfo;\n \n import io.quarkus.devtools.codestarts.utils.NestedMaps;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.devtools.testing.SnapshotTesting;\n \n class QuarkusJBangCodestartGenerationTest {\n@@ -61,7 +62,7 @@ void generatePicocliProject(TestInfo testInfo) throws Throwable {\n     }\n \n     private QuarkusJBangCodestartCatalog getCatalog() throws IOException {\n-        return QuarkusJBangCodestartCatalog.fromBaseCodestartsResources();\n+        return QuarkusJBangCodestartCatalog.fromBaseCodestartsResources(MessageWriter.info());\n     }\n \n }\n\ndiff --git a/integration-tests/devtools/src/test/java/io/quarkus/platform/catalog/CatalogCompatibilityTest.java b/integration-tests/devtools/src/test/java/io/quarkus/platform/catalog/CatalogCompatibilityTest.java\nindex 84149c7f2d24e..bc953ea8d6706 100644\n--- a/integration-tests/devtools/src/test/java/io/quarkus/platform/catalog/CatalogCompatibilityTest.java\n+++ b/integration-tests/devtools/src/test/java/io/quarkus/platform/catalog/CatalogCompatibilityTest.java\n@@ -8,6 +8,7 @@\n import org.junit.jupiter.api.Test;\n \n import io.quarkus.devtools.codestarts.quarkus.QuarkusCodestartCatalog;\n+import io.quarkus.devtools.messagewriter.MessageWriter;\n import io.quarkus.devtools.project.CodestartResourceLoadersBuilder;\n import io.quarkus.devtools.project.QuarkusProjectHelper;\n import io.quarkus.devtools.testing.PlatformAwareTestBase;\n@@ -65,7 +66,7 @@ private static void checkPlatformRelease(ExtensionCatalogResolver catalogResolve\n \n     private static void checkCodestarts(ExtensionCatalog extensionCatalog, CatalogProcessor processed) throws IOException {\n         final List<ResourceLoader> codestartResourceLoaders = CodestartResourceLoadersBuilder\n-                .getCodestartResourceLoaders(extensionCatalog);\n+                .getCodestartResourceLoaders(MessageWriter.info(), extensionCatalog);\n         final QuarkusCodestartCatalog quarkusCodestartCatalog = QuarkusCodestartCatalog\n                 .fromExtensionsCatalog(extensionCatalog, codestartResourceLoaders);\n         assertThat(quarkusCodestartCatalog.getCodestarts()).isNotNull();\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""quarkusio__quarkus-47741"", ""pr_id"": 47741, ""issue_id"": 47739, ""repo"": ""quarkusio/quarkus"", ""problem_statement"": ""`@InjectMock JsonWebToken` fails with ContextNotActiveException\n### Describe the bug\n\nsince `3.21.4` `@InjectMock JsonWebToken jwt` fails with ContextNotActiveException, it was running in `3.21.3`\n\n```\norg.junit.jupiter.api.extension.TestInstantiationException: Failed to create test instance\n        at io.quarkus.test.junit.QuarkusTestExtension.initTestState(QuarkusTestExtension.java:767)\n        at io.quarkus.test.junit.QuarkusTestExtension.interceptTestClassConstructor(QuarkusTestExtension.java:733)\n        at java.base/java.util.Optional.orElseGet(Optional.java:364)\n        at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n        at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\nCaused by: jakarta.enterprise.context.ContextNotActiveException: RequestScoped context was not active when trying to obtain a bean instance for a client proxy of PRODUCER_METHOD bean [class=io.quarkus.smallrye.jwt.runtime.auth.JwtPrincipalProducer, id=BxDM8UQSQwnNG8ZE6VKFZ8wrsgg]\n        - you can activate the request context for a specific method using the @ActivateRequestContext interceptor binding\n```\n\n### Expected behavior\n\nshould work imho as `@InjectMock` should somehow replace the real implementation bound to `@RequestScope`\n\n### Actual behavior\n\nfails with exception above\n\n### How to Reproduce?\n\nhttps://github.com/flyinfish/quarkus--inject-mock-jwt\n\n### Workaround\n\nthere is a workaround [JwtBeanInjectMockWorkaroundTest](src/test/java/org/acme/JwtBeanInjectMockWorkaroundTest.java) still running which installs the mock dynamically with `QuarkusMock.installMockForType()`\n\n```\n    //@InjectMock\n    JsonWebToken jwt;\n\n    @BeforeEach\n    void workaround() {\n        jwt = mock(JsonWebToken.class);\n        QuarkusMock.installMockForType(jwt, JsonWebToken.class);\n    }\n```\n\n### Output of `uname -a` or `ver`\n\nLinux C70C7391 5.15.167.4-microsoft-standard-WSL2 #1 SMP Tue Nov 5 00:21:55 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux\n\n### Output of `java -version`\n\nopenjdk 21.0.7 2025-04-15 LTS OpenJDK Runtime Environment Zulu21.42+20-SA (build 21.0.7+6-LTS) OpenJDK 64-Bit Server VM Zulu21.42+20-SA (build 21.0.7+6-LTS, mixed mode, sharing)\n\n### Quarkus version or git rev\n\n3.21.4\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937) Maven home: /opt/apache-maven-3.9.9 Java version: 21.0.7, vendor: Azul Systems, Inc., runtime: /usr/lib/jvm/mobi-azuljdk21 Default locale: en, platform encoding: UTF-8 OS name: \""linux\"", version: \""5.15.167.4-microsoft-standard-wsl2\"", arch: \""amd64\"", family: \""unix\""\n\n### Additional information\n\n_No response_"", ""issue_word_count"": 353, ""test_files_count"": 5, ""non_test_files_count"": 0, ""pr_changed_files"": [""integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedFooFromProducer.java"", ""integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedProducer.java"", ""integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/RequestScopedFooMockTest.java"", ""test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java"", ""test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java""], ""pr_changed_test_files"": [""integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedFooFromProducer.java"", ""integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedProducer.java"", ""integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/RequestScopedFooMockTest.java"", ""test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java"", ""test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java""], ""base_commit"": ""6f219056dabb1977ce316980f301dc437d77cdb1"", ""head_commit"": ""8f2efdb9e88c76a55ea35fe8f723e218243a0d2d"", ""repo_url"": ""https://github.com/quarkusio/quarkus/pull/47741"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47741"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-07T13:24:48.000Z"", ""patch"": """", ""test_patch"": ""diff --git a/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedFooFromProducer.java b/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedFooFromProducer.java\nnew file mode 100644\nindex 0000000000000..df3b888a18761\n--- /dev/null\n+++ b/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedFooFromProducer.java\n@@ -0,0 +1,20 @@\n+package io.quarkus.it.mockbean;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import jakarta.annotation.PostConstruct;\n+\n+public class RequestScopedFooFromProducer {\n+\n+    static final AtomicBoolean CONSTRUCTED = new AtomicBoolean();\n+\n+    public String ping() {\n+        return \""bar\"";\n+    }\n+\n+    @PostConstruct\n+    void init() {\n+        CONSTRUCTED.set(true);\n+    }\n+\n+}\n\ndiff --git a/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedProducer.java b/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedProducer.java\nnew file mode 100644\nindex 0000000000000..4b95b2e02a330\n--- /dev/null\n+++ b/integration-tests/injectmock/src/main/java/io/quarkus/it/mockbean/RequestScopedProducer.java\n@@ -0,0 +1,17 @@\n+package io.quarkus.it.mockbean;\n+\n+import jakarta.enterprise.context.RequestScoped;\n+import jakarta.enterprise.inject.Produces;\n+\n+import io.quarkus.arc.Unremovable;\n+\n+public class RequestScopedProducer {\n+\n+    @Produces\n+    @RequestScoped\n+    @Unremovable\n+    public RequestScopedFooFromProducer produce() {\n+        return new RequestScopedFooFromProducer();\n+    }\n+\n+}\n\ndiff --git a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/RequestScopedFooMockTest.java b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/RequestScopedFooMockTest.java\nindex c36b0f54fe566..617733275ffd5 100644\n--- a/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/RequestScopedFooMockTest.java\n+++ b/integration-tests/injectmock/src/test/java/io/quarkus/it/mockbean/RequestScopedFooMockTest.java\n@@ -15,11 +15,17 @@ class RequestScopedFooMockTest {\n     @InjectMock\n     RequestScopedFoo foo;\n \n+    @InjectMock\n+    RequestScopedFooFromProducer foo2;\n+\n     @Test\n     void testMock() {\n         when(foo.ping()).thenReturn(\""pong\"");\n+        when(foo2.ping()).thenReturn(\""pong2\"");\n         assertEquals(\""pong\"", foo.ping());\n+        assertEquals(\""pong2\"", foo2.ping());\n         assertFalse(RequestScopedFoo.CONSTRUCTED.get());\n+        assertFalse(RequestScopedFooFromProducer.CONSTRUCTED.get());\n     }\n \n }\n\ndiff --git a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java\nindex 9127b1afa3ee1..a35cb90984e18 100644\n--- a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java\n+++ b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/MockitoMocksTracker.java\n@@ -48,6 +48,17 @@ static Optional<Object> currentMock(Object testInstance, Object beanInstance) {\n         return Optional.empty();\n     }\n \n-    record Mocked(Object mock, Object beanInstance) {\n+    // don't use a Record because we don't want the auto-generated methods which delegate to the components\n+    // see https://github.com/quarkusio/quarkus/issues/47739\n+    @SuppressWarnings(\""ClassCanBeRecord\"")\n+    final static class Mocked {\n+\n+        final Object mock;\n+        final Object beanInstance;\n+\n+        Mocked(Object mock, Object beanInstance) {\n+            this.mock = mock;\n+            this.beanInstance = beanInstance;\n+        }\n     }\n }\n\ndiff --git a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java\nindex 9840a46ac9ff0..3475fbdf1480d 100644\n--- a/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java\n+++ b/test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/SetMockitoMockAsBeanMockCallback.java\n@@ -18,9 +18,9 @@ public void beforeEach(QuarkusTestMethodContext context) {\n \n     private void installMock(MockitoMocksTracker.Mocked mocked) {\n         try {\n-            QuarkusMock.installMockForInstance(mocked.mock(), mocked.beanInstance());\n+            QuarkusMock.installMockForInstance(mocked.mock, mocked.beanInstance);\n         } catch (Exception e) {\n-            throw new RuntimeException(mocked.beanInstance()\n+            throw new RuntimeException(mocked.beanInstance\n                     + \"" is not a normal scoped CDI bean, make sure the bean is a normal scope like @ApplicationScoped or @RequestScoped.\""\n                     + \"" Alternatively you can use '@MockitoConfig(convertScopes = true)' in addition to '@InjectMock' if you would like\""\n                     + \"" Quarkus to automatically make that conversion (you should only use this if you understand the implications).\"");\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""quarkusio__quarkus-47553"", ""pr_id"": 47553, ""issue_id"": 47478, ""repo"": ""quarkusio/quarkus"", ""problem_statement"": ""VerifyError when using Float in Model deserialized by Jackson\n### Describe the bug\n\nIf I want to deserialize a model that contains a float, a `VerifyError` occurs during deserialization because the deserializer which is generated during the build uses a `Double` instead of a `Float`. \n\nThe error only occurs if reflection free serializers are enabled.\n\n```\n2025-04-22 12:14:59,534 ERROR [io.qua.ver.htt.run.QuarkusErrorHandler] (executor-thread-1) HTTP Request to /v1/products failed, error id: 94f8448d-b4e0-4258-9bac-f7dd12ef09c4-1: java.lang.VerifyError: Bad type on operand stack\nException Details:\n  Location:\n    io/i15s/quarkus/Product$quarkusjacksondeserializer.deserialize(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;)Ljava/lang/Object; @243: invokevirtual\n  Reason:\n    Type 'java/lang/Double' (current frame, stack[1]) is not assignable to 'java/lang/Float'\n  Current Frame:\n    bci: @243\n    flags: { }\n    locals: { 'io/i15s/quarkus/Product$quarkusjacksondeserializer', 'com/fasterxml/jackson/core/JsonParser', 'com/fasterxml/jackson/databind/DeserializationContext', 'com/fasterxml/jackson/databind/JsonNode', 'java/util/Iterator', 'java/util/Map$Entry', 'java/lang/Object', integer, 'com/fasterxml/jackson/databind/JsonNode', 'io/i15s/quarkus/Product', top, double, double_2nd }\n    stack: { 'io/i15s/quarkus/Product', 'java/lang/Double' }\n  Bytecode:\n    0000000: 2bb6 0017 2bb6 001d c000 1f4e bb00 0859\n    0000010: b700 213a 092d b600 253a 0419 04b9 002b\n    0000020: 0100 9a00 09a7 0108 0000 bf19 04b9 002f\n    0000030: 0100 c000 313a 0519 05b9 0034 0100 c000\n    0000040: 1f3a 0819 08b6 0037 9a00 e219 05b9 003a\n    0000050: 0100 3a06 1906 b600 4036 0715 07ab 0000\n    0000060: 0000 00ca 0000 0004 c42b cf84 0000 0051\n    0000070: 0033 7a8b 0000 002b 0035 f4d4 0000 0064\n    0000080: 065f b149 0000 003e 1242 1906 b600 469a\n    0000090: 0006 a700 06a7 003f a700 8f12 4819 06b6\n    00000a0: 0046 9a00 06a7 0006 a700 3da7 007c 124a\n    00000b0: 1906 b600 469a 0006 a700 06a7 003e a700\n    00000c0: 6912 4c19 06b6 0046 9a00 06a7 0006 a700\n    00000d0: 42a7 0056 1908 b600 503a 0a19 0919 0ab6\n    00000e0: 0054 a700 4519 08b6 0058 390b 1909 180b\n    00000f0: b800 5eb6 0062 a700 312c 1908 1264 b600\n    0000100: 6a3a 0d19 0919 0dc0 0064 b600 6ea7 001a\n    0000110: 2c19 0812 64b6 006a 3a0e 1909 190e c000\n    0000120: 64b6 0071 a700 03a7 0003 a7fe f119 09b0\n    0000130:                                        \n  Stackmap Table:\n    full_frame(@27,{Object[#2],Object[#19],Object[#102],Object[#31],Object[#39],Top,Top,Top,Top,Object[#8]},{})\n    full_frame(@40,{},{Object[#115]})\n    full_frame(@43,{Object[#2],Object[#19],Object[#102],Object[#31],Object[#39],Top,Top,Top,Top,Object[#8]},{})\n    full_frame(@136,{Object[#2],Object[#19],Object[#102],Object[#31],Object[#39],Object[#49],Object[#60],Integer,Object[#31],Object[#8]},{})\n    same_frame(@149)\n    same_frame(@152)\n    same_frame(@155)\n    same_frame(@168)\n    same_frame(@171)\n    same_frame(@174)\n    same_frame(@187)\n    same_frame(@190)\n    same_frame(@193)\n    same_frame(@206)\n    same_frame(@209)\n    same_frame(@212)\n    same_frame(@229)\n    same_frame(@249)\n    same_frame(@272)\n    same_frame(@295)\n    full_frame(@298,{Object[#2],Object[#19],Object[#102],Object[#31],Object[#39],Object[#49],Top,Top,Object[#31],Object[#8]},{})\n    full_frame(@301,{Object[#2],Object[#19],Object[#102],Object[#31],Object[#39],Top,Top,Top,Top,Object[#8]},{})\n\n\tat java.base/java.lang.Class.getDeclaredConstructors0(Native Method)\n\tat java.base/java.lang.Class.privateGetDeclaredConstructors(Class.java:3549)\n\tat java.base/java.lang.Class.getConstructor0(Class.java:3754)\n\tat java.base/java.lang.Class.getConstructor(Class.java:2442)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.GeneratedSerializersRegister$MappingModuleHolder.createMappingModule(GeneratedSerializersRegister.java:55)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.GeneratedSerializersRegister$MappingModuleHolder.<clinit>(GeneratedSerializersRegister.java:32)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.GeneratedSerializersRegister.customize(GeneratedSerializersRegister.java:28)\n\tat io.quarkus.jackson.runtime.ObjectMapperProducer.objectMapper(ObjectMapperProducer.java:26)\n\tat io.quarkus.jackson.runtime.ObjectMapperProducer_ProducerMethod_objectMapper_KgqnG0Hv0d6QYgKd-v-HRXlW39Y_Bean.doCreate(Unknown Source)\n\tat io.quarkus.jackson.runtime.ObjectMapperProducer_ProducerMethod_objectMapper_KgqnG0Hv0d6QYgKd-v-HRXlW39Y_Bean.create(Unknown Source)\n\tat io.quarkus.jackson.runtime.ObjectMapperProducer_ProducerMethod_objectMapper_KgqnG0Hv0d6QYgKd-v-HRXlW39Y_Bean.create(Unknown Source)\n\tat io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\n\tat io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\n\tat io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\n\tat io.quarkus.arc.impl.LazyValue.get(LazyValue.java:32)\n\tat io.quarkus.arc.impl.ComputingCache.computeIfAbsent(ComputingCache.java:69)\n\tat io.quarkus.arc.impl.ComputingCacheContextInstances.computeIfAbsent(ComputingCacheContextInstances.java:19)\n\tat io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\n\tat io.quarkus.jackson.runtime.ObjectMapperProducer_ProducerMethod_objectMapper_KgqnG0Hv0d6QYgKd-v-HRXlW39Y_Bean.get(Unknown Source)\n\tat io.quarkus.jackson.runtime.ObjectMapperProducer_ProducerMethod_objectMapper_KgqnG0Hv0d6QYgKd-v-HRXlW39Y_Bean.get(Unknown Source)\n\tat io.quarkus.arc.impl.InstanceImpl.getBeanInstance(InstanceImpl.java:325)\n\tat io.quarkus.arc.impl.InstanceImpl.getInternal(InstanceImpl.java:309)\n\tat io.quarkus.arc.impl.InstanceImpl.get(InstanceImpl.java:190)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.AbstractServerJacksonMessageBodyReader$1.get(AbstractServerJacksonMessageBodyReader.java:35)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.AbstractServerJacksonMessageBodyReader$1.get(AbstractServerJacksonMessageBodyReader.java:32)\n\tat io.quarkus.arc.impl.LazyValue.get(LazyValue.java:32)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.AbstractServerJacksonMessageBodyReader.getEffectiveReader(AbstractServerJacksonMessageBodyReader.java:48)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.ServerJacksonMessageBodyReader.doReadFrom(ServerJacksonMessageBodyReader.java:91)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.ServerJacksonMessageBodyReader.readFrom(ServerJacksonMessageBodyReader.java:44)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.ServerJacksonMessageBodyReader.readFrom(ServerJacksonMessageBodyReader.java:83)\n\tat io.quarkus.resteasy.reactive.jackson.runtime.serialisers.ServerJacksonMessageBodyReader_ClientProxy.readFrom(Unknown Source)\n\tat org.jboss.resteasy.reactive.server.handlers.RequestDeserializeHandler.readFrom(RequestDeserializeHandler.java:126)\n\tat org.jboss.resteasy.reactive.server.handlers.RequestDeserializeHandler.handle(RequestDeserializeHandler.java:84)\n\tat io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:135)\n\tat org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)\n\tat io.quarkus.vertx.core.runtime.VertxCoreRecorder$15.runWith(VertxCoreRecorder.java:638)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2675)\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2654)\n\tat org.jboss.threads.EnhancedQueueExecutor.runThreadBody(EnhancedQueueExecutor.java:1627)\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1594)\n\tat org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)\n\tat org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n```\n\n### How to Reproduce?\n\nI've created a small reproducer project.  https://github.com/andlinger/quarkus-reproducer/tree/quarkus-47478\nIn principle, however, a normal Java POJO with a Float member is sufficient and the reflection free serializers must be activated.\n\n```properties file=application.properties\nquarkus.rest.jackson.optimization.enable-reflection-free-serializers=true\n```\n\n```java\npublic class Product {\n\n    @NotBlank(message = \""Name must not be blank\"")\n    private String name;\n    private Float price;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Float getPrice() {\n        return price;\n    }\n\n    public void setPrice(Float price) {\n        this.price = price;\n    }\n}\n```\n\n### Quarkus version or git rev\n\n3.21.3"", ""issue_word_count"": 1086, ""test_files_count"": 6, ""non_test_files_count"": 3, ""pr_changed_files"": [""extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java"", ""extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializationUtils.java"", ""extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java"", ""extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java"", ""extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesBean.java"", ""extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesRecord.java"", ""extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java"", ""extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java"", ""extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java""], ""pr_changed_test_files"": [""extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java"", ""extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesBean.java"", ""extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesRecord.java"", ""extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java"", ""extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java"", ""extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java""], ""base_commit"": ""31ba82eb12177c79ae4da0fdd8b43b825c8706ed"", ""head_commit"": ""ab8d361908bad6c200d4449a8b5fb520854be023"", ""repo_url"": ""https://github.com/quarkusio/quarkus/pull/47553"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47553"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-28T09:38:13.000Z"", ""patch"": ""diff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java\nindex e0af8a4803903..b893bebedbcc7 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonDeserializerFactory.java\n@@ -15,7 +15,15 @@\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n-import org.jboss.jandex.*;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.MethodParameterInfo;\n+import org.jboss.jandex.ParameterizedType;\n+import org.jboss.jandex.Type;\n+import org.jboss.jandex.TypeVariable;\n+import org.jboss.jandex.VoidType;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.core.JacksonException;\n@@ -35,9 +43,11 @@\n \n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.builditem.GeneratedClassBuildItem;\n+import io.quarkus.gizmo.AssignableResultHandle;\n import io.quarkus.gizmo.BranchResult;\n import io.quarkus.gizmo.BytecodeCreator;\n import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.DescriptorUtils;\n import io.quarkus.gizmo.FieldDescriptor;\n import io.quarkus.gizmo.MethodCreator;\n import io.quarkus.gizmo.MethodDescriptor;\n@@ -257,6 +267,7 @@ private ResultHandle createDeserializedObject(DeserializationData deserData) {\n             ResultHandle fieldValue = deserData.methodCreator.invokeVirtualMethod(\n                     ofMethod(JsonNode.class, \""get\"", JsonNode.class, String.class), deserData.jsonNode,\n                     deserData.methodCreator.load(fieldSpecs.jsonName));\n+\n             params[i++] = readValueFromJson(deserData.classCreator, deserData.methodCreator,\n                     deserData.methodCreator.getMethodParam(1), fieldSpecs, deserData.typeParametersIndex, fieldValue);\n         }\n@@ -391,9 +402,8 @@ private ResultHandle readValueFromJson(ClassCreator classCreator, BytecodeCreato\n             ResultHandle valueNode) {\n         Type fieldType = fieldSpecs.fieldType;\n         String fieldTypeName = fieldType.name().toString();\n-        MethodDescriptor readMethod = readMethodForPrimitiveFields(fieldTypeName);\n-        if (readMethod != null) {\n-            return bytecode.invokeVirtualMethod(readMethod, valueNode);\n+        if (JacksonSerializationUtils.isBasicJsonType(fieldType)) {\n+            return readValueForPrimitiveFields(bytecode, fieldType, valueNode);\n         }\n \n         FieldKind fieldKind = registerTypeToBeGenerated(fieldType, fieldTypeName);\n@@ -467,17 +477,51 @@ private MethodInfo setterMethodInfo(ClassInfo classInfo, FieldSpecs fieldSpecs)\n         return setter;\n     }\n \n-    private MethodDescriptor readMethodForPrimitiveFields(String typeName) {\n-        return switch (typeName) {\n-            case \""java.lang.String\"", \""char\"", \""java.lang.Character\"" -> ofMethod(JsonNode.class, \""asText\"", String.class);\n-            case \""short\"", \""java.lang.Short\"", \""int\"", \""java.lang.Integer\"" ->\n-                ofMethod(JsonNode.class, \""asInt\"", int.class);\n-            case \""long\"", \""java.lang.Long\"" -> ofMethod(JsonNode.class, \""asLong\"", long.class);\n-            case \""float\"", \""java.lang.Float\"", \""double\"", \""java.lang.Double\"" ->\n-                ofMethod(JsonNode.class, \""asDouble\"", double.class);\n-            case \""boolean\"", \""java.lang.Boolean\"" -> ofMethod(JsonNode.class, \""asBoolean\"", boolean.class);\n-            default -> null;\n+    private static ResultHandle readValueForPrimitiveFields(BytecodeCreator bytecode, Type fieldType,\n+            ResultHandle valueNode) {\n+        AssignableResultHandle result = bytecode.createVariable(DescriptorUtils.typeToString(fieldType));\n+\n+        BranchResult isValueNull = bytecode.ifNull(valueNode);\n+        BytecodeCreator isValueNullTrue = isValueNull.trueBranch();\n+        isValueNullTrue.assign(result, JacksonSerializationUtils.getDefaultValue(isValueNullTrue, fieldType));\n+\n+        BytecodeCreator isValueNullFalse = isValueNull.falseBranch();\n+\n+        ResultHandle convertedValue = switch (fieldType.name().toString()) {\n+            case \""java.lang.String\"" -> isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \""asText\"", String.class),\n+                    valueNode);\n+            case \""char\"", \""java.lang.Character\"" -> isValueNullFalse.invokeVirtualMethod(\n+                    ofMethod(String.class, \""charAt\"", char.class, int.class),\n+                    isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \""asText\"", String.class), valueNode),\n+                    isValueNullFalse.load(0));\n+            case \""short\"", \""java.lang.Short\"" -> isValueNullFalse\n+                    .convertPrimitive(\n+                            isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \""asInt\"", int.class), valueNode),\n+                            short.class);\n+            case \""int\"" ->\n+                isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \""asInt\"", int.class),\n+                        valueNode);\n+            case \""java.lang.Integer\"" ->\n+                isValueNullFalse.invokeStaticMethod(ofMethod(Integer.class, \""valueOf\"", Integer.class, int.class),\n+                        isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \""asInt\"", int.class),\n+                                valueNode));\n+            case \""long\"", \""java.lang.Long\"" ->\n+                isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \""asLong\"", long.class),\n+                        valueNode);\n+            case \""float\"", \""java.lang.Float\"" -> isValueNullFalse\n+                    .convertPrimitive(\n+                            isValueNullFalse.invokeVirtualMethod(ofMethod(JsonNode.class, \""asDouble\"", double.class), valueNode),\n+                            float.class);\n+            case \""double\"", \""java.lang.Double\"" -> isValueNullFalse\n+                    .invokeVirtualMethod(ofMethod(JsonNode.class, \""asDouble\"", double.class), valueNode);\n+            case \""boolean\"", \""java.lang.Boolean\"" -> isValueNullFalse\n+                    .invokeVirtualMethod(ofMethod(JsonNode.class, \""asBoolean\"", boolean.class), valueNode);\n+            default -> throw new IllegalStateException(\""Type \"" + fieldType + \"" should be handled by the switch\"");\n         };\n+\n+        isValueNullFalse.assign(result, convertedValue);\n+\n+        return result;\n     }\n \n     @Override\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializationUtils.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializationUtils.java\nnew file mode 100644\nindex 0000000000000..5779a7c162e05\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializationUtils.java\n@@ -0,0 +1,65 @@\n+package io.quarkus.resteasy.reactive.jackson.deployment.processor;\n+\n+import org.jboss.jandex.Type;\n+import org.jboss.jandex.Type.Kind;\n+\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ResultHandle;\n+\n+final class JacksonSerializationUtils {\n+\n+    private static boolean DEFAULT_BOOLEAN;\n+    private static byte DEFAULT_BYTE;\n+    private static char DEFAULT_CHAR;\n+    private static double DEFAULT_DOUBLE;\n+    private static float DEFAULT_FLOAT;\n+    private static int DEFAULT_INT;\n+    private static long DEFAULT_LONG;\n+    private static short DEFAULT_SHORT;\n+\n+    private JacksonSerializationUtils() {\n+    }\n+\n+    static boolean isBoxedPrimitive(Type type) {\n+        return isBoxedPrimitive(type.name().toString());\n+    }\n+\n+    static boolean isBoxedPrimitive(String typeName) {\n+        return \""java.lang.Character\"".equals(typeName) || \""java.lang.Short\"".equals(typeName)\n+                || \""java.lang.Integer\"".equals(typeName) || \""java.lang.Long\"".equals(typeName)\n+                || \""java.lang.Float\"".equals(typeName) || \""java.lang.Double\"".equals(typeName)\n+                || \""java.lang.Boolean\"".equals(typeName);\n+    }\n+\n+    static boolean isBasicJsonType(Type type) {\n+        if (type.kind() == Kind.PRIMITIVE) {\n+            return true;\n+        }\n+        if (isBoxedPrimitive(type)) {\n+            return true;\n+        }\n+        if (\""java.lang.String\"".equals(type.name().toString())) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    static ResultHandle getDefaultValue(BytecodeCreator bytecodeCreator, Type type) {\n+        if (type.kind() != Kind.PRIMITIVE) {\n+            return bytecodeCreator.loadNull();\n+        }\n+\n+        return switch (type.name().toString()) {\n+            case \""byte\"" -> bytecodeCreator.load(DEFAULT_BYTE);\n+            case \""boolean\"" -> bytecodeCreator.load(DEFAULT_BOOLEAN);\n+            case \""char\"" -> bytecodeCreator.load(DEFAULT_CHAR);\n+            case \""double\"" -> bytecodeCreator.load(DEFAULT_DOUBLE);\n+            case \""float\"" -> bytecodeCreator.load(DEFAULT_FLOAT);\n+            case \""int\"" -> bytecodeCreator.load(DEFAULT_INT);\n+            case \""long\"" -> bytecodeCreator.load(DEFAULT_LONG);\n+            case \""short\"" -> bytecodeCreator.load(DEFAULT_SHORT);\n+            default -> throw new IllegalStateException(\""Type \"" + type + \"" should be handled by the switch\"");\n+        };\n+    }\n+}\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java\nindex b5a829d15db9b..9453c51f45375 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/JacksonSerializerFactory.java\n@@ -274,7 +274,9 @@ private void writeField(ClassInfo classInfo, FieldSpecs fieldSpecs, BytecodeCrea\n         String primitiveMethodName = writeMethodForPrimitiveFields(typeName);\n \n         if (primitiveMethodName != null) {\n-            BytecodeCreator primitiveBytecode = isBoxedPrimitive(typeName) ? bytecode.ifNotNull(arg).trueBranch() : bytecode;\n+            BytecodeCreator primitiveBytecode = JacksonSerializationUtils.isBoxedPrimitive(typeName)\n+                    ? bytecode.ifNotNull(arg).trueBranch()\n+                    : bytecode;\n             writeFieldName(fieldSpecs, primitiveBytecode, ctx.jsonGenerator, pkgName);\n             MethodDescriptor primitiveWriter = MethodDescriptor.ofMethod(JSON_GEN_CLASS_NAME, primitiveMethodName, \""void\"",\n                     fieldSpecs.writtenType());\n@@ -319,13 +321,6 @@ private String writeMethodForPrimitiveFields(String typeName) {\n         };\n     }\n \n-    private boolean isBoxedPrimitive(String typeName) {\n-        return \""java.lang.Character\"".equals(typeName) || \""java.lang.Short\"".equals(typeName)\n-                || \""java.lang.Integer\"".equals(typeName) || \""java.lang.Long\"".equals(typeName)\n-                || \""java.lang.Float\"".equals(typeName) || \""java.lang.Double\"".equals(typeName)\n-                || \""java.lang.Boolean\"".equals(typeName);\n-    }\n-\n     private BytecodeCreator writeFieldBranch(ClassCreator classCreator, MethodCreator serialize, FieldSpecs fieldSpecs) {\n         String[] rolesAllowed = fieldSpecs.rolesAllowed();\n         if (rolesAllowed != null) {\n"", ""test_patch"": ""diff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\nindex ef93d7509a1c4..12fdbd9636588 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/AbstractSimpleJsonTest.java\n@@ -807,4 +807,146 @@ public void testPojoWithFluentSetters() {\n                 .body(\""author\"", Matchers.is(\""Mario Fusco\""))\n                 .body(\""title\"", Matchers.is(\""Lombok must die\""));\n     }\n+\n+    @Test\n+    public void testPrimitiveTypesBean() {\n+        RestAssured\n+                .with()\n+                .body(\""\""\""\n+                        {\n+                        \""charPrimitive\"":\""b\"",\n+                        \""characterPrimitive\"":\""c\"",\n+                        \""shortPrimitive\"":4,\n+                        \""shortInstance\"":5,\n+                        \""intPrimitive\"":6,\n+                        \""integerInstance\"":7,\n+                        \""longPrimitive\"":8,\n+                        \""longInstance\"":9,\n+                        \""floatPrimitive\"":10.3,\n+                        \""floatInstance\"":11.4,\n+                        \""doublePrimitive\"":12.5,\n+                        \""doubleInstance\"":13.6,\n+                        \""booleanPrimitive\"":true,\n+                        \""booleanInstance\"":false\n+                        }\n+                        \""\""\"")\n+                .contentType(\""application/json; charset=utf-8\"")\n+                .post(\""/simple/primitive-types-bean\"")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\""application/json\"")\n+                .body(\""charPrimitive\"", Matchers.is(\""b\""))\n+                .body(\""characterPrimitive\"", Matchers.is(\""c\""))\n+                .body(\""shortPrimitive\"", Matchers.equalTo(4))\n+                .body(\""shortInstance\"", Matchers.equalTo(5))\n+                .body(\""intPrimitive\"", Matchers.equalTo(6))\n+                .body(\""integerInstance\"", Matchers.equalTo(7))\n+                .body(\""longPrimitive\"", Matchers.equalTo(8))\n+                .body(\""longInstance\"", Matchers.equalTo(9))\n+                .body(\""floatPrimitive\"", Matchers.equalTo(10.3F))\n+                .body(\""floatInstance\"", Matchers.equalTo(11.4F))\n+                .body(\""doublePrimitive\"", Matchers.equalTo(12.5F))\n+                .body(\""doubleInstance\"", Matchers.equalTo(13.6F))\n+                .body(\""booleanPrimitive\"", Matchers.equalTo(true))\n+                .body(\""booleanInstance\"", Matchers.equalTo(false));\n+\n+        // Note: characters are handled weirdly on the Jackson side, we cannot fully test them.\n+        RestAssured\n+                .with()\n+                .body(\""\""\""\n+                        {\n+                        \""characterPrimitive\"":\""c\""\n+                        }\n+                        \""\""\"")\n+                .contentType(\""application/json; charset=utf-8\"")\n+                .post(\""/simple/primitive-types-bean\"")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\""application/json\"")\n+                //.body(\""charPrimitive\"", Matchers.is(\""\""))\n+                .body(\""characterPrimitive\"", Matchers.is(\""c\""))\n+                .body(\""shortPrimitive\"", Matchers.equalTo(0))\n+                .body(\""shortInstance\"", Matchers.nullValue())\n+                .body(\""intPrimitive\"", Matchers.equalTo(0))\n+                .body(\""integerInstance\"", nullValue())\n+                .body(\""longPrimitive\"", Matchers.equalTo(0))\n+                .body(\""longInstance\"", nullValue())\n+                .body(\""floatPrimitive\"", Matchers.equalTo(0F))\n+                .body(\""floatInstance\"", nullValue())\n+                .body(\""doublePrimitive\"", Matchers.equalTo(0F))\n+                .body(\""doubleInstance\"", Matchers.nullValue())\n+                .body(\""booleanPrimitive\"", Matchers.equalTo(false))\n+                .body(\""booleanInstance\"", Matchers.nullValue());\n+    }\n+\n+    @Test\n+    public void testPrimitiveTypesRecord() {\n+        RestAssured\n+                .with()\n+                .body(\""\""\""\n+                        {\n+                        \""charPrimitive\"":\""b\"",\n+                        \""characterPrimitive\"":\""c\"",\n+                        \""shortPrimitive\"":4,\n+                        \""shortInstance\"":5,\n+                        \""intPrimitive\"":6,\n+                        \""integerInstance\"":7,\n+                        \""longPrimitive\"":8,\n+                        \""longInstance\"":9,\n+                        \""floatPrimitive\"":10.3,\n+                        \""floatInstance\"":11.4,\n+                        \""doublePrimitive\"":12.5,\n+                        \""doubleInstance\"":13.6,\n+                        \""booleanPrimitive\"":true,\n+                        \""booleanInstance\"":false\n+                        }\n+                        \""\""\"")\n+                .contentType(\""application/json; charset=utf-8\"")\n+                .post(\""/simple/primitive-types-record\"")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\""application/json\"")\n+                .body(\""charPrimitive\"", Matchers.is(\""b\""))\n+                .body(\""characterPrimitive\"", Matchers.is(\""c\""))\n+                .body(\""shortPrimitive\"", Matchers.equalTo(4))\n+                .body(\""shortInstance\"", Matchers.equalTo(5))\n+                .body(\""intPrimitive\"", Matchers.equalTo(6))\n+                .body(\""integerInstance\"", Matchers.equalTo(7))\n+                .body(\""longPrimitive\"", Matchers.equalTo(8))\n+                .body(\""longInstance\"", Matchers.equalTo(9))\n+                .body(\""floatPrimitive\"", Matchers.equalTo(10.3F))\n+                .body(\""floatInstance\"", Matchers.equalTo(11.4F))\n+                .body(\""doublePrimitive\"", Matchers.equalTo(12.5F))\n+                .body(\""doubleInstance\"", Matchers.equalTo(13.6F))\n+                .body(\""booleanPrimitive\"", Matchers.equalTo(true))\n+                .body(\""booleanInstance\"", Matchers.equalTo(false));\n+\n+        // Note: characters are handled weirdly on the Jackson side, we cannot fully test them.\n+        RestAssured\n+                .with()\n+                .body(\""\""\""\n+                        {\n+                        \""characterPrimitive\"":\""c\""\n+                        }\n+                        \""\""\"")\n+                .contentType(\""application/json; charset=utf-8\"")\n+                .post(\""/simple/primitive-types-record\"")\n+                .then()\n+                .statusCode(200)\n+                .contentType(\""application/json\"")\n+                //.body(\""charPrimitive\"", Matchers.is(\""\""))\n+                .body(\""characterPrimitive\"", Matchers.is(\""c\""))\n+                .body(\""shortPrimitive\"", Matchers.equalTo(0))\n+                .body(\""shortInstance\"", Matchers.nullValue())\n+                .body(\""intPrimitive\"", Matchers.equalTo(0))\n+                .body(\""integerInstance\"", nullValue())\n+                .body(\""longPrimitive\"", Matchers.equalTo(0))\n+                .body(\""longInstance\"", nullValue())\n+                .body(\""floatPrimitive\"", Matchers.equalTo(0F))\n+                .body(\""floatInstance\"", nullValue())\n+                .body(\""doublePrimitive\"", Matchers.equalTo(0F))\n+                .body(\""doubleInstance\"", Matchers.nullValue())\n+                .body(\""booleanPrimitive\"", Matchers.equalTo(false))\n+                .body(\""booleanInstance\"", Matchers.nullValue());\n+    }\n }\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesBean.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesBean.java\nnew file mode 100644\nindex 0000000000000..3469b83fdd118\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesBean.java\n@@ -0,0 +1,157 @@\n+package io.quarkus.resteasy.reactive.jackson.deployment.test;\n+\n+public class PrimitiveTypesBean {\n+\n+    private char charPrimitive;\n+    private Character characterPrimitive;\n+\n+    private short shortPrimitive;\n+    private Short shortInstance;\n+\n+    private int intPrimitive;\n+    private Integer integerInstance;\n+\n+    private long longPrimitive;\n+    private Long longInstance;\n+\n+    private float floatPrimitive;\n+    private Float floatInstance;\n+\n+    private double doublePrimitive;\n+    private Double doubleInstance;\n+\n+    private boolean booleanPrimitive;\n+    private Boolean booleanInstance;\n+\n+    public PrimitiveTypesBean(char charPrimitive, Character characterPrimitive, short shortPrimitive, Short shortInstance,\n+            int intPrimitive, Integer integerInstance, long longPrimitive, Long longInstance, float floatPrimitive,\n+            Float floatInstance, double doublePrimitive, Double doubleInstance, boolean booleanPrimitive,\n+            Boolean booleanInstance) {\n+        this.charPrimitive = charPrimitive;\n+        this.characterPrimitive = characterPrimitive;\n+        this.shortPrimitive = shortPrimitive;\n+        this.shortInstance = shortInstance;\n+        this.intPrimitive = intPrimitive;\n+        this.integerInstance = integerInstance;\n+        this.longPrimitive = longPrimitive;\n+        this.longInstance = longInstance;\n+        this.floatPrimitive = floatPrimitive;\n+        this.floatInstance = floatInstance;\n+        this.doublePrimitive = doublePrimitive;\n+        this.doubleInstance = doubleInstance;\n+        this.booleanPrimitive = booleanPrimitive;\n+        this.booleanInstance = booleanInstance;\n+    }\n+\n+    public char getCharPrimitive() {\n+        return charPrimitive;\n+    }\n+\n+    public void setCharPrimitive(char charPrimitive) {\n+        this.charPrimitive = charPrimitive;\n+    }\n+\n+    public Character getCharacterPrimitive() {\n+        return characterPrimitive;\n+    }\n+\n+    public void setCharPrimitive(Character characterPrimitive) {\n+        this.characterPrimitive = characterPrimitive;\n+    }\n+\n+    public short getShortPrimitive() {\n+        return shortPrimitive;\n+    }\n+\n+    public void setShortPrimitive(short shortPrimitive) {\n+        this.shortPrimitive = shortPrimitive;\n+    }\n+\n+    public Short getShortInstance() {\n+        return shortInstance;\n+    }\n+\n+    public void setShortInstance(Short shortInstance) {\n+        this.shortInstance = shortInstance;\n+    }\n+\n+    public int getIntPrimitive() {\n+        return intPrimitive;\n+    }\n+\n+    public void setIntPrimitive(int intPrimitive) {\n+        this.intPrimitive = intPrimitive;\n+    }\n+\n+    public Integer getIntegerInstance() {\n+        return integerInstance;\n+    }\n+\n+    public void setIntegerInstance(Integer integerInstance) {\n+        this.integerInstance = integerInstance;\n+    }\n+\n+    public long getLongPrimitive() {\n+        return longPrimitive;\n+    }\n+\n+    public void setLongPrimitive(long longPrimitive) {\n+        this.longPrimitive = longPrimitive;\n+    }\n+\n+    public Long getLongInstance() {\n+        return longInstance;\n+    }\n+\n+    public void setLongInstance(Long longInstance) {\n+        this.longInstance = longInstance;\n+    }\n+\n+    public float getFloatPrimitive() {\n+        return floatPrimitive;\n+    }\n+\n+    public void setFloatPrimitive(float floatPrimitive) {\n+        this.floatPrimitive = floatPrimitive;\n+    }\n+\n+    public Float getFloatInstance() {\n+        return floatInstance;\n+    }\n+\n+    public void setFloatInstance(Float floatInstance) {\n+        this.floatInstance = floatInstance;\n+    }\n+\n+    public double getDoublePrimitive() {\n+        return doublePrimitive;\n+    }\n+\n+    public void setDoublePrimitive(double doublePrimitive) {\n+        this.doublePrimitive = doublePrimitive;\n+    }\n+\n+    public Double getDoubleInstance() {\n+        return doubleInstance;\n+    }\n+\n+    public void setDoubleInstance(Double doubleInstance) {\n+        this.doubleInstance = doubleInstance;\n+    }\n+\n+    public boolean isBooleanPrimitive() {\n+        return booleanPrimitive;\n+    }\n+\n+    public void setBooleanPrimitive(boolean booleanPrimitive) {\n+        this.booleanPrimitive = booleanPrimitive;\n+    }\n+\n+    public Boolean getBooleanInstance() {\n+        return booleanInstance;\n+    }\n+\n+    public void setBooleanInstance(Boolean booleanInstance) {\n+        this.booleanInstance = booleanInstance;\n+    }\n+}\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesRecord.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesRecord.java\nnew file mode 100644\nindex 0000000000000..8bd2a86c79c43\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/PrimitiveTypesRecord.java\n@@ -0,0 +1,6 @@\n+package io.quarkus.resteasy.reactive.jackson.deployment.test;\n+\n+public record PrimitiveTypesRecord(char charPrimitive, Character characterPrimitive, short shortPrimitive, Short shortInstance,\n+        int intPrimitive, Integer integerInstance, long longPrimitive, Long longInstance, float floatPrimitive,\n+        Float floatInstance, double doublePrimitive, Double doubleInstance, boolean booleanPrimitive, Boolean booleanInstance) {\n+}\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java\nindex fe6b7bbd0d55c..5d1d9553ba5a4 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java\n@@ -501,6 +501,18 @@ public ItemExtended getItemExtended() {\n         return item;\n     }\n \n+    @POST\n+    @Path(\""/primitive-types-bean\"")\n+    public PrimitiveTypesBean echoPrimitiveTypesBean(PrimitiveTypesBean bean) {\n+        return bean;\n+    }\n+\n+    @POST\n+    @Path(\""/primitive-types-record\"")\n+    public PrimitiveTypesRecord echoPrimitiveTypesRecord(PrimitiveTypesRecord record) {\n+        return record;\n+    }\n+\n     public static class UnquotedFieldsPersonSerialization implements BiFunction<ObjectMapper, Type, ObjectWriter> {\n \n         public static final AtomicInteger count = new AtomicInteger();\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\nindex 1bd5b96f311dc..9eae5fadc780f 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonTest.java\n@@ -26,7 +26,8 @@ public JavaArchive get() {\n                                     AbstractUnsecuredPet.class, UnsecuredPet.class, SecuredPersonInterface.class, Frog.class,\n                                     Pond.class, FrogBodyParts.class, FrogBodyParts.BodyPart.class, ContainerDTO.class,\n                                     NestedInterface.class, StateRecord.class, MapWrapper.class, GenericWrapper.class,\n-                                    Fruit.class, Price.class, DogRecord.class, ItemExtended.class, Book.class, LombokBook.class)\n+                                    Fruit.class, Price.class, DogRecord.class, ItemExtended.class, Book.class, LombokBook.class,\n+                                    PrimitiveTypesBean.class, PrimitiveTypesRecord.class)\n                             .addAsResource(new StringAsset(\""admin-expression=admin\\n\"" +\n                                     \""user-expression=user\\n\"" +\n                                     \""birth-date-roles=alice,bob\\n\""), \""application.properties\"");\n\ndiff --git a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\nindex c5ddf344a4214..34ec11f8700f6 100644\n--- a/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\n+++ b/extensions/resteasy-reactive/rest-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonWithReflectionFreeSerializersTest.java\n@@ -28,7 +28,8 @@ public JavaArchive get() {\n                                     AbstractUnsecuredPet.class, UnsecuredPet.class, SecuredPersonInterface.class, Frog.class,\n                                     Pond.class, FrogBodyParts.class, FrogBodyParts.BodyPart.class, ContainerDTO.class,\n                                     NestedInterface.class, StateRecord.class, MapWrapper.class, GenericWrapper.class,\n-                                    Fruit.class, Price.class, DogRecord.class, ItemExtended.class, Book.class, LombokBook.class)\n+                                    Fruit.class, Price.class, DogRecord.class, ItemExtended.class, Book.class, LombokBook.class,\n+                                    PrimitiveTypesBean.class, PrimitiveTypesRecord.class)\n                             .addAsResource(new StringAsset(\""admin-expression=admin\\n\"" +\n                                     \""user-expression=user\\n\"" +\n                                     \""birth-date-roles=alice,bob\\n\"" +\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""quarkusio__quarkus-47520"", ""pr_id"": 47520, ""issue_id"": 47509, ""repo"": ""quarkusio/quarkus"", ""problem_statement"": ""Native application execution failure with @Retry on the class and private methods\n### Describe the bug\n\nHi,\n\na native application fails to start with the following logs:\n```\n2025-04-23 17:43:09,812 ERROR [io.qua.run.Application] (main) Failed to start application: java.lang.RuntimeException: Failed to start quarkus\n        at io.quarkus.runner.ApplicationImpl.doStart(Unknown Source)\n        at io.quarkus.runtime.Application.start(Application.java:101)\n        at io.quarkus.runtime.ApplicationLifecycleManager.run(ApplicationLifecycleManager.java:119)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:80)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:51)\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:144)\n        at io.quarkus.runner.GeneratedMain.main(Unknown Source)\nCaused by: jakarta.enterprise.inject.spi.DeploymentException: java.lang.NoSuchMethodException: TestRestryService.myPrivateMethod()\n        at io.quarkus.smallrye.faulttolerance.runtime.SmallRyeFaultToleranceRecorder.createFaultToleranceOperation(SmallRyeFaultToleranceRecorder.java:44)\n        at io.quarkus.runner.recorded.SmallRyeFaultToleranceProcessor$processFaultToleranceAnnotations1222864980.deploy_0(Unknown Source)\n        at io.quarkus.runner.recorded.SmallRyeFaultToleranceProcessor$processFaultToleranceAnnotations1222864980.deploy(Unknown Source)\n        ... 7 more\nCaused by: java.lang.NoSuchMethodException: TestRestryService.myPrivateMethod()\n        at java.base@21.0.6/java.lang.Class.checkMethod(DynamicHub.java:1078)\n        at java.base@21.0.6/java.lang.Class.getDeclaredMethod(DynamicHub.java:1168)\n        at io.smallrye.faulttolerance.autoconfig.MethodDescriptor.reflect(MethodDescriptor.java:28)\n        at io.quarkus.smallrye.faulttolerance.runtime.SmallRyeFaultToleranceRecorder.createFaultToleranceOperation(SmallRyeFaultToleranceRecorder.java:31)\n        ... 9 more\n```\n\nThis is caused by the use of @Retry at class level in a class with a private method.\n\nThanks for the help.\n\n### Expected behavior\n\nThe native application start properly.\n\n### Actual behavior\n\nThe native application fails.\n\n### How to Reproduce?\n\n[code-with-quarkus-native-retry.zip](https://github.com/user-attachments/files/19871880/code-with-quarkus-native-retry.zip)\n\n- build a native executable (with Docker `mvn install -Dnative -DskipTests -Dquarkus.native.container-build=true`)\n- run the native app: ./target/code-with-quarkus-1.0.0-SNAPSHOT-runner\n\n### Output of `uname -a` or `ver`\n\nUbuntu 24.04.2 LTS\n\n### Output of `java -version`\n\nopenjdk version \""21.0.6\"" 2025-01-21\n\n### Mandrel or GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n3.21.3\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.8.7\n\n### Additional information\n\n_No response_"", ""issue_word_count"": 357, ""test_files_count"": 3, ""non_test_files_count"": 1, ""pr_changed_files"": [""extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/FaultToleranceScanner.java"", ""integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/FaultToleranceTestResource.java"", ""integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/SecondService.java"", ""integration-tests/main/src/test/java/io/quarkus/it/main/FaultToleranceTestCase.java""], ""pr_changed_test_files"": [""integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/FaultToleranceTestResource.java"", ""integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/SecondService.java"", ""integration-tests/main/src/test/java/io/quarkus/it/main/FaultToleranceTestCase.java""], ""base_commit"": ""869f9784a22463bfc71f904a87fd5ea0396c7291"", ""head_commit"": ""bb513628bd50b51a880c8834060fce2ff8204789"", ""repo_url"": ""https://github.com/quarkusio/quarkus/pull/47520"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47520"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-24T13:16:10.000Z"", ""patch"": ""diff --git a/extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/FaultToleranceScanner.java b/extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/FaultToleranceScanner.java\nindex 473faec9161c3..40b8e62843f27 100644\n--- a/extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/FaultToleranceScanner.java\n+++ b/extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/FaultToleranceScanner.java\n@@ -1,6 +1,7 @@\n package io.quarkus.smallrye.faulttolerance.deployment;\n \n import java.lang.annotation.Annotation;\n+import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n@@ -102,6 +103,10 @@ void forEachMethod(ClassInfo clazz, Consumer<MethodInfo> action) {\n                 // synthetic methods can't be intercepted\n                 continue;\n             }\n+            if (Modifier.isPrivate(method.flags())) {\n+                // private methods can't be intercepted\n+                continue;\n+            }\n             if (annotationStore.hasAnnotation(method, io.quarkus.arc.processor.DotNames.NO_CLASS_INTERCEPTORS)\n                     && !annotationStore.hasAnyAnnotation(method, DotNames.FT_ANNOTATIONS)) {\n                 // methods annotated @NoClassInterceptors and not annotated with an interceptor binding are not intercepted\n"", ""test_patch"": ""diff --git a/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/FaultToleranceTestResource.java b/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/FaultToleranceTestResource.java\nindex 02cd7864c7429..fc9d1d9d880bc 100644\n--- a/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/FaultToleranceTestResource.java\n+++ b/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/FaultToleranceTestResource.java\n@@ -12,6 +12,9 @@ public class FaultToleranceTestResource {\n     @Inject\n     Service service;\n \n+    @Inject\n+    SecondService secondService;\n+\n     @GET\n     public String getName() {\n         AtomicInteger counter = new AtomicInteger();\n@@ -34,4 +37,10 @@ public String fallback() {\n         String name = service.fallbackMethod(counter);\n         return counter + \"":\"" + name;\n     }\n+\n+    @GET\n+    @Path(\""/hello\"")\n+    public String hello() {\n+        return secondService.publicHello();\n+    }\n }\n\ndiff --git a/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/SecondService.java b/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/SecondService.java\nnew file mode 100644\nindex 0000000000000..231b2e5910a20\n--- /dev/null\n+++ b/integration-tests/main/src/main/java/io/quarkus/it/faulttolerance/SecondService.java\n@@ -0,0 +1,17 @@\n+package io.quarkus.it.faulttolerance;\n+\n+import jakarta.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.faulttolerance.Retry;\n+\n+@ApplicationScoped\n+@Retry\n+public class SecondService {\n+    public String publicHello() {\n+        return \""hello\"";\n+    }\n+\n+    private String privateHello() {\n+        return \""hello\"";\n+    }\n+}\n\ndiff --git a/integration-tests/main/src/test/java/io/quarkus/it/main/FaultToleranceTestCase.java b/integration-tests/main/src/test/java/io/quarkus/it/main/FaultToleranceTestCase.java\nindex 355d2ae1bc917..5c5c10fed48e9 100644\n--- a/integration-tests/main/src/test/java/io/quarkus/it/main/FaultToleranceTestCase.java\n+++ b/integration-tests/main/src/test/java/io/quarkus/it/main/FaultToleranceTestCase.java\n@@ -35,5 +35,10 @@ public void test() throws Exception {\n                 .given().baseUri(uri.toString() + \""/fallback\"")\n                 .when().get()\n                 .then().body(is(\""1:fallback\""));\n+\n+        RestAssured\n+                .given().baseUri(uri.toString() + \""/hello\"")\n+                .when().get()\n+                .then().body(is(\""hello\""));\n     }\n }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""quarkusio__quarkus-47386"", ""pr_id"": 47386, ""issue_id"": 26496, ""repo"": ""quarkusio/quarkus"", ""problem_statement"": ""Matching a base path of another controller, results in `405 Method Not Allowed`\n### Describe the bug\n\nIt took me some time to understand the bug I am hitting, but now I am pretty certain it's a bug and it's reproducible. Let's imagine you have two controllers:\r\n\r\n```\r\n@Path(\""/base\"")\r\nclass Base {\r\n\r\n   @GET\r\n   @Path(\""{id}\"") \r\n   public Uni<RestResponse<?>> base() {..}\r\n}\r\n\r\n@Path(\""/base/{id}\"")\r\nclass Extension {\r\n\r\n   @GET\r\n   @Path(\""extension\"") \r\n   public Uni<RestResponse<?>> extension() {..}\r\n}\r\n```\r\n\r\nCalling `GET /base/123` will result in `HTTP 405 Method Not Allowed`. Note that:\r\n\r\n* endpoints are correctly visible in the Dev UI `List of endpoints`\r\n* endpoints are correctly included in Open API and Swagger UI\r\n\r\nHowever, seems that the base-path of the second controller is hiding the first controller in case when things are getting resolved in the `org.jboss.resteasy.reactive.server.handlers.ClassRoutingHandler`.  \n\n### Expected behavior\n\nTarget method executed correctly.\n\n### Actual behavior\n\n`405 Method Not Allowed`\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n2.10.0.Final\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nMaven home: /home/ise/.m2/wrapper/dists/apache-maven-3.8.4-bin/52ccbt68d252mdldqsfsn03jlf/apache-maven-3.8.4 Java version: 17.0.3, vendor: Private Build, runtime: /usr/lib/jvm/java-17-openjdk-amd64 Default locale: en_US, platform encoding: UTF-8 OS name: \""linux\"", version: \""5.13.0-51-generic\"", arch: \""amd64\"", family: \""unix\""\n\n### Additional information\n\nWorkaround is to match base paths in both controllers:\r\n\r\n```\r\n@Path(\""/base\"")\r\nclass Base {\r\n\r\n   @GET\r\n   @Path(\""{id}\"") \r\n   public Uni<RestResponse<?>> base() {..}\r\n}\r\n\r\n@Path(\""/base\"")\r\nclass Extension {\r\n\r\n   @GET\r\n   @Path(\""{id}/extension\"") \r\n   public Uni<RestResponse<?>> extension() {..}\r\n}\r\n```"", ""issue_word_count"": 285, ""test_files_count"": 2, ""non_test_files_count"": 4, ""pr_changed_files"": [""extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/OverlappingResourceClassPathTest.java"", ""extensions/resteasy-reactive/rest/runtime/src/test/java/io/quarkus/resteasy/reactive/runtime/mapping/RequestMapperTestCase.java"", ""independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java"", ""independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java"", ""independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RestInitialHandler.java"", ""independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java""], ""pr_changed_test_files"": [""extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/OverlappingResourceClassPathTest.java"", ""extensions/resteasy-reactive/rest/runtime/src/test/java/io/quarkus/resteasy/reactive/runtime/mapping/RequestMapperTestCase.java""], ""base_commit"": ""244937ac27c360f1bb945399ca657d05e8c6e0dc"", ""head_commit"": ""6b67e052ff355782ac4eba5d5f392c702c594a7d"", ""repo_url"": ""https://github.com/quarkusio/quarkus/pull/47386"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/47386"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-15T09:18:34.000Z"", ""patch"": ""diff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\nindex 289625c40fdcf..5efd63f98183f 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java\n@@ -51,6 +51,7 @@\n import org.jboss.resteasy.reactive.server.SimpleResourceInfo;\n import org.jboss.resteasy.reactive.server.core.multipart.FormData;\n import org.jboss.resteasy.reactive.server.core.serialization.EntityWriter;\n+import org.jboss.resteasy.reactive.server.handlers.RestInitialHandler;\n import org.jboss.resteasy.reactive.server.injection.ResteasyReactiveInjectionContext;\n import org.jboss.resteasy.reactive.server.jaxrs.AsyncResponseImpl;\n import org.jboss.resteasy.reactive.server.jaxrs.ContainerRequestContextImpl;\n@@ -62,6 +63,7 @@\n import org.jboss.resteasy.reactive.server.jaxrs.SseEventSinkImpl;\n import org.jboss.resteasy.reactive.server.jaxrs.SseImpl;\n import org.jboss.resteasy.reactive.server.jaxrs.UriInfoImpl;\n+import org.jboss.resteasy.reactive.server.mapping.RequestMapper;\n import org.jboss.resteasy.reactive.server.mapping.RuntimeResource;\n import org.jboss.resteasy.reactive.server.mapping.URITemplate;\n import org.jboss.resteasy.reactive.server.multipart.FormValue;\n@@ -156,6 +158,8 @@ public abstract class ResteasyReactiveRequestContext\n     private FormData formData;\n     private boolean producesChecked;\n \n+    private RequestMapper.RequestMatch<RestInitialHandler.InitialMatch> initialMatch;\n+\n     public ResteasyReactiveRequestContext(Deployment deployment,\n             ThreadSetupAction requestContext, ServerRestHandler[] handlerChain, ServerRestHandler[] abortHandlerChain) {\n         super(handlerChain, abortHandlerChain, requestContext);\n@@ -203,6 +207,44 @@ public void restart(RuntimeResource target, boolean setLocatorTarget) {\n         this.target = target;\n     }\n \n+    public void setupInitialMatchAndRestart(RequestMapper.RequestMatch<RestInitialHandler.InitialMatch> initialMatch) {\n+        this.initialMatch = initialMatch;\n+\n+        restart(initialMatch.value.handlers);\n+        setMaxPathParams(initialMatch.value.maxPathParams);\n+        setRemaining(initialMatch.remaining);\n+        for (int i = 0; i < initialMatch.pathParamValues.length; ++i) {\n+            String pathParamValue = initialMatch.pathParamValues[i];\n+            if (pathParamValue == null) {\n+                break;\n+            }\n+            setPathParamValue(i, initialMatch.pathParamValues[i]);\n+        }\n+    }\n+\n+    /**\n+     * Restarts handler chain processing if another initial match is found.\n+     *\n+     * @return true if a restart occurred\n+     */\n+    public boolean restartWithNextInitialMatch() {\n+        initialMatch = new RequestMapper<>(deployment.getClassMappers()).continueMatching(getPathWithoutPrefix(), initialMatch);\n+        if (initialMatch == null) {\n+            return false;\n+        }\n+        restart(initialMatch.value.handlers);\n+        setMaxPathParams(initialMatch.value.maxPathParams);\n+        setRemaining(initialMatch.remaining);\n+        for (int i = 0; i < initialMatch.pathParamValues.length; ++i) {\n+            String pathParamValue = initialMatch.pathParamValues[i];\n+            if (pathParamValue == null) {\n+                break;\n+            }\n+            setPathParamValue(i, initialMatch.pathParamValues[i]);\n+        }\n+        return true;\n+    }\n+\n     /**\n      * Meant to be used when an error occurred early in processing chain\n      */\n\ndiff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java\nindex 8c23885d37674..c7434b396aefb 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ClassRoutingHandler.java\n@@ -66,6 +66,9 @@ public void handle(ResteasyReactiveRequestContext requestContext) throws Excepti\n                 mapper = mappers.get(null);\n             }\n             if (mapper == null) {\n+                if (requestContext.restartWithNextInitialMatch()) {\n+                    return;\n+                }\n                 // The idea here is to check if any of the mappers of the class could map the request - if the HTTP Method were correct\n                 String remaining = getRemaining(requestContext);\n                 for (RequestMapper<RuntimeResource> existingMapper : mappers.values()) {\n@@ -89,6 +92,9 @@ public void handle(ResteasyReactiveRequestContext requestContext) throws Excepti\n             }\n \n             if (target == null) {\n+                if (requestContext.restartWithNextInitialMatch()) {\n+                    return;\n+                }\n                 // The idea here is to check if any of the mappers of the class could map the request - if the HTTP Method were correct\n                 for (Map.Entry<String, RequestMapper<RuntimeResource>> entry : mappers.entrySet()) {\n                     if (entry.getKey() == null) {\n\ndiff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RestInitialHandler.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RestInitialHandler.java\nindex 6afebf58c4fe9..84f30d6ff4cb6 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RestInitialHandler.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RestInitialHandler.java\n@@ -73,16 +73,7 @@ public void handle(ResteasyReactiveRequestContext requestContext) throws Excepti\n                 return;\n             }\n         }\n-        requestContext.restart(target.value.handlers);\n-        requestContext.setMaxPathParams(target.value.maxPathParams);\n-        requestContext.setRemaining(target.remaining);\n-        for (int i = 0; i < target.pathParamValues.length; ++i) {\n-            String pathParamValue = target.pathParamValues[i];\n-            if (pathParamValue == null) {\n-                break;\n-            }\n-            requestContext.setPathParamValue(i, target.pathParamValues[i]);\n-        }\n+        requestContext.setupInitialMatchAndRestart(target);\n     }\n \n     public static class InitialMatch {\n\ndiff --git a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java\nindex 6c5d8869d3a75..e85367904451a 100644\n--- a/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java\n+++ b/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/mapping/RequestMapper.java\n@@ -4,7 +4,6 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.function.BiConsumer;\n import java.util.regex.Matcher;\n@@ -42,30 +41,84 @@ public void accept(String stem, ArrayList<RequestPath<T>> list) {\n         requestPaths = pathMatcherBuilder.build();\n     }\n \n+    /**\n+     * Match the path to the UriTemplates. Returns the best match, meaning the least remaining path after match.\n+     *\n+     * @param path path to search UriTemplate for\n+     * @return best RequestMatch, or null if the path has no match\n+     */\n     public RequestMatch<T> map(String path) {\n-        var result = mapFromPathMatcher(path, requestPaths.match(path));\n+        var result = mapFromPathMatcher(path, requestPaths.match(path), 0);\n         if (result != null) {\n             return result;\n         }\n \n         // the following code is meant to handle cases like https://github.com/quarkusio/quarkus/issues/30667\n-        return mapFromPathMatcher(path, requestPaths.defaultMatch(path));\n+        return mapFromPathMatcher(path, requestPaths.defaultMatch(path), 0);\n+    }\n+\n+    /**\n+     * Continue matching for the next best path starting from the last match, meaning the least remaining path after match.\n+     *\n+     * @param path path to search UriTemplate for\n+     * @return another RequestMatch. Might return null if all matches are exhausted.\n+     */\n+    public RequestMatch<T> continueMatching(String path, RequestMatch<T> lastMatch) {\n+        if (lastMatch == null) {\n+            return null;\n+        }\n+\n+        var initialMatches = requestPaths.match(path);\n+        var result = mapFromPathMatcher(path, initialMatches, 0);\n+        if (result != null) {\n+            int idx = nextMatchStartingIndex(initialMatches, lastMatch);\n+            return mapFromPathMatcher(path, initialMatches, idx);\n+        }\n+\n+        // the following code is meant to handle cases like https://github.com/quarkusio/quarkus/issues/30667\n+        initialMatches = requestPaths.defaultMatch(path);\n+        result = mapFromPathMatcher(path, initialMatches, 0);\n+        if (result != null) {\n+            int idx = nextMatchStartingIndex(initialMatches, lastMatch);\n+            return mapFromPathMatcher(path, initialMatches, idx);\n+        }\n+        return null;\n+    }\n+\n+    private int nextMatchStartingIndex(PathMatcher.PathMatch<ArrayList<RequestPath<T>>> initialMatches,\n+            RequestMatch<T> current) {\n+        if (initialMatches.getValue() == null || initialMatches.getValue().isEmpty()) {\n+            return -1;\n+        }\n+        for (int i = 0; i < initialMatches.getValue().size(); i++) {\n+            if (initialMatches.getValue().get(i).template == current.template) {\n+                i++;\n+\n+                if (i < initialMatches.getValue().size()) {\n+                    return i;\n+                }\n+                return -1;\n+            }\n+        }\n+\n+        return -1;\n     }\n \n     @SuppressWarnings({ \""rawtypes\"", \""unchecked\"" })\n-    private RequestMatch<T> mapFromPathMatcher(String path, PathMatcher.PathMatch<ArrayList<RequestPath<T>>> initialMatch) {\n-        var value = initialMatch.getValue();\n-        if (initialMatch.getValue() == null) {\n+    private RequestMatch<T> mapFromPathMatcher(String path, PathMatcher.PathMatch<ArrayList<RequestPath<T>>> initialMatches,\n+            int startIdx) {\n+        var value = initialMatches.getValue();\n+        if (value == null || startIdx < 0) {\n             return null;\n         }\n         int pathLength = path.length();\n-        for (int index = 0; index < ((List<RequestPath<T>>) value).size(); index++) {\n-            RequestPath<T> potentialMatch = ((List<RequestPath<T>>) value).get(index);\n+        for (int index = startIdx; index < value.size(); index++) {\n+            RequestPath<T> potentialMatch = value.get(index);\n             String[] params = (maxParams > 0) ? new String[maxParams] : EMPTY_STRING_ARRAY;\n             int paramCount = 0;\n             boolean matched = true;\n             boolean prefixAllowed = potentialMatch.prefixTemplate;\n-            int matchPos = initialMatch.getMatched().length();\n+            int matchPos = initialMatches.getMatched().length();\n             for (int i = 1; i < potentialMatch.template.components.length; ++i) {\n                 URITemplate.TemplateComponent segment = potentialMatch.template.components[i];\n                 if (segment.type == URITemplate.Type.CUSTOM_REGEX) {\n"", ""test_patch"": ""diff --git a/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/OverlappingResourceClassPathTest.java b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/OverlappingResourceClassPathTest.java\nnew file mode 100644\nindex 0000000000000..1e2245a24d724\n--- /dev/null\n+++ b/extensions/resteasy-reactive/rest/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/OverlappingResourceClassPathTest.java\n@@ -0,0 +1,79 @@\n+package io.quarkus.resteasy.reactive.server.test.resource.basic;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.util.function.Supplier;\n+\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.jboss.resteasy.reactive.RestPath;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.resteasy.reactive.server.test.simple.PortProviderUtil;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+class OverlappingResourceClassPathTest {\n+    @RegisterExtension\n+    static QuarkusUnitTest testExtension = new QuarkusUnitTest()\n+            .setArchiveProducer(new Supplier<>() {\n+                @Override\n+                public JavaArchive get() {\n+                    JavaArchive war = ShrinkWrap.create(JavaArchive.class);\n+                    war.addClasses(PortProviderUtil.class);\n+                    war.addClasses(UsersResource.class);\n+                    war.addClasses(UserResource.class);\n+                    war.addClasses(GreetingResource.class);\n+                    return war;\n+                }\n+            });\n+\n+    @Test\n+    void basicTest() {\n+        given()\n+                .get(\""/users/userId\"")\n+                .then()\n+                .statusCode(200)\n+                .body(equalTo(\""userId\""));\n+\n+        given()\n+                .get(\""/users/userId/by-id\"")\n+                .then()\n+                .statusCode(200)\n+                .body(equalTo(\""getByIdInUserResource-userId\""));\n+    }\n+\n+    @Path(\""/users\"")\n+    public static class UsersResource {\n+\n+        @GET\n+        @Path(\""{id}\"")\n+        public String getByIdInUsersResource(@RestPath String id) {\n+            return id;\n+        }\n+    }\n+\n+    @Path(\""/users/{id}\"")\n+    public static class UserResource {\n+\n+        @GET\n+        @Path(\""by-id\"")\n+        public String getByIdInUserResource(@RestPath String id) {\n+            return \""getByIdInUserResource-\"" + id;\n+        }\n+    }\n+\n+    @Path(\""/i-do-not-match\"")\n+    public static class GreetingResource {\n+\n+        @GET\n+        @Path(\""greet\"")\n+        public String greet() {\n+            return \""Hello\"";\n+        }\n+    }\n+}\n\ndiff --git a/extensions/resteasy-reactive/rest/runtime/src/test/java/io/quarkus/resteasy/reactive/runtime/mapping/RequestMapperTestCase.java b/extensions/resteasy-reactive/rest/runtime/src/test/java/io/quarkus/resteasy/reactive/runtime/mapping/RequestMapperTestCase.java\nindex 3e78532428fb9..1964c1c09400d 100644\n--- a/extensions/resteasy-reactive/rest/runtime/src/test/java/io/quarkus/resteasy/reactive/runtime/mapping/RequestMapperTestCase.java\n+++ b/extensions/resteasy-reactive/rest/runtime/src/test/java/io/quarkus/resteasy/reactive/runtime/mapping/RequestMapperTestCase.java\n@@ -10,9 +10,9 @@\n public class RequestMapperTestCase {\n \n     @Test\n-    public void testPathMapper() {\n+    void testMap() {\n \n-        RequestMapper<String> mapper = mapper(\""/id\"", \""/id/{param}\"", \""/bar/{p1}/{p2}\"", \""/bar/{p1}\"");\n+        RequestMapper<String> mapper = mapper(false, \""/id\"", \""/id/{param}\"", \""/bar/{p1}/{p2}\"", \""/bar/{p1}\"");\n         mapper.dump();\n \n         RequestMapper.RequestMatch<String> result = mapper.map(\""/bar/34/44\"");\n@@ -31,13 +31,32 @@ public void testPathMapper() {\n         result = mapper.map(\""/bar/34\"");\n         Assertions.assertEquals(\""/bar/{p1}\"", result.value);\n         Assertions.assertEquals(\""34\"", result.pathParamValues[0]);\n+    }\n+\n+    @Test\n+    public void testContinueMatching() {\n+        RequestMapper<String> mapper = mapper(true, \""/greetings\"", \""/greetings/{id}\"", \""/greetings/unrelated\"");\n+        mapper.dump();\n+\n+        var result = mapper.map(\""/not-existing\"");\n+        Assertions.assertNull(result);\n+\n+        result = mapper.map(\""/greetings/greeting-id\"");\n+        Assertions.assertNotNull(result);\n+        Assertions.assertEquals(\""\"", result.remaining);\n+\n+        result = mapper.continueMatching(\""/greetings/greeting-id\"", result);\n+        Assertions.assertNotNull(result);\n+        Assertions.assertEquals(\""/greeting-id\"", result.remaining);\n \n+        result = mapper.continueMatching(\""/greetings/greeting-id\"", result);\n+        Assertions.assertNull(result);\n     }\n \n-    RequestMapper<String> mapper(String... vals) {\n+    RequestMapper<String> mapper(boolean prefixTemplates, String... vals) {\n         ArrayList<RequestMapper.RequestPath<String>> list = new ArrayList<>();\n         for (String i : vals) {\n-            list.add(new RequestMapper.RequestPath<>(false, new URITemplate(i, false), i));\n+            list.add(new RequestMapper.RequestPath<>(prefixTemplates, new URITemplate(i, false), i));\n         }\n         return new RequestMapper<>(list);\n     }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""quarkusio__quarkus-45300"", ""pr_id"": 45300, ""issue_id"": 36510, ""repo"": ""quarkusio/quarkus"", ""problem_statement"": ""`quarkus.otel.traces.suppress-non-application-uris` not working with `quarkus.management.enabled`\n### Describe the bug\n\nThe default behaviour of `quarkus.otel.traces.suppress-non-application-uris` is to suppress trace collection of non applicative uris, everything is fine with standard confs, but if I enable the management interface through `quarkus.management.enabled=true`suppresion will fail.\n\n### Expected behavior\n\nWith `quarkus.management.enabled` set to true, health check will be redirect to `0.0.0.0:9000/q/health` and trace collection will continue to be suppresed.\n\n### Actual behavior\n\nOtel trace collection is not suppressed and it seems that `quarkus.otel.traces.suppress-non-application-uris` is been ignored.\n\n### How to Reproduce?\n\n```Quarkus platform BOMs:\r\n         io.quarkus.platform:quarkus-bom:pom:3.4.3 \u2714\r\n\r\nExtensions from io.quarkus.platform:quarkus-bom:\r\n         io.quarkus:quarkus-resteasy-reactive-jackson \u2714\r\n         io.quarkus:quarkus-smallrye-health \u2714\r\n         io.quarkus:quarkus-config-yaml \u2714\r\n         io.quarkus:quarkus-arc \u2714\r\n         io.quarkus:quarkus-rest-client-reactive-jackson \u2714\r\n\r\n Extensions from unknown origin:\r\n         io.quarkiverse.opentelemetry.exporter:quarkus-opentelemetry-exporter-gcp:2.0.0.Final\r\n```\r\n\r\n`application.yaml`\r\n```\r\nquarkus:\r\n  otel:\r\n    traces:\r\n      suppress-non-application-uris: true\r\n  management:\r\n    enabled: true\r\n  opentelemetry:\r\n    tracer:\r\n      exporter:\r\n        gcp:\r\n          enabled: false\r\n        otlp:\r\n          enabled: true\r\n```\r\n\r\n1. make call to health api\r\n`curl localhost:9000/q/health`\r\n2. check on Otel receiver (ex. Jaeger)\r\n3. will see a trace for health call\n\n### Output of `uname -a` or `ver`\n\nDarwin *** 23.0.0 Darwin Kernel Version 23.0.0: Fri Sep 15 14:41:43 PDT 2023; root:xnu-10002.1.13~1/RELEASE_ARM64_T6000 arm64\n\n### Output of `java -version`\n\nopenjdk 17.0.6 2023-01-17 OpenJDK Runtime Environment Temurin-17.0.6+10 (build 17.0.6+10) OpenJDK 64-Bit Server VM Temurin-17.0.6+10 (build 17.0.6+10, mixed mode)\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n3.4.3\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.3\n\n### Additional information\n\n_No response_"", ""issue_word_count"": 330, ""test_files_count"": 4, ""non_test_files_count"": 9, ""pr_changed_files"": [""extensions/opentelemetry/deployment/pom.xml"", ""extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriManagementInterfaceTest.java"", ""extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriTest.java"", ""extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/common/exporter/TestSpanExporter.java"", ""extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java"", ""extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSampler.java"", ""extensions/opentelemetry/runtime/src/test/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSamplerTest.java"", ""extensions/vertx-http/deployment-spi/src/main/java/io/quarkus/vertx/http/deployment/spi/FrameworkEndpointsBuildItem.java"", ""extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/NonApplicationRootPathBuildItem.java"", ""extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/RouteBuildItem.java"", ""extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/VertxHttpProcessor.java"", ""extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/devmode/ConfiguredPathInfo.java"", ""extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/BasicRoute.java""], ""pr_changed_test_files"": [""extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriManagementInterfaceTest.java"", ""extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriTest.java"", ""extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/common/exporter/TestSpanExporter.java"", ""extensions/opentelemetry/runtime/src/test/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSamplerTest.java""], ""base_commit"": ""e75b0fd4b508240cffe0e9e17389d27bb3b95737"", ""head_commit"": ""d76ade7630818bbda6fbbc82fd8260960d8968b1"", ""repo_url"": ""https://github.com/quarkusio/quarkus/pull/45300"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/quarkusio__quarkus/45300"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-17T15:04:15.000Z"", ""patch"": ""diff --git a/extensions/opentelemetry/deployment/pom.xml b/extensions/opentelemetry/deployment/pom.xml\nindex f0b9e0ef6d2a4..306f138c26fcd 100644\n--- a/extensions/opentelemetry/deployment/pom.xml\n+++ b/extensions/opentelemetry/deployment/pom.xml\n@@ -145,6 +145,11 @@\n             <artifactId>quarkus-security-deployment</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-vertx-http-dev-ui-tests</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n         <dependency>\n             <groupId>io.opentelemetry</groupId>\n             <artifactId>opentelemetry-sdk-testing</artifactId>\n\ndiff --git a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java\nindex cbfc7d6e2d79b..3706eb9fd5c73 100644\n--- a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java\n+++ b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/AutoConfiguredOpenTelemetrySdkBuilderCustomizer.java\n@@ -5,8 +5,9 @@\n \n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import java.util.function.BiFunction;\n import java.util.function.Function;\n import java.util.function.Predicate;\n@@ -171,7 +172,7 @@ public Sampler apply(Sampler existingSampler, ConfigProperties configProperties)\n                                 .orElse(existingSampler);\n \n                         //collect default filtering targets (Needed for all samplers)\n-                        List<String> dropTargets = new ArrayList<>();\n+                        Set<String> dropTargets = new HashSet<>();\n                         if (oTelRuntimeConfig.traces().suppressNonApplicationUris()) {//default is true\n                             dropTargets.addAll(TracerRecorder.dropNonApplicationUriTargets);\n                         }\n\ndiff --git a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSampler.java b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSampler.java\nindex f42b26fbaa9e8..9e4a718dbcda8 100644\n--- a/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSampler.java\n+++ b/extensions/opentelemetry/runtime/src/main/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSampler.java\n@@ -3,7 +3,10 @@\n import static io.opentelemetry.semconv.UrlAttributes.URL_PATH;\n import static io.opentelemetry.semconv.UrlAttributes.URL_QUERY;\n \n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n import io.opentelemetry.api.common.Attributes;\n import io.opentelemetry.api.trace.SpanKind;\n@@ -14,12 +17,18 @@\n \n public class DropTargetsSampler implements Sampler {\n     private final Sampler sampler;\n-    private final List<String> dropTargets;\n+    private final Set<String> dropTargetsExact;\n+    private final Set<String> dropTargetsWildcard;\n \n     public DropTargetsSampler(final Sampler sampler,\n-            final List<String> dropTargets) {\n+            final Set<String> dropTargets) {\n         this.sampler = sampler;\n-        this.dropTargets = dropTargets;\n+        this.dropTargetsExact = dropTargets.stream().filter(s -> !s.endsWith(\""*\""))\n+                .collect(Collectors.toCollection(HashSet::new));\n+        this.dropTargetsWildcard = dropTargets.stream()\n+                .filter(s -> s.endsWith(\""*\""))\n+                .map(s -> s.substring(0, s.length() - 1))\n+                .collect(Collectors.toCollection(HashSet::new));\n     }\n \n     @Override\n@@ -48,26 +57,24 @@ private boolean shouldDrop(String target) {\n         if ((target == null) || target.isEmpty()) {\n             return false;\n         }\n-        if (safeContains(target)) { // check exact match\n+        if (containsExactly(target)) { // check exact match\n             return true;\n         }\n         if (target.charAt(target.length() - 1) == '/') { // check if the path without the ending slash matched\n-            if (safeContains(target.substring(0, target.length() - 1))) {\n+            if (containsExactly(target.substring(0, target.length() - 1))) {\n                 return true;\n             }\n         }\n-        int lastSlashIndex = target.lastIndexOf('/');\n-        if (lastSlashIndex != -1) {\n-            if (safeContains(target.substring(0, lastSlashIndex) + \""*\"")\n-                    || safeContains(target.substring(0, lastSlashIndex) + \""/*\"")) { // check if a wildcard matches\n+        for (String dropTargetsWildcard : dropTargetsWildcard) {\n+            if (target.startsWith(dropTargetsWildcard)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n \n-    private boolean safeContains(String target) {\n-        return dropTargets.contains(target);\n+    private boolean containsExactly(String target) {\n+        return dropTargetsExact.contains(target);\n     }\n \n     @Override\n\ndiff --git a/extensions/vertx-http/deployment-spi/src/main/java/io/quarkus/vertx/http/deployment/spi/FrameworkEndpointsBuildItem.java b/extensions/vertx-http/deployment-spi/src/main/java/io/quarkus/vertx/http/deployment/spi/FrameworkEndpointsBuildItem.java\nindex 90c140b6d6aad..d13509e196b4a 100644\n--- a/extensions/vertx-http/deployment-spi/src/main/java/io/quarkus/vertx/http/deployment/spi/FrameworkEndpointsBuildItem.java\n+++ b/extensions/vertx-http/deployment-spi/src/main/java/io/quarkus/vertx/http/deployment/spi/FrameworkEndpointsBuildItem.java\n@@ -1,17 +1,17 @@\n package io.quarkus.vertx.http.deployment.spi;\n \n-import java.util.List;\n+import java.util.Set;\n \n import io.quarkus.builder.item.SimpleBuildItem;\n \n public final class FrameworkEndpointsBuildItem extends SimpleBuildItem {\n-    private final List<String> endpoints;\n+    private final Set<String> endpoints;\n \n-    public FrameworkEndpointsBuildItem(final List<String> endpoints) {\n+    public FrameworkEndpointsBuildItem(final Set<String> endpoints) {\n         this.endpoints = endpoints;\n     }\n \n-    public List<String> getEndpoints() {\n+    public Set<String> getEndpoints() {\n         return endpoints;\n     }\n }\n\ndiff --git a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/NonApplicationRootPathBuildItem.java b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/NonApplicationRootPathBuildItem.java\nindex 0dc4b5e1f280c..8f0b9f91369a4 100644\n--- a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/NonApplicationRootPathBuildItem.java\n+++ b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/NonApplicationRootPathBuildItem.java\n@@ -270,6 +270,7 @@ public static class Builder extends RouteBuildItem.Builder {\n         private final NonApplicationRootPathBuildItem buildItem;\n         private RouteBuildItem.RouteType routeType = RouteBuildItem.RouteType.FRAMEWORK_ROUTE;\n         private RouteBuildItem.RouteType routerType = RouteBuildItem.RouteType.FRAMEWORK_ROUTE;\n+        private String name;\n         private String path;\n \n         Builder(NonApplicationRootPathBuildItem buildItem) {\n@@ -330,7 +331,13 @@ public Builder orderedRoute(String route, Integer order, Consumer<Route> routeFu\n                 this.path = route;\n                 this.routerType = RouteBuildItem.RouteType.ABSOLUTE_ROUTE;\n             }\n-            super.orderedRoute(this.path, order, routeFunction);\n+\n+            // we normalize the route name to remove trailing *, this is to be consistent with the path\n+            // see RouteImpl#setPath()\n+            String routeName = route.charAt(route.length() - 1) == '*' ? route.substring(0, route.length() - 1) : route;\n+\n+            // we pass a route name for proper identification in the metrics\n+            super.orderedRoute(routeName, this.path, order, routeFunction);\n             return this;\n         }\n \n\ndiff --git a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/RouteBuildItem.java b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/RouteBuildItem.java\nindex 7156e0db32b43..c4cf342638e4a 100644\n--- a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/RouteBuildItem.java\n+++ b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/RouteBuildItem.java\n@@ -176,6 +176,20 @@ public Builder orderedRoute(String route, Integer order, Consumer<Route> routeCu\n             return this;\n         }\n \n+        /**\n+         * @param name The name of the route. It is used to identify the route in the metrics.\n+         * @param route A normalized path used to define a basic route\n+         *        (e.g. use HttpRootPathBuildItem to construct/resolve the path value). This path this is also\n+         *        used on the \""Not Found\"" page in dev mode.\n+         * @param order Priority ordering of the route\n+         * @param routeCustomizer Route customizer.\n+         */\n+        public Builder orderedRoute(String name, String route, Integer order, Consumer<Route> routeCustomizer) {\n+            this.routeFunction = new BasicRoute(name, route, order, routeCustomizer);\n+            this.notFoundPagePath = this.routePath = route;\n+            return this;\n+        }\n+\n         public Builder handler(Handler<RoutingContext> handler) {\n             this.handler = handler;\n             return this;\n\ndiff --git a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/VertxHttpProcessor.java b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/VertxHttpProcessor.java\nindex 0b6349b91db9a..fc70a7c4eafd3 100644\n--- a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/VertxHttpProcessor.java\n+++ b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/VertxHttpProcessor.java\n@@ -8,8 +8,10 @@\n import java.io.UncheckedIOException;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.concurrent.SubmissionPublisher;\n import java.util.logging.Level;\n import java.util.stream.Collectors;\n@@ -131,7 +133,7 @@ NonApplicationRootPathBuildItem frameworkRoot(HttpBuildTimeConfig httpBuildTimeC\n     FrameworkEndpointsBuildItem frameworkEndpoints(NonApplicationRootPathBuildItem nonApplicationRootPath,\n             ManagementInterfaceBuildTimeConfig managementInterfaceBuildTimeConfig, LaunchModeBuildItem launchModeBuildItem,\n             List<RouteBuildItem> routes) {\n-        List<String> frameworkEndpoints = new ArrayList<>();\n+        Set<String> frameworkEndpoints = new HashSet<>();\n         for (RouteBuildItem route : routes) {\n             if (FRAMEWORK_ROUTE.equals(route.getRouteType())) {\n                 if (route.getConfiguredPathInfo() != null) {\n\ndiff --git a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/devmode/ConfiguredPathInfo.java b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/devmode/ConfiguredPathInfo.java\nindex a2cceab2f5cee..bb93a19b566b2 100644\n--- a/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/devmode/ConfiguredPathInfo.java\n+++ b/extensions/vertx-http/deployment/src/main/java/io/quarkus/vertx/http/deployment/devmode/ConfiguredPathInfo.java\n@@ -33,12 +33,12 @@ public String getEndpointPath(HttpRootPathBuildItem httpRoot) {\n \n     public String getEndpointPath(NonApplicationRootPathBuildItem nonAppRoot, ManagementInterfaceBuildTimeConfig mibt,\n             LaunchModeBuildItem mode) {\n+        if (absolutePath) {\n+            return endpointPath;\n+        }\n         if (management && mibt.enabled) {\n             var prefix = NonApplicationRootPathBuildItem.getManagementUrlPrefix(mode);\n             return prefix + endpointPath;\n-        }\n-        if (absolutePath) {\n-            return endpointPath;\n         } else {\n             return TemplateHtmlBuilder.adjustRoot(nonAppRoot.getNormalizedHttpRootPath(), endpointPath);\n         }\n\ndiff --git a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/BasicRoute.java b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/BasicRoute.java\nindex 064145e894d45..bd5ec80d091a8 100644\n--- a/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/BasicRoute.java\n+++ b/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/BasicRoute.java\n@@ -8,6 +8,8 @@\n \n public class BasicRoute implements Function<Router, Route> {\n \n+    private String name;\n+\n     private String path;\n \n     private Integer order;\n@@ -15,15 +17,29 @@ public class BasicRoute implements Function<Router, Route> {\n     private Consumer<Route> customizer;\n \n     public BasicRoute(String path) {\n-        this(path, null);\n+        this(null, path);\n     }\n \n     public BasicRoute(String path, Integer order) {\n+        this(null, path, order);\n+    }\n+\n+    public BasicRoute(String path, Integer order, Consumer<Route> customizer) {\n+        this(null, path, order, customizer);\n+    }\n+\n+    public BasicRoute(String name, String path) {\n+        this(name, path, null);\n+    }\n+\n+    public BasicRoute(String name, String path, Integer order) {\n+        this.name = name;\n         this.path = path;\n         this.order = order;\n     }\n \n-    public BasicRoute(String path, Integer order, Consumer<Route> customizer) {\n+    public BasicRoute(String name, String path, Integer order, Consumer<Route> customizer) {\n+        this.name = name;\n         this.path = path;\n         this.order = order;\n         this.customizer = customizer;\n@@ -32,6 +48,14 @@ public BasicRoute(String path, Integer order, Consumer<Route> customizer) {\n     public BasicRoute() {\n     }\n \n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n     public String getPath() {\n         return path;\n     }\n@@ -60,6 +84,9 @@ public BasicRoute setCustomizer(Consumer<Route> customizer) {\n     @Override\n     public Route apply(Router router) {\n         Route route = router.route(path);\n+        if (name != null) {\n+            route.setName(name);\n+        }\n         if (order != null) {\n             route.order(order);\n         }\n"", ""test_patch"": ""diff --git a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriManagementInterfaceTest.java b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriManagementInterfaceTest.java\nnew file mode 100644\nindex 0000000000000..f4d2edfeeeded\n--- /dev/null\n+++ b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriManagementInterfaceTest.java\n@@ -0,0 +1,101 @@\n+package io.quarkus.opentelemetry.deployment;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import jakarta.inject.Inject;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.quarkus.opentelemetry.deployment.common.exporter.TestSpanExporter;\n+import io.quarkus.opentelemetry.deployment.common.exporter.TestSpanExporterProvider;\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.restassured.RestAssured;\n+\n+public class OpenTelemetrySuppressNonAppUriManagementInterfaceTest {\n+\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClasses(HelloResource.class, TestSpanExporter.class, TestSpanExporterProvider.class)\n+                    .addAsResource(new StringAsset(TestSpanExporterProvider.class.getCanonicalName()),\n+                            \""META-INF/services/io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSpanExporterProvider\"")\n+                    .add(new StringAsset(\n+                            \""\""\""\n+                                    quarkus.otel.traces.exporter=test-span-exporter\n+                                    quarkus.otel.metrics.exporter=none\n+                                    quarkus.otel.bsp.export.timeout=1s\n+                                    quarkus.otel.bsp.schedule.delay=50\n+                                    quarkus.management.enabled=true\n+                                    quarkus.management.port=9001\n+                                    \""\""\""),\n+                            \""application.properties\""));\n+\n+    @Test\n+    void test() {\n+\n+        // Must not be traced\n+        RestAssured.given()\n+                .get(\""http://localhost:9001/q/health/\"")\n+                .then()\n+                .statusCode(200);\n+        RestAssured.given()\n+                .get(\""/q/dev-ui/\"")\n+                .then()\n+                .statusCode(200);\n+        RestAssured.given()\n+                .get(\""/q/dev-ui/icon/font-awesome.js\"")\n+                .then()\n+                .statusCode(200);\n+        // Valid trace\n+        RestAssured.given()\n+                .get(\""/hello\"")\n+                .then()\n+                .statusCode(200);\n+        // Get span names\n+        List<String> spans = Arrays.asList(\n+                RestAssured.given()\n+                        .get(\""/hello/spans\"")\n+                        .then()\n+                        .statusCode(200)\n+                        .extract().body()\n+                        .asString()\n+                        .split(\"";\""));\n+\n+        assertThat(spans).containsExactly(\""GET /hello\"");\n+    }\n+\n+    @Path(\""/hello\"")\n+    public static class HelloResource {\n+\n+        @Inject\n+        TestSpanExporter spanExporter;\n+\n+        @GET\n+        public String greetings() {\n+            return \""Hello test\"";\n+        }\n+\n+        /**\n+         * Gets a string with the received spans names concatenated by ;\n+         *\n+         * @return\n+         */\n+        @GET\n+        @Path(\""/spans\"")\n+        public String greetingsInsertAtLeast() {\n+            String spanNames = spanExporter.getFinishedSpanItemsAtLeast(1).stream()\n+                    .map(SpanData::getName)\n+                    .reduce((s1, s2) -> s1 + \"";\"" + s2).orElse(\""\"");\n+            System.out.println(spanNames);\n+            return spanNames;\n+        }\n+    }\n+}\n\ndiff --git a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriTest.java b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriTest.java\nnew file mode 100644\nindex 0000000000000..8c685a11b9568\n--- /dev/null\n+++ b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/OpenTelemetrySuppressNonAppUriTest.java\n@@ -0,0 +1,99 @@\n+package io.quarkus.opentelemetry.deployment;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import jakarta.inject.Inject;\n+import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.Path;\n+\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.quarkus.opentelemetry.deployment.common.exporter.TestSpanExporter;\n+import io.quarkus.opentelemetry.deployment.common.exporter.TestSpanExporterProvider;\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.restassured.RestAssured;\n+\n+public class OpenTelemetrySuppressNonAppUriTest {\n+\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .withApplicationRoot((jar) -> jar\n+                    .addClasses(HelloResource.class, TestSpanExporter.class, TestSpanExporterProvider.class)\n+                    .addAsResource(new StringAsset(TestSpanExporterProvider.class.getCanonicalName()),\n+                            \""META-INF/services/io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSpanExporterProvider\"")\n+                    .add(new StringAsset(\n+                            \""\""\""\n+                                    quarkus.otel.traces.exporter=test-span-exporter\n+                                    quarkus.otel.metrics.exporter=none\n+                                    quarkus.otel.bsp.export.timeout=1s\n+                                    quarkus.otel.bsp.schedule.delay=50\n+                                    \""\""\""),\n+                            \""application.properties\""));\n+\n+    @Test\n+    void test() {\n+\n+        // Must not be traced\n+        RestAssured.given()\n+                .get(\""/q/health/\"")\n+                .then()\n+                .statusCode(200);\n+        RestAssured.given()\n+                .get(\""/q/dev-ui/\"")\n+                .then()\n+                .statusCode(200);\n+        RestAssured.given()\n+                .get(\""/q/dev-ui/icon/font-awesome.js\"")\n+                .then()\n+                .statusCode(200);\n+        // Valid trace\n+        RestAssured.given()\n+                .get(\""/hello\"")\n+                .then()\n+                .statusCode(200);\n+        // Get span names\n+        List<String> spans = Arrays.asList(\n+                RestAssured.given()\n+                        .get(\""/hello/spans\"")\n+                        .then()\n+                        .statusCode(200)\n+                        .extract().body()\n+                        .asString()\n+                        .split(\"";\""));\n+\n+        assertThat(spans).containsExactly(\""GET /hello\"");\n+    }\n+\n+    @Path(\""/hello\"")\n+    public static class HelloResource {\n+\n+        @Inject\n+        TestSpanExporter spanExporter;\n+\n+        @GET\n+        public String greetings() {\n+            return \""Hello test\"";\n+        }\n+\n+        /**\n+         * Gets a string with the received spans names concatenated by ;\n+         *\n+         * @return\n+         */\n+        @GET\n+        @Path(\""/spans\"")\n+        public String greetingsInsertAtLeast() {\n+            String spanNames = spanExporter.getFinishedSpanItemsAtLeast(1).stream()\n+                    .map(SpanData::getName)\n+                    .reduce((s1, s2) -> s1 + \"";\"" + s2).orElse(\""\"");\n+            System.out.println(spanNames);\n+            return spanNames;\n+        }\n+    }\n+}\n\ndiff --git a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/common/exporter/TestSpanExporter.java b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/common/exporter/TestSpanExporter.java\nindex 573816c3ed9d0..7c0fbf5a3fbb5 100644\n--- a/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/common/exporter/TestSpanExporter.java\n+++ b/extensions/opentelemetry/deployment/src/test/java/io/quarkus/opentelemetry/deployment/common/exporter/TestSpanExporter.java\n@@ -4,6 +4,7 @@\n import static java.util.stream.Collectors.toList;\n import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.Collection;\n import java.util.List;\n@@ -50,11 +51,27 @@ public List<SpanData> getFinishedSpanItems(int spanCount) {\n         return finishedSpanItems.stream().collect(toList());\n     }\n \n+    /**\n+     * Careful when retrieving the list of finished spans. There is a chance when the response is already sent to the\n+     * client and Vert.x still writing the end of the spans. This means that a response is available to assert from the\n+     * test side but not all spans may be available yet. For this reason, this method requires the number of expected\n+     * spans.\n+     */\n+    public List<SpanData> getFinishedSpanItemsAtLeast(int spanCount) {\n+        assertSpanAtLeast(spanCount);\n+        return finishedSpanItems;\n+    }\n+\n     public void assertSpanCount(int spanCount) {\n-        await().atMost(30, SECONDS).untilAsserted(\n+        await().atMost(5, SECONDS).untilAsserted(\n                 () -> assertEquals(spanCount, finishedSpanItems.size(), \""Spans: \"" + finishedSpanItems.toString()));\n     }\n \n+    public void assertSpanAtLeast(int spanCount) {\n+        await().atMost(5, SECONDS).untilAsserted(\n+                () -> assertTrue(spanCount <= finishedSpanItems.size(), \""Spans: \"" + finishedSpanItems.toString()));\n+    }\n+\n     public void reset() {\n         finishedSpanItems.clear();\n     }\n\ndiff --git a/extensions/opentelemetry/runtime/src/test/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSamplerTest.java b/extensions/opentelemetry/runtime/src/test/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSamplerTest.java\nindex c2aae5f318f7a..db3896ed7ce2b 100644\n--- a/extensions/opentelemetry/runtime/src/test/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSamplerTest.java\n+++ b/extensions/opentelemetry/runtime/src/test/java/io/quarkus/opentelemetry/runtime/tracing/DropTargetsSamplerTest.java\n@@ -1,10 +1,10 @@\n package io.quarkus.opentelemetry.runtime.tracing;\n \n import static io.opentelemetry.semconv.UrlAttributes.URL_PATH;\n-import static io.quarkus.opentelemetry.runtime.OpenTelemetryUtil.*;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n import java.util.List;\n+import java.util.Set;\n import java.util.concurrent.atomic.AtomicLong;\n \n import org.junit.jupiter.api.Test;\n@@ -21,7 +21,7 @@ class DropTargetsSamplerTest {\n     @Test\n     void testDropTargets() {\n         CountingSampler countingSampler = new CountingSampler();\n-        var sut = new DropTargetsSampler(countingSampler, List.of(\""/q/swagger-ui\"", \""/q/swagger-ui*\""));\n+        var sut = new DropTargetsSampler(countingSampler, Set.of(\""/q/swagger-ui\"", \""/q/swagger-ui*\""));\n \n         assertEquals(SamplingResult.recordAndSample(), getShouldSample(sut, \""/other\""));\n         assertEquals(1, countingSampler.count.get());\n@@ -39,6 +39,33 @@ void testDropTargets() {\n         assertEquals(2, countingSampler.count.get());\n     }\n \n+    @Test\n+    void testDropTargetsWildcards() {\n+        CountingSampler countingSampler = new CountingSampler();\n+        var sut = new DropTargetsSampler(countingSampler, Set.of(\""/q/dev-ui\"", \""/q/dev-ui/*\""));\n+\n+        assertEquals(SamplingResult.recordAndSample(), getShouldSample(sut, \""/other\""));\n+        assertEquals(1, countingSampler.count.get());\n+\n+        assertEquals(SamplingResult.recordAndSample(), getShouldSample(sut, \""/q/dev-ui-test\""));\n+        assertEquals(2, countingSampler.count.get());\n+\n+        assertEquals(SamplingResult.drop(), getShouldSample(sut, \""/q/dev-ui\""));\n+        assertEquals(2, countingSampler.count.get());\n+\n+        assertEquals(SamplingResult.drop(), getShouldSample(sut, \""/q/dev-ui/\""));\n+        assertEquals(2, countingSampler.count.get());\n+\n+        assertEquals(SamplingResult.drop(), getShouldSample(sut, \""/q/dev-ui/whatever\""));\n+        assertEquals(2, countingSampler.count.get());\n+\n+        assertEquals(SamplingResult.drop(), getShouldSample(sut, \""/q/dev-ui/whatever/wherever/whenever\""));\n+        assertEquals(2, countingSampler.count.get());\n+\n+        assertEquals(SamplingResult.recordAndSample(), getShouldSample(sut, \""/q/test\""));\n+        assertEquals(3, countingSampler.count.get());\n+    }\n+\n     private static SamplingResult getShouldSample(DropTargetsSampler sut, String target) {\n         return sut.shouldSample(null, null, null, SpanKind.SERVER,\n                 Attributes.of(URL_PATH, target), null);\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
