metadata
"{""instance_id"": ""apache__logging-log4j2-3756"", ""pr_id"": 3756, ""issue_id"": 3750, ""repo"": ""apache/logging-log4j2"", ""problem_statement"": ""Deprecate withers in `2.x`\nIn the `main` branch, all withers (builder method following the `with<Foo>` pattern) have been replaced with setter methods for consistency and clarity.\n\nTo ensure a smooth upgrade path and better API consistency between `2.x` and `3.x`, we should introduce equivalent setter methods in the `2.x` branch and mark the existing wither methods as deprecated. This will give users time to adapt before migrating to `3.x`, where wither methods will no longer be available.\n\n**Proposed Action:**\n\n* Add `set<foo>` methods alongside existing `with<foo>` methods in `2.x`.\n* Mark all remaining `with<foo>` methods as deprecated in `2.x`.\n\n"", ""issue_word_count"": 108, ""test_files_count"": 35, ""non_test_files_count"": 40, ""pr_changed_files"": [""log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/DailyRollingFileAppenderBuilder.java"", ""log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/EnhancedRollingFileAppenderBuilder.java"", ""log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/FileAppenderBuilder.java"", ""log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/RollingFileAppenderBuilder.java"", ""log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/HtmlLayoutBuilder.java"", ""log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/PatternLayoutBuilder.java"", ""log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/SimpleLayoutBuilder.java"", ""log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/TTCCLayoutBuilder.java"", ""log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java"", ""log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java"", ""log4j-1.2-api/src/test/java/org/apache/log4j/layout/Log4j1SyslogLayoutTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderBuilderTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderPermissionsTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/InMemoryAppenderTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ReconfigureAppenderTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderDirectWriteWithHtmlLayoutTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderAccessTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderLayoutTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManagerTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryConfigTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/JiraLog4j2_2134Test.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/LoggerConfigTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/AbstractPluginWithGenericBuilder.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/PluginWithGenericSubclassFoo1Builder.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPlugin.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPluginWithGenericBuilder.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPluginWithTypedBuilder.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/HtmlLayoutTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutDefaultExceptionHandlerTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternSelectorTest.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractAppender.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractFileAppender.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AppenderSet.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/ColumnMapping.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/package-info.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DirectWriteRolloverStrategy.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/PosixViewAttributeAction.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/package-info.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/package-info.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/package-info.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryConfig.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/async/package-info.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/config/package-info.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/layout/package-info.java"", ""log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/PatternResolver.java"", ""log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/ThreadContextBenchmark2.java"", ""log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/instant/InstantPatternFormatterImpactBenchmark.java"", ""log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/nogc/ClassicLogger.java"", ""src/changelog/.2.x.x/3750_deprecate_withers.xml""], ""pr_changed_test_files"": [""log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java"", ""log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java"", ""log4j-1.2-api/src/test/java/org/apache/log4j/layout/Log4j1SyslogLayoutTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderBuilderTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderPermissionsTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/InMemoryAppenderTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ReconfigureAppenderTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderDirectWriteWithHtmlLayoutTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderAccessTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderLayoutTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManagerTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryConfigTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/JiraLog4j2_2134Test.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/LoggerConfigTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/AbstractPluginWithGenericBuilder.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/PluginWithGenericSubclassFoo1Builder.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPlugin.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPluginWithGenericBuilder.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPluginWithTypedBuilder.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/HtmlLayoutTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutDefaultExceptionHandlerTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternSelectorTest.java"", ""log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/ThreadContextBenchmark2.java"", ""log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/instant/InstantPatternFormatterImpactBenchmark.java"", ""log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/nogc/ClassicLogger.java""], ""base_commit"": ""422c385dc9450d4f620a23d84abe2d6a0aa5b9fb"", ""head_commit"": ""9f881abb8c969bbf05eaa2139578e8f33628348e"", ""repo_url"": ""https://github.com/apache/logging-log4j2/pull/3756"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__logging-log4j2/3756"", ""dockerfile"": """", ""pr_merged_at"": ""2025-06-26T17:46:40.000Z"", ""patch"": ""diff --git a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/DailyRollingFileAppenderBuilder.java b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/DailyRollingFileAppenderBuilder.java\nindex 3e2a58e5a04..4920aaa80ae 100644\n--- a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/DailyRollingFileAppenderBuilder.java\n+++ b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/DailyRollingFileAppenderBuilder.java\n@@ -180,25 +180,25 @@ private <T extends Log4j1Configuration> Appender createAppender(\n         }\n         final String filePattern = fileName + \""%d{\"" + datePattern + \""}\"";\n         final TriggeringPolicy timePolicy =\n-                TimeBasedTriggeringPolicy.newBuilder().withModulate(true).build();\n+                TimeBasedTriggeringPolicy.newBuilder().setModulate(true).build();\n         final TriggeringPolicy policy = CompositeTriggeringPolicy.createPolicy(timePolicy);\n         final RolloverStrategy strategy = DefaultRolloverStrategy.newBuilder()\n-                .withConfig(configuration)\n-                .withMax(Integer.toString(Integer.MAX_VALUE))\n+                .setConfig(configuration)\n+                .setMax(Integer.toString(Integer.MAX_VALUE))\n                 .build();\n         return AppenderWrapper.adapt(RollingFileAppender.newBuilder()\n                 .setName(name)\n                 .setConfiguration(configuration)\n                 .setLayout(fileLayout)\n                 .setFilter(fileFilter)\n-                .withFileName(fileName)\n-                .withAppend(append)\n+                .setFileName(fileName)\n+                .setAppend(append)\n                 .setBufferedIo(bufferedIo)\n                 .setBufferSize(bufferSize)\n                 .setImmediateFlush(immediateFlush)\n-                .withFilePattern(filePattern)\n-                .withPolicy(policy)\n-                .withStrategy(strategy)\n+                .setFilePattern(filePattern)\n+                .setPolicy(policy)\n+                .setStrategy(strategy)\n                 .build());\n     }\n }\n\ndiff --git a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/EnhancedRollingFileAppenderBuilder.java b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/EnhancedRollingFileAppenderBuilder.java\nindex d4eb24500ac..26377e7d1be 100644\n--- a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/EnhancedRollingFileAppenderBuilder.java\n+++ b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/EnhancedRollingFileAppenderBuilder.java\n@@ -259,7 +259,7 @@ private Appender createAppender(\n         final DefaultRolloverStrategy.Builder rolloverStrategyBuilder = DefaultRolloverStrategy.newBuilder();\n         switch (rollingPolicyClassName) {\n             case FIXED_WINDOW_ROLLING_POLICY:\n-                rolloverStrategyBuilder.withMin(Integer.toString(minIndex)).withMax(Integer.toString(maxIndex));\n+                rolloverStrategyBuilder.setMin(Integer.toString(minIndex)).setMax(Integer.toString(maxIndex));\n                 break;\n             case TIME_BASED_ROLLING_POLICY:\n                 break;\n@@ -276,18 +276,18 @@ private Appender createAppender(\n             return null;\n         }\n         return AppenderWrapper.adapt(RollingFileAppender.newBuilder()\n-                .withAppend(append)\n+                .setAppend(append)\n                 .setBufferedIo(bufferedIo)\n                 .setBufferSize(bufferedIo ? bufferSize : 0)\n                 .setConfiguration(configuration)\n-                .withFileName(actualFileName)\n-                .withFilePattern(fileNamePattern)\n+                .setFileName(actualFileName)\n+                .setFilePattern(fileNamePattern)\n                 .setFilter(fileFilter)\n                 .setImmediateFlush(actualImmediateFlush)\n                 .setLayout(fileLayout)\n                 .setName(name)\n-                .withPolicy(actualTriggeringPolicy)\n-                .withStrategy(rolloverStrategyBuilder.build())\n+                .setPolicy(actualTriggeringPolicy)\n+                .setStrategy(rolloverStrategyBuilder.build())\n                 .build());\n     }\n }\n\ndiff --git a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/FileAppenderBuilder.java b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/FileAppenderBuilder.java\nindex afab23d1f70..9d1f29a962e 100644\n--- a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/FileAppenderBuilder.java\n+++ b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/FileAppenderBuilder.java\n@@ -158,9 +158,9 @@ private Appender createAppender(\n                 .setConfiguration(configuration)\n                 .setLayout(fileLayout)\n                 .setFilter(fileFilter)\n-                .withFileName(fileName)\n+                .setFileName(fileName)\n                 .setImmediateFlush(immediateFlush)\n-                .withAppend(append)\n+                .setAppend(append)\n                 .setBufferedIo(bufferedIo)\n                 .setBufferSize(bufferSize)\n                 .build());\n\ndiff --git a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/RollingFileAppenderBuilder.java b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/RollingFileAppenderBuilder.java\nindex 6692a58f0c1..72243829667 100644\n--- a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/RollingFileAppenderBuilder.java\n+++ b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/RollingFileAppenderBuilder.java\n@@ -188,23 +188,23 @@ private Appender createAppender(\n         final SizeBasedTriggeringPolicy sizePolicy = SizeBasedTriggeringPolicy.createPolicy(maxSize);\n         final CompositeTriggeringPolicy policy = CompositeTriggeringPolicy.createPolicy(sizePolicy);\n         final RolloverStrategy strategy = DefaultRolloverStrategy.newBuilder()\n-                .withConfig(config)\n-                .withMax(maxBackups)\n-                .withFileIndex(\""min\"")\n+                .setConfig(config)\n+                .setMax(maxBackups)\n+                .setFileIndex(\""min\"")\n                 .build();\n         return AppenderWrapper.adapt(RollingFileAppender.newBuilder()\n                 .setName(name)\n                 .setConfiguration(config)\n                 .setLayout(fileLayout)\n                 .setFilter(fileFilter)\n-                .withAppend(append)\n+                .setAppend(append)\n                 .setBufferedIo(bufferedIo)\n                 .setBufferSize(bufferSize)\n                 .setImmediateFlush(immediateFlush)\n-                .withFileName(fileName)\n-                .withFilePattern(filePattern)\n-                .withPolicy(policy)\n-                .withStrategy(strategy)\n+                .setFileName(fileName)\n+                .setFilePattern(filePattern)\n+                .setPolicy(policy)\n+                .setStrategy(strategy)\n                 .build());\n     }\n }\n\ndiff --git a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/HtmlLayoutBuilder.java b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/HtmlLayoutBuilder.java\nindex fda5d980c7e..5ece07d6300 100644\n--- a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/HtmlLayoutBuilder.java\n+++ b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/HtmlLayoutBuilder.java\n@@ -73,8 +73,8 @@ public Layout parse(final PropertiesConfiguration config) {\n \n     private Layout createLayout(final String title, final boolean locationInfo) {\n         return LayoutWrapper.adapt(HtmlLayout.newBuilder()\n-                .withTitle(title)\n-                .withLocationInfo(locationInfo)\n+                .setTitle(title)\n+                .setLocationInfo(locationInfo)\n                 .build());\n     }\n }\n\ndiff --git a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/PatternLayoutBuilder.java b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/PatternLayoutBuilder.java\nindex 2e1aab0eba2..9eaffb4bc0d 100644\n--- a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/PatternLayoutBuilder.java\n+++ b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/PatternLayoutBuilder.java\n@@ -83,7 +83,7 @@ Layout createLayout(String pattern, final Log4j1Configuration config) {\n             pattern = PatternLayout.DEFAULT_CONVERSION_PATTERN;\n         }\n         return LayoutWrapper.adapt(PatternLayout.newBuilder()\n-                .withPattern(pattern\n+                .setPattern(pattern\n                         // Log4j 2 and Log4j 1 level names differ for custom levels\n                         .replaceAll(\""%([-\\\\.\\\\d]*)p(?!\\\\w)\"", \""%$1v1Level\"")\n                         // Log4j 2's %x (NDC) is not compatible with Log4j 1's\n@@ -99,7 +99,7 @@ Layout createLayout(String pattern, final Log4j1Configuration config) {\n                         // Log4j 2: \""{foo=bar,hoo=boo}\""\n                         // Use %properties to get the Log4j 1 format\n                         .replaceAll(\""%([-\\\\.\\\\d]*)X(?!\\\\w)\"", \""%$1properties\""))\n-                .withConfiguration(config)\n+                .setConfiguration(config)\n                 .build());\n     }\n }\n\ndiff --git a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/SimpleLayoutBuilder.java b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/SimpleLayoutBuilder.java\nindex 8c035c3504a..7b16e54d871 100644\n--- a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/SimpleLayoutBuilder.java\n+++ b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/SimpleLayoutBuilder.java\n@@ -35,16 +35,16 @@ public class SimpleLayoutBuilder implements LayoutBuilder {\n     @Override\n     public Layout parse(final Element layoutElement, final XmlConfiguration config) {\n         return new LayoutWrapper(PatternLayout.newBuilder()\n-                .withPattern(\""%v1Level - %m%n\"")\n-                .withConfiguration(config)\n+                .setPattern(\""%v1Level - %m%n\"")\n+                .setConfiguration(config)\n                 .build());\n     }\n \n     @Override\n     public Layout parse(final PropertiesConfiguration config) {\n         return new LayoutWrapper(PatternLayout.newBuilder()\n-                .withPattern(\""%v1Level - %m%n\"")\n-                .withConfiguration(config)\n+                .setPattern(\""%v1Level - %m%n\"")\n+                .setConfiguration(config)\n                 .build());\n     }\n }\n\ndiff --git a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/TTCCLayoutBuilder.java b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/TTCCLayoutBuilder.java\nindex 8f5c5b18994..ae07ff39489 100644\n--- a/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/TTCCLayoutBuilder.java\n+++ b/log4j-1.2-api/src/main/java/org/apache/log4j/builders/layout/TTCCLayoutBuilder.java\n@@ -130,8 +130,8 @@ private Layout createLayout(\n         }\n         sb.append(\""- %m%n\"");\n         return LayoutWrapper.adapt(PatternLayout.newBuilder()\n-                .withPattern(sb.toString())\n-                .withConfiguration(config)\n+                .setPattern(sb.toString())\n+                .setConfiguration(config)\n                 .build());\n     }\n }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractAppender.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractAppender.java\nindex beaf5134a0e..27530b26243 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractAppender.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractAppender.java\n@@ -83,8 +83,8 @@ public Layout<? extends Serializable> getOrCreateLayout() {\n         public Layout<? extends Serializable> getOrCreateLayout(final Charset charset) {\n             if (layout == null) {\n                 return PatternLayout.newBuilder()\n-                        .withCharset(charset)\n-                        .withConfiguration(configuration)\n+                        .setCharset(charset)\n+                        .setConfiguration(configuration)\n                         .build();\n             }\n             return layout;\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractFileAppender.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractFileAppender.java\nindex fc959bc9673..a059f6bf386 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractFileAppender.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractFileAppender.java\n@@ -104,46 +104,154 @@ public String getFileGroup() {\n             return fileGroup;\n         }\n \n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setAdvertise(final boolean advertise) {\n+            this.advertise = advertise;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setAdvertiseUri(final String advertiseUri) {\n+            this.advertiseUri = advertiseUri;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setAppend(final boolean append) {\n+            this.append = append;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFileName(final String fileName) {\n+            this.fileName = fileName;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setCreateOnDemand(final boolean createOnDemand) {\n+            this.createOnDemand = createOnDemand;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setLocking(final boolean locking) {\n+            this.locking = locking;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFilePermissions(final String filePermissions) {\n+            this.filePermissions = filePermissions;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFileOwner(final String fileOwner) {\n+            this.fileOwner = fileOwner;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFileGroup(final String fileGroup) {\n+            this.fileGroup = fileGroup;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAdvertise(boolean)}.\n+         */\n+        @Deprecated\n         public B withAdvertise(final boolean advertise) {\n             this.advertise = advertise;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAdvertiseUri(String)}.\n+         */\n+        @Deprecated\n         public B withAdvertiseUri(final String advertiseUri) {\n             this.advertiseUri = advertiseUri;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAppend(boolean)}.\n+         */\n+        @Deprecated\n         public B withAppend(final boolean append) {\n             this.append = append;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileName(String)}.\n+         */\n+        @Deprecated\n         public B withFileName(final String fileName) {\n             this.fileName = fileName;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setCreateOnDemand(boolean)}.\n+         */\n+        @Deprecated\n         public B withCreateOnDemand(final boolean createOnDemand) {\n             this.createOnDemand = createOnDemand;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setLocking(boolean)}.\n+         */\n+        @Deprecated\n         public B withLocking(final boolean locking) {\n             this.locking = locking;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFilePermissions(String)}.\n+         */\n+        @Deprecated\n         public B withFilePermissions(final String filePermissions) {\n             this.filePermissions = filePermissions;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileOwner(String)}.\n+         */\n+        @Deprecated\n         public B withFileOwner(final String fileOwner) {\n             this.fileOwner = fileOwner;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileGroup(String)}.\n+         */\n+        @Deprecated\n         public B withFileGroup(final String fileGroup) {\n             this.fileGroup = fileGroup;\n             return asBuilder();\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AppenderSet.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AppenderSet.java\nindex 9a4a3aae0d3..9595e00b5a8 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AppenderSet.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AppenderSet.java\n@@ -81,12 +81,36 @@ public Configuration getConfiguration() {\n             return configuration;\n         }\n \n-        public Builder withNode(@SuppressWarnings(\""hiding\"") final Node node) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setNode(final Node node) {\n             this.node = node;\n             return this;\n         }\n \n-        public Builder withConfiguration(@SuppressWarnings(\""hiding\"") final Configuration configuration) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setConfiguration(final Configuration configuration) {\n+            this.configuration = configuration;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setNode(Node)}.\n+         */\n+        @Deprecated\n+        public Builder withNode(final Node node) {\n+            this.node = node;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setConfiguration(Configuration)}.\n+         */\n+        @Deprecated\n+        public Builder withConfiguration(final Configuration configuration) {\n             this.configuration = configuration;\n             return this;\n         }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java\nindex b284a669d08..a9ab3508760 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java\n@@ -164,46 +164,154 @@ public String getFileGroup() {\n             return fileGroup;\n         }\n \n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setAdvertise(final boolean advertise) {\n+            this.advertise = advertise;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setAdvertiseUri(final String advertiseUri) {\n+            this.advertiseUri = advertiseUri;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setAppend(final boolean append) {\n+            this.append = append;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFileName(final String fileName) {\n+            this.fileName = fileName;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setCreateOnDemand(final boolean createOnDemand) {\n+            this.createOnDemand = createOnDemand;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setLocking(final boolean locking) {\n+            this.locking = locking;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFilePermissions(final String filePermissions) {\n+            this.filePermissions = filePermissions;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFileOwner(final String fileOwner) {\n+            this.fileOwner = fileOwner;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFileGroup(final String fileGroup) {\n+            this.fileGroup = fileGroup;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAdvertise(boolean)}.\n+         */\n+        @Deprecated\n         public B withAdvertise(final boolean advertise) {\n             this.advertise = advertise;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAdvertiseUri(String)}.\n+         */\n+        @Deprecated\n         public B withAdvertiseUri(final String advertiseUri) {\n             this.advertiseUri = advertiseUri;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAppend(boolean)}.\n+         */\n+        @Deprecated\n         public B withAppend(final boolean append) {\n             this.append = append;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileName(String)}.\n+         */\n+        @Deprecated\n         public B withFileName(final String fileName) {\n             this.fileName = fileName;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setCreateOnDemand(boolean)}.\n+         */\n+        @Deprecated\n         public B withCreateOnDemand(final boolean createOnDemand) {\n             this.createOnDemand = createOnDemand;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setLocking(boolean)}.\n+         */\n+        @Deprecated\n         public B withLocking(final boolean locking) {\n             this.locking = locking;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFilePermissions(String)}.\n+         */\n+        @Deprecated\n         public B withFilePermissions(final String filePermissions) {\n             this.filePermissions = filePermissions;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileOwner(String)}.\n+         */\n+        @Deprecated\n         public B withFileOwner(final String fileOwner) {\n             this.fileOwner = fileOwner;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileGroup(String)}.\n+         */\n+        @Deprecated\n         public B withFileGroup(final String fileGroup) {\n             this.fileGroup = fileGroup;\n             return asBuilder();\n@@ -251,18 +359,18 @@ public static <B extends Builder<B>> FileAppender createAppender(\n             final String advertiseUri,\n             final Configuration config) {\n         return FileAppender.<B>newBuilder()\n-                .withAdvertise(Boolean.parseBoolean(advertise))\n-                .withAdvertiseUri(advertiseUri)\n-                .withAppend(Booleans.parseBoolean(append, true))\n-                .withBufferedIo(Booleans.parseBoolean(bufferedIo, true))\n-                .withBufferSize(Integers.parseInt(bufferSizeStr, DEFAULT_BUFFER_SIZE))\n+                .setAdvertise(Boolean.parseBoolean(advertise))\n+                .setAdvertiseUri(advertiseUri)\n+                .setAppend(Booleans.parseBoolean(append, true))\n+                .setBufferedIo(Booleans.parseBoolean(bufferedIo, true))\n+                .setBufferSize(Integers.parseInt(bufferSizeStr, DEFAULT_BUFFER_SIZE))\n                 .setConfiguration(config)\n-                .withFileName(fileName)\n+                .setFileName(fileName)\n                 .setFilter(filter)\n                 .setIgnoreExceptions(Booleans.parseBoolean(ignoreExceptions, true))\n-                .withImmediateFlush(Booleans.parseBoolean(immediateFlush, true))\n+                .setImmediateFlush(Booleans.parseBoolean(immediateFlush, true))\n                 .setLayout(layout)\n-                .withLocking(Boolean.parseBoolean(locking))\n+                .setLocking(Boolean.parseBoolean(locking))\n                 .setName(name)\n                 .build();\n         // @formatter:on\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java\nindex 3721cdab6af..8774263619e 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java\n@@ -239,7 +239,7 @@ public static <B extends Builder<B>> MemoryMappedFileAppender createAppender(\n                 .setFileName(fileName)\n                 .setFilter(filter)\n                 .setIgnoreExceptions(ignoreExceptions)\n-                .withImmediateFlush(isImmediateFlush)\n+                .setImmediateFlush(isImmediateFlush)\n                 .setLayout(layout)\n                 .setName(name)\n                 .setRegionLength(regionLength)\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java\nindex ef2dd943192..ae7f8776f04 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java\n@@ -65,7 +65,7 @@ public static class Builder<B extends Builder<B>> extends AbstractOutputStreamAp\n         private String advertiseURI;\n \n         public Builder() {\n-            this.withBufferSize(RandomAccessFileManager.DEFAULT_BUFFER_SIZE);\n+            this.setBufferSize(RandomAccessFileManager.DEFAULT_BUFFER_SIZE);\n         }\n \n         @Override\n@@ -225,12 +225,12 @@ public static <B extends Builder<B>> RandomAccessFileAppender createAppender(\n                 .setAdvertise(isAdvertise)\n                 .setAdvertiseURI(advertiseURI)\n                 .setAppend(isAppend)\n-                .withBufferSize(bufferSize)\n+                .setBufferSize(bufferSize)\n                 .setConfiguration(configuration)\n                 .setFileName(fileName)\n                 .setFilter(filter)\n                 .setIgnoreExceptions(ignoreExceptions)\n-                .withImmediateFlush(isFlush)\n+                .setImmediateFlush(isFlush)\n                 .setLayout(layout)\n                 .setName(name)\n                 .build();\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java\nindex 4995a048914..a78be3e4c55 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java\n@@ -123,13 +123,13 @@ public RollingFileAppender build() {\n             if (strategy == null) {\n                 if (fileName != null) {\n                     strategy = DefaultRolloverStrategy.newBuilder()\n-                            .withCompressionLevelStr(String.valueOf(Deflater.DEFAULT_COMPRESSION))\n-                            .withConfig(getConfiguration())\n+                            .setCompressionLevelStr(String.valueOf(Deflater.DEFAULT_COMPRESSION))\n+                            .setConfig(getConfiguration())\n                             .build();\n                 } else {\n                     strategy = DirectWriteRolloverStrategy.newBuilder()\n-                            .withCompressionLevelStr(String.valueOf(Deflater.DEFAULT_COMPRESSION))\n-                            .withConfig(getConfiguration())\n+                            .setCompressionLevelStr(String.valueOf(Deflater.DEFAULT_COMPRESSION))\n+                            .setConfig(getConfiguration())\n                             .build();\n                 }\n             } else if (fileName == null && !(strategy instanceof DirectFileRolloverStrategy)) {\n@@ -212,31 +212,103 @@ public String getFileGroup() {\n             return fileGroup;\n         }\n \n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setAdvertise(final boolean advertise) {\n+            this.advertise = advertise;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setAdvertiseUri(final String advertiseUri) {\n+            this.advertiseUri = advertiseUri;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setAppend(final boolean append) {\n+            this.append = append;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFileName(final String fileName) {\n+            this.fileName = fileName;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setCreateOnDemand(final boolean createOnDemand) {\n+            this.createOnDemand = createOnDemand;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setLocking(final boolean locking) {\n+            this.locking = locking;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAdvertise(boolean)}.\n+         */\n+        @Deprecated\n         public B withAdvertise(final boolean advertise) {\n             this.advertise = advertise;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAdvertiseUri(String)}.\n+         */\n+        @Deprecated\n         public B withAdvertiseUri(final String advertiseUri) {\n             this.advertiseUri = advertiseUri;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAppend(boolean)}.\n+         */\n+        @Deprecated\n         public B withAppend(final boolean append) {\n             this.append = append;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileName(String)}.\n+         */\n+        @Deprecated\n         public B withFileName(final String fileName) {\n             this.fileName = fileName;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setCreateOnDemand(boolean)}.\n+         */\n+        @Deprecated\n         public B withCreateOnDemand(final boolean createOnDemand) {\n             this.createOnDemand = createOnDemand;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setLocking(boolean)}.\n+         */\n+        @Deprecated\n         public B withLocking(final boolean locking) {\n             this.locking = locking;\n             return asBuilder();\n@@ -254,31 +326,103 @@ public RolloverStrategy getStrategy() {\n             return strategy;\n         }\n \n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFilePattern(final String filePattern) {\n+            this.filePattern = filePattern;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setPolicy(final TriggeringPolicy policy) {\n+            this.policy = policy;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setStrategy(final RolloverStrategy strategy) {\n+            this.strategy = strategy;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFilePermissions(final String filePermissions) {\n+            this.filePermissions = filePermissions;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFileOwner(final String fileOwner) {\n+            this.fileOwner = fileOwner;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFileGroup(final String fileGroup) {\n+            this.fileGroup = fileGroup;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFilePattern(String)}.\n+         */\n+        @Deprecated\n         public B withFilePattern(final String filePattern) {\n             this.filePattern = filePattern;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setPolicy(TriggeringPolicy)}.\n+         */\n+        @Deprecated\n         public B withPolicy(final TriggeringPolicy policy) {\n             this.policy = policy;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setStrategy(RolloverStrategy)}.\n+         */\n+        @Deprecated\n         public B withStrategy(final RolloverStrategy strategy) {\n             this.strategy = strategy;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFilePermissions(String)}.\n+         */\n+        @Deprecated\n         public B withFilePermissions(final String filePermissions) {\n             this.filePermissions = filePermissions;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileOwner(String)}.\n+         */\n+        @Deprecated\n         public B withFileOwner(final String fileOwner) {\n             this.fileOwner = fileOwner;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileGroup(String)}.\n+         */\n+        @Deprecated\n         public B withFileGroup(final String fileGroup) {\n             this.fileGroup = fileGroup;\n             return asBuilder();\n@@ -406,23 +550,23 @@ public static <B extends Builder<B>> RollingFileAppender createAppender(\n         final int bufferSize = Integers.parseInt(bufferSizeStr, DEFAULT_BUFFER_SIZE);\n         // @formatter:off\n         return RollingFileAppender.<B>newBuilder()\n-                .withAdvertise(Boolean.parseBoolean(advertise))\n-                .withAdvertiseUri(advertiseUri)\n-                .withAppend(Booleans.parseBoolean(append, true))\n-                .withBufferedIo(Booleans.parseBoolean(bufferedIO, true))\n-                .withBufferSize(bufferSize)\n+                .setAdvertise(Boolean.parseBoolean(advertise))\n+                .setAdvertiseUri(advertiseUri)\n+                .setAppend(Booleans.parseBoolean(append, true))\n+                .setBufferedIo(Booleans.parseBoolean(bufferedIO, true))\n+                .setBufferSize(bufferSize)\n                 .setConfiguration(config)\n-                .withFileName(fileName)\n-                .withFilePattern(filePattern)\n+                .setFileName(fileName)\n+                .setFilePattern(filePattern)\n                 .setFilter(filter)\n                 .setIgnoreExceptions(Booleans.parseBoolean(ignore, true))\n-                .withImmediateFlush(Booleans.parseBoolean(immediateFlush, true))\n+                .setImmediateFlush(Booleans.parseBoolean(immediateFlush, true))\n                 .setLayout(layout)\n-                .withCreateOnDemand(false)\n-                .withLocking(false)\n+                .setCreateOnDemand(false)\n+                .setLocking(false)\n                 .setName(name)\n-                .withPolicy(policy)\n-                .withStrategy(strategy)\n+                .setPolicy(policy)\n+                .setStrategy(strategy)\n                 .build();\n         // @formatter:on\n     }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java\nindex 0668d47aee7..5e7361f68ff 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java\n@@ -58,9 +58,9 @@ public static class Builder<B extends Builder<B>> extends AbstractOutputStreamAp\n             implements org.apache.logging.log4j.core.util.Builder<RollingRandomAccessFileAppender> {\n \n         public Builder() {\n-            withBufferSize(RollingRandomAccessFileManager.DEFAULT_BUFFER_SIZE);\n+            setBufferSize(RollingRandomAccessFileManager.DEFAULT_BUFFER_SIZE);\n             setIgnoreExceptions(true);\n-            withImmediateFlush(true);\n+            setImmediateFlush(true);\n         }\n \n         @PluginBuilderAttribute(\""fileName\"")\n@@ -104,13 +104,13 @@ public RollingRandomAccessFileAppender build() {\n             if (strategy == null) {\n                 if (fileName != null) {\n                     strategy = DefaultRolloverStrategy.newBuilder()\n-                            .withCompressionLevelStr(String.valueOf(Deflater.DEFAULT_COMPRESSION))\n-                            .withConfig(getConfiguration())\n+                            .setCompressionLevelStr(String.valueOf(Deflater.DEFAULT_COMPRESSION))\n+                            .setConfig(getConfiguration())\n                             .build();\n                 } else {\n                     strategy = DirectWriteRolloverStrategy.newBuilder()\n-                            .withCompressionLevelStr(String.valueOf(Deflater.DEFAULT_COMPRESSION))\n-                            .withConfig(getConfiguration())\n+                            .setCompressionLevelStr(String.valueOf(Deflater.DEFAULT_COMPRESSION))\n+                            .setConfig(getConfiguration())\n                             .build();\n                 }\n             } else if (fileName == null && !(strategy instanceof DirectFileRolloverStrategy)) {\n@@ -168,51 +168,171 @@ public RollingRandomAccessFileAppender build() {\n                     getPropertyArray());\n         }\n \n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFileName(final String fileName) {\n+            this.fileName = fileName;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFilePattern(final String filePattern) {\n+            this.filePattern = filePattern;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setAppend(final boolean append) {\n+            this.append = append;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setPolicy(final TriggeringPolicy policy) {\n+            this.policy = policy;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setStrategy(final RolloverStrategy strategy) {\n+            this.strategy = strategy;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setAdvertise(final boolean advertise) {\n+            this.advertise = advertise;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setAdvertiseURI(final String advertiseURI) {\n+            this.advertiseURI = advertiseURI;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFilePermissions(final String filePermissions) {\n+            this.filePermissions = filePermissions;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFileOwner(final String fileOwner) {\n+            this.fileOwner = fileOwner;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFileGroup(final String fileGroup) {\n+            this.fileGroup = fileGroup;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileName(String)}.\n+         */\n+        @Deprecated\n         public B withFileName(final String fileName) {\n             this.fileName = fileName;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFilePattern(String)}.\n+         */\n+        @Deprecated\n         public B withFilePattern(final String filePattern) {\n             this.filePattern = filePattern;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAppend(boolean)}.\n+         */\n+        @Deprecated\n         public B withAppend(final boolean append) {\n             this.append = append;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setPolicy(TriggeringPolicy)}.\n+         */\n+        @Deprecated\n         public B withPolicy(final TriggeringPolicy policy) {\n             this.policy = policy;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setStrategy(RolloverStrategy)}.\n+         */\n+        @Deprecated\n         public B withStrategy(final RolloverStrategy strategy) {\n             this.strategy = strategy;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAdvertise(boolean)}.\n+         */\n+        @Deprecated\n         public B withAdvertise(final boolean advertise) {\n             this.advertise = advertise;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAdvertiseURI(String)}.\n+         */\n+        @Deprecated\n         public B withAdvertiseURI(final String advertiseURI) {\n             this.advertiseURI = advertiseURI;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFilePermissions(String)}.\n+         */\n+        @Deprecated\n         public B withFilePermissions(final String filePermissions) {\n             this.filePermissions = filePermissions;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileOwner(String)}.\n+         */\n+        @Deprecated\n         public B withFileOwner(final String fileOwner) {\n             this.fileOwner = fileOwner;\n             return asBuilder();\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileGroup(String)}.\n+         */\n+        @Deprecated\n         public B withFileGroup(final String fileGroup) {\n             this.fileGroup = fileGroup;\n             return asBuilder();\n@@ -353,20 +473,20 @@ public static <B extends Builder<B>> RollingRandomAccessFileAppender createAppen\n         final int bufferSize = Integers.parseInt(bufferSizeStr, RollingRandomAccessFileManager.DEFAULT_BUFFER_SIZE);\n \n         return RollingRandomAccessFileAppender.<B>newBuilder()\n-                .withAdvertise(isAdvertise)\n-                .withAdvertiseURI(advertiseURI)\n-                .withAppend(isAppend)\n-                .withBufferSize(bufferSize)\n+                .setAdvertise(isAdvertise)\n+                .setAdvertiseURI(advertiseURI)\n+                .setAppend(isAppend)\n+                .setBufferSize(bufferSize)\n                 .setConfiguration(configuration)\n-                .withFileName(fileName)\n-                .withFilePattern(filePattern)\n+                .setFileName(fileName)\n+                .setFilePattern(filePattern)\n                 .setFilter(filter)\n                 .setIgnoreExceptions(isIgnoreExceptions)\n-                .withImmediateFlush(isImmediateFlush)\n+                .setImmediateFlush(isImmediateFlush)\n                 .setLayout(layout)\n                 .setName(name)\n-                .withPolicy(policy)\n-                .withStrategy(strategy)\n+                .setPolicy(policy)\n+                .setStrategy(strategy)\n                 .build();\n     }\n \n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java\nindex 200fa47ec7c..e6fcc4ec204 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java\n@@ -118,22 +118,70 @@ public AbstractScript getScript() {\n             return script;\n         }\n \n-        public Builder withAppenderNodeSet(@SuppressWarnings(\""hiding\"") final AppenderSet appenderSet) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setAppenderNodeSet(final AppenderSet appenderSet) {\n             this.appenderSet = appenderSet;\n             return this;\n         }\n \n-        public Builder withConfiguration(@SuppressWarnings(\""hiding\"") final Configuration configuration) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setConfiguration(final Configuration configuration) {\n             this.configuration = configuration;\n             return this;\n         }\n \n-        public Builder withName(@SuppressWarnings(\""hiding\"") final String name) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setName(final String name) {\n             this.name = name;\n             return this;\n         }\n \n-        public Builder withScript(@SuppressWarnings(\""hiding\"") final AbstractScript script) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setScript(final AbstractScript script) {\n+            this.script = script;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAppenderNodeSet(AppenderSet)}.\n+         */\n+        @Deprecated\n+        public Builder withAppenderNodeSet(final AppenderSet appenderSet) {\n+            this.appenderSet = appenderSet;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setConfiguration(Configuration)}.\n+         */\n+        @Deprecated\n+        public Builder withConfiguration(final Configuration configuration) {\n+            this.configuration = configuration;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setName(String)}.\n+         */\n+        @Deprecated\n+        public Builder withName(final String name) {\n+            this.name = name;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setScript(AbstractScript)}.\n+         */\n+        @Deprecated\n+        public Builder withScript(final AbstractScript script) {\n             this.script = script;\n             return this;\n         }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/ColumnMapping.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/ColumnMapping.java\nindex e1eedbc16f1..4982c5b05c2 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/ColumnMapping.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/ColumnMapping.java\n@@ -88,9 +88,9 @@ public static class Builder implements org.apache.logging.log4j.core.util.Builde\n         public ColumnMapping build() {\n             if (pattern != null) {\n                 layout = PatternLayout.newBuilder()\n-                        .withPattern(pattern)\n-                        .withConfiguration(configuration)\n-                        .withAlwaysWriteExceptions(false)\n+                        .setPattern(pattern)\n+                        .setConfiguration(configuration)\n+                        .setAlwaysWriteExceptions(false)\n                         .build();\n             }\n             final Class<?> columnType = type != null ? type : this.columnType;\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java\nindex 56605be97cc..9778ecfa6a1 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java\n@@ -88,9 +88,9 @@ public ColumnConfig build() {\n \n             if (isPattern) {\n                 final PatternLayout layout = PatternLayout.newBuilder()\n-                        .withPattern(pattern)\n-                        .withConfiguration(configuration)\n-                        .withAlwaysWriteExceptions(false)\n+                        .setPattern(pattern)\n+                        .setConfiguration(configuration)\n+                        .setAlwaysWriteExceptions(false)\n                         .build();\n                 return new ColumnConfig(name, layout, null, false, isUnicode, isClob);\n             }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/package-info.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/package-info.java\nindex b0c7d3049f0..a18b7715e4f 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/package-info.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/package-info.java\n@@ -18,7 +18,7 @@\n  * Log4j 2 Appenders.\n  */\n @Export\n-@Version(\""2.20.3\"")\n+@Version(\""2.26.0\"")\n package org.apache.logging.log4j.core.appender;\n \n import org.osgi.annotation.bundle.Export;\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java\nindex 728763433ed..969e37f5812 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java\n@@ -168,8 +168,9 @@ public String getMax() {\n          *\n          * @param max The maximum number of files to keep.\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n          */\n-        public Builder withMax(final String max) {\n+        public Builder setMax(final String max) {\n             this.max = max;\n             return this;\n         }\n@@ -183,8 +184,9 @@ public String getMin() {\n          *\n          * @param min The minimum number of files to keep.\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n          */\n-        public Builder withMin(final String min) {\n+        public Builder setMin(final String min) {\n             this.min = min;\n             return this;\n         }\n@@ -199,8 +201,9 @@ public String getFileIndex() {\n          * @param fileIndex If set to \""max\"" (the default), files with a higher index will be newer than files with a smaller\n          *            index. If set to \""min\"", file renaming and the counter will follow the Fixed Window strategy.\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n          */\n-        public Builder withFileIndex(final String fileIndex) {\n+        public Builder setFileIndex(final String fileIndex) {\n             this.fileIndex = fileIndex;\n             return this;\n         }\n@@ -214,8 +217,9 @@ public String getCompressionLevelStr() {\n          *\n          * @param compressionLevelStr The compression level, 0 (less) through 9 (more); applies only to ZIP files.\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n          */\n-        public Builder withCompressionLevelStr(final String compressionLevelStr) {\n+        public Builder setCompressionLevelStr(final String compressionLevelStr) {\n             this.compressionLevelStr = compressionLevelStr;\n             return this;\n         }\n@@ -229,8 +233,9 @@ public Action[] getCustomActions() {\n          *\n          * @param customActions custom actions to perform asynchronously after rollover\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n          */\n-        public Builder withCustomActions(final Action[] customActions) {\n+        public Builder setCustomActions(final Action[] customActions) {\n             this.customActions = customActions;\n             return this;\n         }\n@@ -244,8 +249,9 @@ public boolean isStopCustomActionsOnError() {\n          *\n          * @param stopCustomActionsOnError whether to stop executing asynchronous actions if an error occurs\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n          */\n-        public Builder withStopCustomActionsOnError(final boolean stopCustomActionsOnError) {\n+        public Builder setStopCustomActionsOnError(final boolean stopCustomActionsOnError) {\n             this.stopCustomActionsOnError = stopCustomActionsOnError;\n             return this;\n         }\n@@ -259,8 +265,9 @@ public String getTempCompressedFilePattern() {\n          *\n          * @param tempCompressedFilePattern File pattern of the working file pattern used during compression, if null no temporary file are used\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n          */\n-        public Builder withTempCompressedFilePattern(final String tempCompressedFilePattern) {\n+        public Builder setTempCompressedFilePattern(final String tempCompressedFilePattern) {\n             this.tempCompressedFilePattern = tempCompressedFilePattern;\n             return this;\n         }\n@@ -274,7 +281,80 @@ public Configuration getConfig() {\n          *\n          * @param config The Configuration.\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n+         */\n+        public Builder setConfig(final Configuration config) {\n+            this.config = config;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setMax(String)}.\n+         */\n+        @Deprecated\n+        public Builder withMax(final String max) {\n+            this.max = max;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setMin(String)}.\n+         */\n+        @Deprecated\n+        public Builder withMin(final String min) {\n+            this.min = min;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileIndex(String)}.\n+         */\n+        @Deprecated\n+        public Builder withFileIndex(final String fileIndex) {\n+            this.fileIndex = fileIndex;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setCompressionLevelStr(String)}.\n+         */\n+        @Deprecated\n+        public Builder withCompressionLevelStr(final String compressionLevelStr) {\n+            this.compressionLevelStr = compressionLevelStr;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setCustomActions(Action[])}.\n+         */\n+        @Deprecated\n+        public Builder withCustomActions(final Action[] customActions) {\n+            this.customActions = customActions;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setStopCustomActionsOnError(boolean)}.\n+         */\n+        @Deprecated\n+        public Builder withStopCustomActionsOnError(final boolean stopCustomActionsOnError) {\n+            this.stopCustomActionsOnError = stopCustomActionsOnError;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setTempCompressedFilePattern(String)}.\n+         */\n+        @Deprecated\n+        public Builder withTempCompressedFilePattern(final String tempCompressedFilePattern) {\n+            this.tempCompressedFilePattern = tempCompressedFilePattern;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setConfig(Configuration)}.\n          */\n+        @Deprecated\n         public Builder withConfig(final Configuration config) {\n             this.config = config;\n             return this;\n@@ -313,13 +393,13 @@ public static DefaultRolloverStrategy createStrategy(\n                     final boolean stopCustomActionsOnError,\n             @PluginConfiguration final Configuration config) {\n         return DefaultRolloverStrategy.newBuilder()\n-                .withMin(min)\n-                .withMax(max)\n-                .withFileIndex(fileIndex)\n-                .withCompressionLevelStr(compressionLevelStr)\n-                .withCustomActions(customActions)\n-                .withStopCustomActionsOnError(stopCustomActionsOnError)\n-                .withConfig(config)\n+                .setMin(min)\n+                .setMax(max)\n+                .setFileIndex(fileIndex)\n+                .setCompressionLevelStr(compressionLevelStr)\n+                .setCustomActions(customActions)\n+                .setStopCustomActionsOnError(stopCustomActionsOnError)\n+                .setConfig(config)\n                 .build();\n         // @formatter:on\n     }\n@@ -617,14 +697,14 @@ public RolloverDescription rollover(final RollingFileManager manager) throws Sec\n             // Propagate POSIX attribute view to compressed file\n             // @formatter:off\n             final Action posixAttributeViewAction = PosixViewAttributeAction.newBuilder()\n-                    .withBasePath(compressedName)\n-                    .withFollowLinks(false)\n-                    .withMaxDepth(1)\n-                    .withPathConditions(PathCondition.EMPTY_ARRAY)\n-                    .withSubst(getStrSubstitutor())\n-                    .withFilePermissions(manager.getFilePermissions())\n-                    .withFileOwner(manager.getFileOwner())\n-                    .withFileGroup(manager.getFileGroup())\n+                    .setBasePath(compressedName)\n+                    .setFollowLinks(false)\n+                    .setMaxDepth(1)\n+                    .setPathConditions(PathCondition.EMPTY_ARRAY)\n+                    .setSubst(getStrSubstitutor())\n+                    .setFilePermissions(manager.getFilePermissions())\n+                    .setFileOwner(manager.getFileOwner())\n+                    .setFileGroup(manager.getFileGroup())\n                     .build();\n             // @formatter:on\n             compressAction = new CompositeAction(Arrays.asList(compressAction, posixAttributeViewAction), false);\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DirectWriteRolloverStrategy.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DirectWriteRolloverStrategy.java\nindex ea41918e4a5..7694ce48a48 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DirectWriteRolloverStrategy.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DirectWriteRolloverStrategy.java\n@@ -114,8 +114,9 @@ public String getMaxFiles() {\n          *\n          * @param maxFiles The maximum number of files that match the date portion of the pattern to keep.\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n          */\n-        public Builder withMaxFiles(final String maxFiles) {\n+        public Builder setMaxFiles(final String maxFiles) {\n             this.maxFiles = maxFiles;\n             return this;\n         }\n@@ -129,8 +130,9 @@ public String getCompressionLevelStr() {\n          *\n          * @param compressionLevelStr The compression level, 0 (less) through 9 (more); applies only to ZIP files.\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n          */\n-        public Builder withCompressionLevelStr(final String compressionLevelStr) {\n+        public Builder setCompressionLevelStr(final String compressionLevelStr) {\n             this.compressionLevelStr = compressionLevelStr;\n             return this;\n         }\n@@ -144,8 +146,9 @@ public Action[] getCustomActions() {\n          *\n          * @param customActions custom actions to perform asynchronously after rollover\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n          */\n-        public Builder withCustomActions(final Action[] customActions) {\n+        public Builder setCustomActions(final Action[] customActions) {\n             this.customActions = customActions;\n             return this;\n         }\n@@ -159,8 +162,9 @@ public boolean isStopCustomActionsOnError() {\n          *\n          * @param stopCustomActionsOnError whether to stop executing asynchronous actions if an error occurs\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n          */\n-        public Builder withStopCustomActionsOnError(final boolean stopCustomActionsOnError) {\n+        public Builder setStopCustomActionsOnError(final boolean stopCustomActionsOnError) {\n             this.stopCustomActionsOnError = stopCustomActionsOnError;\n             return this;\n         }\n@@ -174,8 +178,9 @@ public String getTempCompressedFilePattern() {\n          *\n          * @param tempCompressedFilePattern File pattern of the working file pattern used during compression, if null no temporary file are used\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n          */\n-        public Builder withTempCompressedFilePattern(final String tempCompressedFilePattern) {\n+        public Builder setTempCompressedFilePattern(final String tempCompressedFilePattern) {\n             this.tempCompressedFilePattern = tempCompressedFilePattern;\n             return this;\n         }\n@@ -189,7 +194,62 @@ public Configuration getConfig() {\n          *\n          * @param config The Configuration.\n          * @return This builder for chaining convenience\n+         * @since 2.26.0\n+         */\n+        public Builder setConfig(final Configuration config) {\n+            this.config = config;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setMaxFiles(String)}.\n+         */\n+        @Deprecated\n+        public Builder withMaxFiles(final String maxFiles) {\n+            this.maxFiles = maxFiles;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setCompressionLevelStr(String)}.\n+         */\n+        @Deprecated\n+        public Builder withCompressionLevelStr(final String compressionLevelStr) {\n+            this.compressionLevelStr = compressionLevelStr;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setCustomActions(Action[])}.\n+         */\n+        @Deprecated\n+        public Builder withCustomActions(final Action[] customActions) {\n+            this.customActions = customActions;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setStopCustomActionsOnError(boolean)}.\n+         */\n+        @Deprecated\n+        public Builder withStopCustomActionsOnError(final boolean stopCustomActionsOnError) {\n+            this.stopCustomActionsOnError = stopCustomActionsOnError;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setTempCompressedFilePattern(String)}.\n+         */\n+        @Deprecated\n+        public Builder withTempCompressedFilePattern(final String tempCompressedFilePattern) {\n+            this.tempCompressedFilePattern = tempCompressedFilePattern;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setConfig(Configuration)}.\n          */\n+        @Deprecated\n         public Builder withConfig(final Configuration config) {\n             this.config = config;\n             return this;\n@@ -223,11 +283,11 @@ public static DirectWriteRolloverStrategy createStrategy(\n                     final boolean stopCustomActionsOnError,\n             @PluginConfiguration final Configuration config) {\n         return newBuilder()\n-                .withMaxFiles(maxFiles)\n-                .withCompressionLevelStr(compressionLevelStr)\n-                .withCustomActions(customActions)\n-                .withStopCustomActionsOnError(stopCustomActionsOnError)\n-                .withConfig(config)\n+                .setMaxFiles(maxFiles)\n+                .setCompressionLevelStr(compressionLevelStr)\n+                .setCustomActions(customActions)\n+                .setStopCustomActionsOnError(stopCustomActionsOnError)\n+                .setConfig(config)\n                 .build();\n         // @formatter:on\n     }\n@@ -399,14 +459,14 @@ public RolloverDescription rollover(final RollingFileManager manager) throws Sec\n             // Propagate POSIX attribute view to compressed file\n             // @formatter:off\n             final Action posixAttributeViewAction = PosixViewAttributeAction.newBuilder()\n-                    .withBasePath(compressedName)\n-                    .withFollowLinks(false)\n-                    .withMaxDepth(1)\n-                    .withPathConditions(PathCondition.EMPTY_ARRAY)\n-                    .withSubst(getStrSubstitutor())\n-                    .withFilePermissions(manager.getFilePermissions())\n-                    .withFileOwner(manager.getFileOwner())\n-                    .withFileGroup(manager.getFileGroup())\n+                    .setBasePath(compressedName)\n+                    .setFollowLinks(false)\n+                    .setMaxDepth(1)\n+                    .setPathConditions(PathCondition.EMPTY_ARRAY)\n+                    .setSubst(getStrSubstitutor())\n+                    .setFilePermissions(manager.getFilePermissions())\n+                    .setFileOwner(manager.getFileOwner())\n+                    .setFileGroup(manager.getFileGroup())\n                     .build();\n             // @formatter:on\n             compressAction = new CompositeAction(Arrays.asList(compressAction, posixAttributeViewAction), false);\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java\nindex a761aa8312c..54f406ec8c3 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java\n@@ -62,16 +62,52 @@ public int getMaxRandomDelay() {\n             return maxRandomDelay;\n         }\n \n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setInterval(final int interval) {\n+            this.interval = interval;\n+            return this;\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setModulate(final boolean modulate) {\n+            this.modulate = modulate;\n+            return this;\n+        }\n+\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setMaxRandomDelay(final int maxRandomDelay) {\n+            this.maxRandomDelay = maxRandomDelay;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setInterval(int)}.\n+         */\n+        @Deprecated\n         public Builder withInterval(final int interval) {\n             this.interval = interval;\n             return this;\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setModulate(boolean)}.\n+         */\n+        @Deprecated\n         public Builder withModulate(final boolean modulate) {\n             this.modulate = modulate;\n             return this;\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setMaxRandomDelay(int)}.\n+         */\n+        @Deprecated\n         public Builder withMaxRandomDelay(final int maxRandomDelay) {\n             this.maxRandomDelay = maxRandomDelay;\n             return this;\n@@ -149,8 +185,8 @@ public boolean isTriggeringEvent(final LogEvent event) {\n     public static TimeBasedTriggeringPolicy createPolicy(\n             @PluginAttribute(\""interval\"") final String interval, @PluginAttribute(\""modulate\"") final String modulate) {\n         return newBuilder()\n-                .withInterval(Integers.parseInt(interval, 1))\n-                .withModulate(Boolean.parseBoolean(modulate))\n+                .setInterval(Integers.parseInt(interval, 1))\n+                .setModulate(Boolean.parseBoolean(modulate))\n                 .build();\n     }\n \n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/PosixViewAttributeAction.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/PosixViewAttributeAction.java\nindex 9e45b5bef5a..51e038f1c13 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/PosixViewAttributeAction.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/PosixViewAttributeAction.java\n@@ -161,8 +161,9 @@ public PosixViewAttributeAction build() {\n          *\n          * @param configuration {@link AbstractPathAction#getStrSubstitutor()}\n          * @return This builder\n+         * @since 2.26.0\n          */\n-        public Builder withConfiguration(final Configuration configuration) {\n+        public Builder setConfiguration(final Configuration configuration) {\n             this.configuration = configuration;\n             return this;\n         }\n@@ -172,8 +173,9 @@ public Builder withConfiguration(final Configuration configuration) {\n          *\n          * @param subst {@link AbstractPathAction#getStrSubstitutor()}\n          * @return This builder\n+         * @since 2.26.0\n          */\n-        public Builder withSubst(final StrSubstitutor subst) {\n+        public Builder setSubst(final StrSubstitutor subst) {\n             this.subst = subst;\n             return this;\n         }\n@@ -182,8 +184,9 @@ public Builder withSubst(final StrSubstitutor subst) {\n          * Define base path to apply condition before execute POSIX file attribute action.\n          * @param basePath {@link AbstractPathAction#getBasePath()}\n          * @return This builder\n+         * @since 2.26.0\n          */\n-        public Builder withBasePath(final String basePath) {\n+        public Builder setBasePath(final String basePath) {\n             this.basePath = basePath;\n             return this;\n         }\n@@ -192,8 +195,9 @@ public Builder withBasePath(final String basePath) {\n          * True to allow synonyms links during search of eligible files.\n          * @param followLinks Follow synonyms links\n          * @return This builder\n+         * @since 2.26.0\n          */\n-        public Builder withFollowLinks(final boolean followLinks) {\n+        public Builder setFollowLinks(final boolean followLinks) {\n             this.followLinks = followLinks;\n             return this;\n         }\n@@ -202,8 +206,9 @@ public Builder withFollowLinks(final boolean followLinks) {\n          * Define max folder depth to search for eligible files to apply POSIX attribute view.\n          * @param maxDepth Max search depth\n          * @return This builder\n+         * @since 2.26.0\n          */\n-        public Builder withMaxDepth(final int maxDepth) {\n+        public Builder setMaxDepth(final int maxDepth) {\n             this.maxDepth = maxDepth;\n             return this;\n         }\n@@ -213,8 +218,9 @@ public Builder withMaxDepth(final int maxDepth) {\n          *\n          * @param pathConditions {@link AbstractPathAction#getPathConditions()}\n          * @return This builder\n+         * @since 2.26.0\n          */\n-        public Builder withPathConditions(final PathCondition[] pathConditions) {\n+        public Builder setPathConditions(final PathCondition[] pathConditions) {\n             this.pathConditions = pathConditions;\n             return this;\n         }\n@@ -227,8 +233,9 @@ public Builder withPathConditions(final PathCondition[] pathConditions) {\n          * <p>r--r--r--\n          * @param filePermissionsString Permissions to apply\n          * @return This builder\n+         * @since 2.26.0\n          */\n-        public Builder withFilePermissionsString(final String filePermissionsString) {\n+        public Builder setFilePermissionsString(final String filePermissionsString) {\n             this.filePermissionsString = filePermissionsString;\n             return this;\n         }\n@@ -237,8 +244,9 @@ public Builder withFilePermissionsString(final String filePermissionsString) {\n          * Define file permissions to apply during action execution eligible files.\n          * @param filePermissions Permissions to apply\n          * @return This builder\n+         * @since 2.26.0\n          */\n-        public Builder withFilePermissions(final Set<PosixFilePermission> filePermissions) {\n+        public Builder setFilePermissions(final Set<PosixFilePermission> filePermissions) {\n             this.filePermissions = filePermissions;\n             return this;\n         }\n@@ -247,8 +255,9 @@ public Builder withFilePermissions(final Set<PosixFilePermission> filePermission\n          * Define file owner to apply during action execution eligible files.\n          * @param fileOwner File owner\n          * @return This builder\n+         * @since 2.26.0\n          */\n-        public Builder withFileOwner(final String fileOwner) {\n+        public Builder setFileOwner(final String fileOwner) {\n             this.fileOwner = fileOwner;\n             return this;\n         }\n@@ -257,7 +266,98 @@ public Builder withFileOwner(final String fileOwner) {\n          * Define file group to apply during action execution eligible files.\n          * @param fileGroup File group\n          * @return This builder\n+         * @since 2.26.0\n+         */\n+        public Builder setFileGroup(final String fileGroup) {\n+            this.fileGroup = fileGroup;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setConfiguration(Configuration)}.\n+         */\n+        @Deprecated\n+        public Builder withConfiguration(final Configuration configuration) {\n+            this.configuration = configuration;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setSubst(StrSubstitutor)}.\n+         */\n+        @Deprecated\n+        public Builder withSubst(final StrSubstitutor subst) {\n+            this.subst = subst;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setBasePath(String)}.\n+         */\n+        @Deprecated\n+        public Builder withBasePath(final String basePath) {\n+            this.basePath = basePath;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFollowLinks(boolean)}.\n+         */\n+        @Deprecated\n+        public Builder withFollowLinks(final boolean followLinks) {\n+            this.followLinks = followLinks;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setMaxDepth(int)}.\n+         */\n+        @Deprecated\n+        public Builder withMaxDepth(final int maxDepth) {\n+            this.maxDepth = maxDepth;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setPathConditions(PathCondition[])}.\n+         */\n+        @Deprecated\n+        public Builder withPathConditions(final PathCondition[] pathConditions) {\n+            this.pathConditions = pathConditions;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFilePermissionsString(String)}.\n+         */\n+        @Deprecated\n+        public Builder withFilePermissionsString(final String filePermissionsString) {\n+            this.filePermissionsString = filePermissionsString;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFilePermissions(Set<PosixFilePermission>)}.\n+         */\n+        @Deprecated\n+        public Builder withFilePermissions(final Set<PosixFilePermission> filePermissions) {\n+            this.filePermissions = filePermissions;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileOwner(String)}.\n+         */\n+        @Deprecated\n+        public Builder withFileOwner(final String fileOwner) {\n+            this.fileOwner = fileOwner;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFileGroup(String)}.\n          */\n+        @Deprecated\n         public Builder withFileGroup(final String fileGroup) {\n             this.fileGroup = fileGroup;\n             return this;\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/package-info.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/package-info.java\nindex 4e9d1a1bb9d..37370530300 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/package-info.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/package-info.java\n@@ -18,7 +18,7 @@\n  * Support classes for the Rolling File Appender.\n  */\n @Export\n-@Version(\""2.24.0\"")\n+@Version(\""2.26.0\"")\n package org.apache.logging.log4j.core.appender.rolling.action;\n \n import org.osgi.annotation.bundle.Export;\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/package-info.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/package-info.java\nindex 3be84e0d2a6..9f4ea078048 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/package-info.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/package-info.java\n@@ -18,7 +18,7 @@\n  * Rolling File Appender and support classes.\n  */\n @Export\n-@Version(\""2.21.1\"")\n+@Version(\""2.26.0\"")\n package org.apache.logging.log4j.core.appender.rolling;\n \n import org.osgi.annotation.bundle.Export;\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java\nindex cb5a452ef27..b8bc14060d8 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java\n@@ -104,22 +104,70 @@ public Route[] getRoutes() {\n             return routes;\n         }\n \n-        public Builder withConfiguration(@SuppressWarnings(\""hiding\"") final Configuration configuration) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setConfiguration(final Configuration configuration) {\n             this.configuration = configuration;\n             return this;\n         }\n \n-        public Builder withPattern(@SuppressWarnings(\""hiding\"") final String pattern) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setPattern(final String pattern) {\n             this.pattern = pattern;\n             return this;\n         }\n \n-        public Builder withPatternScript(@SuppressWarnings(\""hiding\"") final AbstractScript patternScript) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setPatternScript(final AbstractScript patternScript) {\n             this.patternScript = patternScript;\n             return this;\n         }\n \n-        public Builder withRoutes(@SuppressWarnings(\""hiding\"") final Route[] routes) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setRoutes(final Route[] routes) {\n+            this.routes = routes;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setConfiguration(Configuration)}.\n+         */\n+        @Deprecated\n+        public Builder withConfiguration(final Configuration configuration) {\n+            this.configuration = configuration;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setPattern(String)}.\n+         */\n+        @Deprecated\n+        public Builder withPattern(final String pattern) {\n+            this.pattern = pattern;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setPatternScript(AbstractScript)}.\n+         */\n+        @Deprecated\n+        public Builder withPatternScript(final AbstractScript patternScript) {\n+            this.patternScript = patternScript;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setRoutes(Route[])}.\n+         */\n+        @Deprecated\n+        public Builder withRoutes(final Route[] routes) {\n             this.routes = routes;\n             return this;\n         }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java\nindex 14aadb1afb6..f552a9c8cf1 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java\n@@ -122,22 +122,69 @@ public PurgePolicy getPurgePolicy() {\n             return purgePolicy;\n         }\n \n-        public B withRoutes(@SuppressWarnings(\""hiding\"") final Routes routes) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setRoutes(final Routes routes) {\n             this.routes = routes;\n             return asBuilder();\n         }\n \n-        public B withDefaultRouteScript(@SuppressWarnings(\""hiding\"") final AbstractScript defaultRouteScript) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setDefaultRouteScript(final AbstractScript defaultRouteScript) {\n             this.defaultRouteScript = defaultRouteScript;\n             return asBuilder();\n         }\n \n-        public B withRewritePolicy(@SuppressWarnings(\""hiding\"") final RewritePolicy rewritePolicy) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setRewritePolicy(final RewritePolicy rewritePolicy) {\n             this.rewritePolicy = rewritePolicy;\n             return asBuilder();\n         }\n \n-        public void withPurgePolicy(@SuppressWarnings(\""hiding\"") final PurgePolicy purgePolicy) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public void setPurgePolicy(final PurgePolicy purgePolicy) {\n+            this.purgePolicy = purgePolicy;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setRoutes(Routes)}.\n+         */\n+        @Deprecated\n+        public B withRoutes(final Routes routes) {\n+            this.routes = routes;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setDefaultRouteScript(AbstractScript)}.\n+         */\n+        @Deprecated\n+        public B withDefaultRouteScript(final AbstractScript defaultRouteScript) {\n+            this.defaultRouteScript = defaultRouteScript;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setRewritePolicy(RewritePolicy)}.\n+         */\n+        @Deprecated\n+        public B withRewritePolicy(final RewritePolicy rewritePolicy) {\n+            this.rewritePolicy = rewritePolicy;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setPurgePolicy(PurgePolicy)}.\n+         */\n+        @Deprecated\n+        public void withPurgePolicy(final PurgePolicy purgePolicy) {\n             this.purgePolicy = purgePolicy;\n         }\n     }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/package-info.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/package-info.java\nindex b10a700d62b..044a76ea32b 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/package-info.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/package-info.java\n@@ -18,7 +18,7 @@\n  * Apache Flume Appender. Requires the user specifically include Flume and its dependencies.\n  */\n @Export\n-@Version(\""2.20.1\"")\n+@Version(\""2.26.0\"")\n package org.apache.logging.log4j.core.appender.routing;\n \n import org.osgi.annotation.bundle.Export;\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryConfig.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryConfig.java\nindex 890d377cd26..3785de5a671 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryConfig.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryConfig.java\n@@ -66,6 +66,19 @@ public String getFactoryClassName() {\n             return factoryClassName;\n         }\n \n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setFactoryClassName(final String className) {\n+            this.factoryClassName =\n+                    Assert.requireNonEmpty(className, \""The 'className' argument must not be null or empty.\"");\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFactoryClassName(String)}.\n+         */\n+        @Deprecated\n         public B withFactoryClassName(final String className) {\n             this.factoryClassName =\n                     Assert.requireNonEmpty(className, \""The 'className' argument must not be null or empty.\"");\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/async/package-info.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/async/package-info.java\nindex abf19fcd6f4..24e9b7643f0 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/async/package-info.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/async/package-info.java\n@@ -18,7 +18,7 @@\n  * Provides Asynchronous Logger classes and interfaces for low-latency logging.\n  */\n @Export\n-@Version(\""2.25.0\"")\n+@Version(\""2.26.0\"")\n package org.apache.logging.log4j.core.async;\n \n import org.osgi.annotation.bundle.Export;\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java\nindex 0a9be69d19a..12b0b2f0abb 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java\n@@ -140,7 +140,10 @@ public boolean isAdditivity() {\n             return additivity == null || additivity;\n         }\n \n-        public B withAdditivity(final boolean additivity) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setAdditivity(final boolean additivity) {\n             this.additivity = additivity;\n             return asBuilder();\n         }\n@@ -149,7 +152,10 @@ public Level getLevel() {\n             return level;\n         }\n \n-        public B withLevel(final Level level) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setLevel(final Level level) {\n             this.level = level;\n             return asBuilder();\n         }\n@@ -158,7 +164,10 @@ public String getLevelAndRefs() {\n             return levelAndRefs;\n         }\n \n-        public B withLevelAndRefs(final String levelAndRefs) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setLevelAndRefs(final String levelAndRefs) {\n             this.levelAndRefs = levelAndRefs;\n             return asBuilder();\n         }\n@@ -167,7 +176,10 @@ public String getLoggerName() {\n             return loggerName;\n         }\n \n-        public B withLoggerName(final String loggerName) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setLoggerName(final String loggerName) {\n             this.loggerName = loggerName;\n             return asBuilder();\n         }\n@@ -176,7 +188,10 @@ public String getIncludeLocation() {\n             return includeLocation;\n         }\n \n-        public B withIncludeLocation(final String includeLocation) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setIncludeLocation(final String includeLocation) {\n             this.includeLocation = includeLocation;\n             return asBuilder();\n         }\n@@ -185,7 +200,10 @@ public AppenderRef[] getRefs() {\n             return refs;\n         }\n \n-        public B withRefs(final AppenderRef[] refs) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setRefs(final AppenderRef[] refs) {\n             this.refs = refs;\n             return asBuilder();\n         }\n@@ -194,7 +212,10 @@ public Property[] getProperties() {\n             return properties;\n         }\n \n-        public B withProperties(final Property[] properties) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setProperties(final Property[] properties) {\n             this.properties = properties;\n             return asBuilder();\n         }\n@@ -203,7 +224,10 @@ public Configuration getConfig() {\n             return config;\n         }\n \n-        public B withConfig(final Configuration config) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public B setConfig(final Configuration config) {\n             this.config = config;\n             return asBuilder();\n         }\n@@ -212,6 +236,84 @@ public Filter getFilter() {\n             return filter;\n         }\n \n+        /** @since 2.25.0 */\n+        public B setFilter(final Filter filter) {\n+            this.filter = filter;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAdditivity(boolean)}.\n+         */\n+        @Deprecated\n+        public B withAdditivity(final boolean additivity) {\n+            this.additivity = additivity;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setLevel(Level)}.\n+         */\n+        @Deprecated\n+        public B withLevel(final Level level) {\n+            this.level = level;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setLevelAndRefs(String)}.\n+         */\n+        @Deprecated\n+        public B withLevelAndRefs(final String levelAndRefs) {\n+            this.levelAndRefs = levelAndRefs;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setLoggerName(String)}.\n+         */\n+        @Deprecated\n+        public B withLoggerName(final String loggerName) {\n+            this.loggerName = loggerName;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setIncludeLocation(String)}.\n+         */\n+        @Deprecated\n+        public B withIncludeLocation(final String includeLocation) {\n+            this.includeLocation = includeLocation;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setRefs(AppenderRef[])}.\n+         */\n+        @Deprecated\n+        public B withRefs(final AppenderRef[] refs) {\n+            this.refs = refs;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setProperties(Property[])}.\n+         */\n+        @Deprecated\n+        public B withProperties(final Property[] properties) {\n+            this.properties = properties;\n+            return asBuilder();\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setConfig(Configuration)}.\n+         */\n+        @Deprecated\n+        public B withConfig(final Configuration config) {\n+            this.config = config;\n+            return asBuilder();\n+        }\n+\n         /**\n          * @deprecated Use {@link #setFilter(Filter)} instead\n          */\n@@ -226,12 +328,6 @@ public B withFilter(final Filter filter) {\n             return setFilter(filter);\n         }\n \n-        /** @since 2.25.0 */\n-        public B setFilter(final Filter filter) {\n-            this.filter = filter;\n-            return asBuilder();\n-        }\n-\n         @Override\n         public LoggerConfig build() {\n             final String name = loggerName.equals(ROOT) ? Strings.EMPTY : loggerName;\n@@ -879,7 +975,10 @@ public boolean isAdditivity() {\n                 return additivity;\n             }\n \n-            public B withAdditivity(final boolean additivity) {\n+            /**\n+             * @since 2.26.0\n+             */\n+            public B setAdditivity(final boolean additivity) {\n                 this.additivity = additivity;\n                 return asBuilder();\n             }\n@@ -888,7 +987,10 @@ public Level getLevel() {\n                 return level;\n             }\n \n-            public B withLevel(final Level level) {\n+            /**\n+             * @since 2.26.0\n+             */\n+            public B setLevel(final Level level) {\n                 this.level = level;\n                 return asBuilder();\n             }\n@@ -897,7 +999,10 @@ public String getLevelAndRefs() {\n                 return levelAndRefs;\n             }\n \n-            public B withLevelAndRefs(final String levelAndRefs) {\n+            /**\n+             * @since 2.26.0\n+             */\n+            public B setLevelAndRefs(final String levelAndRefs) {\n                 this.levelAndRefs = levelAndRefs;\n                 return asBuilder();\n             }\n@@ -906,7 +1011,10 @@ public String getIncludeLocation() {\n                 return includeLocation;\n             }\n \n-            public B withIncludeLocation(final String includeLocation) {\n+            /**\n+             * @since 2.26.0\n+             */\n+            public B setIncludeLocation(final String includeLocation) {\n                 this.includeLocation = includeLocation;\n                 return asBuilder();\n             }\n@@ -915,7 +1023,10 @@ public AppenderRef[] getRefs() {\n                 return refs;\n             }\n \n-            public B withRefs(final AppenderRef[] refs) {\n+            /**\n+             * @since 2.26.0\n+             */\n+            public B setRefs(final AppenderRef[] refs) {\n                 this.refs = refs;\n                 return asBuilder();\n             }\n@@ -924,7 +1035,10 @@ public Property[] getProperties() {\n                 return properties;\n             }\n \n-            public B withProperties(final Property[] properties) {\n+            /**\n+             * @since 2.26.0\n+             */\n+            public B setProperties(final Property[] properties) {\n                 this.properties = properties;\n                 return asBuilder();\n             }\n@@ -933,7 +1047,10 @@ public Configuration getConfig() {\n                 return config;\n             }\n \n-            public B withConfig(final Configuration config) {\n+            /**\n+             * @since 2.26.0\n+             */\n+            public B setConfig(final Configuration config) {\n                 this.config = config;\n                 return asBuilder();\n             }\n@@ -942,20 +1059,83 @@ public Filter getFilter() {\n                 return filter;\n             }\n \n+            /** @since 2.25.0 */\n+            public B setFilter(final Filter filter) {\n+                this.filter = filter;\n+                return asBuilder();\n+            }\n+\n             /**\n-             * @deprecated since 2.25.0. Use {@link #setFilter(Filter)} instead.\n+             * @deprecated since 2.26.0 use {@link #setAdditivity(boolean)}.\n              */\n             @Deprecated\n-            public B withtFilter(final Filter filter) {\n-                return setFilter(filter);\n+            public B withAdditivity(final boolean additivity) {\n+                this.additivity = additivity;\n+                return asBuilder();\n             }\n \n-            /** @since 2.25.0 */\n-            public B setFilter(final Filter filter) {\n-                this.filter = filter;\n+            /**\n+             * @deprecated since 2.26.0 use {@link #setLevel(Level)}.\n+             */\n+            @Deprecated\n+            public B withLevel(final Level level) {\n+                this.level = level;\n+                return asBuilder();\n+            }\n+\n+            /**\n+             * @deprecated since 2.26.0 use {@link #setLevelAndRefs(String)}.\n+             */\n+            @Deprecated\n+            public B withLevelAndRefs(final String levelAndRefs) {\n+                this.levelAndRefs = levelAndRefs;\n+                return asBuilder();\n+            }\n+\n+            /**\n+             * @deprecated since 2.26.0 use {@link #setIncludeLocation(String)}.\n+             */\n+            @Deprecated\n+            public B withIncludeLocation(final String includeLocation) {\n+                this.includeLocation = includeLocation;\n+                return asBuilder();\n+            }\n+\n+            /**\n+             * @deprecated since 2.26.0 use {@link #setRefs(AppenderRef[])}.\n+             */\n+            @Deprecated\n+            public B withRefs(final AppenderRef[] refs) {\n+                this.refs = refs;\n                 return asBuilder();\n             }\n \n+            /**\n+             * @deprecated since 2.26.0 use {@link #setProperties(Property[])}.\n+             */\n+            @Deprecated\n+            public B withProperties(final Property[] properties) {\n+                this.properties = properties;\n+                return asBuilder();\n+            }\n+\n+            /**\n+             * @deprecated since 2.26.0 use {@link #setConfig(Configuration)}.\n+             */\n+            @Deprecated\n+            public B withConfig(final Configuration config) {\n+                this.config = config;\n+                return asBuilder();\n+            }\n+\n+            /**\n+             * @deprecated since 2.25.0. Use {@link #setFilter(Filter)} instead.\n+             */\n+            @Deprecated\n+            public B withtFilter(final Filter filter) {\n+                return setFilter(filter);\n+            }\n+\n             @Override\n             public LoggerConfig build() {\n                 final LevelAndRefs container = LoggerConfig.getLevelAndRefs(level, refs, levelAndRefs, config);\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/package-info.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/package-info.java\nindex 3db1c7abd6b..b0dbdc1ea00 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/package-info.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/package-info.java\n@@ -18,7 +18,7 @@\n  * Configuration of Log4j 2.\n  */\n @Export\n-@Version(\""2.25.0\"")\n+@Version(\""2.26.0\"")\n package org.apache.logging.log4j.core.config;\n \n import org.osgi.annotation.bundle.Export;\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java\nindex cf268c22dd8..6d07f91101f 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java\n@@ -148,10 +148,7 @@ private void processBuilderAttribute(final VariableElement element) {\n                     final ExecutableElement methodElement = (ExecutableElement) enclosedElement;\n                     final String methodName = methodElement.getSimpleName().toString();\n \n-                    if ((methodName.toLowerCase(Locale.ROOT).startsWith(\""set\"") // Typical pattern for setters\n-                                    || methodName\n-                                            .toLowerCase(Locale.ROOT)\n-                                            .startsWith(\""with\"")) // Typical pattern for setters\n+                    if (methodName.toLowerCase(Locale.ROOT).startsWith(\""set\"") // Typical pattern for setters\n                             && methodElement.getParameters().size()\n                                     == 1 // It is a weird pattern to not have public setter\n                     ) {\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java\nindex 39458807f7e..9889a6a7c2b 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java\n@@ -188,16 +188,16 @@ public GelfLayout build() {\n             }\n             if (messagePattern != null) {\n                 patternLayout = PatternLayout.newBuilder()\n-                        .withPattern(messagePattern)\n-                        .withAlwaysWriteExceptions(includeStacktrace)\n-                        .withConfiguration(getConfiguration())\n+                        .setPattern(messagePattern)\n+                        .setAlwaysWriteExceptions(includeStacktrace)\n+                        .setConfiguration(getConfiguration())\n                         .build();\n             }\n             if (patternSelector != null) {\n                 patternLayout = PatternLayout.newBuilder()\n-                        .withPatternSelector(patternSelector)\n-                        .withAlwaysWriteExceptions(includeStacktrace)\n-                        .withConfiguration(getConfiguration())\n+                        .setPatternSelector(patternSelector)\n+                        .setAlwaysWriteExceptions(includeStacktrace)\n+                        .setConfiguration(getConfiguration())\n                         .build();\n             }\n             return new GelfLayout(\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java\nindex 45a80fa8f06..4debdfab722 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java\n@@ -435,32 +435,50 @@ public static class Builder implements org.apache.logging.log4j.core.util.Builde\n \n         private Builder() {}\n \n-        public Builder withLocationInfo(final boolean locationInfo) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setLocationInfo(final boolean locationInfo) {\n             this.locationInfo = locationInfo;\n             return this;\n         }\n \n-        public Builder withTitle(final String title) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setTitle(final String title) {\n             this.title = title;\n             return this;\n         }\n \n-        public Builder withContentType(final String contentType) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setContentType(final String contentType) {\n             this.contentType = contentType;\n             return this;\n         }\n \n-        public Builder withCharset(final Charset charset) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setCharset(final Charset charset) {\n             this.charset = charset;\n             return this;\n         }\n \n-        public Builder withFontSize(final FontSize fontSize) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setFontSize(final FontSize fontSize) {\n             this.fontSize = fontSize;\n             return this;\n         }\n \n-        public Builder withFontName(final String fontName) {\n+        /**\n+         * @since 2.26.0\n+         */\n+        public Builder setFontName(final String fontName) {\n             this.fontName = fontName;\n             return this;\n         }\n@@ -475,6 +493,60 @@ public Builder setTimezone(final String timezone) {\n             return this;\n         }\n \n+        /**\n+         * @deprecated since 2.26.0 use {@link #setLocationInfo(boolean)}.\n+         */\n+        @Deprecated\n+        public Builder withLocationInfo(final boolean locationInfo) {\n+            this.locationInfo = locationInfo;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setTitle(String)}.\n+         */\n+        @Deprecated\n+        public Builder withTitle(final String title) {\n+            this.title = title;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setContentType(String)}.\n+         */\n+        @Deprecated\n+        public Builder withContentType(final String contentType) {\n+            this.contentType = contentType;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setCharset(Charset)}.\n+         */\n+        @Deprecated\n+        public Builder withCharset(final Charset charset) {\n+            this.charset = charset;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFontSize(FontSize)}.\n+         */\n+        @Deprecated\n+        public Builder withFontSize(final FontSize fontSize) {\n+            this.fontSize = fontSize;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFontName(String)}.\n+         */\n+        @Deprecated\n+        public Builder withFontName(final String fontName) {\n+            this.fontName = fontName;\n+            return this;\n+        }\n+\n         @Override\n         public HtmlLayout build() {\n             // TODO: extract charset from content-type\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java\nindex 5f6e4299277..4fea9e4de33 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java\n@@ -313,15 +313,15 @@ public static PatternLayout createLayout(\n             @PluginAttribute(\""header\"") final String headerPattern,\n             @PluginAttribute(\""footer\"") final String footerPattern) {\n         return newBuilder()\n-                .withPattern(pattern)\n-                .withPatternSelector(patternSelector)\n-                .withConfiguration(config)\n-                .withRegexReplacement(replace)\n-                .withCharset(charset)\n-                .withAlwaysWriteExceptions(alwaysWriteExceptions)\n-                .withNoConsoleNoAnsi(noConsoleNoAnsi)\n-                .withHeader(headerPattern)\n-                .withFooter(footerPattern)\n+                .setPattern(pattern)\n+                .setPatternSelector(patternSelector)\n+                .setConfiguration(config)\n+                .setRegexReplacement(replace)\n+                .setCharset(charset)\n+                .setAlwaysWriteExceptions(alwaysWriteExceptions)\n+                .setNoConsoleNoAnsi(noConsoleNoAnsi)\n+                .setHeader(headerPattern)\n+                .setFooter(footerPattern)\n                 .build();\n     }\n \n@@ -613,7 +613,7 @@ public static PatternLayout createDefaultLayout() {\n      * @see #DEFAULT_CONVERSION_PATTERN Default conversion pattern\n      */\n     public static PatternLayout createDefaultLayout(final Configuration configuration) {\n-        return newBuilder().withConfiguration(configuration).build();\n+        return newBuilder().setConfiguration(configuration).build();\n     }\n \n     /**\n@@ -667,8 +667,9 @@ private Builder() {}\n         /**\n          * @param pattern\n          *        The pattern. If not specified, defaults to DEFAULT_CONVERSION_PATTERN.\n+         * @since 2.26.0\n          */\n-        public Builder withPattern(final String pattern) {\n+        public Builder setPattern(final String pattern) {\n             this.pattern = pattern;\n             return this;\n         }\n@@ -676,8 +677,9 @@ public Builder withPattern(final String pattern) {\n         /**\n          * @param patternSelector\n          *        Allows different patterns to be used based on some selection criteria.\n+         * @since 2.26.0\n          */\n-        public Builder withPatternSelector(final PatternSelector patternSelector) {\n+        public Builder setPatternSelector(final PatternSelector patternSelector) {\n             this.patternSelector = patternSelector;\n             return this;\n         }\n@@ -685,8 +687,9 @@ public Builder withPatternSelector(final PatternSelector patternSelector) {\n         /**\n          * @param configuration\n          *        The Configuration. Some Converters require access to the Interpolator.\n+         * @since 2.26.0\n          */\n-        public Builder withConfiguration(final Configuration configuration) {\n+        public Builder setConfiguration(final Configuration configuration) {\n             this.configuration = configuration;\n             return this;\n         }\n@@ -694,8 +697,9 @@ public Builder withConfiguration(final Configuration configuration) {\n         /**\n          * @param regexReplacement\n          *        A Regex replacement\n+         * @since 2.26.0\n          */\n-        public Builder withRegexReplacement(final RegexReplacement regexReplacement) {\n+        public Builder setRegexReplacement(final RegexReplacement regexReplacement) {\n             this.regexReplacement = regexReplacement;\n             return this;\n         }\n@@ -703,8 +707,9 @@ public Builder withRegexReplacement(final RegexReplacement regexReplacement) {\n         /**\n          * @param charset\n          *        The character set. The platform default is used if not specified.\n+         * @since 2.26.0\n          */\n-        public Builder withCharset(final Charset charset) {\n+        public Builder setCharset(final Charset charset) {\n             // LOG4J2-783 if null, use platform default by default\n             if (charset != null) {\n                 this.charset = charset;\n@@ -715,8 +720,9 @@ public Builder withCharset(final Charset charset) {\n         /**\n          * @param alwaysWriteExceptions\n          *        If {@code \""true\""} (default) exceptions are always written even if the pattern contains no exception tokens.\n+         * @since 2.26.0\n          */\n-        public Builder withAlwaysWriteExceptions(final boolean alwaysWriteExceptions) {\n+        public Builder setAlwaysWriteExceptions(final boolean alwaysWriteExceptions) {\n             this.alwaysWriteExceptions = alwaysWriteExceptions;\n             return this;\n         }\n@@ -724,8 +730,9 @@ public Builder withAlwaysWriteExceptions(final boolean alwaysWriteExceptions) {\n         /**\n          * @param disableAnsi\n          *        If {@code true}, do not output ANSI escape codes.\n+         * @since 2.26.0\n          */\n-        public Builder withDisableAnsi(final boolean disableAnsi) {\n+        public Builder setDisableAnsi(final boolean disableAnsi) {\n             this.disableAnsi = disableAnsi;\n             return this;\n         }\n@@ -733,8 +740,9 @@ public Builder withDisableAnsi(final boolean disableAnsi) {\n         /**\n          * @param noConsoleNoAnsi\n          *        If {@code \""true\""} (default is false) and {@link System#console()} is null, do not output ANSI escape codes\n+         * @since 2.26.0\n          */\n-        public Builder withNoConsoleNoAnsi(final boolean noConsoleNoAnsi) {\n+        public Builder setNoConsoleNoAnsi(final boolean noConsoleNoAnsi) {\n             this.noConsoleNoAnsi = noConsoleNoAnsi;\n             return this;\n         }\n@@ -742,8 +750,9 @@ public Builder withNoConsoleNoAnsi(final boolean noConsoleNoAnsi) {\n         /**\n          * @param header\n          *        The header to place at the top of the document, once.\n+         * @since 2.26.0\n          */\n-        public Builder withHeader(final String header) {\n+        public Builder setHeader(final String header) {\n             this.header = header;\n             return this;\n         }\n@@ -751,7 +760,101 @@ public Builder withHeader(final String header) {\n         /**\n          * @param footer\n          *        The footer to place at the bottom of the document, once.\n+         * @since 2.26.0\n+         */\n+        public Builder setFooter(final String footer) {\n+            this.footer = footer;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setPattern(String)}.\n+         */\n+        @Deprecated\n+        public Builder withPattern(final String pattern) {\n+            this.pattern = pattern;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setPatternSelector(PatternSelector)}.\n+         */\n+        @Deprecated\n+        public Builder withPatternSelector(final PatternSelector patternSelector) {\n+            this.patternSelector = patternSelector;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setConfiguration(Configuration)}.\n+         */\n+        @Deprecated\n+        public Builder withConfiguration(final Configuration configuration) {\n+            this.configuration = configuration;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setRegexReplacement(RegexReplacement)}.\n+         */\n+        @Deprecated\n+        public Builder withRegexReplacement(final RegexReplacement regexReplacement) {\n+            this.regexReplacement = regexReplacement;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setCharset(Charset)}.\n+         */\n+        @Deprecated\n+        public Builder withCharset(final Charset charset) {\n+            // LOG4J2-783 if null, use platform default by default\n+            if (charset != null) {\n+                this.charset = charset;\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setAlwaysWriteExceptions(boolean)}.\n+         */\n+        @Deprecated\n+        public Builder withAlwaysWriteExceptions(final boolean alwaysWriteExceptions) {\n+            this.alwaysWriteExceptions = alwaysWriteExceptions;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setDisableAnsi(boolean)}.\n+         */\n+        @Deprecated\n+        public Builder withDisableAnsi(final boolean disableAnsi) {\n+            this.disableAnsi = disableAnsi;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setNoConsoleNoAnsi(boolean)}.\n+         */\n+        @Deprecated\n+        public Builder withNoConsoleNoAnsi(final boolean noConsoleNoAnsi) {\n+            this.noConsoleNoAnsi = noConsoleNoAnsi;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setHeader(String)}.\n+         */\n+        @Deprecated\n+        public Builder withHeader(final String header) {\n+            this.header = header;\n+            return this;\n+        }\n+\n+        /**\n+         * @deprecated since 2.26.0 use {@link #setFooter(String)}.\n          */\n+        @Deprecated\n         public Builder withFooter(final String footer) {\n             this.footer = footer;\n             return this;\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/package-info.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/package-info.java\nindex 1a93726007f..6fc5dbb1a12 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/package-info.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/package-info.java\n@@ -22,7 +22,7 @@\n  * {@link org.apache.logging.log4j.core.Layout#ELEMENT_TYPE layout}.\n  */\n @Export\n-@Version(\""2.25.0\"")\n+@Version(\""2.26.0\"")\n package org.apache.logging.log4j.core.layout;\n \n import org.osgi.annotation.bundle.Export;\n\ndiff --git a/log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/PatternResolver.java b/log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/PatternResolver.java\nindex 249c24a44a1..cb1ec2cf26a 100644\n--- a/log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/PatternResolver.java\n+++ b/log4j-layout-template-json/src/main/java/org/apache/logging/log4j/layout/template/json/resolver/PatternResolver.java\n@@ -62,10 +62,10 @@ public final class PatternResolver implements EventResolver {\n         final boolean stackTraceEnabled =\n                 Optional.ofNullable(config.getBoolean(\""stackTraceEnabled\"")).orElse(context.isStackTraceEnabled());\n         final PatternLayout patternLayout = PatternLayout.newBuilder()\n-                .withConfiguration(context.getConfiguration())\n-                .withCharset(context.getCharset())\n-                .withPattern(pattern)\n-                .withAlwaysWriteExceptions(stackTraceEnabled)\n+                .setConfiguration(context.getConfiguration())\n+                .setCharset(context.getCharset())\n+                .setPattern(pattern)\n+                .setAlwaysWriteExceptions(stackTraceEnabled)\n                 .build();\n         this.emitter = (final StringBuilder stringBuilder, final LogEvent logEvent) ->\n                 patternLayout.serialize(logEvent, stringBuilder);\n\ndiff --git a/src/changelog/.2.x.x/3750_deprecate_withers.xml b/src/changelog/.2.x.x/3750_deprecate_withers.xml\nnew file mode 100644\nindex 00000000000..f7084c2719b\n--- /dev/null\n+++ b/src/changelog/.2.x.x/3750_deprecate_withers.xml\n@@ -0,0 +1,12 @@\n+<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n+<entry xmlns=\""https://logging.apache.org/xml/ns\""\n+       xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""\n+       xsi:schemaLocation=\""\n+           https://logging.apache.org/xml/ns\n+           https://logging.apache.org/xml/ns/log4j-changelog-0.xsd\""\n+       type=\""deprecated\"">\n+  <issue id=\""3750\"" link=\""https://github.com/apache/logging-log4j2/issues/3750\""/>\n+  <description format=\""asciidoc\"">\n+    Deprecated withers in builder classes in favor of setters. This change improves API consistency with 3.x and helps users adapt to the upcoming changes.\n+  </description>\n+</entry>\n"", ""test_patch"": ""diff --git a/log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java b/log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java\nindex 1604f82c2af..6dd7305c07e 100644\n--- a/log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java\n+++ b/log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java\n@@ -239,7 +239,7 @@ void testSetPriorityNull() {\n     void testClassName() {\n         final Category category = Category.getInstance(\""TestCategory\"");\n         final Layout<String> layout =\n-                PatternLayout.newBuilder().withPattern(\""%d %p %C{1.} [%t] %m%n\"").build();\n+                PatternLayout.newBuilder().setPattern(\""%d %p %C{1.} [%t] %m%n\"").build();\n         final ListAppender appender = new ListAppender(\""List2\"", null, layout, false, false);\n         appender.start();\n         category.setAdditivity(false);\n\ndiff --git a/log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java b/log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java\nindex da857121038..f1f93599d8b 100644\n--- a/log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java\n+++ b/log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java\n@@ -477,7 +477,7 @@ void testIsTraceEnabled() {\n     @SuppressWarnings(\""deprecation\"")\n     void testLog() {\n         final PatternLayout layout =\n-                PatternLayout.newBuilder().withPattern(\""%d %C %L %m\"").build();\n+                PatternLayout.newBuilder().setPattern(\""%d %C %L %m\"").build();\n         final ListAppender appender = new ListAppender(\""List\"", null, layout, false, false);\n         appender.start();\n         final Logger root = Logger.getRootLogger();\n\ndiff --git a/log4j-1.2-api/src/test/java/org/apache/log4j/layout/Log4j1SyslogLayoutTest.java b/log4j-1.2-api/src/test/java/org/apache/log4j/layout/Log4j1SyslogLayoutTest.java\nindex b19382edd3a..e684c3a5b94 100644\n--- a/log4j-1.2-api/src/test/java/org/apache/log4j/layout/Log4j1SyslogLayoutTest.java\n+++ b/log4j-1.2-api/src/test/java/org/apache/log4j/layout/Log4j1SyslogLayoutTest.java\n@@ -78,7 +78,7 @@ void testSimpleLayout(\n                 .build();\n         assertEquals(expected, appenderLayout.toSerializable(logEvent));\n         final StringLayout messageLayout =\n-                PatternLayout.newBuilder().withPattern(\""%m\"").build();\n+                PatternLayout.newBuilder().setPattern(\""%m\"").build();\n         appenderLayout = Log4j1SyslogLayout.newBuilder()\n                 .setFacility(facility)\n                 .setHeader(header)\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java\nindex 87b4a5077a9..e5ddab6eafd 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java\n@@ -92,7 +92,7 @@ private void testConsoleStreamManagerDoesNotClose(\n         try {\n             systemSetter.systemSet(psMock);\n             final Layout<String> layout =\n-                    PatternLayout.newBuilder().withAlwaysWriteExceptions(true).build();\n+                    PatternLayout.newBuilder().setAlwaysWriteExceptions(true).build();\n             final ConsoleAppender app = ConsoleAppender.newBuilder()\n                     .setLayout(layout)\n                     .setTarget(targetName)\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderBuilderTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderBuilderTest.java\nindex 718349e1f3c..b4fdfc03478 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderBuilderTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderBuilderTest.java\n@@ -67,7 +67,7 @@ public Level getStatusLevel() {\n             assertNull(appender);\n             assertTrue(counter.getAndSet(0) > 0);\n             appender = FileAppender.newBuilder()\n-                    .withFileName(\""target/FileAppenderBuilderTest.log\"")\n+                    .setFileName(\""target/FileAppenderBuilderTest.log\"")\n                     .build();\n             assertNull(appender);\n             assertTrue(counter.getAndSet(0) > 0);\n@@ -76,7 +76,7 @@ public Level getStatusLevel() {\n             assertTrue(counter.getAndSet(0) > 0);\n             appender = FileAppender.newBuilder()\n                     .setName(\""FILE\"")\n-                    .withFileName(\""target/FileAppenderBuilderTest.log\"")\n+                    .setFileName(\""target/FileAppenderBuilderTest.log\"")\n                     .build();\n             assertNotNull(appender);\n             assertEquals(0, counter.get());\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderPermissionsTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderPermissionsTest.java\nindex 1ebf7cbacf3..6e3118628ff 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderPermissionsTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderPermissionsTest.java\n@@ -70,19 +70,19 @@ void testFilePermissionsAPI(final String filePermissions, final boolean createOn\n         final File file = new File(DIR, \""AppenderTest-\"" + fileIndex + \"".log\"");\n         final Path path = file.toPath();\n         final Layout<String> layout = PatternLayout.newBuilder()\n-                .withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)\n+                .setPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)\n                 .build();\n         // @formatter:off\n         final FileAppender appender = FileAppender.newBuilder()\n-                .withFileName(file.getAbsolutePath())\n+                .setFileName(file.getAbsolutePath())\n                 .setName(\""test\"")\n-                .withImmediateFlush(false)\n+                .setImmediateFlush(false)\n                 .setIgnoreExceptions(false)\n-                .withBufferedIo(false)\n-                .withBufferSize(1)\n+                .setBufferedIo(false)\n+                .setBufferSize(1)\n                 .setLayout(layout)\n-                .withCreateOnDemand(createOnDemand)\n-                .withFilePermissions(filePermissions)\n+                .setCreateOnDemand(createOnDemand)\n+                .setFilePermissions(filePermissions)\n                 .build();\n         // @formatter:on\n         try {\n@@ -130,20 +130,20 @@ void testFileUserGroupAPI(final String filePermissions, final int fileIndex) thr\n         assertNotNull(group);\n \n         final Layout<String> layout = PatternLayout.newBuilder()\n-                .withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)\n+                .setPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)\n                 .build();\n         // @formatter:off\n         final FileAppender appender = FileAppender.newBuilder()\n-                .withFileName(file.getAbsolutePath())\n+                .setFileName(file.getAbsolutePath())\n                 .setName(\""test\"")\n-                .withImmediateFlush(true)\n+                .setImmediateFlush(true)\n                 .setIgnoreExceptions(false)\n-                .withBufferedIo(false)\n-                .withBufferSize(1)\n+                .setBufferedIo(false)\n+                .setBufferSize(1)\n                 .setLayout(layout)\n-                .withFilePermissions(filePermissions)\n-                .withFileOwner(user)\n-                .withFileGroup(group)\n+                .setFilePermissions(filePermissions)\n+                .setFileOwner(user)\n+                .setFileGroup(group)\n                 .build();\n         // @formatter:on\n         try {\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java\nindex 07221c2c811..2867c9a758a 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java\n@@ -77,14 +77,14 @@ void testLazyCreate(final boolean createOnDemand) {\n         final Layout<String> layout = createPatternLayout();\n         // @formatter:off\n         final FileAppender appender = FileAppender.newBuilder()\n-                .withFileName(FILE_NAME)\n+                .setFileName(FILE_NAME)\n                 .setName(\""test\"")\n-                .withImmediateFlush(false)\n+                .setImmediateFlush(false)\n                 .setIgnoreExceptions(false)\n-                .withBufferedIo(false)\n-                .withBufferSize(1)\n+                .setBufferedIo(false)\n+                .setBufferSize(1)\n                 .setLayout(layout)\n-                .withCreateOnDemand(createOnDemand)\n+                .setCreateOnDemand(createOnDemand)\n                 .build();\n         // @formatter:on\n         assertEquals(createOnDemand, appender.getManager().isCreateOnDemand());\n@@ -100,7 +100,7 @@ void testLazyCreate(final boolean createOnDemand) {\n \n     private static PatternLayout createPatternLayout() {\n         return PatternLayout.newBuilder()\n-                .withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)\n+                .setPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)\n                 .build();\n     }\n \n@@ -110,14 +110,14 @@ void testSmallestBufferSize(final boolean createOnDemand) throws Exception {\n         final Layout<String> layout = createPatternLayout();\n         // @formatter:off\n         final FileAppender appender = FileAppender.newBuilder()\n-                .withFileName(FILE_NAME)\n+                .setFileName(FILE_NAME)\n                 .setName(\""test\"")\n-                .withImmediateFlush(false)\n+                .setImmediateFlush(false)\n                 .setIgnoreExceptions(false)\n-                .withBufferedIo(false)\n-                .withBufferSize(1)\n+                .setBufferedIo(false)\n+                .setBufferSize(1)\n                 .setLayout(layout)\n-                .withCreateOnDemand(createOnDemand)\n+                .setCreateOnDemand(createOnDemand)\n                 .build();\n         // @formatter:on\n         try {\n@@ -243,14 +243,14 @@ private static void writer(\n         final Layout<String> layout = createPatternLayout();\n         // @formatter:off\n         final FileAppender appender = FileAppender.newBuilder()\n-                .withFileName(FILE_NAME)\n+                .setFileName(FILE_NAME)\n                 .setName(\""test\"")\n-                .withImmediateFlush(false)\n+                .setImmediateFlush(false)\n                 .setIgnoreExceptions(false)\n-                .withLocking(locking)\n-                .withBufferedIo(false)\n+                .setLocking(locking)\n+                .setBufferedIo(false)\n                 .setLayout(layout)\n-                .withCreateOnDemand(createOnDemand)\n+                .setCreateOnDemand(createOnDemand)\n                 .build();\n         // @formatter:on\n         assertEquals(createOnDemand, appender.getManager().isCreateOnDemand());\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/InMemoryAppenderTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/InMemoryAppenderTest.java\nindex 4bc0c53b765..cad32c266fe 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/InMemoryAppenderTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/InMemoryAppenderTest.java\n@@ -45,7 +45,7 @@ void testAppender() {\n     @Test\n     void testHeaderRequested() {\n         final PatternLayout layout =\n-                PatternLayout.newBuilder().withHeader(\""HEADERHEADER\"").build();\n+                PatternLayout.newBuilder().setHeader(\""HEADERHEADER\"").build();\n         final boolean writeHeader = true;\n         final InMemoryAppender app = new InMemoryAppender(\""test\"", layout, null, false, writeHeader);\n         final String expectedHeader = \""HEADERHEADER\"";\n@@ -55,7 +55,7 @@ void testHeaderRequested() {\n     @Test\n     void testHeaderSuppressed() {\n         final PatternLayout layout =\n-                PatternLayout.newBuilder().withHeader(\""HEADERHEADER\"").build();\n+                PatternLayout.newBuilder().setHeader(\""HEADERHEADER\"").build();\n         final boolean writeHeader = false;\n         final InMemoryAppender app = new InMemoryAppender(\""test\"", layout, null, false, writeHeader);\n         final String expectedHeader = null;\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java\nindex ed09bc11d86..e54d97d6520 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java\n@@ -108,12 +108,12 @@ void testUpdatePatternWithFileAppender() {\n         final Configuration config = ctx.getConfiguration();\n         // @formatter:off\n         final Appender appender = FileAppender.newBuilder()\n-                .withFileName(\""target/\"" + getClass().getName() + \"".log\"")\n-                .withAppend(false)\n+                .setFileName(\""target/\"" + getClass().getName() + \"".log\"")\n+                .setAppend(false)\n                 .setName(\""File\"")\n                 .setIgnoreExceptions(false)\n-                .withBufferedIo(false)\n-                .withBufferSize(4000)\n+                .setBufferedIo(false)\n+                .setBufferSize(4000)\n                 .setConfiguration(config)\n                 .build();\n         // @formatter:on\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ReconfigureAppenderTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ReconfigureAppenderTest.java\nindex 688ac302044..261c2a2f324 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ReconfigureAppenderTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/ReconfigureAppenderTest.java\n@@ -142,19 +142,19 @@ private void createAndAddAppender() {\n         final Logger logger = (Logger) LogManager.getLogger(this.getClass());\n \n         final Builder pattern_builder =\n-                PatternLayout.newBuilder().withPattern(\""[%d{dd-MM-yy HH:mm:ss}] %p %m %throwable %n\"");\n+                PatternLayout.newBuilder().setPattern(\""[%d{dd-MM-yy HH:mm:ss}] %p %m %throwable %n\"");\n \n         final PatternLayout pattern_layout = (PatternLayout) pattern_builder.build();\n \n         appender = RollingFileAppender.newBuilder()\n-                .withLayout(pattern_layout)\n-                .withName(\""rollingfileappender\"")\n-                .withFilePattern(\""target/filepattern.%i.log\"")\n-                .withPolicy(SizeBasedTriggeringPolicy.createPolicy(\""5 MB\""))\n-                .withAppend(true)\n-                .withStrategy(DirectWriteRolloverStrategy.newBuilder()\n-                        .withConfig(logger_context.getConfiguration())\n-                        .withMaxFiles(\""5\"")\n+                .setLayout(pattern_layout)\n+                .setName(\""rollingfileappender\"")\n+                .setFilePattern(\""target/filepattern.%i.log\"")\n+                .setPolicy(SizeBasedTriggeringPolicy.createPolicy(\""5 MB\""))\n+                .setAppend(true)\n+                .setStrategy(DirectWriteRolloverStrategy.newBuilder()\n+                        .setConfig(logger_context.getConfiguration())\n+                        .setMaxFiles(\""5\"")\n                         .build())\n                 .setConfiguration(logger_context.getConfiguration())\n                 .build();\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java\nindex 1b6fc7edd80..65f3ccb910f 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java\n@@ -53,10 +53,10 @@ private void testBuilder() {\n         // @formatter:off\n         final RollingFileAppender raf = RollingFileAppender.newBuilder()\n                 .setName(\""test1\"")\n-                .withFileName(\""target/testcmd1.log\"")\n-                .withFilePattern(\""target/testcmd1.log.%d{yyyy-MM-dd}\"")\n-                .withPolicy(createPolicy())\n-                .withStrategy(createStrategy())\n+                .setFileName(\""target/testcmd1.log\"")\n+                .setFilePattern(\""target/testcmd1.log.%d{yyyy-MM-dd}\"")\n+                .setPolicy(createPolicy())\n+                .setStrategy(createStrategy())\n                 .setConfiguration(configuration)\n                 .build();\n         // @formatter:on\n@@ -89,10 +89,10 @@ void testRollingRandomAccessFileAppender() {\n         // @formatter:off\n         RollingRandomAccessFileAppender.newBuilder()\n                 .setName(\""test2\"")\n-                .withFileName(\""target/testcmd2.log\"")\n-                .withFilePattern(\""target/testcmd2.log.%d{yyyy-MM-dd}\"")\n-                .withPolicy(createPolicy())\n-                .withStrategy(createStrategy())\n+                .setFileName(\""target/testcmd2.log\"")\n+                .setFilePattern(\""target/testcmd2.log.%d{yyyy-MM-dd}\"")\n+                .setPolicy(createPolicy())\n+                .setStrategy(createStrategy())\n                 .setConfiguration(configuration)\n                 .build();\n         // @formatter:on\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java\nindex 74820472375..548cc1e5076 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java\n@@ -83,13 +83,13 @@ void testPolicy() throws Exception {\n         assumeTrue(creationTime.equals(fileTime) || creationTime.toMillis() == 0L);\n \n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPattern(\""%msg\"")\n-                .withConfiguration(configuration)\n+                .setPattern(\""%msg\"")\n+                .setConfiguration(configuration)\n                 .build();\n         final RolloverStrategy strategy = DefaultRolloverStrategy.newBuilder()\n-                .withCompressionLevelStr(\""0\"")\n-                .withStopCustomActionsOnError(true)\n-                .withConfig(configuration)\n+                .setCompressionLevelStr(\""0\"")\n+                .setStopCustomActionsOnError(true)\n+                .setConfig(configuration)\n                 .build();\n         final OnStartupTriggeringPolicy policy = OnStartupTriggeringPolicy.createPolicy(1);\n \n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderDirectWriteWithHtmlLayoutTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderDirectWriteWithHtmlLayoutTest.java\nindex 887bee97e59..82d3c118eef 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderDirectWriteWithHtmlLayoutTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderDirectWriteWithHtmlLayoutTest.java\n@@ -70,13 +70,13 @@ private void checkAppenderWithHtmlLayout(final boolean append) throws Interrupte\n         final Configuration config = loggerContextRule.getConfiguration();\n         final RollingFileAppender appender = RollingFileAppender.newBuilder()\n                 .setName(\""RollingHtml\"")\n-                .withFilePattern(DIR + \""/\"" + prefix + \""_-%d{MM-dd-yy-HH-mm}-%i.html\"")\n-                .withPolicy(new SizeBasedTriggeringPolicy(500))\n-                .withStrategy(DirectWriteRolloverStrategy.newBuilder()\n-                        .withConfig(config)\n+                .setFilePattern(DIR + \""/\"" + prefix + \""_-%d{MM-dd-yy-HH-mm}-%i.html\"")\n+                .setPolicy(new SizeBasedTriggeringPolicy(500))\n+                .setStrategy(DirectWriteRolloverStrategy.newBuilder()\n+                        .setConfig(config)\n                         .build())\n                 .setLayout(HtmlLayout.createDefaultLayout())\n-                .withAppend(append)\n+                .setAppend(append)\n                 .build();\n         boolean stopped = false;\n         try {\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java\nindex dc245af3058..ea1dbc6e988 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java\n@@ -72,11 +72,11 @@ private static RollingFileAppender createRollingFileAppender(\n                 folder.resolve(\""rollingtest-%i.log.\"" + fileExtension).toString();\n         final RollingFileAppender appender = RollingFileAppender.newBuilder()\n                 .setName(\""RollingFile\"")\n-                .withFileName(fileName)\n-                .withFilePattern(filePattern)\n+                .setFileName(fileName)\n+                .setFilePattern(filePattern)\n                 .setLayout(PatternLayout.createDefaultLayout())\n-                .withPolicy(SizeBasedTriggeringPolicy.createPolicy(\""500\""))\n-                .withCreateOnDemand(createOnDemand)\n+                .setPolicy(SizeBasedTriggeringPolicy.createPolicy(\""500\""))\n+                .setCreateOnDemand(createOnDemand)\n                 .build();\n         appender.start();\n         return appender;\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderAccessTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderAccessTest.java\nindex 44a88a7c45f..d2585fdf596 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderAccessTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderAccessTest.java\n@@ -40,10 +40,10 @@ void testAccessManagerWithBuilder() throws IOException {\n             file.deleteOnExit();\n             // @formatter:off\n             final RollingFileAppender appender = RollingFileAppender.newBuilder()\n-                    .withFileName(file.getCanonicalPath())\n-                    .withFilePattern(\""FilePattern\"")\n+                    .setFileName(file.getCanonicalPath())\n+                    .setFilePattern(\""FilePattern\"")\n                     .setName(\""Name\"")\n-                    .withPolicy(OnStartupTriggeringPolicy.createPolicy(1))\n+                    .setPolicy(OnStartupTriggeringPolicy.createPolicy(1))\n                     .setConfiguration(config)\n                     .build();\n             // @formatter:on\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderLayoutTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderLayoutTest.java\nindex 7ac285ee90d..6fa5e23f4ae 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderLayoutTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderLayoutTest.java\n@@ -30,10 +30,10 @@ void testDefaultLayout() {\n         assertNotNull(RollingFileAppender.newBuilder()\n                 .setName(RollingFileAppenderLayoutTest.class.getName())\n                 .setConfiguration(new DefaultConfiguration())\n-                .withFileName(\""log.txt\"")\n-                .withFilePattern(\""FilePattern\"")\n-                .withPolicy(OnStartupTriggeringPolicy.createPolicy(1))\n-                .withCreateOnDemand(true) // no need to clutter up test folder with another file\n+                .setFileName(\""log.txt\"")\n+                .setFilePattern(\""FilePattern\"")\n+                .setPolicy(OnStartupTriggeringPolicy.createPolicy(1))\n+                .setCreateOnDemand(true) // no need to clutter up test folder with another file\n                 .build()\n                 .getLayout());\n         // @formatter:on\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManagerTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManagerTest.java\nindex dfa94c3ffe7..78784cfa755 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManagerTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManagerTest.java\n@@ -82,11 +82,11 @@ public RolloverDescription rollover(final RollingFileManager manager) throws Sec\n             file.deleteOnExit();\n \n             final RollingFileAppender appender = RollingFileAppender.newBuilder()\n-                    .withFilePattern(\""FilePattern\"")\n+                    .setFilePattern(\""FilePattern\"")\n                     .setName(\""RollingFileAppender\"")\n                     .setConfiguration(config)\n-                    .withStrategy(new CustomDirectFileRolloverStrategy(file, config.getConfigurationStrSubstitutor()))\n-                    .withPolicy(new SizeBasedTriggeringPolicy(100))\n+                    .setStrategy(new CustomDirectFileRolloverStrategy(file, config.getConfigurationStrSubstitutor()))\n+                    .setPolicy(new SizeBasedTriggeringPolicy(100))\n                     .build();\n \n             assertNotNull(appender);\n@@ -167,7 +167,7 @@ void testCreateParentDir() {\n                 false,\n                 NoOpTriggeringPolicy.INSTANCE,\n                 DirectWriteRolloverStrategy.newBuilder()\n-                        .withConfig(configuration)\n+                        .setConfig(configuration)\n                         .build(),\n                 null,\n                 PatternLayout.createDefaultLayout(configuration),\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java\nindex e3aba8f2583..5937242be68 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java\n@@ -300,11 +300,11 @@ void testRolloverRetainsFileAttributes() throws Exception {\n \n         // Create the manager.\n         final RolloverStrategy rolloverStrategy = DefaultRolloverStrategy.newBuilder()\n-                .withMax(\""7\"")\n-                .withMin(\""1\"")\n-                .withFileIndex(\""max\"")\n-                .withStopCustomActionsOnError(false)\n-                .withConfig(new DefaultConfiguration())\n+                .setMax(\""7\"")\n+                .setMin(\""1\"")\n+                .setFileIndex(\""max\"")\n+                .setStopCustomActionsOnError(false)\n+                .setConfig(new DefaultConfiguration())\n                 .build();\n         final RollingRandomAccessFileManager manager = RollingRandomAccessFileManager.getRollingRandomAccessFileManager(\n                 file.getAbsolutePath(),\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java\nindex 71cba0ffc8f..ab493c57dd6 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java\n@@ -82,12 +82,12 @@ void testAdditivity(final LoggerContext context) throws Exception {\n     void testIncludeLocationDefaultsToFalse() {\n         final Configuration configuration = new NullConfiguration();\n         final LoggerConfig rootLoggerConfig =\n-                RootLogger.newAsyncRootBuilder().withConfig(configuration).build();\n+                RootLogger.newAsyncRootBuilder().setConfig(configuration).build();\n         assertFalse(rootLoggerConfig.isIncludeLocation(), \""Include location should default to false for async loggers\"");\n \n         final LoggerConfig loggerConfig = AsyncLoggerConfig.newAsyncBuilder()\n-                .withConfig(configuration)\n-                .withLoggerName(\""com.foo.Bar\"")\n+                .setConfig(configuration)\n+                .setLoggerName(\""com.foo.Bar\"")\n                 .build();\n         assertFalse(loggerConfig.isIncludeLocation(), \""Include location should default to false for async loggers\"");\n     }\n@@ -97,9 +97,9 @@ void testSingleFilterInvocation() {\n         final Configuration configuration = new NullConfiguration();\n         final Filter filter = mock(Filter.class);\n         final LoggerConfig config = AsyncLoggerConfig.newAsyncBuilder()\n-                .withLoggerName(FQCN)\n-                .withConfig(configuration)\n-                .withLevel(Level.INFO)\n+                .setLoggerName(FQCN)\n+                .setConfig(configuration)\n+                .setLevel(Level.INFO)\n                 .setFilter(filter)\n                 .build();\n         final Appender appender = mock(Appender.class);\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryConfigTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryConfigTest.java\nindex 7a964e3d2ac..6eec836432d 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryConfigTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/async/AsyncWaitStrategyFactoryConfigTest.java\n@@ -100,7 +100,7 @@ void testInvalidBuilderConfiguration3159(final Configuration configuration) {\n     @Test\n     void testInvalidProgrammaticConfiguration3159WithNullFactoryClassName() {\n         assertThrows(IllegalArgumentException.class, () -> AsyncWaitStrategyFactoryConfig.newBuilder()\n-                .withFactoryClassName(null));\n+                .setFactoryClassName(null));\n     }\n \n     /**\n@@ -110,7 +110,7 @@ void testInvalidProgrammaticConfiguration3159WithNullFactoryClassName() {\n     @Test\n     void testInvalidProgrammaticConfiguration3159WithEmptyFactoryClassName() {\n         assertThrows(IllegalArgumentException.class, () -> AsyncWaitStrategyFactoryConfig.newBuilder()\n-                .withFactoryClassName(\""\""));\n+                .setFactoryClassName(\""\""));\n     }\n \n     @Test\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java\nindex eb7ad4c298e..ac92595deff 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java\n@@ -59,16 +59,16 @@ void testConfig(final LoggerContext ctx) {\n             }\n         }\n         final Layout<? extends Serializable> layout = PatternLayout.newBuilder()\n-                .withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)\n-                .withConfiguration(config)\n+                .setPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)\n+                .setConfiguration(config)\n                 .build();\n         final FileAppender appender = FileAppender.newBuilder()\n                 .setBufferedIo(false)\n                 .setIgnoreExceptions(false)\n                 .setName(\""File\"")\n                 .setLayout(layout)\n-                .withAppend(false)\n-                .withFileName(logFile.toString())\n+                .setAppend(false)\n+                .setFileName(logFile.toString())\n                 .build();\n         appender.start();\n         config.addAppender(appender);\n@@ -76,12 +76,12 @@ void testConfig(final LoggerContext ctx) {\n         final AppenderRef[] refs = new AppenderRef[] {ref};\n \n         final LoggerConfig loggerConfig = LoggerConfig.newBuilder()\n-                .withConfig(config)\n-                .withAdditivity(false)\n-                .withIncludeLocation(\""true\"")\n-                .withLevel(Level.INFO)\n-                .withLoggerName(\""org.apache.logging.log4j\"")\n-                .withRefs(refs)\n+                .setConfig(config)\n+                .setAdditivity(false)\n+                .setIncludeLocation(\""true\"")\n+                .setLevel(Level.INFO)\n+                .setLoggerName(\""org.apache.logging.log4j\"")\n+                .setRefs(refs)\n                 .build();\n         loggerConfig.addAppender(appender, null, null);\n         config.addLogger(\""org.apache.logging.log4j\"", loggerConfig);\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/JiraLog4j2_2134Test.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/JiraLog4j2_2134Test.java\nindex 7f7948c44e8..65021c7d0ab 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/JiraLog4j2_2134Test.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/JiraLog4j2_2134Test.java\n@@ -42,16 +42,16 @@ void testRefresh() {\n         final Configuration config = ctx.getConfiguration();\n         final PatternLayout layout = PatternLayout.newBuilder()\n                 // @formatter:off\n-                .withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)\n-                .withConfiguration(config)\n+                .setPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)\n+                .setConfiguration(config)\n                 .build();\n         final Layout<? extends Serializable> layout1 = layout;\n         // @formatter:on\n         final Appender appender = FileAppender.newBuilder()\n-                .withFileName(\""target/test.log\"")\n+                .setFileName(\""target/test.log\"")\n                 .setLayout(layout1)\n                 .setConfiguration(config)\n-                .withBufferSize(4000)\n+                .setBufferSize(4000)\n                 .setName(\""File\"")\n                 .build();\n         // appender.start();\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/LoggerConfigTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/LoggerConfigTest.java\nindex 2b4b18e33bd..b25ef14a48b 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/LoggerConfigTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/LoggerConfigTest.java\n@@ -48,12 +48,12 @@ class LoggerConfigTest {\n \n     private static LoggerConfig createForProperties(final Property[] properties) {\n         return LoggerConfig.newBuilder()\n-                .withConfig(new NullConfiguration())\n-                .withAdditivity(true)\n-                .withLevel(Level.INFO)\n-                .withLoggerName(\""name\"")\n-                .withIncludeLocation(\""false\"")\n-                .withProperties(properties)\n+                .setConfig(new NullConfiguration())\n+                .setAdditivity(true)\n+                .setLevel(Level.INFO)\n+                .setLoggerName(\""name\"")\n+                .setIncludeLocation(\""false\"")\n+                .setProperties(properties)\n                 .build();\n     }\n \n@@ -109,15 +109,15 @@ void testPropertiesWithSubstitution() {\n     void testLevel() {\n         final Configuration configuration = new DefaultConfiguration();\n         final LoggerConfig config1 = LoggerConfig.newBuilder()\n-                .withLoggerName(\""org.apache.logging.log4j.test\"")\n-                .withLevel(Level.ERROR)\n-                .withAdditivity(false)\n-                .withConfig(configuration)\n+                .setLoggerName(\""org.apache.logging.log4j.test\"")\n+                .setLevel(Level.ERROR)\n+                .setAdditivity(false)\n+                .setConfig(configuration)\n                 .build();\n         final LoggerConfig config2 = LoggerConfig.newBuilder()\n-                .withLoggerName(\""org.apache.logging.log4j\"")\n-                .withAdditivity(false)\n-                .withConfig(configuration)\n+                .setLoggerName(\""org.apache.logging.log4j\"")\n+                .setAdditivity(false)\n+                .setConfig(configuration)\n                 .build();\n         config1.setParent(config2);\n         assertEquals(Level.ERROR, config1.getLevel(), \""Unexpected Level\"");\n@@ -131,9 +131,9 @@ void testSingleFilterInvocation() {\n         final Configuration configuration = new NullConfiguration();\n         final Filter filter = mock(Filter.class);\n         final LoggerConfig config = LoggerConfig.newBuilder()\n-                .withLoggerName(FQCN)\n-                .withConfig(configuration)\n-                .withLevel(Level.INFO)\n+                .setLoggerName(FQCN)\n+                .setConfig(configuration)\n+                .setLevel(Level.INFO)\n                 .setFilter(filter)\n                 .build();\n         final Appender appender = mock(Appender.class);\n@@ -150,9 +150,9 @@ void testSingleFilterInvocation() {\n     void testLevelAndRefsWithoutAppenderRef() {\n         final Configuration configuration = mock(PropertiesConfiguration.class);\n         final LoggerConfig.Builder builder = LoggerConfig.newBuilder()\n-                .withLoggerName(FQCN)\n-                .withConfig(configuration)\n-                .withLevelAndRefs(Level.INFO.name());\n+                .setLoggerName(FQCN)\n+                .setConfig(configuration)\n+                .setLevelAndRefs(Level.INFO.name());\n \n         final LoggerConfig loggerConfig = builder.build();\n \n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/AbstractPluginWithGenericBuilder.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/AbstractPluginWithGenericBuilder.java\nindex a5066145f29..a900fdbfe47 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/AbstractPluginWithGenericBuilder.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/AbstractPluginWithGenericBuilder.java\n@@ -39,7 +39,7 @@ public String getThing() {\n             return thing;\n         }\n \n-        public B withThing(final String name) {\n+        public B setThing(final String name) {\n             this.thing = name;\n             return asBuilder();\n         }\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/PluginWithGenericSubclassFoo1Builder.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/PluginWithGenericSubclassFoo1Builder.java\nindex 7c5201caadd..7e5d284927d 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/PluginWithGenericSubclassFoo1Builder.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/PluginWithGenericSubclassFoo1Builder.java\n@@ -45,7 +45,7 @@ public String getFoo1() {\n             return foo1;\n         }\n \n-        public B withFoo1(final String foo1) {\n+        public B setFoo1(final String foo1) {\n             this.foo1 = foo1;\n             return asBuilder();\n         }\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPlugin.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPlugin.java\nindex 8dd16e2a9fa..0b86b929554 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPlugin.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPlugin.java\n@@ -56,7 +56,7 @@ public static class Builder implements org.apache.logging.log4j.core.util.Builde\n         @Required(message = \""The name given by the builder is null\"")\n         private String name;\n \n-        public Builder withName(final String name) {\n+        public Builder setName(final String name) {\n             this.name = name;\n             return this;\n         }\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPluginWithGenericBuilder.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPluginWithGenericBuilder.java\nindex dddc702abac..baed0712119 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPluginWithGenericBuilder.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPluginWithGenericBuilder.java\n@@ -57,7 +57,7 @@ public static class Builder<B extends Builder<B>>\n         @Required(message = \""The name given by the builder is null\"")\n         private String name;\n \n-        public B withName(final String name) {\n+        public B setName(final String name) {\n             this.name = name;\n             return asBuilder();\n         }\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPluginWithTypedBuilder.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPluginWithTypedBuilder.java\nindex 3ffe7a74462..ed2f3572456 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPluginWithTypedBuilder.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/plugins/validation/ValidatingPluginWithTypedBuilder.java\n@@ -57,7 +57,7 @@ public static class Builder<T>\n         @Required(message = \""The name given by the builder is null\"")\n         private String name;\n \n-        public Builder<T> withName(final String name) {\n+        public Builder<T> setName(final String name) {\n             this.name = name;\n             return this;\n         }\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/HtmlLayoutTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/HtmlLayoutTest.java\nindex 13901d3af08..ee7e81ff9ca 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/HtmlLayoutTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/HtmlLayoutTest.java\n@@ -112,7 +112,7 @@ void testDefaultContentType() {\n     @Test\n     void testContentType() {\n         final HtmlLayout layout = HtmlLayout.newBuilder()\n-                .withContentType(\""text/html; charset=UTF-16\"")\n+                .setContentType(\""text/html; charset=UTF-16\"")\n                 .build();\n         assertEquals(\""text/html; charset=UTF-16\"", layout.getContentType());\n         // TODO: make sure this following bit works as well\n@@ -145,7 +145,7 @@ private void testLayout(final boolean includeLocation) {\n         }\n         // set up appender\n         final HtmlLayout layout =\n-                HtmlLayout.newBuilder().withLocationInfo(includeLocation).build();\n+                HtmlLayout.newBuilder().setLocationInfo(includeLocation).build();\n         final ListAppender appender = new ListAppender(\""List\"", null, layout, true, false);\n         appender.start();\n \n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutDefaultExceptionHandlerTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutDefaultExceptionHandlerTest.java\nindex 05df1bdd730..14b3176a386 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutDefaultExceptionHandlerTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutDefaultExceptionHandlerTest.java\n@@ -65,9 +65,9 @@ void default_exception_handler_should_not_be_provided_if_alwaysWriteExceptions_d\n     private static AbstractStringAssert<?> assertThatPatternEncodes(\n             final String pattern, final boolean alwaysWriteExceptions) {\n         final Layout<String> layout = PatternLayout.newBuilder()\n-                .withConfiguration(CONFIG)\n-                .withPattern(pattern)\n-                .withAlwaysWriteExceptions(alwaysWriteExceptions)\n+                .setConfiguration(CONFIG)\n+                .setPattern(pattern)\n+                .setAlwaysWriteExceptions(alwaysWriteExceptions)\n                 .build();\n         final LogEvent event = Log4jLogEvent.newBuilder().setThrown(EXCEPTION).build();\n         return assertThat(layout.toSerializable(event)).as(\""pattern=`%s`\"", pattern);\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java\nindex ba58e68df40..34d5fb99ff7 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java\n@@ -115,8 +115,8 @@ private void assertEncode(final String expectedStr, final PatternLayout layout,\n     void testEqualsEmptyMarker() {\n         // replace \""[]\"" with the empty string\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPattern(\""[%logger]%equals{[%marker]}{[]}{} %msg\"")\n-                .withConfiguration(ctx.getConfiguration())\n+                .setPattern(\""[%logger]%equals{[%marker]}{[]}{} %msg\"")\n+                .setConfiguration(ctx.getConfiguration())\n                 .build();\n         // Not empty marker\n         final LogEvent event1 = Log4jLogEvent.newBuilder() //\n@@ -146,9 +146,9 @@ void testHeaderFooterJavaLookup() {\n         // % does not work here.\n         final String pattern = \""%d{UNIX} MyApp%n${java:version}%n${java:runtime}%n${java:vm}%n${java:os}%n${java:hw}\"";\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withConfiguration(ctx.getConfiguration())\n-                .withHeader(\""Header: \"" + pattern)\n-                .withFooter(\""Footer: \"" + pattern)\n+                .setConfiguration(ctx.getConfiguration())\n+                .setHeader(\""Header: \"" + pattern)\n+                .setFooter(\""Footer: \"" + pattern)\n                 .build();\n         final byte[] header = layout.getHeader();\n         assertNotNull(header, \""No header\"");\n@@ -178,9 +178,9 @@ void testHeaderFooterJavaLookup() {\n     void testHeaderFooterMainLookup() {\n         MainMapLookup.setMainArguments(\""value0\"", \""value1\"", \""value2\"");\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withConfiguration(ctx.getConfiguration())\n-                .withHeader(\""${main:0}\"")\n-                .withFooter(\""${main:2}\"")\n+                .setConfiguration(ctx.getConfiguration())\n+                .setHeader(\""${main:0}\"")\n+                .setFooter(\""${main:2}\"")\n                 .build();\n         final byte[] header = layout.getHeader();\n         assertNotNull(header, \""No header\"");\n@@ -196,10 +196,10 @@ void testHeaderFooterMainLookup() {\n     @Test\n     void testHeaderFooterThreadContext() {\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPattern(\""%d{UNIX} %m\"")\n-                .withConfiguration(ctx.getConfiguration())\n-                .withHeader(\""${ctx:header}\"")\n-                .withFooter(\""${ctx:footer}\"")\n+                .setPattern(\""%d{UNIX} %m\"")\n+                .setConfiguration(ctx.getConfiguration())\n+                .setHeader(\""${ctx:header}\"")\n+                .setFooter(\""${ctx:footer}\"")\n                 .build();\n         ThreadContext.put(\""header\"", \""Hello world Header\"");\n         ThreadContext.put(\""footer\"", \""Hello world Footer\"");\n@@ -213,8 +213,8 @@ void testHeaderFooterThreadContext() {\n \n     private void testMdcPattern(final String patternStr, final String expectedStr, final boolean useThreadContext) {\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPattern(patternStr)\n-                .withConfiguration(ctx.getConfiguration())\n+                .setPattern(patternStr)\n+                .setConfiguration(ctx.getConfiguration())\n                 .build();\n         if (useThreadContext) {\n             ThreadContext.put(\""key1\"", \""value1\"");\n@@ -267,8 +267,8 @@ void testPatternSelector() {\n         final PatternSelector selector = MarkerPatternSelector.createSelector(\n                 patterns, \""%d %-5p [%t]: %m%n\"", true, true, ctx.getConfiguration());\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPatternSelector(selector)\n-                .withConfiguration(ctx.getConfiguration())\n+                .setPatternSelector(selector)\n+                .setConfiguration(ctx.getConfiguration())\n                 .build();\n         final LogEvent event1 = Log4jLogEvent.newBuilder() //\n                 .setLoggerName(this.getClass().getName())\n@@ -296,8 +296,8 @@ void testPatternSelector() {\n     @Test\n     void testRegex() {\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPattern(regexPattern)\n-                .withConfiguration(ctx.getConfiguration())\n+                .setPattern(regexPattern)\n+                .setConfiguration(ctx.getConfiguration())\n                 .build();\n         final LogEvent event = Log4jLogEvent.newBuilder() //\n                 .setLoggerName(this.getClass().getName())\n@@ -313,8 +313,8 @@ void testRegex() {\n     void testRegexEmptyMarker() {\n         // replace \""[]\"" with the empty string\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPattern(\""[%logger]%replace{[%marker]}{\\\\[\\\\]}{} %msg\"")\n-                .withConfiguration(ctx.getConfiguration())\n+                .setPattern(\""[%logger]%replace{[%marker]}{\\\\[\\\\]}{} %msg\"")\n+                .setConfiguration(ctx.getConfiguration())\n                 .build();\n         // Not empty marker\n         final LogEvent event1 = Log4jLogEvent.newBuilder() //\n@@ -344,8 +344,8 @@ void testRegexEmptyMarker() {\n     void testEqualsMarkerWithMessageSubstitution() {\n         // replace \""[]\"" with the empty string\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPattern(\""[%logger]%equals{[%marker]}{[]}{[%msg]}\"")\n-                .withConfiguration(ctx.getConfiguration())\n+                .setPattern(\""[%logger]%equals{[%marker]}{[]}{[%msg]}\"")\n+                .setConfiguration(ctx.getConfiguration())\n                 .build();\n         // Not empty marker\n         final LogEvent event1 = Log4jLogEvent.newBuilder() //\n@@ -371,8 +371,8 @@ void testEqualsMarkerWithMessageSubstitution() {\n     @Test\n     void testSpecialChars() {\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPattern(\""\\\\\\\\%level\\\\t%msg\\\\n\\\\t%logger\\\\r\\\\n\\\\f\"")\n-                .withConfiguration(ctx.getConfiguration())\n+                .setPattern(\""\\\\\\\\%level\\\\t%msg\\\\n\\\\t%logger\\\\r\\\\n\\\\f\"")\n+                .setConfiguration(ctx.getConfiguration())\n                 .build();\n         final LogEvent event = Log4jLogEvent.newBuilder() //\n                 .setLoggerName(this.getClass().getName())\n@@ -393,8 +393,8 @@ void testSpecialChars() {\n     @Test\n     void testUnixTime() {\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPattern(\""%d{UNIX} %m\"")\n-                .withConfiguration(ctx.getConfiguration())\n+                .setPattern(\""%d{UNIX} %m\"")\n+                .setConfiguration(ctx.getConfiguration())\n                 .build();\n         final LogEvent event1 = Log4jLogEvent.newBuilder() //\n                 .setLoggerName(this.getClass().getName())\n@@ -419,8 +419,8 @@ void testUnixTime() {\n     @SuppressWarnings(\""unused\"")\n     private void testUnixTime(final String pattern) {\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPattern(pattern + \"" %m\"")\n-                .withConfiguration(ctx.getConfiguration())\n+                .setPattern(pattern + \"" %m\"")\n+                .setConfiguration(ctx.getConfiguration())\n                 .build();\n         final LogEvent event1 = Log4jLogEvent.newBuilder() //\n                 .setLoggerName(this.getClass().getName())\n@@ -445,8 +445,8 @@ private void testUnixTime(final String pattern) {\n     @Test\n     void testUnixTimeMillis() {\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPattern(\""%d{UNIX_MILLIS} %m\"")\n-                .withConfiguration(ctx.getConfiguration())\n+                .setPattern(\""%d{UNIX_MILLIS} %m\"")\n+                .setConfiguration(ctx.getConfiguration())\n                 .build();\n         final LogEvent event1 = Log4jLogEvent.newBuilder() //\n                 .setLoggerName(this.getClass().getName())\n@@ -471,8 +471,8 @@ void testUnixTimeMillis() {\n     @Test\n     void testUsePlatformDefaultIfNoCharset() {\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPattern(\""%m\"")\n-                .withConfiguration(ctx.getConfiguration())\n+                .setPattern(\""%m\"")\n+                .setConfiguration(ctx.getConfiguration())\n                 .build();\n         assertEquals(Charset.defaultCharset(), layout.getCharset());\n     }\n@@ -480,9 +480,9 @@ void testUsePlatformDefaultIfNoCharset() {\n     @Test\n     void testUseSpecifiedCharsetIfExists() {\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPattern(\""%m\"")\n-                .withConfiguration(ctx.getConfiguration())\n-                .withCharset(StandardCharsets.UTF_8)\n+                .setPattern(\""%m\"")\n+                .setConfiguration(ctx.getConfiguration())\n+                .setCharset(StandardCharsets.UTF_8)\n                 .build();\n         assertEquals(StandardCharsets.UTF_8, layout.getCharset());\n     }\n@@ -491,8 +491,8 @@ void testUseSpecifiedCharsetIfExists() {\n     void testLoggerNameTruncationByRetainingPartsFromEnd() {\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%c{1} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%c{1} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -509,8 +509,8 @@ void testLoggerNameTruncationByRetainingPartsFromEnd() {\n         }\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%c{2} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%c{2} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -528,8 +528,8 @@ void testLoggerNameTruncationByRetainingPartsFromEnd() {\n         }\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%c{20} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%c{20} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -546,8 +546,8 @@ void testLoggerNameTruncationByRetainingPartsFromEnd() {\n     void testCallersFqcnTruncationByRetainingPartsFromEnd() {\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%C{1} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%C{1} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -569,8 +569,8 @@ void testCallersFqcnTruncationByRetainingPartsFromEnd() {\n         }\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%C{2} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%C{2} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -593,8 +593,8 @@ void testCallersFqcnTruncationByRetainingPartsFromEnd() {\n         }\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%C{20} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%C{20} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -612,8 +612,8 @@ void testCallersFqcnTruncationByRetainingPartsFromEnd() {\n         }\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%class{1} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%class{1} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -639,8 +639,8 @@ void testCallersFqcnTruncationByRetainingPartsFromEnd() {\n     void testLoggerNameTruncationByDroppingPartsFromFront() {\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%c{-1} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%c{-1} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -656,8 +656,8 @@ void testLoggerNameTruncationByDroppingPartsFromFront() {\n         }\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%c{-3} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%c{-3} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -675,8 +675,8 @@ void testLoggerNameTruncationByDroppingPartsFromFront() {\n         }\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%logger{-3} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%logger{-3} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -694,8 +694,8 @@ void testLoggerNameTruncationByDroppingPartsFromFront() {\n         }\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%c{-20} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%c{-20} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -712,8 +712,8 @@ void testLoggerNameTruncationByDroppingPartsFromFront() {\n     void testCallersFqcnTruncationByDroppingPartsFromFront() {\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%C{-1} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%C{-1} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -734,8 +734,8 @@ void testCallersFqcnTruncationByDroppingPartsFromFront() {\n         }\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%C{-3} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%C{-3} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -758,8 +758,8 @@ void testCallersFqcnTruncationByDroppingPartsFromFront() {\n         }\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%class{-3} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%class{-3} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n@@ -782,8 +782,8 @@ void testCallersFqcnTruncationByDroppingPartsFromFront() {\n         }\n         {\n             final PatternLayout layout = PatternLayout.newBuilder()\n-                    .withPattern(\""%C{-20} %m\"")\n-                    .withConfiguration(ctx.getConfiguration())\n+                    .setPattern(\""%C{-20} %m\"")\n+                    .setConfiguration(ctx.getConfiguration())\n                     .build();\n             final LogEvent event1 = Log4jLogEvent.newBuilder()\n                     .setLoggerName(this.getClass().getName())\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternSelectorTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternSelectorTest.java\nindex 0bfb157f835..9712819fc34 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternSelectorTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/layout/PatternSelectorTest.java\n@@ -44,8 +44,8 @@ void testMarkerPatternSelector() {\n         final PatternSelector selector = MarkerPatternSelector.createSelector(\n                 patterns, \""%d %-5p [%t]: %m%n\"", true, true, ctx.getConfiguration());\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPatternSelector(selector)\n-                .withConfiguration(ctx.getConfiguration())\n+                .setPatternSelector(selector)\n+                .setConfiguration(ctx.getConfiguration())\n                 .build();\n         final LogEvent event1 = Log4jLogEvent.newBuilder() //\n                 .setLoggerName(this.getClass().getName())\n@@ -77,8 +77,8 @@ void testLevelPatternSelector() {\n         final PatternSelector selector =\n                 LevelPatternSelector.createSelector(patterns, \""%d %-5p [%t]: %m%n\"", true, true, ctx.getConfiguration());\n         final PatternLayout layout = PatternLayout.newBuilder()\n-                .withPatternSelector(selector)\n-                .withConfiguration(ctx.getConfiguration())\n+                .setPatternSelector(selector)\n+                .setConfiguration(ctx.getConfiguration())\n                 .build();\n         final LogEvent event1 = Log4jLogEvent.newBuilder() //\n                 .setLoggerName(this.getClass().getName())\n\ndiff --git a/log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/ThreadContextBenchmark2.java b/log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/ThreadContextBenchmark2.java\nindex 3c16cae0527..f898dab7b59 100644\n--- a/log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/ThreadContextBenchmark2.java\n+++ b/log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/ThreadContextBenchmark2.java\n@@ -145,8 +145,8 @@ public void setup() {\n             context = (LoggerContext) LogManager.getContext(false);\n             Configuration config = context.getConfiguration();\n             PatternLayout layout = PatternLayout.newBuilder()\n-                    .withConfiguration(config)\n-                    .withPattern(\""%X %m%n\"")\n+                    .setConfiguration(config)\n+                    .setPattern(\""%X %m%n\"")\n                     .build();\n             appender = StringAppender.createAppender(\""String\"", layout, null);\n             appender.start();\n@@ -183,8 +183,8 @@ public void setup() {\n             context = (LoggerContext) LogManager.getContext(false);\n             Configuration config = context.getConfiguration();\n             PatternLayout layout = PatternLayout.newBuilder()\n-                    .withConfiguration(config)\n-                    .withPattern(\""%X %m%n\"")\n+                    .setConfiguration(config)\n+                    .setPattern(\""%X %m%n\"")\n                     .build();\n             appender = StringAppender.createAppender(\""String\"", layout, null);\n             appender.start();\n\ndiff --git a/log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/instant/InstantPatternFormatterImpactBenchmark.java b/log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/instant/InstantPatternFormatterImpactBenchmark.java\nindex 292d1f041a9..ce93495befa 100644\n--- a/log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/instant/InstantPatternFormatterImpactBenchmark.java\n+++ b/log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/jmh/instant/InstantPatternFormatterImpactBenchmark.java\n@@ -61,10 +61,10 @@ private static List<LogEvent> createLogEvents(final BiFunction<Integer, Integer,\n     }\n \n     private static final PatternLayout LAYOUT = PatternLayout.newBuilder()\n-            .withConfiguration(new NullConfiguration())\n+            .setConfiguration(new NullConfiguration())\n             // Use a typical pattern *without* a date & time converter!\n-            .withPattern(\""[%t] %p %-40.40c{1.} %notEmpty{%x }- %m%n\"")\n-            .withAlwaysWriteExceptions(true)\n+            .setPattern(\""[%t] %p %-40.40c{1.} %notEmpty{%x }- %m%n\"")\n+            .setAlwaysWriteExceptions(true)\n             .build();\n \n     private static final InstantPatternFormatterBenchmark.Formatters FORMATTERS =\n\ndiff --git a/log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/nogc/ClassicLogger.java b/log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/nogc/ClassicLogger.java\nindex 8d797c93613..ae606ec02d5 100644\n--- a/log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/nogc/ClassicLogger.java\n+++ b/log4j-perf-test/src/main/java/org/apache/logging/log4j/perf/nogc/ClassicLogger.java\n@@ -29,8 +29,8 @@ public class ClassicLogger extends AbstractLogger {\n     @Override\n     protected StringLayout createLayout() {\n         return PatternLayout.newBuilder()\n-                .withCharset(StandardCharsets.UTF_8)\n-                .withPattern(\""%m\"")\n+                .setCharset(StandardCharsets.UTF_8)\n+                .setPattern(\""%m\"")\n                 .build();\n     }\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__logging-log4j2-3691"", ""pr_id"": 3691, ""issue_id"": 3176, ""repo"": ""apache/logging-log4j2"", ""problem_statement"": ""Validate scripts in global `<Scripts>` container\nThe [`ScriptsPlugin`](https://github.com/apache/logging-log4j2/blob/2.x/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ScriptsPlugin.java) should perform a validation of the script nested configuration elements and:\r\n\r\n- Remove the scripts that do not have a name.\r\n- Issue a status logger warning, when this condition occurs.\r\n"", ""issue_word_count"": 59, ""test_files_count"": 2, ""non_test_files_count"": 14, ""pr_changed_files"": [""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/ScriptsPluginTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/script/AbstractScriptTest.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ScriptCondition.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/config/ScriptsPlugin.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/config/arbiters/ScriptArbiter.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ScriptFilter.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/layout/ScriptPatternSelector.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/script/AbstractScript.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptFile.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptManager.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptRef.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/script/package-info.java"", ""src/changelog/.2.x.x/3176_validate_scripts_in_ScriptsPlugin.xml""], ""pr_changed_test_files"": [""log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/ScriptsPluginTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/script/AbstractScriptTest.java""], ""base_commit"": ""138404a4fd61df72cb53c40b85a16d007279229d"", ""head_commit"": ""8ac8aa299a44f13489c6c045d7d249cf6f917831"", ""repo_url"": ""https://github.com/apache/logging-log4j2/pull/3691"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__logging-log4j2/3691"", ""dockerfile"": """", ""pr_merged_at"": ""2025-06-20T08:57:47.000Z"", ""patch"": ""diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java\nindex 200fa47ec7c..efbd93e433d 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java\n@@ -94,9 +94,9 @@ public Appender build() {\n                     \""ScriptAppenderSelector '{}' executing {} '{}': {}\"",\n                     name,\n                     script.getLanguage(),\n-                    script.getName(),\n+                    script.getId(),\n                     script.getScriptText());\n-            final Object object = scriptManager.execute(script.getName(), bindings);\n+            final Object object = scriptManager.execute(script.getId(), bindings);\n             final String actualAppenderName = Objects.toString(object, null);\n             LOGGER.debug(\""ScriptAppenderSelector '{}' selected '{}'\"", name, actualAppenderName);\n             return appenderSet.createAppender(actualAppenderName, name);\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ScriptCondition.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ScriptCondition.java\nindex 3519980c2ad..b87eff7ccc3 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ScriptCondition.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ScriptCondition.java\n@@ -73,7 +73,7 @@ public List<PathWithAttributes> selectFilesToDelete(\n         bindings.put(\""configuration\"", configuration);\n         bindings.put(\""substitutor\"", configuration.getStrSubstitutor());\n         bindings.put(\""statusLogger\"", LOGGER);\n-        final Object object = configuration.getScriptManager().execute(script.getName(), bindings);\n+        final Object object = configuration.getScriptManager().execute(script.getId(), bindings);\n         return (List<PathWithAttributes>) object;\n     }\n \n@@ -110,8 +110,8 @@ public static ScriptCondition createCondition(\n             return null;\n         }\n         if (script instanceof ScriptRef) {\n-            if (configuration.getScriptManager().getScript(script.getName()) == null) {\n-                LOGGER.error(\""ScriptCondition: No script with name {} has been declared.\"", script.getName());\n+            if (configuration.getScriptManager().getScript(script.getId()) == null) {\n+                LOGGER.error(\""ScriptCondition: No script with name {} has been declared.\"", script.getId());\n                 return null;\n             }\n         } else {\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java\nindex cb5a452ef27..9ca37c15cb4 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/Routes.java\n@@ -180,7 +180,7 @@ public String getPattern(final LogEvent event, final ConcurrentMap<Object, Objec\n             final Bindings bindings = scriptManager.createBindings(patternScript);\n             bindings.put(STATIC_VARIABLES_KEY, scriptStaticVariables);\n             bindings.put(LOG_EVENT_KEY, event);\n-            final Object object = scriptManager.execute(patternScript.getName(), bindings);\n+            final Object object = scriptManager.execute(patternScript.getId(), bindings);\n             bindings.remove(LOG_EVENT_KEY);\n             return Objects.toString(object, null);\n         }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java\nindex 14aadb1afb6..d3d0a3c5bc7 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java\n@@ -202,7 +202,7 @@ public void start() {\n                 final ScriptManager scriptManager = configuration.getScriptManager();\n                 final Bindings bindings = scriptManager.createBindings(defaultRouteScript);\n                 bindings.put(STATIC_VARIABLES_KEY, scriptStaticVariables);\n-                final Object object = scriptManager.execute(defaultRouteScript.getName(), bindings);\n+                final Object object = scriptManager.execute(defaultRouteScript.getId(), bindings);\n                 final Route route = routes.getRoute(Objects.toString(object, null));\n                 if (route != null) {\n                     defaultRoute = route;\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ScriptsPlugin.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ScriptsPlugin.java\nindex 055081d1d88..4ad19b6fb0a 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ScriptsPlugin.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ScriptsPlugin.java\n@@ -16,15 +16,21 @@\n  */\n package org.apache.logging.log4j.core.config;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n import org.apache.logging.log4j.core.Core;\n import org.apache.logging.log4j.core.config.plugins.Plugin;\n import org.apache.logging.log4j.core.config.plugins.PluginElement;\n import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n import org.apache.logging.log4j.core.script.AbstractScript;\n+import org.apache.logging.log4j.util.Strings;\n+import org.jspecify.annotations.NullMarked;\n \n /**\n  * A  container of Scripts.\n  */\n+@NullMarked\n @Plugin(name = \""Scripts\"", category = Core.CATEGORY_NAME)\n public final class ScriptsPlugin {\n \n@@ -37,7 +43,19 @@ private ScriptsPlugin() {}\n      */\n     @PluginFactory\n     public static AbstractScript[] createScripts(@PluginElement(\""Scripts\"") final AbstractScript[] scripts) {\n+        Objects.requireNonNull(scripts, \""Scripts array cannot be null\"");\n+        if (scripts.length == 0) {\n+            return scripts;\n+        }\n \n-        return scripts;\n+        final List<AbstractScript> validScripts = new ArrayList<>(scripts.length);\n+        for (final AbstractScript script : scripts) {\n+            if (Strings.isBlank(script.getName())) {\n+                throw new ConfigurationException(\""A script defined in <Scripts> lacks an explicit 'name' attribute\"");\n+            } else {\n+                validScripts.add(script);\n+            }\n+        }\n+        return validScripts.toArray(new AbstractScript[0]);\n     }\n }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/arbiters/ScriptArbiter.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/arbiters/ScriptArbiter.java\nindex d4c96da171b..042b36a8146 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/arbiters/ScriptArbiter.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/arbiters/ScriptArbiter.java\n@@ -57,7 +57,7 @@ public boolean isCondition() {\n         final SimpleBindings bindings = new SimpleBindings();\n         bindings.putAll(configuration.getProperties());\n         bindings.put(\""substitutor\"", configuration.getStrSubstitutor());\n-        final Object object = configuration.getScriptManager().execute(script.getName(), bindings);\n+        final Object object = configuration.getScriptManager().execute(script.getId(), bindings);\n         return Boolean.parseBoolean(object.toString());\n     }\n \n@@ -114,8 +114,8 @@ public ScriptArbiter build() {\n                 return null;\n             }\n             if (script instanceof ScriptRef) {\n-                if (configuration.getScriptManager().getScript(script.getName()) == null) {\n-                    LOGGER.error(\""No script with name {} has been declared.\"", script.getName());\n+                if (configuration.getScriptManager().getScript(script.getId()) == null) {\n+                    LOGGER.error(\""No script with name {} has been declared.\"", script.getId());\n                     return null;\n                 }\n             } else {\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ScriptFilter.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ScriptFilter.java\nindex 066dc7aa137..cec83951e39 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ScriptFilter.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ScriptFilter.java\n@@ -69,7 +69,7 @@ public Result filter(\n         bindings.put(\""throwable\"", null);\n         bindings.putAll(configuration.getProperties());\n         bindings.put(\""substitutor\"", configuration.getStrSubstitutor());\n-        final Object object = configuration.getScriptManager().execute(script.getName(), bindings);\n+        final Object object = configuration.getScriptManager().execute(script.getId(), bindings);\n         return object == null || !Boolean.TRUE.equals(object) ? onMismatch : onMatch;\n     }\n \n@@ -85,7 +85,7 @@ public Result filter(\n         bindings.put(\""throwable\"", t);\n         bindings.putAll(configuration.getProperties());\n         bindings.put(\""substitutor\"", configuration.getStrSubstitutor());\n-        final Object object = configuration.getScriptManager().execute(script.getName(), bindings);\n+        final Object object = configuration.getScriptManager().execute(script.getId(), bindings);\n         return object == null || !Boolean.TRUE.equals(object) ? onMismatch : onMatch;\n     }\n \n@@ -101,7 +101,7 @@ public Result filter(\n         bindings.put(\""throwable\"", t);\n         bindings.putAll(configuration.getProperties());\n         bindings.put(\""substitutor\"", configuration.getStrSubstitutor());\n-        final Object object = configuration.getScriptManager().execute(script.getName(), bindings);\n+        final Object object = configuration.getScriptManager().execute(script.getId(), bindings);\n         return object == null || !Boolean.TRUE.equals(object) ? onMismatch : onMatch;\n     }\n \n@@ -111,13 +111,13 @@ public Result filter(final LogEvent event) {\n         bindings.put(\""logEvent\"", event);\n         bindings.putAll(configuration.getProperties());\n         bindings.put(\""substitutor\"", configuration.getStrSubstitutor());\n-        final Object object = configuration.getScriptManager().execute(script.getName(), bindings);\n+        final Object object = configuration.getScriptManager().execute(script.getId(), bindings);\n         return object == null || !Boolean.TRUE.equals(object) ? onMismatch : onMatch;\n     }\n \n     @Override\n     public String toString() {\n-        return script.getName();\n+        return script.getId();\n     }\n \n     /**\n@@ -146,8 +146,8 @@ public static ScriptFilter createFilter(\n             return null;\n         }\n         if (script instanceof ScriptRef) {\n-            if (configuration.getScriptManager().getScript(script.getName()) == null) {\n-                logger.error(\""No script with name {} has been declared.\"", script.getName());\n+            if (configuration.getScriptManager().getScript(script.getId()) == null) {\n+                logger.error(\""No script with name {} has been declared.\"", script.getId());\n                 return null;\n             }\n         } else {\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/ScriptPatternSelector.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/ScriptPatternSelector.java\nindex 92648e24d4b..f1e4d240f31 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/ScriptPatternSelector.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/ScriptPatternSelector.java\n@@ -89,8 +89,8 @@ public ScriptPatternSelector build() {\n                 return null;\n             }\n             if (script instanceof ScriptRef) {\n-                if (configuration.getScriptManager().getScript(script.getName()) == null) {\n-                    LOGGER.error(\""No script with name {} has been declared.\"", script.getName());\n+                if (configuration.getScriptManager().getScript(script.getId()) == null) {\n+                    LOGGER.error(\""No script with name {} has been declared.\"", script.getId());\n                     return null;\n                 }\n             } else {\n@@ -262,7 +262,7 @@ public PatternFormatter[] getFormatters(final LogEvent event) {\n         bindings.putAll(configuration.getProperties());\n         bindings.put(\""substitutor\"", configuration.getStrSubstitutor());\n         bindings.put(\""logEvent\"", event);\n-        final Object object = configuration.getScriptManager().execute(script.getName(), bindings);\n+        final Object object = configuration.getScriptManager().execute(script.getId(), bindings);\n         if (object == null) {\n             return defaultFormatters;\n         }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/script/AbstractScript.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/script/AbstractScript.java\nindex d43ab2a452a..1242d59ac3d 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/script/AbstractScript.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/script/AbstractScript.java\n@@ -16,8 +16,10 @@\n  */\n package org.apache.logging.log4j.core.script;\n \n+import java.util.Objects;\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.status.StatusLogger;\n+import org.apache.logging.log4j.util.Strings;\n \n /**\n  * Container for the language and body of a script.\n@@ -30,11 +32,13 @@ public abstract class AbstractScript {\n     private final String language;\n     private final String scriptText;\n     private final String name;\n+    private final String id;\n \n     public AbstractScript(final String name, final String language, final String scriptText) {\n         this.language = language;\n         this.scriptText = scriptText;\n-        this.name = name == null ? this.toString() : name;\n+        this.name = name;\n+        this.id = Strings.isBlank(name) ? Integer.toHexString(Objects.hashCode(this)) : name;\n     }\n \n     public String getLanguage() {\n@@ -48,4 +52,8 @@ public String getScriptText() {\n     public String getName() {\n         return this.name;\n     }\n+\n+    public String getId() {\n+        return this.id;\n+    }\n }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptFile.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptFile.java\nindex 5ff0b27d34e..8f55ab48cba 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptFile.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptFile.java\n@@ -123,8 +123,8 @@ public static ScriptFile createScript(\n     @Override\n     public String toString() {\n         final StringBuilder sb = new StringBuilder();\n-        if (!(getName().equals(filePath.toString()))) {\n-            sb.append(\""name=\"").append(getName()).append(\"", \"");\n+        if (!(getId().equals(filePath.toString()))) {\n+            sb.append(\""name=\"").append(getId()).append(\"", \"");\n         }\n         sb.append(\""path=\"").append(filePath);\n         if (getLanguage() != null) {\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptManager.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptManager.java\nindex 5d87f925ae7..1409800bea0 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptManager.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptManager.java\n@@ -147,9 +147,9 @@ public boolean addScript(final AbstractScript script) {\n                 return false;\n             }\n             if (engine.getFactory().getParameter(KEY_THREADING) == null) {\n-                scriptRunners.put(script.getName(), new ThreadLocalScriptRunner(script));\n+                scriptRunners.put(script.getId(), new ThreadLocalScriptRunner(script));\n             } else {\n-                scriptRunners.put(script.getName(), new MainScriptRunner(engine, script));\n+                scriptRunners.put(script.getId(), new MainScriptRunner(engine, script));\n             }\n \n             if (script instanceof ScriptFile) {\n@@ -162,7 +162,7 @@ public boolean addScript(final AbstractScript script) {\n         } else {\n             logger.error(\n                     \""Unable to add script {}, {} has not been configured as an allowed language\"",\n-                    script.getName(),\n+                    script.getId(),\n                     script.getLanguage());\n             return false;\n         }\n@@ -173,8 +173,8 @@ public Bindings createBindings(final AbstractScript script) {\n         return getScriptRunner(script).createBindings();\n     }\n \n-    public AbstractScript getScript(final String name) {\n-        final ScriptRunner runner = scriptRunners.get(name);\n+    public AbstractScript getScript(final String id) {\n+        final ScriptRunner runner = scriptRunners.get(id);\n         return runner != null ? runner.getScript() : null;\n     }\n \n@@ -188,16 +188,16 @@ public void fileModified(final File file) {\n         final ScriptEngine engine = runner.getScriptEngine();\n         final AbstractScript script = runner.getScript();\n         if (engine.getFactory().getParameter(KEY_THREADING) == null) {\n-            scriptRunners.put(script.getName(), new ThreadLocalScriptRunner(script));\n+            scriptRunners.put(script.getId(), new ThreadLocalScriptRunner(script));\n         } else {\n-            scriptRunners.put(script.getName(), new MainScriptRunner(engine, script));\n+            scriptRunners.put(script.getId(), new MainScriptRunner(engine, script));\n         }\n     }\n \n-    public Object execute(final String name, final Bindings bindings) {\n-        final ScriptRunner scriptRunner = scriptRunners.get(name);\n+    public Object execute(final String id, final Bindings bindings) {\n+        final ScriptRunner scriptRunner = scriptRunners.get(id);\n         if (scriptRunner == null) {\n-            logger.warn(\""No script named {} could be found\"", name);\n+            logger.warn(\""No script named {} could be found\"", id);\n             return null;\n         }\n         return AccessController.doPrivileged((PrivilegedAction<Object>) () -> scriptRunner.execute(bindings));\n@@ -224,7 +224,7 @@ public MainScriptRunner(final ScriptEngine scriptEngine, final AbstractScript sc\n             this.scriptEngine = scriptEngine;\n             CompiledScript compiled = null;\n             if (scriptEngine instanceof Compilable) {\n-                logger.debug(\""Script {} is compilable\"", script.getName());\n+                logger.debug(\""Script {} is compilable\"", script.getId());\n                 compiled = AccessController.doPrivileged((PrivilegedAction<CompiledScript>) () -> {\n                     try {\n                         return ((Compilable) scriptEngine).compile(script.getScriptText());\n@@ -252,14 +252,14 @@ public Object execute(final Bindings bindings) {\n                 try {\n                     return compiledScript.eval(bindings);\n                 } catch (final ScriptException ex) {\n-                    logger.error(\""Error running script \"" + script.getName(), ex);\n+                    logger.error(\""Error running script \"" + script.getId(), ex);\n                     return null;\n                 }\n             }\n             try {\n                 return scriptEngine.eval(script.getScriptText(), bindings);\n             } catch (final ScriptException ex) {\n-                logger.error(\""Error running script \"" + script.getName(), ex);\n+                logger.error(\""Error running script \"" + script.getId(), ex);\n                 return null;\n             }\n         }\n@@ -302,6 +302,6 @@ public ScriptEngine getScriptEngine() {\n     }\n \n     private ScriptRunner getScriptRunner(final AbstractScript script) {\n-        return scriptRunners.get(script.getName());\n+        return scriptRunners.get(script.getId());\n     }\n }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptRef.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptRef.java\nindex a809f25e9d7..d9bb3df31ae 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptRef.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/script/ScriptRef.java\n@@ -38,13 +38,13 @@ public ScriptRef(final String name, final ScriptManager scriptManager) {\n \n     @Override\n     public String getLanguage() {\n-        final AbstractScript script = this.scriptManager.getScript(getName());\n+        final AbstractScript script = this.scriptManager.getScript(getId());\n         return script != null ? script.getLanguage() : null;\n     }\n \n     @Override\n     public String getScriptText() {\n-        final AbstractScript script = this.scriptManager.getScript(getName());\n+        final AbstractScript script = this.scriptManager.getScript(getId());\n         return script != null ? script.getScriptText() : null;\n     }\n \n@@ -62,6 +62,6 @@ public static ScriptRef createReference(\n \n     @Override\n     public String toString() {\n-        return \""ref=\"" + getName();\n+        return \""ref=\"" + getId();\n     }\n }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/script/package-info.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/script/package-info.java\nindex d973435b64c..1374fe6673b 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/script/package-info.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/script/package-info.java\n@@ -18,7 +18,7 @@\n  * Log4j 2 Script support.\n  */\n @Export\n-@Version(\""2.20.2\"")\n+@Version(\""2.26.0\"")\n package org.apache.logging.log4j.core.script;\n \n import org.osgi.annotation.bundle.Export;\n\ndiff --git a/src/changelog/.2.x.x/3176_validate_scripts_in_ScriptsPlugin.xml b/src/changelog/.2.x.x/3176_validate_scripts_in_ScriptsPlugin.xml\nnew file mode 100644\nindex 00000000000..0246396937d\n--- /dev/null\n+++ b/src/changelog/.2.x.x/3176_validate_scripts_in_ScriptsPlugin.xml\n@@ -0,0 +1,13 @@\n+<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n+<entry xmlns=\""https://logging.apache.org/xml/ns\""\n+       xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""\n+       xsi:schemaLocation=\""\n+           https://logging.apache.org/xml/ns\n+           https://logging.apache.org/xml/ns/log4j-changelog-0.xsd\""\n+       type=\""changed\"">\n+    <issue id=\""3176\"" link=\""https://github.com/apache/logging-log4j2/issues/3176\""/>\n+    <description format=\""asciidoc\"">\n+      Ensured scripts in global `Scripts container` have explicit names by throwing a `ConfigurationException` for unnamed ones.\n+      Refined script identification with `AbstractScript.getId()` and clarified `AbstractScript.getName()`.\n+    </description>\n+</entry>\n"", ""test_patch"": ""diff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/ScriptsPluginTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/ScriptsPluginTest.java\nnew file mode 100644\nindex 00000000000..0ea1acd6ef7\n--- /dev/null\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/config/ScriptsPluginTest.java\n@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.logging.log4j.core.config;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import org.apache.logging.log4j.core.script.AbstractScript;\n+import org.junit.jupiter.api.Test;\n+\n+class ScriptsPluginTest {\n+\n+    @Test\n+    void testCreateScriptsNullInput() {\n+        assertThrows(NullPointerException.class, () -> ScriptsPlugin.createScripts(null));\n+    }\n+\n+    @Test\n+    void testCreateScriptsEmptyInput() {\n+        AbstractScript[] emptyArray = new AbstractScript[0];\n+        assertSame(emptyArray, ScriptsPlugin.createScripts(emptyArray), \""Should return empty array\"");\n+    }\n+\n+    @Test\n+    void testCreateScriptsAllExplicitNames() {\n+        AbstractScript script1 = new MockScript(\""script1\"", \""JavaScript\"", \""text\"");\n+        AbstractScript script2 = new MockScript(\""script2\"", \""Groovy\"", \""text\"");\n+        AbstractScript[] input = {script1, script2};\n+        AbstractScript[] result = ScriptsPlugin.createScripts(input);\n+        assertEquals(2, result.length, \""Should return 2 scripts\"");\n+        assertArrayEquals(input, result, \""Should contain all valid scripts\"");\n+    }\n+\n+    @Test\n+    void testCreateScriptsImplicitName() {\n+        AbstractScript script = new MockScript(null, \""JavaScript\"", \""text\"");\n+        AbstractScript[] input = {script};\n+        assertThrows(ConfigurationException.class, () -> ScriptsPlugin.createScripts(input));\n+    }\n+\n+    @Test\n+    void testCreateScriptsBlankName() {\n+        AbstractScript script = new MockScript(\""  \"", \""JavaScript\"", \""text\"");\n+        AbstractScript[] input = {script};\n+        assertThrows(ConfigurationException.class, () -> ScriptsPlugin.createScripts(input));\n+    }\n+\n+    @Test\n+    void testCreateScriptsMixedExplicitAndImplicitNames() {\n+        AbstractScript explicitScript = new MockScript(\""script\"", \""Python\"", \""text\"");\n+        AbstractScript implicitScript = new MockScript(null, \""JavaScript\"", \""text\"");\n+        AbstractScript[] input = {explicitScript, implicitScript};\n+        assertThrows(ConfigurationException.class, () -> ScriptsPlugin.createScripts(input));\n+    }\n+\n+    private class MockScript extends AbstractScript {\n+\n+        public MockScript(String name, String language, String scriptText) {\n+            super(name, language, scriptText);\n+        }\n+    }\n+}\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/script/AbstractScriptTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/script/AbstractScriptTest.java\nnew file mode 100644\nindex 00000000000..d4cbef56064\n--- /dev/null\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/script/AbstractScriptTest.java\n@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.logging.log4j.core.script;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class AbstractScriptTest {\n+\n+    @Test\n+    void testConstructorAndGettersWithExplicitName() {\n+        final String lang = \""JavaScript\"";\n+        final String text = \""text\"";\n+        final String name = \""script\"";\n+        final AbstractScript script = new MockScript(name, lang, text);\n+\n+        assertEquals(lang, script.getLanguage(), \""Language should match\"");\n+        assertEquals(text, script.getScriptText(), \""Script text should match\"");\n+        assertEquals(name, script.getName(), \""Name should match the provided name\"");\n+        assertEquals(name, script.getId(), \""Id should match the provided name\"");\n+    }\n+\n+    @Test\n+    void testConstructorAndGettersWithImplicitName() {\n+        final String lang = \""JavaScript\"";\n+        final String text = \""text\"";\n+        final AbstractScript script = new MockScript(null, lang, text);\n+\n+        assertEquals(lang, script.getLanguage(), \""Language should match\"");\n+        assertEquals(text, script.getScriptText(), \""Script text should match\"");\n+        assertNull(script.getName(), \""Name should be null\"");\n+        assertNotNull(script.getId(), \""Id should not be null\"");\n+    }\n+\n+    @Test\n+    void testConstructorAndGettersWithBlankName() {\n+        final String lang = \""JavaScript\"";\n+        final String text = \""text\"";\n+        final String name = \""  \"";\n+        final AbstractScript script = new MockScript(name, lang, text);\n+\n+        assertEquals(lang, script.getLanguage(), \""Language should match\"");\n+        assertEquals(text, script.getScriptText(), \""Script text should match\"");\n+        assertEquals(name, script.getName(), \""Name should be blank\"");\n+        assertNotNull(script.getId(), \""Id should not be null\"");\n+    }\n+\n+    private class MockScript extends AbstractScript {\n+\n+        public MockScript(String name, String language, String scriptText) {\n+            super(name, language, scriptText);\n+        }\n+    }\n+}\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__logging-log4j2-3263"", ""pr_id"": 3263, ""issue_id"": 3252, ""repo"": ""apache/logging-log4j2"", ""problem_statement"": ""apparent deadlock in InternalLoggerRegistry.getLogger()\n## Description\r\n\r\nSpringBoot 3.x application experiences deadlock/hang at startup with ActiveMQ Artemis and log4j2.\r\n\r\nDeadlock occurs if SpringBoot `backend-preinit` is enabled (the default); if disabled, it causes a stackoverflow instead.  Both stacktraces are attached.\r\n\r\nBest guess from our team is that it may relate to [weak references](https://github.com/apache/logging-log4j2/blob/2.x/log4j-core/src/main/java/org/apache/logging/log4j/core/util/internal/InternalLoggerRegistry.java) in `InternalLoggerRegistry` and `LoggerContext` [use of](https://github.com/apache/logging-log4j2/blob/2.x/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java#L531) `computeIfAbsent()`.  The speculation is that if a registered logger is released as a weak reference during initialization, then it may be repeatedly initialized - causing aconcurrency/deadlock issue.\r\n\r\n## Configuration\r\n\r\n**Version:** 2.24.2\r\n\r\n**Operating system:** Windows 10 (observed on Alma Linux as well)\r\n\r\n**JDK:** Eclipse Temurin 17.0.8.1\r\n\r\n## Logs\r\n\r\nwith `backend-preinit` enabled:\r\n```\r\nJava stack information for the threads listed above:\r\n===================================================\r\n\""main\"":\r\n        at jdk.internal.misc.Unsafe.park(java.base@17.0.8.1/Native Method)\r\n        - parking to wait for  <0x0000000613400050> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync)\r\n        at java.util.concurrent.locks.LockSupport.park(java.base@17.0.8.1/LockSupport.java:211)\r\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(java.base@17.0.8.1/AbstractQueuedSynchronizer.java:715)\r\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(java.base@17.0.8.1/AbstractQueuedSynchronizer.java:1027)\r\n        at java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock(java.base@17.0.8.1/ReentrantReadWriteLock.java:738)\r\n        at org.apache.logging.log4j.core.util.internal.InternalLoggerRegistry.getLogger(InternalLoggerRegistry.java:69)\r\n        at org.apache.logging.log4j.core.util.internal.InternalLoggerRegistry.computeIfAbsent(InternalLoggerRegistry.java:139)\r\n        at org.apache.logging.log4j.core.LoggerContext.getLogger(LoggerContext.java:530)\r\n        at org.apache.logging.log4j.core.LoggerContext.getLogger(LoggerContext.java:503)\r\n        at org.apache.logging.log4j.core.LoggerContext.getLogger(LoggerContext.java:65)\r\n        at org.apache.commons.logging.LogAdapter$Log4jLog.<init>(LogAdapter.java:159)\r\n        at org.apache.commons.logging.LogAdapter$Log4jAdapter.createLog(LogAdapter.java:113)\r\n        at org.apache.commons.logging.LogAdapter$$Lambda$118/0x0000019da7117580.apply(Unknown Source)\r\n        at org.apache.commons.logging.LogAdapter.createLog(LogAdapter.java:95)\r\n        at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:67)\r\n        at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:59)\r\n        at org.apache.commons.beanutils.MethodUtils.getMatchingAccessibleMethod(MethodUtils.java:942)\r\n        at org.apache.commons.beanutils.MappedPropertyDescriptor.getMethod(MappedPropertyDescriptor.java:404)\r\n        at org.apache.commons.beanutils.MappedPropertyDescriptor.<init>(MappedPropertyDescriptor.java:104)\r\n        at org.apache.commons.beanutils.PropertyUtilsBean.getPropertyDescriptor(PropertyUtilsBean.java:972)\r\n        at org.apache.commons.beanutils.BeanUtilsBean.setProperty(BeanUtilsBean.java:935)\r\n        at org.apache.activemq.artemis.utils.uri.BeanSupport.setData(BeanSupport.java:89)\r\n        - locked <0x0000000613428b20> (a org.apache.commons.beanutils.BeanUtilsBean)\r\n        at org.apache.activemq.artemis.uri.AbstractCFSchema.newConectionOptions(AbstractCFSchema.java:36)\r\n        at org.apache.activemq.artemis.uri.TCPSchema.internalNewObject(TCPSchema.java:50)\r\n        at org.apache.activemq.artemis.uri.TCPSchema.internalNewObject(TCPSchema.java:37)\r\n        at org.apache.activemq.artemis.utils.uri.URISchema.newObject(URISchema.java:84)\r\n        at org.apache.activemq.artemis.utils.uri.URIFactory.newObject(URIFactory.java:69)\r\n        at org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory.createConnectionFactory(ActiveMQInitialContextFactory.java:185)\r\n        at org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory.getInitialContext(ActiveMQInitialContextFactory.java:65)\r\n        at javax.naming.spi.NamingManager.getInitialContext(java.naming@17.0.8.1/NamingManager.java:732)\r\n        at javax.naming.InitialContext.getDefaultInitCtx(java.naming@17.0.8.1/InitialContext.java:305)\r\n        at javax.naming.InitialContext.init(java.naming@17.0.8.1/InitialContext.java:236)\r\n        at javax.naming.InitialContext.<init>(java.naming@17.0.8.1/InitialContext.java:208)\r\n        at org.springframework.jndi.JndiTemplate.createInitialContext(JndiTemplate.java:141)\r\n        at org.springframework.jndi.JndiTemplate.getContext(JndiTemplate.java:108)\r\n        at org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:90)\r\n        at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:157)\r\n        at org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:179)\r\n        at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:96)\r\n        at org.springframework.jndi.JndiLocatorDelegate.lookup(JndiLocatorDelegate.java:64)\r\n        at org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:78)\r\n        at org.springframework.jndi.JndiLocatorDelegate.lookup(JndiLocatorDelegate.java:59)\r\n        at org.springframework.jndi.JndiPropertySource.getProperty(JndiPropertySource.java:93)\r\n        at org.springframework.boot.context.properties.source.SpringConfigurationPropertySource.getConfigurationProperty(SpringConfigurationPropertySource.java:84)\r\n...\r\n```\r\nwith `backend-preinit` disabled:\r\n```\r\nException in thread \""SpringApplicationShutdownHook\"" java.lang.StackOverflowError\r\n\tat java.base/java.net.URI$Parser.parseAuthority(URI.java:3260)\r\n\tat java.base/java.net.URI$Parser.parseHierarchical(URI.java:3221)\r\n\tat java.base/java.net.URI$Parser.parse(URI.java:3177)\r\n\tat java.base/java.net.URI.<init>(URI.java:623)\r\n\tat org.apache.activemq.artemis.utils.uri.URIFactory.normalise(URIFactory.java:133)\r\n\tat org.apache.activemq.artemis.utils.uri.URIFactory.expandURI(URIFactory.java:49)\r\n\tat org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory.getFactoryType(ActiveMQInitialContextFactory.java:190)\r\n\tat org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory.getInitialContext(ActiveMQInitialContextFactory.java:61)\r\n\tat java.naming/javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:732)\r\n\tat java.naming/javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:305)\r\n\tat java.naming/javax.naming.InitialContext.init(InitialContext.java:236)\r\n\tat java.naming/javax.naming.InitialContext.<init>(InitialContext.java:208)\r\n\tat org.springframework.jndi.JndiTemplate.createInitialContext(JndiTemplate.java:141)\r\n\tat org.springframework.jndi.JndiTemplate.getContext(JndiTemplate.java:108)\r\n\tat org.springframework.jndi.JndiTemplate.execute(JndiTemplate.java:90)\r\n\tat org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:157)\r\n\tat org.springframework.jndi.JndiTemplate.lookup(JndiTemplate.java:179)\r\n\tat org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:96)\r\n\tat org.springframework.jndi.JndiLocatorDelegate.lookup(JndiLocatorDelegate.java:64)\r\n\tat org.springframework.jndi.JndiLocatorSupport.lookup(JndiLocatorSupport.java:78)\r\n\tat org.springframework.jndi.JndiLocatorDelegate.lookup(JndiLocatorDelegate.java:59)\r\n\tat org.springframework.jndi.JndiPropertySource.getProperty(JndiPropertySource.java:93)\r\n\tat org.springframework.core.env.PropertySourcesPropertyResolver.getProperty(PropertySourcesPropertyResolver.java:85)\r\n```\r\n\r\n## Reproduction\r\n\r\nThis happens consistently on startup of our SpringBoot 3.x application with Artemis 2.38 and Log4j 2.24.2 .\r\n"", ""issue_word_count"": 952, ""test_files_count"": 5, ""non_test_files_count"": 4, ""pr_changed_files"": [""log4j-api-test/src/test/java/org/apache/logging/log4j/util/PropertiesUtilTest.java"", ""log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryCustomizationTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryDefaultsTlaDisabledTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryDefaultsTlaEnabledTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/impl/ThreadContextDataInjectorTest.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java"", ""log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java""], ""pr_changed_test_files"": [""log4j-api-test/src/test/java/org/apache/logging/log4j/util/PropertiesUtilTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryCustomizationTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryDefaultsTlaDisabledTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryDefaultsTlaEnabledTest.java"", ""log4j-core-test/src/test/java/org/apache/logging/log4j/core/impl/ThreadContextDataInjectorTest.java""], ""base_commit"": ""11a3fc32afe8eaef75ba2730398896ebddb1ef93"", ""head_commit"": ""77bd35065b0b9420bcc6d1dc78fe1f706062296c"", ""repo_url"": ""https://github.com/apache/logging-log4j2/pull/3263"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__logging-log4j2/3263"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-09T08:01:28.000Z"", ""patch"": ""diff --git a/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java b/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java\nindex 8b4baf4e531..30b92854b0c 100644\n--- a/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java\n+++ b/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java\n@@ -496,6 +496,7 @@ public void reload() {}\n     private static final class Environment {\n \n         private final Set<PropertySource> sources = ConcurrentHashMap.newKeySet();\n+        private final ThreadLocal<PropertySource> CURRENT_PROPERTY_SOURCE = new ThreadLocal<>();\n \n         private Environment(final PropertySource propertySource) {\n             final PropertySource sysProps = new PropertyFilePropertySource(LOG4J_SYSTEM_PROPERTIES_FILE_NAME, false);\n@@ -547,21 +548,35 @@ private String get(final String key) {\n         }\n \n         private boolean sourceContainsProperty(final PropertySource source, final String key) {\n-            try {\n-                return source.containsProperty(key);\n-            } catch (final Exception e) {\n-                LOGGER.warn(\""Failed to retrieve Log4j property {} from property source {}.\"", key, source, e);\n-                return false;\n+            PropertySource recursiveSource = CURRENT_PROPERTY_SOURCE.get();\n+            if (recursiveSource == null) {\n+                CURRENT_PROPERTY_SOURCE.set(source);\n+                try {\n+                    return source.containsProperty(key);\n+                } catch (final Exception e) {\n+                    LOGGER.warn(\""Failed to retrieve Log4j property {} from property source {}.\"", key, source, e);\n+                } finally {\n+                    CURRENT_PROPERTY_SOURCE.remove();\n+                }\n             }\n+            LOGGER.warn(\""Recursive call to `containsProperty()` from property source {}.\"", recursiveSource);\n+            return false;\n         }\n \n         private String sourceGetProperty(final PropertySource source, final String key) {\n-            try {\n-                return source.getProperty(key);\n-            } catch (final Exception e) {\n-                LOGGER.warn(\""Failed to retrieve Log4j property {} from property source {}.\"", key, source, e);\n-                return null;\n+            PropertySource recursiveSource = CURRENT_PROPERTY_SOURCE.get();\n+            if (recursiveSource == null) {\n+                CURRENT_PROPERTY_SOURCE.set(source);\n+                try {\n+                    return source.getProperty(key);\n+                } catch (final Exception e) {\n+                    LOGGER.warn(\""Failed to retrieve Log4j property {} from property source {}.\"", key, source, e);\n+                } finally {\n+                    CURRENT_PROPERTY_SOURCE.remove();\n+                }\n             }\n+            LOGGER.warn(\""Recursive call to `getProperty()` from property source {}.\"", recursiveSource);\n+            return null;\n         }\n \n         private boolean containsKey(final String key) {\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java\nindex 169c39162db..fdd2465099f 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java\n@@ -33,16 +33,11 @@\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.logging.log4j.core.config.ReliabilityStrategy;\n import org.apache.logging.log4j.core.filter.CompositeFilter;\n-import org.apache.logging.log4j.core.util.Constants;\n-import org.apache.logging.log4j.message.DefaultFlowMessageFactory;\n import org.apache.logging.log4j.message.FlowMessageFactory;\n import org.apache.logging.log4j.message.Message;\n import org.apache.logging.log4j.message.MessageFactory;\n-import org.apache.logging.log4j.message.ParameterizedMessageFactory;\n-import org.apache.logging.log4j.message.ReusableMessageFactory;\n import org.apache.logging.log4j.message.SimpleMessage;\n import org.apache.logging.log4j.spi.AbstractLogger;\n-import org.apache.logging.log4j.util.LoaderUtil;\n import org.apache.logging.log4j.util.Strings;\n import org.apache.logging.log4j.util.Supplier;\n \n@@ -62,90 +57,42 @@ public class Logger extends AbstractLogger implements Supplier<LoggerConfig> {\n \n     private static final long serialVersionUID = 1L;\n \n-    private static final String MESSAGE_FACTORY_PROPERTY_NAME = \""log4j2.messageFactory\"";\n-\n-    private static final String FLOW_MESSAGE_FACTORY_PROPERTY_NAME = \""log4j2.flowMessageFactory\"";\n-\n     /**\n      * Config should be consistent across threads.\n      */\n     protected volatile PrivateConfig privateConfig;\n \n-    // FIXME: ditto to the above\n     private final LoggerContext context;\n \n     /**\n      * Constructs an instance using the given {@link LoggerContext}, logger name, and {@link MessageFactory}.\n      *\n-     * @param context the {@link LoggerContext} this logger is associated with\n+     * @param context The {@link LoggerContext} this logger is associated with, never {@code null}.\n+     * @param name The logger name, never {@code null}.\n      * @param messageFactory The message factory to be used.\n-     *                       If null, first the {@value #MESSAGE_FACTORY_PROPERTY_NAME} property will be used to instantiate the message factory.\n-     *                       If the property is missing and the {@code log4j2.enableThreadLocals} property is not {@code false}, {@link ReusableMessageFactory} will be used.\n-     *                       Otherwise, we will fall back to {@link ParameterizedMessageFactory}.\n-     * @param name the logger name\n+     *                       Passing a {@code null} value is deprecated, but supported for backward compatibility.\n      */\n-    protected Logger(final LoggerContext context, final String name, final MessageFactory messageFactory) {\n-        this(context, name, messageFactory, null);\n+    protected Logger(LoggerContext context, String name, MessageFactory messageFactory) {\n+        this(context, name, messageFactory, LoggerContext.DEFAULT_FLOW_MESSAGE_FACTORY);\n     }\n \n     /**\n      * The canonical constructor.\n      *\n-     * @param context the {@link LoggerContext} this logger is associated with\n+     * @param context The {@link LoggerContext} this logger is associated with, never {@code null}.\n+     * @param name The logger name, never {@code null}.\n      * @param messageFactory The message factory to be used.\n-     *                       If null, first the {@value #MESSAGE_FACTORY_PROPERTY_NAME} property will be used to instantiate the message factory.\n-     *                       If the property is missing and the {@code log4j2.enableThreadLocals} property is not {@code false}, {@link ReusableMessageFactory} will be used.\n-     *                       Otherwise, we will fall back to {@link ParameterizedMessageFactory}.\n+     *                       Passing a {@code null} value is deprecated, but supported for backward compatibility.\n      * @param flowMessageFactory The flow message factory to be used.\n-     *                           If null, first the {@value #FLOW_MESSAGE_FACTORY_PROPERTY_NAME} property will be used to instantiate the flow message factory.\n-     *                           If the property is missing, {@link DefaultFlowMessageFactory} will be used.\n-     * @param name the logger name\n+     *                           Passing a {@code null} value is deprecated, but supported for backward compatibility.\n      */\n     protected Logger(\n-            final LoggerContext context,\n-            final String name,\n-            final MessageFactory messageFactory,\n-            final FlowMessageFactory flowMessageFactory) {\n-        super(name, getEffectiveMessageFactory(messageFactory), getEffectiveFlowMessageFactory(flowMessageFactory));\n+            LoggerContext context, String name, MessageFactory messageFactory, FlowMessageFactory flowMessageFactory) {\n+        super(name, messageFactory, flowMessageFactory);\n         this.context = requireNonNull(context, \""context\"");\n         this.privateConfig = new PrivateConfig(context.getConfiguration(), this);\n     }\n \n-    static MessageFactory getEffectiveMessageFactory(final MessageFactory messageFactory) {\n-        return createInstanceFromFactoryProperty(\n-                MessageFactory.class,\n-                messageFactory,\n-                MESSAGE_FACTORY_PROPERTY_NAME,\n-                () -> Constants.ENABLE_THREADLOCALS\n-                        ? ReusableMessageFactory.INSTANCE\n-                        : ParameterizedMessageFactory.INSTANCE);\n-    }\n-\n-    private static FlowMessageFactory getEffectiveFlowMessageFactory(final FlowMessageFactory flowMessageFactory) {\n-        return createInstanceFromFactoryProperty(\n-                FlowMessageFactory.class,\n-                flowMessageFactory,\n-                FLOW_MESSAGE_FACTORY_PROPERTY_NAME,\n-                () -> DefaultFlowMessageFactory.INSTANCE);\n-    }\n-\n-    private static <V> V createInstanceFromFactoryProperty(\n-            final Class<V> instanceType,\n-            final V providedInstance,\n-            final String propertyName,\n-            final java.util.function.Supplier<V> fallbackInstanceSupplier) {\n-        if (providedInstance != null) {\n-            return providedInstance;\n-        }\n-        try {\n-            return LoaderUtil.newCheckedInstanceOfProperty(propertyName, instanceType, fallbackInstanceSupplier);\n-        } catch (final Exception error) {\n-            final String message =\n-                    String.format(\""failed instantiating the class pointed by the `%s` property\"", propertyName);\n-            throw new RuntimeException(message, error);\n-        }\n-    }\n-\n     protected Object writeReplace() throws ObjectStreamException {\n         return new LoggerProxy(getName(), getMessageFactory());\n     }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java\nindex d084fd24843..1ed29fec586 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java\n@@ -45,16 +45,22 @@\n import org.apache.logging.log4j.core.impl.Log4jLogEvent;\n import org.apache.logging.log4j.core.jmx.Server;\n import org.apache.logging.log4j.core.util.Cancellable;\n+import org.apache.logging.log4j.core.util.Constants;\n import org.apache.logging.log4j.core.util.ExecutorServices;\n import org.apache.logging.log4j.core.util.NetUtils;\n import org.apache.logging.log4j.core.util.ShutdownCallbackRegistry;\n import org.apache.logging.log4j.core.util.internal.InternalLoggerRegistry;\n+import org.apache.logging.log4j.message.DefaultFlowMessageFactory;\n+import org.apache.logging.log4j.message.FlowMessageFactory;\n import org.apache.logging.log4j.message.MessageFactory;\n+import org.apache.logging.log4j.message.ParameterizedMessageFactory;\n+import org.apache.logging.log4j.message.ReusableMessageFactory;\n import org.apache.logging.log4j.spi.LoggerContextFactory;\n import org.apache.logging.log4j.spi.LoggerContextShutdownAware;\n import org.apache.logging.log4j.spi.LoggerContextShutdownEnabled;\n import org.apache.logging.log4j.spi.Terminable;\n import org.apache.logging.log4j.spi.ThreadContextMapFactory;\n+import org.apache.logging.log4j.util.LoaderUtil;\n import org.apache.logging.log4j.util.PropertiesUtil;\n \n /**\n@@ -74,14 +80,46 @@ public class LoggerContext extends AbstractLifeCycle\n      */\n     public static final String PROPERTY_CONFIG = \""config\"";\n \n-    private static final Configuration NULL_CONFIGURATION = new NullConfiguration();\n+    private static final String EXTERNAL_CONTEXT_KEY = \""__EXTERNAL_CONTEXT_KEY__\"";\n \n+    private static final String MESSAGE_FACTORY_PROPERTY_NAME = \""log4j2.messageFactory\"";\n     /**\n-     * The default message factory to use while creating loggers, if none is provided.\n-     *\n-     * @see <a href=\""https://github.com/apache/logging-log4j2/pull/2936\"">#2936</a> for the discussion on why we leak the message factory of the default logger and hardcode it here.\n+     * The default message factory to use while creating loggers if the user provides none.\n+     * <p>\n+     *     To mitigate initialization problems as the one described in\n+     *     <a href=\""https://github.com/apache/logging-log4j2/issues/3252>#3252</a>,\n+     *     this field should be initialized as soon as possible.\n+     * </p>\n+     */\n+    private static final MessageFactory DEFAULT_MESSAGE_FACTORY = createInstanceFromFactoryProperty(\n+            MessageFactory.class,\n+            MESSAGE_FACTORY_PROPERTY_NAME,\n+            Constants.ENABLE_THREADLOCALS ? ReusableMessageFactory.INSTANCE : ParameterizedMessageFactory.INSTANCE);\n+\n+    private static final String FLOW_MESSAGE_FACTORY_PROPERTY_NAME = \""log4j2.flowMessageFactory\"";\n+    /**\n+     * The default flow message factory to use while creating loggers.\n+     * <p>\n+     *     To mitigate initialization problems as the one described in\n+     *     <a href=\""https://github.com/apache/logging-log4j2/issues/3252>#3252</a>,\n+     *     this field should be initialized as soon as possible.\n+     * </p>\n      */\n-    private static final MessageFactory DEFAULT_MESSAGE_FACTORY = Logger.getEffectiveMessageFactory(null);\n+    static final FlowMessageFactory DEFAULT_FLOW_MESSAGE_FACTORY = createInstanceFromFactoryProperty(\n+            FlowMessageFactory.class, FLOW_MESSAGE_FACTORY_PROPERTY_NAME, DefaultFlowMessageFactory.INSTANCE);\n+\n+    private static final Configuration NULL_CONFIGURATION = new NullConfiguration();\n+\n+    private static <V> V createInstanceFromFactoryProperty(\n+            final Class<V> instanceType, final String propertyName, final V fallbackInstance) {\n+        try {\n+            return LoaderUtil.newCheckedInstanceOfProperty(propertyName, instanceType, () -> fallbackInstance);\n+        } catch (final Exception error) {\n+            final String message =\n+                    String.format(\""failed instantiating the class pointed by the `%s` property\"", propertyName);\n+            throw new RuntimeException(message, error);\n+        }\n+    }\n \n     private final InternalLoggerRegistry loggerRegistry = new InternalLoggerRegistry();\n     private final CopyOnWriteArrayList<PropertyChangeListener> propertyChangeListeners = new CopyOnWriteArrayList<>();\n@@ -93,7 +131,6 @@ public class LoggerContext extends AbstractLifeCycle\n      */\n     private volatile Configuration configuration = new DefaultConfiguration();\n \n-    private static final String EXTERNAL_CONTEXT_KEY = \""__EXTERNAL_CONTEXT_KEY__\"";\n     private final ConcurrentMap<String, Object> externalMap = new ConcurrentHashMap<>();\n     private String contextName;\n     private volatile URI configLocation;\n@@ -813,8 +850,15 @@ private Logger newInstance(final String name, final MessageFactory messageFactor\n         return newInstance(this, name, messageFactory);\n     }\n \n-    // LOG4J2-151: changed visibility from private to protected\n-    protected Logger newInstance(final LoggerContext ctx, final String name, final MessageFactory messageFactory) {\n-        return new Logger(ctx, name, messageFactory);\n+    /**\n+     * Callback to create a new logger.\n+     *\n+     * @param context The {@link LoggerContext} this logger is associated with, never {@code null}.\n+     * @param messageFactory The message factory to be used, never {@code null}.\n+     * @param name The logger name, never {@code null}.\n+     * @return A new logger instance.\n+     */\n+    protected Logger newInstance(LoggerContext context, String name, MessageFactory messageFactory) {\n+        return new Logger(context, name, messageFactory);\n     }\n }\n\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java\nindex 0378d010ccc..a4cdb55eb91 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java\n@@ -16,6 +16,7 @@\n  */\n package org.apache.logging.log4j.core.async;\n \n+import aQute.bnd.annotation.baseline.BaselineIgnore;\n import com.lmax.disruptor.EventTranslatorVararg;\n import com.lmax.disruptor.dsl.Disruptor;\n import java.util.List;\n@@ -62,6 +63,10 @@\n  * and they will flush to disk at the end of each batch. This means that even with immediateFlush=false, there will\n  * never be any items left in the buffer; all log events will all be written to disk in a very efficient manner.\n  */\n+// We changed the constructor from `public` to package-private.\n+// The constructor was effectively package-private, since the {@link AsyncLoggerDisruptor} class in its signature is\n+// package-private, without any public implementation.\n+@BaselineIgnore(\""2.24.3\"")\n public class AsyncLogger extends Logger implements EventTranslatorVararg<RingBufferLogEvent> {\n     // Implementation note: many methods in this class are tuned for performance. MODIFY WITH CARE!\n     // Specifically, try to keep the hot methods to 35 bytecodes or less:\n@@ -86,16 +91,14 @@ public class AsyncLogger extends Logger implements EventTranslatorVararg<RingBuf\n     /**\n      * Constructs an {@code AsyncLogger} with the specified context, name and message factory.\n      *\n-     * @param context context of this logger\n-     * @param name name of this logger\n-     * @param messageFactory message factory of this logger\n-     * @param loggerDisruptor helper class that logging can be delegated to. This object owns the Disruptor.\n+     * @param context The {@link LoggerContext} this logger is associated with, never {@code null}.\n+     * @param name The logger name, never {@code null}.\n+     * @param messageFactory The message factory to be used.\n+     *                       Passing a {@code null} value is deprecated, but supported for backward compatibility.\n+     * @param loggerDisruptor Helper class that logging can be delegated to. This object owns the Disruptor.\n      */\n-    public AsyncLogger(\n-            final LoggerContext context,\n-            final String name,\n-            final MessageFactory messageFactory,\n-            final AsyncLoggerDisruptor loggerDisruptor) {\n+    AsyncLogger(\n+            LoggerContext context, String name, MessageFactory messageFactory, AsyncLoggerDisruptor loggerDisruptor) {\n         super(context, name, messageFactory);\n         this.loggerDisruptor = loggerDisruptor;\n         includeLocation = privateConfig.loggerConfig.isIncludeLocation();\n@@ -145,7 +148,7 @@ public void log(\n         getTranslatorType().log(fqcn, location, level, marker, message, throwable);\n     }\n \n-    abstract class TranslatorType {\n+    abstract static class TranslatorType {\n         abstract void log(\n                 final String fqcn,\n                 final StackTraceElement location,\n@@ -400,7 +403,7 @@ private void logWithVarargTranslator(\n         if (!isReused(message)) {\n             InternalAsyncUtil.makeMessageImmutable(message);\n         }\n-        StackTraceElement location = null;\n+        StackTraceElement location;\n         // calls the translateTo method on this AsyncLogger\n         if (!disruptor\n                 .getRingBuffer()\n"", ""test_patch"": ""diff --git a/log4j-api-test/src/test/java/org/apache/logging/log4j/util/PropertiesUtilTest.java b/log4j-api-test/src/test/java/org/apache/logging/log4j/util/PropertiesUtilTest.java\nindex a655959765c..5f85d13256e 100644\n--- a/log4j-api-test/src/test/java/org/apache/logging/log4j/util/PropertiesUtilTest.java\n+++ b/log4j-api-test/src/test/java/org/apache/logging/log4j/util/PropertiesUtilTest.java\n@@ -38,6 +38,9 @@\n import java.util.Map;\n import java.util.Properties;\n import java.util.stream.Stream;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.test.ListStatusListener;\n+import org.apache.logging.log4j.test.junit.UsingStatusListener;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.parallel.ResourceAccessMode;\n@@ -193,7 +196,8 @@ void testPublish() {\n     @Test\n     @ResourceLock(value = Resources.SYSTEM_PROPERTIES, mode = ResourceAccessMode.READ)\n     @Issue(\""https://github.com/spring-projects/spring-boot/issues/33450\"")\n-    void testBadPropertySource() {\n+    @UsingStatusListener\n+    void testErrorPropertySource(ListStatusListener statusListener) {\n         final String key = \""testKey\"";\n         final Properties props = new Properties();\n         props.put(key, \""test\"");\n@@ -201,8 +205,47 @@ void testBadPropertySource() {\n         final ErrorPropertySource source = new ErrorPropertySource();\n         util.addPropertySource(source);\n         try {\n+            statusListener.clear();\n             assertEquals(\""test\"", util.getStringProperty(key));\n             assertTrue(source.exceptionThrown);\n+            assertThat(statusListener.findStatusData(Level.WARN))\n+                    .anySatisfy(data ->\n+                            assertThat(data.getMessage().getFormattedMessage()).contains(\""Failed\""));\n+        } finally {\n+            util.removePropertySource(source);\n+        }\n+    }\n+\n+    @Test\n+    @ResourceLock(value = Resources.SYSTEM_PROPERTIES, mode = ResourceAccessMode.READ)\n+    @Issue(\""https://github.com/apache/logging-log4j2/issues/3252\"")\n+    @UsingStatusListener\n+    void testRecursivePropertySource(ListStatusListener statusListener) {\n+        final String key = \""testKey\"";\n+        final Properties props = new Properties();\n+        props.put(key, \""test\"");\n+        final PropertiesUtil util = new PropertiesUtil(props);\n+        final PropertySource source = new RecursivePropertySource(util);\n+        util.addPropertySource(source);\n+        try {\n+            // We ignore the recursive source\n+            statusListener.clear();\n+            assertThat(util.getStringProperty(key)).isEqualTo(\""test\"");\n+            assertThat(statusListener.findStatusData(Level.WARN))\n+                    .anySatisfy(data -> assertThat(data.getMessage().getFormattedMessage())\n+                            .contains(\""Recursive call\"", \""getProperty\""));\n+\n+            statusListener.clear();\n+            // To check for existence, the sources are looked up in a random order.\n+            assertThat(util.hasProperty(key)).isTrue();\n+            // To find a missing key, all the sources must be used.\n+            assertThat(util.hasProperty(\""noSuchKey\"")).isFalse();\n+            assertThat(statusListener.findStatusData(Level.WARN))\n+                    .anySatisfy(data -> assertThat(data.getMessage().getFormattedMessage())\n+                            .contains(\""Recursive call\"", \""containsProperty\""));\n+            // We check that the source is recursive\n+            assertThat(source.getProperty(key)).isEqualTo(\""test\"");\n+            assertThat(source.containsProperty(key)).isTrue();\n         } finally {\n             util.removePropertySource(source);\n         }\n@@ -289,4 +332,28 @@ public boolean containsProperty(final String key) {\n             throw new IllegalStateException(\""Test\"");\n         }\n     }\n+\n+    private static class RecursivePropertySource implements PropertySource {\n+\n+        private final PropertiesUtil propertiesUtil;\n+\n+        private RecursivePropertySource(PropertiesUtil propertiesUtil) {\n+            this.propertiesUtil = propertiesUtil;\n+        }\n+\n+        @Override\n+        public int getPriority() {\n+            return Integer.MIN_VALUE;\n+        }\n+\n+        @Override\n+        public String getProperty(String key) {\n+            return propertiesUtil.getStringProperty(key);\n+        }\n+\n+        @Override\n+        public boolean containsProperty(String key) {\n+            return propertiesUtil.hasProperty(key);\n+        }\n+    }\n }\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryCustomizationTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryCustomizationTest.java\nindex 9043c47b1c7..e303bfdea25 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryCustomizationTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryCustomizationTest.java\n@@ -20,46 +20,51 @@\n \n import org.apache.logging.log4j.message.AbstractMessageFactory;\n import org.apache.logging.log4j.message.DefaultFlowMessageFactory;\n+import org.apache.logging.log4j.message.FlowMessageFactory;\n import org.apache.logging.log4j.message.Message;\n import org.apache.logging.log4j.message.MessageFactory;\n import org.apache.logging.log4j.message.ParameterizedMessageFactory;\n import org.junit.jupiter.api.Test;\n-import org.junitpioneer.jupiter.ClearSystemProperty;\n+import org.junit.jupiter.api.TestInfo;\n import org.junitpioneer.jupiter.SetSystemProperty;\n \n+@SetSystemProperty(\n+        key = \""log4j2.messageFactory\"",\n+        value = \""org.apache.logging.log4j.core.LoggerMessageFactoryCustomizationTest$AlternativeTestMessageFactory\"")\n+@SetSystemProperty(\n+        key = \""log4j2.flowMessageFactory\"",\n+        value = \""org.apache.logging.log4j.core.LoggerMessageFactoryCustomizationTest$AlternativeTestFlowMessageFactory\"")\n class LoggerMessageFactoryCustomizationTest {\n \n     @Test\n-    @ClearSystemProperty(key = \""log4j2.messageFactory\"")\n-    @ClearSystemProperty(key = \""log4j2.flowMessageFactory\"")\n-    void arguments_should_be_honored() {\n-        final LoggerContext loggerContext =\n-                new LoggerContext(LoggerMessageFactoryCustomizationTest.class.getSimpleName());\n-        final Logger logger = new Logger(\n-                loggerContext, \""arguments_should_be_honored\"", new TestMessageFactory(), new TestFlowMessageFactory());\n-        assertTestMessageFactories(logger);\n+    void arguments_should_be_honored(TestInfo testInfo) {\n+        try (LoggerContext loggerContext =\n+                new LoggerContext(LoggerMessageFactoryCustomizationTest.class.getSimpleName())) {\n+            Logger logger = new Logger(\n+                    loggerContext, testInfo.getDisplayName(), new TestMessageFactory(), new TestFlowMessageFactory());\n+            assertTestMessageFactories(logger, TestMessageFactory.class, TestFlowMessageFactory.class);\n+        }\n     }\n \n     @Test\n-    @SetSystemProperty(\n-            key = \""log4j2.messageFactory\"",\n-            value = \""org.apache.logging.log4j.core.LoggerMessageFactoryCustomizationTest$TestMessageFactory\"")\n-    @SetSystemProperty(\n-            key = \""log4j2.flowMessageFactory\"",\n-            value = \""org.apache.logging.log4j.core.LoggerMessageFactoryCustomizationTest$TestFlowMessageFactory\"")\n-    void properties_should_be_honored() {\n-        final LoggerContext loggerContext =\n-                new LoggerContext(LoggerMessageFactoryCustomizationTest.class.getSimpleName());\n-        final Logger logger = new Logger(loggerContext, \""properties_should_be_honored\"", null, null);\n-        assertTestMessageFactories(logger);\n+    void properties_should_be_honored(TestInfo testInfo) {\n+        try (LoggerContext loggerContext =\n+                new LoggerContext(LoggerMessageFactoryCustomizationTest.class.getSimpleName())) {\n+            Logger logger = loggerContext.getLogger(testInfo.getDisplayName());\n+            assertTestMessageFactories(\n+                    logger, AlternativeTestMessageFactory.class, AlternativeTestFlowMessageFactory.class);\n+        }\n     }\n \n-    private static void assertTestMessageFactories(Logger logger) {\n-        assertThat((MessageFactory) logger.getMessageFactory()).isInstanceOf(TestMessageFactory.class);\n-        assertThat(logger.getFlowMessageFactory()).isInstanceOf(TestFlowMessageFactory.class);\n+    private static void assertTestMessageFactories(\n+            Logger logger,\n+            Class<? extends MessageFactory> messageFactoryClass,\n+            Class<? extends FlowMessageFactory> flowMessageFactoryClass) {\n+        assertThat((MessageFactory) logger.getMessageFactory()).isInstanceOf(messageFactoryClass);\n+        assertThat(logger.getFlowMessageFactory()).isInstanceOf(flowMessageFactoryClass);\n     }\n \n-    public static final class TestMessageFactory extends AbstractMessageFactory {\n+    public static class TestMessageFactory extends AbstractMessageFactory {\n \n         @Override\n         public Message newMessage(final String message, final Object... params) {\n@@ -67,5 +72,9 @@ public Message newMessage(final String message, final Object... params) {\n         }\n     }\n \n-    public static final class TestFlowMessageFactory extends DefaultFlowMessageFactory {}\n+    public static class AlternativeTestMessageFactory extends TestMessageFactory {}\n+\n+    public static class TestFlowMessageFactory extends DefaultFlowMessageFactory {}\n+\n+    public static class AlternativeTestFlowMessageFactory extends TestFlowMessageFactory {}\n }\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryDefaultsTlaDisabledTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryDefaultsTlaDisabledTest.java\nindex af3c8624645..28d39c30f74 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryDefaultsTlaDisabledTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryDefaultsTlaDisabledTest.java\n@@ -23,19 +23,20 @@\n import org.apache.logging.log4j.message.MessageFactory;\n import org.apache.logging.log4j.message.ParameterizedMessageFactory;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n import org.junitpioneer.jupiter.SetSystemProperty;\n \n class LoggerMessageFactoryDefaultsTlaDisabledTest {\n \n     @Test\n     @SetSystemProperty(key = \""log4j2.enableThreadLocals\"", value = \""false\"")\n-    void defaults_should_match_when_thread_locals_disabled() {\n+    void defaults_should_match_when_thread_locals_disabled(TestInfo testInfo) {\n         assertThat(Constants.ENABLE_THREADLOCALS).isFalse();\n-        final LoggerContext loggerContext =\n-                new LoggerContext(LoggerMessageFactoryDefaultsTlaDisabledTest.class.getSimpleName());\n-        final Logger logger =\n-                new Logger(loggerContext, \""defaults_should_match_when_thread_locals_disabled\"", null, null);\n-        assertThat((MessageFactory) logger.getMessageFactory()).isSameAs(ParameterizedMessageFactory.INSTANCE);\n-        assertThat(logger.getFlowMessageFactory()).isSameAs(DefaultFlowMessageFactory.INSTANCE);\n+        try (LoggerContext loggerContext =\n+                new LoggerContext(LoggerMessageFactoryDefaultsTlaDisabledTest.class.getSimpleName())) {\n+            final Logger logger = loggerContext.getLogger(testInfo.getDisplayName());\n+            assertThat((MessageFactory) logger.getMessageFactory()).isSameAs(ParameterizedMessageFactory.INSTANCE);\n+            assertThat(logger.getFlowMessageFactory()).isSameAs(DefaultFlowMessageFactory.INSTANCE);\n+        }\n     }\n }\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryDefaultsTlaEnabledTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryDefaultsTlaEnabledTest.java\nindex 3255566710c..3b8f7ba339e 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryDefaultsTlaEnabledTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/LoggerMessageFactoryDefaultsTlaEnabledTest.java\n@@ -23,19 +23,21 @@\n import org.apache.logging.log4j.message.MessageFactory;\n import org.apache.logging.log4j.message.ReusableMessageFactory;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n import org.junitpioneer.jupiter.SetSystemProperty;\n \n class LoggerMessageFactoryDefaultsTlaEnabledTest {\n \n     @Test\n-    @SetSystemProperty(key = \""log4j2.is.webapp\"", value = \""false\"")\n-    @SetSystemProperty(key = \""log4j2.enableThreadLocals\"", value = \""true\"")\n-    void defaults_should_match_when_thread_locals_enabled() {\n+    @SetSystemProperty(key = \""log4j2.isWebapp\"", value = \""false\"")\n+    @SetSystemProperty(key = \""log4j2.enableThreadlocals\"", value = \""true\"")\n+    void defaults_should_match_when_thread_locals_enabled(TestInfo testInfo) {\n         assertThat(Constants.ENABLE_THREADLOCALS).isTrue();\n-        final LoggerContext loggerContext =\n-                new LoggerContext(LoggerMessageFactoryDefaultsTlaEnabledTest.class.getSimpleName());\n-        final Logger logger = new Logger(loggerContext, \""defaults_should_match_when_thread_locals_enabled\"", null, null);\n-        assertThat((MessageFactory) logger.getMessageFactory()).isSameAs(ReusableMessageFactory.INSTANCE);\n-        assertThat(logger.getFlowMessageFactory()).isSameAs(DefaultFlowMessageFactory.INSTANCE);\n+        try (LoggerContext loggerContext =\n+                new LoggerContext(LoggerMessageFactoryDefaultsTlaEnabledTest.class.getSimpleName())) {\n+            Logger logger = loggerContext.getLogger(testInfo.getDisplayName());\n+            assertThat((MessageFactory) logger.getMessageFactory()).isSameAs(ReusableMessageFactory.INSTANCE);\n+            assertThat(logger.getFlowMessageFactory()).isSameAs(DefaultFlowMessageFactory.INSTANCE);\n+        }\n     }\n }\n\ndiff --git a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/impl/ThreadContextDataInjectorTest.java b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/impl/ThreadContextDataInjectorTest.java\nindex 896d0d2d8b7..135ea4162a0 100644\n--- a/log4j-core-test/src/test/java/org/apache/logging/log4j/core/impl/ThreadContextDataInjectorTest.java\n+++ b/log4j-core-test/src/test/java/org/apache/logging/log4j/core/impl/ThreadContextDataInjectorTest.java\n@@ -33,7 +33,6 @@\n import org.apache.logging.log4j.ThreadContext;\n import org.apache.logging.log4j.core.ContextDataInjector;\n import org.apache.logging.log4j.spi.ThreadContextMap;\n-import org.apache.logging.log4j.util.PropertiesUtil;\n import org.apache.logging.log4j.util.ProviderUtil;\n import org.apache.logging.log4j.util.SortedArrayStringMap;\n import org.apache.logging.log4j.util.StringMap;\n@@ -59,7 +58,6 @@ public static Collection<String[]> threadContextMapClassNames() {\n     public String threadContextMapClassName;\n \n     private static void resetThreadContextMap() {\n-        PropertiesUtil.getProperties().reload();\n         final Log4jProvider provider = (Log4jProvider) ProviderUtil.getProvider();\n         provider.resetThreadContextMap();\n         ThreadContext.init();\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
