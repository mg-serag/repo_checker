metadata
"{""instance_id"": ""vaadin__flow-21709"", ""pr_id"": 21709, ""issue_id"": 9331, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Usage of Class.newInstance()\n`Class.newInstance()` is deprecated since Java 9. \r\n\r\nPer JavaDoc:\r\n> Note that this method propagates any exception thrown by the nullary constructor, including a checked exception. Use of this method effectively bypasses the compile-time exception checking that would otherwise be performed by the compiler.\r\n\r\nProper way to instantiate is to call `Class.getDeclaredConstructor().newInstance()` which wraps any exception in `InvocationTargetException`.\r\n\r\nUsages:\r\n- [ ] `com.vaadin.flow.server.startup.ClassLoaderAwareServletContainerInitializer#onStartup`\r\n- [ ] `com.vaadin.flow.server.frontend.scanner.ThemeWrapper#ThemeWrapper`\r\n- [ ] `com.vaadin.flow.internal.JsonSerializer#toObject(java.lang.Class<T>, java.lang.reflect.Type, elemental.json.JsonValue)`\r\n- [ ] `com.vaadin.flow.internal.JsonSerializer#tryToCreateCollection`"", ""issue_word_count"": 103, ""test_files_count"": 17, ""non_test_files_count"": 5, ""pr_changed_files"": [""flow-data/src/test/java/com/vaadin/flow/data/binder/Jsr303Test.java"", ""flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/ComponentTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/InputTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/NativeTableTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/RangeInputTest.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/JsonSerializer.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ThemeWrapper.java"", ""flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java"", ""flow-tests/test-frontend/test-bun/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java"", ""flow-tests/test-frontend/test-npm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java"", ""flow-tests/test-frontend/test-pnpm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java"", ""flow-tests/test-frontend/vite-test-assets/src/main/java/com/vaadin/viteapp/views/template/TemplateView.java"", ""flow-tests/test-npm-only-features/test-npm-bytecode-scanning/src/main/java/com/vaadin/flow/testnpmonlyfeatures/bytecodescanning/ByteCodeScanningView.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/SerializationTest.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/ToStringTest.java"", ""vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerClassLoaderTest.java""], ""pr_changed_test_files"": [""flow-data/src/test/java/com/vaadin/flow/data/binder/Jsr303Test.java"", ""flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/ComponentTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/InputTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/NativeTableTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/RangeInputTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java"", ""flow-tests/test-frontend/test-bun/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java"", ""flow-tests/test-frontend/test-npm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java"", ""flow-tests/test-frontend/test-pnpm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java"", ""flow-tests/test-frontend/vite-test-assets/src/main/java/com/vaadin/viteapp/views/template/TemplateView.java"", ""flow-tests/test-npm-only-features/test-npm-bytecode-scanning/src/main/java/com/vaadin/flow/testnpmonlyfeatures/bytecodescanning/ByteCodeScanningView.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/SerializationTest.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/ToStringTest.java"", ""vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerClassLoaderTest.java""], ""base_commit"": ""0051c335114403c28e097c0b623074afc2104f5a"", ""head_commit"": ""86b0c388a786fabdd02f795519c1e8df2bfaa72a"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21709"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21709"", ""dockerfile"": """", ""pr_merged_at"": ""2025-06-17T12:40:27.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JsonSerializer.java b/flow-server/src/main/java/com/vaadin/flow/internal/JsonSerializer.java\nindex 8d50d0e4ff9..75156d4d47c 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JsonSerializer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JsonSerializer.java\n@@ -207,7 +207,7 @@ private static <T> T toObject(Class<T> type, Type genericType,\n \n         T instance;\n         try {\n-            instance = type.newInstance();\n+            instance = type.getDeclaredConstructor().newInstance();\n         } catch (Exception e) {\n             throw new IllegalArgumentException(\n                     \""Could not create an instance of type \"" + type\n@@ -391,7 +391,8 @@ private static Collection<?> tryToCreateCollection(Class<?> collectionType,\n                             + \""'. Use Lists, Sets or concrete classes that implement java.util.Collection.\"");\n         }\n         try {\n-            return (Collection<?>) collectionType.newInstance();\n+            return (Collection<?>) collectionType.getDeclaredConstructor()\n+                    .newInstance();\n         } catch (Exception e) {\n             throw new IllegalArgumentException(\n                     \""Could not create an instance of the collection of type \""\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\nindex 484308756d7..b91bde33c3b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java\n@@ -203,7 +203,8 @@ public FrontendDependencies(ClassFinder finder,\n             }\n             throw ex;\n         } catch (ClassNotFoundException | InstantiationException\n-                | IllegalAccessException | IOException e) {\n+                | IllegalAccessException | IOException | NoSuchMethodException\n+                | InvocationTargetException e) {\n             throw new IllegalStateException(\n                     \""Unable to compute frontend dependencies\"", e);\n         }\n@@ -611,7 +612,8 @@ private void addEntryPoint(Class<?> entryPointClass, EntryPointType type,\n      * if found in the class-path\n      */\n     private void computeApplicationTheme() throws ClassNotFoundException,\n-            InstantiationException, IllegalAccessException, IOException {\n+            InstantiationException, IllegalAccessException, IOException,\n+            InvocationTargetException, NoSuchMethodException {\n \n         // This really should check entry points and not all classes, but the\n         // old behavior is retained.. for now..\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java\nindex 187f6b456ad..6d4b73bd4a0 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FullDependenciesScanner.java\n@@ -386,7 +386,8 @@ private void setupTheme(Class<? extends AbstractTheme> theme,\n             themeDefinition = new ThemeDefinition(theme, variant, name);\n             try {\n                 themeInstance = new ThemeWrapper(theme);\n-            } catch (InstantiationException | IllegalAccessException e) {\n+            } catch (InstantiationException | IllegalAccessException\n+                    | NoSuchMethodException | InvocationTargetException e) {\n                 throw new IllegalStateException(\""Unable to create a new '\""\n                         + theme.getName() + \""' theme instance\"", e);\n             }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ThemeWrapper.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ThemeWrapper.java\nindex a0283b64739..88974cc62d4 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ThemeWrapper.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/ThemeWrapper.java\n@@ -37,8 +37,9 @@ class ThemeWrapper implements AbstractTheme, Serializable {\n     private final Serializable instance;\n \n     public ThemeWrapper(Class<? extends AbstractTheme> theme)\n-            throws InstantiationException, IllegalAccessException {\n-        instance = theme.newInstance();\n+            throws InstantiationException, IllegalAccessException,\n+            NoSuchMethodException, InvocationTargetException {\n+        instance = theme.getDeclaredConstructor().newInstance();\n     }\n \n     @Override\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java\nindex ddee450e083..97fcb4eb319 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java\n@@ -95,11 +95,12 @@ default void onStartup(Set<Class<?>> set, ServletContext context)\n                 Method operation = Stream.of(initializer.getMethods()).filter(\n                         method -> method.getName().equals(processMethodName))\n                         .findFirst().get();\n-                operation.invoke(initializer.newInstance(),\n+                operation.invoke(\n+                        initializer.getDeclaredConstructor().newInstance(),\n                         new Object[] { set, ctx });\n             } catch (ClassNotFoundException | IllegalAccessException\n                     | IllegalArgumentException | InvocationTargetException\n-                    | InstantiationException e) {\n+                    | InstantiationException | NoSuchMethodException e) {\n                 throw new ServletException(e);\n             }\n         };\n"", ""test_patch"": ""diff --git a/flow-data/src/test/java/com/vaadin/flow/data/binder/Jsr303Test.java b/flow-data/src/test/java/com/vaadin/flow/data/binder/Jsr303Test.java\nindex 97f3d3f8f76..f0ba8152ad7 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/binder/Jsr303Test.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/binder/Jsr303Test.java\n@@ -114,13 +114,14 @@ public void execute() {\n     }\n \n     @Test\n-    public void beanBinderWithoutJsr303() throws ClassNotFoundException,\n-            NoSuchMethodException, SecurityException, InstantiationException,\n-            IllegalAccessException, IllegalArgumentException,\n-            InvocationTargetException, IOException, InterruptedException {\n+    public void beanBinderWithoutJsr303()\n+            throws ClassNotFoundException, NoSuchMethodException,\n+            SecurityException, InstantiationException, IllegalAccessException,\n+            IllegalArgumentException, InvocationTargetException, IOException {\n         try (URLClassLoader loader = new TestClassLoader()) {\n             Class<?> clazz = loader.loadClass(Jsr303UnitTest.class.getName());\n-            UnitTest test = (UnitTest) clazz.newInstance();\n+            UnitTest test = (UnitTest) clazz.getDeclaredConstructor()\n+                    .newInstance();\n             test.execute();\n         }\n     }\n\ndiff --git a/flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java b/flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java\nindex 6e0476898d6..fcab39b34d0 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/binder/NotEmptyTest.java\n@@ -106,11 +106,11 @@ public void execute() {\n     public void notEmptyAnnotationIsNotInClasspath()\n             throws ClassNotFoundException, NoSuchMethodException,\n             SecurityException, InstantiationException, IllegalAccessException,\n-            IllegalArgumentException, InvocationTargetException, IOException,\n-            InterruptedException {\n+            IllegalArgumentException, InvocationTargetException, IOException {\n         try (URLClassLoader loader = new TestClassLoader()) {\n             Class<?> clazz = loader.loadClass(NotEmptyUnitTest.class.getName());\n-            UnitTest test = (UnitTest) clazz.newInstance();\n+            UnitTest test = (UnitTest) clazz.getDeclaredConstructor()\n+                    .newInstance();\n             test.execute();\n         }\n     }\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\nindex 35ab5d743e3..f344f1b4146 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\n@@ -16,6 +16,7 @@\n package com.vaadin.flow.component.html;\n \n import java.beans.IntrospectionException;\n+import java.lang.reflect.InvocationTargetException;\n import java.util.Optional;\n \n import org.junit.After;\n@@ -40,7 +41,8 @@ public void tearDown() {\n \n     @Override\n     public void setup() throws IntrospectionException, InstantiationException,\n-            IllegalAccessException, ClassNotFoundException {\n+            IllegalAccessException, ClassNotFoundException,\n+            InvocationTargetException, NoSuchMethodException {\n         whitelistProperty(\""download\"");\n         super.setup();\n     }\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/ComponentTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/ComponentTest.java\nindex 9c80fd55d0f..7ca3d2903b9 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/ComponentTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/ComponentTest.java\n@@ -48,7 +48,8 @@ public abstract class ComponentTest {\n \n     @Before\n     public void setup() throws IntrospectionException, InstantiationException,\n-            IllegalAccessException, ClassNotFoundException {\n+            IllegalAccessException, ClassNotFoundException,\n+            InvocationTargetException, NoSuchMethodException {\n         component = createComponent();\n         whitelistProperty(\""visible\"");\n         addProperties();\n@@ -122,9 +123,11 @@ protected <U> void addProperty(String propertyName, Class<U> propertyType,\n     }\n \n     protected Component createComponent() throws InstantiationException,\n-            IllegalAccessException, ClassNotFoundException {\n+            IllegalAccessException, ClassNotFoundException,\n+            NoSuchMethodException, InvocationTargetException {\n         String componentClass = getClass().getName().replace(\""Test\"", \""\"");\n-        return (Component) Class.forName(componentClass).newInstance();\n+        return (Component) Class.forName(componentClass)\n+                .getDeclaredConstructor().newInstance();\n     }\n \n     protected Component getComponent() {\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\nindex 7c61c006e47..3caa7436ffa 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\n@@ -138,7 +138,8 @@ private static void smokeTestComponent(\n             // Test that all setters produce a result\n             testSetters(instance);\n         } catch (InstantiationException | IllegalAccessException\n-                | IllegalArgumentException | InvocationTargetException e) {\n+                | IllegalArgumentException | InvocationTargetException\n+                | NoSuchMethodException e) {\n             throw new RuntimeException(e);\n         }\n     }\n@@ -379,12 +380,13 @@ private static Method findGetter(Method setter) {\n \n     private static HtmlComponent createInstance(\n             Class<? extends HtmlComponent> clazz)\n-            throws InstantiationException, IllegalAccessException {\n+            throws InstantiationException, IllegalAccessException,\n+            NoSuchMethodException, InvocationTargetException {\n         Supplier<HtmlComponent> constructor = customConstructors.get(clazz);\n         if (constructor != null) {\n             return constructor.get();\n         } else {\n-            return clazz.newInstance();\n+            return clazz.getDeclaredConstructor().newInstance();\n         }\n     }\n \n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/InputTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/InputTest.java\nindex 22b5d4eef69..4fbfa65b125 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/InputTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/InputTest.java\n@@ -16,6 +16,8 @@\n package com.vaadin.flow.component.html;\n \n import java.beans.IntrospectionException;\n+import java.lang.reflect.InvocationTargetException;\n+\n import org.junit.Test;\n \n public class InputTest extends ComponentTest {\n@@ -24,7 +26,8 @@ public class InputTest extends ComponentTest {\n \n     @Override\n     public void setup() throws IntrospectionException, InstantiationException,\n-            IllegalAccessException, ClassNotFoundException {\n+            IllegalAccessException, ClassNotFoundException,\n+            InvocationTargetException, NoSuchMethodException {\n         whitelistProperty(\""valueChangeMode\"");\n         whitelistProperty(\""valueChangeTimeout\"");\n         super.setup();\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/NativeTableTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/NativeTableTest.java\nindex 54e3b675e90..8e75e559d89 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/NativeTableTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/NativeTableTest.java\n@@ -16,6 +16,7 @@\n package com.vaadin.flow.component.html;\n \n import java.beans.IntrospectionException;\n+import java.lang.reflect.InvocationTargetException;\n import java.util.List;\n \n import org.junit.Test;\n@@ -28,7 +29,8 @@ public class NativeTableTest extends ComponentTest {\n \n     @Override\n     public void setup() throws IntrospectionException, InstantiationException,\n-            IllegalAccessException, ClassNotFoundException {\n+            IllegalAccessException, ClassNotFoundException,\n+            InvocationTargetException, NoSuchMethodException {\n         whitelistProperty(\""captionText\"");\n         super.setup();\n     }\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/RangeInputTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/RangeInputTest.java\nindex 738ee83024c..8eb8de340a7 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/RangeInputTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/RangeInputTest.java\n@@ -19,6 +19,7 @@\n import org.junit.Test;\n \n import java.beans.IntrospectionException;\n+import java.lang.reflect.InvocationTargetException;\n \n public class RangeInputTest extends ComponentTest {\n \n@@ -26,7 +27,8 @@ public class RangeInputTest extends ComponentTest {\n \n     @Override\n     public void setup() throws IntrospectionException, InstantiationException,\n-            IllegalAccessException, ClassNotFoundException {\n+            IllegalAccessException, ClassNotFoundException,\n+            InvocationTargetException, NoSuchMethodException {\n         whitelistProperty(\""valueChangeMode\"");\n         whitelistProperty(\""valueChangeTimeout\"");\n         whitelistProperty(\""enabled\"");\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\nindex 129ee84eb1a..6c2eecb717e 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n@@ -15,6 +15,7 @@\n  */\n package com.vaadin.flow.server.frontend.scanner;\n \n+import java.lang.reflect.InvocationTargetException;\n import java.util.Collections;\n import java.util.LinkedHashSet;\n import java.util.Optional;\n@@ -245,7 +246,7 @@ public void extractsAndScansClassesFromMethodReferences() {\n \n     @Test\n     public void defaultThemeIsLoadedForExporters() throws Exception {\n-        FakeLumo.class.newInstance();\n+        FakeLumo.class.getDeclaredConstructor().newInstance();\n         Mockito.when(classFinder.getSubTypesOf(WebComponentExporter.class))\n                 .thenReturn(Stream.of(MyExporter.class)\n                         .collect(Collectors.toSet()));\n@@ -304,9 +305,9 @@ public void layoutClasses_collectedAsEntrypoint() {\n \n     @Test // #9861\n     public void visitedExporter_previousEntryPointsNotOverridden()\n-            throws InstantiationException, IllegalAccessException {\n+            throws Exception {\n \n-        FakeLumo.class.newInstance();\n+        FakeLumo.class.getDeclaredConstructor().newInstance();\n         // Reference found through first entry point\n         Mockito.when(classFinder.getAnnotatedClasses(Route.class))\n                 .thenReturn(Collections.singleton(ReferenceExporter.class));\n\ndiff --git a/flow-tests/test-frontend/test-bun/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java b/flow-tests/test-frontend/test-bun/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\nindex 9500001334e..e0430306c4f 100644\n--- a/flow-tests/test-frontend/test-bun/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\n+++ b/flow-tests/test-frontend/test-bun/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\n@@ -44,7 +44,7 @@ public MissingDependenciesView() {\n         try {\n             Component unreferenced = (Component) Class.forName(\n                     \""com.vaadin.flow.mixedtest.ui.MissingDependenciesView$Unreferenced\"")\n-                    .newInstance();\n+                    .getDeclaredConstructor().newInstance();\n \n             // Uncomment to test behavior when the component is referenced\n             // new Unreferenced();\n\ndiff --git a/flow-tests/test-frontend/test-npm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java b/flow-tests/test-frontend/test-npm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\nindex 9500001334e..e0430306c4f 100644\n--- a/flow-tests/test-frontend/test-npm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\n+++ b/flow-tests/test-frontend/test-npm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\n@@ -44,7 +44,7 @@ public MissingDependenciesView() {\n         try {\n             Component unreferenced = (Component) Class.forName(\n                     \""com.vaadin.flow.mixedtest.ui.MissingDependenciesView$Unreferenced\"")\n-                    .newInstance();\n+                    .getDeclaredConstructor().newInstance();\n \n             // Uncomment to test behavior when the component is referenced\n             // new Unreferenced();\n\ndiff --git a/flow-tests/test-frontend/test-pnpm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java b/flow-tests/test-frontend/test-pnpm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\nindex 9500001334e..e0430306c4f 100644\n--- a/flow-tests/test-frontend/test-pnpm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\n+++ b/flow-tests/test-frontend/test-pnpm/src/main/java/com/vaadin/flow/mixedtest/ui/MissingDependenciesView.java\n@@ -44,7 +44,7 @@ public MissingDependenciesView() {\n         try {\n             Component unreferenced = (Component) Class.forName(\n                     \""com.vaadin.flow.mixedtest.ui.MissingDependenciesView$Unreferenced\"")\n-                    .newInstance();\n+                    .getDeclaredConstructor().newInstance();\n \n             // Uncomment to test behavior when the component is referenced\n             // new Unreferenced();\n\ndiff --git a/flow-tests/test-frontend/vite-test-assets/src/main/java/com/vaadin/viteapp/views/template/TemplateView.java b/flow-tests/test-frontend/vite-test-assets/src/main/java/com/vaadin/viteapp/views/template/TemplateView.java\nindex 71008571b04..ef05bd10eae 100644\n--- a/flow-tests/test-frontend/vite-test-assets/src/main/java/com/vaadin/viteapp/views/template/TemplateView.java\n+++ b/flow-tests/test-frontend/vite-test-assets/src/main/java/com/vaadin/viteapp/views/template/TemplateView.java\n@@ -38,7 +38,7 @@ public TemplateView() {\n         try {\n             Class<?> clazz = Class.forName(\n                     \""com.vaadin.viteapp.views.template.ReflectivelyReferencedComponent\"");\n-            add((Component) clazz.newInstance());\n+            add((Component) clazz.getDeclaredConstructor().newInstance());\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n\ndiff --git a/flow-tests/test-npm-only-features/test-npm-bytecode-scanning/src/main/java/com/vaadin/flow/testnpmonlyfeatures/bytecodescanning/ByteCodeScanningView.java b/flow-tests/test-npm-only-features/test-npm-bytecode-scanning/src/main/java/com/vaadin/flow/testnpmonlyfeatures/bytecodescanning/ByteCodeScanningView.java\nindex 09ab1309096..5edf84acd6e 100644\n--- a/flow-tests/test-npm-only-features/test-npm-bytecode-scanning/src/main/java/com/vaadin/flow/testnpmonlyfeatures/bytecodescanning/ByteCodeScanningView.java\n+++ b/flow-tests/test-npm-only-features/test-npm-bytecode-scanning/src/main/java/com/vaadin/flow/testnpmonlyfeatures/bytecodescanning/ByteCodeScanningView.java\n@@ -27,7 +27,8 @@ public class ByteCodeScanningView extends Div {\n     public ByteCodeScanningView() throws Exception {\n         Class<?> clazz = Class.forName(\n                 \""com.vaadin.flow.testnpmonlyfeatures.bytecodescanning.MyButton\"");\n-        Component button = (Component) clazz.newInstance();\n+        Component button = (Component) clazz.getDeclaredConstructor()\n+                .newInstance();\n         button.setId(COMPONENT_ID);\n         add(button);\n     }\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/SerializationTest.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/SerializationTest.java\nindex 15854e0a1c5..acdc94e3f3f 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/SerializationTest.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/SerializationTest.java\n@@ -40,7 +40,8 @@ public void testViewsSerializable() throws Exception {\n             Collection<Class<? extends Component>> viewClasses = new ViewClassLocator(\n                     getClass().getClassLoader()).getAllViewClasses();\n             for (Class<? extends Component> viewClass : viewClasses) {\n-                Component view = viewClass.newInstance();\n+                Component view = viewClass.getDeclaredConstructor()\n+                        .newInstance();\n                 // view.onLocationChange(new LocationChangeEvent(new Router(),\n                 // ui,\n                 // NavigationTrigger.PROGRAMMATIC, new Location(\""\""),\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/ToStringTest.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/ToStringTest.java\nindex 03bf658567e..ec228f882a6 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/ToStringTest.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/ui/ToStringTest.java\n@@ -29,7 +29,7 @@ public void testViewsElementsStringable() throws Exception {\n         Collection<Class<? extends Component>> viewClasses = new ViewClassLocator(\n                 getClass().getClassLoader()).getAllViewClasses();\n         for (Class<? extends Component> viewClass : viewClasses) {\n-            Component view = viewClass.newInstance();\n+            Component view = viewClass.getDeclaredConstructor().newInstance();\n             String string = view.getElement().toString();\n             Assert.assertNotNull(string);\n             Assert.assertNotEquals(\""\"", string);\n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerClassLoaderTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerClassLoaderTest.java\nindex ec1528738f0..8f5911142aa 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerClassLoaderTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerClassLoaderTest.java\n@@ -35,7 +35,7 @@ public void should_loadResources_from_customClassLoader() throws Exception {\n         // Load the base class with the custom loader\n         Class<?> clz = customLoader\n                 .loadClass(DevModeInitializerTestBase.class.getName());\n-        Object initializer = clz.newInstance();\n+        Object initializer = clz.getDeclaredConstructor().newInstance();\n \n         // Since base class was created using a different classLoader,\n         // its methods and fields need to be called using reflection\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21687"", ""pr_id"": 21687, ""issue_id"": 21562, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Replace deprecated APIs in vaadin-spring\nSince Spring Boot 3.5, some APIs used in `vaadin-spring` are deprecated and will be removed in the future.\nOne example is `AntPathRequestMatcher` (to be removed in Spring Security 7) used by `VaadinWebSecurity` and `VaadinSecurityConfigurer`, that should be replaced by the new `PathPatternRequestMatcher`.\n\nAll deprecated classes and methods used in `vaadin-spring` should be replaced in Flow 25."", ""issue_word_count"": 65, ""test_files_count"": 8, ""non_test_files_count"": 5, ""pr_changed_files"": [""vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java"", ""vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCache.java"", ""vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java"", ""vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java"", ""vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilPathAccessTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/SpringAccessPathCheckerTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/UrlMappingSpringAccessPathCheckerTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCacheTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/stateless/JwtStatelessAuthenticationTest.java""], ""pr_changed_test_files"": [""vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilPathAccessTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/SpringAccessPathCheckerTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/UrlMappingSpringAccessPathCheckerTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCacheTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/stateless/JwtStatelessAuthenticationTest.java""], ""base_commit"": ""c70658c27a329b564306401ac24fa2ecd2993ac3"", ""head_commit"": ""daa33432001ebbf6217c12add8cfa6b88934f446"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21687"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21687"", ""dockerfile"": """", ""pr_merged_at"": ""2025-06-18T06:28:27.000Z"", ""patch"": ""diff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java\nindex 227866c643b..3e4add854d0 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java\n@@ -1,16 +1,16 @@\n package com.vaadin.flow.spring.security;\n \n-import jakarta.servlet.http.HttpServletRequest;\n-\n import java.util.Optional;\n import java.util.stream.Stream;\n \n+import jakarta.servlet.http.HttpServletRequest;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.web.servlet.ServletRegistrationBean;\n import org.springframework.http.HttpMethod;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n import org.springframework.security.web.util.matcher.RequestMatcher;\n import org.springframework.stereotype.Component;\n@@ -176,12 +176,27 @@ public boolean isCustomWebIcon(HttpServletRequest request) {\n \n     /**\n      * Utility to create {@link RequestMatcher}s from ant patterns.\n+     * <p>\n+     * Since {@link AntPathRequestMatcher} is deprecated and will be removed,\n+     * callers of this method should be updated to use\n+     * {@link PathPatternRequestMatcher} instead.\n+     *\n+     * <pre>\n+     * {@code\n+     *  var matcherBuilder = PathPatternRequestMatcher.withDefaults():\n+     *  var requestMatcher = matcherBuilder.match(path);\n+     * }\n+     * </pre>\n      *\n      * @param patterns\n      *            and patterns\n      * @return an array or {@link RequestMatcher} instances for the given\n      *         patterns.\n+     * @deprecated {@code AntPathRequestMatcher} is deprecated and marked for\n+     *             removal. This method is deprecated without direct\n+     *             replacement; use {@code PathPatternRequestMatcher} instead.\n      */\n+    @Deprecated(since = \""24.8\"", forRemoval = true)\n     public static RequestMatcher[] antMatchers(String... patterns) {\n         return Stream.of(patterns).map(AntPathRequestMatcher::new)\n                 .toArray(RequestMatcher[]::new);\n@@ -190,12 +205,27 @@ public static RequestMatcher[] antMatchers(String... patterns) {\n     /**\n      * Utility to create {@link RequestMatcher}s for a Vaadin routes, using ant\n      * patterns and HTTP get method.\n+     * <p>\n+     * Since {@link AntPathRequestMatcher} is deprecated and will be removed,\n+     * callers of this method should be updated to use\n+     * {@link PathPatternRequestMatcher} instead.\n+     *\n+     * <pre>\n+     * {@code\n+     *  var matcherBuilder = PathPatternRequestMatcher.withDefaults():\n+     *  var requestMatcher = matcherBuilder.match(HttpMethod.GET, path);\n+     * }\n+     * </pre>\n      *\n      * @param patterns\n-     *            and patterns\n+     *            ANT patterns\n      * @return an array or {@link RequestMatcher} instances for the given\n      *         patterns.\n+     * @deprecated {@code AntPathRequestMatcher} is deprecated and marked for\n+     *             removal. This method is deprecated without direct\n+     *             replacement; use {@code PathPatternRequestMatcher} instead.\n      */\n+    @Deprecated(since = \""24.8\"", forRemoval = true)\n     public static RequestMatcher[] routeMatchers(String... patterns) {\n         return Stream.of(patterns)\n                 .map(p -> AntPathRequestMatcher.antMatcher(HttpMethod.GET, p))\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCache.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCache.java\nindex 460d13e2d7b..ec76cfbc10b 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCache.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCache.java\n@@ -29,7 +29,7 @@\n import org.springframework.security.web.savedrequest.HttpSessionRequestCache;\n import org.springframework.security.web.savedrequest.RequestCache;\n import org.springframework.security.web.savedrequest.SavedRequest;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.security.web.util.matcher.MediaTypeRequestMatcher;\n import org.springframework.security.web.util.matcher.OrRequestMatcher;\n import org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher;\n@@ -189,9 +189,9 @@ public void ignoreRequests(RequestMatcher requestMatcher) {\n      * Rules adapted from Spring Security's RequestCacheConfigurer\n      */\n     private static RequestMatcher createDefaultIgnoreRules() {\n-        RequestMatcher favIcon = new AntPathRequestMatcher(\""/**/favicon.*\"");\n-        RequestMatcher wellKnown = new AntPathRequestMatcher(\n-                \""/**/.well-known/**\"");\n+        var matcherBuilder = PathPatternRequestMatcher.withDefaults();\n+        RequestMatcher favIcon = matcherBuilder.matcher(\""/favicon.*\"");\n+        RequestMatcher wellKnown = matcherBuilder.matcher(\""/.well-known/**\"");\n         RequestMatcher xhrRequestedWith = new RequestHeaderRequestMatcher(\n                 \""X-Requested-With\"", \""XMLHttpRequest\"");\n         List<RequestMatcher> matchers = new ArrayList<>();\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java\nindex aa365e3e76c..b9e01f5c978 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java\n@@ -15,14 +15,13 @@\n  */\n package com.vaadin.flow.spring.security;\n \n-import jakarta.servlet.ServletContext;\n-\n import java.util.ArrayList;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Optional;\n import java.util.function.Consumer;\n \n+import jakarta.servlet.ServletContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationContext;\n@@ -53,8 +52,8 @@\n import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n import org.springframework.security.web.csrf.CsrfException;\n import org.springframework.security.web.savedrequest.RequestCache;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n import org.springframework.security.web.util.matcher.RequestMatcher;\n import org.springframework.security.web.util.matcher.RequestMatchers;\n@@ -629,8 +628,8 @@ private void customizeCsrf(CsrfConfigurer<HttpSecurity> configurer) {\n                     getRequestUtil()::isFrameworkInternalRequest);\n         }\n         if (formLoginPage != null) {\n-            configurer.ignoringRequestMatchers(\n-                    new AntPathRequestMatcher(formLoginPage));\n+            configurer.ignoringRequestMatchers(PathPatternRequestMatcher\n+                    .withDefaults().matcher(formLoginPage));\n         }\n     }\n \n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java\nindex 5ee7ae04d6f..5b3f50a4512 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinWebSecurity.java\n@@ -15,21 +15,20 @@\n  */\n package com.vaadin.flow.spring.security;\n \n-import jakarta.annotation.PostConstruct;\n-import jakarta.servlet.ServletException;\n-import jakarta.servlet.http.HttpServletRequest;\n-import jakarta.servlet.http.HttpServletResponse;\n-\n import javax.crypto.SecretKey;\n-\n import java.io.IOException;\n+import java.util.ArrayList;\n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Objects;\n import java.util.Optional;\n import java.util.function.Consumer;\n-import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import jakarta.annotation.PostConstruct;\n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.http.HttpServletRequest;\n+import jakarta.servlet.http.HttpServletResponse;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -37,6 +36,7 @@\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Import;\n+import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n@@ -58,7 +58,7 @@\n import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n import org.springframework.security.web.csrf.CsrfException;\n import org.springframework.security.web.savedrequest.RequestCache;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n import org.springframework.security.web.util.matcher.OrRequestMatcher;\n import org.springframework.security.web.util.matcher.RequestMatcher;\n@@ -295,13 +295,14 @@ public static RequestMatcher getDefaultHttpSecurityPermitMatcher(\n             String urlMapping) {\n         Objects.requireNonNull(urlMapping,\n                 \""Vaadin servlet url mapping is required\"");\n-        Stream.Builder<String> paths = Stream.builder();\n-        Stream.of(HandlerHelper.getPublicResourcesRequiringSecurityContext())\n+        PathPatternRequestMatcher.Builder builder = PathPatternRequestMatcher\n+                .withDefaults();\n+        String[] paths = HandlerHelper\n+                .getPublicResourcesRequiringSecurityContext();\n+        assert paths.length > 0;\n+        return new OrRequestMatcher(Stream.of(paths)\n                 .map(path -> RequestUtil.applyUrlMapping(urlMapping, path))\n-                .forEach(paths::add);\n-\n-        return new OrRequestMatcher(paths.build()\n-                .map(AntPathRequestMatcher::new).collect(Collectors.toList()));\n+                .map(builder::matcher).toArray(RequestMatcher[]::new));\n     }\n \n     /**\n@@ -329,14 +330,25 @@ public static RequestMatcher getDefaultWebSecurityIgnoreMatcher(\n             String urlMapping) {\n         Objects.requireNonNull(urlMapping,\n                 \""Vaadin servlet url mapping is required\"");\n-        Stream<String> mappingRelativePaths = Stream\n-                .of(HandlerHelper.getPublicResources())\n-                .map(path -> RequestUtil.applyUrlMapping(urlMapping, path));\n-        Stream<String> rootPaths = Stream\n-                .of(HandlerHelper.getPublicResourcesRoot());\n-        return new OrRequestMatcher(Stream\n-                .concat(mappingRelativePaths, rootPaths)\n-                .map(AntPathRequestMatcher::new).collect(Collectors.toList()));\n+\n+        List<RequestMatcher> matchers = new ArrayList<>();\n+        PathPatternRequestMatcher.Builder builder = PathPatternRequestMatcher\n+                .withDefaults();\n+\n+        String[] publicResources = HandlerHelper.getPublicResources();\n+        assert publicResources.length > 0;\n+\n+        Stream.of(publicResources)\n+                .map(path -> RequestUtil.applyUrlMapping(urlMapping, path))\n+                .map(builder::matcher).forEach(matchers::add);\n+\n+        String[] publicResourcesRoot = HandlerHelper.getPublicResourcesRoot();\n+        assert publicResourcesRoot.length > 0;\n+\n+        Stream.of(publicResourcesRoot).map(builder::matcher)\n+                .forEach(matchers::add);\n+\n+        return new OrRequestMatcher(matchers);\n     }\n \n     /**\n@@ -346,7 +358,10 @@ public static RequestMatcher getDefaultWebSecurityIgnoreMatcher(\n      *            ant patterns\n      * @return an array or {@link RequestMatcher} instances for the given\n      *         patterns.\n+     * @deprecated AntPathRequestMatcher is deprecated and will be removed, use\n+     *             {@link #pathMatchers(String...)} instead.\n      */\n+    @Deprecated(since = \""24.8\"", forRemoval = true)\n     public RequestMatcher[] antMatchers(String... patterns) {\n         return RequestUtil.antMatchers(patterns);\n     }\n@@ -359,12 +374,54 @@ public RequestMatcher[] antMatchers(String... patterns) {\n      *            ant patterns\n      * @return an array or {@link RequestMatcher} instances for the given\n      *         patterns.\n+     * @deprecated AntPathRequestMatcher is deprecated and will be removed, use\n+     *             {@link #routePathMatchers(String...)} instead.\n      */\n+    @Deprecated(since = \""24.8\"", forRemoval = true)\n     public RequestMatcher[] routeMatchers(String... patterns) {\n         return RequestUtil.routeMatchers(Stream.of(patterns)\n                 .map(this::applyUrlMapping).toArray(String[]::new));\n     }\n \n+    /**\n+     * Utility to create {@link RequestMatcher}s from path patterns.\n+     *\n+     * @param patterns\n+     *            path patterns, as described in\n+     *            {@link org.springframework.web.util.pattern.PathPattern}\n+     *            javadoc.\n+     * @return an array or {@link RequestMatcher} instances for the given\n+     *         patterns.\n+     * @see org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher#matcher(HttpServletRequest)\n+     * @see org.springframework.web.util.pattern.PathPattern\n+     */\n+    public RequestMatcher[] pathMatchers(String... patterns) {\n+        PathPatternRequestMatcher.Builder builder = PathPatternRequestMatcher\n+                .withDefaults();\n+        return Stream.of(patterns).map(builder::matcher)\n+                .toArray(RequestMatcher[]::new);\n+    }\n+\n+    /**\n+     * Utility to create {@link RequestMatcher}s for a Vaadin routes, using ant\n+     * patterns and HTTP get method.\n+     *\n+     * @param patterns\n+     *            path patterns, as described in\n+     *            {@link org.springframework.web.util.pattern.PathPattern}\n+     *            javadoc.\n+     * @return an array or {@link RequestMatcher} instances for the given\n+     *         patterns.\n+     * @see org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher#matcher(HttpServletRequest)\n+     * @see org.springframework.web.util.pattern.PathPattern\n+     */\n+    public RequestMatcher[] routePathMatchers(String... patterns) {\n+        PathPatternRequestMatcher.Builder builder = PathPatternRequestMatcher\n+                .withDefaults();\n+        return Stream.of(patterns).map(p -> builder.matcher(HttpMethod.GET, p))\n+                .toArray(RequestMatcher[]::new);\n+    }\n+\n     /**\n      * Sets up login for the application using form login with the given path\n      * for the login view.\n@@ -489,8 +546,8 @@ protected void setLoginView(HttpSecurity http,\n                     getVaadinSavedRequestAwareAuthenticationSuccessHandler(\n                             http));\n         });\n-        http.csrf(cfg -> cfg.ignoringRequestMatchers(\n-                new AntPathRequestMatcher(completeLoginPath)));\n+        http.csrf(cfg -> cfg.ignoringRequestMatchers(PathPatternRequestMatcher\n+                .withDefaults().matcher(completeLoginPath)));\n         configureLogout(http, logoutSuccessUrl);\n         http.exceptionHandling(cfg -> cfg.defaultAuthenticationEntryPointFor(\n                 new LoginUrlAuthenticationEntryPoint(completeLoginPath),\n@@ -634,7 +691,7 @@ protected void setStatelessAuthentication(HttpSecurity http,\n     protected void setStatelessAuthentication(HttpSecurity http,\n             SecretKey secretKey, String issuer, long expiresIn)\n             throws Exception {\n-        VaadinStatelessSecurityConfigurer.apply(http,\n+        http.with(new VaadinStatelessSecurityConfigurer<>(),\n                 cfg -> cfg.withSecretKey().secretKey(secretKey).and()\n                         .issuer(issuer).expiresIn(expiresIn));\n     }\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java\nindex eae01b81d42..03c72eb1808 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/stateless/VaadinStatelessSecurityConfigurer.java\n@@ -15,13 +15,7 @@\n  */\n package com.vaadin.flow.spring.security.stateless;\n \n-import jakarta.servlet.FilterChain;\n-import jakarta.servlet.ServletException;\n-import jakarta.servlet.http.HttpServletRequest;\n-import jakarta.servlet.http.HttpServletResponse;\n-\n import javax.crypto.SecretKey;\n-\n import java.io.IOException;\n \n import com.nimbusds.jose.JWSAlgorithm;\n@@ -29,6 +23,10 @@\n import com.nimbusds.jose.jwk.OctetSequenceKey;\n import com.nimbusds.jose.jwk.source.JWKSource;\n import com.nimbusds.jose.proc.SecurityContext;\n+import jakarta.servlet.FilterChain;\n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.http.HttpServletRequest;\n+import jakarta.servlet.http.HttpServletResponse;\n import org.springframework.security.authentication.AuthenticationTrustResolver;\n import org.springframework.security.authentication.AuthenticationTrustResolverImpl;\n import org.springframework.security.config.Customizer;\n@@ -45,7 +43,6 @@\n import org.springframework.security.web.csrf.CookieCsrfTokenRepository;\n import org.springframework.security.web.csrf.CsrfTokenRepository;\n import org.springframework.security.web.csrf.CsrfTokenRequestHandler;\n-import org.springframework.security.web.csrf.LazyCsrfTokenRepository;\n import org.springframework.security.web.csrf.XorCsrfTokenRequestAttributeHandler;\n import org.springframework.security.web.header.HeaderWriterFilter;\n import org.springframework.security.web.savedrequest.CookieRequestCache;\n@@ -67,8 +64,7 @@\n  * <li>{@link SecurityContextRepository} is populated with a\n  * {@link JwtSecurityContextRepository}</li>\n  * <li>{@link CsrfConfigurer#csrfTokenRepository(CsrfTokenRepository)} is used\n- * to set {@link LazyCsrfTokenRepository} that delegates to\n- * {@link CookieCsrfTokenRepository}</li>\n+ * to set {@link CookieCsrfTokenRepository}</li>\n  * </ul>\n  *\n  * <h2>Shared Objects Used</h2>\n@@ -130,29 +126,37 @@ public void setSharedObjects(HttpSecurity http) {\n      * @param customizer\n      *            the {@link Customizer} to provide more options for the\n      *            {@link VaadinStatelessSecurityConfigurer}\n+     * @deprecated use\n+     *             {@code http.with(new VaadinStatelessSecurityConfigurer(), customizer)}\n+     *             instead.\n      */\n+    @Deprecated(since = \""24.8\"", forRemoval = true)\n     public static void apply(HttpSecurity http,\n             Customizer<VaadinStatelessSecurityConfigurer<HttpSecurity>> customizer)\n             throws Exception {\n-\n-        JwtSecurityContextRepository jwtSecurityContextRepository = new JwtSecurityContextRepository(\n-                new SerializedJwtSplitCookieRepository());\n-        http.setSharedObject(JwtSecurityContextRepository.class,\n-                jwtSecurityContextRepository);\n-        http.securityContext(cfg -> {\n-            DelegatingSecurityContextRepository repository = new DelegatingSecurityContextRepository(\n-                    jwtSecurityContextRepository,\n-                    new RequestAttributeSecurityContextRepository());\n-            cfg.securityContextRepository(repository);\n-        });\n-\n         VaadinStatelessSecurityConfigurer<HttpSecurity> vaadinStatelessSecurityConfigurer = new VaadinStatelessSecurityConfigurer<>();\n         http.with(vaadinStatelessSecurityConfigurer, customizer);\n     }\n \n     @Override\n     @SuppressWarnings(\""unchecked\"")\n-    public void init(H http) {\n+    public void init(H http) throws Exception {\n+\n+        JwtSecurityContextRepository jwtSecurityContextRepository = new JwtSecurityContextRepository(\n+                new SerializedJwtSplitCookieRepository());\n+        http.setSharedObject(JwtSecurityContextRepository.class,\n+                jwtSecurityContextRepository);\n+        // This class should not be parameterized but only accept HttpSecurity\n+        // It has not been refactored for compatibility reason. The following\n+        // cast is only a hack to work around the generic type definition.\n+        if (http instanceof HttpSecurity httpSecurity) {\n+            httpSecurity.securityContext(cfg -> {\n+                DelegatingSecurityContextRepository repository = new DelegatingSecurityContextRepository(\n+                        jwtSecurityContextRepository,\n+                        new RequestAttributeSecurityContextRepository());\n+                cfg.securityContextRepository(repository);\n+            });\n+        }\n \n         CsrfConfigurer<H> csrf = http.getConfigurer(CsrfConfigurer.class);\n         if (csrf != null) {\n"", ""test_patch"": ""diff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java\nindex 53cca31405c..311d90dd252 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringViewAccessCheckerTest.java\n@@ -7,30 +7,30 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Function;\n \n-import com.vaadin.flow.component.Component;\n-import com.vaadin.flow.router.BeforeEnterEvent;\n-import com.vaadin.flow.server.auth.AccessAnnotationChecker;\n-import com.vaadin.flow.server.auth.ViewAccessChecker;\n-\n import org.junit.Assert;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.context.SecurityContext;\n import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.context.bean.override.mockito.MockitoBean;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.router.BeforeEnterEvent;\n+import com.vaadin.flow.server.auth.AccessAnnotationChecker;\n+import com.vaadin.flow.server.auth.ViewAccessChecker;\n \n @SpringBootTest(classes = { SpringViewAccessChecker.class })\n @Deprecated(forRemoval = true)\n class SpringViewAccessCheckerTest {\n \n-    @MockBean\n+    @MockitoBean\n     private AccessAnnotationChecker annotationChecker;\n-    @MockBean\n+    @MockitoBean\n     private Authentication authentication;\n \n     @Autowired\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilPathAccessTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilPathAccessTest.java\nindex 3eacb90cc70..b4eb7933383 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilPathAccessTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilPathAccessTest.java\n@@ -29,11 +29,11 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.context.TestConfiguration;\n-import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.boot.web.servlet.ServletRegistrationBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.bean.override.mockito.MockitoBean;\n import org.springframework.test.context.junit4.SpringRunner;\n \n import com.vaadin.flow.component.Component;\n@@ -72,13 +72,13 @@ public class RequestUtilPathAccessTest {\n     @Autowired\n     NavigationAccessControl accessControl;\n \n-    @MockBean\n+    @MockitoBean\n     VaadinConfigurationProperties vaadinConfigurationProperties;\n \n-    @MockBean\n+    @MockitoBean\n     private ServletRegistrationBean<SpringServlet> springServletRegistration;\n \n-    @MockBean\n+    @MockitoBean\n     private AccessPathChecker accessPathChecker;\n \n     @Before\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilTest.java\nindex 41ce59cc5a4..6c5450926ef 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/RequestUtilTest.java\n@@ -1,11 +1,10 @@\n package com.vaadin.flow.spring.security;\n \n-import jakarta.annotation.security.RolesAllowed;\n-\n import java.util.Collections;\n import java.util.Map;\n import java.util.Optional;\n \n+import jakarta.annotation.security.RolesAllowed;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -14,10 +13,10 @@\n import org.mockito.Mockito;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.boot.web.servlet.ServletRegistrationBean;\n import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.bean.override.mockito.MockitoBean;\n import org.springframework.test.context.junit4.SpringRunner;\n \n import com.vaadin.flow.component.Component;\n@@ -55,13 +54,13 @@ public class RequestUtilTest {\n     @Autowired\n     NavigationAccessControl accessControl;\n \n-    @MockBean\n+    @MockitoBean\n     VaadinConfigurationProperties vaadinConfigurationProperties;\n \n-    @MockBean\n+    @MockitoBean\n     private RoutePathAccessChecker accessPathChecker;\n \n-    @MockBean\n+    @MockitoBean\n     private ServletRegistrationBean<SpringServlet> springServletRegistration;\n \n     @Before\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/SpringAccessPathCheckerTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/SpringAccessPathCheckerTest.java\nindex 39554b731de..63985fe1d89 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/SpringAccessPathCheckerTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/SpringAccessPathCheckerTest.java\n@@ -29,8 +29,10 @@\n import org.springframework.security.test.context.support.WithAnonymousUser;\n import org.springframework.security.test.context.support.WithMockUser;\n import org.springframework.security.web.SecurityFilterChain;\n+import org.springframework.security.web.access.AuthorizationManagerWebInvocationPrivilegeEvaluator;\n+import org.springframework.security.web.access.PathPatternRequestTransformer;\n import org.springframework.security.web.access.WebInvocationPrivilegeEvaluator;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit.jupiter.web.SpringJUnitWebConfig;\n \n@@ -157,18 +159,24 @@ SpringAccessPathChecker rootPathAccessChecker(\n             return new SpringAccessPathChecker(evaluator);\n         }\n \n+        @Bean\n+        AuthorizationManagerWebInvocationPrivilegeEvaluator.HttpServletRequestTransformer httpServletRequestTransformer() {\n+            return new PathPatternRequestTransformer();\n+        }\n+\n         @Bean\n         public SecurityFilterChain testingFilterChain(HttpSecurity http)\n                 throws Exception {\n             // @formatter:off\n+            var matcherBuilder = PathPatternRequestMatcher.withDefaults();\n             http.authorizeHttpRequests(cfg -> cfg\n-                    .requestMatchers(new AntPathRequestMatcher(\""/\"")).anonymous()\n-                    .requestMatchers(new AntPathRequestMatcher(\""/admin/**\"")).hasRole(\""ADMIN\"")\n-                    .requestMatchers(new AntPathRequestMatcher(\""/guest/**\"")).hasRole(\""GUEST\"")\n-                    .requestMatchers(new AntPathRequestMatcher(\""/protected/**\"")).authenticated()\n-                    .requestMatchers(new AntPathRequestMatcher(\""/anon/**\"")).anonymous()\n-                    .requestMatchers(new AntPathRequestMatcher(\""/public/**\"")).permitAll()\n-                    .requestMatchers(new AntPathRequestMatcher(\""/forbidden/**\"")).denyAll());\n+                    .requestMatchers(matcherBuilder.matcher(\""/\"")).anonymous()\n+                    .requestMatchers(matcherBuilder.matcher(\""/admin/**\"")).hasRole(\""ADMIN\"")\n+                    .requestMatchers(matcherBuilder.matcher(\""/guest/**\"")).hasRole(\""GUEST\"")\n+                    .requestMatchers(matcherBuilder.matcher(\""/protected/**\"")).authenticated()\n+                    .requestMatchers(matcherBuilder.matcher(\""/anon/**\"")).anonymous()\n+                    .requestMatchers(matcherBuilder.matcher(\""/public/**\"")).permitAll()\n+                    .requestMatchers(matcherBuilder.matcher(\""/forbidden/**\"")).denyAll());\n            // @formatter:on\n             return http.build();\n         }\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/UrlMappingSpringAccessPathCheckerTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/UrlMappingSpringAccessPathCheckerTest.java\nindex ba925055fa2..0e2d7d969e7 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/UrlMappingSpringAccessPathCheckerTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/UrlMappingSpringAccessPathCheckerTest.java\n@@ -29,8 +29,10 @@\n import org.springframework.security.test.context.support.WithAnonymousUser;\n import org.springframework.security.test.context.support.WithMockUser;\n import org.springframework.security.web.SecurityFilterChain;\n+import org.springframework.security.web.access.AuthorizationManagerWebInvocationPrivilegeEvaluator;\n+import org.springframework.security.web.access.PathPatternRequestTransformer;\n import org.springframework.security.web.access.WebInvocationPrivilegeEvaluator;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit.jupiter.web.SpringJUnitWebConfig;\n \n@@ -157,18 +159,24 @@ SpringAccessPathChecker urlMappingPpathAccessChecker(\n             return new SpringAccessPathChecker(evaluator, \""/url-mapping/*\"");\n         }\n \n+        @Bean\n+        AuthorizationManagerWebInvocationPrivilegeEvaluator.HttpServletRequestTransformer httpServletRequestTransformer() {\n+            return new PathPatternRequestTransformer();\n+        }\n+\n         @Bean\n         public SecurityFilterChain testingFilterChain(HttpSecurity http)\n                 throws Exception {\n             // @formatter:off\n+            var matcherBuilder = PathPatternRequestMatcher.withDefaults();\n             http.authorizeHttpRequests(cfg -> cfg\n-                    .requestMatchers(new AntPathRequestMatcher(\""/url-mapping/\"")).anonymous()\n-                    .requestMatchers(new AntPathRequestMatcher(\""/url-mapping/admin/**\"")).hasRole(\""ADMIN\"")\n-                    .requestMatchers(new AntPathRequestMatcher(\""/url-mapping/guest/**\"")).hasRole(\""GUEST\"")\n-                    .requestMatchers(new AntPathRequestMatcher(\""/url-mapping/protected/**\"")).authenticated()\n-                    .requestMatchers(new AntPathRequestMatcher(\""/url-mapping/anon/**\"")).anonymous()\n-                    .requestMatchers(new AntPathRequestMatcher(\""/url-mapping/public/**\"")).permitAll()\n-                    .requestMatchers(new AntPathRequestMatcher(\""/url-mapping/forbidden/**\"")).denyAll());\n+                    .requestMatchers(matcherBuilder.matcher(\""/url-mapping/\"")).anonymous()\n+                    .requestMatchers(matcherBuilder.matcher(\""/url-mapping/admin/**\"")).hasRole(\""ADMIN\"")\n+                    .requestMatchers(matcherBuilder.matcher(\""/url-mapping/guest/**\"")).hasRole(\""GUEST\"")\n+                    .requestMatchers(matcherBuilder.matcher(\""/url-mapping/protected/**\"")).authenticated()\n+                    .requestMatchers(matcherBuilder.matcher(\""/url-mapping/anon/**\"")).anonymous()\n+                    .requestMatchers(matcherBuilder.matcher(\""/url-mapping/public/**\"")).permitAll()\n+                    .requestMatchers(matcherBuilder.matcher(\""/url-mapping/forbidden/**\"")).denyAll());\n             // @formatter:on\n             return http.build();\n         }\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCacheTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCacheTest.java\nindex b40b29a0474..427747af49e 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCacheTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinDefaultRequestCacheTest.java\n@@ -15,7 +15,7 @@\n import org.springframework.security.web.savedrequest.HttpSessionRequestCache;\n import org.springframework.security.web.savedrequest.RequestCache;\n import org.springframework.security.web.savedrequest.SavedRequest;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringRunner;\n \n@@ -135,7 +135,8 @@ public void scriptRequest_requestNotSaved() {\n \n     @Test\n     public void customMatchers_requestNotSaved() {\n-        cache.ignoreRequests(new AntPathRequestMatcher(\""/dont-save/**\""));\n+        cache.ignoreRequests(PathPatternRequestMatcher.withDefaults()\n+                .matcher(\""/dont-save/**\""));\n         HttpServletRequest request = RequestUtilTest\n                 .createRequest(\""/dont-save/me\"", null);\n         HttpServletResponse response = createResponse();\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java\nindex 0da6506b169..7f5df41abac 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java\n@@ -4,7 +4,6 @@\n import java.util.Map;\n \n import jakarta.servlet.FilterChain;\n-import jakarta.servlet.http.HttpServletRequest;\n import jakarta.servlet.http.HttpServletResponse;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n@@ -43,7 +42,7 @@\n import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n import org.springframework.security.web.csrf.CsrfFilter;\n import org.springframework.security.web.savedrequest.RequestCacheAwareFilter;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.bean.override.mockito.MockitoBean;\n@@ -60,7 +59,6 @@\n import static org.assertj.core.api.Assertions.assertThatCode;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n \n @WebAppConfiguration\n @ContextConfiguration(classes = { SpringBootAutoConfiguration.class,\n@@ -80,9 +78,6 @@ class VaadinSecurityConfigurerTest {\n     @MockitoBean\n     private ClientRegistrationRepository clientRegistrationRepository;\n \n-    @Mock\n-    private HttpServletRequest request;\n-\n     @Mock\n     private HttpServletResponse response;\n \n@@ -153,8 +148,8 @@ void logoutSuccessHandler_handlerIsConfigured(\n             @Mock LogoutSuccessHandler handler) throws Exception {\n         var auth = new UsernamePasswordAuthenticationToken(\""user\"", \""password\"");\n         SecurityContextHolder.getContext().setAuthentication(auth);\n-        when(request.getMethod()).thenReturn(\""POST\"");\n-        when(request.getPathInfo()).thenReturn(\""/logout\"");\n+        var request = new MockHttpServletRequest(\""POST\"", \""/logout\"");\n+        request.setPathInfo(\""/logout\"");\n \n         var filters = http.with(configurer, c -> {\n             c.logoutSuccessHandler(handler);\n@@ -172,8 +167,8 @@ void addLogoutHandler_handlerIsAdded(@Mock LogoutHandler handler)\n             throws Exception {\n         var auth = new UsernamePasswordAuthenticationToken(\""user\"", \""password\"");\n         SecurityContextHolder.getContext().setAuthentication(auth);\n-        when(request.getMethod()).thenReturn(\""POST\"");\n-        when(request.getPathInfo()).thenReturn(\""/logout\"");\n+        var request = new MockHttpServletRequest(\""POST\"", \""/logout\"");\n+        request.setPathInfo(\""/logout\"");\n \n         var filters = http.with(configurer, c -> {\n             c.addLogoutHandler(handler);\n@@ -191,7 +186,8 @@ void anyRequest_authorizeRuleIsConfigured() throws Exception {\n         var auth = new AnonymousAuthenticationToken(\""key\"", \""user\"",\n                 List.of(new SimpleGrantedAuthority(\""ROLE_ANONYMOUS\"")));\n         SecurityContextHolder.getContext().setAuthentication(auth);\n-        when(request.getPathInfo()).thenReturn(\""/any\"");\n+        var request = new MockHttpServletRequest(\""GET\"", \""/any\"");\n+        request.setPathInfo(\""/any\"");\n \n         var filters = http.with(configurer, c -> {\n             c.anyRequest(AuthorizedUrl::anonymous);\n@@ -240,11 +236,13 @@ void disableDefaultConfigurers_configurersAreNotApplied() throws Exception {\n     void requestCache_customRulesAreApplied() throws Exception {\n         VaadinDefaultRequestCache requestCache = applicationContext\n                 .getBean(VaadinDefaultRequestCache.class);\n-        requestCache.ignoreRequests(new AntPathRequestMatcher(\""/.my-path/**\""));\n+        requestCache.ignoreRequests(PathPatternRequestMatcher.withDefaults()\n+                .matcher(\""/.my-path/**\""));\n \n         http.with(configurer, Customizer.withDefaults()).build();\n \n-        MockHttpServletRequest request = new MockHttpServletRequest();\n+        MockHttpServletRequest request = new MockHttpServletRequest(\""GET\"",\n+                \""/.my-path/foo\"");\n         request.setPathInfo(\""/.my-path/foo\"");\n         requestCache.saveRequest(request, response);\n         assertNull(requestCache.getRequest(request, response),\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/stateless/JwtStatelessAuthenticationTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/stateless/JwtStatelessAuthenticationTest.java\nindex 85f3180c6b4..0d5b4f83d34 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/stateless/JwtStatelessAuthenticationTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/stateless/JwtStatelessAuthenticationTest.java\n@@ -16,21 +16,18 @@\n \n package com.vaadin.flow.spring.security.stateless;\n \n-import jakarta.servlet.http.Cookie;\n-import jakarta.servlet.http.HttpServletRequest;\n-\n import javax.crypto.spec.SecretKeySpec;\n-\n import java.util.Arrays;\n import java.util.Base64;\n \n+import jakarta.servlet.http.Cookie;\n+import jakarta.servlet.http.HttpServletRequest;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;\n import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.context.annotation.Bean;\n@@ -231,6 +228,7 @@ protected void configure(HttpSecurity http) throws Exception {\n \n         @Bean\n         UserDetailsService userDetailsService() {\n+            @SuppressWarnings(\""deprecation\"")\n             UserDetails user = User.withDefaultPasswordEncoder()\n                     .username(\""user\"").password(\""password\"").roles(\""USER\"")\n                     .build();\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21424"", ""pr_id"": 21424, ""issue_id"": 21366, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Make an Executor available through VaadinService\n### Describe your motivation\n\nOccasionally, there's a need to dispatch some task asynchronously. The specific case on my mind is for the new signals library where we want to invoke effect callbacks asynchronously so that the user posting a message to a chat room don't have to wait until all subscribers have been notified since that might take a while if there are e.g. 1000 of them.\n\n### Describe the solution you'd like\n\nAdd `public Executor getExecutor()` to `VaadinService`.\n\nThe application developer can implement a service init listener that sets a custom executor through the init event (so there should not be any setter in `VaadinService` to allow setting an executor after initialization). In that case, the developer is responsible for shutting down the executor.\n\nIf no executor is provided by the application developer, then a default is chosen based on what's available in the environment:\n* When running in a Spring environment and a `TaskExecutor` bean is available, then it is used.\n* When running in a CDI environment and a `ManagedExecutorService` bean is available, then it is used.\n* If no appropriate bean is available, then Vaadin creates a single thread executor with a thread factory that sets an appropriate thread name. The executor is configured to be shut down when the Vaadin service is destroyed. If this executor is used, then a warning should be logged the first time the executor is used. The purpose of the warning is to inform the developer that the application uses a default implementation that might not be tuned for production use.\n\n### Describe alternatives you've considered\n\nWe could consider further simplifying configuration for Spring and CDI environments by defining a custom bean name, e.g. `vaadinExecutor` that will be checked for and used in case the application defines a bean with that name."", ""issue_word_count"": 309, ""test_files_count"": 5, ""non_test_files_count"": 4, ""pr_changed_files"": [""flow-server/src/main/java/com/vaadin/flow/server/ServiceInitEvent.java"", ""flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java"", ""flow-server/src/test/java/com/vaadin/flow/server/MockVaadinServletService.java"", ""flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java"", ""flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java"", ""vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java"", ""vaadin-spring/src/main/java/com/vaadin/flow/spring/annotation/VaadinTaskExecutor.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/service/TestServletConfiguration.java""], ""pr_changed_test_files"": [""flow-server/src/test/java/com/vaadin/flow/server/MockVaadinServletService.java"", ""flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java"", ""flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/service/TestServletConfiguration.java""], ""base_commit"": ""ef98ac9f700ba5a23ae3b542748a563b9c1e245a"", ""head_commit"": ""6616a62805a35487bd528a25c91b359f0ec9eef8"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21424"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21424"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-16T10:28:37.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/server/ServiceInitEvent.java b/flow-server/src/main/java/com/vaadin/flow/server/ServiceInitEvent.java\nindex bac989ce79f..e0c4d5e5bae 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/ServiceInitEvent.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/ServiceInitEvent.java\n@@ -15,14 +15,16 @@\n  */\n package com.vaadin.flow.server;\n \n-import com.vaadin.flow.server.communication.IndexHtmlRequestListener;\n-\n import java.util.ArrayList;\n import java.util.EventObject;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Executor;\n import java.util.stream.Stream;\n \n+import com.vaadin.flow.server.communication.IndexHtmlRequestListener;\n+\n /**\n  * Event fired to {@link VaadinServiceInitListener} when a {@link VaadinService}\n  * is being initialized.\n@@ -39,6 +41,7 @@ public class ServiceInitEvent extends EventObject {\n     private List<IndexHtmlRequestListener> addedIndexHtmlRequestListeners = new ArrayList<>();\n     private List<DependencyFilter> addedDependencyFilters = new ArrayList<>();\n     private List<VaadinRequestInterceptor> addedVaadinRequestInterceptors = new ArrayList<>();\n+    private Executor executor;\n \n     /**\n      * Creates a new service init event for a given {@link VaadinService} and\n@@ -107,6 +110,27 @@ public void addVaadinRequestInterceptor(\n         addedVaadinRequestInterceptors.add(vaadinRequestInterceptor);\n     }\n \n+    /**\n+     * Sets the {@link Executor} to be used by Vaadin for running asynchronous\n+     * tasks.\n+     * <p>\n+     * The application can also benefit from this executor to submit its own\n+     * asynchronous tasks.\n+     * <p>\n+     * The developer is responsible for managing the executor's lifecycle, for\n+     * example, by registering a {@link VaadinService} destroy listener to shut\n+     * it down.\n+     * <p>\n+     * A {@literal null} value can be given to switch back to the Vaadin default\n+     * executor.\n+     *\n+     * @param executor\n+     *            the executor to set.\n+     */\n+    public void setExecutor(Executor executor) {\n+        this.executor = executor;\n+    }\n+\n     /**\n      * Gets a stream of all custom request handlers that have been added for the\n      * service.\n@@ -147,6 +171,17 @@ public Stream<VaadinRequestInterceptor> getAddedVaadinRequestInterceptor() {\n         return addedVaadinRequestInterceptors.stream();\n     }\n \n+    /**\n+     * Gets the optional {@link Executor} that is currently set to be used by\n+     * Vaadin for running asynchronous tasks.\n+     *\n+     * @return an {@link Optional} containing the {@link Executor}, or an empty\n+     *         {@link Optional} if no executor is set.\n+     */\n+    public Optional<Executor> getExecutor() {\n+        return Optional.ofNullable(executor);\n+    }\n+\n     @Override\n     public VaadinService getSource() {\n         return (VaadinService) super.getSource();\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java b/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\nindex ef5afdf8be0..9a8f9849f7a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/VaadinService.java\n@@ -41,8 +41,14 @@\n import java.util.concurrent.CancellationException;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Future;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantLock;\n import java.util.stream.Collectors;\n@@ -184,6 +190,10 @@ public abstract class VaadinService implements Serializable {\n \n     private Instantiator instantiator;\n \n+    private Executor executor;\n+\n+    private boolean defaultExecutorInUse;\n+\n     private VaadinContext vaadinContext;\n \n     private Iterable<VaadinRequestInterceptor> vaadinRequestInterceptors;\n@@ -267,6 +277,9 @@ public void init() throws ServiceException {\n             instantiator.getServiceInitListeners()\n                     .forEach(listener -> listener.serviceInit(event));\n \n+            this.executor = event.getExecutor()\n+                    .orElseGet(this::createDefaultExecutor);\n+\n             event.getAddedRequestHandlers().forEach(handlers::add);\n \n             Collections.reverse(handlers);\n@@ -293,6 +306,18 @@ public void init() throws ServiceException {\n                     .collect(Collectors.toList());\n         });\n \n+        if (this.executor == null) {\n+            throw new ServiceException(\n+                    \""Unable to create the default Executor for \""\n+                            + getClass().getName()\n+                            + \"". This is most likely a bug in a custom VaadinService implementation \""\n+                            + \""that overrides the createDefaultExecutor() method \""\n+                            + \""but returns a null Executor instance. \""\n+                            + \""As a workaround, you can register a \""\n+                            + VaadinServiceInitListener.class.getSimpleName()\n+                            + \"" providing a custom Executor instance.\"");\n+        }\n+\n         DeploymentConfiguration configuration = getDeploymentConfiguration();\n         if (!configuration.isProductionMode()) {\n             Logger logger = getLogger();\n@@ -503,6 +528,98 @@ public Instantiator getInstantiator() {\n         return instantiator;\n     }\n \n+    /**\n+     * Creates a default executor instance to use with this service.\n+     * <p>\n+     * This default implementation creates a thread pool executor with a custom\n+     * thread factory to generate daemon threads. It uses a core pool size of 8,\n+     * an unbounded maximum pool size, and a keep-alive time of 60 seconds for\n+     * idle threads. The thread pool grows dynamically as required, and idle\n+     * core threads are allowed to time out.\n+     * <p>\n+     * A custom {@link VaadinService} implementation can override this method to\n+     * provide its own ad-hoc executor tailored to specific environments like\n+     * CDI or Spring.\n+     * <p>\n+     * Implementors should never return {@literal null}; if an executor instance\n+     * cannot be provided, the method should call\n+     * {@code super.createDefaultExecutor()}.\n+     * <p>\n+     * The application can provide a more appropriate executor implementation\n+     * through a {@link VaadinServiceInitListener} and calling\n+     * {@link ServiceInitEvent#setExecutor(Executor)}.\n+     *\n+     * @return a default executor instance to use, never {@literal null}.\n+     * @see VaadinServiceInitListener\n+     * @see ServiceInitEvent#setExecutor(Executor)\n+     */\n+    protected Executor createDefaultExecutor() {\n+        this.defaultExecutorInUse = true;\n+        int corePoolSize = 8;\n+        int keepAliveTimeSec = 60;\n+\n+        class VaadinThreadFactory implements ThreadFactory {\n+            private final AtomicInteger threadNumber = new AtomicInteger(0);\n+\n+            @Override\n+            public Thread newThread(Runnable runnable) {\n+                int threadNumber = this.threadNumber.incrementAndGet();\n+                if (threadNumber == 1) {\n+                    getLogger().info(\n+                            \""The application is using Vaadin's default ThreadPoolExecutor \""\n+                                    + \""(pool size = {}, keep alive time = {} seconds). \""\n+                                    + \""A custom executor with an appropriate thread pool \""\n+                                    + \""can be provided registering a {}.\"",\n+                            corePoolSize, keepAliveTimeSec,\n+                            VaadinServiceInitListener.class.getSimpleName());\n+                }\n+                Thread thread = new Thread(runnable,\n+                        \""VaadinTaskExecutor-thread-\"" + threadNumber);\n+                // Thread marked as daemon to prevent task execution to block\n+                // JVM shutdown\n+                thread.setDaemon(true);\n+                thread.setPriority(Thread.NORM_PRIORITY);\n+                return thread;\n+            }\n+        }\n+        // Defaults taken from Spring Boot configuration\n+        // org.springframework.boot.autoconfigure.task.TaskExecutionProperties.Pool\n+        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(\n+                corePoolSize, Integer.MAX_VALUE, keepAliveTimeSec,\n+                TimeUnit.SECONDS, new LinkedBlockingQueue<>(),\n+                new VaadinThreadFactory());\n+        // Enables dynamic growing and shrinking of the pool.\n+        threadPoolExecutor.allowCoreThreadTimeOut(true);\n+        return threadPoolExecutor;\n+    }\n+\n+    /**\n+     * Gets the executor instance used by Vaadin for managing concurrent tasks.\n+     * <p>\n+     * By default, a thread pool executor with a custom with core pool size of\n+     * 8, an unbounded maximum pool size, and a keep-alive time of 60 seconds\n+     * for idle threads is provided. The thread pool grows dynamically as\n+     * required, and idle core threads are allowed to time out.\n+     * <p>\n+     * {@link VaadinService} implementations for specific environments like CDI\n+     * or Spring might provide their own ad-hoc Executors tailored to those\n+     * environments.\n+     * <p>\n+     * A custom executor can be configured by registering a\n+     * {@link VaadinServiceInitListener} and providing the executor instance to\n+     * the {@link ServiceInitEvent}.\n+     * <p>\n+     * A Vaadin application can also benefit from this executor to submit\n+     * asynchronous tasks.\n+     *\n+     * @return the Executor instance, never {@literal null}.\n+     * @see VaadinServiceInitListener\n+     * @see ServiceInitEvent#setExecutor(Executor)\n+     */\n+    public Executor getExecutor() {\n+        return executor;\n+    }\n+\n     /**\n      * Gets the class loader to use for loading classes loaded by name, e.g.\n      * custom UI classes. This is by default the class loader that was used to\n@@ -2216,6 +2333,10 @@ public Registration addServiceDestroyListener(\n      */\n     public void destroy() {\n         ServiceDestroyEvent event = new ServiceDestroyEvent(this);\n+        if (defaultExecutorInUse && executor instanceof ExecutorService cast) {\n+            cast.shutdownNow();\n+            this.executor = null;\n+        }\n         RuntimeException exception = null;\n         for (ServiceDestroyListener listener : serviceDestroyListeners) {\n             try {\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java\nindex f36a7434ec9..eae4c01712b 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringVaadinServletService.java\n@@ -18,24 +18,29 @@\n import java.io.IOException;\n import java.net.URI;\n import java.net.URL;\n+import java.util.Arrays;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n import java.util.stream.Collectors;\n \n+import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationContext;\n import org.springframework.core.io.Resource;\n+import org.springframework.core.task.TaskExecutor;\n \n import com.vaadin.flow.di.Instantiator;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.server.ServiceException;\n-import com.vaadin.flow.server.SessionDestroyListener;\n import com.vaadin.flow.server.UIInitListener;\n import com.vaadin.flow.server.VaadinRequest;\n import com.vaadin.flow.server.VaadinServlet;\n import com.vaadin.flow.server.VaadinServletService;\n import com.vaadin.flow.server.VaadinSession;\n-import com.vaadin.flow.shared.Registration;\n+import com.vaadin.flow.spring.annotation.VaadinTaskExecutor;\n \n /**\n  * Spring application context aware Vaadin servlet service implementation.\n@@ -90,6 +95,59 @@ protected Optional<Instantiator> loadInstantiators()\n                 : springInstantiators.stream().findFirst();\n     }\n \n+    @Override\n+    protected Executor createDefaultExecutor() {\n+        Set<String> candidates = Arrays\n+                .stream(context.getBeanNamesForType(TaskExecutor.class))\n+                .collect(Collectors.toCollection(HashSet::new));\n+\n+        // No executor beans defined, fallback to Vaadin's default\n+        if (candidates.isEmpty()) {\n+            return super.createDefaultExecutor();\n+        }\n+\n+        // Check for @VaadinTaskExecutor annotated beans, filter for\n+        // TaskExecutors types, and warn if the annotated bean is of an\n+        // unexpected type.\n+        Set<String> annotatedBeans = new HashSet<>(Set.of(\n+                context.getBeanNamesForAnnotation(VaadinTaskExecutor.class)));\n+        Set<String> invalidAnnotatedTypes = annotatedBeans.stream()\n+                .filter(beanName -> !candidates.contains(beanName))\n+                .collect(Collectors.toSet());\n+        if (!invalidAnnotatedTypes.isEmpty()) {\n+            LoggerFactory.getLogger(SpringVaadinServletService.class.getName())\n+                    .warn(\""Found beans with @{} annotation but not of type {}: {}. \""\n+                            + \""Remove the annotation from the bean definition.\"",\n+                            VaadinTaskExecutor.class.getSimpleName(),\n+                            TaskExecutor.class.getSimpleName(),\n+                            invalidAnnotatedTypes);\n+            annotatedBeans.removeAll(invalidAnnotatedTypes);\n+        }\n+\n+        // Retain only the Vaadin specific executors if they are defined\n+        if (candidates.contains(VaadinTaskExecutor.NAME)\n+                || !annotatedBeans.isEmpty()) {\n+            candidates.removeIf(name -> !annotatedBeans.contains(name)\n+                    && !name.equals(VaadinTaskExecutor.NAME));\n+        }\n+        if (candidates.size() == 1) {\n+            return context.getBean(candidates.iterator().next(),\n+                    TaskExecutor.class);\n+        }\n+\n+        String message = String.format(\""Multiple TaskExecutor beans found: %s. \""\n+                + \""Please resolve this conflict by either: \""\n+                + \""(1) Providing a single TaskExecutor bean, or \""\n+                + \""(2) Marking the bean to use with Vaadin by: \""\n+                + \""naming it '%s' (e.g. @Bean(\\\""%s\\\"")), or \""\n+                + \""applying the @%s qualifier annotation to the bean definition. \""\n+                + \""Note: To prevent an Executor bean from replacing the default one \""\n+                + \""provided by Spring, consider setting '@Bean(defaultCandidate=false)' on its definition.\"",\n+                candidates, VaadinTaskExecutor.NAME, VaadinTaskExecutor.NAME,\n+                VaadinTaskExecutor.class.getSimpleName());\n+        throw new IllegalStateException(message);\n+    }\n+\n     @Override\n     public void init() throws ServiceException {\n         super.init();\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/annotation/VaadinTaskExecutor.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/annotation/VaadinTaskExecutor.java\nnew file mode 100644\nindex 00000000000..0daf6cfb4c7\n--- /dev/null\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/annotation/VaadinTaskExecutor.java\n@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package com.vaadin.flow.spring.annotation;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+/**\n+ * Qualifier annotation for marking a\n+ * {@link org.springframework.core.task.TaskExecutor} bean as a Vaadin-specific\n+ * Executor.\n+ * <p>\n+ * The bean annotated with this qualifier will function as the primary\n+ * {@link org.springframework.core.task.TaskExecutor} for Vaadin-specific\n+ * asynchronous operations.\n+ * <p>\n+ * Alternatively, a {@link org.springframework.core.task.TaskExecutor} bean can\n+ * be declared with the name {@code VaadinTaskExecutor}.\n+ * <p>\n+ * Constraints:\n+ * <ul>\n+ * <li>There should be at most one\n+ * {@link org.springframework.core.task.TaskExecutor} bean annotated with\n+ * {@code @VaadinTaskExecutor}.</li>\n+ * <li>Both an annotated bean and a bean with the name\n+ * {@code VaadinTaskExecutor} cannot exist simultaneously.</li>\n+ * </ul>\n+ * <p>\n+ * To prevent a custom executor from replacing the default one, consider setting\n+ * {@code @Bean(defaultCandidate=false)} on your bean definition.\n+ */\n+@Target({ ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER,\n+        ElementType.TYPE, ElementType.ANNOTATION_TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Documented\n+@Inherited\n+@Qualifier\n+public @interface VaadinTaskExecutor {\n+    /**\n+     * The name of the {@link org.springframework.core.task.TaskExecutor} bean\n+     * specifically used for Vaadin-related asynchronous tasks. This constant\n+     * can be used as a bean name to designate a single\n+     * {@link org.springframework.core.task.TaskExecutor} implementation as the\n+     * primary executor for handling Vaadin-specific task execution.\n+     */\n+    String NAME = \""VaadinTaskExecutor\"";\n+}\n"", ""test_patch"": ""diff --git a/flow-server/src/test/java/com/vaadin/flow/server/MockVaadinServletService.java b/flow-server/src/test/java/com/vaadin/flow/server/MockVaadinServletService.java\nindex 9ba56cc5fa4..a32e26fd980 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/MockVaadinServletService.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/MockVaadinServletService.java\n@@ -15,11 +15,11 @@\n  */\n package com.vaadin.flow.server;\n \n-import jakarta.servlet.ServletException;\n-\n import java.util.Collections;\n import java.util.List;\n \n+import jakarta.servlet.ServletException;\n+\n import com.vaadin.flow.di.Instantiator;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.router.Router;\n@@ -67,11 +67,22 @@ public MockVaadinServletService() {\n         this(new MockDeploymentConfiguration());\n     }\n \n+    public MockVaadinServletService(boolean init) {\n+        this(new MockDeploymentConfiguration(), init);\n+    }\n+\n     public MockVaadinServletService(\n             DeploymentConfiguration deploymentConfiguration) {\n+        this(deploymentConfiguration, true);\n+    }\n+\n+    public MockVaadinServletService(\n+            DeploymentConfiguration deploymentConfiguration, boolean init) {\n         super(new MockVaadinServlet(deploymentConfiguration),\n                 deploymentConfiguration);\n-        init();\n+        if (init) {\n+            init();\n+        }\n     }\n \n     public void setRouter(Router router) {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java b/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java\nindex 89aefe7b5df..8ed1568d966 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/VaadinServiceTest.java\n@@ -15,10 +15,6 @@\n  */\n package com.vaadin.flow.server;\n \n-import jakarta.servlet.ServletConfig;\n-import jakarta.servlet.ServletException;\n-import jakarta.servlet.http.HttpSessionBindingEvent;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -28,13 +24,22 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n \n+import jakarta.servlet.ServletConfig;\n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.http.HttpSessionBindingEvent;\n import net.jcip.annotations.NotThreadSafe;\n+import org.junit.After;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n import org.mockito.MockedStatic;\n import org.mockito.Mockito;\n@@ -150,6 +155,12 @@ protected List<RequestHandler> createRequestHandlers()\n         }\n     }\n \n+    @Before\n+    @After\n+    public void clearCurrentInstances() {\n+        CurrentInstance.clearAll();\n+    }\n+\n     @Test\n     public void requestEnd_serviceFailure_threadLocalsCleared() {\n         MockVaadinServletService service = new MockVaadinServletService() {\n@@ -801,6 +812,123 @@ public void reinitializeSession_setVaadinSessionAttriuteWithLock() {\n         Mockito.verify(vaadinSession, Mockito.times(2)).unlock();\n     }\n \n+    @Test\n+    public void getExecutor_getsDefaultVaadinExecutor()\n+            throws InterruptedException {\n+        VaadinService service = createService();\n+        Executor executor = service.getExecutor();\n+        AtomicReference<String> threadName = new AtomicReference<>();\n+        Assert.assertNotNull(executor);\n+        CountDownLatch latch = new CountDownLatch(1);\n+        executor.execute(() -> {\n+            threadName.set(Thread.currentThread().getName());\n+            latch.countDown();\n+        });\n+        latch.await();\n+        Assert.assertNotNull(\""Task has not been not executed\"",\n+                threadName.get());\n+        Assert.assertTrue(\""Task was not executed by Vaadin default executor\"",\n+                threadName.get().startsWith(\""VaadinTaskExecutor-\""));\n+    }\n+\n+    @Test\n+    public void serviceDestroy_defaultExecutor_executorStopped() {\n+        VaadinService service = createService();\n+        Executor executor = service.getExecutor();\n+        Assert.assertTrue(\n+                \""Expected the default executor to be an ExecutorService instance\"",\n+                executor instanceof ExecutorService);\n+        Assert.assertFalse(\""Expected executor service to be started\"",\n+                ((ExecutorService) executor).isShutdown());\n+        service.destroy();\n+        Assert.assertTrue(\""Expected executor service to be stopped\"",\n+                ((ExecutorService) executor).isShutdown());\n+    }\n+\n+    @Test\n+    public void getExecutor_customExecutorProvided_getsCustomExecutor()\n+            throws InterruptedException {\n+        AtomicBoolean taskSubmitted = new AtomicBoolean(false);\n+        Executor executor = command -> {\n+            taskSubmitted.set(true);\n+            command.run();\n+        };\n+        VaadinServiceInitListener initListener = event -> {\n+            event.setExecutor(executor);\n+        };\n+        CountDownLatch latch = new CountDownLatch(1);\n+        MockInstantiator instantiator = new MockInstantiator(initListener);\n+        MockVaadinServletService service = new MockVaadinServletService(false);\n+        service.init(instantiator);\n+        Assert.assertSame(\n+                \""Expected VaadinService to return the custom executor\"",\n+                executor, service.getExecutor());\n+        service.getExecutor().execute(latch::countDown);\n+        latch.await();\n+        Assert.assertTrue(\n+                \""Task should have been submitted to the custom executor\"",\n+                taskSubmitted.get());\n+    }\n+\n+    @Test\n+    public void serviceDestroy_customExecutorProvided_executorNotStopped() {\n+        ExecutorService executor = Executors.newSingleThreadExecutor();\n+        VaadinServiceInitListener initListener = event -> {\n+            event.setExecutor(executor);\n+        };\n+        MockInstantiator instantiator = new MockInstantiator(initListener);\n+        MockVaadinServletService service = new MockVaadinServletService(false);\n+        service.init(instantiator);\n+\n+        Assert.assertSame(\n+                \""Expected VaadinService to return the custom executor\"",\n+                executor, service.getExecutor());\n+\n+        service.destroy();\n+        Assert.assertFalse(\""Expected custom executor not to be stopped\"",\n+                executor.isShutdown());\n+\n+    }\n+\n+    @Test\n+    public void getExecutor_nullExecutorProvided_resetsToDefaultVaadinExecutor() {\n+        Executor executor = command -> {\n+        };\n+        VaadinServiceInitListener setExecutorInitListener = event -> {\n+            event.setExecutor(executor);\n+        };\n+        VaadinServiceInitListener resetExecutorInitListener = event -> {\n+            event.setExecutor(null);\n+        };\n+        MockInstantiator instantiator = new MockInstantiator(\n+                setExecutorInitListener, resetExecutorInitListener);\n+        MockVaadinServletService service = new MockVaadinServletService(false);\n+        service.init(instantiator);\n+        Assert.assertNotSame(\""Custom executor should not be used\"", executor,\n+                service.getExecutor());\n+    }\n+\n+    @Test\n+    public void init_nullExecutor_throws() {\n+        RuntimeException error = assertThrows(RuntimeException.class, () -> {\n+            // init method is called by the mock service constructor\n+            new MockVaadinServletService() {\n+                @Override\n+                protected Executor createDefaultExecutor() {\n+                    return null;\n+                }\n+            };\n+        });\n+        if (error.getCause() instanceof ServiceException serviceException) {\n+            Assert.assertTrue(\n+                    \""Expected VaadinService initialization to fail with null executor\"",\n+                    serviceException.getMessage()\n+                            .contains(\""Unable to create the default Executor\""));\n+        } else {\n+            Assert.fail(\""Expected ServiceException to be thrown\"");\n+        }\n+    }\n+\n     private WrappedSession mockSession(VaadinRequest request,\n             VaadinSession vaadinSession, String attributeName) {\n         WrappedSession session = Mockito.mock(WrappedSession.class);\n\ndiff --git a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\nindex 0f1ea9b1baf..df9fdd11c6b 100644\n--- a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n+++ b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n@@ -217,6 +217,7 @@ protected Stream<String> getExcludedPatterns() {\n                 \""com\\\\.vaadin\\\\.flow\\\\.data\\\\.osgi\\\\..*\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.push\\\\.osgi\\\\.PushOsgiStaticResource\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.component\\\\.internal\\\\.HtmlImportParser\"",\n+                \""com\\\\.vaadin\\\\.flow\\\\.server\\\\.VaadinService\\\\$.*VaadinThreadFactory\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.server\\\\.webcomponent\\\\.WebComponentGenerator\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.server\\\\.communication\\\\.WebComponentBootstrapHandler(\\\\$.*)?\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.server\\\\.streams\\\\.TransferContext\"",\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java\nnew file mode 100644\nindex 00000000000..5a6108f96d1\n--- /dev/null\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/SpringVaadinServiceExecutorTest.java\n@@ -0,0 +1,316 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package com.vaadin.flow.spring.service;\n+\n+import java.util.Properties;\n+import java.util.concurrent.Executor;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.core.task.TaskExecutor;\n+import org.springframework.scheduling.annotation.EnableAsync;\n+\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.VaadinServiceInitListener;\n+import com.vaadin.flow.spring.SpringBootAutoConfiguration;\n+import com.vaadin.flow.spring.annotation.VaadinTaskExecutor;\n+import com.vaadin.flow.spring.instantiator.SpringInstantiatorTest;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class SpringVaadinServiceExecutorTest {\n+\n+    static final String CUSTOM_EXECUTOR_VIA_INIT_LISTENER = \""CUSTOM_EXECUTOR_VIA_INIT_LISTENER\"";\n+    static final String CUSTOM_NAMED_EXECUTOR = \""CUSTOM_NAMED_EXECUTOR\"";\n+    static final String CUSTOM_EXECUTOR = \""CUSTOM_EXECUTOR\"";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+            .withConfiguration(\n+                    AutoConfigurations.of(SpringBootAutoConfiguration.class));\n+\n+    @TestConfiguration\n+    static class CustomExecutorViaInitListenerConfig {\n+        @Bean\n+        VaadinServiceInitListener taskExecutorServiceInitListener() {\n+            return event -> event.setExecutor(\n+                    new TestTaskExecutor(CUSTOM_EXECUTOR_VIA_INIT_LISTENER));\n+        }\n+    }\n+\n+    @TestConfiguration\n+    static class CustomExecutorBeanConfig {\n+        @Bean\n+        TaskExecutor myCustomTaskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_EXECUTOR);\n+        }\n+    }\n+\n+    @TestConfiguration\n+    static class CustomExecutorNamedBeanConfig {\n+        @Bean(\""VaadinTaskExecutor\"")\n+        TaskExecutor taskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_NAMED_EXECUTOR);\n+        }\n+    }\n+\n+    @TestConfiguration\n+    static class CustomExecutorAnnotatedBeanConfig {\n+\n+        @Bean\n+        @VaadinTaskExecutor\n+        TaskExecutor taskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_NAMED_EXECUTOR);\n+        }\n+    }\n+\n+    @TestConfiguration\n+    @EnableAsync\n+    @Import(TaskExecutionAutoConfiguration.class)\n+    static class AsyncConfig {\n+    }\n+\n+    @TestConfiguration\n+    @EnableAsync\n+    static class AsyncConfigWithNamedExecutorConfig {\n+        @Bean(\""VaadinTaskExecutor\"")\n+        TaskExecutor taskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_NAMED_EXECUTOR);\n+        }\n+    }\n+\n+    @TestConfiguration\n+    static class MultipleExecutorsConfig {\n+        @Bean\n+        TaskExecutor myCustomTaskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_EXECUTOR);\n+        }\n+\n+        @Bean\n+        TaskExecutor anotherCustomTaskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_EXECUTOR);\n+        }\n+    }\n+\n+    @TestConfiguration\n+    static class MultipleNamedExecutorsConfig {\n+\n+        @VaadinTaskExecutor\n+        @Bean\n+        TaskExecutor taskExecutor2() {\n+            return new TestTaskExecutor(\""2\"");\n+        }\n+\n+        @Bean(\""VaadinTaskExecutor1\"")\n+        TaskExecutor taskExecutor1() {\n+            return new TestTaskExecutor(\""1\"");\n+        }\n+\n+        @VaadinTaskExecutor\n+        @Bean\n+        TaskExecutor taskExecutor3() {\n+            return new TestTaskExecutor(\""3\"");\n+        }\n+    }\n+\n+    @TestConfiguration\n+    static class InvalidTypeAnnodatedConfig {\n+\n+        @VaadinTaskExecutor\n+        @Bean\n+        Executor invalidTaskExecutor() {\n+            return command -> {\n+                throw new UnsupportedOperationException(\""BOOM!\"");\n+            };\n+        }\n+\n+        @Bean\n+        TaskExecutor taskExecutor() {\n+            return new TestTaskExecutor(CUSTOM_EXECUTOR);\n+        }\n+    }\n+\n+    @Test\n+    public void getExecutor_noSpringExecutor_returnsDefaultExecutor() {\n+        contextRunner.run(context -> {\n+            VaadinService service = SpringInstantiatorTest.getService(context,\n+                    new Properties());\n+            Executor executor = service.getExecutor();\n+            assertNotNull(executor,\n+                    \""Should provide a default executor even if TaskExecutor bean is not defined\"");\n+            assertFalse(executor instanceof TaskExecutor,\n+                    \""Should not return an instance of TaskExecutor\"");\n+        });\n+    }\n+\n+    @Test\n+    public void getExecutor_springAsyncEnabled_returnsSpringDefaultExecutor() {\n+        contextRunner.withUserConfiguration(AsyncConfig.class).run(context -> {\n+            VaadinService service = SpringInstantiatorTest.getService(context,\n+                    new Properties());\n+            assertInstanceOf(TaskExecutor.class, service.getExecutor(),\n+                    \""Expected a Spring TaskExecutor\"");\n+        });\n+    }\n+\n+    @Test\n+    public void getExecutor_customExecutorBean_returnsCustomTaskExecutor() {\n+        contextRunner.withUserConfiguration(CustomExecutorBeanConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \""Expected VaadinService.getExecutor() to return an instance of custom TaskExecutor\"");\n+                    assertEquals(CUSTOM_EXECUTOR, executor.name);\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_customExecutorNamedBean_returnsCustomTaskExecutorNamedInstance() {\n+        contextRunner.withUserConfiguration(CustomExecutorBeanConfig.class,\n+                CustomExecutorNamedBeanConfig.class).run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \""VaadinService.getExecutor() should return an instance of custom TaskExecutor\"");\n+                    assertEquals(CUSTOM_NAMED_EXECUTOR, executor.name,\n+                            \""Expected the named bean executor to be used\"");\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_customExecutorAnnotatedBean_returnsCustomTaskExecutorNamedInstance() {\n+        contextRunner\n+                .withUserConfiguration(CustomExecutorBeanConfig.class,\n+                        CustomExecutorAnnotatedBeanConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \""VaadinService.getExecutor() should return an instance of custom TaskExecutor\"");\n+                    assertEquals(CUSTOM_NAMED_EXECUTOR, executor.name,\n+                            \""Expected the named bean executor to be used\"");\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_asyncEnabledAndCustomExecutorNamedBean_returnsCustomTaskExecutorNamedInstance() {\n+        contextRunner.withUserConfiguration(AsyncConfig.class,\n+                CustomExecutorNamedBeanConfig.class).run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \""VaadinService.getExecutor() should return an instance of custom TaskExecutor\"");\n+                    assertEquals(CUSTOM_NAMED_EXECUTOR, executor.name,\n+                            \""Expected the named bean executor to be used\"");\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_customExecutorViaInitListener_returnsCustomTaskExecutor() {\n+        contextRunner\n+                .withUserConfiguration(\n+                        CustomExecutorViaInitListenerConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \""Expected VaadinService.getExecutor() to return an instance of custom TaskExecutor\"");\n+                    assertEquals(CUSTOM_EXECUTOR_VIA_INIT_LISTENER,\n+                            executor.name);\n+                });\n+    }\n+\n+    @Test\n+    public void init_multipleUnnamedTaskExecutors_throws() {\n+        contextRunner.withUserConfiguration(MultipleExecutorsConfig.class)\n+                .run(context -> {\n+                    IllegalStateException error = assertThrows(\n+                            IllegalStateException.class,\n+                            () -> SpringInstantiatorTest.getService(context,\n+                                    new Properties()));\n+                    assertTrue(error.getMessage()\n+                            .contains(\""Multiple TaskExecutor beans found\""));\n+                    assertTrue(error.getMessage()\n+                            .contains(\""@Bean(\\\""VaadinTaskExecutor\\\"")\""));\n+                    assertTrue(\n+                            error.getMessage().contains(\""@VaadinTaskExecutor\""));\n+                });\n+    }\n+\n+    @Test\n+    public void init_multipleNamedTaskExecutors_throws() {\n+        contextRunner.withUserConfiguration(MultipleNamedExecutorsConfig.class)\n+                .run(context -> {\n+                    IllegalStateException error = assertThrows(\n+                            IllegalStateException.class,\n+                            () -> SpringInstantiatorTest.getService(context,\n+                                    new Properties()));\n+                    assertTrue(error.getMessage()\n+                            .contains(\""Multiple TaskExecutor beans found\""));\n+                    assertTrue(error.getMessage()\n+                            .contains(\""@Bean(\\\""VaadinTaskExecutor\\\"")\""));\n+                    assertTrue(\n+                            error.getMessage().contains(\""@VaadinTaskExecutor\""));\n+                });\n+    }\n+\n+    @Test\n+    public void getExecutor_invalidAnnotatedType_doesNotThrow() {\n+        contextRunner.withUserConfiguration(InvalidTypeAnnodatedConfig.class)\n+                .run(context -> {\n+                    VaadinService service = SpringInstantiatorTest\n+                            .getService(context, new Properties());\n+                    TestTaskExecutor executor = assertInstanceOf(\n+                            TestTaskExecutor.class, service.getExecutor(),\n+                            \""Expected VaadinService.getExecutor() to return an instance of custom TaskExecutor\"");\n+                    assertEquals(CUSTOM_EXECUTOR, executor.name);\n+                });\n+    }\n+\n+    /**\n+     * Simple TaskExecutor implementation for testing.\n+     */\n+    static class TestTaskExecutor implements TaskExecutor {\n+\n+        final String name;\n+\n+        public TestTaskExecutor(String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public void execute(Runnable task) {\n+            task.run();\n+        }\n+    }\n+}\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/TestServletConfiguration.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/TestServletConfiguration.java\nindex a9b53f6040e..03690929f1a 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/TestServletConfiguration.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/service/TestServletConfiguration.java\n@@ -15,17 +15,19 @@\n  */\n package com.vaadin.flow.spring.service;\n \n-import com.vaadin.flow.server.VaadinRequest;\n-import com.vaadin.flow.server.VaadinRequestInterceptor;\n-import com.vaadin.flow.server.VaadinResponse;\n-import com.vaadin.flow.server.VaadinSession;\n import org.springframework.boot.SpringBootConfiguration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.FilterType;\n+\n+import com.vaadin.flow.server.VaadinRequest;\n+import com.vaadin.flow.server.VaadinRequestInterceptor;\n+import com.vaadin.flow.server.VaadinResponse;\n+import com.vaadin.flow.server.VaadinSession;\n \n @Configuration\n-@ComponentScan\n+@ComponentScan(excludeFilters = @ComponentScan.Filter(type = FilterType.REGEX, pattern = \"".*\\\\.SpringVaadinServiceExecutorTest.*\""))\n @SpringBootConfiguration\n public class TestServletConfiguration {\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21402"", ""pr_id"": 21402, ""issue_id"": 21370, ""repo"": ""vaadin/flow"", ""problem_statement"": ""[Signals] Provide a way of subscribing to changes / events\n### Describe your motivation\n\nHilla emits signal instances from the endpoints, which behind the scene is translated to a Flux connection that could be subscribed to, and get notified asynchronously about the changes applied to the server-side signal instance. \n\nSignal instance should have public API to enable Hilla's Full-stack Signals library subscribing to the details of submitted commands and their results. \n\n### Describe the solution you'd like\n\nSome background:\nThe client-side implementation sends updates in form of commands via `POST` requests that optimistically assumed as successful as long as it reaches the server, since it is not awaiting for a response. Actual updates are received though a Flux (websocket subscription) asynchronously. Each received update is either the result of a command that is sent by an instance of the client-side signal itself, or the commands sent by other clients. As the result, a client-side signal instance should be able to distinguish between the command sent itself, and whether it was applied successfully or got rejected. This enables a client-side signal to ignore, accept, or retry a command based on the received update. Previous implementation of the Full-stack Signals in Hilla was using the same unique ID of the client command also for the asynchronous responses (sent through websocket).\n\nThis feature request is about a public API that enables subscribing to the signal changes in a way that the received updates are identifiable.\n\n"", ""issue_word_count"": 248, ""test_files_count"": 3, ""non_test_files_count"": 5, ""pr_changed_files"": [""signals/src/main/java/com/vaadin/signals/Signal.java"", ""signals/src/main/java/com/vaadin/signals/SignalUtils.java"", ""signals/src/main/java/com/vaadin/signals/impl/AsynchronousSignalTree.java"", ""signals/src/main/java/com/vaadin/signals/impl/SignalTree.java"", ""signals/src/main/java/com/vaadin/signals/impl/SynchronousSignalTree.java"", ""signals/src/test/java/com/vaadin/signals/SignalUtilsTest.java"", ""signals/src/test/java/com/vaadin/signals/impl/AsynchronousSignalTreeTest.java"", ""signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java""], ""pr_changed_test_files"": [""signals/src/test/java/com/vaadin/signals/SignalUtilsTest.java"", ""signals/src/test/java/com/vaadin/signals/impl/AsynchronousSignalTreeTest.java"", ""signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java""], ""base_commit"": ""86a66269c6cd76914e929091f2cd84b9a921cab1"", ""head_commit"": ""e50fb78dd98400d1b6d16ecbdc06a513321c2ccc"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21402"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21402"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-28T06:56:58.000Z"", ""patch"": ""diff --git a/signals/src/main/java/com/vaadin/signals/Signal.java b/signals/src/main/java/com/vaadin/signals/Signal.java\nindex 75380be3bab..62d3574a559 100644\n--- a/signals/src/main/java/com/vaadin/signals/Signal.java\n+++ b/signals/src/main/java/com/vaadin/signals/Signal.java\n@@ -219,7 +219,7 @@ protected Predicate<SignalCommand> mergeValidators(\n      */\n     protected abstract Object usageChangeValue(Data data);\n \n-    private boolean isValid(SignalCommand command) {\n+    boolean isValid(SignalCommand command) {\n         if (command instanceof SignalCommand.ConditionCommand) {\n             return true;\n         } else if (command instanceof SignalCommand.TransactionCommand tx) {\n\ndiff --git a/signals/src/main/java/com/vaadin/signals/SignalUtils.java b/signals/src/main/java/com/vaadin/signals/SignalUtils.java\nnew file mode 100644\nindex 00000000000..81b62dcef7a\n--- /dev/null\n+++ b/signals/src/main/java/com/vaadin/signals/SignalUtils.java\n@@ -0,0 +1,45 @@\n+package com.vaadin.signals;\n+\n+import com.vaadin.signals.impl.SignalTree;\n+\n+/**\n+ * Utility class for accessing/using signals internal API.\n+ * <p>\n+ * <strong>Note</strong>: This is internal API for Vaadin platform's internal\n+ * usages. It is not intended for public use and may change or be removed in\n+ * future releases.\n+ */\n+public class SignalUtils {\n+\n+    /**\n+     * Returns the underlying <code>SignalTree</code> instance of the given\n+     * signal.\n+     *\n+     * @param signal\n+     *            the signal to get the tree of, not <code>null</code>\n+     * @return the signal tree instance, not <code>null</code>\n+     */\n+    public static SignalTree treeOf(Signal<?> signal) {\n+        return signal.tree();\n+    }\n+\n+    /**\n+     * Checks whether the given command is considered valid by the validator\n+     * instance of the provided signal. In case of composite commands such as\n+     * transactions, this method will recursively check the validity of all\n+     * commands in the transaction.\n+     * <p>\n+     * <strong>Note</strong>: This only checks the validity of the commands that\n+     * might make changes to the data.\n+     *\n+     * @param signal\n+     *            the signal to check the command against, not<code>null</code>\n+     * @param command\n+     *            the command to check, not <code>null</code>\n+     * @return <code>true</code> if the command is valid, <code>false</code>\n+     *         otherwise\n+     */\n+    public static boolean isValid(Signal<?> signal, SignalCommand command) {\n+        return signal.isValid(command);\n+    }\n+}\n\ndiff --git a/signals/src/main/java/com/vaadin/signals/impl/AsynchronousSignalTree.java b/signals/src/main/java/com/vaadin/signals/impl/AsynchronousSignalTree.java\nindex d4488ca40ad..744f9c15f1e 100644\n--- a/signals/src/main/java/com/vaadin/signals/impl/AsynchronousSignalTree.java\n+++ b/signals/src/main/java/com/vaadin/signals/impl/AsynchronousSignalTree.java\n@@ -77,6 +77,8 @@ public void confirm(List<SignalCommand> commands) {\n             notifyObservers(oldSubmitted, submitted);\n \n             unconfirmedCommands.notifyResultHandlers(results, commands);\n+\n+            notifyProcessedCommandSubscribers(commands, results);\n         });\n     }\n \n\ndiff --git a/signals/src/main/java/com/vaadin/signals/impl/SignalTree.java b/signals/src/main/java/com/vaadin/signals/impl/SignalTree.java\nindex 94ea13f1c49..09ed77761d5 100644\n--- a/signals/src/main/java/com/vaadin/signals/impl/SignalTree.java\n+++ b/signals/src/main/java/com/vaadin/signals/impl/SignalTree.java\n@@ -5,6 +5,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.BiConsumer;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n@@ -90,6 +91,8 @@ public enum Type {\n \n     private final Type type;\n \n+    private final List<BiConsumer<SignalCommand, CommandResult>> subscribers = new ArrayList<>();\n+\n     /**\n      * Creates a new signal tree with the given type.\n      *\n@@ -334,4 +337,46 @@ public void commitSingleCommand(SignalCommand command) {\n     public Type type() {\n         return type;\n     }\n+\n+    /**\n+     * Registers a callback that is executed after commands are processed\n+     * (regardless of acceptance or rejection). It is guaranteed that the\n+     * callback is invoked in the order the commands are processed. Contrary to\n+     * the observers that are attached to a specific node by calling\n+     * {@link #observeNextChange}, the <code>subscriber</code> remains active\n+     * indefinitely until it is removed by executing the returned callback.\n+     *\n+     * @param subscriber\n+     *            the callback to run when a command is confirmed, not\n+     *            <code>null</code>\n+     * @return a callback that can be used to remove the subscriber, not\n+     *         <code>null</code>\n+     */\n+    public Runnable subscribeToProcessed(\n+            BiConsumer<SignalCommand, CommandResult> subscriber) {\n+        assert subscriber != null;\n+        return getWithLock(() -> {\n+            subscribers.add(subscriber);\n+            return wrapWithLock(() -> subscribers.remove(subscriber));\n+        });\n+    }\n+\n+    /**\n+     * Notifies all subscribers after a command is processed. This method must\n+     * be called from a code block that holds the tree lock.\n+     *\n+     * @param commands\n+     *            the list of processed commands, not <code>null</code>\n+     * @param results\n+     *            the map of results for the commands, not <code>null</code>\n+     */\n+    protected void notifyProcessedCommandSubscribers(\n+            List<SignalCommand> commands, Map<Id, CommandResult> results) {\n+        assert hasLock();\n+        for (var command : commands) {\n+            for (var subscriber : subscribers) {\n+                subscriber.accept(command, results.get(command.commandId()));\n+            }\n+        }\n+    }\n }\n\ndiff --git a/signals/src/main/java/com/vaadin/signals/impl/SynchronousSignalTree.java b/signals/src/main/java/com/vaadin/signals/impl/SynchronousSignalTree.java\nindex 879f8d90945..36be531c129 100644\n--- a/signals/src/main/java/com/vaadin/signals/impl/SynchronousSignalTree.java\n+++ b/signals/src/main/java/com/vaadin/signals/impl/SynchronousSignalTree.java\n@@ -72,12 +72,19 @@ public void publishChanges() {\n \n                 notifyObservers(oldSnapshot, snapshot);\n                 changes.notifyResultHandlers(results);\n+\n+                notifyProcessedCommandSubscribers(changes.getCommands(),\n+                        results);\n             }\n \n             @Override\n             public void markAsAborted() {\n-                changes.notifyResultHandlers(CommandResult.rejectAll(results,\n-                        \""Transaction aborted\""));\n+                var rejected = CommandResult.rejectAll(results,\n+                        \""Transaction aborted\"");\n+                changes.notifyResultHandlers(rejected);\n+\n+                notifyProcessedCommandSubscribers(changes.getCommands(),\n+                        rejected);\n             }\n         };\n     }\n"", ""test_patch"": ""diff --git a/signals/src/test/java/com/vaadin/signals/SignalUtilsTest.java b/signals/src/test/java/com/vaadin/signals/SignalUtilsTest.java\nnew file mode 100644\nindex 00000000000..693ee2b42e9\n--- /dev/null\n+++ b/signals/src/test/java/com/vaadin/signals/SignalUtilsTest.java\n@@ -0,0 +1,32 @@\n+package com.vaadin.signals;\n+\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.signals.impl.SignalTree;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.any;\n+\n+public class SignalUtilsTest {\n+\n+    @Test\n+    void treeOf_returnsSignalsUnderlyingTree() {\n+        SignalTree tree = Mockito.mock(SignalTree.class);\n+        Signal<?> signal = Mockito.mock(Signal.class);\n+        Mockito.when(signal.tree()).thenReturn(tree);\n+        assertSame(tree, SignalUtils.treeOf(signal));\n+        Mockito.verify(signal, Mockito.times(1)).tree();\n+\n+    }\n+\n+    @Test\n+    void isValid_callsSignalsIsValid() {\n+        Signal<?> signal = Mockito.mock(Signal.class);\n+        SignalCommand command = TestUtil.writeRootValueCommand();\n+        Mockito.when(signal.isValid(any())).thenReturn(true);\n+        assertTrue(SignalUtils.isValid(signal, command));\n+        Mockito.verify(signal, Mockito.times(1)).isValid(command);\n+    }\n+}\n\ndiff --git a/signals/src/test/java/com/vaadin/signals/impl/AsynchronousSignalTreeTest.java b/signals/src/test/java/com/vaadin/signals/impl/AsynchronousSignalTreeTest.java\nindex 46a6eeb6d2f..b2ea46ca23e 100644\n--- a/signals/src/test/java/com/vaadin/signals/impl/AsynchronousSignalTreeTest.java\n+++ b/signals/src/test/java/com/vaadin/signals/impl/AsynchronousSignalTreeTest.java\n@@ -7,6 +7,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.atomic.AtomicReference;\n \n import org.junit.jupiter.api.Test;\n@@ -117,4 +118,65 @@ void confirm_overwritingSubmitted_submittedWins() {\n         assertEquals(new TextNode(\""Submitted\""),\n                 TestUtil.readConfirmedRootValue(tree));\n     }\n+\n+    @Test\n+    void subscribeToProcessed_noChanges_doesNotReceive() {\n+        AsyncTestTree tree = new AsyncTestTree();\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer = new AtomicReference<>();\n+\n+        tree.subscribeToProcessed((event, result) -> resultContainer\n+                .set(Map.entry(event, result)));\n+\n+        assertNull(resultContainer.get());\n+    }\n+\n+    @Test\n+    void subscribeToProcessed_changesConfirmed_receives() {\n+        AsyncTestTree tree = new AsyncTestTree();\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer = new AtomicReference<>();\n+\n+        tree.subscribeToProcessed((event, result) -> resultContainer\n+                .set(Map.entry(event, result)));\n+\n+        SignalCommand command = TestUtil.writeRootValueCommand(\""submitted\"");\n+        tree.commitSingleCommand(command);\n+\n+        assertNull(resultContainer.get());\n+\n+        // Directly confirm another command:\n+        tree.confirm(List.of(TestUtil.writeRootValueCommand(\""confirmed\"")));\n+\n+        assertEquals(new TextNode(\""confirmed\""),\n+                ((SignalCommand.SetCommand) resultContainer.get().getKey())\n+                        .value());\n+\n+        tree.confirmSubmitted();\n+        assertEquals(new TextNode(\""submitted\""),\n+                ((SignalCommand.SetCommand) resultContainer.get().getKey())\n+                        .value());\n+\n+        resultContainer.set(null);\n+\n+        // No new things to confirm, no events to publish:\n+        tree.confirmSubmitted();\n+        assertNull(resultContainer.get());\n+    }\n+\n+    @Test\n+    void subscribeToProcessed_failingCommandConfirmed_receives() {\n+        AsyncTestTree tree = new AsyncTestTree();\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer = new AtomicReference<>();\n+\n+        tree.subscribeToProcessed((event, result) -> resultContainer\n+                .set(Map.entry(event, result)));\n+\n+        SignalCommand command = TestUtil.failingCommand();\n+        tree.commitSingleCommand(command);\n+\n+        assertNull(resultContainer.get());\n+\n+        tree.confirmSubmitted();\n+\n+        assertEquals(command, resultContainer.get().getKey());\n+    }\n }\n\ndiff --git a/signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java b/signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java\nindex a4bea5bfdce..6feb78de2f9 100644\n--- a/signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java\n+++ b/signals/src/test/java/com/vaadin/signals/impl/SynchronousSignalTreeTest.java\n@@ -350,4 +350,103 @@ void observe_observeInCallback_registeredAgain() {\n         assertEquals(1, count.get());\n     }\n \n+    @Test\n+    void subscribeToProcessed_noChanges_doesNotReceive() {\n+        SynchronousSignalTree tree = new SynchronousSignalTree(false);\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer = new AtomicReference<>();\n+\n+        tree.subscribeToProcessed((event, result) -> resultContainer\n+                .set(Map.entry(event, result)));\n+\n+        assertNull(resultContainer.get());\n+    }\n+\n+    @Test\n+    void subscribeToProcessed_receivesProcessed_bothAcceptedAndFailed() {\n+        SynchronousSignalTree tree = new SynchronousSignalTree(false);\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer = new AtomicReference<>();\n+\n+        tree.subscribeToProcessed((event, result) -> resultContainer\n+                .set(Map.entry(event, result)));\n+\n+        var id1 = Id.random();\n+        tree.commitSingleCommand(\n+                new SignalCommand.SetCommand(id1, Id.ZERO, new DoubleNode(2)));\n+\n+        assertEquals(id1, resultContainer.get().getKey().commandId());\n+        assertTrue(resultContainer.get().getValue().accepted());\n+\n+        var id2 = Id.random();\n+        tree.commitSingleCommand(\n+                new SignalCommand.RemoveByKeyCommand(id2, Id.ZERO, \""3\""));\n+\n+        assertEquals(id2, resultContainer.get().getKey().commandId());\n+        assertFalse(resultContainer.get().getValue().accepted());\n+    }\n+\n+    @Test\n+    void subscribeToProcessed_transactionCommand_receives() {\n+        SynchronousSignalTree tree = new SynchronousSignalTree(false);\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer = new AtomicReference<>();\n+\n+        AtomicInteger count = new AtomicInteger();\n+        tree.subscribeToProcessed((event, result) -> {\n+            count.incrementAndGet();\n+            resultContainer.set(Map.entry(event, result));\n+        });\n+\n+        var conditionId = Id.random();\n+        var conditionCommand = new SignalCommand.ValueCondition(conditionId,\n+                Id.ZERO, null);\n+        var setCommandId = Id.random();\n+        var setCommand = new SignalCommand.SetCommand(setCommandId, Id.ZERO,\n+                new DoubleNode(2));\n+        var txCommandID = Id.random();\n+        var transactionCommand = new SignalCommand.TransactionCommand(\n+                txCommandID, List.of(conditionCommand, setCommand));\n+\n+        tree.commitSingleCommand(transactionCommand);\n+\n+        assertEquals(1, count.get());\n+        assertEquals(txCommandID, resultContainer.get().getKey().commandId());\n+    }\n+\n+    @Test\n+    void subscribeToProcessed_subscriberRemoved_doesNotReceiveAnymore() {\n+        SynchronousSignalTree tree = new SynchronousSignalTree(false);\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer1 = new AtomicReference<>();\n+        AtomicReference<Map.Entry<SignalCommand, CommandResult>> resultContainer2 = new AtomicReference<>();\n+\n+        var canceler1 = tree.subscribeToProcessed((event,\n+                result) -> resultContainer1.set(Map.entry(event, result)));\n+\n+        var canceler2 = tree.subscribeToProcessed((event,\n+                result) -> resultContainer2.set(Map.entry(event, result)));\n+\n+        var id1 = Id.random();\n+        tree.commitSingleCommand(\n+                new SignalCommand.SetCommand(id1, Id.ZERO, new DoubleNode(2)));\n+\n+        assertEquals(id1, resultContainer1.get().getKey().commandId());\n+        assertEquals(id1, resultContainer2.get().getKey().commandId());\n+\n+        canceler1.run(); // removes the first subscriber\n+\n+        resultContainer1.set(null);\n+        resultContainer2.set(null);\n+\n+        tree.commitSingleCommand(\n+                new SignalCommand.SetCommand(id1, Id.ZERO, new DoubleNode(3)));\n+        assertNull(resultContainer1.get());\n+        assertEquals(id1, resultContainer2.get().getKey().commandId());\n+\n+        canceler2.run();\n+        resultContainer2.set(null);\n+\n+        tree.commitSingleCommand(\n+                new SignalCommand.SetCommand(id1, Id.ZERO, new DoubleNode(4)));\n+\n+        assertNull(resultContainer1.get());\n+        assertNull(resultContainer2.get());\n+    }\n }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21373"", ""pr_id"": 21373, ""issue_id"": 21356, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Support modular security customization of VaadinWebSecurity\n### Describe your motivation\n\nCurrently, `VaadinWebSecurity` is the single entry point for customizing the `HttpSecurity` configuration in Vaadin applications. However, in multi-module projects and library development, it is often necessary to modularize security customizations without forcing users to subclass or directly modify `VaadinWebSecurity`.  \nHaving a standard extension mechanism would allow libraries and application modules to provide security configurations independently, while still preserving the flexibility for users to override or extend their own application security setup.\n\n### Describe the solution you'd like\n\nIntroduce a `VaadinWebSecurityCustomizer` interface.  Spring beans implementing this interface would be automatically detected and applied by `VaadinWebSecurity` during the `configure(HttpSecurity http)` phase. The customizers should be invoked in a well-defined order, e.g., respecting `@Order` annotations or implementing `Ordered`.\n\nThis mechanism would enable security customizations to be contributed from multiple modules and libraries in a non-breaking and additive way, while still allowing users to subclass `VaadinWebSecurity` if they need full control.\n\nExample:\n\n~~~java\npublic interface VaadinWebSecurityCustomizer {\n    void customize(HttpSecurity http) throws Exception;\n}\n~~~\n\nThen inside `VaadinWebSecurity`:\n\n~~~java\n@Autowired(required = false)\nprivate List<VaadinWebSecurityCustomizer> customizers = Collections.emptyList();\n\n// In the configure method\nfor (VaadinWebSecurityCustomizer customizer : customizers) {\n    customizer.customize(http);\n}\n~~~\n\n### Describe alternatives you've considered\n\n- **Direct subclassing of `VaadinWebSecurity`**: This approach is limiting when security logic is spread across modules. It can lead to tight coupling and does not scale well for larger applications or reusable libraries.\n- **Using application-specific configuration classes**: While additional `@Configuration` classes could configure `HttpSecurity`, they often need to replicate the Vaadin-specific configuration steps to avoid breaking Vaadin internals, increasing the risk of misconfiguration.\n- **Custom `SecurityFilterChain` beans**: Defining separate `SecurityFilterChain` beans bypasses the Vaadin-specific conventions and could lead to unexpected behavior if Vaadin's needs are not fully respected.\n\n### Additional context\n\n- This pattern would align Vaadin Flow security customization with other Spring extensibility patterns (like `WebMvcConfigurer`, `SecurityConfigurerAdapter`).\n- This change would be fully backward compatible: users extending `VaadinWebSecurity` would continue to work as before.\n- It would also encourage best practices for modular development and library support in the Vaadin ecosystem.\n"", ""issue_word_count"": 341, ""test_files_count"": 13, ""non_test_files_count"": 4, ""pr_changed_files"": [""flow-tests/vaadin-spring-tests/test-spring-security-flow-contextpath/pom.xml"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow-standalone-routepathaccesschecker/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityUtils.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java"", ""vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringSecurityAutoConfiguration.java"", ""vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java"", ""vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinRolePrefixHolder.java"", ""vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringClassesSerializableTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java""], ""pr_changed_test_files"": [""flow-tests/vaadin-spring-tests/test-spring-security-flow-contextpath/pom.xml"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow-standalone-routepathaccesschecker/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityUtils.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringClassesSerializableTest.java"", ""vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java""], ""base_commit"": ""c17d9cb452bde21882d5aa749a623603f81b6e64"", ""head_commit"": ""0f0728446a81507b92a52fb17a7028dac36c481c"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21373"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21373"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-09T10:52:29.000Z"", ""patch"": ""diff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringSecurityAutoConfiguration.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringSecurityAutoConfiguration.java\nindex deaa45c24f3..cadbab456f0 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringSecurityAutoConfiguration.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/SpringSecurityAutoConfiguration.java\n@@ -34,6 +34,7 @@\n import com.vaadin.flow.server.auth.NavigationAccessChecker;\n import com.vaadin.flow.server.auth.NavigationAccessControl;\n import com.vaadin.flow.server.auth.RoutePathAccessChecker;\n+import com.vaadin.flow.spring.security.AuthenticationContext;\n import com.vaadin.flow.spring.security.NavigationAccessControlConfigurer;\n import com.vaadin.flow.spring.security.NavigationAccessControlInitializer;\n import com.vaadin.flow.spring.security.RequestUtil;\n@@ -197,4 +198,9 @@ public VaadinRolePrefixHolder vaadinRolePrefixHolder(\n                 .map(GrantedAuthorityDefaults::getRolePrefix).orElse(null));\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean\n+    AuthenticationContext authenticationContext() {\n+        return new AuthenticationContext();\n+    }\n }\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java\nindex e4c4f66b27f..227866c643b 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/RequestUtil.java\n@@ -289,7 +289,7 @@ String getUrlMapping() {\n      * @return the path with prepended url mapping.\n      * @see VaadinConfigurationProperties#getUrlMapping()\n      */\n-    String applyUrlMapping(String path) {\n+    public String applyUrlMapping(String path) {\n         return applyUrlMapping(configurationProperties.getUrlMapping(), path);\n     }\n \n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinRolePrefixHolder.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinRolePrefixHolder.java\nindex f6c18f3578a..66723e6de74 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinRolePrefixHolder.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinRolePrefixHolder.java\n@@ -109,19 +109,19 @@ public void resetRolePrefix(\n                 .findFirst().ifPresent(this::resetRolePrefix);\n     }\n \n-    private void resetRolePrefix(\n+    void resetRolePrefix(\n             SecurityContextHolderAwareRequestFilter securityContextHolderAwareRequestFilter) {\n         resetRolePrefix(securityContextHolderAwareRequestFilter,\n                 SecurityContextHolderAwareRequestFilter.class);\n     }\n \n-    private void resetRolePrefix(\n+    void resetRolePrefix(\n             SecurityContextHolderAwareRequestWrapper securityContextHolderAwareRequestWrapper) {\n         resetRolePrefix(securityContextHolderAwareRequestWrapper,\n                 SecurityContextHolderAwareRequestWrapper.class);\n     }\n \n-    private void resetRolePrefix(Object source, Class<?> type) {\n+    void resetRolePrefix(Object source, Class<?> type) {\n         if (source != null) {\n             try {\n                 Field field = FieldUtils.getField(type, \""rolePrefix\"");\n\ndiff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java\nnew file mode 100644\nindex 00000000000..aa365e3e76c\n--- /dev/null\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurer.java\n@@ -0,0 +1,763 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.spring.security;\n+\n+import jakarta.servlet.ServletContext;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.config.ObjectPostProcessor;\n+import org.springframework.security.config.annotation.SecurityConfigurer;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizedUrl;\n+import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.LogoutConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer;\n+import org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.web.access.AccessDeniedHandler;\n+import org.springframework.security.web.access.AccessDeniedHandlerImpl;\n+import org.springframework.security.web.access.DelegatingAccessDeniedHandler;\n+import org.springframework.security.web.access.RequestMatcherDelegatingAccessDeniedHandler;\n+import org.springframework.security.web.authentication.HttpStatusEntryPoint;\n+import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;\n+import org.springframework.security.web.authentication.logout.LogoutFilter;\n+import org.springframework.security.web.authentication.logout.LogoutHandler;\n+import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n+import org.springframework.security.web.csrf.CsrfException;\n+import org.springframework.security.web.savedrequest.RequestCache;\n+import org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.util.matcher.AnyRequestMatcher;\n+import org.springframework.security.web.util.matcher.RequestMatcher;\n+import org.springframework.security.web.util.matcher.RequestMatchers;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.hilla.EndpointRequestUtil;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.router.internal.RouteUtil;\n+import com.vaadin.flow.server.VaadinServletContext;\n+import com.vaadin.flow.server.auth.NavigationAccessControl;\n+\n+import static com.vaadin.flow.spring.security.VaadinWebSecurity.getDefaultHttpSecurityPermitMatcher;\n+import static com.vaadin.flow.spring.security.VaadinWebSecurity.getDefaultWebSecurityIgnoreMatcher;\n+\n+/**\n+ * A {@link SecurityConfigurer} specifically designed for Vaadin applications.\n+ * <p>\n+ * Provides built-in customizers to configure the security settings for Flow and\n+ * Hilla by integrating with Spring Security and specialized methods to handle\n+ * view access control and default security workflows in Vaadin applications.\n+ * <p>\n+ * Usage example:\n+ *\n+ * <pre>\n+ * <code>\n+ * &#64;Configuration\n+ * &#64;EnableWebSecurity\n+ * public class MyWebSecurity {\n+ *\n+ *     &#64;Bean\n+ *     SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n+ *         return http.with(VaadinSecurityConfigurer.vaadin(), configurer -&gt; {\n+ *             configurer.loginView(MyLoginView.class);\n+ *         }).build();\n+ *     }\n+ * }\n+ * </code>\n+ * </pre>\n+ *\n+ * <h2>Configurers</h2>\n+ * <p>\n+ * This configurer applies other configurers to set up the security filter chain\n+ * properly for Vaadin applications. The following configurers may be applied:\n+ * <ul>\n+ * <li>{@link FormLoginConfigurer} if a login view is set with\n+ * {@link #loginView(Class)} (or overloads)</li>\n+ * <li>{@link OAuth2LoginConfigurer} if a login page for OAuth2 authentication\n+ * is set with {@link #oauth2LoginPage(String)} (or overloads)</li>\n+ * <li>{@link CsrfConfigurer} to allow internal framework requests (can be\n+ * disabled with {@link #enableCsrfConfiguration(boolean)})</li>\n+ * <li>{@link LogoutConfigurer} to configure logout handlers for Vaadin\n+ * applications (can be disabled with\n+ * {@link #enableLogoutConfiguration(boolean)})</li>\n+ * <li>{@link RequestCacheConfigurer} to set a request cache designed for Vaadin\n+ * applications (can be disabled with\n+ * {@link #enableRequestCacheConfiguration(boolean)})</li>\n+ * <li>{@link ExceptionHandlingConfigurer} to configure proper exception\n+ * handling for Vaadin applications (can be disabled with\n+ * {@link #enableExceptionHandlingConfiguration(boolean)})</li>\n+ * <li>{@link AuthorizeHttpRequestsConfigurer} to permit internal framework\n+ * requests and other public endpoints (can be disabled with\n+ * {@link #enableAuthorizedRequestsConfiguration(boolean)})</li>\n+ * </ul>\n+ *\n+ * <h2>Shared Objects</h2>\n+ * <p>\n+ * The following beans are shared by this configurer (if not already shared):\n+ * <ul>\n+ * <li>{@link RequestUtil}</li>\n+ * <li>{@link AuthenticationContext}</li>\n+ * <li>{@link NavigationAccessControl}</li>\n+ * <li>{@link VaadinRolePrefixHolder}</li>\n+ * <li>{@link VaadinDefaultRequestCache}</li>\n+ * <li>{@link VaadinSavedRequestAwareAuthenticationSuccessHandler}</li>\n+ * <li>{@link ClientRegistrationRepository}</li>\n+ * </ul>\n+ */\n+public final class VaadinSecurityConfigurer\n+        extends AbstractHttpConfigurer<VaadinSecurityConfigurer, HttpSecurity> {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+            .getLogger(VaadinSecurityConfigurer.class);\n+\n+    private final List<LogoutHandler> logoutHandlers = new ArrayList<>();\n+\n+    private Class<? extends Component> loginView;\n+\n+    private String formLoginPage;\n+\n+    private String oauth2LoginPage;\n+\n+    private String logoutSuccessUrl;\n+\n+    private String postLogoutRedirectUri;\n+\n+    private boolean enableCsrfConfiguration = true;\n+\n+    private boolean enableLogoutConfiguration = true;\n+\n+    private boolean enableRequestCacheConfiguration = true;\n+\n+    private boolean enableExceptionHandlingConfiguration = true;\n+\n+    private boolean enableAuthorizedRequestsConfiguration = true;\n+\n+    private Consumer<AuthorizeHttpRequestsConfigurer<HttpSecurity>.AuthorizedUrl> anyRequestAuthorizeRule = AuthorizedUrl::authenticated;\n+\n+    private boolean enableNavigationAccessControl = true;\n+\n+    private boolean alreadyInitializedOnce = false;\n+\n+    /**\n+     * Creates a new instance the {@code VaadinSecurityConfigurer} that can be\n+     * used to configure security settings for Vaadin applications.\n+     *\n+     * @return a new instance of {@code VaadinSecurityConfigurer}\n+     */\n+    public static VaadinSecurityConfigurer vaadin() {\n+        return new VaadinSecurityConfigurer();\n+    }\n+\n+    private VaadinSecurityConfigurer() {\n+        // Instance creation is handled by the static factory method.\n+    }\n+\n+    /**\n+     * Configures the login view for use in a Flow application.\n+     * <p>\n+     * This method ensures that the provided login view class is annotated with\n+     * {@code @Route}, retrieves the route path for the login view, and sets up\n+     * the necessary configurations for login and logout paths.\n+     *\n+     * @param loginView\n+     *            the component class to be used as the login view\n+     * @return the current configurer instance for method chaining\n+     * @throws IllegalArgumentException\n+     *             if the provided class is not annotated with {@code @Route}\n+     */\n+    public VaadinSecurityConfigurer loginView(\n+            Class<? extends Component> loginView) {\n+        return loginView(loginView, getDefaultLogoutSuccessUrl());\n+    }\n+\n+    /**\n+     * Configures the login view for use in a Flow application and the logout\n+     * success URL.\n+     * <p>\n+     * This method ensures that the provided login view class is annotated with\n+     * {@code @Route}, retrieves the route path for the login view, and sets up\n+     * the necessary configurations for login and logout paths.\n+     *\n+     * @param loginView\n+     *            the component class to be used as the login view\n+     * @param logoutSuccessUrl\n+     *            the URL to redirect to upon a successful logout\n+     * @return the current configurer instance for method chaining\n+     * @throws IllegalArgumentException\n+     *             if the provided class is not annotated with {@code @Route}\n+     */\n+    public VaadinSecurityConfigurer loginView(\n+            Class<? extends Component> loginView, String logoutSuccessUrl) {\n+        this.loginView = loginView;\n+        var loginViewPath = getLoginViewPath(loginView);\n+        this.formLoginPage = getRequestUtil().applyUrlMapping(loginViewPath);\n+        this.logoutSuccessUrl = logoutSuccessUrl;\n+        return this;\n+    }\n+\n+    /**\n+     * Configures the login view for use in a Hilla application.\n+     * <p>\n+     * This is used when your application uses a Hilla-based login view that is\n+     * available at the given path.\n+     * <p>\n+     * If the path points to a Flow view, the corresponding Java class must be\n+     * annotated with {@link com.vaadin.flow.server.auth.AnonymousAllowed} to\n+     * ensure that the view is always accessible.\n+     *\n+     * @param loginView\n+     *            the path to the login view\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer loginView(String loginView) {\n+        return loginView(loginView, getDefaultLogoutSuccessUrl());\n+    }\n+\n+    /**\n+     * Configures the login view for use in a Hilla application and the logout\n+     * success URL.\n+     * <p>\n+     * This is used when your application uses a Hilla-based login view that is\n+     * available at the given path.\n+     * <p>\n+     * If the path points to a Flow view, the corresponding Java class must be\n+     * annotated with {@link com.vaadin.flow.server.auth.AnonymousAllowed} to\n+     * ensure that the view is always accessible.\n+     *\n+     * @param loginView\n+     *            the path to the login view\n+     * @param logoutSuccessUrl\n+     *            the URL to redirect to upon a successful logout\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer loginView(String loginView,\n+            String logoutSuccessUrl) {\n+        this.formLoginPage = getRequestUtil().applyUrlMapping(loginView);\n+        this.logoutSuccessUrl = logoutSuccessUrl;\n+        return this;\n+    }\n+\n+    /**\n+     * Configures the login page for OAuth2 authentication.\n+     * <p>\n+     * If using Spring's OAuth2 client, this should be set to Spring's internal\n+     * redirect endpoint {@code /oauth2/authorization/{registrationId}} where\n+     * {@code registrationId} is the ID of the OAuth2 client registration.\n+     * <p>\n+     * This method also configures a logout success handler that redirects to\n+     * the application base URL after logout.\n+     *\n+     * @param oauth2LoginPage\n+     *            the login page for OAuth2 authentication\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer oauth2LoginPage(String oauth2LoginPage) {\n+        return oauth2LoginPage(oauth2LoginPage, \""{baseUrl}\"");\n+    }\n+\n+    /**\n+     * Configures the login page for OAuth2 authentication and the post-logout\n+     * redirect URI.\n+     * <p>\n+     * If using Spring's OAuth2 client, this should be set to Spring's internal\n+     * redirect endpoint {@code /oauth2/authorization/{registrationId}} where\n+     * {@code registrationId} is the ID of the OAuth2 client registration.\n+     * <p>\n+     * The {@code {baseUrl}} placeholder is also supported, which is the same as\n+     * {@code {baseScheme}://{baseHost}{basePort}{basePath}}.\n+     *\n+     * @param oauth2LoginPage\n+     *            the login page for OAuth2 authentication\n+     * @param postLogoutRedirectUri\n+     *            the URI to redirect to after the user logs out\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer oauth2LoginPage(String oauth2LoginPage,\n+            String postLogoutRedirectUri) {\n+        this.oauth2LoginPage = oauth2LoginPage;\n+        this.postLogoutRedirectUri = postLogoutRedirectUri;\n+        return this;\n+    }\n+\n+    /**\n+     * Configures the handler for a successful logout.\n+     * <p>\n+     * This overrides the default handler configured automatically with either\n+     * {@link #loginView(Class)} or {@link #oauth2LoginPage(String)} (and their\n+     * overloads).\n+     *\n+     * @param logoutSuccessHandler\n+     *            the logout success handler\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer logoutSuccessHandler(\n+            LogoutSuccessHandler logoutSuccessHandler) {\n+        setSharedObject(LogoutSuccessHandler.class, logoutSuccessHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a {@link LogoutHandler} to the list of logout handlers.\n+     *\n+     * @param logoutHandler\n+     *            the logout handler to be added\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer addLogoutHandler(\n+            LogoutHandler logoutHandler) {\n+        logoutHandlers.add(logoutHandler);\n+        return this;\n+    }\n+\n+    /**\n+     * Enables or disables automatic CSRF configuration (enabled by default).\n+     * <p>\n+     * This configurer will automatically configure Spring's CSRF filter to\n+     * allow Vaadin internal framework requests to be properly processed.\n+     *\n+     * @param enableCsrfConfiguration\n+     *            whether CSRF configuration should be enabled\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer enableCsrfConfiguration(\n+            boolean enableCsrfConfiguration) {\n+        this.enableCsrfConfiguration = enableCsrfConfiguration;\n+        return this;\n+    }\n+\n+    /**\n+     * Enables or disables automatic logout configuration (enabled by default).\n+     * <p>\n+     * This configurer will automatically configure logout behavior to work\n+     * properly with Flow and Hilla.\n+     *\n+     * @param enableLogoutConfiguration\n+     *            whether logout configuration should be enabled\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer enableLogoutConfiguration(\n+            boolean enableLogoutConfiguration) {\n+        this.enableLogoutConfiguration = enableLogoutConfiguration;\n+        return this;\n+    }\n+\n+    /**\n+     * Enables or disables automatic configuration of the request cache (enabled\n+     * by default).\n+     * <p>\n+     * This configurer will automatically configure the request cache to work\n+     * properly with Vaadin's internal framework requests.\n+     *\n+     * @param enableRequestCacheConfiguration\n+     *            whether configuration of the request cache should be enabled\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer enableRequestCacheConfiguration(\n+            boolean enableRequestCacheConfiguration) {\n+        this.enableRequestCacheConfiguration = enableRequestCacheConfiguration;\n+        return this;\n+    }\n+\n+    /**\n+     * Enables or disables automatic configuration of exception handling\n+     * (enabled by default).\n+     * <p>\n+     * This configurer will automatically configure exception handling to work\n+     * properly with Flow and Hilla.\n+     *\n+     * @param enableExceptionHandlingConfiguration\n+     *            whether configuration of exception handling should be enabled\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer enableExceptionHandlingConfiguration(\n+            boolean enableExceptionHandlingConfiguration) {\n+        this.enableExceptionHandlingConfiguration = enableExceptionHandlingConfiguration;\n+        return this;\n+    }\n+\n+    /**\n+     * Enables or disables automatic configuration of authorized requests\n+     * (enabled by default).\n+     * <p>\n+     * This configurer will automatically configure authorized requests to\n+     * permit requests to anonymous Flow and Hilla views, and static assets.\n+     *\n+     * @param enableAuthorizedRequestsConfiguration\n+     *            whether configuration of authorized requests should be enabled\n+     * @return the current configurer instance for method chaining\n+     * @see #defaultPermitMatcher()\n+     */\n+    public VaadinSecurityConfigurer enableAuthorizedRequestsConfiguration(\n+            boolean enableAuthorizedRequestsConfiguration) {\n+        this.enableAuthorizedRequestsConfiguration = enableAuthorizedRequestsConfiguration;\n+        return this;\n+    }\n+\n+    /**\n+     * Configures the access rule for any request not matching other configured\n+     * rules.\n+     * <p>\n+     * The default rule is to require authentication, which is the equivalent of\n+     * passing {@link AuthorizedUrl#authenticated()} to this method.\n+     *\n+     * @param anyRequestAuthorizeRule\n+     *            the access rule for any request not matching other rules, or\n+     *            {@code null} to disable automatic configuration\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer anyRequest(\n+            Consumer<AuthorizeHttpRequestsConfigurer<HttpSecurity>.AuthorizedUrl> anyRequestAuthorizeRule) {\n+        this.anyRequestAuthorizeRule = anyRequestAuthorizeRule;\n+        return this;\n+    }\n+\n+    /**\n+     * Enables or disables configuration of {@link NavigationAccessControl}.\n+     * <p>\n+     * {@link NavigationAccessControl} is enabled by default.\n+     *\n+     * @param enableNavigationAccessControl\n+     *            a boolean flag indicating whether\n+     *            {@link NavigationAccessControl} should be enabled or disabled\n+     * @return the current configurer instance for method chaining\n+     */\n+    public VaadinSecurityConfigurer enableNavigationAccessControl(\n+            boolean enableNavigationAccessControl) {\n+        this.enableNavigationAccessControl = enableNavigationAccessControl;\n+        return this;\n+    }\n+\n+    /**\n+     * Creates and returns a composite {@link RequestMatcher} for identifying\n+     * requests that should be permitted without authentication within a Vaadin\n+     * application.\n+     * <p>\n+     * This matcher combines multiple specific matchers, including those for\n+     * framework internal requests, anonymous endpoints, allowed Hilla views,\n+     * anonymous routes, custom web icons, and default security configurations.\n+     *\n+     * @return a {@link RequestMatcher} that matches requests to be allowed\n+     *         without authentication\n+     */\n+    public RequestMatcher defaultPermitMatcher() {\n+        var urlMapping = getRequestUtil().getUrlMapping();\n+        var baseMatcher = RequestMatchers.anyOf(\n+                // Vaadin internal requests must always be permitted to allow\n+                // public Flow assets and/or the Flow login view\n+                getRequestUtil()::isFrameworkInternalRequest,\n+                // Public routes are permitted\n+                getRequestUtil()::isAnonymousRoute,\n+                // Custom web icons (and favicons) are permitted\n+                getRequestUtil()::isCustomWebIcon,\n+                // Matchers for Vaadin static resources\n+                getDefaultHttpSecurityPermitMatcher(urlMapping),\n+                getDefaultWebSecurityIgnoreMatcher(urlMapping));\n+        if (EndpointRequestUtil.isHillaAvailable()) {\n+            return RequestMatchers.anyOf(baseMatcher,\n+                    // Matchers for known Hilla views\n+                    getRequestUtil()::isAllowedHillaView,\n+                    // Matcher for public Hilla endpoints\n+                    getRequestUtil()::isAnonymousEndpoint);\n+        }\n+        return baseMatcher;\n+    }\n+\n+    @Override\n+    public void init(HttpSecurity http) throws Exception {\n+        if (formLoginPage != null) {\n+            http.formLogin(configurer -> {\n+                configurer.loginPage(formLoginPage).permitAll();\n+                configurer.successHandler(getAuthenticationSuccessHandler());\n+            });\n+        } else if (oauth2LoginPage != null) {\n+            http.oauth2Login(configurer -> {\n+                configurer.loginPage(oauth2LoginPage).permitAll();\n+                configurer.successHandler(getAuthenticationSuccessHandler());\n+            });\n+        }\n+        if (enableCsrfConfiguration) {\n+            http.csrf(this::customizeCsrf);\n+        }\n+        if (enableLogoutConfiguration) {\n+            http.logout(this::customizeLogout);\n+        }\n+        if (enableRequestCacheConfiguration) {\n+            http.requestCache(this::customizeRequestCache);\n+        }\n+        if (enableExceptionHandlingConfiguration) {\n+            http.exceptionHandling(this::customizeExceptionHandling);\n+        }\n+        if (enableAuthorizedRequestsConfiguration && !alreadyInitializedOnce) {\n+            http.authorizeHttpRequests(this::customizeAuthorizeHttpRequests);\n+        }\n+        // The init method might be called multiple times if the configurer is\n+        // added during initialization of another configurer. This flag allows\n+        // tracking whether initialization has already happened once to avoid\n+        // redundant configuration (e.g., adding request matchers twice).\n+        alreadyInitializedOnce = true;\n+    }\n+\n+    @Override\n+    public void configure(HttpSecurity http) throws Exception {\n+        var rolePrefixHolder = getVaadinRolePrefixHolder();\n+        if (rolePrefixHolder != null) {\n+            getAuthenticationContext().setRolePrefixHolder(rolePrefixHolder);\n+            getSharedObject(SecurityContextHolderAwareRequestFilter.class)\n+                    .ifPresent(rolePrefixHolder::resetRolePrefix);\n+        }\n+        getNavigationAccessControl().setEnabled(enableNavigationAccessControl);\n+        if (enableNavigationAccessControl) {\n+            if (loginView != null) {\n+                getNavigationAccessControl().setLoginView(loginView);\n+            } else if (formLoginPage != null) {\n+                getNavigationAccessControl().setLoginView(formLoginPage);\n+            } else if (oauth2LoginPage != null) {\n+                getNavigationAccessControl().setLoginView(oauth2LoginPage);\n+            }\n+        }\n+        // Configuring the authorized requests here allows other configurers to\n+        // customize the authorized requests during their own initialization.\n+        // Also, it ensures that the anyRequest authorize-rule is configured as\n+        // late as possible, since it must be the last authorize-rule to be set.\n+        if (enableAuthorizedRequestsConfiguration\n+                && anyRequestAuthorizeRule != null) {\n+            http.authorizeHttpRequests(registry -> {\n+                anyRequestAuthorizeRule.accept(registry.anyRequest());\n+            });\n+        }\n+    }\n+\n+    private String getLoginViewPath(Class<? extends Component> loginView) {\n+        var route = AnnotationReader.getAnnotationFor(loginView, Route.class);\n+        if (route.isEmpty()) {\n+            throw new IllegalArgumentException(\""Unable find a @Route annotation\""\n+                    + \"" on the login view \"" + loginView.getName());\n+        }\n+        if (getApplicationContext() instanceof WebApplicationContext wac) {\n+            var vaadinCtx = new VaadinServletContext(wac.getServletContext());\n+            var loginPath = RouteUtil.getRoutePath(vaadinCtx, loginView);\n+            if (!loginPath.startsWith(\""/\"")) {\n+                loginPath = \""/\"" + loginPath;\n+            }\n+            return loginPath;\n+        }\n+        throw new IllegalStateException(\""VaadinWebSecurityConfigurer cannot be \""\n+                + \""used without WebApplicationContext.\"");\n+    }\n+\n+    private String getServletContextPath() {\n+        return getSharedObjectOrBean(ServletContext.class).getContextPath();\n+    }\n+\n+    private String getDefaultLogoutSuccessUrl() {\n+        var servletContextPath = getServletContextPath();\n+        if (!servletContextPath.startsWith(\""/\"")) {\n+            servletContextPath = \""/\"" + servletContextPath;\n+        }\n+        return servletContextPath;\n+    }\n+\n+    private RequestUtil getRequestUtil() {\n+        return getSharedObjectOrBean(RequestUtil.class);\n+    }\n+\n+    private AuthenticationContext getAuthenticationContext() {\n+        return getSharedObjectOrBean(AuthenticationContext.class);\n+    }\n+\n+    private NavigationAccessControl getNavigationAccessControl() {\n+        return getSharedObjectOrBean(NavigationAccessControl.class);\n+    }\n+\n+    private VaadinRolePrefixHolder getVaadinRolePrefixHolder() {\n+        return getSharedObjectOrBean(VaadinRolePrefixHolder.class);\n+    }\n+\n+    private VaadinDefaultRequestCache getVaadinDefaultRequestCache() {\n+        return getSharedObjectOrBean(VaadinDefaultRequestCache.class);\n+    }\n+\n+    private VaadinSavedRequestAwareAuthenticationSuccessHandler getAuthenticationSuccessHandler() {\n+        return getSharedObject(\n+                VaadinSavedRequestAwareAuthenticationSuccessHandler.class)\n+                .orElseGet(this::createAuthenticationSuccessHandler);\n+    }\n+\n+    private VaadinSavedRequestAwareAuthenticationSuccessHandler createAuthenticationSuccessHandler() {\n+        var handler = new VaadinSavedRequestAwareAuthenticationSuccessHandler();\n+        handler.setDefaultTargetUrl(getRequestUtil().applyUrlMapping(\""\""));\n+        getSharedObject(RequestCache.class).ifPresent(handler::setRequestCache);\n+        getBuilder().setSharedObject(\n+                VaadinSavedRequestAwareAuthenticationSuccessHandler.class,\n+                handler);\n+        return handler;\n+    }\n+\n+    private void customizeCsrf(CsrfConfigurer<HttpSecurity> configurer) {\n+        if (!alreadyInitializedOnce) {\n+            configurer.ignoringRequestMatchers(\n+                    getRequestUtil()::isFrameworkInternalRequest);\n+        }\n+        if (formLoginPage != null) {\n+            configurer.ignoringRequestMatchers(\n+                    new AntPathRequestMatcher(formLoginPage));\n+        }\n+    }\n+\n+    private void customizeLogout(LogoutConfigurer<HttpSecurity> configurer) {\n+        getSharedObject(LogoutSuccessHandler.class).or(() -> {\n+            if (logoutSuccessUrl != null) {\n+                return createSimpleUrlLogoutSuccessHandler(logoutSuccessUrl);\n+            } else if (postLogoutRedirectUri != null) {\n+                return createOidcLogoutSuccessHandler(postLogoutRedirectUri);\n+            }\n+            return Optional.empty();\n+        }).ifPresent(configurer::logoutSuccessHandler);\n+        var existingHandlers = configurer.getLogoutHandlers();\n+        logoutHandlers.stream()\n+                .filter(handler -> !existingHandlers.contains(handler))\n+                .forEach(configurer::addLogoutHandler);\n+        if (!alreadyInitializedOnce) {\n+            // Allows setting logout handlers on the AuthenticationContext at\n+            // the right time, i.e., during the logout configuration phase.\n+            var postProcessor = new ObjectPostProcessor<LogoutFilter>() {\n+                @Override\n+                public <O extends LogoutFilter> O postProcess(O filter) {\n+                    getAuthenticationContext().setLogoutHandlers(\n+                            configurer.getLogoutSuccessHandler(),\n+                            configurer.getLogoutHandlers());\n+                    return filter;\n+                }\n+            };\n+            configurer.withObjectPostProcessor(postProcessor);\n+        }\n+    }\n+\n+    private Optional<LogoutSuccessHandler> createSimpleUrlLogoutSuccessHandler(\n+            String logoutSuccessUrl) {\n+        var handler = new VaadinSimpleUrlLogoutSuccessHandler();\n+        handler.setRedirectStrategy(new UidlRedirectStrategy());\n+        handler.setDefaultTargetUrl(logoutSuccessUrl);\n+        return Optional.of(handler);\n+    }\n+\n+    private Optional<LogoutSuccessHandler> createOidcLogoutSuccessHandler(\n+            String postLogoutRedirectUri) {\n+        var crr = getSharedObjectOrBean(ClientRegistrationRepository.class);\n+        if (crr != null) {\n+            var handler = new OidcClientInitiatedLogoutSuccessHandler(crr);\n+            handler.setRedirectStrategy(new UidlRedirectStrategy());\n+            handler.setPostLogoutRedirectUri(postLogoutRedirectUri);\n+            return Optional.of(handler);\n+        }\n+        LOGGER.warn(\""Cannot create OidcClientInitiatedLogoutSuccessHandler \""\n+                + \""because ClientRegistrationRepository bean is not available.\"");\n+        return Optional.empty();\n+    }\n+\n+    private void customizeRequestCache(\n+            RequestCacheConfigurer<HttpSecurity> configurer) {\n+        var vaadinDefaultRequestCache = getVaadinDefaultRequestCache();\n+        if (vaadinDefaultRequestCache == null) {\n+            throw new IllegalStateException(\""No VaadinDefaultRequestCache bean \""\n+                    + \""or shared object found. Please make sure that either a \""\n+                    + \""bean or shared object of type VaadinDefaultRequestCache \""\n+                    + \""is available.\"");\n+        }\n+        // If there is an existing RequestCache shared object, use that as the\n+        // delegate cache for requests not saved by VaadinDefaultRequestCache.\n+        getSharedObject(RequestCache.class)\n+                .filter(cache -> !(cache instanceof VaadinDefaultRequestCache))\n+                .ifPresent(vaadinDefaultRequestCache::setDelegateRequestCache);\n+        configurer.requestCache(vaadinDefaultRequestCache);\n+    }\n+\n+    private void customizeExceptionHandling(\n+            ExceptionHandlingConfigurer<HttpSecurity> configurer) {\n+        if (EndpointRequestUtil.isHillaAvailable()) {\n+            // Respond with 401 Unauthorized HTTP status code for unauthorized\n+            // requests for protected Hilla endpoints, so that the response\n+            // could be handled on the client side using, for example, Hilla's\n+            // `InvalidSessionMiddleware`.\n+            configurer.accessDeniedHandler(createAccessDeniedHandler())\n+                    .defaultAuthenticationEntryPointFor(\n+                            new HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED),\n+                            getRequestUtil()::isEndpointRequest);\n+        }\n+        if (formLoginPage != null) {\n+            configurer.defaultAuthenticationEntryPointFor(\n+                    new LoginUrlAuthenticationEntryPoint(formLoginPage),\n+                    AnyRequestMatcher.INSTANCE);\n+        }\n+    }\n+\n+    private AccessDeniedHandler createAccessDeniedHandler() {\n+        var exceptionHandlers = new LinkedHashMap<Class<? extends AccessDeniedException>, AccessDeniedHandler>();\n+        exceptionHandlers.put(CsrfException.class, (req, res, exc) -> res\n+                .setStatus(HttpStatus.UNAUTHORIZED.value()));\n+        var requestHandlers = new LinkedHashMap<RequestMatcher, AccessDeniedHandler>();\n+        requestHandlers.put(getRequestUtil()::isEndpointRequest,\n+                new DelegatingAccessDeniedHandler(exceptionHandlers,\n+                        new AccessDeniedHandlerImpl()));\n+        return new RequestMatcherDelegatingAccessDeniedHandler(requestHandlers,\n+                new AccessDeniedHandlerImpl());\n+    }\n+\n+    private void customizeAuthorizeHttpRequests(\n+            AuthorizeHttpRequestsConfigurer<HttpSecurity>.AuthorizationManagerRequestMatcherRegistry registry) {\n+        registry.requestMatchers(defaultPermitMatcher()).permitAll();\n+    }\n+\n+    private ApplicationContext getApplicationContext() {\n+        return getBuilder().getSharedObject(ApplicationContext.class);\n+    }\n+\n+    private <T> void setSharedObject(Class<T> type, T object) {\n+        getBuilder().setSharedObject(type, object);\n+    }\n+\n+    private <T> Optional<T> getSharedObject(Class<T> type) {\n+        return Optional.ofNullable(getBuilder().getSharedObject(type));\n+    }\n+\n+    private <T> T getSharedObjectOrBean(Class<T> type) {\n+        return getSharedObject(type).orElseGet(() -> {\n+            var provider = getApplicationContext().getBeanProvider(type);\n+            T bean = provider.getIfAvailable();\n+            if (bean != null) {\n+                getBuilder().setSharedObject(type, bean);\n+            }\n+            return bean;\n+        });\n+    }\n+}\n"", ""test_patch"": ""diff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow-contextpath/pom.xml b/flow-tests/vaadin-spring-tests/test-spring-security-flow-contextpath/pom.xml\nindex 17d6d3963fa..7e33710d9ec 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow-contextpath/pom.xml\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow-contextpath/pom.xml\n@@ -47,6 +47,7 @@\n             <groupId>com.vaadin</groupId>\n             <artifactId>test-spring-security-flow</artifactId>\n             <version>${project.version}</version>\n+            <classifier>tests</classifier>\n             <type>test-jar</type>\n             <scope>test</scope>\n         </dependency>\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\nnew file mode 100644\nindex 00000000000..c3cd87b68f5\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\n@@ -0,0 +1,114 @@\n+package com.vaadin.flow.spring.flowsecurity;\n+\n+import jakarta.servlet.ServletContext;\n+\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler;\n+import org.springframework.security.access.expression.method.MethodSecurityExpressionHandler;\n+import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.userdetails.User;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.internal.UrlUtil;\n+import com.vaadin.flow.spring.RootMappedCondition;\n+import com.vaadin.flow.spring.VaadinConfigurationProperties;\n+import com.vaadin.flow.spring.flowsecurity.data.UserInfo;\n+import com.vaadin.flow.spring.flowsecurity.service.UserInfoService;\n+import com.vaadin.flow.spring.flowsecurity.views.LoginView;\n+import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+\n+import static com.vaadin.flow.spring.flowsecurity.service.UserInfoService.ROLE_ADMIN;\n+\n+@EnableWebSecurity\n+@EnableMethodSecurity(prePostEnabled = false, jsr250Enabled = true, securedEnabled = true)\n+@Configuration\n+@Profile(\""legacy-vaadin-web-security\"")\n+public class LegacySecurityConfig extends VaadinWebSecurity {\n+\n+    @Autowired\n+    private UserInfoService userInfoService;\n+\n+    @Autowired\n+    private ServletContext servletContext;\n+\n+    @Autowired\n+    private VaadinConfigurationProperties vaadinConfigurationProperties;\n+\n+    public String getLogoutSuccessUrl() {\n+        String logoutSuccessUrl;\n+        String mapping = vaadinConfigurationProperties.getUrlMapping();\n+        if (RootMappedCondition.isRootMapping(mapping)) {\n+            logoutSuccessUrl = \""/\"";\n+        } else {\n+            logoutSuccessUrl = mapping.replaceFirst(\""/\\\\*$\"", \""/\"");\n+        }\n+        String contextPath = servletContext.getContextPath();\n+        if (!\""\"".equals(contextPath)) {\n+            logoutSuccessUrl = contextPath + logoutSuccessUrl;\n+        }\n+        return logoutSuccessUrl;\n+    }\n+\n+    @Override\n+    public void configure(HttpSecurity http) throws Exception {\n+        http.authorizeHttpRequests(auth -> auth\n+                .requestMatchers(new AntPathRequestMatcher(\""/admin-only/**\""))\n+                .hasAnyRole(ROLE_ADMIN)\n+                .requestMatchers(new AntPathRequestMatcher(\""/public/**\""))\n+                .permitAll());\n+        super.configure(http);\n+        if (getLogoutSuccessUrl().equals(\""/\"")) {\n+            // Test the default url with empty context path\n+            setLoginView(http, LoginView.class);\n+        } else {\n+            setLoginView(http, LoginView.class, getLogoutSuccessUrl());\n+        }\n+        http.logout(cfg -> cfg\n+                .addLogoutHandler((request, response, authentication) -> {\n+                    UI ui = UI.getCurrent();\n+                    ui.accessSynchronously(() -> ui.getPage()\n+                            .setLocation(UrlUtil.getServletPathRelative(\n+                                    getLogoutSuccessUrl(), request)));\n+                }));\n+    }\n+\n+    @Bean\n+    public InMemoryUserDetailsManager userDetailsService() {\n+        return new InMemoryUserDetailsManager() {\n+            @Override\n+            public UserDetails loadUserByUsername(String username)\n+                    throws UsernameNotFoundException {\n+                UserInfo userInfo = userInfoService.findByUsername(username);\n+                if (userInfo == null) {\n+                    throw new UsernameNotFoundException(\n+                            \""No user present with username: \"" + username);\n+                } else {\n+                    return new User(userInfo.getUsername(),\n+                            userInfo.getEncodedPassword(),\n+                            userInfo.getRoles().stream()\n+                                    .map(role -> new SimpleGrantedAuthority(\n+                                            \""ROLE_\"" + role))\n+                                    .collect(Collectors.toList()));\n+                }\n+            }\n+        };\n+    }\n+\n+    @Bean\n+    protected MethodSecurityExpressionHandler createExpressionHandler() {\n+        return new DefaultMethodSecurityExpressionHandler();\n+    }\n+\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\nindex db97e4b7e35..9faba439de3 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow-methodsecurity/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n@@ -4,9 +4,10 @@\n \n import java.util.stream.Collectors;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler;\n import org.springframework.security.access.expression.method.MethodSecurityExpressionHandler;\n import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\n@@ -17,6 +18,7 @@\n import org.springframework.security.core.userdetails.UserDetails;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n+import org.springframework.security.web.SecurityFilterChain;\n import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n \n import com.vaadin.flow.component.UI;\n@@ -26,23 +28,31 @@\n import com.vaadin.flow.spring.flowsecurity.data.UserInfo;\n import com.vaadin.flow.spring.flowsecurity.service.UserInfoService;\n import com.vaadin.flow.spring.flowsecurity.views.LoginView;\n-import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+import com.vaadin.flow.spring.security.VaadinAwareSecurityContextHolderStrategyConfiguration;\n \n import static com.vaadin.flow.spring.flowsecurity.service.UserInfoService.ROLE_ADMIN;\n+import static com.vaadin.flow.spring.security.VaadinSecurityConfigurer.vaadin;\n \n @EnableWebSecurity\n @EnableMethodSecurity(prePostEnabled = false, jsr250Enabled = true, securedEnabled = true)\n @Configuration\n-public class SecurityConfig extends VaadinWebSecurity {\n+@Profile(\""default\"")\n+@Import(VaadinAwareSecurityContextHolderStrategyConfiguration.class)\n+public class SecurityConfig {\n \n-    @Autowired\n-    private UserInfoService userInfoService;\n+    private final UserInfoService userInfoService;\n \n-    @Autowired\n-    private ServletContext servletContext;\n+    private final ServletContext servletContext;\n \n-    @Autowired\n-    private VaadinConfigurationProperties vaadinConfigurationProperties;\n+    private final VaadinConfigurationProperties vaadinConfigurationProperties;\n+\n+    public SecurityConfig(UserInfoService userInfoService,\n+            ServletContext servletContext,\n+            VaadinConfigurationProperties vaadinConfigurationProperties) {\n+        this.userInfoService = userInfoService;\n+        this.servletContext = servletContext;\n+        this.vaadinConfigurationProperties = vaadinConfigurationProperties;\n+    }\n \n     public String getLogoutSuccessUrl() {\n         String logoutSuccessUrl;\n@@ -59,27 +69,29 @@ public String getLogoutSuccessUrl() {\n         return logoutSuccessUrl;\n     }\n \n-    @Override\n-    public void configure(HttpSecurity http) throws Exception {\n+    @Bean\n+    SecurityFilterChain vaadinSecurityFilterChain(HttpSecurity http)\n+            throws Exception {\n         http.authorizeHttpRequests(auth -> auth\n                 .requestMatchers(new AntPathRequestMatcher(\""/admin-only/**\""))\n                 .hasAnyRole(ROLE_ADMIN)\n                 .requestMatchers(new AntPathRequestMatcher(\""/public/**\""))\n                 .permitAll());\n-        super.configure(http);\n-        if (getLogoutSuccessUrl().equals(\""/\"")) {\n-            // Test the default url with empty context path\n-            setLoginView(http, LoginView.class);\n-        } else {\n-            setLoginView(http, LoginView.class, getLogoutSuccessUrl());\n-        }\n-        http.logout(cfg -> cfg\n-                .addLogoutHandler((request, response, authentication) -> {\n-                    UI ui = UI.getCurrent();\n-                    ui.accessSynchronously(() -> ui.getPage()\n-                            .setLocation(UrlUtil.getServletPathRelative(\n-                                    getLogoutSuccessUrl(), request)));\n-                }));\n+        http.with(vaadin(), cfg -> {\n+            String logoutSuccessUrl = getLogoutSuccessUrl();\n+            if (logoutSuccessUrl.equals(\""/\"")) {\n+                cfg.loginView(LoginView.class);\n+            } else {\n+                cfg.loginView(LoginView.class, logoutSuccessUrl);\n+            }\n+            cfg.addLogoutHandler((request, response, authentication) -> {\n+                UI ui = UI.getCurrent();\n+                ui.accessSynchronously(() -> ui.getPage().setLocation(\n+                        UrlUtil.getServletPathRelative(getLogoutSuccessUrl(),\n+                                request)));\n+            });\n+        });\n+        return http.build();\n     }\n \n     @Bean\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow-standalone-routepathaccesschecker/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow-standalone-routepathaccesschecker/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\nindex 4fa81610d0d..c746b682d25 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow-standalone-routepathaccesschecker/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow-standalone-routepathaccesschecker/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n@@ -16,15 +16,11 @@\n import org.springframework.security.core.userdetails.UserDetails;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n-import org.springframework.security.web.DefaultSecurityFilterChain;\n import org.springframework.security.web.SecurityFilterChain;\n-import org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler;\n import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n \n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.internal.UrlUtil;\n-import com.vaadin.flow.server.HandlerHelper;\n-import com.vaadin.flow.server.auth.NavigationAccessControl;\n import com.vaadin.flow.spring.RootMappedCondition;\n import com.vaadin.flow.spring.VaadinConfigurationProperties;\n import com.vaadin.flow.spring.flowsecurity.data.UserInfo;\n@@ -33,10 +29,10 @@\n import com.vaadin.flow.spring.security.AuthenticationContext;\n import com.vaadin.flow.spring.security.NavigationAccessControlConfigurer;\n import com.vaadin.flow.spring.security.RequestUtil;\n-import com.vaadin.flow.spring.security.UidlRedirectStrategy;\n \n import static com.vaadin.flow.spring.flowsecurity.service.UserInfoService.ROLE_ADMIN;\n import static com.vaadin.flow.spring.security.RequestUtil.antMatchers;\n+import static com.vaadin.flow.spring.security.VaadinSecurityConfigurer.vaadin;\n \n @EnableWebSecurity\n @Configuration\n@@ -64,7 +60,7 @@ public AuthenticationContext authenticationContext() {\n     @Bean\n     static NavigationAccessControlConfigurer navigationAccessControlConfigurer() {\n         return new NavigationAccessControlConfigurer()\n-                .withRoutePathAccessChecker().withLoginView(LoginView.class);\n+                .withRoutePathAccessChecker();\n     }\n \n     @Bean\n@@ -81,17 +77,6 @@ public SecurityFilterChain webFilterChain(HttpSecurity http,\n                 // Permit access to static resources\n                 .requestMatchers(PathRequest.toStaticResources().atCommonLocations())\n                     .permitAll()\n-                // Permit access to vaadin's internal communication\n-                .requestMatchers(request -> HandlerHelper\n-                        .isFrameworkInternalRequest(\""/*\"", request))\n-                    .permitAll()\n-                .requestMatchers(requestUtil::isAnonymousRoute)\n-                    .permitAll()\n-                // Permit technical access to vaadin's static files\n-                .requestMatchers(new AntPathRequestMatcher(\""/VAADIN/**\""))\n-                    .permitAll()\n-                // custom request matchers. using 'routeAwareAntMatcher' to\n-                // allow checking route and alias paths against patterns\n                 .requestMatchers(antMatchers(\""/admin-only/**\"", \""/admin\""))\n                     .hasAnyRole(ROLE_ADMIN)\n                 .requestMatchers(antMatchers(\""/private\""))\n@@ -105,34 +90,21 @@ public SecurityFilterChain webFilterChain(HttpSecurity http,\n                     .hasAnyRole(ROLE_ADMIN)\n                 .requestMatchers(antMatchers(\""/home\"", \""/hey/**\""))\n                     .permitAll()\n-                // Secure everything else\n-                .anyRequest().authenticated()\n-        );\n+                );\n         // @formatter:on\n-\n-        http.logout(cfg -> {\n-            SimpleUrlLogoutSuccessHandler logoutSuccessHandler = new SimpleUrlLogoutSuccessHandler();\n-            logoutSuccessHandler.setDefaultTargetUrl(getLogoutSuccessUrl());\n-            logoutSuccessHandler\n-                    .setRedirectStrategy(new UidlRedirectStrategy());\n-            cfg.logoutSuccessHandler(logoutSuccessHandler);\n-            cfg.addLogoutHandler((request, response, authentication) -> {\n-                UI ui = UI.getCurrent();\n-                ui.accessSynchronously(() -> ui.getPage().setLocation(\n-                        UrlUtil.getServletPathRelative(getLogoutSuccessUrl(),\n-                                request)));\n-            });\n-        });\n-        // Custom login page with form authentication\n-        http.formLogin(cfg -> cfg.loginPage(\""/my/login/page\"").permitAll());\n-        DefaultSecurityFilterChain filterChain = http.build();\n-\n-        // Test application uses AuthenticationContext, configure it with\n-        // the logout handlers\n-        AuthenticationContext.applySecurityConfiguration(http,\n-                authenticationContext);\n-\n-        return filterChain;\n+        http.with(vaadin(),\n+                cfg -> cfg.loginView(LoginView.class, getLogoutSuccessUrl())\n+                        .addLogoutHandler(\n+                                (request, response, authentication) -> {\n+                                    UI ui = UI.getCurrent();\n+                                    ui.accessSynchronously(() -> ui.getPage()\n+                                            .setLocation(UrlUtil\n+                                                    .getServletPathRelative(\n+                                                            getLogoutSuccessUrl(),\n+                                                            request)));\n+                                }));\n+\n+        return http.build();\n     }\n \n     public String getLogoutSuccessUrl() {\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\nnew file mode 100644\nindex 00000000000..05b5f3f28ca\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\n@@ -0,0 +1,167 @@\n+package com.vaadin.flow.spring.flowsecurity;\n+\n+import jakarta.servlet.ServletContext;\n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.http.HttpServletRequest;\n+import jakarta.servlet.http.HttpServletResponse;\n+\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.userdetails.User;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n+import org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler;\n+import org.springframework.security.web.authentication.switchuser.SwitchUserFilter;\n+import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.internal.UrlUtil;\n+import com.vaadin.flow.spring.RootMappedCondition;\n+import com.vaadin.flow.spring.VaadinConfigurationProperties;\n+import com.vaadin.flow.spring.flowsecurity.data.UserInfo;\n+import com.vaadin.flow.spring.flowsecurity.service.UserInfoService;\n+import com.vaadin.flow.spring.flowsecurity.views.LoginView;\n+import com.vaadin.flow.spring.security.UidlRedirectStrategy;\n+import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+\n+import static com.vaadin.flow.spring.flowsecurity.service.UserInfoService.ROLE_ADMIN;\n+import static org.springframework.security.web.util.matcher.AntPathRequestMatcher.antMatcher;\n+\n+@EnableWebSecurity\n+@Configuration\n+@Profile(\""legacy-vaadin-web-security\"")\n+public class LegacySecurityConfig extends VaadinWebSecurity {\n+\n+    @Autowired\n+    private UserInfoService userInfoService;\n+\n+    @Autowired\n+    private ServletContext servletContext;\n+\n+    @Autowired\n+    private VaadinConfigurationProperties vaadinConfigurationProperties;\n+\n+    public String getRootUrl() {\n+        return getRootUrl(true);\n+    }\n+\n+    public String getRootUrl(boolean includeContextPath) {\n+        String rootUrl;\n+        String mapping = vaadinConfigurationProperties.getUrlMapping();\n+        if (RootMappedCondition.isRootMapping(mapping)) {\n+            rootUrl = \""/\"";\n+        } else {\n+            rootUrl = mapping.replaceFirst(\""/\\\\*$\"", \""/\"");\n+        }\n+        String contextPath = servletContext.getContextPath();\n+        if (includeContextPath && !\""\"".equals(contextPath)) {\n+            rootUrl = contextPath + rootUrl;\n+        }\n+        return rootUrl;\n+    }\n+\n+    public String getLogoutSuccessUrl() {\n+        return getRootUrl();\n+    }\n+\n+    @Override\n+    public void configure(HttpSecurity http) throws Exception {\n+        // @formatter:off\n+        http.authorizeHttpRequests(auth -> auth\n+                .requestMatchers(new AntPathRequestMatcher(\""/admin-only/**\""))\n+                    .hasAnyRole(ROLE_ADMIN)\n+                .requestMatchers(antMatchers(\""/public/**\"", \""/error\""))\n+                    .permitAll());\n+\n+        http.authorizeHttpRequests(auth -> auth.requestMatchers(new AntPathRequestMatcher(\""/switchUser\"")).hasAnyRole(\""ADMIN\"", \""PREVIOUS_ADMINISTRATOR\""));\n+        http.authorizeHttpRequests(auth -> auth.requestMatchers(new AntPathRequestMatcher(\""/impersonate/exit\"")).hasRole(\""PREVIOUS_ADMINISTRATOR\""));\n+\n+        // @formatter:on\n+        super.configure(http);\n+        if (getLogoutSuccessUrl().equals(\""/\"")) {\n+            // Test the default url with empty context path\n+            setLoginView(http, LoginView.class);\n+        } else {\n+            setLoginView(http, LoginView.class, getLogoutSuccessUrl());\n+        }\n+\n+        http.logout(cfg -> cfg\n+                .logoutRequestMatcher(new AntPathRequestMatcher(\n+                        getRootUrl(false) + \""doLogout\"", \""GET\""))\n+                .addLogoutHandler((request, response, authentication) -> {\n+                    if (!request.getRequestURI().endsWith(\""doLogout\"")) {\n+                        UI ui = UI.getCurrent();\n+                        ui.accessSynchronously(() -> ui.getPage()\n+                                .setLocation(UrlUtil.getServletPathRelative(\n+                                        getLogoutSuccessUrl(), request)));\n+                    }\n+                }).logoutSuccessHandler(this::onLogoutOnNonVaadinUrl)\n+                .permitAll());\n+    }\n+\n+    public void onLogoutOnNonVaadinUrl(HttpServletRequest request,\n+            HttpServletResponse response, Authentication authentication)\n+            throws IOException, ServletException {\n+        if (!request.getRequestURI().endsWith(\""doLogout\"")) {\n+            return;\n+        }\n+        try {\n+            // Simulate long processing time\n+            Thread.currentThread().sleep(3000);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+        SimpleUrlLogoutSuccessHandler urlLogoutHandler = new SimpleUrlLogoutSuccessHandler();\n+        urlLogoutHandler.setDefaultTargetUrl(getRootUrl(false) + \""logout\"");\n+        urlLogoutHandler.setRedirectStrategy(new UidlRedirectStrategy());\n+        urlLogoutHandler.onLogoutSuccess(request, response, authentication);\n+    }\n+\n+    @Bean\n+    public InMemoryUserDetailsManager userDetailsService() {\n+        return new InMemoryUserDetailsManager() {\n+            @Override\n+            public UserDetails loadUserByUsername(String username)\n+                    throws UsernameNotFoundException {\n+                UserInfo userInfo = userInfoService.findByUsername(username);\n+                if (userInfo == null) {\n+                    throw new UsernameNotFoundException(\n+                            \""No user present with username: \"" + username);\n+                } else {\n+                    return new User(userInfo.getUsername(),\n+                            userInfo.getEncodedPassword(),\n+                            userInfo.getRoles().stream()\n+                                    .map(role -> new SimpleGrantedAuthority(\n+                                            \""ROLE_\"" + role))\n+                                    .collect(Collectors.toList()));\n+                }\n+            }\n+        };\n+    }\n+\n+    @Bean\n+    @DependsOn(\""VaadinSecurityContextHolderStrategy\"")\n+    public SwitchUserFilter switchUserFilter() {\n+        SwitchUserFilter filter = new SwitchUserFilter();\n+        filter.setUserDetailsService(userDetailsService());\n+        filter.setSwitchUserMatcher(antMatcher(HttpMethod.GET, \""/impersonate\""));\n+        filter.setSwitchFailureUrl(\""/switchUser\"");\n+        filter.setExitUserMatcher(\n+                antMatcher(HttpMethod.GET, \""/impersonate/exit\""));\n+        filter.setTargetUrl(\""/\"");\n+        return filter;\n+    }\n+\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\nindex a32deec960e..1d15524e628 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n@@ -8,10 +8,11 @@\n import java.io.IOException;\n import java.util.stream.Collectors;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.DependsOn;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.http.HttpMethod;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n@@ -21,6 +22,7 @@\n import org.springframework.security.core.userdetails.UserDetails;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n+import org.springframework.security.web.SecurityFilterChain;\n import org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler;\n import org.springframework.security.web.authentication.switchuser.SwitchUserFilter;\n import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n@@ -32,24 +34,33 @@\n import com.vaadin.flow.spring.flowsecurity.data.UserInfo;\n import com.vaadin.flow.spring.flowsecurity.service.UserInfoService;\n import com.vaadin.flow.spring.flowsecurity.views.LoginView;\n+import com.vaadin.flow.spring.security.RequestUtil;\n import com.vaadin.flow.spring.security.UidlRedirectStrategy;\n-import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+import com.vaadin.flow.spring.security.VaadinAwareSecurityContextHolderStrategyConfiguration;\n \n import static com.vaadin.flow.spring.flowsecurity.service.UserInfoService.ROLE_ADMIN;\n+import static com.vaadin.flow.spring.security.VaadinSecurityConfigurer.vaadin;\n import static org.springframework.security.web.util.matcher.AntPathRequestMatcher.antMatcher;\n \n @EnableWebSecurity\n @Configuration\n-public class SecurityConfig extends VaadinWebSecurity {\n+@Profile(\""default\"")\n+@Import(VaadinAwareSecurityContextHolderStrategyConfiguration.class)\n+public class SecurityConfig {\n \n-    @Autowired\n-    private UserInfoService userInfoService;\n+    private final UserInfoService userInfoService;\n \n-    @Autowired\n-    private ServletContext servletContext;\n+    private final ServletContext servletContext;\n \n-    @Autowired\n-    private VaadinConfigurationProperties vaadinConfigurationProperties;\n+    private final VaadinConfigurationProperties vaadinConfigurationProperties;\n+\n+    public SecurityConfig(UserInfoService userInfoService,\n+            ServletContext servletContext,\n+            VaadinConfigurationProperties vaadinConfigurationProperties) {\n+        this.userInfoService = userInfoService;\n+        this.servletContext = servletContext;\n+        this.vaadinConfigurationProperties = vaadinConfigurationProperties;\n+    }\n \n     public String getRootUrl() {\n         return getRootUrl(true);\n@@ -74,39 +85,37 @@ public String getLogoutSuccessUrl() {\n         return getRootUrl();\n     }\n \n-    @Override\n-    public void configure(HttpSecurity http) throws Exception {\n-        // @formatter:off\n+    @Bean\n+    SecurityFilterChain vaadinSecurityFilterChain(HttpSecurity http)\n+            throws Exception {\n         http.authorizeHttpRequests(auth -> auth\n                 .requestMatchers(new AntPathRequestMatcher(\""/admin-only/**\""))\n-                    .hasAnyRole(ROLE_ADMIN)\n-                .requestMatchers(antMatchers(\""/public/**\"", \""/error\""))\n-                    .permitAll());\n-\n-        http.authorizeHttpRequests(auth -> auth.requestMatchers(new AntPathRequestMatcher(\""/switchUser\"")).hasAnyRole(\""ADMIN\"", \""PREVIOUS_ADMINISTRATOR\""));\n-        http.authorizeHttpRequests(auth -> auth.requestMatchers(new AntPathRequestMatcher(\""/impersonate/exit\"")).hasRole(\""PREVIOUS_ADMINISTRATOR\""));\n-\n-        // @formatter:on\n-        super.configure(http);\n-        if (getLogoutSuccessUrl().equals(\""/\"")) {\n-            // Test the default url with empty context path\n-            setLoginView(http, LoginView.class);\n-        } else {\n-            setLoginView(http, LoginView.class, getLogoutSuccessUrl());\n-        }\n-\n-        http.logout(cfg -> cfg\n-                .logoutRequestMatcher(new AntPathRequestMatcher(\n-                        getRootUrl(false) + \""doLogout\"", \""GET\""))\n-                .addLogoutHandler((request, response, authentication) -> {\n-                    if (!request.getRequestURI().endsWith(\""doLogout\"")) {\n-                        UI ui = UI.getCurrent();\n-                        ui.accessSynchronously(() -> ui.getPage()\n-                                .setLocation(UrlUtil.getServletPathRelative(\n-                                        getLogoutSuccessUrl(), request)));\n-                    }\n-                }).logoutSuccessHandler(this::onLogoutOnNonVaadinUrl)\n+                .hasAnyRole(ROLE_ADMIN)\n+                .requestMatchers(\n+                        RequestUtil.antMatchers(\""/public/**\"", \""/error\""))\n                 .permitAll());\n+\n+        http.authorizeHttpRequests(auth -> auth\n+                .requestMatchers(new AntPathRequestMatcher(\""/switchUser\""))\n+                .hasAnyRole(\""ADMIN\"", \""PREVIOUS_ADMINISTRATOR\""));\n+        http.authorizeHttpRequests(auth -> auth\n+                .requestMatchers(new AntPathRequestMatcher(\""/impersonate/exit\""))\n+                .hasRole(\""PREVIOUS_ADMINISTRATOR\""));\n+        http.logout(cfg -> cfg.logoutRequestMatcher(new AntPathRequestMatcher(\n+                getRootUrl(false) + \""doLogout\"", \""GET\"")));\n+        http.with(vaadin(), cfg -> {\n+            cfg.loginView(LoginView.class)\n+                    .logoutSuccessHandler(this::onLogoutOnNonVaadinUrl)\n+                    .addLogoutHandler((request, response, authentication) -> {\n+                        if (!request.getRequestURI().endsWith(\""doLogout\"")) {\n+                            UI ui = UI.getCurrent();\n+                            ui.accessSynchronously(() -> ui.getPage()\n+                                    .setLocation(UrlUtil.getServletPathRelative(\n+                                            getLogoutSuccessUrl(), request)));\n+                        }\n+                    });\n+        });\n+        return http.build();\n     }\n \n     public void onLogoutOnNonVaadinUrl(HttpServletRequest request,\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityUtils.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityUtils.java\nindex f9b3e8622e0..014080d5ea1 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityUtils.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityUtils.java\n@@ -16,8 +16,6 @@ public class SecurityUtils {\n     @Autowired\n     private UserInfoService userInfoService;\n     @Autowired\n-    private SecurityConfig securityConfig;\n-    @Autowired\n     private AuthenticationContext authenticationContext;\n \n     public UserInfo getAuthenticatedUserInfo() {\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\nnew file mode 100644\nindex 00000000000..5fc6888517a\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\n@@ -0,0 +1,20 @@\n+package com.vaadin.flow.spring.flowsecurity;\n+\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+\n+import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+\n+@EnableWebSecurity\n+@Configuration\n+@Profile(\""legacy-vaadin-web-security\"")\n+public class LegacySecurityConfig extends VaadinWebSecurity {\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+        super.configure(http);\n+        setLoginView(http, LoginView.class);\n+    }\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\nindex 0a7b9724531..0972c985b98 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-webicons-urlmapping/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n@@ -1,18 +1,27 @@\n package com.vaadin.flow.spring.flowsecurity;\n \n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.web.SecurityFilterChain;\n \n-import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+import com.vaadin.flow.spring.security.VaadinAwareSecurityContextHolderStrategyConfiguration;\n+\n+import static com.vaadin.flow.spring.security.VaadinSecurityConfigurer.vaadin;\n \n @EnableWebSecurity\n @Configuration\n-public class SecurityConfig extends VaadinWebSecurity {\n+@Profile(\""default\"")\n+@Import(VaadinAwareSecurityContextHolderStrategyConfiguration.class)\n+public class SecurityConfig {\n \n-    @Override\n-    protected void configure(HttpSecurity http) throws Exception {\n-        super.configure(http);\n-        setLoginView(http, LoginView.class);\n+    @Bean\n+    SecurityFilterChain vaadinSecurityFilterChain(HttpSecurity http)\n+            throws Exception {\n+        http.with(vaadin(), cfg -> cfg.loginView(LoginView.class));\n+        return http.build();\n     }\n }\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\nnew file mode 100644\nindex 00000000000..5fc6888517a\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/LegacySecurityConfig.java\n@@ -0,0 +1,20 @@\n+package com.vaadin.flow.spring.flowsecurity;\n+\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+\n+import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+\n+@EnableWebSecurity\n+@Configuration\n+@Profile(\""legacy-vaadin-web-security\"")\n+public class LegacySecurityConfig extends VaadinWebSecurity {\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n+        super.configure(http);\n+        setLoginView(http, LoginView.class);\n+    }\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java b/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\nindex 0a7b9724531..484d9e074f6 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-webicons/src/main/java/com/vaadin/flow/spring/flowsecurity/SecurityConfig.java\n@@ -1,18 +1,28 @@\n package com.vaadin.flow.spring.flowsecurity;\n \n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Profile;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.web.SecurityFilterChain;\n \n-import com.vaadin.flow.spring.security.VaadinWebSecurity;\n+import com.vaadin.flow.spring.security.VaadinAwareSecurityContextHolderStrategyConfiguration;\n+import com.vaadin.flow.spring.security.VaadinSecurityConfigurer;\n+\n+import static com.vaadin.flow.spring.security.VaadinSecurityConfigurer.vaadin;\n \n @EnableWebSecurity\n @Configuration\n-public class SecurityConfig extends VaadinWebSecurity {\n+@Profile(\""default\"")\n+@Import(VaadinAwareSecurityContextHolderStrategyConfiguration.class)\n+public class SecurityConfig {\n \n-    @Override\n-    protected void configure(HttpSecurity http) throws Exception {\n-        super.configure(http);\n-        setLoginView(http, LoginView.class);\n+    @Bean\n+    SecurityFilterChain vaadinSecurityFilterChain(HttpSecurity http)\n+            throws Exception {\n+        http.with(vaadin(), cfg -> cfg.loginView(LoginView.class));\n+        return http.build();\n     }\n }\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringClassesSerializableTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringClassesSerializableTest.java\nindex 935e85a7100..cbf58ef7f71 100644\n--- a/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringClassesSerializableTest.java\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/SpringClassesSerializableTest.java\n@@ -105,6 +105,8 @@ protected Stream<String> getExcludedPatterns() {\n                 \""com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.NavigationAccessControlConfigurer\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinAwareSecurityContextHolderStrategy\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinAwareSecurityContextHolderStrategyConfiguration\"",\n+                \""com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinSecurityConfigurer\"",\n+                \""com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinSecurityConfigurer(\\\\$.*)?\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinWebSecurity\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinWebSecurity\\\\$Http401UnauthorizedAccessDeniedHandler\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.spring\\\\.security\\\\.VaadinDefaultRequestCache\"",\n\ndiff --git a/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java\nnew file mode 100644\nindex 00000000000..256e9784845\n--- /dev/null\n+++ b/vaadin-spring/src/test/java/com/vaadin/flow/spring/security/VaadinSecurityConfigurerTest.java\n@@ -0,0 +1,240 @@\n+package com.vaadin.flow.spring.security;\n+\n+import jakarta.servlet.FilterChain;\n+import jakarta.servlet.http.HttpServletRequest;\n+import jakarta.servlet.http.HttpServletResponse;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.security.authentication.AnonymousAuthenticationToken;\n+import org.springframework.security.authentication.TestingAuthenticationProvider;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.config.Customizer;\n+import org.springframework.security.config.ObjectPostProcessor;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer.AuthorizedUrl;\n+import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.LogoutConfigurer;\n+import org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.web.access.ExceptionTranslationFilter;\n+import org.springframework.security.web.access.intercept.AuthorizationFilter;\n+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n+import org.springframework.security.web.authentication.logout.LogoutFilter;\n+import org.springframework.security.web.authentication.logout.LogoutHandler;\n+import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\n+import org.springframework.security.web.csrf.CsrfFilter;\n+import org.springframework.security.web.savedrequest.RequestCacheAwareFilter;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.bean.override.mockito.MockitoBean;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.server.auth.NavigationAccessControl;\n+import com.vaadin.flow.spring.SpringBootAutoConfiguration;\n+import com.vaadin.flow.spring.SpringSecurityAutoConfiguration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@WebAppConfiguration\n+@ContextConfiguration(classes = { SpringBootAutoConfiguration.class,\n+        SpringSecurityAutoConfiguration.class,\n+        ObjectPostProcessorConfiguration.class })\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n+@ExtendWith(SpringExtension.class)\n+@ExtendWith(MockitoExtension.class)\n+class VaadinSecurityConfigurerTest {\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private ObjectPostProcessor<Object> postProcessor;\n+\n+    @MockitoBean\n+    private ClientRegistrationRepository clientRegistrationRepository;\n+\n+    @Mock\n+    private HttpServletRequest request;\n+\n+    @Mock\n+    private HttpServletResponse response;\n+\n+    @Mock\n+    private FilterChain chain;\n+\n+    private HttpSecurity http;\n+\n+    private VaadinSecurityConfigurer configurer;\n+\n+    @BeforeEach\n+    void setUp() {\n+        var authManagerBuilder = new AuthenticationManagerBuilder(postProcessor)\n+                .authenticationProvider(new TestingAuthenticationProvider());\n+        http = new HttpSecurity(postProcessor, authManagerBuilder,\n+                Map.of(ApplicationContext.class, applicationContext));\n+        configurer = VaadinSecurityConfigurer.vaadin();\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        SecurityContextHolder.clearContext();\n+    }\n+\n+    @Test\n+    void withDefaults_chainHasDefaultFilters() throws Exception {\n+        var filters = http.with(configurer, Customizer.withDefaults()).build()\n+                .getFilters();\n+\n+        assertThat(filters).hasOnlyElementsOfTypes(CsrfFilter.class,\n+                LogoutFilter.class, AuthorizationFilter.class,\n+                RequestCacheAwareFilter.class,\n+                ExceptionTranslationFilter.class);\n+    }\n+\n+    @Test\n+    void loginViewClass_chainHasAuthenticationFilter() throws Exception {\n+        var filters = http.with(configurer, c -> {\n+            c.loginView(TestLoginView.class);\n+        }).build().getFilters();\n+\n+        assertThat(filters).hasAtLeastOneElementOfType(\n+                UsernamePasswordAuthenticationFilter.class);\n+    }\n+\n+    @Test\n+    void loginViewString_chainHasAuthenticationFilter() throws Exception {\n+        var filters = http.with(configurer, c -> {\n+            c.loginView(\""/login\"");\n+        }).build().getFilters();\n+\n+        assertThat(filters).hasAtLeastOneElementOfType(\n+                UsernamePasswordAuthenticationFilter.class);\n+    }\n+\n+    @Test\n+    void oauth2LoginPage_chainHasAuthenticationFilter() throws Exception {\n+        var filters = http.with(configurer, c -> {\n+            c.oauth2LoginPage(\""/oauth2/login\"");\n+        }).build().getFilters();\n+\n+        assertThat(filters).hasAtLeastOneElementOfType(\n+                OAuth2LoginAuthenticationFilter.class);\n+    }\n+\n+    @Test\n+    void logoutSuccessHandler_handlerIsConfigured(\n+            @Mock LogoutSuccessHandler handler) throws Exception {\n+        var auth = new UsernamePasswordAuthenticationToken(\""user\"", \""password\"");\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+        when(request.getMethod()).thenReturn(\""POST\"");\n+        when(request.getPathInfo()).thenReturn(\""/logout\"");\n+\n+        var filters = http.with(configurer, c -> {\n+            c.logoutSuccessHandler(handler);\n+        }).build().getFilters();\n+\n+        assertThat(filters).filteredOn(LogoutFilter.class::isInstance)\n+                .singleElement().satisfies(filter -> {\n+                    filter.doFilter(request, response, chain);\n+                    verify(handler).onLogoutSuccess(request, response, auth);\n+                });\n+    }\n+\n+    @Test\n+    void addLogoutHandler_handlerIsAdded(@Mock LogoutHandler handler)\n+            throws Exception {\n+        var auth = new UsernamePasswordAuthenticationToken(\""user\"", \""password\"");\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+        when(request.getMethod()).thenReturn(\""POST\"");\n+        when(request.getPathInfo()).thenReturn(\""/logout\"");\n+\n+        var filters = http.with(configurer, c -> {\n+            c.addLogoutHandler(handler);\n+        }).build().getFilters();\n+\n+        assertThat(filters).filteredOn(LogoutFilter.class::isInstance)\n+                .singleElement().satisfies(filter -> {\n+                    filter.doFilter(request, response, chain);\n+                    verify(handler).logout(request, response, auth);\n+                });\n+    }\n+\n+    @Test\n+    void anyRequest_authorizeRuleIsConfigured() throws Exception {\n+        var auth = new AnonymousAuthenticationToken(\""key\"", \""user\"",\n+                List.of(new SimpleGrantedAuthority(\""ROLE_ANONYMOUS\"")));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+        when(request.getPathInfo()).thenReturn(\""/any\"");\n+\n+        var filters = http.with(configurer, c -> {\n+            c.anyRequest(AuthorizedUrl::anonymous);\n+        }).build().getFilters();\n+\n+        assertThat(filters).filteredOn(AuthorizationFilter.class::isInstance)\n+                .singleElement()\n+                .satisfies(filter -> assertThatCode(\n+                        () -> filter.doFilter(request, response, chain))\n+                        .doesNotThrowAnyException());\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void enableNavigationAccessControl_navigationAccessControlIsConfigured(\n+            boolean enableNavigationAccessControl) throws Exception {\n+        http.with(configurer, c -> {\n+            c.enableNavigationAccessControl(enableNavigationAccessControl);\n+        }).build();\n+\n+        var nac = http.getSharedObject(NavigationAccessControl.class);\n+        assertThat(nac.isEnabled()).isEqualTo(enableNavigationAccessControl);\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\""unchecked\"")\n+    void disableDefaultConfigurers_configurersAreNotApplied() throws Exception {\n+        http.with(configurer, c -> {\n+            c.enableCsrfConfiguration(false);\n+            c.enableLogoutConfiguration(false);\n+            c.enableRequestCacheConfiguration(false);\n+            c.enableExceptionHandlingConfiguration(false);\n+            c.enableAuthorizedRequestsConfiguration(false);\n+        }).build();\n+\n+        assertThat(http.getConfigurer(CsrfConfigurer.class)).isNull();\n+        assertThat(http.getConfigurer(LogoutConfigurer.class)).isNull();\n+        assertThat(http.getConfigurer(RequestCacheConfigurer.class)).isNull();\n+        assertThat(http.getConfigurer(ExceptionHandlingConfigurer.class))\n+                .isNull();\n+        assertThat(http.getConfigurer(AuthorizeHttpRequestsConfigurer.class))\n+                .isNull();\n+    }\n+\n+    @Route\n+    static class TestLoginView extends Component {\n+    }\n+}\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21338"", ""pr_id"": 21338, ""issue_id"": 21255, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Add DownloadHandler to components API\nAdd `DownloadHandler` callback to the constructors and separate methods of the components:\n- [x] `Anchor` \n- [x] `Image`, \n- [x] `IFrame`\n- [x] `Avatar`\n- [x] `Icon`\n"", ""issue_word_count"": 27, ""test_files_count"": 3, ""non_test_files_count"": 4, ""pr_changed_files"": [""flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java"", ""flow-html-components/src/main/java/com/vaadin/flow/component/html/HtmlObject.java"", ""flow-html-components/src/main/java/com/vaadin/flow/component/html/IFrame.java"", ""flow-html-components/src/main/java/com/vaadin/flow/component/html/Image.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlObjectTest.java""], ""pr_changed_test_files"": [""flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java"", ""flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlObjectTest.java""], ""base_commit"": ""ce57f79c798d44520740b4bec0ed254d70914699"", ""head_commit"": ""7d4e8c58394dcac8e49bdb9c1d744b96d283fd57"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21338"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21338"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-28T07:07:16.000Z"", ""patch"": ""diff --git a/flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java b/flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java\nindex 1935bf50547..63f76ec606a 100644\n--- a/flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java\n+++ b/flow-html-components/src/main/java/com/vaadin/flow/component/html/Anchor.java\n@@ -27,6 +27,8 @@\n import com.vaadin.flow.component.PropertyDescriptors;\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.DownloadHandler;\n+import com.vaadin.flow.server.ElementRequestHandler;\n import com.vaadin.flow.server.StreamResource;\n import com.vaadin.flow.server.StreamResourceRegistry;\n \n@@ -110,6 +112,24 @@ public Anchor(AbstractStreamResource href, String text) {\n         setText(text);\n     }\n \n+    /**\n+     * Creates an anchor component with the given text content and a callback\n+     * that handles data download from the server to the client when clicking an\n+     * anchor.\n+     *\n+     * @see #setHref(DownloadHandler)\n+     * @see #setText(String)\n+     *\n+     * @param downloadHandler\n+     *            the callback that handles data download, not null\n+     * @param text\n+     *            the text content to set\n+     */\n+    public Anchor(DownloadHandler downloadHandler, String text) {\n+        setHref(downloadHandler);\n+        setText(text);\n+    }\n+\n     /**\n      * Creates an anchor component with the given href and components as\n      * children of this component.\n@@ -174,6 +194,21 @@ public void setHref(AbstractStreamResource href) {\n         assignHrefAttribute();\n     }\n \n+    /**\n+     * Sets the URL that this anchor links to and that is bound to a given\n+     * {@link DownloadHandler} callback on the server for handling data download\n+     * from the server to the client when clicking an anchor.\n+     *\n+     * @param downloadHandler\n+     *            the callback that handles data download, not null\n+     */\n+    public void setHref(DownloadHandler downloadHandler) {\n+        this.href = new StreamResourceRegistry.ElementStreamResource(\n+                downloadHandler, this.getElement());\n+        setRouterIgnore(true);\n+        assignHrefAttribute();\n+    }\n+\n     /**\n      * The routing mechanism in Vaadin by default intercepts all anchor elements\n      * with relative URL. This method can be used make the router ignore this\n\ndiff --git a/flow-html-components/src/main/java/com/vaadin/flow/component/html/HtmlObject.java b/flow-html-components/src/main/java/com/vaadin/flow/component/html/HtmlObject.java\nindex 5b280bbb61b..469fa968a4f 100644\n--- a/flow-html-components/src/main/java/com/vaadin/flow/component/html/HtmlObject.java\n+++ b/flow-html-components/src/main/java/com/vaadin/flow/component/html/HtmlObject.java\n@@ -26,7 +26,9 @@\n import com.vaadin.flow.component.PropertyDescriptors;\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.DownloadHandler;\n import com.vaadin.flow.server.StreamResource;\n+import com.vaadin.flow.server.StreamResourceRegistry;\n \n /**\n  * Component representing a <code>&lt;object&gt;</code> element.\n@@ -131,6 +133,47 @@ public HtmlObject(AbstractStreamResource data, String type,\n         add(params);\n     }\n \n+    /**\n+     * Creates a new <code>&lt;object&gt;</code> component with given\n+     * {@link DownloadHandler} callback for providing an object data and type\n+     * value.\n+     *\n+     * @see #setData(AbstractStreamResource)\n+     * @see #setType(String)\n+     *\n+     * @param data\n+     *            the callback for providing resource data, not null\n+     * @param type\n+     *            a type attribute value\n+     */\n+    public HtmlObject(DownloadHandler data, String type) {\n+        setData(data);\n+        setType(type);\n+    }\n+\n+    /**\n+     * Creates a new <code>&lt;object&gt;</code> component with given data\n+     * resource, type value and \""param\"" components.\n+     *\n+     * @see #setData(String)\n+     * @see #setType(String)\n+     * @see #add(Component...)\n+     *\n+     *\n+     * @param data\n+     *            a data attribute value\n+     * @param type\n+     *            a type attribute value\n+     * @param params\n+     *            parameter components\n+     */\n+    public HtmlObject(DownloadHandler data, String type, Param... params) {\n+        setData(new StreamResourceRegistry.ElementStreamResource(data,\n+                this.getElement()));\n+        setType(type);\n+        add(params);\n+    }\n+\n     /**\n      * Creates a new <code>&lt;object&gt;</code> component with given data and\n      * \""param\"" components.\n@@ -199,6 +242,19 @@ public void setData(AbstractStreamResource data) {\n         getElement().setAttribute(\""data\"", data);\n     }\n \n+    /**\n+     * Sets the URL for {@link DownloadHandler} callback as \""data\"" attribute\n+     * value .\n+     *\n+     * @param data\n+     *            a \""data\"" attribute value,, not {@code null}\n+     */\n+    public void setData(DownloadHandler data) {\n+        getElement().setAttribute(\""data\"",\n+                new StreamResourceRegistry.ElementStreamResource(data,\n+                        this.getElement()));\n+    }\n+\n     /**\n      * Gets the \""data\"" attribute value.\n      *\n\ndiff --git a/flow-html-components/src/main/java/com/vaadin/flow/component/html/IFrame.java b/flow-html-components/src/main/java/com/vaadin/flow/component/html/IFrame.java\nindex 2d376b24ef6..84074c217d9 100644\n--- a/flow-html-components/src/main/java/com/vaadin/flow/component/html/IFrame.java\n+++ b/flow-html-components/src/main/java/com/vaadin/flow/component/html/IFrame.java\n@@ -21,7 +21,9 @@\n import com.vaadin.flow.component.PropertyDescriptors;\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.DownloadHandler;\n import com.vaadin.flow.server.StreamResource;\n+import com.vaadin.flow.server.StreamResourceRegistry;\n \n import java.util.Optional;\n import java.util.stream.Collectors;\n@@ -134,6 +136,18 @@ public IFrame(String src) {\n         setSrc(src);\n     }\n \n+    /**\n+     * Creates a new iframe with download handler callback that provides a\n+     * resource from server.\n+     *\n+     * @param downloadHandler\n+     *            the download handler callback that provides a resource from\n+     *            server, not null\n+     */\n+    public IFrame(DownloadHandler downloadHandler) {\n+        setSrc(downloadHandler);\n+    }\n+\n     /**\n      * Sets the source of the iframe. If the contents at the src of the IFrame\n      * has changed and you want to refresh it in the user's browser, the src\n@@ -159,6 +173,21 @@ public void setSrc(AbstractStreamResource src) {\n         getElement().setAttribute(\""src\"", src);\n     }\n \n+    /**\n+     * Sets the source of the iframe with a source URL with the URL of the given\n+     * {@link DownloadHandler} callback.\n+     *\n+     * @see #setSrc(String)\n+     *\n+     * @param downloadHandler\n+     *            the download handler resource, not null\n+     */\n+    public void setSrc(DownloadHandler downloadHandler) {\n+        getElement().setAttribute(\""src\"",\n+                new StreamResourceRegistry.ElementStreamResource(\n+                        downloadHandler, this.getElement()));\n+    }\n+\n     /**\n      * Gets the source of the iframe.\n      *\n\ndiff --git a/flow-html-components/src/main/java/com/vaadin/flow/component/html/Image.java b/flow-html-components/src/main/java/com/vaadin/flow/component/html/Image.java\nindex f7d30536995..99eadd4df3b 100644\n--- a/flow-html-components/src/main/java/com/vaadin/flow/component/html/Image.java\n+++ b/flow-html-components/src/main/java/com/vaadin/flow/component/html/Image.java\n@@ -24,7 +24,9 @@\n import com.vaadin.flow.component.PropertyDescriptors;\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.DownloadHandler;\n import com.vaadin.flow.server.StreamResource;\n+import com.vaadin.flow.server.StreamResourceRegistry;\n \n /**\n  * Component representing a <code>&lt;img&gt;</code> element.\n@@ -85,6 +87,27 @@ public Image(AbstractStreamResource src, String alt) {\n         setAlt(alt);\n     }\n \n+    /**\n+     * Creates an image with the given download handler callback for providing\n+     * an image data and an alternative text.\n+     * <p>\n+     * The alternative text given to constructor is always set even if it is the\n+     * default empty string which is not retained with {@link #setAlt(String)}.\n+     *\n+     * @param downloadHandler\n+     *            the download handler callback that provides an image data, not\n+     *            null\n+     * @param alt\n+     *            the alternate text\n+     *\n+     * @see #setSrc(AbstractStreamResource)\n+     * @see #setAlt(String)\n+     */\n+    public Image(DownloadHandler downloadHandler, String alt) {\n+        setSrc(downloadHandler);\n+        setAlt(alt);\n+    }\n+\n     /**\n      * Gets the image URL.\n      *\n@@ -114,6 +137,19 @@ public void setSrc(AbstractStreamResource src) {\n         getElement().setAttribute(\""src\"", src);\n     }\n \n+    /**\n+     * Sets the image URL with the URL of the given {@link DownloadHandler}\n+     * callback.\n+     *\n+     * @param downloadHandler\n+     *            the download handler resource, not null\n+     */\n+    public void setSrc(DownloadHandler downloadHandler) {\n+        getElement().setAttribute(\""src\"",\n+                new StreamResourceRegistry.ElementStreamResource(\n+                        downloadHandler, this.getElement()));\n+    }\n+\n     /**\n      * Sets the alternate text for the image.\n      *\n"", ""test_patch"": ""diff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\nindex ba229c7204a..250019e434f 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/AnchorTest.java\n@@ -24,6 +24,7 @@\n import com.vaadin.flow.component.Text;\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.DownloadHandler;\n \n public class AnchorTest extends ComponentTest {\n \n@@ -270,6 +271,45 @@ public String getName() {\n         Assert.assertNotEquals(href, anchor.getHref());\n     }\n \n+    @Test\n+    public void disabledAnchor_setDownload_hrefIsRemoved_enableAnchor_hrefIsRestored() {\n+        mockUI();\n+        DownloadHandler downloadHandler = event -> event.getWriter()\n+                .write(\""foo\"");\n+        Anchor anchor = new Anchor(downloadHandler, \""bar\"");\n+        String href = anchor.getHref();\n+        anchor.setEnabled(false);\n+\n+        Assert.assertFalse(anchor.getElement().hasAttribute(\""href\""));\n+        Assert.assertEquals(href, anchor.getHref());\n+\n+        anchor.setEnabled(true);\n+        Assert.assertEquals(href, anchor.getHref());\n+    }\n+\n+    @Test\n+    public void disabledAnchor_setDownloadWhenDisabled_hrefIsPreserved() {\n+        mockUI();\n+        DownloadHandler downloadHandler = event -> event.getWriter()\n+                .write(\""foo\"");\n+        Anchor anchor = new Anchor(downloadHandler, \""bar\"");\n+        String href = anchor.getHref();\n+        anchor.setEnabled(false);\n+\n+        anchor.setHref(new AbstractStreamResource() {\n+\n+            @Override\n+            public String getName() {\n+                return \""baz\"";\n+            }\n+        });\n+\n+        anchor.setEnabled(true);\n+\n+        Assert.assertTrue(anchor.getElement().hasAttribute(\""href\""));\n+        Assert.assertNotEquals(href, anchor.getHref());\n+    }\n+\n     private void mockUI() {\n         ui = new UI();\n         UI.setCurrent(ui);\n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\nindex 7e0aed1f72c..32994479f67 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlComponentSmokeTest.java\n@@ -49,6 +49,7 @@\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.change.NodeChange;\n import com.vaadin.flow.server.AbstractStreamResource;\n+import com.vaadin.flow.server.DownloadHandler;\n \n public class HtmlComponentSmokeTest {\n \n@@ -248,6 +249,29 @@ private static boolean isSpecialSetter(Method method) {\n             return true;\n         }\n \n+        if (method.getDeclaringClass() == IFrame.class\n+                && method.getName().startsWith(\""setSrc\"")) {\n+            return true;\n+        }\n+\n+        if (method.getDeclaringClass() == HtmlObject.class\n+                && method.getName().startsWith(\""setData\"")\n+                && method.getParameterTypes()[0] == DownloadHandler.class) {\n+            return true;\n+        }\n+\n+        if (method.getDeclaringClass() == Anchor.class\n+                && method.getName().startsWith(\""setHref\"")\n+                && method.getParameterTypes()[0] == DownloadHandler.class) {\n+            return true;\n+        }\n+\n+        if (method.getDeclaringClass() == Image.class\n+                && method.getName().startsWith(\""setSrc\"")\n+                && method.getParameterTypes()[0] == DownloadHandler.class) {\n+            return true;\n+        }\n+\n         return false;\n     }\n \n\ndiff --git a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlObjectTest.java b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlObjectTest.java\nindex bf55e312910..c5c4365ffb7 100644\n--- a/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlObjectTest.java\n+++ b/flow-html-components/src/test/java/com/vaadin/flow/component/html/HtmlObjectTest.java\n@@ -15,6 +15,7 @@\n  */\n package com.vaadin.flow.component.html;\n \n+import java.io.IOException;\n import java.net.URI;\n \n import org.junit.After;\n@@ -76,4 +77,29 @@ public void setData_dataAsAResourceinCTOR() {\n         Assert.assertEquals(uri.toASCIIString(),\n                 object.getElement().getAttribute(\""data\""));\n     }\n+\n+    @Test\n+    public void setDownloadHandlerData_dataAsAResource() {\n+        UI ui = new UI();\n+        UI.setCurrent(ui);\n+        HtmlObject object = new HtmlObject();\n+        object.setData(event -> event.getWriter().write(\""foo\""));\n+\n+        Assert.assertTrue(\""Data should be set as dynamic resource.\"",\n+                object.getElement().getAttribute(\""data\"")\n+                        .startsWith(\""VAADIN/dynamic/resource/-1/\""));\n+    }\n+\n+    @Test\n+    public void setDownloadHandlerData_dataAsAResourceinCTOR() {\n+        UI ui = new UI();\n+        UI.setCurrent(ui);\n+\n+        HtmlObject object = new HtmlObject(\n+                event -> event.getWriter().write(\""foo\""), \""foo\"");\n+\n+        Assert.assertTrue(\""Data should be set as dynamic resource.\"",\n+                object.getElement().getAttribute(\""data\"")\n+                        .startsWith(\""VAADIN/dynamic/resource/-1/\""));\n+    }\n }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21216"", ""pr_id"": 21216, ""issue_id"": 21188, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Lingering progress indicator after slow request\n### Description of the bug\n\nAfter a long-running request (threshold seems to be somewhere between 5 and 6 seconds), there will be an extra request progress indicator at the top of the application for a couple of seconds in association with a _subsequent_ request, even though that request completes almost immediately.\n\nThis seems like a regression in Vaadin 24.7 since I couldn't reproduce with Vaadin 24.6.7. This might be related to the additional retry of the original request that is sent after around 5.5 seconds if there hasn't yet been any response to that request.\n\nhttps://github.com/user-attachments/assets/fc06f960-360c-4ee4-8735-827854120d29\n\n\n### Expected behavior\n\nExpected there to be no additional request progress indicator.\n\nThe additional retry request also seems redundant in a case like this. On the other hand, I realize that it might be necessary to be able to recover from cases where a request for some reason fails without getting any direct error from the browser. Though I guess such requests will anyways lead to an error once the browser's timeout is triggered so I'm not sure if we need this at all since I assume the most common case is that requests fail in a way that the browser immediately triggers an error.\n\n### Minimal reproducible example\n\n1. Get an app with a Hello World view for Flow from start.vaadin.com\n2. Change the click listener to sleep for 6 seconds.\n3. Run application, click the button\n4. Observe that there's an expected progress indicator due to the slow request\n5. Observe that there's an additional copy of the request sent after around 5.5 seconds.\n6. Observe that the notification shows up once the initial request is handled.\n7. Wait until the notification disappears and observe that the progress indicator is shown for a around 4 seconds even though the request telling the server that the notification was closed is completed in around 10ms.\n\n### Versions\n\n- Vaadin / Flow version: Vaadin 24.7.0\n- Java version: 17\n- OS version: macOS 15\n- Browser version: Tested in latest versions of Chrome, Firefox and Safari\n"", ""issue_word_count"": 364, ""test_files_count"": 3, ""non_test_files_count"": 4, ""pr_changed_files"": [""flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java"", ""flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java"", ""flow-client/src/main/java/com/vaadin/client/communication/ReconnectionAttemptEvent.java"", ""flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java"", ""flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/SlowResponseView.java"", ""flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/SlowResponseIT.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java""], ""pr_changed_test_files"": [""flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/SlowResponseView.java"", ""flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/SlowResponseIT.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java""], ""base_commit"": ""0ea9cf24ef543f28dc7f965e57d93975883915d9"", ""head_commit"": ""a700e1b470672b1adba7e5e8ed8b722672f10aeb"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21216"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21216"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-04T05:37:12.000Z"", ""patch"": ""diff --git a/flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java b/flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java\nindex 89360db8c1a..6c1d9fb1c99 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/DefaultConnectionStateHandler.java\n@@ -22,8 +22,8 @@\n import com.google.gwt.user.client.Timer;\n import com.google.gwt.xhr.client.XMLHttpRequest;\n \n-import com.vaadin.client.Console;\n import com.vaadin.client.ConnectionIndicator;\n+import com.vaadin.client.Console;\n import com.vaadin.client.Registry;\n import com.vaadin.client.UILifecycle;\n import com.vaadin.client.UILifecycle.UIState;\n@@ -228,12 +228,18 @@ protected void scheduleReconnect(final JsonObject payload) {\n         // do not need to start a new one\n         if (reconnectAttempt == 1) {\n             // Try once immediately\n+            Console.debug(\""Immediate reconnect attempt for \"" + payload);\n             doReconnect(payload);\n         } else {\n             scheduledReconnect = new Timer() {\n                 @Override\n                 public void run() {\n+                    if (scheduledReconnect != null) {\n+                        scheduledReconnect.cancel();\n+                    }\n                     scheduledReconnect = null;\n+                    Console.debug(\""Scheduled reconnect attempt \""\n+                            + reconnectAttempt + \"" for \"" + payload);\n                     doReconnect(payload);\n                 }\n             };\n@@ -259,11 +265,13 @@ protected void doReconnect(JsonObject payload) {\n             return;\n         }\n         if (payload != null) {\n-            Console.debug(\""Re-sending last message to the server...\"");\n-            registry.getMessageSender().send(payload);\n+            Console.debug(\""Trying to re-establish server connection (UIDL)...\"");\n+            registry.getRequestResponseTracker()\n+                    .fireEvent(new ReconnectionAttemptEvent(reconnectAttempt));\n         } else {\n             // Use heartbeat\n-            Console.debug(\""Trying to re-establish server connection...\"");\n+            Console.debug(\n+                    \""Trying to re-establish server connection (heartbeat)...\"");\n             registry.getHeartbeat().send();\n         }\n     }\n@@ -448,6 +456,10 @@ private void resolveTemporaryError(Type type) {\n \n         reconnectionCause = null;\n         reconnectAttempt = 0;\n+        if (scheduledReconnect != null) {\n+            scheduledReconnect.cancel();\n+            scheduledReconnect = null;\n+        }\n         ConnectionIndicator.setState(ConnectionIndicator.CONNECTED);\n \n         Console.debug(\""Re-established connection to server\"");\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java b/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\nindex c5664cdea05..e2376e8cfd0 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\n@@ -20,6 +20,7 @@\n \n import com.google.gwt.core.client.GWT;\n import com.google.gwt.user.client.Timer;\n+\n import com.vaadin.client.ConnectionIndicator;\n import com.vaadin.client.Console;\n import com.vaadin.client.Registry;\n@@ -83,6 +84,17 @@ public enum ResynchronizationState {\n     public MessageSender(Registry registry) {\n         this.registry = registry;\n         this.pushConnectionFactory = GWT.create(PushConnectionFactory.class);\n+        this.registry.getRequestResponseTracker()\n+                .addReconnectionAttemptHandler(ev -> {\n+                    Console.debug(\n+                            \""Re-sending queued messages to the server (attempt \""\n+                                    + ev.getAttempt() + \"") ...\"");\n+                    // Try to reconnect by sending queued messages.\n+                    // Stops the resend timer, since it will anyway not make any\n+                    // request during reconnection process.\n+                    resetTimer();\n+                    doSendInvocationsToServer();\n+                });\n     }\n \n     /**\n@@ -128,7 +140,12 @@ private void doSendInvocationsToServer() {\n             registry.getRequestResponseTracker().startRequest();\n             sendPayload(payload);\n             return;\n-        } else if (hasQueuedMessages() && resendMessageTimer == null) {\n+        } else if (hasQueuedMessages()) {\n+            Console.debug(\""Sending queued messages to server\"");\n+            if (resendMessageTimer != null) {\n+                // Stopping resend timer and re-send immediately\n+                resetTimer();\n+            }\n             sendPayload(messageQueue.get(0));\n             return;\n         }\n@@ -212,6 +229,12 @@ public void send(final JsonObject payload) {\n             // been already sent and enqueued.\n             if (!payload.hasKey(ApplicationConstants.SERVER_SYNC_ID)) {\n                 messageQueue.add(payload);\n+                Console.debug(\n+                        \""Message not sent because other messages are pending. Added to the queue: \""\n+                                + payload.toJson());\n+            } else {\n+                Console.debug(\""Message not sent because already queued: \""\n+                        + payload.toJson());\n             }\n             return;\n         }\n@@ -255,7 +278,6 @@ private void sendPayload(final JsonObject payload) {\n         } else {\n             Console.debug(\""send XHR\"");\n             registry.getXhrConnection().send(payload);\n-\n             resetTimer();\n             // resend last payload if response hasn't come in.\n             resendMessageTimer = new Timer() {\n@@ -264,11 +286,16 @@ public void run() {\n                     resendMessageTimer\n                             .schedule(registry.getApplicationConfiguration()\n                                     .getMaxMessageSuspendTimeout() + 500);\n+                    // Avoid re-sending the message if a request is still in\n+                    // progress.\n+                    // If the response to the message has not yet been processed\n+                    // the reconnection attempt listener takes care of resending\n+                    // the queued message.\n                     if (!registry.getRequestResponseTracker()\n                             .hasActiveRequest()) {\n                         registry.getRequestResponseTracker().startRequest();\n+                        registry.getXhrConnection().send(payload);\n                     }\n-                    registry.getXhrConnection().send(payload);\n                 }\n             };\n             resendMessageTimer.schedule(registry.getApplicationConfiguration()\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/communication/ReconnectionAttemptEvent.java b/flow-client/src/main/java/com/vaadin/client/communication/ReconnectionAttemptEvent.java\nnew file mode 100644\nindex 00000000000..8a62eec5ffc\n--- /dev/null\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/ReconnectionAttemptEvent.java\n@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.client.communication;\n+\n+import com.google.web.bindery.event.shared.Event;\n+\n+import com.google.gwt.event.shared.EventHandler;\n+\n+/**\n+ * Event fired when a reconnection attempt is requested.\n+ *\n+ * @author Vaadin Ltd\n+ * @since 24.7\n+ */\n+public class ReconnectionAttemptEvent\n+        extends Event<ReconnectionAttemptEvent.Handler> {\n+\n+    /**\n+     * Handler for {@link ReconnectionAttemptEvent}s.\n+     */\n+    @FunctionalInterface\n+    public interface Handler extends EventHandler {\n+        /**\n+         * Called when handling of a reconnection attempt starts.\n+         *\n+         * @param event\n+         *            the event object\n+         */\n+        void onReconnectionAttempt(ReconnectionAttemptEvent event);\n+    }\n+\n+    private static Type<Handler> type = null;\n+\n+    private final int attempt;\n+\n+    /**\n+     * Creates an event object.\n+     */\n+    public ReconnectionAttemptEvent(int attempt) {\n+        this.attempt = attempt;\n+    }\n+\n+    /**\n+     * Gets the number of the current reconnection attempt.\n+     *\n+     * @return the number of the current reconnection attempt.\n+     */\n+    public int getAttempt() {\n+        return attempt;\n+    }\n+\n+    /**\n+     * Gets the type of the event after ensuring the type has been created.\n+     *\n+     * @return the type for the event\n+     */\n+    public static Type<Handler> getType() {\n+        if (type == null) {\n+            type = new Type<>();\n+        }\n+        return type;\n+    }\n+\n+    @Override\n+    public Type<Handler> getAssociatedType() {\n+        return type;\n+    }\n+\n+    @Override\n+    protected void dispatch(Handler handler) {\n+        handler.onReconnectionAttempt(this);\n+    }\n+\n+}\n\ndiff --git a/flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java b/flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java\nindex 4ee908dc204..a8918fcf50e 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/RequestResponseTracker.java\n@@ -15,14 +15,15 @@\n  */\n package com.vaadin.client.communication;\n \n-import com.google.gwt.core.client.Scheduler;\n import com.google.web.bindery.event.shared.Event;\n import com.google.web.bindery.event.shared.EventBus;\n import com.google.web.bindery.event.shared.HandlerRegistration;\n \n-import com.vaadin.client.communication.MessageSender.ResynchronizationState;\n+import com.google.gwt.core.client.Scheduler;\n+\n import com.vaadin.client.ConnectionIndicator;\n import com.vaadin.client.Registry;\n+import com.vaadin.client.communication.MessageSender.ResynchronizationState;\n import com.vaadin.client.gwt.com.google.web.bindery.event.shared.SimpleEventBus;\n \n /**\n@@ -174,4 +175,16 @@ public HandlerRegistration addResponseHandlingEndedHandler(\n                 handler);\n     }\n \n+    /**\n+     * Adds a handler for {@link ReconnectionAttemptEvent}s.\n+     *\n+     * @param handler\n+     *            the handler to add\n+     * @return a registration object which can be used to remove the handler\n+     */\n+    public HandlerRegistration addReconnectionAttemptHandler(\n+            ReconnectionAttemptEvent.Handler handler) {\n+        return eventBus.addHandler(ReconnectionAttemptEvent.getType(), handler);\n+    }\n+\n }\n"", ""test_patch"": ""diff --git a/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/SlowResponseView.java b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/SlowResponseView.java\nnew file mode 100644\nindex 00000000000..843646b25df\n--- /dev/null\n+++ b/flow-tests/test-client-queue/src/main/java/com/vaadin/flow/misc/ui/SlowResponseView.java\n@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.misc.ui;\n+\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.html.Span;\n+import com.vaadin.flow.router.Route;\n+\n+@Route(\""slow-response\"")\n+public class SlowResponseView extends Div {\n+\n+    public static final String SLOW_ADD = \""slowAdd\"";\n+    public static final String ADD = \""add\"";\n+    public static final String ADDED_PREDICATE = \""added_\"";\n+\n+    private int elements = 0;\n+\n+    public SlowResponseView() {\n+        int messageTimeoutMillis = UI.getCurrent().getSession().getService()\n+                .getDeploymentConfiguration().getMaxMessageSuspendTimeout();\n+        add(new Span(\""Max message suspend timeout: \"" + messageTimeoutMillis));\n+        NativeButton slowAddElement = new NativeButton(\n+                \""Add element (slow response)\"", event -> {\n+                    slowAddElement(messageTimeoutMillis + 1000);\n+                });\n+        slowAddElement.setId(SLOW_ADD);\n+\n+        NativeButton addElement = new NativeButton(\""Add element\"", event -> {\n+            addElement();\n+        });\n+        addElement.setId(ADD);\n+\n+        add(slowAddElement, addElement);\n+    }\n+\n+    private void addElement() {\n+        Div addedElement = new Div(\""Added element\"");\n+        addedElement.setId(ADDED_PREDICATE + elements++);\n+        add(addedElement);\n+    }\n+\n+    private void slowAddElement(long delayMillis) {\n+        try {\n+            Thread.sleep(delayMillis);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new RuntimeException(e);\n+        }\n+        addElement();\n+    }\n+}\n\ndiff --git a/flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/SlowResponseIT.java b/flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/SlowResponseIT.java\nnew file mode 100644\nindex 00000000000..8b4672d6bdb\n--- /dev/null\n+++ b/flow-tests/test-client-queue/src/test/java/com/vaadin/flow/misc/ui/SlowResponseIT.java\n@@ -0,0 +1,111 @@\n+package com.vaadin.flow.misc.ui;\n+\n+import java.util.function.Predicate;\n+import java.util.logging.Level;\n+import java.util.regex.Pattern;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.TimeoutException;\n+\n+import com.vaadin.flow.component.html.testbench.DivElement;\n+import com.vaadin.flow.component.html.testbench.NativeButtonElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+import static com.vaadin.flow.misc.ui.SlowResponseView.ADD;\n+import static com.vaadin.flow.misc.ui.SlowResponseView.ADDED_PREDICATE;\n+import static com.vaadin.flow.misc.ui.SlowResponseView.SLOW_ADD;\n+\n+public class SlowResponseIT extends ChromeBrowserTest {\n+\n+    private static final Predicate<String> DUPLICATE_RESPONSE_LOG_MESSAGE_PREDICATE = Pattern\n+            .compile(\n+                    \"".*Received message with server id \\\\d but have already seen \\\\d. Ignoring it.*\"")\n+            .asMatchPredicate();\n+\n+    @Override\n+    protected String getTestPath() {\n+        return \""/slow-response\"";\n+    }\n+\n+    @Test\n+    public void slowResponseForRequest_clientDontResendsRequest_serverAnswersCorrectly() {\n+        open();\n+\n+        try {\n+            waitUntil(driver -> $(NativeButtonElement.class).withId(SLOW_ADD)\n+                    .exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\""Expected 'slow add element' button wasn't found\"");\n+        }\n+        // Add element normally\n+        $(NativeButtonElement.class).id(ADD).click();\n+        Assert.assertTrue(\n+                $(DivElement.class).id(ADDED_PREDICATE + 0).isDisplayed());\n+\n+        // Request null response for next add\n+        $(NativeButtonElement.class).id(SLOW_ADD).click();\n+\n+        $(NativeButtonElement.class).id(ADD).click();\n+\n+        try {\n+            waitUntil(driver -> $(DivElement.class).withId(ADDED_PREDICATE + 1)\n+                    .exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\n+                    \""New element was not added though client should re-send request.\"");\n+        }\n+\n+        Assert.assertTrue(\n+                \""Slow response click message sent multiple times and got duplicate response\"",\n+                getLogEntries(Level.WARNING).stream().noneMatch(\n+                        logEntry -> DUPLICATE_RESPONSE_LOG_MESSAGE_PREDICATE\n+                                .test(logEntry.getMessage())));\n+    }\n+\n+    @Test\n+    public void clickWhileRequestPending_clientQueuesRequests_messagesSentCorrectly() {\n+        open();\n+\n+        try {\n+            waitUntil(driver -> $(NativeButtonElement.class).withId(SLOW_ADD)\n+                    .exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\""Expected 'slow add element' button wasn't found\"");\n+        }\n+\n+        // Add element normally\n+        $(NativeButtonElement.class).id(ADD).click();\n+        Assert.assertTrue(\n+                $(DivElement.class).id(ADDED_PREDICATE + 0).isDisplayed());\n+\n+        // Request null response for next add\n+        $(NativeButtonElement.class).id(SLOW_ADD).click();\n+\n+        $(NativeButtonElement.class).id(ADD).click();\n+        $(NativeButtonElement.class).id(ADD).click();\n+\n+        try {\n+            waitUntil(driver -> $(DivElement.class).withId(ADDED_PREDICATE + 1)\n+                    .exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\n+                    \""New element was not added though client should re-send request.\"");\n+        }\n+\n+        try {\n+            waitUntil(driver -> $(DivElement.class).withId(ADDED_PREDICATE + 2)\n+                    .exists());\n+        } catch (TimeoutException te) {\n+            Assert.fail(\n+                    \""Second new element was not added though client should queue request.\"");\n+        }\n+\n+        Assert.assertTrue(\n+                \""Slow response click message sent multiple times and got duplicate response\"",\n+                getLogEntries(Level.WARNING).stream().noneMatch(\n+                        logEntry -> DUPLICATE_RESPONSE_LOG_MESSAGE_PREDICATE\n+                                .test(logEntry.getMessage())));\n+\n+    }\n+}\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java\nindex 3a5583aea70..6ff9a9ff1c8 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java\n@@ -129,7 +129,7 @@ public void networkInterruption_dropProxyBeforeResponse_serverMessageCachedAndRe\n     }\n \n     private void waitForReconnectAttempts() {\n-        waitForLogMessage(\""Reconnect attempt 2 for XHR\"");\n+        waitForLogMessage(\""Reconnect attempt 4 for XHR\"");\n     }\n \n     private void ensureNoSystemErrorFromServer() {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21189"", ""pr_id"": 21189, ""issue_id"": 21139, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Allow PreserveOnRefresh when there's only a partial match to the preserved route chain\n### Description of the bug\n\nI have an app with a `MainLayout` annotated with `@PreserveAndRefresh` and two views, both annotated with `@Route @RouteScope @RouteScopeOwner(MainLayout.class) @SpringComponent`. I'm hoping to achieve browser-tab-scoped routes. All works okay when I navigate around the app via clicking on router links; also browser refresh is handled correctly.\n\nHowever, when I type in the URL manually into browser's address bar, the `MainLayout` suddenly gets re-created, which then breaks the tab scope and causes new instances of all routes to be created.\n\nThis behavior is really strange since the `window.name` isn't changed (in Firefox). Note that the choice of the browser is extremely important - Safari, when you enter URL manually, changes the `window.name`, and in such case it's understandable to have new instances of `MainLayout` and the routes. However, the same issue is reproducible with Firefox as well, which doesn't change the `window.name`.\n\nThis issue can be reproduced as follows:\n1. Click a link on browser's bookmark toolbar.\n2. TestBench: call `getDriver().get(\""url\"")`.\n\nThe TestBench case is the most problematic in particular: if your app depends on tab scope to work properly, this bug prevents the app to be tested via `getDriver().get(\""url\"")` and you need to tell the TestBench-controlled browser to navigate via other means instead (e.g. via clicking links in a nav bar).\n\n### Expected behavior\n\nThe `MainLayout` instance should be reused.\n\n### Minimal reproducible example\n\nCheck out the https://github.com/vaadin/skeleton-starter-flow-spring example app for Vaadin 23.5.15. Then create the following classes:\n```java\n@PreserveOnRefresh\npublic class MainLayout extends Div implements RouterLayout {\n    public MainLayout() {\n        System.out.println(this + \"": constructor\"");\n    }\n\n    @Override\n    public void showRouterLayoutContent(HasElement content) {\n        content.getElement().removeFromTree();\n        RouterLayout.super.showRouterLayoutContent(content);\n    }\n}\n@Route(layout = MainLayout.class)\n@RouteScope\n@RouteScopeOwner(MainLayout.class)\n@SpringComponent\npublic class MainView extends VerticalLayout {\n    public MainView() {\n        System.out.println(this + \"": constructor\"");\n        UI.getCurrent().getPage().retrieveExtendedClientDetails(e -> System.out.println(e.getWindowName()));\n        add(new RouterLink(\""Navigate to second view - this works correctly\"", SecondView.class));\n    }\n}\n@Route(value = \""second\"", layout = MainLayout.class)\n@RouteScope\n@RouteScopeOwner(MainLayout.class)\n@SpringComponent\npublic class SecondView extends VerticalLayout {\n    public SecondView() {\n        System.out.println(this + \"": constructor\"");\n        UI.getCurrent().getPage().retrieveExtendedClientDetails(e -> System.out.println(e.getWindowName()));\n    }\n}\n```\nRun the app; the browser opens and navigates to http://localhost:8080 and the following is printed to Java stdout:\n```\norg.vaadin.example.MainLayout@26a9aa3e: constructor\norg.vaadin.example.MainView@1cee63e2: constructor\nROOT-2521314-0.937907358684621\n```\nAll good so far. Now enter the following into the browser's address bar manually, via keyboard: `http://localhost:8080/second`. This navigates to `SecondView`, however you can see in Java stdout that a new instance of `MainLayout` got instantiated, while the `window.name` stayed the same:\n```\norg.vaadin.example.MainLayout@4b4a7429: constructor\norg.vaadin.example.SecondView@23d28536: constructor\nROOT-2521314-0.937907358684621\n```\n\n\n### Versions\n\n- Vaadin / Flow version: 23.5.15\n- Java version: 17 (doesn't matter)\n- OS version: Ubuntu 24.10 (doesn't matter)\n- Browser version (if applicable): Firefox 136.0.1\n"", ""issue_word_count"": 515, ""test_files_count"": 10, ""non_test_files_count"": 3, ""pr_changed_files"": [""flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java"", ""flow-server/src/main/java/com/vaadin/flow/router/PreserveOnRefresh.java"", ""flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java"", ""flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainLayout.java"", ""flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainView.java"", ""flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/RootLayout.java"", ""flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/SecondView.java"", ""flow-tests/test-misc/src/test/java/com/vaadin/flow/misc/ui/PartialMatchRefreshIT.java"", ""flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainLayout.java"", ""flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainView.java"", ""flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/RootLayout.java"", ""flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/SecondView.java"", ""flow-tests/vaadin-spring-tests/test-spring-boot/src/test/java/com/vaadin/flow/spring/test/partial/PartialMatchRefreshIT.java""], ""pr_changed_test_files"": [""flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainLayout.java"", ""flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainView.java"", ""flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/RootLayout.java"", ""flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/SecondView.java"", ""flow-tests/test-misc/src/test/java/com/vaadin/flow/misc/ui/PartialMatchRefreshIT.java"", ""flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainLayout.java"", ""flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainView.java"", ""flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/RootLayout.java"", ""flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/SecondView.java"", ""flow-tests/vaadin-spring-tests/test-spring-boot/src/test/java/com/vaadin/flow/spring/test/partial/PartialMatchRefreshIT.java""], ""base_commit"": ""05a3ac4bc3b3b4e791c4b62fea503ca65f5db385"", ""head_commit"": ""3efdb2f76c658a705b888f5ca7f3ac5ad5039739"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21189"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21189"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-03T04:53:39.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\nindex c9cabe553e3..fbc90c1fb3a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n@@ -807,6 +807,19 @@ public boolean cancelPendingTitleUpdate() {\n         return result;\n     }\n \n+    /**\n+     * Populate the routerTargetChain with RouterLayouts, but only if the target\n+     * chain is empty. If the chain contains elements the given list is ignored.\n+     *\n+     * @param layouts\n+     *            stored router target chain to set as last navigated chain\n+     */\n+    public void setRouterTargetChain(List<RouterLayout> layouts) {\n+        if (routerTargetChain.isEmpty()) {\n+            routerTargetChain.addAll(layouts);\n+        }\n+    }\n+\n     /**\n      * Shows a route target in the related UI. This method is intended for\n      * framework use only. Use {@link UI#navigate(String)} to change the route\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/PreserveOnRefresh.java b/flow-server/src/main/java/com/vaadin/flow/router/PreserveOnRefresh.java\nindex 0b77e87357b..fe37103cecf 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/PreserveOnRefresh.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/PreserveOnRefresh.java\n@@ -45,4 +45,19 @@\n @Inherited\n @Documented\n public @interface PreserveOnRefresh {\n+\n+    /**\n+     * Set to true if refresh should also reuse partial chain components of\n+     * stored view chain.\n+     * <p>\n+     * This means that when navigating from a preserve on refresh target to a\n+     * new url in the same client window context, where windowName matches, the\n+     * router layouts that have been preserved will be reused without\n+     * re-creation for the new route.\n+     * <p>\n+     * Default is {@code false} so only url match is repopulated.\n+     *\n+     * @return {@code true} if partial chain match should be checked and used\n+     */\n+    boolean partialMatch() default false;\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\nindex 8d23b7125a9..ab71c262f02 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n@@ -129,7 +129,7 @@ public NavigationState getNavigationState() {\n      */\n     @SuppressWarnings(\""unchecked\"")\n     // Non-private for testing purposes\n-    static <T extends HasElement> T getRouteTarget(Class<T> routeTargetType,\n+    <T extends HasElement> T getRouteTarget(Class<T> routeTargetType,\n             NavigationEvent event, boolean lastElement) {\n         UI ui = event.getUI();\n         Instantiator instantiator = Instantiator.get(ui);\n@@ -267,6 +267,48 @@ private boolean populateChain(ArrayList<HasElement> chain,\n                 return true;\n             }\n             chain.addAll(maybeChain.get());\n+\n+            // If partialMatch is set to true check if the cache contains a\n+            // chain and possibly request extended details to get window name\n+            // to select cached chain.\n+            if (chain.isEmpty() && isPreservePartialTarget(\n+                    navigationState.getNavigationTarget(), routeLayoutTypes)) {\n+                UI ui = event.getUI();\n+                if (ui.getInternals().getExtendedClientDetails() == null) {\n+                    PreservedComponentCache cache = ui.getSession()\n+                            .getAttribute(PreservedComponentCache.class);\n+                    if (cache != null && !cache.isEmpty()) {\n+                        // As there is a cached chain we get the client details\n+                        // to get the window name so we can determine if the\n+                        // cache contains a chain for us to use.\n+                        ui.getPage().retrieveExtendedClientDetails(\n+                                details -> handle(event));\n+                        return true;\n+                    }\n+                } else {\n+                    Optional<List<HasElement>> partialChain = getWindowPreservedChain(\n+                            ui.getSession(),\n+                            ui.getInternals().getExtendedClientDetails()\n+                                    .getWindowName());\n+                    if (partialChain.isPresent()) {\n+                        List<HasElement> oldChain = partialChain.get();\n+                        disconnectElements(oldChain, ui);\n+\n+                        List<RouterLayout> routerLayouts = new ArrayList<>();\n+\n+                        for (HasElement hasElement : oldChain) {\n+                            if (hasElement instanceof RouterLayout) {\n+                                routerLayouts.add((RouterLayout) hasElement);\n+                            } else {\n+                                // Remove any non element from their parent to\n+                                // not get old or duplicate route content\n+                                hasElement.getElement().removeFromParent();\n+                            }\n+                        }\n+                        ui.getInternals().setRouterTargetChain(routerLayouts);\n+                    }\n+                }\n+            }\n         } else {\n             // Create an empty chain which gets populated later in\n             // `createChainIfEmptyAndExecuteBeforeEnterNavigation`.\n@@ -966,23 +1008,7 @@ private Optional<ArrayList<HasElement>> getPreservedChain(\n             if (maybePreserved.isPresent()) {\n                 // Re-use preserved chain for this route\n                 ArrayList<HasElement> chain = maybePreserved.get();\n-                final HasElement root = chain.get(chain.size() - 1);\n-                final Component component = (Component) chain.get(0);\n-                final Optional<UI> maybePrevUI = component.getUI();\n-\n-                if (maybePrevUI.isPresent() && maybePrevUI.get().equals(ui)) {\n-                    return Optional.of(chain);\n-                }\n-\n-                // Remove the top-level component from the tree\n-                root.getElement().removeFromTree(false);\n-\n-                // Transfer all remaining UI child elements (typically dialogs\n-                // and notifications) to the new UI\n-                maybePrevUI.ifPresent(prevUi -> {\n-                    ui.getInternals().moveElementsFrom(prevUi);\n-                    prevUi.close();\n-                });\n+                disconnectElements(chain, ui);\n \n                 return Optional.of(chain);\n             }\n@@ -991,6 +1017,26 @@ private Optional<ArrayList<HasElement>> getPreservedChain(\n         return Optional.of(new ArrayList<>(0));\n     }\n \n+    private static void disconnectElements(List<HasElement> chain, UI ui) {\n+        final HasElement root = chain.get(chain.size() - 1);\n+        final Component component = (Component) chain.get(0);\n+        final Optional<UI> maybePrevUI = component.getUI();\n+\n+        if (maybePrevUI.isPresent() && maybePrevUI.get().equals(ui)) {\n+            return;\n+        }\n+\n+        // Remove the top-level component from the tree\n+        root.getElement().removeFromTree(false);\n+\n+        // Transfer all remaining UI child elements (typically dialogs\n+        // and notifications) to the new UI\n+        maybePrevUI.ifPresent(prevUi -> {\n+            ui.getInternals().moveElementsFrom(prevUi);\n+            prevUi.close();\n+        });\n+    }\n+\n     /**\n      * Invoke this method with the chain that needs to be preserved after\n      * {@link #handle(NavigationEvent)} method created it.\n@@ -1079,6 +1125,18 @@ private static boolean isPreserveOnRefreshTarget(\n                         .isAnnotationPresent(PreserveOnRefresh.class));\n     }\n \n+    private static boolean isPreservePartialTarget(\n+            Class<? extends Component> routeTargetType,\n+            List<Class<? extends RouterLayout>> routeLayoutTypes) {\n+        return (routeTargetType.isAnnotationPresent(PreserveOnRefresh.class)\n+                && routeTargetType.getAnnotation(PreserveOnRefresh.class)\n+                        .partialMatch())\n+                || routeLayoutTypes.stream().anyMatch(layoutType -> layoutType\n+                        .isAnnotationPresent(PreserveOnRefresh.class)\n+                        && layoutType.getAnnotation(PreserveOnRefresh.class)\n+                                .partialMatch());\n+    }\n+\n     // maps window.name to (location, chain)\n     private static class PreservedComponentCache\n             extends HashMap<String, Pair<String, ArrayList<HasElement>>> {\n@@ -1105,9 +1163,27 @@ static Optional<ArrayList<HasElement>> getPreservedChain(\n         if (cache != null && cache.containsKey(windowName) && cache\n                 .get(windowName).getFirst().equals(location.getPath())) {\n             return Optional.of(cache.get(windowName).getSecond());\n-        } else {\n-            return Optional.empty();\n         }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Get a preserved chain by window name only ignoring location path.\n+     *\n+     * @param session\n+     *            current session\n+     * @param windowName\n+     *            window name to get cached view stack for\n+     * @return view stack cache if available for window name\n+     */\n+    static Optional<List<HasElement>> getWindowPreservedChain(\n+            VaadinSession session, String windowName) {\n+        final PreservedComponentCache cache = session\n+                .getAttribute(PreservedComponentCache.class);\n+        if (cache != null && cache.containsKey(windowName)) {\n+            return Optional.of(cache.get(windowName).getSecond());\n+        }\n+        return Optional.empty();\n     }\n \n     static void setPreservedChain(VaadinSession session, String windowName,\n"", ""test_patch"": ""diff --git a/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainLayout.java b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainLayout.java\nnew file mode 100644\nindex 00000000000..241d076287b\n--- /dev/null\n+++ b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainLayout.java\n@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.misc.ui.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.router.ParentLayout;\n+import com.vaadin.flow.router.RouterLayout;\n+\n+@ParentLayout(RootLayout.class)\n+public class MainLayout extends Div implements RouterLayout {\n+\n+    public static final String EVENT_LOG_ID = \""event-log\"";\n+    public static final String RESET_ID = \""reset-log\"";\n+\n+    private static int eventCounter = 0;\n+\n+    private final Div log = new Div();\n+\n+    public MainLayout() {\n+        log.setText(++eventCounter + \"": \"" + getClass().getSimpleName()\n+                + \"": constructor\"");\n+        log.setId(EVENT_LOG_ID);\n+        NativeButton reset = new NativeButton(\""Reset count\"",\n+                e -> eventCounter = 0);\n+        reset.setId(RESET_ID);\n+        add(log, reset);\n+    }\n+}\n\ndiff --git a/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainView.java b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainView.java\nnew file mode 100644\nindex 00000000000..055030f0fab\n--- /dev/null\n+++ b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/MainView.java\n@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.misc.ui.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.router.RouterLink;\n+\n+@Route(value = \""main\"", layout = MainLayout.class)\n+public class MainView extends Div {\n+\n+    public MainView() {\n+\n+        add(new RouterLink(\""Navigate to second view - this works correctly\"",\n+                SecondView.class));\n+    }\n+}\n\ndiff --git a/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/RootLayout.java b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/RootLayout.java\nnew file mode 100644\nindex 00000000000..062c7bb0265\n--- /dev/null\n+++ b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/RootLayout.java\n@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.misc.ui.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.router.PreserveOnRefresh;\n+import com.vaadin.flow.router.RouterLayout;\n+\n+@PreserveOnRefresh(partialMatch = true)\n+public class RootLayout extends Div implements RouterLayout {\n+\n+    public static final String ROOT_EVENT_LOG_ID = \""root-event-log\"";\n+    public static final String ROOT_RESET_ID = \""root-reset-log\"";\n+\n+    private static int eventCounter = 0;\n+\n+    private final Div log = new Div();\n+\n+    public RootLayout() {\n+        log.setText(++eventCounter + \"": \"" + getClass().getSimpleName()\n+                + \"": constructor\"");\n+        log.setId(ROOT_EVENT_LOG_ID);\n+        NativeButton reset = new NativeButton(\""Reset count\"",\n+                e -> eventCounter = 0);\n+        reset.setId(ROOT_RESET_ID);\n+        add(log, reset);\n+    }\n+}\n\ndiff --git a/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/SecondView.java b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/SecondView.java\nnew file mode 100644\nindex 00000000000..c7b8f583bda\n--- /dev/null\n+++ b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/partial/SecondView.java\n@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.misc.ui.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.router.Route;\n+\n+@Route(value = \""second\"", layout = MainLayout.class)\n+public class SecondView extends Div {\n+    public static final String SECOND_ID = \""hello-second\"";\n+\n+    public SecondView() {\n+        Div helloSecond = new Div(\""Hello second\"");\n+        helloSecond.setId(SECOND_ID);\n+        add(helloSecond);\n+    }\n+}\n\ndiff --git a/flow-tests/test-misc/src/test/java/com/vaadin/flow/misc/ui/PartialMatchRefreshIT.java b/flow-tests/test-misc/src/test/java/com/vaadin/flow/misc/ui/PartialMatchRefreshIT.java\nnew file mode 100644\nindex 00000000000..8fb83b6cc85\n--- /dev/null\n+++ b/flow-tests/test-misc/src/test/java/com/vaadin/flow/misc/ui/PartialMatchRefreshIT.java\n@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.misc.ui;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.vaadin.flow.component.html.testbench.AnchorElement;\n+import com.vaadin.flow.component.html.testbench.DivElement;\n+import com.vaadin.flow.component.html.testbench.NativeButtonElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+import static com.vaadin.flow.misc.ui.partial.MainLayout.EVENT_LOG_ID;\n+import static com.vaadin.flow.misc.ui.partial.MainLayout.RESET_ID;\n+import static com.vaadin.flow.misc.ui.partial.RootLayout.ROOT_EVENT_LOG_ID;\n+import static com.vaadin.flow.misc.ui.partial.SecondView.SECOND_ID;\n+\n+@NotThreadSafe\n+public class PartialMatchRefreshIT extends ChromeBrowserTest {\n+\n+    @Test\n+    public void whenUpdatingUrl_parentChainShouldBeReused() {\n+        open();\n+\n+        Assert.assertEquals(\""1: RootLayout: constructor\"",\n+                $(DivElement.class).id(ROOT_EVENT_LOG_ID).getText());\n+\n+        Assert.assertEquals(\""1: MainLayout: constructor\"",\n+                $(DivElement.class).id(EVENT_LOG_ID).getText());\n+        Assert.assertEquals(\""Main navigation link should be available\"", 1,\n+                $(AnchorElement.class).all().size());\n+\n+        getDriver().get(getRootURL() + \""/second\"");\n+\n+        Assert.assertTrue(\""Couldn't find second view text div\"",\n+                $(DivElement.class).id(SECOND_ID).isDisplayed());\n+\n+        Assert.assertEquals(\""1: RootLayout: constructor\"",\n+                $(DivElement.class).id(ROOT_EVENT_LOG_ID).getText());\n+        Assert.assertEquals(\""1: MainLayout: constructor\"",\n+                $(DivElement.class).id(EVENT_LOG_ID).getText());\n+\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        $(NativeButtonElement.class).id(RESET_ID).click();\n+    }\n+\n+    @Override\n+    protected String getTestPath() {\n+        return \""/main\"";\n+    }\n+\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainLayout.java b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainLayout.java\nnew file mode 100644\nindex 00000000000..ec2f4933ef6\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainLayout.java\n@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.spring.test.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.router.ParentLayout;\n+import com.vaadin.flow.router.RouterLayout;\n+\n+@ParentLayout(RootLayout.class)\n+public class MainLayout extends Div implements RouterLayout {\n+\n+    public static final String EVENT_LOG_ID = \""event-log\"";\n+    public static final String RESET_ID = \""reset-log\"";\n+\n+    private static int eventCounter = 0;\n+\n+    private final Div log = new Div();\n+\n+    public MainLayout() {\n+        log.setText(++eventCounter + \"": \"" + getClass().getSimpleName()\n+                + \"": constructor\"");\n+        log.setId(EVENT_LOG_ID);\n+        NativeButton reset = new NativeButton(\""Reset count\"",\n+                e -> eventCounter = 0);\n+        reset.setId(RESET_ID);\n+        add(log, reset);\n+    }\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainView.java b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainView.java\nnew file mode 100644\nindex 00000000000..eda2706922b\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/MainView.java\n@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.spring.test.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.router.RouterLink;\n+import com.vaadin.flow.spring.annotation.RouteScope;\n+import com.vaadin.flow.spring.annotation.RouteScopeOwner;\n+import com.vaadin.flow.spring.annotation.SpringComponent;\n+\n+@Route(value = \""main\"", layout = MainLayout.class)\n+@RouteScope\n+@RouteScopeOwner(MainLayout.class)\n+@SpringComponent\n+public class MainView extends Div {\n+\n+    public MainView() {\n+\n+        add(new RouterLink(\""Navigate to second view - this works correctly\"",\n+                SecondView.class));\n+    }\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/RootLayout.java b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/RootLayout.java\nnew file mode 100644\nindex 00000000000..4f2713a32d6\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/RootLayout.java\n@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.spring.test.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.router.PreserveOnRefresh;\n+import com.vaadin.flow.router.RouterLayout;\n+\n+@PreserveOnRefresh(partialMatch = true)\n+public class RootLayout extends Div implements RouterLayout {\n+\n+    public static final String ROOT_EVENT_LOG_ID = \""root-event-log\"";\n+    public static final String ROOT_RESET_ID = \""root-reset-log\"";\n+\n+    private static int eventCounter = 0;\n+\n+    private final Div log = new Div();\n+\n+    public RootLayout() {\n+        log.setText(++eventCounter + \"": \"" + getClass().getSimpleName()\n+                + \"": constructor\"");\n+        log.setId(ROOT_EVENT_LOG_ID);\n+        NativeButton reset = new NativeButton(\""Reset count\"",\n+                e -> eventCounter = 0);\n+        reset.setId(ROOT_RESET_ID);\n+        add(log, reset);\n+    }\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/SecondView.java b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/SecondView.java\nnew file mode 100644\nindex 00000000000..a1b63c0bc9a\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-boot/src/main/java/com/vaadin/flow/spring/test/partial/SecondView.java\n@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.spring.test.partial;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.router.Route;\n+import com.vaadin.flow.spring.annotation.RouteScope;\n+import com.vaadin.flow.spring.annotation.RouteScopeOwner;\n+import com.vaadin.flow.spring.annotation.SpringComponent;\n+\n+@Route(value = \""second\"", layout = MainLayout.class)\n+@RouteScope\n+@RouteScopeOwner(MainLayout.class)\n+@SpringComponent\n+public class SecondView extends Div {\n+    public static final String SECOND_ID = \""hello-second\"";\n+\n+    public SecondView() {\n+        Div helloSecond = new Div(\""Hello second\"");\n+        helloSecond.setId(SECOND_ID);\n+        add(helloSecond);\n+    }\n+}\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-boot/src/test/java/com/vaadin/flow/spring/test/partial/PartialMatchRefreshIT.java b/flow-tests/vaadin-spring-tests/test-spring-boot/src/test/java/com/vaadin/flow/spring/test/partial/PartialMatchRefreshIT.java\nnew file mode 100644\nindex 00000000000..34f8f22ec6e\n--- /dev/null\n+++ b/flow-tests/vaadin-spring-tests/test-spring-boot/src/test/java/com/vaadin/flow/spring/test/partial/PartialMatchRefreshIT.java\n@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.spring.test.partial;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.vaadin.flow.component.html.testbench.AnchorElement;\n+import com.vaadin.flow.component.html.testbench.DivElement;\n+import com.vaadin.flow.component.html.testbench.NativeButtonElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTest;\n+\n+import static com.vaadin.flow.spring.test.partial.MainLayout.RESET_ID;\n+import static com.vaadin.flow.spring.test.partial.MainLayout.EVENT_LOG_ID;\n+import static com.vaadin.flow.spring.test.partial.RootLayout.ROOT_EVENT_LOG_ID;\n+import static com.vaadin.flow.spring.test.partial.SecondView.SECOND_ID;\n+\n+@NotThreadSafe\n+public class PartialMatchRefreshIT extends ChromeBrowserTest {\n+\n+    @Test\n+    public void whenUpdatingUrl_parentChainShouldBeReused() {\n+        open();\n+\n+        Assert.assertEquals(\""1: RootLayout: constructor\"",\n+                $(DivElement.class).id(ROOT_EVENT_LOG_ID).getText());\n+        Assert.assertEquals(\""1: MainLayout: constructor\"",\n+                $(DivElement.class).id(EVENT_LOG_ID).getText());\n+        Assert.assertEquals(\""Main navigation link should be available\"", 1,\n+                $(AnchorElement.class).all().size());\n+\n+        getDriver().get(getRootURL() + \""/second\"");\n+\n+        Assert.assertTrue(\""Couldn't find second view text div\"",\n+                $(DivElement.class).id(SECOND_ID).isDisplayed());\n+\n+        Assert.assertEquals(\""1: MainLayout: constructor\"",\n+                $(DivElement.class).id(EVENT_LOG_ID).getText());\n+        Assert.assertEquals(\""1: RootLayout: constructor\"",\n+                $(DivElement.class).id(ROOT_EVENT_LOG_ID).getText());\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        $(NativeButtonElement.class).id(RESET_ID).click();\n+    }\n+\n+    @Override\n+    protected String getTestPath() {\n+        return \""/main\"";\n+    }\n+}\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21111"", ""pr_id"": 21111, ""issue_id"": 20741, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n"", ""issue_word_count"": 151, ""test_files_count"": 3, ""non_test_files_count"": 13, ""pr_changed_files"": [""flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java"", ""flow-react/src/main/java/com/vaadin/flow/component/react/ReactRouterOutlet.java"", ""flow-server/src/main/java/com/vaadin/flow/component/AbstractSinglePropertyField.java"", ""flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java"", ""flow-server/src/main/java/com/vaadin/flow/component/ScrollOptions.java"", ""flow-server/src/main/java/com/vaadin/flow/component/UI.java"", ""flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java"", ""flow-server/src/main/java/com/vaadin/flow/dom/Element.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java"", ""flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java"", ""flow-server/src/test/java/com/vaadin/flow/component/AbstractSinglePropertyFieldTest.java"", ""flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java""], ""pr_changed_test_files"": [""flow-server/src/test/java/com/vaadin/flow/component/AbstractSinglePropertyFieldTest.java"", ""flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java""], ""base_commit"": ""0528f4f2a67f989a589cc8b9650a3eac55439159"", ""head_commit"": ""7dcf321857c9f417a01c79ec2291ea6ac3b9d7bb"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21111"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21111"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-17T12:36:45.000Z"", ""patch"": ""diff --git a/flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java b/flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java\nindex b38902b2337..00bf9576685 100644\n--- a/flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java\n+++ b/flow-react/src/main/java/com/vaadin/flow/component/react/ReactAdapterComponent.java\n@@ -16,24 +16,25 @@\n package com.vaadin.flow.component.react;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.BaseJsonNode;\n \n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializableFunction;\n-import com.vaadin.flow.internal.JsonCodec;\n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonCodec;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n-import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.JsonUtils;\n import com.vaadin.flow.internal.nodefeature.NodeProperties;\n \n-import elemental.json.Json;\n-import elemental.json.JsonValue;\n-\n import java.util.HashMap;\n import java.util.Map;\n \n+import elemental.json.JsonValue;\n+\n /**\n  * An abstract implementation of an adapter for integrating with React\n  * components. To be used together with a React adapter Web Component that\n@@ -110,7 +111,7 @@ protected <T> DomListenerRegistration addStateChangeListener(\n      *            value to assign\n      */\n     protected void setState(String stateName, Object value) {\n-        getElement().setPropertyJson(stateName, writeAsJson(value));\n+        getElement().setPropertyJson(stateName, writeToJson(value));\n     }\n \n     /**\n@@ -153,12 +154,30 @@ protected <T> T getState(String stateName, TypeReference<T> typeReference) {\n      * @return converted object instance\n      * @param <T>\n      *            type of result instance\n+     * @deprecated use {@link #readFromJson(JsonNode, Class)} instead\n      */\n+    @Deprecated\n     protected static <T> T readFromJson(JsonValue jsonValue,\n             Class<T> typeClass) {\n         return JsonUtils.readValue(jsonValue, typeClass);\n     }\n \n+    /**\n+     * Converts JsonValue into Java object of given type.\n+     *\n+     * @param jsonValue\n+     *            JSON value to convert, not {@code null}\n+     * @param typeClass\n+     *            type class of converted object instance\n+     * @return converted object instance\n+     * @param <T>\n+     *            type of result instance\n+     */\n+    protected static <T> T readFromJson(JsonNode jsonValue,\n+            Class<T> typeClass) {\n+        return JacksonUtils.readValue(jsonValue, typeClass);\n+    }\n+\n     /**\n      * Converts JsonValue into Java object of given type.\n      *\n@@ -169,23 +188,54 @@ protected static <T> T readFromJson(JsonValue jsonValue,\n      * @return converted object instance\n      * @param <T>\n      *            type of result instance\n+     * @deprecated use {@link #readFromJson(JsonNode, TypeReference)} instead\n      */\n+    @Deprecated\n     protected static <T> T readFromJson(JsonValue jsonValue,\n             TypeReference<T> typeReference) {\n         return JsonUtils.readValue(jsonValue, typeReference);\n     }\n \n+    /**\n+     * Converts JsonValue into Java object of given type.\n+     *\n+     * @param jsonValue\n+     *            JSON value to convert, not {@code null}\n+     * @param typeReference\n+     *            type reference of converted object instance\n+     * @return converted object instance\n+     * @param <T>\n+     *            type of result instance\n+     */\n+    protected static <T> T readFromJson(JsonNode jsonValue,\n+            TypeReference<T> typeReference) {\n+        return JacksonUtils.readValue(jsonValue, typeReference);\n+    }\n+\n     /**\n      * Converts Java object into JsonValue.\n      *\n      * @param object\n      *            Java object to convert\n      * @return converted JSON value\n+     * @deprecated use {@link #writeToJson(Object)}\n      */\n+    @Deprecated\n     protected static JsonValue writeAsJson(Object object) {\n         return JsonUtils.writeValue(object);\n     }\n \n+    /**\n+     * Converts Java object into JsonValue.\n+     *\n+     * @param object\n+     *            Java object to convert\n+     * @return converted JSON value\n+     */\n+    protected static BaseJsonNode writeToJson(Object object) {\n+        return JacksonUtils.writeValue(object);\n+    }\n+\n     /**\n      * Get the Flow container element that is set up in React template for given\n      * name attribute.\n@@ -210,29 +260,32 @@ protected Element getContentElement(String name) {\n         return contentMap.get(name);\n     }\n \n-    private JsonValue getPropertyJson(String propertyName) {\n+    private JsonNode getPropertyJson(String propertyName) {\n         var rawValue = getElement().getPropertyRaw(propertyName);\n         if (rawValue == null) {\n-            return Json.createNull();\n-        } else if (rawValue instanceof JsonValue jsonValue) {\n-            return jsonValue;\n+            return JacksonUtils.nullNode();\n+        } else if (rawValue instanceof JsonNode jsonNode) {\n+            return jsonNode;\n         } else if (rawValue instanceof String stringValue) {\n-            return Json.create(stringValue);\n+            return JacksonUtils.createNode(stringValue);\n         } else if (rawValue instanceof Double doubleValue) {\n-            return Json.create(doubleValue);\n+            return JacksonUtils.createNode(doubleValue);\n         } else if (rawValue instanceof Boolean booleanValue) {\n-            return Json.create(booleanValue);\n+            return JacksonUtils.createNode(booleanValue);\n+        } else if (rawValue instanceof JsonValue jsonValue) {\n+            // TODO: remove when elemental dropped\n+            return JacksonUtils.mapElemental(jsonValue);\n         } else {\n-            return Json.create(rawValue.toString());\n+            return JacksonUtils.createNode(rawValue.toString());\n         }\n     }\n \n     private <T> DomListenerRegistration addJsonReaderStateChangeListener(\n-            String stateName, SerializableFunction<JsonValue, T> jsonReader,\n+            String stateName, SerializableFunction<JsonNode, T> jsonReader,\n             SerializableConsumer<T> listener) {\n         return getElement().addPropertyChangeListener(stateName,\n                 stateName + \""-changed\"", (event -> {\n-                    JsonValue newStateJson = JsonCodec\n+                    JsonNode newStateJson = JacksonCodec\n                             .encodeWithoutTypeInfo(event.getValue());\n                     T newState = jsonReader.apply(newStateJson);\n                     listener.accept(newState);\n\ndiff --git a/flow-react/src/main/java/com/vaadin/flow/component/react/ReactRouterOutlet.java b/flow-react/src/main/java/com/vaadin/flow/component/react/ReactRouterOutlet.java\nindex a8ed0608944..9f6e76fc00d 100644\n--- a/flow-react/src/main/java/com/vaadin/flow/component/react/ReactRouterOutlet.java\n+++ b/flow-react/src/main/java/com/vaadin/flow/component/react/ReactRouterOutlet.java\n@@ -18,8 +18,6 @@\n \n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.component.dependency.JsModule;\n-import com.vaadin.flow.component.react.ReactAdapterComponent;\n-import com.vaadin.flow.router.Route;\n \n /**\n  * Component used to create a React {@code Outlet} element for binding a Hilla\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/AbstractSinglePropertyField.java b/flow-server/src/main/java/com/vaadin/flow/component/AbstractSinglePropertyField.java\nindex 2f172071299..62fdcb62953 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/AbstractSinglePropertyField.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/AbstractSinglePropertyField.java\n@@ -21,6 +21,7 @@\n import java.util.Objects;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.node.BaseJsonNode;\n import com.googlecode.gentyref.GenericTypeReflector;\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.dom.Element;\n@@ -29,6 +30,7 @@\n import com.vaadin.flow.function.SerializableBiConsumer;\n import com.vaadin.flow.function.SerializableBiFunction;\n import com.vaadin.flow.function.SerializableFunction;\n+import com.vaadin.flow.internal.JacksonCodec;\n import com.vaadin.flow.internal.JsonCodec;\n import com.vaadin.flow.shared.util.SharedUtil;\n \n@@ -128,6 +130,8 @@ private <C extends AbstractField<C, V>, V> SerializableBiConsumer<C, V> createWr\n                 Boolean.FALSE);\n         addHandler(Element::setProperty, Element::getProperty, Integer.class,\n                 Integer.valueOf(0));\n+        typeHandlers.put(BaseJsonNode.class,\n+                getJsonHandler(BaseJsonNode.class));\n         typeHandlers.put(JsonValue.class, getHandler(JsonValue.class));\n     }\n \n@@ -254,7 +258,10 @@ public <P> AbstractSinglePropertyField(String propertyName, T defaultValue,\n     @SuppressWarnings({ \""unchecked\"", \""rawtypes\"" })\n     private <P> TypeHandler<P> findHandler(Class<P> clazz) {\n         TypeHandler<P> typeHandler = (TypeHandler<P>) typeHandlers.get(clazz);\n-        if (typeHandler == null && JsonValue.class.isAssignableFrom(clazz)) {\n+        if (typeHandler == null && BaseJsonNode.class.isAssignableFrom(clazz)) {\n+            typeHandler = getJsonHandler((Class) clazz);\n+        } else if (typeHandler == null\n+                && JsonValue.class.isAssignableFrom(clazz)) {\n             typeHandler = getHandler((Class) clazz);\n         }\n         if (typeHandler == null) {\n@@ -366,6 +373,7 @@ protected void setPresentationValue(T newPresentationValue) {\n         propertyWriter.accept((C) this, newPresentationValue);\n     }\n \n+    @Deprecated\n     private static <P extends JsonValue> TypeHandler<P> getHandler(\n             Class<P> type) {\n         ElementGetter<P> getter = (element, property, defaultValue) -> {\n@@ -379,6 +387,18 @@ private static <P extends JsonValue> TypeHandler<P> getHandler(\n         return new TypeHandler<P>(setter, getter, null);\n     }\n \n+    private static <P extends BaseJsonNode> TypeHandler<P> getJsonHandler(\n+            Class<P> type) {\n+        ElementGetter<P> getter = (element, property, defaultValue) -> {\n+            Serializable value = element.getPropertyRaw(property);\n+            // JsonValue is passed straight through, other primitive\n+            // values are jsonified\n+            return type.cast(JacksonCodec.encodeWithoutTypeInfo(value));\n+        };\n+        ElementSetter<P> setter = Element::setPropertyJson;\n+        return new TypeHandler<P>(setter, getter, null);\n+    }\n+\n     private static <T> void addHandler(ElementSetter<T> setter,\n             ElementGetter<T> getter, Class<T> type, T typeDefaultValue) {\n         typeHandlers.put(type,\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java b/flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java\nindex 0f2b650706d..46761c3e8e1 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/ComponentEventBus.java\n@@ -28,16 +28,21 @@\n import java.util.Optional;\n import java.util.function.Consumer;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n import com.vaadin.flow.dom.DebouncePhase;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n import com.vaadin.flow.dom.DomEvent;\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.JacksonCodec;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.JsonCodec;\n import com.vaadin.flow.shared.Registration;\n \n import elemental.json.Json;\n+import elemental.json.JsonNull;\n import elemental.json.JsonValue;\n \n /**\n@@ -361,6 +366,14 @@ private List<Object> createEventDataObjects(DomEvent domEvent,\n                     || type == Element.class) {\n                 eventDataObjects.add(parseStateNodeIdToComponentReference(\n                         domEvent, type, expression));\n+            } else if (JsonNode.class.isAssignableFrom(type)) {\n+                // TODO: Decode and remove if when domEvent uses jackson.\n+                JsonValue eventValue = domEvent.getEventData().get(expression);\n+                if (eventValue == null || eventValue instanceof JsonNull) {\n+                    eventDataObjects.add(null);\n+                } else {\n+                    eventDataObjects.add(JacksonUtils.mapElemental(eventValue));\n+                }\n             } else {\n                 JsonValue jsonValue = domEvent.getEventData().get(expression);\n                 if (jsonValue == null) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/ScrollOptions.java b/flow-server/src/main/java/com/vaadin/flow/component/ScrollOptions.java\nindex db5fc18e964..18a5d193087 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/ScrollOptions.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/ScrollOptions.java\n@@ -3,8 +3,9 @@\n import java.io.Serializable;\n import java.util.Locale;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import com.vaadin.flow.internal.JacksonUtils;\n \n /**\n  * Options for scrollIntoView.\n@@ -123,7 +124,7 @@ public Alignment getInline() {\n      * @return a json object as a string\n      */\n     public String toJson() {\n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         if (behavior != Behavior.AUTO) {\n             json.put(\""behavior\"", behavior.name().toLowerCase(Locale.ENGLISH));\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/UI.java b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\nindex 5f1dd534204..8b04a54b49a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/UI.java\n@@ -27,6 +27,7 @@\n import java.util.concurrent.Future;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -44,6 +45,7 @@\n import com.vaadin.flow.i18n.LocaleChangeEvent;\n import com.vaadin.flow.internal.CurrentInstance;\n import com.vaadin.flow.internal.ExecutionContext;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.StateTree.ExecutionRegistration;\n import com.vaadin.flow.internal.nodefeature.ElementData;\n@@ -87,6 +89,8 @@\n import com.vaadin.flow.server.communication.PushConnection;\n import com.vaadin.flow.shared.Registration;\n \n+import elemental.json.Json;\n+import elemental.json.JsonObject;\n import elemental.json.JsonValue;\n \n /**\n@@ -1743,7 +1747,7 @@ public static class BrowserNavigateEvent extends ComponentEvent<UI> {\n         private final String route;\n         private final String query;\n         private final String appShellTitle;\n-        private final JsonValue historyState;\n+        private final JsonNode historyState;\n         private final String trigger;\n \n         /**\n@@ -1766,7 +1770,7 @@ public BrowserNavigateEvent(UI source, boolean fromClient,\n                 @EventData(\""route\"") String route,\n                 @EventData(\""query\"") String query,\n                 @EventData(\""appShellTitle\"") String appShellTitle,\n-                @EventData(\""historyState\"") JsonValue historyState,\n+                @EventData(\""historyState\"") JsonNode historyState,\n                 @EventData(\""trigger\"") String trigger) {\n             super(source, true);\n             this.route = route;\n@@ -1838,7 +1842,8 @@ public BrowserRefreshEvent(UI source, boolean fromClient,\n     public void connectClient(String flowRoutePath, String flowRouteQuery,\n             String appShellTitle, JsonValue historyState, String trigger) {\n         browserNavigate(new BrowserNavigateEvent(this, false, flowRoutePath,\n-                flowRouteQuery, appShellTitle, historyState, trigger));\n+                flowRouteQuery, appShellTitle,\n+                JacksonUtils.mapElemental(historyState), trigger));\n     }\n \n     /**\n@@ -1879,9 +1884,11 @@ public void browserNavigate(BrowserNavigateEvent event) {\n         } else {\n             History.HistoryStateChangeHandler handler = getPage().getHistory()\n                     .getHistoryStateChangeHandler();\n+            JsonObject state = event.historyState == null ? null\n+                    : Json.parse(event.historyState.toString());\n             handler.onHistoryStateChange(\n                     new History.HistoryStateChangeEvent(getPage().getHistory(),\n-                            event.historyState, location, navigationTrigger));\n+                            state, location, navigationTrigger));\n         }\n \n         // true if the target is client-view and the push mode is disable\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java\nindex 0d6fd6e300c..91b5f27f4fe 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponentUI.java\n@@ -22,6 +22,7 @@\n import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.Component;\n@@ -45,8 +46,6 @@\n import com.vaadin.flow.theme.Theme;\n import com.vaadin.flow.theme.ThemeDefinition;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * Custom UI for use with WebComponents served from the server.\n  * <p>\n@@ -77,7 +76,7 @@ public static class WebComponentConnectEvent extends ComponentEvent<UI> {\n         private String tag;\n         private String userAssignedId;\n         private String webComponentElementId;\n-        private JsonObject attributeValues;\n+        private JsonNode attributeValues;\n \n         /**\n          * Creates a new web component connection event.\n@@ -104,7 +103,7 @@ public WebComponentConnectEvent(UI source, boolean fromClient,\n                 @EventData(\""tag\"") String tag,\n                 @EventData(\""id\"") String webComponentElementId,\n                 @EventData(\""userAssignedId\"") String userAssignedId,\n-                @EventData(\""attributeValues\"") JsonObject attributeValues) {\n+                @EventData(\""attributeValues\"") JsonNode attributeValues) {\n             super(source, true);\n             this.tag = tag;\n             this.userAssignedId = userAssignedId;\n@@ -144,7 +143,7 @@ public String getWebComponentUserAssignedId() {\n          *\n          * @return the initial attribute values\n          */\n-        public JsonObject getAttributeJson() {\n+        public JsonNode getAttributeJson() {\n             return attributeValues;\n         }\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/dom/Element.java b/flow-server/src/main/java/com/vaadin/flow/dom/Element.java\nindex a547478443f..c5b77395db0 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/dom/Element.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/dom/Element.java\n@@ -27,6 +27,13 @@\n import java.util.stream.IntStream;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.BaseJsonNode;\n+import com.fasterxml.jackson.databind.node.BooleanNode;\n+import com.fasterxml.jackson.databind.node.NullNode;\n+import com.fasterxml.jackson.databind.node.NumericNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n import org.jsoup.nodes.Document;\n \n import com.vaadin.flow.component.Component;\n@@ -68,6 +75,7 @@ public class Element extends Node<Element> {\n     static final String ATTRIBUTE_NAME_CANNOT_BE_NULL = \""The attribute name cannot be null\"";\n \n     private static final String USE_SET_PROPERTY_WITH_JSON_NULL = \""setProperty(name, Json.createNull()) must be used to set a property to null\"";\n+    private static final String USE_SET_PROPERTY_WITH_JACKSON_NULL = \""setProperty(name, JacksonUtils.nullNode()) must be used to set a property to null\"";\n \n     // Can't set $name as a property, use $replacement instead.\n     private static final Map<String, String> illegalPropertyReplacements = new HashMap<>();\n@@ -682,6 +690,36 @@ public Element setPropertyJson(String name, JsonValue value) {\n         return this;\n     }\n \n+    /**\n+     * Sets the given property to the given JSON value.\n+     * <p>\n+     * Please note that this method does not accept <code>null</code> as a\n+     * value, since {@link com.vaadin.flow.internal.JacksonUtils#nullNode()}\n+     * should be used instead for JSON values.\n+     * <p>\n+     * Note that properties changed on the server are updated on the client but\n+     * changes made on the client side are not reflected back to the server\n+     * unless configured using\n+     * {@link #addPropertyChangeListener(String, String, PropertyChangeListener)}\n+     * or {@link DomListenerRegistration#synchronizeProperty(String)}.\n+     *\n+     * @param name\n+     *            the property name, not <code>null</code>\n+     * @param value\n+     *            the property value, not <code>null</code>\n+     * @return this element\n+     */\n+    // Distinct name so setProperty(\""foo\"", null) is not ambiguous\n+    public Element setPropertyJson(String name, BaseJsonNode value) {\n+        if (value == null) {\n+            throw new IllegalArgumentException(\n+                    USE_SET_PROPERTY_WITH_JACKSON_NULL);\n+        }\n+\n+        setRawProperty(name, value);\n+        return this;\n+    }\n+\n     /**\n      * Sets the given property to the given bean, converted to a JSON object.\n      * <p>\n@@ -856,6 +894,8 @@ public String getProperty(String name, String defaultValue) {\n             return defaultValue;\n         } else if (value instanceof JsonValue) {\n             return ((JsonValue) value).toJson();\n+        } else if (value instanceof NullNode) {\n+            return defaultValue;\n         } else if (value instanceof Number) {\n             double doubleValue = ((Number) value).doubleValue();\n             int intValue = (int) doubleValue;\n@@ -954,6 +994,10 @@ public double getProperty(String name, double defaultValue) {\n                     return Double.NaN;\n                 }\n             }\n+        } else if (value instanceof BooleanNode) {\n+            return ((BooleanNode) value).booleanValue() ? 1 : 0;\n+        } else if (value instanceof JsonNode) {\n+            return ((JsonNode) value).asDouble(Double.NaN);\n         } else {\n             throw new IllegalStateException(\n                     \""Unsupported property type: \"" + value.getClass());\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\nindex 5b87e86b656..f7793a1b263 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n@@ -158,6 +158,9 @@ public static BaseJsonNode mapElemental(JsonValue jsonValue) {\n         if (jsonValue instanceof JsonObject) {\n             return mapElemental((JsonObject) jsonValue);\n         }\n+        if (jsonValue instanceof JsonArray) {\n+            return mapElemental((JsonArray) jsonValue);\n+        }\n         if (jsonValue instanceof JsonNumber) {\n             return objectMapper.valueToTree(jsonValue.asNumber());\n         }\n@@ -554,7 +557,7 @@ public static ObjectNode mapToJson(Map<String, ?> map) {\n      * @param <T>\n      *            type of result instance\n      */\n-    public static <T> T readToObject(ObjectNode jsonObject, Class<T> tClass) {\n+    public static <T> T readToObject(JsonNode jsonObject, Class<T> tClass) {\n         Objects.requireNonNull(jsonObject, CANNOT_CONVERT_NULL_TO_OBJECT);\n         try {\n             return objectMapper.treeToValue(jsonObject, tClass);\n@@ -575,7 +578,7 @@ public static <T> T readToObject(ObjectNode jsonObject, Class<T> tClass) {\n      * @param <T>\n      *            type of result instance\n      */\n-    public static <T> T readValue(ObjectNode jsonValue, Class<T> tClass) {\n+    public static <T> T readValue(JsonNode jsonValue, Class<T> tClass) {\n         return readToObject(jsonValue, tClass);\n     }\n \n@@ -590,7 +593,7 @@ public static <T> T readValue(ObjectNode jsonValue, Class<T> tClass) {\n      * @param <T>\n      *            type of result instance\n      */\n-    public static <T> T readValue(ObjectNode jsonValue,\n+    public static <T> T readValue(JsonNode jsonValue,\n             TypeReference<T> typeReference) {\n         Objects.requireNonNull(jsonValue, CANNOT_CONVERT_NULL_TO_OBJECT);\n         try {\n@@ -608,7 +611,7 @@ public static <T> T readValue(ObjectNode jsonValue,\n      *            Java object to convert\n      * @return converted JSON value\n      */\n-    public static ObjectNode writeValue(Object object) {\n+    public static BaseJsonNode writeValue(Object object) {\n         return objectMapper.valueToTree(object);\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java b/flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java\nindex e1200c3f7e7..4519f8027d5 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JavaScriptSemantics.java\n@@ -15,6 +15,10 @@\n  */\n package com.vaadin.flow.internal;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.NullNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import elemental.json.JsonValue;\n \n /**\n@@ -46,12 +50,16 @@ private JavaScriptSemantics() {\n      *         JavaScript semantics, otherwise <code>false</code>\n      */\n     public static boolean isTrueish(Object value) {\n-        if (value == null) {\n+        if (value == null || value instanceof NullNode) {\n             return false;\n         } else if (value instanceof Boolean) {\n             return ((Boolean) value).booleanValue();\n         } else if (value instanceof JsonValue) {\n             return ((JsonValue) value).asBoolean();\n+        } else if (value instanceof ObjectNode) {\n+            return ((JsonNode) value).asBoolean(true);\n+        } else if (value instanceof JsonNode) {\n+            return ((JsonNode) value).asBoolean();\n         } else if (value instanceof Number) {\n             double number = ((Number) value).doubleValue();\n             // Special comparison to keep sonarqube happy\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java b/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java\nindex 11feb2edc52..1fe7696a210 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java\n@@ -17,6 +17,11 @@\n package com.vaadin.flow.internal.change;\n \n import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.BooleanNode;\n+import com.fasterxml.jackson.databind.node.NumericNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import com.vaadin.flow.internal.ConstantPool;\n import com.vaadin.flow.internal.JacksonCodec;\n@@ -90,9 +95,23 @@ protected void populateJson(JsonObject json, ConstantPool constantPool) {\n         if (value instanceof StateNode node) {\n             json.put(JsonConstants.CHANGE_PUT_NODE_VALUE,\n                     Json.create(node.getId()));\n-        } else if (value instanceof JsonNode node) {\n+        } else if (value instanceof ObjectNode node) {\n             json.put(JsonConstants.CHANGE_PUT_VALUE, Json.parse(JacksonCodec\n                     .encodeWithConstantPool(node, constantPool).toString()));\n+        } else if (value instanceof NumericNode node) {\n+            json.put(JsonConstants.CHANGE_PUT_VALUE, Json.create(JacksonCodec\n+                    .encodeWithConstantPool(node, constantPool).doubleValue()));\n+        } else if (value instanceof BooleanNode node) {\n+            json.put(JsonConstants.CHANGE_PUT_VALUE,\n+                    Json.create(JacksonCodec\n+                            .encodeWithConstantPool(node, constantPool)\n+                            .booleanValue()));\n+        } else if (value instanceof TextNode node) {\n+            json.put(JsonConstants.CHANGE_PUT_VALUE, Json.create(JacksonCodec\n+                    .encodeWithConstantPool(node, constantPool).textValue()));\n+        } else if (value instanceof ValueNode node) {\n+            json.put(JsonConstants.CHANGE_PUT_VALUE, Json.create(JacksonCodec\n+                    .encodeWithConstantPool(node, constantPool).toString()));\n         } else {\n             json.put(JsonConstants.CHANGE_PUT_VALUE,\n                     JsonCodec.encodeWithConstantPool(value, constantPool));\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java\nindex 89023905974..c99e8a96e17 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractPropertyMap.java\n@@ -18,6 +18,7 @@\n import java.io.Serializable;\n import java.util.stream.Stream;\n \n+import com.vaadin.flow.internal.JacksonCodec;\n import com.vaadin.flow.internal.JsonCodec;\n import com.vaadin.flow.internal.ReflectTools;\n import com.vaadin.flow.internal.StateNode;\n@@ -127,6 +128,7 @@ public static boolean isValidValueType(Serializable value) {\n         }\n         Class<?> type = ReflectTools.convertPrimitiveType(value.getClass());\n         return JsonCodec.canEncodeWithoutTypeInfo(type)\n+                || JacksonCodec.canEncodeWithoutTypeInfo(type)\n                 || StateNode.class.isAssignableFrom(type);\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java\nindex 47675a6c805..f235f084ef7 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/DefaultRpcDecoder.java\n@@ -15,6 +15,10 @@\n  */\n package com.vaadin.flow.server.communication.rpc;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import com.vaadin.flow.internal.JacksonCodec;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.JsonCodec;\n \n import elemental.json.JsonValue;\n@@ -37,12 +41,17 @@ public class DefaultRpcDecoder implements RpcDecoder {\n \n     @Override\n     public boolean isApplicable(JsonValue value, Class<?> type) {\n-        return JsonCodec.canEncodeWithoutTypeInfo(type);\n+        return JsonCodec.canEncodeWithoutTypeInfo(type)\n+                || JacksonCodec.canEncodeWithoutTypeInfo(type);\n     }\n \n     @Override\n     public <T> T decode(JsonValue value, Class<T> type)\n             throws RpcDecodeException {\n+        if (type.isAssignableFrom(JsonNode.class)) {\n+            return JacksonCodec.decodeAs(JacksonUtils.mapElemental(value),\n+                    type);\n+        }\n         return JsonCodec.decodeAs(value, type);\n     }\n \n"", ""test_patch"": ""diff --git a/flow-server/src/test/java/com/vaadin/flow/component/AbstractSinglePropertyFieldTest.java b/flow-server/src/test/java/com/vaadin/flow/component/AbstractSinglePropertyFieldTest.java\nindex 12a380668b9..b81917bdc52 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/AbstractSinglePropertyFieldTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/AbstractSinglePropertyFieldTest.java\n@@ -21,6 +21,9 @@\n import java.util.List;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.BaseJsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n import org.apache.commons.lang3.SerializationUtils;\n import org.junit.Assert;\n import org.junit.Rule;\n@@ -32,10 +35,8 @@\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.function.SerializableRunnable;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.JsonUtils;\n-import com.vaadin.flow.server.VaadinService;\n-import com.vaadin.flow.server.VaadinSession;\n-import com.vaadin.flow.server.MockServletServiceSessionSetup.TestVaadinServlet;\n import com.vaadin.flow.server.MockServletServiceSessionSetup.TestVaadinServletService;\n import com.vaadin.tests.PublicApiAnalyzer;\n import com.vaadin.tests.util.MockUI;\n@@ -538,4 +539,67 @@ public void getValue_wrapExistingElement_elementHasProperty_valueIsThePropertyVa\n         Assert.assertEquals(\""foo\"", field.getValue());\n     }\n \n+    /** Jackson tests **/\n+\n+    @Tag(\""tag\"")\n+    private static class JacksonField\n+            extends AbstractSinglePropertyField<JacksonField, BaseJsonNode> {\n+        public JacksonField() {\n+            super(\""property\"", JacksonUtils.nullNode(), false);\n+        }\n+    }\n+\n+    @Tag(\""tag\"")\n+    private static class JacksonArrayField\n+            extends AbstractSinglePropertyField<JacksonArrayField, ArrayNode> {\n+        public JacksonArrayField() {\n+            super(\""property\"", JacksonUtils.createArray(), false);\n+        }\n+    }\n+\n+    @Test\n+    public void jacksonField() {\n+        JacksonField field = new JacksonField();\n+        ValueChangeMonitor<BaseJsonNode> monitor = new ValueChangeMonitor<>(\n+                field);\n+\n+        Assert.assertEquals(JsonNodeType.NULL, field.getValue().getNodeType());\n+        monitor.assertNoEvent();\n+\n+        field.setValue(JacksonUtils.createArray(JacksonUtils.createNode(\""foo\""),\n+                JacksonUtils.createNode(42)));\n+        monitor.discard();\n+        Assert.assertEquals(\""[\\\""foo\\\"",42]\"",\n+                field.getElement().getPropertyRaw(\""property\"").toString());\n+\n+        field.getElement().setPropertyJson(\""property\"",\n+                JacksonUtils.createObjectNode());\n+        monitor.discard();\n+        Assert.assertEquals(\""{}\"", field.getValue().toString());\n+\n+        field.getElement().setProperty(\""property\"", \""text\"");\n+        monitor.discard();\n+        Assert.assertEquals(\""\\\""text\\\""\"", field.getValue().toString());\n+    }\n+\n+    @Test\n+    public void jacksonArrayField() {\n+        JacksonArrayField field = new JacksonArrayField();\n+        ValueChangeMonitor<ArrayNode> monitor = new ValueChangeMonitor<>(field);\n+\n+        Assert.assertEquals(JsonNodeType.ARRAY, field.getValue().getNodeType());\n+        Assert.assertEquals(0, field.getValue().size());\n+        monitor.assertNoEvent();\n+\n+        field.setValue(JacksonUtils.createArray(JacksonUtils.createNode(\""foo\""),\n+                JacksonUtils.createNode(42)));\n+        monitor.discard();\n+        Assert.assertEquals(\""[\\\""foo\\\"",42]\"",\n+                field.getElement().getPropertyRaw(\""property\"").toString());\n+\n+        field.getElement().setPropertyJson(\""property\"", JacksonUtils.createArray(\n+                JacksonUtils.createNode(37), JacksonUtils.createNode(\""bar\"")));\n+        monitor.discard();\n+        Assert.assertEquals(\""[37,\\\""bar\\\""]\"", field.getValue().toString());\n+    }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java b/flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java\nnew file mode 100644\nindex 00000000000..63ed1271e30\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/dom/ElementJacksonTest.java\n@@ -0,0 +1,2642 @@\n+package com.vaadin.flow.dom;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.Serializable;\n+import java.lang.ref.WeakReference;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.time.Duration;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import java.util.stream.DoubleStream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.BaseJsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import net.jcip.annotations.NotThreadSafe;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.component.Html;\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.component.internal.PendingJavaScriptInvocation;\n+import com.vaadin.flow.component.internal.UIInternals.JavaScriptInvocation;\n+import com.vaadin.flow.component.page.PendingJavaScriptResult;\n+import com.vaadin.flow.dom.impl.BasicElementStateProvider;\n+import com.vaadin.flow.internal.JacksonUtils;\n+import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.NullOwner;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.ElementAttributeMap;\n+import com.vaadin.flow.internal.nodefeature.ElementListenerMap;\n+import com.vaadin.flow.internal.nodefeature.ElementListenersTest;\n+import com.vaadin.flow.internal.nodefeature.ElementPropertyMap;\n+import com.vaadin.flow.internal.nodefeature.ElementStylePropertyMap;\n+import com.vaadin.flow.internal.nodefeature.VirtualChildrenList;\n+import com.vaadin.flow.server.MockVaadinServletService;\n+import com.vaadin.flow.server.StreamResource;\n+import com.vaadin.flow.server.VaadinSession;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.shared.Registration;\n+import com.vaadin.tests.util.AlwaysLockedVaadinSession;\n+import com.vaadin.tests.util.MockUI;\n+import com.vaadin.tests.util.TestUtil;\n+\n+@NotThreadSafe\n+public class ElementJacksonTest extends AbstractNodeTest {\n+\n+    @Test\n+    public void createElementWithTag() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertEquals(Tag.DIV, e.getTag());\n+        Assert.assertFalse(e.hasAttribute(\""is\""));\n+        Assert.assertFalse(e.isTextNode());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void createElementWithInvalidTag() {\n+        new Element(\""<div>\"");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void createElementWithEmptyTag() {\n+        new Element(\""\"");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void createElementWithNullTag() {\n+        new Element(null);\n+    }\n+\n+    @Test\n+    public void elementsUpdateSameData() {\n+        Element te = new Element(\""testelem\"");\n+        Element e = Element.get(te.getNode());\n+\n+        // Elements must be equal but not necessarily the same\n+        Assert.assertEquals(te, e);\n+\n+        te.setAttribute(\""foo\"", \""bar\"");\n+        Assert.assertEquals(\""bar\"", e.getAttribute(\""foo\""));\n+\n+        e.setAttribute(\""baz\"", \""123\"");\n+        Assert.assertEquals(\""123\"", te.getAttribute(\""baz\""));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getElementFromInvalidNode() {\n+        StateNode node = new StateNode(ElementPropertyMap.class);\n+        Element.get(node);\n+    }\n+\n+    @Test\n+    public void publicElementMethodsShouldReturnElement() {\n+        Set<String> ignore = new HashSet<>();\n+        ignore.add(\""toString\"");\n+        ignore.add(\""hashCode\"");\n+        ignore.add(\""equals\"");\n+\n+        // Returns EventRegistrationHandle\n+        ignore.add(\""addEventListener\"");\n+        ignore.add(\""addAttachListener\"");\n+        ignore.add(\""addDetachListener\"");\n+        ignore.add(\""addPropertyChangeListener\"");\n+\n+        // Returns index of child element\n+        ignore.add(\""indexOfChild\"");\n+        // Component wrapper\n+        ignore.add(\""as\"");\n+        // Possibly returns a remover or a wrapped return value in the future\n+        ignore.add(\""callFunction\"");\n+        ignore.add(\""executeJavaScript\"");\n+        // Returns a future-ish thing with access to the return value\n+        ignore.add(\""callJsFunction\"");\n+        ignore.add(\""executeJs\"");\n+\n+        // ignore shadow root methods\n+        ignore.add(\""attachShadow\"");\n+        ignore.add(\""getShadowRoot\"");\n+\n+        assertMethodsReturnType(Element.class, ignore);\n+    }\n+\n+    @Test\n+    public void publicElementStyleMethodsShouldReturnElement() {\n+        Set<String> ignore = new HashSet<>();\n+        ignore.add(\""toString\"");\n+        ignore.add(\""hashCode\"");\n+        ignore.add(\""equals\"");\n+\n+        for (Method m : Style.class.getDeclaredMethods()) {\n+            if (!Modifier.isPublic(m.getModifiers())) {\n+                continue;\n+            }\n+            if (Modifier.isStatic(m.getModifiers())) {\n+                continue;\n+            }\n+            if (m.getName().startsWith(\""get\"") || m.getName().startsWith(\""has\"")\n+                    || m.getName().startsWith(\""is\"")\n+                    || ignore.contains(m.getName())) {\n+                // Ignore\n+            } else {\n+                // Setters and such\n+                Class<?> returnType = m.getReturnType();\n+                Assert.assertEquals(\n+                        \""Method \"" + m.getName() + \"" has invalid return type\"",\n+                        Style.class, returnType);\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void stringAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\""foo\"", \""bar\"");\n+        Assert.assertEquals(\""bar\"", e.getAttribute(\""foo\""));\n+    }\n+\n+    @Test\n+    public void setEmptyAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\""foo\"", \""\"");\n+        Assert.assertEquals(\""\"", e.getAttribute(\""foo\""));\n+    }\n+\n+    @Test\n+    public void setBooleanAttribute() {\n+        Element e = ElementFactory.createDiv();\n+\n+        e.setAttribute(\""foo\"", true);\n+        Assert.assertEquals(\""\"", e.getAttribute(\""foo\""));\n+        Assert.assertTrue(e.hasAttribute(\""foo\""));\n+\n+        e.setAttribute(\""foo\"", false);\n+        Assert.assertEquals(null, e.getAttribute(\""foo\""));\n+        Assert.assertFalse(e.hasAttribute(\""foo\""));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setNullAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\""foo\"", (String) null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getNullAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.getAttribute(null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void hasNullAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.hasAttribute(null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void removeNullAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.removeAttribute(null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setInvalidAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\""\\\""foo\\\""\"", \""bar\"");\n+    }\n+\n+    @Test\n+    public void hasDefinedAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\""foo\"", \""bar\"");\n+        Assert.assertTrue(e.hasAttribute(\""foo\""));\n+    }\n+\n+    @Test\n+    public void doesNotHaveUndefinedAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertFalse(e.hasAttribute(\""foo\""));\n+    }\n+\n+    @Test\n+    public void doesNotHaveRemovedAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\""foo\"", \""bar\"");\n+        e.removeAttribute(\""foo\"");\n+        Assert.assertFalse(e.hasAttribute(\""foo\""));\n+    }\n+\n+    @Test\n+    public void removeNonExistingAttributeIsNoOp() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertFalse(e.hasAttribute(\""foo\""));\n+        e.removeAttribute(\""foo\"");\n+        Assert.assertFalse(e.hasAttribute(\""foo\""));\n+    }\n+\n+    @Test\n+    public void attributesWhenNoneDefined() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertEquals(0, e.getAttributeNames().count());\n+    }\n+\n+    @Test\n+    public void attributesNames() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\""foo\"", \""bar\"");\n+        Assert.assertArrayEquals(new String[] { \""foo\"" },\n+                e.getAttributeNames().toArray());\n+    }\n+\n+    @Test\n+    public void attributesNamesAfterRemoved() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\""foo\"", \""bar\"");\n+        e.setAttribute(\""bar\"", \""baz\"");\n+        e.removeAttribute(\""foo\"");\n+        Assert.assertArrayEquals(new String[] { \""bar\"" },\n+                e.getAttributeNames().toArray());\n+    }\n+\n+    @Test\n+    public void setGetAttributeValueCaseSensitive() {\n+        Element e = new Element(Tag.SPAN);\n+        e.setAttribute(\""foo\"", \""bAr\"");\n+        Assert.assertEquals(\""bAr\"", e.getAttribute(\""foo\""));\n+        e.setAttribute(\""foo\"", \""BAR\"");\n+        Assert.assertEquals(\""BAR\"", e.getAttribute(\""foo\""));\n+    }\n+\n+    @Test\n+    public void setGetAttributeNameCaseInsensitive() {\n+        Element e = new Element(Tag.SPAN);\n+        e.setAttribute(\""foo\"", \""bar\"");\n+        e.setAttribute(\""FOO\"", \""baz\"");\n+\n+        Assert.assertEquals(\""baz\"", e.getAttribute(\""foo\""));\n+        Assert.assertEquals(\""baz\"", e.getAttribute(\""FOO\""));\n+    }\n+\n+    @Test\n+    public void hasAttributeNamesCaseInsensitive() {\n+        Element e = new Element(Tag.SPAN);\n+        e.setAttribute(\""fooo\"", \""bar\"");\n+        Assert.assertTrue(e.hasAttribute(\""fOoO\""));\n+    }\n+\n+    @Test\n+    public void getAttributeNamesLowerCase() {\n+        Element e = new Element(Tag.SPAN);\n+        e.setAttribute(\""FOO\"", \""bar\"");\n+        e.setAttribute(\""Baz\"", \""bar\"");\n+\n+        Set<String> attributeNames = e.getAttributeNames()\n+                .collect(Collectors.toSet());\n+        Assert.assertTrue(attributeNames.contains(\""foo\""));\n+        Assert.assertFalse(attributeNames.contains(\""FOO\""));\n+        Assert.assertTrue(attributeNames.contains(\""baz\""));\n+        Assert.assertFalse(attributeNames.contains(\""Baz\""));\n+    }\n+\n+    @Test\n+    public void removeDetachedFromParent() {\n+        Element otherElement = new Element(\""other\"");\n+        Assert.assertNull(otherElement.getParent());\n+        otherElement.removeFromParent(); // No op\n+        Assert.assertNull(otherElement.getParent());\n+    }\n+\n+    @Test\n+    public void getDetachedParent() {\n+        Element otherElement = new Element(\""other\"");\n+        Assert.assertNull(otherElement.getParent());\n+        Assert.assertNull(otherElement.getParentNode());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void addNullEventListener() {\n+        Element e = ElementFactory.createDiv();\n+        e.addEventListener(\""foo\"", null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void addEventListenerForNullType() {\n+        Element e = ElementFactory.createDiv();\n+        e.addEventListener(null, ignore -> {\n+        });\n+    }\n+\n+    @Test\n+    public void equalsSelf() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertTrue(e.equals(e));\n+    }\n+\n+    @Test\n+    public void notEqualsNull() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertFalse(e.equals(null));\n+    }\n+\n+    @Test\n+    public void notEqualsString() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertFalse(e.equals(Tag.DIV));\n+    }\n+\n+    // @Test\n+    // public void listenerReceivesEvents() {\n+    // Element e = ElementFactory.createDiv();\n+    // AtomicInteger listenerCalls = new AtomicInteger(0);\n+    // DomEventListener myListener = event -> listenerCalls.incrementAndGet();\n+    //\n+    // e.addEventListener(\""click\"", myListener);\n+    // Assert.assertEquals(0, listenerCalls.get());\n+    // e.getNode().getFeature(ElementListenerMap.class)\n+    // .fireEvent(new DomEvent(e, \""click\"", JacksonUtils.createObjectNode()));\n+    // Assert.assertEquals(1, listenerCalls.get());\n+    // }\n+    //\n+    // @Test\n+    // public void listenerReceivesEventsWithAllowInert() {\n+    // Element e = ElementFactory.createDiv();\n+    // // Inert the node, verify events no more passed through\n+    // InertData inertData = e.getNode().getFeature(InertData.class);\n+    // inertData.setInertSelf(true);\n+    // inertData.generateChangesFromEmpty();\n+    //\n+    // AtomicInteger listenerCalls = new AtomicInteger(0);\n+    // DomEventListener myListener = event -> listenerCalls.incrementAndGet();\n+    //\n+    // DomListenerRegistration domListenerRegistration = e\n+    // .addEventListener(\""click\"", myListener);\n+    // Assert.assertEquals(0, listenerCalls.get());\n+    // e.getNode().getFeature(ElementListenerMap.class)\n+    // .fireEvent(new DomEvent(e, \""click\"", JacksonUtils.createObjectNode()));\n+    // // Event should not go through\n+    // Assert.assertEquals(0, listenerCalls.get());\n+    //\n+    // // Now should pass inert check and get notified\n+    // domListenerRegistration.allowInert();\n+    // e.getNode().getFeature(ElementListenerMap.class)\n+    // .fireEvent(new DomEvent(e, \""click\"", JacksonUtils.createObjectNode()));\n+    // Assert.assertEquals(1, listenerCalls.get());\n+    //\n+    // }\n+\n+    @Test\n+    public void getPropertyDefaults() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.setProperty(\""null\"", null);\n+        element.setProperty(\""empty\"", \""\"");\n+\n+        Assert.assertEquals(\""d\"", element.getProperty(\""null\"", \""d\""));\n+        Assert.assertEquals(\""d\"", element.getProperty(\""notThere\"", \""d\""));\n+        Assert.assertNotEquals(\""d\"", element.getProperty(\""empty\"", \""d\""));\n+\n+        Assert.assertTrue(element.getProperty(\""null\"", true));\n+        Assert.assertFalse(element.getProperty(\""null\"", false));\n+        Assert.assertTrue(element.getProperty(\""notThere\"", true));\n+        Assert.assertFalse(element.getProperty(\""notThere\"", false));\n+        Assert.assertFalse(element.getProperty(\""empty\"", true));\n+        Assert.assertFalse(element.getProperty(\""empty\"", false));\n+\n+        Assert.assertEquals(0.1, element.getProperty(\""null\"", 0.1), 0);\n+        Assert.assertEquals(0.1, element.getProperty(\""notThere\"", 0.1), 0);\n+        Assert.assertNotEquals(0.1, element.getProperty(\""empty\"", 0.1), 0);\n+\n+        Assert.assertEquals(42, element.getProperty(\""null\"", 42));\n+        Assert.assertEquals(42, element.getProperty(\""notThere\"", 42));\n+        Assert.assertNotEquals(42, element.getProperty(\""empty\"", 42));\n+    }\n+\n+    @Test\n+    public void getPropertyStringConversions() {\n+        assertPropertyString(null, null);\n+        assertPropertyString(\""foo\"", \""foo\"");\n+        assertPropertyString(\""\"", \""\"");\n+        assertPropertyString(\""45.6e1\"", \""45.6e1\"");\n+        assertPropertyString(\""true\"", Boolean.TRUE);\n+        assertPropertyString(\""false\"", Boolean.FALSE);\n+        assertPropertyString(String.valueOf(143534123423.243e23),\n+                Double.valueOf(143534123423.243e23));\n+        assertPropertyString(\""42\"", Double.valueOf(42));\n+\n+        assertPropertyString(null, JacksonUtils.nullNode());\n+        assertPropertyString(\""{}\"", JacksonUtils.createObjectNode());\n+    }\n+\n+    private static void assertPropertyString(String expected, Object value) {\n+        Element element = createPropertyAssertElement(value);\n+\n+        Assert.assertEquals(expected, element.getProperty(\""property\""));\n+    }\n+\n+    @Test\n+    public void testPropertyBooleanConversions() {\n+        assertPropertyBoolean(true, Boolean.TRUE);\n+        assertPropertyBoolean(false, Boolean.FALSE);\n+\n+        assertPropertyBoolean(true, \""true\"");\n+        assertPropertyBoolean(true, \""false\"");\n+        assertPropertyBoolean(false, \""\"");\n+\n+        assertPropertyBoolean(true, Double.valueOf(1));\n+        assertPropertyBoolean(true, Double.valueOf(3.14));\n+        assertPropertyBoolean(false, Double.valueOf(0));\n+        assertPropertyBoolean(false, Double.valueOf(Double.NaN));\n+\n+        assertPropertyBoolean(false, JacksonUtils.nullNode());\n+        assertPropertyBoolean(false, JacksonUtils.createNode(false));\n+        assertPropertyBoolean(true, JacksonUtils.createNode(true));\n+        assertPropertyBoolean(true, JacksonUtils.createObjectNode());\n+    }\n+\n+    private static void assertPropertyBoolean(boolean expected, Object value) {\n+        Element element = createPropertyAssertElement(value);\n+\n+        // !expected -> default value will always fail\n+        boolean actual = element.getProperty(\""property\"", !expected);\n+\n+        if (expected) {\n+            Assert.assertTrue(actual);\n+        } else {\n+            Assert.assertFalse(actual);\n+        }\n+    }\n+\n+    @Test\n+    public void testPropertyDoubleConversions() {\n+        assertPropertyDouble(1, Double.valueOf(1));\n+        assertPropertyDouble(.1, Double.valueOf(.1));\n+        assertPropertyDouble(Double.NaN, Double.valueOf(Double.NaN));\n+\n+        assertPropertyDouble(1, \""1\"");\n+        assertPropertyDouble(.1, \"".1\"");\n+        assertPropertyDouble(12.34e56, \""12.34e56\"");\n+        assertPropertyDouble(Double.NaN, \""foo\"");\n+\n+        assertPropertyDouble(1, Boolean.TRUE);\n+        assertPropertyDouble(0, Boolean.FALSE);\n+\n+        assertPropertyDouble(.1, JacksonUtils.createNode(.1));\n+        assertPropertyDouble(1, JacksonUtils.createNode(true));\n+        assertPropertyDouble(0, JacksonUtils.createNode(false));\n+        assertPropertyDouble(.1, JacksonUtils.createNode(\"".1\""));\n+        assertPropertyDouble(Double.NaN, JacksonUtils.createNode(\""foo\""));\n+        assertPropertyDouble(Double.NaN, JacksonUtils.createObjectNode());\n+    }\n+\n+    private static void assertPropertyDouble(double expected, Object value) {\n+        Element element = createPropertyAssertElement(value);\n+\n+        int delta = 0;\n+        double defaultValue = 1234d;\n+\n+        if (defaultValue == expected) {\n+            throw new IllegalArgumentException(\n+                    \""Expecting the default value might cause unintended results\"");\n+        }\n+\n+        Assert.assertEquals(expected,\n+                element.getProperty(\""property\"", defaultValue), delta);\n+    }\n+\n+    @Test\n+    public void testPropertyIntConversions() {\n+        assertPropertyInt(1, Double.valueOf(1));\n+        assertPropertyInt(1, Double.valueOf(1.9));\n+        assertPropertyInt(0, Double.valueOf(Double.NaN));\n+        assertPropertyInt(Integer.MAX_VALUE, Double.valueOf(12.34e56));\n+\n+        assertPropertyInt(1, \""1\"");\n+        assertPropertyInt(1, \""1.9\"");\n+        assertPropertyInt(Integer.MAX_VALUE, \""12.34e56\"");\n+        assertPropertyInt(0, \""foo\"");\n+\n+        assertPropertyInt(1, Boolean.TRUE);\n+        assertPropertyInt(0, Boolean.FALSE);\n+\n+        assertPropertyInt(1, JacksonUtils.createNode(1));\n+        assertPropertyInt(1, JacksonUtils.createNode(1.9));\n+        assertPropertyInt(1, JacksonUtils.createNode(true));\n+        assertPropertyInt(0, JacksonUtils.createNode(false));\n+        assertPropertyInt(1, JacksonUtils.createNode(\""1\""));\n+        assertPropertyInt(0, JacksonUtils.createNode(\""foo\""));\n+        assertPropertyInt(0, JacksonUtils.createObjectNode());\n+    }\n+\n+    private static void assertPropertyInt(int expected, Object value) {\n+        Element element = createPropertyAssertElement(value);\n+\n+        int defaultValue = 1234;\n+\n+        if (defaultValue == expected) {\n+            throw new IllegalArgumentException(\n+                    \""Expecting the default value might cause unintended results\"");\n+        }\n+\n+        Assert.assertEquals(expected,\n+                element.getProperty(\""property\"", defaultValue));\n+    }\n+\n+    public static class SimpleBean {\n+        private String string = \""value\"";\n+        private int number = 1;\n+        private float flt = 2.3f;\n+        private double dbl = 4.56;\n+\n+        public String getString() {\n+            return string;\n+        }\n+\n+        public int getNumber() {\n+            return number;\n+        }\n+\n+        public float getFlt() {\n+            return flt;\n+        }\n+\n+        public double getDbl() {\n+            return dbl;\n+        }\n+    }\n+\n+    public static class BeanWithTemporalFields {\n+\n+        public LocalTime localTime = LocalTime.of(10, 23, 55);\n+\n+        public LocalDate localDate = LocalDate.of(2024, 6, 26);\n+\n+        public LocalDateTime localDateTime = localDate.atTime(localTime);\n+\n+        public java.sql.Date sqlDate = java.sql.Date.valueOf(localDate);\n+\n+        public Date date = new Date(sqlDate.getTime());\n+\n+        public ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime,\n+                ZoneId.of(\""Europe/Rome\""));\n+\n+        public Duration duration = Duration.ofSeconds(10);\n+    }\n+\n+    @Test\n+    public void propertyRawValues() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.setProperty(\""p\"", \""v\"");\n+        Assert.assertEquals(\""v\"", element.getPropertyRaw(\""p\""));\n+\n+        element.setProperty(\""p\"", true);\n+        Assert.assertEquals(Boolean.TRUE, element.getPropertyRaw(\""p\""));\n+\n+        element.setProperty(\""p\"", 3.14);\n+        Assert.assertEquals(Double.valueOf(3.14), element.getPropertyRaw(\""p\""));\n+\n+        element.setPropertyJson(\""p\"", JacksonUtils.createObjectNode());\n+        Assert.assertEquals(ObjectNode.class,\n+                element.getPropertyRaw(\""p\"").getClass());\n+\n+        // TODO: Use setPropertyBean when updated to jackson\n+        element.setPropertyJson(\""p\"", JacksonUtils.beanToJson(new SimpleBean()));\n+        JsonNode json = (JsonNode) element.getPropertyRaw(\""p\"");\n+        Assert.assertEquals(\""value\"", json.get(\""string\"").textValue());\n+        Assert.assertEquals(1.0, json.get(\""number\"").doubleValue(), 0.0);\n+        Assert.assertEquals(2.3f, json.get(\""flt\"").floatValue(), 0.0);\n+        Assert.assertEquals(4.56, json.get(\""dbl\"").doubleValue(), 0.0);\n+\n+        List<SimpleBean> list = new ArrayList<>();\n+        SimpleBean bean1 = new SimpleBean();\n+        bean1.string = \""bean1\"";\n+        SimpleBean bean2 = new SimpleBean();\n+        bean2.string = \""bean2\"";\n+        list.add(bean1);\n+        list.add(bean2);\n+\n+        // TODO: Use setPropertyList when updated to jackson\n+        element.setPropertyJson(\""p\"", JacksonUtils.listToJson(list));\n+        ArrayNode jsonArray = (ArrayNode) element.getPropertyRaw(\""p\"");\n+        Assert.assertEquals(\""bean1\"",\n+                jsonArray.get(0).get(\""string\"").textValue());\n+        Assert.assertEquals(\""bean2\"",\n+                jsonArray.get(1).get(\""string\"").textValue());\n+\n+        Map<String, SimpleBean> map = new HashMap<>();\n+        map.put(\""one\"", bean1);\n+        map.put(\""two\"", bean2);\n+        // TODO: Use setPropertyMap when updated to jackson\n+        element.setPropertyJson(\""p\"", JacksonUtils.mapToJson(map));\n+        JsonNode jsonObject = (JsonNode) element.getPropertyRaw(\""p\"");\n+        Assert.assertEquals(\""bean1\"",\n+                jsonObject.get(\""one\"").get(\""string\"").textValue());\n+        Assert.assertEquals(\""bean2\"",\n+                jsonObject.get(\""two\"").get(\""string\"").textValue());\n+    }\n+\n+    @Test\n+    public void addAndRemoveProperty() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Assert.assertFalse(element.hasProperty(\""foo\""));\n+        element.removeProperty(\""foo\"");\n+        Assert.assertFalse(element.hasProperty(\""foo\""));\n+\n+        element.setProperty(\""foo\"", \""bar\"");\n+        Assert.assertTrue(element.hasProperty(\""foo\""));\n+        element.setProperty(\""foo\"", null);\n+        Assert.assertTrue(element.hasProperty(\""foo\""));\n+\n+        element.removeProperty(\""foo\"");\n+        Assert.assertFalse(element.hasProperty(\""foo\""));\n+    }\n+\n+    @Test\n+    public void propertyNames() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Assert.assertEquals(0, element.getPropertyNames().count());\n+\n+        element.setProperty(\""foo\"", \""bar\"");\n+        Assert.assertEquals(Collections.singleton(\""foo\""),\n+                element.getPropertyNames().collect(Collectors.toSet()));\n+\n+        element.removeProperty(\""foo\"");\n+        Assert.assertEquals(0, element.getPropertyNames().count());\n+    }\n+\n+    @Test\n+    public void setProperty_javaTimeObject() {\n+        BeanWithTemporalFields bean = new BeanWithTemporalFields();\n+        Element element = ElementFactory.createDiv();\n+\n+        // TODO: Use setPropertyBean when updated to jackson\n+        element.setPropertyJson(\""bean\"", JacksonUtils.beanToJson(bean));\n+        ObjectNode json = (ObjectNode) element.getPropertyRaw(\""bean\"");\n+\n+        Assert.assertTrue(\""LocalTime not serialized as expected\"",\n+                JacksonUtils.jsonEquals(createNumberArray(10, 23, 55),\n+                        json.get(\""localTime\"")));\n+        Assert.assertTrue(\""LocalDate not serialized as expected\"",\n+                JacksonUtils.jsonEquals(createNumberArray(2024, 6, 26),\n+                        json.get(\""localDate\"")));\n+        Assert.assertTrue(\""LocalDateTime not serialized as expected\"",\n+                JacksonUtils.jsonEquals(\n+                        createNumberArray(2024, 6, 26, 10, 23, 55),\n+                        json.get(\""localDateTime\"")));\n+        Assert.assertEquals(\""ZonedDateTime not serialized as expected\"",\n+                bean.zonedDateTime.toEpochSecond(),\n+                json.get(\""zonedDateTime\"").longValue(), 0);\n+        Assert.assertEquals(\""ZonedDateTime not serialized as expected\"",\n+                bean.sqlDate.getTime(), json.get(\""sqlDate\"").longValue(), 0);\n+        Assert.assertEquals(\""ZonedDateTime not serialized as expected\"",\n+                bean.date.getTime(), json.get(\""date\"").longValue(), 0);\n+        Assert.assertEquals(10.0, json.get(\""duration\"").doubleValue(), 0);\n+    }\n+\n+    private static Element createPropertyAssertElement(Object value) {\n+        Element element = ElementFactory.createDiv();\n+\n+        if (value instanceof Number && !(value instanceof Double)) {\n+            throw new IllegalArgumentException(\n+                    \""Double is the only accepted numeric type\"");\n+        }\n+\n+        if (value instanceof BaseJsonNode) {\n+            element.setPropertyJson(\""property\"", (BaseJsonNode) value);\n+        } else if (value instanceof Serializable) {\n+            BasicElementStateProvider.get().setProperty(element.getNode(),\n+                    \""property\"", (Serializable) value, true);\n+        } else if (value == null) {\n+            element.setProperty(\""property\"", null);\n+        } else {\n+            throw new IllegalArgumentException(\n+                    \""Invalid value type: \"" + value.getClass());\n+        }\n+\n+        return element;\n+    }\n+\n+    @Test\n+    public void testGetTextContent() {\n+        Element child = new Element(\""child\"");\n+        child.appendChild(Element.createText(\""bar\""));\n+\n+        Element element = ElementFactory.createDiv();\n+\n+        element.appendChild(Element.createText(\""foo\""));\n+        element.appendChild(child);\n+\n+        Assert.assertEquals(\""foobar\"", element.getTextRecursively());\n+    }\n+\n+    @Test\n+    public void testSetTextContent() {\n+        Element element = ElementFactory.createDiv();\n+        element.setText(\""foo\"");\n+\n+        Assert.assertEquals(\""foo\"", element.getTextRecursively());\n+        Assert.assertEquals(1, element.getChildCount());\n+        Assert.assertTrue(element.getChild(0).isTextNode());\n+    }\n+\n+    @Test\n+    public void testSetTextContentRemovesOldContent() {\n+        Element child = new Element(\""child\"");\n+        Element element = ElementFactory.createDiv();\n+        element.appendChild(child);\n+\n+        element.setText(\""foo\"");\n+\n+        Assert.assertNull(child.getParent());\n+        Assert.assertEquals(\""foo\"", element.getTextRecursively());\n+    }\n+\n+    @Test\n+    public void testSetTextReplacesOldTextNode() {\n+        Element element = ElementFactory.createDiv();\n+        Element text = Element.createText(\""foo\"");\n+        element.appendChild(text);\n+\n+        element.setText(\""bar\"");\n+\n+        Assert.assertEquals(element, text.getParent());\n+        Assert.assertEquals(\""bar\"", text.getTextRecursively());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testSetTextContentPropertyThrows() {\n+        Element element = new Element(\""element\"");\n+        element.setProperty(\""textContent\"", \""foo\"");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setOuterHtmlProperty_throws() {\n+        Element element = new Element(\""element\"");\n+        element.setProperty(\""outerHTML\"", \""<br>\"");\n+    }\n+\n+    @Test\n+    public void setInnerHtmlProeprty_setValueAndRemoveAllChildren() {\n+        Element element = new Element(\""element\"");\n+        element.appendChild(ElementFactory.createAnchor(),\n+                ElementFactory.createDiv());\n+        element.setProperty(\""innerHTML\"", \""<br>\"");\n+\n+        Assert.assertEquals(0, element.getChildCount());\n+        Assert.assertEquals(\""<br>\"", element.getProperty(\""innerHTML\""));\n+    }\n+\n+    @Test\n+    public void testGetTextContentProperty() {\n+        Element element = ElementFactory.createDiv();\n+        element.setText(\""foo\"");\n+\n+        Assert.assertFalse(element.hasProperty(\""textContent\""));\n+        Assert.assertNull(element.getProperty(\""textContent\""));\n+    }\n+\n+    @Test\n+    // Because that's how it works in browsers\n+    public void clearTextContentRemovesChild() {\n+        Element element = ElementFactory.createDiv();\n+        element.setText(\""foo\"");\n+\n+        Assert.assertEquals(1, element.getChildCount());\n+\n+        element.setText(\""\"");\n+\n+        Assert.assertEquals(0, element.getChildCount());\n+    }\n+\n+    @Test\n+    public void newElementClasses() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Assert.assertFalse(element.hasAttribute(\""class\""));\n+        Assert.assertEquals(Collections.emptySet(), element.getClassList());\n+    }\n+\n+    @Test\n+    public void addElementClasses() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.getClassList().add(\""foo\"");\n+\n+        Assert.assertEquals(Collections.singleton(\""foo\""),\n+                element.getClassList());\n+        Assert.assertTrue(element.hasAttribute(\""class\""));\n+\n+        Assert.assertEquals(Collections.singleton(\""class\""),\n+                element.getAttributeNames().collect(Collectors.toSet()));\n+        Assert.assertTrue(element.hasAttribute(\""class\""));\n+        Assert.assertEquals(\""foo\"", element.getAttribute(\""class\""));\n+\n+        element.getClassList().add(\""bar\"");\n+\n+        Assert.assertEquals(\""foo bar\"", element.getAttribute(\""class\""));\n+    }\n+\n+    @Test\n+    public void testSetClassAttribute() {\n+        Element element = ElementFactory.createDiv();\n+\n+        // Get instance right away to see that changes are live\n+        Set<String> classList = element.getClassList();\n+\n+        element.setAttribute(\""class\"", \""       foo bar \"");\n+\n+        Assert.assertEquals(2, classList.size());\n+        Assert.assertTrue(classList.contains(\""foo\""));\n+        Assert.assertTrue(classList.contains(\""bar\""));\n+\n+        Assert.assertNull(\""class should not be stored as a regular attribute\"",\n+                element.getNode().getFeature(ElementAttributeMap.class)\n+                        .get(\""class\""));\n+    }\n+\n+    @Test\n+    public void testSetEmptyClassAttribute() {\n+        Element element = new Element(Tag.DIV);\n+\n+        // Get instance right away to see that changes are live\n+        Set<String> classList = element.getClassList();\n+\n+        element.setAttribute(\""class\"", \""\"");\n+\n+        Assert.assertEquals(0, classList.size());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testAddEmptyClassname() {\n+        Element element = new Element(Tag.DIV);\n+\n+        // Get instance right away to see that changes are live\n+        Set<String> classList = element.getClassList();\n+\n+        classList.add(\""\"");\n+    }\n+\n+    @Test\n+    public void testRemoveClassName() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.setAttribute(\""class\"", \""foo bar\"");\n+\n+        element.getClassList().remove(\""foo\"");\n+\n+        Assert.assertEquals(\""bar\"", element.getAttribute(\""class\""));\n+\n+        element.getClassList().remove(\""bar\"");\n+\n+        Assert.assertNull(element.getAttribute(\""class\""));\n+        Assert.assertFalse(element.hasAttribute(\""class\""));\n+\n+        Assert.assertEquals(0, element.getAttributeNames().count());\n+    }\n+\n+    @Test\n+    public void testRemoveClassAttribute() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Set<String> classList = element.getClassList();\n+\n+        classList.add(\""foo\"");\n+\n+        element.removeAttribute(\""class\"");\n+\n+        Assert.assertEquals(Collections.emptySet(), classList);\n+    }\n+\n+    @Test\n+    public void addExistingClass_noop() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.setAttribute(\""class\"", \""foo\"");\n+\n+        element.getClassList().add(\""foo\"");\n+\n+        Assert.assertEquals(Collections.singleton(\""foo\""),\n+                element.getClassList());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testAddClassWithSpaces_throws() {\n+        ElementFactory.createDiv().getClassList().add(\""foo bar\"");\n+    }\n+\n+    @Test\n+    public void testRemoveClassWithSpaces() {\n+        ClassList cl = ElementFactory.createDiv().getClassList();\n+        cl.add(\""foo\"");\n+        cl.add(\""bar\"");\n+        cl.remove(\""foo bar\"");\n+        Assert.assertEquals(2, cl.size());\n+    }\n+\n+    @Test\n+    public void testContainsClassWithSpaces() {\n+        ClassList cl = ElementFactory.createDiv().getClassList();\n+        cl.add(\""foo\"");\n+        cl.add(\""bar\"");\n+\n+        Assert.assertFalse(cl.contains(\""foo bar\""));\n+    }\n+\n+    @Test\n+    public void classListSetAdd() {\n+        Element e = new Element(Tag.DIV);\n+        Assert.assertTrue(e.getClassList().set(\""foo\"", true));\n+        Assert.assertEquals(\""foo\"", e.getAttribute(\""class\""));\n+        Assert.assertFalse(e.getClassList().set(\""foo\"", true));\n+        Assert.assertEquals(\""foo\"", e.getAttribute(\""class\""));\n+    }\n+\n+    @Test\n+    public void classListSetRemove() {\n+        Element e = new Element(Tag.DIV);\n+        e.setAttribute(\""class\"", \""foo bar\"");\n+        Assert.assertTrue(e.getClassList().set(\""foo\"", false));\n+        Assert.assertEquals(\""bar\"", e.getAttribute(\""class\""));\n+        Assert.assertFalse(e.getClassList().set(\""foo\"", false));\n+        Assert.assertEquals(\""bar\"", e.getAttribute(\""class\""));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testClassListProperty_throws() {\n+        ElementFactory.createDiv().setProperty(\""classList\"", \""foo\"");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testClassNameProperty_throws() {\n+        ElementFactory.createDiv().setProperty(\""className\"", \""foo\"");\n+    }\n+\n+    public void setStyle() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.set(\""foo\"", \""bar\"");\n+        Assert.assertEquals(\""bar\"", s.get(\""foo\""));\n+    }\n+\n+    @Test\n+    public void getUnsetStyle() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        Assert.assertNull(s.get(\""foo\""));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void getNullStyle() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.get(null);\n+    }\n+\n+    @Test\n+    public void replaceStyle() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.set(\""foo\"", \""bar\"");\n+        s.set(\""foo\"", \""baz\"");\n+        Assert.assertEquals(\""baz\"", s.get(\""foo\""));\n+    }\n+\n+    @Test\n+    public void removeSingleStyle() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.set(\""foo\"", \""bar\"");\n+        s.remove(\""foo\"");\n+        Assert.assertEquals(null, s.get(\""foo\""));\n+    }\n+\n+    @Test\n+    public void emptyStyleAsAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        Assert.assertFalse(e.hasAttribute(\""style\""));\n+        Assert.assertNull(e.getAttribute(\""style\""));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void semicolonInStyle() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.set(\""border\"", \""1 px solid black;\"");\n+    }\n+\n+    @Test\n+    public void getSingleStyleAsAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.setBorder(\""1px solid black\"");\n+        Assert.assertTrue(e.hasAttribute(\""style\""));\n+        Assert.assertEquals(\""border:1px solid black\"", e.getAttribute(\""style\""));\n+    }\n+\n+    @Test\n+    public void getMultipleStylesAsAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        Style s = e.getStyle();\n+        s.set(\""border\"", \""1px solid black\"");\n+        s.setMargin(\""1em\"");\n+        Assert.assertTrue(e.hasAttribute(\""style\""));\n+        assertEqualsOne(\n+                new String[] { \""border:1px solid black;margin:1em\"",\n+                        \""margin:1em;border:1px solid black\"" },\n+                e.getAttribute(\""style\""));\n+    }\n+\n+    @Test\n+    public void setSingleStyleAsAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        String style = \""width:12em\"";\n+        e.setAttribute(\""style\"", style);\n+        Assert.assertEquals(style, e.getAttribute(\""style\""));\n+\n+    }\n+\n+    @Test\n+    public void setStyleAttributeMultipleTimes() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\""style\"", \""width:12em\"");\n+        e.setAttribute(\""style\"", \""height:12em\"");\n+        Assert.assertEquals(\""height:12em\"", e.getAttribute(\""style\""));\n+\n+    }\n+\n+    @Test\n+    public void setMultipleStylesAsAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        String style = \""width:12em;height:2em\"";\n+        e.setAttribute(\""style\"", style);\n+        Assert.assertEquals(style, e.getAttribute(\""style\""));\n+\n+    }\n+\n+    @Test\n+    public void setComplexStylesAsAttribute() {\n+        testStyleAttribute(\n+                \""background:rgb(0,255,0) url(http://foo.bar/smiley.gif) no-repeat fixed center\"");\n+        testStyleAttribute(\""content:\\\""content: bar\\\""\"");\n+        testStyleAttribute(\""width:12px;content:\\\""content: bar\\\"";height:12px\"");\n+        testStyleAttribute(\""width:calc(100% - 80px)\"");\n+        testStyleAttribute(\""width:var(--widthB)\"");\n+        testStyleAttribute(\""color:var(--mainColor)\"");\n+        // Reduced calc does not work (http://cssnext.io/features/#reduced-calc)\n+        // testStyleAttribute(\""font-size:calc(var(--fontSize) * 2)\"");\n+    }\n+\n+    private void testStyleAttribute(String style) {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\""style\"", style);\n+        Assert.assertEquals(style, e.getAttribute(\""style\""));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setInvalidStyleAsAttribute() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\""style\"", \""width:\"");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setInvalidStyleAsAttribute2() {\n+        Element e = ElementFactory.createDiv();\n+        e.setAttribute(\""style\"", \""width\"");\n+    }\n+\n+    @Test\n+    public void setVendorSpecificStylesProperty() {\n+        Element e = ElementFactory.createDiv();\n+        String style = \""-moz-user-input:inherit\"";\n+        e.setAttribute(\""style\"", style);\n+        Assert.assertEquals(\""inherit\"", e.getStyle().get(\""mozUserInput\""));\n+        Assert.assertEquals(style, e.getAttribute(\""style\""));\n+    }\n+\n+    @Test\n+    public void setVendorSpecificStylesValue() {\n+        Element e = ElementFactory.createDiv();\n+        String style = \""display:-moz-box\"";\n+        e.setAttribute(\""style\"", style);\n+        Assert.assertEquals(\""-moz-box\"", e.getStyle().get(\""display\""));\n+        Assert.assertEquals(style, e.getAttribute(\""style\""));\n+\n+    }\n+\n+    @Test\n+    public void setStyleAttributeTrailingSemicolon() {\n+        Element e = ElementFactory.createDiv();\n+        String style = \""width:12em\"";\n+        e.setAttribute(\""style\"", style + \"";\"");\n+        Assert.assertEquals(style, e.getAttribute(\""style\""));\n+    }\n+\n+    private void assertEqualsOne(String[] expected, String actual) {\n+        for (String string : expected) {\n+            if (string.equals(actual)) {\n+                return;\n+            }\n+        }\n+        String expectedString = Arrays.stream(expected)\n+                .collect(Collectors.joining(\""> or <\""));\n+        Assert.fail(\n+                \""expected: <\"" + expectedString + \""> but was <\"" + actual + \"">\"");\n+\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setEmptyStyleName() {\n+        Element e = ElementFactory.createDiv();\n+        e.getStyle().set(\""\"", \""foo\"");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setStyleNameExtraWhitespace() {\n+        Element e = ElementFactory.createDiv();\n+        e.getStyle().set(\""   color\"", \""red\"");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setStyleNameColon() {\n+        Element e = ElementFactory.createDiv();\n+        e.getStyle().set(\""color:\"", \""red\"");\n+    }\n+\n+    @Test\n+    public void setStyleValueExtraWhitespace() {\n+        Element e = ElementFactory.createDiv();\n+        e.getStyle().setColor(\""red   \"");\n+        Assert.assertEquals(\""color:red\"", e.getAttribute(\""style\""));\n+        Assert.assertEquals(\""red\"", e.getStyle().get(\""color\""));\n+    }\n+\n+    @Test\n+    public void removeStyles() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.getStyle().setZIndex(12);\n+        element.getStyle().set(\""background\"", \""blue\"");\n+\n+        element.getStyle().remove(\""background\"");\n+\n+        Assert.assertEquals(\""z-index:12\"", element.getAttribute(\""style\""));\n+\n+        element.getStyle().setZIndex(null);\n+\n+        Assert.assertNull(element.getAttribute(\""style\""));\n+        Assert.assertFalse(element.hasAttribute(\""style\""));\n+\n+        Assert.assertEquals(0, element.getStyle().getNames().count());\n+    }\n+\n+    @Test\n+    public void removeStyleAttribute() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+\n+        style.setBorder(\""1px solid green\"");\n+\n+        element.removeAttribute(\""style\"");\n+\n+        Assert.assertEquals(0, style.getNames().count());\n+    }\n+\n+    @Test\n+    public void validStyleWithSemicolon() {\n+        Element element = ElementFactory.createDiv();\n+        String validStyle = \""background: url('foo;bar')\"";\n+        Style style = element.getStyle();\n+        style.setBackground(validStyle);\n+        Assert.assertEquals(validStyle, style.get(\""background\""));\n+    }\n+\n+    @Test\n+    public void dashSeparatedSetStyle() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.set(\""border-color\"", \""blue\"");\n+        Assert.assertEquals(\""blue\"", style.get(\""border-color\""));\n+    }\n+\n+    @Test\n+    public void dashSeparatedGetStyle() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.set(\""borderColor\"", \""blue\"");\n+        style.set(\""border-foo\"", \""bar\"");\n+        Assert.assertEquals(\""blue\"", style.get(\""border-color\""));\n+        Assert.assertEquals(\""bar\"", style.get(\""border-foo\""));\n+    }\n+\n+    @Test\n+    public void dashSeparatedHasStyle() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.set(\""borderColor\"", \""blue\"");\n+        style.set(\""border-foo\"", \""bar\"");\n+        Assert.assertTrue(style.has(\""border-color\""));\n+        Assert.assertTrue(style.has(\""border-foo\""));\n+    }\n+\n+    @Test\n+    public void dashSeparatedRemoveStyle() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.set(\""borderColor\"", \""blue\"");\n+        style.set(\""border-foo\"", \""bar\"");\n+        style.remove(\""border-color\"");\n+        style.remove(\""border-foo\"");\n+\n+        Assert.assertFalse(style.has(\""border-color\""));\n+        Assert.assertFalse(style.has(\""border-foo\""));\n+    }\n+\n+    @Test\n+    public void styleGetNamesDashAndCamelCase() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.set(\""borderColor\"", \""blue\"");\n+        style.set(\""border-foo\"", \""bar\"");\n+\n+        List<String> styles = style.getNames().collect(Collectors.toList());\n+        Assert.assertEquals(2, styles.size());\n+        Assert.assertTrue(styles.contains(\""border-color\""));\n+        Assert.assertTrue(styles.contains(\""border-foo\""));\n+    }\n+\n+    @Test\n+    public void nullStyleValue() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.set(\""borderColor\"", \""blue\"");\n+        style.set(\""borderColor\"", null);\n+        List<String> styles = style.getNames().collect(Collectors.toList());\n+        Assert.assertFalse(styles.contains(\""borderColor\""));\n+    }\n+\n+    @Test\n+    public void sendPropertyInCorrectFormatToClient() {\n+        assertClientStyleKey(\""--some-variable\"", \""--some-variable\"");\n+        assertClientStyleKey(\""-webkit-border\"", \""-webkit-border\"");\n+        assertClientStyleKey(\""background-color\"", \""background-color\"");\n+        assertClientStyleKey(\""color\"", \""color\"");\n+\n+        assertClientStyleKey(\""-webkit-border\"", \""webkitBorder\"");\n+        assertClientStyleKey(\""background-color\"", \""backgroundColor\"");\n+    }\n+\n+    private void assertClientStyleKey(String sentToClient,\n+            String setUsingStyleApi) {\n+        Element element = ElementFactory.createDiv();\n+        StateNode stateNode = element.getNode();\n+        ElementStylePropertyMap map = stateNode\n+                .getFeature(ElementStylePropertyMap.class);\n+\n+        Style style = element.getStyle();\n+        style.set(setUsingStyleApi, \""foo\"");\n+        Assert.assertEquals(\""foo\"", style.get(setUsingStyleApi));\n+        Assert.assertEquals(sentToClient, map.getPropertyNames().toArray()[0]);\n+        Assert.assertEquals(\""foo\"", map.getProperty(sentToClient));\n+\n+    }\n+\n+    @Test\n+    public void customPropertyStyle() {\n+        Element element = ElementFactory.createDiv();\n+        Style style = element.getStyle();\n+        style.set(\""--some-variable\"", \""foo\"");\n+        Assert.assertEquals(\""foo\"", style.get(\""--some-variable\""));\n+    }\n+\n+    @Test\n+    public void useCustomPropertyStyle() {\n+        Element element = ElementFactory.createDiv();\n+\n+        Style style = element.getStyle();\n+        style.setColor(\""var(--some-var)\"");\n+        Assert.assertEquals(\""var(--some-var)\"", style.get(\""color\""));\n+    }\n+\n+    // TODO: enable when DomEvent uses jackson\n+    // @Test\n+    // public void listenersFiredInRegisteredOrder() {\n+    // Element element = ElementFactory.createDiv();\n+    // List<Integer> eventOrder = new ArrayList<>();\n+    //\n+    // for (int i = 0; i < 10; i++) {\n+    // final int j = i;\n+    // element.addEventListener(\""click\"", e -> {\n+    // eventOrder.add(j);\n+    // });\n+    // }\n+    // fireEvent(element, \""click\"");\n+    // Assert.assertArrayEquals(new Object[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 },\n+    // eventOrder.toArray());\n+    // }\n+    //\n+    // private void fireEvent(Element element, String eventType) {\n+    // element.getNode().getFeature(ElementListenerMap.class).fireEvent(\n+    // new DomEvent(element, eventType, JacksonUtils.createObjectNode()));\n+    //\n+    // }\n+    //\n+    // @Test\n+    // public void eventsWhenListenerIsRegisteredManyTimes() {\n+    // AtomicInteger invocations = new AtomicInteger(0);\n+    //\n+    // DomEventListener listener = e -> {\n+    // invocations.incrementAndGet();\n+    // };\n+    // Element element = ElementFactory.createDiv();\n+    // element.addEventListener(\""click\"", listener);\n+    // element.addEventListener(\""click\"", listener);\n+    //\n+    // fireEvent(element, \""click\"");\n+    //\n+    // Assert.assertEquals(2, invocations.get());\n+    // }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void addAsOwnChild() {\n+        Element element = ElementFactory.createDiv();\n+        element.appendChild(element);\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void addAsChildOfChild() {\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+        parent.appendChild(child);\n+\n+        child.appendChild(parent);\n+    }\n+\n+    @Override\n+    protected void checkIsNotChild(Node<?> parent, Element child) {\n+        Assert.assertNotEquals(child.getParent(), parent);\n+\n+        super.checkIsNotChild(parent, child);\n+    }\n+\n+    @Test\n+    public void testGetOwnTextContent() {\n+        Element element = ElementFactory.createDiv();\n+        element.setText(\""foo\"");\n+        element.appendChild(ElementFactory.createDiv()\n+                .appendChild(ElementFactory.createSpan(\""span contents\"")));\n+        element.appendChild(ElementFactory.createStrong(\""strong contents\""));\n+        element.appendChild(Element.createText(\""Another text node\""));\n+\n+        Assert.assertEquals(\""fooAnother text node\"", element.getText());\n+        Assert.assertEquals(\""foospan contentsstrong contentsAnother text node\"",\n+                element.getTextRecursively());\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_elementIsNotAttached_elementHasAttribute() {\n+        UI.setCurrent(createUI());\n+        Element element = ElementFactory.createDiv();\n+        String resName = \""resource\"";\n+        StreamResource resource = createEmptyResource(resName);\n+        element.setAttribute(\""foo\"", resource);\n+\n+        Assert.assertTrue(element.hasAttribute(\""foo\""));\n+\n+        Assert.assertTrue(element.getAttribute(\""foo\"").endsWith(resName));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_elementIsNotAttachedAndHasAttribute_elementHasAttribute() {\n+        UI.setCurrent(createUI());\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\""foo\"", \""bar\"");\n+\n+        String resName = \""resource\"";\n+        StreamResource resource = createEmptyResource(resName);\n+        element.setAttribute(\""foo\"", resource);\n+\n+        Assert.assertTrue(element.hasAttribute(\""foo\""));\n+\n+        Assert.assertTrue(element.getAttribute(\""foo\"").endsWith(resName));\n+    }\n+\n+    @Test\n+    public void setResourceAttributeSeveralTimes_elementIsNotAttached_elementHasAttribute() {\n+        UI.setCurrent(createUI());\n+        Element element = ElementFactory.createDiv();\n+        String resName = \""resource\"";\n+        StreamResource resource = createEmptyResource(resName);\n+        element.setAttribute(\""foo\"", resource);\n+\n+        Assert.assertTrue(element.hasAttribute(\""foo\""));\n+\n+        resName = \""resource1\"";\n+        resource = createEmptyResource(resName);\n+        element.setAttribute(\""foo\"", resource);\n+\n+        Assert.assertTrue(element.hasAttribute(\""foo\""));\n+\n+        Assert.assertTrue(element.getAttribute(\""foo\"").endsWith(resName));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setResourceAttribute_nullValue() {\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\""foo\"", (StreamResource) null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setResourceAttribute_classAttribute() {\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\""class\"", Mockito.mock(StreamResource.class));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void setResourceAttribute_nullAttribute() {\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(null, Mockito.mock(StreamResource.class));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_elementIsAttached_elementHasAttribute() {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        String resName = \""resource\"";\n+        StreamResource resource = createEmptyResource(resName);\n+        ui.getElement().setAttribute(\""foo\"", resource);\n+\n+        Assert.assertTrue(ui.getElement().hasAttribute(\""foo\""));\n+        Assert.assertTrue(\n+                ui.getElement().getAttribute(\""foo\"").endsWith(resName));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_elementIsAttached_setAnotherResource()\n+            throws URISyntaxException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        StreamResource resource = createEmptyResource(\""resource1\"");\n+        ui.getElement().setAttribute(\""foo\"", resource);\n+\n+        String uri = ui.getElement().getAttribute(\""foo\"");\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertTrue(res.isPresent());\n+\n+        String resName = \""resource2\"";\n+        ui.getElement().setAttribute(\""foo\"", createEmptyResource(resName));\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertFalse(res.isPresent());\n+\n+        Assert.assertTrue(ui.getElement().hasAttribute(\""foo\""));\n+        Assert.assertTrue(\n+                ui.getElement().getAttribute(\""foo\"").endsWith(resName));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_elementIsAttached_setRawAttribute()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        StreamResource resource = createEmptyResource(\""resource\"");\n+        ui.getElement().setAttribute(\""foo\"", resource);\n+\n+        String uri = ui.getElement().getAttribute(\""foo\"");\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertTrue(res.isPresent());\n+        res = null;\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        ui.getElement().setAttribute(\""foo\"", \""bar\"");\n+\n+        TestUtil.isGarbageCollected(ref);\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+\n+        Assert.assertFalse(res.isPresent());\n+        Assert.assertTrue(ui.getElement().hasAttribute(\""foo\""));\n+        Assert.assertTrue(ui.getElement().getAttribute(\""foo\"").equals(\""bar\""));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_elementIsAttached_removeAttribute()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        StreamResource resource = createEmptyResource(\""resource\"");\n+        ui.getElement().setAttribute(\""foo\"", resource);\n+\n+        String uri = ui.getElement().getAttribute(\""foo\"");\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertTrue(res.isPresent());\n+        res = null;\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        ui.getElement().removeAttribute(\""foo\"");\n+        TestUtil.isGarbageCollected(ref);\n+\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertFalse(res.isPresent());\n+        Assert.assertFalse(ui.getElement().hasAttribute(\""foo\""));\n+        Assert.assertNull(ui.getElement().getAttribute(\""foo\""));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_resourceIsRegistered()\n+            throws URISyntaxException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\""resource\"");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\""foo\"", resource);\n+\n+        ui.getElement().appendChild(element);\n+\n+        Assert.assertTrue(element.hasAttribute(\""foo\""));\n+\n+        String uri = element.getAttribute(\""foo\"");\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertTrue(res.isPresent());\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_setAnotherResource()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\""resource1\"");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\""foo\"", resource);\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        String resName = \""resource2\"";\n+        element.setAttribute(\""foo\"", createEmptyResource(resName));\n+\n+        ui.getElement().appendChild(element);\n+\n+        Assert.assertTrue(element.hasAttribute(\""foo\""));\n+\n+        String uri = element.getAttribute(\""foo\"");\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertTrue(res.isPresent());\n+        Assert.assertTrue(uri.endsWith(resName));\n+\n+        // allow GC to collect element and all its (detach) listeners\n+        element = null;\n+\n+        TestUtil.isGarbageCollected(ref);\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_setRawAttribute()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\""resource\"");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\""foo\"", resource);\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        element.setAttribute(\""foo\"", \""bar\"");\n+\n+        TestUtil.isGarbageCollected(ref);\n+\n+        ui.getElement().appendChild(element);\n+\n+        Assert.assertTrue(element.hasAttribute(\""foo\""));\n+        Assert.assertEquals(\""bar\"", element.getAttribute(\""foo\""));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_removeAttribute()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\""resource\"");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\""foo\"", resource);\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        element.removeAttribute(\""foo\"");\n+\n+        ui.getElement().appendChild(element);\n+\n+        TestUtil.isGarbageCollected(ref);\n+\n+        Assert.assertFalse(element.hasAttribute(\""foo\""));\n+\n+        Assert.assertNull(element.getAttribute(\""foo\""));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_setAnotherResourceAfterAttaching()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\""resource1\"");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\""foo\"", resource);\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        ui.getElement().appendChild(element);\n+\n+        String resName = \""resource2\"";\n+        element.setAttribute(\""foo\"", createEmptyResource(resName));\n+\n+        Assert.assertTrue(element.hasAttribute(\""foo\""));\n+\n+        TestUtil.isGarbageCollected(ref);\n+\n+        Assert.assertNull(ref.get());\n+\n+        String uri = element.getAttribute(\""foo\"");\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, new URI(uri));\n+        Assert.assertTrue(res.isPresent());\n+        Assert.assertTrue(uri.endsWith(resName));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_setRawAttributeAfterAttaching()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\""resource\"");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\""foo\"", resource);\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        ui.getElement().appendChild(element);\n+\n+        element.setAttribute(\""foo\"", \""bar\"");\n+\n+        TestUtil.isGarbageCollected(ref);\n+\n+        Assert.assertNull(ref.get());\n+\n+        Assert.assertTrue(element.hasAttribute(\""foo\""));\n+\n+        Assert.assertEquals(\""bar\"", element.getAttribute(\""foo\""));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachElement_removeAttributeAfterAttaching()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+\n+        StreamResource resource = createEmptyResource(\""resource\"");\n+        Element element = ElementFactory.createDiv();\n+        element.setAttribute(\""foo\"", resource);\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        ui.getElement().appendChild(element);\n+\n+        element.removeAttribute(\""foo\"");\n+\n+        TestUtil.isGarbageCollected(ref);\n+\n+        Assert.assertNull(ref.get());\n+\n+        Assert.assertFalse(element.hasAttribute(\""foo\""));\n+\n+        Assert.assertNull(element.getAttribute(\""foo\""));\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_detachElement_resourceIsUnregistered()\n+            throws URISyntaxException, InterruptedException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        Element element = ElementFactory.createDiv();\n+        ui.getElement().appendChild(element);\n+\n+        String resName = \""resource\"";\n+        StreamResource resource = createEmptyResource(resName);\n+        element.setAttribute(\""foo\"", resource);\n+        String attribute = element.getAttribute(\""foo\"");\n+\n+        WeakReference<StreamResource> ref = new WeakReference<>(resource);\n+        resource = null;\n+\n+        URI uri = new URI(attribute);\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertTrue(res.isPresent());\n+\n+        ui.getElement().removeAllChildren();\n+\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertFalse(res.isPresent());\n+\n+        Assert.assertTrue(element.hasAttribute(\""foo\""));\n+        Assert.assertNotNull(element.getAttribute(\""foo\""));\n+        Assert.assertTrue(element.getAttribute(\""foo\"").endsWith(resName));\n+\n+        element.setAttribute(\""foo\"", \""bar\"");\n+        Assert.assertTrue(element.hasAttribute(\""foo\""));\n+        Assert.assertEquals(\""bar\"", element.getAttribute(\""foo\""));\n+\n+        TestUtil.isGarbageCollected(ref);\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_detachAndReattachElement_resourceReregistered()\n+            throws URISyntaxException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        Element element = ElementFactory.createDiv();\n+        ui.getElement().appendChild(element);\n+\n+        String resName = \""resource\"";\n+        StreamResource resource = createEmptyResource(resName);\n+        element.setAttribute(\""foo\"", resource);\n+        String attribute = element.getAttribute(\""foo\"");\n+\n+        URI uri = new URI(attribute);\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertTrue(res.isPresent());\n+\n+        ui.getElement().removeAllChildren();\n+\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertFalse(res.isPresent());\n+\n+        ui.getElement().appendChild(element);\n+\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertTrue(res.isPresent());\n+    }\n+\n+    @Test\n+    public void setResourceAttribute_attachAndDetachAndReattachElement_resourceReregistered()\n+            throws URISyntaxException {\n+        UI ui = createUI();\n+        UI.setCurrent(ui);\n+        Element element = ElementFactory.createDiv();\n+\n+        String resName = \""resource\"";\n+        StreamResource resource = createEmptyResource(resName);\n+        element.setAttribute(\""foo\"", resource);\n+        String attribute = element.getAttribute(\""foo\"");\n+\n+        ui.getElement().appendChild(element);\n+\n+        URI uri = new URI(attribute);\n+        Optional<StreamResource> res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertTrue(res.isPresent());\n+\n+        ui.getElement().removeAllChildren();\n+\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertFalse(res.isPresent());\n+\n+        ui.getElement().appendChild(element);\n+\n+        res = ui.getSession().getResourceRegistry()\n+                .getResource(StreamResource.class, uri);\n+        Assert.assertTrue(res.isPresent());\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void setResourceAttribute_elementIsText_operationIsNotSupported() {\n+        Element.createText(\""\"").setAttribute(\""foo\"",\n+                Mockito.mock(StreamResource.class));\n+    }\n+\n+    @Test\n+    public void testAttachListener_parentAttach_childListenersTriggered() {\n+        Element body = new UI().getElement();\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+        Element grandChild = ElementFactory.createDiv();\n+\n+        AtomicInteger childTriggered = new AtomicInteger();\n+        AtomicInteger grandChildTriggered = new AtomicInteger();\n+\n+        Registration registrationHandle = child.addAttachListener(event -> {\n+            childTriggered.addAndGet(1);\n+        });\n+        child.addAttachListener(event -> {\n+            Assert.assertEquals(child, event.getSource());\n+        });\n+        grandChild.addAttachListener(event -> {\n+            grandChildTriggered.addAndGet(1);\n+        });\n+        grandChild.addAttachListener(event -> {\n+            Assert.assertEquals(grandChild, event.getSource());\n+        });\n+\n+        parent.appendChild(child);\n+        child.appendChild(grandChild);\n+\n+        Assert.assertEquals(childTriggered.get(), 0);\n+        Assert.assertEquals(grandChildTriggered.get(), 0);\n+\n+        body.appendChild(parent);\n+\n+        Assert.assertEquals(childTriggered.get(), 1);\n+        Assert.assertEquals(grandChildTriggered.get(), 1);\n+\n+        body.removeAllChildren();\n+        parent.removeAllChildren();\n+\n+        body.appendChild(parent);\n+        parent.appendChild(child);\n+\n+        Assert.assertEquals(childTriggered.get(), 2);\n+        Assert.assertEquals(grandChildTriggered.get(), 2);\n+\n+        registrationHandle.remove();\n+\n+        body.removeAllChildren();\n+        body.appendChild(child);\n+\n+        Assert.assertEquals(childTriggered.get(), 2);\n+        Assert.assertEquals(grandChildTriggered.get(), 3);\n+    }\n+\n+    @Test\n+    public void testDetachListener_parentDetach_childListenersTriggered() {\n+        Element body = new UI().getElement();\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+        Element grandChild = ElementFactory.createDiv();\n+\n+        AtomicInteger triggered = new AtomicInteger();\n+\n+        Registration registrationHandle = child.addDetachListener(event -> {\n+            triggered.addAndGet(1);\n+            Assert.assertEquals(child, event.getSource());\n+        });\n+\n+        grandChild.addDetachListener(event -> {\n+            triggered.addAndGet(1);\n+            Assert.assertEquals(grandChild, event.getSource());\n+        });\n+\n+        child.appendChild(grandChild);\n+        parent.appendChild(child);\n+        body.appendChild(parent);\n+\n+        Assert.assertEquals(triggered.get(), 0);\n+\n+        body.removeAllChildren();\n+        Assert.assertEquals(triggered.get(), 2);\n+\n+        body.appendChild(parent);\n+        body.removeAllChildren();\n+\n+        Assert.assertEquals(triggered.get(), 4);\n+\n+        body.appendChild(parent);\n+        registrationHandle.remove();\n+\n+        body.removeAllChildren();\n+\n+        Assert.assertEquals(triggered.get(), 5);\n+    }\n+\n+    @Test\n+    public void testAttachListener_eventOrder_childFirst() {\n+        Element body = new UI().getElement();\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+        parent.appendChild(child);\n+\n+        AtomicBoolean parentAttached = new AtomicBoolean();\n+        AtomicBoolean childAttached = new AtomicBoolean();\n+\n+        child.addAttachListener(event -> {\n+            childAttached.set(true);\n+            Assert.assertFalse(parentAttached.get());\n+        });\n+        parent.addAttachListener(event -> {\n+            parentAttached.set(true);\n+            Assert.assertTrue(childAttached.get());\n+        });\n+\n+        body.appendChild(parent);\n+\n+        Assert.assertTrue(parentAttached.get());\n+        Assert.assertTrue(childAttached.get());\n+    }\n+\n+    @Test\n+    public void testDetachListener_eventOrder_childFirst() {\n+        Element body = new UI().getElement();\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+        parent.appendChild(child);\n+        body.appendChild(parent);\n+\n+        AtomicBoolean parentDetached = new AtomicBoolean();\n+        AtomicBoolean childDetached = new AtomicBoolean();\n+\n+        child.addDetachListener(event -> {\n+            childDetached.set(true);\n+            Assert.assertFalse(parentDetached.get());\n+        });\n+        parent.addDetachListener(event -> {\n+            parentDetached.set(true);\n+            Assert.assertTrue(childDetached.get());\n+        });\n+\n+        body.removeAllChildren();\n+\n+        Assert.assertTrue(parentDetached.get());\n+        Assert.assertTrue(childDetached.get());\n+    }\n+\n+    @Test\n+    public void testAttachDetach_elementMoved_bothEventsTriggered() {\n+        Element body = new UI().getElement();\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+\n+        parent.appendChild(child);\n+        body.appendChild(parent);\n+\n+        AtomicBoolean attached = new AtomicBoolean();\n+        AtomicBoolean detached = new AtomicBoolean();\n+\n+        child.addAttachListener(event -> {\n+            attached.set(true);\n+            Assert.assertTrue(detached.get());\n+        });\n+        child.addDetachListener(event -> {\n+            detached.set(true);\n+            Assert.assertFalse(attached.get());\n+        });\n+\n+        body.appendChild(child);\n+\n+        Assert.assertTrue(attached.get());\n+        Assert.assertTrue(detached.get());\n+    }\n+\n+    @Test\n+    public void testAttachEvent_stateTreeCanFound() {\n+        Element body = new UI().getElement();\n+        Element child = ElementFactory.createDiv();\n+\n+        AtomicInteger attached = new AtomicInteger();\n+\n+        child.addAttachListener(event -> {\n+            Assert.assertNotNull(event.getSource().getNode().getOwner());\n+            Assert.assertNotEquals(NullOwner.get(),\n+                    event.getSource().getNode().getOwner());\n+        });\n+        child.addAttachListener(event -> attached.incrementAndGet());\n+\n+        body.appendChild(child);\n+        Assert.assertEquals(1, attached.get());\n+    }\n+\n+    @Test\n+    public void testDetachEvent_stateTreeCanFound() {\n+        Element body = new UI().getElement();\n+        Element child = ElementFactory.createDiv();\n+        body.appendChild(child);\n+\n+        AtomicInteger detached = new AtomicInteger();\n+\n+        child.addDetachListener(event -> {\n+            Assert.assertNotNull(event.getSource().getNode().getOwner());\n+            Assert.assertNotEquals(NullOwner.get(),\n+                    event.getSource().getNode().getOwner());\n+        });\n+        child.addDetachListener(event -> detached.incrementAndGet());\n+\n+        body.removeAllChildren();\n+\n+        Assert.assertEquals(1, detached.get());\n+    }\n+\n+    @Test\n+    public void testMoveFromUiToUi_doesNotThrow() {\n+        Element body = new UI().getElement();\n+        Element child = ElementFactory.createDiv();\n+        body.appendChild(child);\n+\n+        child.removeFromTree();\n+\n+        body = new UI().getElement();\n+        body.appendChild(child);\n+        Assert.assertEquals(body, child.getParent());\n+    }\n+\n+    @Test\n+    public void testRemoveFromTree_inDetachListener_removedFromParent() {\n+        Element body = new UI().getElement();\n+        Element child = ElementFactory.createDiv();\n+        body.appendChild(child);\n+\n+        child.addDetachListener(event -> child.removeFromTree());\n+\n+        body.removeAllChildren();\n+\n+        Assert.assertEquals(null, child.getParent());\n+    }\n+\n+    @Test\n+    public void testRemoveFromTree_isVirtualChild_removedFromParent() {\n+        Element body = new UI().getElement();\n+        Element child = ElementFactory.createDiv();\n+\n+        body.getNode().getFeature(VirtualChildrenList.class)\n+                .append(child.getNode(), \""\"");\n+\n+        Assert.assertTrue(child.isVirtualChild());\n+\n+        child.removeFromTree();\n+\n+        Assert.assertFalse(child.isVirtualChild());\n+        Assert.assertEquals(0,\n+                body.getNode().getFeature(VirtualChildrenList.class).size());\n+    }\n+\n+    private StreamResource createEmptyResource(String resName) {\n+        return new StreamResource(resName,\n+                () -> new ByteArrayInputStream(new byte[0]));\n+    }\n+\n+    @SuppressWarnings(\""serial\"")\n+    private UI createUI() {\n+        VaadinSession session = new AlwaysLockedVaadinSession(\n+                new MockVaadinServletService());\n+        UI ui = new UI() {\n+            @Override\n+            public VaadinSession getSession() {\n+                return session;\n+            }\n+        };\n+        return ui;\n+    }\n+\n+    @Test\n+    public void insertAtCurrentPositionNoOp() {\n+        // Must have an UI to get attach events\n+        UI ui = new UI();\n+        Element parent = ui.getElement();\n+        Element child = ElementFactory.createDiv();\n+\n+        parent.appendChild(child);\n+\n+        child.addDetachListener(\n+                e -> Assert.fail(\""Child should not be detached\""));\n+        parent.insertChild(0, child);\n+    }\n+\n+    @Test\n+    public void textNodeTransformsNullToEmptyAndDoesNotThrowException() {\n+        Element e = Element.createText(null);\n+        Assert.assertEquals(\""\"", e.getText());\n+    }\n+\n+    @Test\n+    public void textNodeOuterHtml() {\n+        Element e = Element.createText(\""foobar\"");\n+        Assert.assertEquals(\""foobar\"", e.getOuterHTML());\n+    }\n+\n+    @Test\n+    public void singleElementOuterHtml() {\n+        Element e = ElementFactory.createAnchor();\n+        Assert.assertEquals(\""<a></a>\"", e.getOuterHTML());\n+    }\n+\n+    @Test\n+    public void elementTreeOuterHtml() {\n+        Element div = ElementFactory.createDiv();\n+        Element span = ElementFactory.createSpan();\n+        Element button = ElementFactory.createButton(\""hello\"");\n+\n+        div.appendChild(span);\n+        span.appendChild(button);\n+\n+        Assert.assertEquals(\""<div>\\n\""\n+                + \"" <span>\\n  <button>hello</button></span>\\n\"" + \""</div>\"",\n+                div.getOuterHTML());\n+    }\n+\n+    @Test\n+    public void elementAttributesOuterHtml() {\n+        Element div = ElementFactory.createDiv();\n+        div.setAttribute(\""foo\"", \""bar\"");\n+        div.getStyle().setWidth(\""20px\"");\n+        div.getClassList().add(\""cls\"");\n+        div.setAttribute(\""pin\"", \""\"");\n+\n+        Assert.assertEquals(\n+                \""<div pin foo=\\\""bar\\\"" style=\\\""width:20px\\\"" class=\\\""cls\\\""></div>\"",\n+                div.getOuterHTML());\n+    }\n+\n+    @Test\n+    public void elementAttributeSpecialCharactersOuterHtml() {\n+        Element div = ElementFactory.createDiv();\n+        div.setAttribute(\""foo\"", \""bar\\\""'&quot;\"");\n+\n+        Assert.assertEquals(\""<div foo=\\\""bar&quot;'&amp;quot;\\\""></div>\"",\n+                div.getOuterHTML());\n+    }\n+\n+    @Test\n+    public void htmlComponentOuterHtml() {\n+        Html html = new Html(\n+                \""<div style='background:green'><span><button>hello</button></span></div>\"");\n+        Assert.assertEquals(\""<div style=\\\""background:green\\\"">\\n\""\n+                + \"" <span>\\n  <button>hello</button></span>\\n\"" + \""</div>\"",\n+                html.getElement().getOuterHTML());\n+    }\n+\n+    @Test\n+    public void callFunctionBeforeAttach() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        element.callJsFunction(\""noArgsMethod\"");\n+        ui.getElement().appendChild(element);\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        assertPendingJs(ui, \""return $0.noArgsMethod()\"", element);\n+    }\n+\n+    @Test\n+    public void callFunctionAfterAttach() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        ui.getElement().appendChild(element);\n+        element.callJsFunction(\""noArgsMethod\"");\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        assertPendingJs(ui, \""return $0.noArgsMethod()\"", element);\n+    }\n+\n+    @Test\n+    public void callFunctionBeforeDetach() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        ui.getElement().appendChild(element);\n+        element.callJsFunction(\""noArgsMethod\"");\n+        ui.getElement().removeAllChildren();\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        List<PendingJavaScriptInvocation> invocations = ui.getInternals()\n+                .dumpPendingJavaScriptInvocations();\n+        Assert.assertTrue(invocations.isEmpty());\n+    }\n+\n+    @Test\n+    public void callFunctionBeforeReAttach() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        ui.getElement().appendChild(element);\n+        element.callJsFunction(\""noArgsMethod\"");\n+\n+        Element div = ElementFactory.createDiv();\n+        ui.getElement().appendChild(div);\n+        div.appendChild(element);\n+\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        assertPendingJs(ui, \""return $0.noArgsMethod()\"", element);\n+    }\n+\n+    @Test\n+    public void callFunctionOneParam() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        element.callJsFunction(\""method\"", \""foo\"");\n+        ui.getElement().appendChild(element);\n+\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+        assertPendingJs(ui, \""return $0.method($1)\"", element, \""foo\"");\n+\n+    }\n+\n+    @Test\n+    public void callFunctionTwoParams() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        element.callJsFunction(\""method\"", \""foo\"", 123);\n+        ui.getElement().appendChild(element);\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        assertPendingJs(ui, \""return $0.method($1,$2)\"", element, \""foo\"", 123);\n+    }\n+\n+    @Test\n+    public void callFunctionOnProperty() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        element.callJsFunction(\""property.method\"");\n+        ui.getElement().appendChild(element);\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        assertPendingJs(ui, \""return $0.property.method()\"", element);\n+    }\n+\n+    @Test\n+    public void callFunctionOnSubProperty() {\n+        UI ui = new MockUI();\n+        Element element = ElementFactory.createDiv();\n+        element.callJsFunction(\""property.other.method\"");\n+        ui.getElement().appendChild(element);\n+        ui.getInternals().getStateTree().runExecutionsBeforeClientResponse();\n+\n+        assertPendingJs(ui, \""return $0.property.other.method()\"", element);\n+    }\n+\n+    @Test\n+    public void attachShadowRoot_shadowRootCreatedAndChildrenArePreserved() {\n+        Element element = ElementFactory.createDiv();\n+        Element button = ElementFactory.createButton();\n+        Element emphasis = ElementFactory.createEmphasis();\n+        element.appendChild(button, emphasis);\n+\n+        ShadowRoot shadow = element.attachShadow();\n+        Assert.assertNotNull(shadow);\n+        Assert.assertEquals(element, shadow.getHost());\n+        Assert.assertEquals(shadow, element.getShadowRoot().get());\n+        Assert.assertEquals(2, element.getChildCount());\n+        Assert.assertEquals(2, element.getChildren().count());\n+        Assert.assertEquals(button, element.getChild(0));\n+        Assert.assertEquals(emphasis, element.getChild(1));\n+    }\n+\n+    @Test\n+    public void getShadowRoot_shadowRootIsEmpty() {\n+        Element element = ElementFactory.createDiv();\n+        Assert.assertFalse(element.getShadowRoot().isPresent());\n+    }\n+\n+    @Test\n+    public void getParentNode_parentNodeIsTheSameAsParent() {\n+        Element element = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+\n+        element.appendChild(child);\n+\n+        Assert.assertEquals(child.getParent(), child.getParentNode());\n+    }\n+\n+    @Test\n+    public void getParentNode_elementInShadowRoot_parentIsNull() {\n+        ShadowRoot element = ElementFactory.createDiv().attachShadow();\n+        Element child = ElementFactory.createDiv();\n+\n+        element.appendChild(child);\n+\n+        Assert.assertNull(child.getParent());\n+        Assert.assertEquals(element, child.getParentNode());\n+    }\n+\n+    @Test\n+    public void parentIsDisabled_childIsDisabled() {\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+\n+        parent.appendChild(child);\n+\n+        Assert.assertTrue(\""Parent should be enabled\"", parent.isEnabled());\n+        Assert.assertTrue(\""Child should be enabled\"", child.isEnabled());\n+\n+        parent.setEnabled(false);\n+\n+        Assert.assertFalse(\""Parent should be disabled\"", parent.isEnabled());\n+        Assert.assertFalse(\""Child should be disabled\"", child.isEnabled());\n+\n+        child.removeFromParent();\n+\n+        Assert.assertTrue(\""Child should be enabled\"", child.isEnabled());\n+    }\n+\n+    @Test\n+    public void emptyElement_setDisabled_noChildFeatures() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.setEnabled(false);\n+\n+        BasicElementStateProviderTest.assertNoChildFeatures(element);\n+    }\n+\n+    @Test\n+    public void emptyElement_isVirtualChild_noChildFeatures() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.isVirtualChild();\n+\n+        BasicElementStateProviderTest.assertNoChildFeatures(element);\n+    }\n+\n+    @Test\n+    public void elementWithoutComponent_getComponentFeature() {\n+        Element element = ElementFactory.createDiv();\n+        element.appendChild(ElementFactory.createDiv());\n+\n+        element.getComponent();\n+\n+        Assert.assertFalse(\n+                \""getComponent() shouldn't initialize a component mapping feature\"",\n+                element.getNode()\n+                        .getFeatureIfInitialized(ComponentMapping.class)\n+                        .isPresent());\n+    }\n+\n+    @Test\n+    public void readMissingProperty_noFeatureInitialized() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.getProperty(\""foo\"");\n+        element.hasProperty(\""foo\"");\n+        element.removeProperty(\""foo\"");\n+        element.getPropertyNames().collect(Collectors.toList());\n+\n+        Assert.assertFalse(\n+                \""reading a property value shouldn't initialize a property map feature\"",\n+                element.getNode()\n+                        .getFeatureIfInitialized(ElementPropertyMap.class)\n+                        .isPresent());\n+    }\n+\n+    @Test\n+    public void readMissingAttribute_noFeatureInitialized() {\n+        Element element = ElementFactory.createDiv();\n+\n+        element.getAttribute(\""foo\"");\n+        element.hasAttribute(\""foo\"");\n+        element.removeAttribute(\""foo\"");\n+        element.getAttributeNames().collect(Collectors.toList());\n+\n+        Assert.assertFalse(\n+                \""reading an attribute value shouldn't initialize an attribute map feature\"",\n+                element.getNode()\n+                        .getFeatureIfInitialized(ElementAttributeMap.class)\n+                        .isPresent());\n+    }\n+\n+    @Test\n+    public void virtualChildren_areIdentifiedAsSuch() {\n+        Element parent = ElementFactory.createDiv();\n+        Element child = ElementFactory.createDiv();\n+        Element virtualChild = ElementFactory.createDiv();\n+        Element grandVirtualChild = ElementFactory.createDiv();\n+\n+        parent.appendChild(child);\n+        parent.appendVirtualChild(virtualChild);\n+        virtualChild.appendChild(grandVirtualChild);\n+\n+        Assert.assertFalse(parent.isVirtualChild());\n+        Assert.assertFalse(child.isVirtualChild());\n+        Assert.assertTrue(virtualChild.isVirtualChild());\n+        Assert.assertFalse(grandVirtualChild.isVirtualChild());\n+    }\n+\n+    @Test\n+    public void domPropertyListener_registersListenerAndDomTrigger() {\n+        Element element = ElementFactory.createDiv();\n+\n+        AtomicReference<Serializable> listenerValue = new AtomicReference<>();\n+\n+        element.addPropertyChangeListener(\""property\"", \""event\"", event -> {\n+            if (listenerValue.getAndSet(event.getValue()) != null) {\n+                Assert.fail(\""Unexpected event\"");\n+            }\n+        });\n+\n+        Assert.assertEquals(\""The property should be synchronized\"",\n+                DisabledUpdateMode.ONLY_WHEN_ENABLED,\n+                element.getNode().getFeature(ElementListenerMap.class)\n+                        .getPropertySynchronizationMode(\""property\""));\n+\n+        ElementListenerMap listenerMap = element.getNode()\n+                .getFeature(ElementListenerMap.class);\n+\n+        Assert.assertEquals(\""A DOM event synchronization should be defined\"",\n+                Collections.singleton(\n+                        JsonConstants.SYNCHRONIZE_PROPERTY_TOKEN + \""property\""),\n+                ElementListenersTest.getExpressions(listenerMap, \""event\""));\n+\n+        element.setProperty(\""property\"", \""value\"");\n+        Assert.assertEquals(\""Listener shold be registered\"", listenerValue.get(),\n+                \""value\"");\n+    }\n+\n+    @Test\n+    public void domPropertyListener_unregisterCleansEverything() {\n+        Element element = ElementFactory.createDiv();\n+\n+        DomListenerRegistration registration = element\n+                .addPropertyChangeListener(\""property\"", \""event\"", event -> {\n+                    Assert.fail(\""Unexpected event\"");\n+                });\n+        registration.remove();\n+\n+        Assert.assertNull(\""The property should not be synchronized\"",\n+                element.getNode().getFeature(ElementListenerMap.class)\n+                        .getPropertySynchronizationMode(\""property\""));\n+\n+        ElementListenerMap listenerMap = element.getNode()\n+                .getFeature(ElementListenerMap.class);\n+\n+        Assert.assertEquals(\""There should be no DOM listener\"",\n+                Collections.emptySet(),\n+                ElementListenersTest.getExpressions(listenerMap, \""event\""));\n+\n+        // Should not trigger assert in the listener\n+        element.setProperty(\""property\"", \""value\"");\n+    }\n+\n+    @Test\n+    public void removingVirtualChildrenIsPossible() {\n+        Element parent = new Element(\""root\"");\n+        Element child1 = new Element(\""main\"");\n+        Element child2 = new Element(\""menu\"");\n+\n+        parent.appendVirtualChild(child1, child2);\n+\n+        parent.removeVirtualChild(child2, child1);\n+\n+        Assert.assertNull(child1.getParent());\n+        Assert.assertFalse(child1.isVirtualChild());\n+\n+        Assert.assertNull(child2.getParent());\n+        Assert.assertFalse(child2.isVirtualChild());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void removeVirtualChildren_notVirtualChild_fails() {\n+        Element parent = new Element(\""root\"");\n+        Element child1 = new Element(\""main\"");\n+\n+        parent.appendChild(child1);\n+\n+        parent.removeVirtualChild(child1);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void removeFromParent_virtualChild_fails() {\n+        Element parent = new Element(\""root\"");\n+        Element child1 = new Element(\""main\"");\n+\n+        parent.appendVirtualChild(child1);\n+\n+        child1.removeFromParent();\n+    }\n+\n+    @Test\n+    public void executeJavaScript_delegatesToExecJs() {\n+        AtomicReference<String> invokedExpression = new AtomicReference<>();\n+        AtomicReference<Serializable[]> invokedParams = new AtomicReference<>();\n+\n+        Element element = new Element(\""div\"") {\n+            @Override\n+            public PendingJavaScriptResult executeJs(String expression,\n+                    Serializable... parameters) {\n+                String oldExpression = invokedExpression.getAndSet(expression);\n+                Assert.assertNull(\""There should be no old expression\"",\n+                        oldExpression);\n+\n+                Serializable[] oldParams = invokedParams.getAndSet(parameters);\n+                Assert.assertNull(\""There should be no old params\"", oldParams);\n+\n+                return null;\n+            }\n+        };\n+\n+        element.executeJs(\""foo\"", 1, true);\n+\n+        Assert.assertEquals(\""foo\"", invokedExpression.get());\n+        Assert.assertEquals(Integer.valueOf(1), invokedParams.get()[0]);\n+        Assert.assertEquals(Boolean.TRUE, invokedParams.get()[1]);\n+    }\n+\n+    @Test\n+    public void callFunction_delegatesToCallJsFunction() {\n+        AtomicReference<String> invokedFuction = new AtomicReference<>();\n+        AtomicReference<Serializable[]> invokedParams = new AtomicReference<>();\n+\n+        Element element = new Element(\""div\"") {\n+            @Override\n+            public PendingJavaScriptResult callJsFunction(String functionName,\n+                    Serializable... arguments) {\n+                String oldExpression = invokedFuction.getAndSet(functionName);\n+                Assert.assertNull(\""There should be no old function name\"",\n+                        oldExpression);\n+\n+                Serializable[] oldParams = invokedParams.getAndSet(arguments);\n+                Assert.assertNull(\""There should be no old params\"", oldParams);\n+\n+                return null;\n+            }\n+        };\n+\n+        element.callJsFunction(\""foo\"", 1, true);\n+\n+        Assert.assertEquals(\""foo\"", invokedFuction.get());\n+        Assert.assertEquals(Integer.valueOf(1), invokedParams.get()[0]);\n+        Assert.assertEquals(Boolean.TRUE, invokedParams.get()[1]);\n+    }\n+\n+    @Override\n+    protected Element createParentNode() {\n+        return ElementFactory.createDiv();\n+    }\n+\n+    @Override\n+    protected void assertChild(Node<?> parent, int index, Element child) {\n+        Assert.assertEquals(parent, child.getParent());\n+        Assert.assertEquals(child, parent.getChild(index));\n+    }\n+\n+    private void assertPendingJs(UI ui, String js, Serializable... arguments) {\n+        List<PendingJavaScriptInvocation> pendingJs = ui.getInternals()\n+                .dumpPendingJavaScriptInvocations();\n+        JavaScriptInvocation expected = new JavaScriptInvocation(js, arguments);\n+        Assert.assertEquals(1, pendingJs.size());\n+        assertEquals(expected, pendingJs.get(0).getInvocation());\n+\n+    }\n+\n+    private void assertEquals(JavaScriptInvocation expected,\n+            JavaScriptInvocation actual) {\n+        Assert.assertEquals(expected.getExpression(), actual.getExpression());\n+        Assert.assertArrayEquals(expected.getParameters().toArray(),\n+                actual.getParameters().toArray());\n+\n+    }\n+\n+    private static ArrayNode createNumberArray(double... items) {\n+        return DoubleStream.of(items).mapToObj(JacksonUtils::createNode)\n+                .collect(JacksonUtils.asArray());\n+    }\n+\n+}\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java\nindex f5d711402f7..b2161748733 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandlerTest.java\n@@ -17,11 +17,13 @@\n \n import java.util.List;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import net.jcip.annotations.NotThreadSafe;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.Mock;\n import org.mockito.Mockito;\n \n import com.vaadin.flow.component.ClientCallable;\n@@ -35,11 +37,13 @@\n import com.vaadin.flow.component.internal.UIInternals.JavaScriptInvocation;\n import com.vaadin.flow.component.polymertemplate.EventHandler;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.MockServletServiceSessionSetup;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.shared.JsonConstants;\n import com.vaadin.tests.util.MockDeploymentConfiguration;\n+import com.vaadin.tests.util.MockUI;\n \n import elemental.json.Json;\n import elemental.json.JsonArray;\n@@ -149,6 +153,7 @@ public static class MethodWithParameters extends ComponentWithCompute {\n         private Integer[] varArg;\n         private int[][] doubleArray;\n         private JsonValue jsonValue;\n+        private JsonNode jsonNode;\n \n         @Override\n         @ClientCallable\n@@ -184,6 +189,11 @@ protected void method3(@EventData(\""foo\"") int[][] array) {\n         protected void method4(@EventData(\""foo\"") JsonValue value) {\n             jsonValue = value;\n         }\n+\n+        @ClientCallable\n+        protected void method5(@EventData(\""foo\"") JsonNode value) {\n+            jsonNode = value;\n+        }\n     }\n \n     @Before\n@@ -399,6 +409,41 @@ public void methodWithVarArg_acceptNoValues() {\n         Assert.assertEquals(0, component.varArg.length);\n     }\n \n+    @Test\n+    public void methodWithJsonValueIsInvoked() {\n+        JsonArray array = Json.createArray();\n+\n+        JsonObject json = Json.createObject();\n+        json.put(\""foo\"", \""bar\"");\n+        array.set(0, json);\n+\n+        MethodWithParameters component = new MethodWithParameters();\n+        UI ui = new MockUI();\n+        ui.add(component);\n+        PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n+                component.getClass(), \""method4\"", array, -1);\n+\n+        Assert.assertEquals(component.jsonValue, json);\n+    }\n+\n+    @Test\n+    public void methodWithJacksonJsonValueIsInvoked() {\n+        JsonArray array = Json.createArray();\n+\n+        JsonObject json = Json.createObject();\n+        json.put(\""foo\"", \""bar\"");\n+        array.set(0, json);\n+\n+        MethodWithParameters component = new MethodWithParameters();\n+        UI ui = new MockUI();\n+        ui.add(component);\n+        PublishedServerEventHandlerRpcHandler.invokeMethod(component,\n+                component.getClass(), \""method5\"", array, -1);\n+\n+        Assert.assertEquals(component.jsonNode,\n+                JacksonUtils.mapElemental(json));\n+    }\n+\n     @Test\n     public void methodWithSeveralArgsAndVarArg_acceptNoValues() {\n         JsonArray array = Json.createArray();\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21103"", ""pr_id"": 21103, ""issue_id"": 21095, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Connection recovery does not work when a request is terminated while it's being processed\n### Description of the bug\n\nThe client does not recover properly if the HTTP connection is terminated while a request is processed on the server. The client manages to apply the changes from the original request when connectivity is restored but it also shows an Internal error notification and keeps retrying every five seconds. Each retry leads to a \""Unexpected message id from the client. Expected client id: 4, got 3\"" error in the server console.\n\n![Image](https://github.com/user-attachments/assets/c8b06f87-6db4-4482-a362-6b51c4c0f6d4)\n\n### Expected behavior\n\nExpected that there's no Internal error and no retries.\n\n### Minimal reproducible example\n\n1. Create application at https://start.vaadin.com/ with just a Hello World view for Flow. Select Vaadin 24.7 before downloading since Vaadin 24.6 is the default at the time of writing.\n2. Edit the click handler in `HelloWorldView` to have a 5-second delay (so that you will have time to kill the connection before the response is sent)\n3. Run in production mode with `mvn -Pproduction package; java -jar target/my-app-1.0-SNAPSHOT.jar`\n4. Open a local SSH connection that forwards port 8081 to 8080. `ssh -L 8081:localhost:8080 localhost`\n5. Open http://localhost:8081/ in the browser\n6. Click the button and then immediately terminate the SSH connection using `^d ^c` (only  `^d` would make it wait until all forwarded connections are closed)\n7. Observe that the black offline status bar shows up immediately in the browser\n8. Open the SSH connection again\n9. Observe that the black offline bar changes to a blue online bar after a couple of seconds.\n10. Observe that the expected notification is shown in the lower left corner\n11. Observe that there's also an Internal error notification in the upper right corner\n12. Observe that there's a new \""Unexpected message id from the client. Expected client id: 4, got 3.\"" message in the server console every 5 seconds until you reload in the browser or close the tab\n\n### Versions\n\n- Vaadin / Flow version: Vaadin 24.7.0.beta1\n- Java version: Temurin-21.0.4+7\n- OS version: macOS 15.3.1\n- Browser version (if applicable): Chrome 133. Also tested with the latest versions of Firefox and Safari.\n- Application Server (if applicable): Tomcat 10.1.36 through Spring Boot\n- IDE (if applicable): None, running in production mode from the command line\n"", ""issue_word_count"": 413, ""test_files_count"": 9, ""non_test_files_count"": 1, ""pr_changed_files"": [""flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java"", ""flow-test-util/src/main/java/com/vaadin/flow/testutil/AbstractBrowserConsoleTest.java"", ""flow-test-util/src/main/java/com/vaadin/flow/testutil/ChromeBrowserTestWithProxy.java"", ""flow-test-util/src/main/java/com/vaadin/flow/testutil/net/SimpleProxy.java"", ""flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/BeforeOutputStreamActionFilter.java"", ""flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionView.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/PushChromeBrowserTestWithProxy.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ReconnectTest.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SendMultibyteCharactersTest.java""], ""pr_changed_test_files"": [""flow-test-util/src/main/java/com/vaadin/flow/testutil/AbstractBrowserConsoleTest.java"", ""flow-test-util/src/main/java/com/vaadin/flow/testutil/ChromeBrowserTestWithProxy.java"", ""flow-test-util/src/main/java/com/vaadin/flow/testutil/net/SimpleProxy.java"", ""flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/BeforeOutputStreamActionFilter.java"", ""flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionView.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/PushChromeBrowserTestWithProxy.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ReconnectTest.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SendMultibyteCharactersTest.java""], ""base_commit"": ""9668a79708b4d4d5617029686db36cfdb8dc38ee"", ""head_commit"": ""76cfb73ffeb07c54713cbbf1275994ca879903aa"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21103"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21103"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-10T08:09:06.000Z"", ""patch"": ""diff --git a/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java b/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\nindex 71a757d0bcb..c5664cdea05 100644\n--- a/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\n+++ b/flow-client/src/main/java/com/vaadin/client/communication/MessageSender.java\n@@ -20,7 +20,6 @@\n \n import com.google.gwt.core.client.GWT;\n import com.google.gwt.user.client.Timer;\n-\n import com.vaadin.client.ConnectionIndicator;\n import com.vaadin.client.Console;\n import com.vaadin.client.Registry;\n@@ -208,7 +207,12 @@ private JsonObject preparePayload(final JsonArray reqInvocations,\n      */\n     public void send(final JsonObject payload) {\n         if (hasQueuedMessages()) {\n-            messageQueue.add(payload);\n+            // The sever sync id is set in the private sendPayload method.\n+            // If it is already present on the payload, it means the message has\n+            // been already sent and enqueued.\n+            if (!payload.hasKey(ApplicationConstants.SERVER_SYNC_ID)) {\n+                messageQueue.add(payload);\n+            }\n             return;\n         }\n         messageQueue.add(payload);\n@@ -384,8 +388,8 @@ public void setClientToServerMessageId(int nextExpectedId, boolean force) {\n                 if (messageQueue.get(0)\n                         .getNumber(ApplicationConstants.CLIENT_TO_SERVER_ID)\n                         + 1 == nextExpectedId) {\n-                    resetTimer();\n                     messageQueue.remove(0);\n+                    resetTimer();\n                 }\n             }\n             return;\n"", ""test_patch"": ""diff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/AbstractBrowserConsoleTest.java b/flow-test-util/src/main/java/com/vaadin/flow/testutil/AbstractBrowserConsoleTest.java\nsimilarity index 82%\nrename from flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/AbstractBrowserConsoleTest.java\nrename to flow-test-util/src/main/java/com/vaadin/flow/testutil/AbstractBrowserConsoleTest.java\nindex 944501c0408..2e8f8300e08 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/AbstractBrowserConsoleTest.java\n+++ b/flow-test-util/src/main/java/com/vaadin/flow/testutil/AbstractBrowserConsoleTest.java\n@@ -1,14 +1,12 @@\n-package com.vaadin.flow.uitest.ui.push;\n+package com.vaadin.flow.testutil;\n \n import java.util.List;\n \n-import com.vaadin.flow.testutil.ChromeBrowserTest;\n-\n public abstract class AbstractBrowserConsoleTest extends ChromeBrowserTest {\n \n     @Override\n-    protected void open() {\n-        super.open();\n+    protected void open(String... parameters) {\n+        super.open(parameters);\n \n         getCommandExecutor().executeScript(\""window.logs = [];\""\n                 + \""var origConsole = window.console; window.console = {\""\n@@ -23,10 +21,10 @@ protected void open() {\n     protected List<?> getBrowserLogs(boolean reset) {\n         if (reset) {\n             return (List<?>) getCommandExecutor().executeScript(\n-                    \""var result = window.logs; window.logs=[]; return result;\"");\n+                    \""var result = window.logs; window.logs=[]; return result || [];\"");\n         } else {\n             return (List<?>) getCommandExecutor()\n-                    .executeScript(\""return window.logs;\"");\n+                    .executeScript(\""return window.logs || [];\"");\n         }\n     }\n \n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ChromeBrowserTestWithProxy.java b/flow-test-util/src/main/java/com/vaadin/flow/testutil/ChromeBrowserTestWithProxy.java\nsimilarity index 94%\nrename from flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ChromeBrowserTestWithProxy.java\nrename to flow-test-util/src/main/java/com/vaadin/flow/testutil/ChromeBrowserTestWithProxy.java\nindex 4322d6169eb..b2e0505a9e5 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ChromeBrowserTestWithProxy.java\n+++ b/flow-test-util/src/main/java/com/vaadin/flow/testutil/ChromeBrowserTestWithProxy.java\n@@ -1,14 +1,12 @@\n-package com.vaadin.flow.uitest.ui.push;\n+package com.vaadin.flow.testutil;\n \n import java.io.IOException;\n import java.util.concurrent.atomic.AtomicInteger;\n \n import org.junit.After;\n-import org.junit.experimental.categories.Category;\n \n-import com.vaadin.flow.testcategory.PushTests;\n+import com.vaadin.flow.testutil.net.SimpleProxy;\n \n-@Category(PushTests.class)\n public abstract class ChromeBrowserTestWithProxy\n         extends AbstractBrowserConsoleTest {\n \n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SimpleProxy.java b/flow-test-util/src/main/java/com/vaadin/flow/testutil/net/SimpleProxy.java\nsimilarity index 98%\nrename from flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SimpleProxy.java\nrename to flow-test-util/src/main/java/com/vaadin/flow/testutil/net/SimpleProxy.java\nindex 95a1c09e152..ef34b101353 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SimpleProxy.java\n+++ b/flow-test-util/src/main/java/com/vaadin/flow/testutil/net/SimpleProxy.java\n@@ -1,4 +1,4 @@\n-package com.vaadin.flow.uitest.ui.push;\n+package com.vaadin.flow.testutil.net;\n \n import java.io.IOException;\n import java.io.InputStream;\n\ndiff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/BeforeOutputStreamActionFilter.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/BeforeOutputStreamActionFilter.java\nnew file mode 100644\nindex 00000000000..bf31c0aebd8\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/BeforeOutputStreamActionFilter.java\n@@ -0,0 +1,56 @@\n+package com.vaadin.flow.uitest.ui.faulttolerance;\n+\n+import java.io.IOException;\n+\n+import jakarta.servlet.Filter;\n+import jakarta.servlet.FilterChain;\n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.ServletOutputStream;\n+import jakarta.servlet.ServletRequest;\n+import jakarta.servlet.ServletResponse;\n+import jakarta.servlet.annotation.WebFilter;\n+import jakarta.servlet.http.HttpServletResponse;\n+import jakarta.servlet.http.HttpServletResponseWrapper;\n+\n+import com.vaadin.flow.server.VaadinServletResponse;\n+\n+@WebFilter(urlPatterns = \""/*\"")\n+public class BeforeOutputStreamActionFilter implements Filter {\n+    @Override\n+    public void doFilter(ServletRequest request, ServletResponse response,\n+            FilterChain chain) throws IOException, ServletException {\n+        response = new BeforeOutputStreamActionResponse(\n+                (HttpServletResponse) response);\n+        chain.doFilter(request, response);\n+    }\n+\n+    static void beforeGettingOutputStream(Runnable action) {\n+        ServletResponse response = VaadinServletResponse.getCurrent()\n+                .getResponse();\n+        if (response instanceof BeforeOutputStreamActionResponse cast) {\n+            cast.beforeGettingOutputStream(action);\n+        }\n+    }\n+\n+    public static class BeforeOutputStreamActionResponse\n+            extends HttpServletResponseWrapper {\n+        private Runnable action;\n+\n+        BeforeOutputStreamActionResponse(HttpServletResponse response) {\n+            super(response);\n+        }\n+\n+        private void beforeGettingOutputStream(Runnable action) {\n+            this.action = action;\n+        }\n+\n+        @Override\n+        public ServletOutputStream getOutputStream() throws IOException {\n+            if (action != null) {\n+                action.run();\n+                action = null;\n+            }\n+            return super.getOutputStream();\n+        }\n+    }\n+}\n\ndiff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionView.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionView.java\nnew file mode 100644\nindex 00000000000..3ba14be9eb8\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionView.java\n@@ -0,0 +1,71 @@\n+package com.vaadin.flow.uitest.ui.faulttolerance;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import com.vaadin.flow.component.html.Div;\n+import com.vaadin.flow.component.html.NativeButton;\n+import com.vaadin.flow.component.html.Span;\n+import com.vaadin.flow.router.AfterNavigationEvent;\n+import com.vaadin.flow.router.AfterNavigationObserver;\n+import com.vaadin.flow.router.Route;\n+\n+@Route(\""com.vaadin.flow.uitest.ui.faulttolerance.NetworkInterruptionView\"")\n+public class NetworkInterruptionView extends Div\n+        implements AfterNavigationObserver {\n+\n+    public static final String INCREMENT_BUTTON_ID = \""incrementCounter\"";\n+    public static final String INCREMENT_STOP_PROXY_BUTTON_ID = \""incrementCounterStopProxy\"";\n+    public static final String COUNTER_ID = \""counter\"";\n+    private final NativeButton incrementAndStopProxyButton;\n+\n+    private int clientCounter = 0;\n+    private String monitorFile;\n+\n+    public NetworkInterruptionView() {\n+        Span counter = new Span(\""0\"");\n+        counter.setId(COUNTER_ID);\n+        NativeButton incrementButton = new NativeButton(\""Increment\"", e -> {\n+            clientCounter++;\n+            counter.setText(clientCounter + \""\"");\n+        });\n+        incrementButton.setId(INCREMENT_BUTTON_ID);\n+        incrementAndStopProxyButton = new NativeButton(\""Increment (stop proxy)\"",\n+                e -> {\n+                    clientCounter++;\n+                    counter.setText(clientCounter + \""\"");\n+                    BeforeOutputStreamActionFilter.beforeGettingOutputStream(\n+                            this::stopProxyConnection);\n+                });\n+        incrementAndStopProxyButton.setId(INCREMENT_STOP_PROXY_BUTTON_ID);\n+        add(incrementButton, incrementAndStopProxyButton, counter);\n+    }\n+\n+    @Override\n+    public void afterNavigation(AfterNavigationEvent event) {\n+        monitorFile = event.getLocation().getQueryParameters()\n+                .getSingleParameter(\""proxyMonitorFile\"").orElse(null);\n+        if (monitorFile == null) {\n+            remove(incrementAndStopProxyButton);\n+        }\n+    }\n+\n+    private void stopProxyConnection() {\n+        try {\n+            Files.writeString(Paths.get(monitorFile), \""stop\"",\n+                    StandardOpenOption.TRUNCATE_EXISTING);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        // wait for proxy disconnection\n+        try {\n+            Thread.sleep(200);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java\nnew file mode 100644\nindex 00000000000..3a5583aea70\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/faulttolerance/NetworkInterruptionIT.java\n@@ -0,0 +1,145 @@\n+package com.vaadin.flow.uitest.ui.faulttolerance;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.openqa.selenium.By;\n+\n+import com.vaadin.flow.component.html.testbench.NativeButtonElement;\n+import com.vaadin.flow.component.html.testbench.SpanElement;\n+import com.vaadin.flow.testutil.ChromeBrowserTestWithProxy;\n+\n+public class NetworkInterruptionIT extends ChromeBrowserTestWithProxy {\n+\n+    private AtomicBoolean stopWatcher = new AtomicBoolean(false);\n+\n+    @Rule\n+    public TemporaryFolder tempDir = new TemporaryFolder();\n+\n+    @Override\n+    public void setup() throws Exception {\n+        super.setup();\n+        Path proxyMonitorFile = tempDir.newFile(\""flow-test-proxy-monitor.txt\"")\n+                .toPath();\n+        WatchService watchService = FileSystems.getDefault().newWatchService();\n+        tempDir.getRoot().toPath().register(watchService,\n+                StandardWatchEventKinds.ENTRY_MODIFY);\n+        AtomicBoolean stopWatcher = new AtomicBoolean(false);\n+        new Thread(() -> {\n+            WatchKey key;\n+            try (WatchService ws = watchService) {\n+                while (!stopWatcher.get()) {\n+                    key = ws.poll(100, TimeUnit.MILLISECONDS);\n+                    if (key != null) {\n+                        for (WatchEvent<?> event : key.pollEvents()) {\n+                            if (event.context() instanceof Path p\n+                                    && proxyMonitorFile.equals(tempDir.getRoot()\n+                                            .toPath().resolve(p))) {\n+                                if (Files.readString(proxyMonitorFile)\n+                                        .contains(\""stop\"")) {\n+                                    disconnectProxy();\n+                                }\n+                            }\n+                        }\n+                        key.reset();\n+                    }\n+                }\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+                throw new IllegalStateException(e);\n+            }\n+        }).start();\n+        this.stopWatcher = stopWatcher;\n+        open(\""proxyMonitorFile=\"" + proxyMonitorFile.toAbsolutePath());\n+        testBench().disableWaitForVaadin();\n+    }\n+\n+    @After\n+    public void stopWatcher() {\n+        stopWatcher.set(true);\n+    }\n+\n+    @Test\n+    public void networkInterruption_clickIncrementButton_messageQueuedAndResent()\n+            throws IOException {\n+        disconnectProxy();\n+\n+        $(NativeButtonElement.class)\n+                .id(NetworkInterruptionView.INCREMENT_BUTTON_ID).click();\n+        waitForReconnectAttempts();\n+        connectProxy();\n+\n+        waitForLogMessage(\""Re-established connection to server\"");\n+\n+        waitUntil(d -> Integer.parseInt($(SpanElement.class)\n+                .id(NetworkInterruptionView.COUNTER_ID).getText()) == 1);\n+        ensureNoSystemErrorFromServer();\n+    }\n+\n+    @Test\n+    public void networkInterruption_clickIncrementButtonMultipleTime_messagesQueuedAndResent()\n+            throws IOException {\n+        disconnectProxy();\n+\n+        NativeButtonElement button = $(NativeButtonElement.class)\n+                .id(NetworkInterruptionView.INCREMENT_BUTTON_ID);\n+\n+        button.click();\n+        button.click();\n+        button.click();\n+        button.click();\n+        waitForReconnectAttempts();\n+        connectProxy();\n+\n+        waitForLogMessage(\""Re-established connection to server\"");\n+\n+        waitUntil(d -> Integer.parseInt($(SpanElement.class)\n+                .id(NetworkInterruptionView.COUNTER_ID).getText()) == 4);\n+        ensureNoSystemErrorFromServer();\n+    }\n+\n+    @Test\n+    public void networkInterruption_dropProxyBeforeResponse_serverMessageCachedAndResent()\n+            throws Exception {\n+        $(NativeButtonElement.class)\n+                .id(NetworkInterruptionView.INCREMENT_STOP_PROXY_BUTTON_ID)\n+                .click();\n+        waitForReconnectAttempts();\n+        connectProxy();\n+        waitForLogMessage(\""Re-established connection to server\"");\n+\n+        waitUntil(d -> Integer.parseInt($(SpanElement.class)\n+                .id(NetworkInterruptionView.COUNTER_ID).getText()) == 1);\n+        ensureNoSystemErrorFromServer();\n+    }\n+\n+    private void waitForReconnectAttempts() {\n+        waitForLogMessage(\""Reconnect attempt 2 for XHR\"");\n+    }\n+\n+    private void ensureNoSystemErrorFromServer() {\n+        // Make sure there is no error caused by messages sync lost\n+        waitForElementNotPresent(By.cssSelector(\""div.v-system-error\""));\n+    }\n+\n+    private void waitForLogMessage(String expectedMessage) {\n+        waitUntil(driver -> getBrowserLogs(true).stream().anyMatch(\n+                message -> expectedMessage.equals(message.toString())));\n+    }\n+\n+}\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/PushChromeBrowserTestWithProxy.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/PushChromeBrowserTestWithProxy.java\nnew file mode 100644\nindex 00000000000..3316c0b1ffe\n--- /dev/null\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/PushChromeBrowserTestWithProxy.java\n@@ -0,0 +1,12 @@\n+package com.vaadin.flow.uitest.ui.push;\n+\n+import org.junit.experimental.categories.Category;\n+\n+import com.vaadin.flow.testcategory.PushTests;\n+import com.vaadin.flow.testutil.ChromeBrowserTestWithProxy;\n+\n+@Category(PushTests.class)\n+public abstract class PushChromeBrowserTestWithProxy\n+        extends ChromeBrowserTestWithProxy {\n+\n+}\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ReconnectTest.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ReconnectTest.java\nindex 8c8470c4150..d876665c279 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ReconnectTest.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/ReconnectTest.java\n@@ -3,17 +3,18 @@\n import java.io.IOException;\n \n import org.junit.Test;\n+import org.openqa.selenium.By;\n import org.openqa.selenium.NoSuchElementException;\n import org.openqa.selenium.WebElement;\n import org.openqa.selenium.remote.DesiredCapabilities;\n \n-public abstract class ReconnectTest extends ChromeBrowserTestWithProxy {\n+public abstract class ReconnectTest extends PushChromeBrowserTestWithProxy {\n \n     @Override\n     public void setup() throws Exception {\n         super.setup();\n \n-        open();\n+        open((String[]) null);\n \n         startTimer();\n         waitUntilServerCounterChanges();\n@@ -89,6 +90,12 @@ private void waitUntilServerCounterChanges() {\n                 return false;\n             }\n         }, 30);\n+        ensureNoSystemErrorFromServer();\n+    }\n+\n+    private void ensureNoSystemErrorFromServer() {\n+        // Make sure there is no error caused by messages sync lost\n+        waitForElementNotPresent(By.cssSelector(\""div.v-system-error\""));\n     }\n \n     private void waitUntilClientCounterChanges(final int expectedValue) {\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SendMultibyteCharactersTest.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SendMultibyteCharactersTest.java\nindex ad5e12ac9ab..4a558c68fae 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SendMultibyteCharactersTest.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/push/SendMultibyteCharactersTest.java\n@@ -10,6 +10,7 @@\n import org.openqa.selenium.Keys;\n \n import com.vaadin.flow.testcategory.PushTests;\n+import com.vaadin.flow.testutil.AbstractBrowserConsoleTest;\n import com.vaadin.testbench.TestBenchElement;\n \n @Category(PushTests.class)\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21081"", ""pr_id"": 21081, ""issue_id"": 20991, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Feature flag changes are ignored on client side when default bundle is used\n### Description of the bug\n\nI downloaded a project from Vaadin Start and enabled the `accessibleDisabledButtons` feature flag via Copilot. When the server starts, the logs show that the feature flag is activated, but it remains false on the client-side. On the contrary, the `dashboardComponent` flag appears as true on the client-side even though it's not present in `vaadin-featureflags.properties`. \n\nSetting `vaadin.frontend.hotdeploy=true` resolves the issue, which suggests that it's related to the default bundle, which Vaadin start projects use by default.\n\n### Expected behavior\n\nIt should be possible to activate / deactivate feature flags in Vaadin start projects without setting any additional parameters.\n\n### Minimal reproducible example\n\n[button-test.zip](https://github.com/user-attachments/files/18782881/button-test.zip)\n\n### Versions\n\n- Vaadin / Flow version: 24.7.0.alpha8\n- Java version: 23\n- OS version: Mac OS\n"", ""issue_word_count"": 152, ""test_files_count"": 5, ""non_test_files_count"": 4, ""pr_changed_files"": [""flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java"", ""flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java"", ""flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java""], ""pr_changed_test_files"": [""flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java""], ""base_commit"": ""b3d2e7ce018f8d9879e21f9d1e68b05e8fe3dff1"", ""head_commit"": ""1bf348b541f58f1227d9fe6b11c18f12606128fd"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21081"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21081"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-05T09:46:58.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\nindex ab7b8304b9a..21187e1e100 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\n@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Locale;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import org.apache.commons.io.FilenameUtils;\n@@ -37,6 +38,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.vaadin.experimental.Feature;\n+import com.vaadin.experimental.FeatureFlags;\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.BootstrapHandlerHelper;\n@@ -110,6 +113,8 @@ public boolean synchronizedHandleRequest(VaadinSession session,\n             htmlElement.attr(\""lang\"", locale.getLanguage());\n         }\n \n+        initializeFeatureFlags(indexDocument, request);\n+\n         JsonObject initialJson = Json.createObject();\n \n         if (service.getBootstrapInitialPredicate()\n@@ -209,6 +214,28 @@ public boolean synchronizedHandleRequest(VaadinSession session,\n         return true;\n     }\n \n+    private void initializeFeatureFlags(Document indexDocument,\n+            VaadinRequest request) {\n+        String script = featureFlagsInitializer(request);\n+        Element scriptElement = indexDocument.head().prependElement(\""script\"");\n+        scriptElement.attr(SCRIPT_INITIAL, \""\"");\n+        scriptElement.appendChild(new DataNode(script));\n+    }\n+\n+    static String featureFlagsInitializer(VaadinRequest request) {\n+        return FeatureFlags.get(request.getService().getContext()).getFeatures()\n+                .stream().filter(Feature::isEnabled)\n+                .map(feature -> String.format(\""activator(\\\""%s\\\"");\"",\n+                        feature.getId()))\n+                .collect(Collectors.joining(\""\\n\"",\n+                        \""\""\""\n+                                window.Vaadin = window.Vaadin || {};\n+                                window.Vaadin.featureFlagsUpdaters = window.Vaadin.featureFlagsUpdaters || [];\n+                                window.Vaadin.featureFlagsUpdaters.push((activator) => {\n+                                \""\""\"",\n+                        \""});\""));\n+    }\n+\n     private static void addDevBundleTheme(Document document,\n             VaadinContext context) {\n         ApplicationConfiguration config = ApplicationConfiguration.get(context);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\nindex f313df7cc7f..7ad89e458db 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\n@@ -193,7 +193,9 @@ protected String generateNPMResponse(String tagName, VaadinRequest request,\n         // get the running script\n         boolean productionMode = request.getService()\n                 .getDeploymentConfiguration().isProductionMode();\n-        return getThisScript(tagName) + \""var scriptUri = thisScript.src;\""\n+\n+        return IndexHtmlRequestHandler.featureFlagsInitializer(request)\n+                + getThisScript(tagName) + \""var scriptUri = thisScript.src;\""\n                 + \""var index = scriptUri.lastIndexOf('\"" + WEB_COMPONENT_PATH\n                 + \""');\"" + \""var context = scriptUri.substring(0, index+\""\n                 + WEB_COMPONENT_PATH.length() + \"");\""\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java\nindex 4ffd937ada7..9ac7b5c66a3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java\n@@ -15,13 +15,14 @@\n  */\n package com.vaadin.flow.server.frontend;\n \n-import com.vaadin.experimental.FeatureFlags;\n-\n import java.io.File;\n import java.util.ArrayList;\n import java.util.List;\n \n-import static com.vaadin.flow.server.frontend.FrontendUtils.*;\n+import com.vaadin.experimental.Feature;\n+\n+import static com.vaadin.flow.server.frontend.FrontendUtils.FEATURE_FLAGS_FILE_NAME;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.GENERATED;\n \n /**\n  * A task for generating the feature flags file\n@@ -47,11 +48,31 @@ protected String getFileContent() {\n         lines.add(\n                 \""window.Vaadin.featureFlags = window.Vaadin.featureFlags || {};\"");\n \n-        FeatureFlags featureFlags = options.getFeatureFlags();\n-        featureFlags.getFeatures().forEach(feature -> {\n-            lines.add(String.format(\""window.Vaadin.featureFlags.%s = %s;\"",\n-                    feature.getId(), featureFlags.isEnabled(feature)));\n-        });\n+        // Initialize the flag entries only once. For exported web-components,\n+        // this script may be executed multiple times (one per embedded\n+        // component) and we should prevent active flags get overridden.\n+        List<Feature> featureFlags = options.getFeatureFlags().getFeatures();\n+        if (!featureFlags.isEmpty()) {\n+            lines.add(\n+                    \""if (Object.keys(window.Vaadin.featureFlags).length === 0) {\"");\n+            featureFlags.forEach(feature -> {\n+                lines.add(\n+                        String.format(\""window.Vaadin.featureFlags.%s = false;\"",\n+                                feature.getId()));\n+            });\n+            lines.add(\""};\"");\n+        }\n+\n+        // Multiple feature flags updater functions can be registered, in case\n+        // of exported web-component. If the component comes from different web\n+        // applications, the active flags might not be the same.\n+        lines.add(\""if (window.Vaadin.featureFlagsUpdaters) { \"");\n+        lines.add(\n+                \""const activator = (id) => window.Vaadin.featureFlags[id] = true;\"");\n+        lines.add(\n+                \""window.Vaadin.featureFlagsUpdaters.forEach(updater => updater(activator));\"");\n+        lines.add(\""delete window.Vaadin.featureFlagsUpdaters;\"");\n+        lines.add(\""} \"");\n \n         // See https://github.com/vaadin/flow/issues/14184\n         lines.add(\""export {};\"");\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java\nindex 82c69c9b21d..8ecf443cbbc 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java\n@@ -19,6 +19,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import static com.vaadin.flow.server.frontend.FrontendUtils.FEATURE_FLAGS_FILE_NAME;\n import static com.vaadin.flow.server.frontend.FrontendUtils.GENERATED;\n import static com.vaadin.flow.server.frontend.FrontendUtils.WEB_COMPONENT_BOOTSTRAP_FILE_NAME;\n \n@@ -51,7 +52,7 @@ public class TaskGenerateWebComponentBootstrap\n     @Override\n     protected String getFileContent() {\n         List<String> lines = new ArrayList<>();\n-\n+        lines.add(String.format(\""import './%s';%n\"", FEATURE_FLAGS_FILE_NAME));\n         lines.add(\""import 'Frontend/generated/flow/\""\n                 + FrontendUtils.IMPORTS_WEB_COMPONENT_NAME + \""';\"");\n         lines.add(\""import { init } from '\"" + FrontendUtils.JAR_RESOURCES_IMPORT\n"", ""test_patch"": ""diff --git a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\nindex 8e1e2166d56..0bedf5c4561 100644\n--- a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n+++ b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n@@ -531,9 +531,9 @@ public void runNodeUpdater_generateFeatureFlagsJsFile() throws Exception {\n                 .readString(generatedFeatureFlagsFile.toPath())\n                 .replace(\""\\r\\n\"", \""\\n\"");\n \n-        Assert.assertTrue(\""Example feature flag is not set\"",\n+        Assert.assertTrue(\""Example feature should not be set at build time\"",\n                 featureFlagsJs.contains(\n-                        \""window.Vaadin.featureFlags.exampleFeatureFlag = true;\\n\""));\n+                        \""window.Vaadin.featureFlags.exampleFeatureFlag = false;\\n\""));\n     }\n \n     private void fillAdapter() throws URISyntaxException {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\nindex b0fc2c64efb..5ecb8c65edd 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\n@@ -210,6 +210,17 @@ public void serveIndexHtml_requestWithSomePath_hasBaseHrefElement()\n                 indexHtml.contains(\""<base href=\\\""./..\\\""\""));\n     }\n \n+    @Test\n+    public void serveIndexHtml_featureFlagsSetter_isPresent()\n+            throws IOException {\n+        indexHtmlRequestHandler.synchronizedHandleRequest(session,\n+                createVaadinRequest(\""/\""), response);\n+        String indexHtml = responseOutput.toString(StandardCharsets.UTF_8);\n+        Assert.assertTrue(\""Response should have Feature Flags updater function\"",\n+                indexHtml.contains(\n+                        \""window.Vaadin.featureFlagsUpdaters.push((activator) => {\""));\n+    }\n+\n     @Test\n     public void canHandleRequest_requestWithRootPath_handleRequest() {\n         boolean canHandleRequest = indexHtmlRequestHandler\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java\nindex 1524d2ab363..237dd06ed2f 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java\n@@ -17,11 +17,11 @@\n package com.vaadin.flow.server.communication;\n \n import jakarta.servlet.ServletContext;\n-\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n@@ -31,6 +31,7 @@\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n@@ -42,6 +43,7 @@\n import com.vaadin.flow.component.page.Push;\n import com.vaadin.flow.component.webcomponent.WebComponent;\n import com.vaadin.flow.component.webcomponent.WebComponentConfiguration;\n+import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.CurrentInstance;\n import com.vaadin.flow.server.DefaultDeploymentConfiguration;\n@@ -101,6 +103,14 @@ public void init() {\n                         .getArguments()[0])\n                 .when(context)\n                 .setAttribute(any(WebComponentConfigurationRegistry.class));\n+\n+        final Lookup lookup = Mockito.mock(Lookup.class);\n+        Mockito.when(context.getAttribute(Lookup.class)).thenReturn(lookup);\n+        Mockito.doAnswer(i -> i.getArgument(1, Supplier.class).get())\n+                .when(context).getAttribute(\n+                        ArgumentMatchers.argThat(aClass -> \""FeatureFlagsWrapper\""\n+                                .equals(aClass.getSimpleName())),\n+                        any());\n         VaadinService.setCurrent(service);\n         Mockito.when(service.getInstantiator())\n                 .thenReturn(new MockInstantiator());\n@@ -178,7 +188,7 @@ public void webComponentNotPresent_responseReturns404() throws IOException {\n     public void webComponentGenerator_responseGetsResult() throws IOException {\n         registry = setupConfigurations(MyComponentExporter.class);\n \n-        ByteArrayOutputStream out = Mockito.mock(ByteArrayOutputStream.class);\n+        ByteArrayOutputStream out = Mockito.spy(new ByteArrayOutputStream());\n \n         DefaultDeploymentConfiguration configuration = Mockito\n                 .mock(DefaultDeploymentConfiguration.class);\n@@ -191,6 +201,10 @@ public void webComponentGenerator_responseGetsResult() throws IOException {\n         Assert.assertTrue(\""Provider should handle web-component request\"",\n                 provider.synchronizedHandleRequest(session, request, response));\n \n+        Assert.assertTrue(\""Response should have Feature Flags updater function\"",\n+                out.toString().contains(\n+                        \""window.Vaadin.featureFlagsUpdaters.push((activator) => {\""));\n+\n         Mockito.verify(response).getOutputStream();\n         Mockito.verify(out).write(Mockito.any(), Mockito.anyInt(),\n                 Mockito.anyInt());\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java\nindex ceba253759e..9d627dc7201 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java\n@@ -87,17 +87,12 @@ public void should_defineAllFeatureFlags() throws ExecutionFailedException {\n     }\n \n     @Test\n-    public void should_defineCorrectEnabledValue()\n+    public void should_callFeatureFlagsUpdaterFunction()\n             throws ExecutionFailedException {\n-        // Enable example feature\n-        featureFlags.getFeatures().stream()\n-                .filter(feature -> feature.equals(FeatureFlags.EXAMPLE))\n-                .forEach(feature -> feature.setEnabled(true));\n-\n         taskGenerateFeatureFlags.execute();\n         String content = taskGenerateFeatureFlags.getFileContent();\n-\n-        assertFeatureFlagGlobal(content, FeatureFlags.EXAMPLE, true);\n+        Assert.assertTrue(content.contains(\n+                \""window.Vaadin.featureFlagsUpdaters.forEach(updater => updater(activator))\""));\n     }\n \n     @Test\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java\nindex 55941ed720a..758147e477c 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java\n@@ -27,6 +27,7 @@\n import org.mockito.Mockito;\n \n import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_FRONTEND_DIR;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.FEATURE_FLAGS_FILE_NAME;\n \n public class TaskGenerateWebComponentBootstrapTest {\n     @Rule\n@@ -68,4 +69,13 @@ public void should_importAndInitializeFlowClient()\n                 \""import { init } from '\"" + FrontendUtils.JAR_RESOURCES_IMPORT\n                         + \""FlowClient.js';\\n\"" + \""init()\""));\n     }\n+\n+    @Test\n+    public void should_importFeatureFlagTS() throws ExecutionFailedException {\n+        taskGenerateWebComponentBootstrap.execute();\n+        String content = taskGenerateWebComponentBootstrap.getFileContent();\n+        Assert.assertTrue(content.contains(\n+                String.format(\""import './%s';\"", FEATURE_FLAGS_FILE_NAME)));\n+    }\n+\n }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21080"", ""pr_id"": 21080, ""issue_id"": 20741, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n"", ""issue_word_count"": 151, ""test_files_count"": 10, ""non_test_files_count"": 12, ""pr_changed_files"": [""flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelTest.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/change/NodeChange.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java"", ""flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java"", ""flow-server/src/main/java/com/vaadin/flow/server/communication/AtmospherePushConnection.java"", ""flow-server/src/main/java/com/vaadin/flow/server/communication/MetadataWriter.java"", ""flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java"", ""flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java"", ""flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java"", ""flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/change/ListChangeTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/change/MapPutChangeTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/change/MapRemoveChangeTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/MetadataWriterTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java""], ""pr_changed_test_files"": [""flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelTest.java"", ""flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/change/ListChangeTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/change/MapPutChangeTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/change/MapRemoveChangeTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/MetadataWriterTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java""], ""base_commit"": ""2a734da245525078926f1a428925459e3d96c510"", ""head_commit"": ""fb0226b85fab5e4e1573c5e127e3edfc1cc67d09"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21080"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21080"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-10T10:29:08.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java b/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java\nindex fce956dcc78..96de02b4758 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPool.java\n@@ -19,8 +19,7 @@\n import java.util.HashSet;\n import java.util.Set;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n  * Keeps track of {@link ConstantPoolKey} values that have already been sent to\n@@ -77,8 +76,8 @@ public boolean hasNewConstants() {\n      *\n      * @return a JSON object describing all new constants\n      */\n-    public JsonObject dumpConstants() {\n-        JsonObject json = Json.createObject();\n+    public ObjectNode dumpConstants() {\n+        ObjectNode json = JacksonUtils.createObjectNode();\n \n         newKeys.forEach(key -> key.export(json));\n         newKeys.clear();\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java b/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java\nindex 213923a3211..de00939044f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/ConstantPoolKey.java\n@@ -20,8 +20,10 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Base64;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n \n /**\n  * Wraps a JSON value that should be stored in the {@link ConstantPool} shared\n@@ -39,7 +41,7 @@\n  * @since 1.0\n  */\n public class ConstantPoolKey implements Serializable {\n-    private final JsonValue json;\n+    private final JsonNode json;\n     private String id;\n \n     /**\n@@ -50,7 +52,7 @@ public class ConstantPoolKey implements Serializable {\n      * @param json\n      *            the JSON constant, not <code>null</code>\n      */\n-    public ConstantPoolKey(JsonValue json) {\n+    public ConstantPoolKey(JsonNode json) {\n         assert json != null;\n         this.json = json;\n     }\n@@ -76,8 +78,22 @@ public String getId() {\n      *            the constant pool update that is to be sent to the client, not\n      *            <code>null</code>\n      */\n+    @Deprecated\n     public void export(JsonObject clientConstantPoolUpdate) {\n-        clientConstantPoolUpdate.put(getId(), json);\n+        export(JacksonUtils.mapElemental((JsonObject) json));\n+    }\n+\n+    /**\n+     * Exports this key into a JSON object to send to the client. This method\n+     * should be called only by the {@link ConstantPool} instance that manages\n+     * this value. It may be called multiple times.\n+     *\n+     * @param clientConstantPoolUpdate\n+     *            the constant pool update that is to be sent to the client, not\n+     *            <code>null</code>\n+     */\n+    public void export(ObjectNode clientConstantPoolUpdate) {\n+        clientConstantPoolUpdate.set(getId(), json);\n     }\n \n     /**\n@@ -88,8 +104,8 @@ public void export(JsonObject clientConstantPoolUpdate) {\n      *            the JSON to get a hash of, not <code>null</code>\n      * @return the key uniquely identifying the given JSON value\n      */\n-    private static String calculateHash(JsonValue json) {\n-        byte[] digest = MessageDigestUtil.sha256(json.toJson());\n+    private static String calculateHash(JsonNode json) {\n+        byte[] digest = MessageDigestUtil.sha256(json.toString());\n \n         /*\n          * Only use first 64 bits to keep id string short (1 in 100 000 000\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\nindex 0130afb5e4a..75b9592b9d5 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n@@ -104,12 +104,32 @@ public static ValueNode nullNode() {\n         return (ValueNode) objectMapper.nullNode();\n     }\n \n+    /**\n+     * Map JsonArray to ArrayNode.\n+     *\n+     * @param jsonArray\n+     *            JsonArray to change\n+     * @return ArrayNode of elemental json array object or null for null\n+     *         jsonArray\n+     */\n+    public static ArrayNode mapElemental(JsonArray jsonArray) {\n+        if (jsonArray == null || jsonArray instanceof JsonNull) {\n+            return null;\n+        }\n+        try {\n+            return (ArrayNode) objectMapper.readTree(jsonArray.toJson());\n+        } catch (JsonProcessingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n     /**\n      * Map JsonObject to ObjectNode.\n      *\n      * @param jsonObject\n      *            JsonObject to change\n-     * @return ObjectNode of elemental json object or null for null jsonObject\n+     * @return ObjectNode of elemental json object object or null for null\n+     *         jsonObject\n      */\n     public static ObjectNode mapElemental(JsonObject jsonObject) {\n         if (jsonObject == null) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/change/NodeChange.java b/flow-server/src/main/java/com/vaadin/flow/internal/change/NodeChange.java\nindex e33d9a0e12e..3790b287da3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/change/NodeChange.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/change/NodeChange.java\n@@ -18,7 +18,10 @@\n \n import java.io.Serializable;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import com.vaadin.flow.internal.ConstantPool;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.shared.JsonConstants;\n \n@@ -64,14 +67,15 @@ public StateNode getNode() {\n      *\n      * @return a json representation of this change\n      */\n-    public JsonObject toJson(ConstantPool constantPool) {\n+    public ObjectNode toJson(ConstantPool constantPool) {\n         JsonObject json = Json.createObject();\n \n         json.put(JsonConstants.CHANGE_NODE, node.getId());\n \n         populateJson(json, constantPool);\n \n-        return json;\n+        // TODO: Use Jackson directly after updating *Change to jackson\n+        return JacksonUtils.mapElemental(json);\n     }\n \n     /**\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java\nindex 6b61ff46933..1d6400bd715 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementListenerMap.java\n@@ -29,6 +29,8 @@\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.UI;\n@@ -39,13 +41,11 @@\n import com.vaadin.flow.dom.DomListenerRegistration;\n import com.vaadin.flow.function.SerializableRunnable;\n import com.vaadin.flow.internal.ConstantPoolKey;\n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n \n /**\n  * Map of DOM events with server-side listeners. The key set of this map\n@@ -81,24 +81,24 @@ public void addDebouncePhases(int timeout, Set<DebouncePhase> phases) {\n                     });\n         }\n \n-        public JsonValue toJson() {\n+        public JsonNode toJson() {\n             if (debounceSettings.isEmpty()) {\n-                return Json.create(false);\n+                return JacksonUtils.createNode(false);\n             } else if (debounceSettings.size() == 1\n                     && debounceSettings.containsKey(Integer.valueOf(0))) {\n                 // Shorthand if only debounce is a dummy filter debounce\n-                return Json.create(true);\n+                return JacksonUtils.createNode(true);\n             } else {\n                 // [[timeout1, phase1, phase2, ...], [timeout2, phase1, ...]]\n                 return debounceSettings.entrySet().stream()\n                         .map(entry -> Stream.concat(\n-                                Stream.of(\n-                                        Json.create(entry.getKey().intValue())),\n+                                Stream.of(JacksonUtils\n+                                        .createNode(entry.getKey().intValue())),\n                                 entry.getValue().stream()\n                                         .map(DebouncePhase::getIdentifier)\n-                                        .map(Json::create))\n-                                .collect(JsonUtils.asArray()))\n-                        .collect(JsonUtils.asArray());\n+                                        .map(JacksonUtils::createNode))\n+                                .collect(JacksonUtils.asArray()))\n+                        .collect(JacksonUtils.asArray());\n             }\n \n         }\n@@ -393,7 +393,7 @@ private Map<String, ExpressionSettings> collectEventExpressions(\n     private void updateEventSettings(String eventType) {\n         Map<String, ExpressionSettings> eventSettings = collectEventExpressions(\n                 eventType);\n-        JsonObject eventSettingsJson = JsonUtils.createObject(eventSettings,\n+        ObjectNode eventSettingsJson = JacksonUtils.createObject(eventSettings,\n                 ExpressionSettings::toJson);\n \n         ConstantPoolKey constantPoolKey = new ConstantPoolKey(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java\nindex 7095875bb91..e23a7b1ea67 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerEventListenerMap.java\n@@ -22,12 +22,10 @@\n import java.util.Map;\n \n import com.vaadin.flow.internal.ConstantPoolKey;\n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.shared.Registration;\n \n-import elemental.json.Json;\n-\n /**\n  * Map of PolymerTemplate events with server-side listeners. The key set of this\n  * map describes the event types for which event date is present.\n@@ -104,8 +102,8 @@ public Registration add(String methodName, String[] eventDataExpressions) {\n \n     private static ConstantPoolKey createConstantPoolKey(\n             List<String> eventData) {\n-        return new ConstantPoolKey(eventData.stream().map(Json::create)\n-                .collect(JsonUtils.asArray()));\n+        return new ConstantPoolKey(eventData.stream()\n+                .map(JacksonUtils::createNode).collect(JacksonUtils.asArray()));\n     }\n \n     private void removeListener(String eventType) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\nindex f97d9f0fd59..91958f2115e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\n@@ -823,8 +823,7 @@ private List<Element> setupDocumentHead(Element head,\n          * @return a JSON object with the initial UIDL message\n          */\n         private ObjectNode getInitialUidl(UI ui) {\n-            ObjectNode json = JacksonUtils\n-                    .mapElemental(new UidlWriter().createUidl(ui, false));\n+            ObjectNode json = new UidlWriter().createUidl(ui, false);\n \n             VaadinSession session = ui.getSession();\n             if (session.getConfiguration().isXsrfProtectionEnabled()) {\n@@ -1500,8 +1499,7 @@ protected static String readResource(String fileName) {\n      * @return a JSON object with the initial UIDL message\n      */\n     protected static ObjectNode getInitialUidl(UI ui) {\n-        ObjectNode json = JacksonUtils\n-                .mapElemental(new UidlWriter().createUidl(ui, false));\n+        ObjectNode json = new UidlWriter().createUidl(ui, false);\n \n         VaadinSession session = ui.getSession();\n         if (session.getConfiguration().isXsrfProtectionEnabled()) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/AtmospherePushConnection.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/AtmospherePushConnection.java\nindex ebf34483e2b..4a915a39eaa 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/AtmospherePushConnection.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/AtmospherePushConnection.java\n@@ -25,6 +25,7 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.atmosphere.cpr.AtmosphereResource;\n import org.atmosphere.cpr.AtmosphereResource.TRANSPORT;\n import org.atmosphere.cpr.BroadcastFilterAdapter;\n@@ -36,8 +37,6 @@\n import com.vaadin.flow.internal.UsageStatistics;\n import com.vaadin.flow.shared.communication.PushConstants;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * A {@link PushConnection} implementation using the Atmosphere push support\n  * that is by default included in Vaadin.\n@@ -204,9 +203,9 @@ public void push(boolean async) {\n         } else {\n             synchronized (lock) {\n                 try {\n-                    JsonObject response = new UidlWriter().createUidl(getUI(),\n+                    JsonNode response = new UidlWriter().createUidl(getUI(),\n                             async);\n-                    sendMessage(\""for(;;);[\"" + response.toJson() + \""]\"");\n+                    sendMessage(\""for(;;);[\"" + response + \""]\"");\n                 } catch (Exception e) {\n                     throw new RuntimeException(\""Push failed\"", e);\n                 }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/MetadataWriter.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/MetadataWriter.java\nindex 3524343c20e..e3c8aa8842a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/MetadataWriter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/MetadataWriter.java\n@@ -18,14 +18,14 @@\n \n import java.io.Serializable;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.SystemMessages;\n import com.vaadin.flow.server.VaadinSessionState;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n /**\n  * Serializes miscellaneous metadata to JSON.\n  * <p>\n@@ -54,9 +54,9 @@ public class MetadataWriter implements Serializable {\n      * @return JSON object with the metadata\n      *\n      */\n-    public JsonObject createMetadata(UI ui, boolean repaintAll, boolean async,\n+    public ObjectNode createMetadata(UI ui, boolean repaintAll, boolean async,\n             SystemMessages messages) {\n-        JsonObject meta = Json.createObject();\n+        ObjectNode meta = JacksonUtils.createObjectNode();\n \n         if (repaintAll) {\n             meta.put(\""repaintAll\"", true);\n@@ -86,11 +86,11 @@ public JsonObject createMetadata(UI ui, boolean repaintAll, boolean async,\n                 }\n                 int redirectInterval = newTimeoutInterval + 15;\n \n-                JsonObject redirect = Json.createObject();\n+                ObjectNode redirect = JacksonUtils.createObjectNode();\n                 redirect.put(\""interval\"", redirectInterval);\n                 redirect.put(\""url\"", url);\n \n-                meta.put(\""timedRedirect\"", redirect);\n+                meta.set(\""timedRedirect\"", redirect);\n             }\n             timeoutInterval = newTimeoutInterval;\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\nindex a247e8ed001..cbe590ef093 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\n@@ -25,10 +25,15 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.internal.JacksonUtils;\n+import com.vaadin.flow.internal.JsonDecodingException;\n import com.vaadin.flow.server.HandlerHelper;\n import com.vaadin.flow.server.HandlerHelper.RequestType;\n import com.vaadin.flow.server.HttpStatusCode;\n@@ -45,13 +50,6 @@\n import com.vaadin.flow.server.dau.DauEnforcementException;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonException;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonType;\n-import elemental.json.impl.JsonUtil;\n-\n import static com.vaadin.flow.shared.ApplicationConstants.RPC_INVOCATIONS;\n import static com.vaadin.flow.shared.ApplicationConstants.SERVER_SYNC_ID;\n import static com.vaadin.flow.shared.JsonConstants.RPC_NAVIGATION_LOCATION;\n@@ -139,7 +137,7 @@ public Optional<ResponseWriter> synchronizedHandleRequest(\n             writeUidl(uI, stringWriter, false);\n         } catch (ClientResentPayloadException e) {\n             stringWriter.write(uI.getInternals().getLastRequestResponse());\n-        } catch (JsonException e) {\n+        } catch (JsonDecodingException e) {\n             getLogger().error(\""Error writing JSON to response\"", e);\n             // Refresh on client side\n             return Optional.of(() -> writeRefresh(response));\n@@ -173,17 +171,17 @@ private void writeRefresh(VaadinResponse response) throws IOException {\n     }\n \n     void writeUidl(UI ui, Writer writer, boolean resync) throws IOException {\n-        JsonObject uidl = createUidl(ui, resync);\n+        ObjectNode uidl = createUidl(ui, resync);\n \n         removeOffendingMprHashFragment(uidl);\n \n         // some dirt to prevent cross site scripting\n-        String responseString = \""for(;;);[\"" + uidl.toJson() + \""]\"";\n+        String responseString = \""for(;;);[\"" + uidl + \""]\"";\n         ui.getInternals().setLastRequestResponse(responseString);\n         writer.write(responseString);\n     }\n \n-    JsonObject createUidl(UI ui, boolean resync) {\n+    ObjectNode createUidl(UI ui, boolean resync) {\n         return new UidlWriter().createUidl(ui, false, resync);\n     }\n \n@@ -250,21 +248,21 @@ public static void commitJsonResponse(VaadinResponse response, String json)\n         outputStream.flush();\n     }\n \n-    private void removeOffendingMprHashFragment(JsonObject uidl) {\n-        if (!uidl.hasKey(EXECUTE)) {\n+    private void removeOffendingMprHashFragment(ObjectNode uidl) {\n+        if (!uidl.has(EXECUTE)) {\n             return;\n         }\n \n-        JsonArray exec = uidl.getArray(EXECUTE);\n+        ArrayNode exec = (ArrayNode) uidl.get(EXECUTE);\n         String location = null;\n         int idx = -1;\n-        for (int i = 0; i < exec.length(); i++) {\n-            JsonArray arr = exec.get(i);\n-            for (int j = 0; j < arr.length(); j++) {\n-                if (!arr.get(j).getType().equals(JsonType.STRING)) {\n+        for (int i = 0; i < exec.size(); i++) {\n+            ArrayNode arr = (ArrayNode) exec.get(i);\n+            for (int j = 0; j < arr.size(); j++) {\n+                if (!arr.get(j).getNodeType().equals(JsonNodeType.STRING)) {\n                     continue;\n                 }\n-                String script = arr.getString(j);\n+                String script = arr.get(j).textValue();\n                 if (script.contains(\""history.pushState\"")) {\n                     idx = i;\n                     continue;\n@@ -273,10 +271,10 @@ private void removeOffendingMprHashFragment(JsonObject uidl) {\n                     continue;\n                 }\n \n-                JsonObject json = JsonUtil.parse(\""{\"" + script + \""}\"");\n+                ObjectNode json = JacksonUtils.readTree(\""{\"" + script + \""}\"");\n                 location = removeHashInV7Uidl(json);\n                 if (location != null) {\n-                    script = JsonUtil.stringify(json);\n+                    script = json.toPrettyString();\n                     // remove curly brackets\n                     script = script.substring(1, script.length() - 1);\n                     arr.set(j, script);\n@@ -285,30 +283,28 @@ private void removeOffendingMprHashFragment(JsonObject uidl) {\n         }\n \n         if (location != null) {\n-            idx = idx >= 0 ? idx : exec.length();\n-            JsonArray arr = Json.createArray();\n-            arr.set(0, \""\"");\n-            arr.set(1,\n-                    String.format(\n-                            location.startsWith(\""http\"") ? PUSH_STATE_LOCATION\n-                                    : PUSH_STATE_HASH,\n-                            location));\n+            idx = idx >= 0 ? idx : exec.size();\n+            ArrayNode arr = JacksonUtils.createArrayNode();\n+            arr.add(\""\"");\n+            arr.add(String\n+                    .format(location.startsWith(\""http\"") ? PUSH_STATE_LOCATION\n+                            : PUSH_STATE_HASH, location));\n             exec.set(idx, arr);\n         }\n     }\n \n-    private String removeHashInV7Uidl(JsonObject json) {\n+    private String removeHashInV7Uidl(ObjectNode json) {\n         String removed = null;\n-        JsonArray changes = json.getArray(CHANGES);\n-        for (int i = 0; i < changes.length(); i++) {\n-            String hash = removeHashInChange(changes.getArray(i));\n+        ArrayNode changes = (ArrayNode) json.get(CHANGES);\n+        for (int i = 0; i < changes.size(); i++) {\n+            String hash = removeHashInChange((ArrayNode) changes.get(i));\n             if (hash != null) {\n                 removed = hash;\n             }\n         }\n-        JsonArray rpcs = json.getArray(RPC);\n-        for (int i = 0; i < rpcs.length(); i++) {\n-            String hash = removeHashInRpc(rpcs.getArray(i));\n+        ArrayNode rpcs = (ArrayNode) json.get(RPC);\n+        for (int i = 0; i < rpcs.size(); i++) {\n+            String hash = removeHashInRpc((ArrayNode) rpcs.get(i));\n             if (removed == null && hash != null) {\n                 removed = hash;\n             }\n@@ -316,21 +312,21 @@ private String removeHashInV7Uidl(JsonObject json) {\n         return removed;\n     }\n \n-    private String removeHashInChange(JsonArray change) {\n-        if (change.length() < 3\n-                || !change.get(2).getType().equals(JsonType.ARRAY)) {\n+    private String removeHashInChange(ArrayNode change) {\n+        if (change.size() < 3\n+                || !change.get(2).getNodeType().equals(JsonNodeType.ARRAY)) {\n             return null;\n         }\n-        JsonArray value = change.getArray(2);\n-        if (value.length() < 2\n-                || !value.get(1).getType().equals(JsonType.OBJECT)) {\n+        ArrayNode value = (ArrayNode) change.get(2);\n+        if (value.size() < 2\n+                || !value.get(1).getNodeType().equals(JsonNodeType.OBJECT)) {\n             return null;\n         }\n-        JsonObject location = value.getObject(1);\n-        if (!location.hasKey(LOCATION)) {\n+        ObjectNode location = (ObjectNode) value.get(1);\n+        if (!location.has(LOCATION)) {\n             return null;\n         }\n-        String url = location.getString(LOCATION);\n+        String url = location.get(LOCATION).textValue();\n         Matcher match = URL_PATTERN.matcher(url);\n         if (match.find()) {\n             location.put(LOCATION, match.group(1));\n@@ -339,18 +335,19 @@ private String removeHashInChange(JsonArray change) {\n         return null;\n     }\n \n-    private String removeHashInRpc(JsonArray rpc) {\n-        if (rpc.length() != 4 || !rpc.get(1).getType().equals(JsonType.STRING)\n-                || !rpc.get(2).getType().equals(JsonType.STRING)\n-                || !rpc.get(3).getType().equals(JsonType.ARRAY)\n+    private String removeHashInRpc(ArrayNode rpc) {\n+        if (rpc.size() != 4\n+                || !rpc.get(1).getNodeType().equals(JsonNodeType.STRING)\n+                || !rpc.get(2).getNodeType().equals(JsonNodeType.STRING)\n+                || !rpc.get(3).getNodeType().equals(JsonNodeType.ARRAY)\n                 || !\""com.vaadin.shared.extension.javascriptmanager.ExecuteJavaScriptRpc\""\n-                        .equals(rpc.getString(1))\n-                || !\""executeJavaScript\"".equals(rpc.getString(2))) {\n+                        .equals(rpc.get(1).textValue())\n+                || !\""executeJavaScript\"".equals(rpc.get(2).textValue())) {\n             return null;\n         }\n-        JsonArray scripts = rpc.getArray(3);\n-        for (int j = 0; j < scripts.length(); j++) {\n-            String exec = scripts.getString(j);\n+        ArrayNode scripts = (ArrayNode) rpc.get(3);\n+        for (int j = 0; j < scripts.size(); j++) {\n+            String exec = scripts.get(j).textValue();\n             Matcher match = HASH_PATTERN.matcher(exec);\n             if (match.find()) {\n                 // replace JS with a noop\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java\nindex ec716fe0a91..08a45826e54 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlWriter.java\n@@ -33,6 +33,9 @@\n import java.util.function.Consumer;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -44,7 +47,8 @@\n import com.vaadin.flow.component.internal.PendingJavaScriptInvocation;\n import com.vaadin.flow.component.internal.UIInternals;\n import com.vaadin.flow.function.SerializableConsumer;\n-import com.vaadin.flow.internal.JsonCodec;\n+import com.vaadin.flow.internal.JacksonCodec;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.JsonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.StateTree;\n@@ -63,7 +67,6 @@\n import com.vaadin.flow.shared.ui.Dependency;\n import com.vaadin.flow.shared.ui.LoadMode;\n \n-import elemental.json.Json;\n import elemental.json.JsonArray;\n import elemental.json.JsonObject;\n import elemental.json.JsonValue;\n@@ -133,8 +136,8 @@ public WebBrowser getBrowser() {\n      *            True iff the client should be asked to resynchronize\n      * @return JSON object containing the UIDL response\n      */\n-    public JsonObject createUidl(UI ui, boolean async, boolean resync) {\n-        JsonObject response = Json.createObject();\n+    public ObjectNode createUidl(UI ui, boolean async, boolean resync) {\n+        ObjectNode response = JacksonUtils.createObjectNode();\n \n         UIInternals uiInternals = ui.getInternals();\n \n@@ -159,13 +162,13 @@ public JsonObject createUidl(UI ui, boolean async, boolean resync) {\n         SystemMessages messages = service.getSystemMessages(ui.getLocale(),\n                 null);\n \n-        JsonObject meta = new MetadataWriter().createMetadata(ui, false, async,\n+        ObjectNode meta = new MetadataWriter().createMetadata(ui, false, async,\n                 messages);\n-        if (meta.keys().length > 0) {\n-            response.put(\""meta\"", meta);\n+        if (!JacksonUtils.getKeys(meta).isEmpty()) {\n+            response.set(\""meta\"", meta);\n         }\n \n-        JsonArray stateChanges = Json.createArray();\n+        ArrayNode stateChanges = JacksonUtils.createArrayNode();\n \n         encodeChanges(ui, stateChanges);\n \n@@ -173,11 +176,11 @@ public JsonObject createUidl(UI ui, boolean async, boolean resync) {\n                 new ResolveContext(service, session.getBrowser()));\n \n         if (uiInternals.getConstantPool().hasNewConstants()) {\n-            response.put(\""constants\"",\n+            response.set(\""constants\"",\n                     uiInternals.getConstantPool().dumpConstants());\n         }\n-        if (stateChanges.length() != 0) {\n-            response.put(\""changes\"", stateChanges);\n+        if (!stateChanges.isEmpty()) {\n+            response.set(\""changes\"", stateChanges);\n         }\n \n         List<PendingJavaScriptInvocation> executeJavaScriptList = uiInternals\n@@ -211,11 +214,11 @@ public JsonObject createUidl(UI ui, boolean async, boolean resync) {\n      *            false if it is a response to a client message.\n      * @return JSON object containing the UIDL response\n      */\n-    public JsonObject createUidl(UI ui, boolean async) {\n+    public ObjectNode createUidl(UI ui, boolean async) {\n         return createUidl(ui, async, false);\n     }\n \n-    private static void populateDependencies(JsonObject response,\n+    private static void populateDependencies(ObjectNode response,\n             DependencyList dependencyList, ResolveContext context) {\n         Collection<Dependency> pendingSendToClient = dependencyList\n                 .getPendingSendToClient();\n@@ -228,8 +231,15 @@ private static void populateDependencies(JsonObject response,\n \n         if (!pendingSendToClient.isEmpty()) {\n             groupDependenciesByLoadMode(pendingSendToClient, context)\n-                    .forEach((loadMode, dependencies) -> response\n-                            .put(loadMode.name(), dependencies));\n+                    .forEach((loadMode, dependencies) -> {\n+                        try {\n+                            response.set(loadMode.name(),\n+                                    JacksonUtils.getMapper()\n+                                            .readTree(dependencies.toJson()));\n+                        } catch (JsonProcessingException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    });\n         }\n         dependencyList.clearPendingSendToClient();\n     }\n@@ -302,11 +312,11 @@ private static InputStream getInlineResourceStream(String url,\n     }\n \n     // non-private for testing purposes\n-    static JsonArray encodeExecuteJavaScriptList(\n+    static ArrayNode encodeExecuteJavaScriptList(\n             List<PendingJavaScriptInvocation> executeJavaScriptList) {\n         return executeJavaScriptList.stream()\n                 .map(UidlWriter::encodeExecuteJavaScript)\n-                .collect(JsonUtils.asArray());\n+                .collect(JacksonUtils.asArray());\n     }\n \n     private static ReturnChannelRegistration createReturnValueChannel(\n@@ -325,10 +335,21 @@ private static ReturnChannelRegistration createReturnValueChannel(\n         return channel;\n     }\n \n-    private static JsonArray encodeExecuteJavaScript(\n+    private static ArrayNode encodeExecuteJavaScript(\n             PendingJavaScriptInvocation invocation) {\n         List<Object> parametersList = invocation.getInvocation()\n                 .getParameters();\n+        // TODO: remove when execJs takes Jackson instead of elemental\n+        parametersList = parametersList.stream().map(param -> {\n+            if (param instanceof JsonArray) {\n+                return JacksonUtils.mapElemental((JsonArray) param);\n+            } else if (param instanceof JsonObject) {\n+                return JacksonUtils.mapElemental((JsonObject) param);\n+            } else if (param instanceof JsonValue) {\n+                return JacksonUtils.mapElemental((JsonValue) param);\n+            }\n+            return param;\n+        }).toList();\n \n         Stream<Object> parameters = parametersList.stream();\n         String expression = invocation.getInvocation().getExpression();\n@@ -370,9 +391,9 @@ private static JsonArray encodeExecuteJavaScript(\n \n         // [argument1, argument2, ..., script]\n         return Stream\n-                .concat(parameters.map(JsonCodec::encodeWithTypeInfo),\n-                        Stream.of(Json.create(expression)))\n-                .collect(JsonUtils.asArray());\n+                .concat(parameters.map(JacksonCodec::encodeWithTypeInfo),\n+                        Stream.of(JacksonUtils.createNode(expression)))\n+                .collect(JacksonUtils.asArray());\n     }\n \n     /**\n@@ -387,7 +408,7 @@ private static JsonArray encodeExecuteJavaScript(\n      *            a JSON array to put state changes into\n      * @see StateTree#runExecutionsBeforeClientResponse()\n      */\n-    private void encodeChanges(UI ui, JsonArray stateChanges) {\n+    private void encodeChanges(UI ui, ArrayNode stateChanges) {\n         UIInternals uiInternals = ui.getInternals();\n         StateTree stateTree = uiInternals.getStateTree();\n \n@@ -402,8 +423,7 @@ private void encodeChanges(UI ui, JsonArray stateChanges) {\n             }\n \n             // Encode the actual change\n-            stateChanges.set(stateChanges.length(),\n-                    change.toJson(uiInternals.getConstantPool()));\n+            stateChanges.add(change.toJson(uiInternals.getConstantPool()));\n         };\n         // A collectChanges round may add additional changes that needs to be\n         // collected.\n@@ -443,14 +463,14 @@ private void addComponentHierarchy(UI ui,\n      * Adds the performance timing data (used by TestBench 3) to the UIDL\n      * response.\n      */\n-    private JsonValue createPerformanceData(UI ui) {\n-        JsonArray timings = Json.createArray();\n-        timings.set(0, ui.getSession().getCumulativeRequestDuration());\n-        timings.set(1, ui.getSession().getLastRequestDuration());\n+    private ArrayNode createPerformanceData(UI ui) {\n+        ArrayNode timings = JacksonUtils.createArrayNode();\n+        timings.add(ui.getSession().getCumulativeRequestDuration());\n+        timings.add(ui.getSession().getLastRequestDuration());\n         return timings;\n     }\n \n-    private static final Logger getLogger() {\n+    private static Logger getLogger() {\n         return LoggerFactory.getLogger(UidlWriter.class.getName());\n     }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\nindex 0be776864a1..7076006c180 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\n@@ -622,8 +622,8 @@ protected boolean handleWebComponentResyncRequest(BootstrapContext context,\n             return false;\n         }\n \n-        ObjectNode json = JacksonUtils.mapElemental(\n-                new UidlWriter().createUidl(context.getUI(), true, true));\n+        ObjectNode json = new UidlWriter().createUidl(context.getUI(), true,\n+                true);\n         json.put(ApplicationConstants.UI_ID, context.getUI().getUIId());\n         json.put(ApplicationConstants.UIDL_SECURITY_TOKEN_ID,\n                 context.getUI().getCsrfToken());\n"", ""test_patch"": ""diff --git a/flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelTest.java b/flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelTest.java\nindex 4170c7ed912..a3b2b251b46 100644\n--- a/flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelTest.java\n+++ b/flow-polymer-template/src/test/java/com/vaadin/flow/templatemodel/TemplateModelTest.java\n@@ -671,9 +671,9 @@ public void testDoubleValue() {\n \n         Assert.assertEquals(null, model.getDouble());\n \n-        model.setDouble(new Double(1.0D));\n+        model.setDouble(Double.valueOf(1.0D));\n \n-        Assert.assertEquals(new Double(1.0D), model.getDouble());\n+        Assert.assertEquals(Double.valueOf(1.0D), model.getDouble());\n     }\n \n     @Test\n@@ -695,9 +695,9 @@ public void testIntegerValue() {\n \n         Assert.assertEquals(null, model.getInteger());\n \n-        model.setInteger(new Integer(10));\n+        model.setInteger(Integer.valueOf(10));\n \n-        Assert.assertEquals(new Integer(10), model.getInteger());\n+        Assert.assertEquals(Integer.valueOf(10), model.getInteger());\n     }\n \n     @Test\n@@ -1443,7 +1443,7 @@ public void emptyModelListShouldBeRepopulatedAfterDetach() {\n         assertTrue(\n                 \""Changes to empty list after attach and detach should be the same\"",\n                 changesAfterDetach.get(0).toJson(null)\n-                        .jsEquals(changesAfterAttach.get(0).toJson(null)));\n+                        .equals(changesAfterAttach.get(0).toJson(null)));\n \n         assertTrue(\n                 \""After the empty model list is detached and created a change, no more changes are created\"",\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java b/flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java\nindex fe087e173e2..26b5730f577 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/DomEventTest.java\n@@ -18,20 +18,22 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n import com.vaadin.flow.dom.DebouncePhase;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.internal.ConstantPoolKey;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.change.MapPutChange;\n import com.vaadin.flow.internal.change.NodeChange;\n import com.vaadin.flow.internal.nodefeature.ElementListenerMap;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n import elemental.json.JsonObject;\n-import elemental.json.JsonType;\n \n public class DomEventTest {\n     @DomEvent(\""event\"")\n@@ -104,42 +106,47 @@ public void debounceFilter() {\n     private <T extends ComponentEvent<Component>> void assertSettings(\n             Class<T> eventType, String expectedFilter, int expectedTimeout,\n             DebouncePhase... expectedPhases) {\n-        JsonObject settings = getEventSettings(eventType);\n+        JsonNode settings = getEventSettings(eventType);\n \n         if (expectedFilter == null) {\n-            Assert.assertArrayEquals(new String[0], settings.keys());\n+            Assert.assertEquals(new ArrayList<String>(0),\n+                    JacksonUtils.getKeys(settings));\n             return;\n         }\n \n-        Assert.assertArrayEquals(new String[] { expectedFilter },\n-                settings.keys());\n+        Assert.assertEquals(new ArrayList<String>() {\n+            {\n+                add(expectedFilter);\n+            }\n+        }, JacksonUtils.getKeys(settings));\n \n         if (expectedTimeout == 0 && expectedPhases.length == 0) {\n             Assert.assertEquals(\n                     \""There should be a boolean instead of empty phase list\"",\n-                    JsonType.BOOLEAN, settings.get(expectedFilter).getType());\n-            boolean isFilter = settings.getBoolean(expectedFilter);\n+                    JsonNodeType.BOOLEAN,\n+                    settings.get(expectedFilter).getNodeType());\n+            boolean isFilter = settings.get(expectedFilter).booleanValue();\n             Assert.assertTrue(\""Expression should be used as a filter\"",\n                     isFilter);\n             return;\n         }\n \n-        JsonArray filterSettings = settings.getArray(expectedFilter);\n+        ArrayNode filterSettings = (ArrayNode) settings.get(expectedFilter);\n \n-        Assert.assertEquals(1, filterSettings.length());\n+        Assert.assertEquals(1, filterSettings.size());\n \n-        JsonArray filterSetting = filterSettings.getArray(0);\n+        ArrayNode filterSetting = (ArrayNode) filterSettings.get(0);\n \n         Assert.assertEquals(\""Debunce timeout should be as expected\"",\n-                expectedTimeout, (int) filterSetting.getNumber(0));\n+                expectedTimeout, filterSetting.get(0).intValue());\n \n         Assert.assertEquals(\""Number of phases should be as expected\"",\n-                expectedPhases.length, filterSetting.length() - 1);\n+                expectedPhases.length, filterSetting.size() - 1);\n \n         for (int i = 0; i < expectedPhases.length; i++) {\n             String expectedIdentifier = expectedPhases[i].getIdentifier();\n             Assert.assertEquals(expectedIdentifier,\n-                    filterSetting.getString(i + 1));\n+                    filterSetting.get(i + 1).textValue());\n         }\n     }\n \n@@ -147,7 +154,7 @@ private void assertFilter(String expectedFilter,\n             JsonObject filterSettings) {\n     }\n \n-    private <T extends ComponentEvent<Component>> JsonObject getEventSettings(\n+    private <T extends ComponentEvent<Component>> JsonNode getEventSettings(\n             Class<T> eventType) {\n         Component component = new Component(new Element(\""element\"")) {\n         };\n@@ -165,13 +172,12 @@ private <T extends ComponentEvent<Component>> JsonObject getEventSettings(\n         Assert.assertEquals(\""event\"", change.getKey());\n \n         ConstantPoolKey value = (ConstantPoolKey) change.getValue();\n-        JsonObject constantPoolUpdate = Json.createObject();\n+        ObjectNode constantPoolUpdate = JacksonUtils.createObjectNode();\n         value.export(constantPoolUpdate);\n \n-        String[] keys = constantPoolUpdate.keys();\n-        Assert.assertEquals(1, keys.length);\n-        JsonObject eventSettings = constantPoolUpdate.getObject(keys[0]);\n+        List<String> keys = JacksonUtils.getKeys(constantPoolUpdate);\n+        Assert.assertEquals(1, keys.size());\n \n-        return eventSettings;\n+        return constantPoolUpdate.get(keys.get(0));\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java\nindex 93d9252ee58..01c5c0e2585 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/ConstantPoolTest.java\n@@ -15,44 +15,45 @@\n  */\n package com.vaadin.flow.internal;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n public class ConstantPoolTest {\n     private ConstantPool constantPool = new ConstantPool();\n \n     @Test\n     public void newConstantPool_noNewItems() {\n         Assert.assertFalse(constantPool.hasNewConstants());\n-        Assert.assertEquals(0, constantPool.dumpConstants().keys().length);\n+        Assert.assertEquals(0,\n+                JacksonUtils.getKeys(constantPool.dumpConstants()).size());\n     }\n \n     @Test\n     public void valueIsRegistered() {\n-        ConstantPoolKey reference = new ConstantPoolKey(Json.createObject());\n+        ConstantPoolKey reference = new ConstantPoolKey(\n+                JacksonUtils.createObjectNode());\n \n         String constantId = constantPool.getConstantId(reference);\n \n         Assert.assertTrue(constantPool.hasNewConstants());\n \n-        JsonObject dump = constantPool.dumpConstants();\n+        ObjectNode dump = constantPool.dumpConstants();\n \n-        Assert.assertEquals(1, dump.keys().length);\n-        Assert.assertEquals(\""{}\"", dump.get(constantId).toJson());\n+        Assert.assertEquals(1, JacksonUtils.getKeys(dump).size());\n+        Assert.assertEquals(\""{}\"", dump.get(constantId).toString());\n     }\n \n     @Test\n     public void sameValue_sameId() {\n-        ConstantPoolKey reference = new ConstantPoolKey(Json.createObject());\n+        ConstantPoolKey reference = new ConstantPoolKey(\n+                JacksonUtils.createObjectNode());\n \n         String constantId = constantPool.getConstantId(reference);\n         constantPool.dumpConstants();\n \n-        String otherId = constantPool\n-                .getConstantId(new ConstantPoolKey(Json.createObject()));\n+        String otherId = constantPool.getConstantId(\n+                new ConstantPoolKey(JacksonUtils.createObjectNode()));\n \n         Assert.assertEquals(constantId, otherId);\n         Assert.assertFalse(constantPool.hasNewConstants());\n@@ -60,13 +61,14 @@ public void sameValue_sameId() {\n \n     @Test\n     public void differentValue_differentId() {\n-        ConstantPoolKey reference = new ConstantPoolKey(Json.createObject());\n+        ConstantPoolKey reference = new ConstantPoolKey(\n+                JacksonUtils.createObjectNode());\n \n         String constantId = constantPool.getConstantId(reference);\n         constantPool.dumpConstants();\n \n-        String otherId = constantPool\n-                .getConstantId(new ConstantPoolKey(Json.createArray()));\n+        String otherId = constantPool.getConstantId(\n+                new ConstantPoolKey(JacksonUtils.createArrayNode()));\n \n         Assert.assertNotEquals(constantId, otherId);\n         Assert.assertTrue(constantPool.hasNewConstants());\n@@ -75,9 +77,9 @@ public void differentValue_differentId() {\n     @Test\n     public void constantPoolKey_exportedDirectly_idCreated() {\n         final ConstantPoolKey constantPoolKey = new ConstantPoolKey(\n-                Json.createObject());\n-        final JsonObject message = Json.createObject();\n+                JacksonUtils.createObjectNode());\n+        final ObjectNode message = JacksonUtils.createObjectNode();\n         constantPoolKey.export(message);\n-        Assert.assertTrue(message.hasKey(constantPoolKey.getId()));\n+        Assert.assertTrue(message.has(constantPoolKey.getId()));\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/change/ListChangeTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/change/ListChangeTest.java\nindex 92f8d1088d2..ce5d0c34fb0 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/change/ListChangeTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/change/ListChangeTest.java\n@@ -18,6 +18,8 @@\n \n import java.util.Arrays;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n@@ -29,9 +31,6 @@\n import com.vaadin.flow.internal.nodefeature.NodeList;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n public class ListChangeTest {\n     private NodeList<StateNode> feature = AbstractNodeFeatureTest\n             .createFeature(ElementChildrenList.class);\n@@ -43,23 +42,23 @@ public void testBasicJson() {\n         ListAddChange<StateNode> change = new ListAddChange<>(feature, true, 0,\n                 Arrays.asList(child1, child2));\n \n-        JsonObject json = change.toJson(null);\n+        ObjectNode json = change.toJson(null);\n \n         Assert.assertEquals(change.getNode().getId(),\n-                (int) json.getNumber(JsonConstants.CHANGE_NODE));\n+                json.get(JsonConstants.CHANGE_NODE).intValue());\n         Assert.assertEquals(NodeFeatureRegistry.getId(feature.getClass()),\n-                (int) json.getNumber(JsonConstants.CHANGE_FEATURE));\n+                json.get(JsonConstants.CHANGE_FEATURE).intValue());\n         Assert.assertEquals(JsonConstants.CHANGE_TYPE_SPLICE,\n-                json.getString(JsonConstants.CHANGE_TYPE));\n+                json.get(JsonConstants.CHANGE_TYPE).textValue());\n         Assert.assertEquals(0,\n-                (int) json.getNumber(JsonConstants.CHANGE_SPLICE_INDEX));\n+                json.get(JsonConstants.CHANGE_SPLICE_INDEX).intValue());\n \n-        JsonArray addNodes = json\n-                .getArray(JsonConstants.CHANGE_SPLICE_ADD_NODES);\n-        Assert.assertEquals(2, addNodes.length());\n+        ArrayNode addNodes = (ArrayNode) json\n+                .get(JsonConstants.CHANGE_SPLICE_ADD_NODES);\n+        Assert.assertEquals(2, addNodes.size());\n \n-        Assert.assertEquals(child1.getId(), (int) addNodes.getNumber(0));\n-        Assert.assertEquals(child2.getId(), (int) addNodes.getNumber(1));\n+        Assert.assertEquals(child1.getId(), addNodes.get(0).intValue());\n+        Assert.assertEquals(child2.getId(), addNodes.get(1).intValue());\n     }\n \n     @Test\n@@ -67,9 +66,9 @@ public void testZeroRemoveNotInJson() {\n         ListAddChange<StateNode> change = new ListAddChange<>(feature, false, 1,\n                 Arrays.asList());\n \n-        JsonObject json = change.toJson(null);\n+        ObjectNode json = change.toJson(null);\n \n-        Assert.assertFalse(json.hasKey(JsonConstants.CHANGE_SPLICE_REMOVE));\n+        Assert.assertFalse(json.has(JsonConstants.CHANGE_SPLICE_REMOVE));\n     }\n \n     @Test\n@@ -77,8 +76,8 @@ public void testEmptyAddNotInJson() {\n         ListAddChange<StateNode> change = new ListAddChange<>(feature, false, 1,\n                 Arrays.asList());\n \n-        JsonObject json = change.toJson(null);\n+        ObjectNode json = change.toJson(null);\n \n-        Assert.assertFalse(json.hasKey(JsonConstants.CHANGE_SPLICE_ADD_NODES));\n+        Assert.assertFalse(json.has(JsonConstants.CHANGE_SPLICE_ADD_NODES));\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/change/MapPutChangeTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/change/MapPutChangeTest.java\nindex 490063db2f9..efbee4998af 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/change/MapPutChangeTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/change/MapPutChangeTest.java\n@@ -16,9 +16,13 @@\n \n package com.vaadin.flow.internal.change;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.StateNodeTest;\n import com.vaadin.flow.internal.nodefeature.AbstractNodeFeatureTest;\n@@ -27,11 +31,6 @@\n import com.vaadin.flow.internal.nodefeature.NodeMap;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonType;\n-import elemental.json.JsonValue;\n-\n public class MapPutChangeTest {\n     private NodeMap feature = AbstractNodeFeatureTest\n             .createFeature(ElementPropertyMap.class);\n@@ -40,38 +39,39 @@ public class MapPutChangeTest {\n     public void testJson() {\n         MapPutChange change = new MapPutChange(feature, \""some\"", \""string\"");\n \n-        JsonObject json = change.toJson(null);\n+        ObjectNode json = change.toJson(null);\n \n         Assert.assertEquals(change.getNode().getId(),\n-                (int) json.getNumber(JsonConstants.CHANGE_NODE));\n+                json.get(JsonConstants.CHANGE_NODE).intValue());\n         Assert.assertEquals(NodeFeatureRegistry.getId(feature.getClass()),\n-                (int) json.getNumber(JsonConstants.CHANGE_FEATURE));\n+                json.get(JsonConstants.CHANGE_FEATURE).intValue());\n         Assert.assertEquals(JsonConstants.CHANGE_TYPE_PUT,\n-                json.getString(JsonConstants.CHANGE_TYPE));\n+                json.get(JsonConstants.CHANGE_TYPE).textValue());\n         Assert.assertEquals(\""some\"",\n-                json.getString(JsonConstants.CHANGE_MAP_KEY));\n+                json.get(JsonConstants.CHANGE_MAP_KEY).textValue());\n         Assert.assertEquals(\""string\"",\n-                json.getString(JsonConstants.CHANGE_PUT_VALUE));\n+                json.get(JsonConstants.CHANGE_PUT_VALUE).textValue());\n     }\n \n     @Test\n     public void testJsonValueTypes() {\n-        JsonValue stringValue = getValue(\""string\"");\n-        Assert.assertSame(JsonType.STRING, stringValue.getType());\n-        Assert.assertEquals(\""string\"", stringValue.asString());\n+        JsonNode stringValue = getValue(\""string\"");\n+        Assert.assertSame(JsonNodeType.STRING, stringValue.getNodeType());\n+        Assert.assertEquals(\""string\"", stringValue.textValue());\n \n-        JsonValue numberValue = getValue(Integer.valueOf(1));\n-        Assert.assertSame(JsonType.NUMBER, numberValue.getType());\n-        Assert.assertEquals(1, numberValue.asNumber(), 0);\n+        JsonNode numberValue = getValue(Integer.valueOf(1));\n+        Assert.assertSame(JsonNodeType.NUMBER, numberValue.getNodeType());\n+        Assert.assertEquals(1, numberValue.intValue(), 0);\n \n-        JsonValue booleanValue = getValue(Boolean.TRUE);\n-        Assert.assertSame(JsonType.BOOLEAN, booleanValue.getType());\n+        JsonNode booleanValue = getValue(Boolean.TRUE);\n+        Assert.assertSame(JsonNodeType.BOOLEAN, booleanValue.getNodeType());\n         Assert.assertTrue(booleanValue.asBoolean());\n \n-        JsonObject jsonInput = Json.createObject();\n-        JsonValue jsonValue = getValue(jsonInput);\n-        Assert.assertSame(JsonType.OBJECT, jsonValue.getType());\n-        Assert.assertSame(jsonInput, jsonValue);\n+        ObjectNode jsonInput = JacksonUtils.createObjectNode();\n+        JsonNode jsonValue = getValue(jsonInput);\n+        Assert.assertSame(JsonNodeType.OBJECT, jsonValue.getNodeType());\n+        // Should use same when all *Change classes populateJson updated\n+        Assert.assertEquals(jsonInput, jsonValue);\n     }\n \n     @Test\n@@ -79,17 +79,17 @@ public void testNodeValueType() {\n         StateNode value = StateNodeTest.createEmptyNode(\""value\"");\n         MapPutChange change = new MapPutChange(feature, \""myKey\"", value);\n \n-        JsonObject json = change.toJson(null);\n-        Assert.assertFalse(json.hasKey(JsonConstants.CHANGE_PUT_VALUE));\n+        ObjectNode json = change.toJson(null);\n+        Assert.assertFalse(json.has(JsonConstants.CHANGE_PUT_VALUE));\n \n-        JsonValue nodeValue = json.get(JsonConstants.CHANGE_PUT_NODE_VALUE);\n-        Assert.assertSame(JsonType.NUMBER, nodeValue.getType());\n-        Assert.assertEquals(value.getId(), (int) nodeValue.asNumber());\n+        JsonNode nodeValue = json.get(JsonConstants.CHANGE_PUT_NODE_VALUE);\n+        Assert.assertSame(JsonNodeType.NUMBER, nodeValue.getNodeType());\n+        Assert.assertEquals(value.getId(), nodeValue.intValue());\n     }\n \n-    private JsonValue getValue(Object input) {\n+    private JsonNode getValue(Object input) {\n         MapPutChange change = new MapPutChange(feature, \""myKey\"", input);\n-        JsonObject json = change.toJson(null);\n+        ObjectNode json = change.toJson(null);\n         return json.get(JsonConstants.CHANGE_PUT_VALUE);\n     }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/change/MapRemoveChangeTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/change/MapRemoveChangeTest.java\nindex c80b87ede41..47a8ee94ad5 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/change/MapRemoveChangeTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/change/MapRemoveChangeTest.java\n@@ -16,6 +16,7 @@\n \n package com.vaadin.flow.internal.change;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n@@ -25,8 +26,6 @@\n import com.vaadin.flow.internal.nodefeature.NodeMap;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.JsonObject;\n-\n public class MapRemoveChangeTest {\n     private NodeMap feature = AbstractNodeFeatureTest\n             .createFeature(ElementPropertyMap.class);\n@@ -35,16 +34,16 @@ public class MapRemoveChangeTest {\n     public void testJson() {\n         MapRemoveChange change = new MapRemoveChange(feature, \""some\"");\n \n-        JsonObject json = change.toJson(null);\n+        ObjectNode json = change.toJson(null);\n \n         Assert.assertEquals(change.getNode().getId(),\n-                (int) json.getNumber(JsonConstants.CHANGE_NODE));\n+                json.get(JsonConstants.CHANGE_NODE).intValue());\n         Assert.assertEquals(NodeFeatureRegistry.getId(feature.getClass()),\n-                (int) json.getNumber(JsonConstants.CHANGE_FEATURE));\n+                json.get(JsonConstants.CHANGE_FEATURE).intValue());\n         Assert.assertEquals(JsonConstants.CHANGE_TYPE_REMOVE,\n-                json.getString(JsonConstants.CHANGE_TYPE));\n+                json.get(JsonConstants.CHANGE_TYPE).textValue());\n         Assert.assertEquals(\""some\"",\n-                json.getString(JsonConstants.CHANGE_MAP_KEY));\n+                json.get(JsonConstants.CHANGE_MAP_KEY).textValue());\n     }\n \n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java\nindex 98e5037192a..5bd2c620182 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlersTest.java\n@@ -16,9 +16,6 @@\n \n package com.vaadin.flow.internal.nodefeature;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n@@ -29,6 +26,9 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import net.jcip.annotations.NotThreadSafe;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mockito;\n@@ -43,13 +43,12 @@\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.ConstantPoolKey;\n import com.vaadin.flow.internal.HasCurrentService;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.server.VaadinService;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.impl.JreJsonArray;\n-import net.jcip.annotations.NotThreadSafe;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n \n /**\n  * @author Vaadin Ltd\n@@ -152,18 +151,18 @@ private void addAndVerifyMethod(Method method) {\n         assertEquals(1, methodCollector.size());\n         assertEquals(method, methodCollector.iterator().next());\n         assertEquals(method.getParameters().length,\n-                extractParametersData(method).length());\n+                extractParametersData(method).size());\n     }\n \n-    private JreJsonArray extractParametersData(Method method) {\n+    private ArrayNode extractParametersData(Method method) {\n         ConstantPoolKey parametersData = (ConstantPoolKey) stateNode\n                 .getFeature(PolymerEventListenerMap.class)\n                 .get(method.getName());\n         assertNotNull(parametersData);\n \n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         parametersData.export(json);\n-        return json.get(parametersData.getId());\n+        return (ArrayNode) json.get(parametersData.getId());\n     }\n \n     @Test\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/MetadataWriterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/MetadataWriterTest.java\nindex 14110f98cb3..6729cc8f6e9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/MetadataWriterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/MetadataWriterTest.java\n@@ -17,6 +17,7 @@\n \n import java.io.IOException;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -28,8 +29,6 @@\n import com.vaadin.flow.server.VaadinSessionState;\n import com.vaadin.flow.server.WrappedSession;\n \n-import elemental.json.JsonObject;\n-\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n@@ -121,9 +120,9 @@ public void writeSessionExpiredTag_sessionIsClosed() throws Exception {\n \n     private void assertMetadataOutput(boolean repaintAll, boolean async,\n             String expectedOutput) {\n-        JsonObject meta = new MetadataWriter().createMetadata(ui, repaintAll,\n+        ObjectNode meta = new MetadataWriter().createMetadata(ui, repaintAll,\n                 async, messages);\n-        Assert.assertEquals(expectedOutput, meta.toJson());\n+        Assert.assertEquals(expectedOutput, meta.toString());\n     }\n \n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\nindex e833fb638bd..4fb4d2bbbab 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\n@@ -25,6 +25,8 @@\n import java.util.Optional;\n import java.util.Properties;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -32,6 +34,7 @@\n \n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.DefaultDeploymentConfiguration;\n import com.vaadin.flow.server.HandlerHelper.RequestType;\n import com.vaadin.flow.server.MockVaadinContext;\n@@ -49,9 +52,6 @@\n import com.vaadin.pro.licensechecker.dau.EnforcementException;\n import com.vaadin.tests.util.MockUI;\n \n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n-\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n@@ -201,15 +201,15 @@ public void should_modifyUidl_when_MPR() throws Exception {\n         handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n \n-        JsonObject uidl = generateUidl(true, true);\n+        ObjectNode uidl = generateUidl(true, true);\n         doReturn(uidl).when(handler).createUidl(ui, false);\n \n         handler.writeUidl(ui, writer, false);\n \n         String out = writer.toString();\n-        uidl = JsonUtil.parse(out.substring(9, out.length() - 1));\n+        uidl = JacksonUtils.readTree(out.substring(9, out.length() - 1));\n \n-        String v7Uidl = uidl.getArray(\""execute\"").getArray(2).getString(1);\n+        String v7Uidl = uidl.get(\""execute\"").get(2).get(1).textValue();\n         assertFalse(v7Uidl.contains(\""http://localhost:9998/#!away\""));\n         assertTrue(v7Uidl.contains(\""http://localhost:9998/\""));\n         assertFalse(v7Uidl.contains(\""window.location.hash = '!away';\""));\n@@ -222,17 +222,17 @@ public void should_changeURL_when_v7LocationProvided() throws Exception {\n         handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n \n-        JsonObject uidl = generateUidl(true, true);\n+        ObjectNode uidl = generateUidl(true, true);\n         doReturn(uidl).when(handler).createUidl(ui, false);\n \n         handler.writeUidl(ui, writer, false);\n \n         String out = writer.toString();\n-        uidl = JsonUtil.parse(out.substring(9, out.length() - 1));\n+        uidl = JacksonUtils.readTree(out.substring(9, out.length() - 1));\n \n         assertEquals(\n                 \""setTimeout(() => history.pushState(null, null, 'http://localhost:9998/#!away'));\"",\n-                uidl.getArray(\""execute\"").getArray(1).getString(1));\n+                uidl.get(\""execute\"").get(1).get(1).textValue());\n     }\n \n     @Test\n@@ -243,17 +243,17 @@ public void should_updateHash_when_v7LocationNotProvided()\n         handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n \n-        JsonObject uidl = generateUidl(false, true);\n+        ObjectNode uidl = generateUidl(false, true);\n         doReturn(uidl).when(handler).createUidl(ui, false);\n \n         handler.writeUidl(ui, writer, false);\n \n         String out = writer.toString();\n-        uidl = JsonUtil.parse(out.substring(9, out.length() - 1));\n+        uidl = JacksonUtils.readTree(out.substring(9, out.length() - 1));\n \n         assertEquals(\n                 \""setTimeout(() => history.pushState(null, null, location.pathname + location.search + '#!away'));\"",\n-                uidl.getArray(\""execute\"").getArray(1).getString(1));\n+                uidl.get(\""execute\"").get(1).get(1).textValue());\n     }\n \n     @Test\n@@ -263,19 +263,19 @@ public void should_not_modify_non_MPR_Uidl() throws Exception {\n         handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n \n-        JsonObject uidl = generateUidl(true, true);\n-        uidl.getArray(\""execute\"").getArray(2).remove(1);\n+        ObjectNode uidl = generateUidl(true, true);\n+        ((ArrayNode) uidl.get(\""execute\"").get(2)).remove(1);\n \n         doReturn(uidl).when(handler).createUidl(ui, false);\n \n         handler.writeUidl(ui, writer, false);\n \n-        String expected = uidl.toJson();\n+        String expected = uidl.toString();\n \n         String out = writer.toString();\n-        uidl = JsonUtil.parse(out.substring(9, out.length() - 1));\n+        uidl = JacksonUtils.readTree(out.substring(9, out.length() - 1));\n \n-        String actual = uidl.toJson();\n+        String actual = uidl.toString();\n \n         assertEquals(expected, actual);\n     }\n@@ -288,7 +288,7 @@ public void should_not_update_browser_history_if_no_hash_in_location()\n         handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n \n-        JsonObject uidl = getUidlWithNoHashInLocation();\n+        ObjectNode uidl = getUidlWithNoHashInLocation();\n \n         doReturn(uidl).when(handler).createUidl(ui, false);\n \n@@ -329,10 +329,10 @@ protected ServerRpcHandler createRpcHandler() {\n         Mockito.verify(response).setHeader(DAUUtils.STATUS_CODE_KEY, \""503\"");\n     }\n \n-    private JsonObject generateUidl(boolean withLocation, boolean withHash) {\n+    private ObjectNode generateUidl(boolean withLocation, boolean withHash) {\n \n         // @formatter:off\n-        JsonObject uidl = JsonUtil.parse(\n+        ObjectNode uidl = JacksonUtils.readTree(\n                 \""{\"" +\n                 \""  \\\""syncId\\\"": 3,\"" +\n                 \""  \\\""clientId\\\"": 3,\"" +\n@@ -387,13 +387,13 @@ private JsonObject generateUidl(boolean withLocation, boolean withHash) {\n             v7String = v7String.replace(\""___PLACE_FOR_HASH_RPC___\"", hashRpc);\n         }\n \n-        uidl.getArray(\""execute\"").getArray(2).set(1, v7String);\n+        ((ArrayNode) uidl.get(\""execute\"").get(2)).set(1, v7String);\n         return uidl;\n     }\n \n-    private JsonObject getUidlWithNoHashInLocation() {\n+    private ObjectNode getUidlWithNoHashInLocation() {\n         // @formatter:off\n-        return JsonUtil.parse(\n+        return JacksonUtils.readTree(\n                 \""{\"" +\n                 \""  \\\""syncId\\\"": 3,\"" +\n                 \""  \\\""clientId\\\"": 3,\"" +\n@@ -404,7 +404,7 @@ private JsonObject getUidlWithNoHashInLocation() {\n                 \""        0,\"" +\n                 \""        9\"" +\n                 \""      ],\"" +\n-                \""      '\\\""syncId\\\"": 1, \\\""clientId\\\"": 0, \\\""changes\\\"" : [[\\\""change\\\"",{\\\""pid\\\"":\\\""0\\\""},[\\\""0\\\"",{\\\""id\\\"":\\\""0\\\"",\\\""location\\\"":\\\""http://localhost:8080/\\\"",\\\""v\\\"":{\\\""action\\\"":\\\""\\\""}},[\\\""actions\\\"",{}]]]], \\\""state\\\"":{\\\""1\\\"":{\\\""componentSettings\\\"":[]}}, \\\""types\\\"":{\\\""0\\\"":\\\""0\\\"",\\\""1\\\"":\\\""2\\\""}, \\\""hierarchy\\\"":{\\\""0\\\"":[\\\""1\\\""]}, \\\""rpc\\\"" : [], \\\""meta\\\"" : {\\\""async\\\"":true}, \\\""resources\\\"" : {}, \\\""timings\\\"":[113, 113]',\"" +\n+                \""      \\\""'syncId': 1, 'clientId': 0, 'changes' : [['change',{'pid':'0'},['0',{'id':'0','location':'http://localhost:8080/','v':{'action':''}},['actions',{}]]]], 'state':{'1':{'componentSettings':[]}}, 'types':{'0':'0','1':'2'}, 'hierarchy':{'0':['1']}, 'rpc' : [], 'meta' : {'async':true}, 'resources' : {}, 'timings':[113, 113]\\\"",\"" +\n                 \""      \\\""ROOT\\\""\"" +\n                 \""    ]\"" +\n                 \""  ],\"" +\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java\nindex 68e8352f3df..77d27ba6f45 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlWriterTest.java\n@@ -15,8 +15,6 @@\n  */\n package com.vaadin.flow.server.communication;\n \n-import jakarta.servlet.http.HttpServletRequest;\n-\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -26,6 +24,9 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import jakarta.servlet.http.HttpServletRequest;\n import net.jcip.annotations.NotThreadSafe;\n import org.junit.After;\n import org.junit.Test;\n@@ -45,7 +46,7 @@\n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.dom.Element;\n import com.vaadin.flow.dom.ElementFactory;\n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StateTree;\n import com.vaadin.flow.router.ParentLayout;\n import com.vaadin.flow.router.Route;\n@@ -62,10 +63,6 @@\n import com.vaadin.flow.shared.ui.Dependency;\n import com.vaadin.flow.shared.ui.LoadMode;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.core.Is.is;\n@@ -187,16 +184,20 @@ public void testEncodeExecuteJavaScript_npmMode() {\n                         element.getNode(), invocation))\n                 .collect(Collectors.toList());\n \n-        JsonArray json = UidlWriter\n+        ArrayNode json = UidlWriter\n                 .encodeExecuteJavaScriptList(executeJavaScriptList);\n \n-        JsonArray expectedJson = JsonUtils.createArray(JsonUtils.createArray(\n-                // Null since element is not attached\n-                Json.createNull(), Json.create(\""$0.focus()\"")),\n-                JsonUtils.createArray(Json.create(\""Lives remaining:\""),\n-                        Json.create(3), Json.create(\""console.log($0, $1)\"")));\n-\n-        assertTrue(JsonUtils.jsonEquals(expectedJson, json));\n+        ArrayNode expectedJson = JacksonUtils.createArray(\n+                JacksonUtils.createArray(\n+                        // Null since element is not attached\n+                        JacksonUtils.nullNode(),\n+                        JacksonUtils.createNode(\""$0.focus()\"")),\n+                JacksonUtils.createArray(\n+                        JacksonUtils.createNode(\""Lives remaining:\""),\n+                        JacksonUtils.createNode(3),\n+                        JacksonUtils.createNode(\""console.log($0, $1)\"")));\n+\n+        assertTrue(JacksonUtils.jsonEquals(expectedJson, json));\n     }\n \n     @Test\n@@ -206,10 +207,10 @@ public void componentDependencies_npmMode() throws Exception {\n         addInitialComponentDependencies(ui, uidlWriter);\n \n         // no dependencies should be resent in next response\n-        JsonObject response = uidlWriter.createUidl(ui, false);\n-        assertFalse(response.hasKey(LoadMode.EAGER.name()));\n-        assertFalse(response.hasKey(LoadMode.INLINE.name()));\n-        assertFalse(response.hasKey(LoadMode.LAZY.name()));\n+        ObjectNode response = uidlWriter.createUidl(ui, false);\n+        assertFalse(response.has(LoadMode.EAGER.name()));\n+        assertFalse(response.has(LoadMode.INLINE.name()));\n+        assertFalse(response.has(LoadMode.LAZY.name()));\n     }\n \n     @Test\n@@ -222,7 +223,7 @@ public void componentDependencies_productionMode_scanForParentClasses()\n         ui.add(new ChildComponent());\n \n         // no dependencies should be resent in next response\n-        JsonObject response = uidlWriter.createUidl(ui, false);\n+        ObjectNode response = uidlWriter.createUidl(ui, false);\n         Set<String> chunks = getDependenciesMap(response).keySet().stream()\n                 .filter(key -> key\n                         .startsWith(\""return window.Vaadin.Flow.loadOnDemand('\""))\n@@ -248,7 +249,7 @@ public void componentDependencies_developmentMode_onlySendComponentSpecificChunk\n         ui.add(new ChildComponent());\n \n         // no dependencies should be resent in next response\n-        JsonObject response = uidlWriter.createUidl(ui, false);\n+        ObjectNode response = uidlWriter.createUidl(ui, false);\n         Set<String> chunks = getDependenciesMap(response).keySet().stream()\n                 .filter(key -> key\n                         .startsWith(\""return window.Vaadin.Flow.loadOnDemand('\""))\n@@ -275,8 +276,8 @@ public void testComponentInterfaceDependencies_npmMode() throws Exception {\n         ui.add(new ActualComponent(), new SuperComponent(),\n                 new ChildComponent());\n \n-        JsonObject response = uidlWriter.createUidl(ui, false);\n-        Map<String, JsonObject> dependenciesMap = ComponentTest\n+        ObjectNode response = uidlWriter.createUidl(ui, false);\n+        Map<String, ObjectNode> dependenciesMap = ComponentTest\n                 .filterLazyLoading(getDependenciesMap(response));\n \n         assertEquals(4, dependenciesMap.size());\n@@ -297,48 +298,50 @@ public void checkAllTypesOfDependencies_npmMode() throws Exception {\n         addInitialComponentDependencies(ui, uidlWriter);\n \n         ui.add(new ComponentWithAllDependencyTypes());\n-        JsonObject response = uidlWriter.createUidl(ui, false);\n-        Map<LoadMode, List<JsonObject>> dependenciesMap = Stream\n+        ObjectNode response = uidlWriter.createUidl(ui, false);\n+        Map<LoadMode, List<ObjectNode>> dependenciesMap = Stream\n                 .of(LoadMode.values())\n-                .map(mode -> response.getArray(mode.name()))\n-                .flatMap(JsonUtils::<JsonObject> stream)\n+                .map(mode -> (ArrayNode) response.get(mode.name()))\n+                .flatMap(JacksonUtils::<ObjectNode> stream)\n                 .collect(Collectors.toMap(\n-                        jsonObject -> LoadMode.valueOf(\n-                                jsonObject.getString(Dependency.KEY_LOAD_MODE)),\n+                        jsonObject -> LoadMode.valueOf(jsonObject\n+                                .get(Dependency.KEY_LOAD_MODE).textValue()),\n                         Collections::singletonList, (list1, list2) -> {\n-                            List<JsonObject> result = new ArrayList<>(list1);\n+                            List<ObjectNode> result = new ArrayList<>(list1);\n                             result.addAll(list2);\n                             return result;\n                         }));\n-        dependenciesMap.get(LoadMode.LAZY).removeIf(obj -> obj\n-                .getString(Dependency.KEY_URL).contains(\""Flow.loadOnDemand\""));\n+        dependenciesMap.get(LoadMode.LAZY)\n+                .removeIf(obj -> obj.get(Dependency.KEY_URL).textValue()\n+                        .contains(\""Flow.loadOnDemand\""));\n         assertThat(\n                 \""Dependencies with all types of load mode should be present in this response\"",\n                 dependenciesMap.size(), is(LoadMode.values().length));\n \n-        List<JsonObject> eagerDependencies = dependenciesMap\n+        List<ObjectNode> eagerDependencies = dependenciesMap\n                 .get(LoadMode.EAGER);\n         assertThat(\""Should have an eager dependency\"", eagerDependencies,\n                 hasSize(1));\n         assertThat(\""Eager dependencies should not have inline contents\"",\n                 eagerDependencies.stream()\n-                        .filter(json -> json.hasKey(Dependency.KEY_CONTENTS))\n+                        .filter(json -> json.has(Dependency.KEY_CONTENTS))\n                         .collect(Collectors.toList()),\n                 hasSize(0));\n \n-        JsonObject eagerDependency = eagerDependencies.get(0);\n+        ObjectNode eagerDependency = eagerDependencies.get(0);\n         assertEquals(\""eager.css\"",\n-                eagerDependency.getString(Dependency.KEY_URL));\n+                eagerDependency.get(Dependency.KEY_URL).textValue());\n         assertEquals(Dependency.Type.STYLESHEET, Dependency.Type\n-                .valueOf(eagerDependency.getString(Dependency.KEY_TYPE)));\n+                .valueOf(eagerDependency.get(Dependency.KEY_TYPE).textValue()));\n \n-        List<JsonObject> lazyDependencies = dependenciesMap.get(LoadMode.LAZY);\n-        JsonObject lazyDependency = lazyDependencies.get(0);\n-        assertEquals(\""lazy.css\"", lazyDependency.getString(Dependency.KEY_URL));\n+        List<ObjectNode> lazyDependencies = dependenciesMap.get(LoadMode.LAZY);\n+        ObjectNode lazyDependency = lazyDependencies.get(0);\n+        assertEquals(\""lazy.css\"",\n+                lazyDependency.get(Dependency.KEY_URL).textValue());\n         assertEquals(Dependency.Type.STYLESHEET, Dependency.Type\n-                .valueOf(lazyDependency.getString(Dependency.KEY_TYPE)));\n+                .valueOf(lazyDependency.get(Dependency.KEY_TYPE).textValue()));\n \n-        List<JsonObject> inlineDependencies = dependenciesMap\n+        List<ObjectNode> inlineDependencies = dependenciesMap\n                 .get(LoadMode.INLINE);\n         assertInlineDependencies(inlineDependencies);\n     }\n@@ -349,11 +352,11 @@ public void resynchronizationRequested_responseFieldContainsResynchronize()\n         UI ui = initializeUIForDependenciesTest(new TestUI());\n         UidlWriter uidlWriter = new UidlWriter();\n \n-        JsonObject response = uidlWriter.createUidl(ui, false, true);\n+        ObjectNode response = uidlWriter.createUidl(ui, false, true);\n         assertTrue(\""Response contains resynchronize field\"",\n-                response.hasKey(ApplicationConstants.RESYNCHRONIZE_ID));\n-        assertTrue(\""Response resynchronize field is set to true\"",\n-                response.getBoolean(ApplicationConstants.RESYNCHRONIZE_ID));\n+                response.has(ApplicationConstants.RESYNCHRONIZE_ID));\n+        assertTrue(\""Response resynchronize field is set to true\"", response\n+                .get(ApplicationConstants.RESYNCHRONIZE_ID).booleanValue());\n     }\n \n     @Test\n@@ -393,21 +396,21 @@ public void createUidl_collectChangesUIStillDirty_shouldNotLoopEndlessly()\n                 ui.getInternals().isDirty());\n     }\n \n-    private void assertInlineDependencies(List<JsonObject> inlineDependencies) {\n+    private void assertInlineDependencies(List<ObjectNode> inlineDependencies) {\n         assertThat(\""Should have an inline dependency\"", inlineDependencies,\n                 hasSize(1));\n         assertThat(\""Eager dependencies should not have urls\"",\n                 inlineDependencies.stream()\n-                        .filter(json -> json.hasKey(Dependency.KEY_URL))\n+                        .filter(json -> json.has(Dependency.KEY_URL))\n                         .collect(Collectors.toList()),\n                 hasSize(0));\n \n-        JsonObject inlineDependency = inlineDependencies.get(0);\n+        ObjectNode inlineDependency = inlineDependencies.get(0);\n \n-        String url = inlineDependency.getString(Dependency.KEY_CONTENTS);\n+        String url = inlineDependency.get(Dependency.KEY_CONTENTS).textValue();\n         assertEquals(\""inline.css\"", url);\n-        assertEquals(Dependency.Type.STYLESHEET, Dependency.Type\n-                .valueOf(inlineDependency.getString(Dependency.KEY_TYPE)));\n+        assertEquals(Dependency.Type.STYLESHEET, Dependency.Type.valueOf(\n+                inlineDependency.get(Dependency.KEY_TYPE).textValue()));\n     }\n \n     private UI initializeUIForDependenciesTest(UI ui) throws Exception {\n@@ -453,8 +456,8 @@ private UI initializeUIForDependenciesTest(UI ui) throws Exception {\n     private void addInitialComponentDependencies(UI ui, UidlWriter uidlWriter) {\n         ui.add(new ActualComponent());\n \n-        JsonObject response = uidlWriter.createUidl(ui, false);\n-        Map<String, JsonObject> dependenciesMap = ComponentTest\n+        ObjectNode response = uidlWriter.createUidl(ui, false);\n+        Map<String, ObjectNode> dependenciesMap = ComponentTest\n                 .filterLazyLoading(getDependenciesMap(response));\n \n         assertEquals(4, dependenciesMap.size());\n@@ -473,23 +476,23 @@ private void addInitialComponentDependencies(UI ui, UidlWriter uidlWriter) {\n         assertDependency(CSS_STYLE_NAME, CSS_STYLE_NAME, dependenciesMap);\n     }\n \n-    private Map<String, JsonObject> getDependenciesMap(JsonObject response) {\n+    private Map<String, ObjectNode> getDependenciesMap(ObjectNode response) {\n         return Stream.of(LoadMode.values())\n-                .map(mode -> response.getArray(mode.name()))\n-                .flatMap(JsonUtils::<JsonObject> stream)\n-                .collect(Collectors.toMap(\n-                        jsonObject -> jsonObject.getString(Dependency.KEY_URL),\n+                .map(mode -> (ArrayNode) response.get(mode.name()))\n+                .flatMap(JacksonUtils::<ObjectNode> stream)\n+                .collect(Collectors.toMap(jsonObject -> jsonObject\n+                        .get(Dependency.KEY_URL).textValue(),\n                         Function.identity()));\n     }\n \n     private void assertDependency(String url, String type,\n-            Map<String, JsonObject> dependenciesMap) {\n-        JsonObject jsonValue = dependenciesMap.get(url);\n+            Map<String, ObjectNode> dependenciesMap) {\n+        ObjectNode jsonValue = dependenciesMap.get(url);\n         assertNotNull(\n                 \""Expected dependencies map to have dependency with key=\"" + url,\n                 jsonValue);\n-        assertEquals(url, jsonValue.get(Dependency.KEY_URL).asString());\n-        assertEquals(type, jsonValue.get(Dependency.KEY_TYPE).asString());\n+        assertEquals(url, jsonValue.get(Dependency.KEY_URL).textValue());\n+        assertEquals(type, jsonValue.get(Dependency.KEY_TYPE).textValue());\n     }\n \n }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21066"", ""pr_id"": 21066, ""issue_id"": 20991, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Feature flag changes are ignored on client side when default bundle is used\n### Description of the bug\n\nI downloaded a project from Vaadin Start and enabled the `accessibleDisabledButtons` feature flag via Copilot. When the server starts, the logs show that the feature flag is activated, but it remains false on the client-side. On the contrary, the `dashboardComponent` flag appears as true on the client-side even though it's not present in `vaadin-featureflags.properties`. \n\nSetting `vaadin.frontend.hotdeploy=true` resolves the issue, which suggests that it's related to the default bundle, which Vaadin start projects use by default.\n\n### Expected behavior\n\nIt should be possible to activate / deactivate feature flags in Vaadin start projects without setting any additional parameters.\n\n### Minimal reproducible example\n\n[button-test.zip](https://github.com/user-attachments/files/18782881/button-test.zip)\n\n### Versions\n\n- Vaadin / Flow version: 24.7.0.alpha8\n- Java version: 23\n- OS version: Mac OS\n"", ""issue_word_count"": 152, ""test_files_count"": 5, ""non_test_files_count"": 4, ""pr_changed_files"": [""flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java"", ""flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java"", ""flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java""], ""pr_changed_test_files"": [""flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java""], ""base_commit"": ""9b2dad4a3cf33fc5a4afc299a0087f1942b382f3"", ""head_commit"": ""91ff0dbd01e7e3db853e3a881caceba8d8dd3387"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21066"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21066"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-05T07:09:59.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\nindex a679ec45dab..f9329c884fd 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandler.java\n@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Locale;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import com.fasterxml.jackson.databind.JsonNode;\n@@ -40,6 +41,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.vaadin.experimental.Feature;\n+import com.vaadin.experimental.FeatureFlags;\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.BootstrapHandlerHelper;\n@@ -108,6 +111,8 @@ public boolean synchronizedHandleRequest(VaadinSession session,\n             htmlElement.attr(\""lang\"", locale.getLanguage());\n         }\n \n+        initializeFeatureFlags(indexDocument, request);\n+\n         ObjectNode initialJson = JacksonUtils.createObjectNode();\n \n         if (service.getBootstrapInitialPredicate()\n@@ -207,6 +212,28 @@ public boolean synchronizedHandleRequest(VaadinSession session,\n         return true;\n     }\n \n+    private void initializeFeatureFlags(Document indexDocument,\n+            VaadinRequest request) {\n+        String script = featureFlagsInitializer(request);\n+        Element scriptElement = indexDocument.head().prependElement(\""script\"");\n+        scriptElement.attr(SCRIPT_INITIAL, \""\"");\n+        scriptElement.appendChild(new DataNode(script));\n+    }\n+\n+    static String featureFlagsInitializer(VaadinRequest request) {\n+        return FeatureFlags.get(request.getService().getContext()).getFeatures()\n+                .stream().filter(Feature::isEnabled)\n+                .map(feature -> String.format(\""activator(\\\""%s\\\"");\"",\n+                        feature.getId()))\n+                .collect(Collectors.joining(\""\\n\"",\n+                        \""\""\""\n+                                window.Vaadin = window.Vaadin || {};\n+                                window.Vaadin.featureFlagsUpdaters = window.Vaadin.featureFlagsUpdaters || [];\n+                                window.Vaadin.featureFlagsUpdaters.push((activator) => {\n+                                \""\""\"",\n+                        \""});\""));\n+    }\n+\n     private static void addDevBundleTheme(Document document,\n             VaadinContext context) {\n         ApplicationConfiguration config = ApplicationConfiguration.get(context);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\nindex f313df7cc7f..7ad89e458db 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentProvider.java\n@@ -193,7 +193,9 @@ protected String generateNPMResponse(String tagName, VaadinRequest request,\n         // get the running script\n         boolean productionMode = request.getService()\n                 .getDeploymentConfiguration().isProductionMode();\n-        return getThisScript(tagName) + \""var scriptUri = thisScript.src;\""\n+\n+        return IndexHtmlRequestHandler.featureFlagsInitializer(request)\n+                + getThisScript(tagName) + \""var scriptUri = thisScript.src;\""\n                 + \""var index = scriptUri.lastIndexOf('\"" + WEB_COMPONENT_PATH\n                 + \""');\"" + \""var context = scriptUri.substring(0, index+\""\n                 + WEB_COMPONENT_PATH.length() + \"");\""\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java\nindex 4ffd937ada7..9ac7b5c66a3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlags.java\n@@ -15,13 +15,14 @@\n  */\n package com.vaadin.flow.server.frontend;\n \n-import com.vaadin.experimental.FeatureFlags;\n-\n import java.io.File;\n import java.util.ArrayList;\n import java.util.List;\n \n-import static com.vaadin.flow.server.frontend.FrontendUtils.*;\n+import com.vaadin.experimental.Feature;\n+\n+import static com.vaadin.flow.server.frontend.FrontendUtils.FEATURE_FLAGS_FILE_NAME;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.GENERATED;\n \n /**\n  * A task for generating the feature flags file\n@@ -47,11 +48,31 @@ protected String getFileContent() {\n         lines.add(\n                 \""window.Vaadin.featureFlags = window.Vaadin.featureFlags || {};\"");\n \n-        FeatureFlags featureFlags = options.getFeatureFlags();\n-        featureFlags.getFeatures().forEach(feature -> {\n-            lines.add(String.format(\""window.Vaadin.featureFlags.%s = %s;\"",\n-                    feature.getId(), featureFlags.isEnabled(feature)));\n-        });\n+        // Initialize the flag entries only once. For exported web-components,\n+        // this script may be executed multiple times (one per embedded\n+        // component) and we should prevent active flags get overridden.\n+        List<Feature> featureFlags = options.getFeatureFlags().getFeatures();\n+        if (!featureFlags.isEmpty()) {\n+            lines.add(\n+                    \""if (Object.keys(window.Vaadin.featureFlags).length === 0) {\"");\n+            featureFlags.forEach(feature -> {\n+                lines.add(\n+                        String.format(\""window.Vaadin.featureFlags.%s = false;\"",\n+                                feature.getId()));\n+            });\n+            lines.add(\""};\"");\n+        }\n+\n+        // Multiple feature flags updater functions can be registered, in case\n+        // of exported web-component. If the component comes from different web\n+        // applications, the active flags might not be the same.\n+        lines.add(\""if (window.Vaadin.featureFlagsUpdaters) { \"");\n+        lines.add(\n+                \""const activator = (id) => window.Vaadin.featureFlags[id] = true;\"");\n+        lines.add(\n+                \""window.Vaadin.featureFlagsUpdaters.forEach(updater => updater(activator));\"");\n+        lines.add(\""delete window.Vaadin.featureFlagsUpdaters;\"");\n+        lines.add(\""} \"");\n \n         // See https://github.com/vaadin/flow/issues/14184\n         lines.add(\""export {};\"");\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java\nindex 82c69c9b21d..8ecf443cbbc 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrap.java\n@@ -19,6 +19,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import static com.vaadin.flow.server.frontend.FrontendUtils.FEATURE_FLAGS_FILE_NAME;\n import static com.vaadin.flow.server.frontend.FrontendUtils.GENERATED;\n import static com.vaadin.flow.server.frontend.FrontendUtils.WEB_COMPONENT_BOOTSTRAP_FILE_NAME;\n \n@@ -51,7 +52,7 @@ public class TaskGenerateWebComponentBootstrap\n     @Override\n     protected String getFileContent() {\n         List<String> lines = new ArrayList<>();\n-\n+        lines.add(String.format(\""import './%s';%n\"", FEATURE_FLAGS_FILE_NAME));\n         lines.add(\""import 'Frontend/generated/flow/\""\n                 + FrontendUtils.IMPORTS_WEB_COMPONENT_NAME + \""';\"");\n         lines.add(\""import { init } from '\"" + FrontendUtils.JAR_RESOURCES_IMPORT\n"", ""test_patch"": ""diff --git a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\nindex abc50d218a0..b2ed6598621 100644\n--- a/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n+++ b/flow-plugins/flow-plugin-base/src/test/java/com/vaadin/flow/plugin/base/BuildFrontendUtilTest.java\n@@ -532,9 +532,9 @@ public void runNodeUpdater_generateFeatureFlagsJsFile() throws Exception {\n                 .readString(generatedFeatureFlagsFile.toPath())\n                 .replace(\""\\r\\n\"", \""\\n\"");\n \n-        Assert.assertTrue(\""Example feature flag is not set\"",\n+        Assert.assertTrue(\""Example feature should not be set at build time\"",\n                 featureFlagsJs.contains(\n-                        \""window.Vaadin.featureFlags.exampleFeatureFlag = true;\\n\""));\n+                        \""window.Vaadin.featureFlags.exampleFeatureFlag = false;\\n\""));\n     }\n \n     private void fillAdapter() throws URISyntaxException {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\nindex b0fc2c64efb..5ecb8c65edd 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/IndexHtmlRequestHandlerTest.java\n@@ -210,6 +210,17 @@ public void serveIndexHtml_requestWithSomePath_hasBaseHrefElement()\n                 indexHtml.contains(\""<base href=\\\""./..\\\""\""));\n     }\n \n+    @Test\n+    public void serveIndexHtml_featureFlagsSetter_isPresent()\n+            throws IOException {\n+        indexHtmlRequestHandler.synchronizedHandleRequest(session,\n+                createVaadinRequest(\""/\""), response);\n+        String indexHtml = responseOutput.toString(StandardCharsets.UTF_8);\n+        Assert.assertTrue(\""Response should have Feature Flags updater function\"",\n+                indexHtml.contains(\n+                        \""window.Vaadin.featureFlagsUpdaters.push((activator) => {\""));\n+    }\n+\n     @Test\n     public void canHandleRequest_requestWithRootPath_handleRequest() {\n         boolean canHandleRequest = indexHtmlRequestHandler\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java\nindex 1524d2ab363..237dd06ed2f 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentProviderTest.java\n@@ -17,11 +17,11 @@\n package com.vaadin.flow.server.communication;\n \n import jakarta.servlet.ServletContext;\n-\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n@@ -31,6 +31,7 @@\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n@@ -42,6 +43,7 @@\n import com.vaadin.flow.component.page.Push;\n import com.vaadin.flow.component.webcomponent.WebComponent;\n import com.vaadin.flow.component.webcomponent.WebComponentConfiguration;\n+import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.CurrentInstance;\n import com.vaadin.flow.server.DefaultDeploymentConfiguration;\n@@ -101,6 +103,14 @@ public void init() {\n                         .getArguments()[0])\n                 .when(context)\n                 .setAttribute(any(WebComponentConfigurationRegistry.class));\n+\n+        final Lookup lookup = Mockito.mock(Lookup.class);\n+        Mockito.when(context.getAttribute(Lookup.class)).thenReturn(lookup);\n+        Mockito.doAnswer(i -> i.getArgument(1, Supplier.class).get())\n+                .when(context).getAttribute(\n+                        ArgumentMatchers.argThat(aClass -> \""FeatureFlagsWrapper\""\n+                                .equals(aClass.getSimpleName())),\n+                        any());\n         VaadinService.setCurrent(service);\n         Mockito.when(service.getInstantiator())\n                 .thenReturn(new MockInstantiator());\n@@ -178,7 +188,7 @@ public void webComponentNotPresent_responseReturns404() throws IOException {\n     public void webComponentGenerator_responseGetsResult() throws IOException {\n         registry = setupConfigurations(MyComponentExporter.class);\n \n-        ByteArrayOutputStream out = Mockito.mock(ByteArrayOutputStream.class);\n+        ByteArrayOutputStream out = Mockito.spy(new ByteArrayOutputStream());\n \n         DefaultDeploymentConfiguration configuration = Mockito\n                 .mock(DefaultDeploymentConfiguration.class);\n@@ -191,6 +201,10 @@ public void webComponentGenerator_responseGetsResult() throws IOException {\n         Assert.assertTrue(\""Provider should handle web-component request\"",\n                 provider.synchronizedHandleRequest(session, request, response));\n \n+        Assert.assertTrue(\""Response should have Feature Flags updater function\"",\n+                out.toString().contains(\n+                        \""window.Vaadin.featureFlagsUpdaters.push((activator) => {\""));\n+\n         Mockito.verify(response).getOutputStream();\n         Mockito.verify(out).write(Mockito.any(), Mockito.anyInt(),\n                 Mockito.anyInt());\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java\nindex ceba253759e..9d627dc7201 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateFeatureFlagsTest.java\n@@ -87,17 +87,12 @@ public void should_defineAllFeatureFlags() throws ExecutionFailedException {\n     }\n \n     @Test\n-    public void should_defineCorrectEnabledValue()\n+    public void should_callFeatureFlagsUpdaterFunction()\n             throws ExecutionFailedException {\n-        // Enable example feature\n-        featureFlags.getFeatures().stream()\n-                .filter(feature -> feature.equals(FeatureFlags.EXAMPLE))\n-                .forEach(feature -> feature.setEnabled(true));\n-\n         taskGenerateFeatureFlags.execute();\n         String content = taskGenerateFeatureFlags.getFileContent();\n-\n-        assertFeatureFlagGlobal(content, FeatureFlags.EXAMPLE, true);\n+        Assert.assertTrue(content.contains(\n+                \""window.Vaadin.featureFlagsUpdaters.forEach(updater => updater(activator))\""));\n     }\n \n     @Test\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java\nindex 55941ed720a..758147e477c 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGenerateWebComponentBootstrapTest.java\n@@ -27,6 +27,7 @@\n import org.mockito.Mockito;\n \n import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_FRONTEND_DIR;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.FEATURE_FLAGS_FILE_NAME;\n \n public class TaskGenerateWebComponentBootstrapTest {\n     @Rule\n@@ -68,4 +69,13 @@ public void should_importAndInitializeFlowClient()\n                 \""import { init } from '\"" + FrontendUtils.JAR_RESOURCES_IMPORT\n                         + \""FlowClient.js';\\n\"" + \""init()\""));\n     }\n+\n+    @Test\n+    public void should_importFeatureFlagTS() throws ExecutionFailedException {\n+        taskGenerateWebComponentBootstrap.execute();\n+        String content = taskGenerateWebComponentBootstrap.getFileContent();\n+        Assert.assertTrue(content.contains(\n+                String.format(\""import './%s';\"", FEATURE_FLAGS_FILE_NAME)));\n+    }\n+\n }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21064"", ""pr_id"": 21064, ""issue_id"": 20741, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n"", ""issue_word_count"": 151, ""test_files_count"": 2, ""non_test_files_count"": 7, ""pr_changed_files"": [""flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java"", ""flow-server/src/main/java/com/vaadin/flow/i18n/TranslationFileRequestHandler.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/UsageStatisticsExporter.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/springcsrf/SpringCsrfTokenUtil.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/CvdlProducts.java"", ""flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java""], ""pr_changed_test_files"": [""flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java""], ""base_commit"": ""8e2248c7779af34e14fb61a669e2319b481b0eb9"", ""head_commit"": ""096657ef88fd53f5da85aec5df85574d0597ff70"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21064"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21064"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-06T07:02:11.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java\nindex b1e251b7e67..3ac6a6733bf 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/webcomponent/WebComponent.java\n@@ -19,13 +19,16 @@\n import java.io.Serializable;\n import java.util.Objects;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n+\n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.webcomponent.PropertyConfigurationImpl;\n import com.vaadin.flow.server.webcomponent.WebComponentBinding;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n import elemental.json.JsonValue;\n \n /**\n@@ -81,14 +84,55 @@ public WebComponent(WebComponentBinding binding, Element componentHost) {\n \n     /**\n      * Fires a custom event on the client-side originating from the web\n-     * component. This event does not bubble in the DOM hierarchy.\n+     * component with custom event data. This event does not bubble in the DOM\n+     * hierarchy.\n      *\n      * @param eventName\n      *            name of the event, not null\n+     * @param objectData\n+     *            data the event should carry. This data is placed as the {@code\n+     *         detail} property of the event, nullable\n      * @see #fireEvent(String, JsonValue, EventOptions) for full set of options\n      */\n+    @Deprecated\n+    public void fireEvent(String eventName, JsonValue objectData) {\n+        fireEvent(eventName, objectData, BASIC_OPTIONS);\n+    }\n+\n+    /**\n+     * Fires a custom event on the client-side originating from the web\n+     * component with custom event data. Allows modifying the default event\n+     * behavior with {@link EventOptions}.\n+     *\n+     * @param eventName\n+     *            name of the event, not null\n+     * @param objectData\n+     *            data the event should carry. This data is placed as the {@code\n+     *         detail} property of the event, nullable\n+     * @param options\n+     *            event options for {@code bubbles}, {@code cancelable}, and\n+     *            {@code\n+     *         composed} flags, not null\n+     * @throws NullPointerException\n+     *             if either {@code eventName} or {@code options} is\n+     *             {@code null}\n+     */\n+    @Deprecated\n+    public void fireEvent(String eventName, JsonValue objectData,\n+            EventOptions options) {\n+        fireEvent(eventName, JacksonUtils.mapElemental(objectData), options);\n+    }\n+\n+    /**\n+     * Fires a custom event on the client-side originating from the web\n+     * component. This event does not bubble in the DOM hierarchy.\n+     *\n+     * @param eventName\n+     *            name of the event, not null\n+     * @see #fireEvent(String, JsonNode, EventOptions) for full set of options\n+     */\n     public void fireEvent(String eventName) {\n-        fireEvent(eventName, Json.createNull(), BASIC_OPTIONS);\n+        fireEvent(eventName, JacksonUtils.nullNode(), BASIC_OPTIONS);\n     }\n \n     /**\n@@ -101,9 +145,9 @@ public void fireEvent(String eventName) {\n      * @param objectData\n      *            data the event should carry. This data is placed as the {@code\n      *         detail} property of the event, nullable\n-     * @see #fireEvent(String, JsonValue, EventOptions) for full set of options\n+     * @see #fireEvent(String, JsonNode, EventOptions) for full set of options\n      */\n-    public void fireEvent(String eventName, JsonValue objectData) {\n+    public void fireEvent(String eventName, JsonNode objectData) {\n         fireEvent(eventName, objectData, BASIC_OPTIONS);\n     }\n \n@@ -125,21 +169,20 @@ public void fireEvent(String eventName, JsonValue objectData) {\n      *             if either {@code eventName} or {@code options} is\n      *             {@code null}\n      */\n-    public void fireEvent(String eventName, JsonValue objectData,\n+    public void fireEvent(String eventName, JsonNode objectData,\n             EventOptions options) {\n         Objects.requireNonNull(eventName,\n                 \""Parameter 'eventName' must not be \"" + \""null!\"");\n         Objects.requireNonNull(options, \""Parameter 'options' must not be null\"");\n \n-        JsonObject object = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n         object.put(\""bubbles\"", options.isBubbles());\n         object.put(\""cancelable\"", options.isCancelable());\n         object.put(\""composed\"", options.isComposed());\n-        object.put(\""detail\"",\n-                objectData == null ? Json.createNull() : objectData);\n+        object.set(\""detail\"",\n+                objectData == null ? JacksonUtils.nullNode() : objectData);\n \n-        componentHost.executeJs(String.format(CUSTOM_EVENT, object.toJson()),\n-                eventName);\n+        componentHost.executeJs(String.format(CUSTOM_EVENT, object), eventName);\n     }\n \n     /**\n@@ -222,9 +265,15 @@ private void setProperty(String propertyName, Object value) {\n         } else if (value instanceof Boolean) {\n             componentHost.executeJs(UPDATE_PROPERTY, propertyName,\n                     (Boolean) value);\n+        } else if (value instanceof ValueNode) {\n+            // this gets around executeJavaScript limitation.\n+            // Since properties can take JSON values, this was needed to allow\n+            // that expected behavior.\n+            componentHost.executeJs(String.format(UPDATE_PROPERTY_FORMAT,\n+                    ((ValueNode) value).toString()), propertyName);\n         } else if (value instanceof JsonValue) {\n             // this gets around executeJavaScript limitation.\n-            // Since properties can take JsonValues, this was needed to allow\n+            // Since properties can take JSON values, this was needed to allow\n             // that expected behavior.\n             componentHost.executeJs(String.format(UPDATE_PROPERTY_FORMAT,\n                     ((JsonValue) value).toJson()), propertyName);\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/i18n/TranslationFileRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/i18n/TranslationFileRequestHandler.java\nindex b6a4d28829f..e3990a97fe3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/i18n/TranslationFileRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/i18n/TranslationFileRequestHandler.java\n@@ -15,6 +15,7 @@\n  */\n package com.vaadin.flow.i18n;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.HandlerHelper;\n import com.vaadin.flow.server.HttpStatusCode;\n import com.vaadin.flow.server.SynchronizedRequestHandler;\n@@ -23,8 +24,7 @@\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.shared.JsonConstants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -131,10 +131,10 @@ private void handleCustomI18NProvider(VaadinSession session,\n \n     private void writeFileToResponse(VaadinResponse response,\n             ResourceBundle translationPropertyFile) throws IOException {\n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n         translationPropertyFile.keySet().forEach(\n                 key -> json.put(key, translationPropertyFile.getString(key)));\n-        response.getWriter().write(json.toJson());\n+        response.getWriter().write(json.toString());\n     }\n \n     private Locale getLocale(VaadinRequest request) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/UsageStatisticsExporter.java b/flow-server/src/main/java/com/vaadin/flow/internal/UsageStatisticsExporter.java\nindex 3e6be44343d..43077a8a904 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/UsageStatisticsExporter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/UsageStatisticsExporter.java\n@@ -19,11 +19,9 @@\n import java.io.Serializable;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.jsoup.nodes.Document;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n /**\n  * A class for exporting {@link UsageStatistics} entries.\n  * <p>\n@@ -58,11 +56,11 @@ public static void exportUsageStatisticsToDocument(Document document) {\n \n     private static String createUsageStatisticsJson(\n             UsageStatistics.UsageEntry entry) {\n-        JsonObject json = Json.createObject();\n+        ObjectNode json = JacksonUtils.createObjectNode();\n \n         json.put(\""is\"", entry.getName());\n         json.put(\""version\"", entry.getVersion());\n \n-        return json.toJson();\n+        return json.toString();\n     }\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java b/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java\nindex 7437cb74773..11feb2edc52 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/change/MapPutChange.java\n@@ -16,7 +16,10 @@\n \n package com.vaadin.flow.internal.change;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n import com.vaadin.flow.internal.ConstantPool;\n+import com.vaadin.flow.internal.JacksonCodec;\n import com.vaadin.flow.internal.JsonCodec;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.nodefeature.NodeFeature;\n@@ -84,10 +87,12 @@ protected void populateJson(JsonObject json, ConstantPool constantPool) {\n \n         super.populateJson(json, constantPool);\n \n-        if (value instanceof StateNode) {\n-            StateNode node = (StateNode) value;\n+        if (value instanceof StateNode node) {\n             json.put(JsonConstants.CHANGE_PUT_NODE_VALUE,\n                     Json.create(node.getId()));\n+        } else if (value instanceof JsonNode node) {\n+            json.put(JsonConstants.CHANGE_PUT_VALUE, Json.parse(JacksonCodec\n+                    .encodeWithConstantPool(node, constantPool).toString()));\n         } else {\n             json.put(JsonConstants.CHANGE_PUT_VALUE,\n                     JsonCodec.encodeWithConstantPool(value, constantPool));\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java\nindex 31c93a120c3..211a29accae 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementAttributeMap.java\n@@ -23,6 +23,10 @@\n import java.util.Optional;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.NodeOwner;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.StateTree;\n@@ -34,9 +38,6 @@\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.shared.Registration;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n /**\n  * Map for element attribute values.\n  * <p>\n@@ -112,13 +113,13 @@ public String get(String attribute) {\n             return (String) value;\n         } else {\n             // If the value is not a string then current impl only uses\n-            // JsonObject\n-            assert value instanceof JsonObject;\n-            JsonObject object = (JsonObject) value;\n+            // JsonNode\n+            assert value instanceof JsonNode;\n+            JsonNode node = (JsonNode) value;\n             // The only object which may be set by the current imlp contains\n             // \""uri\"" attribute, only this situation is expected here.\n-            assert object.hasKey(NodeProperties.URI_ATTRIBUTE);\n-            return object.getString(NodeProperties.URI_ATTRIBUTE);\n+            assert node.has(NodeProperties.URI_ATTRIBUTE);\n+            return node.get(NodeProperties.URI_ATTRIBUTE).textValue();\n         }\n     }\n \n@@ -158,9 +159,9 @@ private void doSetResource(String attribute,\n         } else {\n             targetUri = StreamResourceRegistry.getURI(resource);\n         }\n-        JsonObject object = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n         object.put(NodeProperties.URI_ATTRIBUTE, targetUri.toASCIIString());\n-        // don't use sring as a value, but wrap it into an object to let know\n+        // don't use string as a value, but wrap it into an object to let know\n         // the client side about specific nature of the value\n         doSet(attribute, object);\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/springcsrf/SpringCsrfTokenUtil.java b/flow-server/src/main/java/com/vaadin/flow/internal/springcsrf/SpringCsrfTokenUtil.java\nindex 8e2d16e2ee4..f057200b201 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/springcsrf/SpringCsrfTokenUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/springcsrf/SpringCsrfTokenUtil.java\n@@ -17,16 +17,15 @@\n \n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.jsoup.nodes.DataNode;\n import org.jsoup.nodes.Element;\n \n import jakarta.servlet.ServletRequest;\n \n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.VaadinRequest;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * A util class for helping dealing with Spring CSRF token.\n  */\n@@ -64,18 +63,17 @@ public static Optional<SpringCsrfToken> getSpringCsrfToken(\n     private static Optional<SpringCsrfToken> extractTokenFromBean(\n             Object springCsrfToken) {\n         if (springCsrfToken != null) {\n-            JsonObject springCsrfTokenJson = JsonUtils\n+            JsonNode springCsrfTokenJson = JacksonUtils\n                     .beanToJson(springCsrfToken);\n             if (springCsrfTokenJson != null\n-                    && springCsrfTokenJson.hasKey(SPRING_CSRF_TOKEN_PROPERTY)\n-                    && springCsrfTokenJson\n-                            .hasKey(SPRING_CSRF_HEADER_PROPERTY)) {\n+                    && springCsrfTokenJson.has(SPRING_CSRF_TOKEN_PROPERTY)\n+                    && springCsrfTokenJson.has(SPRING_CSRF_HEADER_PROPERTY)) {\n                 String token = springCsrfTokenJson\n-                        .getString(SPRING_CSRF_TOKEN_PROPERTY);\n+                        .get(SPRING_CSRF_TOKEN_PROPERTY).textValue();\n                 String headerName = springCsrfTokenJson\n-                        .getString(SPRING_CSRF_HEADER_PROPERTY);\n+                        .get(SPRING_CSRF_HEADER_PROPERTY).textValue();\n                 String parameterName = springCsrfTokenJson\n-                        .getString(SPRING_CSRF_PARAMETER_PROPERTY);\n+                        .get(SPRING_CSRF_PARAMETER_PROPERTY).textValue();\n \n                 return Optional.of(\n                         new SpringCsrfToken(headerName, parameterName, token));\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/CvdlProducts.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/CvdlProducts.java\nindex 223de55848a..cefbfc13a39 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/CvdlProducts.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/CvdlProducts.java\n@@ -19,13 +19,12 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.pro.licensechecker.Product;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n /** Utilities for commercial product handling. */\n public class CvdlProducts {\n \n@@ -48,11 +47,12 @@ public static Product getProductIfCvdl(File nodeModules, String npmModule) {\n         }\n \n         try {\n-            JsonObject packageJson = Json.parse(FileUtils\n+            JsonNode packageJson = JacksonUtils.readTree(FileUtils\n                     .readFileToString(packageJsonFile, StandardCharsets.UTF_8));\n-            if (packageJson.hasKey(CVDL_PACKAGE_KEY)) {\n-                return new Product(packageJson.getString(CVDL_PACKAGE_KEY),\n-                        packageJson.getString(\""version\""));\n+            if (packageJson.has(CVDL_PACKAGE_KEY)) {\n+                return new Product(\n+                        packageJson.get(CVDL_PACKAGE_KEY).textValue(),\n+                        packageJson.get(\""version\"").textValue());\n             }\n             return null;\n         } catch (IOException e) {\n"", ""test_patch"": ""diff --git a/flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentTest.java b/flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentTest.java\nindex fb1d13956e3..fb2b9eb69fe 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/component/webcomponent/WebComponentTest.java\n@@ -18,6 +18,9 @@\n \n import java.io.Serializable;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.BaseJsonNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -27,6 +30,7 @@\n \n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.webcomponent.PropertyConfigurationImpl;\n import com.vaadin.flow.server.webcomponent.WebComponentBinding;\n \n@@ -60,14 +64,14 @@ public void fireEvent_throwsWhenNameIsNull() {\n \n     @Test\n     public void fireEvent_doesNotThrowOnNullObjectData() {\n-        webComponent.fireEvent(\""name\"", null);\n+        webComponent.fireEvent(\""name\"", (JsonNode) null);\n     }\n \n     @Test\n     public void fireEvent_throwsWhenOptionsIsNull() {\n         exception.expect(NullPointerException.class);\n         exception.expectMessage(\""options\"");\n-        webComponent.fireEvent(\""name\"", null, null);\n+        webComponent.fireEvent(\""name\"", (JsonNode) null, null);\n     }\n \n     @Test\n@@ -131,6 +135,9 @@ public void setProperty_attemptsToWriteSupportedTypes() {\n                 Component.class, \""string\"", String.class, \""\"");\n         PropertyConfigurationImpl<Component, Boolean> booleanConfiguration = new PropertyConfigurationImpl<>(\n                 Component.class, \""boolean\"", Boolean.class, false);\n+        PropertyConfigurationImpl<Component, BaseJsonNode> jsonNodeConfiguration = new PropertyConfigurationImpl<>(\n+                Component.class, \""jsonNode\"", BaseJsonNode.class,\n+                JacksonUtils.nullNode());\n         PropertyConfigurationImpl<Component, JsonValue> jsonConfiguration = new PropertyConfigurationImpl<>(\n                 Component.class, \""json\"", JsonValue.class, Json.createNull());\n \n@@ -141,6 +148,7 @@ public void setProperty_attemptsToWriteSupportedTypes() {\n         binding.bindProperty(doubleConfiguration, false, null);\n         binding.bindProperty(stringConfiguration, false, null);\n         binding.bindProperty(booleanConfiguration, false, null);\n+        binding.bindProperty(jsonNodeConfiguration, false, null);\n         binding.bindProperty(jsonConfiguration, false, null);\n \n         // test\n@@ -163,9 +171,11 @@ public void setProperty_attemptsToWriteSupportedTypes() {\n         verify(element, Mockito.times(4)).executeJs(\n                 ArgumentMatchers.anyString(), ArgumentMatchers.any(),\n                 ArgumentMatchers.any());\n+        webComponent.setProperty(jsonNodeConfiguration,\n+                (ValueNode) JacksonUtils.createNode(true));\n         // JsonValue has a different number of arguments\n         webComponent.setProperty(jsonConfiguration, Json.create(true));\n-        verify(element, Mockito.times(5)).executeJs(\n+        verify(element, Mockito.times(6)).executeJs(\n                 ArgumentMatchers.anyString(),\n                 ArgumentMatchers.any(Serializable[].class));\n     }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java\nindex 25ca475dafb..715e1b72e21 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java\n@@ -482,7 +482,7 @@ public void toFileJson() throws JsonProcessingException {\n                   \""child\"": {\n                     \""childValue\"": \""child\""\n                   }\n-                }\""\""\"", JacksonUtils.toFileJson(json));\n+                }\""\""\"", JacksonUtils.toFileJson(json).replace(\""\\r\\n\"", \""\\n\""));\n \n     }\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21059"", ""pr_id"": 21059, ""issue_id"": 20741, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n"", ""issue_word_count"": 151, ""test_files_count"": 2, ""non_test_files_count"": 3, ""pr_changed_files"": [""flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java"", ""flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java"", ""flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java"", ""flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactoryTest.java""], ""pr_changed_test_files"": [""flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactoryTest.java""], ""base_commit"": ""823e86b97ece4a07507f907c371ad26ba8633bf7"", ""head_commit"": ""e7d6ec8884d2da30b1501f787a4b9badc3759de8"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21059"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21059"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-03T12:33:17.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\nindex 4d80e02feb7..f5940cddd27 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\n@@ -21,16 +21,15 @@\n import java.util.Map;\n import java.util.Properties;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.startup.AbstractConfigurationFactory;\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n \n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n-\n /**\n  * Creates {@link DeploymentConfiguration} filled with all parameters specified\n  * by the framework users.\n@@ -114,7 +113,7 @@ private void readBuildInfo(Properties initParameters) {\n         // Read the json and set the appropriate system properties if not\n         // already set.\n         if (json != null) {\n-            JsonObject buildInfo = JsonUtil.parse(json);\n+            JsonNode buildInfo = JacksonUtils.readTree(json);\n             Map<String, String> properties = getConfigParametersUsingTokenData(\n                     buildInfo);\n             // only insert properties that haven't been defined\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\nindex 2e30fe75db6..9e99b154f23 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\n@@ -24,6 +24,7 @@\n import java.util.Map;\n import java.util.function.Function;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n \n import com.vaadin.flow.internal.UsageStatistics;\n@@ -31,8 +32,6 @@\n import com.vaadin.flow.server.InitParameters;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n \n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.CONNECT_APPLICATION_PROPERTIES_TOKEN;\n import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n import static com.vaadin.flow.server.Constants.CONNECT_OPEN_API_FILE_TOKEN;\n@@ -80,122 +79,127 @@ public class AbstractConfigurationFactory implements Serializable {\n      * @return the config parameters\n      */\n     protected Map<String, String> getConfigParametersUsingTokenData(\n-            JsonObject buildInfo) {\n+            JsonNode buildInfo) {\n         Map<String, String> params = new HashMap<>();\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_PRODUCTION_MODE)) {\n-            params.put(SERVLET_PARAMETER_PRODUCTION_MODE, String.valueOf(\n-                    buildInfo.getBoolean(SERVLET_PARAMETER_PRODUCTION_MODE)));\n+        if (buildInfo.has(SERVLET_PARAMETER_PRODUCTION_MODE)) {\n+            params.put(SERVLET_PARAMETER_PRODUCTION_MODE,\n+                    String.valueOf(\n+                            buildInfo.get(SERVLET_PARAMETER_PRODUCTION_MODE)\n+                                    .booleanValue()));\n         }\n-        if (buildInfo.hasKey(EXTERNAL_STATS_FILE_TOKEN)\n-                || buildInfo.hasKey(EXTERNAL_STATS_URL_TOKEN)) {\n+        if (buildInfo.has(EXTERNAL_STATS_FILE_TOKEN)\n+                || buildInfo.has(EXTERNAL_STATS_URL_TOKEN)) {\n             params.put(EXTERNAL_STATS_FILE, Boolean.toString(true));\n-            if (buildInfo.hasKey(EXTERNAL_STATS_URL_TOKEN)) {\n+            if (buildInfo.has(EXTERNAL_STATS_URL_TOKEN)) {\n                 params.put(EXTERNAL_STATS_URL,\n-                        buildInfo.getString(EXTERNAL_STATS_URL_TOKEN));\n+                        buildInfo.get(EXTERNAL_STATS_URL_TOKEN).textValue());\n             }\n             // NO OTHER CONFIGURATION:\n             return params;\n         }\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_INITIAL_UIDL)) {\n-            params.put(SERVLET_PARAMETER_INITIAL_UIDL, String.valueOf(\n-                    buildInfo.getBoolean(SERVLET_PARAMETER_INITIAL_UIDL)));\n+        if (buildInfo.has(SERVLET_PARAMETER_INITIAL_UIDL)) {\n+            params.put(SERVLET_PARAMETER_INITIAL_UIDL, String.valueOf(buildInfo\n+                    .get(SERVLET_PARAMETER_INITIAL_UIDL).booleanValue()));\n             // Need to be sure that we remove the system property,\n             // because it has priority in the configuration getter\n             System.clearProperty(\n                     VAADIN_PREFIX + SERVLET_PARAMETER_INITIAL_UIDL);\n         }\n \n-        if (buildInfo.hasKey(NPM_TOKEN)) {\n-            params.put(PROJECT_BASEDIR, buildInfo.getString(NPM_TOKEN));\n-            verifyFolderExists(params, buildInfo.getString(NPM_TOKEN));\n+        if (buildInfo.has(NPM_TOKEN)) {\n+            params.put(PROJECT_BASEDIR, buildInfo.get(NPM_TOKEN).textValue());\n+            verifyFolderExists(params, buildInfo.get(NPM_TOKEN).textValue());\n         }\n \n-        if (buildInfo.hasKey(NODE_VERSION)) {\n-            params.put(NODE_VERSION, buildInfo.getString(NODE_VERSION));\n+        if (buildInfo.has(NODE_VERSION)) {\n+            params.put(NODE_VERSION, buildInfo.get(NODE_VERSION).textValue());\n         }\n-        if (buildInfo.hasKey(NODE_DOWNLOAD_ROOT)) {\n+        if (buildInfo.has(NODE_DOWNLOAD_ROOT)) {\n             params.put(NODE_DOWNLOAD_ROOT,\n-                    buildInfo.getString(NODE_DOWNLOAD_ROOT));\n+                    buildInfo.get(NODE_DOWNLOAD_ROOT).textValue());\n         }\n \n-        if (buildInfo.hasKey(FRONTEND_TOKEN)) {\n+        if (buildInfo.has(FRONTEND_TOKEN)) {\n             params.put(FrontendUtils.PARAM_FRONTEND_DIR,\n-                    buildInfo.getString(FRONTEND_TOKEN));\n+                    buildInfo.get(FRONTEND_TOKEN).textValue());\n             // Only verify frontend folder if it's not a subfolder of the\n             // npm folder.\n-            if (!buildInfo.hasKey(NPM_TOKEN)\n-                    || !buildInfo.getString(FRONTEND_TOKEN)\n-                            .startsWith(buildInfo.getString(NPM_TOKEN))) {\n-                verifyFolderExists(params, buildInfo.getString(FRONTEND_TOKEN));\n+            if (!buildInfo.has(NPM_TOKEN)\n+                    || !buildInfo.get(FRONTEND_TOKEN).textValue()\n+                            .startsWith(buildInfo.get(NPM_TOKEN).textValue())) {\n+                verifyFolderExists(params,\n+                        buildInfo.get(FRONTEND_TOKEN).textValue());\n             }\n         }\n \n         // These should be internal only so if there is a System\n         // property override then the user probably knows what\n         // they are doing.\n-        if (buildInfo.hasKey(FRONTEND_HOTDEPLOY)) {\n-            params.put(FRONTEND_HOTDEPLOY,\n-                    String.valueOf(buildInfo.getBoolean(FRONTEND_HOTDEPLOY)));\n-        } else if (buildInfo.hasKey(SERVLET_PARAMETER_ENABLE_DEV_SERVER)) {\n-            params.put(FRONTEND_HOTDEPLOY, String.valueOf(\n-                    buildInfo.getBoolean(SERVLET_PARAMETER_ENABLE_DEV_SERVER)));\n+        if (buildInfo.has(FRONTEND_HOTDEPLOY)) {\n+            params.put(FRONTEND_HOTDEPLOY, String\n+                    .valueOf(buildInfo.get(FRONTEND_HOTDEPLOY).booleanValue()));\n+        } else if (buildInfo.has(SERVLET_PARAMETER_ENABLE_DEV_SERVER)) {\n+            params.put(FRONTEND_HOTDEPLOY, String.valueOf(buildInfo\n+                    .get(SERVLET_PARAMETER_ENABLE_DEV_SERVER).booleanValue()));\n         }\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_REUSE_DEV_SERVER)) {\n-            params.put(SERVLET_PARAMETER_REUSE_DEV_SERVER, String.valueOf(\n-                    buildInfo.getBoolean(SERVLET_PARAMETER_REUSE_DEV_SERVER)));\n+        if (buildInfo.has(SERVLET_PARAMETER_REUSE_DEV_SERVER)) {\n+            params.put(SERVLET_PARAMETER_REUSE_DEV_SERVER,\n+                    String.valueOf(\n+                            buildInfo.get(SERVLET_PARAMETER_REUSE_DEV_SERVER)\n+                                    .booleanValue()));\n         }\n-        if (buildInfo.hasKey(CONNECT_JAVA_SOURCE_FOLDER_TOKEN)) {\n-            params.put(CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n-                    buildInfo.getString(CONNECT_JAVA_SOURCE_FOLDER_TOKEN));\n+        if (buildInfo.has(CONNECT_JAVA_SOURCE_FOLDER_TOKEN)) {\n+            params.put(CONNECT_JAVA_SOURCE_FOLDER_TOKEN, buildInfo\n+                    .get(CONNECT_JAVA_SOURCE_FOLDER_TOKEN).textValue());\n         }\n-        if (buildInfo.hasKey(Constants.JAVA_RESOURCE_FOLDER_TOKEN)) {\n-            params.put(Constants.JAVA_RESOURCE_FOLDER_TOKEN,\n-                    buildInfo.getString(Constants.JAVA_RESOURCE_FOLDER_TOKEN));\n+        if (buildInfo.has(Constants.JAVA_RESOURCE_FOLDER_TOKEN)) {\n+            params.put(Constants.JAVA_RESOURCE_FOLDER_TOKEN, buildInfo\n+                    .get(Constants.JAVA_RESOURCE_FOLDER_TOKEN).textValue());\n         }\n-        if (buildInfo.hasKey(CONNECT_OPEN_API_FILE_TOKEN)) {\n+        if (buildInfo.has(CONNECT_OPEN_API_FILE_TOKEN)) {\n             params.put(CONNECT_OPEN_API_FILE_TOKEN,\n-                    buildInfo.getString(CONNECT_OPEN_API_FILE_TOKEN));\n+                    buildInfo.get(CONNECT_OPEN_API_FILE_TOKEN).textValue());\n         }\n-        if (buildInfo.hasKey(CONNECT_APPLICATION_PROPERTIES_TOKEN)) {\n-            params.put(CONNECT_APPLICATION_PROPERTIES_TOKEN,\n-                    buildInfo.getString(CONNECT_APPLICATION_PROPERTIES_TOKEN));\n+        if (buildInfo.has(CONNECT_APPLICATION_PROPERTIES_TOKEN)) {\n+            params.put(CONNECT_APPLICATION_PROPERTIES_TOKEN, buildInfo\n+                    .get(CONNECT_APPLICATION_PROPERTIES_TOKEN).textValue());\n         }\n-        if (buildInfo.hasKey(PROJECT_FRONTEND_GENERATED_DIR_TOKEN)) {\n-            params.put(PROJECT_FRONTEND_GENERATED_DIR_TOKEN,\n-                    buildInfo.getString(PROJECT_FRONTEND_GENERATED_DIR_TOKEN));\n+        if (buildInfo.has(PROJECT_FRONTEND_GENERATED_DIR_TOKEN)) {\n+            params.put(PROJECT_FRONTEND_GENERATED_DIR_TOKEN, buildInfo\n+                    .get(PROJECT_FRONTEND_GENERATED_DIR_TOKEN).textValue());\n         }\n-        if (buildInfo.hasKey(BUILD_FOLDER)) {\n-            params.put(BUILD_FOLDER, buildInfo.getString(BUILD_FOLDER));\n+        if (buildInfo.has(BUILD_FOLDER)) {\n+            params.put(BUILD_FOLDER, buildInfo.get(BUILD_FOLDER).textValue());\n         }\n-        if (buildInfo.hasKey(DISABLE_PREPARE_FRONTEND_CACHE)) {\n+        if (buildInfo.has(DISABLE_PREPARE_FRONTEND_CACHE)) {\n             UsageStatistics.markAsUsed(\""flow/always-execute-prepare-frontend\"",\n                     null);\n         }\n-        if (buildInfo.hasKey(REACT_ENABLE)) {\n+        if (buildInfo.has(REACT_ENABLE)) {\n             params.put(REACT_ENABLE,\n-                    String.valueOf(buildInfo.getBoolean(REACT_ENABLE)));\n+                    String.valueOf(buildInfo.get(REACT_ENABLE).booleanValue()));\n         }\n-        if (buildInfo.hasKey(APPLICATION_IDENTIFIER)) {\n+        if (buildInfo.has(APPLICATION_IDENTIFIER)) {\n             params.put(APPLICATION_IDENTIFIER,\n-                    buildInfo.getString(APPLICATION_IDENTIFIER));\n+                    buildInfo.get(APPLICATION_IDENTIFIER).textValue());\n         }\n-        if (buildInfo.hasKey(DAU_TOKEN)) {\n+        if (buildInfo.has(DAU_TOKEN)) {\n             params.put(DAU_TOKEN,\n-                    String.valueOf(buildInfo.getBoolean(DAU_TOKEN)));\n+                    String.valueOf(buildInfo.get(DAU_TOKEN).booleanValue()));\n         }\n-        if (buildInfo.hasKey(PREMIUM_FEATURES)) {\n-            params.put(PREMIUM_FEATURES,\n-                    String.valueOf(buildInfo.getBoolean(PREMIUM_FEATURES)));\n+        if (buildInfo.has(PREMIUM_FEATURES)) {\n+            params.put(PREMIUM_FEATURES, String\n+                    .valueOf(buildInfo.get(PREMIUM_FEATURES).booleanValue()));\n         }\n \n-        if (buildInfo.hasKey(InitParameters.FRONTEND_EXTRA_EXTENSIONS)) {\n+        if (buildInfo.has(InitParameters.FRONTEND_EXTRA_EXTENSIONS)) {\n             params.put(InitParameters.FRONTEND_EXTRA_EXTENSIONS, buildInfo\n-                    .getString(InitParameters.FRONTEND_EXTRA_EXTENSIONS));\n+                    .get(InitParameters.FRONTEND_EXTRA_EXTENSIONS).textValue());\n         }\n \n-        if (buildInfo.hasKey(NPM_EXCLUDE_WEB_COMPONENTS)) {\n-            params.put(NPM_EXCLUDE_WEB_COMPONENTS, String\n-                    .valueOf(buildInfo.getBoolean(NPM_EXCLUDE_WEB_COMPONENTS)));\n+        if (buildInfo.has(NPM_EXCLUDE_WEB_COMPONENTS)) {\n+            params.put(NPM_EXCLUDE_WEB_COMPONENTS, String.valueOf(\n+                    buildInfo.get(NPM_EXCLUDE_WEB_COMPONENTS).booleanValue()));\n         }\n \n         setDevModePropertiesUsingTokenData(params, buildInfo);\n@@ -205,7 +209,7 @@ protected Map<String, String> getConfigParametersUsingTokenData(\n     /**\n      * Sets to the dev mode properties to the configuration parameters.\n      *\n-     * @see #getConfigParametersUsingTokenData(JsonObject)\n+     * @see #getConfigParametersUsingTokenData(JsonNode)\n      *\n      * @param params\n      *            the configuration parameters to set dev mode properties to\n@@ -213,29 +217,30 @@ protected Map<String, String> getConfigParametersUsingTokenData(\n      *            the token file data\n      */\n     protected void setDevModePropertiesUsingTokenData(\n-            Map<String, String> params, JsonObject buildInfo) {\n+            Map<String, String> params, JsonNode buildInfo) {\n         // read dev mode properties from the token and set init parameter only\n         // if it's not yet set\n         if (params.get(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM) == null\n                 && buildInfo\n-                        .hasKey(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)) {\n+                        .has(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)) {\n             params.put(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM,\n-                    String.valueOf(buildInfo.getBoolean(\n-                            InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)));\n+                    String.valueOf(buildInfo\n+                            .get(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)\n+                            .booleanValue()));\n         }\n         if (params.get(InitParameters.SERVLET_PARAMETER_ENABLE_BUN) == null\n-                && buildInfo\n-                        .hasKey(InitParameters.SERVLET_PARAMETER_ENABLE_BUN)) {\n+                && buildInfo.has(InitParameters.SERVLET_PARAMETER_ENABLE_BUN)) {\n             params.put(InitParameters.SERVLET_PARAMETER_ENABLE_BUN,\n-                    String.valueOf(buildInfo.getBoolean(\n-                            InitParameters.SERVLET_PARAMETER_ENABLE_BUN)));\n+                    String.valueOf(buildInfo\n+                            .get(InitParameters.SERVLET_PARAMETER_ENABLE_BUN)\n+                            .booleanValue()));\n         }\n         if (params.get(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE) == null\n-                && buildInfo\n-                        .hasKey(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)) {\n+                && buildInfo.has(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)) {\n             params.put(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE,\n-                    String.valueOf(buildInfo.getBoolean(\n-                            InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)));\n+                    String.valueOf(buildInfo\n+                            .get(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)\n+                            .booleanValue()));\n         }\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java\nindex b3f95c55f0d..afab3552a52 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java\n@@ -25,6 +25,7 @@\n import java.util.Map;\n import java.util.Objects;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.osgi.framework.Constants;\n import org.osgi.service.component.annotations.Component;\n import org.slf4j.Logger;\n@@ -32,13 +33,11 @@\n \n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.AbstractPropertyConfiguration;\n import com.vaadin.flow.server.VaadinContext;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n \n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n-\n import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n import static com.vaadin.flow.server.InitParameters.APPLICATION_PARAMETER_DEVMODE_ENABLE_SERIALIZE_SESSION;\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n@@ -101,13 +100,13 @@ public ApplicationConfiguration create(VaadinContext context) {\n             final String name = paramNames.nextElement();\n             props.put(name, context.getContextParameter(name));\n         }\n-        JsonObject buildInfo = null;\n+        JsonNode buildInfo = null;\n         try {\n             String content = getTokenFileContent(props::get);\n             if (content == null) {\n                 content = getTokenFileFromClassloader(context);\n             }\n-            buildInfo = content == null ? null : JsonUtil.parse(content);\n+            buildInfo = content == null ? null : JacksonUtils.readTree(content);\n             if (buildInfo != null) {\n                 props.putAll(getConfigParametersUsingTokenData(buildInfo));\n             }\n"", ""test_patch"": ""diff --git a/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java b/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\nindex c9fd429591e..b77a5495dd9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\n@@ -427,11 +427,11 @@ private String generateJsonStringFromFields(Field[] fields,\n         for (int i = 0; i < fields.length; i++) {\n             try {\n                 String paramName = (String) fields[i].get(null);\n-                mockTokenJsonString += \""'\"" + paramName + \""': \"";\n+                mockTokenJsonString += \""\\\""\"" + paramName + \""\\\"": \"";\n                 if (!stringParams.contains(paramName)) {\n                     mockTokenJsonString += \""true\"";\n                 } else {\n-                    mockTokenJsonString += \"" 'bar'\"";\n+                    mockTokenJsonString += \"" \\\""bar\\\""\"";\n                 }\n \n             } catch (IllegalAccessException illegalAccess) {\n@@ -452,7 +452,7 @@ public void createInitParameters_tokenFileIsSetViaContext_externalStatsUrlIsRead\n         DeploymentConfigurationFactory factory = new DeploymentConfigurationFactory();\n \n         VaadinConfig config = mockTokenFileViaContextParam(\n-                \""{ 'externalStatsUrl': 'http://my.server/static/stats.json'}\"");\n+                \""{ \\\""externalStatsUrl\\\"": \\\""http://my.server/static/stats.json\\\""}\"");\n \n         VaadinContext context = Mockito.mock(VaadinContext.class);\n \n@@ -475,7 +475,7 @@ public void createInitParameters_tokenFileIsSetViaContext_externalStatsFileIsRea\n         DeploymentConfigurationFactory factory = new DeploymentConfigurationFactory();\n \n         VaadinConfig config = mockTokenFileViaContextParam(\n-                \""{ 'externalStatsFile': true}\"");\n+                \""{ \\\""externalStatsFile\\\"": true}\"");\n \n         VaadinContext context = Mockito.mock(VaadinContext.class);\n \n@@ -496,7 +496,7 @@ public void createInitParameters_tokenFileIsSetViaContext_setPropertyFromTokenFi\n         DeploymentConfigurationFactory factory = new DeploymentConfigurationFactory();\n \n         VaadinConfig config = mockTokenFileViaContextParam(\n-                \""{ '\"" + SERVLET_PARAMETER_PRODUCTION_MODE + \""': true}\"");\n+                \""{ \\\""\"" + SERVLET_PARAMETER_PRODUCTION_MODE + \""\\\"": true}\"");\n \n         VaadinContext context = Mockito.mock(VaadinContext.class);\n \n@@ -571,7 +571,7 @@ public void externalStatsFileTrue_predefinedValuesAreNotOverridden_productionMod\n     @Test\n     public void createInitParameters_readDevModeProperties() throws Exception {\n         FileUtils.writeLines(tokenFile, Arrays.asList(\""{\"",\n-                \""\\\""pnpm.enable\\\"": true,\"", \""\\\""require.home.node\\\"": true,\"", \""}\""));\n+                \""\\\""pnpm.enable\\\"": true,\"", \""\\\""require.home.node\\\"": true\"", \""}\""));\n \n         DeploymentConfiguration config = createConfig(Collections\n                 .singletonMap(PARAM_TOKEN_FILE, tokenFile.getPath()));\n@@ -586,7 +586,7 @@ public void createInitParameters_readDevModeProperties() throws Exception {\n     public void createInitParameters_initParamtersAreSet_tokenDevModePropertiesAreNotSet()\n             throws Exception {\n         FileUtils.writeLines(tokenFile, Arrays.asList(\""{\"",\n-                \""\\\""pnpm.enable\\\"": true,\"", \""\\\""require.home.node\\\"": true,\"", \""}\""));\n+                \""\\\""pnpm.enable\\\"": true,\"", \""\\\""require.home.node\\\"": true\"", \""}\""));\n \n         DeploymentConfiguration config = createConfig(Collections\n                 .singletonMap(PARAM_TOKEN_FILE, tokenFile.getPath()));\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactoryTest.java b/flow-server/src/test/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactoryTest.java\nindex acbbed11d1d..a9e1d753df0 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactoryTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactoryTest.java\n@@ -55,7 +55,7 @@ public void create_tokenFileIsReadFromClassloader_externalStatsFileIsReadFromTok\n         ResourceProvider resourceProvider = mockResourceProvider(config,\n                 context);\n \n-        String content = \""{ 'externalStatsFile':true }\"";\n+        String content = \""{ \\\""externalStatsFile\\\"":true }\"";\n         mockClassPathTokenFile(resourceProvider, content);\n \n         DefaultApplicationConfigurationFactory factory = new DefaultApplicationConfigurationFactory();\n@@ -73,7 +73,7 @@ public void create_tokenFileIsReadFromClassloader_externalStatsFileIsReadFromTok\n     @Test\n     public void create_tokenFileIsSetViaContext_externalStatsFileIsReadFromTokenFile_predefinedContext()\n             throws MalformedURLException, IOException {\n-        String content = \""{ 'externalStatsFile':true }\"";\n+        String content = \""{ \\\""externalStatsFile\\\"":true }\"";\n         VaadinContext context = mockTokenFileViaContextParam(content);\n \n         DefaultApplicationConfigurationFactory factory = new DefaultApplicationConfigurationFactory();\n@@ -91,7 +91,7 @@ public void create_tokenFileIsSetViaContext_externalStatsFileIsReadFromTokenFile\n     @Test\n     public void create_tokenFileIsSetViaContext_externalStatsUrlIsReadFromTokenFile_predefinedContext()\n             throws MalformedURLException, IOException {\n-        String content = \""{ 'externalStatsUrl': 'http://my.server/static/stats.json'}\"";\n+        String content = \""{ \\\""externalStatsUrl\\\"": \\\""http://my.server/static/stats.json\\\""}\"";\n         VaadinContext context = mockTokenFileViaContextParam(content);\n \n         DefaultApplicationConfigurationFactory factory = new DefaultApplicationConfigurationFactory();\n@@ -117,7 +117,7 @@ public void create_tokenFileIsReadFromClassloader_externalStatsUrlIsReadFromToke\n                 context);\n \n         mockClassPathTokenFile(resourceProvider,\n-                \""{ 'externalStatsUrl': 'http://my.server/static/stats.json'}\"");\n+                \""{ \\\""externalStatsUrl\\\"": \\\""http://my.server/static/stats.json\\\""}\"");\n \n         DefaultApplicationConfigurationFactory factory = new DefaultApplicationConfigurationFactory();\n         ApplicationConfiguration configuration = factory.create(context);\n@@ -165,7 +165,7 @@ public void create_tokenFileWithPremiumFlag_premiumFlagIsPropagatedToDeploymentC\n         ResourceProvider resourceProvider = mockResourceProvider(config,\n                 context);\n \n-        String content = \""{ '\"" + Constants.PREMIUM_FEATURES + \""':true }\"";\n+        String content = \""{ \\\""\"" + Constants.PREMIUM_FEATURES + \""\\\"": true }\"";\n         mockClassPathTokenFile(resourceProvider, content);\n \n         DefaultApplicationConfigurationFactory factory = new DefaultApplicationConfigurationFactory();\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-21056"", ""pr_id"": 21056, ""issue_id"": 20741, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n"", ""issue_word_count"": 151, ""test_files_count"": 4, ""non_test_files_count"": 7, ""pr_changed_files"": [""flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/BrowserLiveReload.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java"", ""flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/DevToolsPlugin.java"", ""vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DebugWindowConnection.java"", ""vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsInterface.java"", ""vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsMessageHandler.java"", ""vaadin-dev-server/src/main/java/com/vaadin/base/devserver/stats/DevModeUsageStatistics.java"", ""vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DebugWindowConnectionTest.java"", ""vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTestBase.java"", ""vaadin-dev-server/src/test/java/com/vaadin/base/devserver/stats/DevModeUsageStatisticsTest.java""], ""pr_changed_test_files"": [""flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/DevToolsPlugin.java"", ""vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DebugWindowConnectionTest.java"", ""vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTestBase.java"", ""vaadin-dev-server/src/test/java/com/vaadin/base/devserver/stats/DevModeUsageStatisticsTest.java""], ""base_commit"": ""15ce25357e253796715a41ff546841f5bae6de7f"", ""head_commit"": ""a5c52f676464dacdd14927f1c57c8f2cec813e24"", ""repo_url"": ""https://github.com/vaadin/flow/pull/21056"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/21056"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-05T13:31:18.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\nindex ac8204429e5..953bcea5b70 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n@@ -41,6 +41,7 @@\n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.internal.BrowserLiveReload;\n import com.vaadin.flow.internal.BrowserLiveReloadAccessor;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.router.internal.RouteTarget;\n import com.vaadin.flow.router.internal.RouteUtil;\n import com.vaadin.flow.server.RouteRegistry;\n@@ -56,8 +57,6 @@\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinSession;\n \n-import elemental.json.Json;\n-\n /**\n  * Entry point for application classes hot reloads.\n  * <p>\n@@ -185,7 +184,8 @@ public void onHotswap(URI[] createdResources, URI[] modifiedResources,\n             ResourceBundle.clearCache();\n \n             // Trigger any potential Hilla translation updates\n-            liveReload.sendHmrEvent(\""translations-update\"", Json.createObject());\n+            liveReload.sendHmrEvent(\""translations-update\"",\n+                    JacksonUtils.createObjectNode());\n \n             // Trigger any potential Flow translation updates\n             EnumMap<UIRefreshStrategy, List<UI>> refreshActions = new EnumMap<>(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/BrowserLiveReload.java b/flow-server/src/main/java/com/vaadin/flow/internal/BrowserLiveReload.java\nindex 30756f861fc..92e3f86b536 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/BrowserLiveReload.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/BrowserLiveReload.java\n@@ -15,12 +15,11 @@\n  */\n package com.vaadin.flow.internal;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.atmosphere.cpr.AtmosphereResource;\n \n import com.vaadin.flow.server.communication.FragmentedMessageHolder;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * Provides a way to reload browser tabs via web socket connection passed as a\n  * {@link AtmosphereResource}.\n@@ -126,6 +125,6 @@ default void refresh(boolean refreshLayouts) {\n      * @param eventData\n      *            the event data\n      */\n-    void sendHmrEvent(String event, JsonObject eventData);\n+    void sendHmrEvent(String event, JsonNode eventData);\n \n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\nindex 340776ba7ed..0130afb5e4a 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n@@ -109,9 +109,12 @@ public static ValueNode nullNode() {\n      *\n      * @param jsonObject\n      *            JsonObject to change\n-     * @return ObjectNode of elemental json object\n+     * @return ObjectNode of elemental json object or null for null jsonObject\n      */\n     public static ObjectNode mapElemental(JsonObject jsonObject) {\n+        if (jsonObject == null) {\n+            return null;\n+        }\n         try {\n             return (ObjectNode) objectMapper.readTree(jsonObject.toJson());\n         } catch (JsonProcessingException e) {\n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DebugWindowConnection.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DebugWindowConnection.java\nindex efc09b4fe3e..83e47d9a170 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DebugWindowConnection.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DebugWindowConnection.java\n@@ -28,15 +28,17 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.atmosphere.cpr.AtmosphereResource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.base.devserver.stats.DevModeUsageStatistics;\n import com.vaadin.experimental.FeatureFlags;\n-import com.vaadin.flow.component.UI;\n import com.vaadin.flow.internal.BrowserLiveReload;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.DevToolsToken;\n import com.vaadin.flow.server.VaadinContext;\n import com.vaadin.flow.server.communication.AtmospherePushConnection.FragmentedMessage;\n@@ -44,7 +46,6 @@\n import com.vaadin.pro.licensechecker.LicenseChecker;\n import com.vaadin.pro.licensechecker.Product;\n \n-import elemental.json.Json;\n import elemental.json.JsonObject;\n \n /**\n@@ -146,14 +147,14 @@ private DevToolsInterfaceImpl(\n         }\n \n         @Override\n-        public void send(String command, JsonObject data) {\n-            JsonObject msg = Json.createObject();\n+        public void send(String command, JsonNode data) {\n+            ObjectNode msg = JacksonUtils.createObjectNode();\n             msg.put(\""command\"", command);\n             if (data != null) {\n-                msg.put(\""data\"", data);\n+                msg.set(\""data\"", data);\n             }\n \n-            debugWindowConnection.send(resource, msg.toJson());\n+            debugWindowConnection.send(resource, msg.toString());\n         }\n \n         @Override\n@@ -255,12 +256,24 @@ public boolean isLiveReload(AtmosphereResource resource) {\n      *\n      * @param msg\n      *            the message to broadcast\n+     * @deprecated Use {@link #broadcast(ObjectNode)} instead.\n      */\n+    @Deprecated\n     public void broadcast(JsonObject msg) {\n+        this.broadcast(JacksonUtils.readTree(msg.toJson()));\n+    }\n+\n+    /**\n+     * Broadcasts the given message to all connected clients.\n+     *\n+     * @param msg\n+     *            the message to broadcast\n+     */\n+    public void broadcast(ObjectNode msg) {\n         resources.keySet().forEach(resourceRef -> {\n             AtmosphereResource resource = resourceRef.get();\n             if (resource != null) {\n-                resource.getBroadcaster().broadcast(msg.toJson(), resource);\n+                resource.getBroadcaster().broadcast(msg.toString(), resource);\n             }\n         });\n \n@@ -268,14 +281,14 @@ public void broadcast(JsonObject msg) {\n \n     @Override\n     public void reload() {\n-        JsonObject msg = Json.createObject();\n+        ObjectNode msg = JacksonUtils.createObjectNode();\n         msg.put(\""command\"", \""reload\"");\n         broadcast(msg);\n     }\n \n     @Override\n     public void refresh(boolean refreshLayouts) {\n-        JsonObject msg = Json.createObject();\n+        ObjectNode msg = JacksonUtils.createObjectNode();\n         msg.put(\""command\"", \""reload\"");\n         msg.put(\""strategy\"", refreshLayouts ? \""full-refresh\"" : \""refresh\"");\n         broadcast(msg);\n@@ -283,7 +296,7 @@ public void refresh(boolean refreshLayouts) {\n \n     @Override\n     public void update(String path, String content) {\n-        JsonObject msg = Json.createObject();\n+        ObjectNode msg = JacksonUtils.createObjectNode();\n         msg.put(\""command\"", \""update\"");\n         msg.put(\""path\"", path);\n         msg.put(\""content\"", content);\n@@ -297,17 +310,18 @@ public void onMessage(AtmosphereResource resource, String message) {\n             getLogger().debug(\""Received live reload heartbeat\"");\n             return;\n         }\n-        JsonObject json = Json.parse(message);\n-        String command = json.getString(\""command\"");\n-        JsonObject data = json.getObject(\""data\"");\n+        JsonNode json = JacksonUtils.readTree(message);\n+        String command = json.get(\""command\"").textValue();\n+        JsonNode data = json.get(\""data\"");\n         if (\""setFeature\"".equals(command)) {\n-            FeatureFlags.get(context).setEnabled(data.getString(\""featureId\""),\n-                    data.getBoolean(\""enabled\""));\n+            FeatureFlags.get(context).setEnabled(\n+                    data.get(\""featureId\"").textValue(),\n+                    data.get(\""enabled\"").booleanValue());\n         } else if (\""reportTelemetry\"".equals(command)) {\n             DevModeUsageStatistics.handleBrowserData(data);\n         } else if (\""checkLicense\"".equals(command)) {\n-            String name = data.getString(\""name\"");\n-            String version = data.getString(\""version\"");\n+            String name = data.get(\""name\"").textValue();\n+            String version = data.get(\""version\"").textValue();\n             Product product = new Product(name, version);\n             boolean ok;\n             String errorMessage = \""\"";\n@@ -382,13 +396,13 @@ public void clearFragmentedMessage(AtmosphereResource resource) {\n     }\n \n     @Override\n-    public void sendHmrEvent(String event, JsonObject eventData) {\n-        JsonObject msg = Json.createObject();\n+    public void sendHmrEvent(String event, JsonNode eventData) {\n+        ObjectNode msg = JacksonUtils.createObjectNode();\n         msg.put(\""command\"", \""hmr\"");\n-        JsonObject data = Json.createObject();\n-        msg.put(\""data\"", data);\n+        ObjectNode data = JacksonUtils.createObjectNode();\n+        msg.set(\""data\"", data);\n         data.put(\""event\"", event);\n-        data.put(\""eventData\"", eventData);\n+        data.set(\""eventData\"", eventData);\n         broadcast(msg);\n     }\n \n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsInterface.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsInterface.java\nindex 351d7821a88..1c81181564d 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsInterface.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsInterface.java\n@@ -15,6 +15,10 @@\n  */\n package com.vaadin.base.devserver;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import com.vaadin.flow.internal.JacksonUtils;\n+\n import elemental.json.JsonObject;\n \n /**\n@@ -30,5 +34,18 @@ public interface DevToolsInterface {\n      * @param data\n      *            data, specific to the command\n      */\n-    void send(String command, JsonObject data);\n+    @Deprecated\n+    default void send(String command, JsonObject data) {\n+        send(command, JacksonUtils.mapElemental(data));\n+    }\n+\n+    /**\n+     * Sends the given message to the client side.\n+     *\n+     * @param command\n+     *            the command to send\n+     * @param data\n+     *            data, specific to the command\n+     */\n+    void send(String command, JsonNode data);\n }\n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsMessageHandler.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsMessageHandler.java\nindex e4926134636..a497497b8e1 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsMessageHandler.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/DevToolsMessageHandler.java\n@@ -15,7 +15,13 @@\n  */\n package com.vaadin.base.devserver;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+import com.vaadin.flow.internal.JacksonUtils;\n+\n+import elemental.json.Json;\n import elemental.json.JsonObject;\n+import elemental.json.JsonValue;\n \n /**\n  * Handles dev tools messages from the client.\n@@ -47,9 +53,29 @@ public interface DevToolsMessageHandler {\n      * @return {@code true} if the message was handled and should not be passed\n      *         on to further handlers\n      */\n+    @Deprecated\n     boolean handleMessage(String command, JsonObject data,\n             DevToolsInterface devToolsInterface);\n \n+    /**\n+     * Called when a message from the browser arrives.\n+     *\n+     * @param command\n+     *            the command received\n+     * @param data\n+     *            the data received\n+     * @param devToolsInterface\n+     *            for interaction with the development tools, e.g. sending a\n+     *            message\n+     * @return {@code true} if the message was handled and should not be passed\n+     *         on to further handlers\n+     */\n+    default boolean handleMessage(String command, JsonNode data,\n+            DevToolsInterface devToolsInterface) {\n+        return this.handleMessage(command, Json.parse(data.toString()),\n+                devToolsInterface);\n+    }\n+\n     /**\n      * Called when the browser connection disconnects.\n      *\n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/stats/DevModeUsageStatistics.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/stats/DevModeUsageStatistics.java\nindex c53200a4934..f93e6cd8c27 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/stats/DevModeUsageStatistics.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/stats/DevModeUsageStatistics.java\n@@ -26,8 +26,6 @@\n import com.vaadin.flow.server.Version;\n import com.vaadin.pro.licensechecker.MachineId;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * Singleton for collecting development time usage metrics\n  * <p>\n@@ -142,7 +140,7 @@ private void trackGlobalData() {\n      * @param data\n      *            the data from the browser\n      */\n-    public static void handleBrowserData(JsonObject data) {\n+    public static void handleBrowserData(JsonNode data) {\n         getLogger().debug(\""Received client usage statistics from the browser\"");\n \n         if (!isStatisticsEnabled()) {\n@@ -151,7 +149,7 @@ public static void handleBrowserData(JsonObject data) {\n \n         get().storage.update((global, project) -> {\n             try {\n-                String json = data.get(\""browserData\"").toJson();\n+                String json = data.get(\""browserData\"").toString();\n                 JsonNode clientData = JsonHelpers.getJsonMapper()\n                         .readTree(json);\n                 if (clientData != null && clientData.isObject()) {\n"", ""test_patch"": ""diff --git a/flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/DevToolsPlugin.java b/flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/DevToolsPlugin.java\nindex 188ccd20448..96b267af664 100644\n--- a/flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/DevToolsPlugin.java\n+++ b/flow-tests/test-dev-mode/src/main/java/com/vaadin/flow/uitest/ui/DevToolsPlugin.java\n@@ -1,12 +1,15 @@\n package com.vaadin.flow.uitest.ui;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n import com.vaadin.base.devserver.DevToolsInterface;\n import com.vaadin.base.devserver.DevToolsMessageHandler;\n import com.vaadin.flow.component.UI;\n import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.VaadinSession;\n \n-import elemental.json.Json;\n import elemental.json.JsonObject;\n \n @JsModule(value = \""./devtools-plugin.ts\"", developmentOnly = true)\n@@ -14,22 +17,29 @@ public class DevToolsPlugin implements DevToolsMessageHandler {\n \n     @Override\n     public void handleConnect(DevToolsInterface devToolsInterface) {\n-        devToolsInterface.send(\""plugin-init\"", null);\n+        devToolsInterface.send(\""plugin-init\"", (JsonNode) null);\n     }\n \n     @Override\n     public boolean handleMessage(String command, JsonObject data,\n             DevToolsInterface devToolsInterface) {\n+        return handleMessage(command, JacksonUtils.mapElemental(data),\n+                devToolsInterface);\n+    }\n+\n+    @Override\n+    public boolean handleMessage(String command, JsonNode data,\n+            DevToolsInterface devToolsInterface) {\n         if (command.equals(\""plugin-query\"")) {\n-            String text = data.getString(\""text\"");\n+            String text = data.get(\""text\"").textValue();\n \n-            JsonObject responseData = Json.createObject();\n+            ObjectNode responseData = JacksonUtils.createObjectNode();\n             responseData.put(\""text\"", \""Response for \"" + text);\n             devToolsInterface.send(\""plugin-response\"", responseData);\n \n             VaadinSession session = VaadinSession.getCurrent();\n             session.access(() -> {\n-                UI ui = session.getUIById((int) data.getNumber(\""uiId\""));\n+                UI ui = session.getUIById(data.get(\""uiId\"").intValue());\n                 ui.getPage().executeJs(\""\""\""\n                         const div = document.createElement('div');\n                         div.innerText = $0;\n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DebugWindowConnectionTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DebugWindowConnectionTest.java\nindex 87d731ca76c..b358611edda 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DebugWindowConnectionTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/DebugWindowConnectionTest.java\n@@ -19,6 +19,7 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.atmosphere.cpr.AtmosphereRequest;\n import org.atmosphere.cpr.AtmosphereResource;\n import org.atmosphere.cpr.Broadcaster;\n@@ -28,14 +29,12 @@\n \n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.internal.BrowserLiveReload;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.DevToolsToken;\n import com.vaadin.flow.server.VaadinContext;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n import static org.mockito.Mockito.times;\n \n public class DebugWindowConnectionTest {\n@@ -135,9 +134,9 @@ public void reload_twoConnections_sendReloadCommand() {\n \n         reload.reload();\n \n-        JsonObject reloadCommand = Json.createObject();\n+        ObjectNode reloadCommand = JacksonUtils.createObjectNode();\n         reloadCommand.put(\""command\"", \""reload\"");\n-        String reloadJson = reloadCommand.toJson();\n+        String reloadJson = reloadCommand.toString();\n         Mockito.verify(broadcaster).broadcast(reloadJson, resource1);\n         Mockito.verify(broadcaster).broadcast(reloadJson, resource2);\n     }\n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTestBase.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTestBase.java\nindex 758784a16a4..a3ec7fcc869 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTestBase.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/startup/DevModeInitializerTestBase.java\n@@ -1,5 +1,6 @@\n package com.vaadin.base.devserver.startup;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import jakarta.servlet.ServletContextEvent;\n import jakarta.servlet.ServletRegistration;\n import java.io.File;\n@@ -20,13 +21,12 @@\n import org.junit.rules.TemporaryFolder;\n import org.mockito.Mockito;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.VaadinServlet;\n import com.vaadin.flow.server.frontend.EndpointGeneratorTaskFactory;\n import com.vaadin.flow.server.frontend.TaskGenerateEndpoint;\n import com.vaadin.flow.server.frontend.TaskGenerateOpenAPI;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n@@ -112,7 +112,7 @@ public void setup() throws Exception {\n         // Not this needs to update according to dependencies in\n         // NodeUpdater.getDefaultDependencies and\n         // NodeUpdater.getDefaultDevDependencies\n-        FileUtils.write(mainPackageFile, getInitalPackageJson().toJson(),\n+        FileUtils.write(mainPackageFile, getInitalPackageJson().toString(),\n                 \""UTF-8\"");\n         devServerConfigFile.createNewFile();\n         FileUtils.forceMkdir(new File(baseDir, \""src/main/java\""));\n@@ -125,16 +125,16 @@ protected File createStubDevServer(String baseDir) throws IOException {\n         return new File(baseDir, VITE_CONFIG);\n     }\n \n-    private JsonObject getInitalPackageJson() {\n-        JsonObject packageJson = Json.createObject();\n-        JsonObject vaadinPackages = Json.createObject();\n+    private ObjectNode getInitalPackageJson() {\n+        ObjectNode packageJson = JacksonUtils.createObjectNode();\n+        ObjectNode vaadinPackages = JacksonUtils.createObjectNode();\n \n-        vaadinPackages.put(\""dependencies\"", Json.createObject());\n-        JsonObject defaults = vaadinPackages.getObject(\""dependencies\"");\n+        vaadinPackages.put(\""dependencies\"", JacksonUtils.createObjectNode());\n+        ObjectNode defaults = (ObjectNode) vaadinPackages.get(\""dependencies\"");\n         defaults.put(\""@polymer/polymer\"", \""3.2.0\"");\n \n-        vaadinPackages.put(\""devDependencies\"", Json.createObject());\n-        defaults = vaadinPackages.getObject(\""devDependencies\"");\n+        vaadinPackages.put(\""devDependencies\"", JacksonUtils.createObjectNode());\n+        defaults = (ObjectNode) vaadinPackages.get(\""devDependencies\"");\n         defaults.put(\""webpack\"", \""4.30.0\"");\n         defaults.put(\""webpack-cli\"", \""3.3.0\"");\n         defaults.put(\""webpack-dev-server\"", \""3.3.0\"");\n\ndiff --git a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/stats/DevModeUsageStatisticsTest.java b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/stats/DevModeUsageStatisticsTest.java\nindex d2cec0708bc..7eae170db66 100644\n--- a/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/stats/DevModeUsageStatisticsTest.java\n+++ b/vaadin-dev-server/src/test/java/com/vaadin/base/devserver/stats/DevModeUsageStatisticsTest.java\n@@ -19,7 +19,10 @@\n import java.io.File;\n import java.nio.charset.StandardCharsets;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.testutil.TestUtils;\n \n import com.vaadin.pro.licensechecker.MachineId;\n@@ -27,8 +30,6 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n import net.jcip.annotations.NotThreadSafe;\n \n @NotThreadSafe\n@@ -284,8 +285,8 @@ public void machineId() throws Exception {\n                 project.get(StatisticsConstants.FIELD_MACHINE_ID).asText());\n     }\n \n-    private static JsonObject wrapStats(String data) {\n-        JsonObject wrapped = Json.createObject();\n+    private static JsonNode wrapStats(String data) {\n+        ObjectNode wrapped = JacksonUtils.createObjectNode();\n         wrapped.put(\""browserData\"", data);\n         return wrapped;\n     }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-20973"", ""pr_id"": 20973, ""issue_id"": 20741, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n"", ""issue_word_count"": 151, ""test_files_count"": 14, ""non_test_files_count"": 23, ""pr_changed_files"": [""flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java"", ""flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleUtils.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendPluginsUtil.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/GenerateMainImports.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePackageJson.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateReactFiles.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskPrepareProdBundle.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeUtils.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeValidationUtil.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdatePackagesTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleUtilsTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesNpmVersionLockingTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCopyFrontendFilesTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPluginsTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/ThemeValidationUtilTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonFilterTest.java"", ""vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ThemeLiveUpdater.java""], ""pr_changed_test_files"": [""flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdatePackagesTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleUtilsTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesNpmVersionLockingTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCopyFrontendFilesTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPluginsTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/ThemeValidationUtilTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonFilterTest.java""], ""base_commit"": ""309d431f22959cde0fbfbccdc7df8f2634c0af21"", ""head_commit"": ""a408085e21cda3e5959b5b787245d9ed251a3e0f"", ""repo_url"": ""https://github.com/vaadin/flow/pull/20973"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/20973"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-13T07:14:07.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\nindex 3b742ac5460..b4d9dc34be0 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n@@ -20,7 +20,6 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.EnumSet;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n@@ -85,6 +84,28 @@ public static ArrayNode createArrayNode() {\n         return objectMapper.createArrayNode();\n     }\n \n+    /**\n+     * Read Json string to JsonNode.\n+     *\n+     * @return JsonNode representation of given json string\n+     */\n+    public static ObjectNode readTree(String json) {\n+        try {\n+            return (ObjectNode) objectMapper.readTree(json);\n+        } catch (JsonProcessingException e) {\n+            throw new JsonDecodingException(\""Could not parse json content\"", e);\n+        }\n+    }\n+\n+    /**\n+     * Create a JsonNode from value.\n+     *\n+     * @return JsonNode for given value content\n+     */\n+    public static JsonNode createNode(Object value) {\n+        return objectMapper.valueToTree(value);\n+    }\n+\n     /**\n      * Collects a stream of JSON values to a JSON array.\n      *\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\nindex 7c5c1cd1869..9d905612e5b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/BootstrapHandler.java\n@@ -48,6 +48,7 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.DataNode;\n import org.jsoup.nodes.Document;\n@@ -1661,8 +1662,8 @@ private static Element getStyleTag(String themeName, String fileName,\n                 File stylesCss = new File(\n                         ThemeUtils.getThemeFolder(frontendDirectory, themeName),\n                         fileName);\n-                JsonObject themeJson = ThemeUtils\n-                        .getThemeJson(themeName, config).orElse(null);\n+                JsonNode themeJson = ThemeUtils.getThemeJson(themeName, config)\n+                        .orElse(null);\n \n                 // Inline CSS into style tag to have hot module reload feature\n                 element.appendChild(new DataNode(CssBundler.inlineImports(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleUtils.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleUtils.java\nindex 3f9f9c3f820..ecc77a1df2b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleUtils.java\n@@ -25,19 +25,18 @@\n import java.util.List;\n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StringUtil;\n import com.vaadin.flow.server.Constants;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.DEV_BUNDLE_JAR_PATH;\n \n public final class BundleUtils {\n@@ -53,15 +52,15 @@ private BundleUtils() {\n      * @return the bundle imports as a set\n      */\n     public static Set<String> loadBundleImports() {\n-        JsonObject statsJson = loadStatsJson();\n-        if (!statsJson.hasKey(\""bundleImports\"")) {\n+        JsonNode statsJson = loadStatsJson();\n+        if (!statsJson.has(\""bundleImports\"")) {\n             return null;\n         }\n \n         Set<String> bundledImports = new HashSet<>();\n-        JsonArray bundleImports = statsJson.getArray(\""bundleImports\"");\n-        for (int i = 0; i < bundleImports.length(); i++) {\n-            String jsImport = bundleImports.getString(i);\n+        JsonNode bundleImports = statsJson.get(\""bundleImports\"");\n+        for (int i = 0; i < bundleImports.size(); i++) {\n+            String jsImport = bundleImports.get(i).textValue();\n             bundledImports.add(jsImport);\n             bundledImports.add(jsImport.replace(\""/theme/lumo/\"", \""/src/\""));\n             bundledImports.add(jsImport.replace(\""/theme/material/\"", \""/src/\""));\n@@ -83,19 +82,19 @@ public static Set<String> loadBundleImports() {\n      *\n      * @return the stats json as a json object\n      */\n-    static JsonObject loadStatsJson() {\n+    static ObjectNode loadStatsJson() {\n         URL statsUrl = BundleUtils.class.getClassLoader()\n                 .getResource(\""META-INF/VAADIN/config/stats.json\"");\n         if (statsUrl == null) {\n-            return Json.createObject();\n+            return JacksonUtils.createObjectNode();\n         }\n         try {\n-            return Json\n-                    .parse(IOUtils.toString(statsUrl, StandardCharsets.UTF_8));\n+            return JacksonUtils.readTree(\n+                    IOUtils.toString(statsUrl, StandardCharsets.UTF_8));\n         } catch (IOException e) {\n             getLogger().warn(\n                     \""Unable to parse META-INF/VAADIN/config/stats.json\"", e);\n-            return Json.createObject();\n+            return JacksonUtils.createObjectNode();\n         }\n     }\n \n@@ -146,8 +145,8 @@ public static String getChunkHash(List<String> chunkLines) {\n      *         <code>false</code> otherwise\n      */\n     public static boolean isPreCompiledProductionBundle() {\n-        JsonObject stats = loadStatsJson();\n-        return stats.hasKey(\""pre-compiled\"");\n+        JsonNode stats = loadStatsJson();\n+        return stats.has(\""pre-compiled\"");\n     }\n \n     private static Logger getLogger() {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\nindex b0cf7420eb3..f273961d6b8 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/BundleValidationUtil.java\n@@ -17,6 +17,9 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -24,6 +27,7 @@\n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.component.WebComponentExporter;\n import com.vaadin.flow.component.WebComponentExporterFactory;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StringUtil;\n import com.vaadin.flow.internal.UsageStatistics;\n import com.vaadin.flow.server.Constants;\n@@ -34,10 +38,6 @@\n import com.vaadin.flow.server.webcomponent.WebComponentExporterTagExtractor;\n import com.vaadin.flow.server.webcomponent.WebComponentExporterUtils;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.DEV_BUNDLE_JAR_PATH;\n \n /**\n@@ -204,8 +204,8 @@ private static boolean needsBuildInternal(Options options,\n             FrontendDependenciesScanner frontendDependencies,\n             String statsJsonContent) throws IOException {\n \n-        JsonObject packageJson = getPackageJson(options, frontendDependencies);\n-        JsonObject statsJson = Json.parse(statsJsonContent);\n+        JsonNode packageJson = getPackageJson(options, frontendDependencies);\n+        JsonNode statsJson = JacksonUtils.readTree(statsJsonContent);\n \n         // Get scanned @NpmPackage annotations\n         final Map<String, String> npmPackages = frontendDependencies\n@@ -230,7 +230,7 @@ private static boolean needsBuildInternal(Options options,\n         }\n         // index.html hash has already been checked, if needed.\n         // removing it from hashes map to prevent other unnecessary checks\n-        statsJson.getObject(FRONTEND_HASHES_STATS_KEY)\n+        ((ObjectNode) statsJson.get(FRONTEND_HASHES_STATS_KEY))\n                 .remove(FrontendUtils.INDEX_HTML);\n \n         if (!BundleValidationUtil.frontendImportsFound(statsJson, options,\n@@ -287,16 +287,16 @@ public static boolean hasJarBundle(String jarPath, ClassFinder finder) {\n      *            the task options\n      * @param frontendDependencies\n      *            frontend dependency scanner\n-     * @return package.json content as JsonObject\n+     * @return package.json content as JsonNode\n      */\n-    public static JsonObject getPackageJson(Options options,\n+    public static JsonNode getPackageJson(Options options,\n             FrontendDependenciesScanner frontendDependencies) {\n         File packageJsonFile = new File(options.getNpmFolder(), \""package.json\"");\n \n         if (packageJsonFile.exists()) {\n             try {\n-                final JsonObject packageJson = Json\n-                        .parse(FileUtils.readFileToString(packageJsonFile,\n+                final ObjectNode packageJson = JacksonUtils\n+                        .readTree(FileUtils.readFileToString(packageJsonFile,\n                                 StandardCharsets.UTF_8));\n                 cleanOldPlatformDependencies(packageJson);\n                 return getDefaultPackageJson(options, frontendDependencies,\n@@ -310,9 +310,9 @@ public static JsonObject getPackageJson(Options options,\n         return null;\n     }\n \n-    public static JsonObject getDefaultPackageJson(Options options,\n+    public static JsonNode getDefaultPackageJson(Options options,\n             FrontendDependenciesScanner frontendDependencies,\n-            JsonObject packageJson) {\n+            ObjectNode packageJson) {\n         NodeUpdater nodeUpdater = new NodeUpdater(frontendDependencies,\n                 options) {\n             @Override\n@@ -345,12 +345,13 @@ public void execute() {\n \n             final String hash = TaskUpdatePackages\n                     .generatePackageJsonHash(packageJson);\n-            packageJson.getObject(NodeUpdater.VAADIN_DEP_KEY)\n+            ((ObjectNode) packageJson.get(NodeUpdater.VAADIN_DEP_KEY))\n                     .put(NodeUpdater.HASH_KEY, hash);\n \n-            final JsonObject platformPinnedDependencies = nodeUpdater\n+            final JsonNode platformPinnedDependencies = nodeUpdater\n                     .getPlatformPinnedDependencies();\n-            for (String key : platformPinnedDependencies.keys()) {\n+            for (String key : JacksonUtils\n+                    .getKeys(platformPinnedDependencies)) {\n                 // need to double check that not overriding a scanned\n                 // dependency since add-ons should be able to downgrade\n                 // version through exclusion\n@@ -381,22 +382,23 @@ public void execute() {\n      * @param packageJson\n      *            content of the package.json content red from a file\n      */\n-    private static void cleanOldPlatformDependencies(JsonObject packageJson) {\n+    private static void cleanOldPlatformDependencies(JsonNode packageJson) {\n         if (packageJson == null\n                 || !hasFrameworkDependencyObjects(packageJson)) {\n             return;\n         }\n \n-        JsonObject dependencies = packageJson\n-                .getObject(NodeUpdater.DEPENDENCIES);\n-        JsonObject vaadinDependencies = packageJson\n-                .getObject(NodeUpdater.VAADIN_DEP_KEY)\n-                .getObject(NodeUpdater.DEPENDENCIES);\n+        ObjectNode dependencies = (ObjectNode) packageJson\n+                .get(NodeUpdater.DEPENDENCIES);\n+        JsonNode vaadinDependencies = packageJson\n+                .get(NodeUpdater.VAADIN_DEP_KEY).get(NodeUpdater.DEPENDENCIES);\n \n-        for (String vaadinDependency : vaadinDependencies.keys()) {\n-            String version = vaadinDependencies.getString(vaadinDependency);\n-            if (dependencies.hasKey(vaadinDependency) && version\n-                    .equals(dependencies.getString(vaadinDependency))) {\n+        for (String vaadinDependency : JacksonUtils\n+                .getKeys(vaadinDependencies)) {\n+            String version = vaadinDependencies.get(vaadinDependency)\n+                    .textValue();\n+            if (dependencies.has(vaadinDependency) && version\n+                    .equals(dependencies.get(vaadinDependency).textValue())) {\n                 dependencies.remove(vaadinDependency);\n                 getLogger().debug(\n                         \""Old Vaadin provided dependency '{}':'{}' has been removed from package.json\"",\n@@ -418,8 +420,8 @@ private static void cleanOldPlatformDependencies(JsonObject packageJson) {\n      *            npm packages map\n      * @return {@code true} if up to date\n      */\n-    public static boolean hashAndBundleModulesEqual(JsonObject statsJson,\n-            JsonObject packageJson, Map<String, String> npmPackages) {\n+    public static boolean hashAndBundleModulesEqual(JsonNode statsJson,\n+            JsonNode packageJson, Map<String, String> npmPackages) {\n \n         String packageJsonHash = BundleValidationUtil\n                 .getPackageJsonHash(packageJson);\n@@ -432,8 +434,7 @@ public static boolean hashAndBundleModulesEqual(JsonObject statsJson,\n             return false;\n         }\n \n-        JsonObject bundleModules = statsJson\n-                .getObject(\""packageJsonDependencies\"");\n+        JsonNode bundleModules = statsJson.get(\""packageJsonDependencies\"");\n \n         if (bundleModules == null) {\n             getLogger().error(\n@@ -449,16 +450,17 @@ public static boolean hashAndBundleModulesEqual(JsonObject statsJson,\n             }\n         }\n \n-        JsonObject dependencies = packageJson.getObject(\""dependencies\"");\n+        JsonNode dependencies = packageJson.get(\""dependencies\"");\n \n-        List<String> dependenciesList = Arrays.stream(dependencies.keys())\n+        List<String> dependenciesList = JacksonUtils.getKeys(dependencies)\n+                .stream()\n                 // skip checking flow-frontend as it was used in previous\n                 // versions as an alias for ./target/flow-frontend\n                 .filter(pkg -> !\""@vaadin/flow-frontend\"".equals(pkg))\n                 .collect(Collectors.toList());\n \n         List<String> missingFromBundle = dependenciesList.stream()\n-                .filter(pkg -> !bundleModules.hasKey(pkg))\n+                .filter(pkg -> !bundleModules.has(pkg))\n                 .collect(Collectors.toList());\n \n         if (!missingFromBundle.isEmpty()) {\n@@ -471,16 +473,17 @@ public static boolean hashAndBundleModulesEqual(JsonObject statsJson,\n \n         // We know here that all dependencies exist\n         missingFromBundle = dependenciesList.stream()\n-                .filter(pkg -> !versionAccepted(dependencies.getString(pkg),\n-                        bundleModules.getString(pkg)))\n+                .filter(pkg -> !versionAccepted(\n+                        dependencies.get(pkg).textValue(),\n+                        bundleModules.get(pkg).textValue()))\n                 .collect(Collectors.toList());\n \n         if (!missingFromBundle.isEmpty()) {\n             for (String pkg : missingFromBundle) {\n                 getLogger().info(\n                         \""Dependency {}:{} has the wrong version {} in the bundle\"",\n-                        pkg, dependencies.getString(pkg),\n-                        bundleModules.getString(pkg));\n+                        pkg, dependencies.get(pkg).textValue(),\n+                        bundleModules.get(pkg).textValue());\n             }\n             return false;\n         }\n@@ -544,10 +547,11 @@ private static boolean versionAccepted(String expected, String actual) {\n      * @return {@code false} if all packages are found\n      */\n     private static boolean dependenciesContainsAllPackages(\n-            Map<String, String> npmPackages, JsonObject dependencies) {\n+            Map<String, String> npmPackages, JsonNode dependencies) {\n         final List<String> collect = npmPackages.keySet().stream()\n-                .filter(pkg -> !(dependencies.hasKey(pkg) && versionAccepted(\n-                        dependencies.getString(pkg), npmPackages.get(pkg))))\n+                .filter(pkg -> !(dependencies.has(pkg)\n+                        && versionAccepted(dependencies.get(pkg).textValue(),\n+                                npmPackages.get(pkg))))\n                 .collect(Collectors.toList());\n         if (!collect.isEmpty()) {\n             collect.forEach(dependency -> getLogger().info(\""Dependency \""\n@@ -557,7 +561,7 @@ private static boolean dependenciesContainsAllPackages(\n         return true;\n     }\n \n-    public static boolean exportedWebComponents(JsonObject statsJson,\n+    public static boolean exportedWebComponents(JsonNode statsJson,\n             ClassFinder finder) {\n         try {\n             Set<Class<?>> exporterRelatedClasses = new HashSet<>();\n@@ -571,8 +575,8 @@ public static boolean exportedWebComponents(JsonObject statsJson,\n                     .map(BundleValidationUtil::getTag)\n                     .collect(Collectors.toSet());\n \n-            JsonArray webComponentsInStats = statsJson\n-                    .getArray(\""webComponents\"");\n+            ArrayNode webComponentsInStats = (ArrayNode) statsJson\n+                    .get(\""webComponents\"");\n \n             if (webComponentsInStats == null) {\n                 if (!webComponents.isEmpty()) {\n@@ -585,9 +589,9 @@ public static boolean exportedWebComponents(JsonObject statsJson,\n                 return false;\n             } else {\n                 for (int index = 0; index < webComponentsInStats\n-                        .length(); index++) {\n-                    String webComponentInStats = webComponentsInStats\n-                            .getString(index);\n+                        .size(); index++) {\n+                    String webComponentInStats = webComponentsInStats.get(index)\n+                            .textValue();\n                     webComponents.remove(webComponentInStats);\n                 }\n             }\n@@ -615,7 +619,7 @@ private static String getTag(\n         return exporterTagExtractor.apply(factory);\n     }\n \n-    public static boolean frontendImportsFound(JsonObject statsJson,\n+    public static boolean frontendImportsFound(JsonNode statsJson,\n             Options options, FrontendDependenciesScanner frontendDependencies)\n             throws IOException {\n \n@@ -633,9 +637,9 @@ public static boolean frontendImportsFound(JsonObject statsJson,\n                         : importString)\n                 .collect(Collectors.toList());\n         LinkedHashSet<String> uniqueImports = new LinkedHashSet<>(imports);\n-        JsonArray statsBundle = statsJson.hasKey(\""bundleImports\"")\n-                ? statsJson.getArray(\""bundleImports\"")\n-                : Json.createArray();\n+        ArrayNode statsBundle = statsJson.has(\""bundleImports\"")\n+                ? (ArrayNode) statsJson.get(\""bundleImports\"")\n+                : JacksonUtils.createArrayNode();\n         final List<String> missingFromBundle = uniqueImports.stream().filter(\n                 importString -> !arrayContainsString(statsBundle, importString))\n                 .collect(Collectors.toList());\n@@ -664,8 +668,8 @@ public static boolean frontendImportsFound(JsonObject statsJson,\n                         FrontendUtils.FRONTEND_FOLDER_ALIAS.length()))\n                 .collect(Collectors.toList());\n \n-        final JsonObject frontendHashes = statsJson\n-                .getObject(FRONTEND_HASHES_STATS_KEY);\n+        final JsonNode frontendHashes = statsJson\n+                .get(FRONTEND_HASHES_STATS_KEY);\n         List<String> faultyContent = new ArrayList<>();\n \n         for (String jarImport : jarImports) {\n@@ -714,12 +718,12 @@ public static boolean frontendImportsFound(JsonObject statsJson,\n     }\n \n     private static boolean hasCustomIndexHtml(Options options,\n-            JsonObject statsJson) throws IOException {\n+            JsonNode statsJson) throws IOException {\n         File indexHtml = new File(options.getFrontendDirectory(),\n                 FrontendUtils.INDEX_HTML);\n         if (indexHtml.exists()) {\n-            final JsonObject frontendHashes = statsJson\n-                    .getObject(FRONTEND_HASHES_STATS_KEY);\n+            final JsonNode frontendHashes = statsJson\n+                    .get(FRONTEND_HASHES_STATS_KEY);\n             String frontendFileContent = FileUtils.readFileToString(indexHtml,\n                     StandardCharsets.UTF_8);\n             List<String> faultyContent = new ArrayList<>();\n@@ -735,15 +739,15 @@ private static boolean hasCustomIndexHtml(Options options,\n     }\n \n     private static boolean indexFileAddedOrDeleted(Options options,\n-            JsonObject frontendHashes) {\n+            JsonNode frontendHashes) {\n         Collection<String> indexFiles = Arrays.asList(FrontendUtils.INDEX_TS,\n                 FrontendUtils.INDEX_JS, FrontendUtils.INDEX_TSX);\n         for (String indexFile : indexFiles) {\n             File file = new File(options.getFrontendDirectory(), indexFile);\n-            if (file.exists() && !frontendHashes.hasKey(indexFile)) {\n+            if (file.exists() && !frontendHashes.has(indexFile)) {\n                 getLogger().info(\""Detected added {} file\"", indexFile);\n                 return true;\n-            } else if (!file.exists() && frontendHashes.hasKey(indexFile)) {\n+            } else if (!file.exists() && frontendHashes.has(indexFile)) {\n                 getLogger().info(\""Detected deleted {} file\"", indexFile);\n                 return true;\n             }\n@@ -753,17 +757,17 @@ private static boolean indexFileAddedOrDeleted(Options options,\n \n     private static Map<String, String> getRemainingImports(\n             List<String> jarImports, List<String> projectImports,\n-            JsonObject frontendHashes) {\n+            JsonNode frontendHashes) {\n         Map<String, String> remainingImportEntries = new HashMap<>();\n-        List<String> remainingKeys = new ArrayList<>(\n-                Arrays.asList(frontendHashes.keys()));\n+        List<String> remainingKeys = JacksonUtils.getKeys(frontendHashes);\n \n         remainingKeys.removeAll(jarImports);\n         remainingKeys.removeAll(projectImports);\n \n         if (!remainingKeys.isEmpty()) {\n             for (String key : remainingKeys) {\n-                remainingImportEntries.put(key, frontendHashes.getString(key));\n+                remainingImportEntries.put(key,\n+                        frontendHashes.get(key).textValue());\n             }\n             return remainingImportEntries;\n         }\n@@ -810,14 +814,14 @@ private static boolean importedFrontendFilesChanged(File frontendDirectory,\n         return false;\n     }\n \n-    private static void compareFrontendHashes(JsonObject frontendHashes,\n+    private static void compareFrontendHashes(JsonNode frontendHashes,\n             List<String> faultyContent, String frontendFilePath,\n             String frontendFileContent) {\n         final String contentHash = calculateHash(frontendFileContent);\n-        if (frontendHashes.hasKey(frontendFilePath) && !frontendHashes\n-                .getString(frontendFilePath).equals(contentHash)) {\n+        if (frontendHashes.has(frontendFilePath) && !frontendHashes\n+                .get(frontendFilePath).textValue().equals(contentHash)) {\n             faultyContent.add(frontendFilePath);\n-        } else if (!frontendHashes.hasKey(frontendFilePath)) {\n+        } else if (!frontendHashes.has(frontendFilePath)) {\n             getLogger().info(\""No hash info for '{}'\"", frontendFilePath);\n             faultyContent.add(frontendFilePath);\n         }\n@@ -828,39 +832,39 @@ public static String calculateHash(String fileContent) {\n         return StringUtil.getHash(content, StandardCharsets.UTF_8);\n     }\n \n-    private static boolean arrayContainsString(JsonArray array, String string) {\n+    private static boolean arrayContainsString(ArrayNode array, String string) {\n         string = string.replace(\""Frontend/\"", \""./\"");\n-        for (int i = 0; i < array.length(); i++) {\n-            if (string.equals(array.getString(i).replace(\""Frontend/\"", \""./\""))) {\n+        for (int i = 0; i < array.size(); i++) {\n+            if (string.equals(\n+                    array.get(i).textValue().replace(\""Frontend/\"", \""./\""))) {\n                 return true;\n             }\n         }\n         return false;\n     }\n \n-    public static String getStatsHash(JsonObject statsJson) {\n-        if (statsJson.hasKey(\""packageJsonHash\"")) {\n-            return statsJson.getString(\""packageJsonHash\"");\n+    public static String getStatsHash(JsonNode statsJson) {\n+        if (statsJson.has(\""packageJsonHash\"")) {\n+            return statsJson.get(\""packageJsonHash\"").textValue();\n         }\n \n         return null;\n     }\n \n-    public static String getPackageJsonHash(JsonObject packageJson) {\n-        if (packageJson != null && packageJson.hasKey(\""vaadin\"")\n-                && packageJson.getObject(\""vaadin\"").hasKey(\""hash\"")) {\n-            return packageJson.getObject(\""vaadin\"").getString(\""hash\"");\n+    public static String getPackageJsonHash(JsonNode packageJson) {\n+        if (packageJson != null && packageJson.has(\""vaadin\"")\n+                && packageJson.get(\""vaadin\"").has(\""hash\"")) {\n+            return packageJson.get(\""vaadin\"").get(\""hash\"").textValue();\n         }\n \n         return null;\n     }\n \n-    private static boolean hasFrameworkDependencyObjects(\n-            JsonObject packageJson) {\n-        return packageJson.hasKey(NodeUpdater.VAADIN_DEP_KEY)\n-                && packageJson.getObject(NodeUpdater.VAADIN_DEP_KEY)\n-                        .hasKey(NodeUpdater.DEPENDENCIES)\n-                && packageJson.hasKey(NodeUpdater.DEPENDENCIES);\n+    private static boolean hasFrameworkDependencyObjects(JsonNode packageJson) {\n+        return packageJson.has(NodeUpdater.VAADIN_DEP_KEY)\n+                && packageJson.get(NodeUpdater.VAADIN_DEP_KEY)\n+                        .has(NodeUpdater.DEPENDENCIES)\n+                && packageJson.has(NodeUpdater.DEPENDENCIES);\n     }\n \n     public static void logChangedFiles(List<String> frontendFiles,\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java\nindex 759c42cf1ed..95423356a85 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/CssBundler.java\n@@ -12,11 +12,12 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n /**\n  * Utility methods to handle application theme CSS content.\n@@ -86,7 +87,7 @@ public class CssBundler {\n      * @throws IOException\n      *             if filesystem resources can not be read.\n      * @deprecated this method does not resolve theme assets, use\n-     *             {@link #inlineImports(File, File, JsonObject)} instead.\n+     *             {@link #inlineImports(File, File, JsonNode)} instead.\n      */\n     @Deprecated\n     public static String inlineImports(File themeFolder, File cssFile)\n@@ -120,7 +121,7 @@ public static String inlineImports(File themeFolder, File cssFile)\n      *             if filesystem resources can not be read.\n      */\n     public static String inlineImports(File themeFolder, File cssFile,\n-            JsonObject themeJson) throws IOException {\n+            JsonNode themeJson) throws IOException {\n         return inlineImports(themeFolder, cssFile,\n                 getThemeAssetsAliases(themeJson));\n     }\n@@ -247,16 +248,16 @@ private static boolean isPotentialThemeAsset(File themeFolder,\n         return potentialAsset;\n     }\n \n-    private static Set<String> getThemeAssetsAliases(JsonObject themeJson) {\n-        JsonObject assets = themeJson != null && themeJson.hasKey(\""assets\"")\n-                ? themeJson.getObject(\""assets\"")\n+    private static Set<String> getThemeAssetsAliases(JsonNode themeJson) {\n+        JsonNode assets = themeJson != null && themeJson.has(\""assets\"")\n+                ? themeJson.get(\""assets\"")\n                 : null;\n         Set<String> aliases = new HashSet<>();\n         if (assets != null) {\n-            for (String nmpPackage : assets.keys()) {\n-                JsonObject packageAliases = assets.getObject(nmpPackage);\n-                for (String path : packageAliases.keys()) {\n-                    aliases.add(packageAliases.getString(path) + \""/\"");\n+            for (String nmpPackage : JacksonUtils.getKeys(assets)) {\n+                JsonNode packageAliases = assets.get(nmpPackage);\n+                for (String path : JacksonUtils.getKeys(packageAliases)) {\n+                    aliases.add(packageAliases.get(path).textValue() + \""/\"");\n                 }\n             }\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java\nindex dc126dc97eb..16e8e5c511e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ExclusionFilter.java\n@@ -29,9 +29,9 @@\n \n import org.apache.commons.io.IOUtils;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n-import elemental.json.Json;\n \n /**\n  * Excludes dependencies listed in an \""exclusions\"" array of\n@@ -111,7 +111,7 @@ private List<String> getExclusions() throws IOException {\n     private Set<String> getExclusions(URL versionsResource) throws IOException {\n         try (InputStream content = versionsResource.openStream()) {\n             VersionsJsonConverter convert = new VersionsJsonConverter(\n-                    Json.parse(\n+                    JacksonUtils.readTree(\n                             IOUtils.toString(content, StandardCharsets.UTF_8)),\n                     reactEnabled, excludeWebComponentNpmPackages);\n             return convert.getExclusions();\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendPluginsUtil.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendPluginsUtil.java\nindex 85eb7dd1efa..cc850488896 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendPluginsUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendPluginsUtil.java\n@@ -24,11 +24,10 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n \n@@ -56,16 +55,16 @@ private FrontendPluginsUtil() {\n      */\n     protected static List<String> getPlugins() {\n         try {\n-            final JsonObject jsonFile = getJsonFile(\""plugins/plugins.json\"");\n+            final JsonNode jsonFile = getJsonFile(\""plugins/plugins.json\"");\n             if (jsonFile == null) {\n                 throw new IllegalStateException(\n                         \""Couldn't locate plugins/plugins.json\"");\n             }\n \n-            final JsonArray plugins = jsonFile.getArray(\""plugins\"");\n-            List<String> pluginsToInstall = new ArrayList<>(plugins.length());\n-            for (int i = 0; i < plugins.length(); i++) {\n-                pluginsToInstall.add(plugins.getString(i));\n+            final JsonNode plugins = jsonFile.get(\""plugins\"");\n+            List<String> pluginsToInstall = new ArrayList<>(plugins.size());\n+            for (int i = 0; i < plugins.size(); i++) {\n+                pluginsToInstall.add(plugins.get(i).textValue());\n             }\n             return pluginsToInstall;\n         } catch (IOException ioe) {\n@@ -83,7 +82,7 @@ protected static List<String> getPlugins() {\n      * @throws IOException\n      *             thrown for problems reading file\n      */\n-    protected static JsonObject getJsonFile(String jsonFilePath)\n+    protected static JsonNode getJsonFile(String jsonFilePath)\n             throws IOException {\n         final URL urlResource = getResourceUrl(jsonFilePath);\n         if (urlResource == null) {\n@@ -103,7 +102,7 @@ protected static JsonObject getJsonFile(String jsonFilePath)\n         } else {\n             jsonString = FileUtils.readFileToString(jsonFile, UTF_8);\n         }\n-        return Json.parse(jsonString);\n+        return JacksonUtils.readTree(jsonString);\n     }\n \n     /**\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java\nindex bac0f034278..9797292cb43 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/FrontendUtils.java\n@@ -39,6 +39,8 @@\n import java.util.regex.Pattern;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import jakarta.servlet.ServletContext;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n@@ -60,7 +62,6 @@\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.internal.menu.MenuRegistry;\n \n-import elemental.json.JsonObject;\n import static com.vaadin.flow.server.Constants.COMPATIBILITY_RESOURCES_FRONTEND_DEFAULT;\n import static com.vaadin.flow.server.Constants.RESOURCES_FRONTEND_DEFAULT;\n import static com.vaadin.flow.server.Constants.VAADIN_WEBAPP_RESOURCES;\n@@ -1034,13 +1035,13 @@ public static String commandToString(String baseDir, List<String> command) {\n      *            origin of the version (like a file), used in error message\n      * @return the frontend version the package or {@code null}\n      */\n-    public static FrontendVersion getPackageVersionFromJson(\n-            JsonObject sourceJson, String pkg, String versionOrigin) {\n-        if (!sourceJson.hasKey(pkg)) {\n+    public static FrontendVersion getPackageVersionFromJson(JsonNode sourceJson,\n+            String pkg, String versionOrigin) {\n+        if (!sourceJson.has(pkg)) {\n             return null;\n         }\n         try {\n-            final String versionString = sourceJson.getString(pkg);\n+            final String versionString = sourceJson.get(pkg).textValue();\n             return new FrontendVersion(pkg, versionString);\n         } catch (ClassCastException classCastException) { // NOSONAR\n             LoggerFactory.getLogger(FrontendVersion.class).warn(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/GenerateMainImports.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/GenerateMainImports.java\nindex 5550bf1f135..ebffc5c7677 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/GenerateMainImports.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/GenerateMainImports.java\n@@ -21,16 +21,15 @@\n import java.util.List;\n import java.util.Map;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n import org.slf4j.Logger;\n import org.slf4j.helpers.NOPLogger;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.frontend.scanner.CssData;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n /**\n  * Collect generated-flow-imports content for project to use to determine if\n  * dev-bundle contains all required imports.\n@@ -41,11 +40,11 @@\n  * For internal use only. May be renamed or removed in a future release.\n  */\n public class GenerateMainImports extends AbstractUpdateImports {\n-    private JsonObject statsJson;\n+    private JsonNode statsJson;\n     private Map<File, List<String>> output;\n \n     public GenerateMainImports(FrontendDependenciesScanner frontendDepScanner,\n-            Options options, JsonObject statsJson) {\n+            Options options, JsonNode statsJson) {\n         super(options, frontendDepScanner);\n         this.statsJson = statsJson;\n     }\n@@ -97,14 +96,14 @@ protected boolean importedFileExists(String importName) {\n         // Basically it means theme file import path like:\n         // \""@vaadin/accordion/theme/lumo/accordion.js\"" instead of\n         // \""@vaadin/accordion/src/accordion.js\""\n-        JsonArray statsBundle = statsJson.hasKey(\""bundleImports\"")\n-                ? statsJson.getArray(\""bundleImports\"")\n-                : Json.createArray();\n+        ArrayNode statsBundle = statsJson.has(\""bundleImports\"")\n+                ? (ArrayNode) statsJson.get(\""bundleImports\"")\n+                : JacksonUtils.createArrayNode();\n         importName = importName.replace(\""Frontend/\"", \""./\"");\n \n-        for (int i = 0; i < statsBundle.length(); i++) {\n-            if (importName.equals(\n-                    statsBundle.getString(i).replace(\""Frontend/\"", \""./\""))) {\n+        for (int i = 0; i < statsBundle.size(); i++) {\n+            if (importName.equals(statsBundle.get(i).textValue()\n+                    .replace(\""Frontend/\"", \""./\""))) {\n                 return true;\n             }\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\nindex 1856df7235c..c233174a612 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeUpdater.java\n@@ -32,26 +32,25 @@\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.experimental.FeatureFlags;\n+import com.vaadin.flow.internal.JacksonUtils;\n+import com.vaadin.flow.internal.JsonDecodingException;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependencies;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n \n-import elemental.json.Json;\n-import elemental.json.JsonException;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.PACKAGE_LOCK_JSON;\n import static com.vaadin.flow.server.frontend.FrontendUtils.NODE_MODULES;\n-import static elemental.json.impl.JsonUtil.stringify;\n import static java.nio.charset.StandardCharsets.UTF_8;\n \n /**\n@@ -103,7 +102,7 @@ public abstract class NodeUpdater implements FallibleCommand {\n \n     boolean modified;\n \n-    JsonObject versionsJson;\n+    ObjectNode versionsJson;\n \n     protected Options options;\n \n@@ -134,12 +133,12 @@ protected File getPackageLockFile() {\n      * Gets the platform pinned versions that are not overridden by the user in\n      * package.json.\n      *\n-     * @return {@code JsonObject} with the dependencies or empty\n-     *         {@code JsonObject} if file doesn't exist\n+     * @return {@code JsonNode} with the dependencies or empty {@code JsonNode}\n+     *         if file doesn't exist\n      * @throws IOException\n      *             when versions file could not be read\n      */\n-    JsonObject getPlatformPinnedDependencies() throws IOException {\n+    ObjectNode getPlatformPinnedDependencies() throws IOException {\n         URL coreVersionsResource = finder\n                 .getResource(Constants.VAADIN_CORE_VERSIONS_JSON);\n         if (coreVersionsResource == null) {\n@@ -147,10 +146,10 @@ JsonObject getPlatformPinnedDependencies() throws IOException {\n                     \""Couldn't find {} file to pin dependency versions for core components.\""\n                             + \"" Transitive dependencies won't be pinned for npm/pnpm/bun.\"",\n                     Constants.VAADIN_CORE_VERSIONS_JSON);\n-            return Json.createObject();\n+            return JacksonUtils.createObjectNode();\n         }\n \n-        JsonObject versionsJson = getFilteredVersionsFromResource(\n+        ObjectNode versionsJson = getFilteredVersionsFromResource(\n                 coreVersionsResource, Constants.VAADIN_CORE_VERSIONS_JSON);\n \n         URL vaadinVersionsResource = finder\n@@ -160,22 +159,22 @@ JsonObject getPlatformPinnedDependencies() throws IOException {\n             return versionsJson;\n         }\n \n-        JsonObject vaadinVersionsJson = getFilteredVersionsFromResource(\n+        ObjectNode vaadinVersionsJson = getFilteredVersionsFromResource(\n                 vaadinVersionsResource, Constants.VAADIN_VERSIONS_JSON);\n-        for (String key : vaadinVersionsJson.keys()) {\n-            versionsJson.put(key, vaadinVersionsJson.getString(key));\n+        for (String key : JacksonUtils.getKeys(vaadinVersionsJson)) {\n+            versionsJson.put(key, vaadinVersionsJson.get(key).textValue());\n         }\n \n         return versionsJson;\n     }\n \n-    private JsonObject getFilteredVersionsFromResource(URL versionsResource,\n+    private ObjectNode getFilteredVersionsFromResource(URL versionsResource,\n             String versionsOrigin) throws IOException {\n-        JsonObject versionsJson;\n+        ObjectNode versionsJson;\n \n         try (InputStream content = versionsResource.openStream()) {\n             VersionsJsonConverter convert = new VersionsJsonConverter(\n-                    Json.parse(\n+                    JacksonUtils.readTree(\n                             IOUtils.toString(content, StandardCharsets.UTF_8)),\n                     options.isReactEnabled()\n                             && FrontendUtils.isReactModuleAvailable(options),\n@@ -209,10 +208,10 @@ static Set<String> getGeneratedModules(File frontendFolder) {\n                 .collect(Collectors.toSet());\n     }\n \n-    JsonObject getPackageJson() throws IOException {\n-        JsonObject packageJson = getJsonFileContent(getPackageJsonFile());\n+    ObjectNode getPackageJson() throws IOException {\n+        ObjectNode packageJson = getJsonFileContent(getPackageJsonFile());\n         if (packageJson == null) {\n-            packageJson = Json.createObject();\n+            packageJson = JacksonUtils.createObjectNode();\n             packageJson.put(DEP_NAME_KEY, DEP_NAME_DEFAULT);\n             packageJson.put(DEP_LICENSE_KEY, DEP_LICENSE_DEFAULT);\n             packageJson.put(\""type\"", \""module\"");\n@@ -225,20 +224,21 @@ JsonObject getPackageJson() throws IOException {\n         return packageJson;\n     }\n \n-    private void addDefaultObjects(JsonObject json) {\n-        computeIfAbsent(json, DEPENDENCIES, Json::createObject);\n-        computeIfAbsent(json, DEV_DEPENDENCIES, Json::createObject);\n+    private void addDefaultObjects(ObjectNode json) {\n+        computeIfAbsent(json, DEPENDENCIES, JacksonUtils::createObjectNode);\n+        computeIfAbsent(json, DEV_DEPENDENCIES, JacksonUtils::createObjectNode);\n     }\n \n-    private void removeWebpackPlugins(JsonObject packageJson) {\n+    private void removeWebpackPlugins(ObjectNode packageJson) {\n         Path targetFolder = Paths.get(options.getNpmFolder().toString(),\n                 options.getBuildDirectoryName(),\n                 FrontendPluginsUtil.PLUGIN_TARGET);\n \n-        if (!packageJson.hasKey(DEV_DEPENDENCIES)) {\n+        if (!packageJson.has(DEV_DEPENDENCIES)) {\n             return;\n         }\n-        JsonObject devDependencies = packageJson.getObject(DEV_DEPENDENCIES);\n+        ObjectNode devDependencies = (ObjectNode) packageJson\n+                .get(DEV_DEPENDENCIES);\n \n         String atVaadinPrefix = \""@vaadin/\"";\n         String pluginTargetPrefix = \""./\""\n@@ -246,8 +246,8 @@ private void removeWebpackPlugins(JsonObject packageJson) {\n                         + \""/\"").replace('\\\\', '/');\n \n         // Clean previously installed plugins\n-        for (String depKey : devDependencies.keys()) {\n-            String depVersion = devDependencies.getString(depKey);\n+        for (String depKey : JacksonUtils.getKeys(devDependencies)) {\n+            String depVersion = devDependencies.get(depKey).textValue();\n             if (depKey.startsWith(atVaadinPrefix)\n                     && depVersion.startsWith(pluginTargetPrefix)) {\n                 devDependencies.remove(depKey);\n@@ -255,44 +255,45 @@ private void removeWebpackPlugins(JsonObject packageJson) {\n         }\n     }\n \n-    static JsonObject getJsonFileContent(File packageFile) throws IOException {\n-        JsonObject jsonContent = null;\n+    static ObjectNode getJsonFileContent(File packageFile) throws IOException {\n+        ObjectNode jsonContent = null;\n         if (packageFile.exists()) {\n             String fileContent = FileUtils.readFileToString(packageFile,\n                     UTF_8.name());\n             try {\n-                jsonContent = Json.parse(fileContent);\n-            } catch (JsonException e) { // NOSONAR\n-                throw new JsonException(String\n+                jsonContent = (ObjectNode) JacksonUtils.readTree(fileContent);\n+            } catch (JsonDecodingException e) { // NOSONAR\n+                throw new RuntimeException(String\n                         .format(\""Cannot parse package file '%s'\"", packageFile));\n             }\n         }\n         return jsonContent;\n     }\n \n-    void addVaadinDefaultsToJson(JsonObject json) {\n-        JsonObject vaadinPackages = computeIfAbsent(json, VAADIN_DEP_KEY,\n-                Json::createObject);\n+    void addVaadinDefaultsToJson(ObjectNode json) {\n+        ObjectNode vaadinPackages = computeIfAbsent(json, VAADIN_DEP_KEY,\n+                JacksonUtils::createObjectNode);\n \n         computeIfAbsent(vaadinPackages, DEPENDENCIES, () -> {\n-            final JsonObject dependencies = Json.createObject();\n+            final ObjectNode dependencies = JacksonUtils.createObjectNode();\n             getDefaultDependencies().forEach(dependencies::put);\n             return dependencies;\n         });\n         computeIfAbsent(vaadinPackages, DEV_DEPENDENCIES, () -> {\n-            final JsonObject devDependencies = Json.createObject();\n+            final ObjectNode devDependencies = JacksonUtils.createObjectNode();\n             getDefaultDevDependencies().forEach(devDependencies::put);\n             return devDependencies;\n         });\n-        computeIfAbsent(vaadinPackages, HASH_KEY, () -> Json.create(\""\""));\n+        computeIfAbsent(vaadinPackages, HASH_KEY,\n+                () -> JacksonUtils.createNode(\""\""));\n     }\n \n-    private static <T extends JsonValue> T computeIfAbsent(\n-            JsonObject jsonObject, String key, Supplier<T> valueSupplier) {\n-        T result = jsonObject.get(key);\n+    private static <T extends JsonNode> T computeIfAbsent(ObjectNode jsonObject,\n+            String key, Supplier<T> valueSupplier) {\n+        T result = (T) jsonObject.get(key);\n         if (result == null) {\n             result = valueSupplier.get();\n-            jsonObject.put(key, result);\n+            jsonObject.set(key, result);\n         }\n         return result;\n     }\n@@ -318,15 +319,14 @@ Map<String, String> getDefaultDependencies() {\n     Map<String, String> readDependencies(String id, String packageJsonKey) {\n         try {\n             Map<String, String> map = new HashMap<>();\n-            JsonObject dependencies = readPackageJson(id)\n-                    .getObject(packageJsonKey);\n+            JsonNode dependencies = readPackageJson(id).get(packageJsonKey);\n             if (dependencies == null) {\n                 log().error(\""Unable to find \"" + packageJsonKey + \"" from '\"" + id\n                         + \""'\"");\n                 return new HashMap<>();\n             }\n-            for (String key : dependencies.keys()) {\n-                map.put(key, dependencies.getString(key));\n+            for (String key : JacksonUtils.getKeys(dependencies)) {\n+                map.put(key, dependencies.get(key).textValue());\n             }\n \n             return map;\n@@ -339,17 +339,18 @@ Map<String, String> readDependencies(String id, String packageJsonKey) {\n \n     }\n \n-    JsonObject readPackageJson(String id) throws IOException {\n+    JsonNode readPackageJson(String id) throws IOException {\n         URL resource = options.getClassFinder()\n                 .getResource(FRONTEND_RESOURCES_PATH + \""dependencies/\"" + id\n                         + \""/package.json\"");\n         if (resource == null) {\n             log().error(\""Unable to find package.json from '\"" + id + \""'\"");\n \n-            return Json.parse(\""{\\\""%s\\\"":{},\\\""%s\\\"":{}}\"".formatted(DEPENDENCIES,\n-                    DEV_DEPENDENCIES));\n+            return JacksonUtils.readTree(\""{\\\""%s\\\"":{},\\\""%s\\\"":{}}\""\n+                    .formatted(DEPENDENCIES, DEV_DEPENDENCIES));\n         }\n-        return Json.parse(IOUtils.toString(resource, StandardCharsets.UTF_8));\n+        return JacksonUtils\n+                .readTree(IOUtils.toString(resource, StandardCharsets.UTF_8));\n     }\n \n     boolean hasPackageJson(String id) {\n@@ -389,7 +390,7 @@ Map<String, String> getDefaultDevDependencies() {\n      *            package.json json object to update with dependencies\n      * @return true if items were added or removed from the {@code packageJson}\n      */\n-    boolean updateDefaultDependencies(JsonObject packageJson) {\n+    boolean updateDefaultDependencies(ObjectNode packageJson) {\n         int added = 0;\n \n         for (Map.Entry<String, String> entry : getDefaultDependencies()\n@@ -411,26 +412,26 @@ boolean updateDefaultDependencies(JsonObject packageJson) {\n         return added > 0;\n     }\n \n-    int addDependency(JsonObject json, String key, String pkg, String version) {\n+    int addDependency(ObjectNode json, String key, String pkg, String version) {\n         Objects.requireNonNull(json, \""Json object need to be given\"");\n         Objects.requireNonNull(key, \""Json sub object needs to be give.\"");\n         Objects.requireNonNull(pkg, \""dependency package needs to be defined\"");\n \n-        JsonObject vaadinDeps = json.getObject(VAADIN_DEP_KEY);\n-        if (!json.hasKey(key)) {\n-            json.put(key, Json.createObject());\n+        ObjectNode vaadinDeps = (ObjectNode) json.get(VAADIN_DEP_KEY);\n+        if (!json.has(key)) {\n+            json.put(key, JacksonUtils.createObjectNode());\n         }\n-        json = json.get(key);\n-        vaadinDeps = vaadinDeps.getObject(key);\n+        json = (ObjectNode) json.get(key);\n+        vaadinDeps = (ObjectNode) vaadinDeps.get(key);\n \n-        if (vaadinDeps.hasKey(pkg)) {\n+        if (vaadinDeps.has(pkg)) {\n             if (version == null) {\n-                version = vaadinDeps.getString(pkg);\n+                version = vaadinDeps.get(pkg).textValue();\n             }\n             return handleExistingVaadinDep(json, pkg, version, vaadinDeps);\n         } else {\n             vaadinDeps.put(pkg, version);\n-            if (!json.hasKey(pkg) || isNewerVersion(json, pkg, version)) {\n+            if (!json.has(pkg) || isNewerVersion(json, pkg, version)) {\n                 json.put(pkg, version);\n                 log().debug(\""Added \\\""{}\\\"": \\\""{}\\\"" line.\"", pkg, version);\n                 return 1;\n@@ -439,15 +440,14 @@ int addDependency(JsonObject json, String key, String pkg, String version) {\n         return 0;\n     }\n \n-    private boolean isNewerVersion(JsonObject json, String pkg,\n-            String version) {\n+    private boolean isNewerVersion(JsonNode json, String pkg, String version) {\n \n         try {\n             FrontendVersion newVersion = new FrontendVersion(version);\n             FrontendVersion existingVersion = toVersion(json, pkg);\n             return newVersion.isNewerThan(existingVersion);\n         } catch (NumberFormatException e) {\n-            if (VAADIN_FORM_PKG.equals(pkg) && json.getString(pkg)\n+            if (VAADIN_FORM_PKG.equals(pkg) && json.get(pkg).textValue()\n                     .contains(VAADIN_FORM_PKG_LEGACY_VERSION)) {\n                 return true;\n             } else {\n@@ -462,13 +462,13 @@ private boolean isNewerVersion(JsonObject json, String pkg,\n         }\n     }\n \n-    private int handleExistingVaadinDep(JsonObject json, String pkg,\n-            String version, JsonObject vaadinDeps) {\n+    private int handleExistingVaadinDep(ObjectNode json, String pkg,\n+            String version, ObjectNode vaadinDeps) {\n         boolean added = false;\n         boolean updatedVaadinVersionSection = false;\n         try {\n             FrontendVersion vaadinVersion = toVersion(vaadinDeps, pkg);\n-            if (json.hasKey(pkg)) {\n+            if (json.has(pkg)) {\n                 FrontendVersion packageVersion = toVersion(json, pkg);\n                 FrontendVersion newVersion = new FrontendVersion(version);\n                 // Vaadin and package.json versions are the same, but dependency\n@@ -495,7 +495,7 @@ private int handleExistingVaadinDep(JsonObject json, String pkg,\n              */\n         }\n         // always update vaadin version to the latest set version\n-        if (!version.equals(vaadinDeps.getString(pkg))) {\n+        if (!version.equals(vaadinDeps.get(pkg).textValue())) {\n             vaadinDeps.put(pkg, version);\n             updatedVaadinVersionSection = true;\n         }\n@@ -510,18 +510,18 @@ private int handleExistingVaadinDep(JsonObject json, String pkg,\n         return added ? 1 : 0;\n     }\n \n-    private static FrontendVersion toVersion(JsonObject json, String key) {\n-        return new FrontendVersion(json.getString(key));\n+    private static FrontendVersion toVersion(JsonNode json, String key) {\n+        return new FrontendVersion(json.get(key).textValue());\n     }\n \n-    String writePackageFile(JsonObject packageJson) throws IOException {\n+    String writePackageFile(JsonNode packageJson) throws IOException {\n         return writePackageFile(packageJson,\n                 new File(options.getNpmFolder(), PACKAGE_JSON));\n     }\n \n-    String writePackageFile(JsonObject json, File packageFile)\n+    String writePackageFile(JsonNode json, File packageFile)\n             throws IOException {\n-        String content = stringify(json, 2) + \""\\n\"";\n+        String content = json.toString() + \""\\n\"";\n         if (packageFile.exists() || options.isFrontendHotdeploy()\n                 || options.isBundleBuild()) {\n             log().debug(\""writing file {}.\"", packageFile.getAbsolutePath());\n@@ -536,24 +536,24 @@ File getVaadinJsonFile() {\n                 VAADIN_JSON);\n     }\n \n-    JsonObject getVaadinJsonContents() throws IOException {\n+    ObjectNode getVaadinJsonContents() throws IOException {\n         File vaadinJsonFile = getVaadinJsonFile();\n         if (vaadinJsonFile.exists()) {\n             String fileContent = FileUtils.readFileToString(vaadinJsonFile,\n                     UTF_8.name());\n-            return Json.parse(fileContent);\n+            return (ObjectNode) JacksonUtils.readTree(fileContent);\n         } else {\n-            return Json.createObject();\n+            return JacksonUtils.createObjectNode();\n         }\n     }\n \n     void updateVaadinJsonContents(Map<String, String> newContent)\n             throws IOException {\n-        JsonObject fileContent = getVaadinJsonContents();\n+        ObjectNode fileContent = getVaadinJsonContents();\n         newContent.forEach(fileContent::put);\n         File vaadinJsonFile = getVaadinJsonFile();\n         FileUtils.forceMkdirParent(vaadinJsonFile);\n-        String content = stringify(fileContent, 2) + \""\\n\"";\n+        String content = fileContent + \""\\n\"";\n         FileIOUtils.writeIfChanged(vaadinJsonFile, content);\n     }\n \n@@ -569,17 +569,18 @@ Logger log() {\n      * @throws IOException\n      *             when file IO fails\n      */\n-    protected void generateVersionsJson(JsonObject packageJson)\n+    protected void generateVersionsJson(ObjectNode packageJson)\n             throws IOException {\n         versionsJson = getPlatformPinnedDependencies();\n-        JsonObject packageJsonVersions = generateVersionsFromPackageJson(\n+        ObjectNode packageJsonVersions = generateVersionsFromPackageJson(\n                 packageJson);\n-        if (versionsJson.keys().length == 0) {\n+        if (JacksonUtils.getKeys(versionsJson).isEmpty()) {\n             versionsJson = packageJsonVersions;\n         } else {\n-            for (String key : packageJsonVersions.keys()) {\n-                if (!versionsJson.hasKey(key)) {\n-                    versionsJson.put(key, packageJsonVersions.getString(key));\n+            for (String key : JacksonUtils.getKeys(packageJsonVersions)) {\n+                if (!versionsJson.has(key)) {\n+                    versionsJson.put(key,\n+                            packageJsonVersions.get(key).textValue());\n                 }\n             }\n         }\n@@ -592,13 +593,13 @@ protected void generateVersionsJson(JsonObject packageJson)\n      *\n      * @return versions Json based on package.json\n      */\n-    private JsonObject generateVersionsFromPackageJson(JsonObject packageJson) {\n-        JsonObject versionsJson = Json.createObject();\n+    private ObjectNode generateVersionsFromPackageJson(JsonNode packageJson) {\n+        ObjectNode versionsJson = JacksonUtils.createObjectNode();\n         // if we don't have versionsJson lock package dependency versions.\n-        final JsonObject dependencies = packageJson.getObject(DEPENDENCIES);\n+        final JsonNode dependencies = packageJson.get(DEPENDENCIES);\n         if (dependencies != null) {\n-            for (String key : dependencies.keys()) {\n-                versionsJson.put(key, dependencies.getString(key));\n+            for (String key : JacksonUtils.getKeys(dependencies)) {\n+                versionsJson.put(key, dependencies.get(key).textValue());\n             }\n         }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\nindex 7d87fbc8925..9b740ea3a75 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/Options.java\n@@ -4,11 +4,11 @@\n import java.io.Serializable;\n import java.net.URI;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.experimental.FeatureFlags;\n@@ -18,8 +18,6 @@\n import com.vaadin.flow.server.frontend.installer.Platform;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * Build a <code>NodeExecutor</code> instance.\n  */\n@@ -59,7 +57,7 @@ public class Options implements Serializable {\n \n     private boolean useByteCodeScanner = false;\n \n-    private JsonObject tokenFileData;\n+    private JsonNode tokenFileData;\n \n     private File tokenFile;\n \n@@ -424,7 +422,7 @@ public Options useByteCodeScanner(boolean byteCodeScanner) {\n      *            the object to fill with token file data\n      * @return the builder, for chaining\n      */\n-    public Options populateTokenFileData(JsonObject object) {\n+    public Options populateTokenFileData(JsonNode object) {\n         tokenFileData = object;\n         return this;\n     }\n@@ -803,7 +801,7 @@ public boolean isUseByteCodeScanner() {\n         return useByteCodeScanner;\n     }\n \n-    public JsonObject getTokenFileData() {\n+    public JsonNode getTokenFileData() {\n         return tokenFileData;\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePackageJson.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePackageJson.java\nindex bdff3042eac..fb071a35687 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePackageJson.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePackageJson.java\n@@ -18,7 +18,7 @@\n import java.io.IOException;\n import java.io.UncheckedIOException;\n \n-import elemental.json.JsonObject;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n  * Creates the <code>package.json</code> if missing.\n@@ -43,11 +43,11 @@ public class TaskGeneratePackageJson extends NodeUpdater {\n     public void execute() {\n         try {\n             modified = false;\n-            JsonObject mainContent = getPackageJson();\n+            ObjectNode mainContent = getPackageJson();\n             modified = updateDefaultDependencies(mainContent);\n             if (modified) {\n-                if (!mainContent.hasKey(\""type\"")\n-                        || !mainContent.getString(\""type\"").equals(\""module\"")) {\n+                if (!mainContent.has(\""type\"") || !mainContent.get(\""type\"")\n+                        .textValue().equals(\""module\"")) {\n                     mainContent.put(\""type\"", \""module\"");\n                     log().info(\n                             \""\""\""\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateReactFiles.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateReactFiles.java\nindex 1054965913d..b3f2bd82f46 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateReactFiles.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateReactFiles.java\n@@ -24,21 +24,20 @@\n import java.util.Collection;\n import java.util.regex.Pattern;\n \n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StringUtil;\n import com.vaadin.flow.router.Layout;\n import com.vaadin.flow.router.Route;\n import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.server.Version;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.frontend.FileIOUtils.compareIgnoringIndentationEOLAndWhiteSpace;\n import static java.nio.charset.StandardCharsets.UTF_8;\n \n@@ -248,16 +247,16 @@ private void writeLayoutsJson(Collection<Class<?>> layoutClasses)\n     }\n \n     private String layoutsContent(Collection<Class<?>> layoutClasses) {\n-        JsonArray availableLayouts = Json.createArray();\n+        ArrayNode availableLayouts = JacksonUtils.createArrayNode();\n         for (Class<?> layout : layoutClasses) {\n             if (layout.isAnnotationPresent(Layout.class)) {\n-                JsonObject layoutObject = Json.createObject();\n+                ObjectNode layoutObject = JacksonUtils.createObjectNode();\n                 layoutObject.put(\""path\"",\n                         layout.getAnnotation(Layout.class).value());\n-                availableLayouts.set(availableLayouts.length(), layoutObject);\n+                availableLayouts.add(layoutObject);\n             }\n         }\n-        return availableLayouts.toJson();\n+        return availableLayouts.toString();\n     }\n \n     private void cleanup() throws ExecutionFailedException {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java\nindex d7f93d708f5..ffef25b5233 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGenerateTsConfig.java\n@@ -23,14 +23,14 @@\n import java.io.UncheckedIOException;\n import java.nio.charset.StandardCharsets;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.ExecutionFailedException;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n /**\n  * Generate <code>tsconfig.json</code> if it is missing in project folder.\n  * <p>\n@@ -154,14 +154,14 @@ private String getDefaultEsTargetVersion() throws ExecutionFailedException {\n     }\n \n     private String getEsTargetVersion(String tsConfig) {\n-        JsonObject parsed = parseTsConfig(tsConfig);\n-        return parsed.getObject(COMPILER_OPTIONS).getString(ES_TARGET_VERSION);\n+        JsonNode parsed = parseTsConfig(tsConfig);\n+        return parsed.get(COMPILER_OPTIONS).get(ES_TARGET_VERSION).textValue();\n     }\n \n-    private JsonObject parseTsConfig(String tsConfig) {\n+    private ObjectNode parseTsConfig(String tsConfig) {\n         // remove comments so parser works\n         String json = tsConfig.replaceAll(\""//.*\"", \""\"");\n-        return Json.parse(json);\n+        return JacksonUtils.readTree(json);\n     }\n \n     @Override\n@@ -182,7 +182,7 @@ private void overrideIfObsolete() {\n             String projectTsConfigAsString = FileUtils\n                     .readFileToString(projectTsConfigFile, UTF_8);\n \n-            JsonObject projectTsConfigContent;\n+            ObjectNode projectTsConfigContent;\n             try {\n                 projectTsConfigContent = parseTsConfig(projectTsConfigAsString);\n             } catch (Exception e) {\n@@ -193,7 +193,7 @@ private void overrideIfObsolete() {\n \n             // Newest TS config template in Flow\n             String latestTsConfigTemplate = getFileContent();\n-            JsonObject latestTsConfigTemplateJson = parseTsConfig(\n+            JsonNode latestTsConfigTemplateJson = parseTsConfig(\n                     latestTsConfigTemplate);\n \n             String projectTsConfigVersion = getConfigVersion(\n@@ -212,7 +212,7 @@ private void overrideIfObsolete() {\n             for (String tsconfigVersion : tsconfigVersions) {\n                 String oldTsConfigContent = getFileContentForVersion(\n                         tsconfigVersion);\n-                JsonObject tsConfigTemplateJson = parseTsConfig(\n+                ObjectNode tsConfigTemplateJson = parseTsConfig(\n                         oldTsConfigContent);\n                 if (tsConfigsEqual(tsConfigTemplateJson,\n                         projectTsConfigContent)) {\n@@ -241,33 +241,34 @@ private void overrideIfObsolete() {\n         }\n     }\n \n-    private String getConfigVersion(JsonObject projectTsConfigContent) {\n-        if (projectTsConfigContent.hasKey(VERSION)) {\n-            return projectTsConfigContent.getString(VERSION);\n+    private String getConfigVersion(JsonNode projectTsConfigContent) {\n+        if (projectTsConfigContent.has(VERSION)) {\n+            return projectTsConfigContent.get(VERSION).textValue();\n         }\n-        if (projectTsConfigContent.hasKey(OLD_VERSION_KEY)) {\n-            return projectTsConfigContent.getString(OLD_VERSION_KEY);\n+        if (projectTsConfigContent.has(OLD_VERSION_KEY)) {\n+            return projectTsConfigContent.get(OLD_VERSION_KEY).textValue();\n         }\n         return null;\n     }\n \n-    private boolean tsConfigsEqual(JsonObject template,\n-            JsonObject projectTsConfig) {\n+    private boolean tsConfigsEqual(ObjectNode template,\n+            ObjectNode projectTsConfig) {\n         // exclude ES version from comparison, because it\n         // might be different for webpack and vite\n-        if (template.hasKey(COMPILER_OPTIONS)) {\n-            template.getObject(COMPILER_OPTIONS).remove(ES_TARGET_VERSION);\n+        if (template.has(COMPILER_OPTIONS)) {\n+            ((ObjectNode) template.get(COMPILER_OPTIONS))\n+                    .remove(ES_TARGET_VERSION);\n         }\n-        if (projectTsConfig.hasKey(COMPILER_OPTIONS)) {\n-            projectTsConfig.getObject(COMPILER_OPTIONS)\n+        if (projectTsConfig.has(COMPILER_OPTIONS)) {\n+            ((ObjectNode) projectTsConfig.get(COMPILER_OPTIONS))\n                     .remove(ES_TARGET_VERSION);\n         }\n \n         // exclude tsconfig version, because it's already compared\n         template.remove(VERSION);\n         projectTsConfig.remove(VERSION);\n-        return removeWhiteSpaces(template.toJson())\n-                .equals(removeWhiteSpaces(projectTsConfig.toJson()));\n+        return removeWhiteSpaces(template.toString())\n+                .equals(removeWhiteSpaces(projectTsConfig.toString()));\n     }\n \n     private String removeWhiteSpaces(String content) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java\nindex 470918b8022..171e471b672 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPlugins.java\n@@ -20,14 +20,13 @@\n import java.io.UncheckedIOException;\n import java.nio.charset.StandardCharsets;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.frontend.FrontendPluginsUtil.PLUGIN_TARGET;\n@@ -77,7 +76,7 @@ private void generatePluginFiles(String pluginName) throws IOException {\n         File pluginTargetFolder = new File(targetFolder, pluginName);\n \n         final String pluginFolderName = PLUGIN_TARGET + \""/\"" + pluginName + \""/\"";\n-        final JsonObject packageJson = FrontendPluginsUtil\n+        final JsonNode packageJson = FrontendPluginsUtil\n                 .getJsonFile(pluginFolderName + PACKAGE_JSON);\n         if (packageJson == null) {\n             log().error(\n@@ -91,9 +90,9 @@ && new File(pluginTargetFolder, PACKAGE_JSON).exists()) {\n             String packageFile = FileUtils.readFileToString(\n                     new File(pluginTargetFolder, PACKAGE_JSON),\n                     StandardCharsets.UTF_8);\n-            final JsonObject targetJson = Json.parse(packageFile);\n-            if (targetJson.hasKey(\""update\"")\n-                    && !targetJson.getBoolean(\""update\"")) {\n+            final JsonNode targetJson = JacksonUtils.readTree(packageFile);\n+            if (targetJson.has(\""update\"")\n+                    && !targetJson.get(\""update\"").booleanValue()) {\n                 // This is used only while developing the plugins inside the\n                 // Flow project and the attribute is then added manually to\n                 // package.json\n@@ -105,9 +104,9 @@ && new File(pluginTargetFolder, PACKAGE_JSON).exists()) {\n         FileUtils.forceMkdir(pluginTargetFolder);\n \n         // copy only files named in package.json { files }\n-        final JsonArray files = packageJson.getArray(\""files\"");\n-        for (int i = 0; i < files.length(); i++) {\n-            final String file = files.getString(i);\n+        final JsonNode files = packageJson.get(\""files\"");\n+        for (int i = 0; i < files.size(); i++) {\n+            final String file = files.get(i).textValue();\n             copyIfNeeded(new File(pluginTargetFolder, file),\n                     pluginFolderName + file);\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskPrepareProdBundle.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskPrepareProdBundle.java\nindex fc0458fc403..2fe14559973 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskPrepareProdBundle.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskPrepareProdBundle.java\n@@ -23,14 +23,13 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Paths;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.ExecutionFailedException;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.impl.JsonUtil;\n import static com.vaadin.flow.server.Constants.APPLICATION_THEME_ROOT;\n import static com.vaadin.flow.shared.ApplicationConstants.VAADIN_STATIC_FILES_PATH;\n \n@@ -130,11 +129,10 @@ private void writePreCompiledMarker() throws ExecutionFailedException {\n         try {\n             File statsJsonFile = new File(options.getResourceOutputDirectory(),\n                     \""config/stats.json\"");\n-            JsonObject statsJsonContent = Json.parse(FileUtils\n+            ObjectNode statsJsonContent = JacksonUtils.readTree(FileUtils\n                     .readFileToString(statsJsonFile, StandardCharsets.UTF_8));\n             statsJsonContent.put(\""pre-compiled\"", true);\n-            FileUtils.write(statsJsonFile,\n-                    JsonUtil.stringify(statsJsonContent, 2) + \""\\n\"",\n+            FileUtils.write(statsJsonFile, statsJsonContent + \""\\n\"",\n                     StandardCharsets.UTF_8.name());\n         } catch (IOException e) {\n             throw new ExecutionFailedException(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\nindex 97b1f81f5f0..6e18af325be 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\n@@ -29,6 +29,8 @@\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n \n@@ -37,8 +39,6 @@\n import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.shared.util.SharedUtil;\n \n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.frontend.FrontendUtils.commandToString;\n import static com.vaadin.flow.server.frontend.NodeUpdater.HASH_KEY;\n import static com.vaadin.flow.server.frontend.NodeUpdater.PROJECT_FOLDER;\n@@ -143,13 +143,13 @@ public void execute() throws ExecutionFailedException {\n      */\n     private void updateLocalHash() {\n         try {\n-            final JsonObject vaadin = packageUpdater.getPackageJson()\n-                    .getObject(VAADIN_DEP_KEY);\n+            final JsonNode vaadin = packageUpdater.getPackageJson()\n+                    .get(VAADIN_DEP_KEY);\n             if (vaadin == null) {\n                 packageUpdater.log().warn(\""No vaadin object in package.json\"");\n                 return;\n             }\n-            final String hash = vaadin.getString(HASH_KEY);\n+            final String hash = vaadin.get(HASH_KEY).textValue();\n \n             final Map<String, String> updates = new HashMap<>();\n             updates.put(HASH_KEY, hash);\n@@ -182,20 +182,20 @@ private boolean shouldRunNpmInstall() {\n \n     boolean isVaadinHashOrProjectFolderUpdated() {\n         try {\n-            JsonObject nodeModulesVaadinJson = packageUpdater\n+            JsonNode nodeModulesVaadinJson = packageUpdater\n                     .getVaadinJsonContents();\n-            if (nodeModulesVaadinJson.hasKey(HASH_KEY)) {\n-                final JsonObject packageJson = packageUpdater.getPackageJson();\n-                if (!nodeModulesVaadinJson.getString(HASH_KEY)\n-                        .equals(packageJson.getObject(VAADIN_DEP_KEY)\n-                                .getString(HASH_KEY))) {\n+            if (nodeModulesVaadinJson.has(HASH_KEY)) {\n+                final JsonNode packageJson = packageUpdater.getPackageJson();\n+                if (!nodeModulesVaadinJson.get(HASH_KEY).textValue()\n+                        .equals(packageJson.get(VAADIN_DEP_KEY).get(HASH_KEY)\n+                                .textValue())) {\n                     return true;\n                 }\n \n-                if (nodeModulesVaadinJson.hasKey(PROJECT_FOLDER)\n+                if (nodeModulesVaadinJson.has(PROJECT_FOLDER)\n                         && !options.getNpmFolder().getAbsolutePath()\n                                 .equals(nodeModulesVaadinJson\n-                                        .getString(PROJECT_FOLDER))) {\n+                                        .get(PROJECT_FOLDER).textValue())) {\n                     return true;\n                 }\n \n@@ -371,7 +371,7 @@ private void runNpmInstall() throws ExecutionFailedException {\n             File packageFolder = packageJsonFile.getParentFile();\n \n             try {\n-                JsonObject packageJson = TaskGeneratePackageJson\n+                JsonNode packageJson = TaskGeneratePackageJson\n                         .getJsonFileContent(packageJsonFile);\n                 if (!containsPostinstallScript(packageJson)) {\n                     logger.debug(\n@@ -448,9 +448,9 @@ private File getPackageJsonForModule(String module) {\n \n     }\n \n-    private boolean containsPostinstallScript(JsonObject packageJson) {\n-        return packageJson != null && packageJson.hasKey(\""scripts\"")\n-                && packageJson.getObject(\""scripts\"").hasKey(\""postinstall\"");\n+    private boolean containsPostinstallScript(JsonNode packageJson) {\n+        return packageJson != null && packageJson.has(\""scripts\"")\n+                && packageJson.get(\""scripts\"").has(\""postinstall\"");\n     }\n \n     private Process runNpmCommand(List<String> command, File workingDirectory)\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java\nindex ba438f8e018..3ae79948eb6 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskUpdatePackages.java\n@@ -31,21 +31,20 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.dependency.NpmPackage;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.internal.StringUtil;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.Platform;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n-\n /**\n  * Updates <code>package.json</code> by visiting {@link NpmPackage} annotations\n  * found in the classpath. It also visits classes annotated with\n@@ -85,7 +84,7 @@ public void execute() {\n                     .getPackages();\n             Map<String, String> scannedApplicationDevDependencies = frontDeps\n                     .getDevPackages();\n-            JsonObject packageJson = getPackageJson();\n+            ObjectNode packageJson = getPackageJson();\n             modified = updatePackageJsonDependencies(packageJson,\n                     scannedApplicationDependencies,\n                     scannedApplicationDevDependencies);\n@@ -93,8 +92,8 @@ public void execute() {\n             boolean npmVersionLockingUpdated = lockVersionForNpm(packageJson);\n \n             if (modified || npmVersionLockingUpdated) {\n-                if (!packageJson.hasKey(\""type\"")\n-                        || !packageJson.getString(\""type\"").equals(\""module\"")) {\n+                if (!packageJson.has(\""type\"") || !packageJson.get(\""type\"")\n+                        .textValue().equals(\""module\"")) {\n                     packageJson.put(\""type\"", \""module\"");\n                     log().info(\n                             \""\""\""\n@@ -110,25 +109,25 @@ public void execute() {\n         }\n     }\n \n-    boolean lockVersionForNpm(JsonObject packageJson) throws IOException {\n+    boolean lockVersionForNpm(ObjectNode packageJson) throws IOException {\n         boolean versionLockingUpdated = false;\n \n-        JsonObject overridesSection = getOverridesSection(packageJson);\n-        final JsonObject dependencies = packageJson.getObject(DEPENDENCIES);\n-        for (String dependency : versionsJson.keys()) {\n-            if (!overridesSection.hasKey(dependency)\n+        ObjectNode overridesSection = getOverridesSection(packageJson);\n+        final JsonNode dependencies = packageJson.get(DEPENDENCIES);\n+        for (String dependency : JacksonUtils.getKeys(versionsJson)) {\n+            if (!overridesSection.has(dependency)\n                     && shouldLockDependencyVersion(dependency, dependencies,\n                             versionsJson)) {\n                 overridesSection.put(dependency, \""$\"" + dependency);\n                 versionLockingUpdated = true;\n             }\n         }\n-        final JsonObject devDependencies = packageJson\n-                .getObject(DEV_DEPENDENCIES);\n-        for (String dependency : overridesSection.keys()) {\n-            if (!dependencies.hasKey(dependency)\n-                    && !devDependencies.hasKey(dependency)\n-                    && overridesSection.getString(dependency).startsWith(\""$\"")) {\n+        final ObjectNode devDependencies = (ObjectNode) packageJson\n+                .get(DEV_DEPENDENCIES);\n+        for (String dependency : JacksonUtils.getKeys(overridesSection)) {\n+            if (!dependencies.has(dependency)\n+                    && !devDependencies.has(dependency) && overridesSection\n+                            .get(dependency).textValue().startsWith(\""$\"")) {\n                 overridesSection.remove(dependency);\n                 versionLockingUpdated = true;\n             }\n@@ -138,16 +137,18 @@ && shouldLockDependencyVersion(dependency, dependencies,\n     }\n \n     private boolean shouldLockDependencyVersion(String dependency,\n-            JsonObject projectDependencies, JsonObject versionsJson) {\n-        String platformDefinedVersion = versionsJson.getString(dependency);\n+            JsonNode projectDependencies, JsonNode versionsJson) {\n+        String platformDefinedVersion = versionsJson.get(dependency)\n+                .textValue();\n \n         if (isInternalPseudoDependency(platformDefinedVersion)) {\n             return false;\n         }\n \n-        if (projectDependencies.hasKey(dependency)) {\n+        if (projectDependencies.has(dependency)) {\n             try {\n-                new FrontendVersion(projectDependencies.getString(dependency));\n+                new FrontendVersion(\n+                        projectDependencies.get(dependency).textValue());\n             } catch (Exception e) {\n                 // Do not lock non-numeric versions, e.g. folder references\n                 return false;\n@@ -163,53 +164,53 @@ private boolean isInternalPseudoDependency(String dependencyVersion) {\n                 .startsWith(\""./\"" + options.getBuildDirectoryName());\n     }\n \n-    private JsonObject getOverridesSection(JsonObject packageJson) {\n-        JsonObject overridesSection = packageJson.getObject(OVERRIDES);\n+    private ObjectNode getOverridesSection(ObjectNode packageJson) {\n+        ObjectNode overridesSection = (ObjectNode) packageJson.get(OVERRIDES);\n         if (overridesSection == null) {\n-            overridesSection = Json.createObject();\n-            packageJson.put(OVERRIDES, overridesSection);\n+            overridesSection = JacksonUtils.createObjectNode();\n+            packageJson.set(OVERRIDES, overridesSection);\n         }\n         return overridesSection;\n     }\n \n     @Override\n-    String writePackageFile(JsonObject json) throws IOException {\n+    String writePackageFile(JsonNode json) throws IOException {\n         sortObject(json, DEPENDENCIES);\n         sortObject(json, DEV_DEPENDENCIES);\n         sortObject(json, VAADIN_DEP_KEY);\n         return super.writePackageFile(json);\n     }\n \n-    private void sortObject(JsonObject json, String key) {\n-        if (!json.hasKey(key)) {\n+    private void sortObject(JsonNode json, String key) {\n+        if (!json.has(key)) {\n             return;\n         }\n-        JsonObject object = json.get(key);\n-        JsonObject ordered = orderKeys(object);\n-        Stream.of(object.keys()).forEach(object::remove);\n+        ObjectNode object = (ObjectNode) json.get(key);\n+        ObjectNode ordered = orderKeys(object);\n+        JacksonUtils.getKeys(object).forEach(object::remove);\n         // add ordered keys back\n-        Stream.of(ordered.keys()).forEach(prop -> {\n-            JsonValue value = ordered.get(prop);\n-            object.put(prop, value);\n+        JacksonUtils.getKeys(ordered).forEach(prop -> {\n+            JsonNode value = ordered.get(prop);\n+            object.set(prop, value);\n         });\n     }\n \n-    private JsonObject orderKeys(JsonObject object) {\n-        String[] keys = object.keys();\n+    private ObjectNode orderKeys(JsonNode object) {\n+        String[] keys = JacksonUtils.getKeys(object).toArray(String[]::new);\n         Arrays.sort(keys);\n-        JsonObject result = Json.createObject();\n+        ObjectNode result = JacksonUtils.createObjectNode();\n         for (String key : keys) {\n-            JsonValue value = object.get(key);\n-            if (value instanceof JsonObject) {\n-                value = orderKeys((JsonObject) value);\n+            JsonNode value = object.get(key);\n+            if (value instanceof ObjectNode) {\n+                value = orderKeys(value);\n             }\n-            result.put(key, value);\n+            result.set(key, value);\n         }\n         return result;\n     }\n \n     @SuppressWarnings(\""squid:S134\"")\n-    private boolean updatePackageJsonDependencies(JsonObject packageJson,\n+    private boolean updatePackageJsonDependencies(ObjectNode packageJson,\n             Map<String, String> applicationDependencies,\n             Map<String, String> applicationDevDependencies) throws IOException {\n         int added = 0;\n@@ -239,8 +240,8 @@ private boolean updatePackageJsonDependencies(JsonObject packageJson,\n          * #10572 lock all platform internal versions\n          */\n         List<String> pinnedPlatformDependencies = new ArrayList<>();\n-        final JsonObject platformPinnedDependencies = getPlatformPinnedDependencies();\n-        for (String key : platformPinnedDependencies.keys()) {\n+        final ObjectNode platformPinnedDependencies = getPlatformPinnedDependencies();\n+        for (String key : JacksonUtils.getKeys(platformPinnedDependencies)) {\n             // need to double check that not overriding a scanned\n             // dependency since add-ons should be able to downgrade\n             // version through exclusion\n@@ -293,27 +294,28 @@ && pinPlatformDependency(packageJson,\n             cleanUp();\n         }\n \n-        String oldHash = packageJson.getObject(VAADIN_DEP_KEY)\n-                .getString(HASH_KEY);\n+        String oldHash = packageJson.get(VAADIN_DEP_KEY).get(HASH_KEY)\n+                .textValue();\n         String newHash = generatePackageJsonHash(packageJson);\n         // update packageJson hash value, if no changes it will not be written\n-        packageJson.getObject(VAADIN_DEP_KEY).put(HASH_KEY, newHash);\n+        ((ObjectNode) packageJson.get(VAADIN_DEP_KEY)).put(HASH_KEY, newHash);\n \n         return added > 0 || removed > 0 || removedDev > 0\n                 || !oldHash.equals(newHash);\n     }\n \n     private int cleanDependencies(List<String> dependencyCollection,\n-            JsonObject packageJson, String dependencyKey) {\n+            JsonNode packageJson, String dependencyKey) {\n         int removed = 0;\n \n-        JsonObject dependencyObject = packageJson.getObject(dependencyKey);\n-        JsonObject vaadinDependencyObject = packageJson\n-                .getObject(VAADIN_DEP_KEY).getObject(dependencyKey);\n+        ObjectNode dependencyObject = (ObjectNode) packageJson\n+                .get(dependencyKey);\n+        ObjectNode vaadinDependencyObject = (ObjectNode) packageJson\n+                .get(VAADIN_DEP_KEY).get(dependencyKey);\n         if (dependencyObject != null) {\n-            for (String key : dependencyObject.keys()) {\n+            for (String key : JacksonUtils.getKeys(dependencyObject)) {\n                 if (!dependencyCollection.contains(key)\n-                        && vaadinDependencyObject.hasKey(key)) {\n+                        && vaadinDependencyObject.has(key)) {\n                     dependencyObject.remove(key);\n                     vaadinDependencyObject.remove(key);\n                     log().debug(\""Removed \\\""{}\\\"".\"", key);\n@@ -324,8 +326,8 @@ private int cleanDependencies(List<String> dependencyCollection,\n         return removed;\n     }\n \n-    protected static boolean pinPlatformDependency(JsonObject packageJson,\n-            JsonObject platformPinnedVersions, String pkg) {\n+    protected static boolean pinPlatformDependency(JsonNode packageJson,\n+            JsonNode platformPinnedVersions, String pkg) {\n         final FrontendVersion platformPinnedVersion = FrontendUtils\n                 .getPackageVersionFromJson(platformPinnedVersions, pkg,\n                         \""vaadin_dependencies.json\"");\n@@ -333,27 +335,28 @@ protected static boolean pinPlatformDependency(JsonObject packageJson,\n             return false;\n         }\n \n-        final JsonObject vaadinDeps = packageJson.getObject(VAADIN_DEP_KEY)\n-                .getObject(DEPENDENCIES);\n-        final JsonObject packageJsonDeps = packageJson.getObject(DEPENDENCIES);\n+        final ObjectNode vaadinDeps = (ObjectNode) packageJson\n+                .get(VAADIN_DEP_KEY).get(DEPENDENCIES);\n+        final ObjectNode packageJsonDeps = (ObjectNode) packageJson\n+                .get(DEPENDENCIES);\n         // packages exist at this point\n         assert vaadinDeps != null : \""vaadin{ dependencies { } } should exist\"";\n         assert packageJsonDeps != null : \""dependencies { } should exist\"";\n \n         FrontendVersion packageJsonVersion = null, vaadinDepsVersion = null;\n         try {\n-            if (packageJsonDeps.hasKey(pkg)) {\n+            if (packageJsonDeps.has(pkg)) {\n                 packageJsonVersion = new FrontendVersion(\n-                        packageJsonDeps.getString(pkg));\n+                        packageJsonDeps.get(pkg).textValue());\n             }\n         } catch (NumberFormatException e) {\n             // Overridden to a file link in package.json, do not change\n             return false;\n         }\n         try {\n-            if (vaadinDeps.hasKey(pkg)) {\n+            if (vaadinDeps.has(pkg)) {\n                 vaadinDepsVersion = new FrontendVersion(\n-                        vaadinDeps.getString(pkg));\n+                        vaadinDeps.get(pkg).textValue());\n             }\n         } catch (NumberFormatException e) {\n             // Vaadin defines a non-numeric version. Not sure what the case\n@@ -392,13 +395,13 @@ private boolean isPlatformVersionUpdated() throws IOException {\n         Optional<String> platformVersion = getVaadinVersion(finder);\n         if (platformVersion.isPresent()\n                 && options.getNodeModulesFolder().exists()) {\n-            JsonObject vaadinJsonContents = getVaadinJsonContents();\n+            JsonNode vaadinJsonContents = getVaadinJsonContents();\n             // If no record of previous version, version is considered updated\n-            if (!vaadinJsonContents.hasKey(NodeUpdater.VAADIN_VERSION)) {\n+            if (!vaadinJsonContents.has(NodeUpdater.VAADIN_VERSION)) {\n                 return true;\n             }\n-            return !Objects.equals(\n-                    vaadinJsonContents.getString(NodeUpdater.VAADIN_VERSION),\n+            return !Objects.equals(vaadinJsonContents\n+                    .get(NodeUpdater.VAADIN_VERSION).textValue(),\n                     platformVersion.get());\n         }\n         return false;\n@@ -413,10 +416,10 @@ static Optional<String> getVaadinVersion(ClassFinder finder) {\n         }\n         try (InputStream vaadinVersionsStream = coreVersionsResource\n                 .openStream()) {\n-            final JsonObject versionsJson = Json.parse(IOUtils\n+            final JsonNode versionsJson = JacksonUtils.readTree(IOUtils\n                     .toString(vaadinVersionsStream, StandardCharsets.UTF_8));\n-            if (versionsJson.hasKey(\""platform\"")) {\n-                return Optional.of(versionsJson.getString(\""platform\""));\n+            if (versionsJson.has(\""platform\"")) {\n+                return Optional.of(versionsJson.get(\""platform\"").textValue());\n             }\n         } catch (Exception e) {\n             LoggerFactory.getLogger(Platform.class)\n@@ -431,33 +434,33 @@ static Optional<String> getVaadinVersion(ClassFinder finder) {\n      * present.\n      *\n      * @param packageJson\n-     *            JsonObject of current package.json contents\n+     *            JsonNode of current package.json contents\n      * @return amount of removed properties\n      * @throws IOException\n      *             thrown if removal of package-lock.json fails\n      */\n-    private int removeLegacyProperties(JsonObject packageJson)\n+    private int removeLegacyProperties(ObjectNode packageJson)\n             throws IOException {\n         int result = 0;\n         /*\n          * In modern Flow versions \""@vaadin/flow-deps\"" should not exist.\n          */\n-        if (packageJson.hasKey(DEPENDENCIES)) {\n-            JsonObject object = packageJson.getObject(DEPENDENCIES);\n-            if (object.hasKey(DEP_NAME_FLOW_DEPS)) {\n+        if (packageJson.has(DEPENDENCIES)) {\n+            ObjectNode object = (ObjectNode) packageJson.get(DEPENDENCIES);\n+            if (object.has(DEP_NAME_FLOW_DEPS)) {\n                 object.remove(DEP_NAME_FLOW_DEPS);\n                 log().debug(\""Removed \\\""{}\\\"" as it's not generated anymore.\"",\n                         DEP_NAME_FLOW_DEPS);\n                 result++;\n             }\n-            if (object.hasKey(DEP_NAME_FLOW_JARS)) {\n+            if (object.has(DEP_NAME_FLOW_JARS)) {\n                 object.remove(DEP_NAME_FLOW_JARS);\n                 log().debug(\""Removed \\\""{}\\\"" as it's not needed anymore.\"",\n                         DEP_NAME_FLOW_JARS);\n                 result++;\n             }\n         }\n-        if (packageJson.hasKey(VAADIN_APP_PACKAGE_HASH)) {\n+        if (packageJson.has(VAADIN_APP_PACKAGE_HASH)) {\n             packageJson.remove(VAADIN_APP_PACKAGE_HASH);\n             log().debug(\""Removed \\\""{}\\\"" as it's not used.\"",\n                     VAADIN_APP_PACKAGE_HASH);\n@@ -490,40 +493,38 @@ private void cleanUp() throws IOException {\n \n     /**\n      * Generate hash for package dependencies. This will consider both\n-     * 'dependencies' and 'devDependencies' of the packageJson format\n-     * JsonObject.\n+     * 'dependencies' and 'devDependencies' of the packageJson format JsonNode.\n      * <p>\n      * Dependencies will be sorted by key so that different runs for same\n      * dependencies in different order will not trigger npm install.\n      *\n      * @param packageJson\n-     *            JsonObject built in the same format as package.json\n+     *            JsonNode built in the same format as package.json\n      * @return has for dependencies and devDependencies\n      */\n-    static String generatePackageJsonHash(JsonObject packageJson) {\n+    static String generatePackageJsonHash(JsonNode packageJson) {\n         StringBuilder hashContent = new StringBuilder();\n-        if (packageJson.hasKey(DEPENDENCIES)) {\n-            JsonObject dependencies = packageJson.getObject(DEPENDENCIES);\n+        if (packageJson.has(DEPENDENCIES)) {\n+            JsonNode dependencies = packageJson.get(DEPENDENCIES);\n             hashContent.append(\""\\\""dependencies\\\"": {\"");\n-            String sortedDependencies = Arrays.stream(dependencies.keys())\n-                    .sorted(String::compareToIgnoreCase)\n+            String sortedDependencies = JacksonUtils.getKeys(dependencies)\n+                    .stream().sorted(String::compareToIgnoreCase)\n                     .map(key -> String.format(\""\\\""%s\\\"": \\\""%s\\\""\"", key,\n-                            dependencies.getString(key)))\n+                            dependencies.get(key).textValue()))\n                     .collect(Collectors.joining(\"",\\n  \""));\n             hashContent.append(sortedDependencies);\n             hashContent.append(\""}\"");\n         }\n-        if (packageJson.hasKey(DEV_DEPENDENCIES)) {\n-            if (hashContent.length() > 0) {\n+        if (packageJson.has(DEV_DEPENDENCIES)) {\n+            if (!hashContent.isEmpty()) {\n                 hashContent.append(\"",\\n\"");\n             }\n-            JsonObject devDependencies = packageJson\n-                    .getObject(DEV_DEPENDENCIES);\n+            JsonNode devDependencies = packageJson.get(DEV_DEPENDENCIES);\n             hashContent.append(\""\\\""devDependencies\\\"": {\"");\n-            String sortedDevDependencies = Arrays.stream(devDependencies.keys())\n-                    .sorted(String::compareToIgnoreCase)\n+            String sortedDevDependencies = JacksonUtils.getKeys(devDependencies)\n+                    .stream().sorted(String::compareToIgnoreCase)\n                     .map(key -> String.format(\""\\\""%s\\\"": \\\""%s\\\""\"", key,\n-                            devDependencies.getString(key)))\n+                            devDependencies.get(key).textValue()))\n                     .collect(Collectors.joining(\"",\\n  \""));\n             hashContent.append(sortedDevDependencies);\n             hashContent.append(\""}\"");\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeUtils.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeUtils.java\nindex 8360c6a087c..24929131bb4 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeUtils.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeUtils.java\n@@ -27,12 +27,15 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.flow.component.page.AppShellConfigurator;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.AbstractConfiguration;\n import com.vaadin.flow.server.AppShellRegistry;\n import com.vaadin.flow.server.Constants;\n@@ -40,8 +43,6 @@\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n import com.vaadin.flow.theme.Theme;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n import static com.vaadin.flow.server.Constants.VAADIN_WEBAPP_RESOURCES;\n import static com.vaadin.flow.shared.ApplicationConstants.VAADIN_STATIC_FILES_PATH;\n \n@@ -129,7 +130,7 @@ public static Optional<Theme> getThemeAnnotation(VaadinContext context) {\n         return Optional.ofNullable(shell.getAnnotation(Theme.class));\n     }\n \n-    public static Optional<JsonObject> getThemeJson(String themeName,\n+    public static Optional<JsonNode> getThemeJson(String themeName,\n             AbstractConfiguration config) {\n         String content = null;\n         try {\n@@ -157,7 +158,7 @@ public static Optional<JsonObject> getThemeJson(String themeName,\n                     \""Unable to read theme.json file of theme=\"" + themeName, e);\n         }\n \n-        return content != null ? Optional.of(Json.parse(content))\n+        return content != null ? Optional.of(JacksonUtils.readTree(content))\n                 : Optional.empty();\n     }\n \n@@ -185,7 +186,7 @@ public static URL getThemeResourceFromPrecompiledProductionBundle(\n         return resourceUrl;\n     }\n \n-    public static Optional<JsonObject> getThemeJson(String themeName,\n+    public static Optional<JsonNode> getThemeJson(String themeName,\n             File frontendFolder) {\n         File themeFolder = getThemeFolder(frontendFolder, themeName);\n         File themeJsonFile = new File(themeFolder, \""theme.json\"");\n@@ -195,7 +196,7 @@ public static Optional<JsonObject> getThemeJson(String themeName,\n             try {\n                 content = FileUtils.readFileToString(themeJsonFile,\n                         StandardCharsets.UTF_8);\n-                return Optional.of(Json.parse(content));\n+                return Optional.of(JacksonUtils.readTree(content));\n             } catch (IOException e) {\n                 getLogger().error(\n                         \""Unable to read theme json from \"" + themeJsonFile, e);\n@@ -205,10 +206,10 @@ public static Optional<JsonObject> getThemeJson(String themeName,\n \n     }\n \n-    public static Optional<String> getParentThemeName(JsonObject themeJson) {\n+    public static Optional<String> getParentThemeName(JsonNode themeJson) {\n         if (themeJson != null) {\n-            if (themeJson.hasKey(\""parent\"")) {\n-                String parentThemeName = themeJson.getString(\""parent\"");\n+            if (themeJson.has(\""parent\"")) {\n+                String parentThemeName = themeJson.get(\""parent\"").textValue();\n                 return Optional.of(parentThemeName);\n             }\n         }\n@@ -278,7 +279,7 @@ private static void findActiveThemes(String themeName, List<String> themes,\n             AbstractConfiguration config) {\n         themes.add(themeName);\n \n-        Optional<JsonObject> themeJson = getThemeJson(themeName, config);\n+        Optional<JsonNode> themeJson = getThemeJson(themeName, config);\n         if (themeJson.isPresent()) {\n             Optional<String> parentTheme = getParentThemeName(themeJson.get());\n             if (parentTheme.isPresent()) {\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeValidationUtil.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeValidationUtil.java\nindex 3828d8d4498..682de023b35 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeValidationUtil.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/ThemeValidationUtil.java\n@@ -5,6 +5,7 @@\n import java.io.UncheckedIOException;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Path;\n+import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -18,23 +19,22 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.vaadin.flow.internal.JsonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n+import com.vaadin.flow.internal.JacksonUtils;\n+import com.vaadin.flow.internal.JsonDecodingException;\n import com.vaadin.flow.server.Constants;\n-import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n import com.vaadin.flow.theme.ThemeDefinition;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonType;\n-import elemental.json.JsonValue;\n-\n /**\n  * Theme handling methods.\n  * <p>\n@@ -49,9 +49,9 @@ public class ThemeValidationUtil {\n     private static final String FRONTEND_HASHES_KEY = \""frontendHashes\"";\n \n     public static boolean themeConfigurationChanged(Options options,\n-            JsonObject statsJson,\n+            JsonNode statsJson,\n             FrontendDependenciesScanner frontendDependencies) {\n-        Map<String, JsonObject> themeJsonContents = new HashMap<>();\n+        Map<String, JsonNode> themeJsonContents = new HashMap<>();\n \n         if (options.getJarFiles() != null) {\n             options.getJarFiles().stream().filter(File::exists)\n@@ -63,12 +63,12 @@ public static boolean themeConfigurationChanged(Options options,\n         Optional<String> maybeThemeName = Optional\n                 .ofNullable(frontendDependencies.getThemeDefinition())\n                 .map(ThemeDefinition::getName).filter(name -> !name.isBlank());\n-        Optional<JsonObject> projectThemeJson = maybeThemeName\n+        Optional<JsonNode> projectThemeJson = maybeThemeName\n                 .flatMap(themeName -> ThemeUtils.getThemeJson(themeName,\n                         options.getFrontendDirectory()));\n         String projectThemeName = maybeThemeName.orElse(null);\n \n-        JsonObject statsThemeJson = statsJson.getObject(\""themeJsonContents\"");\n+        JsonNode statsThemeJson = statsJson.get(\""themeJsonContents\"");\n         if (statsThemeJson == null && (!themeJsonContents.isEmpty()\n                 || projectThemeJson.isPresent())) {\n             getLogger().info(\n@@ -78,13 +78,13 @@ public static boolean themeConfigurationChanged(Options options,\n \n         if (projectThemeJson.isPresent()) {\n             String key;\n-            if (statsThemeJson.hasKey(projectThemeName)) {\n+            if (statsThemeJson.has(projectThemeName)) {\n                 key = projectThemeName;\n             } else if (!options.isProductionMode()\n-                    && statsThemeJson.hasKey(Constants.DEV_BUNDLE_NAME)) {\n+                    && statsThemeJson.has(Constants.DEV_BUNDLE_NAME)) {\n                 key = Constants.DEV_BUNDLE_NAME;\n             } else if (options.isProductionMode()\n-                    && statsThemeJson.hasKey(Constants.PROD_BUNDLE_NAME)) {\n+                    && statsThemeJson.has(Constants.PROD_BUNDLE_NAME)) {\n                 key = Constants.PROD_BUNDLE_NAME;\n             } else {\n                 getLogger().info(\n@@ -97,17 +97,17 @@ public static boolean themeConfigurationChanged(Options options,\n                     projectThemeJson.get());\n         }\n \n-        for (Map.Entry<String, JsonObject> themeContent : themeJsonContents\n+        for (Map.Entry<String, JsonNode> themeContent : themeJsonContents\n                 .entrySet()) {\n             if (hasNewAssetsOrImports(statsThemeJson, themeContent)) {\n                 getLogger().info(\n                         \""Found new configuration for theme '{}' in 'theme.json'.\"",\n                         themeContent.getKey());\n                 return true;\n-            } else if (statsThemeJson.hasKey(themeContent.getKey())) {\n+            } else if (statsThemeJson.has(themeContent.getKey())) {\n                 List<String> missedKeys = new ArrayList<>();\n-                JsonObject content = Json\n-                        .parse(statsThemeJson.getString(themeContent.getKey()));\n+                JsonNode content = JacksonUtils.readTree(\n+                        statsThemeJson.get(themeContent.getKey()).textValue());\n                 if (!objectIncludesEntry(content, themeContent.getValue(),\n                         missedKeys)) {\n                     getLogger().info(\n@@ -137,7 +137,7 @@ public static boolean themeConfigurationChanged(Options options,\n      *         {@literal false}.\n      */\n     public static boolean themeShadowDOMStylesheetsChanged(Options options,\n-            JsonObject statsJson,\n+            JsonNode statsJson,\n             FrontendDependenciesScanner frontendDependencies) {\n         File frontendDirectory = options.getFrontendDirectory();\n         // Scan the theme hierarchy and collect all <theme>/components folders\n@@ -145,7 +145,7 @@ public static boolean themeShadowDOMStylesheetsChanged(Options options,\n                 .ofNullable(frontendDependencies.getThemeDefinition())\n                 .map(ThemeDefinition::getName).filter(name -> !name.isBlank())\n                 .map(themeName -> {\n-                    Map<String, JsonObject> themeJsonContents = new HashMap<>();\n+                    Map<String, JsonNode> themeJsonContents = new HashMap<>();\n                     ThemeUtils.getThemeJson(themeName, frontendDirectory)\n                             .ifPresent(\n                                     themeJson -> collectThemeJsonContentsInFrontend(\n@@ -160,16 +160,16 @@ public static boolean themeShadowDOMStylesheetsChanged(Options options,\n                 }).orElse(null);\n         if (themeComponentsDirs != null) {\n             Map<String, String> hashesWithNoComponentCssMatches = new HashMap<>();\n-            if (statsJson.hasKey(FRONTEND_HASHES_KEY)) {\n-                JsonObject json = statsJson.getObject(FRONTEND_HASHES_KEY);\n-                Stream.of(json.keys())\n+            if (statsJson.has(FRONTEND_HASHES_KEY)) {\n+                JsonNode json = statsJson.get(FRONTEND_HASHES_KEY);\n+                JacksonUtils.getKeys(json).stream()\n                         // Only considers bundled resources located in\n                         // '[generated/jar-resources/]themes/<themeName>/components'\n                         .filter(path -> themeComponentsDirs.stream()\n                                 .anyMatch(dir -> frontendDirectory.toPath()\n                                         .resolve(path).startsWith(dir)))\n                         .forEach(key -> hashesWithNoComponentCssMatches.put(key,\n-                                json.getString(key)));\n+                                json.get(key).textValue()));\n             }\n \n             List<String> themeComponentsCssFiles = new ArrayList<>();\n@@ -201,26 +201,26 @@ public static boolean themeShadowDOMStylesheetsChanged(Options options,\n         return false;\n     }\n \n-    private static boolean hasNewAssetsOrImports(JsonObject contentsInStats,\n-            Map.Entry<String, JsonObject> themeContent) {\n-        JsonObject json = themeContent.getValue();\n-        boolean moreThanOneKey = json.keys().length > 1;\n-        boolean noParentEntry = json.keys().length == 1\n-                && !json.hasKey(\""parent\"");\n+    private static boolean hasNewAssetsOrImports(JsonNode contentsInStats,\n+            Map.Entry<String, JsonNode> themeContent) {\n+        JsonNode json = themeContent.getValue();\n+        int keys = JacksonUtils.getKeys(json).size();\n+        boolean moreThanOneKey = keys > 1;\n+        boolean noParentEntry = keys == 1 && !json.has(\""parent\"");\n         // do not re-bundle immediately if theme.json is empty or has only\n         // parent reference\n-        return !contentsInStats.hasKey(themeContent.getKey())\n+        return !contentsInStats.has(themeContent.getKey())\n                 && (moreThanOneKey || noParentEntry);\n     }\n \n     private static void collectThemeJsonContentsInFrontend(Options options,\n-            Map<String, JsonObject> themeJsonContents, String themeName,\n-            JsonObject themeJson) {\n+            Map<String, JsonNode> themeJsonContents, String themeName,\n+            JsonNode themeJson) {\n         Optional<String> parentThemeInFrontend = ThemeUtils\n                 .getParentThemeName(themeJson);\n         if (parentThemeInFrontend.isPresent()) {\n             String parentThemeName = parentThemeInFrontend.get();\n-            Optional<JsonObject> parentThemeJson = ThemeUtils.getThemeJson(\n+            Optional<JsonNode> parentThemeJson = ThemeUtils.getThemeJson(\n                     parentThemeName, options.getFrontendDirectory());\n             parentThemeJson.ifPresent(\n                     jsonObject -> collectThemeJsonContentsInFrontend(options,\n@@ -230,33 +230,30 @@ private static void collectThemeJsonContentsInFrontend(Options options,\n         themeJsonContents.put(themeName, themeJson);\n     }\n \n-    static boolean objectIncludesEntry(JsonValue jsonFromBundle,\n-            JsonValue projectJson, Collection<String> missedKeys) {\n-        JsonType bundleJsonType = jsonFromBundle.getType();\n-        JsonType projectJsonObjectTypeType = projectJson.getType();\n-        assert bundleJsonType.equals(projectJsonObjectTypeType);\n+    static boolean objectIncludesEntry(JsonNode jsonFromBundle,\n+            JsonNode projectJson, Collection<String> missedKeys) {\n+        JsonNodeType bundleJsonNodeType = jsonFromBundle.getNodeType();\n+        JsonNodeType projectJsonNodeTypeType = projectJson.getNodeType();\n+        assert bundleJsonNodeType.equals(projectJsonNodeTypeType);\n \n-        if (bundleJsonType == JsonType.NULL) {\n+        if (bundleJsonNodeType == JsonNodeType.NULL) {\n             return true;\n-        } else if (bundleJsonType == JsonType.BOOLEAN) {\n-            return JsonUtils.booleanEqual(jsonFromBundle, projectJson);\n-        } else if (bundleJsonType == JsonType.NUMBER) {\n-            return JsonUtils.numbersEqual(jsonFromBundle, projectJson);\n-        } else if (bundleJsonType == JsonType.STRING) {\n-            return JsonUtils.stringEqual(jsonFromBundle, projectJson);\n-        } else if (bundleJsonType == JsonType.ARRAY) {\n-            JsonArray jsonArrayFromBundle = (JsonArray) jsonFromBundle;\n-            JsonArray jsonArrayFromProject = (JsonArray) projectJson;\n+        } else if (bundleJsonNodeType == JsonNodeType.BOOLEAN) {\n+            return JacksonUtils.booleanEqual(jsonFromBundle, projectJson);\n+        } else if (bundleJsonNodeType == JsonNodeType.NUMBER) {\n+            return JacksonUtils.numbersEqual(jsonFromBundle, projectJson);\n+        } else if (bundleJsonNodeType == JsonNodeType.STRING) {\n+            return JacksonUtils.stringEqual(jsonFromBundle, projectJson);\n+        } else if (bundleJsonNodeType == JsonNodeType.ARRAY) {\n+            ArrayNode jsonArrayFromBundle = (ArrayNode) jsonFromBundle;\n+            ArrayNode jsonArrayFromProject = (ArrayNode) projectJson;\n             return compareArrays(missedKeys, jsonArrayFromBundle,\n                     jsonArrayFromProject);\n-        } else if (bundleJsonType == JsonType.OBJECT) {\n-            JsonObject jsonObjectFromBundle = (JsonObject) jsonFromBundle;\n-            JsonObject projectJsonObject = (JsonObject) projectJson;\n-            return compareObjects(missedKeys, jsonObjectFromBundle,\n-                    projectJsonObject);\n+        } else if (bundleJsonNodeType == JsonNodeType.OBJECT) {\n+            return compareObjects(missedKeys, jsonFromBundle, projectJson);\n         } else {\n             throw new IllegalArgumentException(\n-                    \""Unsupported JsonType: \"" + bundleJsonType);\n+                    \""Unsupported JsonNodeType: \"" + bundleJsonNodeType);\n         }\n     }\n \n@@ -267,7 +264,7 @@ private static void logMissedEntries(List<String> missedKeys) {\n     }\n \n     private static void getPackagedThemeJsonContents(File jarFileToLookup,\n-            Map<String, JsonObject> packagedThemeHashes) {\n+            Map<String, JsonNode> packagedThemeHashes) {\n         JarContentsManager jarContentsManager = new JarContentsManager();\n         if (jarContentsManager.containsPath(jarFileToLookup,\n                 Constants.RESOURCES_THEME_JAR_DEFAULT)) {\n@@ -286,29 +283,30 @@ private static void getPackagedThemeJsonContents(File jarFileToLookup,\n                             \""Packaged theme folders structure is incorrect, should have META-INF/resources/themes/[theme-name]/\"");\n                 }\n                 String themeName = matcher.group(1);\n-                JsonObject jsonContent = Json.parse(content);\n+                JsonNode jsonContent = null;\n+                jsonContent = JacksonUtils.readTree(content);\n                 packagedThemeHashes.put(themeName, jsonContent);\n             }\n         }\n     }\n \n     private static boolean compareObjects(Collection<String> missedKeys,\n-            JsonObject jsonObjectFromBundle, JsonObject projectJsonObject) {\n+            JsonNode jsonObjectFromBundle, JsonNode projectJsonNode) {\n         boolean allEntriesFound = true;\n \n-        for (String projectEntryKey : projectJsonObject.keys()) {\n-            JsonValue projectEntry = projectJsonObject.get(projectEntryKey);\n+        for (String projectEntryKey : JacksonUtils.getKeys(projectJsonNode)) {\n+            JsonNode projectEntry = projectJsonNode.get(projectEntryKey);\n             // ignore parent theme, because having a parent theme doesn't\n             // need a new bundle per se\n-            if (projectEntry.getType() == JsonType.STRING\n+            if (projectEntry.getNodeType() == JsonNodeType.STRING\n                     && \""parent\"".equals(projectEntryKey)) {\n                 continue;\n             }\n             boolean entryFound = false;\n-            for (String bundleEntryKey : jsonObjectFromBundle.keys()) {\n-                JsonValue bundleEntry = jsonObjectFromBundle\n-                        .get(bundleEntryKey);\n-                if (bundleEntry.getType() == projectEntry.getType()\n+            for (String bundleEntryKey : JacksonUtils\n+                    .getKeys(jsonObjectFromBundle)) {\n+                JsonNode bundleEntry = jsonObjectFromBundle.get(bundleEntryKey);\n+                if (bundleEntry.getNodeType() == projectEntry.getNodeType()\n                         && objectIncludesEntry(bundleEntry, projectEntry,\n                                 missedKeys)) {\n                     entryFound = true;\n@@ -324,7 +322,7 @@ && objectIncludesEntry(bundleEntry, projectEntry,\n     }\n \n     private static boolean compareArrays(Collection<String> missedKeys,\n-            JsonArray jsonArrayFromBundle, JsonArray jsonArrayFromProject) {\n+            ArrayNode jsonArrayFromBundle, ArrayNode jsonArrayFromProject) {\n \n         boolean allEntriesFound = checkMissedKeys(missedKeys,\n                 jsonArrayFromBundle, jsonArrayFromProject);\n@@ -336,7 +334,7 @@ private static boolean compareArrays(Collection<String> missedKeys,\n         // jsonArrayFromBundle = [1,2,3]\n         // jsonArrayFromProject = [1,2]\n         // and the check would pass\n-        if (jsonArrayFromBundle.length() != jsonArrayFromProject.length()) {\n+        if (jsonArrayFromBundle.size() != jsonArrayFromProject.size()) {\n             allEntriesFound = allEntriesFound && checkMissedKeys(missedKeys,\n                     jsonArrayFromProject, jsonArrayFromBundle);\n         }\n@@ -345,20 +343,20 @@ private static boolean compareArrays(Collection<String> missedKeys,\n     }\n \n     private static boolean checkMissedKeys(Collection<String> missedKeys,\n-            JsonArray arrayIterating, JsonArray arrayComparing) {\n+            ArrayNode arrayIterating, ArrayNode arrayComparing) {\n         boolean allEntriesFound = true;\n \n         for (int arrayComparingIndex = 0; arrayComparingIndex < arrayComparing\n-                .length(); arrayComparingIndex++) {\n-            JsonValue arrayComparingEntry = arrayComparing\n+                .size(); arrayComparingIndex++) {\n+            JsonNode arrayComparingEntry = arrayComparing\n                     .get(arrayComparingIndex);\n             boolean entryFound = false;\n             for (int arrayIteratingIndex = 0; arrayIteratingIndex < arrayIterating\n-                    .length(); arrayIteratingIndex++) {\n-                JsonValue arrayIteratingEntry = arrayIterating\n+                    .size(); arrayIteratingIndex++) {\n+                JsonNode arrayIteratingEntry = arrayIterating\n                         .get(arrayIteratingIndex);\n-                if (arrayIteratingEntry.getType() == arrayComparingEntry\n-                        .getType()\n+                if (arrayIteratingEntry.getNodeType() == arrayComparingEntry\n+                        .getNodeType()\n                         && objectIncludesEntry(arrayIteratingEntry,\n                                 arrayComparingEntry, missedKeys)) {\n                     entryFound = true;\n@@ -366,7 +364,7 @@ && objectIncludesEntry(arrayIteratingEntry,\n                 }\n             }\n             if (!entryFound) {\n-                missedKeys.add(arrayComparingEntry.toJson());\n+                missedKeys.add(arrayComparingEntry.toString());\n             }\n             allEntriesFound = allEntriesFound && entryFound;\n         }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\nindex 57d3d0bed05..acbb5c7d29e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonConverter.java\n@@ -20,13 +20,13 @@\n import java.util.Set;\n import java.util.stream.IntStream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-import elemental.json.JsonValue;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n /**\n  * Converts platform versions file to internal format which doesn't contain\n@@ -72,7 +72,7 @@ class VersionsJsonConverter {\n     public static final String MODE_ALL = \""all\""; // same as empty string\n     private static final Object VAADIN_ROUTER = \""@vaadin/router\"";\n \n-    private final JsonObject convertedObject;\n+    private final ObjectNode convertedObject;\n \n     private boolean reactEnabled;\n \n@@ -84,12 +84,12 @@ private static Logger getLogger() {\n         return LoggerFactory.getLogger(VersionsJsonConverter.class);\n     }\n \n-    VersionsJsonConverter(JsonObject platformVersions, boolean reactEnabled,\n+    VersionsJsonConverter(JsonNode platformVersions, boolean reactEnabled,\n             boolean excludeWebComponents) {\n         this.reactEnabled = reactEnabled;\n         this.excludeWebComponents = excludeWebComponents;\n         exclusions = new HashSet<>();\n-        convertedObject = Json.createObject();\n+        convertedObject = JacksonUtils.createObjectNode();\n \n         collectDependencies(platformVersions);\n         excludeDependencies();\n@@ -101,7 +101,7 @@ private static Logger getLogger() {\n      *\n      * @return flatten the platform versions Json\n      */\n-    JsonObject getConvertedJson() {\n+    ObjectNode getConvertedJson() {\n         return convertedObject;\n     }\n \n@@ -114,23 +114,22 @@ Set<String> getExclusions() {\n         return exclusions;\n     }\n \n-    private void collectDependencies(JsonObject obj) {\n-        for (String key : obj.keys()) {\n-            JsonValue value = obj.get(key);\n-            if (!(value instanceof JsonObject)) {\n+    private void collectDependencies(JsonNode obj) {\n+        for (String key : JacksonUtils.getKeys(obj)) {\n+            JsonNode value = obj.get(key);\n+            if (!(value instanceof ObjectNode)) {\n                 continue;\n             }\n-            JsonObject json = (JsonObject) value;\n-            if (json.hasKey(NPM_NAME)) {\n-                addDependency(json);\n+            if (value.has(NPM_NAME)) {\n+                addDependency(value);\n             } else {\n-                collectDependencies(json);\n+                collectDependencies(value);\n             }\n         }\n     }\n \n     private void excludeDependencies() {\n-        for (String key : convertedObject.keys()) {\n+        for (String key : JacksonUtils.getKeys(convertedObject)) {\n             if (exclusions.contains(key)) {\n                 convertedObject.remove(key);\n             }\n@@ -149,10 +148,10 @@ private boolean isIncludedByMode(String mode) {\n         }\n     }\n \n-    private void addDependency(JsonObject obj) {\n-        assert obj.hasKey(NPM_NAME);\n-        String npmName = obj.getString(NPM_NAME);\n-        String mode = obj.hasKey(MODE) ? obj.getString(MODE) : null;\n+    private void addDependency(JsonNode obj) {\n+        assert obj.has(NPM_NAME);\n+        String npmName = obj.get(NPM_NAME).textValue();\n+        String mode = obj.has(MODE) ? obj.get(MODE).textValue() : null;\n         String version;\n         // #11025\n         if (Objects.equals(npmName, VAADIN_CORE_NPM_PACKAGE)) {\n@@ -177,10 +176,10 @@ private void addDependency(JsonObject obj) {\n             }\n             return;\n         }\n-        if (obj.hasKey(NPM_VERSION)) {\n-            version = obj.getString(NPM_VERSION);\n-        } else if (obj.hasKey(JS_VERSION)) {\n-            version = obj.getString(JS_VERSION);\n+        if (obj.has(NPM_VERSION)) {\n+            version = obj.get(NPM_VERSION).textValue();\n+        } else if (obj.has(JS_VERSION)) {\n+            version = obj.get(JS_VERSION).textValue();\n         } else {\n             throw new IllegalStateException(\""Vaadin code versions file \""\n                     + \""contains unexpected data: dependency '\"" + npmName\n@@ -194,12 +193,12 @@ private void addDependency(JsonObject obj) {\n                 npmName, version, (mode != null ? \"" for mode \"" + mode : \""\""));\n     }\n \n-    private void collectExclusions(JsonObject obj) {\n-        if (obj.hasKey(EXCLUSIONS)) {\n-            JsonArray array = obj.getArray(EXCLUSIONS);\n+    private void collectExclusions(JsonNode obj) {\n+        if (obj.has(EXCLUSIONS)) {\n+            ArrayNode array = (ArrayNode) obj.get(EXCLUSIONS);\n             if (array != null) {\n-                IntStream.range(0, array.length())\n-                        .forEach(i -> exclusions.add(array.getString(i)));\n+                IntStream.range(0, array.size())\n+                        .forEach(i -> exclusions.add(array.get(i).textValue()));\n             }\n         }\n     }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java\nindex 38c037ec260..a3c088c35e6 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/VersionsJsonFilter.java\n@@ -15,10 +15,11 @@\n  */\n package com.vaadin.flow.server.frontend;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.slf4j.LoggerFactory;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n import static com.vaadin.flow.server.frontend.NodeUpdater.VAADIN_DEP_KEY;\n \n@@ -32,13 +33,13 @@\n  */\n class VersionsJsonFilter {\n \n-    private final JsonObject userManagedDependencies;\n+    private final ObjectNode userManagedDependencies;\n \n     private final String dependenciesKey;\n \n     private static final String OLDER_VERSION_WARNING = \""Using user (package.json) pinned version '{}' of '{}' which is older than the current platform version '{}'\"";\n \n-    VersionsJsonFilter(JsonObject packageJson, String dependenciesKey) {\n+    VersionsJsonFilter(ObjectNode packageJson, String dependenciesKey) {\n         this.dependenciesKey = dependenciesKey;\n         userManagedDependencies = collectUserManagedDependencies(packageJson);\n     }\n@@ -53,9 +54,9 @@ class VersionsJsonFilter {\n      *            origin of the version (like a file), used in error message\n      * @return filtered versions json\n      */\n-    JsonObject getFilteredVersions(JsonObject versions, String versionOrigin) {\n-        JsonObject json = Json.createObject();\n-        for (String key : versions.keys()) {\n+    ObjectNode getFilteredVersions(ObjectNode versions, String versionOrigin) {\n+        ObjectNode json = JacksonUtils.createObjectNode();\n+        for (String key : JacksonUtils.getKeys(versions)) {\n             final FrontendVersion version = FrontendUtils\n                     .getPackageVersionFromJson(versions, key, versionOrigin);\n             if (version == null) {\n@@ -73,11 +74,11 @@ JsonObject getFilteredVersions(JsonObject versions, String versionOrigin) {\n                 if (version.isNewerThan(userManagedVersion)) {\n                     LoggerFactory.getLogger(\""Versions\"").warn(\n                             OLDER_VERSION_WARNING,\n-                            userManagedDependencies.getString(key), key,\n-                            versions.getString(key));\n+                            userManagedDependencies.get(key).textValue(), key,\n+                            versions.get(key).textValue());\n                 }\n             }\n-            json.put(key, versions.getString(key));\n+            json.put(key, versions.get(key).textValue());\n         }\n         return json;\n     }\n@@ -90,16 +91,16 @@ JsonObject getFilteredVersions(JsonObject versions, String versionOrigin) {\n      *            package.json Json object\n      * @return collection of user managed dependencies\n      */\n-    private JsonObject collectUserManagedDependencies(JsonObject packageJson) {\n-        JsonObject json = Json.createObject();\n-        JsonObject vaadinDep = collectFrameworkVersions(packageJson);\n+    private ObjectNode collectUserManagedDependencies(ObjectNode packageJson) {\n+        ObjectNode json = JacksonUtils.createObjectNode();\n+        JsonNode vaadinDep = collectFrameworkVersions(packageJson);\n \n-        if (packageJson.hasKey(dependenciesKey)) {\n-            JsonObject dependencies = packageJson.getObject(dependenciesKey);\n+        if (packageJson.has(dependenciesKey)) {\n+            JsonNode dependencies = packageJson.get(dependenciesKey);\n \n-            for (String key : dependencies.keys()) {\n+            for (String key : JacksonUtils.getKeys(dependencies)) {\n                 if (isUserChanged(key, vaadinDep, dependencies)) {\n-                    json.put(key, dependencies.getString(key));\n+                    json.put(key, dependencies.get(key).textValue());\n                 }\n             }\n         }\n@@ -107,21 +108,22 @@ private JsonObject collectUserManagedDependencies(JsonObject packageJson) {\n         return json;\n     }\n \n-    private boolean isUserChanged(String key, JsonObject vaadinDep,\n-            JsonObject dependencies) {\n-        if (vaadinDep.hasKey(key)) {\n+    private boolean isUserChanged(String key, JsonNode vaadinDep,\n+            JsonNode dependencies) {\n+        if (vaadinDep.has(key)) {\n             try {\n                 FrontendVersion vaadin = new FrontendVersion(key,\n-                        vaadinDep.getString(key));\n+                        vaadinDep.get(key).textValue());\n                 FrontendVersion dep = new FrontendVersion(key,\n-                        dependencies.getString(key));\n+                        dependencies.get(key).textValue());\n                 return !vaadin.isEqualTo(dep);\n             } catch (NumberFormatException nfe) {\n                 LoggerFactory.getLogger(\""VersionsFilter\"").debug(\n                         \""Received version with non numbers {} and {}\"",\n-                        vaadinDep.getString(key), dependencies.getString(key));\n-                return !vaadinDep.getString(key)\n-                        .equals(dependencies.getString(key));\n+                        vaadinDep.get(key).textValue(),\n+                        dependencies.get(key).textValue());\n+                return !vaadinDep.get(key).textValue()\n+                        .equals(dependencies.get(key).textValue());\n             }\n         }\n         // User changed if not in vaadin dependency\n@@ -135,12 +137,11 @@ private boolean isUserChanged(String key, JsonObject vaadinDep,\n      *            main package.json\n      * @return Vaadin dependencies or empty object\n      */\n-    private JsonObject collectFrameworkVersions(JsonObject packageJson) {\n-        if (packageJson.hasKey(VAADIN_DEP_KEY) && packageJson\n-                .getObject(VAADIN_DEP_KEY).hasKey(dependenciesKey)) {\n-            return packageJson.getObject(VAADIN_DEP_KEY)\n-                    .getObject(dependenciesKey);\n+    private JsonNode collectFrameworkVersions(ObjectNode packageJson) {\n+        if (packageJson.has(VAADIN_DEP_KEY)\n+                && packageJson.get(VAADIN_DEP_KEY).has(dependenciesKey)) {\n+            return packageJson.get(VAADIN_DEP_KEY).get(dependenciesKey);\n         }\n-        return Json.createObject();\n+        return JacksonUtils.createObjectNode();\n     }\n }\n\ndiff --git a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ThemeLiveUpdater.java b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ThemeLiveUpdater.java\nindex 0ee1e973167..5dd1ab6dbbb 100644\n--- a/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ThemeLiveUpdater.java\n+++ b/vaadin-dev-server/src/main/java/com/vaadin/base/devserver/ThemeLiveUpdater.java\n@@ -20,6 +20,7 @@\n import java.io.IOException;\n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -30,8 +31,6 @@\n import com.vaadin.flow.server.frontend.ThemeUtils;\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n \n-import elemental.json.JsonObject;\n-\n /**\n  * Watches the given theme folder for changes, combines the theme on changes and\n  * pushes the new version to the browser.\n@@ -52,7 +51,7 @@ public class ThemeLiveUpdater implements Closeable {\n     public ThemeLiveUpdater(File themeFolder, VaadinContext context) {\n         String themeName = themeFolder.getName();\n         File stylesCss = new File(themeFolder, \""styles.css\"");\n-        JsonObject themeJson = ThemeUtils\n+        JsonNode themeJson = ThemeUtils\n                 .getThemeJson(themeName, ApplicationConfiguration.get(context))\n                 .orElse(null);\n \n"", ""test_patch"": ""diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdatePackagesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdatePackagesTest.java\nindex 92967b3187a..b73a15027e9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdatePackagesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/AbstractNodeUpdatePackagesTest.java\n@@ -28,6 +28,8 @@\n import java.util.Map;\n import java.util.Optional;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -37,6 +39,7 @@\n import org.mockito.MockedStatic;\n import org.mockito.Mockito;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.Platform;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n@@ -45,9 +48,6 @@\n import com.vaadin.flow.testutil.FrontendStubs;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.TARGET;\n import static com.vaadin.flow.server.frontend.NodeUpdater.DEP_NAME_FLOW_DEPS;\n@@ -143,12 +143,12 @@ public void pnpmIsInUse_packageJsonContainsFlowDeps_removeFlowDeps()\n         packageUpdater.execute();\n \n         // Add flowDeps\n-        JsonObject json = packageUpdater.getPackageJson();\n+        ObjectNode json = packageUpdater.getPackageJson();\n         getDependencies(json).put(DEP_NAME_FLOW_DEPS, \""target/frontend\"");\n         json.put(VAADIN_APP_PACKAGE_HASH,\n                 \""e05bfd4b6c6bd20c806b3a0ad1be521bfd775c9b6f8f9c997b0ad1fda834805b\"");\n         Files.write(packageJson.toPath(),\n-                Collections.singletonList(json.toJson()));\n+                Collections.singletonList(json.toString()));\n \n         options.withEnablePnpm(true);\n         packageUpdater = new TaskUpdatePackages(getScanner(classFinder),\n@@ -169,12 +169,12 @@ public void pnpmIsInUse_packageJsonContainsFlowFrontend_removeFlowFrontend()\n         packageUpdater.execute();\n \n         // Add old dep\n-        JsonObject json = packageUpdater.getPackageJson();\n+        ObjectNode json = packageUpdater.getPackageJson();\n         getDependencies(json).put(DEP_NAME_FLOW_JARS, \""target/flow-frontend\"");\n         json.put(VAADIN_APP_PACKAGE_HASH,\n                 \""e05bfd4b6c6bd20c806b3a0ad1be521bfd775c9b6f8f9c997b0ad1fda834805b\"");\n         Files.write(packageJson.toPath(),\n-                Collections.singletonList(json.toJson()));\n+                Collections.singletonList(json.toString()));\n \n         options.withEnablePnpm(true);\n         packageUpdater = new TaskUpdatePackages(getScanner(classFinder),\n@@ -212,11 +212,11 @@ public void npmIsInUse_packageJsonContainsFlowDeps_removeFlowDeps()\n         packageCreator.execute();\n         packageUpdater.execute();\n \n-        JsonObject packJsonObject = getPackageJson(packageJson);\n-        JsonObject deps = packJsonObject.get(DEPENDENCIES);\n+        JsonNode packJsonNode = getPackageJson(packageJson);\n+        ObjectNode deps = (ObjectNode) packJsonNode.get(DEPENDENCIES);\n         deps.put(DEP_NAME_FLOW_DEPS, \""foobar\"");\n \n-        writePackageJson(packageJson, packJsonObject);\n+        writePackageJson(packageJson, packJsonNode);\n \n         packageUpdater.execute();\n \n@@ -230,11 +230,11 @@ public void npmIsInUse_packageJsonContainsFlowFrontend_removeFlowFrontend()\n         packageCreator.execute();\n         packageUpdater.execute();\n \n-        JsonObject packJsonObject = getPackageJson(packageJson);\n-        JsonObject deps = packJsonObject.get(DEPENDENCIES);\n+        JsonNode packJsonNode = getPackageJson(packageJson);\n+        ObjectNode deps = (ObjectNode) packJsonNode.get(DEPENDENCIES);\n         deps.put(DEP_NAME_FLOW_JARS, \""foobar\"");\n \n-        writePackageJson(packageJson, packJsonObject);\n+        writePackageJson(packageJson, packJsonNode);\n \n         packageUpdater.execute();\n \n@@ -265,14 +265,14 @@ public void unmatchedDevDependency_devDependencyIsRemoved()\n         packageUpdater.execute();\n \n         // Change the version\n-        JsonObject json = packageUpdater.getPackageJson();\n+        JsonNode json = packageUpdater.getPackageJson();\n         final String old_dependency = \""old_dependency\"";\n-        json.getObject(VAADIN_DEP_KEY).getObject(DEV_DEPENDENCIES)\n+        ((ObjectNode) json.get(VAADIN_DEP_KEY).get(DEV_DEPENDENCIES))\n                 .put(old_dependency, \""1.1.1\"");\n-        json.getObject(DEV_DEPENDENCIES).put(old_dependency, \""1.1.1\"");\n+        ((ObjectNode) json.get(DEV_DEPENDENCIES)).put(old_dependency, \""1.1.1\"");\n \n         Files.write(packageJson.toPath(),\n-                Collections.singletonList(json.toJson()));\n+                Collections.singletonList(json.toString()));\n \n         // run it again with existing generated package.json and mismatched\n         // versions\n@@ -280,11 +280,11 @@ public void unmatchedDevDependency_devDependencyIsRemoved()\n \n         json = packageUpdater.getPackageJson();\n         Assert.assertFalse(\""Old dev dependency should be removed from vaadin\"",\n-                json.getObject(VAADIN_DEP_KEY).getObject(DEV_DEPENDENCIES)\n-                        .hasKey(old_dependency));\n+                json.get(VAADIN_DEP_KEY).get(DEV_DEPENDENCIES)\n+                        .has(old_dependency));\n         Assert.assertFalse(\n                 \""Old dev dependency should be removed from devDependencies\"",\n-                json.getObject(DEV_DEPENDENCIES).hasKey(old_dependency));\n+                json.get(DEV_DEPENDENCIES).has(old_dependency));\n     }\n \n     @Test // #10032\n@@ -294,16 +294,16 @@ public void oldVaadinDevDependency_missmatchWithDevDependency_vaadinDependencyIs\n         packageCreator.execute();\n \n         // Change the version\n-        JsonObject json = packageUpdater.getPackageJson();\n+        JsonNode json = packageUpdater.getPackageJson();\n         final String key = \""vite\"";\n         final String version = packageUpdater.getDefaultDevDependencies()\n                 .get(key);\n-        json.getObject(VAADIN_DEP_KEY).getObject(DEV_DEPENDENCIES).put(key,\n+        ((ObjectNode) json.get(VAADIN_DEP_KEY).get(DEV_DEPENDENCIES)).put(key,\n                 \""v2.8.0\"");\n-        json.getObject(DEV_DEPENDENCIES).put(key, version);\n+        ((ObjectNode) json.get(DEV_DEPENDENCIES)).put(key, version);\n \n         Files.write(packageJson.toPath(),\n-                Collections.singletonList(json.toJson()));\n+                Collections.singletonList(json.toString()));\n \n         // run it again to see that versions are updated\n         packageCreator.execute();\n@@ -311,10 +311,10 @@ public void oldVaadinDevDependency_missmatchWithDevDependency_vaadinDependencyIs\n         json = packageUpdater.getPackageJson();\n         Assert.assertEquals(\n                 \""Vaadin dependency should be updated to latest DevDependency\"",\n-                version, json.getObject(VAADIN_DEP_KEY)\n-                        .getObject(DEV_DEPENDENCIES).getString(key));\n+                version, json.get(VAADIN_DEP_KEY).get(DEV_DEPENDENCIES).get(key)\n+                        .textValue());\n         Assert.assertEquals(\""DevDependency should stay the same as it was\"",\n-                version, json.getObject(DEV_DEPENDENCIES).getString(key));\n+                version, json.get(DEV_DEPENDENCIES).get(key).textValue());\n     }\n \n     @Test\n@@ -386,7 +386,7 @@ public void versionsMatch_noCleanUp() throws IOException {\n         makeNodeModulesAndPackageLock();\n \n         Files.write(packageLock.toPath(),\n-                Collections.singletonList(stringify(makePackageLock(\""1.1.1\""))));\n+                Collections.singletonList(makePackageLock(\""1.1.1\"").toString()));\n \n         packageUpdater.execute();\n \n@@ -463,20 +463,20 @@ public void generatePackageJson_sameDependenciesInDifferentOrder_updaterIsNotMod\n         packageUpdater.execute();\n \n         // Shuffle the dependencies.\n-        JsonObject json = getPackageJson(this.packageJson);\n-        JsonObject dependencies = json.getObject(DEPENDENCIES);\n-        List<String> dependencyKeys = Arrays.asList(dependencies.keys());\n+        ObjectNode json = (ObjectNode) getPackageJson(this.packageJson);\n+        JsonNode dependencies = json.get(DEPENDENCIES);\n+        List<String> dependencyKeys = JacksonUtils.getKeys(dependencies);\n \n         Collections.shuffle(dependencyKeys);\n \n-        JsonObject newDependencies = Json.createObject();\n-        dependencyKeys.forEach(\n-                key -> newDependencies.put(key, dependencies.getString(key)));\n+        ObjectNode newDependencies = JacksonUtils.createObjectNode();\n+        dependencyKeys.forEach(key -> newDependencies.put(key,\n+                dependencies.get(key).textValue()));\n \n-        json.put(DEPENDENCIES, newDependencies);\n+        json.set(DEPENDENCIES, newDependencies);\n \n         Files.write(this.packageJson.toPath(),\n-                Collections.singletonList(stringify(json)));\n+                Collections.singletonList(json.toString()));\n \n         // generate it one more time, the content will be different since\n         // packageCreator has not added its content\n@@ -608,18 +608,18 @@ public void userAddedDependencies_notCleanedByUpdater() throws IOException {\n         packageUpdater = new TaskUpdatePackages(frontendDependencies, options);\n \n         packageCreator.execute();\n-        JsonObject json = getPackageJson(packageJson);\n-        json.getObject(DEPENDENCIES).put(\""@custom/timer\"", \""3.3.0\"");\n+        JsonNode json = getPackageJson(packageJson);\n+        ((ObjectNode) json.get(DEPENDENCIES)).put(\""@custom/timer\"", \""3.3.0\"");\n \n         Files.write(packageJson.toPath(),\n-                Collections.singletonList(json.toJson()));\n+                Collections.singletonList(json.toString()));\n \n         packageUpdater.execute();\n \n-        JsonObject dependencies = getPackageJson(packageJson)\n-                .getObject(DEPENDENCIES);\n-        Assert.assertTrue(dependencies.hasKey(\""@custom/timer\""));\n-        Assert.assertEquals(\""3.3.0\"", dependencies.getString(\""@custom/timer\""));\n+        JsonNode dependencies = getPackageJson(packageJson).get(DEPENDENCIES);\n+        Assert.assertTrue(dependencies.has(\""@custom/timer\""));\n+        Assert.assertEquals(\""3.3.0\"",\n+                dependencies.get(\""@custom/timer\"").textValue());\n     }\n \n     @Test\n@@ -671,12 +671,11 @@ public void frameworkManagedPackages_versionsAreUpdated()\n         packageCreator.execute();\n         packageUpdater.execute();\n \n-        JsonObject dependencies = getPackageJson(packageJson)\n-                .getObject(DEPENDENCIES);\n+        JsonNode dependencies = getPackageJson(packageJson).get(DEPENDENCIES);\n         for (Map.Entry<String, String> entry : packages.entrySet()) {\n-            Assert.assertTrue(dependencies.hasKey(entry.getKey()));\n+            Assert.assertTrue(dependencies.has(entry.getKey()));\n             Assert.assertEquals(entry.getValue(),\n-                    dependencies.getString(entry.getKey()));\n+                    dependencies.get(entry.getKey()).textValue());\n         }\n \n         packages.clear();\n@@ -688,11 +687,11 @@ public void frameworkManagedPackages_versionsAreUpdated()\n \n         packageUpdater.execute();\n \n-        dependencies = getPackageJson(packageJson).getObject(DEPENDENCIES);\n+        dependencies = getPackageJson(packageJson).get(DEPENDENCIES);\n         for (Map.Entry<String, String> entry : packages.entrySet()) {\n-            Assert.assertTrue(dependencies.hasKey(entry.getKey()));\n+            Assert.assertTrue(dependencies.has(entry.getKey()));\n             Assert.assertEquals(entry.getValue(),\n-                    dependencies.getString(entry.getKey()));\n+                    dependencies.get(entry.getKey()).textValue());\n         }\n     }\n \n@@ -718,29 +717,28 @@ public void removedFrameworkDependencies_dependencyIsRemoved()\n \n         packages.remove(\""@vaadin/vaadin-checkbox\"");\n \n-        JsonObject dependencies = getPackageJson(packageJson)\n-                .getObject(DEPENDENCIES);\n+        JsonNode dependencies = getPackageJson(packageJson).get(DEPENDENCIES);\n         Assert.assertTrue(\""vaadin-checkbox is missing from the dependencies\"",\n-                dependencies.hasKey(\""@vaadin/vaadin-checkbox\""));\n+                dependencies.has(\""@vaadin/vaadin-checkbox\""));\n \n-        dependencies = getPackageJson(packageJson).getObject(VAADIN_DEP_KEY)\n-                .getObject(DEPENDENCIES);\n+        dependencies = getPackageJson(packageJson).get(VAADIN_DEP_KEY)\n+                .get(DEPENDENCIES);\n         Assert.assertTrue(\""vaadin-checkbox is missing from vaadin.dependencies\"",\n-                dependencies.hasKey(\""@vaadin/vaadin-checkbox\""));\n+                dependencies.has(\""@vaadin/vaadin-checkbox\""));\n \n         // generate it one more time, this should remove the checkbox\n         packageUpdater.execute();\n \n-        dependencies = getPackageJson(packageJson).getObject(DEPENDENCIES);\n+        dependencies = getPackageJson(packageJson).get(DEPENDENCIES);\n         Assert.assertFalse(\n                 \""vaadin-checkbox is still available in the dependencies\"",\n-                dependencies.hasKey(\""@vaadin/vaadin-checkbox\""));\n+                dependencies.has(\""@vaadin/vaadin-checkbox\""));\n \n-        dependencies = getPackageJson(packageJson).getObject(VAADIN_DEP_KEY)\n-                .getObject(DEPENDENCIES);\n+        dependencies = getPackageJson(packageJson).get(VAADIN_DEP_KEY)\n+                .get(DEPENDENCIES);\n         Assert.assertFalse(\n                 \""vaadin-checkbox is still available in vaadin.dependencies\"",\n-                dependencies.hasKey(\""@vaadin/vaadin-checkbox\""));\n+                dependencies.has(\""@vaadin/vaadin-checkbox\""));\n \n     }\n \n@@ -788,68 +786,68 @@ private void assertCleanUp() {\n     }\n \n     private void assertMainPackageJsonContent() throws IOException {\n-        JsonObject json = packageUpdater.getPackageJson();\n-        Assert.assertTrue(json.hasKey(\""name\""));\n-        Assert.assertTrue(json.hasKey(\""license\""));\n+        JsonNode json = packageUpdater.getPackageJson();\n+        Assert.assertTrue(json.has(\""name\""));\n+        Assert.assertTrue(json.has(\""license\""));\n \n-        JsonObject dependencies = json.getObject(DEPENDENCIES);\n+        JsonNode dependencies = json.get(DEPENDENCIES);\n         for (Map.Entry<String, String> entry : packageUpdater\n                 .getDefaultDependencies().entrySet()) {\n             Assert.assertTrue(\""Missing '\"" + entry.getKey() + \""' package\"",\n-                    dependencies.hasKey(entry.getKey()));\n+                    dependencies.has(entry.getKey()));\n         }\n \n-        JsonObject devDependencies = json.getObject(DEV_DEPENDENCIES);\n+        JsonNode devDependencies = json.get(DEV_DEPENDENCIES);\n         for (Map.Entry<String, String> entry : packageUpdater\n                 .getDefaultDevDependencies().entrySet()) {\n             Assert.assertTrue(\""Missing '\"" + entry.getKey() + \""' package\"",\n-                    devDependencies.hasKey(entry.getKey()));\n+                    devDependencies.has(entry.getKey()));\n         }\n \n-        Assert.assertFalse(dependencies.hasKey(DEP_NAME_FLOW_JARS));\n+        Assert.assertFalse(dependencies.has(DEP_NAME_FLOW_JARS));\n     }\n \n-    private JsonObject getDependencies(JsonObject json) {\n-        return json.getObject(DEPENDENCIES);\n+    private ObjectNode getDependencies(JsonNode json) {\n+        return (ObjectNode) json.get(DEPENDENCIES);\n     }\n \n-    private JsonObject makePackageLock(String version) {\n-        JsonObject object = Json.createObject();\n-        JsonObject deps = Json.createObject();\n-        JsonObject shrinkWrap = Json.createObject();\n-        object.put(DEPENDENCIES, deps);\n+    private ObjectNode makePackageLock(String version) {\n+        ObjectNode object = JacksonUtils.createObjectNode();\n+        JsonNode deps = JacksonUtils.createObjectNode();\n+        ObjectNode shrinkWrap = JacksonUtils.createObjectNode();\n+        object.set(DEPENDENCIES, deps);\n         shrinkWrap.put(\""version\"", version);\n         return object;\n     }\n \n     private void assertPackageJsonFlowDeps() throws IOException {\n-        JsonObject packJsonObject = getPackageJson(packageJson);\n-        JsonObject deps = packJsonObject.get(DEPENDENCIES);\n+        JsonNode packJsonNode = getPackageJson(packageJson);\n+        JsonNode deps = packJsonNode.get(DEPENDENCIES);\n         // No Flow deps\n-        Assert.assertFalse(deps.hasKey(DEP_NAME_FLOW_DEPS));\n+        Assert.assertFalse(deps.has(DEP_NAME_FLOW_DEPS));\n         // No Flow resources\n-        Assert.assertFalse(deps.hasKey(DEP_NAME_FLOW_JARS));\n+        Assert.assertFalse(deps.has(DEP_NAME_FLOW_JARS));\n         // No old package hash\n-        Assert.assertFalse(deps.hasKey(VAADIN_APP_PACKAGE_HASH));\n+        Assert.assertFalse(deps.has(VAADIN_APP_PACKAGE_HASH));\n         // Contains initially generated default polymer dep\n-        Assert.assertTrue(deps.hasKey(\""@polymer/polymer\""));\n+        Assert.assertTrue(deps.has(\""@polymer/polymer\""));\n         // Contains new hash\n-        Assert.assertTrue(packJsonObject.getObject(\""vaadin\"").hasKey(\""hash\""));\n+        Assert.assertTrue(packJsonNode.get(\""vaadin\"").has(\""hash\""));\n     }\n \n-    JsonObject getPackageJson(File packageFile) throws IOException {\n-        JsonObject packageJson = null;\n+    JsonNode getPackageJson(File packageFile) throws IOException {\n+        JsonNode packageJson = null;\n         if (packageFile.exists()) {\n             String fileContent = FileUtils.readFileToString(packageFile,\n                     UTF_8.name());\n-            packageJson = Json.parse(fileContent);\n+            packageJson = JacksonUtils.readTree(fileContent);\n         }\n         return packageJson;\n     }\n \n-    void writePackageJson(File packageJsonFile, JsonObject packageJson)\n+    void writePackageJson(File packageJsonFile, JsonNode packageJson)\n             throws IOException {\n-        FileIOUtils.writeIfChanged(packageJsonFile, packageJson.toJson());\n+        FileIOUtils.writeIfChanged(packageJsonFile, packageJson.toString());\n     }\n \n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleUtilsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleUtilsTest.java\nindex b5ed460be22..0f2245f60b1 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleUtilsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleUtilsTest.java\n@@ -9,6 +9,9 @@\n import java.util.List;\n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.junit.After;\n import org.junit.Assert;\n@@ -19,13 +22,10 @@\n import org.mockito.Mockito;\n \n import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.DEV_BUNDLE_JAR_PATH;\n \n public class BundleUtilsTest {\n@@ -99,18 +99,18 @@ public void themeVariantsFromJarHandled() {\n     }\n \n     private void mockStatsJson(String... imports) {\n-        JsonObject statsJson = Json.createObject();\n-        JsonArray importsArray = Json.createArray();\n-        for (int i = 0; i < imports.length; i++) {\n-            importsArray.set(i, imports[i]);\n+        ObjectNode statsJson = JacksonUtils.createObjectNode();\n+        ArrayNode importsArray = JacksonUtils.createArrayNode();\n+        for (String anImport : imports) {\n+            importsArray.add(anImport);\n         }\n \n-        statsJson.put(\""bundleImports\"", importsArray);\n+        statsJson.set(\""bundleImports\"", importsArray);\n \n         mockStatsJsonLoading(statsJson);\n     }\n \n-    private void mockStatsJsonLoading(JsonObject statsJson) {\n+    private void mockStatsJsonLoading(JsonNode statsJson) {\n         MockedStatic<BundleUtils> mock = Mockito.mockStatic(BundleUtils.class);\n         mock.when(() -> BundleUtils.loadStatsJson()).thenReturn(statsJson);\n         mock.when(() -> BundleUtils.loadBundleImports()).thenCallRealMethod();\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java\nindex add29e12e0a..651e5eeba87 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/BundleValidationTest.java\n@@ -10,6 +10,9 @@\n import java.util.List;\n import java.util.Map;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n import org.junit.After;\n@@ -25,6 +28,7 @@\n import org.mockito.Mockito;\n \n import com.vaadin.flow.component.page.AppShellConfigurator;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.LoadDependenciesOnStartup;\n import com.vaadin.flow.server.Mode;\n@@ -36,10 +40,6 @@\n import com.vaadin.flow.theme.ThemeDefinition;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.DEV_BUNDLE_JAR_PATH;\n import static com.vaadin.flow.server.Constants.PROD_BUNDLE_JAR_PATH;\n import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_FRONTEND_DIR;\n@@ -136,21 +136,21 @@ public void teardown() {\n         }\n     }\n \n-    private JsonObject getBasicStats() {\n-        JsonObject stats = Json.createObject();\n+    private ObjectNode getBasicStats() {\n+        ObjectNode stats = JacksonUtils.createObjectNode();\n \n-        JsonObject packageJsonDependencies = Json.createObject();\n-        JsonObject frontendHashes = Json.createObject();\n-        JsonObject themeJsonContents = Json.createObject();\n+        ObjectNode packageJsonDependencies = JacksonUtils.createObjectNode();\n+        ObjectNode frontendHashes = JacksonUtils.createObjectNode();\n+        ObjectNode themeJsonContents = JacksonUtils.createObjectNode();\n \n-        JsonArray entryScripts = Json.createArray();\n-        JsonArray bundleImports = Json.createArray();\n+        ArrayNode entryScripts = JacksonUtils.createArrayNode();\n+        ArrayNode bundleImports = JacksonUtils.createArrayNode();\n \n-        stats.put(PACKAGE_JSON_DEPENDENCIES, packageJsonDependencies);\n-        stats.put(ENTRY_SCRIPTS, entryScripts);\n-        stats.put(BUNDLE_IMPORTS, bundleImports);\n-        stats.put(FRONTEND_HASHES, frontendHashes);\n-        stats.put(THEME_JSON_CONTENTS, themeJsonContents);\n+        stats.set(PACKAGE_JSON_DEPENDENCIES, packageJsonDependencies);\n+        stats.set(ENTRY_SCRIPTS, entryScripts);\n+        stats.set(BUNDLE_IMPORTS, bundleImports);\n+        stats.set(FRONTEND_HASHES, frontendHashes);\n+        stats.set(THEME_JSON_CONTENTS, themeJsonContents);\n         stats.put(PACKAGE_JSON_HASH, \""aHash\"");\n \n         NodeUpdater nodeUpdater = new NodeUpdater(\n@@ -168,8 +168,7 @@ public void execute() {\n                     dependency.getValue());\n         }\n \n-        bundleImports.set(bundleImports.length(),\n-                \""./generated/jar-resources/theme-util.js\"");\n+        bundleImports.add(\""./generated/jar-resources/theme-util.js\"");\n         frontendHashes.put(\""theme-util.js\"",\n                 BundleValidationUtil.calculateHash(THEME_UTIL_JS));\n         jarResources.put(\""theme-util.js\"", THEME_UTIL_JS);\n@@ -215,9 +214,9 @@ public void hashesMatch_noNpmPackages_noCompilationRequired()\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.7.5\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.7.5\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -244,9 +243,9 @@ public void loadDependenciesOnStartup_annotatedClassInProject_compilationRequire\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.7.5\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.7.5\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -279,9 +278,9 @@ public void hashesMatch_statsMissingNpmPackages_compilationRequired()\n         packages.put(\""@vaadin/text\"", \""1.0.0\"");\n         Mockito.when(depScanner.getPackages()).thenReturn(packages);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.7.5\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.7.5\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -315,9 +314,9 @@ public void hashesMatch_statsMissingPackageJsonPackage_compilationRequired()\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.7.5\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.7.5\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -343,10 +342,11 @@ public void hashesMatch_packageJsonMissingNpmPackages_statsHasJsonPackages_noCom\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.singletonMap(\""@vaadin/text\"", \""1.0.0\""));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.7.5\"");\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/text\"", \""1.0.0\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.7.5\"");\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\""@vaadin/text\"",\n+                \""1.0.0\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -388,7 +388,7 @@ public void packageJsonContainsOldVersion_versionsJsonUpdates_noCompilation()\n                       \""jsVersion\"": \""2.0.3\"",\n                       \""npmName\"": \""@vaadin/router\"",\n                       \""releasenotes\"": true\n-                    },\n+                    }\n                   },\n                   \""platform\"": \""123-SNAPSHOT\""\n                 }\n@@ -397,9 +397,9 @@ public void packageJsonContainsOldVersion_versionsJsonUpdates_noCompilation()\n         Mockito.when(finder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(versions.toURI().toURL());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""2.0.3\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""2.0.3\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -436,10 +436,11 @@ public void packageJsonContainsOldVersionsAfterVersionUpdate_updatedStatsMatches\n         packages.put(\""@vaadin/text\"", \""2.1.0\"");\n         Mockito.when(depScanner.getPackages()).thenReturn(packages);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.9.2\"");\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/text\"", \""2.1.0\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.9.2\"");\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\""@vaadin/text\"",\n+                \""2.1.0\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -473,14 +474,15 @@ public void noPackageJsonHashAfterCleanFrontend_statsHasDefaultJsonPackages_noCo\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.singletonMap(\""@vaadin/text\"", \""1.0.0\""));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.7.5\"");\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/text\"", \""1.0.0\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.7.5\"");\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\""@vaadin/text\"",\n+                \""1.0.0\"");\n         stats.put(PACKAGE_JSON_HASH,\n                 \""af45419b27dcb44b875197df4347b97316cc8fa6055458223a73aedddcfe7cc6\"");\n-        stats.getArray(ENTRY_SCRIPTS).set(0,\n-                \""VAADIN/build/indexhtml-aa31f040.js\"");\n+        ((ArrayNode) stats.get(ENTRY_SCRIPTS))\n+                .add(\""VAADIN/build/indexhtml-aa31f040.js\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -514,9 +516,9 @@ public void noPackageJsonHashAfterCleanFrontend_statsMissingDefaultJsonPackages_\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.singletonMap(\""@vaadin/text\"", \""1.0.0\""));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.7.5\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.7.5\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -550,9 +552,9 @@ public void hashesMatch_packageJsonHasRange_statsHasFixed_noCompilationRequired(\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.7.5\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.7.5\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -586,9 +588,9 @@ public void hashesMatch_packageJsonHasTildeRange_statsHasNewerFixed_noCompilatio\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.7.6\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.7.6\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -597,8 +599,8 @@ public void hashesMatch_packageJsonHasTildeRange_statsHasNewerFixed_noCompilatio\n         Assert.assertFalse(\""No compilation if tilde range only patch update\"",\n                 needsBuild);\n \n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.8.1\"");\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.8.1\"");\n         setupFrontendUtilsMock(stats);\n \n         needsBuild = BundleValidationUtil.needsBuild(options, depScanner, mode);\n@@ -630,9 +632,9 @@ public void hashesMatch_packageJsonHasCaretRange_statsHasNewerFixed_noCompilatio\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.8.6\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.8.6\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -642,8 +644,8 @@ public void hashesMatch_packageJsonHasCaretRange_statsHasNewerFixed_noCompilatio\n                 \""No compilation if caret range only minor version update\"",\n                 needsBuild);\n \n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""2.0.0\"");\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""2.0.0\"");\n         setupFrontendUtilsMock(stats);\n \n         needsBuild = BundleValidationUtil.needsBuild(options, depScanner, mode);\n@@ -680,9 +682,9 @@ public void packageJsonHasOldPlatformDependencies_statsDoesNotHaveThem_noCompila\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/accordion\"",\n-                \""24.0.0.beta2\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/accordion\"", \""24.0.0.beta2\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -702,13 +704,14 @@ public void noPackageJson_defaultPackagesAndModulesInStats_noBuildNeeded() {\n \n         String defaultHash = BundleValidationUtil\n                 .getDefaultPackageJson(options, depScanner, null)\n-                .getObject(NodeUpdater.VAADIN_DEP_KEY)\n-                .getString(NodeUpdater.HASH_KEY);\n-\n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.7.5\"");\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/text\"", \""1.0.0\"");\n+                .get(NodeUpdater.VAADIN_DEP_KEY).get(NodeUpdater.HASH_KEY)\n+                .textValue();\n+\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.7.5\"");\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\""@vaadin/text\"",\n+                \""1.0.0\"");\n         stats.put(PACKAGE_JSON_HASH, defaultHash);\n \n         setupFrontendUtilsMock(stats);\n@@ -728,12 +731,12 @@ public void noPackageJson_defaultPackagesInStats_missingNpmModules_buildNeeded()\n \n         String defaultHash = BundleValidationUtil\n                 .getDefaultPackageJson(options, depScanner, null)\n-                .getObject(NodeUpdater.VAADIN_DEP_KEY)\n-                .getString(NodeUpdater.HASH_KEY);\n+                .get(NodeUpdater.VAADIN_DEP_KEY).get(NodeUpdater.HASH_KEY)\n+                .textValue();\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.7.5\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.7.5\"");\n         stats.put(PACKAGE_JSON_HASH, defaultHash);\n \n         setupFrontendUtilsMock(stats);\n@@ -754,12 +757,12 @@ public void noPackageJson_defaultPackagesInStats_noBuildNeeded() {\n \n         String defaultHash = BundleValidationUtil\n                 .getDefaultPackageJson(options, depScanner, null)\n-                .getObject(NodeUpdater.VAADIN_DEP_KEY)\n-                .getString(NodeUpdater.HASH_KEY);\n+                .get(NodeUpdater.VAADIN_DEP_KEY).get(NodeUpdater.HASH_KEY)\n+                .textValue();\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.7.5\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.7.5\"");\n         stats.put(PACKAGE_JSON_HASH, defaultHash);\n \n         setupFrontendUtilsMock(stats);\n@@ -797,14 +800,14 @@ public void generatedFlowImports_bundleMissingImports_buildRequired()\n                         Collections.singletonList(\n                                 \""@polymer/paper-checkbox/paper-checkbox.js\"")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.8.6\"");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(0,\n-                \""@Frontend/generated/jar-resources/dndConnector-es6.js\"");\n-        bundleImports.set(1, \""@polymer/paper-input/paper-input.js\"");\n-        bundleImports.set(2, \""@vaadin/common-frontend/ConnectionIndicator.js\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.8.6\"");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports\n+                .add(\""@Frontend/generated/jar-resources/dndConnector-es6.js\"");\n+        bundleImports.add(\""@polymer/paper-input/paper-input.js\"");\n+        bundleImports.add(\""@vaadin/common-frontend/ConnectionIndicator.js\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -841,18 +844,15 @@ public void generatedFlowImports_bundleHasAllImports_noBuildRequired()\n                         Collections.singletonList(\n                                 \""@polymer/paper-checkbox/paper-checkbox.js\"")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.8.6\"");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n-                \""@polymer/paper-checkbox/paper-checkbox.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""@polymer/paper-input/paper-input.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""@vaadin/grid/theme/lumo/vaadin-grid.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""Frontend/generated/jar-resources/dndConnector-es6.js\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.8.6\"");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\""@polymer/paper-checkbox/paper-checkbox.js\"");\n+        bundleImports.add(\""@polymer/paper-input/paper-input.js\"");\n+        bundleImports.add(\""@vaadin/grid/theme/lumo/vaadin-grid.js\"");\n+        bundleImports\n+                .add(\""Frontend/generated/jar-resources/dndConnector-es6.js\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -890,18 +890,15 @@ public void themedGeneratedFlowImports_bundleUsesTheme_noBuildRequired()\n         Mockito.when(depScanner.getTheme())\n                 .thenReturn(new NodeTestComponents.LumoTest());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.8.6\"");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n-                \""@polymer/paper-checkbox/paper-checkbox.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""@polymer/paper-input/paper-input.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""@vaadin/grid/theme/lumo/vaadin-grid.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""Frontend/generated/jar-resources/dndConnector-es6.js\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.8.6\"");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\""@polymer/paper-checkbox/paper-checkbox.js\"");\n+        bundleImports.add(\""@polymer/paper-input/paper-input.js\"");\n+        bundleImports.add(\""@vaadin/grid/theme/lumo/vaadin-grid.js\"");\n+        bundleImports\n+                .add(\""Frontend/generated/jar-resources/dndConnector-es6.js\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -936,13 +933,12 @@ public void frontendFileHashMatches_noBundleRebuild() throws IOException {\n                 .singletonMap(ChunkInfo.GLOBAL, Collections.singletonList(\n                         \""Frontend/generated/jar-resources/TodoTemplate.js\"")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.8.6\"");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n-                \""./generated/jar-resources/TodoTemplate.js\"");\n-        stats.getObject(FRONTEND_HASHES).put(\""TodoTemplate.js\"",\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.8.6\"");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\""./generated/jar-resources/TodoTemplate.js\"");\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\""TodoTemplate.js\"",\n                 BundleValidationUtil.calculateHash(fileContent));\n         jarResources.put(\""TodoTemplate.js\"", fileContent);\n \n@@ -981,11 +977,11 @@ public void noFrontendFileHash_bundleRebuild() throws IOException {\n                 .singletonMap(ChunkInfo.GLOBAL, Collections.singletonList(\n                         \""Frontend/generated/jar-resources/TodoTemplate.js\"")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.8.6\"");\n-        stats.getArray(BUNDLE_IMPORTS).set(0,\n-                \""Frontend/generated/jar-resources/TodoTemplate.js\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.8.6\"");\n+        ((ArrayNode) stats.get(BUNDLE_IMPORTS))\n+                .add(\""Frontend/generated/jar-resources/TodoTemplate.js\"");\n \n         devBundleUtils.when(() -> DevBundleUtils\n                 .getDevBundleFolder(Mockito.any(), Mockito.any()))\n@@ -998,7 +994,7 @@ public void noFrontendFileHash_bundleRebuild() throws IOException {\n         devBundleUtils\n                 .when(() -> DevBundleUtils.findBundleStatsJson(\n                         temporaryFolder.getRoot(), \""target\""))\n-                .thenReturn(stats.toJson());\n+                .thenReturn(stats.toString());\n \n         boolean needsBuild = BundleValidationUtil.needsBuild(options,\n                 depScanner, mode);\n@@ -1030,12 +1026,12 @@ public void frontendFileHashMissmatch_bundleRebuild() throws IOException {\n                 .singletonMap(ChunkInfo.GLOBAL, Collections.singletonList(\n                         \""Frontend/generated/jar-resources/TodoTemplate.js\"")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.8.6\"");\n-        stats.getArray(BUNDLE_IMPORTS).set(0,\n-                \""Frontend/generated/jar-resources/TodoTemplate.js\"");\n-        stats.getObject(FRONTEND_HASHES).put(\""TodoTemplate.js\"",\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.8.6\"");\n+        ((ArrayNode) (ArrayNode) stats.get(BUNDLE_IMPORTS))\n+                .add(\""Frontend/generated/jar-resources/TodoTemplate.js\"");\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\""TodoTemplate.js\"",\n                 \""dea5180dd21d2f18d1472074cd5305f60b824e557dae480fb66cdf3ea73edc65\"");\n \n         devBundleUtils.when(() -> DevBundleUtils\n@@ -1049,7 +1045,7 @@ public void frontendFileHashMissmatch_bundleRebuild() throws IOException {\n         devBundleUtils\n                 .when(() -> DevBundleUtils.findBundleStatsJson(\n                         temporaryFolder.getRoot(), \""target\""))\n-                .thenReturn(stats.toJson());\n+                .thenReturn(stats.toString());\n \n         boolean needsBuild = BundleValidationUtil.needsBuild(options,\n                 depScanner, mode);\n@@ -1077,10 +1073,10 @@ public void cssImportWithInline_statsAndImportsMatchAndNoBundleRebuild()\n                 Collections.singletonMap(ChunkInfo.GLOBAL, Collections\n                         .singletonList(\""Frontend/my-styles.css?inline\"")));\n \n-        JsonObject stats = getBasicStats();\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(), \""Frontend/my-styles.css\"");\n-        stats.getObject(FRONTEND_HASHES).put(\""my-styles.css\"",\n+        ObjectNode stats = getBasicStats();\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\""Frontend/my-styles.css\"");\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\""my-styles.css\"",\n                 \""0d94fe659d24e1e56872b47fc98d9f09227e19816c62a3db709bad347fbd0cdd\"");\n \n         setupFrontendUtilsMock(stats);\n@@ -1104,9 +1100,11 @@ public void projectFrontendFileChange_bundleRebuild() throws IOException {\n                 Collections.singletonMap(ChunkInfo.GLOBAL, Collections\n                         .singletonList(\""Frontend/views/lit-view.ts\"")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getArray(BUNDLE_IMPORTS).set(0, \""Frontend/views/lit-view.ts\"");\n-        stats.getObject(FRONTEND_HASHES).put(\""views/lit-view.ts\"", \""old_hash\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ArrayNode) stats.get(BUNDLE_IMPORTS))\n+                .add(\""Frontend/views/lit-view.ts\"");\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\""views/lit-view.ts\"",\n+                \""old_hash\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -1128,10 +1126,10 @@ public void projectFrontendFileNotChanged_noBundleRebuild()\n                 Collections.singletonMap(ChunkInfo.GLOBAL, Collections\n                         .singletonList(\""Frontend/views/lit-view.ts\"")));\n \n-        JsonObject stats = getBasicStats();\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(), \""Frontend/views/lit-view.ts\"");\n-        stats.getObject(FRONTEND_HASHES).put(\""views/lit-view.ts\"",\n+        ObjectNode stats = getBasicStats();\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\""Frontend/views/lit-view.ts\"");\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\""views/lit-view.ts\"",\n                 \""eaf04adbc43cb363f6b58c45c6e0e8151084941247abac9493beed8d29f08add\"");\n \n         setupFrontendUtilsMock(stats);\n@@ -1153,9 +1151,10 @@ public void projectFrontendFileDeleted_bundleRebuild() throws IOException {\n                 Collections.singletonMap(ChunkInfo.GLOBAL, Collections\n                         .singletonList(\""Frontend/views/lit-view.ts\"")));\n \n-        JsonObject stats = getBasicStats();\n-        stats.getArray(BUNDLE_IMPORTS).set(0, \""Frontend/views/lit-view.ts\"");\n-        stats.getObject(FRONTEND_HASHES).put(\""views/lit-view.ts\"",\n+        ObjectNode stats = getBasicStats();\n+        ((ArrayNode) stats.get(BUNDLE_IMPORTS))\n+                .add(\""Frontend/views/lit-view.ts\"");\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\""views/lit-view.ts\"",\n                 \""eaf04adbc43cb363f6b58c45c6e0e8151084941247abac9493beed8d29f08add\"");\n \n         setupFrontendUtilsMock(stats);\n@@ -1174,7 +1173,7 @@ public void reusedTheme_noReusedThemes_noBundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n         stats.remove(THEME_JSON_CONTENTS);\n \n         setupFrontendUtilsMock(stats);\n@@ -1243,8 +1242,8 @@ public void reusedTheme_previouslyAddedThemes_justAddedNewTheme_bundleRebuild()\n \n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(\""other-theme\"",\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\""other-theme\"",\n                 \""other-theme-hash\"");\n \n         setupFrontendUtilsMock(stats);\n@@ -1269,8 +1268,8 @@ public void reusedTheme_previouslyAddedThemes_assetsUpdate_bundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(\""reusable-theme\"",\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\""reusable-theme\"",\n                 \""\""\""\n                         {\n                           \""importCss\"": [\""@fortawesome/fontawesome-free/css/all.min.css\""],\n@@ -1304,8 +1303,8 @@ public void reusedTheme_previouslyAddedThemes_noUpdates_noBundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(\""reusable-theme\"",\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\""reusable-theme\"",\n                 \""\""\""\n                         {\n                           \""importCss\"": [\""@fortawesome/fontawesome-free/css/all.min.css\""],\n@@ -1346,7 +1345,7 @@ public void themeJsonUpdates_statsHasNoThemeJson_projectHasThemeJson_bundleRebui\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n         stats.remove(THEME_JSON_CONTENTS);\n \n         setupFrontendUtilsMock(stats);\n@@ -1375,8 +1374,8 @@ public void themeJsonUpdates_containsParentTheme_noBundleRebuild()\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(bundleLocation,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(bundleLocation,\n                 \""{\\\""lumoImports\\\"": [\\\""typography\\\""]}\"");\n \n         setupFrontendUtilsMock(stats);\n@@ -1403,8 +1402,8 @@ public void themeJsonUpdates_statsHasThemeJson_projectHasNoThemeJson_noBundleReb\n         new File(temporaryFolder.getRoot(),\n                 DEFAULT_FRONTEND_DIR + \""themes/my-theme\"").mkdirs();\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(bundleLocation,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(bundleLocation,\n                 \""{\\\""lumoImports\\\"": [\\\""typography\\\""]}\"");\n \n         setupFrontendUtilsMock(stats);\n@@ -1440,8 +1439,8 @@ public void themeJsonUpdates_statsAndProjectThemeJsonEquals_noBundleRebuild()\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(\""my-theme\"", \""\""\""\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\""my-theme\"", \""\""\""\n                 {\n \n \n@@ -1492,8 +1491,8 @@ public void themeJsonUpdates_bundleMissesSomeEntries_bundleRebuild()\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(bundleLocation,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(bundleLocation,\n                 \""\""\""\n                         {\n                           \""lumoImports\"": [\""typography\"", \""color\"", \""spacing\"", \""badge\"", \""utility\""],\n@@ -1535,8 +1534,8 @@ public void themeJsonUpdates_bundleHaveAllEntriesAndMore_noBundleRebuild()\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(bundleLocation,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(bundleLocation,\n                 \""\""\""\n                         {\n                           \""lumoImports\"": [\""typography\"", \""color\"", \""spacing\"", \""badge\"", \""utility\""],\n@@ -1574,7 +1573,7 @@ public void themeJsonUpdates_noProjectThemeHashInStats_bundleRebuild()\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         setupFrontendUtilsMock(stats);\n \n@@ -1603,8 +1602,8 @@ public void parentThemeInFrontend_parentHasEntriesInJson_bundleMissesSomeEntries\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(THEME_JSON_CONTENTS).put(bundleLocation, \""{}\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(bundleLocation, \""{}\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -1796,7 +1795,7 @@ public void indexTsAdded_rebuildRequired() throws IOException {\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         setupFrontendUtilsMock(stats);\n \n@@ -1821,8 +1820,8 @@ public void changeInIndexTs_rebuildRequired() throws IOException {\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(FRONTEND_HASHES).put(FrontendUtils.INDEX_TS,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(FrontendUtils.INDEX_TS,\n                 \""15931fa8c20e3c060c8ea491831e95cc8463962700a9bfb82c8e3844cf608f04\"");\n \n         setupFrontendUtilsMock(stats);\n@@ -1849,8 +1848,8 @@ public void indexTsDeleted_rebuildRequired() throws IOException {\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(FRONTEND_HASHES).put(FrontendUtils.INDEX_TS,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(FrontendUtils.INDEX_TS,\n                 \""15931fa8c20e3c060c8ea491831e95cc8463962700a9bfb82c8e3844cf608f04\"");\n \n         setupFrontendUtilsMock(stats);\n@@ -1875,8 +1874,8 @@ public void indexHtmlNotChanged_rebuildNotRequired() throws IOException {\n                 StandardCharsets.UTF_8);\n         FileUtils.write(indexHtml, defaultIndexHtml, StandardCharsets.UTF_8);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(FRONTEND_HASHES).put(INDEX_HTML,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(INDEX_HTML,\n                 BundleValidationUtil.calculateHash(defaultIndexHtml));\n \n         final FrontendDependenciesScanner depScanner = Mockito\n@@ -1907,8 +1906,8 @@ public void indexHtmlChanged_productionMode_rebuildRequired()\n         String customIndexHtml = defaultIndexHtml.replace(\""<body>\"",\n                 \""<body><div>custom content</div>\"");\n         FileUtils.write(indexHtml, customIndexHtml, StandardCharsets.UTF_8);\n-        JsonObject stats = getBasicStats();\n-        stats.getObject(FRONTEND_HASHES).put(INDEX_HTML,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(INDEX_HTML,\n                 BundleValidationUtil.calculateHash(defaultIndexHtml));\n \n         final FrontendDependenciesScanner depScanner = Mockito\n@@ -1940,8 +1939,8 @@ public void indexHtmlChanged_developmentMode_rebuildNotRequired()\n         String customIndexHtml = defaultIndexHtml.replace(\""<body>\"",\n                 \""<body><div>custom content</div>\"");\n         FileUtils.write(indexHtml, customIndexHtml, StandardCharsets.UTF_8);\n-        JsonObject stats = getBasicStats();\n-        stats.getObject(FRONTEND_HASHES).put(INDEX_HTML,\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(INDEX_HTML,\n                 BundleValidationUtil.calculateHash(defaultIndexHtml));\n \n         final FrontendDependenciesScanner depScanner = Mockito\n@@ -1964,11 +1963,11 @@ public void standardVaadinComponent_notAddedToProjectAsJar_noRebuildRequired()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n+        ObjectNode stats = getBasicStats();\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\n                 \""Frontend/generated/jar-resources/vaadin-spreadsheet/vaadin-spreadsheet.js\"");\n-        stats.getObject(FRONTEND_HASHES).put(\n+        ((ObjectNode) stats.get(FRONTEND_HASHES)).put(\n                 \""vaadin-spreadsheet/vaadin-spreadsheet.js\"",\n                 \""e545ad23a2d1d4b3a3370a0305dd71c15bbfc645216f50c6e327bd818b7484c4\"");\n \n@@ -1995,7 +1994,7 @@ public void cssImport_cssInMetaInfResources_notThrow_bundleRequired()\n         Mockito.when(depScanner.getCss()).thenReturn(Collections.singletonMap(\n                 ChunkInfo.GLOBAL, Collections.singletonList(cssData)));\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         setupFrontendUtilsMock(stats);\n \n@@ -2017,7 +2016,7 @@ public void flowFrontendPackageInPackageJson_noBundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         setupFrontendUtilsMock(stats);\n \n@@ -2037,8 +2036,9 @@ public void localPackageInPackageJson_notChanged_noBundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""my-pkg\"", \""file:my-pkg\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\""my-pkg\"",\n+                \""file:my-pkg\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -2058,8 +2058,8 @@ public void localPackageInPackageJson_differentReference_bundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""my-pkg\"",\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\""my-pkg\"",\n                 \""./another-folder\"");\n \n         setupFrontendUtilsMock(stats);\n@@ -2080,8 +2080,9 @@ public void localPackageInPackageJson_parsableVersionInStats_bundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""my-pkg\"", \""1.0.0\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\""my-pkg\"",\n+                \""1.0.0\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -2101,8 +2102,9 @@ public void localPackageInStats_parsableVersionInPackageJson_bundleRebuild()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""my-pkg\"", \""file:my-pkg\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES)).put(\""my-pkg\"",\n+                \""file:my-pkg\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -2138,9 +2140,9 @@ public void bundleMissesSomeEntries_devMode_skipBundleBuildSet_noBundleRebuild()\n         Mockito.when(depScanner.getPackages())\n                 .thenReturn(Collections.emptyMap());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.7.5\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.7.5\"");\n \n         setupFrontendUtilsMock(stats);\n \n@@ -2192,24 +2194,21 @@ public void noDevFolder_compressedDevBundleExists_noBuildRequired()\n \n         File bundleSourceFolder = temporaryFolder.newFolder(\""compiled\"");\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.8.6\"");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n-                \""@polymer/paper-checkbox/paper-checkbox.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""@polymer/paper-input/paper-input.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""@vaadin/grid/theme/lumo/vaadin-grid.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""Frontend/generated/jar-resources/dndConnector-es6.js\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.8.6\"");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\""@polymer/paper-checkbox/paper-checkbox.js\"");\n+        bundleImports.add(\""@polymer/paper-input/paper-input.js\"");\n+        bundleImports.add(\""@vaadin/grid/theme/lumo/vaadin-grid.js\"");\n+        bundleImports\n+                .add(\""Frontend/generated/jar-resources/dndConnector-es6.js\"");\n \n         File configFolder = new File(bundleSourceFolder, \""config/\"");\n         configFolder.mkdir();\n \n         File statsFile = new File(configFolder, \""stats.json\"");\n-        FileUtils.write(statsFile, stats.toJson(), StandardCharsets.UTF_8);\n+        FileUtils.write(statsFile, stats.toString(), StandardCharsets.UTF_8);\n \n         DevBundleUtils.compressBundle(temporaryFolder.getRoot(),\n                 bundleSourceFolder);\n@@ -2250,24 +2249,21 @@ public void compressedProdBundleExists_noBuildRequired()\n \n         File bundleSourceFolder = temporaryFolder.newFolder(\""compiled\"");\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.8.6\"");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n-                \""@polymer/paper-checkbox/paper-checkbox.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""@polymer/paper-input/paper-input.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""@vaadin/grid/theme/lumo/vaadin-grid.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""Frontend/generated/jar-resources/dndConnector-es6.js\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.8.6\"");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\""@polymer/paper-checkbox/paper-checkbox.js\"");\n+        bundleImports.add(\""@polymer/paper-input/paper-input.js\"");\n+        bundleImports.add(\""@vaadin/grid/theme/lumo/vaadin-grid.js\"");\n+        bundleImports\n+                .add(\""Frontend/generated/jar-resources/dndConnector-es6.js\"");\n \n         File configFolder = new File(bundleSourceFolder, \""config/\"");\n         configFolder.mkdir();\n \n         File statsFile = new File(configFolder, \""stats.json\"");\n-        FileUtils.write(statsFile, stats.toJson(), StandardCharsets.UTF_8);\n+        FileUtils.write(statsFile, stats.toString(), StandardCharsets.UTF_8);\n \n         ProdBundleUtils.compressBundle(temporaryFolder.getRoot(),\n                 bundleSourceFolder);\n@@ -2306,24 +2302,21 @@ public void noFileBundleOrJar_compressedBundleExists_noBuildRequired()\n \n         File bundleSourceFolder = temporaryFolder.newFolder(\""compiled\"");\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES).put(\""@vaadin/router\"",\n-                \""1.8.6\"");\n-        JsonArray bundleImports = stats.getArray(BUNDLE_IMPORTS);\n-        bundleImports.set(bundleImports.length(),\n-                \""@polymer/paper-checkbox/paper-checkbox.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""@polymer/paper-input/paper-input.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""@vaadin/grid/theme/lumo/vaadin-grid.js\"");\n-        bundleImports.set(bundleImports.length(),\n-                \""Frontend/generated/jar-resources/dndConnector-es6.js\"");\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n+                .put(\""@vaadin/router\"", \""1.8.6\"");\n+        ArrayNode bundleImports = (ArrayNode) stats.get(BUNDLE_IMPORTS);\n+        bundleImports.add(\""@polymer/paper-checkbox/paper-checkbox.js\"");\n+        bundleImports.add(\""@polymer/paper-input/paper-input.js\"");\n+        bundleImports.add(\""@vaadin/grid/theme/lumo/vaadin-grid.js\"");\n+        bundleImports\n+                .add(\""Frontend/generated/jar-resources/dndConnector-es6.js\"");\n \n         File configFolder = new File(bundleSourceFolder, \""config/\"");\n         configFolder.mkdir();\n \n         File statsFile = new File(configFolder, \""stats.json\"");\n-        FileUtils.write(statsFile, stats.toJson(), StandardCharsets.UTF_8);\n+        FileUtils.write(statsFile, stats.toString(), StandardCharsets.UTF_8);\n \n         if (mode.isProduction()) {\n             ProdBundleUtils.compressBundle(temporaryFolder.getRoot(),\n@@ -2360,14 +2353,14 @@ public void defaultDevBundleExists_noCompressedDevBundleFile_reactDisabled_build\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         URL url = Mockito.mock(URL.class);\n         Mockito.when(\n                 finder.getResource(DEV_BUNDLE_JAR_PATH + \""config/stats.json\""))\n                 .thenReturn(url);\n         ioUtils.when(() -> IOUtils.toString(url, StandardCharsets.UTF_8))\n-                .thenReturn(stats.toJson());\n+                .thenReturn(stats.toString());\n \n         boolean needsBuild = BundleValidationUtil.needsBuild(options,\n                 depScanner, mode);\n@@ -2400,14 +2393,14 @@ public void defaultProdBundleExists_noCompressedProdBundleFile_noBuildRequired()\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         URL url = Mockito.mock(URL.class);\n         Mockito.when(\n                 finder.getResource(PROD_BUNDLE_JAR_PATH + \""config/stats.json\""))\n                 .thenReturn(url);\n         ioUtils.when(() -> IOUtils.toString(url, StandardCharsets.UTF_8))\n-                .thenReturn(stats.toJson());\n+                .thenReturn(stats.toString());\n \n         boolean needsBuild = BundleValidationUtil.needsBuild(options,\n                 depScanner, mode);\n@@ -2452,10 +2445,10 @@ public void defaultProdBundleExists_noCompressedProdBundleFileAndWithVersionsJso\n                   \""core\"": {\n                     \""vaadin-button\"": {\n                       \""jsVersion\"": \""2.0.0\"",\n-                      \""npmName\"": \""@vaadin/button\"",\n-                    },\n+                      \""npmName\"": \""@vaadin/button\""\n+                    }\n                   },\n-                  react: {\n+                  \""react\"": {\n                     \""react-components\"": {\n                       \""exclusions\"": [\""@vaadin/button\""],\n                       \""jsVersion\"": \""24.4.0\"",\n@@ -2470,8 +2463,8 @@ public void defaultProdBundleExists_noCompressedProdBundleFileAndWithVersionsJso\n         Mockito.when(finder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(versions.toURI().toURL());\n \n-        JsonObject stats = getBasicStats();\n-        stats.getObject(PACKAGE_JSON_DEPENDENCIES)\n+        ObjectNode stats = getBasicStats();\n+        ((ObjectNode) stats.get(PACKAGE_JSON_DEPENDENCIES))\n                 .put(\""@vaadin/react-components\"", \""24.4.0\"");\n \n         URL url = Mockito.mock(URL.class);\n@@ -2479,7 +2472,7 @@ public void defaultProdBundleExists_noCompressedProdBundleFileAndWithVersionsJso\n                 finder.getResource(PROD_BUNDLE_JAR_PATH + \""config/stats.json\""))\n                 .thenReturn(url);\n         ioUtils.when(() -> IOUtils.toString(url, StandardCharsets.UTF_8))\n-                .thenReturn(stats.toJson());\n+                .thenReturn(stats.toString());\n \n         boolean needsBuild = BundleValidationUtil.needsBuild(options,\n                 depScanner, mode);\n@@ -2502,14 +2495,14 @@ public void defaultProdBundleExists_noCompressedProdBundleFile_reactDisabled_bui\n         final FrontendDependenciesScanner depScanner = Mockito\n                 .mock(FrontendDependenciesScanner.class);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n \n         URL url = Mockito.mock(URL.class);\n         Mockito.when(\n                 finder.getResource(PROD_BUNDLE_JAR_PATH + \""config/stats.json\""))\n                 .thenReturn(url);\n         ioUtils.when(() -> IOUtils.toString(url, StandardCharsets.UTF_8))\n-                .thenReturn(stats.toJson());\n+                .thenReturn(stats.toString());\n \n         boolean needsBuild = BundleValidationUtil.needsBuild(options,\n                 depScanner, mode);\n@@ -2552,13 +2545,13 @@ private void createProjectFrontendFileStub() throws IOException {\n         FileUtils.write(frontendFile, \""Some codes\"", StandardCharsets.UTF_8);\n     }\n \n-    private void setupFrontendUtilsMock(JsonObject stats) {\n+    private void setupFrontendUtilsMock(ObjectNode stats) {\n         if (mode.isProduction()) {\n             prodBundleUtils\n                     .when(() -> ProdBundleUtils.findBundleStatsJson(\n                             Mockito.any(File.class),\n                             Mockito.any(ClassFinder.class)))\n-                    .thenReturn(stats.toJson());\n+                    .thenReturn(stats.toString());\n         } else {\n             devBundleUtils\n                     .when(() -> DevBundleUtils.getDevBundleFolder(Mockito.any(),\n@@ -2567,7 +2560,7 @@ private void setupFrontendUtilsMock(JsonObject stats) {\n             devBundleUtils\n                     .when(() -> DevBundleUtils.findBundleStatsJson(\n                             temporaryFolder.getRoot(), \""target\""))\n-                    .thenAnswer(q -> stats.toJson());\n+                    .thenAnswer(q -> stats.toString());\n         }\n         frontendUtils\n                 .when(() -> FrontendUtils.getJarResourceString(\n@@ -2644,25 +2637,27 @@ private boolean checkBundleRebuildForThemeComponentsCSS(\n         Mockito.when(depScanner.getThemeDefinition())\n                 .thenReturn(themeDefinition);\n \n-        JsonObject stats = getBasicStats();\n+        ObjectNode stats = getBasicStats();\n         if (useParentTheme) {\n-            stats.getObject(THEME_JSON_CONTENTS).put(\""parent-theme\"",\n+            ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\""parent-theme\"",\n                     themeContents);\n-            stats.getObject(THEME_JSON_CONTENTS).put(\""my-theme\"",\n+            ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\""my-theme\"",\n                     themeWithParentContents);\n         } else {\n-            stats.getObject(THEME_JSON_CONTENTS).put(\""my-theme\"", themeContents);\n+            ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(\""my-theme\"",\n+                    themeContents);\n         }\n-        stats.getObject(THEME_JSON_CONTENTS).put(bundleLocation, themeContents);\n+        ((ObjectNode) stats.get(THEME_JSON_CONTENTS)).put(bundleLocation,\n+                themeContents);\n         if (bundled) {\n-            stats.getObject(FRONTEND_HASHES)\n+            ((ObjectNode) stats.get(FRONTEND_HASHES))\n                     .put(themeLocation + \""vaadin-text-field.css\"",\n                             BundleValidationUtil.calculateHash(String.format(\n                                     cssTemplate,\n                                     (contentChanged) ? \""red\"" : \""blue\"")));\n         }\n         for (String path : otherBundledComponentCss) {\n-            stats.getObject(FRONTEND_HASHES).put(themeLocation + path,\n+            ((ObjectNode) stats.get(FRONTEND_HASHES)).put(themeLocation + path,\n                     BundleValidationUtil.calculateHash(\n                             \""[part=\\\""input-field\\\""]{background: green; }\""));\n         }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java\nindex 9ea02a081f0..0bd26b04921 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/CssBundlerTest.java\n@@ -5,13 +5,13 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.apache.commons.io.FileUtils;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n public class CssBundlerTest {\n \n@@ -308,18 +308,18 @@ private File writeCss(String css, String filename) throws IOException {\n         return file;\n     }\n \n-    private JsonObject getThemeJson() throws IOException {\n+    private JsonNode getThemeJson() throws IOException {\n         File file = getThemeFile(\""theme.json\"");\n         if (file.exists()) {\n-            return Json.parse(Files.readString(file.toPath()));\n+            return JacksonUtils.readTree(Files.readString(file.toPath()));\n         }\n         return null;\n     }\n \n     private void createThemeJson(String json) throws IOException {\n-        JsonObject jsonObject = Json.parse(json);\n+        JsonNode jsonObject = JacksonUtils.readTree(json);\n         File file = getThemeFile(\""theme.json\"");\n-        FileUtils.writeStringToFile(file, jsonObject.toJson(),\n+        FileUtils.writeStringToFile(file, jsonObject.toString(),\n                 StandardCharsets.UTF_8);\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesNpmVersionLockingTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesNpmVersionLockingTest.java\nindex 7e30785aa29..d511efaab42 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesNpmVersionLockingTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdatePackagesNpmVersionLockingTest.java\n@@ -21,6 +21,7 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n \n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -30,7 +31,7 @@\n import org.junit.rules.TemporaryFolder;\n import org.mockito.Mockito;\n \n-import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n@@ -38,9 +39,6 @@\n import com.vaadin.flow.testutil.FrontendStubs;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.TARGET;\n \n @Category(SlowTests.class)\n@@ -86,44 +84,42 @@ public void setup() throws Exception {\n     public void shouldLockPinnedVersion_whenExistsInDependencies()\n             throws IOException {\n         TaskUpdatePackages packageUpdater = createPackageUpdater();\n-        JsonObject packageJson = packageUpdater.getPackageJson();\n-        packageJson.getObject(DEPENDENCIES).put(TEST_DEPENDENCY,\n+        ObjectNode packageJson = packageUpdater.getPackageJson();\n+        ((ObjectNode) packageJson.get(DEPENDENCIES)).put(TEST_DEPENDENCY,\n                 PLATFORM_PINNED_DEPENDENCY_VERSION);\n-        Assert.assertNull(packageJson.getObject(OVERRIDES));\n+        Assert.assertNull(packageJson.get(OVERRIDES));\n \n         packageUpdater.generateVersionsJson(packageJson);\n         packageUpdater.lockVersionForNpm(packageJson);\n \n         Assert.assertEquals(\""$\"" + TEST_DEPENDENCY,\n-                packageJson.getObject(OVERRIDES).getString(TEST_DEPENDENCY));\n+                packageJson.get(OVERRIDES).get(TEST_DEPENDENCY).textValue());\n     }\n \n     @Test\n     public void shouldNotLockPinnedVersion_whenNotExistsInDependencies()\n             throws IOException {\n         TaskUpdatePackages packageUpdater = createPackageUpdater();\n-        JsonObject packageJson = packageUpdater.getPackageJson();\n+        ObjectNode packageJson = packageUpdater.getPackageJson();\n \n-        Assert.assertNull(packageJson.getObject(OVERRIDES));\n-        Assert.assertNull(\n-                packageJson.getObject(DEPENDENCIES).get(TEST_DEPENDENCY));\n+        Assert.assertNull(packageJson.get(OVERRIDES));\n+        Assert.assertNull(packageJson.get(DEPENDENCIES).get(TEST_DEPENDENCY));\n \n         packageUpdater.generateVersionsJson(packageJson);\n         packageUpdater.lockVersionForNpm(packageJson);\n \n-        Assert.assertNull(\n-                packageJson.getObject(OVERRIDES).get(TEST_DEPENDENCY));\n+        Assert.assertNull(packageJson.get(OVERRIDES).get(TEST_DEPENDENCY));\n     }\n \n     @Test\n     public void shouldNotUpdatesOverrides_whenHasUserModification()\n             throws IOException {\n         TaskUpdatePackages packageUpdater = createPackageUpdater();\n-        JsonObject packageJson = packageUpdater.getPackageJson();\n-        JsonObject overridesSection = Json.createObject();\n-        packageJson.put(OVERRIDES, overridesSection);\n+        ObjectNode packageJson = packageUpdater.getPackageJson();\n+        ObjectNode overridesSection = JacksonUtils.createObjectNode();\n+        packageJson.set(OVERRIDES, overridesSection);\n \n-        packageJson.getObject(DEPENDENCIES).put(TEST_DEPENDENCY,\n+        ((ObjectNode) packageJson.get(DEPENDENCIES)).put(TEST_DEPENDENCY,\n                 USER_PINNED_DEPENDENCY_VERSION);\n         overridesSection.put(TEST_DEPENDENCY, USER_PINNED_DEPENDENCY_VERSION);\n \n@@ -131,7 +127,7 @@ public void shouldNotUpdatesOverrides_whenHasUserModification()\n         packageUpdater.lockVersionForNpm(packageJson);\n \n         Assert.assertEquals(USER_PINNED_DEPENDENCY_VERSION,\n-                packageJson.getObject(OVERRIDES).getString(TEST_DEPENDENCY));\n+                packageJson.get(OVERRIDES).get(TEST_DEPENDENCY).textValue());\n     }\n \n     @Test\n@@ -142,21 +138,21 @@ public void shouldRemoveUnusedLocking() throws IOException {\n                 .thenReturn(null);\n \n         TaskUpdatePackages packageUpdater = createPackageUpdater(true);\n-        JsonObject packageJson = packageUpdater.getPackageJson();\n-        packageJson.getObject(DEPENDENCIES).put(TEST_DEPENDENCY,\n+        ObjectNode packageJson = packageUpdater.getPackageJson();\n+        ((ObjectNode) packageJson.get(DEPENDENCIES)).put(TEST_DEPENDENCY,\n                 PLATFORM_PINNED_DEPENDENCY_VERSION);\n-        Assert.assertNull(packageJson.getObject(OVERRIDES));\n+        Assert.assertNull(packageJson.get(OVERRIDES));\n \n         packageUpdater.generateVersionsJson(packageJson);\n-        Assert.assertTrue(\n-                packageUpdater.versionsJson.toJson().contains(TEST_DEPENDENCY));\n+        Assert.assertTrue(packageUpdater.versionsJson.toString()\n+                .contains(TEST_DEPENDENCY));\n \n-        packageJson.getObject(DEPENDENCIES).remove(TEST_DEPENDENCY);\n+        ((ObjectNode) packageJson.get(DEPENDENCIES)).remove(TEST_DEPENDENCY);\n \n         packageUpdater.versionsJson = null;\n         packageUpdater.generateVersionsJson(packageJson);\n-        Assert.assertFalse(\n-                packageUpdater.versionsJson.toJson().contains(TEST_DEPENDENCY));\n+        Assert.assertFalse(packageUpdater.versionsJson.toString()\n+                .contains(TEST_DEPENDENCY));\n \n     }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\nindex 7360cd867a8..710743f1b56 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/NodeUpdaterTest.java\n@@ -23,6 +23,8 @@\n import java.util.Map;\n import java.util.Set;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.FileUtils;\n import org.hamcrest.MatcherAssert;\n import org.hamcrest.core.StringContains;\n@@ -37,15 +39,12 @@\n import org.slf4j.LoggerFactory;\n \n import com.vaadin.experimental.FeatureFlags;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependencies;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonException;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.TARGET;\n import static java.nio.charset.StandardCharsets.UTF_8;\n@@ -191,7 +190,7 @@ private Set<String> getCommonDevDeps() {\n \n     @Test\n     public void updateMainDefaultDependencies_polymerVersionIsNull_useDefault() {\n-        JsonObject object = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n         nodeUpdater.addVaadinDefaultsToJson(object);\n         nodeUpdater.updateDefaultDependencies(object);\n \n@@ -201,10 +200,10 @@ public void updateMainDefaultDependencies_polymerVersionIsNull_useDefault() {\n \n     @Test\n     public void updateMainDefaultDependencies_polymerVersionIsProvidedByUser_useProvided() {\n-        JsonObject object = Json.createObject();\n-        JsonObject dependencies = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n+        ObjectNode dependencies = JacksonUtils.createObjectNode();\n         dependencies.put(\""@polymer/polymer\"", \""4.0.0\"");\n-        object.put(NodeUpdater.DEPENDENCIES, dependencies);\n+        object.set(NodeUpdater.DEPENDENCIES, dependencies);\n         nodeUpdater.addVaadinDefaultsToJson(object);\n \n         nodeUpdater.updateDefaultDependencies(object);\n@@ -215,56 +214,61 @@ public void updateMainDefaultDependencies_polymerVersionIsProvidedByUser_useProv\n \n     @Test\n     public void updateMainDefaultDependencies_vaadinIsProvidedByUser_useDefault() {\n-        JsonObject object = Json.createObject();\n+        ObjectNode object = JacksonUtils.createObjectNode();\n \n-        JsonObject vaadin = Json.createObject();\n+        ObjectNode vaadin = JacksonUtils.createObjectNode();\n         vaadin.put(\""disableUsageStatistics\"", true);\n-        object.put(NodeUpdater.VAADIN_DEP_KEY, vaadin);\n+        object.set(NodeUpdater.VAADIN_DEP_KEY, vaadin);\n \n         nodeUpdater.addVaadinDefaultsToJson(object);\n         nodeUpdater.updateDefaultDependencies(object);\n \n         Assert.assertEquals(POLYMER_VERSION, getPolymerVersion(object));\n-        Assert.assertEquals(POLYMER_VERSION, getPolymerVersion(\n-                object.getObject(NodeUpdater.VAADIN_DEP_KEY)));\n+        Assert.assertEquals(POLYMER_VERSION,\n+                getPolymerVersion(object.get(NodeUpdater.VAADIN_DEP_KEY)));\n     }\n \n     @Test\n     public void updateDefaultDependencies_olderVersionsAreUpdated()\n             throws IOException {\n-        JsonObject packageJson = nodeUpdater.getPackageJson();\n-        packageJson.put(NodeUpdater.DEPENDENCIES, Json.createObject());\n-        packageJson.put(NodeUpdater.DEV_DEPENDENCIES, Json.createObject());\n-        packageJson.getObject(NodeUpdater.DEV_DEPENDENCIES).put(\""glob\"",\n+        ObjectNode packageJson = nodeUpdater.getPackageJson();\n+        packageJson.set(NodeUpdater.DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        packageJson.set(NodeUpdater.DEV_DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        ((ObjectNode) packageJson.get(NodeUpdater.DEV_DEPENDENCIES)).put(\""glob\"",\n                 \""7.0.0\"");\n         nodeUpdater.updateDefaultDependencies(packageJson);\n \n         Assert.assertEquals(\""11.0.1\"", packageJson\n-                .getObject(NodeUpdater.DEV_DEPENDENCIES).getString(\""glob\""));\n+                .get(NodeUpdater.DEV_DEPENDENCIES).get(\""glob\"").textValue());\n     }\n \n     @Test // #6907 test when user has set newer versions\n     public void updateDefaultDependencies_newerVersionsAreNotChanged()\n             throws IOException {\n-        JsonObject packageJson = nodeUpdater.getPackageJson();\n-        packageJson.put(NodeUpdater.DEPENDENCIES, Json.createObject());\n-        packageJson.put(NodeUpdater.DEV_DEPENDENCIES, Json.createObject());\n-        packageJson.getObject(NodeUpdater.DEV_DEPENDENCIES).put(\""vite\"",\n+        ObjectNode packageJson = nodeUpdater.getPackageJson();\n+        packageJson.set(NodeUpdater.DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        packageJson.set(NodeUpdater.DEV_DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        ((ObjectNode) packageJson.get(NodeUpdater.DEV_DEPENDENCIES)).put(\""vite\"",\n                 \""78.2.3\"");\n         nodeUpdater.updateDefaultDependencies(packageJson);\n \n         Assert.assertEquals(\""78.2.3\"", packageJson\n-                .getObject(NodeUpdater.DEV_DEPENDENCIES).getString(\""vite\""));\n+                .get(NodeUpdater.DEV_DEPENDENCIES).get(\""vite\"").textValue());\n     }\n \n     @Test\n     public void shouldUpdateExistingLocalFormPackageToNpmPackage() {\n-        JsonObject packageJson = Json.createObject();\n-        JsonObject dependencies = Json.createObject();\n-        packageJson.put(NodeUpdater.DEPENDENCIES, dependencies);\n-        JsonObject vaadinDependencies = Json.createObject();\n-        vaadinDependencies.put(NodeUpdater.DEPENDENCIES, Json.createObject());\n-        packageJson.put(NodeUpdater.VAADIN_DEP_KEY, vaadinDependencies);\n+        ObjectNode packageJson = JacksonUtils.createObjectNode();\n+        ObjectNode dependencies = JacksonUtils.createObjectNode();\n+        packageJson.set(NodeUpdater.DEPENDENCIES, dependencies);\n+        ObjectNode vaadinDependencies = JacksonUtils.createObjectNode();\n+        vaadinDependencies.set(NodeUpdater.DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        packageJson.set(NodeUpdater.VAADIN_DEP_KEY, vaadinDependencies);\n \n         String formPackage = \""@vaadin/form\"";\n         String legecyVersion = \""./target/flow-frontend/form\"";\n@@ -276,17 +280,18 @@ public void shouldUpdateExistingLocalFormPackageToNpmPackage() {\n                 formPackage, newVersion);\n \n         Assert.assertEquals(newVersion, packageJson\n-                .getObject(NodeUpdater.DEPENDENCIES).getString(formPackage));\n+                .get(NodeUpdater.DEPENDENCIES).get(formPackage).textValue());\n     }\n \n     @Test\n     public void shouldSkipUpdatingNonParsableVersions() {\n-        JsonObject packageJson = Json.createObject();\n-        JsonObject dependencies = Json.createObject();\n-        packageJson.put(NodeUpdater.DEPENDENCIES, dependencies);\n-        JsonObject vaadinDependencies = Json.createObject();\n-        vaadinDependencies.put(NodeUpdater.DEPENDENCIES, Json.createObject());\n-        packageJson.put(NodeUpdater.VAADIN_DEP_KEY, vaadinDependencies);\n+        ObjectNode packageJson = JacksonUtils.createObjectNode();\n+        ObjectNode dependencies = JacksonUtils.createObjectNode();\n+        packageJson.set(NodeUpdater.DEPENDENCIES, dependencies);\n+        ObjectNode vaadinDependencies = JacksonUtils.createObjectNode();\n+        vaadinDependencies.set(NodeUpdater.DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        packageJson.set(NodeUpdater.VAADIN_DEP_KEY, vaadinDependencies);\n \n         String formPackage = \""@vaadin/form\"";\n         String existingVersion = \""../../../some/local/path\"";\n@@ -298,17 +303,18 @@ public void shouldSkipUpdatingNonParsableVersions() {\n                 formPackage, newVersion);\n \n         Assert.assertEquals(existingVersion, packageJson\n-                .getObject(NodeUpdater.DEPENDENCIES).getString(formPackage));\n+                .get(NodeUpdater.DEPENDENCIES).get(formPackage).textValue());\n     }\n \n     @Test\n     public void canUpdateNonParseableVersions() {\n-        JsonObject packageJson = Json.createObject();\n-        JsonObject dependencies = Json.createObject();\n-        packageJson.put(NodeUpdater.DEPENDENCIES, dependencies);\n-        JsonObject vaadinDependencies = Json.createObject();\n-        vaadinDependencies.put(NodeUpdater.DEPENDENCIES, Json.createObject());\n-        packageJson.put(NodeUpdater.VAADIN_DEP_KEY, vaadinDependencies);\n+        ObjectNode packageJson = JacksonUtils.createObjectNode();\n+        ObjectNode dependencies = JacksonUtils.createObjectNode();\n+        packageJson.set(NodeUpdater.DEPENDENCIES, dependencies);\n+        ObjectNode vaadinDependencies = JacksonUtils.createObjectNode();\n+        vaadinDependencies.set(NodeUpdater.DEPENDENCIES,\n+                JacksonUtils.createObjectNode());\n+        packageJson.set(NodeUpdater.VAADIN_DEP_KEY, vaadinDependencies);\n \n         String pkg = \""mypackage\"";\n         String existingVersion = \""./some/path\"";\n@@ -319,7 +325,7 @@ public void canUpdateNonParseableVersions() {\n                 existingVersion);\n \n         Assert.assertEquals(existingVersion,\n-                packageJson.getObject(NodeUpdater.DEPENDENCIES).getString(pkg));\n+                packageJson.get(NodeUpdater.DEPENDENCIES).get(pkg).textValue());\n \n     }\n \n@@ -331,7 +337,7 @@ public void getJsonFileContent_incorrectPackageJsonContent_throwsExceptionWithFi\n         FileUtils.writeStringToFile(brokenPackageJsonFile,\n                 \""{ some broken json \"", UTF_8);\n \n-        JsonException exception = Assert.assertThrows(JsonException.class,\n+        RuntimeException exception = Assert.assertThrows(RuntimeException.class,\n                 () -> NodeUpdater.getJsonFileContent(brokenPackageJsonFile));\n \n         MatcherAssert.assertThat(exception.getMessage(),\n@@ -354,18 +360,18 @@ public void removedAllOldAndExistingPlugins() throws IOException {\n                         }\n                         \""\""\"");\n         packageJsonWriter.close();\n-        JsonObject actualDevDeps = nodeUpdater.getPackageJson()\n-                .getObject(NodeUpdater.DEV_DEPENDENCIES);\n-        Assert.assertFalse(actualDevDeps.hasKey(\""some-old-plugin\""));\n+        ObjectNode actualDevDeps = (ObjectNode) nodeUpdater.getPackageJson()\n+                .get(NodeUpdater.DEV_DEPENDENCIES);\n+        Assert.assertFalse(actualDevDeps.has(\""some-old-plugin\""));\n         Assert.assertFalse(\n-                actualDevDeps.hasKey(\""@vaadin/application-theme-plugin\""));\n+                actualDevDeps.has(\""@vaadin/application-theme-plugin\""));\n     }\n \n     @Test\n     public void generateVersionsJson_noVersions_noDevDeps_versionsGeneratedFromPackageJson()\n             throws IOException {\n-        nodeUpdater.generateVersionsJson(Json.createObject());\n-        Assert.assertEquals(\""{}\"", nodeUpdater.versionsJson.toJson());\n+        nodeUpdater.generateVersionsJson(JacksonUtils.createObjectNode());\n+        Assert.assertEquals(\""{}\"", nodeUpdater.versionsJson.toString());\n     }\n \n     @Test\n@@ -384,7 +390,7 @@ public void generateVersionsJson_versionsGeneratedFromPackageJson_containsBothDe\n                     \""dependencies\"": {\n                       \""lit\"": \""2.0.0\"",\n                       \""@vaadin/router\"": \""1.7.5\"",\n-                      \""@polymer/polymer\"": \""3.4.1\"",\n+                      \""@polymer/polymer\"": \""3.4.1\""\n                     },\n                     \""devDependencies\"": {\n                       \""css-loader\"": \""4.2.1\"",\n@@ -394,7 +400,7 @@ public void generateVersionsJson_versionsGeneratedFromPackageJson_containsBothDe\n                   \""dependencies\"": {\n                     \""lit\"": \""2.0.0\"",\n                     \""@vaadin/router\"": \""1.7.5\"",\n-                    \""@polymer/polymer\"": \""3.4.1\"",\n+                    \""@polymer/polymer\"": \""3.4.1\""\n                   },\n                   \""devDependencies\"": {\n                     \""css-loader\"": \""4.2.1\"",\n@@ -404,11 +410,11 @@ public void generateVersionsJson_versionsGeneratedFromPackageJson_containsBothDe\n                 \""\""\"", StandardCharsets.UTF_8);\n         // @formatter:on\n \n-        nodeUpdater.generateVersionsJson(Json.parse(FileUtils\n+        nodeUpdater.generateVersionsJson(JacksonUtils.readTree(FileUtils\n                 .readFileToString(packageJson, StandardCharsets.UTF_8)));\n         Assert.assertEquals(\n                 \""{\\\""lit\\\"":\\\""2.0.0\\\"",\\\""@vaadin/router\\\"":\\\""1.7.5\\\"",\\\""@polymer/polymer\\\"":\\\""3.4.1\\\""}\"",\n-                nodeUpdater.versionsJson.toJson());\n+                nodeUpdater.versionsJson.toString());\n     }\n \n     @Test\n@@ -427,9 +433,9 @@ public void testGetPlatformPinnedDependencies_vaadinCoreVersionIsNotPresent_outp\n             Mockito.when(finder.getResource(Constants.VAADIN_VERSIONS_JSON))\n                     .thenReturn(null);\n \n-            JsonObject pinnedVersions = nodeUpdater\n+            ObjectNode pinnedVersions = nodeUpdater\n                     .getPlatformPinnedDependencies();\n-            Assert.assertEquals(0, pinnedVersions.keys().length);\n+            Assert.assertEquals(0, JacksonUtils.getKeys(pinnedVersions).size());\n \n             Mockito.verify(logger, Mockito.times(1)).info(\n                     \""Couldn't find {} file to pin dependency versions for core components.\""\n@@ -443,24 +449,23 @@ public void testGetPlatformPinnedDependencies_onlyVaadinCoreVersionIsPresent_out\n             throws IOException {\n         File coreVersionsFile = File.createTempFile(\""vaadin-core-versions\"",\n                 \"".json\"", temporaryFolder.newFolder());\n-        JsonObject mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n-        Assert.assertTrue(mockedVaadinCoreJson.hasKey(\""core\""));\n-        Assert.assertTrue(\n-                mockedVaadinCoreJson.getObject(\""core\"").hasKey(\""button\""));\n-        Assert.assertFalse(mockedVaadinCoreJson.hasKey(\""vaadin\""));\n+        ObjectNode mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n+        Assert.assertTrue(mockedVaadinCoreJson.has(\""core\""));\n+        Assert.assertTrue(mockedVaadinCoreJson.get(\""core\"").has(\""button\""));\n+        Assert.assertFalse(mockedVaadinCoreJson.has(\""vaadin\""));\n \n-        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toJson(),\n+        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toString(),\n                 StandardCharsets.UTF_8);\n         Mockito.when(finder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(coreVersionsFile.toURI().toURL());\n         Mockito.when(finder.getResource(Constants.VAADIN_VERSIONS_JSON))\n                 .thenReturn(null);\n \n-        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+        ObjectNode pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n \n-        Assert.assertTrue(pinnedVersions.hasKey(\""@vaadin/button\""));\n-        Assert.assertFalse(pinnedVersions.hasKey(\""@vaadin/grid-pro\""));\n-        Assert.assertFalse(pinnedVersions.hasKey(\""@vaadin/vaadin-grid-pro\""));\n+        Assert.assertTrue(pinnedVersions.has(\""@vaadin/button\""));\n+        Assert.assertFalse(pinnedVersions.has(\""@vaadin/grid-pro\""));\n+        Assert.assertFalse(pinnedVersions.has(\""@vaadin/vaadin-grid-pro\""));\n     }\n \n     @Test\n@@ -468,33 +473,32 @@ public void testGetPlatformPinnedDependencies_reactNotAvailable_noReactComponent\n             throws IOException {\n         File coreVersionsFile = File.createTempFile(\""vaadin-core-versions\"",\n                 \"".json\"", temporaryFolder.newFolder());\n-        JsonObject mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n+        ObjectNode mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n \n-        JsonObject reactComponents = Json.createObject();\n-        JsonObject reactData = Json.createObject();\n+        ObjectNode reactComponents = JacksonUtils.createObjectNode();\n+        ObjectNode reactData = JacksonUtils.createObjectNode();\n         reactData.put(\""jsVersion\"", \""24.4.0-alpha13\"");\n         reactData.put(\""npmName\"", \""@vaadin/react-components\"");\n \n-        reactComponents.put(\""react-components\"", reactData);\n+        reactComponents.set(\""react-components\"", reactData);\n \n-        mockedVaadinCoreJson.put(\""react\"", reactComponents);\n+        mockedVaadinCoreJson.set(\""react\"", reactComponents);\n \n-        Assert.assertTrue(mockedVaadinCoreJson.hasKey(\""core\""));\n-        Assert.assertTrue(\n-                mockedVaadinCoreJson.getObject(\""core\"").hasKey(\""button\""));\n-        Assert.assertFalse(mockedVaadinCoreJson.hasKey(\""vaadin\""));\n+        Assert.assertTrue(mockedVaadinCoreJson.has(\""core\""));\n+        Assert.assertTrue(mockedVaadinCoreJson.get(\""core\"").has(\""button\""));\n+        Assert.assertFalse(mockedVaadinCoreJson.has(\""vaadin\""));\n \n-        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toJson(),\n+        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toString(),\n                 StandardCharsets.UTF_8);\n         Mockito.when(finder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(coreVersionsFile.toURI().toURL());\n         Mockito.when(finder.getResource(Constants.VAADIN_VERSIONS_JSON))\n                 .thenReturn(null);\n \n-        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+        ObjectNode pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n \n-        Assert.assertTrue(pinnedVersions.hasKey(\""@vaadin/button\""));\n-        Assert.assertFalse(pinnedVersions.hasKey(\""react-components\""));\n+        Assert.assertTrue(pinnedVersions.has(\""@vaadin/button\""));\n+        Assert.assertFalse(pinnedVersions.has(\""react-components\""));\n     }\n \n     @Test\n@@ -502,12 +506,11 @@ public void testGetPlatformPinnedDependencies_reactAvailable_containsReactCompon\n             throws IOException, ClassNotFoundException {\n         generateTestDataForReactComponents();\n \n-        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+        ObjectNode pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n \n-        Assert.assertTrue(pinnedVersions.hasKey(\""@vaadin/button\""));\n-        Assert.assertTrue(pinnedVersions.hasKey(\""@vaadin/react-components\""));\n-        Assert.assertTrue(\n-                pinnedVersions.hasKey(\""@vaadin/react-components-pro\""));\n+        Assert.assertTrue(pinnedVersions.has(\""@vaadin/button\""));\n+        Assert.assertTrue(pinnedVersions.has(\""@vaadin/react-components\""));\n+        Assert.assertTrue(pinnedVersions.has(\""@vaadin/react-components-pro\""));\n     }\n \n     @Test\n@@ -516,13 +519,12 @@ public void testGetPlatformPinnedDependencies_reactAvailable_excludeWebComponent\n         options.withNpmExcludeWebComponents(true);\n         generateTestDataForReactComponents();\n \n-        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+        ObjectNode pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n \n         // @vaadin/button doesn't have 'mode' set, so it should be included\n-        Assert.assertTrue(pinnedVersions.hasKey(\""@vaadin/button\""));\n-        Assert.assertFalse(pinnedVersions.hasKey(\""@vaadin/react-components\""));\n-        Assert.assertFalse(\n-                pinnedVersions.hasKey(\""@vaadin/react-components-pro\""));\n+        Assert.assertTrue(pinnedVersions.has(\""@vaadin/button\""));\n+        Assert.assertFalse(pinnedVersions.has(\""@vaadin/react-components\""));\n+        Assert.assertFalse(pinnedVersions.has(\""@vaadin/react-components-pro\""));\n     }\n \n     @Test\n@@ -532,13 +534,12 @@ public void testGetPlatformPinnedDependencies_reactDisabled_excludeWebComponents\n         options.withNpmExcludeWebComponents(true);\n         generateTestDataForReactComponents();\n \n-        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+        ObjectNode pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n \n         // @vaadin/button doesn't have 'mode' set, so it should be included\n-        Assert.assertTrue(pinnedVersions.hasKey(\""@vaadin/button\""));\n-        Assert.assertFalse(pinnedVersions.hasKey(\""@vaadin/react-components\""));\n-        Assert.assertFalse(\n-                pinnedVersions.hasKey(\""@vaadin/react-components-pro\""));\n+        Assert.assertTrue(pinnedVersions.has(\""@vaadin/button\""));\n+        Assert.assertFalse(pinnedVersions.has(\""@vaadin/react-components\""));\n+        Assert.assertFalse(pinnedVersions.has(\""@vaadin/react-components-pro\""));\n     }\n \n     private void generateTestDataForReactComponents()\n@@ -547,38 +548,37 @@ private void generateTestDataForReactComponents()\n                 \"".json\"", temporaryFolder.newFolder());\n         File vaadinVersionsFile = File.createTempFile(\""vaadin-versions\"",\n                 \"".json\"", temporaryFolder.newFolder());\n-        JsonObject mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n+        ObjectNode mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n \n-        JsonObject reactComponents = Json.createObject();\n-        JsonObject reactData = Json.createObject();\n+        ObjectNode reactComponents = JacksonUtils.createObjectNode();\n+        ObjectNode reactData = JacksonUtils.createObjectNode();\n         reactData.put(\""jsVersion\"", \""24.4.0-alpha13\"");\n         reactData.put(\""npmName\"", \""@vaadin/react-components\"");\n         reactData.put(\""mode\"", \""react\"");\n \n-        reactComponents.put(\""react-components\"", reactData);\n+        reactComponents.set(\""react-components\"", reactData);\n \n-        mockedVaadinCoreJson.put(\""react\"", reactComponents);\n+        mockedVaadinCoreJson.set(\""react\"", reactComponents);\n \n-        Assert.assertTrue(mockedVaadinCoreJson.hasKey(\""core\""));\n-        Assert.assertTrue(\n-                mockedVaadinCoreJson.getObject(\""core\"").hasKey(\""button\""));\n-        Assert.assertFalse(mockedVaadinCoreJson.hasKey(\""vaadin\""));\n+        Assert.assertTrue(mockedVaadinCoreJson.has(\""core\""));\n+        Assert.assertTrue(mockedVaadinCoreJson.get(\""core\"").has(\""button\""));\n+        Assert.assertFalse(mockedVaadinCoreJson.has(\""vaadin\""));\n \n-        JsonObject mockedVaadinJson = getMockVaadinVersionsJson();\n+        ObjectNode mockedVaadinJson = getMockVaadinVersionsJson();\n \n-        reactComponents = Json.createObject();\n-        reactData = Json.createObject();\n+        reactComponents = JacksonUtils.createObjectNode();\n+        reactData = JacksonUtils.createObjectNode();\n         reactData.put(\""jsVersion\"", \""24.4.0-alpha13\"");\n         reactData.put(\""npmName\"", \""@vaadin/react-components-pro\"");\n         reactData.put(\""mode\"", \""react\"");\n \n-        reactComponents.put(\""react-components-pro\"", reactData);\n+        reactComponents.set(\""react-components-pro\"", reactData);\n \n-        mockedVaadinJson.put(\""react\"", reactComponents);\n+        mockedVaadinJson.set(\""react\"", reactComponents);\n \n-        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toJson(),\n+        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toString(),\n                 StandardCharsets.UTF_8);\n-        FileUtils.write(vaadinVersionsFile, mockedVaadinJson.toJson(),\n+        FileUtils.write(vaadinVersionsFile, mockedVaadinJson.toString(),\n                 StandardCharsets.UTF_8);\n         Mockito.when(finder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(coreVersionsFile.toURI().toURL());\n@@ -594,37 +594,35 @@ public void testGetPlatformPinnedDependencies_VaadinAndVaadinCoreVersionsArePres\n             throws IOException {\n         File coreVersionsFile = File.createTempFile(\""vaadin-core-versions\"",\n                 \"".json\"", temporaryFolder.newFolder());\n-        JsonObject mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n-        Assert.assertTrue(mockedVaadinCoreJson.hasKey(\""core\""));\n-        Assert.assertTrue(\n-                mockedVaadinCoreJson.getObject(\""core\"").hasKey(\""button\""));\n-        Assert.assertFalse(mockedVaadinCoreJson.hasKey(\""vaadin\""));\n+        JsonNode mockedVaadinCoreJson = getMockVaadinCoreVersionsJson();\n+        Assert.assertTrue(mockedVaadinCoreJson.has(\""core\""));\n+        Assert.assertTrue(mockedVaadinCoreJson.get(\""core\"").has(\""button\""));\n+        Assert.assertFalse(mockedVaadinCoreJson.has(\""vaadin\""));\n \n-        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toJson(),\n+        FileUtils.write(coreVersionsFile, mockedVaadinCoreJson.toString(),\n                 StandardCharsets.UTF_8);\n         Mockito.when(finder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(coreVersionsFile.toURI().toURL());\n \n         File vaadinVersionsFile = File.createTempFile(\""vaadin-versions\"",\n                 \"".json\"", temporaryFolder.newFolder());\n-        JsonObject mockedVaadinJson = getMockVaadinVersionsJson();\n-        Assert.assertFalse(mockedVaadinJson.hasKey(\""core\""));\n-        Assert.assertTrue(mockedVaadinJson.hasKey(\""vaadin\""));\n+        JsonNode mockedVaadinJson = getMockVaadinVersionsJson();\n+        Assert.assertFalse(mockedVaadinJson.has(\""core\""));\n+        Assert.assertTrue(mockedVaadinJson.has(\""vaadin\""));\n+        Assert.assertTrue(mockedVaadinJson.get(\""vaadin\"").has(\""grid-pro\""));\n         Assert.assertTrue(\n-                mockedVaadinJson.getObject(\""vaadin\"").hasKey(\""grid-pro\""));\n-        Assert.assertTrue(\n-                mockedVaadinJson.getObject(\""vaadin\"").hasKey(\""vaadin-grid-pro\""));\n+                mockedVaadinJson.get(\""vaadin\"").has(\""vaadin-grid-pro\""));\n \n-        FileUtils.write(vaadinVersionsFile, mockedVaadinJson.toJson(),\n+        FileUtils.write(vaadinVersionsFile, mockedVaadinJson.toString(),\n                 StandardCharsets.UTF_8);\n         Mockito.when(finder.getResource(Constants.VAADIN_VERSIONS_JSON))\n                 .thenReturn(vaadinVersionsFile.toURI().toURL());\n \n-        JsonObject pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n+        ObjectNode pinnedVersions = nodeUpdater.getPlatformPinnedDependencies();\n \n-        Assert.assertTrue(pinnedVersions.hasKey(\""@vaadin/button\""));\n-        Assert.assertTrue(pinnedVersions.hasKey(\""@vaadin/grid-pro\""));\n-        Assert.assertTrue(pinnedVersions.hasKey(\""@vaadin/vaadin-grid-pro\""));\n+        Assert.assertTrue(pinnedVersions.has(\""@vaadin/button\""));\n+        Assert.assertTrue(pinnedVersions.has(\""@vaadin/grid-pro\""));\n+        Assert.assertTrue(pinnedVersions.has(\""@vaadin/vaadin-grid-pro\""));\n     }\n \n     @Test\n@@ -723,10 +721,10 @@ public void readPackageJson_nonExistingFile_doesNotThrow()\n     @Test\n     public void readPackageJson_nonExistingFile_jsonContainsDepsAndDevDeps()\n             throws IOException {\n-        JsonObject jsonObject = nodeUpdater\n+        JsonNode jsonObject = nodeUpdater\n                 .readPackageJson(\""non-existing-folder\"");\n-        Assert.assertTrue(jsonObject.hasKey(\""dependencies\""));\n-        Assert.assertTrue(jsonObject.hasKey(\""devDependencies\""));\n+        Assert.assertTrue(jsonObject.has(\""dependencies\""));\n+        Assert.assertTrue(jsonObject.has(\""devDependencies\""));\n     }\n \n     @Test\n@@ -760,21 +758,21 @@ Logger log() {\n         Mockito.verifyNoInteractions(log);\n     }\n \n-    private String getPolymerVersion(JsonObject object) {\n-        JsonObject deps = object.get(\""dependencies\"");\n-        return deps.getString(\""@polymer/polymer\"");\n+    private String getPolymerVersion(JsonNode object) {\n+        JsonNode deps = object.get(\""dependencies\"");\n+        return deps.get(\""@polymer/polymer\"").textValue();\n     }\n \n-    private JsonObject getMockVaadinCoreVersionsJson() {\n+    private ObjectNode getMockVaadinCoreVersionsJson() {\n         // @formatter:off\n-        return Json.parse(\n+        return (ObjectNode) JacksonUtils.readTree(\n                 \""\""\""\n                 {\n                     \""bundles\"": {\n                         \""vaadin\"": {\n                             \""jsVersion\"": \""23.2.0\"",\n                             \""npmName\"": \""@vaadin/bundles\""\n-                        },\n+                        }\n                     },\n                     \""core\"": {\n                         \""accordion\"": {\n@@ -800,7 +798,7 @@ private JsonObject getMockVaadinCoreVersionsJson() {\n                         \""checkbox\"": {\n                             \""jsVersion\"": \""23.2.0\"",\n                             \""npmName\"": \""@vaadin/checkbox\""\n-                        },\n+                        }\n                     },\n                     \""platform\"": \""23.2.0\""\n                 }\n@@ -809,9 +807,9 @@ private JsonObject getMockVaadinCoreVersionsJson() {\n         // @formatter:on\n     }\n \n-    private JsonObject getMockVaadinVersionsJson() {\n+    private ObjectNode getMockVaadinVersionsJson() {\n         // @formatter:off\n-        return Json.parse(\n+        return (ObjectNode) JacksonUtils.readTree(\n                 \""\""\""\n                 {\n                     \""vaadin\"": {\n@@ -847,7 +845,7 @@ private JsonObject getMockVaadinVersionsJson() {\n                             \""jsVersion\"": \""23.2.0\"",\n                             \""npmName\"": \""@vaadin/vaadin-grid-pro\"",\n                             \""pro\"": true\n-                        },\n+                        }\n                     },\n                     \""platform\"": \""23.2.0\""\n                 }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCopyFrontendFilesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCopyFrontendFilesTest.java\nindex 36dea463f85..c54eba0a8da 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCopyFrontendFilesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskCopyFrontendFilesTest.java\n@@ -24,6 +24,7 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Rule;\n@@ -33,8 +34,6 @@\n import com.vaadin.flow.testutil.TestUtils;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.TARGET;\n \n@@ -88,9 +87,9 @@ public void should_createPackageJson() throws IOException {\n         task.execute();\n         Assert.assertTrue(new File(npmFolder, PACKAGE_JSON).exists());\n         Assert.assertFalse(new File(generatedFolder, PACKAGE_JSON).exists());\n-        JsonObject deps = task.getPackageJson().getObject(\""dependencies\"");\n-        Assert.assertFalse(deps.hasKey(NodeUpdater.DEP_NAME_FLOW_DEPS));\n-        Assert.assertFalse(deps.hasKey(NodeUpdater.DEP_NAME_FLOW_JARS));\n+        JsonNode deps = task.getPackageJson().get(\""dependencies\"");\n+        Assert.assertFalse(deps.has(NodeUpdater.DEP_NAME_FLOW_DEPS));\n+        Assert.assertFalse(deps.has(NodeUpdater.DEP_NAME_FLOW_JARS));\n     }\n \n     private void should_collectJsAndCssFilesFromJars(String jarFile,\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPluginsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPluginsTest.java\nindex 62c9fc4cfd2..6f64039aa07 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPluginsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskInstallFrontendBuildPluginsTest.java\n@@ -24,6 +24,8 @@\n import java.util.List;\n import java.util.stream.Collectors;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.FilenameUtils;\n import org.junit.Assert;\n@@ -34,13 +36,10 @@\n import org.mockito.Mockito;\n \n import com.vaadin.flow.di.Lookup;\n-import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.frontend.scanner.FrontendDependencies;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-import elemental.json.JsonObject;\n import static com.vaadin.flow.server.Constants.TARGET;\n import static com.vaadin.flow.server.frontend.NodeUpdater.DEV_DEPENDENCIES;\n import static com.vaadin.flow.server.frontend.FrontendPluginsUtil.PLUGIN_TARGET;\n@@ -107,13 +106,12 @@ public void execute() {\n \n         task.execute();\n \n-        final JsonObject packageJson = nodeUpdater.getPackageJson();\n+        final JsonNode packageJson = nodeUpdater.getPackageJson();\n \n-        final JsonObject devDependencies = packageJson\n-                .getObject(DEV_DEPENDENCIES);\n+        final JsonNode devDependencies = packageJson.get(DEV_DEPENDENCIES);\n         for (String plugin : FrontendPluginsUtil.getPlugins()) {\n             Assert.assertFalse(\""Plugin \"" + plugin + \"" added to packageJson\"",\n-                    devDependencies.hasKey(\""@vaadin/\"" + plugin));\n+                    devDependencies.has(\""@vaadin/\"" + plugin));\n         }\n     }\n \n@@ -129,12 +127,12 @@ private void assertPlugins() throws IOException {\n     private void assertPlugin(String plugin) throws IOException {\n         final File pluginFolder = getPluginFolder(plugin);\n \n-        final JsonArray files = getPluginFiles(pluginFolder);\n-        for (int i = 0; i < files.length(); i++) {\n+        final ArrayNode files = getPluginFiles(pluginFolder);\n+        for (int i = 0; i < files.size(); i++) {\n             Assert.assertTrue(\n-                    \""Missing plugin file \"" + files.getString(i) + \"" for \""\n+                    \""Missing plugin file \"" + files.get(i).textValue() + \"" for \""\n                             + plugin,\n-                    new File(pluginFolder, files.getString(i)).exists());\n+                    new File(pluginFolder, files.get(i).textValue()).exists());\n         }\n     }\n \n@@ -143,14 +141,14 @@ private void verifyPluginScriptFilesAreDefined(String plugin)\n         final File pluginFolder = new File(this.getClass().getClassLoader()\n                 .getResource(PLUGIN_TARGET + \""/\"" + plugin).getFile());\n \n-        final JsonArray files = getPluginFiles(pluginFolder);\n-        List<String> fileNames = new ArrayList<>(files.length());\n-        for (int i = 0; i < files.length(); i++) {\n+        final ArrayNode files = getPluginFiles(pluginFolder);\n+        List<String> fileNames = new ArrayList<>(files.size());\n+        for (int i = 0; i < files.size(); i++) {\n             Assert.assertTrue(\n-                    \""Missing plugin file \"" + files.getString(i) + \"" for \""\n+                    \""Missing plugin file \"" + files.get(i).textValue() + \"" for \""\n                             + plugin,\n-                    new File(pluginFolder, files.getString(i)).exists());\n-            fileNames.add(files.getString(i));\n+                    new File(pluginFolder, files.get(i).textValue()).exists());\n+            fileNames.add(files.get(i).textValue());\n         }\n         final List<String> pluginFiles = Arrays\n                 .stream(pluginFolder.listFiles((dir, name) -> FilenameUtils\n@@ -170,10 +168,11 @@ private void verifyPluginScriptFilesAreDefined(String plugin)\n      * @return\n      * @throws IOException\n      */\n-    private JsonArray getPluginFiles(File pluginFolder) throws IOException {\n-        final JsonObject packageJson = Json.parse(FileUtils.readFileToString(\n-                new File(pluginFolder, \""package.json\""), UTF_8));\n-        return packageJson.getArray(\""files\"");\n+    private ArrayNode getPluginFiles(File pluginFolder) throws IOException {\n+        final JsonNode packageJson = JacksonUtils\n+                .readTree(FileUtils.readFileToString(\n+                        new File(pluginFolder, \""package.json\""), UTF_8));\n+        return (ArrayNode) packageJson.get(\""files\"");\n     }\n \n     private File getPluginFolder(String plugin) {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java\nindex 490d6317425..cc5a012c4c4 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunNpmInstallTest.java\n@@ -26,6 +26,8 @@\n import java.util.Comparator;\n import java.util.List;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import net.jcip.annotations.NotThreadSafe;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n@@ -42,7 +44,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.server.frontend.installer.NodeInstaller;\n@@ -51,9 +53,6 @@\n import com.vaadin.flow.testcategory.SlowTests;\n import com.vaadin.tests.util.MockOptions;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.TARGET;\n import static com.vaadin.flow.server.frontend.NodeUpdater.DEPENDENCIES;\n@@ -277,7 +276,7 @@ public void runNpmInstall_matchingHashButEmptyModules_npmInstallIsExecuted()\n     }\n \n     public void writeLocalHash(String hash) throws IOException {\n-        final JsonObject localHash = Json.createObject();\n+        final ObjectNode localHash = JacksonUtils.createObjectNode();\n         localHash.put(HASH_KEY, hash);\n \n         final File localHashFile = new File(options.getNodeModulesFolder(),\n@@ -317,7 +316,7 @@ public void runNpmInstall_externalUpdateOfPackages_npmInstallIsRerun()\n         getNodeUpdater().modified = true;\n \n         // manually fake TaskUpdatePackages.\n-        JsonObject packageJson = getNodeUpdater().getPackageJson();\n+        ObjectNode packageJson = getNodeUpdater().getPackageJson();\n         updatePackageHash(packageJson);\n         getNodeUpdater().writePackageFile(packageJson);\n \n@@ -330,19 +329,19 @@ public void runNpmInstall_externalUpdateOfPackages_npmInstallIsRerun()\n \n         String fileContent = FileUtils.readFileToString(localHashFile,\n                 UTF_8.name());\n-        JsonObject localHash = Json.parse(fileContent);\n+        JsonNode localHash = JacksonUtils.readTree(fileContent);\n         Assert.assertNotEquals(\""We should have a non empty hash key\"", \""\"",\n-                localHash.getString(HASH_KEY));\n+                localHash.get(HASH_KEY).textValue());\n \n         // Update package json and hash as if someone had pushed to code repo.\n         packageJson = getNodeUpdater().getPackageJson();\n-        packageJson.getObject(VAADIN_DEP_KEY).getObject(DEPENDENCIES)\n+        ((ObjectNode) packageJson.get(VAADIN_DEP_KEY).get(DEPENDENCIES))\n                 .put(\""a-avataaar\"", \""^1.2.5\"");\n-        String hash = packageJson.getObject(VAADIN_DEP_KEY).getString(HASH_KEY);\n+        String hash = packageJson.get(VAADIN_DEP_KEY).get(HASH_KEY).textValue();\n         updatePackageHash(packageJson);\n \n         Assert.assertNotEquals(\""Hash should have been updated\"", hash,\n-                packageJson.getObject(VAADIN_DEP_KEY).getString(HASH_KEY));\n+                packageJson.get(VAADIN_DEP_KEY).get(HASH_KEY).textValue());\n \n         getNodeUpdater().writePackageFile(packageJson);\n         logger = Mockito.mock(Logger.class);\n@@ -380,11 +379,12 @@ protected void setupEsbuildAndFooInstallation() throws IOException {\n                 StandardCharsets.UTF_8);\n \n         File packageJsonFile = ensurePackageJson();\n-        JsonObject packageJson = getNodeUpdater().getPackageJson();\n-        packageJson.getObject(DEV_DEPENDENCIES).put(\""esbuild\"",\n+        JsonNode packageJson = getNodeUpdater().getPackageJson();\n+        ((ObjectNode) packageJson.get(DEV_DEPENDENCIES)).put(\""esbuild\"",\n                 \""./fake-esbuild\"");\n-        packageJson.getObject(DEV_DEPENDENCIES).put(\""foo\"", \""./fake-foo\"");\n-        FileUtils.write(packageJsonFile, packageJson.toJson(),\n+        ((ObjectNode) packageJson.get(DEV_DEPENDENCIES)).put(\""foo\"",\n+                \""./fake-foo\"");\n+        FileUtils.write(packageJsonFile, packageJson.toString(),\n                 StandardCharsets.UTF_8);\n \n     }\n@@ -399,13 +399,15 @@ public void runNpmInstall_noPostinstallScript_postIntstallNotExecuted()\n                 new File(options.getNodeModulesFolder().getParentFile(),\n                         \""fake-esbuild\""),\n                 \""package.json\"");\n-        JsonObject esbuildPackageJsonContents = Json.parse(IOUtils.toString(\n-                getClass().getResourceAsStream(\n-                        \""fake-package-with-postinstall.json\""),\n-                StandardCharsets.UTF_8));\n-        esbuildPackageJsonContents.getObject(\""scripts\"").remove(\""postinstall\"");\n-        FileUtils.write(esbuildPackageJson, esbuildPackageJsonContents.toJson(),\n-                StandardCharsets.UTF_8);\n+        JsonNode esbuildPackageJsonContents = JacksonUtils\n+                .readTree(IOUtils.toString(\n+                        getClass().getResourceAsStream(\n+                                \""fake-package-with-postinstall.json\""),\n+                        StandardCharsets.UTF_8));\n+        ((ObjectNode) esbuildPackageJsonContents.get(\""scripts\""))\n+                .remove(\""postinstall\"");\n+        FileUtils.write(esbuildPackageJson,\n+                esbuildPackageJsonContents.toString(), StandardCharsets.UTF_8);\n \n         logger = new MockLogger();\n         Assert.assertTrue(logger.isDebugEnabled());\n@@ -476,17 +478,19 @@ public void shouldRunNpmInstallWhenFolderChanges() throws Exception {\n         setupEsbuildAndFooInstallation();\n \n         String packageJsonHash = getNodeUpdater().getPackageJson()\n-                .getObject(VAADIN_DEP_KEY).getString(HASH_KEY);\n-        JsonObject vaadinJson = Json.createObject();\n+                .get(VAADIN_DEP_KEY).get(HASH_KEY).textValue();\n+        ObjectNode vaadinJson = JacksonUtils.createObjectNode();\n         vaadinJson.put(HASH_KEY, packageJsonHash);\n         vaadinJson.put(PROJECT_FOLDER, npmFolder.getAbsolutePath());\n         File vaadinJsonFile = getNodeUpdater().getVaadinJsonFile();\n \n-        FileUtils.writeStringToFile(vaadinJsonFile, vaadinJson.toJson(), UTF_8);\n+        FileUtils.writeStringToFile(vaadinJsonFile, vaadinJson.toString(),\n+                UTF_8);\n \n         Assert.assertFalse(task.isVaadinHashOrProjectFolderUpdated());\n         vaadinJson.put(PROJECT_FOLDER, npmFolder.getAbsolutePath() + \""foo\"");\n-        FileUtils.writeStringToFile(vaadinJsonFile, vaadinJson.toJson(), UTF_8);\n+        FileUtils.writeStringToFile(vaadinJsonFile, vaadinJson.toString(),\n+                UTF_8);\n         Assert.assertTrue(task.isVaadinHashOrProjectFolderUpdated());\n     }\n \n@@ -501,22 +505,22 @@ public void shouldRunNpmInstallWhenFolderChanges() throws Exception {\n      * @param packageJson\n      *            package.json json object\n      */\n-    public void updatePackageHash(JsonObject packageJson) {\n-        final JsonObject vaadinDep = packageJson.getObject(VAADIN_DEP_KEY)\n-                .getObject(DEPENDENCIES);\n-        JsonObject dependencies = Json.createObject();\n-        for (String key : vaadinDep.keys()) {\n-            dependencies.put(key, vaadinDep.getString(key));\n+    public void updatePackageHash(ObjectNode packageJson) {\n+        final ObjectNode vaadinDep = (ObjectNode) packageJson\n+                .get(VAADIN_DEP_KEY).get(DEPENDENCIES);\n+        ObjectNode dependencies = JacksonUtils.createObjectNode();\n+        for (String key : JacksonUtils.getKeys(vaadinDep)) {\n+            dependencies.put(key, vaadinDep.get(key).textValue());\n         }\n-        JsonObject vaadinDevDep = packageJson.getObject(VAADIN_DEP_KEY)\n-                .getObject(DEV_DEPENDENCIES);\n-        JsonObject devDependencies = Json.createObject();\n-        for (String key : vaadinDevDep.keys()) {\n-            devDependencies.put(key, vaadinDevDep.getString(key));\n+        ObjectNode vaadinDevDep = (ObjectNode) packageJson.get(VAADIN_DEP_KEY)\n+                .get(DEV_DEPENDENCIES);\n+        ObjectNode devDependencies = JacksonUtils.createObjectNode();\n+        for (String key : JacksonUtils.getKeys(vaadinDevDep)) {\n+            devDependencies.put(key, vaadinDevDep.get(key).textValue());\n         }\n-        packageJson.put(DEPENDENCIES, dependencies);\n-        packageJson.put(DEV_DEPENDENCIES, devDependencies);\n-        packageJson.getObject(VAADIN_DEP_KEY).put(HASH_KEY,\n+        packageJson.set(DEPENDENCIES, dependencies);\n+        packageJson.set(DEV_DEPENDENCIES, devDependencies);\n+        ((ObjectNode) packageJson.get(VAADIN_DEP_KEY)).put(HASH_KEY,\n                 TaskUpdatePackages.generatePackageJsonHash(packageJson));\n         packageJson.remove(DEPENDENCIES);\n         packageJson.remove(DEV_DEPENDENCIES);\n@@ -575,7 +579,7 @@ protected String getToolName() {\n     private File ensurePackageJson() throws IOException {\n         File file = new File(npmFolder, PACKAGE_JSON);\n         if (!file.exists()) {\n-            JsonObject packageJson = getNodeUpdater().getPackageJson();\n+            JsonNode packageJson = getNodeUpdater().getPackageJson();\n             getNodeUpdater().writePackageFile(packageJson);\n         }\n         return file;\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java\nindex ee17d66e03e..b9e39970ff5 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskRunPnpmInstallTest.java\n@@ -23,6 +23,8 @@\n import java.util.Collections;\n import java.util.List;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import net.jcip.annotations.NotThreadSafe;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n@@ -35,7 +37,7 @@\n import org.mockito.Mockito;\n import org.slf4j.Logger;\n \n-import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.internal.JacksonUtils;\n import com.vaadin.flow.server.Constants;\n import com.vaadin.flow.server.ExecutionFailedException;\n import com.vaadin.flow.server.frontend.installer.NodeInstaller;\n@@ -44,9 +46,6 @@\n import com.vaadin.flow.testcategory.SlowTests;\n import com.vaadin.flow.testutil.FrontendStubs;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n-\n import static com.vaadin.flow.server.Constants.PACKAGE_JSON;\n import static com.vaadin.flow.server.Constants.TARGET;\n import static com.vaadin.flow.testutil.FrontendStubs.createStubNode;\n@@ -152,12 +151,12 @@ public void generateVersionsJson_userHasNoCustomVersions_platformIsMergedWithDev\n                 + \""}\"", PINNED_VERSION), StandardCharsets.UTF_8);\n         // @formatter:on\n \n-        JsonObject object = getGeneratedVersionsContent(versions, packageJson);\n-        Assert.assertTrue(object.hasKey(\""@vaadin/vaadin-overlay\""));\n+        JsonNode object = getGeneratedVersionsContent(versions, packageJson);\n+        Assert.assertTrue(object.has(\""@vaadin/vaadin-overlay\""));\n \n         // Platform version takes precedence over dev deps\n         Assert.assertEquals(PINNED_VERSION,\n-                object.getString(\""@vaadin/vaadin-overlay\""));\n+                object.get(\""@vaadin/vaadin-overlay\"").textValue());\n     }\n \n     @Test\n@@ -225,15 +224,15 @@ public void generateVersionsJson_userDefinedVersions_versionOnlyPinnedForNotAdde\n                 versionsNotificationVersion, versionsUploadVersion), StandardCharsets.UTF_8);\n         // @formatter:on\n \n-        JsonObject generatedVersions = getGeneratedVersionsContent(versions,\n+        JsonNode generatedVersions = getGeneratedVersionsContent(versions,\n                 packageJson);\n \n         Assert.assertEquals(\""Login version is the same for user and platform.\"",\n                 loginVersion,\n-                generatedVersions.getString(\""@vaadin/vaadin-login\""));\n+                generatedVersions.get(\""@vaadin/vaadin-login\"").textValue());\n         Assert.assertEquals(\""Notification version should use platform\"",\n-                versionsNotificationVersion,\n-                generatedVersions.getString(\""@vaadin/vaadin-notification\""));\n+                versionsNotificationVersion, generatedVersions\n+                        .get(\""@vaadin/vaadin-notification\"").textValue());\n     }\n \n     @Test\n@@ -314,24 +313,25 @@ public void runPnpmInstall_userVersionNewerThanPinned_installedOverlayVersionIsN\n                 StandardCharsets.UTF_8);\n \n         final VersionsJsonFilter versionsJsonFilter = new VersionsJsonFilter(\n-                Json.parse(packageJsonContent), NodeUpdater.DEPENDENCIES);\n+                JacksonUtils.readTree(packageJsonContent),\n+                NodeUpdater.DEPENDENCIES);\n         // Platform defines a pinned version\n         TaskRunNpmInstall task = createTask(versionsJsonFilter\n                 .getFilteredVersions(\n-                        Json.parse(\""{ \\\""@vaadin/vaadin-overlay\\\"":\\\""\""\n+                        JacksonUtils.readTree(\""{ \\\""@vaadin/vaadin-overlay\\\"":\\\""\""\n                                 + PINNED_VERSION + \""\\\""}\""),\n                         \""test-versions.json\"")\n-                .toJson());\n+                .toString());\n         task.execute();\n \n         File overlayPackageJson = new File(options.getNodeModulesFolder(),\n                 \""@vaadin/vaadin-overlay/package.json\"");\n \n         // The resulting version should be the one specified by the user\n-        JsonObject overlayPackage = Json.parse(FileUtils\n+        JsonNode overlayPackage = JacksonUtils.readTree(FileUtils\n                 .readFileToString(overlayPackageJson, StandardCharsets.UTF_8));\n         Assert.assertEquals(customOverlayVersion,\n-                overlayPackage.getString(\""version\""));\n+                overlayPackage.get(\""version\"").textValue());\n     }\n \n     @Test\n@@ -475,14 +475,14 @@ protected TaskRunNpmInstall createTask(String versionsContent) {\n         return new TaskRunNpmInstall(updater, options);\n     }\n \n-    private JsonObject getGeneratedVersionsContent(File versions,\n+    private JsonNode getGeneratedVersionsContent(File versions,\n             File packageJsonFile) throws IOException {\n         ClassFinder classFinder = getClassFinder();\n         Mockito.when(\n                 classFinder.getResource(Constants.VAADIN_CORE_VERSIONS_JSON))\n                 .thenReturn(versions.toURI().toURL());\n \n-        JsonObject packageJson = Json.parse(FileUtils\n+        ObjectNode packageJson = JacksonUtils.readTree(FileUtils\n                 .readFileToString(packageJsonFile, StandardCharsets.UTF_8));\n         getNodeUpdater().generateVersionsJson(packageJson);\n         return getNodeUpdater().versionsJson;\n@@ -509,18 +509,18 @@ private NodeUpdater createNodeUpdater(String versionsContent) {\n             @Override\n             public void execute() {\n                 try {\n-                    generateVersionsJson(Json.createObject());\n+                    generateVersionsJson(JacksonUtils.createObjectNode());\n                 } catch (Exception e) {\n                     throw new RuntimeException(e);\n                 }\n             }\n \n             @Override\n-            JsonObject getPlatformPinnedDependencies() throws IOException {\n+            ObjectNode getPlatformPinnedDependencies() {\n                 if (versionsContent != null) {\n-                    return Json.parse(versionsContent);\n+                    return JacksonUtils.readTree(versionsContent);\n                 } else {\n-                    return Json.createObject();\n+                    return JacksonUtils.createObjectNode();\n                 }\n             }\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java\nindex e65d2bf764c..cc37de0ced9 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskUpdatePackagesNpmTest.java\n@@ -449,15 +449,19 @@ public void npmIsInUse_packageJsonVersionIsUpdated_vaadinSectionIsNotChanged()\n     public void npmIsInUse_versionsJsonHasVaadinCoreVersionPinned_vaadinCoreVersionIgnored()\n             throws IOException {\n         final String expectedElementMixinVersion = \""21.0.0-alpha2\"";\n-        String versionJsonString = //@formatter:off\n-                \""{ \\\""core\\\"": {\"" + \""\\\""vaadin-element-mixin\\\"": {\\n\""\n-                        + \""    \\\""jsVersion\\\"": \\\""\"" + expectedElementMixinVersion\n-                        + \""\\\"",\\n\"" + \""    \\\""npmName\\\"": \\\""\"" + VAADIN_ELEMENT_MIXIN\n-                        + \""\\\""\\n\"" + \""},\\n\"" + \""\\\""vaadin-core\\\"": {\\n\""\n+        String versionJsonString =\n+        //@formatter:off\n+                \""{ \\\""core\\\"": {\""\n+                        + \""\\\""vaadin-element-mixin\\\"": {\\n\""\n+                        + \""    \\\""jsVersion\\\"": \\\""\"" + expectedElementMixinVersion + \""\\\"",\\n\""\n+                        + \""    \\\""npmName\\\"": \\\""\"" + VAADIN_ELEMENT_MIXIN + \""\\\""\\n\""\n+                        + \""},\\n\""\n+                        + \""\\\""vaadin-core\\\"": {\\n\""\n                         + \""    \\\""jsVersion\\\"": \\\""21.0.0.alpha1\\\"",\\n\""\n                         // broken for npm\n-                        + \""    \\\""npmName\\\"": \\\""\"" + VAADIN_CORE_NPM_PACKAGE\n-                        + \""\\\""\\n\"" + \""},\\n\"" + \""}}},\\n\"";//@formatter:on\n+                        + \""    \\\""npmName\\\"": \\\""\"" + VAADIN_CORE_NPM_PACKAGE + \""\\\""\\n\""\n+                        + \""}\\n\""\n+                        + \""}}\\n\"";//@formatter:on\n         FileUtils.write(versionJsonFile, versionJsonString,\n                 StandardCharsets.UTF_8);\n \n@@ -586,11 +590,15 @@ private boolean isSorted(String[] array) {\n     @Test\n     public void npmIsInUse_versionsJsonContainsSameVersions_nothingIsModified()\n             throws IOException {\n-        String versionJsonString = //@formatter:off\n-                \""{ \\\""core\\\"": {\"" + \""\\\""vaadin-element-mixin\\\"": {\\n\""\n-                        + \""    \\\""jsVersion\\\"": \\\""\"" + PLATFORM_DIALOG_VERSION\n-                        + \""\\\"",\\n\"" + \""    \\\""npmName\\\"": \\\""\"" + VAADIN_DIALOG\n-                        + \""\\\""\\n\"" + \""},\\n\"" + \""}}},\\n\"";//@formatter:on\n+        String versionJsonString =\n+        //@formatter:off\n+                          \""{ \\\""core\\\"": {\""\n+                        + \""\\\""vaadin-element-mixin\\\"": {\\n\""\n+                        + \""    \\\""jsVersion\\\"": \\\""\"" + PLATFORM_DIALOG_VERSION + \""\\\"",\\n\""\n+                        + \""    \\\""npmName\\\"": \\\""\"" + VAADIN_DIALOG + \""\\\""\\n\""\n+                        + \""}\\n\""\n+                        + \""}}\\n\"";\n+                //@formatter:on\n         FileUtils.write(versionJsonFile, versionJsonString,\n                 StandardCharsets.UTF_8);\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/ThemeValidationUtilTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/ThemeValidationUtilTest.java\nindex d7ba13233f2..f849211dd60 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/ThemeValidationUtilTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/ThemeValidationUtilTest.java\n@@ -15,21 +15,21 @@\n  */\n package com.vaadin.flow.server.frontend;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n-\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n import org.junit.Assert;\n import org.junit.Test;\n \n import java.util.ArrayList;\n import java.util.List;\n \n+import com.vaadin.flow.internal.JacksonUtils;\n+\n public class ThemeValidationUtilTest {\n \n     @Test\n     public void testObjectsIncludeMethodWithSameElementsInArrays() {\n-        JsonArray jsonFromBundle = createJsonArray(\""a\"", \""b\"", \""c\"");\n-        JsonArray projectJson = createJsonArray(\""a\"", \""b\"", \""c\"");\n+        ArrayNode jsonFromBundle = createArrayNode(\""a\"", \""b\"", \""c\"");\n+        ArrayNode projectJson = createArrayNode(\""a\"", \""b\"", \""c\"");\n         List<String> missedKeys = new ArrayList<>();\n \n         boolean result = ThemeValidationUtil.objectIncludesEntry(jsonFromBundle,\n@@ -40,8 +40,8 @@ public void testObjectsIncludeMethodWithSameElementsInArrays() {\n \n     @Test\n     public void testObjectsIncludeMethodWithSameElementsInArraysDifferentOrder() {\n-        JsonArray jsonFromBundle = createJsonArray(\""a\"", \""b\"", \""c\"");\n-        JsonArray projectJson = createJsonArray(\""b\"", \""a\"", \""c\"");\n+        ArrayNode jsonFromBundle = createArrayNode(\""a\"", \""b\"", \""c\"");\n+        ArrayNode projectJson = createArrayNode(\""b\"", \""a\"", \""c\"");\n         List<String> missedKeys = new ArrayList<>();\n \n         boolean result = ThemeValidationUtil.objectIncludesEntry(jsonFromBundle,\n@@ -53,20 +53,20 @@ public void testObjectsIncludeMethodWithSameElementsInArraysDifferentOrder() {\n     @Test\n     public void testObjectsIncludeMethodArraysAreDifferent() {\n         List<String> missedKeysForBundle = new ArrayList<>();\n-        JsonArray jsonFromBundle = createJsonArray(\""a\"", \""c\"");\n-        JsonArray jsonFromProject = createJsonArray(\""a\"", \""b\"", \""c\"");\n+        ArrayNode jsonFromBundle = createArrayNode(\""a\"", \""c\"");\n+        ArrayNode jsonFromProject = createArrayNode(\""a\"", \""b\"", \""c\"");\n \n         boolean result = ThemeValidationUtil.objectIncludesEntry(jsonFromBundle,\n                 jsonFromProject, missedKeysForBundle);\n         Assert.assertFalse(result);\n         // the missed keys should be the same as the jsonFromBundle as the other\n         // array is empty\n-        // also because it's a JsonArray the keys are quoted\n+        // also because it's a ArrayNode the keys are quoted\n         Assert.assertEquals(missedKeysForBundle, List.of(\""\\\""b\\\""\""));\n \n         List<String> missedKeysForProject = new ArrayList<>();\n-        jsonFromBundle = createJsonArray(\""a\"", \""b\"", \""c\"");\n-        jsonFromProject = createJsonArray(\""a\"");\n+        jsonFromBundle = createArrayNode(\""a\"", \""b\"", \""c\"");\n+        jsonFromProject = createArrayNode(\""a\"");\n         result = ThemeValidationUtil.objectIncludesEntry(jsonFromProject,\n                 jsonFromBundle, missedKeysForProject);\n         Assert.assertFalse(result);\n@@ -78,7 +78,8 @@ public void testObjectsIncludeMethodBothEmptyArraysAreEmpty() {\n         List<String> missedKeys = new ArrayList<>();\n \n         boolean result = ThemeValidationUtil.objectIncludesEntry(\n-                Json.createArray(), Json.createArray(), missedKeys);\n+                JacksonUtils.createArrayNode(), JacksonUtils.createArrayNode(),\n+                missedKeys);\n         Assert.assertTrue(result);\n         Assert.assertTrue(missedKeys.isEmpty());\n     }\n@@ -86,8 +87,8 @@ public void testObjectsIncludeMethodBothEmptyArraysAreEmpty() {\n     @Test\n     public void testObjectsIncludeMethodOneArrayIsEmpty() {\n         List<String> missedKeysFromProject = new ArrayList<>();\n-        JsonArray jsonFromBundle = createJsonArray(\""a\"", \""b\"", \""c\"");\n-        JsonArray jsonFromProjectEmpty = createJsonArray();\n+        ArrayNode jsonFromBundle = createArrayNode(\""a\"", \""b\"", \""c\"");\n+        ArrayNode jsonFromProjectEmpty = createArrayNode();\n \n         boolean result = ThemeValidationUtil.objectIncludesEntry(jsonFromBundle,\n                 jsonFromProjectEmpty, missedKeysFromProject);\n@@ -95,13 +96,13 @@ public void testObjectsIncludeMethodOneArrayIsEmpty() {\n \n         // the missed keys should be the same as the jsonFromBundle as the other\n         // array is empty\n-        // also because it's a JsonArray the keys are quoted\n+        // also because it's a ArrayNode the keys are quoted\n         Assert.assertEquals(missedKeysFromProject,\n                 List.of(\""\\\""a\\\""\"", \""\\\""b\\\""\"", \""\\\""c\\\""\""));\n \n         List<String> missedKeysFromBundle = new ArrayList<>();\n-        JsonArray jsonFromProject = createJsonArray(\""a\"", \""b\"", \""c\"");\n-        JsonArray jsonFromBundleEmpty = createJsonArray();\n+        ArrayNode jsonFromProject = createArrayNode(\""a\"", \""b\"", \""c\"");\n+        ArrayNode jsonFromBundleEmpty = createArrayNode();\n \n         result = ThemeValidationUtil.objectIncludesEntry(jsonFromBundleEmpty,\n                 jsonFromProject, missedKeysFromBundle);\n@@ -110,10 +111,10 @@ public void testObjectsIncludeMethodOneArrayIsEmpty() {\n                 List.of(\""\\\""a\\\""\"", \""\\\""b\\\""\"", \""\\\""c\\\""\""));\n     }\n \n-    private JsonArray createJsonArray(String... values) {\n-        JsonArray array = Json.createArray();\n+    private ArrayNode createArrayNode(String... values) {\n+        ArrayNode array = JacksonUtils.createArrayNode();\n         for (String value : values) {\n-            array.set(array.length(), value);\n+            array.add(value);\n         }\n         return array;\n     }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\nindex 1dc9921352f..a14ce6c2268 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonConverterTest.java\n@@ -17,13 +17,13 @@\n \n import java.io.IOException;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import org.junit.Assert;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n import static com.vaadin.flow.server.frontend.VersionsJsonConverter.VAADIN_CORE_NPM_PACKAGE;\n \n@@ -43,7 +43,7 @@ public void convertPlatformVersions() throws IOException {\n                             + \"" \\\""npmName\\\"": \\\""@vaadin/vaadin-progress-bar\\\"", \""\n                             + \""\\\""jsVersion\\\"": \\\""1.1.2\\\"", \""\n                             + \""\\\""mode\\\"": \\\""lit\\\"" \""\n-                          + \""},\""\n+                          + \""}\""\n                        + \""},\""  //core\n                 + \""\\\""vaadin-upload\\\"": { \""\n                     + \""\\\""npmName\\\"": \\\""@vaadin/vaadin-upload\\\"", \""\n@@ -64,23 +64,23 @@ public void convertPlatformVersions() throws IOException {\n         // @formatter:on\n \n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), false, false);\n-        JsonObject convertedJson = convert.getConvertedJson();\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/vaadin-progress-bar\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/vaadin-upload\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@polymer/iron-list\""));\n+                JacksonUtils.readTree(json), false, false);\n+        JsonNode convertedJson = convert.getConvertedJson();\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/vaadin-progress-bar\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/vaadin-upload\""));\n+        Assert.assertTrue(convertedJson.has(\""@polymer/iron-list\""));\n \n-        Assert.assertFalse(convertedJson.hasKey(\""flow\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""core\""));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\""platform\""));\n+        Assert.assertFalse(convertedJson.has(\""flow\""));\n+        Assert.assertFalse(convertedJson.has(\""core\""));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\""platform\""));\n \n         Assert.assertEquals(\""1.1.2\"",\n-                convertedJson.getString(\""@vaadin/vaadin-progress-bar\""));\n+                convertedJson.get(\""@vaadin/vaadin-progress-bar\"").textValue());\n         Assert.assertEquals(\""4.2.2\"",\n-                convertedJson.getString(\""@vaadin/vaadin-upload\""));\n+                convertedJson.get(\""@vaadin/vaadin-upload\"").textValue());\n         Assert.assertEquals(\""3.0.2\"",\n-                convertedJson.getString(\""@polymer/iron-list\""));\n+                convertedJson.get(\""@polymer/iron-list\"").textValue());\n     }\n \n     @Test\n@@ -93,18 +93,18 @@ public void reactRouterInUse_reactComponentsAreAdded() {\n                     },\n                     \""vaadin-progress-bar\"": {\n                       \""npmName\"": \""@vaadin/vaadin-progress-bar\"",\n-                      \""jsVersion\"": \""1.1.2\"",\n-                    },\n+                      \""jsVersion\"": \""1.1.2\""\n+                    }\n                   },\n                   \""vaadin-upload\"": {\n                     \""npmName\"": \""@vaadin/vaadin-upload\"",\n-                    \""jsVersion\"": \""4.2.2\"",\n+                    \""jsVersion\"": \""4.2.2\""\n                   },\n                   \""iron-list\"": {\n                     \""npmName\"": \""@polymer/iron-list\"",\n                     \""npmVersion\"": \""3.0.2\"",\n                     \""javaVersion\"": \""3.0.0.beta1\"",\n-                    \""jsVersion\"": \""2.0.19\"",\n+                    \""jsVersion\"": \""2.0.19\""\n                   },\n                   \""vaadin-core\"": {\n                       \""jsVersion\"": \""21.0.0.alpha1\"",\n@@ -113,7 +113,7 @@ public void reactRouterInUse_reactComponentsAreAdded() {\n                   \""react\"": {\n                     \""react-components\"": {\n                       \""jsVersion\"": \""24.4.0-alpha7\"",\n-                      \""npmName\"": \""@vaadin/react-components\"",\n+                      \""npmName\"": \""@vaadin/react-components\""\n                     }\n                   },\n                   \""react-pro\"": {\n@@ -127,33 +127,33 @@ public void reactRouterInUse_reactComponentsAreAdded() {\n                 \""\""\"".formatted(VAADIN_CORE_NPM_PACKAGE);\n \n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), true, true);\n-        JsonObject convertedJson = convert.getConvertedJson();\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/vaadin-progress-bar\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/vaadin-upload\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@polymer/iron-list\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/react-components-pro\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/react-components\""));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\""flow\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""core\""));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\""platform\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-pro\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components-pro\""));\n+                JacksonUtils.readTree(json), true, true);\n+        JsonNode convertedJson = convert.getConvertedJson();\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/vaadin-progress-bar\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/vaadin-upload\""));\n+        Assert.assertTrue(convertedJson.has(\""@polymer/iron-list\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/react-components-pro\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/react-components\""));\n+\n+        Assert.assertFalse(convertedJson.has(\""flow\""));\n+        Assert.assertFalse(convertedJson.has(\""core\""));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\""platform\""));\n+        Assert.assertFalse(convertedJson.has(\""react\""));\n+        Assert.assertFalse(convertedJson.has(\""react-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components-pro\""));\n \n         Assert.assertEquals(\""1.1.2\"",\n-                convertedJson.getString(\""@vaadin/vaadin-progress-bar\""));\n+                convertedJson.get(\""@vaadin/vaadin-progress-bar\"").textValue());\n         Assert.assertEquals(\""4.2.2\"",\n-                convertedJson.getString(\""@vaadin/vaadin-upload\""));\n+                convertedJson.get(\""@vaadin/vaadin-upload\"").textValue());\n         Assert.assertEquals(\""3.0.2\"",\n-                convertedJson.getString(\""@polymer/iron-list\""));\n+                convertedJson.get(\""@polymer/iron-list\"").textValue());\n         Assert.assertEquals(\""24.4.0-alpha7\"",\n-                convertedJson.getString(\""@vaadin/react-components\""));\n+                convertedJson.get(\""@vaadin/react-components\"").textValue());\n         Assert.assertEquals(\""24.4.0-alpha7\"",\n-                convertedJson.getString(\""@vaadin/react-components-pro\""));\n+                convertedJson.get(\""@vaadin/react-components-pro\"").textValue());\n     }\n \n     @Test\n@@ -167,7 +167,7 @@ public void reactRouterNotUsed_reactComponentsIgnored() {\n                     \""vaadin-progress-bar\"": {\n                       \""npmName\"": \""@vaadin/vaadin-progress-bar\"",\n                       \""jsVersion\"": \""1.1.2\""\n-                    },\n+                    }\n                   },\n                   \""vaadin-upload\"": {\n                     \""npmName\"": \""@vaadin/vaadin-upload\"",\n@@ -202,30 +202,29 @@ public void reactRouterNotUsed_reactComponentsIgnored() {\n                 \""\""\"".formatted(VAADIN_CORE_NPM_PACKAGE);\n \n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), false, true);\n-        JsonObject convertedJson = convert.getConvertedJson();\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/vaadin-progress-bar\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/vaadin-upload\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@polymer/iron-list\""));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\""flow\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""core\""));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\""platform\""));\n-        Assert.assertFalse(\n-                convertedJson.hasKey(\""@vaadin/react-components-pro\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""@vaadin/react-components\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-pro\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components-pro\""));\n+                JacksonUtils.readTree(json), false, true);\n+        JsonNode convertedJson = convert.getConvertedJson();\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/vaadin-progress-bar\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/vaadin-upload\""));\n+        Assert.assertTrue(convertedJson.has(\""@polymer/iron-list\""));\n+\n+        Assert.assertFalse(convertedJson.has(\""flow\""));\n+        Assert.assertFalse(convertedJson.has(\""core\""));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\""platform\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/react-components-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/react-components\""));\n+        Assert.assertFalse(convertedJson.has(\""react\""));\n+        Assert.assertFalse(convertedJson.has(\""react-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components-pro\""));\n \n         Assert.assertEquals(\""1.1.2\"",\n-                convertedJson.getString(\""@vaadin/vaadin-progress-bar\""));\n+                convertedJson.get(\""@vaadin/vaadin-progress-bar\"").textValue());\n         Assert.assertEquals(\""4.2.2\"",\n-                convertedJson.getString(\""@vaadin/vaadin-upload\""));\n+                convertedJson.get(\""@vaadin/vaadin-upload\"").textValue());\n         Assert.assertEquals(\""3.0.2\"",\n-                convertedJson.getString(\""@polymer/iron-list\""));\n+                convertedJson.get(\""@polymer/iron-list\"").textValue());\n     }\n \n     @Test\n@@ -235,7 +234,7 @@ public void reactRouterUsed_noVaadinRouterAdded() {\n                   \""core\"": {\n                     \""flow\"": {\n                       \""javaVersion\"": \""3.0.0.alpha17\""\n-                    },\n+                    }\n                   },\n                   \""vaadin-router\"": {\n                     \""npmName\"": \""@vaadin/router\"",\n@@ -253,14 +252,14 @@ public void reactRouterUsed_noVaadinRouterAdded() {\n                 \""\""\"".formatted(VAADIN_CORE_NPM_PACKAGE);\n \n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), true, false);\n-        JsonObject convertedJson = convert.getConvertedJson();\n+                JacksonUtils.readTree(json), true, false);\n+        JsonNode convertedJson = convert.getConvertedJson();\n \n         Assert.assertFalse(\n                 \""Found @vaadin/router even though it should not be in use.\"",\n-                convertedJson.hasKey(\""@vaadin/router\""));\n+                convertedJson.has(\""@vaadin/router\""));\n         Assert.assertTrue(\""Missing react-components\"",\n-                convertedJson.hasKey(\""@vaadin/react-components\""));\n+                convertedJson.has(\""@vaadin/react-components\""));\n     }\n \n     @Test\n@@ -275,7 +274,7 @@ public void testModeProperty() {\n                       \""npmName\"": \""@vaadin/vaadin-progress-bar\"",\n                       \""jsVersion\"": \""1.1.2\"",\n                       \""mode\"": \""lit\""\n-                    },\n+                    }\n                   },\n                   \""vaadin-upload\"": {\n                     \""npmName\"": \""@vaadin/vaadin-upload\"",\n@@ -313,78 +312,78 @@ public void testModeProperty() {\n \n         // react enabled\n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), true, false);\n-        JsonObject convertedJson = convert.getConvertedJson();\n-        Assert.assertFalse(convertedJson.hasKey(\""@vaadin/vaadin-progress-bar\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/vaadin-upload\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@polymer/iron-list\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/react-components-pro\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/react-components\""));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\""flow\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""core\""));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\""platform\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-pro\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components-pro\""));\n+                JacksonUtils.readTree(json), true, false);\n+        JsonNode convertedJson = convert.getConvertedJson();\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/vaadin-progress-bar\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/vaadin-upload\""));\n+        Assert.assertTrue(convertedJson.has(\""@polymer/iron-list\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/react-components-pro\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/react-components\""));\n+\n+        Assert.assertFalse(convertedJson.has(\""flow\""));\n+        Assert.assertFalse(convertedJson.has(\""core\""));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\""platform\""));\n+        Assert.assertFalse(convertedJson.has(\""react\""));\n+        Assert.assertFalse(convertedJson.has(\""react-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components-pro\""));\n \n         // react enabled, exclude web components\n-        convert = new VersionsJsonConverter(Json.parse(json), true, true);\n+        convert = new VersionsJsonConverter(JacksonUtils.readTree(json), true,\n+                true);\n         convertedJson = convert.getConvertedJson();\n-        Assert.assertFalse(convertedJson.hasKey(\""@vaadin/vaadin-progress-bar\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/vaadin-upload\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@polymer/iron-list\""));\n-        Assert.assertFalse(\n-                convertedJson.hasKey(\""@vaadin/react-components-pro\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""@vaadin/react-components\""));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\""flow\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""core\""));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\""platform\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-pro\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/vaadin-progress-bar\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/vaadin-upload\""));\n+        Assert.assertTrue(convertedJson.has(\""@polymer/iron-list\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/react-components-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/react-components\""));\n+\n+        Assert.assertFalse(convertedJson.has(\""flow\""));\n+        Assert.assertFalse(convertedJson.has(\""core\""));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\""platform\""));\n+        Assert.assertFalse(convertedJson.has(\""react\""));\n+        Assert.assertFalse(convertedJson.has(\""react-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components-pro\""));\n \n         // react disabled\n-        convert = new VersionsJsonConverter(Json.parse(json), false, false);\n+        convert = new VersionsJsonConverter(JacksonUtils.readTree(json), false,\n+                false);\n         convertedJson = convert.getConvertedJson();\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/vaadin-progress-bar\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/vaadin-upload\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@polymer/iron-list\""));\n-        Assert.assertFalse(\n-                convertedJson.hasKey(\""@vaadin/react-components-pro\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""@vaadin/react-components\""));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\""flow\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""core\""));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\""platform\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-pro\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/vaadin-progress-bar\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/vaadin-upload\""));\n+        Assert.assertTrue(convertedJson.has(\""@polymer/iron-list\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/react-components-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/react-components\""));\n+\n+        Assert.assertFalse(convertedJson.has(\""flow\""));\n+        Assert.assertFalse(convertedJson.has(\""core\""));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\""platform\""));\n+        Assert.assertFalse(convertedJson.has(\""react\""));\n+        Assert.assertFalse(convertedJson.has(\""react-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components\""));\n \n         // react disabled, exclude web components\n-        convert = new VersionsJsonConverter(Json.parse(json), false, true);\n+        convert = new VersionsJsonConverter(JacksonUtils.readTree(json), false,\n+                true);\n         convertedJson = convert.getConvertedJson();\n-        Assert.assertFalse(convertedJson.hasKey(\""@vaadin/vaadin-progress-bar\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/vaadin-upload\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@polymer/iron-list\""));\n-        Assert.assertFalse(\n-                convertedJson.hasKey(\""@vaadin/react-components-pro\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""@vaadin/react-components\""));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\""flow\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""core\""));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\""platform\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-pro\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/vaadin-progress-bar\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/vaadin-upload\""));\n+        Assert.assertTrue(convertedJson.has(\""@polymer/iron-list\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/react-components-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/react-components\""));\n+\n+        Assert.assertFalse(convertedJson.has(\""flow\""));\n+        Assert.assertFalse(convertedJson.has(\""core\""));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\""platform\""));\n+        Assert.assertFalse(convertedJson.has(\""react\""));\n+        Assert.assertFalse(convertedJson.has(\""react-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components-pro\""));\n     }\n \n     @Test\n@@ -399,7 +398,7 @@ public void testExclusionsArrayProperty() {\n                       \""npmName\"": \""@vaadin/vaadin-progress-bar\"",\n                       \""jsVersion\"": \""1.1.2\"",\n                       \""mode\"": \""lit\""\n-                    },\n+                    }\n                   },\n                   \""vaadin-upload\"": {\n                     \""npmName\"": \""@vaadin/vaadin-upload\"",\n@@ -443,41 +442,40 @@ public void testExclusionsArrayProperty() {\n \n         // react enabled\n         VersionsJsonConverter convert = new VersionsJsonConverter(\n-                Json.parse(json), true, false);\n-        JsonObject convertedJson = convert.getConvertedJson();\n-        Assert.assertFalse(convertedJson.hasKey(\""@vaadin/vaadin-progress-bar\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""@vaadin/vaadin-upload\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""@polymer/iron-list\""));\n-        Assert.assertFalse(\n-                convertedJson.hasKey(\""@vaadin/react-components-pro\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/react-components\""));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\""flow\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""core\""));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\""platform\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-pro\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components-pro\""));\n+                JacksonUtils.readTree(json), true, false);\n+        JsonNode convertedJson = convert.getConvertedJson();\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/vaadin-progress-bar\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/vaadin-upload\""));\n+        Assert.assertFalse(convertedJson.has(\""@polymer/iron-list\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/react-components-pro\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/react-components\""));\n+\n+        Assert.assertFalse(convertedJson.has(\""flow\""));\n+        Assert.assertFalse(convertedJson.has(\""core\""));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\""platform\""));\n+        Assert.assertFalse(convertedJson.has(\""react\""));\n+        Assert.assertFalse(convertedJson.has(\""react-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components-pro\""));\n \n         // react disabled\n-        convert = new VersionsJsonConverter(Json.parse(json), false, false);\n+        convert = new VersionsJsonConverter(JacksonUtils.readTree(json), false,\n+                false);\n         convertedJson = convert.getConvertedJson();\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/vaadin-progress-bar\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@vaadin/vaadin-upload\""));\n-        Assert.assertTrue(convertedJson.hasKey(\""@polymer/iron-list\""));\n-        Assert.assertFalse(\n-                convertedJson.hasKey(\""@vaadin/react-components-pro\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""@vaadin/react-components\""));\n-\n-        Assert.assertFalse(convertedJson.hasKey(\""flow\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""core\""));\n-        Assert.assertFalse(convertedJson.hasKey(VAADIN_CORE_NPM_PACKAGE));\n-        Assert.assertFalse(convertedJson.hasKey(\""platform\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-pro\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components\""));\n-        Assert.assertFalse(convertedJson.hasKey(\""react-components-pro\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/vaadin-progress-bar\""));\n+        Assert.assertTrue(convertedJson.has(\""@vaadin/vaadin-upload\""));\n+        Assert.assertTrue(convertedJson.has(\""@polymer/iron-list\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/react-components-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""@vaadin/react-components\""));\n+\n+        Assert.assertFalse(convertedJson.has(\""flow\""));\n+        Assert.assertFalse(convertedJson.has(\""core\""));\n+        Assert.assertFalse(convertedJson.has(VAADIN_CORE_NPM_PACKAGE));\n+        Assert.assertFalse(convertedJson.has(\""platform\""));\n+        Assert.assertFalse(convertedJson.has(\""react\""));\n+        Assert.assertFalse(convertedJson.has(\""react-pro\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components\""));\n+        Assert.assertFalse(convertedJson.has(\""react-components-pro\""));\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonFilterTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonFilterTest.java\nindex 2f3e5a1c85e..d025d3ad6e2 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonFilterTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/VersionsJsonFilterTest.java\n@@ -23,6 +23,8 @@\n import java.util.Map;\n import java.util.Objects;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.apache.commons.io.IOUtils;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -31,15 +33,14 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import elemental.json.Json;\n-import elemental.json.JsonObject;\n+import com.vaadin.flow.internal.JacksonUtils;\n \n public class VersionsJsonFilterTest {\n \n-    private static final JsonObject TEST_VERSION_JSON;\n+    private static final ObjectNode TEST_VERSION_JSON;\n \n     static {\n-        TEST_VERSION_JSON = Json.parse(\""\""\""\n+        TEST_VERSION_JSON = JacksonUtils.readTree(\""\""\""\n                 {\n                     \""@vaadin/vaadin-progress-bar\"": \""1.1.2\"",\n                     \""@vaadin/vaadin-upload\"":  \""4.2.2\"",\n@@ -97,7 +98,7 @@ public void testGetFilteredVersions_whenErrorHappens_versionOriginParameterIsUse\n                         getClass().getClassLoader().getResourceAsStream(\n                                 \""versions/no_vaadin_package.json\"")),\n                 StandardCharsets.UTF_8);\n-        JsonObject packageJson = Json.parse(pkgJson);\n+        ObjectNode packageJson = JacksonUtils.readTree(pkgJson);\n         VersionsJsonFilter filter = new VersionsJsonFilter(packageJson,\n                 NodeUpdater.DEPENDENCIES);\n         String versionOrigin = \""dummy-origin.json\"";\n@@ -109,19 +110,19 @@ public void testGetFilteredVersions_whenErrorHappens_versionOriginParameterIsUse\n                     .when(() -> LoggerFactory.getLogger(FrontendVersion.class))\n                     .thenReturn(logger);\n \n-            JsonObject sourceJsonMocked = getMockedJsonObject();\n+            ObjectNode sourceJsonMocked = getMockedJsonNode();\n \n-            Mockito.when(sourceJsonMocked.getString(Mockito.anyString()))\n+            Mockito.when(sourceJsonMocked.get(Mockito.anyString()))\n                     .thenThrow(new ClassCastException());\n             filter.getFilteredVersions(sourceJsonMocked, versionOrigin);\n             Mockito.verify(logger, Mockito.times(1)).warn(\n                     \""Ignoring error while parsing frontend dependency version for package '{}' in '{}'\"",\n                     \""test\"", versionOrigin);\n \n-            sourceJsonMocked = getMockedJsonObject();\n+            sourceJsonMocked = getMockedJsonNode();\n \n             String nfeMessage = \""NFE MSG\"";\n-            Mockito.when(sourceJsonMocked.getString(Mockito.anyString()))\n+            Mockito.when(sourceJsonMocked.get(Mockito.anyString()))\n                     .thenThrow(new NumberFormatException(nfeMessage));\n             filter.getFilteredVersions(sourceJsonMocked, versionOrigin);\n             Mockito.verify(logger, Mockito.times(1)).warn(\n@@ -130,10 +131,11 @@ public void testGetFilteredVersions_whenErrorHappens_versionOriginParameterIsUse\n         }\n     }\n \n-    private JsonObject getMockedJsonObject() {\n-        JsonObject jsonObject = Mockito.mock(JsonObject.class);\n-        Mockito.when(jsonObject.keys()).thenReturn(new String[] { \""test\"" });\n-        Mockito.when(jsonObject.hasKey(\""test\"")).thenReturn(true);\n+    private ObjectNode getMockedJsonNode() {\n+        ObjectNode jsonObject = Mockito.mock(ObjectNode.class);\n+        Mockito.when(jsonObject.fieldNames())\n+                .thenReturn(Arrays.stream(new String[] { \""test\"" }).iterator());\n+        Mockito.when(jsonObject.has(\""test\"")).thenReturn(true);\n         return jsonObject;\n     }\n \n@@ -145,16 +147,16 @@ private void assertMissingVaadinDependencies_allDependenciesSholdBeUserHandled(\n                                 \""versions/no_vaadin_package.json\"")),\n                 StandardCharsets.UTF_8);\n \n-        VersionsJsonFilter filter = new VersionsJsonFilter(Json.parse(pkgJson),\n-                depKey);\n-        JsonObject filteredJson = filter.getFilteredVersions(TEST_VERSION_JSON,\n+        VersionsJsonFilter filter = new VersionsJsonFilter(\n+                JacksonUtils.readTree(pkgJson), depKey);\n+        JsonNode filteredJson = filter.getFilteredVersions(TEST_VERSION_JSON,\n                 \""versions/versions.json\"");\n-        Assert.assertTrue(filteredJson.hasKey(\""@vaadin/vaadin-progress-bar\""));\n-        Assert.assertTrue(filteredJson.hasKey(\""@vaadin/vaadin-upload\""));\n-        Assert.assertTrue(filteredJson.hasKey(\""@polymer/iron-list\""));\n+        Assert.assertTrue(filteredJson.has(\""@vaadin/vaadin-progress-bar\""));\n+        Assert.assertTrue(filteredJson.has(\""@vaadin/vaadin-upload\""));\n+        Assert.assertTrue(filteredJson.has(\""@polymer/iron-list\""));\n \n         Assert.assertEquals(\""1.1.2\"",\n-                filteredJson.getString(\""@vaadin/vaadin-progress-bar\""));\n+                filteredJson.get(\""@vaadin/vaadin-progress-bar\"").textValue());\n     }\n \n     private void assertFilterPlatformVersions_multipleUserChanged_correctlyIgnored(\n@@ -168,10 +170,10 @@ private void assertFilterPlatformVersions_multipleUserChanged_correctlyIgnored(\n                         .getResourceAsStream(\""versions/user_package.json\"")),\n                 StandardCharsets.UTF_8);\n \n-        VersionsJsonFilter filter = new VersionsJsonFilter(Json.parse(pkgJson),\n-                depKey);\n-        JsonObject filteredJson = filter.getFilteredVersions(\n-                Json.parse(versions), \""versions/user_versions.json\"");\n+        VersionsJsonFilter filter = new VersionsJsonFilter(\n+                JacksonUtils.readTree(pkgJson), depKey);\n+        JsonNode filteredJson = filter.getFilteredVersions(\n+                JacksonUtils.readTree(versions), \""versions/user_versions.json\"");\n         List<String> expectedKeys = Arrays.asList(\""@vaadin/vaadin-notification\"",\n                 \""@vaadin/vaadin-overlay\"", \""@vaadin/vaadin-select\"",\n                 \""@vaadin/vaadin-split-layout\"", \""@vaadin/vaadin-tabs\"");\n@@ -179,14 +181,14 @@ private void assertFilterPlatformVersions_multipleUserChanged_correctlyIgnored(\n         for (String key : expectedKeys) {\n             Assert.assertTrue(\n                     String.format(\""Key '%s' was expected, but not found\"", key),\n-                    filteredJson.hasKey(key));\n+                    filteredJson.has(key));\n         }\n \n         List<String> droppedKeys = Arrays.asList(\""flow\"", \""core\"", \""platform\"");\n         for (String key : droppedKeys) {\n             Assert.assertFalse(\n                     String.format(\""User managed key '%s' was found.\"", key),\n-                    filteredJson.hasKey(key));\n+                    filteredJson.has(key));\n         }\n \n         Map<String, String> expectedValues = new HashMap<>();\n@@ -199,7 +201,8 @@ private void assertFilterPlatformVersions_multipleUserChanged_correctlyIgnored(\n         for (Map.Entry<String, String> entry : expectedValues.entrySet()) {\n             Assert.assertEquals(\n                     String.format(\""Got wrong version for '%s'\"", entry.getKey()),\n-                    entry.getValue(), filteredJson.getString(entry.getKey()));\n+                    entry.getValue(),\n+                    filteredJson.get(entry.getKey()).textValue());\n         }\n     }\n \n@@ -210,25 +213,26 @@ private void assertFilterPlatformVersions(String depKey)\n                         .getResourceAsStream(\""versions/package.json\"")),\n                 StandardCharsets.UTF_8);\n \n-        VersionsJsonFilter filter = new VersionsJsonFilter(Json.parse(pkgJson),\n-                depKey);\n-        JsonObject filteredJson = filter.getFilteredVersions(TEST_VERSION_JSON,\n+        VersionsJsonFilter filter = new VersionsJsonFilter(\n+                JacksonUtils.readTree(pkgJson), depKey);\n+        JsonNode filteredJson = filter.getFilteredVersions(TEST_VERSION_JSON,\n                 \""versions/versions.json\"");\n-        Assert.assertTrue(filteredJson.hasKey(\""@vaadin/vaadin-progress-bar\""));\n-        Assert.assertTrue(filteredJson.hasKey(\""@vaadin/vaadin-upload\""));\n-        Assert.assertTrue(filteredJson.hasKey(\""@polymer/iron-list\""));\n+        Assert.assertTrue(filteredJson.has(\""@vaadin/vaadin-progress-bar\""));\n+        Assert.assertTrue(filteredJson.has(\""@vaadin/vaadin-upload\""));\n+        Assert.assertTrue(filteredJson.has(\""@polymer/iron-list\""));\n \n         Assert.assertEquals(\n                 \""'progress-bar' should be the same in package and versions\"",\n-                \""1.1.2\"", filteredJson.getString(\""@vaadin/vaadin-progress-bar\""));\n+                \""1.1.2\"",\n+                filteredJson.get(\""@vaadin/vaadin-progress-bar\"").textValue());\n         Assert.assertEquals(\n                 \""'upload' should be the same in package and versions\"", \""4.2.2\"",\n-                filteredJson.getString(\""@vaadin/vaadin-upload\""));\n+                filteredJson.get(\""@vaadin/vaadin-upload\"").textValue());\n         Assert.assertEquals(\n                 \""'enforced' version should come from platform (upgrade)\"",\n-                \""1.5.0\"", filteredJson.getString(\""enforced\""));\n+                \""1.5.0\"", filteredJson.get(\""enforced\"").textValue());\n         Assert.assertEquals(\n                 \""'iron-list' version should come from platform (downgrade)\"",\n-                \""2.0.19\"", filteredJson.getString(\""@polymer/iron-list\""));\n+                \""2.0.19\"", filteredJson.get(\""@polymer/iron-list\"").textValue());\n     }\n }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-20948"", ""pr_id"": 20948, ""issue_id"": 20741, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Use Jackson for public API and implementation instead of Elemental JSON\n### Describe your motivation\n\nJackson library (`com.fasterxml.jackson`) is more popular than Elemental JSON (`elemental.json`), thus Vaadin should better use it in public API.\n\n### Describe the solution you'd like\n\n0. Analyse and list the usage of Elemental in Flow: how many publicly using cases do we have and how many are used internally. I expect the main usage in `Element` class, but there may be more, e.g. in util classes.\n1. Add an adapter code that converts Jackson to/from Elemental, if it's problematic to replace it in implementation right away, else go to step 2.\n2. Change Flow internal implementation to use Jackson\n3. Add same public methods found in (0), but that use Jackson for arguments and return values\n4. Deprecate existing public method with Elemental\n5. Remove Elemental variants in next major version.\n"", ""issue_word_count"": 151, ""test_files_count"": 3, ""non_test_files_count"": 2, ""pr_changed_files"": [""flow-server/src/main/java/com/vaadin/flow/internal/JacksonCodec.java"", ""flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/JacksonCodecTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java"", ""flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java""], ""pr_changed_test_files"": [""flow-server/src/test/java/com/vaadin/flow/internal/JacksonCodecTest.java"", ""flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java"", ""flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java""], ""base_commit"": ""714d220c3983057f94ede92a31017746c3a23078"", ""head_commit"": ""b6ad9b4f930cf86fbcbb5123536bcaab8a5c9145"", ""repo_url"": ""https://github.com/vaadin/flow/pull/20948"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/20948"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-10T12:34:36.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonCodec.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonCodec.java\nnew file mode 100644\nindex 00000000000..218d1b9441c\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonCodec.java\n@@ -0,0 +1,284 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.dom.Node;\n+import com.vaadin.flow.internal.nodefeature.ReturnChannelRegistration;\n+\n+/**\n+ * Utility for encoding objects to and from JSON.\n+ * <p>\n+ * Supported types are\n+ * <ul>\n+ * <li>{@link String}\n+ * <li>{@link Boolean} and <code>boolean</code>\n+ * <li>{@link Integer} and <code>int</code>\n+ * <li>{@link Double} and <code>double</code> (<code>NaN</code> and infinity not\n+ * supported)\n+ * <li>{@link JsonNode} and all its sub types\n+ * <li>{@link Element} (encoded as a reference to the element)\n+ * <li>{@link Component} (encoded as a reference to the root element)\n+ * </ul>\n+ *\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ *\n+ * @author Vaadin Ltd\n+ * @since 24.7\n+ */\n+public class JacksonCodec {\n+    /**\n+     * Type id for a complex type array containing an {@link Element}.\n+     */\n+    public static final int NODE_TYPE = 0;\n+\n+    /**\n+     * Type id for a complex type array containing a {@link ArrayNode}.\n+     */\n+    public static final int ARRAY_TYPE = 1;\n+\n+    /**\n+     * Type id for a complex type array identifying a\n+     * {@link ReturnChannelRegistration} reference.\n+     */\n+    public static final int RETURN_CHANNEL_TYPE = 2;\n+\n+    private JacksonCodec() {\n+        // Don't create instances\n+    }\n+\n+    /**\n+     * Helper for encoding values that might not have a native representation in\n+     * JSON. Such types are encoded as an JSON array starting with an id\n+     * defining the actual type and followed by the actual data. Supported value\n+     * types are any native JSON type supported by\n+     * {@link #encodeWithoutTypeInfo(Object)}, {@link Element} and\n+     * {@link Component} (encoded as its root element).\n+     *\n+     * @param value\n+     *            the value to encode\n+     * @return the value encoded as JSON\n+     */\n+    public static JsonNode encodeWithTypeInfo(Object value) {\n+        assert value == null || canEncodeWithTypeInfo(value.getClass());\n+\n+        if (value instanceof Component) {\n+            return encodeNode(((Component) value).getElement());\n+        } else if (value instanceof Node<?>) {\n+            return encodeNode((Node<?>) value);\n+        } else if (value instanceof ReturnChannelRegistration) {\n+            return encodeReturnChannel((ReturnChannelRegistration) value);\n+        } else {\n+            JsonNode encoded = encodeWithoutTypeInfo(value);\n+            if (encoded.getNodeType() == JsonNodeType.ARRAY) {\n+                // Must \""escape\"" arrays\n+                encoded = wrapComplexValue(ARRAY_TYPE, encoded);\n+            }\n+            return encoded;\n+        }\n+    }\n+\n+    private static ArrayNode encodeReturnChannel(\n+            ReturnChannelRegistration value) {\n+        return wrapComplexValue(RETURN_CHANNEL_TYPE,\n+                JacksonUtils.getMapper().valueToTree(value.getStateNodeId()),\n+                JacksonUtils.getMapper().valueToTree(value.getChannelId()));\n+    }\n+\n+    private static JsonNode encodeNode(Node<?> node) {\n+        StateNode stateNode = node.getNode();\n+        if (stateNode.isAttached()) {\n+            return wrapComplexValue(NODE_TYPE,\n+                    JacksonUtils.getMapper().valueToTree(stateNode.getId()));\n+        } else {\n+            return JacksonUtils.getMapper().nullNode();\n+        }\n+    }\n+\n+    private static ArrayNode wrapComplexValue(int typeId, JsonNode... values) {\n+        return Stream\n+                .concat(Stream.of(JacksonUtils.getMapper().valueToTree(typeId)),\n+                        Stream.of(values))\n+                .collect(JacksonUtils.asArray());\n+    }\n+\n+    /**\n+     * Helper for checking whether the type is supported by\n+     * {@link #encodeWithoutTypeInfo(Object)}. Supported value types are\n+     * {@link String}, {@link Integer}, {@link Double}, {@link Boolean},\n+     * {@link JsonNode}.\n+     *\n+     * @param type\n+     *            the type to check\n+     * @return whether the type can be encoded\n+     */\n+    public static boolean canEncodeWithoutTypeInfo(Class<?> type) {\n+        assert type != null;\n+        return String.class.equals(type) || Integer.class.equals(type)\n+                || Double.class.equals(type) || Boolean.class.equals(type)\n+                || JsonNode.class.isAssignableFrom(type);\n+    }\n+\n+    /**\n+     * Helper for checking whether the type is supported by\n+     * {@link #encodeWithTypeInfo(Object)}. Supported values types are\n+     * {@link Node}, {@link Component}, {@link ReturnChannelRegistration} and\n+     * anything accepted by {@link #canEncodeWithoutTypeInfo(Class)}.\n+     *\n+     * @param type\n+     *            the type to check\n+     * @return whether the type can be encoded\n+     */\n+    public static boolean canEncodeWithTypeInfo(Class<?> type) {\n+        return canEncodeWithoutTypeInfo(type)\n+                || Node.class.isAssignableFrom(type)\n+                || Component.class.isAssignableFrom(type)\n+                || ReturnChannelRegistration.class.isAssignableFrom(type);\n+    }\n+\n+    /**\n+     * Encodes a \""primitive\"" value or a constant pool reference to JSON. This\n+     * methods supports {@link ConstantPoolKey} in addition to the types\n+     * supported by {@link #encodeWithoutTypeInfo(Object)}.\n+     *\n+     * @param value\n+     *            the value to encode\n+     * @param constantPool\n+     *            the constant pool to use for encoding constant pool references\n+     * @return the value encoded as JSON\n+     */\n+    public static JsonNode encodeWithConstantPool(Object value,\n+            ConstantPool constantPool) {\n+        if (value instanceof ConstantPoolKey) {\n+            ConstantPoolKey reference = (ConstantPoolKey) value;\n+            return JacksonUtils.getMapper()\n+                    .valueToTree(constantPool.getConstantId(reference));\n+        } else {\n+            return encodeWithoutTypeInfo(value);\n+        }\n+    }\n+\n+    /**\n+     * Helper for encoding any \""primitive\"" value that is directly supported in\n+     * JSON. Supported values types are {@link String}, {@link Number},\n+     * {@link Boolean}, {@link JsonNode}. <code>null</code> is also supported.\n+     *\n+     * @param value\n+     *            the value to encode\n+     * @return the value encoded as JSON\n+     */\n+    public static JsonNode encodeWithoutTypeInfo(Object value) {\n+        if (value == null) {\n+            return JacksonUtils.getMapper().nullNode();\n+        }\n+\n+        assert canEncodeWithoutTypeInfo(value.getClass());\n+\n+        Class<?> type = value.getClass();\n+        if (String.class.equals(value.getClass())) {\n+            return JacksonUtils.getMapper().valueToTree(value);\n+        } else if (Integer.class.equals(type) || Double.class.equals(type)) {\n+            return JacksonUtils.getMapper()\n+                    .valueToTree(((Number) value).doubleValue());\n+        } else if (Boolean.class.equals(type)) {\n+            return JacksonUtils.getMapper()\n+                    .valueToTree(((Boolean) value).booleanValue());\n+        } else if (JsonNode.class.isAssignableFrom(type)) {\n+            return (JsonNode) value;\n+        }\n+        assert !canEncodeWithoutTypeInfo(type);\n+        throw new IllegalArgumentException(\n+                \""Can't encode \"" + value.getClass() + \"" to json\"");\n+    }\n+\n+    /**\n+     * Helper for decoding any \""primitive\"" value that is directly supported in\n+     * JSON. Supported values types are {@link String}, {@link Number},\n+     * {@link Boolean}, {@link JsonNode}.\n+     * {@link com.fasterxml.jackson.databind.node.NullNode} is also supported.\n+     *\n+     * @param json\n+     *            the JSON value to decode\n+     * @return the decoded value\n+     */\n+    public static Serializable decodeWithoutTypeInfo(ObjectNode json) {\n+        assert json != null;\n+        switch (json.getNodeType()) {\n+        case BOOLEAN:\n+            return decodeAs(json, Boolean.class);\n+        case STRING:\n+            return decodeAs(json, String.class);\n+        case NUMBER:\n+            return decodeAs(json, Double.class);\n+        case NULL:\n+            return null;\n+        default:\n+            return json;\n+        }\n+\n+    }\n+\n+    /**\n+     * Decodes the given JSON value as the given type.\n+     * <p>\n+     * Supported types are {@link String}, {@link Boolean}, {@link Integer},\n+     * {@link Double} and primitives boolean, int, double\n+     *\n+     * @param <T>\n+     *            the decoded type\n+     * @param json\n+     *            the JSON value\n+     * @param type\n+     *            the type to decode as\n+     * @return the value decoded as the given type\n+     * @throws IllegalArgumentException\n+     *             if the type was unsupported\n+     */\n+    public static <T> T decodeAs(JsonNode json, Class<T> type) {\n+        assert json != null;\n+        if (json.getNodeType() == JsonNodeType.NULL && !type.isPrimitive()) {\n+            return null;\n+        }\n+        Class<?> convertedType = ReflectTools.convertPrimitiveType(type);\n+        if (type == String.class) {\n+            return type.cast(json.asText());\n+        } else if (convertedType == Boolean.class) {\n+            return (T) convertedType.cast(Boolean.valueOf(json.asBoolean()));\n+        } else if (convertedType == Double.class) {\n+            return (T) convertedType.cast(Double.valueOf(json.doubleValue()));\n+        } else if (convertedType == Integer.class) {\n+            return (T) convertedType.cast(Integer.valueOf(json.intValue()));\n+        } else if (JsonNode.class.isAssignableFrom(type)) {\n+            return type.cast(json);\n+        } else {\n+            assert !canEncodeWithoutTypeInfo(type);\n+            throw new IllegalArgumentException(\n+                    \""Unknown type \"" + type.getName());\n+        }\n+\n+    }\n+\n+}\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\nnew file mode 100644\nindex 00000000000..3b742ac5460\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/internal/JacksonUtils.java\n@@ -0,0 +1,471 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.internal;\n+\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BinaryOperator;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+import java.util.stream.DoubleStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.DoubleNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+/**\n+ * Helpers for using <code>jackson</code>.\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ *\n+ * @author Vaadin Ltd\n+ * @since 24.7\n+ */\n+public final class JacksonUtils {\n+\n+    private static final String CANNOT_CONVERT_NULL_TO_A_JSON_OBJECT = \""Cannot convert null to JSON\"";\n+\n+    private static final String CANNOT_CONVERT_NULL_TO_OBJECT = \""Cannot convert null to Java object\"";\n+\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    static {\n+        objectMapper.registerModule(new JavaTimeModule());\n+    }\n+\n+    public static ObjectMapper getMapper() {\n+        return objectMapper;\n+    }\n+\n+    /**\n+     * Create a new ObjectNode.\n+     *\n+     * @return ObjectNode\n+     */\n+    public static ObjectNode createObjectNode() {\n+        return objectMapper.createObjectNode();\n+    }\n+\n+    /**\n+     * Create a new ArrayNode.\n+     *\n+     * @return ArrayNode\n+     */\n+    public static ArrayNode createArrayNode() {\n+        return objectMapper.createArrayNode();\n+    }\n+\n+    /**\n+     * Collects a stream of JSON values to a JSON array.\n+     *\n+     * @author Vaadin Ltd\n+     * @since 24.7\n+     */\n+    private static final class ArrayNodeCollector\n+            implements Collector<JsonNode, ArrayNode, ArrayNode> {\n+        @Override\n+        public Supplier<ArrayNode> supplier() {\n+            return objectMapper::createArrayNode;\n+        }\n+\n+        @Override\n+        public BiConsumer<ArrayNode, JsonNode> accumulator() {\n+            return ArrayNode::add;\n+        }\n+\n+        @Override\n+        public BinaryOperator<ArrayNode> combiner() {\n+            return (left, right) -> {\n+                for (int i = 0; i < right.size(); i++) {\n+                    left.set(left.size(), right.get(i));\n+                }\n+                return left;\n+            };\n+        }\n+\n+        @Override\n+        public Function<ArrayNode, ArrayNode> finisher() {\n+            return Function.identity();\n+        }\n+\n+        @Override\n+        public Set<Characteristics> characteristics() {\n+            return arrayCollectorCharacteristics;\n+        }\n+    }\n+\n+    private static final Set<Collector.Characteristics> arrayCollectorCharacteristics = Collections\n+            .unmodifiableSet(\n+                    EnumSet.of(Collector.Characteristics.IDENTITY_FINISH));\n+\n+    private JacksonUtils() {\n+        // Static-only class\n+    }\n+\n+    /**\n+     * Compares two json values for deep equality.\n+     * <p>\n+     * This is a helper for overcoming the fact that {@link ObjectNode} doesn't\n+     * override {@link Object#equals(Object)} and {\n+     * ObjectNode#jsEquals(ObjectNode)} is defined to use JavaScript semantics\n+     * where arrays and objects are equals only based on identity.\n+     *\n+     * @param a\n+     *            the first json value to check, may not be null\n+     * @param b\n+     *            the second json value to check, may not be null\n+     * @return <code>true</code> if both json values are the same;\n+     *         <code>false</code> otherwise\n+     */\n+    public static boolean jsonEquals(JsonNode a, JsonNode b) {\n+        assert a != null;\n+        assert b != null;\n+\n+        if (a == b) {\n+            return true;\n+        }\n+\n+        JsonNodeType type = a.getNodeType();\n+        if (type != b.getNodeType()) {\n+            return false;\n+        }\n+\n+        return switch (type) {\n+        case NULL -> true;\n+        case BOOLEAN -> booleanEqual(a, b);\n+        case NUMBER -> numbersEqual(a, b);\n+        case STRING -> stringEqual(a, b);\n+        case OBJECT -> jsonObjectEquals(a, b);\n+        case ARRAY -> jsonArrayEquals((ArrayNode) a, (ArrayNode) b);\n+        default ->\n+            throw new IllegalArgumentException(\""Unsupported JsonType: \"" + type);\n+        };\n+    }\n+\n+    /**\n+     * Compare String value of two JsonNode values.\n+     *\n+     * @param a\n+     *            Value one\n+     * @param b\n+     *            Value two\n+     * @return {@code true} if text content equals\n+     */\n+    public static boolean stringEqual(JsonNode a, JsonNode b) {\n+        assert a.getNodeType() == JsonNodeType.STRING;\n+        assert b.getNodeType() == JsonNodeType.STRING;\n+        return a.asText().equals(b.asText());\n+    }\n+\n+    /**\n+     * Compare boolean value of two JsonNode values.\n+     *\n+     * @param a\n+     *            Value one\n+     * @param b\n+     *            Value two\n+     * @return {@code true} if text boolean equals\n+     */\n+    public static boolean booleanEqual(JsonNode a, JsonNode b) {\n+        assert a.getNodeType() == JsonNodeType.BOOLEAN;\n+        assert b.getNodeType() == JsonNodeType.BOOLEAN;\n+        return a.asBoolean() == b.asBoolean();\n+    }\n+\n+    /**\n+     * Compare number value of two JsonNode values.\n+     *\n+     * @param a\n+     *            Value one\n+     * @param b\n+     *            Value two\n+     * @return {@code true} if number content equals\n+     */\n+    public static boolean numbersEqual(JsonNode a, JsonNode b) {\n+        assert a.getNodeType() == JsonNodeType.NUMBER;\n+        assert b.getNodeType() == JsonNodeType.NUMBER;\n+        return Double.doubleToRawLongBits(a.doubleValue()) == Double\n+                .doubleToRawLongBits(b.doubleValue());\n+    }\n+\n+    private static boolean jsonObjectEquals(JsonNode a, JsonNode b) {\n+        assert a != null;\n+        assert b != null;\n+\n+        if (a == b) {\n+            return true;\n+        }\n+\n+        List<String> keys = getKeys(a);\n+        List<String> bkeys = getKeys(b);\n+\n+        if (keys.size() != bkeys.size()) {\n+            return false;\n+        }\n+\n+        for (String key : keys) {\n+            JsonNode value = b.get(key);\n+            if (value == null || !jsonEquals(a.get(key), value)) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    public static List<String> getKeys(JsonNode node) {\n+        List<String> keys = new ArrayList<>();\n+        node.fieldNames().forEachRemaining(keys::add);\n+        return keys;\n+    }\n+\n+    private static boolean jsonArrayEquals(ArrayNode a, ArrayNode b) {\n+        assert a != null;\n+        assert b != null;\n+\n+        if (a == b) {\n+            return true;\n+        }\n+\n+        if (a.size() != b.size()) {\n+            return false;\n+        }\n+        for (int i = 0; i < a.size(); i++) {\n+            if (!jsonEquals(a.get(i), b.get(i))) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Creates a stream from a JSON array.\n+     *\n+     * @param <T>\n+     *            the stream type\n+     * @param array\n+     *            the JSON array to create a stream from\n+     * @return a stream of JSON values\n+     */\n+    public static <T extends JsonNode> Stream<T> stream(ArrayNode array) {\n+        if (array == null) {\n+            return Stream.empty();\n+        }\n+\n+        return new AbstractList<T>() {\n+            @Override\n+            public T get(int index) {\n+                return (T) array.get(index);\n+            }\n+\n+            @Override\n+            public int size() {\n+                return array.size();\n+            }\n+        }.stream();\n+    }\n+\n+    /**\n+     * Creates a stream from a JSON array of objects. This method does not\n+     * verify that all items in the array are actually JSON objects instead of\n+     * some other JSON type.\n+     *\n+     * @param array\n+     *            the JSON array to create a stream from\n+     * @return a stream of JSON objects\n+     */\n+    public static Stream<JsonNode> objectStream(ArrayNode array) {\n+        return stream(array);\n+    }\n+\n+    /**\n+     * Creates a double stream from a JSON array of numbers. This method does\n+     * not verify that all items in the array are actually JSON numbers instead\n+     * of some other JSON type.\n+     *\n+     * @param array\n+     *            the JSON array to create a stream from\n+     * @return a double stream of the values in the array\n+     */\n+    public static DoubleStream numberStream(ArrayNode array) {\n+        return JacksonUtils.<DoubleNode> stream(array)\n+                .mapToDouble(DoubleNode::doubleValue);\n+    }\n+\n+    /**\n+     * Creates a collector that collects values into a JSON array.\n+     *\n+     * @return the collector\n+     */\n+    public static Collector<JsonNode, ArrayNode, ArrayNode> asArray() {\n+        return new ArrayNodeCollector();\n+    }\n+\n+    /**\n+     * Creates a new JSON array with the given values.\n+     *\n+     * @param values\n+     *            the values that should be in the created array\n+     * @return the created array\n+     */\n+    public static ArrayNode createArray(JsonNode... values) {\n+        return Stream.of(values).collect(asArray());\n+    }\n+\n+    /**\n+     * Converts the given map into a JSON object by converting each map value to\n+     * a JSON value.\n+     *\n+     * @param <T>\n+     *            the type of the map values\n+     * @param map\n+     *            the map to convert into a JSON object\n+     * @param itemToJson\n+     *            callback for converting map values to JSON\n+     * @return the created object\n+     */\n+    public static <T> ObjectNode createObject(Map<String, T> map,\n+            Function<T, JsonNode> itemToJson) {\n+        ObjectNode object = objectMapper.createObjectNode();\n+\n+        map.forEach((key, value) -> object.put(key, itemToJson.apply(value)));\n+\n+        return object;\n+    }\n+\n+    /**\n+     * Converts the given bean to JSON.\n+     *\n+     * @param bean\n+     *            the bean to convert, not {@code null}\n+     * @return a JSON representation of the bean\n+     */\n+    public static ObjectNode beanToJson(Object bean) {\n+        Objects.requireNonNull(bean, CANNOT_CONVERT_NULL_TO_A_JSON_OBJECT);\n+\n+        return objectMapper.valueToTree(bean);\n+    }\n+\n+    /**\n+     * Converts the given list to JSON.\n+     *\n+     * @param list\n+     *            the list to convert, not {@code null}\n+     * @return a JSON representation of the bean\n+     */\n+    public static ArrayNode listToJson(List<?> list) {\n+        Objects.requireNonNull(list, CANNOT_CONVERT_NULL_TO_A_JSON_OBJECT);\n+        return objectMapper.valueToTree(list);\n+    }\n+\n+    /**\n+     * Converts the given map to JSON.\n+     *\n+     * @param map\n+     *            the map to convert, not {@code null}\n+     * @return a JSON representation of the bean\n+     */\n+    public static ObjectNode mapToJson(Map<String, ?> map) {\n+        Objects.requireNonNull(map, CANNOT_CONVERT_NULL_TO_A_JSON_OBJECT);\n+        return objectMapper.valueToTree(map);\n+    }\n+\n+    /**\n+     * Converts JsonObject into Java object of given type.\n+     *\n+     * @param jsonObject\n+     *            JSON object to convert, not {@code null}\n+     * @param tClass\n+     *            class of converted object instance\n+     * @return converted object instance\n+     * @param <T>\n+     *            type of result instance\n+     */\n+    public static <T> T readToObject(ObjectNode jsonObject, Class<T> tClass) {\n+        Objects.requireNonNull(jsonObject, CANNOT_CONVERT_NULL_TO_OBJECT);\n+        try {\n+            return objectMapper.treeToValue(jsonObject, tClass);\n+        } catch (JsonProcessingException e) {\n+            throw new JsonDecodingException(\n+                    \""Error converting JsonObject to \"" + tClass.getName(), e);\n+        }\n+    }\n+\n+    /**\n+     * Converts ObjectNode into Java object of given type.\n+     *\n+     * @param jsonValue\n+     *            JSON value to convert, not {@code null}\n+     * @param tClass\n+     *            class of converted object instance\n+     * @return converted object instance\n+     * @param <T>\n+     *            type of result instance\n+     */\n+    public static <T> T readValue(ObjectNode jsonValue, Class<T> tClass) {\n+        return readToObject(jsonValue, tClass);\n+    }\n+\n+    /**\n+     * Converts ObjectNode into Java object of given type.\n+     *\n+     * @param jsonValue\n+     *            JSON value to convert, not {@code null}\n+     * @param typeReference\n+     *            type reference of converted object instance\n+     * @return converted object instance\n+     * @param <T>\n+     *            type of result instance\n+     */\n+    public static <T> T readValue(ObjectNode jsonValue,\n+            TypeReference<T> typeReference) {\n+        Objects.requireNonNull(jsonValue, CANNOT_CONVERT_NULL_TO_OBJECT);\n+        try {\n+            return objectMapper.treeToValue(jsonValue, typeReference);\n+        } catch (JsonProcessingException e) {\n+            throw new JsonDecodingException(\""Error converting ObjectNode to \""\n+                    + typeReference.getType().getTypeName(), e);\n+        }\n+    }\n+\n+    /**\n+     * Converts Java object into ObjectNode.\n+     *\n+     * @param object\n+     *            Java object to convert\n+     * @return converted JSON value\n+     */\n+    public static ObjectNode writeValue(Object object) {\n+        return objectMapper.valueToTree(object);\n+    }\n+}\n"", ""test_patch"": ""diff --git a/flow-server/src/test/java/com/vaadin/flow/internal/JacksonCodecTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/JacksonCodecTest.java\nnew file mode 100644\nindex 00000000000..d66eb95f228\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/JacksonCodecTest.java\n@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.NumericNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.dom.Element;\n+import com.vaadin.flow.dom.ElementFactory;\n+import com.vaadin.flow.internal.nodefeature.ElementChildrenList;\n+\n+public class JacksonCodecTest {\n+    private static final List<Object> withTypeInfoUnsupportedValues = Arrays\n+            .asList(new Object(), new StateNode(), new Date(), new String[0],\n+                    new ArrayList<>(), new HashSet<>(), new HashMap<>());\n+\n+    private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    @Test\n+    public void encodeWithoutTypeInfo_supportedTypes() {\n+        assertJsonEquals(objectMapper.valueToTree(true),\n+                JacksonCodec.encodeWithoutTypeInfo(Boolean.TRUE));\n+        assertJsonEquals(objectMapper.valueToTree(\""string\""),\n+                JacksonCodec.encodeWithoutTypeInfo(\""string\""));\n+        assertJsonEquals(objectMapper.valueToTree(3.14),\n+                JacksonCodec.encodeWithoutTypeInfo(Double.valueOf(3.14)));\n+        assertJsonEquals(objectMapper.valueToTree(42),\n+                JacksonCodec.encodeWithoutTypeInfo(Integer.valueOf(42)));\n+        assertJsonEquals(objectMapper.nullNode(),\n+                JacksonCodec.encodeWithoutTypeInfo(null));\n+        ObjectNode json = objectMapper.createObjectNode();\n+        json.put(\""foo\"", \""bar\"");\n+        assertJsonEquals(json, JacksonCodec.encodeWithoutTypeInfo(json));\n+\n+        assertJsonEquals(objectMapper.nullNode(), objectMapper.nullNode());\n+        assertJsonEquals(objectMapper.valueToTree(false),\n+                objectMapper.valueToTree(false));\n+        assertJsonEquals(objectMapper.valueToTree(234),\n+                objectMapper.valueToTree(234));\n+        assertJsonEquals(objectMapper.valueToTree(\""string\""),\n+                objectMapper.valueToTree(\""string\""));\n+        assertJsonEquals(json, json);\n+        assertJsonEquals(objectMapper.createArrayNode(),\n+                objectMapper.createArrayNode());\n+    }\n+\n+    @Test\n+    public void encodeWithoutTypeInfo_unsupportedTypes() {\n+        List<Object> unsupported = new ArrayList<>(\n+                withTypeInfoUnsupportedValues);\n+        unsupported.add(ElementFactory.createDiv());\n+\n+        for (Object value : unsupported) {\n+            boolean thrown = false;\n+            try {\n+                JacksonCodec.encodeWithoutTypeInfo(value);\n+\n+            } catch (AssertionError expected) {\n+                thrown = true;\n+            }\n+            if (!thrown) {\n+                Assert.fail(\""Should throw for \"" + value.getClass());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void encodeWithTypeInfo_basicTypes() {\n+        assertJsonEquals(objectMapper.valueToTree(true),\n+                JacksonCodec.encodeWithTypeInfo(Boolean.TRUE));\n+        assertJsonEquals(objectMapper.nullNode(),\n+                JacksonCodec.encodeWithTypeInfo(null));\n+\n+        assertJsonEquals(objectMapper.valueToTree(234),\n+                JacksonCodec.encodeWithTypeInfo(objectMapper.valueToTree(234)));\n+        assertJsonEquals(objectMapper.valueToTree(\""string\""), JacksonCodec\n+                .encodeWithTypeInfo(objectMapper.valueToTree(\""string\"")));\n+        assertJsonEquals(objectMapper.createObjectNode(), JacksonCodec\n+                .encodeWithTypeInfo(objectMapper.createObjectNode()));\n+\n+        // Array is escaped\n+        assertJsonEquals(\n+                JacksonUtils.createArray(\n+                        objectMapper.valueToTree(JacksonCodec.ARRAY_TYPE),\n+                        objectMapper.createArrayNode()),\n+                JacksonCodec\n+                        .encodeWithTypeInfo(objectMapper.createArrayNode()));\n+    }\n+\n+    @Test\n+    public void encodeWithTypeInfo_attachedElement() {\n+        Element element = ElementFactory.createDiv();\n+\n+        StateTree tree = new StateTree(new UI().getInternals(),\n+                ElementChildrenList.class);\n+        tree.getRootNode().getFeature(ElementChildrenList.class).add(0,\n+                element.getNode());\n+\n+        JsonNode json = JacksonCodec.encodeWithTypeInfo(element);\n+\n+        assertJsonEquals(\n+                JacksonUtils.createArray(\n+                        objectMapper.valueToTree(JacksonCodec.NODE_TYPE),\n+                        objectMapper.valueToTree(element.getNode().getId())),\n+                json);\n+    }\n+\n+    @Test\n+    public void encodeWithTypeInfo_detachedElement() {\n+        Element element = ElementFactory.createDiv();\n+\n+        JsonNode json = JacksonCodec.encodeWithTypeInfo(element);\n+\n+        assertJsonEquals(objectMapper.nullNode(), json);\n+    }\n+\n+    @Test\n+    public void encodeWithTypeInfo_unsupportedTypes() {\n+        for (Object value : withTypeInfoUnsupportedValues) {\n+            boolean thrown = false;\n+            try {\n+                JacksonCodec.encodeWithTypeInfo(value);\n+\n+            } catch (AssertionError expected) {\n+                thrown = true;\n+            }\n+            if (!thrown) {\n+                Assert.fail(\""Should throw for \"" + value.getClass());\n+            }\n+        }\n+    }\n+\n+    private static void assertJsonEquals(JsonNode expected, JsonNode actual) {\n+        Assert.assertTrue(\n+                actual.toString() + \"" does not equal \"" + expected.toString(),\n+                JacksonUtils.jsonEquals(expected, actual));\n+    }\n+\n+    @Test\n+    public void decodeAs_booleanJson() {\n+        JsonNode json = objectMapper.valueToTree(true);\n+        Assert.assertTrue(JacksonCodec.decodeAs(json, Boolean.class));\n+        Assert.assertEquals(\""true\"", JacksonCodec.decodeAs(json, String.class));\n+        Assert.assertEquals(Integer.valueOf(0),\n+                JacksonCodec.decodeAs(json, Integer.class));\n+        Assert.assertEquals(Double.valueOf(0.0),\n+                JacksonCodec.decodeAs(json, Double.class));\n+        Assert.assertEquals(json, JacksonCodec.decodeAs(json, JsonNode.class));\n+    }\n+\n+    @Test\n+    public void decodeAs_stringJson() {\n+        JsonNode json = objectMapper.valueToTree(\""Test123 String\\n !%\"");\n+        Assert.assertFalse(JacksonCodec.decodeAs(json, Boolean.class));\n+        Assert.assertEquals(\""Test123 String\\n !%\"",\n+                JacksonCodec.decodeAs(json, String.class));\n+        Assert.assertEquals(Integer.valueOf(0),\n+                JacksonCodec.decodeAs(json, Integer.class));\n+        Assert.assertFalse(JacksonCodec.decodeAs(json, Double.class).isNaN());\n+        Assert.assertEquals(json, JacksonCodec.decodeAs(json, JsonNode.class));\n+    }\n+\n+    @Test\n+    public void decodeAs_numberJson() {\n+        JsonNode json = objectMapper.valueToTree(15.7);\n+        Assert.assertFalse(JacksonCodec.decodeAs(json, Boolean.class));\n+        Assert.assertEquals(\""15.7\"", JacksonCodec.decodeAs(json, String.class));\n+        Assert.assertEquals(Integer.valueOf(15),\n+                JacksonCodec.decodeAs(json, Integer.class));\n+        Assert.assertEquals(Double.valueOf(15.7),\n+                JacksonCodec.decodeAs(json, Double.class));\n+        Assert.assertEquals(json, JacksonCodec.decodeAs(json, JsonNode.class));\n+    }\n+\n+    @Test\n+    public void decodeAs_nullJson() {\n+        JsonNode json = objectMapper.nullNode();\n+        Assert.assertNull(JacksonCodec.decodeAs(json, Boolean.class));\n+        Assert.assertNull(JacksonCodec.decodeAs(json, String.class));\n+        Assert.assertNull(JacksonCodec.decodeAs(json, Integer.class));\n+        Assert.assertNull(JacksonCodec.decodeAs(json, Double.class));\n+        Assert.assertNull(JacksonCodec.decodeAs(json, JsonNode.class));\n+    }\n+\n+    @Test\n+    public void decodeAs_jsonValue() {\n+        ObjectNode json = objectMapper.createObjectNode();\n+        json.put(\""foo\"", \""bar\"");\n+        Assert.assertEquals(\""\"", JacksonCodec.decodeAs(json, String.class));\n+        Assert.assertEquals(json, JacksonCodec.decodeAs(json, JsonNode.class));\n+        // boolean\n+        Assert.assertFalse(JacksonCodec.decodeAs(json, Boolean.class));\n+        Assert.assertNull(\n+                JacksonCodec.decodeAs(objectMapper.nullNode(), Boolean.class));\n+        Assert.assertFalse(JacksonCodec.decodeAs(json, boolean.class));\n+        Assert.assertFalse(\n+                JacksonCodec.decodeAs(objectMapper.nullNode(), boolean.class));\n+        // integer\n+        Assert.assertEquals(Integer.valueOf(0),\n+                JacksonCodec.decodeAs(json, Integer.class));\n+        Assert.assertNull(\n+                JacksonCodec.decodeAs(objectMapper.nullNode(), Integer.class));\n+        Assert.assertEquals(Integer.valueOf(0),\n+                JacksonCodec.decodeAs(json, int.class));\n+        Assert.assertEquals(Integer.valueOf(0),\n+                JacksonCodec.decodeAs(objectMapper.nullNode(), int.class));\n+        // double\n+        Assert.assertNull(\n+                JacksonCodec.decodeAs(objectMapper.nullNode(), Double.class));\n+        Assert.assertEquals(Double.valueOf(0.0),\n+                JacksonCodec.decodeAs(json, Double.class));\n+        Assert.assertEquals(Double.valueOf(0.0),\n+                JacksonCodec.decodeAs(json, double.class));\n+        Assert.assertEquals(0.0d,\n+                JacksonCodec.decodeAs(objectMapper.nullNode(), double.class),\n+                0.0001d);\n+    }\n+\n+    @Test(expected = ClassCastException.class)\n+    public void decodeAs_jsonValueWrongType_classCastException() {\n+        ObjectNode json = objectMapper.createObjectNode();\n+        json.put(\""foo\"", \""bar\"");\n+        JacksonCodec.decodeAs(json, NumericNode.class);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void decodeAs_unsupportedType() {\n+        Assert.assertNull(JacksonCodec.decodeAs(objectMapper.valueToTree(\""foo\""),\n+                float.class));\n+    }\n+}\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java b/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java\nnew file mode 100644\nindex 00000000000..ff6aaacadea\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/internal/JacksonUtilsTest.java\n@@ -0,0 +1,475 @@\n+/*\n+ * Copyright 2000-2025 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.internal;\n+\n+import java.time.Duration;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.DoubleStream;\n+import java.util.stream.Stream;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.DoubleNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class JacksonUtilsTest {\n+    ObjectMapper mapper = new ObjectMapper();\n+\n+    @Test\n+    public void testEquals() {\n+        // Equal\n+        Assert.assertTrue(JacksonUtils.jsonEquals(mapper.valueToTree(true),\n+                mapper.valueToTree(true)));\n+        Assert.assertTrue(JacksonUtils.jsonEquals(mapper.valueToTree(\""foo\""),\n+                mapper.valueToTree(\""foo\"")));\n+        Assert.assertTrue(JacksonUtils.jsonEquals(mapper.valueToTree(3.14),\n+                mapper.valueToTree(3.14)));\n+        Assert.assertTrue(\n+                JacksonUtils.jsonEquals(mapper.nullNode(), mapper.nullNode()));\n+        Assert.assertTrue(JacksonUtils.jsonEquals(createTestObject1(),\n+                createTestObject1()));\n+        Assert.assertTrue(JacksonUtils.jsonEquals(createTestArray1(),\n+                createTestArray1()));\n+\n+        // Non-equal with matching types\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.valueToTree(true),\n+                mapper.valueToTree(false)));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.valueToTree(\""foo\""),\n+                mapper.valueToTree(\""oof\"")));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.valueToTree(3.14),\n+                mapper.valueToTree(3.142)));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(createTestObject1(),\n+                createTestObject2()));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(createTestArray1(),\n+                createTestArray2()));\n+\n+        // Non-equal with different types\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.valueToTree(true),\n+                mapper.valueToTree(\""true\"")));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.valueToTree(3.14),\n+                mapper.valueToTree(\""3.14\"")));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.nullNode(),\n+                mapper.valueToTree(\""null\"")));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.createObjectNode(),\n+                mapper.valueToTree(\""{}\"")));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(mapper.createArrayNode(),\n+                mapper.valueToTree(0)));\n+        Assert.assertFalse(JacksonUtils.jsonEquals(createTestArray1(),\n+                createTestObject1()));\n+    }\n+\n+    @Test(expected = AssertionError.class)\n+    public void testEquals_firstNull_throws() {\n+        JacksonUtils.jsonEquals(null, mapper.nullNode());\n+    }\n+\n+    @Test(expected = AssertionError.class)\n+    public void testEquals_secondNull_throws() {\n+        JacksonUtils.jsonEquals(mapper.nullNode(), null);\n+    }\n+\n+    private ObjectNode createTestObject1() {\n+        ObjectNode object = mapper.createObjectNode();\n+\n+        object.put(\""foo\"", \""foo\"");\n+        object.set(\""bar\"", createTestArray1());\n+        object.set(\""baz\"", mapper.createObjectNode());\n+\n+        return object;\n+    }\n+\n+    private ObjectNode createTestObject2() {\n+        ObjectNode object = mapper.createObjectNode();\n+\n+        object.put(\""foo\"", \""oof\"");\n+        object.set(\""bar\"", createTestArray2());\n+        object.set(\""baz\"", mapper.createArrayNode());\n+\n+        return object;\n+    }\n+\n+    private ArrayNode createTestArray1() {\n+        return Stream\n+                .of((JsonNode) mapper.valueToTree(\""foo\""),\n+                        mapper.createObjectNode())\n+                .collect(JacksonUtils.asArray());\n+    }\n+\n+    private ArrayNode createTestArray2() {\n+        return Stream\n+                .of((JsonNode) mapper.valueToTree(\""bar\""),\n+                        mapper.createArrayNode())\n+                .collect(JacksonUtils.asArray());\n+    }\n+\n+    private ArrayNode createNumberArray(double... items) {\n+        return DoubleStream.of(items).mapToObj(mapper::valueToTree)\n+                .map(obj -> (DoubleNode) obj).collect(JacksonUtils.asArray());\n+    }\n+\n+    @Test\n+    public void collectEmptyStream() {\n+        Stream<JsonNode> jsonValueStream = Stream.empty();\n+        ArrayNode a = jsonValueStream.collect(JacksonUtils.asArray());\n+        Assert.assertEquals(0, a.size());\n+    }\n+\n+    @Test\n+    public void testStream() {\n+        ArrayNode array = createTestArray1();\n+        List<JsonNode> list = JacksonUtils.stream(array).toList();\n+\n+        Assert.assertEquals(2, list.size());\n+        Assert.assertEquals(\""foo\"", list.get(0).textValue());\n+        Assert.assertTrue(JacksonUtils.jsonEquals(list.get(1),\n+                mapper.createObjectNode()));\n+    }\n+\n+    @Test\n+    public void testObjectStream() {\n+        ArrayNode array = Stream.of(mapper.createObjectNode(),\n+                createTestObject1(), createTestObject2())\n+                .collect(JacksonUtils.asArray());\n+\n+        List<JsonNode> objects = JacksonUtils.objectStream(array).toList();\n+\n+        Assert.assertEquals(3, objects.size());\n+        Assert.assertTrue(JacksonUtils.jsonEquals(mapper.createObjectNode(),\n+                objects.get(0)));\n+        Assert.assertTrue(\n+                JacksonUtils.jsonEquals(createTestObject1(), objects.get(1)));\n+        Assert.assertTrue(\n+                JacksonUtils.jsonEquals(createTestObject2(), objects.get(2)));\n+    }\n+\n+    @Test\n+    public void testNumberStream() {\n+        double[] values = new double[] { 3.14, 42, Double.MAX_VALUE };\n+\n+        ArrayNode array = DoubleStream.of(values)\n+                .mapToObj(obj -> mapper.valueToTree(obj))\n+                .map(obj -> (DoubleNode) obj).collect(JacksonUtils.asArray());\n+\n+        DoubleStream numberStream = JacksonUtils.numberStream(array);\n+\n+        Assert.assertArrayEquals(values, numberStream.toArray(), 0);\n+    }\n+\n+    @Test\n+    public void testAsArray() {\n+        Stream<JsonNode> stream = JacksonUtils.stream(createTestArray1());\n+\n+        ArrayNode array = stream.collect(JacksonUtils.asArray());\n+\n+        Assert.assertTrue(JacksonUtils.jsonEquals(createTestArray1(), array));\n+    }\n+\n+    @Test\n+    public void testCreateArray() {\n+        ArrayNode array = JacksonUtils.createArray(mapper.valueToTree(\""string\""),\n+                mapper.nullNode());\n+\n+        Assert.assertEquals(2, array.size());\n+        Assert.assertEquals(\""string\"", array.get(0).asText());\n+        Assert.assertTrue(array.get(1).isNull());\n+    }\n+\n+    @Test\n+    public void testCreateEmptyArray() {\n+        ArrayNode array = JacksonUtils.createArray();\n+\n+        Assert.assertEquals(0, array.size());\n+    }\n+\n+    @Test\n+    public void createObject() {\n+        HashMap<String, Object> map = new HashMap<>();\n+        map.put(\""integer\"", Integer.valueOf(3));\n+        map.put(\""string\"", \""foo\"");\n+\n+        ObjectNode object = JacksonUtils.createObject(map, item -> {\n+            if (item instanceof Integer) {\n+                return mapper.valueToTree(((Integer) item).doubleValue());\n+            } else {\n+                return mapper.valueToTree(String.valueOf(item));\n+            }\n+        });\n+\n+        Assert.assertEquals(2, JacksonUtils.getKeys(object).size());\n+        Assert.assertEquals(3, object.get(\""integer\"").asInt(), 0);\n+        Assert.assertEquals(\""foo\"", object.get(\""string\"").asText());\n+    }\n+\n+    @Test\n+    public void testCreateEmptyObject() {\n+        ObjectNode object = JacksonUtils.createObject(Collections.emptyMap(),\n+                item -> {\n+                    throw new AssertionError(\""Callback should not be called\"");\n+                });\n+\n+        Assert.assertEquals(0, JacksonUtils.getKeys(object).size());\n+    }\n+\n+    public static class SimpleBean {\n+        private String string = \""value\"";\n+        private int number = 1;\n+\n+        private float flt = 2.3f;\n+        private double dbl = 4.56;\n+\n+        public String getString() {\n+            return string;\n+        }\n+\n+        public int getNumber() {\n+            return number;\n+        }\n+\n+        public float getFlt() {\n+            return flt;\n+        }\n+\n+        public double getDbl() {\n+            return dbl;\n+        }\n+    }\n+\n+    public static class ParentBean {\n+        private String parentValue = \""parent\"";\n+        private ChildBean child = new ChildBean();\n+\n+        public String getParentValue() {\n+            return parentValue;\n+        }\n+\n+        public ChildBean getChild() {\n+            return child;\n+        }\n+    }\n+\n+    public static class ChildBean {\n+        private String childValue = \""child\"";\n+\n+        public String getChildValue() {\n+            return childValue;\n+        }\n+    }\n+\n+    public static class BeanWithTemporalFields {\n+\n+        public LocalTime localTime = LocalTime.of(10, 23, 55);\n+\n+        public LocalDate localDate = LocalDate.of(2024, 6, 26);\n+\n+        public LocalDateTime localDateTime = localDate.atTime(localTime);\n+\n+        public java.sql.Date sqlDate = java.sql.Date.valueOf(localDate);\n+\n+        public Date date = new Date(sqlDate.getTime());\n+\n+        public ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime,\n+                ZoneId.of(\""Europe/Rome\""));\n+\n+        public Duration duration = Duration.ofSeconds(10);\n+    }\n+\n+    public static class ListAndMapBean {\n+        private Map<String, Integer> integerMap = new HashMap<>();\n+        private Map<String, ChildBean> childBeanMap = new HashMap<>();\n+\n+        private List<Integer> integerList = new ArrayList<>();\n+        private List<ChildBean> childBeanList = new ArrayList<>();\n+        {\n+            integerMap.put(\""one\"", 1);\n+            integerMap.put(\""two\"", 2);\n+\n+            integerList.add(3);\n+            integerList.add(2);\n+            integerList.add(1);\n+\n+            ChildBean firstChild = new ChildBean();\n+            firstChild.childValue = \""firstChildValue\"";\n+            childBeanMap.put(\""First\"", firstChild);\n+            ChildBean secondChild = new ChildBean();\n+            secondChild.childValue = \""secondChildValue\"";\n+            childBeanMap.put(\""Second\"", secondChild);\n+\n+            childBeanList.add(firstChild);\n+            childBeanList.add(secondChild);\n+        }\n+\n+        // these getters are needed for bean serialization:\n+        public Map<String, Integer> getIntegerMap() {\n+            return integerMap;\n+        }\n+\n+        public List<ChildBean> getChildBeanList() {\n+            return childBeanList;\n+        }\n+\n+        public List<Integer> getIntegerList() {\n+            return integerList;\n+        }\n+\n+        public Map<String, ChildBean> getChildBeanMap() {\n+            return childBeanMap;\n+        }\n+    }\n+\n+    @Test\n+    public void simpleBeanToJson() {\n+        ObjectNode json = JacksonUtils.beanToJson(new SimpleBean());\n+        Assert.assertEquals(\""value\"", json.get(\""string\"").asText());\n+        Assert.assertEquals(1.0, json.get(\""number\"").asDouble(), 0.0);\n+        Assert.assertEquals(2.3f, json.get(\""flt\"").floatValue(), 0.0);\n+        Assert.assertEquals(4.56, json.get(\""dbl\"").asDouble(), 0.0);\n+    }\n+\n+    @Test\n+    public void nestedBeanToJson() {\n+        ObjectNode json = JacksonUtils.beanToJson(new ParentBean());\n+        Assert.assertEquals(\""parent\"", json.get(\""parentValue\"").asText());\n+        JsonNode child = json.get(\""child\"");\n+        Assert.assertEquals(\""child\"", child.get(\""childValue\"").asText());\n+    }\n+\n+    @Test\n+    public void beanWithTimeFields() {\n+        BeanWithTemporalFields bean = new BeanWithTemporalFields();\n+        ObjectNode json = JacksonUtils.beanToJson(bean);\n+\n+        Assert.assertTrue(\""LocalTime not serialized as expected\"",\n+                JacksonUtils.jsonEquals(createNumberArray(10, 23, 55),\n+                        json.get(\""localTime\"")));\n+        Assert.assertTrue(\""LocalDate not serialized as expected\"",\n+                JacksonUtils.jsonEquals(createNumberArray(2024, 6, 26),\n+                        json.get(\""localDate\"")));\n+        Assert.assertTrue(\""LocalDateTime not serialized as expected\"",\n+                JacksonUtils.jsonEquals(\n+                        createNumberArray(2024, 6, 26, 10, 23, 55),\n+                        json.get(\""localDateTime\"")));\n+        Assert.assertEquals(\""ZonedDateTime not serialized as expected\"",\n+                bean.zonedDateTime.toEpochSecond(),\n+                json.get(\""zonedDateTime\"").asInt(), 0);\n+        Assert.assertEquals(\""ZonedDateTime not serialized as expected\"",\n+                bean.sqlDate.getTime(), json.get(\""sqlDate\"").asLong(), 0);\n+        Assert.assertEquals(\""ZonedDateTime not serialized as expected\"",\n+                bean.date.getTime(), json.get(\""date\"").asLong(), 0);\n+        Assert.assertEquals(10.0, json.get(\""duration\"").asLong(), 0);\n+    }\n+\n+    @Test\n+    public void nullChildBean() {\n+        ParentBean bean = new ParentBean();\n+        bean.child = null;\n+\n+        ObjectNode json = JacksonUtils.beanToJson(bean);\n+        Assert.assertEquals(mapper.nullNode(), json.get(\""child\""));\n+    }\n+\n+    @Test\n+    public void beanWithListAndMap() {\n+        ListAndMapBean bean = new ListAndMapBean();\n+\n+        ObjectNode json = JacksonUtils.beanToJson(bean);\n+\n+        JsonNode integerMap = json.get(\""integerMap\"");\n+        Assert.assertEquals(1, integerMap.get(\""one\"").asInt(), 0);\n+        Assert.assertEquals(2, integerMap.get(\""two\"").asInt(), 0);\n+\n+        JsonNode childBeanMap = json.get(\""childBeanMap\"");\n+        JsonNode firstChild = childBeanMap.get(\""First\"");\n+        Assert.assertEquals(\""firstChildValue\"",\n+                firstChild.get(\""childValue\"").asText());\n+        JsonNode secondChild = childBeanMap.get(\""Second\"");\n+        Assert.assertEquals(\""secondChildValue\"",\n+                secondChild.get(\""childValue\"").asText());\n+\n+        JsonNode integerList = json.get(\""integerList\"");\n+        Assert.assertEquals(3, integerList.get(0).asInt(), 0);\n+        Assert.assertEquals(2, integerList.get(1).asInt(), 0);\n+        Assert.assertEquals(1, integerList.get(2).asInt(), 0);\n+\n+        JsonNode childBeanList = json.get(\""childBeanList\"");\n+        Assert.assertEquals(\""firstChildValue\"",\n+                childBeanList.get(0).get(\""childValue\"").asText());\n+        Assert.assertEquals(\""secondChildValue\"",\n+                childBeanList.get(1).get(\""childValue\"").asText());\n+    }\n+\n+    @Test\n+    public void simpleBeanListToJson() {\n+        ArrayList<SimpleBean> list = new ArrayList<>();\n+        SimpleBean bean1 = new SimpleBean();\n+        bean1.string = \""bean1\"";\n+        SimpleBean bean2 = new SimpleBean();\n+        bean2.string = \""bean2\"";\n+        list.add(bean1);\n+        list.add(bean2);\n+        ArrayNode json = JacksonUtils.listToJson(list);\n+\n+        Assert.assertEquals(\""bean1\"", json.get(0).get(\""string\"").asText());\n+        Assert.assertEquals(\""bean2\"", json.get(1).get(\""string\"").asText());\n+    }\n+\n+    @Test\n+    public void simpleMapToJson() {\n+        Map<String, Object> map = new HashMap<>();\n+        SimpleBean bean1 = new SimpleBean();\n+        bean1.string = \""bean1\"";\n+        SimpleBean bean2 = new SimpleBean();\n+        bean2.string = \""bean2\"";\n+\n+        map.put(\""one\"", bean1);\n+        map.put(\""two\"", bean2);\n+        ObjectNode json = JacksonUtils.mapToJson(map);\n+\n+        Assert.assertEquals(\""bean1\"", json.get(\""one\"").get(\""string\"").asText());\n+        Assert.assertEquals(\""bean2\"", json.get(\""two\"").get(\""string\"").asText());\n+    }\n+\n+    public record Person(String name, double age, boolean canSwim) {\n+\n+    }\n+\n+    @Test\n+    public void testReadObject() {\n+        ObjectNode jsonObject = mapper.createObjectNode();\n+        jsonObject.put(\""name\"", \""Foo\"");\n+        jsonObject.put(\""age\"", 30.5);\n+        jsonObject.put(\""canSwim\"", true);\n+\n+        Person person = JacksonUtils.readToObject(jsonObject, Person.class);\n+\n+        Assert.assertEquals(\""Foo\"", person.name);\n+        Assert.assertEquals(30.5, person.age, 0.0);\n+        Assert.assertTrue(person.canSwim);\n+    }\n+\n+}\n\ndiff --git a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\nindex af921ff36e2..393c4378eff 100644\n--- a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n+++ b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java\n@@ -125,6 +125,7 @@ protected Stream<String> getExcludedPatterns() {\n                 \""com\\\\.vaadin\\\\.flow\\\\.internal\\\\.DevModeHandler\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.internal\\\\.JsonSerializer\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.internal\\\\.JsonCodec\"",\n+                \""com\\\\.vaadin\\\\.flow\\\\.internal\\\\.JacksonCodec\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.internal\\\\.ReflectionCacheHotswapper\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.internal\\\\.UsageStatistics(\\\\$.*)?\"",\n                 \""com\\\\.vaadin\\\\.flow\\\\.internal\\\\.nodefeature\\\\.NodeFeatureRegistry\"",\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-20688"", ""pr_id"": 20688, ""issue_id"": 11026, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Exception in push connection when logging out\n### Description of the bug / feature\r\nSince switching to the default Push transport (#10931) we always get an \u201cException in push connection\u201d when logging out.\r\n\r\nNote: the exception is not thrown when simply closing the browser window\u2026\r\n\r\n### Minimal reproducible example\r\nOur application is a pretty basic view/form application. Login/authentication is handled by a remote service using REST calls (`KioskAuthenticationProvider`). Logout is via a \u201clogout\u201d anchor in the top bar of the layout.\r\n\r\nOur security configuration  is as follows:\r\n```\r\n@RequiredArgsConstructor\r\n@EnableWebSecurity\r\n@Configuration\r\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\r\n\r\n    private static final String LOGIN_PROCESSING_URL = \""/login\"";\r\n    private static final String LOGIN_FAILURE_URL = \""/login?error\"";\r\n    private static final String LOGIN_URL = \""/login\"";\r\n    private static final String LOGOUT_SUCCESS_URL = \""/login\"";\r\n\r\n    private final LoginService loginService;\r\n\r\n    /**\r\n     * Tests if the request is an internal framework request. The test consists of\r\n     * checking if the request parameter is present and if its value is consistent\r\n     * with any of the request types know.\r\n     *\r\n     * @param request {@link HttpServletRequest}\r\n     * @return true if the request is an internal framework request. False otherwise.\r\n     */\r\n    public static boolean isFrameworkInternalRequest(HttpServletRequest request) {\r\n        final String parameterValue = request.getParameter(ApplicationConstants.REQUEST_TYPE_PARAMETER);\r\n        return parameterValue != null &&\r\n               Stream.of(HandlerHelper.RequestType.values()).anyMatch(r -> r.getIdentifier().equals(parameterValue));\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationProvider authenticationProvider() {\r\n        return new KioskAuthenticationProvider(loginService);\r\n    }\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) {\r\n        auth.authenticationProvider(authenticationProvider());\r\n    }\r\n\r\n    /**\r\n     * Require login to access internal pages and configure login form.\r\n     */\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        // Not using Spring CSRF here to be able to use plain HTML for the login page\r\n        http.csrf()\r\n            .disable()\r\n\r\n            // Register our CustomRequestCache, that saves unauthorized access attempts, so\r\n            // the user is redirected after login.\r\n            .requestCache()\r\n            .requestCache(new SimpleRequestCache())\r\n\r\n            // Restrict access to our application.\r\n            .and()\r\n            .authorizeRequests()\r\n\r\n            // Allow health checks\r\n            .antMatchers(\""/actuator/health\"")\r\n            .permitAll()\r\n\r\n            // Allow all Vaadin internal requests.\r\n            .requestMatchers(SecurityConfiguration::isFrameworkInternalRequest)\r\n            .permitAll()\r\n\r\n            // Allow all other requests by logged in users.\r\n            .anyRequest()\r\n            .authenticated()\r\n\r\n            // Configure the login page.\r\n            .and()\r\n            .formLogin()\r\n            .loginPage(LOGIN_URL)\r\n            .permitAll()\r\n            .loginProcessingUrl(LOGIN_PROCESSING_URL)\r\n            .failureUrl(LOGIN_FAILURE_URL)\r\n\r\n            // Configure logout\r\n            .and()\r\n            .logout()\r\n            .logoutSuccessUrl(LOGOUT_SUCCESS_URL);\r\n    }\r\n\r\n    /**\r\n     * Allows access to static resources, bypassing Spring security.\r\n     */\r\n    @Override\r\n    public void configure(WebSecurity web) {\r\n        web.ignoring().antMatchers(\r\n                // Client-side JS\r\n                \""/VAADIN/**\"",\r\n\r\n                // the standard favicon URI\r\n                \""/favicon.ico\"",\r\n\r\n                // the robots exclusion standard\r\n                \""/robots.txt\"",\r\n\r\n                // web application manifest\r\n                \""/manifest.webmanifest\"", \""/sw.js\"", \""/offline.html\"",\r\n\r\n                // icons and images\r\n                \""/icons/**\"", \""/META-INF/resources/images/**\"", \""/styles/**\"");\r\n    }\r\n\r\n}\r\n```\r\n\r\nThe UI is configured as follows:\r\n```\r\n/**\r\n * Component to set up the Vaadin UI.\r\n *\r\n * Sets up the locale and adds a {@link BeforeEnterEvent} handler to redirect to the login page if a user isn't already\r\n * logged-in.\r\n */\r\n@Component\r\npublic class ManagementServiceInitListener implements VaadinServiceInitListener {\r\n\r\n    public ManagementServiceInitListener(@NotNull CommonProperties commonProperties) {\r\n        Locale.setDefault(commonProperties.getLocaleFromProperties());\r\n    }\r\n\r\n    @Override\r\n    public void serviceInit(@NotNull ServiceInitEvent event) {\r\n        event.getSource().addUIInitListener(uiEvent -> {\r\n            UI ui = uiEvent.getUI();\r\n            ui.addBeforeEnterListener(this::beforeEnter);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reroutes the user to the login page unless already logged-in.\r\n     *\r\n     * @param event before navigation event with event details.\r\n     */\r\n    protected void beforeEnter(@NotNull BeforeEnterEvent event) {\r\n        if (!LoginView.class.equals(event.getNavigationTarget()) && !LoginService.isUserLoggedIn()) {\r\n            event.rerouteTo(LoginView.class);\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\nThe login view is straightforward:\r\n```\r\n@Route(\""login\"")\r\n@PageTitle(\""Login | Management Console\"")\r\npublic class LoginView extends VerticalLayout implements BeforeEnterObserver {\r\n\r\n    private final LoginForm loginForm;\r\n\r\n    public LoginView() {\r\n        addClassName(\""login-view\"");\r\n        setSizeFull();\r\n        setJustifyContentMode(JustifyContentMode.CENTER);\r\n        setAlignItems(Alignment.CENTER);\r\n\r\n        H1 title = new H1(\""Management Console\"");\r\n\r\n        loginForm = new LoginForm(createDutchLogin());\r\n        configureLoginForm();\r\n\r\n        add(title, loginForm);\r\n    }\r\n\r\n    @Override\r\n    public void beforeEnter(@NotNull BeforeEnterEvent beforeEnterEvent) {\r\n        if (beforeEnterEvent.getLocation().getQueryParameters().getParameters().containsKey(\""error\"")) {\r\n            loginForm.setError(true);\r\n        }\r\n    }\r\n\r\n    private @NotNull LoginI18n createDutchLogin() {\r\n        LoginI18n loginI18n = LoginI18n.createDefault();\r\n\r\n        // Form\r\n        LoginI18n.Form form = loginI18n.getForm();\r\n        form.setTitle(\""Inloggen\"");\r\n        form.setUsername(\""Gebruikersnaam\"");\r\n        form.setPassword(\""Wachtwoord\"");\r\n        form.setForgotPassword(\""Wachtwoord vergeten?\"");\r\n        form.setSubmit(\""Log in\"");\r\n\r\n        // Error Message\r\n        LoginI18n.ErrorMessage errorMessage = loginI18n.getErrorMessage();\r\n        errorMessage.setTitle(\""Probleem bij het inloggen\"");\r\n        errorMessage.setMessage(\""Controleer of u de juiste gegevens heeft ingevoerd en probeer het dan nogmaals.\"");\r\n\r\n        return loginI18n;\r\n    }\r\n\r\n    private void configureLoginForm() {\r\n        loginForm.setForgotPasswordButtonVisible(false);\r\n        loginForm.setAction(\""login\"");\r\n    }\r\n\r\n}\r\n```\r\n\r\nWe don't have a logout view; you simply get redirected to login. However, to try to follow the advise in https://vaadin.com/forum/thread/17520891/flow-logout, I did add a logout view with `VaadinSession.getCurrent().getSession().invalidate();` in the `BeforeEnter` (note: adding the navigation line caused an invalid redirect in the browser!). Interestingly this was actually quite hard to get to trigger, I had to change the route to something other than logout (including the anchor) for it to trigger. But even when that still did not get rid of the push exception\u2026\r\n\r\nAm I triggering the logout wrongly?\r\n\r\n### Expected behavior\r\nNo more exceptions in the push connection when logging out.\r\n\r\n### Actual behavior\r\nExample exception\r\n```\r\n2021-05-18 11:27:53.227 ERROR 58262 --- [sphere-Shared-3] c.v.f.s.c.PushAtmosphereHandler          : Exception in push connection\r\n\r\njava.io.IOException: Connection remotely closed for 82791b2a-7216-4486-8ad2-b33e423d1b78\r\n\tat org.atmosphere.websocket.WebSocket.write(WebSocket.java:230) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.websocket.WebSocket.write(WebSocket.java:220) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.websocket.WebSocket.write(WebSocket.java:46) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.cpr.AtmosphereResponseImpl$Stream.write(AtmosphereResponseImpl.java:957) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.handler.AbstractReflectorAtmosphereHandler.onStateChange(AbstractReflectorAtmosphereHandler.java:155) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat com.vaadin.flow.server.communication.PushAtmosphereHandler.onStateChange(PushAtmosphereHandler.java:54) ~[flow-server-2.6.0.jar:2.6.0]\r\n\tat org.atmosphere.cpr.DefaultBroadcaster.invokeOnStateChange(DefaultBroadcaster.java:1037) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.cpr.DefaultBroadcaster.prepareInvokeOnStateChange(DefaultBroadcaster.java:1057) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.cpr.DefaultBroadcaster.executeAsyncWrite(DefaultBroadcaster.java:871) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat org.atmosphere.cpr.DefaultBroadcaster$2.run(DefaultBroadcaster.java:474) ~[atmosphere-runtime-2.4.30.slf4jvaadin1.jar:2.4.30.slf4jvaadin1]\r\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]\r\n\tat java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264) ~[na:na]\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java) ~[na:na]\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]\r\n\tat java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]\r\n```\r\n\r\n### Versions:\r\n    - Vaadin / Flow version: 14.6.0\r\n    - Java version: 11\r\n    - OS version: AWS & Mac OS\r\n"", ""issue_word_count"": 1066, ""test_files_count"": 3, ""non_test_files_count"": 1, ""pr_changed_files"": [""flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/UIAccessContextIT.java"", ""vaadin-spring/src/main/java/com/vaadin/flow/spring/security/AuthenticationContext.java""], ""pr_changed_test_files"": [""flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java"", ""flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/UIAccessContextIT.java""], ""base_commit"": ""5ff8cf52cfa511363f5e0969b071c9d470765d88"", ""head_commit"": ""789bacfdf1df6e2375911cb123e75f03a1fa271a"", ""repo_url"": ""https://github.com/vaadin/flow/pull/20688"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/20688"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-13T15:27:06.000Z"", ""patch"": ""diff --git a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/AuthenticationContext.java b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/AuthenticationContext.java\nindex 1c907d95a15..3a9da0fa765 100644\n--- a/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/AuthenticationContext.java\n+++ b/vaadin-spring/src/main/java/com/vaadin/flow/spring/security/AuthenticationContext.java\n@@ -45,6 +45,7 @@\n import org.springframework.util.Assert;\n \n import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.server.VaadinRequest;\n import com.vaadin.flow.server.VaadinServletRequest;\n import com.vaadin.flow.server.VaadinServletResponse;\n import com.vaadin.flow.shared.ui.Transport;\n@@ -131,8 +132,10 @@ public boolean isAuthenticated() {\n      */\n     public void logout() {\n         final UI ui = UI.getCurrent();\n-        if (ui.getPushConfiguration().getTransport() == Transport.WEBSOCKET\n-                && ui.getInternals().getPushConnection().isConnected()) {\n+        boolean pushWebsocketConnected = ui.getPushConfiguration()\n+                .getTransport() == Transport.WEBSOCKET\n+                && ui.getInternals().getPushConnection().isConnected();\n+        if (pushWebsocketConnected) {\n             // WEBSOCKET transport mode would not log out properly after session\n             // invalidation. Switching to WEBSOCKET_XHR for a single request\n             // to do the logout.\n@@ -151,6 +154,11 @@ public void logout() {\n                 ui.getPushConfiguration().setTransport(Transport.WEBSOCKET);\n                 doLogout(ui);\n             });\n+        } else if (VaadinRequest.getCurrent() == null) {\n+            // Logout started from a background thread, force client to send\n+            // a request\n+            ui.getPage().executeJs(\""return true\"").then(ignored -> doLogout(ui),\n+                    error -> doLogout(ui));\n         } else {\n             doLogout(ui);\n         }\n@@ -496,7 +504,7 @@ public void logout(HttpServletRequest request,\n         private boolean isContinueToNextHandler(HttpServletRequest request,\n                 LogoutHandler handler) {\n             return handler instanceof SecurityContextLogoutHandler\n-                    && (request.getSession() == null\n+                    && (request.getSession(false) == null\n                             || !request.isRequestedSessionIdValid());\n         }\n     }\n"", ""test_patch"": ""diff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java\nindex 72713cd33bb..45dbf6be8cc 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/main/java/com/vaadin/flow/spring/flowsecurity/views/MainView.java\n@@ -1,9 +1,14 @@\n package com.vaadin.flow.spring.flowsecurity.views;\n \n import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.springframework.security.concurrent.DelegatingSecurityContextExecutor;\n \n import com.vaadin.flow.component.Component;\n import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.component.UI;\n import com.vaadin.flow.component.applayout.AppLayout;\n import com.vaadin.flow.component.applayout.DrawerToggle;\n import com.vaadin.flow.component.avatar.Avatar;\n@@ -97,6 +102,18 @@ private Component createDrawerContent(Tabs menu) {\n             });\n             layout.add(logout);\n \n+            Button logoutFromServer = new Button(\""Logout from server\"");\n+            logoutFromServer.setId(\""logout-server\"");\n+            logoutFromServer.addClickListener(e -> {\n+                UI ui = UI.getCurrent();\n+                Runnable action = ui.accessLater(() -> securityUtils.logout(),\n+                        null);\n+                CompletableFuture.runAsync(action,\n+                        new DelegatingSecurityContextExecutor(CompletableFuture\n+                                .delayedExecutor(1, TimeUnit.SECONDS)));\n+            });\n+            layout.add(logoutFromServer);\n+\n             Anchor logoutWithUrl = new Anchor(\""doLogout\"", \""Logout with URL\"");\n             logoutWithUrl.getElement().setAttribute(\""router-ignore\"", true);\n             logoutWithUrl.setId(\""logout-anchor\"");\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java\nindex 7e1e2be3dc5..e0704b26b3b 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/AppViewIT.java\n@@ -308,6 +308,16 @@ public void logout_via_doLogoutURL_redirects_to_logout() {\n         assertLogoutViewShown();\n     }\n \n+    @Test\n+    public void logout_server_initiated_redirects_to_logout() {\n+        open(LOGIN_PATH);\n+        loginAdmin();\n+        navigateTo(\""admin\"");\n+        assertAdminPageShown(ADMIN_FULLNAME);\n+        getMainView().$(ButtonElement.class).id(\""logout-server\"").click();\n+        assertRootPageShown();\n+    }\n+\n     @Test\n     public void client_menu_routes_correct_for_anonymous() {\n         navigateToClientMenuList();\n\ndiff --git a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/UIAccessContextIT.java b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/UIAccessContextIT.java\nindex 94ec1226421..d285f7e0422 100644\n--- a/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/UIAccessContextIT.java\n+++ b/flow-tests/vaadin-spring-tests/test-spring-security-flow/src/test/java/com/vaadin/flow/spring/flowsecurity/UIAccessContextIT.java\n@@ -15,16 +15,16 @@\n  */\n package com.vaadin.flow.spring.flowsecurity;\n \n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.WebDriver;\n+\n import com.vaadin.flow.component.button.testbench.ButtonElement;\n import com.vaadin.flow.component.login.testbench.LoginFormElement;\n import com.vaadin.flow.component.login.testbench.LoginOverlayElement;\n import com.vaadin.testbench.HasElementQuery;\n import com.vaadin.testbench.TestBenchElement;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.openqa.selenium.WebDriver;\n-\n public class UIAccessContextIT extends AbstractIT {\n \n     @Test\n@@ -37,14 +37,15 @@ public void securityContextSetForUIAccess() throws Exception {\n             super.setup();\n             open(\""private\"");\n             loginUser();\n-            TestBenchElement balance = $(\""span\"").id(\""balanceText\"");\n+            TestBenchElement balance = waitUntil(\n+                    d -> $(\""span\"").id(\""balanceText\""));\n             Assert.assertEquals(expectedUserBalance, balance.getText());\n \n             open(\""private\"", adminBrowser);\n             HasElementQuery adminContext = () -> adminBrowser;\n             loginAdmin(adminContext);\n-            TestBenchElement adminBalance = adminContext.$(\""span\"")\n-                    .id(\""balanceText\"");\n+            TestBenchElement adminBalance = waitUntil(\n+                    d -> adminContext.$(\""span\"").id(\""balanceText\""));\n             Assert.assertEquals(expectedAdminBalance, adminBalance.getText());\n \n             ButtonElement sendRefresh = $(ButtonElement.class)\n@@ -70,6 +71,10 @@ private void loginAdmin(HasElementQuery adminContext) {\n         form.getUsernameField().setValue(\""emma\"");\n         form.getPasswordField().setValue(\""emma\"");\n         form.submit();\n+        waitUntilNot(driver -> ((WebDriver) adminContext.getContext())\n+                .getCurrentUrl().contains(\""my/login/page\""));\n+        waitUntilNot(\n+                driver -> adminContext.$(LoginOverlayElement.class).exists());\n     }\n \n }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-20657"", ""pr_id"": 20657, ""issue_id"": 20610, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Parsing failed for browser and os versions reported to stdout\n### Description of the bug\n\nFrom logs of Start:\r\n```\r\nBrowser engine version parsing failed for: mozilla 5.0 (windows nt 10.0; win64; x64) applewebkit 537.36 (khtml, like gecko) chrome 78.0.3904.97 safari 537.36 opr 65.0.3467.48 For input string: \""a 5.0\""\r\nBrowser major version parsing failed for: 17 sa For input string: \""17 sa\""\r\nBrowser major version parsing failed for: w For input string: \""w\""\r\nBrowser minor version parsing failed for:  For input string: \""\""\r\nOS major version parsing failed for: /5 For input string: \""/5\""\r\nOS minor version parsing failed for: 0 (android For input string: \""0 (android\""\r\nOS minor version parsing failed for: 0) applewebkit/537 For input string: \""0) applewebkit/537\""\r\n```\r\n\r\nThere seems to be two issues here:\r\n1. Parsing fails\r\n2. The error is reported to stdout or stderr instead of through a logger so it took some detective work to even figure out where they come from\r\n\r\nAlso as the full string that is being parsed is not logged in all cases, it makes things a bit difficult to fix\n\n### Expected behavior\n\nNo errors are logged without a logger and parsing succeeds\n\n### Minimal reproducible example\n\n-\n\n### Versions\n\n- Vaadin / Flow version: 24.6 beta"", ""issue_word_count"": 213, ""test_files_count"": 4, ""non_test_files_count"": 2, ""pr_changed_files"": [""flow-server/src/main/java/com/vaadin/flow/server/WebBrowser.java"", ""flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java"", ""flow-server/src/test/java/com/vaadin/flow/server/WebBrowserTest.java"", ""flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java"", ""flow-server/src/test/resources/common-desktop-useragents.json"", ""flow-server/src/test/resources/mobile-useragents.json""], ""pr_changed_test_files"": [""flow-server/src/test/java/com/vaadin/flow/server/WebBrowserTest.java"", ""flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java"", ""flow-server/src/test/resources/common-desktop-useragents.json"", ""flow-server/src/test/resources/mobile-useragents.json""], ""base_commit"": ""4c6524dfbea06a6d3f3d9d8d39f8100e947add66"", ""head_commit"": ""b408e6a67a15c40736f9e81a0bfbcd2e0cace463"", ""repo_url"": ""https://github.com/vaadin/flow/pull/20657"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/20657"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-12T07:58:20.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/server/WebBrowser.java b/flow-server/src/main/java/com/vaadin/flow/server/WebBrowser.java\nindex 9f7b1529ef2..6d655169c91 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/WebBrowser.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/WebBrowser.java\n@@ -19,6 +19,8 @@\n import java.io.Serializable;\n import java.util.Locale;\n \n+import org.slf4j.LoggerFactory;\n+\n import com.vaadin.flow.shared.BrowserDetails;\n \n /**\n@@ -65,7 +67,13 @@ public class WebBrowser implements Serializable {\n \n         if (agent != null) {\n             browserApplication = agent;\n-            browserDetails = new BrowserDetails(agent);\n+            browserDetails = new BrowserDetails(agent) {\n+                @Override\n+                protected void log(String error, Exception e) {\n+                    LoggerFactory.getLogger(BrowserDetails.class).error(error,\n+                            e);\n+                }\n+            };\n         }\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java b/flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java\nindex 5fbcc9ad88b..1f20da5851b 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/shared/BrowserDetails.java\n@@ -82,16 +82,19 @@ public BrowserDetails(String userAgent) {\n         isWebKit = !isTrident && userAgent.contains(\""applewebkit\"");\n \n         // browser name\n-        isChrome = userAgent.contains(CHROME) || userAgent.contains(\"" crios/\"")\n-                || userAgent.contains(HEADLESSCHROME);\n-        isOpera = userAgent.contains(\""opera\"");\n+        isChrome = (userAgent.contains(CHROME) || userAgent.contains(\"" crios/\"")\n+                || userAgent.contains(HEADLESSCHROME))\n+                && !userAgent.contains(\"" opr/\"");\n+        isOpera = userAgent.contains(\""opera\"") || userAgent.contains(\"" opr/\"");\n         isIE = userAgent.contains(\""msie\"") && !isOpera\n                 && !userAgent.contains(\""webtv\"");\n         // IE 11 no longer contains MSIE in the user agent\n         isIE = isIE || isTrident;\n \n-        isSafari = !isChrome && !isIE && userAgent.contains(\""safari\"");\n-        isFirefox = userAgent.contains(\"" firefox/\"");\n+        isSafari = !isChrome && !isIE && !isOpera\n+                && userAgent.contains(\""safari\"");\n+        isFirefox = userAgent.contains(\"" firefox/\"")\n+                || userAgent.contains(\""fxios/\"");\n         if (userAgent.contains(\"" edge/\"") || userAgent.contains(\"" edg/\"")\n                 || userAgent.contains(\"" edga/\"")\n                 || userAgent.contains(\"" edgios/\"")) {\n@@ -148,7 +151,7 @@ public BrowserDetails(String userAgent) {\n                     if (rvPos >= 0) {\n                         String tmp = userAgent.substring(rvPos + 3);\n                         tmp = tmp.replaceFirst(\""(\\\\.[0-9]+).+\"", \""$1\"");\n-                        parseVersionString(tmp);\n+                        parseVersionString(tmp, userAgent);\n                     }\n                 } else if (isTrident) {\n                     // potentially IE 11 in compatibility mode\n@@ -161,18 +164,30 @@ public BrowserDetails(String userAgent) {\n                             .substring(userAgent.indexOf(\""msie \"") + 5);\n                     ieVersionString = safeSubstring(ieVersionString, 0,\n                             ieVersionString.indexOf(';'));\n-                    parseVersionString(ieVersionString);\n+                    parseVersionString(ieVersionString, userAgent);\n                 }\n             } else if (isFirefox) {\n-                int i = userAgent.indexOf(\"" firefox/\"") + 9;\n-                parseVersionString(safeSubstring(userAgent, i, i + 5));\n+                int i = userAgent.indexOf(\"" fxios/\"");\n+                if (i != -1) {\n+                    // Version present in Opera 10 and newer\n+                    i = userAgent.indexOf(\"" fxios/\"") + 7;\n+                } else {\n+                    i = userAgent.indexOf(\"" firefox/\"") + 9;\n+                }\n+                parseVersionString(\n+                        safeSubstring(userAgent, i,\n+                                i + getVersionStringLength(userAgent, i)),\n+                        userAgent);\n             } else if (isChrome) {\n                 parseChromeVersion(userAgent);\n             } else if (isSafari) {\n                 int i = userAgent.indexOf(\"" version/\"");\n                 if (i >= 0) {\n                     i += 9;\n-                    parseVersionString(safeSubstring(userAgent, i, i + 5));\n+                    parseVersionString(\n+                            safeSubstring(userAgent, i,\n+                                    i + getVersionStringLength(userAgent, i)),\n+                            userAgent);\n                 } else {\n                     int engineVersion = (int) (browserEngineVersion * 10);\n                     if (engineVersion >= 6010 && engineVersion < 6015) {\n@@ -206,10 +221,15 @@ public BrowserDetails(String userAgent) {\n                 if (i != -1) {\n                     // Version present in Opera 10 and newer\n                     i += 9; // \"" version/\"".length\n+                } else if (userAgent.contains(\"" opr/\"")) {\n+                    i = userAgent.indexOf(\"" opr/\"") + 5;\n                 } else {\n                     i = userAgent.indexOf(\""opera/\"") + 6;\n                 }\n-                parseVersionString(safeSubstring(userAgent, i, i + 5));\n+                parseVersionString(\n+                        safeSubstring(userAgent, i,\n+                                i + getVersionStringLength(userAgent, i)),\n+                        userAgent);\n             } else if (isEdge) {\n                 int i = userAgent.indexOf(\"" edge/\"") + 6;\n                 if (userAgent.contains(\"" edg/\"")) {\n@@ -220,7 +240,10 @@ public BrowserDetails(String userAgent) {\n                     i = userAgent.indexOf(\"" edgios/\"") + 8;\n                 }\n \n-                parseVersionString(safeSubstring(userAgent, i, i + 8));\n+                parseVersionString(\n+                        safeSubstring(userAgent, i,\n+                                i + getVersionStringLength(userAgent, i)),\n+                        userAgent);\n             }\n         } catch (Exception e) {\n             // Browser version parsing failed\n@@ -274,16 +297,16 @@ private void parseChromeOSVersion(String userAgent) {\n         }\n         String osVersionString = userAgent.substring(cur + 1, end);\n         String[] parts = osVersionString.split(\""\\\\.\"");\n-        parseChromeOsVersionParts(parts);\n+        parseChromeOsVersionParts(parts, userAgent);\n     }\n \n-    private void parseChromeOsVersionParts(String[] parts) {\n+    private void parseChromeOsVersionParts(String[] parts, String userAgent) {\n         osMajorVersion = -1;\n         osMinorVersion = -1;\n \n         if (parts.length > 2) {\n-            osMajorVersion = parseVersionPart(parts[0], OS_MAJOR);\n-            osMinorVersion = parseVersionPart(parts[1], OS_MINOR);\n+            osMajorVersion = parseVersionPart(parts[0], OS_MAJOR, userAgent);\n+            osMinorVersion = parseVersionPart(parts[1], OS_MINOR, userAgent);\n         }\n     }\n \n@@ -298,11 +321,13 @@ private void parseChromeVersion(String userAgent) {\n                 i += CHROME.length();\n             }\n             int versionBreak = getVersionStringLength(userAgent, i);\n-            parseVersionString(safeSubstring(userAgent, i, i + versionBreak));\n+            parseVersionString(safeSubstring(userAgent, i, i + versionBreak),\n+                    userAgent);\n         } else {\n             i += crios.length(); // move index to version string start\n             int versionBreak = getVersionStringLength(userAgent, i);\n-            parseVersionString(safeSubstring(userAgent, i, i + versionBreak));\n+            parseVersionString(safeSubstring(userAgent, i, i + versionBreak),\n+                    userAgent);\n         }\n     }\n \n@@ -327,7 +352,7 @@ private static int getVersionStringLength(String userAgent,\n \n     private void parseAndroidVersion(String userAgent) {\n         // Android 5.1;\n-        if (!userAgent.contains(\""android\"")) {\n+        if (!userAgent.contains(\""android \"")) {\n             return;\n         }\n \n@@ -337,7 +362,7 @@ private void parseAndroidVersion(String userAgent) {\n         osVersionString = safeSubstring(osVersionString, 0,\n                 osVersionString.indexOf(\"";\""));\n         String[] parts = osVersionString.split(\""\\\\.\"");\n-        parseOsVersion(parts);\n+        parseOsVersion(parts, userAgent);\n     }\n \n     private void parseIOSVersion(String userAgent) {\n@@ -349,35 +374,43 @@ private void parseIOSVersion(String userAgent) {\n         String osVersionString = safeSubstring(userAgent,\n                 userAgent.indexOf(\""os \"") + 3, userAgent.indexOf(\"" like mac\""));\n         String[] parts = osVersionString.split(\""_\"");\n-        parseOsVersion(parts);\n+        parseOsVersion(parts, userAgent);\n     }\n \n-    private void parseOsVersion(String[] parts) {\n+    private void parseOsVersion(String[] parts, String userAgent) {\n         osMajorVersion = -1;\n         osMinorVersion = -1;\n \n         if (parts.length >= 1) {\n-            osMajorVersion = parseVersionPart(parts[0], OS_MAJOR);\n+            osMajorVersion = parseVersionPart(parts[0], OS_MAJOR, userAgent);\n         }\n         if (parts.length >= 2) {\n             // Some Androids report version numbers as \""2.1-update1\""\n             int dashIndex = parts[1].indexOf('-');\n             if (dashIndex > -1) {\n                 String dashlessVersion = parts[1].substring(0, dashIndex);\n-                osMinorVersion = parseVersionPart(dashlessVersion, OS_MINOR);\n+                osMinorVersion = parseVersionPart(dashlessVersion, OS_MINOR,\n+                        userAgent);\n             } else {\n-                osMinorVersion = parseVersionPart(parts[1], OS_MINOR);\n+                osMinorVersion = parseVersionPart(parts[1], OS_MINOR,\n+                        userAgent);\n             }\n         }\n     }\n \n-    private void parseVersionString(String versionString) {\n+    private void parseVersionString(String versionString, String userAgent) {\n         int idx = versionString.indexOf('.');\n         if (idx < 0) {\n             idx = versionString.length();\n         }\n         String majorVersionPart = safeSubstring(versionString, 0, idx);\n-        browserMajorVersion = parseVersionPart(majorVersionPart, BROWSER_MAJOR);\n+        browserMajorVersion = parseVersionPart(majorVersionPart, BROWSER_MAJOR,\n+                userAgent);\n+\n+        if (browserMajorVersion == -1) {\n+            // no need to scan for minor if major version scanning failed.\n+            return;\n+        }\n \n         int idx2 = versionString.indexOf('.', idx + 1);\n         if (idx2 < 0) {\n@@ -390,7 +423,8 @@ private void parseVersionString(String versionString) {\n         }\n         String minorVersionPart = safeSubstring(versionString, idx + 1, idx2)\n                 .replaceAll(\""[^0-9].*\"", \""\"");\n-        browserMinorVersion = parseVersionPart(minorVersionPart, BROWSER_MINOR);\n+        browserMinorVersion = parseVersionPart(minorVersionPart, BROWSER_MINOR,\n+                userAgent);\n     }\n \n     private static String safeSubstring(String string, int beginIndex,\n@@ -410,11 +444,13 @@ private static String safeSubstring(String string, int beginIndex,\n         return string.substring(trimmedStart, trimmedEnd);\n     }\n \n-    private int parseVersionPart(String versionString, String partName) {\n+    private int parseVersionPart(String versionString, String partName,\n+            String userAgent) {\n         try {\n             return Integer.parseInt(versionString);\n         } catch (Exception e) {\n-            log(partName + \"" version parsing failed for: \"" + versionString, e);\n+            log(partName + \"" version parsing failed for: \"" + versionString\n+                    + \""\\nWith userAgent: \"" + userAgent, e);\n         }\n         return -1;\n     }\n@@ -598,6 +634,15 @@ public boolean isIPhone() {\n         return isIPhone;\n     }\n \n+    /**\n+     * Tests if the browser is run on iPad.\n+     *\n+     * @return true if run on iPad, false otherwise\n+     */\n+    public boolean isIPad() {\n+        return isIPad;\n+    }\n+\n     /**\n      * Tests if the browser is run on Chrome OS (e.g. a Chromebook).\n      *\n@@ -667,10 +712,10 @@ && getOperatingSystemMinorVersion() >= 7))) {\n         return false;\n     }\n \n-    private static void log(String error, Exception e) {\n+    protected void log(String error, Exception e) {\n         // \""Logs\"" to stdout so the problem can be found but does not prevent\n         // using the app. As this class is shared, we do not use\n-        // java.util.logging\n+        // slf4j for logging as normal.\n         System.err.println(error + ' ' + e.getMessage());\n     }\n \n"", ""test_patch"": ""diff --git a/flow-server/src/test/java/com/vaadin/flow/server/WebBrowserTest.java b/flow-server/src/test/java/com/vaadin/flow/server/WebBrowserTest.java\nindex 73682141236..55664d2824b 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/WebBrowserTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/WebBrowserTest.java\n@@ -15,8 +15,12 @@\n  */\n package com.vaadin.flow.server;\n \n+import java.util.Locale;\n+\n+import jdk.jfr.ValueDescriptor;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.mockito.Mockito;\n \n public class WebBrowserTest {\n \n@@ -56,4 +60,53 @@ public void isIPhone_noDetails_returnsFalse() {\n     public void isChromeOS_noDetails_returnsFalse() {\n         Assert.assertFalse(browser.isChromeOS());\n     }\n+\n+    @Test\n+    public void isSafariOnMac_userDetails_returnsTrue() {\n+        VaadinRequest request = initRequest(\n+                \""Mozilla/5.0 (Macintosh; Intel Mac OS X 11_6_2) AppleWebKit/611.3.10.1.5 (KHTML, like Gecko) Version/14.1.2 Safari/611.3.10.1.5\"");\n+\n+        browser = new WebBrowser(request);\n+        Assert.assertTrue(browser.isSafari());\n+        Assert.assertTrue(browser.isMacOSX());\n+    }\n+\n+    @Test\n+    public void isChromeOnWindows_userDetails_returnsTrue() {\n+        VaadinRequest request = initRequest(\n+                \""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\"");\n+\n+        browser = new WebBrowser(request);\n+        Assert.assertTrue(browser.isChrome());\n+        Assert.assertTrue(browser.isWindows());\n+    }\n+\n+    @Test\n+    public void isOperaOnWindows_userDetails_returnsTrue() {\n+        VaadinRequest request = initRequest(\n+                \""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 OPR/115.0.0.0\"");\n+\n+        browser = new WebBrowser(request);\n+        Assert.assertTrue(browser.isOpera());\n+        Assert.assertTrue(browser.isWindows());\n+    }\n+\n+    @Test\n+    public void isFirefoxOnAndroid_userDetails_returnsTrue() {\n+        VaadinRequest request = initRequest(\n+                \""Mozilla/5.0 (Android; Tablet; rv:33.0) Gecko/33.0 Firefox/33.0\"");\n+\n+        browser = new WebBrowser(request);\n+        Assert.assertTrue(browser.isFirefox());\n+        Assert.assertTrue(browser.isAndroid());\n+    }\n+\n+    private static VaadinRequest initRequest(String userAgent) {\n+        VaadinRequest request = Mockito.mock(VaadinRequest.class);\n+        Mockito.when(request.getLocale()).thenReturn(Locale.ENGLISH);\n+        Mockito.when(request.getRemoteAddr()).thenReturn(\""0.0.0.0\"");\n+        Mockito.when(request.isSecure()).thenReturn(false);\n+        Mockito.when(request.getHeader(\""User-Agent\"")).thenReturn(userAgent);\n+        return request;\n+    }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java b/flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java\nindex aaeeb6ec393..0db4e9e6677 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/shared/BrowserDetailsTest.java\n@@ -16,9 +16,17 @@\n \n package com.vaadin.flow.shared;\n \n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import junit.framework.TestCase;\n+import org.apache.commons.io.IOUtils;\n import org.junit.Assert;\n \n+import com.vaadin.flow.server.frontend.TaskGenerateTsConfigTest;\n+\n public class BrowserDetailsTest extends TestCase {\n \n     private static final String FIREFOX30_WINDOWS = \""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.0.6) Gecko/2009011913 Firefox/3.0.6\"";\n@@ -52,6 +60,7 @@ public class BrowserDetailsTest extends TestCase {\n     private static final String OPERA964_WINDOWS = \""Opera/9.64(Windows NT 5.1; U; en) Presto/2.1.1\"";\n     private static final String OPERA1010_WINDOWS = \""Opera/9.80 (Windows NT 5.1; U; en) Presto/2.2.15 Version/10.10\"";\n     private static final String OPERA1050_WINDOWS = \""Opera/9.80 (Windows NT 5.1; U; en) Presto/2.5.22 Version/10.50\"";\n+    private static final String OPERA115_WINDOWS = \""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 OPR/115.0.0.0\"";\n \n     private static final String CHROME3_MAC = \""Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.198 Safari/532.0\"";\n     private static final String CHROME4_WINDOWS = \""Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.89 Safari/532.5\"";\n@@ -690,7 +699,17 @@ public void testHeadlessChrome() {\n         assertBrowserMinorVersion(bd, 0);\n         assertEngineVersion(bd, 537.36f);\n         assertLinux(bd);\n+    }\n \n+    public void testOpera65() {\n+        String userAgent = OPERA115_WINDOWS;\n+        BrowserDetails bd = new BrowserDetails(userAgent);\n+        assertWebKit(bd);\n+        assertOpera(bd);\n+        assertBrowserMajorVersion(bd, 115);\n+        assertBrowserMinorVersion(bd, 0);\n+        assertEngineVersion(bd, 537.36f);\n+        assertWindows(bd);\n     }\n \n     public void testIos11FacebookBrowser() {\n@@ -705,6 +724,88 @@ public void testIos11Firefox() {\n         assertEngineVersion(bd, 604.3f);\n     }\n \n+    public void testCommonDesktopUserAgents() throws IOException {\n+        UserAgent[] agents = getUserAgentDetails(\n+                \""common-desktop-useragents.json\"");\n+\n+        assertAgentDetails(agents);\n+    }\n+\n+    public void testMobileUserAgents() throws IOException {\n+        UserAgent[] agents = getUserAgentDetails(\""mobile-useragents.json\"");\n+\n+        assertAgentDetails(agents);\n+    }\n+\n+    private static UserAgent[] getUserAgentDetails(String agentFile)\n+            throws IOException {\n+        String userAgents = IOUtils.toString(\n+                Objects.requireNonNull(TaskGenerateTsConfigTest.class\n+                        .getClassLoader().getResourceAsStream(agentFile)),\n+                StandardCharsets.UTF_8);\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        UserAgent agents[] = mapper.readValue(userAgents, UserAgent[].class);\n+        return agents;\n+    }\n+\n+    private void assertAgentDetails(UserAgent[] agents) {\n+        for (UserAgent agent : agents) {\n+            BrowserDetails bd = new BrowserDetails(agent.ua);\n+            assertOs(bd, agent.os);\n+            BrowserVersion versions = getMinorMajorVersion(\n+                    agent.browserVersion);\n+            Assert.assertEquals(\n+                    \""Major version differs on userAgent \"" + agent.ua,\n+                    versions.browserMajorVersion, bd.getBrowserMajorVersion());\n+            Assert.assertEquals(\n+                    \""Minor version differs on userAgent \"" + agent.ua,\n+                    versions.browserMinorVersion, bd.getBrowserMinorVersion());\n+        }\n+    }\n+\n+    private BrowserVersion getMinorMajorVersion(String browserVersion) {\n+        final String[] digits = browserVersion.split(\""[-.]\"", 4);\n+\n+        int major = Integer.parseInt(digits[0]);\n+        int minor = -1;\n+        if (digits.length >= 2) {\n+            minor = Integer.parseInt(digits[1]);\n+        }\n+        return new BrowserVersion(major, minor);\n+    }\n+\n+    private void assertOs(BrowserDetails bd, String os) {\n+        switch (os) {\n+        case \""LINUX\"":\n+            assertLinux(bd);\n+            break;\n+        case \""WINDOWS\"":\n+            assertWindows(bd);\n+            break;\n+        case \""MACOSX\"":\n+            assertMacOSX(bd);\n+            break;\n+        case \""IPAD\"":\n+            assertIPad(bd);\n+            break;\n+        case \""IPHONE\"":\n+            assertIPhone(bd);\n+            break;\n+        case \""ANDROID\"":\n+            assertAndroid(bd);\n+            break;\n+        }\n+    }\n+\n+    private record BrowserVersion(int browserMajorVersion,\n+            int browserMinorVersion) {\n+    }\n+\n+    private record UserAgent(String ua, String browser, String browserVersion,\n+            String os, String device) {\n+    }\n+\n     /*\n      * Helper methods below\n      */\n@@ -827,13 +928,17 @@ private void assertMacOSX(BrowserDetails browserDetails) {\n         assertFalse(browserDetails.isChromeOS());\n     }\n \n-    private void assertAndroid(BrowserDetails browserDetails, int majorVersion,\n-            int minorVersion) {\n+    private void assertAndroid(BrowserDetails browserDetails) {\n         assertFalse(browserDetails.isLinux());\n         assertFalse(browserDetails.isWindows());\n         assertFalse(browserDetails.isMacOSX());\n         assertTrue(browserDetails.isAndroid());\n         assertFalse(browserDetails.isChromeOS());\n+    }\n+\n+    private void assertAndroid(BrowserDetails browserDetails, int majorVersion,\n+            int minorVersion) {\n+        assertAndroid(browserDetails);\n \n         assertOSMajorVersion(browserDetails, majorVersion);\n         assertOSMinorVersion(browserDetails, minorVersion);\n@@ -843,6 +948,10 @@ private void assertIPhone(BrowserDetails browserDetails) {\n         assertTrue(browserDetails.isIPhone());\n     }\n \n+    private void assertIPad(BrowserDetails browserDetails) {\n+        assertTrue(browserDetails.isIPad());\n+    }\n+\n     private void assertWindows(BrowserDetails browserDetails) {\n         assertWindows(browserDetails, false);\n     }\n\ndiff --git a/flow-server/src/test/resources/common-desktop-useragents.json b/flow-server/src/test/resources/common-desktop-useragents.json\nnew file mode 100644\nindex 00000000000..46426187959\n--- /dev/null\n+++ b/flow-server/src/test/resources/common-desktop-useragents.json\n@@ -0,0 +1,62 @@\n+[\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.1\"",\n+    \""browser\"": \""Safari\"",\n+    \""browserVersion\"": \""17.6\"",\n+    \""os\"": \""MACOSX\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.3\"",\n+    \""browser\"": \""Chrome\"",\n+    \""browserVersion\"": \""113.0.0\"",\n+    \""os\"": \""MACOSX\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.3\"",\n+    \""browser\"": \""Chrome\"",\n+    \""browserVersion\"": \""130.0.0\"",\n+    \""os\"": \""WINDOWS\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.3\"",\n+    \""browser\"": \""Chrome\"",\n+    \""browserVersion\"": \""130.0.0\"",\n+    \""os\"": \""MACOSX\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0\"",\n+    \""browser\"": \""Firefox\"",\n+    \""browserVersion\"": \""115.0\"",\n+    \""os\"": \""WINDOWS\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.3\"",\n+    \""browser\"": \""Chrome\"",\n+    \""browserVersion\"": \""130.0.0\"",\n+    \""os\"": \""LINUX\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0\"",\n+    \""browser\"": \""Firefox\"",\n+    \""browserVersion\"": \""132.0\"",\n+    \""os\"": \""WINDOWS\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.1958\"",\n+    \""browser\"": \""Edge\"",\n+    \""browserVersion\"": \""18.1958\"",\n+    \""os\"": \""WINDOWS\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0\"",\n+    \""browser\"": \""Firefox\"",\n+    \""browserVersion\"": \""117.0\"",\n+    \""os\"": \""WINDOWS\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 OPR/114.0.0.\"",\n+    \""browser\"": \""Opera\"",\n+    \""browserVersion\"": \""114.0.0\"",\n+    \""os\"": \""WINDOWS\""\n+  }\n+]\n\\ No newline at end of file\n\ndiff --git a/flow-server/src/test/resources/mobile-useragents.json b/flow-server/src/test/resources/mobile-useragents.json\nnew file mode 100644\nindex 00000000000..3b9ecf2ca45\n--- /dev/null\n+++ b/flow-server/src/test/resources/mobile-useragents.json\n@@ -0,0 +1,73 @@\n+[\n+  {\n+    \""ua\"": \""Mozilla/5.0 (iPad; CPU OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) FxiOS/132.0 Mobile/15E148 Safari/605.1.15\"",\n+    \""browser\"": \""Firefox\"",\n+    \""browserVersion\"": \""132.0\"",\n+    \""os\"": \""IPAD\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (iPad; CPU OS 17_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1\"",\n+    \""browser\"": \""Safari\"",\n+    \""browserVersion\"": \""18.0\"",\n+    \""os\"": \""IPAD\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.102 Mobile Safari/537.36\"",\n+    \""browser\"": \""Chrome\"",\n+    \""browserVersion\"": \""130.0.6723.102\"",\n+    \""os\"": \""ANDROID\"",\n+    \""device\"": \""K\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Android 15; Mobile; rv:132.0) Gecko/132.0 Firefox/132.0\"",\n+    \""browser\"": \""Firefox\"",\n+    \""browserVersion\"": \""132.0\"",\n+    \""os\"": \""ANDROID\"",\n+    \""device\"": \""Generic android\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Linux; Android 10; VOG-L29) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.102 Mobile Safari/537.36 OPR/76.2.4027.73374\"",\n+    \""browser\"": \""Opera\"",\n+    \""browserVersion\"": \""76.2.4027.73374\"",\n+    \""os\"": \""ANDROID\"",\n+    \""device\"": \""Huawei\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Linux; Android 10; SM-G970F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.102 Mobile Safari/537.36 OPR/76.2.4027.73374\"",\n+    \""browser\"": \""Opera\"",\n+    \""browserVersion\"": \""76.2.4027.73374\"",\n+    \""os\"": \""ANDROID\"",\n+    \""device\"": \""Samsung\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (Linux; Android 10; SM-N975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.102 Mobile Safari/537.36 OPR/76.2.4027.73374\"",\n+    \""browser\"": \""Opera\"",\n+    \""browserVersion\"": \""76.2.4027.73374\"",\n+    \""os\"": \""ANDROID\"",\n+    \""device\"": \""Samsung\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (iPhone; CPU iPhone OS 17_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/131.0.6778.31 Mobile/15E148 Safari/604.1\"",\n+    \""browser\"": \""Chrome\"",\n+    \""browserVersion\"": \""131.0.6778\"",\n+    \""os\"": \""IPHONE\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (iPhone; CPU iPhone OS 17_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 EdgiOS/130.2849.68 Mobile/15E148 Safari/605.1.15\"",\n+    \""browser\"": \""Edge\"",\n+    \""browserVersion\"": \""130.2849.68\"",\n+    \""os\"": \""IPHONE\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) FxiOS/132.0 Mobile/15E148 Safari/605.1.15\"",\n+    \""browser\"": \""Firefox\"",\n+    \""browserVersion\"": \""132.0\"",\n+    \""os\"": \""IPHONE\""\n+  },\n+  {\n+    \""ua\"": \""Mozilla/5.0 (iPhone; CPU iPhone OS 17_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1\"",\n+    \""browser\"": \""Safari\"",\n+    \""browserVersion\"": \""18.0\"",\n+    \""os\"": \""IPHONE\""\n+  }\n+]\n\\ No newline at end of file\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-20547"", ""pr_id"": 20547, ""issue_id"": 20506, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Server to resend a response message that client waits for\nWhen server receives the same message id and hash as latest handled server should resend the previous payload to the client.\n\n- Store the latest handled payload until next id is handled\n- Only resend payload if client id & hash is the latest handled message\n\nThis should help to avoid unnecessary resynchronisations and loggings like:\n```\ncom.vaadin.flow.server.communication.ServerRpcHandler   | Ignoring old duplicate message from the client. Expected: 1748, got: 1747.\n```\n"", ""issue_word_count"": 80, ""test_files_count"": 2, ""non_test_files_count"": 3, ""pr_changed_files"": [""flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java"", ""flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java"", ""flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java""], ""pr_changed_test_files"": [""flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java""], ""base_commit"": ""3149de877eba6052913dda68a80b2d2d7a71009e"", ""head_commit"": ""5be342a695d6bf6338a1439def63587ceba6716a"", ""repo_url"": ""https://github.com/vaadin/flow/pull/20547"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/20547"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-27T07:55:23.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\nindex fb6c0dadc88..7b58e5cc0f2 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n@@ -215,6 +215,8 @@ public List<Object> getParameters() {\n \n     private byte[] lastProcessedMessageHash = null;\n \n+    private String lastRequestResponse;\n+\n     private String contextRootRelativePath;\n \n     private String appId;\n@@ -305,6 +307,25 @@ public void setLastProcessedClientToServerId(\n         this.lastProcessedMessageHash = lastProcessedMessageHash;\n     }\n \n+    /**\n+     * Sets the response created for the last UIDL request.\n+     *\n+     * @param lastRequestResponse\n+     *            The request that was sent for the last UIDL request.\n+     */\n+    public void setLastRequestResponse(String lastRequestResponse) {\n+        this.lastRequestResponse = lastRequestResponse;\n+    }\n+\n+    /**\n+     * Returns the response created for the last UIDL request.\n+     *\n+     * @return The request that was sent for the last UIDL request.\n+     */\n+    public String getLastRequestResponse() {\n+        return lastRequestResponse;\n+    }\n+\n     /**\n      * Gets the server sync id.\n      * <p>\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\nindex 291d887d4c3..4612fa50bcc 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/ServerRpcHandler.java\n@@ -236,6 +236,19 @@ public ResynchronizationRequiredException() {\n         }\n     }\n \n+    /**\n+     * Exception thrown when the client side re-sends the same request.\n+     */\n+    public static class ClientResentPayloadException extends RuntimeException {\n+\n+        /**\n+         * Default constructor for the exception.\n+         */\n+        public ClientResentPayloadException() {\n+            super();\n+        }\n+    }\n+\n     /**\n      * Reads JSON containing zero or more serialized RPC calls (including legacy\n      * variable changes) and executes the calls.\n@@ -317,9 +330,11 @@ public void handleRpc(UI ui, String message, VaadinRequest request)\n                  * situation is most likely triggered by a timeout or such\n                  * causing a message to be resent.\n                  */\n-                getLogger().info(\n-                        \""Ignoring old duplicate message from the client. Expected: \""\n-                                + expectedId + \"", got: \"" + requestId);\n+                getLogger().debug(\n+                        \""Received old duplicate message from the client. Expected: \""\n+                                + expectedId + \"", got: \"" + requestId\n+                                + \"". Resending previous response.\"");\n+                throw new ClientResentPayloadException();\n             } else if (rpcRequest.isUnloadBeaconRequest()) {\n                 getLogger().debug(\n                         \""Ignoring unexpected message id from the client on UNLOAD request. \""\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\nindex 8a90334aac1..f47e19362af 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/UidlRequestHandler.java\n@@ -39,6 +39,7 @@\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.server.communication.ServerRpcHandler.InvalidUIDLSecurityKeyException;\n+import com.vaadin.flow.server.communication.ServerRpcHandler.ClientResentPayloadException;\n import com.vaadin.flow.server.communication.ServerRpcHandler.ResynchronizationRequiredException;\n import com.vaadin.flow.server.dau.DAUUtils;\n import com.vaadin.flow.server.dau.DauEnforcementException;\n@@ -134,8 +135,10 @@ public Optional<ResponseWriter> synchronizedHandleRequest(\n         StringWriter stringWriter = new StringWriter();\n \n         try {\n-            getRpcHandler(session).handleRpc(uI, requestBody, request);\n+            getRpcHandler().handleRpc(uI, requestBody, request);\n             writeUidl(uI, stringWriter, false);\n+        } catch (ClientResentPayloadException e) {\n+            stringWriter.write(uI.getInternals().getLastRequestResponse());\n         } catch (JsonException e) {\n             getLogger().error(\""Error writing JSON to response\"", e);\n             // Refresh on client side\n@@ -176,6 +179,7 @@ void writeUidl(UI ui, Writer writer, boolean resync) throws IOException {\n \n         // some dirt to prevent cross site scripting\n         String responseString = \""for(;;);[\"" + uidl.toJson() + \""]\"";\n+        ui.getInternals().setLastRequestResponse(responseString);\n         writer.write(responseString);\n     }\n \n@@ -208,7 +212,7 @@ public boolean handleSessionExpired(VaadinRequest request,\n         return true;\n     }\n \n-    private ServerRpcHandler getRpcHandler(VaadinSession session) {\n+    private ServerRpcHandler getRpcHandler() {\n         ServerRpcHandler handler = rpcHandler.get();\n         if (handler == null) {\n             rpcHandler.compareAndSet(null, createRpcHandler());\n"", ""test_patch"": ""diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java\nindex 0996a9768ff..6c8116a82ff 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/ServerRpcHandlerTest.java\n@@ -1,7 +1,6 @@\n package com.vaadin.flow.server.communication;\n \n import java.io.IOException;\n-import java.io.Reader;\n import java.io.StringReader;\n \n import org.junit.Assert;\n@@ -99,9 +98,9 @@ public void handleRpc_resynchronize_throwsExceptionAndDirtiesTreeAndClearsDepend\n         Mockito.verify(dependencyList).clearPendingSendToClient();\n     }\n \n-    @Test\n-    public void handleRpc_duplicateMessage_doNotThrow()\n-            throws InvalidUIDLSecurityKeyException, IOException {\n+    @Test(expected = ServerRpcHandler.ClientResentPayloadException.class)\n+    public void handleRpc_duplicateMessage_throwsResendPayload()\n+            throws InvalidUIDLSecurityKeyException {\n         String msg = \""{\\\""\"" + ApplicationConstants.CLIENT_TO_SERVER_ID + \""\\\"":1}\"";\n         ServerRpcHandler handler = new ServerRpcHandler();\n \n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\nindex 07440e1a9ef..f9a26c7194e 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\n@@ -19,7 +19,6 @@\n \n import java.io.IOException;\n import java.io.OutputStream;\n-import java.io.Reader;\n import java.io.StringWriter;\n import java.util.Collections;\n import java.util.Optional;\n@@ -31,6 +30,7 @@\n import org.mockito.Mockito;\n \n import com.vaadin.flow.component.UI;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.server.DefaultDeploymentConfiguration;\n import com.vaadin.flow.server.HandlerHelper.RequestType;\n import com.vaadin.flow.server.MockVaadinContext;\n@@ -46,6 +46,7 @@\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n import com.vaadin.flow.shared.ApplicationConstants;\n import com.vaadin.pro.licensechecker.dau.EnforcementException;\n+import com.vaadin.tests.util.MockUI;\n \n import elemental.json.JsonObject;\n import elemental.json.impl.JsonUtil;\n@@ -128,9 +129,73 @@ public void writeSessionExpired_whenUINotFound() throws IOException {\n                 responseContent);\n     }\n \n+    @Test\n+    public void clientRequestsPreviousIdAndPayload_resendPreviousResponse()\n+            throws IOException {\n+\n+        UI ui = getUi();\n+        VaadinSession session = ui.getSession();\n+        VaadinService service = session.getService();\n+        DeploymentConfiguration conf = Mockito\n+                .mock(DeploymentConfiguration.class);\n+        Mockito.when(service.getDeploymentConfiguration()).thenReturn(conf);\n+        Mockito.when(conf.isRequestTiming()).thenReturn(false);\n+\n+        String requestBody = \""\""\""\n+                {\n+                   \""csrfToken\"": \""d1f44a6f-bbe5-4493-a8a9-3f5f234a2a93\"",\n+                   \""rpc\"": [\n+                     {\n+                       \""type\"": \""mSync\"",\n+                       \""node\"": 12,\n+                       \""feature\"": 1,\n+                       \""property\"": \""value\"",\n+                       \""value\"": \""a\""\n+                     },\n+                     {\n+                       \""type\"": \""event\"",\n+                       \""node\"": 12,\n+                       \""event\"": \""change\"",\n+                       \""data\"": {}\n+                     }\n+                   ],\n+                   \""syncId\"": 0,\n+                   \""clientId\"": 0\n+                 }\n+                \""\""\"";\n+        Mockito.when(request.getService()).thenReturn(service);\n+        Mockito.when(conf.isSyncIdCheckEnabled()).thenReturn(true);\n+\n+        Optional<SynchronizedRequestHandler.ResponseWriter> result = handler\n+                .synchronizedHandleRequest(session, request, response,\n+                        requestBody);\n+        Assert.assertTrue(\""ResponseWriter should be present\"",\n+                result.isPresent());\n+        result.get().writeResponse();\n+        String responseContent = CommunicationUtil\n+                .getStringWhenWriteString(outputStream);\n+\n+        // Init clean response\n+        response = Mockito.mock(VaadinResponse.class);\n+        outputStream = Mockito.mock(OutputStream.class);\n+        Mockito.when(response.getOutputStream()).thenReturn(outputStream);\n+\n+        result = handler.synchronizedHandleRequest(session, request, response,\n+                requestBody);\n+        Assert.assertTrue(\""ResponseWriter should be present\"",\n+                result.isPresent());\n+        result.get().writeResponse();\n+        String resendResponseContent = CommunicationUtil\n+                .getStringWhenWriteString(outputStream);\n+\n+        // response shouldn't contain async\n+        Assert.assertEquals(\""Server should send same content again\"",\n+                responseContent, resendResponseContent);\n+    }\n+\n     @Test\n     public void should_modifyUidl_when_MPR() throws Exception {\n-        UI ui = mock(UI.class);\n+        UI ui = getUi();\n \n         UidlRequestHandler handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n@@ -151,7 +216,7 @@ public void should_modifyUidl_when_MPR() throws Exception {\n \n     @Test\n     public void should_changeURL_when_v7LocationProvided() throws Exception {\n-        UI ui = mock(UI.class);\n+        UI ui = getUi();\n \n         UidlRequestHandler handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n@@ -172,7 +237,7 @@ public void should_changeURL_when_v7LocationProvided() throws Exception {\n     @Test\n     public void should_updateHash_when_v7LocationNotProvided()\n             throws Exception {\n-        UI ui = mock(UI.class);\n+        UI ui = getUi();\n \n         UidlRequestHandler handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n@@ -192,7 +257,7 @@ public void should_updateHash_when_v7LocationNotProvided()\n \n     @Test\n     public void should_not_modify_non_MPR_Uidl() throws Exception {\n-        UI ui = mock(UI.class);\n+        UI ui = getUi();\n \n         UidlRequestHandler handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n@@ -217,7 +282,7 @@ public void should_not_modify_non_MPR_Uidl() throws Exception {\n     @Test\n     public void should_not_update_browser_history_if_no_hash_in_location()\n             throws Exception {\n-        UI ui = mock(UI.class);\n+        UI ui = getUi();\n \n         UidlRequestHandler handler = spy(new UidlRequestHandler());\n         StringWriter writer = new StringWriter();\n@@ -351,4 +416,29 @@ private JsonObject getUidlWithNoHashInLocation() {\n         // @formatter:on\n     }\n \n+    /**\n+     * Mock ui with session.\n+     *\n+     * @return\n+     */\n+    private static UI getUi() {\n+        VaadinService service = mock(VaadinService.class);\n+        VaadinSession session = new VaadinSession(service) {\n+            @Override\n+            public boolean hasLock() {\n+                return true;\n+            }\n+\n+            @Override\n+            public VaadinService getService() {\n+                return service;\n+            }\n+        };\n+\n+        UI ui = new MockUI(session);\n+\n+        when(service.findUI(Mockito.any())).thenReturn(ui);\n+\n+        return ui;\n+    }\n }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-20540"", ""pr_id"": 20540, ""issue_id"": 20473, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Dialog is not updated when doing hotswap\n### Description of the bug\n\nGiven\r\n\r\n```\r\n@Route(value = \""overlay\"", layout = MainLayout.class)\r\n@AnonymousAllowed\r\npublic class OverlayView extends VerticalLayout {\r\n\r\n    @Override\r\n    protected void onAttach(AttachEvent attachEvent) {\r\n        super.onAttach(attachEvent);\r\n\r\n        Dialog dialog = new Dialog(\""The Dialog\"");\r\n        dialog.setCloseOnOutsideClick(true);\r\n        dialog.setCloseOnEsc(true);\r\n\r\n        dialog.add(new Div(\""Text nr 1\""));\r\n\r\n        dialog.open();\r\n    }\r\n\r\n}\r\n```\r\n\r\nif you are running using HotswapAgent and edit the div text to \""Text nr 2\"", then a dialog with \""Text nr 1\"" remains on screen and a dialog with \""Text nr 2\"" is not added at all. If you manually refresh the page, the dialog with \""Text nr 2\"" is shown\n\n### Expected behavior\n\nThe old dialog is closed and the new one opened\n\n### Minimal reproducible example\n\nas above\n\n### Versions\n\n- Vaadin / Flow version: 24.5.3"", ""issue_word_count"": 129, ""test_files_count"": 4, ""non_test_files_count"": 4, ""pr_changed_files"": [""flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java"", ""flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java"", ""flow-server/src/main/java/com/vaadin/flow/router/NavigationTrigger.java"", ""flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java"", ""flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java"", ""flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java"", ""flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteView.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteIT.java""], ""pr_changed_test_files"": [""flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java"", ""flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java"", ""flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteView.java"", ""flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteIT.java""], ""base_commit"": ""056c126efe5ecba0c51ae80b6aab0f2edafc5289"", ""head_commit"": ""2d0834ec69390895cf1c8347641776c189fd7770"", ""repo_url"": ""https://github.com/vaadin/flow/pull/20540"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/20540"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-29T11:01:02.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\nindex fb6c0dadc88..a341e56d5a2 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n@@ -77,7 +77,6 @@\n import com.vaadin.flow.router.internal.BeforeEnterHandler;\n import com.vaadin.flow.router.internal.BeforeLeaveHandler;\n import com.vaadin.flow.server.Command;\n-import com.vaadin.flow.server.RouteRegistry;\n import com.vaadin.flow.server.VaadinService;\n import com.vaadin.flow.server.VaadinSession;\n import com.vaadin.flow.server.communication.PushConnection;\n@@ -1094,6 +1093,12 @@ public void setLastHandledNavigation(Location location) {\n     /**\n      * Re-navigates to the current route. Also re-instantiates the route target\n      * component, and optionally all layouts in the route chain.\n+     * <p>\n+     * </p>\n+     * If modal components are currently defined for the UI, the whole route\n+     * chain will be refreshed regardless the {@code refreshRouteChain}\n+     * parameter, because otherwise it would not be possible to preserve the\n+     * correct modality cardinality and order.\n      *\n      * @param refreshRouteChain\n      *            {@code true} to refresh all layouts in the route chain,\n@@ -1105,8 +1110,8 @@ public void refreshCurrentRoute(boolean refreshRouteChain) {\n                     + \""Unable to refresh the current route.\"");\n         } else {\n             getRouter().navigate(ui, locationForRefresh,\n-                    NavigationTrigger.PROGRAMMATIC, null, true,\n-                    refreshRouteChain);\n+                    NavigationTrigger.REFRESH_ROUTE, null, true,\n+                    refreshRouteChain || hasModalComponent());\n         }\n     }\n \n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\nindex 63afb16a1cc..88d84b5387c 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/hotswap/Hotswapper.java\n@@ -350,7 +350,11 @@ private UIRefreshStrategy computeRefreshStrategy(UI ui,\n                 .distinct().toList();\n \n         UIRefreshStrategy refreshStrategy;\n-        if (!targetChainChangedItems.isEmpty()) {\n+        // A full chain refresh should be triggered if there are modal\n+        // components, since they could be attached to UI or parent layouts\n+        if (ui.hasModalComponent()) {\n+            refreshStrategy = UIRefreshStrategy.PUSH_REFRESH_CHAIN;\n+        } else if (!targetChainChangedItems.isEmpty()) {\n             refreshStrategy = targetChainChangedItems.stream()\n                     .allMatch(chainItem -> chainItem == route)\n                             ? UIRefreshStrategy.PUSH_REFRESH_ROUTE\n@@ -362,6 +366,7 @@ private UIRefreshStrategy computeRefreshStrategy(UI ui,\n             refreshStrategy = computeRefreshStrategyForUITree(ui,\n                     changedClasses, targetsChain, route);\n         }\n+\n         // A different layout might have been applied after hotswap\n         if (refreshStrategy == UIRefreshStrategy.SKIP) {\n             RouteRegistry registry = ui.getInternals().getRouter()\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/NavigationTrigger.java b/flow-server/src/main/java/com/vaadin/flow/router/NavigationTrigger.java\nindex 5741ab83d51..c4d358b128e 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/NavigationTrigger.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/NavigationTrigger.java\n@@ -66,5 +66,12 @@ public enum NavigationTrigger {\n     /**\n      * Navigation is for a reload event on a preserveOnRefresh route.\n      */\n-    REFRESH\n+    REFRESH,\n+\n+    /**\n+     * Navigation was triggered via {@link UI#refreshCurrentRoute(boolean)}.\n+     * It's for internal use only.\n+     */\n+    REFRESH_ROUTE,\n+\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\nindex 393acc47286..86092096d7f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n@@ -24,7 +24,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.function.Supplier;\n@@ -41,6 +40,7 @@\n import com.vaadin.flow.internal.Pair;\n import com.vaadin.flow.internal.StateNode;\n import com.vaadin.flow.internal.UsageStatistics;\n+import com.vaadin.flow.internal.menu.MenuRegistry;\n import com.vaadin.flow.router.AfterNavigationEvent;\n import com.vaadin.flow.router.BeforeEnterEvent;\n import com.vaadin.flow.router.BeforeEnterObserver;\n@@ -51,7 +51,6 @@\n import com.vaadin.flow.router.ErrorNavigationEvent;\n import com.vaadin.flow.router.ErrorParameter;\n import com.vaadin.flow.router.EventUtil;\n-import com.vaadin.flow.router.HasDynamicTitle;\n import com.vaadin.flow.router.Location;\n import com.vaadin.flow.router.LocationChangeEvent;\n import com.vaadin.flow.router.NavigationEvent;\n@@ -62,7 +61,6 @@\n import com.vaadin.flow.router.PageTitle;\n import com.vaadin.flow.router.PreserveOnRefresh;\n import com.vaadin.flow.router.QueryParameters;\n-import com.vaadin.flow.router.Route;\n import com.vaadin.flow.router.RouteParameters;\n import com.vaadin.flow.router.Router;\n import com.vaadin.flow.router.RouterLayout;\n@@ -70,7 +68,6 @@\n import com.vaadin.flow.server.HttpStatusCode;\n import com.vaadin.flow.server.RouteRegistry;\n import com.vaadin.flow.server.VaadinSession;\n-import com.vaadin.flow.internal.menu.MenuRegistry;\n import com.vaadin.flow.server.menu.AvailableViewInfo;\n \n /**\n@@ -258,6 +255,19 @@ public int handle(NavigationEvent event) {\n         List<RouterLayout> routerLayouts = (List<RouterLayout>) (List<?>) chain\n                 .subList(1, chain.size());\n \n+        // If a route refresh has been requested, remove all modal components.\n+        // This is necessary because maintaining the correct modality\n+        // cardinality and order is not feasible without knowing who opened them\n+        // and when.\n+        if (ui.hasModalComponent()\n+                && event.getTrigger() == NavigationTrigger.REFRESH_ROUTE) {\n+            Component modalComponent;\n+            while ((modalComponent = ui.getInternals()\n+                    .getActiveModalComponent()) != null) {\n+                modalComponent.removeFromParent();\n+            }\n+        }\n+\n         // Change the UI according to the navigation Component chain.\n         ui.getInternals().showRouteTarget(event.getLocation(),\n                 componentInstance, routerLayouts);\n"", ""test_patch"": ""diff --git a/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java b/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\nindex 4ae56203b0c..b46c9615c4d 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/hotswap/HotswapperTest.java\n@@ -38,6 +38,8 @@\n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.internal.BrowserLiveReload;\n import com.vaadin.flow.internal.BrowserLiveReloadAccessor;\n+import com.vaadin.flow.router.AfterNavigationEvent;\n+import com.vaadin.flow.router.AfterNavigationObserver;\n import com.vaadin.flow.router.Layout;\n import com.vaadin.flow.router.ParentLayout;\n import com.vaadin.flow.router.Route;\n@@ -280,6 +282,21 @@ public void onHotswap_pushDisabled_routeClassChanged_UINotRefreshedButLiveReload\n         Mockito.verify(liveReload).refresh(anyBoolean());\n     }\n \n+    @Test\n+    public void onHotswap_pushDisabled_routeClassChanged_modalComponents_UINotRefreshedButLiveReloadFullRefreshTriggered()\n+            throws ServiceException {\n+        VaadinSession session = createMockVaadinSession();\n+        hotswapper.sessionInit(new SessionInitEvent(service, session, null));\n+        RefreshTestingUI ui = initUIAndNavigateTo(session,\n+                MyRouteWithModal.class);\n+\n+        hotswapper.onHotswap(new String[] { MyRouteWithModal.class.getName() },\n+                true);\n+\n+        ui.assertNotRefreshed();\n+        Mockito.verify(liveReload).refresh(true);\n+    }\n+\n     @Test\n     public void onHotswap_pushDisabled_autoLayout_classUnrelatedToUIChanged_noReload()\n             throws ServiceException {\n@@ -470,6 +487,24 @@ public void onHotswap_pushEnabled_routeClassChanged_routeRefreshed()\n         Mockito.verify(liveReload, never()).refresh(anyBoolean());\n     }\n \n+    @Test\n+    public void onHotswap_pushEnabled_routeClassChanged_modalComponent_activeChainRefreshed()\n+            throws ServiceException {\n+        VaadinSession session = createMockVaadinSession();\n+        hotswapper.sessionInit(new SessionInitEvent(service, session, null));\n+\n+        RefreshTestingUI ui = initUIAndNavigateTo(session,\n+                MyRouteWithModal.class);\n+        ui.enablePush();\n+\n+        hotswapper.onHotswap(new String[] { MyRouteWithModal.class.getName() },\n+                true);\n+\n+        ui.assertChainRefreshed();\n+        Mockito.verify(liveReload, never()).reload();\n+        Mockito.verify(liveReload, never()).refresh(anyBoolean());\n+    }\n+\n     @Test\n     public void onHotswap_pushEnabled_routeLayoutClassChanged_activeChainRefreshed()\n             throws ServiceException {\n@@ -823,6 +858,17 @@ public MyRouteWithChild() {\n         }\n     }\n \n+    @Tag(\""my-route-with-modal\"")\n+    public static class MyRouteWithModal extends Component\n+            implements HasComponents, AfterNavigationObserver {\n+\n+        @Override\n+        public void afterNavigation(AfterNavigationEvent event) {\n+            event.getLocationChangeEvent().getUI().addModal(new MyComponent());\n+        }\n+\n+    }\n+\n     @Tag(\""my-layout\"")\n     public static class MyLayout extends Component implements RouterLayout {\n \n@@ -903,7 +949,11 @@ public RefreshTestingUI(VaadinSession session) {\n         @Override\n         public void refreshCurrentRoute(boolean refreshRouteChain) {\n             refreshRouteChainRequested = refreshRouteChain;\n-            super.refreshCurrentRoute(refreshRouteChain);\n+            // No need to perform real navigation, tests only need to know if\n+            // the method has been invoked.\n+            // Navigation would fail anyway because of usage of method scoped\n+            // classes. Blocking navigation prevents logs to be bloated by\n+            // exception stack traces.\n         }\n \n         void assertNotRefreshed() {\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java b/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\nindex 48be2a1a6bc..41aa569bd41 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/router/internal/NavigationStateRendererTest.java\n@@ -40,7 +40,9 @@\n import org.mockito.MockedStatic;\n import org.mockito.Mockito;\n \n+import com.vaadin.flow.component.AttachEvent;\n import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.DetachEvent;\n import com.vaadin.flow.component.HasElement;\n import com.vaadin.flow.component.Tag;\n import com.vaadin.flow.component.Text;\n@@ -53,6 +55,7 @@\n import com.vaadin.flow.function.DeploymentConfiguration;\n import com.vaadin.flow.internal.ReflectTools;\n import com.vaadin.flow.internal.UsageStatistics;\n+import com.vaadin.flow.internal.menu.MenuRegistry;\n import com.vaadin.flow.router.AfterNavigationEvent;\n import com.vaadin.flow.router.AfterNavigationObserver;\n import com.vaadin.flow.router.BeforeEnterEvent;\n@@ -81,11 +84,11 @@\n import com.vaadin.flow.server.ServiceException;\n import com.vaadin.flow.server.WrappedSession;\n import com.vaadin.flow.server.menu.AvailableViewInfo;\n-import com.vaadin.flow.internal.menu.MenuRegistry;\n import com.vaadin.flow.server.startup.ApplicationRouteRegistry;\n import com.vaadin.tests.util.AlwaysLockedVaadinSession;\n import com.vaadin.tests.util.MockDeploymentConfiguration;\n import com.vaadin.tests.util.MockUI;\n+\n import elemental.json.Json;\n import elemental.json.JsonValue;\n \n@@ -817,6 +820,55 @@ public void handle_clientNavigation_withMatchingFlowRoute() {\n         }\n     }\n \n+    @Test\n+    public void handle_refreshRoute_modalComponentsDetached() {\n+        beforeEnterCount = new AtomicInteger();\n+        viewAttachCount = new AtomicInteger();\n+\n+        // given a service with instantiator\n+        MockVaadinServletService service = createMockServiceWithInstantiator();\n+\n+        // given a locked session\n+        MockVaadinSession session = new AlwaysLockedVaadinSession(service);\n+        session.setConfiguration(new MockDeploymentConfiguration());\n+\n+        // given a NavigationStateRenderer mapping to PreservedNestedView\n+        Router router = session.getService().getRouter();\n+        NavigationStateRenderer renderer = new NavigationStateRenderer(\n+                new NavigationStateBuilder(router)\n+                        .withTarget(RootRouteWithParam.class).withPath(\""\"")\n+                        .build());\n+        router.getRegistry().setRoute(\""\"", RootRouteWithParam.class, null);\n+\n+        @Tag(\""modal-component\"")\n+        class ModalComponent extends Component {\n+            private int attachCount;\n+            private int detachCount;\n+\n+            @Override\n+            protected void onAttach(AttachEvent attachEvent) {\n+                attachCount++;\n+                super.onAttach(attachEvent);\n+            }\n+\n+            @Override\n+            protected void onDetach(DetachEvent detachEvent) {\n+                detachCount++;\n+                super.onDetach(detachEvent);\n+            }\n+        }\n+\n+        ModalComponent modalComponent = new ModalComponent();\n+        MockUI ui = new MockUI(session);\n+        ui.addModal(modalComponent);\n+\n+        renderer.handle(new NavigationEvent(router, new Location(\""\""), ui,\n+                NavigationTrigger.REFRESH_ROUTE, null, false, true, true));\n+\n+        Assert.assertEquals(1, modalComponent.attachCount);\n+        Assert.assertEquals(1, modalComponent.detachCount);\n+    }\n+\n     private MockVaadinServletService createMockServiceWithInstantiator() {\n         MockVaadinServletService service = new MockVaadinServletService();\n         service.init(new MockInstantiator() {\n\ndiff --git a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteView.java b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteView.java\nindex dca5cd70578..f654c9065f4 100644\n--- a/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteView.java\n+++ b/flow-tests/test-root-context/src/main/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteView.java\n@@ -28,6 +28,7 @@ public class RefreshCurrentRouteView extends Div implements BeforeEnterObserver,\n     final static String NAVIGATE_ID = \""navigate\"";\n     final static String REFRESH_ID = \""refresh\"";\n     final static String REFRESH_LAYOUTS_ID = \""refreshlayouts\"";\n+    final static String OPEN_MODALS_ID = \""openmodals\"";\n \n     private int attach, detach, afterNav, beforeEnter, beforeLeave;\n     private final Div id, attachCounter, detachCounter, afterNavCounter,\n@@ -58,6 +59,11 @@ public RefreshCurrentRouteView() {\n                 e -> UI.getCurrent().refreshCurrentRoute(true));\n         refresh.setId(REFRESH_LAYOUTS_ID);\n         add(refresh);\n+\n+        NativeButton openModals = new NativeButton(\""Open modal components\"",\n+                e -> openModals());\n+        openModals.setId(OPEN_MODALS_ID);\n+        add(openModals);\n     }\n \n     protected String getNavigationTarget() {\n@@ -72,6 +78,12 @@ private Div createCounterSpan(String id) {\n         return counter;\n     }\n \n+    private void openModals() {\n+        new Dialog(1).open();\n+        new Dialog(2).open();\n+        new Dialog(3).open();\n+    }\n+\n     @Override\n     protected void onAttach(AttachEvent event) {\n         super.onAttach(event);\n@@ -81,6 +93,8 @@ protected void onAttach(AttachEvent event) {\n     @Override\n     public void afterNavigation(AfterNavigationEvent event) {\n         afterNavCounter.setText(Integer.toString(++afterNav));\n+        event.getLocationChangeEvent().getQueryParameter(\""modal\"")\n+                .ifPresent(unused -> openModals());\n     }\n \n     @Override\n@@ -98,4 +112,38 @@ protected void onDetach(DetachEvent event) {\n         super.onDetach(event);\n         detachCounter.setText(Integer.toString(++detach));\n     }\n+\n+    public static class Dialog extends Div {\n+\n+        public Dialog(int dialogId) {\n+            setId(\""modal-\"" + dialogId);\n+            add(new Div(\""modal \"" + dialogId));\n+            NativeButton button = new NativeButton(\""Refresh route\"",\n+                    ev -> UI.getCurrent().refreshCurrentRoute(false));\n+            button.setId(\""modal-\"" + dialogId + \""-\"" + REFRESH_ID);\n+            add(button);\n+\n+            button = new NativeButton(\""Refresh all\"",\n+                    ev -> UI.getCurrent().refreshCurrentRoute(false));\n+            button.setId(\""modal-\"" + dialogId + \""-\"" + REFRESH_LAYOUTS_ID);\n+            add(button);\n+\n+            button = new NativeButton(\""Close\"", ev -> close());\n+            button.setId(\""modal-\"" + dialogId + \""-close\"");\n+            add(button);\n+            getStyle().set(\""position\"", \""fixed\"").set(\""inset\"", \""10% 10%\"")\n+                    .setWidth(\""50%\"").setHeight(\""50%\"")\n+                    .setBackgroundColor(\""green\"").setBorder(\""1px solid black\"")\n+                    .setZIndex(dialogId);\n+        }\n+\n+        public void open() {\n+            UI.getCurrent().addModal(this);\n+        }\n+\n+        public void close() {\n+            UI.getCurrent().remove(this);\n+        }\n+    }\n+\n }\n\ndiff --git a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteIT.java b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteIT.java\nindex fd1b5c680e1..f7181080de0 100644\n--- a/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteIT.java\n+++ b/flow-tests/test-root-context/src/test/java/com/vaadin/flow/uitest/ui/RefreshCurrentRouteIT.java\n@@ -13,6 +13,7 @@\n import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteView.DETACHCOUNTER_ID;\n import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteView.ID;\n import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteView.NAVIGATE_ID;\n+import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteView.OPEN_MODALS_ID;\n import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteView.REFRESH_ID;\n import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteView.REFRESH_LAYOUTS_ID;\n import static com.vaadin.flow.uitest.ui.RefreshCurrentRouteLayout.ROUTER_LAYOUT_ID;\n@@ -81,6 +82,40 @@ public void refreshCurrentRoute_ensureNewInstanceAndCorrectEventCounts_newLayout\n         assertInitialEventCounters();\n     }\n \n+    public void refreshCurrentRoute_modalComponents_newRouteAndLayout() {\n+        open(\""modal=true\"");\n+\n+        final String originalId = getString(ID);\n+        final String originalLayoutId = getString(ROUTER_LAYOUT_ID);\n+\n+        assertInitialEventCounters();\n+\n+        waitForElementPresent(By.id(\""modal-1\""));\n+        waitForElementPresent(By.id(\""modal-2\""));\n+        waitForElementPresent(By.id(\""modal-3\""));\n+        $(NativeButtonElement.class).id(\""modal-3-refresh\"").click();\n+\n+        // UUID should be new since refresh creates new instance\n+        Assert.assertNotEquals(getString(ID), originalId);\n+        // UUID should be new since new layout instances were requested\n+        Assert.assertNotEquals(getString(ROUTER_LAYOUT_ID), originalLayoutId);\n+\n+        // Event counters should equal original values\n+        assertInitialEventCounters();\n+\n+        waitForElementPresent(By.id(\""modal-1\""));\n+        waitForElementPresent(By.id(\""modal-2\""));\n+        waitForElementPresent(By.id(\""modal-3\""));\n+\n+        $(NativeButtonElement.class).id(\""modal-3-close\"").click();\n+        $(NativeButtonElement.class).id(\""modal-2-close\"").click();\n+        $(NativeButtonElement.class).id(\""modal-1-refresh\"").click();\n+\n+        waitForElementPresent(By.id(\""modal-1\""));\n+        waitForElementPresent(By.id(\""modal-2\""));\n+        waitForElementPresent(By.id(\""modal-3\""));\n+    }\n+\n     private void assertInitialEventCounters() {\n         Assert.assertEquals(1, getInt(ATTACHCOUNTER_ID));\n         Assert.assertEquals(0, getInt(DETACHCOUNTER_ID));\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""vaadin__flow-20516"", ""pr_id"": 20516, ""issue_id"": 19497, ""repo"": ""vaadin/flow"", ""problem_statement"": ""Hilla app with @PWA annotation fails when running as native compiled image on macOS\n### Describe the bug\n\nA Hilla app with `@PWA` annotation throws an exception when running as native compiled image:\r\n\r\n```\r\njava.lang.UnsatisfiedLinkError: No awt in java.library.path\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.jdk.NativeLibrarySupport.loadLibraryRelative(NativeLibrarySupport.java:136) ~[na:na]\r\n```\n\n### Expected-behavior\n\nA Hilla app with `@PWA` annotation should not throw unexpected exceptions when running as native compiled image.\n\n### Reproduction\n\nCreate a new Hilla project:\r\n```\r\nnpx @hilla/cli@latest init --next hilla-native-pwa\r\n```\r\n\r\nAdd `@PWA(name = \""Hilla PWA\"", shortName = \""PWA\"")` to `src/main/java/com/example/application/Application.java`.\r\n\r\nCompile Hilla app to native image:\r\n```\r\n./mvnw clean package -Pproduction -Pnative native:compile\r\n```\r\n\r\nRun Hilla app as native compiled image:\r\n```\r\n./target/hilla-native-pwa\r\n```\n\n### System Info\n\nHilla: 24.4.0.beta5\r\nHilla CLI: 2.0.1\r\nJava: 21.0.2 (OpenJDK Runtime Environment GraalVM CE 21.0.2+13.1 - build 21.0.2+13-jvmci-23.1-b30)\r\nOS: macOS Sonoma 14.4.1 (23E224)"", ""issue_word_count"": 174, ""test_files_count"": 2, ""non_test_files_count"": 5, ""pr_changed_files"": [""flow-server/src/main/java/com/vaadin/flow/server/Constants.java"", ""flow-server/src/main/java/com/vaadin/flow/server/PwaIcon.java"", ""flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java"", ""flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIcons.java"", ""flow-server/src/test/java/com/vaadin/flow/server/communication/PwaHandlerTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIconsTest.java""], ""pr_changed_test_files"": [""flow-server/src/test/java/com/vaadin/flow/server/communication/PwaHandlerTest.java"", ""flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIconsTest.java""], ""base_commit"": ""bd8c796f4478612b766a2bc73a749c83642ff0a0"", ""head_commit"": ""8a2faa342a427321e34dfbe47f3387e7b293e9d9"", ""repo_url"": ""https://github.com/vaadin/flow/pull/20516"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/vaadin__flow/20516"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-20T11:50:07.000Z"", ""patch"": ""diff --git a/flow-server/src/main/java/com/vaadin/flow/server/Constants.java b/flow-server/src/main/java/com/vaadin/flow/server/Constants.java\nindex 25e15f8b9e2..edc8e74af5c 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/Constants.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/Constants.java\n@@ -185,6 +185,11 @@ public final class Constants implements Serializable {\n      */\n     public static final String VAADIN_WEBAPP = \""webapp/\"";\n \n+    /**\n+     * The generated PWA icons folder.\n+     */\n+    public static final String VAADIN_PWA_ICONS = \""pwa-icons/\"";\n+\n     /**\n      * The path to meta-inf/VAADIN/ where static resources are put on the\n      * servlet.\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/PwaIcon.java b/flow-server/src/main/java/com/vaadin/flow/server/PwaIcon.java\nindex 6b946bde642..9d877e52bdf 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/PwaIcon.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/PwaIcon.java\n@@ -16,12 +16,14 @@\n package com.vaadin.flow.server;\n \n import javax.imageio.ImageIO;\n+\n import java.awt.Color;\n import java.awt.Graphics2D;\n import java.awt.Image;\n import java.awt.image.BufferedImage;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.OutputStream;\n import java.io.Serializable;\n import java.io.UncheckedIOException;\n@@ -99,6 +101,15 @@ public enum Domain {\n         setRelativeName();\n     }\n \n+    protected PwaIcon(PwaIcon icon) {\n+        this.width = icon.width;\n+        this.height = icon.height;\n+        this.baseName = icon.baseName;\n+        this.domain = icon.domain;\n+        this.shouldBeCached = icon.shouldBeCached;\n+        this.attributes.putAll(icon.attributes);\n+    }\n+\n     /**\n      * Gets an {@link Element} presentation of the icon.\n      *\n@@ -236,6 +247,25 @@ public void setImage(BufferedImage image) {\n         }\n     }\n \n+    void setImage(InputStream image) throws IOException {\n+        if (image != null) {\n+            data = image.readAllBytes();\n+            fileHash = Arrays.hashCode(data);\n+            setRelativeName();\n+        }\n+    }\n+\n+    /**\n+     * Gets if the icon can be written on a stream or not.\n+     *\n+     * @return {@literal true} if the icon can be written, otherwise\n+     *         {@literal false}.\n+     * @see #write(OutputStream)\n+     */\n+    boolean isAvailable() {\n+        return data != null || registry.getBaseImage() != null;\n+    }\n+\n     /**\n      * Writes the icon image to output stream.\n      *\n@@ -246,7 +276,7 @@ public void write(OutputStream outputStream) {\n         if (data == null) {\n             // New image with wanted size\n             // Store byte array and hashcode of image (GeneratedImage)\n-            setImage(drawIconImage(registry.getBaseImage()));\n+            setImage(drawIconImage(getBaseImage()));\n         }\n         try {\n             outputStream.write(data);\n@@ -257,6 +287,11 @@ public void write(OutputStream outputStream) {\n         }\n     }\n \n+    // visible for test\n+    protected BufferedImage getBaseImage() {\n+        return registry.getBaseImage();\n+    }\n+\n     private BufferedImage drawIconImage(BufferedImage baseImage) {\n         // Pick top-left pixel as fill color if needed for image\n         // resizing\n@@ -296,4 +331,5 @@ private BufferedImage drawIconImage(BufferedImage baseImage) {\n         graphics.dispose();\n         return bimage;\n     }\n+\n }\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java b/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java\nindex 6446891c917..e759c5ff22d 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java\n@@ -15,12 +15,10 @@\n  */\n package com.vaadin.flow.server;\n \n-import javax.imageio.ImageIO;\n import jakarta.servlet.ServletContext;\n \n-import java.awt.Color;\n-import java.awt.Graphics2D;\n-import java.awt.Image;\n+import javax.imageio.ImageIO;\n+\n import java.awt.image.BufferedImage;\n import java.io.BufferedReader;\n import java.io.IOException;\n@@ -29,21 +27,21 @@\n import java.io.Serializable;\n import java.io.UncheckedIOException;\n import java.net.MalformedURLException;\n-import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.URLConnection;\n import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.LinkedHashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n import com.vaadin.flow.server.communication.PwaHandler;\n import com.vaadin.flow.server.startup.ApplicationConfiguration;\n import com.vaadin.flow.server.startup.ApplicationRouteRegistry;\n@@ -85,6 +83,7 @@ public class PwaRegistry implements Serializable {\n     private List<PwaIcon> icons = new ArrayList<>();\n     private final PwaConfiguration pwaConfiguration;\n \n+    private URL baseImageUrl;\n     private BufferedImage baseImage;\n \n     /**\n@@ -113,7 +112,21 @@ public PwaRegistry(PWA pwa, ServletContext servletContext)\n         initializeResources(servletContext);\n     }\n \n+    // Lazy load base image to prevent using AWT api unless icon\n+    // generation is required at runtime.\n+    // baseImageUrl is computed during registry initialization and used on to\n+    // load the image.\n     BufferedImage getBaseImage() {\n+        if (baseImage == null && baseImageUrl != null) {\n+            try {\n+                baseImage = getBaseImage(baseImageUrl);\n+            } catch (IOException ex) {\n+                getLogger().error(\""Image is not found or can't be loaded: {}\"",\n+                        baseImageUrl);\n+            } finally {\n+                baseImageUrl = null;\n+            }\n+        }\n         return baseImage;\n     }\n \n@@ -124,24 +137,19 @@ private void initializeResources(ServletContext servletContext)\n         }\n         long start = System.currentTimeMillis();\n \n+        // Load base logo from servlet context if available\n+        // fall back to local image if unavailable\n         URL logo = getResourceUrl(servletContext,\n                 pwaConfiguration.relIconPath());\n+        baseImageUrl = logo != null ? logo\n+                : BootstrapHandler.class.getResource(\""default-logo.png\"");\n \n         URL offlinePage = pwaConfiguration.isOfflinePathEnabled()\n                 ? getResourceUrl(servletContext,\n                         pwaConfiguration.relOfflinePath())\n                 : null;\n \n-        // Load base logo from servlet context if available\n-        // fall back to local image if unavailable\n-        baseImage = getBaseImage(logo);\n-\n-        if (baseImage == null) {\n-            getLogger().error(\""Image is not found or can't be loaded: \"" + logo);\n-        } else {\n-            // initialize icons\n-            icons = initializeIcons();\n-        }\n+        icons = initializeIcons(servletContext);\n \n         // Load offline page as string, from servlet context if\n         // available, fall back to default page\n@@ -175,14 +183,43 @@ private URL getResourceUrl(ServletContext context, String path)\n         return resourceUrl;\n     }\n \n-    private List<PwaIcon> initializeIcons() {\n+    private List<PwaIcon> initializeIcons(ServletContext servletContext) {\n+        Optional<ResourceProvider> optionalResourceProvider = Optional\n+                .ofNullable(new VaadinServletContext(servletContext)\n+                        .getAttribute(Lookup.class))\n+                .map(lookup -> lookup.lookup(ResourceProvider.class));\n         for (PwaIcon icon : getIconTemplates(pwaConfiguration.getIconPath())) {\n             icon.setRegistry(this);\n-            icons.add(icon);\n+            // Try to find a pre-generated image\n+            String iconPath = Constants.VAADIN_WEBAPP_RESOURCES\n+                    + Constants.VAADIN_PWA_ICONS\n+                    + icon.getRelHref().substring(1);\n+            optionalResourceProvider.ifPresent(\n+                    provider -> tryLoadGeneratedIcon(provider, icon, iconPath));\n+            if (icon.isAvailable()) {\n+                icons.add(icon);\n+            }\n         }\n         return icons;\n     }\n \n+    private static void tryLoadGeneratedIcon(ResourceProvider resourceProvider,\n+            PwaIcon icon, String iconPath) {\n+        URL iconResource = resourceProvider.getApplicationResource(iconPath);\n+        if (iconResource != null) {\n+            try (InputStream data = iconResource.openStream()) {\n+                icon.setImage(data);\n+                getLogger().trace(\""Loading generated PWA image from {}\"",\n+                        iconPath);\n+            } catch (IOException ex) {\n+                // Ignore, icon will be generated at runtime\n+                getLogger().debug(\n+                        \""Cannot load generated PWA image from {}. Icon will be regenerated at runtime.\"",\n+                        iconPath, ex);\n+            }\n+        }\n+    }\n+\n     /**\n      * Creates manifest.webmanifest json object.\n      *\n@@ -443,7 +480,14 @@ public PwaConfiguration getPwaConfiguration() {\n         return pwaConfiguration;\n     }\n \n-    static List<PwaIcon> getIconTemplates(String baseName) {\n+    /**\n+     * Gets all PWA icon variants for the give base icon.\n+     *\n+     * @param baseName\n+     *            path of the base icon.\n+     * @return list of PWA icons variants.\n+     */\n+    public static List<PwaIcon> getIconTemplates(String baseName) {\n         List<PwaIcon> icons = new ArrayList<>();\n         // Basic manifest icons for android support\n         icons.add(\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\nindex 5b0114ce888..3169fa8d667 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java\n@@ -35,7 +35,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.vaadin.experimental.FeatureFlags;\n import com.vaadin.flow.di.Lookup;\n import com.vaadin.flow.internal.UsageStatistics;\n import com.vaadin.flow.server.Constants;\n@@ -80,6 +79,7 @@ public class NodeTasks implements FallibleCommand {\n             TaskGenerateEndpoint.class,\n             TaskCopyFrontendFiles.class,\n             TaskCopyLocalFrontendFiles.class,\n+            TaskGeneratePWAIcons.class,\n             TaskUpdateSettingsFile.class,\n             TaskUpdateVite.class,\n             TaskUpdateImports.class,\n@@ -259,6 +259,9 @@ public NodeTasks(Options options) {\n         } else {\n             pwa = new PwaConfiguration();\n         }\n+        if (options.isProductionMode() && pwa.isEnabled()) {\n+            commands.add(new TaskGeneratePWAIcons(options, pwa));\n+        }\n         commands.add(new TaskUpdateSettingsFile(options, themeName, pwa));\n         if (options.isFrontendHotdeploy() || options.isBundleBuild()) {\n             commands.add(new TaskUpdateVite(options, webComponentTags));\n\ndiff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIcons.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIcons.java\nnew file mode 100644\nindex 00000000000..52a0cbbead2\n--- /dev/null\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIcons.java\n@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.frontend;\n+\n+import javax.imageio.ImageIO;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.server.BootstrapHandler;\n+import com.vaadin.flow.server.Constants;\n+import com.vaadin.flow.server.ExecutionFailedException;\n+import com.vaadin.flow.server.PwaConfiguration;\n+import com.vaadin.flow.server.PwaIcon;\n+import com.vaadin.flow.server.PwaRegistry;\n+import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n+\n+/**\n+ * Generates necessary PWA icons.\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ */\n+public class TaskGeneratePWAIcons implements FallibleCommand {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+            .getLogger(TaskGeneratePWAIcons.class);\n+    private static final String HEADLESS_PROPERTY = \""java.awt.headless\"";\n+\n+    private final Path generatedIconsPath;\n+    private final PwaConfiguration pwaConfiguration;\n+    private final ClassFinder classFinder;\n+\n+    public TaskGeneratePWAIcons(Options options,\n+            PwaConfiguration pwaConfiguration) {\n+        this.pwaConfiguration = pwaConfiguration;\n+        generatedIconsPath = options.getWebappResourcesDirectory().toPath()\n+                .resolve(Constants.VAADIN_PWA_ICONS);\n+        this.classFinder = options.getClassFinder();\n+    }\n+\n+    @Override\n+    public void execute() throws ExecutionFailedException {\n+        if (!pwaConfiguration.isEnabled()) {\n+            return;\n+        }\n+        URL iconURL = findIcon(pwaConfiguration);\n+        if (iconURL == null) {\n+            LOGGER.warn(\n+                    \""Skipping PWA icons generation because icon '{}' cannot be found in classpath\"",\n+                    pwaConfiguration.getIconPath());\n+            return;\n+        }\n+\n+        String headless = System.getProperty(HEADLESS_PROPERTY);\n+        if (headless == null) {\n+            // set headless mode if the property is not explicitly set\n+            System.setProperty(HEADLESS_PROPERTY, Boolean.TRUE.toString());\n+        }\n+\n+        LOGGER.debug(\""Generating PWA icons from '{}'\"",\n+                pwaConfiguration.getIconPath());\n+\n+        try {\n+            BufferedImage baseImage = loadBaseImage(iconURL);\n+            createGeneratedIconsFolder();\n+\n+            CompletableFuture<?>[] iconsGenerators = PwaRegistry\n+                    .getIconTemplates(pwaConfiguration.getIconPath()).stream()\n+                    .map(icon -> new InternalPwaIcon(icon, baseImage))\n+                    .map(this::generateIcon).toArray(CompletableFuture[]::new);\n+\n+            try {\n+                CompletableFuture.allOf(iconsGenerators).join();\n+            } catch (CompletionException ex) {\n+                Throwable cause = ex.getCause();\n+                if (cause instanceof UncheckedIOException uncheckedIOException) {\n+                    throw new ExecutionFailedException(\n+                            \""PWA icons generation failed\"",\n+                            uncheckedIOException.getCause());\n+                }\n+                throw new ExecutionFailedException(\n+                        \""PWA icons generation failed\"", cause);\n+            } catch (CancellationException ex) {\n+                throw new ExecutionFailedException(\n+                        \""PWA icons generation failed\"", ex);\n+            }\n+        } finally {\n+            if (headless == null) {\n+                System.clearProperty(HEADLESS_PROPERTY);\n+            } else if (!headless.equals(Boolean.TRUE.toString())) {\n+                System.setProperty(HEADLESS_PROPERTY, headless);\n+            }\n+        }\n+        LOGGER.info(\""PWA icons generated\"");\n+    }\n+\n+    private void createGeneratedIconsFolder() throws ExecutionFailedException {\n+        try {\n+            Path generatedPath = generatedIconsPath\n+                    .resolve(Path.of(pwaConfiguration.getIconPath().replace('/',\n+                            File.separatorChar)))\n+                    .getParent();\n+            Files.createDirectories(generatedPath);\n+        } catch (IOException e) {\n+            throw new ExecutionFailedException(\n+                    \""Cannot create PWA generated icons folder \""\n+                            + generatedIconsPath,\n+                    e);\n+        }\n+    }\n+\n+    private static BufferedImage loadBaseImage(URL iconURL)\n+            throws ExecutionFailedException {\n+        BufferedImage baseImage;\n+        try (InputStream inputStream = iconURL.openStream()) {\n+            baseImage = ImageIO.read(inputStream);\n+        } catch (IOException e) {\n+            throw new ExecutionFailedException(\n+                    \""Cannot load PWA icon from \"" + iconURL, e);\n+        }\n+        if (baseImage == null) {\n+            throw new ExecutionFailedException(\n+                    \""Cannot load PWA icon from \"" + iconURL);\n+        }\n+        return baseImage;\n+    }\n+\n+    private URL findIcon(PwaConfiguration pwaConfiguration) {\n+        URL iconURL = classFinder.getResource(pwaConfiguration.getIconPath());\n+        if (iconURL == null) {\n+            iconURL = classFinder.getResource(\n+                    \""META-INF/resources/\"" + pwaConfiguration.getIconPath());\n+        }\n+        if (iconURL == null) {\n+            iconURL = BootstrapHandler.class.getResource(\""default-logo.png\"");\n+            if (iconURL == null) {\n+                LOGGER.warn(\n+                        \""PWA icon '{}' cannot be found in classpath, fallback to default icon.\"",\n+                        pwaConfiguration.getIconPath());\n+            }\n+        }\n+        return iconURL;\n+    }\n+\n+    private CompletableFuture<?> generateIcon(InternalPwaIcon icon) {\n+        Path iconPath = generatedIconsPath.resolve(icon.getRelHref()\n+                .substring(1).replace('/', File.separatorChar));\n+        return CompletableFuture.runAsync(() -> {\n+            try (OutputStream os = Files.newOutputStream(iconPath)) {\n+                icon.write(os);\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        });\n+    }\n+\n+    private BufferedImage getBaseImage(URL logo) throws IOException {\n+        URLConnection logoResource = logo != null ? logo.openConnection()\n+                : BootstrapHandler.class.getResource(\""default-logo.png\"")\n+                        .openConnection();\n+        return ImageIO.read(logoResource.getInputStream());\n+    }\n+\n+    private static class InternalPwaIcon extends PwaIcon {\n+        private final BufferedImage baseImage;\n+\n+        public InternalPwaIcon(PwaIcon icon, BufferedImage baseImage) {\n+            super(icon);\n+            this.baseImage = baseImage;\n+        }\n+\n+        @Override\n+        protected BufferedImage getBaseImage() {\n+            return baseImage;\n+        }\n+    }\n+}\n"", ""test_patch"": ""diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/PwaHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/PwaHandlerTest.java\nindex 05ed85dc769..e5fb4a54cd7 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/PwaHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/PwaHandlerTest.java\n@@ -15,6 +15,7 @@\n  */\n package com.vaadin.flow.server.communication;\n \n+import java.awt.image.BufferedImage;\n import java.io.IOException;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n@@ -132,6 +133,7 @@ private PwaIcon createIcon(PwaRegistry registry, int size)\n         PwaIcon icon = ctor.newInstance(size, size,\n                 PwaConfiguration.DEFAULT_ICON);\n         icon.setRegistry(registry);\n+        icon.setImage(new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB));\n         return icon;\n     }\n }\n\ndiff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIconsTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIconsTest.java\nnew file mode 100644\nindex 00000000000..42ab3812c15\n--- /dev/null\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/TaskGeneratePWAIconsTest.java\n@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2000-2024 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \""License\""); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.server.frontend;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.server.Constants;\n+import com.vaadin.flow.server.ExecutionFailedException;\n+import com.vaadin.flow.server.PwaConfiguration;\n+import com.vaadin.flow.server.frontend.scanner.ClassFinder;\n+import com.vaadin.flow.server.frontend.scanner.FrontendDependenciesScanner;\n+\n+public class TaskGeneratePWAIconsTest {\n+\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+    private final TestPwaConfiguration pwaConfiguration = new TestPwaConfiguration();\n+    private TaskGeneratePWAIcons task;\n+    private Path resourcesDirectory;\n+    private Path iconsOutDirectory;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        // creating non-existing folder to make sure the execute() creates\n+        // the folder if missing\n+        File projectDirectory = temporaryFolder.newFolder(\""my-project\"");\n+        resourcesDirectory = temporaryFolder\n+                .newFolder(\""my-project\"", \""out\"", \""classes\"").toPath();\n+        Files.createDirectories(resourcesDirectory);\n+        Path resourceOutDirectory = projectDirectory.toPath()\n+                .resolve(Path.of(\""out\"", \""VAADIN\""));\n+        Path wabappResourceOutDirectory = resourceOutDirectory\n+                .resolve(\""wabapp\"");\n+        iconsOutDirectory = wabappResourceOutDirectory\n+                .resolve(Constants.VAADIN_PWA_ICONS);\n+\n+        FrontendDependenciesScanner scanner = Mockito\n+                .mock(FrontendDependenciesScanner.class);\n+        Mockito.when(scanner.getPwaConfiguration()).then(i -> pwaConfiguration);\n+\n+        URLClassLoader classFinderClassLoader = new URLClassLoader(\n+                new URL[] { resourcesDirectory.toUri().toURL() }, null);\n+        ClassFinder classFinder = new ClassFinder.DefaultClassFinder(\n+                classFinderClassLoader);\n+        Options options = new Options(Mockito.mock(Lookup.class), classFinder,\n+                projectDirectory)\n+                .withBuildResultFolders(wabappResourceOutDirectory.toFile(),\n+                        resourceOutDirectory.toFile());\n+        task = new TaskGeneratePWAIcons(options, pwaConfiguration);\n+    }\n+\n+    @Test\n+    public void execute_PWA_disabled_iconsNotGenerated()\n+            throws ExecutionFailedException {\n+        pwaConfiguration.enabled = false;\n+        task.execute();\n+        Assert.assertFalse(\""PWA icons should not have been generated\"",\n+                Files.exists(iconsOutDirectory));\n+    }\n+\n+    @Test\n+    public void execute_PWA_iconInClassPath_generateIcons()\n+            throws ExecutionFailedException, IOException {\n+        createBaseIcon(resourcesDirectory);\n+        task.execute();\n+        assertIconsGenerated();\n+    }\n+\n+    @Test\n+    public void execute_PWA_iconInMetaInfResourcesFolder_generateIcons()\n+            throws ExecutionFailedException, IOException {\n+        createBaseIcon(\n+                resourcesDirectory.resolve(Path.of(\""META-INF\"", \""resources\"")));\n+        task.execute();\n+        assertIconsGenerated();\n+    }\n+\n+    @Test\n+    public void execute_PWA_baseIconNotFound_generateIconsFromDefaultLogo()\n+            throws ExecutionFailedException, IOException {\n+        task.execute();\n+        assertIconsGenerated();\n+    }\n+\n+    @Test\n+    public void execute_PWA_invalidBaseIconNotFound_throws()\n+            throws IOException {\n+        createBaseIcon(\n+                resourcesDirectory.resolve(Path.of(\""META-INF\"", \""resources\"")),\n+                new ByteArrayInputStream(\""NOT AN IMAGE\"".getBytes()));\n+        ExecutionFailedException exception = Assert\n+                .assertThrows(ExecutionFailedException.class, task::execute);\n+        Assert.assertTrue(\n+                exception.getMessage().contains(\""Cannot load PWA icon\""));\n+        Assert.assertFalse(\""PWA icons should not have been generated\"",\n+                Files.exists(iconsOutDirectory));\n+    }\n+\n+    private void createBaseIcon(Path resourcesFolder) throws IOException {\n+        createBaseIcon(resourcesFolder, getClass()\n+                .getResourceAsStream(\""/META-INF/resources/icons/icon.png\""));\n+    }\n+\n+    private void createBaseIcon(Path resourcesFolder, InputStream data)\n+            throws IOException {\n+        Path baseIcon = resourcesFolder.resolve(resourcesFolder)\n+                .resolve(pwaConfiguration.getIconPath().replace('/',\n+                        File.separatorChar));\n+        Files.createDirectories(baseIcon.getParent());\n+        Files.copy(data, baseIcon);\n+    }\n+\n+    private void assertIconsGenerated() throws IOException {\n+        String iconPath = pwaConfiguration.getIconPath();\n+        Path generatedIconsPath = iconsOutDirectory\n+                .resolve(iconPath.replace('/', File.separatorChar)).getParent();\n+        Assert.assertTrue(\""PWA icons folder should have been generated\"",\n+                Files.exists(generatedIconsPath));\n+        String iconName = iconPath.substring(iconPath.lastIndexOf(\""/\"") + 1,\n+                iconPath.lastIndexOf(\"".\""));\n+        String iconExt = iconPath.substring(iconPath.lastIndexOf(\"".\"") + 1);\n+        Predicate<String> iconNamePattern = Pattern\n+                .compile(iconName + \""-\\\\d+x\\\\d+\\\\.\"" + iconExt).asPredicate();\n+        List<String> generatedIcons = Files.list(generatedIconsPath)\n+                .map(p -> p.getFileName().toString()).toList();\n+        Assert.assertFalse(\""Expected PWA icons to be generated\"",\n+                generatedIcons.isEmpty());\n+        List<String> invalidIcons = generatedIcons.stream()\n+                .filter(iconNamePattern.negate()).toList();\n+        Assert.assertTrue(\""Generated icons have invalid names: \"" + invalidIcons,\n+                invalidIcons.isEmpty());\n+\n+    }\n+\n+    private static class TestPwaConfiguration extends PwaConfiguration {\n+        private Boolean enabled;\n+\n+        public TestPwaConfiguration() {\n+            super(true, DEFAULT_NAME, \""Flow PWA\"", \""\"", DEFAULT_BACKGROUND_COLOR,\n+                    DEFAULT_THEME_COLOR, \""custom/icons/logo.png\"", DEFAULT_PATH,\n+                    DEFAULT_OFFLINE_PATH, DEFAULT_DISPLAY, DEFAULT_START_URL,\n+                    new String[] {}, false);\n+        }\n+\n+        @Override\n+        public boolean isEnabled() {\n+            return enabled != null ? enabled : super.isEnabled();\n+        }\n+\n+    }\n+}\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
