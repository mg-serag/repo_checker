metadata
"{""instance_id"": ""openhab__openhab-core-4776"", ""pr_id"": 4776, ""issue_id"": 3666, ""repo"": ""openhab/openhab-core"", ""problem_statement"": ""RFC: YAML configuration\nAs discussed in #3636 we need configuration for user-defined tags. It was discussed that an easy to understand standard configuration format would be preferable over creating a new DSL. It was also suggested in different issues that it would be nice to be able to copy&paste from UI to files. Main UI uses a YAML representation for things and items, so this would be good choice. We already have a feature for Jackson's YAML parser, so no additional dependencies are needed for that.\r\n\r\nHowever, there are a few things to discuss:\r\n\r\n- Should different things be configured in one file (e.g. items and things) or would be prefer to have different files?\r\n- Should there be a versioning? This would allow us to better handle future upgrades.\r\n\r\nI would suggest to add a `YamlModelRepository` (similar to our XText `ModelRepository`) that is an OSGi service that encapsulates all YAML processing and file processing. Consumer are OSGi services that implement `YamlModelListener<T>` where `T` is a DTO that describes the format. The listeners are injected into the `YamlModelRepository` and whenever a matching model (identified by the root name) is found the listener is notified.\r\n\r\n```\r\npublic interface YamlModelListener<T> {\r\n    void addedModel(String modelName, List<? extends T> elements);\r\n    void updatedModel(String modelName, List<T> elements);\r\n    void removedModel(String modelName, List<T> elements);\r\n    Class<T> getElementClass();\r\n    String getRootName();\r\n}\r\n```\r\n\r\nExample listener (not fully implemented):\r\n\r\n```\r\n@Component(service=YamlModelListener.class)\r\npublic static class TestListener implements YamlModelListener<YamlItem> {\r\n    private final Logger logger = LoggerFactory.getLogger(TestListener.class);\r\n\r\n    @Override\r\n    public void addedModel(String modelName, List<? extends YamlItem> elements) {\r\n        logger.info(\""Added model {} with elements {}\"", modelName, elements);\r\n    }\r\n\r\n    @Override\r\n    public void updatedModel(String modelName, List<YamlItem> elements) {\r\n        logger.info(\""Updated model {} with elements {}\"", modelName, elements);\r\n    }\r\n\r\n    @Override\r\n    public void removedModel(String modelName, List<YamlItem> elements) {\r\n        logger.info(\""Removed model {} with elements {}\"", modelName, elements); \r\n    }\r\n\r\n    @Override\r\n    public Class<YamlItem> getElementClass() {\r\n        return YamlItem.class;\r\n    }\r\n\r\n    @Override\r\n    public String getRootName() {\r\n        return \""items\"";\r\n    }\r\n}\r\n```\r\n\r\nExample DTO:\r\n\r\n```\r\npublic class YamlItem {\r\n    private String name = \""\"";\r\n    private String type = \""\"";\r\n    private @Nullable String label;\r\n    private @Nullable String category;\r\n    private Set<String> tags = Set.of();\r\n    private List<String> groupNames = List.of();\r\n    private List<YamlLink> links = List.of();\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public String getType() {\r\n        return type;\r\n    }\r\n\r\n    public @Nullable String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    public @Nullable String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    public Set<String> getTags() {\r\n        return tags;\r\n    }\r\n\r\n    public List<String> getGroupNames() {\r\n        return groupNames;\r\n    }\r\n\r\n    public List<YamlLink> getLinks() {\r\n        return links;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \""YamlItem{\"" + \""name='\"" + name + \""'\"" + \"", type='\"" + type + \""'\"" + \"", label='\"" + label + \""'\""\r\n                + \"", category='\"" + category + \""'\"" + \"", tags=\"" + tags + \"", groupNames=\"" + groupNames + \"", links=\"" + links\r\n                + \""}\"";\r\n    }\r\n}\r\n```\r\n\r\nand the file:\r\n\r\n```\r\nversion: 1\r\nitems:\r\n  - name: Outdoor_temp\r\n      type: Number:Temperature\r\n      label: \""Outdoor [%.1f \u00b0C]\""\r\n      groupNames:               \r\n        - gTemperatures\r\n        - gOutdoor\r\n        - gPersist5\r\n      links:\r\n        - channel: \""deconz:thing1:channel1\""\r\n        - channel: \""deconz:thing2:channel2\""\r\n          profile: \""MyScope:MyProfile\r\n```"", ""issue_word_count"": 443, ""test_files_count"": 2, ""non_test_files_count"": 11, ""pr_changed_files"": [""bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/fileformat/FileFormatResource.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/YamlModelRepositoryImpl.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/items/YamlChannelLinkProvider.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/items/YamlGroupDTO.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/items/YamlItemDTO.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/items/YamlItemProvider.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/items/YamlMetadataDTO.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/items/YamlMetadataProvider.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/items/fileconverter/YamlItemFileConverter.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/util/YamlElementUtils.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/internal/items/YamlGroupDTOTest.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/internal/items/YamlItemDTOTest.java"", ""bundles/org.openhab.core/src/main/java/org/openhab/core/library/CoreItemFactory.java""], ""pr_changed_test_files"": [""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/internal/items/YamlGroupDTOTest.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/internal/items/YamlItemDTOTest.java""], ""base_commit"": ""e9700f85ec844946926936075fdb8c093d5068eb"", ""head_commit"": ""a90c72f291a9c08aa9e4c5e8244cdfa7c68948b3"", ""repo_url"": ""https://github.com/openhab/openhab-core/pull/4776"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/openhab__openhab-core/4776"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-18T18:46:18.000Z"", ""patch"": null, ""test_patch"": null, ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""openhab__openhab-core-4691"", ""pr_id"": 4691, ""issue_id"": 3666, ""repo"": ""openhab/openhab-core"", ""problem_statement"": ""RFC: YAML configuration\nAs discussed in #3636 we need configuration for user-defined tags. It was discussed that an easy to understand standard configuration format would be preferable over creating a new DSL. It was also suggested in different issues that it would be nice to be able to copy&paste from UI to files. Main UI uses a YAML representation for things and items, so this would be good choice. We already have a feature for Jackson's YAML parser, so no additional dependencies are needed for that.\r\n\r\nHowever, there are a few things to discuss:\r\n\r\n- Should different things be configured in one file (e.g. items and things) or would be prefer to have different files?\r\n- Should there be a versioning? This would allow us to better handle future upgrades.\r\n\r\nI would suggest to add a `YamlModelRepository` (similar to our XText `ModelRepository`) that is an OSGi service that encapsulates all YAML processing and file processing. Consumer are OSGi services that implement `YamlModelListener<T>` where `T` is a DTO that describes the format. The listeners are injected into the `YamlModelRepository` and whenever a matching model (identified by the root name) is found the listener is notified.\r\n\r\n```\r\npublic interface YamlModelListener<T> {\r\n    void addedModel(String modelName, List<? extends T> elements);\r\n    void updatedModel(String modelName, List<T> elements);\r\n    void removedModel(String modelName, List<T> elements);\r\n    Class<T> getElementClass();\r\n    String getRootName();\r\n}\r\n```\r\n\r\nExample listener (not fully implemented):\r\n\r\n```\r\n@Component(service=YamlModelListener.class)\r\npublic static class TestListener implements YamlModelListener<YamlItem> {\r\n    private final Logger logger = LoggerFactory.getLogger(TestListener.class);\r\n\r\n    @Override\r\n    public void addedModel(String modelName, List<? extends YamlItem> elements) {\r\n        logger.info(\""Added model {} with elements {}\"", modelName, elements);\r\n    }\r\n\r\n    @Override\r\n    public void updatedModel(String modelName, List<YamlItem> elements) {\r\n        logger.info(\""Updated model {} with elements {}\"", modelName, elements);\r\n    }\r\n\r\n    @Override\r\n    public void removedModel(String modelName, List<YamlItem> elements) {\r\n        logger.info(\""Removed model {} with elements {}\"", modelName, elements); \r\n    }\r\n\r\n    @Override\r\n    public Class<YamlItem> getElementClass() {\r\n        return YamlItem.class;\r\n    }\r\n\r\n    @Override\r\n    public String getRootName() {\r\n        return \""items\"";\r\n    }\r\n}\r\n```\r\n\r\nExample DTO:\r\n\r\n```\r\npublic class YamlItem {\r\n    private String name = \""\"";\r\n    private String type = \""\"";\r\n    private @Nullable String label;\r\n    private @Nullable String category;\r\n    private Set<String> tags = Set.of();\r\n    private List<String> groupNames = List.of();\r\n    private List<YamlLink> links = List.of();\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public String getType() {\r\n        return type;\r\n    }\r\n\r\n    public @Nullable String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    public @Nullable String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    public Set<String> getTags() {\r\n        return tags;\r\n    }\r\n\r\n    public List<String> getGroupNames() {\r\n        return groupNames;\r\n    }\r\n\r\n    public List<YamlLink> getLinks() {\r\n        return links;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \""YamlItem{\"" + \""name='\"" + name + \""'\"" + \"", type='\"" + type + \""'\"" + \"", label='\"" + label + \""'\""\r\n                + \"", category='\"" + category + \""'\"" + \"", tags=\"" + tags + \"", groupNames=\"" + groupNames + \"", links=\"" + links\r\n                + \""}\"";\r\n    }\r\n}\r\n```\r\n\r\nand the file:\r\n\r\n```\r\nversion: 1\r\nitems:\r\n  - name: Outdoor_temp\r\n      type: Number:Temperature\r\n      label: \""Outdoor [%.1f \u00b0C]\""\r\n      groupNames:               \r\n        - gTemperatures\r\n        - gOutdoor\r\n        - gPersist5\r\n      links:\r\n        - channel: \""deconz:thing1:channel1\""\r\n        - channel: \""deconz:thing2:channel2\""\r\n          profile: \""MyScope:MyProfile\r\n```"", ""issue_word_count"": 443, ""test_files_count"": 4, ""non_test_files_count"": 12, ""pr_changed_files"": [""bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/fileformat/FileFormatResource.java"", ""bundles/org.openhab.core.model.yaml/pom.xml"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/YamlElement.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/YamlModelRepository.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/YamlModelRepositoryImpl.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/semantics/YamlSemanticTagDTO.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/things/YamlChannelDTO.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/things/YamlThingDTO.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/things/YamlThingProvider.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/things/fileconverter/YamlThingFileConverter.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/util/YamlElementUtils.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/internal/things/YamlChannelDTOTest.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/internal/things/YamlThingDTOTest.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/test/FirstTypeDTO.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/test/SecondTypeDTO.java"", ""bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/fileconverter/AbstractThingFileGenerator.java""], ""pr_changed_test_files"": [""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/internal/things/YamlChannelDTOTest.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/internal/things/YamlThingDTOTest.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/test/FirstTypeDTO.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/test/SecondTypeDTO.java""], ""base_commit"": ""1c955f3cb3d5e66aa5016822dd8bce197e0664e9"", ""head_commit"": ""02b1635a9e8ceb72a64e93d2a17c5798cb362c2c"", ""repo_url"": ""https://github.com/openhab/openhab-core/pull/4691"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/openhab__openhab-core/4691"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-19T20:21:09.000Z"", ""patch"": null, ""test_patch"": null, ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""openhab__openhab-core-4648"", ""pr_id"": 4648, ""issue_id"": 3666, ""repo"": ""openhab/openhab-core"", ""problem_statement"": ""RFC: YAML configuration\nAs discussed in #3636 we need configuration for user-defined tags. It was discussed that an easy to understand standard configuration format would be preferable over creating a new DSL. It was also suggested in different issues that it would be nice to be able to copy&paste from UI to files. Main UI uses a YAML representation for things and items, so this would be good choice. We already have a feature for Jackson's YAML parser, so no additional dependencies are needed for that.\r\n\r\nHowever, there are a few things to discuss:\r\n\r\n- Should different things be configured in one file (e.g. items and things) or would be prefer to have different files?\r\n- Should there be a versioning? This would allow us to better handle future upgrades.\r\n\r\nI would suggest to add a `YamlModelRepository` (similar to our XText `ModelRepository`) that is an OSGi service that encapsulates all YAML processing and file processing. Consumer are OSGi services that implement `YamlModelListener<T>` where `T` is a DTO that describes the format. The listeners are injected into the `YamlModelRepository` and whenever a matching model (identified by the root name) is found the listener is notified.\r\n\r\n```\r\npublic interface YamlModelListener<T> {\r\n    void addedModel(String modelName, List<? extends T> elements);\r\n    void updatedModel(String modelName, List<T> elements);\r\n    void removedModel(String modelName, List<T> elements);\r\n    Class<T> getElementClass();\r\n    String getRootName();\r\n}\r\n```\r\n\r\nExample listener (not fully implemented):\r\n\r\n```\r\n@Component(service=YamlModelListener.class)\r\npublic static class TestListener implements YamlModelListener<YamlItem> {\r\n    private final Logger logger = LoggerFactory.getLogger(TestListener.class);\r\n\r\n    @Override\r\n    public void addedModel(String modelName, List<? extends YamlItem> elements) {\r\n        logger.info(\""Added model {} with elements {}\"", modelName, elements);\r\n    }\r\n\r\n    @Override\r\n    public void updatedModel(String modelName, List<YamlItem> elements) {\r\n        logger.info(\""Updated model {} with elements {}\"", modelName, elements);\r\n    }\r\n\r\n    @Override\r\n    public void removedModel(String modelName, List<YamlItem> elements) {\r\n        logger.info(\""Removed model {} with elements {}\"", modelName, elements); \r\n    }\r\n\r\n    @Override\r\n    public Class<YamlItem> getElementClass() {\r\n        return YamlItem.class;\r\n    }\r\n\r\n    @Override\r\n    public String getRootName() {\r\n        return \""items\"";\r\n    }\r\n}\r\n```\r\n\r\nExample DTO:\r\n\r\n```\r\npublic class YamlItem {\r\n    private String name = \""\"";\r\n    private String type = \""\"";\r\n    private @Nullable String label;\r\n    private @Nullable String category;\r\n    private Set<String> tags = Set.of();\r\n    private List<String> groupNames = List.of();\r\n    private List<YamlLink> links = List.of();\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public String getType() {\r\n        return type;\r\n    }\r\n\r\n    public @Nullable String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    public @Nullable String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    public Set<String> getTags() {\r\n        return tags;\r\n    }\r\n\r\n    public List<String> getGroupNames() {\r\n        return groupNames;\r\n    }\r\n\r\n    public List<YamlLink> getLinks() {\r\n        return links;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \""YamlItem{\"" + \""name='\"" + name + \""'\"" + \"", type='\"" + type + \""'\"" + \"", label='\"" + label + \""'\""\r\n                + \"", category='\"" + category + \""'\"" + \"", tags=\"" + tags + \"", groupNames=\"" + groupNames + \"", links=\"" + links\r\n                + \""}\"";\r\n    }\r\n}\r\n```\r\n\r\nand the file:\r\n\r\n```\r\nversion: 1\r\nitems:\r\n  - name: Outdoor_temp\r\n      type: Number:Temperature\r\n      label: \""Outdoor [%.1f \u00b0C]\""\r\n      groupNames:               \r\n        - gTemperatures\r\n        - gOutdoor\r\n        - gPersist5\r\n      links:\r\n        - channel: \""deconz:thing1:channel1\""\r\n        - channel: \""deconz:thing2:channel2\""\r\n          profile: \""MyScope:MyProfile\r\n```"", ""issue_word_count"": 443, ""test_files_count"": 11, ""non_test_files_count"": 4, ""pr_changed_files"": [""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/YamlElement.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/YamlModelRepositoryImpl.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/YamlModelWrapper.java"", ""bundles/org.openhab.core.model.yaml/src/main/java/org/openhab/core/model/yaml/internal/semantics/YamlSemanticTagDTO.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/internal/YamlModelRepositoryImplTest.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/test/FirstTypeDTO.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/test/SecondTypeDTO.java"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/addToModelExpectedContent.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/addToModelV2ExpectedContent.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/modelV2FileAddedOrRemoved.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/modelV2FileUpdatePost.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/modelV2FileUpdatePre.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/modifyModelV2InitialContent.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/removeFromModelV2ExpectedContent.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/updateInModelV2ExpectedContent.yaml""], ""pr_changed_test_files"": [""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/internal/YamlModelRepositoryImplTest.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/test/FirstTypeDTO.java"", ""bundles/org.openhab.core.model.yaml/src/test/java/org/openhab/core/model/yaml/test/SecondTypeDTO.java"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/addToModelExpectedContent.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/addToModelV2ExpectedContent.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/modelV2FileAddedOrRemoved.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/modelV2FileUpdatePost.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/modelV2FileUpdatePre.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/modifyModelV2InitialContent.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/removeFromModelV2ExpectedContent.yaml"", ""bundles/org.openhab.core.model.yaml/src/test/resources/model/updateInModelV2ExpectedContent.yaml""], ""base_commit"": ""1c33c03cd41b88037f86dfc5025a06711daacee3"", ""head_commit"": ""8048b3c435de0f0114512d4f1409f4e26e6b5ed9"", ""repo_url"": ""https://github.com/openhab/openhab-core/pull/4648"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/openhab__openhab-core/4648"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-03T19:22:45.000Z"", ""patch"": null, ""test_patch"": null, ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
