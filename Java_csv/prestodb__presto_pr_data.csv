metadata
"{""instance_id"": ""prestodb__presto-24965"", ""pr_id"": 24965, ""issue_id"": 24964, ""repo"": ""prestodb/presto"", ""problem_statement"": ""Productionize native-sidecar feature\nWe are working to run native-side feature with worker as sidecar option. This can be enabled when [native-sidecar plugin](https://github.com/prestodb/presto/tree/master/presto-native-sidecar-plugin) is in plugins directory and following two configs need to be set:\n\n1. In coordinator config properties: `\""coordinator-sidecar-enabled\"": \""true\""`\n2. In worker config properties: `\""native-sidecar\"": \""true\""`\n\nWhile deploying it in Meta internal systems, we are finding improvement opportunities which will be listed here. To start with we are able to build and package the plugin. Now we saw 2 issues.\n\n1. coordinator always loads the plugin even if `\""coordinator-sidecar-enabled\"": \""false\""`, this makes coordinator crash\n```\n025-04-23T12:55:49.520-0700\tERROR\tmain\tcom.facebook.presto.server.PrestoServer\tSystem session property provider is already registered for property provider : native-worker\njava.lang.IllegalArgumentException: System session property provider is already registered for property provider : native-worker\n\tat com.facebook.presto.metadata.SessionPropertyManager.loadSessionPropertyProvider(SessionPropertyManager.java:147)\n\tat com.facebook.presto.metadata.SessionPropertyManager.loadSessionPropertyProviders(SessionPropertyManager.java:154)\n\tat com.facebook.presto.server.PrestoServer.run(PrestoServer.java:193)\n```\nSince this plugin will always be included in the build, we need to conditionally load it given native worker may not use this plugin at runtime, or we disable it with config for java workers at runtime. We won't be able to control the build scenario as build will unconditionally include the plugins.\n2. When the plugin runs, we failed to run any query when coordinator and worker are in https mode.\n```\ncom.facebook.presto.spi.PrestoException: Failed to get session properties from sidecar.\n\tat com.facebook.presto.sidecar.sessionpropertyproviders.NativeSystemSessionPropertyProvider.fetchSessionProperties(NativeSystemSessionPropertyProvider.java:105)\n\tat com.google.common.base.Suppliers$ExpiringMemoizingSupplier.get(Suppliers.java:261)\n\tat com.facebook.presto.sidecar.sessionpropertyproviders.NativeSystemSessionPropertyProvider.getSessionProperties(NativeSystemSessionPropertyProvider.java:89)\n\tat com.facebook.presto.metadata.SessionPropertyManager.lambda$getWorkerSessionProperties$0(SessionPropertyManager.java:216)\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:271)\n\tat java.base/java.util.concurrent.ConcurrentHashMap$ValueSpliterator.forEachRemaining(ConcurrentHashMap.java:3605)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\n\tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)\n\tat com.facebook.presto.metadata.SessionPropertyManager.getWorkerSessionProperties(SessionPropertyManager.java:217)\n\tat com.google.common.base.Suppliers$ExpiringMemoizingSupplier.get(Suppliers.java:261)\n\tat com.facebook.presto.metadata.SessionPropertyManager.getSystemSessionPropertyMetadata(SessionPropertyManager.java:196)\n\tat com.facebook.presto.metadata.SessionPropertyManager.validateSystemSessionProperty(SessionPropertyManager.java:303)\n\tat com.facebook.presto.Session.beginTransactionId(Session.java:378)\n\tat com.facebook.presto.execution.QueryStateMachine.beginWithTicker(QueryStateMachine.java:261)\n\tat com.facebook.presto.execution.QueryStateMachine.begin(QueryStateMachine.java:226)\n\tat com.facebook.presto.dispatcher.LocalDispatchQueryFactory.createDispatchQuery(LocalDispatchQueryFactory.java:147)\n\tat com.facebook.presto.dispatcher.DispatchManager.createQueryInternal(DispatchManager.java:322)\n\tat com.facebook.presto.dispatcher.DispatchManager.lambda$createQuery$0(DispatchManager.java:249)\n\tat com.facebook.airlift.concurrent.BoundedExecutor.drainQueue(BoundedExecutor.java:78)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: java.lang.IllegalArgumentException: host starts with a bracket\n\tat com.google.common.base.Preconditions.checkArgument(Preconditions.java:143)\n\tat com.facebook.airlift.http.client.HttpUriBuilder.host(HttpUriBuilder.java:85)\n\tat com.facebook.presto.sidecar.sessionpropertyproviders.NativeSystemSessionPropertyProvider.getSidecarLocation(NativeSystemSessionPropertyProvider.java:144)\n\tat com.facebook.presto.sidecar.sessionpropertyproviders.NativeSystemSessionPropertyProvider.fetchSessionProperties(NativeSystemSessionPropertyProvider.java:96)\n\t... 24 more\n```\n\nWe will add more improvements as we try it and once above two is fixed."", ""issue_word_count"": 612, ""test_files_count"": 5, ""non_test_files_count"": 10, ""pr_changed_files"": [""presto-main-base/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java"", ""presto-main-base/src/main/java/com/facebook/presto/metadata/SessionPropertyManager.java"", ""presto-main-base/src/main/java/com/facebook/presto/metadata/SessionPropertyProviderConfig.java"", ""presto-main-base/src/main/java/com/facebook/presto/metadata/StaticTypeManagerStore.java"", ""presto-main-base/src/main/java/com/facebook/presto/metadata/StaticTypeManagerStoreConfig.java"", ""presto-main-base/src/test/java/com/facebook/presto/metadata/TestSessionPropertyProviderConfig.java"", ""presto-main-base/src/test/java/com/facebook/presto/metadata/TestStaticTypeManagerStoreConfig.java"", ""presto-main/src/main/java/com/facebook/presto/server/PrestoServer.java"", ""presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java"", ""presto-native-sidecar-plugin/pom.xml"", ""presto-native-sidecar-plugin/src/main/java/com/facebook/presto/sidecar/sessionpropertyproviders/NativeSystemSessionPropertyProvider.java"", ""presto-native-sidecar-plugin/src/test/java/com/facebook/presto/sidecar/TestNativeSidecarPlugin.java"", ""presto-native-sidecar-plugin/src/test/java/com/facebook/presto/sidecar/TestNativeSidecarPluginWithoutLoadingFunctionalities.java"", ""presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkModule.java"", ""presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java""], ""pr_changed_test_files"": [""presto-main-base/src/test/java/com/facebook/presto/metadata/TestSessionPropertyProviderConfig.java"", ""presto-main-base/src/test/java/com/facebook/presto/metadata/TestStaticTypeManagerStoreConfig.java"", ""presto-native-sidecar-plugin/src/test/java/com/facebook/presto/sidecar/TestNativeSidecarPlugin.java"", ""presto-native-sidecar-plugin/src/test/java/com/facebook/presto/sidecar/TestNativeSidecarPluginWithoutLoadingFunctionalities.java"", ""presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java""], ""base_commit"": ""dbe3d365c07bc20b5006b420f124f4317eb7fe2d"", ""head_commit"": ""1d1fe4aaa4248828ac340d2488c3d67f40afe840"", ""repo_url"": ""https://github.com/prestodb/presto/pull/24965"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/prestodb__presto/24965"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-29T16:53:17.000Z"", ""patch"": ""diff --git a/presto-main-base/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java b/presto-main-base/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java\nindex 4ea19e25698cd..9f469711cd8d4 100644\n--- a/presto-main-base/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java\n+++ b/presto-main-base/src/main/java/com/facebook/presto/metadata/FunctionAndTypeManager.java\n@@ -418,13 +418,6 @@ public void loadTypeManager(String typeManagerName)\n         servingTypeManagerParametricTypesSupplier.set(this::getServingTypeManagerParametricTypes);\n     }\n \n-    public void loadTypeManagers()\n-    {\n-        for (String typeManagerName : typeManagerFactories.keySet()) {\n-            loadTypeManager(typeManagerName);\n-        }\n-    }\n-\n     public void addTypeManagerFactory(TypeManagerFactory factory)\n     {\n         if (typeManagerFactories.putIfAbsent(factory.getName(), factory) != null) {\n\ndiff --git a/presto-main-base/src/main/java/com/facebook/presto/metadata/SessionPropertyManager.java b/presto-main-base/src/main/java/com/facebook/presto/metadata/SessionPropertyManager.java\nindex 3e9e23e1a6e9a..a37187441158c 100644\n--- a/presto-main-base/src/main/java/com/facebook/presto/metadata/SessionPropertyManager.java\n+++ b/presto-main-base/src/main/java/com/facebook/presto/metadata/SessionPropertyManager.java\n@@ -15,6 +15,7 @@\n \n import com.facebook.airlift.json.JsonCodec;\n import com.facebook.airlift.json.JsonCodecFactory;\n+import com.facebook.airlift.log.Logger;\n import com.facebook.presto.Session;\n import com.facebook.presto.SystemSessionProperties;\n import com.facebook.presto.common.block.BlockBuilder;\n@@ -52,6 +53,8 @@\n import javax.annotation.Nullable;\n import javax.inject.Inject;\n \n+import java.io.File;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n@@ -59,14 +62,18 @@\n import java.util.TreeMap;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Supplier;\n \n import static com.facebook.presto.common.type.TypeUtils.writeNativeValue;\n import static com.facebook.presto.spi.StandardErrorCode.INVALID_SESSION_PROPERTY;\n import static com.facebook.presto.sql.planner.ExpressionInterpreter.evaluateConstantExpression;\n+import static com.facebook.presto.util.PropertiesUtil.loadProperties;\n import static com.google.common.base.MoreObjects.firstNonNull;\n import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.io.Files.getNameWithoutExtension;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n import static java.util.concurrent.TimeUnit.HOURS;\n@@ -74,6 +81,9 @@\n public final class SessionPropertyManager\n {\n     private static final JsonCodecFactory JSON_CODEC_FACTORY = new JsonCodecFactory();\n+    private static final Logger log = Logger.get(SessionPropertyManager.class);\n+    private static final String SESSION_PROPERTY_PROVIDER_NAME = \""session-property-provider.name\"";\n+\n     private final ConcurrentMap<String, PropertyMetadata<?>> systemSessionProperties = new ConcurrentHashMap<>();\n     private final ConcurrentMap<ConnectorId, Map<String, PropertyMetadata<?>>> connectorSessionProperties = new ConcurrentHashMap<>();\n     private final Map<String, WorkerSessionPropertyProvider> workerSessionPropertyProviders;\n@@ -81,28 +91,33 @@ public final class SessionPropertyManager\n     private final Supplier<Map<String, PropertyMetadata<?>>> memoizedWorkerSessionProperties;\n     private final Optional<NodeManager> nodeManager;\n     private final Optional<TypeManager> functionAndTypeManager;\n+    private final File configDir;\n+    private final AtomicBoolean sessionPropertyProvidersLoading = new AtomicBoolean();\n \n     @Inject\n     public SessionPropertyManager(\n             SystemSessionProperties systemSessionProperties,\n             Map<String, WorkerSessionPropertyProvider> workerSessionPropertyProviders,\n             FunctionAndTypeManager functionAndTypeManager,\n-            NodeManager nodeManager)\n+            NodeManager nodeManager,\n+            SessionPropertyProviderConfig config)\n     {\n-        this(systemSessionProperties.getSessionProperties(), workerSessionPropertyProviders, Optional.ofNullable(functionAndTypeManager), Optional.ofNullable(nodeManager));\n+        this(systemSessionProperties.getSessionProperties(), workerSessionPropertyProviders, Optional.ofNullable(functionAndTypeManager), Optional.ofNullable(nodeManager), config);\n     }\n \n     public SessionPropertyManager(\n             List<PropertyMetadata<?>> sessionProperties,\n             Map<String, WorkerSessionPropertyProvider> workerSessionPropertyProviders,\n             Optional<TypeManager> functionAndTypeManager,\n-            Optional<NodeManager> nodeManager)\n+            Optional<NodeManager> nodeManager,\n+            SessionPropertyProviderConfig config)\n     {\n         this.nodeManager = requireNonNull(nodeManager, \""nodeManager is null\"");\n         this.functionAndTypeManager = requireNonNull(functionAndTypeManager, \""functionAndTypeManager is null\"");\n         this.memoizedWorkerSessionProperties = Suppliers.memoizeWithExpiration(this::getWorkerSessionProperties,\n                 1, HOURS);\n         this.workerSessionPropertyProviders = new ConcurrentHashMap<>(workerSessionPropertyProviders);\n+        this.configDir = requireNonNull(config, \""config is null\"").getSessionPropertyProvidersConfigurationDir();\n         addSystemSessionProperties(sessionProperties);\n     }\n \n@@ -135,24 +150,42 @@ public static SessionPropertyManager createTestingSessionPropertyManager(\n                                 javaFeaturesConfig,\n                                 nodeSpillConfig)),\n                 Optional.empty(),\n-                Optional.empty());\n+                Optional.empty(),\n+                new SessionPropertyProviderConfig());\n     }\n \n-    public void loadSessionPropertyProvider(String sessionPropertyProviderName, Optional<TypeManager> typeManager, Optional<NodeManager> nodeManager)\n+    public void loadSessionPropertyProviders()\n+            throws Exception\n     {\n+        if (!sessionPropertyProvidersLoading.compareAndSet(false, true)) {\n+            return;\n+        }\n+\n+        for (File file : listFiles(configDir)) {\n+            if (file.isFile() && file.getName().endsWith(\"".properties\"")) {\n+                String sessionPropertyProviderName = getNameWithoutExtension(file.getName());\n+                Map<String, String> properties = loadProperties(file);\n+                checkState(!isNullOrEmpty(properties.get(SESSION_PROPERTY_PROVIDER_NAME)),\n+                        \""Session property manager configuration %s does not contain %s\"",\n+                        file.getAbsoluteFile(),\n+                        SESSION_PROPERTY_PROVIDER_NAME);\n+                properties = new HashMap<>(properties);\n+                properties.remove(SESSION_PROPERTY_PROVIDER_NAME);\n+                loadSessionPropertyProvider(sessionPropertyProviderName, properties, functionAndTypeManager, nodeManager);\n+            }\n+        }\n+    }\n+\n+    public void loadSessionPropertyProvider(String sessionPropertyProviderName, Map<String, String> properties, Optional<TypeManager> typeManager, Optional<NodeManager> nodeManager)\n+    {\n+        log.info(\""-- Loading %s session property provider --\"", sessionPropertyProviderName);\n         WorkerSessionPropertyProviderFactory factory = workerSessionPropertyProviderFactories.get(sessionPropertyProviderName);\n         checkState(factory != null, \""No factory for session property provider : \"" + sessionPropertyProviderName);\n         WorkerSessionPropertyProvider sessionPropertyProvider = factory.create(new SessionPropertyContext(typeManager, nodeManager));\n         if (workerSessionPropertyProviders.putIfAbsent(sessionPropertyProviderName, sessionPropertyProvider) != null) {\n             throw new IllegalArgumentException(\""System session property provider is already registered for property provider : \"" + sessionPropertyProviderName);\n         }\n-    }\n-\n-    public void loadSessionPropertyProviders()\n-    {\n-        for (String sessionPropertyProviderName : workerSessionPropertyProviderFactories.keySet()) {\n-            loadSessionPropertyProvider(sessionPropertyProviderName, functionAndTypeManager, nodeManager);\n-        }\n+        log.info(\""-- Added session property provider [%s] --\"", sessionPropertyProviderName);\n     }\n \n     public void addSessionPropertyProviderFactory(WorkerSessionPropertyProviderFactory factory)\n@@ -224,6 +257,17 @@ private Map<String, PropertyMetadata<?>> getWorkerSessionProperties()\n         return workerSessionProperties;\n     }\n \n+    private static List<File> listFiles(File dir)\n+    {\n+        if (dir != null && dir.isDirectory()) {\n+            File[] files = dir.listFiles();\n+            if (files != null) {\n+                return ImmutableList.copyOf(files);\n+            }\n+        }\n+        return ImmutableList.of();\n+    }\n+\n     public List<SessionPropertyValue> getAllSessionProperties(Session session, Map<String, ConnectorId> catalogs)\n     {\n         requireNonNull(session, \""session is null\"");\n\ndiff --git a/presto-main-base/src/main/java/com/facebook/presto/metadata/SessionPropertyProviderConfig.java b/presto-main-base/src/main/java/com/facebook/presto/metadata/SessionPropertyProviderConfig.java\nnew file mode 100644\nindex 0000000000000..2464ab7d3becb\n--- /dev/null\n+++ b/presto-main-base/src/main/java/com/facebook/presto/metadata/SessionPropertyProviderConfig.java\n@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \""License\"");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.airlift.configuration.Config;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.File;\n+\n+public class SessionPropertyProviderConfig\n+{\n+    private File sessionPropertyProvidersConfigurationDir = new File(\""etc/session-property-providers/\"");\n+\n+    @NotNull\n+    public File getSessionPropertyProvidersConfigurationDir()\n+    {\n+        return sessionPropertyProvidersConfigurationDir;\n+    }\n+\n+    @Config(\""session-property-provider.config-dir\"")\n+    public SessionPropertyProviderConfig setSessionPropertyProvidersConfigurationDir(File dir)\n+    {\n+        this.sessionPropertyProvidersConfigurationDir = dir;\n+        return this;\n+    }\n+}\n\ndiff --git a/presto-main-base/src/main/java/com/facebook/presto/metadata/StaticTypeManagerStore.java b/presto-main-base/src/main/java/com/facebook/presto/metadata/StaticTypeManagerStore.java\nnew file mode 100644\nindex 0000000000000..9e62ec064550e\n--- /dev/null\n+++ b/presto-main-base/src/main/java/com/facebook/presto/metadata/StaticTypeManagerStore.java\n@@ -0,0 +1,93 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \""License\"");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.google.common.collect.ImmutableList;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.facebook.presto.util.PropertiesUtil.loadProperties;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.google.common.io.Files.getNameWithoutExtension;\n+\n+public class StaticTypeManagerStore\n+{\n+    private static final Logger log = Logger.get(StaticTypeManagerStore.class);\n+    private static final String TYPE_MANAGER_NAME = \""type-manager.name\"";\n+    private final FunctionAndTypeManager functionAndTypeManager;\n+    private final File configDir;\n+    private final AtomicBoolean typeManagersLoading = new AtomicBoolean();\n+\n+    @Inject\n+    public StaticTypeManagerStore(FunctionAndTypeManager functionAndTypeManager, StaticTypeManagerStoreConfig config)\n+    {\n+        this.functionAndTypeManager = functionAndTypeManager;\n+        this.configDir = config.getTypeManagerConfigurationDir();\n+    }\n+\n+    public void loadTypeManagers()\n+            throws Exception\n+    {\n+        if (!typeManagersLoading.compareAndSet(false, true)) {\n+            return;\n+        }\n+\n+        for (File file : listFiles(configDir)) {\n+            if (file.isFile() && file.getName().endsWith(\"".properties\"")) {\n+                String catalogName = getNameWithoutExtension(file.getName());\n+                Map<String, String> properties = loadProperties(file);\n+                checkState(!isNullOrEmpty(properties.get(TYPE_MANAGER_NAME)),\n+                        \""Type manager configuration %s does not contain %s\"",\n+                        file.getAbsoluteFile(),\n+                        TYPE_MANAGER_NAME);\n+                loadTypeManager(catalogName, properties);\n+            }\n+        }\n+    }\n+\n+    public void loadTypeManagers(Map<String, Map<String, String>> catalogProperties)\n+    {\n+        catalogProperties.entrySet().stream()\n+                .forEach(entry -> loadTypeManager(entry.getKey(), entry.getValue()));\n+    }\n+\n+    private void loadTypeManager(String catalogName, Map<String, String> properties)\n+    {\n+        log.info(\""-- Loading %s type manager --\"", catalogName);\n+        properties = new HashMap<>(properties);\n+        String typeManagerName = properties.remove(TYPE_MANAGER_NAME);\n+        checkState(!isNullOrEmpty(typeManagerName), \""%s property must be present\"", TYPE_MANAGER_NAME);\n+        functionAndTypeManager.loadTypeManager(typeManagerName);\n+        log.info(\""-- Added type manager [%s] --\"", catalogName);\n+    }\n+\n+    private static List<File> listFiles(File dir)\n+    {\n+        if (dir != null && dir.isDirectory()) {\n+            File[] files = dir.listFiles();\n+            if (files != null) {\n+                return ImmutableList.copyOf(files);\n+            }\n+        }\n+        return ImmutableList.of();\n+    }\n+}\n\ndiff --git a/presto-main-base/src/main/java/com/facebook/presto/metadata/StaticTypeManagerStoreConfig.java b/presto-main-base/src/main/java/com/facebook/presto/metadata/StaticTypeManagerStoreConfig.java\nnew file mode 100644\nindex 0000000000000..de29a50089b0b\n--- /dev/null\n+++ b/presto-main-base/src/main/java/com/facebook/presto/metadata/StaticTypeManagerStoreConfig.java\n@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \""License\"");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.airlift.configuration.Config;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.File;\n+\n+public class StaticTypeManagerStoreConfig\n+{\n+    private File typeManagerConfigurationDir = new File(\""etc/type-managers/\"");\n+\n+    @NotNull\n+    public File getTypeManagerConfigurationDir()\n+    {\n+        return typeManagerConfigurationDir;\n+    }\n+\n+    @Config(\""type-manager.config-dir\"")\n+    public StaticTypeManagerStoreConfig setTypeManagerConfigurationDir(File dir)\n+    {\n+        this.typeManagerConfigurationDir = dir;\n+        return this;\n+    }\n+}\n\ndiff --git a/presto-main/src/main/java/com/facebook/presto/server/PrestoServer.java b/presto-main/src/main/java/com/facebook/presto/server/PrestoServer.java\nindex fac8bc79e06b5..552b6da5d812e 100644\n--- a/presto-main/src/main/java/com/facebook/presto/server/PrestoServer.java\n+++ b/presto-main/src/main/java/com/facebook/presto/server/PrestoServer.java\n@@ -43,11 +43,11 @@\n import com.facebook.presto.metadata.Catalog;\n import com.facebook.presto.metadata.CatalogManager;\n import com.facebook.presto.metadata.DiscoveryNodeManager;\n-import com.facebook.presto.metadata.FunctionAndTypeManager;\n import com.facebook.presto.metadata.InternalNodeManager;\n import com.facebook.presto.metadata.SessionPropertyManager;\n import com.facebook.presto.metadata.StaticCatalogStore;\n import com.facebook.presto.metadata.StaticFunctionNamespaceStore;\n+import com.facebook.presto.metadata.StaticTypeManagerStore;\n import com.facebook.presto.nodeManager.PluginNodeManager;\n import com.facebook.presto.security.AccessControlManager;\n import com.facebook.presto.security.AccessControlModule;\n@@ -175,6 +175,7 @@ public void run()\n                     injector.getInstance(DriftServer.class));\n \n             injector.getInstance(StaticFunctionNamespaceStore.class).loadFunctionNamespaceManagers();\n+            injector.getInstance(StaticTypeManagerStore.class).loadTypeManagers();\n             injector.getInstance(SessionPropertyDefaults.class).loadConfigurationManager();\n             injector.getInstance(ResourceGroupManager.class).loadConfigurationManager();\n             if (!serverConfig.isResourceManager()) {\n@@ -191,7 +192,6 @@ public void run()\n             injector.getInstance(NodeStatusNotificationManager.class).loadNodeStatusNotificationProvider();\n             injector.getInstance(GracefulShutdownHandler.class).loadNodeStatusNotification();\n             injector.getInstance(SessionPropertyManager.class).loadSessionPropertyProviders();\n-            injector.getInstance(FunctionAndTypeManager.class).loadTypeManagers();\n             PlanCheckerProviderManager planCheckerProviderManager = injector.getInstance(PlanCheckerProviderManager.class);\n             InternalNodeManager nodeManager = injector.getInstance(DiscoveryNodeManager.class);\n             NodeInfo nodeInfo = injector.getInstance(NodeInfo.class);\n\ndiff --git a/presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java b/presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java\nindex 7c9f8742ccea7..130d4fcdd89cc 100644\n--- a/presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java\n+++ b/presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java\n@@ -100,11 +100,14 @@\n import com.facebook.presto.metadata.MetadataUpdates;\n import com.facebook.presto.metadata.SchemaPropertyManager;\n import com.facebook.presto.metadata.SessionPropertyManager;\n+import com.facebook.presto.metadata.SessionPropertyProviderConfig;\n import com.facebook.presto.metadata.Split;\n import com.facebook.presto.metadata.StaticCatalogStore;\n import com.facebook.presto.metadata.StaticCatalogStoreConfig;\n import com.facebook.presto.metadata.StaticFunctionNamespaceStore;\n import com.facebook.presto.metadata.StaticFunctionNamespaceStoreConfig;\n+import com.facebook.presto.metadata.StaticTypeManagerStore;\n+import com.facebook.presto.metadata.StaticTypeManagerStoreConfig;\n import com.facebook.presto.metadata.TablePropertyManager;\n import com.facebook.presto.nodeManager.PluginNodeManager;\n import com.facebook.presto.operator.ExchangeClientConfig;\n@@ -644,6 +647,9 @@ public ListeningExecutorService createResourceManagerExecutor(ResourceManagerCon\n         configBinder(binder).bindConfig(StaticCatalogStoreConfig.class);\n         binder.bind(StaticFunctionNamespaceStore.class).in(Scopes.SINGLETON);\n         configBinder(binder).bindConfig(StaticFunctionNamespaceStoreConfig.class);\n+        binder.bind(StaticTypeManagerStore.class).in(Scopes.SINGLETON);\n+        configBinder(binder).bindConfig(StaticTypeManagerStoreConfig.class);\n+        configBinder(binder).bindConfig(SessionPropertyProviderConfig.class);\n         binder.bind(FunctionAndTypeManager.class).in(Scopes.SINGLETON);\n         binder.bind(MetadataManager.class).in(Scopes.SINGLETON);\n \n\ndiff --git a/presto-native-sidecar-plugin/pom.xml b/presto-native-sidecar-plugin/pom.xml\nindex f6b20a1b32d4b..4e11d78ada815 100644\n--- a/presto-native-sidecar-plugin/pom.xml\n+++ b/presto-native-sidecar-plugin/pom.xml\n@@ -267,6 +267,18 @@\n                     </ignoredUnusedDeclaredDependencies>\n                 </configuration>\n             </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <forkCount>1</forkCount>\n+                    <reuseForks>false</reuseForks>\n+                    <systemPropertyVariables>\n+                        <PRESTO_SERVER>/root/project/build/debug/presto_cpp/main/presto_server</PRESTO_SERVER>\n+                        <DATA_DIR>/tmp/velox</DATA_DIR>\n+                    </systemPropertyVariables>\n+                </configuration>\n+            </plugin>\n         </plugins>\n     </build>\n </project>\n\ndiff --git a/presto-native-sidecar-plugin/src/main/java/com/facebook/presto/sidecar/sessionpropertyproviders/NativeSystemSessionPropertyProvider.java b/presto-native-sidecar-plugin/src/main/java/com/facebook/presto/sidecar/sessionpropertyproviders/NativeSystemSessionPropertyProvider.java\nindex a23d28febaf05..3f64aa5247a02 100644\n--- a/presto-native-sidecar-plugin/src/main/java/com/facebook/presto/sidecar/sessionpropertyproviders/NativeSystemSessionPropertyProvider.java\n+++ b/presto-native-sidecar-plugin/src/main/java/com/facebook/presto/sidecar/sessionpropertyproviders/NativeSystemSessionPropertyProvider.java\n@@ -77,7 +77,7 @@ public NativeSystemSessionPropertyProvider(\n         this.nativeSessionPropertiesJsonCodec = requireNonNull(nativeSessionPropertiesJsonCodec, \""nativeSessionPropertiesJsonCodec is null\"");\n         this.nodeManager = requireNonNull(nodeManager, \""nodeManager is null\"");\n         this.typeManager = requireNonNull(typeManager, \""typeManager is null\"");\n-        this.httpClient = requireNonNull(httpClient, \""typeManager is null\"");\n+        this.httpClient = requireNonNull(httpClient, \""httpClient is null\"");\n         requireNonNull(config, \""config is null\"");\n         this.memoizedSessionPropertiesSupplier =\n                 Suppliers.memoizeWithExpiration(this::fetchSessionProperties, config.getSessionPropertiesCacheExpiration().toMillis(), MILLISECONDS);\n\ndiff --git a/presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkModule.java b/presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkModule.java\nindex 6c666961fcd51..f41f6365e1d37 100644\n--- a/presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkModule.java\n+++ b/presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkModule.java\n@@ -76,10 +76,13 @@\n import com.facebook.presto.metadata.MetadataManager;\n import com.facebook.presto.metadata.SchemaPropertyManager;\n import com.facebook.presto.metadata.SessionPropertyManager;\n+import com.facebook.presto.metadata.SessionPropertyProviderConfig;\n import com.facebook.presto.metadata.StaticCatalogStore;\n import com.facebook.presto.metadata.StaticCatalogStoreConfig;\n import com.facebook.presto.metadata.StaticFunctionNamespaceStore;\n import com.facebook.presto.metadata.StaticFunctionNamespaceStoreConfig;\n+import com.facebook.presto.metadata.StaticTypeManagerStore;\n+import com.facebook.presto.metadata.StaticTypeManagerStoreConfig;\n import com.facebook.presto.metadata.TablePropertyManager;\n import com.facebook.presto.nodeManager.PluginNodeManager;\n import com.facebook.presto.operator.FileFragmentResultCacheConfig;\n@@ -276,6 +279,8 @@ protected void setup(Binder binder)\n         configBinder(binder).bindConfig(CompilerConfig.class);\n         configBinder(binder).bindConfig(SqlEnvironmentConfig.class);\n         configBinder(binder).bindConfig(StaticFunctionNamespaceStoreConfig.class);\n+        configBinder(binder).bindConfig(StaticTypeManagerStoreConfig.class);\n+        configBinder(binder).bindConfig(SessionPropertyProviderConfig.class);\n         configBinder(binder).bindConfig(PrestoSparkConfig.class);\n         configBinder(binder).bindConfig(TracingConfig.class);\n         configBinder(binder).bindConfig(NativeExecutionVeloxConfig.class);\n@@ -370,6 +375,7 @@ protected void setup(Binder binder)\n         binder.bind(MetadataManager.class).in(Scopes.SINGLETON);\n         binder.bind(Metadata.class).to(MetadataManager.class).in(Scopes.SINGLETON);\n         binder.bind(StaticFunctionNamespaceStore.class).in(Scopes.SINGLETON);\n+        binder.bind(StaticTypeManagerStore.class).in(Scopes.SINGLETON);\n \n         // type\n         newSetBinder(binder, Type.class);\n"", ""test_patch"": ""diff --git a/presto-main-base/src/test/java/com/facebook/presto/metadata/TestSessionPropertyProviderConfig.java b/presto-main-base/src/test/java/com/facebook/presto/metadata/TestSessionPropertyProviderConfig.java\nnew file mode 100644\nindex 0000000000000..cfa205bb637e3\n--- /dev/null\n+++ b/presto-main-base/src/test/java/com/facebook/presto/metadata/TestSessionPropertyProviderConfig.java\n@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \""License\"");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Map;\n+\n+import static com.facebook.airlift.configuration.testing.ConfigAssertions.assertFullMapping;\n+import static com.facebook.airlift.configuration.testing.ConfigAssertions.assertRecordedDefaults;\n+import static com.facebook.airlift.configuration.testing.ConfigAssertions.recordDefaults;\n+\n+public class TestSessionPropertyProviderConfig\n+{\n+    @Test\n+    public void testDefaults()\n+    {\n+        assertRecordedDefaults(recordDefaults(SessionPropertyProviderConfig.class)\n+                .setSessionPropertyProvidersConfigurationDir(new File(\""etc/session-property-providers\"")));\n+    }\n+\n+    @Test\n+    public void testExplicitPropertyMappings()\n+    {\n+        Map<String, String> properties = new ImmutableMap.Builder<String, String>()\n+                .put(\""session-property-provider.config-dir\"", \""/foo\"")\n+                .build();\n+\n+        SessionPropertyProviderConfig expected = new SessionPropertyProviderConfig()\n+                .setSessionPropertyProvidersConfigurationDir(new File(\""/foo\""));\n+\n+        assertFullMapping(properties, expected);\n+    }\n+}\n\ndiff --git a/presto-main-base/src/test/java/com/facebook/presto/metadata/TestStaticTypeManagerStoreConfig.java b/presto-main-base/src/test/java/com/facebook/presto/metadata/TestStaticTypeManagerStoreConfig.java\nnew file mode 100644\nindex 0000000000000..424078a6b4b29\n--- /dev/null\n+++ b/presto-main-base/src/test/java/com/facebook/presto/metadata/TestStaticTypeManagerStoreConfig.java\n@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \""License\"");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Map;\n+\n+import static com.facebook.airlift.configuration.testing.ConfigAssertions.assertFullMapping;\n+import static com.facebook.airlift.configuration.testing.ConfigAssertions.assertRecordedDefaults;\n+import static com.facebook.airlift.configuration.testing.ConfigAssertions.recordDefaults;\n+\n+public class TestStaticTypeManagerStoreConfig\n+{\n+    @Test\n+    public void testDefaults()\n+    {\n+        assertRecordedDefaults(recordDefaults(StaticTypeManagerStoreConfig.class)\n+                .setTypeManagerConfigurationDir(new File(\""etc/type-managers\"")));\n+    }\n+\n+    @Test\n+    public void testExplicitPropertyMappings()\n+    {\n+        Map<String, String> properties = new ImmutableMap.Builder<String, String>()\n+                .put(\""type-manager.config-dir\"", \""/foo\"")\n+                .build();\n+\n+        StaticTypeManagerStoreConfig expected = new StaticTypeManagerStoreConfig()\n+                .setTypeManagerConfigurationDir(new File(\""/foo\""));\n+\n+        assertFullMapping(properties, expected);\n+    }\n+}\n\ndiff --git a/presto-native-sidecar-plugin/src/test/java/com/facebook/presto/sidecar/TestNativeSidecarPlugin.java b/presto-native-sidecar-plugin/src/test/java/com/facebook/presto/sidecar/TestNativeSidecarPlugin.java\nindex 1a22c05bdff4a..7bab4909d10a7 100644\n--- a/presto-native-sidecar-plugin/src/test/java/com/facebook/presto/sidecar/TestNativeSidecarPlugin.java\n+++ b/presto-native-sidecar-plugin/src/test/java/com/facebook/presto/sidecar/TestNativeSidecarPlugin.java\n@@ -40,7 +40,6 @@\n import static org.testng.Assert.assertFalse;\n import static org.testng.Assert.fail;\n \n-@Test(singleThreaded = true)\n public class TestNativeSidecarPlugin\n         extends AbstractTestQueryFramework\n {\n\ndiff --git a/presto-native-sidecar-plugin/src/test/java/com/facebook/presto/sidecar/TestNativeSidecarPluginWithoutLoadingFunctionalities.java b/presto-native-sidecar-plugin/src/test/java/com/facebook/presto/sidecar/TestNativeSidecarPluginWithoutLoadingFunctionalities.java\nnew file mode 100644\nindex 0000000000000..607d81c81c312\n--- /dev/null\n+++ b/presto-native-sidecar-plugin/src/test/java/com/facebook/presto/sidecar/TestNativeSidecarPluginWithoutLoadingFunctionalities.java\n@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \""License\"");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sidecar;\n+\n+import com.facebook.presto.nativeworker.PrestoNativeQueryRunnerUtils;\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import org.testng.annotations.Test;\n+\n+import static com.facebook.presto.nativeworker.NativeQueryRunnerUtils.createLineitem;\n+import static com.facebook.presto.nativeworker.NativeQueryRunnerUtils.createNation;\n+import static com.facebook.presto.nativeworker.NativeQueryRunnerUtils.createOrders;\n+\n+public class TestNativeSidecarPluginWithoutLoadingFunctionalities\n+        extends AbstractTestQueryFramework\n+{\n+    @Override\n+    protected void createTables()\n+    {\n+        QueryRunner queryRunner = (QueryRunner) getExpectedQueryRunner();\n+        createLineitem(queryRunner);\n+        createNation(queryRunner);\n+        createOrders(queryRunner);\n+    }\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        DistributedQueryRunner queryRunner = (DistributedQueryRunner) PrestoNativeQueryRunnerUtils.createQueryRunner(true, false, false, false);\n+        // Installing the native sidecar plugin on a native cluster does not load the plugin functionalities because\n+        // we aren't loading the individual functionalities.\n+        queryRunner.installCoordinatorPlugin(new NativeSidecarPlugin());\n+        return queryRunner;\n+    }\n+\n+    @Override\n+    protected QueryRunner createExpectedQueryRunner()\n+            throws Exception\n+    {\n+        DistributedQueryRunner queryRunner = (DistributedQueryRunner) PrestoNativeQueryRunnerUtils.createJavaQueryRunner();\n+        // Installing the native sidecar plugin on a Java cluster, does not load the plugin functionalities because\n+        // we aren't loading the individual functionalities.\n+        queryRunner.installCoordinatorPlugin(new NativeSidecarPlugin());\n+        return queryRunner;\n+    }\n+\n+    @Test\n+    public void testBasicQueries()\n+    {\n+        assertQuery(\""SELECT ARRAY['abc']\"");\n+        assertQuery(\""SELECT ARRAY[1, 2, 3]\"");\n+        assertQuery(\""SELECT substr(comment, 1, 10), length(comment), trim(comment) FROM orders\"");\n+        assertQuery(\""SELECT substr(comment, 1, 10), length(comment), rtrim(comment) FROM orders\"");\n+        assertQuery(\""select lower(comment) from nation\"");\n+        assertQuery(\""SELECT mod(orderkey, linenumber) FROM lineitem\"");\n+        assertQuery(\""select corr(nationkey, nationkey) from nation\"");\n+        assertQuery(\""select count(comment) from orders\"");\n+        assertQuery(\""select count(*) from nation\"");\n+        assertQuery(\""select count(abs(orderkey) between 1 and 60000) from orders group by orderkey\"");\n+        assertQuery(\""SELECT count(orderkey) FROM orders WHERE orderkey < 0 GROUP BY GROUPING SETS (())\"");\n+        // This query will work when sidecar is enabled, should fail without it.\n+        assertQueryFails(\n+                \""select array_sort(array[row('apples', 23), row('bananas', 12), row('grapes', 44)], x -> x[2])\"",\n+                \""line 1:84: Expected a lambda that takes 2 argument\\\\(s\\\\) but got 1\"");\n+    }\n+}\n\ndiff --git a/presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java b/presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java\nindex 6fe6d1ec81717..6b49e14b1d34b 100644\n--- a/presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java\n+++ b/presto-tests/src/main/java/com/facebook/presto/tests/DistributedQueryRunner.java\n@@ -989,6 +989,7 @@ public void loadSessionPropertyProvider(String sessionPropertyProviderName)\n         for (TestingPrestoServer server : servers) {\n             server.getMetadata().getSessionPropertyManager().loadSessionPropertyProvider(\n                     sessionPropertyProviderName,\n+                    ImmutableMap.of(),\n                     Optional.ofNullable(server.getMetadata().getFunctionAndTypeManager()),\n                     Optional.ofNullable(server.getPluginNodeManager()));\n         }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""prestodb__presto-24141"", ""pr_id"": 24141, ""issue_id"": 24140, ""repo"": ""prestodb/presto"", ""problem_statement"": ""The behavior of executing `USE` statement doesn't seem very reasonable when specified schema does not exist \nCurrently, when we execute statements like `USE catalog.non_exist_schema` to set the default schema to a non-existent one, we will succeed without any abnormalities. However, after that when we execute statments as follows:\r\n\r\n```\r\nshow tables;\r\n\r\ncreate table my_table(a int, b varchar);\r\n\r\nselect * from test_table;\r\n\r\n......\r\n```\r\n\r\nWe will get exceptions like `Schema 'non_exist_schema' does not exist`. It seems a little weird. We should fail directly when executing `USE catalog.non_exist_schema`. As a reference, when we execute `USE non_exist_catalog.whatever_schema`, we will fail with an exception `Catalog does not exist: non_exist_catalog` directly.\r\n\r\n## Expected Behavior\r\n\r\nFail directly when executing `USE catalog.non_exist_schema`.\r\n\r\n## Current Behavior\r\n\r\nThe statement will succeed without any abnormalities, but some kinds of subsequent statements will fail with `Schema 'non_exist_schema' does not exist`.\r\n\r\n"", ""issue_word_count"": 140, ""test_files_count"": 5, ""non_test_files_count"": 2, ""pr_changed_files"": [""presto-main/src/main/java/com/facebook/presto/execution/UseTask.java"", ""presto-main/src/main/java/com/facebook/presto/metadata/MetadataUtil.java"", ""presto-spark-base/src/test/java/com/facebook/presto/spark/TestPrestoQueries.java"", ""presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java"", ""presto-tests/src/test/java/com/facebook/presto/tests/TestLocalQueries.java"", ""presto-tests/src/test/java/com/facebook/presto/tests/TestQueryPlanDeterminism.java"", ""presto-tests/src/test/java/com/facebook/presto/tests/TestVerboseOptimizerInfo.java""], ""pr_changed_test_files"": [""presto-spark-base/src/test/java/com/facebook/presto/spark/TestPrestoQueries.java"", ""presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java"", ""presto-tests/src/test/java/com/facebook/presto/tests/TestLocalQueries.java"", ""presto-tests/src/test/java/com/facebook/presto/tests/TestQueryPlanDeterminism.java"", ""presto-tests/src/test/java/com/facebook/presto/tests/TestVerboseOptimizerInfo.java""], ""base_commit"": ""4912ca77847f3f95e2b7b0ce3a093737dc020ce3"", ""head_commit"": ""0d24d36e08aa169f52f405b86ce74e908ed8fc00"", ""repo_url"": ""https://github.com/prestodb/presto/pull/24141"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/prestodb__presto/24141"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-27T02:22:02.000Z"", ""patch"": ""diff --git a/presto-main/src/main/java/com/facebook/presto/execution/UseTask.java b/presto-main/src/main/java/com/facebook/presto/execution/UseTask.java\nindex f677165a97f64..03a582bcec592 100644\n--- a/presto-main/src/main/java/com/facebook/presto/execution/UseTask.java\n+++ b/presto-main/src/main/java/com/facebook/presto/execution/UseTask.java\n@@ -14,10 +14,12 @@\n package com.facebook.presto.execution;\n \n import com.facebook.presto.Session;\n+import com.facebook.presto.common.CatalogSchemaName;\n import com.facebook.presto.metadata.Metadata;\n import com.facebook.presto.spi.security.AccessControl;\n import com.facebook.presto.sql.analyzer.SemanticException;\n import com.facebook.presto.sql.tree.Expression;\n+import com.facebook.presto.sql.tree.Identifier;\n import com.facebook.presto.sql.tree.Use;\n import com.facebook.presto.transaction.TransactionManager;\n import com.google.common.util.concurrent.ListenableFuture;\n@@ -26,7 +28,9 @@\n \n import static com.facebook.presto.metadata.MetadataUtil.getConnectorIdOrThrow;\n import static com.facebook.presto.sql.analyzer.SemanticErrorCode.CATALOG_NOT_SPECIFIED;\n+import static com.facebook.presto.sql.analyzer.SemanticErrorCode.MISSING_SCHEMA;\n import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static java.lang.String.format;\n \n public class UseTask\n         implements SessionTransactionControlTask<Use>\n@@ -52,7 +56,7 @@ public ListenableFuture<?> execute(\n \n         checkAndSetCatalog(statement, metadata, stateMachine, session);\n \n-        stateMachine.setSetSchema(statement.getSchema().getValueLowerCase());\n+        checkAndSetSchema(statement, metadata, stateMachine, session);\n \n         return immediateFuture(null);\n     }\n@@ -72,4 +76,16 @@ private void checkAndSetCatalog(Use statement, Metadata metadata, QueryStateMach\n             stateMachine.setSetCatalog(catalog);\n         }\n     }\n+\n+    private void checkAndSetSchema(Use statement, Metadata metadata, QueryStateMachine stateMachine, Session session)\n+    {\n+        String catalog = statement.getCatalog()\n+                .map(Identifier::getValueLowerCase)\n+                .orElseGet(() -> session.getCatalog().map(String::toLowerCase).get());\n+        String schema = statement.getSchema().getValueLowerCase();\n+        if (!metadata.getMetadataResolver(session).schemaExists(new CatalogSchemaName(catalog, schema))) {\n+            throw new SemanticException(MISSING_SCHEMA, format(\""Schema does not exist: %s.%s\"", catalog, schema));\n+        }\n+        stateMachine.setSetSchema(schema);\n+    }\n }\n\ndiff --git a/presto-main/src/main/java/com/facebook/presto/metadata/MetadataUtil.java b/presto-main/src/main/java/com/facebook/presto/metadata/MetadataUtil.java\nindex 6e13a37eccbf5..7433057b3a30a 100644\n--- a/presto-main/src/main/java/com/facebook/presto/metadata/MetadataUtil.java\n+++ b/presto-main/src/main/java/com/facebook/presto/metadata/MetadataUtil.java\n@@ -41,7 +41,6 @@\n import java.util.List;\n import java.util.Optional;\n \n-import static com.facebook.presto.spi.StandardErrorCode.NOT_FOUND;\n import static com.facebook.presto.spi.StandardErrorCode.SYNTAX_ERROR;\n import static com.facebook.presto.spi.security.PrincipalType.ROLE;\n import static com.facebook.presto.spi.security.PrincipalType.USER;\n@@ -94,7 +93,7 @@ public static SchemaTableName toSchemaTableName(QualifiedObjectName qualifiedObj\n     public static ConnectorId getConnectorIdOrThrow(Session session, Metadata metadata, String catalogName)\n     {\n         return metadata.getCatalogHandle(session, catalogName)\n-                .orElseThrow(() -> new PrestoException(NOT_FOUND, \""Catalog does not exist: \"" + catalogName));\n+                .orElseThrow(() -> new SemanticException(MISSING_CATALOG, \""Catalog does not exist: \"" + catalogName));\n     }\n \n     public static ConnectorId getConnectorIdOrThrow(Session session, Metadata metadata, String catalogName, Statement statement, String errorMsg)\n"", ""test_patch"": ""diff --git a/presto-spark-base/src/test/java/com/facebook/presto/spark/TestPrestoQueries.java b/presto-spark-base/src/test/java/com/facebook/presto/spark/TestPrestoQueries.java\nindex 4da201f77a9dc..17c9c957cca20 100644\n--- a/presto-spark-base/src/test/java/com/facebook/presto/spark/TestPrestoQueries.java\n+++ b/presto-spark-base/src/test/java/com/facebook/presto/spark/TestPrestoQueries.java\n@@ -15,6 +15,7 @@\n \n import com.facebook.presto.testing.QueryRunner;\n import com.facebook.presto.tests.AbstractTestQueries;\n+import org.testng.annotations.Test;\n \n public class TestPrestoQueries\n         extends AbstractTestQueries\n@@ -193,4 +194,10 @@ public void testSetSessionNativeWorkerSessionProperty()\n     {\n         // prepared statement is not supported by Presto on Spark\n     }\n+\n+    @Test\n+    public void testUse()\n+    {\n+        // USE statement is not supported\n+    }\n }\n\ndiff --git a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\nindex 787d43f37279f..080c530875095 100644\n--- a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n+++ b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n@@ -2788,6 +2788,28 @@ public void testShowSchemasFrom()\n         assertTrue(result.getOnlyColumnAsSet().containsAll(ImmutableSet.of(getSession().getSchema().get(), INFORMATION_SCHEMA)));\n     }\n \n+    @Test\n+    public void testUse()\n+    {\n+        Session sessionWithDefaultCatalogAndSchema = getSession();\n+        String catalog = sessionWithDefaultCatalogAndSchema.getCatalog().get();\n+        String schema = sessionWithDefaultCatalogAndSchema.getSchema().get();\n+\n+        assertQueryFails(sessionWithDefaultCatalogAndSchema, \""USE non_exist_schema\"", format(\""Schema does not exist: %s.non_exist_schema\"", catalog));\n+        assertQueryFails(sessionWithDefaultCatalogAndSchema, \""USE non_exist_catalog.any_schema\"", \""Catalog does not exist: non_exist_catalog\"");\n+        assertQueryFails(sessionWithDefaultCatalogAndSchema, format(\""USE %s.non_exist_schema\"", catalog), format(\""Schema does not exist: %s.non_exist_schema\"", catalog));\n+        assertUpdate(sessionWithDefaultCatalogAndSchema, format(\""USE %s.%s\"", catalog, schema));\n+\n+        Session sessionWithoutDefaultCatalogAndSchema = Session.builder(getSession())\n+                .setCatalog(null)\n+                .setSchema(null)\n+                .build();\n+        assertQueryFails(sessionWithoutDefaultCatalogAndSchema, \""USE any_schema\"", \"".* Catalog must be specified when session catalog is not set\"");\n+        assertQueryFails(sessionWithoutDefaultCatalogAndSchema, \""USE non_exist_catalog.any_schema\"", \""Catalog does not exist: non_exist_catalog\"");\n+        assertQueryFails(sessionWithoutDefaultCatalogAndSchema, format(\""USE %s.non_exist_schema\"", catalog), format(\""Schema does not exist: %s.non_exist_schema\"", catalog));\n+        assertUpdate(sessionWithoutDefaultCatalogAndSchema, format(\""USE %s.%s\"", catalog, schema));\n+    }\n+\n     @Test\n     public void testShowSchemasLike()\n     {\n\ndiff --git a/presto-tests/src/test/java/com/facebook/presto/tests/TestLocalQueries.java b/presto-tests/src/test/java/com/facebook/presto/tests/TestLocalQueries.java\nindex 63d4fc2e5838a..b381b01f5ada3 100644\n--- a/presto-tests/src/test/java/com/facebook/presto/tests/TestLocalQueries.java\n+++ b/presto-tests/src/test/java/com/facebook/presto/tests/TestLocalQueries.java\n@@ -117,6 +117,12 @@ public void testDecimal()\n         assertQuery(\""SELECT 0.1\"", \""SELECT CAST('0.1' AS DECIMAL)\"");\n     }\n \n+    @Test\n+    public void testUse()\n+    {\n+        // USE statement is not supported\n+    }\n+\n     @Test\n     public void testIOExplain()\n     {\n\ndiff --git a/presto-tests/src/test/java/com/facebook/presto/tests/TestQueryPlanDeterminism.java b/presto-tests/src/test/java/com/facebook/presto/tests/TestQueryPlanDeterminism.java\nindex 9f51fc2130404..98fdee5fe7ebf 100644\n--- a/presto-tests/src/test/java/com/facebook/presto/tests/TestQueryPlanDeterminism.java\n+++ b/presto-tests/src/test/java/com/facebook/presto/tests/TestQueryPlanDeterminism.java\n@@ -216,6 +216,12 @@ protected void assertTableColumnNames(String tableName, String... columnNames)\n     {\n     }\n \n+    @Test\n+    public void testUse()\n+    {\n+        // USE statement is not supported\n+    }\n+\n     @Override\n     protected MaterializedResult computeExpected(@Language(\""SQL\"") String sql, List<? extends Type> resultTypes)\n     {\n\ndiff --git a/presto-tests/src/test/java/com/facebook/presto/tests/TestVerboseOptimizerInfo.java b/presto-tests/src/test/java/com/facebook/presto/tests/TestVerboseOptimizerInfo.java\nindex 2cbcaf93babc8..3cb9f26f1b8fd 100644\n--- a/presto-tests/src/test/java/com/facebook/presto/tests/TestVerboseOptimizerInfo.java\n+++ b/presto-tests/src/test/java/com/facebook/presto/tests/TestVerboseOptimizerInfo.java\n@@ -157,6 +157,12 @@ public void testSetSessionNativeWorkerSessionProperty()\n     {\n     }\n \n+    @Test\n+    public void testUse()\n+    {\n+        // USE statement is not supported\n+    }\n+\n     private void checkOptimizerInfo(String explain, String optimizerType, List<String> optimizers)\n     {\n         checkOptimizerInfo(explain, optimizerType, optimizers, new ArrayList<>());\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
