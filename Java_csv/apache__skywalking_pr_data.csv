metadata
"{""instance_id"": ""apache__skywalking-13319"", ""pr_id"": 13319, ""issue_id"": 13194, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] Support custom TopN pre-aggregation rules\n### Search before asking\n\n- [x] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nCurrently, we have pre-aggregation topN endpoint on the service page. Meanwhile, in the root page(e.g. layer=general), we have a layer-level topN based on attr0. \nRight now, we can't do pre-aggregation as we have limited the topN rules defined in source(OAL)  through `@ScopeDefaultColumn.BanyanDB(groupByCondInTopN = true)`, which is hard-coded and only supports one rule.\n\n### Use case\n\nIn the current scenario, to speed up these two kinds(maybe in the future), we should support more rules in the `bydb.yml` for customization requirements. Different users could have different scale data, which sometimes requires more preaggregation to achieve `CPU-speed-disk_volume` tradeoff -> Less CPU cost, and faster query performance, to trade off more disk_volume as pre-aggregation.\n\n### Related issues\n\n_No response_\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [x] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 207, ""test_files_count"": 1, ""non_test_files_count"": 25, ""pr_changed_files"": [""apm-dist/src/main/assembly/binary.xml"", ""docs/en/changes/changes.md"", ""docs/en/setup/backend/storages/banyandb.md"", ""oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumn.java"", ""oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumnsFactory.java"", ""oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPagePerf.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageTraffic.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppResourcePerf.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppWebInteractionPerf.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppWebVitalsPerf.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Endpoint.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/K8SEndpoint.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ScopeDefaultColumn.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBModelExtension.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java"", ""oap-server/server-starter/src/main/resources/bydb-topn.yml"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java""], ""pr_changed_test_files"": [""oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java""], ""base_commit"": ""43d79d9fec224036cc3cbc7185c9faa7ecd4838c"", ""head_commit"": ""a9eaee09b4768522ed1ceec852ebcf6b658f91e3"", ""repo_url"": ""https://github.com/apache/skywalking/pull/13319"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/13319"", ""dockerfile"": """", ""pr_merged_at"": ""2025-06-17T04:49:11.000Z"", ""patch"": ""diff --git a/apm-dist/src/main/assembly/binary.xml b/apm-dist/src/main/assembly/binary.xml\nindex 7848d357dc10..0f7a29454d7c 100644\n--- a/apm-dist/src/main/assembly/binary.xml\n+++ b/apm-dist/src/main/assembly/binary.xml\n@@ -62,6 +62,7 @@\n                 <include>hierarchy-definition.yml</include>\r\n                 <include>bydb.dependencies.properties</include>\r\n                 <include>bydb.yml</include>\r\n+                <include>bydb-topn.yml</include>\r\n                 <include>oal/*.oal</include>\r\n                 <include>fetcher-prom-rules/*.yaml</include>\r\n                 <include>envoy-metrics-rules/**</include>\r\n\ndiff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 6d53e69b082a..22107feab864 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -12,7 +12,7 @@\n * PromQL Service: traffic query support `limit` and regex match.\n * Fix an edge case of HashCodeSelector(Integer#MIN_VALUE causes ArrayIndexOutOfBoundsException).\n * Support Flink monitoring.\n-* BanyanDB: Support `@ShardingKey` for Measure tags and set to TopNAggregation group tag by default.\n+* BanyanDB: Support `@ShardingKey` for Measure tags.\n * BanyanDB: Support cold stage data query for metrics/traces/logs.\n * Increase the idle check interval of the message queue to 200ms to reduce CPU usage under low load conditions.\n * Limit max attempts of DNS resolution of Istio ServiceEntry to 3, and do not wait for first resolution result in case the DNS is not resolvable at all.\n@@ -31,6 +31,7 @@\n * Fix `disable.oal` does not work.\n * Enhance the stability of e2e PHP tests and update the PHP agent version.\n * Add component ID for the `dameng` JDBC driver.\n+* BanyanDB: Support custom `TopN pre-aggregation` rules configuration in file `bydb-topn.yml`.\n \n #### UI\n \n\ndiff --git a/docs/en/setup/backend/storages/banyandb.md b/docs/en/setup/backend/storages/banyandb.md\nindex 0dbbcee3753b..5624f1125229 100644\n--- a/docs/en/setup/backend/storages/banyandb.md\n+++ b/docs/en/setup/backend/storages/banyandb.md\n@@ -233,6 +233,88 @@ groups:\n     shardNum: ${SW_STORAGE_BANYANDB_PROPERTY_SHARD_NUM:1}\n \n ```\n+### TopN Rules Configuration\n+The BanyanDB storage supports TopN pre-aggregation in the BanyanDB server side, which trades off more disk_volume for pre-aggregation to save CPU cost, and perform faster query in the query stage. \n+You can define the TopN rules for different metrics. The configuration is defined in the `bydb-topn.yaml` file:\n+\n+```yaml\n+# This file is used to configure the TopN rules for BanyanDB in SkyWalking OAP server.\n+# The rules define how to aggregate and sort `metrics (Measure)` for services, endpoints, and instances.\n+#\n+# - name: Required. The name of the TopN rule, uniquely identifies the rule.\n+# - metricName: Required. The name of the metric to be aggregated.\n+# - groupByTagNames: Optional, default `[]`. The tag names to group the metrics by. If not specified, the metrics will sort without grouped.\n+# - countersNumber: Optional, default `1000`. The max size of entries in a time window for the pre-aggregation.\n+\n+# The size of LRU determines the maximally tolerated time range.\n+# The buffers in the time range are kept in the memory so that\n+# the data in [T - lruSize * n, T] would be accepted in the pre-aggregation process.\n+# T = the current time in the current dimensionality.\n+# n = interval in the current dimensionality.\n+# - lruSizeMinute: Optional, default `10`. Defines how many time_buckets are held in the memory for minute-level metrics.\n+# - lruSizeHourDay: Optional, default `2`. Defines how many time_buckets are held in the memory for hour and day-level metrics.\n+\n+# - sort: Optional, default `all`. The sorting order for the metrics, asc, des or all(include both asc and des).\n+\n+TopN-Rules:\n+   # endpoint metrics\n+   # `attr0` is defined in the `EndpointDecorator` as the Layer.\n+  - name: endpoint_cpm\n+    metricName: endpoint_cpm\n+    sort: des\n+  - name: endpoint_cpm-layer\n+    metricName: endpoint_cpm\n+    groupByTagNames:\n+      - attr0\n+    sort: des\n+  - name: endpoint_cpm-service\n+    metricName: endpoint_cpm\n+    groupByTagNames:\n+      - service_id\n+    sort: des\n+  - name: endpoint_sla\n+    metricName: endpoint_sla\n+    sort: asc\n+  - name: endpoint_sla-layer\n+    metricName: endpoint_sla\n+    groupByTagNames:\n+      - attr0\n+    sort: asc\n+  - name: endpoint_sla-service\n+    metricName: endpoint_sla\n+    groupByTagNames:\n+      - service_id\n+    sort: asc\n+  - name: endpoint_resp_time\n+    metricName: endpoint_resp_time\n+    sort: des\n+  - name: endpoint_resp_time-layer\n+    metricName: endpoint_resp_time\n+    groupByTagNames:\n+      - attr0\n+    sort: des\n+  - name: endpoint_resp_time-service\n+    metricName: endpoint_resp_time\n+    groupByTagNames:\n+      - service_id\n+    sort: des\n+  # browser_app_page_pv metrics\n+  - name: browser_app_page_pv-service\n+    metricName: browser_app_page_pv\n+    groupByTagNames:\n+      - service_id\n+    sort: des\n+  - name: browser_app_page_error_sum-service\n+    metricName: browser_app_page_error_sum\n+    groupByTagNames:\n+      - service_id\n+    sort: des\n+  - name: browser_app_page_error_rate-service\n+    metricName: browser_app_page_error_rate\n+    groupByTagNames:\n+      - service_id\n+    sort: des\n+```\n \n ### Installation Modes\n \n\ndiff --git a/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumn.java b/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumn.java\nindex c76ac3f8038d..479c9bafd3f5 100644\n--- a/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumn.java\n+++ b/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumn.java\n@@ -34,11 +34,11 @@ public class SourceColumn {\n     private int length;\n     private String fieldSetter;\n     private String fieldGetter;\n-    private final boolean groupByCondInTopN;\n+    private final int shardingKeyIdx;\n     private final boolean attribute;\n \n     public SourceColumn(String fieldName, String columnName, Class<?> type, boolean isID, int length,\n-                        boolean groupByCondInTopN, boolean attribute) {\n+                        int shardingKeyIdx, boolean attribute) {\n         this.fieldName = fieldName;\n         this.columnName = columnName;\n         this.type = type;\n@@ -48,7 +48,7 @@ public SourceColumn(String fieldName, String columnName, Class<?> type, boolean\n \n         this.fieldGetter = ClassMethodUtil.toGetMethod(fieldName);\n         this.fieldSetter = ClassMethodUtil.toSetMethod(fieldName);\n-        this.groupByCondInTopN = groupByCondInTopN;\n+        this.shardingKeyIdx = shardingKeyIdx;\n         this.attribute = attribute;\n     }\n \n@@ -82,9 +82,16 @@ public void setTypeName(String typeName) {\n         this.typeName = typeName;\n     }\n \n+    /**\n+     * @return true if this column is a part of sharding key\n+     */\n+    public boolean isShardingKey() {\n+        return this.shardingKeyIdx > -1;\n+    }\n+\n     @Override\n     public String toString() {\n-        return \""SourceColumn{\"" + \""fieldName='\"" + fieldName + '\\'' + \"", columnName='\"" + columnName + '\\'' + \"", type=\"" + type + \"", isID=\"" + isID + '}';\n+        return \""SourceColumn{\"" + \""fieldName=\"" + fieldName + \"", columnName=\"" + columnName + \"", type=\"" + type + \"", isID=\"" + isID + \"", shardingKeyIdx=\"" + shardingKeyIdx + \"", isAttribute=\"" + attribute + \""}\"";\n     }\n \n     @Override\n\ndiff --git a/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumnsFactory.java b/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumnsFactory.java\nindex dadcbee20598..494a1b650cac 100644\n--- a/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumnsFactory.java\n+++ b/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/SourceColumnsFactory.java\n@@ -31,7 +31,7 @@ public static List<SourceColumn> getColumns(String source) {\n         for (ScopeDefaultColumn defaultColumn : columns) {\n             sourceColumns.add(\n                 new SourceColumn(defaultColumn.getFieldName(), defaultColumn.getColumnName(), defaultColumn\n-                    .getType(), defaultColumn.isID(), defaultColumn.getLength(), defaultColumn.isGroupByCondInTopN(), defaultColumn.isAttribute()));\n+                    .getType(), defaultColumn.isID(), defaultColumn.getLength(), defaultColumn.getShardingKeyIdx(), defaultColumn.isAttribute()));\n         }\n         return sourceColumns;\n     }\n\ndiff --git a/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java b/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java\nindex f53dfcc5b42a..da35514c0a82 100644\n--- a/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java\n+++ b/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java\n@@ -211,13 +211,9 @@ private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompile\n                     final var enableDocValuesAnnotation = new Annotation(ElasticSearch.EnableDocValues.class.getName(), constPool);\n                     annotationsAttribute.addAnnotation(enableDocValuesAnnotation);\n                 }\n-\n-                if (field.isGroupByCondInTopN()) {\n-                    Annotation banyanTopNAggregationAnnotation = new Annotation(BanyanDB.TopNAggregation.class.getName(), constPool);\n-                    annotationsAttribute.addAnnotation(banyanTopNAggregationAnnotation);\n-                    // If TopN, add ShardingKey to group field.\n+                if (field.isShardingKey()) {\n                     Annotation banyanShardingKeyAnnotation = new Annotation(BanyanDB.ShardingKey.class.getName(), constPool);\n-                    banyanShardingKeyAnnotation.addMemberValue(\""index\"", new IntegerMemberValue(constPool, 0));\n+                    banyanShardingKeyAnnotation.addMemberValue(\""index\"", new IntegerMemberValue(constPool, field.getShardingKeyIdx()));\n                     annotationsAttribute.addAnnotation(banyanShardingKeyAnnotation);\n                 }\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPagePerf.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPagePerf.java\nindex adab7546cc38..c9ded0962a01 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPagePerf.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPagePerf.java\n@@ -41,7 +41,6 @@ public String getEntityId() {\n \n     @Getter\n     @ScopeDefaultColumn.DefinedByField(columnName = \""service_id\"")\n-    @ScopeDefaultColumn.BanyanDB(groupByCondInTopN = true)\n     private String serviceId;\n     @Getter\n     @Setter\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageTraffic.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageTraffic.java\nindex 1f279c3c13d1..745d9c008d7c 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageTraffic.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageTraffic.java\n@@ -41,6 +41,7 @@ public String getEntityId() {\n \n     @Getter\n     @ScopeDefaultColumn.DefinedByField(columnName = \""service_id\"")\n+    @ScopeDefaultColumn.BanyanDB(shardingKeyIdx = 0)\n     private String serviceId;\n     @Getter\n     @Setter\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppResourcePerf.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppResourcePerf.java\nindex cda18af2e092..32894d24e2fb 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppResourcePerf.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppResourcePerf.java\n@@ -45,7 +45,6 @@ public String getEntityId() {\n     }\n \n     @ScopeDefaultColumn.DefinedByField(columnName = \""service_id\"")\n-    @ScopeDefaultColumn.BanyanDB(groupByCondInTopN = true)\n     private String serviceId;\n     @ScopeDefaultColumn.DefinedByField(columnName = \""service_name\"", requireDynamicActive = true)\n     private String serviceName;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppWebInteractionPerf.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppWebInteractionPerf.java\nindex 50a6f84cee2b..2a303e33d158 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppWebInteractionPerf.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppWebInteractionPerf.java\n@@ -44,7 +44,6 @@ public String getEntityId() {\n     }\n \n     @ScopeDefaultColumn.DefinedByField(columnName = \""service_id\"")\n-    @ScopeDefaultColumn.BanyanDB(groupByCondInTopN = true)\n     private String serviceId;\n     @ScopeDefaultColumn.DefinedByField(columnName = \""service_name\"", requireDynamicActive = true)\n     private String serviceName;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppWebVitalsPerf.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppWebVitalsPerf.java\nindex 95c003596c9d..c7df9271adbc 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppWebVitalsPerf.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppWebVitalsPerf.java\n@@ -45,7 +45,6 @@ public String getEntityId() {\n     }\n \n     @ScopeDefaultColumn.DefinedByField(columnName = \""service_id\"")\n-    @ScopeDefaultColumn.BanyanDB(groupByCondInTopN = true)\n     private String serviceId;\n     @ScopeDefaultColumn.DefinedByField(columnName = \""service_name\"", requireDynamicActive = true)\n     private String serviceName;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\nindex 13bb43524dc8..1d51cc193e18 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n@@ -232,7 +232,7 @@ private static void addNewScope(ScopeDeclaration declaration, Class originalClas\n         if (virtualColumn != null) {\n             scopeDefaultColumns.add(\n                 new ScopeDefaultColumn(virtualColumn.fieldName(), virtualColumn.columnName(), virtualColumn\n-                    .type(), virtualColumn.isID(), virtualColumn.length(), false, false));\n+                    .type(), virtualColumn.isID(), virtualColumn.length(), -1, false));\n         }\n         Field[] scopeClassField = originalClass.getDeclaredFields();\n         if (scopeClassField != null) {\n@@ -241,16 +241,16 @@ private static void addNewScope(ScopeDeclaration declaration, Class originalClas\n                     ScopeDefaultColumn.DefinedByField.class);\n                 ScopeDefaultColumn.BanyanDB banyanDB = field.getAnnotation(\n                     ScopeDefaultColumn.BanyanDB.class);\n-                boolean groupByCondInTopN = false;\n+                int shardingKeyIdx = -1;\n                 if (banyanDB != null) {\n-                    groupByCondInTopN = banyanDB.groupByCondInTopN();\n+                    shardingKeyIdx = banyanDB.shardingKeyIdx();\n                 }\n                 if (definedByField != null) {\n                     if (!definedByField.requireDynamicActive() || ACTIVE_EXTRA_MODEL_COLUMNS) {\n                         scopeDefaultColumns.add(\n                             new ScopeDefaultColumn(\n                                 field.getName(), definedByField.columnName(), field.getType(), false,\n-                                definedByField.length(), groupByCondInTopN, definedByField.isAttribute()\n+                                definedByField.length(), shardingKeyIdx, definedByField.isAttribute()\n                             ));\n                     }\n                 }\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Endpoint.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Endpoint.java\nindex acc5955f58b4..d1135a7640be 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Endpoint.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Endpoint.java\n@@ -57,7 +57,7 @@ public String getEntityId() {\n     private String name;\n     @Getter\n     @ScopeDefaultColumn.DefinedByField(columnName = \""service_id\"")\n-    @ScopeDefaultColumn.BanyanDB(groupByCondInTopN = true)\n+    @ScopeDefaultColumn.BanyanDB(shardingKeyIdx = 0)\n     private String serviceId;\n     @Getter\n     @Setter\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/K8SEndpoint.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/K8SEndpoint.java\nindex 0f16aaa02ddb..f97f83e72b2e 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/K8SEndpoint.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/K8SEndpoint.java\n@@ -32,7 +32,7 @@ public class K8SEndpoint extends K8SMetrics.ProtocolMetrics {\n     private volatile String entityId;\n \n     @ScopeDefaultColumn.DefinedByField(columnName = \""service_id\"")\n-    @ScopeDefaultColumn.BanyanDB(groupByCondInTopN = true)\n+    @ScopeDefaultColumn.BanyanDB(shardingKeyIdx = 0)\n     private String serviceId;\n     @ScopeDefaultColumn.DefinedByField(columnName = \""service_name\"", requireDynamicActive = true)\n     private String serviceName;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ScopeDefaultColumn.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ScopeDefaultColumn.java\nindex 76886680870d..f96f056107c0 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ScopeDefaultColumn.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ScopeDefaultColumn.java\n@@ -24,6 +24,7 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n \n /**\n  * Define the default columns of source scope. These columns pass down into the persistent entity(OAL metrics entity)\n@@ -36,16 +37,16 @@ public class ScopeDefaultColumn {\n     private Class<?> type;\n     private boolean isID;\n     private int length;\n-    private final boolean groupByCondInTopN;\n+    private final int shardingKeyIdx;\n     private final boolean attribute;\n \n-    public ScopeDefaultColumn(String fieldName, String columnName, Class<?> type, boolean isID, int length, boolean groupByCondInTopN, boolean attribute) {\n+    public ScopeDefaultColumn(String fieldName, String columnName, Class<?> type, boolean isID, int length, int shardingKeyIdx, boolean attribute) {\n         this.fieldName = fieldName;\n         this.columnName = columnName;\n         this.type = type;\n         this.isID = isID;\n         this.length = length;\n-        this.groupByCondInTopN = groupByCondInTopN;\n+        this.shardingKeyIdx = shardingKeyIdx;\n         this.attribute = attribute;\n     }\n \n@@ -80,12 +81,17 @@ public ScopeDefaultColumn(String fieldName, String columnName, Class<?> type, bo\n     @Retention(RetentionPolicy.RUNTIME)\n     public @interface BanyanDB {\n         /**\n-         * Indicate whether this column is a condition for groupBy in the TopN Aggregation.\n+         * ShardingKey is used to group time series data per metric in one place. Optional. Only support Measure Tag.\n+         * If ShardingKey is not set, the default ShardingKey is based on the combination of 'name' and 'entity' according to the {@link org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB.SeriesID}.\n+         * <p>\n+         * The typical scenario to specify the ShardingKey to the Group tag when the metric generate a TopNAggregation:\n+         * If not set, the default data distribution based on the combination of 'name' and 'entity', can lead to performance issues when calculating the 'TopNAggregation'.\n+         * This is because each shard only has a subset of the top-n list, and the query process has to be responsible for aggregating those lists to obtain the final result.\n+         * This introduces overhead in terms of querying performance and disk usage.\n          *\n-         * @since 9.5.0\n-         * @since 10.2.0 moved out from {@link DefinedByField} to {@link BanyanDB}\n+         * @since 10.3.0\n          */\n-        boolean groupByCondInTopN() default false;\n+        int shardingKeyIdx() default -1;\n     }\n \n     @Target({ElementType.TYPE})\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java\nindex 41d702165c8b..8c6afc47717b 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java\n@@ -19,7 +19,6 @@\n package org.apache.skywalking.oap.server.core.storage.annotation;\n \n import java.lang.annotation.ElementType;\n-import java.lang.annotation.Inherited;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n@@ -179,31 +178,6 @@ enum IndexType {\n     @interface StoreIDAsTag {\n     }\n \n-    /**\n-     * Generate a TopN Aggregation and use the annotated column as a groupBy tag.\n-     * It also contains parameters for TopNAggregation\n-     *\n-     * @since 9.4.0\n-     */\n-    @Target({ElementType.FIELD})\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @Inherited\n-    @interface TopNAggregation {\n-        /**\n-         * The size of LRU determines the maximally tolerated time range.\n-         * The buffers in the time range are kept in the memory so that\n-         * the data in [T - lruSize * n, T] would be accepted in the pre-aggregation process.\n-         * T = the current time in the current dimensionality.\n-         * n = interval in the current dimensionality.\n-         */\n-        int lruSize() default 2;\n-\n-        /**\n-         * The max size of entries in a time window for the pre-aggregation.\n-         */\n-        int countersNumber() default 1000;\n-    }\n-\n     /**\n      * Match query is designed for BanyanDB match query with specific analyzer. It is a fuzzy query implementation\n      * powered by analyzer.\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBModelExtension.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBModelExtension.java\nindex 307359755cb4..7adecdff908a 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBModelExtension.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBModelExtension.java\n@@ -23,8 +23,6 @@\n import org.apache.skywalking.oap.server.core.analysis.record.Record;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n \n-import java.util.List;\n-\n /**\n  * BanyanDBExtension represents extra metadata for models, but specific for BanyanDB usages.\n  *\n@@ -49,10 +47,6 @@ public class BanyanDBModelExtension {\n     @Setter\n     private boolean storeIDTag;\n \n-    @Getter\n-    @Setter\n-    private TopN topN;\n-\n     /**\n      * indexMode indicates whether a metric is in the index mode.\n      *\n@@ -62,34 +56,7 @@ public class BanyanDBModelExtension {\n     @Setter\n     private boolean indexMode;\n \n-    public static class TopN {\n-        /**\n-         * lru_size defines how many time_buckets are held in the memory.\n-         * For example, \""2\"" means data points belonging to the latest \""2\"" time_buckets will be persisted.\n-         * The default value is 2 in the BanyanDB if not set.\n-         *\n-         * @since 9.4.0\n-         */\n-        @Getter\n-        @Setter\n-        private int lruSize;\n-\n-        /**\n-         * counters_number defines the max number of entries to be tracked during the pre-aggregation.\n-         * The default value is 1000 in the BanyanDB if not set.\n-         *\n-         * @since 9.4.0\n-         */\n-        @Getter\n-        @Setter\n-        private int countersNumber;\n-\n-        @Setter\n-        @Getter\n-        private List<String> groupByTagNames;\n-    }\n-\n-        @Setter\n-        @Getter\n-        private BanyanDB.StreamGroup streamGroup = BanyanDB.StreamGroup.RECORDS;\n+    @Setter\n+    @Getter\n+    private BanyanDB.StreamGroup streamGroup = BanyanDB.StreamGroup.RECORDS;\n }\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java\nindex 059f98936791..df85a92ed760 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java\n@@ -231,8 +231,6 @@ private void retrieval(final Class<?> clazz,\n                     BanyanDB.IndexRule.class);\n                 final BanyanDB.MeasureField banyanDBMeasureField = field.getAnnotation(\n                     BanyanDB.MeasureField.class);\n-                final BanyanDB.TopNAggregation topNAggregation = field.getAnnotation(\n-                    BanyanDB.TopNAggregation.class);\n                 final BanyanDB.MatchQuery analyzer = field.getAnnotation(\n                     BanyanDB.MatchQuery.class);\n                 final BanyanDB.EnableSort enableSort = field.getAnnotation(\n@@ -248,14 +246,6 @@ private void retrieval(final Class<?> clazz,\n                     enableSort != null\n                 );\n \n-                if (topNAggregation != null) {\n-                    BanyanDBModelExtension.TopN topN = new BanyanDBModelExtension.TopN();\n-                    topN.setLruSize(topNAggregation.lruSize());\n-                    topN.setCountersNumber(topNAggregation.countersNumber());\n-                    topN.setGroupByTagNames(Collections.singletonList(column.name()));\n-                    banyanDBModelExtension.setTopN(topN);\n-                }\n-\n                 final ModelColumn modelColumn = new ModelColumn(\n                     new ColumnName(column),\n                     field.getType(),\n\ndiff --git a/oap-server/server-starter/src/main/resources/bydb-topn.yml b/oap-server/server-starter/src/main/resources/bydb-topn.yml\nnew file mode 100644\nindex 000000000000..c20a87f41fc4\n--- /dev/null\n+++ b/oap-server/server-starter/src/main/resources/bydb-topn.yml\n@@ -0,0 +1,82 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \""License\""); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \""AS IS\"" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+# This file is used to configure the TopN rules for BanyanDB in SkyWalking OAP server.\n+# The rules define how to aggregate and sort `metrics (Measure)` for services, endpoints, and instances.\n+#\n+# - name: Required. The name of the TopN rule, uniquely identifies the rule.\n+# - metricName: Required. The name of the metric to be aggregated.\n+# - groupByTagNames: Optional, default `[]`. The tag names to group the metrics by. If not specified, the metrics will sort without grouped.\n+# - countersNumber: Optional, default `1000`. The max size of entries in a time window for the pre-aggregation.\n+\n+# The size of LRU determines the maximally tolerated time range.\n+# The buffers in the time range are kept in the memory so that\n+# the data in [T - lruSize * n, T] would be accepted in the pre-aggregation process.\n+# T = the current time in the current dimensionality.\n+# n = interval in the current dimensionality.\n+# - lruSizeMinute: Optional, default `10`. Defines how many time_buckets are held in the memory for minute-level metrics.\n+# - lruSizeHourDay: Optional, default `2`. Defines how many time_buckets are held in the memory for hour and day-level metrics.\n+\n+# - sort: Optional, default `all`. The sorting order for the metrics, asc, des or all(include both asc and des).\n+\n+TopN-Rules:\n+   # endpoint metrics\n+   # `attr0` is defined in the `EndpointDecorator` as the Layer.\n+  - name: endpoint_cpm-layer\n+    metricName: endpoint_cpm\n+    groupByTagNames:\n+      - attr0\n+    sort: des\n+  - name: endpoint_cpm-service\n+    metricName: endpoint_cpm\n+    groupByTagNames:\n+      - service_id\n+    sort: des\n+  - name: endpoint_sla-layer\n+    metricName: endpoint_sla\n+    groupByTagNames:\n+      - attr0\n+    sort: asc\n+  - name: endpoint_sla-service\n+    metricName: endpoint_sla\n+    groupByTagNames:\n+      - service_id\n+    sort: asc\n+  - name: endpoint_resp_time-layer\n+    metricName: endpoint_resp_time\n+    groupByTagNames:\n+      - attr0\n+    sort: des\n+  - name: endpoint_resp_time-service\n+    metricName: endpoint_resp_time\n+    groupByTagNames:\n+      - service_id\n+    sort: des\n+  # browser_app_page_pv metrics\n+  - name: browser_app_page_pv-service\n+    metricName: browser_app_page_pv\n+    groupByTagNames:\n+      - service_id\n+    sort: des\n+  - name: browser_app_page_error_sum-service\n+    metricName: browser_app_page_error_sum\n+    groupByTagNames:\n+      - service_id\n+    sort: des\n+  - name: browser_app_page_error_rate-service\n+    metricName: browser_app_page_error_rate\n+    groupByTagNames:\n+      - service_id\n+    sort: des\n\\ No newline at end of file\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java\nindex 0fd25a9fa888..3781e5c66773 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java\n@@ -19,6 +19,8 @@\n package org.apache.skywalking.oap.server.storage.plugin.banyandb;\n \n import com.google.common.collect.ImmutableSet;\n+import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase;\n+import org.apache.skywalking.banyandb.model.v1.BanyandbModel;\n import org.apache.skywalking.banyandb.v1.client.AbstractQuery;\n import org.apache.skywalking.banyandb.v1.client.DataPoint;\n import org.apache.skywalking.banyandb.v1.client.MeasureQuery;\n@@ -27,6 +29,7 @@\n import org.apache.skywalking.banyandb.v1.client.TopNQueryResponse;\n import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n import org.apache.skywalking.oap.server.core.query.enumeration.Order;\n+import org.apache.skywalking.oap.server.core.query.input.AttrCondition;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.query.input.TopNCondition;\n import org.apache.skywalking.oap.server.core.query.type.KeyValue;\n@@ -41,7 +44,6 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n-import java.util.stream.Collectors;\n \n public class BanyanDBAggregationQueryDAO extends AbstractBanyanDBDAO implements IAggregationQueryDAO {\n     private static final Set<String> TAGS = ImmutableSet.of(Metrics.ENTITY_ID);\n@@ -65,13 +67,52 @@ public List<SelectedRecord> sortMetrics(TopNCondition condition, String valueCol\n         }\n \n         // BanyanDB server-side TopN support for metrics pre-aggregation.\n-        if (schema.getTopNSpec() != null && CollectionUtils.isEmpty(condition.getAttributes())) {\n-            // 1) no additional conditions\n-            // 2) additional conditions are all group by tags\n-            if (CollectionUtils.isEmpty(additionalConditions) ||\n-                    additionalConditions.stream().map(KeyValue::getKey).collect(Collectors.toSet())\n-                            .equals(ImmutableSet.copyOf(schema.getTopNSpec().getGroupByTagNamesList()))) {\n-                return serverSideTopN(isColdStage, condition, schema, spec, getTimestampRange(duration), additionalConditions);\n+        // The query tags are the additional conditions and attributes defined in the TopN condition.\n+        // The query tags is the key to find the TopN aggregation in the schema.\n+        // If the TopN aggregation is defined in the schema, it will be used to perform the query.\n+        // The server-side TopN only support when attribute condition `isEquals == true`.\n+        ImmutableSet.Builder<String> queryTags = ImmutableSet.builder();\n+        boolean equalsQuery = true;\n+        if (condition.getAttributes() != null) {\n+            for (AttrCondition attr : condition.getAttributes()) {\n+                if (!attr.isEquals()) {\n+                    equalsQuery = false;\n+                    break;\n+                }\n+                queryTags.add(attr.getKey());\n+            }\n+        }\n+        if (!equalsQuery) {\n+            return directMetricsTopN(isColdStage, condition, schema, valueColumnName, spec, getTimestampRange(duration), additionalConditions);\n+        }\n+        if (additionalConditions != null) {\n+            additionalConditions.forEach(additionalCondition -> queryTags.add(additionalCondition.getKey()));\n+        }\n+        if (schema.getTopNSpecs() != null) {\n+            BanyandbDatabase.TopNAggregation topNAggregation = schema.getTopNSpecs().get(queryTags.build());\n+            if (topNAggregation != null) {\n+                BanyandbModel.Sort sort = topNAggregation.getFieldValueSort();\n+                // If the TopN aggregation is defined in the schema, use it.\n+                switch (condition.getOrder()) {\n+                    case DES:\n+                        if (sort == BanyandbModel.Sort.SORT_DESC || sort == BanyandbModel.Sort.SORT_UNSPECIFIED) {\n+                            return serverSideTopN(\n+                                isColdStage, condition, schema, spec, getTimestampRange(duration), additionalConditions,\n+                                topNAggregation.getMetadata().getName(), AbstractQuery.Sort.DESC\n+                            );\n+                        }\n+                        break;\n+                    case ASC:\n+                        if (sort == BanyandbModel.Sort.SORT_ASC || sort == BanyandbModel.Sort.SORT_UNSPECIFIED) {\n+                            return serverSideTopN(\n+                                isColdStage, condition, schema, spec, getTimestampRange(duration), additionalConditions,\n+                                topNAggregation.getMetadata().getName(), AbstractQuery.Sort.ASC\n+                            );\n+                        }\n+                        break;\n+                    default:\n+                        throw new IOException(\""Unsupported order: \"" + condition.getOrder());\n+                }\n             }\n         }\n \n@@ -79,13 +120,9 @@ public List<SelectedRecord> sortMetrics(TopNCondition condition, String valueCol\n     }\n \n     List<SelectedRecord> serverSideTopN(boolean isColdStage, TopNCondition condition, MetadataRegistry.Schema schema, MetadataRegistry.ColumnSpec valueColumnSpec,\n-                                        TimestampRange timestampRange, List<KeyValue> additionalConditions) throws IOException {\n-        TopNQueryResponse resp = null;\n-        if (condition.getOrder() == Order.DES) {\n-            resp = topNQueryDebuggable(isColdStage, schema, timestampRange, condition.getTopN(), AbstractQuery.Sort.DESC, additionalConditions, condition.getAttributes());\n-        } else {\n-            resp = topNQueryDebuggable(isColdStage, schema, timestampRange, condition.getTopN(), AbstractQuery.Sort.ASC, additionalConditions, condition.getAttributes());\n-        }\n+                                        TimestampRange timestampRange, List<KeyValue> additionalConditions, String topNRuleName, AbstractQuery.Sort sort) throws IOException {\n+        TopNQueryResponse resp;\n+        resp = topNQueryDebuggable(isColdStage, schema, timestampRange, condition.getTopN(), sort, additionalConditions, condition.getAttributes(), topNRuleName);\n         if (resp.size() == 0) {\n             return Collections.emptyList();\n         } else if (resp.size() > 1) { // since we have done aggregation, i.e. MEAN\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java\nindex ea4f9310031d..0104aa117710 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java\n@@ -21,6 +21,7 @@\n import java.io.FileNotFoundException;\n import java.io.Reader;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n import lombok.extern.slf4j.Slf4j;\n@@ -28,6 +29,7 @@\n import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n import org.apache.skywalking.oap.server.library.util.ResourceUtils;\n+import org.apache.skywalking.oap.server.storage.plugin.banyandb.BanyanDBStorageConfig.TopN;\n import org.yaml.snakeyaml.Yaml;\n \n import static org.apache.skywalking.oap.server.library.util.YamlConfigLoaderUtils.copyProperties;\n@@ -36,16 +38,25 @@\n @Slf4j\n public class BanyanDBConfigLoader {\n     private final ModuleProvider moduleProvider;\n+    private BanyanDBStorageConfig config;\n     private final Yaml yaml;\n+    private final Yaml topNYaml;\n \n     public BanyanDBConfigLoader(final ModuleProvider moduleProvider) {\n         this.moduleProvider = moduleProvider;\n+        this.config = new BanyanDBStorageConfig();\n         this.yaml = new Yaml();\n+        this.topNYaml = new Yaml();\n     }\n \n     public BanyanDBStorageConfig loadConfig() throws ModuleStartException {\n-        BanyanDBStorageConfig config = new BanyanDBStorageConfig();\n-        Reader applicationReader = null;\n+         loadBaseConfig();\n+         loadTopNConfig();\n+         return config;\n+    }\n+\n+    private void loadBaseConfig() throws ModuleStartException {\n+        Reader applicationReader;\n         try {\n             applicationReader = ResourceUtils.read(\""bydb.yml\"");\n         } catch (FileNotFoundException e) {\n@@ -53,7 +64,7 @@ public BanyanDBStorageConfig loadConfig() throws ModuleStartException {\n         }\n         Map<String, Map<String, ?>> configMap = yaml.loadAs(applicationReader, Map.class);\n         if (configMap == null) {\n-            return config;\n+            return;\n         }\n \n         Map<String, Properties> configProperties = new HashMap<>();\n@@ -137,7 +148,6 @@ public BanyanDBStorageConfig loadConfig() throws ModuleStartException {\n         } catch (IllegalAccessException e) {\n             throw new ModuleStartException(\""Failed to load BanyanDB configuration.\"", e);\n         }\n-        return config;\n     }\n \n     private Properties parseConfig(final Map<String, ?> config) {\n@@ -181,4 +191,54 @@ private void copyStages(final Properties group,\n             groupResource.getAdditionalLifecycleStages().add(cold);\n         }\n     }\n+\n+    private void loadTopNConfig() throws ModuleStartException {\n+        Reader applicationReader;\n+        try {\n+            applicationReader = ResourceUtils.read(\""bydb-topn.yml\"");\n+        } catch (FileNotFoundException e) {\n+            throw new ModuleStartException(\""Cannot find the BanyanDB topN configuration file [bydb-topn.yml].\"", e);\n+        }\n+        Map<String, List<Map<String, ?>>> configMap = yaml.loadAs(applicationReader, Map.class);\n+        if (configMap == null) {\n+            return;\n+        }\n+        List<Map<String, ?>> topNConfig = configMap.get(\""TopN-Rules\"");\n+        for (Map<String, ?> rule : topNConfig) {\n+            TopN topN = new TopN();\n+            var name = rule.get(\""name\"");\n+            if (name == null) {\n+                throw new ModuleStartException(\""TopN rule name is missing in file [bydb-topn.yml].\"");\n+            }\n+            var metricName = rule.get(\""metricName\"");\n+            if (metricName == null) {\n+                throw new ModuleStartException(\""TopN rule metricName is missing in file [bydb-topn.yml].\"");\n+            }\n+            topN.setName(name.toString());\n+            var groupByTagNames = rule.get(\""groupByTagNames\"");\n+            if (groupByTagNames != null) {\n+                topN.setGroupByTagNames((List<String>) groupByTagNames);\n+            }\n+            var countersNumber = rule.get(\""countersNumber\"");\n+            if (countersNumber != null) {\n+                topN.setLruSizeMinute((int) countersNumber);\n+            }\n+            var lruSizeMinute = rule.get(\""lruSizeMinute\"");\n+            if (lruSizeMinute != null) {\n+                topN.setLruSizeMinute((int) lruSizeMinute);\n+            }\n+            var lruSizeHourDay = rule.get(\""lruSizeHourDay\"");\n+            if (lruSizeHourDay != null) {\n+                topN.setLruSizeMinute((int) lruSizeHourDay);\n+            }\n+            var sort = rule.get(\""sort\"");\n+            if (sort != null) {\n+                topN.setSort(TopN.Sort.valueOf(sort.toString()));\n+            }\n+            Map<String, TopN> map = config.getTopNConfigs().computeIfAbsent(metricName.toString(), k -> new HashMap<>());\n+            if (map.put(name.toString(), topN) != null) {\n+                throw new ModuleStartException(\""Duplicate TopN rule name: \"" + name + \"" in file [bydb-topn.yml].\"");\n+            }\n+        }\n+    }\n }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\nindex 90bebd407226..ba6ccf0450c1 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\n@@ -195,18 +195,7 @@ public void createTable(Model model) throws StorageException {\n                             }\n                         }\n                         final MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(model);\n-                        try {\n-                            defineTopNAggregation(schema, client);\n-                        } catch (BanyanDBException ex) {\n-                            if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n-                                log.info(\""Measure schema {}_{} TopN({}) already created by another OAP node\"",\n-                                    model.getName(),\n-                                    model.getDownsampling(),\n-                                    schema.getTopNSpec());\n-                            } else {\n-                                throw ex;\n-                            }\n-                        }\n+                        defineTopNAggregation(schema, client);\n                     }\n                 }\n             } else {\n@@ -376,20 +365,22 @@ private MetadataCache.EntityMetadata updateSchemaFromServer(MetadataRegistry.Sch\n     }\n \n     private void defineTopNAggregation(MetadataRegistry.Schema schema, BanyanDBClient client) throws BanyanDBException {\n-        if (schema.getTopNSpec() == null) {\n+        if (CollectionUtils.isEmpty(schema.getTopNSpecs())) {\n             if (schema.getMetadata().getKind() == MetadataRegistry.Kind.MEASURE) {\n                 log.debug(\""skip null TopN Schema for [{}]\"", schema.getMetadata().name());\n             }\n             return;\n         }\n-        try {\n-            client.define(schema.getTopNSpec());\n-            log.info(\""installed TopN schema for measure {}\"", schema.getMetadata().name());\n-        } catch (BanyanDBException ex) {\n-            if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n-                log.info(\""TopNAggregation {} already created by another OAP node\"", schema.getTopNSpec());\n-            } else {\n-                throw ex;\n+        for (TopNAggregation topNSpec : schema.getTopNSpecs().values()) {\n+            try {\n+                client.define(topNSpec);\n+                log.info(\""installed TopN schema for measure {}\"", schema.getMetadata().name());\n+            } catch (BanyanDBException ex) {\n+                if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n+                    log.info(\""TopNAggregation {} already created by another OAP node\"", topNSpec);\n+                } else {\n+                    throw ex;\n+                }\n             }\n         }\n     }\n@@ -628,15 +619,16 @@ private void checkIndexRuleBinding(List<IndexRule> indexRules,\n \n     /**\n      * Check if the TopN aggregation exists and update it if necessary.\n-     * If the old TopN aggregation is not in the schema, delete it.\n+     * todo:// can not delete TopN here now.\n      */\n     private void checkTopNAggregation(Model model, BanyanDBClient client) throws BanyanDBException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(model);\n-        String topNName = MetadataRegistry.Schema.formatTopNName(schema.getMetadata().name());\n-        TopNAggregation hisTopNAggregation = client.findTopNAggregation(schema.getMetadata().getGroup(), topNName);\n-\n-        if (schema.getTopNSpec() != null) {\n-            TopNAggregation topNAggregation = schema.getTopNSpec();\n+        if (schema.getTopNSpecs() == null) {\n+            return;\n+        }\n+        for (TopNAggregation topNAggregation : schema.getTopNSpecs().values()) {\n+            String topNName = topNAggregation.getMetadata().getName();\n+            TopNAggregation hisTopNAggregation = client.findTopNAggregation(schema.getMetadata().getGroup(), topNName);\n             if (hisTopNAggregation == null) {\n                 try {\n                     client.define(topNAggregation);\n@@ -662,14 +654,6 @@ private void checkTopNAggregation(Model model, BanyanDBClient client) throws Ban\n                     );\n                 }\n             }\n-        } else {\n-            if (hisTopNAggregation != null) {\n-                client.deleteTopNAggregation(schema.getMetadata().getGroup(), topNName);\n-                log.info(\n-                    \""delete deprecated TopNAggregation: {} from group: {}\"", hisTopNAggregation.getMetadata().getName(),\n-                    schema.getMetadata().getGroup()\n-                );\n-            }\n         }\n     }\n \n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java\nindex ea7944371b57..e4378418832d 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java\n@@ -21,9 +21,13 @@\n import com.google.common.base.Splitter;\n import com.google.common.collect.Iterables;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import lombok.Data;\n import lombok.Getter;\n import lombok.Setter;\n+import org.apache.skywalking.banyandb.model.v1.BanyandbModel;\n import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n \n @Getter\n@@ -42,6 +46,8 @@ public class BanyanDBStorageConfig extends ModuleConfig {\n     private Metadata metadata = new Metadata();\n     private Property property = new Property();\n \n+    private Map<String/*metric name*/, Map<String, TopN>> topNConfigs = new HashMap<>();\n+\n     public String[] getTargetArray() {\n         return Iterables.toArray(\n             Splitter.on(\"",\"").omitEmptyStrings().trimResults().split(this.global.targets), String.class);\n@@ -215,4 +221,54 @@ public static class Metadata extends BanyanDBStorageConfig.GroupResource {\n     @Setter\n     public static class Property extends BanyanDBStorageConfig.GroupResource {\n     }\n+\n+    @Data\n+    public static class TopN {\n+        private String name;\n+        /**\n+         * The size of LRU determines the maximally tolerated time range.\n+         * The buffers in the time range are kept in the memory so that\n+         * the data in [T - lruSize * n, T] would be accepted in the pre-aggregation process.\n+         * T = the current time in the current dimensionality.\n+         * n = interval in the current dimensionality.\n+         * lruSizeMinute defines how many time_buckets are held in the memory for minute-level metrics.\n+         * For example, \""10\"" means data points belonging to the latest \""10\"" time_buckets will be persisted.\n+         */\n+        private int lruSizeMinute = 10;\n+        /**\n+         * lruSizeHourDay defines how many time_buckets are held in the memory for hour and day for minute-level metrics.\n+         * For example, \""2\"" means data points belonging to the latest \""2\"" time_buckets will be persisted.\n+         */\n+        private int lruSizeHourDay = 2;\n+\n+        /**\n+         * counters_number defines max size of entries in a time window for the pre-aggregation.\n+         */\n+        private int countersNumber = 1000;\n+\n+        /**\n+         * groupByTagNames defines the tags to be used for grouping the TopN results.\n+         * If not set, the default is empty, meaning no grouping.\n+         */\n+        private List<String> groupByTagNames;\n+\n+        /**\n+         * sort defines the sorting order of the TopN results.\n+         * Default is \""all\"", which means include `des and asc`.\n+         */\n+        private Sort sort = Sort.all;\n+\n+        public enum Sort {\n+            all(BanyandbModel.Sort.SORT_UNSPECIFIED),\n+            des(BanyandbModel.Sort.SORT_DESC),\n+            asc(BanyandbModel.Sort.SORT_ASC);\n+\n+            @Getter\n+            private final BanyandbModel.Sort banyandbSort;\n+\n+            Sort(final BanyandbModel.Sort sort) {\n+                this.banyandbSort = sort;\n+            }\n+        }\n+    }\n }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\nindex 0d922cfc99c5..513dc3106e66 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\n@@ -18,6 +18,7 @@\n \n package org.apache.skywalking.oap.server.storage.plugin.banyandb;\n \n+import com.google.common.collect.ImmutableSet;\n import com.google.gson.JsonObject;\n import lombok.Builder;\n import lombok.Data;\n@@ -42,7 +43,6 @@\n import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase.TagSpec;\n import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase.TagType;\n import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase.TopNAggregation;\n-import org.apache.skywalking.banyandb.model.v1.BanyandbModel;\n import org.apache.skywalking.banyandb.v1.client.metadata.Duration;\n import org.apache.skywalking.oap.server.core.analysis.DownSampling;\n import org.apache.skywalking.oap.server.core.analysis.metrics.IntList;\n@@ -142,11 +142,12 @@ public MeasureModel registerMeasureModel(Model model, BanyanDBStorageConfig conf\n         MeasureMetadata tagsAndFields = parseTagAndFieldMetadata(model, schemaBuilder, seriesIDColumns, schemaMetadata.group);\n         List<TagFamilySpec> tagFamilySpecs = schemaMetadata.extractTagFamilySpec(tagsAndFields.tags, model.getBanyanDBModelExtension().isStoreIDTag());\n         // iterate over tagFamilySpecs to save tag names\n-        for (final TagFamilySpec tagFamilySpec : tagFamilySpecs) {\n-            for (final TagSpec tagSpec : tagFamilySpec.getTagsList()) {\n-                schemaBuilder.tag(tagSpec.getName());\n-            }\n-        }\n+        Set<String> tags = tagFamilySpecs.stream()\n+                .flatMap(tagFamilySpec -> tagFamilySpec.getTagsList().stream())\n+\n+                .map(TagSpec::getName)\n+                .collect(Collectors.toSet());\n+        schemaBuilder.tags(tags);\n         List<IndexRule> indexRules = tagsAndFields.tags.stream()\n                 .map(TagMetadata::getIndexRule)\n                 .filter(Objects::nonNull)\n@@ -177,8 +178,11 @@ public MeasureModel registerMeasureModel(Model model, BanyanDBStorageConfig conf\n             schemaBuilder.field(field.getName());\n         }\n         // parse TopN\n-        schemaBuilder.topNSpec(parseTopNSpec(model, schemaMetadata.group, schemaMetadata.name()));\n-\n+        schemaBuilder.topNSpecs(parseTopNSpecs(\n+            model, schemaMetadata.group, schemaMetadata.name(),\n+            config.getTopNConfigs().get(model.getName()),\n+            tags\n+        ));\n         registry.put(schemaMetadata.name(), schemaBuilder.build());\n         return new MeasureModel(builder.build(), indexRules);\n     }\n@@ -196,9 +200,12 @@ public PropertyModel registerPropertyModel(Model model, BanyanDBStorageConfig co\n         return new PropertyModel(builder.build());\n     }\n \n-    private TopNAggregation parseTopNSpec(final Model model, final String group, final String measureName)\n-            throws StorageException {\n-        if (model.getBanyanDBModelExtension().getTopN() == null) {\n+    private Map<ImmutableSet<String>, TopNAggregation> parseTopNSpecs(final Model model,\n+                                                                      final String group,\n+                                                                      final String measureName,\n+                                                                      final Map<String, BanyanDBStorageConfig.TopN> topNConfig,\n+                                                                      final Set<String> tags) throws StorageException {\n+        if (topNConfig == null) {\n             return null;\n         }\n \n@@ -207,20 +214,45 @@ private TopNAggregation parseTopNSpec(final Model model, final String group, fin\n             // skip non-single valued metrics\n             return null;\n         }\n+        Map<ImmutableSet<String>, TopNAggregation> topNAggregations = new HashMap<>();\n+        topNConfig.forEach((name, topN) -> {\n+            ImmutableSet<String> key = ImmutableSet.of();\n+            TopNAggregation.Builder topNAggregation = TopNAggregation.newBuilder()\n+                                                                     .setMetadata(\n+                                                                         Metadata.newBuilder().setGroup(group).setName(name))\n+                                                                     .setSourceMeasure(Metadata.newBuilder().setGroup(group).setName(measureName))\n+                                                                     .setFieldValueSort(topN.getSort().getBanyandbSort())\n+                                                                     .setFieldName(valueColumnOpt.get().getValueCName())\n+                                                                     .setCountersNumber(topN.getCountersNumber());\n+            if (topN.getGroupByTagNames() != null) {\n+                key = ImmutableSet.copyOf(topN.getGroupByTagNames());\n+                //check tags\n+                topN.getGroupByTagNames().forEach(tag -> {\n+                    if (!tags.contains(tag)) {\n+                        throw new IllegalArgumentException(\n+                            \""In file [bydb-topn.yml], TopN rule \"" + topN.getName() + \""'s groupByTagName [\"" + tag + \""] is not defined in metric \"" + model.getName());\n+                    }\n+                });\n+                topNAggregation.addAllGroupByTagNames(topN.getGroupByTagNames());\n+            }\n \n-        if (CollectionUtils.isEmpty(model.getBanyanDBModelExtension().getTopN().getGroupByTagNames())) {\n-            throw new StorageException(\""invalid groupBy tags: \"" + model.getBanyanDBModelExtension().getTopN().getGroupByTagNames());\n-        }\n-        return TopNAggregation.newBuilder()\n-                              .setMetadata(\n-                                  Metadata.newBuilder().setGroup(group).setName(Schema.formatTopNName(measureName)))\n-                              .setSourceMeasure(Metadata.newBuilder().setGroup(group).setName(measureName))\n-                              .setFieldValueSort(BanyandbModel.Sort.SORT_UNSPECIFIED) // include both TopN and BottomN\n-                              .setFieldName(valueColumnOpt.get().getValueCName())\n-                              .addAllGroupByTagNames(model.getBanyanDBModelExtension().getTopN().getGroupByTagNames())\n-                              .setCountersNumber(model.getBanyanDBModelExtension().getTopN().getCountersNumber())\n-                              .setLruSize(model.getBanyanDBModelExtension().getTopN().getLruSize())\n-                              .build();\n+            switch (model.getDownsampling()) {\n+                case Minute:\n+                    topNAggregation.setLruSize(topN.getLruSizeMinute());\n+                    break;\n+                case Hour:\n+                case Day:\n+                    topNAggregation.setLruSize(topN.getLruSizeHourDay());\n+                    break;\n+                default:\n+                    throw new UnsupportedOperationException(\""unsupported downsampling: \"" + model.getDownsampling());\n+            }\n+            if (topNAggregations.containsKey(key)) {\n+                throw new IllegalArgumentException(\""In file [bydb-topn.yml], TopN rule \"" + topN.getName() + \""'s groupByTagNames \"" + key + \"" already exist in the same metric \"" + model.getName());\n+            }\n+            topNAggregations.put(key, topNAggregation.build());\n+        });\n+        return topNAggregations;\n     }\n \n     public Schema findMetadata(final Model model) {\n@@ -690,15 +722,11 @@ public static class Schema {\n \n         @Getter\n         @Nullable\n-        private final TopNAggregation topNSpec;\n+        private final Map<ImmutableSet<String>/*groupBy tags*/, TopNAggregation> topNSpecs;\n \n         public ColumnSpec getSpec(String columnName) {\n             return this.specs.get(columnName);\n         }\n-\n-        public static String formatTopNName(String measureName) {\n-            return measureName + \""_topn\"";\n-        }\n     }\n \n     @RequiredArgsConstructor\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java\nindex 2cdb5b158a03..aed0ca700bed 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java\n@@ -19,7 +19,6 @@\n package org.apache.skywalking.oap.server.storage.plugin.banyandb.stream;\n \n import com.google.gson.Gson;\n-import java.util.Objects;\n import javax.annotation.Nullable;\n import org.apache.skywalking.banyandb.model.v1.BanyandbModel;\n import org.apache.skywalking.banyandb.v1.client.AbstractCriteria;\n@@ -145,7 +144,8 @@ protected TopNQueryResponse topNQueryDebuggable(boolean isColdStage,\n                                                     int number,\n                                                     AbstractQuery.Sort sort,\n                                                     List<KeyValue> additionalConditions,\n-                                                    List<AttrCondition> attributes) throws IOException {\n+                                                    List<AttrCondition> attributes,\n+                                                    String topNRuleName) throws IOException {\n         DebuggingTraceContext traceContext = DebuggingTraceContext.TRACE_CONTEXT.get();\n         DebuggingSpan span = null;\n         try {\n@@ -155,6 +155,8 @@ protected TopNQueryResponse topNQueryDebuggable(boolean isColdStage,\n                 builder.append(\""Condition: \"")\n                        .append(\""Schema: \"")\n                        .append(schema)\n+                       .append(\"", TopNRuleName: \"")\n+                       .append(topNRuleName)\n                        .append(\"", TimestampRange: \"")\n                        .append(timestampRange)\n                        .append(\"", Number: \"")\n@@ -169,7 +171,7 @@ protected TopNQueryResponse topNQueryDebuggable(boolean isColdStage,\n                        .append(isColdStage);\n                 span.setMsg(builder.toString());\n             }\n-            TopNQueryResponse response = topNQuery(isColdStage, schema, timestampRange, number, sort, additionalConditions, attributes);\n+            TopNQueryResponse response = topNQuery(isColdStage, schema, timestampRange, number, sort, additionalConditions, attributes, topNRuleName);\n             if (traceContext != null && traceContext.isDumpStorageRsp()) {\n                 builder.append(\""\\n\"").append(\"" Response: \"").append(new Gson().toJson(response.getTopNLists()));\n                 span.setMsg(builder.toString());\n@@ -188,9 +190,10 @@ private TopNQueryResponse topNQuery(boolean isColdStage,\n                                         int number,\n                                         AbstractQuery.Sort sort,\n                                         List<KeyValue> additionalConditions,\n-                                        List<AttrCondition> attributes) throws IOException {\n-        final TopNQuery q = new TopNQuery(List.of(schema.getMetadata().getGroup()), Objects.requireNonNull(\n-            schema.getTopNSpec()).getMetadata().getName(),\n+                                        List<AttrCondition> attributes,\n+                                        String topNRuleName) throws IOException {\n+        final TopNQuery q = new TopNQuery(List.of(schema.getMetadata().getGroup()),\n+                                          topNRuleName,\n                                           timestampRange,\n                                           number, sort);\n         q.setAggregationType(MeasureQuery.Aggregation.Type.MEAN);\n"", ""test_patch"": ""diff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java\nindex fe78339cbe99..d47e265105b5 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java\n@@ -280,7 +280,7 @@ public void testInstall() throws Exception {\n     private static class TestMetric {\n         @Column(name = \""service_id\"")\n         @BanyanDB.SeriesID(index = 0)\n-        @BanyanDB.TopNAggregation\n+        @BanyanDB.ShardingKey(index = 0)\n         private String serviceId;\n         @Column(name = \""tag\"")\n         @BanyanDB.MatchQuery(analyzer = BanyanDB.MatchQuery.AnalyzerType.URL)\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-13259"", ""pr_id"": 13259, ""issue_id"": 13093, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] Support cold metrics query for metrics/traces/logs in BanyanDB storage\n### Search before asking\n\n- [x] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nWith https://github.com/apache/skywalking/issues/12938 is going to be added in 10.2, UI and Query APIs are required to change adaptively. The cold data is long-term-persistent data in low-cost data storage, e.g. SATA, S3. Although BanyanDB API will provide nearly 100% compatible query by following the query time range to determine whether to hit on this kind of data, the reality is, the query will be much slower compared with hot and warm data.\n\nSo, to be reasonable and response time more predictable, we should indicate a query to include this kind of data from UI and API perspectives. \n\nI am proposing two kinds of API @wankai123 @hanahmily \n1. cold-data supported. There are two conditions for this API to return true, <1> BanyanDB storage enabled, <2> BanyanDB enabled `label=cold` feature data node with proper cold data TTL.\n2. Extra flag to indicate this query for metrics/traces/logs should include cold data, we could use the term `Archived historical data` or `Long-term historical data` as the name to this flag.\n\n@Fine0830 For the UI part, we should have a check-box(or some other way) to provide this flag to the end user, and by default, NO query should enable this.\nThe API <1> could determine whether UI shows this flag as other storages(JDBC and Elasticsearch) don't have such a feature.\n\nThe UI style for trace and log queries is easy, we could easily add a check-box to these widgets. \nBut for metrics, the tricky point is, the query is slow. If we add this check-box to the global time-range selector, the dashboard is very hard to load. @Fine0830 You could think about how we should add this, my idea for now is, we just support historical data query in a pop-up box. For the metrics widget, we could add a menu item for it, the user could click that to pop up a query box, and in there, the user could(by the check-box checked) query data from a longer days ago.  \n\n\n### Use case\n\n_No response_\n\n### Related issues\n\n_No response_\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [x] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 444, ""test_files_count"": 5, ""non_test_files_count"": 7, ""pr_changed_files"": ["".github/workflows/skywalking.yaml"", ""docs/en/changes/changes.md"", ""oap-server-bom/pom.xml"", ""oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java"", ""skywalking-ui"", ""test/e2e-v2/cases/storage/banyandb/stages/e2e.yaml"", ""test/e2e-v2/cases/storage/expected/cold/dependency-instance.yml"", ""test/e2e-v2/cases/storage/expected/cold/topN-OP-endpoint.yml"", ""test/e2e-v2/cases/storage/expected/cold/topN-OP-service.yml"", ""test/e2e-v2/java-test-service/trace-mocker/src/main/java/org/apache/skywalking/mock/AgentDataMock.java""], ""pr_changed_test_files"": [""test/e2e-v2/cases/storage/banyandb/stages/e2e.yaml"", ""test/e2e-v2/cases/storage/expected/cold/dependency-instance.yml"", ""test/e2e-v2/cases/storage/expected/cold/topN-OP-endpoint.yml"", ""test/e2e-v2/cases/storage/expected/cold/topN-OP-service.yml"", ""test/e2e-v2/java-test-service/trace-mocker/src/main/java/org/apache/skywalking/mock/AgentDataMock.java""], ""base_commit"": ""5622cb9f71a30fbe25af2b3c8782a8615df6e029"", ""head_commit"": ""94b46f4aac7abe200074a34e9d629d9035d1a60e"", ""repo_url"": ""https://github.com/apache/skywalking/pull/13259"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/13259"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-22T12:36:47.000Z"", ""patch"": ""diff --git a/.github/workflows/skywalking.yaml b/.github/workflows/skywalking.yaml\nindex 1bde7c328a28..4cc6fc8448f5 100644\n--- a/.github/workflows/skywalking.yaml\n+++ b/.github/workflows/skywalking.yaml\n@@ -1021,7 +1021,7 @@ jobs:\n             # check if segment files exist\n             if docker exec $CONTAINER_ID sh -c '[ -n \""$(ls /tmp/measure-data/measure/data/day/seg* 2>/dev/null)\"" ]'; then\n               echo \""\u2705 found segment files\""\n-              sleep 30\n+              sleep 180\n               # create and copy files\n               docker cp $CONTAINER_ID:/tmp ${BANYANDB_DATA_GENERATE_ROOT}\n               docker cp $CONTAINER_ID:/tmp/measure-data/measure/data/index ${BANYANDB_DATA_GENERATE_ROOT}\n\ndiff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 920a7a99e13a..09a199d4aab2 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -26,6 +26,7 @@\n * Enhance the trace `List/Tree/Table` graph to support displaying multiple refs of spans and distinguishing different parents.\n * Fix: correct the same labels for metrics.\n * Refactor: use the Fetch API to instead of Axios.\n+* Support cold stage data for metrics, trace and log.\n \n #### Documentation\n \n\ndiff --git a/oap-server-bom/pom.xml b/oap-server-bom/pom.xml\nindex efb2d8fa2fc5..fc1ea0f65517 100644\n--- a/oap-server-bom/pom.xml\n+++ b/oap-server-bom/pom.xml\n@@ -72,7 +72,7 @@\n         <httpcore.version>4.4.16</httpcore.version>\n         <httpasyncclient.version>4.1.5</httpasyncclient.version>\n         <commons-compress.version>1.21</commons-compress.version>\n-        <banyandb-java-client.version>0.9.0-rc0</banyandb-java-client.version>\n+        <banyandb-java-client.version>0.9.0-rc2</banyandb-java-client.version>\n         <kafka-clients.version>3.4.0</kafka-clients.version>\n         <spring-kafka-test.version>2.4.6.RELEASE</spring-kafka-test.version>\n         <consul.client.version>1.5.3</consul.client.version>\n\ndiff --git a/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java b/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java\nindex 203ede81054b..e97594be0318 100644\n--- a/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java\n+++ b/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java\n@@ -511,7 +511,7 @@ public HttpResponse query_range(\n     @Get\n     @Post\n     @Path(\""/api/v1/format_query\"")\n-    public HttpResponse query_range(@Param(\""query\"") String query) throws IOException {\n+    public HttpResponse format_query(@Param(\""query\"") String query) throws IOException {\n         QueryFormatRsp rsp = new QueryFormatRsp();\n         rsp.setData(query.replaceAll(\""\\\\s\"", \""\""));\n         return jsonResponse(rsp);\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java\nindex 008bced45afa..0fd25a9fa888 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java\n@@ -78,7 +78,6 @@ public List<SelectedRecord> sortMetrics(TopNCondition condition, String valueCol\n         return directMetricsTopN(isColdStage, condition, schema, valueColumnName, spec, getTimestampRange(duration), additionalConditions);\n     }\n \n-    //todo: query cold stage\n     List<SelectedRecord> serverSideTopN(boolean isColdStage, TopNCondition condition, MetadataRegistry.Schema schema, MetadataRegistry.ColumnSpec valueColumnSpec,\n                                         TimestampRange timestampRange, List<KeyValue> additionalConditions) throws IOException {\n         TopNQueryResponse resp = null;\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java\nindex 6be527421ebc..2cdb5b158a03 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java\n@@ -139,22 +139,6 @@ protected StreamQueryResponse queryDebuggable(boolean isColdStage,\n         }\n     }\n \n-    protected TopNQueryResponse topN(MetadataRegistry.Schema schema,\n-                                     TimestampRange timestampRange,\n-                                     int number,\n-                                     List<KeyValue> additionalConditions,\n-                                     List<AttrCondition> attributes) throws IOException {\n-        return topNQuery(schema, timestampRange, number, AbstractQuery.Sort.DESC, additionalConditions, attributes);\n-    }\n-\n-    protected TopNQueryResponse bottomN(MetadataRegistry.Schema schema,\n-                                        TimestampRange timestampRange,\n-                                        int number,\n-                                        List<KeyValue> additionalConditions,\n-                                        List<AttrCondition> attributes) throws IOException {\n-        return topNQuery(schema, timestampRange, number, AbstractQuery.Sort.ASC, additionalConditions, attributes);\n-    }\n-\n     protected TopNQueryResponse topNQueryDebuggable(boolean isColdStage,\n                                                     MetadataRegistry.Schema schema,\n                                                     TimestampRange timestampRange,\n@@ -185,7 +169,7 @@ protected TopNQueryResponse topNQueryDebuggable(boolean isColdStage,\n                        .append(isColdStage);\n                 span.setMsg(builder.toString());\n             }\n-            TopNQueryResponse response = topNQuery(schema, timestampRange, number, sort, additionalConditions, attributes);\n+            TopNQueryResponse response = topNQuery(isColdStage, schema, timestampRange, number, sort, additionalConditions, attributes);\n             if (traceContext != null && traceContext.isDumpStorageRsp()) {\n                 builder.append(\""\\n\"").append(\"" Response: \"").append(new Gson().toJson(response.getTopNLists()));\n                 span.setMsg(builder.toString());\n@@ -198,7 +182,8 @@ protected TopNQueryResponse topNQueryDebuggable(boolean isColdStage,\n         }\n     }\n \n-    private TopNQueryResponse topNQuery(MetadataRegistry.Schema schema,\n+    private TopNQueryResponse topNQuery(boolean isColdStage,\n+                                        MetadataRegistry.Schema schema,\n                                         TimestampRange timestampRange,\n                                         int number,\n                                         AbstractQuery.Sort sort,\n@@ -225,6 +210,9 @@ private TopNQueryResponse topNQuery(MetadataRegistry.Schema schema,\n             });\n         }\n         q.setConditions(conditions);\n+        if (isColdStage) {\n+            q.setStages(List.of(BanyanDBStorageConfig.StageName.cold.name()));\n+        }\n \n         return getClient().query(q);\n     }\n\ndiff --git a/skywalking-ui b/skywalking-ui\nindex 5e6e5aa73797..a28972bc5cef 160000\n--- a/skywalking-ui\n+++ b/skywalking-ui\n@@ -1 +1 @@\n-Subproject commit 5e6e5aa737979bc82846b555f6ea2e57689af088\n+Subproject commit a28972bc5cefc09ada594b514bee4f3bfc156655\n"", ""test_patch"": ""diff --git a/test/e2e-v2/cases/storage/banyandb/stages/e2e.yaml b/test/e2e-v2/cases/storage/banyandb/stages/e2e.yaml\nindex d02da95cc7cd..0e223372fbc6 100644\n--- a/test/e2e-v2/cases/storage/banyandb/stages/e2e.yaml\n+++ b/test/e2e-v2/cases/storage/banyandb/stages/e2e.yaml\n@@ -69,3 +69,8 @@ verify:\n             | yq e '.traces | select(.[].endpointnames[0]==\""/dubbox-case/case/dubbox-rest/404-test\"") | .[2].traceids[0]' -\n         ) --start=\""-96h\"" --end=\""-48h\"" --cold=true\n       expected: ../../expected/cold/trace-detail.yml\n+    ## topN\n+    - query: swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql metrics exec --expression=\""top_n(service_resp_time,3,des,attr0='GENERAL')\"" --start=\""-96h\"" --end=\""-48h\"" --cold=true --step=DAY\n+      expected: ../../expected/cold/topN-OP-service.yml\n+    - query: swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql metrics exec --expression=\""top_n(endpoint_resp_time,3,des)\"" --start=\""-96h\"" --end=\""-48h\"" --cold=true --step=DAY\n+      expected: ../../expected/cold/topN-OP-endpoint.yml\n\\ No newline at end of file\n\ndiff --git a/test/e2e-v2/cases/storage/expected/cold/dependency-instance.yml b/test/e2e-v2/cases/storage/expected/cold/dependency-instance.yml\nindex 90d583f3a292..7792498d7f44 100644\n--- a/test/e2e-v2/cases/storage/expected/cold/dependency-instance.yml\n+++ b/test/e2e-v2/cases/storage/expected/cold/dependency-instance.yml\n@@ -37,5 +37,6 @@ calls:\n   targetcomponents: []\n   id: {{ b64enc \""mock_a_service\"" }}.1_{{ b64enc \""mock_a_service_instance\"" }}-{{ b64enc \""mock_b_service\"" }}.1_{{ b64enc \""mock_b_service_instance\"" }}\n   detectpoints:\n+    - CLIENT\n     - SERVER\n {{- end }}\n\ndiff --git a/test/e2e-v2/cases/storage/expected/cold/topN-OP-endpoint.yml b/test/e2e-v2/cases/storage/expected/cold/topN-OP-endpoint.yml\nnew file mode 100644\nindex 000000000000..c2bca184763a\n--- /dev/null\n+++ b/test/e2e-v2/cases/storage/expected/cold/topN-OP-endpoint.yml\n@@ -0,0 +1,58 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \""License\""); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \""AS IS\"" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+debuggingtrace: null\n+type: SORTED_LIST\n+results:\n+  - metric:\n+      labels: []\n+    values:\n+      - id: \""mock_a_service - /dubbox-case/case/dubbox-rest/404-test\""\n+        value: \""{{ (index (index .results 0).values 0).value }}\""\n+        traceid: null\n+        owner:\n+          scope: Endpoint\n+          serviceid: {{ b64enc \""mock_a_service\""}}.1\n+          servicename: mock_a_service\n+          normal: true\n+          serviceinstanceid: null\n+          serviceinstancename: null\n+          endpointid: {{ b64enc \""mock_a_service\"" }}.1_{{ b64enc \""/dubbox-case/case/dubbox-rest/404-test\"" }}\n+          endpointname: /dubbox-case/case/dubbox-rest/404-test\n+      - id: \""mock_b_service - org.skywaking.apm.testcase.dubbo.services.GreetServiceImpl.doBusiness()\""\n+        value: \""{{ (index (index .results 0).values 1).value }}\""\n+        traceid: null\n+        owner:\n+          scope: Endpoint\n+          serviceid: {{ b64enc \""mock_b_service\"" }}.1\n+          servicename: mock_b_service\n+          normal: true\n+          serviceinstanceid: null\n+          serviceinstancename: null\n+          endpointid: {{ b64enc \""mock_b_service\"" }}.1_{{ b64enc \""org.skywaking.apm.testcase.dubbo.services.GreetServiceImpl.doBusiness()\"" }}\n+          endpointname: org.skywaking.apm.testcase.dubbo.services.GreetServiceImpl.doBusiness()\n+      - id: \""mock_c_service - org.apache.skywalking.RocketMQ\""\n+        value: \""{{ (index (index .results 0).values 2).value }}\""\n+        traceid: null\n+        owner:\n+          scope: Endpoint\n+          serviceid: {{ b64enc \""mock_c_service\"" }}.1\n+          servicename: mock_c_service\n+          normal: true\n+          serviceinstanceid: null\n+          serviceinstancename: null\n+          endpointid: {{ b64enc \""mock_c_service\"" }}.1_{{ b64enc \""org.apache.skywalking.RocketMQ\"" }}\n+          endpointname: org.apache.skywalking.RocketMQ\n+error: null\n\ndiff --git a/test/e2e-v2/cases/storage/expected/cold/topN-OP-service.yml b/test/e2e-v2/cases/storage/expected/cold/topN-OP-service.yml\nnew file mode 100644\nindex 000000000000..6f9f0786ce2e\n--- /dev/null\n+++ b/test/e2e-v2/cases/storage/expected/cold/topN-OP-service.yml\n@@ -0,0 +1,58 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \""License\""); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \""AS IS\"" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+debuggingtrace: null\n+type: SORTED_LIST\n+results:\n+  - metric:\n+      labels: []\n+    values:\n+      - id: mock_a_service\n+        value: \""{{ (index (index .results 0).values 0).value }}\""\n+        traceid: null\n+        owner:\n+          scope: Service\n+          serviceid: {{ b64enc \""mock_a_service\""}}.1\n+          servicename: mock_a_service\n+          normal: true\n+          serviceinstanceid: null\n+          serviceinstancename: null\n+          endpointid: null\n+          endpointname: null\n+      - id: mock_b_service\n+        value: \""{{ (index (index .results 0).values 1).value }}\""\n+        traceid: null\n+        owner:\n+          scope: Service\n+          serviceid: {{ b64enc \""mock_b_service\""}}.1\n+          servicename: mock_b_service\n+          normal: true\n+          serviceinstanceid: null\n+          serviceinstancename: null\n+          endpointid: null\n+          endpointname: null\n+      - id: mock_c_service\n+        value: \""{{ (index (index .results 0).values 2).value }}\""\n+        traceid: null\n+        owner:\n+          scope: Service\n+          serviceid: {{ b64enc \""mock_c_service\"" }}.1\n+          servicename: mock_c_service\n+          normal: true\n+          serviceinstanceid: null\n+          serviceinstancename: null\n+          endpointid: null\n+          endpointname: null\n+error: null\n\ndiff --git a/test/e2e-v2/java-test-service/trace-mocker/src/main/java/org/apache/skywalking/mock/AgentDataMock.java b/test/e2e-v2/java-test-service/trace-mocker/src/main/java/org/apache/skywalking/mock/AgentDataMock.java\nindex 645ee6e1c47e..3be0d8064079 100644\n--- a/test/e2e-v2/java-test-service/trace-mocker/src/main/java/org/apache/skywalking/mock/AgentDataMock.java\n+++ b/test/e2e-v2/java-test-service/trace-mocker/src/main/java/org/apache/skywalking/mock/AgentDataMock.java\n@@ -73,6 +73,7 @@ public static void main(String[] args) throws InterruptedException {\n                 streamObserver, traceId, serviceBSegmentId, serviceASegmentId, startTimestamp);\n             serviceCMock.mock(\n                 streamObserver, traceId, serviceCSegmentId, serviceBSegmentId, startTimestamp);\n+            TimeUnit.SECONDS.sleep(30);\n         }\n \n         streamObserver.onCompleted();\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-13211"", ""pr_id"": 13211, ""issue_id"": 13093, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] Support cold metrics query for metrics/traces/logs in BanyanDB storage\n### Search before asking\n\n- [x] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nWith https://github.com/apache/skywalking/issues/12938 is going to be added in 10.2, UI and Query APIs are required to change adaptively. The cold data is long-term-persistent data in low-cost data storage, e.g. SATA, S3. Although BanyanDB API will provide nearly 100% compatible query by following the query time range to determine whether to hit on this kind of data, the reality is, the query will be much slower compared with hot and warm data.\n\nSo, to be reasonable and response time more predictable, we should indicate a query to include this kind of data from UI and API perspectives. \n\nI am proposing two kinds of API @wankai123 @hanahmily \n1. cold-data supported. There are two conditions for this API to return true, <1> BanyanDB storage enabled, <2> BanyanDB enabled `label=cold` feature data node with proper cold data TTL.\n2. Extra flag to indicate this query for metrics/traces/logs should include cold data, we could use the term `Archived historical data` or `Long-term historical data` as the name to this flag.\n\n@Fine0830 For the UI part, we should have a check-box(or some other way) to provide this flag to the end user, and by default, NO query should enable this.\nThe API <1> could determine whether UI shows this flag as other storages(JDBC and Elasticsearch) don't have such a feature.\n\nThe UI style for trace and log queries is easy, we could easily add a check-box to these widgets. \nBut for metrics, the tricky point is, the query is slow. If we add this check-box to the global time-range selector, the dashboard is very hard to load. @Fine0830 You could think about how we should add this, my idea for now is, we just support historical data query in a pop-up box. For the metrics widget, we could add a menu item for it, the user could click that to pop up a query box, and in there, the user could(by the check-box checked) query data from a longer days ago.  \n\n\n### Use case\n\n_No response_\n\n### Related issues\n\n_No response_\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [x] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 444, ""test_files_count"": 3, ""non_test_files_count"": 49, ""pr_changed_files"": [""docs/en/api/query-protocol.md"", ""docs/en/changes/changes.md"", ""docs/en/debugging/query-tracing.md"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskQueryService.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TraceQueryService.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/Duration.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ISpanAttachedEventQueryDAO.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ITraceQueryDAO.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IZipkinQueryDAO.java"", ""oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetadataQueryV2.java"", ""oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TraceQuery.java"", ""oap-server/server-query-plugin/query-graphql-plugin/src/main/resources/query-protocol"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java"", ""oap-server/server-query-plugin/zipkin-query-plugin/src/main/java/org/apache/skywalking/oap/query/zipkin/handler/ZipkinQueryHandler.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBRecordsQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBZipkinQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEBPFProfilingScheduleQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEventQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBHierarchyQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBNetworkAddressAliasDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBServiceLabelDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBTagAutocompleteQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBTopologyQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAlarmQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAsyncProfilerTaskLogQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAsyncProfilerTaskQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBBrowserLogQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBEBPFProfilingDataDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBEBPFProfilingTaskDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBJFRDataQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBLogQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileTaskLogQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileTaskQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileThreadSnapshotQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBSpanAttachedEventQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBTraceQueryDAO.java"", ""oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/SpanAttachedEventEsDAO.java"", ""oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java"", ""oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/zipkin/ZipkinQueryEsDAO.java"", ""oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCSpanAttachedEventQueryDAO.java"", ""oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCTraceQueryDAO.java"", ""oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCZipkinQueryDAO.java"", ""oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java"", ""oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/ProfileTraceDAO.java"", ""oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/SpanAttachedEventQueryDAO.java"", ""test/e2e-v2/script/env""], ""pr_changed_test_files"": [""oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/ProfileTraceDAO.java"", ""oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/SpanAttachedEventQueryDAO.java"", ""test/e2e-v2/script/env""], ""base_commit"": ""c63fe21e75c7b898564add0035c220d9b242f7d2"", ""head_commit"": ""f2cd9278211cb9e2c23e546ac5935e29ef10bd3f"", ""repo_url"": ""https://github.com/apache/skywalking/pull/13211"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/13211"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-25T09:24:02.000Z"", ""patch"": ""diff --git a/docs/en/api/query-protocol.md b/docs/en/api/query-protocol.md\nindex 00edb391799f..3ca351a58fa4 100644\n--- a/docs/en/api/query-protocol.md\n+++ b/docs/en/api/query-protocol.md\n@@ -48,6 +48,10 @@ extend type Query {\n     estimateProcessScale(serviceId: ID!, labels: [String!]!): Long!\n \n     getTimeInfo: TimeInfo\n+    # Get the TTL info of records\n+    getRecordsTTL: RecordsTTL\n+    # Get the TTL info of metrics\n+    getMetricsTTL: MetricsTTL\n }\n ```\n \n@@ -156,6 +160,8 @@ extend type Query {\n     queryBasicTraces(condition: TraceQueryCondition, debug: Boolean): TraceBrief\n     # Read the specific trace ID with given trace ID\n     queryTrace(traceId: ID!, debug: Boolean): Trace\n+    # Only for BanyanDB, can be used to query the trace in the cold stage.\n+    queryTraceFromColdStage(traceId: ID!, duration: Duration!, debug: Boolean): Trace\n     # Read the list of searchable keys\n     queryTraceTagAutocompleteKeys(duration: Duration!):[String!]\n     # Search the available value options of the given key.\n@@ -305,6 +311,8 @@ input Duration {\n     start: String!\n     end: String!\n     step: Step!\n+    # Only for BanyanDB, the flag to query from cold stage, default is false.\n+    coldStage: Boolean\n }\n \n enum Step {\n\ndiff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 26d23d7046bc..baf6d20d4b9f 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -8,11 +8,12 @@\n \n * BanyanDB: Support `hot/warm/cold` stages configuration.\n * Fix query continues profiling policies error when the policy is already in the cache.\n-* Support `hot/warm/cold` stages TTL query in the status API.\n+* Support `hot/warm/cold` stages TTL query in the status API and graphQL API.\n * PromQL Service: traffic query support `limit` and regex match.\n * Fix an edge case of HashCodeSelector(Integer#MIN_VALUE causes ArrayIndexOutOfBoundsException).\n * Support Flink monitoring.\n * BanyanDB: Support `@ShardingKey` for Measure tags and set to TopNAggregation group tag by default.\n+* BanyanDB: Support cold stage data query for metrics/traces/logs.\n \n #### UI\n \n\ndiff --git a/docs/en/debugging/query-tracing.md b/docs/en/debugging/query-tracing.md\nindex 300e9fb6746b..cd824e9242d5 100644\n--- a/docs/en/debugging/query-tracing.md\n+++ b/docs/en/debugging/query-tracing.md\n@@ -41,7 +41,8 @@ which could be accessed through HTTP GET `http://{core restHost}:{core restPort}\n | expression          | The MQE query expression                                                    | Yes                |               \n | startTime           | The start time of the query                                                 | Yes                |               \n | endTime             | The end time of the query                                                   | Yes                |               \n-| step                | The query step                                                              | Yes                |               \n+| step                | The query step                                                              | Yes                |  \n+| coldStage           | Only for BanyanDB, the flag to query from cold stage, default is false.     | No                 |  \n | service             | The service name                                                            | Yes                |               \n | serviceLayer        | The service layer name                                                      | Yes                |               \n | serviceInstance     | The service instance name                                                   | No                 |               \n@@ -182,22 +183,23 @@ childSpans:\n - URL: HTTP GET `http://{core restHost}:{core restPort}/debugging/query/queryBasicTraces?{parameters}`.\n - Parameters\n \n-  | Field             | Description                                                   | Required           |\n-  |-------------------|---------------------------------------------------------------|--------------------|\n-  | startTime         | The start time of the query                                   | Yes                |               \n-  | endTime           | The end time of the query                                     | Yes                |               \n-  | step              | The query step                                                | Yes                |               \n-  | service           | The service name                                              | Yes                |               \n-  | serviceLayer      | The service layer name                                        | Yes                |               \n-  | serviceInstance   | The service instance name                                     | No                 |               \n-  | endpoint          | The endpoint name                                             | No                 |               \n-  | minTraceDuration  | The minimum duration of the trace                             | No                 |               \n-  | maxTraceDuration  | The maximum duration of the trace                             | No                 |               \n-  | traceState        | The state of the trace, `ALL`, `SUCCESS`, `ERROR`             | Yes                |               \n-  | queryOrder        | The order of the query result, `BY_START_TIME`, `BY_DURATION` | Yes                |               \n-  | tags              | The tags of the trace, `key1=value1,key2=value2`              | No                 |  \n-  | pageNum           | The page number of the query result                           | Yes                |\n-  | pageSize          | The page size of the query result                             | Yes                |\n+  | Field              | Description                                                               | Required |\n+  |--------------------|---------------------------------------------------------------------------|----------|\n+  | startTime          | The start time of the query                                               | Yes      |               \n+  | endTime            | The end time of the query                                                 | Yes      |               \n+  | step               | The query step                                                            | Yes      |  \n+  | coldStage          | Only for BanyanDB, the flag to query from cold stage, default is false.   | No       | \n+  | service            | The service name                                                          | Yes      |               \n+  | serviceLayer       | The service layer name                                                    | Yes      |               \n+  | serviceInstance    | The service instance name                                                 | No       |               \n+  | endpoint           | The endpoint name                                                         | No       |               \n+  | minTraceDuration   | The minimum duration of the trace                                         | No       |               \n+  | maxTraceDuration   | The maximum duration of the trace                                         | No       |               \n+  | traceState         | The state of the trace, `ALL`, `SUCCESS`, `ERROR`                         | Yes      |               \n+  | queryOrder         | The order of the query result, `BY_START_TIME`, `BY_DURATION`             | Yes      |               \n+  | tags               | The tags of the trace, `key1=value1,key2=value2`                          | No       |  \n+  | pageNum            | The page number of the query result                                       | Yes      |\n+  | pageSize           | The page size of the query result                                         | Yes      |\n \n The time and step parameters are follow the [Duration](../api/query-protocol.md#duration) format.\n \n@@ -236,6 +238,19 @@ debuggingTrace:\n ...\n ```\n \n+#### Tracing SkyWalking API queryTraceFromColdStage\n+Only for BanyanDB, can be used to query the trace in the cold stage.\n+\n+- URL: HTTP GET `http://{core restHost}:{core restPort}/debugging/query/trace/queryTraceFromColdStage?{parameters}`.\n+- Parameters\n+\n+  | Field           | Description                      | Required        |\n+  |-----------------|----------------------------------|-----------------|\n+  | traceId         | The ID of the trace              | Yes             |\n+  | startTime       | The start time of the query      | Yes             |               \n+  | endTime         | The end time of the query        | Yes             |               \n+  | step            | The query step                   | Yes             |\n+\n ### Tracing Zipkin Trace Query\n \n #### Tracing Zipkin API /api/v2/traces\n@@ -299,12 +314,13 @@ debuggingTrace:\n - URL: HTTP GET `http://{core restHost}:{core restPort}/debugging/query/topology/getGlobalTopology?{parameters}`.\n - Parameters\n \n-  | Field             | Description                                                   | Required |\n-  |-------------------|---------------------------------------------------------------|----------|\n-  | startTime         | The start time of the query                                   | Yes      |               \n-  | endTime           | The end time of the query                                     | Yes      |               \n-  | step              | The query step                                                | Yes      |               \n-  | serviceLayer      | The service layer name                                        | No       |\n+  | Field         | Description                                                             | Required |\n+  |---------------|-------------------------------------------------------------------------|----------|\n+  | startTime     | The start time of the query                                             | Yes      |               \n+  | endTime       | The end time of the query                                               | Yes      |               \n+  | step          | The query step                                                          | Yes      | \n+  | coldStage     | Only for BanyanDB, the flag to query from cold stage, default is false. | No       | \n+  | serviceLayer  | The service layer name                                                  | No       |\n \n - Example\n ```shell\n@@ -326,13 +342,14 @@ debuggingTrace:\n - URL: HTTP GET `http://{core restHost}:{core restPort}/debugging/query/topology/getServicesTopology?{parameters}`.\n - Parameters\n \n-  | Field        | Description                                                                 | Required |\n-  |--------------|-----------------------------------------------------------------------------|----------|\n-  | startTime    | The start time of the query                                                 | Yes      |               \n-  | endTime      | The end time of the query                                                   | Yes      |               \n-  | step         | The query step                                                              | Yes      |               \n-  | serviceLayer | The service layer name                                                      | Yes      |\n-  | services     | The services names list, separate by comma `mock_a_service, mock_b_service` | Yes      |\n+  | Field         | Description                                                                 | Required |\n+  |---------------|-----------------------------------------------------------------------------|----------|\n+  | startTime     | The start time of the query                                                 | Yes      |               \n+  | endTime       | The end time of the query                                                   | Yes      |               \n+  | step          | The query step                                                              | Yes      |\n+  | coldStage     | Only for BanyanDB, the flag to query from cold stage, default is false.     | No       | \n+  | serviceLayer  | The service layer name                                                      | Yes      |\n+  | services      | The services names list, separate by comma `mock_a_service, mock_b_service` | Yes      |\n \n - Example\n ```shell\n@@ -354,15 +371,16 @@ debuggingTrace:\n - URL: HTTP GET `http://{core restHost}:{core restPort}/debugging/query/topology/getServiceInstanceTopology?{parameters}`.\n - Parameters\n \n-  | Field              | Description                        | Required |\n-  |--------------------|------------------------------------|----------|\n-  | startTime          | The start time of the query        | Yes      |               \n-  | endTime            | The end time of the query          | Yes      |               \n-  | step               | The query step                     | Yes      |               \n-  | clientService      | The client side service name       | Yes      |\n-  | serverService      | The server side service name       | Yes      |\n-  | clientServiceLayer | The client side service layer name | Yes      |\n-  | serverServiceLayer | The server side service layer name | Yes      |\n+  | Field              | Description                                                             | Required |\n+  |--------------------|-------------------------------------------------------------------------|----------|\n+  | startTime          | The start time of the query                                             | Yes      |               \n+  | endTime            | The end time of the query                                               | Yes      |               \n+  | step               | The query step                                                          | Yes      |  \n+  | coldStage          | Only for BanyanDB, the flag to query from cold stage, default is false. | No       | \n+  | clientService      | The client side service name                                            | Yes      |\n+  | serverService      | The server side service name                                            | Yes      |\n+  | clientServiceLayer | The client side service layer name                                      | Yes      |\n+  | serverServiceLayer | The server side service layer name                                      | Yes      |\n \n - Example\n ```shell\n@@ -384,14 +402,15 @@ debuggingTrace:\n - URL: HTTP GET `http://{core restHost}:{core restPort}/debugging/query/topology/getEndpointDependencies?{parameters}`.\n - Parameters\n \n-  | Field        | Description                                                                 | Required |\n-  |--------------|-----------------------------------------------------------------------------|----------|\n-  | startTime    | The start time of the query                                                 | Yes      |               \n-  | endTime      | The end time of the query                                                   | Yes      |               \n-  | step         | The query step                                                              | Yes      |   \n-  | service      | The service name                                                            | Yes      |\n-  | serviceLayer | The service layer name                                                      | Yes      |\n-  | endpoint     | The endpoint name                                                           | Yes      |\n+  | Field          | Description                                                             | Required |\n+  |----------------|-------------------------------------------------------------------------|----------|\n+  | startTime      | The start time of the query                                             | Yes      |               \n+  | endTime        | The end time of the query                                               | Yes      |               \n+  | step           | The query step                                                          | Yes      |  \n+  | coldStage      | Only for BanyanDB, the flag to query from cold stage, default is false. | No       | \n+  | service        | The service name                                                        | Yes      |\n+  | serviceLayer   | The service layer name                                                  | Yes      |\n+  | endpoint       | The endpoint name                                                       | Yes      |\n \n - Example\n - Example\n@@ -414,14 +433,15 @@ debuggingTrace:\n - URL: HTTP GET `http://{core restHost}:{core restPort}/debugging/query/topology/getProcessTopology?{parameters}`.\n - Parameters\n \n-  | Field         | Description                                                                 | Required |\n-  |---------------|-----------------------------------------------------------------------------|----------|\n-  | startTime     | The start time of the query                                                 | Yes      |               \n-  | endTime       | The end time of the query                                                   | Yes      |               \n-  | step          | The query step                                                              | Yes      |   \n-  | service       | The service name                                                            | Yes      |\n-  | serviceLayer  | The service layer name                                                      | Yes      |\n-  | instance      | The instance name                                                           | Yes      |\n+  | Field        | Description                                                             | Required |\n+  |--------------|-------------------------------------------------------------------------|----------|\n+  | startTime    | The start time of the query                                             | Yes      |               \n+  | endTime      | The end time of the query                                               | Yes      |               \n+  | step         | The query step                                                          | Yes      | \n+  | coldStage    | Only for BanyanDB, the flag to query from cold stage, default is false. | No       | \n+  | service      | The service name                                                        | Yes      |\n+  | serviceLayer | The service layer name                                                  | Yes      |\n+  | instance     | The instance name                                                       | Yes      |\n \n - Example\n ```shell\n@@ -445,24 +465,25 @@ debuggingTrace:\n  URL: HTTP GET `http://{core restHost}:{core restPort}/debugging/query/log/queryLogs?{parameters}`.\n  Parameters\n \n-  | Field                      | Description                                                    | Required                       |\n-  |----------------------------|----------------------------------------------------------------|--------------------------------|\n-  | startTime                  | The start time of the query                                    | Yes, unless traceId not empty  |               \n-  | endTime                    | The end time of the query                                      | Yes, unless traceId not empty  |               \n-  | step                       | The query step                                                 | Yes, unless traceId not empty  |  \n-  | service                    | The service name                                               | No, require serviceLayer       |               \n-  | serviceLayer               | The service layer name                                         | No                             |  \n-  | serviceInstance            | The service instance name                                      | No, require service            |               \n-  | endpoint                   | The endpoint name                                              | No, require service            |               \n-  | traceId                    | The trace ID                                                   | No                             |               \n-  | segmentId                  | The segment ID                                                 | No, require traceId            |\n-  | spanId                     | The span ID                                                    | No, require traceId            | \n-  | queryOrder                 | The order of the query result, `ASC`, `DES`                    | No, default `DES`              |               \n-  | tags                       | The tags of the trace, `key1=value1,key2=value2`               | No                             |  \n-  | pageNum                    | The page number of the query result                            | Yes                            |\n-  | pageSize                   | The page size of the query result                              | Yes                            |\n-  | keywordsOfContent          | The keywords of the log content, `keyword1,keyword2`           | No                             |\n-  | excludingKeywordsOfContent | The excluding keywords of the log content, `keyword1,keyword2` | No                             |\n+  | Field                      | Description                                                             | Required                      |\n+  |----------------------------|-------------------------------------------------------------------------|-------------------------------|\n+  | startTime                  | The start time of the query                                             | Yes, unless traceId not empty |               \n+  | endTime                    | The end time of the query                                               | Yes, unless traceId not empty |               \n+  | step                       | The query step                                                          | Yes, unless traceId not empty | \n+  | coldStage                  | Only for BanyanDB, the flag to query from cold stage, default is false. | No                            | \n+  | service                    | The service name                                                        | No, require serviceLayer      |               \n+  | serviceLayer               | The service layer name                                                  | No                            |  \n+  | serviceInstance            | The service instance name                                               | No, require service           |               \n+  | endpoint                   | The endpoint name                                                       | No, require service           |               \n+  | traceId                    | The trace ID                                                            | No                            |               \n+  | segmentId                  | The segment ID                                                          | No, require traceId           |\n+  | spanId                     | The span ID                                                             | No, require traceId           | \n+  | queryOrder                 | The order of the query result, `ASC`, `DES`                             | No, default `DES`             |               \n+  | tags                       | The tags of the trace, `key1=value1,key2=value2`                        | No                            |  \n+  | pageNum                    | The page number of the query result                                     | Yes                           |\n+  | pageSize                   | The page size of the query result                                       | Yes                           |\n+  | keywordsOfContent          | The keywords of the log content, `keyword1,keyword2`                    | No                            |\n+  | excludingKeywordsOfContent | The excluding keywords of the log content, `keyword1,keyword2`          | No                            |\n \n - Example\n ```shell\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskQueryService.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskQueryService.java\nindex df8065a07b65..c12e89c43b51 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskQueryService.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskQueryService.java\n@@ -188,13 +188,13 @@ public ProfileAnalyzation getProfileAnalyze(final List<SegmentProfileAnalyzeQuer\n \n     public List<SegmentRecord> getTaskSegments(String taskId) throws IOException {\n         final List<String> profiledSegmentIdList = getProfileThreadSnapshotQueryDAO().queryProfiledSegmentIdList(taskId);\n-        return getTraceQueryDAO().queryBySegmentIdList(profiledSegmentIdList);\n+        return getTraceQueryDAO().queryBySegmentIdList(profiledSegmentIdList, null);\n     }\n \n     public List<ProfiledTraceSegments> getProfileTaskSegments(String taskId) throws IOException {\n         // query all profiled segments\n         final List<String> profiledSegmentIdList = getProfileThreadSnapshotQueryDAO().queryProfiledSegmentIdList(taskId);\n-        final List<SegmentRecord> segmentRecords = getTraceQueryDAO().queryBySegmentIdList(profiledSegmentIdList);\n+        final List<SegmentRecord> segmentRecords = getTraceQueryDAO().queryBySegmentIdList(profiledSegmentIdList, null);\n         if (CollectionUtils.isEmpty(segmentRecords)) {\n             return Collections.emptyList();\n         }\n@@ -215,7 +215,7 @@ public List<ProfiledTraceSegments> getProfileTaskSegments(String taskId) throws\n         }\n         final List<SegmentRecord> traceRelatedSegments = getTraceQueryDAO().queryByTraceIdWithInstanceId(\n             new ArrayList<>(traceIdList),\n-            new ArrayList<>(instanceIdList));\n+            new ArrayList<>(instanceIdList), null);\n \n         // group by the traceId + service instanceId\n         final Map<String, List<SegmentRecord>> instanceTraceWithSegments = traceRelatedSegments.stream().filter(s -> {\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TraceQueryService.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TraceQueryService.java\nindex b1be54ea195d..0aa466a729c6 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TraceQueryService.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TraceQueryService.java\n@@ -28,6 +28,7 @@\n import java.util.Objects;\n \n import com.google.protobuf.InvalidProtocolBufferException;\n+import javax.annotation.Nullable;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.skywalking.apm.network.common.v3.KeyIntValuePair;\n import org.apache.skywalking.apm.network.common.v3.KeyStringValuePair;\n@@ -142,7 +143,10 @@ public TraceBrief queryBasicTraces(final String serviceId,\n         }\n     }\n \n-    public Trace queryTrace(final String traceId) throws IOException {\n+    /**\n+     * @param duration nullable unless for BanyanDB query from cold stage\n+     */\n+    public Trace queryTrace(final String traceId, @Nullable final Duration duration) throws IOException {\n         DebuggingTraceContext traceContext = TRACE_CONTEXT.get();\n         DebuggingSpan span = null;\n         try {\n@@ -152,7 +156,7 @@ public Trace queryTrace(final String traceId) throws IOException {\n                 msg.append(\""Condition: TraceId: \"").append(traceId);\n                 span.setMsg(msg.toString());\n             }\n-            return invokeQueryTrace(traceId);\n+            return invokeQueryTrace(traceId, duration);\n         } finally {\n             if (traceContext != null && span != null) {\n                 traceContext.stopSpan(span);\n@@ -160,10 +164,10 @@ public Trace queryTrace(final String traceId) throws IOException {\n         }\n     }\n \n-    private Trace invokeQueryTrace(final String traceId) throws IOException {\n+    private Trace invokeQueryTrace(final String traceId, @Nullable final Duration duration) throws IOException {\n         Trace trace = new Trace();\n \n-        List<SegmentRecord> segmentRecords = getTraceQueryDAO().queryByTraceIdDebuggable(traceId);\n+        List<SegmentRecord> segmentRecords = getTraceQueryDAO().queryByTraceIdDebuggable(traceId, duration);\n         if (segmentRecords.isEmpty()) {\n             trace.getSpans().addAll(getTraceQueryDAO().doFlexibleTraceQuery(traceId));\n         } else {\n@@ -192,7 +196,7 @@ private Trace invokeQueryTrace(final String traceId) throws IOException {\n \n         if (CollectionUtils.isNotEmpty(sortedSpans)) {\n             final List<SpanAttachedEventRecord> spanAttachedEvents = getSpanAttachedEventQueryDAO().\n-                querySpanAttachedEventsDebuggable(SpanAttachedEventTraceType.SKYWALKING, Arrays.asList(traceId));\n+                querySpanAttachedEventsDebuggable(SpanAttachedEventTraceType.SKYWALKING, Arrays.asList(traceId), duration);\n             appendAttachedEventsToSpanDebuggable(sortedSpans, spanAttachedEvents);\n         }\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/Duration.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/Duration.java\nindex 9cda596c52b5..ebe626296773 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/Duration.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/input/Duration.java\n@@ -34,6 +34,7 @@ public class Duration {\n     private String start;\n     private String end;\n     private Step step;\n+    private boolean coldStage = false;\n \n     /**\n      * See {@link DurationUtils#convertToTimeBucket(Step, String)}\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ISpanAttachedEventQueryDAO.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ISpanAttachedEventQueryDAO.java\nindex 4e8c048b741d..8514f1780aaf 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ISpanAttachedEventQueryDAO.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ISpanAttachedEventQueryDAO.java\n@@ -18,8 +18,10 @@\n \n package org.apache.skywalking.oap.server.core.storage.query;\n \n+import javax.annotation.Nullable;\n import org.apache.skywalking.oap.server.core.analysis.manual.spanattach.SpanAttachedEventRecord;\n import org.apache.skywalking.oap.server.core.analysis.manual.spanattach.SpanAttachedEventTraceType;\n+import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingSpan;\n import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext;\n import org.apache.skywalking.oap.server.library.module.Service;\n@@ -28,7 +30,10 @@\n import java.util.List;\n \n public interface ISpanAttachedEventQueryDAO extends Service {\n-    default List<SpanAttachedEventRecord> querySpanAttachedEventsDebuggable(SpanAttachedEventTraceType type, List<String> traceIds) throws IOException {\n+    /**\n+     * @param duration nullable unless for BanyanDB query from cold stage\n+     */\n+    default List<SpanAttachedEventRecord> querySpanAttachedEventsDebuggable(SpanAttachedEventTraceType type, List<String> traceIds, @Nullable Duration duration) throws IOException {\n         DebuggingTraceContext traceContext = DebuggingTraceContext.TRACE_CONTEXT.get();\n         DebuggingSpan span = null;\n         try {\n@@ -41,7 +46,7 @@ default List<SpanAttachedEventRecord> querySpanAttachedEventsDebuggable(SpanAtta\n                        .append(traceIds);\n                 span.setMsg(builder.toString());\n             }\n-            return querySpanAttachedEvents(type, traceIds);\n+            return querySpanAttachedEvents(type, traceIds, duration);\n         } finally {\n             if (traceContext != null && span != null) {\n                 traceContext.stopSpan(span);\n@@ -49,5 +54,8 @@ default List<SpanAttachedEventRecord> querySpanAttachedEventsDebuggable(SpanAtta\n         }\n     }\n \n-    List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds) throws IOException;\n+    /**\n+     * @param duration nullable unless for BanyanDB query from cold stage\n+     */\n+    List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds, @Nullable Duration duration) throws IOException;\n }\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ITraceQueryDAO.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ITraceQueryDAO.java\nindex a8785f1d9059..94f615f1548a 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ITraceQueryDAO.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/ITraceQueryDAO.java\n@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.util.List;\n+import javax.annotation.Nullable;\n import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;\n import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n@@ -88,7 +89,10 @@ default TraceBrief queryBasicTracesDebuggable(Duration duration,\n         }\n     }\n \n-    default List<SegmentRecord> queryByTraceIdDebuggable(String traceId) throws IOException {\n+    /**\n+     * @param duration nullable unless for BanyanDB query from cold stage\n+     */\n+    default List<SegmentRecord> queryByTraceIdDebuggable(String traceId, @Nullable Duration duration) throws IOException {\n         DebuggingTraceContext traceContext = DebuggingTraceContext.TRACE_CONTEXT.get();\n         DebuggingSpan span = null;\n         try {\n@@ -99,7 +103,7 @@ default List<SegmentRecord> queryByTraceIdDebuggable(String traceId) throws IOEx\n                        .append(traceId);\n                 span.setMsg(builder.toString());\n             }\n-            return queryByTraceId(traceId);\n+            return queryByTraceId(traceId, duration);\n         } finally {\n             if (traceContext != null && span != null) {\n                 traceContext.stopSpan(span);\n@@ -120,14 +124,23 @@ TraceBrief queryBasicTraces(Duration duration,\n                                 QueryOrder queryOrder,\n                                 final List<Tag> tags) throws IOException;\n \n-    List<SegmentRecord> queryByTraceId(String traceId) throws IOException;\n+    /**\n+     * @param duration nullable unless for BanyanDB query from cold stage\n+     */\n+    List<SegmentRecord> queryByTraceId(String traceId, @Nullable Duration duration) throws IOException;\n \n-    List<SegmentRecord> queryBySegmentIdList(List<String> segmentIdList) throws IOException;\n+    /**\n+     * @param duration nullable unless for BanyanDB query from cold stage\n+     */\n+    List<SegmentRecord> queryBySegmentIdList(List<String> segmentIdList, @Nullable Duration duration) throws IOException;\n \n-    List<SegmentRecord> queryByTraceIdWithInstanceId(List<String> traceIdList, List<String> instanceIdList) throws IOException;\n+    /**\n+     * @param duration nullable unless for BanyanDB query from cold stage\n+     */\n+    List<SegmentRecord> queryByTraceIdWithInstanceId(List<String> traceIdList, List<String> instanceIdList, @Nullable Duration duration) throws IOException;\n \n     /**\n-     * This method gives more flexible for 3rd trace without segment concept, which can't search data through {@link #queryByTraceId(String)}\n+     * This method gives more flexible for 3rd trace without segment concept, which can't search data through {@link #queryByTraceId(String, Duration)}\n      */\n     List<Span> doFlexibleTraceQuery(String traceId) throws IOException;\n }\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IZipkinQueryDAO.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IZipkinQueryDAO.java\nindex e83c5e3779a6..a72176d04eaf 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IZipkinQueryDAO.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IZipkinQueryDAO.java\n@@ -18,6 +18,7 @@\n \n package org.apache.skywalking.oap.server.core.storage.query;\n \n+import javax.annotation.Nullable;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingSpan;\n import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext;\n@@ -52,7 +53,10 @@ default List<List<Span>> getTracesDebuggable(final QueryRequest request,\n         }\n     }\n \n-    default List<Span> getTraceDebuggable(final String traceId) throws IOException {\n+    /**\n+     * @param duration nullable unless for BanyanDB query from cold stage\n+     */\n+    default List<Span> getTraceDebuggable(final String traceId, @Nullable final Duration duration) throws IOException {\n         DebuggingTraceContext traceContext = DebuggingTraceContext.TRACE_CONTEXT.get();\n         DebuggingSpan span = null;\n         try {\n@@ -60,7 +64,7 @@ default List<Span> getTraceDebuggable(final String traceId) throws IOException {\n                 span = traceContext.createSpan(\""Query Dao: getTrace\"");\n                 span.setMsg(\""Condition: TraceId: \"" + traceId);\n             }\n-            return getTrace(traceId);\n+            return getTrace(traceId, duration);\n         } finally {\n             if (traceContext != null && span != null) {\n                 traceContext.stopSpan(span);\n@@ -74,9 +78,18 @@ default List<Span> getTraceDebuggable(final String traceId) throws IOException {\n \n     List<String> getSpanNames(final String serviceName) throws IOException;\n \n-    List<Span> getTrace(final String traceId) throws IOException;\n+    /**\n+     * @param duration nullable unless for BanyanDB query from cold stage\n+     */\n+    List<Span> getTrace(final String traceId, @Nullable final Duration duration) throws IOException;\n \n+    /**\n+     * @param duration nullable unless for BanyanDB query from cold stage\n+     */\n     List<List<Span>> getTraces(final QueryRequest request, final Duration duration) throws IOException;\n \n-    List<List<Span>> getTraces(final Set<String> traceIds) throws IOException;\n+    /**\n+     * @param duration nullable unless for BanyanDB query from cold stage\n+     */\n+    List<List<Span>> getTraces(final Set<String> traceIds, @Nullable final Duration duration) throws IOException;\n }\n\ndiff --git a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetadataQueryV2.java b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetadataQueryV2.java\nindex bc971d40b055..d393a39751ae 100644\n--- a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetadataQueryV2.java\n+++ b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetadataQueryV2.java\n@@ -28,12 +28,15 @@\n import org.apache.skywalking.oap.server.core.CoreModule;\n import org.apache.skywalking.oap.server.core.analysis.IDManager;\n import org.apache.skywalking.oap.server.core.query.MetadataQueryService;\n+import org.apache.skywalking.oap.server.core.query.TTLStatusQuery;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.query.type.Endpoint;\n import org.apache.skywalking.oap.server.core.query.type.EndpointInfo;\n import org.apache.skywalking.oap.server.core.query.type.Process;\n import org.apache.skywalking.oap.server.core.query.type.Service;\n import org.apache.skywalking.oap.server.core.query.type.ServiceInstance;\n+import org.apache.skywalking.oap.server.core.storage.ttl.MetricsTTL;\n+import org.apache.skywalking.oap.server.core.storage.ttl.RecordsTTL;\n import org.apache.skywalking.oap.server.library.module.ModuleManager;\n \n import static org.apache.skywalking.oap.query.graphql.AsyncQueryUtils.queryAsync;\n@@ -47,6 +50,7 @@ public class MetadataQueryV2 implements GraphQLQueryResolver {\n \n     private final ModuleManager moduleManager;\n     private MetadataQueryService metadataQueryService;\n+    private TTLStatusQuery ttlStatusQuery;\n \n     public MetadataQueryV2(ModuleManager moduleManager) {\n         this.moduleManager = moduleManager;\n@@ -61,6 +65,15 @@ private MetadataQueryService getMetadataQueryService() {\n         return metadataQueryService;\n     }\n \n+    private TTLStatusQuery getTTLStatusQuery() {\n+        if (ttlStatusQuery == null) {\n+            ttlStatusQuery = moduleManager.find(CoreModule.NAME)\n+                                          .provider()\n+                                          .getService(TTLStatusQuery.class);\n+        }\n+        return ttlStatusQuery;\n+    }\n+\n     public CompletableFuture<Set<String>> listLayers() {\n         return queryAsync(() -> getMetadataQueryService().listLayers());\n     }\n@@ -115,4 +128,12 @@ public TimeInfo getTimeInfo() {\n         timeInfo.setTimezone(timezoneFormat.format(date));\n         return timeInfo;\n     }\n+\n+    public RecordsTTL getRecordsTTL() {\n+        return getTTLStatusQuery().getTTL().getRecords();\n+    }\n+\n+    public MetricsTTL getMetricsTTL() {\n+        return getTTLStatusQuery().getTTL().getMetrics();\n+    }\n }\n\ndiff --git a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TraceQuery.java b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TraceQuery.java\nindex b4ba9fc43e11..829405fb03ea 100644\n--- a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TraceQuery.java\n+++ b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/TraceQuery.java\n@@ -117,7 +117,28 @@ public CompletableFuture<Trace> queryTrace(final String traceId, boolean debug)\n             DebuggingTraceContext.TRACE_CONTEXT.set(traceContext);\n             DebuggingSpan span = traceContext.createSpan(\""Query trace\"");\n             try {\n-                Trace trace = getQueryService().queryTrace(traceId);\n+                Trace trace = getQueryService().queryTrace(traceId, null);\n+                if (debug) {\n+                    trace.setDebuggingTrace(traceContext.getExecTrace());\n+                }\n+                return trace;\n+            } finally {\n+                traceContext.stopSpan(span);\n+                traceContext.stopTrace();\n+                TRACE_CONTEXT.remove();\n+            }\n+        });\n+    }\n+\n+    public CompletableFuture<Trace> queryTraceFromColdStage(final String traceId, Duration duration, boolean debug) {\n+        duration.setColdStage(true);\n+        return queryAsync(() -> {\n+            DebuggingTraceContext traceContext = new DebuggingTraceContext(\n+                \""TraceId: \"" + traceId, debug, false);\n+            DebuggingTraceContext.TRACE_CONTEXT.set(traceContext);\n+            DebuggingSpan span = traceContext.createSpan(\""Query trace from cold stage\"");\n+            try {\n+                Trace trace = getQueryService().queryTrace(traceId, duration);\n                 if (debug) {\n                     trace.setDebuggingTrace(traceContext.getExecTrace());\n                 }\n\ndiff --git a/oap-server/server-query-plugin/query-graphql-plugin/src/main/resources/query-protocol b/oap-server/server-query-plugin/query-graphql-plugin/src/main/resources/query-protocol\nindex a9ed9eef09cf..23baed2234e4 160000\n--- a/oap-server/server-query-plugin/query-graphql-plugin/src/main/resources/query-protocol\n+++ b/oap-server/server-query-plugin/query-graphql-plugin/src/main/resources/query-protocol\n@@ -1 +1 @@\n-Subproject commit a9ed9eef09cf97256df9a33eab91fca1ba13096e\n+Subproject commit 23baed2234e4bbc18cd7ec7d47bfe7d4bc8ef363\n\ndiff --git a/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java\nindex c0025fdb8aa3..cd03825648b8 100644\n--- a/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java\n+++ b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java\n@@ -120,6 +120,7 @@ public String execExpression(@Param(\""dumpDBRsp\"") boolean dumpStorageRsp,\n                                  @Param(\""startTime\"") String startTime,\n                                  @Param(\""endTime\"") String endTime,\n                                  @Param(\""step\"") String step,\n+                                 @Param(\""coldStage\"") Optional<Boolean> coldStage,\n                                  @Param(\""service\"") String service,\n                                  @Param(\""serviceLayer\"") String serviceLayer,\n                                  @Param(\""serviceInstance\"") Optional<String> serviceInstance,\n@@ -148,6 +149,7 @@ public String execExpression(@Param(\""dumpDBRsp\"") boolean dumpStorageRsp,\n         duration.setStart(startTime);\n         duration.setEnd(endTime);\n         duration.setStep(Step.valueOf(step));\n+        coldStage.ifPresent(duration::setColdStage);\n         ExpressionResult expressionResult = mqeQuery.execExpression(expression, entity, duration, true, dumpStorageRsp).join();\n         DebuggingTrace execTrace = expressionResult.getDebuggingTrace();\n         DebuggingMQERsp result = new DebuggingMQERsp(\n@@ -168,6 +170,7 @@ public String queryBasicTraces(@Param(\""service\"") Optional<String> service,\n                                    @Param(\""startTime\"") String startTime,\n                                    @Param(\""endTime\"") String endTime,\n                                    @Param(\""step\"") String step,\n+                                   @Param(\""coldStage\"") Optional<Boolean> coldStage,\n                                    @Param(\""minTraceDuration\"") Optional<Integer> minDuration,\n                                    @Param(\""maxTraceDuration\"") Optional<Integer> maxDuration,\n                                    @Param(\""traceState\"") String traceState,\n@@ -185,6 +188,7 @@ public String queryBasicTraces(@Param(\""service\"") Optional<String> service,\n         duration.setStart(startTime);\n         duration.setEnd(endTime);\n         duration.setStep(Step.valueOf(step));\n+        coldStage.ifPresent(duration::setColdStage);\n         Pagination pagination = new Pagination();\n         pagination.setPageNum(pageNum);\n         pagination.setPageSize(pageSize);\n@@ -226,6 +230,26 @@ public String queryTrace(@Param(\""traceId\"") String traceId) {\n         return transToYAMLString(result);\n     }\n \n+    /**\n+     * Only for BanyanDB, can be used to query the trace in the cold stage.\n+     */\n+    @SneakyThrows\n+    @Get(\""/debugging/query/trace/queryTraceFromColdStage\"")\n+    public String queryTraceFromColdStage(@Param(\""traceId\"") String traceId,\n+                                          @Param(\""startTime\"") String startTime,\n+                                          @Param(\""endTime\"") String endTime,\n+                                          @Param(\""step\"") String step) {\n+        Duration duration = new Duration();\n+        duration.setStart(startTime);\n+        duration.setEnd(endTime);\n+        duration.setStep(Step.valueOf(step));\n+        duration.setColdStage(true);\n+        Trace trace = traceQuery.queryTraceFromColdStage(traceId, duration, true).join();\n+        DebuggingQueryTraceRsp result = new DebuggingQueryTraceRsp(\n+            trace.getSpans(), transformTrace(trace.getDebuggingTrace()));\n+        return transToYAMLString(result);\n+    }\n+\n     @SneakyThrows\n     @Get(\""/debugging/query/zipkin/api/v2/traces\"")\n     public String queryZipkinTraces(@Param(\""serviceName\"") Optional<String> serviceName,\n@@ -293,11 +317,13 @@ public String getZipkinTraceById(@Param(\""traceId\"") String traceId) {\n     public String getGlobalTopology(@Param(\""startTime\"") String startTime,\n                                  @Param(\""endTime\"") String endTime,\n                                  @Param(\""step\"") String step,\n+                                 @Param(\""coldStage\"") Optional<Boolean> coldStage,\n                                  @Param(\""serviceLayer\"") Optional<String> serviceLayer) {\n         Duration duration = new Duration();\n         duration.setStart(startTime);\n         duration.setEnd(endTime);\n         duration.setStep(Step.valueOf(step));\n+        coldStage.ifPresent(duration::setColdStage);\n         Topology topology = topologyQuery.getGlobalTopology(duration, serviceLayer.orElse(null), true).join();\n         DebuggingQueryServiceTopologyRsp result = new DebuggingQueryServiceTopologyRsp(\n             topology.getNodes(), topology.getCalls(), transformTrace(topology.getDebuggingTrace()));\n@@ -309,13 +335,14 @@ public String getGlobalTopology(@Param(\""startTime\"") String startTime,\n     public String getServicesTopology(@Param(\""startTime\"") String startTime,\n                                     @Param(\""endTime\"") String endTime,\n                                     @Param(\""step\"") String step,\n+                                    @Param(\""coldStage\"") Optional<Boolean> coldStage,\n                                     @Param(\""serviceLayer\"") String serviceLayer,\n                                     @Param(\""services\"") String services) {\n         Duration duration = new Duration();\n         duration.setStart(startTime);\n         duration.setEnd(endTime);\n         duration.setStep(Step.valueOf(step));\n-\n+        coldStage.ifPresent(duration::setColdStage);\n         List<String> ids = Arrays.stream(services.split(Const.COMMA))\n                                  .map(name -> IDManager.ServiceID.buildId(name, Layer.nameOf(serviceLayer).isNormal()))\n                                  .collect(Collectors.toList());\n@@ -330,6 +357,7 @@ public String getServicesTopology(@Param(\""startTime\"") String startTime,\n     public String getServiceInstanceTopology(@Param(\""startTime\"") String startTime,\n                                              @Param(\""endTime\"") String endTime,\n                                              @Param(\""step\"") String step,\n+                                             @Param(\""coldStage\"") Optional<Boolean> coldStage,\n                                              @Param(\""clientService\"") String clientService,\n                                              @Param(\""serverService\"") String serverService,\n                                              @Param(\""clientServiceLayer\"") String clientServiceLayer,\n@@ -338,6 +366,7 @@ public String getServiceInstanceTopology(@Param(\""startTime\"") String startTime,\n         duration.setStart(startTime);\n         duration.setEnd(endTime);\n         duration.setStep(Step.valueOf(step));\n+        coldStage.ifPresent(duration::setColdStage);\n         String clientServiceId = IDManager.ServiceID.buildId(clientService, Layer.nameOf(clientServiceLayer).isNormal());\n         String serverServiceId = IDManager.ServiceID.buildId(serverService, Layer.nameOf(serverServiceLayer).isNormal());\n         ServiceInstanceTopology topology = topologyQuery.getServiceInstanceTopology(clientServiceId, serverServiceId, duration, true).join();\n@@ -351,6 +380,7 @@ public String getServiceInstanceTopology(@Param(\""startTime\"") String startTime,\n     public String getEndpointDependencies(@Param(\""startTime\"") String startTime,\n                                           @Param(\""endTime\"") String endTime,\n                                           @Param(\""step\"") String step,\n+                                          @Param(\""coldStage\"") Optional<Boolean> coldStage,\n                                           @Param(\""service\"") String service,\n                                           @Param(\""serviceLayer\"") String serviceLayer,\n                                           @Param(\""endpoint\"") String endpoint) {\n@@ -358,6 +388,7 @@ public String getEndpointDependencies(@Param(\""startTime\"") String startTime,\n         duration.setStart(startTime);\n         duration.setEnd(endTime);\n         duration.setStep(Step.valueOf(step));\n+        coldStage.ifPresent(duration::setColdStage);\n         String endpointId = IDManager.EndpointID.buildId(\n             IDManager.ServiceID.buildId(service, Layer.nameOf(serviceLayer).isNormal()), endpoint);\n         EndpointTopology topology = topologyQuery.getEndpointDependencies(endpointId, duration, true).join();\n@@ -371,6 +402,7 @@ public String getEndpointDependencies(@Param(\""startTime\"") String startTime,\n     public String getProcessTopology(@Param(\""startTime\"") String startTime,\n                                      @Param(\""endTime\"") String endTime,\n                                      @Param(\""step\"") String step,\n+                                     @Param(\""coldStage\"") Optional<Boolean> coldStage,\n                                      @Param(\""service\"") String service,\n                                      @Param(\""serviceLayer\"") String serviceLayer,\n                                      @Param(\""instance\"") String process) {\n@@ -378,6 +410,7 @@ public String getProcessTopology(@Param(\""startTime\"") String startTime,\n         duration.setStart(startTime);\n         duration.setEnd(endTime);\n         duration.setStep(Step.valueOf(step));\n+        coldStage.ifPresent(duration::setColdStage);\n         String instanceId = IDManager.ServiceInstanceID.buildId(\n             IDManager.ServiceID.buildId(service, Layer.nameOf(serviceLayer).isNormal()), process);\n         ProcessTopology topology = topologyQuery.getProcessTopology(instanceId, duration, true).join();\n@@ -395,6 +428,7 @@ public String queryLogs(@Param(\""service\"") Optional<String> service,\n                             @Param(\""startTime\"") Optional<String> startTime,\n                             @Param(\""endTime\"") Optional<String> endTime,\n                             @Param(\""step\"") Optional<String> step,\n+                            @Param(\""coldStage\"") Optional<Boolean> coldStage,\n                             @Param(\""traceId\"") Optional<String> traceId,\n                             @Param(\""segmentId\"") Optional<String> segmentId,\n                             @Param(\""spanId\"") Optional<Integer> spanId,\n@@ -420,6 +454,7 @@ public String queryLogs(@Param(\""service\"") Optional<String> service,\n             duration.setStart(startTime.get());\n             duration.setEnd(endTime.get());\n             duration.setStep(Step.valueOf(step.get()));\n+            coldStage.ifPresent(duration::setColdStage);\n             condition.setQueryDuration(duration);\n         }\n \n\ndiff --git a/oap-server/server-query-plugin/zipkin-query-plugin/src/main/java/org/apache/skywalking/oap/query/zipkin/handler/ZipkinQueryHandler.java b/oap-server/server-query-plugin/zipkin-query-plugin/src/main/java/org/apache/skywalking/oap/query/zipkin/handler/ZipkinQueryHandler.java\nindex 6f3c33964e38..456da749fd80 100644\n--- a/oap-server/server-query-plugin/zipkin-query-plugin/src/main/java/org/apache/skywalking/oap/query/zipkin/handler/ZipkinQueryHandler.java\n+++ b/oap-server/server-query-plugin/zipkin-query-plugin/src/main/java/org/apache/skywalking/oap/query/zipkin/handler/ZipkinQueryHandler.java\n@@ -187,12 +187,12 @@ public AggregatedHttpResponse getTraceById(@Param(\""traceId\"") String traceId) thr\n             if (StringUtil.isEmpty(traceId)) {\n                 return AggregatedHttpResponse.of(BAD_REQUEST, ANY_TEXT_TYPE, \""traceId is empty or null\"");\n             }\n-            List<Span> trace = getZipkinQueryDAO().getTraceDebuggable(Span.normalizeTraceId(traceId.trim()));\n+            List<Span> trace = getZipkinQueryDAO().getTraceDebuggable(Span.normalizeTraceId(traceId.trim()), null);\n             if (CollectionUtils.isEmpty(trace)) {\n                 return AggregatedHttpResponse.of(NOT_FOUND, ANY_TEXT_TYPE, traceId + \"" not found\"");\n             }\n             appendEventsDebuggable(trace, getSpanAttachedEventQueryDAO().querySpanAttachedEventsDebuggable(\n-                SpanAttachedEventTraceType.ZIPKIN, Arrays.asList(traceId)));\n+                SpanAttachedEventTraceType.ZIPKIN, Arrays.asList(traceId), null));\n             return response(SpanBytesEncoder.JSON_V2.encodeList(trace));\n         } finally {\n             if (traceContext != null && debuggingSpan != null) {\n@@ -266,7 +266,7 @@ public AggregatedHttpResponse getTracesByIds(@Param(\""traceIds\"") String traceIds)\n             }\n         }\n \n-        List<List<Span>> traces = getZipkinQueryDAO().getTraces(normalizeTraceIds);\n+        List<List<Span>> traces = getZipkinQueryDAO().getTraces(normalizeTraceIds, null);\n         appendEventsToTraces(traces);\n         return response(encodeTraces(traces));\n     }\n@@ -365,7 +365,7 @@ private void appendEventsToTraces(List<List<Span>> traces) throws IOException {\n         }\n \n         final List<SpanAttachedEventRecord> records = getSpanAttachedEventQueryDAO().querySpanAttachedEventsDebuggable(SpanAttachedEventTraceType.ZIPKIN,\n-            new ArrayList<>(traceIdWithSpans.keySet()));\n+            new ArrayList<>(traceIdWithSpans.keySet()), null);\n         final Map<String, List<SpanAttachedEventRecord>> traceEvents = records.stream().collect(Collectors.groupingBy(SpanAttachedEventRecord::getRelatedTraceId));\n         for (Map.Entry<String, List<SpanAttachedEventRecord>> entry : traceEvents.entrySet()) {\n             appendEventsDebuggable(traceIdWithSpans.get(entry.getKey()), entry.getValue());\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java\nindex 9c8c97f723b8..008bced45afa 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java\n@@ -52,8 +52,8 @@ public BanyanDBAggregationQueryDAO(BanyanDBStorageClient client) {\n \n     @Override\n     public List<SelectedRecord> sortMetrics(TopNCondition condition, String valueColumnName, Duration duration, List<KeyValue> additionalConditions) throws IOException {\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         final String modelName = condition.getName();\n-        final TimestampRange timestampRange = new TimestampRange(duration.getStartTimestamp(), duration.getEndTimestamp());\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(modelName, duration.getStep());\n         if (schema == null) {\n             throw new IOException(\""schema is not registered\"");\n@@ -71,20 +71,21 @@ public List<SelectedRecord> sortMetrics(TopNCondition condition, String valueCol\n             if (CollectionUtils.isEmpty(additionalConditions) ||\n                     additionalConditions.stream().map(KeyValue::getKey).collect(Collectors.toSet())\n                             .equals(ImmutableSet.copyOf(schema.getTopNSpec().getGroupByTagNamesList()))) {\n-                return serverSideTopN(condition, schema, spec, timestampRange, additionalConditions);\n+                return serverSideTopN(isColdStage, condition, schema, spec, getTimestampRange(duration), additionalConditions);\n             }\n         }\n \n-        return directMetricsTopN(condition, schema, valueColumnName, spec, timestampRange, additionalConditions);\n+        return directMetricsTopN(isColdStage, condition, schema, valueColumnName, spec, getTimestampRange(duration), additionalConditions);\n     }\n \n-    List<SelectedRecord> serverSideTopN(TopNCondition condition, MetadataRegistry.Schema schema, MetadataRegistry.ColumnSpec valueColumnSpec,\n+    //todo: query cold stage\n+    List<SelectedRecord> serverSideTopN(boolean isColdStage, TopNCondition condition, MetadataRegistry.Schema schema, MetadataRegistry.ColumnSpec valueColumnSpec,\n                                         TimestampRange timestampRange, List<KeyValue> additionalConditions) throws IOException {\n         TopNQueryResponse resp = null;\n         if (condition.getOrder() == Order.DES) {\n-            resp = topNQueryDebuggable(schema, timestampRange, condition.getTopN(), AbstractQuery.Sort.DESC, additionalConditions, condition.getAttributes());\n+            resp = topNQueryDebuggable(isColdStage, schema, timestampRange, condition.getTopN(), AbstractQuery.Sort.DESC, additionalConditions, condition.getAttributes());\n         } else {\n-            resp = topNQueryDebuggable(schema, timestampRange, condition.getTopN(), AbstractQuery.Sort.ASC, additionalConditions, condition.getAttributes());\n+            resp = topNQueryDebuggable(isColdStage, schema, timestampRange, condition.getTopN(), AbstractQuery.Sort.ASC, additionalConditions, condition.getAttributes());\n         }\n         if (resp.size() == 0) {\n             return Collections.emptyList();\n@@ -103,9 +104,9 @@ List<SelectedRecord> serverSideTopN(TopNCondition condition, MetadataRegistry.Sc\n         return topNList;\n     }\n \n-    List<SelectedRecord> directMetricsTopN(TopNCondition condition, MetadataRegistry.Schema schema, String valueColumnName, MetadataRegistry.ColumnSpec valueColumnSpec,\n+    List<SelectedRecord> directMetricsTopN(boolean isColdStage, TopNCondition condition, MetadataRegistry.Schema schema, String valueColumnName, MetadataRegistry.ColumnSpec valueColumnSpec,\n                                            TimestampRange timestampRange, List<KeyValue> additionalConditions) throws IOException {\n-        MeasureQueryResponse resp = queryDebuggable(schema, TAGS, Collections.singleton(valueColumnName),\n+        MeasureQueryResponse resp = queryDebuggable(isColdStage, schema, TAGS, Collections.singleton(valueColumnName),\n                 timestampRange, new QueryBuilder<MeasureQuery>() {\n                     @Override\n                     protected void apply(MeasureQuery query) {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\nindex 843edeb99f51..90bebd407226 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\n@@ -324,10 +324,12 @@ private ResourceExist checkResourceExistence(MetadataRegistry.SchemaMetadata met\n                                                                      stage.getTtl()))\n                                                  .setNodeSelector(stage.getNodeSelector())\n                                                  .setClose(stage.isClose())\n-                    //todo: set the default query stages\n                 );\n             }\n         }\n+        if (CollectionUtils.isNotEmpty(metadata.getResource().getDefaultQueryStages())) {\n+            optsBuilder.addAllDefaultStages(metadata.getResource().getDefaultQueryStages());\n+        }\n         gBuilder.setResourceOpts(optsBuilder.build());\n         if (!RunningMode.isNoInitMode()) {\n             if (!groupAligned.contains(metadata.getGroup())) {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBRecordsQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBRecordsQueryDAO.java\nindex 99437f1d54b0..62515b86df43 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBRecordsQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBRecordsQueryDAO.java\n@@ -23,7 +23,6 @@\n import org.apache.skywalking.banyandb.v1.client.RowEntity;\n import org.apache.skywalking.banyandb.v1.client.StreamQuery;\n import org.apache.skywalking.banyandb.v1.client.StreamQueryResponse;\n-import org.apache.skywalking.banyandb.v1.client.TimestampRange;\n import org.apache.skywalking.oap.server.core.analysis.topn.TopN;\n import org.apache.skywalking.oap.server.core.query.enumeration.Order;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n@@ -47,11 +46,11 @@ public BanyanDBRecordsQueryDAO(BanyanDBStorageClient client) {\n \n     @Override\n     public List<Record> readRecords(RecordCondition condition, String valueColumnName, Duration duration) throws IOException {\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         final String modelName = condition.getName();\n-        final TimestampRange timestampRange = new TimestampRange(duration.getStartTimestamp(), duration.getEndTimestamp());\n         final Set<String> tags = ImmutableSet.of(TopN.ENTITY_ID, TopN.STATEMENT, TopN.TRACE_ID, valueColumnName);\n-        StreamQueryResponse resp = queryDebuggable(modelName, tags,\n-                timestampRange, new QueryBuilder<StreamQuery>() {\n+        StreamQueryResponse resp = queryDebuggable(isColdStage, modelName, tags,\n+                getTimestampRange(duration), new QueryBuilder<StreamQuery>() {\n                     @Override\n                     protected void apply(StreamQuery query) {\n                         query.and(eq(TopN.ENTITY_ID, condition.getParentEntity().buildId()));\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBZipkinQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBZipkinQueryDAO.java\nindex 3d1cf7d7cc4b..7b31558f8eda 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBZipkinQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBZipkinQueryDAO.java\n@@ -27,6 +27,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import javax.annotation.Nullable;\n import org.apache.skywalking.banyandb.v1.client.AbstractCriteria;\n import org.apache.skywalking.banyandb.v1.client.AbstractQuery;\n import org.apache.skywalking.banyandb.v1.client.DataPoint;\n@@ -87,7 +88,7 @@ public BanyanDBZipkinQueryDAO(BanyanDBStorageClient client) {\n     public List<String> getServiceNames() throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(ZipkinServiceTraffic.INDEX_NAME, DownSampling.Minute);\n         MeasureQueryResponse resp =\n-            query(schema,\n+            query(false, schema,\n                   SERVICE_TRAFFIC_TAGS,\n                   Collections.emptySet(), new QueryBuilder<MeasureQuery>() {\n \n@@ -108,7 +109,7 @@ protected void apply(MeasureQuery query) {\n     public List<String> getRemoteServiceNames(final String serviceName) throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(ZipkinServiceRelationTraffic.INDEX_NAME, DownSampling.Minute);\n         MeasureQueryResponse resp =\n-            query(schema,\n+            query(false, schema,\n                   REMOTE_SERVICE_TRAFFIC_TAGS,\n                   Collections.emptySet(), new QueryBuilder<MeasureQuery>() {\n \n@@ -132,7 +133,7 @@ protected void apply(MeasureQuery query) {\n     public List<String> getSpanNames(final String serviceName) throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(ZipkinServiceSpanTraffic.INDEX_NAME, DownSampling.Minute);\n         MeasureQueryResponse resp =\n-            query(schema,\n+            query(false, schema,\n                   SPAN_TRAFFIC_TAGS,\n                   Collections.emptySet(), new QueryBuilder<MeasureQuery>() {\n \n@@ -153,9 +154,10 @@ protected void apply(MeasureQuery query) {\n     }\n \n     @Override\n-    public List<Span> getTrace(final String traceId) throws IOException {\n+    public List<Span> getTrace(final String traceId, @Nullable final Duration duration) throws IOException {\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         StreamQueryResponse resp =\n-            query(ZipkinSpanRecord.INDEX_NAME, TRACE_TAGS,\n+            query(isColdStage, ZipkinSpanRecord.INDEX_NAME, TRACE_TAGS, getTimestampRange(duration),\n                   new QueryBuilder<StreamQuery>() {\n \n                       @Override\n@@ -197,13 +199,14 @@ public List<List<Span>> getTraces(final QueryRequest request, Duration duration)\n             scrollEndTime = spans.get(spans.size() - 1).getTimestampMillis();\n         }\n \n-        return getTraces(traceIds);\n+        return getTraces(traceIds, duration);\n     }\n \n     private List<ZipkinSpanRecord> getSpans(final QueryRequest request,\n                                     Duration duration,\n                                     long scrollEndTime,\n                                     int limit) throws IOException {\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         final long startTimeMillis = duration.getStartTimestamp();\n         TimestampRange tsRange = null;\n         if (startTimeMillis > 0 && scrollEndTime > 0) {\n@@ -245,7 +248,7 @@ public void apply(final StreamQuery query) {\n                 query.setLimit(limit);\n             }\n         };\n-        StreamQueryResponse resp = query(ZipkinSpanRecord.INDEX_NAME, TRACE_TAGS, tsRange, queryBuilder);\n+        StreamQueryResponse resp = query(isColdStage, ZipkinSpanRecord.INDEX_NAME, TRACE_TAGS, tsRange, queryBuilder);\n         List<ZipkinSpanRecord> spans = new ArrayList<>(); //needs to keep order here\n         for (final RowEntity rowEntity : resp.getElements()) {\n             ZipkinSpanRecord spanRecord = new ZipkinSpanRecord.Builder().storage2Entity(\n@@ -256,13 +259,14 @@ public void apply(final StreamQuery query) {\n     }\n \n     @Override\n-    public List<List<Span>> getTraces(final Set<String> traceIds) throws IOException {\n+    public List<List<Span>> getTraces(final Set<String> traceIds, @Nullable final Duration duration) throws IOException {\n         if (CollectionUtils.isEmpty(traceIds)) {\n             return Collections.EMPTY_LIST;\n         }\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         List<AbstractCriteria> conditions = new ArrayList<>(traceIds.size());\n         StreamQueryResponse resp =\n-            queryDebuggable(ZipkinSpanRecord.INDEX_NAME, TRACE_TAGS, null,\n+            queryDebuggable(isColdStage, ZipkinSpanRecord.INDEX_NAME, TRACE_TAGS, getTimestampRange(duration),\n                   new QueryBuilder<StreamQuery>() {\n \n                       @Override\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEBPFProfilingScheduleQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEBPFProfilingScheduleQueryDAO.java\nindex 33164a5e9bc8..d0cf955777fa 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEBPFProfilingScheduleQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEBPFProfilingScheduleQueryDAO.java\n@@ -53,7 +53,7 @@ public BanyanDBEBPFProfilingScheduleQueryDAO(BanyanDBStorageClient client) {\n      @Override\n      public List<EBPFProfilingSchedule> querySchedules(String taskId) throws IOException {\n          MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(EBPFProfilingScheduleRecord.INDEX_NAME, DownSampling.Minute);\n-         MeasureQueryResponse resp = query(schema,\n+         MeasureQueryResponse resp = query(false, schema,\n                  TAGS,\n                                            Collections.emptySet(), new QueryBuilder<MeasureQuery>() {\n                  @Override\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEventQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEventQueryDAO.java\nindex cc85537b0bdf..5ecf61bda74d 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEventQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEventQueryDAO.java\n@@ -30,10 +30,8 @@\n import org.apache.skywalking.banyandb.v1.client.MeasureQuery;\n import org.apache.skywalking.banyandb.v1.client.MeasureQueryResponse;\n import org.apache.skywalking.banyandb.v1.client.PairQueryCondition;\n-import org.apache.skywalking.banyandb.v1.client.TimestampRange;\n import org.apache.skywalking.oap.server.core.analysis.DownSampling;\n import org.apache.skywalking.oap.server.core.analysis.Layer;\n-import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n import org.apache.skywalking.oap.server.core.query.PaginationUtils;\n import org.apache.skywalking.oap.server.core.query.enumeration.Order;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n@@ -63,16 +61,9 @@ public BanyanDBEventQueryDAO(final BanyanDBStorageClient client) {\n     public Events queryEvents(EventQueryCondition condition) throws Exception {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(Event.INDEX_NAME, DownSampling.Minute);\n         final Duration time = condition.getTime();\n-        TimestampRange tsRange = null;\n-        if (time != null) {\n-            long startTB = time.getStartTimeBucketInSec();\n-            long endTB = time.getEndTimeBucketInSec();\n-            if (startTB > 0 && endTB > 0) {\n-                tsRange = new TimestampRange(TimeBucket.getTimestamp(startTB), TimeBucket.getTimestamp(endTB));\n-            }\n-        }\n-        MeasureQueryResponse resp = query(schema, TAGS,\n-                Collections.emptySet(), tsRange, buildQuery(Collections.singletonList(condition)));\n+        boolean isColdStage = time != null && time.isColdStage();\n+        MeasureQueryResponse resp = query(isColdStage, schema, TAGS,\n+                Collections.emptySet(), getTimestampRange(time), buildQuery(Collections.singletonList(condition)));\n         Events events = new Events();\n         if (resp.size() == 0) {\n             return events;\n@@ -88,16 +79,9 @@ public Events queryEvents(List<EventQueryCondition> conditionList) throws Except\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(Event.INDEX_NAME, DownSampling.Minute);\n         // Duration should be same for all conditions\n         final Duration time = conditionList.get(0).getTime();\n-        TimestampRange tsRange = null;\n-        if (time != null) {\n-            long startTB = time.getStartTimeBucketInSec();\n-            long endTB = time.getEndTimeBucketInSec();\n-            if (startTB > 0 && endTB > 0) {\n-                tsRange = new TimestampRange(TimeBucket.getTimestamp(startTB), TimeBucket.getTimestamp(endTB));\n-            }\n-        }\n-        MeasureQueryResponse resp = query(schema, TAGS,\n-                Collections.emptySet(), tsRange, buildQuery(conditionList));\n+        boolean isColdStage = time != null && time.isColdStage();\n+        MeasureQueryResponse resp = query(isColdStage, schema, TAGS,\n+                Collections.emptySet(), getTimestampRange(time), buildQuery(conditionList));\n         Events events = new Events();\n         if (resp.size() == 0) {\n             return events;\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBHierarchyQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBHierarchyQueryDAO.java\nindex a7e2361dc08a..b8e08ff33285 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBHierarchyQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBHierarchyQueryDAO.java\n@@ -63,7 +63,7 @@ public BanyanDBHierarchyQueryDAO(final BanyanDBStorageClient client, BanyanDBSto\n     @Override\n     public List<ServiceHierarchyRelationTraffic> readAllServiceHierarchyRelations() throws Exception {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(ServiceHierarchyRelationTraffic.INDEX_NAME, DownSampling.Minute);\n-        MeasureQueryResponse resp = query(schema,\n+        MeasureQueryResponse resp = query(false, schema,\n                                           SERVICE_HIERARCHY_RELATION_TAGS,\n                                           Collections.emptySet(), new QueryBuilder<>() {\n                 @Override\n@@ -87,7 +87,7 @@ protected void apply(MeasureQuery query) {\n     public List<InstanceHierarchyRelationTraffic> readInstanceHierarchyRelations(final String instanceId,\n                                                                                  final String layer) throws Exception {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(ServiceHierarchyRelationTraffic.INDEX_NAME, DownSampling.Minute);\n-        MeasureQueryResponse resp = query(schema,\n+        MeasureQueryResponse resp = query(false, schema,\n                                               INSTANCE_HIERARCHY_RELATION_TAGS,\n                                           Collections.emptySet(), buildInstanceRelationsQuery(instanceId, layer)\n         );\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java\nindex 9bc0f548e2b7..78938c649e9d 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java\n@@ -93,7 +93,7 @@ public BanyanDBMetadataQueryDAO(BanyanDBStorageClient client, BanyanDBStorageCon\n     public List<Service> listServices() throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(ServiceTraffic.INDEX_NAME, DownSampling.Minute);\n \n-        MeasureQueryResponse resp = query(schema,\n+        MeasureQueryResponse resp = query(false, schema,\n                 SERVICE_TRAFFIC_TAGS,\n                 Collections.emptySet(), new QueryBuilder<MeasureQuery>() {\n                     @Override\n@@ -117,7 +117,7 @@ public List<ServiceInstance> listInstances(Duration duration, String serviceId)\n             timestampRange = new TimestampRange(0, duration.getEndTimestamp());\n         }\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(InstanceTraffic.INDEX_NAME, DownSampling.Minute);\n-        MeasureQueryResponse resp = query(schema,\n+        MeasureQueryResponse resp = query(false, schema,\n                 INSTANCE_TRAFFIC_TAGS,\n                 Collections.emptySet(),\n                 timestampRange,\n@@ -145,7 +145,7 @@ protected void apply(MeasureQuery query) {\n     public ServiceInstance getInstance(String instanceId) throws IOException {\n         IDManager.ServiceInstanceID.InstanceIDDefinition id = IDManager.ServiceInstanceID.analysisId(instanceId);\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(InstanceTraffic.INDEX_NAME, DownSampling.Minute);\n-        MeasureQueryResponse resp = query(schema,\n+        MeasureQueryResponse resp = query(false, schema,\n                 INSTANCE_TRAFFIC_TAGS,\n                 Collections.emptySet(),\n                 new QueryBuilder<MeasureQuery>() {\n@@ -161,7 +161,7 @@ protected void apply(MeasureQuery query) {\n     @Override\n     public List<ServiceInstance> getInstances(List<String> instanceIds) throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(InstanceTraffic.INDEX_NAME, DownSampling.Minute);\n-        MeasureQueryResponse resp = query(schema,\n+        MeasureQueryResponse resp = query(false, schema,\n                 INSTANCE_TRAFFIC_TAGS,\n                 Collections.emptySet(),\n                 new QueryBuilder<MeasureQuery>() {\n@@ -184,7 +184,7 @@ protected void apply(MeasureQuery query) {\n     @Override\n     public List<Endpoint> findEndpoint(String keyword, String serviceId, int limit, Duration duration) throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(EndpointTraffic.INDEX_NAME, DownSampling.Minute);\n-        MeasureQueryResponse resp = query(schema,\n+        MeasureQueryResponse resp = query(false, schema,\n                 ENDPOINT_TRAFFIC_TAGS,\n                 Collections.emptySet(),\n                 new QueryBuilder<MeasureQuery>() {\n@@ -220,7 +220,7 @@ protected void apply(MeasureQuery query) {\n     @Override\n     public List<Process> listProcesses(String serviceId, ProfilingSupportStatus supportStatus, long lastPingStartTimeBucket, long lastPingEndTimeBucket) throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(ProcessTraffic.INDEX_NAME, DownSampling.Minute);\n-        MeasureQueryResponse resp = query(schema,\n+        MeasureQueryResponse resp = query(false, schema,\n                 PROCESS_TRAFFIC_TAGS,\n                 Collections.emptySet(),\n                 new QueryBuilder<MeasureQuery>() {\n@@ -253,7 +253,7 @@ protected void apply(MeasureQuery query) {\n     public List<Process> listProcesses(String serviceInstanceId, Duration duration, boolean includeVirtual) throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(ProcessTraffic.INDEX_NAME, DownSampling.Minute);\n         long lastPingStartTimeBucket = duration.getStartTimeBucket();\n-        MeasureQueryResponse resp = query(schema,\n+        MeasureQueryResponse resp = query(false, schema,\n                 PROCESS_TRAFFIC_TAGS,\n                 Collections.emptySet(),\n                 new QueryBuilder<MeasureQuery>() {\n@@ -279,7 +279,7 @@ protected void apply(MeasureQuery query) {\n     @Override\n     public List<Process> listProcesses(String agentId, long startPingTimeBucket, long endPingTimeBucket) throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(ProcessTraffic.INDEX_NAME, DownSampling.Minute);\n-        MeasureQueryResponse resp = query(schema,\n+        MeasureQueryResponse resp = query(false, schema,\n                 PROCESS_TRAFFIC_TAGS,\n                 Collections.emptySet(),\n                 new QueryBuilder<MeasureQuery>() {\n@@ -304,7 +304,7 @@ protected void apply(MeasureQuery query) {\n     @Override\n     public long getProcessCount(String serviceId, ProfilingSupportStatus profilingSupportStatus, long lastPingStartTimeBucket, long lastPingEndTimeBucket) throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(ProcessTraffic.INDEX_NAME, DownSampling.Minute);\n-        MeasureQueryResponse resp = query(schema,\n+        MeasureQueryResponse resp = query(false, schema,\n                 PROCESS_TRAFFIC_TAGS,\n                 Collections.emptySet(),\n                 new QueryBuilder<MeasureQuery>() {\n@@ -326,7 +326,7 @@ protected void apply(MeasureQuery query) {\n     @Override\n     public long getProcessCount(String instanceId) throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(ProcessTraffic.INDEX_NAME, DownSampling.Minute);\n-        MeasureQueryResponse resp = query(schema,\n+        MeasureQueryResponse resp = query(false, schema,\n                 PROCESS_TRAFFIC_TAGS,\n                 Collections.emptySet(),\n                 new QueryBuilder<MeasureQuery>() {\n@@ -346,7 +346,7 @@ protected void apply(MeasureQuery query) {\n     @Override\n     public Process getProcess(String processId) throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(ProcessTraffic.INDEX_NAME, DownSampling.Minute);\n-        MeasureQueryResponse resp = query(schema,\n+        MeasureQueryResponse resp = query(false, schema,\n                 PROCESS_TRAFFIC_TAGS,\n                 Collections.emptySet(),\n                 new QueryBuilder<MeasureQuery>() {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsDAO.java\nindex e2abb01b17a0..ee2a1dd57cf0 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsDAO.java\n@@ -125,7 +125,7 @@ public List<Metrics> multiGet(Model model, List<Metrics> metrics) throws IOExcep\n         }\n \n         List<Metrics> metricsInStorage = new ArrayList<>(metrics.size());\n-        MeasureQueryResponse resp = query(schema, schema.getTags(), schema.getFields(), timestampRange, new QueryBuilder<MeasureQuery>() {\n+        MeasureQueryResponse resp = query(false, schema, schema.getTags(), schema.getFields(), timestampRange, new QueryBuilder<MeasureQuery>() {\n                 @Override\n             protected void apply(MeasureQuery query) {\n                 seriesIDColumns.entrySet().forEach(entry -> {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsQueryDAO.java\nindex 911058fb5ae2..6a32f0cf648a 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsQueryDAO.java\n@@ -29,7 +29,6 @@\n import org.apache.skywalking.banyandb.v1.client.DataPoint;\n import org.apache.skywalking.banyandb.v1.client.MeasureQuery;\n import org.apache.skywalking.banyandb.v1.client.MeasureQueryResponse;\n-import org.apache.skywalking.banyandb.v1.client.TimestampRange;\n import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;\n import org.apache.skywalking.oap.server.core.analysis.metrics.HistogramMetrics;\n@@ -49,8 +48,6 @@\n import org.apache.skywalking.oap.server.storage.plugin.banyandb.stream.AbstractBanyanDBDAO;\n import org.apache.skywalking.oap.server.storage.plugin.banyandb.util.ByteUtil;\n \n-import static java.util.Objects.nonNull;\n-\n @Slf4j\n public class BanyanDBMetricsQueryDAO extends AbstractBanyanDBDAO implements IMetricsQueryDAO {\n     public BanyanDBMetricsQueryDAO(BanyanDBStorageClient client) {\n@@ -133,22 +130,13 @@ public List<MetricsValues> readLabeledMetricsValuesWithoutEntity(final String me\n                                                     final String valueColumnName,\n                                                     final List<KeyValue> labels,\n                                                     final Duration duration) throws IOException {\n-        long startTB = 0;\n-        long endTB = 0;\n-        if (nonNull(duration)) {\n-            startTB = duration.getStartTimeBucketInSec();\n-            endTB = duration.getEndTimeBucketInSec();\n-        }\n-        TimestampRange timestampRange = null;\n-        if (startTB > 0 && endTB > 0) {\n-            timestampRange = new TimestampRange(TimeBucket.getTimestamp(startTB), TimeBucket.getTimestamp(endTB));\n-        }\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(metricsName, duration.getStep());\n         if (schema == null) {\n             throw new IOException(\""schema is not registered\"");\n         }\n         MeasureQueryResponse resp = query(\n-            schema, ImmutableSet.of(Metrics.ENTITY_ID), ImmutableSet.of(valueColumnName), timestampRange,\n+            isColdStage, schema, ImmutableSet.of(Metrics.ENTITY_ID), ImmutableSet.of(valueColumnName), getTimestampRange(duration),\n             new QueryBuilder<MeasureQuery>() {\n                 @Override\n                 protected void apply(MeasureQuery query) {\n@@ -214,10 +202,9 @@ private Map<Long, DataPoint> queryByEntityID(final MetricsCondition condition, S\n     }\n \n     private Map<Long, DataPoint> queryByEntityID(MetadataRegistry.Schema schema, String valueColumnName, Duration duration, String entityID) throws IOException {\n-        TimestampRange timestampRange = new TimestampRange(duration.getStartTimestamp(), duration.getEndTimestamp());\n-\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         Map<Long, DataPoint> map = new HashMap<>();\n-        MeasureQueryResponse resp = queryDebuggable(schema, ImmutableSet.of(Metrics.ENTITY_ID), ImmutableSet.of(valueColumnName), timestampRange, new QueryBuilder<MeasureQuery>() {\n+        MeasureQueryResponse resp = queryDebuggable(isColdStage, schema, ImmutableSet.of(Metrics.ENTITY_ID), ImmutableSet.of(valueColumnName), getTimestampRange(duration), new QueryBuilder<MeasureQuery>() {\n             @Override\n             protected void apply(MeasureQuery query) {\n                 query.and(eq(Metrics.ENTITY_ID, entityID));\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBNetworkAddressAliasDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBNetworkAddressAliasDAO.java\nindex 71d6d12aad5a..a0a342c1f43b 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBNetworkAddressAliasDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBNetworkAddressAliasDAO.java\n@@ -65,6 +65,7 @@ private MetadataRegistry.Schema getSchema() {\n     public List<NetworkAddressAlias> loadLastUpdate(long timeBucket) {\n         try {\n             MeasureQueryResponse resp = query(\n+                false,\n                     getSchema(),\n                     TAGS,\n                     Collections.emptySet(),\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBServiceLabelDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBServiceLabelDAO.java\nindex d5e578d29e9e..8dc16bfce392 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBServiceLabelDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBServiceLabelDAO.java\n@@ -47,7 +47,7 @@ public BanyanDBServiceLabelDAO(final BanyanDBStorageClient client, BanyanDBStora\n     @Override\n     public List<String> queryAllLabels(String serviceId) throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(ServiceLabelRecord.INDEX_NAME, DownSampling.Minute);\n-        return query(schema, TAGS,\n+        return query(false, schema, TAGS,\n                 Collections.emptySet(), new QueryBuilder<MeasureQuery>() {\n                     @Override\n                     protected void apply(final MeasureQuery query) {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBTagAutocompleteQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBTagAutocompleteQueryDAO.java\nindex 026925f6454a..94fae1fb9ea4 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBTagAutocompleteQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBTagAutocompleteQueryDAO.java\n@@ -53,6 +53,7 @@ public BanyanDBTagAutocompleteQueryDAO(BanyanDBStorageClient client) {\n \n     @Override\n     public Set<String> queryTagAutocompleteKeys(TagType tagType, int limit, Duration duration) throws IOException {\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(TagAutocompleteData.INDEX_NAME, DownSampling.Minute);\n         long startMinTB = 0;\n         long endMinTB = 0;\n@@ -68,10 +69,10 @@ public Set<String> queryTagAutocompleteKeys(TagType tagType, int limit, Duration\n         if (startTB > 0 && endTB > 0) {\n             range = new TimestampRange(TimeBucket.getTimestamp(startTB), TimeBucket.getTimestamp(endTB));\n         }\n-        MeasureQueryResponse resp = query(schema,\n-                TAGS_KEY, Collections.emptySet(),\n-                range,\n-                new QueryBuilder<MeasureQuery>() {\n+        MeasureQueryResponse resp = query(isColdStage, schema,\n+                                          TAGS_KEY, Collections.emptySet(),\n+                                          range,\n+                                          new QueryBuilder<MeasureQuery>() {\n                     @Override\n                     protected void apply(MeasureQuery query) {\n                         query.groupBy(ImmutableSet.of(TagAutocompleteData.TAG_KEY));\n@@ -94,6 +95,7 @@ protected void apply(MeasureQuery query) {\n \n     @Override\n     public Set<String> queryTagAutocompleteValues(TagType tagType, String tagKey, int limit, Duration duration) throws IOException {\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(TagAutocompleteData.INDEX_NAME, DownSampling.Minute);\n         long startMinTB = 0;\n         long endMinTB = 0;\n@@ -109,10 +111,10 @@ public Set<String> queryTagAutocompleteValues(TagType tagType, String tagKey, in\n         if (startTB > 0 && endTB > 0) {\n             range = new TimestampRange(TimeBucket.getTimestamp(startTB), TimeBucket.getTimestamp(endTB));\n         }\n-        MeasureQueryResponse resp = query(schema,\n-                TAGS_KV, Collections.emptySet(),\n-                range,\n-                new QueryBuilder<MeasureQuery>() {\n+        MeasureQueryResponse resp = query(isColdStage, schema,\n+                                          TAGS_KV, Collections.emptySet(),\n+                                          range,\n+                                          new QueryBuilder<MeasureQuery>() {\n                     @Override\n                     protected void apply(MeasureQuery query) {\n                         query.groupBy(ImmutableSet.of(TagAutocompleteData.TAG_VALUE));\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBTopologyQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBTopologyQueryDAO.java\nindex e91fe30d4393..0f10fa372219 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBTopologyQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBTopologyQueryDAO.java\n@@ -32,10 +32,8 @@\n import org.apache.skywalking.banyandb.v1.client.DataPoint;\n import org.apache.skywalking.banyandb.v1.client.MeasureQuery;\n import org.apache.skywalking.banyandb.v1.client.MeasureQueryResponse;\n-import org.apache.skywalking.banyandb.v1.client.TimestampRange;\n import org.apache.skywalking.oap.server.core.UnexpectedException;\n import org.apache.skywalking.oap.server.core.analysis.DownSampling;\n-import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n import org.apache.skywalking.oap.server.core.analysis.manual.relation.endpoint.EndpointRelationServerSideMetrics;\n import org.apache.skywalking.oap.server.core.analysis.manual.relation.instance.ServiceInstanceRelationClientSideMetrics;\n import org.apache.skywalking.oap.server.core.analysis.manual.relation.instance.ServiceInstanceRelationServerSideMetrics;\n@@ -54,8 +52,6 @@\n import org.apache.skywalking.oap.server.storage.plugin.banyandb.MetadataRegistry;\n import org.apache.skywalking.oap.server.storage.plugin.banyandb.stream.AbstractBanyanDBDAO;\n \n-import static java.util.Objects.nonNull;\n-\n public class BanyanDBTopologyQueryDAO extends AbstractBanyanDBDAO implements ITopologyQueryDAO {\n \n     public BanyanDBTopologyQueryDAO(final BanyanDBStorageClient client) {\n@@ -110,25 +106,16 @@ protected void apply(MeasureQuery query) {\n     List<Call.CallDetail> queryServiceRelation(Duration duration,\n                                                QueryBuilder<MeasureQuery> queryBuilder,\n                                                DetectPoint detectPoint) throws IOException {\n-        long startTB = 0;\n-        long endTB = 0;\n-        if (nonNull(duration)) {\n-            startTB = duration.getStartTimeBucketInSec();\n-            endTB = duration.getEndTimeBucketInSec();\n-        }\n-        TimestampRange timestampRange = null;\n-        if (startTB > 0 && endTB > 0) {\n-            timestampRange = new TimestampRange(TimeBucket.getTimestamp(startTB), TimeBucket.getTimestamp(endTB));\n-        }\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         final String modelName = detectPoint == DetectPoint.SERVER ? ServiceRelationServerSideMetrics.INDEX_NAME :\n                 ServiceRelationClientSideMetrics.INDEX_NAME;\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(modelName, duration.getStep());\n-        MeasureQueryResponse resp = queryDebuggable(schema,\n+        MeasureQueryResponse resp = queryDebuggable(isColdStage, schema,\n                 ImmutableSet.of(\n                         ServiceRelationClientSideMetrics.COMPONENT_IDS,\n                         Metrics.ENTITY_ID\n                 ),\n-                Collections.emptySet(), timestampRange, queryBuilder\n+                Collections.emptySet(), getTimestampRange(duration), queryBuilder\n         );\n         if (resp.size() == 0) {\n             return Collections.emptyList();\n@@ -193,24 +180,15 @@ protected void apply(MeasureQuery query) {\n     List<Call.CallDetail> queryInstanceRelation(Duration duration,\n                                                 QueryBuilder<MeasureQuery> queryBuilder,\n                                                 DetectPoint detectPoint) throws IOException {\n-        long startTB = 0;\n-        long endTB = 0;\n-        if (nonNull(duration)) {\n-            startTB = duration.getStartTimeBucketInSec();\n-            endTB = duration.getEndTimeBucketInSec();\n-        }\n-        TimestampRange timestampRange = null;\n-        if (startTB > 0 && endTB > 0) {\n-            timestampRange = new TimestampRange(TimeBucket.getTimestamp(startTB), TimeBucket.getTimestamp(endTB));\n-        }\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         final String modelName = detectPoint == DetectPoint.SERVER ? ServiceInstanceRelationServerSideMetrics.INDEX_NAME :\n                 ServiceInstanceRelationClientSideMetrics.INDEX_NAME;\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(modelName, duration.getStep());\n-        MeasureQueryResponse resp = queryDebuggable(schema,\n+        MeasureQueryResponse resp = queryDebuggable(isColdStage, schema,\n                 ImmutableSet.of(\n                         Metrics.ENTITY_ID\n                 ),\n-                Collections.emptySet(), timestampRange, queryBuilder\n+                Collections.emptySet(), getTimestampRange(duration), queryBuilder\n         );\n         if (resp.size() == 0) {\n             return Collections.emptyList();\n@@ -259,22 +237,13 @@ protected void apply(MeasureQuery query) {\n     List<Call.CallDetail> queryEndpointRelation(Duration duration,\n                                                 QueryBuilder<MeasureQuery> queryBuilder,\n                                                 DetectPoint detectPoint) throws IOException {\n-        long startTB = 0;\n-        long endTB = 0;\n-        if (nonNull(duration)) {\n-            startTB = duration.getStartTimeBucketInSec();\n-            endTB = duration.getEndTimeBucketInSec();\n-        }\n-        TimestampRange timestampRange = null;\n-        if (startTB > 0 && endTB > 0) {\n-            timestampRange = new TimestampRange(TimeBucket.getTimestamp(startTB), TimeBucket.getTimestamp(endTB));\n-        }\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(EndpointRelationServerSideMetrics.INDEX_NAME, duration.getStep());\n-        MeasureQueryResponse resp = queryDebuggable(schema,\n+        MeasureQueryResponse resp = queryDebuggable(isColdStage, schema,\n                 ImmutableSet.of(\n                         Metrics.ENTITY_ID\n                 ),\n-                Collections.emptySet(), timestampRange, queryBuilder\n+                Collections.emptySet(), getTimestampRange(duration), queryBuilder\n         );\n         if (resp.size() == 0) {\n             return Collections.emptyList();\n@@ -292,23 +261,14 @@ List<Call.CallDetail> queryEndpointRelation(Duration duration,\n     List<Call.CallDetail> queryProcessRelation(Duration duration,\n                                                String serviceInstanceId,\n                                                DetectPoint detectPoint) throws IOException {\n-        long startTB = 0;\n-        long endTB = 0;\n-        if (nonNull(duration)) {\n-            startTB = duration.getStartTimeBucketInSec();\n-            endTB = duration.getEndTimeBucketInSec();\n-        }\n-        TimestampRange timestampRange = null;\n-        if (startTB > 0 && endTB > 0) {\n-            timestampRange = new TimestampRange(TimeBucket.getTimestamp(startTB), TimeBucket.getTimestamp(endTB));\n-        }\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         final String modelName = detectPoint == DetectPoint.SERVER ? ProcessRelationServerSideMetrics.INDEX_NAME :\n                 ProcessRelationClientSideMetrics.INDEX_NAME;\n         // process relation only has minute data\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(modelName, DownSampling.Minute);\n-        MeasureQueryResponse resp = queryDebuggable(schema,\n+        MeasureQueryResponse resp = queryDebuggable(isColdStage, schema,\n                 ImmutableSet.of(Metrics.ENTITY_ID, ProcessRelationClientSideMetrics.COMPONENT_ID),\n-                Collections.emptySet(), timestampRange, new QueryBuilder<MeasureQuery>() {\n+                Collections.emptySet(), getTimestampRange(duration), new QueryBuilder<MeasureQuery>() {\n                     @Override\n                     protected void apply(MeasureQuery query) {\n                         query.and(eq(ProcessRelationServerSideMetrics.SERVICE_INSTANCE_ID, serviceInstanceId));\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java\nindex 9f6cef7b1b42..6be527421ebc 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java\n@@ -20,6 +20,7 @@\n \n import com.google.gson.Gson;\n import java.util.Objects;\n+import javax.annotation.Nullable;\n import org.apache.skywalking.banyandb.model.v1.BanyandbModel;\n import org.apache.skywalking.banyandb.v1.client.AbstractCriteria;\n import org.apache.skywalking.banyandb.v1.client.AbstractQuery;\n@@ -36,12 +37,14 @@\n import org.apache.skywalking.banyandb.v1.client.TopNQueryResponse;\n import org.apache.skywalking.banyandb.v1.client.Trace;\n import org.apache.skywalking.oap.server.core.query.input.AttrCondition;\n+import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.query.type.KeyValue;\n import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingSpan;\n import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext;\n import org.apache.skywalking.oap.server.core.storage.AbstractDAO;\n import org.apache.skywalking.oap.server.library.util.CollectionUtils;\n import org.apache.skywalking.oap.server.storage.plugin.banyandb.BanyanDBStorageClient;\n+import org.apache.skywalking.oap.server.storage.plugin.banyandb.BanyanDBStorageConfig;\n import org.apache.skywalking.oap.server.storage.plugin.banyandb.MetadataRegistry;\n import java.io.IOException;\n import java.time.Instant;\n@@ -63,11 +66,17 @@ protected AbstractBanyanDBDAO(BanyanDBStorageClient client) {\n         super(client);\n     }\n \n-    protected StreamQueryResponse query(String streamModelName, Set<String> tags, QueryBuilder<StreamQuery> builder) throws IOException {\n-        return this.query(streamModelName, tags, null, builder);\n+    protected StreamQueryResponse query(boolean isColdStage,\n+                                        String streamModelName,\n+                                        Set<String> tags,\n+                                        QueryBuilder<StreamQuery> builder) throws IOException {\n+        return this.query(isColdStage, streamModelName, tags, null, builder);\n     }\n \n-    protected StreamQueryResponse query(String streamModelName, Set<String> tags, TimestampRange timestampRange,\n+    protected StreamQueryResponse query(boolean isColdStage,\n+                                        String streamModelName,\n+                                        Set<String> tags,\n+                                        TimestampRange timestampRange,\n                                         QueryBuilder<StreamQuery> builder) throws IOException {\n         MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findRecordMetadata(streamModelName);\n         if (schema == null) {\n@@ -79,6 +88,9 @@ protected StreamQueryResponse query(String streamModelName, Set<String> tags, Ti\n         } else {\n             query = new StreamQuery(List.of(schema.getMetadata().getGroup()), schema.getMetadata().name(), timestampRange, tags);\n         }\n+        if (isColdStage) {\n+            query.setStages(Set.of(BanyanDBStorageConfig.StageName.cold.name()));\n+        }\n \n         builder.apply(query);\n         DebuggingTraceContext traceContext = DebuggingTraceContext.TRACE_CONTEXT.get();\n@@ -88,7 +100,10 @@ protected StreamQueryResponse query(String streamModelName, Set<String> tags, Ti\n         return getClient().query(query);\n     }\n \n-    protected StreamQueryResponse queryDebuggable(String modelName, Set<String> tags, TimestampRange timestampRange,\n+    protected StreamQueryResponse queryDebuggable(boolean isColdStage,\n+                                                  String modelName,\n+                                                  Set<String> tags,\n+                                                  TimestampRange timestampRange,\n                                                   QueryBuilder<StreamQuery> queryBuilder) throws IOException {\n         DebuggingTraceContext traceContext = DebuggingTraceContext.TRACE_CONTEXT.get();\n         DebuggingSpan span = null;\n@@ -105,10 +120,12 @@ protected StreamQueryResponse queryDebuggable(String modelName, Set<String> tags\n                        .append(\"", Tags: \"")\n                        .append(tags)\n                        .append(\"", TimestampRange: \"")\n-                       .append(timestampRange);\n+                       .append(timestampRange)\n+                       .append(\"", Is cold data query: \"")\n+                       .append(isColdStage);\n                 span.setMsg(builder.toString());\n             }\n-            StreamQueryResponse response = query(modelName, tags, timestampRange, queryBuilder);\n+            StreamQueryResponse response = query(isColdStage, modelName, tags, timestampRange, queryBuilder);\n             if (traceContext != null && traceContext.isDumpStorageRsp()) {\n                 builder.append(\""\\n\"").append(\"" Response: \"").append(new Gson().toJson(response.getElements()));\n                 span.setMsg(builder.toString());\n@@ -138,7 +155,8 @@ protected TopNQueryResponse bottomN(MetadataRegistry.Schema schema,\n         return topNQuery(schema, timestampRange, number, AbstractQuery.Sort.ASC, additionalConditions, attributes);\n     }\n \n-    protected TopNQueryResponse topNQueryDebuggable(MetadataRegistry.Schema schema,\n+    protected TopNQueryResponse topNQueryDebuggable(boolean isColdStage,\n+                                                    MetadataRegistry.Schema schema,\n                                                     TimestampRange timestampRange,\n                                                     int number,\n                                                     AbstractQuery.Sort sort,\n@@ -162,7 +180,9 @@ protected TopNQueryResponse topNQueryDebuggable(MetadataRegistry.Schema schema,\n                        .append(\"", AdditionalConditions: \"")\n                        .append(additionalConditions)\n                        .append(\"", Attributes: \"")\n-                       .append(attributes);\n+                       .append(attributes)\n+                       .append(\"", Is cold data query: \"")\n+                       .append(isColdStage);\n                 span.setMsg(builder.toString());\n             }\n             TopNQueryResponse response = topNQuery(schema, timestampRange, number, sort, additionalConditions, attributes);\n@@ -209,7 +229,8 @@ private TopNQueryResponse topNQuery(MetadataRegistry.Schema schema,\n         return getClient().query(q);\n     }\n \n-    protected MeasureQueryResponse queryDebuggable(MetadataRegistry.Schema schema,\n+    protected MeasureQueryResponse queryDebuggable(boolean isColdStage,\n+                                                   MetadataRegistry.Schema schema,\n                                                    Set<String> tags,\n                                                    Set<String> fields,\n                                                    TimestampRange timestampRange,\n@@ -228,10 +249,12 @@ protected MeasureQueryResponse queryDebuggable(MetadataRegistry.Schema schema,\n                        .append(\"", Fields: \"")\n                        .append(fields)\n                        .append(\"", TimestampRange: \"")\n-                       .append(timestampRange);\n+                       .append(timestampRange)\n+                       .append(\"", Is cold data query: \"")\n+                       .append(isColdStage);\n                 span.setMsg(builder.toString());\n             }\n-            MeasureQueryResponse response = query(schema, tags, fields, timestampRange, queryBuilder);\n+            MeasureQueryResponse response = query(isColdStage, schema, tags, fields, timestampRange, queryBuilder);\n             if (traceContext != null && traceContext.isDumpStorageRsp()) {\n                 builder.append(\""\\n\"").append(\"" Response: \"").append(new Gson().toJson(response.getDataPoints()));\n                 span.setMsg(builder.toString());\n@@ -245,15 +268,20 @@ protected MeasureQueryResponse queryDebuggable(MetadataRegistry.Schema schema,\n         }\n     }\n \n-    protected MeasureQueryResponse query(MetadataRegistry.Schema schema,\n+    protected MeasureQueryResponse query(boolean isColdStage,\n+                                         MetadataRegistry.Schema schema,\n                                          Set<String> tags,\n                                          Set<String> fields,\n                                          QueryBuilder<MeasureQuery> builder) throws IOException {\n-        return query(schema, tags, fields, null, builder);\n+        return query(isColdStage, schema, tags, fields, null, builder);\n     }\n \n-    protected MeasureQueryResponse query(MetadataRegistry.Schema schema, Set<String> tags, Set<String> fields,\n-                                         TimestampRange timestampRange, QueryBuilder<MeasureQuery> builder) throws IOException {\n+    protected MeasureQueryResponse query(boolean isColdStage,\n+                                         MetadataRegistry.Schema schema,\n+                                         Set<String> tags,\n+                                         Set<String> fields,\n+                                         TimestampRange timestampRange,\n+                                         QueryBuilder<MeasureQuery> builder) throws IOException {\n         if (schema == null) {\n             throw new IllegalArgumentException(\""measure is not registered\"");\n         }\n@@ -263,6 +291,9 @@ protected MeasureQueryResponse query(MetadataRegistry.Schema schema, Set<String>\n         } else {\n             query = new MeasureQuery(List.of(schema.getMetadata().getGroup()), schema.getMetadata().name(), timestampRange, tags, fields);\n         }\n+        if (isColdStage) {\n+            query.setStages(Set.of(BanyanDBStorageConfig.StageName.cold.name()));\n+        }\n \n         builder.apply(query);\n         DebuggingTraceContext traceContext = DebuggingTraceContext.TRACE_CONTEXT.get();\n@@ -378,4 +409,20 @@ protected AbstractCriteria or(List<? extends AbstractCriteria> conditions) {\n                     Or::create);\n         }\n     }\n+\n+    protected TimestampRange getTimestampRange(@Nullable Duration duration) {\n+        long startTimeMillis = 0;\n+        long endTimeMillis = 0;\n+        if (duration != null) {\n+            startTimeMillis = duration.getStartTimestamp();\n+            endTimeMillis = duration.getEndTimestamp();\n+        }\n+        TimestampRange tsRange = null;\n+\n+        if (startTimeMillis > 0 && endTimeMillis > 0) {\n+            tsRange = new TimestampRange(startTimeMillis, endTimeMillis);\n+        }\n+\n+        return tsRange;\n+    }\n }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAlarmQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAlarmQueryDAO.java\nindex 417a692e5fc9..c50a5d1f708a 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAlarmQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAlarmQueryDAO.java\n@@ -23,9 +23,7 @@\n import org.apache.skywalking.banyandb.v1.client.RowEntity;\n import org.apache.skywalking.banyandb.v1.client.StreamQuery;\n import org.apache.skywalking.banyandb.v1.client.StreamQueryResponse;\n-import org.apache.skywalking.banyandb.v1.client.TimestampRange;\n import org.apache.skywalking.oap.server.core.alarm.AlarmRecord;\n-import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.query.type.AlarmMessage;\n@@ -57,15 +55,9 @@ public BanyanDBAlarmQueryDAO(BanyanDBStorageClient client) {\n \n     @Override\n     public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from, Duration duration, List<Tag> tags) throws IOException {\n-        long startTB = duration.getStartTimeBucketInSec();\n-        long endTB = duration.getEndTimeBucketInSec();\n-        TimestampRange tsRange = null;\n-        if (startTB > 0 && endTB > 0) {\n-            tsRange = new TimestampRange(TimeBucket.getTimestamp(startTB), TimeBucket.getTimestamp(endTB));\n-        }\n-\n-        StreamQueryResponse resp = query(AlarmRecord.INDEX_NAME, TAGS,\n-                tsRange,\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n+        StreamQueryResponse resp = query(isColdStage, AlarmRecord.INDEX_NAME, TAGS,\n+                getTimestampRange(duration),\n                 new QueryBuilder<StreamQuery>() {\n                     @Override\n                     public void apply(StreamQuery query) {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAsyncProfilerTaskLogQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAsyncProfilerTaskLogQueryDAO.java\nindex cb066b722ab8..8fcf708db1cf 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAsyncProfilerTaskLogQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAsyncProfilerTaskLogQueryDAO.java\n@@ -54,7 +54,7 @@ public BanyanDBAsyncProfilerTaskLogQueryDAO(BanyanDBStorageClient client, int ta\n \n     @Override\n     public List<AsyncProfilerTaskLog> getTaskLogList() throws IOException {\n-        StreamQueryResponse resp = query(AsyncProfilerTaskLogRecord.INDEX_NAME, TAGS,\n+        StreamQueryResponse resp = query(false, AsyncProfilerTaskLogRecord.INDEX_NAME, TAGS,\n                 new QueryBuilder<StreamQuery>() {\n                     @Override\n                     public void apply(StreamQuery query) {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAsyncProfilerTaskQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAsyncProfilerTaskQueryDAO.java\nindex 1b478398c047..aaf9d453b1d2 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAsyncProfilerTaskQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAsyncProfilerTaskQueryDAO.java\n@@ -70,7 +70,7 @@ public List<AsyncProfilerTask> getTaskList(String serviceId, Long startTimeBucke\n         if (endTimeBucket != null) {\n             endTS = TimeBucket.getTimestamp(endTimeBucket);\n         }\n-        StreamQueryResponse resp = query(AsyncProfilerTaskRecord.INDEX_NAME, TAGS, new TimestampRange(startTS, endTS),\n+        StreamQueryResponse resp = query(false, AsyncProfilerTaskRecord.INDEX_NAME, TAGS, new TimestampRange(startTS, endTS),\n                 new QueryBuilder<StreamQuery>() {\n                     @Override\n                     protected void apply(StreamQuery query) {\n@@ -96,7 +96,7 @@ protected void apply(StreamQuery query) {\n \n     @Override\n     public AsyncProfilerTask getById(String id) throws IOException {\n-        StreamQueryResponse resp = query(AsyncProfilerTaskRecord.INDEX_NAME, TAGS,\n+        StreamQueryResponse resp = query(false, AsyncProfilerTaskRecord.INDEX_NAME, TAGS,\n                 new QueryBuilder<StreamQuery>() {\n                     @Override\n                     protected void apply(StreamQuery query) {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBBrowserLogQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBBrowserLogQueryDAO.java\nindex 1733953db81a..4e5582486189 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBBrowserLogQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBBrowserLogQueryDAO.java\n@@ -22,8 +22,6 @@\n import org.apache.skywalking.banyandb.v1.client.RowEntity;\n import org.apache.skywalking.banyandb.v1.client.StreamQuery;\n import org.apache.skywalking.banyandb.v1.client.StreamQueryResponse;\n-import org.apache.skywalking.banyandb.v1.client.TimestampRange;\n-import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n import org.apache.skywalking.oap.server.core.browser.manual.errorlog.BrowserErrorLogRecord;\n import org.apache.skywalking.oap.server.core.browser.source.BrowserErrorCategory;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n@@ -32,7 +30,6 @@\n import org.apache.skywalking.oap.server.core.storage.query.IBrowserLogQueryDAO;\n import org.apache.skywalking.oap.server.library.util.StringUtil;\n import org.apache.skywalking.oap.server.storage.plugin.banyandb.BanyanDBStorageClient;\n-\n import java.io.IOException;\n import java.util.Objects;\n import java.util.Set;\n@@ -53,15 +50,9 @@ public BanyanDBBrowserLogQueryDAO(BanyanDBStorageClient client) {\n     public BrowserErrorLogs queryBrowserErrorLogs(String serviceId, String serviceVersionId, String pagePathId,\n                                                   BrowserErrorCategory category, Duration duration,\n                                                   int limit, int from) throws IOException {\n-        long startSecondTB = duration.getStartTimeBucketInSec();\n-        long endSecondTB = duration.getEndTimeBucketInSec();\n-        TimestampRange tsRange = null;\n-        if (startSecondTB > 0 && endSecondTB > 0) {\n-            tsRange = new TimestampRange(TimeBucket.getTimestamp(startSecondTB), TimeBucket.getTimestamp(endSecondTB));\n-        }\n-\n-        StreamQueryResponse resp = query(BrowserErrorLogRecord.INDEX_NAME, TAGS,\n-                tsRange, new QueryBuilder<StreamQuery>() {\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n+        StreamQueryResponse resp = query(isColdStage, BrowserErrorLogRecord.INDEX_NAME, TAGS,\n+                getTimestampRange(duration), new QueryBuilder<StreamQuery>() {\n                     @Override\n                     public void apply(StreamQuery query) {\n                         if (StringUtil.isNotEmpty(serviceId)) {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBEBPFProfilingDataDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBEBPFProfilingDataDAO.java\nindex c6110c414a73..19d8717fc872 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBEBPFProfilingDataDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBEBPFProfilingDataDAO.java\n@@ -51,7 +51,7 @@ public BanyanDBEBPFProfilingDataDAO(BanyanDBStorageClient client, int profileDat\n     public List<EBPFProfilingDataRecord> queryData(List<String> scheduleIdList, long beginTime, long endTime) throws IOException {\n         List<EBPFProfilingDataRecord> records = new ArrayList<>();\n         for (final String scheduleId : scheduleIdList) {\n-            StreamQueryResponse resp = query(EBPFProfilingDataRecord.INDEX_NAME,\n+            StreamQueryResponse resp = query(false, EBPFProfilingDataRecord.INDEX_NAME,\n                     TAGS,\n                     new QueryBuilder<StreamQuery>() {\n                         @Override\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBEBPFProfilingTaskDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBEBPFProfilingTaskDAO.java\nindex 8880e34bd738..d601ffb1ce3b 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBEBPFProfilingTaskDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBEBPFProfilingTaskDAO.java\n@@ -62,7 +62,7 @@ public List<EBPFProfilingTaskRecord> queryTasksByServices(List<String> serviceId\n                                                         long taskStartTime, long latestUpdateTime) throws IOException {\n         List<EBPFProfilingTaskRecord> tasks = new ArrayList<>();\n         for (final String serviceId : serviceIdList) {\n-            StreamQueryResponse resp = query(EBPFProfilingTaskRecord.INDEX_NAME, TAGS,\n+            StreamQueryResponse resp = query(false, EBPFProfilingTaskRecord.INDEX_NAME, TAGS,\n                 new QueryBuilder<StreamQuery>() {\n                     @Override\n                     protected void apply(StreamQuery query) {\n@@ -85,7 +85,7 @@ public List<EBPFProfilingTaskRecord> queryTasksByTargets(String serviceId, Strin\n                                                        EBPFProfilingTriggerType triggerType, long taskStartTime, long latestUpdateTime) throws IOException {\n         List<EBPFProfilingTaskRecord> tasks = new ArrayList<>();\n         for (final EBPFProfilingTargetType targetType : targetTypes) {\n-            StreamQueryResponse resp = query(EBPFProfilingTaskRecord.INDEX_NAME, TAGS,\n+            StreamQueryResponse resp = query(false, EBPFProfilingTaskRecord.INDEX_NAME, TAGS,\n                 new QueryBuilder<StreamQuery>() {\n                     @Override\n                     protected void apply(StreamQuery query) {\n@@ -111,7 +111,7 @@ protected void apply(StreamQuery query) {\n \n     @Override\n     public List<EBPFProfilingTaskRecord> getTaskRecord(String id) throws IOException {\n-        StreamQueryResponse resp = query(EBPFProfilingTaskRecord.INDEX_NAME, TAGS,\n+        StreamQueryResponse resp = query(false, EBPFProfilingTaskRecord.INDEX_NAME, TAGS,\n             new QueryBuilder<StreamQuery>() {\n                 @Override\n                 protected void apply(StreamQuery query) {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBJFRDataQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBJFRDataQueryDAO.java\nindex 732130edac0c..d54cc5a29339 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBJFRDataQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBJFRDataQueryDAO.java\n@@ -53,7 +53,7 @@ public List<JFRProfilingDataRecord> getByTaskIdAndInstancesAndEvent(String taskI\n         if (StringUtil.isBlank(taskId) || StringUtil.isBlank(eventType)) {\n             return new ArrayList<>();\n         }\n-        StreamQueryResponse resp = query(JFRProfilingDataRecord.INDEX_NAME, TAGS,\n+        StreamQueryResponse resp = query(false, JFRProfilingDataRecord.INDEX_NAME, TAGS,\n                 new QueryBuilder<StreamQuery>() {\n                     @Override\n                     protected void apply(StreamQuery query) {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBLogQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBLogQueryDAO.java\nindex bd731c956490..7a4cfbfc49e8 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBLogQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBLogQueryDAO.java\n@@ -22,9 +22,7 @@\n import org.apache.skywalking.banyandb.v1.client.RowEntity;\n import org.apache.skywalking.banyandb.v1.client.StreamQuery;\n import org.apache.skywalking.banyandb.v1.client.StreamQueryResponse;\n-import org.apache.skywalking.banyandb.v1.client.TimestampRange;\n import org.apache.skywalking.oap.server.core.analysis.IDManager;\n-import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n import org.apache.skywalking.oap.server.core.analysis.manual.log.AbstractLogRecord;\n import org.apache.skywalking.oap.server.core.analysis.manual.log.LogRecord;\n import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;\n@@ -38,15 +36,12 @@\n import org.apache.skywalking.oap.server.library.util.CollectionUtils;\n import org.apache.skywalking.oap.server.library.util.StringUtil;\n import org.apache.skywalking.oap.server.storage.plugin.banyandb.BanyanDBStorageClient;\n-\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n \n-import static java.util.Objects.nonNull;\n-\n /**\n  * {@link org.apache.skywalking.oap.server.core.analysis.manual.log.LogRecord} is a stream\n  */\n@@ -72,12 +67,7 @@ public Logs queryLogs(String serviceId, String serviceInstanceId, String endpoin\n                           TraceScopeCondition relatedTrace, Order queryOrder, int from, int limit,\n                           Duration duration, List<Tag> tags, List<String> keywordsOfContent,\n                           List<String> excludingKeywordsOfContent) throws IOException {\n-        long startTB = 0;\n-        long endTB = 0;\n-        if (nonNull(duration)) {\n-            startTB = duration.getStartTimeBucketInSec();\n-            endTB = duration.getEndTimeBucketInSec();\n-        }\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         final QueryBuilder<StreamQuery> query = new QueryBuilder<StreamQuery>() {\n             @Override\n             public void apply(StreamQuery query) {\n@@ -113,12 +103,7 @@ public void apply(StreamQuery query) {\n             }\n         };\n \n-        TimestampRange tsRange = null;\n-        if (startTB > 0 && endTB > 0) {\n-            tsRange = new TimestampRange(TimeBucket.getTimestamp(startTB), TimeBucket.getTimestamp(endTB));\n-        }\n-\n-        StreamQueryResponse resp = queryDebuggable(LogRecord.INDEX_NAME, TAGS, tsRange, query);\n+        StreamQueryResponse resp = queryDebuggable(isColdStage, LogRecord.INDEX_NAME, TAGS, getTimestampRange(duration), query);\n \n         Logs logs = new Logs();\n \n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileTaskLogQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileTaskLogQueryDAO.java\nindex 709ce7200968..420c0b5b99d7 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileTaskLogQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileTaskLogQueryDAO.java\n@@ -50,7 +50,7 @@ public BanyanDBProfileTaskLogQueryDAO(BanyanDBStorageClient client, int profileT\n \n     @Override\n     public List<ProfileTaskLog> getTaskLogList() throws IOException {\n-        StreamQueryResponse resp = query(ProfileTaskLogRecord.INDEX_NAME, TAGS,\n+        StreamQueryResponse resp = query(false, ProfileTaskLogRecord.INDEX_NAME, TAGS,\n                 new QueryBuilder<StreamQuery>() {\n                     @Override\n                     public void apply(StreamQuery query) {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileTaskQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileTaskQueryDAO.java\nindex 3d35cd693ca2..040db07a5e62 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileTaskQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileTaskQueryDAO.java\n@@ -67,7 +67,7 @@ public List<ProfileTask> getTaskList(String serviceId, String endpointName, Long\n         if (endTimeBucket != null) {\n             endTS = TimeBucket.getTimestamp(endTimeBucket);\n         }\n-        StreamQueryResponse resp = query(ProfileTaskRecord.INDEX_NAME, TAGS, new TimestampRange(startTS, endTS),\n+        StreamQueryResponse resp = query(false, ProfileTaskRecord.INDEX_NAME, TAGS, new TimestampRange(startTS, endTS),\n                 new QueryBuilder<StreamQuery>() {\n                     @Override\n                     protected void apply(StreamQuery query) {\n@@ -101,7 +101,7 @@ protected void apply(StreamQuery query) {\n \n     @Override\n     public ProfileTask getById(String id) throws IOException {\n-        StreamQueryResponse resp = query(ProfileTaskRecord.INDEX_NAME, TAGS,\n+        StreamQueryResponse resp = query(false, ProfileTaskRecord.INDEX_NAME, TAGS,\n                 new QueryBuilder<StreamQuery>() {\n                     @Override\n                     protected void apply(StreamQuery query) {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileThreadSnapshotQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileThreadSnapshotQueryDAO.java\nindex 573ac729591b..337ec9f2d55a 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileThreadSnapshotQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBProfileThreadSnapshotQueryDAO.java\n@@ -79,7 +79,7 @@ public BanyanDBProfileThreadSnapshotQueryDAO(BanyanDBStorageClient client, int p\n \n     @Override\n     public List<String> queryProfiledSegmentIdList(String taskId) throws IOException {\n-        StreamQueryResponse resp = query(ProfileThreadSnapshotRecord.INDEX_NAME,\n+        StreamQueryResponse resp = query(false, ProfileThreadSnapshotRecord.INDEX_NAME,\n                 TAGS_BASIC,\n                 new QueryBuilder<StreamQuery>() {\n                     @Override\n@@ -115,7 +115,7 @@ public int queryMaxSequence(String segmentId, long start, long end) throws IOExc\n \n     @Override\n     public List<ProfileThreadSnapshotRecord> queryRecords(String segmentId, int minSequence, int maxSequence) throws IOException {\n-        StreamQueryResponse resp = query(ProfileThreadSnapshotRecord.INDEX_NAME,\n+        StreamQueryResponse resp = query(false, ProfileThreadSnapshotRecord.INDEX_NAME,\n                 TAGS_ALL,\n                 new QueryBuilder<StreamQuery>() {\n                     @Override\n@@ -136,7 +136,7 @@ public void apply(StreamQuery query) {\n     }\n \n     private int querySequenceWithAgg(AggType aggType, String segmentId, long start, long end) throws IOException {\n-        StreamQueryResponse resp = query(ProfileThreadSnapshotRecord.INDEX_NAME,\n+        StreamQueryResponse resp = query(false, ProfileThreadSnapshotRecord.INDEX_NAME,\n                 TAGS_ALL, new TimestampRange(start, end),\n                 new QueryBuilder<StreamQuery>() {\n                     @Override\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBSpanAttachedEventQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBSpanAttachedEventQueryDAO.java\nindex e745c114fb20..74e625870e6e 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBSpanAttachedEventQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBSpanAttachedEventQueryDAO.java\n@@ -19,12 +19,14 @@\n package org.apache.skywalking.oap.server.storage.plugin.banyandb.stream;\n \n import com.google.common.collect.ImmutableSet;\n+import javax.annotation.Nullable;\n import org.apache.skywalking.banyandb.v1.client.AbstractQuery;\n import org.apache.skywalking.banyandb.v1.client.RowEntity;\n import org.apache.skywalking.banyandb.v1.client.StreamQuery;\n import org.apache.skywalking.banyandb.v1.client.StreamQueryResponse;\n import org.apache.skywalking.oap.server.core.analysis.manual.spanattach.SpanAttachedEventRecord;\n import org.apache.skywalking.oap.server.core.analysis.manual.spanattach.SpanAttachedEventTraceType;\n+import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.storage.query.ISpanAttachedEventQueryDAO;\n import org.apache.skywalking.oap.server.storage.plugin.banyandb.BanyanDBConverter;\n import org.apache.skywalking.oap.server.storage.plugin.banyandb.BanyanDBStorageClient;\n@@ -54,8 +56,11 @@ public BanyanDBSpanAttachedEventQueryDAO(BanyanDBStorageClient client, int profi\n     }\n \n     @Override\n-    public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds) throws IOException {\n-        final StreamQueryResponse resp = queryDebuggable(SpanAttachedEventRecord.INDEX_NAME, TAGS, null, new QueryBuilder<StreamQuery>() {\n+    public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds, @Nullable Duration duration) throws IOException {\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n+        final StreamQueryResponse resp = queryDebuggable(\n+            isColdStage, SpanAttachedEventRecord.INDEX_NAME, TAGS, getTimestampRange(duration),\n+            new QueryBuilder<StreamQuery>() {\n             @Override\n             protected void apply(StreamQuery query) {\n                 query.and(in(SpanAttachedEventRecord.RELATED_TRACE_ID, traceIds));\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBTraceQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBTraceQueryDAO.java\nindex bb8c3b42717e..c40206551924 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBTraceQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBTraceQueryDAO.java\n@@ -20,14 +20,13 @@\n \n import com.google.common.base.Strings;\n import com.google.common.collect.ImmutableSet;\n+import javax.annotation.Nullable;\n import org.apache.skywalking.banyandb.v1.client.AbstractQuery;\n import org.apache.skywalking.banyandb.v1.client.Element;\n import org.apache.skywalking.banyandb.v1.client.RowEntity;\n import org.apache.skywalking.banyandb.v1.client.StreamQuery;\n import org.apache.skywalking.banyandb.v1.client.StreamQueryResponse;\n-import org.apache.skywalking.banyandb.v1.client.TimestampRange;\n import org.apache.skywalking.oap.server.core.analysis.IDManager;\n-import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;\n import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n@@ -49,8 +48,6 @@\n import java.util.List;\n import java.util.Set;\n \n-import static java.util.Objects.nonNull;\n-\n public class BanyanDBTraceQueryDAO extends AbstractBanyanDBDAO implements ITraceQueryDAO {\n     private static final Set<String> BASIC_TAGS = ImmutableSet.of(SegmentRecord.TRACE_ID,\n             SegmentRecord.IS_ERROR,\n@@ -80,12 +77,7 @@ public BanyanDBTraceQueryDAO(BanyanDBStorageClient client, int segmentQueryMaxSi\n \n     @Override\n     public TraceBrief queryBasicTraces(Duration duration, long minDuration, long maxDuration, String serviceId, String serviceInstanceId, String endpointId, String traceId, int limit, int from, TraceState traceState, QueryOrder queryOrder, List<Tag> tags) throws IOException {\n-        long startSecondTB = 0;\n-        long endSecondTB = 0;\n-        if (nonNull(duration)) {\n-            startSecondTB = duration.getStartTimeBucketInSec();\n-            endSecondTB = duration.getEndTimeBucketInSec();\n-        }\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n         final QueryBuilder<StreamQuery> q = new QueryBuilder<StreamQuery>() {\n             @Override\n             public void apply(StreamQuery query) {\n@@ -145,15 +137,9 @@ public void apply(StreamQuery query) {\n             }\n         };\n \n-        TimestampRange tsRange = null;\n-\n-        if (startSecondTB > 0 && endSecondTB > 0) {\n-            tsRange = new TimestampRange(TimeBucket.getTimestamp(startSecondTB), TimeBucket.getTimestamp(endSecondTB));\n-        }\n-\n-        StreamQueryResponse resp = queryDebuggable(SegmentRecord.INDEX_NAME,\n-                BASIC_TAGS,\n-                tsRange, q);\n+        StreamQueryResponse resp = queryDebuggable(isColdStage, SegmentRecord.INDEX_NAME,\n+                                                   BASIC_TAGS,\n+                                                   getTimestampRange(duration), q);\n \n         TraceBrief traceBrief = new TraceBrief();\n \n@@ -182,9 +168,10 @@ public void apply(StreamQuery query) {\n     }\n \n     @Override\n-    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n-        StreamQueryResponse resp = queryDebuggable(SegmentRecord.INDEX_NAME, TAGS, null,\n-                new QueryBuilder<StreamQuery>() {\n+    public List<SegmentRecord> queryByTraceId(String traceId, @Nullable Duration duration) throws IOException {\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n+        StreamQueryResponse resp = queryDebuggable(isColdStage, SegmentRecord.INDEX_NAME, TAGS, getTimestampRange(duration),\n+            new QueryBuilder<StreamQuery>() {\n                     @Override\n                     public void apply(StreamQuery query) {\n                         query.and(eq(SegmentRecord.TRACE_ID, traceId));\n@@ -195,8 +182,9 @@ public void apply(StreamQuery query) {\n     }\n \n     @Override\n-    public List<SegmentRecord> queryBySegmentIdList(List<String> segmentIdList) throws IOException {\n-        StreamQueryResponse resp = query(SegmentRecord.INDEX_NAME, TAGS,\n+    public List<SegmentRecord> queryBySegmentIdList(List<String> segmentIdList, @Nullable Duration duration) throws IOException {\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n+        StreamQueryResponse resp = query(isColdStage, SegmentRecord.INDEX_NAME, TAGS, getTimestampRange(duration),\n             new QueryBuilder<StreamQuery>() {\n                 @Override\n                 public void apply(StreamQuery query) {\n@@ -208,8 +196,9 @@ public void apply(StreamQuery query) {\n     }\n \n     @Override\n-    public List<SegmentRecord> queryByTraceIdWithInstanceId(List<String> traceIdList, List<String> instanceIdList) throws IOException {\n-        StreamQueryResponse resp = query(SegmentRecord.INDEX_NAME, TAGS,\n+    public List<SegmentRecord> queryByTraceIdWithInstanceId(List<String> traceIdList, List<String> instanceIdList, @Nullable Duration duration) throws IOException {\n+        final boolean isColdStage = duration != null && duration.isColdStage();\n+        StreamQueryResponse resp = query(isColdStage, SegmentRecord.INDEX_NAME, TAGS, getTimestampRange(duration),\n             new QueryBuilder<StreamQuery>() {\n                 @Override\n                 public void apply(StreamQuery query) {\n\ndiff --git a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/SpanAttachedEventEsDAO.java b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/SpanAttachedEventEsDAO.java\nindex 2706f90d1144..91be71ff8f43 100644\n--- a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/SpanAttachedEventEsDAO.java\n+++ b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/SpanAttachedEventEsDAO.java\n@@ -18,6 +18,7 @@\n \n package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query;\n \n+import javax.annotation.Nullable;\n import org.apache.skywalking.library.elasticsearch.requests.search.BoolQueryBuilder;\n import org.apache.skywalking.library.elasticsearch.requests.search.Query;\n import org.apache.skywalking.library.elasticsearch.requests.search.Search;\n@@ -27,6 +28,7 @@\n import org.apache.skywalking.library.elasticsearch.response.search.SearchHit;\n import org.apache.skywalking.oap.server.core.analysis.manual.spanattach.SpanAttachedEventRecord;\n import org.apache.skywalking.oap.server.core.analysis.manual.spanattach.SpanAttachedEventTraceType;\n+import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.storage.query.ISpanAttachedEventQueryDAO;\n import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;\n import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchScroller;\n@@ -54,7 +56,7 @@ public SpanAttachedEventEsDAO(ElasticSearchClient client, StorageModuleElasticse\n     }\n \n     @Override\n-    public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds) throws IOException {\n+    public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds, @Nullable Duration duration) throws IOException {\n         final String index =\n             IndexController.LogicIndicesRegister.getPhysicalTableName(SpanAttachedEventRecord.INDEX_NAME);\n         final BoolQueryBuilder query = Query.bool();\n\ndiff --git a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java\nindex dba4d3fe7b5f..8153c4b14092 100644\n--- a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java\n+++ b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java\n@@ -23,6 +23,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import javax.annotation.Nullable;\n import org.apache.skywalking.library.elasticsearch.requests.search.BoolQueryBuilder;\n import org.apache.skywalking.library.elasticsearch.requests.search.Query;\n import org.apache.skywalking.library.elasticsearch.requests.search.RangeQueryBuilder;\n@@ -178,7 +179,7 @@ public TraceBrief queryBasicTraces(Duration duration,\n     }\n \n     @Override\n-    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n+    public List<SegmentRecord> queryByTraceId(String traceId, @Nullable Duration duration) throws IOException {\n         final String index =\n             IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME);\n \n@@ -196,7 +197,7 @@ public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n     }\n \n     @Override\n-    public List<SegmentRecord> queryBySegmentIdList(List<String> segmentIdList) throws IOException {\n+    public List<SegmentRecord> queryBySegmentIdList(List<String> segmentIdList, @Nullable Duration duration) throws IOException {\n         final String index =\n             IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME);\n \n@@ -212,7 +213,7 @@ public List<SegmentRecord> queryBySegmentIdList(List<String> segmentIdList) thro\n     }\n \n     @Override\n-    public List<SegmentRecord> queryByTraceIdWithInstanceId(List<String> traceIdList, List<String> instanceIdList) throws IOException {\n+    public List<SegmentRecord> queryByTraceIdWithInstanceId(List<String> traceIdList, List<String> instanceIdList, @Nullable Duration duration) throws IOException {\n         final String index =\n             IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME);\n \n\ndiff --git a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/zipkin/ZipkinQueryEsDAO.java b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/zipkin/ZipkinQueryEsDAO.java\nindex ef583b438284..c455ddbf5382 100644\n--- a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/zipkin/ZipkinQueryEsDAO.java\n+++ b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/zipkin/ZipkinQueryEsDAO.java\n@@ -18,6 +18,7 @@\n \n package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.query.zipkin;\n \n+import javax.annotation.Nullable;\n import org.apache.skywalking.library.elasticsearch.requests.search.BoolQueryBuilder;\n import org.apache.skywalking.library.elasticsearch.requests.search.Query;\n import org.apache.skywalking.library.elasticsearch.requests.search.Search;\n@@ -129,7 +130,7 @@ public List<String> getSpanNames(final String serviceName) {\n     }\n \n     @Override\n-    public List<Span> getTrace(final String traceId) {\n+    public List<Span> getTrace(final String traceId, @Nullable final  Duration duration) {\n         String index = IndexController.LogicIndicesRegister.getPhysicalTableName(ZipkinSpanRecord.INDEX_NAME);\n         BoolQueryBuilder query = Query.bool().must(Query.term(ZipkinSpanRecord.TRACE_ID, traceId));\n         SearchBuilder search = Search.builder().query(query).size(SCROLLING_BATCH_SIZE);\n@@ -216,11 +217,11 @@ public List<List<Span>> getTraces(final QueryRequest request, Duration duration)\n                 traceIds.add((String) idBucket.get(\""key\""));\n             }\n         }\n-        return getTraces(traceIds);\n+        return getTraces(traceIds, duration);\n     }\n \n     @Override\n-    public List<List<Span>> getTraces(final Set<String> traceIds) {\n+    public List<List<Span>> getTraces(final Set<String> traceIds, @Nullable final Duration duration) {\n         String index = IndexController.LogicIndicesRegister.getPhysicalTableName(ZipkinSpanRecord.INDEX_NAME);\n         BoolQueryBuilder query = Query.bool().must(Query.terms(ZipkinSpanRecord.TRACE_ID, new ArrayList<>(traceIds)));\n         SearchBuilder search = Search.builder().query(query).sort(ZipkinSpanRecord.TIMESTAMP_MILLIS, Sort.Order.DESC)\n\ndiff --git a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCSpanAttachedEventQueryDAO.java b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCSpanAttachedEventQueryDAO.java\nindex 3680ee256024..5c1d2b1337dc 100644\n--- a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCSpanAttachedEventQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCSpanAttachedEventQueryDAO.java\n@@ -18,10 +18,12 @@\n \n package org.apache.skywalking.oap.server.storage.plugin.jdbc.common.dao;\n \n+import javax.annotation.Nullable;\n import lombok.RequiredArgsConstructor;\n import lombok.SneakyThrows;\n import org.apache.skywalking.oap.server.core.analysis.manual.spanattach.SpanAttachedEventRecord;\n import org.apache.skywalking.oap.server.core.analysis.manual.spanattach.SpanAttachedEventTraceType;\n+import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.storage.query.ISpanAttachedEventQueryDAO;\n import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCClient;\n import org.apache.skywalking.oap.server.library.util.StringUtil;\n@@ -44,7 +46,7 @@ public class JDBCSpanAttachedEventQueryDAO implements ISpanAttachedEventQueryDAO\n \n     @Override\n     @SneakyThrows\n-    public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds) {\n+    public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds, @Nullable Duration duration) {\n         final var tables = tableHelper.getTablesWithinTTL(SpanAttachedEventRecord.INDEX_NAME);\n         final var results = new ArrayList<SpanAttachedEventRecord>();\n \n\ndiff --git a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCTraceQueryDAO.java b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCTraceQueryDAO.java\nindex faf37a5164e9..3eeea047e285 100644\n--- a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCTraceQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCTraceQueryDAO.java\n@@ -19,6 +19,7 @@\n package org.apache.skywalking.oap.server.storage.plugin.jdbc.common.dao;\n \n import com.google.common.base.Strings;\n+import javax.annotation.Nullable;\n import lombok.RequiredArgsConstructor;\n import lombok.SneakyThrows;\n import lombok.extern.slf4j.Slf4j;\n@@ -232,7 +233,7 @@ protected void buildLimit(StringBuilder sql, int from, int limit) {\n \n     @Override\n     @SneakyThrows\n-    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n+    public List<SegmentRecord> queryByTraceId(String traceId, @Nullable Duration duration) throws IOException {\n         final var tables = tableHelper.getTablesWithinTTL(SegmentRecord.INDEX_NAME);\n         final var segmentRecords = new ArrayList<SegmentRecord>();\n \n@@ -253,7 +254,7 @@ public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n \n     @SneakyThrows\n     @Override\n-    public List<SegmentRecord> queryBySegmentIdList(List<String> segmentIdList) throws IOException {\n+    public List<SegmentRecord> queryBySegmentIdList(List<String> segmentIdList, @Nullable Duration duration) throws IOException {\n         final var tables = tableHelper.getTablesWithinTTL(SegmentRecord.INDEX_NAME);\n         final var segmentRecords = new ArrayList<SegmentRecord>();\n         final ArrayList<String> conditions = new ArrayList<>();\n@@ -278,7 +279,7 @@ public List<SegmentRecord> queryBySegmentIdList(List<String> segmentIdList) thro\n \n     @SneakyThrows\n     @Override\n-    public List<SegmentRecord> queryByTraceIdWithInstanceId(List<String> traceIdList, List<String> instanceIdList) throws IOException {\n+    public List<SegmentRecord> queryByTraceIdWithInstanceId(List<String> traceIdList, List<String> instanceIdList, @Nullable Duration duration) throws IOException {\n         final var tables = tableHelper.getTablesWithinTTL(SegmentRecord.INDEX_NAME);\n         final var segmentRecords = new ArrayList<SegmentRecord>();\n         final ArrayList<String> conditions = new ArrayList<>();\n\ndiff --git a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCZipkinQueryDAO.java b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCZipkinQueryDAO.java\nindex bfead65fc7aa..23b1ca8e1ed6 100644\n--- a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCZipkinQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCZipkinQueryDAO.java\n@@ -21,6 +21,7 @@\n import com.google.gson.Gson;\n import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n+import javax.annotation.Nullable;\n import lombok.RequiredArgsConstructor;\n import lombok.SneakyThrows;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n@@ -147,7 +148,7 @@ public List<String> getSpanNames(final String serviceName) {\n \n     @Override\n     @SneakyThrows\n-    public List<Span> getTrace(final String traceId) {\n+    public List<Span> getTrace(final String traceId, @Nullable final Duration duration) {\n         final var tables = tableHelper.getTablesWithinTTL(ZipkinSpanRecord.INDEX_NAME);\n         final var trace = new ArrayList<Span>();\n \n@@ -264,12 +265,12 @@ public List<List<Span>> getTraces(final QueryRequest request, Duration duration)\n             }, condition.toArray(new Object[0]));\n         }\n \n-        return getTraces(traceIds);\n+        return getTraces(traceIds, duration);\n     }\n \n     @Override\n     @SneakyThrows\n-    public List<List<Span>> getTraces(final Set<String> traceIds) {\n+    public List<List<Span>> getTraces(final Set<String> traceIds, final Duration duration) {\n         if (CollectionUtils.isEmpty(traceIds)) {\n             return new ArrayList<>();\n         }\n\ndiff --git a/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java b/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java\nindex c9a824443dea..6e5f6e6456d7 100644\n--- a/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java\n+++ b/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/main/java/org/apache/skywalking/oap/server/tool/profile/exporter/ProfiledBasicInfo.java\n@@ -88,7 +88,7 @@ public static ProfiledBasicInfo build(ExporterConfig config, ModuleManager manag\n             profiledSegment.setDuration(segment.getLatency());\n \n             // query spans\n-            Trace trace = traceQueryService.queryTrace(config.getTraceId());\n+            Trace trace = traceQueryService.queryTrace(config.getTraceId(), null);\n             List<Span> profiledSegmentSpans = trace.getSpans().stream().filter(s -> Objects.equals(s.getSegmentId(), segmentId)).collect(Collectors.toList());\n             if (CollectionUtils.isEmpty(profiledSegmentSpans)) {\n                 throw new IllegalArgumentException(\""Current segment cannot found any span\"");\n"", ""test_patch"": ""diff --git a/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/ProfileTraceDAO.java b/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/ProfileTraceDAO.java\nindex 2c5639c2a548..4d4784af2831 100644\n--- a/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/ProfileTraceDAO.java\n+++ b/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/ProfileTraceDAO.java\n@@ -21,6 +21,7 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n+import javax.annotation.Nullable;\n import org.apache.skywalking.apm.network.language.agent.v3.SegmentObject;\n import org.apache.skywalking.apm.network.language.agent.v3.SpanObject;\n import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;\n@@ -56,7 +57,7 @@ public TraceBrief queryBasicTraces(Duration duration,\n     }\n \n     @Override\n-    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n+    public List<SegmentRecord> queryByTraceId(String traceId, @Nullable Duration duration) throws IOException {\n         final ArrayList<SegmentRecord> segments = new ArrayList<>();\n         final SegmentRecord segment = new SegmentRecord();\n         segments.add(segment);\n@@ -80,7 +81,7 @@ public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n     }\n \n     @Override\n-    public List<SegmentRecord> queryBySegmentIdList(List<String> segmentIdList) throws IOException {\n+    public List<SegmentRecord> queryBySegmentIdList(List<String> segmentIdList, @Nullable Duration duration) throws IOException {\n         final ArrayList<SegmentRecord> segments = new ArrayList<>();\n         final SegmentRecord segment = new SegmentRecord();\n         segments.add(segment);\n@@ -104,7 +105,7 @@ public List<SegmentRecord> queryBySegmentIdList(List<String> segmentIdList) thro\n     }\n \n     @Override\n-    public List<SegmentRecord> queryByTraceIdWithInstanceId(List<String> traceIdList, List<String> instanceIdList) throws IOException {\n+    public List<SegmentRecord> queryByTraceIdWithInstanceId(List<String> traceIdList, List<String> instanceIdList, @Nullable Duration duration) throws IOException {\n         return null;\n     }\n \n\ndiff --git a/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/SpanAttachedEventQueryDAO.java b/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/SpanAttachedEventQueryDAO.java\nindex 975899508d7e..fa73191cc8ee 100644\n--- a/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/SpanAttachedEventQueryDAO.java\n+++ b/oap-server/server-tools/profile-exporter/tool-profile-snapshot-bootstrap/src/test/java/org/apache/skywalking/oap/server/tool/profile/exporter/test/SpanAttachedEventQueryDAO.java\n@@ -18,8 +18,10 @@\n \n package org.apache.skywalking.oap.server.tool.profile.exporter.test;\n \n+import javax.annotation.Nullable;\n import org.apache.skywalking.oap.server.core.analysis.manual.spanattach.SpanAttachedEventRecord;\n import org.apache.skywalking.oap.server.core.analysis.manual.spanattach.SpanAttachedEventTraceType;\n+import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.storage.query.ISpanAttachedEventQueryDAO;\n \n import java.io.IOException;\n@@ -27,7 +29,7 @@\n \n public class SpanAttachedEventQueryDAO implements ISpanAttachedEventQueryDAO {\n     @Override\n-    public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds) throws IOException {\n+    public List<SpanAttachedEventRecord> querySpanAttachedEvents(SpanAttachedEventTraceType type, List<String> traceIds, @Nullable Duration duration) throws IOException {\n         return null;\n     }\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/test/e2e-v2/script/env b/test/e2e-v2/script/env\nindex 29b803a4df06..91fa59b0054a 100644\n--- a/test/e2e-v2/script/env\n+++ b/test/e2e-v2/script/env\n@@ -22,7 +22,7 @@ SW_AGENT_PYTHON_COMMIT=c76a6ec51a478ac91abb20ec8f22a99b8d4d6a58\n SW_AGENT_CLIENT_JS_COMMIT=af0565a67d382b683c1dbd94c379b7080db61449\n SW_AGENT_CLIENT_JS_TEST_COMMIT=4f1eb1dcdbde3ec4a38534bf01dded4ab5d2f016\n SW_KUBERNETES_COMMIT_SHA=6fe5e6f0d3b7686c6be0457733e825ee68cb9b35\n-SW_ROVER_COMMIT=4c0cb8429a96f190ea30eac1807008d523c749c3\n+SW_ROVER_COMMIT=738b1a42fe4941e0b4e6f5816403437cf572708f\n SW_BANYANDB_COMMIT=458041a561b0acc1f2ed37690df2ce753b791283\n SW_AGENT_PHP_COMMIT=3192c553002707d344bd6774cfab5bc61f67a1d3\n SW_PREDICTOR_COMMIT=54a0197654a3781a6f73ce35146c712af297c994\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-13180"", ""pr_id"": 13180, ""issue_id"": 12794, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] [BanyanDB] Support Sharding Keys different from Series IDs\n### Search before asking\n\n- [X] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nAdopt https://github.com/apache/skywalking/issues/12526 for endpoint_* metrics by using only service IDs as sharding keys, series ID should be kept unchanged.\r\n\r\nThis targets for reduce the topN has been placed in different shards.\n\n### Use case\n\n_No response_\n\n### Related issues\n\n_No response_\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [X] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 127, ""test_files_count"": 1, ""non_test_files_count"": 6, ""pr_changed_files"": [""docs/en/changes/changes.md"", ""oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBExtension.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java"", ""oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java""], ""pr_changed_test_files"": [""oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java""], ""base_commit"": ""bcc2a27f0605964612f2ec828c1a5d55586d895d"", ""head_commit"": ""9f261e3c28a37d7dd41a4d5a2056d6bb383170d6"", ""repo_url"": ""https://github.com/apache/skywalking/pull/13180"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/13180"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-18T06:39:21.000Z"", ""patch"": ""diff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 2ffc7cd7bef9..361285217db9 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -12,6 +12,7 @@\n * PromQL Service: traffic query support `limit` and regex match.\n * Fix an edge case of HashCodeSelector(Integer#MIN_VALUE causes ArrayIndexOutOfBoundsException).\n * Support Flink monitoring.\n+* BanyanDB: Support `@ShardingKey` for Measure tags and set to TopNAggregation group tag by default.\n \n #### UI\n \n\ndiff --git a/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java b/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java\nindex 59fe64fcd016..f53dfcc5b42a 100644\n--- a/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java\n+++ b/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java\n@@ -203,9 +203,9 @@ private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompile\n                 annotationsAttribute.addAnnotation(columnAnnotation);\n                 if (field.isID()) {\n                     // Add SeriesID = 0 annotation to ID field.\n-                    Annotation banyanShardingKeyAnnotation = new Annotation(BanyanDB.SeriesID.class.getName(), constPool);\n-                    banyanShardingKeyAnnotation.addMemberValue(\""index\"", new IntegerMemberValue(constPool, 0));\n-                    annotationsAttribute.addAnnotation(banyanShardingKeyAnnotation);\n+                    Annotation banyanSeriesIDAnnotation = new Annotation(BanyanDB.SeriesID.class.getName(), constPool);\n+                    banyanSeriesIDAnnotation.addMemberValue(\""index\"", new IntegerMemberValue(constPool, 0));\n+                    annotationsAttribute.addAnnotation(banyanSeriesIDAnnotation);\n \n                     // Entity id field should enable doc values.\n                     final var enableDocValuesAnnotation = new Annotation(ElasticSearch.EnableDocValues.class.getName(), constPool);\n@@ -215,6 +215,10 @@ private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompile\n                 if (field.isGroupByCondInTopN()) {\n                     Annotation banyanTopNAggregationAnnotation = new Annotation(BanyanDB.TopNAggregation.class.getName(), constPool);\n                     annotationsAttribute.addAnnotation(banyanTopNAggregationAnnotation);\n+                    // If TopN, add ShardingKey to group field.\n+                    Annotation banyanShardingKeyAnnotation = new Annotation(BanyanDB.ShardingKey.class.getName(), constPool);\n+                    banyanShardingKeyAnnotation.addMemberValue(\""index\"", new IntegerMemberValue(constPool, 0));\n+                    annotationsAttribute.addAnnotation(banyanShardingKeyAnnotation);\n                 }\n \n                 newField.getFieldInfo().addAttribute(annotationsAttribute);\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java\nindex 7d0cd6469be1..6d3f875dc308 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java\n@@ -77,6 +77,30 @@\n         int index() default -1;\n     }\n \n+    /**\n+     * ShardingKey is used to group time series data per metric in one place. Optional. Only support Measure Tag.\n+     * If ShardingKey is not set, the default ShardingKey is based on the combination of 'name' and 'entity' according to the {@link SeriesID}.\n+     * <p>\n+     * The typical scenario to specify the ShardingKey to the Group tag when the metric generate a TopNAggregation:\n+     * If not set, the default data distribution based on the combination of 'name' and 'entity', can lead to performance issues when calculating the 'TopNAggregation'.\n+     * This is because each shard only has a subset of the top-n list, and the query process has to be responsible for aggregating those lists to obtain the final result.\n+     * This introduces overhead in terms of querying performance and disk usage.\n+     *\n+     * @since 10.3.0\n+     */\n+    @Target({ElementType.FIELD})\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @interface ShardingKey {\n+        /**\n+         * Relative sharding tag\n+         * <p>\n+         * The index number determines the order of the column placed in the ShardingKey.\n+         *\n+         * @return non-negative if this column be used for sharding. -1 means not as a sharding key\n+         */\n+        int index() default -1;\n+    }\n+\n     /**\n      * Force disabling indexing declare through {@link Column}.\n      * In BanyanDB, some additional conditions could be done in server memory, no indexing required in this case.\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBExtension.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBExtension.java\nindex 7cd55b4be4f0..9053a3c184bc 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBExtension.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBExtension.java\n@@ -39,6 +39,9 @@ public class BanyanDBExtension {\n     @Getter\n     private final int seriesIDIdx;\n \n+    @Getter\n+    private final int shardingKeyIdx;\n+\n     /**\n      * {@link BanyanDB.NoIndexing} exists to override {@link ModelColumn#shouldIndex()}, or be the same as {@link\n      * ModelColumn#shouldIndex()}.\n@@ -82,6 +85,13 @@ public boolean isSeriesID() {\n         return this.seriesIDIdx > -1;\n     }\n \n+    /**\n+     * @return true if this column is a part of sharding key\n+     */\n+    public boolean isShardingKey() {\n+        return this.shardingKeyIdx > -1;\n+    }\n+\n     /**\n      * @return true if this column should be indexing in the BanyanDB\n      */\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java\nindex fe45c226e467..e27eb73f4dd3 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java\n@@ -58,11 +58,15 @@ public Model add(Class<?> aClass, int scopeId, Storage storage) throws StorageEx\n         DefaultScopeDefine.nameOf(scopeId);\n \n         List<ModelColumn> modelColumns = new ArrayList<>();\n-        SeriesIDChecker checker = new SeriesIDChecker();\n+        SeriesIDChecker seriesIDChecker = new SeriesIDChecker();\n+        ShardingKeyChecker shardingKeyChecker = new ShardingKeyChecker();\n         SQLDatabaseModelExtension sqlDBModelExtension = new SQLDatabaseModelExtension();\n         BanyanDBModelExtension banyanDBModelExtension = new BanyanDBModelExtension();\n         ElasticSearchModelExtension elasticSearchModelExtension = new ElasticSearchModelExtension();\n-        retrieval(aClass, storage.getModelName(), modelColumns, scopeId, checker, sqlDBModelExtension, banyanDBModelExtension);\n+        retrieval(\n+            aClass, storage.getModelName(), modelColumns, scopeId, seriesIDChecker, shardingKeyChecker, sqlDBModelExtension,\n+            banyanDBModelExtension\n+        );\n         // Add extra column for additional entities\n         if (aClass.isAnnotationPresent(SQLDatabase.ExtraColumn4AdditionalEntity.class)\n             || aClass.isAnnotationPresent(SQLDatabase.MultipleExtraColumn4AdditionalEntity.class)) {\n@@ -106,7 +110,8 @@ public Model add(Class<?> aClass, int scopeId, Storage storage) throws StorageEx\n         // Set routing rules for ElasticSearch\n         elasticSearchModelExtension.setRouting(storage.getModelName(), modelColumns);\n \n-        checker.check(storage.getModelName());\n+        seriesIDChecker.check(storage.getModelName());\n+        shardingKeyChecker.check(storage.getModelName());\n \n         Model model = new Model(\n             storage.getModelName(),\n@@ -153,7 +158,8 @@ private void retrieval(final Class<?> clazz,\n                            final String modelName,\n                            final List<ModelColumn> modelColumns,\n                            final int scopeId,\n-                           SeriesIDChecker checker,\n+                           SeriesIDChecker seriesIDChecker,\n+                           ShardingKeyChecker shardingKeyChecker,\n                            final SQLDatabaseModelExtension sqlDBModelExtension,\n                            final BanyanDBModelExtension banyanDBModelExtension) {\n         if (log.isDebugEnabled()) {\n@@ -212,6 +218,8 @@ private void retrieval(final Class<?> clazz,\n                 // BanyanDB extension\n                 final BanyanDB.SeriesID banyanDBSeriesID = field.getAnnotation(\n                     BanyanDB.SeriesID.class);\n+                final BanyanDB.ShardingKey banyanDBShardingKey = field.getAnnotation(\n+                    BanyanDB.ShardingKey.class);\n                 final BanyanDB.NoIndexing banyanDBNoIndex = field.getAnnotation(\n                     BanyanDB.NoIndexing.class);\n                 final BanyanDB.IndexRule banyanDBIndexRule = field.getAnnotation(\n@@ -227,6 +235,7 @@ private void retrieval(final Class<?> clazz,\n                 final boolean shouldIndex = (banyanDBNoIndex == null) && !column.storageOnly();\n                 BanyanDBExtension banyanDBExtension = new BanyanDBExtension(\n                     banyanDBSeriesID == null ? -1 : banyanDBSeriesID.index(),\n+                    banyanDBShardingKey == null ? -1 : banyanDBShardingKey.index(),\n                     shouldIndex,\n                     banyanDBIndexRule == null ? BanyanDB.IndexRule.IndexType.INVERTED : banyanDBIndexRule.indexType(),\n                     banyanDBMeasureField != null,\n@@ -255,7 +264,10 @@ private void retrieval(final Class<?> clazz,\n                     banyanDBExtension\n                 );\n                 if (banyanDBExtension.isSeriesID()) {\n-                    checker.accept(modelName, modelColumn);\n+                    seriesIDChecker.accept(modelName, modelColumn);\n+                }\n+                if (banyanDBExtension.isShardingKey()) {\n+                    shardingKeyChecker.accept(modelName, modelColumn);\n                 }\n \n                 if (field.isAnnotationPresent(SQLDatabase.AdditionalEntity.class)) {\n@@ -282,7 +294,10 @@ private void retrieval(final Class<?> clazz,\n         }\n \n         if (Objects.nonNull(clazz.getSuperclass())) {\n-            retrieval(clazz.getSuperclass(), modelName, modelColumns, scopeId, checker, sqlDBModelExtension, banyanDBModelExtension);\n+            retrieval(\n+                clazz.getSuperclass(), modelName, modelColumns, scopeId, seriesIDChecker, shardingKeyChecker,\n+                sqlDBModelExtension, banyanDBModelExtension\n+            );\n         }\n     }\n \n@@ -359,4 +374,40 @@ private void check(String modelName) throws IllegalStateException {\n             }\n         }\n     }\n+\n+    private static class ShardingKeyChecker {\n+        private final ArrayList<ModelColumn> keys = new ArrayList<>();\n+\n+        /**\n+         * @throws IllegalStateException if sharding key indices are conflicting.\n+         */\n+        private void accept(String modelName, ModelColumn modelColumn) throws IllegalStateException {\n+            final int idx = modelColumn.getBanyanDBExtension().getShardingKeyIdx();\n+            while (idx + 1 > keys.size()) {\n+                keys.add(null);\n+            }\n+            ModelColumn exist = keys.get(idx);\n+            if (exist != null) {\n+                throw new IllegalStateException(\n+                    modelName + \""'s \""\n+                        + \""Column [\"" + exist.getColumnName() + \""] and column [\"" + modelColumn.getColumnName()\n+                        + \"" are conflicting with sharding key index=\"" + modelColumn.getBanyanDBExtension()\n+                                                                                   .getShardingKeyIdx());\n+            }\n+            keys.set(idx, modelColumn);\n+        }\n+\n+        /**\n+         * @param modelName model name of the entity\n+         * @throws IllegalStateException if sharding key indices are not continuous\n+         */\n+        private void check(String modelName) throws IllegalStateException {\n+            for (int i = 0; i < keys.size(); i++) {\n+                final ModelColumn modelColumn = keys.get(i);\n+                if (modelColumn == null) {\n+                    throw new IllegalStateException(\""sharding key index=\"" + i + \"" is missing in \"" + modelName);\n+                }\n+            }\n+        }\n+    }\n }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\nindex 4287a6a494f6..4551f045571b 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\n@@ -131,6 +131,7 @@ public MeasureModel registerMeasureModel(Model model, BanyanDBStorageConfig conf\n                 .collect(Collectors.toMap(modelColumn -> modelColumn.getColumnName().getStorageName(), Function.identity()));\n         // parse and set seriesIDs\n         List<String> seriesIDColumns = parseEntityNames(modelColumnMap);\n+        List<String> shardingKeyColumns = parseShardingKeyNames(modelColumnMap);\n         if (seriesIDColumns.isEmpty()) {\n             throw new StorageException(\""model \"" + model.getName() + \"" doesn't contain series id\"");\n         }\n@@ -160,6 +161,9 @@ public MeasureModel registerMeasureModel(Model model, BanyanDBStorageConfig conf\n                 .setName(schemaMetadata.name()));\n         builder.setInterval(downSamplingDuration(model.getDownsampling()).format());\n         builder.setEntity(BanyandbDatabase.Entity.newBuilder().addAllTagNames(seriesIDColumns));\n+        if (CollectionUtils.isNotEmpty(shardingKeyColumns)) {\n+            builder.setShardingKey(BanyandbDatabase.ShardingKey.newBuilder().addAllTagNames(shardingKeyColumns));\n+        }\n         builder.addAllTagFamilies(tagFamilySpecs);\n         if (model.getBanyanDBModelExtension().isIndexMode()) {\n             builder.setIndexMode(true);\n@@ -351,6 +355,19 @@ List<String> parseEntityNames(Map<String, ModelColumn> modelColumnMap) {\n                 .collect(Collectors.toList());\n     }\n \n+    List<String> parseShardingKeyNames(Map<String, ModelColumn> modelColumnMap) {\n+        List<ModelColumn> shardingKeyColumns = new ArrayList<>();\n+        for (final ModelColumn col : modelColumnMap.values()) {\n+            if (col.getBanyanDBExtension().isShardingKey()) {\n+                shardingKeyColumns.add(col);\n+            }\n+        }\n+        return shardingKeyColumns.stream()\n+                .sorted(Comparator.comparingInt(col -> col.getBanyanDBExtension().getShardingKeyIdx()))\n+                .map(col -> col.getColumnName().getName())\n+                .collect(Collectors.toList());\n+    }\n+\n     /**\n      * Parse tags' metadata for {@link Stream}\n      * Every field of a class is registered as a {@link org.apache.skywalking.banyandb.model.v1.BanyandbModel.Tag}\n"", ""test_patch"": ""diff --git a/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java b/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java\nindex 32fa3edab56c..9922bbf8d05c 100644\n--- a/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java\n+++ b/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java\n@@ -50,7 +50,7 @@ public void testColumnDefine() {\n                                              new ElasticSearchExtension(\n                                                  ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false, true),\n                                              new BanyanDBExtension(\n-                                                 -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false,\n+                                                 -1, -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false,\n                                                  BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true\n                                              )\n         );\n@@ -62,7 +62,7 @@ public void testColumnDefine() {\n                                  new SQLDatabaseExtension(),\n                                  new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false, true),\n                                  new BanyanDBExtension(\n-                                     -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false,\n+                                     -1, -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false,\n                                      BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true\n                                  )\n         );\n@@ -74,7 +74,7 @@ public void testColumnDefine() {\n                                  false, false, true, 200,\n                                  new SQLDatabaseExtension(),\n                                  new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false, true),\n-                                 new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true)\n+                                 new BanyanDBExtension(-1, -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true)\n         );\n         Assertions.assertFalse(column.isStorageOnly());\n         Assertions.assertEquals(\""abc\"", column.getColumnName().getName());\n@@ -89,7 +89,7 @@ public void testConflictDefinition() {\n                     new ElasticSearchExtension(\n                             ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false, true),\n                             new BanyanDBExtension(\n-                                -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false,\n+                                -1, -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false,\n                                 BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true\n                             )\n             );\n@@ -104,7 +104,7 @@ public void testConflictDefinitionIndexOnly() {\n                     new SQLDatabaseExtension(),\n                     new ElasticSearchExtension(\n                             ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false, true),\n-                            new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false,\n+                            new BanyanDBExtension(-1, -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false,\n                                                   BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true\n                             )\n             );\n@@ -120,7 +120,7 @@ public void testConflictDefinitionStorageOnly() {\n                             new ElasticSearchExtension(\n                                 ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false, true),\n                             new BanyanDBExtension(\n-                                -1, false, BanyanDB.IndexRule.IndexType.INVERTED, false,\n+                                -1, -1, false, BanyanDB.IndexRule.IndexType.INVERTED, false,\n                                 BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true\n                             )\n             );\n@@ -136,7 +136,7 @@ public void testConflictDefinitionEnableSort() {\n                             new ElasticSearchExtension(\n                                 ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false, true),\n                             new BanyanDBExtension(\n-                                -1, false, BanyanDB.IndexRule.IndexType.INVERTED, true,\n+                                -1, -1, false, BanyanDB.IndexRule.IndexType.INVERTED, true,\n                                 null, true\n                             )\n             );\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-13162"", ""pr_id"": 13162, ""issue_id"": 13124, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] PromQL 2.53 support\n### Search before asking\n\n- [x] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nAs 2.53 has been marked as latest lts of Prometheus, we need to bump up our support for PromQL to leverage its latest features and keywords.\n\nref, https://prometheus.io/docs/introduction/release-cycle/\n\n### Use case\n\n_No response_\n\n### Related issues\n\n_No response_\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [x] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 121, ""test_files_count"": 7, ""non_test_files_count"": 9, ""pr_changed_files"": [""docs/en/api/promql-service.md"", ""docs/en/changes/changes.md"", ""oap-server/server-query-plugin/promql-plugin/src/main/antlr4/org/apache/skywalking/promql/rt/grammar/PromQLLexer.g4"", ""oap-server/server-query-plugin/promql-plugin/src/main/antlr4/org/apache/skywalking/promql/rt/grammar/PromQLParser.g4"", ""oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/entity/response/LabelsQueryRsp.java"", ""oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/entity/response/QueryFormatRsp.java"", ""oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java"", ""oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/rt/PromQLMatchVisitor.java"", ""oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/rt/result/MatcherSetResult.java"", ""test/e2e-v2/cases/promql/docker-compose.yml"", ""test/e2e-v2/cases/promql/expected/endpoint-names.yml"", ""test/e2e-v2/cases/promql/expected/instance-names.yml"", ""test/e2e-v2/cases/promql/expected/service-names-limit.yml"", ""test/e2e-v2/cases/promql/expected/service-names.yml"", ""test/e2e-v2/cases/promql/expected/service-traffic-limit.yml"", ""test/e2e-v2/cases/promql/promql-cases.yaml""], ""pr_changed_test_files"": [""test/e2e-v2/cases/promql/docker-compose.yml"", ""test/e2e-v2/cases/promql/expected/endpoint-names.yml"", ""test/e2e-v2/cases/promql/expected/instance-names.yml"", ""test/e2e-v2/cases/promql/expected/service-names-limit.yml"", ""test/e2e-v2/cases/promql/expected/service-names.yml"", ""test/e2e-v2/cases/promql/expected/service-traffic-limit.yml"", ""test/e2e-v2/cases/promql/promql-cases.yaml""], ""base_commit"": ""dc953802bfd343a36887ae518300cbfe18fb91d6"", ""head_commit"": ""f28abd396d6c2951ec085df06f2ac959c5660238"", ""repo_url"": ""https://github.com/apache/skywalking/pull/13162"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/13162"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-09T06:51:19.000Z"", ""patch"": ""diff --git a/docs/en/api/promql-service.md b/docs/en/api/promql-service.md\nindex 4088ff52d7d0..69cc3966ae46 100644\n--- a/docs/en/api/promql-service.md\n+++ b/docs/en/api/promql-service.md\n@@ -268,10 +268,31 @@ GET|POST /api/v1/series\n | match[]   | series selector                                     | yes     | no       |\n | start     | start, format: RFC3399 or unix_timestamp in seconds | yes     | no       |\n | end       | end, format: RFC3399 or unix_timestamp in seconds   | yes     | no       |\n+| limit     | integer, maximum number of returned series          | yes     | yes      |\n+\n+**For metadata metrics**:\n+**Note: SkyWalking's metadata exists in the following metrics(traffics):**\n+\n+| Name             | Require Labels | Optional Labels          | Support Label Match                                 |\n+|------------------|----------------|--------------------------|-----------------------------------------------------|\n+| service_traffic  | layer          | service, limit           | =, (only service label support !=, =~, !~)          |\n+| instance_traffic | layer, service | service_instance, limit  | =, (only service_instance label support !=, =~, !~) |\n+| endpoint_traffic | layer, service | endpoint, keyword, limit | =, (only endpoint label support !=, =~, !~)         |\n+\n+- **=**: Label value equals the provided string.\n+- **!=**: Label value does not equal the provided string.\n+- **=~**: Label value regex-match the provided string.\n+- **!~**: Label value does not regex-match the provided string\n+\n+**If the `limit` is not set by parameter or label, the default value is 100. If the `limit ' is also set in the query parameter, it returns the minimum of the two.**\n \n For example:\n ```text\n-/api/v1/series?match[]=service_traffic{layer='GENERAL'}&start=1677479336&end=1677479636\n+/api/v1/series?match[]=service_traffic{layer='GENERAL'}&start=1677479336&end=1677479636&limit=5\n+```\n+or\n+```text\n+/api/v1/series?match[]=service_traffic{layer='GENERAL', limit='5'}&start=1677479336&end=1677479636\n ```\n \n Result:\n@@ -313,10 +334,23 @@ Result:\n }\n ```\n \n-**Note: SkyWalking's metadata exists in the following metrics(traffics):**\n-- service_traffic\n-- instance_traffic\n-- endpoint_traffic\n+- You can use the `service` label to filter the service_traffic result.\n+```text\n+/api/v1/series?match[]=service_traffic{layer='GENERAL', service='agent::songs'}&start=1677479336&end=1677479636\n+```\n+use regex:\n+```text\n+/api/v1/series?match[]=service_traffic{layer='GENERAL', service=~'agent::songs|agent::recommendation'}&start=1677479336&end=1677479636\n+```\n+- You can use the `service_instance` label to filter the instance_traffic result.\n+```text\n+/api/v1/series?match[]=service_traffic{layer='GENERAL', service='agent::songs', service_instance=~'instance1|instance2'}&start=1677479336&end=1677479636\n+```\n+- You can use the `endpoint` label to filter the endpoint_traffic result.\n+```text\n+/api/v1/series?match[]=service_traffic{layer='GENERAL', service='agent::songs', endpoint=~'endpoint1|endpoint2'}&start=1677479336&end=1677479636\n+```\n+\n \n #### Getting label names\n [Prometheus Docs Reference](https://prometheus.io/docs/prometheus/latest/querying/api/#getting-label-names)\n@@ -330,6 +364,7 @@ GET|POST /api/v1/labels\n | match[]   | series selector                                                                 | yes     | yes      |\n | start     | start, format: RFC3399 or unix_timestamp in seconds                             | **no**  | yes      |\n | end       | end timestamp, if end time is not present, use current time as default end time | yes     | yes      |\n+| limit     | integer, maximum number of returned labels, default 100                         | yes     | yes      |\n \n For example:\n ```text\n@@ -363,11 +398,12 @@ GET /api/v1/label/<label_name>/values\n | match[]   | series selector                                                                                                     | yes     | yes      |\n | start     | start, format: RFC3399 or unix_timestamp in seconds                                                                 | **no**  | yes      |\n | end       | end, format: RFC3399 or unix_timestamp in seconds, if end time is not present, use current time as default end time | yes     | yes      |\n+| limit     | integer, maximum number of returned label values, default 100                                                       | yes     | yes      |\n \n For example:\n ```text\n /api/v1/label/__name__/values\n-```\n+``` \n \n Result:\n ```json\n@@ -391,6 +427,39 @@ Result:\n }\n ```\n \n+**For metadata metrics**:\n+\n+| Name             | Require Labels | Optional Labels          | Support Label Match                                 |\n+|------------------|----------------|--------------------------|-----------------------------------------------------|\n+| service_traffic  | layer          | service, limit           | =, (only service label support !=, =~, !~)          |\n+| instance_traffic | layer, service | service_instance, limit  | =, (only service_instance label support !=, =~, !~) |\n+| endpoint_traffic | layer, service | endpoint, keyword, limit | =, (only endpoint label support !=, =~, !~)         |\n+\n+- **=**: Label value equal to the provided string.\n+- **!=**: Label value not equal to the provided string.\n+- **=~**: Label value regex-match the provided string.\n+- **!~**: Label value do not regex-match the provided string\n+\n+**If the `limit` is not set by parameter or label, the default value is 100. And If the `limit` also set in the query parameter, will return the min number of the two.**\n+\n+For example:\n+- If you want to query the label values of the `service` label in the `service_traffic` metric:\n+```text\n+/api/v1/label/service/values?match[]=service_traffic{layer='GENERAL', service='agent::songs|agent::recommendation'}&limit=1\n+```\n+or\n+```text\n+/api/v1/label/service/values?match[]=service_traffic{layer='GENERAL', service='agent::songs|agent::recommendation',limit='1'}\n+```\n+- If you want to query the label values of the `service_instance` label in the `instance_traffic` metric:\n+```text\n+/api/v1/label/service_instance/values?match[]=instance_traffic{layer='GENERAL', service='agent::songs', service_instance='instance1|instance2'}\n+```\n+- If you want to query the label values of the `endpoint` label in the `endpoint_traffic` metric:\n+```text\n+/api/v1/label/endpoint/values?match[]=endpoint_traffic{layer='GENERAL', service='agent::songs', endpoint='endpoint1|endpoint2'}\n+```\n+\n #### Querying metric metadata\n [Prometheus Docs Reference](https://prometheus.io/docs/prometheus/latest/querying/api/#querying-metric-metadata)\n \n\ndiff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 0086af48dac2..35aa82b436db 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -7,6 +7,7 @@\n * BanyanDB: Support `hot/warm/cold` stages configuration.\n * Fix query continues profiling policies error when the policy is already in the cache.\n * Support `hot/warm/cold` stages TTL query in the status API.\n+* PromQL Service: traffic query support `limit` and regex match.\n \n #### UI\n \n\ndiff --git a/oap-server/server-query-plugin/promql-plugin/src/main/antlr4/org/apache/skywalking/promql/rt/grammar/PromQLLexer.g4 b/oap-server/server-query-plugin/promql-plugin/src/main/antlr4/org/apache/skywalking/promql/rt/grammar/PromQLLexer.g4\nindex 5fc2b7c5da37..1fc2f9e2e57c 100644\n--- a/oap-server/server-query-plugin/promql-plugin/src/main/antlr4/org/apache/skywalking/promql/rt/grammar/PromQLLexer.g4\n+++ b/oap-server/server-query-plugin/promql-plugin/src/main/antlr4/org/apache/skywalking/promql/rt/grammar/PromQLLexer.g4\n@@ -32,6 +32,11 @@ L_BRACE:     '{';\n R_BRACE:     '}';\n EQ:          '=';\n \n+//regex-match\n+RM:          '=~';\n+//regex-not-match\n+NRM:         '!~';\n+\n // Scalar Binary operators\n SUB:         '-';\n ADD:         '+';\n\ndiff --git a/oap-server/server-query-plugin/promql-plugin/src/main/antlr4/org/apache/skywalking/promql/rt/grammar/PromQLParser.g4 b/oap-server/server-query-plugin/promql-plugin/src/main/antlr4/org/apache/skywalking/promql/rt/grammar/PromQLParser.g4\nindex 84b743bde053..f81c2431dfb4 100644\n--- a/oap-server/server-query-plugin/promql-plugin/src/main/antlr4/org/apache/skywalking/promql/rt/grammar/PromQLParser.g4\n+++ b/oap-server/server-query-plugin/promql-plugin/src/main/antlr4/org/apache/skywalking/promql/rt/grammar/PromQLParser.g4\n@@ -50,10 +50,12 @@ metricRange:     metricInstant L_BRACKET DURATION R_BRACKET;\n \n labelName:       NAME_STRING;\n labelValue:      VALUE_STRING;\n-label:           labelName EQ labelValue;\n+label:           labelName matchOp labelValue;\n labelList:       label (COMMA label)*;\n labelNameList:   labelName (COMMA labelName)*;\n \n+matchOp:        EQ | NEQ | RM | NRM;\n+\n numberLiteral:   NUMBER;\n \n badRange:        NUMBER L_BRACKET DURATION R_BRACKET;\n\ndiff --git a/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/entity/response/LabelsQueryRsp.java b/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/entity/response/LabelsQueryRsp.java\nindex edbb05ef41ce..8cb5bf7e533c 100644\n--- a/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/entity/response/LabelsQueryRsp.java\n+++ b/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/entity/response/LabelsQueryRsp.java\n@@ -26,5 +26,5 @@\n @EqualsAndHashCode(callSuper = true)\n @Data\n public class LabelsQueryRsp extends QueryResponse {\n-    private final List<String> data = new ArrayList<>();\n+    private List<String> data = new ArrayList<>();\n }\n\ndiff --git a/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/entity/response/QueryFormatRsp.java b/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/entity/response/QueryFormatRsp.java\nnew file mode 100644\nindex 000000000000..8847b6fd6634\n--- /dev/null\n+++ b/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/entity/response/QueryFormatRsp.java\n@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.query.promql.entity.response;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+\n+@EqualsAndHashCode(callSuper = true)\n+@Data\n+public class QueryFormatRsp extends QueryResponse {\n+    private String data;\n+}\n\ndiff --git a/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java b/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java\nindex d6fccf0a7096..203ede81054b 100644\n--- a/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java\n+++ b/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/handler/PromQLApiHandler.java\n@@ -60,12 +60,14 @@\n import org.apache.skywalking.oap.query.promql.entity.response.MetricRspData;\n import org.apache.skywalking.oap.query.promql.entity.response.MetadataQueryRsp;\n import org.apache.skywalking.oap.query.promql.entity.response.MetricType;\n+import org.apache.skywalking.oap.query.promql.entity.response.QueryFormatRsp;\n import org.apache.skywalking.oap.query.promql.entity.response.QueryResponse;\n import org.apache.skywalking.oap.query.promql.entity.response.ResultType;\n import org.apache.skywalking.oap.query.promql.entity.response.ScalarRspData;\n import org.apache.skywalking.oap.query.promql.entity.response.SeriesQueryRsp;\n import org.apache.skywalking.oap.query.promql.rt.PromOpUtils;\n import org.apache.skywalking.oap.query.promql.rt.PromQLMatchVisitor;\n+import org.apache.skywalking.oap.query.promql.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.oap.query.promql.rt.exception.ParseErrorListener;\n import org.apache.skywalking.oap.query.promql.rt.result.MatcherSetResult;\n import org.apache.skywalking.oap.query.promql.rt.result.MetricsRangeResult;\n@@ -188,12 +190,14 @@ public HttpResponse metadata(\n     public HttpResponse labels(\n         @Param(\""match[]\"") Optional<String> match,\n         @Param(\""start\"") Optional<String> start,\n-        @Param(\""end\"") Optional<String> end) throws IOException {\n+        @Param(\""end\"") Optional<String> end,\n+        @Param(\""limit\"") Optional<Integer> limit) throws IOException {\n         LabelsQueryRsp response = new LabelsQueryRsp();\n         long endTS = System.currentTimeMillis();\n         if (end.isPresent()) {\n             endTS = formatTimestamp2Millis(end.get());\n         }\n+        int limitNum = limit.orElse(100);\n         Duration duration = getDayDurationFromTimestamp(endTS);\n         if (match.isPresent()) {\n             MatcherSetResult parseResult;\n@@ -219,12 +223,17 @@ public HttpResponse labels(\n                 if (metaData.isMultiIntValues()) {\n                     response.getData().remove(DataLabel.GENERAL_LABEL_NAME);\n                 }\n+            } else if (ServiceTraffic.INDEX_NAME.equals(metricName) || InstanceTraffic.INDEX_NAME.equals(metricName)\n+                || EndpointTraffic.INDEX_NAME.equals(metricName)) {\n+                response.getData().addAll(buildLabelNamesForTraffic(metricName));\n             }\n         } else {\n             Arrays.stream(LabelName.values()).forEach(label -> {\n                 response.getData().add(label.getLabel());\n             });\n         }\n+        List<String> result = response.getData().stream().limit(limitNum).collect(Collectors.toList());\n+        response.setData(result);\n         response.setStatus(ResultStatus.SUCCESS);\n         return jsonResponse(response);\n     }\n@@ -241,7 +250,8 @@ public HttpResponse labelValues(\n         @Param(\""label_name\"") String labelName,\n         @Param(\""match[]\"") Optional<String> match,\n         @Param(\""start\"") Optional<String> start,\n-        @Param(\""end\"") Optional<String> end) throws IOException {\n+        @Param(\""end\"") Optional<String> end,\n+        @Param(\""limit\"") Optional<Integer> limit) throws IOException {\n         LabelValuesQueryRsp response = new LabelValuesQueryRsp();\n         response.setStatus(ResultStatus.SUCCESS);\n         long endTS = System.currentTimeMillis();\n@@ -249,20 +259,21 @@ public HttpResponse labelValues(\n             endTS = formatTimestamp2Millis(end.get());\n         }\n         Duration duration = getDayDurationFromTimestamp(endTS);\n+        int limitNum = limit.orElse(100);\n \n         //general labels\n         if (LabelName.NAME.getLabel().equals(labelName)) {\n-            getMetricsMetadataQueryService().listMetrics(\""\"").forEach(definition -> {\n+            getMetricsMetadataQueryService().listMetrics(\""\"").stream().limit(limitNum).forEach(definition -> {\n                 response.getData().add(definition.getName());\n             });\n             return jsonResponse(response);\n         } else if (LabelName.LAYER.getLabel().equals(labelName)) {\n-            for (Layer layer : Layer.values()) {\n+            for (Layer layer : Arrays.stream(Layer.values()).limit(limitNum).collect(Collectors.toList())) {\n                 response.getData().add(layer.name());\n             }\n             return jsonResponse(response);\n         } else if (LabelName.SCOPE.getLabel().equals(labelName)) {\n-            for (Scope scope : Scope.values()) {\n+            for (Scope scope : Arrays.stream(Scope.values()).limit(limitNum).collect(Collectors.toList())) {\n                 response.getData().add(scope.name());\n             }\n             return jsonResponse(response);\n@@ -283,43 +294,35 @@ public HttpResponse labelValues(\n                 metricName);\n             if (valueColumn.isPresent() && Column.ValueDataType.LABELED_VALUE == valueColumn.get().getDataType()) {\n                 List<MetricsValues> matchedMetrics = getMatcherMetricsValues(parseResult, duration);\n-                response.getData().addAll(buildLabelValuesFromQuery(matchedMetrics, labelName));\n+                response.getData().addAll(buildLabelValuesFromQuery(matchedMetrics, labelName).stream().limit(limitNum).collect(Collectors.toList()));\n             } else {\n-                // Make compatible with Grafana 11 when use old config variables\n-                // e.g. query service list config: `label_values(service_traffic{layer='$layer'}, service)`\n-                // Grafana 11 will query this API by default rather than `/api/v1/series`(< 11)\n-                if (Objects.equals(metricName, ServiceTraffic.INDEX_NAME)) {\n-                    String serviceName = parseResult.getLabelMap().get(LabelName.SERVICE.getLabel());\n-                    if (StringUtil.isNotBlank(serviceName)) {\n-                        Service service = metadataQuery.findService(serviceName).join();\n-                        response.getData().add(service.getName());\n-                    } else {\n-                        List<Service> services = metadataQuery.listServices(\n-                            parseResult.getLabelMap().get(LabelName.LAYER.getLabel())).join();\n-                        services.forEach(service -> {\n+                try {\n+                    // Make compatible with Grafana 11 when use old config variables\n+                    // e.g. query service list config: `label_values(service_traffic{layer='$layer'}, service)`\n+                    // Grafana 11 will query this API by default rather than `/api/v1/series`(< 11)\n+                    limitNum = getLimitNum(limit, parseResult);\n+                    String layer = parseResult.getLabelMap().get(LabelName.LAYER.getLabel());\n+                    if (Objects.equals(metricName, ServiceTraffic.INDEX_NAME)) {\n+                        queryServiceTraffic(parseResult, layer, limitNum).forEach(service -> {\n                             response.getData().add(service.getName());\n                         });\n+                    } else if (Objects.equals(metricName, InstanceTraffic.INDEX_NAME)) {\n+                        String serviceName = parseResult.getLabelMap().get(LabelName.SERVICE.getLabel());\n+                        queryInstanceTraffic(parseResult, duration, layer, serviceName, limitNum).forEach(instance -> {\n+                            response.getData().add(instance.getName());\n+                        });\n+                    } else if (Objects.equals(metricName, EndpointTraffic.INDEX_NAME)) {\n+                        String serviceName = parseResult.getLabelMap().get(LabelName.SERVICE.getLabel());\n+                        String keyword = parseResult.getLabelMap().getOrDefault(LabelName.KEYWORD.getLabel(), \""\"");\n+                        queryEndpointTraffic(parseResult, duration, layer, serviceName, keyword, limitNum).forEach(\n+                            endpoint -> {\n+                                response.getData().add(endpoint.getName());\n+                            });\n                     }\n-                } else if (Objects.equals(metricName, InstanceTraffic.INDEX_NAME)) {\n-                    String serviceName = parseResult.getLabelMap().get(LabelName.SERVICE.getLabel());\n-                    String layer = parseResult.getLabelMap().get(LabelName.LAYER.getLabel());\n-                    List<ServiceInstance> instances = metadataQuery.listInstances(\n-                        duration, IDManager.ServiceID.buildId(serviceName, Layer.valueOf(layer).isNormal())).join();\n-                    instances.forEach(instance -> {\n-                        response.getData().add(instance.getName());\n-                    });\n-                } else if (Objects.equals(metricName, EndpointTraffic.INDEX_NAME)) {\n-                    String serviceName = parseResult.getLabelMap().get(LabelName.SERVICE.getLabel());\n-                    String layer = parseResult.getLabelMap().get(LabelName.LAYER.getLabel());\n-                    String keyword = parseResult.getLabelMap().getOrDefault(LabelName.KEYWORD.getLabel(), \""\"");\n-                    String limit = parseResult.getLabelMap().getOrDefault(LabelName.LIMIT.getLabel(), \""100\"");\n-                    List<Endpoint> endpoints = metadataQuery.findEndpoint(\n-                        keyword, IDManager.ServiceID.buildId(serviceName, Layer.valueOf(layer).isNormal()),\n-                        Integer.parseInt(limit), duration\n-                    ).join();\n-                    endpoints.forEach(endpoint -> {\n-                        response.getData().add(endpoint.getName());\n-                    });\n+                } catch (IllegalExpressionException e) {\n+                    response.setStatus(ResultStatus.ERROR);\n+                    response.setErrorType(ErrorType.BAD_DATA);\n+                    response.setError(e.getMessage());\n                 }\n             }\n         }\n@@ -333,7 +336,8 @@ public HttpResponse labelValues(\n     public HttpResponse series(\n         @Param(\""match[]\"") String match,\n         @Param(\""start\"") String start,\n-        @Param(\""end\"") String end) throws IOException {\n+        @Param(\""end\"") String end,\n+        @Param(\""limit\"") Optional<Integer> limit) throws IOException {\n         long startTS = formatTimestamp2Millis(start);\n         long endTS = formatTimestamp2Millis(end);\n         Duration duration = DurationUtils.timestamp2Duration(startTS, endTS);\n@@ -350,43 +354,37 @@ public HttpResponse series(\n         String metricName = parseResult.getMetricName();\n         Optional<ValueColumnMetadata.ValueColumn> valueColumn = ValueColumnMetadata.INSTANCE.readValueColumnDefinition(\n             metricName);\n+        int limitNum = getLimitNum(limit, parseResult);\n         if (valueColumn.isPresent()) {\n             ValueColumnMetadata.ValueColumn metaData = valueColumn.get();\n             Scope scope = Scope.Finder.valueOf(metaData.getScopeId());\n             Column.ValueDataType dataType = metaData.getDataType();\n             response.getData().add(buildMetaMetricInfo(metricName, scope, dataType));\n-        } else if (Objects.equals(metricName, ServiceTraffic.INDEX_NAME)) {\n-            String serviceName = parseResult.getLabelMap().get(LabelName.SERVICE.getLabel());\n-            if (StringUtil.isNotBlank(serviceName)) {\n-                Service service = metadataQuery.findService(serviceName).join();\n-                response.getData().add(buildMetricInfoFromTraffic(metricName, service));\n-            } else {\n-                List<Service> services = metadataQuery.listServices(\n-                    parseResult.getLabelMap().get(LabelName.LAYER.getLabel())).join();\n-                services.forEach(service -> {\n-                    response.getData().add(buildMetricInfoFromTraffic(metricName, service));\n-                });\n+        } else {\n+            try {\n+                String layer = parseResult.getLabelMap().get(LabelName.LAYER.getLabel());\n+                if (Objects.equals(metricName, ServiceTraffic.INDEX_NAME)) {\n+                    queryServiceTraffic(parseResult, layer, limitNum).forEach(service -> {\n+                        response.getData().add(buildMetricInfoFromTraffic(metricName, service));\n+                    });\n+                } else if (Objects.equals(metricName, InstanceTraffic.INDEX_NAME)) {\n+                    String serviceName = parseResult.getLabelMap().get(LabelName.SERVICE.getLabel());\n+                    queryInstanceTraffic(parseResult, duration, layer, serviceName, limitNum).forEach(instance -> {\n+                        response.getData().add(buildMetricInfoFromTraffic(metricName, instance));\n+                    });\n+                } else if (Objects.equals(metricName, EndpointTraffic.INDEX_NAME)) {\n+                    String serviceName = parseResult.getLabelMap().get(LabelName.SERVICE.getLabel());\n+                    String keyword = parseResult.getLabelMap().getOrDefault(LabelName.KEYWORD.getLabel(), \""\"");\n+                    queryEndpointTraffic(parseResult, duration, layer, serviceName, keyword, limitNum).forEach(\n+                        endpoint -> {\n+                            response.getData().add(buildMetricInfoFromTraffic(metricName, endpoint));\n+                        });\n+                }\n+            } catch (IllegalExpressionException e) {\n+                response.setStatus(ResultStatus.ERROR);\n+                response.setErrorType(ErrorType.BAD_DATA);\n+                response.setError(e.getMessage());\n             }\n-        } else if (Objects.equals(metricName, InstanceTraffic.INDEX_NAME)) {\n-            String serviceName = parseResult.getLabelMap().get(LabelName.SERVICE.getLabel());\n-            String layer = parseResult.getLabelMap().get(LabelName.LAYER.getLabel());\n-            List<ServiceInstance> instances = metadataQuery.listInstances(\n-                duration, IDManager.ServiceID.buildId(serviceName, Layer.valueOf(layer).isNormal())).join();\n-            instances.forEach(instance -> {\n-                response.getData().add(buildMetricInfoFromTraffic(metricName, instance));\n-            });\n-        } else if (Objects.equals(metricName, EndpointTraffic.INDEX_NAME)) {\n-            String serviceName = parseResult.getLabelMap().get(LabelName.SERVICE.getLabel());\n-            String layer = parseResult.getLabelMap().get(LabelName.LAYER.getLabel());\n-            String keyword = parseResult.getLabelMap().getOrDefault(LabelName.KEYWORD.getLabel(), \""\"");\n-            String limit = parseResult.getLabelMap().getOrDefault(LabelName.LIMIT.getLabel(), \""100\"");\n-            List<Endpoint> endpoints = metadataQuery.findEndpoint(\n-                keyword, IDManager.ServiceID.buildId(serviceName, Layer.valueOf(layer).isNormal()),\n-                Integer.parseInt(limit), duration\n-            ).join();\n-            endpoints.forEach(endpoint -> {\n-                response.getData().add(buildMetricInfoFromTraffic(metricName, endpoint));\n-            });\n         }\n \n         response.setStatus(ResultStatus.SUCCESS);\n@@ -467,6 +465,7 @@ public HttpResponse query_range(\n         @Param(\""timeout\"") Optional<String> timeout) throws IOException {\n         long startTS = formatTimestamp2Millis(start);\n         long endTS = formatTimestamp2Millis(end);\n+        //OAP downsample data by min/hour/day step, and generate step query condition automatically by the time range.\n         Duration duration = DurationUtils.timestamp2Duration(startTS, endTS);\n         ExprQueryRsp response = new ExprQueryRsp();\n         PromQLLexer lexer = new PromQLLexer(\n@@ -509,6 +508,15 @@ public HttpResponse query_range(\n         return jsonResponse(response);\n     }\n \n+    @Get\n+    @Post\n+    @Path(\""/api/v1/format_query\"")\n+    public HttpResponse query_range(@Param(\""query\"") String query) throws IOException {\n+        QueryFormatRsp rsp = new QueryFormatRsp();\n+        rsp.setData(query.replaceAll(\""\\\\s\"", \""\""));\n+        return jsonResponse(rsp);\n+    }\n+\n     @Get\n     @Post\n     @Path(\""/api/v1/status/buildinfo\"")\n@@ -617,6 +625,17 @@ private List<String> buildLabelNames(Scope scope, ValueColumnMetadata.ValueColum\n         return labelNames;\n     }\n \n+    private List<String> buildLabelNamesForTraffic(String metricName) {\n+        List<String> labelNames = new ArrayList<>();\n+        labelNames.add(LabelName.LAYER.getLabel());\n+        labelNames.add(LabelName.LIMIT.getLabel());\n+        labelNames.add(LabelName.SERVICE.getLabel());\n+        if (Objects.equals(metricName, EndpointTraffic.INDEX_NAME)) {\n+            labelNames.add(LabelName.KEYWORD.getLabel());\n+        }\n+        return labelNames;\n+    }\n+\n     private List<String> buildLabelNamesFromQuery(List<MetricsValues> metricsValues) {\n         Set<String> labelNames = new LinkedHashSet<>();\n         metricsValues.forEach(metricsValue -> {\n@@ -727,6 +746,112 @@ private List<MetricsValues> getMatcherMetricsValues(MatcherSetResult parseResult\n         return getMetricsQueryService().readLabeledMetricsValuesWithoutEntity(metricName, matchLabels, duration);\n     }\n \n+    private int getLimitNum(Optional<Integer> limitParam, MatcherSetResult parseResult) {\n+        String limitLabel = parseResult.getLabelMap().getOrDefault(LabelName.LIMIT.getLabel(), \""100\"");\n+        int limitNum = Integer.parseInt(limitLabel);\n+        if (limitParam.isPresent()) {\n+            limitNum = Integer.min(limitParam.get(), Integer.parseInt(limitLabel));\n+        }\n+        return limitNum;\n+    }\n+\n+    private List<Service> queryServiceTraffic(MatcherSetResult parseResult, String layer, int limitNum) throws IllegalExpressionException {\n+        if (StringUtil.isBlank(layer)) {\n+            throw new IllegalExpressionException(\""label {layer} should not be empty.\"");\n+        }\n+        List<Service> result = new ArrayList<>();\n+        MatcherSetResult.NameMatcher matcher = parseResult.getNameMatcher();\n+        if (matcher != null) {\n+            String serviceName = matcher.getMatchString();\n+            if (matcher.getMatchOp() == PromQLParser.EQ) {\n+                Service service = metadataQuery.findService(serviceName).join();\n+                if (service != null) {\n+                    result.add(service);\n+                }\n+            } else if (matcher.getMatchOp() == PromQLParser.NEQ) {\n+                List<Service> services = metadataQuery.listServices(layer).join();\n+                services.stream().filter(s -> !s.getName().equals(serviceName)).limit(limitNum).forEach(result::add);\n+            } else if (matcher.getMatchOp() == PromQLParser.RM) {\n+                List<Service> services = metadataQuery.listServices(layer).join();\n+                services.stream().filter(s -> s.getName().matches(serviceName)).limit(limitNum).forEach(result::add);\n+            } else if (matcher.getMatchOp() == PromQLParser.NRM) {\n+                List<Service> services = metadataQuery.listServices(layer).join();\n+                services.stream().filter(s -> !s.getName().matches(serviceName)).limit(limitNum).forEach(result::add);\n+            }\n+        } else {\n+            List<Service> services = metadataQuery.listServices(\n+                parseResult.getLabelMap().get(LabelName.LAYER.getLabel())).join();\n+            services.stream().limit(limitNum).forEach(result::add);\n+        }\n+        return result;\n+    }\n+\n+    private List<ServiceInstance> queryInstanceTraffic(MatcherSetResult parseResult,\n+                                                       Duration duration,\n+                                                       String layer,\n+                                                       String serviceName,\n+                                                       int limitNum) throws IllegalExpressionException {\n+        if (StringUtil.isBlank(layer)) {\n+            throw new IllegalExpressionException(\""label {layer} should not be empty.\"");\n+        }\n+        if (StringUtil.isBlank(serviceName)) {\n+            throw new IllegalExpressionException(\""label {service} should not be empty.\"");\n+        }\n+        List<ServiceInstance> result = new ArrayList<>();\n+        MatcherSetResult.NameMatcher matcher = parseResult.getNameMatcher();\n+        List<ServiceInstance> instances = metadataQuery.listInstances(\n+            duration, IDManager.ServiceID.buildId(serviceName, Layer.valueOf(layer).isNormal())).join();\n+        if (matcher != null) {\n+            String instanceName = matcher.getMatchString();\n+            if (matcher.getMatchOp() == PromQLParser.EQ) {\n+                instances.stream().filter(n -> n.getName().equals(instanceName)).findFirst().ifPresent(result::add);\n+            } else if (matcher.getMatchOp() == PromQLParser.NEQ) {\n+                instances.stream().filter(n -> !n.getName().equals(instanceName)).limit(limitNum).forEach(result::add);\n+            } else if (matcher.getMatchOp() == PromQLParser.RM) {\n+                instances.stream().filter(n -> n.getName().matches(instanceName)).limit(limitNum).forEach(result::add);\n+            } else if (matcher.getMatchOp() == PromQLParser.NRM) {\n+                instances.stream().filter(n -> !n.getName().matches(instanceName)).limit(limitNum).forEach(result::add);\n+            }\n+        } else {\n+            instances.stream().limit(limitNum).forEach(result::add);\n+        }\n+        return result;\n+    }\n+\n+    private List<Endpoint> queryEndpointTraffic(MatcherSetResult parseResult,\n+                                                Duration duration,\n+                                                String layer,\n+                                                String serviceName,\n+                                                String keyword,\n+                                                int limitNum) throws IllegalExpressionException {\n+        if (StringUtil.isBlank(layer)) {\n+            throw new IllegalExpressionException(\""label {layer} should not be empty.\"");\n+        }\n+        if (StringUtil.isBlank(serviceName)) {\n+            throw new IllegalExpressionException(\""label {service} should not be empty.\"");\n+        }\n+        List<Endpoint> result = new ArrayList<>();\n+        List<Endpoint> endpoints = metadataQuery.findEndpoint(\n+            keyword, IDManager.ServiceID.buildId(serviceName, Layer.valueOf(layer).isNormal()), limitNum, duration\n+        ).join();\n+        MatcherSetResult.NameMatcher matcher = parseResult.getNameMatcher();\n+        if (matcher != null) {\n+            String endpointName = matcher.getMatchString();\n+            if (matcher.getMatchOp() == PromQLParser.EQ) {\n+                endpoints.stream().filter(e -> e.getName().equals(endpointName)).findFirst().ifPresent(result::add);\n+            } else if (matcher.getMatchOp() == PromQLParser.NEQ) {\n+                endpoints.stream().filter(e -> !e.getName().equals(endpointName)).limit(limitNum).forEach(result::add);\n+            } else if (matcher.getMatchOp() == PromQLParser.RM) {\n+                endpoints.stream().filter(e -> e.getName().matches(endpointName)).limit(limitNum).forEach(result::add);\n+            } else if (matcher.getMatchOp() == PromQLParser.NRM) {\n+                endpoints.stream().filter(e -> !e.getName().matches(endpointName)).limit(limitNum).forEach(result::add);\n+            }\n+        } else {\n+            endpoints.stream().limit(limitNum).forEach(result::add);\n+        }\n+        return result;\n+    }\n+\n     public enum QueryType {\n         INSTANT,\n         RANGE,\n\ndiff --git a/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/rt/PromQLMatchVisitor.java b/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/rt/PromQLMatchVisitor.java\nindex 7f1cee026fc2..447038d4a5e3 100644\n--- a/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/rt/PromQLMatchVisitor.java\n+++ b/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/rt/PromQLMatchVisitor.java\n@@ -19,8 +19,12 @@\n package org.apache.skywalking.oap.query.promql.rt;\n \n import java.util.Map;\n+import org.apache.skywalking.oap.query.promql.entity.LabelName;\n import org.apache.skywalking.oap.query.promql.rt.result.MatcherSetResult;\n import org.apache.skywalking.oap.query.promql.rt.result.ParseResultType;\n+import org.apache.skywalking.oap.server.core.analysis.manual.endpoint.EndpointTraffic;\n+import org.apache.skywalking.oap.server.core.analysis.manual.instance.InstanceTraffic;\n+import org.apache.skywalking.oap.server.core.analysis.manual.service.ServiceTraffic;\n import org.apache.skywalking.promql.rt.grammar.PromQLParser;\n import org.apache.skywalking.promql.rt.grammar.PromQLParserBaseVisitor;\n \n@@ -38,7 +42,17 @@ public MatcherSetResult visitMetricInstant(PromQLParser.MetricInstantContext ctx\n                 String labelName = labelCtx.labelName().getText();\n                 String labelValue = labelCtx.labelValue().getText();\n                 String labelValueTrim = labelValue.substring(1, labelValue.length() - 1);\n-                labelMap.put(labelName, labelValueTrim);\n+                if ((metricName.equals(ServiceTraffic.INDEX_NAME) && LabelName.SERVICE.getLabel().equals(labelName))\n+                    || ((metricName.equals(InstanceTraffic.INDEX_NAME)) && LabelName.SERVICE_INSTANCE.getLabel()\n+                                                                                                     .equals(labelName))\n+                    || ((metricName.equals(EndpointTraffic.INDEX_NAME)) && LabelName.ENDPOINT.getLabel()\n+                                                                                             .equals(labelName))) {\n+                    result.setNameMatcher(\n+                        new MatcherSetResult.NameMatcher(\n+                            metricName, labelValueTrim, labelCtx.matchOp().getStart().getType()));\n+                } else {\n+                    labelMap.put(labelName, labelValueTrim);\n+                }\n             }\n         }\n         return result;\n\ndiff --git a/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/rt/result/MatcherSetResult.java b/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/rt/result/MatcherSetResult.java\nindex c877edea9e85..4fb630675fc2 100644\n--- a/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/rt/result/MatcherSetResult.java\n+++ b/oap-server/server-query-plugin/promql-plugin/src/main/java/org/apache/skywalking/oap/query/promql/rt/result/MatcherSetResult.java\n@@ -27,5 +27,13 @@\n @Data\n public class MatcherSetResult extends ParseResult {\n     private String metricName;\n+    private NameMatcher nameMatcher;\n     private Map<String, String> labelMap = new HashMap<>();\n+\n+    @Data\n+    public static class NameMatcher {\n+        public final String trafficName;\n+        public final String matchString;\n+        public final int matchOp;\n+    }\n }\n"", ""test_patch"": ""diff --git a/test/e2e-v2/cases/promql/docker-compose.yml b/test/e2e-v2/cases/promql/docker-compose.yml\nindex 314631750737..437c8473bf9d 100644\n--- a/test/e2e-v2/cases/promql/docker-compose.yml\n+++ b/test/e2e-v2/cases/promql/docker-compose.yml\n@@ -20,15 +20,12 @@ services:\n     extends:\n       file: ../../script/docker-compose/base-compose.yml\n       service: oap\n-    environment:\n-      SW_STORAGE: elasticsearch\n-      SW_STORAGE_ES_CLUSTER_NODES: es:9200\n     volumes:\n       - ./oal/core.oal:/skywalking/config/oal/core.oal\n     ports:\n       - 9090\n     depends_on:\n-      es:\n+      banyandb:\n         condition: service_healthy\n     networks:\n       - e2e\n@@ -57,21 +54,12 @@ services:\n       provider:\n         condition: service_healthy\n \n-  es:\n-    image: elastic/elasticsearch:7.10.2\n+  banyandb:\n+    extends:\n+      file: ../../script/docker-compose/base-compose.yml\n+      service: banyandb\n     ports:\n-      - 9200:9200\n-    networks:\n-      - e2e\n-    environment:\n-      - discovery.type=single-node\n-      - cluster.routing.allocation.disk.threshold_enabled=false\n-      - xpack.security.enabled=false\n-    healthcheck:\n-      test: [\""CMD\"", \""bash\"", \""-c\"", \""cat < /dev/null > /dev/tcp/127.0.0.1/9200\""]\n-      interval: 5s\n-      timeout: 60s\n-      retries: 120\n+      - 17912\n \n \n networks:\n\ndiff --git a/test/e2e-v2/cases/promql/expected/endpoint-names.yml b/test/e2e-v2/cases/promql/expected/endpoint-names.yml\nnew file mode 100644\nindex 000000000000..d5f1f13bf87b\n--- /dev/null\n+++ b/test/e2e-v2/cases/promql/expected/endpoint-names.yml\n@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \""License\""); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \""AS IS\"" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+{\n+  \""status\"": \""success\"",\n+  \""data\"": [\n+    \""POST:/users\""\n+  ]\n+}\n\ndiff --git a/test/e2e-v2/cases/promql/expected/instance-names.yml b/test/e2e-v2/cases/promql/expected/instance-names.yml\nnew file mode 100644\nindex 000000000000..43b5c0cabcfa\n--- /dev/null\n+++ b/test/e2e-v2/cases/promql/expected/instance-names.yml\n@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \""License\""); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \""AS IS\"" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+{\n+  \""status\"": \""success\"",\n+  \""data\"": [\n+    \""provider1\""\n+  ]\n+}\n\ndiff --git a/test/e2e-v2/cases/promql/expected/service-names-limit.yml b/test/e2e-v2/cases/promql/expected/service-names-limit.yml\nnew file mode 100644\nindex 000000000000..f0a37c5b481e\n--- /dev/null\n+++ b/test/e2e-v2/cases/promql/expected/service-names-limit.yml\n@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \""License\""); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \""AS IS\"" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+{\n+  \""status\"": \""success\"",\n+  \""data\"": [\n+    \""e2e-service-provider\""\n+  ]\n+}\n\ndiff --git a/test/e2e-v2/cases/promql/expected/service-names.yml b/test/e2e-v2/cases/promql/expected/service-names.yml\nnew file mode 100644\nindex 000000000000..eec14eb3153a\n--- /dev/null\n+++ b/test/e2e-v2/cases/promql/expected/service-names.yml\n@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \""License\""); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \""AS IS\"" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+{\n+  \""status\"": \""success\"",\n+  \""data\"": [\n+    \""e2e-service-provider\"",\n+    \""e2e-service-consumer\""\n+  ]\n+}\n\ndiff --git a/test/e2e-v2/cases/promql/expected/service-traffic-limit.yml b/test/e2e-v2/cases/promql/expected/service-traffic-limit.yml\nnew file mode 100644\nindex 000000000000..d6566bb5c9f4\n--- /dev/null\n+++ b/test/e2e-v2/cases/promql/expected/service-traffic-limit.yml\n@@ -0,0 +1,26 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \""License\""); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \""AS IS\"" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+{\n+  \""status\"": \""success\"",\n+  \""data\"": [\n+    {\n+      \""__name__\"": \""service_traffic\"",\n+      \""service\"": \""e2e-service-provider\"",\n+      \""scope\"": \""Service\"",\n+      \""layer\"": \""GENERAL\""\n+    }\n+  ]\n+}\n\ndiff --git a/test/e2e-v2/cases/promql/promql-cases.yaml b/test/e2e-v2/cases/promql/promql-cases.yaml\nindex e53eb38a360f..480feaac78e6 100644\n--- a/test/e2e-v2/cases/promql/promql-cases.yaml\n+++ b/test/e2e-v2/cases/promql/promql-cases.yaml\n@@ -17,12 +17,22 @@ cases:\n   # traffics query\n   - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/series -d 'match[]=service_traffic{layer=\""GENERAL\""}&start='$(($(date +%s)-1800))'&end='$(date +%s)\n     expected: expected/service-traffic.yml\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/series -d 'match[]=service_traffic{layer=\""GENERAL\""}&limit=1&start='$(($(date +%s)-1800))'&end='$(date +%s)\n+    expected: expected/service-traffic-limit.yml\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/series -d 'match[]=service_traffic{layer=\""GENERAL\"",limit=\""1\""}&start='$(($(date +%s)-1800))'&end='$(date +%s)\n+    expected: expected/service-traffic-limit.yml\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/series -d 'match[]=service_traffic{layer=\""GENERAL\"",service=~\"".*-provider\""}&start='$(($(date +%s)-1800))'&end='$(date +%s)\n+    expected: expected/service-traffic-limit.yml\n     #RFC3399\n   - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/series -d 'match[]=service_traffic{layer=\""GENERAL\""}&start='$(($(date +%s)-1800))'&end='$(date -u +%Y-%m-%dT%H:%M:%S.111Z)\n     expected: expected/service-traffic.yml\n-  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/series -d 'match[]=instance_traffic{layer=\""GENERAL\"", service=\""e2e-service-provider\""}&start='$(($(date +%s)-1800))'&end='$(date +%s)\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/series -d 'match[]=instance_traffic{layer=\""GENERAL\"", service=\""e2e-service-provider\""}&limit=1&start='$(($(date +%s)-1800))'&end='$(date +%s)\n     expected: expected/instance-traffic.yml\n-  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/series -d 'match[]=endpoint_traffic{layer=\""GENERAL\"", service=\""e2e-service-provider\"", keyword=\""POST:/users\""}&start='$(($(date +%s)-1800))'&end='$(date +%s)\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/series -d 'match[]=instance_traffic{layer=\""GENERAL\"", service=\""e2e-service-provider\"", service_instance=~\""provider1|provider2\""}&start='$(($(date +%s)-1800))'&end='$(date +%s)\n+    expected: expected/instance-traffic.yml\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/series -d 'match[]=endpoint_traffic{layer=\""GENERAL\"", service=\""e2e-service-provider\"", keyword=\""POST:/users\""}&limit=1&start='$(($(date +%s)-1800))'&end='$(date +%s)\n+    expected: expected/endpoint-traffic.yml\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/series -d 'match[]=endpoint_traffic{layer=\""GENERAL\"", service=\""e2e-service-provider\"", endpoint=~\""^POST:.*\""}&start='$(($(date +%s)-1800))'&end='$(date +%s)\n     expected: expected/endpoint-traffic.yml\n   # metrics series\n   - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/series -d 'match[]=service_cpm&start='$(($(date +%s)-1800))'&end='$(date +%s)\n@@ -31,6 +41,23 @@ cases:\n     expected: expected/instance-metric-series.yml\n   - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/series -d 'match[]=endpoint_cpm&start='$(($(date +%s)-1800))'&end='$(date +%s)\n     expected: expected/endpoint-metric-series.yml\n+  # traffic names query\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/label/service/values -d 'match[]=service_traffic{layer=\""GENERAL\""}&start='$(($(date +%s)-1800))'&end='$(date -u +%Y-%m-%dT%H:%M:%S.111Z)\n+    expected: expected/service-names.yml\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/label/service/values -d 'match[]=service_traffic{layer=\""GENERAL\"",limit=\""1\""}&start='$(($(date +%s)-1800))'&end='$(date -u +%Y-%m-%dT%H:%M:%S.111Z)\n+    expected: expected/service-names-limit.yml\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/label/service/values -d 'match[]=service_traffic{layer=\""GENERAL\""}&limit=1'\n+    expected: expected/service-names-limit.yml\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/label/service/values -d 'match[]=service_traffic{layer=\""GENERAL\"",service=~\"".*-provider\""}'\n+    expected: expected/service-names-limit.yml\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/label/service_instance/values -d 'match[]=instance_traffic{layer=\""GENERAL\"", service=\""e2e-service-provider\""}&limit=1'\n+    expected: expected/instance-names.yml\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/label/service_instance/values -d 'match[]=instance_traffic{layer=\""GENERAL\"", service=\""e2e-service-provider\"", service_instance=~\""provider1|provider2\""}&limit=1'\n+    expected: expected/instance-names.yml\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/label/endpoint/values -d 'match[]=endpoint_traffic{layer=\""GENERAL\"", service=\""e2e-service-provider\"", keyword=\""POST:/users\""}&limit=1'\n+    expected: expected/endpoint-names.yml\n+  - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/label/endpoint/values -d 'match[]=endpoint_traffic{layer=\""GENERAL\"", service=\""e2e-service-provider\"", endpoint=~\""^POST:.*\""}'\n+    expected: expected/endpoint-names.yml\n   # metrics names query\n   - query: curl -X GET http://${oap_host}:${oap_9090}/api/v1/label/__name__/values\n     expected: expected/metrics-names.yml\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-13144"", ""pr_id"": 13144, ""issue_id"": 12938, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] [BanyanDB] Support Hot-Warn-Cold configuration and API version check \n### Search before asking\n\n- [X] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nBefore 10.2 release, we are pending on BanyanDB 0.8, there are two things that will cause OAP side change\n\n- [x]  https://github.com/apache/skywalking/issues/12920 OAP needs to verify BanyanDB API versions to keep compatible checks passed.\n- [x]  https://github.com/apache/skywalking/issues/11945 OAP needs to add configurations and documents to set these up for data rolling.\n\nFYI @hanahmily We have closed most of 10.2, all pending things are round database side milestone.\n\n### Use case\n\n_No response_\n\n### Related issues\n\n_No response_\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [X] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 172, ""test_files_count"": 1, ""non_test_files_count"": 11, ""pr_changed_files"": [""docs/en/banyandb/stages.md"", ""docs/en/banyandb/ttl.md"", ""docs/en/changes/changes.md"", ""docs/en/setup/backend/configuration-vocabulary.md"", ""docs/en/setup/backend/storages/banyandb.md"", ""docs/menu.yml"", ""oap-server/server-starter/src/main/resources/bydb.yml"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java"", ""test/e2e-v2/cases/kafka/log/Dockerfile.fluentd""], ""pr_changed_test_files"": [""test/e2e-v2/cases/kafka/log/Dockerfile.fluentd""], ""base_commit"": ""179511074275b54cd1c69ccae43d385eaed6a021"", ""head_commit"": ""2e251988d520ee59c203ead749a03a16cb64cb72"", ""repo_url"": ""https://github.com/apache/skywalking/pull/13144"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/13144"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-28T03:41:05.000Z"", ""patch"": ""diff --git a/docs/en/banyandb/stages.md b/docs/en/banyandb/stages.md\nnew file mode 100644\nindex 000000000000..cc212d1f3de6\n--- /dev/null\n+++ b/docs/en/banyandb/stages.md\n@@ -0,0 +1,82 @@\n+# Data Lifecycle Stages(Hot/Warm/Cold)\n+\n+Lifecycle Stages provide a mechanism to optimize storage costs and query performance based on the time granularity of records/metrics,\n+specially if you require keep mass of data for a long time.\n+\n+The data lifecycle includes hot, warm, and cold stages. Each stage has different TTL settings and Segment Creation Policies.\n+Each group of records/metrics can be automatically migrated and stored in different stages according to the configuration.\n+\n+## Stages Definition\n+- **hot**: The default first stage of data storage. The data is the newest, can be updated(metrics), and is most frequently queried.\n+- **warm**: Optional, the second stage of data storage. The data is less frequently queried than the hot stage, can't be updated, and still performs well.\n+- **cold**: Optional, the third stage of data storage. The data is rarely queried and is stored for a long time. The query performance is significantly lower than the hot/warm stages data.\n+\n+If necessary, you also can jump the warm stage, and only use hot and cold stages. Then the data will be moved to the cold stage after the TTL of the hot stage.\n+\n+## Configuration Guidelines\n+The lifecycle stages configuration is under each group settings of the `bydb.yml` file, for example, the `metricsMin` group:\n+\n+```yaml\n+  metricsMin:\n+    # The settings for the default `hot` stage.\n+    shardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_SHARD_NUM:2}\n+    segmentInterval: ${SW_STORAGE_BANYANDB_GM_MINUTE_SI_DAYS:1}\n+    ttl: ${SW_STORAGE_BANYANDB_GM_MINUTE_TTL_DAYS:7}\n+    enableWarmStage: ${SW_STORAGE_BANYANDB_GM_MINUTE_ENABLE_WARM_STAGE:false}\n+    enableColdStage: ${SW_STORAGE_BANYANDB_GM_MINUTE_ENABLE_COLD_STAGE:false}\n+    warm:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_WARM_SHARD_NUM:2}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_MINUTE_WARM_SI_DAYS:3}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_MINUTE_WARM_TTL_DAYS:15}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_MINUTE_WARM_NODE_SELECTOR:\""type=warm\""}\n+    cold:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_COLD_SHARD_NUM:2}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_MINUTE_COLD_SI_DAYS:5}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_MINUTE_COLD_TTL_DAYS:60}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_MINUTE_COLD_NODE_SELECTOR:\""type=cold\""}\n+```\n+\n+1. **shardNum**: The number of shards for the group.\n+2. **segmentInterval**: The time interval in days for creating a new data segment.\n+- According to the freshness of the data, the `segmentInterval` days should: `hot` < `warm` < `cold`.\n+3. **ttl**: The time-to-live for data within the group, in days.\n+4. **enableWarmStage/enableColdStage**: Enable the warm/cold stage for the group.\n+- The `hot` stage is always enabled by default.\n+- If the `warm` stage is enabled, the data will be moved to the `warm` stage after the TTL of the `hot` stage.\n+- If the `cold` stage is enabled and `warm` stage is disabled, the data will be moved to the `cold` stage after the TTL of the `hot` stage.\n+- If both `warm` and `cold` stages are enabled, the data will be moved to the `warm` stage after the TTL of the `hot` stage, and then to the `cold` stage after the TTL of the `warm` stage.\n+- OAP will query the data from the `hot and warm` stage by default if the `warm` stage is enabled.\n+5. **nodeSelector**: Specifying target nodes for this stage.\n+\n+For more details on configuring `segmentIntervalDays` and `ttlDays`, refer to the [BanyanDB Rotation](https://skywalking.apache.org/docs/skywalking-banyandb/latest/concept/rotation/) documentation.\n+\n+## Procedure and The TTL for Stages\n+About the TTL can refer to [Progressive TTL](ttl.md).\n+The following diagram illustrates the lifecycle stages, assuming the TTL settings for hot, warm and cold stages are `TTL1, TTL2 and TTL3` days respectively:\n+\n+```mermaid\n+sequenceDiagram\n+  Data(T0) ->> Hot Data(TTL1): Input\n+  Hot Data(TTL1) -->+ Hot Data(TTL1): TTL1\n+  Hot Data(TTL1) ->>- Warm Data(TTL2): Migrate\n+  Warm Data(TTL2) -->+ Warm Data(TTL2): TTL2 - TTL1\n+  Warm Data(TTL2) ->>- Cold Data(TTL3): Migrate\n+  Cold Data(TTL3) -->+ Cold Data(TTL3): TTL3 - TTL2\n+  Cold Data(TTL3) ->>- Deleted: Delete\n+  Data(T0) --> Hot Data(TTL1): Live TTL1 Days\n+  Data(T0) --> Warm Data(TTL2): Live TTL2 Days\n+  Data(T0) --> Cold Data(TTL3): Live TTL3 Days\n+```\n+\n+- When the data is input, it will be stored in the hot stage and live for `TTL1` days.\n+- After `TTL1` days, the data will be migrated to the warm stage and live until `TTL2` days. **It means data will in this stage for (TTL2 - TTL1) days**.\n+- After `TTL2` days, the data will be migrated to the cold stage and live until `TTL3` days. **It means data will in this stage for (TTL3 - TTL2) days**.\n+- After `TTL3` days, the data will be deleted.\n+- The data will live for `TTL3` days in total.\n+\n+## Querying\n+- According to the lifecycle stages configuration, OAP will query the data from the `hot and warm` stage by default if the `warm` stage is enabled.\n+Otherwise, OAP will query the data from the `hot` stage only.\n+- If the `cold` stage is enabled, for better query performance, you should specify the stage in the query and OAP will limit the query time range.\n+\n+\n\ndiff --git a/docs/en/banyandb/ttl.md b/docs/en/banyandb/ttl.md\nindex 30700af32916..2baab5208c2e 100644\n--- a/docs/en/banyandb/ttl.md\n+++ b/docs/en/banyandb/ttl.md\n@@ -35,18 +35,18 @@ For both standard and super datasets:\n \n Configure `SIDays` and `TTLDays` based on data retention and query requirements. Recommended settings include:\n \n-| Group          | `SIDays` | `TTLDays` |\n-|----------------|----------|-----------|\n-| Minute (`gmMinute`) | 1        | 7         |\n-| Hour (`gmHour`)     | 5        | 15        |\n-| Day (`gmDay`)       | 15       | 15        |\n-| Index (`gmIndex`)   | 15       | 15        |\n+| Group                  | `SIDays` | `TTLDays` |\n+|------------------------|----------|-----------|\n+| Minute (`metricsMin`)  | 1        | 7         |\n+| Hour (`metricsHour`)   | 5        | 15        |\n+| Day (`metricsDay`)     | 15       | 15        |\n+| Index (`metadata`)     | 15       | 15        |\n \n **Group Descriptions:**\n \n-- **Minute (`gmMinute`)**: Stores metrics with a 1-minute granularity. Suitable for recent data queries requiring minute-level detail. Consequently, it has shorter `SIDays` and `TTLDays` compared to other groups.\n-- **Hour (`gmHour`)**: Stores metrics with a 1-hour granularity. Designed for queries that need hour-level detail over a longer period than minute-level data.\n-- **Day (`gmDay`)**: Stores metrics with a 1-day granularity. This group handles the longest segment intervals and TTLs among all granularity groups.\n-- **Index (`gmIndex`)**: Stores metrics used solely for indexing without value columns. Since queries often scan all segments in the `index` group, it shares the same `SIDays` and `TTLDays` as the `day` group to optimize performance. This group's `TTL` must be set to the **max** value of all groups.\n+- **Minute (`metricsMin`)**: Stores metrics with a 1-minute granularity. Suitable for recent data queries requiring minute-level detail. Consequently, it has shorter `SIDays` and `TTLDays` compared to other groups.\n+- **Hour (`metricsHour`)**: Stores metrics with a 1-hour granularity. Designed for queries that need hour-level detail over a longer period than minute-level data.\n+- **Day (`metricsDay`)**: Stores metrics with a 1-day granularity. This group handles the longest segment intervals and TTLs among all granularity groups.\n+- **Index (`metadata`)**: Stores metrics used solely for indexing without value columns. Since queries often scan all segments in the `index` group, it shares the same `SIDays` and `TTLDays` as the `day` group to optimize performance. This group's `TTL` must be set to the **max** value of all groups.\n \n For more details on configuring `segmentIntervalDays` and `ttlDays`, refer to the [BanyanDB Rotation](https://skywalking.apache.org/docs/skywalking-banyandb/latest/concept/rotation/) documentation.\n\ndiff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex aec9ae014d4f..e71224299fe6 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -4,10 +4,13 @@\n \n #### OAP Server\n \n+* BanyanDB: Support `hot/warm/cold` stages configuration.\n+\n #### UI\n \n #### Documentation\n \n+* BanyanDB: Add `Data Lifecycle Stages(Hot/Warm/Cold)` documentation.\n \n All issues and pull requests are [here](https://github.com/apache/skywalking/milestone/230?closed=1)\n \n\ndiff --git a/docs/en/setup/backend/configuration-vocabulary.md b/docs/en/setup/backend/configuration-vocabulary.md\nindex c5686cd58986..60c715066267 100644\n--- a/docs/en/setup/backend/configuration-vocabulary.md\n+++ b/docs/en/setup/backend/configuration-vocabulary.md\n@@ -354,50 +354,122 @@ It divided into several modules, each of which has its own settings. The followi\n Since 10.2.0, the banyandb configuration is separated to an independent configuration file: `bydb.yaml`.\n The following table lists the configuration items:\n \n-| Part   | Group         | Settings                        | Value(s) and Explanation                                                                                                                                                                                              | System Environment Variable\u00b9                            | Default         |\n-|--------|---------------|---------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------|-----------------|\n-| global | -             | -                               | The global settings for the whole BanyanDB.                                                                                                                                                                           | -                                                       | -               |\n-| -      | -             | targets                         | Hosts with ports of the BanyanDB.                                                                                                                                                                                     | SW_STORAGE_BANYANDB_TARGETS                             | 127.0.0.1:17912 |\n-| -      | -             | maxBulkSize                     | The maximum size of write entities in a single batch write call.                                                                                                                                                      | SW_STORAGE_BANYANDB_MAX_BULK_SIZE                       | 10000           |\n-| -      | -             | flushInterval                   | Period of flush interval. In the timeunit of seconds.                                                                                                                                                                 | SW_STORAGE_BANYANDB_FLUSH_INTERVAL                      | 15              |\n-| -      | -             | flushTimeout                    | The timeout seconds of a bulk flush.                                                                                                                                                                                  | SW_STORAGE_BANYANDB_FLUSH_TIMEOUT                       | 10              |\n-| -      | -             | concurrentWriteThreads          | Concurrent consumer threads for batch writing.                                                                                                                                                                        | SW_STORAGE_BANYANDB_CONCURRENT_WRITE_THREADS            | 15              |\n-| -      | -             | profileTaskQueryMaxSize         | Max size of ProfileTask to be fetched.                                                                                                                                                                                | SW_STORAGE_BANYANDB_PROFILE_TASK_QUERY_MAX_SIZE         | 200             |\n-| -      | -             | resultWindowMaxSize             | The maximum size of dataset when the OAP loads cache, such as network aliases.                                                                                                                                        | SW_STORAGE_BANYAND_QUERY_MAX_WINDOW_SIZE                | 10000           |\n-| -      | -             | metadataQueryMaxSize            | The maximum size of metadata per query.                                                                                                                                                                               | SW_STORAGE_BANYAND_QUERY_MAX_SIZE                       | 10000           |\n-| -      | -             | segmentQueryMaxSize             | The maximum size of trace segments per query.                                                                                                                                                                         | SW_STORAGE_BANYAND_QUERY_SEGMENT_SIZE                   | 200             |\n-| -      | -             | asyncProfilerTaskQueryMaxSize   | Max size of AsyncProfilerTask to be fetched.                                                                                                                                                                          | SW_STORAGE_BANYANDB_ASYNC_PROFILER_TASK_QUERY_MAX_SIZE  | 200             |\n-| -      | -             | profileDataQueryScrollBatchSize | The batch size of query profiling data.                                                                                                                                                                               | SW_STORAGE_BANYAND_QUERY_PROFILE_DATA_BATCH_SIZE        | 100             |\n-| -      | -             | sslTrustCAPath                  | If the BanyanDB server is configured with TLS, config the TLS cert file path and open tls connection.                                                                                                                 | SW_STORAGE_BANYANDB_SSL_TRUST_CA_PATH                   | -               |\n-| groups | -             | -                               | The settings for each group.                                                                                                                                                                                          | -                                                       | -               |\n-| -      | recordsNormal | -                               | The group for records not specified in \""super\"". Each dataset will be grouped under a single group named \""normal\"".                                                                                                     | -                                                       | -               |\n-| -      | -             | shardNum                        | Shards Number for normal records group.                                                                                                                                                                               | SW_STORAGE_BANYANDB_GR_NORMAL_SHARD_NUM                 | 1               | \n-| -      | -             | segmentInterval                 | Shards Number for normal records group.                                                                                                                                                                               | SW_STORAGE_BANYANDB_GR_NORMAL_SI_DAYS                   | 1               | \n-| -      | -             | ttl                             | Shards Number for normal records group.                                                                                                                                                                               | SW_STORAGE_BANYANDB_GR_NORMAL_TTL_DAYS                  | 3               | \n-| -      | recordsSuper  | -                               | `super` is a special dataset designed to store trace or log data that is too large for normal datasets.Each super dataset will be a separate group in BanyanDB, following the settings defined in the \""super\"" section.| -                                                       | -               |\n-| -      | -             | shardNum                        | Shards Number for super records group.                                                                                                                                                                                | SW_STORAGE_BANYANDB_GR_SUPER_SHARD_NUM                  | 2               | \n-| -      | -             | segmentInterval                 | Shards Number for super records group.                                                                                                                                                                                | SW_STORAGE_BANYANDB_GR_SUPER_SI_DAYS                    | 1               | \n-| -      | -             | ttl                             | Shards Number for super records group.                                                                                                                                                                                | SW_STORAGE_BANYANDB_GR_SUPER_TTL_DAYS                   | 3               | \n-| -      | metricsMin    | -                               | The group for minute granularity metrics group.                                                                                                                                                                       | -                                                       | -               |\n-| -      | -             | shardNum                        | Shards Number for minute granularity metrics group.                                                                                                                                                                   | SW_STORAGE_BANYANDB_GM_MINUTE_SHARD_NUM                 | 2               | \n-| -      | -             | segmentInterval                 | Shards Number for minute granularity metrics group.                                                                                                                                                                   | SW_STORAGE_BANYANDB_GM_MINUTE_SI_DAYS                   | 1               | \n-| -      | -             | ttl                             | Shards Number for minute granularity metrics group.                                                                                                                                                                   | SW_STORAGE_BANYANDB_GM_MINUTE_TTL_DAYS                  | 7               | \n-| -      | metricsHour   | -                               | The group for hour granularity metrics.                                                                                                                                                                               | -                                                       | -               |\n-| -      | -             | shardNum                        | Shards Number for hour granularity metrics group.                                                                                                                                                                     | SW_STORAGE_BANYANDB_GM_HOUR_SHARD_NUM                   | 1               | \n-| -      | -             | segmentInterval                 | Shards Number for hour granularity metrics group.                                                                                                                                                                     | SW_STORAGE_BANYANDB_GM_HOUR_SI_DAYS                     | 5               | \n-| -      | -             | ttl                             | Shards Number for hour granularity metrics group.                                                                                                                                                                     | SW_STORAGE_BANYANDB_GM_HOUR_TTL_DAYS                    | 15              | \n-| -      | metricsDay    | -                               | The group for day granularity metrics.                                                                                                                                                                                | -                                                       | -               |\n-| -      | -             | shardNum                        | Shards Number for day granularity metrics group.                                                                                                                                                                      | SW_STORAGE_BANYANDB_GM_DAY_SHARD_NUM                    | 1               | \n-| -      | -             | segmentInterval                 | Shards Number for day granularity metrics group.                                                                                                                                                                      | SW_STORAGE_BANYANDB_GM_DAY_SI_DAYS                      | 15              | \n-| -      | -             | ttl                             | Shards Number for day granularity metrics group.                                                                                                                                                                      | SW_STORAGE_BANYANDB_GM_DAY_TTL_DAYS                     | 15              | \n-| -      | metadata      | -                               | The `index` group is designed to store metrics that are used for indexing without value columns. Such as `service_traffic`, `network_address_alias`, etc. Since BanyanDB *0.8.0*.                                     | -                                                       | -               |\n-| -      | -             | shardNum                        | Shards Number for metadata `index` group.                                                                                                                                                                             | SW_STORAGE_BANYANDB_GM_INDEX_SHARD_NUM                  | 2               | \n-| -      | -             | segmentInterval                 | Shards Number for metadata `index` group.                                                                                                                                                                             | SW_STORAGE_BANYANDB_GM_INDEX_SI_DAYS                    | 15              | \n-| -      | -             | ttl                             | Shards Number for metadata `index` group.                                                                                                                                                                             | SW_STORAGE_BANYANDB_GM_INDEX_TTL_DAYS                   | 15              | \n-| -      | property      | -                               | The group settings of property, such as UI and profiling.                                                                                                                                                             | -                                                       | -               |\n-| -      | -             | shardNum                        | Shards Number for property group.                                                                                                                                                                                     | SW_STORAGE_BANYANDB_GP_PROPERTY_SHARD_NUM               | 1               | \n+### Global Configuration\n+The global settings for the whole BanyanDB:  \n \n-### Note\n+| Settings                        | Value(s) and Explanation                                                                              | System Environment Variable\u00b9                            | Default         |\n+|---------------------------------|-------------------------------------------------------------------------------------------------------|---------------------------------------------------------|-----------------|\n+| targets                         | Hosts with ports of the BanyanDB.                                                                     | SW_STORAGE_BANYANDB_TARGETS                             | 127.0.0.1:17912 |\n+| maxBulkSize                     | The maximum size of write entities in a single batch write call.                                      | SW_STORAGE_BANYANDB_MAX_BULK_SIZE                       | 10000           |\n+| flushInterval                   | Period of flush interval. In the timeunit of seconds.                                                 | SW_STORAGE_BANYANDB_FLUSH_INTERVAL                      | 15              |\n+| flushTimeout                    | The timeout seconds of a bulk flush.                                                                  | SW_STORAGE_BANYANDB_FLUSH_TIMEOUT                       | 10              |\n+| concurrentWriteThreads          | Concurrent consumer threads for batch writing.                                                        | SW_STORAGE_BANYANDB_CONCURRENT_WRITE_THREADS            | 15              |\n+| profileTaskQueryMaxSize         | Max size of ProfileTask to be fetched.                                                                | SW_STORAGE_BANYANDB_PROFILE_TASK_QUERY_MAX_SIZE         | 200             |\n+| resultWindowMaxSize             | The maximum size of dataset when the OAP loads cache, such as network aliases.                        | SW_STORAGE_BANYAND_QUERY_MAX_WINDOW_SIZE                | 10000           |\n+| metadataQueryMaxSize            | The maximum size of metadata per query.                                                               | SW_STORAGE_BANYAND_QUERY_MAX_SIZE                       | 10000           |\n+| segmentQueryMaxSize             | The maximum size of trace segments per query.                                                         | SW_STORAGE_BANYAND_QUERY_SEGMENT_SIZE                   | 200             |\n+| asyncProfilerTaskQueryMaxSize   | Max size of AsyncProfilerTask to be fetched.                                                          | SW_STORAGE_BANYANDB_ASYNC_PROFILER_TASK_QUERY_MAX_SIZE  | 200             |\n+| profileDataQueryScrollBatchSize | The batch size of query profiling data.                                                               | SW_STORAGE_BANYAND_QUERY_PROFILE_DATA_BATCH_SIZE        | 100             |\n+| sslTrustCAPath                  | If the BanyanDB server is configured with TLS, config the TLS cert file path and open tls connection. | SW_STORAGE_BANYANDB_SSL_TRUST_CA_PATH                   | -               |\n+\n+### Group Configuration\n+The settings for each group:\n+The `hot` stage is enabled by default for all groups.\n+If the `warm` stage is enabled, the data will be moved to the `warm` stage after the TTL of the `hot` stage.\n+If the `cold` stage is enabled and `warm` stage is disabled, the data will be moved to the `cold` stage after the TTL of the `hot` stage.\n+If both `warm` and `cold` stages are enabled, the data will be moved to the `warm` stage after the TTL of the `hot` stage, and then to the `cold` stage after the TTL of the `warm` stage.\n+OAP will query the data from the \""hot and warm\"" stage by default if the \""warm\"" stage is enabled.\n+\n+| Group         | Settings        | Stage  Settings | Value(s) and Explanation                                                                                                                                                                                          | System Environment Variable\u00b9                     | Default   |\n+|---------------|-----------------|-----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------|-----------|\n+| recordsNormal | -               | -               | The group for records not specified in `super`. Each dataset will be grouped under a single group named `normal`.                                                                                                 | -                                                | -         |\n+| -             | shardNum        | -               | Shards Number for normal records group.                                                                                                                                                                           | SW_STORAGE_BANYANDB_GR_NORMAL_SHARD_NUM          | 1         | \n+| -             | segmentInterval | -               | Segment Interval Days for normal records group.                                                                                                                                                                   | SW_STORAGE_BANYANDB_GR_NORMAL_SI_DAYS            | 1         | \n+| -             | ttl             | -               | TTL Days for normal records group.                                                                                                                                                                                | SW_STORAGE_BANYANDB_GR_NORMAL_TTL_DAYS           | 3         | \n+| -             | enableWarmStage | -               | Activate warm stage for normal records group.                                                                                                                                                                     | SW_STORAGE_BANYANDB_GR_NORMAL_ENABLE_WARM_STAGE  | false     | \n+| -             | enableColdStage | -               | Activate cold stage for normal records group.                                                                                                                                                                     | SW_STORAGE_BANYANDB_GR_NORMAL_ENABLE_COLD_STAGE  | false     | \n+| -             | warm            | -               | The warm stage settings.                                                                                                                                                                                          | -                                                | -         | \n+| -             | -               | shardNum        | Shards Number for this stage.                                                                                                                                                                                     | SW_STORAGE_BANYANDB_GR_NORMAL_WARM_SHARD_NUM     | 1         | \n+| -             | -               | segmentInterval | Segment Interval Days for this stage.                                                                                                                                                                             | SW_STORAGE_BANYANDB_GR_NORMAL_WARM_SI_DAYS       | 2         | \n+| -             | -               | ttl             | TTL Days for this stage.                                                                                                                                                                                          | SW_STORAGE_BANYANDB_GR_NORMAL_WARM_TTL_DAYS      | 7         | \n+| -             | -               | nodeSelector    | Specifying target nodes for this stage.                                                                                                                                                                           | SW_STORAGE_BANYANDB_GR_NORMAL_WARM_NODE_SELECTOR | type=warm | \n+| -             | cold            | -               | The cold stage settings.                                                                                                                                                                                          | -                                                | -         | \n+| -             | -               | shardNum        | Shards Number for for this stage.                                                                                                                                                                                 | SW_STORAGE_BANYANDB_GR_NORMAL_COLD_SHARD_NUM     | 1         | \n+| -             | -               | segmentInterval | Segment Interval Days for this stage.                                                                                                                                                                             | SW_STORAGE_BANYANDB_GR_NORMAL_COLD_SI_DAYS       | 3         | \n+| -             | -               | ttl             | TTL Days for this stage.                                                                                                                                                                                          | SW_STORAGE_BANYANDB_GR_NORMAL_COLD_TTL_DAYS      | 30        | \n+| -             | -               | nodeSelector    | Specifying target nodes for this stage.                                                                                                                                                                           | SW_STORAGE_BANYANDB_GR_NORMAL_COLD_NODE_SELECTOR | type=cold | \n+| recordsSuper  | -               | -               | `super` is a special dataset designed to store trace or log data that is too large for normal datasets.Each super dataset will be a separate group in BanyanDB, following the settings defined in the \""super\"" section. | -                                                | -         |\n+| -             | shardNum        | -               | Shards Number for super records group.                                                                                                                                                                            | SW_STORAGE_BANYANDB_GR_SUPER_SHARD_NUM           | 2         | \n+| -             | segmentInterval | -               | Segment Interval Days for super records group.                                                                                                                                                                    | SW_STORAGE_BANYANDB_GR_SUPER_SI_DAYS             | 1         | \n+| -             | ttl             | -               | TTL Days for super records group.                                                                                                                                                                                 | SW_STORAGE_BANYANDB_GR_SUPER_TTL_DAYS            | 3         | \n+| -             | enableWarmStage | -               | Activate warm stage for super records group.                                                                                                                                                                      | SW_STORAGE_BANYANDB_GR_SUPER_ENABLE_WARM_STAGE  | false     | \n+| -             | enableColdStage | -               | Activate cold stage for super records group.                                                                                                                                                                      | SW_STORAGE_BANYANDB_GR_SUPER_ENABLE_COLD_STAGE  | false     | \n+| -             | warm            | -               | The warm stage settings.                                                                                                                                                                                          | -                                                | -         | \n+| -             | -               | shardNum        | Shards Number for this stage.                                                                                                                                                                                     | SW_STORAGE_BANYANDB_GR_SUPER_WARM_SHARD_NUM      | 2         | \n+| -             | -               | segmentInterval | Segment Interval Days for this stage.                                                                                                                                                                             | SW_STORAGE_BANYANDB_GR_SUPER_WARM_SI_DAYS        | 1         | \n+| -             | -               | ttl             | TTL Days for this stage.                                                                                                                                                                                          | SW_STORAGE_BANYANDB_GR_SUPER_WARM_TTL_DAYS       | 7         | \n+| -             | -               | nodeSelector    | Specifying target nodes for this stage.                                                                                                                                                                           | SW_STORAGE_BANYANDB_GR_SUPER_WARM_NODE_SELECTOR  | type=warm | \n+| -             | cold            | -               | The cold stage settings.                                                                                                                                                                                          | -                                                | -         | \n+| -             | -               | shardNum        | Shards Number for for this stage.                                                                                                                                                                                 | SW_STORAGE_BANYANDB_GR_SUPER_COLD_SHARD_NUM      | 2         | \n+| -             | -               | segmentInterval | Segment Interval Days for this stage.                                                                                                                                                                             | SW_STORAGE_BANYANDB_GR_SUPER_COLD_SI_DAYS        | 1         | \n+| -             | -               | ttl             | TTL Days for this stage.                                                                                                                                                                                          | SW_STORAGE_BANYANDB_GR_SUPER_COLD_TTL_DAYS       | 30        | \n+| -             | -               | nodeSelector    | Specifying target nodes for this stage.                                                                                                                                                                           | SW_STORAGE_BANYANDB_GR_SUPER_COLD_NODE_SELECTOR  | type=cold | \n+| metricsMin    | -               | -               | The group for minute granularity metrics group.                                                                                                                                                                   | -                                                | -         |\n+| -             | shardNum        | -               | Shards Number for minute granularity metrics group.                                                                                                                                                               | SW_STORAGE_BANYANDB_GM_MINUTE_SHARD_NUM          | 2         | \n+| -             | segmentInterval | -               | Segment Interval Days for minute granularity metrics group.                                                                                                                                                       | SW_STORAGE_BANYANDB_GM_MINUTE_SI_DAYS            | 1         | \n+| -             | ttl             | -               | TTL Days for minute granularity metrics group.                                                                                                                                                                    | SW_STORAGE_BANYANDB_GM_MINUTE_TTL_DAYS           | 7         | \n+| -             | enableWarmStage | -               | Activate warm stage for minute granularity metrics group.                                                                                                                                                         | SW_STORAGE_BANYANDB_GM_MINUTE_ENABLE_WARM_STAGE  | false     | \n+| -             | enableColdStage | -               | Activate cold stage for minute granularity metrics group.                                                                                                                                                         | SW_STORAGE_BANYANDB_GM_MINUTE_ENABLE_COLD_STAGE  | false     | \n+| -             | warm            | -               | The warm stage settings.                                                                                                                                                                                          | -                                                | -         | \n+| -             | -               | shardNum        | Shards Number for this stage.                                                                                                                                                                                     | SW_STORAGE_BANYANDB_GM_MINUTE_WARM_SHARD_NUM     | 2         | \n+| -             | -               | segmentInterval | Segment Interval Days for this stage.                                                                                                                                                                             | SW_STORAGE_BANYANDB_GM_MINUTE_WARM_SI_DAYS       | 3         | \n+| -             | -               | ttl             | TTL Days for this stage.                                                                                                                                                                                          | SW_STORAGE_BANYANDB_GM_MINUTE_WARM_TTL_DAYS      | 15        | \n+| -             | -               | nodeSelector    | Specifying target nodes for this stage.                                                                                                                                                                           | SW_STORAGE_BANYANDB_GM_MINUTE_WARM_NODE_SELECTOR | type=warm | \n+| -             | cold            | -               | The cold stage settings.                                                                                                                                                                                          | -                                                | -         | \n+| -             | -               | shardNum        | Shards Number for for this stage.                                                                                                                                                                                 | SW_STORAGE_BANYANDB_GM_MINUTE_COLD_SHARD_NUM     | 2         | \n+| -             | -               | segmentInterval | Segment Interval Days for this stage.                                                                                                                                                                             | SW_STORAGE_BANYANDB_GM_MINUTE_COLD_SI_DAYS       | 5         | \n+| -             | -               | ttl             | TTL Days for this stage.                                                                                                                                                                                          | SW_STORAGE_BANYANDB_GM_MINUTE_COLD_TTL_DAYS      | 60        | \n+| -             | -               | nodeSelector    | Specifying target nodes for this stage.                                                                                                                                                                           | SW_STORAGE_BANYANDB_GM_MINUTE_COLD_NODE_SELECTOR | type=cold | \n+| metricsHour   | -               | -               | The group for hour granularity metrics.                                                                                                                                                                           | -                                                | -         |\n+| -             | shardNum        | -               | Shards Number for hour granularity metrics group.                                                                                                                                                                 | SW_STORAGE_BANYANDB_GM_HOUR_SHARD_NUM            | 1         | \n+| -             | segmentInterval | -               | Segment Interval Days for hour granularity metrics group.                                                                                                                                                         | SW_STORAGE_BANYANDB_GM_HOUR_SI_DAYS              | 5         | \n+| -             | ttl             | -               | TTL Days for hour granularity metrics group.                                                                                                                                                                      | SW_STORAGE_BANYANDB_GM_HOUR_TTL_DAYS             | 15        | \n+| -             | enableWarmStage | -               | Activate warm stage for hour granularity metrics group.                                                                                                                                                           | SW_STORAGE_BANYANDB_GM_HOUR_ENABLE_WARM_STAGE    | false     | \n+| -             | enableColdStage | -               | Activate cold stage for hour granularity metrics group.                                                                                                                                                           | SW_STORAGE_BANYANDB_GM_HOUR_ENABLE_COLD_STAGE    | false     | \n+| -             | warm            | -               | The warm stage settings.                                                                                                                                                                                          | -                                                | -         | \n+| -             | -               | shardNum        | Shards Number for this stage.                                                                                                                                                                                     | SW_STORAGE_BANYANDB_GM_HOUR_WARM_SHARD_NUM       | 1         | \n+| -             | -               | segmentInterval | Segment Interval Days for this stage.                                                                                                                                                                             | SW_STORAGE_BANYANDB_GM_HOUR_WARM_SI_DAYS         | 7         | \n+| -             | -               | ttl             | TTL Days for this stage.                                                                                                                                                                                          | SW_STORAGE_BANYANDB_GM_HOUR_WARM_TTL_DAYS        | 30        | \n+| -             | -               | nodeSelector    | Specifying target nodes for this stage.                                                                                                                                                                           | SW_STORAGE_BANYANDB_GM_HOUR_WARM_NODE_SELECTOR   | type=warm | \n+| -             | cold            | -               | The cold stage settings.                                                                                                                                                                                          | -                                                | -         | \n+| -             | -               | shardNum        | Shards Number for for this stage.                                                                                                                                                                                 | SW_STORAGE_BANYANDB_GM_HOUR_COLD_SHARD_NUM       | 1         | \n+| -             | -               | segmentInterval | Segment Interval Days for this stage.                                                                                                                                                                             | SW_STORAGE_BANYANDB_GM_HOUR_COLD_SI_DAYS         | 15        | \n+| -             | -               | ttl             | TTL Days for this stage.                                                                                                                                                                                          | SW_STORAGE_BANYANDB_GM_HOUR_COLD_TTL_DAYS        | 120       | \n+| -             | -               | nodeSelector    | Specifying target nodes for this stage.                                                                                                                                                                           | SW_STORAGE_BANYANDB_GM_HOUR_COLD_NODE_SELECTOR   | type=cold | \n+| metricsDay    | -               | -               | The group for day granularity metrics.                                                                                                                                                                            | -                                                | -         |\n+| -             | shardNum        | -               | Shards Number for day granularity metrics group.                                                                                                                                                                  | SW_STORAGE_BANYANDB_GM_DAY_SHARD_NUM             | 1         | \n+| -             | segmentInterval | -               | Segment Interval Days for day granularity metrics group.                                                                                                                                                          | SW_STORAGE_BANYANDB_GM_DAY_SI_DAYS               | 15        | \n+| -             | ttl             | -               | TTL Days for day granularity metrics group.                                                                                                                                                                       | SW_STORAGE_BANYANDB_GM_DAY_TTL_DAYS              | 15        | \n+| -             | enableWarmStage | -               | Activate warm stage for day granularity metrics group.                                                                                                                                                            | SW_STORAGE_BANYANDB_GM_DAY_ENABLE_WARM_STAGE     | false     | \n+| -             | enableColdStage | -               | Activate cold stage for day granularity metrics group.                                                                                                                                                            | SW_STORAGE_BANYANDB_GM_DAY_ENABLE_COLD_STAGE     | false     | \n+| -             | warm            | -               | The warm stage settings.                                                                                                                                                                                          | -                                                | -         | \n+| -             | -               | shardNum        | Shards Number for this stage.                                                                                                                                                                                     | SW_STORAGE_BANYANDB_GM_DAY_WARM_SHARD_NUM        | 1         | \n+| -             | -               | segmentInterval | Segment Interval Days for this stage.                                                                                                                                                                             | SW_STORAGE_BANYANDB_GM_DAY_WARM_SI_DAYS          | 15        | \n+| -             | -               | ttl             | TTL Days for this stage.                                                                                                                                                                                          | SW_STORAGE_BANYANDB_GM_DAY_WARM_TTL_DAYS         | 30        | \n+| -             | -               | nodeSelector    | Specifying target nodes for this stage.                                                                                                                                                                           | SW_STORAGE_BANYANDB_GM_DAY_WARM_NODE_SELECTOR    | type=warm | \n+| -             | cold            | -               | The cold stage settings.                                                                                                                                                                                          | -                                                | -         | \n+| -             | -               | shardNum        | Shards Number for for this stage.                                                                                                                                                                                 | SW_STORAGE_BANYANDB_GM_DAY_COLD_SHARD_NUM        | 1         | \n+| -             | -               | segmentInterval | Segment Interval Days for this stage.                                                                                                                                                                             | SW_STORAGE_BANYANDB_GM_DAY_COLD_SI_DAYS          | 15        | \n+| -             | -               | ttl             | TTL Days for this stage.                                                                                                                                                                                          | SW_STORAGE_BANYANDB_GM_DAY_COLD_TTL_DAYS         | 120       | \n+| -             | -               | nodeSelector    | Specifying target nodes for this stage.                                                                                                                                                                           | SW_STORAGE_BANYANDB_GM_DAY_COLD_NODE_SELECTOR    | type=cold | \n+| metadata      | -               | -               | The `index` group is designed to store metrics that are used for indexing without value columns. Such as `service_traffic`, `network_address_alias`, etc. Since BanyanDB *0.8.0*.                                 | -                                                | -         |\n+| -             | shardNum        | -               | Shards Number for metadata `index` group.                                                                                                                                                                         | SW_STORAGE_BANYANDB_GM_INDEX_SHARD_NUM           | 2         | \n+| -             | segmentInterval | -               | Segment Interval Days for metadata `index` group.                                                                                                                                                                 | SW_STORAGE_BANYANDB_GM_INDEX_SI_DAYS             | 15        | \n+| -             | ttl             | -               | TTL Days for metadata `index` group.                                                                                                                                                                              | SW_STORAGE_BANYANDB_GM_INDEX_TTL_DAYS            | 15        | \n+| property      | -               | -               | The group settings of property, such as UI and profiling.                                                                                                                                                         | -                                                | -         |\n+| -             | shardNum        | -               | Shards Number for property group.                                                                                                                                                                                 | SW_STORAGE_BANYANDB_GP_PROPERTY_SHARD_NUM        | 1         | \n+\n+## Note\n \n \u00b9 System Environment Variable name could be declared and changed in `application.yml/bydb.yaml`. The names listed here are simply\n provided in the default `application.yml/bydb.yaml` file.\n\ndiff --git a/docs/en/setup/backend/storages/banyandb.md b/docs/en/setup/backend/storages/banyandb.md\nindex a3dbd46d3236..614a841af1c5 100644\n--- a/docs/en/setup/backend/storages/banyandb.md\n+++ b/docs/en/setup/backend/storages/banyandb.md\n@@ -32,6 +32,21 @@ storage:\n Since 10.2.0, the banyandb configuration is separated to an independent configuration file: `bydb.yaml`:\n \n ```yaml\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \""License\""); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \""AS IS\"" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n global:\n   # Targets is the list of BanyanDB servers, separated by commas.\n   # Each target is a BanyanDB server in the format of `host:port`.\n@@ -71,15 +86,46 @@ groups:\n   # The \""normal\"" section defines settings for datasets not specified in \""super\"".\n   # Each dataset will be grouped under a single group named \""normal\"".\n   recordsNormal:\n+    # The settings for the default \""hot\"" stage.\n     shardNum:  ${SW_STORAGE_BANYANDB_GR_NORMAL_SHARD_NUM:1}\n     segmentInterval: ${SW_STORAGE_BANYANDB_GR_NORMAL_SI_DAYS:1}\n     ttl: ${SW_STORAGE_BANYANDB_GR_NORMAL_TTL_DAYS:3}\n+    # If the \""warm\"" stage is enabled, the data will be moved to the \""warm\"" stage after the TTL of the \""hot\"" stage.\n+    # If the \""cold\"" stage is enabled and \""warm\"" stage is disabled, the data will be moved to the \""cold\"" stage after the TTL of the \""hot\"" stage.\n+    # If both \""warm\"" and \""cold\"" stages are enabled, the data will be moved to the \""warm\"" stage after the TTL of the \""hot\"" stage, and then to the \""cold\"" stage after the TTL of the \""warm\"" stage.\n+    # OAP will query the data from the \""hot and warm\"" stage by default if the \""warm\"" stage is enabled.\n+    enableWarmStage: ${SW_STORAGE_BANYANDB_GR_NORMAL_ENABLE_WARM_STAGE:false}\n+    enableColdStage: ${SW_STORAGE_BANYANDB_GR_NORMAL_ENABLE_COLD_STAGE:false}\n+    # The settings for the \""warm\"" stage.\n+    warm:\n+      shardNum: ${SW_STORAGE_BANYANDB_GR_NORMAL_WARM_SHARD_NUM:1}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GR_NORMAL_WARM_SI_DAYS:2}\n+      ttl: ${SW_STORAGE_BANYANDB_GR_NORMAL_WARM_TTL_DAYS:7}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GR_NORMAL_WARM_NODE_SELECTOR:\""type=warm\""}\n+    # The settings for the \""cold\"" stage.\n+    cold:\n+      shardNum: ${SW_STORAGE_BANYANDB_GR_NORMAL_COLD_SHARD_NUM:1}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GR_NORMAL_COLD_SI_DAYS:3}\n+      ttl: ${SW_STORAGE_BANYANDB_GR_NORMAL_COLD_TTL_DAYS:30}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GR_NORMAL_COLD_NODE_SELECTOR:\""type=cold\""}\n   # \""super\"" is a special dataset designed to store trace or log data that is too large for normal datasets.\n   # Each super dataset will be a separate group in BanyanDB, following the settings defined in the \""super\"" section.\n   recordsSuper:\n     shardNum: ${SW_STORAGE_BANYANDB_GR_SUPER_SHARD_NUM:2}\n     segmentInterval: ${SW_STORAGE_BANYANDB_GR_SUPER_SI_DAYS:1}\n     ttl: ${SW_STORAGE_BANYANDB_GR_SUPER_TTL_DAYS:3}\n+    enableWarmStage: ${SW_STORAGE_BANYANDB_GR_SUPER_ENABLE_WARM_STAGE:false}\n+    enableColdStage: ${SW_STORAGE_BANYANDB_GR_SUPER_ENABLE_COLD_STAGE:false}\n+    warm:\n+      shardNum: ${SW_STORAGE_BANYANDB_GR_SUPER_WARM_SHARD_NUM:2}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GR_SUPER_WARM_SI_DAYS:1}\n+      ttl: ${SW_STORAGE_BANYANDB_GR_SUPER_WARM_TTL_DAYS:7}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GR_SUPER_WARM_NODE_SELECTOR:\""type=warm\""}\n+    cold:\n+      shardNum: ${SW_STORAGE_BANYANDB_GR_SUPER_COLD_SHARD_NUM:2}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GR_SUPER_COLD_SI_DAYS:1}\n+      ttl: ${SW_STORAGE_BANYANDB_GR_SUPER_COLD_TTL_DAYS:30}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GR_SUPER_COLD_NODE_SELECTOR:\""type=cold\""}\n   # The group settings of metrics.\n   #\n   # OAP stores metrics based its granularity.\n@@ -90,14 +136,50 @@ groups:\n     shardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_SHARD_NUM:2}\n     segmentInterval: ${SW_STORAGE_BANYANDB_GM_MINUTE_SI_DAYS:1}\n     ttl: ${SW_STORAGE_BANYANDB_GM_MINUTE_TTL_DAYS:7}\n+    enableWarmStage: ${SW_STORAGE_BANYANDB_GM_MINUTE_ENABLE_WARM_STAGE:false}\n+    enableColdStage: ${SW_STORAGE_BANYANDB_GM_MINUTE_ENABLE_COLD_STAGE:false}\n+    warm:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_WARM_SHARD_NUM:2}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_MINUTE_WARM_SI_DAYS:3}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_MINUTE_WARM_TTL_DAYS:15}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_MINUTE_WARM_NODE_SELECTOR:\""type=warm\""}\n+    cold:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_COLD_SHARD_NUM:2}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_MINUTE_COLD_SI_DAYS:5}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_MINUTE_COLD_TTL_DAYS:60}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_MINUTE_COLD_NODE_SELECTOR:\""type=cold\""}\n   metricsHour:\n     shardNum: ${SW_STORAGE_BANYANDB_GM_HOUR_SHARD_NUM:1}\n     segmentInterval: ${SW_STORAGE_BANYANDB_GM_HOUR_SI_DAYS:5}\n     ttl: ${SW_STORAGE_BANYANDB_GM_HOUR_TTL_DAYS:15}\n+    enableWarmStage: ${SW_STORAGE_BANYANDB_GM_HOUR_ENABLE_WARM_STAGE:false}\n+    enableColdStage: ${SW_STORAGE_BANYANDB_GM_HOUR_ENABLE_COLD_STAGE:false}\n+    warm:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_HOUR_WARM_SHARD_NUM:1}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_HOUR_WARM_SI_DAYS:7}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_HOUR_WARM_TTL_DAYS:30}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_HOUR_WARM_NODE_SELECTOR:\""type=warm\""}\n+    cold:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_HOUR_COLD_SHARD_NUM:1}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_HOUR_COLD_SI_DAYS:15}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_HOUR_COLD_TTL_DAYS:120}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_HOUR_COLD_NODE_SELECTOR:\""type=cold\""}\n   metricsDay:\n     shardNum: ${SW_STORAGE_BANYANDB_GM_DAY_SHARD_NUM:1}\n     segmentInterval: ${SW_STORAGE_BANYANDB_GM_DAY_SI_DAYS:15}\n     ttl: ${SW_STORAGE_BANYANDB_GM_DAY_TTL_DAYS:15}\n+    enableWarmStage: ${SW_STORAGE_BANYANDB_GM_DAY_ENABLE_WARM_STAGE:false}\n+    enableColdStage: ${SW_STORAGE_BANYANDB_GM_DAY_ENABLE_COLD_STAGE:false}\n+    warm:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_DAY_WARM_SHARD_NUM:1}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_DAY_WARM_SI_DAYS:15}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_DAY_WARM_TTL_DAYS:30}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_DAY_WARM_NODE_SELECTOR:\""type=warm\""}\n+    cold:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_DAY_COLD_SHARD_NUM:1}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_DAY_COLD_SI_DAYS:15}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_DAY_COLD_TTL_DAYS:120}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_DAY_COLD_NODE_SELECTOR:\""type=cold\""}\n   # If the metrics is marked as \""index_mode\"", the metrics will be stored in the \""index\"" group.\n   # The \""index\"" group is designed to store metrics that are used for indexing without value columns.\n   # Such as `service_traffic`, `network_address_alias`, etc.\n@@ -106,9 +188,11 @@ groups:\n     shardNum: ${SW_STORAGE_BANYANDB_GM_INDEX_SHARD_NUM:2}\n     segmentInterval: ${SW_STORAGE_BANYANDB_GM_INDEX_SI_DAYS:15}\n     ttl: ${SW_STORAGE_BANYANDB_GM_INDEX_TTL_DAYS:15}\n-  # The group settings of property such as UI and profiling.\n+\n+  # The group settings of property, such as UI and profiling.\n   property:\n     shardNum: ${SW_STORAGE_BANYANDB_GP_PROPERTY_SHARD_NUM:1}\n+\n ```\n \n ### Installation Modes\n\ndiff --git a/docs/menu.yml b/docs/menu.yml\nindex 621c5cb5d445..fea92059eb22 100644\n--- a/docs/menu.yml\n+++ b/docs/menu.yml\n@@ -204,6 +204,8 @@ catalog:\n         catalog:\n           - name: \""Progressive TTL\""\n             path: \""/en/banyandb/ttl\""\n+          - name: \""Data Lifecycle Stages(Hot/Warm/Cold)\""\n+            path: \""/en/banyandb/lifecycle-stages\""\n       - name: \""Tracing\""\n         catalog:\n           - name: \""Trace Sampling\""\n\ndiff --git a/oap-server/server-starter/src/main/resources/bydb.yml b/oap-server/server-starter/src/main/resources/bydb.yml\nindex 0a4f4572a837..2899832266a1 100644\n--- a/oap-server/server-starter/src/main/resources/bydb.yml\n+++ b/oap-server/server-starter/src/main/resources/bydb.yml\n@@ -52,15 +52,46 @@ groups:\n   # The \""normal\"" section defines settings for datasets not specified in \""super\"".\n   # Each dataset will be grouped under a single group named \""normal\"".\n   recordsNormal:\n+    # The settings for the default \""hot\"" stage.\n     shardNum:  ${SW_STORAGE_BANYANDB_GR_NORMAL_SHARD_NUM:1}\n     segmentInterval: ${SW_STORAGE_BANYANDB_GR_NORMAL_SI_DAYS:1}\n     ttl: ${SW_STORAGE_BANYANDB_GR_NORMAL_TTL_DAYS:3}\n+    # If the \""warm\"" stage is enabled, the data will be moved to the \""warm\"" stage after the TTL of the \""hot\"" stage.\n+    # If the \""cold\"" stage is enabled and \""warm\"" stage is disabled, the data will be moved to the \""cold\"" stage after the TTL of the \""hot\"" stage.\n+    # If both \""warm\"" and \""cold\"" stages are enabled, the data will be moved to the \""warm\"" stage after the TTL of the \""hot\"" stage, and then to the \""cold\"" stage after the TTL of the \""warm\"" stage.\n+    # OAP will query the data from the \""hot and warm\"" stage by default if the \""warm\"" stage is enabled.\n+    enableWarmStage: ${SW_STORAGE_BANYANDB_GR_NORMAL_ENABLE_WARM_STAGE:false}\n+    enableColdStage: ${SW_STORAGE_BANYANDB_GR_NORMAL_ENABLE_COLD_STAGE:false}\n+    # The settings for the \""warm\"" stage.\n+    warm:\n+      shardNum: ${SW_STORAGE_BANYANDB_GR_NORMAL_WARM_SHARD_NUM:1}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GR_NORMAL_WARM_SI_DAYS:2}\n+      ttl: ${SW_STORAGE_BANYANDB_GR_NORMAL_WARM_TTL_DAYS:7}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GR_NORMAL_WARM_NODE_SELECTOR:\""type=warm\""}\n+    # The settings for the \""cold\"" stage.\n+    cold:\n+      shardNum: ${SW_STORAGE_BANYANDB_GR_NORMAL_COLD_SHARD_NUM:1}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GR_NORMAL_COLD_SI_DAYS:3}\n+      ttl: ${SW_STORAGE_BANYANDB_GR_NORMAL_COLD_TTL_DAYS:30}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GR_NORMAL_COLD_NODE_SELECTOR:\""type=cold\""}\n   # \""super\"" is a special dataset designed to store trace or log data that is too large for normal datasets.\n   # Each super dataset will be a separate group in BanyanDB, following the settings defined in the \""super\"" section.\n   recordsSuper:\n     shardNum: ${SW_STORAGE_BANYANDB_GR_SUPER_SHARD_NUM:2}\n     segmentInterval: ${SW_STORAGE_BANYANDB_GR_SUPER_SI_DAYS:1}\n     ttl: ${SW_STORAGE_BANYANDB_GR_SUPER_TTL_DAYS:3}\n+    enableWarmStage: ${SW_STORAGE_BANYANDB_GR_SUPER_ENABLE_WARM_STAGE:false}\n+    enableColdStage: ${SW_STORAGE_BANYANDB_GR_SUPER_ENABLE_COLD_STAGE:false}\n+    warm:\n+      shardNum: ${SW_STORAGE_BANYANDB_GR_SUPER_WARM_SHARD_NUM:2}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GR_SUPER_WARM_SI_DAYS:1}\n+      ttl: ${SW_STORAGE_BANYANDB_GR_SUPER_WARM_TTL_DAYS:7}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GR_SUPER_WARM_NODE_SELECTOR:\""type=warm\""}\n+    cold:\n+      shardNum: ${SW_STORAGE_BANYANDB_GR_SUPER_COLD_SHARD_NUM:2}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GR_SUPER_COLD_SI_DAYS:1}\n+      ttl: ${SW_STORAGE_BANYANDB_GR_SUPER_COLD_TTL_DAYS:30}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GR_SUPER_COLD_NODE_SELECTOR:\""type=cold\""}\n   # The group settings of metrics.\n   #\n   # OAP stores metrics based its granularity.\n@@ -71,14 +102,50 @@ groups:\n     shardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_SHARD_NUM:2}\n     segmentInterval: ${SW_STORAGE_BANYANDB_GM_MINUTE_SI_DAYS:1}\n     ttl: ${SW_STORAGE_BANYANDB_GM_MINUTE_TTL_DAYS:7}\n+    enableWarmStage: ${SW_STORAGE_BANYANDB_GM_MINUTE_ENABLE_WARM_STAGE:false}\n+    enableColdStage: ${SW_STORAGE_BANYANDB_GM_MINUTE_ENABLE_COLD_STAGE:false}\n+    warm:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_WARM_SHARD_NUM:2}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_MINUTE_WARM_SI_DAYS:3}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_MINUTE_WARM_TTL_DAYS:15}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_MINUTE_WARM_NODE_SELECTOR:\""type=warm\""}\n+    cold:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_COLD_SHARD_NUM:2}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_MINUTE_COLD_SI_DAYS:5}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_MINUTE_COLD_TTL_DAYS:60}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_MINUTE_COLD_NODE_SELECTOR:\""type=cold\""}\n   metricsHour:\n     shardNum: ${SW_STORAGE_BANYANDB_GM_HOUR_SHARD_NUM:1}\n     segmentInterval: ${SW_STORAGE_BANYANDB_GM_HOUR_SI_DAYS:5}\n     ttl: ${SW_STORAGE_BANYANDB_GM_HOUR_TTL_DAYS:15}\n+    enableWarmStage: ${SW_STORAGE_BANYANDB_GM_HOUR_ENABLE_WARM_STAGE:false}\n+    enableColdStage: ${SW_STORAGE_BANYANDB_GM_HOUR_ENABLE_COLD_STAGE:false}\n+    warm:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_HOUR_WARM_SHARD_NUM:1}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_HOUR_WARM_SI_DAYS:7}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_HOUR_WARM_TTL_DAYS:30}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_HOUR_WARM_NODE_SELECTOR:\""type=warm\""}\n+    cold:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_HOUR_COLD_SHARD_NUM:1}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_HOUR_COLD_SI_DAYS:15}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_HOUR_COLD_TTL_DAYS:120}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_HOUR_COLD_NODE_SELECTOR:\""type=cold\""}\n   metricsDay:\n     shardNum: ${SW_STORAGE_BANYANDB_GM_DAY_SHARD_NUM:1}\n     segmentInterval: ${SW_STORAGE_BANYANDB_GM_DAY_SI_DAYS:15}\n     ttl: ${SW_STORAGE_BANYANDB_GM_DAY_TTL_DAYS:15}\n+    enableWarmStage: ${SW_STORAGE_BANYANDB_GM_DAY_ENABLE_WARM_STAGE:false}\n+    enableColdStage: ${SW_STORAGE_BANYANDB_GM_DAY_ENABLE_COLD_STAGE:false}\n+    warm:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_DAY_WARM_SHARD_NUM:1}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_DAY_WARM_SI_DAYS:15}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_DAY_WARM_TTL_DAYS:30}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_DAY_WARM_NODE_SELECTOR:\""type=warm\""}\n+    cold:\n+      shardNum: ${SW_STORAGE_BANYANDB_GM_DAY_COLD_SHARD_NUM:1}\n+      segmentInterval: ${SW_STORAGE_BANYANDB_GM_DAY_COLD_SI_DAYS:15}\n+      ttl: ${SW_STORAGE_BANYANDB_GM_DAY_COLD_TTL_DAYS:120}\n+      nodeSelector: ${SW_STORAGE_BANYANDB_GM_DAY_COLD_NODE_SELECTOR:\""type=cold\""}\n   # If the metrics is marked as \""index_mode\"", the metrics will be stored in the \""index\"" group.\n   # The \""index\"" group is designed to store metrics that are used for indexing without value columns.\n   # Such as `service_traffic`, `network_address_alias`, etc.\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java\nindex 12d5dcbbae2b..7e323d7ef5af 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java\n@@ -57,26 +57,8 @@ public BanyanDBStorageConfig loadConfig() throws ModuleStartException {\n \n         Map<String, Properties> configProperties = new HashMap<>();\n         configMap.forEach((part, c) -> {\n-            final Properties properties = new Properties();\n             if (c != null) {\n-                for (Map.Entry<String, ?> entry : c.entrySet()) {\n-                    String propertyName = entry.getKey();\n-                    Object propertyValue = entry.getValue();\n-                    if (propertyValue instanceof Map) {\n-                        Properties subProperties = new Properties();\n-                        for (Map.Entry<String, ?> e : ((Map<String, ?>) propertyValue).entrySet()) {\n-                            String key = e.getKey();\n-                            Object value = e.getValue();\n-                            subProperties.put(key, value);\n-                            replacePropertyAndLog(key, value, subProperties, this.moduleProvider.name(), yaml);\n-                        }\n-                        properties.put(propertyName, subProperties);\n-                    } else {\n-                        properties.put(propertyName, propertyValue);\n-                        replacePropertyAndLog(\n-                            propertyName, propertyValue, properties, this.moduleProvider.name(), yaml);\n-                    }\n-                }\n+                final Properties properties = parseConfig(c);\n                 configProperties.put(part, properties);\n             }\n         });\n@@ -87,26 +69,41 @@ public BanyanDBStorageConfig loadConfig() throws ModuleStartException {\n                 moduleProvider.name()\n             );\n             Properties groups = configProperties.get(\""groups\"");\n+            Properties recordsNormal = (Properties) groups.get(\""recordsNormal\"");\n             copyProperties(\n-                config.getRecordsNormal(), (Properties) groups.get(\""recordsNormal\""),\n+                config.getRecordsNormal(), recordsNormal,\n                 moduleProvider.getModule().name(), moduleProvider.name()\n             );\n+            copyStages(recordsNormal, config.getRecordsNormal());\n+\n+            Properties recordsSupper = (Properties) groups.get(\""recordsSuper\"");\n             copyProperties(\n-                config.getRecordsSuper(), (Properties) groups.get(\""recordsSuper\""),\n+                config.getRecordsSuper(), recordsSupper,\n                 moduleProvider.getModule().name(), moduleProvider.name()\n             );\n+            copyStages(recordsSupper, config.getRecordsSuper());\n+\n+            Properties metricsMin = (Properties) groups.get(\""metricsMin\"");\n             copyProperties(\n-                config.getMetricsMin(), (Properties) groups.get(\""metricsMin\""),\n+                config.getMetricsMin(), metricsMin,\n                 moduleProvider.getModule().name(), moduleProvider.name()\n             );\n+            copyStages(metricsMin, config.getMetricsMin());\n+\n+            Properties metricsHour = (Properties) groups.get(\""metricsHour\"");\n             copyProperties(\n-                config.getMetricsHour(), (Properties) groups.get(\""metricsHour\""),\n+                config.getMetricsHour(), metricsHour,\n                 moduleProvider.getModule().name(), moduleProvider.name()\n             );\n+            copyStages(metricsHour, config.getMetricsHour());\n+\n+            Properties metricsDay = (Properties) groups.get(\""metricsDay\"");\n             copyProperties(\n-                config.getMetricsDay(), (Properties) groups.get(\""metricsDay\""),\n+                config.getMetricsDay(), metricsDay,\n                 moduleProvider.getModule().name(), moduleProvider.name()\n             );\n+            copyStages(metricsDay, config.getMetricsDay());\n+\n             copyProperties(\n                 config.getMetadata(), (Properties) groups.get(\""metadata\""),\n                 moduleProvider.getModule().name(), moduleProvider.name()\n@@ -120,4 +117,46 @@ public BanyanDBStorageConfig loadConfig() throws ModuleStartException {\n         }\n         return config;\n     }\n+\n+    private Properties parseConfig(final Map<String, ?> config) {\n+        final Properties properties = new Properties();\n+        for (Map.Entry<String, ?> entry : config.entrySet()) {\n+            String propertyName = entry.getKey();\n+            Object propertyValue = entry.getValue();\n+            if (propertyValue instanceof Map) {\n+                Properties subProperties = parseConfig((Map<String, ?>) propertyValue);\n+                properties.put(propertyName, subProperties);\n+            } else {\n+                properties.put(propertyName, propertyValue);\n+                replacePropertyAndLog(\n+                    propertyName, propertyValue, properties, this.moduleProvider.name(), yaml);\n+            }\n+        }\n+        return properties;\n+    }\n+\n+    private void copyStages(final Properties group,\n+                            final BanyanDBStorageConfig.GroupResource groupResource) throws IllegalAccessException {\n+        if (groupResource.isEnableWarmStage()) {\n+            BanyanDBStorageConfig.Stage warm = new BanyanDBStorageConfig.Stage();\n+            warm.setName(BanyanDBStorageConfig.StageName.warm);\n+            copyProperties(\n+                warm, (Properties) group.get(BanyanDBStorageConfig.StageName.warm.name()),\n+                moduleProvider.getModule().name(), moduleProvider.name()\n+            );\n+            groupResource.getAdditionalLifecycleStages().add(warm);\n+            groupResource.getDefaultQueryStages().add(BanyanDBStorageConfig.StageName.warm.name());\n+        }\n+\n+        if (groupResource.isEnableColdStage()) {\n+            BanyanDBStorageConfig.Stage cold = new BanyanDBStorageConfig.Stage();\n+            cold.setName(BanyanDBStorageConfig.StageName.cold);\n+            cold.setClose(true);\n+            copyProperties(\n+                cold, (Properties) group.get(BanyanDBStorageConfig.StageName.cold.name()),\n+                moduleProvider.getModule().name(), moduleProvider.name()\n+            );\n+            groupResource.getAdditionalLifecycleStages().add(cold);\n+        }\n+    }\n }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\nindex dd0d54d3fe7d..843edeb99f51 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\n@@ -234,9 +234,29 @@ public void createTable(Model model) throws StorageException {\n      */\n     private boolean checkGroup(MetadataRegistry.SchemaMetadata metadata, BanyanDBClient client) throws BanyanDBException {\n         Group g = client.findGroup(metadata.getGroup());\n-        return g.getResourceOpts().getShardNum() != metadata.getShard()\n-            || g.getResourceOpts().getSegmentInterval().getNum() != metadata.getSegmentIntervalDays()\n-            || g.getResourceOpts().getTtl().getNum() != metadata.getTtlDays();\n+\n+        if (g.getResourceOpts().getShardNum() != metadata.getResource().getShardNum()\n+            || g.getResourceOpts().getSegmentInterval().getNum() != metadata.getResource().getSegmentInterval()\n+            || g.getResourceOpts().getTtl().getNum() != metadata.getResource().getTtl()) {\n+            return true;\n+        }\n+\n+        if (g.getResourceOpts().getStagesCount() != metadata.getResource().getAdditionalLifecycleStages().size()) {\n+            return true;\n+        }\n+        for (int i = 0; i < g.getResourceOpts().getStagesCount(); i++) {\n+            BanyandbCommon.LifecycleStage stage = g.getResourceOpts().getStages(i);\n+            BanyanDBStorageConfig.Stage stageConfig = metadata.getResource().getAdditionalLifecycleStages().get(i);\n+            if (!stage.getName().equals(stageConfig.getName().name())\n+                || stage.getShardNum() != stageConfig.getShardNum()\n+                || stage.getSegmentInterval().getNum() != stageConfig.getSegmentInterval()\n+                || stage.getTtl().getNum() != stageConfig.getTtl()\n+                || !stage.getNodeSelector().equals(stageConfig.getNodeSelector())\n+                || stage.getClose() != stageConfig.isClose()) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     private ResourceExist checkResourceExistence(MetadataRegistry.SchemaMetadata metadata,\n@@ -245,7 +265,7 @@ private ResourceExist checkResourceExistence(MetadataRegistry.SchemaMetadata met\n         Group.Builder gBuilder\n             = Group.newBuilder()\n                    .setMetadata(BanyandbCommon.Metadata.newBuilder().setName(metadata.getGroup()));\n-        BanyandbCommon.ResourceOpts.Builder optsBuilder = BanyandbCommon.ResourceOpts.newBuilder().setShardNum(metadata.getShard());\n+        BanyandbCommon.ResourceOpts.Builder optsBuilder = BanyandbCommon.ResourceOpts.newBuilder().setShardNum(metadata.getResource().getShardNum());\n \n         switch (metadata.getKind()) {\n             case STREAM:\n@@ -254,13 +274,13 @@ private ResourceExist checkResourceExistence(MetadataRegistry.SchemaMetadata met\n                     .setUnit(\n                         IntervalRule.Unit.UNIT_DAY)\n                     .setNum(\n-                        metadata.getSegmentIntervalDays()))\n+                        metadata.getResource().getSegmentInterval()))\n                 .setTtl(\n                     IntervalRule.newBuilder()\n                         .setUnit(\n                             IntervalRule.Unit.UNIT_DAY)\n                         .setNum(\n-                            metadata.getTtlDays()));\n+                            metadata.getResource().getTtl()));\n                 resourceExist = client.existStream(metadata.getGroup(), metadata.name());\n                 gBuilder.setCatalog(BanyandbCommon.Catalog.CATALOG_STREAM).build();\n                 break;\n@@ -270,13 +290,13 @@ private ResourceExist checkResourceExistence(MetadataRegistry.SchemaMetadata met\n                             .setUnit(\n                                 IntervalRule.Unit.UNIT_DAY)\n                             .setNum(\n-                                metadata.getSegmentIntervalDays()))\n+                                metadata.getResource().getSegmentInterval()))\n                     .setTtl(\n                         IntervalRule.newBuilder()\n                             .setUnit(\n                                 IntervalRule.Unit.UNIT_DAY)\n                             .setNum(\n-                                metadata.getTtlDays()));\n+                                metadata.getResource().getTtl()));\n                 resourceExist = client.existMeasure(metadata.getGroup(), metadata.name());\n                 gBuilder.setCatalog(BanyandbCommon.Catalog.CATALOG_MEASURE).build();\n                 break;\n@@ -287,6 +307,27 @@ private ResourceExist checkResourceExistence(MetadataRegistry.SchemaMetadata met\n             default:\n                 throw new IllegalStateException(\""unknown metadata kind: \"" + metadata.getKind());\n         }\n+        if (CollectionUtils.isNotEmpty(metadata.getResource().getAdditionalLifecycleStages())) {\n+            for (BanyanDBStorageConfig.Stage stage : metadata.getResource().getAdditionalLifecycleStages()) {\n+                optsBuilder.addStages(\n+                    BanyandbCommon.LifecycleStage.newBuilder()\n+                                                 .setName(stage.getName().name())\n+                                                 .setShardNum(stage.getShardNum())\n+                                                 .setSegmentInterval(\n+                                                     IntervalRule.newBuilder().setUnit(IntervalRule.Unit.UNIT_DAY)\n+                                                                 .setNum(stage.getSegmentInterval()))\n+                                                 .setTtl(\n+                                                     IntervalRule.newBuilder()\n+                                                                 .setUnit(\n+                                                                     IntervalRule.Unit.UNIT_DAY)\n+                                                                 .setNum(\n+                                                                     stage.getTtl()))\n+                                                 .setNodeSelector(stage.getNodeSelector())\n+                                                 .setClose(stage.isClose())\n+                    //todo: set the default query stages\n+                );\n+            }\n+        }\n         gBuilder.setResourceOpts(optsBuilder.build());\n         if (!RunningMode.isNoInitMode()) {\n             if (!groupAligned.contains(metadata.getGroup())) {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java\nindex 66858e7aa656..38e9ce556d8f 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java\n@@ -20,6 +20,8 @@\n \n import com.google.common.base.Splitter;\n import com.google.common.collect.Iterables;\n+import java.util.ArrayList;\n+import java.util.List;\n import lombok.Getter;\n import lombok.Setter;\n import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n@@ -94,6 +96,42 @@ public static class Global {\n     // The configuration of the groups.\n     // since 10.2.0\n \n+    @Getter\n+    @Setter\n+    public static class Stage {\n+        private StageName name;\n+        // Node selector specifying target nodes for this stage.\n+        // Optional; if provided, it must be a non-empty string.\n+        private String nodeSelector;\n+        private int shardNum;\n+        private int segmentInterval;\n+        private int ttl;\n+        // Indicates whether segments that are no longer live should be closed.\n+        private boolean close = false;\n+    }\n+\n+    public enum StageName {\n+        hot,\n+        warm,\n+        cold;\n+    }\n+\n+    @Getter\n+    @Setter\n+    public static class GroupResource {\n+        private int shardNum;\n+        private int segmentInterval;\n+        private int ttl;\n+        private boolean enableWarmStage = false;\n+        private boolean enableColdStage = false;\n+        private List<String> defaultQueryStages = new ArrayList<>(2);\n+        private List<Stage> additionalLifecycleStages = new ArrayList<>(2);\n+\n+        public GroupResource() {\n+            defaultQueryStages.add(StageName.hot.name());\n+        }\n+    }\n+\n     //The group settings of records.\n     /**\n      * The RecordsNormal defines settings for datasets not specified in \""super\"".\n@@ -101,10 +139,7 @@ public static class Global {\n      */\n     @Getter\n     @Setter\n-    public static class RecordsNormal {\n-        private int shardNum = 1;\n-        private int segmentInterval = 1;\n-        private int ttl = 3;\n+    public static class RecordsNormal extends BanyanDBStorageConfig.GroupResource {\n     }\n \n     /**\n@@ -113,10 +148,7 @@ public static class RecordsNormal {\n      */\n     @Getter\n     @Setter\n-    public static class RecordsSuper {\n-        private int shardNum = 2;\n-        private int segmentInterval = 1;\n-        private int ttl = 3;\n+    public static class RecordsSuper extends BanyanDBStorageConfig.GroupResource {\n     }\n \n     // The group settings of metrics.\n@@ -131,10 +163,7 @@ public static class RecordsSuper {\n      */\n     @Getter\n     @Setter\n-    public static class MetricsMin {\n-        private int shardNum = 2;\n-        private int segmentInterval = 1;\n-        private int ttl = 7;\n+    public static class MetricsMin extends BanyanDBStorageConfig.GroupResource {\n     }\n \n     /**\n@@ -142,10 +171,7 @@ public static class MetricsMin {\n      */\n     @Getter\n     @Setter\n-    public static class MetricsHour {\n-        private int shardNum = 1;\n-        private int segmentInterval = 5;\n-        private int ttl = 15;\n+    public static class MetricsHour extends BanyanDBStorageConfig.GroupResource {\n     }\n \n     /**\n@@ -153,10 +179,7 @@ public static class MetricsHour {\n      */\n     @Getter\n     @Setter\n-    public static class MetricsDay {\n-        private int shardNum = 1;\n-        private int segmentInterval = 15;\n-        private int ttl = 15;\n+    public static class MetricsDay extends BanyanDBStorageConfig.GroupResource {\n     }\n \n     /**\n@@ -167,10 +190,7 @@ public static class MetricsDay {\n      */\n     @Getter\n     @Setter\n-    public static class Metadata {\n-        private int shardNum = 2;\n-        private int segmentInterval = 15;\n-        private int ttl = 15;\n+    public static class Metadata extends BanyanDBStorageConfig.GroupResource {\n     }\n \n     /**\n@@ -178,7 +198,6 @@ public static class Metadata {\n      */\n     @Getter\n     @Setter\n-    public static class Property {\n-        private int shardNum = 1;\n+    public static class Property extends BanyanDBStorageConfig.GroupResource {\n     }\n }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\nindex 882c9cfef2f8..4287a6a494f6 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\n@@ -477,24 +477,20 @@ private TagSpec parseTagSpec(ModelColumn modelColumn) {\n \n     public SchemaMetadata parseMetadata(Model model, BanyanDBStorageConfig config, DownSamplingConfigService configService) {\n         if (!model.isTimeSeries()) {\n-            return new SchemaMetadata(BanyanDBStorageConfig.PROPERTY_GROUP_NAME, model.getName(), Kind.PROPERTY, DownSampling.None, config.getProperty().getShardNum(), 0, 0);\n+            return new SchemaMetadata(BanyanDBStorageConfig.PROPERTY_GROUP_NAME, model.getName(), Kind.PROPERTY, DownSampling.None, config.getProperty());\n         }\n         if (model.isRecord()) { // stream\n             return new SchemaMetadata(model.isSuperDataset() ? model.getName() : \""normal\"",\n                     model.getName(),\n                     Kind.STREAM,\n                     model.getDownsampling(),\n-                    model.isSuperDataset() ? config.getRecordsSuper().getShardNum() : config.getRecordsNormal().getShardNum(),\n-                    model.isSuperDataset() ? config.getRecordsSuper().getSegmentInterval() : config.getRecordsNormal().getSegmentInterval(),\n-                    model.isSuperDataset() ? config.getRecordsSuper().getTtl() : config.getRecordsNormal().getTtl());\n+                    model.isSuperDataset() ? config.getRecordsSuper() : config.getRecordsNormal());\n         }\n \n         if (model.getBanyanDBModelExtension().isIndexMode()) {\n             return new SchemaMetadata(\""index\"", model.getName(), Kind.MEASURE,\n                     model.getDownsampling(),\n-                    config.getMetadata().getShardNum(),\n-                    config.getMetadata().getSegmentInterval(),\n-                    config.getMetadata().getTtl());\n+                    config.getMetadata());\n         }\n \n         switch (model.getDownsampling()) {\n@@ -503,9 +499,7 @@ public SchemaMetadata parseMetadata(Model model, BanyanDBStorageConfig config, D\n                         model.getName(),\n                         Kind.MEASURE,\n                         model.getDownsampling(),\n-                        config.getMetricsMin().getShardNum(),\n-                        config.getMetricsMin().getSegmentInterval(),\n-                        config.getMetricsMin().getTtl());\n+                        config.getMetricsMin());\n             case Hour:\n                 if (!configService.shouldToHour()) {\n                     throw new UnsupportedOperationException(\""downsampling to hour is not supported\"");\n@@ -514,9 +508,7 @@ public SchemaMetadata parseMetadata(Model model, BanyanDBStorageConfig config, D\n                         model.getName(),\n                         Kind.MEASURE,\n                         model.getDownsampling(),\n-                        config.getMetricsHour().getShardNum(),\n-                        config.getMetricsHour().getSegmentInterval(),\n-                        config.getMetricsHour().getTtl());\n+                        config.getMetricsHour());\n             case Day:\n                 if (!configService.shouldToDay()) {\n                     throw new UnsupportedOperationException(\""downsampling to day is not supported\"");\n@@ -525,9 +517,7 @@ public SchemaMetadata parseMetadata(Model model, BanyanDBStorageConfig config, D\n                         model.getName(),\n                         Kind.MEASURE,\n                         model.getDownsampling(),\n-                        config.getMetricsDay().getShardNum(),\n-                        config.getMetricsDay().getSegmentInterval(),\n-                        config.getMetricsDay().getTtl());\n+                        config.getMetricsDay());\n             default:\n                 throw new UnsupportedOperationException(\""unsupported downSampling interval:\"" + model.getDownsampling());\n         }\n@@ -547,9 +537,7 @@ public static class SchemaMetadata {\n          * down-sampling of the {@link Model}\n          */\n         private final DownSampling downSampling;\n-        private final int shard;\n-        private final int segmentIntervalDays;\n-        private final int ttlDays;\n+        private final BanyanDBStorageConfig.GroupResource resource;\n \n         /**\n          * Format the entity name for BanyanDB\n"", ""test_patch"": ""diff --git a/test/e2e-v2/cases/kafka/log/Dockerfile.fluentd b/test/e2e-v2/cases/kafka/log/Dockerfile.fluentd\nindex 01d09480ffad..e47cedff8fbf 100644\n--- a/test/e2e-v2/cases/kafka/log/Dockerfile.fluentd\n+++ b/test/e2e-v2/cases/kafka/log/Dockerfile.fluentd\n@@ -16,4 +16,4 @@\n FROM bitnami/fluentd:1.12.1\n \n ## Install output kafka plugins\n-RUN fluent-gem install 'fluent-plugin-kafka'\n+RUN fluent-gem install fluent-plugin-kafka -v 0.19.3\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-13106"", ""pr_id"": 13106, ""issue_id"": 13095, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] Alarm webhook support Bearer auth\n### Search before asking\n\n- [x] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nFor security, usually the webhook http callback api has authentication, and Bearer is a common verification type. Can add a new feature to support this authentication method? If possible, I can implement it.\n\n- alarm-settings.yml\n```\nhooks:\n  webhook:  \n    default:  \n      is-default: true  \n      urls:  \n        http://127.0.0.1/notify/  \n      #new feature: support bearer auth  \n      authorization:   \n        type: Bearer  \n        credentials: {token}  \n```\n\n\n### Use case\n\n_No response_\n\n### Related issues\n\nhttps://github.com/apache/skywalking/issues/6353 ,It is related to the http header, but it is not completed.\n\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [x] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [x] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 164, ""test_files_count"": 3, ""non_test_files_count"": 6, ""pr_changed_files"": [""docs/en/changes/changes.md"", ""docs/en/setup/backend/backend-alarm.md"", ""oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java"", ""oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookCallback.java"", ""oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookSettings.java"", ""oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java"", ""oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookCallbackTest.java"", ""oap-server/server-alarm-plugin/src/test/resources/alarm-settings.yml"", ""oap-server/server-starter/src/main/resources/alarm-settings.yml""], ""pr_changed_test_files"": [""oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java"", ""oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookCallbackTest.java"", ""oap-server/server-alarm-plugin/src/test/resources/alarm-settings.yml""], ""base_commit"": ""97f0f0be67f820523bc26b8c7e900da73d24e4ff"", ""head_commit"": ""e334d90801c7c89d1365a6f5d2124fd98d920b34"", ""repo_url"": ""https://github.com/apache/skywalking/pull/13106"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/13106"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-17T12:49:17.000Z"", ""patch"": ""diff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 503f193ca907..eadee42fa8ca 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -84,6 +84,7 @@\n * Bump Armeria to 1.32.0 and some transitive dependencies.\n * Skip persisting metrics/record data that have been expired.\n * Fix the issue of missing Last Ping data.\n+* Add HTTP headers configuration for the alarm webhook.\n \n #### UI\n \n\ndiff --git a/docs/en/setup/backend/backend-alarm.md b/docs/en/setup/backend/backend-alarm.md\nindex 5347da270a77..1ef45343ff4b 100644\n--- a/docs/en/setup/backend/backend-alarm.md\n+++ b/docs/en/setup/backend/backend-alarm.md\n@@ -189,6 +189,25 @@ webhook:\n     urls:\n       - http://ip:port/xxx\n       - http://ip:port/yyy\n+    custom1:\n+      urls:\n+        - http://127.0.0.1/custom1\n+      # headers config is provided to add custom configurations or authentications that are required from the server side.\n+      headers:\n+        Authorization: Bearer bearer_token\n+    custom2:\n+      urls:\n+        - http://127.0.0.1/custom2\n+      # headers config is provided to add custom configurations or authentications that are required from the server \n+      headers:\n+        Authorization: Basic basic_token\n+    custom3:\n+      urls:\n+        - http://127.0.0.1/internal-hook\n+      # headers config is provided to add custom configurations or authentications that are required from the server \n+      headers:\n+        x-company-token: whatever-token-defined-internally-within-the-company\n+        x-company-header: arbitrary-additional-http-headers\n ```\n \n The JSON format is based on `List<org.apache.skywalking.oap.server.core.alarm.AlarmMessage>` with the following key information:\n\ndiff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java\nindex fde8422c911f..b48c94b1c2f5 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java\n@@ -157,11 +157,12 @@ private void readWebHookConfig(Map hooks, Rules rules) {\n             Map<String, Object> config = (Map<String, Object>) v;\n             WebhookSettings settings = new WebhookSettings(\n                 k.toString(), AlarmHooksType.webhook, (Boolean) config.getOrDefault(\""is-default\"", false));\n-\n             List<String> urls = (List<String>) config.get(\""urls\"");\n             if (urls != null) {\n                 settings.getUrls().addAll(urls);\n             }\n+            Map<String, String> headers = (Map<String, String>) config.getOrDefault(\""headers\"", new HashMap<>());\n+            settings.setHeaders(headers);\n             rules.getWebhookSettingsMap().put(settings.getFormattedName(), settings);\n             if (settings.isDefault()) {\n                 this.defaultHooks.add(settings.getFormattedName());\n\ndiff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookCallback.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookCallback.java\nindex e41d6296fe69..0fd0dbe30453 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookCallback.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookCallback.java\n@@ -56,7 +56,7 @@ public void doAlarm(List<AlarmMessage> alarmMessages) throws Exception {\n             }\n             for (final var url : setting.getUrls()) {\n                 try {\n-                    post(URI.create(url), gson.toJson(messages), Map.of());\n+                    post(URI.create(url), gson.toJson(messages), setting.getHeaders());\n                 } catch (Exception e) {\n                     log.error(\""Failed to send alarm message to Webhook: {}\"", url, e);\n                 }\n\ndiff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookSettings.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookSettings.java\nindex 4daa76075fcd..813bbf4c5739 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookSettings.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookSettings.java\n@@ -19,7 +19,10 @@\n package org.apache.skywalking.oap.server.core.alarm.provider.webhook;\n \n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+\n import lombok.Getter;\n import lombok.Setter;\n import lombok.ToString;\n@@ -31,6 +34,7 @@\n @ToString\n public class WebhookSettings extends AlarmHookSettings {\n     private List<String> urls = new ArrayList<>();\n+    private Map<String, String> headers = new HashMap<>();\n \n     public WebhookSettings(final String name,\n                            final AlarmHooksType type,\n\ndiff --git a/oap-server/server-starter/src/main/resources/alarm-settings.yml b/oap-server/server-starter/src/main/resources/alarm-settings.yml\nindex 4d726c932653..b764564f7ed7 100755\n--- a/oap-server/server-starter/src/main/resources/alarm-settings.yml\n+++ b/oap-server/server-starter/src/main/resources/alarm-settings.yml\n@@ -47,6 +47,22 @@ hooks:\n #      urls:\n #        - http://127.0.0.1/notify/\n #        - http://127.0.0.1/go-wechat/\n+#    custom1:\n+#      urls:\n+#        - http://127.0.0.1/custom1\n+#      headers:\n+#        Authorization: Bearer bearer_token\n+#    custom2:\n+#      urls:\n+#        - http://127.0.0.1/custom2\n+#      headers:\n+#        Authorization: Basic basic_token\n+#    custom3:\n+#      urls:\n+#        - http://127.0.0.1/internal-hook\n+#      headers:\n+#        x-company-token: whatever-token-defined-internally-within-the-company\n+#        x-company-header: arbitrary-additional-http-headers\n #\n #  gRPC:\n #    default:\n"", ""test_patch"": ""diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java\nindex 2d017c6401ae..9a5f2aba3920 100644\n--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java\n+++ b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java\n@@ -74,6 +74,10 @@ public void testReadRules() {\n         WebhookSettings rulesWebhooks = rules.getWebhookSettingsMap().get(AlarmHooksType.webhook.name() + \"".default\"");\n         Assertions.assertEquals(2, rulesWebhooks.getUrls().size());\n         Assertions.assertEquals(\""http://127.0.0.1/go-wechat/\"", rulesWebhooks.getUrls().get(1));\n+        WebhookSettings rulesWebhooks2 = rules.getWebhookSettingsMap().get(AlarmHooksType.webhook.name() + \"".custom1\"");\n+        Assertions.assertEquals(2, rulesWebhooks2.getHeaders().size());\n+        Assertions.assertEquals(\""Bearer bearer_token\"", rulesWebhooks2.getHeaders().get(\""Authorization\""));\n+        Assertions.assertEquals(\""arbitrary-additional-http-headers\"", rulesWebhooks2.getHeaders().get(\""x-company-header\""));\n \n         GRPCAlarmSetting grpcAlarmSetting = rules.getGrpcAlarmSettingMap().get(AlarmHooksType.gRPC.name() + \"".default\"");\n         assertNotNull(grpcAlarmSetting);\n\ndiff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookCallbackTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookCallbackTest.java\nindex 3c85f35bc280..a9d40e2a255e 100644\n--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookCallbackTest.java\n+++ b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/webhook/WebhookCallbackTest.java\n@@ -18,13 +18,13 @@\n \n package org.apache.skywalking.oap.server.core.alarm.provider.webhook;\n \n+import com.google.common.reflect.TypeToken;\n import com.google.gson.Gson;\n-import com.google.gson.JsonArray;\n import com.linecorp.armeria.common.HttpResponse;\n import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RequestHeaders;\n import com.linecorp.armeria.server.ServerBuilder;\n import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n-import java.util.concurrent.atomic.AtomicInteger;\n import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n import org.apache.skywalking.oap.server.core.alarm.provider.AlarmHooksType;\n import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n@@ -33,9 +33,13 @@\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n public class WebhookCallbackTest {\n     private static final AtomicBoolean IS_SUCCESS = new AtomicBoolean();\n@@ -45,19 +49,30 @@ public class WebhookCallbackTest {\n     public static final ServerExtension SERVER = new ServerExtension() {\n         @Override\n         protected void configure(ServerBuilder sb) {\n-            sb.service(\""/webhook/receiveAlarm\"", (ctx, req) -> HttpResponse.from(\n-                req.aggregate().thenApply(r -> {\n-                    final String content = r.content().toStringUtf8();\n-                    final JsonArray elements = new Gson().fromJson(content, JsonArray.class);\n-                    if (elements.size() == 1) {\n-                        COUNTER.getAndIncrement();\n+            sb.service(\""/webhook/receiveAlarm\"", (ctx, req) -> HttpResponse.from(req.aggregate().thenApply(r -> {\n+                final String content = r.content().toStringUtf8();\n+                final RequestHeaders headers = r.headers();\n+                List<AlarmMessage> alarmMessages = new Gson().fromJson(content, new TypeToken<ArrayList<AlarmMessage>>() {\n+                }.getType());\n+                if (alarmMessages.size() != 1) {\n+                    IS_SUCCESS.set(false);\n+                    return HttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR);\n+                }\n+                if (Objects.equals(alarmMessages.get(0).getId0(), \""1\"")) {\n+                    IS_SUCCESS.set(true);\n+                    COUNTER.incrementAndGet();\n+                    return HttpResponse.of(HttpStatus.OK);\n+                } else if (Objects.equals(alarmMessages.get(0).getId0(), \""2\"")) {\n+                    if (Objects.equals(headers.get(\""Authorization\""), \""Bearer bearer_token\"")\n+                            && Objects.equals(headers.get(\""x-company-header\""), \""arbitrary-additional-http-headers\"")) {\n                         IS_SUCCESS.set(true);\n+                        COUNTER.incrementAndGet();\n                         return HttpResponse.of(HttpStatus.OK);\n                     }\n-\n-                    return HttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR);\n-                }))\n-            );\n+                }\n+                IS_SUCCESS.set(false);\n+                return HttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR);\n+            })));\n         }\n     };\n \n@@ -72,16 +87,19 @@ public void testWebhook() throws Exception {\n         setting2.setUrls(remoteEndpoints);\n         rules.getWebhookSettingsMap().put(setting1.getFormattedName(), setting1);\n         rules.getWebhookSettingsMap().put(setting2.getFormattedName(), setting2);\n+        setting2.setHeaders(ImmutableMap.of(\""Authorization\"", \"" Bearer bearer_token\"", \""x-company-header\"", \""arbitrary-additional-http-headers\""));\n         AlarmRulesWatcher alarmRulesWatcher = new AlarmRulesWatcher(rules, null, null);\n         WebhookCallback webhookCallback = new WebhookCallback(alarmRulesWatcher);\n         List<AlarmMessage> alarmMessages = new ArrayList<>(2);\n         AlarmMessage alarmMessage = new AlarmMessage();\n+        alarmMessage.setId0(\""1\"");\n         alarmMessage.setScopeId(DefaultScopeDefine.SERVICE);\n         alarmMessage.setRuleName(\""service_resp_time_rule\"");\n         alarmMessage.setAlarmMessage(\""alarmMessage with [DefaultScopeDefine.All]\"");\n         alarmMessage.getHooks().add(setting1.getFormattedName());\n         alarmMessages.add(alarmMessage);\n         AlarmMessage anotherAlarmMessage = new AlarmMessage();\n+        anotherAlarmMessage.setId0(\""2\"");\n         anotherAlarmMessage.setRuleName(\""service_resp_time_rule_2\"");\n         anotherAlarmMessage.setScopeId(DefaultScopeDefine.ENDPOINT);\n         anotherAlarmMessage.setAlarmMessage(\""anotherAlarmMessage with [DefaultScopeDefine.Endpoint]\"");\n@@ -92,4 +110,4 @@ public void testWebhook() throws Exception {\n         Assertions.assertTrue(IS_SUCCESS.get());\n         Assertions.assertEquals(2, COUNTER.get());\n     }\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/oap-server/server-alarm-plugin/src/test/resources/alarm-settings.yml b/oap-server/server-alarm-plugin/src/test/resources/alarm-settings.yml\nindex f621021ea232..9b0bae54eb8d 100755\n--- a/oap-server/server-alarm-plugin/src/test/resources/alarm-settings.yml\n+++ b/oap-server/server-alarm-plugin/src/test/resources/alarm-settings.yml\n@@ -66,6 +66,12 @@ hooks:\n       urls:\n         - http://127.0.0.1/notify/\n         - http://127.0.0.1/go-wechat/\n+    custom1:\n+      urls:\n+        - http://127.0.0.1/custom1\n+      headers:\n+        Authorization: Bearer bearer_token\n+        x-company-header: arbitrary-additional-http-headers\n \n   gRPC:\n     default:\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-13097"", ""pr_id"": 13097, ""issue_id"": 13092, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] Introduce separate config file for BanyanDB advacend settings\n### Search before asking\n\n- [x] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\n```yaml\n    # The group settings of record.\n    # `gr` is the short name of the group settings of record.\n    #\n    # The \""normal\"" section defines settings for datasets not specified in \""super\"".\n    # Each dataset will be grouped under a single group named \""normal\"".\n    grNormalShardNum: ${SW_STORAGE_BANYANDB_GR_NORMAL_SHARD_NUM:1}\n    grNormalSIDays: ${SW_STORAGE_BANYANDB_GR_NORMAL_SI_DAYS:1}\n    grNormalTTLDays: ${SW_STORAGE_BANYANDB_GR_NORMAL_TTL_DAYS:3}\n    # \""super\"" is a special dataset designed to store trace or log data that is too large for normal datasets.\n    # Each super dataset will be a separate group in BanyanDB, following the settings defined in the \""super\"" section.\n    grSuperShardNum: ${SW_STORAGE_BANYANDB_GR_SUPER_SHARD_NUM:2}\n    grSuperSIDays: ${SW_STORAGE_BANYANDB_GR_SUPER_SI_DAYS:1}\n    grSuperTTLDays: ${SW_STORAGE_BANYANDB_GR_SUPER_TTL_DAYS:3}\n    # The group settings of metrics.\n    # `gm` is the short name of the group settings of metrics.\n    #\n    # OAP stores metrics based its granularity.\n    # Valid values are \""day\"", \""hour\"", and \""minute\"". That means metrics will be stored in the three separate groups.\n    # Non-\""minute\"" are governed by the \""core.downsampling\"" setting.\n    # For example, if \""core.downsampling\"" is set to \""hour\"", the \""hour\"" will be used, while \""day\"" are ignored.\n    gmMinuteShardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_SHARD_NUM:2}\n    gmMinuteSIDays: ${SW_STORAGE_BANYANDB_GM_MINUTE_SI_DAYS:1}\n    gmMinuteTTLDays: ${SW_STORAGE_BANYANDB_GM_MINUTE_TTL_DAYS:7}\n    gmHourShardNum: ${SW_STORAGE_BANYANDB_GM_HOUR_SHARD_NUM:1}\n    gmHourSIDays: ${SW_STORAGE_BANYANDB_GM_HOUR_SI_DAYS:5}\n    gmHourTTLDays: ${SW_STORAGE_BANYANDB_GM_HOUR_TTL_DAYS:15}\n    gmDayShardNum: ${SW_STORAGE_BANYANDB_GM_DAY_SHARD_NUM:1}\n    gmDaySIDays: ${SW_STORAGE_BANYANDB_GM_DAY_SI_DAYS:15}\n    gmDayTTLDays: ${SW_STORAGE_BANYANDB_GM_DAY_TTL_DAYS:15}\n    # If the metrics is marked as \""index_mode\"", the metrics will be stored in the \""index\"" group.\n    # The \""index\"" group is designed to store metrics that are used for indexing without value columns.\n    # Such as `service_traffic`, `network_address_alias`, etc.\n    # \""index_mode\"" requires BanyanDB *0.8.0* or later.\n    gmIndexShardNum: ${SW_STORAGE_BANYANDB_GM_INDEX_SHARD_NUM:2}\n    gmIndexSIDays: ${SW_STORAGE_BANYANDB_GM_INDEX_SI_DAYS:15}\n    gmIndexTTLDays: ${SW_STORAGE_BANYANDB_GM_INDEX_TTL_DAYS:15}\n```\n\nDue to the limitation of the `application.yml`, all configs are flat, and the names of these configs are not readable. So, let's bring a `bydb.yml` config file to provide hierarchy structure for those settings, for example\n\n```yaml\ngroups:\n  records_normarl:\n    shard_num:  ${SW_STORAGE_BANYANDB_GR_NORMAL_SHARD_NUM:1}\n    segment_interval: ${SW_STORAGE_BANYANDB_GR_NORMAL_SI_DAYS:1}\n    ttl: ${SW_STORAGE_BANYANDB_GR_NORMAL_TTL_DAYS:3}\n  records_super:\n    ...\n  metrics_min:\n    ...\n  metrics_hour:\n    ...\n  metrics_day:\n    ...\n  metadata:\n    # Index mode data only, traffic_*\n    ...\n```\n\nThis kind of new style could provide new clear configurations for end users. \nMeanwhile, we need to support https://github.com/apache/skywalking/issues/11945 which is another kind of group level configuration. Only some of the groups support hot-warm-cold setup, e.g., metadata would not have warm and cold data, as they are kept in hot only as there are heartbeat(last_ping) update with time.\n\nFYI @hanahmily \n\n### Use case\n\nWe are also going to support system env override mechanism, as they are more friendly in k8s env.\n\n### Related issues\n\n_No response_\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [x] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 479, ""test_files_count"": 1, ""non_test_files_count"": 20, ""pr_changed_files"": [""apm-dist/src/main/assembly/binary.xml"", ""docs/en/changes/changes.md"", ""docs/en/setup/backend/storages/banyandb.md"", ""oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleDefine.java"", ""oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleProvider.java"", ""oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/YamlConfigLoaderUtils.java"", ""oap-server/server-starter/pom.xml"", ""oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java"", ""oap-server/server-starter/src/main/resources/application.yml"", ""oap-server/server-starter/src/main/resources/bydb.yml"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageClient.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageProvider.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBTTLStatusQuery.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBHierarchyQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBNetworkAddressAliasDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBServiceLabelDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java""], ""pr_changed_test_files"": [""oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java""], ""base_commit"": ""f7da99d6324b44bfdd5d83915512245887d5f827"", ""head_commit"": ""12b1b5359bfa037f493aeb79438370bf1f93c03a"", ""repo_url"": ""https://github.com/apache/skywalking/pull/13097"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/13097"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-12T09:20:10.000Z"", ""patch"": ""diff --git a/apm-dist/src/main/assembly/binary.xml b/apm-dist/src/main/assembly/binary.xml\nindex ca82e01f38b8..f03d91ae46bf 100644\n--- a/apm-dist/src/main/assembly/binary.xml\n+++ b/apm-dist/src/main/assembly/binary.xml\n@@ -61,6 +61,7 @@\n                 <include>trace-sampling-policy-settings.yml</include>\r\n                 <include>hierarchy-definition.yml</include>\r\n                 <include>bydb.dependencies.properties</include>\r\n+                <include>bydb.yml</include>\r\n                 <include>oal/*.oal</include>\r\n                 <include>fetcher-prom-rules/*.yaml</include>\r\n                 <include>envoy-metrics-rules/**</include>\r\n\ndiff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex fa05f8d7f212..a1df1f670b22 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -79,6 +79,7 @@\n * BanyanDB: fix alarm query result without sort. \n * Add a component ID for Virtual thread executor.\n * Add more model installation log info for OAP storage initialization.\n+* BanyanDB: Separate the storage configuration to an independent file: `bydb.yaml`.\n \n #### UI\n \n\ndiff --git a/docs/en/setup/backend/storages/banyandb.md b/docs/en/setup/backend/storages/banyandb.md\nindex ec5f89e7442f..91db12c986bf 100644\n--- a/docs/en/setup/backend/storages/banyandb.md\n+++ b/docs/en/setup/backend/storages/banyandb.md\n@@ -22,76 +22,90 @@ org.apache.skywalking.oap.server.library.module.ModuleStartException: Incompatib\n ```\n \n ### Configuration\n+In the `application.yml` file, select the BanyanDB storage provider:\n \n ```yaml\n storage:\n   banyandb:\n-    # Targets is the list of BanyanDB servers, separated by commas.\n-    # Each target is a BanyanDB server in the format of `host:port`.\n-    # If BanyanDB is deployed as a standalone server, the target should be the IP address or domain name and port of the BanyanDB server.\n-    # If BanyanDB is deployed in a cluster, the targets should be the IP address or domain name and port of the `liaison` nodes, separated by commas.\n-    targets: ${SW_STORAGE_BANYANDB_TARGETS:127.0.0.1:17912}\n-    # The maximum number of records in a bulk write request.\n-    # A larger value can improve write performance but also increases OAP and BanyanDB Server memory usage.\n-    maxBulkSize: ${SW_STORAGE_BANYANDB_MAX_BULK_SIZE:10000}\n-    # The minimum seconds between two bulk flushes.\n-    # If the data in a bulk is less than maxBulkSize, the data will be flushed after this period.\n-    # If the data in a bulk exceeds maxBulkSize, the data will be flushed immediately.\n-    # A larger value can reduce write pressure on BanyanDB Server but increase data latency.\n-    flushInterval: ${SW_STORAGE_BANYANDB_FLUSH_INTERVAL:15}\n-    # The timeout in seconds for a bulk flush.\n-    flushTimeout: ${SW_STORAGE_BANYANDB_FLUSH_TIMEOUT:10}\n-    # The number of threads that write data to BanyanDB concurrently.\n-    # A higher value can improve write performance but also increases CPU usage on both OAP and BanyanDB Server.\n-    concurrentWriteThreads: ${SW_STORAGE_BANYANDB_CONCURRENT_WRITE_THREADS:15}\n-    # The maximum size of the dataset when the OAP loads cache, such as network aliases.\n-    resultWindowMaxSize: ${SW_STORAGE_BANYANDB_QUERY_MAX_WINDOW_SIZE:10000}\n-    # The maximum size of metadata per query.\n-    metadataQueryMaxSize: ${SW_STORAGE_BANYANDB_QUERY_MAX_SIZE:10000}\n-    # The maximum number of trace segments per query.\n-    segmentQueryMaxSize: ${SW_STORAGE_BANYANDB_QUERY_SEGMENT_SIZE:200}\n-    # The maximum number of profile task queries in a request.\n-    profileTaskQueryMaxSize: ${SW_STORAGE_BANYANDB_QUERY_PROFILE_TASK_SIZE:200}\n-    # The batch size for querying profile data.\n-    profileDataQueryBatchSize: ${SW_STORAGE_BANYANDB_QUERY_PROFILE_DATA_BATCH_SIZE:100}\n-    # If the BanyanDB server is configured with TLS, configure the TLS cert file path and enable TLS connection.\n-    sslTrustCAPath: ${SW_STORAGE_BANYANDB_SSL_TRUST_CA_PATH:\""\""}\n-    # The group settings of record.\n-    # `gr` is the short name of the group settings of record.\n-    #\n-    # The \""normal\"" section defines settings for datasets not specified in \""super\"".\n-    # Each dataset will be grouped under a single group named \""normal\"".\n-    grNormalShardNum: ${SW_STORAGE_BANYANDB_GR_NORMAL_SHARD_NUM:1}\n-    grNormalSIDays: ${SW_STORAGE_BANYANDB_GR_NORMAL_SI_DAYS:1}\n-    grNormalTTLDays: ${SW_STORAGE_BANYANDB_GR_NORMAL_TTL_DAYS:3}\n-    # \""super\"" is a special dataset designed to store trace or log data that is too large for normal datasets.\n-    # Each super dataset will be a separate group in BanyanDB, following the settings defined in the \""super\"" section.\n-    grSuperShardNum: ${SW_STORAGE_BANYANDB_GR_SUPER_SHARD_NUM:2}\n-    grSuperSIDays: ${SW_STORAGE_BANYANDB_GR_SUPER_SI_DAYS:1}\n-    grSuperTTLDays: ${SW_STORAGE_BANYANDB_GR_SUPER_TTL_DAYS:3}\n-    # The group settings of metrics.\n-    # `gm` is the short name of the group settings of metrics.\n-    #\n-    # OAP stores metrics based its granularity.\n-    # Valid values are \""day\"", \""hour\"", and \""minute\"". That means metrics will be stored in the three separate groups.\n-    # Non-\""minute\"" are governed by the \""core.downsampling\"" setting.\n-    # For example, if \""core.downsampling\"" is set to \""hour\"", the \""hour\"" will be used, while \""day\"" are ignored.\n-    gmMinuteShardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_SHARD_NUM:2}\n-    gmMinuteSIDays: ${SW_STORAGE_BANYANDB_GM_MINUTE_SI_DAYS:1}\n-    gmMinuteTTLDays: ${SW_STORAGE_BANYANDB_GM_MINUTE_TTL_DAYS:7}\n-    gmHourShardNum: ${SW_STORAGE_BANYANDB_GM_HOUR_SHARD_NUM:1}\n-    gmHourSIDays: ${SW_STORAGE_BANYANDB_GM_HOUR_SI_DAYS:5}\n-    gmHourTTLDays: ${SW_STORAGE_BANYANDB_GM_HOUR_TTL_DAYS:15}\n-    gmDayShardNum: ${SW_STORAGE_BANYANDB_GM_DAY_SHARD_NUM:1}\n-    gmDaySIDays: ${SW_STORAGE_BANYANDB_GM_DAY_SI_DAYS:15}\n-    gmDayTTLDays: ${SW_STORAGE_BANYANDB_GM_DAY_TTL_DAYS:15}\n-    # If the metrics is marked as \""index_mode\"", the metrics will be stored in the \""index\"" group.\n-    # The \""index\"" group is designed to store metrics that are used for indexing without value columns.\n-    # Such as `service_traffic`, `network_address_alias`, etc.\n-    # \""index_mode\"" requires BanyanDB *0.8.0* or later.\n-    gmIndexShardNum: ${SW_STORAGE_BANYANDB_GM_INDEX_SHARD_NUM:2}\n-    gmIndexSIDays: ${SW_STORAGE_BANYANDB_GM_INDEX_SI_DAYS:15}\n-    gmIndexTTLDays: ${SW_STORAGE_BANYANDB_GM_INDEX_TTL_DAYS:15}\n+```\n+\n+Since 10.2.0, the banyandb configuration is separated to an independent configuration file: `bydb.yaml`:\n+\n+```yaml\n+global:\n+  # Targets is the list of BanyanDB servers, separated by commas.\n+  # Each target is a BanyanDB server in the format of `host:port`.\n+  # If BanyanDB is deployed as a standalone server, the target should be the IP address or domain name and port of the BanyanDB server.\n+  # If BanyanDB is deployed in a cluster, the targets should be the IP address or domain name and port of the `liaison` nodes, separated by commas.\n+  targets: ${SW_STORAGE_BANYANDB_TARGETS:127.0.0.1:17912}\n+  # The maximum number of records in a bulk write request.\n+  # A larger value can improve write performance but also increases OAP and BanyanDB Server memory usage.\n+  maxBulkSize: ${SW_STORAGE_BANYANDB_MAX_BULK_SIZE:10000}\n+  # The minimum seconds between two bulk flushes.\n+  # If the data in a bulk is less than maxBulkSize, the data will be flushed after this period.\n+  # If the data in a bulk exceeds maxBulkSize, the data will be flushed immediately.\n+  # A larger value can reduce write pressure on BanyanDB Server but increase data latency.\n+  flushInterval: ${SW_STORAGE_BANYANDB_FLUSH_INTERVAL:15}\n+  # The timeout in seconds for a bulk flush.\n+  flushTimeout: ${SW_STORAGE_BANYANDB_FLUSH_TIMEOUT:10}\n+  # The number of threads that write data to BanyanDB concurrently.\n+  # A higher value can improve write performance but also increases CPU usage on both OAP and BanyanDB Server.\n+  concurrentWriteThreads: ${SW_STORAGE_BANYANDB_CONCURRENT_WRITE_THREADS:15}\n+  # The maximum size of the dataset when the OAP loads cache, such as network aliases.\n+  resultWindowMaxSize: ${SW_STORAGE_BANYANDB_QUERY_MAX_WINDOW_SIZE:10000}\n+  # The maximum size of metadata per query.\n+  metadataQueryMaxSize: ${SW_STORAGE_BANYANDB_QUERY_MAX_SIZE:10000}\n+  # The maximum number of trace segments per query.\n+  segmentQueryMaxSize: ${SW_STORAGE_BANYANDB_QUERY_SEGMENT_SIZE:200}\n+  # The maximum number of profile task queries in a request.\n+  profileTaskQueryMaxSize: ${SW_STORAGE_BANYANDB_QUERY_PROFILE_TASK_SIZE:200}\n+  # The batch size for querying profile data.\n+  profileDataQueryBatchSize: ${SW_STORAGE_BANYANDB_QUERY_PROFILE_DATA_BATCH_SIZE:100}\n+  asyncProfilerTaskQueryMaxSize: ${SW_STORAGE_BANYANDB_ASYNC_PROFILER_TASK_QUERY_MAX_SIZE:200}\n+  # If the BanyanDB server is configured with TLS, configure the TLS cert file path and enable TLS connection.\n+  sslTrustCAPath: ${SW_STORAGE_BANYANDB_SSL_TRUST_CA_PATH:\""\""}\n+\n+groups:\n+  # The group settings of record.\n+  #\n+  # The \""normal\"" section defines settings for datasets not specified in \""super\"".\n+  # Each dataset will be grouped under a single group named \""normal\"".\n+  recordsNormal:\n+    shardNum:  ${SW_STORAGE_BANYANDB_GR_NORMAL_SHARD_NUM:1}\n+    segmentInterval: ${SW_STORAGE_BANYANDB_GR_NORMAL_SI_DAYS:1}\n+    ttl: ${SW_STORAGE_BANYANDB_GR_NORMAL_TTL_DAYS:3}\n+  # \""super\"" is a special dataset designed to store trace or log data that is too large for normal datasets.\n+  # Each super dataset will be a separate group in BanyanDB, following the settings defined in the \""super\"" section.\n+  recordsSuper:\n+    shardNum: ${SW_STORAGE_BANYANDB_GR_SUPER_SHARD_NUM:2}\n+    segmentInterval: ${SW_STORAGE_BANYANDB_GR_SUPER_SI_DAYS:1}\n+    ttl: ${SW_STORAGE_BANYANDB_GR_SUPER_TTL_DAYS:3}\n+  # The group settings of metrics.\n+  #\n+  # OAP stores metrics based its granularity.\n+  # Valid values are \""day\"", \""hour\"", and \""minute\"". That means metrics will be stored in the three separate groups.\n+  # Non-\""minute\"" are governed by the \""core.downsampling\"" setting.\n+  # For example, if \""core.downsampling\"" is set to \""hour\"", the \""hour\"" will be used, while \""day\"" are ignored.\n+  metricsMin:\n+    shardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_SHARD_NUM:2}\n+    segmentInterval: ${SW_STORAGE_BANYANDB_GM_MINUTE_SI_DAYS:1}\n+    ttl: ${SW_STORAGE_BANYANDB_GM_MINUTE_TTL_DAYS:7}\n+  metricsHour:\n+    shardNum: ${SW_STORAGE_BANYANDB_GM_HOUR_SHARD_NUM:1}\n+    segmentInterval: ${SW_STORAGE_BANYANDB_GM_HOUR_SI_DAYS:5}\n+    ttl: ${SW_STORAGE_BANYANDB_GM_HOUR_TTL_DAYS:15}\n+  metricsDay:\n+    shardNum: ${SW_STORAGE_BANYANDB_GM_DAY_SHARD_NUM:1}\n+    segmentInterval: ${SW_STORAGE_BANYANDB_GM_DAY_SI_DAYS:15}\n+    ttl: ${SW_STORAGE_BANYANDB_GM_DAY_TTL_DAYS:15}\n+  # If the metrics is marked as \""index_mode\"", the metrics will be stored in the \""index\"" group.\n+  # The \""index\"" group is designed to store metrics that are used for indexing without value columns.\n+  # Such as `service_traffic`, `network_address_alias`, etc.\n+  # \""index_mode\"" requires BanyanDB *0.8.0* or later.\n+  metadata:\n+    shardNum: ${SW_STORAGE_BANYANDB_GM_INDEX_SHARD_NUM:2}\n+    segmentInterval: ${SW_STORAGE_BANYANDB_GM_INDEX_SI_DAYS:15}\n+    ttl: ${SW_STORAGE_BANYANDB_GM_INDEX_TTL_DAYS:15}\n \n ```\n \n\ndiff --git a/oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleDefine.java b/oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleDefine.java\nindex a26ce2912cdd..e12d3d7a6072 100644\n--- a/oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleDefine.java\n+++ b/oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleDefine.java\n@@ -18,14 +18,13 @@\n \n package org.apache.skywalking.oap.server.library.module;\n \n-import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n-import java.util.Enumeration;\n-import java.util.Properties;\n import java.util.ServiceLoader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.apache.skywalking.oap.server.library.util.YamlConfigLoaderUtils.copyProperties;\n+\n /**\n  * A module definition.\n  */\n@@ -113,40 +112,6 @@ void prepare(ModuleManager moduleManager,\n         loadedProvider.prepare();\n     }\n \n-    private void copyProperties(ModuleConfig dest, Properties src, String moduleName,\n-                                String providerName) throws IllegalAccessException {\n-        if (dest == null) {\n-            return;\n-        }\n-        Enumeration<?> propertyNames = src.propertyNames();\n-        while (propertyNames.hasMoreElements()) {\n-            String propertyName = (String) propertyNames.nextElement();\n-            Class<? extends ModuleConfig> destClass = dest.getClass();\n-            try {\n-                Field field = getDeclaredField(destClass, propertyName);\n-                field.setAccessible(true);\n-                field.set(dest, src.get(propertyName));\n-            } catch (NoSuchFieldException e) {\n-                LOGGER.warn(\n-                    propertyName + \"" setting is not supported in \"" + providerName + \"" provider of \"" + moduleName + \"" module\"");\n-            }\n-        }\n-    }\n-\n-    private Field getDeclaredField(Class<?> destClass, String fieldName) throws NoSuchFieldException {\n-        if (destClass != null) {\n-            Field[] fields = destClass.getDeclaredFields();\n-            for (Field field : fields) {\n-                if (field.getName().equals(fieldName)) {\n-                    return field;\n-                }\n-            }\n-            return getDeclaredField(destClass.getSuperclass(), fieldName);\n-        }\n-\n-        throw new NoSuchFieldException();\n-    }\n-\n     @Override\n     public final ModuleProvider provider() throws DuplicateProviderException, ProviderNotFoundException {\n         if (loadedProvider == null) {\n\ndiff --git a/oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleProvider.java b/oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleProvider.java\nindex c128b23f9695..6eeed9145d46 100644\n--- a/oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleProvider.java\n+++ b/oap-server/server-library/library-module/src/main/java/org/apache/skywalking/oap/server/library/module/ModuleProvider.java\n@@ -143,7 +143,7 @@ <T extends Service> T getService(Class<T> serviceType) throws ServiceNotProvided\n         throw new ServiceNotProvidedException(\""Service \"" + serviceType.getName() + \"" should not be provided, based on moduleDefine define.\"");\n     }\n \n-    ModuleDefine getModule() {\n+    public ModuleDefine getModule() {\n         return moduleDefine;\n     }\n \n\ndiff --git a/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/YamlConfigLoaderUtils.java b/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/YamlConfigLoaderUtils.java\nnew file mode 100644\nindex 000000000000..15a5321347a9\n--- /dev/null\n+++ b/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/YamlConfigLoaderUtils.java\n@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.Properties;\n+import lombok.extern.slf4j.Slf4j;\n+import org.yaml.snakeyaml.Yaml;\n+\n+@Slf4j\n+public class YamlConfigLoaderUtils {\n+\n+    public static void replacePropertyAndLog(final String propertyName,\n+                                             final Object propertyValue,\n+                                             final Properties target,\n+                                             final Object providerName,\n+                                             final Yaml yaml) {\n+        final String valueString = PropertyPlaceholderHelper.INSTANCE.replacePlaceholders(\n+            String.valueOf(propertyValue), target);\n+        if (valueString.trim().length() == 0) {\n+            target.replace(propertyName, valueString);\n+            log.info(\""Provider={} config={} has been set as an empty string\"", providerName, propertyName);\n+        } else {\n+            // Use YAML to do data type conversion.\n+            final Object replaceValue = convertValueString(valueString, yaml);\n+            if (replaceValue != null) {\n+                target.replace(propertyName, replaceValue);\n+            }\n+        }\n+    }\n+\n+    public static Object convertValueString(final String valueString, final Yaml yaml) {\n+        try {\n+            Object replaceValue = yaml.load(valueString);\n+            if (replaceValue instanceof String || replaceValue instanceof Integer || replaceValue instanceof Long || replaceValue instanceof Boolean || replaceValue instanceof ArrayList) {\n+                return replaceValue;\n+            } else {\n+                return valueString;\n+            }\n+        } catch (Exception e) {\n+            log.warn(\""yaml convert value type error, use origin values string. valueString={}\"", valueString, e);\n+            return valueString;\n+        }\n+    }\n+\n+    public static void copyProperties(final Object dest,\n+                                      final Properties src,\n+                                      final String moduleName,\n+                                      final String providerName) throws IllegalAccessException {\n+        if (dest == null) {\n+            return;\n+        }\n+        Enumeration<?> propertyNames = src.propertyNames();\n+        while (propertyNames.hasMoreElements()) {\n+            String propertyName = (String) propertyNames.nextElement();\n+            Class<?> destClass = dest.getClass();\n+            try {\n+                Field field = getDeclaredField(destClass, propertyName);\n+                field.setAccessible(true);\n+                field.set(dest, src.get(propertyName));\n+            } catch (NoSuchFieldException e) {\n+                log.warn(\n+                    propertyName + \"" setting is not supported in \"" + providerName + \"" provider of \"" + moduleName + \"" module\"");\n+            }\n+        }\n+    }\n+\n+    public static Field getDeclaredField(final Class<?> destClass, final String fieldName) throws NoSuchFieldException {\n+        if (destClass != null) {\n+            Field[] fields = destClass.getDeclaredFields();\n+            for (Field field : fields) {\n+                if (field.getName().equals(fieldName)) {\n+                    return field;\n+                }\n+            }\n+            return getDeclaredField(destClass.getSuperclass(), fieldName);\n+        }\n+\n+        throw new NoSuchFieldException();\n+    }\n+}\n\ndiff --git a/oap-server/server-starter/pom.xml b/oap-server/server-starter/pom.xml\nindex 51f79f3fc661..2b06383038c2 100644\n--- a/oap-server/server-starter/pom.xml\n+++ b/oap-server/server-starter/pom.xml\n@@ -316,6 +316,7 @@\n                         <exclude>trace-sampling-policy-settings.yml</exclude>\n                         <exclude>hierarchy-definition.yml</exclude>\n                         <exclude>bydb.dependencies.properties</exclude>\n+                        <exclude>bydb.yml</exclude>\n                         <exclude>oal/</exclude>\n                         <exclude>fetcher-prom-rules/</exclude>\n                         <exclude>envoy-metrics-rules/</exclude>\n\ndiff --git a/oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java b/oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java\nindex e7f572c3cf03..250692f25d2b 100644\n--- a/oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java\n+++ b/oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java\n@@ -36,6 +36,8 @@\n import java.util.Map;\n import java.util.Properties;\n \n+import static org.apache.skywalking.oap.server.library.util.YamlConfigLoaderUtils.replacePropertyAndLog;\n+\n /**\n  * Initialize collector settings with following sources. Use application.yml as primary setting, and fix missing setting\n  * by default settings in application-default.yml.\n@@ -92,12 +94,12 @@ private void loadConfig(ApplicationConfiguration configuration) throws ConfigFil\n                                         Properties subProperties = new Properties();\n                                         ((Map<String, ?>) propertyValue).forEach((key, value) -> {\n                                             subProperties.put(key, value);\n-                                            replacePropertyAndLog(key, value, subProperties, providerName);\n+                                            replacePropertyAndLog(key, value, subProperties, providerName, yaml);\n                                         });\n                                         properties.put(propertyName, subProperties);\n                                     } else {\n                                         properties.put(propertyName, propertyValue);\n-                                        replacePropertyAndLog(propertyName, propertyValue, properties, providerName);\n+                                        replacePropertyAndLog(propertyName, propertyValue, properties, providerName, yaml);\n                                     }\n                                 });\n                             }\n@@ -117,36 +119,6 @@ private void loadConfig(ApplicationConfiguration configuration) throws ConfigFil\n         }\n     }\n \n-    private void replacePropertyAndLog(final String propertyName, final Object propertyValue, final Properties target,\n-                                       final Object providerName) {\n-        final String valueString = PropertyPlaceholderHelper.INSTANCE\n-            .replacePlaceholders(String.valueOf(propertyValue), target);\n-        if (valueString.trim().length() == 0) {\n-            target.replace(propertyName, valueString);\n-            log.info(\""Provider={} config={} has been set as an empty string\"", providerName, propertyName);\n-        } else {\n-            // Use YAML to do data type conversion.\n-            final Object replaceValue = convertValueString(valueString);\n-            if (replaceValue != null) {\n-                target.replace(propertyName, replaceValue);\n-            }\n-        }\n-    }\n-\n-    private Object convertValueString(String valueString) {\n-        try {\n-            Object replaceValue = yaml.load(valueString);\n-            if (replaceValue instanceof String || replaceValue instanceof Integer || replaceValue instanceof Long || replaceValue instanceof Boolean || replaceValue instanceof ArrayList) {\n-                return replaceValue;\n-            } else {\n-                return valueString;\n-            }\n-        } catch (Exception e) {\n-            log.warn(\""yaml convert value type error, use origin values string. valueString={}\"", valueString, e);\n-            return valueString;\n-        }\n-    }\n-\n     private void overrideConfigBySystemEnv(ApplicationConfiguration configuration) {\n         for (Map.Entry<Object, Object> prop : System.getProperties().entrySet()) {\n             overrideModuleSettings(configuration, prop.getKey().toString(), prop.getValue().toString());\n\ndiff --git a/oap-server/server-starter/src/main/resources/application.yml b/oap-server/server-starter/src/main/resources/application.yml\nindex fec8ae04b175..925c268a9c4a 100644\n--- a/oap-server/server-starter/src/main/resources/application.yml\n+++ b/oap-server/server-starter/src/main/resources/application.yml\n@@ -148,72 +148,7 @@ core:\n storage:\n   selector: ${SW_STORAGE:banyandb}\n   banyandb:\n-    # Targets is the list of BanyanDB servers, separated by commas.\n-    # Each target is a BanyanDB server in the format of `host:port`.\n-    # If BanyanDB is deployed as a standalone server, the target should be the IP address or domain name and port of the BanyanDB server.\n-    # If BanyanDB is deployed in a cluster, the targets should be the IP address or domain name and port of the `liaison` nodes, separated by commas.\n-    targets: ${SW_STORAGE_BANYANDB_TARGETS:127.0.0.1:17912}\n-    # The maximum number of records in a bulk write request.\n-    # A larger value can improve write performance but also increases OAP and BanyanDB Server memory usage.\n-    maxBulkSize: ${SW_STORAGE_BANYANDB_MAX_BULK_SIZE:10000}\n-    # The minimum seconds between two bulk flushes.\n-    # If the data in a bulk is less than maxBulkSize, the data will be flushed after this period.\n-    # If the data in a bulk exceeds maxBulkSize, the data will be flushed immediately.\n-    # A larger value can reduce write pressure on BanyanDB Server but increase data latency.\n-    flushInterval: ${SW_STORAGE_BANYANDB_FLUSH_INTERVAL:15}\n-    # The timeout in seconds for a bulk flush.\n-    flushTimeout: ${SW_STORAGE_BANYANDB_FLUSH_TIMEOUT:10}\n-    # The number of threads that write data to BanyanDB concurrently.\n-    # A higher value can improve write performance but also increases CPU usage on both OAP and BanyanDB Server.\n-    concurrentWriteThreads: ${SW_STORAGE_BANYANDB_CONCURRENT_WRITE_THREADS:15}\n-    # The maximum size of the dataset when the OAP loads cache, such as network aliases.\n-    resultWindowMaxSize: ${SW_STORAGE_BANYANDB_QUERY_MAX_WINDOW_SIZE:10000}\n-    # The maximum size of metadata per query.\n-    metadataQueryMaxSize: ${SW_STORAGE_BANYANDB_QUERY_MAX_SIZE:10000}\n-    # The maximum number of trace segments per query.\n-    segmentQueryMaxSize: ${SW_STORAGE_BANYANDB_QUERY_SEGMENT_SIZE:200}\n-    # The maximum number of profile task queries in a request.\n-    profileTaskQueryMaxSize: ${SW_STORAGE_BANYANDB_QUERY_PROFILE_TASK_SIZE:200}\n-    # The batch size for querying profile data.\n-    profileDataQueryBatchSize: ${SW_STORAGE_BANYANDB_QUERY_PROFILE_DATA_BATCH_SIZE:100}\n-    # If the BanyanDB server is configured with TLS, configure the TLS cert file path and enable TLS connection.\n-    sslTrustCAPath: ${SW_STORAGE_BANYANDB_SSL_TRUST_CA_PATH:\""\""}\n-    # The group settings of record.\n-    # `gr` is the short name of the group settings of record.\n-    #\n-    # The \""normal\"" section defines settings for datasets not specified in \""super\"".\n-    # Each dataset will be grouped under a single group named \""normal\"".\n-    grNormalShardNum: ${SW_STORAGE_BANYANDB_GR_NORMAL_SHARD_NUM:1}\n-    grNormalSIDays: ${SW_STORAGE_BANYANDB_GR_NORMAL_SI_DAYS:1}\n-    grNormalTTLDays: ${SW_STORAGE_BANYANDB_GR_NORMAL_TTL_DAYS:3}\n-    # \""super\"" is a special dataset designed to store trace or log data that is too large for normal datasets.\n-    # Each super dataset will be a separate group in BanyanDB, following the settings defined in the \""super\"" section.\n-    grSuperShardNum: ${SW_STORAGE_BANYANDB_GR_SUPER_SHARD_NUM:2}\n-    grSuperSIDays: ${SW_STORAGE_BANYANDB_GR_SUPER_SI_DAYS:1}\n-    grSuperTTLDays: ${SW_STORAGE_BANYANDB_GR_SUPER_TTL_DAYS:3}\n-    # The group settings of metrics.\n-    # `gm` is the short name of the group settings of metrics.\n-    #\n-    # OAP stores metrics based its granularity.\n-    # Valid values are \""day\"", \""hour\"", and \""minute\"". That means metrics will be stored in the three separate groups.\n-    # Non-\""minute\"" are governed by the \""core.downsampling\"" setting.\n-    # For example, if \""core.downsampling\"" is set to \""hour\"", the \""hour\"" will be used, while \""day\"" are ignored.\n-    gmMinuteShardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_SHARD_NUM:2}\n-    gmMinuteSIDays: ${SW_STORAGE_BANYANDB_GM_MINUTE_SI_DAYS:1}\n-    gmMinuteTTLDays: ${SW_STORAGE_BANYANDB_GM_MINUTE_TTL_DAYS:7}\n-    gmHourShardNum: ${SW_STORAGE_BANYANDB_GM_HOUR_SHARD_NUM:1}\n-    gmHourSIDays: ${SW_STORAGE_BANYANDB_GM_HOUR_SI_DAYS:5}\n-    gmHourTTLDays: ${SW_STORAGE_BANYANDB_GM_HOUR_TTL_DAYS:15}\n-    gmDayShardNum: ${SW_STORAGE_BANYANDB_GM_DAY_SHARD_NUM:1}\n-    gmDaySIDays: ${SW_STORAGE_BANYANDB_GM_DAY_SI_DAYS:15}\n-    gmDayTTLDays: ${SW_STORAGE_BANYANDB_GM_DAY_TTL_DAYS:15}\n-    # If the metrics is marked as \""index_mode\"", the metrics will be stored in the \""index\"" group.\n-    # The \""index\"" group is designed to store metrics that are used for indexing without value columns.\n-    # Such as `service_traffic`, `network_address_alias`, etc.\n-    # \""index_mode\"" requires BanyanDB *0.8.0* or later.\n-    gmIndexShardNum: ${SW_STORAGE_BANYANDB_GM_INDEX_SHARD_NUM:2}\n-    gmIndexSIDays: ${SW_STORAGE_BANYANDB_GM_INDEX_SI_DAYS:15}\n-    gmIndexTTLDays: ${SW_STORAGE_BANYANDB_GM_INDEX_TTL_DAYS:15}\n+    # Since 10.2.0, the banyandb configuration is separated to an independent configuration file: `bydb.yaml`.\n   elasticsearch:\n     namespace: ${SW_NAMESPACE:\""\""}\n     clusterNodes: ${SW_STORAGE_ES_CLUSTER_NODES:localhost:9200}\n\ndiff --git a/oap-server/server-starter/src/main/resources/bydb.yml b/oap-server/server-starter/src/main/resources/bydb.yml\nnew file mode 100644\nindex 000000000000..3cfdb7da5ab1\n--- /dev/null\n+++ b/oap-server/server-starter/src/main/resources/bydb.yml\n@@ -0,0 +1,89 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \""License\""); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \""AS IS\"" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+global:\n+  # Targets is the list of BanyanDB servers, separated by commas.\n+  # Each target is a BanyanDB server in the format of `host:port`.\n+  # If BanyanDB is deployed as a standalone server, the target should be the IP address or domain name and port of the BanyanDB server.\n+  # If BanyanDB is deployed in a cluster, the targets should be the IP address or domain name and port of the `liaison` nodes, separated by commas.\n+  targets: ${SW_STORAGE_BANYANDB_TARGETS:127.0.0.1:17912}\n+  # The maximum number of records in a bulk write request.\n+  # A larger value can improve write performance but also increases OAP and BanyanDB Server memory usage.\n+  maxBulkSize: ${SW_STORAGE_BANYANDB_MAX_BULK_SIZE:10000}\n+  # The minimum seconds between two bulk flushes.\n+  # If the data in a bulk is less than maxBulkSize, the data will be flushed after this period.\n+  # If the data in a bulk exceeds maxBulkSize, the data will be flushed immediately.\n+  # A larger value can reduce write pressure on BanyanDB Server but increase data latency.\n+  flushInterval: ${SW_STORAGE_BANYANDB_FLUSH_INTERVAL:15}\n+  # The timeout in seconds for a bulk flush.\n+  flushTimeout: ${SW_STORAGE_BANYANDB_FLUSH_TIMEOUT:10}\n+  # The number of threads that write data to BanyanDB concurrently.\n+  # A higher value can improve write performance but also increases CPU usage on both OAP and BanyanDB Server.\n+  concurrentWriteThreads: ${SW_STORAGE_BANYANDB_CONCURRENT_WRITE_THREADS:15}\n+  # The maximum size of the dataset when the OAP loads cache, such as network aliases.\n+  resultWindowMaxSize: ${SW_STORAGE_BANYANDB_QUERY_MAX_WINDOW_SIZE:10000}\n+  # The maximum size of metadata per query.\n+  metadataQueryMaxSize: ${SW_STORAGE_BANYANDB_QUERY_MAX_SIZE:10000}\n+  # The maximum number of trace segments per query.\n+  segmentQueryMaxSize: ${SW_STORAGE_BANYANDB_QUERY_SEGMENT_SIZE:200}\n+  # The maximum number of profile task queries in a request.\n+  profileTaskQueryMaxSize: ${SW_STORAGE_BANYANDB_QUERY_PROFILE_TASK_SIZE:200}\n+  # The batch size for querying profile data.\n+  profileDataQueryBatchSize: ${SW_STORAGE_BANYANDB_QUERY_PROFILE_DATA_BATCH_SIZE:100}\n+  asyncProfilerTaskQueryMaxSize: ${SW_STORAGE_BANYANDB_ASYNC_PROFILER_TASK_QUERY_MAX_SIZE:200}\n+  # If the BanyanDB server is configured with TLS, configure the TLS cert file path and enable TLS connection.\n+  sslTrustCAPath: ${SW_STORAGE_BANYANDB_SSL_TRUST_CA_PATH:\""\""}\n+\n+groups:\n+  # The group settings of record.\n+  #\n+  # The \""normal\"" section defines settings for datasets not specified in \""super\"".\n+  # Each dataset will be grouped under a single group named \""normal\"".\n+  recordsNormal:\n+    shardNum:  ${SW_STORAGE_BANYANDB_GR_NORMAL_SHARD_NUM:1}\n+    segmentInterval: ${SW_STORAGE_BANYANDB_GR_NORMAL_SI_DAYS:1}\n+    ttl: ${SW_STORAGE_BANYANDB_GR_NORMAL_TTL_DAYS:3}\n+  # \""super\"" is a special dataset designed to store trace or log data that is too large for normal datasets.\n+  # Each super dataset will be a separate group in BanyanDB, following the settings defined in the \""super\"" section.\n+  recordsSuper:\n+    shardNum: ${SW_STORAGE_BANYANDB_GR_SUPER_SHARD_NUM:2}\n+    segmentInterval: ${SW_STORAGE_BANYANDB_GR_SUPER_SI_DAYS:1}\n+    ttl: ${SW_STORAGE_BANYANDB_GR_SUPER_TTL_DAYS:3}\n+  # The group settings of metrics.\n+  #\n+  # OAP stores metrics based its granularity.\n+  # Valid values are \""day\"", \""hour\"", and \""minute\"". That means metrics will be stored in the three separate groups.\n+  # Non-\""minute\"" are governed by the \""core.downsampling\"" setting.\n+  # For example, if \""core.downsampling\"" is set to \""hour\"", the \""hour\"" will be used, while \""day\"" are ignored.\n+  metricsMin:\n+    shardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_SHARD_NUM:2}\n+    segmentInterval: ${SW_STORAGE_BANYANDB_GM_MINUTE_SI_DAYS:1}\n+    ttl: ${SW_STORAGE_BANYANDB_GM_MINUTE_TTL_DAYS:7}\n+  metricsHour:\n+    shardNum: ${SW_STORAGE_BANYANDB_GM_HOUR_SHARD_NUM:1}\n+    segmentInterval: ${SW_STORAGE_BANYANDB_GM_HOUR_SI_DAYS:5}\n+    ttl: ${SW_STORAGE_BANYANDB_GM_HOUR_TTL_DAYS:15}\n+  metricsDay:\n+    shardNum: ${SW_STORAGE_BANYANDB_GM_DAY_SHARD_NUM:1}\n+    segmentInterval: ${SW_STORAGE_BANYANDB_GM_DAY_SI_DAYS:15}\n+    ttl: ${SW_STORAGE_BANYANDB_GM_DAY_TTL_DAYS:15}\n+  # If the metrics is marked as \""index_mode\"", the metrics will be stored in the \""index\"" group.\n+  # The \""index\"" group is designed to store metrics that are used for indexing without value columns.\n+  # Such as `service_traffic`, `network_address_alias`, etc.\n+  # \""index_mode\"" requires BanyanDB *0.8.0* or later.\n+  metadata:\n+    shardNum: ${SW_STORAGE_BANYANDB_GM_INDEX_SHARD_NUM:2}\n+    segmentInterval: ${SW_STORAGE_BANYANDB_GM_INDEX_SI_DAYS:15}\n+    ttl: ${SW_STORAGE_BANYANDB_GM_INDEX_TTL_DAYS:15}\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java\nnew file mode 100644\nindex 000000000000..34036ab4a678\n--- /dev/null\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBConfigLoader.java\n@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.storage.plugin.banyandb;\n+\n+import java.io.FileNotFoundException;\n+import java.io.Reader;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.util.ResourceUtils;\n+import org.yaml.snakeyaml.Yaml;\n+\n+import static org.apache.skywalking.oap.server.library.util.YamlConfigLoaderUtils.copyProperties;\n+import static org.apache.skywalking.oap.server.library.util.YamlConfigLoaderUtils.replacePropertyAndLog;\n+\n+@Slf4j\n+public class BanyanDBConfigLoader {\n+    private final ModuleProvider moduleProvider;\n+    private final Yaml yaml;\n+\n+    public BanyanDBConfigLoader(final ModuleProvider moduleProvider) {\n+        this.moduleProvider = moduleProvider;\n+        this.yaml = new Yaml();\n+    }\n+\n+    public BanyanDBStorageConfig loadConfig() throws ModuleStartException {\n+        BanyanDBStorageConfig config = new BanyanDBStorageConfig();\n+        Reader applicationReader = null;\n+        try {\n+            applicationReader = ResourceUtils.read(\""bydb.yml\"");\n+        } catch (FileNotFoundException e) {\n+            throw new ModuleStartException(\""Cannot find the BanyanDB configuration file [bydb.yml].\"", e);\n+        }\n+        Map<String, Map<String, ?>> configMap = yaml.loadAs(applicationReader, Map.class);\n+        if (configMap == null) {\n+            return config;\n+        }\n+\n+        Map<String, Properties> configProperties = new HashMap<>();\n+        configMap.forEach((part, c) -> {\n+            final Properties properties = new Properties();\n+            if (c != null) {\n+                for (Map.Entry<String, ?> entry : c.entrySet()) {\n+                    String propertyName = entry.getKey();\n+                    Object propertyValue = entry.getValue();\n+                    if (propertyValue instanceof Map) {\n+                        Properties subProperties = new Properties();\n+                        for (Map.Entry<String, ?> e : ((Map<String, ?>) propertyValue).entrySet()) {\n+                            String key = e.getKey();\n+                            Object value = e.getValue();\n+                            subProperties.put(key, value);\n+                            replacePropertyAndLog(key, value, subProperties, this.moduleProvider.name(), yaml);\n+                        }\n+                        properties.put(propertyName, subProperties);\n+                    } else {\n+                        properties.put(propertyName, propertyValue);\n+                        replacePropertyAndLog(\n+                            propertyName, propertyValue, properties, this.moduleProvider.name(), yaml);\n+                    }\n+                }\n+                configProperties.put(part, properties);\n+            }\n+        });\n+\n+        try {\n+            copyProperties(\n+                config.getGlobal(), configProperties.get(\""global\""), moduleProvider.getModule().name(),\n+                moduleProvider.name()\n+            );\n+            Properties groups = configProperties.get(\""groups\"");\n+            copyProperties(\n+                config.getRecordsNormal(), (Properties) groups.get(\""recordsNormal\""),\n+                moduleProvider.getModule().name(), moduleProvider.name()\n+            );\n+            copyProperties(\n+                config.getRecordsSuper(), (Properties) groups.get(\""recordsSuper\""),\n+                moduleProvider.getModule().name(), moduleProvider.name()\n+            );\n+            copyProperties(\n+                config.getMetricsMin(), (Properties) groups.get(\""metricsMin\""),\n+                moduleProvider.getModule().name(), moduleProvider.name()\n+            );\n+            copyProperties(\n+                config.getMetricsHour(), (Properties) groups.get(\""metricsHour\""),\n+                moduleProvider.getModule().name(), moduleProvider.name()\n+            );\n+            copyProperties(\n+                config.getMetricsDay(), (Properties) groups.get(\""metricsDay\""),\n+                moduleProvider.getModule().name(), moduleProvider.name()\n+            );\n+            copyProperties(\n+                config.getMetadata(), (Properties) groups.get(\""metadata\""),\n+                moduleProvider.getModule().name(), moduleProvider.name()\n+            );\n+        } catch (IllegalAccessException e) {\n+            throw new ModuleStartException(\""Failed to load BanyanDB configuration.\"", e);\n+        }\n+        return config;\n+    }\n+}\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageClient.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageClient.java\nindex ec9ab429ab82..b2fb795691a6 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageClient.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageClient.java\n@@ -69,9 +69,9 @@ public class BanyanDBStorageClient implements Client, HealthCheckable {\n \n     public BanyanDBStorageClient(BanyanDBStorageConfig config) {\n         Options options = new Options();\n-        options.setSslTrustCAPath(config.getSslTrustCAPath());\n+        options.setSslTrustCAPath(config.getGlobal().getSslTrustCAPath());\n         this.client = new BanyanDBClient(config.getTargetArray(), options);\n-        this.flushTimeout = config.getFlushTimeout();\n+        this.flushTimeout = config.getGlobal().getFlushTimeout();\n     }\n \n     @Override\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java\nindex 9ad6c03d7911..373ff6f06b53 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java\n@@ -27,89 +27,145 @@\n @Getter\n @Setter\n public class BanyanDBStorageConfig extends ModuleConfig {\n-    /**\n-     * A comma-separated list of BanyanDB targets.\n-     *\n-     * @since 9.7.0\n-     */\n-    private String targets = \""127.0.0.1:17912\"";\n-    /**\n-     * The maximum size of write entities in a single batch write call.\n-     */\n-    private int maxBulkSize = 5000;\n-    /**\n-     * Period of flush interval. In the timeunit of seconds.\n-     */\n-    private int flushInterval = 15;\n-    /**\n-     * Timeout of flush. In the timeunit of seconds.\n-     */\n-    private int flushTimeout = 10;\n-    /**\n-     * Concurrent consumer threads for batch writing.\n-     */\n-    private int concurrentWriteThreads = 2;\n-    /**\n-     * Max size of {@link org.apache.skywalking.oap.server.core.query.type.ProfileTask} to be fetched\n-     * in a single request.\n-     */\n-    private int profileTaskQueryMaxSize;\n+    private Global global = new Global();\n+    private RecordsNormal recordsNormal = new RecordsNormal();\n+    private RecordsSuper recordsSuper = new RecordsSuper();\n+    private MetricsMin metricsMin = new MetricsMin();\n+    private MetricsHour metricsHour = new MetricsHour();\n+    private MetricsDay metricsDay = new MetricsDay();\n+    private Metadata metadata = new Metadata();\n+\n+    public String[] getTargetArray() {\n+        return Iterables.toArray(\n+            Splitter.on(\"",\"").omitEmptyStrings().trimResults().split(this.global.targets), String.class);\n+    }\n+\n+    @Getter\n+    @Setter\n+    public static class Global {\n+        /**\n+         * A comma-separated list of BanyanDB targets.\n+         *\n+         * @since 9.7.0\n+         */\n+        private String targets = \""127.0.0.1:17912\"";\n+        /**\n+         * The maximum size of write entities in a single batch write call.\n+         */\n+        private int maxBulkSize = 5000;\n+        /**\n+         * Period of flush interval. In the timeunit of seconds.\n+         */\n+        private int flushInterval = 15;\n+        /**\n+         * Timeout of flush. In the timeunit of seconds.\n+         */\n+        private int flushTimeout = 10;\n+        /**\n+         * Concurrent consumer threads for batch writing.\n+         */\n+        private int concurrentWriteThreads = 2;\n+        /**\n+         * Max size of {@link org.apache.skywalking.oap.server.core.query.type.ProfileTask} to be fetched in a single\n+         * request.\n+         */\n+        private int profileTaskQueryMaxSize;\n+\n+        /**\n+         * If the BanyanDB server is configured with TLS, config the TLS cert file path and open tls connection.\n+         */\n+        private String sslTrustCAPath = \""\"";\n+        /**\n+         * Max size of {@link org.apache.skywalking.oap.server.core.query.type.AsyncProfilerTask} to be fetched in a\n+         * single request.\n+         */\n+        private int asyncProfilerTaskQueryMaxSize;\n+\n+        private int resultWindowMaxSize = 10000;\n+        private int metadataQueryMaxSize = 5000;\n+        private int segmentQueryMaxSize = 200;\n+        private int profileDataQueryBatchSize = 100;\n+    }\n+\n+    // The configuration of the groups.\n+    // since 10.2.0\n \n+    //The group settings of records.\n     /**\n-     * If the BanyanDB server is configured with TLS, config the TLS cert file path and open tls connection.\n+     * The RecordsNormal defines settings for datasets not specified in \""super\"".\n+     * Each dataset will be grouped under a single group named \""normal\"".\n      */\n-    private String sslTrustCAPath = \""\"";\n+    @Getter\n+    @Setter\n+    public static class RecordsNormal {\n+        private int shardNum = 1;\n+        private int segmentInterval = 1;\n+        private int ttl = 3;\n+    }\n+\n     /**\n-     * Max size of {@link org.apache.skywalking.oap.server.core.query.type.AsyncProfilerTask} to be fetched\n-     * in a single request.\n+     * RecordsSuper is a special dataset designed to store trace or log data that is too large for normal datasets.\n+     * Each super dataset will be a separate group in BanyanDB.\n      */\n-    private int asyncProfilerTaskQueryMaxSize;\n-\n-    private int resultWindowMaxSize = 10000;\n-    private int metadataQueryMaxSize = 5000;\n-    private int segmentQueryMaxSize = 200;\n-    private int profileDataQueryBatchSize = 100;\n+    @Getter\n+    @Setter\n+    public static class RecordsSuper {\n+        private int shardNum = 2;\n+        private int segmentInterval = 1;\n+        private int ttl = 3;\n+    }\n \n-    // ----------------------------------------\n-    // The configuration of the groups.\n-    // since 10.2.0\n-    // ----------------------------------------\n-    // The group settings of record.\n-    // `gr` is the short name of the group settings of record.\n-    //\n-    // The \""normal\""(`gr...`) section defines settings for datasets not specified in \""super\"".\n-    // Each dataset will be grouped under a single group named \""normal\"".\n-    // \""super\""(`grSuper...`) is a special dataset designed to store trace or log data that is too large for normal datasets.\n-    // # Each super dataset will be a separate group in BanyanDB, following the settings defined in the \""super\"" section.\n-    // ----------------------------------------\n     // The group settings of metrics.\n-    // `gm` is the short name of the group settings of metrics.\n     //\n     // OAP stores metrics based its granularity.\n     // Valid values are \""day\"", \""hour\"", and \""minute\"". That means metrics will be stored in the three separate groups.\n     // Non-\""minute\"" are governed by the \""core.downsampling\"" setting.\n     // For example, if \""core.downsampling\"" is set to \""hour\"", the \""hour\"" will be used, while \""day\"" are ignored.\n \n-    private int grNormalShardNum = 1;\n-    private int grNormalSIDays = 1;\n-    private int grNormalTTLDays = 3;\n-    private int grSuperShardNum = 2;\n-    private int grSuperSIDays = 1;\n-    private int grSuperTTLDays = 3;\n-    private int gmMinuteShardNum = 2;\n-    private int gmMinuteSIDays = 1;\n-    private int gmMinuteTTLDays = 7;\n-    private int gmHourShardNum = 1;\n-    private int gmHourSIDays = 1;\n-    private int gmHourTTLDays = 15;\n-    private int gmDayShardNum = 1;\n-    private int gmDaySIDays = 1;\n-    private int gmDayTTLDays = 30;\n-    private int gmIndexShardNum = 1;\n-    private int gmIndexSIDays = 1;\n-    private int gmIndexTTLDays = 30;\n+    /**\n+     * The MetricsMin defines settings for \""minute\"" group metrics.\n+     */\n+    @Getter\n+    @Setter\n+    public static class MetricsMin {\n+        private int shardNum = 2;\n+        private int segmentInterval = 1;\n+        private int ttl = 7;\n+    }\n \n-    public String[] getTargetArray() {\n-        return Iterables.toArray(Splitter.on(\"",\"").omitEmptyStrings().trimResults().split(this.targets), String.class);\n+    /**\n+     * The MetricsHour defines settings for \""hour\"" group metrics.\n+     */\n+    @Getter\n+    @Setter\n+    public static class MetricsHour {\n+        private int shardNum = 1;\n+        private int segmentInterval = 5;\n+        private int ttl = 15;\n+    }\n+\n+    /**\n+     * The MetricsDay defines settings for \""day\"" group metrics.\n+     */\n+    @Getter\n+    @Setter\n+    public static class MetricsDay {\n+        private int shardNum = 1;\n+        private int segmentInterval = 15;\n+        private int ttl = 15;\n+    }\n+\n+    /**\n+     # If the metrics is marked as \""index_mode\"", the metrics will be stored in the \""index\"" group.\n+     # The \""index\"" group is designed to store metrics that are used for indexing without value columns.\n+     # Such as `service_traffic`, `network_address_alias`, etc.\n+     # \""index_mode\"" requires BanyanDB *0.8.0* or later.\n+     */\n+    @Getter\n+    @Setter\n+    public static class Metadata {\n+        private int shardNum = 2;\n+        private int segmentInterval = 15;\n+        private int ttl = 15;\n     }\n }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageProvider.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageProvider.java\nindex fb80d067e79f..5b6392e5813c 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageProvider.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageProvider.java\n@@ -115,21 +115,23 @@ public Class type() {\n \n             @Override\n             public void onInitialized(final BanyanDBStorageConfig initialized) {\n-                config = initialized;\n             }\n         };\n     }\n \n     @Override\n     public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n-        if (config.getGmDayTTLDays() > config.getGmIndexTTLDays()) {\n-            throw new ModuleStartException(\""gmDayTTLDays must be less than or equal to gmIndexTTLDays\"");\n+        // load banyandb config\n+        config = new BanyanDBConfigLoader(this).loadConfig();\n+\n+        if (config.getMetricsDay().getTtl() > config.getMetadata().getTtl()) {\n+            throw new ModuleStartException(\""metricsDay ttl must be less than or equal to metadata ttl\"");\n         }\n-        if (config.getGmHourTTLDays() > config.getGmIndexTTLDays()) {\n-            throw new ModuleStartException(\""gmHourTTLDays must be less than or equal to gmIndexTTLDays\"");\n+        if (config.getMetricsHour().getTtl() > config.getMetadata().getTtl()) {\n+            throw new ModuleStartException(\""metricsHour must be less than or equal to metadata ttl\"");\n         }\n-        if (config.getGmMinuteTTLDays() > config.getGmIndexTTLDays()) {\n-            throw new ModuleStartException(\""gmMinuteTTLDays must be less than or equal to gmIndexTTLDays\"");\n+        if (config.getMetricsMin().getTtl() > config.getMetadata().getTtl()) {\n+            throw new ModuleStartException(\""metricsMin must be less than or equal to metadata ttl\"");\n         }\n         this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n \n@@ -138,34 +140,34 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n \n         // Stream\n         this.registerServiceImplementation(\n-            IBatchDAO.class, new BanyanDBBatchDAO(client, config.getMaxBulkSize(), config.getFlushInterval(),\n-                                                  config.getConcurrentWriteThreads()\n+            IBatchDAO.class, new BanyanDBBatchDAO(client, config.getGlobal().getMaxBulkSize(), config.getGlobal().getFlushInterval(),\n+                                                  config.getGlobal().getConcurrentWriteThreads()\n             ));\n         this.registerServiceImplementation(StorageDAO.class, new BanyanDBStorageDAO(client));\n         this.registerServiceImplementation(INetworkAddressAliasDAO.class, new BanyanDBNetworkAddressAliasDAO(client, this.config));\n-        this.registerServiceImplementation(ITraceQueryDAO.class, new BanyanDBTraceQueryDAO(client, this.config.getSegmentQueryMaxSize()));\n+        this.registerServiceImplementation(ITraceQueryDAO.class, new BanyanDBTraceQueryDAO(client, this.config.getGlobal().getSegmentQueryMaxSize()));\n         this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BanyanDBBrowserLogQueryDAO(client));\n         this.registerServiceImplementation(IMetadataQueryDAO.class, new BanyanDBMetadataQueryDAO(client, this.config));\n         this.registerServiceImplementation(IAlarmQueryDAO.class, new BanyanDBAlarmQueryDAO(client));\n         this.registerServiceImplementation(ILogQueryDAO.class, new BanyanDBLogQueryDAO(client));\n         this.registerServiceImplementation(\n             IProfileTaskQueryDAO.class, new BanyanDBProfileTaskQueryDAO(client,\n-                                                                        this.config.getProfileTaskQueryMaxSize()\n+                                                                        this.config.getGlobal().getProfileTaskQueryMaxSize()\n             ));\n         this.registerServiceImplementation(\n             IProfileTaskLogQueryDAO.class, new BanyanDBProfileTaskLogQueryDAO(client,\n-                                                                              this.config.getProfileTaskQueryMaxSize()\n+                                                                              this.config.getGlobal().getProfileTaskQueryMaxSize()\n             ));\n         this.registerServiceImplementation(\n             IProfileThreadSnapshotQueryDAO.class, new BanyanDBProfileThreadSnapshotQueryDAO(client,\n-                                                                                            this.config.getProfileTaskQueryMaxSize()\n+                                                                                            this.config.getGlobal().getProfileTaskQueryMaxSize()\n             ));\n         this.registerServiceImplementation(UITemplateManagementDAO.class, new BanyanDBUITemplateManagementDAO(client));\n         this.registerServiceImplementation(UIMenuManagementDAO.class, new BanyanDBUIMenuManagementDAO(client));\n         this.registerServiceImplementation(IEventQueryDAO.class, new BanyanDBEventQueryDAO(client));\n         this.registerServiceImplementation(ITopologyQueryDAO.class, new BanyanDBTopologyQueryDAO(client));\n         this.registerServiceImplementation(IEBPFProfilingTaskDAO.class, new BanyanDBEBPFProfilingTaskDAO(client));\n-        this.registerServiceImplementation(IEBPFProfilingDataDAO.class, new BanyanDBEBPFProfilingDataDAO(client, this.config.getProfileDataQueryBatchSize()));\n+        this.registerServiceImplementation(IEBPFProfilingDataDAO.class, new BanyanDBEBPFProfilingDataDAO(client, this.config.getGlobal().getProfileDataQueryBatchSize()));\n         this.registerServiceImplementation(\n             IEBPFProfilingScheduleDAO.class, new BanyanDBEBPFProfilingScheduleQueryDAO(client));\n         this.registerServiceImplementation(IContinuousProfilingPolicyDAO.class, new BanyanDBContinuousProfilingPolicyDAO(client));\n@@ -177,15 +179,15 @@ IProfileThreadSnapshotQueryDAO.class, new BanyanDBProfileThreadSnapshotQueryDAO(\n         this.registerServiceImplementation(IAggregationQueryDAO.class, new BanyanDBAggregationQueryDAO(client));\n         this.registerServiceImplementation(IRecordsQueryDAO.class, new BanyanDBRecordsQueryDAO(client));\n         this.registerServiceImplementation(IZipkinQueryDAO.class, new BanyanDBZipkinQueryDAO(client));\n-        this.registerServiceImplementation(ISpanAttachedEventQueryDAO.class, new BanyanDBSpanAttachedEventQueryDAO(client, this.config.getProfileDataQueryBatchSize()));\n+        this.registerServiceImplementation(ISpanAttachedEventQueryDAO.class, new BanyanDBSpanAttachedEventQueryDAO(client, this.config.getGlobal().getProfileDataQueryBatchSize()));\n         this.registerServiceImplementation(IHierarchyQueryDAO.class, new BanyanDBHierarchyQueryDAO(client, this.config));\n         this.registerServiceImplementation(\n                 IAsyncProfilerTaskQueryDAO.class, new BanyanDBAsyncProfilerTaskQueryDAO(client,\n-                        this.config.getAsyncProfilerTaskQueryMaxSize()\n+                        this.config.getGlobal().getAsyncProfilerTaskQueryMaxSize()\n                 ));\n         this.registerServiceImplementation(\n                 IAsyncProfilerTaskLogQueryDAO.class, new BanyanDBAsyncProfilerTaskLogQueryDAO(client,\n-                        this.config.getAsyncProfilerTaskQueryMaxSize()\n+                        this.config.getGlobal().getAsyncProfilerTaskQueryMaxSize()\n                 ));\n         this.registerServiceImplementation(IJFRDataQueryDAO.class, new BanyanDBJFRDataQueryDAO(client));\n         this.registerServiceImplementation(\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBTTLStatusQuery.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBTTLStatusQuery.java\nindex 9ad975c5f320..c60cd22c5b03 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBTTLStatusQuery.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBTTLStatusQuery.java\n@@ -18,6 +18,8 @@\n \n package org.apache.skywalking.oap.server.storage.plugin.banyandb;\n \n+import org.apache.skywalking.oap.server.core.storage.ttl.MetricsTTL;\n+import org.apache.skywalking.oap.server.core.storage.ttl.RecordsTTL;\n import org.apache.skywalking.oap.server.core.storage.ttl.StorageTTLStatusQuery;\n import org.apache.skywalking.oap.server.core.storage.ttl.TTLDefinition;\n \n@@ -29,15 +31,18 @@ public class BanyanDBTTLStatusQuery implements StorageTTLStatusQuery {\n     private final int gmDayTTLDays;\n \n     public BanyanDBTTLStatusQuery(BanyanDBStorageConfig config) {\n-        grNormalTTLDays = config.getGrNormalTTLDays();\n-        grSuperTTLDays = config.getGrSuperTTLDays();\n-        gmMinuteTTLDays = config.getGmMinuteTTLDays();\n-        gmHourTTLDays = config.getGmHourTTLDays();\n-        gmDayTTLDays = config.getGmDayTTLDays();\n+        grNormalTTLDays = config.getRecordsNormal().getTtl();\n+        grSuperTTLDays = config.getRecordsSuper().getTtl();\n+        gmMinuteTTLDays = config.getMetricsMin().getTtl();\n+        gmHourTTLDays = config.getMetricsHour().getTtl();\n+        gmDayTTLDays = config.getMetricsDay().getTtl();\n     }\n \n     @Override\n     public TTLDefinition getTTL() {\n-        return null;\n+        return new TTLDefinition(\n+            new MetricsTTL(gmMinuteTTLDays, gmHourTTLDays, gmDayTTLDays),\n+            new RecordsTTL(grNormalTTLDays, grSuperTTLDays)\n+        );\n     }\n }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\nindex 67ff29b65554..f88c7619ea09 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\n@@ -466,17 +466,17 @@ public SchemaMetadata parseMetadata(Model model, BanyanDBStorageConfig config, D\n                     model.getName(),\n                     Kind.STREAM,\n                     model.getDownsampling(),\n-                    model.isSuperDataset() ? config.getGrSuperShardNum() : config.getGrNormalShardNum(),\n-                    model.isSuperDataset() ? config.getGrSuperSIDays() : config.getGrNormalSIDays(),\n-                    model.isSuperDataset() ? config.getGrSuperTTLDays() : config.getGrNormalTTLDays());\n+                    model.isSuperDataset() ? config.getRecordsSuper().getShardNum() : config.getRecordsNormal().getShardNum(),\n+                    model.isSuperDataset() ? config.getRecordsSuper().getSegmentInterval() : config.getRecordsNormal().getSegmentInterval(),\n+                    model.isSuperDataset() ? config.getRecordsSuper().getTtl() : config.getRecordsNormal().getTtl());\n         }\n \n         if (model.getBanyanDBModelExtension().isIndexMode()) {\n             return new SchemaMetadata(\""index\"", model.getName(), Kind.MEASURE,\n                     model.getDownsampling(),\n-                    config.getGmIndexShardNum(),\n-                    config.getGmIndexSIDays(),\n-                    config.getGmIndexTTLDays());\n+                    config.getMetadata().getShardNum(),\n+                    config.getMetadata().getSegmentInterval(),\n+                    config.getMetadata().getTtl());\n         }\n \n         switch (model.getDownsampling()) {\n@@ -485,9 +485,9 @@ public SchemaMetadata parseMetadata(Model model, BanyanDBStorageConfig config, D\n                         model.getName(),\n                         Kind.MEASURE,\n                         model.getDownsampling(),\n-                        config.getGmMinuteShardNum(),\n-                        config.getGmMinuteSIDays(),\n-                        config.getGmMinuteTTLDays());\n+                        config.getMetricsMin().getShardNum(),\n+                        config.getMetricsMin().getSegmentInterval(),\n+                        config.getMetricsMin().getTtl());\n             case Hour:\n                 if (!configService.shouldToHour()) {\n                     throw new UnsupportedOperationException(\""downsampling to hour is not supported\"");\n@@ -496,9 +496,9 @@ public SchemaMetadata parseMetadata(Model model, BanyanDBStorageConfig config, D\n                         model.getName(),\n                         Kind.MEASURE,\n                         model.getDownsampling(),\n-                        config.getGmHourShardNum(),\n-                        config.getGmHourSIDays(),\n-                        config.getGmHourTTLDays());\n+                        config.getMetricsHour().getShardNum(),\n+                        config.getMetricsHour().getSegmentInterval(),\n+                        config.getMetricsHour().getTtl());\n             case Day:\n                 if (!configService.shouldToDay()) {\n                     throw new UnsupportedOperationException(\""downsampling to day is not supported\"");\n@@ -507,9 +507,9 @@ public SchemaMetadata parseMetadata(Model model, BanyanDBStorageConfig config, D\n                         model.getName(),\n                         Kind.MEASURE,\n                         model.getDownsampling(),\n-                        config.getGmDayShardNum(),\n-                        config.getGmDaySIDays(),\n-                        config.getGmDayTTLDays());\n+                        config.getMetricsDay().getShardNum(),\n+                        config.getMetricsDay().getSegmentInterval(),\n+                        config.getMetricsDay().getTtl());\n             default:\n                 throw new UnsupportedOperationException(\""unsupported downSampling interval:\"" + model.getDownsampling());\n         }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBHierarchyQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBHierarchyQueryDAO.java\nindex a733fbedd185..a7e2361dc08a 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBHierarchyQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBHierarchyQueryDAO.java\n@@ -57,7 +57,7 @@ public class BanyanDBHierarchyQueryDAO extends AbstractBanyanDBDAO implements IH\n \n     public BanyanDBHierarchyQueryDAO(final BanyanDBStorageClient client, BanyanDBStorageConfig config) {\n         super(client);\n-        this.limit = config.getMetadataQueryMaxSize();\n+        this.limit = config.getGlobal().getMetadataQueryMaxSize();\n     }\n \n     @Override\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java\nindex 74d8dfd210d8..9bc0f548e2b7 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetadataQueryDAO.java\n@@ -86,7 +86,7 @@ public class BanyanDBMetadataQueryDAO extends AbstractBanyanDBDAO implements IMe\n \n     public BanyanDBMetadataQueryDAO(BanyanDBStorageClient client, BanyanDBStorageConfig config) {\n         super(client);\n-        this.limit = config.getMetadataQueryMaxSize();\n+        this.limit = config.getGlobal().getMetadataQueryMaxSize();\n     }\n \n     @Override\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBNetworkAddressAliasDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBNetworkAddressAliasDAO.java\nindex 44f38d7106eb..71d6d12aad5a 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBNetworkAddressAliasDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBNetworkAddressAliasDAO.java\n@@ -51,7 +51,7 @@ public class BanyanDBNetworkAddressAliasDAO extends AbstractBanyanDBDAO implemen\n \n     public BanyanDBNetworkAddressAliasDAO(final BanyanDBStorageClient client, BanyanDBStorageConfig config) {\n         super(client);\n-        this.limit = config.getResultWindowMaxSize();\n+        this.limit = config.getGlobal().getResultWindowMaxSize();\n     }\n \n     private MetadataRegistry.Schema getSchema() {\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBServiceLabelDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBServiceLabelDAO.java\nindex 630c04154699..d5e578d29e9e 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBServiceLabelDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBServiceLabelDAO.java\n@@ -41,7 +41,7 @@ public class BanyanDBServiceLabelDAO extends AbstractBanyanDBDAO implements ISer\n \n     public BanyanDBServiceLabelDAO(final BanyanDBStorageClient client, BanyanDBStorageConfig config) {\n         super(client);\n-        this.limit = config.getMetadataQueryMaxSize();\n+        this.limit = config.getGlobal().getMetadataQueryMaxSize();\n     }\n \n     @Override\n"", ""test_patch"": ""diff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java\nindex 038f06d24597..fe78339cbe99 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java\n@@ -100,7 +100,7 @@ public class BanyanDBIT {\n     protected void setUpConnection() throws Exception {\n         log.info(\""create BanyanDB client and try to connect\"");\n         config = new BanyanDBStorageConfig();\n-        config.setTargets(banyanDB.getHost() + \"":\"" + banyanDB.getMappedPort(GRPC_PORT));\n+        config.getGlobal().setTargets(banyanDB.getHost() + \"":\"" + banyanDB.getMappedPort(GRPC_PORT));\n         client = new BanyanDBStorageClient(config);\n         client.connect();\n     }\n@@ -134,10 +134,10 @@ public void testInstall() throws Exception {\n         //test Group install\n         BanyandbCommon.Group group = client.client.findGroup(DownSampling.Minute.getName());\n         assertEquals(BanyandbCommon.Catalog.CATALOG_MEASURE, group.getCatalog());\n-        assertEquals(config.getGmMinuteSIDays(), group.getResourceOpts().getSegmentInterval().getNum());\n-        assertEquals(config.getGmMinuteShardNum(), group.getResourceOpts().getShardNum());\n+        assertEquals(config.getMetricsMin().getSegmentInterval(), group.getResourceOpts().getSegmentInterval().getNum());\n+        assertEquals(config.getMetricsMin().getShardNum(), group.getResourceOpts().getShardNum());\n         assertEquals(BanyandbCommon.IntervalRule.Unit.UNIT_DAY, group.getResourceOpts().getSegmentInterval().getUnit());\n-        assertEquals(config.getGmMinuteTTLDays(), group.getResourceOpts().getTtl().getNum());\n+        assertEquals(config.getMetricsMin().getTtl(), group.getResourceOpts().getTtl().getNum());\n         assertEquals(BanyandbCommon.IntervalRule.Unit.UNIT_DAY, group.getResourceOpts().getTtl().getUnit());\n \n         installer.createTable(model);\n@@ -202,9 +202,9 @@ public void testInstall() throws Exception {\n         Model updatedModel = models.add(UpdateTestMetric.class, DefaultScopeDefine.SERVICE,\n                                         new Storage(\""testMetric\"", true, DownSampling.Minute)\n         );\n-        config.setGmMinuteShardNum(config.getGmDayShardNum() + 1);\n-        config.setGmMinuteSIDays(config.getGmDaySIDays() + 2);\n-        config.setGmMinuteTTLDays(config.getGmDayTTLDays() + 3);\n+        config.getMetricsMin().setShardNum(config.getMetricsDay().getShardNum() + 1);\n+        config.getMetricsMin().setSegmentInterval(config.getMetricsDay().getSegmentInterval() + 2);\n+        config.getMetricsMin().setTtl(config.getMetricsDay().getTtl() + 3);\n         BanyanDBIndexInstaller newInstaller = new BanyanDBIndexInstaller(client, moduleManager, config);\n         newInstaller.isExists(updatedModel);\n         //test Group update\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-12974"", ""pr_id"": 12974, ""issue_id"": 12955, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] [Test] Retesting Circuit Breaking with traffic\n### Search before asking\n\n- [X] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nI added this feature through https://github.com/apache/skywalking/pull/12953, but only with local mock testing.\n\n@wankai123 When you have time next week, please use real traffic to verify the feature including\n1. Trigger traffic circuit breaking as memory is low. Or we could setup a low threadhold, 10% memory to break.\n2. Recovery from limiting.\n3. Repeat on <1> and <2> periods.\n\n### Use case\n\n_No response_\n\n### Related issues\n\n_No response_\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [X] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 153, ""test_files_count"": 2, ""non_test_files_count"": 3, ""pr_changed_files"": [""docs/en/changes/changes.md"", ""oap-server/server-starter/src/main/resources/otel-rules/oap.yaml"", ""oap-server/server-starter/src/main/resources/ui-initialized-templates/so11y_oap/so11y-instance.json"", ""test/e2e-v2/cases/so11y/expected/metrics-has-memory-value-label.yml"", ""test/e2e-v2/cases/so11y/so11y-cases.yaml""], ""pr_changed_test_files"": [""test/e2e-v2/cases/so11y/expected/metrics-has-memory-value-label.yml"", ""test/e2e-v2/cases/so11y/so11y-cases.yaml""], ""base_commit"": ""6f8941a9d3866c44c53168d03cec5d0015e1eee1"", ""head_commit"": ""8a4413a21c7742907517827d530561d4728dc297"", ""repo_url"": ""https://github.com/apache/skywalking/pull/12974"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/12974"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-15T11:06:46.000Z"", ""patch"": ""diff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 266d3d7d437f..93f328bff0ce 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -62,6 +62,7 @@\n * Add Circuit Breaking mechanism.\n * BanyanDB: Add support for compatibility checks based on the BanyanDB server's API version.\n * MQE: Support `&&(and)`, `||(or)` bool operators.\n+* OAP self observability: Add JVM heap and direct memory used metrics.\n \n #### UI\n \n@@ -86,6 +87,7 @@\n * Fix inaccurate data query issue on endpoint topology page.\n * Update browser dashboard for the new metrics.\n * Visualize `Snapshot` on `Alerting` page.\n+* OAP self observability dashboard: Add JVM heap and direct memory used metrics.\n \n #### Documentation\n * Update release document to adopt newly added revision-based process.\n\ndiff --git a/oap-server/server-starter/src/main/resources/otel-rules/oap.yaml b/oap-server/server-starter/src/main/resources/otel-rules/oap.yaml\nindex 72e6b92284f5..e238575627cb 100644\n--- a/oap-server/server-starter/src/main/resources/otel-rules/oap.yaml\n+++ b/oap-server/server-starter/src/main/resources/otel-rules/oap.yaml\n@@ -35,7 +35,9 @@ metricsRules:\n   - name: instance_cpu_percentage\n     exp: (process_cpu_seconds_total * 100).sum(['service', 'host_name']).rate('PT1M')\n   - name: instance_jvm_memory_bytes_used\n-    exp: jvm_memory_bytes_used.sum(['service', 'host_name'])\n+    exp: jvm_memory_bytes_used.sum(['service', 'host_name', 'area'])\n+  - name: instance_jvm_buffer_pool_bytes_used\n+    exp: jvm_buffer_pool_used_bytes.sum(['service', 'host_name', 'pool'])\n   - name: instance_jvm_gc_count\n     exp: >\n       jvm_gc_collection_seconds_count.tagMatch('gc', 'PS Scavenge|Copy|ParNew|G1 Young Generation|PS MarkSweep|MarkSweepCompact|ConcurrentMarkSweep|G1 Old Generation')\n\ndiff --git a/oap-server/server-starter/src/main/resources/ui-initialized-templates/so11y_oap/so11y-instance.json b/oap-server/server-starter/src/main/resources/ui-initialized-templates/so11y_oap/so11y-instance.json\nindex 3a9403c26043..edb00a54d84a 100644\n--- a/oap-server/server-starter/src/main/resources/ui-initialized-templates/so11y_oap/so11y-instance.json\n+++ b/oap-server/server-starter/src/main/resources/ui-initialized-templates/so11y_oap/so11y-instance.json\n@@ -44,7 +44,7 @@\n                   \""i\"": \""1\"",\n                   \""type\"": \""Widget\"",\n                   \""widget\"": {\n-                    \""title\"": \""Memory (MB)\""\n+                    \""title\"": \""Memory Used (MB)\""\n                   },\n                   \""graph\"": {\n                     \""type\"": \""Line\"",\n@@ -55,12 +55,13 @@\n                     \""showYAxis\"": true\n                   },\n                   \""expressions\"": [\n-                    \""meter_oap_instance_jvm_memory_bytes_used/1024/1024\""\n+                    \""meter_oap_instance_jvm_memory_bytes_used/1024/1024\"",\n+                    \""\""\n                   ]\n                 },\n                 {\n-                  \""x\"": 12,\n-                  \""y\"": 0,\n+                  \""x\"": 0,\n+                  \""y\"": 13,\n                   \""w\"": 6,\n                   \""h\"": 13,\n                   \""i\"": \""0\"",\n@@ -100,7 +101,7 @@\n                 },\n                 {\n                   \""x\"": 0,\n-                  \""y\"": 13,\n+                  \""y\"": 26,\n                   \""w\"": 6,\n                   \""h\"": 13,\n                   \""i\"": \""11\"",\n@@ -193,7 +194,7 @@\n                 },\n                 {\n                   \""x\"": 0,\n-                  \""y\"": 26,\n+                  \""y\"": 39,\n                   \""w\"": 6,\n                   \""h\"": 13,\n                   \""i\"": \""15\"",\n@@ -317,10 +318,10 @@\n                   ]\n                 },\n                 {\n-                  \""x\"": 0,\n+                  \""x\"": 12,\n                   \""y\"": 39,\n                   \""w\"": 6,\n-                  \""h\"": 11,\n+                  \""h\"": 13,\n                   \""i\"": \""16\"",\n                   \""type\"": \""Widget\"",\n                   \""expressions\"": [\n@@ -347,7 +348,7 @@\n                   \""x\"": 6,\n                   \""y\"": 39,\n                   \""w\"": 6,\n-                  \""h\"": 11,\n+                  \""h\"": 13,\n                   \""i\"": \""17\"",\n                   \""type\"": \""Widget\"",\n                   \""widget\"": {\n@@ -369,6 +370,28 @@\n                       \""label\"": \""Error Count\""\n                     }\n                   ]\n+                },\n+                {\n+                  \""x\"": 12,\n+                  \""y\"": 0,\n+                  \""w\"": 6,\n+                  \""h\"": 13,\n+                  \""i\"": \""18\"",\n+                  \""type\"": \""Widget\"",\n+                  \""expressions\"": [\n+                    \""meter_oap_instance_jvm_buffer_pool_bytes_used/1024/1024\""\n+                  ],\n+                  \""graph\"": {\n+                    \""type\"": \""Line\"",\n+                    \""step\"": false,\n+                    \""smooth\"": false,\n+                    \""showSymbol\"": true,\n+                    \""showXAxis\"": true,\n+                    \""showYAxis\"": true\n+                  },\n+                  \""widget\"": {\n+                    \""title\"": \""Buffer Pool Used(MB)\""\n+                  }\n                 }\n               ]\n             },\n@@ -691,23 +714,7 @@\n       \""layer\"": \""SO11Y_OAP\"",\n       \""entity\"": \""ServiceInstance\"",\n       \""name\"": \""Self-Observability-OAP-Instance\"",\n-      \""id\"": \""Self-Observability-OAP-Instance\"",\n-      \""isRoot\"": false,\n-      \""isDefault\"": true,\n-      \""expressions\"": [\n-        \""avg(meter_oap_instance_cpu_percentage)\"",\n-        \""avg(meter_oap_instance_persistence_execute_count)\""\n-      ],\n-      \""expressionsConfig\"": [\n-        {\n-          \""unit\"": \""%\"",\n-          \""label\"": \""CPU Avg Usage\""\n-        },\n-        {\n-          \""unit\"": \""count / 5min\"",\n-          \""label\"": \""Persistence Count\""\n-        }\n-      ]\n+      \""isRoot\"": false\n     }\n   }\n ]\n"", ""test_patch"": ""diff --git a/test/e2e-v2/cases/so11y/expected/metrics-has-memory-value-label.yml b/test/e2e-v2/cases/so11y/expected/metrics-has-memory-value-label.yml\nnew file mode 100644\nindex 000000000000..8b5a24de6238\n--- /dev/null\n+++ b/test/e2e-v2/cases/so11y/expected/metrics-has-memory-value-label.yml\n@@ -0,0 +1,51 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \""License\""); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \""AS IS\"" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+debuggingtrace: null\n+type: TIME_SERIES_VALUES\n+results:\n+  {{- contains .results }}\n+  - metric:\n+      labels:\n+        - key: area\n+          value: \""heap\""\n+    values:\n+      {{- contains .values }}\n+      - id: {{ notEmpty .id }}\n+        value: {{ .value }}\n+        owner: null\n+        traceid: null\n+      - id: {{ notEmpty .id }}\n+        value: null\n+        owner: null\n+        traceid: null\n+      {{- end}}\n+  - metric:\n+      labels:\n+        - key: area\n+          value: \""nonheap\""\n+    values:\n+      {{- contains .values }}\n+      - id: {{ notEmpty .id }}\n+        value: {{ .value }}\n+        owner: null\n+        traceid: null\n+      - id: {{ notEmpty .id }}\n+        value: null\n+        owner: null\n+        traceid: null\n+      {{- end}}\n+  {{- end}}\n+error: null\n\ndiff --git a/test/e2e-v2/cases/so11y/so11y-cases.yaml b/test/e2e-v2/cases/so11y/so11y-cases.yaml\nindex 331f0f88b223..1771da920d34 100644\n--- a/test/e2e-v2/cases/so11y/so11y-cases.yaml\n+++ b/test/e2e-v2/cases/so11y/so11y-cases.yaml\n@@ -27,7 +27,7 @@\n     - query: swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql metrics exec --expression=meter_oap_instance_cpu_percentage --instance-name=http://localhost:1234 --service-name=oap-server\n       expected: expected/metrics-has-value.yml\n     - query: swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql metrics exec --expression=meter_oap_instance_jvm_memory_bytes_used --instance-name=http://localhost:1234 --service-name=oap-server\n-      expected: expected/metrics-has-value.yml\n+      expected: expected/metrics-has-memory-value-label.yml\n     - query: swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql metrics exec --expression=meter_oap_instance_trace_count --instance-name=http://localhost:1234 --service-name=oap-server\n       expected: expected/metrics-has-value.yml\n     - query: swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql metrics exec --expression=\""meter_oap_instance_metrics_aggregation{level='L1 aggregation'}\"" --instance-name=http://localhost:1234 --service-name=oap-server\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-12937"", ""pr_id"": 12937, ""issue_id"": 12915, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] Support mutiple top N merging function in MQE\n### Search before asking\n\n- [X] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nAs the difference between MAL and OAL, some metrics would be separated, e.g. service cpm and k8s service cpm. On the query and/or alerting MQE setup, we may need a single expression for those metrics.\r\nSo, I propose this function, `top_n_of(exp1, exp2, ...)`\n\n### Use case\n\nSupport to provide unified top N for multiple metric expressions. Note, the expression should keep the precious of those expressions same. Otherwise, top N would be incorrect.\n\n### Related issues\n\n_No response_\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [X] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 160, ""test_files_count"": 2, ""non_test_files_count"": 7, ""pr_changed_files"": [""docs/en/api/metrics-query-expression.md"", ""docs/en/changes/changes.md"", ""oap-server/mqe-grammar/src/main/antlr4/org/apache/skywalking/mqe/rt/grammar/MQELexer.g4"", ""oap-server/mqe-grammar/src/main/antlr4/org/apache/skywalking/mqe/rt/grammar/MQEParser.g4"", ""oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/MQEVisitorBase.java"", ""oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/TopNOfOp.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/TopNOfOpTest.java"", ""oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/mqe/rt/MQEVisitor.java"", ""test/e2e-v2/cases/mqe/mqe-cases.yaml""], ""pr_changed_test_files"": [""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/TopNOfOpTest.java"", ""test/e2e-v2/cases/mqe/mqe-cases.yaml""], ""base_commit"": ""c6ef231f397e428367e831f2dc078c4d83dc237c"", ""head_commit"": ""8aa47fda2618f752d255947b4bdda093e11ffce5"", ""repo_url"": ""https://github.com/apache/skywalking/pull/12937"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/12937"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-08T04:53:34.000Z"", ""patch"": ""diff --git a/docs/en/api/metrics-query-expression.md b/docs/en/api/metrics-query-expression.md\nindex 28e28f367ddd..1446368fa707 100644\n--- a/docs/en/api/metrics-query-expression.md\n+++ b/docs/en/api/metrics-query-expression.md\n@@ -217,6 +217,7 @@ round(service_cpm / 60 , 2)\n The different operators could impact the `ExpressionResultType`, please refer to the above table.\n \n ## TopN Operation\n+### TopN Query\n TopN Operation takes an expression and performs calculation to get the TopN of Services/Instances/Endpoints.\n The result depends on the `entity` condition in the query.\n - Global TopN: \n@@ -264,6 +265,25 @@ top_n(service_instance_cpm, 10, des)\n ### Result Type\n According to the type of the metric, the `ExpressionResultType` of the expression will be `SORTED_LIST` or `RECORD_LIST`.\n \n+### Multiple TopNs Merging\n+As the difference between agent and ebpf, some metrics would be separated, e.g. service cpm and k8s service cpm.\n+If you want to merge the topN results of these metrics, you can use the `ton_n_of` operation to merge the results. \n+\n+expression:\n+```text\n+ton_n_of(<top_n>, <top_n>, ...,<top_number>, <order>)\n+```\n+\n+- `<top_n>` is the [topN](#topn-query) expression. The result type of those tonN expression should be same, can be `SORTED_LIST` or `RECORD_LIST`, `but can not be mixed`.\n+- `<top_number>` is the number of the merged top results, should be a positive integer. \n+- `<order>` is the order of the merged top results. The value of `<order>` can be `asc` or `des`.\n+\n+for example:\n+If we want to get the top 10 services with the highest `service_cpm` and `k8s_service_cpm`, we can use the following expression:\n+```text\n+ton_n_of(top_n(service_cpm, 10, des), top_n(k8s_service_cpm, 10, des), 10, des)\n+```\n+\n ## Relabel Operation\n Relabel Operation takes an expression and replaces the label with new label on its results.\n Since v10.0.0, SkyWalking supports relabel multiple labels.\n\ndiff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 3001b77ee150..ea5ee772b09d 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -53,6 +53,7 @@\n * Add `bydb.dependencies.properties` config file to define server dependency versions.\n * Fix `AvgHistogramPercentileFunction` doesn't have proper field definition for `ranks`.\n * BanyanDB: Support the new Property data module.\n+* MQE: Support `top_n_of` function for merging multiple metrics topn query.\n \n #### UI\n \n\ndiff --git a/oap-server/mqe-grammar/src/main/antlr4/org/apache/skywalking/mqe/rt/grammar/MQELexer.g4 b/oap-server/mqe-grammar/src/main/antlr4/org/apache/skywalking/mqe/rt/grammar/MQELexer.g4\nindex 0ea98355b1f4..dbea0ce0bf0d 100644\n--- a/oap-server/mqe-grammar/src/main/antlr4/org/apache/skywalking/mqe/rt/grammar/MQELexer.g4\n+++ b/oap-server/mqe-grammar/src/main/antlr4/org/apache/skywalking/mqe/rt/grammar/MQELexer.g4\n@@ -64,6 +64,7 @@ RATE:        'rate';\n \n // TopN\n TOP_N:        'top_n';\n+TOP_N_OF:     'top_n_of';\n \n // ViewAsSeq\n VIEW_AS_SEQ: 'view_as_seq';\n\ndiff --git a/oap-server/mqe-grammar/src/main/antlr4/org/apache/skywalking/mqe/rt/grammar/MQEParser.g4 b/oap-server/mqe-grammar/src/main/antlr4/org/apache/skywalking/mqe/rt/grammar/MQEParser.g4\nindex d85edcde4062..d1a23a2bd502 100644\n--- a/oap-server/mqe-grammar/src/main/antlr4/org/apache/skywalking/mqe/rt/grammar/MQEParser.g4\n+++ b/oap-server/mqe-grammar/src/main/antlr4/org/apache/skywalking/mqe/rt/grammar/MQEParser.g4\n@@ -33,7 +33,8 @@ expression\n     | mathematical_operator1 L_PAREN expression COMMA parameter R_PAREN #mathematicalOperator1OP\n     | trend L_PAREN metric COMMA INTEGER R_PAREN #trendOP\n     | logical_operator L_PAREN expressionList R_PAREN #logicalOperatorOP\n-    | topN L_PAREN metric COMMA INTEGER COMMA order (COMMA attributeList)? R_PAREN  #topNOP\n+    | topN                                                                          #topNOP\n+    | topNOf L_PAREN topN (COMMA topN)* COMMA INTEGER COMMA order R_PAREN           #topNOfOP\n     | relabels L_PAREN expression COMMA label COMMA replaceLabel R_PAREN #relablesOP\n     | aggregateLabels L_PAREN expression COMMA aggregateLabelsFunc R_PAREN #aggregateLabelsOp\n     | sort_values L_PAREN expression (COMMA INTEGER)? COMMA order R_PAREN #sortValuesOP\n@@ -75,7 +76,8 @@ mathematical_operator1:\n trend:\n     INCREASE | RATE;\n \n-topN: TOP_N;\n+topN: TOP_N L_PAREN metric COMMA INTEGER COMMA order (COMMA attributeList)? R_PAREN;\n+topNOf: TOP_N_OF;\n \n logical_operator:\n     VIEW_AS_SEQ | IS_PRESENT;\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/MQEVisitorBase.java b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/MQEVisitorBase.java\nindex fcc41dc19474..d15cb11943e5 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/MQEVisitorBase.java\n+++ b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/MQEVisitorBase.java\n@@ -34,6 +34,7 @@\n import org.apache.skywalking.mqe.rt.operation.MathematicalFunctionOp;\n import org.apache.skywalking.mqe.rt.operation.SortLabelValuesOp;\n import org.apache.skywalking.mqe.rt.operation.SortValuesOp;\n+import org.apache.skywalking.mqe.rt.operation.TopNOfOp;\n import org.apache.skywalking.mqe.rt.operation.TrendOp;\n import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n@@ -240,7 +241,27 @@ public ExpressionResult visitTopNOP(MQEParser.TopNOPContext ctx) {\n         DebuggingTraceContext traceContext = TRACE_CONTEXT.get();\n         DebuggingSpan span = traceContext.createSpan(\""MQE TopN OP: \"" + ctx.getText());\n         try {\n-            return visit(ctx.metric());\n+            return visit(ctx.topN().metric());\n+        } finally {\n+            traceContext.stopSpan(span);\n+        }\n+    }\n+\n+    @Override\n+    public ExpressionResult visitTopNOfOP(MQEParser.TopNOfOPContext ctx) {\n+        DebuggingTraceContext traceContext = TRACE_CONTEXT.get();\n+        DebuggingSpan span = traceContext.createSpan(\""MQE TopNOf OP: \"" + ctx.getText());\n+        try {\n+            List<MQEParser.TopNContext> topNContexts = ctx.topN();\n+            List<ExpressionResult> topNResults = new ArrayList<>();\n+            for (MQEParser.TopNContext topNContext : topNContexts) {\n+                topNResults.add(visit(topNContext.metric()));\n+            }\n+            try {\n+                return TopNOfOp.doMergeTopNResult(topNResults, Integer.parseInt(ctx.INTEGER().getText()), ctx.order().getStart().getType());\n+            } catch (IllegalExpressionException e) {\n+                return getErrorResult(e.getMessage());\n+            }\n         } finally {\n             traceContext.stopSpan(span);\n         }\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/TopNOfOp.java b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/TopNOfOp.java\nnew file mode 100644\nindex 000000000000..478e6cbdaedb\n--- /dev/null\n+++ b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/TopNOfOp.java\n@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.mqe.rt.operation;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n+import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValue;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n+import org.apache.skywalking.oap.server.library.util.StringUtil;\n+\n+public class TopNOfOp {\n+    public static ExpressionResult doMergeTopNResult(List<ExpressionResult> topNResults,\n+                                                     int limit,\n+                                                     int order) throws IllegalExpressionException {\n+        ExpressionResultType type = null;\n+        List<MQEValue> allValues = new ArrayList<>();\n+        for (ExpressionResult topNResult : topNResults) {\n+            if (StringUtil.isNotEmpty(topNResult.getError())) {\n+                return topNResult;\n+            }\n+            // check the type of topNResults\n+            if (type != null && type != topNResult.getType()) {\n+                throw new IllegalExpressionException(\""TopN type is not consistent, one is \"" + type + \"", another is \"" +\n+                                                          topNResult.getType());\n+            }\n+            type = topNResult.getType();\n+            // topN result should have values without label\n+            allValues.addAll(topNResult.getResults().get(0).getValues());\n+        }\n+        if (limit > allValues.size()) {\n+            limit = allValues.size();\n+        }\n+        List<MQEValue> mergedValues = allValues.stream()\n+                                               // Filter out empty values\n+                                               .filter(mqeValue -> !mqeValue.isEmptyValue())\n+                                               .sorted(MQEParser.ASC == order ? Comparator.comparingDouble(\n+                                                   MQEValue::getDoubleValue) :\n+                                                           Comparator.comparingDouble(MQEValue::getDoubleValue)\n+                                                                     .reversed())\n+                                               .limit(limit).collect(Collectors.toList());\n+\n+        ExpressionResult result = new ExpressionResult();\n+        MQEValues mqeValues = new MQEValues();\n+        mqeValues.setValues(mergedValues);\n+        result.getResults().add(mqeValues);\n+        result.setType(type);\n+        return result;\n+    }\n+}\n\ndiff --git a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/mqe/rt/MQEVisitor.java b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/mqe/rt/MQEVisitor.java\nindex ed7290e905d0..0d09ecf0e1bb 100644\n--- a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/mqe/rt/MQEVisitor.java\n+++ b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/mqe/rt/MQEVisitor.java\n@@ -124,8 +124,8 @@ public ExpressionResult visitMetric(MQEParser.MetricContext ctx) {\n             Column.ValueDataType dataType = valueColumn.get().getDataType();\n             try {\n                 if (Column.ValueDataType.COMMON_VALUE == dataType) {\n-                    if (ctx.parent instanceof MQEParser.TopNOPContext) {\n-                        MQEParser.TopNOPContext parent = (MQEParser.TopNOPContext) ctx.parent;\n+                    if (ctx.parent instanceof MQEParser.TopNContext) {\n+                        MQEParser.TopNContext parent = (MQEParser.TopNContext) ctx.parent;\n                         int topN = Integer.parseInt(parent.INTEGER().getText());\n                         if (topN <= 0) {\n                             throw new IllegalExpressionException(\""TopN value must be > 0.\"");\n@@ -170,8 +170,8 @@ public ExpressionResult visitMetric(MQEParser.MetricContext ctx) {\n                         queryLabeledMetrics(metricName, queryLabels, this.duration, result);\n                     }\n                 } else if (Column.ValueDataType.SAMPLED_RECORD == dataType) {\n-                    if (ctx.parent instanceof MQEParser.TopNOPContext) {\n-                        MQEParser.TopNOPContext parent = (MQEParser.TopNOPContext) ctx.parent;\n+                    if (ctx.parent instanceof MQEParser.TopNContext) {\n+                        MQEParser.TopNContext parent = (MQEParser.TopNContext) ctx.parent;\n                         int topN = Integer.parseInt(parent.INTEGER().getText());\n                         if (topN <= 0) {\n                             throw new IllegalExpressionException(\""TopN value must be > 0.\"");\n"", ""test_patch"": ""diff --git a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/TopNOfOpTest.java b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/TopNOfOpTest.java\nnew file mode 100644\nindex 000000000000..ec5c77fe0528\n--- /dev/null\n+++ b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/TopNOfOpTest.java\n@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.mqe.rt;\n+\n+import java.util.List;\n+import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n+import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n+import org.apache.skywalking.mqe.rt.operation.TopNOfOp;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+public class TopNOfOpTest {\n+\n+    @Test\n+    public void mergeTopNResultTest() throws IllegalExpressionException {\n+        MockData mockData = new MockData();\n+        List<ExpressionResult> topNResults = List.of(\n+            mockData.newListResult(1000, 100),\n+            mockData.newListResult(600, 500),\n+            mockData.newListResult(300, 2000)\n+        );\n+        ExpressionResult topNResult = TopNOfOp.doMergeTopNResult(topNResults, 2, MQEParser.DES);\n+        Assertions.assertEquals(ExpressionResultType.SORTED_LIST, topNResult.getType());\n+        Assertions.assertEquals(2, topNResult.getResults().get(0).getValues().size());\n+        Assertions.assertEquals(2000, topNResult.getResults().get(0).getValues().get(0).getDoubleValue());\n+        Assertions.assertEquals(\""service_B\"", topNResult.getResults().get(0).getValues().get(0).getId());\n+        Assertions.assertEquals(1000, topNResult.getResults().get(0).getValues().get(1).getDoubleValue());\n+        Assertions.assertEquals(\""service_A\"", topNResult.getResults().get(0).getValues().get(1).getId());\n+\n+        ExpressionResult topNResultAsc = TopNOfOp.doMergeTopNResult(topNResults, 8, MQEParser.ASC);\n+        Assertions.assertEquals(6, topNResultAsc.getResults().get(0).getValues().size());\n+        Assertions.assertEquals(100, topNResultAsc.getResults().get(0).getValues().get(0).getDoubleValue());\n+        Assertions.assertEquals(\""service_B\"", topNResultAsc.getResults().get(0).getValues().get(0).getId());\n+        Assertions.assertEquals(2000, topNResultAsc.getResults().get(0).getValues().get(5).getDoubleValue());\n+        Assertions.assertEquals(\""service_B\"", topNResultAsc.getResults().get(0).getValues().get(5).getId());\n+        topNResults.get(2).setType(ExpressionResultType.RECORD_LIST);\n+        Assertions.assertThrows(IllegalExpressionException.class, () -> {\n+            TopNOfOp.doMergeTopNResult(topNResults, 2, MQEParser.DES);\n+        });\n+    }\n+}\n\ndiff --git a/test/e2e-v2/cases/mqe/mqe-cases.yaml b/test/e2e-v2/cases/mqe/mqe-cases.yaml\nindex 0805f2f34b0e..53a231ad5082 100644\n--- a/test/e2e-v2/cases/mqe/mqe-cases.yaml\n+++ b/test/e2e-v2/cases/mqe/mqe-cases.yaml\n@@ -45,10 +45,13 @@ cases:\n   - query: swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql metrics exec --expression=\""top_n(service_resp_time,3,des,attr0!='Not_GENERAL')/100\""\n     expected: expected/topN-OP-service.yml\n \n-  # topN-OP-isntance\n+  # topN-OP-instance\n   - query: swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql metrics exec --expression=\""top_n(service_instance_resp_time,3,des)/100\"" --service-name=e2e-service-provider\n     expected: expected/topN-OP-instance.yml\n \n+  # topN-Of-OP\n+  - query: swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql metrics exec --expression=\""top_n_of(top_n(service_resp_time,3,des,attr0='GENERAL'), top_n(service_cpm,3,des,attr0='GENERAL'), 2, des)\""\n+    expected: expected/topN-OP-service.yml\n   # select labels and relabels\n   - query: swctl --display yaml --base-url=http://${oap_host}:${oap_12800}/graphql metrics exec --expression=\""relabels(relabels(service_percentile{p='50,75,90'},p='50,75',p='P50,P75'),p='90',p='P90')\"" --service-name=e2e-service-provider\n     expected: expected/relabels-OP.yml\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-12910"", ""pr_id"": 12910, ""issue_id"": 12859, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] Rich context alarm message\n### Search before asking\n\n- [X] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nSkyWalking has support MQE in the alarm setting. Right now, we forward the triggered alarm to the notifications, but lack of the context of metrics' values in the windows.\n\n### Use case\n\nWe need the context of metrics' values because the values in the database are always the latest, but they can be different when the alarting kernel was checking the in-memory time windows.\r\nWe should consider forwarding all values in the alarm kernel context.\n\n### Related issues\n\nFurther, alarm UI should also support to visualize this part. @wankai123 @Fine0830 Right now, we don't have UI dashboard configuration for those metrics in the alarm rules, so, the values showing up could be unfriendly to the end users.\r\nWe should consider to add more configurations to the alarm list page, and config the value of showing graphs for the metrics in the alarm context, which will be newly added in here.\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [X] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 228, ""test_files_count"": 10, ""non_test_files_count"": 40, ""pr_changed_files"": [""docs/en/changes/changes.md"", ""oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/MQEVisitorBase.java"", ""oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/AggregateLabelsOp.java"", ""oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/AggregationOp.java"", ""oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/BinaryOp.java"", ""oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/CompareOp.java"", ""oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/LROp.java"", ""oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/LogicalFunctionOp.java"", ""oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/MathematicalFunctionOp.java"", ""oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/SortLabelValuesOp.java"", ""oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/SortValuesOp.java"", ""oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/TrendOp.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregateLabelsOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregationOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/BinaryOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/CompareOPTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/LogicalFunctionOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/MathematicalFunctionOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/MockData.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/SortLabelValuesOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/SortValuesOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/TrendOpTest.java"", ""oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRule.java"", ""oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcher.java"", ""oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java"", ""oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expr/rt/AlarmMQEVerifyVisitor.java"", ""oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expr/rt/AlarmMQEVisitor.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmMessage.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmSnapshotRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmStandardPersistence.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/ExpressionResult.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/ExpressionResultType.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/MQEMetric.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/MQEValue.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/MQEValues.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/Metadata.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmMessage.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmSnapshot.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmTrend.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IAlarmQueryDAO.java"", ""oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/mqe/rt/MQEVisitor.java"", ""oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java"", ""oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricsExpressionQuery.java"", ""oap-server/server-query-plugin/query-graphql-plugin/src/main/resources/query-protocol"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/mqe/DebuggingMQERsp.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAlarmQueryDAO.java"", ""oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AlarmQueryEsDAO.java"", ""oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCAlarmQueryDAO.java""], ""pr_changed_test_files"": [""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregateLabelsOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregationOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/BinaryOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/CompareOPTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/LogicalFunctionOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/MathematicalFunctionOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/MockData.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/SortLabelValuesOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/SortValuesOpTest.java"", ""oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/TrendOpTest.java""], ""base_commit"": ""f8f5fa5206083ff06077b58d186b990376812e47"", ""head_commit"": ""0fa4540ac180efdaf838767589eb57fa3c12a21d"", ""repo_url"": ""https://github.com/apache/skywalking/pull/12910"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/12910"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-30T02:57:00.000Z"", ""patch"": ""diff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 5e1e11e593bf..5d171cf08ef4 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -44,6 +44,8 @@\n * Add protection for dynamic config change propagate chain.\n * Add Ruby component IDs.\n * Add component ID(160) for Caffeine.\n+* Alarm: Support store and query the metrics snapshot when the alarm is triggered.\n+* Alarm: Remove unused `Alarm Trend` query.\n \n #### UI\n \n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/MQEVisitorBase.java b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/MQEVisitorBase.java\nindex 2f9a4fafb08a..fcc41dc19474 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/MQEVisitorBase.java\n+++ b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/MQEVisitorBase.java\n@@ -35,11 +35,11 @@\n import org.apache.skywalking.mqe.rt.operation.SortLabelValuesOp;\n import org.apache.skywalking.mqe.rt.operation.SortValuesOp;\n import org.apache.skywalking.mqe.rt.operation.TrendOp;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n-import org.apache.skywalking.mqe.rt.type.MQEValue;\n-import org.apache.skywalking.mqe.rt.type.MQEValues;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValue;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n import org.apache.skywalking.oap.server.core.Const;\n import org.apache.skywalking.oap.server.core.query.enumeration.Step;\n import org.apache.skywalking.oap.server.core.query.type.KeyValue;\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/AggregateLabelsOp.java b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/AggregateLabelsOp.java\nindex e9b8144142c3..2567982e8917 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/AggregateLabelsOp.java\n+++ b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/AggregateLabelsOp.java\n@@ -22,9 +22,9 @@\n import java.util.List;\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.MQEValue;\n-import org.apache.skywalking.mqe.rt.type.MQEValues;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValue;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n import org.apache.skywalking.mqe.rt.operation.aggregatelabels.AggregateLabelsFunc;\n import org.apache.skywalking.mqe.rt.operation.aggregatelabels.AggregateLabelsFuncFactory;\n import org.apache.skywalking.mqe.rt.operation.aggregatelabels.AvgAggregateLabelsFunc;\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/AggregationOp.java b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/AggregationOp.java\nindex aa034c27bf3d..b02487fb7b09 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/AggregationOp.java\n+++ b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/AggregationOp.java\n@@ -27,11 +27,11 @@\n import java.util.function.Function;\n import java.util.stream.DoubleStream;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n-import org.apache.skywalking.mqe.rt.type.MQEValue;\n-import org.apache.skywalking.mqe.rt.type.MQEValues;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValue;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n \n public class AggregationOp {\n     public static ExpressionResult doAggregationOp(ExpressionResult result,\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/BinaryOp.java b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/BinaryOp.java\nindex 0c84aaf98391..cf114286474a 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/BinaryOp.java\n+++ b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/BinaryOp.java\n@@ -20,7 +20,7 @@\n \n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n \n public class BinaryOp {\n     public static ExpressionResult doBinaryOp(ExpressionResult left,\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/CompareOp.java b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/CompareOp.java\nindex 030f3174fde8..b1e8ef6fb97d 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/CompareOp.java\n+++ b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/CompareOp.java\n@@ -20,7 +20,7 @@\n \n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n \n public class CompareOp {\n     public static ExpressionResult doCompareOP(ExpressionResult left,\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/LROp.java b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/LROp.java\nindex 4254b59898aa..3dfc489d9c14 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/LROp.java\n+++ b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/LROp.java\n@@ -24,10 +24,10 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n-import org.apache.skywalking.mqe.rt.type.MQEValue;\n-import org.apache.skywalking.mqe.rt.type.MQEValues;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValue;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n import org.apache.skywalking.oap.server.core.query.type.KeyValue;\n \n @FunctionalInterface\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/LogicalFunctionOp.java b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/LogicalFunctionOp.java\nindex 912e6cf9256e..eedd93fab78b 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/LogicalFunctionOp.java\n+++ b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/LogicalFunctionOp.java\n@@ -21,10 +21,10 @@\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n import org.apache.skywalking.mqe.rt.grammar.MQEParserBaseVisitor;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n-import org.apache.skywalking.mqe.rt.type.MQEValue;\n-import org.apache.skywalking.mqe.rt.type.MQEValues;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValue;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n import org.apache.skywalking.oap.server.library.util.CollectionUtils;\n \n import java.util.Objects;\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/MathematicalFunctionOp.java b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/MathematicalFunctionOp.java\nindex 12e28a83d2f5..bd467e2654e4 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/MathematicalFunctionOp.java\n+++ b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/MathematicalFunctionOp.java\n@@ -23,7 +23,7 @@\n import java.util.function.Function;\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n \n public class MathematicalFunctionOp {\n     public static ExpressionResult doFunction0Op(ExpressionResult expResult,\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/SortLabelValuesOp.java b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/SortLabelValuesOp.java\nindex 828e5e84a55e..97c09fb85f41 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/SortLabelValuesOp.java\n+++ b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/SortLabelValuesOp.java\n@@ -25,8 +25,8 @@\n import lombok.extern.slf4j.Slf4j;\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.MQEValues;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n import org.apache.skywalking.oap.server.core.query.type.KeyValue;\n import org.apache.skywalking.oap.server.library.util.CollectionUtils;\n \n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/SortValuesOp.java b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/SortValuesOp.java\nindex 44053555f994..e6dc6baecf11 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/SortValuesOp.java\n+++ b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/SortValuesOp.java\n@@ -24,8 +24,8 @@\n import java.util.stream.Collectors;\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.MQEValue;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValue;\n \n public class SortValuesOp {\n     public static ExpressionResult doSortValuesOp(ExpressionResult expResult,\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/TrendOp.java b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/TrendOp.java\nindex 60c0887be363..ec5bfc4abbf4 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/TrendOp.java\n+++ b/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/operation/TrendOp.java\n@@ -22,8 +22,8 @@\n import java.util.List;\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.MQEValue;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValue;\n import org.apache.skywalking.oap.server.core.query.enumeration.Step;\n \n public class TrendOp {\n\ndiff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRule.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRule.java\nindex ab8b3643813b..1e7da460ff1c 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRule.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRule.java\n@@ -35,8 +35,8 @@\n import org.apache.skywalking.mqe.rt.exception.ParseErrorListener;\n import org.apache.skywalking.mqe.rt.grammar.MQELexer;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n import org.apache.skywalking.oap.server.core.alarm.provider.expr.rt.AlarmMQEVerifyVisitor;\n import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext;\n import org.apache.skywalking.oap.server.core.storage.annotation.ValueColumnMetadata;\n\ndiff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcher.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcher.java\nindex 07a30d5ce79d..9bf584899742 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcher.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcher.java\n@@ -131,7 +131,7 @@ public void notify(Rules newRules) {\n         this.runningContext = newRunningContext;\n         this.alarmRuleRunningRuleMap = newAlarmRuleRunningRuleMap;\n         this.exprMetricsMap = newExprMetricsMap;\n-        log.info(\""Update alarm rules to {}\"", rules);\n+        log.debug(\""Update alarm rules to {}\"", rules);\n     }\n \n     @Override\n\ndiff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java\nindex f7dc2b89efec..aa3de66d7d25 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java\n@@ -18,6 +18,7 @@\n \n package org.apache.skywalking.oap.server.core.alarm.provider;\n \n+import com.google.gson.JsonObject;\n import java.util.ArrayList;\n import java.util.Comparator;\n import java.util.HashMap;\n@@ -39,9 +40,9 @@\n import org.apache.skywalking.mqe.rt.exception.ParseErrorListener;\n import org.apache.skywalking.mqe.rt.grammar.MQELexer;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n-import org.apache.skywalking.mqe.rt.type.MQEValues;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n import org.apache.skywalking.oap.server.core.alarm.provider.expr.rt.AlarmMQEVisitor;\n import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTraceContext;\n import org.apache.skywalking.oap.server.library.util.StringUtil;\n@@ -224,6 +225,8 @@ public List<AlarmMessage> check() {\n                 alarmMessage.setPeriod(this.period);\n                 alarmMessage.setTags(this.tags);\n                 alarmMessage.setHooks(this.hooks);\n+                alarmMessage.setExpression(expression);\n+                alarmMessage.setMqeMetricsSnapshot(window.mqeMetricsSnapshot);\n                 alarmMessageList.add(alarmMessage);\n             }\n         });\n@@ -243,6 +246,7 @@ public class Window {\n         private int silenceCountdown;\n         private LinkedList<Map<String, Metrics>> values;\n         private ReentrantLock lock = new ReentrantLock();\n+        private JsonObject mqeMetricsSnapshot;\n \n         public Window(int period, int additionalPeriod) {\n             this.additionalPeriod = additionalPeriod;\n@@ -395,6 +399,7 @@ private boolean isMatch() {\n                 if (log.isTraceEnabled()) {\n                     log.trace(\""Match expression is {}\"", expression);\n                 }\n+                this.mqeMetricsSnapshot = visitor.getMqeMetricsSnapshot();\n                 return isMatch == 1;\n             } finally {\n                 TRACE_CONTEXT.remove();\n\ndiff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expr/rt/AlarmMQEVerifyVisitor.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expr/rt/AlarmMQEVerifyVisitor.java\nindex df4989949abe..e9482c4e6fe4 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expr/rt/AlarmMQEVerifyVisitor.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expr/rt/AlarmMQEVerifyVisitor.java\n@@ -25,10 +25,10 @@\n import lombok.extern.slf4j.Slf4j;\n import org.apache.skywalking.mqe.rt.MQEVisitorBase;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n-import org.apache.skywalking.mqe.rt.type.MQEValue;\n-import org.apache.skywalking.mqe.rt.type.MQEValues;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValue;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n import org.apache.skywalking.oap.server.core.query.enumeration.Step;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n import org.apache.skywalking.oap.server.core.storage.annotation.ValueColumnMetadata;\n\ndiff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expr/rt/AlarmMQEVisitor.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expr/rt/AlarmMQEVisitor.java\nindex ed8c82b3b61c..3b8f07b1643c 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expr/rt/AlarmMQEVisitor.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expr/rt/AlarmMQEVisitor.java\n@@ -18,6 +18,8 @@\n \n package org.apache.skywalking.oap.server.core.alarm.provider.expr.rt;\n \n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n import java.util.ArrayList;\n import java.util.Comparator;\n import java.util.HashMap;\n@@ -25,12 +27,13 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n-import org.apache.skywalking.mqe.rt.type.MQEValue;\n-import org.apache.skywalking.mqe.rt.type.MQEValues;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValue;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n import org.apache.skywalking.oap.server.core.analysis.metrics.DataLabel;\n import org.apache.skywalking.oap.server.core.analysis.metrics.DataTable;\n import org.apache.skywalking.oap.server.core.analysis.metrics.DoubleValueHolder;\n@@ -57,6 +60,12 @@ public class AlarmMQEVisitor extends MQEVisitorBase {\n     private final LocalDateTime endTime;\n     private final ArrayList<String> windowTimes;\n     private final int maxTrendRange;\n+    /**\n+     * The snapshot of metrics values.\n+     */\n+    @Getter\n+    private final JsonObject mqeMetricsSnapshot;\n+    private final static Gson GSON = new Gson();\n \n     public AlarmMQEVisitor(final LinkedList<Map<String, Metrics>> metricsValues,\n                            final LocalDateTime endTime,\n@@ -69,6 +78,7 @@ public AlarmMQEVisitor(final LinkedList<Map<String, Metrics>> metricsValues,\n         this.windowSize = metricsValues.size();\n         this.windowTimes = initWindowTimes();\n         this.maxTrendRange = maxTrendRange;\n+        this.mqeMetricsSnapshot = new JsonObject();\n         this.initMetricsValues();\n     }\n \n@@ -119,6 +129,7 @@ public ExpressionResult visitMetric(MQEParser.MetricContext ctx) {\n         }\n         result.setResults(mqeValuesList);\n         result.setType(ExpressionResultType.TIME_SERIES_VALUES);\n+        this.mqeMetricsSnapshot.addProperty(metricName, GSON.toJson(mqeValuesList));\n         return result;\n     }\n \n@@ -222,13 +233,13 @@ private List<MQEValues> buildLabledMqeValuesList(Map<String, DataTable> timeValu\n                 } else {\n                     mqeValue.setEmptyValue(true);\n                 }\n-                DataLabel dataLabel = new DataLabel();\n-                dataLabel.put(labelCondition);\n-                for (Map.Entry<String, String> label : dataLabel.entrySet()) {\n-                    mqeValues.getMetric().getLabels().add(new KeyValue(label.getKey(), label.getValue()));\n-                }\n                 mqeValues.getValues().add(mqeValue);\n             }\n+            DataLabel dataLabel = new DataLabel();\n+            dataLabel.put(labelCondition);\n+            for (Map.Entry<String, String> label : dataLabel.entrySet()) {\n+                mqeValues.getMetric().getLabels().add(new KeyValue(label.getKey(), label.getValue()));\n+            }\n             //Sort labels by key in natural order by default\n             mqeValues.getMetric().sortLabelsByKey(Comparator.naturalOrder());\n             mqeValuesList.add(mqeValues);\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmMessage.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmMessage.java\nindex a2e25e2e42fd..e644eb93062b 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmMessage.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmMessage.java\n@@ -18,12 +18,12 @@\n \n package org.apache.skywalking.oap.server.core.alarm;\n \n+import com.google.gson.JsonObject;\n import java.util.HashSet;\n import java.util.Set;\n import lombok.Getter;\n import lombok.Setter;\n import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;\n-\n import java.util.List;\n \n /**\n@@ -43,4 +43,6 @@ public class AlarmMessage {\n     private long startTime;\n     private transient int period;\n     private Set<String> hooks = new HashSet<>();\n+    private String expression;\n+    private JsonObject mqeMetricsSnapshot;\n }\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java\nindex a79a0b44ed3a..c15c3afb7e64 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java\n@@ -18,6 +18,7 @@\n \n package org.apache.skywalking.oap.server.core.alarm;\n \n+import com.google.gson.Gson;\n import lombok.Getter;\n import lombok.Setter;\n import org.apache.skywalking.oap.server.core.analysis.Stream;\n@@ -34,9 +35,7 @@\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n-\n import java.util.List;\n-\n import static org.apache.skywalking.oap.server.core.storage.StorageData.TIME_BUCKET;\n import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ALARM;\n \n@@ -47,7 +46,7 @@\n @SQLDatabase.ExtraColumn4AdditionalEntity(additionalTable = AlarmRecord.ADDITIONAL_TAG_TABLE, parentColumn = TIME_BUCKET)\n @BanyanDB.TimestampColumn(AlarmRecord.START_TIME)\n public class AlarmRecord extends Record {\n-\n+    private static final Gson GSON = new Gson();\n     public static final String INDEX_NAME = \""alarm_record\"";\n     public static final String ADDITIONAL_TAG_TABLE = \""alarm_record_tag\"";\n     public static final String SCOPE = \""scope\"";\n@@ -59,6 +58,7 @@ public class AlarmRecord extends Record {\n     public static final String RULE_NAME = \""rule_name\"";\n     public static final String TAGS = \""tags\"";\n     public static final String TAGS_RAW_DATA = \""tags_raw_data\"";\n+    public static final String SNAPSHOT = \""snapshot\"";\n \n     @Override\n     public StorageID id() {\n@@ -92,6 +92,8 @@ public StorageID id() {\n     private List<String> tagsInString;\n     @Column(name = TAGS_RAW_DATA, storageOnly = true, length = Tag.TAG_LENGTH)\n     private byte[] tagsRawData;\n+    @Column(name = SNAPSHOT, storageOnly = true, length = 50000)\n+    private String snapshot;\n \n     public static class Builder implements StorageBuilder<AlarmRecord> {\n         @Override\n@@ -106,6 +108,7 @@ public AlarmRecord storage2Entity(final Convert2Entity converter) {\n             record.setTimeBucket(((Number) converter.get(TIME_BUCKET)).longValue());\n             record.setRuleName((String) converter.get(RULE_NAME));\n             record.setTagsRawData(converter.getBytes(TAGS_RAW_DATA));\n+            record.setSnapshot((String) converter.get(SNAPSHOT));\n             // Don't read the TAGS as they are only for query.\n             return record;\n         }\n@@ -122,6 +125,7 @@ public void entity2Storage(final AlarmRecord storageData, final Convert2Storage\n             converter.accept(RULE_NAME, storageData.getRuleName());\n             converter.accept(TAGS_RAW_DATA, storageData.getTagsRawData());\n             converter.accept(TAGS, storageData.getTagsInString());\n+            converter.accept(SNAPSHOT, storageData.getSnapshot());\n         }\n     }\n }\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmSnapshotRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmSnapshotRecord.java\nnew file mode 100644\nindex 000000000000..f09a6551c900\n--- /dev/null\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmSnapshotRecord.java\n@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \""License\""); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \""AS IS\"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm;\n+\n+import com.google.gson.JsonObject;\n+import lombok.Data;\n+\n+@Data\n+public class AlarmSnapshotRecord {\n+    private String expression;\n+    private JsonObject metrics;\n+}\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmStandardPersistence.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmStandardPersistence.java\nindex 0e1b17fd8925..3851ba81a0ed 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmStandardPersistence.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmStandardPersistence.java\n@@ -31,7 +31,6 @@\n import org.apache.skywalking.oap.server.library.module.ModuleManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n@@ -71,6 +70,10 @@ public void doAlarm(List<AlarmMessage> alarmMessage) {\n             addAutocompleteTags(tags, TimeBucket.getMinuteTimeBucket(message.getStartTime()));\n             record.setTagsRawData(gson.toJson(message.getTags()).getBytes(Charsets.UTF_8));\n             record.setTagsInString(Tag.Util.toStringList(new ArrayList<>(tags)));\n+            AlarmSnapshotRecord snapshot = new AlarmSnapshotRecord();\n+            snapshot.setExpression(message.getExpression());\n+            snapshot.setMetrics(message.getMqeMetricsSnapshot());\n+            record.setSnapshot(gson.toJson(snapshot));\n             RecordStreamProcessor.getInstance().in(record);\n         });\n     }\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/ExpressionResult.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/ExpressionResult.java\nsimilarity index 95%\nrename from oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/ExpressionResult.java\nrename to oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/ExpressionResult.java\nindex 350e1fd7fe34..92b0fd26cd9e 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/ExpressionResult.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/ExpressionResult.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package org.apache.skywalking.mqe.rt.type;\n+package org.apache.skywalking.oap.server.core.query.mqe;\n \n import java.util.ArrayList;\n import java.util.List;\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/ExpressionResultType.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/ExpressionResultType.java\nsimilarity index 95%\nrename from oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/ExpressionResultType.java\nrename to oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/ExpressionResultType.java\nindex cb72e903cacf..1d4d478ea65f 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/ExpressionResultType.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/ExpressionResultType.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package org.apache.skywalking.mqe.rt.type;\n+package org.apache.skywalking.oap.server.core.query.mqe;\n \n public enum ExpressionResultType {\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/MQEMetric.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/MQEMetric.java\nnew file mode 100644\nindex 000000000000..1b52ce8805ef\n--- /dev/null\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/MQEMetric.java\n@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \""License\""); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \""AS IS\"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.query.mqe;\n+\n+import java.util.List;\n+import lombok.Data;\n+\n+@Data\n+public class MQEMetric {\n+    private String name;\n+    private List<MQEValues> results;\n+}\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/MQEValue.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/MQEValue.java\nsimilarity index 95%\nrename from oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/MQEValue.java\nrename to oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/MQEValue.java\nindex 2147323bb355..a3acbfe5423c 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/MQEValue.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/MQEValue.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package org.apache.skywalking.mqe.rt.type;\n+package org.apache.skywalking.oap.server.core.query.mqe;\n \n import lombok.Data;\n import org.apache.skywalking.oap.server.core.query.type.Owner;\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/MQEValues.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/MQEValues.java\nsimilarity index 94%\nrename from oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/MQEValues.java\nrename to oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/MQEValues.java\nindex b98ed487f7e4..7c234994122f 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/MQEValues.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/MQEValues.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package org.apache.skywalking.mqe.rt.type;\n+package org.apache.skywalking.oap.server.core.query.mqe;\n \n import java.util.ArrayList;\n import java.util.List;\n\ndiff --git a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/Metadata.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/Metadata.java\nsimilarity index 95%\nrename from oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/Metadata.java\nrename to oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/Metadata.java\nindex 49592646cc5f..c1be33a0efc2 100644\n--- a/oap-server/mqe-rt/src/main/java/org/apache/skywalking/mqe/rt/type/Metadata.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/mqe/Metadata.java\n@@ -17,7 +17,7 @@\n  * under the License.\n  */\n \n-package org.apache.skywalking.mqe.rt.type;\n+package org.apache.skywalking.oap.server.core.query.mqe;\n \n import java.util.ArrayList;\n import java.util.Comparator;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmMessage.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmMessage.java\nindex 8608c86ef023..7ff8e5306ccd 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmMessage.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmMessage.java\n@@ -32,11 +32,13 @@ public class AlarmMessage {\n     private Scope scope;\n     private int scopeId;\n     private String id;\n+    private String name;\n     private String message;\n     private Long startTime;\n     private transient String id1;\n     private final List<KeyValue> tags;\n     private List<Event> events = new ArrayList<>(2);\n+    private AlarmSnapshot snapshot = new AlarmSnapshot();\n \n     public AlarmMessage() {\n         tags = new ArrayList<>();\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmSnapshot.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmSnapshot.java\nnew file mode 100644\nindex 000000000000..841df9f6c538\n--- /dev/null\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmSnapshot.java\n@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \""License\""); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \""AS IS\"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.query.type;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.Data;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEMetric;\n+\n+@Data\n+public class AlarmSnapshot {\n+    private String expression;\n+    private List<MQEMetric> metrics = new ArrayList<>();\n+}\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmTrend.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmTrend.java\ndeleted file mode 100644\nindex b0c27fdb476f..000000000000\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/AlarmTrend.java\n+++ /dev/null\n@@ -1,33 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \""License\""); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \""AS IS\"" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.core.query.type;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import lombok.Getter;\n-\n-@Getter\n-public class AlarmTrend {\n-\n-    private final List<Integer> numOfAlarm;\n-\n-    public AlarmTrend() {\n-        this.numOfAlarm = new ArrayList<>();\n-    }\n-}\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IAlarmQueryDAO.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IAlarmQueryDAO.java\nindex 6f61226a5b2a..f59fb1cd1564 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IAlarmQueryDAO.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IAlarmQueryDAO.java\n@@ -18,6 +18,7 @@\n \n package org.apache.skywalking.oap.server.core.storage.query;\n \n+import com.google.gson.JsonObject;\n import java.io.IOException;\n import java.util.Base64;\n import java.util.List;\n@@ -25,11 +26,19 @@\n import com.google.common.base.Charsets;\n import com.google.gson.Gson;\n import com.google.gson.reflect.TypeToken;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmRecord;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmSnapshotRecord;\n import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;\n+import org.apache.skywalking.oap.server.core.query.enumeration.Scope;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEMetric;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n+import org.apache.skywalking.oap.server.core.query.type.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.query.type.AlarmSnapshot;\n import org.apache.skywalking.oap.server.core.query.type.Alarms;\n import org.apache.skywalking.oap.server.core.query.type.KeyValue;\n import org.apache.skywalking.oap.server.core.storage.DAO;\n+import org.apache.skywalking.oap.server.library.util.StringUtil;\n \n public interface IAlarmQueryDAO extends DAO {\n \n@@ -39,18 +48,54 @@ Alarms getAlarm(final Integer scopeId, final String keyword, final int limit, fi\n                     final Duration duration, final List<Tag> tags) throws IOException;\n \n     /**\n-     * Parser the raw tags.\n+     * Parse the raw tags.\n      */\n-    default void parserDataBinaryBase64(String dataBinaryBase64, List<KeyValue> tags) {\n-        parserDataBinary(Base64.getDecoder().decode(dataBinaryBase64), tags);\n+    default void parseDataBinaryBase64(String dataBinaryBase64, List<KeyValue> tags) {\n+        parseDataBinary(Base64.getDecoder().decode(dataBinaryBase64), tags);\n     }\n \n     /**\n-     * Parser the raw tags.\n+     * Parse the raw tags.\n      */\n-    default void parserDataBinary(byte[] dataBinary, List<KeyValue> tags) {\n+    default void parseDataBinary(byte[] dataBinary, List<KeyValue> tags) {\n         List<Tag> tagList = GSON.fromJson(new String(dataBinary, Charsets.UTF_8), new TypeToken<List<Tag>>() {\n         }.getType());\n         tagList.forEach(pair -> tags.add(new KeyValue(pair.getKey(), pair.getValue())));\n     }\n+\n+    /**\n+     * Build the alarm message from the alarm record.\n+     * The Tags in JDBC storage is base64 encoded, need to decode in different way.\n+     */\n+    default AlarmMessage buildAlarmMessage(AlarmRecord alarmRecord) {\n+        AlarmMessage message = new AlarmMessage();\n+        message.setId(String.valueOf(alarmRecord.getId0()));\n+        message.setId1(String.valueOf(alarmRecord.getId1()));\n+        message.setName(alarmRecord.getName());\n+        message.setMessage(alarmRecord.getAlarmMessage());\n+        message.setStartTime(alarmRecord.getStartTime());\n+        message.setScope(Scope.Finder.valueOf(alarmRecord.getScope()));\n+        message.setScopeId(alarmRecord.getScope());\n+        AlarmSnapshot alarmSnapshot = message.getSnapshot();\n+        message.setSnapshot(alarmSnapshot);\n+        String snapshot = alarmRecord.getSnapshot();\n+        if (StringUtil.isNotBlank(snapshot)) {\n+            AlarmSnapshotRecord alarmSnapshotRecord = GSON.fromJson(snapshot, AlarmSnapshotRecord.class);\n+            alarmSnapshot.setExpression(alarmSnapshotRecord.getExpression());\n+            JsonObject jsonObject = alarmSnapshotRecord.getMetrics();\n+            if (jsonObject != null) {\n+                for (final var obj : jsonObject.entrySet()) {\n+                    final var name = obj.getKey();\n+                    MQEMetric metrics = new MQEMetric();\n+                    metrics.setName(name);\n+                    List<MQEValues> values = GSON.fromJson(\n+                        obj.getValue().getAsString(), new TypeToken<List<MQEValues>>() {\n+                        }.getType());\n+                    metrics.setResults(values);\n+                    alarmSnapshot.getMetrics().add(metrics);\n+                }\n+            }\n+        }\n+        return message;\n+    }\n }\n\ndiff --git a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/mqe/rt/MQEVisitor.java b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/mqe/rt/MQEVisitor.java\nindex b2b5c79226cd..ed7290e905d0 100644\n--- a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/mqe/rt/MQEVisitor.java\n+++ b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/mqe/rt/MQEVisitor.java\n@@ -27,8 +27,8 @@\n import lombok.extern.slf4j.Slf4j;\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n-import org.apache.skywalking.mqe.rt.type.MQEValue;\n-import org.apache.skywalking.mqe.rt.type.MQEValues;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValue;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n import org.apache.skywalking.oap.server.core.CoreModule;\n import org.apache.skywalking.oap.server.core.analysis.metrics.DataLabel;\n import org.apache.skywalking.oap.server.core.query.AggregationQueryService;\n@@ -54,8 +54,8 @@\n import org.apache.skywalking.oap.server.core.storage.annotation.ValueColumnMetadata;\n import org.apache.skywalking.oap.server.library.module.ModuleManager;\n import org.apache.skywalking.mqe.rt.MQEVisitorBase;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n import org.apache.skywalking.oap.server.library.util.StringUtil;\n import org.joda.time.DateTime;\n \n\ndiff --git a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java\nindex ab7815d55103..3cf1dc4ba422 100644\n--- a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java\n+++ b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/AlarmQuery.java\n@@ -20,6 +20,7 @@\n \n import graphql.kickstart.tools.GraphQLQueryResolver;\n import graphql.schema.DataFetchingEnvironment;\n+import java.text.DecimalFormat;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n@@ -38,7 +39,6 @@\n import org.apache.skywalking.oap.server.core.query.enumeration.Scope;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.query.type.AlarmMessage;\n-import org.apache.skywalking.oap.server.core.query.type.AlarmTrend;\n import org.apache.skywalking.oap.server.core.query.type.Alarms;\n import org.apache.skywalking.oap.server.core.query.type.Pagination;\n import org.apache.skywalking.oap.server.core.query.type.event.Event;\n@@ -64,8 +64,11 @@ public class AlarmQuery implements GraphQLQueryResolver {\n \n     private TagAutoCompleteQueryService tagQueryService;\n \n+    private final DecimalFormat valueFormat = new DecimalFormat();\n+\n     public AlarmQuery(ModuleManager moduleManager) {\n         this.moduleManager = moduleManager;\n+        this.valueFormat.setGroupingUsed(false);\n     }\n \n     private AlarmQueryService getQueryService() {\n@@ -89,10 +92,6 @@ private TagAutoCompleteQueryService getTagQueryService() {\n         return tagQueryService;\n     }\n \n-    public AlarmTrend getAlarmTrend(final Duration duration) {\n-        return new AlarmTrend();\n-    }\n-\n     public CompletableFuture<Alarms> getAlarm(final Duration duration, final Scope scope, final String keyword,\n                            final Pagination paging, final List<Tag> tags,\n                            final DataFetchingEnvironment env) {\n@@ -110,6 +109,18 @@ public CompletableFuture<Alarms> getAlarm(final Duration duration, final Scope s\n             Alarms alarms = getQueryService().getAlarm(\n                 scopeId, keyword, paging, duration, tags);\n \n+            alarms.getMsgs().forEach(msg -> {\n+                msg.getSnapshot().getMetrics().forEach(metric -> {\n+                    metric.getResults().forEach(mqeValues -> {\n+                        mqeValues.getValues().forEach(mqeValue -> {\n+                            if (!mqeValue.isEmptyValue()) {\n+                                mqeValue.setValue(valueFormat.format(mqeValue.getDoubleValue()));\n+                            }\n+                        });\n+                    });\n+                });\n+            });\n+\n             final boolean selectEvents = env.getSelectionSet().contains(\""**/events/**\"");\n \n             if (selectEvents) {\n\ndiff --git a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricsExpressionQuery.java b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricsExpressionQuery.java\nindex bef4329ba679..43af2986dba5 100644\n--- a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricsExpressionQuery.java\n+++ b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricsExpressionQuery.java\n@@ -27,8 +27,8 @@\n import org.antlr.v4.runtime.tree.ParseTree;\n import org.apache.skywalking.oap.query.graphql.mqe.rt.MQEVisitor;\n import org.apache.skywalking.mqe.rt.exception.ParseErrorListener;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n import org.apache.skywalking.oap.server.core.query.input.Entity;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.query.type.debugging.DebuggingTrace;\n\ndiff --git a/oap-server/server-query-plugin/query-graphql-plugin/src/main/resources/query-protocol b/oap-server/server-query-plugin/query-graphql-plugin/src/main/resources/query-protocol\nindex 092856bdfefd..a9ed9eef09cf 160000\n--- a/oap-server/server-query-plugin/query-graphql-plugin/src/main/resources/query-protocol\n+++ b/oap-server/server-query-plugin/query-graphql-plugin/src/main/resources/query-protocol\n@@ -1 +1 @@\n-Subproject commit 092856bdfefd2353d134efade62c6421b4ef4854\n+Subproject commit a9ed9eef09cf97256df9a33eab91fca1ba13096e\n\ndiff --git a/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java\nindex 564f7c4354b9..c0025fdb8aa3 100644\n--- a/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java\n+++ b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java\n@@ -38,7 +38,7 @@\n import java.util.stream.Collectors;\n import lombok.SneakyThrows;\n import lombok.extern.slf4j.Slf4j;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n import org.apache.skywalking.oap.query.debug.log.DebuggingQueryLogsRsp;\n import org.apache.skywalking.oap.query.debug.mqe.DebuggingMQERsp;\n import org.apache.skywalking.oap.query.debug.topology.DebuggingQueryEndpointTopologyRsp;\n\ndiff --git a/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/mqe/DebuggingMQERsp.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/mqe/DebuggingMQERsp.java\nindex c9d09d4b22b5..cafa1752b2b8 100644\n--- a/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/mqe/DebuggingMQERsp.java\n+++ b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/mqe/DebuggingMQERsp.java\n@@ -21,8 +21,8 @@\n import java.util.List;\n import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n-import org.apache.skywalking.mqe.rt.type.MQEValues;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n import org.apache.skywalking.oap.query.debug.DebuggingTraceRsp;\n \n @RequiredArgsConstructor\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAlarmQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAlarmQueryDAO.java\nindex 2b5d15932ef9..00b1a85ac3b6 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAlarmQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/BanyanDBAlarmQueryDAO.java\n@@ -26,7 +26,6 @@\n import org.apache.skywalking.oap.server.core.alarm.AlarmRecord;\n import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;\n-import org.apache.skywalking.oap.server.core.query.enumeration.Scope;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.query.type.AlarmMessage;\n import org.apache.skywalking.oap.server.core.query.type.Alarms;\n@@ -49,7 +48,7 @@\n public class BanyanDBAlarmQueryDAO extends AbstractBanyanDBDAO implements IAlarmQueryDAO {\n     private static final Set<String> TAGS = ImmutableSet.of(AlarmRecord.SCOPE,\n             AlarmRecord.NAME, AlarmRecord.ID0, AlarmRecord.ID1, AlarmRecord.ALARM_MESSAGE, AlarmRecord.START_TIME,\n-            AlarmRecord.RULE_NAME, AlarmRecord.TAGS, AlarmRecord.TAGS_RAW_DATA);\n+            AlarmRecord.RULE_NAME, AlarmRecord.TAGS, AlarmRecord.TAGS_RAW_DATA, AlarmRecord.SNAPSHOT);\n \n     public BanyanDBAlarmQueryDAO(BanyanDBStorageClient client) {\n         super(client);\n@@ -95,18 +94,11 @@ public void apply(StreamQuery query) {\n             AlarmRecord alarmRecord = builder.storage2Entity(\n                     new BanyanDBConverter.StorageToStream(AlarmRecord.INDEX_NAME, rowEntity)\n             );\n-\n-            AlarmMessage message = new AlarmMessage();\n-            message.setId(String.valueOf(alarmRecord.getId0()));\n-            message.setId1(String.valueOf(alarmRecord.getId1()));\n-            message.setMessage(alarmRecord.getAlarmMessage());\n-            message.setStartTime(alarmRecord.getStartTime());\n-            message.setScope(Scope.Finder.valueOf(alarmRecord.getScope()));\n-            message.setScopeId(alarmRecord.getScope());\n+            AlarmMessage alarmMessage = buildAlarmMessage(alarmRecord);\n             if (!CollectionUtils.isEmpty(alarmRecord.getTagsRawData())) {\n-                parserDataBinary(alarmRecord.getTagsRawData(), message.getTags());\n+                parseDataBinary(alarmRecord.getTagsRawData(), alarmMessage.getTags());\n             }\n-            alarms.getMsgs().add(message);\n+            alarms.getMsgs().add(alarmMessage);\n         }\n         return alarms;\n     }\n\ndiff --git a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AlarmQueryEsDAO.java b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AlarmQueryEsDAO.java\nindex bd41f769ef1c..03b2f9eb6087 100644\n--- a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AlarmQueryEsDAO.java\n+++ b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/AlarmQueryEsDAO.java\n@@ -31,7 +31,6 @@\n import org.apache.skywalking.library.elasticsearch.response.search.SearchResponse;\n import org.apache.skywalking.oap.server.core.alarm.AlarmRecord;\n import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;\n-import org.apache.skywalking.oap.server.core.query.enumeration.Scope;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.query.type.AlarmMessage;\n import org.apache.skywalking.oap.server.core.query.type.Alarms;\n@@ -93,18 +92,11 @@ public Alarms getAlarm(final Integer scopeId, final String keyword, final int li\n         for (SearchHit searchHit : response.getHits().getHits()) {\n             AlarmRecord.Builder builder = new AlarmRecord.Builder();\n             AlarmRecord alarmRecord = builder.storage2Entity(new ElasticSearchConverter.ToEntity(AlarmRecord.INDEX_NAME, searchHit.getSource()));\n-\n-            AlarmMessage message = new AlarmMessage();\n-            message.setId(String.valueOf(alarmRecord.getId0()));\n-            message.setId1(String.valueOf(alarmRecord.getId1()));\n-            message.setMessage(alarmRecord.getAlarmMessage());\n-            message.setStartTime(alarmRecord.getStartTime());\n-            message.setScope(Scope.Finder.valueOf(alarmRecord.getScope()));\n-            message.setScopeId(alarmRecord.getScope());\n+            AlarmMessage alarmMessage = buildAlarmMessage(alarmRecord);\n             if (!CollectionUtils.isEmpty(alarmRecord.getTagsRawData())) {\n-                parserDataBinary(alarmRecord.getTagsRawData(), message.getTags());\n+                parseDataBinary(alarmRecord.getTagsRawData(), alarmMessage.getTags());\n             }\n-            alarms.getMsgs().add(message);\n+            alarms.getMsgs().add(alarmMessage);\n         }\n         return alarms;\n     }\n\ndiff --git a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCAlarmQueryDAO.java b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCAlarmQueryDAO.java\nindex 588f393af144..42aa3622aea4 100644\n--- a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCAlarmQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/dao/JDBCAlarmQueryDAO.java\n@@ -18,6 +18,7 @@\n \n package org.apache.skywalking.oap.server.storage.plugin.jdbc.common.dao;\n \n+import com.google.common.base.Charsets;\n import com.google.common.base.Strings;\n import lombok.RequiredArgsConstructor;\n import lombok.SneakyThrows;\n@@ -27,7 +28,6 @@\n import org.apache.skywalking.oap.server.core.alarm.AlarmRecord;\n import org.apache.skywalking.oap.server.core.analysis.manual.searchtag.Tag;\n import org.apache.skywalking.oap.server.core.config.ConfigService;\n-import org.apache.skywalking.oap.server.core.query.enumeration.Scope;\n import org.apache.skywalking.oap.server.core.query.input.Duration;\n import org.apache.skywalking.oap.server.core.query.type.AlarmMessage;\n import org.apache.skywalking.oap.server.core.query.type.Alarms;\n@@ -35,6 +35,7 @@\n import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCClient;\n import org.apache.skywalking.oap.server.library.module.ModuleManager;\n import org.apache.skywalking.oap.server.library.util.CollectionUtils;\n+import org.apache.skywalking.oap.server.storage.plugin.jdbc.common.JDBCEntityConverters;\n import org.apache.skywalking.oap.server.storage.plugin.jdbc.common.JDBCTableInstaller;\n import org.apache.skywalking.oap.server.storage.plugin.jdbc.common.SQLAndParameters;\n import org.apache.skywalking.oap.server.storage.plugin.jdbc.common.TableHelper;\n@@ -88,18 +89,14 @@ public Alarms getAlarm(Integer scopeId, String keyword, int limit, int from,\n             final var sqlAndParameters = buildSQL(scopeId, keyword, limit, from, duration, tags, table);\n             jdbcClient.executeQuery(sqlAndParameters.sql(), resultSet -> {\n                 while (resultSet.next()) {\n-                    final var message = new AlarmMessage();\n-                    message.setId(resultSet.getString(AlarmRecord.ID0));\n-                    message.setId1(resultSet.getString(AlarmRecord.ID1));\n-                    message.setMessage(resultSet.getString(AlarmRecord.ALARM_MESSAGE));\n-                    message.setStartTime(resultSet.getLong(AlarmRecord.START_TIME));\n-                    message.setScope(Scope.Finder.valueOf(resultSet.getInt(AlarmRecord.SCOPE)));\n-                    message.setScopeId(resultSet.getInt(AlarmRecord.SCOPE));\n-                    String dataBinaryBase64 = resultSet.getString(AlarmRecord.TAGS_RAW_DATA);\n-                    if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n-                        parserDataBinaryBase64(dataBinaryBase64, message.getTags());\n+                    AlarmRecord.Builder builder = new AlarmRecord.Builder();\n+                    AlarmRecord alarmRecord = builder.storage2Entity(JDBCEntityConverters.toEntity(resultSet));\n+                    AlarmMessage alarmMessage = buildAlarmMessage(alarmRecord);\n+                    if (!CollectionUtils.isEmpty(alarmRecord.getTagsRawData())) {\n+                        parseDataBinaryBase64(\n+                            new String(alarmRecord.getTagsRawData(), Charsets.UTF_8), alarmMessage.getTags());\n                     }\n-                    alarmMsgs.add(message);\n+                    alarmMsgs.add(alarmMessage);\n                 }\n                 return null;\n             }, sqlAndParameters.parameters());\n"", ""test_patch"": ""diff --git a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregateLabelsOpTest.java b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregateLabelsOpTest.java\nindex 690cc4ee22ac..429eae818197 100644\n--- a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregateLabelsOpTest.java\n+++ b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregateLabelsOpTest.java\n@@ -22,8 +22,8 @@\n import java.util.List;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n import org.apache.skywalking.mqe.rt.operation.AggregateLabelsOp;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n\ndiff --git a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregationOpTest.java b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregationOpTest.java\nindex a0fd9f80fb1c..e56042630700 100644\n--- a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregationOpTest.java\n+++ b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/AggregationOpTest.java\n@@ -20,8 +20,8 @@\n \n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n import org.apache.skywalking.mqe.rt.operation.AggregationOp;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n\ndiff --git a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/BinaryOpTest.java b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/BinaryOpTest.java\nindex ea5e3d56f349..30bbb63a043b 100644\n--- a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/BinaryOpTest.java\n+++ b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/BinaryOpTest.java\n@@ -21,8 +21,8 @@\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n import org.apache.skywalking.mqe.rt.operation.BinaryOp;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n\ndiff --git a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/CompareOPTest.java b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/CompareOPTest.java\nindex b112cd9ce10d..d25643363390 100644\n--- a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/CompareOPTest.java\n+++ b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/CompareOPTest.java\n@@ -21,8 +21,8 @@\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n import org.apache.skywalking.mqe.rt.operation.CompareOp;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n\ndiff --git a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/LogicalFunctionOpTest.java b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/LogicalFunctionOpTest.java\nindex e174afe2bfe9..88dceeda4d02 100644\n--- a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/LogicalFunctionOpTest.java\n+++ b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/LogicalFunctionOpTest.java\n@@ -21,7 +21,7 @@\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n import org.apache.skywalking.mqe.rt.grammar.MQEParserBaseVisitor;\n import org.apache.skywalking.mqe.rt.operation.LogicalFunctionOp;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.Mockito;\n\ndiff --git a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/MathematicalFunctionOpTest.java b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/MathematicalFunctionOpTest.java\nindex e63f6a96801d..6986b9d15ad3 100644\n--- a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/MathematicalFunctionOpTest.java\n+++ b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/MathematicalFunctionOpTest.java\n@@ -20,8 +20,8 @@\n \n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n import org.apache.skywalking.mqe.rt.operation.MathematicalFunctionOp;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n\ndiff --git a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/MockData.java b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/MockData.java\nindex ff25c1e9974c..941f8a9cc8e4 100644\n--- a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/MockData.java\n+++ b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/MockData.java\n@@ -18,11 +18,11 @@\n \n package org.apache.skywalking.mqe.rt;\n \n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n-import org.apache.skywalking.mqe.rt.type.MQEValue;\n-import org.apache.skywalking.mqe.rt.type.MQEValues;\n-import org.apache.skywalking.mqe.rt.type.Metadata;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValue;\n+import org.apache.skywalking.oap.server.core.query.mqe.MQEValues;\n+import org.apache.skywalking.oap.server.core.query.mqe.Metadata;\n import org.apache.skywalking.oap.server.core.query.type.KeyValue;\n \n public class MockData {\n\ndiff --git a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/SortLabelValuesOpTest.java b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/SortLabelValuesOpTest.java\nindex 61ab428bccec..fcba56142564 100644\n--- a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/SortLabelValuesOpTest.java\n+++ b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/SortLabelValuesOpTest.java\n@@ -22,7 +22,7 @@\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n import org.apache.skywalking.mqe.rt.operation.SortLabelValuesOp;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n\ndiff --git a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/SortValuesOpTest.java b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/SortValuesOpTest.java\nindex fd964b266650..0360f09fbe66 100644\n--- a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/SortValuesOpTest.java\n+++ b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/SortValuesOpTest.java\n@@ -22,7 +22,7 @@\n import org.apache.skywalking.mqe.rt.exception.IllegalExpressionException;\n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n import org.apache.skywalking.mqe.rt.operation.SortValuesOp;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n\ndiff --git a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/TrendOpTest.java b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/TrendOpTest.java\nindex 3c5514123837..eb8c7b337801 100644\n--- a/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/TrendOpTest.java\n+++ b/oap-server/mqe-rt/src/test/java/org/apache/skywalking/mqe/rt/TrendOpTest.java\n@@ -20,8 +20,8 @@\n \n import org.apache.skywalking.mqe.rt.grammar.MQEParser;\n import org.apache.skywalking.mqe.rt.operation.TrendOp;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResult;\n-import org.apache.skywalking.mqe.rt.type.ExpressionResultType;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResult;\n+import org.apache.skywalking.oap.server.core.query.mqe.ExpressionResultType;\n import org.apache.skywalking.oap.server.core.query.enumeration.Step;\n import org.junit.jupiter.api.Test;\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-12879"", ""pr_id"": 12879, ""issue_id"": 12871, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Bug] [BanyanDB] Write data error after updated Group schema\n### Search before asking\n\n- [X] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar issues.\n\n\n### Apache SkyWalking Component\n\nBanyanDB (apache/skywalking-banyandb)\n\n### What happened\n\nWhen after updated Group schema to: \r\n```\r\n    gmMinuteShardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_SHARD_NUM:3}\r\n    gmMinuteSIDays: ${SW_STORAGE_BANYANDB_GM_MINUTE_SI_DAYS:2}\r\n    gmMinuteTTLDays: ${SW_STORAGE_BANYANDB_GM_MINUTE_TTL_DAYS:10}\r\n```\r\nOAP can't write new measure data into the DB and read old data, throw errors:\r\n```\r\n2024-12-17 08:39:43,716 org.apache.skywalking.banyandb.v1.client.MeasureBulkWriteProcessor 93 [grpc-default-executor-0] ERROR [] - [10.2.0-SNAPSHOT-3223a2c] Error occurs in flushing measures\r\nio.grpc.StatusRuntimeException: INTERNAL: directory is exist\r\n\tat io.grpc.Status.asRuntimeException(Status.java:532) ~[grpc-api-1.68.1.jar:1.68.1]\r\n\tat io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter.onClose(ClientCalls.java:481) [grpc-stub-1.68.1.jar:1.68.1]\r\n\tat io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:39) [grpc-api-1.68.1.jar:1.68.1]\r\n\tat io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23) [grpc-api-1.68.1.jar:1.68.1]\r\n\tat io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40) [grpc-api-1.68.1.jar:1.68.1]\r\n\tat org.apache.skywalking.banyandb.v1.client.grpc.channel.ChannelManager$NetworkExceptionAwareClientCall$1.onClose(ChannelManager.java:211) [banyandb-java-client-0.8.0-rc0.jar:0.8.0-rc0]\r\n\tat io.grpc.internal.ClientCallImpl.closeObserver(ClientCallImpl.java:564) [grpc-core-1.68.1.jar:1.68.1]\r\n\tat io.grpc.internal.ClientCallImpl.access$100(ClientCallImpl.java:72) [grpc-core-1.68.1.jar:1.68.1]\r\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInternal(ClientCallImpl.java:729) [grpc-core-1.68.1.jar:1.68.1]\r\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInContext(ClientCallImpl.java:710) [grpc-core-1.68.1.jar:1.68.1]\r\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37) [grpc-core-1.68.1.jar:1.68.1]\r\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:133) [grpc-core-1.68.1.jar:1.68.1]\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]\r\n\tat java.lang.Thread.run(Thread.java:834) [?:?]\r\n```\r\n\r\nThe BanyanDB server also throw errors:\r\n```\r\n2024-12-17 08:37:20 {\""level\"":\""error\"",\""module\"":\""METRIC-SERVICE.SCHEDULER.METRICS-COLLECTOR\"",\""name\"":\""metrics-collector\"",\""panic\"":\""invalid memory address or nil pointer dereference\"",\""stack\"":\""goroutine 3221 [running]:\\nruntime/debug.Stack()\\n\\t/opt/hostedtoolcache/go/1.23.3/x64/src/runtime/debug/stack.go:26 +0x5e\\ngithub.com/apache/skywalking-banyandb/pkg/timestamp.(*task).run.func1.1()\\n\\t/home/runner/work/skywalking-banyandb/skywalking-banyandb/pkg/timestamp/scheduler.go:203 +0xd3\\npanic({0x14812e0?, 0x26f8fe0?})\\n\\t/opt/hostedtoolcache/go/1.23.3/x64/src/runtime/panic.go:785 +0x132\\ngithub.com/apache/skywalking-banyandb/banyand/measure.(*snapshot).decRef(0xc00335c700?)\\n\\t/home/runner/work/skywalking-banyandb/skywalking-banyandb/banyand/measure/snapshot.go:73 +0x17\\npanic({0x14812e0?, 0x26f8fe0?})\\n\\t/opt/hostedtoolcache/go/1.23.3/x64/src/runtime/panic.go:785 +0x132\\ngithub.com/apache/skywalking-banyandb/banyand/measure.(*tsTable).Collect(0xc0000aaee0, {0x1b42ca0?, 0xc000b13800})\\n\\t/home/runner/work/skywalking-banyandb/skywalking-banyandb/banyand/measure/metrics.go:300 +0x9a\\ngithub.com/apache/skywalking-banyandb/banyand/internal/storage.(*database[...]).collect(0x1b76e80)\\n\\t/home/runner/work/skywalking-banyandb/skywalking-banyandb/banyand/internal/storage/tsdb.go:163 +0x2ea\\ngithub.com/apache/skywalking-banyandb/banyand/observability.(*Collector).collect(0x2?)\\n\\t/home/runner/work/skywalking-banyandb/skywalking-banyandb/banyand/observability/collector.go:56 +0xd4\\ngithub.com/apache/skywalking-banyandb/banyand/observability.(*metricService).Serve.func1({0xc004ea9810?, 0xc003556070?, 0xc004ea9810?}, 0xc0054b5f00?)\\n\\t/home/runner/work/skywalking-banyandb/skywalking-banyandb/banyand/observability/service.go:152 +0x2f\\ngithub.com/apache/skywalking-banyandb/pkg/timestamp.(*task).run.func1(0xc001848460, 0xc0054b5ec8)\\n\\t/home/runner/work/skywalking-banyandb/skywalking-banyandb/pkg/timestamp/scheduler.go:208 +0xaf\\ngithub.com/apache/skywalking-banyandb/pkg/timestamp.(*task).run(0xc001848460)\\n\\t/home/runner/work/skywalking-banyandb/skywalking-banyandb/pkg/timestamp/scheduler.go:209 +0x3f0\\ngithub.com/apache/skywalking-banyandb/pkg/timestamp.(*Scheduler).Register.func1()\\n\\t/home/runner/work/skywalking-banyandb/skywalking-banyandb/pkg/timestamp/scheduler.go:98 +0x47\\ncreated by github.com/apache/skywalking-banyandb/pkg/timestamp.(*Scheduler).Register in goroutine 3204\\n\\t/home/runner/work/skywalking-banyandb/skywalking-banyandb/pkg/timestamp/scheduler.go:97 +0x5f1\\n\"",\""time\"":\""2024-12-17T00:37:20Z\"",\""message\"":\""panic\""}\r\n2024-12-17 08:37:33 {\""level\"":\""info\"",\""module\"":\""MEASURE\"",\""group\"":\""minute\"",\""time\"":\""2024-12-17T00:37:33Z\"",\""message\"":\""closing the previous tsdb\""}\r\n2024-12-17 08:37:33 {\""level\"":\""info\"",\""module\"":\""MINUTE.SCHEDULER.RETENTION\"",\""name\"":\""retention\"",\""time\"":\""2024-12-17T00:37:33Z\"",\""message\"":\""closed\""}\r\n2024-12-17 08:37:33 {\""level\"":\""info\"",\""module\"":\""MEASURE\"",\""group\"":\""minute\"",\""time\"":\""2024-12-17T00:37:33Z\"",\""message\"":\""creating a new tsdb\""}\r\n2024-12-17 08:37:33 {\""level\"":\""warn\"",\""module\"":\""MEASURE\"",\""err\"":{\""ExistingCollector\"":{},\""NewCollector\"":{}},\""time\"":\""2024-12-17T00:37:33Z\"",\""message\"":\""watching the events\""}\r\n2024-12-17 08:39:43 {\""level\"":\""panic\"",\""module\"":\""STORAGE.FILESYSTEM\"",\""path\"":\""/tmp/measure-data/measure/minute/seg-20241217\"",\""time\"":\""2024-12-17T00:39:43Z\"",\""message\"":\""directory is exist\""}\r\n```\n\n### What you expected to happen\n\nCan read and write data after updating Group schema.\n\n### How to reproduce\n\n1. Write measure data\r\n2. Update following  Group schema:\r\n```\r\n    gmMinuteShardNum: ${SW_STORAGE_BANYANDB_GM_MINUTE_SHARD_NUM:3}\r\n    gmMinuteSIDays: ${SW_STORAGE_BANYANDB_GM_MINUTE_SI_DAYS:2}\r\n    gmMinuteTTLDays: ${SW_STORAGE_BANYANDB_GM_MINUTE_TTL_DAYS:10}\r\n```\r\n3. Write/Read measure data\n\n### Anything else\n\n_No response_\n\n### Are you willing to submit a pull request to fix on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [X] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 940, ""test_files_count"": 1, ""non_test_files_count"": 1, ""pr_changed_files"": [""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java""], ""pr_changed_test_files"": [""oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java""], ""base_commit"": ""a3b563f325de9d6cb1c9eecfb5afb60e6a9a8194"", ""head_commit"": ""54bdca1c66b2976878dbe23c0aa7025bde442fbd"", ""repo_url"": ""https://github.com/apache/skywalking/pull/12879"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/12879"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-18T08:59:35.000Z"", ""patch"": ""diff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\nindex 0b3cad0463ff..12ad68f420dd 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\n@@ -52,8 +52,8 @@\n @Slf4j\n public class BanyanDBIndexInstaller extends ModelInstaller {\n     // BanyanDB group setting aligned with the OAP settings\n-    private static final Set<String/*group name*/> GROUP_ALIGNED = new HashSet<>();\n-    private static final Map<String/*group name*/, Map<String/*rule name*/, IndexRule>> GROUP_INDEX_RULES = new HashMap<>();\n+    private final Set<String/*group name*/> groupAligned = new HashSet<>();\n+    private final Map<String/*group name*/, Map<String/*rule name*/, IndexRule>> groupIndexRules = new HashMap<>();\n     private final BanyanDBStorageConfig config;\n \n     public BanyanDBIndexInstaller(Client client, ModuleManager moduleManager, BanyanDBStorageConfig config) {\n@@ -239,7 +239,7 @@ private boolean checkResourceExistence(MetadataRegistry.SchemaMetadata metadata,\n                 throw new IllegalStateException(\""unknown metadata kind: \"" + metadata.getKind());\n         }\n         if (!RunningMode.isNoInitMode()) {\n-            if (!GROUP_ALIGNED.contains(metadata.getGroup())) {\n+            if (!groupAligned.contains(metadata.getGroup())) {\n                 // create the group if not exist\n                 if (!resourceExist.hasGroup()) {\n                     try {\n@@ -262,7 +262,7 @@ private boolean checkResourceExistence(MetadataRegistry.SchemaMetadata metadata,\n                     }\n                 }\n                 // mark the group as aligned\n-                GROUP_ALIGNED.add(metadata.getGroup());\n+                groupAligned.add(metadata.getGroup());\n             }\n         }\n         return resourceExist.hasResource();\n@@ -317,7 +317,7 @@ private void checkIndexRuleConflicts(String modelName, IndexRule indexRule, Inde\n      * Otherwise, return false and mark the index rule as processed.\n      */\n     private boolean checkIndexRuleProcessed(String modelName, IndexRule indexRule) {\n-        Map<String, IndexRule> rules = GROUP_INDEX_RULES.computeIfAbsent(\n+        Map<String, IndexRule> rules = groupIndexRules.computeIfAbsent(\n             indexRule.getMetadata().getGroup(), k -> new HashMap<>());\n         IndexRule existRule = rules.get(indexRule.getMetadata().getName());\n         if (existRule != null) {\n@@ -457,7 +457,6 @@ private void checkIndexRules(String modelName, List<IndexRule> indexRules, Banya\n \n     /**\n      * Check if the index rule binding exists and update it if necessary.\n-     * If the old index rule is not in the index rule binding, delete it.\n      */\n     private void checkIndexRuleBinding(List<IndexRule> indexRules,\n                                        String group,\n"", ""test_patch"": ""diff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java\nnew file mode 100644\nindex 000000000000..c4764ac50cf2\n--- /dev/null\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIT.java\n@@ -0,0 +1,334 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.storage.plugin.banyandb;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Lists;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.banyandb.common.v1.BanyandbCommon;\n+import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase;\n+import org.apache.skywalking.banyandb.model.v1.BanyandbModel;\n+import org.apache.skywalking.banyandb.v1.client.MeasureBulkWriteProcessor;\n+import org.apache.skywalking.banyandb.v1.client.MeasureQuery;\n+import org.apache.skywalking.banyandb.v1.client.MeasureQueryResponse;\n+import org.apache.skywalking.banyandb.v1.client.MeasureWrite;\n+import org.apache.skywalking.banyandb.v1.client.TagAndValue;\n+import org.apache.skywalking.banyandb.v1.client.TimestampRange;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.DownSampling;\n+import org.apache.skywalking.oap.server.core.analysis.Stream;\n+import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;\n+import org.apache.skywalking.oap.server.core.config.DownSamplingConfigService;\n+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;\n+import org.apache.skywalking.oap.server.core.storage.StorageData;\n+import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Storage;\n+import org.apache.skywalking.oap.server.core.storage.model.Model;\n+import org.apache.skywalking.oap.server.core.storage.model.StorageModels;\n+import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n+import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n+import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.ModuleProviderHolder;\n+import org.apache.skywalking.oap.server.library.module.ModuleServiceHolder;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.MockedStatic;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n+import org.testcontainers.utility.DockerImageName;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockStatic;\n+import static org.mockito.Mockito.when;\n+import static org.testcontainers.shaded.org.awaitility.Awaitility.await;\n+\n+@Slf4j\n+@Testcontainers\n+public class BanyanDBIT {\n+    private static final String REGISTRY = \""ghcr.io\"";\n+    private static final String IMAGE_NAME = \""apache/skywalking-banyandb\"";\n+    private static final String TAG = \""5931e826d7f60449b353f2843362c745823d9d04\"";\n+\n+    private static final String IMAGE = REGISTRY + \""/\"" + IMAGE_NAME + \"":\"" + TAG;\n+    private static MockedStatic<DefaultScopeDefine> DEFAULT_SCOPE_DEFINE_MOCKED_STATIC;\n+    protected static final int GRPC_PORT = 17912;\n+    protected static final int HTTP_PORT = 17913;\n+\n+    @Container\n+    public GenericContainer<?> banyanDB = new GenericContainer<>(\n+        DockerImageName.parse(IMAGE))\n+        .withCommand(\""standalone\"", \""--stream-root-path\"", \""/tmp/banyandb-stream-data\"",\n+                     \""--measure-root-path\"", \""/tmp/banyand-measure-data\""\n+        )\n+        .withExposedPorts(GRPC_PORT, HTTP_PORT)\n+        .waitingFor(Wait.forHttp(\""/api/healthz\"").forPort(HTTP_PORT));\n+\n+    private BanyanDBStorageClient client;\n+    private BanyanDBStorageConfig config;\n+\n+    protected void setUpConnection() throws Exception {\n+        log.info(\""create BanyanDB client and try to connect\"");\n+        config = new BanyanDBStorageConfig();\n+        config.setTargets(banyanDB.getHost() + \"":\"" + banyanDB.getMappedPort(GRPC_PORT));\n+        client = new BanyanDBStorageClient(config);\n+        client.connect();\n+    }\n+\n+    private MeasureBulkWriteProcessor processor;\n+\n+    @BeforeEach\n+    public void setUp() throws Exception {\n+        DEFAULT_SCOPE_DEFINE_MOCKED_STATIC = mockStatic(DefaultScopeDefine.class);\n+        DEFAULT_SCOPE_DEFINE_MOCKED_STATIC.when(() -> DefaultScopeDefine.nameOf(1)).thenReturn(\""any\"");\n+        setUpConnection();\n+        processor = client.client.buildMeasureWriteProcessor(1000, 1, 1, 10);\n+    }\n+\n+    @Test\n+    public void testInstall() throws Exception {\n+        DownSamplingConfigService downSamplingConfigService = new DownSamplingConfigService(Arrays.asList(\""minute\""));\n+        ModuleManager moduleManager = mock(ModuleManager.class);\n+        ModuleProviderHolder moduleProviderHolder = mock(ModuleProviderHolder.class);\n+        ModuleServiceHolder moduleServiceHolder = mock(ModuleServiceHolder.class);\n+        when(moduleManager.find(CoreModule.NAME)).thenReturn(moduleProviderHolder);\n+        when(moduleProviderHolder.provider()).thenReturn(moduleServiceHolder);\n+        when(moduleServiceHolder.getService(DownSamplingConfigService.class)).thenReturn(downSamplingConfigService);\n+\n+        StorageModels models = new StorageModels();\n+        Model model = models.add(TestMetric.class, DefaultScopeDefine.SERVICE,\n+                                 new Storage(\""testMetric\"", true, DownSampling.Minute)\n+        );\n+        BanyanDBIndexInstaller installer = new BanyanDBIndexInstaller(client, moduleManager, config);\n+        installer.isExists(model);\n+        //test Group install\n+        BanyandbCommon.Group group = client.client.findGroup(DownSampling.Minute.getName());\n+        assertEquals(BanyandbCommon.Catalog.CATALOG_MEASURE, group.getCatalog());\n+        assertEquals(config.getGmMinuteSIDays(), group.getResourceOpts().getSegmentInterval().getNum());\n+        assertEquals(config.getGmMinuteShardNum(), group.getResourceOpts().getShardNum());\n+        assertEquals(BanyandbCommon.IntervalRule.Unit.UNIT_DAY, group.getResourceOpts().getSegmentInterval().getUnit());\n+        assertEquals(config.getGmMinuteTTLDays(), group.getResourceOpts().getTtl().getNum());\n+        assertEquals(BanyandbCommon.IntervalRule.Unit.UNIT_DAY, group.getResourceOpts().getTtl().getUnit());\n+\n+        installer.createTable(model);\n+        //test Measure install\n+        BanyandbDatabase.Measure measure = client.client.findMeasure(\""minute\"", \""testMetric_minute\"");\n+        assertEquals(\""default\"", measure.getTagFamilies(0).getName());\n+        assertEquals(\""tag\"", measure.getTagFamilies(0).getTags(0).getName());\n+        assertEquals(BanyandbDatabase.TagType.TAG_TYPE_STRING, measure.getTagFamilies(0).getTags(0).getType());\n+        assertEquals(\""storage-only\"", measure.getTagFamilies(1).getName());\n+        assertEquals(\""service_id\"", measure.getTagFamilies(1).getTags(0).getName());\n+        assertEquals(BanyandbDatabase.TagType.TAG_TYPE_STRING, measure.getTagFamilies(1).getTags(0).getType());\n+        assertEquals(\""service_id\"", measure.getEntity().getTagNames(0));\n+        assertEquals(\""value\"", measure.getFields(0).getName());\n+        assertEquals(BanyandbDatabase.FieldType.FIELD_TYPE_INT, measure.getFields(0).getFieldType());\n+        //test TopNAggregation install\n+        BanyandbDatabase.TopNAggregation topNAggregation = client.client.findTopNAggregation(\n+            \""minute\"", \""testMetric_minute_topn\"");\n+        assertEquals(\""value\"", topNAggregation.getFieldName());\n+        assertEquals(\""service_id\"", topNAggregation.getGroupByTagNames(0));\n+        assertEquals(BanyandbModel.Sort.SORT_UNSPECIFIED, topNAggregation.getFieldValueSort());\n+        assertEquals(2, topNAggregation.getLruSize());\n+        assertEquals(1000, topNAggregation.getCountersNumber());\n+        //test IndexRule install\n+        BanyandbDatabase.IndexRule indexRuleTag = client.client.findIndexRule(\""minute\"", \""tag\"");\n+        assertEquals(\""url\"", indexRuleTag.getAnalyzer());\n+        assertTrue(indexRuleTag.getNoSort());\n+        //test IndexRuleBinding install\n+        BanyandbDatabase.IndexRuleBinding indexRuleBinding = client.client.findIndexRuleBinding(\n+            \""minute\"", \""testMetric_minute\"");\n+        assertEquals(\""tag\"", indexRuleBinding.getRules(0));\n+        assertEquals(\""testMetric_minute\"", indexRuleBinding.getSubject().getName());\n+        //test data query\n+        Instant now = Instant.now();\n+        Instant begin = now.minus(15, ChronoUnit.MINUTES);\n+        MeasureWrite measureWrite = client.createMeasureWrite(\""minute\"", \""testMetric_minute\"", now.toEpochMilli());\n+        measureWrite.tag(\""service_id\"", TagAndValue.stringTagValue(\""service1\""))\n+                    .tag(\""tag\"", TagAndValue.stringTagValue(\""tag1\""))\n+                    .field(\""value\"", TagAndValue.longFieldValue(100));\n+        CompletableFuture<Void> f = processor.add(measureWrite);\n+        f.exceptionally(exp -> {\n+            Assertions.fail(exp.getMessage());\n+            return null;\n+        });\n+        f.get(10, TimeUnit.SECONDS);\n+\n+        MeasureQuery query = new MeasureQuery(Lists.newArrayList(\""minute\""), \""testMetric_minute\"",\n+                                              new TimestampRange(\n+                                                  begin.toEpochMilli(),\n+                                                  now.plus(1, ChronoUnit.MINUTES).toEpochMilli()\n+                                              ), ImmutableSet.of(\""service_id\"", \""tag\""),\n+                                              ImmutableSet.of(\""value\"")\n+        );\n+        await().atMost(10, TimeUnit.SECONDS).untilAsserted(() -> {\n+            MeasureQueryResponse resp = client.query(query);\n+            assertNotNull(resp);\n+            assertEquals(1, resp.getDataPoints().size());\n+            assertEquals(\""service1\"", resp.getDataPoints().get(0).getTagValue(\""service_id\""));\n+            assertEquals(\""tag1\"", resp.getDataPoints().get(0).getTagValue(\""tag\""));\n+            assertEquals(100, (Long) resp.getDataPoints().get(0).getFieldValue(\""value\""));\n+        });\n+\n+        Model updatedModel = models.add(UpdateTestMetric.class, DefaultScopeDefine.SERVICE,\n+                                        new Storage(\""testMetric\"", true, DownSampling.Minute)\n+        );\n+        config.setGmMinuteShardNum(config.getGmDayShardNum() + 1);\n+        config.setGmMinuteSIDays(config.getGmDaySIDays() + 2);\n+        config.setGmMinuteTTLDays(config.getGmDayTTLDays() + 3);\n+        BanyanDBIndexInstaller newInstaller = new BanyanDBIndexInstaller(client, moduleManager, config);\n+        newInstaller.isExists(updatedModel);\n+        //test Group update\n+        BanyandbCommon.Group updatedGroup = client.client.findGroup(DownSampling.Minute.getName());\n+        assertEquals(updatedGroup.getResourceOpts().getShardNum(), 2);\n+        assertEquals(updatedGroup.getResourceOpts().getSegmentInterval().getNum(), 3);\n+        assertEquals(updatedGroup.getResourceOpts().getTtl().getNum(), 33);\n+        //test Measure update\n+        BanyandbDatabase.Measure updatedMeasure = client.client.findMeasure(\""minute\"", \""testMetric_minute\"");\n+        assertEquals(\""default\"", updatedMeasure.getTagFamilies(0).getName());\n+        assertEquals(\""tag\"", updatedMeasure.getTagFamilies(0).getTags(0).getName());\n+        assertEquals(\""new_tag\"", updatedMeasure.getTagFamilies(0).getTags(1).getName());\n+        assertEquals(BanyandbDatabase.TagType.TAG_TYPE_STRING, updatedMeasure.getTagFamilies(0).getTags(0).getType());\n+        assertEquals(BanyandbDatabase.TagType.TAG_TYPE_STRING, updatedMeasure.getTagFamilies(0).getTags(1).getType());\n+        assertEquals(\""storage-only\"", updatedMeasure.getTagFamilies(1).getName());\n+        assertEquals(\""service_id\"", updatedMeasure.getTagFamilies(1).getTags(0).getName());\n+        assertEquals(BanyandbDatabase.TagType.TAG_TYPE_STRING, updatedMeasure.getTagFamilies(1).getTags(0).getType());\n+        assertEquals(\""service_id\"", updatedMeasure.getEntity().getTagNames(0));\n+        assertEquals(\""value\"", updatedMeasure.getFields(0).getName());\n+        assertEquals(BanyandbDatabase.FieldType.FIELD_TYPE_INT, updatedMeasure.getFields(0).getFieldType());\n+        assertEquals(\""new_value\"", updatedMeasure.getFields(1).getName());\n+        assertEquals(BanyandbDatabase.FieldType.FIELD_TYPE_INT, updatedMeasure.getFields(1).getFieldType());\n+        //test IndexRule update\n+        BanyandbDatabase.IndexRule updatedIndexRuleTag = client.client.findIndexRule(\""minute\"", \""tag\"");\n+        assertEquals(\""\"", updatedIndexRuleTag.getAnalyzer());\n+        assertFalse(updatedIndexRuleTag.getNoSort());\n+        BanyandbDatabase.IndexRule updatedIndexRuleNewTag = client.client.findIndexRule(\""minute\"", \""new_tag\"");\n+        assertTrue(updatedIndexRuleNewTag.getNoSort());\n+        //test IndexRuleBinding update\n+        BanyandbDatabase.IndexRuleBinding updatedIndexRuleBinding = client.client.findIndexRuleBinding(\n+            \""minute\"", \""testMetric_minute\"");\n+        assertEquals(\""tag\"", updatedIndexRuleBinding.getRules(0));\n+        assertEquals(\""new_tag\"", updatedIndexRuleBinding.getRules(1));\n+        assertEquals(\""testMetric_minute\"", updatedIndexRuleBinding.getSubject().getName());\n+        //test data\n+        client.client.updateMeasureMetadataCacheFromSever(\""minute\"", \""testMetric_minute\"");\n+        MeasureWrite updatedMeasureWrite = client.createMeasureWrite(\""minute\"", \""testMetric_minute\"", now.plus(10, ChronoUnit.MINUTES).toEpochMilli());\n+        updatedMeasureWrite.tag(\""service_id\"", TagAndValue.stringTagValue(\""service2\""))\n+                           .tag(\""tag\"", TagAndValue.stringTagValue(\""tag1\""))\n+                           .tag(\""new_tag\"", TagAndValue.stringTagValue(\""new_tag1\""))\n+                           .field(\""value\"", TagAndValue.longFieldValue(101))\n+                           .field(\""new_value\"", TagAndValue.longFieldValue(1000));\n+        CompletableFuture<Void> cf = processor.add(updatedMeasureWrite);\n+        cf.exceptionally(exp -> {\n+            Assertions.fail(exp.getMessage());\n+            return null;\n+        });\n+        cf.get(10, TimeUnit.SECONDS);\n+        MeasureQuery updatedQuery = new MeasureQuery(Lists.newArrayList(\""minute\""), \""testMetric_minute\"",\n+                                              new TimestampRange(\n+                                                  begin.toEpochMilli(),\n+                                                  now.plus(15, ChronoUnit.MINUTES).toEpochMilli()\n+                                              ), ImmutableSet.of(\""service_id\"", \""tag\"", \""new_tag\""),\n+                                              ImmutableSet.of(\""value\"", \""new_value\"")\n+        );\n+        await().atMost(10, TimeUnit.SECONDS).untilAsserted(() -> {\n+            MeasureQueryResponse updatedResp = client.query(updatedQuery);\n+            assertNotNull(updatedResp);\n+            assertEquals(2, updatedResp.getDataPoints().size());\n+            assertEquals(\""service1\"", updatedResp.getDataPoints().get(0).getTagValue(\""service_id\""));\n+            assertEquals(\""tag1\"", updatedResp.getDataPoints().get(0).getTagValue(\""tag\""));\n+            assertEquals(100, (Long) updatedResp.getDataPoints().get(0).getFieldValue(\""value\""));\n+            assertEquals(\""service2\"", updatedResp.getDataPoints().get(1).getTagValue(\""service_id\""));\n+            assertEquals(\""tag1\"", updatedResp.getDataPoints().get(1).getTagValue(\""tag\""));\n+            assertEquals(\""new_tag1\"", updatedResp.getDataPoints().get(1).getTagValue(\""new_tag\""));\n+            assertEquals(101, (Long) updatedResp.getDataPoints().get(1).getFieldValue(\""value\""));\n+            assertEquals(1000, (Long) updatedResp.getDataPoints().get(1).getFieldValue(\""new_value\""));\n+        });\n+    }\n+\n+    @Stream(name = \""testMetric\"", scopeId = DefaultScopeDefine.SERVICE,\n+        builder = TestMetric.Builder.class, processor = MetricsStreamProcessor.class)\n+    private static class TestMetric {\n+        @Column(name = \""service_id\"")\n+        @BanyanDB.SeriesID(index = 0)\n+        @BanyanDB.TopNAggregation\n+        private String serviceId;\n+        @Column(name = \""tag\"")\n+        @BanyanDB.MatchQuery(analyzer = BanyanDB.MatchQuery.AnalyzerType.URL)\n+        private String tag;\n+        @Column(name = \""value\"", dataType = Column.ValueDataType.COMMON_VALUE)\n+        @BanyanDB.MeasureField\n+        private long value;\n+\n+        static class Builder implements StorageBuilder<StorageData> {\n+            @Override\n+            public StorageData storage2Entity(final Convert2Entity converter) {\n+                return null;\n+            }\n+\n+            @Override\n+            public void entity2Storage(final StorageData entity, final Convert2Storage converter) {\n+\n+            }\n+        }\n+    }\n+\n+    @Stream(name = \""testMetric\"", scopeId = DefaultScopeDefine.SERVICE,\n+        builder = UpdateTestMetric.Builder.class, processor = MetricsStreamProcessor.class)\n+    private static class UpdateTestMetric {\n+        @Column(name = \""service_id\"")\n+        @BanyanDB.SeriesID(index = 0)\n+        private String serviceId;\n+        @Column(name = \""tag\"")\n+        @BanyanDB.EnableSort\n+        private String tag;\n+        @Column(name = \""new_tag\"")\n+        private String newTag;\n+        @Column(name = \""value\"", dataType = Column.ValueDataType.COMMON_VALUE)\n+        @BanyanDB.MeasureField\n+        private long value;\n+        @Column(name = \""new_value\"", storageOnly = true)\n+        @BanyanDB.MeasureField\n+        private long newValue;\n+\n+        static class Builder implements StorageBuilder<StorageData> {\n+            @Override\n+            public StorageData storage2Entity(final Convert2Entity converter) {\n+                return null;\n+            }\n+\n+            @Override\n+            public void entity2Storage(final StorageData entity, final Convert2Storage converter) {\n+\n+            }\n+        }\n+    }\n+}\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-12847"", ""pr_id"": 12847, ""issue_id"": 12831, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] Provide query APIs for TTL configurations\n### Search before asking\r\n\r\n- [X] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\r\n\r\n\r\n### Description\r\n\r\nWe should consider to providing an API like [Scratch The OAP Config Dump](https://skywalking.apache.org/docs/main/next/en/debugging/config_dump/), but for TTL configurations.\r\n\r\nAccording to [progressive TTL doc](https://skywalking.apache.org/docs/main/next/en/banyandb/ttl/), we could add `/status/config/ttl` API to return these values consistently\r\n```\r\nmetrics.min=7\r\nmetrics.hour=15\r\nmetrics.day=15\r\nrecord=3\r\nrecord.super.dataset=3\r\n```\r\n\r\nFor BanyanDB, these are aligned with `grNormalTTLDays`, `grSuperTTLDays`, etc.\r\nFor Elasticsesarch and SQL database, `metrics.*`=metrics TTL in core, and `record.*`=record TTL in core.\r\n\r\n### Use case\r\n\r\n_No response_\r\n\r\n### Related issues\r\n\r\n_No response_\r\n\r\n### Are you willing to submit a pull request to implement this on your own?\r\n\r\n- [ ] Yes I am willing to submit a pull request on my own!\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\r\n"", ""issue_word_count"": 182, ""test_files_count"": 1, ""non_test_files_count"": 44, ""pr_changed_files"": [""docs/en/changes/changes.md"", ""docs/en/debugging/config_dump.md"", ""docs/en/setup/backend/configuration-vocabulary.md"", ""docs/en/setup/backend/ttl.md"", ""docs/en/status/query_ttl_setup.md"", ""docs/menu.yml"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TTLStatusQuery.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/DefaultStorageTTLStatusQuery.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/MetricsTTL.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/RecordsTTL.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/StorageTTLStatusQuery.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/TTLDefinition.java"", ""oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/CoreModuleTest.java"", ""oap-server/server-query-plugin/pom.xml"", ""oap-server/server-query-plugin/status-query-plugin/pom.xml"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingSpanRsp.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingTraceRsp.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryConfig.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryExceptionHandler.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryModule.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryProvider.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/TTLConfigQueryHandler.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/log/DebuggingQueryLogsRsp.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/mqe/DebuggingMQERsp.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryEndpointTopologyRsp.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryInstanceTopologyRsp.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryProcessTopologyRsp.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryServiceTopologyRsp.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/DebuggingQueryTraceBriefRsp.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/DebuggingQueryTraceRsp.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/zipkin/DebuggingZipkinQueryTraceRsp.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/zipkin/DebuggingZipkinQueryTracesRsp.java"", ""oap-server/server-query-plugin/status-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleDefine"", ""oap-server/server-query-plugin/status-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleProvider"", ""oap-server/server-starter/pom.xml"", ""oap-server/server-starter/src/main/resources/application.yml"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageProvider.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBTTLStatusQuery.java"", ""oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java"", ""oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/JDBCStorageProvider.java""], ""pr_changed_test_files"": [""oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/CoreModuleTest.java""], ""base_commit"": ""1c9c685db8bae04e70393939b0abc206cf14d33e"", ""head_commit"": ""4e935d8247881b3569aefc3a03ebe697c413fd7d"", ""repo_url"": ""https://github.com/apache/skywalking/pull/12847"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/12847"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-12T01:51:48.000Z"", ""patch"": ""diff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 3254ee8abfa4..d83c74f36922 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -6,6 +6,7 @@\n   * This change would not impact the existing deployment and its feature for our official release users.\n   * **Warning** If there are custom query plugins for our Elasticsearch indices, this change could break them as\n     sort queries and aggregation queries which used the unexpected fields are being blocked.\n+* [Breaking Change] Rename `debugging-query` module to `status-query` module. Relative exposed APIs are **UNCHANGED**. \n \n #### OAP Server\n \n@@ -34,6 +35,7 @@\n * BanyanDB: Support update the Schema when OAP starting.\n * BanyanDB: Speed up OAP booting while initializing BanyanDB.\n * BanyanDB: Support `@EnableSort` on the column to enable sorting for `IndexRule` and set the default to false.\n+* Support `Get Effective TTL Configurations` API.\n \n #### UI\n \n@@ -61,5 +63,6 @@\n * Improve BanyanDB documentation.\n * Improve component-libraries documentation.\n * Improve configuration-vocabulary documentation.\n+* Add `Get Effective TTL Configurations` API documentation.\n \n All issues and pull requests are [here](https://github.com/apache/skywalking/milestone/224?closed=1)\n\ndiff --git a/docs/en/debugging/config_dump.md b/docs/en/debugging/config_dump.md\nindex eed2af175b07..51ffdad9180a 100644\n--- a/docs/en/debugging/config_dump.md\n+++ b/docs/en/debugging/config_dump.md\n@@ -1,14 +1,15 @@\n-# Scratch The OAP Config Dump\n+# Dump Effective Initial Configurations\n \n SkyWalking OAP behaviors could be controlled through hundreds of configurations. It is hard to know what is the final\n-configuration as all the configurations could be overrided by system environments.\n+configuration as all the configurations could be override by system environments.\n \n-The core config file [application.yml](../../../oap-server/server-starter/src/main/resources/application.yml) lists all\n-the configurations\n+The core config file [application.yml](../../../oap-server/server-starter/src/main/resources/application.yml) lists all the configurations\n and their default values. However, it is still hard to know the runtime value.\n \n-Scratch is a tool to dump the final configuration. It is provided within OAP rest server, which could be accessed\n-through HTTP GET `http://{core restHost}:{core restPort}/debugging/config/dump`.\n+Dump Effective Initial Configurations API is designed to help users to understand the effective configurations, no matter\n+they are initialized in the `application.yml`, or override through system environments.\n+- URL, `http://{core restHost}:{core restPort}/debugging/config/dump`\n+- HTTP GET method.\n \n ```shell\n > curl http://127.0.0.1:12800/debugging/config/dump\n\ndiff --git a/docs/en/setup/backend/configuration-vocabulary.md b/docs/en/setup/backend/configuration-vocabulary.md\nindex 22f849300d93..c0e08ec23913 100644\n--- a/docs/en/setup/backend/configuration-vocabulary.md\n+++ b/docs/en/setup/backend/configuration-vocabulary.md\n@@ -344,7 +344,7 @@ The Configuration Vocabulary lists all available configurations provided by `app\n | -                       | -             | kafkaTopicLog                                                                                                                                                            | Kafka topic name for log.                                                                                                                                                                                                                                                                                                                                                                                                                                                  | SW_EXPORTER_KAFKA_TOPIC_LOG                           | skywalking-export-log                                                                        |\n | -                       | -             | exportErrorStatusTraceOnly                                                                                                                                               | Export error status trace segments through the Kafka channel.                                                                                                                                                                                                                                                                                                                                                                                                              | SW_EXPORTER_KAFKA_TRACE_FILTER_ERROR                  | false                                                                                        |\n | health-checker          | default       | checkIntervalSeconds                                                                                                                                                     | The period of checking OAP internal health status (in seconds).                                                                                                                                                                                                                                                                                                                                                                                                            | SW_HEALTH_CHECKER_INTERVAL_SECONDS                    | 5                                                                                            |\n-| debugging-query         | default       |                                                                                                                                                                          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |                                                       |                                                                                              |\n+| status-query            | default       |                                                                                                                                                                          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |                                                       |                                                                                              |\n | -                       | -             | keywords4MaskingSecretsOfConfig                                                                                                                                          | Include the list of keywords to filter configurations including secrets. Separate keywords by a comma.                                                                                                                                                                                                                                                                                                                                                                     | SW_DEBUGGING_QUERY_KEYWORDS_FOR_MASKING_SECRETS       | user,password,token,accessKey,secretKey,authentication                                       |\n | configuration-discovery | default       | disableMessageDigest                                                                                                                                                     | If true, agent receives the latest configuration every time, even without making any changes. By default, OAP uses the SHA512 message digest mechanism to detect changes in configuration.                                                                                                                                                                                                                                                                                 | SW_DISABLE_MESSAGE_DIGEST                             | false                                                                                        |\n | receiver-event          | default       | gRPC services that handle events data.                                                                                                                                   | -                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | -                                                     |                                                                                              |\n\ndiff --git a/docs/en/setup/backend/ttl.md b/docs/en/setup/backend/ttl.md\nindex c0c7a9b19782..1513880a7806 100644\n--- a/docs/en/setup/backend/ttl.md\n+++ b/docs/en/setup/backend/ttl.md\n@@ -1,4 +1,6 @@\n-# TTL\n+# Data Lifecycle. Time To Live (TTL)\n+Time To Live (TTL) is a mechanism to automatically delete data that is older than the specified time. \n+\n In SkyWalking, there are two types of observability data:\n 1. Records include traces, logs, topN sampled statements and alarm. `recordDataTTL` applies to **record** data.\n 1. Metrics include all metrics for service, instance, endpoint, and topology map. Metadata(lists of services, instances, or endpoints) also belongs to metrics. `metricsDataTTL` applies to **Metrics** data.\n@@ -12,6 +14,9 @@ These are the settings for the different types:\n \n ## BanyanDB TTL\n \n-BanyanDB has a TTL mechanism to automatically delete data that is older than the specified time. When you use BanyanDB as the storage backend, `recordDataTTL` and `metricsDataTTL` are not used. Instead, you should configure the TTL settings in `storage.banyandb`.\n+BanyanDB has a TTL mechanism to automatically delete data that is older than the specified time. When you use BanyanDB\n+as the storage backend, `recordDataTTL` and `metricsDataTTL` are not used. Instead, you should configure the TTL\n+settings in `storage.banyandb`.\n \n-Please refer to the [Storage BanyanDB](storages/banyandb.md) document for more information.\n+Please refer to the [Storage BanyanDB](storages/banyandb.md) and [BanyanDB's Progressive TTL](../../banyandb/ttl.md)\n+documents for more information.\n\ndiff --git a/docs/en/status/query_ttl_setup.md b/docs/en/status/query_ttl_setup.md\nnew file mode 100644\nindex 000000000000..3a9c67d960af\n--- /dev/null\n+++ b/docs/en/status/query_ttl_setup.md\n@@ -0,0 +1,48 @@\n+# Get Effective TTL Configurations\n+\n+Time To Live (TTL) mechanism has different behaviors according to different storage implementations. By default, the\n+core module provides two TTL configurations: [`recordDataTTL` and `metricsDataTTL`](../setup/backend/ttl.md).\n+But some storage implementations could override these settings and provide its own TTL configurations, for example,\n+BanyanDB provides its native TTL mechanism to support [progressive TTL](../banyandb/ttl.md) feature.\n+\n+This API is used to get the unified and effective TTL configurations.\n+- URL, `http://{core restHost}:{core restPort}/status/config/ttl`\n+- HTTP GET method.\n+\n+```shell\n+> curl -X GET \""http://127.0.0.1:12800/status/config/ttl\""\n+# Metrics TTL includes the definition of the TTL of the metrics-ish data in the storage,\n+# e.g.\n+# 1. The metadata of the service, instance, endpoint, topology map, etc.\n+# 2. Generated metrics data from OAL and MAL engines.\n+#\n+# TTLs for each granularity metrics are listed separately.\n+metrics.minute=7\n+metrics.hour=7\n+metrics.day=7\n+\n+# Records TTL includes the definition of the TTL of the records data in the storage,\n+# Records include traces, logs, sampled slow SQL statements, HTTP requests(by Rover), alarms, etc.\n+# Super dataset of records are traces and logs, which volume should be much larger.\n+records.default=3\n+records.superDataset=3\n+```\n+\n+This API also provides the response in JSON format, which is more friendly for programmatic usage.\n+\n+```shell\n+> curl -X GET \""http://127.0.0.1:12800/status/config/ttl\"" \\\n+       -H \""Accept: application/json\""\n+\n+{\n+    \""metrics\"": {\n+        \""minute\"": 7,\n+        \""hour\"": 7,\n+        \""day\"": 7\n+    },\n+    \""records\"": {\n+        \""default\"": 3,\n+        \""superDataset\"": 3\n+    }\n+}\n+```\n\\ No newline at end of file\n\ndiff --git a/docs/menu.yml b/docs/menu.yml\nindex 39b0d7d0524c..04a5b2322b3a 100644\n--- a/docs/menu.yml\n+++ b/docs/menu.yml\n@@ -352,12 +352,14 @@ catalog:\n         path: \""/en/concepts-and-designs/metrics-attributes\""\n   - name: \""Security Notice\""\n     path: \""/en/security/readme\""\n-  - name: \""Debugging\""\n+  - name: \""Status APIs\""\n     catalog:\n-      - name: \""Scratch The OAP Config Dump\""\n+      - name: \""Dump Effective Initial Configurations\""\n         path: \""/en/debugging/config_dump\""\n       - name: \""Tracing Query Execution\""\n         path: \""/en/debugging/query-tracing\""\n+      - name: \""Get Effective TTL Configurations\""\n+        path: \""/en/status/query_ttl_setup\""\n   - name: \""Academy\""\n     catalog:\n       - name: \""Scaling SkyWalking server automatically in kubernetes\""\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java\nindex b2c6071f3825..7e1cc8a3fa04 100755\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModule.java\n@@ -52,6 +52,7 @@\n import org.apache.skywalking.oap.server.core.query.MetricsMetadataQueryService;\n import org.apache.skywalking.oap.server.core.query.MetricsQueryService;\n import org.apache.skywalking.oap.server.core.query.RecordQueryService;\n+import org.apache.skywalking.oap.server.core.query.TTLStatusQuery;\n import org.apache.skywalking.oap.server.core.query.TagAutoCompleteQueryService;\n import org.apache.skywalking.oap.server.core.query.TopNRecordsQueryService;\n import org.apache.skywalking.oap.server.core.query.TopologyQueryService;\n@@ -96,7 +97,7 @@ public Class[] services() {\n \n         addServerInterface(classes);\n         addReceiverInterface(classes);\n-        addInsideService(classes);\n+        addInternalServices(classes);\n         addCacheService(classes);\n         addQueryService(classes);\n         addProfileService(classes);\n@@ -153,6 +154,7 @@ private void addQueryService(List<Class> classes) {\n         classes.add(TagAutoCompleteQueryService.class);\n         classes.add(RecordQueryService.class);\n         classes.add(HierarchyQueryService.class);\n+        classes.add(TTLStatusQuery.class);\n     }\n \n     private void addServerInterface(List<Class> classes) {\n@@ -160,7 +162,7 @@ private void addServerInterface(List<Class> classes) {\n         classes.add(HTTPHandlerRegister.class);\n     }\n \n-    private void addInsideService(List<Class> classes) {\n+    private void addInternalServices(List<Class> classes) {\n         classes.add(ModelCreator.class);\n         classes.add(IModelManager.class);\n         classes.add(ModelManipulator.class);\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java\nindex d0c5bd615670..63701020798e 100755\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleProvider.java\n@@ -77,6 +77,7 @@\n import org.apache.skywalking.oap.server.core.query.MetricsMetadataQueryService;\n import org.apache.skywalking.oap.server.core.query.MetricsQueryService;\n import org.apache.skywalking.oap.server.core.query.RecordQueryService;\n+import org.apache.skywalking.oap.server.core.query.TTLStatusQuery;\n import org.apache.skywalking.oap.server.core.query.TagAutoCompleteQueryService;\n import org.apache.skywalking.oap.server.core.query.TopNRecordsQueryService;\n import org.apache.skywalking.oap.server.core.query.TopologyQueryService;\n@@ -304,6 +305,13 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n             TagAutoCompleteQueryService.class, new TagAutoCompleteQueryService(getManager(), moduleConfig));\n         this.registerServiceImplementation(RecordQueryService.class, new RecordQueryService(getManager()));\n         this.registerServiceImplementation(HierarchyQueryService.class, new HierarchyQueryService(getManager(), moduleConfig));\n+        this.registerServiceImplementation(\n+            TTLStatusQuery.class, new TTLStatusQuery(\n+                getManager(),\n+                moduleConfig.getMetricsDataTTL(),\n+                moduleConfig.getRecordDataTTL()\n+            )\n+        );\n \n         // add profile service implementations\n         this.registerServiceImplementation(\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TTLStatusQuery.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TTLStatusQuery.java\nnew file mode 100644\nindex 000000000000..60ee8995e22e\n--- /dev/null\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/TTLStatusQuery.java\n@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.query;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.apache.skywalking.oap.server.core.storage.StorageModule;\n+import org.apache.skywalking.oap.server.core.storage.ttl.MetricsTTL;\n+import org.apache.skywalking.oap.server.core.storage.ttl.RecordsTTL;\n+import org.apache.skywalking.oap.server.core.storage.ttl.StorageTTLStatusQuery;\n+import org.apache.skywalking.oap.server.core.storage.ttl.TTLDefinition;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+\n+@RequiredArgsConstructor\n+public class TTLStatusQuery implements Service {\n+    private final ModuleManager moduleManager;\n+    private final int coreMetricsDataTTL;\n+    private final int coreRecordDataTTL;\n+\n+    private StorageTTLStatusQuery storageTTLStatusQuery;\n+\n+    private StorageTTLStatusQuery getStorageTTLStatusQuery() {\n+        if (storageTTLStatusQuery == null) {\n+            storageTTLStatusQuery = moduleManager.find(StorageModule.NAME)\n+                                                 .provider()\n+                                                 .getService(StorageTTLStatusQuery.class);\n+        }\n+        return storageTTLStatusQuery;\n+    }\n+\n+    /**\n+     * @return effective TTL configuration values.\n+     */\n+    public TTLDefinition getTTL() {\n+        TTLDefinition ttlDefinition = getStorageTTLStatusQuery().getTTL();\n+        if (ttlDefinition == null) {\n+            ttlDefinition = new TTLDefinition(\n+                new MetricsTTL(coreMetricsDataTTL, coreMetricsDataTTL, coreMetricsDataTTL),\n+                new RecordsTTL(coreRecordDataTTL, coreRecordDataTTL)\n+            );\n+        }\n+        return ttlDefinition;\n+    }\n+}\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java\nindex 95b623d6e3d7..89ac015cd0b4 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/StorageModule.java\n@@ -46,6 +46,7 @@\n import org.apache.skywalking.oap.server.core.storage.query.ITopologyQueryDAO;\n import org.apache.skywalking.oap.server.core.storage.query.ITraceQueryDAO;\n import org.apache.skywalking.oap.server.core.storage.query.IZipkinQueryDAO;\n+import org.apache.skywalking.oap.server.core.storage.ttl.StorageTTLStatusQuery;\n import org.apache.skywalking.oap.server.library.module.ModuleDefine;\n \n /**\n@@ -95,6 +96,7 @@ public Class[] services() {\n             IAsyncProfilerTaskQueryDAO.class,\n             IAsyncProfilerTaskLogQueryDAO.class,\n             IJFRDataQueryDAO.class,\n+            StorageTTLStatusQuery.class\n         };\n     }\n }\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/DefaultStorageTTLStatusQuery.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/DefaultStorageTTLStatusQuery.java\nnew file mode 100644\nindex 000000000000..4ab904cdf929\n--- /dev/null\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/DefaultStorageTTLStatusQuery.java\n@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.storage.ttl;\n+\n+/**\n+ * The default implementation of {@link StorageTTLStatusQuery}.\n+ * This is used when the storage doesn't provide the TTL customization.\n+ * Typically, BanyanDB provides advanced progressive TTL configurations.\n+ * For more details, visit <a href=\""https://skywalking.apache.org/docs/main/next/en/banyandb/ttl\"">Progressive TTL\n+ * Documentation</a>.\n+ */\n+public class DefaultStorageTTLStatusQuery implements StorageTTLStatusQuery {\n+}\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/MetricsTTL.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/MetricsTTL.java\nnew file mode 100644\nindex 000000000000..e3a72dd328d4\n--- /dev/null\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/MetricsTTL.java\n@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.storage.ttl;\n+\n+import lombok.Data;\n+\n+/**\n+ * Metrics TTL includes the definition of the TTL of the metrics-ish data in the storage,\n+ * e.g.\n+ * 1. The metadata of the service, instance, endpoint, topology map, etc.\n+ * 2. Generated metrics data from OAL and MAL engines.\n+ *\n+ * TTLs for ach granularity metrics are listed separately.\n+ */\n+@Data\n+public class MetricsTTL {\n+    private final int minute;\n+    private final int hour;\n+    private final int day;\n+}\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/RecordsTTL.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/RecordsTTL.java\nnew file mode 100644\nindex 000000000000..09484f936b17\n--- /dev/null\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/RecordsTTL.java\n@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.storage.ttl;\n+\n+import com.google.gson.annotations.SerializedName;\n+import lombok.Data;\n+\n+/**\n+ * RecordsTTL includes the definition of the TTL of the records data in the storage,\n+ * Records include traces, logs, sampled slow SQL statements, HTTP requests(by Rover), alarms, etc.\n+ * Super dataset of records are traces and logs, which volume should be much larger.\n+ */\n+@Data\n+public class RecordsTTL {\n+    @SerializedName(\""default\"")\n+    private final int value;\n+    private final int superDataset;\n+}\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/StorageTTLStatusQuery.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/StorageTTLStatusQuery.java\nnew file mode 100644\nindex 000000000000..1053b9daa91d\n--- /dev/null\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/StorageTTLStatusQuery.java\n@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.storage.ttl;\n+\n+import org.apache.skywalking.oap.server.library.module.Service;\n+\n+public interface StorageTTLStatusQuery extends Service {\n+    /**\n+     * Get the TTL of the metrics and records data from the selected storage.\n+     *\n+     * @return null if the storage doesn't support TTL customization. Or return the TTL definition from specific storage\n+     * implementation.\n+     */\n+    default TTLDefinition getTTL() {\n+        return null;\n+    }\n+}\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/TTLDefinition.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/TTLDefinition.java\nnew file mode 100644\nindex 000000000000..5ef4b90ff60a\n--- /dev/null\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/ttl/TTLDefinition.java\n@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.storage.ttl;\n+\n+import com.google.gson.Gson;\n+import lombok.Data;\n+\n+/**\n+ * TTLDefinition defines the TTL of the data in the storage.\n+ */\n+@Data\n+public class TTLDefinition {\n+    private final static Gson GSON = new Gson();\n+    private final MetricsTTL metrics;\n+    private final RecordsTTL records;\n+\n+    public String generateTTLDefinition() {\n+        StringBuilder ttlDefinition = new StringBuilder();\n+        ttlDefinition.append(\""# Metrics TTL includes the definition of the TTL of the metrics-ish data in the storage,\\n\"");\n+        ttlDefinition.append(\""# e.g.\\n\"");\n+        ttlDefinition.append(\""# 1. The metadata of the service, instance, endpoint, topology map, etc.\\n\"");\n+        ttlDefinition.append(\""# 2. Generated metrics data from OAL and MAL engines.\\n\"");\n+        ttlDefinition.append(\""#\\n\"");\n+        ttlDefinition.append(\""# TTLs for each granularity metrics are listed separately.\\n\"");\n+        ttlDefinition.append(\""metrics.minute=\"").append(metrics.getMinute()).append(\""\\n\"");\n+        ttlDefinition.append(\""metrics.hour=\"").append(metrics.getHour()).append(\""\\n\"");\n+        ttlDefinition.append(\""metrics.day=\"").append(metrics.getDay()).append(\""\\n\"");\n+        ttlDefinition.append(\""\\n\"");\n+        ttlDefinition.append(\""# Records TTL includes the definition of the TTL of the records data in the storage,\\n\"");\n+        ttlDefinition.append(\""# Records include traces, logs, sampled slow SQL statements, HTTP requests(by Rover), alarms, etc.\\n\"");\n+        ttlDefinition.append(\""# Super dataset of records are traces and logs, which volume should be much larger.\\n\"");\n+        ttlDefinition.append(\""records.default=\"").append(records.getValue()).append(\""\\n\"");\n+        ttlDefinition.append(\""records.superDataset=\"").append(records.getSuperDataset()).append(\""\\n\"");\n+        return ttlDefinition.toString();\n+    }\n+\n+    public String generateTTLDefinitionAsJSONStr() {\n+        return GSON.toJson(this);\n+    }\n+}\n\ndiff --git a/oap-server/server-query-plugin/pom.xml b/oap-server/server-query-plugin/pom.xml\nindex 6ef535e84a5c..87bc68a8bae2 100644\n--- a/oap-server/server-query-plugin/pom.xml\n+++ b/oap-server/server-query-plugin/pom.xml\n@@ -46,6 +46,6 @@\n         <module>zipkin-query-plugin</module>\n         <module>promql-plugin</module>\n         <module>logql-plugin</module>\n-        <module>debugging-query-plugin</module>\n+        <module>status-query-plugin</module>\n     </modules>\n </project>\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/pom.xml b/oap-server/server-query-plugin/status-query-plugin/pom.xml\nsimilarity index 97%\nrename from oap-server/server-query-plugin/debugging-query-plugin/pom.xml\nrename to oap-server/server-query-plugin/status-query-plugin/pom.xml\nindex 1e2226180e32..67c410d1840d 100644\n--- a/oap-server/server-query-plugin/debugging-query-plugin/pom.xml\n+++ b/oap-server/server-query-plugin/status-query-plugin/pom.xml\n@@ -25,7 +25,7 @@\n     </parent>\n     <modelVersion>4.0.0</modelVersion>\n \n-    <artifactId>debugging-query-plugin</artifactId>\n+    <artifactId>status-query-plugin</artifactId>\n     <packaging>jar</packaging>\n \n     <dependencies>\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java\nsimilarity index 99%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java\nindex 8b52f3707598..564f7c4354b9 100644\n--- a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java\n+++ b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingHTTPHandler.java\n@@ -85,7 +85,7 @@\n import zipkin2.Span;\n \n @Slf4j\n-@ExceptionHandler(DebuggingQueryExceptionHandler.class)\n+@ExceptionHandler(StatusQueryExceptionHandler.class)\n public class DebuggingHTTPHandler {\n     private final ServerStatusService serverStatusService;\n     private final MetricsExpressionQuery mqeQuery;\n@@ -93,9 +93,9 @@ public class DebuggingHTTPHandler {\n     private final ZipkinQueryHandler zipkinQueryHandler;\n     private final TopologyQuery topologyQuery;\n     private final LogQuery logQuery;\n-    final DebuggingQueryConfig config;\n+    final StatusQueryConfig config;\n \n-    public DebuggingHTTPHandler(final ModuleManager manager, final DebuggingQueryConfig config) {\n+    public DebuggingHTTPHandler(final ModuleManager manager, final StatusQueryConfig config) {\n         serverStatusService = manager.find(CoreModule.NAME)\n                                      .provider()\n                                      .getService(ServerStatusService.class);\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingSpanRsp.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingSpanRsp.java\nsimilarity index 100%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingSpanRsp.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingSpanRsp.java\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingTraceRsp.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingTraceRsp.java\nsimilarity index 100%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingTraceRsp.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingTraceRsp.java\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingQueryConfig.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryConfig.java\nsimilarity index 95%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingQueryConfig.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryConfig.java\nindex 217ced2427dc..4be0a9c8a44c 100644\n--- a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingQueryConfig.java\n+++ b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryConfig.java\n@@ -22,7 +22,7 @@\n import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n \n @Getter\n-public class DebuggingQueryConfig extends ModuleConfig {\n+public class StatusQueryConfig extends ModuleConfig {\n     /**\n      * Include the list of keywords to filter configurations including secrets. Separate keywords by a comma.\n      *\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingQueryExceptionHandler.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryExceptionHandler.java\nsimilarity index 96%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingQueryExceptionHandler.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryExceptionHandler.java\nindex 5bede1f43020..28d4037a541e 100644\n--- a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingQueryExceptionHandler.java\n+++ b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryExceptionHandler.java\n@@ -29,7 +29,7 @@\n import static com.linecorp.armeria.common.MediaType.ANY_TEXT_TYPE;\n \n @Slf4j\n-public class DebuggingQueryExceptionHandler implements ExceptionHandlerFunction {\n+public class StatusQueryExceptionHandler implements ExceptionHandlerFunction {\n     @Override\n     public HttpResponse handleException(final ServiceRequestContext ctx, final HttpRequest req, final Throwable cause) {\n         String rspMsg = cause.getMessage() != null ? cause.getMessage() : cause.getClass().getSimpleName();\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingQueryModule.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryModule.java\nsimilarity index 87%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingQueryModule.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryModule.java\nindex 02b5fd59913b..6375966d8df3 100644\n--- a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingQueryModule.java\n+++ b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryModule.java\n@@ -20,10 +20,10 @@\n \n import org.apache.skywalking.oap.server.library.module.ModuleDefine;\n \n-public class DebuggingQueryModule extends ModuleDefine {\n-    public static final String NAME = \""debugging-query\"";\n+public class StatusQueryModule extends ModuleDefine {\n+    public static final String NAME = \""status-query\"";\n \n-    public DebuggingQueryModule() {\n+    public StatusQueryModule() {\n         super(NAME);\n     }\n \n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingQueryProvider.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryProvider.java\nsimilarity index 82%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingQueryProvider.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryProvider.java\nindex a3618feffb68..635a01d1eaf5 100644\n--- a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/DebuggingQueryProvider.java\n+++ b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/StatusQueryProvider.java\n@@ -28,28 +28,28 @@\n import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n import org.apache.skywalking.oap.server.library.module.ServiceNotProvidedException;\n \n-public class DebuggingQueryProvider extends ModuleProvider {\n+public class StatusQueryProvider extends ModuleProvider {\n     public static final String NAME = \""default\"";\n \n-    private DebuggingQueryConfig config;\n+    private StatusQueryConfig config;\n \n     public String name() {\n         return NAME;\n     }\n \n     public Class<? extends ModuleDefine> module() {\n-        return DebuggingQueryModule.class;\n+        return StatusQueryModule.class;\n     }\n \n     public ConfigCreator<? extends ModuleConfig> newConfigCreator() {\n-        return new ConfigCreator<DebuggingQueryConfig>() {\n+        return new ConfigCreator<StatusQueryConfig>() {\n             @Override\n-            public Class<DebuggingQueryConfig> type() {\n-                return DebuggingQueryConfig.class;\n+            public Class<StatusQueryConfig> type() {\n+                return StatusQueryConfig.class;\n             }\n \n             @Override\n-            public void onInitialized(final DebuggingQueryConfig initialized) {\n+            public void onInitialized(final StatusQueryConfig initialized) {\n                 config = initialized;\n             }\n         };\n@@ -67,6 +67,10 @@ public void start() throws ServiceNotProvidedException {\n             new DebuggingHTTPHandler(getManager(), config),\n             Collections.singletonList(HttpMethod.GET)\n         );\n+        service.addHandler(\n+            new TTLConfigQueryHandler(getManager()),\n+            Collections.singletonList(HttpMethod.GET)\n+        );\n     }\n \n     public void notifyAfterCompleted() throws ServiceNotProvidedException, ModuleStartException {\n\ndiff --git a/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/TTLConfigQueryHandler.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/TTLConfigQueryHandler.java\nnew file mode 100644\nindex 000000000000..05ade021ee81\n--- /dev/null\n+++ b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/TTLConfigQueryHandler.java\n@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.query.debug;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.MediaType;\n+import com.linecorp.armeria.server.annotation.ExceptionHandler;\n+import com.linecorp.armeria.server.annotation.Get;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.query.TTLStatusQuery;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+\n+@Slf4j\n+@ExceptionHandler(StatusQueryExceptionHandler.class)\n+public class TTLConfigQueryHandler {\n+    private final ModuleManager moduleManager;\n+    private TTLStatusQuery ttlStatusQuery;\n+\n+    public TTLConfigQueryHandler(final ModuleManager manager) {\n+        this.moduleManager = manager;\n+    }\n+\n+    private TTLStatusQuery getTTLStatusQuery() {\n+        if (ttlStatusQuery == null) {\n+            ttlStatusQuery = moduleManager.find(CoreModule.NAME)\n+                                          .provider()\n+                                          .getService(TTLStatusQuery.class);\n+        }\n+        return ttlStatusQuery;\n+    }\n+\n+    @Get(\""/status/config/ttl\"")\n+    public HttpResponse affectedTTLConfigurations(HttpRequest request) {\n+        if (\""application/json\"".equalsIgnoreCase(request.headers().get(HttpHeaderNames.ACCEPT))) {\n+            return HttpResponse.of(MediaType.JSON_UTF_8, getTTLStatusQuery().getTTL().generateTTLDefinitionAsJSONStr());\n+        }\n+        return HttpResponse.of(MediaType.PLAIN_TEXT_UTF_8, getTTLStatusQuery().getTTL().generateTTLDefinition());\n+    }\n+}\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/log/DebuggingQueryLogsRsp.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/log/DebuggingQueryLogsRsp.java\nsimilarity index 100%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/log/DebuggingQueryLogsRsp.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/log/DebuggingQueryLogsRsp.java\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/mqe/DebuggingMQERsp.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/mqe/DebuggingMQERsp.java\nsimilarity index 100%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/mqe/DebuggingMQERsp.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/mqe/DebuggingMQERsp.java\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryEndpointTopologyRsp.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryEndpointTopologyRsp.java\nsimilarity index 100%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryEndpointTopologyRsp.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryEndpointTopologyRsp.java\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryInstanceTopologyRsp.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryInstanceTopologyRsp.java\nsimilarity index 100%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryInstanceTopologyRsp.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryInstanceTopologyRsp.java\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryProcessTopologyRsp.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryProcessTopologyRsp.java\nsimilarity index 100%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryProcessTopologyRsp.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryProcessTopologyRsp.java\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryServiceTopologyRsp.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryServiceTopologyRsp.java\nsimilarity index 100%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryServiceTopologyRsp.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/topology/DebuggingQueryServiceTopologyRsp.java\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/DebuggingQueryTraceBriefRsp.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/DebuggingQueryTraceBriefRsp.java\nsimilarity index 100%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/DebuggingQueryTraceBriefRsp.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/DebuggingQueryTraceBriefRsp.java\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/DebuggingQueryTraceRsp.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/DebuggingQueryTraceRsp.java\nsimilarity index 100%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/DebuggingQueryTraceRsp.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/DebuggingQueryTraceRsp.java\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/zipkin/DebuggingZipkinQueryTraceRsp.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/zipkin/DebuggingZipkinQueryTraceRsp.java\nsimilarity index 100%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/zipkin/DebuggingZipkinQueryTraceRsp.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/zipkin/DebuggingZipkinQueryTraceRsp.java\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/zipkin/DebuggingZipkinQueryTracesRsp.java b/oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/zipkin/DebuggingZipkinQueryTracesRsp.java\nsimilarity index 100%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/zipkin/DebuggingZipkinQueryTracesRsp.java\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/java/org/apache/skywalking/oap/query/debug/trace/zipkin/DebuggingZipkinQueryTracesRsp.java\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleDefine b/oap-server/server-query-plugin/status-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleDefine\nsimilarity index 93%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleDefine\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleDefine\nindex 0a5b82263a76..e63b6e206647 100644\n--- a/oap-server/server-query-plugin/debugging-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleDefine\n+++ b/oap-server/server-query-plugin/status-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleDefine\n@@ -16,4 +16,4 @@\n #\n #\n \n-org.apache.skywalking.oap.query.debug.DebuggingQueryModule\n+org.apache.skywalking.oap.query.debug.StatusQueryModule\n\ndiff --git a/oap-server/server-query-plugin/debugging-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleProvider b/oap-server/server-query-plugin/status-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleProvider\nsimilarity index 92%\nrename from oap-server/server-query-plugin/debugging-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleProvider\nrename to oap-server/server-query-plugin/status-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleProvider\nindex 32aee0d7b1f6..94780edbbfff 100644\n--- a/oap-server/server-query-plugin/debugging-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleProvider\n+++ b/oap-server/server-query-plugin/status-query-plugin/src/main/resources/META-INF/services/org.apache.skywalking.oap.server.library.module.ModuleProvider\n@@ -16,4 +16,4 @@\n #\n #\n \n-org.apache.skywalking.oap.query.debug.DebuggingQueryProvider\n\\ No newline at end of file\n+org.apache.skywalking.oap.query.debug.StatusQueryProvider\n\\ No newline at end of file\n\ndiff --git a/oap-server/server-starter/pom.xml b/oap-server/server-starter/pom.xml\nindex d74a4ae02bee..5eeefb808e64 100644\n--- a/oap-server/server-starter/pom.xml\n+++ b/oap-server/server-starter/pom.xml\n@@ -113,7 +113,7 @@\n         </dependency>\n         <dependency>\n             <groupId>org.apache.skywalking</groupId>\n-            <artifactId>debugging-query-plugin</artifactId>\n+            <artifactId>status-query-plugin</artifactId>\n             <version>${project.version}</version>\n         </dependency>\n         <dependency>\n\ndiff --git a/oap-server/server-starter/src/main/resources/application.yml b/oap-server/server-starter/src/main/resources/application.yml\nindex 038477fc3375..ee396483ea71 100644\n--- a/oap-server/server-starter/src/main/resources/application.yml\n+++ b/oap-server/server-starter/src/main/resources/application.yml\n@@ -641,8 +641,8 @@ health-checker:\n   default:\n     checkIntervalSeconds: ${SW_HEALTH_CHECKER_INTERVAL_SECONDS:5}\n \n-debugging-query:\n-  selector: ${SW_DEBUGGING_QUERY:default}\n+status-query:\n+  selector: ${SW_STATUS_QUERY:default}\n   default:\n     # Include the list of keywords to filter configurations including secrets. Separate keywords by a comma.\n     keywords4MaskingSecretsOfConfig: ${SW_DEBUGGING_QUERY_KEYWORDS_FOR_MASKING_SECRETS:user,password,token,accessKey,secretKey,authentication}\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java\nindex 0d968237bb2e..9ad6c03d7911 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageConfig.java\n@@ -70,10 +70,26 @@ public class BanyanDBStorageConfig extends ModuleConfig {\n     private int segmentQueryMaxSize = 200;\n     private int profileDataQueryBatchSize = 100;\n \n-    /**\n-     * The configuration of the groups.\n-     * @since 10.2.0\n-     */\n+    // ----------------------------------------\n+    // The configuration of the groups.\n+    // since 10.2.0\n+    // ----------------------------------------\n+    // The group settings of record.\n+    // `gr` is the short name of the group settings of record.\n+    //\n+    // The \""normal\""(`gr...`) section defines settings for datasets not specified in \""super\"".\n+    // Each dataset will be grouped under a single group named \""normal\"".\n+    // \""super\""(`grSuper...`) is a special dataset designed to store trace or log data that is too large for normal datasets.\n+    // # Each super dataset will be a separate group in BanyanDB, following the settings defined in the \""super\"" section.\n+    // ----------------------------------------\n+    // The group settings of metrics.\n+    // `gm` is the short name of the group settings of metrics.\n+    //\n+    // OAP stores metrics based its granularity.\n+    // Valid values are \""day\"", \""hour\"", and \""minute\"". That means metrics will be stored in the three separate groups.\n+    // Non-\""minute\"" are governed by the \""core.downsampling\"" setting.\n+    // For example, if \""core.downsampling\"" is set to \""hour\"", the \""hour\"" will be used, while \""day\"" are ignored.\n+\n     private int grNormalShardNum = 1;\n     private int grNormalSIDays = 1;\n     private int grNormalTTLDays = 3;\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageProvider.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageProvider.java\nindex 58e6e314b1db..0d777ba2da93 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageProvider.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBStorageProvider.java\n@@ -55,6 +55,7 @@\n import org.apache.skywalking.oap.server.core.storage.query.ITopologyQueryDAO;\n import org.apache.skywalking.oap.server.core.storage.query.ITraceQueryDAO;\n import org.apache.skywalking.oap.server.core.storage.query.IZipkinQueryDAO;\n+import org.apache.skywalking.oap.server.core.storage.ttl.StorageTTLStatusQuery;\n import org.apache.skywalking.oap.server.library.module.ModuleDefine;\n import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n@@ -186,8 +187,11 @@ IAsyncProfilerTaskQueryDAO.class, new BanyanDBAsyncProfilerTaskQueryDAO(client,\n                 IAsyncProfilerTaskLogQueryDAO.class, new BanyanDBAsyncProfilerTaskLogQueryDAO(client,\n                         this.config.getAsyncProfilerTaskQueryMaxSize()\n                 ));\n+        this.registerServiceImplementation(IJFRDataQueryDAO.class, new BanyanDBJFRDataQueryDAO(client));\n         this.registerServiceImplementation(\n-                IJFRDataQueryDAO.class, new BanyanDBJFRDataQueryDAO(client));\n+            StorageTTLStatusQuery.class,\n+            new BanyanDBTTLStatusQuery(config)\n+        );\n     }\n \n     @Override\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBTTLStatusQuery.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBTTLStatusQuery.java\nnew file mode 100644\nindex 000000000000..9ad975c5f320\n--- /dev/null\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBTTLStatusQuery.java\n@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \""License\""); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \""AS IS\"" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.storage.plugin.banyandb;\n+\n+import org.apache.skywalking.oap.server.core.storage.ttl.StorageTTLStatusQuery;\n+import org.apache.skywalking.oap.server.core.storage.ttl.TTLDefinition;\n+\n+public class BanyanDBTTLStatusQuery implements StorageTTLStatusQuery {\n+    private final int grNormalTTLDays;\n+    private final int grSuperTTLDays;\n+    private final int gmMinuteTTLDays;\n+    private final int gmHourTTLDays;\n+    private final int gmDayTTLDays;\n+\n+    public BanyanDBTTLStatusQuery(BanyanDBStorageConfig config) {\n+        grNormalTTLDays = config.getGrNormalTTLDays();\n+        grSuperTTLDays = config.getGrSuperTTLDays();\n+        gmMinuteTTLDays = config.getGmMinuteTTLDays();\n+        gmHourTTLDays = config.getGmHourTTLDays();\n+        gmDayTTLDays = config.getGmDayTTLDays();\n+    }\n+\n+    @Override\n+    public TTLDefinition getTTL() {\n+        return null;\n+    }\n+}\n\ndiff --git a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java\nindex 0302452553d7..cd255d99b6cf 100644\n--- a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java\n+++ b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java\n@@ -61,6 +61,8 @@\n import org.apache.skywalking.oap.server.core.storage.query.ITopologyQueryDAO;\n import org.apache.skywalking.oap.server.core.storage.query.ITraceQueryDAO;\n import org.apache.skywalking.oap.server.core.storage.query.IZipkinQueryDAO;\n+import org.apache.skywalking.oap.server.core.storage.ttl.DefaultStorageTTLStatusQuery;\n+import org.apache.skywalking.oap.server.core.storage.ttl.StorageTTLStatusQuery;\n import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;\n import org.apache.skywalking.oap.server.library.module.ModuleDefine;\n import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n@@ -273,6 +275,10 @@ IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasti\n                 IJFRDataQueryDAO.class,\n                 new JFRDataQueryEsDAO(elasticSearchClient)\n         );\n+        this.registerServiceImplementation(\n+            StorageTTLStatusQuery.class,\n+            new DefaultStorageTTLStatusQuery()\n+        );\n         IndexController.INSTANCE.setLogicSharding(config.isLogicSharding());\n         IndexController.INSTANCE.setEnableCustomRouting(config.isEnableCustomRouting());\n         this.registerServiceImplementation(IHierarchyQueryDAO.class, new HierarchyQueryEsDAO(elasticSearchClient, config));\n\ndiff --git a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/JDBCStorageProvider.java b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/JDBCStorageProvider.java\nindex a46d0a6a3f10..2fd5cbcb4927 100644\n--- a/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/JDBCStorageProvider.java\n+++ b/oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/common/JDBCStorageProvider.java\n@@ -55,6 +55,8 @@\n import org.apache.skywalking.oap.server.core.storage.query.ITopologyQueryDAO;\n import org.apache.skywalking.oap.server.core.storage.query.ITraceQueryDAO;\n import org.apache.skywalking.oap.server.core.storage.query.IZipkinQueryDAO;\n+import org.apache.skywalking.oap.server.core.storage.ttl.DefaultStorageTTLStatusQuery;\n+import org.apache.skywalking.oap.server.core.storage.ttl.StorageTTLStatusQuery;\n import org.apache.skywalking.oap.server.library.client.jdbc.hikaricp.JDBCClient;\n import org.apache.skywalking.oap.server.library.module.ModuleDefine;\n import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n@@ -207,39 +209,56 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n \n         this.registerServiceImplementation(\n             IEBPFProfilingTaskDAO.class,\n-            new JDBCEBPFProfilingTaskDAO(jdbcClient, tableHelper));\n+            new JDBCEBPFProfilingTaskDAO(jdbcClient, tableHelper)\n+        );\n         this.registerServiceImplementation(\n             IEBPFProfilingScheduleDAO.class,\n-            new JDBCEBPFProfilingScheduleDAO(jdbcClient, tableHelper));\n+            new JDBCEBPFProfilingScheduleDAO(jdbcClient, tableHelper)\n+        );\n         this.registerServiceImplementation(\n             IEBPFProfilingDataDAO.class,\n-            new JDBCEBPFProfilingDataDAO(jdbcClient, tableHelper));\n+            new JDBCEBPFProfilingDataDAO(jdbcClient, tableHelper)\n+        );\n         this.registerServiceImplementation(\n             IContinuousProfilingPolicyDAO.class,\n-            new JDBCContinuousProfilingPolicyDAO(jdbcClient, tableHelper));\n+            new JDBCContinuousProfilingPolicyDAO(jdbcClient, tableHelper)\n+        );\n         this.registerServiceImplementation(\n             IServiceLabelDAO.class,\n-            new JDBCServiceLabelQueryDAO(jdbcClient, tableHelper));\n+            new JDBCServiceLabelQueryDAO(jdbcClient, tableHelper)\n+        );\n         this.registerServiceImplementation(\n             ITagAutoCompleteQueryDAO.class,\n-            new JDBCTagAutoCompleteQueryDAO(jdbcClient, tableHelper));\n+            new JDBCTagAutoCompleteQueryDAO(jdbcClient, tableHelper)\n+        );\n         this.registerServiceImplementation(\n             IZipkinQueryDAO.class,\n-            new JDBCZipkinQueryDAO(jdbcClient, tableHelper));\n+            new JDBCZipkinQueryDAO(jdbcClient, tableHelper)\n+        );\n         this.registerServiceImplementation(\n             ISpanAttachedEventQueryDAO.class,\n-            new JDBCSpanAttachedEventQueryDAO(jdbcClient, tableHelper));\n-        this.registerServiceImplementation(IHierarchyQueryDAO.class,\n-            new JDBCHierarchyQueryDAO(jdbcClient, config.getMetadataQueryMaxSize(), tableHelper));\n+            new JDBCSpanAttachedEventQueryDAO(jdbcClient, tableHelper)\n+        );\n         this.registerServiceImplementation(\n-                IAsyncProfilerTaskQueryDAO.class,\n-                new JDBCAsyncProfilerTaskQueryDAO(jdbcClient, tableHelper));\n+            IHierarchyQueryDAO.class,\n+            new JDBCHierarchyQueryDAO(jdbcClient, config.getMetadataQueryMaxSize(), tableHelper)\n+        );\n         this.registerServiceImplementation(\n-                IAsyncProfilerTaskLogQueryDAO.class,\n-                new JDBCAsyncProfilerTaskLogQueryDAO(jdbcClient, tableHelper));\n+            IAsyncProfilerTaskQueryDAO.class,\n+            new JDBCAsyncProfilerTaskQueryDAO(jdbcClient, tableHelper)\n+        );\n         this.registerServiceImplementation(\n-                IJFRDataQueryDAO.class,\n-                new JDBCJFRDataQueryDAO(jdbcClient, tableHelper));\n+            IAsyncProfilerTaskLogQueryDAO.class,\n+            new JDBCAsyncProfilerTaskLogQueryDAO(jdbcClient, tableHelper)\n+        );\n+        this.registerServiceImplementation(\n+            IJFRDataQueryDAO.class,\n+            new JDBCJFRDataQueryDAO(jdbcClient, tableHelper)\n+        );\n+        this.registerServiceImplementation(\n+            StorageTTLStatusQuery.class,\n+            new DefaultStorageTTLStatusQuery()\n+        );\n     }\n \n     @Override\n"", ""test_patch"": ""diff --git a/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/CoreModuleTest.java b/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/CoreModuleTest.java\nindex 76942345d654..4f6276d97a29 100644\n--- a/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/CoreModuleTest.java\n+++ b/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/CoreModuleTest.java\n@@ -26,6 +26,6 @@ public class CoreModuleTest {\n     public void testOpenServiceList() {\n         CoreModule coreModule = new CoreModule();\n \n-        Assertions.assertEquals(47, coreModule.services().length);\n+        Assertions.assertEquals(48, coreModule.services().length);\n     }\n }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-12823"", ""pr_id"": 12823, ""issue_id"": 12507, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[JavaClient][OAP]  Improve Index Performance By Setting \""no_sort\""\n### Search before asking\n\n- [X] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nBanyanDB IndexRule supports the option to set `no_sort` to exclude sorted tables from the underlying index files. This field should be set to 'true' if the data does not need to be sorted based on a specific index.\r\n\r\nFor the **Java client**, sync the proto file to include support for this field.\r\nFor **OAP**, set this field to true for indexes that do not require sorting support.\n\n### Use case\n\n_No response_\n\n### Related issues\n\n_No response_\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [X] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 156, ""test_files_count"": 1, ""non_test_files_count"": 20, ""pr_changed_files"": [""docs/en/changes/changes.md"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledSlowTraceRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus4xxTraceRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus5xxTraceRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Event.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPagePerf.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingScheduleRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Endpoint.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/K8SEndpoint.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ScopeDefaultColumn.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBExtension.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBModelExtension.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumn.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java"", ""oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsDAO.java""], ""pr_changed_test_files"": [""oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java""], ""base_commit"": ""88cd1eb025738a4f625867e9a4a37a3d5b8d7273"", ""head_commit"": ""49ce8769f64a989bcee7481341f438acf65ec42a"", ""repo_url"": ""https://github.com/apache/skywalking/pull/12823"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/12823"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-03T09:46:33.000Z"", ""patch"": ""diff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 4dda6f327cc0..96a95ddc4c34 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -32,6 +32,7 @@\n * BanyanDB: Introduce index mode and refactor banyandb group settings.\n * BanyanDB: Support update the Schema when OAP starting.\n * BanyanDB: Speed up OAP booting while initializing BanyanDB.\n+* BanyanDB: Support `@EnableSort` on the column to enable sorting for `IndexRule` and set the default to false.\n \n #### UI\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java\nindex c72dc4a24b1a..41595a9063c7 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java\n@@ -91,6 +91,7 @@ public class SegmentRecord extends Record {\n     @Setter\n     @Getter\n     @ElasticSearch.EnableDocValues\n+    @BanyanDB.EnableSort\n     @Column(name = LATENCY)\n     private int latency;\n     @Setter\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledSlowTraceRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledSlowTraceRecord.java\nindex 6815d6d879a3..fda70e6778fc 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledSlowTraceRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledSlowTraceRecord.java\n@@ -62,6 +62,7 @@ public class SampledSlowTraceRecord extends Record {\n     @Column(name = URI, storageOnly = true)\n     private String uri;\n     @ElasticSearch.EnableDocValues\n+    @BanyanDB.EnableSort\n     @Column(name = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)\n     private long latency;\n     @Setter\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus4xxTraceRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus4xxTraceRecord.java\nindex d74674205cc9..54b11f647050 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus4xxTraceRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus4xxTraceRecord.java\n@@ -63,6 +63,7 @@ public class SampledStatus4xxTraceRecord extends Record {\n     @Column(name = URI, storageOnly = true)\n     private String uri;\n     @ElasticSearch.EnableDocValues\n+    @BanyanDB.EnableSort\n     @Column(name = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)\n     private long latency;\n     @Setter\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus5xxTraceRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus5xxTraceRecord.java\nindex 403ee05c8b5e..34fe3f9299f3 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus5xxTraceRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus5xxTraceRecord.java\n@@ -63,6 +63,7 @@ public class SampledStatus5xxTraceRecord extends Record {\n     @Column(name = URI, storageOnly = true)\n     private String uri;\n     @ElasticSearch.EnableDocValues\n+    @BanyanDB.EnableSort\n     @Column(name = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)\n     private long latency;\n     @Setter\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Event.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Event.java\nindex 09d343a3bd55..98d2fbe220ac 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Event.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Event.java\n@@ -109,6 +109,7 @@ protected StorageID id0() {\n     private String parameters;\n \n     @ElasticSearch.EnableDocValues\n+    @BanyanDB.EnableSort\n     @Column(name = START_TIME)\n     private long startTime;\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java\nindex b86f2e39a678..3920d83a203e 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java\n@@ -39,6 +39,7 @@ public abstract class TopN extends Record implements ComparableStorageData {\n     @Getter\n     @Setter\n     @ElasticSearch.EnableDocValues\n+    @BanyanDB.EnableSort\n     @Column(name = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)\n     private long latency;\n     @Getter\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPagePerf.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPagePerf.java\nindex bede297ef01b..adab7546cc38 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPagePerf.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPagePerf.java\n@@ -40,7 +40,8 @@ public String getEntityId() {\n     }\n \n     @Getter\n-    @ScopeDefaultColumn.DefinedByField(columnName = \""service_id\"", groupByCondInTopN = true)\n+    @ScopeDefaultColumn.DefinedByField(columnName = \""service_id\"")\n+    @ScopeDefaultColumn.BanyanDB(groupByCondInTopN = true)\n     private String serviceId;\n     @Getter\n     @Setter\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingScheduleRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingScheduleRecord.java\nindex b4bcdac39068..4ec6953194d5 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingScheduleRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingScheduleRecord.java\n@@ -67,6 +67,7 @@ public class EBPFProfilingScheduleRecord extends Metrics {\n     @Column(name = PROCESS_ID, length = 600)\n     private String processId;\n     @ElasticSearch.EnableDocValues\n+    @BanyanDB.EnableSort\n     @Column(name = START_TIME)\n     private long startTime;\n     @Column(name = END_TIME)\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\nindex 4b7cce983215..88595ad4570e 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n@@ -234,12 +234,18 @@ private static void addNewScope(ScopeDeclaration declaration, Class originalClas\n             for (Field field : scopeClassField) {\n                 ScopeDefaultColumn.DefinedByField definedByField = field.getAnnotation(\n                     ScopeDefaultColumn.DefinedByField.class);\n+                ScopeDefaultColumn.BanyanDB banyanDB = field.getAnnotation(\n+                    ScopeDefaultColumn.BanyanDB.class);\n+                boolean groupByCondInTopN = false;\n+                if (banyanDB != null) {\n+                    groupByCondInTopN = banyanDB.groupByCondInTopN();\n+                }\n                 if (definedByField != null) {\n                     if (!definedByField.requireDynamicActive() || ACTIVE_EXTRA_MODEL_COLUMNS) {\n                         scopeDefaultColumns.add(\n                             new ScopeDefaultColumn(\n                                 field.getName(), definedByField.columnName(), field.getType(), false,\n-                                definedByField.length(), definedByField.groupByCondInTopN(), definedByField.isAttribute()\n+                                definedByField.length(), groupByCondInTopN, definedByField.isAttribute()\n                             ));\n                     }\n                 }\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Endpoint.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Endpoint.java\nindex 7ac0fc6f438c..acc5955f58b4 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Endpoint.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/Endpoint.java\n@@ -56,7 +56,8 @@ public String getEntityId() {\n     @ScopeDefaultColumn.DefinedByField(columnName = \""name\"", requireDynamicActive = true)\n     private String name;\n     @Getter\n-    @ScopeDefaultColumn.DefinedByField(columnName = \""service_id\"", groupByCondInTopN = true)\n+    @ScopeDefaultColumn.DefinedByField(columnName = \""service_id\"")\n+    @ScopeDefaultColumn.BanyanDB(groupByCondInTopN = true)\n     private String serviceId;\n     @Getter\n     @Setter\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/K8SEndpoint.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/K8SEndpoint.java\nindex 9f4715ca29c7..0f16aaa02ddb 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/K8SEndpoint.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/K8SEndpoint.java\n@@ -31,7 +31,8 @@\n public class K8SEndpoint extends K8SMetrics.ProtocolMetrics {\n     private volatile String entityId;\n \n-    @ScopeDefaultColumn.DefinedByField(columnName = \""service_id\"", groupByCondInTopN = true)\n+    @ScopeDefaultColumn.DefinedByField(columnName = \""service_id\"")\n+    @ScopeDefaultColumn.BanyanDB(groupByCondInTopN = true)\n     private String serviceId;\n     @ScopeDefaultColumn.DefinedByField(columnName = \""service_name\"", requireDynamicActive = true)\n     private String serviceName;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ScopeDefaultColumn.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ScopeDefaultColumn.java\nindex 71ca602d0e81..76886680870d 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ScopeDefaultColumn.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/ScopeDefaultColumn.java\n@@ -67,13 +67,6 @@ public ScopeDefaultColumn(String fieldName, String columnName, Class<?> type, bo\n          */\n         int length() default 256;\n \n-        /**\n-         * Indicate whether this column is a condition for groupBy in the TopN Aggregation.\n-         *\n-         * @since 9.5.0\n-         */\n-        boolean groupByCondInTopN() default false;\n-\n         /**\n          * Indicate whether this column is an attribute.\n          * Attributes are optional fields, which are set by the source decorator and can be used for query conditions.\n@@ -83,6 +76,18 @@ public ScopeDefaultColumn(String fieldName, String columnName, Class<?> type, bo\n         boolean isAttribute() default false;\n     }\n \n+    @Target({ElementType.FIELD})\n+    @Retention(RetentionPolicy.RUNTIME)\n+    public @interface BanyanDB {\n+        /**\n+         * Indicate whether this column is a condition for groupBy in the TopN Aggregation.\n+         *\n+         * @since 9.5.0\n+         * @since 10.2.0 moved out from {@link DefinedByField} to {@link BanyanDB}\n+         */\n+        boolean groupByCondInTopN() default false;\n+    }\n+\n     @Target({ElementType.TYPE})\n     @Retention(RetentionPolicy.RUNTIME)\n     public @interface VirtualColumnDefinition {\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java\nindex 3e95ad11ef71..af31fab4b1a6 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/BanyanDB.java\n@@ -207,6 +207,15 @@ enum AnalyzerType {\n         }\n     }\n \n+    /**\n+     * EnableSort is used to indicate the IndexRule supports sorting.\n+     * @since 10.2.0\n+     */\n+    @Target({ElementType.FIELD})\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @interface EnableSort {\n+    }\n+\n     /**\n      * IndexMode is used to indicate the index mode of the metric.\n      * All columns in the metric will be stored in the index exclusively.\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBExtension.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBExtension.java\nindex d68017657487..7cd55b4be4f0 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBExtension.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBExtension.java\n@@ -30,14 +30,14 @@\n @RequiredArgsConstructor\n public class BanyanDBExtension {\n     /**\n-     * Sharding key is used to group time series data per metric of one entity. See {@link\n+     * SeriesID is used to group time series data per metric of one entity. See {@link\n      * BanyanDB.SeriesID#index()}.\n      *\n      * @since 9.1.0 moved into BanyanDBExtension\n      * @since 9.0.0 added into {@link ModelColumn}\n      */\n     @Getter\n-    private final int shardingKeyIdx;\n+    private final int seriesIDIdx;\n \n     /**\n      * {@link BanyanDB.NoIndexing} exists to override {@link ModelColumn#shouldIndex()}, or be the same as {@link\n@@ -64,15 +64,22 @@ public class BanyanDBExtension {\n \n     /**\n      * The analyzer policy appointed to fuzzy query, especially for BanyanDB.\n+     * See {@link BanyanDB.MatchQuery}.\n      */\n     @Getter\n     private final BanyanDB.MatchQuery.AnalyzerType analyzer;\n \n     /**\n-     * @return true if this column is a part of sharding key\n+     * Enable sort for this column. See {@link BanyanDB.EnableSort}.\n      */\n-    public boolean isShardingKey() {\n-        return this.shardingKeyIdx > -1;\n+    @Getter\n+    private final boolean enableSort;\n+\n+    /**\n+     * @return true if this column is a part of SeriesID\n+     */\n+    public boolean isSeriesID() {\n+        return this.seriesIDIdx > -1;\n     }\n \n     /**\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBModelExtension.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBModelExtension.java\nindex 5e2601cb1175..198091d8428c 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBModelExtension.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/BanyanDBModelExtension.java\n@@ -42,7 +42,7 @@ public class BanyanDBModelExtension {\n \n     /**\n      * storeIDTag indicates whether a metric stores its ID as a tag.\n-     * The installer will create a virtual string ID tag with a tree index rule.\n+     * The installer will create a virtual string ID tag without timestamp.\n      */\n     @Getter\n     @Setter\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumn.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumn.java\nindex 9712a8fca147..876fbe82a78d 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumn.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumn.java\n@@ -104,6 +104,11 @@ public ModelColumn(ColumnName columnName,\n             throw new IllegalArgumentException(\n                 \""The column \"" + columnName + \"" should be indexed if require MatchQuery.\"");\n         }\n+\n+        if (!this.banyanDBExtension.shouldIndex() && this.banyanDBExtension.isEnableSort()) {\n+            throw new IllegalArgumentException(\n+                \""The column \"" + columnName + \"" should be indexed if require EnableSort.\"");\n+        }\n     }\n \n     /**\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java\nindex 729e55a69f09..fe45c226e467 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java\n@@ -58,7 +58,7 @@ public Model add(Class<?> aClass, int scopeId, Storage storage) throws StorageEx\n         DefaultScopeDefine.nameOf(scopeId);\n \n         List<ModelColumn> modelColumns = new ArrayList<>();\n-        ShardingKeyChecker checker = new ShardingKeyChecker();\n+        SeriesIDChecker checker = new SeriesIDChecker();\n         SQLDatabaseModelExtension sqlDBModelExtension = new SQLDatabaseModelExtension();\n         BanyanDBModelExtension banyanDBModelExtension = new BanyanDBModelExtension();\n         ElasticSearchModelExtension elasticSearchModelExtension = new ElasticSearchModelExtension();\n@@ -153,7 +153,7 @@ private void retrieval(final Class<?> clazz,\n                            final String modelName,\n                            final List<ModelColumn> modelColumns,\n                            final int scopeId,\n-                           ShardingKeyChecker checker,\n+                           SeriesIDChecker checker,\n                            final SQLDatabaseModelExtension sqlDBModelExtension,\n                            final BanyanDBModelExtension banyanDBModelExtension) {\n         if (log.isDebugEnabled()) {\n@@ -222,13 +222,16 @@ private void retrieval(final Class<?> clazz,\n                     BanyanDB.TopNAggregation.class);\n                 final BanyanDB.MatchQuery analyzer = field.getAnnotation(\n                     BanyanDB.MatchQuery.class);\n+                final BanyanDB.EnableSort enableSort = field.getAnnotation(\n+                    BanyanDB.EnableSort.class);\n                 final boolean shouldIndex = (banyanDBNoIndex == null) && !column.storageOnly();\n                 BanyanDBExtension banyanDBExtension = new BanyanDBExtension(\n                     banyanDBSeriesID == null ? -1 : banyanDBSeriesID.index(),\n                     shouldIndex,\n                     banyanDBIndexRule == null ? BanyanDB.IndexRule.IndexType.INVERTED : banyanDBIndexRule.indexType(),\n                     banyanDBMeasureField != null,\n-                    analyzer == null ? null : analyzer.analyzer()\n+                    analyzer == null ? null : analyzer.analyzer(),\n+                    enableSort != null\n                 );\n \n                 if (topNAggregation != null) {\n@@ -251,7 +254,7 @@ private void retrieval(final Class<?> clazz,\n                     elasticSearchExtension,\n                     banyanDBExtension\n                 );\n-                if (banyanDBExtension.isShardingKey()) {\n+                if (banyanDBExtension.isSeriesID()) {\n                     checker.accept(modelName, modelColumn);\n                 }\n \n@@ -321,14 +324,14 @@ public List<Model> allModels() {\n         return models;\n     }\n \n-    private static class ShardingKeyChecker {\n+    private static class SeriesIDChecker {\n         private final ArrayList<ModelColumn> keys = new ArrayList<>();\n \n         /**\n-         * @throws IllegalStateException if sharding key indices are conflicting.\n+         * @throws IllegalStateException if seriesID indices are conflicting.\n          */\n         private void accept(String modelName, ModelColumn modelColumn) throws IllegalStateException {\n-            final int idx = modelColumn.getBanyanDBExtension().getShardingKeyIdx();\n+            final int idx = modelColumn.getBanyanDBExtension().getSeriesIDIdx();\n             while (idx + 1 > keys.size()) {\n                 keys.add(null);\n             }\n@@ -337,21 +340,21 @@ private void accept(String modelName, ModelColumn modelColumn) throws IllegalSta\n                 throw new IllegalStateException(\n                     modelName + \""'s \""\n                         + \""Column [\"" + exist.getColumnName() + \""] and column [\"" + modelColumn.getColumnName()\n-                        + \"" are conflicting with sharding key index=\"" + modelColumn.getBanyanDBExtension()\n-                                                                                   .getShardingKeyIdx());\n+                        + \"" are conflicting with seriesID index=\"" + modelColumn.getBanyanDBExtension()\n+                                                                                   .getSeriesIDIdx());\n             }\n             keys.set(idx, modelColumn);\n         }\n \n         /**\n          * @param modelName model name of the entity\n-         * @throws IllegalStateException if sharding key indices are not continuous\n+         * @throws IllegalStateException if seriesIDs indices are not continuous\n          */\n         private void check(String modelName) throws IllegalStateException {\n             for (int i = 0; i < keys.size(); i++) {\n                 final ModelColumn modelColumn = keys.get(i);\n                 if (modelColumn == null) {\n-                    throw new IllegalStateException(\""Sharding key index=\"" + i + \"" is missing in \"" + modelName);\n+                    throw new IllegalStateException(\""seriesID index=\"" + i + \"" is missing in \"" + modelName);\n                 }\n             }\n         }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\nindex c5214b986c8f..67ff29b65554 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\n@@ -84,16 +84,16 @@ public StreamModel registerStreamModel(Model model, BanyanDBStorageConfig config\n         Schema.SchemaBuilder schemaBuilder = Schema.builder().metadata(schemaMetadata);\n         Map<String, ModelColumn> modelColumnMap = model.getColumns().stream()\n                 .collect(Collectors.toMap(modelColumn -> modelColumn.getColumnName().getStorageName(), Function.identity()));\n-        // parse and set sharding keys\n-        List<String> shardingColumns = parseEntityNames(modelColumnMap);\n-        if (shardingColumns.isEmpty()) {\n-            throw new IllegalStateException(\""sharding keys of model[stream.\"" + model.getName() + \""] must not be empty\"");\n+        // parse and set seriesIDs\n+        List<String> seriesIDColumns = parseEntityNames(modelColumnMap);\n+        if (seriesIDColumns.isEmpty()) {\n+            throw new IllegalStateException(\""seriesID of model[stream.\"" + model.getName() + \""] must not be empty\"");\n         }\n         // parse tag metadata\n         // this can be used to build both\n         // 1) a list of TagFamilySpec,\n         // 2) a list of IndexRule,\n-        List<TagMetadata> tags = parseTagMetadata(model, schemaBuilder, shardingColumns, schemaMetadata.group);\n+        List<TagMetadata> tags = parseTagMetadata(model, schemaBuilder, seriesIDColumns, schemaMetadata.group);\n         List<TagFamilySpec> tagFamilySpecs = schemaMetadata.extractTagFamilySpec(tags, false);\n         // iterate over tagFamilySpecs to save tag names\n         for (final TagFamilySpec tagFamilySpec : tagFamilySpecs) {\n@@ -115,7 +115,7 @@ public StreamModel registerStreamModel(Model model, BanyanDBStorageConfig config\n         final Stream.Builder builder = Stream.newBuilder();\n         builder.setMetadata(BanyandbCommon.Metadata.newBuilder().setGroup(schemaMetadata.getGroup())\n                 .setName(schemaMetadata.name()));\n-        builder.setEntity(BanyandbDatabase.Entity.newBuilder().addAllTagNames(shardingColumns));\n+        builder.setEntity(BanyandbDatabase.Entity.newBuilder().addAllTagNames(seriesIDColumns));\n         builder.addAllTagFamilies(tagFamilySpecs);\n \n         registry.put(schemaMetadata.name(), schemaBuilder.build());\n@@ -127,16 +127,16 @@ public MeasureModel registerMeasureModel(Model model, BanyanDBStorageConfig conf\n         Schema.SchemaBuilder schemaBuilder = Schema.builder().metadata(schemaMetadata);\n         Map<String, ModelColumn> modelColumnMap = model.getColumns().stream()\n                 .collect(Collectors.toMap(modelColumn -> modelColumn.getColumnName().getStorageName(), Function.identity()));\n-        // parse and set sharding keys\n-        List<String> shardingColumns = parseEntityNames(modelColumnMap);\n-        if (shardingColumns.isEmpty()) {\n+        // parse and set seriesIDs\n+        List<String> seriesIDColumns = parseEntityNames(modelColumnMap);\n+        if (seriesIDColumns.isEmpty()) {\n             throw new StorageException(\""model \"" + model.getName() + \"" doesn't contain series id\"");\n         }\n         // parse tag metadata\n         // this can be used to build both\n         // 1) a list of TagFamilySpec,\n         // 2) a list of IndexRule,\n-        MeasureMetadata tagsAndFields = parseTagAndFieldMetadata(model, schemaBuilder, shardingColumns, schemaMetadata.group);\n+        MeasureMetadata tagsAndFields = parseTagAndFieldMetadata(model, schemaBuilder, seriesIDColumns, schemaMetadata.group);\n         List<TagFamilySpec> tagFamilySpecs = schemaMetadata.extractTagFamilySpec(tagsAndFields.tags, model.getBanyanDBModelExtension().isStoreIDTag());\n         // iterate over tagFamilySpecs to save tag names\n         for (final TagFamilySpec tagFamilySpec : tagFamilySpecs) {\n@@ -150,14 +150,14 @@ public MeasureModel registerMeasureModel(Model model, BanyanDBStorageConfig conf\n                 .collect(Collectors.toList());\n \n         if (model.getBanyanDBModelExtension().isStoreIDTag()) {\n-            indexRules.add(indexRule(schemaMetadata.group, BanyanDBConverter.ID, null));\n+            indexRules.add(indexRule(schemaMetadata.group, BanyanDBConverter.ID, false, null));\n         }\n \n         final Measure.Builder builder = Measure.newBuilder();\n         builder.setMetadata(BanyandbCommon.Metadata.newBuilder().setGroup(schemaMetadata.getGroup())\n                 .setName(schemaMetadata.name()));\n         builder.setInterval(downSamplingDuration(model.getDownsampling()).format());\n-        builder.setEntity(BanyandbDatabase.Entity.newBuilder().addAllTagNames(shardingColumns));\n+        builder.setEntity(BanyandbDatabase.Entity.newBuilder().addAllTagNames(seriesIDColumns));\n         builder.addAllTagFamilies(tagFamilySpecs);\n         if (model.getBanyanDBModelExtension().isIndexMode()) {\n             builder.setIndexMode(true);\n@@ -290,10 +290,12 @@ Duration downSamplingDuration(DownSampling downSampling) {\n         }\n     }\n \n-    IndexRule indexRule(String group, String tagName, BanyanDB.MatchQuery.AnalyzerType analyzer) {\n+    IndexRule indexRule(String group, String tagName, boolean enableSort,  BanyanDB.MatchQuery.AnalyzerType analyzer) {\n         IndexRule.Builder builder = IndexRule.newBuilder()\n                                              .setMetadata(Metadata.newBuilder().setName(tagName).setGroup(group))\n                                              .setType(IndexRule.Type.TYPE_INVERTED).addTags(tagName);\n+        // *Notice*: here is a reverse logic, if enableSort is true, then setNoSort is false\n+        builder.setNoSort(!enableSort);\n         if (analyzer != null) {\n             switch (analyzer) {\n                 case KEYWORD:\n@@ -316,20 +318,20 @@ IndexRule indexRule(String group, String tagName, BanyanDB.MatchQuery.AnalyzerTy\n     }\n \n     /**\n-     * Parse sharding keys from the {@link Model}\n+     * Parse SeriesID from the {@link Model}\n      *\n      * @param modelColumnMap the mapping between column storageName and {@link ModelColumn}\n      * @return a list of column names in strict order\n      */\n     List<String> parseEntityNames(Map<String, ModelColumn> modelColumnMap) {\n-        List<ModelColumn> shardingColumns = new ArrayList<>();\n+        List<ModelColumn> seriesIDColumns = new ArrayList<>();\n         for (final ModelColumn col : modelColumnMap.values()) {\n-            if (col.getBanyanDBExtension().isShardingKey()) {\n-                shardingColumns.add(col);\n+            if (col.getBanyanDBExtension().isSeriesID()) {\n+                seriesIDColumns.add(col);\n             }\n         }\n-        return shardingColumns.stream()\n-                .sorted(Comparator.comparingInt(col -> col.getBanyanDBExtension().getShardingKeyIdx()))\n+        return seriesIDColumns.stream()\n+                .sorted(Comparator.comparingInt(col -> col.getBanyanDBExtension().getSeriesIDIdx()))\n                 .map(col -> col.getColumnName().getName())\n                 .collect(Collectors.toList());\n     }\n@@ -341,7 +343,7 @@ List<String> parseEntityNames(Map<String, ModelColumn> modelColumnMap) {\n      *\n      * @since 9.4.0 Skip {@link Record#TIME_BUCKET}\n      */\n-    List<TagMetadata> parseTagMetadata(Model model, Schema.SchemaBuilder builder, List<String> shardingColumns, String group) {\n+    List<TagMetadata> parseTagMetadata(Model model, Schema.SchemaBuilder builder, List<String> seriesIDColumns, String group) {\n         List<TagMetadata> tagMetadataList = new ArrayList<>();\n         for (final ModelColumn col : model.getColumns()) {\n             final String columnStorageName = col.getColumnName().getStorageName();\n@@ -352,9 +354,12 @@ List<TagMetadata> parseTagMetadata(Model model, Schema.SchemaBuilder builder, Li\n             builder.spec(columnStorageName, new ColumnSpec(ColumnType.TAG, col.getType()));\n             String colName = col.getColumnName().getStorageName();\n             if (col.getBanyanDBExtension().shouldIndex()) {\n-                if (!shardingColumns.contains(colName) || null != col.getBanyanDBExtension().getAnalyzer()) {\n+                if (!seriesIDColumns.contains(colName) || null != col.getBanyanDBExtension().getAnalyzer()) {\n                     tagMetadataList.add(new TagMetadata(\n-                            indexRule(group, tagSpec.getName(), col.getBanyanDBExtension().getAnalyzer()), tagSpec));\n+                        indexRule(\n+                            group, tagSpec.getName(), col.getBanyanDBExtension().isEnableSort(),\n+                            col.getBanyanDBExtension().getAnalyzer()\n+                        ), tagSpec));\n                 } else {\n                     tagMetadataList.add(new TagMetadata(null, tagSpec));\n                 }\n@@ -381,7 +386,7 @@ private static class MeasureMetadata {\n      *\n      * @since 9.4.0 Skip {@link Metrics#TIME_BUCKET}\n      */\n-    MeasureMetadata parseTagAndFieldMetadata(Model model, Schema.SchemaBuilder builder, List<String> shardingColumns, String group) {\n+    MeasureMetadata parseTagAndFieldMetadata(Model model, Schema.SchemaBuilder builder, List<String> seriesIDColumns, String group) {\n         // skip metric\n         MeasureMetadata.MeasureMetadataBuilder result = MeasureMetadata.builder();\n         for (final ModelColumn col : model.getColumns()) {\n@@ -399,9 +404,12 @@ MeasureMetadata parseTagAndFieldMetadata(Model model, Schema.SchemaBuilder build\n             String colName = col.getColumnName().getStorageName();\n \n             if (col.getBanyanDBExtension().shouldIndex()) {\n-                if (!shardingColumns.contains(colName) || null != col.getBanyanDBExtension().getAnalyzer()) {\n+                if (!seriesIDColumns.contains(colName) || null != col.getBanyanDBExtension().getAnalyzer()) {\n                     result.tag(new TagMetadata(\n-                            indexRule(group, tagSpec.getName(), col.getBanyanDBExtension().getAnalyzer()), tagSpec));\n+                        indexRule(\n+                            group, tagSpec.getName(), col.getBanyanDBExtension().isEnableSort(),\n+                            col.getBanyanDBExtension().getAnalyzer()\n+                        ), tagSpec));\n                 } else {\n                     result.tag(new TagMetadata(null, tagSpec));\n                 }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsDAO.java\nindex f736fc5ece3f..e2abb01b17a0 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBMetricsDAO.java\n@@ -77,7 +77,7 @@ public List<Metrics> multiGet(Model model, List<Metrics> metrics) throws IOExcep\n                 if (ext == null) {\n                     return;\n                 }\n-                if (ext.isShardingKey()) {\n+                if (ext.isSeriesID()) {\n                     seriesIDColumns.put(c.getColumnName().getName(), new ArrayList<>());\n                 }\n             });\n"", ""test_patch"": ""diff --git a/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java b/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java\nindex e57b9681969e..32fa3edab56c 100644\n--- a/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java\n+++ b/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java\n@@ -49,7 +49,10 @@ public void testColumnDefine() {\n                                              new SQLDatabaseExtension(),\n                                              new ElasticSearchExtension(\n                                                  ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false, true),\n-                                             new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE)\n+                                             new BanyanDBExtension(\n+                                                 -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false,\n+                                                 BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true\n+                                             )\n         );\n         Assertions.assertTrue(column.isStorageOnly());\n         Assertions.assertEquals(\""abc\"", column.getColumnName().getName());\n@@ -58,7 +61,10 @@ public void testColumnDefine() {\n                                  false, false, true, 200,\n                                  new SQLDatabaseExtension(),\n                                  new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false, true),\n-                                 new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB. MatchQuery.AnalyzerType.SIMPLE)\n+                                 new BanyanDBExtension(\n+                                     -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false,\n+                                     BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true\n+                                 )\n         );\n         Assertions.assertTrue(column.isStorageOnly());\n         Assertions.assertEquals(\""abc\"", column.getColumnName().getName());\n@@ -68,7 +74,7 @@ public void testColumnDefine() {\n                                  false, false, true, 200,\n                                  new SQLDatabaseExtension(),\n                                  new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false, true),\n-                                 new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE)\n+                                 new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true)\n         );\n         Assertions.assertFalse(column.isStorageOnly());\n         Assertions.assertEquals(\""abc\"", column.getColumnName().getName());\n@@ -82,7 +88,10 @@ public void testConflictDefinition() {\n                     new SQLDatabaseExtension(),\n                     new ElasticSearchExtension(\n                             ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false, true),\n-                    new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE)\n+                            new BanyanDBExtension(\n+                                -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false,\n+                                BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true\n+                            )\n             );\n         });\n     }\n@@ -95,7 +104,9 @@ public void testConflictDefinitionIndexOnly() {\n                     new SQLDatabaseExtension(),\n                     new ElasticSearchExtension(\n                             ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false, true),\n-                    new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE)\n+                            new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false,\n+                                                  BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true\n+                            )\n             );\n         });\n     }\n@@ -110,7 +121,23 @@ public void testConflictDefinitionStorageOnly() {\n                                 ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false, true),\n                             new BanyanDBExtension(\n                                 -1, false, BanyanDB.IndexRule.IndexType.INVERTED, false,\n-                                BanyanDB.MatchQuery.AnalyzerType.SIMPLE\n+                                BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true\n+                            )\n+            );\n+        });\n+    }\n+\n+    @Test\n+    public void testConflictDefinitionEnableSort() {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new ModelColumn(new ColumnName(c), String.class, String.class,\n+                            true, false, false, 200,\n+                            new SQLDatabaseExtension(),\n+                            new ElasticSearchExtension(\n+                                ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false, true),\n+                            new BanyanDBExtension(\n+                                -1, false, BanyanDB.IndexRule.IndexType.INVERTED, true,\n+                                null, true\n                             )\n             );\n         });\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-12808"", ""pr_id"": 12808, ""issue_id"": 12685, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] Support module definition change in BanyanDB storage.\n### Search before asking\n\n- [X] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nCurrently, we don't do column validation(name, type, existing) during booting, and would not upgrade the column update when the latest and existing are compatible. \r\n\r\nWe should consider adding this. Elasticsearch storage implementation would be a good reference.\n\n### Use case\n\n_No response_\n\n### Related issues\n\n_No response_\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [X] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 128, ""test_files_count"": 1, ""non_test_files_count"": 8, ""pr_changed_files"": ["".github/workflows/skywalking.yaml"", ""docs/en/changes/changes.md"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEBPFProfilingScheduleQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEventQueryDAO.java"", ""oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java"", ""test/e2e-v2/cases/profiling/ebpf/access_log/banyandb/e2e.yaml""], ""pr_changed_test_files"": [""test/e2e-v2/cases/profiling/ebpf/access_log/banyandb/e2e.yaml""], ""base_commit"": ""f6a821ad480ec37ffafac4b4688d2af279d4a462"", ""head_commit"": ""8ae15641dc8b20e0bd925b8a6779c018f64ff8cc"", ""repo_url"": ""https://github.com/apache/skywalking/pull/12808"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/12808"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-02T04:49:20.000Z"", ""patch"": ""diff --git a/.github/workflows/skywalking.yaml b/.github/workflows/skywalking.yaml\nindex 8edb000dc007..3e1e66e40ec1 100644\n--- a/.github/workflows/skywalking.yaml\n+++ b/.github/workflows/skywalking.yaml\n@@ -436,7 +436,7 @@ jobs:\n           - name: Log ES 7.17.10\n             config: test/e2e-v2/cases/log/es/e2e.yaml\n             env: ES_VERSION=7.17.10\n-          - name: Log ES 8.8.1 Shardng\n+          - name: Log ES 8.8.1 Sharding\n             config: test/e2e-v2/cases/log/es/es-sharding/e2e.yaml\n             env: ES_VERSION=8.8.1\n           - name: Log BanyanDB\n\ndiff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 9d021e01fccc..4dda6f327cc0 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -30,6 +30,8 @@\n * Bump up netty to 4.1.115, grpc to 1.68.1, boringssl to 2.0.69.\n * BanyanDB: Support update the Group settings when OAP starting.\n * BanyanDB: Introduce index mode and refactor banyandb group settings.\n+* BanyanDB: Support update the Schema when OAP starting.\n+* BanyanDB: Speed up OAP booting while initializing BanyanDB.\n \n #### UI\n \n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java\nindex 5f524006303f..9c8c97f723b8 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBAggregationQueryDAO.java\n@@ -70,7 +70,7 @@ public List<SelectedRecord> sortMetrics(TopNCondition condition, String valueCol\n             // 2) additional conditions are all group by tags\n             if (CollectionUtils.isEmpty(additionalConditions) ||\n                     additionalConditions.stream().map(KeyValue::getKey).collect(Collectors.toSet())\n-                            .equals(ImmutableSet.copyOf(schema.getTopNSpec().getGroupByTagNames()))) {\n+                            .equals(ImmutableSet.copyOf(schema.getTopNSpec().getGroupByTagNamesList()))) {\n                 return serverSideTopN(condition, schema, spec, timestampRange, additionalConditions);\n             }\n         }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\nindex 74036fcf3384..0b3cad0463ff 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/BanyanDBIndexInstaller.java\n@@ -19,13 +19,28 @@\n package org.apache.skywalking.oap.server.storage.plugin.banyandb;\n \n import io.grpc.Status;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.banyandb.common.v1.BanyandbCommon;\n+import org.apache.skywalking.banyandb.common.v1.BanyandbCommon.Group;\n+import org.apache.skywalking.banyandb.common.v1.BanyandbCommon.IntervalRule;\n+import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase;\n import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase.Measure;\n import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase.Stream;\n+import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase.IndexRule;\n+import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase.IndexRuleBinding;\n+import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase.TopNAggregation;\n import org.apache.skywalking.banyandb.v1.client.BanyanDBClient;\n import org.apache.skywalking.banyandb.v1.client.grpc.exception.BanyanDBException;\n import org.apache.skywalking.banyandb.v1.client.metadata.MetadataCache;\n+import org.apache.skywalking.banyandb.v1.client.metadata.ResourceExist;\n import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.RunningMode;\n import org.apache.skywalking.oap.server.core.config.DownSamplingConfigService;\n import org.apache.skywalking.oap.server.core.storage.StorageException;\n import org.apache.skywalking.oap.server.core.storage.model.Model;\n@@ -36,6 +51,9 @@\n \n @Slf4j\n public class BanyanDBIndexInstaller extends ModelInstaller {\n+    // BanyanDB group setting aligned with the OAP settings\n+    private static final Set<String/*group name*/> GROUP_ALIGNED = new HashSet<>();\n+    private static final Map<String/*group name*/, Map<String/*rule name*/, IndexRule>> GROUP_INDEX_RULES = new HashMap<>();\n     private final BanyanDBStorageConfig config;\n \n     public BanyanDBIndexInstaller(Client client, ModuleManager moduleManager, BanyanDBStorageConfig config) {\n@@ -56,18 +74,37 @@ public boolean isExists(Model model) throws StorageException {\n         try {\n             final BanyanDBClient c = ((BanyanDBStorageClient) this.client).client;\n             // first check resource existence and create group if necessary\n-            final boolean resourceExist = metadata.checkResourceExistence(c);\n+            final boolean resourceExist = checkResourceExistence(metadata, c);\n             if (!resourceExist) {\n                 return false;\n             } else {\n                 // register models only locally(Schema cache) but not remotely\n                 if (model.isRecord()) { // stream\n-                    MetadataRegistry.INSTANCE.registerStreamModel(model, config, downSamplingConfigService);\n+                    StreamModel streamModel = MetadataRegistry.INSTANCE.registerStreamModel(\n+                        model, config, downSamplingConfigService);\n+                    if (!RunningMode.isNoInitMode()) {\n+                        checkStream(streamModel.getStream(), c);\n+                        checkIndexRules(model.getName(), streamModel.getIndexRules(), c);\n+                        checkIndexRuleBinding(\n+                            streamModel.getIndexRules(), metadata.getGroup(), metadata.name(),\n+                            BanyandbCommon.Catalog.CATALOG_STREAM, c\n+                        );\n+                        // Stream not support server side TopN pre-aggregation\n+                    }\n                 } else { // measure\n-                    MetadataRegistry.INSTANCE.registerMeasureModel(model, config, downSamplingConfigService);\n+                    MeasureModel measureModel = MetadataRegistry.INSTANCE.registerMeasureModel(model, config, downSamplingConfigService);\n+                    if (!RunningMode.isNoInitMode()) {\n+                        checkMeasure(measureModel.getMeasure(), c);\n+                        checkIndexRules(model.getName(), measureModel.getIndexRules(), c);\n+                        checkIndexRuleBinding(\n+                            measureModel.getIndexRules(), metadata.getGroup(), metadata.name(),\n+                            BanyandbCommon.Catalog.CATALOG_MEASURE, c\n+                        );\n+                        checkTopNAggregation(model, c);\n+                    }\n                 }\n                 // pre-load remote schema for java client\n-                MetadataCache.EntityMetadata remoteMeta = metadata.updateRemoteSchema(c);\n+                MetadataCache.EntityMetadata remoteMeta = updateSchemaFromServer(metadata, c);\n                 if (remoteMeta == null) {\n                     throw new IllegalStateException(\""inconsistent state: metadata:\"" + metadata + \"", remoteMeta: null\"");\n                 }\n@@ -91,10 +128,15 @@ public void createTable(Model model) throws StorageException {\n                     log.info(\""install stream schema {}\"", model.getName());\n                     final BanyanDBClient client = ((BanyanDBStorageClient) this.client).client;\n                     try {\n+                        client.define(stream);\n                         if (CollectionUtils.isNotEmpty(streamModel.getIndexRules())) {\n-                            client.define(stream, streamModel.getIndexRules());\n-                        } else {\n-                            client.define(stream);\n+                            for (IndexRule indexRule : streamModel.getIndexRules()) {\n+                                defineIndexRule(model.getName(), indexRule, client);\n+                            }\n+                            defineIndexRuleBinding(\n+                                streamModel.getIndexRules(), stream.getMetadata().getGroup(), stream.getMetadata().getName(),\n+                                BanyandbCommon.Catalog.CATALOG_STREAM, client\n+                            );\n                         }\n                     } catch (BanyanDBException ex) {\n                         if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n@@ -115,10 +157,15 @@ public void createTable(Model model) throws StorageException {\n                     log.info(\""install measure schema {}\"", model.getName());\n                     final BanyanDBClient client = ((BanyanDBStorageClient) this.client).client;\n                     try {\n+                        client.define(measure);\n                         if (CollectionUtils.isNotEmpty(measureModel.getIndexRules())) {\n-                            client.define(measure, measureModel.getIndexRules());\n-                        } else {\n-                            client.define(measure);\n+                            for (IndexRule indexRule : measureModel.getIndexRules()) {\n+                                defineIndexRule(model.getName(), indexRule, client);\n+                            }\n+                            defineIndexRuleBinding(\n+                                measureModel.getIndexRules(), measure.getMetadata().getGroup(), measure.getMetadata().getName(),\n+                                BanyandbCommon.Catalog.CATALOG_MEASURE, client\n+                            );\n                         }\n                     } catch (BanyanDBException ex) {\n                         if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n@@ -131,7 +178,7 @@ public void createTable(Model model) throws StorageException {\n                     }\n                     final MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(model);\n                     try {\n-                        schema.installTopNAggregation(client);\n+                        defineTopNAggregation(schema, client);\n                     } catch (BanyanDBException ex) {\n                         if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n                             log.info(\""Measure schema {}_{} TopN({}) already created by another OAP node\"",\n@@ -148,4 +195,369 @@ public void createTable(Model model) throws StorageException {\n             throw new StorageException(\""fail to create schema \"" + model.getName(), ex);\n         }\n     }\n+\n+    /**\n+     * Check if the group settings need to be updated\n+     */\n+    private boolean checkGroup(MetadataRegistry.SchemaMetadata metadata, BanyanDBClient client) throws BanyanDBException {\n+        Group g = client.findGroup(metadata.getGroup());\n+        return g.getResourceOpts().getShardNum() != metadata.getShard()\n+            || g.getResourceOpts().getSegmentInterval().getNum() != metadata.getSegmentIntervalDays()\n+            || g.getResourceOpts().getTtl().getNum() != metadata.getTtlDays();\n+    }\n+\n+    private boolean checkResourceExistence(MetadataRegistry.SchemaMetadata metadata,\n+                                           BanyanDBClient client) throws BanyanDBException {\n+        ResourceExist resourceExist;\n+        Group.Builder gBuilder\n+            = Group.newBuilder()\n+                   .setMetadata(BanyandbCommon.Metadata.newBuilder().setName(metadata.getGroup()))\n+                   .setResourceOpts(BanyandbCommon.ResourceOpts.newBuilder()\n+                                                               .setShardNum(metadata.getShard())\n+                                                               .setSegmentInterval(\n+                                                                   IntervalRule.newBuilder()\n+                                                                               .setUnit(\n+                                                                                   IntervalRule.Unit.UNIT_DAY)\n+                                                                               .setNum(\n+                                                                                   metadata.getSegmentIntervalDays()))\n+                                                               .setTtl(\n+                                                                   IntervalRule.newBuilder()\n+                                                                               .setUnit(\n+                                                                                   IntervalRule.Unit.UNIT_DAY)\n+                                                                               .setNum(\n+                                                                                   metadata.getTtlDays())));\n+        switch (metadata.getKind()) {\n+            case STREAM:\n+                resourceExist = client.existStream(metadata.getGroup(), metadata.name());\n+                gBuilder.setCatalog(BanyandbCommon.Catalog.CATALOG_STREAM).build();\n+                break;\n+            case MEASURE:\n+                resourceExist = client.existMeasure(metadata.getGroup(), metadata.name());\n+                gBuilder.setCatalog(BanyandbCommon.Catalog.CATALOG_MEASURE).build();\n+                break;\n+            default:\n+                throw new IllegalStateException(\""unknown metadata kind: \"" + metadata.getKind());\n+        }\n+        if (!RunningMode.isNoInitMode()) {\n+            if (!GROUP_ALIGNED.contains(metadata.getGroup())) {\n+                // create the group if not exist\n+                if (!resourceExist.hasGroup()) {\n+                    try {\n+                        Group g = client.define(gBuilder.build());\n+                        if (g != null) {\n+                            log.info(\""group {} created\"", g.getMetadata().getName());\n+                        }\n+                    } catch (BanyanDBException ex) {\n+                        if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n+                            log.info(\""group {} already created by another OAP node\"", metadata.getGroup());\n+                        } else {\n+                            throw ex;\n+                        }\n+                    }\n+                } else {\n+                    // update the group if necessary\n+                    if (this.checkGroup(metadata, client)) {\n+                        client.update(gBuilder.build());\n+                        log.info(\""group {} updated\"", metadata.getGroup());\n+                    }\n+                }\n+                // mark the group as aligned\n+                GROUP_ALIGNED.add(metadata.getGroup());\n+            }\n+        }\n+        return resourceExist.hasResource();\n+    }\n+\n+    /**\n+     * Update the schema from the banyanDB server side for the java client cache\n+     */\n+    private MetadataCache.EntityMetadata updateSchemaFromServer(MetadataRegistry.SchemaMetadata metadata, BanyanDBClient client) throws BanyanDBException {\n+        switch (metadata.getKind()) {\n+            case STREAM:\n+                return client.updateStreamMetadataCacheFromSever(metadata.getGroup(), metadata.name());\n+            case MEASURE:\n+                return client.updateMeasureMetadataCacheFromSever(metadata.getGroup(), metadata.name());\n+            default:\n+                throw new IllegalStateException(\""unknown metadata kind: \"" + metadata.getKind());\n+        }\n+    }\n+\n+    private void defineTopNAggregation(MetadataRegistry.Schema schema, BanyanDBClient client) throws BanyanDBException {\n+        if (schema.getTopNSpec() == null) {\n+            if (schema.getMetadata().getKind() == MetadataRegistry.Kind.MEASURE) {\n+                log.debug(\""skip null TopN Schema for [{}]\"", schema.getMetadata().name());\n+            }\n+            return;\n+        }\n+        try {\n+            client.define(schema.getTopNSpec());\n+            log.info(\""installed TopN schema for measure {}\"", schema.getMetadata().name());\n+        } catch (BanyanDBException ex) {\n+            if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n+                log.info(\""TopNAggregation {} already created by another OAP node\"", schema.getTopNSpec());\n+            } else {\n+                throw ex;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check if the index rule conflicts with the exist one.\n+     */\n+    private void checkIndexRuleConflicts(String modelName, IndexRule indexRule, IndexRule existRule) {\n+        if (!existRule.equals(indexRule)) {\n+            throw new IllegalStateException(\n+                \""conflict index rule in model: \"" + modelName + \"": \"" + indexRule + \"" vs exist rule: \"" + existRule);\n+        }\n+    }\n+\n+    /**\n+     * Check if the index rule has been processed.\n+     * If the index rule has been processed, return true.\n+     * Otherwise, return false and mark the index rule as processed.\n+     */\n+    private boolean checkIndexRuleProcessed(String modelName, IndexRule indexRule) {\n+        Map<String, IndexRule> rules = GROUP_INDEX_RULES.computeIfAbsent(\n+            indexRule.getMetadata().getGroup(), k -> new HashMap<>());\n+        IndexRule existRule = rules.get(indexRule.getMetadata().getName());\n+        if (existRule != null) {\n+            checkIndexRuleConflicts(modelName, indexRule, existRule);\n+            return true;\n+        } else {\n+            rules.put(indexRule.getMetadata().getName(), indexRule);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Define the index rule if not exist and no conflict.\n+     */\n+    private void defineIndexRule(String modelName,\n+                                 IndexRule indexRule,\n+                                 BanyanDBClient client) throws BanyanDBException {\n+        if (checkIndexRuleProcessed(modelName, indexRule)) {\n+            return;\n+        }\n+        try {\n+            client.define(indexRule);\n+            log.info(\""new IndexRule created: {}\"", indexRule.getMetadata().getName());\n+        } catch (BanyanDBException ex) {\n+            if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n+                log.info(\""IndexRule {} already created by another OAP node\"", indexRule.getMetadata().getName());\n+            } else {\n+                throw ex;\n+            }\n+        }\n+    }\n+\n+    private void defineIndexRuleBinding(List<IndexRule> indexRules,\n+                                        String group,\n+                                        String name,\n+                                        BanyandbCommon.Catalog catalog,\n+                                        BanyanDBClient client) throws BanyanDBException {\n+        List<String> indexRuleNames = indexRules.stream().map(indexRule -> indexRule.getMetadata().getName()).collect(\n+            Collectors.toList());\n+        try {\n+            client.define(IndexRuleBinding.newBuilder()\n+                                          .setMetadata(BanyandbCommon.Metadata.newBuilder()\n+                                                                              .setGroup(group)\n+                                                                              .setName(name))\n+                                          .setSubject(BanyandbDatabase.Subject.newBuilder()\n+                                                                              .setName(name)\n+                                                                              .setCatalog(catalog))\n+                                          .addAllRules(indexRuleNames)\n+                                          .build());\n+            log.info(\""new IndexRuleBinding created: {}\"", name);\n+        } catch (BanyanDBException ex) {\n+            if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n+                log.info(\""IndexRuleBinding {} already created by another OAP node\"", name);\n+            } else {\n+                throw ex;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check if the measure exists and update it if necessary\n+     */\n+    private void checkMeasure(Measure measure, BanyanDBClient client) throws BanyanDBException {\n+        Measure hisMeasure = client.findMeasure(measure.getMetadata().getGroup(), measure.getMetadata().getName());\n+        if (hisMeasure == null) {\n+            throw new IllegalStateException(\""Measure: \"" + measure.getMetadata().getName() + \"" exist but can't find it from BanyanDB server\"");\n+        } else {\n+            boolean equals = hisMeasure.toBuilder()\n+                                       .clearUpdatedAt()\n+                                       .clearMetadata()\n+                                       .build()\n+                                       .equals(measure.toBuilder().clearMetadata().build());\n+            if (!equals) {\n+                client.update(measure);\n+                log.info(\""update Measure: {} from: {} to: {}\"", hisMeasure.getMetadata().getName(), hisMeasure, measure);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check if the stream exists and update it if necessary\n+     */\n+    private void checkStream(Stream stream, BanyanDBClient client) throws BanyanDBException {\n+        Stream hisStream = client.findStream(stream.getMetadata().getGroup(), stream.getMetadata().getName());\n+        if (hisStream == null) {\n+            throw new IllegalStateException(\""Stream: \"" + stream.getMetadata().getName() + \"" exist but can't find it from BanyanDB server\"");\n+        } else {\n+            boolean equals = hisStream.toBuilder()\n+                                      .clearUpdatedAt()\n+                                      .clearMetadata()\n+                                      .build()\n+                                      .equals(stream.toBuilder().clearUpdatedAt().clearMetadata().build());\n+            if (!equals) {\n+                client.update(stream);\n+                log.info(\""update Stream: {} from: {} to: {}\"", hisStream.getMetadata().getName(), hisStream, stream);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check if the index rules exist and update them if necessary\n+     */\n+    private void checkIndexRules(String modelName, List<IndexRule> indexRules, BanyanDBClient client) throws BanyanDBException {\n+        for (IndexRule indexRule : indexRules) {\n+            if (checkIndexRuleProcessed(modelName, indexRule)) {\n+                return;\n+            }\n+            IndexRule hisIndexRule = client.findIndexRule(\n+                indexRule.getMetadata().getGroup(), indexRule.getMetadata().getName());\n+            if (hisIndexRule == null) {\n+                try {\n+                    client.define(indexRule);\n+                    log.info(\""new IndexRule created: {}\"", indexRule);\n+                } catch (BanyanDBException ex) {\n+                    if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n+                        log.info(\""IndexRule {} already created by another OAP node\"", indexRule);\n+                    } else {\n+                        throw ex;\n+                    }\n+                }\n+            } else {\n+                boolean equals = hisIndexRule.toBuilder()\n+                                             .clearUpdatedAt()\n+                                             .clearMetadata()\n+                                             .build()\n+                                             .equals(indexRule.toBuilder().clearUpdatedAt().clearMetadata().build());\n+                if (!equals) {\n+                    client.update(indexRule);\n+                    log.info(\n+                        \""update IndexRule: {} from: {} to: {}\"", hisIndexRule.getMetadata().getName(), hisIndexRule,\n+                        indexRule\n+                    );\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check if the index rule binding exists and update it if necessary.\n+     * If the old index rule is not in the index rule binding, delete it.\n+     */\n+    private void checkIndexRuleBinding(List<IndexRule> indexRules,\n+                                       String group,\n+                                       String name,\n+                                       BanyandbCommon.Catalog catalog,\n+                                       BanyanDBClient client) throws BanyanDBException {\n+        if (indexRules.isEmpty()) {\n+            return;\n+        }\n+        List<String> indexRuleNames = indexRules.stream().map(indexRule -> indexRule.getMetadata().getName()).collect(\n+            Collectors.toList());\n+\n+        IndexRuleBinding indexRuleBinding = IndexRuleBinding.newBuilder()\n+                                                            .setMetadata(BanyandbCommon.Metadata.newBuilder()\n+                                                                                                .setGroup(\n+                                                                                                    group)\n+                                                                                                .setName(name))\n+                                                            .setSubject(BanyandbDatabase.Subject.newBuilder()\n+                                                                                                .setName(name)\n+                                                                                                .setCatalog(\n+                                                                                                    catalog))\n+                                                            .addAllRules(indexRuleNames).build();\n+        IndexRuleBinding hisIndexRuleBinding = client.findIndexRuleBinding(group, name);\n+        if (hisIndexRuleBinding == null) {\n+            try {\n+                client.define(indexRuleBinding);\n+                log.info(\""new IndexRuleBinding created: {}\"", indexRuleBinding);\n+            } catch (BanyanDBException ex) {\n+                if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n+                    log.info(\""IndexRuleBinding {} already created by another OAP node\"", indexRuleBinding);\n+                } else {\n+                    throw ex;\n+                }\n+            }\n+        } else {\n+            boolean equals = hisIndexRuleBinding.toBuilder()\n+                                                .clearUpdatedAt()\n+                                                .clearMetadata()\n+                                                .clearBeginAt()\n+                                                .clearExpireAt()\n+                                                .build()\n+                                                .equals(indexRuleBinding.toBuilder().clearMetadata().build());\n+            if (!equals) {\n+                // update binding and use the same begin expire time\n+                client.update(indexRuleBinding.toBuilder()\n+                                              .setBeginAt(hisIndexRuleBinding.getBeginAt())\n+                                              .setExpireAt(hisIndexRuleBinding.getExpireAt())\n+                                              .build());\n+                log.info(\n+                    \""update IndexRuleBinding: {} from: {} to: {}\"", hisIndexRuleBinding.getMetadata().getName(),\n+                    hisIndexRuleBinding, indexRuleBinding\n+                );\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check if the TopN aggregation exists and update it if necessary.\n+     * If the old TopN aggregation is not in the schema, delete it.\n+     */\n+    private void checkTopNAggregation(Model model, BanyanDBClient client) throws BanyanDBException {\n+        MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(model);\n+        String topNName = MetadataRegistry.Schema.formatTopNName(schema.getMetadata().name());\n+        TopNAggregation hisTopNAggregation = client.findTopNAggregation(schema.getMetadata().getGroup(), topNName);\n+\n+        if (schema.getTopNSpec() != null) {\n+            TopNAggregation topNAggregation = schema.getTopNSpec();\n+            if (hisTopNAggregation == null) {\n+                try {\n+                    client.define(topNAggregation);\n+                    log.info(\""new TopNAggregation created: {}\"", topNAggregation);\n+                } catch (BanyanDBException ex) {\n+                    if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n+                        log.info(\""TopNAggregation {} already created by another OAP node\"", topNAggregation);\n+                    } else {\n+                        throw ex;\n+                    }\n+                }\n+            } else {\n+                boolean equals = hisTopNAggregation.toBuilder()\n+                                                   .clearUpdatedAt()\n+                                                   .clearMetadata()\n+                                                   .build()\n+                                                   .equals(topNAggregation.toBuilder().clearMetadata().build());\n+                if (!equals) {\n+                    client.update(topNAggregation);\n+                    log.info(\n+                        \""update TopNAggregation: {} from: {} to: {}\"", hisTopNAggregation.getMetadata().getName(),\n+                        hisTopNAggregation, topNAggregation\n+                    );\n+                }\n+            }\n+        } else {\n+            if (hisTopNAggregation != null) {\n+                client.deleteTopNAggregation(schema.getMetadata().getGroup(), topNName);\n+                log.info(\n+                    \""delete deprecated TopNAggregation: {} from group: {}\"", hisTopNAggregation.getMetadata().getName(),\n+                    schema.getMetadata().getGroup()\n+                );\n+            }\n+        }\n+    }\n }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\nindex 8813773386c8..c5214b986c8f 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/MetadataRegistry.java\n@@ -18,25 +18,17 @@\n \n package org.apache.skywalking.oap.server.storage.plugin.banyandb;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.gson.JsonObject;\n-import io.grpc.Status;\n import lombok.Builder;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.Getter;\n-import lombok.NoArgsConstructor;\n import lombok.RequiredArgsConstructor;\n-import lombok.Setter;\n import lombok.Singular;\n import lombok.ToString;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.skywalking.banyandb.common.v1.BanyandbCommon;\n-import org.apache.skywalking.banyandb.common.v1.BanyandbCommon.Catalog;\n-import org.apache.skywalking.banyandb.common.v1.BanyandbCommon.Group;\n-import org.apache.skywalking.banyandb.common.v1.BanyandbCommon.IntervalRule;\n import org.apache.skywalking.banyandb.common.v1.BanyandbCommon.Metadata;\n-import org.apache.skywalking.banyandb.common.v1.BanyandbCommon.ResourceOpts;\n import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase;\n import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase.CompressionMethod;\n import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase.EncodingMethod;\n@@ -50,11 +42,7 @@\n import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase.TagType;\n import org.apache.skywalking.banyandb.database.v1.BanyandbDatabase.TopNAggregation;\n import org.apache.skywalking.banyandb.model.v1.BanyandbModel;\n-import org.apache.skywalking.banyandb.v1.client.BanyanDBClient;\n-import org.apache.skywalking.banyandb.v1.client.grpc.exception.BanyanDBException;\n import org.apache.skywalking.banyandb.v1.client.metadata.Duration;\n-import org.apache.skywalking.banyandb.v1.client.metadata.MetadataCache;\n-import org.apache.skywalking.banyandb.v1.client.metadata.ResourceExist;\n import org.apache.skywalking.oap.server.core.analysis.DownSampling;\n import org.apache.skywalking.oap.server.core.analysis.metrics.IntList;\n import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n@@ -77,7 +65,6 @@\n import java.util.ArrayList;\n import java.util.Comparator;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n@@ -90,9 +77,6 @@\n public enum MetadataRegistry {\n     INSTANCE;\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n-    // BanyanDB group setting aligned with the OAP settings\n-    private static final Set<String> GROUP_ALIGNED = new HashSet<>();\n     private final Map<String, Schema> registry = new HashMap<>();\n \n     public StreamModel registerStreamModel(Model model, BanyanDBStorageConfig config, DownSamplingConfigService configService) {\n@@ -187,13 +171,13 @@ public MeasureModel registerMeasureModel(Model model, BanyanDBStorageConfig conf\n             schemaBuilder.field(field.getName());\n         }\n         // parse TopN\n-        schemaBuilder.topNSpec(parseTopNSpec(model, schemaMetadata.name()));\n+        schemaBuilder.topNSpec(parseTopNSpec(model, schemaMetadata.group, schemaMetadata.name()));\n \n         registry.put(schemaMetadata.name(), schemaBuilder.build());\n         return new MeasureModel(builder.build(), indexRules);\n     }\n \n-    private TopNSpec parseTopNSpec(final Model model, final String measureName)\n+    private TopNAggregation parseTopNSpec(final Model model, final String group, final String measureName)\n             throws StorageException {\n         if (model.getBanyanDBModelExtension().getTopN() == null) {\n             return null;\n@@ -208,14 +192,16 @@ private TopNSpec parseTopNSpec(final Model model, final String measureName)\n         if (CollectionUtils.isEmpty(model.getBanyanDBModelExtension().getTopN().getGroupByTagNames())) {\n             throw new StorageException(\""invalid groupBy tags: \"" + model.getBanyanDBModelExtension().getTopN().getGroupByTagNames());\n         }\n-        return TopNSpec.builder()\n-                .name(measureName + \""_topn\"")\n-                .lruSize(model.getBanyanDBModelExtension().getTopN().getLruSize())\n-                .countersNumber(model.getBanyanDBModelExtension().getTopN().getCountersNumber())\n-                .fieldName(valueColumnOpt.get().getValueCName())\n-                .groupByTagNames(model.getBanyanDBModelExtension().getTopN().getGroupByTagNames())\n-                .sort(BanyandbModel.Sort.SORT_UNSPECIFIED) // include both TopN and BottomN\n-                .build();\n+        return TopNAggregation.newBuilder()\n+                              .setMetadata(\n+                                  Metadata.newBuilder().setGroup(group).setName(Schema.formatTopNName(measureName)))\n+                              .setSourceMeasure(Metadata.newBuilder().setGroup(group).setName(measureName))\n+                              .setFieldValueSort(BanyandbModel.Sort.SORT_UNSPECIFIED) // include both TopN and BottomN\n+                              .setFieldName(valueColumnOpt.get().getValueCName())\n+                              .addAllGroupByTagNames(model.getBanyanDBModelExtension().getTopN().getGroupByTagNames())\n+                              .setCountersNumber(model.getBanyanDBModelExtension().getTopN().getCountersNumber())\n+                              .setLruSize(model.getBanyanDBModelExtension().getTopN().getLruSize())\n+                              .build();\n     }\n \n     public Schema findMetadata(final Model model) {\n@@ -306,8 +292,8 @@ Duration downSamplingDuration(DownSampling downSampling) {\n \n     IndexRule indexRule(String group, String tagName, BanyanDB.MatchQuery.AnalyzerType analyzer) {\n         IndexRule.Builder builder = IndexRule.newBuilder()\n-                .setMetadata(Metadata.newBuilder().setName(tagName).setGroup(group))\n-                .setType(IndexRule.Type.TYPE_INVERTED).addTags(tagName);\n+                                             .setMetadata(Metadata.newBuilder().setName(tagName).setGroup(group))\n+                                             .setType(IndexRule.Type.TYPE_INVERTED).addTags(tagName);\n         if (analyzer != null) {\n             switch (analyzer) {\n                 case KEYWORD:\n@@ -553,36 +539,6 @@ static String formatName(String modelName, DownSampling downSampling) {\n             return modelName + \""_\"" + downSampling.getName();\n         }\n \n-        public Optional<Object> findRemoteSchema(BanyanDBClient client) throws BanyanDBException {\n-            try {\n-                switch (kind) {\n-                    case STREAM:\n-                        return Optional.ofNullable(client.findStream(this.group, this.name()));\n-                    case MEASURE:\n-                        return Optional.ofNullable(client.findMeasure(this.group, this.name()));\n-                    default:\n-                        throw new IllegalStateException(\""should not reach here\"");\n-                }\n-            } catch (BanyanDBException ex) {\n-                if (ex.getStatus().equals(Status.Code.NOT_FOUND)) {\n-                    return Optional.empty();\n-                }\n-\n-                throw ex;\n-            }\n-        }\n-\n-        public MetadataCache.EntityMetadata updateRemoteSchema(BanyanDBClient client) throws BanyanDBException {\n-            switch (kind) {\n-                case STREAM:\n-                    return client.updateStreamMetadataCacheFromSever(this.group, this.name());\n-                case MEASURE:\n-                    return client.updateMeasureMetadataCacheFromSever(this.group, this.name());\n-                default:\n-                    throw new IllegalStateException(\""should not reach here\"");\n-            }\n-        }\n-\n         private List<TagFamilySpec> extractTagFamilySpec(List<TagMetadata> tagMetadataList, boolean shouldAddID) {\n             final String indexFamily = SchemaMetadata.this.indexFamily();\n             final String nonIndexFamily = SchemaMetadata.this.nonIndexFamily();\n@@ -603,95 +559,6 @@ private List<TagFamilySpec> extractTagFamilySpec(List<TagMetadata> tagMetadataLi\n             return tagFamilySpecs;\n         }\n \n-        /**\n-         * Check if the group settings need to be updated\n-         */\n-        private boolean checkGroupUpdate(BanyanDBClient client) throws BanyanDBException {\n-            Group g = client.findGroup(this.group);\n-            return g.getResourceOpts().getShardNum() != this.shard\n-                    || g.getResourceOpts().getSegmentInterval().getNum() != this.segmentIntervalDays\n-                    || g.getResourceOpts().getTtl().getNum() != this.ttlDays;\n-        }\n-\n-        public boolean checkResourceExistence(BanyanDBClient client) throws BanyanDBException {\n-            ResourceExist resourceExist;\n-            Group.Builder gBuilder\n-                    = Group.newBuilder()\n-                    .setMetadata(Metadata.newBuilder().setName(this.group))\n-                    .setResourceOpts(ResourceOpts.newBuilder()\n-                            .setShardNum(this.shard)\n-                            .setSegmentInterval(\n-                                    IntervalRule.newBuilder()\n-                                            .setUnit(\n-                                                    IntervalRule.Unit.UNIT_DAY)\n-                                            .setNum(\n-                                                    this.segmentIntervalDays))\n-                            .setTtl(\n-                                    IntervalRule.newBuilder()\n-                                            .setUnit(\n-                                                    IntervalRule.Unit.UNIT_DAY)\n-                                            .setNum(\n-                                                    this.ttlDays)));\n-            switch (kind) {\n-                case STREAM:\n-                    resourceExist = client.existStream(this.group, this.name());\n-                    gBuilder.setCatalog(Catalog.CATALOG_STREAM).build();\n-                    if (!GROUP_ALIGNED.contains(this.group)) {\n-                        // create the group if not exist\n-                        if (!resourceExist.hasGroup()) {\n-                            try {\n-                                Group g = client.define(gBuilder.build());\n-                                if (g != null) {\n-                                    log.info(\""group {} created\"", g.getMetadata().getName());\n-                                }\n-                            } catch (BanyanDBException ex) {\n-                                if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n-                                    log.info(\""group {} already created by another OAP node\"", this.group);\n-                                } else {\n-                                    throw ex;\n-                                }\n-                            }\n-                        } else {\n-                            // update the group if necessary\n-                            if (this.checkGroupUpdate(client)) {\n-                                client.update(gBuilder.build());\n-                                log.info(\""group {} updated\"", this.group);\n-                            }\n-                        }\n-                        // mark the group as aligned\n-                        GROUP_ALIGNED.add(this.group);\n-                    }\n-                    return resourceExist.hasResource();\n-                case MEASURE:\n-                    resourceExist = client.existMeasure(this.group, this.name());\n-                    gBuilder.setCatalog(Catalog.CATALOG_MEASURE).build();\n-                    if (!GROUP_ALIGNED.contains(this.group)) {\n-                        if (!resourceExist.hasGroup()) {\n-                            try {\n-                                Group g = client.define(gBuilder.build());\n-                                if (g != null) {\n-                                    log.info(\""group {} created\"", g.getMetadata().getName());\n-                                }\n-                            } catch (BanyanDBException ex) {\n-                                if (ex.getStatus().equals(Status.Code.ALREADY_EXISTS)) {\n-                                    log.info(\""group {} already created by another OAP node\"", this.group);\n-                                } else {\n-                                    throw ex;\n-                                }\n-                            }\n-                        } else {\n-                            if (this.checkGroupUpdate(client)) {\n-                                client.update(gBuilder.build());\n-                                log.info(\""group {} updated\"", this.group);\n-                            }\n-                        }\n-                    }\n-                    return resourceExist.hasResource();\n-                default:\n-                    throw new IllegalStateException(\""should not reach here\"");\n-            }\n-        }\n-\n         /**\n          * @return name of the Stream/Measure in the BanyanDB\n          */\n@@ -761,52 +628,17 @@ public static class Schema {\n \n         @Getter\n         @Nullable\n-        private final TopNSpec topNSpec;\n+        private final TopNAggregation topNSpec;\n \n         public ColumnSpec getSpec(String columnName) {\n             return this.specs.get(columnName);\n         }\n \n-        public void installTopNAggregation(BanyanDBClient client) throws BanyanDBException {\n-            if (this.getTopNSpec() == null) {\n-                if (this.metadata.kind == Kind.MEASURE) {\n-                    log.debug(\""skip null TopN Schema for [{}]\"", metadata.getModelName());\n-                }\n-                return;\n-            }\n-            TopNAggregation.Builder builder\n-                    = TopNAggregation.newBuilder()\n-                    .setMetadata(Metadata.newBuilder()\n-                            .setGroup(getMetadata().getGroup())\n-                            .setName(this.getTopNSpec().getName()))\n-\n-                    .setSourceMeasure(Metadata.newBuilder()\n-                            .setGroup(getMetadata().getGroup())\n-                            .setName(getMetadata().name()))\n-                    .setFieldValueSort(this.getTopNSpec().getSort())\n-                    .setFieldName(this.getTopNSpec().getFieldName())\n-                    .addAllGroupByTagNames(this.getTopNSpec().getGroupByTagNames())\n-                    .setCountersNumber(this.getTopNSpec().getCountersNumber())\n-                    .setLruSize(this.getTopNSpec().getLruSize());\n-            client.define(builder.build());\n-            log.info(\""installed TopN schema for measure {}\"", getMetadata().name());\n+        public static String formatTopNName(String measureName) {\n+            return measureName + \""_topn\"";\n         }\n     }\n \n-    @Builder\n-    @EqualsAndHashCode\n-    @Getter\n-    @ToString\n-    public static class TopNSpec {\n-        private final String name;\n-        @Singular\n-        private final List<String> groupByTagNames;\n-        private final String fieldName;\n-        private final BanyandbModel.Sort sort;\n-        private final int lruSize;\n-        private final int countersNumber;\n-    }\n-\n     @RequiredArgsConstructor\n     @Getter\n     @ToString\n@@ -818,11 +650,4 @@ public static class ColumnSpec {\n     public enum ColumnType {\n         TAG, FIELD;\n     }\n-\n-    @Getter\n-    @Setter\n-    @NoArgsConstructor\n-    public static class GroupSetting {\n-        private int segmentIntervalDays;\n-    }\n }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEBPFProfilingScheduleQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEBPFProfilingScheduleQueryDAO.java\nindex 9b68a1d1fef0..33164a5e9bc8 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEBPFProfilingScheduleQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEBPFProfilingScheduleQueryDAO.java\n@@ -55,13 +55,14 @@ public List<EBPFProfilingSchedule> querySchedules(String taskId) throws IOExcept\n          MetadataRegistry.Schema schema = MetadataRegistry.INSTANCE.findMetadata(EBPFProfilingScheduleRecord.INDEX_NAME, DownSampling.Minute);\n          MeasureQueryResponse resp = query(schema,\n                  TAGS,\n-                 Collections.emptySet(), new QueryBuilder<MeasureQuery>() {\n-                     @Override\n-                     protected void apply(MeasureQuery query) {\n-                         query.and(eq(EBPFProfilingScheduleRecord.TASK_ID, taskId));\n-                         query.setOrderBy(new AbstractQuery.OrderBy(EBPFProfilingScheduleRecord.START_TIME, AbstractQuery.Sort.DESC));\n-                     }\n-                 });\n+                                           Collections.emptySet(), new QueryBuilder<MeasureQuery>() {\n+                 @Override\n+                 protected void apply(MeasureQuery query) {\n+                     query.and(eq(EBPFProfilingScheduleRecord.TASK_ID, taskId));\n+                     query.setOrderBy(new AbstractQuery.OrderBy(EBPFProfilingScheduleRecord.START_TIME, AbstractQuery.Sort.DESC));\n+                 }\n+             }\n+         );\n \n          return resp.getDataPoints().stream().map(this::buildEBPFProfilingSchedule).collect(Collectors.toList());\n      }\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEventQueryDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEventQueryDAO.java\nindex 09174d399ef3..cc85537b0bdf 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEventQueryDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/measure/BanyanDBEventQueryDAO.java\n@@ -120,9 +120,11 @@ protected void apply(MeasureQuery query) {\n                 query.limit(page.getLimit());\n                 query.offset(page.getFrom());\n                 if (queryOrder == Order.ASC) {\n-                    query.setOrderBy(new AbstractQuery.OrderBy(Event.START_TIME, AbstractQuery.Sort.ASC));\n+                    query.setOrderBy(\n+                        new AbstractQuery.OrderBy(Event.START_TIME, AbstractQuery.Sort.ASC));\n                 } else {\n-                    query.setOrderBy(new AbstractQuery.OrderBy(Event.START_TIME, AbstractQuery.Sort.DESC));\n+                    query.setOrderBy(\n+                        new AbstractQuery.OrderBy(Event.START_TIME, AbstractQuery.Sort.DESC));\n                 }\n                 for (final EventQueryCondition condition : conditionList) {\n                     List<PairQueryCondition<?>> queryConditions = new ArrayList<>();\n\ndiff --git a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java\nindex b33335976435..9f6cef7b1b42 100644\n--- a/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java\n+++ b/oap-server/server-storage-plugin/storage-banyandb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/banyandb/stream/AbstractBanyanDBDAO.java\n@@ -19,6 +19,7 @@\n package org.apache.skywalking.oap.server.storage.plugin.banyandb.stream;\n \n import com.google.gson.Gson;\n+import java.util.Objects;\n import org.apache.skywalking.banyandb.model.v1.BanyandbModel;\n import org.apache.skywalking.banyandb.v1.client.AbstractCriteria;\n import org.apache.skywalking.banyandb.v1.client.AbstractQuery;\n@@ -183,9 +184,10 @@ private TopNQueryResponse topNQuery(MetadataRegistry.Schema schema,\n                                         AbstractQuery.Sort sort,\n                                         List<KeyValue> additionalConditions,\n                                         List<AttrCondition> attributes) throws IOException {\n-        final TopNQuery q = new TopNQuery(List.of(schema.getMetadata().getGroup()), schema.getTopNSpec().getName(),\n-                timestampRange,\n-                number, sort);\n+        final TopNQuery q = new TopNQuery(List.of(schema.getMetadata().getGroup()), Objects.requireNonNull(\n+            schema.getTopNSpec()).getMetadata().getName(),\n+                                          timestampRange,\n+                                          number, sort);\n         q.setAggregationType(MeasureQuery.Aggregation.Type.MEAN);\n         List<PairQueryCondition<?>> conditions = new ArrayList<>();\n         if (CollectionUtils.isNotEmpty(additionalConditions)) {\n"", ""test_patch"": ""diff --git a/test/e2e-v2/cases/profiling/ebpf/access_log/banyandb/e2e.yaml b/test/e2e-v2/cases/profiling/ebpf/access_log/banyandb/e2e.yaml\nindex 110dad60f93d..044a3ab993b0 100644\n--- a/test/e2e-v2/cases/profiling/ebpf/access_log/banyandb/e2e.yaml\n+++ b/test/e2e-v2/cases/profiling/ebpf/access_log/banyandb/e2e.yaml\n@@ -83,4 +83,4 @@ verify:\n     interval: 10s\n   cases:\n     - includes:\n-        - ../accesslog-cases.yaml\n\\ No newline at end of file\n+        - ../accesslog-cases.yaml\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-12782"", ""pr_id"": 12782, ""issue_id"": 12741, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] Improve elasticsearch performance by using disable doc values\n### Search before asking\n\n- [X] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nThis topic was started by @hanahmily through #12507, which asked for `no_sort` in the index.\r\nWithin discussions, we noticed that elasticsearch also has a concept, called `\""doc_values\"": false`\r\n\r\n<img width=\""249\"" alt=\""image\"" src=\""https://github.com/user-attachments/assets/f583e9b6-ac7f-487b-9995-d212f3793dc1\"">\r\n\r\n\n\n### Use case\n\n`@ElasticSearch.DisableDocValues` annotation could be considered. \r\n\r\nPossible use cases\r\n1. Value column of metrics.\r\n2. Conditions of logs and traces(skywalking and zipkin) exclude latency and timestamp, which are used in sorting.\r\n3. All searchable field in metadata(*_traffic)\r\n\r\nAdditionally, I hope this change could make effects on new indices(auto generated), and keep compatible with previous created indices.\n\n### Related issues\n\n_No response_\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [ ] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [X] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 192, ""test_files_count"": 3, ""non_test_files_count"": 61, ""pr_changed_files"": [""docs/en/changes/changes.md"", ""oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/AbstractLogRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/endpoint/EndpointRelationServerSideMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationClientSideMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationServerSideMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationClientSideMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationServerSideMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationClientSideMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationServerSideMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/searchtag/TagAutocompleteData.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/spanattach/SpanAttachedEventRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledSlowTraceRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus4xxTraceRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus5xxTraceRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/HistogramFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgLabeledFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/latest/LatestFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/max/MaxFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/max/MaxLabeledFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/min/MinFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/min/MinLabeledFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumHistogramPercentileFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumLabeledFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sumpermin/SumPerMinFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sumpermin/SumPerMinLabeledFunction.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/ApdexMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/CPMMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/CountMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/DoubleAvgMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Event.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/LongAvgMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxDoubleMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxLongMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Metrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MinDoubleMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MinLongMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RateMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/SumMetrics.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/record/Record.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/manual/errorlog/BrowserErrorLogRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/asyncprofiler/storage/AsyncProfilerTaskLogRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/asyncprofiler/storage/AsyncProfilerTaskRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingScheduleRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingTaskRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskLogRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileThreadSnapshotRecord.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/ElasticSearch.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ElasticSearchExtension.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java"", ""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinSpanRecord.java"", ""oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java"", ""oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/response/Mappings.java"", ""oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java"", ""oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ElasticSearchColumnTypeMappingTestCase.java""], ""pr_changed_test_files"": [""oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/latest/LatestFunction.java"", ""oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java"", ""oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ElasticSearchColumnTypeMappingTestCase.java""], ""base_commit"": ""07a79babc52628c72826b33d1c5ecb4c3e9e6c9c"", ""head_commit"": ""e0e27fa4e981180fa77aa3ff1153dd375b2a2a79"", ""repo_url"": ""https://github.com/apache/skywalking/pull/12782"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/12782"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-24T04:17:16.000Z"", ""patch"": ""diff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 2fefc2b13288..d83dd4c5f914 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -1,5 +1,12 @@\n ## 10.2.0\n \n+#### Project\n+* Add [`doc_values`](https://www.elastic.co/guide/en/elasticsearch/reference/current/doc-values.html) for fields\n+  that need to be sorted or aggregated in Elasticsearch, and disable all others.\n+  * This change would not impact the existing deployment and its feature for our official release users.\n+  * **Warning** If there are custom query plugins for our Elasticsearch indices, this change could break them as\n+    sort queries and aggregation queries which used the unexpected fields are being blocked.\n+\n #### OAP Server\n \n * Skip processing OTLP metrics data points with flag `FLAG_NO_RECORDED_VALUE`, which causes exceptional result.\n\ndiff --git a/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java b/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java\nindex 3d3ab1643b4d..59fe64fcd016 100644\n--- a/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java\n+++ b/oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/util/OALClassGenerator.java\n@@ -58,6 +58,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageBuilderFactory;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.library.util.StringUtil;\n \n import java.io.DataOutputStream;\n@@ -205,6 +206,10 @@ private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompile\n                     Annotation banyanShardingKeyAnnotation = new Annotation(BanyanDB.SeriesID.class.getName(), constPool);\n                     banyanShardingKeyAnnotation.addMemberValue(\""index\"", new IntegerMemberValue(constPool, 0));\n                     annotationsAttribute.addAnnotation(banyanShardingKeyAnnotation);\n+\n+                    // Entity id field should enable doc values.\n+                    final var enableDocValuesAnnotation = new Annotation(ElasticSearch.EnableDocValues.class.getName(), constPool);\n+                    annotationsAttribute.addAnnotation(enableDocValuesAnnotation);\n                 }\n \n                 if (field.isGroupByCondInTopN()) {\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java\nindex be4bbd0f6654..a79a0b44ed3a 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/alarm/AlarmRecord.java\n@@ -78,6 +78,7 @@ public StorageID id() {\n     private String id0;\n     @Column(name = ID1, storageOnly = true)\n     private String id1;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = START_TIME)\n     private long startTime;\n     @Column(name = ALARM_MESSAGE, length = 512)\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/AbstractLogRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/AbstractLogRecord.java\nindex a7efde7f16a9..de11f1f20fff 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/AbstractLogRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/log/AbstractLogRecord.java\n@@ -89,6 +89,7 @@ public abstract class AbstractLogRecord extends Record {\n     private LongText content;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = TIMESTAMP)\n     private long timestamp;\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/endpoint/EndpointRelationServerSideMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/endpoint/EndpointRelationServerSideMetrics.java\nindex c0740d42cde7..9172c2dc3797 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/endpoint/EndpointRelationServerSideMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/endpoint/EndpointRelationServerSideMetrics.java\n@@ -30,6 +30,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -58,10 +59,12 @@ public class EndpointRelationServerSideMetrics extends Metrics {\n     private String destEndpoint;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = COMPONENT_ID, storageOnly = true)\n     private int componentId;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationClientSideMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationClientSideMetrics.java\nindex 011a81e2c9d2..ec980fb69668 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationClientSideMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationClientSideMetrics.java\n@@ -30,6 +30,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -67,6 +68,7 @@ public class ServiceInstanceRelationClientSideMetrics extends Metrics {\n     private String destServiceInstanceId;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationServerSideMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationServerSideMetrics.java\nindex c042fd64793b..0f58d3006ff5 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationServerSideMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/instance/ServiceInstanceRelationServerSideMetrics.java\n@@ -30,6 +30,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -67,6 +68,7 @@ public class ServiceInstanceRelationServerSideMetrics extends Metrics {\n     private String destServiceInstanceId;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationClientSideMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationClientSideMetrics.java\nindex 283bffb4f8ea..8275dffd89b9 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationClientSideMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationClientSideMetrics.java\n@@ -31,6 +31,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -65,11 +66,13 @@ public class ProcessRelationClientSideMetrics extends Metrics {\n     private String destProcessId;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = COMPONENT_ID, storageOnly = true)\n     @BanyanDB.SeriesID(index = 1)\n     private int componentId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationServerSideMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationServerSideMetrics.java\nindex 95cba6e8615f..b6e12a6943c9 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationServerSideMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/process/ProcessRelationServerSideMetrics.java\n@@ -31,6 +31,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -64,11 +65,13 @@ public class ProcessRelationServerSideMetrics extends Metrics {\n     private String destProcessId;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = COMPONENT_ID, storageOnly = true)\n     @BanyanDB.SeriesID(index = 1)\n     private int componentId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationClientSideMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationClientSideMetrics.java\nindex 90dea51ff684..a768ea1b989b 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationClientSideMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationClientSideMetrics.java\n@@ -60,9 +60,11 @@ public class ServiceRelationClientSideMetrics extends Metrics {\n     @Getter\n     @Column(name = COMPONENT_IDS, storageOnly = true)\n     @ElasticSearch.Keyword\n+    @ElasticSearch.EnableDocValues\n     private IntList componentIds = new IntList(3);\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationServerSideMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationServerSideMetrics.java\nindex 1ff930f6f3de..c0f3517a6363 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationServerSideMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/relation/service/ServiceRelationServerSideMetrics.java\n@@ -62,9 +62,11 @@ public class ServiceRelationServerSideMetrics extends Metrics {\n     @Getter\n     @Column(name = COMPONENT_IDS, storageOnly = true)\n     @ElasticSearch.Keyword\n+    @ElasticSearch.EnableDocValues\n     private IntList componentIds = new IntList(3);\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/searchtag/TagAutocompleteData.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/searchtag/TagAutocompleteData.java\nindex b31aac9ea990..fb76f3f826f8 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/searchtag/TagAutocompleteData.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/searchtag/TagAutocompleteData.java\n@@ -30,6 +30,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -44,7 +45,7 @@\n     \""tagKey\"",\n     \""tagValue\"",\n     \""tagType\""\n-})\n+}, callSuper = true)\n @BanyanDB.IndexMode\n public class TagAutocompleteData extends Metrics {\n     public static final String INDEX_NAME = \""tag_autocomplete\"";\n@@ -55,6 +56,7 @@ public class TagAutocompleteData extends Metrics {\n     @Setter\n     @Getter\n     @Column(name = TAG_KEY)\n+    @ElasticSearch.EnableDocValues\n     @BanyanDB.SeriesID(index = 1)\n     private String tagKey;\n     @Setter\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java\nindex 7daa15c06211..c72dc4a24b1a 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java\n@@ -84,11 +84,13 @@ public class SegmentRecord extends Record {\n     private String endpointId;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = START_TIME)\n     @BanyanDB.NoIndexing\n     private long startTime;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = LATENCY)\n     private int latency;\n     @Setter\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/spanattach/SpanAttachedEventRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/spanattach/SpanAttachedEventRecord.java\nindex d8263b5357bf..24211cc5168b 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/spanattach/SpanAttachedEventRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/spanattach/SpanAttachedEventRecord.java\n@@ -27,6 +27,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -53,8 +54,10 @@ public class SpanAttachedEventRecord extends Record {\n     public static final String DATA_BINARY = \""data_binary\"";\n     public static final String TIMESTAMP = \""timestamp\"";\n \n+    @ElasticSearch.EnableDocValues\n     @Column(name = START_TIME_SECOND)\n     private long startTimeSecond;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = START_TIME_NANOS)\n     private int startTimeNanos;\n     @Column(name = EVENT)\n@@ -76,6 +79,7 @@ public class SpanAttachedEventRecord extends Record {\n     private byte[] dataBinary;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = TIMESTAMP)\n     @BanyanDB.NoIndexing\n     private long timestamp;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledSlowTraceRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledSlowTraceRecord.java\nindex 81cb7fa16dac..6815d6d879a3 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledSlowTraceRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledSlowTraceRecord.java\n@@ -28,6 +28,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -52,6 +53,7 @@ public class SampledSlowTraceRecord extends Record {\n \n     @Column(name = SCOPE)\n     private int scope;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n@@ -59,10 +61,12 @@ public class SampledSlowTraceRecord extends Record {\n     private String traceId;\n     @Column(name = URI, storageOnly = true)\n     private String uri;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)\n     private long latency;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = TIMESTAMP)\n     private long timestamp;\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus4xxTraceRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus4xxTraceRecord.java\nindex bd78e28e1c43..d74674205cc9 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus4xxTraceRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus4xxTraceRecord.java\n@@ -28,6 +28,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -53,6 +54,7 @@ public class SampledStatus4xxTraceRecord extends Record {\n \n     @Column(name = SCOPE)\n     private int scope;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n@@ -60,10 +62,12 @@ public class SampledStatus4xxTraceRecord extends Record {\n     private String traceId;\n     @Column(name = URI, storageOnly = true)\n     private String uri;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)\n     private long latency;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = TIMESTAMP)\n     private long timestamp;\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus5xxTraceRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus5xxTraceRecord.java\nindex 1d38edd1aa04..403ee05c8b5e 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus5xxTraceRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/trace/SampledStatus5xxTraceRecord.java\n@@ -28,6 +28,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -53,6 +54,7 @@ public class SampledStatus5xxTraceRecord extends Record {\n \n     @Column(name = SCOPE)\n     private int scope;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n@@ -60,10 +62,12 @@ public class SampledStatus5xxTraceRecord extends Record {\n     private String traceId;\n     @Column(name = URI, storageOnly = true)\n     private String uri;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)\n     private long latency;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = TIMESTAMP)\n     private long timestamp;\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/HistogramFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/HistogramFunction.java\nindex 9d4aed47f6c1..7c4124fa9a3b 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/HistogramFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/HistogramFunction.java\n@@ -32,6 +32,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -50,6 +51,7 @@ public abstract class HistogramFunction extends Meter implements AcceptableValue\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgFunction.java\nindex 4228c8e63f42..325c1d937150 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgFunction.java\n@@ -35,6 +35,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -49,6 +50,7 @@ public abstract class AvgFunction extends Meter implements AcceptableValue<Long>\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n@@ -73,6 +75,7 @@ public abstract class AvgFunction extends Meter implements AcceptableValue<Long>\n     protected long count;\n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private long value;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramFunction.java\nindex 80b8872f2204..d3653ee0dde4 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramFunction.java\n@@ -61,6 +61,7 @@ public abstract class AvgHistogramFunction extends Meter implements AcceptableVa\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java\nindex 570d7ab24747..b64be88d67cb 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java\n@@ -76,6 +76,7 @@ public abstract class AvgHistogramPercentileFunction extends Meter implements Ac\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgLabeledFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgLabeledFunction.java\nindex b728654e346c..e86e71fc51c6 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgLabeledFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgLabeledFunction.java\n@@ -50,6 +50,7 @@ public abstract class AvgLabeledFunction extends Meter implements AcceptableValu\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/max/MaxFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/max/MaxFunction.java\nindex c30b5d506572..751afec9353d 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/max/MaxFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/max/MaxFunction.java\n@@ -34,6 +34,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -49,6 +50,7 @@ public abstract class MaxFunction extends Meter implements AcceptableValue<Long>\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n@@ -63,6 +65,7 @@ public abstract class MaxFunction extends Meter implements AcceptableValue<Long>\n \n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private long value;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/max/MaxLabeledFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/max/MaxLabeledFunction.java\nindex 7524da8a0cc4..dff6d7a10ae3 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/max/MaxLabeledFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/max/MaxLabeledFunction.java\n@@ -34,6 +34,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -48,6 +49,7 @@ public abstract class MaxLabeledFunction extends Meter implements AcceptableValu\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/min/MinFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/min/MinFunction.java\nindex b4379dfddb23..160646fa1a35 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/min/MinFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/min/MinFunction.java\n@@ -34,6 +34,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -49,6 +50,7 @@ public abstract class MinFunction extends Meter implements AcceptableValue<Long>\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n@@ -63,6 +65,7 @@ public abstract class MinFunction extends Meter implements AcceptableValue<Long>\n \n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private long value = Long.MAX_VALUE;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/min/MinLabeledFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/min/MinLabeledFunction.java\nindex dde993b1ff00..82d74a95015c 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/min/MinLabeledFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/min/MinLabeledFunction.java\n@@ -34,6 +34,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -48,6 +49,7 @@ public abstract class MinLabeledFunction extends Meter implements AcceptableValu\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumFunction.java\nindex ff67146d9302..468d56b90a7e 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumFunction.java\n@@ -35,6 +35,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -47,6 +48,7 @@ public abstract class SumFunction extends Meter implements AcceptableValue<Long>\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n@@ -58,6 +60,7 @@ public abstract class SumFunction extends Meter implements AcceptableValue<Long>\n \n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private long value;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumHistogramPercentileFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumHistogramPercentileFunction.java\nindex 5b1af897f647..ac2f4c7d05c1 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumHistogramPercentileFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumHistogramPercentileFunction.java\n@@ -66,6 +66,7 @@ public abstract class SumHistogramPercentileFunction extends Meter implements Ac\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumLabeledFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumLabeledFunction.java\nindex 53019a5c0338..b999d9f128a4 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumLabeledFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sum/SumLabeledFunction.java\n@@ -35,6 +35,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -47,6 +48,7 @@ public abstract class SumLabeledFunction extends Meter implements AcceptableValu\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sumpermin/SumPerMinFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sumpermin/SumPerMinFunction.java\nindex ddd5b56af2f4..d10e9a9bdc08 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sumpermin/SumPerMinFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sumpermin/SumPerMinFunction.java\n@@ -35,6 +35,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -48,6 +49,7 @@ public abstract class SumPerMinFunction extends Meter implements AcceptableValue\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n@@ -59,6 +61,7 @@ public abstract class SumPerMinFunction extends Meter implements AcceptableValue\n \n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private long value;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sumpermin/SumPerMinLabeledFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sumpermin/SumPerMinLabeledFunction.java\nindex ea8fa05b657e..21c548e2a5d2 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sumpermin/SumPerMinLabeledFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/sumpermin/SumPerMinLabeledFunction.java\n@@ -34,6 +34,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -46,6 +47,7 @@ public abstract class SumPerMinLabeledFunction extends Meter implements Acceptab\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/ApdexMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/ApdexMetrics.java\nindex 5c667112bd7a..91583a44bddc 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/ApdexMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/ApdexMetrics.java\n@@ -64,6 +64,7 @@ public abstract class ApdexMetrics extends Metrics implements IntValueHolder {\n     private long tNum;\n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @ElasticSearch.Column(legacyName = \""value\"")\n     @BanyanDB.MeasureField\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/CPMMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/CPMMetrics.java\nindex 76fdc63f8b59..2fe2036e00f7 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/CPMMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/CPMMetrics.java\n@@ -25,6 +25,7 @@\n import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n \n @MetricsFunction(functionName = \""cpm\"")\n public abstract class CPMMetrics extends Metrics implements LongValueHolder {\n@@ -34,6 +35,7 @@ public abstract class CPMMetrics extends Metrics implements LongValueHolder {\n \n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private long value;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/CountMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/CountMetrics.java\nindex 17ea24c7ea2a..0698046b7543 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/CountMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/CountMetrics.java\n@@ -25,6 +25,7 @@\n import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n \n @MetricsFunction(functionName = \""count\"")\n public abstract class CountMetrics extends Metrics implements LongValueHolder {\n@@ -33,6 +34,7 @@ public abstract class CountMetrics extends Metrics implements LongValueHolder {\n \n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private long value;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/DoubleAvgMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/DoubleAvgMetrics.java\nindex f4fc82bfa6a5..747066c0c31d 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/DoubleAvgMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/DoubleAvgMetrics.java\n@@ -48,6 +48,7 @@ public abstract class DoubleAvgMetrics extends Metrics implements DoubleValueHol\n     private long count;\n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @ElasticSearch.Column(legacyName = \""value\"")\n     @BanyanDB.MeasureField\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Event.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Event.java\nindex 46445efab811..09d343a3bd55 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Event.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Event.java\n@@ -32,6 +32,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -107,6 +108,7 @@ protected StorageID id0() {\n     @Column(name = PARAMETERS, storageOnly = true, length = PARAMETER_MAX_LENGTH)\n     private String parameters;\n \n+    @ElasticSearch.EnableDocValues\n     @Column(name = START_TIME)\n     private long startTime;\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/LongAvgMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/LongAvgMetrics.java\nindex a8680ad94234..633f5f93da5f 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/LongAvgMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/LongAvgMetrics.java\n@@ -26,6 +26,7 @@\n import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n \n @MetricsFunction(functionName = \""longAvg\"")\n public abstract class LongAvgMetrics extends Metrics implements LongValueHolder {\n@@ -46,6 +47,7 @@ public abstract class LongAvgMetrics extends Metrics implements LongValueHolder\n     protected long count;\n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private long value;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxDoubleMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxDoubleMetrics.java\nindex f2335cb01eb7..4905516f2dca 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxDoubleMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxDoubleMetrics.java\n@@ -25,6 +25,7 @@\n import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n \n @MetricsFunction(functionName = \""maxDouble\"")\n public abstract class MaxDoubleMetrics extends Metrics implements DoubleValueHolder {\n@@ -33,6 +34,7 @@ public abstract class MaxDoubleMetrics extends Metrics implements DoubleValueHol\n \n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private double value;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxLongMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxLongMetrics.java\nindex b010acfd9a25..d4359e4d95cb 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxLongMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MaxLongMetrics.java\n@@ -25,6 +25,7 @@\n import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n \n @MetricsFunction(functionName = \""max\"")\n public abstract class MaxLongMetrics extends Metrics implements LongValueHolder {\n@@ -33,6 +34,7 @@ public abstract class MaxLongMetrics extends Metrics implements LongValueHolder\n \n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private long value;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Metrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Metrics.java\nindex 6259fda365bf..222ba130a1aa 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Metrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/Metrics.java\n@@ -27,6 +27,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n \n /**\n  * Metrics represents the statistic data, which analysis by OAL script or hard code. It has the lifecycle controlled by\n@@ -34,7 +35,7 @@\n  */\n @EqualsAndHashCode(of = {\n     \""timeBucket\""\n-})\n+}, callSuper = false)\n public abstract class Metrics extends StreamData implements StorageData {\n     public static final String ENTITY_ID = \""entity_id\"";\n     public static final String ID = \""id\"";\n@@ -45,6 +46,7 @@ public abstract class Metrics extends StreamData implements StorageData {\n     @Getter\n     @Setter\n     @Column(name = TIME_BUCKET)\n+    @ElasticSearch.EnableDocValues\n     private long timeBucket;\n \n     /**\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MinDoubleMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MinDoubleMetrics.java\nindex 4035e3dde24f..1bf72a736d94 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MinDoubleMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MinDoubleMetrics.java\n@@ -25,6 +25,7 @@\n import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n \n @MetricsFunction(functionName = \""minDouble\"")\n public abstract class MinDoubleMetrics extends Metrics implements DoubleValueHolder {\n@@ -33,6 +34,7 @@ public abstract class MinDoubleMetrics extends Metrics implements DoubleValueHol\n \n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private double value = Double.MAX_VALUE;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MinLongMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MinLongMetrics.java\nindex 3372024278fc..ba892275390e 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MinLongMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MinLongMetrics.java\n@@ -25,6 +25,7 @@\n import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n \n @MetricsFunction(functionName = \""min\"")\n public abstract class MinLongMetrics extends Metrics implements LongValueHolder {\n@@ -33,6 +34,7 @@ public abstract class MinLongMetrics extends Metrics implements LongValueHolder\n \n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private long value = Long.MAX_VALUE;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentMetrics.java\nindex 8c0db0227140..c61636f5d6f8 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentMetrics.java\n@@ -25,6 +25,7 @@\n import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n \n @MetricsFunction(functionName = \""percent\"")\n public abstract class PercentMetrics extends Metrics implements IntValueHolder {\n@@ -39,6 +40,7 @@ public abstract class PercentMetrics extends Metrics implements IntValueHolder {\n     private long total;\n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = PERCENTAGE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private int percentage;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RateMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RateMetrics.java\nindex ec5ddd65b3e0..5ced50441040 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RateMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RateMetrics.java\n@@ -24,6 +24,7 @@\n import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n \n @MetricsFunction(functionName = \""rate\"")\n public abstract class RateMetrics extends Metrics implements IntValueHolder {\n@@ -38,6 +39,7 @@ public abstract class RateMetrics extends Metrics implements IntValueHolder {\n     private long denominator;\n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = PERCENTAGE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private int percentage;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/SumMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/SumMetrics.java\nindex b4b4ec5da455..42841f3c7f7e 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/SumMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/SumMetrics.java\n@@ -25,6 +25,7 @@\n import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n \n @MetricsFunction(functionName = \""sum\"")\n public abstract class SumMetrics extends Metrics implements LongValueHolder {\n@@ -33,6 +34,7 @@ public abstract class SumMetrics extends Metrics implements LongValueHolder {\n \n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private long value;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/record/Record.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/record/Record.java\nindex 0d50f0cdb05d..955ed645945d 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/record/Record.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/record/Record.java\n@@ -23,6 +23,7 @@\n import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n import org.apache.skywalking.oap.server.core.storage.StorageData;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n \n /**\n  * Record storage represents the entity have fully and manually entity definition by hard codes. Most of them are\n@@ -35,5 +36,6 @@ public abstract class Record implements StorageData {\n     @Getter\n     @Setter\n     @Column(name = TIME_BUCKET)\n+    @ElasticSearch.EnableDocValues\n     private long timeBucket;\n }\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java\nindex d52900f0b30a..b86f2e39a678 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/topn/TopN.java\n@@ -24,6 +24,7 @@\n import org.apache.skywalking.oap.server.core.storage.ComparableStorageData;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n \n /**\n  * TopN data.\n@@ -37,6 +38,7 @@ public abstract class TopN extends Record implements ComparableStorageData {\n     \n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = LATENCY, dataType = Column.ValueDataType.SAMPLED_RECORD)\n     private long latency;\n     @Getter\n@@ -45,11 +47,13 @@ public abstract class TopN extends Record implements ComparableStorageData {\n     private String traceId;\n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = TIMESTAMP)\n     private long timestamp;\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/manual/errorlog/BrowserErrorLogRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/manual/errorlog/BrowserErrorLogRecord.java\nindex 1310a8efc787..8a0d00a72664 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/manual/errorlog/BrowserErrorLogRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/manual/errorlog/BrowserErrorLogRecord.java\n@@ -26,6 +26,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.annotation.SuperDataset;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n@@ -72,6 +73,7 @@ public StorageID id() {\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = TIMESTAMP)\n     private long timestamp;\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/asyncprofiler/storage/AsyncProfilerTaskLogRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/asyncprofiler/storage/AsyncProfilerTaskLogRecord.java\nindex 55a8e33186ba..7cece5d62e63 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/asyncprofiler/storage/AsyncProfilerTaskLogRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/asyncprofiler/storage/AsyncProfilerTaskLogRecord.java\n@@ -27,6 +27,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -53,10 +54,12 @@ public class AsyncProfilerTaskLogRecord extends Record {\n     private String instanceId;\n     @Column(name = OPERATION_TYPE, storageOnly = true)\n     private int operationType;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = OPERATION_TIME)\n     private long operationTime;\n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = TIMESTAMP)\n     private long timestamp;\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/asyncprofiler/storage/AsyncProfilerTaskRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/asyncprofiler/storage/AsyncProfilerTaskRecord.java\nindex d664be7e2e94..569de81f0fba 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/asyncprofiler/storage/AsyncProfilerTaskRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/asyncprofiler/storage/AsyncProfilerTaskRecord.java\n@@ -28,6 +28,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -60,6 +61,7 @@ public class AsyncProfilerTaskRecord extends NoneStream {\n     private String serviceInstanceIds;\n     @Column(name = TASK_ID)\n     private String taskId;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = CREATE_TIME)\n     private long createTime;\n     @Column(name = DURATION)\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingScheduleRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingScheduleRecord.java\nindex bb81da34f6f1..b4bcdac39068 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingScheduleRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingScheduleRecord.java\n@@ -29,6 +29,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -65,6 +66,7 @@ public class EBPFProfilingScheduleRecord extends Metrics {\n     private String taskId;\n     @Column(name = PROCESS_ID, length = 600)\n     private String processId;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = START_TIME)\n     private long startTime;\n     @Column(name = END_TIME)\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingTaskRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingTaskRecord.java\nindex 7889b65aa5dd..b0c36454ecfd 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingTaskRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/ebpf/storage/EBPFProfilingTaskRecord.java\n@@ -28,6 +28,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -70,6 +71,7 @@ public class EBPFProfilingTaskRecord extends NoneStream {\n     private String processLabelsJson;\n     @Column(name = INSTANCE_ID, length = 512)\n     private String instanceId;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = START_TIME)\n     private long startTime;\n     @Column(name = TRIGGER_TYPE)\n@@ -78,6 +80,7 @@ public class EBPFProfilingTaskRecord extends NoneStream {\n     private long fixedTriggerDuration;\n     @Column(name = TARGET_TYPE)\n     private int targetType = EBPFProfilingTargetType.UNKNOWN.value();\n+    @ElasticSearch.EnableDocValues\n     @Column(name = CREATE_TIME)\n     @BanyanDB.NoIndexing\n     private long createTime;\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskLogRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskLogRecord.java\nindex c0f8d1bb9a25..2e321eae541a 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskLogRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskLogRecord.java\n@@ -27,6 +27,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -57,10 +58,12 @@ public class ProfileTaskLogRecord extends Record {\n     private String instanceId;\n     @Column(name = OPERATION_TYPE, storageOnly = true)\n     private int operationType;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = OPERATION_TIME)\n     private long operationTime;\n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = TIMESTAMP)\n     private long timestamp;\n \n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskRecord.java\nindex 80c57850d8be..a1a7bab310f9 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileTaskRecord.java\n@@ -27,6 +27,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -66,6 +67,7 @@ public StorageID id() {\n     private String endpointName;\n     @Column(name = TASK_ID)\n     private String taskId;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = START_TIME)\n     @BanyanDB.NoIndexing\n     private long startTime;\n@@ -75,6 +77,7 @@ public StorageID id() {\n     private int minDurationThreshold;\n     @Column(name = DUMP_PERIOD)\n     private int dumpPeriod;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = CREATE_TIME)\n     private long createTime;\n     @Column(name = MAX_SAMPLING_COUNT)\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileThreadSnapshotRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileThreadSnapshotRecord.java\nindex 6ce04666b04b..31d250b1ae62 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileThreadSnapshotRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/profiling/trace/ProfileThreadSnapshotRecord.java\n@@ -27,6 +27,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.annotation.SQLDatabase;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n@@ -59,9 +60,11 @@ public class ProfileThreadSnapshotRecord extends Record {\n     @SQLDatabase.CompositeIndex(withColumns = {DUMP_TIME})\n     @BanyanDB.SeriesID(index = 0)\n     private String segmentId;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = DUMP_TIME)\n     @BanyanDB.NoIndexing\n     private long dumpTime;\n+    @ElasticSearch.EnableDocValues\n     @Column(name = SEQUENCE)\n     private int sequence;\n     @Column(name = STACK_BINARY)\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/ElasticSearch.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/ElasticSearch.java\nindex bf046529e2e6..0349cdaa6ce9 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/ElasticSearch.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/ElasticSearch.java\n@@ -106,4 +106,13 @@ enum AnalyzerType {\n     @Retention(RetentionPolicy.RUNTIME)\n     @interface Routing {\n     }\n+\n+    /**\n+     * EnableDocValues is used to enable the `doc_values` of the field in the ElasticSearch.\n+     * For more information, check https://www.elastic.co/guide/en/elasticsearch/reference/current/doc-values.html\n+     */\n+    @Target(ElementType.FIELD)\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @interface EnableDocValues {\n+    }\n }\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ElasticSearchExtension.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ElasticSearchExtension.java\nindex 98abf536cdf2..ee1692d0e0cb 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ElasticSearchExtension.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ElasticSearchExtension.java\n@@ -42,6 +42,8 @@ public class ElasticSearchExtension {\n \n     private final boolean isRouting;\n \n+    private final boolean isDocValuesEnabled;\n+\n     public boolean needMatchQuery() {\n         return analyzer != null;\n     }\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java\nindex 6f2d78b4d3f0..729e55a69f09 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/StorageModels.java\n@@ -196,16 +196,17 @@ private void retrieval(final Class<?> clazz,\n                 });\n \n                 // ElasticSearch extension\n-                final ElasticSearch.MatchQuery elasticSearchAnalyzer = field.getAnnotation(\n-                    ElasticSearch.MatchQuery.class);\n-                final ElasticSearch.Column elasticSearchColumn = field.getAnnotation(ElasticSearch.Column.class);\n-                final ElasticSearch.Keyword keywordColumn = field.getAnnotation(ElasticSearch.Keyword.class);\n-                final ElasticSearch.Routing routingColumn = field.getAnnotation(ElasticSearch.Routing.class);\n-                ElasticSearchExtension elasticSearchExtension = new ElasticSearchExtension(\n+                final var elasticSearchAnalyzer = field.getAnnotation(ElasticSearch.MatchQuery.class);\n+                final var elasticSearchColumn = field.getAnnotation(ElasticSearch.Column.class);\n+                final var keywordColumn = field.getAnnotation(ElasticSearch.Keyword.class);\n+                final var routingColumn = field.getAnnotation(ElasticSearch.Routing.class);\n+                final var enableDocValues = field.getAnnotation(ElasticSearch.EnableDocValues.class);\n+                final var elasticSearchExtension = new ElasticSearchExtension(\n                     elasticSearchAnalyzer == null ? null : elasticSearchAnalyzer.analyzer(),\n                     elasticSearchColumn == null ? null : elasticSearchColumn.legacyName(),\n                     keywordColumn != null,\n-                    routingColumn != null\n+                    routingColumn != null,\n+                    enableDocValues != null\n                 );\n \n                 // BanyanDB extension\n\ndiff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinSpanRecord.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinSpanRecord.java\nindex fdd1dce246f7..954ff4d06e14 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinSpanRecord.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/zipkin/ZipkinSpanRecord.java\n@@ -83,6 +83,7 @@ public class ZipkinSpanRecord extends Record {\n     @Column(name = TRACE_ID)\n     @SQLDatabase.AdditionalEntity(additionalTables = {ADDITIONAL_QUERY_TABLE}, reserveOriginalColumns = true)\n     @ElasticSearch.Routing\n+    @ElasticSearch.EnableDocValues\n     private String traceId;\n     @Setter\n     @Getter\n@@ -106,6 +107,7 @@ public class ZipkinSpanRecord extends Record {\n     private String kind;\n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = TIMESTAMP_MILLIS)\n     @BanyanDB.NoIndexing\n     private long timestampMillis;\n\ndiff --git a/oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/response/Mappings.java b/oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/response/Mappings.java\nindex b0ab993ebedb..5c8c7971c707 100644\n--- a/oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/response/Mappings.java\n+++ b/oap-server/server-library/library-elasticsearch-client/src/main/java/org/apache/skywalking/library/elasticsearch/response/Mappings.java\n@@ -18,6 +18,7 @@\n package org.apache.skywalking.library.elasticsearch.response;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -51,6 +52,7 @@ public final class Mappings {\n     @Setter\n     private Source source = new Source();\n \n+    @ToString\n     @EqualsAndHashCode\n     public static class Source {\n         @JsonProperty(\""excludes\"")\n\ndiff --git a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java\nindex 050941886ad7..702492933279 100644\n--- a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java\n+++ b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/StorageEsInstaller.java\n@@ -305,38 +305,40 @@ private Map getAnalyzerSetting4MergedIndex(Model model) throws StorageException\n     }\n \n     protected Mappings createMapping(Model model) {\n-        Map<String, Object> properties = new HashMap<>();\n-        Mappings.Source source = new Mappings.Source();\n+        final var properties = new HashMap<String, Object>();\n+        final var source = new Mappings.Source();\n         for (ModelColumn columnDefine : model.getColumns()) {\n+            final var elasticSearchExtension = columnDefine.getElasticSearchExtension();\n             final String type = columnTypeEsMapping.transform(columnDefine.getType(), columnDefine.getGenericType(),\n                 columnDefine.getLength(), columnDefine.isStorageOnly(),\n-                columnDefine.getElasticSearchExtension());\n-            String columnName = columnDefine.getColumnName().getName();\n-            String legacyName = columnDefine.getElasticSearchExtension().getLegacyColumnName();\n+                elasticSearchExtension);\n+            var columnName = columnDefine.getColumnName().getName();\n+            final var legacyName = elasticSearchExtension.getLegacyColumnName();\n+            final var columnProperties = new HashMap<>();\n             if (config.isLogicSharding() && !Strings.isNullOrEmpty(legacyName)) {\n                 columnName = legacyName;\n             }\n-            if (columnDefine.getElasticSearchExtension().needMatchQuery()) {\n+            if (elasticSearchExtension.needMatchQuery()) {\n                 String matchCName = MatchCNameBuilder.INSTANCE.build(columnName);\n \n-                Map<String, Object> originalColumn = new HashMap<>();\n-                originalColumn.put(\""type\"", type);\n-                originalColumn.put(\""copy_to\"", matchCName);\n-                properties.put(columnName, originalColumn);\n+                columnProperties.put(\""type\"", type);\n+                columnProperties.put(\""copy_to\"", matchCName);\n \n                 Map<String, Object> matchColumn = new HashMap<>();\n                 matchColumn.put(\""type\"", \""text\"");\n-                matchColumn.put(\""analyzer\"", columnDefine.getElasticSearchExtension().getAnalyzer().getName());\n+                matchColumn.put(\""analyzer\"", elasticSearchExtension.getAnalyzer().getName());\n                 properties.put(matchCName, matchColumn);\n             } else {\n-                Map<String, Object> column = new HashMap<>();\n-                column.put(\""type\"", type);\n+                columnProperties.put(\""type\"", type);\n                 // no index parameter is allowed for binary type, since ES 8.0\n                 if (columnDefine.isStorageOnly() && !\""binary\"".equals(type)) {\n-                    column.put(\""index\"", false);\n+                    columnProperties.put(\""index\"", false);\n                 }\n-                properties.put(columnName, column);\n             }\n+            if (!\""text\"".equals(type) && !elasticSearchExtension.isDocValuesEnabled()) {\n+                columnProperties.put(\""doc_values\"", false);\n+            }\n+            properties.put(columnName, columnProperties);\n \n             if (columnDefine.isIndexOnly()) {\n                 source.getExcludes().add(columnName);\n@@ -365,7 +367,9 @@ protected Mappings createMapping(Model model) {\n                                     .properties(properties)\n                                     .source(source)\n                                     .build();\n-        log.debug(\""elasticsearch index template setting: {}\"", mappings.toString());\n+        if (log.isDebugEnabled()) {\n+            log.debug(\""elasticsearch index template setting: {}\"", mappings.toString());\n+        }\n \n         return mappings;\n     }\n"", ""test_patch"": ""diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/latest/LatestFunction.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/latest/LatestFunction.java\nindex b741220e8930..cb601b40d2b7 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/latest/LatestFunction.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/latest/LatestFunction.java\n@@ -35,6 +35,7 @@\n import org.apache.skywalking.oap.server.core.storage.StorageID;\n import org.apache.skywalking.oap.server.core.storage.annotation.BanyanDB;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.core.storage.annotation.ElasticSearch;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Entity;\n import org.apache.skywalking.oap.server.core.storage.type.Convert2Storage;\n import org.apache.skywalking.oap.server.core.storage.type.StorageBuilder;\n@@ -47,6 +48,7 @@ public abstract class LatestFunction extends Meter implements AcceptableValue<Lo\n \n     @Setter\n     @Getter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = ENTITY_ID, length = 512)\n     @BanyanDB.SeriesID(index = 0)\n     private String entityId;\n@@ -61,6 +63,7 @@ public abstract class LatestFunction extends Meter implements AcceptableValue<Lo\n \n     @Getter\n     @Setter\n+    @ElasticSearch.EnableDocValues\n     @Column(name = VALUE, dataType = Column.ValueDataType.COMMON_VALUE)\n     @BanyanDB.MeasureField\n     private long value;\n\ndiff --git a/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java b/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java\nindex cab20c4969e8..e57b9681969e 100644\n--- a/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java\n+++ b/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/storage/model/ModelColumnTest.java\n@@ -48,7 +48,7 @@ public void testColumnDefine() {\n                                              false, false, true, 0,\n                                              new SQLDatabaseExtension(),\n                                              new ElasticSearchExtension(\n-                                                 ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false),\n+                                                 ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false, true),\n                                              new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE)\n         );\n         Assertions.assertTrue(column.isStorageOnly());\n@@ -57,7 +57,7 @@ public void testColumnDefine() {\n         column = new ModelColumn(new ColumnName(c), DataTable.class, DataTable.class,\n                                  false, false, true, 200,\n                                  new SQLDatabaseExtension(),\n-                                 new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false),\n+                                 new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false, true),\n                                  new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB. MatchQuery.AnalyzerType.SIMPLE)\n         );\n         Assertions.assertTrue(column.isStorageOnly());\n@@ -67,7 +67,7 @@ public void testColumnDefine() {\n         column = new ModelColumn(new ColumnName(c), String.class, String.class,\n                                  false, false, true, 200,\n                                  new SQLDatabaseExtension(),\n-                                 new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false),\n+                                 new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false, true),\n                                  new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE)\n         );\n         Assertions.assertFalse(column.isStorageOnly());\n@@ -81,7 +81,7 @@ public void testConflictDefinition() {\n                     true, false, true, 200,\n                     new SQLDatabaseExtension(),\n                     new ElasticSearchExtension(\n-                            ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false),\n+                            ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false, true),\n                     new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE)\n             );\n         });\n@@ -94,7 +94,7 @@ public void testConflictDefinitionIndexOnly() {\n                     true, true, false, 200,\n                     new SQLDatabaseExtension(),\n                     new ElasticSearchExtension(\n-                            ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false),\n+                            ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false, true),\n                     new BanyanDBExtension(-1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE)\n             );\n         });\n@@ -107,7 +107,7 @@ public void testConflictDefinitionStorageOnly() {\n                             true, false, false, 200,\n                             new SQLDatabaseExtension(),\n                             new ElasticSearchExtension(\n-                                ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false),\n+                                ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \""abc\"", false, false, true),\n                             new BanyanDBExtension(\n                                 -1, false, BanyanDB.IndexRule.IndexType.INVERTED, false,\n                                 BanyanDB.MatchQuery.AnalyzerType.SIMPLE\n\ndiff --git a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ElasticSearchColumnTypeMappingTestCase.java b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ElasticSearchColumnTypeMappingTestCase.java\nindex 26ba769b20fe..ccd55467b14f 100644\n--- a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ElasticSearchColumnTypeMappingTestCase.java\n+++ b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/test/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ElasticSearchColumnTypeMappingTestCase.java\n@@ -50,12 +50,12 @@ public void test() throws NoSuchFieldException {\n \n         final Type listFieldType = this.getClass().getField(\""a\"").getGenericType();\n         Assertions.assertEquals(\""keyword\"", mapping.transform(List.class, listFieldType, defaultLength, defaultStorageOnly,\n-                                                         new ElasticSearchExtension(null, null, false, false)\n+                                                         new ElasticSearchExtension(null, null, false, false, false)\n         ));\n \n         Assertions.assertEquals(\""keyword\"", mapping.transform(IntList.class, int.class, defaultLength, defaultStorageOnly,\n-                                                         new ElasticSearchExtension(null, null, true, false)));\n+                                                         new ElasticSearchExtension(null, null, true, false, false)));\n         Assertions.assertEquals(\""text\"", mapping.transform(IntList.class, int.class, defaultLength, defaultStorageOnly,\n-                                                         new ElasticSearchExtension(null, null, false, false)));\n+                                                         new ElasticSearchExtension(null, null, false, false, false)));\n     }\n }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""apache__skywalking-12768"", ""pr_id"": 12768, ""issue_id"": 12643, ""repo"": ""apache/skywalking"", ""problem_statement"": ""[Feature] adapt Istio ALS new peer metadata attributes\n### Search before asking\n\n- [X] I had searched in the [issues](https://github.com/apache/skywalking/issues?q=is%3Aissue) and found no similar feature requirement.\n\n\n### Description\n\nhttps://github.com/istio/istio/pull/53274/files\n\n### Use case\n\n_No response_\n\n### Related issues\n\n_No response_\n\n### Are you willing to submit a pull request to implement this on your own?\n\n- [X] Yes I am willing to submit a pull request on my own!\n\n### Code of Conduct\n\n- [X] I agree to follow this project's [Code of Conduct](https://www.apache.org/foundation/policies/conduct)\n"", ""issue_word_count"": 98, ""test_files_count"": 7, ""non_test_files_count"": 9, ""pr_changed_files"": ["".github/workflows/skywalking.yaml"", ""docker/oap/log4j2.xml"", ""docs/en/changes/changes.md"", ""oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FieldsHelper.java"", ""oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/mx/MetaExchangeALSHTTPAnalyzer.java"", ""oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/mx/ServiceMetaInfoAdapter.java"", ""oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/tcp/mx/MetaExchangeTCPAccessLogAnalyzer.java"", ""oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/test/resources/metadata-service-mapping.yaml"", ""oap-server/server-starter/src/main/resources/cilium-rules/metadata-service-mapping.yaml"", ""oap-server/server-starter/src/main/resources/metadata-service-mapping.yaml"", ""test/e2e-v2/cases/cilium/traffic-gen.yaml"", ""test/e2e-v2/cases/istio/kind.k28.yaml"", ""test/e2e-v2/cases/istio/log4j2.xml"", ""test/e2e-v2/cases/istio/traffic-gen.yaml"", ""test/e2e-v2/cases/istio/values.yaml"", ""test/e2e-v2/cases/profiling/ebpf/access_log/traffic-gen.yaml""], ""pr_changed_test_files"": [""oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/test/resources/metadata-service-mapping.yaml"", ""test/e2e-v2/cases/cilium/traffic-gen.yaml"", ""test/e2e-v2/cases/istio/kind.k28.yaml"", ""test/e2e-v2/cases/istio/log4j2.xml"", ""test/e2e-v2/cases/istio/traffic-gen.yaml"", ""test/e2e-v2/cases/istio/values.yaml"", ""test/e2e-v2/cases/profiling/ebpf/access_log/traffic-gen.yaml""], ""base_commit"": ""5c5274b93a5a12ebab62edea4cca7246366e992a"", ""head_commit"": ""aebea9e68382176c6b8eb1359b8f7036d5f2dd6f"", ""repo_url"": ""https://github.com/apache/skywalking/pull/12768"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/apache__skywalking/12768"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-13T06:41:51.000Z"", ""patch"": ""diff --git a/.github/workflows/skywalking.yaml b/.github/workflows/skywalking.yaml\nindex 855a3e3c1793..8edb000dc007 100644\n--- a/.github/workflows/skywalking.yaml\n+++ b/.github/workflows/skywalking.yaml\n@@ -555,26 +555,31 @@ jobs:\n           - name: Kafka Log\n             config: test/e2e-v2/cases/kafka/log/e2e.yaml\n \n-          - name: Istio Metrics Service 1.15.0\n+          - name: Istio Metrics Service 1.20.0\n             config: test/e2e-v2/cases/istio/metrics/e2e.yaml\n             env: |\n-              ISTIO_VERSION=1.15.0\n-              KUBERNETES_VERSION=25\n-          - name: Istio Metrics Service 1.16.0\n+              ISTIO_VERSION=1.20.0\n+              KUBERNETES_VERSION=28\n+          - name: Istio Metrics Service 1.21.0\n             config: test/e2e-v2/cases/istio/metrics/e2e.yaml\n             env: |\n-              ISTIO_VERSION=1.16.0\n-              KUBERNETES_VERSION=25\n-          - name: Istio Metrics Service 1.17.0\n+              ISTIO_VERSION=1.21.0\n+              KUBERNETES_VERSION=28\n+          - name: Istio Metrics Service 1.22.0\n             config: test/e2e-v2/cases/istio/metrics/e2e.yaml\n             env: |\n-              ISTIO_VERSION=1.17.0\n-              KUBERNETES_VERSION=25\n-          - name: Istio Metrics Service 1.18.0\n+              ISTIO_VERSION=1.22.0\n+              KUBERNETES_VERSION=28\n+          - name: Istio Metrics Service 1.23.0\n             config: test/e2e-v2/cases/istio/metrics/e2e.yaml\n             env: |\n-              ISTIO_VERSION=1.18.0\n-              KUBERNETES_VERSION=25\n+              ISTIO_VERSION=1.23.0\n+              KUBERNETES_VERSION=28\n+          - name: Istio Metrics Service 1.24.0\n+            config: test/e2e-v2/cases/istio/metrics/e2e.yaml\n+            env: |\n+              ISTIO_VERSION=1.24.0\n+              KUBERNETES_VERSION=28\n \n           - name: Rover with Istio Process 1.15.0\n             config: test/e2e-v2/cases/rover/process/istio/e2e.yaml\n@@ -769,14 +774,16 @@ jobs:\n       matrix:\n         analyzer: [k8s-mesh, mx-mesh]\n         versions:\n-          - istio: 1.15.0\n-            kubernetes: 25\n-          - istio: 1.16.0\n-            kubernetes: 25\n-          - istio: 1.17.0\n-            kubernetes: 25\n-          - istio: 1.18.0\n-            kubernetes: 25\n+          - istio: 1.20.0\n+            kubernetes: 28\n+          - istio: 1.21.0\n+            kubernetes: 28\n+          - istio: 1.22.0\n+            kubernetes: 28\n+          - istio: 1.23.0\n+            kubernetes: 28\n+          - istio: 1.24.0\n+            kubernetes: 28\n \n     steps:\n       - uses: actions/checkout@v3\n\ndiff --git a/docker/oap/log4j2.xml b/docker/oap/log4j2.xml\nindex 6152fc75c2b2..e5869e2914e2 100644\n--- a/docker/oap/log4j2.xml\n+++ b/docker/oap/log4j2.xml\n@@ -28,7 +28,7 @@\n         </Console>\n     </Appenders>\n     <Loggers>\n-        <Root level=\""INFO\"">\n+        <Root level=\""DEBUG\"">\n             <AppenderRef ref=\""Console\""/>\n         </Root>\n     </Loggers>\n\ndiff --git a/docs/en/changes/changes.md b/docs/en/changes/changes.md\nindex 0617ec035e67..77b1ffb9dca3 100644\n--- a/docs/en/changes/changes.md\n+++ b/docs/en/changes/changes.md\n@@ -19,6 +19,7 @@\n * Add max query size settings to BanyanDB.\n * Fix \""BanyanDBTraceQueryDAO.queryBasicTraces\"" doesn't support querying by \""trace_id\"".\n * Polish mesh data dispatcher: don't generate Instance/Endpoint metrics if they are empty.\n+* Adapt the new metadata standardization in Istio 1.24.\n \n #### UI\n \n\ndiff --git a/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FieldsHelper.java b/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FieldsHelper.java\nindex d5dcf38252f4..48fd9aabbfa8 100644\n--- a/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FieldsHelper.java\n+++ b/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FieldsHelper.java\n@@ -38,6 +38,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.TreeMap;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.function.BiConsumer;\n import java.util.regex.Matcher;\n@@ -166,7 +167,7 @@ public void init(final InputStream inputStream) {\n     public void inflate(final Struct metadata, final Object target) {\n         final Value empty = Value.newBuilder().setStringValue(\""-\"").build();\n         final Value root = Value.newBuilder().setStructValue(metadata).build();\n-        for (final Map.Entry<String, FieldFormat> entry : fieldNameMapping.entrySet()) {\n+        for (final var entry : fieldNameMapping.entrySet()) {\n             final FieldFormat fieldFormat = entry.getValue();\n             final Object[] values = new String[fieldFormat.properties.size()];\n             for (int i = 0; i < fieldFormat.properties.size(); i++) {\n@@ -175,7 +176,9 @@ public void inflate(final Struct metadata, final Object target) {\n                 for (final Field field : property) {\n                     Value value = root;\n                     for (final String segment : field.dsvSegments) {\n-                        value = value.getStructValue().getFieldsOrDefault(segment, empty);\n+                        final var fieldMaps = new TreeMap<String, Value>(String.CASE_INSENSITIVE_ORDER);\n+                        fieldMaps.putAll(value.getStructValue().getFieldsMap());\n+                        value = fieldMaps.getOrDefault(segment, empty);\n                     }\n                     if (Strings.isNullOrEmpty(value.getStringValue()) || \""-\"".equals(value.getStringValue())) {\n                         continue;\n\ndiff --git a/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/mx/MetaExchangeALSHTTPAnalyzer.java b/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/mx/MetaExchangeALSHTTPAnalyzer.java\nindex c8b03e112e5d..e8ad193c6572 100644\n--- a/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/mx/MetaExchangeALSHTTPAnalyzer.java\n+++ b/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/mx/MetaExchangeALSHTTPAnalyzer.java\n@@ -18,24 +18,30 @@\n \n package org.apache.skywalking.oap.server.receiver.envoy.als.mx;\n \n-import com.google.protobuf.Any;\n-import com.google.protobuf.TextFormat;\n-import io.envoyproxy.envoy.data.accesslog.v3.HTTPAccessLogEntry;\n-import io.envoyproxy.envoy.service.accesslog.v3.StreamAccessLogsMessage;\n-import lombok.extern.slf4j.Slf4j;\n+import static org.apache.skywalking.oap.server.core.Const.TLS_MODE.NON_TLS;\n+\n+import java.util.Base64;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n import org.apache.skywalking.apm.network.servicemesh.v3.HTTPServiceMeshMetric;\n+import org.apache.skywalking.apm.network.servicemesh.v3.HTTPServiceMeshMetrics.Builder;\n import org.apache.skywalking.oap.server.library.module.ModuleManager;\n import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n import org.apache.skywalking.oap.server.library.util.FieldsHelper;\n import org.apache.skywalking.oap.server.receiver.envoy.EnvoyMetricReceiverConfig;\n import org.apache.skywalking.oap.server.receiver.envoy.als.AbstractALSAnalyzer;\n+import org.apache.skywalking.oap.server.receiver.envoy.als.AccessLogAnalyzer.Result.ResultBuilder;\n import org.apache.skywalking.oap.server.receiver.envoy.als.Role;\n import org.apache.skywalking.oap.server.receiver.envoy.als.ServiceMetaInfo;\n \n-import java.util.Base64;\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import com.google.protobuf.Any;\n+import com.google.protobuf.Struct;\n+import com.google.protobuf.TextFormat;\n \n-import static org.apache.skywalking.oap.server.core.Const.TLS_MODE.NON_TLS;\n+import io.envoyproxy.envoy.data.accesslog.v3.HTTPAccessLogEntry;\n+import io.envoyproxy.envoy.service.accesslog.v3.StreamAccessLogsMessage;\n+import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class MetaExchangeALSHTTPAnalyzer extends AbstractALSAnalyzer {\n@@ -44,6 +50,10 @@ public class MetaExchangeALSHTTPAnalyzer extends AbstractALSAnalyzer {\n \n     public static final String DOWNSTREAM_KEY = \""wasm.downstream_peer\"";\n \n+    public static final String UPSTREAM_PEER = \""upstream_peer\"";\n+\n+    public static final String DOWNSTREAM_PEER = \""downstream_peer\"";\n+\n     protected String fieldMappingFile = \""metadata-service-mapping.yaml\"";\n \n     protected EnvoyMetricReceiverConfig config;\n@@ -86,6 +96,9 @@ public Result analysis(\n         final var properties = entry.getCommonProperties();\n         final var stateMap = properties.getFilterStateObjectsMap();\n         final var result = previousResult.toBuilder();\n+        if (log.isDebugEnabled()) {\n+            log.debug(\""Filter state object map: {}\"", stateMap);\n+        }\n         if (stateMap.isEmpty()) {\n             return result.service(currSvc).build();\n         }\n@@ -93,6 +106,24 @@ public Result analysis(\n         final var previousMetrics = previousResult.getMetrics();\n         final var httpMetrics = previousMetrics.getHttpMetricsBuilder();\n         final var downstreamExists = new AtomicBoolean();\n+        parseFilterObject(previousResult, entry, role, currSvc, stateMap, result, httpMetrics, downstreamExists);\n+        parseFilterObjectPrior124(previousResult, entry, role, currSvc, stateMap, result, httpMetrics, downstreamExists);\n+        if (role.equals(Role.PROXY) && !downstreamExists.get()) {\n+            final var metric = newAdapter(entry, config.serviceMetaInfoFactory().unknown(), currSvc).adaptToDownstreamMetrics();\n+            if (log.isDebugEnabled()) {\n+                log.debug(\""Transformed a {} inbound mesh metric {}\"", role, TextFormat.shortDebugString(metric));\n+            }\n+            httpMetrics.addMetrics(metric);\n+            result.hasDownstreamMetrics(true);\n+        }\n+        return result.metrics(previousMetrics.setHttpMetrics(httpMetrics)).service(currSvc).build();\n+    }\n+\n+    // TODO: remove this when 1.24.0 is our minimum supported version.\n+    @Deprecated(forRemoval = true)\n+    private void parseFilterObjectPrior124(final Result previousResult, final HTTPAccessLogEntry entry, final Role role,\n+            final ServiceMetaInfo currSvc, final Map<String, Any> stateMap, final ResultBuilder result,\n+            final Builder httpMetrics, final AtomicBoolean downstreamExists) {\n         stateMap.forEach((key, value) -> {\n             if (!key.equals(UPSTREAM_KEY) && !key.equals(DOWNSTREAM_KEY)) {\n                 return;\n@@ -131,21 +162,63 @@ public Result analysis(\n                     break;\n             }\n         });\n-        if (role.equals(Role.PROXY) && !downstreamExists.get()) {\n-            final var metric = newAdapter(entry, config.serviceMetaInfoFactory().unknown(), currSvc).adaptToDownstreamMetrics();\n+    }\n+\n+    private void parseFilterObject(final Result previousResult, final HTTPAccessLogEntry entry, final Role role,\n+            final ServiceMetaInfo currSvc, final Map<String, Any> stateMap, final ResultBuilder result,\n+            final Builder httpMetrics, final AtomicBoolean downstreamExists) {\n+        stateMap.forEach((key, value) -> {\n+            if (!key.equals(UPSTREAM_PEER) && !key.equals(DOWNSTREAM_PEER)) {\n+                return;\n+            }\n             if (log.isDebugEnabled()) {\n-                log.debug(\""Transformed a {} inbound mesh metric {}\"", role, TextFormat.shortDebugString(metric));\n+                log.debug(\""Filter state object key: {}, value: {}\"", key, value);\n             }\n-            httpMetrics.addMetrics(metric);\n-            result.hasDownstreamMetrics(true);\n-        }\n-        return result.metrics(previousMetrics.setHttpMetrics(httpMetrics)).service(currSvc).build();\n+            final ServiceMetaInfo svc;\n+            try {\n+                log.debug(\""Filter state object value map: {}\"", value.unpack(Struct.class).getFieldsMap());\n+                svc = adaptToServiceMetaInfo(value.unpack(Struct.class));\n+            } catch (Exception e) {\n+                log.error(\""Fail to parse metadata {} to FlatNode\"", Base64.getEncoder().encode(value.toByteArray()));\n+                return;\n+            }\n+            final HTTPServiceMeshMetric.Builder metrics;\n+            switch (key) {\n+                case UPSTREAM_PEER:\n+                    if (previousResult.hasUpstreamMetrics()) {\n+                        break;\n+                    }\n+                    metrics = newAdapter(entry, currSvc, svc).adaptToUpstreamMetrics().setTlsMode(NON_TLS);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\""Transformed a {} outbound mesh metrics {}\"", role, TextFormat.shortDebugString(metrics));\n+                    }\n+                    httpMetrics.addMetrics(metrics);\n+                    result.hasUpstreamMetrics(true);\n+                    break;\n+                case DOWNSTREAM_PEER:\n+                    if (previousResult.hasDownstreamMetrics()) {\n+                        break;\n+                    }\n+                    metrics = newAdapter(entry, svc, currSvc).adaptToDownstreamMetrics();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\""Transformed a {} inbound mesh metrics {}\"", role, TextFormat.shortDebugString(metrics));\n+                    }\n+                    httpMetrics.addMetrics(metrics);\n+                    downstreamExists.set(true);\n+                    result.hasDownstreamMetrics(true);\n+                    break;\n+            }\n+        });\n     }\n \n     protected ServiceMetaInfo adaptToServiceMetaInfo(final Any value) throws Exception {\n         return new ServiceMetaInfoAdapter(value);\n     }\n \n+    protected ServiceMetaInfo adaptToServiceMetaInfo(final Struct struct) throws Exception {\n+        return config.serviceMetaInfoFactory().fromStruct(struct);\n+    }\n+\n     protected ServiceMetaInfo adaptToServiceMetaInfo(final StreamAccessLogsMessage.Identifier identifier) throws Exception {\n         return config.serviceMetaInfoFactory().fromStruct(identifier.getNode().getMetadata());\n     }\n\ndiff --git a/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/mx/ServiceMetaInfoAdapter.java b/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/mx/ServiceMetaInfoAdapter.java\nindex 902b78a6ca17..c3d4184daf69 100644\n--- a/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/mx/ServiceMetaInfoAdapter.java\n+++ b/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/mx/ServiceMetaInfoAdapter.java\n@@ -29,6 +29,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n+import java.util.TreeMap;\n \n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n@@ -65,6 +66,9 @@ public ServiceMetaInfoAdapter(final ByteString bv) throws Exception {\n         }\n \n         final Struct metadata = requireNonNull(extractStructFromNodeFlatBuffer(flatNode));\n+        if (log.isDebugEnabled()) {\n+            log.debug(\""Node metadata: {}\"", metadata);\n+        }\n         FieldsHelper.forClass(this.getClass().getSuperclass()).inflate(metadata, this);\n         appendTags(metadata);\n     }\n@@ -111,10 +115,17 @@ public static Struct extractStructFromNodeFlatBuffer(final FlatNode node) {\n     public ServiceMetaInfoAdapter(final Struct metadata) {\n         FieldsHelper.forClass(this.getClass().getSuperclass()).inflate(requireNonNull(metadata), this);\n         appendTags(requireNonNull(metadata));\n+        if (log.isDebugEnabled()) {\n+            log.info(\""Metadata is converted to: {}\"", this);\n+        }\n     }\n \n     private void appendTags(Struct metadata) {\n-        final Map<String, Value> fieldsMap = metadata.getFieldsMap();\n+        final Map<String, Value> fieldsMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+        fieldsMap.putAll(metadata.getFieldsMap());\n+        if (log.isDebugEnabled()) {\n+            log.debug(\""Metadata field map: {}\"", fieldsMap);\n+        }\n         final List<KeyValue> tags = new ArrayList<>();\n         if (fieldsMap.containsKey(\""NAME\"")) {\n             tags.add(new KeyValue(\""pod\"", fieldsMap.get(\""NAME\"").getStringValue()));\n@@ -122,6 +133,9 @@ private void appendTags(Struct metadata) {\n         if (fieldsMap.containsKey(\""NAMESPACE\"")) {\n             tags.add(new KeyValue(\""namespace\"", fieldsMap.get(\""NAMESPACE\"").getStringValue()));\n         }\n+        if (log.isDebugEnabled()) {\n+            log.debug(\""Converted tags: {}\"", tags);\n+        }\n         if (!tags.isEmpty()) {\n             this.setTags(tags);\n         }\n\ndiff --git a/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/tcp/mx/MetaExchangeTCPAccessLogAnalyzer.java b/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/tcp/mx/MetaExchangeTCPAccessLogAnalyzer.java\nindex 5d2e67835274..469f49e50780 100644\n--- a/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/tcp/mx/MetaExchangeTCPAccessLogAnalyzer.java\n+++ b/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/tcp/mx/MetaExchangeTCPAccessLogAnalyzer.java\n@@ -19,16 +19,19 @@\n package org.apache.skywalking.oap.server.receiver.envoy.als.tcp.mx;\n \n import com.google.protobuf.Any;\n+import com.google.protobuf.Struct;\n import com.google.protobuf.TextFormat;\n import io.envoyproxy.envoy.data.accesslog.v3.AccessLogCommon;\n import io.envoyproxy.envoy.data.accesslog.v3.TCPAccessLogEntry;\n import io.envoyproxy.envoy.service.accesslog.v3.StreamAccessLogsMessage;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.skywalking.apm.network.servicemesh.v3.TCPServiceMeshMetric;\n+import org.apache.skywalking.apm.network.servicemesh.v3.TCPServiceMeshMetrics.Builder;\n import org.apache.skywalking.oap.server.library.module.ModuleManager;\n import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n import org.apache.skywalking.oap.server.library.util.FieldsHelper;\n import org.apache.skywalking.oap.server.receiver.envoy.EnvoyMetricReceiverConfig;\n+import org.apache.skywalking.oap.server.receiver.envoy.als.AccessLogAnalyzer.Result.ResultBuilder;\n import org.apache.skywalking.oap.server.receiver.envoy.als.Role;\n import org.apache.skywalking.oap.server.receiver.envoy.als.ServiceMetaInfo;\n import org.apache.skywalking.oap.server.receiver.envoy.als.mx.ServiceMetaInfoAdapter;\n@@ -40,7 +43,9 @@\n \n import static org.apache.skywalking.oap.server.core.Const.TLS_MODE.NON_TLS;\n import static org.apache.skywalking.oap.server.receiver.envoy.als.mx.MetaExchangeALSHTTPAnalyzer.DOWNSTREAM_KEY;\n+import static org.apache.skywalking.oap.server.receiver.envoy.als.mx.MetaExchangeALSHTTPAnalyzer.DOWNSTREAM_PEER;\n import static org.apache.skywalking.oap.server.receiver.envoy.als.mx.MetaExchangeALSHTTPAnalyzer.UPSTREAM_KEY;\n+import static org.apache.skywalking.oap.server.receiver.envoy.als.mx.MetaExchangeALSHTTPAnalyzer.UPSTREAM_PEER;\n \n @Slf4j\n public class MetaExchangeTCPAccessLogAnalyzer extends AbstractTCPAccessLogAnalyzer {\n@@ -93,6 +98,23 @@ public Result analysis(\n \n         final var tcpMetrics = previousMetrics.getTcpMetricsBuilder();\n         final var downstreamExists = new AtomicBoolean();\n+        parseFilterObject(previousResult, entry, role, currSvc, stateMap, newResult, tcpMetrics, downstreamExists);\n+        parseFilterObjectPrior124(previousResult, entry, role, currSvc, stateMap, newResult, tcpMetrics, downstreamExists);\n+        if (role.equals(Role.PROXY) && !downstreamExists.get()) {\n+            final TCPServiceMeshMetric.Builder metric = newAdapter(entry, config.serviceMetaInfoFactory().unknown(), currSvc).adaptToDownstreamMetrics();\n+            if (log.isDebugEnabled()) {\n+                log.debug(\""Transformed a {} inbound mesh metric {}\"", role, TextFormat.shortDebugString(metric));\n+            }\n+            tcpMetrics.addMetrics(metric);\n+        }\n+        return newResult.metrics(previousMetrics.setTcpMetrics(tcpMetrics)).service(currSvc).build();\n+    }\n+\n+    // TODO: remove this when 1.24.0 is our minimum supported version.\n+    @Deprecated(forRemoval = true)\n+    private void parseFilterObjectPrior124(final Result previousResult, final TCPAccessLogEntry entry, final Role role,\n+            final ServiceMetaInfo currSvc, final Map<String, Any> stateMap, final ResultBuilder newResult,\n+            final Builder tcpMetrics, final AtomicBoolean downstreamExists) {\n         stateMap.forEach((key, value) -> {\n             if (!key.equals(UPSTREAM_KEY) && !key.equals(DOWNSTREAM_KEY)) {\n                 return;\n@@ -131,20 +153,63 @@ public Result analysis(\n                     break;\n             }\n         });\n-        if (role.equals(Role.PROXY) && !downstreamExists.get()) {\n-            final TCPServiceMeshMetric.Builder metric = newAdapter(entry, config.serviceMetaInfoFactory().unknown(), currSvc).adaptToDownstreamMetrics();\n+    }\n+\n+    private void parseFilterObject(final Result previousResult, final TCPAccessLogEntry entry, final Role role,\n+            final ServiceMetaInfo currSvc, final Map<String, Any> stateMap, final ResultBuilder newResult,\n+            final Builder tcpMetrics, final AtomicBoolean downstreamExists) {\n+        stateMap.forEach((key, value) -> {\n+            if (!key.equals(UPSTREAM_PEER) && !key.equals(DOWNSTREAM_PEER)) {\n+                return;\n+            }\n             if (log.isDebugEnabled()) {\n-                log.debug(\""Transformed a {} inbound mesh metric {}\"", role, TextFormat.shortDebugString(metric));\n+                log.debug(\""Filter state object key: {}, value: {}\"", key, value);\n             }\n-            tcpMetrics.addMetrics(metric);\n-        }\n-        return newResult.metrics(previousMetrics.setTcpMetrics(tcpMetrics)).service(currSvc).build();\n+            final ServiceMetaInfo svc;\n+            try {\n+                log.debug(\""Filter state object value map: {}\"", value.unpack(Struct.class).getFieldsMap());\n+                svc = adaptToServiceMetaInfo(value.unpack(Struct.class));\n+            } catch (Exception e) {\n+                log.error(\""Fail to parse metadata {} to FlatNode\"", Base64.getEncoder().encode(value.toByteArray()));\n+                return;\n+            }\n+            final TCPServiceMeshMetric.Builder metrics;\n+            switch (key) {\n+                case UPSTREAM_PEER:\n+                    if (previousResult.hasUpstreamMetrics()) {\n+                        break;\n+                    }\n+                    metrics = newAdapter(entry, currSvc, svc).adaptToUpstreamMetrics().setTlsMode(NON_TLS);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\""Transformed a {} outbound mesh metrics {}\"", role, TextFormat.shortDebugString(metrics));\n+                    }\n+                    tcpMetrics.addMetrics(metrics);\n+                    newResult.hasUpstreamMetrics(true);\n+                    break;\n+                case DOWNSTREAM_PEER:\n+                    if (previousResult.hasDownstreamMetrics()) {\n+                        break;\n+                    }\n+                    metrics = newAdapter(entry, svc, currSvc).adaptToDownstreamMetrics();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\""Transformed a {} inbound mesh metrics {}\"", role, TextFormat.shortDebugString(metrics));\n+                    }\n+                    tcpMetrics.addMetrics(metrics);\n+                    downstreamExists.set(true);\n+                    newResult.hasDownstreamMetrics(true);\n+                    break;\n+            }\n+        });\n     }\n \n     protected ServiceMetaInfo adaptToServiceMetaInfo(final Any value) throws Exception {\n         return new ServiceMetaInfoAdapter(value);\n     }\n \n+    protected ServiceMetaInfo adaptToServiceMetaInfo(final Struct struct) throws Exception {\n+        return config.serviceMetaInfoFactory().fromStruct(struct);\n+    }\n+\n     protected ServiceMetaInfo adaptToServiceMetaInfo(final StreamAccessLogsMessage.Identifier identifier) throws Exception {\n         return config.serviceMetaInfoFactory().fromStruct(identifier.getNode().getMetadata());\n     }\n\ndiff --git a/oap-server/server-starter/src/main/resources/cilium-rules/metadata-service-mapping.yaml b/oap-server/server-starter/src/main/resources/cilium-rules/metadata-service-mapping.yaml\nindex 6246e987fc14..a201089f37e4 100644\n--- a/oap-server/server-starter/src/main/resources/cilium-rules/metadata-service-mapping.yaml\n+++ b/oap-server/server-starter/src/main/resources/cilium-rules/metadata-service-mapping.yaml\n@@ -13,5 +13,5 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n-serviceName: ${LABELS.\""service.istio.io/canonical-name\"",LABELS.\""app.kubernetes.io/name\"",LABELS.component,LABELS.app,LABELS.k8s-app}.${NAMESPACE}\n+serviceName: ${LABELS.\""service.istio.io/canonical-name\"",LABELS.\""app.kubernetes.io/name\"",LABELS.component,LABELS.app,LABELS.k8s-app,SERVICE}.${NAMESPACE}\n serviceInstanceName: ${NAME}\n\ndiff --git a/oap-server/server-starter/src/main/resources/metadata-service-mapping.yaml b/oap-server/server-starter/src/main/resources/metadata-service-mapping.yaml\nindex cf9522b15041..93b324948eba 100644\n--- a/oap-server/server-starter/src/main/resources/metadata-service-mapping.yaml\n+++ b/oap-server/server-starter/src/main/resources/metadata-service-mapping.yaml\n@@ -13,5 +13,5 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n-serviceName: ${LABELS.\""service.istio.io/canonical-name\"",LABELS.\""app.kubernetes.io/name\"",LABELS.app,LABELS.k8s-app}.${NAMESPACE}\n+serviceName: ${LABELS.\""service.istio.io/canonical-name\"",LABELS.\""app.kubernetes.io/name\"",LABELS.app,LABELS.k8s-app,SERVICE}.${NAMESPACE}\n serviceInstanceName: ${NAME}\n"", ""test_patch"": ""diff --git a/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/test/resources/metadata-service-mapping.yaml b/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/test/resources/metadata-service-mapping.yaml\nindex acb4d430a3db..40461718dde4 100644\n--- a/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/test/resources/metadata-service-mapping.yaml\n+++ b/oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/test/resources/metadata-service-mapping.yaml\n@@ -13,5 +13,5 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n-serviceName: ${LABELS.\""service.istio.io/canonical-revision\""}.${LABELS.\""service.istio.io/canonical-name\"",LABELS.\""app.kubernetes.io/name\"",LABELS.app}.${NAMESPACE}\n+serviceName: ${LABELS.\""service.istio.io/canonical-revision\"",REVISION}.${LABELS.\""service.istio.io/canonical-name\"",LABELS.\""app.kubernetes.io/name\"",LABELS.app,SERVICE}.${NAMESPACE}\n serviceInstanceName: ${NAME}\n\ndiff --git a/test/e2e-v2/cases/cilium/traffic-gen.yaml b/test/e2e-v2/cases/cilium/traffic-gen.yaml\nindex 4e3b05021672..590ff4d98fa9 100644\n--- a/test/e2e-v2/cases/cilium/traffic-gen.yaml\n+++ b/test/e2e-v2/cases/cilium/traffic-gen.yaml\n@@ -33,8 +33,15 @@ spec:\n     spec:\n       containers:\n         - name: trafficgenerator\n-          image: elswork/wrk\n-          command: [\""wrk\"", \""-t1\"", \""-c1\"", \""-d20m\"", \""http://productpage:9080/productpage\""]\n+          image: alpine/curl:8.9.1\n+          command: [\""/bin/sh\"", \""-c\"", \""--\""]\n+          args:\n+            - |\n+              while true; do\n+                curl -s -o /dev/null -w \""%{http_code}\\n\"" http://productpage:9080/productpage\n+                sleep 1\n+              done\n           resources:\n             requests:\n-              cpu: 0.1\n\\ No newline at end of file\n+              cpu: 0.1\n+\n\ndiff --git a/test/e2e-v2/cases/istio/kind.k28.yaml b/test/e2e-v2/cases/istio/kind.k28.yaml\nnew file mode 100644\nindex 000000000000..6bb82dfce82e\n--- /dev/null\n+++ b/test/e2e-v2/cases/istio/kind.k28.yaml\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \""License\""); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \""AS IS\"" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+kind: Cluster\n+apiVersion: kind.x-k8s.io/v1alpha4\n+nodes:\n+  - role: control-plane\n+    image: kindest/node:v1.28.15@sha256:a7c05c7ae043a0b8c818f5a06188bc2c4098f6cb59ca7d1856df00375d839251\n\ndiff --git a/test/e2e-v2/cases/istio/log4j2.xml b/test/e2e-v2/cases/istio/log4j2.xml\nindex 9e132a8d8bfe..2565d7f70a46 100644\n--- a/test/e2e-v2/cases/istio/log4j2.xml\n+++ b/test/e2e-v2/cases/istio/log4j2.xml\n@@ -34,7 +34,7 @@\n         <logger name=\""org.apache.skywalking.oap.server.storage.plugin.elasticsearch\"" level=\""DEBUG\""/>\n         <logger name=\""org.apache.skywalking.oap.server.core.storage.ttl\"" level=\""DEBUG\""/>\n         <logger name=\""org.apache.skywalking.library.elasticsearch\"" level=\""DEBUG\""/>\n-        <Root level=\""INFO\"">\n+        <Root level=\""DEBUG\"">\n             <AppenderRef ref=\""Console\""/>\n         </Root>\n     </Loggers>\n\ndiff --git a/test/e2e-v2/cases/istio/traffic-gen.yaml b/test/e2e-v2/cases/istio/traffic-gen.yaml\nindex 549bcfde6595..0b365ce2eb07 100644\n--- a/test/e2e-v2/cases/istio/traffic-gen.yaml\n+++ b/test/e2e-v2/cases/istio/traffic-gen.yaml\n@@ -33,8 +33,15 @@ spec:\n     spec:\n       containers:\n         - name: trafficgenerator\n-          image: williamyeh/wrk\n-          command: [\""wrk\"", \""-t1\"", \""-c1\"", \""-d20m\"", \""http://istio-ingressgateway.istio-system:80/productpage\""]\n+          image: alpine/curl:8.9.1\n+          command: [\""/bin/sh\"", \""-c\"", \""--\""]\n+          args:\n+            - |\n+              while true; do\n+                curl -s -o /dev/null -w \""%{http_code}\\n\"" http://istio-ingressgateway.istio-system:80/productpage\n+                sleep 1\n+              done\n           resources:\n             requests:\n-              cpu: 0.1\n\\ No newline at end of file\n+              cpu: 0.1\n+\n\ndiff --git a/test/e2e-v2/cases/istio/values.yaml b/test/e2e-v2/cases/istio/values.yaml\nindex 8b42ad4765f1..27426bbd75f0 100644\n--- a/test/e2e-v2/cases/istio/values.yaml\n+++ b/test/e2e-v2/cases/istio/values.yaml\n@@ -16,7 +16,7 @@\n oap:\n   config:\n     metadata-service-mapping.yaml: |\n-      serviceName: e2e::${LABELS.\""service.istio.io/canonical-name\""}\n+      serviceName: e2e::${LABELS.\""service.istio.io/canonical-name\"",SERVICE}\n       serviceInstanceName: ${NAME}\n \n elasticsearch:\n\ndiff --git a/test/e2e-v2/cases/profiling/ebpf/access_log/traffic-gen.yaml b/test/e2e-v2/cases/profiling/ebpf/access_log/traffic-gen.yaml\nindex 4e3b05021672..a1d08fef93f1 100644\n--- a/test/e2e-v2/cases/profiling/ebpf/access_log/traffic-gen.yaml\n+++ b/test/e2e-v2/cases/profiling/ebpf/access_log/traffic-gen.yaml\n@@ -33,8 +33,14 @@ spec:\n     spec:\n       containers:\n         - name: trafficgenerator\n-          image: elswork/wrk\n-          command: [\""wrk\"", \""-t1\"", \""-c1\"", \""-d20m\"", \""http://productpage:9080/productpage\""]\n+          image: alpine/curl:8.9.1\n+          command: [\""/bin/sh\"", \""-c\"", \""--\""]\n+          args:\n+            - |\n+              while true; do\n+                curl -s -o /dev/null -w \""%{http_code}\\n\"" http://productpage:9080/productpage\n+                sleep 1\n+              done\n           resources:\n             requests:\n-              cpu: 0.1\n\\ No newline at end of file\n+              cpu: 0.1\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
