metadata
"{""instance_id"": ""checkstyle__checkstyle-16967"", ""pr_id"": 16967, ""issue_id"": 11249, ""repo"": ""checkstyle/checkstyle"", ""problem_statement"": ""Enforce formatting of `// violation` and `// ok` comments\nNoticed in many PR's, it is difficult to make sure that all BDD and documentation related comments (`// ok` and `// violation`) adhere to consistent format. We can save time in PR reviews by adding `RegexpSingleline` modules to associated configs.\r\n\r\n\r\nUsual convention:\r\n\r\n```\r\n\u279c  checkstyle git:(master) grep -R \""\\/\\/ ok\"" | wc -l\r\n4049\r\n\u279c  checkstyle git:(master) grep -R \""\\/\\/ violation\"" | wc -l\r\n74064\r\n\r\n```\r\n\r\nWe should forbid the following forms of comments:\r\n\r\n```\r\n\u279c  checkstyle git:(master) grep -iR \""\\/\\/ok\"" | wc -l \r\n341\r\n\u279c  checkstyle git:(master) grep -iR \""\\/\\/violation\"" | wc -l\r\n107\r\n\u279c  checkstyle git:(master) grep -R \""\\/\\/ Violation\"" | wc -l\r\n61\r\n\u279c  checkstyle git:(master) grep -R \""\\/\\/ VIOLATION\"" | wc -l\r\n1\r\n\u279c  checkstyle git:(master) grep -R \""\\/\\/ OK\"" | wc -l\r\n1563\r\n\u279c  checkstyle git:(master) grep -R \""\\/\\/ bad\"" | wc -l\r\n6\r\n\u279c  checkstyle git:(master) grep -R \""\\/\\/bad\"" | wc -l\r\n8\r\n\u279c  checkstyle git:(master) \u2717 grep -R \""\\/\\/ no violation\"" | wc -l\r\n203\r\n\r\n```\r\n\r\nWhile check input files are not a big deal (but should also be fixed and enforced), many of these are in documentation, where we should make sure to always be consistent."", ""issue_word_count"": 178, ""test_files_count"": 2, ""non_test_files_count"": 9, ""pr_changed_files"": [""src/site/xdoc/checks/coding/variabledeclarationusagedistance.xml"", ""src/site/xdoc/filters/suppresswithnearbycommentfilter.xml"", ""src/test/java/com/puppycrawl/tools/checkstyle/bdd/InlineConfigParser.java"", ""src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/emptylineseparator/InputEmptyLineSeparatorNoViolationOnEmptyLineBeforeComments.java"", ""src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example1.java"", ""src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example2.java"", ""src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example3.java"", ""src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example4.java"", ""src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example5.java"", ""src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example6.java"", ""src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/filters/suppresswithnearbycommentfilter/Example3.java""], ""pr_changed_test_files"": [""src/test/java/com/puppycrawl/tools/checkstyle/bdd/InlineConfigParser.java"", ""src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/emptylineseparator/InputEmptyLineSeparatorNoViolationOnEmptyLineBeforeComments.java""], ""base_commit"": ""a3c421f2deb3dc936f509b2ad807bed05ad90e35"", ""head_commit"": ""3082c355466bc8317f49c53e5a59e3a9450110ba"", ""repo_url"": ""https://github.com/checkstyle/checkstyle/pull/16967"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/checkstyle__checkstyle/16967"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-04T18:48:55.000Z"", ""patch"": ""diff --git a/src/site/xdoc/checks/coding/variabledeclarationusagedistance.xml b/src/site/xdoc/checks/coding/variabledeclarationusagedistance.xml\nindex 713e2aae28a..f7f7b405d5b 100644\n--- a/src/site/xdoc/checks/coding/variabledeclarationusagedistance.xml\n+++ b/src/site/xdoc/checks/coding/variabledeclarationusagedistance.xml\n@@ -76,7 +76,7 @@ public class Example1 {\n   public void foo1() {\n     // violation below, 'variable 'num' declaration and its first usage is 4.'\n     int num;\n-    final double PI;   // OK, final variables not checked\n+    final double PI;   // ok, final variables not checked\n     System.out.println(\""Statement 1\"");\n     System.out.println(\""Statement 2\"");\n     System.out.println(\""Statement 3\"");\n@@ -85,9 +85,9 @@ public class Example1 {\n   }\n \n   public void foo2() {\n-    int a;          // OK, used in different scope\n-    int b;          // OK, used in different scope\n-    int count = 0;  // OK, used in different scope\n+    int a;          // ok, used in different scope\n+    int b;          // ok, used in different scope\n+    int count = 0;  // ok, used in different scope\n \n     {\n       System.out.println(\""Inside inner scope\"");\n@@ -118,7 +118,7 @@ public class Example1 {\n public class Example2 {\n \n   public void case1(long timeNow, int hh, int min) {\n-    int minutes = min + 5; // Ok, No violation reported\n+    int minutes = min + 5; // ok, No violation reported\n     Calendar cal = Calendar.getInstance();\n     cal.setTimeInMillis(timeNow);\n     cal.set(Calendar.SECOND, 0);\n@@ -166,8 +166,8 @@ public class Example2 {\n public class Example3 {\n \n   public void foo1() {\n-    int num;        // OK, distance = 4\n-    final double PI;   // OK, final variables not checked\n+    int num;        // ok, distance = 4\n+    final double PI;   // ok, final variables not checked\n     System.out.println(\""Statement 1\"");\n     System.out.println(\""Statement 2\"");\n     System.out.println(\""Statement 3\"");\n@@ -176,9 +176,9 @@ public class Example3 {\n   }\n \n   public void foo2() {\n-    int a;          // OK, used in different scope\n-    int b;          // OK, used in different scope\n-    int count = 0;  // OK, used in different scope\n+    int a;          // ok, used in different scope\n+    int b;          // ok, used in different scope\n+    int count = 0;  // ok, used in different scope\n \n     {\n       System.out.println(\""Inside inner scope\"");\n@@ -209,8 +209,8 @@ public class Example3 {\n public class Example4 {\n \n   public void foo1() {\n-    int num;        // OK, variable ignored\n-    final double PI;   // OK, final variables not checked\n+    int num;        // ok, variable ignored\n+    final double PI;   // ok, final variables not checked\n     System.out.println(\""Statement 1\"");\n     System.out.println(\""Statement 2\"");\n     System.out.println(\""Statement 3\"");\n@@ -219,9 +219,9 @@ public class Example4 {\n   }\n \n   public void foo2() {\n-    int a;          // OK, used in different scope\n-    int b;          // OK, used in different scope\n-    int count = 0;  // OK, used in different scope\n+    int a;          // ok, used in different scope\n+    int b;          // ok, used in different scope\n+    int count = 0;  // ok, used in different scope\n \n     {\n       System.out.println(\""Inside inner scope\"");\n@@ -251,7 +251,7 @@ public class Example5 {\n   public void foo1() {\n     // violation below, 'variable 'num' declaration and its first usage is 4.'\n     int num;\n-    final double PI;   // OK, final variables not checked\n+    final double PI;   // ok, final variables not checked\n     System.out.println(\""Statement 1\"");\n     System.out.println(\""Statement 2\"");\n     System.out.println(\""Statement 3\"");\n@@ -260,8 +260,8 @@ public class Example5 {\n   }\n \n   public void foo2() {\n-    int a;          // OK, distance = 2\n-    int b;          // OK, distance = 3\n+    int a;          // ok, distance = 2\n+    int b;          // ok, distance = 3\n     // violation below, 'variable 'count' declaration and its first usage is 4.'\n     int count = 0;\n \n@@ -303,9 +303,9 @@ public class Example6 {\n   }\n \n   public void foo2() {\n-    int a;          // OK, used in different scope\n-    int b;          // OK, used in different scope\n-    int count = 0;  // OK, used in different scope\n+    int a;          // ok, used in different scope\n+    int b;          // ok, used in different scope\n+    int count = 0;  // ok, used in different scope\n \n     {\n       System.out.println(\""Inside inner scope\"");\n\ndiff --git a/src/site/xdoc/filters/suppresswithnearbycommentfilter.xml b/src/site/xdoc/filters/suppresswithnearbycommentfilter.xml\nindex a7fbbe76100..91ca73a5c4a 100644\n--- a/src/site/xdoc/filters/suppresswithnearbycommentfilter.xml\n+++ b/src/site/xdoc/filters/suppresswithnearbycommentfilter.xml\n@@ -149,7 +149,8 @@ public class Example2 {\n &lt;module name=\""Checker\""&gt;\n   &lt;module name=\""TreeWalker\""&gt;\n     &lt;module name=\""SuppressWithNearbyCommentFilter\""&gt;\n-      &lt;property name=\""commentFormat\"" value=\""OK to catch (\\w+) here\""/&gt;\n+      &lt;property name=\""commentFormat\""\n+                value=\""ok,?\\s*(?:allowed\\s+)?to catch (\\w+) here\""/&gt;\n       &lt;property name=\""checkFormat\"" value=\""IllegalCatchCheck\""/&gt;\n       &lt;property name=\""messageFormat\"" value=\""$1\""/&gt;\n       &lt;property name=\""influenceFormat\"" value=\""-1\""/&gt;\n@@ -166,7 +167,7 @@ public class Example3 {\n       // blah blah blah\n     }\n     catch(RuntimeException re) {\n-      // OK to catch RuntimeException here\n+      // ok, allowed to catch RuntimeException here\n     }\n   }\n }\n\ndiff --git a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example1.java b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example1.java\nindex d1003f0ed4e..cca0278901f 100644\n--- a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example1.java\n+++ b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example1.java\n@@ -15,7 +15,7 @@ public class Example1 {\n   public void foo1() {\n     // violation below, 'variable 'num' declaration and its first usage is 4.'\n     int num;\n-    final double PI;   // OK, final variables not checked\n+    final double PI;   // ok, final variables not checked\n     System.out.println(\""Statement 1\"");\n     System.out.println(\""Statement 2\"");\n     System.out.println(\""Statement 3\"");\n@@ -24,9 +24,9 @@ public void foo1() {\n   }\n \n   public void foo2() {\n-    int a;          // OK, used in different scope\n-    int b;          // OK, used in different scope\n-    int count = 0;  // OK, used in different scope\n+    int a;          // ok, used in different scope\n+    int b;          // ok, used in different scope\n+    int count = 0;  // ok, used in different scope\n \n     {\n       System.out.println(\""Inside inner scope\"");\n\ndiff --git a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example2.java b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example2.java\nindex 6fc394e260a..1759a0c7d74 100644\n--- a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example2.java\n+++ b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example2.java\n@@ -14,7 +14,7 @@\n public class Example2 {\n \n   public void case1(long timeNow, int hh, int min) {\n-    int minutes = min + 5; // Ok, No violation reported\n+    int minutes = min + 5; // ok, No violation reported\n     Calendar cal = Calendar.getInstance();\n     cal.setTimeInMillis(timeNow);\n     cal.set(Calendar.SECOND, 0);\n\ndiff --git a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example3.java b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example3.java\nindex 4d04bbd758f..4e125dbee90 100644\n--- a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example3.java\n+++ b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example3.java\n@@ -13,8 +13,8 @@\n public class Example3 {\n \n   public void foo1() {\n-    int num;        // OK, distance = 4\n-    final double PI;   // OK, final variables not checked\n+    int num;        // ok, distance = 4\n+    final double PI;   // ok, final variables not checked\n     System.out.println(\""Statement 1\"");\n     System.out.println(\""Statement 2\"");\n     System.out.println(\""Statement 3\"");\n@@ -23,9 +23,9 @@ public void foo1() {\n   }\n \n   public void foo2() {\n-    int a;          // OK, used in different scope\n-    int b;          // OK, used in different scope\n-    int count = 0;  // OK, used in different scope\n+    int a;          // ok, used in different scope\n+    int b;          // ok, used in different scope\n+    int count = 0;  // ok, used in different scope\n \n     {\n       System.out.println(\""Inside inner scope\"");\n\ndiff --git a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example4.java b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example4.java\nindex 0c6367236d0..9d5d41a007d 100644\n--- a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example4.java\n+++ b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example4.java\n@@ -13,8 +13,8 @@\n public class Example4 {\n \n   public void foo1() {\n-    int num;        // OK, variable ignored\n-    final double PI;   // OK, final variables not checked\n+    int num;        // ok, variable ignored\n+    final double PI;   // ok, final variables not checked\n     System.out.println(\""Statement 1\"");\n     System.out.println(\""Statement 2\"");\n     System.out.println(\""Statement 3\"");\n@@ -23,9 +23,9 @@ public void foo1() {\n   }\n \n   public void foo2() {\n-    int a;          // OK, used in different scope\n-    int b;          // OK, used in different scope\n-    int count = 0;  // OK, used in different scope\n+    int a;          // ok, used in different scope\n+    int b;          // ok, used in different scope\n+    int count = 0;  // ok, used in different scope\n \n     {\n       System.out.println(\""Inside inner scope\"");\n\ndiff --git a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example5.java b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example5.java\nindex a7b3873d13e..0c906adfdba 100644\n--- a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example5.java\n+++ b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example5.java\n@@ -15,7 +15,7 @@ public class Example5 {\n   public void foo1() {\n     // violation below, 'variable 'num' declaration and its first usage is 4.'\n     int num;\n-    final double PI;   // OK, final variables not checked\n+    final double PI;   // ok, final variables not checked\n     System.out.println(\""Statement 1\"");\n     System.out.println(\""Statement 2\"");\n     System.out.println(\""Statement 3\"");\n@@ -24,8 +24,8 @@ public void foo1() {\n   }\n \n   public void foo2() {\n-    int a;          // OK, distance = 2\n-    int b;          // OK, distance = 3\n+    int a;          // ok, distance = 2\n+    int b;          // ok, distance = 3\n     // violation below, 'variable 'count' declaration and its first usage is 4.'\n     int count = 0;\n \n\ndiff --git a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example6.java b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example6.java\nindex e52ff0adc12..55466d4dcf5 100644\n--- a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example6.java\n+++ b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/checks/coding/variabledeclarationusagedistance/Example6.java\n@@ -25,9 +25,9 @@ public void foo1() {\n   }\n \n   public void foo2() {\n-    int a;          // OK, used in different scope\n-    int b;          // OK, used in different scope\n-    int count = 0;  // OK, used in different scope\n+    int a;          // ok, used in different scope\n+    int b;          // ok, used in different scope\n+    int count = 0;  // ok, used in different scope\n \n     {\n       System.out.println(\""Inside inner scope\"");\n\ndiff --git a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/filters/suppresswithnearbycommentfilter/Example3.java b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/filters/suppresswithnearbycommentfilter/Example3.java\nindex 6072bd073fc..862dd7bfa44 100644\n--- a/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/filters/suppresswithnearbycommentfilter/Example3.java\n+++ b/src/xdocs-examples/resources/com/puppycrawl/tools/checkstyle/filters/suppresswithnearbycommentfilter/Example3.java\n@@ -2,7 +2,8 @@\n <module name=\""Checker\"">\n   <module name=\""TreeWalker\"">\n     <module name=\""SuppressWithNearbyCommentFilter\"">\n-      <property name=\""commentFormat\"" value=\""OK to catch (\\w+) here\""/>\n+      <property name=\""commentFormat\""\n+                value=\""ok,?\\s*(?:allowed\\s+)?to catch (\\w+) here\""/>\n       <property name=\""checkFormat\"" value=\""IllegalCatchCheck\""/>\n       <property name=\""messageFormat\"" value=\""$1\""/>\n       <property name=\""influenceFormat\"" value=\""-1\""/>\n@@ -19,7 +20,7 @@ public void doStuff() {\n       // blah blah blah\n     }\n     catch(RuntimeException re) {\n-      // OK to catch RuntimeException here\n+      // ok, allowed to catch RuntimeException here\n     }\n   }\n }\n"", ""test_patch"": ""diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/bdd/InlineConfigParser.java b/src/test/java/com/puppycrawl/tools/checkstyle/bdd/InlineConfigParser.java\nindex 04f6ecc8cc3..818e2de4ca5 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/bdd/InlineConfigParser.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/bdd/InlineConfigParser.java\n@@ -199,6 +199,20 @@ public final class InlineConfigParser {\n             ConfigurationLoader.DTD_PUBLIC_CS_ID_1_3,\n             ConfigurationLoader.DTD_PUBLIC_CS_ID_1_3);\n \n+    /**\n+     * ALLOWED: any code, then \""// ok\"" or \""// violation\"" (lowercase),\n+     * optionally followed by either a space or a comma (with optional spaces)\n+     * plus explanation text.\n+     */\n+    private static final Pattern ALLOWED_OK_VIOLATION_PATTERN =\n+            Pattern.compile(\"".*//\\\\s*(ok|violation)\\\\b(?:[ ,]\\\\s*.*)?$\"");\n+\n+    /**\n+     * DETECT any comment containing ok/violation in any case/spacing.\n+     */\n+    private static final Pattern ANY_OK_VIOLATION_PATTERN =\n+            Pattern.compile(\"".*//\\\\s*(?i)(ok|violation).*\"");\n+\n     /**\n      *  Inlined configs can not be used in non-java checks, as Inlined config is java style\n      *  multiline comment.\n@@ -922,6 +936,13 @@ private static void setViolations(TestInputConfiguration.Builder inputConfigBuil\n                                       List<String> lines, boolean useFilteredViolations,\n                                       int lineNo, boolean specifyViolationMessage)\n             throws CheckstyleException {\n+        final String line = lines.get(lineNo);\n+        if (ANY_OK_VIOLATION_PATTERN.matcher(line).matches()\n+                && !ALLOWED_OK_VIOLATION_PATTERN.matcher(line).matches()) {\n+            throw new CheckstyleException(\n+                    \""Invalid format (must be \\\""// ok...\\\"" or \\\""// violation...\\\""): \"" + line);\n+        }\n+\n         final Matcher violationMatcher =\n                 VIOLATION_PATTERN.matcher(lines.get(lineNo));\n         final Matcher violationAboveMatcher =\n\ndiff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/emptylineseparator/InputEmptyLineSeparatorNoViolationOnEmptyLineBeforeComments.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/emptylineseparator/InputEmptyLineSeparatorNoViolationOnEmptyLineBeforeComments.java\nindex 01448a54550..f623b01dcec 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/emptylineseparator/InputEmptyLineSeparatorNoViolationOnEmptyLineBeforeComments.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/emptylineseparator/InputEmptyLineSeparatorNoViolationOnEmptyLineBeforeComments.java\n@@ -52,8 +52,7 @@ public class InputEmptyLineSeparatorNoViolationOnEmptyLineBeforeComments {\n \n     // Should\n     // not\n-    // have\n-    // oks\n+    // have ok\n     public int testNoViolation3 = 3;\n \n     /*\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""checkstyle__checkstyle-16236"", ""pr_id"": 16236, ""issue_id"": 6207, ""repo"": ""checkstyle/checkstyle"", ""problem_statement"": ""Expand XPath IT Regression Testing\nIdentified at https://github.com/checkstyle/checkstyle/pull/6198#issuecomment-437386863 ,\r\n\r\nWe need to expand XPath IT Regression to all checks that support it.\r\n\r\nAll checks listed under [Currently, filter supports the following checks](http://checkstyle.sourceforge.net/config_filters.html#SuppressionXpathFilter_Description) must appear with regression tests in https://github.com/checkstyle/checkstyle/tree/master/src/it/java/org/checkstyle/suppressionxpathfilter to showcase suppression by XPath works for the check.\r\nEvery log statement must be tested from the Check. There should be at **least 3 test methods** for different structure of code.\r\nExample: if 1 check has [2 log statements](https://github.com/checkstyle/checkstyle/blob/35e09408d068ab40aa31fd33b9589318d69970b9/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java#L208-L213), the XPath test must have at least 3 tests, 1 for each log statement + 1 for some weird usecase like very nested violation.\r\nIf Check has [1 log statement](https://github.com/checkstyle/checkstyle/blob/35e09408d068ab40aa31fd33b9589318d69970b9/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java#L301), but target of check can be in different localtions (in class, in method, in interface, in anonymous class), Check should have at least 3 test methods to have different xpath by structure. \r\n\r\nTests can be copy of examples from our normal test tier at https://github.com/checkstyle/checkstyle/tree/master/src/test/java/com/puppycrawl/tools/checkstyle/checks just smaller.\r\n\r\nEach PR must contain only 1 check. Each PR must contain a link to the check's documentation in the first post. (Ex: https://checkstyle.org/config_coding.html#ArrayTrailingComma for ArrayTrailingCommaCheck)\r\n\r\n\r\nInput files for each test update must be named according to the convention \""` InputXpath{Checkname}Xxxx `\"". The 'Checkname' will be the check for which we are doing test update and 'Xxxx' must be a proper suffix that specifies what the input file is testing.\r\n\r\nInputs does not know what config will be used.\r\nXpath also does not care much on config.\r\nSo better to name Inputs by content that they have or violation they have. Example: InputXpathModifiedControlVariableWithForeach\r\n\r\nList of remaining Checks for which we need to expand Xpath IT Regression Testing -\r\nhttps://github.com/checkstyle/checkstyle/blob/627c7d1adced461f3c9538869433abf31dfe8b27/src/test/java/com/puppycrawl/tools/checkstyle/internal/XpathRegressionTest.java#L93-L100"", ""issue_word_count"": 374, ""test_files_count"": 2, ""non_test_files_count"": 3, ""pr_changed_files"": [""src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDescendantTokenTest.java"", ""src/it/resources/org/checkstyle/suppressionxpathfilter/descendanttoken/InputXpathDescendantTokenNestedSwitch.java"", ""src/it/resources/org/checkstyle/suppressionxpathfilter/descendanttoken/InputXpathDescendantTokenSwitchNoDefault.java"", ""src/it/resources/org/checkstyle/suppressionxpathfilter/descendanttoken/InputXpathDescendantTokenSwitchTooManyCases.java"", ""src/test/java/com/puppycrawl/tools/checkstyle/internal/XpathRegressionTest.java""], ""pr_changed_test_files"": [""src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDescendantTokenTest.java"", ""src/test/java/com/puppycrawl/tools/checkstyle/internal/XpathRegressionTest.java""], ""base_commit"": ""875fd5b3044d7817c86fee109876a4ab59c75b35"", ""head_commit"": ""0b8a4177b1ed4a3e0f982deeafaf4779182afd89"", ""repo_url"": ""https://github.com/checkstyle/checkstyle/pull/16236"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/checkstyle__checkstyle/16236"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-04T15:59:57.000Z"", ""patch"": ""diff --git a/src/it/resources/org/checkstyle/suppressionxpathfilter/descendanttoken/InputXpathDescendantTokenNestedSwitch.java b/src/it/resources/org/checkstyle/suppressionxpathfilter/descendanttoken/InputXpathDescendantTokenNestedSwitch.java\nnew file mode 100644\nindex 00000000000..9d573513107\n--- /dev/null\n+++ b/src/it/resources/org/checkstyle/suppressionxpathfilter/descendanttoken/InputXpathDescendantTokenNestedSwitch.java\n@@ -0,0 +1,21 @@\n+package org.checkstyle.suppressionxpathfilter.descendanttoken;\n+\n+public class InputXpathDescendantTokenNestedSwitch {\n+\n+void testMethod1() {\n+        int x = 1;\n+        int y = 2;\n+        switch (x) {\n+            case 1:\n+                System.out.println(\""xyz\"");\n+                break;\n+            case 2: // warn\n+                switch (y) {\n+                     case 1:\n+                         System.out.println(\""nested\"");\n+                          break;\n+                        }\n+                        break;\n+                }\n+    }\n+ }\n\ndiff --git a/src/it/resources/org/checkstyle/suppressionxpathfilter/descendanttoken/InputXpathDescendantTokenSwitchNoDefault.java b/src/it/resources/org/checkstyle/suppressionxpathfilter/descendanttoken/InputXpathDescendantTokenSwitchNoDefault.java\nnew file mode 100644\nindex 00000000000..461595a953f\n--- /dev/null\n+++ b/src/it/resources/org/checkstyle/suppressionxpathfilter/descendanttoken/InputXpathDescendantTokenSwitchNoDefault.java\n@@ -0,0 +1,13 @@\n+package org.checkstyle.suppressionxpathfilter.descendanttoken;\n+\n+public class InputXpathDescendantTokenSwitchNoDefault {\n+\n+    void testMethod1() {\n+        int x = 1;\n+        switch (x) { // warn\n+            case 1:\n+                System.out.println(\""hi\"");\n+                break;\n+        }\n+    }\n+ }\n\ndiff --git a/src/it/resources/org/checkstyle/suppressionxpathfilter/descendanttoken/InputXpathDescendantTokenSwitchTooManyCases.java b/src/it/resources/org/checkstyle/suppressionxpathfilter/descendanttoken/InputXpathDescendantTokenSwitchTooManyCases.java\nnew file mode 100644\nindex 00000000000..8da3bf1ec6e\n--- /dev/null\n+++ b/src/it/resources/org/checkstyle/suppressionxpathfilter/descendanttoken/InputXpathDescendantTokenSwitchTooManyCases.java\n@@ -0,0 +1,20 @@\n+package org.checkstyle.suppressionxpathfilter.descendanttoken;\n+\n+public class InputXpathDescendantTokenSwitchTooManyCases {\n+\n+    void testMethod1() {\n+        int x = 1;\n+        Runnable switchLogic = () -> {\n+            switch(x) { // warn\n+                case 1:\n+                    System.out.println(\""hi\"");\n+                    break;\n+                case 2:\n+                    System.out.println(\""hello\"");\n+                    break;\n+            }\n+        };\n+        switchLogic.run();\n+    }\n+}\n+\n"", ""test_patch"": ""diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDescendantTokenTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDescendantTokenTest.java\nnew file mode 100644\nindex 00000000000..88d0ebb3d16\n--- /dev/null\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDescendantTokenTest.java\n@@ -0,0 +1,128 @@\n+///////////////////////////////////////////////////////////////////////////////////////////////\n+// checkstyle: Checks Java source code and other text files for adherence to a set of rules.\n+// Copyright (C) 2001-2025 the original author or authors.\n+//\n+// This library is free software; you can redistribute it and/or\n+// modify it under the terms of the GNU Lesser General Public\n+// License as published by the Free Software Foundation; either\n+// version 2.1 of the License, or (at your option) any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+// You should have received a copy of the GNU Lesser General Public\n+// License along with this library; if not, write to the Free Software\n+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+///////////////////////////////////////////////////////////////////////////////////////////////\n+\n+package org.checkstyle.suppressionxpathfilter;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n+import com.puppycrawl.tools.checkstyle.checks.DescendantTokenCheck;\n+\n+public class XpathRegressionDescendantTokenTest extends AbstractXpathTestSupport {\n+\n+    private final String checkName = DescendantTokenCheck.class.getSimpleName();\n+\n+    @Override\n+    protected String getCheckName() {\n+        return checkName;\n+    }\n+\n+    @Test\n+    public void testSwitchNoDefault() throws Exception {\n+        final File fileToProcess =\n+                new File(getPath(\""InputXpathDescendantTokenSwitchNoDefault.java\""));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(DescendantTokenCheck.class);\n+        moduleConfig.addProperty(\""tokens\"", \""LITERAL_SWITCH\"");\n+        moduleConfig.addProperty(\""maximumDepth\"", \""2\"");\n+        moduleConfig.addProperty(\""limitedTokens\"", \""LITERAL_DEFAULT\"");\n+        moduleConfig.addProperty(\""minimumNumber\"", \""1\"");\n+\n+        final String[] expected = {\n+            \""7:9: \"" + getCheckMessage(DescendantTokenCheck.class,\n+                    DescendantTokenCheck.MSG_KEY_MIN,\n+                    0, 1, \""LITERAL_SWITCH\"", \""LITERAL_DEFAULT\""),\n+        };\n+\n+        final List<String> expectedXpathQueries = List.of(\n+            \""/COMPILATION_UNIT/CLASS_DEF[./IDENT\""\n+                    + \""[@text='InputXpathDescendantTokenSwitchNoDefault']]\""\n+                    + \""/OBJBLOCK/METHOD_DEF[./IDENT\""\n+                    + \""[@text='testMethod1']]/SLIST/LITERAL_SWITCH\""\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expected, expectedXpathQueries);\n+    }\n+\n+    @Test\n+    public void testSwitchTooManyCases() throws Exception {\n+        final File fileToProcess =\n+                new File(getPath(\""InputXpathDescendantTokenSwitchTooManyCases.java\""));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(DescendantTokenCheck.class);\n+        moduleConfig.addProperty(\""tokens\"", \""LITERAL_SWITCH\"");\n+        moduleConfig.addProperty(\""limitedTokens\"", \""LITERAL_CASE\"");\n+        moduleConfig.addProperty(\""maximumDepth\"", \""2\"");\n+        moduleConfig.addProperty(\""maximumNumber\"", \""1\"");\n+\n+        final String[] expected = {\n+            \""8:13: \"" + getCheckMessage(DescendantTokenCheck.class,\n+                    DescendantTokenCheck.MSG_KEY_MAX,\n+                    2, 1, \""LITERAL_SWITCH\"", \""LITERAL_CASE\""),\n+        };\n+\n+        final List<String> expectedXpathQueries = List.of(\n+                \""/COMPILATION_UNIT/CLASS_DEF\""\n+                        + \""[./IDENT[@text='InputXpathDescendantTokenSwitchTooManyCases']]\""\n+                        + \""/OBJBLOCK/METHOD_DEF[./IDENT\""\n+                        + \""[@text='testMethod1']]/SLIST/VARIABLE_DEF[./IDENT[@text='switchLogic']]\""\n+                        + \""/ASSIGN/LAMBDA/SLIST/LITERAL_SWITCH\""\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expected, expectedXpathQueries);\n+    }\n+\n+    @Test\n+    public void testNestedSwitch() throws Exception {\n+        final File fileToProcess =\n+                new File(getPath(\""InputXpathDescendantTokenNestedSwitch.java\""));\n+\n+        final DefaultConfiguration moduleConfig =\n+                createModuleConfig(DescendantTokenCheck.class);\n+\n+        moduleConfig.addProperty(\""tokens\"", \""CASE_GROUP\"");\n+        moduleConfig.addProperty(\""limitedTokens\"", \""LITERAL_SWITCH\"");\n+        moduleConfig.addProperty(\""maximumNumber\"", \""0\"");\n+\n+        final String[] expected = {\n+            \""12:13: \"" + getCheckMessage(DescendantTokenCheck.class,\n+                    DescendantTokenCheck.MSG_KEY_MAX,\n+                    1, 0, \""CASE_GROUP\"", \""LITERAL_SWITCH\""),\n+        };\n+\n+        final List<String> expectedXpathQueries = List.of(\n+            \""/COMPILATION_UNIT/CLASS_DEF[\""\n+                + \""./IDENT[@text='InputXpathDescendantTokenNestedSwitch']]/OBJBLOCK/\""\n+                + \""METHOD_DEF[./IDENT[@text='testMethod1']]/SLIST/LITERAL_SWITCH/\""\n+                + \""CASE_GROUP[./LITERAL_CASE/EXPR/NUM_INT[@text='2']]\"",\n+            \""/COMPILATION_UNIT/CLASS_DEF[\""\n+                + \""./IDENT[@text='InputXpathDescendantTokenNestedSwitch']]/OBJBLOCK/\""\n+                + \""METHOD_DEF[./IDENT[@text='testMethod1']]/SLIST/LITERAL_SWITCH/\""\n+                + \""CASE_GROUP/LITERAL_CASE\""\n+        );\n+\n+        runVerifications(moduleConfig, fileToProcess, expected, expectedXpathQueries);\n+    }\n+}\n+\n\ndiff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XpathRegressionTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XpathRegressionTest.java\nindex c11474d88e8..80f6917471c 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XpathRegressionTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XpathRegressionTest.java\n@@ -87,12 +87,6 @@ public class XpathRegressionTest extends AbstractModuleTestSupport {\n                     WriteTagCheck.class\n     );\n \n-    // Checks that allowed to have no XPath IT Regression Testing\n-    // till https://github.com/checkstyle/checkstyle/issues/6207\n-    private static final Set<String> MISSING_CHECK_NAMES = Set.of(\n-            \""DescendantToken\""\n-    );\n-\n     // Modules that will never have xpath support ever because they not report violations\n     private static final Set<String> NO_VIOLATION_MODULES = Set.of(\n             \""SuppressWarningsHolder\""\n@@ -191,11 +185,6 @@ public void validateIntegrationTestClassNames() throws Exception {\n                         .that(SIMPLE_CHECK_NAMES)\n                         .contains(check);\n \n-                assertWithMessage(\n-                            \""Check '\"" + check + \""' is now tested. Please update the todo list in\""\n-                                + \"" XpathRegressionTest.MISSING_CHECK_NAMES\"")\n-                        .that(MISSING_CHECK_NAMES.contains(check))\n-                        .isFalse();\n                 assertWithMessage(\n                             \""Check '\"" + check + \""' is now compatible with SuppressionXpathFilter.\""\n                                 + \"" Please update the todo list in\""\n@@ -211,7 +200,6 @@ public void validateIntegrationTestClassNames() throws Exception {\n         allChecks.removeAll(INCOMPATIBLE_JAVADOC_CHECK_NAMES);\n         allChecks.removeAll(INCOMPATIBLE_CHECK_NAMES);\n         allChecks.removeAll(Set.of(\""Regexp\"", \""RegexpSinglelineJava\"", \""NoCodeInFile\""));\n-        allChecks.removeAll(MISSING_CHECK_NAMES);\n         allChecks.removeAll(NO_VIOLATION_MODULES);\n         allChecks.removeAll(compatibleChecks);\n         allChecks.removeAll(INTERNAL_MODULES);\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
