metadata
"{""instance_id"": ""outline__outline-9428"", ""pr_id"": 9428, ""issue_id"": 9306, ""repo"": ""outline/outline"", ""problem_statement"": ""403 Forbidden when adding a user to an Outline collection\n![Image](https://github.com/user-attachments/assets/98580f22-3092-4d2c-874b-f2d2c8964090)\n\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\n403 Forbidden when adding a user to an Outline collection\n\n### Expected Behavior\n\nAn informative message that if you don't have the permissions, you can't edit. \n\n### Steps To Reproduce\n\n1. Log in to Outline\n2. Open a collection and click \u201cShare this collection\u201d\n3. In the \u201cAdd or invite\u2026\u201d field, select an existing user\n4. Click Add\n5. Observe the \u201cAuthorization error\u201d toast and a 403 on the API call (POST /api/collections.add_user)\n\n### Environment\n\n```markdown\n- Outline:\n- Browser:\n```\n\n### Anything else?\n\n_No response_"", ""issue_word_count"": 128, ""test_files_count"": 1, ""non_test_files_count"": 1, ""pr_changed_files"": [""server/routes/api/collections/collections.test.ts"", ""server/routes/api/collections/collections.ts""], ""pr_changed_test_files"": [""server/routes/api/collections/collections.test.ts""], ""base_commit"": ""0f4c1d7db5f30d9adabc8a3deba66903be3ed7a1"", ""head_commit"": ""acfd695e4f2eab62226fefc15c4891db6249e8a0"", ""repo_url"": ""https://github.com/outline/outline/pull/9428"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9428"", ""dockerfile"": """", ""pr_merged_at"": ""2025-06-11T01:24:22.000Z"", ""patch"": null, ""test_patch"": null, ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9370"", ""pr_id"": 9370, ""issue_id"": 9366, ""repo"": ""outline/outline"", ""problem_statement"": ""Migrate `Backlink` model and table to `Relationship`\nWe'd like to be able to store different types of relationships between documents other than just backlinks\n\nBacklink becomes a relationship with `type`, everything else works the same today.\n\nIn order to make deployment smooth there should be a migration to create a view from the old table name"", ""issue_word_count"": 50, ""test_files_count"": 2, ""non_test_files_count"": 6, ""pr_changed_files"": [""server/migrations/20250601223331-migrate-backlink-to-relationship.js"", ""server/models/Document.ts"", ""server/models/Relationship.ts"", ""server/models/index.ts"", ""server/queues/processors/BacklinksProcessor.test.ts"", ""server/queues/processors/BacklinksProcessor.ts"", ""server/routes/api/documents/documents.test.ts"", ""server/routes/api/documents/documents.ts""], ""pr_changed_test_files"": [""server/queues/processors/BacklinksProcessor.test.ts"", ""server/routes/api/documents/documents.test.ts""], ""base_commit"": ""277d9fb0d92576beceb526b7cda7a17ecc107101"", ""head_commit"": ""5473b4a3cc623c66881691189ad32b9aa0b2e6f4"", ""repo_url"": ""https://github.com/outline/outline/pull/9370"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9370"", ""dockerfile"": """", ""pr_merged_at"": ""2025-06-07T19:50:33.000Z"", ""patch"": ""diff --git a/server/migrations/20250601223331-migrate-backlink-to-relationship.js b/server/migrations/20250601223331-migrate-backlink-to-relationship.js\nnew file mode 100644\nindex 000000000000..036e89a5fe1d\n--- /dev/null\n+++ b/server/migrations/20250601223331-migrate-backlink-to-relationship.js\n@@ -0,0 +1,50 @@\n+'use strict';\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up (queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async (transaction) => {\n+      // Rename the existing backlinks table to relationships\n+      await queryInterface.renameTable(\""backlinks\"", \""relationships\"", { transaction });\n+\n+      // Add the type column with default value\n+      await queryInterface.addColumn(\""relationships\"", \""type\"", {\n+        type: Sequelize.ENUM('backlink'),\n+        allowNull: false,\n+        defaultValue: 'backlink',\n+      }, { transaction });\n+\n+      // Add new indexes for performance (the old indexes on documentId and reverseDocumentId should still exist)\n+      await queryInterface.addIndex(\""relationships\"", [\""type\""], { transaction });\n+      await queryInterface.addIndex(\""relationships\"", [\""documentId\"", \""type\""], { transaction });\n+\n+      // Create a view for backward compatibility\n+      await queryInterface.sequelize.query(`\n+        CREATE VIEW backlinks AS\n+        SELECT id, \""userId\"", \""documentId\"", \""reverseDocumentId\"", \""createdAt\"", \""updatedAt\""\n+        FROM relationships\n+        WHERE type = 'backlink';\n+      `, { transaction });\n+    });\n+  },\n+\n+  async down (queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async (transaction) => {\n+      // Drop the view\n+      await queryInterface.sequelize.query('DROP VIEW IF EXISTS backlinks;', { transaction });\n+      \n+      // Remove the type-specific indexes\n+      await queryInterface.removeIndex(\""relationships\"", [\""type\""], { transaction });\n+      await queryInterface.removeIndex(\""relationships\"", [\""documentId\"", \""type\""], { transaction });\n+      \n+      // Remove the type column\n+      await queryInterface.removeColumn(\""relationships\"", \""type\"", { transaction });\n+      \n+      // Drop the enum type\n+      await queryInterface.sequelize.query('DROP TYPE IF EXISTS \""enum_relationships_type\"";', { transaction });\n+      \n+      // Rename the table back to backlinks\n+      await queryInterface.renameTable(\""relationships\"", \""backlinks\"", { transaction });\n+    });\n+  }\n+};\n\ndiff --git a/server/models/Document.ts b/server/models/Document.ts\nindex 915f14bb6905..97a0c3808547 100644\n--- a/server/models/Document.ts\n+++ b/server/models/Document.ts\n@@ -51,13 +51,13 @@ import slugify from \""@shared/utils/slugify\"";\n import { DocumentValidation } from \""@shared/validations\"";\n import { ValidationError } from \""@server/errors\"";\n import { generateUrlId } from \""@server/utils/url\"";\n-import Backlink from \""./Backlink\"";\n import Collection from \""./Collection\"";\n import FileOperation from \""./FileOperation\"";\n import Group from \""./Group\"";\n import GroupMembership from \""./GroupMembership\"";\n import GroupUser from \""./GroupUser\"";\n import Import from \""./Import\"";\n+import Relationship from \""./Relationship\"";\n import Revision from \""./Revision\"";\n import Star from \""./Star\"";\n import Team from \""./Team\"";\n@@ -617,8 +617,8 @@ class Document extends ArchivableModel<\n   @HasMany(() => Revision)\n   revisions: Revision[];\n \n-  @HasMany(() => Backlink)\n-  backlinks: Backlink[];\n+  @HasMany(() => Relationship)\n+  relationships: Relationship[];\n \n   @HasMany(() => Star)\n   starred: Star[];\n\ndiff --git a/server/models/Backlink.ts b/server/models/Relationship.ts\nsimilarity index 67%\nrename from server/models/Backlink.ts\nrename to server/models/Relationship.ts\nindex 346103fc5eb6..17346f18c5f7 100644\n--- a/server/models/Backlink.ts\n+++ b/server/models/Relationship.ts\n@@ -11,11 +11,15 @@ import User from \""./User\"";\n import IdModel from \""./base/IdModel\"";\n import Fix from \""./decorators/Fix\"";\n \n-@Table({ tableName: \""backlinks\"", modelName: \""backlink\"" })\n+export enum RelationshipType {\n+  Backlink = \""backlink\"",\n+}\n+\n+@Table({ tableName: \""relationships\"", modelName: \""relationship\"" })\n @Fix\n-class Backlink extends IdModel<\n-  InferAttributes<Backlink>,\n-  Partial<InferCreationAttributes<Backlink>>\n+class Relationship extends IdModel<\n+  InferAttributes<Relationship>,\n+  Partial<InferCreationAttributes<Relationship>>\n > {\n   @BelongsTo(() => User, \""userId\"")\n   user: User;\n@@ -38,6 +42,13 @@ class Backlink extends IdModel<\n   @Column(DataType.UUID)\n   reverseDocumentId: string;\n \n+  @Column({\n+    type: DataType.ENUM(...Object.values(RelationshipType)),\n+    allowNull: false,\n+    defaultValue: RelationshipType.Backlink,\n+  })\n+  type: RelationshipType;\n+\n   /**\n    * Find all backlinks for a document that the user has access to\n    *\n@@ -48,15 +59,16 @@ class Backlink extends IdModel<\n     documentId: string,\n     user: User\n   ) {\n-    const backlinks = await this.findAll({\n+    const relationships = await this.findAll({\n       attributes: [\""reverseDocumentId\""],\n       where: {\n         documentId,\n+        type: RelationshipType.Backlink,\n       },\n     });\n \n     const documents = await Document.findByIds(\n-      backlinks.map((backlink) => backlink.reverseDocumentId),\n+      relationships.map((relationship) => relationship.reverseDocumentId),\n       { userId: user.id }\n     );\n \n@@ -64,4 +76,4 @@ class Backlink extends IdModel<\n   }\n }\n \n-export default Backlink;\n+export default Relationship;\n\ndiff --git a/server/models/index.ts b/server/models/index.ts\nindex 486e3c8b4f9f..457adcc6eb05 100644\n--- a/server/models/index.ts\n+++ b/server/models/index.ts\n@@ -4,7 +4,7 @@ export { default as Attachment } from \""./Attachment\"";\n \n export { default as AuthenticationProvider } from \""./AuthenticationProvider\"";\n \n-export { default as Backlink } from \""./Backlink\"";\n+export { default as Relationship } from \""./Relationship\"";\n \n export { default as Collection } from \""./Collection\"";\n \n\ndiff --git a/server/queues/processors/BacklinksProcessor.ts b/server/queues/processors/BacklinksProcessor.ts\nindex f5831f958d4a..13008854a494 100644\n--- a/server/queues/processors/BacklinksProcessor.ts\n+++ b/server/queues/processors/BacklinksProcessor.ts\n@@ -1,5 +1,6 @@\n import { Op } from \""sequelize\"";\n-import { Document, Backlink } from \""@server/models\"";\n+import { Document, Relationship } from \""@server/models\"";\n+import { RelationshipType } from \""@server/models/Relationship\"";\n import { DocumentHelper } from \""@server/models/helpers/DocumentHelper\"";\n import { Event, DocumentEvent, RevisionEvent } from \""@server/types\"";\n import BaseProcessor from \""./BaseProcessor\"";\n@@ -27,13 +28,15 @@ export default class BacklinksProcessor extends BaseProcessor {\n               return;\n             }\n \n-            await Backlink.findOrCreate({\n+            await Relationship.findOrCreate({\n               where: {\n                 documentId: linkedDocument.id,\n                 reverseDocumentId: event.documentId,\n+                type: RelationshipType.Backlink,\n               },\n               defaults: {\n                 userId: document.lastModifiedById,\n+                type: RelationshipType.Backlink,\n               },\n             });\n           })\n@@ -64,13 +67,15 @@ export default class BacklinksProcessor extends BaseProcessor {\n               return;\n             }\n \n-            await Backlink.findOrCreate({\n+            await Relationship.findOrCreate({\n               where: {\n                 documentId: linkedDocument.id,\n                 reverseDocumentId: event.documentId,\n+                type: RelationshipType.Backlink,\n               },\n               defaults: {\n                 userId: document.lastModifiedById,\n+                type: RelationshipType.Backlink,\n               },\n             });\n             linkedDocumentIds.push(linkedDocument.id);\n@@ -78,19 +83,20 @@ export default class BacklinksProcessor extends BaseProcessor {\n         );\n \n         // delete any backlinks that no longer exist\n-        await Backlink.destroy({\n+        await Relationship.destroy({\n           where: {\n             documentId: {\n               [Op.notIn]: linkedDocumentIds,\n             },\n             reverseDocumentId: event.documentId,\n+            type: RelationshipType.Backlink,\n           },\n         });\n         break;\n       }\n \n       case \""documents.delete\"": {\n-        await Backlink.destroy({\n+        await Relationship.destroy({\n           where: {\n             [Op.or]: [\n               {\n@@ -100,6 +106,7 @@ export default class BacklinksProcessor extends BaseProcessor {\n                 documentId: event.documentId,\n               },\n             ],\n+            type: RelationshipType.Backlink,\n           },\n         });\n         break;\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 321b69803c74..60690838f2ef 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -36,7 +36,7 @@ import { transaction } from \""@server/middlewares/transaction\"";\n import validate from \""@server/middlewares/validate\"";\n import {\n   Attachment,\n-  Backlink,\n+  Relationship,\n   Collection,\n   Document,\n   Event,\n@@ -209,7 +209,7 @@ router.post(\n     }\n \n     if (backlinkDocumentId) {\n-      const sourceDocumentIds = await Backlink.findSourceDocumentIdsForUser(\n+      const sourceDocumentIds = await Relationship.findSourceDocumentIdsForUser(\n         backlinkDocumentId,\n         user\n       );\n"", ""test_patch"": ""diff --git a/server/queues/processors/BacklinksProcessor.test.ts b/server/queues/processors/BacklinksProcessor.test.ts\nindex fff2e5e3eefe..b842f4b8bf51 100644\n--- a/server/queues/processors/BacklinksProcessor.test.ts\n+++ b/server/queues/processors/BacklinksProcessor.test.ts\n@@ -1,6 +1,8 @@\n import { parser } from \""@server/editor\"";\n-import { Backlink } from \""@server/models\"";\n+import { Relationship } from \""@server/models\"";\n+import { RelationshipType } from \""@server/models/Relationship\"";\n import { buildDocument } from \""@server/test/factories\"";\n+\n import BacklinksProcessor from \""./BacklinksProcessor\"";\n \n const ip = \""127.0.0.1\"";\n@@ -22,9 +24,10 @@ describe(\""documents.publish\"", () => {\n       data: { title: document.title },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(1);\n@@ -52,9 +55,10 @@ describe(\""documents.publish\"", () => {\n       data: { title: document.title },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(0);\n@@ -79,9 +83,10 @@ describe(\""documents.update\"", () => {\n       data: { title: document.title, autosave: false, done: true },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(1);\n@@ -109,9 +114,10 @@ describe(\""documents.update\"", () => {\n       data: { title: document.title, autosave: false, done: true },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(1);\n@@ -136,9 +142,10 @@ describe(\""documents.update\"", () => {\n       data: { title: document.title, autosave: false, done: true },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(1);\n@@ -182,9 +189,10 @@ describe(\""documents.update\"", () => {\n       data: { title: document.title, autosave: false, done: true },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(1);\n@@ -222,9 +230,10 @@ describe(\""documents.delete\"", () => {\n       data: { title: document.title },\n       ip,\n     });\n-    const backlinks = await Backlink.findAll({\n+    const backlinks = await Relationship.findAll({\n       where: {\n         reverseDocumentId: document.id,\n+        type: RelationshipType.Backlink,\n       },\n     });\n     expect(backlinks.length).toBe(0);\n\ndiff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex 677d7db99e50..32837b25abaf 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -13,13 +13,14 @@ import {\n   Document,\n   View,\n   Revision,\n-  Backlink,\n   UserMembership,\n   SearchQuery,\n   Event,\n   User,\n   GroupMembership,\n+  Relationship,\n } from \""@server/models\"";\n+import { RelationshipType } from \""@server/models/Relationship\"";\n import { DocumentHelper } from \""@server/models/helpers/DocumentHelper\"";\n import {\n   buildShare,\n@@ -1033,8 +1034,9 @@ describe(\""#documents.list\"", () => {\n       userId: user.id,\n       teamId: user.teamId,\n     });\n-    await Backlink.create({\n+    await Relationship.create({\n       reverseDocumentId: anotherDoc.id,\n+      type: RelationshipType.Backlink,\n       documentId: document.id,\n       userId: user.id,\n     });\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9340"", ""pr_id"": 9340, ""issue_id"": 9338, ""repo"": ""outline/outline"", ""problem_statement"": ""Links to articles result in malformed URLs\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\nIf you create a hyperlink within a document that has a custom static URL defined, there will be bad information appended to the link on the public-facing page.\n\nFor example, using this link within an article:\nhttps://docs.handheldlegend.com/s/testbugpage001/doc/test-page-2-2xIDEXYlib\n\nThis ends up appearing as such on the public facing page:\nhttps://docs.handheldlegend.com/s/testbugpage001/s/testbugpage001/doc/test-page-2-2xIDEXYlib\n\nThis results in the link failing from the public view.\n\nYou can see a live demo of this bug here: https://docs.handheldlegend.com/s/testbugpage001/doc/bug-demo-FEdxQvkFpP\n\n### Expected Behavior\n\nThe link should be shown exactly as it was pasted in the editor.\n\n### Steps To Reproduce\n\n1. Create a collection.\n2. Create a root page, then click \""Share\"". For the URL, create a static name.\n3. Create a child page under the static root page.\n4. Grab the public URL from the child page.\n5. Paste the public URL into the root page (or any other page) in the document editor.\n6. View the public page, and examine the URL for malformed data.\n\n### Environment\n\n```markdown\n- Outline: Outline 0.84.0\n- Browser: Chrome, Firefox, Edge\n```\n\n### Anything else?\n\n_No response_"", ""issue_word_count"": 235, ""test_files_count"": 1, ""non_test_files_count"": 1, ""pr_changed_files"": [""server/models/helpers/DocumentHelper.test.ts"", ""server/models/helpers/ProsemirrorHelper.tsx""], ""pr_changed_test_files"": [""server/models/helpers/DocumentHelper.test.ts""], ""base_commit"": ""dae1bce48cc614827b6a18f228bb86e6b5a6c62c"", ""head_commit"": ""fbec3eb524959876d4694ea89701180838b2c01c"", ""repo_url"": ""https://github.com/outline/outline/pull/9340"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9340"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-30T23:05:21.000Z"", ""patch"": ""diff --git a/server/models/helpers/ProsemirrorHelper.tsx b/server/models/helpers/ProsemirrorHelper.tsx\nindex 7e08d860ae4a..33558e2d15f9 100644\n--- a/server/models/helpers/ProsemirrorHelper.tsx\n+++ b/server/models/helpers/ProsemirrorHelper.tsx\n@@ -281,7 +281,11 @@ export class ProsemirrorHelper {\n     }\n \n     function replaceUrl(url: string) {\n-      return url.replace(`/doc/`, `${basePath}/doc/`);\n+      // Only replace if the URL starts with /doc/ (not already in a share path)\n+      if (url.startsWith(\""/doc/\"")) {\n+        return `${basePath}${url}`;\n+      }\n+      return url;\n     }\n \n     function replaceInternalUrlsInner(node: ProsemirrorData) {\n"", ""test_patch"": ""diff --git a/server/models/helpers/DocumentHelper.test.ts b/server/models/helpers/DocumentHelper.test.ts\nindex d8f97a186504..469a2a06a761 100644\n--- a/server/models/helpers/DocumentHelper.test.ts\n+++ b/server/models/helpers/DocumentHelper.test.ts\n@@ -44,6 +44,38 @@ describe(\""DocumentHelper\"", () => {\n         type: \""doc\"",\n       });\n     });\n+\n+    it(\""should not duplicate share path for URLs that already contain it\"", async () => {\n+      const document = await buildDocument({\n+        text: `[link](/s/testbugpage001/doc/test-page-2-2xIDEXYlib)`,\n+      });\n+      const result = await DocumentHelper.toJSON(document, {\n+        internalUrlBase: \""/s/testbugpage001\"",\n+      });\n+      expect(result).toEqual({\n+        content: [\n+          {\n+            content: [\n+              {\n+                marks: [\n+                  {\n+                    attrs: {\n+                      href: \""/s/testbugpage001/doc/test-page-2-2xIDEXYlib\"",\n+                      title: null,\n+                    },\n+                    type: \""link\"",\n+                  },\n+                ],\n+                text: \""link\"",\n+                type: \""text\"",\n+              },\n+            ],\n+            type: \""paragraph\"",\n+          },\n+        ],\n+        type: \""doc\"",\n+      });\n+    });\n   });\n \n   describe(\""toJSON\"", () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9324"", ""pr_id"": 9324, ""issue_id"": 9270, ""repo"": ""outline/outline"", ""problem_statement"": ""Running self-hosted for the first time should provision a team\nLets add an intro screen for self-hosted that allows creating a first user account and team without having to use the hacky seed.js approach. It can have the layout of the sign-in page with a form:\n\n`team name`\n`user name`\n`user email`\n\n`teams.create` could include an exception for this case when there are no teams and self-hosted? Or we we use a separate endpoint, perhaps under `installation` namespace."", ""issue_word_count"": 73, ""test_files_count"": 1, ""non_test_files_count"": 5, ""pr_changed_files"": [""server/models/Team.ts"", ""server/models/User.ts"", ""server/routes/api/installation/installation.test.ts"", ""server/routes/api/installation/installation.ts"", ""server/routes/api/installation/schema.ts"", ""shared/validations.ts""], ""pr_changed_test_files"": [""server/routes/api/installation/installation.test.ts""], ""base_commit"": ""f284a279410f673c22c9ff0c7e9d99f67103683b"", ""head_commit"": ""c9ef4b3de6853792cb8954f448fd2312b2423f39"", ""repo_url"": ""https://github.com/outline/outline/pull/9324"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9324"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-30T02:52:49.000Z"", ""patch"": ""diff --git a/server/models/Team.ts b/server/models/Team.ts\nindex 42822bfb64e0..c2011d6e26e9 100644\n--- a/server/models/Team.ts\n+++ b/server/models/Team.ts\n@@ -32,6 +32,7 @@ import { TeamPreferenceDefaults } from \""@shared/constants\"";\n import { TeamPreference, TeamPreferences, UserRole } from \""@shared/types\"";\n import { getBaseDomain, RESERVED_SUBDOMAINS } from \""@shared/utils/domains\"";\n import { parseEmail } from \""@shared/utils/email\"";\n+import { TeamValidation } from \""@shared/validations\"";\n import env from \""@server/env\"";\n import { ValidationError } from \""@server/errors\"";\n import DeleteAttachmentTask from \""@server/queues/tasks/DeleteAttachmentTask\"";\n@@ -70,7 +71,11 @@ class Team extends ParanoidModel<\n   Partial<InferCreationAttributes<Team>>\n > {\n   @NotContainsUrl\n-  @Length({ min: 1, max: 255, msg: \""name must be between 1 to 255 characters\"" })\n+  @Length({\n+    min: 1,\n+    max: TeamValidation.maxNameLength,\n+    msg: `Team name must be between 1 and ${TeamValidation.maxNameLength} characters`,\n+  })\n   @Column\n   name: string;\n \n\ndiff --git a/server/models/User.ts b/server/models/User.ts\nindex 5e152fa24c39..af4bd1695189 100644\n--- a/server/models/User.ts\n+++ b/server/models/User.ts\n@@ -46,6 +46,7 @@ import {\n import { UserRoleHelper } from \""@shared/utils/UserRoleHelper\"";\n import { stringToColor } from \""@shared/utils/color\"";\n import { locales } from \""@shared/utils/date\"";\n+import { UserValidation } from \""@shared/validations\"";\n import env from \""@server/env\"";\n import DeleteAttachmentTask from \""@server/queues/tasks/DeleteAttachmentTask\"";\n import { APIContext } from \""@server/types\"";\n@@ -128,12 +129,20 @@ class User extends ParanoidModel<\n   Partial<InferCreationAttributes<User>>\n > {\n   @IsEmail\n-  @Length({ max: 255, msg: \""User email must be 255 characters or less\"" })\n+  @Length({\n+    min: 1,\n+    max: UserValidation.maxEmailLength,\n+    msg: `User email must be between 1 and ${UserValidation.maxEmailLength} characters`,\n+  })\n   @Column\n   email: string | null;\n \n   @NotContainsUrl\n-  @Length({ max: 255, msg: \""User name must be 255 characters or less\"" })\n+  @Length({\n+    min: 1,\n+    max: UserValidation.maxNameLength,\n+    msg: `User name must be between 1 and ${UserValidation.maxNameLength} characters`,\n+  })\n   @Column\n   name: string;\n \n\ndiff --git a/server/routes/api/installation/installation.ts b/server/routes/api/installation/installation.ts\nindex fd40ff04d28a..195b1ee86a00 100644\n--- a/server/routes/api/installation/installation.ts\n+++ b/server/routes/api/installation/installation.ts\n@@ -1,10 +1,64 @@\n import Router from \""koa-router\"";\n+import { Client, UserRole } from \""@shared/types\"";\n+import slugify from \""@shared/utils/slugify\"";\n+import teamCreator from \""@server/commands/teamCreator\"";\n+import { ValidationError } from \""@server/errors\"";\n import auth from \""@server/middlewares/authentication\"";\n+import { transaction } from \""@server/middlewares/transaction\"";\n+import validate from \""@server/middlewares/validate\"";\n+import { Team, User } from \""@server/models\"";\n import { APIContext } from \""@server/types\"";\n+import { signIn } from \""@server/utils/authentication\"";\n import { getVersion, getVersionInfo } from \""@server/utils/getInstallationInfo\"";\n+import * as T from \""./schema\"";\n \n+// Note: This entire router is only mounted in self-hosted installations.\n const router = new Router();\n \n+router.post(\n+  \""installation.create\"",\n+  validate(T.InstallationCreateSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.InstallationCreateSchemaReq>) => {\n+    const { teamName, userName, userEmail } = ctx.input.body;\n+    const { transaction } = ctx.state;\n+\n+    // Check that this can only be called when there are no existing teams\n+    const existingTeamCount = await Team.count({ transaction });\n+    if (existingTeamCount > 0) {\n+      throw ValidationError(\""Installation already has existing teams\"");\n+    }\n+\n+    const team = await teamCreator({\n+      name: teamName,\n+      subdomain: slugify(teamName),\n+      ip: ctx.request.ip,\n+      transaction,\n+      authenticationProviders: [],\n+    });\n+\n+    const user = await User.create(\n+      {\n+        name: userName,\n+        email: userEmail,\n+        teamId: team.id,\n+        role: UserRole.Admin,\n+      },\n+      {\n+        transaction,\n+      }\n+    );\n+\n+    await signIn(ctx, \""email\"", {\n+      user,\n+      team,\n+      isNewTeam: true,\n+      isNewUser: true,\n+      client: Client.Web,\n+    });\n+  }\n+);\n+\n router.post(\""installation.info\"", auth(), async (ctx: APIContext) => {\n   const currentVersion = getVersion();\n   const { latestVersion, versionsBehind } = await getVersionInfo(\n\ndiff --git a/server/routes/api/installation/schema.ts b/server/routes/api/installation/schema.ts\nnew file mode 100644\nindex 000000000000..b67d4cec6471\n--- /dev/null\n+++ b/server/routes/api/installation/schema.ts\n@@ -0,0 +1,18 @@\n+import { z } from \""zod\"";\n+import { TeamValidation, UserValidation } from \""@shared/validations\"";\n+import { BaseSchema } from \""@server/routes/api/schema\"";\n+\n+export const InstallationCreateSchema = BaseSchema.extend({\n+  body: z.object({\n+    /** Team name */\n+    teamName: z.string().min(1).max(TeamValidation.maxNameLength),\n+    /** User name */\n+    userName: z.string().min(1).max(UserValidation.maxNameLength),\n+    /** User email */\n+    userEmail: z.string().email().max(UserValidation.maxEmailLength),\n+  }),\n+});\n+\n+export type InstallationCreateSchemaReq = z.infer<\n+  typeof InstallationCreateSchema\n+>;\n\ndiff --git a/shared/validations.ts b/shared/validations.ts\nindex af88c59a9f58..d15de4b26934 100644\n--- a/shared/validations.ts\n+++ b/shared/validations.ts\n@@ -92,11 +92,20 @@ export const PinValidation = {\n export const TeamValidation = {\n   /** The maximum number of domains per team on cloud hosted */\n   maxDomains: 10,\n+\n+  /** The maximum length of the team name */\n+  maxNameLength: 255,\n };\n \n export const UserValidation = {\n   /** The maximum number of invites per request */\n   maxInvitesPerRequest: 20,\n+\n+  /** The maximum length of the user name */\n+  maxNameLength: 255,\n+\n+  /** The maximum length of the user email */\n+  maxEmailLength: 255,\n };\n \n export const WebhookSubscriptionValidation = {\n"", ""test_patch"": ""diff --git a/server/routes/api/installation/installation.test.ts b/server/routes/api/installation/installation.test.ts\nindex 287bd3d50487..7cbe2158c863 100644\n--- a/server/routes/api/installation/installation.test.ts\n+++ b/server/routes/api/installation/installation.test.ts\n@@ -1,8 +1,59 @@\n-import { buildUser } from \""@server/test/factories\"";\n-import { getTestServer } from \""@server/test/support\"";\n+import { faker } from \""@faker-js/faker\"";\n+import { sequelize } from \""@server/storage/database\"";\n+import { buildUser, buildTeam } from \""@server/test/factories\"";\n+import { getTestServer, setSelfHosted } from \""@server/test/support\"";\n \n+setSelfHosted();\n const server = getTestServer();\n \n+describe(\""installation.create\"", () => {\n+  // Skipped in CI because tests run in parallel and this requires a clean database state.\n+  it.skip(\""should create a team when no teams exist\"", async () => {\n+    await sequelize.query(\n+      \""TRUNCATE TABLE teams, users, team_domains, user_authentications RESTART IDENTITY CASCADE\""\n+    );\n+\n+    const res = await server.post(\""/api/installation.create\"", {\n+      body: {\n+        teamName: faker.company.name(),\n+        userName: faker.person.fullName(),\n+        userEmail: faker.internet.email().toLowerCase(),\n+      },\n+      redirect: \""manual\"",\n+    });\n+    expect(res.status).toEqual(302);\n+    expect(res.headers.get(\""location\"")).not.toBeNull();\n+  });\n+\n+  it(\""should fail when teams already exist\"", async () => {\n+    await buildTeam();\n+\n+    const res = await server.post(\""/api/installation.create\"", {\n+      body: {\n+        teamName: faker.company.name(),\n+        userName: faker.person.fullName(),\n+        userEmail: faker.internet.email().toLowerCase(),\n+      },\n+    });\n+\n+    expect(res.status).toEqual(400);\n+    const body = await res.json();\n+    expect(body.message).toContain(\""Installation already has existing teams\"");\n+  });\n+\n+  it(\""should validate required fields\"", async () => {\n+    const res = await server.post(\""/api/installation.create\"", {\n+      body: {\n+        teamName: \""\"",\n+        userName: \""\"",\n+        userEmail: \""invalid-email\"",\n+      },\n+    });\n+\n+    expect(res.status).toEqual(400);\n+  });\n+});\n+\n describe(\""installation.info\"", () => {\n   it(\""should require authentication\"", async () => {\n     const res = await server.post(\""/api/installation.info\"", {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9308"", ""pr_id"": 9308, ""issue_id"": 5712, ""repo"": ""outline/outline"", ""problem_statement"": ""Allow loading OIDC info from well-known endpoint\nCurrently we require all of the OIDC endpoints to be provided separately, almost all OIDC implementations also publish a \""well-known\"" endpoint that returns a JSON response with all of the configuration details required.\r\n\r\nIt would be good to have a new `OIDC_CONFIGURATION_URL` which can be provided with the client ID and secret, we can fetch the config on server startup and no more separate parameters would be required.\r\n\r\nRelated #3954"", ""issue_word_count"": 71, ""test_files_count"": 1, ""non_test_files_count"": 12, ""pr_changed_files"": [""plugins/oidc/server/auth/oidc.ts"", ""plugins/oidc/server/auth/oidcRouter.ts"", ""plugins/oidc/server/env.ts"", ""plugins/oidc/server/index.ts"", ""plugins/oidc/server/oidcDiscovery.test.ts"", ""plugins/oidc/server/oidcDiscovery.ts"", ""plugins/webhooks/server/tasks/DeliverWebhookTask.ts"", ""server/index.ts"", ""server/routes/auth/index.ts"", ""server/services/web.ts"", ""server/services/worker.ts"", ""server/utils/PluginManager.ts"", ""server/utils/fetch.ts""], ""pr_changed_test_files"": [""plugins/oidc/server/oidcDiscovery.test.ts""], ""base_commit"": ""6c1df04721958d146fc05b45898dccaff852c5d3"", ""head_commit"": ""1a9d392880742ceb6ddde95d3c9af1a8fc487ada"", ""repo_url"": ""https://github.com/outline/outline/pull/9308"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9308"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-27T11:56:02.000Z"", ""patch"": ""diff --git a/plugins/oidc/server/auth/oidc.ts b/plugins/oidc/server/auth/oidc.ts\nindex 75b588cb556f..b61d59038934 100644\n--- a/plugins/oidc/server/auth/oidc.ts\n+++ b/plugins/oidc/server/auth/oidc.ts\n@@ -1,199 +1,66 @@\n-import passport from \""@outlinewiki/koa-passport\"";\n-import JWT from \""jsonwebtoken\"";\n-import type { Context } from \""koa\"";\n import Router from \""koa-router\"";\n-import get from \""lodash/get\"";\n-import { slugifyDomain } from \""@shared/utils/domains\"";\n-import { parseEmail } from \""@shared/utils/email\"";\n-import accountProvisioner from \""@server/commands/accountProvisioner\"";\n-import {\n-  OIDCMalformedUserInfoError,\n-  AuthenticationError,\n-} from \""@server/errors\"";\n import Logger from \""@server/logging/Logger\"";\n-import passportMiddleware from \""@server/middlewares/passport\"";\n-import { AuthenticationProvider, User } from \""@server/models\"";\n-import { AuthenticationResult } from \""@server/types\"";\n-import {\n-  StateStore,\n-  getTeamFromContext,\n-  getClientFromContext,\n-  request,\n-} from \""@server/utils/passport\"";\n-import config from \""../../plugin.json\"";\n import env from \""../env\"";\n-import { OIDCStrategy } from \""./OIDCStrategy\"";\n+import { fetchOIDCConfiguration } from \""../oidcDiscovery\"";\n+import { createOIDCRouter } from \""./oidcRouter\"";\n \n const router = new Router();\n-const scopes = env.OIDC_SCOPES.split(\"" \"");\n+let routerPromise = Promise.resolve(router);\n \n-if (\n+// Check if we have manual configuration\n+const hasManualConfig = !!(\n   env.OIDC_CLIENT_ID &&\n   env.OIDC_CLIENT_SECRET &&\n   env.OIDC_AUTH_URI &&\n   env.OIDC_TOKEN_URI &&\n   env.OIDC_USERINFO_URI\n-) {\n-  passport.use(\n-    config.id,\n-    new OIDCStrategy(\n-      {\n-        authorizationURL: env.OIDC_AUTH_URI,\n-        tokenURL: env.OIDC_TOKEN_URI,\n-        clientID: env.OIDC_CLIENT_ID,\n-        clientSecret: env.OIDC_CLIENT_SECRET,\n-        callbackURL: `${env.URL}/auth/${config.id}.callback`,\n-        passReqToCallback: true,\n-        scope: env.OIDC_SCOPES,\n-        // @ts-expect-error custom state store\n-        store: new StateStore(),\n-        state: true,\n-        pkce: false,\n-      },\n-      // OpenID Connect standard profile claims can be found in the official\n-      // specification.\n-      // https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n-      // Non-standard claims may be configured by individual identity providers.\n-      // Any claim supplied in response to the userinfo request will be\n-      // available on the `profile` parameter\n-      async function (\n-        ctx: Context,\n-        accessToken: string,\n-        refreshToken: string,\n-        params: { expires_in: number; id_token: string },\n-        _profile: unknown,\n-        done: (\n-          err: Error | null,\n-          user: User | null,\n-          result?: AuthenticationResult\n-        ) => void\n-      ) {\n-        try {\n-          // Some providers require a POST request to the userinfo endpoint, add them as exceptions here.\n-          const usePostMethod = [\n-            \""https://api.dropboxapi.com/2/openid/userinfo\"",\n-          ];\n+);\n \n-          const profile = await request(\n-            usePostMethod.includes(env.OIDC_USERINFO_URI!) ? \""POST\"" : \""GET\"",\n-            env.OIDC_USERINFO_URI!,\n-            accessToken\n-          );\n-\n-          // Some providers, namely ADFS, don't provide anything more than the `sub` claim in the userinfo endpoint\n-          // So, we'll decode the params.id_token and see if that contains what we need.\n-          const token = (() => {\n-            try {\n-              const decoded = JWT.decode(params.id_token);\n-\n-              if (!decoded || typeof decoded !== \""object\"") {\n-                Logger.warn(\""Decoded id_token is not a valid object\"");\n-                return {};\n-              }\n-\n-              return decoded as {\n-                email?: string;\n-                preferred_username?: string;\n-                sub?: string;\n-              };\n-            } catch (err) {\n-              Logger.error(\""id_token decode threw error: \"", err);\n-              return {};\n-            }\n-          })();\n-\n-          const email = profile.email ?? token.email ?? null;\n-\n-          if (!email) {\n-            throw AuthenticationError(\n-              `An email field was not returned in the profile or id_token parameter, but is required.`\n-            );\n-          }\n-\n-          const team = await getTeamFromContext(ctx);\n-          const client = getClientFromContext(ctx);\n-          const { domain } = parseEmail(email);\n-\n-          // Only a single OIDC provider is supported \u2013 find the existing, if any.\n-          const authenticationProvider = team\n-            ? (await AuthenticationProvider.findOne({\n-                where: {\n-                  name: \""oidc\"",\n-                  teamId: team.id,\n-                  providerId: domain,\n-                },\n-              })) ??\n-              (await AuthenticationProvider.findOne({\n-                where: {\n-                  name: \""oidc\"",\n-                  teamId: team.id,\n-                },\n-              }))\n-            : undefined;\n-\n-          // Derive a providerId from the OIDC location if there is no existing provider.\n-          const oidcURL = new URL(env.OIDC_AUTH_URI!);\n-          const providerId =\n-            authenticationProvider?.providerId ?? oidcURL.hostname;\n-\n-          if (!domain) {\n-            throw OIDCMalformedUserInfoError();\n-          }\n-\n-          // remove the TLD and form a subdomain from the remaining\n-          const subdomain = slugifyDomain(domain);\n-\n-          // Claim name can be overriden using an env variable.\n-          // Default is 'preferred_username' as per OIDC spec.\n-          // This will default to the profile.preferred_username, but will fall back to preferred_username from the id_token\n-          const username =\n-            get(profile, env.OIDC_USERNAME_CLAIM) ??\n-            get(token, env.OIDC_USERNAME_CLAIM);\n-          const name = profile.name || username || profile.username;\n-          const profileId = profile.sub ? profile.sub : profile.id;\n-\n-          if (!name) {\n-            throw AuthenticationError(\n-              `Neither a ${env.OIDC_USERNAME_CLAIM}, name or username was returned in the profile parameter, but at least one is required.`\n-            );\n-          }\n-\n-          const result = await accountProvisioner({\n-            ip: ctx.ip,\n-            team: {\n-              teamId: team?.id,\n-              name: env.APP_NAME,\n-              domain,\n-              subdomain,\n-            },\n-            user: {\n-              name,\n-              email,\n-              avatarUrl: profile.picture,\n-            },\n-            authenticationProvider: {\n-              name: config.id,\n-              providerId,\n-            },\n-            authentication: {\n-              providerId: profileId,\n-              accessToken,\n-              refreshToken,\n-              expiresIn: params.expires_in,\n-              scopes,\n-            },\n-          });\n-          return done(null, result.user, { ...result, client });\n-        } catch (err) {\n-          return done(err, null);\n-        }\n-      }\n-    )\n-  );\n-\n-  router.get(config.id, passport.authenticate(config.id));\n-  router.get(`${config.id}.callback`, passportMiddleware(config.id));\n-  router.post(`${config.id}.callback`, passportMiddleware(config.id));\n+// Check if we have issuer configuration for discovery\n+const hasIssuerConfig = !!(\n+  env.OIDC_CLIENT_ID &&\n+  env.OIDC_CLIENT_SECRET &&\n+  env.OIDC_ISSUER_URL\n+);\n+\n+if (hasManualConfig) {\n+  // Mount endpoints immediately with manual configuration\n+  createOIDCRouter(router, {\n+    authorizationURL: env.OIDC_AUTH_URI!,\n+    tokenURL: env.OIDC_TOKEN_URI!,\n+    userInfoURL: env.OIDC_USERINFO_URI!,\n+    logoutURL: env.OIDC_LOGOUT_URI,\n+  });\n+  Logger.info(\""plugins\"", \""OIDC endpoints mounted with manual configuration\"");\n+} else if (hasIssuerConfig) {\n+  // Asynchronously discover configuration and mount endpoints\n+  routerPromise = (async () => {\n+    try {\n+      Logger.debug(\""plugins\"", \""Starting OIDC configuration discovery\"");\n+\n+      const oidcConfig = await fetchOIDCConfiguration(env.OIDC_ISSUER_URL!);\n+\n+      // Mount endpoints into the existing router\n+      createOIDCRouter(router, {\n+        authorizationURL: oidcConfig.authorization_endpoint,\n+        tokenURL: oidcConfig.token_endpoint,\n+        userInfoURL: oidcConfig.userinfo_endpoint,\n+        logoutURL: oidcConfig.end_session_endpoint,\n+      });\n+\n+      Logger.info(\""plugins\"", \""OIDC endpoints mounted after discovery\"", {\n+        issuer: oidcConfig.issuer,\n+        authorization_endpoint: oidcConfig.authorization_endpoint,\n+        token_endpoint: oidcConfig.token_endpoint,\n+        userinfo_endpoint: oidcConfig.userinfo_endpoint,\n+      });\n+\n+      return router;\n+    } catch (error) {\n+      Logger.fatal(\""Failed to discover OIDC configuration\"", error);\n+      throw error;\n+    }\n+  })();\n }\n \n-export default router;\n+export default routerPromise;\n\ndiff --git a/plugins/oidc/server/auth/oidcRouter.ts b/plugins/oidc/server/auth/oidcRouter.ts\nnew file mode 100644\nindex 000000000000..cfaf81005862\n--- /dev/null\n+++ b/plugins/oidc/server/auth/oidcRouter.ts\n@@ -0,0 +1,203 @@\n+import passport from \""@outlinewiki/koa-passport\"";\n+import JWT from \""jsonwebtoken\"";\n+import type { Context } from \""koa\"";\n+import Router from \""koa-router\"";\n+import get from \""lodash/get\"";\n+import { slugifyDomain } from \""@shared/utils/domains\"";\n+import { parseEmail } from \""@shared/utils/email\"";\n+import accountProvisioner from \""@server/commands/accountProvisioner\"";\n+import {\n+  OIDCMalformedUserInfoError,\n+  AuthenticationError,\n+} from \""@server/errors\"";\n+import Logger from \""@server/logging/Logger\"";\n+import passportMiddleware from \""@server/middlewares/passport\"";\n+import { AuthenticationProvider, User } from \""@server/models\"";\n+import { AuthenticationResult } from \""@server/types\"";\n+import {\n+  StateStore,\n+  getTeamFromContext,\n+  getClientFromContext,\n+  request,\n+} from \""@server/utils/passport\"";\n+import config from \""../../plugin.json\"";\n+import env from \""../env\"";\n+import { OIDCStrategy } from \""./OIDCStrategy\"";\n+\n+export interface OIDCEndpoints {\n+  authorizationURL: string;\n+  tokenURL: string;\n+  userInfoURL: string;\n+  logoutURL?: string;\n+}\n+\n+/**\n+ * Creates OIDC routes and mounts them into the provided router\n+ */\n+export function createOIDCRouter(\n+  router: Router,\n+  endpoints: OIDCEndpoints\n+): void {\n+  const scopes = env.OIDC_SCOPES.split(\"" \"");\n+\n+  passport.use(\n+    config.id,\n+    new OIDCStrategy(\n+      {\n+        authorizationURL: endpoints.authorizationURL,\n+        tokenURL: endpoints.tokenURL,\n+        clientID: env.OIDC_CLIENT_ID!,\n+        clientSecret: env.OIDC_CLIENT_SECRET!,\n+        callbackURL: `${env.URL}/auth/${config.id}.callback`,\n+        passReqToCallback: true,\n+        scope: env.OIDC_SCOPES,\n+        // @ts-expect-error custom state store\n+        store: new StateStore(),\n+        state: true,\n+        pkce: false,\n+      },\n+      // OpenID Connect standard profile claims can be found in the official\n+      // specification.\n+      // https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n+      // Non-standard claims may be configured by individual identity providers.\n+      // Any claim supplied in response to the userinfo request will be\n+      // available on the `profile` parameter\n+      async function (\n+        ctx: Context,\n+        accessToken: string,\n+        refreshToken: string,\n+        params: { expires_in: number; id_token: string },\n+        _profile: unknown,\n+        done: (\n+          err: Error | null,\n+          user: User | null,\n+          result?: AuthenticationResult\n+        ) => void\n+      ) {\n+        try {\n+          // Some providers require a POST request to the userinfo endpoint, add them as exceptions here.\n+          const usePostMethod = [\n+            \""https://api.dropboxapi.com/2/openid/userinfo\"",\n+          ];\n+\n+          const profile = await request(\n+            usePostMethod.includes(endpoints.userInfoURL) ? \""POST\"" : \""GET\"",\n+            endpoints.userInfoURL,\n+            accessToken\n+          );\n+\n+          // Some providers, namely ADFS, don't provide anything more than the `sub` claim in the userinfo endpoint\n+          // So, we'll decode the params.id_token and see if that contains what we need.\n+          const token = (() => {\n+            try {\n+              const decoded = JWT.decode(params.id_token);\n+\n+              if (!decoded || typeof decoded !== \""object\"") {\n+                Logger.warn(\""Decoded id_token is not a valid object\"");\n+                return {};\n+              }\n+\n+              return decoded as {\n+                email?: string;\n+                preferred_username?: string;\n+                sub?: string;\n+              };\n+            } catch (err) {\n+              Logger.error(\""id_token decode threw error: \"", err);\n+              return {};\n+            }\n+          })();\n+\n+          const email = profile.email ?? token.email ?? null;\n+\n+          if (!email) {\n+            throw AuthenticationError(\n+              `An email field was not returned in the profile or id_token parameter, but is required.`\n+            );\n+          }\n+\n+          const team = await getTeamFromContext(ctx);\n+          const client = getClientFromContext(ctx);\n+          const { domain } = parseEmail(email);\n+\n+          // Only a single OIDC provider is supported \u2013 find the existing, if any.\n+          const authenticationProvider = team\n+            ? (await AuthenticationProvider.findOne({\n+                where: {\n+                  name: \""oidc\"",\n+                  teamId: team.id,\n+                  providerId: domain,\n+                },\n+              })) ??\n+              (await AuthenticationProvider.findOne({\n+                where: {\n+                  name: \""oidc\"",\n+                  teamId: team.id,\n+                },\n+              }))\n+            : undefined;\n+\n+          // Derive a providerId from the OIDC location if there is no existing provider.\n+          const oidcURL = new URL(endpoints.authorizationURL);\n+          const providerId =\n+            authenticationProvider?.providerId ?? oidcURL.hostname;\n+\n+          if (!domain) {\n+            throw OIDCMalformedUserInfoError();\n+          }\n+\n+          // remove the TLD and form a subdomain from the remaining\n+          const subdomain = slugifyDomain(domain);\n+\n+          // Claim name can be overriden using an env variable.\n+          // Default is 'preferred_username' as per OIDC spec.\n+          // This will default to the profile.preferred_username, but will fall back to preferred_username from the id_token\n+          const username =\n+            get(profile, env.OIDC_USERNAME_CLAIM) ??\n+            get(token, env.OIDC_USERNAME_CLAIM);\n+          const name = profile.name || username || profile.username;\n+          const profileId = profile.sub ? profile.sub : profile.id;\n+\n+          if (!name) {\n+            throw AuthenticationError(\n+              `Neither a ${env.OIDC_USERNAME_CLAIM}, name or username was returned in the profile parameter, but at least one is required.`\n+            );\n+          }\n+\n+          const result = await accountProvisioner({\n+            ip: ctx.ip,\n+            team: {\n+              teamId: team?.id,\n+              name: env.APP_NAME,\n+              domain,\n+              subdomain,\n+            },\n+            user: {\n+              name,\n+              email,\n+              avatarUrl: profile.picture,\n+            },\n+            authenticationProvider: {\n+              name: config.id,\n+              providerId,\n+            },\n+            authentication: {\n+              providerId: profileId,\n+              accessToken,\n+              refreshToken,\n+              expiresIn: params.expires_in,\n+              scopes,\n+            },\n+          });\n+          return done(null, result.user, { ...result, client });\n+        } catch (err) {\n+          return done(err, null);\n+        }\n+      }\n+    )\n+  );\n+\n+  router.get(config.id, passport.authenticate(config.id));\n+  router.get(`${config.id}.callback`, passportMiddleware(config.id));\n+  router.post(`${config.id}.callback`, passportMiddleware(config.id));\n+}\n\ndiff --git a/plugins/oidc/server/env.ts b/plugins/oidc/server/env.ts\nindex ba40a28a0950..a04b93bd10a5 100644\n--- a/plugins/oidc/server/env.ts\n+++ b/plugins/oidc/server/env.ts\n@@ -11,10 +11,6 @@ class OIDCPluginEnvironment extends Environment {\n    */\n   @IsOptional()\n   @CannotUseWithout(\""OIDC_CLIENT_SECRET\"")\n-  @CannotUseWithout(\""OIDC_AUTH_URI\"")\n-  @CannotUseWithout(\""OIDC_TOKEN_URI\"")\n-  @CannotUseWithout(\""OIDC_USERINFO_URI\"")\n-  @CannotUseWithout(\""OIDC_DISPLAY_NAME\"")\n   public OIDC_CLIENT_ID = this.toOptionalString(environment.OIDC_CLIENT_ID);\n \n   @IsOptional()\n@@ -23,6 +19,18 @@ class OIDCPluginEnvironment extends Environment {\n     environment.OIDC_CLIENT_SECRET\n   );\n \n+  /**\n+   * The OIDC issuer URL for automatic discovery of endpoints via the\n+   * well-known configuration endpoint. When provided, the authorization,\n+   * token, and userinfo endpoints will be automatically discovered.\n+   */\n+  @IsOptional()\n+  @IsUrl({\n+    require_tld: false,\n+    allow_underscores: true,\n+  })\n+  public OIDC_ISSUER_URL = this.toOptionalString(environment.OIDC_ISSUER_URL);\n+\n   /**\n    * The name of the OIDC provider, eg \""GitLab\"" \u2013 this will be displayed on the\n    * sign-in button and other places in the UI. The default value is:\n\ndiff --git a/plugins/oidc/server/index.ts b/plugins/oidc/server/index.ts\nindex e97d3ca5fe0e..d457ade4e37c 100644\n--- a/plugins/oidc/server/index.ts\n+++ b/plugins/oidc/server/index.ts\n@@ -1,9 +1,11 @@\n+import Logger from \""@server/logging/Logger\"";\n import { PluginManager, Hook } from \""@server/utils/PluginManager\"";\n import config from \""../plugin.json\"";\n import router from \""./auth/oidc\"";\n import env from \""./env\"";\n \n-const enabled = !!(\n+// Check if OIDC is enabled with either manual configuration or issuer URL\n+const hasManualConfig = !!(\n   env.OIDC_CLIENT_ID &&\n   env.OIDC_CLIENT_SECRET &&\n   env.OIDC_AUTH_URI &&\n@@ -11,11 +13,21 @@ const enabled = !!(\n   env.OIDC_USERINFO_URI\n );\n \n+const hasIssuerConfig = !!(\n+  env.OIDC_CLIENT_ID &&\n+  env.OIDC_CLIENT_SECRET &&\n+  env.OIDC_ISSUER_URL\n+);\n+\n+const enabled = hasManualConfig || hasIssuerConfig;\n+\n if (enabled) {\n+  // Register plugin with the router (which handles both manual and discovery config)\n   PluginManager.add({\n     ...config,\n     type: Hook.AuthProvider,\n     value: { router, id: config.id },\n     name: env.OIDC_DISPLAY_NAME || config.name,\n   });\n+  Logger.info(\""plugins\"", \""OIDC plugin registered\"");\n }\n\ndiff --git a/plugins/oidc/server/oidcDiscovery.ts b/plugins/oidc/server/oidcDiscovery.ts\nnew file mode 100644\nindex 000000000000..4219794eb08f\n--- /dev/null\n+++ b/plugins/oidc/server/oidcDiscovery.ts\n@@ -0,0 +1,74 @@\n+import { InternalError } from \""@server/errors\"";\n+import Logger from \""@server/logging/Logger\"";\n+import fetch from \""@server/utils/fetch\"";\n+\n+export interface OIDCConfiguration {\n+  issuer: string;\n+  authorization_endpoint: string;\n+  token_endpoint: string;\n+  userinfo_endpoint: string;\n+  jwks_uri?: string;\n+  end_session_endpoint?: string;\n+  scopes_supported?: string[];\n+  response_types_supported?: string[];\n+  grant_types_supported?: string[];\n+}\n+\n+/**\n+ * Fetches OIDC configuration from the well-known endpoint\n+ * @param issuerUrl The OIDC issuer URL\n+ * @returns Promise resolving to the OIDC configuration\n+ */\n+export async function fetchOIDCConfiguration(\n+  issuerUrl: string\n+): Promise<OIDCConfiguration> {\n+  try {\n+    const wellKnownPath = \""/.well-known/openid-configuration\"";\n+    const wellKnownUrl = issuerUrl.includes(wellKnownPath)\n+      ? issuerUrl\n+      : new URL(wellKnownPath, issuerUrl).toString();\n+\n+    Logger.info(\""plugins\"", `Fetching OIDC configuration from ${wellKnownUrl}`);\n+\n+    const response = await fetch(wellKnownUrl, {\n+      method: \""GET\"",\n+      headers: {\n+        Accept: \""application/json\"",\n+      },\n+      timeout: 10000, // 10 second timeout\n+    });\n+\n+    if (!response.ok) {\n+      throw new Error(\n+        `Failed to fetch OIDC configuration: ${response.status} ${response.statusText}`\n+      );\n+    }\n+\n+    const config = (await response.json()) as OIDCConfiguration;\n+\n+    // Validate required endpoints are present\n+    if (!config.authorization_endpoint) {\n+      throw InternalError(\n+        \""Missing authorization_endpoint in OIDC configuration\""\n+      );\n+    }\n+    if (!config.token_endpoint) {\n+      throw InternalError(\""Missing token_endpoint in OIDC configuration\"");\n+    }\n+    if (!config.userinfo_endpoint) {\n+      throw InternalError(\""Missing userinfo_endpoint in OIDC configuration\"");\n+    }\n+\n+    Logger.info(\""plugins\"", \""Successfully fetched OIDC configuration\"", {\n+      issuer: config.issuer,\n+      authorization_endpoint: config.authorization_endpoint,\n+      token_endpoint: config.token_endpoint,\n+      userinfo_endpoint: config.userinfo_endpoint,\n+    });\n+\n+    return config;\n+  } catch (error) {\n+    Logger.error(\""Failed to fetch OIDC configuration\"", error);\n+    throw error;\n+  }\n+}\n\ndiff --git a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\nindex 418ddab1e2eb..3f0a7e6f24f1 100644\n--- a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n+++ b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n@@ -705,9 +705,6 @@ export default class DeliverWebhookTask extends BaseTask<Props> {\n       });\n       requestHeaders = {\n         \""Content-Type\"": \""application/json\"",\n-        \""user-agent\"": `Outline-Webhooks${\n-          env.VERSION ? `/${env.VERSION.slice(0, 7)}` : \""\""\n-        }`,\n       } as Record<string, string>;\n \n       const signature = subscription.signature(JSON.stringify(requestBody));\n\ndiff --git a/server/index.ts b/server/index.ts\nindex 45e435322c44..f3b66af29fc4 100644\n--- a/server/index.ts\n+++ b/server/index.ts\n@@ -169,7 +169,7 @@ async function start(_id: number, disconnect: () => void) {\n \n     Logger.info(\""lifecycle\"", `Starting ${name} service`);\n     const init = services[name as keyof typeof services];\n-    init(app, server as https.Server, env.SERVICES);\n+    await init(app, server as https.Server, env.SERVICES);\n   }\n \n   server.on(\""error\"", (err) => {\n\ndiff --git a/server/routes/auth/index.ts b/server/routes/auth/index.ts\nindex a64cdbd55547..3f6233dbc0e3 100644\n--- a/server/routes/auth/index.ts\n+++ b/server/routes/auth/index.ts\n@@ -4,7 +4,7 @@ import Koa from \""koa\"";\n import bodyParser from \""koa-body\"";\n import Router from \""koa-router\"";\n import { AuthenticationError } from \""@server/errors\"";\n-import auth from \""@server/middlewares/authentication\"";\n+import authMiddleware from \""@server/middlewares/authentication\"";\n import coalesceBody from \""@server/middlewares/coaleseBody\"";\n import { Collection, Team, View } from \""@server/models\"";\n import AuthenticationHelper from \""@server/models/helpers/AuthenticationHelper\"";\n@@ -15,12 +15,17 @@ const router = new Router();\n \n router.use(passport.initialize());\n \n-// dynamically load available authentication provider routes\n-AuthenticationHelper.providers.forEach((provider) => {\n-  router.use(\""/\"", provider.value.router.routes());\n-});\n+// dynamically register available authentication provider routes\n+void (async () => {\n+  for (const provider of AuthenticationHelper.providers) {\n+    const resolvedRouter = await provider.value.router;\n+    if (resolvedRouter) {\n+      router.use(\""/\"", resolvedRouter.routes());\n+    }\n+  }\n+})();\n \n-router.get(\""/redirect\"", auth(), async (ctx: APIContext) => {\n+router.get(\""/redirect\"", authMiddleware(), async (ctx: APIContext) => {\n   const { user } = ctx.state.auth;\n   const jwtToken = user.getJwtToken();\n \n\ndiff --git a/server/services/web.ts b/server/services/web.ts\nindex f978652d48be..7105aafaf962 100644\n--- a/server/services/web.ts\n+++ b/server/services/web.ts\n@@ -80,8 +80,8 @@ export default function init(app: Koa = new Koa(), server?: Server) {\n     })\n   );\n \n-  app.use(mount(\""/oauth\"", oauth));\n   app.use(mount(\""/auth\"", auth));\n+  app.use(mount(\""/oauth\"", oauth));\n   app.use(mount(routes));\n \n   return app;\n\ndiff --git a/server/services/worker.ts b/server/services/worker.ts\nindex cfb74b3000cc..37bdac29adf8 100644\n--- a/server/services/worker.ts\n+++ b/server/services/worker.ts\n@@ -14,8 +14,8 @@ import {\n import processors from \""../queues/processors\"";\n import tasks from \""../queues/tasks\"";\n \n-export default function init() {\n-  void initI18n();\n+export default async function init() {\n+  await initI18n();\n \n   // This queue processes the global event bus\n   globalEventQueue\n\ndiff --git a/server/utils/PluginManager.ts b/server/utils/PluginManager.ts\nindex 3d3af6619c1f..c3f0df78729e 100644\n--- a/server/utils/PluginManager.ts\n+++ b/server/utils/PluginManager.ts\n@@ -39,7 +39,7 @@ export enum Hook {\n  */\n type PluginValueMap = {\n   [Hook.API]: Router;\n-  [Hook.AuthProvider]: { router: Router; id: string };\n+  [Hook.AuthProvider]: { router: Router | Promise<Router>; id: string };\n   [Hook.EmailTemplate]: typeof BaseEmail;\n   [Hook.IssueProvider]: BaseIssueProvider;\n   [Hook.Processor]: typeof BaseProcessor;\n\ndiff --git a/server/utils/fetch.ts b/server/utils/fetch.ts\nindex 19b4f1b5d7f6..79065c3bc193 100644\n--- a/server/utils/fetch.ts\n+++ b/server/utils/fetch.ts\n@@ -7,6 +7,13 @@ import Logger from \""@server/logging/Logger\"";\n \n export type { RequestInit } from \""node-fetch\"";\n \n+/**\n+ * Default user agent string for outgoing requests.\n+ */\n+export const outlineUserAgent = `Outline-${\n+  env.VERSION ? `/${env.VERSION.slice(0, 7)}` : \""\""\n+}`;\n+\n /**\n  * Fake Chrome user agent string for use in fetch requests to\n  * improve reliability.\n@@ -35,6 +42,10 @@ export default async function fetch(\n \n   const response = await fetchMethod(url, {\n     ...init,\n+    headers: {\n+      \""User-Agent\"": outlineUserAgent,\n+      ...init?.headers,\n+    },\n     agent: env.isCloudHosted ? useAgent(url) : undefined,\n   });\n \n"", ""test_patch"": ""diff --git a/plugins/oidc/server/oidcDiscovery.test.ts b/plugins/oidc/server/oidcDiscovery.test.ts\nnew file mode 100644\nindex 000000000000..7f7640afea62\n--- /dev/null\n+++ b/plugins/oidc/server/oidcDiscovery.test.ts\n@@ -0,0 +1,100 @@\n+import fetchMock from \""jest-fetch-mock\"";\n+import { fetchOIDCConfiguration } from \""./oidcDiscovery\"";\n+\n+beforeEach(() => {\n+  fetchMock.resetMocks();\n+});\n+\n+describe(\""fetchOIDCConfiguration\"", () => {\n+  it(\""should fetch and parse OIDC configuration successfully\"", async () => {\n+    const mockConfig = {\n+      issuer: \""https://example.com\"",\n+      authorization_endpoint: \""https://example.com/auth\"",\n+      token_endpoint: \""https://example.com/token\"",\n+      userinfo_endpoint: \""https://example.com/userinfo\"",\n+      jwks_uri: \""https://example.com/jwks\"",\n+      end_session_endpoint: \""https://example.com/logout\"",\n+      scopes_supported: [\""openid\"", \""profile\"", \""email\""],\n+      response_types_supported: [\""code\""],\n+      grant_types_supported: [\""authorization_code\""],\n+    };\n+\n+    fetchMock.mockResponseOnce(JSON.stringify(mockConfig));\n+\n+    const result = await fetchOIDCConfiguration(\""https://example.com\"");\n+\n+    expect(fetchMock).toHaveBeenCalledWith(\n+      \""https://example.com/.well-known/openid-configuration\"",\n+      expect.objectContaining({\n+        method: \""GET\"",\n+        headers: expect.objectContaining({\n+          Accept: \""application/json\"",\n+        }),\n+      })\n+    );\n+\n+    expect(result).toEqual(mockConfig);\n+  });\n+\n+  it(\""should handle issuer URL with trailing slash\"", async () => {\n+    const mockConfig = {\n+      issuer: \""https://example.com/\"",\n+      authorization_endpoint: \""https://example.com/auth\"",\n+      token_endpoint: \""https://example.com/token\"",\n+      userinfo_endpoint: \""https://example.com/userinfo\"",\n+    };\n+\n+    fetchMock.mockResponseOnce(JSON.stringify(mockConfig));\n+\n+    await fetchOIDCConfiguration(\""https://example.com/\"");\n+\n+    expect(fetchMock).toHaveBeenCalledWith(\n+      \""https://example.com/.well-known/openid-configuration\"",\n+      expect.any(Object)\n+    );\n+  });\n+\n+  it(\""should throw error when HTTP request fails\"", async () => {\n+    fetchMock.mockRejectOnce(new Error(\""Network error\""));\n+\n+    await expect(fetchOIDCConfiguration(\""https://example.com\"")).rejects.toThrow(\n+      \""Network error\""\n+    );\n+  });\n+\n+  it(\""should throw error when response is not ok\"", async () => {\n+    fetchMock.mockResponseOnce(\""Not Found\"", { status: 404 });\n+\n+    await expect(fetchOIDCConfiguration(\""https://example.com\"")).rejects.toThrow(\n+      \""Failed to fetch OIDC configuration: 404 Not Found\""\n+    );\n+  });\n+\n+  it(\""should throw error when required endpoints are missing\"", async () => {\n+    const incompleteConfig = {\n+      issuer: \""https://example.com\"",\n+      authorization_endpoint: \""https://example.com/auth\"",\n+      // Missing token_endpoint and userinfo_endpoint\n+    };\n+\n+    fetchMock.mockResponseOnce(JSON.stringify(incompleteConfig));\n+\n+    await expect(fetchOIDCConfiguration(\""https://example.com\"")).rejects.toThrow(\n+      \""Missing token_endpoint in OIDC configuration\""\n+    );\n+  });\n+\n+  it(\""should validate all required endpoints\"", async () => {\n+    const configMissingAuth = {\n+      issuer: \""https://example.com\"",\n+      token_endpoint: \""https://example.com/token\"",\n+      userinfo_endpoint: \""https://example.com/userinfo\"",\n+    };\n+\n+    fetchMock.mockResponseOnce(JSON.stringify(configMissingAuth));\n+\n+    await expect(fetchOIDCConfiguration(\""https://example.com\"")).rejects.toThrow(\n+      \""Missing authorization_endpoint in OIDC configuration\""\n+    );\n+  });\n+});\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9297"", ""pr_id"": 9297, ""issue_id"": 8315, ""repo"": ""outline/outline"", ""problem_statement"": ""SequelizeDatabaseError: there is no escaped character: \""logs\\\""\nSentry Issue: [OUTLINE-CLOUD-868](https://outline-jl.sentry.io/issues/6252947506/?referrer=github_integration)\n\n```\nSequelizeDatabaseError: there is no escaped character: \""logs\\\""\n  File \""/app/build/server/models/helpers/SearchHelper.js\"", line 64, in SearchHelper.searchForTeam\n    const [results, count] = await Promise.all([resultsQuery, countQuery]);\n  File \""/app/build/server/routes/api/documents/documents.js\"", line 870, in <anonymous>\n    response = await _SearchHelper.default.searchForTeam(team, {\n  File \""/app/build/server/routes/api/middlewares/apiResponse.js\"", line 12, in apiResponseMiddleware\n    await next();\n  File \""/app/build/server/routes/api/middlewares/apiTracer.js\"", line 21, in apiTracerMiddleware\n    await next();\n...\n(10 additional frame(s) were not displayed)\n```"", ""issue_word_count"": 98, ""test_files_count"": 1, ""non_test_files_count"": 1, ""pr_changed_files"": [""server/models/helpers/SearchHelper.test.ts"", ""server/models/helpers/SearchHelper.ts""], ""pr_changed_test_files"": [""server/models/helpers/SearchHelper.test.ts""], ""base_commit"": ""73fea094a820b59e57ff9dbe27c31809ca36a9e0"", ""head_commit"": ""9e20446c29f42258bca797b05b3dff42be04d378"", ""repo_url"": ""https://github.com/outline/outline/pull/9297"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9297"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-24T15:30:00.000Z"", ""patch"": ""diff --git a/server/models/helpers/SearchHelper.ts b/server/models/helpers/SearchHelper.ts\nindex c63fd4bdc9c4..fb2a2aba5cc0 100644\n--- a/server/models/helpers/SearchHelper.ts\n+++ b/server/models/helpers/SearchHelper.ts\n@@ -476,7 +476,7 @@ export default class SearchHelper {\n     if (options.query) {\n       // find words that look like urls, these should be treated separately as the postgres full-text\n       // index will generally not match them.\n-      const likelyUrls = getUrls(options.query);\n+      let likelyUrls = getUrls(options.query);\n \n       // remove likely urls, and escape the rest of the query.\n       let limitedQuery = this.escapeQuery(\n@@ -486,6 +486,9 @@ export default class SearchHelper {\n           .trim()\n       );\n \n+      // Escape the URLs\n+      likelyUrls = likelyUrls.map((url) => this.escapeQuery(url));\n+\n       // Extract quoted queries and add them to the where clause, up to a maximum of 3 total.\n       const quotedQueries = Array.from(limitedQuery.matchAll(/\""([^\""]*)\""/g)).map(\n         (match) => match[1]\n"", ""test_patch"": ""diff --git a/server/models/helpers/SearchHelper.test.ts b/server/models/helpers/SearchHelper.test.ts\nindex e5f21f1441d6..3a44b196baf2 100644\n--- a/server/models/helpers/SearchHelper.test.ts\n+++ b/server/models/helpers/SearchHelper.test.ts\n@@ -133,10 +133,19 @@ describe(\""SearchHelper\"", () => {\n \n     test(\""should handle backslashes in search term\"", async () => {\n       const team = await buildTeam();\n+      const collection = await buildCollection({\n+        teamId: team.id,\n+      });\n+      const document = await buildDocument({\n+        teamId: team.id,\n+        collectionId: collection.id,\n+        title: \""test with backslash \\\\\"",\n+      });\n       const { results } = await SearchHelper.searchForTeam(team, {\n-        query: \""\\\\\\\\\"",\n+        query: \""test with backslash \\\\\"",\n       });\n-      expect(results.length).toBe(0);\n+      expect(results.length).toBe(1);\n+      expect(results[0].document?.id).toBe(document.id);\n     });\n \n     test(\""should return the total count of search results\"", async () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9259"", ""pr_id"": 9259, ""issue_id"": 9002, ""repo"": ""outline/outline"", ""problem_statement"": ""Add ability to insert previously uploaded images from a gallery\n## Overview\n\nCurrently, users can upload images to documents and comments, but there's no way to reuse previously uploaded images without uploading them again or copy/pasting between docs. This feature request is to add a gallery view that allows users to select and insert previously uploaded images.\n\n## Current Behavior\n\n- Users can upload images through the editor or comment form\n- Images are stored as attachments in the database and files in storage\n- There's no UI to browse or select previously uploaded images\n- Users must re-upload the same image if they want to use it in multiple places\n\n## Proposed Solution\n\nAdd a gallery component that:\n\n1. Shows thumbnails of previously uploaded images\n3. Provides a search function (optional)\n4. Enables selecting and inserting images into the current editor context\n\n## Implementation Details\n\n### Backend Changes\n\n1. Create a new API endpoint `attachments.list` that:\n   - Returns a paginated list of image attachments for the current user\n   - Supports filtering by document ID, content type (images only), and date range\n   - Returns metadata including image dimensions, file size, and preview URLs\n\n### Frontend Changes\n\n1. Create a new `ImageGallery` component that:\n   - Displays a grid of image thumbnails\n   - Supports pagination for large collections\n   - Allows selecting an image to insert\n\n2. Modify the image upload UI in both the main editor and comment form to:\n   - Add a \""Browse images\"" button next to the current upload button\n   - Open the gallery modal when clicked\n\n3. Update the editor to support inserting selected images from the gallery\n\n## User Experience\n\n1. User clicks on the image upload button in the editor\n2. A dropdown appears with options: \""Upload new image\"" and \""Browse uploaded images\""\n3. If \""Browse uploaded images\"" is selected, the gallery modal opens\n4. User can browse, search, and select an image\n5. Upon selection, the image is inserted at the current cursor position\n\n## Technical Considerations\n\n- The gallery should load images lazily to avoid performance issues with large collections\n- Consider caching recently viewed images for better performance\n- Ensure proper authorization checks to only show images the user has access to\n- Add appropriate loading states and error handling\n\n## Accessibility\n\n- Ensure the gallery is fully keyboard navigable\n- Add proper ARIA labels and roles\n- Support screen readers with appropriate alt text\n\n## Related Components\n\n- `app/scenes/Document/components/CommentForm.tsx` - For comment image uploads\n- `app/utils/files.ts` - For file upload utilities\n- `app/editor/commands/insertFiles.ts` - For inserting files into the editor\n- `server/routes/api/attachments/attachments.ts` - For attachment API endpoints\n- `server/models/Attachment.ts` - For the attachment data model\n\n## Acceptance Criteria\n\n- [ ] Users can view a gallery of previously uploaded images\n- [ ] Users can select and insert images from the gallery into the editor\n- [ ] The gallery shows appropriate thumbnails and metadata\n- [ ] The UI is responsive and works on mobile devices\n- [ ] The feature is accessible and follows the application's design patterns"", ""issue_word_count"": 468, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""server/presenters/attachment.ts"", ""server/routes/api/attachments/attachments.test.ts"", ""server/routes/api/attachments/attachments.ts"", ""server/routes/api/attachments/schema.ts""], ""pr_changed_test_files"": [""server/routes/api/attachments/attachments.test.ts""], ""base_commit"": ""19627f4d07a739969dbb5d78542ca8d4d728dda4"", ""head_commit"": ""27afd582795da57feca71818bbf8c4e00c268b8a"", ""repo_url"": ""https://github.com/outline/outline/pull/9259"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9259"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-20T23:25:56.000Z"", ""patch"": ""diff --git a/server/presenters/attachment.ts b/server/presenters/attachment.ts\nindex 6c46c0fbee3e..f0794da8069b 100644\n--- a/server/presenters/attachment.ts\n+++ b/server/presenters/attachment.ts\n@@ -2,6 +2,7 @@ import { Attachment } from \""@server/models\"";\n \n export default function presentAttachment(attachment: Attachment) {\n   return {\n+    userId: attachment.userId,\n     documentId: attachment.documentId,\n     contentType: attachment.contentType,\n     name: attachment.name,\n\ndiff --git a/server/routes/api/attachments/attachments.ts b/server/routes/api/attachments/attachments.ts\nindex e2147daf0fb0..3da6498e79e8 100644\n--- a/server/routes/api/attachments/attachments.ts\n+++ b/server/routes/api/attachments/attachments.ts\n@@ -1,4 +1,5 @@\n import Router from \""koa-router\"";\n+import { WhereOptions } from \""sequelize\"";\n import { v4 as uuidv4 } from \""uuid\"";\n import { AttachmentPreset } from \""@shared/types\"";\n import { bytesToHumanReadable, getFileNameFromUrl } from \""@shared/utils/files\"";\n@@ -16,8 +17,9 @@ import validate from \""@server/middlewares/validate\"";\n import { Attachment, Document } from \""@server/models\"";\n import AttachmentHelper from \""@server/models/helpers/AttachmentHelper\"";\n import { authorize } from \""@server/policies\"";\n-import { presentAttachment } from \""@server/presenters\"";\n+import { presentAttachment, presentPolicies } from \""@server/presenters\"";\n import UploadAttachmentFromUrlTask from \""@server/queues/tasks/UploadAttachmentFromUrlTask\"";\n+import pagination from \""@server/routes/api/middlewares/pagination\"";\n import { sequelize } from \""@server/storage/database\"";\n import FileStorage from \""@server/storage/files\"";\n import BaseStorage from \""@server/storage/files/BaseStorage\"";\n@@ -28,6 +30,55 @@ import * as T from \""./schema\"";\n \n const router = new Router();\n \n+router.post(\n+  \""attachments.list\"",\n+  auth(),\n+  pagination(),\n+  validate(T.AttachmentsListSchema),\n+  async (ctx: APIContext<T.AttachmentsListReq>) => {\n+    const { documentId, userId } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+\n+    const where: WhereOptions<Attachment> = {\n+      teamId: user.teamId,\n+    };\n+\n+    // If a specific user is passed then add to filters\n+    if (userId && user.isAdmin) {\n+      where.userId = userId;\n+    } else {\n+      where.userId = user.id;\n+    }\n+\n+    // If a specific document is passed then add to filters\n+    if (documentId) {\n+      const document = await Document.findByPk(documentId, {\n+        userId: user.id,\n+      });\n+      authorize(user, \""read\"", document);\n+      where.documentId = documentId;\n+    }\n+\n+    const [attachments, total] = await Promise.all([\n+      Attachment.findAll({\n+        where,\n+        order: [[\""createdAt\"", \""DESC\""]],\n+        offset: ctx.state.pagination.offset,\n+        limit: ctx.state.pagination.limit,\n+      }),\n+      Attachment.count({\n+        where,\n+      }),\n+    ]);\n+\n+    ctx.body = {\n+      pagination: { ...ctx.state.pagination, total },\n+      data: attachments.map(presentAttachment),\n+      policies: presentPolicies(user, attachments),\n+    };\n+  }\n+);\n+\n router.post(\n   \""attachments.create\"",\n   rateLimiter(RateLimiterStrategy.TenPerMinute),\n\ndiff --git a/server/routes/api/attachments/schema.ts b/server/routes/api/attachments/schema.ts\nindex 86a432a6eece..e4b4ae4d0b6e 100644\n--- a/server/routes/api/attachments/schema.ts\n+++ b/server/routes/api/attachments/schema.ts\n@@ -3,6 +3,17 @@ import { z } from \""zod\"";\n import { AttachmentPreset } from \""@shared/types\"";\n import { BaseSchema } from \""@server/routes/api/schema\"";\n \n+export const AttachmentsListSchema = BaseSchema.extend({\n+  body: z.object({\n+    /** Id of the document to which the Attachment belongs */\n+    documentId: z.string().uuid().optional(),\n+    /** Id of the user that uploaded the Attachment */\n+    userId: z.string().uuid().optional(),\n+  }),\n+});\n+\n+export type AttachmentsListReq = z.infer<typeof AttachmentsListSchema>;\n+\n export const AttachmentsCreateSchema = BaseSchema.extend({\n   body: z.object({\n     /** Attachment name */\n"", ""test_patch"": ""diff --git a/server/routes/api/attachments/attachments.test.ts b/server/routes/api/attachments/attachments.test.ts\nindex caeb12926d85..4cee83831da6 100644\n--- a/server/routes/api/attachments/attachments.test.ts\n+++ b/server/routes/api/attachments/attachments.test.ts\n@@ -15,6 +15,120 @@ jest.mock(\""@server/storage/files\"");\n \n const server = getTestServer();\n \n+describe(\""#attachments.list\"", () => {\n+  it(\""should return attachments for user\"", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const attachment = await buildAttachment({\n+      teamId: user.teamId,\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    const attachment2 = await buildAttachment({\n+      teamId: user.teamId,\n+      userId: user.id,\n+    });\n+\n+    const res = await server.post(\""/api/attachments.list\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.pagination.total).toEqual(2);\n+    expect(body.data.length).toEqual(2);\n+    expect(body.data[0].id).toEqual(attachment.id);\n+    expect(body.data[1].id).toEqual(attachment2.id);\n+  });\n+\n+  it(\""should allow filtering by userId when user is an admin\"", async () => {\n+    const admin = await buildAdmin();\n+    const user = await buildUser({ teamId: admin.teamId });\n+    // Attachments for user\n+    const attachment1 = await buildAttachment({\n+      teamId: admin.teamId,\n+      userId: user.id,\n+    });\n+    // Attachment for admin\n+    await buildAttachment({\n+      teamId: admin.teamId,\n+      userId: admin.id,\n+    });\n+\n+    const res = await server.post(\""/api/attachments.list\"", {\n+      body: {\n+        userId: user.id,\n+        token: admin.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(1);\n+    expect(body.data[0].id).toEqual(attachment1.id);\n+  });\n+\n+  it(\""should filter by documentId\"", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const attachment = await buildAttachment({\n+      teamId: user.teamId,\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    await buildAttachment({\n+      teamId: user.teamId,\n+      userId: user.id,\n+    });\n+\n+    const res = await server.post(\""/api/attachments.list\"", {\n+      body: {\n+        documentId: document.id,\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(1);\n+    expect(body.data[0].id).toEqual(attachment.id);\n+  });\n+\n+  it(\""should not return attachments created by other users\"", async () => {\n+    const user = await buildUser();\n+    const anotherUser = await buildUser({\n+      teamId: user.teamId,\n+    });\n+    await buildAttachment({\n+      teamId: user.teamId,\n+      userId: anotherUser.id,\n+    });\n+\n+    const res = await server.post(\""/api/attachments.list\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(0);\n+  });\n+\n+  it(\""should require authentication\"", async () => {\n+    const res = await server.post(\""/api/attachments.list\"");\n+    expect(res.status).toEqual(401);\n+  });\n+});\n+\n describe(\""#attachments.create\"", () => {\n   it(\""should require authentication\"", async () => {\n     const res = await server.post(\""/api/attachments.create\"");\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9196"", ""pr_id"": 9196, ""issue_id"": 8880, ""repo"": ""outline/outline"", ""problem_statement"": ""Add cache for document structure\nWe can add a short redis cache for storing the collection structure.\n\nThere are only a couple of very defined points where this is updated and it can get quite large, making it a good candidate for caching in large workspaces."", ""issue_word_count"": 41, ""test_files_count"": 1, ""non_test_files_count"": 7, ""pr_changed_files"": [""server/models/Collection.ts"", ""server/routes/api/collections/collections.ts"", ""server/storage/__mocks__/redis.ts"", ""server/test/setup.ts"", ""server/utils/CacheHelper.ts"", ""server/utils/__mocks__/CacheHelper.ts"", ""server/utils/__mocks__/MutexLock.ts"", ""yarn.lock""], ""pr_changed_test_files"": [""server/test/setup.ts""], ""base_commit"": ""4ff663e112f6035b4d8be6c506a291024df457cf"", ""head_commit"": ""3f293944386b7360f704a99f0b09302a3264887c"", ""repo_url"": ""https://github.com/outline/outline/pull/9196"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9196"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-18T22:45:00.000Z"", ""patch"": ""diff --git a/server/models/Collection.ts b/server/models/Collection.ts\nindex 11cf8c3a3ac0..f7f52647beb5 100644\n--- a/server/models/Collection.ts\n+++ b/server/models/Collection.ts\n@@ -14,7 +14,8 @@ import {\n   EmptyResultError,\n   type CreateOptions,\n   type UpdateOptions,\n-  ScopeOptions,\n+  type ScopeOptions,\n+  type SaveOptions,\n } from \""sequelize\"";\n import {\n   Sequelize,\n@@ -39,6 +40,7 @@ import {\n   BeforeCreate,\n   BeforeUpdate,\n   DefaultScope,\n+  AfterSave,\n } from \""sequelize-typescript\"";\n import isUUID from \""validator/lib/isUUID\"";\n import type { CollectionSort, ProsemirrorData } from \""@shared/types\"";\n@@ -48,6 +50,7 @@ import { sortNavigationNodes } from \""@shared/utils/collections\"";\n import slugify from \""@shared/utils/slugify\"";\n import { CollectionValidation } from \""@shared/validations\"";\n import { ValidationError } from \""@server/errors\"";\n+import { CacheHelper } from \""@server/utils/CacheHelper\"";\n import removeIndexCollision from \""@server/utils/removeIndexCollision\"";\n import { generateUrlId } from \""@server/utils/url\"";\n import { ValidateIndex } from \""@server/validation\"";\n@@ -334,6 +337,34 @@ class Collection extends ParanoidModel<\n     if (!model.content) {\n       model.content = await DocumentHelper.toJSON(model);\n     }\n+    if (model.changed(\""documentStructure\"")) {\n+      await CacheHelper.clearData(\n+        CacheHelper.getCollectionDocumentsKey(model.id)\n+      );\n+    }\n+  }\n+\n+  @AfterSave\n+  static async cacheDocumentStructure(\n+    model: Collection,\n+    options: SaveOptions<Collection>\n+  ) {\n+    if (model.changed(\""documentStructure\"")) {\n+      const setData = () =>\n+        CacheHelper.setData(\n+          CacheHelper.getCollectionDocumentsKey(model.id),\n+          model.documentStructure,\n+          60\n+        );\n+\n+      if (options.transaction) {\n+        return (options.transaction.parent || options.transaction).afterCommit(\n+          setData\n+        );\n+      }\n+\n+      await setData();\n+    }\n   }\n \n   @BeforeDestroy\n\ndiff --git a/server/routes/api/collections/collections.ts b/server/routes/api/collections/collections.ts\nindex 962eab139865..a74afc3bf01d 100644\n--- a/server/routes/api/collections/collections.ts\n+++ b/server/routes/api/collections/collections.ts\n@@ -38,6 +38,7 @@ import {\n   presentFileOperation,\n } from \""@server/presenters\"";\n import { APIContext } from \""@server/types\"";\n+import { CacheHelper } from \""@server/utils/CacheHelper\"";\n import { RateLimiterStrategy } from \""@server/utils/RateLimiter\"";\n import { collectionIndexing } from \""@server/utils/indexing\"";\n import pagination from \""../middlewares/pagination\"";\n@@ -143,13 +144,25 @@ router.post(\n     const { user } = ctx.state.auth;\n     const collection = await Collection.findByPk(id, {\n       userId: user.id,\n-      includeDocumentStructure: true,\n     });\n \n     authorize(user, \""readDocument\"", collection);\n \n+    const documentStructure = await CacheHelper.getDataOrSet(\n+      CacheHelper.getCollectionDocumentsKey(collection.id),\n+      async () =>\n+        (\n+          await Collection.findByPk(collection.id, {\n+            attributes: [\""documentStructure\""],\n+            includeDocumentStructure: true,\n+            rejectOnEmpty: true,\n+          })\n+        ).documentStructure,\n+      60\n+    );\n+\n     ctx.body = {\n-      data: collection.documentStructure || [],\n+      data: documentStructure || [],\n     };\n   }\n );\n\ndiff --git a/server/storage/__mocks__/redis.ts b/server/storage/__mocks__/redis.ts\nnew file mode 100644\nindex 000000000000..c0a349d4920d\n--- /dev/null\n+++ b/server/storage/__mocks__/redis.ts\n@@ -0,0 +1,47 @@\n+import { EventEmitter } from \""events\"";\n+\n+// Create a mock Redis client with all needed methods mocked\n+class RedisMock extends EventEmitter {\n+  constructor() {\n+    super();\n+  }\n+\n+  get = jest.fn().mockResolvedValue(null);\n+  set = jest.fn().mockResolvedValue(\""OK\"");\n+  del = jest.fn().mockResolvedValue(1);\n+  keys = jest.fn().mockResolvedValue([]);\n+  ping = jest.fn().mockResolvedValue(\""PONG\"");\n+  disconnect = jest.fn();\n+  setMaxListeners = jest.fn();\n+}\n+\n+// Mock the RedisAdapter class\n+class RedisAdapter extends RedisMock {\n+  constructor(_url: string | undefined, _options = {}) {\n+    super();\n+  }\n+\n+  private static client: RedisAdapter;\n+  private static subscriber: RedisAdapter;\n+\n+  public static get defaultClient(): RedisAdapter {\n+    return (\n+      this.client ||\n+      (this.client = new this(undefined, {\n+        connectionNameSuffix: \""client\"",\n+      }))\n+    );\n+  }\n+\n+  public static get defaultSubscriber(): RedisAdapter {\n+    return (\n+      this.subscriber ||\n+      (this.subscriber = new this(undefined, {\n+        maxRetriesPerRequest: null,\n+        connectionNameSuffix: \""subscriber\"",\n+      }))\n+    );\n+  }\n+}\n+\n+export default RedisAdapter;\n\ndiff --git a/server/utils/CacheHelper.ts b/server/utils/CacheHelper.ts\nindex 9748ff16e116..bce71c404fef 100644\n--- a/server/utils/CacheHelper.ts\n+++ b/server/utils/CacheHelper.ts\n@@ -125,4 +125,8 @@ export class CacheHelper {\n   public static getUnfurlKey(teamId: string, url = \""\"") {\n     return `unfurl:${teamId}:${url}`;\n   }\n+\n+  public static getCollectionDocumentsKey(collectionId: string) {\n+    return `cd:${collectionId}`;\n+  }\n }\n\ndiff --git a/server/utils/__mocks__/CacheHelper.ts b/server/utils/__mocks__/CacheHelper.ts\nnew file mode 100644\nindex 000000000000..178aac75b99f\n--- /dev/null\n+++ b/server/utils/__mocks__/CacheHelper.ts\n@@ -0,0 +1,54 @@\n+import { Day } from \""@shared/utils/time\"";\n+\n+/**\n+ * A Mock Helper class for server-side cache management\n+ */\n+export class CacheHelper {\n+  // Default expiry time for cache data in seconds\n+  private static defaultDataExpiry = Day.seconds;\n+\n+  /**\n+   * Mocked method that resolves with the callback result\n+   */\n+  public static async getDataOrSet<T>(\n+    key: string,\n+    callback: () => Promise<T | undefined>,\n+    _expiry: number,\n+    _lockTimeout: number\n+  ): Promise<T | undefined> {\n+    return await callback();\n+  }\n+\n+  /**\n+   * Mocked method that resolves with undefined\n+   */\n+  public static async getData<T>(_key: string): Promise<T | undefined> {\n+    return undefined;\n+  }\n+\n+  /**\n+   * Mocked method that resolves with void\n+   */\n+  public static async setData<T>(_key: string, _data: T, _expiry?: number) {\n+    return;\n+  }\n+\n+  /**\n+   * Mocked method that resolves with void\n+   */\n+  public static async clearData(_prefix: string) {\n+    return;\n+  }\n+\n+  /**\n+   * These are real methods that don't require mocking as they don't\n+   * interact with Redis directly\n+   */\n+  public static getUnfurlKey(teamId: string, url = \""\"") {\n+    return `unfurl:${teamId}:${url}`;\n+  }\n+\n+  public static getCollectionDocumentsKey(collectionId: string) {\n+    return `cd:${collectionId}`;\n+  }\n+}\n\ndiff --git a/server/utils/__mocks__/MutexLock.ts b/server/utils/__mocks__/MutexLock.ts\nnew file mode 100644\nindex 000000000000..df106fd325f8\n--- /dev/null\n+++ b/server/utils/__mocks__/MutexLock.ts\n@@ -0,0 +1,18 @@\n+export class MutexLock {\n+  // Default expiry time for acquiring lock in milliseconds\n+  public static defaultLockTimeout = 4000;\n+\n+  /**\n+   * Returns the mock redlock instance\n+   */\n+  public static get lock() {\n+    return {\n+      acquire: jest.fn().mockResolvedValue({\n+        release: jest.fn().mockResolvedValue(true),\n+        expiration: Date.now() + 10000,\n+      }),\n+    };\n+  }\n+\n+  private static redlock: any;\n+}\n\ndiff --git a/yarn.lock b/yarn.lock\nindex a86baa27d393..36e61a04ed39 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -4136,18 +4136,7 @@\n     \""@smithy/util-utf8\"" \""^4.0.0\""\n     tslib \""^2.6.2\""\n \n-\""@smithy/credential-provider-imds@^4.0.2\"":\n-  version \""4.0.2\""\n-  resolved \""https://registry.yarnpkg.com/@smithy/credential-provider-imds/-/credential-provider-imds-4.0.2.tgz#1ec34a04842fa69996b151a695b027f0486c69a8\""\n-  integrity sha512-32lVig6jCaWBHnY+OEQ6e6Vnt5vDHaLiydGrwYMW9tPqO688hPGTYRamYJ1EptxEC2rAwJrHWmPoKRBl4iTa8w==\n-  dependencies:\n-    \""@smithy/node-config-provider\"" \""^4.0.2\""\n-    \""@smithy/property-provider\"" \""^4.0.2\""\n-    \""@smithy/types\"" \""^4.2.0\""\n-    \""@smithy/url-parser\"" \""^4.0.2\""\n-    tslib \""^2.6.2\""\n-\n-\""@smithy/credential-provider-imds@^4.0.4\"":\n+\""@smithy/credential-provider-imds@^4.0.2\"", \""@smithy/credential-provider-imds@^4.0.4\"":\n   version \""4.0.4\""\n   resolved \""https://registry.yarnpkg.com/@smithy/credential-provider-imds/-/credential-provider-imds-4.0.4.tgz#01315ab90c4cb3e017c1ee2c6e5f958aeaa7cf78\""\n   integrity sha512-jN6M6zaGVyB8FmNGG+xOPQB4N89M1x97MMdMnm1ESjljLS3Qju/IegQizKujaNcy2vXAvrz0en8bobe6E55FEA==\n"", ""test_patch"": ""diff --git a/server/test/setup.ts b/server/test/setup.ts\nindex 07f0ca917668..8e4e38aad0d7 100644\n--- a/server/test/setup.ts\n+++ b/server/test/setup.ts\n@@ -7,6 +7,11 @@ require(\""@server/storage/database\"");\n \n jest.mock(\""bull\"");\n \n+// Enable mocks for Redis-related modules\n+jest.mock(\""@server/storage/redis\"");\n+jest.mock(\""@server/utils/MutexLock\"");\n+jest.mock(\""@server/utils/CacheHelper\"");\n+\n // This is needed for the relative manual mock to be picked up\n jest.mock(\""../queues\"");\n \n@@ -34,7 +39,9 @@ jest.mock(\""@aws-sdk/s3-request-presigner\"", () => ({\n   getSignedUrl: jest.fn(),\n }));\n \n-afterAll(() => Redis.defaultClient.disconnect());\n+afterAll(() => {\n+  Redis.defaultClient.disconnect();\n+});\n \n beforeEach(() => {\n   env.URL = sharedEnv.URL = \""https://app.outline.dev\"";\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9193"", ""pr_id"": 9193, ""issue_id"": 8880, ""repo"": ""outline/outline"", ""problem_statement"": ""Add cache for document structure\nWe can add a short redis cache for storing the collection structure.\n\nThere are only a couple of very defined points where this is updated and it can get quite large, making it a good candidate for caching in large workspaces."", ""issue_word_count"": 41, ""test_files_count"": 2, ""non_test_files_count"": 16, ""pr_changed_files"": [""plugins/slack/server/auth/slack.ts"", ""server/commands/documentLoader.ts"", ""server/commands/documentMover.ts"", ""server/models/Collection.ts"", ""server/models/Document.ts"", ""server/policies/collection.test.ts"", ""server/queues/processors/WebsocketsProcessor.ts"", ""server/queues/tasks/CollectionSubscriptionRemoveUserTask.ts"", ""server/routes/api/collections/collections.ts"", ""server/routes/api/comments/comments.ts"", ""server/routes/api/documents/documents.ts"", ""server/routes/api/events/events.ts"", ""server/routes/api/pins/pins.ts"", ""server/routes/api/shares/shares.ts"", ""server/routes/api/stars/stars.ts"", ""server/routes/api/subscriptions/subscriptions.ts"", ""server/services/websockets.ts"", ""server/test/factories.ts""], ""pr_changed_test_files"": [""server/policies/collection.test.ts"", ""server/test/factories.ts""], ""base_commit"": ""fcc73e772b6d9b956be6a92f2fc62341fa2259a5"", ""head_commit"": ""d5dae10a16de829ca5b7db8cc9653e85d2931a47"", ""repo_url"": ""https://github.com/outline/outline/pull/9193"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9193"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-14T04:05:46.000Z"", ""patch"": ""diff --git a/plugins/slack/server/auth/slack.ts b/plugins/slack/server/auth/slack.ts\nindex e70319335301..60c343d9ad23 100644\n--- a/plugins/slack/server/auth/slack.ts\n+++ b/plugins/slack/server/auth/slack.ts\n@@ -156,9 +156,9 @@ if (env.SLACK_CLIENT_ID && env.SLACK_CLIENT_SECRET) {\n \n       switch (type) {\n         case IntegrationType.Post: {\n-          const collection = await Collection.scope({\n-            method: [\""withMembership\"", user.id],\n-          }).findByPk(collectionId);\n+          const collection = await Collection.findByPk(collectionId, {\n+            userId: user.id,\n+          });\n           authorize(user, \""read\"", collection);\n           authorize(user, \""update\"", user.team);\n \n\ndiff --git a/server/commands/documentLoader.ts b/server/commands/documentLoader.ts\nindex 4b717f0a4072..f937804b2391 100644\n--- a/server/commands/documentLoader.ts\n+++ b/server/commands/documentLoader.ts\n@@ -116,12 +116,10 @@ export default async function loadDocument({\n \n     if (canReadDocument) {\n       if (document.collectionId) {\n-        collection = await Collection.scope(\""withDocumentStructure\"").findByPk(\n-          document.collectionId,\n-          {\n-            rejectOnEmpty: true,\n-          }\n-        );\n+        collection = await Collection.findByPk(document.collectionId, {\n+          includeDocumentStructure: true,\n+          rejectOnEmpty: true,\n+        });\n       }\n \n       return {\n@@ -140,12 +138,10 @@ export default async function loadDocument({\n \n     // It is possible to disable sharing at the collection so we must check\n     if (document.collectionId) {\n-      collection = await Collection.scope(\""withDocumentStructure\"").findByPk(\n-        document.collectionId,\n-        {\n-          rejectOnEmpty: true,\n-        }\n-      );\n+      collection = await Collection.findByPk(document.collectionId, {\n+        includeDocumentStructure: true,\n+        rejectOnEmpty: true,\n+      });\n     }\n \n     if (!collection?.sharing) {\n\ndiff --git a/server/commands/documentMover.ts b/server/commands/documentMover.ts\nindex 76a3a947d361..f09f6c361d35 100644\n--- a/server/commands/documentMover.ts\n+++ b/server/commands/documentMover.ts\n@@ -65,21 +65,18 @@ async function documentMover({\n     result.documents.push(document);\n   } else {\n     // Load the current and the next collection upfront and lock them\n-    const collection = await Collection.scope(\""withDocumentStructure\"").findByPk(\n-      document.collectionId!,\n-      {\n-        transaction,\n-        lock: Transaction.LOCK.UPDATE,\n-        paranoid: false,\n-      }\n-    );\n+    const collection = await Collection.findByPk(document.collectionId!, {\n+      includeDocumentStructure: true,\n+      transaction,\n+      lock: Transaction.LOCK.UPDATE,\n+      paranoid: false,\n+    });\n \n     let newCollection = collection;\n     if (collectionChanged) {\n       if (collectionId) {\n-        newCollection = await Collection.scope(\n-          \""withDocumentStructure\""\n-        ).findByPk(collectionId, {\n+        newCollection = await Collection.findByPk(collectionId, {\n+          includeDocumentStructure: true,\n           transaction,\n           lock: Transaction.LOCK.UPDATE,\n         });\n@@ -148,13 +145,11 @@ async function documentMover({\n \n       if (collectionId) {\n         // Reload the collection to get relationship data\n-        newCollection = await Collection.scope([\n-          {\n-            method: [\""withMembership\"", user.id],\n-          },\n-        ]).findByPk(collectionId, {\n-          transaction,\n+        newCollection = await Collection.findByPk(collectionId, {\n+          userId: user.id,\n+          includeDocumentStructure: true,\n           rejectOnEmpty: true,\n+          transaction,\n         });\n \n         result.collections.push(newCollection);\n\ndiff --git a/server/models/Collection.ts b/server/models/Collection.ts\nindex a388a1784445..90432f764ade 100644\n--- a/server/models/Collection.ts\n+++ b/server/models/Collection.ts\n@@ -67,6 +67,8 @@ import Length from \""./validators/Length\"";\n import NotContainsUrl from \""./validators/NotContainsUrl\"";\n \n type AdditionalFindOptions = {\n+  userId?: string;\n+  includeDocumentStructure?: boolean;\n   rejectOnEmpty?: boolean | Error;\n };\n \n@@ -466,9 +468,9 @@ class Collection extends ParanoidModel<\n    * @returns userIds\n    */\n   static async membershipUserIds(collectionId: string) {\n-    const collection = await this.scope(\""withAllMemberships\"").findByPk(\n-      collectionId\n-    );\n+    const collection = await this.scope(\""withAllMemberships\"").findOne({\n+      where: { id: collectionId },\n+    });\n     if (!collection) {\n       return [];\n     }\n@@ -485,6 +487,7 @@ class Collection extends ParanoidModel<\n \n   /**\n    * Overrides the standard findByPk behavior to allow also querying by urlId\n+   * and loading memberships for a user passed in by `userId`\n    *\n    * @param id uuid or urlId\n    * @param options FindOptions\n@@ -506,16 +509,25 @@ class Collection extends ParanoidModel<\n       return null;\n     }\n \n+    const { includeDocumentStructure, userId, ...rest } = options;\n+\n+    const scope = this.scope([\n+      includeDocumentStructure ? \""withDocumentStructure\"" : \""defaultScope\"",\n+      {\n+        method: [\""withMembership\"", userId],\n+      },\n+    ]);\n+\n     if (isUUID(id)) {\n-      const collection = await this.findOne({\n+      const collection = await scope.findOne({\n         where: {\n           id,\n         },\n-        ...options,\n+        ...rest,\n         rejectOnEmpty: false,\n       });\n \n-      if (!collection && options.rejectOnEmpty) {\n+      if (!collection && rest.rejectOnEmpty) {\n         throw new EmptyResultError(`Collection doesn't exist with id: ${id}`);\n       }\n \n@@ -524,7 +536,7 @@ class Collection extends ParanoidModel<\n \n     const match = id.match(UrlHelper.SLUG_URL_REGEX);\n     if (match) {\n-      const collection = await this.findOne({\n+      const collection = await scope.findOne({\n         where: {\n           urlId: match[1],\n         },\n@@ -532,7 +544,7 @@ class Collection extends ParanoidModel<\n         rejectOnEmpty: false,\n       });\n \n-      if (!collection && options.rejectOnEmpty) {\n+      if (!collection && rest.rejectOnEmpty) {\n         throw new EmptyResultError(`Collection doesn't exist with id: ${id}`);\n       }\n \n\ndiff --git a/server/models/Document.ts b/server/models/Document.ts\nindex 4afc58bf3d9a..ae9f4df6c13a 100644\n--- a/server/models/Document.ts\n+++ b/server/models/Document.ts\n@@ -426,13 +426,11 @@ class Document extends ArchivableModel<\n       return;\n     }\n \n-    const collection = await Collection.scope(\""withDocumentStructure\"").findByPk(\n-      model.collectionId,\n-      {\n-        transaction,\n-        lock: Transaction.LOCK.UPDATE,\n-      }\n-    );\n+    const collection = await Collection.findByPk(model.collectionId, {\n+      includeDocumentStructure: true,\n+      transaction,\n+      lock: Transaction.LOCK.UPDATE,\n+    });\n     if (!collection) {\n       return;\n     }\n@@ -453,9 +451,8 @@ class Document extends ArchivableModel<\n     }\n \n     return this.sequelize!.transaction(async (transaction: Transaction) => {\n-      const collection = await Collection.scope(\n-        \""withDocumentStructure\""\n-      ).findByPk(model.collectionId!, {\n+      const collection = await Collection.findByPk(model.collectionId!, {\n+        includeDocumentStructure: true,\n         transaction,\n         lock: transaction.LOCK.UPDATE,\n       });\n@@ -667,10 +664,11 @@ class Document extends ArchivableModel<\n \n   /**\n    * Overrides the standard findByPk behavior to allow also querying by urlId\n+   * and loading memberships for a user passed in by `userId`\n    *\n    * @param id uuid or urlId\n    * @param options FindOptions\n-   * @returns A promise resolving to a collection instance or null\n+   * @returns A promise resolving to a document instance or null\n    */\n   static async findByPk(\n     id: Identifier,\n@@ -695,7 +693,7 @@ class Document extends ArchivableModel<\n     // almost every endpoint needs the collection membership to determine policy permissions.\n     const scope = this.scope([\n       \""withDrafts\"",\n-      options.includeState ? \""withState\"" : \""withoutState\"",\n+      includeState ? \""withState\"" : \""withoutState\"",\n       {\n         method: [\""withViews\"", userId],\n       },\n@@ -943,9 +941,8 @@ class Document extends ArchivableModel<\n     }\n \n     if (!this.template && this.collectionId) {\n-      const collection = await Collection.scope(\n-        \""withDocumentStructure\""\n-      ).findByPk(this.collectionId, {\n+      const collection = await Collection.findByPk(this.collectionId, {\n+        includeDocumentStructure: true,\n         transaction,\n         lock: Transaction.LOCK.UPDATE,\n       });\n@@ -1012,13 +1009,11 @@ class Document extends ArchivableModel<\n \n     await this.sequelize.transaction(async (transaction: Transaction) => {\n       const collection = this.collectionId\n-        ? await Collection.scope(\""withDocumentStructure\"").findByPk(\n-            this.collectionId,\n-            {\n-              transaction,\n-              lock: transaction.LOCK.UPDATE,\n-            }\n-          )\n+        ? await Collection.findByPk(this.collectionId, {\n+            includeDocumentStructure: true,\n+            transaction,\n+            lock: transaction.LOCK.UPDATE,\n+          })\n         : undefined;\n \n       if (collection) {\n@@ -1049,13 +1044,11 @@ class Document extends ArchivableModel<\n   archive = async (user: User, options?: FindOptions) => {\n     const { transaction } = { ...options };\n     const collection = this.collectionId\n-      ? await Collection.scope(\""withDocumentStructure\"").findByPk(\n-          this.collectionId,\n-          {\n-            transaction,\n-            lock: transaction?.LOCK.UPDATE,\n-          }\n-        )\n+      ? await Collection.findByPk(this.collectionId, {\n+          includeDocumentStructure: true,\n+          transaction,\n+          lock: transaction?.LOCK.UPDATE,\n+        })\n       : undefined;\n \n     if (collection) {\n@@ -1076,7 +1069,8 @@ class Document extends ArchivableModel<\n   ) => {\n     const { transaction } = { ...options };\n     const collection = collectionId\n-      ? await Collection.scope(\""withDocumentStructure\"").findByPk(collectionId, {\n+      ? await Collection.findByPk(collectionId, {\n+          includeDocumentStructure: true,\n           transaction,\n           lock: transaction?.LOCK.UPDATE,\n         })\n@@ -1128,9 +1122,8 @@ class Document extends ArchivableModel<\n       let deleted = false;\n \n       if (!this.template && this.collectionId) {\n-        const collection = await Collection.scope(\n-          \""withDocumentStructure\""\n-        ).findByPk(this.collectionId!, {\n+        const collection = await Collection.findByPk(this.collectionId!, {\n+          includeDocumentStructure: true,\n           transaction,\n           lock: transaction.LOCK.UPDATE,\n           paranoid: false,\n\ndiff --git a/server/queues/processors/WebsocketsProcessor.ts b/server/queues/processors/WebsocketsProcessor.ts\nindex cda612faced7..0ffb730bffc1 100644\n--- a/server/queues/processors/WebsocketsProcessor.ts\n+++ b/server/queues/processors/WebsocketsProcessor.ts\n@@ -353,9 +353,9 @@ export default class WebsocketsProcessor {\n \n       case \""collections.remove_user\"": {\n         const [collection, user] = await Promise.all([\n-          Collection.scope({\n-            method: [\""withMembership\"", event.userId],\n-          }).findByPk(event.collectionId),\n+          Collection.findByPk(event.collectionId, {\n+            userId: event.userId,\n+          }),\n           User.findByPk(event.userId),\n         ]);\n         if (!user) {\n@@ -424,9 +424,9 @@ export default class WebsocketsProcessor {\n           async (groupUsers) => {\n             for (const groupUser of groupUsers) {\n               const [collection, user] = await Promise.all([\n-                Collection.scope({\n-                  method: [\""withMembership\"", groupUser.userId],\n-                }).findByPk(event.collectionId),\n+                Collection.findByPk(event.collectionId, {\n+                  userId: groupUser.userId,\n+                }),\n                 User.findByPk(groupUser.userId),\n               ]);\n               if (!user) {\n@@ -716,9 +716,12 @@ export default class WebsocketsProcessor {\n                   presentGroupMembership(groupMembership)\n                 );\n \n-              const collection = await Collection.scope({\n-                method: [\""withMembership\"", event.userId],\n-              }).findByPk(groupMembership.collectionId);\n+              const collection = await Collection.findByPk(\n+                groupMembership.collectionId,\n+                {\n+                  userId: event.userId,\n+                }\n+              );\n \n               if (cannot(user, \""read\"", collection)) {\n                 // tell any user clients to disconnect from the websocket channel for the collection\n@@ -772,9 +775,12 @@ export default class WebsocketsProcessor {\n                     .to(`user-${groupUser.userId}`)\n                     .emit(\""collections.remove_group\"", payload);\n \n-                  const collection = await Collection.scope({\n-                    method: [\""withMembership\"", groupUser.userId],\n-                  }).findByPk(groupMembership.collectionId);\n+                  const collection = await Collection.findByPk(\n+                    groupMembership.collectionId,\n+                    {\n+                      userId: groupUser.userId,\n+                    }\n+                  );\n \n                   if (cannot(groupUser.user, \""read\"", collection)) {\n                     // tell any user clients to disconnect from the websocket channel for the collection\n\ndiff --git a/server/queues/tasks/CollectionSubscriptionRemoveUserTask.ts b/server/queues/tasks/CollectionSubscriptionRemoveUserTask.ts\nindex 3048673171eb..a0f1d48eb0de 100644\n--- a/server/queues/tasks/CollectionSubscriptionRemoveUserTask.ts\n+++ b/server/queues/tasks/CollectionSubscriptionRemoveUserTask.ts\n@@ -16,9 +16,9 @@ export default class CollectionSubscriptionRemoveUserTask extends BaseTask<Colle\n       return;\n     }\n \n-    const collection = await Collection.scope({\n-      method: [\""withMembership\"", user.id],\n-    }).findByPk(event.collectionId);\n+    const collection = await Collection.findByPk(event.collectionId, {\n+      userId: user.id,\n+    });\n \n     if (can(user, \""read\"", collection)) {\n       Logger.debug(\n\ndiff --git a/server/routes/api/collections/collections.ts b/server/routes/api/collections/collections.ts\nindex dadd2eecf653..962eab139865 100644\n--- a/server/routes/api/collections/collections.ts\n+++ b/server/routes/api/collections/collections.ts\n@@ -1,4 +1,3 @@\n-import invariant from \""invariant\"";\n import Router from \""koa-router\"";\n import { Sequelize, Op, WhereOptions } from \""sequelize\"";\n import {\n@@ -96,12 +95,11 @@ router.post(\n       },\n     });\n     // we must reload the collection to get memberships for policy presenter\n-    const reloaded = await Collection.scope({\n-      method: [\""withMembership\"", user.id],\n-    }).findByPk(collection.id, {\n+    const reloaded = await Collection.findByPk(collection.id, {\n+      userId: user.id,\n       transaction,\n+      rejectOnEmpty: true,\n     });\n-    invariant(reloaded, \""collection not found\"");\n \n     ctx.body = {\n       data: await presentCollection(ctx, reloaded),\n@@ -118,11 +116,14 @@ router.post(\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const collection = await Collection.scope([\n+      \""defaultScope\"",\n+      \""withArchivedBy\"",\n       {\n         method: [\""withMembership\"", user.id],\n       },\n-      \""withArchivedBy\"",\n-    ]).findByPk(id);\n+    ]).findOne({\n+      where: { id },\n+    });\n \n     authorize(user, \""read\"", collection);\n \n@@ -140,11 +141,10 @@ router.post(\n   async (ctx: APIContext<T.CollectionsDocumentsReq>) => {\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n-    const collection = await Collection.scope([\n-      {\n-        method: [\""withMembership\"", user.id],\n-      },\n-    ]).findByPk(id);\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n+      includeDocumentStructure: true,\n+    });\n \n     authorize(user, \""readDocument\"", collection);\n \n@@ -201,9 +201,7 @@ router.post(\n     const { user } = ctx.state.auth;\n \n     const [collection, group] = await Promise.all([\n-      Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(id, { transaction }),\n+      Collection.findByPk(id, { userId: user.id, transaction }),\n       Group.findByPk(groupId, { transaction }),\n     ]);\n     authorize(user, \""update\"", collection);\n@@ -248,9 +246,8 @@ router.post(\n     const { transaction } = ctx.state;\n \n     const [collection, group] = await Promise.all([\n-      Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(id, {\n+      Collection.findByPk(id, {\n+        userId: user.id,\n         transaction,\n       }),\n       Group.findByPk(groupId, {\n@@ -286,9 +283,9 @@ router.post(\n     const { id, query, permission } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.scope({\n-      method: [\""withMembership\"", user.id],\n-    }).findByPk(id);\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n+    });\n     authorize(user, \""read\"", collection);\n \n     let where: WhereOptions<GroupMembership> = {\n@@ -356,9 +353,7 @@ router.post(\n     const { id, userId, permission } = ctx.input.body;\n \n     const [collection, user] = await Promise.all([\n-      Collection.scope({\n-        method: [\""withMembership\"", actor.id],\n-      }).findByPk(id, { transaction }),\n+      Collection.findByPk(id, { userId, transaction }),\n       User.findByPk(userId, { transaction }),\n     ]);\n     authorize(actor, \""update\"", collection);\n@@ -402,9 +397,7 @@ router.post(\n     const { id, userId } = ctx.input.body;\n \n     const [collection, user] = await Promise.all([\n-      Collection.scope({\n-        method: [\""withMembership\"", actor.id],\n-      }).findByPk(id, { transaction }),\n+      Collection.findByPk(id, { userId, transaction }),\n       User.findByPk(userId, { transaction }),\n     ]);\n     authorize(actor, \""update\"", collection);\n@@ -435,9 +428,9 @@ router.post(\n     const { id, query, permission } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.scope({\n-      method: [\""withMembership\"", user.id],\n-    }).findByPk(id);\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n+    });\n     authorize(user, \""read\"", collection);\n \n     let where: WhereOptions<UserMembership> = {\n@@ -503,9 +496,10 @@ router.post(\n     const team = await Team.findByPk(user.teamId, { transaction });\n     authorize(user, \""createExport\"", team);\n \n-    const collection = await Collection.scope({\n-      method: [\""withMembership\"", user.id],\n-    }).findByPk(id, { transaction });\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n+      transaction,\n+    });\n     authorize(user, \""export\"", collection);\n \n     const fileOperation = await collectionExporter({\n@@ -576,9 +570,8 @@ router.post(\n     } = ctx.input.body;\n \n     const { user } = ctx.state.auth;\n-    const collection = await Collection.scope({\n-      method: [\""withMembership\"", user.id],\n-    }).findByPk(id, {\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n       transaction,\n     });\n     authorize(user, \""update\"", collection);\n@@ -814,9 +807,8 @@ router.post(\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.scope({\n-      method: [\""withMembership\"", user.id],\n-    }).findByPk(id, {\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n       transaction,\n     });\n \n@@ -845,11 +837,8 @@ router.post(\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.scope([\n-      {\n-        method: [\""withMembership\"", user.id],\n-      },\n-    ]).findByPk(id, {\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n       transaction,\n       rejectOnEmpty: true,\n     });\n@@ -905,11 +894,11 @@ router.post(\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.scope({\n-      method: [\""withMembership\"", user.id],\n-    }).findByPk(id, {\n-      transaction,\n+    const collection = await Collection.findByPk(id, {\n+      userId: user.id,\n+      includeDocumentStructure: true,\n       rejectOnEmpty: true,\n+      transaction,\n     });\n \n     authorize(user, \""restore\"", collection);\n\ndiff --git a/server/routes/api/comments/comments.ts b/server/routes/api/comments/comments.ts\nindex 6b86a3d0e7d7..f864bf8ac9d9 100644\n--- a/server/routes/api/comments/comments.ts\n+++ b/server/routes/api/comments/comments.ts\n@@ -154,7 +154,9 @@ router.post(\n       ]);\n       comments.forEach((comment) => (comment.document = document));\n     } else if (collectionId) {\n-      const collection = await Collection.findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n       authorize(user, \""read\"", collection);\n       const include = [\n         {\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 1ddda20176e2..76d288bfd6eb 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -133,12 +133,10 @@ router.post(\n     // if a specific collection is passed then we need to check auth to view it\n     if (collectionId) {\n       where[Op.and].push({ collectionId: [collectionId] });\n-      const collection = await Collection.scope([\n-        sort === \""index\"" ? \""withDocumentStructure\"" : \""defaultScope\"",\n-        {\n-          method: [\""withMembership\"", user.id],\n-        },\n-      ]).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+        includeDocumentStructure: sort === \""index\"",\n+      });\n \n       authorize(user, \""readDocument\"", collection);\n \n@@ -331,9 +329,9 @@ router.post(\n     // if a specific collection is passed then we need to check auth to view it\n     if (collectionId) {\n       where = { ...where, collectionId };\n-      const collection = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n       authorize(user, \""readDocument\"", collection);\n \n       // index sort is special because it uses the order of the documents in the\n@@ -512,9 +510,9 @@ router.post(\n     const { user } = ctx.state.auth;\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n       authorize(user, \""readDocument\"", collection);\n     }\n \n@@ -821,15 +819,20 @@ router.post(\n     const destCollectionId = collectionId ?? sourceCollectionId;\n \n     const srcCollection = sourceCollectionId\n-      ? await Collection.scope({\n-          method: [\""withMembership\"", user.id],\n-        }).findByPk(sourceCollectionId, { paranoid: false })\n+      ? await Collection.findByPk(sourceCollectionId, {\n+          userId: user.id,\n+          includeDocumentStructure: true,\n+          paranoid: false,\n+          transaction,\n+        })\n       : undefined;\n \n     const destCollection = destCollectionId\n-      ? await Collection.scope({\n-          method: [\""withMembership\"", user.id],\n-        }).findByPk(destCollectionId)\n+      ? await Collection.findByPk(destCollectionId, {\n+          userId: user.id,\n+          includeDocumentStructure: true,\n+          transaction,\n+        })\n       : undefined;\n \n     // In case of workspace templates, both source and destination collections are undefined.\n@@ -931,9 +934,9 @@ router.post(\n     let collaboratorIds = undefined;\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n       authorize(user, \""readDocument\"", collection);\n     }\n \n@@ -1027,9 +1030,9 @@ router.post(\n       teamId = user.teamId;\n \n       if (collectionId) {\n-        const collection = await Collection.scope({\n-          method: [\""withMembership\"", user.id],\n-        }).findByPk(collectionId);\n+        const collection = await Collection.findByPk(collectionId, {\n+          userId: user.id,\n+        });\n         authorize(user, \""readDocument\"", collection);\n       }\n \n@@ -1118,9 +1121,10 @@ router.post(\n     authorize(user, \""update\"", original);\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collectionId, { transaction });\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+        transaction,\n+      });\n       authorize(user, \""createDocument\"", collection);\n     } else {\n       authorize(user, \""createTemplate\"", user.team);\n@@ -1205,9 +1209,10 @@ router.post(\n           collectionId,\n           \""collectionId is required to publish a draft without collection\""\n         );\n-        collection = await Collection.scope({\n-          method: [\""withMembership\"", user.id],\n-        }).findByPk(collectionId!, { transaction });\n+        collection = await Collection.findByPk(collectionId!, {\n+          userId: user.id,\n+          transaction,\n+        });\n       }\n \n       if (document.parentDocumentId) {\n@@ -1261,9 +1266,10 @@ router.post(\n     authorize(user, \""read\"", document);\n \n     const collection = collectionId\n-      ? await Collection.scope({\n-          method: [\""withMembership\"", user.id],\n-        }).findByPk(collectionId, { transaction })\n+      ? await Collection.findByPk(collectionId, {\n+          userId: user.id,\n+          transaction,\n+        })\n       : document?.collection;\n \n     if (collection) {\n@@ -1323,9 +1329,10 @@ router.post(\n     authorize(user, \""move\"", document);\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collectionId, { transaction });\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+        transaction,\n+      });\n       authorize(user, \""updateDocument\"", collection);\n     } else if (document.template) {\n       authorize(user, \""updateTemplate\"", user.team);\n@@ -1503,13 +1510,8 @@ router.post(\n     const file = ctx.input.file;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.scope({\n-      method: [\""withMembership\"", user.id],\n-    }).findOne({\n-      where: {\n-        id: collectionId,\n-        teamId: user.teamId,\n-      },\n+    const collection = await Collection.findByPk(collectionId, {\n+      userId: user.id,\n     });\n     authorize(user, \""createDocument\"", collection);\n     let parentDocument;\n@@ -1606,14 +1608,8 @@ router.post(\n       });\n \n       if (parentDocument?.collectionId) {\n-        collection = await Collection.scope({\n-          method: [\""withMembership\"", user.id],\n-        }).findOne({\n-          where: {\n-            id: parentDocument.collectionId,\n-            teamId: user.teamId,\n-          },\n-          transaction,\n+        collection = await Collection.findByPk(parentDocument.collectionId, {\n+          userId: user.id,\n         });\n       }\n \n@@ -1621,13 +1617,8 @@ router.post(\n         collection,\n       });\n     } else if (collectionId) {\n-      collection = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findOne({\n-        where: {\n-          id: collectionId,\n-          teamId: user.teamId,\n-        },\n+      collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n         transaction,\n       });\n       authorize(user, \""createDocument\"", collection);\n\ndiff --git a/server/routes/api/events/events.ts b/server/routes/api/events/events.ts\nindex d12207f63fb5..ce1c2394dafa 100644\n--- a/server/routes/api/events/events.ts\n+++ b/server/routes/api/events/events.ts\n@@ -61,9 +61,9 @@ router.post(\n     if (collectionId) {\n       where = { ...where, collectionId };\n \n-      const collection = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n       authorize(user, \""read\"", collection);\n     } else {\n       const collectionIds = await user.collectionIds({\n\ndiff --git a/server/routes/api/pins/pins.ts b/server/routes/api/pins/pins.ts\nindex 633549d0b52b..6e0cb61591f6 100644\n--- a/server/routes/api/pins/pins.ts\n+++ b/server/routes/api/pins/pins.ts\n@@ -33,9 +33,10 @@ router.post(\n     authorize(user, \""read\"", document);\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collectionId, { transaction });\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+        transaction,\n+      });\n       authorize(user, \""update\"", collection);\n       authorize(user, \""pin\"", document);\n     } else {\n\ndiff --git a/server/routes/api/shares/shares.ts b/server/routes/api/shares/shares.ts\nindex b782446d89bf..1d3eed3bc02a 100644\n--- a/server/routes/api/shares/shares.ts\n+++ b/server/routes/api/shares/shares.ts\n@@ -55,9 +55,10 @@ router.post(\n       authorize(user, \""read\"", document);\n \n       const collection = document.collectionId\n-        ? await Collection.scope(\""withDocumentStructure\"").findByPk(\n-            document.collectionId\n-          )\n+        ? await Collection.findByPk(document.collectionId, {\n+            userId: user.id,\n+            includeDocumentStructure: true,\n+          })\n         : undefined;\n       const parentIds = collection?.getDocumentParents(documentId);\n       const parentShare = parentIds\n\ndiff --git a/server/routes/api/stars/stars.ts b/server/routes/api/stars/stars.ts\nindex 533446162aa3..f34fd7558e4a 100644\n--- a/server/routes/api/stars/stars.ts\n+++ b/server/routes/api/stars/stars.ts\n@@ -37,9 +37,10 @@ router.post(\n     }\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collectionId, { transaction });\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+        transaction,\n+      });\n       authorize(user, \""star\"", collection);\n     }\n \n\ndiff --git a/server/routes/api/subscriptions/subscriptions.ts b/server/routes/api/subscriptions/subscriptions.ts\nindex 78d1017fc8ce..650b57f01f90 100644\n--- a/server/routes/api/subscriptions/subscriptions.ts\n+++ b/server/routes/api/subscriptions/subscriptions.ts\n@@ -34,9 +34,10 @@ router.post(\n     };\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+        transaction: ctx.state.transaction,\n+      });\n       authorize(user, \""read\"", collection);\n \n       where.collectionId = collectionId;\n@@ -78,9 +79,9 @@ router.post(\n     };\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n       authorize(user, \""read\"", collection);\n \n       where.collectionId = collectionId;\n@@ -116,9 +117,9 @@ router.post(\n     const { event, collectionId, documentId } = ctx.input.body;\n \n     if (collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collectionId);\n+      const collection = await Collection.findByPk(collectionId, {\n+        userId: user.id,\n+      });\n \n       authorize(user, \""subscribe\"", collection);\n     } else {\n\ndiff --git a/server/services/websockets.ts b/server/services/websockets.ts\nindex 5d19a2e086b8..9b45433dbf95 100644\n--- a/server/services/websockets.ts\n+++ b/server/services/websockets.ts\n@@ -191,9 +191,9 @@ async function authenticated(io: IO.Server, socket: SocketWithAuth) {\n     // user is joining a collection channel, because their permissions have\n     // changed, granting them access.\n     if (event.collectionId) {\n-      const collection = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(event.collectionId);\n+      const collection = await Collection.findByPk(event.collectionId, {\n+        userId: user.id,\n+      });\n \n       if (can(user, \""read\"", collection)) {\n         await socket.join(`collection-${event.collectionId}`);\n"", ""test_patch"": ""diff --git a/server/policies/collection.test.ts b/server/policies/collection.test.ts\nindex a177716c2cc5..bda29b10759e 100644\n--- a/server/policies/collection.test.ts\n+++ b/server/policies/collection.test.ts\n@@ -14,9 +14,9 @@ describe(\""admin\"", () => {\n     const admin = await buildAdmin({ teamId: team.id });\n     const collection = await buildCollection({ teamId: team.id });\n     // reload to get membership\n-    const reloaded = await Collection.scope({\n-      method: [\""withMembership\"", admin.id],\n-    }).findByPk(collection.id);\n+    const reloaded = await Collection.findByPk(collection.id, {\n+      userId: admin.id,\n+    });\n     const abilities = serialize(admin, reloaded);\n     expect(abilities.read).toBeTruthy();\n     expect(abilities.update).toBeTruthy();\n@@ -36,9 +36,9 @@ describe(\""admin\"", () => {\n       permission: null,\n     });\n     // reload to get membership\n-    const reloaded = await Collection.scope({\n-      method: [\""withMembership\"", user.id],\n-    }).findByPk(collection.id);\n+    const reloaded = await Collection.findByPk(collection.id, {\n+      userId: user.id,\n+    });\n     const abilities = serialize(user, reloaded);\n     expect(abilities.readDocument).toEqual(false);\n     expect(abilities.updateDocument).toEqual(false);\n@@ -59,9 +59,9 @@ describe(\""admin\"", () => {\n       permission: CollectionPermission.Read,\n     });\n     // reload to get membership\n-    const reloaded = await Collection.scope({\n-      method: [\""withMembership\"", user.id],\n-    }).findByPk(collection.id);\n+    const reloaded = await Collection.findByPk(collection.id, {\n+      userId: user.id,\n+    });\n     const abilities = serialize(user, reloaded);\n     expect(abilities.readDocument).toBeTruthy();\n     expect(abilities.updateDocument).toBeTruthy();\n@@ -87,9 +87,9 @@ describe(\""member\"", () => {\n         },\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\""withMembership\"", member.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: member.id,\n+      });\n       const abilities = serialize(member, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.update).toBeTruthy();\n@@ -116,9 +116,9 @@ describe(\""member\"", () => {\n         },\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\""withMembership\"", member.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: member.id,\n+      });\n       const abilities = serialize(member, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.update).toBe(false);\n@@ -161,9 +161,9 @@ describe(\""member\"", () => {\n         permission: CollectionPermission.Read,\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: user.id,\n+      });\n       const abilities = serialize(user, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n@@ -189,9 +189,9 @@ describe(\""member\"", () => {\n         },\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\""withMembership\"", member.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: member.id,\n+      });\n       const abilities = serialize(member, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.update).not.toBeTruthy();\n@@ -232,9 +232,9 @@ describe(\""member\"", () => {\n         },\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\""withMembership\"", member.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: member.id,\n+      });\n       const abilities = serialize(member, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n@@ -279,9 +279,9 @@ describe(\""member\"", () => {\n         permission: CollectionPermission.ReadWrite,\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: user.id,\n+      });\n       const abilities = serialize(user, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n@@ -331,9 +331,9 @@ describe(\""viewer\"", () => {\n         permission: CollectionPermission.ReadWrite,\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: user.id,\n+      });\n       const abilities = serialize(user, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n@@ -361,9 +361,9 @@ describe(\""viewer\"", () => {\n         permission: CollectionPermission.ReadWrite,\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: user.id,\n+      });\n       const abilities = serialize(user, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n@@ -409,9 +409,9 @@ describe(\""viewer\"", () => {\n         permission: CollectionPermission.ReadWrite,\n       });\n       // reload to get membership\n-      const reloaded = await Collection.scope({\n-        method: [\""withMembership\"", user.id],\n-      }).findByPk(collection.id);\n+      const reloaded = await Collection.findByPk(collection.id, {\n+        userId: user.id,\n+      });\n       const abilities = serialize(user, reloaded);\n       expect(abilities.read).toBeTruthy();\n       expect(abilities.readDocument).toBeTruthy();\n@@ -462,9 +462,9 @@ describe(\""guest\"", () => {\n       permission: CollectionPermission.Read,\n     });\n     // reload to get membership\n-    const reloaded = await Collection.scope({\n-      method: [\""withMembership\"", user.id],\n-    }).findByPk(collection.id);\n+    const reloaded = await Collection.findByPk(collection.id, {\n+      userId: user.id,\n+    });\n     const abilities = serialize(user, reloaded);\n     expect(abilities.read).toBeTruthy();\n     expect(abilities.readDocument).toBeTruthy();\n\ndiff --git a/server/test/factories.ts b/server/test/factories.ts\nindex 6632be8aa0e1..05378dd6b83f 100644\n--- a/server/test/factories.ts\n+++ b/server/test/factories.ts\n@@ -416,9 +416,9 @@ export async function buildDocument(\n \n   if (overrides.collectionId && overrides.publishedAt !== null) {\n     collection = collection\n-      ? await Collection.scope(\""withDocumentStructure\"").findByPk(\n-          overrides.collectionId\n-        )\n+      ? await Collection.findByPk(overrides.collectionId, {\n+          includeDocumentStructure: true,\n+        })\n       : undefined;\n \n     await collection?.addDocumentToStructure(document, 0);\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9132"", ""pr_id"": 9132, ""issue_id"": 9035, ""repo"": ""outline/outline"", ""problem_statement"": ""Empty text nodes are not allowed when trying to import from notion\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\nI have set up the Notion integration accordingly to the documentation, the linked account account have access to a duplicated collection.\nWhen i use the import from Notion option it fail : \n`{\""error\"":\""Empty text nodes are not allowed\"",\""level\"":\""error\"",\""message\"":\""Error processing task in NotionAPIImportTask\"",\""stack\"":\""RangeError: Empty text nodes are not allowed\\n    at new TextNode (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1205:25)\\n    at Schema.text (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1984:14)\\n    at Function.fromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1187:23)\\n    at Schema.nodeFromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1995:19)\\n    at Array.map (<anonymous>)\\n    at Function.fromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:285:33)\\n    at Function.fromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1189:30)\\n    at Schema.nodeFromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1995:19)\\n    at Array.map (<anonymous>)\\n    at Function.fromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:285:33)\\n    at Function.fromJSON (/opt/outline/node_modules/prosemirror-model/dist/index.cjs:1189:30)\\n    at ProsemirrorHelper.toProsemirror (/opt/outline/build/server/models/helpers/ProsemirrorHelper.js:71:35)\\n    at /opt/outline/build/server/logging/tracing.js:74:27\\n    at Scope.activate (/opt/outline/node_modules/dd-trace/packages/dd-trace/src/noop/scope.js:11:12)\\n    at ProsemirrorHelper.wrapperFn (/opt/outline/build/server/logging/tracing.js:73:34)\\n    at NotionAPIImportTask.uploadAttachments (/opt/outline/build/server/queues/tasks/APIImportTask.js:224:59)\""}`\n\nI successfully imported a default collection from Notion so I think the problem might not come from my configuration.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n1. Under Settings click on Import then select \""Import pages from Notion\"" option\n2. Select pages from the allowed Notion workspace\n3. failing:\n```\nshadohash\u2019s Workspace\n\nFailed \u2022 Empty text nodes are not allowed. Check server logs for more details. \u2022 You requested  2 hours ago \u2022 Notion\n```\n\n### Environment\n\n```markdown\n- Outline:  0.83.0\n- Browser: Firefox 128.9.0esr\n```\n\n### Anything else?\n\n_No response_"", ""issue_word_count"": 379, ""test_files_count"": 1, ""non_test_files_count"": 1, ""pr_changed_files"": [""plugins/notion/server/utils/NotionConverter.ts"", ""server/test/fixtures/notion-page-with-empty-text-nodes.json""], ""pr_changed_test_files"": [""server/test/fixtures/notion-page-with-empty-text-nodes.json""], ""base_commit"": ""83e87254c6e8dc8a1249f5c462b5e45574a0b3a9"", ""head_commit"": ""d05f3949c7edd653c28561082000586dacd2d88e"", ""repo_url"": ""https://github.com/outline/outline/pull/9132"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9132"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-04T20:11:02.000Z"", ""patch"": ""diff --git a/plugins/notion/server/utils/NotionConverter.ts b/plugins/notion/server/utils/NotionConverter.ts\nindex 8e4539eb74af..230407748e95 100644\n--- a/plugins/notion/server/utils/NotionConverter.ts\n+++ b/plugins/notion/server/utils/NotionConverter.ts\n@@ -288,7 +288,7 @@ export class NotionConverter {\n       if (item.mention.type === \""link_mention\"") {\n         return {\n           type: \""text\"",\n-          text: item.plain_text,\n+          text: item.plain_text || item.mention.link_mention.href,\n           marks: [\n             {\n               type: \""link\"",\n@@ -302,7 +302,7 @@ export class NotionConverter {\n       if (item.mention.type === \""link_preview\"") {\n         return {\n           type: \""text\"",\n-          text: item.plain_text,\n+          text: item.plain_text || item.mention.link_preview.url,\n           marks: [\n             {\n               type: \""link\"",\n@@ -314,14 +314,14 @@ export class NotionConverter {\n         };\n       }\n \n-      if (!item.plain_text) {\n-        return undefined;\n+      if (item.plain_text) {\n+        return {\n+          type: \""text\"",\n+          text: item.plain_text,\n+        };\n       }\n \n-      return {\n-        type: \""text\"",\n-        text: item.plain_text,\n-      };\n+      return undefined;\n     }\n \n     if (item.type === \""equation\"") {\n@@ -336,20 +336,20 @@ export class NotionConverter {\n       };\n     }\n \n-    if (!item.text.content) {\n-      return undefined;\n+    if (item.text.content) {\n+      return {\n+        type: \""text\"",\n+        text: item.text.content,\n+        marks: [\n+          ...mapAttrs(),\n+          ...(item.text.link\n+            ? [{ type: \""link\"", attrs: { href: item.text.link.url } }]\n+            : []),\n+        ].filter(Boolean),\n+      };\n     }\n \n-    return {\n-      type: \""text\"",\n-      text: item.text.content,\n-      marks: [\n-        ...mapAttrs(),\n-        ...(item.text.link\n-          ? [{ type: \""link\"", attrs: { href: item.text.link.url } }]\n-          : []),\n-      ].filter(Boolean),\n-    };\n+    return undefined;\n   }\n \n   private static rich_text_to_plaintext(item: RichTextItemResponse) {\n"", ""test_patch"": ""diff --git a/server/test/fixtures/notion-page-with-empty-text-nodes.json b/server/test/fixtures/notion-page-with-empty-text-nodes.json\nindex 9c98e5b036c9..7a32e1f9ef00 100644\n--- a/server/test/fixtures/notion-page-with-empty-text-nodes.json\n+++ b/server/test/fixtures/notion-page-with-empty-text-nodes.json\n@@ -191,7 +191,7 @@\n             \""code\"": false,\n             \""color\"": \""default\""\n           },\n-          \""plain_text\"": \""http://github.com/outline/\"",\n+          \""plain_text\"": \""\"",\n           \""href\"": \""http://github.com/outline/\""\n         }\n       ],\n@@ -506,4 +506,4 @@\n       \""color\"": \""default\""\n     }\n   }\n-]\n\\ No newline at end of file\n+]\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9099"", ""pr_id"": 9099, ""issue_id"": 8807, ""repo"": ""outline/outline"", ""problem_statement"": ""Comment notifications are sent to more users than expected\nMaybe introduced here https://github.com/outline/outline/issues/4984 "", ""issue_word_count"": 10, ""test_files_count"": 1, ""non_test_files_count"": 1, ""pr_changed_files"": [""server/models/helpers/NotificationHelper.test.ts"", ""server/models/helpers/NotificationHelper.ts""], ""pr_changed_test_files"": [""server/models/helpers/NotificationHelper.test.ts""], ""base_commit"": ""f5c659f90201d9f34ffca2f9b132d1f538184886"", ""head_commit"": ""2796458bcb9c7f186e91bff0f00ccf6424a26b4a"", ""repo_url"": ""https://github.com/outline/outline/pull/9099"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9099"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-29T10:45:15.000Z"", ""patch"": ""diff --git a/server/models/helpers/NotificationHelper.ts b/server/models/helpers/NotificationHelper.ts\nindex 7f33e8a2963e..e02be38e40c0 100644\n--- a/server/models/helpers/NotificationHelper.ts\n+++ b/server/models/helpers/NotificationHelper.ts\n@@ -193,10 +193,16 @@ export default class NotificationHelper {\n             [Op.ne]: actorId,\n           },\n           event: SubscriptionType.Document,\n-          [Op.or]: [\n-            { collectionId: document.collectionId },\n-            { documentId: document.id },\n-          ],\n+          ...(document.collectionId\n+            ? {\n+                [Op.or]: [\n+                  { collectionId: document.collectionId },\n+                  { documentId: document.id },\n+                ],\n+              }\n+            : {\n+                documentId: document.id,\n+              }),\n         },\n         include: [\n           {\n"", ""test_patch"": ""diff --git a/server/models/helpers/NotificationHelper.test.ts b/server/models/helpers/NotificationHelper.test.ts\nindex 71b624efa876..6013601dc9fb 100644\n--- a/server/models/helpers/NotificationHelper.test.ts\n+++ b/server/models/helpers/NotificationHelper.test.ts\n@@ -1,7 +1,9 @@\n-import { NotificationEventType } from \""@shared/types\"";\n+import { DocumentPermission, NotificationEventType } from \""@shared/types\"";\n+import { UserMembership } from \""@server/models\"";\n import {\n   buildComment,\n   buildDocument,\n+  buildDraftDocument,\n   buildSubscription,\n   buildUser,\n } from \""@server/test/factories\"";\n@@ -54,6 +56,78 @@ describe(\""NotificationHelper\"", () => {\n       expect(recipients[0].id).toEqual(notificationEnabledUser.id);\n     });\n \n+    it(\""should only return users who have notification enabled for comment creation and are subscribed to the document in case of new thread in draft\"", async () => {\n+      const documentAuthor = await buildUser();\n+\n+      // create a draft\n+      const document = await buildDraftDocument({\n+        userId: documentAuthor.id,\n+        teamId: documentAuthor.teamId,\n+        collectionId: null,\n+      });\n+\n+      // add a bunch of users as direct members\n+      const user = await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: { [NotificationEventType.CreateComment]: true },\n+      });\n+      const user2 = await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: { [NotificationEventType.CreateComment]: true },\n+      });\n+      const user3 = await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: { [NotificationEventType.CreateComment]: true },\n+      });\n+      await UserMembership.create({\n+        documentId: document.id,\n+        userId: user.id,\n+        permission: DocumentPermission.Read,\n+        createdById: user.id,\n+      });\n+      await UserMembership.create({\n+        documentId: document.id,\n+        userId: user2.id,\n+        permission: DocumentPermission.Read,\n+        createdById: user.id,\n+      });\n+      await UserMembership.create({\n+        documentId: document.id,\n+        userId: user3.id,\n+        permission: DocumentPermission.Read,\n+        createdById: user.id,\n+      });\n+\n+      // Add a subscription for only one of those users\n+      await Promise.all([\n+        buildSubscription({\n+          userId: user.id,\n+        }),\n+        buildSubscription({\n+          userId: user2.id,\n+        }),\n+        buildSubscription({\n+          userId: user3.id,\n+          documentId: document.id,\n+        }),\n+      ]);\n+\n+      const comment = await buildComment({\n+        documentId: document.id,\n+        userId: documentAuthor.id,\n+      });\n+\n+      const recipients =\n+        await NotificationHelper.getCommentNotificationRecipients(\n+          document,\n+          comment,\n+          comment.createdById\n+        );\n+\n+      expect(recipients.length).toEqual(1);\n+      expect(recipients[0].id).toEqual(user3.id);\n+    });\n+\n     it(\""should only return users who have notification enabled for comment creation and are in the thread in case of child comment\"", async () => {\n       const documentAuthor = await buildUser();\n       const document = await buildDocument({\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9092"", ""pr_id"": 9092, ""issue_id"": 9079, ""repo"": ""outline/outline"", ""problem_statement"": ""Implement type-safe `schedule` method for tasks\nCloses #9073 \r\n\r\n~Explored a concept for adding type-safety to scheduling tasks.~ Added a `schedule` method to the instance.\r\nFor verification, moved a couple of tasks to use the new method.\r\n"", ""issue_word_count"": 31, ""test_files_count"": 2, ""non_test_files_count"": 26, ""pr_changed_files"": [""plugins/notion/server/processors/NotionImportsProcessor.ts"", ""plugins/notion/server/tasks/NotionAPIImportTask.ts"", ""plugins/webhooks/server/processors/WebhookProcessor.test.ts"", ""plugins/webhooks/server/processors/WebhookProcessor.ts"", ""server/commands/documentMover.ts"", ""server/commands/documentPermanentDeleter.test.ts"", ""server/commands/documentPermanentDeleter.ts"", ""server/commands/userSuspender.ts"", ""server/models/Team.ts"", ""server/models/User.ts"", ""server/queues/processors/AvatarProcessor.ts"", ""server/queues/processors/CollectionsProcessor.ts"", ""server/queues/processors/DocumentSubscriptionProcessor.ts"", ""server/queues/processors/FileOperationCreatedProcessor.ts"", ""server/queues/processors/NotificationsProcessor.ts"", ""server/queues/processors/RevisionsProcessor.ts"", ""server/queues/processors/UserDemotedProcessor.ts"", ""server/queues/tasks/APIImportTask.ts"", ""server/queues/tasks/CleanupDeletedTeamsTask.ts"", ""server/queues/tasks/DetachDraftsFromCollectionTask.ts"", ""server/queues/tasks/DocumentAddGroupNotificationsTask.ts"", ""server/queues/tasks/DocumentImportTask.ts"", ""server/queues/tasks/UpdateTeamsAttachmentsSizeTask.ts"", ""server/routes/api/attachments/attachments.ts"", ""server/routes/api/auth/auth.ts"", ""server/routes/api/cron/cron.ts"", ""server/routes/api/documents/documents.ts"", ""server/services/cron.ts""], ""pr_changed_test_files"": [""plugins/webhooks/server/processors/WebhookProcessor.test.ts"", ""server/commands/documentPermanentDeleter.test.ts""], ""base_commit"": ""f5c659f90201d9f34ffca2f9b132d1f538184886"", ""head_commit"": ""e92500dd85af262cf6970cabba5e0f1fa8e25cd2"", ""repo_url"": ""https://github.com/outline/outline/pull/9092"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9092"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-29T10:47:52.000Z"", ""patch"": null, ""test_patch"": null, ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9042"", ""pr_id"": 9042, ""issue_id"": 8736, ""repo"": ""outline/outline"", ""problem_statement"": ""Templates shared at workspace level are not being displayed to users\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\nIdentical to #7916 which I cannot reopen.\n\nThe \""Templates\"" menu is not shown for new pages. I have only workspace templates.\n\n### Expected Behavior\n\nEvery user should see global templates.\n\n### Steps To Reproduce\n\n_No response_\n\n### Environment\n\n```markdown\n- Outline:0.82.0\n- Browser:Firefox\n```\n\n### Anything else?\n\nIt seems the templates are somehow returned in a `documents.list` call. Comparing the call with a user vs admin, the field `data` is empty for a regular user vs. it is non-empty for an admin."", ""issue_word_count"": 114, ""test_files_count"": 1, ""non_test_files_count"": 1, ""pr_changed_files"": [""server/policies/team.test.ts"", ""server/policies/team.ts""], ""pr_changed_test_files"": [""server/policies/team.test.ts""], ""base_commit"": ""21f37c0d14e9130044d6af8358a5e66f8c18f936"", ""head_commit"": ""053156a5716d7891599ca0a4eb82118c0c8eb358"", ""repo_url"": ""https://github.com/outline/outline/pull/9042"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9042"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-24T11:02:57.000Z"", ""patch"": ""diff --git a/server/policies/team.ts b/server/policies/team.ts\nindex eefd3802a53b..1afdb611d2d8 100644\n--- a/server/policies/team.ts\n+++ b/server/policies/team.ts\n@@ -9,7 +9,7 @@ import {\n   or,\n } from \""./utils\"";\n \n-allow(User, \""read\"", Team, isTeamModel);\n+allow(User, [\""read\"", \""readTemplate\""], Team, isTeamModel);\n \n allow(User, \""share\"", Team, (actor, team) =>\n   and(\n@@ -50,10 +50,6 @@ allow(User, \""createTemplate\"", Team, (actor, team) =>\n   )\n );\n \n-allow(User, \""readTemplate\"", Team, (actor, team) =>\n-  and(!actor.isViewer, isTeamModel(actor, team))\n-);\n-\n allow(User, \""updateTemplate\"", Team, (actor, team) =>\n   and(\n     //\n"", ""test_patch"": ""diff --git a/server/policies/team.test.ts b/server/policies/team.test.ts\nindex d1e99146577b..f3d99689b579 100644\n--- a/server/policies/team.test.ts\n+++ b/server/policies/team.test.ts\n@@ -57,7 +57,7 @@ describe(\""policies/team\"", () => {\n     const permissions = new Map<UserRole, boolean>([\n       [UserRole.Admin, true],\n       [UserRole.Member, true],\n-      [UserRole.Viewer, false],\n+      [UserRole.Viewer, true],\n       [UserRole.Guest, true],\n     ]);\n     for (const [role, permission] of permissions.entries()) {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9030"", ""pr_id"": 9030, ""issue_id"": 7561, ""repo"": ""outline/outline"", ""problem_statement"": ""Replace class based legacy react components with functional ones\nWe still have have class based components lying around, one such example is `PaginatedList` component which is a part of _critical path_ in a variety of ways. Apart from being legacy, these components pose limits on easily achieving certain things, like [memoization](https://github.com/outline/outline/pull/7102#discussion_r1648850229)."", ""issue_word_count"": 50, ""test_files_count"": 1, ""non_test_files_count"": 16, ""pr_changed_files"": [""app/components/DocumentViews.tsx"", ""app/components/FilterOptions.tsx"", ""app/components/Notifications/Notifications.tsx"", ""app/components/PaginatedDocumentList.tsx"", ""app/components/PaginatedEventList.tsx"", ""app/components/PaginatedList.test.tsx"", ""app/components/PaginatedList.tsx"", ""app/components/SearchPopover.tsx"", ""app/components/Sidebar/components/ArchiveLink.tsx"", ""app/components/Sidebar/components/Collections.tsx"", ""app/scenes/Document/components/Insights.tsx"", ""app/scenes/Settings/ApiKeys.tsx"", ""app/scenes/Settings/Export.tsx"", ""app/scenes/Settings/Import.tsx"", ""app/scenes/Settings/PersonalApiKeys.tsx"", ""app/scenes/Settings/components/GroupDialogs.tsx"", ""plugins/webhooks/client/Settings.tsx""], ""pr_changed_test_files"": [""app/components/PaginatedList.test.tsx""], ""base_commit"": ""943fd7e2e1a1cff57920e19e90e5a51ac58b00ec"", ""head_commit"": ""9906d240bd560e2c8c64d697ade7a807bb8a8c39"", ""repo_url"": ""https://github.com/outline/outline/pull/9030"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9030"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-24T11:03:18.000Z"", ""patch"": ""diff --git a/app/components/DocumentViews.tsx b/app/components/DocumentViews.tsx\nindex 6c6eb29bd88a..b8aa85a43e3e 100644\n--- a/app/components/DocumentViews.tsx\n+++ b/app/components/DocumentViews.tsx\n@@ -46,10 +46,10 @@ function DocumentViews({ document, isOpen }: Props) {\n   return (\n     <>\n       {isOpen && (\n-        <PaginatedList\n+        <PaginatedList<User>\n           aria-label={t(\""Viewers\"")}\n           items={users}\n-          renderItem={(model: User) => {\n+          renderItem={(model) => {\n             const view = documentViews.find((v) => v.userId === model.id);\n             const isPresent = presentIds.includes(model.id);\n             const isEditing = editingIds.includes(model.id);\n\ndiff --git a/app/components/FilterOptions.tsx b/app/components/FilterOptions.tsx\nindex 34a4da15179e..b48912f9c95d 100644\n--- a/app/components/FilterOptions.tsx\n+++ b/app/components/FilterOptions.tsx\n@@ -56,7 +56,7 @@ const FilterOptions = ({\n     : \""\"";\n \n   const renderItem = React.useCallback(\n-    (option: TFilterOption) => (\n+    (option) => (\n       <MenuItem\n         key={option.key}\n         onClick={() => {\n@@ -174,7 +174,7 @@ const FilterOptions = ({\n         )}\n       </MenuButton>\n       <ContextMenu aria-label={defaultLabel} minHeight={66} {...menu}>\n-        <PaginatedList\n+        <PaginatedList<TFilterOption>\n           listRef={listRef}\n           options={{ query, ...fetchQueryOptions }}\n           items={filteredOptions}\n\ndiff --git a/app/components/Notifications/Notifications.tsx b/app/components/Notifications/Notifications.tsx\nindex e297041cca40..481255133abe 100644\n--- a/app/components/Notifications/Notifications.tsx\n+++ b/app/components/Notifications/Notifications.tsx\n@@ -79,11 +79,11 @@ function Notifications(\n         </Header>\n         <React.Suspense fallback={null}>\n           <Scrollable ref={ref} flex topShadow>\n-            <PaginatedList\n+            <PaginatedList<Notification>\n               fetch={notifications.fetchPage}\n               options={{ archived: false }}\n               items={isOpen ? notifications.orderedData : undefined}\n-              renderItem={(item: Notification) => (\n+              renderItem={(item) => (\n                 <NotificationListItem\n                   key={item.id}\n                   notification={item}\n\ndiff --git a/app/components/PaginatedDocumentList.tsx b/app/components/PaginatedDocumentList.tsx\nindex 3e40739820d7..915de450195e 100644\n--- a/app/components/PaginatedDocumentList.tsx\n+++ b/app/components/PaginatedDocumentList.tsx\n@@ -10,7 +10,7 @@ type Props = {\n   fetch: (options: any) => Promise<Document[] | undefined>;\n   options?: Record<string, any>;\n   heading?: React.ReactNode;\n-  empty?: React.ReactNode;\n+  empty?: JSX.Element;\n   showParentDocuments?: boolean;\n   showCollection?: boolean;\n   showPublished?: boolean;\n@@ -34,7 +34,7 @@ const PaginatedDocumentList = React.memo<Props>(function PaginatedDocumentList({\n   const { t } = useTranslation();\n \n   return (\n-    <PaginatedList\n+    <PaginatedList<Document>\n       aria-label={t(\""Documents\"")}\n       items={documents}\n       empty={empty}\n@@ -42,7 +42,7 @@ const PaginatedDocumentList = React.memo<Props>(function PaginatedDocumentList({\n       fetch={fetch}\n       options={options}\n       renderError={(props) => <Error {...props} />}\n-      renderItem={(item: Document, _index) => (\n+      renderItem={(item, _index) => (\n         <DocumentListItem\n           key={item.id}\n           document={item}\n\ndiff --git a/app/components/PaginatedEventList.tsx b/app/components/PaginatedEventList.tsx\nindex c7a5bdc025b0..d578b7bfb93d 100644\n--- a/app/components/PaginatedEventList.tsx\n+++ b/app/components/PaginatedEventList.tsx\n@@ -10,7 +10,7 @@ type Props = {\n   fetch: (options: Record<string, any> | undefined) => Promise<Event[]>;\n   options?: Record<string, any>;\n   heading?: React.ReactNode;\n-  empty?: React.ReactNode;\n+  empty?: JSX.Element;\n };\n \n const PaginatedEventList = React.memo<Props>(function PaginatedEventList({\n\ndiff --git a/app/components/PaginatedList.tsx b/app/components/PaginatedList.tsx\nindex ea7b9f86eb96..b289db622ec8 100644\n--- a/app/components/PaginatedList.tsx\n+++ b/app/components/PaginatedList.tsx\n@@ -1,265 +1,309 @@\n import isEqual from \""lodash/isEqual\"";\n-import { observable, action, computed } from \""mobx\"";\n-import { observer } from \""mobx-react\"";\n import * as React from \""react\"";\n-import { withTranslation, WithTranslation } from \""react-i18next\"";\n+import { useTranslation } from \""react-i18next\"";\n import { Waypoint } from \""react-waypoint\"";\n import { Pagination } from \""@shared/constants\"";\n-import RootStore from \""~/stores/RootStore\"";\n import ArrowKeyNavigation from \""~/components/ArrowKeyNavigation\"";\n import DelayedMount from \""~/components/DelayedMount\"";\n import PlaceholderList from \""~/components/List/Placeholder\"";\n-import withStores from \""~/components/withStores\"";\n+import useCurrentUser from \""~/hooks/useCurrentUser\"";\n+import usePrevious from \""~/hooks/usePrevious\"";\n import { dateToHeading } from \""~/utils/date\"";\n \n+/**\n+ * Base interface for items that can be paginated\n+ * @interface PaginatedItem\n+ */\n export interface PaginatedItem {\n+  /** Unique identifier for the item */\n   id?: string;\n+  /** Last update timestamp of the item */\n   updatedAt?: string;\n+  /** Creation timestamp of the item */\n   createdAt?: string;\n }\n \n-type Props<T> = WithTranslation &\n-  RootStore &\n-  React.HTMLAttributes<HTMLDivElement> & {\n-    fetch?: (\n-      options: Record<string, any> | undefined\n-    ) => Promise<T[] | undefined> | undefined;\n-    options?: Record<string, any>;\n-    heading?: React.ReactNode;\n-    empty?: React.ReactNode;\n-    loading?: React.ReactElement;\n-    items?: T[];\n-    className?: string;\n-    renderItem: (item: T, index: number) => React.ReactNode;\n-    renderError?: (options: {\n-      error: Error;\n-      retry: () => void;\n-    }) => React.ReactNode;\n-    renderHeading?: (name: React.ReactElement<any> | string) => React.ReactNode;\n-    onEscape?: (ev: React.KeyboardEvent<HTMLDivElement>) => void;\n-    listRef?: React.RefObject<HTMLDivElement>;\n-  };\n-\n-@observer\n-class PaginatedList<T extends PaginatedItem> extends React.PureComponent<\n-  Props<T>\n-> {\n-  @observable\n-  error?: Error;\n-\n-  @observable\n-  isFetchingMore = false;\n-\n-  @observable\n-  isFetching = false;\n-\n-  @observable\n-  isFetchingInitial = !this.props.items?.length;\n-\n-  @observable\n-  fetchCounter = 0;\n-\n-  @observable\n-  renderCount = Pagination.defaultLimit;\n-\n-  @observable\n-  offset = 0;\n-\n-  @observable\n-  allowLoadMore = true;\n-\n-  componentDidMount() {\n-    void this.fetchResults();\n-  }\n-\n-  componentDidUpdate(prevProps: Props<T>) {\n-    if (\n-      prevProps.fetch !== this.props.fetch ||\n-      !isEqual(prevProps.options, this.props.options)\n-    ) {\n-      this.reset();\n-      void this.fetchResults();\n-    }\n-  }\n+/**\n+ * Props for the PaginatedList component\n+ * @template T Type of items in the list, must extend PaginatedItem\n+ */\n+interface Props<T extends PaginatedItem>\n+  extends React.HTMLAttributes<HTMLDivElement> {\n+  /**\n+   * Function to fetch paginated data. Should return a promise resolving to an array of items\n+   * @param options Pagination and other query options\n+   */\n+  fetch?: (\n+    options: Record<string, any> | undefined\n+  ) => Promise<unknown[] | undefined> | undefined;\n+\n+  /** Additional options to pass to the fetch function */\n+  options?: Record<string, any>;\n+\n+  /** Optional header content to display above the list */\n+  heading?: React.ReactNode;\n+\n+  /** Content to display when the list is empty */\n+  empty?: JSX.Element | null;\n+\n+  /** Optional loading state content */\n+  loading?: JSX.Element | null;\n+\n+  /** Array of items to display in the list */\n+  items?: T[];\n+\n+  /** CSS class name to apply to the list container */\n+  className?: string;\n+\n+  /**\n+   * Function to render each individual item in the list\n+   * @param item The item to render\n+   * @param index The index of the item in the list\n+   */\n+  renderItem: (item: T, index: number) => React.ReactNode;\n+\n+  /**\n+   * Function to render error state\n+   * @param options Object containing error details and retry function\n+   */\n+  renderError?: (options: {\n+    /** Details of the error */\n+    error: Error;\n+    /** Function to retry the fetch operation */\n+    retry: () => void;\n+  }) => JSX.Element;\n+\n+  /**\n+   * Function to render section headings (typically date-based)\n+   * @param name The heading text or element to render\n+   */\n+  renderHeading?: (name: React.ReactElement<any> | string) => React.ReactNode;\n+\n+  /**\n+   * Handler for escape key press\n+   * @param ev Keyboard event object\n+   */\n+  onEscape?: (ev: React.KeyboardEvent<HTMLDivElement>) => void;\n+\n+  /** Reference to the list container element */\n+  listRef?: React.RefObject<HTMLDivElement>;\n+}\n \n-  reset = () => {\n-    this.offset = 0;\n-    this.allowLoadMore = true;\n-    this.renderCount = Pagination.defaultLimit;\n-    this.isFetching = false;\n-    this.isFetchingInitial = false;\n-    this.isFetchingMore = false;\n-  };\n-\n-  @action\n-  fetchResults = async () => {\n-    if (!this.props.fetch) {\n+/**\n+ * A reusable component that renders a paginated list with infinite scrolling\n+ * and optional date-based section headings.\n+ *\n+ * @template T Type of the list items, must extend PaginatedItem\n+ */\n+const PaginatedList = <T extends PaginatedItem>({\n+  fetch,\n+  options,\n+  heading,\n+  empty = null,\n+  loading = null,\n+  items = [],\n+  className,\n+  renderItem,\n+  renderError,\n+  renderHeading,\n+  onEscape,\n+  listRef,\n+  ...rest\n+}: Props<T>): JSX.Element | null => {\n+  const user = useCurrentUser({ rejectOnEmpty: false });\n+  const { t } = useTranslation();\n+\n+  const [error, setError] = React.useState<Error | undefined>();\n+  const [isFetchingMore, setIsFetchingMore] = React.useState(false);\n+  const [isFetching, setIsFetching] = React.useState(false);\n+  const [isFetchingInitial, setIsFetchingInitial] = React.useState(\n+    !items?.length\n+  );\n+  const [fetchCounter, setFetchCounter] = React.useState(0);\n+  const [renderCount, setRenderCount] = React.useState(Pagination.defaultLimit);\n+  const [offset, setOffset] = React.useState(0);\n+  const [allowLoadMore, setAllowLoadMore] = React.useState(true);\n+\n+  const reset = React.useCallback(() => {\n+    setOffset(0);\n+    setAllowLoadMore(true);\n+    setRenderCount(Pagination.defaultLimit);\n+    setIsFetching(false);\n+    setIsFetchingInitial(false);\n+    setIsFetchingMore(false);\n+  }, []);\n+\n+  const fetchResults = React.useCallback(async () => {\n+    if (!fetch) {\n       return;\n     }\n-    this.isFetching = true;\n-    const counter = ++this.fetchCounter;\n-    const limit = this.props.options?.limit ?? Pagination.defaultLimit;\n-    this.error = undefined;\n+\n+    setIsFetching(true);\n+    const counter = fetchCounter + 1;\n+    setFetchCounter(counter);\n+    const limit = options?.limit ?? Pagination.defaultLimit;\n+    setError(undefined);\n \n     try {\n-      const results = await this.props.fetch({\n+      const results = await fetch({\n         limit,\n-        offset: this.offset,\n-        ...this.props.options,\n+        offset,\n+        ...options,\n       });\n \n-      if (this.offset !== 0) {\n-        this.renderCount += limit;\n+      if (offset !== 0) {\n+        setRenderCount((prevCount) => prevCount + limit);\n       }\n \n       if (results && (results.length === 0 || results.length < limit)) {\n-        this.allowLoadMore = false;\n+        setAllowLoadMore(false);\n       } else {\n-        this.offset += limit;\n+        setOffset((prevOffset) => prevOffset + limit);\n       }\n \n-      this.isFetchingInitial = false;\n+      setIsFetchingInitial(false);\n     } catch (err) {\n-      this.error = err;\n+      setError(err);\n     } finally {\n       // only the most recent fetch should end the loading state\n-      if (counter >= this.fetchCounter) {\n-        this.isFetching = false;\n-        this.isFetchingMore = false;\n+      if (counter >= fetchCounter) {\n+        setIsFetching(false);\n+        setIsFetchingMore(false);\n       }\n     }\n-  };\n+  }, [fetch, fetchCounter, offset, options]);\n \n-  @action\n-  loadMoreResults = async () => {\n-    // Don't paginate if there aren't more results or we\u2019re currently fetching\n-    if (!this.allowLoadMore || this.isFetching) {\n+  const loadMoreResults = React.useCallback(async () => {\n+    // Don't paginate if there aren't more results or we're currently fetching\n+    if (!allowLoadMore || isFetching) {\n       return;\n     }\n+\n     // If there are already cached results that we haven't yet rendered because\n     // of lazy rendering then show another page.\n-    const leftToRender = (this.props.items?.length ?? 0) - this.renderCount;\n+    const leftToRender = (items?.length ?? 0) - renderCount;\n \n     if (leftToRender > 0) {\n-      this.renderCount += Pagination.defaultLimit;\n+      setRenderCount((prevCount) => prevCount + Pagination.defaultLimit);\n     }\n \n     // If there are less than a pages results in the cache go ahead and fetch\n     // another page from the server\n     if (leftToRender <= Pagination.defaultLimit) {\n-      this.isFetchingMore = true;\n-      await this.fetchResults();\n+      setIsFetchingMore(true);\n+      await fetchResults();\n     }\n-  };\n+  }, [allowLoadMore, isFetching, items?.length, renderCount, fetchResults]);\n \n-  @computed\n-  get itemsToRender() {\n-    return this.props.items?.slice(0, this.renderCount) ?? [];\n-  }\n+  React.useEffect(() => {\n+    void fetchResults();\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\n+  }, []);\n \n-  render() {\n-    const {\n-      items = [],\n-      heading,\n-      auth,\n-      empty = null,\n-      renderHeading,\n-      renderError,\n-      onEscape,\n-    } = this.props;\n-\n-    const showLoading =\n-      this.isFetching &&\n-      !this.isFetchingMore &&\n-      (!items?.length || (this.fetchCounter <= 1 && this.isFetchingInitial));\n-\n-    if (showLoading) {\n-      return (\n-        this.props.loading || (\n-          <DelayedMount>\n-            <div className={this.props.className}>\n-              <PlaceholderList count={5} />\n-            </div>\n-          </DelayedMount>\n-        )\n-      );\n-    }\n-\n-    if (items?.length === 0) {\n-      if (this.error && renderError) {\n-        return renderError({ error: this.error, retry: this.fetchResults });\n-      }\n+  const prevFetch = usePrevious(fetch);\n+  const prevOptions = usePrevious(options);\n \n-      return empty;\n+  // Equivalent to componentDidUpdate\n+  React.useEffect(() => {\n+    if (prevFetch !== fetch || !isEqual(prevOptions, options)) {\n+      reset();\n+      void fetchResults();\n     }\n+  }, [fetch, options, reset, prevFetch, prevOptions, fetchResults]);\n \n-    return (\n-      <>\n-        {heading}\n-        <ArrowKeyNavigation\n-          aria-label={this.props[\""aria-label\""]}\n-          onEscape={onEscape}\n-          className={this.props.className}\n-          items={this.itemsToRender}\n-          ref={this.props.listRef}\n-        >\n-          {() => {\n-            let previousHeading = \""\"";\n-            return this.itemsToRender.map((item, index) => {\n-              const children = this.props.renderItem(item, index);\n-\n-              // If there is no renderHeading method passed then no date\n-              // headings are rendered\n-              if (!renderHeading) {\n-                return children;\n-              }\n-\n-              // Our models have standard date fields, updatedAt > createdAt.\n-              // Get what a heading would look like for this item\n-              const currentDate =\n-                \""updatedAt\"" in item && item.updatedAt\n-                  ? item.updatedAt\n-                  : \""createdAt\"" in item && item.createdAt\n-                  ? item.createdAt\n-                  : previousHeading;\n-              const currentHeading = dateToHeading(\n-                currentDate,\n-                this.props.t,\n-                auth.user?.language\n-              );\n+  // Computed property equivalent\n+  const itemsToRender = React.useMemo(\n+    () => items?.slice(0, renderCount) ?? [],\n+    [items, renderCount]\n+  );\n \n-              // If the heading is different to any previous heading then we\n-              // should render it, otherwise the item can go under the previous\n-              // heading\n-              if (\n-                children &&\n-                (!previousHeading || currentHeading !== previousHeading)\n-              ) {\n-                previousHeading = currentHeading;\n-                return (\n-                  <React.Fragment\n-                    key={\""id\"" in item && item.id ? item.id : index}\n-                  >\n-                    {renderHeading(currentHeading)}\n-                    {children}\n-                  </React.Fragment>\n-                );\n-              }\n+  const showLoading =\n+    isFetching &&\n+    !isFetchingMore &&\n+    (!items?.length || (fetchCounter <= 1 && isFetchingInitial));\n \n-              return children;\n-            });\n-          }}\n-        </ArrowKeyNavigation>\n-        {this.allowLoadMore && (\n-          <div style={{ height: \""1px\"" }}>\n-            <Waypoint key={this.renderCount} onEnter={this.loadMoreResults} />\n+  if (showLoading) {\n+    return (\n+      loading || (\n+        <DelayedMount>\n+          <div className={className}>\n+            <PlaceholderList count={5} />\n           </div>\n-        )}\n-      </>\n+        </DelayedMount>\n+      )\n     );\n   }\n-}\n \n-export const Component = PaginatedList;\n+  if (items?.length === 0) {\n+    if (error && renderError) {\n+      return renderError({ error, retry: fetchResults });\n+    }\n+\n+    return empty;\n+  }\n \n-export default withTranslation()(withStores(PaginatedList));\n+  return (\n+    <React.Fragment>\n+      {heading}\n+      <ArrowKeyNavigation\n+        aria-label={rest[\""aria-label\""]}\n+        onEscape={onEscape}\n+        className={className}\n+        items={itemsToRender}\n+        ref={listRef}\n+      >\n+        {() => {\n+          let previousHeading = \""\"";\n+          return itemsToRender.map((item, index) => {\n+            const children = renderItem(item, index);\n+\n+            // If there is no renderHeading method passed then no date\n+            // headings are rendered\n+            if (!renderHeading) {\n+              return children;\n+            }\n+\n+            // Our models have standard date fields, updatedAt > createdAt.\n+            // Get what a heading would look like for this item\n+            const currentDate =\n+              \""updatedAt\"" in item && item.updatedAt\n+                ? item.updatedAt\n+                : \""createdAt\"" in item && item.createdAt\n+                ? item.createdAt\n+                : previousHeading;\n+            const currentHeading = dateToHeading(\n+              currentDate,\n+              t,\n+              user?.language\n+            );\n+\n+            // If the heading is different to any previous heading then we\n+            // should render it, otherwise the item can go under the previous\n+            // heading\n+            if (\n+              children &&\n+              (!previousHeading || currentHeading !== previousHeading)\n+            ) {\n+              previousHeading = currentHeading;\n+              return (\n+                <React.Fragment key={\""id\"" in item && item.id ? item.id : index}>\n+                  {renderHeading(currentHeading)}\n+                  {children}\n+                </React.Fragment>\n+              );\n+            }\n+\n+            return children;\n+          });\n+        }}\n+      </ArrowKeyNavigation>\n+      {allowLoadMore && (\n+        <div style={{ height: \""1px\"" }}>\n+          <Waypoint key={renderCount} onEnter={loadMoreResults} />\n+        </div>\n+      )}\n+    </React.Fragment>\n+  );\n+};\n+\n+export default PaginatedList;\n\ndiff --git a/app/components/SearchPopover.tsx b/app/components/SearchPopover.tsx\nindex 4ac2bcc523a9..2390a7604a81 100644\n--- a/app/components/SearchPopover.tsx\n+++ b/app/components/SearchPopover.tsx\n@@ -200,7 +200,7 @@ function SearchPopover({ shareId, className }: Props) {\n         style={{ zIndex: depths.sidebar + 1 }}\n         shrink\n       >\n-        <PaginatedList\n+        <PaginatedList<SearchResult>\n           options={{ query, snippetMinWords: 10, snippetMaxWords: 11 }}\n           items={cachedSearchResults}\n           fetch={performSearch}\n@@ -209,7 +209,7 @@ function SearchPopover({ shareId, className }: Props) {\n             <NoResults>{t(\""No results for {{query}}\"", { query })}</NoResults>\n           }\n           loading={<PlaceholderList count={3} header={{ height: 20 }} />}\n-          renderItem={(item: SearchResult, index) => (\n+          renderItem={(item, index) => (\n             <SearchListItem\n               key={item.document.id}\n               shareId={shareId}\n\ndiff --git a/app/components/Sidebar/components/ArchiveLink.tsx b/app/components/Sidebar/components/ArchiveLink.tsx\nindex 9f04d19b039e..945ef4b284be 100644\n--- a/app/components/Sidebar/components/ArchiveLink.tsx\n+++ b/app/components/Sidebar/components/ArchiveLink.tsx\n@@ -82,12 +82,12 @@ function ArchiveLink() {\n         </div>\n         {expanded === true ? (\n           <Relative>\n-            <PaginatedList\n+            <PaginatedList<Collection>\n               aria-label={t(\""Archived collections\"")}\n               items={collections.archived}\n               loading={<PlaceholderCollections />}\n               renderError={(props) => <StyledError {...props} />}\n-              renderItem={(item: Collection) => (\n+              renderItem={(item) => (\n                 <ArchivedCollectionLink\n                   key={item.id}\n                   depth={1}\n\ndiff --git a/app/components/Sidebar/components/Collections.tsx b/app/components/Sidebar/components/Collections.tsx\nindex f50efc9b92f4..f98179f1677f 100644\n--- a/app/components/Sidebar/components/Collections.tsx\n+++ b/app/components/Sidebar/components/Collections.tsx\n@@ -54,7 +54,7 @@ function Collections() {\n       <Flex column>\n         <Header id=\""collections\"" title={t(\""Collections\"")}>\n           <Relative>\n-            <PaginatedList\n+            <PaginatedList<Collection>\n               options={params}\n               aria-label={t(\""Collections\"")}\n               items={collections.allActive}\n@@ -69,7 +69,7 @@ function Collections() {\n                 ) : undefined\n               }\n               renderError={(props) => <StyledError {...props} />}\n-              renderItem={(item: Collection, index) => (\n+              renderItem={(item, index) => (\n                 <DraggableCollectionLink\n                   key={item.id}\n                   collection={item}\n\ndiff --git a/app/scenes/Document/components/Insights.tsx b/app/scenes/Document/components/Insights.tsx\nindex f9ead39b3ff5..d62debca986c 100644\n--- a/app/scenes/Document/components/Insights.tsx\n+++ b/app/scenes/Document/components/Insights.tsx\n@@ -144,10 +144,10 @@ function Insights() {\n                     small\n                   />\n                 )}\n-                <PaginatedList\n+                <PaginatedList<User>\n                   aria-label={t(\""Contributors\"")}\n                   items={document.collaborators}\n-                  renderItem={(model: User) => (\n+                  renderItem={(model) => (\n                     <ListItem\n                       key={model.id}\n                       title={model.name}\n\ndiff --git a/app/scenes/Settings/ApiKeys.tsx b/app/scenes/Settings/ApiKeys.tsx\nindex ca411e393547..b9989d7fff65 100644\n--- a/app/scenes/Settings/ApiKeys.tsx\n+++ b/app/scenes/Settings/ApiKeys.tsx\n@@ -58,11 +58,11 @@ function ApiKeys() {\n           }}\n         />\n       </Text>\n-      <PaginatedList\n+      <PaginatedList<ApiKey>\n         fetch={apiKeys.fetchPage}\n         items={apiKeys.orderedData}\n         heading={<h2>{t(\""All\"")}</h2>}\n-        renderItem={(apiKey: ApiKey) => (\n+        renderItem={(apiKey) => (\n           <ApiKeyListItem key={apiKey.id} apiKey={apiKey} />\n         )}\n       />\n\ndiff --git a/app/scenes/Settings/Export.tsx b/app/scenes/Settings/Export.tsx\nindex ad1652f97172..4cf83553f653 100644\n--- a/app/scenes/Settings/Export.tsx\n+++ b/app/scenes/Settings/Export.tsx\n@@ -48,7 +48,7 @@ function Export() {\n         {t(\""Export data\"")}\u2026\n       </Button>\n       <br />\n-      <PaginatedList\n+      <PaginatedList<FileOperation>\n         items={fileOperations.exports}\n         fetch={fileOperations.fetchPage}\n         options={{\n@@ -59,7 +59,7 @@ function Export() {\n             <Trans>Recent exports</Trans>\n           </h2>\n         }\n-        renderItem={(item: FileOperation) => (\n+        renderItem={(item) => (\n           <FileOperationListItem key={item.id} fileOperation={item} />\n         )}\n       />\n\ndiff --git a/app/scenes/Settings/Import.tsx b/app/scenes/Settings/Import.tsx\nindex 7de0063880fc..838644b96ff4 100644\n--- a/app/scenes/Settings/Import.tsx\n+++ b/app/scenes/Settings/Import.tsx\n@@ -183,7 +183,7 @@ function Import() {\n         ))}\n       </div>\n       <br />\n-      <PaginatedList\n+      <PaginatedList<ImportModel | FileOperation>\n         items={allImports}\n         fetch={fetchImports}\n         heading={\n@@ -191,7 +191,7 @@ function Import() {\n             <Trans>Recent imports</Trans>\n           </h2>\n         }\n-        renderItem={(item: ImportModel | FileOperation) =>\n+        renderItem={(item) =>\n           item instanceof ImportModel ? (\n             <ImportListItem key={item.id} importModel={item} />\n           ) : (\n\ndiff --git a/app/scenes/Settings/PersonalApiKeys.tsx b/app/scenes/Settings/PersonalApiKeys.tsx\nindex b0bfaf6c6288..32bb83d0c6ae 100644\n--- a/app/scenes/Settings/PersonalApiKeys.tsx\n+++ b/app/scenes/Settings/PersonalApiKeys.tsx\n@@ -61,12 +61,12 @@ function PersonalApiKeys() {\n           }}\n         />\n       </Text>\n-      <PaginatedList\n+      <PaginatedList<ApiKey>\n         fetch={apiKeys.fetchPage}\n         items={apiKeys.personalApiKeys}\n         options={{ userId: user.id }}\n         heading={<h2>{t(\""Personal keys\"")}</h2>}\n-        renderItem={(apiKey: ApiKey) => (\n+        renderItem={(apiKey) => (\n           <ApiKeyListItem key={apiKey.id} apiKey={apiKey} />\n         )}\n       />\n\ndiff --git a/app/scenes/Settings/components/GroupDialogs.tsx b/app/scenes/Settings/components/GroupDialogs.tsx\nindex 6941cf78e80c..7ca290e0b286 100644\n--- a/app/scenes/Settings/components/GroupDialogs.tsx\n+++ b/app/scenes/Settings/components/GroupDialogs.tsx\n@@ -268,14 +268,14 @@ export const ViewGroupMembersDialog = observer(function ({\n       <Subheading>\n         <Trans>Members</Trans>\n       </Subheading>\n-      <PaginatedList\n+      <PaginatedList<User>\n         items={users.inGroup(group.id)}\n         fetch={groupUsers.fetchPage}\n         options={{\n           id: group.id,\n         }}\n         empty={<Empty>{t(\""This group has no members.\"")}</Empty>}\n-        renderItem={(user: User) => (\n+        renderItem={(user) => (\n           <GroupMemberListItem\n             key={user.id}\n             user={user}\n@@ -382,7 +382,7 @@ const AddPeopleToGroupDialog = observer(function ({\n           <PlaceholderList count={5} />\n         </DelayedMount>\n       ) : (\n-        <PaginatedList\n+        <PaginatedList<User>\n           empty={\n             query ? (\n               <Empty>{t(\""No people matching your search\"")}</Empty>\n@@ -392,7 +392,7 @@ const AddPeopleToGroupDialog = observer(function ({\n           }\n           items={users.notInGroup(group.id, query)}\n           fetch={query ? undefined : users.fetchPage}\n-          renderItem={(item: User) => (\n+          renderItem={(item) => (\n             <GroupMemberListItem\n               key={item.id}\n               user={item}\n\ndiff --git a/plugins/webhooks/client/Settings.tsx b/plugins/webhooks/client/Settings.tsx\nindex ccc3f736012f..c972d7c66696 100644\n--- a/plugins/webhooks/client/Settings.tsx\n+++ b/plugins/webhooks/client/Settings.tsx\n@@ -52,18 +52,18 @@ function Webhooks() {\n           in near real-time.\n         </Trans>\n       </Text>\n-      <PaginatedList\n+      <PaginatedList<WebhookSubscription>\n         fetch={webhookSubscriptions.fetchPage}\n         items={webhookSubscriptions.enabled}\n         heading={<h2>{t(\""Active\"")}</h2>}\n-        renderItem={(webhook: WebhookSubscription) => (\n+        renderItem={(webhook) => (\n           <WebhookSubscriptionListItem key={webhook.id} webhook={webhook} />\n         )}\n       />\n-      <PaginatedList\n+      <PaginatedList<WebhookSubscription>\n         items={webhookSubscriptions.disabled}\n         heading={<h2>{t(\""Inactive\"")}</h2>}\n-        renderItem={(webhook: WebhookSubscription) => (\n+        renderItem={(webhook) => (\n           <WebhookSubscriptionListItem key={webhook.id} webhook={webhook} />\n         )}\n       />\n"", ""test_patch"": ""diff --git a/app/components/PaginatedList.test.tsx b/app/components/PaginatedList.test.tsx\nindex 2a04ca2c96ea..3adb9b5c9b82 100644\n--- a/app/components/PaginatedList.test.tsx\n+++ b/app/components/PaginatedList.test.tsx\n@@ -1,13 +1,15 @@\n import \""../stores\"";\n import { render } from \""@testing-library/react\"";\n import { TFunction } from \""i18next\"";\n+import { Provider } from \""mobx-react\"";\n import * as React from \""react\"";\n import { getI18n } from \""react-i18next\"";\n import { Pagination } from \""@shared/constants\"";\n-import { Component as PaginatedList } from \""./PaginatedList\"";\n+import PaginatedList from \""./PaginatedList\"";\n \n describe(\""PaginatedList\"", () => {\n   const i18n = getI18n();\n+  const authStore = {};\n \n   const props = {\n     i18n,\n@@ -17,19 +19,23 @@ describe(\""PaginatedList\"", () => {\n \n   it(\""with no items renders nothing\"", () => {\n     const result = render(\n-      <PaginatedList items={[]} renderItem={render} {...props} />\n+      <Provider auth={authStore}>\n+        <PaginatedList items={[]} renderItem={render} {...props} />\n+      </Provider>\n     );\n     expect(result.container.innerHTML).toEqual(\""\"");\n   });\n \n   it(\""with no items renders empty prop\"", async () => {\n     const result = render(\n-      <PaginatedList\n-        items={[]}\n-        empty={<p>Sorry, no results</p>}\n-        renderItem={render}\n-        {...props}\n-      />\n+      <Provider auth={authStore}>\n+        <PaginatedList\n+          items={[]}\n+          empty={<p>Sorry, no results</p>}\n+          renderItem={render}\n+          {...props}\n+        />{\"" \""}\n+      </Provider>\n     );\n     await expect(\n       result.findAllByText(\""Sorry, no results\"")\n@@ -42,13 +48,15 @@ describe(\""PaginatedList\"", () => {\n       id: \""one\"",\n     };\n     render(\n-      <PaginatedList\n-        items={[]}\n-        fetch={fetch}\n-        options={options}\n-        renderItem={render}\n-        {...props}\n-      />\n+      <Provider auth={authStore}>\n+        <PaginatedList\n+          items={[]}\n+          fetch={fetch}\n+          options={options}\n+          renderItem={render}\n+          {...props}\n+        />{\"" \""}\n+      </Provider>\n     );\n     expect(fetch).toHaveBeenCalledWith({\n       ...options,\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-9025"", ""pr_id"": 9025, ""issue_id"": 8935, ""repo"": ""outline/outline"", ""problem_statement"": ""Avatars fail to load with 404 error in v0.83.0\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\nHey Outline team! \ud83d\udc4b I'm reporting an issue where user avatars aren't loading correctly after logging in via CASDOOR OIDC. Specifically, when trying to fetch an avatar, the API returns a 404 error, even though the file exists in the Docker volume. \n\n![Image](https://github.com/user-attachments/assets/df2920b1-7728-4b09-9e9f-14d955852fbb)\n\n### Expected Behavior\n\navatars should load correctly without any errors. The API should return the file resource if it exists in the volume, resulting in a successful image display (e.g., HTTP 200 status with the image data).\n\n### Steps To Reproduce\n\n1. Set up Outline v0.83.0 with CASDOOR OIDC authentication enabled.\n2. Log in to Outline using a CASDOOR OIDC account.\n3. Navigate to outline /settings/members where avatars are displayed.\n4. Observe the avatar request failing with a 404 error on the API endpoint: `https://outline.mydomin.com/api/files.get?key=avatars/241ce70d-450b-4c4c-94ab-f16802fcc6cf/308dd2a6-a9b9-4f73-a14c-4f242205c944`.\n`{\""ok\"":false,\""error\"":\""not_found\"",\""status\"":404,\""message\"":\""Resource not found\""}`\n![Image](https://github.com/user-attachments/assets/67d2fb2f-c9d7-4a35-a423-dd6a99690dab)\n\n5. Verify the file exists in the Docker volume.\n\n![Image](https://github.com/user-attachments/assets/eb78f439-4e43-43bb-9b66-c5de4be939a6)\n\n### Environment\n\n```markdown\n- Outline:0.83.0\n- Browser:Edge,Chrome\n```\n\n### Anything else?\n\n### Environment\n\n- **Outline Version:** v0.83.0\n- **Operating System:** Windows11 WSL docker\n- **Browser:** Chrome 135.0.7049.85, Edge 135.0.3179.66; \n- **Docker Version:** Docker version 27.1.1, build 6312585\n- **OIDC Provider:** CASDOOR\n\n**Key details:**\n- API endpoint: `https://outline.mydomin.com/api/files.get?key=avatars/241ce70d-450b-4c4c-94ab-f16802fcc6cf/308dd2a6-a9b9-4f73-a14c-4f242205c944`\n- Error response: `{\""ok\"":false,\""error\"":\""not_found\"",\""status\"":404,\""message\"":\""Resource not found\""}`\n- I've confirmed the resource exists in the Docker volume, but it's not being accessed successfully.\n- The problem appears isolated to OIDC-automated avatar imports (`avatars/` path), which might not be processing file keys or permissions correctly, while manually uploaded avatars (`public/` path) function normally.\n\n**Possible cause:** This could be related to how OIDC authentication handles file paths or permissions. For e.g., the OIDC flow might not be passing the correct context or tokens needed for the API to resolve the file key, leading to a \""not found\"" error despite the file being present. IMO, it might involve misconfigurations in Outline's OIDC integration, such as incorrect URL mappings, authentication scopes, or Docker volume mounting issues that affect file accessibility post-login."", ""issue_word_count"": 440, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""plugins/storage/server/api/files.test.ts"", ""plugins/storage/server/api/files.ts"", ""server/models/Attachment.ts""], ""pr_changed_test_files"": [""plugins/storage/server/api/files.test.ts""], ""base_commit"": ""6b497cf1ec01c8a05e9d93f53239ccb19acf68b9"", ""head_commit"": ""684d6ebce1d67d220df1c7264b02a3dd3f2c39a1"", ""repo_url"": ""https://github.com/outline/outline/pull/9025"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/9025"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-23T01:23:51.000Z"", ""patch"": ""diff --git a/plugins/storage/server/api/files.ts b/plugins/storage/server/api/files.ts\nindex 963e86933519..b70aadca2791 100644\n--- a/plugins/storage/server/api/files.ts\n+++ b/plugins/storage/server/api/files.ts\n@@ -78,17 +78,13 @@ router.get(\n     const { isPublicBucket, fileName } = AttachmentHelper.parseKey(key);\n     const skipAuthorize = isPublicBucket || isSignedRequest;\n     const cacheHeader = \""max-age=604800, immutable\"";\n-\n-    const attachment = await Attachment.findOne({\n-      where: { key },\n-    });\n-\n-    // Attachment is requested with a key, but it was not found\n-    if (!attachment && !!ctx.input.query.key) {\n-      throw NotFoundError();\n-    }\n+    const attachment = await Attachment.findByKey(key);\n \n     if (!skipAuthorize) {\n+      if (!attachment && !!ctx.input.query.key) {\n+        throw NotFoundError();\n+      }\n+\n       authorize(actor, \""read\"", attachment);\n     }\n \n\ndiff --git a/server/models/Attachment.ts b/server/models/Attachment.ts\nindex 5b6baf5de229..a24b39d75df2 100644\n--- a/server/models/Attachment.ts\n+++ b/server/models/Attachment.ts\n@@ -5,6 +5,7 @@ import {\n   InferAttributes,\n   InferCreationAttributes,\n   QueryTypes,\n+  FindOptions,\n } from \""sequelize\"";\n import {\n   BeforeDestroy,\n@@ -164,6 +165,20 @@ class Attachment extends IdModel<\n \n   // static methods\n \n+  /**\n+   * Find an attachment by its key.\n+   *\n+   * @param key - The key of the attachment to find.\n+   * @param options - Additional options for the query.\n+   * @returns A promise resolving to the attachment with the given key, or null if not found.\n+   */\n+  static async findByKey(\n+    key: string,\n+    options?: FindOptions<Attachment>\n+  ): Promise<Attachment | null> {\n+    return this.findOne({ where: { key }, ...options });\n+  }\n+\n   /**\n    * Get the total size of all attachments for a given team.\n    *\n"", ""test_patch"": ""diff --git a/plugins/storage/server/api/files.test.ts b/plugins/storage/server/api/files.test.ts\nindex f6ed0ab03415..16bf3503db52 100644\n--- a/plugins/storage/server/api/files.test.ts\n+++ b/plugins/storage/server/api/files.test.ts\n@@ -277,6 +277,35 @@ describe(\""#files.get\"", () => {\n     );\n   });\n \n+  it(\""should succeed with status 200 ok when avatar is requested using key\"", async () => {\n+    const user = await buildUser();\n+    const key = path.join(\""avatars\"", user.id, uuidV4());\n+    const attachment = await buildAttachment({\n+      key,\n+      teamId: user.teamId,\n+      userId: user.id,\n+      contentType: \""image/jpg\"",\n+      acl: \""public-read\"",\n+    });\n+\n+    await attachment.destroy({\n+      hooks: false,\n+    });\n+\n+    ensureDirSync(\n+      path.dirname(path.join(env.FILE_STORAGE_LOCAL_ROOT_DIR, key))\n+    );\n+\n+    copyFileSync(\n+      path.resolve(__dirname, \""..\"", \""test\"", \""fixtures\"", \""avatar.jpg\""),\n+      path.join(env.FILE_STORAGE_LOCAL_ROOT_DIR, key)\n+    );\n+\n+    const res = await server.get(`/api/files.get?key=${key}`);\n+    expect(res.status).toEqual(200);\n+    expect(res.headers.get(\""Content-Disposition\"")).toEqual(\""attachment\"");\n+  });\n+\n   it(\""should succeed with status 200 ok when avatar is requested using key\"", async () => {\n     const user = await buildUser();\n     const key = path.join(\""avatars\"", user.id, uuidV4());\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8997"", ""pr_id"": 8997, ""issue_id"": 8807, ""repo"": ""outline/outline"", ""problem_statement"": ""Comment notifications are sent to more users than expected\nMaybe introduced here https://github.com/outline/outline/issues/4984 "", ""issue_word_count"": 10, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""server/models/helpers/NotificationHelper.test.ts"", ""server/models/helpers/NotificationHelper.ts"", ""server/queues/tasks/CommentCreatedNotificationsTask.ts""], ""pr_changed_test_files"": [""server/models/helpers/NotificationHelper.test.ts""], ""base_commit"": ""5789d65bf5b526eb554b45d9f2ab06d2bbc61ab0"", ""head_commit"": ""dcf0ab955b20821b36e2554245305a3908cbe0b8"", ""repo_url"": ""https://github.com/outline/outline/pull/8997"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8997"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-17T12:08:10.000Z"", ""patch"": ""diff --git a/server/models/helpers/NotificationHelper.ts b/server/models/helpers/NotificationHelper.ts\nindex 962a71fe565f..7f33e8a2963e 100644\n--- a/server/models/helpers/NotificationHelper.ts\n+++ b/server/models/helpers/NotificationHelper.ts\n@@ -1,4 +1,5 @@\n import uniq from \""lodash/uniq\"";\n+import uniqBy from \""lodash/uniqBy\"";\n import { Op } from \""sequelize\"";\n import {\n   NotificationEventType,\n@@ -187,7 +188,6 @@ export default class NotificationHelper {\n       });\n     } else {\n       const subscriptions = await Subscription.findAll({\n-        attributes: [\""userId\""],\n         where: {\n           userId: {\n             [Op.ne]: actorId,\n@@ -206,17 +206,19 @@ export default class NotificationHelper {\n         ],\n       });\n \n-      recipients = subscriptions.map((s) => s.user);\n+      recipients = uniqBy(\n+        subscriptions.map((s) => s.user),\n+        (user) => user.id\n+      );\n     }\n \n-    recipients = recipients.filter((recipient) =>\n-      recipient.subscribedToEventType(notificationType)\n-    );\n-\n     const filtered = [];\n \n     for (const recipient of recipients) {\n-      if (recipient.isSuspended) {\n+      if (\n+        recipient.isSuspended ||\n+        !recipient.subscribedToEventType(notificationType)\n+      ) {\n         continue;\n       }\n \n\ndiff --git a/server/queues/tasks/CommentCreatedNotificationsTask.ts b/server/queues/tasks/CommentCreatedNotificationsTask.ts\nindex 7e6f86ee305c..043ac32f3364 100644\n--- a/server/queues/tasks/CommentCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/CommentCreatedNotificationsTask.ts\n@@ -85,16 +85,21 @@ export default class CommentCreatedNotificationsTask extends BaseTask<CommentEve\n       )\n     ).filter((recipient) => !userIdsMentioned.includes(recipient.id));\n \n-    for (const recipient of recipients) {\n-      await Notification.create({\n-        event: NotificationEventType.CreateComment,\n-        userId: recipient.id,\n-        actorId: comment.createdById,\n-        teamId: document.teamId,\n-        commentId: comment.id,\n-        documentId: document.id,\n-      });\n-    }\n+    await sequelize.transaction(async (transaction) => {\n+      for (const recipient of recipients) {\n+        await Notification.create(\n+          {\n+            event: NotificationEventType.CreateComment,\n+            userId: recipient.id,\n+            actorId: comment.createdById,\n+            teamId: document.teamId,\n+            commentId: comment.id,\n+            documentId: document.id,\n+          },\n+          { transaction }\n+        );\n+      }\n+    });\n   }\n \n   public get options() {\n"", ""test_patch"": ""diff --git a/server/models/helpers/NotificationHelper.test.ts b/server/models/helpers/NotificationHelper.test.ts\nindex 45ad954714b5..71b624efa876 100644\n--- a/server/models/helpers/NotificationHelper.test.ts\n+++ b/server/models/helpers/NotificationHelper.test.ts\n@@ -251,6 +251,10 @@ describe(\""NotificationHelper\"", () => {\n         userId: subscribedUser.id,\n         collectionId: document.collectionId!,\n       });\n+      await buildSubscription({\n+        userId: subscribedUser.id,\n+        documentId: document.id,\n+      });\n \n       const recipients =\n         await NotificationHelper.getDocumentNotificationRecipients({\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8911"", ""pr_id"": 8911, ""issue_id"": 8908, ""repo"": ""outline/outline"", ""problem_statement"": ""Fallback to default `teamName` if `organization.displayName` is unavailable\n\n### Discussed in https://github.com/outline/outline/discussions/8907\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **nixent** April  8, 2025</sup>\nMicrosoft Entra Id SSO requires profile permissions to be able to read user data as well as `Organization.DisplayName`:\r\n`const teamName = organization.displayName;` [L103](https://github.com/outline/outline/blob/01a5ff031aef97f76a6b6066fc29333828964d64/plugins/azure/server/auth/azure.ts#L103)\r\n\r\nIn some Microsoft Entra Id configuration scenarios, `User.Read` permissions are not sufficient to fetch `Organization.DisplayName`, even though Microsoft documentation [states so](https://learn.microsoft.com/en-us/graph/api/organization-list?view=graph-rest-1.0&tabs=http#permissions). As a result Microsoft Entra SSO fails with `BadRequestError: Unable to load organization info from Microsoft Graph API: Insufficient privileges to complete the operation`. Issue #7932 refers to the same error. \r\nAssigning `Organisation.Read.All` permission helps to resolve the permissions issue but it requires Admin consent and also gives higher permissions than actually needed.\r\n\r\nSince `Organization.DisplayName` is used just to display team name, suggest making it optional/allow blank or configurable via env variable. \r\n\r\n</div>"", ""issue_word_count"": 179, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""plugins/discord/server/auth/discord.ts"", ""server/commands/accountProvisioner.test.ts"", ""server/commands/accountProvisioner.ts""], ""pr_changed_test_files"": [""server/commands/accountProvisioner.test.ts""], ""base_commit"": ""0d09e547577967cd754a0a23b1e23ac51f3b95c6"", ""head_commit"": ""bee91fe06db62f818b2cf6498f205873ada36987"", ""repo_url"": ""https://github.com/outline/outline/pull/8911"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8911"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-09T02:10:07.000Z"", ""patch"": ""diff --git a/plugins/discord/server/auth/discord.ts b/plugins/discord/server/auth/discord.ts\nindex 68ca804c3f8e..868b1065bb6c 100644\n--- a/plugins/discord/server/auth/discord.ts\n+++ b/plugins/discord/server/auth/discord.ts\n@@ -94,7 +94,7 @@ if (env.DISCORD_CLIENT_ID && env.DISCORD_CLIENT_SECRET) {\n \n           /** Default user and team names metadata */\n           let userName = profile.username;\n-          let teamName = \""Wiki\"";\n+          let teamName;\n           let userAvatarUrl: string = `https://cdn.discordapp.com/avatars/${profile.id}/${profile.avatar}.png`;\n           let teamAvatarUrl: string | undefined = undefined;\n           let subdomain = slugifyDomain(domain);\n\ndiff --git a/server/commands/accountProvisioner.ts b/server/commands/accountProvisioner.ts\nindex 0e02f03bcf13..566826593943 100644\n--- a/server/commands/accountProvisioner.ts\n+++ b/server/commands/accountProvisioner.ts\n@@ -43,7 +43,7 @@ type Props = {\n      */\n     teamId?: string;\n     /** The displayed name of the team */\n-    name: string;\n+    name?: string;\n     /** The domain name from the email of the user logging in */\n     domain?: string;\n     /** The preferred subdomain to provision for the team if not yet created */\n@@ -92,6 +92,7 @@ async function accountProvisioner({\n \n   try {\n     result = await teamProvisioner({\n+      name: \""Wiki\"",\n       ...teamParams,\n       authenticationProvider: authenticationProviderParams,\n       ip,\n"", ""test_patch"": ""diff --git a/server/commands/accountProvisioner.test.ts b/server/commands/accountProvisioner.test.ts\nindex 6adc22e9a0c3..eac8bd16fa3b 100644\n--- a/server/commands/accountProvisioner.test.ts\n+++ b/server/commands/accountProvisioner.test.ts\n@@ -264,7 +264,6 @@ describe(\""accountProvisioner\"", () => {\n             avatarUrl: faker.internet.avatar(),\n           },\n           team: {\n-            name: existingTeam.name,\n             avatarUrl: existingTeam.avatarUrl,\n             subdomain: faker.internet.domainWord(),\n           },\n@@ -308,7 +307,6 @@ describe(\""accountProvisioner\"", () => {\n           avatarUrl: faker.internet.avatar(),\n         },\n         team: {\n-          name: team.name,\n           avatarUrl: team.avatarUrl,\n           subdomain: faker.internet.domainWord(),\n         },\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8889"", ""pr_id"": 8889, ""issue_id"": 8873, ""repo"": ""outline/outline"", ""problem_statement"": ""Remove usage of (logo.clearbit.com)\n# :rotating_light: Deprecation Notice :rotating_light:\n\nClearbit's free Logo API (logo.clearbit.com) will be discontinued on **December 1, 2025**, and will stop working on that date.\n\n## What You Need to Know:\nWe have identified your project as one that uses logo.clearbit.com - you\u2019ll need to migrate to an alternative solution.\nWe\u2019ve shared detailed information and alternative approaches in [our announcement on the HubSpot Developer Community](https://developers.hubspot.com/changelog/upcoming-sunset-of-clearbits-free-logo-api).\n\n## Recommended Next Steps\n1. **Audit your code**: Identify where logo.clearbit.com is used\n2. **Consider alternatives**: Review options and recommendations in our official post\n3. **Update dependencies**: If this project is part of a larger system, notify relevant maintainers\n\nWe appreciate all the developers who have used this service over the years! Check out the [HubSpot Developer Community](https://developers.hubspot.com/changelog/upcoming-sunset-of-clearbits-free-logo-api) for more details.\n"", ""issue_word_count"": 154, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""server/commands/teamCreator.ts"", ""server/utils/avatars.test.ts"", ""server/utils/avatars.ts""], ""pr_changed_test_files"": [""server/utils/avatars.test.ts""], ""base_commit"": ""f9476770cebbc90d0321f89a58a97589c888a407"", ""head_commit"": ""bab2729669bee8dec77c73aeeae984fc61f92756"", ""repo_url"": ""https://github.com/outline/outline/pull/8889"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8889"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-06T23:01:23.000Z"", ""patch"": ""diff --git a/server/commands/teamCreator.ts b/server/commands/teamCreator.ts\nindex f78f984ac600..ac8804ea12ea 100644\n--- a/server/commands/teamCreator.ts\n+++ b/server/commands/teamCreator.ts\n@@ -3,7 +3,6 @@ import slugify from \""slugify\"";\n import { RESERVED_SUBDOMAINS } from \""@shared/utils/domains\"";\n import { traceFunction } from \""@server/logging/tracing\"";\n import { Team, Event } from \""@server/models\"";\n-import { generateAvatarUrl } from \""@server/utils/avatars\"";\n \n type Props = {\n   /** The displayed name of the team */\n@@ -29,20 +28,14 @@ type Props = {\n \n async function teamCreator({\n   name,\n-  domain,\n   subdomain,\n   avatarUrl,\n   authenticationProviders,\n   ip,\n   transaction,\n }: Props): Promise<Team> {\n-  // If the service did not provide a logo/avatar then we attempt to generate\n-  // one via ClearBit, or fallback to colored initials in worst case scenario\n-  if (!avatarUrl || !avatarUrl.startsWith(\""http\"")) {\n-    avatarUrl = await generateAvatarUrl({\n-      domain,\n-      id: subdomain,\n-    });\n+  if (!avatarUrl?.startsWith(\""http\"")) {\n+    avatarUrl = null;\n   }\n \n   const team = await Team.create(\n\ndiff --git a/server/utils/avatars.ts b/server/utils/avatars.ts\ndeleted file mode 100644\nindex fee5a372b1b5..000000000000\n--- a/server/utils/avatars.ts\n+++ /dev/null\n@@ -1,28 +0,0 @@\n-import crypto from \""crypto\"";\n-import fetch from \""./fetch\"";\n-\n-export async function generateAvatarUrl({\n-  id,\n-  domain,\n-}: {\n-  id: string;\n-  domain?: string;\n-}) {\n-  // attempt to get logo from Clearbit API. If one doesn't exist then\n-  // fall back to using tiley to generate a placeholder logo\n-  const hash = crypto.createHash(\""sha256\"");\n-  hash.update(id);\n-  let cbResponse, cbUrl;\n-\n-  if (domain) {\n-    cbUrl = `https://logo.clearbit.com/${domain}`;\n-\n-    try {\n-      cbResponse = await fetch(cbUrl);\n-    } catch (err) {\n-      // okay\n-    }\n-  }\n-\n-  return cbUrl && cbResponse && cbResponse.status === 200 ? cbUrl : null;\n-}\n"", ""test_patch"": ""diff --git a/server/utils/avatars.test.ts b/server/utils/avatars.test.ts\ndeleted file mode 100644\nindex 9bffe6c89133..000000000000\n--- a/server/utils/avatars.test.ts\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-import { generateAvatarUrl } from \""./avatars\"";\n-\n-it(\""should return clearbit url if available\"", async () => {\n-  const url = await generateAvatarUrl({\n-    id: \""google\"",\n-    domain: \""google.com\"",\n-  });\n-  expect(url).toBe(\""https://logo.clearbit.com/google.com\"");\n-});\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8832"", ""pr_id"": 8832, ""issue_id"": 8757, ""repo"": ""outline/outline"", ""problem_statement"": ""Cleanup the old Notion importer\nWe should remove the old file-based importer before next release (v0.84.0). This is all the Notion logic that is not contained under `/plugins/` "", ""issue_word_count"": 26, ""test_files_count"": 3, ""non_test_files_count"": 4, ""pr_changed_files"": [""app/scenes/Settings/components/ImportNotionDialog.tsx"", ""server/queues/processors/FileOperationCreatedProcessor.ts"", ""server/queues/tasks/ImportNotionTask.test.ts"", ""server/queues/tasks/ImportNotionTask.ts"", ""server/test/fixtures/notion-html.zip"", ""server/test/fixtures/notion-markdown.zip"", ""shared/i18n/locales/en_US/translation.json""], ""pr_changed_test_files"": [""server/queues/tasks/ImportNotionTask.test.ts"", ""server/test/fixtures/notion-html.zip"", ""server/test/fixtures/notion-markdown.zip""], ""base_commit"": ""dcb7b86df8f096053fc715c7cf745a4d0cdfd1b9"", ""head_commit"": ""b57bae00b93b8ad306c3dd4d1488a691215a6a20"", ""repo_url"": ""https://github.com/outline/outline/pull/8832"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8832"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-06T16:04:35.000Z"", ""patch"": ""diff --git a/app/scenes/Settings/components/ImportNotionDialog.tsx b/app/scenes/Settings/components/ImportNotionDialog.tsx\ndeleted file mode 100644\nindex b0bc119f6c3b..000000000000\n--- a/app/scenes/Settings/components/ImportNotionDialog.tsx\n+++ /dev/null\n@@ -1,36 +0,0 @@\n-import * as React from \""react\"";\n-import { Trans, useTranslation } from \""react-i18next\"";\n-import { FileOperationFormat } from \""@shared/types\"";\n-import useStores from \""~/hooks/useStores\"";\n-import DropToImport from \""./DropToImport\"";\n-import HelpDisclosure from \""./HelpDisclosure\"";\n-\n-function ImportNotionDialog() {\n-  const { t } = useTranslation();\n-  const { dialogs } = useStores();\n-\n-  return (\n-    <>\n-      <HelpDisclosure title={<Trans>Where do I find the file?</Trans>}>\n-        <Trans\n-          defaults=\""In Notion, click <em>Settings & Members</em> in the left sidebar and open Settings. Look for the Export section, and click <em>Export all workspace content</em>. Choose <em>HTML</em> as the format for the best data compatability.\""\n-          components={{\n-            em: <strong />,\n-          }}\n-        />\n-      </HelpDisclosure>\n-      <DropToImport\n-        onSubmit={dialogs.closeAllModals}\n-        format={FileOperationFormat.Notion}\n-      >\n-        <>\n-          {t(\n-            `Drag and drop the zip file from Notion's HTML export option, or click to upload`\n-          )}\n-        </>\n-      </DropToImport>\n-    </>\n-  );\n-}\n-\n-export default ImportNotionDialog;\n\ndiff --git a/server/queues/processors/FileOperationCreatedProcessor.ts b/server/queues/processors/FileOperationCreatedProcessor.ts\nindex f88ed8011be8..ed0ef08871b6 100644\n--- a/server/queues/processors/FileOperationCreatedProcessor.ts\n+++ b/server/queues/processors/FileOperationCreatedProcessor.ts\n@@ -6,7 +6,6 @@ import ExportJSONTask from \""../tasks/ExportJSONTask\"";\n import ExportMarkdownZipTask from \""../tasks/ExportMarkdownZipTask\"";\n import ImportJSONTask from \""../tasks/ImportJSONTask\"";\n import ImportMarkdownZipTask from \""../tasks/ImportMarkdownZipTask\"";\n-import ImportNotionTask from \""../tasks/ImportNotionTask\"";\n import BaseProcessor from \""./BaseProcessor\"";\n \n export default class FileOperationCreatedProcessor extends BaseProcessor {\n@@ -25,11 +24,6 @@ export default class FileOperationCreatedProcessor extends BaseProcessor {\n             fileOperationId: event.modelId,\n           });\n           break;\n-        case FileOperationFormat.Notion:\n-          await ImportNotionTask.schedule({\n-            fileOperationId: event.modelId,\n-          });\n-          break;\n         case FileOperationFormat.JSON:\n           await ImportJSONTask.schedule({\n             fileOperationId: event.modelId,\n\ndiff --git a/server/queues/tasks/ImportNotionTask.ts b/server/queues/tasks/ImportNotionTask.ts\ndeleted file mode 100644\nindex 36ccd640ee44..000000000000\n--- a/server/queues/tasks/ImportNotionTask.ts\n+++ /dev/null\n@@ -1,354 +0,0 @@\n-import path from \""path\"";\n-import fs from \""fs-extra\"";\n-import compact from \""lodash/compact\"";\n-import escapeRegExp from \""lodash/escapeRegExp\"";\n-import mime from \""mime-types\"";\n-import { v4 as uuidv4 } from \""uuid\"";\n-import documentImporter from \""@server/commands/documentImporter\"";\n-import { createContext } from \""@server/context\"";\n-import Logger from \""@server/logging/Logger\"";\n-import { FileOperation, User } from \""@server/models\"";\n-import { sequelize } from \""@server/storage/database\"";\n-import ImportHelper, { FileTreeNode } from \""@server/utils/ImportHelper\"";\n-import ImportTask, { StructuredImportData } from \""./ImportTask\"";\n-\n-export default class ImportNotionTask extends ImportTask {\n-  public async parseData(\n-    dirPath: string,\n-    fileOperation: FileOperation\n-  ): Promise<StructuredImportData> {\n-    const tree = await ImportHelper.toFileTree(dirPath);\n-    if (!tree) {\n-      throw new Error(\""Could not find valid content in zip file\"");\n-    }\n-\n-    // New Notion exports have a single folder with the name of the export, we must skip this\n-    // folder and go directly to the children.\n-    let parsed;\n-    if (\n-      tree.children.length === 1 &&\n-      tree.children[0].children.find((child) => child.title === \""index\"")\n-    ) {\n-      parsed = await this.parseFileTree(\n-        fileOperation,\n-        tree.children[0].children.filter((child) => child.title !== \""index\"")\n-      );\n-    } else {\n-      parsed = await this.parseFileTree(fileOperation, tree.children);\n-    }\n-\n-    if (parsed.documents.length === 0 && parsed.collections.length === 1) {\n-      const collection = parsed.collections[0];\n-      const collectionId = uuidv4();\n-      if (collection.description) {\n-        parsed.documents.push({\n-          title: collection.name,\n-          icon: collection.icon,\n-          color: collection.color,\n-          path: \""\"",\n-          text: String(collection.description),\n-          id: collection.id,\n-          externalId: collection.externalId,\n-          mimeType: \""text/html\"",\n-          collectionId,\n-        });\n-      }\n-\n-      collection.name = \""Notion\"";\n-      collection.icon = undefined;\n-      collection.color = undefined;\n-      collection.externalId = undefined;\n-      collection.description = undefined;\n-      collection.id = collectionId;\n-    }\n-\n-    return parsed;\n-  }\n-\n-  /**\n-   * Converts the file structure from zipAsFileTree into documents,\n-   * collections, and attachments.\n-   *\n-   * @param fileOperation The file operation\n-   * @param tree An array of FileTreeNode representing root files in the zip\n-   * @returns A StructuredImportData object\n-   */\n-  private async parseFileTree(\n-    fileOperation: FileOperation,\n-    tree: FileTreeNode[]\n-  ): Promise<StructuredImportData> {\n-    const user = await User.findByPk(fileOperation.userId, {\n-      rejectOnEmpty: true,\n-    });\n-\n-    const output: StructuredImportData = {\n-      collections: [],\n-      documents: [],\n-      attachments: [],\n-    };\n-\n-    const parseNodeChildren = async (\n-      children: FileTreeNode[],\n-      collectionId: string,\n-      parentDocumentId?: string\n-    ): Promise<void> => {\n-      await Promise.all(\n-        children.map(async (child) => {\n-          // Ignore the CSV's for databases upfront\n-          if (child.path.endsWith(\"".csv\"")) {\n-            return;\n-          }\n-\n-          const id = uuidv4();\n-          const match = child.title.match(this.NotionUUIDRegex);\n-          const name = child.title.replace(this.NotionUUIDRegex, \""\"");\n-          const externalId = match ? match[0].trim() : undefined;\n-\n-          // If it's not a text file we're going to treat it as an attachment.\n-          const mimeType = mime.lookup(child.name);\n-          const isDocument =\n-            mimeType === \""text/markdown\"" ||\n-            mimeType === \""text/plain\"" ||\n-            mimeType === \""text/html\"";\n-\n-          // If it's not a document and not a folder, treat it as an attachment\n-          if (!isDocument && mimeType) {\n-            output.attachments.push({\n-              id,\n-              name: child.name,\n-              path: child.path,\n-              mimeType,\n-              buffer: () => fs.readFile(child.path),\n-              externalId,\n-            });\n-            return;\n-          }\n-\n-          Logger.debug(\""task\"", `Processing ${name} as ${mimeType}`);\n-\n-          const { title, icon, text } = await sequelize.transaction(\n-            async (transaction) =>\n-              documentImporter({\n-                mimeType: mimeType || \""text/markdown\"",\n-                fileName: name,\n-                content:\n-                  child.children.length > 0\n-                    ? \""\""\n-                    : await fs.readFile(child.path, \""utf8\""),\n-                user,\n-                ctx: createContext({ user, transaction }),\n-              })\n-          );\n-\n-          const existingDocumentIndex = output.documents.findIndex(\n-            (doc) => doc.externalId === externalId\n-          );\n-\n-          const existingDocument = output.documents[existingDocumentIndex];\n-\n-          // If there is an existing document with the same externalId that means\n-          // we've already parsed either a folder or a file referencing the same\n-          // document, as such we should merge.\n-          if (existingDocument) {\n-            if (existingDocument.text === \""\"") {\n-              output.documents[existingDocumentIndex].text = text;\n-            }\n-\n-            await parseNodeChildren(\n-              child.children,\n-              collectionId,\n-              existingDocument.id\n-            );\n-          } else {\n-            output.documents.push({\n-              id,\n-              title,\n-              icon,\n-              text,\n-              collectionId,\n-              parentDocumentId,\n-              path: child.path,\n-              mimeType: mimeType || \""text/markdown\"",\n-              externalId,\n-            });\n-            await parseNodeChildren(child.children, collectionId, id);\n-          }\n-        })\n-      );\n-    };\n-\n-    const replaceInternalLinksAndImages = (text: string) => {\n-      // Find if there are any images in this document\n-      const imagesInText = this.parseImages(text);\n-\n-      for (const image of imagesInText) {\n-        const name = path.basename(image.src);\n-        const attachment = output.attachments.find(\n-          (att) =>\n-            att.path.endsWith(image.src) ||\n-            encodeURI(att.path).endsWith(image.src)\n-        );\n-\n-        if (!attachment) {\n-          if (!image.src.startsWith(\""http\"")) {\n-            Logger.info(\n-              \""task\"",\n-              `Could not find referenced attachment with name ${name} and src ${image.src}`\n-            );\n-          }\n-        } else {\n-          text = text.replace(\n-            new RegExp(escapeRegExp(image.src), \""g\""),\n-            `<<${attachment.id}>>`\n-          );\n-        }\n-      }\n-\n-      // With Notion's HTML import, images sometimes come wrapped in anchor tags\n-      // This isn't supported in Outline's editor, so we need to strip them.\n-      text = text.replace(/\\[!\\[([^[]+)]/g, \""![]\"");\n-\n-      // Find if there are any links in this document pointing to other documents\n-      const internalLinksInText = this.parseInternalLinks(text);\n-\n-      // For each link update to the standardized format of <<documentId>>\n-      // instead of a relative or absolute URL within the original zip file.\n-      for (const link of internalLinksInText) {\n-        const doc = output.documents.find(\n-          (doc) => doc.externalId === link.externalId\n-        );\n-\n-        if (!doc) {\n-          Logger.info(\n-            \""task\"",\n-            `Could not find referenced document with externalId ${link.externalId}`\n-          );\n-        } else {\n-          text = text.replace(link.href, `<<${doc.id}>>`);\n-        }\n-      }\n-\n-      return text;\n-    };\n-\n-    // All nodes in the root level should become collections\n-    for (const node of tree) {\n-      const match = node.title.match(this.NotionUUIDRegex);\n-      const name = node.title.replace(this.NotionUUIDRegex, \""\"");\n-      const externalId = match ? match[0].trim() : undefined;\n-      const mimeType = mime.lookup(node.name);\n-\n-      const existingCollectionIndex = output.collections.findIndex(\n-        (collection) => collection.externalId === externalId\n-      );\n-      const existingCollection = output.collections[existingCollectionIndex];\n-      const collectionId = existingCollection?.id || uuidv4();\n-      let description;\n-\n-      // Root level docs become the descriptions of collections\n-      if (\n-        mimeType === \""text/markdown\"" ||\n-        mimeType === \""text/plain\"" ||\n-        mimeType === \""text/html\""\n-      ) {\n-        const { text } = await sequelize.transaction(async (transaction) =>\n-          documentImporter({\n-            mimeType,\n-            fileName: name,\n-            content: await fs.readFile(node.path, \""utf8\""),\n-            user,\n-            ctx: createContext({ user, transaction }),\n-          })\n-        );\n-\n-        description = text;\n-      } else if (node.children.length > 0) {\n-        await parseNodeChildren(node.children, collectionId);\n-      } else {\n-        Logger.debug(\""task\"", `Unhandled file in zip: ${node.path}`, {\n-          fileOperationId: fileOperation.id,\n-        });\n-        continue;\n-      }\n-\n-      if (existingCollectionIndex !== -1) {\n-        if (description) {\n-          output.collections[existingCollectionIndex].description = description;\n-        }\n-      } else {\n-        output.collections.push({\n-          id: collectionId,\n-          name,\n-          description,\n-          externalId,\n-        });\n-      }\n-    }\n-\n-    for (const document of output.documents) {\n-      document.text = replaceInternalLinksAndImages(document.text);\n-    }\n-\n-    for (const collection of output.collections) {\n-      if (typeof collection.description === \""string\"") {\n-        collection.description = replaceInternalLinksAndImages(\n-          collection.description\n-        );\n-      }\n-    }\n-\n-    return output;\n-  }\n-\n-  /**\n-   * Extracts internal links from a markdown document, taking into account the\n-   * externalId of the document, which is part of the link title.\n-   *\n-   * @param text The markdown text to parse\n-   * @returns An array of internal links\n-   */\n-  private parseInternalLinks(\n-    text: string\n-  ): { title: string; href: string; externalId: string }[] {\n-    return compact(\n-      [...text.matchAll(this.NotionLinkRegex)].map((match) => ({\n-        title: match[1],\n-        href: match[2],\n-        externalId: match[3],\n-      }))\n-    );\n-  }\n-\n-  /**\n-   * Extracts images from the markdown document\n-   *\n-   * @param text The markdown text to parse\n-   * @returns An array of internal links\n-   */\n-  private parseImages(text: string): { alt: string; src: string }[] {\n-    return compact(\n-      [...text.matchAll(this.ImageRegex)].map((match) => ({\n-        alt: match[1],\n-        src: match[2],\n-      }))\n-    );\n-  }\n-\n-  /**\n-   * Regex to find markdown images of all types\n-   */\n-  private ImageRegex =\n-    /!\\[(?<alt>[^\\][]*?)]\\((?<filename>[^\\][]*?)(?=\u201c|\\))\u201c?(?<title>[^\\][\u201d]+)?\u201d?\\)/g;\n-\n-  /**\n-   * Regex to find markdown links containing ID's that look like UUID's with the\n-   * \""-\""'s removed, Notion's externalId format.\n-   */\n-  private NotionLinkRegex = /\\[([^[]+)]\\((.*?([0-9a-fA-F]{32})\\..*?)\\)/g;\n-\n-  /**\n-   * Regex to find Notion document UUID's in the title of a document.\n-   */\n-  private NotionUUIDRegex =\n-    /\\s([0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}|[0-9a-fA-F]{32})$/;\n-}\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex ea9b9faab9bf..019dadf4fe26 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -903,9 +903,6 @@\n   \""{{ count }} document imported_plural\"": \""{{ count }} documents imported\"",\n   \""You can import a zip file that was previously exported from an Outline installation \u2013 collections, documents, and images will be imported. In Outline, open <em>Export</em> in the Settings sidebar and click on <em>Export Data</em>.\"": \""You can import a zip file that was previously exported from an Outline installation \u2013 collections, documents, and images will be imported. In Outline, open <em>Export</em> in the Settings sidebar and click on <em>Export Data</em>.\"",\n   \""Drag and drop the zip file from the Markdown export option in {{appName}}, or click to upload\"": \""Drag and drop the zip file from the Markdown export option in {{appName}}, or click to upload\"",\n-  \""Where do I find the file?\"": \""Where do I find the file?\"",\n-  \""In Notion, click <em>Settings & Members</em> in the left sidebar and open Settings. Look for the Export section, and click <em>Export all workspace content</em>. Choose <em>HTML</em> as the format for the best data compatability.\"": \""In Notion, click <em>Settings & Members</em> in the left sidebar and open Settings. Look for the Export section, and click <em>Export all workspace content</em>. Choose <em>HTML</em> as the format for the best data compatability.\"",\n-  \""Drag and drop the zip file from Notion's HTML export option, or click to upload\"": \""Drag and drop the zip file from Notion's HTML export option, or click to upload\"",\n   \""Last active\"": \""Last active\"",\n   \""Guest\"": \""Guest\"",\n   \""Shared by\"": \""Shared by\"",\n"", ""test_patch"": ""diff --git a/server/queues/tasks/ImportNotionTask.test.ts b/server/queues/tasks/ImportNotionTask.test.ts\ndeleted file mode 100644\nindex 01181bfa9a37..000000000000\n--- a/server/queues/tasks/ImportNotionTask.test.ts\n+++ /dev/null\n@@ -1,87 +0,0 @@\n-/* eslint-disable @typescript-eslint/no-empty-function */\n-import path from \""path\"";\n-import { FileOperation } from \""@server/models\"";\n-import { buildFileOperation } from \""@server/test/factories\"";\n-import ImportNotionTask from \""./ImportNotionTask\"";\n-\n-describe(\""ImportNotionTask\"", () => {\n-  it(\""should import successfully from a Markdown export\"", async () => {\n-    const fileOperation = await buildFileOperation();\n-    Object.defineProperty(fileOperation, \""handle\"", {\n-      get() {\n-        return {\n-          path: path.resolve(\n-            __dirname,\n-            \""..\"",\n-            \""..\"",\n-            \""test\"",\n-            \""fixtures\"",\n-            \""notion-markdown.zip\""\n-          ),\n-          cleanup: async () => {},\n-        };\n-      },\n-    });\n-    jest.spyOn(FileOperation, \""findByPk\"").mockResolvedValue(fileOperation);\n-\n-    const props = {\n-      fileOperationId: fileOperation.id,\n-    };\n-\n-    const task = new ImportNotionTask();\n-    const response = await task.perform(props);\n-\n-    expect(response.collections.size).toEqual(2);\n-    expect(response.documents.size).toEqual(6);\n-    expect(response.attachments.size).toEqual(1);\n-\n-    // Check that the image url was replaced in the text with a redirect\n-    const attachments = Array.from(response.attachments.values());\n-    const documents = Array.from(response.documents.values());\n-    expect(documents.map((d) => d.text).join(\""\"")).toContain(\n-      attachments[0].redirectUrl\n-    );\n-  });\n-\n-  it(\""should import successfully from a HTML export\"", async () => {\n-    const fileOperation = await buildFileOperation();\n-    Object.defineProperty(fileOperation, \""handle\"", {\n-      get() {\n-        return {\n-          path: path.resolve(\n-            __dirname,\n-            \""..\"",\n-            \""..\"",\n-            \""test\"",\n-            \""fixtures\"",\n-            \""notion-html.zip\""\n-          ),\n-          cleanup: async () => {},\n-        };\n-      },\n-    });\n-    jest.spyOn(FileOperation, \""findByPk\"").mockResolvedValue(fileOperation);\n-\n-    const props = {\n-      fileOperationId: fileOperation.id,\n-    };\n-\n-    const task = new ImportNotionTask();\n-    const response = await task.perform(props);\n-\n-    expect(response.collections.size).toEqual(2);\n-    expect(response.documents.size).toEqual(6);\n-    expect(response.attachments.size).toEqual(4);\n-\n-    // Check that the image url was replaced in the text with a redirect\n-    const attachments = Array.from(response.attachments.values());\n-    const attachment = attachments.find((att) =>\n-      att.key.endsWith(\""Screen_Shot_2022-04-21_at_2.23.26_PM.png\"")\n-    );\n-\n-    const documents = Array.from(response.documents.values());\n-    expect(documents.map((d) => d.text).join(\""\"")).toContain(\n-      attachment?.redirectUrl\n-    );\n-  });\n-});\n\ndiff --git a/server/test/fixtures/notion-html.zip b/server/test/fixtures/notion-html.zip\ndeleted file mode 100644\nindex 7ad29a287b71..000000000000\nBinary files a/server/test/fixtures/notion-html.zip and /dev/null differ\n\ndiff --git a/server/test/fixtures/notion-markdown.zip b/server/test/fixtures/notion-markdown.zip\ndeleted file mode 100644\nindex aaa6daa175d3..000000000000\nBinary files a/server/test/fixtures/notion-markdown.zip and /dev/null differ\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8809"", ""pr_id"": 8809, ""issue_id"": 8807, ""repo"": ""outline/outline"", ""problem_statement"": ""Comment notifications are sent to more users than expected\nMaybe introduced here https://github.com/outline/outline/issues/4984 "", ""issue_word_count"": 10, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""server/models/helpers/NotificationHelper.test.ts"", ""server/models/helpers/NotificationHelper.ts"", ""server/queues/tasks/DocumentPublishedNotificationsTask.ts"", ""server/queues/tasks/RevisionCreatedNotificationsTask.ts""], ""pr_changed_test_files"": [""server/models/helpers/NotificationHelper.test.ts""], ""base_commit"": ""e98d931aaa5c2aa55d35991c10d1cc4f1c4ec14e"", ""head_commit"": ""d25114cba3f407d8bf5bc2900fd60b70ae4ee7ca"", ""repo_url"": ""https://github.com/outline/outline/pull/8809"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8809"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-28T02:10:32.000Z"", ""patch"": ""diff --git a/server/models/helpers/NotificationHelper.ts b/server/models/helpers/NotificationHelper.ts\nindex 80db27505449..2d374677b941 100644\n--- a/server/models/helpers/NotificationHelper.ts\n+++ b/server/models/helpers/NotificationHelper.ts\n@@ -14,7 +14,7 @@ import {\n   Comment,\n   View,\n } from \""@server/models\"";\n-import { can } from \""@server/policies\"";\n+import { canUserAccessDocument } from \""@server/utils/permissions\"";\n import { ProsemirrorHelper } from \""./ProsemirrorHelper\"";\n \n export default class NotificationHelper {\n@@ -60,18 +60,12 @@ export default class NotificationHelper {\n     comment: Comment,\n     actorId: string\n   ): Promise<User[]> => {\n-    let recipients = await this.getDocumentNotificationRecipients({\n-      document,\n-      notificationType: NotificationEventType.CreateComment,\n-      onlySubscribers: !comment.parentCommentId,\n-      actorId,\n-    });\n-\n-    recipients = recipients.filter((recipient) =>\n-      recipient.subscribedToEventType(NotificationEventType.CreateComment)\n-    );\n+    let recipients: User[];\n \n-    if (recipients.length > 0 && comment.parentCommentId) {\n+    // If this is a reply to another comment, we want to notify all users\n+    // that are involved in the thread of this comment (i.e. the original\n+    // comment and all replies to it).\n+    if (comment.parentCommentId) {\n       const contextComments = await Comment.findAll({\n         attributes: [\""createdById\"", \""data\""],\n         where: {\n@@ -95,13 +89,37 @@ export default class NotificationHelper {\n       const userIdsInThread = uniq([\n         ...createdUserIdsInThread,\n         ...mentionedUserIdsInThread,\n-      ]);\n-      recipients = recipients.filter((r) => userIdsInThread.includes(r.id));\n+      ]).filter((userId) => userId !== actorId);\n+\n+      recipients = await User.findAll({\n+        where: {\n+          id: {\n+            [Op.in]: userIdsInThread,\n+          },\n+          teamId: document.teamId,\n+        },\n+      });\n+\n+      recipients = recipients.filter((recipient) =>\n+        recipient.subscribedToEventType(NotificationEventType.CreateComment)\n+      );\n+    } else {\n+      recipients = await this.getDocumentNotificationRecipients({\n+        document,\n+        notificationType: NotificationEventType.CreateComment,\n+        actorId,\n+        // We will check below, this just prevents duplicate queries\n+        disableAccessCheck: true,\n+      });\n     }\n \n     const filtered: User[] = [];\n \n     for (const recipient of recipients) {\n+      if (recipient.isSuspended) {\n+        continue;\n+      }\n+\n       // If this recipient has viewed the document since the comment was made\n       // then we can avoid sending them a useless notification, yay.\n       const view = await View.findOne({\n@@ -119,7 +137,13 @@ export default class NotificationHelper {\n           \""processor\"",\n           `suppressing notification to ${recipient.id} because doc viewed`\n         );\n-      } else {\n+        continue;\n+      }\n+\n+      // Check the recipient has access to the collection this document is in. Just\n+      // because they are subscribed doesn't mean they still have access to read\n+      // the document.\n+      if (await canUserAccessDocument(recipient, document.id)) {\n         filtered.push(recipient);\n       }\n     }\n@@ -132,24 +156,36 @@ export default class NotificationHelper {\n    *\n    * @param document The document to get recipients for.\n    * @param notificationType The notification type for which to find the recipients.\n-   * @param onlySubscribers Whether to consider only the users who have active subscription to the document.\n    * @param actorId The id of the user that performed the action.\n+   * @param disableAccessCheck Whether to disable the access check for the document.\n    * @returns A list of recipients\n    */\n   public static getDocumentNotificationRecipients = async ({\n     document,\n     notificationType,\n-    onlySubscribers,\n     actorId,\n+    disableAccessCheck = false,\n   }: {\n     document: Document;\n     notificationType: NotificationEventType;\n-    onlySubscribers: boolean;\n     actorId: string;\n+    disableAccessCheck?: boolean;\n   }): Promise<User[]> => {\n     let recipients: User[];\n \n-    if (onlySubscribers) {\n+    if (notificationType === NotificationEventType.PublishDocument) {\n+      recipients = await User.findAll({\n+        where: {\n+          id: {\n+            [Op.ne]: actorId,\n+          },\n+          teamId: document.teamId,\n+          notificationSettings: {\n+            [notificationType]: true,\n+          },\n+        },\n+      });\n+    } else {\n       const subscriptions = await Subscription.findAll({\n         attributes: [\""userId\""],\n         where: {\n@@ -170,15 +206,6 @@ export default class NotificationHelper {\n       });\n \n       recipients = subscriptions.map((s) => s.user);\n-    } else {\n-      recipients = await User.findAll({\n-        where: {\n-          id: {\n-            [Op.ne]: actorId,\n-          },\n-          teamId: document.teamId,\n-        },\n-      });\n     }\n \n     recipients = recipients.filter((recipient) =>\n@@ -188,18 +215,17 @@ export default class NotificationHelper {\n     const filtered = [];\n \n     for (const recipient of recipients) {\n-      if (!recipient.email || recipient.isSuspended) {\n+      if (recipient.isSuspended) {\n         continue;\n       }\n \n       // Check the recipient has access to the collection this document is in. Just\n       // because they are subscribed doesn't mean they still have access to read\n       // the document.\n-      const doc = await Document.findByPk(document.id, {\n-        userId: recipient.id,\n-      });\n-\n-      if (can(recipient, \""read\"", doc)) {\n+      if (\n+        disableAccessCheck ||\n+        (await canUserAccessDocument(recipient, document.id))\n+      ) {\n         filtered.push(recipient);\n       }\n     }\n\ndiff --git a/server/queues/tasks/DocumentPublishedNotificationsTask.ts b/server/queues/tasks/DocumentPublishedNotificationsTask.ts\nindex fbff48a5e65b..60290ca2d001 100644\n--- a/server/queues/tasks/DocumentPublishedNotificationsTask.ts\n+++ b/server/queues/tasks/DocumentPublishedNotificationsTask.ts\n@@ -54,7 +54,6 @@ export default class DocumentPublishedNotificationsTask extends BaseTask<Documen\n       await NotificationHelper.getDocumentNotificationRecipients({\n         document,\n         notificationType: NotificationEventType.PublishDocument,\n-        onlySubscribers: false,\n         actorId: document.lastModifiedById,\n       })\n     ).filter((recipient) => !userIdsMentioned.includes(recipient.id));\n\ndiff --git a/server/queues/tasks/RevisionCreatedNotificationsTask.ts b/server/queues/tasks/RevisionCreatedNotificationsTask.ts\nindex 7e19d39cbf09..a2df08539366 100644\n--- a/server/queues/tasks/RevisionCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/RevisionCreatedNotificationsTask.ts\n@@ -76,7 +76,6 @@ export default class RevisionCreatedNotificationsTask extends BaseTask<RevisionE\n       await NotificationHelper.getDocumentNotificationRecipients({\n         document,\n         notificationType: NotificationEventType.UpdateDocument,\n-        onlySubscribers: true,\n         actorId: document.lastModifiedById,\n       })\n     ).filter((recipient) => !userIdsMentioned.includes(recipient.id));\n"", ""test_patch"": ""diff --git a/server/models/helpers/NotificationHelper.test.ts b/server/models/helpers/NotificationHelper.test.ts\nindex 4cc18cec0504..e0b2282f0f37 100644\n--- a/server/models/helpers/NotificationHelper.test.ts\n+++ b/server/models/helpers/NotificationHelper.test.ts\n@@ -9,7 +9,7 @@ import NotificationHelper from \""./NotificationHelper\"";\n \n describe(\""NotificationHelper\"", () => {\n   describe(\""getCommentNotificationRecipients\"", () => {\n-    it(\""should return users who have notification enabled for comment creation and are subscribed to the document in case of parent comment\"", async () => {\n+    it(\""should only return users who have notification enabled for comment creation and are subscribed to the document in case of new thread\"", async () => {\n       const documentAuthor = await buildUser();\n       const document = await buildDocument({\n         userId: documentAuthor.id,\n@@ -54,7 +54,7 @@ describe(\""NotificationHelper\"", () => {\n       expect(recipients[0].id).toEqual(notificationEnabledUser.id);\n     });\n \n-    it(\""should return users who have notification enabled for comment creation and are in the thread in case of child comment\"", async () => {\n+    it(\""should only return users who have notification enabled for comment creation and are in the thread in case of child comment\"", async () => {\n       const documentAuthor = await buildUser();\n       const document = await buildDocument({\n         userId: documentAuthor.id,\n@@ -112,32 +112,104 @@ describe(\""NotificationHelper\"", () => {\n       expect(recipients.length).toEqual(1);\n       expect(recipients[0].id).toEqual(notificationEnabledUserInThread.id);\n     });\n-  });\n \n-  describe(\""getDocumentNotificationRecipients\"", () => {\n-    it(\""should return all users who have notification enabled for the event\"", async () => {\n+    it(\""should not return users who have notification disabled for comment creation and are in the thread in case of child comment\"", async () => {\n       const documentAuthor = await buildUser();\n       const document = await buildDocument({\n         userId: documentAuthor.id,\n         teamId: documentAuthor.teamId,\n       });\n-      const notificationEnabledUser = await buildUser({\n+      const notificationEnabledUserInThread = await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: { [NotificationEventType.CreateComment]: false },\n+      });\n+      const notificationEnabledUserNotInThread = await buildUser({\n         teamId: document.teamId,\n-        notificationSettings: { [NotificationEventType.UpdateDocument]: true },\n+        notificationSettings: { [NotificationEventType.CreateComment]: true },\n+      });\n+      const notificationDisabledUser = await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: {\n+          [NotificationEventType.CreateComment]: false,\n+        },\n+      });\n+      await Promise.all([\n+        buildSubscription({\n+          userId: documentAuthor.id,\n+          documentId: document.id,\n+        }),\n+        buildSubscription({\n+          userId: notificationEnabledUserInThread.id,\n+          documentId: document.id,\n+        }),\n+        buildSubscription({\n+          userId: notificationEnabledUserNotInThread.id,\n+          documentId: document.id,\n+        }),\n+        buildSubscription({\n+          userId: notificationDisabledUser.id,\n+          documentId: document.id,\n+        }),\n+      ]);\n+      const parentComment = await buildComment({\n+        documentId: document.id,\n+        userId: notificationEnabledUserInThread.id,\n+      });\n+      const childComment = await buildComment({\n+        documentId: document.id,\n+        userId: documentAuthor.id,\n+        parentCommentId: parentComment.id,\n       });\n \n       const recipients =\n-        await NotificationHelper.getDocumentNotificationRecipients({\n+        await NotificationHelper.getCommentNotificationRecipients(\n           document,\n-          notificationType: NotificationEventType.UpdateDocument,\n-          onlySubscribers: false,\n-          actorId: documentAuthor.id,\n-        });\n+          childComment,\n+          childComment.createdById\n+        );\n+\n+      expect(recipients.length).toEqual(0);\n+    });\n+\n+    it(\""should return users who have notification enabled and are in the thread but not explicitly subscribed to document\"", async () => {\n+      const documentAuthor = await buildUser();\n+      const document = await buildDocument({\n+        userId: documentAuthor.id,\n+        teamId: documentAuthor.teamId,\n+      });\n+      const notificationEnabledUserInThread = await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: { [NotificationEventType.CreateComment]: true },\n+      });\n+      await buildUser({\n+        teamId: document.teamId,\n+        notificationSettings: {\n+          [NotificationEventType.CreateComment]: false,\n+        },\n+      });\n+      const parentComment = await buildComment({\n+        documentId: document.id,\n+        userId: notificationEnabledUserInThread.id,\n+      });\n+      const childComment = await buildComment({\n+        documentId: document.id,\n+        userId: documentAuthor.id,\n+        parentCommentId: parentComment.id,\n+      });\n+\n+      const recipients =\n+        await NotificationHelper.getCommentNotificationRecipients(\n+          document,\n+          childComment,\n+          childComment.createdById\n+        );\n \n       expect(recipients.length).toEqual(1);\n-      expect(recipients[0].id).toEqual(notificationEnabledUser.id);\n+      expect(recipients[0].id).toEqual(notificationEnabledUserInThread.id);\n     });\n+  });\n \n+  describe(\""getDocumentNotificationRecipients\"", () => {\n     it(\""should return users who have subscribed to the document\"", async () => {\n       const documentAuthor = await buildUser();\n       const document = await buildDocument({\n@@ -154,7 +226,6 @@ describe(\""NotificationHelper\"", () => {\n         await NotificationHelper.getDocumentNotificationRecipients({\n           document,\n           notificationType: NotificationEventType.UpdateDocument,\n-          onlySubscribers: true,\n           actorId: documentAuthor.id,\n         });\n \n@@ -178,7 +249,6 @@ describe(\""NotificationHelper\"", () => {\n         await NotificationHelper.getDocumentNotificationRecipients({\n           document,\n           notificationType: NotificationEventType.UpdateDocument,\n-          onlySubscribers: true,\n           actorId: documentAuthor.id,\n         });\n \n@@ -216,7 +286,6 @@ describe(\""NotificationHelper\"", () => {\n         await NotificationHelper.getDocumentNotificationRecipients({\n           document,\n           notificationType: NotificationEventType.UpdateDocument,\n-          onlySubscribers: true,\n           actorId: documentAuthor.id,\n         });\n \n@@ -235,20 +304,19 @@ describe(\""NotificationHelper\"", () => {\n       });\n       const notificationEnabledUser = await buildUser({\n         teamId: document.teamId,\n-        notificationSettings: { [NotificationEventType.UpdateDocument]: true },\n+        notificationSettings: { [NotificationEventType.PublishDocument]: true },\n       });\n       // suspended user\n       await buildUser({\n         suspendedAt: new Date(),\n         teamId: document.teamId,\n-        notificationSettings: { [NotificationEventType.UpdateDocument]: true },\n+        notificationSettings: { [NotificationEventType.PublishDocument]: true },\n       });\n \n       const recipients =\n         await NotificationHelper.getDocumentNotificationRecipients({\n           document,\n-          notificationType: NotificationEventType.UpdateDocument,\n-          onlySubscribers: false,\n+          notificationType: NotificationEventType.PublishDocument,\n           actorId: documentAuthor.id,\n         });\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8803"", ""pr_id"": 8803, ""issue_id"": 8795, ""repo"": ""outline/outline"", ""problem_statement"": ""Error:  % >=  %\nSentry Issue: [OUTLINE-CLOUD-6K3](https://outline-jl.sentry.io/issues/5242321680/?referrer=github_integration)\n\n```\nError:  % >=  %\n  at <object>.drop (../../../app/components/Sidebar/components/DraggableCollectionLink.tsx:50:9)\n  at Array.forEach (<anonymous>)\n...\n(4 additional frame(s) were not displayed)\n```"", ""issue_word_count"": 37, ""test_files_count"": 1, ""non_test_files_count"": 4, ""pr_changed_files"": [""server/models/Collection.ts"", ""server/routes/api/collections/collections.test.ts"", ""server/routes/api/collections/collections.ts"", ""server/utils/removeIndexCollision.ts"", ""server/validation.ts""], ""pr_changed_test_files"": [""server/routes/api/collections/collections.test.ts""], ""base_commit"": ""ab1f00e919939672ba5182208fbb37fa391213de"", ""head_commit"": ""d08b516eacf9ed61edb4125d3b56116dc22dea9f"", ""repo_url"": ""https://github.com/outline/outline/pull/8803"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8803"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-27T09:50:40.000Z"", ""patch"": ""diff --git a/server/models/Collection.ts b/server/models/Collection.ts\nindex bd61d24711c2..3c15ffcacd05 100644\n--- a/server/models/Collection.ts\n+++ b/server/models/Collection.ts\n@@ -1,4 +1,5 @@\n /* eslint-disable lines-between-class-members */\n+import fractionalIndex from \""fractional-index\"";\n import find from \""lodash/find\"";\n import findIndex from \""lodash/findIndex\"";\n import remove from \""lodash/remove\"";\n@@ -11,6 +12,8 @@ import {\n   InferAttributes,\n   InferCreationAttributes,\n   EmptyResultError,\n+  type CreateOptions,\n+  type UpdateOptions,\n } from \""sequelize\"";\n import {\n   Sequelize,\n@@ -32,6 +35,8 @@ import {\n   BeforeDestroy,\n   IsDate,\n   AllowNull,\n+  BeforeCreate,\n+  BeforeUpdate,\n } from \""sequelize-typescript\"";\n import isUUID from \""validator/lib/isUUID\"";\n import type { CollectionSort, ProsemirrorData } from \""@shared/types\"";\n@@ -41,7 +46,9 @@ import { sortNavigationNodes } from \""@shared/utils/collections\"";\n import slugify from \""@shared/utils/slugify\"";\n import { CollectionValidation } from \""@shared/validations\"";\n import { ValidationError } from \""@server/errors\"";\n+import removeIndexCollision from \""@server/utils/removeIndexCollision\"";\n import { generateUrlId } from \""@server/utils/url\"";\n+import { ValidateIndex } from \""@server/validation\"";\n import Document from \""./Document\"";\n import FileOperation from \""./FileOperation\"";\n import Group from \""./Group\"";\n@@ -217,8 +224,8 @@ class Collection extends ParanoidModel<\n   color: string | null;\n \n   @Length({\n-    max: 256,\n-    msg: `index must be 256 characters or less`,\n+    max: ValidateIndex.maxLength,\n+    msg: `index must be ${ValidateIndex.maxLength} characters or less`,\n   })\n   @Column\n   index: string | null;\n@@ -324,6 +331,30 @@ class Collection extends ParanoidModel<\n     }\n   }\n \n+  @BeforeCreate\n+  static async setIndex(model: Collection, options: CreateOptions<Collection>) {\n+    if (model.index) {\n+      model.index = await removeIndexCollision(model.teamId, model.index, {\n+        transaction: options.transaction,\n+      });\n+      return;\n+    }\n+\n+    const firstCollectionForTeam = await this.findOne({\n+      where: {\n+        teamId: model.teamId,\n+      },\n+      order: [\n+        // using LC_COLLATE:\""C\"" because we need byte order to drive the sorting\n+        Sequelize.literal('\""collection\"".\""index\"" collate \""C\""'),\n+        [\""updatedAt\"", \""DESC\""],\n+      ],\n+      ...options,\n+    });\n+\n+    model.index = fractionalIndex(null, firstCollectionForTeam?.index ?? null);\n+  }\n+\n   @AfterCreate\n   static async onAfterCreate(\n     model: Collection,\n@@ -343,6 +374,18 @@ class Collection extends ParanoidModel<\n     });\n   }\n \n+  @BeforeUpdate\n+  static async checkIndex(\n+    model: Collection,\n+    options: UpdateOptions<Collection>\n+  ) {\n+    if (model.index && model.changed(\""index\"")) {\n+      model.index = await removeIndexCollision(model.teamId, model.index, {\n+        transaction: options.transaction,\n+      });\n+    }\n+  }\n+\n   // associations\n \n   @BelongsTo(() => FileOperation, \""importId\"")\n\ndiff --git a/server/routes/api/collections/collections.ts b/server/routes/api/collections/collections.ts\nindex cab3aa048a0e..86af4a9fa68b 100644\n--- a/server/routes/api/collections/collections.ts\n+++ b/server/routes/api/collections/collections.ts\n@@ -1,4 +1,3 @@\n-import fractionalIndex from \""fractional-index\"";\n import invariant from \""invariant\"";\n import Router from \""koa-router\"";\n import { Sequelize, Op, WhereOptions } from \""sequelize\"";\n@@ -42,7 +41,6 @@ import {\n import { APIContext } from \""@server/types\"";\n import { RateLimiterStrategy } from \""@server/utils/RateLimiter\"";\n import { collectionIndexing } from \""@server/utils/indexing\"";\n-import removeIndexCollision from \""@server/utils/removeIndexCollision\"";\n import pagination from \""../middlewares/pagination\"";\n import * as T from \""./schema\"";\n \n@@ -55,23 +53,21 @@ router.post(\n   transaction(),\n   async (ctx: APIContext<T.CollectionsCreateReq>) => {\n     const { transaction } = ctx.state;\n-    const { name, color, description, data, permission, sharing, icon, sort } =\n-      ctx.input.body;\n-    let { index } = ctx.input.body;\n+    const {\n+      name,\n+      color,\n+      description,\n+      data,\n+      permission,\n+      sharing,\n+      icon,\n+      sort,\n+      index,\n+    } = ctx.input.body;\n \n     const { user } = ctx.state.auth;\n     authorize(user, \""createCollection\"", user.team);\n \n-    if (index) {\n-      index = await removeIndexCollision(user.teamId, index, { transaction });\n-    } else {\n-      const first = await Collection.findFirstCollectionForUser(user, {\n-        attributes: [\""id\"", \""index\""],\n-        transaction,\n-      });\n-      index = fractionalIndex(null, first ? first.index : null);\n-    }\n-\n     const collection = Collection.build({\n       name,\n       content: data,\n@@ -959,18 +955,16 @@ router.post(\n   transaction(),\n   async (ctx: APIContext<T.CollectionsMoveReq>) => {\n     const { transaction } = ctx.state;\n-    const { id } = ctx.input.body;\n-    let { index } = ctx.input.body;\n+    const { id, index } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const collection = await Collection.findByPk(id, {\n+    let collection = await Collection.findByPk(id, {\n       transaction,\n       lock: transaction.LOCK.UPDATE,\n     });\n     authorize(user, \""move\"", collection);\n \n-    index = await removeIndexCollision(user.teamId, index, { transaction });\n-    await collection.update(\n+    collection = await collection.update(\n       {\n         index,\n       },\n@@ -982,14 +976,14 @@ router.post(\n       name: \""collections.move\"",\n       collectionId: collection.id,\n       data: {\n-        index,\n+        index: collection.index,\n       },\n     });\n \n     ctx.body = {\n       success: true,\n       data: {\n-        index,\n+        index: collection.index,\n       },\n     };\n   }\n\ndiff --git a/server/utils/removeIndexCollision.ts b/server/utils/removeIndexCollision.ts\nindex a17010c75773..7f78cc502cb9 100644\n--- a/server/utils/removeIndexCollision.ts\n+++ b/server/utils/removeIndexCollision.ts\n@@ -1,5 +1,5 @@\n import fractionalIndex from \""fractional-index\"";\n-import { Op, Sequelize, type FindOptions } from \""sequelize\"";\n+import { Sequelize, type FindOptions } from \""sequelize\"";\n import Collection from \""@server/models/Collection\"";\n \n /**\n@@ -31,9 +31,7 @@ export default async function removeIndexCollision(\n     where: {\n       teamId,\n       deletedAt: null,\n-      index: {\n-        [Op.gt]: index,\n-      },\n+      index: Sequelize.literal(`\""collection\"".\""index\"" collate \""C\"" > '${index}'`),\n     },\n     attributes: [\""id\"", \""index\""],\n     limit: 1,\n\ndiff --git a/server/validation.ts b/server/validation.ts\nindex d1f9228d7a9b..ec46b884ba7d 100644\n--- a/server/validation.ts\n+++ b/server/validation.ts\n@@ -232,7 +232,7 @@ export class ValidateDocumentId {\n export class ValidateIndex {\n   public static regex = new RegExp(\""^[\\x20-\\x7E]+$\"");\n   public static message = \""Must be between x20 to x7E ASCII\"";\n-  public static maxLength = 100;\n+  public static maxLength = 256;\n }\n \n export class ValidateURL {\n"", ""test_patch"": ""diff --git a/server/routes/api/collections/collections.test.ts b/server/routes/api/collections/collections.test.ts\nindex 1fc40f1a3ded..492e7ff7277b 100644\n--- a/server/routes/api/collections/collections.test.ts\n+++ b/server/routes/api/collections/collections.test.ts\n@@ -1327,6 +1327,32 @@ describe(\""#collections.create\"", () => {\n     expect(body.policies[0].abilities.read).toBeTruthy();\n   });\n \n+  it(\""should ensure unique index across the team\"", async () => {\n+    const team = await buildTeam();\n+    const [adminA, adminB] = await Promise.all([\n+      buildAdmin({ teamId: team.id }),\n+      buildAdmin({ teamId: team.id }),\n+    ]);\n+\n+    const resA = await server.post(\""/api/collections.create\"", {\n+      body: {\n+        token: adminA.getJwtToken(),\n+        name: \""Test A\"",\n+      },\n+    });\n+    const resB = await server.post(\""/api/collections.create\"", {\n+      body: {\n+        token: adminB.getJwtToken(),\n+        name: \""Test B\"",\n+      },\n+    });\n+    const [bodyA, bodyB] = await Promise.all([resA.json(), resB.json()]);\n+\n+    expect(resA.status).toEqual(200);\n+    expect(resB.status).toEqual(200);\n+    expect(bodyA.data.index).not.toEqual(bodyB.data.index);\n+  });\n+\n   it(\""if index collision, should updated index of other collection\"", async () => {\n     const user = await buildUser();\n     const createdCollectionAResponse = await server.post(\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8794"", ""pr_id"": 8794, ""issue_id"": 8793, ""repo"": ""outline/outline"", ""problem_statement"": ""TypeError: Cannot read properties of undefined (reading 'lang')\nSentry Issue: [OUTLINE-CLOUD-8FN](https://outline-jl.sentry.io/issues/6457076532/?referrer=github_integration)\n\n```\nTypeError: Cannot read properties of undefined (reading 'lang')\n  at language (../../../shared/editor/lib/code.ts:88:50)\n  at forEach (../../../shared/editor/extensions/Prism.ts:60:22)\n  at Array.forEach (<anonymous>)\n  at getDecorations (../../../shared/editor/extensions/Prism.ts:58:10)\n  at <object>.state.apply (../../../shared/editor/extensions/Prism.ts:167:18)\n...\n(22 additional frame(s) were not displayed)\n```"", ""issue_word_count"": 71, ""test_files_count"": 1, ""non_test_files_count"": 1, ""pr_changed_files"": [""shared/editor/lib/code.test.ts"", ""shared/editor/lib/code.ts""], ""pr_changed_test_files"": [""shared/editor/lib/code.test.ts""], ""base_commit"": ""72bff1ec8a538066466eeae2134df1b02f9f082b"", ""head_commit"": ""9eea96fc89d7bb82cc4ac0597b5725623ca526b4"", ""repo_url"": ""https://github.com/outline/outline/pull/8794"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8794"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-25T12:31:53.000Z"", ""patch"": ""diff --git a/shared/editor/lib/code.ts b/shared/editor/lib/code.ts\nindex 62040198eec0..38cc3e3fd459 100644\n--- a/shared/editor/lib/code.ts\n+++ b/shared/editor/lib/code.ts\n@@ -72,9 +72,10 @@ export const codeLanguages = {\n  * @param language The language identifier.\n  * @returns The human-readable label for the language.\n  */\n-export const getLabelForLanguage = (language: keyof typeof codeLanguages) => {\n-  const lang = codeLanguages[language];\n-  return lang ? lang.label : language;\n+export const getLabelForLanguage = (language: string) => {\n+  const lang =\n+    codeLanguages[language as keyof typeof codeLanguages] ?? codeLanguages.none;\n+  return lang.label;\n };\n \n /**\n@@ -83,9 +84,8 @@ export const getLabelForLanguage = (language: keyof typeof codeLanguages) => {\n  * @param language The language identifier.\n  * @returns The Prism language identifier for the language.\n  */\n-export const getPrismLangForLanguage = (\n-  language: keyof typeof codeLanguages\n-): string | undefined => codeLanguages[language].lang;\n+export const getPrismLangForLanguage = (language: string): string | undefined =>\n+  codeLanguages[language as keyof typeof codeLanguages]?.lang;\n \n /**\n  * Set the most recent code language used.\n"", ""test_patch"": ""diff --git a/shared/editor/lib/code.test.ts b/shared/editor/lib/code.test.ts\nnew file mode 100644\nindex 000000000000..4e058b1768ca\n--- /dev/null\n+++ b/shared/editor/lib/code.test.ts\n@@ -0,0 +1,22 @@\n+import { getPrismLangForLanguage, getLabelForLanguage } from \""./code\"";\n+\n+describe(\""getPrismLangForLanguage\"", () => {\n+  it(\""should return the correct Prism language identifier for a given language\"", () => {\n+    expect(getPrismLangForLanguage(\""javascript\"")).toBe(\""javascript\"");\n+    expect(getPrismLangForLanguage(\""mermaidjs\"")).toBe(\""mermaid\"");\n+    expect(getPrismLangForLanguage(\""xml\"")).toBe(\""markup\"");\n+    expect(getPrismLangForLanguage(\""unknown\"")).toBeUndefined();\n+    expect(getPrismLangForLanguage(\""\"")).toBeUndefined();\n+  });\n+});\n+\n+describe(\""getLabelForLanguage\"", () => {\n+  it(\""should return the correct human-readable label for a given language\"", () => {\n+    expect(getLabelForLanguage(\""javascript\"")).toBe(\""JavaScript\"");\n+    expect(getLabelForLanguage(\""mermaidjs\"")).toBe(\""Mermaid Diagram\"");\n+    expect(getLabelForLanguage(\""xml\"")).toBe(\""XML\"");\n+    expect(getLabelForLanguage(\""unknown\"")).toBe(\""Plain text\"");\n+    expect(getLabelForLanguage(\""none\"")).toBe(\""Plain text\"");\n+    expect(getLabelForLanguage(\""\"")).toBe(\""Plain text\"");\n+  });\n+});\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8785"", ""pr_id"": 8785, ""issue_id"": 8782, ""repo"": ""outline/outline"", ""problem_statement"": ""RangeError: Empty text nodes are not allowed\nTriggered through the new Notion importer, the payload that caused it is not in the Sentry logs\n\nSentry Issue: [OUTLINE-CLOUD-8FK](https://outline-jl.sentry.io/issues/6455524313/?referrer=github_integration)\n\n```\nRangeError: Empty text nodes are not allowed\n  File \""/app/build/server/models/helpers/ProsemirrorHelper.js\"", line 98, in ProsemirrorHelper.toProsemirror\n    return _prosemirrorModel.Node.fromJSON(_editor.schema, data);\n...\n(11 additional frame(s) were not displayed)\n```"", ""issue_word_count"": 65, ""test_files_count"": 3, ""non_test_files_count"": 1, ""pr_changed_files"": [""plugins/notion/server/utils/NotionConverter.test.ts"", ""plugins/notion/server/utils/NotionConverter.ts"", ""plugins/notion/server/utils/__snapshots__/NotionConverter.test.ts.snap"", ""server/test/fixtures/notion-page-with-empty-text-nodes.json""], ""pr_changed_test_files"": [""plugins/notion/server/utils/NotionConverter.test.ts"", ""plugins/notion/server/utils/__snapshots__/NotionConverter.test.ts.snap"", ""server/test/fixtures/notion-page-with-empty-text-nodes.json""], ""base_commit"": ""ab55e0bed992519b160c4c5f3b7cb3e403a76d2e"", ""head_commit"": ""67bd0923d950d1379cccd57752b2e9f6ef697718"", ""repo_url"": ""https://github.com/outline/outline/pull/8785"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8785"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-25T11:31:06.000Z"", ""patch"": ""diff --git a/plugins/notion/server/utils/NotionConverter.ts b/plugins/notion/server/utils/NotionConverter.ts\nindex addd20d6e4d3..8e4539eb74af 100644\n--- a/plugins/notion/server/utils/NotionConverter.ts\n+++ b/plugins/notion/server/utils/NotionConverter.ts\n@@ -179,11 +179,15 @@ export class NotionConverter {\n   }\n \n   private static bookmark(item: BookmarkBlockObjectResponse) {\n+    const caption = item.bookmark.caption\n+      .map(this.rich_text_to_plaintext)\n+      .join(\""\"");\n+\n     return {\n       type: \""paragraph\"",\n       content: [\n         {\n-          text: item.bookmark.caption.map(this.rich_text_to_plaintext).join(\""\""),\n+          text: caption || item.bookmark.url,\n           type: \""text\"",\n           marks: [\n             {\n@@ -221,17 +225,14 @@ export class NotionConverter {\n   }\n \n   private static code(item: CodeBlockObjectResponse) {\n+    const text = item.code.rich_text.map(this.rich_text_to_plaintext).join(\""\"");\n+\n     return {\n       type: \""code_fence\"",\n       attrs: {\n         language: item.code.language,\n       },\n-      content: [\n-        {\n-          type: \""text\"",\n-          text: item.code.rich_text.map(this.rich_text_to_plaintext).join(\""\""),\n-        },\n-      ],\n+      content: text ? [{ type: \""text\"", text }] : undefined,\n     };\n   }\n \n@@ -364,12 +365,14 @@ export class NotionConverter {\n   private static equation(item: EquationBlockObjectResponse) {\n     return {\n       type: \""math_block\"",\n-      content: [\n-        {\n-          type: \""text\"",\n-          text: item.equation.expression,\n-        },\n-      ],\n+      content: item.equation.expression\n+        ? [\n+            {\n+              type: \""text\"",\n+              text: item.equation.expression,\n+            },\n+          ]\n+        : undefined,\n     };\n   }\n \n"", ""test_patch"": ""diff --git a/plugins/notion/server/utils/NotionConverter.test.ts b/plugins/notion/server/utils/NotionConverter.test.ts\nindex f87cbdb76361..425d599b693c 100644\n--- a/plugins/notion/server/utils/NotionConverter.test.ts\n+++ b/plugins/notion/server/utils/NotionConverter.test.ts\n@@ -1,12 +1,22 @@\n import { Node } from \""prosemirror-model\"";\n import { ProsemirrorHelper } from \""@server/models/helpers/ProsemirrorHelper\"";\n-import data from \""@server/test/fixtures/notion-page.json\"";\n+import nodesWithEmptyTextNode from \""@server/test/fixtures/notion-page-with-empty-text-nodes.json\"";\n+import allNodes from \""@server/test/fixtures/notion-page.json\"";\n import { NotionConverter, NotionPage } from \""./NotionConverter\"";\n \n describe(\""NotionConverter\"", () => {\n   it(\""converts a page\"", () => {\n     const response = NotionConverter.page({\n-      children: data,\n+      children: allNodes,\n+    } as NotionPage);\n+\n+    expect(response).toMatchSnapshot();\n+    expect(ProsemirrorHelper.toProsemirror(response)).toBeInstanceOf(Node);\n+  });\n+\n+  it(\""converts a page with empty text nodes\"", () => {\n+    const response = NotionConverter.page({\n+      children: nodesWithEmptyTextNode,\n     } as NotionPage);\n \n     expect(response).toMatchSnapshot();\n\ndiff --git a/plugins/notion/server/utils/__snapshots__/NotionConverter.test.ts.snap b/plugins/notion/server/utils/__snapshots__/NotionConverter.test.ts.snap\nindex 12de73ced8ec..92e252de4d93 100644\n--- a/plugins/notion/server/utils/__snapshots__/NotionConverter.test.ts.snap\n+++ b/plugins/notion/server/utils/__snapshots__/NotionConverter.test.ts.snap\n@@ -1983,3 +1983,148 @@ exports[`NotionConverter converts a page 1`] = `\n   \""type\"": \""doc\"",\n }\n `;\n+\n+exports[`NotionConverter converts a page with empty text nodes 1`] = `\n+{\n+  \""content\"": [\n+    {\n+      \""content\"": [],\n+      \""type\"": \""paragraph\"",\n+    },\n+    {\n+      \""attrs\"": {\n+        \""language\"": \""javascript\"",\n+      },\n+      \""content\"": undefined,\n+      \""type\"": \""code_fence\"",\n+    },\n+    {\n+      \""content\"": [],\n+      \""type\"": \""paragraph\"",\n+    },\n+    {\n+      \""content\"": [\n+        {\n+          \""content\"": [\n+            {\n+              \""text\"": \""E\"",\n+              \""type\"": \""text\"",\n+            },\n+          ],\n+          \""type\"": \""math_inline\"",\n+        },\n+      ],\n+      \""type\"": \""paragraph\"",\n+    },\n+    {\n+      \""content\"": [],\n+      \""type\"": \""paragraph\"",\n+    },\n+    {\n+      \""content\"": [\n+        {\n+          \""marks\"": [\n+            {\n+              \""attrs\"": {\n+                \""href\"": \""http://github.com/outline/\"",\n+              },\n+              \""type\"": \""link\"",\n+            },\n+          ],\n+          \""text\"": \""http://github.com/outline/\"",\n+          \""type\"": \""text\"",\n+        },\n+      ],\n+      \""type\"": \""paragraph\"",\n+    },\n+    {\n+      \""content\"": [],\n+      \""type\"": \""paragraph\"",\n+    },\n+    {\n+      \""content\"": [\n+        {\n+          \""marks\"": [\n+            {\n+              \""attrs\"": {\n+                \""href\"": \""https://github.com/outline/outline\"",\n+              },\n+              \""type\"": \""link\"",\n+            },\n+          ],\n+          \""text\"": \""https://github.com/outline/outline\"",\n+          \""type\"": \""text\"",\n+        },\n+      ],\n+      \""type\"": \""paragraph\"",\n+    },\n+    {\n+      \""content\"": [],\n+      \""type\"": \""paragraph\"",\n+    },\n+    {\n+      \""content\"": undefined,\n+      \""type\"": \""math_block\"",\n+    },\n+    {\n+      \""content\"": [],\n+      \""type\"": \""paragraph\"",\n+    },\n+    {\n+      \""content\"": [\n+        {\n+          \""marks\"": [\n+            {\n+              \""attrs\"": {\n+                \""href\"": \""https://google.com\"",\n+                \""title\"": null,\n+              },\n+              \""type\"": \""link\"",\n+            },\n+          ],\n+          \""text\"": \""https://google.com\"",\n+          \""type\"": \""text\"",\n+        },\n+      ],\n+      \""type\"": \""paragraph\"",\n+    },\n+    {\n+      \""content\"": [],\n+      \""type\"": \""paragraph\"",\n+    },\n+    {\n+      \""content\"": [\n+        {\n+          \""marks\"": [\n+            {\n+              \""attrs\"": {\n+                \""href\"": \""https://github.com/outline/outline\"",\n+              },\n+              \""type\"": \""link\"",\n+            },\n+          ],\n+          \""text\"": \""https://github.com/outline/outline\"",\n+          \""type\"": \""text\"",\n+        },\n+      ],\n+      \""type\"": \""paragraph\"",\n+    },\n+    {\n+      \""content\"": [],\n+      \""type\"": \""paragraph\"",\n+    },\n+    {\n+      \""attrs\"": {\n+        \""href\"": \""https://prod-files-secure.s3.us-west-2.amazonaws.com/2f3fcad6-fc32-434b-b6b2-a03ca7893c4d/49bfa851-95c1-458b-abb0-88ed591f7712/Empty_pdf.pdf\"",\n+        \""title\"": \""\"",\n+      },\n+      \""type\"": \""attachment\"",\n+    },\n+    {\n+      \""content\"": [],\n+      \""type\"": \""paragraph\"",\n+    },\n+  ],\n+  \""type\"": \""doc\"",\n+}\n+`;\n\ndiff --git a/server/test/fixtures/notion-page-with-empty-text-nodes.json b/server/test/fixtures/notion-page-with-empty-text-nodes.json\nnew file mode 100644\nindex 000000000000..9c98e5b036c9\n--- /dev/null\n+++ b/server/test/fixtures/notion-page-with-empty-text-nodes.json\n@@ -0,0 +1,509 @@\n+[\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-803b-a8dc-d10fdf86fd60\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T07:49:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T07:49:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""paragraph\"",\n+    \""paragraph\"": {\n+      \""rich_text\"": [],\n+      \""color\"": \""default\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-809a-a9e5-f33faf274c5f\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T07:56:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:09:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""code\"",\n+    \""code\"": {\n+      \""caption\"": [],\n+      \""rich_text\"": [],\n+      \""language\"": \""javascript\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-80c2-986a-ef8ae792a0f9\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:04:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:04:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""paragraph\"",\n+    \""paragraph\"": {\n+      \""rich_text\"": [],\n+      \""color\"": \""default\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-80b3-9180-c6bc089c00fc\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T07:56:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:05:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""paragraph\"",\n+    \""paragraph\"": {\n+      \""rich_text\"": [\n+        {\n+          \""type\"": \""equation\"",\n+          \""equation\"": {\n+            \""expression\"": \""E\""\n+          },\n+          \""annotations\"": {\n+            \""bold\"": false,\n+            \""italic\"": false,\n+            \""strikethrough\"": false,\n+            \""underline\"": false,\n+            \""code\"": false,\n+            \""color\"": \""default\""\n+          },\n+          \""plain_text\"": \""E\"",\n+          \""href\"": null\n+        }\n+      ],\n+      \""color\"": \""default\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-80ca-974e-c226a1a1ae76\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:10:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:10:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""paragraph\"",\n+    \""paragraph\"": {\n+      \""rich_text\"": [],\n+      \""color\"": \""default\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-8028-944b-e2593f20e09a\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:09:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:10:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""paragraph\"",\n+    \""paragraph\"": {\n+      \""rich_text\"": [\n+        {\n+          \""type\"": \""mention\"",\n+          \""mention\"": {\n+            \""type\"": \""link_mention\"",\n+            \""link_mention\"": {\n+              \""href\"": \""http://github.com/outline/\"",\n+              \""title\"": \""Outline\"",\n+              \""icon_url\"": \""https://github.com/fluidicon.png\"",\n+              \""description\"": \""We're building an open source collaborative knowledge base for modern teams - Outline\"",\n+              \""link_provider\"": \""GitHub\"",\n+              \""thumbnail_url\"": \""https://avatars.githubusercontent.com/u/1765001?s=280&v=4\""\n+            }\n+          },\n+          \""annotations\"": {\n+            \""bold\"": false,\n+            \""italic\"": false,\n+            \""strikethrough\"": false,\n+            \""underline\"": false,\n+            \""code\"": false,\n+            \""color\"": \""default\""\n+          },\n+          \""plain_text\"": \""http://github.com/outline/\"",\n+          \""href\"": \""http://github.com/outline/\""\n+        }\n+      ],\n+      \""color\"": \""default\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-80f8-a272-c519ce56de27\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:12:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:12:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""paragraph\"",\n+    \""paragraph\"": {\n+      \""rich_text\"": [],\n+      \""color\"": \""default\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-8096-8a94-e44b32127e73\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:12:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:12:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""paragraph\"",\n+    \""paragraph\"": {\n+      \""rich_text\"": [\n+        {\n+          \""type\"": \""mention\"",\n+          \""mention\"": {\n+            \""type\"": \""link_preview\"",\n+            \""link_preview\"": {\n+              \""url\"": \""https://github.com/outline/outline\""\n+            }\n+          },\n+          \""annotations\"": {\n+            \""bold\"": false,\n+            \""italic\"": false,\n+            \""strikethrough\"": false,\n+            \""underline\"": false,\n+            \""code\"": false,\n+            \""color\"": \""default\""\n+          },\n+          \""plain_text\"": \""https://github.com/outline/outline\"",\n+          \""href\"": \""https://github.com/outline/outline\""\n+        }\n+      ],\n+      \""color\"": \""default\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-807b-98de-ff2c1d0080f2\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:13:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:13:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""paragraph\"",\n+    \""paragraph\"": {\n+      \""rich_text\"": [],\n+      \""color\"": \""default\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-80dd-b816-cb4dd04d4f46\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:13:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:13:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""equation\"",\n+    \""equation\"": {\n+      \""expression\"": \""\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-8074-a5e0-f0ba30bd0510\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:18:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:18:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""paragraph\"",\n+    \""paragraph\"": {\n+      \""rich_text\"": [],\n+      \""color\"": \""default\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-80dc-8a14-db8b714450f6\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:18:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:30:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""bookmark\"",\n+    \""bookmark\"": {\n+      \""caption\"": [],\n+      \""url\"": \""https://google.com\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-80f2-94b4-df422d9cd18e\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:24:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:24:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""paragraph\"",\n+    \""paragraph\"": {\n+      \""rich_text\"": [],\n+      \""color\"": \""default\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-8046-946c-d89c2bc7827c\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:24:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:24:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""1b32c2bb-bca8-816a-99c0-0027ab5c4cb0\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""link_preview\"",\n+    \""link_preview\"": {\n+      \""url\"": \""https://github.com/outline/outline\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-80e6-80d3-f9501fc1a6fb\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:24:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:24:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""paragraph\"",\n+    \""paragraph\"": {\n+      \""rich_text\"": [],\n+      \""color\"": \""default\""\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-8070-9c41-ca4c3aa1a419\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:24:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:30:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""pdf\"",\n+    \""pdf\"": {\n+      \""caption\"": [],\n+      \""type\"": \""file\"",\n+      \""file\"": {\n+        \""url\"": \""https://prod-files-secure.s3.us-west-2.amazonaws.com/2f3fcad6-fc32-434b-b6b2-a03ca7893c4d/49bfa851-95c1-458b-abb0-88ed591f7712/Empty_pdf.pdf\"",\n+        \""expiry_time\"": \""2025-03-25T09:32:41.690Z\""\n+      }\n+    }\n+  },\n+  {\n+    \""object\"": \""block\"",\n+    \""id\"": \""1c12c2bb-bca8-800c-8857-eca03207279f\"",\n+    \""parent\"": {\n+      \""type\"": \""page_id\"",\n+      \""page_id\"": \""1c12c2bb-bca8-8023-ba9a-f8fafab74e48\""\n+    },\n+    \""created_time\"": \""2025-03-25T08:26:00.000Z\"",\n+    \""last_edited_time\"": \""2025-03-25T08:26:00.000Z\"",\n+    \""created_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""last_edited_by\"": {\n+      \""object\"": \""user\"",\n+      \""id\"": \""b69e71d0-c6c2-428c-ae38-5c020343b36b\""\n+    },\n+    \""has_children\"": false,\n+    \""archived\"": false,\n+    \""in_trash\"": false,\n+    \""type\"": \""paragraph\"",\n+    \""paragraph\"": {\n+      \""rich_text\"": [],\n+      \""color\"": \""default\""\n+    }\n+  }\n+]\n\\ No newline at end of file\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8754"", ""pr_id"": 8754, ""issue_id"": 7920, ""repo"": ""outline/outline"", ""problem_statement"": ""Move event writing to model layer\n`events` should be written automatically based on mutations in the model layer. To achieve this the request context will be passed down to model mutations. Translation must happen on a model by model basis.\n\nCommands should be removed where they only exist to group a mutation and it's associated event write.\n\n### TODO\n- [x] ApiKey\n- [x] Attachment\n- [x] Comment\n- [x] FileOperation\n- [x] Group\n- [x] GroupMembership\n- [x] GroupUser\n- [x] Pin\n- [x] Reaction\n- [x] Share\n- [x] Star\n- [x] UserMembership\n- [x] Subscription\n- [x] WebhookSubscription\n- [x] Notification\n- [ ] Team\n- [ ] Revision\n- [ ] Document\n- [ ] Collection\n- [ ] TeamDomain\n- [ ] User"", ""issue_word_count"": 89, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""server/commands/notificationUpdater.test.ts"", ""server/commands/notificationUpdater.ts"", ""server/models/base/Model.ts"", ""server/routes/api/notifications/notifications.ts""], ""pr_changed_test_files"": [""server/commands/notificationUpdater.test.ts""], ""base_commit"": ""533a14369c53287417ef29266d389468f9700e46"", ""head_commit"": ""a760b951d5fef0b63b27aa4196c2437198efe0d1"", ""repo_url"": ""https://github.com/outline/outline/pull/8754"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8754"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-23T18:59:19.000Z"", ""patch"": ""diff --git a/server/commands/notificationUpdater.ts b/server/commands/notificationUpdater.ts\ndeleted file mode 100644\nindex 6f85f8de3b58..000000000000\n--- a/server/commands/notificationUpdater.ts\n+++ /dev/null\n@@ -1,53 +0,0 @@\n-import isUndefined from \""lodash/isUndefined\"";\n-import { Event, Notification } from \""@server/models\"";\n-import { APIContext } from \""@server/types\"";\n-\n-type Props = {\n-  /** Notification to be updated */\n-  notification: Notification;\n-  /** Time at which notification was viewed */\n-  viewedAt?: Date | null;\n-  /** Time at which notification was archived */\n-  archivedAt?: Date | null;\n-};\n-\n-/**\n- * This command updates notification properties.\n- *\n- * @param ctx The originating request context\n- * @param Props The properties of the notification to update\n- * @returns Notification The updated notification\n- */\n-export default async function notificationUpdater(\n-  ctx: APIContext,\n-  { notification, viewedAt, archivedAt }: Props\n-): Promise<Notification> {\n-  const { transaction } = ctx.state;\n-\n-  if (!isUndefined(viewedAt)) {\n-    notification.viewedAt = viewedAt;\n-  }\n-  if (!isUndefined(archivedAt)) {\n-    notification.archivedAt = archivedAt;\n-  }\n-  const changed = notification.changed();\n-  if (changed) {\n-    await notification.save({ transaction });\n-\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""notifications.update\"",\n-        userId: notification.userId,\n-        modelId: notification.id,\n-        documentId: notification.documentId,\n-      },\n-      {\n-        actorId: notification.userId,\n-        teamId: notification.teamId,\n-      }\n-    );\n-  }\n-\n-  return notification;\n-}\n\ndiff --git a/server/models/base/Model.ts b/server/models/base/Model.ts\nindex e27c416f8585..ac0cb7078ba5 100644\n--- a/server/models/base/Model.ts\n+++ b/server/models/base/Model.ts\n@@ -280,6 +280,7 @@ class Model<\n    *\n    * @param query The query options.\n    * @param callback The function to call for each batch of results\n+   * @return The total number of results processed.\n    */\n   static async findAllInBatches<T extends Model>(\n     query: Replace<FindOptions<T>, \""limit\"", \""batchLimit\""> & {\n@@ -287,7 +288,8 @@ class Model<\n       totalLimit?: number;\n     },\n     callback: (results: Array<T>, query: FindOptions<T>) => Promise<void>\n-  ) {\n+  ): Promise<number> {\n+    let total = 0;\n     const mappedQuery = {\n       ...query,\n       offset: query.offset ?? 0,\n@@ -299,12 +301,15 @@ class Model<\n     do {\n       // @ts-expect-error this T\n       results = await this.findAll<T>(mappedQuery);\n+      total += results.length;\n       await callback(results, mappedQuery);\n       mappedQuery.offset += mappedQuery.limit;\n     } while (\n       results.length >= mappedQuery.limit &&\n       (mappedQuery.totalLimit ?? Infinity) > mappedQuery.offset\n     );\n+\n+    return total;\n   }\n \n   /**\n\ndiff --git a/server/routes/api/notifications/notifications.ts b/server/routes/api/notifications/notifications.ts\nindex 9a1d5c5785be..9a3766d09004 100644\n--- a/server/routes/api/notifications/notifications.ts\n+++ b/server/routes/api/notifications/notifications.ts\n@@ -1,10 +1,10 @@\n import Router from \""koa-router\"";\n-import { isNil } from \""lodash\"";\n+import isEmpty from \""lodash/isEmpty\"";\n+import isNil from \""lodash/isNil\"";\n import isNull from \""lodash/isNull\"";\n import isUndefined from \""lodash/isUndefined\"";\n import { WhereOptions, Op } from \""sequelize\"";\n import { NotificationEventType } from \""@shared/types\"";\n-import notificationUpdater from \""@server/commands/notificationUpdater\"";\n import env from \""@server/env\"";\n import { AuthenticationError } from \""@server/errors\"";\n import auth from \""@server/middlewares/authentication\"";\n@@ -29,6 +29,7 @@ const pixel = Buffer.from(\n const handleUnsubscribe = async (\n   ctx: APIContext<T.NotificationsUnsubscribeReq>\n ) => {\n+  const { transaction } = ctx.state;\n   const eventType = (ctx.input.body.eventType ??\n     ctx.input.query.eventType) as NotificationEventType;\n   const userId = (ctx.input.body.userId ?? ctx.input.query.userId) as string;\n@@ -46,6 +47,8 @@ const handleUnsubscribe = async (\n \n   const user = await User.scope(\""withTeam\"").findByPk(userId, {\n     rejectOnEmpty: true,\n+    lock: transaction.LOCK.UPDATE,\n+    transaction,\n   });\n \n   user.setNotificationEventType(eventType, false);\n@@ -145,17 +148,21 @@ router.get(\n   transaction(),\n   async (ctx: APIContext<T.NotificationsPixelReq>) => {\n     const { id, token } = ctx.input.query;\n-    const notification = await Notification.unscoped().findByPk(id);\n+    const { transaction } = ctx.state;\n+\n+    const notification = await Notification.unscoped().findByPk(id, {\n+      lock: transaction.LOCK.UPDATE,\n+      rejectOnEmpty: true,\n+      transaction,\n+    });\n \n     if (!notification || !safeEqual(token, notification.pixelToken)) {\n       throw AuthenticationError();\n     }\n \n     if (!notification.viewedAt) {\n-      await notificationUpdater(ctx, {\n-        notification,\n-        viewedAt: new Date(),\n-      });\n+      notification.viewedAt = new Date();\n+      await notification.saveWithCtx(ctx);\n     }\n \n     ctx.response.set(\""Content-Type\"", \""image/gif\"");\n@@ -171,15 +178,25 @@ router.post(\n   async (ctx: APIContext<T.NotificationsUpdateReq>) => {\n     const { id, viewedAt, archivedAt } = ctx.input.body;\n     const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n \n-    const notification = await Notification.findByPk(id);\n+    const notification = await Notification.findByPk(id, {\n+      lock: {\n+        level: transaction.LOCK.UPDATE,\n+        of: Notification,\n+      },\n+      rejectOnEmpty: true,\n+      transaction,\n+    });\n     authorize(user, \""update\"", notification);\n \n-    await notificationUpdater(ctx, {\n-      notification,\n-      viewedAt,\n-      archivedAt,\n-    });\n+    if (!isUndefined(viewedAt)) {\n+      notification.viewedAt = viewedAt;\n+    }\n+    if (!isUndefined(archivedAt)) {\n+      notification.archivedAt = archivedAt;\n+    }\n+    await notification.saveWithCtx(ctx);\n \n     ctx.body = {\n       data: await presentNotification(ctx, notification),\n@@ -196,7 +213,7 @@ router.post(\n     const { viewedAt, archivedAt } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n-    const values: { [x: string]: any } = {};\n+    const values: Partial<Notification> = {};\n     let where: WhereOptions<Notification> = {\n       teamId: user.teamId,\n       userId: user.id,\n@@ -216,7 +233,19 @@ router.post(\n       };\n     }\n \n-    const [total] = await Notification.update(values, { where });\n+    let total = 0;\n+    if (!isEmpty(values)) {\n+      total = await Notification.findAllInBatches(\n+        { where },\n+        async (results) => {\n+          await Promise.all(\n+            results.map((notification) =>\n+              notification.updateWithCtx(ctx, values)\n+            )\n+          );\n+        }\n+      );\n+    }\n \n     ctx.body = {\n       success: true,\n"", ""test_patch"": ""diff --git a/server/commands/notificationUpdater.test.ts b/server/commands/notificationUpdater.test.ts\ndeleted file mode 100644\nindex bb889758c04b..000000000000\n--- a/server/commands/notificationUpdater.test.ts\n+++ /dev/null\n@@ -1,182 +0,0 @@\n-import { NotificationEventType } from \""@shared/types\"";\n-import { Event } from \""@server/models\"";\n-import {\n-  buildUser,\n-  buildNotification,\n-  buildDocument,\n-  buildCollection,\n-} from \""@server/test/factories\"";\n-import { withAPIContext } from \""@server/test/support\"";\n-import notificationUpdater from \""./notificationUpdater\"";\n-\n-describe(\""notificationUpdater\"", () => {\n-  it(\""should mark the notification as viewed\"", async () => {\n-    const user = await buildUser();\n-    const actor = await buildUser({\n-      teamId: user.teamId,\n-    });\n-    const collection = await buildCollection({\n-      teamId: user.teamId,\n-      createdById: actor.id,\n-    });\n-    const document = await buildDocument({\n-      teamId: user.teamId,\n-      collectionId: collection.id,\n-      createdById: actor.id,\n-    });\n-    const notification = await buildNotification({\n-      actorId: actor.id,\n-      event: NotificationEventType.UpdateDocument,\n-      userId: user.id,\n-      teamId: user.teamId,\n-      documentId: document.id,\n-      collectionId: collection.id,\n-    });\n-\n-    expect(notification.archivedAt).toBe(null);\n-    expect(notification.viewedAt).toBe(null);\n-\n-    await withAPIContext(user, (ctx) =>\n-      notificationUpdater(ctx, {\n-        notification,\n-        viewedAt: new Date(),\n-      })\n-    );\n-    const event = await Event.findLatest({\n-      teamId: user.teamId,\n-    });\n-\n-    expect(notification.viewedAt).not.toBe(null);\n-    expect(notification.archivedAt).toBe(null);\n-    expect(event!.name).toEqual(\""notifications.update\"");\n-    expect(event!.modelId).toEqual(notification.id);\n-  });\n-\n-  it(\""should mark the notification as unseen\"", async () => {\n-    const user = await buildUser();\n-    const actor = await buildUser({\n-      teamId: user.teamId,\n-    });\n-    const collection = await buildCollection({\n-      teamId: user.teamId,\n-      createdById: actor.id,\n-    });\n-    const document = await buildDocument({\n-      teamId: user.teamId,\n-      collectionId: collection.id,\n-      createdById: actor.id,\n-    });\n-    const notification = await buildNotification({\n-      actorId: actor.id,\n-      event: NotificationEventType.UpdateDocument,\n-      userId: user.id,\n-      teamId: user.teamId,\n-      documentId: document.id,\n-      collectionId: collection.id,\n-      viewedAt: new Date(),\n-    });\n-\n-    expect(notification.archivedAt).toBe(null);\n-    expect(notification.viewedAt).not.toBe(null);\n-\n-    await withAPIContext(user, (ctx) =>\n-      notificationUpdater(ctx, {\n-        notification,\n-        viewedAt: null,\n-      })\n-    );\n-    const event = await Event.findLatest({\n-      teamId: user.teamId,\n-    });\n-\n-    expect(notification.viewedAt).toBe(null);\n-    expect(notification.archivedAt).toBe(null);\n-    expect(event!.name).toEqual(\""notifications.update\"");\n-    expect(event!.modelId).toEqual(notification.id);\n-  });\n-\n-  it(\""should archive the notification\"", async () => {\n-    const user = await buildUser();\n-    const actor = await buildUser({\n-      teamId: user.teamId,\n-    });\n-    const collection = await buildCollection({\n-      teamId: user.teamId,\n-      createdById: actor.id,\n-    });\n-    const document = await buildDocument({\n-      teamId: user.teamId,\n-      collectionId: collection.id,\n-      createdById: actor.id,\n-    });\n-    const notification = await buildNotification({\n-      actorId: actor.id,\n-      event: NotificationEventType.UpdateDocument,\n-      userId: user.id,\n-      teamId: user.teamId,\n-      documentId: document.id,\n-      collectionId: collection.id,\n-    });\n-\n-    expect(notification.archivedAt).toBe(null);\n-    expect(notification.viewedAt).toBe(null);\n-\n-    await withAPIContext(user, (ctx) =>\n-      notificationUpdater(ctx, {\n-        notification,\n-        archivedAt: new Date(),\n-      })\n-    );\n-    const event = await Event.findLatest({\n-      teamId: user.teamId,\n-    });\n-\n-    expect(notification.viewedAt).toBe(null);\n-    expect(notification.archivedAt).not.toBe(null);\n-    expect(event!.name).toEqual(\""notifications.update\"");\n-    expect(event!.modelId).toEqual(notification.id);\n-  });\n-\n-  it(\""should unarchive the notification\"", async () => {\n-    const user = await buildUser();\n-    const actor = await buildUser({\n-      teamId: user.teamId,\n-    });\n-    const collection = await buildCollection({\n-      teamId: user.teamId,\n-      createdById: actor.id,\n-    });\n-    const document = await buildDocument({\n-      teamId: user.teamId,\n-      collectionId: collection.id,\n-      createdById: actor.id,\n-    });\n-    const notification = await buildNotification({\n-      actorId: actor.id,\n-      event: NotificationEventType.UpdateDocument,\n-      userId: user.id,\n-      teamId: user.teamId,\n-      documentId: document.id,\n-      collectionId: collection.id,\n-      archivedAt: new Date(),\n-    });\n-\n-    expect(notification.archivedAt).not.toBe(null);\n-    expect(notification.viewedAt).toBe(null);\n-\n-    await withAPIContext(user, (ctx) =>\n-      notificationUpdater(ctx, {\n-        notification,\n-        archivedAt: null,\n-      })\n-    );\n-    const event = await Event.findLatest({\n-      teamId: user.teamId,\n-    });\n-\n-    expect(notification.viewedAt).toBe(null);\n-    expect(notification.archivedAt).toBeNull();\n-    expect(event!.name).toEqual(\""notifications.update\"");\n-    expect(event!.modelId).toEqual(notification.id);\n-  });\n-});\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8752"", ""pr_id"": 8752, ""issue_id"": 8678, ""repo"": ""outline/outline"", ""problem_statement"": ""Flaky `files.test.ts`\nSince moving to GitHub actions `files.test.ts` keeps timing out about 25% of the time, super annoying."", ""issue_word_count"": 18, ""test_files_count"": 2, ""non_test_files_count"": 0, ""pr_changed_files"": [""plugins/storage/server/api/files.test.ts"", ""server/test/TestServer.ts""], ""pr_changed_test_files"": [""plugins/storage/server/api/files.test.ts"", ""server/test/TestServer.ts""], ""base_commit"": ""0ec64405067d7a8f02f75f2a300f04de0c890705"", ""head_commit"": ""26cc4d881ae9c6b87c72b5a6ba2394d80a702b11"", ""repo_url"": ""https://github.com/outline/outline/pull/8752"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8752"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-23T03:46:36.000Z"", ""patch"": """", ""test_patch"": ""diff --git a/plugins/storage/server/api/files.test.ts b/plugins/storage/server/api/files.test.ts\nindex 10e454d2c1e8..f6ed0ab03415 100644\n--- a/plugins/storage/server/api/files.test.ts\n+++ b/plugins/storage/server/api/files.test.ts\n@@ -17,6 +17,9 @@ import { getTestServer } from \""@server/test/support\"";\n \n const server = getTestServer();\n \n+// Increase timeout for all tests in this file\n+jest.setTimeout(10000);\n+\n describe(\""#files.create\"", () => {\n   it(\""should fail with status 400 bad request if key is invalid\"", async () => {\n     const user = await buildUser();\n\ndiff --git a/server/test/TestServer.ts b/server/test/TestServer.ts\nindex 1a2df84b21ad..0f8f5326a13a 100644\n--- a/server/test/TestServer.ts\n+++ b/server/test/TestServer.ts\n@@ -47,9 +47,7 @@ class TestServer {\n \n   close() {\n     this.listener = null;\n-    return new Promise<void>((resolve, reject) => {\n-      this.server.close((err) => (err ? reject(err) : resolve()));\n-    });\n+    this.server.closeAllConnections();\n   }\n \n   delete(path: string, options?: any) {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8746"", ""pr_id"": 8746, ""issue_id"": 8740, ""repo"": ""outline/outline"", ""problem_statement"": ""Admin unable to remove group access from draft\n> As far as I can tell, the only person who can remove it is the document creator. Since the unpublished doc isn't in a collection, it's not possible for a collection admin to change that permission either\n"", ""issue_word_count"": 39, ""test_files_count"": 1, ""non_test_files_count"": 1, ""pr_changed_files"": [""server/policies/document.test.ts"", ""server/policies/document.ts""], ""pr_changed_test_files"": [""server/policies/document.test.ts""], ""base_commit"": ""556503448641383e64f5b7064ee97cc762b0efc0"", ""head_commit"": ""8b42eab958e43bc6d9f31c818a249edf7e869e8e"", ""repo_url"": ""https://github.com/outline/outline/pull/8746"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8746"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-22T15:22:09.000Z"", ""patch"": ""diff --git a/server/policies/document.ts b/server/policies/document.ts\nindex 96972e72d703..f76e62d5ab51 100644\n--- a/server/policies/document.ts\n+++ b/server/policies/document.ts\n@@ -125,6 +125,7 @@ allow(User, \""manageUsers\"", Document, (actor, document) =>\n     can(actor, \""update\"", document),\n     or(\n       includesMembership(document, [DocumentPermission.Admin]),\n+      and(isTeamAdmin(actor, document), can(actor, \""read\"", document)),\n       can(actor, \""updateDocument\"", document?.collection),\n       !!document?.isDraft && actor.id === document?.createdById\n     )\n@@ -136,6 +137,7 @@ allow(User, \""duplicate\"", Document, (actor, document) =>\n     can(actor, \""update\"", document),\n     or(\n       includesMembership(document, [DocumentPermission.Admin]),\n+      and(isTeamAdmin(actor, document), can(actor, \""read\"", document)),\n       can(actor, \""updateDocument\"", document?.collection),\n       !!document?.isDraft && actor.id === document?.createdById,\n       and(\n@@ -233,6 +235,7 @@ allow(User, \""archive\"", Document, (actor, document) =>\n     can(actor, \""update\"", document),\n     or(\n       includesMembership(document, [DocumentPermission.Admin]),\n+      and(isTeamAdmin(actor, document), can(actor, \""read\"", document)),\n       can(actor, \""updateDocument\"", document?.collection)\n     )\n   )\n"", ""test_patch"": ""diff --git a/server/policies/document.test.ts b/server/policies/document.test.ts\nindex 3ac5c9a1ce49..d79f531fe4bd 100644\n--- a/server/policies/document.test.ts\n+++ b/server/policies/document.test.ts\n@@ -10,6 +10,7 @@ import {\n   buildDocument,\n   buildDraftDocument,\n   buildCollection,\n+  buildAdmin,\n } from \""@server/test/factories\"";\n import { serialize } from \""./index\"";\n \n@@ -355,7 +356,10 @@ describe(\""read document\"", () => {\n });\n \n describe(\""read_write document\"", () => {\n-  for (const role of Object.values(UserRole)) {\n+  const nonAdminRoles = Object.values(UserRole).filter(\n+    (role) => role !== UserRole.Admin\n+  );\n+  for (const role of nonAdminRoles) {\n     it(`should allow write permissions for ${role}`, async () => {\n       const team = await buildTeam();\n       const user = await buildUser({ teamId: team.id, role });\n@@ -391,6 +395,41 @@ describe(\""read_write document\"", () => {\n       expect(abilities.move).toEqual(false);\n     });\n   }\n+\n+  it(`should allow write permissions for admin`, async () => {\n+    const team = await buildTeam();\n+    const user = await buildAdmin({ teamId: team.id });\n+    const collection = await buildCollection({\n+      teamId: team.id,\n+      permission: null,\n+    });\n+    const doc = await buildDocument({\n+      teamId: team.id,\n+      collectionId: collection.id,\n+    });\n+    await UserMembership.create({\n+      userId: user.id,\n+      documentId: doc.id,\n+      permission: DocumentPermission.ReadWrite,\n+      createdById: user.id,\n+    });\n+\n+    // reload to get membership\n+    const document = await Document.findByPk(doc.id, { userId: user.id });\n+    const abilities = serialize(user, document);\n+    expect(abilities.read).toBeTruthy();\n+    expect(abilities.download).toBeTruthy();\n+    expect(abilities.update).toBeTruthy();\n+    expect(abilities.delete).toBeTruthy();\n+    expect(abilities.subscribe).toBeTruthy();\n+    expect(abilities.unsubscribe).toBeTruthy();\n+    expect(abilities.comment).toBeTruthy();\n+    expect(abilities.createChildDocument).toBeTruthy();\n+    expect(abilities.manageUsers).toBeTruthy();\n+    expect(abilities.archive).toBeTruthy();\n+    expect(abilities.share).toEqual(false);\n+    expect(abilities.move).toEqual(false);\n+  });\n });\n \n describe(\""manage document\"", () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8730"", ""pr_id"": 8730, ""issue_id"": 8729, ""repo"": ""outline/outline"", ""problem_statement"": ""TypeError: Cannot read properties of undefined (reading 'some')\nSentry Issue: [OUTLINE-CLOUD-8EK](https://outline-jl.sentry.io/issues/6432263219/?referrer=github_integration)\n\n```\nTypeError: Cannot read properties of undefined (reading 'some')\n  at ProsemirrorHelper.getPlainParagraphs (../../../shared/utils/ProsemirrorHelper.ts:362:23)\n  at paragraphs (../../../app/components/Editor.tsx:190:32)\n  at Editor (../../../app/components/Editor.tsx:188:22)\n  at fetchData (../../../app/scenes/Document/Shared.tsx:151:9)\n...\n(22 additional frame(s) were not displayed)\n```"", ""issue_word_count"": 63, ""test_files_count"": 1, ""non_test_files_count"": 4, ""pr_changed_files"": [""app/components/Editor.tsx"", ""app/models/Document.ts"", ""shared/types.ts"", ""shared/utils/ProsemirrorHelper.test.ts"", ""shared/utils/ProsemirrorHelper.ts""], ""pr_changed_test_files"": [""shared/utils/ProsemirrorHelper.test.ts""], ""base_commit"": ""0fe50c179c4617b1928eba93ff821e3e309f2b3f"", ""head_commit"": ""766d90811800cd46ae63f2b59f49b7027228b27f"", ""repo_url"": ""https://github.com/outline/outline/pull/8730"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8730"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-20T13:46:53.000Z"", ""patch"": ""diff --git a/app/components/Editor.tsx b/app/components/Editor.tsx\nindex 19f6a7c4f0c8..e41ef39a516e 100644\n--- a/app/components/Editor.tsx\n+++ b/app/components/Editor.tsx\n@@ -205,7 +205,7 @@ function Editor(props: Props, ref: React.RefObject<SharedEditor> | null) {\n             <div className=\""ProseMirror\"">\n               {paragraphs.map((paragraph, index) => (\n                 <p key={index} dir=\""auto\"">\n-                  {paragraph.content.map((content) => content.text)}\n+                  {paragraph.content?.map((content) => content.text)}\n                 </p>\n               ))}\n             </div>\n\ndiff --git a/app/models/Document.ts b/app/models/Document.ts\nindex 57a530a93af7..78be2fe01ae9 100644\n--- a/app/models/Document.ts\n+++ b/app/models/Document.ts\n@@ -600,7 +600,7 @@ export default class Document extends ArchivableModel implements Searchable {\n    */\n   getSummary = (blocks = 4) => ({\n     ...this.data,\n-    content: this.data.content.slice(0, blocks),\n+    content: this.data.content?.slice(0, blocks),\n   });\n \n   @computed\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex dc451167506d..3a6891db03ad 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -430,7 +430,7 @@ export type JSONObject = { [x: string]: JSONValue };\n \n export type ProsemirrorData = {\n   type: string;\n-  content: ProsemirrorData[];\n+  content?: ProsemirrorData[];\n   text?: string;\n   attrs?: JSONObject;\n   marks?: {\n\ndiff --git a/shared/utils/ProsemirrorHelper.ts b/shared/utils/ProsemirrorHelper.ts\nindex 9b7764413506..c20eacfeae3e 100644\n--- a/shared/utils/ProsemirrorHelper.ts\n+++ b/shared/utils/ProsemirrorHelper.ts\n@@ -70,7 +70,7 @@ export class ProsemirrorHelper {\n       return false;\n     }\n \n-    if (data.content.length === 1) {\n+    if (data.content?.length === 1) {\n       const node = data.content[0];\n       return (\n         node.type === \""paragraph\"" &&\n@@ -80,7 +80,7 @@ export class ProsemirrorHelper {\n       );\n     }\n \n-    return data.content.length === 0;\n+    return !data.content || data.content.length === 0;\n   }\n \n   /**\n@@ -355,14 +355,19 @@ export class ProsemirrorHelper {\n    * @returns An array of paragraph nodes or undefined\n    */\n   static getPlainParagraphs(data: ProsemirrorData) {\n-    const paragraphs = [];\n+    const paragraphs: ProsemirrorData[] = [];\n+    if (!data.content) {\n+      return paragraphs;\n+    }\n+\n     for (const node of data.content) {\n       if (\n         node.type === \""paragraph\"" &&\n-        !node.content.some(\n-          (item) =>\n-            item.type !== \""text\"" || (item.marks && item.marks.length > 0)\n-        )\n+        (!node.content ||\n+          !node.content.some(\n+            (item) =>\n+              item.type !== \""text\"" || (item.marks && item.marks.length > 0)\n+          ))\n       ) {\n         paragraphs.push(node);\n       } else {\n"", ""test_patch"": ""diff --git a/shared/utils/ProsemirrorHelper.test.ts b/shared/utils/ProsemirrorHelper.test.ts\nindex 3974785c01f1..d557ad2b693d 100644\n--- a/shared/utils/ProsemirrorHelper.test.ts\n+++ b/shared/utils/ProsemirrorHelper.test.ts\n@@ -214,5 +214,23 @@ describe(\""ProsemirrorHelper\"", () => {\n       const paragraphs = ProsemirrorHelper.getPlainParagraphs(data);\n       expect(paragraphs).toBeUndefined();\n     });\n+\n+    it(\""should handle paragraph without content\"", async () => {\n+      const data = {\n+        type: \""doc\"",\n+        content: [\n+          {\n+            type: \""paragraph\"",\n+          },\n+        ],\n+      } as ProsemirrorData;\n+\n+      const paragraphs = ProsemirrorHelper.getPlainParagraphs(data);\n+      expect(paragraphs).toEqual([\n+        {\n+          type: \""paragraph\"",\n+        },\n+      ]);\n+    });\n   });\n });\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8726"", ""pr_id"": 8726, ""issue_id"": 8714, ""repo"": ""outline/outline"", ""problem_statement"": ""\""Unknown\"" users visible in users table\nSeems to be an artifact of a user being deleted"", ""issue_word_count"": 10, ""test_files_count"": 1, ""non_test_files_count"": 7, ""pr_changed_files"": [""app/components/Collaborators.tsx"", ""app/components/Sharing/components/Suggestions.tsx"", ""app/models/base/ParanoidModel.ts"", ""app/scenes/Settings/Members.tsx"", ""app/stores/UsersStore.ts"", ""app/stores/base/Store.ts"", ""server/presenters/__snapshots__/user.test.ts.snap"", ""server/presenters/user.ts""], ""pr_changed_test_files"": [""server/presenters/__snapshots__/user.test.ts.snap""], ""base_commit"": ""ae249f720df17bedc9167932f3252dea71bd76be"", ""head_commit"": ""5e6dd2c5a0f5180fb0f4b9fb582174f210df1b58"", ""repo_url"": ""https://github.com/outline/outline/pull/8726"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8726"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-20T04:00:04.000Z"", ""patch"": ""diff --git a/app/components/Collaborators.tsx b/app/components/Collaborators.tsx\nindex c420d3734933..a02d480477a7 100644\n--- a/app/components/Collaborators.tsx\n+++ b/app/components/Collaborators.tsx\n@@ -49,7 +49,7 @@ function Collaborators(props: Props) {\n     () =>\n       orderBy(\n         filter(\n-          users.orderedData,\n+          users.all,\n           (u) =>\n             (presentIds.includes(u.id) ||\n               document.collaboratorIds.includes(u.id)) &&\n@@ -58,7 +58,7 @@ function Collaborators(props: Props) {\n         [(u) => presentIds.includes(u.id), \""id\""],\n         [\""asc\"", \""asc\""]\n       ),\n-    [document.collaboratorIds, users.orderedData, presentIds]\n+    [document.collaboratorIds, users.all, presentIds]\n   );\n \n   // load any users we don't yet have in memory\n\ndiff --git a/app/components/Sharing/components/Suggestions.tsx b/app/components/Sharing/components/Suggestions.tsx\nindex ac2cf6d0b6ad..88ac6c6053b1 100644\n--- a/app/components/Sharing/components/Suggestions.tsx\n+++ b/app/components/Sharing/components/Suggestions.tsx\n@@ -96,7 +96,7 @@ export const Suggestions = observer(\n           ? users.notInDocument(document.id, query)\n           : collection\n           ? users.notInCollection(collection.id, query)\n-          : users.orderedData\n+          : users.activeOrInvited\n       ).filter((u) => !u.isSuspended && u.id !== user.id);\n \n       if (isEmail(query)) {\n@@ -114,7 +114,7 @@ export const Suggestions = observer(\n     }, [\n       getSuggestionForEmail,\n       users,\n-      users.orderedData,\n+      users.activeOrInvited,\n       groups,\n       groups.orderedData,\n       document?.id,\n\ndiff --git a/app/models/base/ParanoidModel.ts b/app/models/base/ParanoidModel.ts\nindex ffca1a250c63..6930e28aa308 100644\n--- a/app/models/base/ParanoidModel.ts\n+++ b/app/models/base/ParanoidModel.ts\n@@ -1,7 +1,12 @@\n-import { observable } from \""mobx\"";\n+import { computed, observable } from \""mobx\"";\n import Model from \""./Model\"";\n \n export default abstract class ParanoidModel extends Model {\n   @observable\n   deletedAt: string | undefined;\n+\n+  @computed\n+  get isDeleted(): boolean {\n+    return !!this.deletedAt;\n+  }\n }\n\ndiff --git a/app/scenes/Settings/Members.tsx b/app/scenes/Settings/Members.tsx\nindex aebe49cb468e..cb3deeb0d625 100644\n--- a/app/scenes/Settings/Members.tsx\n+++ b/app/scenes/Settings/Members.tsx\n@@ -194,7 +194,7 @@ function getFilteredUsers({\n \n   switch (filter) {\n     case \""all\"":\n-      filteredUsers = users.orderedData;\n+      filteredUsers = users.all;\n       break;\n     case \""suspended\"":\n       filteredUsers = users.suspended;\n\ndiff --git a/app/stores/UsersStore.ts b/app/stores/UsersStore.ts\nindex f517f166782b..6433e75d2e11 100644\n--- a/app/stores/UsersStore.ts\n+++ b/app/stores/UsersStore.ts\n@@ -27,46 +27,44 @@ export default class UsersStore extends Store<User> {\n \n   @computed\n   get active(): User[] {\n-    return this.orderedData.filter(\n-      (user) => !user.isSuspended && user.lastActiveAt\n-    );\n+    return this.all.filter((user) => !user.isSuspended && !user.isInvited);\n   }\n \n   @computed\n   get suspended(): User[] {\n-    return this.orderedData.filter((user) => user.isSuspended);\n+    return this.all.filter((user) => user.isSuspended);\n   }\n \n   @computed\n   get activeOrInvited(): User[] {\n-    return this.orderedData.filter((user) => !user.isSuspended);\n+    return this.all.filter((user) => !user.isSuspended);\n   }\n \n   @computed\n   get invited(): User[] {\n-    return this.orderedData.filter((user) => user.isInvited);\n+    return this.all.filter((user) => user.isInvited);\n   }\n \n   @computed\n   get admins(): User[] {\n-    return this.orderedData.filter((user) => user.isAdmin);\n+    return this.all.filter((user) => user.isAdmin && !user.isInvited);\n   }\n \n   @computed\n   get members(): User[] {\n-    return this.orderedData.filter(\n+    return this.all.filter(\n       (user) => !user.isViewer && !user.isAdmin && !user.isInvited\n     );\n   }\n \n   @computed\n   get viewers(): User[] {\n-    return this.orderedData.filter((user) => user.isViewer);\n+    return this.all.filter((user) => user.isViewer && !user.isInvited);\n   }\n \n   @computed\n   get all(): User[] {\n-    return this.orderedData.filter((user) => user.lastActiveAt);\n+    return this.orderedData.filter((user) => !user.isDeleted);\n   }\n \n   @computed\n\ndiff --git a/app/stores/base/Store.ts b/app/stores/base/Store.ts\nindex 20944c614ed1..498e783c41ca 100644\n--- a/app/stores/base/Store.ts\n+++ b/app/stores/base/Store.ts\n@@ -1,6 +1,7 @@\n import commandScore from \""command-score\"";\n import invariant from \""invariant\"";\n-import { deburr, type ObjectIterateeCustom } from \""lodash\"";\n+import type { ObjectIterateeCustom } from \""lodash\"";\n+import deburr from \""lodash/deburr\"";\n import filter from \""lodash/filter\"";\n import find from \""lodash/find\"";\n import flatten from \""lodash/flatten\"";\n@@ -102,6 +103,9 @@ export default abstract class Store<T extends Model> {\n \n     return this.orderedData\n       .filter((item: T & Searchable) => {\n+        if (\""deletedAt\"" in item && item.deletedAt) {\n+          return false;\n+        }\n         if (\""searchContent\"" in item) {\n           const seachables =\n             typeof item.searchContent === \""string\""\n\ndiff --git a/server/presenters/user.ts b/server/presenters/user.ts\nindex f9b73d55b323..2bdca9fc4762 100644\n--- a/server/presenters/user.ts\n+++ b/server/presenters/user.ts\n@@ -13,6 +13,7 @@ type UserPresentation = {\n   avatarUrl: string | null | undefined;\n   createdAt: Date;\n   updatedAt: Date;\n+  deletedAt: Date | null;\n   lastActiveAt: Date | null;\n   color: string;\n   role: UserRole;\n@@ -37,6 +38,7 @@ export default function presentUser(\n     isSuspended: user.isSuspended,\n     createdAt: user.createdAt,\n     updatedAt: user.updatedAt,\n+    deletedAt: user.deletedAt,\n     lastActiveAt: user.lastActiveAt,\n     timezone: user.timezone,\n   };\n"", ""test_patch"": ""diff --git a/server/presenters/__snapshots__/user.test.ts.snap b/server/presenters/__snapshots__/user.test.ts.snap\nindex c1766ed44471..3a165f8ea7a0 100644\n--- a/server/presenters/__snapshots__/user.test.ts.snap\n+++ b/server/presenters/__snapshots__/user.test.ts.snap\n@@ -5,6 +5,7 @@ exports[`presents a user 1`] = `\n   \""avatarUrl\"": null,\n   \""color\"": \""#FF5C80\"",\n   \""createdAt\"": undefined,\n+  \""deletedAt\"": undefined,\n   \""id\"": \""123\"",\n   \""isSuspended\"": false,\n   \""lastActiveAt\"": undefined,\n@@ -20,6 +21,7 @@ exports[`presents a user without slack data 1`] = `\n   \""avatarUrl\"": null,\n   \""color\"": \""#FF5C80\"",\n   \""createdAt\"": undefined,\n+  \""deletedAt\"": undefined,\n   \""id\"": \""123\"",\n   \""isSuspended\"": false,\n   \""lastActiveAt\"": undefined,\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8603"", ""pr_id"": 8603, ""issue_id"": 5496, ""repo"": ""outline/outline"", ""problem_statement"": ""Add custom naming of revisions\nAdd the ability to name revisions"", ""issue_word_count"": 11, ""test_files_count"": 2, ""non_test_files_count"": 9, ""pr_changed_files"": [""app/models/Revision.ts"", ""server/migrations/20250301234423-add-name-to-revisions.js"", ""server/models/Revision.ts"", ""server/policies/index.ts"", ""server/policies/revision.ts"", ""server/presenters/revision.ts"", ""server/routes/api/revisions/revisions.test.ts"", ""server/routes/api/revisions/revisions.ts"", ""server/routes/api/revisions/schema.ts"", ""server/routes/api/shares/shares.test.ts"", ""shared/validations.ts""], ""pr_changed_test_files"": [""server/routes/api/revisions/revisions.test.ts"", ""server/routes/api/shares/shares.test.ts""], ""base_commit"": ""bed0bf9ec8b119cd3c2d60b1849ef10c59277d6a"", ""head_commit"": ""ee3720c34ab7103c913e8bfdee9c5275217b6de7"", ""repo_url"": ""https://github.com/outline/outline/pull/8603"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8603"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-02T13:07:30.000Z"", ""patch"": ""diff --git a/app/models/Revision.ts b/app/models/Revision.ts\nindex 50be73d49d72..5dee0e950a79 100644\n--- a/app/models/Revision.ts\n+++ b/app/models/Revision.ts\n@@ -19,6 +19,9 @@ class Revision extends Model {\n   /** The document title when the revision was created */\n   title: string;\n \n+  /** An optional name for the revision */\n+  name: string | null;\n+\n   /** Prosemirror data of the content when revision was created */\n   data: ProsemirrorData;\n \n\ndiff --git a/server/migrations/20250301234423-add-name-to-revisions.js b/server/migrations/20250301234423-add-name-to-revisions.js\nnew file mode 100644\nindex 000000000000..f04ad392a995\n--- /dev/null\n+++ b/server/migrations/20250301234423-add-name-to-revisions.js\n@@ -0,0 +1,15 @@\n+\""use strict\"";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.addColumn(\""revisions\"", \""name\"", {\n+      type: Sequelize.STRING,\n+      allowNull: true,\n+    });\n+  },\n+\n+  async down(queryInterface) {\n+    await queryInterface.removeColumn(\""revisions\"", \""name\"");\n+  },\n+};\n\ndiff --git a/server/models/Revision.ts b/server/models/Revision.ts\nindex abe7bc28f309..4b0de276111c 100644\n--- a/server/models/Revision.ts\n+++ b/server/models/Revision.ts\n@@ -15,7 +15,7 @@ import {\n   Length as SimpleLength,\n } from \""sequelize-typescript\"";\n import type { ProsemirrorData } from \""@shared/types\"";\n-import { DocumentValidation } from \""@shared/validations\"";\n+import { DocumentValidation, RevisionValidation } from \""@shared/validations\"";\n import Document from \""./Document\"";\n import User from \""./User\"";\n import IdModel from \""./base/IdModel\"";\n@@ -42,6 +42,7 @@ class Revision extends IdModel<\n   @Column(DataType.SMALLINT)\n   version?: number | null;\n \n+  /** The editor version at the time of the revision */\n   @SimpleLength({\n     max: 255,\n     msg: `editorVersion must be 255 characters or less`,\n@@ -49,6 +50,7 @@ class Revision extends IdModel<\n   @Column\n   editorVersion: string;\n \n+  /** The document title at the time of the revision */\n   @Length({\n     max: DocumentValidation.maxTitleLength,\n     msg: `Revision title must be ${DocumentValidation.maxTitleLength} characters or less`,\n@@ -56,6 +58,14 @@ class Revision extends IdModel<\n   @Column\n   title: string;\n \n+  /** An optional name for the revision */\n+  @Length({\n+    max: RevisionValidation.maxNameLength,\n+    msg: `Revision name must be ${RevisionValidation.maxNameLength} characters or less`,\n+  })\n+  @Column\n+  name: string | null;\n+\n   /**\n    * The content of the revision as Markdown.\n    *\n@@ -65,13 +75,11 @@ class Revision extends IdModel<\n   @Column(DataType.TEXT)\n   text: string;\n \n-  /**\n-   * The content of the revision as JSON.\n-   */\n+  /** The content of the revision as JSON. */\n   @Column(DataType.JSONB)\n   content: ProsemirrorData | null;\n \n-  /** An icon to use as the document icon. */\n+  /** The icon at the time of the revision. */\n   @Length({\n     max: 50,\n     msg: `icon must be 50 characters or less`,\n@@ -79,7 +87,7 @@ class Revision extends IdModel<\n   @Column\n   icon: string | null;\n \n-  /** The color of the icon. */\n+  /** The color at the time of the revision. */\n   @IsHexColor\n   @Column\n   color: string | null;\n\ndiff --git a/server/policies/index.ts b/server/policies/index.ts\nindex 82e5cf5ba4c7..70d5f4f8c8e3 100644\n--- a/server/policies/index.ts\n+++ b/server/policies/index.ts\n@@ -12,6 +12,7 @@ import \""./fileOperation\"";\n import \""./integration\"";\n import \""./pins\"";\n import \""./reaction\"";\n+import \""./revision\"";\n import \""./searchQuery\"";\n import \""./share\"";\n import \""./star\"";\n\ndiff --git a/server/policies/revision.ts b/server/policies/revision.ts\nnew file mode 100644\nindex 000000000000..06e931868ef8\n--- /dev/null\n+++ b/server/policies/revision.ts\n@@ -0,0 +1,11 @@\n+import { User, Revision } from \""@server/models\"";\n+import { allow } from \""./cancan\"";\n+import { and, isTeamMutable, or } from \""./utils\"";\n+\n+allow(User, [\""update\""], Revision, (actor, revision) =>\n+  and(\n+    //\n+    or(actor.id === revision?.userId, actor.isAdmin),\n+    isTeamMutable(actor)\n+  )\n+);\n\ndiff --git a/server/presenters/revision.ts b/server/presenters/revision.ts\nindex 5bf6250245e9..246183962578 100644\n--- a/server/presenters/revision.ts\n+++ b/server/presenters/revision.ts\n@@ -12,6 +12,7 @@ async function presentRevision(revision: Revision, diff?: string) {\n     id: revision.id,\n     documentId: revision.documentId,\n     title: strippedTitle,\n+    name: revision.name,\n     data: await DocumentHelper.toJSON(revision),\n     icon: revision.icon ?? emoji,\n     color: revision.color,\n\ndiff --git a/server/routes/api/revisions/revisions.ts b/server/routes/api/revisions/revisions.ts\nindex f09855d234b2..54c27ec7f31f 100644\n--- a/server/routes/api/revisions/revisions.ts\n+++ b/server/routes/api/revisions/revisions.ts\n@@ -4,11 +4,12 @@ import { RevisionHelper } from \""@shared/utils/RevisionHelper\"";\n import slugify from \""@shared/utils/slugify\"";\n import { ValidationError } from \""@server/errors\"";\n import auth from \""@server/middlewares/authentication\"";\n+import { transaction } from \""@server/middlewares/transaction\"";\n import validate from \""@server/middlewares/validate\"";\n import { Document, Revision } from \""@server/models\"";\n import { DocumentHelper } from \""@server/models/helpers/DocumentHelper\"";\n import { authorize } from \""@server/policies\"";\n-import { presentRevision } from \""@server/presenters\"";\n+import { presentPolicies, presentRevision } from \""@server/presenters\"";\n import { APIContext } from \""@server/types\"";\n import pagination from \""../middlewares/pagination\"";\n import * as T from \""./schema\"";\n@@ -57,6 +58,36 @@ router.post(\n           includeStyles: false,\n         })\n       ),\n+      policies: presentPolicies(user, [after]),\n+    };\n+  }\n+);\n+\n+router.post(\n+  \""revisions.update\"",\n+  auth(),\n+  validate(T.RevisionsUpdateSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.RevisionsUpdateReq>) => {\n+    const { id, name } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n+\n+    const revision = await Revision.findByPk(id, {\n+      rejectOnEmpty: true,\n+    });\n+    const document = await Document.findByPk(revision.documentId, {\n+      userId: user.id,\n+    });\n+    authorize(user, \""update\"", document);\n+    authorize(user, \""update\"", revision);\n+\n+    revision.name = name;\n+    await revision.save({ transaction });\n+\n+    ctx.body = {\n+      data: await presentRevision(revision),\n+      policies: presentPolicies(user, [revision]),\n     };\n   }\n );\n@@ -110,6 +141,7 @@ router.post(\n \n     ctx.body = {\n       data: content,\n+      policies: presentPolicies(user, [revision]),\n     };\n   }\n );\n@@ -144,6 +176,7 @@ router.post(\n     ctx.body = {\n       pagination: ctx.state.pagination,\n       data,\n+      policies: presentPolicies(user, revisions),\n     };\n   }\n );\n\ndiff --git a/server/routes/api/revisions/schema.ts b/server/routes/api/revisions/schema.ts\nindex 85c88974d59e..d7b522452741 100644\n--- a/server/routes/api/revisions/schema.ts\n+++ b/server/routes/api/revisions/schema.ts\n@@ -1,5 +1,6 @@\n import isEmpty from \""lodash/isEmpty\"";\n import { z } from \""zod\"";\n+import { RevisionValidation } from \""@shared/validations\"";\n import { Revision } from \""@server/models\"";\n import { BaseSchema } from \""@server/routes/api/schema\"";\n \n@@ -25,6 +26,19 @@ export const RevisionsDiffSchema = BaseSchema.extend({\n \n export type RevisionsDiffReq = z.infer<typeof RevisionsDiffSchema>;\n \n+export const RevisionsUpdateSchema = BaseSchema.extend({\n+  body: z.object({\n+    id: z.string().uuid(),\n+\n+    name: z\n+      .string()\n+      .min(RevisionValidation.minNameLength)\n+      .max(RevisionValidation.maxNameLength),\n+  }),\n+});\n+\n+export type RevisionsUpdateReq = z.infer<typeof RevisionsUpdateSchema>;\n+\n export const RevisionsListSchema = z.object({\n   body: z.object({\n     direction: z\n\ndiff --git a/shared/validations.ts b/shared/validations.ts\nindex d00e8898b1ae..a0359c9857a7 100644\n--- a/shared/validations.ts\n+++ b/shared/validations.ts\n@@ -51,6 +51,11 @@ export const DocumentValidation = {\n   maxStateLength: 1500 * 1024,\n };\n \n+export const RevisionValidation = {\n+  minNameLength: 1,\n+  maxNameLength: 255,\n+};\n+\n export const PinValidation = {\n   /** The maximum number of pinned documents on an individual collection or home screen */\n   max: 8,\n"", ""test_patch"": ""diff --git a/server/routes/api/revisions/revisions.test.ts b/server/routes/api/revisions/revisions.test.ts\nindex 7db8e718749f..99586488916e 100644\n--- a/server/routes/api/revisions/revisions.test.ts\n+++ b/server/routes/api/revisions/revisions.test.ts\n@@ -1,5 +1,6 @@\n import { UserMembership, Revision } from \""@server/models\"";\n import {\n+  buildAdmin,\n   buildCollection,\n   buildDocument,\n   buildUser,\n@@ -42,6 +43,61 @@ describe(\""#revisions.info\"", () => {\n   });\n });\n \n+describe(\""#revisions.update\"", () => {\n+  it(\""should update a document revision\"", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const revision = await Revision.createFromDocument(document);\n+\n+    const res = await server.post(\""/api/revisions.update\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: revision.id,\n+        name: \""new name\"",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.name).toEqual(\""new name\"");\n+  });\n+\n+  it(\""should allow an admin to update a document revision\"", async () => {\n+    const admin = await buildAdmin();\n+    const document = await buildDocument({\n+      teamId: admin.teamId,\n+    });\n+    const revision = await Revision.createFromDocument(document);\n+\n+    const res = await server.post(\""/api/revisions.update\"", {\n+      body: {\n+        token: admin.getJwtToken(),\n+        id: revision.id,\n+        name: \""new name\"",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.name).toEqual(\""new name\"");\n+  });\n+\n+  it(\""should require authorization\"", async () => {\n+    const document = await buildDocument();\n+    const revision = await Revision.createFromDocument(document);\n+    const user = await buildUser();\n+    const res = await server.post(\""/api/revisions.update\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: revision.id,\n+        name: \""new name\"",\n+      },\n+    });\n+    expect(res.status).toEqual(403);\n+  });\n+});\n+\n describe(\""#revisions.diff\"", () => {\n   it(\""should return the document HTML if no previous revision\"", async () => {\n     const user = await buildUser();\n\ndiff --git a/server/routes/api/shares/shares.test.ts b/server/routes/api/shares/shares.test.ts\nindex 993ce345c1e0..fe8b9f435aa0 100644\n--- a/server/routes/api/shares/shares.test.ts\n+++ b/server/routes/api/shares/shares.test.ts\n@@ -62,6 +62,7 @@ describe(\""#shares.list\"", () => {\n     const document = await buildDocument({\n       userId: user.id,\n       teamId: user.teamId,\n+      title: \""hardcoded\"",\n     });\n     await buildShare({\n       documentId: document.id,\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8602"", ""pr_id"": 8602, ""issue_id"": 8585, ""repo"": ""outline/outline"", ""problem_statement"": ""Add filtering to \""Shared links\"" admin\nThis is the only table in admin that doesn't have some basic filtering, on large teams the amount of shared links will be in hundreds or thousands."", ""issue_word_count"": 28, ""test_files_count"": 1, ""non_test_files_count"": 5, ""pr_changed_files"": [""app/models/Share.ts"", ""app/scenes/Settings/Shares.tsx"", ""app/scenes/Settings/components/SharesTable.tsx"", ""server/routes/api/shares/schema.ts"", ""server/routes/api/shares/shares.test.ts"", ""server/routes/api/shares/shares.ts""], ""pr_changed_test_files"": [""server/routes/api/shares/shares.test.ts""], ""base_commit"": ""4573b3fea2367ead4838e21bdcfb34a052eb9a90"", ""head_commit"": ""a007c7a47979f112d43bdcc017ef4fef010dfb45"", ""repo_url"": ""https://github.com/outline/outline/pull/8602"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8602"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-01T22:22:15.000Z"", ""patch"": ""diff --git a/app/models/Share.ts b/app/models/Share.ts\nindex f6fee1ffc37c..fd066a98a31b 100644\n--- a/app/models/Share.ts\n+++ b/app/models/Share.ts\n@@ -1,12 +1,13 @@\n-import { observable } from \""mobx\"";\n+import { computed, observable } from \""mobx\"";\n import Collection from \""./Collection\"";\n import Document from \""./Document\"";\n import User from \""./User\"";\n import Model from \""./base/Model\"";\n import Field from \""./decorators/Field\"";\n import Relation from \""./decorators/Relation\"";\n+import { Searchable } from \""./interfaces/Searchable\"";\n \n-class Share extends Model {\n+class Share extends Model implements Searchable {\n   static modelName = \""Share\"";\n \n   @Field\n@@ -65,6 +66,11 @@ class Share extends Model {\n   /** The user that shared the document. */\n   @Relation(() => User, { onDelete: \""null\"" })\n   createdBy: User;\n+\n+  @computed\n+  get searchContent(): string[] {\n+    return [this.document?.title ?? this.documentTitle];\n+  }\n }\n \n export default Share;\n\ndiff --git a/app/scenes/Settings/Shares.tsx b/app/scenes/Settings/Shares.tsx\nindex e10e55f9c51c..1131c8263323 100644\n--- a/app/scenes/Settings/Shares.tsx\n+++ b/app/scenes/Settings/Shares.tsx\n@@ -3,10 +3,11 @@ import { observer } from \""mobx-react\"";\n import { GlobeIcon, WarningIcon } from \""outline-icons\"";\n import * as React from \""react\"";\n import { useTranslation, Trans } from \""react-i18next\"";\n-import { Link } from \""react-router-dom\"";\n+import { Link, useHistory, useLocation } from \""react-router-dom\"";\n import { toast } from \""sonner\"";\n import { ConditionalFade } from \""~/components/Fade\"";\n import Heading from \""~/components/Heading\"";\n+import InputSearch from \""~/components/InputSearch\"";\n import Notice from \""~/components/Notice\"";\n import Scene from \""~/components/Scene\"";\n import Text from \""~/components/Text\"";\n@@ -16,17 +17,22 @@ import useQuery from \""~/hooks/useQuery\"";\n import useStores from \""~/hooks/useStores\"";\n import { useTableRequest } from \""~/hooks/useTableRequest\"";\n import { SharesTable } from \""./components/SharesTable\"";\n+import { StickyFilters } from \""./components/StickyFilters\"";\n \n function Shares() {\n   const team = useCurrentTeam();\n   const { t } = useTranslation();\n+  const location = useLocation();\n+  const history = useHistory();\n   const { shares, auth } = useStores();\n   const canShareDocuments = auth.team && auth.team.sharing;\n   const can = usePolicy(team);\n   const params = useQuery();\n+  const [query, setQuery] = React.useState(\""\"");\n \n   const reqParams = React.useMemo(\n     () => ({\n+      query: params.get(\""query\"") || undefined,\n       sort: params.get(\""sort\"") || \""createdAt\"",\n       direction: (params.get(\""direction\"") || \""desc\"").toUpperCase() as\n         | \""ASC\""\n@@ -44,18 +50,44 @@ function Shares() {\n   );\n \n   const { data, error, loading, next } = useTableRequest({\n-    data: shares.orderedData,\n+    data: shares.findByQuery(reqParams.query ?? \""\""),\n     sort,\n     reqFn: shares.fetchPage,\n     reqParams,\n   });\n \n+  const updateParams = React.useCallback(\n+    (name: string, value: string) => {\n+      if (value) {\n+        params.set(name, value);\n+      } else {\n+        params.delete(name);\n+      }\n+\n+      history.replace({\n+        pathname: location.pathname,\n+        search: params.toString(),\n+      });\n+    },\n+    [params, history, location.pathname]\n+  );\n+\n+  const handleSearch = React.useCallback((event) => {\n+    const { value } = event.target;\n+    setQuery(value);\n+  }, []);\n+\n   React.useEffect(() => {\n     if (error) {\n       toast.error(t(\""Could not load shares\""));\n     }\n   }, [t, error]);\n \n+  React.useEffect(() => {\n+    const timeout = setTimeout(() => updateParams(\""query\"", query), 250);\n+    return () => clearTimeout(timeout);\n+  }, [query, updateParams]);\n+\n   return (\n     <Scene title={t(\""Shared Links\"")} icon={<GlobeIcon />} wide>\n       <Heading>{t(\""Shared Links\"")}</Heading>\n@@ -83,6 +115,14 @@ function Shares() {\n         </Trans>\n       </Text>\n \n+      <StickyFilters gap={8}>\n+        <InputSearch\n+          short\n+          value={query}\n+          placeholder={`${t(\""Filter\"")}\u2026`}\n+          onChange={handleSearch}\n+        />\n+      </StickyFilters>\n       <ConditionalFade animate={!data}>\n         <SharesTable\n           data={data ?? []}\n\ndiff --git a/app/scenes/Settings/components/SharesTable.tsx b/app/scenes/Settings/components/SharesTable.tsx\nindex 5714e897ca7f..48377c450c20 100644\n--- a/app/scenes/Settings/components/SharesTable.tsx\n+++ b/app/scenes/Settings/components/SharesTable.tsx\n@@ -3,7 +3,7 @@ import * as React from \""react\"";\n import { useTranslation } from \""react-i18next\"";\n import { unicodeCLDRtoBCP47 } from \""@shared/utils/date\"";\n import Share from \""~/models/Share\"";\n-import { Avatar } from \""~/components/Avatar\"";\n+import { Avatar, AvatarSize } from \""~/components/Avatar\"";\n import Flex from \""~/components/Flex\"";\n import { HEADER_HEIGHT } from \""~/components/Header\"";\n import {\n@@ -46,10 +46,10 @@ export function SharesTable({ data, canManage, ...rest }: Props) {\n           accessor: (share) => share.createdBy,\n           sortable: false,\n           component: (share) => (\n-            <Flex align=\""center\"" gap={4}>\n+            <Flex align=\""center\"" gap={8}>\n               {share.createdBy && (\n                 <>\n-                  <Avatar model={share.createdBy} />\n+                  <Avatar model={share.createdBy} size={AvatarSize.Small} />\n                   {share.createdBy.name}\n                 </>\n               )}\n\ndiff --git a/server/routes/api/shares/schema.ts b/server/routes/api/shares/schema.ts\nindex 4c5f46948863..1b6b782e0c39 100644\n--- a/server/routes/api/shares/schema.ts\n+++ b/server/routes/api/shares/schema.ts\n@@ -29,6 +29,7 @@ export type SharesInfoReq = z.infer<typeof SharesInfoSchema>;\n \n export const SharesListSchema = BaseSchema.extend({\n   body: z.object({\n+    query: z.string().optional(),\n     sort: z\n       .string()\n       .refine((val) => Object.keys(Share.getAttributes()).includes(val), {\n\ndiff --git a/server/routes/api/shares/shares.ts b/server/routes/api/shares/shares.ts\nindex 8dcb32e74b0d..289552a06bd5 100644\n--- a/server/routes/api/shares/shares.ts\n+++ b/server/routes/api/shares/shares.ts\n@@ -98,9 +98,10 @@ router.post(\n   pagination(),\n   validate(T.SharesListSchema),\n   async (ctx: APIContext<T.SharesListReq>) => {\n-    const { sort, direction } = ctx.input.body;\n+    const { sort, direction, query } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     authorize(user, \""listShares\"", user.team);\n+    const collectionIds = await user.collectionIds();\n \n     const where: WhereOptions<Share> = {\n       teamId: user.teamId,\n@@ -111,12 +112,21 @@ router.post(\n       },\n     };\n \n+    const documentWhere: WhereOptions<Document> = {\n+      teamId: user.teamId,\n+      collectionId: collectionIds,\n+    };\n+\n+    if (query) {\n+      documentWhere.title = {\n+        [Op.iLike]: `%${query}%`,\n+      };\n+    }\n+\n     if (user.isAdmin) {\n       delete where.userId;\n     }\n \n-    const collectionIds = await user.collectionIds();\n-\n     const options: FindOptions = {\n       where,\n       include: [\n@@ -125,9 +135,7 @@ router.post(\n           required: true,\n           paranoid: true,\n           as: \""document\"",\n-          where: {\n-            collectionId: collectionIds,\n-          },\n+          where: documentWhere,\n           include: [\n             {\n               model: Collection.scope({\n"", ""test_patch"": ""diff --git a/server/routes/api/shares/shares.test.ts b/server/routes/api/shares/shares.test.ts\nindex 58f072718a52..993ce345c1e0 100644\n--- a/server/routes/api/shares/shares.test.ts\n+++ b/server/routes/api/shares/shares.test.ts\n@@ -57,6 +57,57 @@ describe(\""#shares.list\"", () => {\n     expect(body.data[0].documentTitle).toBe(document.title);\n   });\n \n+  it(\""should allow filtering by document title\"", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    await buildShare({\n+      documentId: document.id,\n+      teamId: user.teamId,\n+      userId: user.id,\n+    });\n+    const res = await server.post(\""/api/shares.list\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        query: \""test\"",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(0);\n+  });\n+\n+  it(\""should allow filtering by document title and return matching shares\"", async () => {\n+    const user = await buildUser();\n+    await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      title: \""test\"",\n+    });\n+    const share = await buildShare({\n+      documentId: document.id,\n+      teamId: user.teamId,\n+      userId: user.id,\n+    });\n+    const res = await server.post(\""/api/shares.list\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        query: \""test\"",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(1);\n+    expect(body.data[0].id).toEqual(share.id);\n+    expect(body.data[0].documentTitle).toBe(\""test\"");\n+  });\n+\n   it(\""should not return revoked shares\"", async () => {\n     const user = await buildUser();\n     const document = await buildDocument({\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8544"", ""pr_id"": 8544, ""issue_id"": 8500, ""repo"": ""outline/outline"", ""problem_statement"": ""Allow sending `text` parameter to `comments.create`\nRight now you have to send `data` and know the correct doc data format, ideally we'd accept markdown similar to `documents.create`"", ""issue_word_count"": 23, ""test_files_count"": 2, ""non_test_files_count"": 3, ""pr_changed_files"": [""server/routes/api/comments/__snapshots__/comments.test.ts.snap"", ""server/routes/api/comments/comments.test.ts"", ""server/routes/api/comments/comments.ts"", ""server/routes/api/comments/schema.ts"", ""shared/editor/commands/table.ts""], ""pr_changed_test_files"": [""server/routes/api/comments/__snapshots__/comments.test.ts.snap"", ""server/routes/api/comments/comments.test.ts""], ""base_commit"": ""97e91eb06b1fc7f42a76fe22d791264ba51b32af"", ""head_commit"": ""52bc7e02afd8a39890aa7f9b08289f43091792aa"", ""repo_url"": ""https://github.com/outline/outline/pull/8544"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8544"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-25T01:52:40.000Z"", ""patch"": ""diff --git a/server/routes/api/comments/comments.ts b/server/routes/api/comments/comments.ts\nindex 292a8a2f7db6..6b86a3d0e7d7 100644\n--- a/server/routes/api/comments/comments.ts\n+++ b/server/routes/api/comments/comments.ts\n@@ -6,6 +6,7 @@ import {\n   TeamPreference,\n   MentionType,\n } from \""@shared/types\"";\n+import { parser } from \""@server/editor\"";\n import auth from \""@server/middlewares/authentication\"";\n import { feature } from \""@server/middlewares/feature\"";\n import { rateLimiter } from \""@server/middlewares/rateLimiter\"";\n@@ -13,6 +14,7 @@ import { transaction } from \""@server/middlewares/transaction\"";\n import validate from \""@server/middlewares/validate\"";\n import { Document, Comment, Collection, Reaction } from \""@server/models\"";\n import { ProsemirrorHelper } from \""@server/models/helpers/ProsemirrorHelper\"";\n+import { TextHelper } from \""@server/models/helpers/TextHelper\"";\n import { authorize } from \""@server/policies\"";\n import { presentComment, presentPolicies } from \""@server/presenters\"";\n import { APIContext } from \""@server/types\"";\n@@ -30,7 +32,7 @@ router.post(\n   validate(T.CommentsCreateSchema),\n   transaction(),\n   async (ctx: APIContext<T.CommentsCreateReq>) => {\n-    const { id, documentId, parentCommentId, data } = ctx.input.body;\n+    const { id, documentId, parentCommentId } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n \n@@ -40,6 +42,15 @@ router.post(\n     });\n     authorize(user, \""comment\"", document);\n \n+    const text = ctx.input.body.text\n+      ? await TextHelper.replaceImagesWithAttachments(\n+          ctx,\n+          ctx.input.body.text,\n+          user\n+        )\n+      : undefined;\n+    const data = text ? parser.parse(text).toJSON() : ctx.input.body.data;\n+\n     const comment = await Comment.createWithCtx(ctx, {\n       id,\n       data,\n\ndiff --git a/server/routes/api/comments/schema.ts b/server/routes/api/comments/schema.ts\nindex e8a05054cb3e..c18d4876504a 100644\n--- a/server/routes/api/comments/schema.ts\n+++ b/server/routes/api/comments/schema.ts\n@@ -1,4 +1,5 @@\n import emojiRegex from \""emoji-regex\"";\n+import isEmpty from \""lodash/isEmpty\"";\n import { z } from \""zod\"";\n import { CommentStatusFilter } from \""@shared/types\"";\n import { BaseSchema, ProsemirrorSchema } from \""@server/routes/api/schema\"";\n@@ -23,19 +24,26 @@ const CommentsSortParamsSchema = z.object({\n });\n \n export const CommentsCreateSchema = BaseSchema.extend({\n-  body: z.object({\n-    /** Allow creation with a specific ID */\n-    id: z.string().uuid().optional(),\n-\n-    /** Create comment for this document */\n-    documentId: z.string().uuid(),\n-\n-    /** Create comment under this parent */\n-    parentCommentId: z.string().uuid().optional(),\n-\n-    /** Create comment with this data */\n-    data: ProsemirrorSchema(),\n-  }),\n+  body: z\n+    .object({\n+      /** Allow creation with a specific ID */\n+      id: z.string().uuid().optional(),\n+\n+      /** Create comment for this document */\n+      documentId: z.string().uuid(),\n+\n+      /** Create comment under this parent */\n+      parentCommentId: z.string().uuid().optional(),\n+\n+      /** Create comment with this data */\n+      data: ProsemirrorSchema().optional(),\n+\n+      /** Create comment with this text */\n+      text: z.string().optional(),\n+    })\n+    .refine((obj) => !(isEmpty(obj.data) && isEmpty(obj.text)), {\n+      message: \""One of data or text is required\"",\n+    }),\n });\n \n export type CommentsCreateReq = z.infer<typeof CommentsCreateSchema>;\n\ndiff --git a/shared/editor/commands/table.ts b/shared/editor/commands/table.ts\nindex e4461e905d9f..3ed236a11cc9 100644\n--- a/shared/editor/commands/table.ts\n+++ b/shared/editor/commands/table.ts\n@@ -61,13 +61,14 @@ function createTableInner(\n       : cellType.createAndFill(attrs);\n \n   for (let index = 0; index < colsCount; index += 1) {\n-    const attrs = colWidth\n-      ? {\n-          colwidth: [colWidth],\n-          colspan: 1,\n-          rowspan: 1,\n-        }\n-      : null;\n+    const attrs =\n+      colWidth && index < colsCount - 1\n+        ? {\n+            colwidth: [colWidth],\n+            colspan: 1,\n+            rowspan: 1,\n+          }\n+        : null;\n     const cell = createCell(types.cell, attrs);\n \n     if (cell) {\n"", ""test_patch"": ""diff --git a/server/routes/api/comments/__snapshots__/comments.test.ts.snap b/server/routes/api/comments/__snapshots__/comments.test.ts.snap\nindex 56b84ed58ac6..3503b2703d71 100644\n--- a/server/routes/api/comments/__snapshots__/comments.test.ts.snap\n+++ b/server/routes/api/comments/__snapshots__/comments.test.ts.snap\n@@ -9,6 +9,59 @@ exports[`#comments.add_reaction should require authentication 1`] = `\n }\n `;\n \n+exports[`#comments.create should create a comment from markdown text 1`] = `\n+{\n+  \""content\"": [\n+    {\n+      \""attrs\"": {\n+        \""level\"": 2,\n+      },\n+      \""content\"": [\n+        {\n+          \""text\"": \""heading\"",\n+          \""type\"": \""text\"",\n+        },\n+      ],\n+      \""type\"": \""heading\"",\n+    },\n+    {\n+      \""content\"": [\n+        {\n+          \""content\"": [\n+            {\n+              \""content\"": [\n+                {\n+                  \""text\"": \""list item 1\"",\n+                  \""type\"": \""text\"",\n+                },\n+              ],\n+              \""type\"": \""paragraph\"",\n+            },\n+          ],\n+          \""type\"": \""list_item\"",\n+        },\n+        {\n+          \""content\"": [\n+            {\n+              \""content\"": [\n+                {\n+                  \""text\"": \""list item 2\"",\n+                  \""type\"": \""text\"",\n+                },\n+              ],\n+              \""type\"": \""paragraph\"",\n+            },\n+          ],\n+          \""type\"": \""list_item\"",\n+        },\n+      ],\n+      \""type\"": \""bullet_list\"",\n+    },\n+  ],\n+  \""type\"": \""doc\"",\n+}\n+`;\n+\n exports[`#comments.create should require authentication 1`] = `\n {\n   \""error\"": \""authentication_required\"",\n\ndiff --git a/server/routes/api/comments/comments.test.ts b/server/routes/api/comments/comments.test.ts\nindex 3660e2dd18f9..d75c8d3541a6 100644\n--- a/server/routes/api/comments/comments.test.ts\n+++ b/server/routes/api/comments/comments.test.ts\n@@ -481,6 +481,30 @@ describe(\""#comments.create\"", () => {\n     expect(body.policies[0].abilities.delete).toBeTruthy();\n   });\n \n+  it(\""should create a comment from markdown text\"", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const text = \""## heading\\n\\n- list item 1\\n- list item 2\"";\n+\n+    const res = await server.post(\""/api/comments.create\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        text,\n+      },\n+    });\n+\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.data).toMatchSnapshot();\n+  });\n+\n   it(\""should not allow empty comment data\"", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8529"", ""pr_id"": 8529, ""issue_id"": 8267, ""repo"": ""outline/outline"", ""problem_statement"": ""Add @mentions for collections\nFollowing on from #7680 \u2013 this should be a fairly easy addition in the same vein."", ""issue_word_count"": 15, ""test_files_count"": 1, ""non_test_files_count"": 29, ""pr_changed_files"": [""app/actions/sections.ts"", ""app/editor/components/MentionMenu.tsx"", ""app/editor/extensions/PasteHandler.tsx"", ""app/models/Collection.ts"", ""app/scenes/KeyboardShortcuts.tsx"", ""server/models/helpers/SearchHelper.test.ts"", ""server/models/helpers/SearchHelper.ts"", ""server/routes/api/suggestions/suggestions.ts"", ""shared/editor/components/Mentions.tsx"", ""shared/editor/nodes/Mention.tsx"", ""shared/i18n/locales/cs_CZ/translation.json"", ""shared/i18n/locales/da_DK/translation.json"", ""shared/i18n/locales/de_DE/translation.json"", ""shared/i18n/locales/en_US/translation.json"", ""shared/i18n/locales/es_ES/translation.json"", ""shared/i18n/locales/fa_IR/translation.json"", ""shared/i18n/locales/fr_FR/translation.json"", ""shared/i18n/locales/he_IL/translation.json"", ""shared/i18n/locales/hu_HU/translation.json"", ""shared/i18n/locales/id_ID/translation.json"", ""shared/i18n/locales/it_IT/translation.json"", ""shared/i18n/locales/ja_JP/translation.json"", ""shared/i18n/locales/ko_KR/translation.json"", ""shared/i18n/locales/nb_NO/translation.json"", ""shared/i18n/locales/nl_NL/translation.json"", ""shared/i18n/locales/pl_PL/translation.json"", ""shared/i18n/locales/pt_BR/translation.json"", ""shared/i18n/locales/pt_PT/translation.json"", ""shared/i18n/locales/sv_SE/translation.json"", ""shared/i18n/locales/th_TH/translation.json""], ""pr_changed_test_files"": [""server/models/helpers/SearchHelper.test.ts""], ""base_commit"": ""2a3ea1254c3c82ab07a4b59ed29493be27765792"", ""head_commit"": ""117d756cb7856b937eff5ff2873f5e7401834126"", ""repo_url"": ""https://github.com/outline/outline/pull/8529"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8529"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-04T03:03:27.000Z"", ""patch"": ""diff --git a/app/actions/sections.ts b/app/actions/sections.ts\nindex 3a5369b8842b..2046eb3d524a 100644\n--- a/app/actions/sections.ts\n+++ b/app/actions/sections.ts\n@@ -2,6 +2,8 @@ import { ActionContext } from \""~/types\"";\n \n export const CollectionSection = ({ t }: ActionContext) => t(\""Collection\"");\n \n+export const CollectionsSection = ({ t }: ActionContext) => t(\""Collections\"");\n+\n export const ActiveCollectionSection = ({ t, stores }: ActionContext) => {\n   const activeCollection = stores.collections.active;\n   return `${t(\""Collection\"")} \u00b7 ${activeCollection?.name}`;\n\ndiff --git a/app/editor/components/MentionMenu.tsx b/app/editor/components/MentionMenu.tsx\nindex 661b6418f426..192668bbe470 100644\n--- a/app/editor/components/MentionMenu.tsx\n+++ b/app/editor/components/MentionMenu.tsx\n@@ -1,6 +1,6 @@\n import { isEmail } from \""class-validator\"";\n import { observer } from \""mobx-react\"";\n-import { DocumentIcon, PlusIcon } from \""outline-icons\"";\n+import { DocumentIcon, PlusIcon, CollectionIcon } from \""outline-icons\"";\n import * as React from \""react\"";\n import { useTranslation } from \""react-i18next\"";\n import { useLocation } from \""react-router-dom\"";\n@@ -12,7 +12,11 @@ import { MentionType } from \""@shared/types\"";\n import parseDocumentSlug from \""@shared/utils/parseDocumentSlug\"";\n import { Avatar, AvatarSize } from \""~/components/Avatar\"";\n import Flex from \""~/components/Flex\"";\n-import { DocumentsSection, UserSection } from \""~/actions/sections\"";\n+import {\n+  DocumentsSection,\n+  UserSection,\n+  CollectionsSection,\n+} from \""~/actions/sections\"";\n import useRequest from \""~/hooks/useRequest\"";\n import useStores from \""~/hooks/useStores\"";\n import { client } from \""~/utils/ApiClient\"";\n@@ -40,7 +44,7 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n   const [loaded, setLoaded] = React.useState(false);\n   const [items, setItems] = React.useState<MentionItem[]>([]);\n   const { t } = useTranslation();\n-  const { auth, documents, users } = useStores();\n+  const { auth, documents, users, collections } = useStores();\n   const actorId = auth.currentUserId;\n   const location = useLocation();\n   const documentId = parseDocumentSlug(location.pathname);\n@@ -49,8 +53,10 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n   const { loading, request } = useRequest(\n     React.useCallback(async () => {\n       const res = await client.post(\""/suggestions.mention\"", { query: search });\n+\n       res.data.documents.map(documents.add);\n       res.data.users.map(users.add);\n+      res.data.collections.map(collections.add);\n     }, [search, documents, users])\n   );\n \n@@ -119,6 +125,34 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n                 } as MentionItem)\n             )\n         )\n+        .concat(\n+          collections\n+            .findByQuery(search, { maxResults: maxResultsInSection })\n+            .map(\n+              (collection) =>\n+                ({\n+                  name: \""mention\"",\n+                  icon: collection.icon ? (\n+                    <Icon\n+                      value={collection.icon}\n+                      color={collection.color ?? undefined}\n+                    />\n+                  ) : (\n+                    <CollectionIcon />\n+                  ),\n+                  title: collection.name,\n+                  section: CollectionsSection,\n+                  appendSpace: true,\n+                  attrs: {\n+                    id: v4(),\n+                    type: MentionType.Collection,\n+                    modelId: collection.id,\n+                    actorId,\n+                    label: collection.name,\n+                  },\n+                } as MentionItem)\n+            )\n+        )\n         .concat([\n           {\n             name: \""link\"",\n@@ -146,7 +180,10 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n \n   const handleSelect = React.useCallback(\n     async (item: MentionItem) => {\n-      if (item.attrs.type === MentionType.Document) {\n+      if (\n+        item.attrs.type === MentionType.Document ||\n+        item.attrs.type === MentionType.Collection\n+      ) {\n         return;\n       }\n       if (!documentId) {\n\ndiff --git a/app/editor/extensions/PasteHandler.tsx b/app/editor/extensions/PasteHandler.tsx\nindex 73c1c6340041..6982f74c93c5 100644\n--- a/app/editor/extensions/PasteHandler.tsx\n+++ b/app/editor/extensions/PasteHandler.tsx\n@@ -20,8 +20,9 @@ import { isInCode } from \""@shared/editor/queries/isInCode\"";\n import { MenuItem } from \""@shared/editor/types\"";\n import { IconType, MentionType } from \""@shared/types\"";\n import { determineIconType } from \""@shared/utils/icon\"";\n+import parseCollectionSlug from \""@shared/utils/parseCollectionSlug\"";\n import parseDocumentSlug from \""@shared/utils/parseDocumentSlug\"";\n-import { isDocumentUrl, isUrl } from \""@shared/utils/urls\"";\n+import { isCollectionUrl, isDocumentUrl, isUrl } from \""@shared/utils/urls\"";\n import stores from \""~/stores\"";\n import PasteMenu from \""../components/PasteMenu\"";\n \n@@ -166,6 +167,51 @@ export default class PasteHandler extends Extension {\n                         this.insertLink(text);\n                       });\n                   }\n+                } else if (isCollectionUrl(text)) {\n+                  const slug = parseCollectionSlug(text);\n+\n+                  if (slug) {\n+                    stores.collections\n+                      .fetch(slug)\n+                      .then((collection) => {\n+                        if (view.isDestroyed) {\n+                          return;\n+                        }\n+                        if (collection) {\n+                          if (state.schema.nodes.mention) {\n+                            view.dispatch(\n+                              view.state.tr.replaceWith(\n+                                state.selection.from,\n+                                state.selection.to,\n+                                state.schema.nodes.mention.create({\n+                                  type: MentionType.Collection,\n+                                  modelId: collection.id,\n+                                  label: collection.name,\n+                                  id: v4(),\n+                                })\n+                              )\n+                            );\n+                          } else {\n+                            const { hash } = new URL(text);\n+                            const hasEmoji =\n+                              determineIconType(collection.icon) ===\n+                              IconType.Emoji;\n+\n+                            const title = `${\n+                              hasEmoji ? collection.icon + \"" \"" : \""\""\n+                            }${collection.name}`;\n+\n+                            this.insertLink(`${collection.path}${hash}`, title);\n+                          }\n+                        }\n+                      })\n+                      .catch(() => {\n+                        if (view.isDestroyed) {\n+                          return;\n+                        }\n+                        this.insertLink(text);\n+                      });\n+                  }\n                 } else {\n                   this.insertLink(text);\n                 }\n\ndiff --git a/app/models/Collection.ts b/app/models/Collection.ts\nindex f97bfcac4331..a0c36f8f6239 100644\n--- a/app/models/Collection.ts\n+++ b/app/models/Collection.ts\n@@ -92,6 +92,11 @@ export default class Collection extends ParanoidModel {\n   @observable\n   archivedBy?: User;\n \n+  @computed\n+  get searchContent(): string {\n+    return this.name;\n+  }\n+\n   /** Returns whether the collection is empty, or undefined if not loaded. */\n   @computed\n   get isEmpty(): boolean | undefined {\n\ndiff --git a/app/scenes/KeyboardShortcuts.tsx b/app/scenes/KeyboardShortcuts.tsx\nindex 848be3cc8cd6..e29a1a304d2b 100644\n--- a/app/scenes/KeyboardShortcuts.tsx\n+++ b/app/scenes/KeyboardShortcuts.tsx\n@@ -462,7 +462,7 @@ function KeyboardShortcuts() {\n         items: [\n           {\n             shortcut: \""@\"",\n-            label: t(\""Mention user or document\""),\n+            label: t(\""Mention users and more\""),\n           },\n           {\n             shortcut: \"":\"",\n\ndiff --git a/server/models/helpers/SearchHelper.ts b/server/models/helpers/SearchHelper.ts\nindex a2179fea9b06..e8a85d83b05f 100644\n--- a/server/models/helpers/SearchHelper.ts\n+++ b/server/models/helpers/SearchHelper.ts\n@@ -203,6 +203,35 @@ export default class SearchHelper {\n     });\n   }\n \n+  public static async searchCollectionsForUser(\n+    user: User,\n+    options: SearchOptions = {}\n+  ): Promise<Collection[]> {\n+    const { limit = 15, offset = 0, query } = options;\n+\n+    const collectionIds = await user.collectionIds();\n+\n+    return Collection.findAll({\n+      where: {\n+        [Op.and]: query\n+          ? {\n+              [Op.or]: [\n+                Sequelize.literal(\n+                  `unaccent(LOWER(name)) like unaccent(LOWER(:query))`\n+                ),\n+              ],\n+            }\n+          : {},\n+        id: collectionIds,\n+        teamId: user.teamId,\n+      },\n+      order: [[\""name\"", \""ASC\""]],\n+      replacements: { query: `%${query}%` },\n+      limit,\n+      offset,\n+    });\n+  }\n+\n   public static async searchForUser(\n     user: User,\n     options: SearchOptions = {}\n\ndiff --git a/server/routes/api/suggestions/suggestions.ts b/server/routes/api/suggestions/suggestions.ts\nindex eac32db6db9d..5263f3bd9e2a 100644\n--- a/server/routes/api/suggestions/suggestions.ts\n+++ b/server/routes/api/suggestions/suggestions.ts\n@@ -23,7 +23,7 @@ router.post(\n     const { offset, limit } = ctx.state.pagination;\n     const actor = ctx.state.auth.user;\n \n-    const [documents, users] = await Promise.all([\n+    const [documents, users, collections] = await Promise.all([\n       SearchHelper.searchTitlesForUser(actor, {\n         query,\n         offset,\n@@ -53,6 +53,7 @@ router.post(\n         offset,\n         limit,\n       }),\n+      SearchHelper.searchCollectionsForUser(actor, { query, offset, limit }),\n     ]);\n \n     ctx.body = {\n@@ -67,6 +68,7 @@ router.post(\n             includeDetails: !!can(actor, \""readDetails\"", user),\n           })\n         ),\n+        collections,\n       },\n     };\n   }\n\ndiff --git a/shared/editor/components/Mentions.tsx b/shared/editor/components/Mentions.tsx\nindex 07737c5e8e3a..6c85c4880ce1 100644\n--- a/shared/editor/components/Mentions.tsx\n+++ b/shared/editor/components/Mentions.tsx\n@@ -1,5 +1,5 @@\n import { observer } from \""mobx-react\"";\n-import { DocumentIcon, EmailIcon } from \""outline-icons\"";\n+import { DocumentIcon, EmailIcon, CollectionIcon } from \""outline-icons\"";\n import { Node } from \""prosemirror-model\"";\n import * as React from \""react\"";\n import { Link } from \""react-router-dom\"";\n@@ -67,3 +67,36 @@ export const MentionDocument = observer(function MentionDocument_(\n     </Link>\n   );\n });\n+\n+export const MentionCollection = observer(function MentionCollection_(\n+  props: ComponentProps\n+) {\n+  const { isSelected, node } = props;\n+  const { collections } = useStores();\n+  const collection = collections.get(node.attrs.modelId);\n+  const modelId = node.attrs.modelId;\n+  const { className, ...attrs } = getAttributesFromNode(node);\n+\n+  React.useEffect(() => {\n+    if (modelId) {\n+      void collections.fetch(modelId);\n+    }\n+  }, [modelId, collections]);\n+\n+  return (\n+    <Link\n+      {...attrs}\n+      className={cn(className, {\n+        \""ProseMirror-selectednode\"": isSelected,\n+      })}\n+      to={collection?.path ?? `/collection/${node.attrs.modelId}`}\n+    >\n+      {collection?.icon ? (\n+        <Icon value={collection?.icon} color={collection?.color} size={18} />\n+      ) : (\n+        <CollectionIcon size={18} />\n+      )}\n+      {collection?.title || node.attrs.label}\n+    </Link>\n+  );\n+});\n\ndiff --git a/shared/editor/nodes/Mention.tsx b/shared/editor/nodes/Mention.tsx\nindex 24aedfaa4a7e..fc200016def4 100644\n--- a/shared/editor/nodes/Mention.tsx\n+++ b/shared/editor/nodes/Mention.tsx\n@@ -16,7 +16,11 @@ import { Primitive } from \""utility-types\"";\n import { v4 as uuidv4 } from \""uuid\"";\n import env from \""../../env\"";\n import { MentionType } from \""../../types\"";\n-import { MentionDocument, MentionUser } from \""../components/Mentions\"";\n+import {\n+  MentionCollection,\n+  MentionDocument,\n+  MentionUser,\n+} from \""../components/Mentions\"";\n import { MarkdownSerializerState } from \""../lib/markdown/serializer\"";\n import mentionRule from \""../rules/mention\"";\n import { ComponentProps } from \""../types\"";\n@@ -76,7 +80,9 @@ export default class Mention extends Node {\n           href:\n             node.attrs.type === MentionType.User\n               ? undefined\n-              : `${env.URL}/doc/${node.attrs.modelId}`,\n+              : node.attrs.type === MentionType.Document\n+              ? `${env.URL}/doc/${node.attrs.modelId}`\n+              : `${env.URL}/collection/${node.attrs.modelId}`,\n           \""data-type\"": node.attrs.type,\n           \""data-id\"": node.attrs.modelId,\n           \""data-actorid\"": node.attrs.actorId,\n@@ -97,6 +103,8 @@ export default class Mention extends Node {\n         return <MentionUser {...props} />;\n       case MentionType.Document:\n         return <MentionDocument {...props} />;\n+      case MentionType.Collection:\n+        return <MentionCollection {...props} />;\n       default:\n         return null;\n     }\n@@ -145,10 +153,23 @@ export default class Mention extends Node {\n         if (\n           selection instanceof NodeSelection &&\n           selection.node.type.name === this.name &&\n-          selection.node.attrs.type === MentionType.Document\n+          (selection.node.attrs.type === MentionType.Document ||\n+            selection.node.attrs.type === MentionType.Collection)\n         ) {\n           const { modelId } = selection.node.attrs;\n-          this.editor.props.onClickLink?.(`/doc/${modelId}`);\n+\n+          const linkType =\n+            selection.node.attrs.type === MentionType.Document\n+              ? \""doc\""\n+              : selection.node.attrs.type === MentionType.Collection\n+              ? \""collection\""\n+              : undefined;\n+\n+          if (!linkType) {\n+            return false;\n+          }\n+\n+          this.editor.props.onClickLink?.(`/${linkType}/${modelId}`);\n           return true;\n         }\n         return false;\n\ndiff --git a/shared/i18n/locales/cs_CZ/translation.json b/shared/i18n/locales/cs_CZ/translation.json\nindex 117cc5b4a737..0ff90018862c 100644\n--- a/shared/i18n/locales/cs_CZ/translation.json\n+++ b/shared/i18n/locales/cs_CZ/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Vlo\u017een\u00fd k\u00f3d\"",\n   \""Inline LaTeX\"": \""Vlo\u017een\u00fd LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""P\u0159ihl\u00e1sit se\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""Vytvo\u0159ili jste p\u0159ed {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} vytvo\u0159il p\u0159ed {{ timeAgo }}\"",\n   \""Uploading\"": \""Nahr\u00e1v\u00e1n\u00ed\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/da_DK/translation.json b/shared/i18n/locales/da_DK/translation.json\nindex abe70c67841d..630efa864989 100644\n--- a/shared/i18n/locales/da_DK/translation.json\n+++ b/shared/i18n/locales/da_DK/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Inline code\"",\n   \""Inline LaTeX\"": \""Inline LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Sign In\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""You created {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} created {{ timeAgo }}\"",\n   \""Uploading\"": \""Uploading\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/de_DE/translation.json b/shared/i18n/locales/de_DE/translation.json\nindex 5894957ad7aa..c4b98d1bd430 100644\n--- a/shared/i18n/locales/de_DE/translation.json\n+++ b/shared/i18n/locales/de_DE/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Inline-Code\"",\n   \""Inline LaTeX\"": \""Inline-LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Anmelden\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""Du hast vor {{ timeAgo }} erstellt\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} erstellte vor {{ timeAgo }}\"",\n   \""Uploading\"": \""Wird hochgeladen\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 3ac0b50298ff..f6f8e1a87853 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -137,6 +137,7 @@\n   \""Update role\"": \""Update role\"",\n   \""Delete user\"": \""Delete user\"",\n   \""Collection\"": \""Collection\"",\n+  \""Collections\"": \""Collections\"",\n   \""Debug\"": \""Debug\"",\n   \""Document\"": \""Document\"",\n   \""Documents\"": \""Documents\"",\n@@ -368,7 +369,6 @@\n   \""Archived collections\"": \""Archived collections\"",\n   \""New doc\"": \""New doc\"",\n   \""Empty\"": \""Empty\"",\n-  \""Collections\"": \""Collections\"",\n   \""Collapse\"": \""Collapse\"",\n   \""Expand\"": \""Expand\"",\n   \""Document not supported \u2013 try Markdown, Plain text, HTML, or Word\"": \""Document not supported \u2013 try Markdown, Plain text, HTML, or Word\"",\n@@ -770,7 +770,7 @@\n   \""Inline code\"": \""Inline code\"",\n   \""Inline LaTeX\"": \""Inline LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Sign In\"",\n\ndiff --git a/shared/i18n/locales/es_ES/translation.json b/shared/i18n/locales/es_ES/translation.json\nindex 0eb85e7f7e07..7b42420c0a45 100644\n--- a/shared/i18n/locales/es_ES/translation.json\n+++ b/shared/i18n/locales/es_ES/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""C\u00f3digo en l\u00ednea\"",\n   \""Inline LaTeX\"": \""L\u00ednea de LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Iniciar sesi\u00f3n\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""T\u00fa lo creaste {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} lo cre\u00f3 {{ timeAgo }}\"",\n   \""Uploading\"": \""Subiendo\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/fa_IR/translation.json b/shared/i18n/locales/fa_IR/translation.json\nindex c01419fb5a84..4ba0b7a26bf1 100644\n--- a/shared/i18n/locales/fa_IR/translation.json\n+++ b/shared/i18n/locales/fa_IR/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""\u06a9\u062f \u062f\u0631\u0648\u0646 \u062e\u0637\u06cc\"",\n   \""Inline LaTeX\"": \""Inline LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""\u0648\u0631\u0648\u062f\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""You created {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} created {{ timeAgo }}\"",\n   \""Uploading\"": \""\u062f\u0631 \u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/fr_FR/translation.json b/shared/i18n/locales/fr_FR/translation.json\nindex 547f2f716bb1..53f7b39215d2 100644\n--- a/shared/i18n/locales/fr_FR/translation.json\n+++ b/shared/i18n/locales/fr_FR/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Ligne de Code\"",\n   \""Inline LaTeX\"": \""LaTeX en ligne\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Se connecter\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""Cr\u00e9\u00e9 par vous il y a {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""Cr\u00e9\u00e9 par {{ user }} il y a {{ timeAgo }}\"",\n   \""Uploading\"": \""Transfert en cours\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/he_IL/translation.json b/shared/i18n/locales/he_IL/translation.json\nindex c0b5c1fd0bb3..526306cb552f 100644\n--- a/shared/i18n/locales/he_IL/translation.json\n+++ b/shared/i18n/locales/he_IL/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Inline code\"",\n   \""Inline LaTeX\"": \""Inline LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Sign In\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""You created {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} created {{ timeAgo }}\"",\n   \""Uploading\"": \""Uploading\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/hu_HU/translation.json b/shared/i18n/locales/hu_HU/translation.json\nindex 5c7a135027c2..44d347da8622 100644\n--- a/shared/i18n/locales/hu_HU/translation.json\n+++ b/shared/i18n/locales/hu_HU/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Be\u00e1gyazott k\u00f3d\"",\n   \""Inline LaTeX\"": \""Be\u00e1gyazott LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Bejelentkez\u00e9s\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""You created {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} created {{ timeAgo }}\"",\n   \""Uploading\"": \""Uploading\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/id_ID/translation.json b/shared/i18n/locales/id_ID/translation.json\nindex a47e0e0c25dd..5554aee9a16e 100644\n--- a/shared/i18n/locales/id_ID/translation.json\n+++ b/shared/i18n/locales/id_ID/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Kode inline\"",\n   \""Inline LaTeX\"": \""LaTeX Inline\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Masuk\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""You created {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} created {{ timeAgo }}\"",\n   \""Uploading\"": \""Mengunggah\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/it_IT/translation.json b/shared/i18n/locales/it_IT/translation.json\nindex 3e879da1d206..cbaeec5736f1 100644\n--- a/shared/i18n/locales/it_IT/translation.json\n+++ b/shared/i18n/locales/it_IT/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Codice inline\"",\n   \""Inline LaTeX\"": \""LaTeX in linea\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Accedi\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""You created {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} created {{ timeAgo }}\"",\n   \""Uploading\"": \""Caricamento\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/ja_JP/translation.json b/shared/i18n/locales/ja_JP/translation.json\nindex 54b5ff56bc36..6d524fed0ea4 100644\n--- a/shared/i18n/locales/ja_JP/translation.json\n+++ b/shared/i18n/locales/ja_JP/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""\u30a4\u30f3\u30e9\u30a4\u30f3\u30b3\u30fc\u30c9\"",\n   \""Inline LaTeX\"": \""\u30a4\u30f3\u30e9\u30a4\u30f3 LaTeX\"",\n   \""Triggers\"": \""\u30c8\u30ea\u30ac\u30fc\"",\n-  \""Mention user or document\"": \""\u30e6\u30fc\u30b6\u30fc\u307e\u305f\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u30e1\u30f3\u30b7\u30e7\u30f3\"",\n+  \""Mention users and more\"": \""\u30e6\u30fc\u30b6\u30fc\u307e\u305f\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u30e1\u30f3\u30b7\u30e7\u30f3\"",\n   \""Emoji\"": \""\u7d75\u6587\u5b57\"",\n   \""Insert block\"": \""\u30d6\u30ed\u30c3\u30af\u306e\u633f\u5165\"",\n   \""Sign In\"": \""\u30ed\u30b0\u30a4\u30f3\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""\u3042\u306a\u305f\u304c {{ timeAgo }} \u306b\u4f5c\u6210\u3057\u307e\u3057\u305f\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} \u304c {{ timeAgo }} \u306b\u4f5c\u6210\u3057\u307e\u3057\u305f\"",\n   \""Uploading\"": \""\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u4e2d\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/ko_KR/translation.json b/shared/i18n/locales/ko_KR/translation.json\nindex 248d73e2c354..7b0c2532dbdf 100644\n--- a/shared/i18n/locales/ko_KR/translation.json\n+++ b/shared/i18n/locales/ko_KR/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""\uc778\ub77c\uc778 \ucf54\ub4dc\"",\n   \""Inline LaTeX\"": \""\uc778\ub77c\uc778 LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""\ub85c\uadf8\uc778\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""{{ timeAgo }} \uc804\uc5d0 \ub0b4\uac00 \uc0dd\uc131\ud568\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} \uc774(\uac00) {{ timeAgo }} \uc804\uc5d0 \uc0dd\uc131\"",\n   \""Uploading\"": \""\uc5c5\ub85c\ub4dc \uc911\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/nb_NO/translation.json b/shared/i18n/locales/nb_NO/translation.json\nindex 7000f32c57a6..3bc7a8c65d24 100644\n--- a/shared/i18n/locales/nb_NO/translation.json\n+++ b/shared/i18n/locales/nb_NO/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Innebygd kode\"",\n   \""Inline LaTeX\"": \""Innebygd LaTeX\"",\n   \""Triggers\"": \""Utl\u00f8sere\"",\n-  \""Mention user or document\"": \""Nevn bruker eller dokument\"",\n+  \""Mention users and more\"": \""Nevn bruker eller dokument\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Sett inn blokk\"",\n   \""Sign In\"": \""Logg inn\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""Du opprettet {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} opprettet {{ timeAgo }}\"",\n   \""Uploading\"": \""Laster opp\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/nl_NL/translation.json b/shared/i18n/locales/nl_NL/translation.json\nindex c4061b62707e..f0f55065c5d9 100644\n--- a/shared/i18n/locales/nl_NL/translation.json\n+++ b/shared/i18n/locales/nl_NL/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Inline code\"",\n   \""Inline LaTeX\"": \""Inline LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Voeg blok in\"",\n   \""Sign In\"": \""Aanmelden\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""{{ timeAgo }} door jou aangemaakt\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ timeAgo }} door {{ user }} aangemaakt\"",\n   \""Uploading\"": \""Bezig met uploaden\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/pl_PL/translation.json b/shared/i18n/locales/pl_PL/translation.json\nindex c430ac9b4bc4..d4d42aaf47a9 100644\n--- a/shared/i18n/locales/pl_PL/translation.json\n+++ b/shared/i18n/locales/pl_PL/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Kod w linii\"",\n   \""Inline LaTeX\"": \""LaTeX w linii\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Zaloguj si\u0119\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""Utworzy\u0142e\u015b {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} utworzy\u0142 {{ timeAgo }}\"",\n   \""Uploading\"": \""Wysy\u0142anie\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/pt_BR/translation.json b/shared/i18n/locales/pt_BR/translation.json\nindex 2450e6633abf..654367711762 100644\n--- a/shared/i18n/locales/pt_BR/translation.json\n+++ b/shared/i18n/locales/pt_BR/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""C\u00f3digo embutido\"",\n   \""Inline LaTeX\"": \""LaTeX em linha\"",\n   \""Triggers\"": \""Gatilhos\"",\n-  \""Mention user or document\"": \""Mencionar usu\u00e1rio ou documento\"",\n+  \""Mention users and more\"": \""Mencionar usu\u00e1rio ou documento\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Inserir bloco\"",\n   \""Sign In\"": \""Entrar\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""Voc\u00ea criou {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} criou {{ timeAgo }}\"",\n   \""Uploading\"": \""Enviando\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/pt_PT/translation.json b/shared/i18n/locales/pt_PT/translation.json\nindex 35b4e1f71325..8e57e16cbd4c 100644\n--- a/shared/i18n/locales/pt_PT/translation.json\n+++ b/shared/i18n/locales/pt_PT/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""C\u00f3digo em linha\"",\n   \""Inline LaTeX\"": \""LaTeX Embutido\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Iniciar Sess\u00e3o\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""Criou \u00e0 {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} criado \u00e0 {{ timeAgo }}\"",\n   \""Uploading\"": \""A carregar\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/sv_SE/translation.json b/shared/i18n/locales/sv_SE/translation.json\nindex 408416e349c5..033d94acc7d6 100644\n--- a/shared/i18n/locales/sv_SE/translation.json\n+++ b/shared/i18n/locales/sv_SE/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Inline-kod\"",\n   \""Inline LaTeX\"": \""Inline LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Logga in\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""Du skapade {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} skapade {{ timeAgo }}\"",\n   \""Uploading\"": \""Laddar upp\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/th_TH/translation.json b/shared/i18n/locales/th_TH/translation.json\nindex 9eb33b600456..452c2ec0eb82 100644\n--- a/shared/i18n/locales/th_TH/translation.json\n+++ b/shared/i18n/locales/th_TH/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Inline code\"",\n   \""Inline LaTeX\"": \""Inline LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Sign In\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""You created {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} created {{ timeAgo }}\"",\n   \""Uploading\"": \""Uploading\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/tr_TR/translation.json b/shared/i18n/locales/tr_TR/translation.json\nindex c36a0831ede7..f2f0fe8c5a20 100644\n--- a/shared/i18n/locales/tr_TR/translation.json\n+++ b/shared/i18n/locales/tr_TR/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""Sat\u0131r i\u00e7i kod\"",\n   \""Inline LaTeX\"": \""Inline LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""Kay\u0131t ol\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""You created {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} created {{ timeAgo }}\"",\n   \""Uploading\"": \""Y\u00fckleniyor\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/uk_UA/translation.json b/shared/i18n/locales/uk_UA/translation.json\nindex fd1e9eb16d78..a49b8a28fc99 100644\n--- a/shared/i18n/locales/uk_UA/translation.json\n+++ b/shared/i18n/locales/uk_UA/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""\u0412\u0431\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u043a\u043e\u0434\"",\n   \""Inline LaTeX\"": \""\u0412\u0431\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0439 LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""\u0423\u0432\u0456\u0439\u0442\u0438\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""\u0412\u0438 \u0441\u0442\u0432\u043e\u0440\u0438\u043b\u0438 {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} \u0441\u0442\u0432\u043e\u0440\u0438\u0432 {{ timeAgo }}\"",\n   \""Uploading\"": \""\u0417\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0443\u0454\u0442\u044c\u0441\u044f\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/vi_VN/translation.json b/shared/i18n/locales/vi_VN/translation.json\nindex db8285d29520..0849d8654676 100644\n--- a/shared/i18n/locales/vi_VN/translation.json\n+++ b/shared/i18n/locales/vi_VN/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""M\u00e3 n\u1ed9i tuy\u1ebfn\"",\n   \""Inline LaTeX\"": \""LaTeX n\u1ed9i tuy\u1ebfn\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""\u0110\u0103ng nh\u1eadp\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""You created {{ timeAgo }}\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ user }} created {{ timeAgo }}\"",\n   \""Uploading\"": \""\u0110ang t\u1ea3i l\u00ean\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/zh_CN/translation.json b/shared/i18n/locales/zh_CN/translation.json\nindex 75557b0bf7d0..7c88fa7b4794 100644\n--- a/shared/i18n/locales/zh_CN/translation.json\n+++ b/shared/i18n/locales/zh_CN/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""\u884c\u5185\u4ee3\u7801\"",\n   \""Inline LaTeX\"": \""\u884c\u5185\u516c\u5f0f\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""\u63d0\u53ca\u7528\u6237\u6216\u6587\u6863\"",\n+  \""Mention users and more\"": \""\u63d0\u53ca\u7528\u6237\u6216\u6587\u6863\"",\n   \""Emoji\"": \""\u8868\u60c5\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""\u767b\u5f55\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""{{ timeAgo }} \u7531\u4f60\u521b\u5efa\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ timeAgo }} \u7531 {{ user }} \u521b\u5efa\"",\n   \""Uploading\"": \""\u4e0a\u4f20\u4e2d\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/i18n/locales/zh_TW/translation.json b/shared/i18n/locales/zh_TW/translation.json\nindex 0a0e7683615f..2f7040b3af81 100644\n--- a/shared/i18n/locales/zh_TW/translation.json\n+++ b/shared/i18n/locales/zh_TW/translation.json\n@@ -769,7 +769,7 @@\n   \""Inline code\"": \""\u884c\u5167\u7a0b\u5f0f\u78bc\"",\n   \""Inline LaTeX\"": \""\u884c\u5167 LaTeX\"",\n   \""Triggers\"": \""Triggers\"",\n-  \""Mention user or document\"": \""Mention user or document\"",\n+  \""Mention users and more\"": \""Mention users and more\"",\n   \""Emoji\"": \""Emoji\"",\n   \""Insert block\"": \""Insert block\"",\n   \""Sign In\"": \""\u767b\u5165\"",\n@@ -1143,4 +1143,4 @@\n   \""You created {{ timeAgo }}\"": \""{{ timeAgo }} \u7531\u60a8\u65b0\u589e\"",\n   \""{{ user }} created {{ timeAgo }}\"": \""{{ timeAgo }} \u7531 {{ user }} \u65b0\u589e\"",\n   \""Uploading\"": \""\u6b63\u5728\u4e0a\u50b3\""\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex 32904533cf0b..dc451167506d 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -57,6 +57,7 @@ export enum FileOperationState {\n export enum MentionType {\n   User = \""user\"",\n   Document = \""document\"",\n+  Collection = \""collection\"",\n }\n \n export type PublicEnv = {\n\ndiff --git a/shared/utils/parseCollectionSlug.ts b/shared/utils/parseCollectionSlug.ts\nnew file mode 100644\nindex 000000000000..9e3f4847797f\n--- /dev/null\n+++ b/shared/utils/parseCollectionSlug.ts\n@@ -0,0 +1,25 @@\n+import sharedEnv from \""../env\"";\n+\n+/**\n+ * Parse the likely collection identifier from a given url.\n+ *\n+ * @param url The url to parse.\n+ * @returns A collection identifier or undefined if not found.\n+ */\n+export default function parseCollectionSlug(url: string) {\n+  let parsed;\n+\n+  if (url[0] === \""/\"") {\n+    url = `${sharedEnv.URL}${url}`;\n+  }\n+\n+  try {\n+    parsed = new URL(url).pathname;\n+  } catch (err) {\n+    return;\n+  }\n+\n+  const split = parsed.split(\""/\"");\n+  const indexOfCollection = split.indexOf(\""collection\"");\n+  return split[indexOfCollection + 1] ?? undefined;\n+}\n\ndiff --git a/shared/utils/urls.ts b/shared/utils/urls.ts\nindex fa700888edbf..96d0d256c8a3 100644\n--- a/shared/utils/urls.ts\n+++ b/shared/utils/urls.ts\n@@ -76,6 +76,21 @@ export function isDocumentUrl(url: string) {\n   }\n }\n \n+/**\n+ * Returns true if the given string is a link to a collection.\n+ *\n+ * @param options Parsing options.\n+ * @returns True if a collection, false otherwise.\n+ */\n+export function isCollectionUrl(url: string) {\n+  try {\n+    const parsed = new URL(url, env.URL);\n+    return isInternalUrl(url) && parsed.pathname.startsWith(\""/collection/\"");\n+  } catch (err) {\n+    return false;\n+  }\n+}\n+\n /**\n  * Returns true if the given string is a url.\n  *\n"", ""test_patch"": ""diff --git a/server/models/helpers/SearchHelper.test.ts b/server/models/helpers/SearchHelper.test.ts\nindex 03dc311a3adf..e5f21f1441d6 100644\n--- a/server/models/helpers/SearchHelper.test.ts\n+++ b/server/models/helpers/SearchHelper.test.ts\n@@ -861,6 +861,51 @@ describe(\""SearchHelper\"", () => {\n     });\n   });\n \n+  describe(\""#searchCollectionsForUser\"", () => {\n+    test(\""should return search results from collections\"", async () => {\n+      const team = await buildTeam();\n+      const user = await buildUser({ teamId: team.id });\n+      const collection1 = await buildCollection({\n+        teamId: team.id,\n+        userId: user.id,\n+        name: \""Test Collection\"",\n+      });\n+      await buildCollection({\n+        teamId: team.id,\n+        userId: user.id,\n+        name: \""Other Collection\"",\n+      });\n+\n+      const results = await SearchHelper.searchCollectionsForUser(user, {\n+        query: \""test\"",\n+      });\n+\n+      expect(results.length).toBe(1);\n+      expect(results[0].id).toBe(collection1.id);\n+    });\n+\n+    test(\""should return all collections when no query provided\"", async () => {\n+      const team = await buildTeam();\n+      const user = await buildUser({ teamId: team.id });\n+      const collection1 = await buildCollection({\n+        teamId: team.id,\n+        userId: user.id,\n+        name: \""Alpha\"",\n+      });\n+      const collection2 = await buildCollection({\n+        teamId: team.id,\n+        userId: user.id,\n+        name: \""Beta\"",\n+      });\n+\n+      const results = await SearchHelper.searchCollectionsForUser(user);\n+\n+      expect(results.length).toBe(2);\n+      expect(results[0].id).toBe(collection1.id);\n+      expect(results[1].id).toBe(collection2.id);\n+    });\n+  });\n+\n   describe(\""webSearchQuery\"", () => {\n     test(\""should correctly sanitize query\"", () => {\n       expect(SearchHelper.webSearchQuery(\""one/two\"")).toBe(\""one/two:*\"");\n\ndiff --git a/shared/utils/parseCollectionSlug.test.ts b/shared/utils/parseCollectionSlug.test.ts\nnew file mode 100644\nindex 000000000000..15eefd3ead0d\n--- /dev/null\n+++ b/shared/utils/parseCollectionSlug.test.ts\n@@ -0,0 +1,48 @@\n+import sharedEnv from \""../env\"";\n+import parseCollectionSlug from \""./parseCollectionSlug\"";\n+\n+sharedEnv.URL = \""https://app.outline.dev\"";\n+\n+describe(\""#parseCollectionSlug\"", () => {\n+  it(\""should work with fully qualified url\"", () => {\n+    expect(\n+      parseCollectionSlug(\""http://example.com/collection/test-ANzZwgv2RG\"")\n+    ).toEqual(\""test-ANzZwgv2RG\"");\n+  });\n+\n+  it(\""should work with paths after document slug\"", () => {\n+    expect(\n+      parseCollectionSlug(\n+        \""http://mywiki.getoutline.com/collection/test-ANzZwgv2RG/recent\""\n+      )\n+    ).toEqual(\""test-ANzZwgv2RG\"");\n+  });\n+\n+  it(\""should work with hash\"", () => {\n+    expect(\n+      parseCollectionSlug(\n+        \""http://mywiki.getoutline.com/collection/test-ANzZwgv2RG#state\""\n+      )\n+    ).toEqual(\""test-ANzZwgv2RG\"");\n+  });\n+\n+  it(\""should work with subdomain qualified url\"", () => {\n+    expect(\n+      parseCollectionSlug(\n+        \""http://mywiki.getoutline.com/collection/test-ANzZwgv2RG\""\n+      )\n+    ).toEqual(\""test-ANzZwgv2RG\"");\n+  });\n+\n+  it(\""should work with path\"", () => {\n+    expect(parseCollectionSlug(\""/collection/test-ANzZwgv2RG\"")).toEqual(\n+      \""test-ANzZwgv2RG\""\n+    );\n+  });\n+\n+  it(\""should work with path and hash\"", () => {\n+    expect(parseCollectionSlug(\""/collection/test-ANzZwgv2RG#somehash\"")).toEqual(\n+      \""test-ANzZwgv2RG\""\n+    );\n+  });\n+});\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8524"", ""pr_id"": 8524, ""issue_id"": 8508, ""repo"": ""outline/outline"", ""problem_statement"": ""Can not download exported file.\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\nAfter documents being exported, I cannot download the zip file to my machine. \n```\nNotFoundError: Resource not found\n    ...\n```\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n1. Export any documents by clicking `Preferences >  Export > Export data...`\n2. Click the exported file to download it.\n\n### Environment\n\n```markdown\n- Outline: 0.80.0\n- Browser: Chrome\n```\n\n### Anything else?\n\nThe error started occurring from [#f469212](https://github.com/outline/outline/commit/f46921275dca713d25e953c2c7610dec5d030d28). The test results indicate that the error is caused by modifications to [this file](https://github.com/outline/outline/commit/f46921275dca713d25e953c2c7610dec5d030d28#diff-26a1619ef7484a9d9fcd5eee18e291e33994bd335a9f7da57ede9ce674efb825), making the exported file untraceable through `Attachment.findOne`."", ""issue_word_count"": 129, ""test_files_count"": 2, ""non_test_files_count"": 1, ""pr_changed_files"": [""plugins/storage/server/api/files.test.ts"", ""plugins/storage/server/api/files.ts"", ""plugins/storage/server/test/fixtures/export-markdown.zip""], ""pr_changed_test_files"": [""plugins/storage/server/api/files.test.ts"", ""plugins/storage/server/test/fixtures/export-markdown.zip""], ""base_commit"": ""540683d89662d89a4c2826a7a238f77a52cc74fe"", ""head_commit"": ""31c3715147a8287c02965b57d0c2b81ac69427ed"", ""repo_url"": ""https://github.com/outline/outline/pull/8524"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8524"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-21T13:10:10.000Z"", ""patch"": ""diff --git a/plugins/storage/server/api/files.ts b/plugins/storage/server/api/files.ts\nindex 98f29252e671..963e86933519 100644\n--- a/plugins/storage/server/api/files.ts\n+++ b/plugins/storage/server/api/files.ts\n@@ -5,6 +5,7 @@ import env from \""@server/env\"";\n import {\n   AuthenticationError,\n   AuthorizationError,\n+  NotFoundError,\n   ValidationError,\n } from \""@server/errors\"";\n import auth from \""@server/middlewares/authentication\"";\n@@ -80,14 +81,19 @@ router.get(\n \n     const attachment = await Attachment.findOne({\n       where: { key },\n-      rejectOnEmpty: true,\n     });\n+\n+    // Attachment is requested with a key, but it was not found\n+    if (!attachment && !!ctx.input.query.key) {\n+      throw NotFoundError();\n+    }\n+\n     if (!skipAuthorize) {\n       authorize(actor, \""read\"", attachment);\n     }\n \n     const contentType =\n-      attachment.contentType ||\n+      attachment?.contentType ||\n       (fileName ? mime.lookup(fileName) : undefined) ||\n       \""application/octet-stream\"";\n \n"", ""test_patch"": ""diff --git a/plugins/storage/server/api/files.test.ts b/plugins/storage/server/api/files.test.ts\nindex 47da255d071e..10e454d2c1e8 100644\n--- a/plugins/storage/server/api/files.test.ts\n+++ b/plugins/storage/server/api/files.test.ts\n@@ -4,9 +4,15 @@ import path from \""path\"";\n import FormData from \""form-data\"";\n import { ensureDirSync } from \""fs-extra\"";\n import { v4 as uuidV4 } from \""uuid\"";\n+import { FileOperationState, FileOperationType } from \""@shared/types\"";\n import env from \""@server/env\"";\n+import { Buckets } from \""@server/models/helpers/AttachmentHelper\"";\n import FileStorage from \""@server/storage/files\"";\n-import { buildAttachment, buildUser } from \""@server/test/factories\"";\n+import {\n+  buildAttachment,\n+  buildFileOperation,\n+  buildUser,\n+} from \""@server/test/factories\"";\n import { getTestServer } from \""@server/test/support\"";\n \n const server = getTestServer();\n@@ -293,4 +299,37 @@ describe(\""#files.get\"", () => {\n     expect(res.headers.get(\""Content-Type\"")).toEqual(\""image/jpg\"");\n     expect(res.headers.get(\""Content-Disposition\"")).toEqual(\""attachment\"");\n   });\n+\n+  it(\""should succeed with status 200 ok when exported file is requested using signature\"", async () => {\n+    const user = await buildUser();\n+    const fileName = \""export-markdown.zip\"";\n+    const key = `${Buckets.uploads}/${user.teamId}/${uuidV4()}/${fileName}`;\n+\n+    await buildFileOperation({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      type: FileOperationType.Export,\n+      state: FileOperationState.Complete,\n+      key,\n+    });\n+\n+    ensureDirSync(\n+      path.dirname(path.join(env.FILE_STORAGE_LOCAL_ROOT_DIR, key))\n+    );\n+\n+    copyFileSync(\n+      path.resolve(__dirname, \""..\"", \""test\"", \""fixtures\"", fileName),\n+      path.join(env.FILE_STORAGE_LOCAL_ROOT_DIR, key)\n+    );\n+\n+    const signedUrl = await FileStorage.getSignedUrl(key);\n+    const url = new URL(signedUrl);\n+    const res = await server.get(url.pathname + url.search);\n+\n+    expect(res.status).toEqual(200);\n+    expect(res.headers.get(\""Content-Type\"")).toEqual(\""application/zip\"");\n+    expect(res.headers.get(\""Content-Disposition\"")).toEqual(\n+      'attachment; filename=\""export-markdown.zip\""'\n+    );\n+  });\n });\n\ndiff --git a/plugins/storage/server/test/fixtures/export-markdown.zip b/plugins/storage/server/test/fixtures/export-markdown.zip\nnew file mode 100644\nindex 000000000000..a5001085e0c0\nBinary files /dev/null and b/plugins/storage/server/test/fixtures/export-markdown.zip differ\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8503"", ""pr_id"": 8503, ""issue_id"": 8502, ""repo"": ""outline/outline"", ""problem_statement"": ""Pin status incorrect on F5, allowing double pinning\n### Steps To Reproduce\n\n1. Home\n2. Pin a document to Home and a collection through it's context menu\n3. F5\n4. Pin a document to the same collection through it's context menu\n5. Go to that collection to view double pins\n\nhttps://github.com/user-attachments/assets/81b9acff-580c-4975-b6c0-da63a9499fc0\n\n### Environment\n\n878a27b\n\n"", ""issue_word_count"": 56, ""test_files_count"": 1, ""non_test_files_count"": 7, ""pr_changed_files"": [""app/hooks/useRequest.ts"", ""app/menus/DocumentMenu.tsx"", ""app/models/Pin.ts"", ""app/stores/PinsStore.ts"", ""server/commands/pinCreator.ts"", ""server/routes/api/pins/pins.test.ts"", ""server/routes/api/pins/pins.ts"", ""server/routes/api/pins/schema.ts""], ""pr_changed_test_files"": [""server/routes/api/pins/pins.test.ts""], ""base_commit"": ""878a27b7c69f911212573ce27c6b89f1bea09368"", ""head_commit"": ""952468ab565a72168c3b659956bb673d2b495698"", ""repo_url"": ""https://github.com/outline/outline/pull/8503"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8503"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-20T04:44:22.000Z"", ""patch"": ""diff --git a/app/hooks/useRequest.ts b/app/hooks/useRequest.ts\nindex 88b465bcd9d9..e5b6eed59a72 100644\n--- a/app/hooks/useRequest.ts\n+++ b/app/hooks/useRequest.ts\n@@ -8,6 +8,8 @@ type RequestResponse<T> = {\n   error: unknown;\n   /** Whether the request is currently in progress. */\n   loading: boolean;\n+  /** Whether the request has completed - useful to check if the request has completed at least once. */\n+  loaded: boolean;\n   /** Function to start the request. */\n   request: () => Promise<T | undefined>;\n };\n@@ -26,6 +28,7 @@ export default function useRequest<T = unknown>(\n   const isMounted = useIsMounted();\n   const [data, setData] = React.useState<T>();\n   const [loading, setLoading] = React.useState<boolean>(false);\n+  const [loaded, setLoaded] = React.useState<boolean>(false);\n   const [error, setError] = React.useState();\n \n   const request = React.useCallback(async () => {\n@@ -36,6 +39,7 @@ export default function useRequest<T = unknown>(\n       if (isMounted()) {\n         setData(response);\n         setError(undefined);\n+        setLoaded(true);\n       }\n       return response;\n     } catch (err) {\n@@ -57,5 +61,5 @@ export default function useRequest<T = unknown>(\n     }\n   }, [request, makeRequestOnMount]);\n \n-  return { data, loading, error, request };\n+  return { data, loading, loaded, error, request };\n }\n\ndiff --git a/app/menus/DocumentMenu.tsx b/app/menus/DocumentMenu.tsx\nindex b992745a2234..077bef3afaeb 100644\n--- a/app/menus/DocumentMenu.tsx\n+++ b/app/menus/DocumentMenu.tsx\n@@ -1,6 +1,5 @@\n import capitalize from \""lodash/capitalize\"";\n import isEmpty from \""lodash/isEmpty\"";\n-import isUndefined from \""lodash/isUndefined\"";\n import { observer } from \""mobx-react\"";\n import { EditIcon, InputIcon, RestoreIcon, SearchIcon } from \""outline-icons\"";\n import * as React from \""react\"";\n@@ -92,22 +91,32 @@ type MenuTriggerProps = {\n const MenuTrigger: React.FC<MenuTriggerProps> = ({ label, onTrigger }) => {\n   const { t } = useTranslation();\n \n-  const { subscriptions } = useStores();\n+  const { subscriptions, pins } = useStores();\n   const { model: document, menuState } = useMenuContext<Document>();\n \n-  const { data, loading, error, request } = useRequest(() =>\n-    subscriptions.fetchOne({\n-      documentId: document.id,\n-      event: \""documents.update\"",\n-    })\n+  const {\n+    loading: auxDataLoading,\n+    loaded: auxDataLoaded,\n+    request: auxDataRequest,\n+  } = useRequest(() =>\n+    Promise.all([\n+      subscriptions.fetchOne({\n+        documentId: document.id,\n+        event: \""documents.update\"",\n+      }),\n+      pins.fetchOne({\n+        documentId: document.id,\n+        collectionId: document.collectionId ?? null,\n+      }),\n+    ])\n   );\n \n   const handlePointerEnter = React.useCallback(() => {\n-    if (isUndefined(data ?? error) && !loading) {\n-      void request();\n+    if (!auxDataLoading && !auxDataLoaded) {\n+      void auxDataRequest();\n       void document.loadRelations();\n     }\n-  }, [data, error, loading, request, document]);\n+  }, [auxDataLoading, auxDataLoaded, auxDataRequest, document]);\n \n   return label ? (\n     <MenuButton\n\ndiff --git a/app/models/Pin.ts b/app/models/Pin.ts\nindex 1c27fdaa1238..ad97449c0e71 100644\n--- a/app/models/Pin.ts\n+++ b/app/models/Pin.ts\n@@ -9,7 +9,7 @@ class Pin extends Model {\n   static modelName = \""Pin\"";\n \n   /** The collection ID that the document is pinned to. If empty the document is pinned to home. */\n-  collectionId: string;\n+  collectionId: string | null;\n \n   /** The collection that the document is pinned to. If empty the document is pinned to home. */\n   @Relation(() => Collection, { onDelete: \""cascade\"" })\n\ndiff --git a/app/stores/PinsStore.ts b/app/stores/PinsStore.ts\nindex b82a3d592ff7..b553a900eff1 100644\n--- a/app/stores/PinsStore.ts\n+++ b/app/stores/PinsStore.ts\n@@ -3,6 +3,7 @@ import { action, runInAction, computed } from \""mobx\"";\n import Pin from \""~/models/Pin\"";\n import { PaginationParams } from \""~/types\"";\n import { client } from \""~/utils/ApiClient\"";\n+import { AuthorizationError, NotFoundError } from \""~/utils/errors\"";\n import RootStore from \""./RootStore\"";\n import Store from \""./base/Store\"";\n \n@@ -13,6 +14,41 @@ export default class PinsStore extends Store<Pin> {\n     super(rootStore, Pin);\n   }\n \n+  @action\n+  async fetchOne({\n+    documentId,\n+    collectionId,\n+  }: {\n+    documentId: string;\n+    collectionId: string | null;\n+  }) {\n+    const pin = this.orderedData.find(\n+      (p) => p.documentId === documentId && p.collectionId === collectionId\n+    );\n+\n+    if (pin) {\n+      return pin;\n+    }\n+\n+    this.isFetching = true;\n+\n+    try {\n+      const res = await client.post(`/${this.apiEndpoint}.info`, {\n+        documentId,\n+        collectionId,\n+      });\n+      invariant(res?.data, \""Data should be available\"");\n+      return this.add(res.data);\n+    } catch (err) {\n+      if (err instanceof AuthorizationError || err instanceof NotFoundError) {\n+        return;\n+      }\n+      throw err;\n+    } finally {\n+      this.isFetching = false;\n+    }\n+  }\n+\n   @action\n   fetchPage = async (params?: FetchParams | undefined): Promise<Pin[]> => {\n     this.isFetching = true;\n\ndiff --git a/server/commands/pinCreator.ts b/server/commands/pinCreator.ts\nindex 6c5adeb04ac7..b7e8039a5748 100644\n--- a/server/commands/pinCreator.ts\n+++ b/server/commands/pinCreator.ts\n@@ -62,12 +62,13 @@ export default async function pinCreator({\n     index = fractionalIndex(pins.length ? pins[0].index : null, null);\n   }\n \n-  const pin = await Pin.createWithCtx(ctx, {\n-    createdById: user.id,\n-    teamId: user.teamId,\n-    collectionId,\n-    documentId,\n-    index,\n+  const [pin] = await Pin.findOrCreateWithCtx(ctx, {\n+    where: {\n+      collectionId: collectionId ?? null,\n+      documentId,\n+      teamId: user.teamId,\n+    },\n+    defaults: { index, createdById: user.id },\n   });\n \n   return pin;\n\ndiff --git a/server/routes/api/pins/pins.ts b/server/routes/api/pins/pins.ts\nindex 015661a5327a..676ea8a1c8e1 100644\n--- a/server/routes/api/pins/pins.ts\n+++ b/server/routes/api/pins/pins.ts\n@@ -57,12 +57,41 @@ router.post(\n   }\n );\n \n+router.post(\n+  \""pins.info\"",\n+  auth(),\n+  validate(T.PinsInfoSchema),\n+  async (ctx: APIContext<T.PinsInfoReq>) => {\n+    const { user } = ctx.state.auth;\n+    const { documentId, collectionId } = ctx.input.body;\n+\n+    const document = await Document.findByPk(documentId, { userId: user.id });\n+    authorize(user, \""read\"", document);\n+\n+    // There can be only one pin with these props.\n+    const pin = await Pin.findOne({\n+      where: {\n+        documentId,\n+        collectionId: collectionId ?? null,\n+        createdById: user.id,\n+        teamId: user.teamId,\n+      },\n+      rejectOnEmpty: true,\n+    });\n+\n+    ctx.body = {\n+      data: presentPin(pin),\n+      policies: presentPolicies(user, [pin]),\n+    };\n+  }\n+);\n+\n router.post(\n   \""pins.list\"",\n   auth(),\n   validate(T.PinsListSchema),\n   pagination(),\n-  async (ctx: APIContext<T.PinsCreateReq>) => {\n+  async (ctx: APIContext<T.PinsListReq>) => {\n     const { collectionId } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n\ndiff --git a/server/routes/api/pins/schema.ts b/server/routes/api/pins/schema.ts\nindex e659e72a4178..823953ff9262 100644\n--- a/server/routes/api/pins/schema.ts\n+++ b/server/routes/api/pins/schema.ts\n@@ -1,6 +1,7 @@\n import isUUID from \""validator/lib/isUUID\"";\n import { z } from \""zod\"";\n import { UrlHelper } from \""@shared/utils/UrlHelper\"";\n+import { zodIdType } from \""@server/utils/zod\"";\n import { BaseSchema } from \""../schema\"";\n \n export const PinsCreateSchema = BaseSchema.extend({\n@@ -24,13 +25,24 @@ export const PinsCreateSchema = BaseSchema.extend({\n \n export type PinsCreateReq = z.infer<typeof PinsCreateSchema>;\n \n+export const PinsInfoSchema = BaseSchema.extend({\n+  body: z.object({\n+    /** Document to get the pin info for. */\n+    documentId: zodIdType(),\n+    /** Collection to which the pin belongs to. If not set, it's considered as \""Home\"" pin. */\n+    collectionId: z.string().uuid().nullish(),\n+  }),\n+});\n+\n+export type PinsInfoReq = z.infer<typeof PinsInfoSchema>;\n+\n export const PinsListSchema = BaseSchema.extend({\n   body: z.object({\n     collectionId: z.string().uuid().nullish(),\n   }),\n });\n \n-export type PinsListReq = z.infer<typeof PinsCreateSchema>;\n+export type PinsListReq = z.infer<typeof PinsListSchema>;\n \n export const PinsUpdateSchema = BaseSchema.extend({\n   body: z.object({\n"", ""test_patch"": ""diff --git a/server/routes/api/pins/pins.test.ts b/server/routes/api/pins/pins.test.ts\nindex f1936a0d3538..0ebcf36295b8 100644\n--- a/server/routes/api/pins/pins.test.ts\n+++ b/server/routes/api/pins/pins.test.ts\n@@ -168,6 +168,84 @@ describe(\""#pins.create\"", () => {\n   });\n });\n \n+describe(\""#pins.info\"", () => {\n+  it(\""should provide info about a home pin\"", async () => {\n+    const admin = await buildAdmin();\n+    const document = await buildDocument({\n+      userId: admin.id,\n+      teamId: admin.teamId,\n+    });\n+\n+    await server.post(\""/api/pins.create\"", {\n+      body: {\n+        token: admin.getJwtToken(),\n+        documentId: document.id,\n+      },\n+    });\n+\n+    const res = await server.post(\""/api/pins.info\"", {\n+      body: {\n+        token: admin.getJwtToken(),\n+        documentId: document.id,\n+      },\n+    });\n+    const pin = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(pin.data.id).toBeDefined();\n+    expect(pin.data.documentId).toEqual(document.id);\n+    expect(pin.data.collectionId).toBeFalsy();\n+  });\n+\n+  it(\""should provide info about a collection pin\"", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    await server.post(\""/api/pins.create\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        collectionId: document.collectionId,\n+      },\n+    });\n+\n+    const res = await server.post(\""/api/pins.info\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        collectionId: document.collectionId,\n+      },\n+    });\n+    const pin = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(pin.data.id).toBeDefined();\n+    expect(pin.data.documentId).toEqual(document.id);\n+    expect(pin.data.collectionId).toEqual(document.collectionId);\n+  });\n+\n+  it(\""should throw 404 if no pin found\"", async () => {\n+    const user = await buildUser();\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const res = await server.post(\""/api/pins.info\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        collectionId: null,\n+      },\n+    });\n+\n+    expect(res.status).toEqual(404);\n+  });\n+});\n+\n describe(\""#pins.list\"", () => {\n   let user: User;\n   let pins: Pin[];\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8495"", ""pr_id"": 8495, ""issue_id"": 8458, ""repo"": ""outline/outline"", ""problem_statement"": ""Move document history to `revisions.list` API\nCloses #8424 \r\n\r\nThis doesn't fix #8403 - it needs a bit more work to consolidate local document state.\r\n\r\nI also noticed that document restore doesn't create a `documents.restore` event which sometimes messes up the history - will create a separate PR."", ""issue_word_count"": 42, ""test_files_count"": 1, ""non_test_files_count"": 8, ""pr_changed_files"": [""app/components/EventListItem.tsx"", ""app/components/PaginatedEventList.tsx"", ""app/components/PaginatedList.tsx"", ""app/scenes/Document/components/History.tsx"", ""app/stores/RevisionsStore.ts"", ""server/routes/api/events/events.test.ts"", ""server/routes/api/events/events.ts"", ""server/routes/api/events/schema.ts"", ""shared/utils/EventHelper.ts""], ""pr_changed_test_files"": [""server/routes/api/events/events.test.ts""], ""base_commit"": ""7144536eb3d6d9e359febdae879a498416a69135"", ""head_commit"": ""b09db148867f6bda3a55d889569b6897f64b1844"", ""repo_url"": ""https://github.com/outline/outline/pull/8495"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8495"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-19T01:25:52.000Z"", ""patch"": null, ""test_patch"": null, ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8477"", ""pr_id"": 8477, ""issue_id"": 8266, ""repo"": ""outline/outline"", ""problem_statement"": ""Redirect previous subdomains\nIf a workspace changes subdomain it would be nice to redirect requests to the new one if here are no other workspaces that are using the subdomain as their _primary_. This can be achieved by:\n\n- Add a new column: `previousSubdomains` with is an array of previous subdomains capped to a length (lets say 5)\n- Fallback to searching this if no valid `subdomain` is found\n- Respond with a redirect\n"", ""issue_word_count"": 68, ""test_files_count"": 2, ""non_test_files_count"": 4, ""pr_changed_files"": [""server/migrations/20250217230810-add-team-previous-subdomains.js"", ""server/models/Team.test.ts"", ""server/models/Team.ts"", ""server/models/TeamDomain.test.ts"", ""server/routes/index.ts"", ""server/utils/passport.ts""], ""pr_changed_test_files"": [""server/models/Team.test.ts"", ""server/models/TeamDomain.test.ts""], ""base_commit"": ""c6ae6e0c36a6873e815cac1f9a839c6d0935dd55"", ""head_commit"": ""d8fe942b503447653b9bc0fcadc56e7508557570"", ""repo_url"": ""https://github.com/outline/outline/pull/8477"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8477"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-19T00:53:18.000Z"", ""patch"": ""diff --git a/server/migrations/20250217230810-add-team-previous-subdomains.js b/server/migrations/20250217230810-add-team-previous-subdomains.js\nnew file mode 100644\nindex 000000000000..898348bc6671\n--- /dev/null\n+++ b/server/migrations/20250217230810-add-team-previous-subdomains.js\n@@ -0,0 +1,27 @@\n+\""use strict\"";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.addColumn(\""teams\"", \""previousSubdomains\"", {\n+        type: Sequelize.ARRAY(Sequelize.STRING),\n+        allowNull: true,\n+      }, { transaction });\n+      await queryInterface.sequelize.query(\n+        `CREATE INDEX teams_previous_subdomains ON teams USING GIN (\""previousSubdomains\"");`,\n+        { transaction }\n+      );\n+    });\n+  },\n+\n+  async down(queryInterface) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.sequelize.query(\n+        `DROP INDEX teams_previous_subdomains;`,\n+        { transaction }\n+      );\n+      await queryInterface.removeColumn(\""teams\"", \""previousSubdomains\"", { transaction });\n+    });\n+  },\n+};\n\ndiff --git a/server/models/Team.ts b/server/models/Team.ts\nindex 43e052f840cd..2bf5d4c73884 100644\n--- a/server/models/Team.ts\n+++ b/server/models/Team.ts\n@@ -171,6 +171,9 @@ class Team extends ParanoidModel<\n   @Column\n   lastActiveAt: Date | null;\n \n+  @Column(DataType.ARRAY(DataType.STRING))\n+  previousSubdomains: string[] | null;\n+\n   // getters\n \n   /**\n@@ -369,6 +372,25 @@ class Team extends ParanoidModel<\n     return model;\n   }\n \n+  @BeforeUpdate\n+  static async savePreviousSubdomain(model: Team) {\n+    const previousSubdomain = model.previous(\""subdomain\"");\n+    if (previousSubdomain && previousSubdomain !== model.subdomain) {\n+      model.previousSubdomains = model.previousSubdomains || [];\n+\n+      if (!model.previousSubdomains.includes(previousSubdomain)) {\n+        // Add the previous subdomain to the list of previous subdomains\n+        // upto a maximum of 3 previous subdomains\n+        model.previousSubdomains.push(previousSubdomain);\n+        if (model.previousSubdomains.length > 3) {\n+          model.previousSubdomains.shift();\n+        }\n+      }\n+    }\n+\n+    return model;\n+  }\n+\n   @AfterUpdate\n   static deletePreviousAvatar = async (model: Team) => {\n     const previousAvatarUrl = model.previous(\""avatarUrl\"");\n@@ -393,6 +415,41 @@ class Team extends ParanoidModel<\n       }\n     }\n   };\n+\n+  /**\n+   * Find a team by its current or previous subdomain.\n+   *\n+   * @param subdomain - The subdomain to search for.\n+   * @returns The team with the given or previous subdomain, or null if not found.\n+   */\n+  static async findBySubdomain(subdomain: string) {\n+    // Preference is always given to the team with the subdomain currently\n+    // otherwise we can try and find a team that previously used the subdomain.\n+    return (\n+      (await this.findOne({\n+        where: {\n+          subdomain,\n+        },\n+      })) || (await this.findByPreviousSubdomain(subdomain))\n+    );\n+  }\n+\n+  /**\n+   * Find a team by its previous subdomain.\n+   *\n+   * @param previousSubdomain - The previous subdomain to search for.\n+   * @returns The team with the given previous subdomain, or null if not found.\n+   */\n+  static async findByPreviousSubdomain(previousSubdomain: string) {\n+    return this.findOne({\n+      where: {\n+        previousSubdomains: {\n+          [Op.contains]: [previousSubdomain],\n+        },\n+      },\n+      order: [[\""updatedAt\"", \""DESC\""]],\n+    });\n+  }\n }\n \n export default Team;\n\ndiff --git a/server/routes/index.ts b/server/routes/index.ts\nindex 417da32381a3..aeaa135052ee 100644\n--- a/server/routes/index.ts\n+++ b/server/routes/index.ts\n@@ -7,6 +7,7 @@ import send from \""koa-send\"";\n import userAgent, { UserAgentContext } from \""koa-useragent\"";\n import { languages } from \""@shared/i18n\"";\n import { IntegrationType, TeamPreference } from \""@shared/types\"";\n+import { parseDomain } from \""@shared/utils/domains\"";\n import { Day } from \""@shared/utils/time\"";\n import env from \""@server/env\"";\n import { NotFoundError } from \""@server/errors\"";\n@@ -138,11 +139,29 @@ router.get(\""*\"", shareDomains(), async (ctx, next) => {\n   }\n \n   const team = await getTeamFromContext(ctx);\n+  let redirectUrl;\n \n-  // Redirect all requests to custom domain if one is set\n-  if (team?.domain && team.domain !== ctx.hostname) {\n-    ctx.redirect(ctx.href.replace(ctx.hostname, team.domain));\n-    return;\n+  if (env.isCloudHosted) {\n+    // Redirect all requests to custom domain if one is set\n+    if (team?.domain && team.domain !== ctx.hostname) {\n+      redirectUrl = ctx.href.replace(ctx.hostname, team.domain);\n+    }\n+\n+    // Redirect if subdomain is not the current team's subdomain\n+    else if (team?.subdomain) {\n+      const { teamSubdomain } = parseDomain(ctx.href);\n+      if (team?.subdomain !== teamSubdomain) {\n+        redirectUrl = ctx.href.replace(\n+          `//${teamSubdomain}.`,\n+          `//${team.subdomain}.`\n+        );\n+      }\n+    }\n+\n+    if (redirectUrl) {\n+      ctx.redirect(redirectUrl);\n+      return;\n+    }\n   }\n \n   const analytics = team\n\ndiff --git a/server/utils/passport.ts b/server/utils/passport.ts\nindex a538df88a675..503b5f5fb44d 100644\n--- a/server/utils/passport.ts\n+++ b/server/utils/passport.ts\n@@ -127,9 +127,7 @@ export async function getTeamFromContext(ctx: Context) {\n   } else if (domain.custom) {\n     team = await Team.findOne({ where: { domain: domain.host } });\n   } else if (domain.teamSubdomain) {\n-    team = await Team.findOne({\n-      where: { subdomain: domain.teamSubdomain },\n-    });\n+    team = await Team.findBySubdomain(domain.teamSubdomain);\n   }\n \n   return team;\n"", ""test_patch"": ""diff --git a/server/models/Team.test.ts b/server/models/Team.test.ts\nindex 5c5194752be0..25665bea59ad 100644\n--- a/server/models/Team.test.ts\n+++ b/server/models/Team.test.ts\n@@ -1,20 +1,43 @@\n import { buildTeam, buildCollection } from \""@server/test/factories\"";\n \n-describe(\""collectionIds\"", () => {\n-  it(\""should return non-private collection ids\"", async () => {\n-    const team = await buildTeam();\n-    const collection = await buildCollection({\n-      teamId: team.id,\n+describe(\""Team\"", () => {\n+  describe(\""collectionIds\"", () => {\n+    it(\""should return non-private collection ids\"", async () => {\n+      const team = await buildTeam();\n+      const collection = await buildCollection({\n+        teamId: team.id,\n+      });\n+      // build a collection in another team\n+      await buildCollection();\n+      // build a private collection\n+      await buildCollection({\n+        teamId: team.id,\n+        permission: null,\n+      });\n+      const response = await team.collectionIds();\n+      expect(response.length).toEqual(1);\n+      expect(response[0]).toEqual(collection.id);\n     });\n-    // build a collection in another team\n-    await buildCollection();\n-    // build a private collection\n-    await buildCollection({\n-      teamId: team.id,\n-      permission: null,\n+  });\n+\n+  describe(\""previousSubdomains\"", () => {\n+    it(\""should list the previous subdomains\"", async () => {\n+      const team = await buildTeam({\n+        subdomain: \""example\"",\n+      });\n+      const subdomain = \""updated\"";\n+\n+      await team.update({ subdomain });\n+      expect(team.subdomain).toEqual(subdomain);\n+      expect(team.previousSubdomains?.length).toEqual(1);\n+      expect(team.previousSubdomains?.[0]).toEqual(\""example\"");\n+\n+      const subdomain2 = \""another\"";\n+      await team.update({ subdomain: subdomain2 });\n+      expect(team.subdomain).toEqual(subdomain2);\n+      expect(team.previousSubdomains?.length).toEqual(2);\n+      expect(team.previousSubdomains?.[0]).toEqual(\""example\"");\n+      expect(team.previousSubdomains?.[1]).toEqual(subdomain);\n     });\n-    const response = await team.collectionIds();\n-    expect(response.length).toEqual(1);\n-    expect(response[0]).toEqual(collection.id);\n   });\n });\n\ndiff --git a/server/models/TeamDomain.test.ts b/server/models/TeamDomain.test.ts\nindex b9c9b51e2694..41610a029596 100644\n--- a/server/models/TeamDomain.test.ts\n+++ b/server/models/TeamDomain.test.ts\n@@ -1,7 +1,7 @@\n import { buildAdmin, buildTeam } from \""@server/test/factories\"";\n import TeamDomain from \""./TeamDomain\"";\n \n-describe(\""team domain model\"", () => {\n+describe(\""TeamDomain\"", () => {\n   describe(\""create\"", () => {\n     it(\""should allow creation of domains\"", async () => {\n       const team = await buildTeam();\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8472"", ""pr_id"": 8472, ""issue_id"": 8457, ""repo"": ""outline/outline"", ""problem_statement"": ""Copy pasting the content from some articles into outline does not get the images\n### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### This is not related to configuring Outline\n\n- [x] The issue is not related to self-hosting config\n\n### Current Behavior\n\nCopy pasting the content from some articles into outline does not get the images\n\n[https://ritvik19.medium.com/papers-explained-181-claude-89dd45e35d92](https://ritvik19.medium.com/papers-explained-181-claude-89dd45e35d92\n)\n\nTested on macos, not sure if this is a OS thing or something else. \nWhat i have tried is that If i paste the same content into google drive it will paste correctly, including images.\nSo the same clipboard content will output the images in google drive, so the content is in the clipboard.\n\n[https://docs.google.com/document/d/1sxKyAXq3dBhrPtB_Z0boCHYsDt-WhYq3V9aHvrlfSSY/edit?usp=sharing](https://docs.google.com/document/d/1sxKyAXq3dBhrPtB_Z0boCHYsDt-WhYq3V9aHvrlfSSY/edit?usp=sharing)\n\nWhile copy-pasting from this medium article into outline works including images\n\n[https://ritvik19.medium.com/papers-explained-199-cvt-fb4a5c05882e](https://ritvik19.medium.com/papers-explained-199-cvt-fb4a5c05882e\n)\n\nYou can see the text that is being outputted in app.getoutline.com here \nhttps://badita.getoutline.com/doc/copy-paste-does-not-work-for-some-links-IUS8UdS9vw)\n\n### Expected Behavior\n\nPaste the content with the images\n\n### Steps To Reproduce\n\nGo to [https://ritvik19.medium.com/papers-explained-181-claude-89dd45e35d92](https://ritvik19.medium.com/papers-explained-181-claude-89dd45e35d92\n)\nCopy the article content\nPaste it in getoutline\nThe images will not be present.\n\n### Environment\n\n```markdown\n- Outline: 0.82\n- Browser: Chrome on macos\n```\n\n### Anything else?\n\n_No response_"", ""issue_word_count"": 257, ""test_files_count"": 1, ""non_test_files_count"": 6, ""pr_changed_files"": [""app/editor/extensions/PasteHandler.tsx"", ""plugins/storage/server/api/files.test.ts"", ""plugins/storage/server/api/files.ts"", ""server/routes/api/attachments/attachments.ts"", ""server/storage/files/BaseStorage.ts"", ""server/utils/fetch.ts"", ""shared/editor/components/Caption.tsx""], ""pr_changed_test_files"": [""plugins/storage/server/api/files.test.ts""], ""base_commit"": ""433c3b299d74273b7759b062e26d90d37b844f89"", ""head_commit"": ""8493b82aae156ce9e3295f6a6e78905d9d2a6659"", ""repo_url"": ""https://github.com/outline/outline/pull/8472"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8472"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-17T19:54:13.000Z"", ""patch"": ""diff --git a/app/editor/extensions/PasteHandler.tsx b/app/editor/extensions/PasteHandler.tsx\nindex e6a3323ca245..73c1c6340041 100644\n--- a/app/editor/extensions/PasteHandler.tsx\n+++ b/app/editor/extensions/PasteHandler.tsx\n@@ -25,52 +25,6 @@ import { isDocumentUrl, isUrl } from \""@shared/utils/urls\"";\n import stores from \""~/stores\"";\n import PasteMenu from \""../components/PasteMenu\"";\n \n-/**\n- * Checks if the HTML string is likely coming from Dropbox Paper.\n- *\n- * @param html The HTML string to check.\n- * @returns True if the HTML string is likely coming from Dropbox Paper.\n- */\n-function isDropboxPaper(html: string): boolean {\n-  return html?.includes(\""usually-unique-id\"");\n-}\n-\n-function sliceSingleNode(slice: Slice) {\n-  return slice.openStart === 0 &&\n-    slice.openEnd === 0 &&\n-    slice.content.childCount === 1\n-    ? slice.content.firstChild\n-    : null;\n-}\n-\n-/**\n- * Parses the text contents of an HTML string and returns the src of the first\n- * iframe if it exists.\n- *\n- * @param text The HTML string to parse.\n- * @returns The src of the first iframe if it exists, or undefined.\n- */\n-function parseSingleIframeSrc(html: string) {\n-  try {\n-    const parser = new DOMParser();\n-    const doc = parser.parseFromString(html, \""text/html\"");\n-\n-    if (\n-      doc.body.children.length === 1 &&\n-      doc.body.firstElementChild?.tagName === \""IFRAME\""\n-    ) {\n-      const iframe = doc.body.firstElementChild;\n-      const src = iframe.getAttribute(\""src\"");\n-      if (src) {\n-        return src;\n-      }\n-    }\n-  } catch (e) {\n-    // Ignore the million ways parsing could fail.\n-  }\n-  return undefined;\n-}\n-\n export default class PasteHandler extends Extension {\n   state: {\n     open: boolean;\n@@ -261,9 +215,12 @@ export default class PasteHandler extends Extension {\n             // If the text on the clipboard looks like Markdown OR there is no\n             // html on the clipboard then try to parse content as Markdown\n             if (\n-              (isMarkdown(text) && !isDropboxPaper(html)) ||\n+              (isMarkdown(text) &&\n+                !isDropboxPaper(html) &&\n+                !isContainingImage(html)) ||\n               pasteCodeLanguage === \""markdown\"" ||\n-              this.shiftKey\n+              this.shiftKey ||\n+              !html\n             ) {\n               event.preventDefault();\n \n@@ -475,3 +432,59 @@ export default class PasteHandler extends Extension {\n     />\n   );\n }\n+\n+/**\n+ * Checks if the HTML string is likely coming from Dropbox Paper.\n+ *\n+ * @param html The HTML string to check.\n+ * @returns True if the HTML string is likely coming from Dropbox Paper.\n+ */\n+function isDropboxPaper(html: string): boolean {\n+  return html?.includes(\""usually-unique-id\"");\n+}\n+\n+/**\n+ * Checks if the HTML string contains an image.\n+ *\n+ * @param html The HTML string to check.\n+ * @returns True if the HTML string contains an image.\n+ */\n+function isContainingImage(html: string): boolean {\n+  return html?.includes(\""<img\"");\n+}\n+\n+function sliceSingleNode(slice: Slice) {\n+  return slice.openStart === 0 &&\n+    slice.openEnd === 0 &&\n+    slice.content.childCount === 1\n+    ? slice.content.firstChild\n+    : null;\n+}\n+\n+/**\n+ * Parses the text contents of an HTML string and returns the src of the first\n+ * iframe if it exists.\n+ *\n+ * @param text The HTML string to parse.\n+ * @returns The src of the first iframe if it exists, or undefined.\n+ */\n+function parseSingleIframeSrc(html: string) {\n+  try {\n+    const parser = new DOMParser();\n+    const doc = parser.parseFromString(html, \""text/html\"");\n+\n+    if (\n+      doc.body.children.length === 1 &&\n+      doc.body.firstElementChild?.tagName === \""IFRAME\""\n+    ) {\n+      const iframe = doc.body.firstElementChild;\n+      const src = iframe.getAttribute(\""src\"");\n+      if (src) {\n+        return src;\n+      }\n+    }\n+  } catch (e) {\n+    // Ignore the million ways parsing could fail.\n+  }\n+  return undefined;\n+}\n\ndiff --git a/plugins/storage/server/api/files.ts b/plugins/storage/server/api/files.ts\nindex 904f8c236eb6..98f29252e671 100644\n--- a/plugins/storage/server/api/files.ts\n+++ b/plugins/storage/server/api/files.ts\n@@ -77,19 +77,20 @@ router.get(\n     const { isPublicBucket, fileName } = AttachmentHelper.parseKey(key);\n     const skipAuthorize = isPublicBucket || isSignedRequest;\n     const cacheHeader = \""max-age=604800, immutable\"";\n-    let contentType =\n-      (fileName ? mime.lookup(fileName) : undefined) ||\n-      \""application/octet-stream\"";\n \n+    const attachment = await Attachment.findOne({\n+      where: { key },\n+      rejectOnEmpty: true,\n+    });\n     if (!skipAuthorize) {\n-      const attachment = await Attachment.findOne({\n-        where: { key },\n-        rejectOnEmpty: true,\n-      });\n       authorize(actor, \""read\"", attachment);\n-      contentType = attachment.contentType;\n     }\n \n+    const contentType =\n+      attachment.contentType ||\n+      (fileName ? mime.lookup(fileName) : undefined) ||\n+      \""application/octet-stream\"";\n+\n     ctx.set(\""Accept-Ranges\"", \""bytes\"");\n     ctx.set(\""Cache-Control\"", cacheHeader);\n     ctx.set(\""Content-Type\"", contentType);\n\ndiff --git a/server/routes/api/attachments/attachments.ts b/server/routes/api/attachments/attachments.ts\nindex d2288c2151d5..120052231bf9 100644\n--- a/server/routes/api/attachments/attachments.ts\n+++ b/server/routes/api/attachments/attachments.ts\n@@ -176,6 +176,8 @@ router.post(\n       throw InvalidRequestError(response.error);\n     }\n \n+    await attachment.reload();\n+\n     ctx.body = {\n       data: presentAttachment(attachment),\n     };\n\ndiff --git a/server/storage/files/BaseStorage.ts b/server/storage/files/BaseStorage.ts\nindex 339262cc568d..9c3850f4aa53 100644\n--- a/server/storage/files/BaseStorage.ts\n+++ b/server/storage/files/BaseStorage.ts\n@@ -1,10 +1,10 @@\n import { Blob } from \""buffer\"";\n import { Readable } from \""stream\"";\n import { PresignedPost } from \""@aws-sdk/s3-presigned-post\"";\n-import { isBase64Url } from \""@shared/utils/urls\"";\n+import { isBase64Url, isInternalUrl } from \""@shared/utils/urls\"";\n import env from \""@server/env\"";\n import Logger from \""@server/logging/Logger\"";\n-import fetch, { RequestInit } from \""@server/utils/fetch\"";\n+import fetch, { chromeUserAgent, RequestInit } from \""@server/utils/fetch\"";\n \n export default abstract class BaseStorage {\n   /** The default number of seconds until a signed URL expires. */\n@@ -149,7 +149,7 @@ export default abstract class BaseStorage {\n     const endpoint = this.getUploadUrl(true);\n \n     // Early return if url is already uploaded to the storage provider\n-    if (url.startsWith(\""/api\"") || url.startsWith(endpoint)) {\n+    if (url.startsWith(endpoint) || isInternalUrl(url)) {\n       return;\n     }\n \n@@ -168,6 +168,9 @@ export default abstract class BaseStorage {\n             options?.maxUploadSize ?? Infinity,\n             env.FILE_STORAGE_UPLOAD_MAX_SIZE\n           ),\n+          headers: {\n+            \""User-Agent\"": chromeUserAgent,\n+          },\n           timeout: 10000,\n           ...init,\n         });\n\ndiff --git a/server/utils/fetch.ts b/server/utils/fetch.ts\nindex 2e712b40157b..19b4f1b5d7f6 100644\n--- a/server/utils/fetch.ts\n+++ b/server/utils/fetch.ts\n@@ -7,6 +7,13 @@ import Logger from \""@server/logging/Logger\"";\n \n export type { RequestInit } from \""node-fetch\"";\n \n+/**\n+ * Fake Chrome user agent string for use in fetch requests to\n+ * improve reliability.\n+ */\n+export const chromeUserAgent =\n+  \""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36\"";\n+\n /**\n  * Wrapper around fetch that uses the request-filtering-agent in cloud hosted\n  * environments to filter malicious requests, and the fetch-with-proxy library\n\ndiff --git a/shared/editor/components/Caption.tsx b/shared/editor/components/Caption.tsx\nindex 4550f1fcee6a..3a8c58065742 100644\n--- a/shared/editor/components/Caption.tsx\n+++ b/shared/editor/components/Caption.tsx\n@@ -71,6 +71,7 @@ const Content = styled.p<{ $width: number; $isSelected: boolean }>`\n   cursor: text;\n   width: ${(props) => props.$width}px;\n   min-width: 200px;\n+  max-width: 100%;\n \n   ${breakpoint(\""tablet\"")`\n     font-size: 13px;\n"", ""test_patch"": ""diff --git a/plugins/storage/server/api/files.test.ts b/plugins/storage/server/api/files.test.ts\nindex 249e53cb612d..47da255d071e 100644\n--- a/plugins/storage/server/api/files.test.ts\n+++ b/plugins/storage/server/api/files.test.ts\n@@ -236,7 +236,16 @@ describe(\""#files.get\"", () => {\n   it(\""should succeed with status 200 ok when file is requested using signature\"", async () => {\n     const user = await buildUser();\n     const fileName = \""images.docx\"";\n-    const key = path.join(\""uploads\"", user.id, uuidV4(), fileName);\n+    const { key } = await buildAttachment(\n+      {\n+        teamId: user.teamId,\n+        userId: user.id,\n+        contentType:\n+          \""application/vnd.openxmlformats-officedocument.wordprocessingml.document\"",\n+        acl: \""private\"",\n+      },\n+      fileName\n+    );\n     const signedUrl = await FileStorage.getSignedUrl(key);\n \n     ensureDirSync(\n@@ -262,6 +271,13 @@ describe(\""#files.get\"", () => {\n   it(\""should succeed with status 200 ok when avatar is requested using key\"", async () => {\n     const user = await buildUser();\n     const key = path.join(\""avatars\"", user.id, uuidV4());\n+    await buildAttachment({\n+      key,\n+      teamId: user.teamId,\n+      userId: user.id,\n+      contentType: \""image/jpg\"",\n+      acl: \""public-read\"",\n+    });\n \n     ensureDirSync(\n       path.dirname(path.join(env.FILE_STORAGE_LOCAL_ROOT_DIR, key))\n@@ -274,7 +290,7 @@ describe(\""#files.get\"", () => {\n \n     const res = await server.get(`/api/files.get?key=${key}`);\n     expect(res.status).toEqual(200);\n-    expect(res.headers.get(\""Content-Type\"")).toEqual(\""application/octet-stream\"");\n+    expect(res.headers.get(\""Content-Type\"")).toEqual(\""image/jpg\"");\n     expect(res.headers.get(\""Content-Disposition\"")).toEqual(\""attachment\"");\n   });\n });\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8446"", ""pr_id"": 8446, ""issue_id"": 8424, ""repo"": ""outline/outline"", ""problem_statement"": ""Move document history sidebar to be driven by `revisions.list`\nAs discussed, `events.list` will no longer be a reliable source of information."", ""issue_word_count"": 13, ""test_files_count"": 1, ""non_test_files_count"": 14, ""pr_changed_files"": [""plugins/webhooks/server/tasks/CleanupWebhookDeliveriesTask.ts"", ""server/models/base/Model.test.ts"", ""server/models/base/Model.ts"", ""server/queues/tasks/BaseTask.ts"", ""server/queues/tasks/CleanupDeletedDocumentsTask.ts"", ""server/queues/tasks/CleanupDeletedTeamsTask.ts"", ""server/queues/tasks/CleanupExpiredAttachmentsTask.ts"", ""server/queues/tasks/CleanupExpiredFileOperationsTask.ts"", ""server/queues/tasks/CleanupOldEventsTask.ts"", ""server/queues/tasks/CleanupOldNotificationsTask.ts"", ""server/queues/tasks/ErrorTimedOutFileOperationsTask.ts"", ""server/queues/tasks/InviteReminderTask.ts"", ""server/queues/tasks/UpdateTeamsAttachmentsSizeTask.ts"", ""server/routes/api/cron/cron.ts"", ""server/services/cron.ts""], ""pr_changed_test_files"": [""server/models/base/Model.test.ts""], ""base_commit"": ""6a633f5a4c915ce2ffbfa951ae02d3e77b3d4428"", ""head_commit"": ""431937aa3a5fd3d4b782e0fc91330260435f6806"", ""repo_url"": ""https://github.com/outline/outline/pull/8446"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8446"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-17T21:34:30.000Z"", ""patch"": ""diff --git a/plugins/webhooks/server/tasks/CleanupWebhookDeliveriesTask.ts b/plugins/webhooks/server/tasks/CleanupWebhookDeliveriesTask.ts\nindex 13f4cf741f95..46657afbd3e5 100644\n--- a/plugins/webhooks/server/tasks/CleanupWebhookDeliveriesTask.ts\n+++ b/plugins/webhooks/server/tasks/CleanupWebhookDeliveriesTask.ts\n@@ -10,7 +10,7 @@ import BaseTask, {\n type Props = Record<string, never>;\n \n export default class CleanupWebhookDeliveriesTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Day;\n \n   public async perform() {\n     Logger.info(\""task\"", `Deleting WebhookDeliveries older than one week\u2026`);\n\ndiff --git a/server/models/base/Model.ts b/server/models/base/Model.ts\nindex f47dffd14986..e27c416f8585 100644\n--- a/server/models/base/Model.ts\n+++ b/server/models/base/Model.ts\n@@ -282,7 +282,10 @@ class Model<\n    * @param callback The function to call for each batch of results\n    */\n   static async findAllInBatches<T extends Model>(\n-    query: Replace<FindOptions<T>, \""limit\"", \""batchLimit\"">,\n+    query: Replace<FindOptions<T>, \""limit\"", \""batchLimit\""> & {\n+      /** The maximum number of results to return, after which the query will stop. */\n+      totalLimit?: number;\n+    },\n     callback: (results: Array<T>, query: FindOptions<T>) => Promise<void>\n   ) {\n     const mappedQuery = {\n@@ -298,7 +301,10 @@ class Model<\n       results = await this.findAll<T>(mappedQuery);\n       await callback(results, mappedQuery);\n       mappedQuery.offset += mappedQuery.limit;\n-    } while (results.length >= mappedQuery.limit);\n+    } while (\n+      results.length >= mappedQuery.limit &&\n+      (mappedQuery.totalLimit ?? Infinity) > mappedQuery.offset\n+    );\n   }\n \n   /**\n\ndiff --git a/server/queues/tasks/BaseTask.ts b/server/queues/tasks/BaseTask.ts\nindex 4bd34fd2f74d..e212d8373018 100644\n--- a/server/queues/tasks/BaseTask.ts\n+++ b/server/queues/tasks/BaseTask.ts\n@@ -9,8 +9,9 @@ export enum TaskPriority {\n }\n \n export enum TaskSchedule {\n-  Daily = \""daily\"",\n-  Hourly = \""hourly\"",\n+  Day = \""daily\"",\n+  Hour = \""hourly\"",\n+  Minute = \""minute\"",\n }\n \n export default abstract class BaseTask<T extends Record<string, any>> {\n\ndiff --git a/server/queues/tasks/CleanupDeletedDocumentsTask.ts b/server/queues/tasks/CleanupDeletedDocumentsTask.ts\nindex 4c04095381c2..71646ba644cb 100644\n--- a/server/queues/tasks/CleanupDeletedDocumentsTask.ts\n+++ b/server/queues/tasks/CleanupDeletedDocumentsTask.ts\n@@ -10,7 +10,7 @@ type Props = {\n };\n \n export default class CleanupDeletedDocumentsTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Hour;\n \n   public async perform({ limit }: Props) {\n     Logger.info(\n\ndiff --git a/server/queues/tasks/CleanupDeletedTeamsTask.ts b/server/queues/tasks/CleanupDeletedTeamsTask.ts\nindex 403ee684db18..daaa9d4ab6e8 100644\n--- a/server/queues/tasks/CleanupDeletedTeamsTask.ts\n+++ b/server/queues/tasks/CleanupDeletedTeamsTask.ts\n@@ -10,7 +10,7 @@ type Props = {\n };\n \n export default class CleanupDeletedTeamsTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Hour;\n \n   public async perform({ limit }: Props) {\n     Logger.info(\n\ndiff --git a/server/queues/tasks/CleanupExpiredAttachmentsTask.ts b/server/queues/tasks/CleanupExpiredAttachmentsTask.ts\nindex a5596666d3f4..195f51172483 100644\n--- a/server/queues/tasks/CleanupExpiredAttachmentsTask.ts\n+++ b/server/queues/tasks/CleanupExpiredAttachmentsTask.ts\n@@ -8,7 +8,7 @@ type Props = {\n };\n \n export default class CleanupExpiredAttachmentsTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Hour;\n \n   public async perform({ limit }: Props) {\n     Logger.info(\""task\"", `Deleting expired attachments\u2026`);\n\ndiff --git a/server/queues/tasks/CleanupExpiredFileOperationsTask.ts b/server/queues/tasks/CleanupExpiredFileOperationsTask.ts\nindex 2a405d275adc..4e3e79b1fab4 100644\n--- a/server/queues/tasks/CleanupExpiredFileOperationsTask.ts\n+++ b/server/queues/tasks/CleanupExpiredFileOperationsTask.ts\n@@ -10,7 +10,7 @@ type Props = {\n };\n \n export default class CleanupExpiredFileOperationsTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Hour;\n \n   public async perform({ limit }: Props) {\n     Logger.info(\""task\"", `Expiring file operations older than 15 days\u2026`);\n\ndiff --git a/server/queues/tasks/CleanupOldEventsTask.ts b/server/queues/tasks/CleanupOldEventsTask.ts\nnew file mode 100644\nindex 000000000000..6d1189f7e472\n--- /dev/null\n+++ b/server/queues/tasks/CleanupOldEventsTask.ts\n@@ -0,0 +1,60 @@\n+import { subDays } from \""date-fns\"";\n+import { Op } from \""sequelize\"";\n+import Logger from \""@server/logging/Logger\"";\n+import { Event } from \""@server/models\"";\n+import BaseTask, {\n+  TaskPriority,\n+  TaskSchedule,\n+} from \""@server/queues/tasks/BaseTask\"";\n+\n+type Props = Record<string, never>;\n+\n+export default class CleanupOldEventsTask extends BaseTask<Props> {\n+  static cron = TaskSchedule.Hour;\n+\n+  public async perform() {\n+    // TODO: Hardcoded right now, configurable later\n+    const retentionDays = 365;\n+    const cutoffDate = subDays(new Date(), retentionDays);\n+    const maxEventsPerTask = 100000;\n+    let totalEventsDeleted = 0;\n+\n+    try {\n+      await Event.findAllInBatches(\n+        {\n+          attributes: [\""id\""],\n+          where: {\n+            createdAt: {\n+              [Op.lt]: cutoffDate,\n+            },\n+          },\n+          batchLimit: 1000,\n+          totalLimit: maxEventsPerTask,\n+          order: [[\""createdAt\"", \""ASC\""]],\n+        },\n+        async (events) => {\n+          totalEventsDeleted += await Event.destroy({\n+            where: {\n+              id: {\n+                [Op.in]: events.map((event) => event.id),\n+              },\n+            },\n+          });\n+        }\n+      );\n+    } finally {\n+      if (totalEventsDeleted > 0) {\n+        Logger.info(\""task\"", `Deleted old events`, {\n+          totalEventsDeleted,\n+        });\n+      }\n+    }\n+  }\n+\n+  public get options() {\n+    return {\n+      attempts: 1,\n+      priority: TaskPriority.Background,\n+    };\n+  }\n+}\n\ndiff --git a/server/queues/tasks/CleanupOldNotificationsTask.ts b/server/queues/tasks/CleanupOldNotificationsTask.ts\nindex 752f73de666d..5a4624f528b3 100644\n--- a/server/queues/tasks/CleanupOldNotificationsTask.ts\n+++ b/server/queues/tasks/CleanupOldNotificationsTask.ts\n@@ -7,7 +7,7 @@ import BaseTask, { TaskPriority, TaskSchedule } from \""./BaseTask\"";\n type Props = Record<string, never>;\n \n export default class CleanupOldNotificationsTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Hour;\n \n   public async perform() {\n     Logger.info(\""task\"", `Permanently destroying old notifications\u2026`);\n\ndiff --git a/server/queues/tasks/ErrorTimedOutFileOperationsTask.ts b/server/queues/tasks/ErrorTimedOutFileOperationsTask.ts\nindex bc5f44eb4e6b..c5e99e33c004 100644\n--- a/server/queues/tasks/ErrorTimedOutFileOperationsTask.ts\n+++ b/server/queues/tasks/ErrorTimedOutFileOperationsTask.ts\n@@ -10,7 +10,7 @@ type Props = {\n };\n \n export default class ErrorTimedOutFileOperationsTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Hour;\n \n   public async perform({ limit }: Props) {\n     Logger.info(\""task\"", `Error file operations running longer than 12 hours\u2026`);\n\ndiff --git a/server/queues/tasks/InviteReminderTask.ts b/server/queues/tasks/InviteReminderTask.ts\nindex 3e1d238d319d..be559c777fae 100644\n--- a/server/queues/tasks/InviteReminderTask.ts\n+++ b/server/queues/tasks/InviteReminderTask.ts\n@@ -9,7 +9,7 @@ import BaseTask, { TaskPriority, TaskSchedule } from \""./BaseTask\"";\n type Props = Record<string, never>;\n \n export default class InviteReminderTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Day;\n \n   public async perform() {\n     const users = await User.scope(\""invited\"").findAll({\n\ndiff --git a/server/queues/tasks/UpdateTeamsAttachmentsSizeTask.ts b/server/queues/tasks/UpdateTeamsAttachmentsSizeTask.ts\nindex 433a0835a724..48c7055033fd 100644\n--- a/server/queues/tasks/UpdateTeamsAttachmentsSizeTask.ts\n+++ b/server/queues/tasks/UpdateTeamsAttachmentsSizeTask.ts\n@@ -11,7 +11,7 @@ type Props = {\n };\n \n export default class UpdateTeamsAttachmentsSizeTask extends BaseTask<Props> {\n-  static cron = TaskSchedule.Daily;\n+  static cron = TaskSchedule.Day;\n \n   public async perform({ limit }: Props) {\n     Logger.info(\n\ndiff --git a/server/routes/api/cron/cron.ts b/server/routes/api/cron/cron.ts\nindex 88bb10fede65..7b4f5f9fd9fc 100644\n--- a/server/routes/api/cron/cron.ts\n+++ b/server/routes/api/cron/cron.ts\n@@ -3,13 +3,20 @@ import env from \""@server/env\"";\n import { AuthenticationError } from \""@server/errors\"";\n import validate from \""@server/middlewares/validate\"";\n import tasks from \""@server/queues/tasks\"";\n+import { TaskSchedule } from \""@server/queues/tasks/BaseTask\"";\n import { APIContext } from \""@server/types\"";\n import { safeEqual } from \""@server/utils/crypto\"";\n import * as T from \""./schema\"";\n \n const router = new Router();\n \n+/** Whether the minutely cron job has been received */\n+const receivedPeriods = new Set<TaskSchedule>();\n+\n const cronHandler = async (ctx: APIContext<T.CronSchemaReq>) => {\n+  const period = Object.keys(TaskSchedule).includes(ctx.params.period)\n+    ? (ctx.params.period as TaskSchedule)\n+    : TaskSchedule.Day;\n   const token = (ctx.input.body.token ?? ctx.input.query.token) as string;\n   const limit = ctx.input.body.limit ?? ctx.input.query.limit;\n \n@@ -17,9 +24,26 @@ const cronHandler = async (ctx: APIContext<T.CronSchemaReq>) => {\n     throw AuthenticationError(\""Invalid secret token\"");\n   }\n \n+  receivedPeriods.add(period);\n+\n   for (const name in tasks) {\n     const TaskClass = tasks[name];\n-    if (TaskClass.cron) {\n+    if (TaskClass.cron === period) {\n+      await TaskClass.schedule({ limit });\n+\n+      // Backwards compatibility for installations that have not set up\n+      // cron jobs periods other than daily.\n+    } else if (\n+      TaskClass.cron === TaskSchedule.Minute &&\n+      !receivedPeriods.has(TaskSchedule.Minute) &&\n+      (period === TaskSchedule.Hour || period === TaskSchedule.Day)\n+    ) {\n+      await TaskClass.schedule({ limit });\n+    } else if (\n+      TaskClass.cron === TaskSchedule.Hour &&\n+      !receivedPeriods.has(TaskSchedule.Hour) &&\n+      period === TaskSchedule.Day\n+    ) {\n       await TaskClass.schedule({ limit });\n     }\n   }\n\ndiff --git a/server/services/cron.ts b/server/services/cron.ts\nindex 32e460f80148..cd418ea1590b 100644\n--- a/server/services/cron.ts\n+++ b/server/services/cron.ts\n@@ -1,4 +1,4 @@\n-import { Day, Hour, Second } from \""@shared/utils/time\"";\n+import { Day, Hour, Minute, Second } from \""@shared/utils/time\"";\n import tasks from \""@server/queues/tasks\"";\n import { TaskSchedule } from \""@server/queues/tasks/BaseTask\"";\n \n@@ -12,13 +12,15 @@ export default function init() {\n     }\n   }\n \n-  setInterval(() => void run(TaskSchedule.Daily), Day.ms);\n-  setInterval(() => void run(TaskSchedule.Hourly), Hour.ms);\n+  setInterval(() => void run(TaskSchedule.Day), Day.ms);\n+  setInterval(() => void run(TaskSchedule.Hour), Hour.ms);\n+  setInterval(() => void run(TaskSchedule.Minute), Minute.ms);\n \n   // Just give everything time to startup before running the first time. Not\n   // _technically_ required to function.\n   setTimeout(() => {\n-    void run(TaskSchedule.Daily);\n-    void run(TaskSchedule.Hourly);\n-  }, 30 * Second.ms);\n+    void run(TaskSchedule.Day);\n+    void run(TaskSchedule.Hour);\n+    void run(TaskSchedule.Minute);\n+  }, 5 * Second.ms);\n }\n"", ""test_patch"": ""diff --git a/server/models/base/Model.test.ts b/server/models/base/Model.test.ts\nindex acbdd1ba83fb..884e9f88b82c 100644\n--- a/server/models/base/Model.test.ts\n+++ b/server/models/base/Model.test.ts\n@@ -74,5 +74,27 @@ describe(\""Model\"", () => {\n       expect(usersBatch[0].length).toEqual(100);\n       expect(usersBatch[1].length).toEqual(5);\n     });\n+\n+    it(\""should return data in batches with total limit\"", async () => {\n+      const team = await buildTeam();\n+      await User.bulkCreate(\n+        [...Array(10)].map(() => ({\n+          email: faker.internet.email().toLowerCase(),\n+          name: faker.person.fullName(),\n+          teamId: team.id,\n+        }))\n+      );\n+\n+      const usersBatch: User[][] = [];\n+\n+      await User.findAllInBatches<User>(\n+        { where: { teamId: team.id }, batchLimit: 2, totalLimit: 4 },\n+        async (foundUsers) => void usersBatch.push(foundUsers)\n+      );\n+\n+      expect(usersBatch.length).toEqual(2);\n+      expect(usersBatch[0].length).toEqual(2);\n+      expect(usersBatch[1].length).toEqual(2);\n+    });\n   });\n });\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8368"", ""pr_id"": 8368, ""issue_id"": 7340, ""repo"": ""outline/outline"", ""problem_statement"": ""Subscribe to receive notifications for a whole collection\n### Discussed in https://github.com/outline/outline/discussions/7339\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **phoegon** August  2, 2024</sup>\r\nI would like to subscribe to all pages in a collection, so I can receive notifications about all changes in a collection. This subscription should also extend to all pages created after I subscribe to the collection.</div>"", ""issue_word_count"": 61, ""test_files_count"": 1, ""non_test_files_count"": 5, ""pr_changed_files"": [""app/actions/definitions/documents.tsx"", ""app/menus/DocumentMenu.tsx"", ""app/models/Document.ts"", ""app/stores/DocumentsStore.ts"", ""app/stores/SubscriptionsStore.ts"", ""server/routes/api/subscriptions/subscriptions.test.ts""], ""pr_changed_test_files"": [""server/routes/api/subscriptions/subscriptions.test.ts""], ""base_commit"": ""2edd48ab842000a1e51d12ab7f8d63ab3e492e68"", ""head_commit"": ""61a7d38b45960aefb2a167ed1719a87acffad7b4"", ""repo_url"": ""https://github.com/outline/outline/pull/8368"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8368"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-11T02:32:51.000Z"", ""patch"": ""diff --git a/app/actions/definitions/documents.tsx b/app/actions/definitions/documents.tsx\nindex 2b26305f01a5..5fc799518362 100644\n--- a/app/actions/definitions/documents.tsx\n+++ b/app/actions/definitions/documents.tsx\n@@ -358,7 +358,7 @@ export const unsubscribeDocument = createAction({\n \n     const document = stores.documents.get(activeDocumentId);\n \n-    await document?.unsubscribe(currentUserId);\n+    await document?.unsubscribe();\n \n     toast.success(t(\""Unsubscribed from document notifications\""));\n   },\n\ndiff --git a/app/menus/DocumentMenu.tsx b/app/menus/DocumentMenu.tsx\nindex f4022b83ce23..b992745a2234 100644\n--- a/app/menus/DocumentMenu.tsx\n+++ b/app/menus/DocumentMenu.tsx\n@@ -96,7 +96,7 @@ const MenuTrigger: React.FC<MenuTriggerProps> = ({ label, onTrigger }) => {\n   const { model: document, menuState } = useMenuContext<Document>();\n \n   const { data, loading, error, request } = useRequest(() =>\n-    subscriptions.fetchPage({\n+    subscriptions.fetchOne({\n       documentId: document.id,\n       event: \""documents.update\"",\n     })\n\ndiff --git a/app/models/Document.ts b/app/models/Document.ts\nindex 807ea76f493c..a77d1578c1b0 100644\n--- a/app/models/Document.ts\n+++ b/app/models/Document.ts\n@@ -307,9 +307,7 @@ export default class Document extends ArchivableModel implements Searchable {\n    */\n   @computed\n   get isSubscribed(): boolean {\n-    return !!this.store.rootStore.subscriptions.orderedData.find(\n-      (subscription) => subscription.documentId === this.id\n-    );\n+    return !!this.store.rootStore.subscriptions.getByDocumentId(this.id);\n   }\n \n   /**\n@@ -501,7 +499,7 @@ export default class Document extends ArchivableModel implements Searchable {\n    * @returns A promise that resolves when the subscription is destroyed.\n    */\n   @action\n-  unsubscribe = (userId: string) => this.store.unsubscribe(userId, this);\n+  unsubscribe = () => this.store.unsubscribe(this);\n \n   @action\n   view = () => {\n\ndiff --git a/app/stores/DocumentsStore.ts b/app/stores/DocumentsStore.ts\nindex 2c71e71f9896..fec4a1f3173d 100644\n--- a/app/stores/DocumentsStore.ts\n+++ b/app/stores/DocumentsStore.ts\n@@ -816,9 +816,9 @@ export default class DocumentsStore extends Store<Document> {\n       event: \""documents.update\"",\n     });\n \n-  unsubscribe = (userId: string, document: Document) => {\n-    const subscription = this.rootStore.subscriptions.orderedData.find(\n-      (s) => s.documentId === document.id && s.userId === userId\n+  unsubscribe = (document: Document) => {\n+    const subscription = this.rootStore.subscriptions.getByDocumentId(\n+      document.id\n     );\n \n     return subscription?.delete();\n\ndiff --git a/app/stores/SubscriptionsStore.ts b/app/stores/SubscriptionsStore.ts\nindex fd9a70077902..cc2867a93861 100644\n--- a/app/stores/SubscriptionsStore.ts\n+++ b/app/stores/SubscriptionsStore.ts\n@@ -1,4 +1,8 @@\n+import invariant from \""invariant\"";\n+import { action } from \""mobx\"";\n import Subscription from \""~/models/Subscription\"";\n+import { client } from \""~/utils/ApiClient\"";\n+import { AuthorizationError, NotFoundError } from \""~/utils/errors\"";\n import RootStore from \""./RootStore\"";\n import Store, { RPCAction } from \""./base/Store\"";\n \n@@ -8,4 +12,34 @@ export default class SubscriptionsStore extends Store<Subscription> {\n   constructor(rootStore: RootStore) {\n     super(rootStore, Subscription);\n   }\n+\n+  @action\n+  async fetchOne({ documentId, event }: { documentId: string; event: string }) {\n+    const subscription = this.getByDocumentId(documentId);\n+\n+    if (subscription) {\n+      return subscription;\n+    }\n+\n+    this.isFetching = true;\n+\n+    try {\n+      const res = await client.post(`/${this.apiEndpoint}.info`, {\n+        documentId,\n+        event,\n+      });\n+      invariant(res?.data, \""Data should be available\"");\n+      return this.add(res.data);\n+    } catch (err) {\n+      if (err instanceof AuthorizationError || err instanceof NotFoundError) {\n+        return;\n+      }\n+      throw err;\n+    } finally {\n+      this.isFetching = false;\n+    }\n+  }\n+\n+  getByDocumentId = (documentId: string): Subscription | undefined =>\n+    this.find({ documentId });\n }\n"", ""test_patch"": ""diff --git a/server/routes/api/subscriptions/subscriptions.test.ts b/server/routes/api/subscriptions/subscriptions.test.ts\nindex ec07da330f82..f8caf23e8d14 100644\n--- a/server/routes/api/subscriptions/subscriptions.test.ts\n+++ b/server/routes/api/subscriptions/subscriptions.test.ts\n@@ -202,6 +202,25 @@ describe(\""#subscriptions.info\"", () => {\n     expect(response0.data.documentId).toEqual(document0.id);\n   });\n \n+  it(\""should throw 404 if no subscription found\"", async () => {\n+    const author = await buildUser();\n+    const subscriber = await buildUser({ teamId: author.teamId });\n+    const document = await buildDocument({\n+      userId: author.id,\n+      teamId: author.teamId,\n+    });\n+\n+    const res = await server.post(\""/api/subscriptions.info\"", {\n+      body: {\n+        token: subscriber.getJwtToken(),\n+        documentId: document.id,\n+        event: \""documents.update\"",\n+      },\n+    });\n+\n+    expect(res.status).toEqual(404);\n+  });\n+\n   it(\""should not allow outsiders to gain info about a subscription\"", async () => {\n     const creator = await buildUser();\n     const subscriber = await buildUser({ teamId: creator.teamId });\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8345"", ""pr_id"": 8345, ""issue_id"": 8344, ""repo"": ""outline/outline"", ""problem_statement"": ""Flaky API test\nhttps://app.circleci.com/pipelines/github/outline/outline/21607/workflows/e963a6ad-092b-46da-ae84-3f14f7d164be/jobs/66408"", ""issue_word_count"": 17, ""test_files_count"": 1, ""non_test_files_count"": 0, ""pr_changed_files"": [""server/commands/subscriptionCreator.test.ts""], ""pr_changed_test_files"": [""server/commands/subscriptionCreator.test.ts""], ""base_commit"": ""aca6f55ea046a89c97350716de50949c470678a6"", ""head_commit"": ""6abc58df16580c477744a62ee26a14245d87272d"", ""repo_url"": ""https://github.com/outline/outline/pull/8345"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8345"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-06T23:22:24.000Z"", ""patch"": """", ""test_patch"": ""diff --git a/server/commands/subscriptionCreator.test.ts b/server/commands/subscriptionCreator.test.ts\nindex 9799f288a2d9..520b8de6cb69 100644\n--- a/server/commands/subscriptionCreator.test.ts\n+++ b/server/commands/subscriptionCreator.test.ts\n@@ -210,6 +210,7 @@ describe(\""subscriptionCreator\"", () => {\n       where: {\n         teamId: user.teamId,\n       },\n+      order: [[\""createdAt\"", \""ASC\""]],\n     });\n     expect(events.length).toEqual(3);\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8301"", ""pr_id"": 8301, ""issue_id"": 5713, ""repo"": ""outline/outline"", ""problem_statement"": ""Upload remote images to storage when pasting content into editor\n- During paste detect remote image urls\r\n- Kick off upload async\r\n- Replace urls in attributes when upload completes asyncronously\r\n\r\n### Discussed in https://github.com/outline/outline/discussions/5069\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **WarlockFish** March 19, 2023</sup>\r\n Sometimes, the articles are very good, and I want to import them into the outline. I can use the \""[Web Clipper](https://github.com/webclipper/web-clipper)\""  to quickly save text    to markdown file  and import the outline, but images cannot be quickly imported. Is there any way to quickly import text and images </div>"", ""issue_word_count"": 96, ""test_files_count"": 1, ""non_test_files_count"": 17, ""pr_changed_files"": [""app/components/Editor.tsx"", ""app/utils/files.ts"", ""plugins/webhooks/server/tasks/DeliverWebhookTask.ts"", ""server/queues/tasks/UploadAttachmentFromUrlTask.ts"", ""server/routes/api/attachments/attachments.ts"", ""server/routes/api/attachments/schema.ts"", ""server/storage/files/BaseStorage.ts"", ""server/types.ts"", ""shared/editor/commands/createAndInsertLink.ts"", ""shared/editor/commands/insertFiles.ts"", ""shared/editor/extensions/Mermaid.ts"", ""shared/editor/lib/FileHelper.ts"", ""shared/editor/plugins/UploadPlugin.ts"", ""shared/editor/queries/findChildren.ts"", ""shared/editor/queries/findCollapsedNodes.ts"", ""shared/editor/types/index.ts"", ""shared/utils/files.test.ts"", ""shared/utils/files.ts""], ""pr_changed_test_files"": [""shared/utils/files.test.ts""], ""base_commit"": ""5b11a0cc161e0f7bc3e86ee96f24d6b461f6bdb0"", ""head_commit"": ""6d9da8d5a0e586172ee980e05bbc39172d41179b"", ""repo_url"": ""https://github.com/outline/outline/pull/8301"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8301"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-31T01:24:08.000Z"", ""patch"": ""diff --git a/app/components/Editor.tsx b/app/components/Editor.tsx\nindex 6e7151fe28f5..4080fe44975f 100644\n--- a/app/components/Editor.tsx\n+++ b/app/components/Editor.tsx\n@@ -17,7 +17,7 @@ import useDictionary from \""~/hooks/useDictionary\"";\n import useEditorClickHandlers from \""~/hooks/useEditorClickHandlers\"";\n import useEmbeds from \""~/hooks/useEmbeds\"";\n import useStores from \""~/hooks/useStores\"";\n-import { uploadFile } from \""~/utils/files\"";\n+import { uploadFile, uploadFileFromUrl } from \""~/utils/files\"";\n import lazyWithRetry from \""~/utils/lazyWithRetry\"";\n \n const LazyLoadedEditor = lazyWithRetry(() => import(\""~/editor\""));\n@@ -49,11 +49,15 @@ function Editor(props: Props, ref: React.RefObject<SharedEditor> | null) {\n   const previousCommentIds = React.useRef<string[]>();\n \n   const handleUploadFile = React.useCallback(\n-    async (file: File) => {\n-      const result = await uploadFile(file, {\n+    async (file: File | string) => {\n+      const options = {\n         documentId: id,\n         preset: AttachmentPreset.DocumentAttachment,\n-      });\n+      };\n+      const result =\n+        file instanceof File\n+          ? await uploadFile(file, options)\n+          : await uploadFileFromUrl(file, options);\n       return result.url;\n     },\n     [id]\n\ndiff --git a/app/utils/files.ts b/app/utils/files.ts\nindex 6607a6b12dee..16b66a2c43f7 100644\n--- a/app/utils/files.ts\n+++ b/app/utils/files.ts\n@@ -14,6 +14,31 @@ type UploadOptions = {\n   onProgress?: (fractionComplete: number) => void;\n };\n \n+/**\n+ * Upload a file from a URL\n+ *\n+ * @param url The remote URL to download the file from\n+ * @param options The upload options\n+ * @returns The attachment object\n+ */\n+export const uploadFileFromUrl = async (\n+  url: string,\n+  options: UploadOptions\n+) => {\n+  const response = await client.post(\""/attachments.createFromUrl\"", {\n+    documentId: options.documentId,\n+    url,\n+  });\n+  return response.data;\n+};\n+\n+/**\n+ * Upload a file\n+ *\n+ * @param file The file to upload\n+ * @param options The upload options\n+ * @returns The attachment object\n+ */\n export const uploadFile = async (\n   file: File | Blob,\n   options: UploadOptions = {\n@@ -74,6 +99,12 @@ export const uploadFile = async (\n   return attachment;\n };\n \n+/**\n+ * Convert a data URL to a Blob\n+ *\n+ * @param dataURL The data URL to convert\n+ * @returns The Blob\n+ */\n export const dataUrlToBlob = (dataURL: string) => {\n   const blobBin = atob(dataURL.split(\"",\"")[1]);\n   const array = [];\n\ndiff --git a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\nindex 6e78f182a71b..23f6df14c0c8 100644\n--- a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n+++ b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n@@ -102,6 +102,7 @@ export default class DeliverWebhookTask extends BaseTask<Props> {\n       case \""api_keys.create\"":\n       case \""api_keys.delete\"":\n       case \""attachments.create\"":\n+      case \""attachments.update\"":\n       case \""attachments.delete\"":\n       case \""subscriptions.create\"":\n       case \""subscriptions.delete\"":\n\ndiff --git a/server/queues/tasks/UploadAttachmentFromUrlTask.ts b/server/queues/tasks/UploadAttachmentFromUrlTask.ts\nnew file mode 100644\nindex 000000000000..3cfbf0f82a8f\n--- /dev/null\n+++ b/server/queues/tasks/UploadAttachmentFromUrlTask.ts\n@@ -0,0 +1,51 @@\n+import { createContext } from \""@server/context\"";\n+import { Attachment } from \""@server/models\"";\n+import FileStorage from \""@server/storage/files\"";\n+import BaseTask, { TaskPriority } from \""./BaseTask\"";\n+\n+type Props = {\n+  /** The ID of the attachment */\n+  attachmentId: string;\n+  /** The remote URL to upload */\n+  url: string;\n+};\n+\n+/**\n+ * A task that uploads the provided url to a known attachment.\n+ */\n+export default class UploadAttachmentFromUrlTask extends BaseTask<Props> {\n+  public async perform(props: Props) {\n+    const attachment = await Attachment.findByPk(props.attachmentId, {\n+      rejectOnEmpty: true,\n+      include: [{ association: \""user\"" }],\n+    });\n+\n+    try {\n+      const res = await FileStorage.storeFromUrl(\n+        props.url,\n+        attachment.key,\n+        attachment.acl\n+      );\n+\n+      if (res?.url) {\n+        const ctx = createContext({ user: attachment.user });\n+        await attachment.updateWithCtx(ctx, {\n+          url: res.url,\n+          size: res.contentLength,\n+          contentType: res.contentType,\n+        });\n+      }\n+    } catch (err) {\n+      return { error: err.message };\n+    }\n+\n+    return {};\n+  }\n+\n+  public get options() {\n+    return {\n+      attempts: 3,\n+      priority: TaskPriority.Normal,\n+    };\n+  }\n+}\n\ndiff --git a/server/routes/api/attachments/attachments.ts b/server/routes/api/attachments/attachments.ts\nindex c978edba20ed..d2288c2151d5 100644\n--- a/server/routes/api/attachments/attachments.ts\n+++ b/server/routes/api/attachments/attachments.ts\n@@ -1,9 +1,14 @@\n import Router from \""koa-router\"";\n import { v4 as uuidv4 } from \""uuid\"";\n import { AttachmentPreset } from \""@shared/types\"";\n-import { bytesToHumanReadable } from \""@shared/utils/files\"";\n+import { bytesToHumanReadable, getFileNameFromUrl } from \""@shared/utils/files\"";\n import { AttachmentValidation } from \""@shared/validations\"";\n-import { AuthorizationError, ValidationError } from \""@server/errors\"";\n+import { createContext } from \""@server/context\"";\n+import {\n+  AuthorizationError,\n+  InvalidRequestError,\n+  ValidationError,\n+} from \""@server/errors\"";\n import auth from \""@server/middlewares/authentication\"";\n import { rateLimiter } from \""@server/middlewares/rateLimiter\"";\n import { transaction } from \""@server/middlewares/transaction\"";\n@@ -12,6 +17,8 @@ import { Attachment, Document } from \""@server/models\"";\n import AttachmentHelper from \""@server/models/helpers/AttachmentHelper\"";\n import { authorize } from \""@server/policies\"";\n import { presentAttachment } from \""@server/presenters\"";\n+import UploadAttachmentFromUrlTask from \""@server/queues/tasks/UploadAttachmentFromUrlTask\"";\n+import { sequelize } from \""@server/storage/database\"";\n import FileStorage from \""@server/storage/files\"";\n import BaseStorage from \""@server/storage/files/BaseStorage\"";\n import { APIContext } from \""@server/types\"";\n@@ -105,6 +112,76 @@ router.post(\n   }\n );\n \n+router.post(\n+  \""attachments.createFromUrl\"",\n+  rateLimiter(RateLimiterStrategy.TwentyFivePerMinute),\n+  auth(),\n+  validate(T.AttachmentsCreateFromUrlSchema),\n+  async (ctx: APIContext<T.AttachmentCreateFromUrlReq>) => {\n+    const { url, documentId, preset } = ctx.input.body;\n+    const { user, type } = ctx.state.auth;\n+\n+    if (preset !== AttachmentPreset.DocumentAttachment || !documentId) {\n+      throw ValidationError(\n+        \""Only document attachments can be created from a URL\""\n+      );\n+    }\n+\n+    const document = await Document.findByPk(documentId, {\n+      userId: user.id,\n+    });\n+    authorize(user, \""update\"", document);\n+\n+    const name = getFileNameFromUrl(url) ?? \""file\"";\n+    const modelId = uuidv4();\n+    const acl = AttachmentHelper.presetToAcl(preset);\n+    const key = AttachmentHelper.getKey({\n+      acl,\n+      id: modelId,\n+      name,\n+      userId: user.id,\n+    });\n+\n+    // Does not use transaction middleware, as attachment must be persisted\n+    // before the job is scheduled.\n+    const attachment = await sequelize.transaction(async (transaction) =>\n+      Attachment.createWithCtx(\n+        createContext({\n+          authType: type,\n+          user,\n+          ip: ctx.ip,\n+          transaction,\n+        }),\n+        {\n+          id: modelId,\n+          key,\n+          acl,\n+          size: 0,\n+          expiresAt: AttachmentHelper.presetToExpiry(preset),\n+          contentType: \""application/octet-stream\"",\n+          documentId,\n+          teamId: user.teamId,\n+          userId: user.id,\n+        }\n+      )\n+    );\n+\n+    const job = await UploadAttachmentFromUrlTask.schedule({\n+      attachmentId: attachment.id,\n+      url,\n+    });\n+\n+    const response = await job.finished();\n+    if (\""error\"" in response) {\n+      throw InvalidRequestError(response.error);\n+    }\n+\n+    ctx.body = {\n+      data: presentAttachment(attachment),\n+    };\n+  }\n+);\n+\n router.post(\n   \""attachments.delete\"",\n   auth(),\n\ndiff --git a/server/routes/api/attachments/schema.ts b/server/routes/api/attachments/schema.ts\nindex c01c20699d36..86a432a6eece 100644\n--- a/server/routes/api/attachments/schema.ts\n+++ b/server/routes/api/attachments/schema.ts\n@@ -26,6 +26,25 @@ export const AttachmentsCreateSchema = BaseSchema.extend({\n \n export type AttachmentCreateReq = z.infer<typeof AttachmentsCreateSchema>;\n \n+export const AttachmentsCreateFromUrlSchema = BaseSchema.extend({\n+  body: z.object({\n+    /** Attachment url */\n+    url: z.string(),\n+\n+    /** Id of the document to which the Attachment belongs */\n+    documentId: z.string().uuid().optional(),\n+\n+    /** Attachment type */\n+    preset: z\n+      .nativeEnum(AttachmentPreset)\n+      .default(AttachmentPreset.DocumentAttachment),\n+  }),\n+});\n+\n+export type AttachmentCreateFromUrlReq = z.infer<\n+  typeof AttachmentsCreateFromUrlSchema\n+>;\n+\n export const AttachmentDeleteSchema = BaseSchema.extend({\n   body: z.object({\n     /** Id of the attachment to be deleted */\n\ndiff --git a/server/storage/files/BaseStorage.ts b/server/storage/files/BaseStorage.ts\nindex ce0287ebc7e7..339262cc568d 100644\n--- a/server/storage/files/BaseStorage.ts\n+++ b/server/storage/files/BaseStorage.ts\n@@ -129,13 +129,15 @@ export default abstract class BaseStorage {\n    * @param key The path to store the file at\n    * @param acl The ACL to use\n    * @param init Optional fetch options to use\n+   * @param options Optional upload options\n    * @returns A promise that resolves when the file is uploaded\n    */\n   public async storeFromUrl(\n     url: string,\n     key: string,\n     acl: string,\n-    init?: RequestInit\n+    init?: RequestInit,\n+    options?: { maxUploadSize?: number }\n   ): Promise<\n     | {\n         url: string;\n@@ -162,7 +164,10 @@ export default abstract class BaseStorage {\n         const res = await fetch(url, {\n           follow: 3,\n           redirect: \""follow\"",\n-          size: env.FILE_STORAGE_UPLOAD_MAX_SIZE,\n+          size: Math.min(\n+            options?.maxUploadSize ?? Infinity,\n+            env.FILE_STORAGE_UPLOAD_MAX_SIZE\n+          ),\n           timeout: 10000,\n           ...init,\n         });\n\ndiff --git a/server/types.ts b/server/types.ts\nindex c0268975c763..7beda287b663 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -117,6 +117,10 @@ export type AttachmentEvent = BaseEvent<Attachment> &\n           source?: \""import\"";\n         };\n       }\n+    | {\n+        name: \""attachments.update\"";\n+        modelId: string;\n+      }\n     | {\n         name: \""attachments.delete\"";\n         modelId: string;\n\ndiff --git a/shared/editor/commands/createAndInsertLink.ts b/shared/editor/commands/createAndInsertLink.ts\ndeleted file mode 100644\nindex fa62326ec1c7..000000000000\n--- a/shared/editor/commands/createAndInsertLink.ts\n+++ /dev/null\n@@ -1,88 +0,0 @@\n-import { Node } from \""prosemirror-model\"";\n-import { EditorView } from \""prosemirror-view\"";\n-import { toast } from \""sonner\"";\n-import type { Dictionary } from \""~/hooks/useDictionary\"";\n-\n-function findPlaceholderLink(doc: Node, href: string) {\n-  let result: { pos: number; node: Node } | undefined;\n-\n-  doc.descendants((node: Node, pos = 0) => {\n-    // get text nodes\n-    if (node.type.name === \""text\"") {\n-      // get marks for text nodes\n-      node.marks.forEach((mark) => {\n-        // any of the marks links?\n-        if (mark.type.name === \""link\"") {\n-          // any of the links to other docs?\n-          if (mark.attrs.href === href) {\n-            result = { node, pos };\n-          }\n-        }\n-      });\n-\n-      return false;\n-    }\n-\n-    if (!node.content.size) {\n-      return false;\n-    }\n-\n-    return true;\n-  });\n-\n-  return result;\n-}\n-\n-const createAndInsertLink = async function (\n-  view: EditorView,\n-  title: string,\n-  href: string,\n-  options: {\n-    dictionary: Dictionary;\n-    nested?: boolean;\n-    onCreateLink: (title: string, nested?: boolean) => Promise<string>;\n-  }\n-) {\n-  const { dispatch, state } = view;\n-  const { onCreateLink } = options;\n-\n-  try {\n-    const url = await onCreateLink(title, options.nested);\n-    const result = findPlaceholderLink(view.state.doc, href);\n-\n-    if (!result) {\n-      return;\n-    }\n-\n-    dispatch(\n-      view.state.tr\n-        .removeMark(\n-          result.pos,\n-          result.pos + result.node.nodeSize,\n-          state.schema.marks.link\n-        )\n-        .addMark(\n-          result.pos,\n-          result.pos + result.node.nodeSize,\n-          state.schema.marks.link.create({ href: url })\n-        )\n-    );\n-  } catch (err) {\n-    const result = findPlaceholderLink(view.state.doc, href);\n-    if (!result) {\n-      return;\n-    }\n-\n-    dispatch(\n-      view.state.tr.removeMark(\n-        result.pos,\n-        result.pos + result.node.nodeSize,\n-        state.schema.marks.link\n-      )\n-    );\n-\n-    toast.error(options.dictionary.createLinkError);\n-  }\n-};\n-\n-export default createAndInsertLink;\n\ndiff --git a/shared/editor/commands/insertFiles.ts b/shared/editor/commands/insertFiles.ts\nindex 35e0f9c93317..21b1be342ef8 100644\n--- a/shared/editor/commands/insertFiles.ts\n+++ b/shared/editor/commands/insertFiles.ts\n@@ -16,7 +16,7 @@ export type Options = {\n   /** Set to true to replace any existing image at the users selection */\n   replaceExisting?: boolean;\n   /** Callback fired to upload a file */\n-  uploadFile?: (file: File) => Promise<string>;\n+  uploadFile?: (file: File | string) => Promise<string>;\n   /** Callback fired when the user starts a file upload */\n   onFileUploadStart?: () => void;\n   /** Callback fired when the user completes a file upload */\n\ndiff --git a/shared/editor/extensions/Mermaid.ts b/shared/editor/extensions/Mermaid.ts\nindex 33bf707f843e..be18366c5028 100644\n--- a/shared/editor/extensions/Mermaid.ts\n+++ b/shared/editor/extensions/Mermaid.ts\n@@ -13,7 +13,8 @@ import { Decoration, DecorationSet } from \""prosemirror-view\"";\n import { v4 as uuidv4 } from \""uuid\"";\n import { isCode } from \""../lib/isCode\"";\n import { isRemoteTransaction } from \""../lib/multiplayer\"";\n-import { findBlockNodes, NodeWithPos } from \""../queries/findChildren\"";\n+import { findBlockNodes } from \""../queries/findChildren\"";\n+import { NodeWithPos } from \""../types\"";\n \n type MermaidState = {\n   decorationSet: DecorationSet;\n\ndiff --git a/shared/editor/lib/FileHelper.ts b/shared/editor/lib/FileHelper.ts\nindex e11f94941fbc..93b2bb94a5fa 100644\n--- a/shared/editor/lib/FileHelper.ts\n+++ b/shared/editor/lib/FileHelper.ts\n@@ -21,6 +21,23 @@ export default class FileHelper {\n     return file.type.startsWith(\""video/\"");\n   }\n \n+  /**\n+   * Download a file from a URL and return it as a File object.\n+   *\n+   * @param url The URL to download the file from\n+   * @returns The downloaded file\n+   */\n+  static async getFileForUrl(url: string): Promise<File> {\n+    const response = await fetch(url);\n+    const blob = await response.blob();\n+    const fileName = (response.headers.get(\""content-disposition\"") || \""\"").split(\n+      \""filename=\""\n+    )[1];\n+    return new File([blob], fileName || \""file\"", {\n+      type: blob.type,\n+    });\n+  }\n+\n   /**\n    * Loads the dimensions of a video file.\n    *\n\ndiff --git a/shared/editor/plugins/UploadPlugin.ts b/shared/editor/plugins/UploadPlugin.ts\nindex c50ca3adf078..26c2e898c814 100644\n--- a/shared/editor/plugins/UploadPlugin.ts\n+++ b/shared/editor/plugins/UploadPlugin.ts\n@@ -1,8 +1,10 @@\n import { extension } from \""mime-types\"";\n+import { Node } from \""prosemirror-model\"";\n import { Plugin } from \""prosemirror-state\"";\n import { getDataTransferFiles, getDataTransferImage } from \""../../utils/files\"";\n import { fileNameFromUrl, isInternalUrl } from \""../../utils/urls\"";\n import insertFiles, { Options } from \""../commands/insertFiles\"";\n+import FileHelper from \""../lib/FileHelper\"";\n \n export class UploadPlugin extends Plugin {\n   constructor(options: Options) {\n@@ -96,6 +98,44 @@ export class UploadPlugin extends Plugin {\n             return false;\n           },\n         },\n+        transformPasted: (slice, view) => {\n+          // find any remote images in pasted slice, but leave it alone.\n+          const images: Node[] = [];\n+          slice.content.descendants((node) => {\n+            if (node.type.name === \""image\"" && !isInternalUrl(node.attrs.src)) {\n+              images.push(node);\n+            }\n+          });\n+\n+          // Upload each remote image to our storage and replace the src\n+          // with the new url and dimensions.\n+          void images.map(async (image) => {\n+            const url = await options.uploadFile?.(image.attrs.src);\n+\n+            if (url) {\n+              const file = await FileHelper.getFileForUrl(url);\n+              const dimensions = await FileHelper.getImageDimensions(file);\n+              const { tr } = view.state;\n+\n+              tr.doc.nodesBetween(0, tr.doc.nodeSize - 2, (node, pos) => {\n+                if (\n+                  node.type.name === \""image\"" &&\n+                  node.attrs.src === image.attrs.src\n+                ) {\n+                  tr.setNodeMarkup(pos, undefined, {\n+                    ...node.attrs,\n+                    ...dimensions,\n+                    src: url,\n+                  });\n+                }\n+              });\n+\n+              view.dispatch(tr);\n+            }\n+          });\n+\n+          return slice;\n+        },\n       },\n     });\n   }\n\ndiff --git a/shared/editor/queries/findChildren.ts b/shared/editor/queries/findChildren.ts\nindex c3757a1ae008..506cb5082856 100644\n--- a/shared/editor/queries/findChildren.ts\n+++ b/shared/editor/queries/findChildren.ts\n@@ -1,12 +1,8 @@\n import { Node } from \""prosemirror-model\"";\n+import { NodeWithPos } from \""../types\"";\n \n type Predicate = (node: Node) => boolean;\n \n-export type NodeWithPos = {\n-  pos: number;\n-  node: Node;\n-};\n-\n export function flatten(node: Node, descend = true): NodeWithPos[] {\n   if (!node) {\n     throw new Error('Invalid \""node\"" parameter');\n\ndiff --git a/shared/editor/queries/findCollapsedNodes.ts b/shared/editor/queries/findCollapsedNodes.ts\nindex ad70bd982193..7e0e9e8b5db3 100644\n--- a/shared/editor/queries/findCollapsedNodes.ts\n+++ b/shared/editor/queries/findCollapsedNodes.ts\n@@ -1,5 +1,6 @@\n import { Node } from \""prosemirror-model\"";\n-import { findBlockNodes, NodeWithPos } from \""./findChildren\"";\n+import { NodeWithPos } from \""../types\"";\n+import { findBlockNodes } from \""./findChildren\"";\n \n export function findCollapsedNodes(doc: Node): NodeWithPos[] {\n   const blocks = findBlockNodes(doc);\n\ndiff --git a/shared/editor/types/index.ts b/shared/editor/types/index.ts\nindex 8e8687ab9dd1..f9d868d4f208 100644\n--- a/shared/editor/types/index.ts\n+++ b/shared/editor/types/index.ts\n@@ -6,6 +6,11 @@ import * as React from \""react\"";\n import { DefaultTheme } from \""styled-components\"";\n import { Primitive } from \""utility-types\"";\n \n+export type NodeWithPos = {\n+  pos: number;\n+  node: ProsemirrorNode;\n+};\n+\n export type PlainTextSerializer = (node: ProsemirrorNode) => string;\n \n export enum TableLayout {\n\ndiff --git a/shared/utils/files.ts b/shared/utils/files.ts\nindex 43873d1a0d27..17bd53b5e785 100644\n--- a/shared/utils/files.ts\n+++ b/shared/utils/files.ts\n@@ -112,3 +112,20 @@ export function getEventFiles(\n     ? Array.prototype.slice.call(event.target.files)\n     : [];\n }\n+\n+/**\n+ * Get the likely filename from a URL\n+ *\n+ * @param url The URL to get the filename from\n+ * @returns The filename or null if it could not be determined\n+ */\n+export function getFileNameFromUrl(url: string) {\n+  try {\n+    const urlObj = new URL(url);\n+    const pathname = urlObj.pathname;\n+    const filename = pathname.substring(pathname.lastIndexOf(\""/\"") + 1);\n+    return filename;\n+  } catch (error) {\n+    return null;\n+  }\n+}\n"", ""test_patch"": ""diff --git a/shared/utils/files.test.ts b/shared/utils/files.test.ts\nindex fb4faa9fea4d..b9aa073a01c1 100644\n--- a/shared/utils/files.test.ts\n+++ b/shared/utils/files.test.ts\n@@ -1,7 +1,7 @@\n-import { bytesToHumanReadable } from \""./files\"";\n+import { bytesToHumanReadable, getFileNameFromUrl } from \""./files\"";\n \n describe(\""bytesToHumanReadable\"", () => {\n-  test(\""Outputs readable string\"", () => {\n+  it(\""outputs readable string\"", () => {\n     expect(bytesToHumanReadable(0)).toBe(\""0 Bytes\"");\n     expect(bytesToHumanReadable(0.0)).toBe(\""0 Bytes\"");\n     expect(bytesToHumanReadable(33)).toBe(\""33 Bytes\"");\n@@ -15,3 +15,20 @@ describe(\""bytesToHumanReadable\"", () => {\n     expect(bytesToHumanReadable(undefined)).toBe(\""0 Bytes\"");\n   });\n });\n+\n+describe(\""getFileNameFromUrl\"", () => {\n+  it(\""returns the filename from a URL\"", () => {\n+    expect(getFileNameFromUrl(\""https://example.com/file\"")).toBe(\""file\"");\n+    expect(getFileNameFromUrl(\""https://example.com/file.txt\"")).toBe(\""file.txt\"");\n+    expect(\n+      getFileNameFromUrl(\""https://example.com/file.txt?query=string\"")\n+    ).toBe(\""file.txt\"");\n+    expect(getFileNameFromUrl(\""https://example.com/file.txt#hash\"")).toBe(\n+      \""file.txt\""\n+    );\n+    expect(\n+      getFileNameFromUrl(\""https://example.com/file.txt?query=string#hash\"")\n+    ).toBe(\""file.txt\"");\n+    expect(getFileNameFromUrl(\""https://example.com/\"")).toBe(\""\"");\n+  });\n+});\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8297"", ""pr_id"": 8297, ""issue_id"": 8186, ""repo"": ""outline/outline"", ""problem_statement"": ""API key scopes\nAdd `scope` column to `ApiKey`. Scopes is a space separated list of endpoints (or prefixes) which are accessible to the key. For example, valid values:\r\n\r\n`documents`\r\n`documents.info`\r\n`documents.list documents.info`\r\n`collections.info documents`\r\n\r\n- Because the scope is a list of endpoint definitions it can be easily and cheaply checked as part of the authentication middleware.\r\n- An `ApiKey` with empty `scope` has no limitations, the same access as the user."", ""issue_word_count"": 71, ""test_files_count"": 2, ""non_test_files_count"": 11, ""pr_changed_files"": [""app/models/ApiKey.ts"", ""app/scenes/ApiKeyNew/index.tsx"", ""app/scenes/Settings/components/ApiKeyListItem.tsx"", ""server/middlewares/authentication.ts"", ""server/migrations/20250125031823-add-api-key-scopes.js"", ""server/models/ApiKey.test.ts"", ""server/models/ApiKey.ts"", ""server/policies/utils.ts"", ""server/presenters/apiKey.ts"", ""server/routes/api/apiKeys/apiKeys.test.ts"", ""server/routes/api/apiKeys/apiKeys.ts"", ""server/routes/api/apiKeys/schema.ts"", ""shared/i18n/locales/en_US/translation.json""], ""pr_changed_test_files"": [""server/models/ApiKey.test.ts"", ""server/routes/api/apiKeys/apiKeys.test.ts""], ""base_commit"": ""f1c5b145a4cdfc171fb259963390112f3600badb"", ""head_commit"": ""f8cd5f3e4b20a0269caeb251497f949985204de3"", ""repo_url"": ""https://github.com/outline/outline/pull/8297"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8297"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-29T00:50:22.000Z"", ""patch"": ""diff --git a/app/models/ApiKey.ts b/app/models/ApiKey.ts\nindex 6bb33992c259..fb73d2cf4354 100644\n--- a/app/models/ApiKey.ts\n+++ b/app/models/ApiKey.ts\n@@ -6,11 +6,16 @@ import Field from \""./decorators/Field\"";\n class ApiKey extends ParanoidModel {\n   static modelName = \""ApiKey\"";\n \n-  /** The user chosen name of the API key. */\n+  /** The human-readable name of this API key */\n   @Field\n   @observable\n   name: string;\n \n+  /** A list of scopes that this API key has access to. If empty, the key has full access. */\n+  @Field\n+  @observable\n+  scope?: string[];\n+\n   /** An optional datetime that the API key expires. */\n   @Field\n   @observable\n\ndiff --git a/app/scenes/ApiKeyNew/index.tsx b/app/scenes/ApiKeyNew/index.tsx\nindex a458cd58c893..3ce8faef1a12 100644\n--- a/app/scenes/ApiKeyNew/index.tsx\n+++ b/app/scenes/ApiKeyNew/index.tsx\n@@ -22,6 +22,7 @@ type Props = {\n \n function ApiKeyNew({ onSubmit }: Props) {\n   const [name, setName] = React.useState(\""\"");\n+  const [scope, setScope] = React.useState(\""\"");\n   const [expiryType, setExpiryType] = React.useState<ExpiryType>(\n     ExpiryType.Week\n   );\n@@ -51,6 +52,10 @@ function ApiKeyNew({ onSubmit }: Props) {\n     setName(event.target.value);\n   }, []);\n \n+  const handleScopeChange = React.useCallback((event) => {\n+    setScope(event.target.value);\n+  }, []);\n+\n   const handleExpiryTypeChange = React.useCallback((value: string) => {\n     const expiry = value as ExpiryType;\n     setExpiryType(expiry);\n@@ -70,6 +75,7 @@ function ApiKeyNew({ onSubmit }: Props) {\n         await apiKeys.create({\n           name,\n           expiresAt: expiresAt?.toISOString(),\n+          scope: scope ? scope.split(\"" \"") : undefined,\n         });\n         toast.success(\n           t(\n@@ -83,20 +89,16 @@ function ApiKeyNew({ onSubmit }: Props) {\n         setIsSaving(false);\n       }\n     },\n-    [t, name, expiresAt, onSubmit, apiKeys]\n+    [t, name, scope, expiresAt, onSubmit, apiKeys]\n   );\n \n   return (\n     <form onSubmit={handleSubmit}>\n-      <Text as=\""p\"" type=\""secondary\"">\n-        {t(\n-          `Name your key something that will help you to remember it's use in the future, for example \""local development\"" or \""continuous integration\"".`\n-        )}\n-      </Text>\n       <Flex column>\n         <Input\n           type=\""text\""\n           label={t(\""Name\"")}\n+          placeholder={t(\""Development\"")}\n           onChange={handleNameChange}\n           value={name}\n           minLength={ApiKeyValidation.minNameLength}\n@@ -105,6 +107,20 @@ function ApiKeyNew({ onSubmit }: Props) {\n           autoFocus\n           flex\n         />\n+        <Input\n+          type=\""text\""\n+          label={t(\""Scopes\"")}\n+          placeholder=\""documents.info\""\n+          onChange={handleScopeChange}\n+          value={scope}\n+          flex\n+        />\n+        <Text type=\""secondary\"" size=\""small\"" as=\""p\"">\n+          {t(\n+            \""Space-separated scopes restrict the access of this API key to specific parts of the API. Leave blank for full access\""\n+          )}\n+          .\n+        </Text>\n         <Flex align=\""center\"" gap={16}>\n           <StyledExpirySelect\n             ariaLabel={t(\""Expiration\"")}\n\ndiff --git a/app/scenes/Settings/components/ApiKeyListItem.tsx b/app/scenes/Settings/components/ApiKeyListItem.tsx\nindex eb4096f32f5b..0eee5a96608d 100644\n--- a/app/scenes/Settings/components/ApiKeyListItem.tsx\n+++ b/app/scenes/Settings/components/ApiKeyListItem.tsx\n@@ -10,6 +10,7 @@ import Flex from \""~/components/Flex\"";\n import ListItem from \""~/components/List/Item\"";\n import Text from \""~/components/Text\"";\n import Time from \""~/components/Time\"";\n+import Tooltip from \""~/components/Tooltip\"";\n import useCurrentUser from \""~/hooks/useCurrentUser\"";\n import useUserLocale from \""~/hooks/useUserLocale\"";\n import ApiKeyMenu from \""~/menus/ApiKeyMenu\"";\n@@ -35,7 +36,7 @@ const ApiKeyListItem = ({ apiKey }: Props) => {\n         &middot;{\"" \""}\n       </Text>\n       {apiKey.lastActiveAt && (\n-        <Text type={\""tertiary\""}>\n+        <Text type=\""tertiary\"">\n           {t(\""Last used\"")} <Time dateTime={apiKey.lastActiveAt} addSuffix />{\"" \""}\n           &middot;{\"" \""}\n         </Text>\n@@ -44,7 +45,20 @@ const ApiKeyListItem = ({ apiKey }: Props) => {\n         {apiKey.expiresAt\n           ? dateToExpiry(apiKey.expiresAt, t, userLocale)\n           : t(\""No expiry\"")}\n+        {apiKey.scope && <> &middot; </>}\n       </Text>\n+      {apiKey.scope && (\n+        <Tooltip\n+          content={apiKey.scope.map((s) => (\n+            <>\n+              {s}\n+              <br />\n+            </>\n+          ))}\n+        >\n+          <Text type=\""tertiary\"">{t(\""Restricted scope\"")}</Text>\n+        </Tooltip>\n+      )}\n     </>\n   );\n \n\ndiff --git a/server/middlewares/authentication.ts b/server/middlewares/authentication.ts\nindex 506e83b3345d..bc3fa6c3bc0e 100644\n--- a/server/middlewares/authentication.ts\n+++ b/server/middlewares/authentication.ts\n@@ -80,7 +80,13 @@ export default function auth(options: AuthenticationOptions = {}) {\n         }\n \n         if (apiKey.expiresAt && apiKey.expiresAt < new Date()) {\n-          throw AuthenticationError(\""Invalid API key\"");\n+          throw AuthenticationError(\""API key is expired\"");\n+        }\n+\n+        if (!apiKey.canAccess(ctx.request.url)) {\n+          throw AuthenticationError(\n+            \""API key does not have access to this resource\""\n+          );\n         }\n \n         user = await User.findByPk(apiKey.userId, {\n\ndiff --git a/server/migrations/20250125031823-add-api-key-scopes.js b/server/migrations/20250125031823-add-api-key-scopes.js\nnew file mode 100644\nindex 000000000000..f1f9a6d1803b\n--- /dev/null\n+++ b/server/migrations/20250125031823-add-api-key-scopes.js\n@@ -0,0 +1,19 @@\n+\""use strict\"";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.addColumn(\""apiKeys\"", \""scope\"", {\n+        type: Sequelize.ARRAY(Sequelize.STRING),\n+        allowNull: true,\n+      }, { transaction });\n+    });\n+  },\n+\n+  async down(queryInterface) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.removeColumn(\""apiKeys\"", \""scope\"", { transaction });\n+    });\n+  },\n+};\n\ndiff --git a/server/models/ApiKey.ts b/server/models/ApiKey.ts\nindex a3159d20dcb0..e9ab31c18343 100644\n--- a/server/models/ApiKey.ts\n+++ b/server/models/ApiKey.ts\n@@ -1,4 +1,5 @@\n import crypto from \""crypto\"";\n+import { Matches } from \""class-validator\"";\n import { subMinutes } from \""date-fns\"";\n import randomstring from \""randomstring\"";\n import { InferAttributes, InferCreationAttributes, Op } from \""sequelize\"";\n@@ -31,6 +32,7 @@ class ApiKey extends ParanoidModel<\n \n   static eventNamespace = \""api_keys\"";\n \n+  /** The human-readable name of this API key */\n   @Length({\n     min: ApiKeyValidation.minNameLength,\n     max: ApiKeyValidation.maxNameLength,\n@@ -39,6 +41,13 @@ class ApiKey extends ParanoidModel<\n   @Column\n   name: string;\n \n+  /** A space-separated list of scopes that this API key has access to */\n+  @Matches(/[\\/\\.\\w\\s]*/, {\n+    each: true,\n+  })\n+  @Column(DataType.ARRAY(DataType.STRING))\n+  scope: string[] | null;\n+\n   /** @deprecated The plain text value of the API key, removed soon. */\n   @Unique\n   @Column\n@@ -59,10 +68,12 @@ class ApiKey extends ParanoidModel<\n   @SkipChangeset\n   last4: string;\n \n+  /** The date and time when this API key will expire */\n   @IsDate\n   @Column\n   expiresAt: Date | null;\n \n+  /** The date and time when this API key was last used */\n   @IsDate\n   @Column\n   @SkipChangeset\n@@ -156,6 +167,27 @@ class ApiKey extends ParanoidModel<\n \n     return this.save({ silent: true });\n   };\n+\n+  /** Checks if the API key has access to the given path */\n+  canAccess = (path: string) => {\n+    if (!this.scope) {\n+      return true;\n+    }\n+\n+    const resource = path.split(\""/\"").pop() ?? \""\"";\n+    const [namespace, method] = resource.split(\"".\"");\n+\n+    return this.scope.some((scope) => {\n+      const [scopeNamespace, scopeMethod] = scope\n+        .replace(\""/api/\"", \""\"")\n+        .split(\"".\"");\n+      return (\n+        scope.startsWith(\""/api/\"") &&\n+        (namespace === scopeNamespace || scopeNamespace === \""*\"") &&\n+        (method === scopeMethod || scopeMethod === \""*\"")\n+      );\n+    });\n+  };\n }\n \n export default ApiKey;\n\ndiff --git a/server/policies/utils.ts b/server/policies/utils.ts\nindex c7f97a0672fb..682639c93faf 100644\n--- a/server/policies/utils.ts\n+++ b/server/policies/utils.ts\n@@ -1,5 +1,4 @@\n import env from \""@server/env\"";\n-import { IncorrectEditionError } from \""@server/errors\"";\n import { User, Team } from \""@server/models\"";\n import Model from \""@server/models/base/Model\"";\n \n@@ -97,9 +96,7 @@ export function isTeamMutable(_actor: User, _model?: Model | null) {\n  */\n export function isCloudHosted() {\n   if (!env.isCloudHosted) {\n-    throw IncorrectEditionError(\n-      \""Functionality is not available in this edition\""\n-    );\n+    return false;\n   }\n   return true;\n }\n\ndiff --git a/server/presenters/apiKey.ts b/server/presenters/apiKey.ts\nindex 943cf78cb83a..cb73f8754f37 100644\n--- a/server/presenters/apiKey.ts\n+++ b/server/presenters/apiKey.ts\n@@ -5,6 +5,7 @@ export default function presentApiKey(apiKey: ApiKey) {\n     id: apiKey.id,\n     userId: apiKey.userId,\n     name: apiKey.name,\n+    scope: apiKey.scope,\n     value: apiKey.value,\n     last4: apiKey.last4,\n     createdAt: apiKey.createdAt,\n\ndiff --git a/server/routes/api/apiKeys/apiKeys.ts b/server/routes/api/apiKeys/apiKeys.ts\nindex a694c42c8874..a1ae85db685c 100644\n--- a/server/routes/api/apiKeys/apiKeys.ts\n+++ b/server/routes/api/apiKeys/apiKeys.ts\n@@ -19,7 +19,7 @@ router.post(\n   validate(T.APIKeysCreateSchema),\n   transaction(),\n   async (ctx: APIContext<T.APIKeysCreateReq>) => {\n-    const { name, expiresAt } = ctx.input.body;\n+    const { name, scope, expiresAt } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n     authorize(user, \""createApiKey\"", user.team);\n@@ -28,6 +28,7 @@ router.post(\n       name,\n       userId: user.id,\n       expiresAt,\n+      scope: scope?.map((s) => (s.startsWith(\""/api/\"") ? s : `/api/${s}`)),\n     });\n \n     ctx.body = {\n\ndiff --git a/server/routes/api/apiKeys/schema.ts b/server/routes/api/apiKeys/schema.ts\nindex a26600deb9af..746de0f7810d 100644\n--- a/server/routes/api/apiKeys/schema.ts\n+++ b/server/routes/api/apiKeys/schema.ts\n@@ -7,6 +7,8 @@ export const APIKeysCreateSchema = BaseSchema.extend({\n     name: z.string(),\n     /** API Key expiry date */\n     expiresAt: z.coerce.date().optional(),\n+    /** A list of scopes that this API key has access to */\n+    scope: z.array(z.string()).optional(),\n   }),\n });\n \n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 59b5574152cb..475905538eac 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -570,7 +570,8 @@\n   \""invited you to\"": \""invited you to\"",\n   \""Choose a date\"": \""Choose a date\"",\n   \""API key created. Please copy the value now as it will not be shown again.\"": \""API key created. Please copy the value now as it will not be shown again.\"",\n-  \""Name your key something that will help you to remember it's use in the future, for example \\\""local development\\\"" or \\\""continuous integration\\\"".\"": \""Name your key something that will help you to remember it's use in the future, for example \\\""local development\\\"" or \\\""continuous integration\\\"".\"",\n+  \""Scopes\"": \""Scopes\"",\n+  \""Space-separated scopes restrict the access of this API key to specific parts of the API. Leave blank for full access\"": \""Space-separated scopes restrict the access of this API key to specific parts of the API. Leave blank for full access\"",\n   \""Expiration\"": \""Expiration\"",\n   \""Never expires\"": \""Never expires\"",\n   \""7 days\"": \""7 days\"",\n@@ -828,6 +829,7 @@\n   \""by {{ name }}\"": \""by {{ name }}\"",\n   \""Last used\"": \""Last used\"",\n   \""No expiry\"": \""No expiry\"",\n+  \""Restricted scope\"": \""Restricted scope\"",\n   \""API key copied to clipboard\"": \""API key copied to clipboard\"",\n   \""Copied\"": \""Copied\"",\n   \""Revoking\"": \""Revoking\"",\n"", ""test_patch"": ""diff --git a/server/models/ApiKey.test.ts b/server/models/ApiKey.test.ts\nindex 98b36c85ba3c..e783bcd16959 100644\n--- a/server/models/ApiKey.test.ts\n+++ b/server/models/ApiKey.test.ts\n@@ -4,26 +4,26 @@ import ApiKey from \""./ApiKey\"";\n \n describe(\""#ApiKey\"", () => {\n   describe(\""match\"", () => {\n-    test(\""should match an API secret\"", async () => {\n+    it(\""should match an API secret\"", async () => {\n       const apiKey = await buildApiKey();\n       expect(ApiKey.match(apiKey.value!)).toBe(true);\n       expect(ApiKey.match(`${randomstring.generate(38)}`)).toBe(true);\n     });\n \n-    test(\""should not match non secrets\"", async () => {\n+    it(\""should not match non secrets\"", async () => {\n       expect(ApiKey.match(\""123\"")).toBe(false);\n       expect(ApiKey.match(\""1234567890\"")).toBe(false);\n     });\n   });\n \n   describe(\""lastActiveAt\"", () => {\n-    test(\""should update lastActiveAt\"", async () => {\n+    it(\""should update lastActiveAt\"", async () => {\n       const apiKey = await buildApiKey();\n       await apiKey.updateActiveAt();\n       expect(apiKey.lastActiveAt).toBeTruthy();\n     });\n \n-    test(\""should not update lastActiveAt within 5 minutes\"", async () => {\n+    it(\""should not update lastActiveAt within 5 minutes\"", async () => {\n       const apiKey = await buildApiKey();\n       await apiKey.updateActiveAt();\n       expect(apiKey.lastActiveAt).toBeTruthy();\n@@ -35,7 +35,7 @@ describe(\""#ApiKey\"", () => {\n   });\n \n   describe(\""findByToken\"", () => {\n-    test(\""should find by hash\"", async () => {\n+    it(\""should find by hash\"", async () => {\n       const apiKey = await buildApiKey({\n         name: \""Dev\"",\n       });\n@@ -44,4 +44,62 @@ describe(\""#ApiKey\"", () => {\n       expect(found?.last4).toEqual(apiKey.value!.slice(-4));\n     });\n   });\n+\n+  describe(\""canAccess\"", () => {\n+    it(\""should return true for all resources if no scope\"", async () => {\n+      const apiKey = await buildApiKey({\n+        name: \""Dev\"",\n+      });\n+\n+      expect(apiKey.canAccess(\""/api/documents.info\"")).toBe(true);\n+      expect(apiKey.canAccess(\""/api/collections.create\"")).toBe(true);\n+      expect(apiKey.canAccess(\""/api/apiKeys.list\"")).toBe(true);\n+    });\n+\n+    it(\""should return false if no matching scope\"", async () => {\n+      const apiKey = await buildApiKey({\n+        name: \""Dev\"",\n+        scope: [\""/api/documents.info\""],\n+      });\n+\n+      expect(apiKey.canAccess(\""/api/documents.info\"")).toBe(true);\n+      expect(apiKey.canAccess(\""/api/collections.create\"")).toBe(false);\n+      expect(apiKey.canAccess(\""/api/apiKeys.list\"")).toBe(false);\n+    });\n+\n+    it(\""should allow wildcard methods\"", async () => {\n+      const apiKey = await buildApiKey({\n+        name: \""Dev\"",\n+        scope: [\""/api/documents.*\""],\n+      });\n+\n+      expect(apiKey.canAccess(\""/api/documents.info\"")).toBe(true);\n+      expect(apiKey.canAccess(\""/api/documents.create\"")).toBe(true);\n+      expect(apiKey.canAccess(\""/api/collections.create\"")).toBe(false);\n+    });\n+\n+    it(\""should allow wildcard namespaces\"", async () => {\n+      const apiKey = await buildApiKey({\n+        name: \""Dev\"",\n+        scope: [\""/api/*.info\""],\n+      });\n+\n+      expect(apiKey.canAccess(\""/api/documents.info\"")).toBe(true);\n+      expect(apiKey.canAccess(\""/api/documents.create\"")).toBe(false);\n+      expect(apiKey.canAccess(\""/api/collections.create\"")).toBe(false);\n+    });\n+\n+    it(\""should allow multiple scopes\"", async () => {\n+      const apiKey = await buildApiKey({\n+        name: \""Dev\"",\n+        scope: [\""/api/*.info\"", \""/api/collections.list\""],\n+      });\n+\n+      expect(apiKey.canAccess(\""/api/shares.info\"")).toBe(true);\n+      expect(apiKey.canAccess(\""/api/documents.info\"")).toBe(true);\n+      expect(apiKey.canAccess(\""/api/collections.list\"")).toBe(true);\n+      expect(apiKey.canAccess(\""/api/documents.create\"")).toBe(false);\n+      expect(apiKey.canAccess(\""/api/collections.create\"")).toBe(false);\n+    });\n+  });\n });\n\ndiff --git a/server/routes/api/apiKeys/apiKeys.test.ts b/server/routes/api/apiKeys/apiKeys.test.ts\nindex 42cc5742b801..b20b82be40e2 100644\n--- a/server/routes/api/apiKeys/apiKeys.test.ts\n+++ b/server/routes/api/apiKeys/apiKeys.test.ts\n@@ -40,6 +40,27 @@ describe(\""#apiKeys.create\"", () => {\n     expect(body.data.lastActiveAt).toBeNull();\n   });\n \n+  it(\""should allow creating an api key with scopes\"", async () => {\n+    const user = await buildUser();\n+\n+    const res = await server.post(\""/api/apiKeys.create\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        name: \""My API Key\"",\n+        scope: [\""/api/documents.list\"", \""*.info\"", \""users.*\""],\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.name).toEqual(\""My API Key\"");\n+    expect(body.data.scope).toEqual([\n+      \""/api/documents.list\"",\n+      \""/api/*.info\"",\n+      \""/api/users.*\"",\n+    ]);\n+  });\n+\n   it(\""should require authentication\"", async () => {\n     const res = await server.post(\""/api/apiKeys.create\"");\n     expect(res.status).toEqual(401);\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8274"", ""pr_id"": 8274, ""issue_id"": 8272, ""repo"": ""outline/outline"", ""problem_statement"": ""`text` and `title` should take precedence when passing `templateId` to `documents.create`\n> if I add a templateId at create time, it works too, but the title is the one of the template, not the one in title data.\r\n\r\nThis is a bug, the passed data should take precedence. In the meantime if you want to workaround it then you would have to read the template separately and apply in your code before POSTing.\r\n\r\n_Originally posted by @tommoor in https://github.com/outline/outline/discussions/8268#discussioncomment-11909751_"", ""issue_word_count"": 75, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""server/commands/documentCreator.ts"", ""server/routes/api/documents/documents.test.ts"", ""server/routes/api/documents/documents.ts"", ""server/routes/api/documents/schema.ts""], ""pr_changed_test_files"": [""server/routes/api/documents/documents.test.ts""], ""base_commit"": ""4cc0beb90d98f9d039f2ac6081a8ec7354ac2aa0"", ""head_commit"": ""de8defa0d9f6182310d3c4b423d394806d850a6f"", ""repo_url"": ""https://github.com/outline/outline/pull/8274"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8274"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-22T13:41:19.000Z"", ""patch"": ""diff --git a/server/commands/documentCreator.ts b/server/commands/documentCreator.ts\nindex e90f91f5c877..fe4bfa3ce0ac 100644\n--- a/server/commands/documentCreator.ts\n+++ b/server/commands/documentCreator.ts\n@@ -35,8 +35,8 @@ type Props = Optional<\n };\n \n export default async function documentCreator({\n-  title = \""\"",\n-  text = \""\"",\n+  title,\n+  text,\n   icon,\n   color,\n   state,\n@@ -101,14 +101,20 @@ export default async function documentCreator({\n       fullWidth: templateDocument ? templateDocument.fullWidth : fullWidth,\n       icon: templateDocument ? templateDocument.icon : icon,\n       color: templateDocument ? templateDocument.color : color,\n-      title: TextHelper.replaceTemplateVariables(\n-        templateDocument ? templateDocument.title : title,\n-        user\n-      ),\n-      text: TextHelper.replaceTemplateVariables(\n-        templateDocument ? templateDocument.text : text,\n-        user\n-      ),\n+      title:\n+        title ??\n+        (templateDocument\n+          ? template\n+            ? templateDocument.title\n+            : TextHelper.replaceTemplateVariables(templateDocument.title, user)\n+          : \""\""),\n+      text:\n+        text ??\n+        (templateDocument\n+          ? template\n+            ? templateDocument.text\n+            : TextHelper.replaceTemplateVariables(templateDocument.text, user)\n+          : \""\""),\n       content: templateDocument\n         ? ProsemirrorHelper.replaceTemplateVariables(\n             await DocumentHelper.toJSON(templateDocument),\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex a2af629c7828..592edf29f4c2 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -6,6 +6,7 @@ import JSZip from \""jszip\"";\n import Router from \""koa-router\"";\n import escapeRegExp from \""lodash/escapeRegExp\"";\n import has from \""lodash/has\"";\n+import isNil from \""lodash/isNil\"";\n import remove from \""lodash/remove\"";\n import uniq from \""lodash/uniq\"";\n import mime from \""mime-types\"";\n@@ -1644,7 +1645,9 @@ router.post(\n     const document = await documentCreator({\n       id,\n       title,\n-      text: await TextHelper.replaceImagesWithAttachments(ctx, text, user),\n+      text: !isNil(text)\n+        ? await TextHelper.replaceImagesWithAttachments(ctx, text, user)\n+        : text,\n       icon,\n       color,\n       createdAt,\n\ndiff --git a/server/routes/api/documents/schema.ts b/server/routes/api/documents/schema.ts\nindex ee9043cb3dff..f8f97421cf38 100644\n--- a/server/routes/api/documents/schema.ts\n+++ b/server/routes/api/documents/schema.ts\n@@ -331,10 +331,10 @@ export const DocumentsCreateSchema = BaseSchema.extend({\n     id: z.string().uuid().optional(),\n \n     /** Document title */\n-    title: z.string().default(\""\""),\n+    title: z.string().optional(),\n \n     /** Document text */\n-    text: z.string().default(\""\""),\n+    text: z.string().optional(),\n \n     /** Icon displayed alongside doc title */\n     icon: zodIconType().optional(),\n"", ""test_patch"": ""diff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex 14ebc2d91a25..d43f786372cf 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -6,6 +6,7 @@ import {\n   StatusFilter,\n   UserRole,\n } from \""@shared/types\"";\n+import { TextHelper } from \""@shared/utils/TextHelper\"";\n import { createContext } from \""@server/context\"";\n import {\n   Document,\n@@ -3357,6 +3358,127 @@ describe(\""#documents.import\"", () => {\n });\n \n describe(\""#documents.create\"", () => {\n+  it(\""should replace template variables when a doc is created from a template\"", async () => {\n+    const user = await buildUser();\n+    const template = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      template: true,\n+      title: \""template title\"",\n+      text: \""Created by user {author} on {date}\"",\n+    });\n+    const res = await server.post(\""/api/documents.create\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        templateId: template.id,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.title).toEqual(\n+      TextHelper.replaceTemplateVariables(template.title, user)\n+    );\n+    expect(body.data.text).toEqual(\n+      TextHelper.replaceTemplateVariables(template.text, user)\n+    );\n+  });\n+\n+  it(\""should retain template variables when a template is created from another template\"", async () => {\n+    const user = await buildUser();\n+    const template = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      template: true,\n+      title: \""template title\"",\n+      text: \""Created by user {author} on {date}\"",\n+    });\n+    const res = await server.post(\""/api/documents.create\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        templateId: template.id,\n+        template: true,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.title).toEqual(template.title);\n+    expect(body.data.text).toEqual(template.text);\n+  });\n+\n+  it(\""should create a document with empty title if no title is explicitly passed\"", async () => {\n+    const user = await buildUser();\n+    const res = await server.post(\""/api/documents.create\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        text: \""hello\"",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.title).toEqual(\""\"");\n+  });\n+\n+  it(\""should use template title when doc is supposed to be created using the template and title is not explicitly passed\"", async () => {\n+    const user = await buildUser();\n+    const template = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      template: true,\n+      title: \""template title\"",\n+      text: \""template text\"",\n+    });\n+    const res = await server.post(\""/api/documents.create\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        templateId: template.id,\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.title).toEqual(template.title);\n+    expect(body.data.text).toEqual(template.text);\n+  });\n+\n+  it(\""should override template title when doc title is explicitly passed\"", async () => {\n+    const user = await buildUser();\n+    const template = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      template: true,\n+      title: \""template title\"",\n+    });\n+    const res = await server.post(\""/api/documents.create\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        templateId: template.id,\n+        title: \""doc title\"",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.title).toEqual(\""doc title\"");\n+  });\n+\n+  it(\""should override template text when doc text is explicitly passed\"", async () => {\n+    const user = await buildUser();\n+    const template = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+      template: true,\n+      text: \""template text\"",\n+    });\n+    const res = await server.post(\""/api/documents.create\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        templateId: template.id,\n+        text: \""doc text\"",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.text).toEqual(\""doc text\"");\n+  });\n+\n   it(\""should fail for invalid collectionId\"", async () => {\n     const user = await buildUser();\n     const res = await server.post(\""/api/documents.create\"", {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8263"", ""pr_id"": 8263, ""issue_id"": 8239, ""repo"": ""outline/outline"", ""problem_statement"": ""Notify the group members when a group is added to a collection\nSame as adding groups to a document, we should notify the members when the group is provided access to a collection."", ""issue_word_count"": 21, ""test_files_count"": 2, ""non_test_files_count"": 13, ""pr_changed_files"": [""server/emails/templates/DocumentSharedEmail.tsx"", ""server/migrations/20250225153529-add-notification-membershipId.js"", ""server/models/Notification.ts"", ""server/queues/processors/EmailsProcessor.ts"", ""server/queues/tasks/CommentCreatedNotificationsTask.ts"", ""server/queues/tasks/CommentUpdatedNotificationsTask.ts"", ""server/queues/tasks/DocumentAddGroupNotificationsTask.ts"", ""server/queues/tasks/DocumentAddUserNotificationsTask.ts"", ""server/queues/tasks/DocumentPublishedNotificationsTask.ts"", ""server/queues/tasks/RevisionCreatedNotificationsTask.ts"", ""server/test/factories.ts"", ""server/types.ts"", ""server/utils/permissions.test.ts"", ""server/utils/permissions.ts"", ""server/utils/policies.ts""], ""pr_changed_test_files"": [""server/test/factories.ts"", ""server/utils/permissions.test.ts""], ""base_commit"": ""499392c1140c954021bc960c5c741693cc640eb7"", ""head_commit"": ""7f6b25212d0c0be701f8cb75c16155b6a5660028"", ""repo_url"": ""https://github.com/outline/outline/pull/8263"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8263"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-05T01:56:44.000Z"", ""patch"": ""diff --git a/server/emails/templates/DocumentSharedEmail.tsx b/server/emails/templates/DocumentSharedEmail.tsx\nindex 337c9ba6c71a..872418746ab1 100644\n--- a/server/emails/templates/DocumentSharedEmail.tsx\n+++ b/server/emails/templates/DocumentSharedEmail.tsx\n@@ -1,6 +1,6 @@\n import * as React from \""react\"";\n import { DocumentPermission } from \""@shared/types\"";\n-import { Document, UserMembership } from \""@server/models\"";\n+import { Document, GroupMembership, UserMembership } from \""@server/models\"";\n import BaseEmail, { EmailMessageCategory, EmailProps } from \""./BaseEmail\"";\n import Body from \""./components/Body\"";\n import Button from \""./components/Button\"";\n@@ -11,13 +11,14 @@ import Heading from \""./components/Heading\"";\n type InputProps = EmailProps & {\n   userId: string;\n   documentId: string;\n+  membershipId?: string;\n   actorName: string;\n   teamUrl: string;\n };\n \n type BeforeSend = {\n   document: Document;\n-  membership: UserMembership;\n+  membership: UserMembership | GroupMembership;\n };\n \n type Props = InputProps & BeforeSend;\n@@ -33,18 +34,20 @@ export default class DocumentSharedEmail extends BaseEmail<\n     return EmailMessageCategory.Notification;\n   }\n \n-  protected async beforeSend({ documentId, userId }: InputProps) {\n+  protected async beforeSend({ documentId, membershipId }: InputProps) {\n+    if (!membershipId) {\n+      return false;\n+    }\n+\n     const document = await Document.unscoped().findByPk(documentId);\n     if (!document) {\n       return false;\n     }\n \n-    const membership = await UserMembership.findOne({\n-      where: {\n-        documentId,\n-        userId,\n-      },\n-    });\n+    const membership =\n+      (await UserMembership.findByPk(membershipId)) ??\n+      (await GroupMembership.findByPk(membershipId));\n+\n     if (!membership) {\n       return false;\n     }\n\ndiff --git a/server/migrations/20250225153529-add-notification-membershipId.js b/server/migrations/20250225153529-add-notification-membershipId.js\nnew file mode 100644\nindex 000000000000..caea15f921a6\n--- /dev/null\n+++ b/server/migrations/20250225153529-add-notification-membershipId.js\n@@ -0,0 +1,14 @@\n+\""use strict\"";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.addColumn(\""notifications\"", \""membershipId\"", {\n+      type: Sequelize.UUID,\n+    });\n+  },\n+\n+  async down(queryInterface, Sequelize) {\n+    await queryInterface.removeColumn(\""notifications\"", \""membershipId\"");\n+  },\n+};\n\ndiff --git a/server/models/Notification.ts b/server/models/Notification.ts\nindex ee6007705b3a..225e2dbd00eb 100644\n--- a/server/models/Notification.ts\n+++ b/server/models/Notification.ts\n@@ -177,6 +177,10 @@ class Notification extends Model<\n   @Column(DataType.UUID)\n   teamId: string;\n \n+  @AllowNull\n+  @Column(DataType.UUID)\n+  membershipId: string;\n+\n   @AfterCreate\n   static async createEvent(\n     model: Notification,\n@@ -191,6 +195,7 @@ class Notification extends Model<\n       documentId: model.documentId,\n       collectionId: model.collectionId,\n       actorId: model.actorId,\n+      membershipId: model.membershipId,\n     };\n \n     if (options.transaction) {\n\ndiff --git a/server/queues/processors/EmailsProcessor.ts b/server/queues/processors/EmailsProcessor.ts\nindex 2ba41dcd12ea..411ff83c854f 100644\n--- a/server/queues/processors/EmailsProcessor.ts\n+++ b/server/queues/processors/EmailsProcessor.ts\n@@ -56,6 +56,7 @@ export default class EmailsProcessor extends BaseProcessor {\n             to: notification.user.email,\n             userId: notification.userId,\n             documentId: notification.documentId,\n+            membershipId: notification.membershipId,\n             teamUrl: notification.team.url,\n             actorName: notification.actor.name,\n           },\n\ndiff --git a/server/queues/tasks/CommentCreatedNotificationsTask.ts b/server/queues/tasks/CommentCreatedNotificationsTask.ts\nindex 1ad00fd08080..7e6f86ee305c 100644\n--- a/server/queues/tasks/CommentCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/CommentCreatedNotificationsTask.ts\n@@ -10,7 +10,7 @@ import NotificationHelper from \""@server/models/helpers/NotificationHelper\"";\n import { ProsemirrorHelper } from \""@server/models/helpers/ProsemirrorHelper\"";\n import { sequelize } from \""@server/storage/database\"";\n import { CommentEvent } from \""@server/types\"";\n-import { canUserAccessDocument } from \""@server/utils/policies\"";\n+import { canUserAccessDocument } from \""@server/utils/permissions\"";\n import BaseTask, { TaskPriority } from \""./BaseTask\"";\n \n export default class CommentCreatedNotificationsTask extends BaseTask<CommentEvent> {\n\ndiff --git a/server/queues/tasks/CommentUpdatedNotificationsTask.ts b/server/queues/tasks/CommentUpdatedNotificationsTask.ts\nindex 08a93f05aa0d..08dc93f90bb1 100644\n--- a/server/queues/tasks/CommentUpdatedNotificationsTask.ts\n+++ b/server/queues/tasks/CommentUpdatedNotificationsTask.ts\n@@ -4,7 +4,7 @@ import { MentionType, NotificationEventType } from \""@shared/types\"";\n import { Comment, Document, Notification, User } from \""@server/models\"";\n import { ProsemirrorHelper } from \""@server/models/helpers/ProsemirrorHelper\"";\n import { CommentEvent, CommentUpdateEvent } from \""@server/types\"";\n-import { canUserAccessDocument } from \""@server/utils/policies\"";\n+import { canUserAccessDocument } from \""@server/utils/permissions\"";\n import BaseTask, { TaskPriority } from \""./BaseTask\"";\n \n export default class CommentUpdatedNotificationsTask extends BaseTask<CommentEvent> {\n\ndiff --git a/server/queues/tasks/DocumentAddGroupNotificationsTask.ts b/server/queues/tasks/DocumentAddGroupNotificationsTask.ts\nindex fc7a467af30f..a0eda5641a07 100644\n--- a/server/queues/tasks/DocumentAddGroupNotificationsTask.ts\n+++ b/server/queues/tasks/DocumentAddGroupNotificationsTask.ts\n@@ -1,6 +1,5 @@\n import { Op } from \""sequelize\"";\n-import Logger from \""@server/logging/Logger\"";\n-import { GroupUser, UserMembership } from \""@server/models\"";\n+import { GroupUser } from \""@server/models\"";\n import { DocumentGroupEvent } from \""@server/types\"";\n import BaseTask, { TaskPriority } from \""./BaseTask\"";\n import DocumentAddUserNotificationsTask from \""./DocumentAddUserNotificationsTask\"";\n@@ -20,26 +19,9 @@ export default class DocumentAddGroupNotificationsTask extends BaseTask<Document\n       async (groupUsers) => {\n         await Promise.all(\n           groupUsers.map(async (groupUser) => {\n-            const userMembership = await UserMembership.findOne({\n-              where: {\n-                userId: groupUser.userId,\n-                documentId: event.documentId,\n-              },\n-            });\n-            if (userMembership) {\n-              Logger.debug(\n-                \""task\"",\n-                `Suppressing notification for user ${groupUser.userId} as they are already a member of the document`,\n-                {\n-                  documentId: event.documentId,\n-                  userId: groupUser.userId,\n-                }\n-              );\n-              return;\n-            }\n-\n             await DocumentAddUserNotificationsTask.schedule({\n               ...event,\n+              modelId: event.data.membershipId,\n               userId: groupUser.userId,\n             });\n           })\n\ndiff --git a/server/queues/tasks/DocumentAddUserNotificationsTask.ts b/server/queues/tasks/DocumentAddUserNotificationsTask.ts\nindex a41676f37531..9b60dcd9e039 100644\n--- a/server/queues/tasks/DocumentAddUserNotificationsTask.ts\n+++ b/server/queues/tasks/DocumentAddUserNotificationsTask.ts\n@@ -1,27 +1,65 @@\n-import { NotificationEventType } from \""@shared/types\"";\n+import { DocumentPermission, NotificationEventType } from \""@shared/types\"";\n+import Logger from \""@server/logging/Logger\"";\n import { Notification, User } from \""@server/models\"";\n import { DocumentUserEvent } from \""@server/types\"";\n+import { isElevatedPermission } from \""@server/utils/permissions\"";\n import BaseTask, { TaskPriority } from \""./BaseTask\"";\n \n export default class DocumentAddUserNotificationsTask extends BaseTask<DocumentUserEvent> {\n   public async perform(event: DocumentUserEvent) {\n-    const recipient = await User.findByPk(event.userId);\n-    if (!recipient) {\n+    const permission = event.changes?.attributes.permission as\n+      | DocumentPermission\n+      | undefined;\n+\n+    if (!permission) {\n+      Logger.info(\n+        \""task\"",\n+        `permission not available in the DocumentAddUserNotificationsTask event`,\n+        {\n+          name: event.name,\n+          modelId: event.modelId,\n+        }\n+      );\n       return;\n     }\n \n+    const recipient = await User.findByPk(event.userId);\n     if (\n-      !recipient.isSuspended &&\n-      recipient.subscribedToEventType(NotificationEventType.AddUserToDocument)\n+      !recipient ||\n+      recipient.isSuspended ||\n+      !recipient.subscribedToEventType(NotificationEventType.AddUserToDocument)\n     ) {\n-      await Notification.create({\n-        event: NotificationEventType.AddUserToDocument,\n-        userId: event.userId,\n-        actorId: event.actorId,\n-        teamId: event.teamId,\n-        documentId: event.documentId,\n-      });\n+      return;\n     }\n+\n+    const isElevated = await isElevatedPermission({\n+      userId: recipient.id,\n+      documentId: event.documentId,\n+      permission,\n+      skipMembershipId: event.modelId,\n+    });\n+\n+    if (!isElevated) {\n+      Logger.debug(\n+        \""task\"",\n+        `Suppressing notification for user ${event.userId} as the new permission does not elevate user's permission to the document`,\n+        {\n+          documentId: event.documentId,\n+          userId: event.userId,\n+          permission,\n+        }\n+      );\n+      return;\n+    }\n+\n+    await Notification.create({\n+      event: NotificationEventType.AddUserToDocument,\n+      userId: event.userId,\n+      actorId: event.actorId,\n+      teamId: event.teamId,\n+      documentId: event.documentId,\n+      membershipId: event.modelId,\n+    });\n   }\n \n   public get options() {\n\ndiff --git a/server/queues/tasks/DocumentPublishedNotificationsTask.ts b/server/queues/tasks/DocumentPublishedNotificationsTask.ts\nindex f6dd20d6ab97..fbff48a5e65b 100644\n--- a/server/queues/tasks/DocumentPublishedNotificationsTask.ts\n+++ b/server/queues/tasks/DocumentPublishedNotificationsTask.ts\n@@ -4,7 +4,7 @@ import { Document, Notification, User } from \""@server/models\"";\n import { DocumentHelper } from \""@server/models/helpers/DocumentHelper\"";\n import NotificationHelper from \""@server/models/helpers/NotificationHelper\"";\n import { DocumentEvent } from \""@server/types\"";\n-import { canUserAccessDocument } from \""@server/utils/policies\"";\n+import { canUserAccessDocument } from \""@server/utils/permissions\"";\n import BaseTask, { TaskPriority } from \""./BaseTask\"";\n \n export default class DocumentPublishedNotificationsTask extends BaseTask<DocumentEvent> {\n\ndiff --git a/server/queues/tasks/RevisionCreatedNotificationsTask.ts b/server/queues/tasks/RevisionCreatedNotificationsTask.ts\nindex bf04767651fc..7e19d39cbf09 100644\n--- a/server/queues/tasks/RevisionCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/RevisionCreatedNotificationsTask.ts\n@@ -9,7 +9,7 @@ import { Document, Revision, Notification, User, View } from \""@server/models\"";\n import { DocumentHelper } from \""@server/models/helpers/DocumentHelper\"";\n import NotificationHelper from \""@server/models/helpers/NotificationHelper\"";\n import { RevisionEvent } from \""@server/types\"";\n-import { canUserAccessDocument } from \""@server/utils/policies\"";\n+import { canUserAccessDocument } from \""@server/utils/permissions\"";\n import BaseTask, { TaskPriority } from \""./BaseTask\"";\n \n export default class RevisionCreatedNotificationsTask extends BaseTask<RevisionEvent> {\n\ndiff --git a/server/types.ts b/server/types.ts\nindex ae74bdb61da6..ff116ba8810b 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -464,6 +464,7 @@ export type NotificationEvent = BaseEvent<Notification> & {\n   commentId?: string;\n   documentId?: string;\n   collectionId?: string;\n+  membershipId?: string;\n };\n \n export type Event =\n\ndiff --git a/server/utils/permissions.ts b/server/utils/permissions.ts\nnew file mode 100644\nindex 000000000000..2737f99addaa\n--- /dev/null\n+++ b/server/utils/permissions.ts\n@@ -0,0 +1,178 @@\n+import compact from \""lodash/compact\"";\n+import orderBy from \""lodash/orderBy\"";\n+import { Op, WhereOptions } from \""sequelize\"";\n+import { CollectionPermission, DocumentPermission } from \""@shared/types\"";\n+import {\n+  Document,\n+  Group,\n+  GroupMembership,\n+  User,\n+  UserMembership,\n+} from \""@server/models\"";\n+import { authorize } from \""@server/policies\"";\n+\n+// Higher value takes precedence\n+export const CollectionPermissionPriority = {\n+  [CollectionPermission.Admin]: 2,\n+  [CollectionPermission.ReadWrite]: 1,\n+  [CollectionPermission.Read]: 0,\n+} satisfies Record<CollectionPermission, number>;\n+\n+// Higher value takes precedence\n+export const DocumentPermissionPriority = {\n+  [DocumentPermission.Admin]: 2,\n+  [DocumentPermission.ReadWrite]: 1,\n+  [DocumentPermission.Read]: 0,\n+} satisfies Record<DocumentPermission, number>;\n+\n+/**\n+ * Check if the given user can access a document\n+ *\n+ * @param user - The user to check\n+ * @param documentId - The document to check\n+ * @returns Boolean whether the user can access the document\n+ */\n+export const canUserAccessDocument = async (user: User, documentId: string) => {\n+  try {\n+    const document = await Document.findByPk(documentId, {\n+      userId: user.id,\n+    });\n+    authorize(user, \""read\"", document);\n+    return true;\n+  } catch (err) {\n+    return false;\n+  }\n+};\n+\n+/**\n+ * Determines whether the user's access to a document is being elevated with the new permission.\n+ *\n+ * @param {Object} params Input parameters.\n+ * @param {string} params.userId The user to check.\n+ * @param {string} params.documentId The document to check.\n+ * @param {DocumentPermission} params.permission The new permission given to the user.\n+ * @param {string} params.skipMembershipId The membership to skip when comparing the existing permissions.\n+ * @returns {boolean} Whether the user has a higher access level\n+ */\n+export const isElevatedPermission = async ({\n+  userId,\n+  documentId,\n+  permission,\n+  skipMembershipId,\n+}: {\n+  userId: string;\n+  documentId: string;\n+  permission: DocumentPermission;\n+  skipMembershipId?: string;\n+}) => {\n+  const existingPermission = await getDocumentPermission({\n+    userId,\n+    documentId,\n+    skipMembershipId,\n+  });\n+\n+  if (!existingPermission) {\n+    return true;\n+  }\n+\n+  return (\n+    DocumentPermissionPriority[existingPermission] <\n+    DocumentPermissionPriority[permission]\n+  );\n+};\n+\n+/**\n+ * Returns the user's permission to a document.\n+ *\n+ * @param {Object} params Input parameters.\n+ * @param {string} params.userId The user to check.\n+ * @param {string} params.documentId The document to check.\n+ * @param {string} params.skipMembershipId The membership to skip when comparing the existing permissions.\n+ * @returns {DocumentPermission | undefined} Highest permission, if it exists.\n+ */\n+export const getDocumentPermission = async ({\n+  userId,\n+  documentId,\n+  skipMembershipId,\n+}: {\n+  userId: string;\n+  documentId: string;\n+  skipMembershipId?: string;\n+}): Promise<DocumentPermission | undefined> => {\n+  const document = await Document.scope({\n+    method: [\""withCollectionPermissions\"", userId],\n+  }).findOne({ where: { id: documentId } });\n+\n+  const permissions: DocumentPermission[] = [];\n+\n+  const collection = document?.collection;\n+  if (collection) {\n+    const collectionPermissions = orderBy(\n+      compact([\n+        collection.permission,\n+        ...compact(\n+          collection.memberships?.map(\n+            (m) => m.permission as CollectionPermission\n+          )\n+        ),\n+        ...compact(\n+          collection.groupMemberships?.map(\n+            (m) => m.permission as CollectionPermission\n+          )\n+        ),\n+      ]),\n+      (permission) => CollectionPermissionPriority[permission],\n+      \""desc\""\n+    );\n+\n+    if (collectionPermissions[0]) {\n+      permissions.push(\n+        collectionPermissions[0] === CollectionPermission.Read\n+          ? DocumentPermission.Read\n+          : DocumentPermission.ReadWrite\n+      );\n+    }\n+  }\n+\n+  const userMembershipWhere: WhereOptions<UserMembership> = {\n+    userId,\n+    documentId,\n+  };\n+  const groupMembershipWhere: WhereOptions<GroupMembership> = {\n+    documentId,\n+  };\n+\n+  if (skipMembershipId) {\n+    userMembershipWhere.id = { [Op.ne]: skipMembershipId };\n+    groupMembershipWhere.id = { [Op.ne]: skipMembershipId };\n+  }\n+\n+  const [userMemberships, groupMemberships] = await Promise.all([\n+    UserMembership.findAll({\n+      where: userMembershipWhere,\n+    }),\n+    GroupMembership.findAll({\n+      where: groupMembershipWhere,\n+      include: [\n+        {\n+          model: Group.filterByMember(userId),\n+          as: \""group\"",\n+          required: true,\n+        },\n+      ],\n+    }),\n+  ]);\n+\n+  permissions.push(\n+    ...userMemberships.map((m) => m.permission as DocumentPermission),\n+    ...groupMemberships.map((m) => m.permission as DocumentPermission)\n+  );\n+\n+  const orderedPermissions = orderBy(\n+    permissions,\n+    (permission) => DocumentPermissionPriority[permission],\n+    \""desc\""\n+  );\n+\n+  return orderedPermissions[0];\n+};\n\ndiff --git a/server/utils/policies.ts b/server/utils/policies.ts\ndeleted file mode 100644\nindex 3058b46934d6..000000000000\n--- a/server/utils/policies.ts\n+++ /dev/null\n@@ -1,21 +0,0 @@\n-import { Document, User } from \""@server/models\"";\n-import { authorize } from \""@server/policies\"";\n-\n-/**\n- * Check if the given user can access a document\n- *\n- * @param user - The user to check\n- * @param documentId - The document to check\n- * @returns Boolean whether the user can access the document\n- */\n-export const canUserAccessDocument = async (user: User, documentId: string) => {\n-  try {\n-    const document = await Document.findByPk(documentId, {\n-      userId: user.id,\n-    });\n-    authorize(user, \""read\"", document);\n-    return true;\n-  } catch (err) {\n-    return false;\n-  }\n-};\n"", ""test_patch"": ""diff --git a/server/test/factories.ts b/server/test/factories.ts\nindex 3a69bc81ad55..86e3f2da2308 100644\n--- a/server/test/factories.ts\n+++ b/server/test/factories.ts\n@@ -294,11 +294,14 @@ export async function buildCollection(\n     overrides.archivedById = overrides.userId;\n   }\n \n+  if (overrides.permission === undefined) {\n+    overrides.permission = CollectionPermission.ReadWrite;\n+  }\n+\n   return Collection.create({\n     name: faker.lorem.words(2),\n     description: faker.lorem.words(4),\n     createdById: overrides.userId,\n-    permission: CollectionPermission.ReadWrite,\n     ...overrides,\n   });\n }\n\ndiff --git a/server/utils/permissions.test.ts b/server/utils/permissions.test.ts\nnew file mode 100644\nindex 000000000000..7e490e05b20c\n--- /dev/null\n+++ b/server/utils/permissions.test.ts\n@@ -0,0 +1,305 @@\n+import { CollectionPermission, DocumentPermission } from \""@shared/types\"";\n+import { GroupMembership, UserMembership } from \""@server/models\"";\n+import {\n+  buildCollection,\n+  buildDocument,\n+  buildGroup,\n+  buildGroupUser,\n+  buildUser,\n+} from \""@server/test/factories\"";\n+import { getDocumentPermission, isElevatedPermission } from \""./permissions\"";\n+\n+describe(\""permissions\"", () => {\n+  describe(\""isElevatedPermission\"", () => {\n+    it(\""should return false when user has higher permission through collection\"", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      await UserMembership.create({\n+        createdById: user.id,\n+        collectionId: collection.id,\n+        userId: user.id,\n+        permission: CollectionPermission.ReadWrite,\n+      });\n+\n+      const isElevated = await isElevatedPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+        permission: DocumentPermission.Read,\n+      });\n+\n+      expect(isElevated).toBe(false);\n+    });\n+\n+    it(\""should return false when user has higher permission through document\"", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      const group = await buildGroup();\n+      await Promise.all([\n+        await buildGroupUser({\n+          groupId: group.id,\n+          userId: user.id,\n+          teamId: user.teamId,\n+        }),\n+        await UserMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          userId: user.id,\n+          permission: DocumentPermission.Read,\n+        }),\n+        await GroupMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          groupId: group.id,\n+          permission: DocumentPermission.ReadWrite,\n+        }),\n+      ]);\n+\n+      const isElevated = await isElevatedPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+        permission: DocumentPermission.Read,\n+      });\n+\n+      expect(isElevated).toBe(false);\n+    });\n+\n+    it(\""should return false when user has the same permission\"", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      const group = await buildGroup();\n+      await Promise.all([\n+        await buildGroupUser({\n+          groupId: group.id,\n+          userId: user.id,\n+          teamId: user.teamId,\n+        }),\n+        await UserMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          userId: user.id,\n+          permission: DocumentPermission.Read,\n+        }),\n+        await GroupMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          groupId: group.id,\n+          permission: DocumentPermission.ReadWrite,\n+        }),\n+      ]);\n+\n+      const isElevated = await isElevatedPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+        permission: DocumentPermission.ReadWrite,\n+      });\n+\n+      expect(isElevated).toBe(false);\n+    });\n+\n+    it(\""should return true when user has lower permission\"", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      const group = await buildGroup();\n+      await Promise.all([\n+        await buildGroupUser({\n+          groupId: group.id,\n+          userId: user.id,\n+          teamId: user.teamId,\n+        }),\n+        await UserMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          userId: user.id,\n+          permission: DocumentPermission.Read,\n+        }),\n+        await GroupMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          groupId: group.id,\n+          permission: DocumentPermission.ReadWrite,\n+        }),\n+      ]);\n+\n+      const isElevated = await isElevatedPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+        permission: DocumentPermission.Admin,\n+      });\n+\n+      expect(isElevated).toBe(true);\n+    });\n+\n+    it(\""should return true when user does not have access\"", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+\n+      const isElevated = await isElevatedPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+        permission: DocumentPermission.Admin,\n+      });\n+\n+      expect(isElevated).toBe(true);\n+    });\n+  });\n+\n+  describe(\""getDocumentPermission\"", () => {\n+    it(\""should return the highest provided permission through collection\"", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      await UserMembership.create({\n+        createdById: user.id,\n+        collectionId: collection.id,\n+        userId: user.id,\n+        permission: CollectionPermission.ReadWrite,\n+      });\n+\n+      const permission = await getDocumentPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+      });\n+\n+      expect(permission).toEqual(DocumentPermission.ReadWrite);\n+    });\n+\n+    it(\""should return the highest provided permission through document\"", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      const group = await buildGroup();\n+      await Promise.all([\n+        await buildGroupUser({\n+          groupId: group.id,\n+          userId: user.id,\n+          teamId: user.teamId,\n+        }),\n+        await UserMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          userId: user.id,\n+          permission: DocumentPermission.Read,\n+        }),\n+        await GroupMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          groupId: group.id,\n+          permission: DocumentPermission.ReadWrite,\n+        }),\n+      ]);\n+\n+      const permission = await getDocumentPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+      });\n+\n+      expect(permission).toEqual(DocumentPermission.ReadWrite);\n+    });\n+\n+    it(\""should return the highest provided permission with skipped membership\"", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+      const group = await buildGroup();\n+      const [, , groupMembership] = await Promise.all([\n+        await buildGroupUser({\n+          groupId: group.id,\n+          userId: user.id,\n+          teamId: user.teamId,\n+        }),\n+        await UserMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          userId: user.id,\n+          permission: DocumentPermission.Read,\n+        }),\n+        await GroupMembership.create({\n+          createdById: user.id,\n+          documentId: document.id,\n+          groupId: group.id,\n+          permission: DocumentPermission.ReadWrite,\n+        }),\n+      ]);\n+\n+      const permission = await getDocumentPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+        skipMembershipId: groupMembership.id,\n+      });\n+\n+      expect(permission).toEqual(DocumentPermission.Read);\n+    });\n+\n+    it(\""should return undefined when user does not have access\"", async () => {\n+      const user = await buildUser();\n+      const collection = await buildCollection({\n+        teamId: user.teamId,\n+        permission: null,\n+      });\n+      const document = await buildDocument({\n+        collectionId: collection.id,\n+        teamId: user.teamId,\n+      });\n+\n+      const permission = await getDocumentPermission({\n+        userId: user.id,\n+        documentId: document.id,\n+      });\n+\n+      expect(permission).toBeUndefined();\n+    });\n+  });\n+});\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8225"", ""pr_id"": 8225, ""issue_id"": 7680, ""repo"": ""outline/outline"", ""problem_statement"": ""Document @mentions\nWe want to introduce the concept of mentioning documents alongside users, this would have a \""chip\"" style in the same way that would show the document icon and title.\r\n\r\n"", ""issue_word_count"": 31, ""test_files_count"": 3, ""non_test_files_count"": 72, ""pr_changed_files"": [""app/actions/definitions/documents.tsx"", ""app/actions/sections.ts"", ""app/components/Collection/CollectionForm.tsx"", ""app/components/CommandBar/useRecentDocumentActions.tsx"", ""app/components/CommandBar/useTemplatesAction.tsx"", ""app/components/DocumentBreadcrumb.tsx"", ""app/components/DocumentCard.tsx"", ""app/components/DocumentExplorer.tsx"", ""app/components/DocumentListItem.tsx"", ""app/components/Editor.tsx"", ""app/components/IconPicker/index.tsx"", ""app/components/Icons/CollectionIcon.tsx"", ""app/components/Sidebar/components/DocumentLink.tsx"", ""app/components/Sidebar/components/SharedDocumentLink.tsx"", ""app/components/Sidebar/hooks/useDragAndDrop.tsx"", ""app/components/Sidebar/hooks/useSidebarLabelAndIcon.tsx"", ""app/editor/components/LinkEditor.tsx"", ""app/editor/components/LinkSearchResult.tsx"", ""app/editor/components/LinkToolbar.tsx"", ""app/editor/components/MentionMenu.tsx"", ""app/editor/components/SelectionToolbar.tsx"", ""app/editor/components/SuggestionsMenu.tsx"", ""app/editor/components/SuggestionsMenuItem.tsx"", ""app/editor/extensions/PasteHandler.ts"", ""app/editor/index.tsx"", ""app/hooks/useDictionary.ts"", ""app/hooks/useEditorClickHandlers.ts"", ""app/menus/TemplatesMenu.tsx"", ""app/scenes/Collection/index.tsx"", ""app/scenes/Document/Shared.tsx"", ""app/scenes/Document/components/DataLoader.tsx"", ""app/scenes/Document/components/Document.tsx"", ""app/scenes/Document/components/DocumentTitle.tsx"", ""app/scenes/Document/components/Header.tsx"", ""app/scenes/Document/components/MeasuredContainer.tsx"", ""app/scenes/Document/components/PublicBreadcrumb.tsx"", ""app/scenes/Document/components/ReferenceListItem.tsx"", ""app/stores/DocumentsStore.ts"", ""app/stores/base/Store.ts"", ""app/utils/ApiClient.ts"", ""server/emails/templates/DocumentMentionedEmail.tsx"", ""server/models/helpers/DocumentHelper.tsx"", ""server/models/helpers/NotificationHelper.ts"", ""server/models/helpers/ProseMirrorHelper.test.ts"", ""server/models/helpers/ProsemirrorHelper.tsx"", ""server/queues/processors/BacklinksProcessor.test.ts"", ""server/queues/processors/BacklinksProcessor.ts"", ""server/queues/tasks/CommentCreatedNotificationsTask.ts"", ""server/queues/tasks/CommentUpdatedNotificationsTask.ts"", ""server/queues/tasks/DocumentPublishedNotificationsTask.ts"", ""server/queues/tasks/RevisionCreatedNotificationsTask.ts"", ""server/routes/api/comments/comments.ts"", ""server/routes/api/documents/documents.ts"", ""server/routes/api/documents/schema.ts"", ""server/routes/api/index.ts"", ""server/routes/api/suggestions/index.ts"", ""server/routes/api/suggestions/schema.ts"", ""server/routes/api/suggestions/suggestions.ts"", ""server/routes/api/urls/urls.ts"", ""server/utils/parseDocumentIds.test.ts"", ""server/utils/parseDocumentIds.ts"", ""server/validation.ts"", ""shared/components/EmojiIcon.tsx"", ""shared/components/Icon.tsx"", ""shared/editor/components/Mentions.tsx"", ""shared/editor/components/Styles.ts"", ""shared/editor/embeds/Berrycast.tsx"", ""shared/editor/marks/Link.tsx"", ""shared/editor/nodes/Mention.tsx"", ""shared/editor/types/index.ts"", ""shared/hooks/useComponentSize.ts"", ""shared/hooks/useStores.ts"", ""shared/i18n/locales/en_US/translation.json"", ""shared/types.ts"", ""shared/utils/urls.ts""], ""pr_changed_test_files"": [""server/models/helpers/ProseMirrorHelper.test.ts"", ""server/queues/processors/BacklinksProcessor.test.ts"", ""server/utils/parseDocumentIds.test.ts""], ""base_commit"": ""79df75e09d20f2a3717aeeb1c8341551ab9ceeb9"", ""head_commit"": ""54a5deb6a5a79ec2901396abc2db73e60b5707e3"", ""repo_url"": ""https://github.com/outline/outline/pull/8225"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8225"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-17T23:56:39.000Z"", ""patch"": ""diff --git a/app/actions/definitions/documents.tsx b/app/actions/definitions/documents.tsx\nindex 8a556391b9a1..2b26305f01a5 100644\n--- a/app/actions/definitions/documents.tsx\n+++ b/app/actions/definitions/documents.tsx\n@@ -32,6 +32,7 @@ import {\n } from \""outline-icons\"";\n import * as React from \""react\"";\n import { toast } from \""sonner\"";\n+import Icon from \""@shared/components/Icon\"";\n import {\n   ExportContentType,\n   TeamPreference,\n@@ -46,7 +47,6 @@ import DocumentPublish from \""~/scenes/DocumentPublish\"";\n import DeleteDocumentsInTrash from \""~/scenes/Trash/components/DeleteDocumentsInTrash\"";\n import ConfirmationDialog from \""~/components/ConfirmationDialog\"";\n import DocumentCopy from \""~/components/DocumentCopy\"";\n-import Icon from \""~/components/Icon\"";\n import MarkdownIcon from \""~/components/Icons/MarkdownIcon\"";\n import SharePopover from \""~/components/Sharing/Document\"";\n import { getHeaderExpandedKey } from \""~/components/Sidebar/components/Header\"";\n\ndiff --git a/app/actions/sections.ts b/app/actions/sections.ts\nindex b434143c2998..3a5369b8842b 100644\n--- a/app/actions/sections.ts\n+++ b/app/actions/sections.ts\n@@ -13,6 +13,8 @@ export const DeveloperSection = ({ t }: ActionContext) => t(\""Debug\"");\n \n export const DocumentSection = ({ t }: ActionContext) => t(\""Document\"");\n \n+export const DocumentsSection = ({ t }: ActionContext) => t(\""Documents\"");\n+\n export const ActiveDocumentSection = ({ t, stores }: ActionContext) => {\n   const activeDocument = stores.documents.active;\n   return `${t(\""Document\"")} \u00b7 ${activeDocument?.titleWithDefault}`;\n@@ -34,6 +36,8 @@ export const NotificationSection = ({ t }: ActionContext) => t(\""Notification\"");\n \n export const UserSection = ({ t }: ActionContext) => t(\""People\"");\n \n+UserSection.priority = 0.5;\n+\n export const TeamSection = ({ t }: ActionContext) => t(\""Workspace\"");\n \n export const RecentSearchesSection = ({ t }: ActionContext) =>\n\ndiff --git a/app/components/Collection/CollectionForm.tsx b/app/components/Collection/CollectionForm.tsx\nindex 28b31c31f629..8e308d0927e8 100644\n--- a/app/components/Collection/CollectionForm.tsx\n+++ b/app/components/Collection/CollectionForm.tsx\n@@ -3,6 +3,7 @@ import * as React from \""react\"";\n import { Controller, useForm } from \""react-hook-form\"";\n import { Trans, useTranslation } from \""react-i18next\"";\n import styled from \""styled-components\"";\n+import Icon from \""@shared/components/Icon\"";\n import { randomElement } from \""@shared/random\"";\n import { CollectionPermission } from \""@shared/types\"";\n import { IconLibrary } from \""@shared/utils/IconLibrary\"";\n@@ -11,7 +12,6 @@ import { CollectionValidation } from \""@shared/validations\"";\n import Collection from \""~/models/Collection\"";\n import Button from \""~/components/Button\"";\n import Flex from \""~/components/Flex\"";\n-import Icon from \""~/components/Icon\"";\n import Input from \""~/components/Input\"";\n import InputSelectPermission from \""~/components/InputSelectPermission\"";\n import Switch from \""~/components/Switch\"";\n\ndiff --git a/app/components/CommandBar/useRecentDocumentActions.tsx b/app/components/CommandBar/useRecentDocumentActions.tsx\nindex 7a84f637204b..92d18a5137ea 100644\n--- a/app/components/CommandBar/useRecentDocumentActions.tsx\n+++ b/app/components/CommandBar/useRecentDocumentActions.tsx\n@@ -1,6 +1,6 @@\n import { DocumentIcon } from \""outline-icons\"";\n import * as React from \""react\"";\n-import Icon from \""~/components/Icon\"";\n+import Icon from \""@shared/components/Icon\"";\n import { createAction } from \""~/actions\"";\n import { RecentSection } from \""~/actions/sections\"";\n import useStores from \""~/hooks/useStores\"";\n\ndiff --git a/app/components/CommandBar/useTemplatesAction.tsx b/app/components/CommandBar/useTemplatesAction.tsx\nindex 16e25618f2e7..0ceacbf087cf 100644\n--- a/app/components/CommandBar/useTemplatesAction.tsx\n+++ b/app/components/CommandBar/useTemplatesAction.tsx\n@@ -1,6 +1,6 @@\n import { NewDocumentIcon, ShapesIcon } from \""outline-icons\"";\n import * as React from \""react\"";\n-import Icon from \""~/components/Icon\"";\n+import Icon from \""@shared/components/Icon\"";\n import { createAction } from \""~/actions\"";\n import {\n   ActiveCollectionSection,\n\ndiff --git a/app/components/DocumentBreadcrumb.tsx b/app/components/DocumentBreadcrumb.tsx\nindex bd639d07bf7f..4fe98a1c6821 100644\n--- a/app/components/DocumentBreadcrumb.tsx\n+++ b/app/components/DocumentBreadcrumb.tsx\n@@ -3,10 +3,10 @@ import { ArchiveIcon, GoToIcon, ShapesIcon, TrashIcon } from \""outline-icons\"";\n import * as React from \""react\"";\n import { useTranslation } from \""react-i18next\"";\n import styled from \""styled-components\"";\n+import Icon from \""@shared/components/Icon\"";\n import type { NavigationNode } from \""@shared/types\"";\n import Document from \""~/models/Document\"";\n import Breadcrumb from \""~/components/Breadcrumb\"";\n-import Icon from \""~/components/Icon\"";\n import CollectionIcon from \""~/components/Icons/CollectionIcon\"";\n import { useLocationSidebarContext } from \""~/hooks/useLocationSidebarContext\"";\n import usePolicy from \""~/hooks/usePolicy\"";\n\ndiff --git a/app/components/DocumentCard.tsx b/app/components/DocumentCard.tsx\nindex 1097680916f1..e483207619fd 100644\n--- a/app/components/DocumentCard.tsx\n+++ b/app/components/DocumentCard.tsx\n@@ -7,6 +7,7 @@ import * as React from \""react\"";\n import { useTranslation } from \""react-i18next\"";\n import { Link } from \""react-router-dom\"";\n import styled, { useTheme } from \""styled-components\"";\n+import Icon from \""@shared/components/Icon\"";\n import Squircle from \""@shared/components/Squircle\"";\n import { s, ellipsis } from \""@shared/styles\"";\n import { IconType } from \""@shared/types\"";\n@@ -14,7 +15,6 @@ import { determineIconType } from \""@shared/utils/icon\"";\n import Document from \""~/models/Document\"";\n import Pin from \""~/models/Pin\"";\n import Flex from \""~/components/Flex\"";\n-import Icon from \""~/components/Icon\"";\n import NudeButton from \""~/components/NudeButton\"";\n import Time from \""~/components/Time\"";\n import useStores from \""~/hooks/useStores\"";\n\ndiff --git a/app/components/DocumentExplorer.tsx b/app/components/DocumentExplorer.tsx\nindex 81fee827a379..677f6d9dd4c8 100644\n--- a/app/components/DocumentExplorer.tsx\n+++ b/app/components/DocumentExplorer.tsx\n@@ -14,12 +14,12 @@ import { FixedSizeList as List } from \""react-window\"";\n import scrollIntoView from \""scroll-into-view-if-needed\"";\n import styled, { useTheme } from \""styled-components\"";\n import breakpoint from \""styled-components-breakpoint\"";\n+import Icon from \""@shared/components/Icon\"";\n import { NavigationNode } from \""@shared/types\"";\n import { isModKey } from \""@shared/utils/keyboard\"";\n import DocumentExplorerNode from \""~/components/DocumentExplorerNode\"";\n import DocumentExplorerSearchResult from \""~/components/DocumentExplorerSearchResult\"";\n import Flex from \""~/components/Flex\"";\n-import Icon from \""~/components/Icon\"";\n import CollectionIcon from \""~/components/Icons/CollectionIcon\"";\n import { Outline } from \""~/components/Input\"";\n import InputSearch from \""~/components/InputSearch\"";\n\ndiff --git a/app/components/DocumentListItem.tsx b/app/components/DocumentListItem.tsx\nindex 71906091953c..0db389d0ff91 100644\n--- a/app/components/DocumentListItem.tsx\n+++ b/app/components/DocumentListItem.tsx\n@@ -9,13 +9,13 @@ import { Link } from \""react-router-dom\"";\n import styled, { css } from \""styled-components\"";\n import breakpoint from \""styled-components-breakpoint\"";\n import EventBoundary from \""@shared/components/EventBoundary\"";\n+import Icon from \""@shared/components/Icon\"";\n import { s } from \""@shared/styles\"";\n import Document from \""~/models/Document\"";\n import Badge from \""~/components/Badge\"";\n import DocumentMeta from \""~/components/DocumentMeta\"";\n import Flex from \""~/components/Flex\"";\n import Highlight from \""~/components/Highlight\"";\n-import Icon from \""~/components/Icon\"";\n import NudeButton from \""~/components/NudeButton\"";\n import StarButton, { AnimatedStar } from \""~/components/Star\"";\n import Tooltip from \""~/components/Tooltip\"";\n\ndiff --git a/app/components/Editor.tsx b/app/components/Editor.tsx\nindex 21a9652ab394..6e7151fe28f5 100644\n--- a/app/components/Editor.tsx\n+++ b/app/components/Editor.tsx\n@@ -1,6 +1,4 @@\n-import deburr from \""lodash/deburr\"";\n import difference from \""lodash/difference\"";\n-import sortBy from \""lodash/sortBy\"";\n import { observer } from \""mobx-react\"";\n import { DOMParser as ProsemirrorDOMParser } from \""prosemirror-model\"";\n import { TextSelection } from \""prosemirror-state\"";\n@@ -9,10 +7,7 @@ import { mergeRefs } from \""react-merge-refs\"";\n import { Optional } from \""utility-types\"";\n import insertFiles from \""@shared/editor/commands/insertFiles\"";\n import { AttachmentPreset } from \""@shared/types\"";\n-import { dateLocale, dateToRelative } from \""@shared/utils/date\"";\n import { getDataTransferFiles } from \""@shared/utils/files\"";\n-import parseDocumentSlug from \""@shared/utils/parseDocumentSlug\"";\n-import { isInternalUrl } from \""@shared/utils/urls\"";\n import { AttachmentValidation } from \""@shared/validations\"";\n import ClickablePadding from \""~/components/ClickablePadding\"";\n import ErrorBoundary from \""~/components/ErrorBoundary\"";\n@@ -22,12 +17,8 @@ import useDictionary from \""~/hooks/useDictionary\"";\n import useEditorClickHandlers from \""~/hooks/useEditorClickHandlers\"";\n import useEmbeds from \""~/hooks/useEmbeds\"";\n import useStores from \""~/hooks/useStores\"";\n-import useUserLocale from \""~/hooks/useUserLocale\"";\n-import { NotFoundError } from \""~/utils/errors\"";\n import { uploadFile } from \""~/utils/files\"";\n import lazyWithRetry from \""~/utils/lazyWithRetry\"";\n-import DocumentBreadcrumb from \""./DocumentBreadcrumb\"";\n-import Icon from \""./Icon\"";\n \n const LazyLoadedEditor = lazyWithRetry(() => import(\""~/editor\""));\n \n@@ -50,76 +41,13 @@ export type Props = Optional<\n function Editor(props: Props, ref: React.RefObject<SharedEditor> | null) {\n   const { id, shareId, onChange, onCreateCommentMark, onDeleteCommentMark } =\n     props;\n-  const userLocale = useUserLocale();\n-  const locale = dateLocale(userLocale);\n-  const { comments, documents } = useStores();\n+  const { comments } = useStores();\n   const dictionary = useDictionary();\n   const embeds = useEmbeds(!shareId);\n   const localRef = React.useRef<SharedEditor>();\n   const preferences = useCurrentUser({ rejectOnEmpty: false })?.preferences;\n   const previousCommentIds = React.useRef<string[]>();\n \n-  const handleSearchLink = React.useCallback(\n-    async (term: string) => {\n-      if (isInternalUrl(term)) {\n-        // search for exact internal document\n-        const slug = parseDocumentSlug(term);\n-        if (!slug) {\n-          return [];\n-        }\n-\n-        try {\n-          const document = await documents.fetch(slug);\n-          const time = dateToRelative(Date.parse(document.updatedAt), {\n-            addSuffix: true,\n-            shorten: true,\n-            locale,\n-          });\n-\n-          return [\n-            {\n-              title: document.title,\n-              subtitle: `Updated ${time}`,\n-              url: document.url,\n-              icon: document.icon ? (\n-                <Icon\n-                  value={document.icon}\n-                  color={document.color ?? undefined}\n-                />\n-              ) : undefined,\n-            },\n-          ];\n-        } catch (error) {\n-          // NotFoundError could not find document for slug\n-          if (!(error instanceof NotFoundError)) {\n-            throw error;\n-          }\n-        }\n-      }\n-\n-      // default search for anything that doesn't look like a URL\n-      const results = await documents.searchTitles({ query: term });\n-\n-      return sortBy(\n-        results.map(({ document }) => ({\n-          title: document.title,\n-          subtitle: <DocumentBreadcrumb document={document} onlyText />,\n-          url: document.url,\n-          icon: document.icon ? (\n-            <Icon value={document.icon} color={document.color ?? undefined} />\n-          ) : undefined,\n-        })),\n-        (document) =>\n-          deburr(document.title)\n-            .toLowerCase()\n-            .startsWith(deburr(term).toLowerCase())\n-            ? -1\n-            : 1\n-      );\n-    },\n-    [locale, documents]\n-  );\n-\n   const handleUploadFile = React.useCallback(\n     async (file: File) => {\n       const result = await uploadFile(file, {\n@@ -263,7 +191,6 @@ function Editor(props: Props, ref: React.RefObject<SharedEditor> | null) {\n           dictionary={dictionary}\n           {...props}\n           onClickLink={handleClickLink}\n-          onSearchLink={handleSearchLink}\n           onChange={handleChange}\n           placeholder={props.placeholder || \""\""}\n           defaultValue={props.defaultValue || \""\""}\n\ndiff --git a/app/components/IconPicker/index.tsx b/app/components/IconPicker/index.tsx\nindex c087673f2156..fd12e4bfdbf1 100644\n--- a/app/components/IconPicker/index.tsx\n+++ b/app/components/IconPicker/index.tsx\n@@ -10,12 +10,12 @@ import {\n   useTabState,\n } from \""reakit\"";\n import styled, { css } from \""styled-components\"";\n+import Icon from \""@shared/components/Icon\"";\n import { s } from \""@shared/styles\"";\n import theme from \""@shared/styles/theme\"";\n import { IconType } from \""@shared/types\"";\n import { determineIconType } from \""@shared/utils/icon\"";\n import Flex from \""~/components/Flex\"";\n-import Icon from \""~/components/Icon\"";\n import NudeButton from \""~/components/NudeButton\"";\n import Popover from \""~/components/Popover\"";\n import useMobile from \""~/hooks/useMobile\"";\n\ndiff --git a/app/components/Icons/CollectionIcon.tsx b/app/components/Icons/CollectionIcon.tsx\nindex 14cf595d5895..c3982f0223cc 100644\n--- a/app/components/Icons/CollectionIcon.tsx\n+++ b/app/components/Icons/CollectionIcon.tsx\n@@ -2,9 +2,9 @@ import { observer } from \""mobx-react\"";\n import { CollectionIcon, PrivateCollectionIcon } from \""outline-icons\"";\n import { getLuminance } from \""polished\"";\n import * as React from \""react\"";\n+import Icon from \""@shared/components/Icon\"";\n import { colorPalette } from \""@shared/utils/collections\"";\n import Collection from \""~/models/Collection\"";\n-import Icon from \""~/components/Icon\"";\n import useStores from \""~/hooks/useStores\"";\n \n type Props = {\n\ndiff --git a/app/components/Sidebar/components/DocumentLink.tsx b/app/components/Sidebar/components/DocumentLink.tsx\nindex cacae9337065..cc70202a5b7b 100644\n--- a/app/components/Sidebar/components/DocumentLink.tsx\n+++ b/app/components/Sidebar/components/DocumentLink.tsx\n@@ -5,13 +5,13 @@ import * as React from \""react\"";\n import { useTranslation } from \""react-i18next\"";\n import { Link } from \""react-router-dom\"";\n import styled from \""styled-components\"";\n+import Icon from \""@shared/components/Icon\"";\n import { NavigationNode } from \""@shared/types\"";\n import { sortNavigationNodes } from \""@shared/utils/collections\"";\n import { DocumentValidation } from \""@shared/validations\"";\n import Collection from \""~/models/Collection\"";\n import Document from \""~/models/Document\"";\n import Fade from \""~/components/Fade\"";\n-import Icon from \""~/components/Icon\"";\n import NudeButton from \""~/components/NudeButton\"";\n import Tooltip from \""~/components/Tooltip\"";\n import useBoolean from \""~/hooks/useBoolean\"";\n\ndiff --git a/app/components/Sidebar/components/SharedDocumentLink.tsx b/app/components/Sidebar/components/SharedDocumentLink.tsx\nindex 9c1e70e03d93..05cc000f117e 100644\n--- a/app/components/Sidebar/components/SharedDocumentLink.tsx\n+++ b/app/components/Sidebar/components/SharedDocumentLink.tsx\n@@ -2,10 +2,10 @@ import includes from \""lodash/includes\"";\n import { observer } from \""mobx-react\"";\n import * as React from \""react\"";\n import { useTranslation } from \""react-i18next\"";\n+import Icon from \""@shared/components/Icon\"";\n import { NavigationNode } from \""@shared/types\"";\n import Collection from \""~/models/Collection\"";\n import Document from \""~/models/Document\"";\n-import Icon from \""~/components/Icon\"";\n import useStores from \""~/hooks/useStores\"";\n import { sharedDocumentPath } from \""~/utils/routeHelpers\"";\n import { descendants } from \""~/utils/tree\"";\n\ndiff --git a/app/components/Sidebar/hooks/useDragAndDrop.tsx b/app/components/Sidebar/hooks/useDragAndDrop.tsx\nindex 26ce3759ba72..8a342e76bf14 100644\n--- a/app/components/Sidebar/hooks/useDragAndDrop.tsx\n+++ b/app/components/Sidebar/hooks/useDragAndDrop.tsx\n@@ -6,6 +6,7 @@ import { getEmptyImage } from \""react-dnd-html5-backend\"";\n import { useTranslation } from \""react-i18next\"";\n import { toast } from \""sonner\"";\n import { useTheme } from \""styled-components\"";\n+import Icon from \""@shared/components/Icon\"";\n import { NavigationNode } from \""@shared/types\"";\n import Collection from \""~/models/Collection\"";\n import Document from \""~/models/Document\"";\n@@ -13,7 +14,6 @@ import GroupMembership from \""~/models/GroupMembership\"";\n import Star from \""~/models/Star\"";\n import UserMembership from \""~/models/UserMembership\"";\n import ConfirmMoveDialog from \""~/components/ConfirmMoveDialog\"";\n-import Icon from \""~/components/Icon\"";\n import useCurrentUser from \""~/hooks/useCurrentUser\"";\n import useStores from \""~/hooks/useStores\"";\n import { DragObject } from \""../components/SidebarLink\"";\n\ndiff --git a/app/components/Sidebar/hooks/useSidebarLabelAndIcon.tsx b/app/components/Sidebar/hooks/useSidebarLabelAndIcon.tsx\nindex b729fb0d2308..b292674353b2 100644\n--- a/app/components/Sidebar/hooks/useSidebarLabelAndIcon.tsx\n+++ b/app/components/Sidebar/hooks/useSidebarLabelAndIcon.tsx\n@@ -1,6 +1,6 @@\n import { DocumentIcon } from \""outline-icons\"";\n import * as React from \""react\"";\n-import Icon from \""~/components/Icon\"";\n+import Icon from \""@shared/components/Icon\"";\n import CollectionIcon from \""~/components/Icons/CollectionIcon\"";\n import useStores from \""~/hooks/useStores\"";\n \n\ndiff --git a/app/editor/components/LinkEditor.tsx b/app/editor/components/LinkEditor.tsx\nindex e442d49ed063..2ed8e15973de 100644\n--- a/app/editor/components/LinkEditor.tsx\n+++ b/app/editor/components/LinkEditor.tsx\n@@ -1,43 +1,24 @@\n-import {\n-  ArrowIcon,\n-  DocumentIcon,\n-  CloseIcon,\n-  PlusIcon,\n-  OpenIcon,\n-} from \""outline-icons\"";\n+import { ArrowIcon, CloseIcon, OpenIcon } from \""outline-icons\"";\n import { Mark } from \""prosemirror-model\"";\n import { Selection } from \""prosemirror-state\"";\n import { EditorView } from \""prosemirror-view\"";\n import * as React from \""react\"";\n import { toast } from \""sonner\"";\n import styled from \""styled-components\"";\n-import { s, hideScrollbars } from \""@shared/styles\"";\n import { isInternalUrl, sanitizeUrl } from \""@shared/utils/urls\"";\n import Flex from \""~/components/Flex\"";\n-import { ResizingHeightContainer } from \""~/components/ResizingHeightContainer\"";\n-import Scrollable from \""~/components/Scrollable\"";\n import { Dictionary } from \""~/hooks/useDictionary\"";\n import Logger from \""~/utils/Logger\"";\n import Input from \""./Input\"";\n-import LinkSearchResult from \""./LinkSearchResult\"";\n import ToolbarButton from \""./ToolbarButton\"";\n import Tooltip from \""./Tooltip\"";\n \n-export type SearchResult = {\n-  title: string;\n-  subtitle?: React.ReactNode;\n-  icon?: React.ReactNode;\n-  url: string;\n-};\n-\n type Props = {\n   mark?: Mark;\n   from: number;\n   to: number;\n   dictionary: Dictionary;\n   onRemoveLink?: () => void;\n-  onCreateLink?: (title: string, nested?: boolean) => Promise<void>;\n-  onSearchLink?: (term: string) => Promise<SearchResult[]>;\n   onSelectLink: (options: {\n     href: string;\n     title?: string;\n@@ -52,46 +33,25 @@ type Props = {\n };\n \n type State = {\n-  results: {\n-    [keyword: string]: SearchResult[];\n-  };\n   value: string;\n   previousValue: string;\n-  selectedIndex: number;\n };\n \n class LinkEditor extends React.Component<Props, State> {\n   discardInputValue = false;\n   initialValue = this.href;\n   initialSelectionLength = this.props.to - this.props.from;\n-  resultsRef = React.createRef<HTMLDivElement>();\n   inputRef = React.createRef<HTMLInputElement>();\n \n   state: State = {\n-    selectedIndex: -1,\n     value: this.href,\n     previousValue: \""\"",\n-    results: {},\n   };\n \n   get href(): string {\n     return sanitizeUrl(this.props.mark?.attrs.href) ?? \""\"";\n   }\n \n-  get selectedText(): string {\n-    const { state } = this.props.view;\n-    const selectionText = state.doc.cut(\n-      state.selection.from,\n-      state.selection.to\n-    ).textContent;\n-\n-    return selectionText.trim();\n-  }\n-\n-  get suggestedLinkTitle(): string {\n-    return this.state.value.trim() || this.selectedText;\n-  }\n-\n   componentDidMount(): void {\n     window.addEventListener(\""keydown\"", this.handleGlobalKeyDown);\n   }\n@@ -139,25 +99,12 @@ class LinkEditor extends React.Component<Props, State> {\n   };\n \n   handleKeyDown = (event: React.KeyboardEvent): void => {\n-    const results = this.results;\n-\n     switch (event.key) {\n       case \""Enter\"": {\n         event.preventDefault();\n-        const { selectedIndex, value } = this.state;\n-        const { onCreateLink } = this.props;\n-\n-        if (selectedIndex >= 0) {\n-          const result = results[selectedIndex];\n-          if (result) {\n-            this.save(result.url, result.title);\n-          } else if (onCreateLink && selectedIndex === results.length) {\n-            void this.handleCreateLink(this.suggestedLinkTitle);\n-          }\n-        } else {\n-          // saves the raw input as href\n-          this.save(value, value);\n-        }\n+        const { value } = this.state;\n+\n+        this.save(value, value);\n \n         if (this.initialSelectionLength) {\n           this.moveSelectionToEnd();\n@@ -176,45 +123,9 @@ class LinkEditor extends React.Component<Props, State> {\n         }\n         return;\n       }\n-\n-      case \""ArrowUp\"": {\n-        if (event.shiftKey) {\n-          return;\n-        }\n-        event.preventDefault();\n-        event.stopPropagation();\n-        const prevIndex = this.state.selectedIndex - 1;\n-\n-        this.setState({\n-          selectedIndex: Math.max(-1, prevIndex),\n-        });\n-        return;\n-      }\n-\n-      case \""ArrowDown\"":\n-      case \""Tab\"": {\n-        if (event.shiftKey) {\n-          return;\n-        }\n-\n-        event.preventDefault();\n-        event.stopPropagation();\n-        const { selectedIndex } = this.state;\n-        const total = results.length + 1;\n-        const nextIndex = selectedIndex + 1;\n-\n-        this.setState({\n-          selectedIndex: Math.min(nextIndex, total),\n-        });\n-        return;\n-      }\n     }\n   };\n \n-  handleFocusLink = (selectedIndex: number) => {\n-    this.setState({ selectedIndex });\n-  };\n-\n   handleSearch = async (\n     event: React.ChangeEvent<HTMLInputElement>\n   ): Promise<void> => {\n@@ -222,21 +133,15 @@ class LinkEditor extends React.Component<Props, State> {\n \n     this.setState({\n       value,\n-      selectedIndex: -1,\n     });\n \n-    const trimmedValue = value.trim() || this.selectedText;\n+    const trimmedValue = value.trim();\n \n-    if (trimmedValue && this.props.onSearchLink) {\n+    if (trimmedValue) {\n       try {\n-        const results = await this.props.onSearchLink(trimmedValue);\n-        this.setState((state) => ({\n-          results: {\n-            ...state.results,\n-            [trimmedValue]: results,\n-          },\n+        this.setState({\n           previousValue: trimmedValue,\n-        }));\n+        });\n       } catch (err) {\n         Logger.error(\""Error searching for link\"", err);\n       }\n@@ -257,20 +162,6 @@ class LinkEditor extends React.Component<Props, State> {\n     }\n   };\n \n-  handleCreateLink = async (title: string, nested?: boolean) => {\n-    this.discardInputValue = true;\n-    const { onCreateLink } = this.props;\n-\n-    title = title.trim();\n-    if (title.length === 0) {\n-      return;\n-    }\n-\n-    if (onCreateLink) {\n-      return onCreateLink(title, nested);\n-    }\n-  };\n-\n   handleRemoveLink = (): void => {\n     this.discardInputValue = true;\n \n@@ -285,16 +176,6 @@ class LinkEditor extends React.Component<Props, State> {\n     view.focus();\n   };\n \n-  handleSelectLink =\n-    (url: string, title: string) => (event: React.MouseEvent) => {\n-      event.preventDefault();\n-      this.save(url, title);\n-\n-      if (this.initialSelectionLength) {\n-        this.moveSelectionToEnd();\n-      }\n-    };\n-\n   moveSelectionToEnd = () => {\n     const { to, view } = this.props;\n     const { state, dispatch } = view;\n@@ -305,42 +186,17 @@ class LinkEditor extends React.Component<Props, State> {\n     view.focus();\n   };\n \n-  get results() {\n-    const { value } = this.state;\n-    return (\n-      this.state.results[value.trim()] ||\n-      this.state.results[this.state.previousValue] ||\n-      []\n-    );\n-  }\n-\n   render() {\n     const { dictionary } = this.props;\n-    const { value, selectedIndex } = this.state;\n-    const results = this.results;\n-    const looksLikeUrl = value.match(/^https?:\\/\\//i);\n-    const suggestedLinkTitle = this.suggestedLinkTitle;\n+    const { value } = this.state;\n     const isInternal = isInternalUrl(value);\n \n-    const showCreateLink =\n-      !!this.props.onCreateLink &&\n-      !(suggestedLinkTitle === this.initialValue) &&\n-      suggestedLinkTitle.length > 0 &&\n-      !looksLikeUrl;\n-\n-    const hasResults =\n-      !!suggestedLinkTitle && (showCreateLink || results.length > 0);\n-\n     return (\n       <Wrapper>\n         <Input\n           ref={this.inputRef}\n           value={value}\n-          placeholder={\n-            showCreateLink\n-              ? dictionary.findOrCreateDoc\n-              : dictionary.searchOrPasteLink\n-          }\n+          placeholder={dictionary.enterLink}\n           onKeyDown={this.handleKeyDown}\n           onPaste={this.handlePaste}\n           onChange={this.handleSearch}\n@@ -360,70 +216,6 @@ class LinkEditor extends React.Component<Props, State> {\n             <CloseIcon />\n           </ToolbarButton>\n         </Tooltip>\n-\n-        <SearchResults\n-          ref={this.resultsRef}\n-          $hasResults={hasResults}\n-          role=\""menu\""\n-        >\n-          <ResizingHeightContainer>\n-            {hasResults && (\n-              <>\n-                {results.map((result, index) => (\n-                  <LinkSearchResult\n-                    key={result.url}\n-                    title={result.title}\n-                    subtitle={result.subtitle}\n-                    icon={result.icon ?? <DocumentIcon />}\n-                    onPointerMove={() => this.handleFocusLink(index)}\n-                    onClick={this.handleSelectLink(result.url, result.title)}\n-                    selected={index === selectedIndex}\n-                    containerRef={this.resultsRef}\n-                  />\n-                ))}\n-\n-                {showCreateLink && (\n-                  <>\n-                    <LinkSearchResult\n-                      key=\""create\""\n-                      containerRef={this.resultsRef}\n-                      title={suggestedLinkTitle}\n-                      subtitle={dictionary.createNewDoc}\n-                      icon={<PlusIcon />}\n-                      onPointerMove={() => this.handleFocusLink(results.length)}\n-                      onClick={async () => {\n-                        await this.handleCreateLink(suggestedLinkTitle);\n-\n-                        if (this.initialSelectionLength) {\n-                          this.moveSelectionToEnd();\n-                        }\n-                      }}\n-                      selected={results.length === selectedIndex}\n-                    />\n-                    <LinkSearchResult\n-                      key=\""create-nested\""\n-                      containerRef={this.resultsRef}\n-                      title={suggestedLinkTitle}\n-                      subtitle={dictionary.createNewChildDoc}\n-                      icon={<PlusIcon />}\n-                      onPointerMove={() =>\n-                        this.handleFocusLink(results.length + 1)\n-                      }\n-                      onClick={async () => {\n-                        await this.handleCreateLink(suggestedLinkTitle, true);\n-\n-                        if (this.initialSelectionLength) {\n-                          this.moveSelectionToEnd();\n-                        }\n-                      }}\n-                      selected={results.length + 1 === selectedIndex}\n-                    />\n-                  </>\n-                )}\n-              </>\n-            )}\n-          </ResizingHeightContainer>\n-        </SearchResults>\n       </Wrapper>\n     );\n   }\n@@ -434,29 +226,4 @@ const Wrapper = styled(Flex)`\n   gap: 8px;\n `;\n \n-const SearchResults = styled(Scrollable)<{ $hasResults: boolean }>`\n-  background: ${s(\""menuBackground\"")};\n-  box-shadow: ${(props) => (props.$hasResults ? s(\""menuShadow\"") : \""none\"")};\n-  clip-path: inset(0px -100px -100px -100px);\n-  position: absolute;\n-  top: 100%;\n-  width: 100%;\n-  height: auto;\n-  left: 0;\n-  margin-top: -6px;\n-  border-radius: 0 0 4px 4px;\n-  padding: ${(props) => (props.$hasResults ? \""8px 0\"" : \""0\"")};\n-  max-height: 240px;\n-  ${hideScrollbars()}\n-\n-  @media (hover: none) and (pointer: coarse) {\n-    position: fixed;\n-    top: auto;\n-    bottom: 40px;\n-    border-radius: 0;\n-    max-height: 50vh;\n-    padding: 8px 8px 4px;\n-  }\n-`;\n-\n export default LinkEditor;\n\ndiff --git a/app/editor/components/LinkSearchResult.tsx b/app/editor/components/LinkSearchResult.tsx\ndeleted file mode 100644\nindex 95de9954b4e2..000000000000\n--- a/app/editor/components/LinkSearchResult.tsx\n+++ /dev/null\n@@ -1,109 +0,0 @@\n-import * as React from \""react\"";\n-import scrollIntoView from \""scroll-into-view-if-needed\"";\n-import styled, { css } from \""styled-components\"";\n-import { s, ellipsis } from \""@shared/styles\"";\n-\n-type Props = React.HTMLAttributes<HTMLDivElement> & {\n-  icon: React.ReactNode;\n-  selected: boolean;\n-  title: React.ReactNode;\n-  subtitle?: React.ReactNode;\n-  containerRef: React.RefObject<HTMLDivElement>;\n-};\n-\n-function LinkSearchResult({\n-  title,\n-  subtitle,\n-  containerRef,\n-  selected,\n-  icon,\n-  ...rest\n-}: Props) {\n-  const ref = React.useCallback(\n-    (node: HTMLElement | null) => {\n-      if (selected && node) {\n-        scrollIntoView(node, {\n-          scrollMode: \""if-needed\"",\n-          block: \""center\"",\n-          boundary: (parent) =>\n-            // Prevents body and other parent elements from being scrolled\n-            parent !== containerRef.current,\n-        });\n-      }\n-    },\n-    [containerRef, selected]\n-  );\n-\n-  return (\n-    <ListItem\n-      ref={ref}\n-      compact={!subtitle}\n-      selected={selected}\n-      role=\""menuitem\""\n-      {...rest}\n-    >\n-      <IconWrapper selected={selected}>{icon}</IconWrapper>\n-      <Content>\n-        <Title title={title}>{title}</Title>\n-        {subtitle ? <Subtitle selected={selected}>{subtitle}</Subtitle> : null}\n-      </Content>\n-    </ListItem>\n-  );\n-}\n-\n-const Content = styled.div`\n-  overflow: hidden;\n-`;\n-\n-const IconWrapper = styled.span<{ selected: boolean }>`\n-  flex-shrink: 0;\n-  margin-right: 4px;\n-  height: 24px;\n-  opacity: 0.8;\n-\n-  ${(props) =>\n-    props.selected &&\n-    css`\n-      svg {\n-        fill: ${s(\""accentText\"")};\n-        color: ${s(\""accentText\"")};\n-      }\n-    `};\n-`;\n-\n-const ListItem = styled.div<{\n-  selected: boolean;\n-  compact: boolean;\n-}>`\n-  display: flex;\n-  align-items: center;\n-  padding: 8px;\n-  border-radius: 4px;\n-  margin: 0 6px;\n-  color: ${(props) => (props.selected ? s(\""accentText\"") : s(\""textSecondary\""))};\n-  background: ${(props) => (props.selected ? s(\""accent\"") : \""transparent\"")};\n-  font-family: ${s(\""fontFamily\"")};\n-  text-decoration: none;\n-  overflow: hidden;\n-  white-space: nowrap;\n-  cursor: var(--pointer);\n-  user-select: none;\n-  line-height: ${(props) => (props.compact ? \""inherit\"" : \""1.2\"")};\n-  height: ${(props) => (props.compact ? \""28px\"" : \""auto\"")};\n-`;\n-\n-const Title = styled.div`\n-  ${ellipsis()}\n-  font-size: 14px;\n-  font-weight: 500;\n-`;\n-\n-const Subtitle = styled.div<{\n-  selected: boolean;\n-}>`\n-  ${ellipsis()}\n-  font-size: 13px;\n-  opacity: ${(props) => (props.selected ? 0.75 : 0.5)};\n-`;\n-\n-export default LinkSearchResult;\n\ndiff --git a/app/editor/components/LinkToolbar.tsx b/app/editor/components/LinkToolbar.tsx\ndeleted file mode 100644\nindex 92707544b4ae..000000000000\n--- a/app/editor/components/LinkToolbar.tsx\n+++ /dev/null\n@@ -1,146 +0,0 @@\n-import { EditorView } from \""prosemirror-view\"";\n-import * as React from \""react\"";\n-import createAndInsertLink from \""@shared/editor/commands/createAndInsertLink\"";\n-import { creatingUrlPrefix } from \""@shared/utils/urls\"";\n-import useDictionary from \""~/hooks/useDictionary\"";\n-import useEventListener from \""~/hooks/useEventListener\"";\n-import { useEditor } from \""./EditorContext\"";\n-import FloatingToolbar from \""./FloatingToolbar\"";\n-import LinkEditor, { SearchResult } from \""./LinkEditor\"";\n-\n-type Props = {\n-  isActive: boolean;\n-  onCreateLink?: (title: string) => Promise<string>;\n-  onSearchLink?: (term: string) => Promise<SearchResult[]>;\n-  onClickLink: (\n-    href: string,\n-    event: React.MouseEvent<HTMLButtonElement>\n-  ) => void;\n-  onClose: () => void;\n-};\n-\n-function isActive(view: EditorView, active: boolean): boolean {\n-  try {\n-    const { selection } = view.state;\n-    const paragraph = view.domAtPos(selection.from);\n-    return active && !!paragraph.node;\n-  } catch (err) {\n-    return false;\n-  }\n-}\n-\n-export default function LinkToolbar({\n-  onCreateLink,\n-  onSearchLink,\n-  onClickLink,\n-  onClose,\n-  ...rest\n-}: Props) {\n-  const dictionary = useDictionary();\n-  const { view } = useEditor();\n-  const menuRef = React.useRef<HTMLDivElement>(null);\n-\n-  useEventListener(\""mousedown\"", (event: Event) => {\n-    if (\n-      event.target instanceof HTMLElement &&\n-      menuRef.current &&\n-      menuRef.current.contains(event.target)\n-    ) {\n-      return;\n-    }\n-    onClose();\n-  });\n-\n-  const handleOnCreateLink = React.useCallback(\n-    async (title: string, nested?: boolean) => {\n-      onClose();\n-      view.focus();\n-\n-      if (!onCreateLink) {\n-        return;\n-      }\n-\n-      const { dispatch, state } = view;\n-      const { from, to } = state.selection;\n-      if (from !== to) {\n-        // selection must be collapsed\n-        return;\n-      }\n-\n-      const href = `${creatingUrlPrefix}#${title}\u2026`;\n-\n-      // Insert a placeholder link\n-      dispatch(\n-        view.state.tr\n-          .insertText(title, from, to)\n-          .addMark(\n-            from,\n-            to + title.length,\n-            state.schema.marks.link.create({ href })\n-          )\n-      );\n-\n-      return createAndInsertLink(view, title, href, {\n-        nested,\n-        onCreateLink,\n-        dictionary,\n-      });\n-    },\n-    [onCreateLink, onClose, view, dictionary]\n-  );\n-\n-  const handleOnSelectLink = React.useCallback(\n-    ({\n-      href,\n-      title,\n-    }: {\n-      href: string;\n-      title: string;\n-      from: number;\n-      to: number;\n-    }) => {\n-      onClose();\n-      view.focus();\n-\n-      const { dispatch, state } = view;\n-      const { from, to } = state.selection;\n-      if (from !== to) {\n-        // selection must be collapsed\n-        return;\n-      }\n-\n-      dispatch(\n-        view.state.tr\n-          .insertText(title, from, to)\n-          .addMark(\n-            from,\n-            to + title.length,\n-            state.schema.marks.link.create({ href })\n-          )\n-      );\n-    },\n-    [onClose, view]\n-  );\n-\n-  const { selection } = view.state;\n-  const active = isActive(view, rest.isActive);\n-\n-  return (\n-    <FloatingToolbar ref={menuRef} active={active} width={336}>\n-      {active && (\n-        <LinkEditor\n-          key={`${selection.from}-${selection.to}`}\n-          from={selection.from}\n-          to={selection.to}\n-          onCreateLink={onCreateLink ? handleOnCreateLink : undefined}\n-          onSelectLink={handleOnSelectLink}\n-          onRemoveLink={onClose}\n-          onClickLink={onClickLink}\n-          onSearchLink={onSearchLink}\n-          dictionary={dictionary}\n-          view={view}\n-        />\n-      )}\n-    </FloatingToolbar>\n-  );\n-}\n\ndiff --git a/app/editor/components/MentionMenu.tsx b/app/editor/components/MentionMenu.tsx\nindex 8f7c33028d16..87dc7c95d3c5 100644\n--- a/app/editor/components/MentionMenu.tsx\n+++ b/app/editor/components/MentionMenu.tsx\n@@ -1,15 +1,20 @@\n+import { isEmail } from \""class-validator\"";\n import { observer } from \""mobx-react\"";\n+import { DocumentIcon, PlusIcon } from \""outline-icons\"";\n import * as React from \""react\"";\n import { useTranslation } from \""react-i18next\"";\n import { useLocation } from \""react-router-dom\"";\n import { toast } from \""sonner\"";\n import { v4 } from \""uuid\"";\n+import Icon from \""@shared/components/Icon\"";\n import { MenuItem } from \""@shared/editor/types\"";\n import { MentionType } from \""@shared/types\"";\n import parseDocumentSlug from \""@shared/utils/parseDocumentSlug\"";\n+import Document from \""~/models/Document\"";\n import User from \""~/models/User\"";\n import { Avatar, AvatarSize } from \""~/components/Avatar\"";\n import Flex from \""~/components/Flex\"";\n+import { DocumentsSection, UserSection } from \""~/actions/sections\"";\n import useRequest from \""~/hooks/useRequest\"";\n import useStores from \""~/hooks/useStores\"";\n import { client } from \""~/utils/ApiClient\"";\n@@ -19,9 +24,6 @@ import SuggestionsMenu, {\n import SuggestionsMenuItem from \""./SuggestionsMenuItem\"";\n \n interface MentionItem extends MenuItem {\n-  name: string;\n-  user: User;\n-  appendSpace: boolean;\n   attrs: {\n     id: string;\n     type: MentionType;\n@@ -40,17 +42,22 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n   const [loaded, setLoaded] = React.useState(false);\n   const [items, setItems] = React.useState<MentionItem[]>([]);\n   const { t } = useTranslation();\n-  const { auth, users } = useStores();\n+  const { auth, documents, users } = useStores();\n+  const actorId = auth.currentUserId;\n   const location = useLocation();\n   const documentId = parseDocumentSlug(location.pathname);\n-  const { data, loading, request } = useRequest(\n-    React.useCallback(\n-      () =>\n-        documentId\n-          ? users.fetchPage({ id: documentId, query: search })\n-          : Promise.resolve([]),\n-      [users, documentId, search]\n-    )\n+  const { data, loading, request } = useRequest<{\n+    documents: Document[];\n+    users: User[];\n+  }>(\n+    React.useCallback(async () => {\n+      const res = await client.post(\""/suggestions.mention\"", { query: search });\n+\n+      return {\n+        documents: res.data.documents.map(documents.add),\n+        users: res.data.users.map(users.add),\n+      };\n+    }, [search, documents, users])\n   );\n \n   React.useEffect(() => {\n@@ -60,28 +67,92 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n   }, [request, isActive]);\n \n   React.useEffect(() => {\n-    if (data && !loading) {\n-      const items = data.map((user) => ({\n-        name: \""mention\"",\n-        user,\n-        title: user.name,\n-        appendSpace: true,\n-        attrs: {\n-          id: v4(),\n-          type: MentionType.User,\n-          modelId: user.id,\n-          actorId: auth.currentUserId ?? undefined,\n-          label: user.name,\n-        },\n-      }));\n+    if (data && actorId && !loading) {\n+      const items = data.users\n+        .map(\n+          (user) =>\n+            ({\n+              name: \""mention\"",\n+              icon: (\n+                <Flex\n+                  align=\""center\""\n+                  justify=\""center\""\n+                  style={{ width: 24, height: 24 }}\n+                >\n+                  <Avatar\n+                    model={user}\n+                    showBorder={false}\n+                    alt={t(\""Profile picture\"")}\n+                    size={AvatarSize.Small}\n+                  />\n+                </Flex>\n+              ),\n+              title: user.name,\n+              section: UserSection,\n+              appendSpace: true,\n+              attrs: {\n+                id: v4(),\n+                type: MentionType.User,\n+                modelId: user.id,\n+                actorId,\n+                label: user.name,\n+              },\n+            } as MentionItem)\n+        )\n+        .concat(\n+          data.documents.map(\n+            (doc) =>\n+              ({\n+                name: \""mention\"",\n+                icon: doc.icon ? (\n+                  <Icon value={doc.icon} color={doc.color ?? undefined} />\n+                ) : (\n+                  <DocumentIcon />\n+                ),\n+                title: doc.title,\n+                subtitle: doc.collection?.name,\n+                section: DocumentsSection,\n+                appendSpace: true,\n+                attrs: {\n+                  id: v4(),\n+                  type: MentionType.Document,\n+                  modelId: doc.id,\n+                  actorId,\n+                  label: doc.title,\n+                },\n+              } as MentionItem)\n+          )\n+        )\n+        .concat([\n+          {\n+            name: \""link\"",\n+            icon: <PlusIcon />,\n+            title: search?.trim(),\n+            section: DocumentsSection,\n+            subtitle: t(\""Create a new doc\""),\n+            visible: !!search && !isEmail(search),\n+            priority: -1,\n+            appendSpace: true,\n+            attrs: {\n+              id: v4(),\n+              type: MentionType.Document,\n+              modelId: v4(),\n+              actorId,\n+              label: search,\n+            },\n+          } as MentionItem,\n+        ]);\n \n       setItems(items);\n       setLoaded(true);\n     }\n-  }, [auth.currentUserId, loading, data]);\n+  }, [t, actorId, loading, search, data]);\n \n   const handleSelect = React.useCallback(\n     async (item: MentionItem) => {\n+      if (item.attrs.type === MentionType.Document) {\n+        return;\n+      }\n       // Check if the mentioned user has access to the document\n       const res = await client.post(\""/documents.users\"", {\n         id: documentId,\n@@ -125,21 +196,9 @@ function MentionMenu({ search, isActive, ...rest }: Props) {\n         <SuggestionsMenuItem\n           onClick={options.onClick}\n           selected={options.selected}\n+          subtitle={item.subtitle}\n           title={item.title}\n-          icon={\n-            <Flex\n-              align=\""center\""\n-              justify=\""center\""\n-              style={{ width: 24, height: 24 }}\n-            >\n-              <Avatar\n-                model={item.user}\n-                showBorder={false}\n-                alt={t(\""Profile picture\"")}\n-                size={AvatarSize.Small}\n-              />\n-            </Flex>\n-          }\n+          icon={item.icon}\n         />\n       )}\n       items={items}\n\ndiff --git a/app/editor/components/SelectionToolbar.tsx b/app/editor/components/SelectionToolbar.tsx\nindex ef596eaf033f..18257785f340 100644\n--- a/app/editor/components/SelectionToolbar.tsx\n+++ b/app/editor/components/SelectionToolbar.tsx\n@@ -1,7 +1,6 @@\n import some from \""lodash/some\"";\n import { EditorState, NodeSelection, TextSelection } from \""prosemirror-state\"";\n import * as React from \""react\"";\n-import createAndInsertLink from \""@shared/editor/commands/createAndInsertLink\"";\n import filterExcessSeparators from \""@shared/editor/lib/filterExcessSeparators\"";\n import { getMarkRange } from \""@shared/editor/queries/getMarkRange\"";\n import { isInCode } from \""@shared/editor/queries/isInCode\"";\n@@ -9,7 +8,6 @@ import { isMarkActive } from \""@shared/editor/queries/isMarkActive\"";\n import { isNodeActive } from \""@shared/editor/queries/isNodeActive\"";\n import { getColumnIndex, getRowIndex } from \""@shared/editor/queries/table\"";\n import { MenuItem } from \""@shared/editor/types\"";\n-import { creatingUrlPrefix } from \""@shared/utils/urls\"";\n import useBoolean from \""~/hooks/useBoolean\"";\n import useDictionary from \""~/hooks/useDictionary\"";\n import useEventListener from \""~/hooks/useEventListener\"";\n@@ -26,7 +24,7 @@ import getTableColMenuItems from \""../menus/tableCol\"";\n import getTableRowMenuItems from \""../menus/tableRow\"";\n import { useEditor } from \""./EditorContext\"";\n import FloatingToolbar from \""./FloatingToolbar\"";\n-import LinkEditor, { SearchResult } from \""./LinkEditor\"";\n+import LinkEditor from \""./LinkEditor\"";\n import ToolbarMenu from \""./ToolbarMenu\"";\n \n type Props = {\n@@ -37,12 +35,10 @@ type Props = {\n   canUpdate?: boolean;\n   onOpen: () => void;\n   onClose: () => void;\n-  onSearchLink?: (term: string) => Promise<SearchResult[]>;\n   onClickLink: (\n     href: string,\n     event: MouseEvent | React.MouseEvent<HTMLButtonElement>\n   ) => void;\n-  onCreateLink?: (title: string) => Promise<string>;\n };\n \n function useIsActive(state: EditorState) {\n@@ -149,40 +145,6 @@ export default function SelectionToolbar(props: Props) {\n     };\n   }, [isActive, previousIsActive, readOnly, view]);\n \n-  const handleOnCreateLink = async (\n-    title: string,\n-    nested?: boolean\n-  ): Promise<void> => {\n-    const { onCreateLink } = props;\n-\n-    if (!onCreateLink) {\n-      return;\n-    }\n-\n-    const { dispatch, state } = view;\n-    const { from, to } = state.selection;\n-    if (from === to) {\n-      // Do not display a selection toolbar for collapsed selections\n-      return;\n-    }\n-\n-    const href = `${creatingUrlPrefix}${title}\u2026`;\n-    const markType = state.schema.marks.link;\n-\n-    // Insert a placeholder link\n-    dispatch(\n-      view.state.tr\n-        .removeMark(from, to, markType)\n-        .addMark(from, to, markType.create({ href }))\n-    );\n-\n-    return createAndInsertLink(view, title, href, {\n-      nested,\n-      onCreateLink,\n-      dictionary,\n-    });\n-  };\n-\n   const handleOnSelectLink = ({\n     href,\n     from,\n@@ -203,8 +165,7 @@ export default function SelectionToolbar(props: Props) {\n     );\n   };\n \n-  const { onCreateLink, isTemplate, rtl, canComment, canUpdate, ...rest } =\n-    props;\n+  const { isTemplate, rtl, canComment, canUpdate, ...rest } = props;\n   const { state } = view;\n   const { selection } = state;\n   const isDividerSelection = isNodeActive(state.schema.nodes.hr)(state);\n@@ -283,8 +244,6 @@ export default function SelectionToolbar(props: Props) {\n           from={link.from}\n           to={link.to}\n           onClickLink={props.onClickLink}\n-          onSearchLink={props.onSearchLink}\n-          onCreateLink={onCreateLink ? handleOnCreateLink : undefined}\n           onSelectLink={handleOnSelectLink}\n         />\n       ) : (\n\ndiff --git a/app/editor/components/SuggestionsMenu.tsx b/app/editor/components/SuggestionsMenu.tsx\nindex dc8cd74df4fc..e3a9042d8c57 100644\n--- a/app/editor/components/SuggestionsMenu.tsx\n+++ b/app/editor/components/SuggestionsMenu.tsx\n@@ -1,7 +1,8 @@\n import commandScore from \""command-score\"";\n import capitalize from \""lodash/capitalize\"";\n+import orderBy from \""lodash/orderBy\"";\n import * as React from \""react\"";\n-import { Trans } from \""react-i18next\"";\n+import { Trans, useTranslation } from \""react-i18next\"";\n import { VisuallyHidden } from \""reakit/VisuallyHidden\"";\n import { toast } from \""sonner\"";\n import styled from \""styled-components\"";\n@@ -13,6 +14,7 @@ import { MenuItem } from \""@shared/editor/types\"";\n import { depths, s } from \""@shared/styles\"";\n import { getEventFiles } from \""@shared/utils/files\"";\n import { AttachmentValidation } from \""@shared/validations\"";\n+import Header from \""~/components/ContextMenu/Header\"";\n import { Portal } from \""~/components/Portal\"";\n import Scrollable from \""~/components/Scrollable\"";\n import useDictionary from \""~/hooks/useDictionary\"";\n@@ -78,8 +80,9 @@ export type Props<T extends MenuItem = MenuItem> = {\n };\n \n function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n-  const { view, commands } = useEditor();\n+  const { view, commands, props: editorProps } = useEditor();\n   const dictionary = useDictionary();\n+  const { t } = useTranslation();\n   const hasActivated = React.useRef(false);\n   const pointerRef = React.useRef<{ clientX: number; clientY: number }>({\n     clientX: 0,\n@@ -250,6 +253,16 @@ function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n       props.onSelect?.(item);\n \n       switch (item.name) {\n+        case \""link\"":\n+          insertNode({\n+            ...item,\n+            name: \""mention\"",\n+          });\n+          void editorProps.onCreateLink?.({\n+            title: item.attrs.label,\n+            id: item.attrs.modelId,\n+          });\n+          return;\n         case \""image\"":\n           return triggerFilePick(\n             AttachmentValidation.imageContentTypes.join(\"", \"")\n@@ -264,7 +277,7 @@ function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n           insertNode(item);\n       }\n     },\n-    [insertNode]\n+    [editorProps, props, insertNode]\n   );\n \n   const close = React.useCallback(() => {\n@@ -414,6 +427,10 @@ function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n         return true;\n       }\n \n+      if (item.visible === false) {\n+        return false;\n+      }\n+\n       // Some extensions may be disabled, remove corresponding menu items\n       if (\n         item.name &&\n@@ -445,16 +462,22 @@ function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n     });\n \n     return filterExcessSeparators(\n-      filtered\n-        .map((item) => ({\n+      orderBy(\n+        filtered.map((item) => ({\n           item,\n+          section:\n+            \""section\"" in item && item.section && \""priority\"" in item.section\n+              ? (item.section.priority as number) ?? 0\n+              : 0,\n+          priority: \""priority\"" in item ? item.priority : 0,\n           score:\n             searchInput && item.title\n               ? commandScore(item.title, searchInput)\n               : 0,\n-        }))\n-        .sort((a, b) => b.score - a.score)\n-        .map(({ item }) => item)\n+        })),\n+        [\""section\"", \""priority\"", \""score\""],\n+        [\""desc\"", \""desc\"", \""desc\""]\n+      ).map(({ item }) => item)\n     );\n   }, [commands, props]);\n \n@@ -555,6 +578,7 @@ function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n \n   const { isActive, uploadFile } = props;\n   const items = filtered;\n+  let previousHeading: string | undefined;\n \n   return (\n     <Portal>\n@@ -614,18 +638,29 @@ function SuggestionsMenu<T extends MenuItem>(props: Props<T>) {\n                     }\n                   };\n \n-                  return (\n-                    <ListItem\n-                      key={index}\n-                      onPointerMove={handlePointerMove}\n-                      onPointerDown={handlePointerDown}\n-                    >\n-                      {props.renderMenuItem(item as any, index, {\n-                        selected: index === selectedIndex,\n-                        onClick: () => handleClickItem(item),\n-                      })}\n-                    </ListItem>\n+                  const currentHeading =\n+                    \""section\"" in item ? item.section?.({ t }) : undefined;\n+\n+                  const response = (\n+                    <>\n+                      {currentHeading !== previousHeading && (\n+                        <Header key={currentHeading}>{currentHeading}</Header>\n+                      )}\n+                      <ListItem\n+                        key={index}\n+                        onPointerMove={handlePointerMove}\n+                        onPointerDown={handlePointerDown}\n+                      >\n+                        {props.renderMenuItem(item as any, index, {\n+                          selected: index === selectedIndex,\n+                          onClick: () => handleClickItem(item),\n+                        })}\n+                      </ListItem>\n+                    </>\n                   );\n+\n+                  previousHeading = currentHeading;\n+                  return response;\n                 })}\n                 {items.length === 0 && (\n                   <ListItem>\n\ndiff --git a/app/editor/components/SuggestionsMenuItem.tsx b/app/editor/components/SuggestionsMenuItem.tsx\nindex a64d4a8df67c..23b32ee854f7 100644\n--- a/app/editor/components/SuggestionsMenuItem.tsx\n+++ b/app/editor/components/SuggestionsMenuItem.tsx\n@@ -56,7 +56,7 @@ function SuggestionsMenuItem({\n       icon={icon}\n     >\n       {title}\n-      {subtitle && <Subtitle $active={selected}>{subtitle}</Subtitle>}\n+      {subtitle && <Subtitle $active={selected}>&middot; {subtitle}</Subtitle>}\n       {shortcut && <Shortcut $active={selected}>{shortcut}</Shortcut>}\n     </MenuItem>\n   );\n\ndiff --git a/app/editor/extensions/PasteHandler.ts b/app/editor/extensions/PasteHandler.ts\nindex a16f0389744d..218597f250b8 100644\n--- a/app/editor/extensions/PasteHandler.ts\n+++ b/app/editor/extensions/PasteHandler.ts\n@@ -1,13 +1,14 @@\n import { toggleMark } from \""prosemirror-commands\"";\n import { Slice } from \""prosemirror-model\"";\n import { Plugin } from \""prosemirror-state\"";\n+import { v4 } from \""uuid\"";\n import { LANGUAGES } from \""@shared/editor/extensions/Prism\"";\n import Extension from \""@shared/editor/lib/Extension\"";\n import isMarkdown from \""@shared/editor/lib/isMarkdown\"";\n import normalizePastedMarkdown from \""@shared/editor/lib/markdown/normalize\"";\n import { isInCode } from \""@shared/editor/queries/isInCode\"";\n import { isInList } from \""@shared/editor/queries/isInList\"";\n-import { IconType } from \""@shared/types\"";\n+import { IconType, MentionType } from \""@shared/types\"";\n import { determineIconType } from \""@shared/utils/icon\"";\n import parseDocumentSlug from \""@shared/utils/parseDocumentSlug\"";\n import { isDocumentUrl, isUrl } from \""@shared/utils/urls\"";\n@@ -185,15 +186,31 @@ export default class PasteHandler extends Extension {\n                           return;\n                         }\n                         if (document) {\n-                          const { hash } = new URL(text);\n+                          if (state.schema.nodes.mention) {\n+                            view.dispatch(\n+                              view.state.tr.replaceWith(\n+                                state.selection.from,\n+                                state.selection.to,\n+                                state.schema.nodes.mention.create({\n+                                  type: MentionType.Document,\n+                                  modelId: document.id,\n+                                  label: document.titleWithDefault,\n+                                  id: v4(),\n+                                })\n+                              )\n+                            );\n+                          } else {\n+                            const { hash } = new URL(text);\n+                            const hasEmoji =\n+                              determineIconType(document.icon) ===\n+                              IconType.Emoji;\n \n-                          const hasEmoji =\n-                            determineIconType(document.icon) === IconType.Emoji;\n+                            const title = `${\n+                              hasEmoji ? document.icon + \"" \"" : \""\""\n+                            }${document.titleWithDefault}`;\n \n-                          const title = `${\n-                            hasEmoji ? document.icon + \"" \"" : \""\""\n-                          }${document.titleWithDefault}`;\n-                          insertLink(`${document.path}${hash}`, title);\n+                            insertLink(`${document.path}${hash}`, title);\n+                          }\n                         }\n                       })\n                       .catch(() => {\n\ndiff --git a/app/editor/index.tsx b/app/editor/index.tsx\nindex eff1e015febf..0e8fe99a4cb9 100644\n--- a/app/editor/index.tsx\n+++ b/app/editor/index.tsx\n@@ -1,5 +1,6 @@\n /* global File Promise */\n import { PluginSimple } from \""markdown-it\"";\n+import { observable } from \""mobx\"";\n import { Observer } from \""mobx-react\"";\n import { darken, transparentize } from \""polished\"";\n import { baseKeymap } from \""prosemirror-commands\"";\n@@ -39,18 +40,18 @@ import Mark from \""@shared/editor/marks/Mark\"";\n import { basicExtensions as extensions } from \""@shared/editor/nodes\"";\n import Node from \""@shared/editor/nodes/Node\"";\n import ReactNode from \""@shared/editor/nodes/ReactNode\"";\n-import { ComponentProps, EventType } from \""@shared/editor/types\"";\n+import { ComponentProps } from \""@shared/editor/types\"";\n import { ProsemirrorData, UserPreferences } from \""@shared/types\"";\n import { ProsemirrorHelper } from \""@shared/utils/ProsemirrorHelper\"";\n import EventEmitter from \""@shared/utils/events\"";\n+import Document from \""~/models/Document\"";\n import Flex from \""~/components/Flex\"";\n import { PortalContext } from \""~/components/Portal\"";\n import { Dictionary } from \""~/hooks/useDictionary\"";\n+import { Properties } from \""~/types\"";\n import Logger from \""~/utils/Logger\"";\n import ComponentView from \""./components/ComponentView\"";\n import EditorContext from \""./components/EditorContext\"";\n-import { SearchResult } from \""./components/LinkEditor\"";\n-import LinkToolbar from \""./components/LinkToolbar\"";\n import { NodeViewRenderer } from \""./components/NodeViewRenderer\"";\n import SelectionToolbar from \""./components/SelectionToolbar\"";\n import WithTheme from \""./components/WithTheme\"";\n@@ -117,13 +118,11 @@ export type Props = {\n   /** Callback when a file upload ends */\n   onFileUploadStop?: () => void;\n   /** Callback when a link is created, should return url to created document */\n-  onCreateLink?: (title: string) => Promise<string>;\n-  /** Callback when user searches for documents from link insert interface */\n-  onSearchLink?: (term: string) => Promise<SearchResult[]>;\n+  onCreateLink?: (params: Properties<Document>) => Promise<string>;\n   /** Callback when user clicks on any link in the document */\n   onClickLink: (\n     href: string,\n-    event: MouseEvent | React.MouseEvent<HTMLButtonElement>\n+    event?: MouseEvent | React.MouseEvent<HTMLButtonElement>\n   ) => void;\n   /** Callback when user presses any key with document focused */\n   onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n@@ -147,8 +146,6 @@ type State = {\n   isEditorFocused: boolean;\n   /** If the toolbar for a text selection is visible */\n   selectionToolbarOpen: boolean;\n-  /** If the insert link toolbar is visible */\n-  linkToolbarOpen: boolean;\n };\n \n /**\n@@ -178,7 +175,6 @@ export class Editor extends React.PureComponent<\n     isRTL: false,\n     isEditorFocused: false,\n     selectionToolbarOpen: false,\n-    linkToolbarOpen: false,\n   };\n \n   isInitialized = false;\n@@ -199,7 +195,7 @@ export class Editor extends React.PureComponent<\n   };\n \n   widgets: { [name: string]: (props: WidgetProps) => React.ReactElement };\n-  renderers: Set<NodeViewRenderer<ComponentProps>> = new Set();\n+  renderers: Set<NodeViewRenderer<ComponentProps>> = observable.set();\n   nodes: { [name: string]: NodeSpec };\n   marks: { [name: string]: MarkSpec };\n   commands: Record<string, CommandFactory>;\n@@ -207,11 +203,6 @@ export class Editor extends React.PureComponent<\n   events = new EventEmitter();\n   mutationObserver?: MutationObserver;\n \n-  public constructor(props: Props & ThemeProps<DefaultTheme>) {\n-    super(props);\n-    this.events.on(EventType.LinkToolbarOpen, this.handleOpenLinkToolbar);\n-  }\n-\n   /**\n    * We use componentDidMount instead of constructor as the init method requires\n    * that the dom is already mounted.\n@@ -273,7 +264,6 @@ export class Editor extends React.PureComponent<\n     if (\n       !this.isBlurred &&\n       !this.state.isEditorFocused &&\n-      !this.state.linkToolbarOpen &&\n       !this.state.selectionToolbarOpen\n     ) {\n       this.isBlurred = true;\n@@ -282,9 +272,7 @@ export class Editor extends React.PureComponent<\n \n     if (\n       this.isBlurred &&\n-      (this.state.isEditorFocused ||\n-        this.state.linkToolbarOpen ||\n-        this.state.selectionToolbarOpen)\n+      (this.state.isEditorFocused || this.state.selectionToolbarOpen)\n     ) {\n       this.isBlurred = false;\n       this.props.onFocus?.();\n@@ -783,23 +771,6 @@ export class Editor extends React.PureComponent<\n     }));\n   };\n \n-  private handleOpenLinkToolbar = () => {\n-    if (this.state.selectionToolbarOpen) {\n-      return;\n-    }\n-    this.setState((state) => ({\n-      ...state,\n-      linkToolbarOpen: true,\n-    }));\n-  };\n-\n-  private handleCloseLinkToolbar = () => {\n-    this.setState((state) => ({\n-      ...state,\n-      linkToolbarOpen: false,\n-    }));\n-  };\n-\n   public render() {\n     const { readOnly, canUpdate, grow, style, className, onKeyDown } =\n       this.props;\n@@ -837,18 +808,7 @@ export class Editor extends React.PureComponent<\n                 isTemplate={this.props.template === true}\n                 onOpen={this.handleOpenSelectionToolbar}\n                 onClose={this.handleCloseSelectionToolbar}\n-                onSearchLink={this.props.onSearchLink}\n-                onClickLink={this.props.onClickLink}\n-                onCreateLink={this.props.onCreateLink}\n-              />\n-            )}\n-            {!readOnly && this.view && this.marks.link && (\n-              <LinkToolbar\n-                isActive={this.state.linkToolbarOpen}\n-                onCreateLink={this.props.onCreateLink}\n-                onSearchLink={this.props.onSearchLink}\n                 onClickLink={this.props.onClickLink}\n-                onClose={this.handleCloseLinkToolbar}\n               />\n             )}\n             {this.widgets &&\n\ndiff --git a/app/hooks/useDictionary.ts b/app/hooks/useDictionary.ts\nindex 5ea7f68e1106..5b163435264d 100644\n--- a/app/hooks/useDictionary.ts\n+++ b/app/hooks/useDictionary.ts\n@@ -39,7 +39,7 @@ export default function useDictionary() {\n       em: t(\""Italic\""),\n       embedInvalidLink: t(\""Sorry, that link won\u2019t work for this embed type\""),\n       file: t(\""File attachment\""),\n-      findOrCreateDoc: `${t(\""Paste a link, search, or create\"")}\u2026`,\n+      enterLink: `${t(\""Enter a link\"")}\u2026`,\n       h1: t(\""Big heading\""),\n       h2: t(\""Medium heading\""),\n       h3: t(\""Small heading\""),\n\ndiff --git a/app/hooks/useEditorClickHandlers.ts b/app/hooks/useEditorClickHandlers.ts\nindex f34f0b45d754..d37767d51a21 100644\n--- a/app/hooks/useEditorClickHandlers.ts\n+++ b/app/hooks/useEditorClickHandlers.ts\n@@ -1,9 +1,10 @@\n import * as React from \""react\"";\n import { useHistory } from \""react-router-dom\"";\n import { isModKey } from \""@shared/utils/keyboard\"";\n-import { isInternalUrl } from \""@shared/utils/urls\"";\n+import { isDocumentUrl, isInternalUrl } from \""@shared/utils/urls\"";\n import { sharedDocumentPath } from \""~/utils/routeHelpers\"";\n import { isHash } from \""~/utils/urls\"";\n+import useStores from \""./useStores\"";\n \n type Params = {\n   /** The share ID of the document being viewed, if any */\n@@ -12,8 +13,9 @@ type Params = {\n \n export default function useEditorClickHandlers({ shareId }: Params) {\n   const history = useHistory();\n+  const { documents } = useStores();\n   const handleClickLink = React.useCallback(\n-    (href: string, event: MouseEvent) => {\n+    (href: string, event?: MouseEvent) => {\n       // on page hash\n       if (isHash(href)) {\n         window.location.href = href;\n@@ -49,13 +51,20 @@ export default function useEditorClickHandlers({ shareId }: Params) {\n           navigateTo = sharedDocumentPath(shareId, navigateTo);\n         }\n \n+        if (isDocumentUrl(navigateTo)) {\n+          const document = documents.getByUrl(navigateTo);\n+          if (document) {\n+            navigateTo = document.path;\n+          }\n+        }\n+\n         // If we're navigating to a share link from a non-share link then open it in a new tab\n         if (!shareId && navigateTo.startsWith(\""/s/\"")) {\n           window.open(href, \""_blank\"");\n           return;\n         }\n \n-        if (!isModKey(event) && !event.shiftKey) {\n+        if (!event || (!isModKey(event) && !event.shiftKey)) {\n           history.push(navigateTo, { sidebarContext: \""collections\"" }); // optimistic preference of \""collections\""\n         } else {\n           window.open(navigateTo, \""_blank\"");\n\ndiff --git a/app/menus/TemplatesMenu.tsx b/app/menus/TemplatesMenu.tsx\nindex 2afb47a4f1ae..44e09c5a8673 100644\n--- a/app/menus/TemplatesMenu.tsx\n+++ b/app/menus/TemplatesMenu.tsx\n@@ -3,12 +3,12 @@ import { DocumentIcon, ShapesIcon } from \""outline-icons\"";\n import * as React from \""react\"";\n import { useTranslation } from \""react-i18next\"";\n import { MenuButton, useMenuState } from \""reakit/Menu\"";\n+import Icon from \""@shared/components/Icon\"";\n import { TextHelper } from \""@shared/utils/TextHelper\"";\n import Document from \""~/models/Document\"";\n import Button from \""~/components/Button\"";\n import ContextMenu from \""~/components/ContextMenu\"";\n import Template from \""~/components/ContextMenu/Template\"";\n-import Icon from \""~/components/Icon\"";\n import useCurrentUser from \""~/hooks/useCurrentUser\"";\n import useStores from \""~/hooks/useStores\"";\n import { MenuItem } from \""~/types\"";\n\ndiff --git a/app/scenes/Collection/index.tsx b/app/scenes/Collection/index.tsx\nindex f8f391c428de..a3d22b32d778 100644\n--- a/app/scenes/Collection/index.tsx\n+++ b/app/scenes/Collection/index.tsx\n@@ -12,6 +12,7 @@ import {\n } from \""react-router-dom\"";\n import styled from \""styled-components\"";\n import breakpoint from \""styled-components-breakpoint\"";\n+import Icon, { IconTitleWrapper } from \""@shared/components/Icon\"";\n import { s } from \""@shared/styles\"";\n import { StatusFilter } from \""@shared/types\"";\n import { colorPalette } from \""@shared/utils/collections\"";\n@@ -22,7 +23,6 @@ import CenteredContent from \""~/components/CenteredContent\"";\n import { CollectionBreadcrumb } from \""~/components/CollectionBreadcrumb\"";\n import CollectionDescription from \""~/components/CollectionDescription\"";\n import Heading from \""~/components/Heading\"";\n-import Icon, { IconTitleWrapper } from \""~/components/Icon\"";\n import CollectionIcon from \""~/components/Icons/CollectionIcon\"";\n import InputSearchPage from \""~/components/InputSearchPage\"";\n import PlaceholderList from \""~/components/List/Placeholder\"";\n\ndiff --git a/app/scenes/Document/Shared.tsx b/app/scenes/Document/Shared.tsx\nindex 7f0adb5829e1..6e9e113c2394 100644\n--- a/app/scenes/Document/Shared.tsx\n+++ b/app/scenes/Document/Shared.tsx\n@@ -25,6 +25,7 @@ import useBuildTheme from \""~/hooks/useBuildTheme\"";\n import useCurrentUser from \""~/hooks/useCurrentUser\"";\n import { usePostLoginPath } from \""~/hooks/useLastVisitedPath\"";\n import useStores from \""~/hooks/useStores\"";\n+import { client } from \""~/utils/ApiClient\"";\n import { AuthorizationError, OfflineError } from \""~/utils/errors\"";\n import isCloudHosted from \""~/utils/isCloudHosted\"";\n import { changeLanguage, detectLanguage } from \""~/utils/language\"";\n@@ -109,6 +110,16 @@ function SharedDocumentScene(props: Props) {\n     : undefined;\n   const theme = useBuildTheme(response?.team?.customTheme, themeOverride);\n \n+  React.useEffect(() => {\n+    if (shareId) {\n+      client.setShareId(shareId);\n+    }\n+\n+    return () => {\n+      client.setShareId(undefined);\n+    };\n+  }, [shareId]);\n+\n   React.useEffect(() => {\n     if (!user) {\n       void changeLanguage(detectLanguage(), i18n);\n\ndiff --git a/app/scenes/Document/components/DataLoader.tsx b/app/scenes/Document/components/DataLoader.tsx\nindex 43ec422d5cb2..04a3975d41a8 100644\n--- a/app/scenes/Document/components/DataLoader.tsx\n+++ b/app/scenes/Document/components/DataLoader.tsx\n@@ -14,6 +14,7 @@ import useCurrentTeam from \""~/hooks/useCurrentTeam\"";\n import useCurrentUser from \""~/hooks/useCurrentUser\"";\n import usePolicy from \""~/hooks/usePolicy\"";\n import useStores from \""~/hooks/useStores\"";\n+import { Properties } from \""~/types\"";\n import Logger from \""~/utils/Logger\"";\n import {\n   NotFoundError,\n@@ -46,7 +47,10 @@ type Children = (options: {\n   revision: Revision | undefined;\n   abilities: Record<string, boolean>;\n   readOnly: boolean;\n-  onCreateLink: (title: string, nested?: boolean) => Promise<string>;\n+  onCreateLink: (\n+    params: Properties<Document>,\n+    nested?: boolean\n+  ) => Promise<string>;\n   sharedTree: NavigationNode | undefined;\n }) => React.ReactNode;\n \n@@ -143,7 +147,7 @@ function DataLoader({ match, children }: Props) {\n   }, [document?.id, document?.isDeleted, revisionId, views]);\n \n   const onCreateLink = React.useCallback(\n-    async (title: string, nested?: boolean) => {\n+    async (params: Properties<Document>, nested?: boolean) => {\n       if (!document) {\n         throw new Error(\""Document not loaded yet\"");\n       }\n@@ -152,8 +156,8 @@ function DataLoader({ match, children }: Props) {\n         {\n           collectionId: nested ? undefined : document.collectionId,\n           parentDocumentId: nested ? document.id : document.parentDocumentId,\n-          title,\n           data: ProsemirrorHelper.getEmptyDocument(),\n+          ...params,\n         },\n         {\n           publish: document.isDraft ? undefined : true,\n\ndiff --git a/app/scenes/Document/components/Document.tsx b/app/scenes/Document/components/Document.tsx\nindex 554772194bca..f98a938b18e4 100644\n--- a/app/scenes/Document/components/Document.tsx\n+++ b/app/scenes/Document/components/Document.tsx\n@@ -45,7 +45,7 @@ import RegisterKeyDown from \""~/components/RegisterKeyDown\"";\n import { SidebarContextType } from \""~/components/Sidebar/components/SidebarContext\"";\n import withStores from \""~/components/withStores\"";\n import type { Editor as TEditor } from \""~/editor\"";\n-import { SearchResult } from \""~/editor/components/LinkEditor\"";\n+import { Properties } from \""~/types\"";\n import { client } from \""~/utils/ApiClient\"";\n import { emojiToUrl } from \""~/utils/emoji\"";\n \n@@ -90,8 +90,10 @@ type Props = WithTranslation &\n     readOnly: boolean;\n     shareId?: string;\n     tocPosition?: TOCPosition;\n-    onCreateLink?: (title: string, nested?: boolean) => Promise<string>;\n-    onSearchLink?: (term: string) => Promise<SearchResult[]>;\n+    onCreateLink?: (\n+      params: Properties<Document>,\n+      nested?: boolean\n+    ) => Promise<string>;\n   };\n \n @observer\n@@ -571,7 +573,6 @@ class DocumentScene extends React.Component<Props> {\n                         onSynced={this.onSynced}\n                         onFileUploadStart={this.onFileUploadStart}\n                         onFileUploadStop={this.onFileUploadStop}\n-                        onSearchLink={this.props.onSearchLink}\n                         onCreateLink={this.props.onCreateLink}\n                         onChangeTitle={this.handleChangeTitle}\n                         onChangeIcon={this.handleChangeIcon}\n\ndiff --git a/app/scenes/Document/components/DocumentTitle.tsx b/app/scenes/Document/components/DocumentTitle.tsx\nindex 10c15653711b..a36a61cb5218 100644\n--- a/app/scenes/Document/components/DocumentTitle.tsx\n+++ b/app/scenes/Document/components/DocumentTitle.tsx\n@@ -6,6 +6,7 @@ import * as React from \""react\"";\n import { mergeRefs } from \""react-merge-refs\"";\n import styled, { css } from \""styled-components\"";\n import breakpoint from \""styled-components-breakpoint\"";\n+import Icon, { IconTitleWrapper } from \""@shared/components/Icon\"";\n import isMarkdown from \""@shared/editor/lib/isMarkdown\"";\n import normalizePastedMarkdown from \""@shared/editor/lib/markdown/normalize\"";\n import { extraArea, s } from \""@shared/styles\"";\n@@ -19,7 +20,6 @@ import { isModKey } from \""@shared/utils/keyboard\"";\n import { DocumentValidation } from \""@shared/validations\"";\n import ContentEditable, { RefHandle } from \""~/components/ContentEditable\"";\n import { useDocumentContext } from \""~/components/DocumentContext\"";\n-import Icon, { IconTitleWrapper } from \""~/components/Icon\"";\n import { PopoverButton } from \""~/components/IconPicker/components/PopoverButton\"";\n import useBoolean from \""~/hooks/useBoolean\"";\n import usePolicy from \""~/hooks/usePolicy\"";\n\ndiff --git a/app/scenes/Document/components/Header.tsx b/app/scenes/Document/components/Header.tsx\nindex e8ca318dcc2b..f1e775c01fa3 100644\n--- a/app/scenes/Document/components/Header.tsx\n+++ b/app/scenes/Document/components/Header.tsx\n@@ -11,6 +11,7 @@ import * as React from \""react\"";\n import { useTranslation } from \""react-i18next\"";\n import { Link } from \""react-router-dom\"";\n import styled, { useTheme } from \""styled-components\"";\n+import Icon from \""@shared/components/Icon\"";\n import { NavigationNode } from \""@shared/types\"";\n import { altDisplay, metaDisplay } from \""@shared/utils/keyboard\"";\n import { Theme } from \""~/stores/UiStore\"";\n@@ -24,7 +25,6 @@ import DocumentBreadcrumb from \""~/components/DocumentBreadcrumb\"";\n import { useDocumentContext } from \""~/components/DocumentContext\"";\n import Flex from \""~/components/Flex\"";\n import Header from \""~/components/Header\"";\n-import Icon from \""~/components/Icon\"";\n import Star from \""~/components/Star\"";\n import Tooltip from \""~/components/Tooltip\"";\n import { publishDocument } from \""~/actions/definitions/documents\"";\n\ndiff --git a/app/scenes/Document/components/MeasuredContainer.tsx b/app/scenes/Document/components/MeasuredContainer.tsx\nindex d25409930d3e..c7180dc3e4bd 100644\n--- a/app/scenes/Document/components/MeasuredContainer.tsx\n+++ b/app/scenes/Document/components/MeasuredContainer.tsx\n@@ -1,5 +1,5 @@\n import * as React from \""react\"";\n-import useComponentSize from \""@shared/editor/components/hooks/useComponentSize\"";\n+import useComponentSize from \""@shared/hooks/useComponentSize\"";\n \n export const MeasuredContainer = <T extends React.ElementType>({\n   as: As,\n\ndiff --git a/app/scenes/Document/components/PublicBreadcrumb.tsx b/app/scenes/Document/components/PublicBreadcrumb.tsx\nindex 5b9f95b46c69..2ba7c9ffb105 100644\n--- a/app/scenes/Document/components/PublicBreadcrumb.tsx\n+++ b/app/scenes/Document/components/PublicBreadcrumb.tsx\n@@ -1,7 +1,7 @@\n import * as React from \""react\"";\n+import Icon from \""@shared/components/Icon\"";\n import { NavigationNode } from \""@shared/types\"";\n import Breadcrumb from \""~/components/Breadcrumb\"";\n-import Icon from \""~/components/Icon\"";\n import { MenuInternalLink } from \""~/types\"";\n import { sharedDocumentPath } from \""~/utils/routeHelpers\"";\n \n\ndiff --git a/app/scenes/Document/components/ReferenceListItem.tsx b/app/scenes/Document/components/ReferenceListItem.tsx\nindex 24f12ff9f62c..808261030510 100644\n--- a/app/scenes/Document/components/ReferenceListItem.tsx\n+++ b/app/scenes/Document/components/ReferenceListItem.tsx\n@@ -3,12 +3,12 @@ import { DocumentIcon } from \""outline-icons\"";\n import * as React from \""react\"";\n import { Link } from \""react-router-dom\"";\n import styled from \""styled-components\"";\n+import Icon from \""@shared/components/Icon\"";\n import { s, ellipsis } from \""@shared/styles\"";\n import { IconType, NavigationNode } from \""@shared/types\"";\n import { determineIconType } from \""@shared/utils/icon\"";\n import Document from \""~/models/Document\"";\n import Flex from \""~/components/Flex\"";\n-import Icon from \""~/components/Icon\"";\n import { SidebarContextType } from \""~/components/Sidebar/components/SidebarContext\"";\n import { hover } from \""~/styles\"";\n import { sharedDocumentPath } from \""~/utils/routeHelpers\"";\n\ndiff --git a/app/stores/DocumentsStore.ts b/app/stores/DocumentsStore.ts\nindex 9c7ab2bbe2d9..2c71e71f9896 100644\n--- a/app/stores/DocumentsStore.ts\n+++ b/app/stores/DocumentsStore.ts\n@@ -825,7 +825,10 @@ export default class DocumentsStore extends Store<Document> {\n   };\n \n   getByUrl = (url = \""\""): Document | undefined =>\n-    find(this.orderedData, (doc) => url.endsWith(doc.urlId));\n+    find(\n+      this.orderedData,\n+      (doc) => url.endsWith(doc.urlId) || url.endsWith(doc.id)\n+    );\n \n   getCollectionForDocument(document: Document) {\n     return document.collectionId\n\ndiff --git a/app/stores/base/Store.ts b/app/stores/base/Store.ts\nindex ede7cb5e231e..fd9e29c375c8 100644\n--- a/app/stores/base/Store.ts\n+++ b/app/stores/base/Store.ts\n@@ -54,6 +54,8 @@ export default abstract class Store<T extends Model> {\n   @observable\n   isLoaded = false;\n \n+  requests: Map<string, Promise<any>> = new Map();\n+\n   model: typeof Model;\n \n   modelName: string;\n@@ -302,27 +304,43 @@ export default abstract class Store<T extends Model> {\n     if (item && !options.force) {\n       return item;\n     }\n+\n+    if (this.requests.has(id)) {\n+      return this.requests.get(id);\n+    }\n+\n     this.isFetching = true;\n \n-    try {\n-      const res = await client.post(`/${this.apiEndpoint}.info`, {\n-        id,\n-      });\n+    const promise = new Promise<T>((resolve, reject) => {\n+      client\n+        .post(`/${this.apiEndpoint}.info`, {\n+          id,\n+        })\n+        .then((res) =>\n+          runInAction(`info#${this.modelName}`, () => {\n+            invariant(res?.data, \""Data should be available\"");\n+            this.addPolicies(res.policies);\n+            resolve(this.add(accessor(res)));\n+          })\n+        )\n+        .catch((err) => {\n+          if (\n+            err instanceof AuthorizationError ||\n+            err instanceof NotFoundError\n+          ) {\n+            this.remove(id);\n+          }\n \n-      return runInAction(`info#${this.modelName}`, () => {\n-        invariant(res?.data, \""Data should be available\"");\n-        this.addPolicies(res.policies);\n-        return this.add(accessor(res));\n-      });\n-    } catch (err) {\n-      if (err instanceof AuthorizationError || err instanceof NotFoundError) {\n-        this.remove(id);\n-      }\n+          reject(err);\n+        })\n+        .finally(() => {\n+          this.requests.delete(id);\n+          this.isFetching = false;\n+        });\n+    });\n \n-      throw err;\n-    } finally {\n-      this.isFetching = false;\n-    }\n+    this.requests.set(id, promise);\n+    return promise;\n   }\n \n   @action\n\ndiff --git a/app/utils/ApiClient.ts b/app/utils/ApiClient.ts\nindex 7d5f295213da..f1132b72130c 100644\n--- a/app/utils/ApiClient.ts\n+++ b/app/utils/ApiClient.ts\n@@ -36,10 +36,16 @@ const fetchWithRetry = retry(fetch);\n class ApiClient {\n   baseUrl: string;\n \n+  shareId?: string;\n+\n   constructor(options: Options = {}) {\n     this.baseUrl = options.baseUrl || \""/api\"";\n   }\n \n+  setShareId = (shareId: string | undefined) => {\n+    this.shareId = shareId;\n+  };\n+\n   fetch = async <T = any>(\n     path: string,\n     method: string,\n@@ -51,6 +57,14 @@ class ApiClient {\n     let urlToFetch;\n     let isJson;\n \n+    if (this.shareId) {\n+      // add to data\n+      data = {\n+        ...(data || {}),\n+        shareId: this.shareId,\n+      };\n+    }\n+\n     if (method === \""GET\"") {\n       if (data) {\n         modifiedPath = `${path}?${data && queryString.stringify(data)}`;\n\ndiff --git a/server/emails/templates/DocumentMentionedEmail.tsx b/server/emails/templates/DocumentMentionedEmail.tsx\nindex 720a73c7a07b..131b5aa16387 100644\n--- a/server/emails/templates/DocumentMentionedEmail.tsx\n+++ b/server/emails/templates/DocumentMentionedEmail.tsx\n@@ -1,5 +1,6 @@\n import differenceBy from \""lodash/differenceBy\"";\n import * as React from \""react\"";\n+import { MentionType } from \""@shared/types\"";\n import { Document, Revision } from \""@server/models\"";\n import { DocumentHelper } from \""@server/models/helpers/DocumentHelper\"";\n import { ProsemirrorHelper } from \""@server/models/helpers/ProsemirrorHelper\"";\n@@ -63,12 +64,12 @@ export default class DocumentMentionedEmail extends BaseEmail<\n     }\n \n     const currMentions = DocumentHelper.parseMentions(currDoc, {\n-      type: \""user\"",\n+      type: MentionType.User,\n       modelId: userId,\n     });\n     const prevMentions = prevDoc\n       ? DocumentHelper.parseMentions(prevDoc, {\n-          type: \""user\"",\n+          type: MentionType.User,\n           modelId: userId,\n         })\n       : [];\n\ndiff --git a/server/models/helpers/DocumentHelper.tsx b/server/models/helpers/DocumentHelper.tsx\nindex 06cf4e7777b6..0809cdd6ffcd 100644\n--- a/server/models/helpers/DocumentHelper.tsx\n+++ b/server/models/helpers/DocumentHelper.tsx\n@@ -234,6 +234,17 @@ export class DocumentHelper {\n     return ProsemirrorHelper.parseMentions(node, options);\n   }\n \n+  /**\n+   * Parse a list of document IDs contained in a document or revision\n+   *\n+   * @param document Document or Revision\n+   * @returns An array of identifiers in passed document or revision\n+   */\n+  static parseDocumentIds(document: Document | Revision) {\n+    const node = DocumentHelper.toProsemirror(document);\n+    return ProsemirrorHelper.parseDocumentIds(node);\n+  }\n+\n   /**\n    * Generates a HTML diff between documents or revisions.\n    *\n\ndiff --git a/server/models/helpers/NotificationHelper.ts b/server/models/helpers/NotificationHelper.ts\nindex b95f1640206e..db9fa8c62f7d 100644\n--- a/server/models/helpers/NotificationHelper.ts\n+++ b/server/models/helpers/NotificationHelper.ts\n@@ -1,6 +1,6 @@\n import uniq from \""lodash/uniq\"";\n import { Op } from \""sequelize\"";\n-import { NotificationEventType } from \""@shared/types\"";\n+import { NotificationEventType, MentionType } from \""@shared/types\"";\n import Logger from \""@server/logging/Logger\"";\n import {\n   User,\n@@ -82,7 +82,8 @@ export default class NotificationHelper {\n       const mentionedUserIdsInThread = contextComments\n         .flatMap((c) =>\n           ProsemirrorHelper.parseMentions(\n-            ProsemirrorHelper.toProsemirror(c.data)\n+            ProsemirrorHelper.toProsemirror(c.data),\n+            { type: MentionType.User }\n           )\n         )\n         .map((mention) => mention.modelId);\n\ndiff --git a/server/models/helpers/ProsemirrorHelper.tsx b/server/models/helpers/ProsemirrorHelper.tsx\nindex 51d35d9df370..e8f2da6e950d 100644\n--- a/server/models/helpers/ProsemirrorHelper.tsx\n+++ b/server/models/helpers/ProsemirrorHelper.tsx\n@@ -13,8 +13,9 @@ import EditorContainer from \""@shared/editor/components/Styles\"";\n import embeds from \""@shared/editor/embeds\"";\n import GlobalStyles from \""@shared/styles/globals\"";\n import light from \""@shared/styles/theme\"";\n-import { ProsemirrorData } from \""@shared/types\"";\n+import { MentionType, ProsemirrorData } from \""@shared/types\"";\n import { attachmentRedirectRegex } from \""@shared/utils/ProsemirrorHelper\"";\n+import parseDocumentSlug from \""@shared/utils/parseDocumentSlug\"";\n import { isRTL } from \""@shared/utils/rtl\"";\n import { isInternalUrl } from \""@shared/utils/urls\"";\n import { schema, parser } from \""@server/editor\"";\n@@ -37,7 +38,7 @@ export type HTMLOptions = {\n };\n \n export type MentionAttrs = {\n-  type: string;\n+  type: MentionType;\n   label: string;\n   modelId: string;\n   actorId: string | undefined;\n@@ -165,6 +166,50 @@ export class ProsemirrorHelper {\n     return mentions;\n   }\n \n+  /**\n+   * Returns an array of document IDs referenced through links or mentions in the node.\n+   *\n+   * @param node The node to parse document IDs from\n+   * @returns An array of document IDs\n+   */\n+  static parseDocumentIds(doc: Node) {\n+    const identifiers: string[] = [];\n+\n+    doc.descendants((node: Node) => {\n+      if (\n+        node.type.name === \""mention\"" &&\n+        node.attrs.type === MentionType.Document &&\n+        !identifiers.includes(node.attrs.modelId)\n+      ) {\n+        identifiers.push(node.attrs.modelId);\n+        return true;\n+      }\n+\n+      if (node.type.name === \""text\"") {\n+        // get marks for text nodes\n+        node.marks.forEach((mark) => {\n+          // any of the marks identifiers?\n+          if (mark.type.name === \""link\"") {\n+            const slug = parseDocumentSlug(mark.attrs.href);\n+\n+            // don't return the same link more than once\n+            if (slug && !identifiers.includes(slug)) {\n+              identifiers.push(slug);\n+            }\n+          }\n+        });\n+      }\n+\n+      if (!node.content.size) {\n+        return false;\n+      }\n+\n+      return true;\n+    });\n+\n+    return identifiers;\n+  }\n+\n   /**\n    * Find the nearest ancestor block node which contains the mention.\n    *\n\ndiff --git a/server/queues/processors/BacklinksProcessor.ts b/server/queues/processors/BacklinksProcessor.ts\nindex c457253053ac..f5831f958d4a 100644\n--- a/server/queues/processors/BacklinksProcessor.ts\n+++ b/server/queues/processors/BacklinksProcessor.ts\n@@ -1,7 +1,7 @@\n import { Op } from \""sequelize\"";\n import { Document, Backlink } from \""@server/models\"";\n+import { DocumentHelper } from \""@server/models/helpers/DocumentHelper\"";\n import { Event, DocumentEvent, RevisionEvent } from \""@server/types\"";\n-import parseDocumentIds from \""@server/utils/parseDocumentIds\"";\n import BaseProcessor from \""./BaseProcessor\"";\n \n export default class BacklinksProcessor extends BaseProcessor {\n@@ -18,7 +18,7 @@ export default class BacklinksProcessor extends BaseProcessor {\n         if (!document) {\n           return;\n         }\n-        const linkIds = parseDocumentIds(document.text);\n+        const linkIds = DocumentHelper.parseDocumentIds(document);\n         await Promise.all(\n           linkIds.map(async (linkId) => {\n             const linkedDocument = await Document.findByPk(linkId);\n@@ -52,7 +52,7 @@ export default class BacklinksProcessor extends BaseProcessor {\n           return;\n         }\n \n-        const linkIds = parseDocumentIds(document.text);\n+        const linkIds = DocumentHelper.parseDocumentIds(document);\n         const linkedDocumentIds: string[] = [];\n \n         // create or find existing backlink records for referenced docs\n\ndiff --git a/server/queues/tasks/CommentCreatedNotificationsTask.ts b/server/queues/tasks/CommentCreatedNotificationsTask.ts\nindex d02eb619394c..ebb03896a0f9 100644\n--- a/server/queues/tasks/CommentCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/CommentCreatedNotificationsTask.ts\n@@ -1,4 +1,4 @@\n-import { NotificationEventType } from \""@shared/types\"";\n+import { MentionType, NotificationEventType } from \""@shared/types\"";\n import subscriptionCreator from \""@server/commands/subscriptionCreator\"";\n import { createContext } from \""@server/context\"";\n import { Comment, Document, Notification, User } from \""@server/models\"";\n@@ -40,7 +40,8 @@ export default class CommentCreatedNotificationsTask extends BaseTask<CommentEve\n     });\n \n     const mentions = ProsemirrorHelper.parseMentions(\n-      ProsemirrorHelper.toProsemirror(comment.data)\n+      ProsemirrorHelper.toProsemirror(comment.data),\n+      { type: MentionType.User }\n     );\n     const userIdsMentioned: string[] = [];\n \n\ndiff --git a/server/queues/tasks/CommentUpdatedNotificationsTask.ts b/server/queues/tasks/CommentUpdatedNotificationsTask.ts\nindex f02fb56394b2..08a93f05aa0d 100644\n--- a/server/queues/tasks/CommentUpdatedNotificationsTask.ts\n+++ b/server/queues/tasks/CommentUpdatedNotificationsTask.ts\n@@ -1,6 +1,6 @@\n import invariant from \""invariant\"";\n import { Op } from \""sequelize\"";\n-import { NotificationEventType } from \""@shared/types\"";\n+import { MentionType, NotificationEventType } from \""@shared/types\"";\n import { Comment, Document, Notification, User } from \""@server/models\"";\n import { ProsemirrorHelper } from \""@server/models/helpers/ProsemirrorHelper\"";\n import { CommentEvent, CommentUpdateEvent } from \""@server/types\"";\n@@ -37,7 +37,8 @@ export default class CommentUpdatedNotificationsTask extends BaseTask<CommentEve\n     }\n \n     const mentions = ProsemirrorHelper.parseMentions(\n-      ProsemirrorHelper.toProsemirror(comment.data)\n+      ProsemirrorHelper.toProsemirror(comment.data),\n+      { type: MentionType.User }\n     ).filter((mention) => newMentionIds.includes(mention.id));\n     const userIdsMentioned: string[] = [];\n \n@@ -99,7 +100,9 @@ export default class CommentUpdatedNotificationsTask extends BaseTask<CommentEve\n     for (const item of commentsAndReplies) {\n       // Mentions:\n       const proseCommentData = ProsemirrorHelper.toProsemirror(item.data);\n-      const mentions = ProsemirrorHelper.parseMentions(proseCommentData);\n+      const mentions = ProsemirrorHelper.parseMentions(proseCommentData, {\n+        type: MentionType.User,\n+      });\n       const userIds = mentions.map((mention) => mention.modelId);\n \n       // Comment author:\n\ndiff --git a/server/queues/tasks/DocumentPublishedNotificationsTask.ts b/server/queues/tasks/DocumentPublishedNotificationsTask.ts\nindex bdb62c2d1160..1db0ad5aa09e 100644\n--- a/server/queues/tasks/DocumentPublishedNotificationsTask.ts\n+++ b/server/queues/tasks/DocumentPublishedNotificationsTask.ts\n@@ -1,4 +1,4 @@\n-import { NotificationEventType } from \""@shared/types\"";\n+import { MentionType, NotificationEventType } from \""@shared/types\"";\n import { createSubscriptionsForDocument } from \""@server/commands/subscriptionCreator\"";\n import { Document, Notification, User } from \""@server/models\"";\n import { DocumentHelper } from \""@server/models/helpers/DocumentHelper\"";\n@@ -19,7 +19,9 @@ export default class DocumentPublishedNotificationsTask extends BaseTask<Documen\n     await createSubscriptionsForDocument(document, event);\n \n     // Send notifications to mentioned users first\n-    const mentions = DocumentHelper.parseMentions(document);\n+    const mentions = DocumentHelper.parseMentions(document, {\n+      type: MentionType.User,\n+    });\n     const userIdsMentioned: string[] = [];\n \n     for (const mention of mentions) {\n\ndiff --git a/server/queues/tasks/RevisionCreatedNotificationsTask.ts b/server/queues/tasks/RevisionCreatedNotificationsTask.ts\nindex fbd9e4ea9085..041815298b8d 100644\n--- a/server/queues/tasks/RevisionCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/RevisionCreatedNotificationsTask.ts\n@@ -1,7 +1,7 @@\n import { subHours } from \""date-fns\"";\n import differenceBy from \""lodash/differenceBy\"";\n import { Op } from \""sequelize\"";\n-import { NotificationEventType } from \""@shared/types\"";\n+import { MentionType, NotificationEventType } from \""@shared/types\"";\n import { createSubscriptionsForDocument } from \""@server/commands/subscriptionCreator\"";\n import env from \""@server/env\"";\n import Logger from \""@server/logging/Logger\"";\n@@ -37,8 +37,12 @@ export default class RevisionCreatedNotificationsTask extends BaseTask<RevisionE\n     }\n \n     // Send notifications to mentioned users first\n-    const oldMentions = before ? DocumentHelper.parseMentions(before) : [];\n-    const newMentions = DocumentHelper.parseMentions(document);\n+    const oldMentions = before\n+      ? DocumentHelper.parseMentions(before, { type: MentionType.User })\n+      : [];\n+    const newMentions = DocumentHelper.parseMentions(document, {\n+      type: MentionType.User,\n+    });\n     const mentions = differenceBy(newMentions, oldMentions, \""id\"");\n     const userIdsMentioned: string[] = [];\n \n\ndiff --git a/server/routes/api/comments/comments.ts b/server/routes/api/comments/comments.ts\nindex 916732bfcf3a..fc6a36515275 100644\n--- a/server/routes/api/comments/comments.ts\n+++ b/server/routes/api/comments/comments.ts\n@@ -1,7 +1,11 @@\n import Router from \""koa-router\"";\n import difference from \""lodash/difference\"";\n import { FindOptions, Op, WhereOptions } from \""sequelize\"";\n-import { CommentStatusFilter, TeamPreference } from \""@shared/types\"";\n+import {\n+  CommentStatusFilter,\n+  TeamPreference,\n+  MentionType,\n+} from \""@shared/types\"";\n import auth from \""@server/middlewares/authentication\"";\n import { feature } from \""@server/middlewares/feature\"";\n import { rateLimiter } from \""@server/middlewares/rateLimiter\"";\n@@ -225,10 +229,12 @@ router.post(\n \n     if (data !== undefined) {\n       const existingMentionIds = ProsemirrorHelper.parseMentions(\n-        ProsemirrorHelper.toProsemirror(comment.data)\n+        ProsemirrorHelper.toProsemirror(comment.data),\n+        { type: MentionType.User }\n       ).map((mention) => mention.id);\n       const updatedMentionIds = ProsemirrorHelper.parseMentions(\n-        ProsemirrorHelper.toProsemirror(data)\n+        ProsemirrorHelper.toProsemirror(data),\n+        { type: MentionType.User }\n       ).map((mention) => mention.id);\n \n       newMentionIds = difference(updatedMentionIds, existingMentionIds);\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 266dcbba2927..a2af629c7828 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -1574,6 +1574,7 @@ router.post(\n   transaction(),\n   async (ctx: APIContext<T.DocumentsCreateReq>) => {\n     const {\n+      id,\n       title,\n       text,\n       icon,\n@@ -1641,6 +1642,7 @@ router.post(\n     }\n \n     const document = await documentCreator({\n+      id,\n       title,\n       text: await TextHelper.replaceImagesWithAttachments(ctx, text, user),\n       icon,\n\ndiff --git a/server/routes/api/documents/schema.ts b/server/routes/api/documents/schema.ts\nindex ac8b8fe86bbc..ee9043cb3dff 100644\n--- a/server/routes/api/documents/schema.ts\n+++ b/server/routes/api/documents/schema.ts\n@@ -327,6 +327,9 @@ export type DocumentsImportReq = z.infer<typeof DocumentsImportSchema>;\n \n export const DocumentsCreateSchema = BaseSchema.extend({\n   body: z.object({\n+    /** Id of the document to be created */\n+    id: z.string().uuid().optional(),\n+\n     /** Document title */\n     title: z.string().default(\""\""),\n \n\ndiff --git a/server/routes/api/index.ts b/server/routes/api/index.ts\nindex abad92bbe54e..35b8de968406 100644\n--- a/server/routes/api/index.ts\n+++ b/server/routes/api/index.ts\n@@ -33,6 +33,7 @@ import searches from \""./searches\"";\n import shares from \""./shares\"";\n import stars from \""./stars\"";\n import subscriptions from \""./subscriptions\"";\n+import suggestions from \""./suggestions\"";\n import teams from \""./teams\"";\n import urls from \""./urls\"";\n import userMemberships from \""./userMemberships\"";\n@@ -82,6 +83,7 @@ router.use(\""/\"", searches.routes());\n router.use(\""/\"", shares.routes());\n router.use(\""/\"", stars.routes());\n router.use(\""/\"", subscriptions.routes());\n+router.use(\""/\"", suggestions.routes());\n router.use(\""/\"", teams.routes());\n router.use(\""/\"", integrations.routes());\n router.use(\""/\"", notifications.routes());\n\ndiff --git a/server/routes/api/suggestions/index.ts b/server/routes/api/suggestions/index.ts\nnew file mode 100644\nindex 000000000000..e99f9c00dfa2\n--- /dev/null\n+++ b/server/routes/api/suggestions/index.ts\n@@ -0,0 +1 @@\n+export { default } from \""./suggestions\"";\n\ndiff --git a/server/routes/api/suggestions/schema.ts b/server/routes/api/suggestions/schema.ts\nnew file mode 100644\nindex 000000000000..f8229c9d0595\n--- /dev/null\n+++ b/server/routes/api/suggestions/schema.ts\n@@ -0,0 +1,10 @@\n+import { z } from \""zod\"";\n+import { BaseSchema } from \""../schema\"";\n+\n+export const SuggestionsListSchema = BaseSchema.extend({\n+  body: z.object({\n+    query: z.string().optional(),\n+  }),\n+});\n+\n+export type SuggestionsListReq = z.infer<typeof SuggestionsListSchema>;\n\ndiff --git a/server/routes/api/suggestions/suggestions.ts b/server/routes/api/suggestions/suggestions.ts\nnew file mode 100644\nindex 000000000000..eac32db6db9d\n--- /dev/null\n+++ b/server/routes/api/suggestions/suggestions.ts\n@@ -0,0 +1,75 @@\n+import Router from \""koa-router\"";\n+import { Op } from \""sequelize\"";\n+import { Sequelize } from \""sequelize-typescript\"";\n+import auth from \""@server/middlewares/authentication\"";\n+import validate from \""@server/middlewares/validate\"";\n+import { User } from \""@server/models\"";\n+import SearchHelper from \""@server/models/helpers/SearchHelper\"";\n+import { can } from \""@server/policies\"";\n+import { presentDocument, presentUser } from \""@server/presenters\"";\n+import { APIContext } from \""@server/types\"";\n+import pagination from \""../middlewares/pagination\"";\n+import * as T from \""./schema\"";\n+\n+const router = new Router();\n+\n+router.post(\n+  \""suggestions.mention\"",\n+  auth(),\n+  pagination(),\n+  validate(T.SuggestionsListSchema),\n+  async (ctx: APIContext<T.SuggestionsListReq>) => {\n+    const { query } = ctx.input.body;\n+    const { offset, limit } = ctx.state.pagination;\n+    const actor = ctx.state.auth.user;\n+\n+    const [documents, users] = await Promise.all([\n+      SearchHelper.searchTitlesForUser(actor, {\n+        query,\n+        offset,\n+        limit,\n+      }),\n+      User.findAll({\n+        where: {\n+          teamId: actor.teamId,\n+          suspendedAt: {\n+            [Op.eq]: null,\n+          },\n+          [Op.and]: query\n+            ? {\n+                [Op.or]: [\n+                  Sequelize.literal(\n+                    `unaccent(LOWER(email)) like unaccent(LOWER(:query))`\n+                  ),\n+                  Sequelize.literal(\n+                    `unaccent(LOWER(name)) like unaccent(LOWER(:query))`\n+                  ),\n+                ],\n+              }\n+            : {},\n+        },\n+        order: [[\""name\"", \""ASC\""]],\n+        replacements: { query: `%${query}%` },\n+        offset,\n+        limit,\n+      }),\n+    ]);\n+\n+    ctx.body = {\n+      pagination: ctx.state.pagination,\n+      data: {\n+        documents: await Promise.all(\n+          documents.map((document) => presentDocument(ctx, document))\n+        ),\n+        users: users.map((user) =>\n+          presentUser(user, {\n+            includeEmail: !!can(actor, \""readEmail\"", user),\n+            includeDetails: !!can(actor, \""readDetails\"", user),\n+          })\n+        ),\n+      },\n+    };\n+  }\n+);\n+\n+export default router;\n\ndiff --git a/server/routes/api/urls/urls.ts b/server/routes/api/urls/urls.ts\nindex e77b985128b8..f730f1a0bd34 100644\n--- a/server/routes/api/urls/urls.ts\n+++ b/server/routes/api/urls/urls.ts\n@@ -1,6 +1,6 @@\n import dns from \""dns\"";\n import Router from \""koa-router\"";\n-import { UnfurlResourceType } from \""@shared/types\"";\n+import { MentionType, UnfurlResourceType } from \""@shared/types\"";\n import { getBaseDomain, parseDomain } from \""@shared/utils/domains\"";\n import parseDocumentSlug from \""@shared/utils/parseDocumentSlug\"";\n import parseMentionUrl from \""@shared/utils/parseMentionUrl\"";\n@@ -36,31 +36,34 @@ router.post(\n       if (!documentId) {\n         throw ValidationError(\""Document ID is required to unfurl a mention\"");\n       }\n-      const { modelId: userId } = parseMentionUrl(url);\n-\n-      const [user, document] = await Promise.all([\n-        User.findByPk(userId),\n-        Document.findByPk(documentId, {\n-          userId: actor.id,\n-        }),\n-      ]);\n-      if (!user) {\n-        throw NotFoundError(\""Mentioned user does not exist\"");\n-      }\n-      if (!document) {\n-        throw NotFoundError(\""Document does not exist\"");\n-      }\n-      authorize(actor, \""read\"", user);\n-      authorize(actor, \""read\"", document);\n+      const { modelId, mentionType } = parseMentionUrl(url);\n+\n+      // TODO: Add support for other mention types\n+      if (mentionType === MentionType.User) {\n+        const [user, document] = await Promise.all([\n+          User.findByPk(modelId),\n+          Document.findByPk(documentId, {\n+            userId: actor.id,\n+          }),\n+        ]);\n+        if (!user) {\n+          throw NotFoundError(\""Mentioned user does not exist\"");\n+        }\n+        if (!document) {\n+          throw NotFoundError(\""Document does not exist\"");\n+        }\n+        authorize(actor, \""read\"", user);\n+        authorize(actor, \""read\"", document);\n \n-      ctx.body = await presentUnfurl(\n-        {\n-          type: UnfurlResourceType.Mention,\n-          user,\n-          document,\n-        },\n-        { includeEmail: !!can(actor, \""readEmail\"", user) }\n-      );\n+        ctx.body = await presentUnfurl(\n+          {\n+            type: UnfurlResourceType.Mention,\n+            user,\n+            document,\n+          },\n+          { includeEmail: !!can(actor, \""readEmail\"", user) }\n+        );\n+      }\n       return;\n     }\n \n\ndiff --git a/server/utils/parseDocumentIds.ts b/server/utils/parseDocumentIds.ts\ndeleted file mode 100644\nindex 2c3dd7506658..000000000000\n--- a/server/utils/parseDocumentIds.ts\n+++ /dev/null\n@@ -1,42 +0,0 @@\n-import { Node } from \""prosemirror-model\"";\n-import parseDocumentSlug from \""@shared/utils/parseDocumentSlug\"";\n-import { parser } from \""@server/editor\"";\n-\n-/**\n- * Parse a list of unique document identifiers contained in links in markdown\n- * text.\n- *\n- * @param text The text to parse in Markdown format\n- * @returns An array of document identifiers\n- */\n-export default function parseDocumentIds(text: string): string[] {\n-  const doc = parser.parse(text);\n-  const identifiers: string[] = [];\n-  if (!doc) {\n-    return identifiers;\n-  }\n-\n-  doc.descendants((node: Node) => {\n-    // get text nodes\n-    if (node.type.name === \""text\"") {\n-      // get marks for text nodes\n-      node.marks.forEach((mark) => {\n-        // any of the marks identifiers?\n-        if (mark.type.name === \""link\"") {\n-          const slug = parseDocumentSlug(mark.attrs.href);\n-\n-          // don't return the same link more than once\n-          if (slug && !identifiers.includes(slug)) {\n-            identifiers.push(slug);\n-          }\n-        }\n-      });\n-\n-      return false;\n-    }\n-\n-    return true;\n-  });\n-\n-  return identifiers;\n-}\n\ndiff --git a/server/validation.ts b/server/validation.ts\nindex d547a2d64f3a..d1f9228d7a9b 100644\n--- a/server/validation.ts\n+++ b/server/validation.ts\n@@ -4,7 +4,7 @@ import { Primitive } from \""utility-types\"";\n import validator from \""validator\"";\n import isIn from \""validator/lib/isIn\"";\n import isUUID from \""validator/lib/isUUID\"";\n-import { CollectionPermission } from \""@shared/types\"";\n+import { CollectionPermission, MentionType } from \""@shared/types\"";\n import { UrlHelper } from \""@shared/utils/UrlHelper\"";\n import { validateColorHex } from \""@shared/utils/color\"";\n import { validateIndexCharacters } from \""@shared/utils/indexCharacters\"";\n@@ -247,7 +247,12 @@ export class ValidateURL {\n       }\n \n       const { id, mentionType, modelId } = parseMentionUrl(url);\n-      return id && isUUID(id) && mentionType === \""user\"" && isUUID(modelId);\n+      return (\n+        id &&\n+        isUUID(id) &&\n+        Object.values(MentionType).includes(mentionType as MentionType) &&\n+        isUUID(modelId)\n+      );\n     } catch (err) {\n       return false;\n     }\n\ndiff --git a/app/components/Icons/EmojiIcon.tsx b/shared/components/EmojiIcon.tsx\nsimilarity index 96%\nrename from app/components/Icons/EmojiIcon.tsx\nrename to shared/components/EmojiIcon.tsx\nindex 6512008279be..5b448f0a2484 100644\n--- a/app/components/Icons/EmojiIcon.tsx\n+++ b/shared/components/EmojiIcon.tsx\n@@ -1,6 +1,6 @@\n import * as React from \""react\"";\n import styled from \""styled-components\"";\n-import { s } from \""@shared/styles\"";\n+import { s } from \""../styles\"";\n \n type Props = {\n   /** The emoji to render */\n\ndiff --git a/app/components/Icon.tsx b/shared/components/Icon.tsx\nsimilarity index 83%\nrename from app/components/Icon.tsx\nrename to shared/components/Icon.tsx\nindex c0e8a8081f4a..d5ea91bb454b 100644\n--- a/app/components/Icon.tsx\n+++ b/shared/components/Icon.tsx\n@@ -2,13 +2,13 @@ import { observer } from \""mobx-react\"";\n import { getLuminance } from \""polished\"";\n import * as React from \""react\"";\n import styled from \""styled-components\"";\n-import { IconType } from \""@shared/types\"";\n-import { IconLibrary } from \""@shared/utils/IconLibrary\"";\n-import { colorPalette } from \""@shared/utils/collections\"";\n-import { determineIconType } from \""@shared/utils/icon\"";\n-import EmojiIcon from \""~/components/Icons/EmojiIcon\"";\n-import useStores from \""~/hooks/useStores\"";\n-import Logger from \""~/utils/Logger\"";\n+import useStores from \""../hooks/useStores\"";\n+import { IconType } from \""../types\"";\n+import { IconLibrary } from \""../utils/IconLibrary\"";\n+import { colorPalette } from \""../utils/collections\"";\n+import { determineIconType } from \""../utils/icon\"";\n+import EmojiIcon from \""./EmojiIcon\"";\n+// import Logger from \""~/utils/Logger\"";\n import Flex from \""./Flex\"";\n \n export type Props = {\n@@ -40,9 +40,9 @@ const Icon = ({\n   const iconType = determineIconType(icon);\n \n   if (!iconType) {\n-    Logger.warn(\""Failed to determine icon type\"", {\n-      icon,\n-    });\n+    // Logger.warn(\""Failed to determine icon type\"", {\n+    //   icon,\n+    // });\n     return null;\n   }\n \n@@ -62,9 +62,9 @@ const Icon = ({\n \n     return <EmojiIcon emoji={icon} size={size} className={className} />;\n   } catch (err) {\n-    Logger.warn(\""Failed to render icon\"", {\n-      icon,\n-    });\n+    // Logger.warn(\""Failed to render icon\"", {\n+    //   icon,\n+    // });\n   }\n \n   return null;\n@@ -80,7 +80,6 @@ const SVGIcon = observer(\n     forceColor,\n   }: Props) => {\n     const { ui } = useStores();\n-\n     let color = inputColor ?? colorPalette[0];\n \n     // If the chosen icon color is very dark then we invert it in dark mode\n\ndiff --git a/shared/editor/components/Mentions.tsx b/shared/editor/components/Mentions.tsx\nnew file mode 100644\nindex 000000000000..07737c5e8e3a\n--- /dev/null\n+++ b/shared/editor/components/Mentions.tsx\n@@ -0,0 +1,69 @@\n+import { observer } from \""mobx-react\"";\n+import { DocumentIcon, EmailIcon } from \""outline-icons\"";\n+import { Node } from \""prosemirror-model\"";\n+import * as React from \""react\"";\n+import { Link } from \""react-router-dom\"";\n+import Icon from \""../../components/Icon\"";\n+import useStores from \""../../hooks/useStores\"";\n+import { cn } from \""../styles/utils\"";\n+import { ComponentProps } from \""../types\"";\n+\n+const getAttributesFromNode = (node: Node) => {\n+  const spec = node.type.spec.toDOM?.(node) as any as Record<string, string>[];\n+  const { class: className, ...attrs } = spec[1];\n+  return { className, ...attrs };\n+};\n+\n+export const MentionUser = observer(function MentionUser_(\n+  props: ComponentProps\n+) {\n+  const { isSelected, node } = props;\n+  const { users } = useStores();\n+  const user = users.get(node.attrs.modelId);\n+  const { className, ...attrs } = getAttributesFromNode(node);\n+\n+  return (\n+    <span\n+      {...attrs}\n+      className={cn(className, {\n+        \""ProseMirror-selectednode\"": isSelected,\n+      })}\n+    >\n+      <EmailIcon size={18} />\n+      {user?.name || node.attrs.label}\n+    </span>\n+  );\n+});\n+\n+export const MentionDocument = observer(function MentionDocument_(\n+  props: ComponentProps\n+) {\n+  const { isSelected, node } = props;\n+  const { documents } = useStores();\n+  const doc = documents.get(node.attrs.modelId);\n+  const modelId = node.attrs.modelId;\n+  const { className, ...attrs } = getAttributesFromNode(node);\n+\n+  React.useEffect(() => {\n+    if (modelId) {\n+      void documents.prefetchDocument(modelId);\n+    }\n+  }, [modelId, documents]);\n+\n+  return (\n+    <Link\n+      {...attrs}\n+      className={cn(className, {\n+        \""ProseMirror-selectednode\"": isSelected,\n+      })}\n+      to={doc?.path ?? `/doc/${node.attrs.modelId}`}\n+    >\n+      {doc?.icon ? (\n+        <Icon value={doc?.icon} color={doc?.color} size={18} />\n+      ) : (\n+        <DocumentIcon size={18} />\n+      )}\n+      {doc?.title || node.attrs.label}\n+    </Link>\n+  );\n+});\n\ndiff --git a/shared/editor/components/Styles.ts b/shared/editor/components/Styles.ts\nindex 340db4839fa1..ce02b3f1e866 100644\n--- a/shared/editor/components/Styles.ts\n+++ b/shared/editor/components/Styles.ts\n@@ -289,17 +289,31 @@ width: 100%;\n .mention {\n   background: ${props.theme.mentionBackground};\n   border-radius: 8px;\n-  padding-bottom: 2px;\n   padding-top: 1px;\n+  padding-bottom: 1px;\n   padding-left: 4px;\n-  padding-right: 4px;\n+  padding-right: 6px;\n   font-weight: 500;\n   font-size: 0.9em;\n   cursor: default;\n+  text-decoration: none !important;\n \n-  &::before {\n+  display: inline-flex;\n+  align-items: center;\n+  gap: 4px;\n+  vertical-align: bottom;\n+\n+  &:hover {\n+    cursor: default;\n+  }\n+\n+  &.mention-user::before {\n     content: \""@\"";\n   }\n+\n+  &.mention-document::before {\n+    content: \""+\"";\n+  }\n }\n \n > div {\n\ndiff --git a/shared/editor/embeds/Berrycast.tsx b/shared/editor/embeds/Berrycast.tsx\nindex 8a7881ececdf..f858baa31996 100644\n--- a/shared/editor/embeds/Berrycast.tsx\n+++ b/shared/editor/embeds/Berrycast.tsx\n@@ -1,6 +1,6 @@\n import * as React from \""react\"";\n+import useComponentSize from \""../../hooks/useComponentSize\"";\n import Frame from \""../components/Frame\"";\n-import useComponentSize from \""../components/hooks/useComponentSize\"";\n import { EmbedProps as Props } from \"".\"";\n \n export default function Berrycast({ matches, ...props }: Props) {\n\ndiff --git a/shared/editor/marks/Link.tsx b/shared/editor/marks/Link.tsx\nindex a815fcea4d84..49d967350b13 100644\n--- a/shared/editor/marks/Link.tsx\n+++ b/shared/editor/marks/Link.tsx\n@@ -14,7 +14,6 @@ import { toast } from \""sonner\"";\n import { sanitizeUrl } from \""../../utils/urls\"";\n import { getMarkRange } from \""../queries/getMarkRange\"";\n import { isMarkActive } from \""../queries/isMarkActive\"";\n-import { EventType } from \""../types\"";\n import Mark from \""./Mark\"";\n \n const LINK_INPUT_REGEX = /\\[([^[]+)]\\((\\S+)\\)$/;\n@@ -109,8 +108,7 @@ export default class Link extends Mark {\n     return {\n       \""Mod-k\"": (state, dispatch) => {\n         if (state.selection.empty) {\n-          this.editor.events.emit(EventType.LinkToolbarOpen);\n-          return true;\n+          return false;\n         }\n \n         return toggleMark(type, { href: \""\"" })(state, dispatch);\n\ndiff --git a/shared/editor/nodes/Mention.ts b/shared/editor/nodes/Mention.tsx\nsimilarity index 50%\nrename from shared/editor/nodes/Mention.ts\nrename to shared/editor/nodes/Mention.tsx\nindex 98b2cbdcbaaf..e9cadc33a8fa 100644\n--- a/shared/editor/nodes/Mention.ts\n+++ b/shared/editor/nodes/Mention.tsx\n@@ -5,17 +5,24 @@ import {\n   NodeType,\n   Schema,\n } from \""prosemirror-model\"";\n-import { Command, TextSelection } from \""prosemirror-state\"";\n+import {\n+  Command,\n+  NodeSelection,\n+  Plugin,\n+  TextSelection,\n+} from \""prosemirror-state\"";\n+import * as React from \""react\"";\n import { Primitive } from \""utility-types\"";\n-import Extension from \""../lib/Extension\"";\n+import { v4 as uuidv4 } from \""uuid\"";\n+import env from \""../../env\"";\n+import { MentionType } from \""../../types\"";\n+import { MentionDocument, MentionUser } from \""../components/Mentions\"";\n import { MarkdownSerializerState } from \""../lib/markdown/serializer\"";\n import mentionRule from \""../rules/mention\"";\n+import { ComponentProps } from \""../types\"";\n+import Node from \""./Node\"";\n \n-export default class Mention extends Extension {\n-  get type() {\n-    return \""node\"";\n-  }\n-\n+export default class Mention extends Node {\n   get name() {\n     return \""mention\"";\n   }\n@@ -39,8 +46,9 @@ export default class Mention extends Extension {\n       atom: true,\n       parseDOM: [\n         {\n-          tag: `span.${this.name}`,\n+          tag: `.${this.name}`,\n           preserveWhitespace: \""full\"",\n+          priority: 100,\n           getAttrs: (dom: HTMLElement) => {\n             const type = dom.dataset.type;\n             const modelId = dom.dataset.id;\n@@ -51,7 +59,7 @@ export default class Mention extends Extension {\n             return {\n               type,\n               modelId,\n-              actorId: dom.dataset.actorId,\n+              actorId: dom.dataset.actorid,\n               label: dom.innerText,\n               id: dom.id,\n             };\n@@ -59,25 +67,97 @@ export default class Mention extends Extension {\n         },\n       ],\n       toDOM: (node) => [\n-        \""span\"",\n+        node.attrs.type === MentionType.User ? \""span\"" : \""a\"",\n         {\n           class: `${node.type.name} use-hover-preview`,\n           id: node.attrs.id,\n+          href:\n+            node.attrs.type === MentionType.User\n+              ? undefined\n+              : `${env.URL}/doc/${node.attrs.modelId}`,\n           \""data-type\"": node.attrs.type,\n           \""data-id\"": node.attrs.modelId,\n-          \""data-actorId\"": node.attrs.actorId,\n+          \""data-actorid\"": node.attrs.actorId,\n           \""data-url\"": `mention://${node.attrs.id}/${node.attrs.type}/${node.attrs.modelId}`,\n         },\n         String(node.attrs.label),\n       ],\n-      toPlainText: (node) => `@${node.attrs.label}`,\n+      toPlainText: (node) =>\n+        node.attrs.type === MentionType.User\n+          ? `@${node.attrs.label}`\n+          : node.attrs.label,\n     };\n   }\n \n+  component = (props: ComponentProps) => {\n+    switch (props.node.attrs.type) {\n+      case MentionType.User:\n+        return <MentionUser {...props} />;\n+      case MentionType.Document:\n+        return <MentionDocument {...props} />;\n+      default:\n+        return null;\n+    }\n+  };\n+\n   get rulePlugins() {\n     return [mentionRule];\n   }\n \n+  get plugins() {\n+    return [\n+      // Ensure mentions have unique IDs\n+      new Plugin({\n+        appendTransaction: (_transactions, _oldState, newState) => {\n+          const tr = newState.tr;\n+          const existingIds = new Set();\n+          let modified = false;\n+\n+          tr.doc.descendants((node, pos) => {\n+            let nodeId = node.attrs.id;\n+            if (\n+              node.type.name === this.name &&\n+              (!nodeId || existingIds.has(nodeId))\n+            ) {\n+              nodeId = uuidv4();\n+              modified = true;\n+              tr.setNodeAttribute(pos, \""id\"", nodeId);\n+            }\n+            existingIds.add(nodeId);\n+          });\n+\n+          if (modified) {\n+            return tr;\n+          }\n+\n+          return null;\n+        },\n+      }),\n+    ];\n+  }\n+\n+  keys(): Record<string, Command> {\n+    return {\n+      Enter: (state) => {\n+        const { selection } = state;\n+        if (selection instanceof NodeSelection) {\n+          const { from } = selection;\n+          const node = state.doc.nodeAt(from);\n+          if (\n+            node &&\n+            node.type.name === \""mention\"" &&\n+            node.attrs.type === MentionType.Document\n+          ) {\n+            const { modelId } = node.attrs;\n+            this.editor.props.onClickLink?.(`/doc/${modelId}`);\n+            return true;\n+          }\n+        }\n+        return false;\n+      },\n+    };\n+  }\n+\n   commands({ type }: { type: NodeType; schema: Schema }) {\n     return (attrs: Record<string, Primitive>): Command =>\n       (state, dispatch) => {\n\ndiff --git a/shared/editor/types/index.ts b/shared/editor/types/index.ts\nindex 17b362352499..5282982b8d49 100644\n--- a/shared/editor/types/index.ts\n+++ b/shared/editor/types/index.ts\n@@ -1,3 +1,4 @@\n+import { TFunction } from \""i18next\"";\n import { Node as ProsemirrorNode } from \""prosemirror-model\"";\n import { EditorState } from \""prosemirror-state\"";\n import { EditorView } from \""prosemirror-view\"";\n@@ -7,24 +8,25 @@ import { Primitive } from \""utility-types\"";\n \n export type PlainTextSerializer = (node: ProsemirrorNode) => string;\n \n-export enum EventType {\n-  LinkToolbarOpen = \""linkMenuOpen\"",\n-}\n-\n export enum TableLayout {\n   fullWidth = \""full-width\"",\n }\n \n+type Section = ({ t }: { t: TFunction }) => string;\n+\n export type MenuItem = {\n   icon?: React.ReactElement;\n   name?: string;\n   title?: string;\n+  section?: Section;\n   subtitle?: string;\n   shortcut?: string;\n   keywords?: string;\n   tooltip?: string;\n   label?: string;\n   dangerous?: boolean;\n+  /** Higher number is higher in results, default is 0. */\n+  priority?: number;\n   children?: MenuItem[];\n   defaultHidden?: boolean;\n   attrs?:\n\ndiff --git a/shared/editor/components/hooks/useComponentSize.ts b/shared/hooks/useComponentSize.ts\nsimilarity index 100%\nrename from shared/editor/components/hooks/useComponentSize.ts\nrename to shared/hooks/useComponentSize.ts\n\ndiff --git a/shared/hooks/useStores.ts b/shared/hooks/useStores.ts\nnew file mode 100644\nindex 000000000000..fb92888a90a6\n--- /dev/null\n+++ b/shared/hooks/useStores.ts\n@@ -0,0 +1,6 @@\n+import { MobXProviderContext } from \""mobx-react\"";\n+import * as React from \""react\"";\n+\n+export default function useStores() {\n+  return React.useContext(MobXProviderContext);\n+}\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex d3da924bc453..37558b628ce7 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -138,6 +138,7 @@\n   \""Collection\"": \""Collection\"",\n   \""Debug\"": \""Debug\"",\n   \""Document\"": \""Document\"",\n+  \""Documents\"": \""Documents\"",\n   \""Recently viewed\"": \""Recently viewed\"",\n   \""Revision\"": \""Revision\"",\n   \""Navigation\"": \""Navigation\"",\n@@ -302,7 +303,6 @@\n   \""Unknown\"": \""Unknown\"",\n   \""Mark all as read\"": \""Mark all as read\"",\n   \""You're all caught up\"": \""You're all caught up\"",\n-  \""Documents\"": \""Documents\"",\n   \""{{ username }} reacted with {{ emoji }}\"": \""{{ username }} reacted with {{ emoji }}\"",\n   \""{{ firstUsername }} and {{ secondUsername }} reacted with {{ emoji }}\"": \""{{ firstUsername }} and {{ secondUsername }} reacted with {{ emoji }}\"",\n   \""{{ firstUsername }} and {{ count }} others reacted with {{ emoji }}\"": \""{{ firstUsername }} and {{ count }} other reacted with {{ emoji }}\"",\n@@ -416,8 +416,9 @@\n   \""Replacement\"": \""Replacement\"",\n   \""Replace\"": \""Replace\"",\n   \""Replace all\"": \""Replace all\"",\n-  \""{{ userName }} won't be notified, as they do not have access to this document\"": \""{{ userName }} won't be notified, as they do not have access to this document\"",\n   \""Profile picture\"": \""Profile picture\"",\n+  \""Create a new doc\"": \""Create a new doc\"",\n+  \""{{ userName }} won't be notified, as they do not have access to this document\"": \""{{ userName }} won't be notified, as they do not have access to this document\"",\n   \""Add column after\"": \""Add column after\"",\n   \""Add column before\"": \""Add column before\"",\n   \""Add row after\"": \""Add row after\"",\n@@ -435,7 +436,6 @@\n   \""Comment\"": \""Comment\"",\n   \""Create link\"": \""Create link\"",\n   \""Sorry, an error occurred creating the link\"": \""Sorry, an error occurred creating the link\"",\n-  \""Create a new doc\"": \""Create a new doc\"",\n   \""Create a new child doc\"": \""Create a new child doc\"",\n   \""Delete table\"": \""Delete table\"",\n   \""Delete file\"": \""Delete file\"",\n@@ -447,7 +447,7 @@\n   \""Italic\"": \""Italic\"",\n   \""Sorry, that link won\u2019t work for this embed type\"": \""Sorry, that link won\u2019t work for this embed type\"",\n   \""File attachment\"": \""File attachment\"",\n-  \""Paste a link, search, or create\"": \""Paste a link, search, or create\"",\n+  \""Enter a link\"": \""Enter a link\"",\n   \""Big heading\"": \""Big heading\"",\n   \""Medium heading\"": \""Medium heading\"",\n   \""Small heading\"": \""Small heading\"",\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex c90a2c3f3a36..2133fdfaaa35 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -56,6 +56,7 @@ export enum FileOperationState {\n \n export enum MentionType {\n   User = \""user\"",\n+  Document = \""document\"",\n }\n \n export type PublicEnv = {\n\ndiff --git a/shared/utils/urls.ts b/shared/utils/urls.ts\nindex fad1284993ec..fa700888edbf 100644\n--- a/shared/utils/urls.ts\n+++ b/shared/utils/urls.ts\n@@ -66,7 +66,7 @@ export function isInternalUrl(href: string) {\n  */\n export function isDocumentUrl(url: string) {\n   try {\n-    const parsed = new URL(url);\n+    const parsed = new URL(url, env.URL);\n     return (\n       isInternalUrl(url) &&\n       (parsed.pathname.startsWith(\""/doc/\"") || parsed.pathname.startsWith(\""/d/\""))\n"", ""test_patch"": ""diff --git a/server/models/helpers/ProseMirrorHelper.test.ts b/server/models/helpers/ProseMirrorHelper.test.ts\nindex 5fcc101d00f3..1329eac74880 100644\n--- a/server/models/helpers/ProseMirrorHelper.test.ts\n+++ b/server/models/helpers/ProseMirrorHelper.test.ts\n@@ -1,5 +1,5 @@\n import { DeepPartial } from \""utility-types\"";\n-import { ProsemirrorData } from \""@shared/types\"";\n+import { MentionType, ProsemirrorData } from \""@shared/types\"";\n import { buildProseMirrorDoc } from \""@server/test/factories\"";\n import { MentionAttrs, ProsemirrorHelper } from \""./ProsemirrorHelper\"";\n \n@@ -8,7 +8,7 @@ describe(\""ProseMirrorHelper\"", () => {\n     it(\""should return the paragraph node\"", () => {\n       const mentionAttrs: MentionAttrs = {\n         id: \""31d5899f-e544-4ff6-b6d3-c49dd6b81901\"",\n-        type: \""user\"",\n+        type: MentionType.User,\n         label: \""test.user\"",\n         actorId: \""ccec260a-e060-4925-ade8-17cfabaf2cac\"",\n         modelId: \""9a17c1c8-d178-4350-9001-203a73070fcb\"",\n@@ -58,7 +58,7 @@ describe(\""ProseMirrorHelper\"", () => {\n     it(\""should return the heading node\"", () => {\n       const mentionAttrs: MentionAttrs = {\n         id: \""31d5899f-e544-4ff6-b6d3-c49dd6b81901\"",\n-        type: \""user\"",\n+        type: MentionType.User,\n         label: \""test.user\"",\n         actorId: \""ccec260a-e060-4925-ade8-17cfabaf2cac\"",\n         modelId: \""9a17c1c8-d178-4350-9001-203a73070fcb\"",\n@@ -111,7 +111,7 @@ describe(\""ProseMirrorHelper\"", () => {\n     it(\""should return the table node with the mentioned row only\"", () => {\n       const mentionAttrs: MentionAttrs = {\n         id: \""31d5899f-e544-4ff6-b6d3-c49dd6b81901\"",\n-        type: \""user\"",\n+        type: MentionType.User,\n         label: \""test.user\"",\n         actorId: \""ccec260a-e060-4925-ade8-17cfabaf2cac\"",\n         modelId: \""9a17c1c8-d178-4350-9001-203a73070fcb\"",\n@@ -195,7 +195,7 @@ describe(\""ProseMirrorHelper\"", () => {\n     it(\""should return the checkbox list with the mentioned item only\"", () => {\n       const mentionAttrs: MentionAttrs = {\n         id: \""31d5899f-e544-4ff6-b6d3-c49dd6b81901\"",\n-        type: \""user\"",\n+        type: MentionType.User,\n         label: \""test.user\"",\n         actorId: \""ccec260a-e060-4925-ade8-17cfabaf2cac\"",\n         modelId: \""9a17c1c8-d178-4350-9001-203a73070fcb\"",\n@@ -275,7 +275,7 @@ describe(\""ProseMirrorHelper\"", () => {\n     it(\""should not return anything when the mention attrs could not be found\"", () => {\n       const mentionAttrs: MentionAttrs = {\n         id: \""31d5899f-e544-4ff6-b6d3-c49dd6b81901\"",\n-        type: \""user\"",\n+        type: MentionType.User,\n         label: \""test.user\"",\n         actorId: \""ccec260a-e060-4925-ade8-17cfabaf2cac\"",\n         modelId: \""9a17c1c8-d178-4350-9001-203a73070fcb\"",\n\ndiff --git a/server/queues/processors/BacklinksProcessor.test.ts b/server/queues/processors/BacklinksProcessor.test.ts\nindex 4ae37b72ad29..fff2e5e3eefe 100644\n--- a/server/queues/processors/BacklinksProcessor.test.ts\n+++ b/server/queues/processors/BacklinksProcessor.test.ts\n@@ -1,3 +1,4 @@\n+import { parser } from \""@server/editor\"";\n import { Backlink } from \""@server/models\"";\n import { buildDocument } from \""@server/test/factories\"";\n import BacklinksProcessor from \""./BacklinksProcessor\"";\n@@ -5,7 +6,7 @@ import BacklinksProcessor from \""./BacklinksProcessor\"";\n const ip = \""127.0.0.1\"";\n \n describe(\""documents.publish\"", () => {\n-  test(\""should create new backlink records\"", async () => {\n+  it(\""should create new backlink records\"", async () => {\n     const otherDocument = await buildDocument();\n     const document = await buildDocument({\n       text: `[this is a link](${otherDocument.url})`,\n@@ -29,14 +30,16 @@ describe(\""documents.publish\"", () => {\n     expect(backlinks.length).toBe(1);\n   });\n \n-  test(\""should not fail when linked document is destroyed\"", async () => {\n+  it(\""should not fail when linked document is destroyed\"", async () => {\n     const otherDocument = await buildDocument();\n     await otherDocument.destroy();\n     const document = await buildDocument({\n       version: 0,\n       text: `[ ] checklist item`,\n     });\n-    document.text = `[this is a link](${otherDocument.url})`;\n+    document.content = parser\n+      .parse(`[this is a link](${otherDocument.url})`)\n+      ?.toJSON();\n     await document.save();\n \n     const processor = new BacklinksProcessor();\n@@ -59,7 +62,7 @@ describe(\""documents.publish\"", () => {\n });\n \n describe(\""documents.update\"", () => {\n-  test(\""should not fail on a document with no previous revisions\"", async () => {\n+  it(\""should not fail on a document with no previous revisions\"", async () => {\n     const otherDocument = await buildDocument();\n     const document = await buildDocument({\n       text: `[this is a link](${otherDocument.url})`,\n@@ -84,13 +87,15 @@ describe(\""documents.update\"", () => {\n     expect(backlinks.length).toBe(1);\n   });\n \n-  test(\""should not fail when previous revision is different document version\"", async () => {\n+  it(\""should not fail when previous revision is different document version\"", async () => {\n     const otherDocument = await buildDocument();\n     const document = await buildDocument({\n       version: undefined,\n       text: `[ ] checklist item`,\n     });\n-    document.text = `[this is a link](${otherDocument.url})`;\n+    document.content = parser\n+      .parse(`[this is a link](${otherDocument.url})`)\n+      ?.toJSON();\n     await document.save();\n \n     const processor = new BacklinksProcessor();\n@@ -112,10 +117,12 @@ describe(\""documents.update\"", () => {\n     expect(backlinks.length).toBe(1);\n   });\n \n-  test(\""should create new backlink records\"", async () => {\n+  it(\""should create new backlink records\"", async () => {\n     const otherDocument = await buildDocument();\n     const document = await buildDocument();\n-    document.text = `[this is a link](${otherDocument.url})`;\n+    document.content = parser\n+      .parse(`[this is a link](${otherDocument.url})`)\n+      ?.toJSON();\n     await document.save();\n \n     const processor = new BacklinksProcessor();\n@@ -137,7 +144,7 @@ describe(\""documents.update\"", () => {\n     expect(backlinks.length).toBe(1);\n   });\n \n-  test(\""should destroy removed backlink records\"", async () => {\n+  it(\""should destroy removed backlink records\"", async () => {\n     const otherDocument = await buildDocument();\n     const yetAnotherDocument = await buildDocument();\n     const document = await buildDocument({\n@@ -156,9 +163,13 @@ describe(\""documents.update\"", () => {\n       data: { title: document.title },\n       ip,\n     });\n-    document.text = `First link is gone\n+    document.content = parser\n+      .parse(\n+        `First link is gone\n \n-[this is a another link](${yetAnotherDocument.url})`;\n+  [this is a another link](${yetAnotherDocument.url})`\n+      )\n+      ?.toJSON();\n     await document.save();\n \n     await processor.perform({\n@@ -182,10 +193,12 @@ describe(\""documents.update\"", () => {\n });\n \n describe(\""documents.delete\"", () => {\n-  test(\""should destroy related backlinks\"", async () => {\n+  it(\""should destroy related backlinks\"", async () => {\n     const otherDocument = await buildDocument();\n     const document = await buildDocument();\n-    document.text = `[this is a link](${otherDocument.url})`;\n+    document.content = parser\n+      .parse(`[this is a link](${otherDocument.url})`)\n+      ?.toJSON();\n     await document.save();\n \n     const processor = new BacklinksProcessor();\n\ndiff --git a/server/utils/parseDocumentIds.test.ts b/server/utils/parseDocumentIds.test.ts\ndeleted file mode 100644\nindex 2b5c7d7dd62b..000000000000\n--- a/server/utils/parseDocumentIds.test.ts\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-import parseDocumentIds from \""./parseDocumentIds\"";\n-\n-it(\""should not return non links\"", () => {\n-  expect(parseDocumentIds(`# Header`).length).toBe(0);\n-});\n-\n-it(\""should return an array of document ids\"", () => {\n-  const result = parseDocumentIds(`# Header\n-  \n-  [internal](http://app.getoutline.com/doc/test-456733)\n-\n-  More text \n-\n-  [internal](/doc/test-123456#heading-anchor)\n-  `);\n-  expect(result.length).toBe(2);\n-  expect(result[0]).toBe(\""test-456733\"");\n-  expect(result[1]).toBe(\""test-123456\"");\n-});\n-\n-it(\""should return deeply nested link document ids\"", () => {\n-  const result = parseDocumentIds(`# Header\n-  \n-  [internal](http://app.getoutline.com/doc/test-456733)\n-\n-  More text \n-\n-- one\n-  - two\n-    - three [internal](/doc/test-123456#heading-anchor)\n-  `);\n-  expect(result.length).toBe(2);\n-  expect(result[0]).toBe(\""test-456733\"");\n-  expect(result[1]).toBe(\""test-123456\"");\n-});\n-\n-it(\""should not return duplicate document ids\"", () => {\n-  expect(parseDocumentIds(`# Header`).length).toBe(0);\n-  const result = parseDocumentIds(`# Header\n-  \n-  [internal](/doc/test-456733)\n-\n-  [another link to the same doc](/doc/test-456733)\n-  `);\n-  expect(result.length).toBe(1);\n-  expect(result[0]).toBe(\""test-456733\"");\n-});\n-\n-it(\""should not return non document links\"", () => {\n-  expect(parseDocumentIds(`[google](http://www.google.com)`).length).toBe(0);\n-});\n-\n-it(\""should not return non document relative links\"", () => {\n-  expect(parseDocumentIds(`[relative](/developers)`).length).toBe(0);\n-});\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8196"", ""pr_id"": 8196, ""issue_id"": 8071, ""repo"": ""outline/outline"", ""problem_statement"": ""Add parameter to return selected text with comments via API\nWhen a comment is on selected text it would be useful to be able to return that via the API.\r\n\r\nWe can get this by parsing the document state and finding the matching mark with comment ID \u2013 this will be relatively expensive and should be optional."", ""issue_word_count"": 46, ""test_files_count"": 3, ""non_test_files_count"": 5, ""pr_changed_files"": [""app/scenes/Document/components/CommentThread.tsx"", ""server/presenters/comment.ts"", ""server/routes/api/comments/comments.test.ts"", ""server/routes/api/comments/comments.ts"", ""server/routes/api/comments/schema.ts"", ""server/test/factories.ts"", ""shared/utils/ProsemirrorHelper.test.ts"", ""shared/utils/ProsemirrorHelper.ts""], ""pr_changed_test_files"": [""server/routes/api/comments/comments.test.ts"", ""server/test/factories.ts"", ""shared/utils/ProsemirrorHelper.test.ts""], ""base_commit"": ""25f264a763aa76887d9bcccbea7c2c42b6eb78c2"", ""head_commit"": ""2bb83624cc10fb133d71b7bbedb0f535e200cee9"", ""repo_url"": ""https://github.com/outline/outline/pull/8196"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8196"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-07T01:13:37.000Z"", ""patch"": ""diff --git a/app/scenes/Document/components/CommentThread.tsx b/app/scenes/Document/components/CommentThread.tsx\nindex d4452d21c868..5be9a5a8dc81 100644\n--- a/app/scenes/Document/components/CommentThread.tsx\n+++ b/app/scenes/Document/components/CommentThread.tsx\n@@ -8,6 +8,7 @@ import styled, { css } from \""styled-components\"";\n import breakpoint from \""styled-components-breakpoint\"";\n import { s } from \""@shared/styles\"";\n import { ProsemirrorData } from \""@shared/types\"";\n+import { ProsemirrorHelper } from \""@shared/utils/ProsemirrorHelper\"";\n import Comment from \""~/models/Comment\"";\n import Document from \""~/models/Document\"";\n import { Avatar, AvatarSize } from \""~/components/Avatar\"";\n@@ -74,10 +75,10 @@ function CommentThread({\n \n   const canReply = can.comment && !thread.isResolved;\n \n-  const highlightedCommentMarks = editor\n-    ?.getComments()\n-    .filter((comment) => comment.id === thread.id);\n-  const highlightedText = highlightedCommentMarks?.map((c) => c.text).join(\""\"");\n+  const highlightedText = ProsemirrorHelper.getAnchorTextForComment(\n+    editor?.getComments() ?? [],\n+    thread.id\n+  );\n \n   const commentsInThread = comments\n     .inThread(thread.id)\n\ndiff --git a/server/presenters/comment.ts b/server/presenters/comment.ts\nindex 06c10e8bb278..9440a1743458 100644\n--- a/server/presenters/comment.ts\n+++ b/server/presenters/comment.ts\n@@ -1,7 +1,29 @@\n+import { ProsemirrorHelper } from \""@shared/utils/ProsemirrorHelper\"";\n import { Comment } from \""@server/models\"";\n+import { DocumentHelper } from \""@server/models/helpers/DocumentHelper\"";\n import presentUser from \""./user\"";\n \n-export default function present(comment: Comment) {\n+type Options = {\n+  /** Whether to include anchor text, if it exists */\n+  includeAnchorText?: boolean;\n+};\n+\n+export default function present(\n+  comment: Comment,\n+  { includeAnchorText }: Options = {}\n+) {\n+  let anchorText: string | undefined;\n+\n+  if (includeAnchorText && comment.document) {\n+    const commentMarks = ProsemirrorHelper.getComments(\n+      DocumentHelper.toProsemirror(comment.document)\n+    );\n+    anchorText = ProsemirrorHelper.getAnchorTextForComment(\n+      commentMarks,\n+      comment.id\n+    );\n+  }\n+\n   return {\n     id: comment.id,\n     data: comment.data,\n@@ -15,5 +37,6 @@ export default function present(comment: Comment) {\n     createdAt: comment.createdAt,\n     updatedAt: comment.updatedAt,\n     reactions: comment.reactions ?? [],\n+    anchorText,\n   };\n }\n\ndiff --git a/server/routes/api/comments/comments.ts b/server/routes/api/comments/comments.ts\nindex fc826d434ea6..ffa43321a11b 100644\n--- a/server/routes/api/comments/comments.ts\n+++ b/server/routes/api/comments/comments.ts\n@@ -60,7 +60,7 @@ router.post(\n   feature(TeamPreference.Commenting),\n   validate(T.CommentsInfoSchema),\n   async (ctx: APIContext<T.CommentsInfoReq>) => {\n-    const { id } = ctx.input.body;\n+    const { id, includeAnchorText } = ctx.input.body;\n     const { user } = ctx.state.auth;\n \n     const comment = await Comment.findByPk(id, {\n@@ -72,8 +72,10 @@ router.post(\n     authorize(user, \""read\"", comment);\n     authorize(user, \""read\"", document);\n \n+    comment.document = document;\n+\n     ctx.body = {\n-      data: presentComment(comment),\n+      data: presentComment(comment, { includeAnchorText }),\n       policies: presentPolicies(user, [comment]),\n     };\n   }\n@@ -93,6 +95,7 @@ router.post(\n       parentCommentId,\n       statusFilter,\n       collectionId,\n+      includeAnchorText,\n     } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const statusQuery = [];\n@@ -135,6 +138,7 @@ router.post(\n         Comment.findAll(params),\n         Comment.count({ where }),\n       ]);\n+      comments.forEach((comment) => (comment.document = document));\n     } else if (collectionId) {\n       const collection = await Collection.findByPk(collectionId);\n       authorize(user, \""read\"", collection);\n@@ -184,7 +188,9 @@ router.post(\n \n     ctx.body = {\n       pagination: { ...ctx.state.pagination, total },\n-      data: comments.map(presentComment),\n+      data: comments.map((comment) =>\n+        presentComment(comment, { includeAnchorText })\n+      ),\n       policies: presentPolicies(user, comments),\n     };\n   }\n\ndiff --git a/server/routes/api/comments/schema.ts b/server/routes/api/comments/schema.ts\nindex aae839fc15de..774f07292b65 100644\n--- a/server/routes/api/comments/schema.ts\n+++ b/server/routes/api/comments/schema.ts\n@@ -65,13 +65,18 @@ export const CommentsListSchema = BaseSchema.extend({\n     parentCommentId: z.string().uuid().optional(),\n     /** Comment statuses to include in results */\n     statusFilter: z.nativeEnum(CommentStatusFilter).array().optional(),\n+    /** Whether to include anchor text, if it exists */\n+    includeAnchorText: z.boolean().optional(),\n   }),\n });\n \n export type CommentsListReq = z.infer<typeof CommentsListSchema>;\n \n export const CommentsInfoSchema = z.object({\n-  body: BaseIdSchema,\n+  body: BaseIdSchema.extend({\n+    /** Whether to include anchor text, if it exists */\n+    includeAnchorText: z.boolean().optional(),\n+  }),\n });\n \n export type CommentsInfoReq = z.infer<typeof CommentsInfoSchema>;\n\ndiff --git a/shared/utils/ProsemirrorHelper.ts b/shared/utils/ProsemirrorHelper.ts\nindex be1b16a1c46f..ffa177e197a7 100644\n--- a/shared/utils/ProsemirrorHelper.ts\n+++ b/shared/utils/ProsemirrorHelper.ts\n@@ -204,6 +204,24 @@ export class ProsemirrorHelper {\n     return comments;\n   }\n \n+  /**\n+   * Builds the consolidated anchor text for the given comment-id.\n+   *\n+   * @param marks all available comment marks in a document.\n+   * @param commentId the comment-id to build the anchor text.\n+   * @returns consolidated anchor text.\n+   */\n+  static getAnchorTextForComment(\n+    marks: CommentMark[],\n+    commentId: string\n+  ): string | undefined {\n+    const anchorTexts = marks\n+      .filter((mark) => mark.id === commentId)\n+      .map((mark) => mark.text);\n+\n+    return anchorTexts.length ? anchorTexts.join(\""\"") : undefined;\n+  }\n+\n   /**\n    * Iterates through the document to find all of the images.\n    *\n"", ""test_patch"": ""diff --git a/server/routes/api/comments/comments.test.ts b/server/routes/api/comments/comments.test.ts\nindex d33be0ec3d33..88e8695037d0 100644\n--- a/server/routes/api/comments/comments.test.ts\n+++ b/server/routes/api/comments/comments.test.ts\n@@ -1,9 +1,14 @@\n-import { CommentStatusFilter, ReactionSummary } from \""@shared/types\"";\n+import {\n+  CommentStatusFilter,\n+  ProsemirrorData,\n+  ReactionSummary,\n+} from \""@shared/types\"";\n import { Comment, Reaction } from \""@server/models\"";\n import {\n   buildAdmin,\n   buildCollection,\n   buildComment,\n+  buildCommentMark,\n   buildDocument,\n   buildResolvedComment,\n   buildTeam,\n@@ -78,6 +83,92 @@ describe(\""#comments.info\"", () => {\n     expect(body.policies[0].abilities.update).toBeTruthy();\n     expect(body.policies[0].abilities.delete).toBeTruthy();\n   });\n+\n+  it(\""should return anchor text for an anchored comment\"", async () => {\n+    const anchorText = \""anchor text\"";\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    const content = {\n+      type: \""doc\"",\n+      content: [\n+        {\n+          type: \""paragraph\"",\n+          content: [\n+            {\n+              type: \""text\"",\n+              text: anchorText,\n+              marks: [buildCommentMark({ id: comment.id, userId: user.id })],\n+            },\n+          ],\n+        },\n+      ],\n+    } as ProsemirrorData;\n+    await document.update({ content });\n+\n+    const res = await server.post(\""/api/comments.info\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+        includeAnchorText: true,\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.id).toEqual(comment.id);\n+    expect(body.data.anchorText).toEqual(anchorText);\n+  });\n+\n+  it(\""should not return anchor text for a non-anchored comment\"", async () => {\n+    const anchorText = \""anchor text\"";\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    const content = {\n+      type: \""doc\"",\n+      content: [\n+        {\n+          type: \""paragraph\"",\n+          content: [\n+            {\n+              type: \""text\"",\n+              text: anchorText,\n+              marks: [buildCommentMark({ userId: user.id })],\n+            },\n+          ],\n+        },\n+      ],\n+    } as ProsemirrorData;\n+    await document.update({ content });\n+\n+    const res = await server.post(\""/api/comments.info\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+        includeAnchorText: true,\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.id).toEqual(comment.id);\n+    expect(body.data.anchorText).toBeUndefined();\n+  });\n });\n \n describe(\""#comments.list\"", () => {\n@@ -120,6 +211,58 @@ describe(\""#comments.list\"", () => {\n     expect(body.pagination.total).toEqual(2);\n   });\n \n+  it(\""should return anchor texts for comments in a document\"", async () => {\n+    const anchorText = \""anchor text\"";\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const commentOne = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    const commentTwo = await buildResolvedComment(user, {\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    const content = {\n+      type: \""doc\"",\n+      content: [\n+        {\n+          type: \""paragraph\"",\n+          content: [\n+            {\n+              type: \""text\"",\n+              text: anchorText,\n+              marks: [buildCommentMark({ id: commentOne.id, userId: user.id })],\n+            },\n+          ],\n+        },\n+      ],\n+    } as ProsemirrorData;\n+    await document.update({ content });\n+\n+    const res = await server.post(\""/api/comments.list\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+        includeAnchorText: true,\n+        sort: \""createdAt\"",\n+        direction: \""ASC\"",\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(2);\n+    expect(body.data[0].id).toEqual(commentOne.id);\n+    expect(body.data[1].id).toEqual(commentTwo.id);\n+    expect(body.data[0].anchorText).toEqual(anchorText);\n+    expect(body.data[1].anchorText).toBeUndefined();\n+  });\n+\n   it(\""should return unresolved comments for a collection\"", async () => {\n     const team = await buildTeam();\n     const user = await buildUser({ teamId: team.id });\n\ndiff --git a/server/test/factories.ts b/server/test/factories.ts\nindex 1afdd8234978..6308be0c1113 100644\n--- a/server/test/factories.ts\n+++ b/server/test/factories.ts\n@@ -654,3 +654,23 @@ export function buildProseMirrorDoc(content: DeepPartial<ProsemirrorData>[]) {\n     content,\n   });\n }\n+\n+export function buildCommentMark(overrides: {\n+  id?: string;\n+  userId?: string;\n+  draft?: boolean;\n+  resolved?: boolean;\n+}) {\n+  if (!overrides.id) {\n+    overrides.id = randomstring.generate(10);\n+  }\n+\n+  if (!overrides.userId) {\n+    overrides.userId = randomstring.generate(10);\n+  }\n+\n+  return {\n+    type: \""comment\"",\n+    attrs: overrides,\n+  };\n+}\n\ndiff --git a/shared/utils/ProsemirrorHelper.test.ts b/shared/utils/ProsemirrorHelper.test.ts\nnew file mode 100644\nindex 000000000000..55c6d3d0f7b0\n--- /dev/null\n+++ b/shared/utils/ProsemirrorHelper.test.ts\n@@ -0,0 +1,90 @@\n+import { CommentMark, ProsemirrorHelper } from \""./ProsemirrorHelper\"";\n+\n+describe(\""ProsemirrorHelper\"", () => {\n+  describe(\""getAnchorTextForComment\"", () => {\n+    it(\""should return the anchor text for the comment\"", async () => {\n+      const commentId = \""test-comment-id\"";\n+      const anchorText = \""anchor text\"";\n+      const commentMarks: CommentMark[] = [\n+        {\n+          id: commentId,\n+          userId: \""test-user-id\"",\n+          text: anchorText,\n+        },\n+        {\n+          id: \""random-comment-id\"",\n+          userId: \""test-user-id\"",\n+          text: \""some random text\"",\n+        },\n+      ];\n+\n+      const returnedAnchorText = ProsemirrorHelper.getAnchorTextForComment(\n+        commentMarks,\n+        commentId\n+      );\n+\n+      expect(returnedAnchorText).toEqual(anchorText);\n+    });\n+\n+    it(\""should return the consolidated anchor text when multiple marks are present for the comment\"", async () => {\n+      const commentId = \""test-comment-id\"";\n+      const anchorTextOne = \""anchor text 1\"";\n+      const anchorTextTwo = \""anchor text 2\"";\n+      const commentMarks: CommentMark[] = [\n+        {\n+          id: commentId,\n+          userId: \""test-user-id\"",\n+          text: anchorTextOne,\n+        },\n+        {\n+          id: commentId,\n+          userId: \""test-user-id\"",\n+          text: anchorTextTwo,\n+        },\n+        {\n+          id: \""random-comment-id\"",\n+          userId: \""test-user-id\"",\n+          text: \""some random text\"",\n+        },\n+      ];\n+\n+      const returnedAnchorText = ProsemirrorHelper.getAnchorTextForComment(\n+        commentMarks,\n+        commentId\n+      );\n+\n+      expect(returnedAnchorText).toEqual(`${anchorTextOne}${anchorTextTwo}`);\n+    });\n+\n+    it(\""should return undefined when no comment mark matches the provided comment\"", async () => {\n+      const commentId = \""test-comment-id\"";\n+      const commentMarks: CommentMark[] = [\n+        {\n+          id: \""random-comment-id-1\"",\n+          userId: \""test-user-id\"",\n+          text: \""some random text\"",\n+        },\n+        {\n+          id: \""random-comment-id-2\"",\n+          userId: \""test-user-id\"",\n+          text: \""some random text\"",\n+        },\n+      ];\n+\n+      const returnedAnchorText = ProsemirrorHelper.getAnchorTextForComment(\n+        commentMarks,\n+        commentId\n+      );\n+\n+      expect(returnedAnchorText).toBeUndefined();\n+    });\n+\n+    it(\""should return undefined when comment marks are empty\"", async () => {\n+      const returnedAnchorText = ProsemirrorHelper.getAnchorTextForComment(\n+        [],\n+        \""test-comment-id\""\n+      );\n+      expect(returnedAnchorText).toBeUndefined();\n+    });\n+  });\n+});\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8189"", ""pr_id"": 8189, ""issue_id"": 8048, ""repo"": ""outline/outline"", ""problem_statement"": ""Threading of emails from document edits is too deeply nested\nA clear and concise description of what the bug is.\r\n\r\n**To Reproduce**\r\n1) Have multuple edits to a document over time which sends many emails (eg over days)\r\n2) look at the nesting of emails in thunderbird\r\n\r\n![image](https://github.com/user-attachments/assets/f685f155-aefc-4058-be96-0b6f472dda77)\r\n\r\nNot all email clients do this, eg gmail ignores the email headers and always does single level threading.\r\n\r\nConceptually a series of 10 edits in serial against a document is 10 comments against the same item (ie the document). Deeply nested threads like above are appropriate for when a user is commenting on a comment, or commenting on a comment on a comment etc which isn't the case here.\r\n\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nThe emails should have the threading headers in place to group them, but they should only be nested to a single level and not deeply recursively nested.\r\n\r\nCurrent state of headers:\r\n```\r\nIn-Reply-To: <774d50e7-1610-4134-917f-429f16b452da@docs.catalyst-it.io>\r\nReferences: <bc5cecb4-8945-4733-b1b0-4fb4101596cd@docs.catalyst-it.io>\r\n <15d071ae-1b59-4d1a-bc4f-c59957215c63@docs.catalyst-it.io>\r\n <1bbef69c-f01c-4346-9932-41e575b8c79f@docs.catalyst-it.io>\r\n <7656aaf9-9ff1-44fc-8e51-c80913ea2b41@docs.catalyst-it.io>\r\n <cd56ba46-728e-4864-b8ba-344a9cece832@docs.catalyst-it.io>\r\n <774d50e7-1610-4134-917f-429f16b452da@docs.catalyst-it.io>\r\n```\r\n\r\nDesired state of headers:\r\n\r\nIt isn't clear to me exactly what the id's used in these headers are, but the `References` header should only have a single value which would be some ID tied to the document id. the `In-Reply-To` header can be identical.\r\n\r\n```\r\nIn-Reply-To: <774d50e7-1610-4134-917f-429f16b452da@docs.catalyst-it.io>\r\nReferences: <774d50e7-1610-4134-917f-429f16b452da@docs.catalyst-it.io>\r\n```\r\nfor instance this doc has a url stub of /doc/weekly-tasks-7MPst8lrrR so it would seem simpler to me to have these headers:\r\n\r\n```\r\nIn-Reply-To: <7MPst8lrrR@docs.catalyst-it.io>\r\nReferences: <7MPst8lrrR@docs.catalyst-it.io>\r\n```\r\n\r\nThe values of these do not need to point to valid Message ID's, they just need to be the same between emails to group them.\r\n\r\n\r\n\r\n**Outline (please complete the following information):**\r\nCommit https://github.com/outline/outline/commit/86c3ea8e\r\n\r\n**Desktop (please complete the following information):**\r\nUbuntu thunderbird\r\n\r\n"", ""issue_word_count"": 386, ""test_files_count"": 1, ""non_test_files_count"": 5, ""pr_changed_files"": [""server/emails/templates/BaseEmail.tsx"", ""server/emails/templates/CommentCreatedEmail.tsx"", ""server/models/Notification.test.ts"", ""server/models/Notification.ts"", ""server/models/helpers/DocumentHelper.tsx"", ""server/utils/emails.ts""], ""pr_changed_test_files"": [""server/models/Notification.test.ts""], ""base_commit"": ""db30d080aeb29f15321badb7576115e39d2f2ded"", ""head_commit"": ""ec7aa2e50a1e4ca5df9bc41fef5a9e34eba258e2"", ""repo_url"": ""https://github.com/outline/outline/pull/8189"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8189"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-07T13:29:04.000Z"", ""patch"": ""diff --git a/server/emails/templates/BaseEmail.tsx b/server/emails/templates/BaseEmail.tsx\nindex 0744bfb51f0b..8a2176bd4d95 100644\n--- a/server/emails/templates/BaseEmail.tsx\n+++ b/server/emails/templates/BaseEmail.tsx\n@@ -18,7 +18,6 @@ import { TextHelper } from \""@server/models/helpers/TextHelper\"";\n import { taskQueue } from \""@server/queues\"";\n import { TaskPriority } from \""@server/queues/tasks/BaseTask\"";\n import { NotificationMetadata } from \""@server/types\"";\n-import { getEmailMessageId } from \""@server/utils/emails\"";\n \n export enum EmailMessageCategory {\n   Authentication = \""authentication\"",\n@@ -138,7 +137,7 @@ export default abstract class BaseEmail<\n     }\n \n     const messageId = notification\n-      ? getEmailMessageId(notification.id)\n+      ? Notification.emailMessageId(notification.id)\n       : undefined;\n \n     const references = notification\n\ndiff --git a/server/emails/templates/CommentCreatedEmail.tsx b/server/emails/templates/CommentCreatedEmail.tsx\nindex 3396caa272be..67615e56d51a 100644\n--- a/server/emails/templates/CommentCreatedEmail.tsx\n+++ b/server/emails/templates/CommentCreatedEmail.tsx\n@@ -1,6 +1,7 @@\n import * as React from \""react\"";\n import { NotificationEventType } from \""@shared/types\"";\n import { Collection, Comment, Document } from \""@server/models\"";\n+import { DocumentHelper } from \""@server/models/helpers/DocumentHelper\"";\n import NotificationSettingsHelper from \""@server/models/helpers/NotificationSettingsHelper\"";\n import { ProsemirrorHelper } from \""@server/models/helpers/ProsemirrorHelper\"";\n import { can } from \""@server/policies\"";\n@@ -14,6 +15,8 @@ import Footer from \""./components/Footer\"";\n import Header from \""./components/Header\"";\n import Heading from \""./components/Heading\"";\n \n+const MAX_SUBJECT_CONTENT = 50;\n+\n type InputProps = EmailProps & {\n   userId: string;\n   documentId: string;\n@@ -23,10 +26,11 @@ type InputProps = EmailProps & {\n };\n \n type BeforeSend = {\n+  comment: Comment;\n+  parentComment?: Comment;\n   document: Document;\n   collection: Collection | null;\n   body: string | undefined;\n-  isFirstComment: boolean;\n   isReply: boolean;\n   unsubscribeUrl: string;\n };\n@@ -61,24 +65,22 @@ export default class CommentCreatedEmail extends BaseEmail<\n       return false;\n     }\n \n-    const firstComment = await Comment.findOne({\n-      attributes: [\""id\""],\n-      where: { documentId },\n-      order: [[\""createdAt\"", \""ASC\""]],\n-    });\n+    const parentComment = comment.parentCommentId\n+      ? (await comment.$get(\""parentComment\"")) ?? undefined\n+      : undefined;\n \n     const body = await this.htmlForData(\n       team,\n       ProsemirrorHelper.toProsemirror(comment.data)\n     );\n     const isReply = !!comment.parentCommentId;\n-    const isFirstComment = firstComment?.id === commentId;\n \n     return {\n+      comment,\n+      parentComment,\n       document,\n       collection,\n       isReply,\n-      isFirstComment,\n       body,\n       unsubscribeUrl: this.unsubscribeUrl(props),\n     };\n@@ -91,8 +93,18 @@ export default class CommentCreatedEmail extends BaseEmail<\n     );\n   }\n \n-  protected subject({ isFirstComment, document }: Props) {\n-    return `${isFirstComment ? \""\"" : \""Re: \""}New comment on \u201c${document.title}\u201d`;\n+  protected subject({ comment, parentComment, document }: Props) {\n+    const commentText = DocumentHelper.toPlainText(\n+      parentComment?.data ?? comment.data\n+    );\n+    const trimmedText =\n+      commentText.length <= MAX_SUBJECT_CONTENT\n+        ? commentText\n+        : `${commentText.slice(0, MAX_SUBJECT_CONTENT)}...`;\n+\n+    return `${parentComment ? \""Re: \"" : \""\""}New comment on \u201c${\n+      document.title\n+    }\u201d - ${trimmedText}`;\n   }\n \n   protected preview({ isReply, actorName }: Props): string {\n\ndiff --git a/server/models/Notification.ts b/server/models/Notification.ts\nindex 2f31f8bd4e34..ee6007705b3a 100644\n--- a/server/models/Notification.ts\n+++ b/server/models/Notification.ts\n@@ -1,11 +1,9 @@\n import crypto from \""crypto\"";\n-import chunk from \""lodash/chunk\"";\n import type {\n   InferAttributes,\n   InferCreationAttributes,\n   SaveOptions,\n } from \""sequelize\"";\n-import { Op } from \""sequelize\"";\n import {\n   Table,\n   ForeignKey,\n@@ -22,14 +20,9 @@ import {\n   DefaultScope,\n } from \""sequelize-typescript\"";\n import { NotificationEventType } from \""@shared/types\"";\n+import { getBaseDomain } from \""@shared/utils/domains\"";\n import env from \""@server/env\"";\n import Model from \""@server/models/base/Model\"";\n-import {\n-  getEmailMessageId,\n-  getEmailThreadEventGroup,\n-  isEmailThreadSupportedNotification,\n-  MaxMessagesInEmailThread,\n-} from \""@server/utils/emails\"";\n import Collection from \""./Collection\"";\n import Comment from \""./Comment\"";\n import Document from \""./Document\"";\n@@ -39,6 +32,8 @@ import Team from \""./Team\"";\n import User from \""./User\"";\n import Fix from \""./decorators/Fix\"";\n \n+let baseDomain;\n+\n @Scopes(() => ({\n   withTeam: {\n     include: [\n@@ -228,62 +223,44 @@ class Notification extends Model<\n   }\n \n   /**\n-   * Returns the past message ids which are used to setup the thread chain in email clients.\n+   * Returns the message id for the email.\n+   *\n+   * @param name Username part of the email address.\n+   * @returns Email message id.\n+   */\n+  public static emailMessageId(name: string) {\n+    baseDomain ||= getBaseDomain();\n+    return `<${name}@${baseDomain}>`;\n+  }\n+\n+  /**\n+   * Returns the message reference id which will be used to setup the thread chain in email clients.\n    *\n-   * @param notification Notification for which the past notifications are fetched - used for determining the properties that form a thread.\n-   * @returns An array of email message ids that form a thread.\n+   * @param notification Notification for which to determine the reference id.\n+   * @returns Reference id as an array.\n    */\n   public static async emailReferences(\n     notification: Notification\n   ): Promise<string[] | undefined> {\n-    if (!isEmailThreadSupportedNotification(notification.event)) {\n-      return;\n-    }\n-\n-    const events = getEmailThreadEventGroup(notification.event);\n-\n-    if (!events) {\n-      return;\n-    }\n-\n-    const prevNotifications: Notification[] = [];\n-\n-    await this.findAllInBatches<Notification>(\n-      {\n-        attributes: [\""id\""],\n-        where: {\n-          id: {\n-            [Op.ne]: notification.id,\n-          },\n-          event: {\n-            [Op.in]: events,\n-          },\n-          documentId: notification.documentId,\n-          userId: notification.userId,\n-        },\n-        order: [[\""createdAt\"", \""ASC\""]],\n-        offset: 0,\n-        batchLimit: 100,\n-      },\n-      async (notifications) => void prevNotifications.push(...notifications)\n-    );\n-\n-    const emailThreads = chunk(prevNotifications, MaxMessagesInEmailThread);\n-    const lastThread = emailThreads.at(-1);\n-\n-    // Don't return anything if there are no past notifications (or) the limit is reached.\n-    // This will start a new thread in the email clients.\n-    // Also ensures we don't face header limit errors.\n-    if (\n-      !lastThread ||\n-      lastThread.length === 0 ||\n-      lastThread.length === MaxMessagesInEmailThread\n-    ) {\n-      return;\n+    let name: string | undefined;\n+\n+    switch (notification.event) {\n+      case NotificationEventType.PublishDocument:\n+      case NotificationEventType.UpdateDocument:\n+        name = `${notification.documentId}-updates`;\n+        break;\n+      case NotificationEventType.MentionedInDocument:\n+      case NotificationEventType.MentionedInComment:\n+        name = `${notification.documentId}-mentions`;\n+        break;\n+      case NotificationEventType.CreateComment: {\n+        const comment = await Comment.findByPk(notification.commentId);\n+        name = `${comment?.parentCommentId ?? comment?.id}-comments`;\n+        break;\n+      }\n     }\n \n-    // Return references from the last thread.\n-    return lastThread.map((notif) => getEmailMessageId(notif.id));\n+    return name ? [this.emailMessageId(name)] : undefined;\n   }\n }\n \n\ndiff --git a/server/models/helpers/DocumentHelper.tsx b/server/models/helpers/DocumentHelper.tsx\nindex d25a0e30e70a..ae4eab013deb 100644\n--- a/server/models/helpers/DocumentHelper.tsx\n+++ b/server/models/helpers/DocumentHelper.tsx\n@@ -132,10 +132,10 @@ export class DocumentHelper {\n    * Returns the document as plain text. This method uses the\n    * collaborative state if available, otherwise it falls back to Markdown.\n    *\n-   * @param document The document or revision to convert\n+   * @param document The document or revision or prosemirror data to convert\n    * @returns The document content as plain text without formatting.\n    */\n-  static toPlainText(document: Document | Revision) {\n+  static toPlainText(document: Document | Revision | ProsemirrorData) {\n     const node = DocumentHelper.toProsemirror(document);\n \n     return textBetween(node, 0, node.content.size, this.textSerializers);\n\ndiff --git a/server/utils/emails.ts b/server/utils/emails.ts\ndeleted file mode 100644\nindex 9e2af126b83e..000000000000\n--- a/server/utils/emails.ts\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-import { NotificationEventType } from \""@shared/types\"";\n-import { getBaseDomain } from \""@shared/utils/domains\"";\n-\n-const EmailThreadSupportedNotifications = [\n-  NotificationEventType.PublishDocument,\n-  NotificationEventType.UpdateDocument,\n-  NotificationEventType.MentionedInDocument,\n-  NotificationEventType.CreateComment,\n-  NotificationEventType.MentionedInComment,\n-];\n-\n-// Gmail creates a new thread for every 100 messages.\n-export const MaxMessagesInEmailThread = 100;\n-\n-export const isEmailThreadSupportedNotification = (\n-  event: NotificationEventType\n-) => EmailThreadSupportedNotifications.includes(event);\n-\n-export const getEmailThreadEventGroup = (\n-  event: NotificationEventType\n-): NotificationEventType[] | undefined => {\n-  switch (event) {\n-    case NotificationEventType.PublishDocument:\n-    case NotificationEventType.UpdateDocument:\n-      return [\n-        NotificationEventType.PublishDocument,\n-        NotificationEventType.UpdateDocument,\n-      ];\n-    case NotificationEventType.MentionedInDocument:\n-    case NotificationEventType.MentionedInComment:\n-      return [\n-        NotificationEventType.MentionedInDocument,\n-        NotificationEventType.MentionedInComment,\n-      ];\n-    case NotificationEventType.CreateComment:\n-      return [NotificationEventType.CreateComment];\n-    default:\n-      return;\n-  }\n-};\n-\n-let baseDomain;\n-\n-export const getEmailMessageId = (notificationId: string) => {\n-  baseDomain ||= getBaseDomain();\n-  return `<${notificationId}@${baseDomain}>`;\n-};\n"", ""test_patch"": ""diff --git a/server/models/Notification.test.ts b/server/models/Notification.test.ts\nindex 89fe47223cc9..61a5b31def21 100644\n--- a/server/models/Notification.test.ts\n+++ b/server/models/Notification.test.ts\n@@ -1,396 +1,140 @@\n import { NotificationEventType } from \""@shared/types\"";\n import {\n-  buildCollection,\n   buildComment,\n   buildDocument,\n   buildNotification,\n-  buildTeam,\n   buildUser,\n } from \""@server/test/factories\"";\n-import {\n-  getEmailMessageId,\n-  MaxMessagesInEmailThread,\n-} from \""@server/utils/emails\"";\n import Notification from \""./Notification\"";\n \n describe(\""Notification\"", () => {\n   describe(\""emailReferences\"", () => {\n-    it(\""should return no references for an unsupported notification\"", async () => {\n-      const team = await buildTeam();\n-      const user = await buildUser({ teamId: team.id });\n-      const collection = await buildCollection({\n-        userId: user.id,\n-        teamId: team.id,\n-      });\n-      const document = await buildDocument({\n-        collectionId: collection.id,\n-        userId: user.id,\n-        teamId: team.id,\n-      });\n-\n+    it(\""should return no reference for an unsupported notification\"", async () => {\n       const notification = await buildNotification({\n         event: NotificationEventType.AddUserToDocument,\n-        documentId: document.id,\n-        userId: user.id,\n-        teamId: team.id,\n       });\n       const references = await Notification.emailReferences(notification);\n-\n       expect(references).toBeUndefined();\n     });\n \n-    it(\""should return no references for a new notification\"", async () => {\n-      const team = await buildTeam();\n-      const user = await buildUser({ teamId: team.id });\n-      const collection = await buildCollection({\n-        userId: user.id,\n-        teamId: team.id,\n-      });\n-      const document = await buildDocument({\n-        collectionId: collection.id,\n-        userId: user.id,\n-        teamId: team.id,\n-      });\n-\n-      const notification = await buildNotification({\n-        event: NotificationEventType.UpdateDocument,\n-        documentId: document.id,\n-        userId: user.id,\n-        teamId: team.id,\n-      });\n-      const references = await Notification.emailReferences(notification);\n-\n-      expect(references).toBeUndefined();\n-    });\n-\n-    describe(\""should return references from last thread for current notification\"", () => {\n-      it(\""only one thread available\"", async () => {\n-        const team = await buildTeam();\n-        const user = await buildUser({ teamId: team.id });\n-        const collection = await buildCollection({\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const document = await buildDocument({\n-          collectionId: collection.id,\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const pastNotifications = await Notification.bulkCreate(\n-          [...Array(2)].map(() => ({\n-            event: NotificationEventType.UpdateDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          }))\n-        );\n-\n+    describe(\""should return document update reference\"", () => {\n+      it(\""document published\"", async () => {\n+        const document = await buildDocument();\n         const notification = await buildNotification({\n-          event: NotificationEventType.UpdateDocument,\n+          event: NotificationEventType.PublishDocument,\n           documentId: document.id,\n-          userId: user.id,\n-          teamId: team.id,\n         });\n-        const references = await Notification.emailReferences(notification);\n \n-        expect(references?.length).toEqual(2);\n+        const references = await Notification.emailReferences(notification);\n \n-        const expectedReferences = pastNotifications.map((notif) =>\n-          getEmailMessageId(notif.id)\n+        const expectedReference = Notification.emailMessageId(\n+          `${document.id}-updates`\n         );\n-\n-        expect(references).toEqual(expectedReferences);\n+        expect(references![0]).toBe(expectedReference);\n       });\n \n-      it(\""multiple threads available\"", async () => {\n-        const team = await buildTeam();\n-        const user = await buildUser({ teamId: team.id });\n-        const collection = await buildCollection({\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const document = await buildDocument({\n-          collectionId: collection.id,\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const pastNotifications = await Notification.bulkCreate(\n-          [...Array(105)].map(() => ({\n-            event: NotificationEventType.UpdateDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          }))\n-        );\n-\n+      it(\""document updated\"", async () => {\n+        const document = await buildDocument();\n         const notification = await buildNotification({\n           event: NotificationEventType.UpdateDocument,\n           documentId: document.id,\n-          userId: user.id,\n-          teamId: team.id,\n         });\n-        const references = await Notification.emailReferences(notification);\n-\n-        expect(references?.length).toEqual(5);\n \n-        const expectedReferences = pastNotifications\n-          .slice(MaxMessagesInEmailThread)\n-          .map((notif) => getEmailMessageId(notif.id));\n+        const references = await Notification.emailReferences(notification);\n \n-        expect(references).toEqual(expectedReferences);\n+        const expectedReference = Notification.emailMessageId(\n+          `${document.id}-updates`\n+        );\n+        expect(references![0]).toBe(expectedReference);\n       });\n     });\n \n-    describe(\""should return references from consolidated events\"", () => {\n-      it(\""document edits\"", async () => {\n-        const team = await buildTeam();\n-        const user = await buildUser({ teamId: team.id });\n-        const collection = await buildCollection({\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const document = await buildDocument({\n-          collectionId: collection.id,\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const pastNotifications = await Notification.bulkCreate([\n-          {\n-            event: NotificationEventType.PublishDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          ...[...Array(2)].map(() => ({\n-            event: NotificationEventType.UpdateDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          })),\n-          ...[...Array(2)].map(() => ({\n-            event: NotificationEventType.CreateComment,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          })),\n-        ]);\n-\n+    describe(\""should return mention reference\"", () => {\n+      it(\""mentioned in document\"", async () => {\n+        const document = await buildDocument();\n         const notification = await buildNotification({\n-          event: NotificationEventType.UpdateDocument,\n+          event: NotificationEventType.MentionedInDocument,\n           documentId: document.id,\n-          userId: user.id,\n-          teamId: team.id,\n         });\n-        const references = await Notification.emailReferences(notification);\n-\n-        expect(references?.length).toEqual(3);\n \n-        const expectedReferences = pastNotifications\n-          .filter(\n-            (notif) =>\n-              notif.event === NotificationEventType.PublishDocument ||\n-              notif.event === NotificationEventType.UpdateDocument\n-          )\n-          .map((notif) => getEmailMessageId(notif.id));\n+        const references = await Notification.emailReferences(notification);\n \n-        expect(references).toEqual(expectedReferences);\n+        const expectedReference = Notification.emailMessageId(\n+          `${document.id}-mentions`\n+        );\n+        expect(references?.length).toBe(1);\n+        expect(references![0]).toBe(expectedReference);\n       });\n \n-      it(\""comment creation\"", async () => {\n-        const team = await buildTeam();\n-        const user = await buildUser({ teamId: team.id });\n-        const collection = await buildCollection({\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const document = await buildDocument({\n-          collectionId: collection.id,\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n-        const pastNotifications = await Notification.bulkCreate([\n-          {\n-            event: NotificationEventType.PublishDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          ...[...Array(2)].map(() => ({\n-            event: NotificationEventType.UpdateDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          })),\n-          ...[...Array(2)].map(() => ({\n-            event: NotificationEventType.CreateComment,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          })),\n-        ]);\n-\n+      it(\""mentioned in comment\"", async () => {\n+        const document = await buildDocument();\n         const notification = await buildNotification({\n-          event: NotificationEventType.CreateComment,\n+          event: NotificationEventType.MentionedInComment,\n           documentId: document.id,\n-          userId: user.id,\n-          teamId: team.id,\n         });\n-        const references = await Notification.emailReferences(notification);\n \n-        expect(references?.length).toEqual(2);\n-\n-        const expectedReferences = pastNotifications\n-          .filter(\n-            (notif) => notif.event === NotificationEventType.CreateComment\n-          )\n-          .map((notif) => getEmailMessageId(notif.id));\n+        const references = await Notification.emailReferences(notification);\n \n-        expect(references).toEqual(expectedReferences);\n+        const expectedReference = Notification.emailMessageId(\n+          `${document.id}-mentions`\n+        );\n+        expect(references?.length).toBe(1);\n+        expect(references![0]).toBe(expectedReference);\n       });\n+    });\n \n-      it(\""document mentions\"", async () => {\n-        const team = await buildTeam();\n-        const user = await buildUser({ teamId: team.id });\n-        const collection = await buildCollection({\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n+    describe(\""should return comment reference\"", () => {\n+      it(\""first comment in a thread\"", async () => {\n+        const user = await buildUser();\n         const document = await buildDocument({\n-          collectionId: collection.id,\n           userId: user.id,\n-          teamId: team.id,\n+          teamId: user.teamId,\n         });\n         const comment = await buildComment({\n           documentId: document.id,\n           userId: user.id,\n         });\n-        const pastNotifications = await Notification.bulkCreate([\n-          {\n-            event: NotificationEventType.PublishDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.UpdateDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.CreateComment,\n-            commentId: comment.id,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.MentionedInComment,\n-            commentId: comment.id,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.MentionedInDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-        ]);\n-\n         const notification = await buildNotification({\n-          event: NotificationEventType.MentionedInDocument,\n-          documentId: document.id,\n-          userId: user.id,\n-          teamId: team.id,\n+          event: NotificationEventType.CreateComment,\n+          commentId: comment.id,\n         });\n \n         const references = await Notification.emailReferences(notification);\n \n-        expect(references?.length).toEqual(2);\n-\n-        const expectedReferences = pastNotifications\n-          .filter(\n-            (notif) =>\n-              notif.event === NotificationEventType.MentionedInDocument ||\n-              notif.event === NotificationEventType.MentionedInComment\n-          )\n-          .map((notif) => getEmailMessageId(notif.id));\n-\n-        expect(references).toEqual(expectedReferences);\n+        const expectedReference = Notification.emailMessageId(\n+          `${comment.id}-comments`\n+        );\n+        expect(references?.length).toBe(1);\n+        expect(references![0]).toBe(expectedReference);\n       });\n \n-      it(\""comment mentions\"", async () => {\n-        const team = await buildTeam();\n-        const user = await buildUser({ teamId: team.id });\n-        const collection = await buildCollection({\n-          userId: user.id,\n-          teamId: team.id,\n-        });\n+      it(\""child comments in a thread\"", async () => {\n+        const user = await buildUser();\n         const document = await buildDocument({\n-          collectionId: collection.id,\n           userId: user.id,\n-          teamId: team.id,\n+          teamId: user.teamId,\n         });\n-        const comment = await buildComment({\n+        const parentComment = await buildComment({\n           documentId: document.id,\n           userId: user.id,\n         });\n-        const pastNotifications = await Notification.bulkCreate([\n-          {\n-            event: NotificationEventType.PublishDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.UpdateDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.CreateComment,\n-            commentId: comment.id,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.MentionedInComment,\n-            commentId: comment.id,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-          {\n-            event: NotificationEventType.MentionedInDocument,\n-            documentId: document.id,\n-            userId: user.id,\n-            teamId: team.id,\n-          },\n-        ]);\n-\n-        const notification = await buildNotification({\n-          event: NotificationEventType.MentionedInComment,\n+        const childComment = await buildComment({\n           documentId: document.id,\n           userId: user.id,\n-          teamId: team.id,\n+          parentCommentId: parentComment.id,\n+        });\n+        const notification = await buildNotification({\n+          event: NotificationEventType.CreateComment,\n+          commentId: childComment.id,\n         });\n-        const references = await Notification.emailReferences(notification);\n-\n-        expect(references?.length).toEqual(2);\n \n-        const expectedReferences = pastNotifications\n-          .filter(\n-            (notif) =>\n-              notif.event === NotificationEventType.MentionedInComment ||\n-              notif.event === NotificationEventType.MentionedInDocument\n-          )\n-          .map((notif) => getEmailMessageId(notif.id));\n+        const references = await Notification.emailReferences(notification);\n \n-        expect(references).toEqual(expectedReferences);\n+        const expectedReference = Notification.emailMessageId(\n+          `${parentComment.id}-comments`\n+        );\n+        expect(references?.length).toBe(1);\n+        expect(references![0]).toBe(expectedReference);\n       });\n     });\n   });\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8179"", ""pr_id"": 8179, ""issue_id"": 7920, ""repo"": ""outline/outline"", ""problem_statement"": ""Move event writing to model layer\n`events` should be written automatically based on mutations in the model layer. To achieve this the request context will be passed down to model mutations. Translation must happen on a model by model basis.\n\nCommands should be removed where they only exist to group a mutation and it's associated event write.\n\n### TODO\n- [x] ApiKey\n- [x] Attachment\n- [x] Comment\n- [x] FileOperation\n- [x] Group\n- [x] GroupMembership\n- [x] GroupUser\n- [x] Pin\n- [x] Reaction\n- [x] Share\n- [x] Star\n- [x] UserMembership\n- [x] Subscription\n- [x] WebhookSubscription\n- [x] Notification\n- [ ] Team\n- [ ] Revision\n- [ ] Document\n- [ ] Collection\n- [ ] TeamDomain\n- [ ] User"", ""issue_word_count"": 89, ""test_files_count"": 1, ""non_test_files_count"": 6, ""pr_changed_files"": [""server/commands/groupCreator.ts"", ""server/commands/groupDestroyer.ts"", ""server/commands/groupUpdater.ts"", ""server/models/Group.ts"", ""server/routes/api/groups/groups.test.ts"", ""server/routes/api/groups/groups.ts"", ""server/types.ts""], ""pr_changed_test_files"": [""server/routes/api/groups/groups.test.ts""], ""base_commit"": ""adfca1e5ca96891db25ae93a30325038f0631b48"", ""head_commit"": ""66ae221aae7e3655b5129bd6b134e70660c9fe61"", ""repo_url"": ""https://github.com/outline/outline/pull/8179"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8179"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-02T12:45:09.000Z"", ""patch"": ""diff --git a/server/commands/groupCreator.ts b/server/commands/groupCreator.ts\ndeleted file mode 100644\nindex 052deaef4bc1..000000000000\n--- a/server/commands/groupCreator.ts\n+++ /dev/null\n@@ -1,42 +0,0 @@\n-import type { Transaction } from \""sequelize\"";\n-import { Event, Group, type User } from \""@server/models\"";\n-\n-type Props = {\n-  name: string;\n-  externalId: string | undefined;\n-  actor: User;\n-  ip: string;\n-  transaction?: Transaction;\n-};\n-\n-export default async function groupCreator({\n-  name,\n-  externalId,\n-  actor,\n-  ip,\n-  transaction,\n-}: Props): Promise<Group> {\n-  const group = await Group.create(\n-    {\n-      name,\n-      externalId,\n-      teamId: actor.teamId,\n-      createdById: actor.id,\n-    },\n-    { transaction }\n-  );\n-  await Event.create(\n-    {\n-      name: \""groups.create\"",\n-      modelId: group.id,\n-      teamId: actor.teamId,\n-      actorId: actor.id,\n-      data: {\n-        name: group.name,\n-      },\n-      ip,\n-    },\n-    { transaction }\n-  );\n-  return group;\n-}\n\ndiff --git a/server/commands/groupDestroyer.ts b/server/commands/groupDestroyer.ts\ndeleted file mode 100644\nindex c1e17e3b248b..000000000000\n--- a/server/commands/groupDestroyer.ts\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-import type { Transaction } from \""sequelize\"";\n-import { Event, type Group, type User } from \""@server/models\"";\n-\n-type Props = {\n-  group: Group;\n-  actor: User;\n-  ip: string;\n-  transaction?: Transaction;\n-};\n-\n-export default async function groupDestroyer({\n-  group,\n-  actor,\n-  ip,\n-  transaction,\n-}: Props): Promise<void> {\n-  await group.destroy({ transaction });\n-  await Event.create(\n-    {\n-      name: \""groups.delete\"",\n-      modelId: group.id,\n-      teamId: actor.teamId,\n-      actorId: actor.id,\n-      data: {\n-        name: group.name,\n-      },\n-      ip,\n-    },\n-    { transaction }\n-  );\n-}\n\ndiff --git a/server/commands/groupUpdater.ts b/server/commands/groupUpdater.ts\ndeleted file mode 100644\nindex b69460421202..000000000000\n--- a/server/commands/groupUpdater.ts\n+++ /dev/null\n@@ -1,46 +0,0 @@\n-import type { Transaction } from \""sequelize\"";\n-import { Event, type Group, type User } from \""@server/models\"";\n-\n-type Props = {\n-  group: Group;\n-  name: string | undefined;\n-  externalId: string | undefined;\n-  actor: User;\n-  ip: string;\n-  transaction?: Transaction;\n-};\n-\n-export default async function groupUpdater({\n-  group,\n-  name,\n-  externalId,\n-  actor,\n-  ip,\n-  transaction,\n-}: Props): Promise<Group> {\n-  if (name) {\n-    group.name = name;\n-  }\n-  if (externalId) {\n-    group.externalId = externalId;\n-  }\n-\n-  if (group.changed()) {\n-    await group.save({ transaction });\n-    await Event.create(\n-      {\n-        name: \""groups.update\"",\n-        modelId: group.id,\n-        teamId: actor.teamId,\n-        actorId: actor.id,\n-        data: {\n-          name: group.name,\n-        },\n-        ip,\n-      },\n-      { transaction }\n-    );\n-  }\n-\n-  return group;\n-}\n\ndiff --git a/server/models/Group.ts b/server/models/Group.ts\nindex dee4873bf1b1..5d0d5f297b5e 100644\n--- a/server/models/Group.ts\n+++ b/server/models/Group.ts\n@@ -60,6 +60,8 @@ class Group extends ParanoidModel<\n   InferAttributes<Group>,\n   Partial<InferCreationAttributes<Group>>\n > {\n+  static eventNamespace = \""groups\"";\n+\n   @Length({ min: 0, max: 255, msg: \""name must be be 255 characters or less\"" })\n   @NotContainsUrl\n   @Column\n\ndiff --git a/server/routes/api/groups/groups.ts b/server/routes/api/groups/groups.ts\nindex b38fef656d04..21438ceb3de6 100644\n--- a/server/routes/api/groups/groups.ts\n+++ b/server/routes/api/groups/groups.ts\n@@ -1,9 +1,6 @@\n import Router from \""koa-router\"";\n import { Op, WhereOptions } from \""sequelize\"";\n import { MAX_AVATAR_DISPLAY } from \""@shared/constants\"";\n-import groupCreator from \""@server/commands/groupCreator\"";\n-import groupDestroyer from \""@server/commands/groupDestroyer\"";\n-import groupUpdater from \""@server/commands/groupUpdater\"";\n import groupUserCreator from \""@server/commands/groupUserCreator\"";\n import groupUserDestroyer from \""@server/commands/groupUserDestroyer\"";\n import auth from \""@server/middlewares/authentication\"";\n@@ -128,15 +125,13 @@ router.post(\n   async (ctx: APIContext<T.GroupsCreateReq>) => {\n     const { name, externalId } = ctx.input.body;\n     const { user } = ctx.state.auth;\n-    const { transaction } = ctx.state;\n     authorize(user, \""createGroup\"", user.team);\n \n-    const group = await groupCreator({\n+    const group = await Group.createWithCtx(ctx, {\n       name,\n       externalId,\n-      actor: user,\n-      ip: ctx.request.ip,\n-      transaction,\n+      teamId: user.teamId,\n+      createdById: user.id,\n     });\n \n     ctx.body = {\n@@ -152,21 +147,17 @@ router.post(\n   validate(T.GroupsUpdateSchema),\n   transaction(),\n   async (ctx: APIContext<T.GroupsUpdateReq>) => {\n-    const { id, name, externalId } = ctx.input.body;\n+    const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n \n-    let group = await Group.findByPk(id, { transaction });\n-    authorize(user, \""update\"", group);\n-\n-    group = await groupUpdater({\n-      group,\n-      name,\n-      externalId,\n-      actor: user,\n-      ip: ctx.request.ip,\n+    const group = await Group.findByPk(id, {\n       transaction,\n+      lock: transaction.LOCK.UPDATE,\n     });\n+    authorize(user, \""update\"", group);\n+\n+    await group.updateWithCtx(ctx, ctx.input.body);\n \n     ctx.body = {\n       data: await presentGroup(group),\n@@ -185,15 +176,13 @@ router.post(\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n \n-    const group = await Group.findByPk(id, { transaction });\n-    authorize(user, \""delete\"", group);\n-\n-    await groupDestroyer({\n-      group,\n-      actor: user,\n-      ip: ctx.request.ip,\n+    const group = await Group.findByPk(id, {\n       transaction,\n+      lock: transaction.LOCK.UPDATE,\n     });\n+    authorize(user, \""delete\"", group);\n+\n+    await group.destroyWithCtx(ctx);\n \n     ctx.body = {\n       success: true,\n\ndiff --git a/server/types.ts b/server/types.ts\nindex 44ccb92ea9a8..df1314e40831 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -354,9 +354,6 @@ export type GroupEvent = BaseEvent<Group> &\n     | {\n         name: \""groups.create\"" | \""groups.delete\"" | \""groups.update\"";\n         modelId: string;\n-        data: {\n-          name: string;\n-        };\n       }\n   );\n \n"", ""test_patch"": ""diff --git a/server/routes/api/groups/groups.test.ts b/server/routes/api/groups/groups.test.ts\nindex e912100217f9..0864d2049ae6 100644\n--- a/server/routes/api/groups/groups.test.ts\n+++ b/server/routes/api/groups/groups.test.ts\n@@ -81,6 +81,7 @@ describe(\""#groups.update\"", () => {\n       });\n       const events = await Event.findAll({\n         where: {\n+          name: \""groups.update\"",\n           teamId: user.teamId,\n         },\n       });\n@@ -101,6 +102,7 @@ describe(\""#groups.update\"", () => {\n       });\n       const events = await Event.findAll({\n         where: {\n+          name: \""groups.update\"",\n           teamId: user.teamId,\n         },\n       });\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8166"", ""pr_id"": 8166, ""issue_id"": 7920, ""repo"": ""outline/outline"", ""problem_statement"": ""Move event writing to model layer\n`events` should be written automatically based on mutations in the model layer. To achieve this the request context will be passed down to model mutations. Translation must happen on a model by model basis.\n\nCommands should be removed where they only exist to group a mutation and it's associated event write.\n\n### TODO\n- [x] ApiKey\n- [x] Attachment\n- [x] Comment\n- [x] FileOperation\n- [x] Group\n- [x] GroupMembership\n- [x] GroupUser\n- [x] Pin\n- [x] Reaction\n- [x] Share\n- [x] Star\n- [x] UserMembership\n- [x] Subscription\n- [x] WebhookSubscription\n- [x] Notification\n- [ ] Team\n- [ ] Revision\n- [ ] Document\n- [ ] Collection\n- [ ] TeamDomain\n- [ ] User"", ""issue_word_count"": 89, ""test_files_count"": 5, ""non_test_files_count"": 12, ""pr_changed_files"": [""server/commands/documentDuplicator.test.ts"", ""server/commands/documentImporter.test.ts"", ""server/commands/subscriptionCreator.test.ts"", ""server/commands/subscriptionCreator.ts"", ""server/commands/subscriptionDestroyer.test.ts"", ""server/commands/subscriptionDestroyer.ts"", ""server/context.ts"", ""server/models/Subscription.ts"", ""server/models/base/Model.ts"", ""server/queues/processors/DocumentUserAddedProcessor.ts"", ""server/queues/tasks/CommentCreatedNotificationsTask.ts"", ""server/queues/tasks/DocumentImportTask.ts"", ""server/queues/tasks/ImportMarkdownZipTask.ts"", ""server/queues/tasks/ImportNotionTask.ts"", ""server/queues/tasks/ImportTask.ts"", ""server/routes/api/subscriptions/subscriptions.ts"", ""server/test/support.ts""], ""pr_changed_test_files"": [""server/commands/documentDuplicator.test.ts"", ""server/commands/documentImporter.test.ts"", ""server/commands/subscriptionCreator.test.ts"", ""server/commands/subscriptionDestroyer.test.ts"", ""server/test/support.ts""], ""base_commit"": ""f448be5830045b886a890d4bf83f9e5bc1314866"", ""head_commit"": ""2e6fe0661c880e2c6e1be2a279e6b8272847df4a"", ""repo_url"": ""https://github.com/outline/outline/pull/8166"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8166"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-31T13:25:43.000Z"", ""patch"": ""diff --git a/server/commands/subscriptionCreator.ts b/server/commands/subscriptionCreator.ts\nindex fe7daf20dbb3..43049116f2c1 100644\n--- a/server/commands/subscriptionCreator.ts\n+++ b/server/commands/subscriptionCreator.ts\n@@ -1,20 +1,17 @@\n-import { Transaction } from \""sequelize\"";\n-import { Subscription, Event, User, Document } from \""@server/models\"";\n+import { createContext } from \""@server/context\"";\n+import { Subscription, Document } from \""@server/models\"";\n import { sequelize } from \""@server/storage/database\"";\n-import { DocumentEvent, RevisionEvent } from \""@server/types\"";\n+import { APIContext, DocumentEvent, RevisionEvent } from \""@server/types\"";\n \n type Props = {\n-  /** The user creating the subscription */\n-  user: User;\n+  /** The request context, which also contains the user creating the subscription */\n+  ctx: APIContext;\n   /** The document to subscribe to */\n   documentId?: string;\n   /** Event to subscribe to */\n   event: string;\n-  /** The IP address of the incoming request */\n-  ip: string | null;\n   /** Whether the subscription should be restored if it exists in a deleted state  */\n   resubscribe?: boolean;\n-  transaction: Transaction;\n };\n \n /**\n@@ -23,55 +20,24 @@ type Props = {\n  * @returns The subscription that was created\n  */\n export default async function subscriptionCreator({\n-  user,\n+  ctx,\n   documentId,\n   event,\n-  ip,\n   resubscribe = true,\n-  transaction,\n }: Props): Promise<Subscription> {\n-  const [subscription, created] = await Subscription.findOrCreate({\n+  const { user } = ctx.context.auth;\n+  const [subscription] = await Subscription.findOrCreateWithCtx(ctx, {\n     where: {\n       userId: user.id,\n       documentId,\n       event,\n     },\n-    transaction,\n-    // Previous subscriptions are soft-deleted, we want to know about them here\n-    paranoid: false,\n+    paranoid: false, // Previous subscriptions are soft-deleted, we want to know about them here.\n   });\n \n   // If the subscription was deleted, then just restore the existing row.\n   if (subscription.deletedAt && resubscribe) {\n-    await subscription.restore({ transaction });\n-\n-    await Event.create(\n-      {\n-        name: \""subscriptions.create\"",\n-        teamId: user.teamId,\n-        modelId: subscription.id,\n-        actorId: user.id,\n-        userId: user.id,\n-        documentId,\n-        ip,\n-      },\n-      { transaction }\n-    );\n-  }\n-\n-  if (created) {\n-    await Event.create(\n-      {\n-        name: \""subscriptions.create\"",\n-        teamId: user.teamId,\n-        modelId: subscription.id,\n-        actorId: user.id,\n-        userId: user.id,\n-        documentId,\n-        ip,\n-      },\n-      { transaction }\n-    );\n+    await subscription.restoreWithCtx(ctx);\n   }\n \n   return subscription;\n@@ -95,12 +61,15 @@ export const createSubscriptionsForDocument = async (\n \n     for (const user of users) {\n       await subscriptionCreator({\n-        user,\n+        ctx: createContext({\n+          user,\n+          authType: event.authType,\n+          ip: event.ip,\n+          transaction,\n+        }),\n         documentId: document.id,\n         event: \""documents.update\"",\n         resubscribe: false,\n-        transaction,\n-        ip: event.ip,\n       });\n     }\n   });\n\ndiff --git a/server/commands/subscriptionDestroyer.ts b/server/commands/subscriptionDestroyer.ts\ndeleted file mode 100644\nindex 4bcee46904a4..000000000000\n--- a/server/commands/subscriptionDestroyer.ts\n+++ /dev/null\n@@ -1,42 +0,0 @@\n-import { Transaction } from \""sequelize\"";\n-import { Event, Subscription, User } from \""@server/models\"";\n-\n-type Props = {\n-  /** The user destroying the subscription */\n-  user: User;\n-  /** The subscription to destroy */\n-  subscription: Subscription;\n-  /** The IP address of the incoming request */\n-  ip: string;\n-  transaction: Transaction;\n-};\n-\n-/**\n- * This command destroys a user subscription to a document so they will no\n- * longer receive notifications.\n- *\n- * @returns The subscription that was destroyed\n- */\n-export default async function subscriptionDestroyer({\n-  user,\n-  subscription,\n-  ip,\n-  transaction,\n-}: Props): Promise<Subscription> {\n-  await subscription.destroy({ transaction });\n-\n-  await Event.create(\n-    {\n-      name: \""subscriptions.delete\"",\n-      teamId: user.teamId,\n-      modelId: subscription.id,\n-      actorId: user.id,\n-      userId: user.id,\n-      documentId: subscription.documentId,\n-      ip,\n-    },\n-    { transaction }\n-  );\n-\n-  return subscription;\n-}\n\ndiff --git a/server/context.ts b/server/context.ts\nindex 621c5b0022a2..9c05e4edbd10 100644\n--- a/server/context.ts\n+++ b/server/context.ts\n@@ -1,17 +1,23 @@\n import { Transaction } from \""sequelize\"";\n import { User } from \""@server/models\"";\n-import { APIContext } from \""@server/types\"";\n+import { APIContext, AuthenticationType } from \""@server/types\"";\n \n-export function createContext(\n-  user: User,\n-  transaction?: Transaction,\n-  ip?: string\n-) {\n+export function createContext({\n+  user,\n+  authType = AuthenticationType.APP,\n+  ip,\n+  transaction,\n+}: {\n+  user: User;\n+  authType?: AuthenticationType | null;\n+  ip?: string | null;\n+  transaction?: Transaction;\n+}) {\n   return {\n     context: {\n+      auth: { user, type: authType },\n       ip: ip ?? user.lastActiveIp,\n       transaction,\n-      auth: { user },\n     },\n   } as APIContext;\n }\n\ndiff --git a/server/models/Subscription.ts b/server/models/Subscription.ts\nindex 3b70a3a6b731..a24b7018b082 100644\n--- a/server/models/Subscription.ts\n+++ b/server/models/Subscription.ts\n@@ -28,6 +28,8 @@ class Subscription extends ParanoidModel<\n   InferAttributes<Subscription>,\n   Partial<InferCreationAttributes<Subscription>>\n > {\n+  static eventNamespace = \""subscriptions\"";\n+\n   @BelongsTo(() => User, \""userId\"")\n   user: User;\n \n\ndiff --git a/server/models/base/Model.ts b/server/models/base/Model.ts\nindex 1f8a6f42638f..5fab2d6bb658 100644\n--- a/server/models/base/Model.ts\n+++ b/server/models/base/Model.ts\n@@ -11,6 +11,7 @@ import {\n   FindOptions,\n   FindOrCreateOptions,\n   InstanceDestroyOptions,\n+  InstanceRestoreOptions,\n   InstanceUpdateOptions,\n   ModelStatic,\n   NonAttribute,\n@@ -19,6 +20,7 @@ import {\n import {\n   AfterCreate,\n   AfterDestroy,\n+  AfterRestore,\n   AfterUpdate,\n   AfterUpsert,\n   BeforeCreate,\n@@ -63,6 +65,13 @@ class Model<\n     return this.destroy(ctx.context as InstanceDestroyOptions);\n   }\n \n+  /**\n+   * Restore the row corresponding to this instance. Only available for paranoid models.\n+   */\n+  public restoreWithCtx(ctx: APIContext) {\n+    return this.restore(ctx.context as InstanceRestoreOptions);\n+  }\n+\n   /**\n    * Find a row that matches the query, or build and save the row if none is found\n    * The successful result of the promise will be (instance, created) - Make sure to use `.then(([...]))`\n@@ -126,6 +135,14 @@ class Model<\n     await this.insertEvent(\""delete\"", model, context);\n   }\n \n+  @AfterRestore\n+  static async afterRestoreEvent<T extends Model>(\n+    model: T,\n+    context: APIContext[\""context\""]\n+  ) {\n+    await this.insertEvent(\""create\"", model, context);\n+  }\n+\n   /**\n    * Insert an event into the database recording a mutation to this model.\n    *\n\ndiff --git a/server/queues/processors/DocumentUserAddedProcessor.ts b/server/queues/processors/DocumentUserAddedProcessor.ts\nindex df5fe2d62362..d93f0596704d 100644\n--- a/server/queues/processors/DocumentUserAddedProcessor.ts\n+++ b/server/queues/processors/DocumentUserAddedProcessor.ts\n@@ -1,4 +1,5 @@\n import subscriptionCreator from \""@server/commands/subscriptionCreator\"";\n+import { createContext } from \""@server/context\"";\n import { User } from \""@server/models\"";\n import { sequelize } from \""@server/storage/database\"";\n import { DocumentUserEvent, Event } from \""@server/types\"";\n@@ -15,12 +16,15 @@ export default class DocumentUserAddedProcessor extends BaseProcessor {\n \n     await sequelize.transaction(async (transaction) => {\n       await subscriptionCreator({\n-        user,\n+        ctx: createContext({\n+          user,\n+          authType: event.authType,\n+          ip: event.ip,\n+          transaction,\n+        }),\n         documentId: event.documentId,\n         event: \""documents.update\"",\n         resubscribe: false,\n-        transaction,\n-        ip: event.ip,\n       });\n     });\n   }\n\ndiff --git a/server/queues/tasks/CommentCreatedNotificationsTask.ts b/server/queues/tasks/CommentCreatedNotificationsTask.ts\nindex 2bed7340e858..d02eb619394c 100644\n--- a/server/queues/tasks/CommentCreatedNotificationsTask.ts\n+++ b/server/queues/tasks/CommentCreatedNotificationsTask.ts\n@@ -1,5 +1,6 @@\n import { NotificationEventType } from \""@shared/types\"";\n import subscriptionCreator from \""@server/commands/subscriptionCreator\"";\n+import { createContext } from \""@server/context\"";\n import { Comment, Document, Notification, User } from \""@server/models\"";\n import NotificationHelper from \""@server/models/helpers/NotificationHelper\"";\n import { ProsemirrorHelper } from \""@server/models/helpers/ProsemirrorHelper\"";\n@@ -26,12 +27,15 @@ export default class CommentCreatedNotificationsTask extends BaseTask<CommentEve\n     // if they haven't previously had one.\n     await sequelize.transaction(async (transaction) => {\n       await subscriptionCreator({\n-        user: comment.createdBy,\n+        ctx: createContext({\n+          user: comment.createdBy,\n+          authType: event.authType,\n+          ip: event.ip,\n+          transaction,\n+        }),\n         documentId: document.id,\n         event: \""documents.update\"",\n         resubscribe: false,\n-        transaction,\n-        ip: event.ip,\n       });\n     });\n \n\ndiff --git a/server/queues/tasks/DocumentImportTask.ts b/server/queues/tasks/DocumentImportTask.ts\nindex 1237af559ec9..630c02b8a085 100644\n--- a/server/queues/tasks/DocumentImportTask.ts\n+++ b/server/queues/tasks/DocumentImportTask.ts\n@@ -49,7 +49,7 @@ export default class DocumentImportTask extends BaseTask<Props> {\n           fileName: sourceMetadata.fileName,\n           mimeType: sourceMetadata.mimeType,\n           content,\n-          ctx: createContext(user, transaction, ip),\n+          ctx: createContext({ user, transaction, ip }),\n         });\n \n         return documentCreator({\n@@ -62,7 +62,7 @@ export default class DocumentImportTask extends BaseTask<Props> {\n           collectionId,\n           parentDocumentId,\n           user,\n-          ctx: createContext(user, transaction, ip),\n+          ctx: createContext({ user, transaction, ip }),\n         });\n       });\n       return { documentId: document.id };\n\ndiff --git a/server/queues/tasks/ImportMarkdownZipTask.ts b/server/queues/tasks/ImportMarkdownZipTask.ts\nindex 4f37da9bf2ab..23c72eab0f80 100644\n--- a/server/queues/tasks/ImportMarkdownZipTask.ts\n+++ b/server/queues/tasks/ImportMarkdownZipTask.ts\n@@ -94,7 +94,7 @@ export default class ImportMarkdownZipTask extends ImportTask {\n                     ? \""\""\n                     : await fs.readFile(child.path, \""utf8\""),\n                 user,\n-                ctx: createContext(user, transaction),\n+                ctx: createContext({ user, transaction }),\n               })\n           );\n \n\ndiff --git a/server/queues/tasks/ImportNotionTask.ts b/server/queues/tasks/ImportNotionTask.ts\nindex a1d00398d285..36ccd640ee44 100644\n--- a/server/queues/tasks/ImportNotionTask.ts\n+++ b/server/queues/tasks/ImportNotionTask.ts\n@@ -136,7 +136,7 @@ export default class ImportNotionTask extends ImportTask {\n                     ? \""\""\n                     : await fs.readFile(child.path, \""utf8\""),\n                 user,\n-                ctx: createContext(user, transaction),\n+                ctx: createContext({ user, transaction }),\n               })\n           );\n \n@@ -257,7 +257,7 @@ export default class ImportNotionTask extends ImportTask {\n             fileName: name,\n             content: await fs.readFile(node.path, \""utf8\""),\n             user,\n-            ctx: createContext(user, transaction),\n+            ctx: createContext({ user, transaction }),\n           })\n         );\n \n\ndiff --git a/server/queues/tasks/ImportTask.ts b/server/queues/tasks/ImportTask.ts\nindex 2c0cda639f1d..70b8337413af 100644\n--- a/server/queues/tasks/ImportTask.ts\n+++ b/server/queues/tasks/ImportTask.ts\n@@ -474,7 +474,7 @@ export default abstract class ImportTask extends BaseTask<Props> {\n               parentDocumentId: item.parentDocumentId,\n               importId: fileOperation.id,\n               user,\n-              ctx: createContext(user, transaction),\n+              ctx: createContext({ user, transaction }),\n             });\n             documents.set(item.id, document);\n \n@@ -508,7 +508,7 @@ export default abstract class ImportTask extends BaseTask<Props> {\n                 type: item.mimeType,\n                 buffer: await item.buffer(),\n                 user,\n-                ctx: createContext(user, transaction),\n+                ctx: createContext({ user, transaction }),\n               });\n               if (attachment) {\n                 attachments.set(item.id, attachment);\n\ndiff --git a/server/routes/api/subscriptions/subscriptions.ts b/server/routes/api/subscriptions/subscriptions.ts\nindex 51e4607774ef..c4dbad08d4d7 100644\n--- a/server/routes/api/subscriptions/subscriptions.ts\n+++ b/server/routes/api/subscriptions/subscriptions.ts\n@@ -2,7 +2,7 @@ import Router from \""koa-router\"";\n import { Transaction } from \""sequelize\"";\n import { QueryNotices } from \""@shared/types\"";\n import subscriptionCreator from \""@server/commands/subscriptionCreator\"";\n-import subscriptionDestroyer from \""@server/commands/subscriptionDestroyer\"";\n+import { createContext } from \""@server/context\"";\n import env from \""@server/env\"";\n import auth from \""@server/middlewares/authentication\"";\n import { rateLimiter } from \""@server/middlewares/rateLimiter\"";\n@@ -84,8 +84,8 @@ router.post(\n   validate(T.SubscriptionsCreateSchema),\n   transaction(),\n   async (ctx: APIContext<T.SubscriptionsCreateReq>) => {\n-    const { auth, transaction } = ctx.state;\n-    const { user } = auth;\n+    const { transaction } = ctx.state;\n+    const { user } = ctx.state.auth;\n     const { documentId, event } = ctx.input.body;\n \n     const document = await Document.findByPk(documentId, {\n@@ -96,11 +96,9 @@ router.post(\n     authorize(user, \""subscribe\"", document);\n \n     const subscription = await subscriptionCreator({\n-      user,\n+      ctx,\n       documentId: document.id,\n       event,\n-      ip: ctx.request.ip,\n-      transaction,\n     });\n \n     ctx.body = {\n@@ -146,7 +144,13 @@ router.get(\n \n     authorize(user, \""delete\"", subscription);\n \n-    await subscription.destroy({ transaction });\n+    await subscription.destroyWithCtx(\n+      createContext({\n+        user,\n+        ip: ctx.request.ip,\n+        transaction,\n+      })\n+    );\n \n     ctx.redirect(\n       `${user.team.url}/home?notice=${QueryNotices.UnsubscribeDocument}`\n@@ -160,8 +164,8 @@ router.post(\n   validate(T.SubscriptionsDeleteSchema),\n   transaction(),\n   async (ctx: APIContext<T.SubscriptionsDeleteReq>) => {\n-    const { auth, transaction } = ctx.state;\n-    const { user } = auth;\n+    const { transaction } = ctx.state;\n+    const { user } = ctx.state.auth;\n     const { id } = ctx.input.body;\n \n     const subscription = await Subscription.findByPk(id, {\n@@ -171,12 +175,7 @@ router.post(\n \n     authorize(user, \""delete\"", subscription);\n \n-    await subscriptionDestroyer({\n-      user,\n-      subscription,\n-      ip: ctx.request.ip,\n-      transaction,\n-    });\n+    await subscription.destroyWithCtx(ctx);\n \n     ctx.body = {\n       success: true,\n"", ""test_patch"": ""diff --git a/server/commands/documentDuplicator.test.ts b/server/commands/documentDuplicator.test.ts\nindex 22fda227b351..1024a5582274 100644\n--- a/server/commands/documentDuplicator.test.ts\n+++ b/server/commands/documentDuplicator.test.ts\n@@ -16,7 +16,7 @@ describe(\""documentDuplicator\"", () => {\n         document: original,\n         collection: original.collection,\n         user,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n \n@@ -42,7 +42,7 @@ describe(\""documentDuplicator\"", () => {\n         collection: original.collection,\n         title: \""New title\"",\n         user,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n \n@@ -75,7 +75,7 @@ describe(\""documentDuplicator\"", () => {\n         collection: original.collection,\n         user,\n         recursive: true,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n \n@@ -95,7 +95,7 @@ describe(\""documentDuplicator\"", () => {\n         collection: original.collection,\n         publish: false,\n         user,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n \n\ndiff --git a/server/commands/documentImporter.test.ts b/server/commands/documentImporter.test.ts\nindex b2592e72e14d..a230717e6d89 100644\n--- a/server/commands/documentImporter.test.ts\n+++ b/server/commands/documentImporter.test.ts\n@@ -23,7 +23,7 @@ describe(\""documentImporter\"", () => {\n           \""application/vnd.openxmlformats-officedocument.wordprocessingml.document\"",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     const attachments = await Attachment.count({\n@@ -49,7 +49,7 @@ describe(\""documentImporter\"", () => {\n         mimeType: \""application/octet-stream\"",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     const attachments = await Attachment.count({\n@@ -78,7 +78,7 @@ describe(\""documentImporter\"", () => {\n           mimeType: \""application/octet-stream\"",\n           fileName,\n           content,\n-          ctx: createContext(user, transaction),\n+          ctx: createContext({ user, transaction }),\n         })\n       );\n     } catch (err) {\n@@ -100,7 +100,7 @@ describe(\""documentImporter\"", () => {\n         mimeType: \""application/octet-stream\"",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     const attachments = await Attachment.count({\n@@ -127,7 +127,7 @@ describe(\""documentImporter\"", () => {\n         mimeType: \""text/html\"",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     expect(response.text).toContain(\""Text paragraph\"");\n@@ -146,7 +146,7 @@ describe(\""documentImporter\"", () => {\n         mimeType: \""application/msword\"",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n \n@@ -167,7 +167,7 @@ describe(\""documentImporter\"", () => {\n         mimeType: \""text/plain\"",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     expect(response.text).toContain(\""This is a test paragraph\"");\n@@ -184,7 +184,7 @@ describe(\""documentImporter\"", () => {\n         mimeType: \""text/plain\"",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n \n@@ -205,7 +205,7 @@ describe(\""documentImporter\"", () => {\n         mimeType: \""application/lol\"",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     expect(response.text).toContain(\""This is a test paragraph\"");\n@@ -227,7 +227,7 @@ describe(\""documentImporter\"", () => {\n           mimeType: \""executable/zip\"",\n           fileName,\n           content,\n-          ctx: createContext(user, transaction),\n+          ctx: createContext({ user, transaction }),\n         })\n       );\n     } catch (err) {\n@@ -257,7 +257,7 @@ describe(\""documentImporter\"", () => {\n         mimeType: \""text/html\"",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     expect(response.text).toEqual(\""\\\\$100\"");\n@@ -283,7 +283,7 @@ describe(\""documentImporter\"", () => {\n         mimeType: \""text/html\"",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     expect(response.text).toEqual(\""`echo $foo`\"");\n@@ -309,7 +309,7 @@ describe(\""documentImporter\"", () => {\n         mimeType: \""text/html\"",\n         fileName,\n         content,\n-        ctx: createContext(user, transaction),\n+        ctx: createContext({ user, transaction }),\n       })\n     );\n     expect(response.text).toEqual(\""```\\necho $foo\\n```\"");\n\ndiff --git a/server/commands/subscriptionCreator.test.ts b/server/commands/subscriptionCreator.test.ts\nindex 1716e2ee6c62..9799f288a2d9 100644\n--- a/server/commands/subscriptionCreator.test.ts\n+++ b/server/commands/subscriptionCreator.test.ts\n@@ -1,8 +1,8 @@\n+import { createContext } from \""@server/context\"";\n import { Subscription, Event } from \""@server/models\"";\n import { sequelize } from \""@server/storage/database\"";\n import { buildDocument, buildUser } from \""@server/test/factories\"";\n import subscriptionCreator from \""./subscriptionCreator\"";\n-import subscriptionDestroyer from \""./subscriptionDestroyer\"";\n \n describe(\""subscriptionCreator\"", () => {\n   const ip = \""127.0.0.1\"";\n@@ -18,11 +18,9 @@ describe(\""subscriptionCreator\"", () => {\n \n     const subscription = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n@@ -57,11 +55,9 @@ describe(\""subscriptionCreator\"", () => {\n \n     const subscription1 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n@@ -92,21 +88,14 @@ describe(\""subscriptionCreator\"", () => {\n \n     const subscription0 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n     await sequelize.transaction(async (transaction) =>\n-      subscriptionDestroyer({\n-        user,\n-        subscription: subscription0,\n-        ip,\n-        transaction,\n-      })\n+      subscription0.destroyWithCtx(createContext({ user, transaction, ip }))\n     );\n \n     expect(subscription0.id).toBeDefined();\n@@ -116,11 +105,9 @@ describe(\""subscriptionCreator\"", () => {\n \n     const subscription1 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n@@ -153,21 +140,17 @@ describe(\""subscriptionCreator\"", () => {\n \n     const subscription0 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n     const subscription1 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n@@ -198,21 +181,14 @@ describe(\""subscriptionCreator\"", () => {\n \n     const subscription0 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n     await sequelize.transaction(async (transaction) =>\n-      subscriptionDestroyer({\n-        user,\n-        subscription: subscription0,\n-        ip,\n-        transaction,\n-      })\n+      subscription0.destroyWithCtx(createContext({ user, transaction, ip }))\n     );\n \n     expect(subscription0.id).toBeDefined();\n@@ -222,11 +198,9 @@ describe(\""subscriptionCreator\"", () => {\n \n     const subscription1 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n@@ -265,11 +239,9 @@ describe(\""subscriptionCreator\"", () => {\n \n     const subscription0 = await sequelize.transaction(async (transaction) =>\n       subscriptionCreator({\n-        user,\n+        ctx: createContext({ user, transaction, ip }),\n         documentId: document.id,\n         event: subscribedEvent,\n-        ip,\n-        transaction,\n       })\n     );\n \n\ndiff --git a/server/commands/subscriptionDestroyer.test.ts b/server/commands/subscriptionDestroyer.test.ts\ndeleted file mode 100644\nindex a25bf2ea99e2..000000000000\n--- a/server/commands/subscriptionDestroyer.test.ts\n+++ /dev/null\n@@ -1,87 +0,0 @@\n-import { Subscription } from \""@server/models\"";\n-import { sequelize } from \""@server/storage/database\"";\n-import {\n-  buildDocument,\n-  buildSubscription,\n-  buildUser,\n-} from \""@server/test/factories\"";\n-import subscriptionDestroyer from \""./subscriptionDestroyer\"";\n-\n-describe(\""subscriptionDestroyer\"", () => {\n-  const ip = \""127.0.0.1\"";\n-\n-  it(\""should destroy existing subscription\"", async () => {\n-    const user = await buildUser();\n-\n-    const document = await buildDocument({\n-      userId: user.id,\n-      teamId: user.teamId,\n-    });\n-\n-    const subscription = await buildSubscription({\n-      userId: user.id,\n-      documentId: document.id,\n-    });\n-\n-    await sequelize.transaction(\n-      async (transaction) =>\n-        await subscriptionDestroyer({\n-          user,\n-          subscription,\n-          ip,\n-          transaction,\n-        })\n-    );\n-\n-    const count = await Subscription.count({\n-      where: {\n-        userId: user.id,\n-      },\n-    });\n-\n-    expect(count).toEqual(0);\n-  });\n-\n-  it(\""should soft delete row\"", async () => {\n-    const user = await buildUser();\n-\n-    const document = await buildDocument({\n-      userId: user.id,\n-      teamId: user.teamId,\n-    });\n-\n-    const subscription = await buildSubscription({\n-      userId: user.id,\n-      documentId: document.id,\n-    });\n-\n-    await sequelize.transaction(\n-      async (transaction) =>\n-        await subscriptionDestroyer({\n-          user,\n-          subscription,\n-          ip,\n-          transaction,\n-        })\n-    );\n-\n-    const count = await Subscription.count({\n-      where: {\n-        userId: user.id,\n-      },\n-    });\n-\n-    expect(count).toEqual(0);\n-\n-    const deletedSubscription = await Subscription.findOne({\n-      where: {\n-        userId: user.id,\n-        documentId: document.id,\n-      },\n-      paranoid: false,\n-    });\n-\n-    expect(deletedSubscription).toBeDefined();\n-    expect(deletedSubscription?.deletedAt).toBeDefined();\n-  });\n-});\n\ndiff --git a/server/test/support.ts b/server/test/support.ts\nindex 1d4c504ea7f3..e61c511b91e2 100644\n--- a/server/test/support.ts\n+++ b/server/test/support.ts\n@@ -46,7 +46,7 @@ export function withAPIContext<T>(\n       transaction,\n     };\n     return fn({\n-      ...createContext(user, transaction),\n+      ...createContext({ user, transaction }),\n       state,\n       request: {\n         ip: faker.internet.ip(),\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8161"", ""pr_id"": 8161, ""issue_id"": 7920, ""repo"": ""outline/outline"", ""problem_statement"": ""Move event writing to model layer\n`events` should be written automatically based on mutations in the model layer. To achieve this the request context will be passed down to model mutations. Translation must happen on a model by model basis.\n\nCommands should be removed where they only exist to group a mutation and it's associated event write.\n\n### TODO\n- [x] ApiKey\n- [x] Attachment\n- [x] Comment\n- [x] FileOperation\n- [x] Group\n- [x] GroupMembership\n- [x] GroupUser\n- [x] Pin\n- [x] Reaction\n- [x] Share\n- [x] Star\n- [x] UserMembership\n- [x] Subscription\n- [x] WebhookSubscription\n- [x] Notification\n- [ ] Team\n- [ ] Revision\n- [ ] Document\n- [ ] Collection\n- [ ] TeamDomain\n- [ ] User"", ""issue_word_count"": 89, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""plugins/webhooks/server/api/webhookSubscriptions.test.ts"", ""plugins/webhooks/server/api/webhookSubscriptions.ts"", ""server/models/WebhookSubscription.ts""], ""pr_changed_test_files"": [""plugins/webhooks/server/api/webhookSubscriptions.test.ts""], ""base_commit"": ""f448be5830045b886a890d4bf83f9e5bc1314866"", ""head_commit"": ""bcfb3654d32446962e612d066aeee0495be1c873"", ""repo_url"": ""https://github.com/outline/outline/pull/8161"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8161"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-31T00:11:32.000Z"", ""patch"": ""diff --git a/plugins/webhooks/server/api/webhookSubscriptions.ts b/plugins/webhooks/server/api/webhookSubscriptions.ts\nindex 27caa6ecbbfc..00f3da7aaf67 100644\n--- a/plugins/webhooks/server/api/webhookSubscriptions.ts\n+++ b/plugins/webhooks/server/api/webhookSubscriptions.ts\n@@ -5,7 +5,7 @@ import { UserRole } from \""@shared/types\"";\n import auth from \""@server/middlewares/authentication\"";\n import { transaction } from \""@server/middlewares/transaction\"";\n import validate from \""@server/middlewares/validate\"";\n-import { WebhookSubscription, Event } from \""@server/models\"";\n+import { WebhookSubscription } from \""@server/models\"";\n import { authorize } from \""@server/policies\"";\n import pagination from \""@server/routes/api/middlewares/pagination\"";\n import { APIContext } from \""@server/types\"";\n@@ -20,7 +20,9 @@ router.post(\n   pagination(),\n   async (ctx: APIContext) => {\n     const { user } = ctx.state.auth;\n+\n     authorize(user, \""listWebhookSubscription\"", user.team);\n+\n     const webhooks = await WebhookSubscription.findAll({\n       where: {\n         teamId: user.teamId,\n@@ -43,34 +45,19 @@ router.post(\n   validate(T.WebhookSubscriptionsCreateSchema),\n   transaction(),\n   async (ctx: APIContext<T.WebhookSubscriptionsCreateReq>) => {\n-    const { transaction } = ctx.state;\n+    const { name, url, secret, events } = ctx.input.body;\n     const { user } = ctx.state.auth;\n-    authorize(user, \""createWebhookSubscription\"", user.team);\n \n-    const { name, url, secret } = ctx.input.body;\n-    const events: string[] = compact(ctx.input.body.events);\n+    authorize(user, \""createWebhookSubscription\"", user.team);\n \n-    const webhookSubscription = await WebhookSubscription.create(\n-      {\n-        name,\n-        events,\n-        createdById: user.id,\n-        teamId: user.teamId,\n-        url,\n-        enabled: true,\n-        secret: isEmpty(secret) ? undefined : secret,\n-      },\n-      { transaction }\n-    );\n-\n-    await Event.createFromContext(ctx, {\n-      name: \""webhookSubscriptions.create\"",\n-      modelId: webhookSubscription.id,\n-      data: {\n-        name,\n-        url,\n-        events,\n-      },\n+    const webhookSubscription = await WebhookSubscription.createWithCtx(ctx, {\n+      name,\n+      url,\n+      events: compact(events),\n+      enabled: true,\n+      secret: isEmpty(secret) ? undefined : secret,\n+      createdById: user.id,\n+      teamId: user.teamId,\n     });\n \n     ctx.body = {\n@@ -88,6 +75,7 @@ router.post(\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n+\n     const webhookSubscription = await WebhookSubscription.findByPk(id, {\n       rejectOnEmpty: true,\n       lock: transaction.LOCK.UPDATE,\n@@ -96,17 +84,7 @@ router.post(\n \n     authorize(user, \""delete\"", webhookSubscription);\n \n-    await webhookSubscription.destroy({ transaction });\n-\n-    await Event.createFromContext(ctx, {\n-      name: \""webhookSubscriptions.delete\"",\n-      modelId: webhookSubscription.id,\n-      data: {\n-        name: webhookSubscription.name,\n-        url: webhookSubscription.url,\n-        events: webhookSubscription.events,\n-      },\n-    });\n+    await webhookSubscription.destroyWithCtx(ctx);\n \n     ctx.body = {\n       success: true,\n@@ -120,10 +98,10 @@ router.post(\n   validate(T.WebhookSubscriptionsUpdateSchema),\n   transaction(),\n   async (ctx: APIContext<T.WebhookSubscriptionsUpdateReq>) => {\n-    const { id, name, url, secret } = ctx.input.body;\n+    const { id, name, url, secret, events } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n-    const events: string[] = compact(ctx.input.body.events);\n+\n     const webhookSubscription = await WebhookSubscription.findByPk(id, {\n       rejectOnEmpty: true,\n       lock: transaction.LOCK.UPDATE,\n@@ -132,25 +110,12 @@ router.post(\n \n     authorize(user, \""update\"", webhookSubscription);\n \n-    await webhookSubscription.update(\n-      {\n-        name,\n-        url,\n-        events,\n-        enabled: true,\n-        secret: isEmpty(secret) ? undefined : secret,\n-      },\n-      { transaction }\n-    );\n-\n-    await Event.createFromContext(ctx, {\n-      name: \""webhookSubscriptions.update\"",\n-      modelId: webhookSubscription.id,\n-      data: {\n-        name: webhookSubscription.name,\n-        url: webhookSubscription.url,\n-        events: webhookSubscription.events,\n-      },\n+    await webhookSubscription.updateWithCtx(ctx, {\n+      name,\n+      url,\n+      events: compact(events),\n+      enabled: true,\n+      secret: isEmpty(secret) ? undefined : secret,\n     });\n \n     ctx.body = {\n\ndiff --git a/server/models/WebhookSubscription.ts b/server/models/WebhookSubscription.ts\nindex 92d5bce563a3..38e227b0442e 100644\n--- a/server/models/WebhookSubscription.ts\n+++ b/server/models/WebhookSubscription.ts\n@@ -44,6 +44,8 @@ class WebhookSubscription extends ParanoidModel<\n   InferAttributes<WebhookSubscription>,\n   Partial<InferCreationAttributes<WebhookSubscription>>\n > {\n+  static eventNamespace = \""webhookSubscriptions\"";\n+\n   @NotEmpty\n   @Length({ max: 255, msg: \""Webhook name be less than 255 characters\"" })\n   @Column\n"", ""test_patch"": ""diff --git a/plugins/webhooks/server/api/webhookSubscriptions.test.ts b/plugins/webhooks/server/api/webhookSubscriptions.test.ts\nnew file mode 100644\nindex 000000000000..200c0dee9c58\n--- /dev/null\n+++ b/plugins/webhooks/server/api/webhookSubscriptions.test.ts\n@@ -0,0 +1,239 @@\n+import {\n+  buildAdmin,\n+  buildUser,\n+  buildWebhookSubscription,\n+} from \""@server/test/factories\"";\n+import { getTestServer } from \""@server/test/support\"";\n+\n+const server = getTestServer();\n+\n+describe(\""#webhookSubscriptions.list\"", () => {\n+  it(\""should fail with status 401 unauthorized when user token is missing\"", async () => {\n+    const res = await server.post(\""/api/webhookSubscriptions.list\"", {\n+      body: {},\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(401);\n+    expect(body.message).toEqual(\""Authentication required\"");\n+  });\n+\n+  it(\""should fail with status 403 forbidden for non-admin user\"", async () => {\n+    const user = await buildUser();\n+\n+    const res = await server.post(\""/api/webhookSubscriptions.list\"", {\n+      body: { token: user.getJwtToken() },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(403);\n+    expect(body.message).toEqual(\""Admin role required\"");\n+  });\n+\n+  it(\""should return the webhook subscriptions for the user's team\"", async () => {\n+    const user = await buildAdmin();\n+    const webhookSubscriptions = await Promise.all(\n+      Array(20)\n+        .fill(1)\n+        .map(() =>\n+          buildWebhookSubscription({\n+            createdById: user.id,\n+            teamId: user.teamId,\n+          })\n+        )\n+    );\n+\n+    const res = await server.post(\""/api/webhookSubscriptions.list\"", {\n+      body: { token: user.getJwtToken() },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(webhookSubscriptions.length);\n+  });\n+});\n+\n+describe(\""#webhookSubscriptions.create\"", () => {\n+  it(\""should fail with status 401 unauthorized when user token is missing\"", async () => {\n+    const res = await server.post(\""/api/webhookSubscriptions.create\"", {\n+      body: {},\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(401);\n+    expect(body.message).toEqual(\""Authentication required\"");\n+  });\n+\n+  it(\""should fail with status 403 forbidden for non-admin user\"", async () => {\n+    const user = await buildUser();\n+\n+    const res = await server.post(\""/api/webhookSubscriptions.create\"", {\n+      body: { token: user.getJwtToken() },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(403);\n+    expect(body.message).toEqual(\""Admin role required\"");\n+  });\n+\n+  it(\""should successfully create a webhook subscription\"", async () => {\n+    const user = await buildAdmin();\n+    const name = \""Test webhook\"";\n+    const url = \""https://www.example.com\"";\n+    const events = [\""comments\""];\n+    const secret = \""Test secret\"";\n+\n+    const res = await server.post(\""/api/webhookSubscriptions.create\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        name,\n+        url,\n+        events,\n+        secret,\n+      },\n+    });\n+    const body = await res.json();\n+    const webhook = body.data;\n+\n+    expect(res.status).toEqual(200);\n+    expect(webhook.name).toEqual(name);\n+    expect(webhook.url).toEqual(url);\n+    expect(webhook.events).toEqual(events);\n+    expect(webhook.secret).toEqual(secret);\n+    expect(webhook.enabled).toEqual(true);\n+  });\n+});\n+\n+describe(\""#webhookSubscriptions.update\"", () => {\n+  it(\""should fail with status 401 unauthorized when user token is missing\"", async () => {\n+    const res = await server.post(\""/api/webhookSubscriptions.update\"", {\n+      body: {},\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(401);\n+    expect(body.message).toEqual(\""Authentication required\"");\n+  });\n+\n+  it(\""should fail with status 403 forbidden for non-admin user\"", async () => {\n+    const user = await buildUser();\n+\n+    const res = await server.post(\""/api/webhookSubscriptions.update\"", {\n+      body: { token: user.getJwtToken() },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(403);\n+    expect(body.message).toEqual(\""Admin role required\"");\n+  });\n+\n+  it(\""should successfully update a webhook subscription\"", async () => {\n+    const user = await buildAdmin();\n+    const name = \""Updated webhook name\"";\n+    const url = \""https://www.example.com/update\"";\n+    const events = [\""comments\""];\n+\n+    const existingWebhook = await buildWebhookSubscription({\n+      name: \""Created webhook name\"",\n+      url: \""https://www.example.com/create\"",\n+      events: [\""*\""],\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const res = await server.post(\""/api/webhookSubscriptions.update\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: existingWebhook.id,\n+        name,\n+        url,\n+        events,\n+      },\n+    });\n+    const body = await res.json();\n+    const webhook = body.data;\n+\n+    expect(res.status).toEqual(200);\n+    expect(webhook.name).toEqual(name);\n+    expect(webhook.url).toEqual(url);\n+    expect(webhook.events).toEqual(events);\n+    expect(webhook.enabled).toEqual(true);\n+  });\n+\n+  it(\""should activate a disabled webhook subscription when it's updated\"", async () => {\n+    const user = await buildAdmin();\n+    const name = \""Updated webhook name\"";\n+    const url = \""https://www.example.com/update\"";\n+    const events = [\""comments\""];\n+\n+    const disabledWebhook = await buildWebhookSubscription({\n+      name: \""Created webhook name\"",\n+      url: \""https://www.example.com/create\"",\n+      events: [\""*\""],\n+      createdById: user.id,\n+      teamId: user.teamId,\n+      enabled: false,\n+    });\n+\n+    const res = await server.post(\""/api/webhookSubscriptions.update\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: disabledWebhook.id,\n+        name,\n+        url,\n+        events,\n+      },\n+    });\n+    const body = await res.json();\n+    const webhook = body.data;\n+\n+    expect(res.status).toEqual(200);\n+    expect(webhook.name).toEqual(name);\n+    expect(webhook.url).toEqual(url);\n+    expect(webhook.events).toEqual(events);\n+    expect(webhook.enabled).toEqual(true);\n+  });\n+});\n+\n+describe(\""#webhookSubscriptions.delete\"", () => {\n+  it(\""should fail with status 401 unauthorized when user token is missing\"", async () => {\n+    const res = await server.post(\""/api/webhookSubscriptions.delete\"", {\n+      body: {},\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(401);\n+    expect(body.message).toEqual(\""Authentication required\"");\n+  });\n+\n+  it(\""should fail with status 403 forbidden for non-admin user\"", async () => {\n+    const user = await buildUser();\n+\n+    const res = await server.post(\""/api/webhookSubscriptions.delete\"", {\n+      body: { token: user.getJwtToken() },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(403);\n+    expect(body.message).toEqual(\""Admin role required\"");\n+  });\n+\n+  it(\""should successfully delete a webhook subscription\"", async () => {\n+    const user = await buildAdmin();\n+    const createdWebhook = await buildWebhookSubscription({\n+      name: \""Test webhook\"",\n+      url: \""https://www.example.com\"",\n+      events: [\""*\""],\n+      createdById: user.id,\n+      teamId: user.teamId,\n+    });\n+\n+    const res = await server.post(\""/api/webhookSubscriptions.delete\"", {\n+      body: { token: user.getJwtToken(), id: createdWebhook.id },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.success).toEqual(true);\n+  });\n+});\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8145"", ""pr_id"": 8145, ""issue_id"": 8142, ""repo"": ""outline/outline"", ""problem_statement"": ""Formatting errors in copying\nThe copied text will automatically add line breaks.\r\n\r\n**To Reproduce**\r\nWrite a list and then copy it and paste it into the console and you will find that the format is messed up.\r\n\r\n\r\n**Expected behavior**\r\nFully formatted\r\n\r\n**Screenshots**\r\n<img width=\""1265\"" alt=\""image\"" src=\""https://github.com/user-attachments/assets/18f2b9f2-2952-47a2-9eec-ec2c6a8b10c0\"" />\r\n\r\n\r\n\r\nBrowser: Google Chrome\r\nDevice: MacBook Pro\r\nOS: macOS 14.6.1\r\nInstallation: Self-hosted server\r\nOutline Version: 0.81.1\r\n"", ""issue_word_count"": 75, ""test_files_count"": 1, ""non_test_files_count"": 1, ""pr_changed_files"": [""server/models/helpers/DocumentHelper.test.ts"", ""shared/editor/lib/textBetween.ts""], ""pr_changed_test_files"": [""server/models/helpers/DocumentHelper.test.ts""], ""base_commit"": ""3437bd3a6c245835bc435985a5f6d0e09cc828bb"", ""head_commit"": ""3139f9faf4ab7563f88d1cfa78bf2af0405e557a"", ""repo_url"": ""https://github.com/outline/outline/pull/8145"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8145"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-26T11:31:13.000Z"", ""patch"": ""diff --git a/shared/editor/lib/textBetween.ts b/shared/editor/lib/textBetween.ts\nindex 4a3fda301181..89ba7db8902a 100644\n--- a/shared/editor/lib/textBetween.ts\n+++ b/shared/editor/lib/textBetween.ts\n@@ -16,27 +16,37 @@ export default function textBetween(\n   to: number,\n   plainTextSerializers: Record<string, PlainTextSerializer | undefined>\n ): string {\n-  const blockSeparator = \""\\n\\n\"";\n   let text = \""\"";\n-  let separated = true;\n+  let first = true;\n+  const blockSeparator = \""\\n\"";\n \n   doc.nodesBetween(from, to, (node, pos) => {\n     const toPlainText = plainTextSerializers[node.type.name];\n+    let nodeText = \""\"";\n \n     if (toPlainText) {\n-      if (node.isBlock && !separated) {\n+      nodeText += toPlainText(node);\n+    } else if (node.isText) {\n+      nodeText += node.textBetween(\n+        Math.max(from, pos) - pos,\n+        to - pos,\n+        blockSeparator\n+      );\n+    }\n+\n+    if (\n+      node.isBlock &&\n+      ((node.isLeaf && nodeText) || node.isTextblock) &&\n+      blockSeparator\n+    ) {\n+      if (first) {\n+        first = false;\n+      } else {\n         text += blockSeparator;\n-        separated = true;\n       }\n-\n-      text += toPlainText(node);\n-    } else if (node.isText) {\n-      text += node.text?.slice(Math.max(from, pos) - pos, to - pos);\n-      separated = false;\n-    } else if (node.isBlock && !separated) {\n-      text += blockSeparator;\n-      separated = true;\n     }\n+\n+    text += nodeText;\n   });\n \n   return text;\n"", ""test_patch"": ""diff --git a/server/models/helpers/DocumentHelper.test.ts b/server/models/helpers/DocumentHelper.test.ts\nindex 60af8f8c15d6..d8f97a186504 100644\n--- a/server/models/helpers/DocumentHelper.test.ts\n+++ b/server/models/helpers/DocumentHelper.test.ts\n@@ -248,39 +248,30 @@ This is a new paragraph.\n \n       // Strip all formatting\n       expect(text).toEqual(`This is a test paragraph\n-\n A new link\n-\n list item 1\n-\n This is a new paragraph.\n-\n This is a placeholder\n-\n this is a highlight\n-\n checklist item 1\n-\n checklist item 2\n-\n checklist item 3\n-\n checklist item 4\n-\n checklist item 5\n-\n This\n-\n Is\n-\n Table\n-\n Multiple\n \n+\n Lines\n \n+\n In a cell\n \n+\n+\n+\n `);\n     });\n   });\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8127"", ""pr_id"": 8127, ""issue_id"": 8099, ""repo"": ""outline/outline"", ""problem_statement"": ""`group_permissions->documentId` and `group_permissions->sourceId`  indexes are missing\nCurrent set of indexes looks like\r\n\r\n<img width=\""576\"" alt=\""image\"" src=\""https://github.com/user-attachments/assets/4fc6e176-3cbb-4733-a14b-33c5d5161b2c\"">\r\n"", ""issue_word_count"": 23, ""test_files_count"": 1, ""non_test_files_count"": 8, ""pr_changed_files"": [""app/models/Group.ts"", ""server/commands/groupCreator.ts"", ""server/commands/groupUpdater.ts"", ""server/migrations/20241219023150-group-external-id.js"", ""server/models/Group.ts"", ""server/presenters/group.ts"", ""server/routes/api/groups/groups.test.ts"", ""server/routes/api/groups/groups.ts"", ""server/routes/api/groups/schema.ts""], ""pr_changed_test_files"": [""server/routes/api/groups/groups.test.ts""], ""base_commit"": ""02aa4c2928018795427bf0f6a824efe4c411bee3"", ""head_commit"": ""6ab9387544a31a3540721825517e34ab3ac3b53b"", ""repo_url"": ""https://github.com/outline/outline/pull/8127"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8127"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-26T16:44:04.000Z"", ""patch"": ""diff --git a/app/models/Group.ts b/app/models/Group.ts\nindex d59c20d2176a..328f308c10be 100644\n--- a/app/models/Group.ts\n+++ b/app/models/Group.ts\n@@ -10,6 +10,9 @@ class Group extends Model {\n   @observable\n   name: string;\n \n+  @observable\n+  externalId: string | undefined;\n+\n   @observable\n   memberCount: number;\n \n\ndiff --git a/server/commands/groupCreator.ts b/server/commands/groupCreator.ts\nindex 6151cd1b7b79..052deaef4bc1 100644\n--- a/server/commands/groupCreator.ts\n+++ b/server/commands/groupCreator.ts\n@@ -3,6 +3,7 @@ import { Event, Group, type User } from \""@server/models\"";\n \n type Props = {\n   name: string;\n+  externalId: string | undefined;\n   actor: User;\n   ip: string;\n   transaction?: Transaction;\n@@ -10,6 +11,7 @@ type Props = {\n \n export default async function groupCreator({\n   name,\n+  externalId,\n   actor,\n   ip,\n   transaction,\n@@ -17,6 +19,7 @@ export default async function groupCreator({\n   const group = await Group.create(\n     {\n       name,\n+      externalId,\n       teamId: actor.teamId,\n       createdById: actor.id,\n     },\n\ndiff --git a/server/commands/groupUpdater.ts b/server/commands/groupUpdater.ts\nindex 98ddb966fc7a..b69460421202 100644\n--- a/server/commands/groupUpdater.ts\n+++ b/server/commands/groupUpdater.ts\n@@ -3,7 +3,8 @@ import { Event, type Group, type User } from \""@server/models\"";\n \n type Props = {\n   group: Group;\n-  name: string;\n+  name: string | undefined;\n+  externalId: string | undefined;\n   actor: User;\n   ip: string;\n   transaction?: Transaction;\n@@ -12,11 +13,17 @@ type Props = {\n export default async function groupUpdater({\n   group,\n   name,\n+  externalId,\n   actor,\n   ip,\n   transaction,\n }: Props): Promise<Group> {\n-  group.name = name;\n+  if (name) {\n+    group.name = name;\n+  }\n+  if (externalId) {\n+    group.externalId = externalId;\n+  }\n \n   if (group.changed()) {\n     await group.save({ transaction });\n\ndiff --git a/server/migrations/20241219023150-group-external-id.js b/server/migrations/20241219023150-group-external-id.js\nnew file mode 100644\nindex 000000000000..b4f239a203ba\n--- /dev/null\n+++ b/server/migrations/20241219023150-group-external-id.js\n@@ -0,0 +1,24 @@\n+\""use strict\"";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.addColumn(\""groups\"", \""externalId\"", {\n+        type: Sequelize.STRING,\n+      }, { transaction });\n+      await queryInterface.addIndex(\""groups\"", [\""externalId\""], { transaction });\n+      await queryInterface.addIndex(\""group_permissions\"", [\""documentId\""], { transaction });\n+      await queryInterface.addIndex(\""group_permissions\"", [\""sourceId\""], { transaction });\n+    });\n+  },\n+\n+  async down(queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.removeIndex(\""group_permissions\"", [\""sourceId\""], { transaction });\n+      await queryInterface.removeIndex(\""group_permissions\"", [\""documentId\""], { transaction });\n+      await queryInterface.removeIndex(\""groups\"", [\""externalId\""], { transaction });\n+      await queryInterface.removeColumn(\""groups\"", \""externalId\"", { transaction });\n+    });\n+  },\n+};\n\ndiff --git a/server/models/Group.ts b/server/models/Group.ts\nindex 5b69ad13c775..dee4873bf1b1 100644\n--- a/server/models/Group.ts\n+++ b/server/models/Group.ts\n@@ -65,6 +65,9 @@ class Group extends ParanoidModel<\n   @Column\n   name: string;\n \n+  @Column\n+  externalId: string;\n+\n   static filterByMember(userId: string | undefined) {\n     return userId\n       ? this.scope({ method: [\""withMembership\"", userId] })\n\ndiff --git a/server/presenters/group.ts b/server/presenters/group.ts\nindex 91a8057add79..a7819c31f3e8 100644\n--- a/server/presenters/group.ts\n+++ b/server/presenters/group.ts\n@@ -4,6 +4,7 @@ export default async function presentGroup(group: Group) {\n   return {\n     id: group.id,\n     name: group.name,\n+    externalId: group.externalId,\n     memberCount: await group.memberCount,\n     createdAt: group.createdAt,\n     updatedAt: group.updatedAt,\n\ndiff --git a/server/routes/api/groups/groups.ts b/server/routes/api/groups/groups.ts\nindex 623183b0c77d..4764c52e01b5 100644\n--- a/server/routes/api/groups/groups.ts\n+++ b/server/routes/api/groups/groups.ts\n@@ -31,7 +31,7 @@ router.post(\n   pagination(),\n   validate(T.GroupsListSchema),\n   async (ctx: APIContext<T.GroupsListReq>) => {\n-    const { sort, direction, query, userId, name } = ctx.input.body;\n+    const { sort, direction, query, userId, externalId, name } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     authorize(user, \""listGroups\"", user.team);\n \n@@ -55,6 +55,13 @@ router.post(\n       };\n     }\n \n+    if (externalId) {\n+      where = {\n+        ...where,\n+        externalId,\n+      };\n+    }\n+\n     const groups = await Group.filterByMember(userId).findAll({\n       where,\n       order: [[sort, direction]],\n@@ -110,18 +117,19 @@ router.post(\n \n router.post(\n   \""groups.create\"",\n-  rateLimiter(RateLimiterStrategy.TenPerHour),\n+  rateLimiter(RateLimiterStrategy.TenPerMinute),\n   auth(),\n   validate(T.GroupsCreateSchema),\n   transaction(),\n   async (ctx: APIContext<T.GroupsCreateReq>) => {\n-    const { name } = ctx.input.body;\n+    const { name, externalId } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n     authorize(user, \""createGroup\"", user.team);\n \n     const group = await groupCreator({\n       name,\n+      externalId,\n       actor: user,\n       ip: ctx.request.ip,\n       transaction,\n@@ -140,7 +148,7 @@ router.post(\n   validate(T.GroupsUpdateSchema),\n   transaction(),\n   async (ctx: APIContext<T.GroupsUpdateReq>) => {\n-    const { id, name } = ctx.input.body;\n+    const { id, name, externalId } = ctx.input.body;\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n \n@@ -150,6 +158,7 @@ router.post(\n     group = await groupUpdater({\n       group,\n       name,\n+      externalId,\n       actor: user,\n       ip: ctx.request.ip,\n       transaction,\n\ndiff --git a/server/routes/api/groups/schema.ts b/server/routes/api/groups/schema.ts\nindex 4022282aeeeb..74c6d0ac7ac4 100644\n--- a/server/routes/api/groups/schema.ts\n+++ b/server/routes/api/groups/schema.ts\n@@ -13,7 +13,6 @@ export const GroupsListSchema = z.object({\n       .string()\n       .optional()\n       .transform((val) => (val !== \""ASC\"" ? \""DESC\"" : val)),\n-\n     /** Groups sorting column */\n     sort: z\n       .string()\n@@ -21,13 +20,12 @@ export const GroupsListSchema = z.object({\n         message: \""Invalid sort parameter\"",\n       })\n       .default(\""updatedAt\""),\n-\n     /** Only list groups where this user is a member */\n     userId: z.string().uuid().optional(),\n-\n+    /** Find group matching externalId */\n+    externalId: z.string().optional(),\n     /** @deprecated Find group with matching name */\n     name: z.string().optional(),\n-\n     /** Find group matching query */\n     query: z.string().optional(),\n   }),\n@@ -45,6 +43,8 @@ export const GroupsCreateSchema = z.object({\n   body: z.object({\n     /** Group name */\n     name: z.string(),\n+    /** Optionally link this group to an external source. */\n+    externalId: z.string().optional(),\n   }),\n });\n \n@@ -53,7 +53,9 @@ export type GroupsCreateReq = z.infer<typeof GroupsCreateSchema>;\n export const GroupsUpdateSchema = z.object({\n   body: BaseIdSchema.extend({\n     /** Group name */\n-    name: z.string(),\n+    name: z.string().optional(),\n+    /** Optionally link this group to an external source. */\n+    externalId: z.string().optional(),\n   }),\n });\n \n"", ""test_patch"": ""diff --git a/server/routes/api/groups/groups.test.ts b/server/routes/api/groups/groups.test.ts\nindex a0a0a8d0a64b..415e5f102a04 100644\n--- a/server/routes/api/groups/groups.test.ts\n+++ b/server/routes/api/groups/groups.test.ts\n@@ -12,11 +12,13 @@ describe(\""#groups.create\"", () => {\n       body: {\n         token: user.getJwtToken(),\n         name,\n+        externalId: \""123\"",\n       },\n     });\n     const body = await res.json();\n     expect(res.status).toEqual(200);\n     expect(body.data.name).toEqual(name);\n+    expect(body.data.externalId).toEqual(\""123\"");\n   });\n });\n \n@@ -67,12 +69,14 @@ describe(\""#groups.update\"", () => {\n         teamId: user.teamId,\n       });\n     });\n+\n     it(\""allows admin to edit a group\"", async () => {\n       const res = await server.post(\""/api/groups.update\"", {\n         body: {\n           token: user.getJwtToken(),\n           id: group.id,\n           name: \""Test\"",\n+          externalId: \""123\"",\n         },\n       });\n       const events = await Event.findAll({\n@@ -84,7 +88,9 @@ describe(\""#groups.update\"", () => {\n       const body = await res.json();\n       expect(res.status).toEqual(200);\n       expect(body.data.name).toBe(\""Test\"");\n+      expect(body.data.externalId).toBe(\""123\"");\n     });\n+\n     it(\""does not create an event if the update is a noop\"", async () => {\n       const res = await server.post(\""/api/groups.update\"", {\n         body: {\n@@ -103,6 +109,7 @@ describe(\""#groups.update\"", () => {\n       expect(res.status).toEqual(200);\n       expect(body.data.name).toBe(group.name);\n     });\n+\n     it(\""fails with validation error when name already taken\"", async () => {\n       await buildGroup({\n         teamId: user.teamId,\n@@ -275,6 +282,23 @@ describe(\""#groups.list\"", () => {\n     expect(body.data.groups.length).toEqual(1);\n     expect(body.data.groups[0].id).toEqual(group.id);\n   });\n+\n+  it(\""should allow to find a group by its externalId\"", async () => {\n+    const user = await buildUser();\n+    const group = await buildGroup({ teamId: user.teamId, externalId: \""123\"" });\n+    await buildGroup({ teamId: user.teamId });\n+\n+    const res = await server.post(\""/api/groups.list\"", {\n+      body: {\n+        externalId: \""123\"",\n+        token: user.getJwtToken(),\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.groups.length).toEqual(1);\n+    expect(body.data.groups[0].id).toEqual(group.id);\n+  });\n });\n \n describe(\""#groups.info\"", () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8119"", ""pr_id"": 8119, ""issue_id"": 7387, ""repo"": ""outline/outline"", ""problem_statement"": ""Allow updating a user's email from member management\nThis would need to send an email to the new address, which when clicked would perform the email change, rather than immediately modifying the database.\r\n\r\ntowards https://github.com/outline/outline/issues/6159\r\n            "", ""issue_word_count"": 33, ""test_files_count"": 3, ""non_test_files_count"": 16, ""pr_changed_files"": [""app/components/ConfirmationDialog.tsx"", ""app/components/UserDialogs.tsx"", ""app/menus/UserMenu.tsx"", ""app/scenes/Settings/Notifications.tsx"", ""app/scenes/Settings/Profile.tsx"", ""server/commands/userProvisioner.test.ts"", ""server/commands/userProvisioner.ts"", ""server/emails/templates/ConfirmUpdateEmail.tsx"", ""server/errors.ts"", ""server/models/Team.ts"", ""server/models/User.ts"", ""server/routes/api/teams/teams.ts"", ""server/routes/api/users/__snapshots__/users.test.ts.snap"", ""server/routes/api/users/schema.ts"", ""server/routes/api/users/users.test.ts"", ""server/routes/api/users/users.ts"", ""server/utils/jwt.ts"", ""shared/i18n/locales/en_US/translation.json"", ""shared/utils/routeHelpers.ts""], ""pr_changed_test_files"": [""server/commands/userProvisioner.test.ts"", ""server/routes/api/users/__snapshots__/users.test.ts.snap"", ""server/routes/api/users/users.test.ts""], ""base_commit"": ""742c138b3df70bd2be7a4093dd44ba7c0c774ea0"", ""head_commit"": ""b381f9b4ff8ea420b4790e4fed4eabb9b8be56e9"", ""repo_url"": ""https://github.com/outline/outline/pull/8119"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8119"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-25T10:58:26.000Z"", ""patch"": ""diff --git a/app/components/ConfirmationDialog.tsx b/app/components/ConfirmationDialog.tsx\nindex 299ebd396403..7475dfbf584f 100644\n--- a/app/components/ConfirmationDialog.tsx\n+++ b/app/components/ConfirmationDialog.tsx\n@@ -8,8 +8,8 @@ import Text from \""~/components/Text\"";\n import useStores from \""~/hooks/useStores\"";\n \n type Props = {\n-  /** Callback when the dialog is submitted */\n-  onSubmit: () => Promise<void> | void;\n+  /** Callback when the dialog is submitted. Return false to prevent closing. */\n+  onSubmit: () => Promise<void | boolean> | void;\n   /** Text to display on the submit button */\n   submitText?: string;\n   /** Text to display while the form is saving */\n@@ -38,7 +38,10 @@ const ConfirmationDialog: React.FC<Props> = ({\n       ev.preventDefault();\n       setIsSaving(true);\n       try {\n-        await onSubmit();\n+        const res = await onSubmit();\n+        if (res === false) {\n+          return;\n+        }\n         dialogs.closeAllModals();\n       } catch (err) {\n         toast.error(err.message);\n\ndiff --git a/app/components/UserDialogs.tsx b/app/components/UserDialogs.tsx\nindex 74aac725ebb7..cbf60285838c 100644\n--- a/app/components/UserDialogs.tsx\n+++ b/app/components/UserDialogs.tsx\n@@ -1,10 +1,14 @@\n import * as React from \""react\"";\n-import { useTranslation } from \""react-i18next\"";\n+import { Trans, useTranslation } from \""react-i18next\"";\n+import { toast } from \""sonner\"";\n import { UserRole } from \""@shared/types\"";\n import User from \""~/models/User\"";\n import ConfirmationDialog from \""~/components/ConfirmationDialog\"";\n import Input from \""~/components/Input\"";\n+import useCurrentUser from \""~/hooks/useCurrentUser\"";\n import useStores from \""~/hooks/useStores\"";\n+import { client } from \""~/utils/ApiClient\"";\n+import Text from \""./Text\"";\n \n type Props = {\n   user: User;\n@@ -85,7 +89,11 @@ export function UserSuspendDialog({ user, onSubmit }: Props) {\n   };\n \n   return (\n-    <ConfirmationDialog onSubmit={handleSubmit} savingText={`${t(\""Saving\"")}\u2026`}>\n+    <ConfirmationDialog\n+      onSubmit={handleSubmit}\n+      savingText={`${t(\""Saving\"")}\u2026`}\n+      danger\n+    >\n       {t(\n         \""Are you sure you want to suspend {{ userName }}? Suspended users will be prevented from logging in.\"",\n         {\n@@ -123,6 +131,68 @@ export function UserChangeNameDialog({ user, onSubmit }: Props) {\n         onChange={handleChange}\n         error={!name ? t(\""Name can't be empty\"") : undefined}\n         value={name}\n+        autoSelect\n+        required\n+        flex\n+      />\n+    </ConfirmationDialog>\n+  );\n+}\n+\n+export function UserChangeEmailDialog({ user, onSubmit }: Props) {\n+  const { t } = useTranslation();\n+  const actor = useCurrentUser();\n+  const [email, setEmail] = React.useState<string>(user.email);\n+  const [error, setError] = React.useState<string | undefined>();\n+\n+  const handleSubmit = async () => {\n+    try {\n+      await client.post(`/users.updateEmail`, { id: user.id, email });\n+      onSubmit();\n+      toast.info(\n+        actor.id === user.id\n+          ? t(\""Check your email to verify the new address.\"")\n+          : t(\""The email will be changed once verified.\"")\n+      );\n+      return true;\n+    } catch (err) {\n+      setError(err.message);\n+      return false;\n+    }\n+  };\n+\n+  const handleChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n+    setEmail(ev.target.value);\n+  };\n+\n+  return (\n+    <ConfirmationDialog\n+      onSubmit={handleSubmit}\n+      submitText={t(\""Save\"")}\n+      savingText={`${t(\""Saving\"")}\u2026`}\n+      disabled={!email || email === user.email}\n+    >\n+      <Text as=\""p\"">\n+        {actor.id === user.id ? (\n+          <Trans>\n+            You will receive an email to verify your new address. It must be\n+            unique in the workspace.\n+          </Trans>\n+        ) : (\n+          <Trans>\n+            A confirmation email will be sent to the new address before it is\n+            changed.\n+          </Trans>\n+        )}\n+      </Text>\n+      <Input\n+        type=\""email\""\n+        name=\""email\""\n+        label={t(\""New email\"")}\n+        onChange={handleChange}\n+        error={!email ? t(\""Email can't be empty\"") : error}\n+        value={email}\n+        autoSelect\n         required\n         flex\n       />\n\ndiff --git a/app/menus/UserMenu.tsx b/app/menus/UserMenu.tsx\nindex 8a1026c24e0a..5cc58638dad6 100644\n--- a/app/menus/UserMenu.tsx\n+++ b/app/menus/UserMenu.tsx\n@@ -11,6 +11,7 @@ import Template from \""~/components/ContextMenu/Template\"";\n import {\n   UserSuspendDialog,\n   UserChangeNameDialog,\n+  UserChangeEmailDialog,\n } from \""~/components/UserDialogs\"";\n import { actionToMenuItem } from \""~/actions\"";\n import {\n@@ -49,6 +50,22 @@ function UserMenu({ user }: Props) {\n     [dialogs, t, user]\n   );\n \n+  const handleChangeEmail = React.useCallback(\n+    (ev: React.SyntheticEvent) => {\n+      ev.preventDefault();\n+      dialogs.openModal({\n+        title: t(\""Change email\""),\n+        content: (\n+          <UserChangeEmailDialog\n+            user={user}\n+            onSubmit={dialogs.closeAllModals}\n+          />\n+        ),\n+      });\n+    },\n+    [dialogs, t, user]\n+  );\n+\n   const handleSuspend = React.useCallback(\n     (ev: React.SyntheticEvent) => {\n       ev.preventDefault();\n@@ -117,7 +134,13 @@ function UserMenu({ user }: Props) {\n               type: \""button\"",\n               title: `${t(\""Change name\"")}\u2026`,\n               onClick: handleChangeName,\n-              visible: can.update && user.role !== \""admin\"",\n+              visible: can.update,\n+            },\n+            {\n+              type: \""button\"",\n+              title: `${t(\""Change email\"")}\u2026`,\n+              onClick: handleChangeEmail,\n+              visible: can.update,\n             },\n             {\n               type: \""button\"",\n@@ -144,6 +167,7 @@ function UserMenu({ user }: Props) {\n             {\n               type: \""button\"",\n               title: `${t(\""Suspend user\"")}\u2026`,\n+              dangerous: true,\n               onClick: handleSuspend,\n               visible: !user.isInvited && !user.isSuspended,\n             },\n\ndiff --git a/app/scenes/Settings/Notifications.tsx b/app/scenes/Settings/Notifications.tsx\nindex 162b09d82566..479c6564eb9b 100644\n--- a/app/scenes/Settings/Notifications.tsx\n+++ b/app/scenes/Settings/Notifications.tsx\n@@ -19,19 +19,22 @@ import { toast } from \""sonner\"";\n import { NotificationEventType } from \""@shared/types\"";\n import Flex from \""~/components/Flex\"";\n import Heading from \""~/components/Heading\"";\n-import Input from \""~/components/Input\"";\n import Notice from \""~/components/Notice\"";\n import Scene from \""~/components/Scene\"";\n import Switch from \""~/components/Switch\"";\n import Text from \""~/components/Text\"";\n import env from \""~/env\"";\n+import useCurrentTeam from \""~/hooks/useCurrentTeam\"";\n import useCurrentUser from \""~/hooks/useCurrentUser\"";\n+import usePolicy from \""~/hooks/usePolicy\"";\n import isCloudHosted from \""~/utils/isCloudHosted\"";\n import SettingRow from \""./components/SettingRow\"";\n \n function Notifications() {\n   const user = useCurrentUser();\n+  const team = useCurrentTeam();\n   const { t } = useTranslation();\n+  const can = usePolicy(team.id);\n \n   const options = [\n     {\n@@ -161,17 +164,7 @@ function Notifications() {\n         <Trans>Manage when and where you receive email notifications.</Trans>\n       </Text>\n \n-      {env.EMAIL_ENABLED ? (\n-        <SettingRow\n-          label={t(\""Email address\"")}\n-          name=\""email\""\n-          description={t(\n-            \""Your email address should be updated in your SSO provider.\""\n-          )}\n-        >\n-          <Input type=\""email\"" value={user.email} readOnly />\n-        </SettingRow>\n-      ) : (\n+      {env.EMAIL_ENABLED && can.manage && (\n         <Notice>\n           <Trans>\n             The email integration is currently disabled. Please set the\n\ndiff --git a/app/scenes/Settings/Profile.tsx b/app/scenes/Settings/Profile.tsx\nindex 5c5f127b534e..cc04c58f091b 100644\n--- a/app/scenes/Settings/Profile.tsx\n+++ b/app/scenes/Settings/Profile.tsx\n@@ -8,14 +8,18 @@ import Heading from \""~/components/Heading\"";\n import Input from \""~/components/Input\"";\n import Scene from \""~/components/Scene\"";\n import Text from \""~/components/Text\"";\n+import { UserChangeEmailDialog } from \""~/components/UserDialogs\"";\n+import env from \""~/env\"";\n import useCurrentUser from \""~/hooks/useCurrentUser\"";\n+import useStores from \""~/hooks/useStores\"";\n import ImageInput from \""./components/ImageInput\"";\n import SettingRow from \""./components/SettingRow\"";\n \n const Profile = () => {\n   const user = useCurrentUser();\n+  const { dialogs } = useStores();\n   const form = React.useRef<HTMLFormElement>(null);\n-  const [name, setName] = React.useState<string>(user.name || \""\"");\n+  const [name, setName] = React.useState<string>(user.name);\n   const { t } = useTranslation();\n \n   const handleSubmit = async (ev: React.SyntheticEvent) => {\n@@ -29,6 +33,15 @@ const Profile = () => {\n     }\n   };\n \n+  const handleChangeEmail = () => {\n+    dialogs.openModal({\n+      title: t(\""Change email\""),\n+      content: (\n+        <UserChangeEmailDialog user={user} onSubmit={dialogs.closeAllModals} />\n+      ),\n+    });\n+  };\n+\n   const handleNameChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n     setName(ev.target.value);\n   };\n@@ -81,6 +94,17 @@ const Profile = () => {\n           />\n         </SettingRow>\n \n+        {env.EMAIL_ENABLED && (\n+          <SettingRow label={t(\""Email address\"")} name=\""email\"">\n+            <Input\n+              type=\""email\""\n+              value={user.email}\n+              readOnly\n+              onClick={handleChangeEmail}\n+            />\n+          </SettingRow>\n+        )}\n+\n         <Button type=\""submit\"" disabled={isSaving || !isValid}>\n           {isSaving ? `${t(\""Saving\"")}\u2026` : t(\""Save\"")}\n         </Button>\n\ndiff --git a/server/commands/userProvisioner.ts b/server/commands/userProvisioner.ts\nindex 905bddbef0d3..f6221358a7f1 100644\n--- a/server/commands/userProvisioner.ts\n+++ b/server/commands/userProvisioner.ts\n@@ -1,6 +1,5 @@\n import { InferCreationAttributes } from \""sequelize\"";\n import { UserRole } from \""@shared/types\"";\n-import { parseEmail } from \""@shared/utils/email\"";\n import InviteAcceptedEmail from \""@server/emails/templates/InviteAcceptedEmail\"";\n import {\n   DomainNotAllowedError,\n@@ -227,8 +226,7 @@ export default async function userProvisioner({\n \n     // If the team settings do not allow this domain,\n     // throw an error and fail user creation.\n-    const { domain } = parseEmail(email);\n-    if (team && !(await team.isDomainAllowed(domain))) {\n+    if (team && !(await team.isDomainAllowed(email))) {\n       throw DomainNotAllowedError();\n     }\n \n\ndiff --git a/server/emails/templates/ConfirmUpdateEmail.tsx b/server/emails/templates/ConfirmUpdateEmail.tsx\nnew file mode 100644\nindex 000000000000..05b903513b3a\n--- /dev/null\n+++ b/server/emails/templates/ConfirmUpdateEmail.tsx\n@@ -0,0 +1,73 @@\n+import * as React from \""react\"";\n+import env from \""@server/env\"";\n+import BaseEmail, { EmailMessageCategory, EmailProps } from \""./BaseEmail\"";\n+import Body from \""./components/Body\"";\n+import Button from \""./components/Button\"";\n+import EmailTemplate from \""./components/EmailLayout\"";\n+import EmptySpace from \""./components/EmptySpace\"";\n+import Footer from \""./components/Footer\"";\n+import Header from \""./components/Header\"";\n+import Heading from \""./components/Heading\"";\n+\n+type Props = EmailProps & {\n+  code: string;\n+  previous: string | null;\n+  teamUrl: string;\n+};\n+\n+/**\n+ * Email sent to a user when they request to change their email.\n+ */\n+export default class ConfirmUpdateEmail extends BaseEmail<Props> {\n+  protected get category() {\n+    return EmailMessageCategory.Authentication;\n+  }\n+\n+  protected subject() {\n+    return `Your email update request`;\n+  }\n+\n+  protected preview() {\n+    return `Here\u2019s your email change confirmation.`;\n+  }\n+\n+  protected renderAsText({ teamUrl, code, previous, to }: Props): string {\n+    return `\n+You requested to update your ${env.APP_NAME} account email. Please\n+follow the link below to confirm the change ${\n+      previous ? `from ${previous} ` : \""\""\n+    }to ${to}.\n+\n+  ${this.updateLink(teamUrl, code)}\n+  `;\n+  }\n+\n+  protected render({ teamUrl, code, previous, to }: Props) {\n+    return (\n+      <EmailTemplate previewText={this.preview()}>\n+        <Header />\n+\n+        <Body>\n+          <Heading>Your email update request</Heading>\n+          <p>\n+            You requested to update your {env.APP_NAME} account email. Please\n+            click below to confirm the change{\"" \""}\n+            {previous ? `from ${previous} ` : \""\""}to <strong>{to}</strong>.\n+          </p>\n+          <EmptySpace height={5} />\n+          <p>\n+            <Button href={this.updateLink(teamUrl, code)}>\n+              Confirm Change\n+            </Button>\n+          </p>\n+        </Body>\n+\n+        <Footer />\n+      </EmailTemplate>\n+    );\n+  }\n+\n+  private updateLink(teamUrl: string, code: string): string {\n+    return `${teamUrl}/api/users.updateEmail?code=${code}`;\n+  }\n+}\n\ndiff --git a/server/errors.ts b/server/errors.ts\nindex f962251a19b2..9c00faf40548 100644\n--- a/server/errors.ts\n+++ b/server/errors.ts\n@@ -49,7 +49,7 @@ export function InviteRequiredError(\n }\n \n export function DomainNotAllowedError(\n-  message = \""The domain is not allowed for this team\""\n+  message = \""The domain is not allowed for this workspace\""\n ) {\n   return httpErrors(403, message, {\n     id: \""domain_not_allowed\"",\n\ndiff --git a/server/models/Team.ts b/server/models/Team.ts\nindex a8c844a9a1ec..43e052f840cd 100644\n--- a/server/models/Team.ts\n+++ b/server/models/Team.ts\n@@ -27,9 +27,11 @@ import {\n   BeforeCreate,\n   IsNumeric,\n } from \""sequelize-typescript\"";\n+import { isEmail } from \""validator\"";\n import { TeamPreferenceDefaults } from \""@shared/constants\"";\n import { TeamPreference, TeamPreferences, UserRole } from \""@shared/types\"";\n import { getBaseDomain, RESERVED_SUBDOMAINS } from \""@shared/utils/domains\"";\n+import { parseEmail } from \""@shared/utils/email\"";\n import env from \""@server/env\"";\n import { ValidationError } from \""@server/errors\"";\n import DeleteAttachmentTask from \""@server/queues/tasks/DeleteAttachmentTask\"";\n@@ -293,15 +295,21 @@ class Team extends ParanoidModel<\n    * Find whether the passed domain can be used to sign-in to this team. Note\n    * that this method always returns true if no domain restrictions are set.\n    *\n-   * @param domain The domain to check\n+   * @param domainOrEmail The domain or email to check\n    * @returns True if the domain is allowed to sign-in to this team\n    */\n   public isDomainAllowed = async function (\n     this: Team,\n-    domain: string\n+    domainOrEmail: string\n   ): Promise<boolean> {\n     const allowedDomains = (await this.$get(\""allowedDomains\"")) || [];\n \n+    let domain = domainOrEmail;\n+    if (isEmail(domainOrEmail)) {\n+      const parsed = parseEmail(domainOrEmail);\n+      domain = parsed.domain;\n+    }\n+\n     return (\n       allowedDomains.length === 0 ||\n       allowedDomains.map((d: TeamDomain) => d.name).includes(domain)\n\ndiff --git a/server/models/User.ts b/server/models/User.ts\nindex e73dbe88700f..4d89133c7006 100644\n--- a/server/models/User.ts\n+++ b/server/models/User.ts\n@@ -48,6 +48,7 @@ import { stringToColor } from \""@shared/utils/color\"";\n import { locales } from \""@shared/utils/date\"";\n import env from \""@server/env\"";\n import DeleteAttachmentTask from \""@server/queues/tasks/DeleteAttachmentTask\"";\n+import { APIContext } from \""@server/types\"";\n import parseAttachmentIds from \""@server/utils/parseAttachmentIds\"";\n import { ValidationError } from \""../errors\"";\n import Attachment from \""./Attachment\"";\n@@ -581,6 +582,24 @@ class User extends ParanoidModel<\n       this.jwtSecret\n     );\n \n+  /**\n+   * Returns a temporary token that can be used to update the users\n+   * email address.\n+   *\n+   * @param email The new email address\n+   * @returns The token\n+   */\n+  getEmailUpdateToken = (email: string) =>\n+    JWT.sign(\n+      {\n+        id: this.id,\n+        createdAt: new Date().toISOString(),\n+        email,\n+        type: \""email-update\"",\n+      },\n+      this.jwtSecret\n+    );\n+\n   /**\n    * Returns a list of teams that have a user matching this user's email.\n    *\n@@ -705,6 +724,16 @@ class User extends ParanoidModel<\n     }\n   };\n \n+  static findByEmail = async function (ctx: APIContext, email: string) {\n+    return this.findOne({\n+      where: {\n+        teamId: ctx.context.auth.user.teamId,\n+        email: email.trim().toLowerCase(),\n+      },\n+      ...ctx.context,\n+    });\n+  };\n+\n   static getCounts = async function (teamId: string) {\n     const countSql = `\n       SELECT\n\ndiff --git a/server/routes/api/teams/teams.ts b/server/routes/api/teams/teams.ts\nindex 74672af00021..563c3d053f45 100644\n--- a/server/routes/api/teams/teams.ts\n+++ b/server/routes/api/teams/teams.ts\n@@ -68,16 +68,18 @@ router.post(\n   rateLimiter(RateLimiterStrategy.FivePerHour),\n   auth(),\n   async (ctx: APIContext) => {\n+    if (!emailEnabled) {\n+      throw ValidationError(\""Email support is not setup for this instance\"");\n+    }\n+\n     const { user } = ctx.state.auth;\n     const { team } = user;\n     authorize(user, \""delete\"", team);\n \n-    if (emailEnabled) {\n-      await new ConfirmTeamDeleteEmail({\n-        to: user.email,\n-        deleteConfirmationCode: team.getDeleteConfirmationCode(user),\n-      }).schedule();\n-    }\n+    await new ConfirmTeamDeleteEmail({\n+      to: user.email,\n+      deleteConfirmationCode: team.getDeleteConfirmationCode(user),\n+    }).schedule();\n \n     ctx.body = {\n       success: true,\n\ndiff --git a/server/routes/api/users/schema.ts b/server/routes/api/users/schema.ts\nindex 84c9df75520b..75b7234581c6 100644\n--- a/server/routes/api/users/schema.ts\n+++ b/server/routes/api/users/schema.ts\n@@ -99,6 +99,26 @@ export const UsersDeleteSchema = BaseSchema.extend({\n \n export type UsersDeleteSchemaReq = z.infer<typeof UsersDeleteSchema>;\n \n+export const UsersUpdateEmailSchema = BaseSchema.extend({\n+  body: z.object({\n+    id: z.string().uuid().optional(),\n+    email: z.string().email(),\n+  }),\n+});\n+\n+export type UsersUpdateEmailReq = z.infer<typeof UsersUpdateEmailSchema>;\n+\n+export const UsersUpdateEmailConfirmSchema = BaseSchema.extend({\n+  query: z.object({\n+    code: z.string(),\n+    follow: z.string().default(\""\""),\n+  }),\n+});\n+\n+export type UsersUpdateEmailConfirmReq = z.infer<\n+  typeof UsersUpdateEmailConfirmSchema\n+>;\n+\n export const UsersInfoSchema = BaseSchema.extend({\n   body: z.object({\n     id: z.string().uuid().optional(),\n\ndiff --git a/server/routes/api/users/users.ts b/server/routes/api/users/users.ts\nindex d1d93897493f..bc34f3b0272a 100644\n--- a/server/routes/api/users/users.ts\n+++ b/server/routes/api/users/users.ts\n@@ -2,11 +2,13 @@ import Router from \""koa-router\"";\n import { Op, Sequelize, WhereOptions } from \""sequelize\"";\n import { UserPreference, UserRole } from \""@shared/types\"";\n import { UserRoleHelper } from \""@shared/utils/UserRoleHelper\"";\n+import { settingsPath } from \""@shared/utils/routeHelpers\"";\n import { UserValidation } from \""@shared/validations\"";\n import userDestroyer from \""@server/commands/userDestroyer\"";\n import userInviter from \""@server/commands/userInviter\"";\n import userSuspender from \""@server/commands/userSuspender\"";\n import userUnsuspender from \""@server/commands/userUnsuspender\"";\n+import ConfirmUpdateEmail from \""@server/emails/templates/ConfirmUpdateEmail\"";\n import ConfirmUserDeleteEmail from \""@server/emails/templates/ConfirmUserDeleteEmail\"";\n import InviteEmail from \""@server/emails/templates/InviteEmail\"";\n import env from \""@server/env\"";\n@@ -23,6 +25,7 @@ import { presentUser, presentPolicies } from \""@server/presenters\"";\n import { APIContext } from \""@server/types\"";\n import { RateLimiterStrategy } from \""@server/utils/RateLimiter\"";\n import { safeEqual } from \""@server/utils/crypto\"";\n+import { getDetailsForEmailUpdateToken } from \""@server/utils/jwt\"";\n import pagination from \""../middlewares/pagination\"";\n import * as T from \""./schema\"";\n \n@@ -201,6 +204,108 @@ router.post(\n   }\n );\n \n+router.post(\n+  \""users.updateEmail\"",\n+  rateLimiter(RateLimiterStrategy.TenPerHour),\n+  auth(),\n+  validate(T.UsersUpdateEmailSchema),\n+  async (ctx: APIContext<T.UsersUpdateEmailReq>) => {\n+    if (!emailEnabled) {\n+      throw ValidationError(\""Email support is not setup for this instance\"");\n+    }\n+\n+    const { user: actor } = ctx.state.auth;\n+    const { id } = ctx.input.body;\n+    const { team } = actor;\n+    const user = id ? await User.findByPk(id) : actor;\n+    const email = ctx.input.body.email.trim().toLowerCase();\n+\n+    authorize(actor, \""update\"", user);\n+\n+    // Check if email domain is allowed\n+    if (!(await team.isDomainAllowed(email))) {\n+      throw ValidationError(\""The domain is not allowed for this workspace\"");\n+    }\n+\n+    // Check if email already exists in workspace\n+    if (await User.findByEmail(ctx, email)) {\n+      throw ValidationError(\""User with email already exists\"");\n+    }\n+\n+    await new ConfirmUpdateEmail({\n+      to: email,\n+      previous: user.email,\n+      code: user.getEmailUpdateToken(email),\n+      teamUrl: team.url,\n+    }).schedule();\n+\n+    ctx.body = {\n+      success: true,\n+    };\n+  }\n+);\n+\n+router.get(\n+  \""users.updateEmail\"",\n+  rateLimiter(RateLimiterStrategy.TenPerHour),\n+  auth(),\n+  transaction(),\n+  validate(T.UsersUpdateEmailConfirmSchema),\n+  async (ctx: APIContext<T.UsersUpdateEmailConfirmReq>) => {\n+    if (!emailEnabled) {\n+      throw ValidationError(\""Email support is not setup for this instance\"");\n+    }\n+\n+    const { transaction } = ctx.state;\n+    const { code, follow } = ctx.input.query;\n+\n+    // The link in the email does not include the follow query param, this\n+    // is to help prevent anti-virus, and email clients from pre-fetching the link\n+    // and spending the token before the user clicks on it. Instead we redirect\n+    // to the same URL with the follow query param added from the client side.\n+    if (!follow) {\n+      return ctx.redirectOnClient(ctx.request.href + \""&follow=true\"");\n+    }\n+    let user: User;\n+    let email: string;\n+\n+    try {\n+      const res = await getDetailsForEmailUpdateToken(code as string, {\n+        transaction,\n+        lock: transaction.LOCK.UPDATE,\n+      });\n+      user = res.user;\n+      email = res.email;\n+    } catch (err) {\n+      ctx.redirect(`/?notice=expired-token`);\n+      return;\n+    }\n+\n+    const { user: actor } = ctx.state.auth;\n+    authorize(actor, \""update\"", user);\n+\n+    // Check if email domain is allowed\n+    if (!(await actor.team.isDomainAllowed(email))) {\n+      throw ValidationError(\""The domain is not allowed for this workspace\"");\n+    }\n+\n+    // Check if email already exists in workspace\n+    if (await User.findByEmail(ctx, email)) {\n+      throw ValidationError(\""User with email already exists\"");\n+    }\n+\n+    user.email = email;\n+    await Event.createFromContext(ctx, {\n+      name: \""users.update\"",\n+      userId: user.id,\n+      changes: user.changeset,\n+    });\n+    await user.save({ transaction });\n+\n+    ctx.redirect(settingsPath());\n+  }\n+);\n+\n router.post(\n   \""users.update\"",\n   auth(),\n@@ -518,15 +623,17 @@ router.post(\n   rateLimiter(RateLimiterStrategy.FivePerHour),\n   auth(),\n   async (ctx: APIContext) => {\n+    if (!emailEnabled) {\n+      throw ValidationError(\""Email support is not setup for this instance\"");\n+    }\n+\n     const { user } = ctx.state.auth;\n     authorize(user, \""delete\"", user);\n \n-    if (emailEnabled) {\n-      await new ConfirmUserDeleteEmail({\n-        to: user.email,\n-        deleteConfirmationCode: user.deleteConfirmationCode,\n-      }).schedule();\n-    }\n+    await new ConfirmUserDeleteEmail({\n+      to: user.email,\n+      deleteConfirmationCode: user.deleteConfirmationCode,\n+    }).schedule();\n \n     ctx.body = {\n       success: true,\n\ndiff --git a/server/utils/jwt.ts b/server/utils/jwt.ts\nindex a24b1223b1f1..0e214a5d7645 100644\n--- a/server/utils/jwt.ts\n+++ b/server/utils/jwt.ts\n@@ -1,5 +1,6 @@\n import { subMinutes } from \""date-fns\"";\n import JWT from \""jsonwebtoken\"";\n+import { FindOptions } from \""sequelize\"";\n import { Team, User } from \""@server/models\"";\n import { AuthenticationError } from \""../errors\"";\n \n@@ -105,3 +106,35 @@ export async function getUserForEmailSigninToken(token: string): Promise<User> {\n \n   return user;\n }\n+\n+export async function getDetailsForEmailUpdateToken(\n+  token: string,\n+  options: FindOptions<User> = {}\n+): Promise<{ user: User; email: string }> {\n+  const payload = getJWTPayload(token);\n+\n+  if (payload.type !== \""email-update\"") {\n+    throw AuthenticationError(\""Invalid token\"");\n+  }\n+\n+  // check the token is within it's expiration time\n+  if (payload.createdAt) {\n+    if (new Date(payload.createdAt) < subMinutes(new Date(), 10)) {\n+      throw AuthenticationError(\""Expired token\"");\n+    }\n+  }\n+\n+  const email = payload.email;\n+  const user = await User.findByPk(payload.id, {\n+    rejectOnEmpty: true,\n+    ...options,\n+  });\n+\n+  try {\n+    JWT.verify(token, user.jwtSecret);\n+  } catch (err) {\n+    throw AuthenticationError(\""Invalid token\"");\n+  }\n+\n+  return { user, email };\n+}\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 6f416145ba2f..cde3ab797b76 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -402,6 +402,12 @@\n   \""Are you sure you want to suspend {{ userName }}? Suspended users will be prevented from logging in.\"": \""Are you sure you want to suspend {{ userName }}? Suspended users will be prevented from logging in.\"",\n   \""New name\"": \""New name\"",\n   \""Name can't be empty\"": \""Name can't be empty\"",\n+  \""Check your email to verify the new address.\"": \""Check your email to verify the new address.\"",\n+  \""The email will be changed once verified.\"": \""The email will be changed once verified.\"",\n+  \""You will receive an email to verify your new address. It must be unique in the workspace.\"": \""You will receive an email to verify your new address. It must be unique in the workspace.\"",\n+  \""A confirmation email will be sent to the new address before it is changed.\"": \""A confirmation email will be sent to the new address before it is changed.\"",\n+  \""New email\"": \""New email\"",\n+  \""Email can't be empty\"": \""Email can't be empty\"",\n   \""Your import completed\"": \""Your import completed\"",\n   \""Previous match\"": \""Previous match\"",\n   \""Next match\"": \""Next match\"",\n@@ -543,6 +549,7 @@\n   \""Headings you add to the document will appear here\"": \""Headings you add to the document will appear here\"",\n   \""Table of contents\"": \""Table of contents\"",\n   \""Change name\"": \""Change name\"",\n+  \""Change email\"": \""Change email\"",\n   \""Suspend user\"": \""Suspend user\"",\n   \""An error occurred while sending the invite\"": \""An error occurred while sending the invite\"",\n   \""User options\"": \""User options\"",\n@@ -958,8 +965,6 @@\n   \""Notifications saved\"": \""Notifications saved\"",\n   \""Unsubscription successful. Your notification settings were updated\"": \""Unsubscription successful. Your notification settings were updated\"",\n   \""Manage when and where you receive email notifications.\"": \""Manage when and where you receive email notifications.\"",\n-  \""Email address\"": \""Email address\"",\n-  \""Your email address should be updated in your SSO provider.\"": \""Your email address should be updated in your SSO provider.\"",\n   \""The email integration is currently disabled. Please set the associated environment variables and restart the server to enable notifications.\"": \""The email integration is currently disabled. Please set the associated environment variables and restart the server to enable notifications.\"",\n   \""Create personal API keys to authenticate with the API and programatically control\\n          your workspace's data. API keys have the same permissions as your user account.\\n          For more details see the <em>developer documentation</em>.\"": \""Create personal API keys to authenticate with the API and programatically control\\n          your workspace's data. API keys have the same permissions as your user account.\\n          For more details see the <em>developer documentation</em>.\"",\n   \""Personal keys\"": \""Personal keys\"",\n@@ -986,6 +991,7 @@\n   \""Photo\"": \""Photo\"",\n   \""Choose a photo or image to represent yourself.\"": \""Choose a photo or image to represent yourself.\"",\n   \""This could be your real name, or a nickname \u2014 however you\u2019d like people to refer to you.\"": \""This could be your real name, or a nickname \u2014 however you\u2019d like people to refer to you.\"",\n+  \""Email address\"": \""Email address\"",\n   \""Are you sure you want to require invites?\"": \""Are you sure you want to require invites?\"",\n   \""New users will first need to be invited to create an account. <em>Default role</em> and <em>Allowed domains</em> will no longer apply.\"": \""New users will first need to be invited to create an account. <em>Default role</em> and <em>Allowed domains</em> will no longer apply.\"",\n   \""Settings that impact the access, security, and content of your workspace.\"": \""Settings that impact the access, security, and content of your workspace.\"",\n\ndiff --git a/shared/utils/routeHelpers.ts b/shared/utils/routeHelpers.ts\nindex e8d19aac83c7..090e3e909a74 100644\n--- a/shared/utils/routeHelpers.ts\n+++ b/shared/utils/routeHelpers.ts\n@@ -2,6 +2,10 @@ export function signin(service = \""slack\""): string {\n   return `/auth/${service}`;\n }\n \n+export function settingsPath(section?: string): string {\n+  return \""/settings\"" + (section ? `/${section}` : \""\"");\n+}\n+\n export function integrationSettingsPath(id: string): string {\n   return `/settings/integrations/${id}`;\n }\n"", ""test_patch"": ""diff --git a/server/commands/userProvisioner.test.ts b/server/commands/userProvisioner.test.ts\nindex f4ac0920be49..88bc6259f8ae 100644\n--- a/server/commands/userProvisioner.test.ts\n+++ b/server/commands/userProvisioner.test.ts\n@@ -437,7 +437,7 @@ describe(\""userProvisioner\"", () => {\n     }\n \n     expect(error && error.toString()).toContain(\n-      \""The domain is not allowed for this team\""\n+      \""The domain is not allowed for this workspace\""\n     );\n   });\n });\n\ndiff --git a/server/routes/api/users/__snapshots__/users.test.ts.snap b/server/routes/api/users/__snapshots__/users.test.ts.snap\nindex 3ab141b7025a..2e7f70c5f0c5 100644\n--- a/server/routes/api/users/__snapshots__/users.test.ts.snap\n+++ b/server/routes/api/users/__snapshots__/users.test.ts.snap\n@@ -71,3 +71,30 @@ exports[`#users.update should require authentication 1`] = `\n   \""status\"": 401,\n }\n `;\n+\n+exports[`#users.updateEmail post should fail if email not in allowed domains 1`] = `\n+{\n+  \""error\"": \""validation_error\"",\n+  \""message\"": \""The domain is not allowed for this workspace\"",\n+  \""ok\"": false,\n+  \""status\"": 400,\n+}\n+`;\n+\n+exports[`#users.updateEmail post should fail if email not unique in workspace 1`] = `\n+{\n+  \""error\"": \""validation_error\"",\n+  \""message\"": \""User with email already exists\"",\n+  \""ok\"": false,\n+  \""status\"": 400,\n+}\n+`;\n+\n+exports[`#users.updateEmail post should require authentication 1`] = `\n+{\n+  \""error\"": \""authentication_required\"",\n+  \""message\"": \""Authentication required\"",\n+  \""ok\"": false,\n+  \""status\"": 401,\n+}\n+`;\n\ndiff --git a/server/routes/api/users/users.test.ts b/server/routes/api/users/users.test.ts\nindex c39e83acb745..8387429619d6 100644\n--- a/server/routes/api/users/users.test.ts\n+++ b/server/routes/api/users/users.test.ts\n@@ -1,4 +1,7 @@\n+import { faker } from \""@faker-js/faker\"";\n import { TeamPreference, UserRole } from \""@shared/types\"";\n+import ConfirmUpdateEmail from \""@server/emails/templates/ConfirmUpdateEmail\"";\n+import { TeamDomain } from \""@server/models\"";\n import {\n   buildTeam,\n   buildAdmin,\n@@ -723,6 +726,85 @@ describe(\""#users.update\"", () => {\n   });\n });\n \n+describe(\""#users.updateEmail\"", () => {\n+  describe(\""post\"", () => {\n+    it(\""should trigger verification email\"", async () => {\n+      const spy = jest.spyOn(ConfirmUpdateEmail.prototype, \""schedule\"");\n+      const user = await buildUser();\n+      const res = await server.post(\""/api/users.updateEmail\"", {\n+        body: {\n+          token: user.getJwtToken(),\n+          email: faker.internet.email(),\n+        },\n+      });\n+      const body = await res.json();\n+\n+      expect(res.status).toEqual(200);\n+      expect(body.success).toEqual(true);\n+      expect(spy).toHaveBeenCalled();\n+      spy.mockRestore();\n+    });\n+\n+    it(\""should fail if email not in allowed domains\"", async () => {\n+      const user = await buildUser();\n+\n+      await TeamDomain.create({\n+        teamId: user.teamId,\n+        name: \""example.com\"",\n+        createdById: user.id,\n+      });\n+\n+      const res = await server.post(\""/api/users.updateEmail\"", {\n+        body: {\n+          token: user.getJwtToken(),\n+          email: faker.internet.email(),\n+        },\n+      });\n+      const body = await res.json();\n+      expect(res.status).toEqual(400);\n+      expect(body).toMatchSnapshot();\n+    });\n+\n+    it(\""should fail if email not unique in workspace\"", async () => {\n+      const user = await buildUser();\n+      const email = faker.internet.email().toLowerCase();\n+      await buildUser({ teamId: user.teamId, email });\n+\n+      const res = await server.post(\""/api/users.updateEmail\"", {\n+        body: {\n+          token: user.getJwtToken(),\n+          email,\n+        },\n+      });\n+      const body = await res.json();\n+      expect(res.status).toEqual(400);\n+      expect(body).toMatchSnapshot();\n+    });\n+\n+    it(\""should require authentication\"", async () => {\n+      const res = await server.post(\""/api/users.updateEmail\"");\n+      const body = await res.json();\n+      expect(res.status).toEqual(401);\n+      expect(body).toMatchSnapshot();\n+    });\n+  });\n+\n+  describe(\""get\"", () => {\n+    it(\""should update email\"", async () => {\n+      const user = await buildUser();\n+      const email = faker.internet.email();\n+      await server.get(\n+        `/api/users.updateEmail?token=${user.getJwtToken()}&code=${user.getEmailUpdateToken(\n+          email\n+        )}&follow=true`\n+      );\n+\n+      await user.reload();\n+      expect(user.email).toEqual(email);\n+    });\n+  });\n+});\n+\n describe(\""#users.update_role\"", () => {\n   it(\""should promote\"", async () => {\n     const team = await buildTeam();\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-8102"", ""pr_id"": 8102, ""issue_id"": 8090, ""repo"": ""outline/outline"", ""problem_statement"": ""Document Title bug when bulk importing from .docx\n### Discussed in https://github.com/outline/outline/discussions/8089\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **adriansoewono** December  9, 2024</sup>\r\nHi, it seems to me the Document Title is buggy when I tried to bulk import from .docx files which has a dot character in the filename.\r\n\r\nso to reproduce:\r\n\r\n1. all my current document filename structure has a number+dot prefix (so I can set the document order easily).\r\nI have to use .docx files because I need to import images easily.\r\n![Screenshot 1](https://github.com/user-attachments/assets/b26f3304-6208-49da-8a6a-8843ddd881ac)\r\n\r\n2. I bulk import it using files drag and drop\r\n![Screenshot 2](https://github.com/user-attachments/assets/59ce8bbb-345c-4319-b16f-db26c04b29bc)\r\n\r\n3. then the document title in the Outline shows like this, there's a backslash character before the dot.\r\n![Screenshot 3](https://github.com/user-attachments/assets/85a87f53-f977-4c3d-b2ed-57d5b3c37fb2)\r\n\r\napparently this happens only in .docx import,\r\nI have tried to import .md files, the document title works without any backslash problem for the dot character.\r\n\r\nnow it seems like a simple bug,\r\nbut since all my documents are using number and dot prefix in the filename,\r\nthis problem makes me have to rename all my documents in the Outline after importing, which is really a tremendous task.\r\n\r\nit will be great if Outline can fix the backslash character bug.</div>"", ""issue_word_count"": 235, ""test_files_count"": 1, ""non_test_files_count"": 4, ""pr_changed_files"": [""server/commands/documentImporter.ts"", ""server/utils/turndown/index.ts"", ""shared/utils/markdown.ts"", ""shared/utils/parseTitle.test.ts"", ""shared/utils/parseTitle.ts""], ""pr_changed_test_files"": [""shared/utils/parseTitle.test.ts""], ""base_commit"": ""6dfe7d707ae6cb48addd7227bc18bb4985511322"", ""head_commit"": ""1157597051cfbf8bff37affedea59a9fd1726af7"", ""repo_url"": ""https://github.com/outline/outline/pull/8102"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/8102"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-12T13:15:45.000Z"", ""patch"": ""diff --git a/server/commands/documentImporter.ts b/server/commands/documentImporter.ts\nindex 432d343968bb..d8d1d3138e08 100644\n--- a/server/commands/documentImporter.ts\n+++ b/server/commands/documentImporter.ts\n@@ -1,5 +1,4 @@\n import emojiRegex from \""emoji-regex\"";\n-import escapeRegExp from \""lodash/escapeRegExp\"";\n import truncate from \""lodash/truncate\"";\n import parseTitle from \""@shared/utils/parseTitle\"";\n import { DocumentValidation } from \""@shared/validations\"";\n@@ -51,10 +50,7 @@ async function documentImporter({\n   if (text.trim().startsWith(\""# \"")) {\n     const result = parseTitle(text);\n     title = result.title;\n-    text = text\n-      .trim()\n-      .replace(new RegExp(`#\\\\s+${escapeRegExp(title)}`), \""\"")\n-      .trimStart();\n+    text = text.replace(/^.+(\\n|$)/, \""\"");\n   }\n \n   // Replace any <br> generated by the turndown plugin with escaped newlines\n\ndiff --git a/server/utils/turndown/index.ts b/server/utils/turndown/index.ts\nindex a3ca5a86276c..87362b61301b 100644\n--- a/server/utils/turndown/index.ts\n+++ b/server/utils/turndown/index.ts\n@@ -1,5 +1,6 @@\n import { taskListItems, strikethrough } from \""@joplin/turndown-plugin-gfm\"";\n import TurndownService from \""turndown\"";\n+import { escape } from \""@shared/utils/markdown\"";\n import breaks from \""./breaks\"";\n import emptyLists from \""./emptyLists\"";\n import emptyParagraph from \""./emptyParagraph\"";\n@@ -41,36 +42,6 @@ const service = new TurndownService({\n   .use(breaks)\n   .use(emptyLists);\n \n-const escapes: [RegExp, string][] = [\n-  [/\\\\/g, \""\\\\\\\\\""],\n-  [/\\*/g, \""\\\\*\""],\n-  [/^-/g, \""\\\\-\""],\n-  [/^\\+ /g, \""\\\\+ \""],\n-  [/^(=+)/g, \""\\\\$1\""],\n-  [/^(#{1,6}) /g, \""\\\\$1 \""],\n-  [/`/g, \""\\\\`\""],\n-  [/^~~~/g, \""\\\\~~~\""],\n-  [/\\[/g, \""\\\\[\""],\n-  [/\\]/g, \""\\\\]\""],\n-  [/\\(/g, \""\\\\(\""], // OLN-91\n-  [/\\)/g, \""\\\\)\""], // OLN-91\n-  [/^>/g, \""\\\\>\""],\n-  [/_/g, \""\\\\_\""],\n-  [/^(\\d+)\\. /g, \""$1\\\\. \""],\n-  [/\\$/g, \""\\\\$\""],\n-];\n-\n-/**\n- * Overrides the Markdown escaping, as documented here:\n- * https://github.com/mixmark-io/turndown/blob/4499b5c313d30a3189a58fdd74fc4ed4b2428afd/README.md#overriding-turndownserviceprototypeescape\n- *\n- * @param text The string to escape\n- * @returns A string with Markdown syntax escaped\n- */\n-service.escape = function (text) {\n-  return escapes.reduce(function (accumulator, escape) {\n-    return accumulator.replace(escape[0], escape[1]);\n-  }, text);\n-};\n+service.escape = escape;\n \n export default service;\n\ndiff --git a/shared/utils/markdown.ts b/shared/utils/markdown.ts\nnew file mode 100644\nindex 000000000000..9565fdfaa052\n--- /dev/null\n+++ b/shared/utils/markdown.ts\n@@ -0,0 +1,40 @@\n+const escapes: [RegExp, string][] = [\n+  [/\\\\/g, \""\\\\\\\\\""],\n+  [/\\*/g, \""\\\\*\""],\n+  [/^-/g, \""\\\\-\""],\n+  [/^\\+ /g, \""\\\\+ \""],\n+  [/^(=+)/g, \""\\\\$1\""],\n+  [/^(#{1,6}) /g, \""\\\\$1 \""],\n+  [/`/g, \""\\\\`\""],\n+  [/^~~~/g, \""\\\\~~~\""],\n+  [/\\[/g, \""\\\\[\""],\n+  [/\\]/g, \""\\\\]\""],\n+  [/\\(/g, \""\\\\(\""], // OLN-91\n+  [/\\)/g, \""\\\\)\""], // OLN-91\n+  [/^>/g, \""\\\\>\""],\n+  [/_/g, \""\\\\_\""],\n+  [/^(\\d+)\\. /g, \""$1\\\\. \""],\n+  [/\\$/g, \""\\\\$\""],\n+];\n+\n+/**\n+ * Escape markdown characters in a string\n+ *\n+ * @param text - The text to escape\n+ * @returns The escaped text\n+ */\n+export const escape = function (text: string) {\n+  return escapes.reduce(function (accumulator, esc) {\n+    return accumulator.replace(esc[0], esc[1]);\n+  }, text);\n+};\n+\n+/**\n+ * Unescape markdown characters in a string\n+ *\n+ * @param text - The text to unescape\n+ * @returns The unescaped text\n+ */\n+export const unescape = function (text: string) {\n+  return text.replace(/\\\\([\\\\*+-\\d.])/g, \""$1\"");\n+};\n\ndiff --git a/shared/utils/parseTitle.ts b/shared/utils/parseTitle.ts\nindex 23ecb556b663..759345bb13fa 100644\n--- a/shared/utils/parseTitle.ts\n+++ b/shared/utils/parseTitle.ts\n@@ -1,11 +1,12 @@\n import emojiRegex from \""emoji-regex\"";\n+import { unescape } from \""./markdown\"";\n \n export default function parseTitle(text = \""\"") {\n   const regex = emojiRegex();\n \n   // find and extract title\n   const firstLine = text.trim().split(/\\r?\\n/)[0];\n-  const title = firstLine.replace(/^#/, \""\"").trim();\n+  const title = unescape(firstLine.replace(/^#/, \""\"").trim());\n \n   // find and extract first emoji\n   const matches = regex.exec(title);\n"", ""test_patch"": ""diff --git a/shared/utils/parseTitle.test.ts b/shared/utils/parseTitle.test.ts\nindex c0af2ba033de..77dbfb41fb8e 100644\n--- a/shared/utils/parseTitle.test.ts\n+++ b/shared/utils/parseTitle.test.ts\n@@ -3,14 +3,23 @@ import parseTitle from \""./parseTitle\"";\n it(\""should trim the title\"", () => {\n   expect(parseTitle(`#    Lots of space     `).title).toBe(\""Lots of space\"");\n });\n+\n+it(\""should remove escaped characters\"", () => {\n+  expect(parseTitle(`# 1\\\\. Title`).title).toBe(\""1. Title\"");\n+  expect(parseTitle(`# 12\\\\. Title`).title).toBe(\""12. Title\"");\n+  expect(parseTitle(`# 1\\\\.2 Title`).title).toBe(\""1.2 Title\"");\n+});\n+\n it(\""should extract first title\"", () => {\n   expect(parseTitle(`# Title one\\n# Title two`).title).toBe(\""Title one\"");\n });\n+\n it(\""should parse emoji if first character\"", () => {\n   const parsed = parseTitle(`# \ud83d\ude00 Title`);\n   expect(parsed.title).toBe(\""\ud83d\ude00 Title\"");\n   expect(parsed.emoji).toBe(\""\ud83d\ude00\"");\n });\n+\n it(\""should not parse emoji if not first character\"", () => {\n   const parsed = parseTitle(`# Title \ud83c\udf08`);\n   expect(parsed.title).toBe(\""Title \ud83c\udf08\"");\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-7921"", ""pr_id"": 7921, ""issue_id"": 7920, ""repo"": ""outline/outline"", ""problem_statement"": ""Move event writing to model layer\n`events` should be written automatically based on mutations in the model layer. To achieve this the request context will be passed down to model mutations. Translation must happen on a model by model basis.\n\nCommands should be removed where they only exist to group a mutation and it's associated event write.\n\n### TODO\n- [x] ApiKey\n- [x] Attachment\n- [x] Comment\n- [x] FileOperation\n- [x] Group\n- [x] GroupMembership\n- [x] GroupUser\n- [x] Pin\n- [x] Reaction\n- [x] Share\n- [x] Star\n- [x] UserMembership\n- [x] Subscription\n- [x] WebhookSubscription\n- [x] Notification\n- [ ] Team\n- [ ] Revision\n- [ ] Document\n- [ ] Collection\n- [ ] TeamDomain\n- [ ] User"", ""issue_word_count"": 89, ""test_files_count"": 4, ""non_test_files_count"": 6, ""pr_changed_files"": [""server/commands/starCreator.test.ts"", ""server/commands/starCreator.ts"", ""server/commands/starDestroyer.test.ts"", ""server/commands/starDestroyer.ts"", ""server/commands/starUpdater.test.ts"", ""server/commands/starUpdater.ts"", ""server/models/Star.ts"", ""server/models/base/Model.ts"", ""server/routes/api/stars/stars.ts"", ""server/test/support.ts""], ""pr_changed_test_files"": [""server/commands/starCreator.test.ts"", ""server/commands/starDestroyer.test.ts"", ""server/commands/starUpdater.test.ts"", ""server/test/support.ts""], ""base_commit"": ""633e547d3e6b91aa0a6f4136653181ef7a9652b6"", ""head_commit"": ""919b83fa2a4ca497299308f5cfaf22ae8b102f98"", ""repo_url"": ""https://github.com/outline/outline/pull/7921"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/7921"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-11T03:26:27.000Z"", ""patch"": ""diff --git a/server/commands/starCreator.ts b/server/commands/starCreator.ts\nindex cdf960b614d2..e2bc7abd79da 100644\n--- a/server/commands/starCreator.ts\n+++ b/server/commands/starCreator.ts\n@@ -1,6 +1,7 @@\n import fractionalIndex from \""fractional-index\"";\n-import { Sequelize, Transaction, WhereOptions } from \""sequelize\"";\n-import { Star, User, Event } from \""@server/models\"";\n+import { Sequelize, WhereOptions } from \""sequelize\"";\n+import { Star, User } from \""@server/models\"";\n+import { APIContext } from \""@server/types\"";\n \n type Props = {\n   /** The user creating the star */\n@@ -11,9 +12,8 @@ type Props = {\n   collectionId?: string;\n   /** The sorted index for the star in the sidebar If no index is provided then it will be at the end */\n   index?: string;\n-  /** The IP address of the user creating the star */\n-  ip: string;\n-  transaction: Transaction;\n+  /** The request context */\n+  ctx: APIContext;\n };\n \n /**\n@@ -27,8 +27,7 @@ export default async function starCreator({\n   user,\n   documentId,\n   collectionId,\n-  ip,\n-  transaction,\n+  ctx,\n   ...rest\n }: Props): Promise<Star> {\n   let { index } = rest;\n@@ -47,14 +46,14 @@ export default async function starCreator({\n         Sequelize.literal('\""star\"".\""index\"" collate \""C\""'),\n         [\""updatedAt\"", \""DESC\""],\n       ],\n-      transaction,\n+      transaction: ctx.state.transaction,\n     });\n \n     // create a star at the beginning of the list\n     index = fractionalIndex(null, stars.length ? stars[0].index : null);\n   }\n \n-  const [star, isCreated] = await Star.findOrCreate({\n+  const [star] = await Star.findOrCreateWithCtx(ctx, {\n     where: documentId\n       ? {\n           userId: user.id,\n@@ -67,24 +66,7 @@ export default async function starCreator({\n     defaults: {\n       index,\n     },\n-    transaction,\n   });\n \n-  if (isCreated) {\n-    await Event.create(\n-      {\n-        name: \""stars.create\"",\n-        teamId: user.teamId,\n-        modelId: star.id,\n-        userId: user.id,\n-        actorId: user.id,\n-        documentId,\n-        collectionId,\n-        ip,\n-      },\n-      { transaction }\n-    );\n-  }\n-\n   return star;\n }\n\ndiff --git a/server/commands/starDestroyer.ts b/server/commands/starDestroyer.ts\ndeleted file mode 100644\nindex ce231e11f702..000000000000\n--- a/server/commands/starDestroyer.ts\n+++ /dev/null\n@@ -1,43 +0,0 @@\n-import { Transaction } from \""sequelize\"";\n-import { Event, Star, User } from \""@server/models\"";\n-\n-type Props = {\n-  /** The user destroying the star */\n-  user: User;\n-  /** The star to destroy */\n-  star: Star;\n-  /** The IP address of the user creating the star */\n-  ip: string;\n-  /** Optional existing transaction */\n-  transaction?: Transaction;\n-};\n-\n-/**\n- * This command destroys a document star. This just removes the star itself and\n- * does not touch the document\n- *\n- * @param Props The properties of the star to destroy\n- * @returns void\n- */\n-export default async function starDestroyer({\n-  user,\n-  star,\n-  ip,\n-  transaction,\n-}: Props): Promise<Star> {\n-  await star.destroy({ transaction });\n-\n-  await Event.create(\n-    {\n-      name: \""stars.delete\"",\n-      modelId: star.id,\n-      teamId: user.teamId,\n-      actorId: user.id,\n-      userId: star.userId,\n-      documentId: star.documentId,\n-      ip,\n-    },\n-    { transaction }\n-  );\n-  return star;\n-}\n\ndiff --git a/server/commands/starUpdater.ts b/server/commands/starUpdater.ts\ndeleted file mode 100644\nindex 3277dc5e5dd1..000000000000\n--- a/server/commands/starUpdater.ts\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-import { Transaction } from \""sequelize\"";\n-import { Event, Star, User } from \""@server/models\"";\n-\n-type Props = {\n-  /** The user updating the star */\n-  user: User;\n-  /** The existing star */\n-  star: Star;\n-  /** The index to star the document at */\n-  index: string;\n-  /** The IP address of the user creating the star */\n-  ip: string;\n-  /** Optional existing transaction */\n-  transaction?: Transaction;\n-};\n-\n-/**\n- * This command updates a \""starred\"" document. A star can only be moved to a new\n- * index (reordered) once created.\n- *\n- * @param Props The properties of the star to update\n- * @returns Star The updated star\n- */\n-export default async function starUpdater({\n-  user,\n-  star,\n-  index,\n-  ip,\n-  transaction,\n-}: Props): Promise<Star> {\n-  star.index = index;\n-  await star.save({ transaction });\n-\n-  await Event.create(\n-    {\n-      name: \""stars.update\"",\n-      modelId: star.id,\n-      userId: star.userId,\n-      teamId: user.teamId,\n-      actorId: user.id,\n-      documentId: star.documentId,\n-      ip,\n-    },\n-    { transaction }\n-  );\n-  return star;\n-}\n\ndiff --git a/server/models/Star.ts b/server/models/Star.ts\nindex 2f71eb1bf818..585d3ca96cba 100644\n--- a/server/models/Star.ts\n+++ b/server/models/Star.ts\n@@ -19,6 +19,8 @@ class Star extends IdModel<\n   InferAttributes<Star>,\n   Partial<InferCreationAttributes<Star>>\n > {\n+  static eventNamespace = \""stars\"";\n+\n   @Length({\n     max: 256,\n     msg: `index must be 256 characters or less`,\n\ndiff --git a/server/models/base/Model.ts b/server/models/base/Model.ts\nindex 647fce78751a..1f8a6f42638f 100644\n--- a/server/models/base/Model.ts\n+++ b/server/models/base/Model.ts\n@@ -4,10 +4,12 @@ import isArray from \""lodash/isArray\"";\n import isObject from \""lodash/isObject\"";\n import pick from \""lodash/pick\"";\n import {\n+  Attributes,\n   CreateOptions,\n   CreationAttributes,\n   DataTypes,\n   FindOptions,\n+  FindOrCreateOptions,\n   InstanceDestroyOptions,\n   InstanceUpdateOptions,\n   ModelStatic,\n@@ -18,6 +20,7 @@ import {\n   AfterCreate,\n   AfterDestroy,\n   AfterUpdate,\n+  AfterUpsert,\n   BeforeCreate,\n   Model as SequelizeModel,\n } from \""sequelize-typescript\"";\n@@ -47,8 +50,9 @@ class Model<\n    * This is the same as calling `set` and then calling `save`.\n    */\n   public updateWithCtx(ctx: APIContext, keys: Partial<TModelAttributes>) {\n+    this.set(keys);\n     this.cacheChangeset();\n-    return this.update(keys, ctx.context as InstanceUpdateOptions);\n+    return this.save(ctx.context as SaveOptions);\n   }\n \n   /**\n@@ -59,6 +63,21 @@ class Model<\n     return this.destroy(ctx.context as InstanceDestroyOptions);\n   }\n \n+  /**\n+   * Find a row that matches the query, or build and save the row if none is found\n+   * The successful result of the promise will be (instance, created) - Make sure to use `.then(([...]))`\n+   */\n+  public static findOrCreateWithCtx<M extends Model>(\n+    this: ModelStatic<M>,\n+    ctx: APIContext,\n+    options: FindOrCreateOptions<Attributes<M>, CreationAttributes<M>>\n+  ) {\n+    return this.findOrCreate({\n+      ...options,\n+      ...ctx.context,\n+    });\n+  }\n+\n   /**\n    * Builds a new model instance and calls save on it.\n    */\n@@ -83,6 +102,14 @@ class Model<\n     await this.insertEvent(\""create\"", model, context);\n   }\n \n+  @AfterUpsert\n+  static async afterUpsertEvent<T extends Model>(\n+    model: T,\n+    context: APIContext[\""context\""]\n+  ) {\n+    await this.insertEvent(\""create\"", model, context);\n+  }\n+\n   @AfterUpdate\n   static async afterUpdateEvent<T extends Model>(\n     model: T,\n@@ -267,7 +294,14 @@ class Model<\n    * Cache the current changeset for later use.\n    */\n   protected cacheChangeset() {\n-    this.previousChangeset = this.changeset;\n+    const previous = this.changeset;\n+\n+    if (\n+      Object.keys(previous.attributes).length > 0 ||\n+      Object.keys(previous.previous).length > 0\n+    ) {\n+      this.previousChangeset = previous;\n+    }\n   }\n \n   /**\n\ndiff --git a/server/routes/api/stars/stars.ts b/server/routes/api/stars/stars.ts\nindex 82d32c665ec9..6f80056c7b96 100644\n--- a/server/routes/api/stars/stars.ts\n+++ b/server/routes/api/stars/stars.ts\n@@ -1,8 +1,6 @@\n import Router from \""koa-router\"";\n import { Sequelize } from \""sequelize\"";\n import starCreator from \""@server/commands/starCreator\"";\n-import starDestroyer from \""@server/commands/starDestroyer\"";\n-import starUpdater from \""@server/commands/starUpdater\"";\n import auth from \""@server/middlewares/authentication\"";\n import { transaction } from \""@server/middlewares/transaction\"";\n import validate from \""@server/middlewares/validate\"";\n@@ -46,12 +44,11 @@ router.post(\n     }\n \n     const star = await starCreator({\n+      ctx,\n       user,\n       documentId,\n       collectionId,\n-      ip: ctx.request.ip,\n       index,\n-      transaction,\n     });\n \n     ctx.body = {\n@@ -130,19 +127,13 @@ router.post(\n     const { user } = ctx.state.auth;\n     const { transaction } = ctx.state;\n \n-    let star = await Star.findByPk(id, {\n+    const star = await Star.findByPk(id, {\n       transaction,\n       lock: transaction.LOCK.UPDATE,\n     });\n     authorize(user, \""update\"", star);\n \n-    star = await starUpdater({\n-      user,\n-      star,\n-      ip: ctx.request.ip,\n-      index,\n-      transaction,\n-    });\n+    await star.updateWithCtx(ctx, { index });\n \n     ctx.body = {\n       data: presentStar(star),\n@@ -167,7 +158,7 @@ router.post(\n     });\n     authorize(user, \""delete\"", star);\n \n-    await starDestroyer({ user, star, ip: ctx.request.ip, transaction });\n+    await star.destroyWithCtx(ctx);\n \n     ctx.body = {\n       success: true,\n"", ""test_patch"": ""diff --git a/server/commands/starCreator.test.ts b/server/commands/starCreator.test.ts\nindex f5917f10f1db..31b34f8fdc30 100644\n--- a/server/commands/starCreator.test.ts\n+++ b/server/commands/starCreator.test.ts\n@@ -1,24 +1,21 @@\n import { Star, Event } from \""@server/models\"";\n-import { sequelize } from \""@server/storage/database\"";\n import { buildDocument, buildUser } from \""@server/test/factories\"";\n+import { withAPIContext } from \""@server/test/support\"";\n import starCreator from \""./starCreator\"";\n \n describe(\""starCreator\"", () => {\n-  const ip = \""127.0.0.1\"";\n-\n-  it(\""should create star\"", async () => {\n+  it(\""should create star for document\"", async () => {\n     const user = await buildUser();\n     const document = await buildDocument({\n       userId: user.id,\n       teamId: user.teamId,\n     });\n \n-    const star = await sequelize.transaction(async (transaction) =>\n+    const star = await withAPIContext(user, (ctx) =>\n       starCreator({\n+        ctx,\n         documentId: document.id,\n         user,\n-        ip,\n-        transaction,\n       })\n     );\n \n@@ -45,12 +42,11 @@ describe(\""starCreator\"", () => {\n       index: \""P\"",\n     });\n \n-    const star = await sequelize.transaction(async (transaction) =>\n+    const star = await withAPIContext(user, (ctx) =>\n       starCreator({\n+        ctx,\n         documentId: document.id,\n         user,\n-        ip,\n-        transaction,\n       })\n     );\n \n\ndiff --git a/server/commands/starDestroyer.test.ts b/server/commands/starDestroyer.test.ts\ndeleted file mode 100644\nindex 1ff9ded95de9..000000000000\n--- a/server/commands/starDestroyer.test.ts\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-import { Event, Star } from \""@server/models\"";\n-import { buildDocument, buildUser } from \""@server/test/factories\"";\n-import starDestroyer from \""./starDestroyer\"";\n-\n-describe(\""starDestroyer\"", () => {\n-  const ip = \""127.0.0.1\"";\n-\n-  it(\""should destroy existing star\"", async () => {\n-    const user = await buildUser();\n-    const document = await buildDocument({\n-      userId: user.id,\n-      teamId: user.teamId,\n-    });\n-\n-    const star = await Star.create({\n-      documentId: document.id,\n-      userId: user.id,\n-      index: \""P\"",\n-    });\n-\n-    await starDestroyer({\n-      star,\n-      user,\n-      ip,\n-    });\n-\n-    const count = await Star.count({\n-      where: {\n-        userId: user.id,\n-      },\n-    });\n-    expect(count).toEqual(0);\n-\n-    const event = await Event.findLatest({\n-      teamId: user.teamId,\n-    });\n-    expect(event!.name).toEqual(\""stars.delete\"");\n-    expect(event!.modelId).toEqual(star.id);\n-  });\n-});\n\ndiff --git a/server/commands/starUpdater.test.ts b/server/commands/starUpdater.test.ts\ndeleted file mode 100644\nindex 08db69d1fb1f..000000000000\n--- a/server/commands/starUpdater.test.ts\n+++ /dev/null\n@@ -1,37 +0,0 @@\n-import { Event, Star } from \""@server/models\"";\n-import { buildDocument, buildUser } from \""@server/test/factories\"";\n-import starUpdater from \""./starUpdater\"";\n-\n-describe(\""starUpdater\"", () => {\n-  const ip = \""127.0.0.1\"";\n-\n-  it(\""should update (move) existing star\"", async () => {\n-    const user = await buildUser();\n-    const document = await buildDocument({\n-      userId: user.id,\n-      teamId: user.teamId,\n-    });\n-\n-    let star = await Star.create({\n-      documentId: document.id,\n-      userId: user.id,\n-      index: \""P\"",\n-    });\n-\n-    star = await starUpdater({\n-      star,\n-      index: \""h\"",\n-      user,\n-      ip,\n-    });\n-\n-    const event = await Event.findLatest({\n-      teamId: user.teamId,\n-    });\n-    expect(star.documentId).toEqual(document.id);\n-    expect(star.userId).toEqual(user.id);\n-    expect(star.index).toEqual(\""h\"");\n-    expect(event!.name).toEqual(\""stars.update\"");\n-    expect(event!.modelId).toEqual(star.id);\n-  });\n-});\n\ndiff --git a/server/test/support.ts b/server/test/support.ts\nindex c2866ef827bc..1d4c504ea7f3 100644\n--- a/server/test/support.ts\n+++ b/server/test/support.ts\n@@ -1,6 +1,7 @@\n import { faker } from \""@faker-js/faker\"";\n import { Transaction } from \""sequelize\"";\n import sharedEnv from \""@shared/env\"";\n+import { createContext } from \""@server/context\"";\n import env from \""@server/env\"";\n import { User } from \""@server/models\"";\n import onerror from \""@server/onerror\"";\n@@ -45,6 +46,7 @@ export function withAPIContext<T>(\n       transaction,\n     };\n     return fn({\n+      ...createContext(user, transaction),\n       state,\n       request: {\n         ip: faker.internet.ip(),\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-7902"", ""pr_id"": 7902, ""issue_id"": 7784, ""repo"": ""outline/outline"", ""problem_statement"": ""Store timezone on user model\nLets start storing a `timezone` column on the user model, it can be updated automatically from the client without the need for an additional preference. This will be useful for showing other workspace members availability, adjusting relative times, and fine tuning notifications. "", ""issue_word_count"": 42, ""test_files_count"": 2, ""non_test_files_count"": 8, ""pr_changed_files"": [""app/models/User.ts"", ""app/stores/AuthStore.ts"", ""server/migrations/20241105203523-add-user-timezone.js"", ""server/models/User.ts"", ""server/presenters/__snapshots__/user.test.ts.snap"", ""server/presenters/user.ts"", ""server/routes/api/users/schema.ts"", ""server/routes/api/users/users.test.ts"", ""server/routes/api/users/users.ts"", ""server/utils/zod.ts""], ""pr_changed_test_files"": [""server/presenters/__snapshots__/user.test.ts.snap"", ""server/routes/api/users/users.test.ts""], ""base_commit"": ""fec91fb210ab80f086338471bb4b48578b239192"", ""head_commit"": ""4ab74c5002a49dc5202c9370aeb6101a034fade4"", ""repo_url"": ""https://github.com/outline/outline/pull/7902"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/7902"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-07T02:06:19.000Z"", ""patch"": ""diff --git a/app/models/User.ts b/app/models/User.ts\nindex 461b10651cca..0b46d92d9631 100644\n--- a/app/models/User.ts\n+++ b/app/models/User.ts\n@@ -50,6 +50,10 @@ class User extends ParanoidModel {\n   @observable\n   notificationSettings: NotificationSettings;\n \n+  @Field\n+  @observable\n+  timezone?: string;\n+\n   @observable\n   email: string;\n \n\ndiff --git a/app/stores/AuthStore.ts b/app/stores/AuthStore.ts\nindex 52b03f6814c8..742d12b669c5 100644\n--- a/app/stores/AuthStore.ts\n+++ b/app/stores/AuthStore.ts\n@@ -225,6 +225,12 @@ export default class AuthStore extends Store<Team> {\n           });\n         }\n \n+        const currTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n+        if (data.user.timezone !== currTimezone) {\n+          const user = this.rootStore.users.get(data.user.id)!;\n+          void user.save({ timezone: currTimezone });\n+        }\n+\n         // Redirect to the correct custom domain or team subdomain if needed\n         // Occurs when the (sub)domain is changed in admin and the user hits an old url\n         const { hostname, pathname } = window.location;\n\ndiff --git a/server/migrations/20241105203523-add-user-timezone.js b/server/migrations/20241105203523-add-user-timezone.js\nnew file mode 100644\nindex 000000000000..ba1e7b767d73\n--- /dev/null\n+++ b/server/migrations/20241105203523-add-user-timezone.js\n@@ -0,0 +1,15 @@\n+\""use strict\"";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.addColumn(\""users\"", \""timezone\"", {\n+      type: Sequelize.STRING,\n+      allowNull: true,\n+    });\n+  },\n+\n+  async down(queryInterface, Sequelize) {\n+    await queryInterface.removeColumn(\""users\"", \""timezone\"");\n+  },\n+};\n\ndiff --git a/server/models/User.ts b/server/models/User.ts\nindex 6322bb2076c6..e73dbe88700f 100644\n--- a/server/models/User.ts\n+++ b/server/models/User.ts\n@@ -183,6 +183,10 @@ class User extends ParanoidModel<\n   @Column(DataType.STRING)\n   language: keyof typeof locales | null;\n \n+  @AllowNull\n+  @Column(DataType.STRING)\n+  timezone: string | null;\n+\n   @AllowNull\n   @IsUrlOrRelativePath\n   @Length({ max: 4096, msg: \""avatarUrl must be less than 4096 characters\"" })\n\ndiff --git a/server/presenters/user.ts b/server/presenters/user.ts\nindex c877a8603941..f9b73d55b323 100644\n--- a/server/presenters/user.ts\n+++ b/server/presenters/user.ts\n@@ -21,6 +21,7 @@ type UserPresentation = {\n   language?: string;\n   preferences?: UserPreferences | null;\n   notificationSettings?: NotificationSettings;\n+  timezone?: string | null;\n };\n \n export default function presentUser(\n@@ -37,6 +38,7 @@ export default function presentUser(\n     createdAt: user.createdAt,\n     updatedAt: user.updatedAt,\n     lastActiveAt: user.lastActiveAt,\n+    timezone: user.timezone,\n   };\n \n   if (options.includeDetails) {\n\ndiff --git a/server/routes/api/users/schema.ts b/server/routes/api/users/schema.ts\nindex fd019af5a745..84c9df75520b 100644\n--- a/server/routes/api/users/schema.ts\n+++ b/server/routes/api/users/schema.ts\n@@ -2,7 +2,7 @@ import { z } from \""zod\"";\n import { NotificationEventType, UserPreference, UserRole } from \""@shared/types\"";\n import { locales } from \""@shared/utils/date\"";\n import User from \""@server/models/User\"";\n-import { zodEnumFromObjectKeys } from \""@server/utils/zod\"";\n+import { zodEnumFromObjectKeys, zodTimezone } from \""@server/utils/zod\"";\n import { BaseSchema } from \""../schema\"";\n \n const BaseIdSchema = z.object({\n@@ -84,6 +84,7 @@ export const UsersUpdateSchema = BaseSchema.extend({\n     avatarUrl: z.string().nullish(),\n     language: zodEnumFromObjectKeys(locales).optional(),\n     preferences: z.record(z.nativeEnum(UserPreference), z.boolean()).optional(),\n+    timezone: zodTimezone().optional(),\n   }),\n });\n \n\ndiff --git a/server/routes/api/users/users.ts b/server/routes/api/users/users.ts\nindex 887d3c55bb75..d1d93897493f 100644\n--- a/server/routes/api/users/users.ts\n+++ b/server/routes/api/users/users.ts\n@@ -209,7 +209,8 @@ router.post(\n   async (ctx: APIContext<T.UsersUpdateReq>) => {\n     const { auth, transaction } = ctx.state;\n     const actor = auth.user;\n-    const { id, name, avatarUrl, language, preferences } = ctx.input.body;\n+    const { id, name, avatarUrl, language, preferences, timezone } =\n+      ctx.input.body;\n \n     let user: User | null = actor;\n     if (id) {\n@@ -236,6 +237,9 @@ router.post(\n         user.setPreference(key, preferences[key] as boolean);\n       }\n     }\n+    if (timezone) {\n+      user.timezone = timezone;\n+    }\n \n     await Event.createFromContext(ctx, {\n       name: \""users.update\"",\n\ndiff --git a/server/utils/zod.ts b/server/utils/zod.ts\nindex 88ce8cfef22f..5181c88f433e 100644\n--- a/server/utils/zod.ts\n+++ b/server/utils/zod.ts\n@@ -15,3 +15,16 @@ export const zodIconType = () =>\n     z.string().regex(emojiRegex()),\n     zodEnumFromObjectKeys(IconLibrary.mapping),\n   ]);\n+\n+export const zodTimezone = () =>\n+  z.string().refine(\n+    (timezone) => {\n+      try {\n+        Intl.DateTimeFormat(undefined, { timeZone: timezone });\n+        return true;\n+      } catch {\n+        return false;\n+      }\n+    },\n+    { message: \""invalid timezone\"" }\n+  );\n"", ""test_patch"": ""diff --git a/server/presenters/__snapshots__/user.test.ts.snap b/server/presenters/__snapshots__/user.test.ts.snap\nindex 51abe76e0bdf..c1766ed44471 100644\n--- a/server/presenters/__snapshots__/user.test.ts.snap\n+++ b/server/presenters/__snapshots__/user.test.ts.snap\n@@ -10,6 +10,7 @@ exports[`presents a user 1`] = `\n   \""lastActiveAt\"": undefined,\n   \""name\"": \""Test User\"",\n   \""role\"": \""member\"",\n+  \""timezone\"": undefined,\n   \""updatedAt\"": undefined,\n }\n `;\n@@ -24,6 +25,7 @@ exports[`presents a user without slack data 1`] = `\n   \""lastActiveAt\"": undefined,\n   \""name\"": \""Test User\"",\n   \""role\"": \""member\"",\n+  \""timezone\"": undefined,\n   \""updatedAt\"": undefined,\n }\n `;\n\ndiff --git a/server/routes/api/users/users.test.ts b/server/routes/api/users/users.test.ts\nindex 33f7bafb62fb..c39e83acb745 100644\n--- a/server/routes/api/users/users.test.ts\n+++ b/server/routes/api/users/users.test.ts\n@@ -702,6 +702,19 @@ describe(\""#users.update\"", () => {\n     expect(body.data.preferences.rememberLastPath).toBe(true);\n   });\n \n+  it(\""should update user timezone\"", async () => {\n+    const user = await buildUser();\n+    const res = await server.post(\""/api/users.update\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        timezone: \""Asia/Calcutta\"",\n+      },\n+    });\n+    const body = await res.json();\n+    expect(res.status).toEqual(200);\n+    expect(body.data.timezone).toEqual(\""Asia/Calcutta\"");\n+  });\n+\n   it(\""should require authentication\"", async () => {\n     const res = await server.post(\""/api/users.update\"");\n     const body = await res.json();\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-7877"", ""pr_id"": 7877, ""issue_id"": 7845, ""repo"": ""outline/outline"", ""problem_statement"": ""Store auth type on `events`\nIn the request `context` we have `auth.type` to denote whether an action was taken through the app or programmatically, we'd like to add a new column to `events` and start storing this going forward where possible.\r\n\r\n Related to #5909 but hopefully not blocked by it"", ""issue_word_count"": 47, ""test_files_count"": 1, ""non_test_files_count"": 18, ""pr_changed_files"": [""plugins/webhooks/server/api/webhookSubscriptions.ts"", ""server/commands/collectionDestroyer.ts"", ""server/commands/documentCollaborativeUpdater.ts"", ""server/commands/revisionCreator.test.ts"", ""server/commands/revisionCreator.ts"", ""server/commands/subscriptionCreator.ts"", ""server/commands/teamUpdater.ts"", ""server/models/Event.ts"", ""server/queues/processors/RevisionsProcessor.ts"", ""server/routes/api/apiKeys/apiKeys.ts"", ""server/routes/api/attachments/attachments.ts"", ""server/routes/api/auth/auth.ts"", ""server/routes/api/authenticationProviders/authenticationProviders.ts"", ""server/routes/api/collections/collections.ts"", ""server/routes/api/comments/comments.ts"", ""server/routes/api/documents/documents.ts"", ""server/routes/api/userMemberships/userMemberships.ts"", ""server/routes/api/users/users.ts"", ""server/types.ts""], ""pr_changed_test_files"": [""server/commands/revisionCreator.test.ts""], ""base_commit"": ""398be020915d8b04b1d1b1798c35ded43c7c1da6"", ""head_commit"": ""03e1ab318b2a13b009e7eae03f84a3c69aee13a3"", ""repo_url"": ""https://github.com/outline/outline/pull/7877"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/7877"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-02T17:16:15.000Z"", ""patch"": ""diff --git a/plugins/webhooks/server/api/webhookSubscriptions.ts b/plugins/webhooks/server/api/webhookSubscriptions.ts\nindex f8c383259bd6..27caa6ecbbfc 100644\n--- a/plugins/webhooks/server/api/webhookSubscriptions.ts\n+++ b/plugins/webhooks/server/api/webhookSubscriptions.ts\n@@ -3,11 +3,12 @@ import compact from \""lodash/compact\"";\n import isEmpty from \""lodash/isEmpty\"";\n import { UserRole } from \""@shared/types\"";\n import auth from \""@server/middlewares/authentication\"";\n+import { transaction } from \""@server/middlewares/transaction\"";\n import validate from \""@server/middlewares/validate\"";\n import { WebhookSubscription, Event } from \""@server/models\"";\n import { authorize } from \""@server/policies\"";\n import pagination from \""@server/routes/api/middlewares/pagination\"";\n-import { WebhookSubscriptionEvent, APIContext } from \""@server/types\"";\n+import { APIContext } from \""@server/types\"";\n import presentWebhookSubscription from \""../presenters/webhookSubscription\"";\n import * as T from \""./schema\"";\n \n@@ -40,36 +41,37 @@ router.post(\n   \""webhookSubscriptions.create\"",\n   auth({ role: UserRole.Admin }),\n   validate(T.WebhookSubscriptionsCreateSchema),\n+  transaction(),\n   async (ctx: APIContext<T.WebhookSubscriptionsCreateReq>) => {\n+    const { transaction } = ctx.state;\n     const { user } = ctx.state.auth;\n     authorize(user, \""createWebhookSubscription\"", user.team);\n \n     const { name, url, secret } = ctx.input.body;\n     const events: string[] = compact(ctx.input.body.events);\n \n-    const webhookSubscription = await WebhookSubscription.create({\n-      name,\n-      events,\n-      createdById: user.id,\n-      teamId: user.teamId,\n-      url,\n-      enabled: true,\n-      secret: isEmpty(secret) ? undefined : secret,\n-    });\n+    const webhookSubscription = await WebhookSubscription.create(\n+      {\n+        name,\n+        events,\n+        createdById: user.id,\n+        teamId: user.teamId,\n+        url,\n+        enabled: true,\n+        secret: isEmpty(secret) ? undefined : secret,\n+      },\n+      { transaction }\n+    );\n \n-    const event: WebhookSubscriptionEvent = {\n+    await Event.createFromContext(ctx, {\n       name: \""webhookSubscriptions.create\"",\n       modelId: webhookSubscription.id,\n-      teamId: user.teamId,\n-      actorId: user.id,\n       data: {\n         name,\n         url,\n         events,\n       },\n-      ip: ctx.request.ip,\n-    };\n-    await Event.create(event);\n+    });\n \n     ctx.body = {\n       data: presentWebhookSubscription(webhookSubscription),\n@@ -81,28 +83,30 @@ router.post(\n   \""webhookSubscriptions.delete\"",\n   auth({ role: UserRole.Admin }),\n   validate(T.WebhookSubscriptionsDeleteSchema),\n+  transaction(),\n   async (ctx: APIContext<T.WebhookSubscriptionsDeleteReq>) => {\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n-    const webhookSubscription = await WebhookSubscription.findByPk(id);\n+    const { transaction } = ctx.state;\n+    const webhookSubscription = await WebhookSubscription.findByPk(id, {\n+      rejectOnEmpty: true,\n+      lock: transaction.LOCK.UPDATE,\n+      transaction,\n+    });\n \n     authorize(user, \""delete\"", webhookSubscription);\n \n-    await webhookSubscription.destroy();\n+    await webhookSubscription.destroy({ transaction });\n \n-    const event: WebhookSubscriptionEvent = {\n+    await Event.createFromContext(ctx, {\n       name: \""webhookSubscriptions.delete\"",\n       modelId: webhookSubscription.id,\n-      teamId: user.teamId,\n-      actorId: user.id,\n       data: {\n         name: webhookSubscription.name,\n         url: webhookSubscription.url,\n         events: webhookSubscription.events,\n       },\n-      ip: ctx.request.ip,\n-    };\n-    await Event.create(event);\n+    });\n \n     ctx.body = {\n       success: true,\n@@ -114,37 +118,40 @@ router.post(\n   \""webhookSubscriptions.update\"",\n   auth({ role: UserRole.Admin }),\n   validate(T.WebhookSubscriptionsUpdateSchema),\n+  transaction(),\n   async (ctx: APIContext<T.WebhookSubscriptionsUpdateReq>) => {\n     const { id, name, url, secret } = ctx.input.body;\n     const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n     const events: string[] = compact(ctx.input.body.events);\n     const webhookSubscription = await WebhookSubscription.findByPk(id, {\n       rejectOnEmpty: true,\n+      lock: transaction.LOCK.UPDATE,\n+      transaction,\n     });\n \n     authorize(user, \""update\"", webhookSubscription);\n \n-    await webhookSubscription.update({\n-      name,\n-      url,\n-      events,\n-      enabled: true,\n-      secret: isEmpty(secret) ? undefined : secret,\n-    });\n+    await webhookSubscription.update(\n+      {\n+        name,\n+        url,\n+        events,\n+        enabled: true,\n+        secret: isEmpty(secret) ? undefined : secret,\n+      },\n+      { transaction }\n+    );\n \n-    const event: WebhookSubscriptionEvent = {\n+    await Event.createFromContext(ctx, {\n       name: \""webhookSubscriptions.update\"",\n       modelId: webhookSubscription.id,\n-      teamId: user.teamId,\n-      actorId: user.id,\n       data: {\n         name: webhookSubscription.name,\n         url: webhookSubscription.url,\n         events: webhookSubscription.events,\n       },\n-      ip: ctx.request.ip,\n-    };\n-    await Event.create(event);\n+    });\n \n     ctx.body = {\n       data: presentWebhookSubscription(webhookSubscription),\n\ndiff --git a/server/commands/collectionDestroyer.ts b/server/commands/collectionDestroyer.ts\nindex 6d120d2e06c2..05b8e15cc16d 100644\n--- a/server/commands/collectionDestroyer.ts\n+++ b/server/commands/collectionDestroyer.ts\n@@ -9,7 +9,7 @@ type Props = {\n   /** The database transaction to use */\n   transaction: Transaction;\n   /** The IP address of the current request */\n-  ip: string;\n+  ip: string | null;\n };\n \n export default async function collectionDestroyer({\n\ndiff --git a/server/commands/documentCollaborativeUpdater.ts b/server/commands/documentCollaborativeUpdater.ts\nindex 9a124ac4d997..f10d9f25372e 100644\n--- a/server/commands/documentCollaborativeUpdater.ts\n+++ b/server/commands/documentCollaborativeUpdater.ts\n@@ -8,6 +8,7 @@ import { schema, serializer } from \""@server/editor\"";\n import Logger from \""@server/logging/Logger\"";\n import { Document, Event } from \""@server/models\"";\n import { sequelize } from \""@server/storage/database\"";\n+import { AuthenticationType } from \""@server/types\"";\n \n type Props = {\n   /** The document ID to update. */\n@@ -89,6 +90,7 @@ export default async function documentCollaborativeUpdater({\n       collectionId: document.collectionId,\n       teamId: document.teamId,\n       actorId: lastModifiedById,\n+      authType: AuthenticationType.APP,\n       data: {\n         multiplayer: true,\n         title: document.title,\n\ndiff --git a/server/commands/revisionCreator.ts b/server/commands/revisionCreator.ts\nindex 69065e766bb7..149a5724ce05 100644\n--- a/server/commands/revisionCreator.ts\n+++ b/server/commands/revisionCreator.ts\n@@ -1,14 +1,15 @@\n import { Document, User, Event, Revision } from \""@server/models\"";\n import { sequelize } from \""@server/storage/database\"";\n+import { DocumentEvent, RevisionEvent } from \""@server/types\"";\n \n export default async function revisionCreator({\n+  event,\n   document,\n   user,\n-  ip,\n }: {\n+  event: DocumentEvent | RevisionEvent;\n   document: Document;\n   user: User;\n-  ip?: string;\n }) {\n   return sequelize.transaction(async (transaction) => {\n     const revision = await Revision.createFromDocument(document, {\n@@ -23,7 +24,8 @@ export default async function revisionCreator({\n         teamId: document.teamId,\n         actorId: user.id,\n         createdAt: document.updatedAt,\n-        ip: ip || user.lastActiveIp,\n+        ip: event.ip,\n+        authType: event.authType,\n       },\n       {\n         transaction,\n\ndiff --git a/server/commands/subscriptionCreator.ts b/server/commands/subscriptionCreator.ts\nindex c50d9a5e8c4e..fe7daf20dbb3 100644\n--- a/server/commands/subscriptionCreator.ts\n+++ b/server/commands/subscriptionCreator.ts\n@@ -11,7 +11,7 @@ type Props = {\n   /** Event to subscribe to */\n   event: string;\n   /** The IP address of the incoming request */\n-  ip: string;\n+  ip: string | null;\n   /** Whether the subscription should be restored if it exists in a deleted state  */\n   resubscribe?: boolean;\n   transaction: Transaction;\n\ndiff --git a/server/commands/teamUpdater.ts b/server/commands/teamUpdater.ts\nindex 7cb5b9ff5b89..1292368296ff 100644\n--- a/server/commands/teamUpdater.ts\n+++ b/server/commands/teamUpdater.ts\n@@ -6,7 +6,7 @@ import { Event, Team, TeamDomain, User } from \""@server/models\"";\n \n type Props = {\n   params: Partial<Omit<Team, \""allowedDomains\"">> & { allowedDomains?: string[] };\n-  ip?: string;\n+  ip?: string | null;\n   user: User;\n   team: Team;\n   transaction: Transaction;\n\ndiff --git a/server/models/Event.ts b/server/models/Event.ts\nindex f1e5d4d4cc1f..11a9ac683ffa 100644\n--- a/server/models/Event.ts\n+++ b/server/models/Event.ts\n@@ -64,7 +64,7 @@ class Event extends IdModel<\n    * used for arbitrary data associated with the event.\n    */\n   @Column(DataType.JSONB)\n-  changes?: Record<string, any> | null;\n+  changes: Record<string, any> | null;\n \n   // hooks\n \n@@ -173,7 +173,10 @@ class Event extends IdModel<\n         ip: ctx.request.ip,\n         authType: ctx.state.auth.type,\n       },\n-      options\n+      {\n+        transaction: ctx.state.transaction,\n+        ...options,\n+      }\n     );\n   }\n }\n\ndiff --git a/server/queues/processors/RevisionsProcessor.ts b/server/queues/processors/RevisionsProcessor.ts\nindex 9dafe515e003..fb847b4e712f 100644\n--- a/server/queues/processors/RevisionsProcessor.ts\n+++ b/server/queues/processors/RevisionsProcessor.ts\n@@ -41,6 +41,7 @@ export default class RevisionsProcessor extends BaseProcessor {\n           rejectOnEmpty: true,\n         });\n         await revisionCreator({\n+          event,\n           user,\n           document,\n         });\n\ndiff --git a/server/routes/api/apiKeys/apiKeys.ts b/server/routes/api/apiKeys/apiKeys.ts\nindex 51962b5d2f8f..a2b5bd803371 100644\n--- a/server/routes/api/apiKeys/apiKeys.ts\n+++ b/server/routes/api/apiKeys/apiKeys.ts\n@@ -33,17 +33,13 @@ router.post(\n       { transaction }\n     );\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""api_keys.create\"",\n-        modelId: key.id,\n-        data: {\n-          name,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""api_keys.create\"",\n+      modelId: key.id,\n+      data: {\n+        name,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       data: presentApiKey(key),\n@@ -118,17 +114,13 @@ router.post(\n     authorize(user, \""delete\"", key);\n \n     await key.destroy({ transaction });\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""api_keys.delete\"",\n-        modelId: key.id,\n-        data: {\n-          name: key.name,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""api_keys.delete\"",\n+      modelId: key.id,\n+      data: {\n+        name: key.name,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       success: true,\n\ndiff --git a/server/routes/api/attachments/attachments.ts b/server/routes/api/attachments/attachments.ts\nindex 5e6c27594b1f..6e0905ed373a 100644\n--- a/server/routes/api/attachments/attachments.ts\n+++ b/server/routes/api/attachments/attachments.ts\n@@ -78,17 +78,13 @@ router.post(\n       },\n       { transaction }\n     );\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""attachments.create\"",\n-        data: {\n-          name,\n-        },\n-        modelId,\n+    await Event.createFromContext(ctx, {\n+      name: \""attachments.create\"",\n+      data: {\n+        name,\n       },\n-      { transaction }\n-    );\n+      modelId,\n+    });\n \n     const presignedPost = await FileStorage.getPresignedPost(\n       key,\n@@ -123,22 +119,27 @@ router.post(\n   \""attachments.delete\"",\n   auth(),\n   validate(T.AttachmentDeleteSchema),\n+  transaction(),\n   async (ctx: APIContext<T.AttachmentDeleteReq>) => {\n     const { id } = ctx.input.body;\n     const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n     const attachment = await Attachment.findByPk(id, {\n       rejectOnEmpty: true,\n+      lock: transaction.LOCK.UPDATE,\n+      transaction,\n     });\n \n     if (attachment.documentId) {\n       const document = await Document.findByPk(attachment.documentId, {\n         userId: user.id,\n+        transaction,\n       });\n       authorize(user, \""update\"", document);\n     }\n \n     authorize(user, \""delete\"", attachment);\n-    await attachment.destroy();\n+    await attachment.destroy({ transaction });\n     await Event.createFromContext(ctx, {\n       name: \""attachments.delete\"",\n     });\n\ndiff --git a/server/routes/api/auth/auth.ts b/server/routes/api/auth/auth.ts\nindex d19a8ba71dce..61b7373c933c 100644\n--- a/server/routes/api/auth/auth.ts\n+++ b/server/routes/api/auth/auth.ts\n@@ -169,19 +169,13 @@ router.post(\n     const { user } = auth;\n \n     await user.rotateJwtSecret({ transaction });\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""users.signout\"",\n-        userId: user.id,\n-        data: {\n-          name: user.name,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""users.signout\"",\n+      userId: user.id,\n+      data: {\n+        name: user.name,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n \n     ctx.cookies.set(\""accessToken\"", \""\"", {\n       sameSite: \""lax\"",\n\ndiff --git a/server/routes/api/authenticationProviders/authenticationProviders.ts b/server/routes/api/authenticationProviders/authenticationProviders.ts\nindex c1898485090b..f40afaec442a 100644\n--- a/server/routes/api/authenticationProviders/authenticationProviders.ts\n+++ b/server/routes/api/authenticationProviders/authenticationProviders.ts\n@@ -57,17 +57,13 @@ router.post(\n       await authenticationProvider.disable({ transaction });\n     }\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""authenticationProviders.update\"",\n-        data: {\n-          enabled,\n-        },\n-        modelId: id,\n+    await Event.createFromContext(ctx, {\n+      name: \""authenticationProviders.update\"",\n+      data: {\n+        enabled,\n       },\n-      { transaction }\n-    );\n+      modelId: id,\n+    });\n \n     ctx.body = {\n       data: presentAuthenticationProvider(authenticationProvider),\n\ndiff --git a/server/routes/api/collections/collections.ts b/server/routes/api/collections/collections.ts\nindex 2cbf08dd7b31..23465f39737a 100644\n--- a/server/routes/api/collections/collections.ts\n+++ b/server/routes/api/collections/collections.ts\n@@ -92,19 +92,13 @@ router.post(\n \n     await collection.save({ transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""collections.create\"",\n-        collectionId: collection.id,\n-        data: {\n-          name,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""collections.create\"",\n+      collectionId: collection.id,\n+      data: {\n+        name,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n     // we must reload the collection to get memberships for policy presenter\n     const reloaded = await Collection.scope({\n       method: [\""withMembership\"", user.id],\n@@ -198,19 +192,13 @@ router.post(\n       }\n     );\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""fileOperations.create\"",\n-        modelId: fileOperation.id,\n-        data: {\n-          type: FileOperationType.Import,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""fileOperations.create\"",\n+      modelId: fileOperation.id,\n+      data: {\n+        type: FileOperationType.Import,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n \n     ctx.body = {\n       success: true,\n@@ -253,19 +241,15 @@ router.post(\n     membership.permission = permission;\n     await membership.save({ transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""collections.add_group\"",\n-        collectionId: collection.id,\n-        modelId: groupId,\n-        data: {\n-          name: group.name,\n-          membershipId: membership.id,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""collections.add_group\"",\n+      collectionId: collection.id,\n+      modelId: groupId,\n+      data: {\n+        name: group.name,\n+        membershipId: membership.id,\n       },\n-      { transaction }\n-    );\n+    });\n \n     const groupMemberships = [presentGroupMembership(membership)];\n \n@@ -318,19 +302,15 @@ router.post(\n       },\n       transaction,\n     });\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""collections.remove_group\"",\n-        collectionId: collection.id,\n-        modelId: groupId,\n-        data: {\n-          name: group.name,\n-          membershipId: membership.id,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""collections.remove_group\"",\n+      collectionId: collection.id,\n+      modelId: groupId,\n+      data: {\n+        name: group.name,\n+        membershipId: membership.id,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       success: true,\n@@ -445,22 +425,16 @@ router.post(\n       await membership.save({ transaction });\n     }\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""collections.add_user\"",\n-        userId,\n-        modelId: membership.id,\n-        collectionId: collection.id,\n-        data: {\n-          isNew,\n-          permission: membership.permission,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""collections.add_user\"",\n+      userId,\n+      modelId: membership.id,\n+      collectionId: collection.id,\n+      data: {\n+        isNew,\n+        permission: membership.permission,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n \n     ctx.body = {\n       data: {\n@@ -500,19 +474,15 @@ router.post(\n \n     await collection.$remove(\""user\"", user, { transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""collections.remove_user\"",\n-        userId,\n-        modelId: membership.id,\n-        collectionId: collection.id,\n-        data: {\n-          name: user.name,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""collections.remove_user\"",\n+      userId,\n+      modelId: membership.id,\n+      collectionId: collection.id,\n+      data: {\n+        name: user.name,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       success: true,\n@@ -755,20 +725,14 @@ router.post(\n     );\n \n     if (privacyChanged || sharingChanged) {\n-      await Event.createFromContext(\n-        ctx,\n-        {\n-          name: \""collections.permission_changed\"",\n-          collectionId: collection.id,\n-          data: {\n-            privacyChanged,\n-            sharingChanged,\n-          },\n+      await Event.createFromContext(ctx, {\n+        name: \""collections.permission_changed\"",\n+        collectionId: collection.id,\n+        data: {\n+          privacyChanged,\n+          sharingChanged,\n         },\n-        {\n-          transaction,\n-        }\n-      );\n+      });\n     }\n \n     // must reload to update collection membership for correct policy calculation\n@@ -972,18 +936,14 @@ router.post(\n       }\n     );\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""collections.archive\"",\n-        collectionId: collection.id,\n-        data: {\n-          name: collection.name,\n-          archivedAt: collection.archivedAt,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""collections.archive\"",\n+      collectionId: collection.id,\n+      data: {\n+        name: collection.name,\n+        archivedAt: collection.archivedAt,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       data: await presentCollection(ctx, collection),\n@@ -1032,18 +992,14 @@ router.post(\n     collection.archivedById = null;\n     await collection.save({ transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""collections.restore\"",\n-        collectionId: collection.id,\n-        data: {\n-          name: collection.name,\n-          archivedAt: collectionArchivedAt,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""collections.restore\"",\n+      collectionId: collection.id,\n+      data: {\n+        name: collection.name,\n+        archivedAt: collectionArchivedAt,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       data: await presentCollection(ctx, collection!),\n@@ -1078,19 +1034,13 @@ router.post(\n         transaction,\n       }\n     );\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""collections.move\"",\n-        collectionId: collection.id,\n-        data: {\n-          index,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""collections.move\"",\n+      collectionId: collection.id,\n+      data: {\n+        index,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n \n     ctx.body = {\n       success: true,\n\ndiff --git a/server/routes/api/comments/comments.ts b/server/routes/api/comments/comments.ts\nindex 0111b8bbaa49..856204d8db74 100644\n--- a/server/routes/api/comments/comments.ts\n+++ b/server/routes/api/comments/comments.ts\n@@ -295,16 +295,12 @@ router.post(\n     const changes = comment.changeset;\n     await comment.save({ transaction, silent: true });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""comments.update\"",\n-        modelId: comment.id,\n-        documentId: comment.documentId,\n-        changes,\n-      },\n-      { transaction }\n-    );\n+    await Event.createFromContext(ctx, {\n+      name: \""comments.update\"",\n+      modelId: comment.id,\n+      documentId: comment.documentId,\n+      changes,\n+    });\n \n     ctx.body = {\n       data: presentComment(comment),\n@@ -342,16 +338,12 @@ router.post(\n     const changes = comment.changeset;\n     await comment.save({ transaction, silent: true });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""comments.update\"",\n-        modelId: comment.id,\n-        documentId: comment.documentId,\n-        changes,\n-      },\n-      { transaction }\n-    );\n+    await Event.createFromContext(ctx, {\n+      name: \""comments.update\"",\n+      modelId: comment.id,\n+      documentId: comment.documentId,\n+      changes,\n+    });\n \n     ctx.body = {\n       data: presentComment(comment),\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex fff936bc3ce9..01136cc9191c 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -848,37 +848,29 @@ router.post(\n \n       // restore a previously deleted document\n       await document.restoreTo(destCollectionId!, { transaction, user }); // destCollectionId is guaranteed to be defined here\n-      await Event.createFromContext(\n-        ctx,\n-        {\n-          name: \""documents.restore\"",\n-          documentId: document.id,\n-          collectionId: document.collectionId,\n-          data: {\n-            title: document.title,\n-          },\n+      await Event.createFromContext(ctx, {\n+        name: \""documents.restore\"",\n+        documentId: document.id,\n+        collectionId: document.collectionId,\n+        data: {\n+          title: document.title,\n         },\n-        { transaction }\n-      );\n+      });\n     } else if (document.archivedAt) {\n       authorize(user, \""unarchive\"", document);\n       authorize(user, \""updateDocument\"", destCollection);\n \n       // restore a previously archived document\n       await document.restoreTo(destCollectionId!, { transaction, user }); // destCollectionId is guaranteed to be defined here\n-      await Event.createFromContext(\n-        ctx,\n-        {\n-          name: \""documents.unarchive\"",\n-          documentId: document.id,\n-          collectionId: document.collectionId,\n-          data: {\n-            title: document.title,\n-            sourceCollectionId,\n-          },\n+      await Event.createFromContext(ctx, {\n+        name: \""documents.unarchive\"",\n+        documentId: document.id,\n+        collectionId: document.collectionId,\n+        data: {\n+          title: document.title,\n+          sourceCollectionId,\n         },\n-        { transaction }\n-      );\n+      });\n     } else if (revisionId) {\n       // restore a document to a specific revision\n       authorize(user, \""update\"", document);\n@@ -888,18 +880,14 @@ router.post(\n       document.restoreFromRevision(revision);\n       await document.save({ transaction });\n \n-      await Event.createFromContext(\n-        ctx,\n-        {\n-          name: \""documents.restore\"",\n-          documentId: document.id,\n-          collectionId: document.collectionId,\n-          data: {\n-            title: document.title,\n-          },\n+      await Event.createFromContext(ctx, {\n+        name: \""documents.restore\"",\n+        documentId: document.id,\n+        collectionId: document.collectionId,\n+        data: {\n+          title: document.title,\n         },\n-        { transaction }\n-      );\n+      });\n     } else {\n       assertPresent(revisionId, \""revisionId is required\"");\n     }\n@@ -1136,21 +1124,15 @@ router.post(\n         transaction,\n       }\n     );\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""documents.create\"",\n-        documentId: document.id,\n-        collectionId: document.collectionId,\n-        data: {\n-          title: document.title,\n-          template: true,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""documents.create\"",\n+      documentId: document.id,\n+      collectionId: document.collectionId,\n+      data: {\n+        title: document.title,\n+        template: true,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n \n     // reload to get all of the data needed to present (user, collection etc)\n     const reloaded = await Document.findByPk(document.id, {\n@@ -1387,18 +1369,14 @@ router.post(\n     authorize(user, \""archive\"", document);\n \n     await document.archive(user, { transaction });\n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""documents.archive\"",\n-        documentId: document.id,\n-        collectionId: document.collectionId,\n-        data: {\n-          title: document.title,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""documents.archive\"",\n+      documentId: document.id,\n+      collectionId: document.collectionId,\n+      data: {\n+        title: document.title,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       data: await presentDocument(ctx, document),\n@@ -1756,23 +1734,17 @@ router.post(\n       await membership.save({ transaction });\n     }\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""documents.add_user\"",\n-        userId,\n-        modelId: membership.id,\n-        documentId: document.id,\n-        data: {\n-          title: document.title,\n-          isNew,\n-          permission: membership.permission,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""documents.add_user\"",\n+      userId,\n+      modelId: membership.id,\n+      documentId: document.id,\n+      data: {\n+        title: document.title,\n+        isNew,\n+        permission: membership.permission,\n       },\n-      {\n-        transaction,\n-      }\n-    );\n+    });\n \n     ctx.body = {\n       data: {\n@@ -1822,16 +1794,12 @@ router.post(\n \n     await membership.destroy({ transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""documents.remove_user\"",\n-        userId,\n-        modelId: membership.id,\n-        documentId: document.id,\n-      },\n-      { transaction }\n-    );\n+    await Event.createFromContext(ctx, {\n+      name: \""documents.remove_user\"",\n+      userId,\n+      modelId: membership.id,\n+      documentId: document.id,\n+    });\n \n     ctx.body = {\n       success: true,\n@@ -1885,21 +1853,17 @@ router.post(\n       await membership.save({ transaction });\n     }\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""documents.add_group\"",\n-        documentId: document.id,\n-        modelId: groupId,\n-        data: {\n-          name: group.name,\n-          isNew,\n-          permission: membership.permission,\n-          membershipId: membership.id,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""documents.add_group\"",\n+      documentId: document.id,\n+      modelId: groupId,\n+      data: {\n+        name: group.name,\n+        isNew,\n+        permission: membership.permission,\n+        membershipId: membership.id,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       data: {\n@@ -1945,19 +1909,15 @@ router.post(\n \n     await membership.destroy({ transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""documents.remove_group\"",\n-        documentId: document.id,\n-        modelId: groupId,\n-        data: {\n-          name: group.name,\n-          membershipId: membership.id,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""documents.remove_group\"",\n+      documentId: document.id,\n+      modelId: groupId,\n+      data: {\n+        name: group.name,\n+        membershipId: membership.id,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       success: true,\n\ndiff --git a/server/routes/api/userMemberships/userMemberships.ts b/server/routes/api/userMemberships/userMemberships.ts\nindex 3d67f96a14ea..f2ea70c64714 100644\n--- a/server/routes/api/userMemberships/userMemberships.ts\n+++ b/server/routes/api/userMemberships/userMemberships.ts\n@@ -91,19 +91,15 @@ router.post(\n     membership.index = index;\n     await membership.save({ transaction });\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""userMemberships.update\"",\n-        modelId: membership.id,\n-        userId: membership.userId,\n-        documentId: membership.documentId,\n-        data: {\n-          index: membership.index,\n-        },\n+    await Event.createFromContext(ctx, {\n+      name: \""userMemberships.update\"",\n+      modelId: membership.id,\n+      userId: membership.userId,\n+      documentId: membership.documentId,\n+      data: {\n+        index: membership.index,\n       },\n-      { transaction }\n-    );\n+    });\n \n     ctx.body = {\n       data: presentMembership(membership),\n\ndiff --git a/server/routes/api/users/users.ts b/server/routes/api/users/users.ts\nindex 71adf6467ad1..611ab2b6751e 100644\n--- a/server/routes/api/users/users.ts\n+++ b/server/routes/api/users/users.ts\n@@ -237,15 +237,11 @@ router.post(\n       }\n     }\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""users.update\"",\n-        userId: user.id,\n-        changes: user.changeset,\n-      },\n-      { transaction }\n-    );\n+    await Event.createFromContext(ctx, {\n+      name: \""users.update\"",\n+      userId: user.id,\n+      changes: user.changeset,\n+    });\n     await user.save({ transaction });\n \n     ctx.body = {\n@@ -348,20 +344,14 @@ async function updateRole(ctx: APIContext<T.UsersChangeRoleReq>) {\n \n   await user.update({ role }, { transaction });\n \n-  await Event.createFromContext(\n-    ctx,\n-    {\n-      name,\n-      userId,\n-      data: {\n-        name: user.name,\n-        role,\n-      },\n+  await Event.createFromContext(ctx, {\n+    name,\n+    userId,\n+    data: {\n+      name: user.name,\n+      role,\n     },\n-    {\n-      transaction,\n-    }\n-  );\n+  });\n \n   const includeDetails = !!can(actor, \""readDetails\"", user);\n \n@@ -597,15 +587,11 @@ router.post(\n     const { user } = ctx.state.auth;\n     user.setNotificationEventType(eventType, true);\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""users.update\"",\n-        userId: user.id,\n-        changes: user.changeset,\n-      },\n-      { transaction }\n-    );\n+    await Event.createFromContext(ctx, {\n+      name: \""users.update\"",\n+      userId: user.id,\n+      changes: user.changeset,\n+    });\n     await user.save({ transaction });\n \n     ctx.body = {\n@@ -625,15 +611,11 @@ router.post(\n     const { user } = ctx.state.auth;\n     user.setNotificationEventType(eventType, false);\n \n-    await Event.createFromContext(\n-      ctx,\n-      {\n-        name: \""users.update\"",\n-        userId: user.id,\n-        changes: user.changeset,\n-      },\n-      { transaction }\n-    );\n+    await Event.createFromContext(ctx, {\n+      name: \""users.update\"",\n+      userId: user.id,\n+      changes: user.changeset,\n+    });\n     await user.save({ transaction });\n \n     ctx.body = {\n\ndiff --git a/server/types.ts b/server/types.ts\nindex 49c0495722a3..56a866a94e9a 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -84,11 +84,12 @@ export interface APIContext<ReqT = BaseReq, ResT = BaseRes>\n type BaseEvent<T extends Model> = {\n   teamId: string;\n   actorId: string;\n-  ip: string;\n+  ip: string | null;\n+  authType?: AuthenticationType | null;\n   changes?: {\n     attributes: Partial<InferAttributes<T>>;\n     previous: Partial<InferAttributes<T>>;\n-  };\n+  } | null;\n };\n \n export type ApiKeyEvent = BaseEvent<ApiKey> & {\n"", ""test_patch"": ""diff --git a/server/commands/revisionCreator.test.ts b/server/commands/revisionCreator.test.ts\nindex 8fecdfc91fb0..015cceefb586 100644\n--- a/server/commands/revisionCreator.test.ts\n+++ b/server/commands/revisionCreator.test.ts\n@@ -1,10 +1,9 @@\n import { Event } from \""@server/models\"";\n import { buildDocument, buildUser } from \""@server/test/factories\"";\n+import { AuthenticationType, DocumentEvent } from \""@server/types\"";\n import revisionCreator from \""./revisionCreator\"";\n \n describe(\""revisionCreator\"", () => {\n-  const ip = \""127.0.0.1\"";\n-\n   it(\""should create revision model from document\"", async () => {\n     const user = await buildUser();\n     const document = await buildDocument({\n@@ -14,7 +13,10 @@ describe(\""revisionCreator\"", () => {\n     const revision = await revisionCreator({\n       document,\n       user,\n-      ip,\n+      event: {\n+        name: \""documents.update\"",\n+        authType: AuthenticationType.APP,\n+      } as DocumentEvent,\n     });\n     const event = await Event.findLatest({\n       teamId: user.teamId,\n@@ -25,5 +27,6 @@ describe(\""revisionCreator\"", () => {\n     expect(event!.name).toEqual(\""revisions.create\"");\n     expect(event!.modelId).toEqual(revision.id);\n     expect(event!.createdAt).toEqual(document.updatedAt);\n+    expect(event!.authType).toEqual(AuthenticationType.APP);\n   });\n });\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-7790"", ""pr_id"": 7790, ""issue_id"": 7137, ""repo"": ""outline/outline"", ""problem_statement"": ""Comment reactions\nBadly missing out on comment reactions. We already have the picker ready so can reuse that."", ""issue_word_count"": 18, ""test_files_count"": 5, ""non_test_files_count"": 59, ""pr_changed_files"": [""app/actions/definitions/comments.tsx"", ""app/components/CollectionDescription.tsx"", ""app/components/Emoji.tsx"", ""app/components/ErrorBoundary.tsx"", ""app/components/GroupListItem.tsx"", ""app/components/HoverPreview/Components.tsx"", ""app/components/IconPicker/components/Emoji.tsx"", ""app/components/IconPicker/components/GridTemplate.tsx"", ""app/components/IconPicker/components/SkinTonePicker.tsx"", ""app/components/List/Item.tsx"", ""app/components/Reactions/Reaction.tsx"", ""app/components/Reactions/ReactionList.tsx"", ""app/components/Reactions/ReactionPicker.tsx"", ""app/components/Reactions/ViewReactionsDialog.tsx"", ""app/components/Table.tsx"", ""app/components/WebsocketProvider.tsx"", ""app/hooks/useHover.ts"", ""app/menus/CommentMenu.tsx"", ""app/models/Comment.ts"", ""app/scenes/Document/components/CommentForm.tsx"", ""app/scenes/Document/components/CommentThread.tsx"", ""app/scenes/Document/components/CommentThreadItem.tsx"", ""app/scenes/Document/components/Comments.tsx"", ""app/scenes/Document/components/Editor.tsx"", ""app/scenes/Search/components/RecentSearchListItem.tsx"", ""app/scenes/Settings/components/DropToImport.tsx"", ""app/scenes/Settings/components/ImageInput.tsx"", ""app/types.ts"", ""app/typings/styled-components.d.ts"", ""package.json"", ""plugins/webhooks/server/tasks/DeliverWebhookTask.ts"", ""server/emails/templates/components/Diff.tsx"", ""server/migrations/20241013080608-create-reactions.js"", ""server/models/Comment.ts"", ""server/models/Reaction.ts"", ""server/models/index.ts"", ""server/policies/comment.ts"", ""server/policies/index.ts"", ""server/policies/reaction.ts"", ""server/presenters/comment.ts"", ""server/presenters/index.ts"", ""server/presenters/reaction.ts"", ""server/queues/processors/WebsocketsProcessor.ts"", ""server/routes/api/comments/__snapshots__/comments.test.ts.snap"", ""server/routes/api/comments/comments.test.ts"", ""server/routes/api/comments/comments.ts"", ""server/routes/api/comments/schema.ts"", ""server/routes/api/index.ts"", ""server/routes/api/reactions/__snapshots__/reactions.test.ts.snap"", ""server/routes/api/reactions/index.ts"", ""server/routes/api/reactions/reactions.test.ts"", ""server/routes/api/reactions/reactions.ts"", ""server/routes/api/reactions/schema.ts"", ""server/test/factories.ts"", ""server/types.ts"", ""shared/editor/components/Frame.tsx"", ""shared/editor/components/Image.tsx"", ""shared/editor/components/Styles.ts"", ""shared/editor/components/Widget.tsx"", ""shared/i18n/locales/en_US/translation.json"", ""shared/styles/theme.ts"", ""shared/types.ts"", ""shared/utils/emoji.ts"", ""yarn.lock""], ""pr_changed_test_files"": [""server/routes/api/comments/__snapshots__/comments.test.ts.snap"", ""server/routes/api/comments/comments.test.ts"", ""server/routes/api/reactions/__snapshots__/reactions.test.ts.snap"", ""server/routes/api/reactions/reactions.test.ts"", ""server/test/factories.ts""], ""base_commit"": ""d87e1f626476a2a6d601b8d0f34878f6daaebabf"", ""head_commit"": ""b14f5f9d30bcc696b3ebd3ada4185b1eb9c30d6a"", ""repo_url"": ""https://github.com/outline/outline/pull/7790"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/7790"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-02T17:58:03.000Z"", ""patch"": ""diff --git a/app/actions/definitions/comments.tsx b/app/actions/definitions/comments.tsx\nindex 0ed6206eb0e2..2f430dcd291e 100644\n--- a/app/actions/definitions/comments.tsx\n+++ b/app/actions/definitions/comments.tsx\n@@ -1,9 +1,10 @@\n-import { DoneIcon, TrashIcon } from \""outline-icons\"";\n+import { DoneIcon, SmileyIcon, TrashIcon } from \""outline-icons\"";\n import * as React from \""react\"";\n import { toast } from \""sonner\"";\n import stores from \""~/stores\"";\n import Comment from \""~/models/Comment\"";\n import CommentDeleteDialog from \""~/components/CommentDeleteDialog\"";\n+import ViewReactionsDialog from \""~/components/Reactions/ViewReactionsDialog\"";\n import history from \""~/utils/history\"";\n import { createAction } from \""..\"";\n import { DocumentSection } from \""../sections\"";\n@@ -88,3 +89,27 @@ export const unresolveCommentFactory = ({\n       onUnresolve();\n     },\n   });\n+\n+export const viewCommentReactionsFactory = ({\n+  comment,\n+}: {\n+  comment: Comment;\n+}) =>\n+  createAction({\n+    name: ({ t }) => `${t(\""View reactions\"")}`,\n+    analyticsName: \""View comment reactions\"",\n+    section: DocumentSection,\n+    icon: <SmileyIcon />,\n+    visible: () =>\n+      stores.policies.abilities(comment.id).read &&\n+      comment.reactions.length > 0,\n+    perform: ({ t, event }) => {\n+      event?.preventDefault();\n+      event?.stopPropagation();\n+\n+      stores.dialogs.openModal({\n+        title: t(\""Reactions\""),\n+        content: <ViewReactionsDialog model={comment} />,\n+      });\n+    },\n+  });\n\ndiff --git a/app/components/CollectionDescription.tsx b/app/components/CollectionDescription.tsx\nindex fcfe25d27d8d..b891bc3de3d4 100644\n--- a/app/components/CollectionDescription.tsx\n+++ b/app/components/CollectionDescription.tsx\n@@ -226,7 +226,7 @@ const Input = styled.div`\n   }\n \n   &[data-editing=\""true\""] {\n-    background: ${s(\""secondaryBackground\"")};\n+    background: ${s(\""backgroundSecondary\"")};\n   }\n \n   .block-menu-trigger,\n\ndiff --git a/app/components/Emoji.tsx b/app/components/Emoji.tsx\nnew file mode 100644\nindex 000000000000..5c5441e9dc2a\n--- /dev/null\n+++ b/app/components/Emoji.tsx\n@@ -0,0 +1,20 @@\n+import styled from \""styled-components\"";\n+import { s } from \""@shared/styles\"";\n+\n+type Props = {\n+  /** Width of the containing element. */\n+  width?: number | string;\n+  /** Height of the containing element. */\n+  height?: number | string;\n+  /** Controls the rendered emoji size. */\n+  size?: number;\n+};\n+\n+export const Emoji = styled.span<Props>`\n+  font-family: ${s(\""fontFamilyEmoji\"")};\n+  width: ${({ width }) =>\n+    typeof width === \""string\"" ? width : width ? `${width}px` : \""auto\""};\n+  height: ${({ height }) =>\n+    typeof height === \""string\"" ? height : height ? `${height}px` : \""auto\""};\n+  font-size: ${({ size }) => size && `${size}px`};\n+`;\n\ndiff --git a/app/components/ErrorBoundary.tsx b/app/components/ErrorBoundary.tsx\nindex e2a0dcd1c971..207da6a698bb 100644\n--- a/app/components/ErrorBoundary.tsx\n+++ b/app/components/ErrorBoundary.tsx\n@@ -138,7 +138,7 @@ class ErrorBoundary extends React.Component<Props> {\n }\n \n const Pre = styled.pre`\n-  background: ${s(\""secondaryBackground\"")};\n+  background: ${s(\""backgroundSecondary\"")};\n   padding: 16px;\n   border-radius: 4px;\n   font-size: 12px;\n\ndiff --git a/app/components/GroupListItem.tsx b/app/components/GroupListItem.tsx\nindex ac18bc1b6fb8..808152580812 100644\n--- a/app/components/GroupListItem.tsx\n+++ b/app/components/GroupListItem.tsx\n@@ -75,7 +75,7 @@ const Image = styled(Flex)`\n   justify-content: center;\n   width: 32px;\n   height: 32px;\n-  background: ${s(\""secondaryBackground\"")};\n+  background: ${s(\""backgroundSecondary\"")};\n   border-radius: 32px;\n `;\n \n\ndiff --git a/app/components/HoverPreview/Components.tsx b/app/components/HoverPreview/Components.tsx\nindex 8f2b1dffc97d..f56cf1362584 100644\n--- a/app/components/HoverPreview/Components.tsx\n+++ b/app/components/HoverPreview/Components.tsx\n@@ -61,7 +61,7 @@ export const Label = styled(Text).attrs({ size: \""xsmall\"", weight: \""bold\"" })<{\n   color?: string;\n }>`\n   background-color: ${(props) =>\n-    props.color ?? props.theme.secondaryBackground};\n+    props.color ?? props.theme.backgroundSecondary};\n   color: ${(props) =>\n     props.color ? getTextColor(props.color) : props.theme.text};\n   width: fit-content;\n\ndiff --git a/app/components/IconPicker/components/Emoji.tsx b/app/components/IconPicker/components/Emoji.tsx\ndeleted file mode 100644\nindex 2223147282f5..000000000000\n--- a/app/components/IconPicker/components/Emoji.tsx\n+++ /dev/null\n@@ -1,8 +0,0 @@\n-import styled from \""styled-components\"";\n-import { s } from \""@shared/styles\"";\n-\n-export const Emoji = styled.span`\n-  font-family: ${s(\""fontFamilyEmoji\"")};\n-  width: 24px;\n-  height: 24px;\n-`;\n\ndiff --git a/app/components/IconPicker/components/GridTemplate.tsx b/app/components/IconPicker/components/GridTemplate.tsx\nindex c3abc3589c64..832a5e1c7068 100644\n--- a/app/components/IconPicker/components/GridTemplate.tsx\n+++ b/app/components/IconPicker/components/GridTemplate.tsx\n@@ -4,9 +4,9 @@ import React from \""react\"";\n import styled from \""styled-components\"";\n import { IconType } from \""@shared/types\"";\n import { IconLibrary } from \""@shared/utils/IconLibrary\"";\n+import { Emoji } from \""~/components/Emoji\"";\n import Text from \""~/components/Text\"";\n import { TRANSLATED_CATEGORIES } from \""../utils\"";\n-import { Emoji } from \""./Emoji\"";\n import Grid from \""./Grid\"";\n import { IconButton } from \""./IconButton\"";\n \n@@ -85,7 +85,9 @@ const GridTemplate = (\n             key={item.id}\n             onClick={() => onIconSelect({ id: item.id, value: item.value })}\n           >\n-            <Emoji>{item.value}</Emoji>\n+            <Emoji width={24} height={24}>\n+              {item.value}\n+            </Emoji>\n           </IconButton>\n         );\n       });\n\ndiff --git a/app/components/IconPicker/components/SkinTonePicker.tsx b/app/components/IconPicker/components/SkinTonePicker.tsx\nindex 2061fd302d4a..bea78e34511f 100644\n--- a/app/components/IconPicker/components/SkinTonePicker.tsx\n+++ b/app/components/IconPicker/components/SkinTonePicker.tsx\n@@ -5,10 +5,10 @@ import styled from \""styled-components\"";\n import { depths, s } from \""@shared/styles\"";\n import { EmojiSkinTone } from \""@shared/types\"";\n import { getEmojiVariants } from \""@shared/utils/emoji\"";\n+import { Emoji } from \""~/components/Emoji\"";\n import Flex from \""~/components/Flex\"";\n import NudeButton from \""~/components/NudeButton\"";\n import { hover } from \""~/styles\"";\n-import { Emoji } from \""./Emoji\"";\n import { IconButton } from \""./IconButton\"";\n \n const SkinTonePicker = ({\n@@ -26,7 +26,7 @@ const SkinTonePicker = ({\n   );\n \n   const menu = useMenuState({\n-    placement: \""bottom\"",\n+    placement: \""bottom-end\"",\n   });\n \n   const handleSkinClick = React.useCallback(\n@@ -43,7 +43,9 @@ const SkinTonePicker = ({\n         <MenuItem {...menu} key={emoji.value}>\n           {(menuprops) => (\n             <IconButton {...menuprops} onClick={() => handleSkinClick(eskin)}>\n-              <Emoji>{emoji.value}</Emoji>\n+              <Emoji width={24} height={24}>\n+                {emoji.value}\n+              </Emoji>\n             </IconButton>\n           )}\n         </MenuItem>\n\ndiff --git a/app/components/List/Item.tsx b/app/components/List/Item.tsx\nindex 1ea2d2d04206..5dfe31560f82 100644\n--- a/app/components/List/Item.tsx\n+++ b/app/components/List/Item.tsx\n@@ -192,7 +192,7 @@ const Wrapper = styled.a<{\n   &:focus,\n   &:focus-within {\n     background: ${(props) =>\n-      props.$hover ? props.theme.secondaryBackground : \""inherit\""};\n+      props.$hover ? props.theme.backgroundSecondary : \""inherit\""};\n   }\n \n   cursor: ${(props) =>\n\ndiff --git a/app/components/Reactions/Reaction.tsx b/app/components/Reactions/Reaction.tsx\nnew file mode 100644\nindex 000000000000..0ed8d0799eed\n--- /dev/null\n+++ b/app/components/Reactions/Reaction.tsx\n@@ -0,0 +1,173 @@\n+import { observer } from \""mobx-react\"";\n+import { transparentize } from \""polished\"";\n+import React from \""react\"";\n+import { useTranslation } from \""react-i18next\"";\n+import styled, { css } from \""styled-components\"";\n+import { s } from \""@shared/styles\"";\n+import type { ReactionSummary } from \""@shared/types\"";\n+import { getEmojiId } from \""@shared/utils/emoji\"";\n+import User from \""~/models/User\"";\n+import { Emoji } from \""~/components/Emoji\"";\n+import Flex from \""~/components/Flex\"";\n+import NudeButton from \""~/components/NudeButton\"";\n+import Text from \""~/components/Text\"";\n+import Tooltip from \""~/components/Tooltip\"";\n+import useCurrentUser from \""~/hooks/useCurrentUser\"";\n+import { hover } from \""~/styles\"";\n+\n+type Props = {\n+  /** Thin reaction data - contains the emoji & active user ids for this reaction. */\n+  reaction: ReactionSummary;\n+  /** Users who reacted using this emoji. */\n+  reactedUsers: User[];\n+  /** Whether the emoji button should be disabled (prevents add/remove events). */\n+  disabled: boolean;\n+  /** Callback when the user intends to add the reaction. */\n+  onAddReaction: (emoji: string) => Promise<void>;\n+  /** Callback when the user intends to remove the reaction. */\n+  onRemoveReaction: (emoji: string) => Promise<void>;\n+};\n+\n+const useTooltipContent = ({\n+  reactedUsers,\n+  currUser,\n+  emoji,\n+  active,\n+}: {\n+  reactedUsers: User[];\n+  currUser: User;\n+  emoji: string;\n+  active: boolean;\n+}) => {\n+  const { t } = useTranslation();\n+\n+  if (!reactedUsers.length) {\n+    return;\n+  }\n+\n+  const transformedEmoji = `:${getEmojiId(emoji)}:`;\n+\n+  switch (reactedUsers.length) {\n+    case 1: {\n+      return t(\""{{ username }} reacted with {{ emoji }}\"", {\n+        username: active ? t(\""You\"") : reactedUsers[0].name,\n+        emoji: transformedEmoji,\n+      });\n+    }\n+\n+    case 2: {\n+      const firstUsername = active ? t(\""You\"") : reactedUsers[0].name;\n+      const secondUsername = active\n+        ? reactedUsers.find((user) => user.id !== currUser.id)?.name\n+        : reactedUsers[1].name;\n+\n+      return t(\n+        \""{{ firstUsername }} and {{ secondUsername }} reacted with {{ emoji }}\"",\n+        {\n+          firstUsername,\n+          secondUsername,\n+          emoji: transformedEmoji,\n+        }\n+      );\n+    }\n+\n+    default: {\n+      const firstUsername = active ? t(\""You\"") : reactedUsers[0].name;\n+      const count = reactedUsers.length - 1;\n+\n+      return t(\n+        \""{{ firstUsername }} and {{ count }} others reacted with {{ emoji }}\"",\n+        {\n+          firstUsername,\n+          count,\n+          emoji: transformedEmoji,\n+        }\n+      );\n+    }\n+  }\n+};\n+\n+const Reaction: React.FC<Props> = ({\n+  reaction,\n+  reactedUsers,\n+  disabled,\n+  onAddReaction,\n+  onRemoveReaction,\n+}) => {\n+  const user = useCurrentUser();\n+\n+  const active = reaction.userIds.includes(user.id);\n+\n+  const tooltipContent = useTooltipContent({\n+    reactedUsers,\n+    currUser: user,\n+    emoji: reaction.emoji,\n+    active,\n+  });\n+\n+  const handleClick = React.useCallback(\n+    (event: React.SyntheticEvent<HTMLButtonElement>) => {\n+      event.stopPropagation();\n+      active\n+        ? void onRemoveReaction(reaction.emoji)\n+        : void onAddReaction(reaction.emoji);\n+    },\n+    [reaction, active, onAddReaction, onRemoveReaction]\n+  );\n+\n+  const DisplayedEmoji = React.useMemo(\n+    () => (\n+      <EmojiButton disabled={disabled} $active={active} onClick={handleClick}>\n+        <Flex gap={6} justify=\""center\"" align=\""center\"">\n+          <Emoji size={15}>{reaction.emoji}</Emoji>\n+          <Count weight=\""xbold\"">{reaction.userIds.length}</Count>\n+        </Flex>\n+      </EmojiButton>\n+    ),\n+    [reaction.emoji, reaction.userIds, disabled, active, handleClick]\n+  );\n+\n+  return tooltipContent ? (\n+    <Tooltip content={tooltipContent} delay={250} placement=\""bottom\"">\n+      {DisplayedEmoji}\n+    </Tooltip>\n+  ) : (\n+    <>{DisplayedEmoji}</>\n+  );\n+};\n+\n+const EmojiButton = styled(NudeButton)<{\n+  $active: boolean;\n+  disabled: boolean;\n+}>`\n+  width: auto;\n+  height: 28px;\n+  padding: 6px;\n+  border-radius: 12px;\n+  transition: ${s(\""backgroundTransition\"")};\n+  background: ${s(\""backgroundTertiary\"")};\n+  pointer-events: ${({ disabled }) => disabled && \""none\""};\n+\n+  &: ${hover} {\n+    background: ${s(\""backgroundQuaternary\"")};\n+  }\n+\n+  ${(props) =>\n+    props.$active &&\n+    css`\n+      background: ${transparentize(0.7, props.theme.accent)};\n+\n+      &: ${hover} {\n+        background: ${transparentize(0.5, props.theme.accent)};\n+      }\n+    `}\n+`;\n+\n+const Count = styled(Text)`\n+  font-size: 11px;\n+  color: ${s(\""buttonNeutralText\"")};\n+  padding-right: 1px;\n+  font-variant-numeric: tabular-nums;\n+`;\n+\n+export default observer(Reaction);\n\ndiff --git a/app/components/Reactions/ReactionList.tsx b/app/components/Reactions/ReactionList.tsx\nnew file mode 100644\nindex 000000000000..fbe5b946974b\n--- /dev/null\n+++ b/app/components/Reactions/ReactionList.tsx\n@@ -0,0 +1,87 @@\n+import compact from \""lodash/compact\"";\n+import { observer } from \""mobx-react\"";\n+import React from \""react\"";\n+import Comment from \""~/models/Comment\"";\n+import useHover from \""~/hooks/useHover\"";\n+import useStores from \""~/hooks/useStores\"";\n+import Logger from \""~/utils/Logger\"";\n+import Flex from \""../Flex\"";\n+import { ResizingHeightContainer } from \""../ResizingHeightContainer\"";\n+import Reaction from \""./Reaction\"";\n+\n+type Props = {\n+  /** Model for which to show the reactions. */\n+  model: Comment;\n+  /** Callback when the user intends to add a reaction. */\n+  onAddReaction: (emoji: string) => Promise<void>;\n+  /** Callback when the user intends to remove a reaction. */\n+  onRemoveReaction: (emoji: string) => Promise<void>;\n+  /** classname generated by styled-components. */\n+  className?: string;\n+  /** Picker to render as the last element */\n+  picker?: React.ReactElement;\n+};\n+\n+const ReactionList: React.FC<Props> = ({\n+  model,\n+  onAddReaction,\n+  onRemoveReaction,\n+  className,\n+  picker,\n+}) => {\n+  const { users } = useStores();\n+  const listRef = React.useRef<HTMLDivElement>(null);\n+\n+  const hovered = useHover({\n+    ref: listRef,\n+    duration: 250,\n+  });\n+\n+  React.useEffect(() => {\n+    const loadReactedUsersData = async () => {\n+      try {\n+        await model.loadReactedUsersData();\n+      } catch (err) {\n+        Logger.warn(\""Could not prefetch reaction data\"");\n+      }\n+    };\n+\n+    if (hovered) {\n+      void loadReactedUsersData();\n+    }\n+  }, [hovered, model]);\n+\n+  const hasReactions = !!model.reactions.length;\n+  const style = React.useMemo(() => {\n+    if (hasReactions) {\n+      return { minHeight: 28 };\n+    }\n+    return undefined;\n+  }, [hasReactions]);\n+\n+  return (\n+    <ResizingHeightContainer style={style}>\n+      <Flex ref={listRef} className={className} align=\""center\"" gap={6} wrap>\n+        {model.reactions.map((reaction) => {\n+          const reactedUsers = compact(\n+            reaction.userIds.map((id) => users.get(id))\n+          );\n+\n+          return (\n+            <Reaction\n+              key={reaction.emoji}\n+              reaction={reaction}\n+              reactedUsers={reactedUsers}\n+              disabled={model.isResolved}\n+              onAddReaction={onAddReaction}\n+              onRemoveReaction={onRemoveReaction}\n+            />\n+          );\n+        })}\n+        {picker}\n+      </Flex>\n+    </ResizingHeightContainer>\n+  );\n+};\n+\n+export default observer(ReactionList);\n\ndiff --git a/app/components/Reactions/ReactionPicker.tsx b/app/components/Reactions/ReactionPicker.tsx\nnew file mode 100644\nindex 000000000000..1ca87e10b26c\n--- /dev/null\n+++ b/app/components/Reactions/ReactionPicker.tsx\n@@ -0,0 +1,161 @@\n+import { ReactionIcon } from \""outline-icons\"";\n+import React from \""react\"";\n+import { useTranslation } from \""react-i18next\"";\n+import { PopoverDisclosure, usePopoverState } from \""reakit\"";\n+import styled from \""styled-components\"";\n+import Flex from \""~/components/Flex\"";\n+import NudeButton from \""~/components/NudeButton\"";\n+import PlaceholderText from \""~/components/PlaceholderText\"";\n+import Popover from \""~/components/Popover\"";\n+import useMobile from \""~/hooks/useMobile\"";\n+import useOnClickOutside from \""~/hooks/useOnClickOutside\"";\n+import useWindowSize from \""~/hooks/useWindowSize\"";\n+\n+const EmojiPanel = React.lazy(\n+  () => import(\""~/components/IconPicker/components/EmojiPanel\"")\n+);\n+\n+type Props = {\n+  /** Callback when an emoji is selected by the user. */\n+  onSelect: (emoji: string) => Promise<void>;\n+  /** Callback when the picker is opened. */\n+  onOpen?: () => void;\n+  /** Callback when the picker is closed. */\n+  onClose?: () => void;\n+  /** Optional classname. */\n+  className?: string;\n+  size?: number;\n+};\n+\n+const ReactionPicker: React.FC<Props> = ({\n+  onSelect,\n+  onOpen,\n+  onClose,\n+  className,\n+  size,\n+}) => {\n+  const { t } = useTranslation();\n+  const popover = usePopoverState({\n+    modal: true,\n+    unstable_offset: [0, 0],\n+    placement: \""bottom-end\"",\n+  });\n+\n+  const { width: windowWidth } = useWindowSize();\n+  const isMobile = useMobile();\n+\n+  const [query, setQuery] = React.useState(\""\"");\n+  const contentRef = React.useRef<HTMLDivElement | null>(null);\n+\n+  const popoverWidth = isMobile ? windowWidth : 300;\n+  // In mobile, popover is absolutely positioned to leave 8px on both sides.\n+  const panelWidth = isMobile ? windowWidth - 16 : popoverWidth;\n+  const { toggle, hide } = popover;\n+  const handlePopoverButtonClick = React.useCallback(\n+    (ev: React.MouseEvent) => {\n+      ev.stopPropagation();\n+      toggle();\n+    },\n+    [toggle]\n+  );\n+\n+  const handleEmojiSelect = React.useCallback(\n+    (emoji: string) => {\n+      hide();\n+      void onSelect(emoji);\n+    },\n+    [hide, onSelect]\n+  );\n+\n+  // Popover open effect\n+  React.useEffect(() => {\n+    if (popover.visible) {\n+      onOpen?.();\n+    } else {\n+      onClose?.();\n+    }\n+  }, [popover.visible, onOpen, onClose]);\n+\n+  // Custom click outside handling rather than using `hideOnClickOutside` from reakit so that we can\n+  // prevent event bubbling.\n+  useOnClickOutside(\n+    contentRef,\n+    (event) => {\n+      if (\n+        popover.visible &&\n+        !popover.unstable_disclosureRef.current?.contains(event.target as Node)\n+      ) {\n+        event.stopPropagation();\n+        event.preventDefault();\n+        popover.hide();\n+      }\n+    },\n+    { capture: true }\n+  );\n+\n+  return (\n+    <>\n+      <PopoverDisclosure {...popover}>\n+        {(props) => (\n+          <PopoverButton\n+            {...props}\n+            aria-label={t(\""Reaction picker\"")}\n+            className={className}\n+            onClick={handlePopoverButtonClick}\n+            size={size}\n+          >\n+            <ReactionIcon size={22} />\n+          </PopoverButton>\n+        )}\n+      </PopoverDisclosure>\n+      <Popover\n+        {...popover}\n+        ref={contentRef}\n+        width={popoverWidth}\n+        shrink\n+        aria-label={t(\""Reaction picker\"")}\n+        onClick={(e) => e.stopPropagation()}\n+        hideOnClickOutside={false}\n+      >\n+        {popover.visible && (\n+          <React.Suspense fallback={<Placeholder />}>\n+            <ScrollableContainer>\n+              <EmojiPanel\n+                panelWidth={panelWidth}\n+                query={query}\n+                panelActive={true}\n+                onEmojiChange={handleEmojiSelect}\n+                onQueryChange={setQuery}\n+              />\n+            </ScrollableContainer>\n+          </React.Suspense>\n+        )}\n+      </Popover>\n+    </>\n+  );\n+};\n+\n+const Placeholder = React.memo(\n+  () => (\n+    <Flex column gap={6} style={{ height: \""300px\"", padding: \""6px 12px\"" }}>\n+      <Flex gap={8}>\n+        <PlaceholderText height={32} minWidth={90} />\n+        <PlaceholderText height={32} width={32} />\n+      </Flex>\n+      <PlaceholderText height={24} width={120} />\n+    </Flex>\n+  ),\n+  () => true\n+);\n+Placeholder.displayName = \""ReactionPickerPlaceholder\"";\n+\n+const ScrollableContainer = styled.div`\n+  height: 300px;\n+  overflow-y: auto;\n+`;\n+\n+const PopoverButton = styled(NudeButton)`\n+  border-radius: 50%;\n+`;\n+\n+export default ReactionPicker;\n\ndiff --git a/app/components/Reactions/ViewReactionsDialog.tsx b/app/components/Reactions/ViewReactionsDialog.tsx\nnew file mode 100644\nindex 000000000000..f824d43fb95f\n--- /dev/null\n+++ b/app/components/Reactions/ViewReactionsDialog.tsx\n@@ -0,0 +1,146 @@\n+import compact from \""lodash/compact\"";\n+import { observer } from \""mobx-react\"";\n+import React from \""react\"";\n+import { useTranslation } from \""react-i18next\"";\n+import { Tab, TabPanel, useTabState } from \""reakit\"";\n+import { toast } from \""sonner\"";\n+import styled, { css } from \""styled-components\"";\n+import { s } from \""@shared/styles\"";\n+import Comment from \""~/models/Comment\"";\n+import { Avatar, AvatarSize } from \""~/components/Avatar\"";\n+import { Emoji } from \""~/components/Emoji\"";\n+import Flex from \""~/components/Flex\"";\n+import PlaceholderText from \""~/components/PlaceholderText\"";\n+import Text from \""~/components/Text\"";\n+import useStores from \""~/hooks/useStores\"";\n+import { hover } from \""~/styles\"";\n+\n+type Props = {\n+  /** Model for which to show the reactions. */\n+  model: Comment;\n+};\n+\n+const ViewReactionsDialog: React.FC<Props> = ({ model }) => {\n+  const { t } = useTranslation();\n+  const { users } = useStores();\n+  const tab = useTabState();\n+  const { reactedUsersLoaded } = model;\n+\n+  React.useEffect(() => {\n+    const loadReactedUsersData = async () => {\n+      try {\n+        await model.loadReactedUsersData();\n+      } catch (err) {\n+        toast.error(t(\""Could not load reactions\""));\n+      }\n+    };\n+\n+    void loadReactedUsersData();\n+  }, [t, model]);\n+\n+  if (!reactedUsersLoaded) {\n+    return <PlaceHolder />;\n+  }\n+\n+  return (\n+    <>\n+      <TabActionsWrapper>\n+        {model.reactions.map((reaction) => (\n+          <StyledTab\n+            {...tab}\n+            key={reaction.emoji}\n+            id={reaction.emoji}\n+            aria-label={t(\""Reaction\"")}\n+            $active={tab.selectedId === reaction.emoji}\n+          >\n+            <Emoji size={16}>{reaction.emoji}</Emoji>\n+          </StyledTab>\n+        ))}\n+      </TabActionsWrapper>\n+      {model.reactions.map((reaction) => {\n+        const reactedUsers = compact(\n+          reaction.userIds.map((id) => users.get(id))\n+        );\n+\n+        return (\n+          <StyledTabPanel {...tab} key={reaction.emoji}>\n+            {reactedUsers.map((user) => (\n+              <UserInfo key={user.name} align=\""center\"" gap={8}>\n+                <Avatar model={user} size={AvatarSize.Medium} />\n+                <Text size=\""medium\"">{user.name}</Text>\n+              </UserInfo>\n+            ))}\n+          </StyledTabPanel>\n+        );\n+      })}\n+    </>\n+  );\n+};\n+\n+const PlaceHolder = React.memo(\n+  () => (\n+    <>\n+      <TabActionsWrapper gap={8} style={{ paddingBottom: \""10px\"" }}>\n+        <PlaceholderText width={40} height={32} />\n+        <PlaceholderText width={40} height={32} />\n+      </TabActionsWrapper>\n+      <UserInfo align=\""center\"" gap={12}>\n+        <PlaceholderText width={AvatarSize.Medium} height={AvatarSize.Medium} />\n+        <PlaceholderText height={34} />\n+      </UserInfo>\n+      <UserInfo align=\""center\"" gap={12}>\n+        <PlaceholderText width={AvatarSize.Medium} height={AvatarSize.Medium} />\n+        <PlaceholderText height={34} />\n+      </UserInfo>\n+    </>\n+  ),\n+  () => true\n+);\n+PlaceHolder.displayName = \""ViewReactionsPlaceholder\"";\n+\n+const TabActionsWrapper = styled(Flex)`\n+  border-bottom: 1px solid ${s(\""inputBorder\"")};\n+`;\n+\n+const StyledTab = styled(Tab)<{ $active: boolean }>`\n+  position: relative;\n+  font-weight: 500;\n+  font-size: 14px;\n+  cursor: var(--pointer);\n+  background: none;\n+  border: 0;\n+  border-radius: 4px 4px 0 0;\n+  padding: 8px 12px 10px;\n+  user-select: none;\n+  transition: background-color 100ms ease;\n+\n+  &: ${hover} {\n+    background-color: ${s(\""listItemHoverBackground\"")};\n+  }\n+\n+  ${({ $active }) =>\n+    $active &&\n+    css`\n+      &:after {\n+        content: \""\"";\n+        position: absolute;\n+        bottom: 0;\n+        left: 0;\n+        right: 0;\n+        height: 1px;\n+        background: ${s(\""textSecondary\"")};\n+      }\n+    `}\n+`;\n+\n+const StyledTabPanel = styled(TabPanel)`\n+  height: 300px;\n+  padding: 5px 0;\n+  overflow-y: auto;\n+`;\n+\n+const UserInfo = styled(Flex)`\n+  padding: 10px 8px;\n+`;\n+\n+export default observer(ViewReactionsDialog);\n\ndiff --git a/app/components/Table.tsx b/app/components/Table.tsx\nindex e264a73e86e9..16d3e8e8ca38 100644\n--- a/app/components/Table.tsx\n+++ b/app/components/Table.tsx\n@@ -253,7 +253,7 @@ const SortWrapper = styled(Flex)<{ $sortable: boolean }>`\n \n   &:hover {\n     background: ${(props) =>\n-      props.$sortable ? props.theme.secondaryBackground : \""none\""};\n+      props.$sortable ? props.theme.backgroundSecondary : \""none\""};\n   }\n `;\n \n\ndiff --git a/app/components/WebsocketProvider.tsx b/app/components/WebsocketProvider.tsx\nindex 9b1902424568..f4d83ef32326 100644\n--- a/app/components/WebsocketProvider.tsx\n+++ b/app/components/WebsocketProvider.tsx\n@@ -27,6 +27,7 @@ import withStores from \""~/components/withStores\"";\n import {\n   PartialExcept,\n   WebsocketCollectionUpdateIndexEvent,\n+  WebsocketCommentReactionEvent,\n   WebsocketEntitiesEvent,\n   WebsocketEntityDeletedEvent,\n } from \""~/types\"";\n@@ -351,6 +352,30 @@ class WebsocketProvider extends React.Component<Props> {\n       comments.remove(event.modelId);\n     });\n \n+    this.socket.on(\n+      \""comments.add_reaction\"",\n+      (event: WebsocketCommentReactionEvent) => {\n+        const comment = comments.get(event.commentId);\n+        comment?.updateReaction({\n+          type: \""add\"",\n+          emoji: event.emoji,\n+          user: event.user,\n+        });\n+      }\n+    );\n+\n+    this.socket.on(\n+      \""comments.remove_reaction\"",\n+      (event: WebsocketCommentReactionEvent) => {\n+        const comment = comments.get(event.commentId);\n+        comment?.updateReaction({\n+          type: \""remove\"",\n+          emoji: event.emoji,\n+          user: event.user,\n+        });\n+      }\n+    );\n+\n     this.socket.on(\""groups.create\"", (event: PartialExcept<Group, \""id\"">) => {\n       groups.add(event);\n     });\n\ndiff --git a/app/hooks/useHover.ts b/app/hooks/useHover.ts\nnew file mode 100644\nindex 000000000000..434c7120c6cd\n--- /dev/null\n+++ b/app/hooks/useHover.ts\n@@ -0,0 +1,50 @@\n+import React from \""react\"";\n+import useUnmount from \""./useUnmount\"";\n+\n+type Props = {\n+  /** Ref to the element that needs to be observed. */\n+  ref: React.RefObject<HTMLElement>;\n+  /** Duration to wait until it's considered as a hover event. */\n+  duration: number;\n+};\n+\n+/**\n+ * Hook that will trigger the first time an element is hovered.\n+ *\n+ * @returns {boolean} hovered - Signals when an element is hovered by the user.\n+ */\n+const useHover = ({ ref, duration }: Props): boolean => {\n+  const [hovered, setHovered] = React.useState(false);\n+  const timer = React.useRef<number>();\n+\n+  const onMouseEnter = React.useCallback(() => {\n+    if (timer.current) {\n+      clearTimeout(timer.current);\n+    }\n+\n+    timer.current = window.setTimeout(() => setHovered(true), duration);\n+  }, [duration]);\n+\n+  const onMouseLeave = React.useCallback(() => {\n+    if (timer.current) {\n+      clearTimeout(timer.current);\n+    }\n+  }, []);\n+\n+  useUnmount(() => {\n+    if (timer.current) {\n+      clearTimeout(timer.current);\n+    }\n+  });\n+\n+  React.useEffect(() => {\n+    if (ref.current) {\n+      ref.current.onmouseenter = onMouseEnter;\n+      ref.current.onmouseleave = onMouseLeave;\n+    }\n+  }, [ref, onMouseEnter, onMouseLeave]);\n+\n+  return hovered;\n+};\n+\n+export default useHover;\n\ndiff --git a/app/menus/CommentMenu.tsx b/app/menus/CommentMenu.tsx\nindex 2935601d37fe..d2205445cf4c 100644\n--- a/app/menus/CommentMenu.tsx\n+++ b/app/menus/CommentMenu.tsx\n@@ -15,6 +15,7 @@ import {\n   deleteCommentFactory,\n   resolveCommentFactory,\n   unresolveCommentFactory,\n+  viewCommentReactionsFactory,\n } from \""~/actions/definitions/comments\"";\n import useActionContext from \""~/hooks/useActionContext\"";\n import usePolicy from \""~/hooks/usePolicy\"";\n@@ -66,47 +67,55 @@ function CommentMenu({\n           {...menu}\n         />\n       </EventBoundary>\n-      <ContextMenu {...menu} aria-label={t(\""Comment options\"")}>\n-        <Template\n-          {...menu}\n-          items={[\n-            {\n-              type: \""button\"",\n-              title: `${t(\""Edit\"")}\u2026`,\n-              icon: <EditIcon />,\n-              onClick: onEdit,\n-              visible: can.update && !comment.isResolved,\n-            },\n-            actionToMenuItem(\n-              resolveCommentFactory({\n-                comment,\n-                onResolve: () => onUpdate({ resolved: true }),\n-              }),\n-              context\n-            ),\n-            actionToMenuItem(\n-              unresolveCommentFactory({\n-                comment,\n-                onUnresolve: () => onUpdate({ resolved: false }),\n-              }),\n-              context\n-            ),\n-            {\n-              type: \""button\"",\n-              icon: <CopyIcon />,\n-              title: t(\""Copy link\""),\n-              onClick: handleCopyLink,\n-            },\n-            {\n-              type: \""separator\"",\n-            },\n-            actionToMenuItem(\n-              deleteCommentFactory({ comment, onDelete }),\n-              context\n-            ),\n-          ]}\n-        />\n-      </ContextMenu>\n+      {menu.visible && (\n+        <ContextMenu {...menu} aria-label={t(\""Comment options\"")}>\n+          <Template\n+            {...menu}\n+            items={[\n+              {\n+                type: \""button\"",\n+                title: `${t(\""Edit\"")}\u2026`,\n+                icon: <EditIcon />,\n+                onClick: onEdit,\n+                visible: can.update && !comment.isResolved,\n+              },\n+              actionToMenuItem(\n+                resolveCommentFactory({\n+                  comment,\n+                  onResolve: () => onUpdate({ resolved: true }),\n+                }),\n+                context\n+              ),\n+              actionToMenuItem(\n+                unresolveCommentFactory({\n+                  comment,\n+                  onUnresolve: () => onUpdate({ resolved: false }),\n+                }),\n+                context\n+              ),\n+              actionToMenuItem(\n+                viewCommentReactionsFactory({\n+                  comment,\n+                }),\n+                context\n+              ),\n+              {\n+                type: \""button\"",\n+                icon: <CopyIcon />,\n+                title: t(\""Copy link\""),\n+                onClick: handleCopyLink,\n+              },\n+              {\n+                type: \""separator\"",\n+              },\n+              actionToMenuItem(\n+                deleteCommentFactory({ comment, onDelete }),\n+                context\n+              ),\n+            ]}\n+          />\n+        </ContextMenu>\n+      )}\n     </>\n   );\n }\n\ndiff --git a/app/models/Comment.ts b/app/models/Comment.ts\nindex 89461ea0978c..fa6e9d529f4e 100644\n--- a/app/models/Comment.ts\n+++ b/app/models/Comment.ts\n@@ -1,8 +1,12 @@\n import { subSeconds } from \""date-fns\"";\n-import { computed, observable } from \""mobx\"";\n+import invariant from \""invariant\"";\n+import uniq from \""lodash/uniq\"";\n+import { action, computed, observable } from \""mobx\"";\n import { now } from \""mobx-utils\"";\n-import type { ProsemirrorData } from \""@shared/types\"";\n+import { Pagination } from \""@shared/constants\"";\n+import type { ProsemirrorData, ReactionSummary } from \""@shared/types\"";\n import User from \""~/models/User\"";\n+import { client } from \""~/utils/ApiClient\"";\n import Document from \""./Document\"";\n import Model from \""./base/Model\"";\n import Field from \""./decorators/Field\"";\n@@ -84,6 +88,25 @@ class Comment extends Model {\n    */\n   resolvedById: string | null;\n \n+  /**\n+   * Active reactions for this comment.\n+   *\n+   * Note: This contains just the emoji with the associated user-ids.\n+   */\n+  @observable\n+  reactions: ReactionSummary[];\n+\n+  /**\n+   * Denotes whether the user data for the active reactions are loaded.\n+   */\n+  @observable\n+  reactedUsersLoaded: boolean = false;\n+\n+  /**\n+   * Denotes whether there is an in-flight request for loading reacted users.\n+   */\n+  private reactedUsersLoading = false;\n+\n   /**\n    * An array of users that are currently typing a reply in this comments thread.\n    */\n@@ -124,6 +147,156 @@ class Comment extends Model {\n   public unresolve() {\n     return this.store.rootStore.comments.unresolve(this.id);\n   }\n+\n+  /**\n+   * Add an emoji as a reaction to this comment.\n+   *\n+   * Optimistically updates the `reactions` cache and invokes the backend API.\n+   *\n+   * @param {Object} reaction - The reaction data.\n+   * @param {string} reaction.emoji - The emoji to add as a reaction.\n+   * @param {string} reaction.user - The user who added this reaction.\n+   */\n+  @action\n+  public addReaction = async ({\n+    emoji,\n+    user,\n+  }: {\n+    emoji: string;\n+    user: User;\n+  }) => {\n+    this.updateReaction({ type: \""add\"", emoji, user });\n+    try {\n+      await client.post(\""/comments.add_reaction\"", {\n+        id: this.id,\n+        emoji,\n+      });\n+    } catch {\n+      this.updateReaction({ type: \""remove\"", emoji, user });\n+    }\n+  };\n+\n+  /**\n+   * Remove an emoji as a reaction from this comment.\n+   *\n+   * Optimistically updates the `reactions` cache and invokes the backend API.\n+   *\n+   * @param {Object} reaction - The reaction data.\n+   * @param {string} reaction.emoji - The emoji to remove as a reaction.\n+   * @param {string} reaction.user - The user who removed this reaction.\n+   */\n+  @action\n+  public removeReaction = async ({\n+    emoji,\n+    user,\n+  }: {\n+    emoji: string;\n+    user: User;\n+  }) => {\n+    this.updateReaction({ type: \""remove\"", emoji, user });\n+    try {\n+      await client.post(\""/comments.remove_reaction\"", {\n+        id: this.id,\n+        emoji,\n+      });\n+    } catch {\n+      this.updateReaction({ type: \""add\"", emoji, user });\n+    }\n+  };\n+\n+  /**\n+   * Update the `reactions` cache.\n+   *\n+   * @param {Object} reaction - The reaction data.\n+   * @param {string} reaction.type - The type of the action.\n+   * @param {string} reaction.emoji - The emoji to update as a reaction.\n+   * @param {string} reaction.user - The user who performed this action.\n+   */\n+  @action\n+  public updateReaction = ({\n+    type,\n+    emoji,\n+    user,\n+  }: {\n+    type: \""add\"" | \""remove\"";\n+    emoji: string;\n+    user: User;\n+  }) => {\n+    const reaction = this.reactions.find((r) => r.emoji === emoji);\n+\n+    // Step 1: Update the reactions cache.\n+\n+    if (type === \""add\"") {\n+      if (!reaction) {\n+        this.reactions.push({ emoji, userIds: [user.id] });\n+      } else {\n+        reaction.userIds = uniq([...reaction.userIds, user.id]);\n+      }\n+    } else {\n+      if (reaction) {\n+        reaction.userIds = reaction.userIds.filter((id) => id !== user.id);\n+      }\n+\n+      if (reaction?.userIds.length === 0) {\n+        this.reactions = this.reactions.filter(\n+          (r) => r.emoji !== reaction.emoji\n+        );\n+      }\n+    }\n+\n+    // Step 2: Add the user to the store.\n+    this.store.rootStore.users.add(user);\n+  };\n+\n+  /**\n+   * Load the users for the active reactions.\n+   *\n+   *\n+   * @param {Object} options - Options for loading the data.\n+   * @param {string} options.limit - Per request limit for pagination.\n+   */\n+  @action\n+  loadReactedUsersData = async (\n+    { limit }: { limit: number } = { limit: Pagination.defaultLimit }\n+  ) => {\n+    if (this.reactedUsersLoading || this.reactedUsersLoaded) {\n+      return;\n+    }\n+\n+    this.reactedUsersLoading = true;\n+\n+    try {\n+      const fetchPage = async (offset: number = 0) => {\n+        const res = await client.post(\""/reactions.list\"", {\n+          commentId: this.id,\n+          offset,\n+          limit,\n+        });\n+\n+        invariant(res?.data, \""Data not available\"");\n+        // @ts-expect-error reaction from server response\n+        res.data.map((reaction) =>\n+          this.store.rootStore.users.add(reaction.user)\n+        );\n+\n+        return res.pagination;\n+      };\n+\n+      const { total } = await fetchPage();\n+\n+      const pages = Math.ceil(total / limit);\n+      const fetchPages = [];\n+      for (let page = 1; page < pages; page++) {\n+        fetchPages.push(fetchPage(page * limit));\n+      }\n+\n+      await Promise.all(fetchPages);\n+\n+      this.reactedUsersLoaded = true;\n+    } finally {\n+      this.reactedUsersLoading = false;\n+    }\n+  };\n }\n \n export default Comment;\n\ndiff --git a/app/scenes/Document/components/CommentForm.tsx b/app/scenes/Document/components/CommentForm.tsx\nindex de958150705b..c161744bb96b 100644\n--- a/app/scenes/Document/components/CommentForm.tsx\n+++ b/app/scenes/Document/components/CommentForm.tsx\n@@ -109,6 +109,7 @@ function CommentForm({\n           createdAt: new Date().toISOString(),\n           documentId,\n           data: draft,\n+          reactions: [],\n         },\n         comments\n       );\n@@ -144,6 +145,7 @@ function CommentForm({\n         parentCommentId: thread?.id,\n         documentId,\n         data: draft,\n+        reactions: [],\n       },\n       comments\n     );\n\ndiff --git a/app/scenes/Document/components/CommentThread.tsx b/app/scenes/Document/components/CommentThread.tsx\nindex 04865bb1813c..bde2dc6d6f06 100644\n--- a/app/scenes/Document/components/CommentThread.tsx\n+++ b/app/scenes/Document/components/CommentThread.tsx\n@@ -36,12 +36,16 @@ type Props = {\n   focused: boolean;\n   /** Whether the thread is displayed in a recessed/backgrounded state */\n   recessed: boolean;\n+  /** Enable scroll for the comments container */\n+  enableScroll: () => void;\n+  /** Disable scroll for the comments container */\n+  disableScroll: () => void;\n };\n \n function useTypingIndicator({\n   document,\n   comment,\n-}: Omit<Props, \""focused\"" | \""recessed\"">): [undefined, () => void] {\n+}: Pick<Props, \""document\"" | \""comment\"">): [undefined, () => void] {\n   const socket = React.useContext(WebsocketContext);\n \n   const setIsTyping = React.useMemo(\n@@ -63,6 +67,8 @@ function CommentThread({\n   document,\n   recessed,\n   focused,\n+  enableScroll,\n+  disableScroll,\n }: Props) {\n   const [focusedOnMount] = React.useState(focused);\n   const { editor } = useDocumentContext();\n@@ -202,6 +208,8 @@ function CommentThread({\n             lastOfAuthor={lastOfAuthor}\n             previousCommentCreatedAt={commentsInThread[index - 1]?.createdAt}\n             dir={document.dir}\n+            enableScroll={enableScroll}\n+            disableScroll={disableScroll}\n           />\n         );\n       })}\n\ndiff --git a/app/scenes/Document/components/CommentThreadItem.tsx b/app/scenes/Document/components/CommentThreadItem.tsx\nindex 5b24906e4509..bb053cb45317 100644\n--- a/app/scenes/Document/components/CommentThreadItem.tsx\n+++ b/app/scenes/Document/components/CommentThreadItem.tsx\n@@ -16,9 +16,12 @@ import Comment from \""~/models/Comment\"";\n import { Avatar } from \""~/components/Avatar\"";\n import ButtonSmall from \""~/components/ButtonSmall\"";\n import Flex from \""~/components/Flex\"";\n+import ReactionList from \""~/components/Reactions/ReactionList\"";\n+import ReactionPicker from \""~/components/Reactions/ReactionPicker\"";\n import Text from \""~/components/Text\"";\n import Time from \""~/components/Time\"";\n import useBoolean from \""~/hooks/useBoolean\"";\n+import useCurrentUser from \""~/hooks/useCurrentUser\"";\n import CommentMenu from \""~/menus/CommentMenu\"";\n import { hover } from \""~/styles\"";\n import CommentEditor from \""./CommentEditor\"";\n@@ -81,6 +84,10 @@ type Props = {\n   onUpdate?: (id: string, attrs: { resolved: boolean }) => void;\n   /** Text to highlight at the top of the comment */\n   highlightedText?: string;\n+  /** Enable scroll for the comments container */\n+  enableScroll: () => void;\n+  /** Disable scroll for the comments container */\n+  disableScroll: () => void;\n };\n \n function CommentThreadItem({\n@@ -94,8 +101,11 @@ function CommentThreadItem({\n   onDelete,\n   onUpdate,\n   highlightedText,\n+  enableScroll,\n+  disableScroll,\n }: Props) {\n   const { t } = useTranslation();\n+  const user = useCurrentUser();\n   const [data, setData] = React.useState(comment.data);\n   const showAuthor = firstOfAuthor;\n   const showTime = useShowTime(comment.createdAt, previousCommentCreatedAt);\n@@ -106,6 +116,20 @@ function CommentThreadItem({\n   const [isEditing, setEditing, setReadOnly] = useBoolean();\n   const formRef = React.useRef<HTMLFormElement>(null);\n \n+  const handleAddReaction = React.useCallback(\n+    async (emoji: string) => {\n+      await comment.addReaction({ emoji, user });\n+    },\n+    [comment, user]\n+  );\n+\n+  const handleRemoveReaction = React.useCallback(\n+    async (emoji: string) => {\n+      await comment.removeReaction({ emoji, user });\n+    },\n+    [comment, user]\n+  );\n+\n   const handleUpdate = React.useCallback(\n     (attrs: { resolved: boolean }) => {\n       onUpdate?.(comment.id, attrs);\n@@ -210,16 +234,43 @@ function CommentThreadItem({\n               </ButtonSmall>\n             </Flex>\n           )}\n+          {!!comment.reactions.length && (\n+            <ReactionListContainer gap={6} align=\""center\"">\n+              <ReactionList\n+                model={comment}\n+                onAddReaction={handleAddReaction}\n+                onRemoveReaction={handleRemoveReaction}\n+                picker={\n+                  !comment.isResolved ? (\n+                    <StyledReactionPicker\n+                      onSelect={handleAddReaction}\n+                      onOpen={disableScroll}\n+                      onClose={enableScroll}\n+                      size={28}\n+                    />\n+                  ) : undefined\n+                }\n+              />\n+            </ReactionListContainer>\n+          )}\n         </Body>\n         <EventBoundary>\n           {!isEditing && (\n-            <Menu\n-              comment={comment}\n-              onEdit={setEditing}\n-              onDelete={handleDelete}\n-              onUpdate={handleUpdate}\n-              dir={dir}\n-            />\n+            <Actions gap={4} dir={dir}>\n+              {!comment.isResolved && (\n+                <StyledReactionPicker\n+                  onSelect={handleAddReaction}\n+                  onOpen={disableScroll}\n+                  onClose={enableScroll}\n+                />\n+              )}\n+              <StyledMenu\n+                comment={comment}\n+                onEdit={setEditing}\n+                onDelete={handleDelete}\n+                onUpdate={handleUpdate}\n+              />\n+            </Actions>\n           )}\n         </EventBoundary>\n       </Bubble>\n@@ -257,21 +308,41 @@ const Body = styled.form`\n   border-radius: 2px;\n `;\n \n-const Menu = styled(CommentMenu)<{ dir?: \""rtl\"" | \""ltr\"" }>`\n+const StyledMenu = styled(CommentMenu)`\n+  color: ${s(\""textSecondary\"")};\n+\n+  &: ${hover}, &[aria-expanded= \""true\""] {\n+    background: ${s(\""backgroundQuaternary\"")};\n+  }\n+`;\n+\n+const StyledReactionPicker = styled(ReactionPicker)`\n+  color: ${s(\""textSecondary\"")};\n+\n+  &: ${hover}, &[aria-expanded= \""true\""] {\n+    background: ${s(\""backgroundQuaternary\"")};\n+  }\n+`;\n+\n+const Actions = styled(Flex)<{ dir?: \""rtl\"" | \""ltr\"" }>`\n   position: absolute;\n   left: ${(props) => (props.dir !== \""rtl\"" ? \""auto\"" : \""4px\"")};\n   right: ${(props) => (props.dir === \""rtl\"" ? \""auto\"" : \""4px\"")};\n   top: 4px;\n   opacity: 0;\n   transition: opacity 100ms ease-in-out;\n-  color: ${s(\""textSecondary\"")};\n+  background: ${s(\""backgroundSecondary\"")};\n+  padding-left: 4px;\n \n-  &: ${hover}, &[aria-expanded= \""true\""] {\n+  &:has(${StyledReactionPicker}[aria-expanded=\""true\""], ${StyledMenu}[aria-expanded=\""true\""]) {\n     opacity: 1;\n-    background: ${s(\""sidebarActiveBackground\"")};\n   }\n `;\n \n+const ReactionListContainer = styled(Flex)`\n+  margin-top: 6px;\n+`;\n+\n const Meta = styled(Text)`\n   margin-bottom: 2px;\n \n@@ -293,7 +364,7 @@ export const Bubble = styled(Flex)<{\n   flex-grow: 1;\n   font-size: 16px;\n   color: ${s(\""text\"")};\n-  background: ${s(\""commentBackground\"")};\n+  background: ${s(\""backgroundSecondary\"")};\n   min-width: 2em;\n   margin-bottom: 1px;\n   padding: 8px 12px;\n@@ -317,7 +388,7 @@ export const Bubble = styled(Flex)<{\n     margin-bottom: 0;\n   }\n \n-  &: ${hover} ${Menu} {\n+  &: ${hover} ${Actions} {\n     opacity: 1;\n   }\n \n\ndiff --git a/app/scenes/Document/components/Comments.tsx b/app/scenes/Document/components/Comments.tsx\nindex 8e648b17bc6e..341aca520778 100644\n--- a/app/scenes/Document/components/Comments.tsx\n+++ b/app/scenes/Document/components/Comments.tsx\n@@ -12,6 +12,7 @@ import Empty from \""~/components/Empty\"";\n import Fade from \""~/components/Fade\"";\n import Flex from \""~/components/Flex\"";\n import Scrollable from \""~/components/Scrollable\"";\n+import useBoolean from \""~/hooks/useBoolean\"";\n import useCurrentUser from \""~/hooks/useCurrentUser\"";\n import useFocusedComment from \""~/hooks/useFocusedComment\"";\n import useKeyDown from \""~/hooks/useKeyDown\"";\n@@ -32,6 +33,8 @@ function Comments() {\n   const { t } = useTranslation();\n   const match = useRouteMatch<{ documentSlug: string }>();\n   const params = useQuery();\n+  // We need to control scroll behaviour when reaction picker is opened / closed.\n+  const [scrollable, enableScroll, disableScroll] = useBoolean(true);\n   const document = documents.getByUrl(match.params.documentSlug);\n   const focusedComment = useFocusedComment();\n   const can = usePolicy(document);\n@@ -131,6 +134,8 @@ function Comments() {\n         bottomShadow={!focusedComment}\n         hiddenScrollbars\n         topShadow\n+        overflow={scrollable ? \""auto\"" : \""hidden\""}\n+        style={{ overflowX: \""hidden\"" }}\n         ref={scrollableRef}\n         onScroll={handleScroll}\n       >\n@@ -143,6 +148,8 @@ function Comments() {\n                 document={document}\n                 recessed={!!focusedComment && focusedComment.id !== thread.id}\n                 focused={focusedComment?.id === thread.id}\n+                enableScroll={enableScroll}\n+                disableScroll={disableScroll}\n               />\n             ))\n           ) : (\n\ndiff --git a/app/scenes/Document/components/Editor.tsx b/app/scenes/Document/components/Editor.tsx\nindex 304b33fce1bc..c0685513f44c 100644\n--- a/app/scenes/Document/components/Editor.tsx\n+++ b/app/scenes/Document/components/Editor.tsx\n@@ -150,6 +150,7 @@ function DocumentEditor(props: Props, ref: React.RefObject<any>) {\n           documentId: props.id,\n           createdAt: new Date(),\n           createdById,\n+          reactions: [],\n         },\n         comments\n       );\n\ndiff --git a/app/scenes/Search/components/RecentSearchListItem.tsx b/app/scenes/Search/components/RecentSearchListItem.tsx\nindex 32c719e5f071..b29a228541a5 100644\n--- a/app/scenes/Search/components/RecentSearchListItem.tsx\n+++ b/app/scenes/Search/components/RecentSearchListItem.tsx\n@@ -81,7 +81,7 @@ const RecentSearch = styled(Link)`\n   &:focus,\n   &:${hover} {\n     color: ${s(\""text\"")};\n-    background: ${s(\""secondaryBackground\"")};\n+    background: ${s(\""backgroundSecondary\"")};\n \n     ${RemoveButton} {\n       opacity: 1;\n\ndiff --git a/app/scenes/Settings/components/DropToImport.tsx b/app/scenes/Settings/components/DropToImport.tsx\nindex f112fd110a73..3219140ef0de 100644\n--- a/app/scenes/Settings/components/DropToImport.tsx\n+++ b/app/scenes/Settings/components/DropToImport.tsx\n@@ -138,7 +138,7 @@ const DropzoneContainer = styled.div<{\n }>`\n   background: ${(props) =>\n     props.$isDragActive\n-      ? props.theme.secondaryBackground\n+      ? props.theme.backgroundSecondary\n       : props.theme.background};\n   border-radius: 8px;\n   border: 1px dashed ${s(\""divider\"")};\n@@ -149,7 +149,7 @@ const DropzoneContainer = styled.div<{\n   opacity: ${(props) => (props.$disabled ? 0.5 : 1)};\n \n   &:hover {\n-    background: ${s(\""secondaryBackground\"")};\n+    background: ${s(\""backgroundSecondary\"")};\n   }\n `;\n \n\ndiff --git a/app/scenes/Settings/components/ImageInput.tsx b/app/scenes/Settings/components/ImageInput.tsx\nindex 9824a0176498..9d795cad0d11 100644\n--- a/app/scenes/Settings/components/ImageInput.tsx\n+++ b/app/scenes/Settings/components/ImageInput.tsx\n@@ -47,7 +47,7 @@ const ImageBox = styled(Flex)`\n   position: relative;\n   font-size: 14px;\n   border-radius: 8px;\n-  box-shadow: 0 0 0 1px ${s(\""secondaryBackground\"")};\n+  box-shadow: 0 0 0 1px ${s(\""backgroundSecondary\"")};\n   background: ${s(\""background\"")};\n   overflow: hidden;\n \n\ndiff --git a/app/types.ts b/app/types.ts\nindex eb6e48939780..a7b4f662ea28 100644\n--- a/app/types.ts\n+++ b/app/types.ts\n@@ -12,6 +12,7 @@ import Document from \""./models/Document\"";\n import FileOperation from \""./models/FileOperation\"";\n import Pin from \""./models/Pin\"";\n import Star from \""./models/Star\"";\n+import User from \""./models/User\"";\n import UserMembership from \""./models/UserMembership\"";\n \n export type PartialExcept<T, K extends keyof T> = Partial<Omit<T, K>> &\n@@ -188,6 +189,12 @@ export type WebsocketCollectionUpdateIndexEvent = {\n   index: string;\n };\n \n+export type WebsocketCommentReactionEvent = {\n+  emoji: string;\n+  commentId: string;\n+  user: User;\n+};\n+\n export type WebsocketEvent =\n   | PartialExcept<Pin, \""id\"">\n   | PartialExcept<Star, \""id\"">\n@@ -195,7 +202,8 @@ export type WebsocketEvent =\n   | PartialExcept<UserMembership, \""id\"">\n   | WebsocketCollectionUpdateIndexEvent\n   | WebsocketEntityDeletedEvent\n-  | WebsocketEntitiesEvent;\n+  | WebsocketEntitiesEvent\n+  | WebsocketCommentReactionEvent;\n \n export type AwarenessChangeEvent = {\n   states: { user?: { id: string }; cursor: any; scrollY: number | undefined }[];\n\ndiff --git a/app/typings/styled-components.d.ts b/app/typings/styled-components.d.ts\nindex 0a5da6e6fa69..c8ea1e7fc712 100644\n--- a/app/typings/styled-components.d.ts\n+++ b/app/typings/styled-components.d.ts\n@@ -120,10 +120,12 @@ declare module \""styled-components\"" {\n       Breakpoints,\n       EditorTheme {\n     background: string;\n+    backgroundSecondary: string;\n+    backgroundTertiary: string;\n+    backgroundQuaternary: string;\n     backgroundTransition: string;\n     accent: string;\n     accentText: string;\n-    secondaryBackground: string;\n     link: string;\n     text: string;\n     cursor: string;\n@@ -135,7 +137,6 @@ declare module \""styled-components\"" {\n     textDiffDeletedBackground: string;\n     placeholder: string;\n     commentMarkBackground: string;\n-    commentBackground: string;\n     sidebarBackground: string;\n     sidebarActiveBackground: string;\n     sidebarControlHoverBackground: string;\n\ndiff --git a/package.json b/package.json\nindex 3afa29a733ac..66ff408afaaa 100644\n--- a/package.json\n+++ b/package.json\n@@ -213,6 +213,7 @@\n     \""resolve-path\"": \""^1.4.0\"",\n     \""rfc6902\"": \""^5.1.1\"",\n     \""sanitize-filename\"": \""^1.6.3\"",\n+    \""scroll-into-view-if-needed\"": \""^3.1.0\"",\n     \""semver\"": \""^7.6.2\"",\n     \""sequelize\"": \""^6.37.3\"",\n     \""sequelize-cli\"": \""^6.6.2\"",\n@@ -220,7 +221,6 @@\n     \""sequelize-typescript\"": \""^2.1.6\"",\n     \""slug\"": \""^5.3.0\"",\n     \""slugify\"": \""^1.6.6\"",\n-    \""scroll-into-view-if-needed\"": \""^3.1.0\"",\n     \""socket.io\"": \""^4.7.5\"",\n     \""socket.io-client\"": \""^4.8.0\"",\n     \""socket.io-redis\"": \""^6.1.1\"",\n\ndiff --git a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\nindex 158750a410b0..6e78f182a71b 100644\n--- a/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n+++ b/plugins/webhooks/server/tasks/DeliverWebhookTask.ts\n@@ -178,6 +178,10 @@ export default class DeliverWebhookTask extends BaseTask<Props> {\n       case \""comments.delete\"":\n         await this.handleCommentEvent(subscription, event);\n         return;\n+      case \""comments.add_reaction\"":\n+      case \""comments.remove_reaction\"":\n+        // Ignored\n+        return;\n       case \""groups.create\"":\n       case \""groups.update\"":\n       case \""groups.delete\"":\n\ndiff --git a/server/emails/templates/components/Diff.tsx b/server/emails/templates/components/Diff.tsx\nindex 2228ec4d6224..652f5aed1c19 100644\n--- a/server/emails/templates/components/Diff.tsx\n+++ b/server/emails/templates/components/Diff.tsx\n@@ -8,7 +8,7 @@ type Props = {\n \n export default ({ children, ...rest }: Props) => {\n   const style = {\n-    border: `1.5px solid ${theme.secondaryBackground}`,\n+    border: `1.5px solid ${theme.backgroundSecondary}`,\n     borderRadius: \""4px\"",\n     padding: \"".75em 1em\"",\n     color: theme.text,\n\ndiff --git a/server/migrations/20241013080608-create-reactions.js b/server/migrations/20241013080608-create-reactions.js\nnew file mode 100644\nindex 000000000000..8a1288bd146b\n--- /dev/null\n+++ b/server/migrations/20241013080608-create-reactions.js\n@@ -0,0 +1,74 @@\n+\""use strict\"";\n+\n+/** @type {import('sequelize-cli').Migration} */\n+module.exports = {\n+  async up(queryInterface, Sequelize) {\n+    await queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.createTable(\n+        \""reactions\"",\n+        {\n+          id: {\n+            type: Sequelize.UUID,\n+            allowNull: false,\n+            primaryKey: true,\n+          },\n+          emoji: {\n+            type: Sequelize.STRING,\n+            allowNull: false,\n+          },\n+          userId: {\n+            type: Sequelize.UUID,\n+            allowNull: false,\n+            onDelete: \""cascade\"",\n+            references: {\n+              model: \""users\"",\n+            },\n+          },\n+          commentId: {\n+            type: Sequelize.UUID,\n+            allowNull: false,\n+            onDelete: \""cascade\"",\n+            references: {\n+              model: \""comments\"",\n+            },\n+          },\n+          createdAt: {\n+            type: Sequelize.DATE,\n+            allowNull: false,\n+          },\n+          updatedAt: {\n+            type: Sequelize.DATE,\n+            allowNull: false,\n+          },\n+        },\n+        { transaction }\n+      );\n+\n+      await queryInterface.addIndex(\""reactions\"", [\""emoji\"", \""userId\""], {\n+        transaction,\n+      });\n+      await queryInterface.addIndex(\""reactions\"", [\""commentId\""], {\n+        transaction,\n+      });\n+\n+      await queryInterface.addColumn(\n+        \""comments\"",\n+        \""reactions\"",\n+        {\n+          type: Sequelize.JSONB,\n+          allowNull: true,\n+        },\n+        { transaction }\n+      );\n+    });\n+  },\n+\n+  async down(queryInterface, Sequelize) {\n+    queryInterface.sequelize.transaction(async transaction => {\n+      await queryInterface.dropTable(\""reactions\"", { transaction });\n+      await queryInterface.removeColumn(\""comments\"", \""reactions\"", {\n+        transaction,\n+      });\n+    });\n+  },\n+};\n\ndiff --git a/server/models/Comment.ts b/server/models/Comment.ts\nindex d13089e28fed..399c5837633b 100644\n--- a/server/models/Comment.ts\n+++ b/server/models/Comment.ts\n@@ -9,7 +9,7 @@ import {\n   Length,\n   DefaultScope,\n } from \""sequelize-typescript\"";\n-import type { ProsemirrorData } from \""@shared/types\"";\n+import type { ProsemirrorData, ReactionSummary } from \""@shared/types\"";\n import { ProsemirrorHelper } from \""@shared/utils/ProsemirrorHelper\"";\n import { CommentValidation } from \""@shared/validations\"";\n import { schema } from \""@server/editor\"";\n@@ -51,6 +51,9 @@ class Comment extends ParanoidModel<\n   @Column(DataType.JSONB)\n   data: ProsemirrorData;\n \n+  @Column(DataType.JSONB)\n+  reactions: ReactionSummary[] | null;\n+\n   // associations\n \n   @BelongsTo(() => User, \""createdById\"")\n\ndiff --git a/server/models/Reaction.ts b/server/models/Reaction.ts\nnew file mode 100644\nindex 000000000000..e4ef1c128b0b\n--- /dev/null\n+++ b/server/models/Reaction.ts\n@@ -0,0 +1,128 @@\n+import uniq from \""lodash/uniq\"";\n+import {\n+  InferAttributes,\n+  InferCreationAttributes,\n+  type SaveOptions,\n+} from \""sequelize\"";\n+import {\n+  AfterCreate,\n+  AfterDestroy,\n+  BelongsTo,\n+  Column,\n+  DataType,\n+  ForeignKey,\n+  Table,\n+} from \""sequelize-typescript\"";\n+import Comment from \""./Comment\"";\n+import User from \""./User\"";\n+import IdModel from \""./base/IdModel\"";\n+import Fix from \""./decorators/Fix\"";\n+import Length from \""./validators/Length\"";\n+\n+@Table({ tableName: \""reactions\"", modelName: \""reaction\"" })\n+@Fix\n+class Reaction extends IdModel<\n+  InferAttributes<Reaction>,\n+  Partial<InferCreationAttributes<Reaction>>\n+> {\n+  @Length({\n+    max: 50,\n+    msg: `emoji must be 50 characters or less`,\n+  })\n+  @Column(DataType.STRING)\n+  emoji: string;\n+\n+  // associations\n+\n+  @BelongsTo(() => User)\n+  user: User;\n+\n+  @ForeignKey(() => User)\n+  @Column(DataType.UUID)\n+  userId: string;\n+\n+  @BelongsTo(() => Comment)\n+  comment: Comment;\n+\n+  @ForeignKey(() => Comment)\n+  @Column(DataType.UUID)\n+  commentId: string;\n+\n+  @AfterCreate\n+  public static async addReactionToCommentCache(\n+    model: Reaction,\n+    options: SaveOptions<Reaction>\n+  ) {\n+    const { transaction } = options;\n+\n+    const lock = transaction\n+      ? {\n+          level: transaction.LOCK.UPDATE,\n+          of: Comment,\n+        }\n+      : undefined;\n+\n+    const comment = await Comment.findByPk(model.commentId, {\n+      transaction,\n+      lock,\n+    });\n+\n+    if (!comment) {\n+      return;\n+    }\n+\n+    const reactions = comment.reactions ?? [];\n+    const reaction = reactions.find((r) => r.emoji === model.emoji);\n+\n+    if (!reaction) {\n+      reactions.push({ emoji: model.emoji, userIds: [model.userId] });\n+    } else {\n+      reaction.userIds = uniq([...reaction.userIds, model.userId]);\n+    }\n+\n+    comment.reactions = reactions;\n+    comment.changed(\""reactions\"", true);\n+    await comment.save({ fields: [\""reactions\""], transaction, silent: true });\n+  }\n+\n+  @AfterDestroy\n+  public static async removeReactionFromCommentCache(\n+    model: Reaction,\n+    options: SaveOptions<Reaction>\n+  ) {\n+    const { transaction } = options;\n+\n+    const lock = transaction\n+      ? {\n+          level: transaction.LOCK.UPDATE,\n+          of: Comment,\n+        }\n+      : undefined;\n+\n+    const comment = await Comment.findByPk(model.commentId, {\n+      transaction,\n+      lock,\n+    });\n+\n+    if (!comment) {\n+      return;\n+    }\n+\n+    let reactions = comment.reactions ?? [];\n+    const reaction = reactions.find((r) => r.emoji === model.emoji);\n+\n+    if (reaction) {\n+      reaction.userIds = reaction.userIds.filter((id) => id !== model.userId);\n+\n+      if (reaction.userIds.length === 0) {\n+        reactions = reactions.filter((r) => r.emoji !== model.emoji);\n+      }\n+    }\n+\n+    comment.reactions = reactions;\n+    comment.changed(\""reactions\"", true);\n+    await comment.save({ fields: [\""reactions\""], transaction, silent: true });\n+  }\n+}\n+\n+export default Reaction;\n\ndiff --git a/server/models/index.ts b/server/models/index.ts\nindex 6679ebe7966e..3edc7b7fdb2e 100644\n--- a/server/models/index.ts\n+++ b/server/models/index.ts\n@@ -32,6 +32,8 @@ export { default as Notification } from \""./Notification\"";\n \n export { default as Pin } from \""./Pin\"";\n \n+export { default as Reaction } from \""./Reaction\"";\n+\n export { default as Revision } from \""./Revision\"";\n \n export { default as SearchQuery } from \""./SearchQuery\"";\n\ndiff --git a/server/policies/comment.ts b/server/policies/comment.ts\nindex 14abf24e4b49..5c524f866035 100644\n--- a/server/policies/comment.ts\n+++ b/server/policies/comment.ts\n@@ -30,3 +30,10 @@ allow(User, [\""update\"", \""delete\""], Comment, (actor, comment) =>\n     or(actor.isAdmin, actor?.id === comment?.createdById)\n   )\n );\n+\n+allow(\n+  User,\n+  [\""readReaction\"", \""addReaction\"", \""removeReaction\""],\n+  Comment,\n+  (actor, comment) => isTeamModel(actor, comment?.createdBy)\n+);\n\ndiff --git a/server/policies/index.ts b/server/policies/index.ts\nindex c57f9042fdec..82e5cf5ba4c7 100644\n--- a/server/policies/index.ts\n+++ b/server/policies/index.ts\n@@ -11,6 +11,7 @@ import \""./document\"";\n import \""./fileOperation\"";\n import \""./integration\"";\n import \""./pins\"";\n+import \""./reaction\"";\n import \""./searchQuery\"";\n import \""./share\"";\n import \""./star\"";\n\ndiff --git a/server/policies/reaction.ts b/server/policies/reaction.ts\nnew file mode 100644\nindex 000000000000..95b3fdb750a2\n--- /dev/null\n+++ b/server/policies/reaction.ts\n@@ -0,0 +1,5 @@\n+import { User, Reaction } from \""@server/models\"";\n+import { allow } from \""./cancan\"";\n+import { isOwner } from \""./utils\"";\n+\n+allow(User, \""delete\"", Reaction, isOwner);\n\ndiff --git a/server/presenters/comment.ts b/server/presenters/comment.ts\nindex 9267fe7a6648..06c10e8bb278 100644\n--- a/server/presenters/comment.ts\n+++ b/server/presenters/comment.ts\n@@ -14,5 +14,6 @@ export default function present(comment: Comment) {\n     resolvedById: comment.resolvedById,\n     createdAt: comment.createdAt,\n     updatedAt: comment.updatedAt,\n+    reactions: comment.reactions ?? [],\n   };\n }\n\ndiff --git a/server/presenters/index.ts b/server/presenters/index.ts\nindex 7834353b1fb4..5b38cfee6d29 100644\n--- a/server/presenters/index.ts\n+++ b/server/presenters/index.ts\n@@ -16,6 +16,7 @@ import presentPin from \""./pin\"";\n import presentPolicies from \""./policy\"";\n import presentProviderConfig from \""./providerConfig\"";\n import presentPublicTeam from \""./publicTeam\"";\n+import presentReaction from \""./reaction\"";\n import presentRevision from \""./revision\"";\n import presentSearchQuery from \""./searchQuery\"";\n import presentShare from \""./share\"";\n@@ -44,6 +45,7 @@ export {\n   presentPin,\n   presentPolicies,\n   presentProviderConfig,\n+  presentReaction,\n   presentRevision,\n   presentSearchQuery,\n   presentShare,\n\ndiff --git a/server/presenters/reaction.ts b/server/presenters/reaction.ts\nnew file mode 100644\nindex 000000000000..60e66a2a453c\n--- /dev/null\n+++ b/server/presenters/reaction.ts\n@@ -0,0 +1,14 @@\n+import { Reaction } from \""@server/models\"";\n+import presentUser from \""./user\"";\n+\n+export default function present(reaction: Reaction) {\n+  return {\n+    id: reaction.id,\n+    emoji: reaction.emoji,\n+    commentId: reaction.commentId,\n+    user: presentUser(reaction.user),\n+    userId: reaction.userId,\n+    createdAt: reaction.createdAt,\n+    updatedAt: reaction.updatedAt,\n+  };\n+}\n\ndiff --git a/server/queues/processors/WebsocketsProcessor.ts b/server/queues/processors/WebsocketsProcessor.ts\nindex 87c730b2dd71..61b22f99b06f 100644\n--- a/server/queues/processors/WebsocketsProcessor.ts\n+++ b/server/queues/processors/WebsocketsProcessor.ts\n@@ -505,6 +505,37 @@ export default class WebsocketsProcessor {\n         });\n       }\n \n+      case \""comments.add_reaction\"":\n+      case \""comments.remove_reaction\"": {\n+        const comment = await Comment.findByPk(event.modelId, {\n+          include: [\n+            {\n+              model: Document.scope([\""withoutState\"", \""withDrafts\""]),\n+              as: \""document\"",\n+              required: true,\n+            },\n+          ],\n+        });\n+        if (!comment) {\n+          return;\n+        }\n+\n+        const user = await User.findByPk(event.actorId);\n+        if (!user) {\n+          return;\n+        }\n+\n+        const channels = await this.getDocumentEventChannels(\n+          event,\n+          comment.document\n+        );\n+        return socketio.to(channels).emit(event.name, {\n+          emoji: event.data.emoji,\n+          commentId: event.modelId,\n+          user: presentUser(user),\n+        });\n+      }\n+\n       case \""notifications.create\"":\n       case \""notifications.update\"": {\n         const notification = await Notification.findByPk(event.modelId);\n\ndiff --git a/server/routes/api/comments/comments.ts b/server/routes/api/comments/comments.ts\nindex 856204d8db74..d81875e4b4c2 100644\n--- a/server/routes/api/comments/comments.ts\n+++ b/server/routes/api/comments/comments.ts\n@@ -9,7 +9,7 @@ import { feature } from \""@server/middlewares/feature\"";\n import { rateLimiter } from \""@server/middlewares/rateLimiter\"";\n import { transaction } from \""@server/middlewares/transaction\"";\n import validate from \""@server/middlewares/validate\"";\n-import { Document, Comment, Collection, Event } from \""@server/models\"";\n+import { Document, Comment, Collection, Event, Reaction } from \""@server/models\"";\n import { authorize } from \""@server/policies\"";\n import { presentComment, presentPolicies } from \""@server/presenters\"";\n import { APIContext } from \""@server/types\"";\n@@ -352,4 +352,117 @@ router.post(\n   }\n );\n \n+router.post(\n+  \""comments.add_reaction\"",\n+  rateLimiter(RateLimiterStrategy.TwentyFivePerMinute),\n+  auth(),\n+  feature(TeamPreference.Commenting),\n+  validate(T.CommentsReactionSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.CommentsReactionReq>) => {\n+    const { id, emoji } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n+\n+    const comment = await Comment.findByPk(id, {\n+      transaction,\n+      rejectOnEmpty: true,\n+      lock: {\n+        level: transaction.LOCK.UPDATE,\n+        of: Comment,\n+      },\n+    });\n+    const document = await Document.findByPk(comment.documentId, {\n+      userId: user.id,\n+      transaction,\n+    });\n+\n+    authorize(user, \""comment\"", document);\n+    authorize(user, \""addReaction\"", comment);\n+\n+    const [, created] = await Reaction.findOrCreate({\n+      where: {\n+        emoji,\n+        userId: user.id,\n+        commentId: id,\n+      },\n+      transaction,\n+    });\n+\n+    if (created) {\n+      await Event.createFromContext(\n+        ctx,\n+        {\n+          name: \""comments.add_reaction\"",\n+          modelId: comment.id,\n+          documentId: comment.documentId,\n+          data: {\n+            emoji,\n+          },\n+        },\n+        { transaction }\n+      );\n+    }\n+\n+    ctx.body = {\n+      success: true,\n+    };\n+  }\n+);\n+\n+router.post(\n+  \""comments.remove_reaction\"",\n+  rateLimiter(RateLimiterStrategy.TwentyFivePerMinute),\n+  auth(),\n+  feature(TeamPreference.Commenting),\n+  validate(T.CommentsReactionSchema),\n+  transaction(),\n+  async (ctx: APIContext<T.CommentsReactionReq>) => {\n+    const { id, emoji } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+    const { transaction } = ctx.state;\n+\n+    const comment = await Comment.findByPk(id, {\n+      transaction,\n+      rejectOnEmpty: true,\n+      lock: {\n+        level: transaction.LOCK.UPDATE,\n+        of: Comment,\n+      },\n+    });\n+    const document = await Document.findByPk(comment.documentId, {\n+      userId: user.id,\n+      transaction,\n+    });\n+\n+    authorize(user, \""comment\"", document);\n+    authorize(user, \""removeReaction\"", comment);\n+\n+    const reaction = await Reaction.findOne({\n+      where: { emoji, userId: user.id, commentId: id },\n+      transaction,\n+    });\n+    authorize(user, \""delete\"", reaction);\n+\n+    await reaction.destroy({ transaction });\n+\n+    await Event.createFromContext(\n+      ctx,\n+      {\n+        name: \""comments.remove_reaction\"",\n+        modelId: comment.id,\n+        documentId: comment.documentId,\n+        data: {\n+          emoji,\n+        },\n+      },\n+      { transaction }\n+    );\n+\n+    ctx.body = {\n+      success: true,\n+    };\n+  }\n+);\n+\n export default router;\n\ndiff --git a/server/routes/api/comments/schema.ts b/server/routes/api/comments/schema.ts\nindex 6518054fd19f..aae839fc15de 100644\n--- a/server/routes/api/comments/schema.ts\n+++ b/server/routes/api/comments/schema.ts\n@@ -1,3 +1,4 @@\n+import emojiRegex from \""emoji-regex\"";\n import { z } from \""zod\"";\n import { CommentStatusFilter } from \""@shared/types\"";\n import { BaseSchema, ProsemirrorSchema } from \""@server/routes/api/schema\"";\n@@ -86,3 +87,12 @@ export const CommentsUnresolveSchema = z.object({\n });\n \n export type CommentsUnresolveReq = z.infer<typeof CommentsUnresolveSchema>;\n+\n+export const CommentsReactionSchema = z.object({\n+  body: BaseIdSchema.extend({\n+    /**  Emoji that's added to (or) removed from a comment as a reaction. */\n+    emoji: z.string().regex(emojiRegex()),\n+  }),\n+});\n+\n+export type CommentsReactionReq = z.infer<typeof CommentsReactionSchema>;\n\ndiff --git a/server/routes/api/index.ts b/server/routes/api/index.ts\nindex ccb575a8558b..abad92bbe54e 100644\n--- a/server/routes/api/index.ts\n+++ b/server/routes/api/index.ts\n@@ -27,6 +27,7 @@ import apiTracer from \""./middlewares/apiTracer\"";\n import editor from \""./middlewares/editor\"";\n import notifications from \""./notifications\"";\n import pins from \""./pins\"";\n+import reactions from \""./reactions\"";\n import revisions from \""./revisions\"";\n import searches from \""./searches\"";\n import shares from \""./shares\"";\n@@ -91,6 +92,7 @@ router.use(\""/\"", groupMemberships.routes());\n router.use(\""/\"", fileOperationsRoute.routes());\n router.use(\""/\"", urls.routes());\n router.use(\""/\"", userMemberships.routes());\n+router.use(\""/\"", reactions.routes());\n \n if (!env.isCloudHosted) {\n   router.use(\""/\"", installation.routes());\n\ndiff --git a/server/routes/api/reactions/index.ts b/server/routes/api/reactions/index.ts\nnew file mode 100644\nindex 000000000000..79153411be0a\n--- /dev/null\n+++ b/server/routes/api/reactions/index.ts\n@@ -0,0 +1 @@\n+export { default } from \""./reactions\"";\n\ndiff --git a/server/routes/api/reactions/reactions.ts b/server/routes/api/reactions/reactions.ts\nnew file mode 100644\nindex 000000000000..e72380220dcf\n--- /dev/null\n+++ b/server/routes/api/reactions/reactions.ts\n@@ -0,0 +1,65 @@\n+import Router from \""koa-router\"";\n+import { WhereOptions } from \""sequelize\"";\n+import auth from \""@server/middlewares/authentication\"";\n+import validate from \""@server/middlewares/validate\"";\n+import { Comment, Document, Reaction, User } from \""@server/models\"";\n+import { authorize } from \""@server/policies\"";\n+import { presentReaction } from \""@server/presenters\"";\n+import { APIContext } from \""@server/types\"";\n+import pagination from \""../middlewares/pagination\"";\n+import * as T from \""./schema\"";\n+\n+const router = new Router();\n+\n+router.post(\n+  \""reactions.list\"",\n+  auth(),\n+  pagination(),\n+  validate(T.ReactionsListSchema),\n+  async (ctx: APIContext<T.ReactionsListReq>) => {\n+    const { commentId } = ctx.input.body;\n+    const { user } = ctx.state.auth;\n+\n+    const comment = await Comment.findByPk(commentId, {\n+      rejectOnEmpty: true,\n+    });\n+    const document = await Document.findByPk(comment.documentId, {\n+      userId: user.id,\n+    });\n+\n+    authorize(user, \""readReaction\"", comment);\n+    authorize(user, \""read\"", document);\n+\n+    const where: WhereOptions<Reaction> = {\n+      commentId,\n+    };\n+\n+    const include = [\n+      {\n+        model: User,\n+        required: true,\n+      },\n+    ];\n+\n+    const [reactions, total] = await Promise.all([\n+      Reaction.findAll({\n+        where,\n+        include,\n+        order: [[\""createdAt\"", \""DESC\""]],\n+        offset: ctx.state.pagination.offset,\n+        limit: ctx.state.pagination.limit,\n+      }),\n+      Reaction.count({\n+        where,\n+        include,\n+      }),\n+    ]);\n+\n+    ctx.body = {\n+      pagination: { ...ctx.state.pagination, total },\n+      data: reactions.map(presentReaction),\n+    };\n+  }\n+);\n+\n+export default router;\n\ndiff --git a/server/routes/api/reactions/schema.ts b/server/routes/api/reactions/schema.ts\nnew file mode 100644\nindex 000000000000..b5b35346844a\n--- /dev/null\n+++ b/server/routes/api/reactions/schema.ts\n@@ -0,0 +1,11 @@\n+import { z } from \""zod\"";\n+import { BaseSchema } from \""../schema\"";\n+\n+export const ReactionsListSchema = BaseSchema.extend({\n+  body: z.object({\n+    /** Id of the comment to list reactions for. */\n+    commentId: z.string().uuid(),\n+  }),\n+});\n+\n+export type ReactionsListReq = z.infer<typeof ReactionsListSchema>;\n\ndiff --git a/server/types.ts b/server/types.ts\nindex 56a866a94e9a..07bec087888f 100644\n--- a/server/types.ts\n+++ b/server/types.ts\n@@ -379,6 +379,15 @@ export type CommentUpdateEvent = BaseEvent<Comment> & {\n   };\n };\n \n+export type CommentReactionEvent = BaseEvent<Comment> & {\n+  name: \""comments.add_reaction\"" | \""comments.remove_reaction\"";\n+  modelId: string;\n+  documentId: string;\n+  data: {\n+    emoji: string;\n+  };\n+};\n+\n export type CommentEvent =\n   | (BaseEvent<Comment> & {\n       name: \""comments.create\"";\n@@ -393,7 +402,8 @@ export type CommentEvent =\n       documentId: string;\n       actorId: string;\n       collectionId: string;\n-    });\n+    })\n+  | CommentReactionEvent;\n \n export type StarEvent = BaseEvent<Star> & {\n   name: \""stars.create\"" | \""stars.update\"" | \""stars.delete\"";\n\ndiff --git a/shared/editor/components/Frame.tsx b/shared/editor/components/Frame.tsx\nindex 91ee0ea2549f..6b8ab66beba6 100644\n--- a/shared/editor/components/Frame.tsx\n+++ b/shared/editor/components/Frame.tsx\n@@ -155,7 +155,7 @@ const Bar = styled.div`\n   display: flex;\n   align-items: center;\n   border-top: 1px solid ${(props) => props.theme.embedBorder};\n-  background: ${s(\""secondaryBackground\"")};\n+  background: ${s(\""backgroundSecondary\"")};\n   color: ${s(\""textSecondary\"")};\n   padding: 0 8px;\n   border-bottom-left-radius: 6px;\n\ndiff --git a/shared/editor/components/Image.tsx b/shared/editor/components/Image.tsx\nindex e416c621e512..6190cab71cf7 100644\n--- a/shared/editor/components/Image.tsx\n+++ b/shared/editor/components/Image.tsx\n@@ -150,7 +150,7 @@ const Error = styled(Flex)`\n   max-width: 100%;\n   color: ${s(\""textTertiary\"")};\n   font-size: 14px;\n-  background: ${s(\""secondaryBackground\"")};\n+  background: ${s(\""backgroundSecondary\"")};\n   border-radius: 4px;\n   min-width: 33vw;\n   height: 80px;\n\ndiff --git a/shared/editor/components/Styles.ts b/shared/editor/components/Styles.ts\nindex 55c071de13b5..bf3c85ead152 100644\n--- a/shared/editor/components/Styles.ts\n+++ b/shared/editor/components/Styles.ts\n@@ -1770,7 +1770,7 @@ table {\n   &:focus {\n     cursor: var(--pointer);\n     color: ${props.theme.text};\n-    background: ${props.theme.secondaryBackground};\n+    background: ${props.theme.backgroundSecondary};\n   }\n }\n \n\ndiff --git a/shared/editor/components/Widget.tsx b/shared/editor/components/Widget.tsx\nindex 74fddb8f8746..ac0c14851a8f 100644\n--- a/shared/editor/components/Widget.tsx\n+++ b/shared/editor/components/Widget.tsx\n@@ -104,7 +104,7 @@ const Wrapper = styled.a`\n       &:active {\n         cursor: pointer !important;\n         text-decoration: none !important;\n-        background: ${s(\""secondaryBackground\"")};\n+        background: ${s(\""backgroundSecondary\"")};\n \n         ${Children} {\n           opacity: 1;\n\ndiff --git a/shared/i18n/locales/en_US/translation.json b/shared/i18n/locales/en_US/translation.json\nindex 5503ca4a4c9f..494796994406 100644\n--- a/shared/i18n/locales/en_US/translation.json\n+++ b/shared/i18n/locales/en_US/translation.json\n@@ -25,6 +25,8 @@\n   \""Mark as resolved\"": \""Mark as resolved\"",\n   \""Thread resolved\"": \""Thread resolved\"",\n   \""Mark as unresolved\"": \""Mark as unresolved\"",\n+  \""View reactions\"": \""View reactions\"",\n+  \""Reactions\"": \""Reactions\"",\n   \""Copy ID\"": \""Copy ID\"",\n   \""Clear IndexedDB cache\"": \""Clear IndexedDB cache\"",\n   \""IndexedDB cache cleared\"": \""IndexedDB cache cleared\"",\n@@ -299,6 +301,13 @@\n   \""Mark all as read\"": \""Mark all as read\"",\n   \""You're all caught up\"": \""You're all caught up\"",\n   \""Documents\"": \""Documents\"",\n+  \""{{ username }} reacted with {{ emoji }}\"": \""{{ username }} reacted with {{ emoji }}\"",\n+  \""{{ firstUsername }} and {{ secondUsername }} reacted with {{ emoji }}\"": \""{{ firstUsername }} and {{ secondUsername }} reacted with {{ emoji }}\"",\n+  \""{{ firstUsername }} and {{ count }} others reacted with {{ emoji }}\"": \""{{ firstUsername }} and {{ count }} other reacted with {{ emoji }}\"",\n+  \""{{ firstUsername }} and {{ count }} others reacted with {{ emoji }}_plural\"": \""{{ firstUsername }} and {{ count }} others reacted with {{ emoji }}\"",\n+  \""Reaction picker\"": \""Reaction picker\"",\n+  \""Could not load reactions\"": \""Could not load reactions\"",\n+  \""Reaction\"": \""Reaction\"",\n   \""Results\"": \""Results\"",\n   \""No results for {{query}}\"": \""No results for {{query}}\"",\n   \""Manage\"": \""Manage\"",\n\ndiff --git a/shared/styles/theme.ts b/shared/styles/theme.ts\nindex 35b410ddeaf0..f054cc50c869 100644\n--- a/shared/styles/theme.ts\n+++ b/shared/styles/theme.ts\n@@ -111,7 +111,9 @@ export const buildLightTheme = (input: Partial<Colors>): DefaultTheme => {\n     ...colors,\n     isDark: false,\n     background: colors.white,\n-    secondaryBackground: colors.warmGrey,\n+    backgroundSecondary: colors.warmGrey,\n+    backgroundTertiary: \""#d7e0ea\"",\n+    backgroundQuaternary: darken(0.05, \""#d7e0ea\""),\n     link: colors.accent,\n     cursor: colors.almostBlack,\n     text: colors.almostBlack,\n@@ -130,8 +132,6 @@ export const buildLightTheme = (input: Partial<Colors>): DefaultTheme => {\n     backdrop: \""rgba(0, 0, 0, 0.2)\"",\n     shadow: \""rgba(0, 0, 0, 0.2)\"",\n \n-    commentBackground: colors.warmGrey,\n-\n     modalBackdrop: \""rgba(0, 0, 0, 0.15)\"",\n     modalBackground: colors.white,\n     modalShadow:\n@@ -173,7 +173,9 @@ export const buildDarkTheme = (input: Partial<Colors>): DefaultTheme => {\n     ...colors,\n     isDark: true,\n     background: colors.almostBlack,\n-    secondaryBackground: colors.black50,\n+    backgroundSecondary: \""#1f232e\"",\n+    backgroundTertiary: \""#2a2f3e\"",\n+    backgroundQuaternary: lighten(0.1, \""#2a2f3e\""),\n     link: \""#137FFB\"",\n     text: colors.almostWhite,\n     cursor: colors.almostWhite,\n@@ -192,8 +194,6 @@ export const buildDarkTheme = (input: Partial<Colors>): DefaultTheme => {\n     backdrop: \""rgba(0, 0, 0, 0.5)\"",\n     shadow: \""rgba(0, 0, 0, 0.6)\"",\n \n-    commentBackground: \""#1f232e\"",\n-\n     modalBackdrop: colors.black50,\n     modalBackground: \""#1f2128\"",\n     modalShadow:\n\ndiff --git a/shared/types.ts b/shared/types.ts\nindex 3d9eb25c78bd..b840c1115034 100644\n--- a/shared/types.ts\n+++ b/shared/types.ts\n@@ -470,3 +470,8 @@ export type EmojiVariants = {\n   [EmojiSkinTone.MediumDark]?: Emoji;\n   [EmojiSkinTone.Dark]?: Emoji;\n };\n+\n+export type ReactionSummary = {\n+  emoji: string;\n+  userIds: string[];\n+};\n\ndiff --git a/shared/utils/emoji.ts b/shared/utils/emoji.ts\nindex 7da06490a26e..243e26174f7f 100644\n--- a/shared/utils/emoji.ts\n+++ b/shared/utils/emoji.ts\n@@ -137,3 +137,12 @@ export const search = ({\n     return query === nlc ? -1 : nlc.startsWith(queryLowercase) ? 0 : 1;\n   });\n };\n+\n+/**\n+ * Get am emoji's human-readable ID from its string.\n+ *\n+ * @param emoji - The string representation of the emoji.\n+ * @returns The emoji id, if found.\n+ */\n+export const getEmojiId = (emoji: string): string | undefined =>\n+  searcher.search(emoji)[0]?.id;\n\ndiff --git a/yarn.lock b/yarn.lock\nindex 2f136dcb5154..21524c2d3473 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -7581,7 +7581,7 @@ ejs@^3.1.6, ejs@^3.1.7:\n   dependencies:\n     jake \""^10.8.5\""\n \n-electron-to-chromium@^1.5.28:\n+electron-to-chromium@^1.5.28, electron-to-chromium@^1.5.4:\n   version \""1.5.32\""\n   resolved \""https://registry.yarnpkg.com/electron-to-chromium/-/electron-to-chromium-1.5.32.tgz#4a05ee78e29e240aabaf73a67ce9fe73f52e1bc7\""\n   integrity sha512-M+7ph0VGBQqqpTT2YrabjNKSQ2fEl9PVx6AK3N558gDH9NO8O6XN9SXXFWRo9u9PbEg/bWq+tjXQr+eXmxubCw==\n"", ""test_patch"": ""diff --git a/server/routes/api/comments/__snapshots__/comments.test.ts.snap b/server/routes/api/comments/__snapshots__/comments.test.ts.snap\nindex 549f072d4b69..56b84ed58ac6 100644\n--- a/server/routes/api/comments/__snapshots__/comments.test.ts.snap\n+++ b/server/routes/api/comments/__snapshots__/comments.test.ts.snap\n@@ -1,5 +1,14 @@\n // Jest Snapshot v1, https://goo.gl/fbAQLP\n \n+exports[`#comments.add_reaction should require authentication 1`] = `\n+{\n+  \""error\"": \""authentication_required\"",\n+  \""message\"": \""Authentication required\"",\n+  \""ok\"": false,\n+  \""status\"": 401,\n+}\n+`;\n+\n exports[`#comments.create should require authentication 1`] = `\n {\n   \""error\"": \""authentication_required\"",\n@@ -27,6 +36,15 @@ exports[`#comments.list should require authentication 1`] = `\n }\n `;\n \n+exports[`#comments.remove_reaction should require authentication 1`] = `\n+{\n+  \""error\"": \""authentication_required\"",\n+  \""message\"": \""Authentication required\"",\n+  \""ok\"": false,\n+  \""status\"": 401,\n+}\n+`;\n+\n exports[`#comments.resolve should require authentication 1`] = `\n {\n   \""error\"": \""authentication_required\"",\n\ndiff --git a/server/routes/api/comments/comments.test.ts b/server/routes/api/comments/comments.test.ts\nindex 5f65bb0b03b0..d33be0ec3d33 100644\n--- a/server/routes/api/comments/comments.test.ts\n+++ b/server/routes/api/comments/comments.test.ts\n@@ -1,4 +1,5 @@\n-import { CommentStatusFilter } from \""@shared/types\"";\n+import { CommentStatusFilter, ReactionSummary } from \""@shared/types\"";\n+import { Comment, Reaction } from \""@server/models\"";\n import {\n   buildAdmin,\n   buildCollection,\n@@ -263,6 +264,40 @@ describe(\""#comments.list\"", () => {\n     expect(body.policies[1].abilities.read).toBeTruthy();\n     expect(body.pagination.total).toEqual(2);\n   });\n+\n+  it(\""should return reactions for a comment\"", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const reactions: ReactionSummary[] = [\n+      { emoji: \""\ud83d\ude04\"", userIds: [user.id] },\n+      { emoji: \""\ud83d\ude43\"", userIds: [user.id] },\n+    ];\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+      reactions,\n+    });\n+\n+    const res = await server.post(\""/api/comments.list\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        documentId: document.id,\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(1);\n+    expect(body.data[0].id).toEqual(comment.id);\n+    expect(body.data[0].reactions).toEqual(reactions);\n+    expect(body.policies.length).toEqual(1);\n+    expect(body.policies[0].abilities.read).toBeTruthy();\n+    expect(body.pagination.total).toEqual(1);\n+  });\n });\n \n describe(\""#comments.create\"", () => {\n@@ -605,3 +640,171 @@ describe(\""#comments.unresolve\"", () => {\n     expect(body.policies[0].abilities.unresolve).toEqual(false);\n   });\n });\n+\n+describe(\""#comments.add_reaction\"", () => {\n+  it(\""should require authentication\"", async () => {\n+    const res = await server.post(\""/api/comments.add_reaction\"");\n+    const body = await res.json();\n+    expect(res.status).toEqual(401);\n+    expect(body).toMatchSnapshot();\n+  });\n+\n+  it(\""should add a reaction to a comment\"", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+\n+    const res = await server.post(\""/api/comments.add_reaction\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+        emoji: \""\ud83d\ude04\"",\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.success).toEqual(true);\n+\n+    const updatedComment = await Comment.findByPk(comment.id);\n+    const addedReaction = await Reaction.findOne({\n+      where: { commentId: comment.id, emoji: \""\ud83d\ude04\"", userId: user.id },\n+    });\n+\n+    expect(updatedComment?.reactions).toEqual([\n+      { emoji: \""\ud83d\ude04\"", userIds: [user.id] },\n+    ]);\n+    expect(addedReaction).toBeTruthy();\n+  });\n+\n+  it(\""should add a reaction to a comment with existing reactions\"", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+      reactions: [{ emoji: \""\ud83d\ude04\"", userIds: [\""test-user\""] }],\n+    });\n+\n+    const res = await server.post(\""/api/comments.add_reaction\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+        emoji: \""\ud83d\ude04\"",\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.success).toEqual(true);\n+\n+    const updatedComment = await Comment.findByPk(comment.id);\n+    const addedReaction = await Reaction.findOne({\n+      where: { commentId: comment.id, emoji: \""\ud83d\ude04\"", userId: user.id },\n+    });\n+\n+    expect(updatedComment?.reactions).toEqual([\n+      { emoji: \""\ud83d\ude04\"", userIds: [\""test-user\"", user.id] },\n+    ]);\n+    expect(addedReaction).toBeTruthy();\n+  });\n+});\n+\n+describe(\""#comments.remove_reaction\"", () => {\n+  it(\""should require authentication\"", async () => {\n+    const res = await server.post(\""/api/comments.remove_reaction\"");\n+    const body = await res.json();\n+    expect(res.status).toEqual(401);\n+    expect(body).toMatchSnapshot();\n+  });\n+\n+  it(\""should remove a reaction from a comment\"", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    await Reaction.create({\n+      emoji: \""\ud83d\ude04\"",\n+      commentId: comment.id,\n+      userId: user.id,\n+    });\n+\n+    const res = await server.post(\""/api/comments.remove_reaction\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+        emoji: \""\ud83d\ude04\"",\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.success).toEqual(true);\n+\n+    const updatedComment = await Comment.findByPk(comment.id);\n+    const removedReaction = await Reaction.findOne({\n+      where: { commentId: comment.id, emoji: \""\ud83d\ude04\"", userId: user.id },\n+    });\n+\n+    expect(updatedComment?.reactions).toEqual([]);\n+    expect(removedReaction).toBeNull();\n+  });\n+\n+  it(\""should remove a reaction from a comment with existing reactions\"", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+      reactions: [{ emoji: \""\ud83d\ude04\"", userIds: [\""test-user\""] }],\n+    });\n+    await Reaction.create({\n+      emoji: \""\ud83d\ude04\"",\n+      commentId: comment.id,\n+      userId: user.id,\n+    });\n+\n+    const res = await server.post(\""/api/comments.remove_reaction\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        id: comment.id,\n+        emoji: \""\ud83d\ude04\"",\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.success).toEqual(true);\n+\n+    const updatedComment = await Comment.findByPk(comment.id);\n+    const removedReaction = await Reaction.findOne({\n+      where: { commentId: comment.id, emoji: \""\ud83d\ude04\"", userId: user.id },\n+    });\n+\n+    expect(updatedComment?.reactions).toEqual([\n+      { emoji: \""\ud83d\ude04\"", userIds: [\""test-user\""] },\n+    ]);\n+    expect(removedReaction).toBeNull();\n+  });\n+});\n\ndiff --git a/server/routes/api/reactions/__snapshots__/reactions.test.ts.snap b/server/routes/api/reactions/__snapshots__/reactions.test.ts.snap\nnew file mode 100644\nindex 000000000000..47dab5600892\n--- /dev/null\n+++ b/server/routes/api/reactions/__snapshots__/reactions.test.ts.snap\n@@ -0,0 +1,10 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`#reactions.list should require authentication 1`] = `\n+{\n+  \""error\"": \""authentication_required\"",\n+  \""message\"": \""Authentication required\"",\n+  \""ok\"": false,\n+  \""status\"": 401,\n+}\n+`;\n\ndiff --git a/server/routes/api/reactions/reactions.test.ts b/server/routes/api/reactions/reactions.test.ts\nnew file mode 100644\nindex 000000000000..4439ba9d7df8\n--- /dev/null\n+++ b/server/routes/api/reactions/reactions.test.ts\n@@ -0,0 +1,51 @@\n+import { Reaction } from \""@server/models\"";\n+import {\n+  buildComment,\n+  buildDocument,\n+  buildTeam,\n+  buildUser,\n+} from \""@server/test/factories\"";\n+import { getTestServer } from \""@server/test/support\"";\n+\n+const server = getTestServer();\n+\n+describe(\""#reactions.list\"", () => {\n+  it(\""should require authentication\"", async () => {\n+    const res = await server.post(\""/api/reactions.list\"");\n+    const body = await res.json();\n+    expect(res.status).toEqual(401);\n+    expect(body).toMatchSnapshot();\n+  });\n+\n+  it(\""should return all reactions for a comment\"", async () => {\n+    const team = await buildTeam();\n+    const user = await buildUser({ teamId: team.id });\n+    const document = await buildDocument({\n+      userId: user.id,\n+      teamId: user.teamId,\n+    });\n+    const comment = await buildComment({\n+      userId: user.id,\n+      documentId: document.id,\n+    });\n+    await Reaction.bulkCreate([\n+      { emoji: \""\ud83d\ude04\"", commentId: comment.id, userId: user.id },\n+      { emoji: \""\ud83d\ude05\"", commentId: comment.id, userId: user.id },\n+    ]);\n+\n+    const res = await server.post(\""/api/reactions.list\"", {\n+      body: {\n+        token: user.getJwtToken(),\n+        commentId: comment.id,\n+      },\n+    });\n+    const body = await res.json();\n+\n+    expect(res.status).toEqual(200);\n+    expect(body.data.length).toEqual(2);\n+    expect(body.data[0].commentId).toEqual(comment.id);\n+    expect(body.data[0].user.id).toEqual(user.id);\n+    expect(body.data[0].user.name).toEqual(user.name);\n+    expect(body.pagination.total).toEqual(2);\n+  });\n+});\n\ndiff --git a/server/test/factories.ts b/server/test/factories.ts\nindex 5e808f6414e5..1afdd8234978 100644\n--- a/server/test/factories.ts\n+++ b/server/test/factories.ts\n@@ -14,6 +14,7 @@ import {\n   IntegrationType,\n   NotificationEventType,\n   ProsemirrorData,\n+  ReactionSummary,\n   UserRole,\n } from \""@shared/types\"";\n import { parser, schema } from \""@server/editor\"";\n@@ -413,6 +414,7 @@ export async function buildComment(overrides: {\n   documentId: string;\n   parentCommentId?: string;\n   resolvedById?: string;\n+  reactions?: ReactionSummary[];\n }) {\n   const comment = await Comment.create({\n     resolvedById: overrides.resolvedById,\n@@ -434,6 +436,7 @@ export async function buildComment(overrides: {\n       ],\n     },\n     createdById: overrides.userId,\n+    reactions: overrides.reactions,\n   });\n \n   return comment;\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""outline__outline-7765"", ""pr_id"": 7765, ""issue_id"": 7674, ""repo"": ""outline/outline"", ""problem_statement"": ""Add ability to filter documents without a search term\nIn particular it's important to be able to filter by collection, or author on the search page.\r\n\r\nThis will mean refactoring the logic in `SearchHelper` a bit so that query is optional and injected into SQL only when available."", ""issue_word_count"": 40, ""test_files_count"": 2, ""non_test_files_count"": 10, ""pr_changed_files"": [""app/components/Editor.tsx"", ""app/components/SearchPopover.tsx"", ""app/scenes/Search/Search.tsx"", ""app/scenes/Search/components/CollectionFilter.tsx"", ""app/stores/DocumentsStore.ts"", ""app/types.ts"", ""plugins/slack/server/api/hooks.ts"", ""server/models/helpers/SearchHelper.test.ts"", ""server/models/helpers/SearchHelper.ts"", ""server/routes/api/documents/documents.test.ts"", ""server/routes/api/documents/documents.ts"", ""server/routes/api/documents/schema.ts""], ""pr_changed_test_files"": [""server/models/helpers/SearchHelper.test.ts"", ""server/routes/api/documents/documents.test.ts""], ""base_commit"": ""763dd2882985ac2ebb6e10c4e3c802e21f9c6088"", ""head_commit"": ""f2b0e4cbd98a4ed5469cc0224377cde3cf0e473a"", ""repo_url"": ""https://github.com/outline/outline/pull/7765"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/outline__outline/7765"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-03T22:59:48.000Z"", ""patch"": ""diff --git a/app/components/Editor.tsx b/app/components/Editor.tsx\nindex 27b07849c5a0..00a581b56bcb 100644\n--- a/app/components/Editor.tsx\n+++ b/app/components/Editor.tsx\n@@ -98,7 +98,7 @@ function Editor(props: Props, ref: React.RefObject<SharedEditor> | null) {\n       }\n \n       // default search for anything that doesn't look like a URL\n-      const results = await documents.searchTitles(term);\n+      const results = await documents.searchTitles({ query: term });\n \n       return sortBy(\n         results.map(({ document }) => ({\n\ndiff --git a/app/components/SearchPopover.tsx b/app/components/SearchPopover.tsx\nindex 0548b91bd127..c8b5ba779039 100644\n--- a/app/components/SearchPopover.tsx\n+++ b/app/components/SearchPopover.tsx\n@@ -54,7 +54,8 @@ function SearchPopover({ shareId }: Props) {\n   const performSearch = React.useCallback(\n     async ({ query, ...options }) => {\n       if (query?.length > 0) {\n-        const response = await documents.search(query, {\n+        const response = await documents.search({\n+          query,\n           shareId,\n           ...options,\n         });\n\ndiff --git a/app/scenes/Search/Search.tsx b/app/scenes/Search/Search.tsx\nindex 1a50bb69219b..ee787ef85b0a 100644\n--- a/app/scenes/Search/Search.tsx\n+++ b/app/scenes/Search/Search.tsx\n@@ -57,9 +57,10 @@ function Search(props: Props) {\n   const recentSearchesRef = React.useRef<HTMLDivElement | null>(null);\n \n   // filters\n-  const query = decodeURIComponentSafe(\n+  const decodedQuery = decodeURIComponentSafe(\n     routeMatch.params.term ?? params.get(\""query\"") ?? \""\""\n-  );\n+  ).trim();\n+  const query = decodedQuery !== \""\"" ? decodedQuery : undefined;\n   const collectionId = params.get(\""collectionId\"") ?? undefined;\n   const userId = params.get(\""userId\"") ?? undefined;\n   const documentId = params.get(\""documentId\"") ?? undefined;\n@@ -68,7 +69,19 @@ function Search(props: Props) {\n     ? (params.getAll(\""statusFilter\"") as TStatusFilter[])\n     : [TStatusFilter.Published, TStatusFilter.Draft];\n   const titleFilter = params.get(\""titleFilter\"") === \""true\"";\n-  const hasFilters = !!(documentId || collectionId || userId || dateFilter);\n+\n+  const isSearchable = !!(query || collectionId || userId);\n+\n+  const document = documentId ? documents.get(documentId) : undefined;\n+\n+  const filterVisibility = {\n+    document: !!document,\n+    collection: !document,\n+    user: !document || !!(document && query),\n+    documentType: isSearchable,\n+    date: isSearchable,\n+    title: !!query && !document,\n+  };\n \n   const filters = React.useMemo(\n     () => ({\n@@ -100,22 +113,22 @@ function Search(props: Props) {\n         query,\n         createdAt: new Date().toISOString(),\n       });\n+    }\n \n+    if (isSearchable) {\n       return async () =>\n         titleFilter\n-          ? await documents.searchTitles(query, filters)\n-          : await documents.search(query, filters);\n+          ? await documents.searchTitles(filters)\n+          : await documents.search(filters);\n     }\n \n     return () => Promise.resolve([] as SearchResult[]);\n-  }, [query, titleFilter, filters, searches, documents]);\n+  }, [query, titleFilter, filters, searches, documents, isSearchable]);\n \n   const { data, next, end, error, loading } = usePaginatedRequest(requestFn, {\n     limit: Pagination.defaultLimit,\n   });\n \n-  const document = documentId ? documents.get(documentId) : undefined;\n-\n   const updateLocation = (query: string) => {\n     history.replace({\n       pathname: searchPath(query),\n@@ -225,39 +238,47 @@ function Search(props: Props) {\n                 : t(\""Search\"")\n             }\u2026`}\n             onKeyDown={handleKeyDown}\n-            defaultValue={query}\n+            defaultValue={query ?? \""\""}\n           />\n \n-          {(query || hasFilters) && (\n-            <Filters>\n-              {document && (\n-                <DocumentFilter\n-                  document={document}\n-                  onClick={() => {\n-                    handleFilterChange({ documentId: undefined });\n-                  }}\n-                />\n-              )}\n-              <DocumentTypeFilter\n-                statusFilter={statusFilter}\n-                onSelect={({ statusFilter }) =>\n-                  handleFilterChange({ statusFilter })\n-                }\n+          <Filters>\n+            {filterVisibility.document && (\n+              <DocumentFilter\n+                document={document!}\n+                onClick={() => {\n+                  handleFilterChange({ documentId: undefined });\n+                }}\n               />\n+            )}\n+            {filterVisibility.collection && (\n               <CollectionFilter\n                 collectionId={collectionId}\n                 onSelect={(collectionId) =>\n                   handleFilterChange({ collectionId })\n                 }\n               />\n+            )}\n+            {filterVisibility.user && (\n               <UserFilter\n                 userId={userId}\n                 onSelect={(userId) => handleFilterChange({ userId })}\n               />\n+            )}\n+            {filterVisibility.documentType && (\n+              <DocumentTypeFilter\n+                statusFilter={statusFilter}\n+                onSelect={({ statusFilter }) =>\n+                  handleFilterChange({ statusFilter })\n+                }\n+              />\n+            )}\n+            {filterVisibility.date && (\n               <DateFilter\n                 dateFilter={dateFilter}\n                 onSelect={(dateFilter) => handleFilterChange({ dateFilter })}\n               />\n+            )}\n+            {filterVisibility.title && (\n               <SearchTitlesFilter\n                 width={26}\n                 height={14}\n@@ -267,10 +288,10 @@ function Search(props: Props) {\n                 }}\n                 checked={titleFilter}\n               />\n-            </Filters>\n-          )}\n+            )}\n+          </Filters>\n         </form>\n-        {query ? (\n+        {isSearchable ? (\n           <>\n             {error ? (\n               <Fade>\n@@ -322,7 +343,7 @@ function Search(props: Props) {\n               />\n             </ResultList>\n           </>\n-        ) : documentId || collectionId ? null : (\n+        ) : documentId ? null : (\n           <RecentSearches ref={recentSearchesRef} onEscape={handleEscape} />\n         )}\n       </ResultsWrapper>\n\ndiff --git a/app/scenes/Search/components/CollectionFilter.tsx b/app/scenes/Search/components/CollectionFilter.tsx\nindex e7bb01e2a907..909424e00414 100644\n--- a/app/scenes/Search/components/CollectionFilter.tsx\n+++ b/app/scenes/Search/components/CollectionFilter.tsx\n@@ -1,7 +1,9 @@\n import { observer } from \""mobx-react\"";\n+import { CollectionIcon as SVGCollectionIcon } from \""outline-icons\"";\n import * as React from \""react\"";\n import { useTranslation } from \""react-i18next\"";\n import FilterOptions from \""~/components/FilterOptions\"";\n+import CollectionIcon from \""~/components/Icons/CollectionIcon\"";\n import useStores from \""~/hooks/useStores\"";\n \n type Props = {\n@@ -16,14 +18,16 @@ function CollectionFilter(props: Props) {\n   const { collections } = useStores();\n   const { onSelect, collectionId } = props;\n   const options = React.useMemo(() => {\n-    const collectionOptions = collections.orderedData.map((user) => ({\n-      key: user.id,\n-      label: user.name,\n+    const collectionOptions = collections.orderedData.map((collection) => ({\n+      key: collection.id,\n+      label: collection.name,\n+      icon: <CollectionIcon collection={collection} size={18} />,\n     }));\n     return [\n       {\n         key: \""\"",\n         label: t(\""Any collection\""),\n+        icon: <SVGCollectionIcon size={18} />,\n       },\n       ...collectionOptions,\n     ];\n\ndiff --git a/app/stores/DocumentsStore.ts b/app/stores/DocumentsStore.ts\nindex 8639ecefe226..7e8af7c4a11a 100644\n--- a/app/stores/DocumentsStore.ts\n+++ b/app/stores/DocumentsStore.ts\n@@ -33,6 +33,7 @@ type FetchPageParams = PaginationParams & {\n };\n \n export type SearchParams = {\n+  query?: string;\n   offset?: number;\n   limit?: number;\n   dateFilter?: DateFilter;\n@@ -412,14 +413,10 @@ export default class DocumentsStore extends Store<Document> {\n     this.fetchNamedPage(\""list\"", options);\n \n   @action\n-  searchTitles = async (\n-    query: string,\n-    options?: SearchParams\n-  ): Promise<SearchResult[]> => {\n+  searchTitles = async (options?: SearchParams): Promise<SearchResult[]> => {\n     const compactedOptions = omitBy(options, (o) => !o);\n     const res = await client.post(\""/documents.search_titles\"", {\n       ...compactedOptions,\n-      query,\n     });\n     invariant(res?.data, \""Search response should be available\"");\n \n@@ -447,14 +444,10 @@ export default class DocumentsStore extends Store<Document> {\n   };\n \n   @action\n-  search = async (\n-    query: string,\n-    options: SearchParams\n-  ): Promise<SearchResult[]> => {\n+  search = async (options: SearchParams): Promise<SearchResult[]> => {\n     const compactedOptions = omitBy(options, (o) => !o);\n     const res = await client.post(\""/documents.search\"", {\n       ...compactedOptions,\n-      query,\n     });\n     invariant(res?.data, \""Search response should be available\"");\n \n\ndiff --git a/app/types.ts b/app/types.ts\nindex 5f9d4908ccd2..10220a72ba1f 100644\n--- a/app/types.ts\n+++ b/app/types.ts\n@@ -166,7 +166,7 @@ export type PaginationParams = {\n export type SearchResult = {\n   id: string;\n   ranking: number;\n-  context: string;\n+  context?: string;\n   document: Document;\n };\n \n\ndiff --git a/plugins/slack/server/api/hooks.ts b/plugins/slack/server/api/hooks.ts\nindex 6c93ea3013da..b7e9d8bf7b24 100644\n--- a/plugins/slack/server/api/hooks.ts\n+++ b/plugins/slack/server/api/hooks.ts\n@@ -222,6 +222,7 @@ router.post(\n     }\n \n     const options = {\n+      query: text,\n       limit: 5,\n     };\n \n@@ -235,11 +236,7 @@ router.post(\n       return;\n     }\n \n-    const { results, total } = await SearchHelper.searchForUser(\n-      user,\n-      text,\n-      options\n-    );\n+    const { results, total } = await SearchHelper.searchForUser(user, options);\n \n     await SearchQuery.create({\n       userId: user ? user.id : null,\n\ndiff --git a/server/models/helpers/SearchHelper.ts b/server/models/helpers/SearchHelper.ts\nindex 365add62d428..9acd8309520a 100644\n--- a/server/models/helpers/SearchHelper.ts\n+++ b/server/models/helpers/SearchHelper.ts\n@@ -3,7 +3,15 @@ import escapeRegExp from \""lodash/escapeRegExp\"";\n import find from \""lodash/find\"";\n import map from \""lodash/map\"";\n import queryParser from \""pg-tsquery\"";\n-import { Op, Sequelize, WhereOptions } from \""sequelize\"";\n+import {\n+  BindOrReplacements,\n+  FindAttributeOptions,\n+  FindOptions,\n+  Op,\n+  Order,\n+  Sequelize,\n+  WhereOptions,\n+} from \""sequelize\"";\n import { DateFilter, StatusFilter } from \""@shared/types\"";\n import { regexIndexOf, regexLastIndexOf } from \""@shared/utils/string\"";\n import { getUrls } from \""@shared/utils/urls\"";\n@@ -21,7 +29,7 @@ type SearchResponse = {\n     /** The search ranking, for sorting results */\n     ranking: number;\n     /** A snippet of contextual text around the search result */\n-    context: string;\n+    context?: string;\n     /** The document result */\n     document: Document;\n   }[];\n@@ -34,6 +42,8 @@ type SearchOptions = {\n   limit?: number;\n   /** The query offset for pagination */\n   offset?: number;\n+  /** The text to search for */\n+  query?: string;\n   /** Limit results to a collection. Authorization is presumed to have been done before passing to this helper. */\n   collectionId?: string | null;\n   /** Limit results to a shared document. */\n@@ -67,12 +77,11 @@ export default class SearchHelper {\n \n   public static async searchForTeam(\n     team: Team,\n-    query: string,\n     options: SearchOptions = {}\n   ): Promise<SearchResponse> {\n-    const { limit = 15, offset = 0 } = options;\n+    const { limit = 15, offset = 0, query } = options;\n \n-    const where = await this.buildWhere(team, query, {\n+    const where = await this.buildWhere(team, {\n       ...options,\n       statusFilter: [...(options.statusFilter || []), StatusFilter.Published],\n     });\n@@ -92,34 +101,19 @@ export default class SearchHelper {\n       });\n     }\n \n-    const replacements = {\n-      query: this.webSearchQuery(query),\n-    };\n+    const findOptions = this.buildFindOptions(query);\n \n     try {\n       const resultsQuery = Document.unscoped().findAll({\n-        attributes: [\n-          \""id\"",\n-          [\n-            Sequelize.literal(\n-              `ts_rank(\""searchVector\"", to_tsquery('english', :query))`\n-            ),\n-            \""searchRanking\"",\n-          ],\n-        ],\n-        replacements,\n+        ...findOptions,\n         where,\n-        order: [\n-          [\""searchRanking\"", \""DESC\""],\n-          [\""updatedAt\"", \""DESC\""],\n-        ],\n         limit,\n         offset,\n       }) as any as Promise<RankedDocument[]>;\n \n       const countQuery = Document.unscoped().count({\n         // @ts-expect-error Types are incorrect for count\n-        replacements,\n+        replacements: findOptions.replacements,\n         where,\n       }) as any as Promise<number>;\n       const [results, count] = await Promise.all([resultsQuery, countQuery]);\n@@ -138,7 +132,12 @@ export default class SearchHelper {\n         ],\n       });\n \n-      return this.buildResponse(query, results, documents, count);\n+      return this.buildResponse({\n+        query,\n+        results,\n+        documents,\n+        count,\n+      });\n     } catch (err) {\n       if (err.message.includes(\""syntax error in tsquery\"")) {\n         throw ValidationError(\""Invalid search query\"");\n@@ -149,17 +148,18 @@ export default class SearchHelper {\n \n   public static async searchTitlesForUser(\n     user: User,\n-    query: string,\n     options: SearchOptions = {}\n   ): Promise<Document[]> {\n-    const { limit = 15, offset = 0 } = options;\n-    const where = await this.buildWhere(user, undefined, options);\n+    const { limit = 15, offset = 0, query, ...rest } = options;\n+    const where = await this.buildWhere(user, rest);\n \n-    where[Op.and].push({\n-      title: {\n-        [Op.iLike]: `%${query}%`,\n-      },\n-    });\n+    if (query) {\n+      where[Op.and].push({\n+        title: {\n+          [Op.iLike]: `%${query}%`,\n+        },\n+      });\n+    }\n \n     const include = [\n       {\n@@ -206,16 +206,13 @@ export default class SearchHelper {\n \n   public static async searchForUser(\n     user: User,\n-    query: string,\n     options: SearchOptions = {}\n   ): Promise<SearchResponse> {\n-    const { limit = 15, offset = 0 } = options;\n+    const { limit = 15, offset = 0, query } = options;\n \n-    const where = await this.buildWhere(user, query, options);\n+    const where = await this.buildWhere(user, options);\n \n-    const queryReplacements = {\n-      query: this.webSearchQuery(query),\n-    };\n+    const findOptions = this.buildFindOptions(query);\n \n     const include = [\n       {\n@@ -230,23 +227,10 @@ export default class SearchHelper {\n \n     try {\n       const results = (await Document.unscoped().findAll({\n-        attributes: [\n-          \""id\"",\n-          [\n-            Sequelize.literal(\n-              `ts_rank(\""searchVector\"", to_tsquery('english', :query))`\n-            ),\n-            \""searchRanking\"",\n-          ],\n-        ],\n+        ...findOptions,\n         subQuery: false,\n         include,\n-        replacements: queryReplacements,\n         where,\n-        order: [\n-          [\""searchRanking\"", \""DESC\""],\n-          [\""updatedAt\"", \""DESC\""],\n-        ],\n         limit,\n         offset,\n       })) as any as RankedDocument[];\n@@ -255,7 +239,7 @@ export default class SearchHelper {\n         // @ts-expect-error Types are incorrect for count\n         subQuery: false,\n         include,\n-        replacements: queryReplacements,\n+        replacements: findOptions.replacements,\n         where,\n       }) as any as Promise<number>;\n \n@@ -284,7 +268,12 @@ export default class SearchHelper {\n           : countQuery,\n       ]);\n \n-      return this.buildResponse(query, results, documents, count);\n+      return this.buildResponse({\n+        query,\n+        results,\n+        documents,\n+        count,\n+      });\n     } catch (err) {\n       if (err.message.includes(\""syntax error in tsquery\"")) {\n         throw ValidationError(\""Invalid search query\"");\n@@ -293,6 +282,25 @@ export default class SearchHelper {\n     }\n   }\n \n+  private static buildFindOptions(query?: string): FindOptions {\n+    const attributes: FindAttributeOptions = [\""id\""];\n+    const replacements: BindOrReplacements = {};\n+    const order: Order = [[\""updatedAt\"", \""DESC\""]];\n+\n+    if (query) {\n+      attributes.push([\n+        Sequelize.literal(\n+          `ts_rank(\""searchVector\"", to_tsquery('english', :query))`\n+        ),\n+        \""searchRanking\"",\n+      ]);\n+      replacements[\""query\""] = this.webSearchQuery(query);\n+      order.unshift([\""searchRanking\"", \""DESC\""]);\n+    }\n+\n+    return { attributes, replacements, order };\n+  }\n+\n   private static buildResultContext(document: Document, query: string) {\n     const quotedQueries = Array.from(query.matchAll(/\""([^\""]*)\""/g));\n     const text = DocumentHelper.toPlainText(document);\n@@ -349,11 +357,7 @@ export default class SearchHelper {\n     return context.slice(startIndex, endIndex);\n   }\n \n-  private static async buildWhere(\n-    model: User | Team,\n-    query: string | undefined,\n-    options: SearchOptions\n-  ) {\n+  private static async buildWhere(model: User | Team, options: SearchOptions) {\n     const teamId = model instanceof Team ? model.id : model.teamId;\n     const where: WhereOptions<Document> = {\n       teamId,\n@@ -459,15 +463,15 @@ export default class SearchHelper {\n       });\n     }\n \n-    if (query) {\n+    if (options.query) {\n       // find words that look like urls, these should be treated separately as the postgres full-text\n       // index will generally not match them.\n-      const likelyUrls = getUrls(query);\n+      const likelyUrls = getUrls(options.query);\n \n       // remove likely urls, and escape the rest of the query.\n       const limitedQuery = this.escapeQuery(\n         likelyUrls\n-          .reduce((q, url) => q.replace(url, \""\""), query)\n+          .reduce((q, url) => q.replace(url, \""\""), options.query)\n           .slice(0, this.maxQueryLength)\n           .trim()\n       );\n@@ -510,12 +514,17 @@ export default class SearchHelper {\n     return where;\n   }\n \n-  private static buildResponse(\n-    query: string,\n-    results: RankedDocument[],\n-    documents: Document[],\n-    count: number\n-  ): SearchResponse {\n+  private static buildResponse({\n+    query,\n+    results,\n+    documents,\n+    count,\n+  }: {\n+    query?: string;\n+    results: RankedDocument[];\n+    documents: Document[];\n+    count: number;\n+  }): SearchResponse {\n     return {\n       results: map(results, (result) => {\n         const document = find(documents, {\n@@ -524,7 +533,7 @@ export default class SearchHelper {\n \n         return {\n           ranking: result.dataValues.searchRanking,\n-          context: this.buildResultContext(document, query),\n+          context: query ? this.buildResultContext(document, query) : undefined,\n           document,\n         };\n       }),\n\ndiff --git a/server/routes/api/documents/documents.ts b/server/routes/api/documents/documents.ts\nindex 3323eebda224..3cca38ab0ea3 100644\n--- a/server/routes/api/documents/documents.ts\n+++ b/server/routes/api/documents/documents.ts\n@@ -914,8 +914,8 @@ router.post(\n   auth(),\n   pagination(),\n   rateLimiter(RateLimiterStrategy.OneHundredPerMinute),\n-  validate(T.DocumentsSearchSchema),\n-  async (ctx: APIContext<T.DocumentsSearchReq>) => {\n+  validate(T.DocumentsSearchTitlesSchema),\n+  async (ctx: APIContext<T.DocumentsSearchTitlesReq>) => {\n     const { query, statusFilter, dateFilter, collectionId, userId } =\n       ctx.input.body;\n     const { offset, limit } = ctx.state.pagination;\n@@ -933,7 +933,8 @@ router.post(\n       collaboratorIds = [userId];\n     }\n \n-    const documents = await SearchHelper.searchTitlesForUser(user, query, {\n+    const documents = await SearchHelper.searchTitlesForUser(user, {\n+      query,\n       dateFilter,\n       statusFilter,\n       collectionId,\n@@ -999,7 +1000,8 @@ router.post(\n       const team = await share.$get(\""team\"");\n       invariant(team, \""Share must belong to a team\"");\n \n-      response = await SearchHelper.searchForTeam(team, query, {\n+      response = await SearchHelper.searchForTeam(team, {\n+        query,\n         collectionId: document.collectionId,\n         share,\n         dateFilter,\n@@ -1041,7 +1043,8 @@ router.post(\n         collaboratorIds = [userId];\n       }\n \n-      response = await SearchHelper.searchForUser(user, query, {\n+      response = await SearchHelper.searchForUser(user, {\n+        query,\n         collaboratorIds,\n         collectionId,\n         documentIds,\n@@ -1069,7 +1072,7 @@ router.post(\n \n     // When requesting subsequent pages of search results we don't want to record\n     // duplicate search query records\n-    if (offset === 0) {\n+    if (query && offset === 0) {\n       await SearchQuery.create({\n         userId: user?.id,\n         teamId,\n\ndiff --git a/server/routes/api/documents/schema.ts b/server/routes/api/documents/schema.ts\nindex ed3e76c538f7..ac8b8fe86bbc 100644\n--- a/server/routes/api/documents/schema.ts\n+++ b/server/routes/api/documents/schema.ts\n@@ -36,9 +36,30 @@ const DateFilterSchema = z.object({\n     .optional(),\n });\n \n-const SearchQuerySchema = z.object({\n-  /** Query for search */\n-  query: z.string().refine((v) => v.trim() !== \""\""),\n+const BaseSearchSchema = DateFilterSchema.extend({\n+  /** Filter results for team based on the collection */\n+  collectionId: z.string().uuid().optional(),\n+\n+  /** Filter results based on user */\n+  userId: z.string().uuid().optional(),\n+\n+  /** Filter results based on content within a document and it's children */\n+  documentId: z.string().uuid().optional(),\n+\n+  /** Document statuses to include in results */\n+  statusFilter: z.nativeEnum(StatusFilter).array().optional(),\n+\n+  /** Filter results for the team derived from shareId */\n+  shareId: z\n+    .string()\n+    .refine((val) => isUUID(val) || UrlHelper.SHARE_URL_SLUG_REGEX.test(val))\n+    .optional(),\n+\n+  /** Min words to be shown in the results snippets */\n+  snippetMinWords: z.number().default(20),\n+\n+  /** Max words to be accomodated in the results snippets */\n+  snippetMaxWords: z.number().default(30),\n });\n \n const BaseIdSchema = z.object({\n@@ -153,34 +174,24 @@ export const DocumentsRestoreSchema = BaseSchema.extend({\n export type DocumentsRestoreReq = z.infer<typeof DocumentsRestoreSchema>;\n \n export const DocumentsSearchSchema = BaseSchema.extend({\n-  body: SearchQuerySchema.merge(DateFilterSchema).extend({\n-    /** Filter results for team based on the collection */\n-    collectionId: z.string().uuid().optional(),\n-\n-    /** Filter results based on user */\n-    userId: z.string().uuid().optional(),\n-\n-    /** Filter results based on content within a document and it's children */\n-    documentId: z.string().uuid().optional(),\n-\n-    /** Document statuses to include in results */\n-    statusFilter: z.nativeEnum(StatusFilter).array().optional(),\n-\n-    /** Filter results for the team derived from shareId */\n-    shareId: z\n-      .string()\n-      .refine((val) => isUUID(val) || UrlHelper.SHARE_URL_SLUG_REGEX.test(val))\n-      .optional(),\n+  body: BaseSearchSchema.extend({\n+    /** Query for search */\n+    query: z.string().optional(),\n+  }),\n+});\n \n-    /** Min words to be shown in the results snippets */\n-    snippetMinWords: z.number().default(20),\n+export type DocumentsSearchReq = z.infer<typeof DocumentsSearchSchema>;\n \n-    /** Max words to be accomodated in the results snippets */\n-    snippetMaxWords: z.number().default(30),\n+export const DocumentsSearchTitlesSchema = BaseSchema.extend({\n+  body: BaseSearchSchema.extend({\n+    /** Query for search */\n+    query: z.string().refine((val) => val.trim() !== \""\""),\n   }),\n });\n \n-export type DocumentsSearchReq = z.infer<typeof DocumentsSearchSchema>;\n+export type DocumentsSearchTitlesReq = z.infer<\n+  typeof DocumentsSearchTitlesSchema\n+>;\n \n export const DocumentsDuplicateSchema = BaseSchema.extend({\n   body: BaseIdSchema.extend({\n"", ""test_patch"": ""diff --git a/server/models/helpers/SearchHelper.test.ts b/server/models/helpers/SearchHelper.test.ts\nindex a4145621791c..aa5323e878c6 100644\n--- a/server/models/helpers/SearchHelper.test.ts\n+++ b/server/models/helpers/SearchHelper.test.ts\n@@ -27,11 +27,37 @@ describe(\""SearchHelper\"", () => {\n         collectionId: collection.id,\n         title: \""test\"",\n       });\n-      const { results } = await SearchHelper.searchForTeam(team, \""test\"");\n+      const { results } = await SearchHelper.searchForTeam(team, {\n+        query: \""test\"",\n+      });\n       expect(results.length).toBe(1);\n       expect(results[0].document?.id).toBe(document.id);\n     });\n \n+    test(\""should return search results from a collection without search term\"", async () => {\n+      const team = await buildTeam();\n+      const collection = await buildCollection({\n+        teamId: team.id,\n+      });\n+      const documents = await Promise.all([\n+        buildDocument({\n+          teamId: team.id,\n+          collectionId: collection.id,\n+          title: \""document 1\"",\n+        }),\n+        buildDocument({\n+          teamId: team.id,\n+          collectionId: collection.id,\n+          title: \""document 2\"",\n+        }),\n+      ]);\n+      const { results } = await SearchHelper.searchForTeam(team);\n+      expect(results.length).toBe(2);\n+      expect(results.map((r) => r.document.id).sort()).toEqual(\n+        documents.map((doc) => doc.id).sort()\n+      );\n+    });\n+\n     test(\""should not return results from private collections without providing collectionId\"", async () => {\n       const team = await buildTeam();\n       const collection = await buildCollection({\n@@ -43,7 +69,9 @@ describe(\""SearchHelper\"", () => {\n         collectionId: collection.id,\n         title: \""test\"",\n       });\n-      const { results } = await SearchHelper.searchForTeam(team, \""test\"");\n+      const { results } = await SearchHelper.searchForTeam(team, {\n+        query: \""test\"",\n+      });\n       expect(results.length).toBe(0);\n     });\n \n@@ -58,7 +86,8 @@ describe(\""SearchHelper\"", () => {\n         collectionId: collection.id,\n         title: \""test\"",\n       });\n-      const { results } = await SearchHelper.searchForTeam(team, \""test\"", {\n+      const { results } = await SearchHelper.searchForTeam(team, {\n+        query: \""test\"",\n         collectionId: collection.id,\n       });\n       expect(results.length).toBe(1);\n@@ -86,7 +115,8 @@ describe(\""SearchHelper\"", () => {\n         includeChildDocuments: true,\n       });\n \n-      const { results } = await SearchHelper.searchForTeam(team, \""test\"", {\n+      const { results } = await SearchHelper.searchForTeam(team, {\n+        query: \""test\"",\n         collectionId: collection.id,\n         share,\n       });\n@@ -95,13 +125,17 @@ describe(\""SearchHelper\"", () => {\n \n     test(\""should handle no collections\"", async () => {\n       const team = await buildTeam();\n-      const { results } = await SearchHelper.searchForTeam(team, \""test\"");\n+      const { results } = await SearchHelper.searchForTeam(team, {\n+        query: \""test\"",\n+      });\n       expect(results.length).toBe(0);\n     });\n \n     test(\""should handle backslashes in search term\"", async () => {\n       const team = await buildTeam();\n-      const { results } = await SearchHelper.searchForTeam(team, \""\\\\\\\\\"");\n+      const { results } = await SearchHelper.searchForTeam(team, {\n+        query: \""\\\\\\\\\"",\n+      });\n       expect(results.length).toBe(0);\n     });\n \n@@ -120,7 +154,9 @@ describe(\""SearchHelper\"", () => {\n         collectionId: collection.id,\n         title: \""test number 2\"",\n       });\n-      const { total } = await SearchHelper.searchForTeam(team, \""test\"");\n+      const { total } = await SearchHelper.searchForTeam(team, {\n+        query: \""test\"",\n+      });\n       expect(total).toBe(2);\n     });\n \n@@ -136,7 +172,9 @@ describe(\""SearchHelper\"", () => {\n       });\n       document.title = \""change\"";\n       await document.save();\n-      const { total } = await SearchHelper.searchForTeam(team, \""test number\"");\n+      const { total } = await SearchHelper.searchForTeam(team, {\n+        query: \""test number\"",\n+      });\n       expect(total).toBe(1);\n     });\n \n@@ -152,10 +190,9 @@ describe(\""SearchHelper\"", () => {\n       });\n       document.title = \""change\"";\n       await document.save();\n-      const { total } = await SearchHelper.searchForTeam(\n-        team,\n-        \""title doesn't exist\""\n-      );\n+      const { total } = await SearchHelper.searchForTeam(team, {\n+        query: \""title doesn't exist\"",\n+      });\n       expect(total).toBe(0);\n     });\n   });\n@@ -181,16 +218,78 @@ describe(\""SearchHelper\"", () => {\n         deletedAt: new Date(),\n         title: \""test\"",\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \""test\"");\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \""test\"",\n+      });\n       expect(results.length).toBe(1);\n       expect(results[0].ranking).toBeTruthy();\n       expect(results[0].document?.id).toBe(document.id);\n     });\n \n+    test(\""should return search results for a user without search term\"", async () => {\n+      const team = await buildTeam();\n+      const user = await buildUser({ teamId: team.id });\n+      const collection = await buildCollection({\n+        teamId: team.id,\n+        userId: user.id,\n+      });\n+      const documents = await Promise.all([\n+        buildDocument({\n+          teamId: team.id,\n+          userId: user.id,\n+          collectionId: collection.id,\n+          title: \""document 1\"",\n+        }),\n+        buildDocument({\n+          teamId: team.id,\n+          userId: user.id,\n+          collectionId: collection.id,\n+          title: \""document 2\"",\n+        }),\n+      ]);\n+      const { results } = await SearchHelper.searchForUser(user);\n+      expect(results.length).toBe(2);\n+      expect(results.map((r) => r.document.id).sort()).toEqual(\n+        documents.map((doc) => doc.id).sort()\n+      );\n+    });\n+\n+    test(\""should return search results from a collection without search term\"", async () => {\n+      const team = await buildTeam();\n+      const user = await buildUser({ teamId: team.id });\n+      const collection = await buildCollection({\n+        teamId: team.id,\n+        userId: user.id,\n+      });\n+      const documents = await Promise.all([\n+        buildDocument({\n+          teamId: team.id,\n+          userId: user.id,\n+          collectionId: collection.id,\n+          title: \""document 1\"",\n+        }),\n+        buildDocument({\n+          teamId: team.id,\n+          userId: user.id,\n+          collectionId: collection.id,\n+          title: \""document 2\"",\n+        }),\n+      ]);\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        collectionId: collection.id,\n+      });\n+      expect(results.length).toBe(2);\n+      expect(results.map((r) => r.document.id).sort()).toEqual(\n+        documents.map((doc) => doc.id).sort()\n+      );\n+    });\n+\n     test(\""should handle no collections\"", async () => {\n       const team = await buildTeam();\n       const user = await buildUser({ teamId: team.id });\n-      const { results } = await SearchHelper.searchForUser(user, \""test\"");\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \""test\"",\n+      });\n       expect(results.length).toBe(0);\n     });\n \n@@ -218,7 +317,8 @@ describe(\""SearchHelper\"", () => {\n         title: \""test\"",\n         archivedAt: new Date(),\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \""test\"", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \""test\"",\n         statusFilter: [StatusFilter.Draft],\n       });\n       expect(results.length).toBe(1);\n@@ -242,7 +342,8 @@ describe(\""SearchHelper\"", () => {\n         permission: DocumentPermission.Read,\n       });\n \n-      const { results } = await SearchHelper.searchForUser(user, \""test\"", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \""test\"",\n         statusFilter: [StatusFilter.Published, StatusFilter.Archived],\n       });\n       expect(results.length).toBe(0);\n@@ -272,7 +373,8 @@ describe(\""SearchHelper\"", () => {\n         title: \""test\"",\n         archivedAt: new Date(),\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \""test\"", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \""test\"",\n         statusFilter: [StatusFilter.Published],\n       });\n       expect(results.length).toBe(1);\n@@ -308,7 +410,8 @@ describe(\""SearchHelper\"", () => {\n         title: \""test\"",\n         archivedAt: new Date(),\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \""test\"", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \""test\"",\n         statusFilter: [StatusFilter.Archived],\n       });\n       expect(results.length).toBe(1);\n@@ -335,7 +438,8 @@ describe(\""SearchHelper\"", () => {\n         title: \""test\"",\n         archivedAt: new Date(),\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \""test\"", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \""test\"",\n         statusFilter: [StatusFilter.Archived, StatusFilter.Published],\n       });\n       expect(results.length).toBe(2);\n@@ -362,7 +466,8 @@ describe(\""SearchHelper\"", () => {\n         title: \""archived not draft\"",\n         archivedAt: new Date(),\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \""draft\"", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \""draft\"",\n         statusFilter: [StatusFilter.Published, StatusFilter.Draft],\n       });\n       expect(results.length).toBe(2);\n@@ -389,7 +494,8 @@ describe(\""SearchHelper\"", () => {\n         title: \""archived not draft\"",\n         archivedAt: new Date(),\n       });\n-      const { results } = await SearchHelper.searchForUser(user, \""draft\"", {\n+      const { results } = await SearchHelper.searchForUser(user, {\n+        query: \""draft\"",\n         statusFilter: [StatusFilter.Draft, StatusFilter.Archived],\n       });\n       expect(results.length).toBe(2);\n@@ -414,7 +520,9 @@ describe(\""SearchHelper\"", () => {\n         collectionId: collection.id,\n         title: \""test number 2\"",\n       });\n-      const { total } = await SearchHelper.searchForUser(user, \""test\"");\n+      const { total } = await SearchHelper.searchForUser(user, {\n+        query: \""test\"",\n+      });\n       expect(total).toBe(2);\n     });\n \n@@ -433,7 +541,9 @@ describe(\""SearchHelper\"", () => {\n       });\n       document.title = \""change\"";\n       await document.save();\n-      const { total } = await SearchHelper.searchForUser(user, \""test number\"");\n+      const { total } = await SearchHelper.searchForUser(user, {\n+        query: \""test number\"",\n+      });\n       expect(total).toBe(1);\n     });\n \n@@ -452,10 +562,9 @@ describe(\""SearchHelper\"", () => {\n       });\n       document.title = \""change\"";\n       await document.save();\n-      const { total } = await SearchHelper.searchForUser(\n-        user,\n-        \""title doesn't exist\""\n-      );\n+      const { total } = await SearchHelper.searchForUser(user, {\n+        query: \""title doesn't exist\"",\n+      });\n       expect(total).toBe(0);\n     });\n \n@@ -474,7 +583,9 @@ describe(\""SearchHelper\"", () => {\n       });\n       document.title = \""change\"";\n       await document.save();\n-      const { total } = await SearchHelper.searchForUser(user, `\""test number\""`);\n+      const { total } = await SearchHelper.searchForUser(user, {\n+        query: `\""test number\""`,\n+      });\n       expect(total).toBe(1);\n     });\n \n@@ -493,7 +604,9 @@ describe(\""SearchHelper\"", () => {\n       });\n       document.title = \""change\"";\n       await document.save();\n-      const { total } = await SearchHelper.searchForUser(user, \""env: \"");\n+      const { total } = await SearchHelper.searchForUser(user, {\n+        query: \""env: \"",\n+      });\n       expect(total).toBe(1);\n     });\n   });\n@@ -512,7 +625,9 @@ describe(\""SearchHelper\"", () => {\n         collectionId: collection.id,\n         title: \""test\"",\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \""test\"");\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \""test\"",\n+      });\n       expect(documents.length).toBe(1);\n       expect(documents[0]?.id).toBe(document.id);\n     });\n@@ -545,7 +660,8 @@ describe(\""SearchHelper\"", () => {\n         collectionId: collection1.id,\n         title: \""test\"",\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \""test\"", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \""test\"",\n         collectionId: collection.id,\n       });\n       expect(documents.length).toBe(1);\n@@ -555,7 +671,9 @@ describe(\""SearchHelper\"", () => {\n     test(\""should handle no collections\"", async () => {\n       const team = await buildTeam();\n       const user = await buildUser({ teamId: team.id });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \""test\"");\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \""test\"",\n+      });\n       expect(documents.length).toBe(0);\n     });\n \n@@ -583,7 +701,8 @@ describe(\""SearchHelper\"", () => {\n         title: \""test\"",\n         archivedAt: new Date(),\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \""test\"", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \""test\"",\n         statusFilter: [StatusFilter.Draft],\n       });\n       expect(documents.length).toBe(1);\n@@ -613,7 +732,8 @@ describe(\""SearchHelper\"", () => {\n         title: \""test\"",\n         archivedAt: new Date(),\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \""test\"", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \""test\"",\n         statusFilter: [StatusFilter.Published],\n       });\n       expect(documents.length).toBe(1);\n@@ -649,7 +769,8 @@ describe(\""SearchHelper\"", () => {\n         title: \""test\"",\n         archivedAt: new Date(),\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \""test\"", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \""test\"",\n         statusFilter: [StatusFilter.Archived],\n       });\n       expect(documents.length).toBe(1);\n@@ -676,7 +797,8 @@ describe(\""SearchHelper\"", () => {\n         title: \""test\"",\n         archivedAt: new Date(),\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \""test\"", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \""test\"",\n         statusFilter: [StatusFilter.Archived, StatusFilter.Published],\n       });\n       expect(documents.length).toBe(2);\n@@ -703,7 +825,8 @@ describe(\""SearchHelper\"", () => {\n         title: \""archived not draft\"",\n         archivedAt: new Date(),\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \""draft\"", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \""draft\"",\n         statusFilter: [StatusFilter.Published, StatusFilter.Draft],\n       });\n       expect(documents.length).toBe(2);\n@@ -730,7 +853,8 @@ describe(\""SearchHelper\"", () => {\n         title: \""archived not draft\"",\n         archivedAt: new Date(),\n       });\n-      const documents = await SearchHelper.searchTitlesForUser(user, \""draft\"", {\n+      const documents = await SearchHelper.searchTitlesForUser(user, {\n+        query: \""draft\"",\n         statusFilter: [StatusFilter.Draft, StatusFilter.Archived],\n       });\n       expect(documents.length).toBe(2);\n\ndiff --git a/server/routes/api/documents/documents.test.ts b/server/routes/api/documents/documents.test.ts\nindex 40afef9f3a6e..3a4adcdd647a 100644\n--- a/server/routes/api/documents/documents.test.ts\n+++ b/server/routes/api/documents/documents.test.ts\n@@ -1862,17 +1862,6 @@ describe(\""#documents.search\"", () => {\n     expect(body.data.length).toEqual(0);\n   });\n \n-  it(\""should expect a query\"", async () => {\n-    const user = await buildUser();\n-    const res = await server.post(\""/api/documents.search\"", {\n-      body: {\n-        token: user.getJwtToken(),\n-        query: \""   \"",\n-      },\n-    });\n-    expect(res.status).toEqual(400);\n-  });\n-\n   it(\""should not allow unknown dateFilter values\"", async () => {\n     const user = await buildUser();\n     const res = await server.post(\""/api/documents.search\"", {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
