metadata
"{""instance_id"": ""tailwindlabs__tailwindcss-18330"", ""pr_id"": 18330, ""issue_id"": 18318, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Tailwind migration script changed emit('blur', props.modelValue) to emit('blur-sm', props.modelValue)\nJust wanted to report this for your information.\n\n**Describe your issue**\n\nI have run the  `npx @tailwindcss/upgrade` script and everything worked fine, but it did change\n`emit('blur', props.modelValue)` to `emit('blur-sm', props.modelValue)` \nin my Vue3 app. Thus the `@blur` does not trigger, since the event is not called `blur` anymore.\n\n\n**What version of Tailwind CSS are you using?**\n\nmigrated from `^3.0.18` to `^4.1.9`\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 6.3.5\n\n**What version of Node.js are you using?**\n\nv22.15.0\n\n**What operating system are you using?**\n\nWindows\n\nLove Tailwind <3\n\n"", ""issue_word_count"": 125, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts""], ""pr_changed_test_files"": [""packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts""], ""base_commit"": ""44534963c3990aa61af8c312860cdc2fb46e100a"", ""head_commit"": ""5142603285e7fd8755839e0e598eb7d17519c234"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/18330"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/18330"", ""dockerfile"": """", ""pr_merged_at"": ""2025-06-17T16:49:33.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 8106d13895bf..70036c42a1a2 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -7,7 +7,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ## [Unreleased]\n \n-- Nothing yet!\n+- Add heuristic to skip candidate migrations inside `emit(\u2026)` ([#18330](https://github.com/tailwindlabs/tailwindcss/pull/18330))\n \n ## [4.1.10] - 2025-06-11\n \n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts\nindex 27c2e23216ea..7ac24d645fb3 100644\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts\n@@ -18,6 +18,7 @@ const CONDITIONAL_TEMPLATE_SYNTAX = [\n   /wire:[^\\s]*?$/,\n ]\n const NEXT_PLACEHOLDER_PROP = /placeholder=\\{?['\""]$/\n+const VUE_3_EMIT = /\\b\\$?emit\\(['\""]$/\n \n export function isSafeMigration(\n   rawCandidate: string,\n@@ -175,6 +176,11 @@ export function isSafeMigration(\n     return false\n   }\n \n+  // Heuristic: Disallow replacements inside `emit('\u2026', \u2026)`\n+  if (VUE_3_EMIT.test(currentLineBeforeCandidate)) {\n+    return false\n+  }\n+\n   return true\n }\n \n"", ""test_patch"": ""diff --git a/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts\nindex b4c9c01246fc..5ade133e06fc 100644\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts\n@@ -61,4 +61,8 @@ test('does not replace classes in invalid positions', async () => {\n \n   // Alpine/Livewire wire:\u2026\n   await shouldNotReplace('<x-input.number required=\""foo\"" wire:model.blur=\""coins\"" />', 'blur')\n+\n+  // Vue 3 events\n+  await shouldNotReplace(`emit('blur', props.modelValue)\\n`, 'blur')\n+  await shouldNotReplace(`$emit('blur', props.modelValue)\\n`, 'blur')\n })\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-18289"", ""pr_id"": 18289, ""issue_id"": 18288, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""`calc()` in arbitrary class name missing spaces around `-`\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.1.9\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nTailwind Play\n\n**What version of Node.js are you using?**\n\nN/a\n\n**What browser are you using?**\n\nChrome, Firefox\n\n**What operating system are you using?**\n\nWindows\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/VL4wmKtq0r\n\n**Describe your issue**\n\nSeems like work in #18220 may have introduced some regressions in whitespace handling in `calc()`.\n\nFor `w-[calc(100%-var(--foo))]`, we get:\n\n```css\nwidth: calc(100%-var(--foo));\n```\nBut I would expect:\n\n```css\nwidth: calc(100% - var(--foo));\n```\n\nSource: https://discord.com/channels/486935104384532500/1382440930182828104"", ""issue_word_count"": 149, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utils/decode-arbitrary-value.test.ts"", ""packages/tailwindcss/src/utils/math-operators.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utils/decode-arbitrary-value.test.ts""], ""base_commit"": ""427649eee49d30f251755ad639cc35a7e035f590"", ""head_commit"": ""a64a3b204038f4d637213be02935be2d1e4468c1"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/18289"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/18289"", ""dockerfile"": """", ""pr_merged_at"": ""2025-06-11T20:18:14.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 1346213eadb8..e30a1d06d5d9 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -7,7 +7,9 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ## [Unreleased]\n \n-- Nothing yet!\n+### Fixed\n+\n+- Fix missing space around `-` when using `%` ([#18289](https://github.com/tailwindlabs/tailwindcss/pull/18289))\n \n ## [4.1.9] - 2025-06-11\n \n\ndiff --git a/packages/tailwindcss/src/utils/math-operators.ts b/packages/tailwindcss/src/utils/math-operators.ts\nindex 523fcce208cf..d31cc3c526c9 100644\n--- a/packages/tailwindcss/src/utils/math-operators.ts\n+++ b/packages/tailwindcss/src/utils/math-operators.ts\n@@ -1,5 +1,7 @@\n const LOWER_A = 0x61\n const LOWER_Z = 0x7a\n+const UPPER_A = 0x41\n+const UPPER_Z = 0x5a\n const LOWER_E = 0x65\n const UPPER_E = 0x45\n const ZERO = 0x30\n@@ -12,6 +14,7 @@ const OPEN_PAREN = 0x28\n const CLOSE_PAREN = 0x29\n const COMMA = 0x2c\n const SPACE = 0x20\n+const PERCENT = 0x25\n \n const MATH_FUNCTIONS = [\n   'calc',\n@@ -62,7 +65,12 @@ export function addWhitespaceAroundMathOperators(input: string) {\n \n     // If we saw a number before, and we see normal a-z character, then we\n     // assume this is a value such as `123px`\n-    else if (valuePos !== null && char >= LOWER_A && char <= LOWER_Z) {\n+    else if (\n+      valuePos !== null &&\n+      (char === PERCENT ||\n+        (char >= LOWER_A && char <= LOWER_Z) ||\n+        (char >= UPPER_A && char <= UPPER_Z))\n+    ) {\n       valuePos = i\n     }\n \n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utils/decode-arbitrary-value.test.ts b/packages/tailwindcss/src/utils/decode-arbitrary-value.test.ts\nindex 19025d5b4bfa..0bc4d425cdd2 100644\n--- a/packages/tailwindcss/src/utils/decode-arbitrary-value.test.ts\n+++ b/packages/tailwindcss/src/utils/decode-arbitrary-value.test.ts\n@@ -84,6 +84,12 @@ describe('adds spaces around math operators', () => {\n     ['calc(theme(spacing.foo-2))', 'calc(theme(spacing.foo-2))'],\n     ['calc(theme(spacing.foo-bar))', 'calc(theme(spacing.foo-bar))'],\n \n+    // With percentages\n+    ['calc(100%-var(--foo))', 'calc(100% - var(--foo))'],\n+\n+    // With uppercase units\n+    ['calc(100PX-theme(spacing.1))', 'calc(100PX - theme(spacing.1))'],\n+\n     // Preserving CSS keyword tokens like fit-content without splitting around hyphens in complex expressions\n     ['min(fit-content,calc(100dvh-4rem))', 'min(fit-content, calc(100dvh - 4rem))'],\n     [\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-18220"", ""pr_id"": 18220, ""issue_id"": 18219, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Incorrect formatting of valid hyphenated values placed inside a CSS function: `fit-content` becomes `fit - content`\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nFor example: v4.1.8\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nTailwind Play\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/kbBgEMHTsM\n\n**Describe your issue**\n\n```html\n<div class=\""min-h-[min(fit-content,calc(100dvh-4rem))]\""></div>\n```\n\nThe expected result would be:\n\n```css\n.min-h-\\[min\\(fit-content\\,calc\\(100dvh-4rem\\)\\)\\] {\n  min-height: min(fit-content, calc(100dvh - 4rem));\n}\n```\n\nInstead - since it's inside a `min()` function - every hyphen gets surrounded by spaces:\n\n```css\n.min-h-\\[min\\(fit-content\\,calc\\(100dvh-4rem\\)\\)\\] {\n  min-height: min(fit - content, calc(100dvh - 4rem));\n}\n```"", ""issue_word_count"": 154, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utils/decode-arbitrary-value.test.ts"", ""packages/tailwindcss/src/utils/math-operators.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utils/decode-arbitrary-value.test.ts""], ""base_commit"": ""da0895655e35e8b09fc155165edcd8b0a00ee6ab"", ""head_commit"": ""632a247f108e3b9bb2d8f2e012797aedde3ce483"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/18220"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/18220"", ""dockerfile"": """", ""pr_merged_at"": ""2025-06-10T14:38:31.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex f75160c1b0c3..1d0d5697bab7 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -14,6 +14,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Upgrade: migrate CSS variable shorthand if fallback value contains function call ([#18184](https://github.com/tailwindlabs/tailwindcss/pull/18184))\n - Upgrade: Migrate negative arbitrary values to negative bare values, e.g.: `mb-[-32rem]` \u2192 `-mb-128` ([#18212](https://github.com/tailwindlabs/tailwindcss/pull/18212))\n - Upgrade: Do not migrate `blur` in `wire:model.blur` ([#18216](https://github.com/tailwindlabs/tailwindcss/pull/18216))\n+- Don't add spaces around CSS dashed idents when formatting math expressions ([#18220](https://github.com/tailwindlabs/tailwindcss/pull/18220))\n \n ## [4.1.8] - 2025-05-27\n \n\ndiff --git a/packages/tailwindcss/src/utils/math-operators.ts b/packages/tailwindcss/src/utils/math-operators.ts\nindex e6e83fe79b0c..523fcce208cf 100644\n--- a/packages/tailwindcss/src/utils/math-operators.ts\n+++ b/packages/tailwindcss/src/utils/math-operators.ts\n@@ -1,3 +1,18 @@\n+const LOWER_A = 0x61\n+const LOWER_Z = 0x7a\n+const LOWER_E = 0x65\n+const UPPER_E = 0x45\n+const ZERO = 0x30\n+const NINE = 0x39\n+const ADD = 0x2b\n+const SUB = 0x2d\n+const MUL = 0x2a\n+const DIV = 0x2f\n+const OPEN_PAREN = 0x28\n+const CLOSE_PAREN = 0x29\n+const COMMA = 0x2c\n+const SPACE = 0x20\n+\n const MATH_FUNCTIONS = [\n   'calc',\n   'min',\n@@ -20,9 +35,6 @@ const MATH_FUNCTIONS = [\n   'round',\n ]\n \n-const KNOWN_DASHED_FUNCTIONS = ['anchor-size']\n-const DASHED_FUNCTIONS_REGEX = new RegExp(`(${KNOWN_DASHED_FUNCTIONS.join('|')})\\\\(`, 'g')\n-\n export function hasMathFn(input: string) {\n   return input.indexOf('(') !== -1 && MATH_FUNCTIONS.some((fn) => input.includes(`${fn}(`))\n }\n@@ -33,25 +45,36 @@ export function addWhitespaceAroundMathOperators(input: string) {\n     return input\n   }\n \n-  // Replace known functions with a placeholder\n-  let hasKnownFunctions = false\n-  if (KNOWN_DASHED_FUNCTIONS.some((fn) => input.includes(fn))) {\n-    DASHED_FUNCTIONS_REGEX.lastIndex = 0\n-    input = input.replace(DASHED_FUNCTIONS_REGEX, (_, fn) => {\n-      hasKnownFunctions = true\n-      return `$${KNOWN_DASHED_FUNCTIONS.indexOf(fn)}$(`\n-    })\n-  }\n-\n   let result = ''\n   let formattable: boolean[] = []\n \n+  let valuePos = null\n+  let lastValuePos = null\n+\n   for (let i = 0; i < input.length; i++) {\n-    let char = input[i]\n+    let char = input.charCodeAt(i)\n+\n+    // Track if we see a number followed by a unit, then we know for sure that\n+    // this is not a function call.\n+    if (char >= ZERO && char <= NINE) {\n+      valuePos = i\n+    }\n+\n+    // If we saw a number before, and we see normal a-z character, then we\n+    // assume this is a value such as `123px`\n+    else if (valuePos !== null && char >= LOWER_A && char <= LOWER_Z) {\n+      valuePos = i\n+    }\n+\n+    // Once we see something else, we reset the value position\n+    else {\n+      lastValuePos = valuePos\n+      valuePos = null\n+    }\n \n     // Determine if we're inside a math function\n-    if (char === '(') {\n-      result += char\n+    if (char === OPEN_PAREN) {\n+      result += input[i]\n \n       // Scan backwards to determine the function name. This assumes math\n       // functions are named with lowercase alphanumeric characters.\n@@ -60,9 +83,9 @@ export function addWhitespaceAroundMathOperators(input: string) {\n       for (let j = i - 1; j >= 0; j--) {\n         let inner = input.charCodeAt(j)\n \n-        if (inner >= 48 && inner <= 57) {\n+        if (inner >= ZERO && inner <= NINE) {\n           start = j // 0-9\n-        } else if (inner >= 97 && inner <= 122) {\n+        } else if (inner >= LOWER_A && inner <= LOWER_Z) {\n           start = j // a-z\n         } else {\n           break\n@@ -91,76 +114,84 @@ export function addWhitespaceAroundMathOperators(input: string) {\n \n     // We've exited the function so format according to the parent function's\n     // type.\n-    else if (char === ')') {\n-      result += char\n+    else if (char === CLOSE_PAREN) {\n+      result += input[i]\n       formattable.shift()\n     }\n \n     // Add spaces after commas in math functions\n-    else if (char === ',' && formattable[0]) {\n+    else if (char === COMMA && formattable[0]) {\n       result += `, `\n       continue\n     }\n \n     // Skip over consecutive whitespace\n-    else if (char === ' ' && formattable[0] && result[result.length - 1] === ' ') {\n+    else if (char === SPACE && formattable[0] && result.charCodeAt(result.length - 1) === SPACE) {\n       continue\n     }\n \n     // Add whitespace around operators inside math functions\n-    else if ((char === '+' || char === '*' || char === '/' || char === '-') && formattable[0]) {\n+    else if ((char === ADD || char === MUL || char === DIV || char === SUB) && formattable[0]) {\n       let trimmed = result.trimEnd()\n-      let prev = trimmed[trimmed.length - 1]\n+      let prev = trimmed.charCodeAt(trimmed.length - 1)\n+      let prevPrev = trimmed.charCodeAt(trimmed.length - 2)\n+      let next = input.charCodeAt(i + 1)\n+\n+      // Do not add spaces for scientific notation, e.g.: `-3.4e-2`\n+      if ((prev === LOWER_E || prev === UPPER_E) && prevPrev >= ZERO && prevPrev <= NINE) {\n+        result += input[i]\n+        continue\n+      }\n \n       // If we're preceded by an operator don't add spaces\n-      if (prev === '+' || prev === '*' || prev === '/' || prev === '-') {\n-        result += char\n+      else if (prev === ADD || prev === MUL || prev === DIV || prev === SUB) {\n+        result += input[i]\n         continue\n       }\n \n       // If we're at the beginning of an argument don't add spaces\n-      else if (prev === '(' || prev === ',') {\n-        result += char\n+      else if (prev === OPEN_PAREN || prev === COMMA) {\n+        result += input[i]\n         continue\n       }\n \n       // Add spaces only after the operator if we already have spaces before it\n-      else if (input[i - 1] === ' ') {\n-        result += `${char} `\n+      else if (input.charCodeAt(i - 1) === SPACE) {\n+        result += `${input[i]} `\n       }\n \n-      // Add spaces around the operator\n-      else {\n-        result += ` ${char} `\n+      // Add spaces around the operator, if...\n+      else if (\n+        // Previous is a digit\n+        (prev >= ZERO && prev <= NINE) ||\n+        // Next is a digit\n+        (next >= ZERO && next <= NINE) ||\n+        // Previous is end of a function call (or parenthesized expression)\n+        prev === CLOSE_PAREN ||\n+        // Next is start of a parenthesized expression\n+        next === OPEN_PAREN ||\n+        // Next is an operator\n+        next === ADD ||\n+        next === MUL ||\n+        next === DIV ||\n+        next === SUB ||\n+        // Previous position was a value (+ unit)\n+        (lastValuePos !== null && lastValuePos === i - 1)\n+      ) {\n+        result += ` ${input[i]} `\n       }\n-    }\n \n-    // Skip over `to-zero` when in a math function.\n-    //\n-    // This is specifically to handle this value in the round(\u2026) function:\n-    //\n-    // ```\n-    // round(to-zero, 1px)\n-    //       ^^^^^^^\n-    // ```\n-    //\n-    // This is because the first argument is optionally a keyword and `to-zero`\n-    // contains a hyphen and we want to avoid adding spaces inside it.\n-    else if (formattable[0] && input.startsWith('to-zero', i)) {\n-      let start = i\n-      i += 7\n-      result += input.slice(start, i + 1)\n+      // Everything else\n+      else {\n+        result += input[i]\n+      }\n     }\n \n     // Handle all other characters\n     else {\n-      result += char\n+      result += input[i]\n     }\n   }\n \n-  if (hasKnownFunctions) {\n-    return result.replace(/\\$(\\d+)\\$/g, (fn, idx) => KNOWN_DASHED_FUNCTIONS[idx] ?? fn)\n-  }\n-\n   return result\n }\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utils/decode-arbitrary-value.test.ts b/packages/tailwindcss/src/utils/decode-arbitrary-value.test.ts\nindex 2dccd897f5e2..19025d5b4bfa 100644\n--- a/packages/tailwindcss/src/utils/decode-arbitrary-value.test.ts\n+++ b/packages/tailwindcss/src/utils/decode-arbitrary-value.test.ts\n@@ -84,6 +84,22 @@ describe('adds spaces around math operators', () => {\n     ['calc(theme(spacing.foo-2))', 'calc(theme(spacing.foo-2))'],\n     ['calc(theme(spacing.foo-bar))', 'calc(theme(spacing.foo-bar))'],\n \n+    // Preserving CSS keyword tokens like fit-content without splitting around hyphens in complex expressions\n+    ['min(fit-content,calc(100dvh-4rem))', 'min(fit-content, calc(100dvh - 4rem))'],\n+    [\n+      'min(theme(spacing.foo-bar),fit-content,calc(20*calc(40-30)))',\n+      'min(theme(spacing.foo-bar), fit-content, calc(20 * calc(40 - 30)))',\n+    ],\n+    [\n+      'min(fit-content,calc(100dvh-4rem)-calc(50dvh--2px))',\n+      'min(fit-content, calc(100dvh - 4rem) - calc(50dvh - -2px))',\n+    ],\n+    ['min(-3.4e-2-var(--foo),calc-size(auto))', 'min(-3.4e-2 - var(--foo), calc-size(auto))'],\n+    [\n+      'clamp(-10e3-var(--foo),calc-size(max-content),var(--foo)+-10e3)',\n+      'clamp(-10e3 - var(--foo), calc-size(max-content), var(--foo) + -10e3)',\n+    ],\n+\n     // A negative number immediately after a `,` should not have spaces inserted\n     ['clamp(-3px+4px,-3px+4px,-3px+4px)', 'clamp(-3px + 4px, -3px + 4px, -3px + 4px)'],\n \n@@ -93,6 +109,12 @@ describe('adds spaces around math operators', () => {\n     // Prevent formatting inside `env()` functions\n     ['calc(env(safe-area-inset-bottom)*2)', 'calc(env(safe-area-inset-bottom) * 2)'],\n \n+    // Handle dashed functions that look like known dashed idents\n+    [\n+      'fit-content(min(max-content,max(min-content,calc(20px+1em))))',\n+      'fit-content(min(max-content, max(min-content, calc(20px + 1em))))',\n+    ],\n+\n     // Should format inside `calc()` nested in `env()`\n     [\n       'env(safe-area-inset-bottom,calc(10px+20px))',\n@@ -122,7 +144,7 @@ describe('adds spaces around math operators', () => {\n \n     // round(\u2026) function\n     ['round(1+2,1+3)', 'round(1 + 2, 1 + 3)'],\n-    ['round(to-zero,1+2,1+3)', 'round(to-zero,1 + 2, 1 + 3)'],\n+    ['round(to-zero,1+2,1+3)', 'round(to-zero, 1 + 2, 1 + 3)'],\n \n     // Nested parens in non-math functions don't format their contents\n     ['env((safe-area-inset-bottom))', 'env((safe-area-inset-bottom))'],\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-18216"", ""pr_id"": 18216, ""issue_id"": 18187, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Upgrade tool - issue with wire:model\nHello!\n\nI ran the upgrade tool in my codebase, a Laravel codebase that has both Livewire and Alpine in them.\n\nThe upgrade tool mistakenly changed `wire:model.blur` to `wire:model.blur-sm`, thereby causing models to stop behaving properly in Livewire."", ""issue_word_count"": 48, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts""], ""pr_changed_test_files"": [""packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts""], ""base_commit"": ""b3fde17eacf4886c9e3fe072393aa5e7045d37b3"", ""head_commit"": ""0ab96b71dbc279cefdde45b2c86b74e767ec10a4"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/18216"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/18216"", ""dockerfile"": """", ""pr_merged_at"": ""2025-06-03T18:27:59.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex d293fd5c130a..ef1694dfe4da 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Upgrade: migrate arbitrary modifiers with values without percentage sign to bare values `/[0.16]` -> `/16` ([#18184](https://github.com/tailwindlabs/tailwindcss/pull/18184))\n - Upgrade: migrate CSS variable shorthand if fallback value contains function call ([#18184](https://github.com/tailwindlabs/tailwindcss/pull/18184))\n - Upgrade: Migrate negative arbitrary values to negative bare values, e.g.: `mb-[-32rem]` \u2192 `-mb-128` ([#18212](https://github.com/tailwindlabs/tailwindcss/pull/18212))\n+- Upgrade: Do not migrate `blur` in `wire:model.blur` ([#18216](https://github.com/tailwindlabs/tailwindcss/pull/18216))\n \n ## [4.1.8] - 2025-05-27\n \n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts\nindex 047424e11291..27c2e23216ea 100644\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts\n@@ -15,6 +15,7 @@ const CONDITIONAL_TEMPLATE_SYNTAX = [\n   // Alpine\n   /x-if=['\""]$/,\n   /x-show=['\""]$/,\n+  /wire:[^\\s]*?$/,\n ]\n const NEXT_PLACEHOLDER_PROP = /placeholder=\\{?['\""]$/\n \n"", ""test_patch"": ""diff --git a/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts\nindex 455b686604e8..b4c9c01246fc 100644\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts\n@@ -58,4 +58,7 @@ test('does not replace classes in invalid positions', async () => {\n   await shouldNotReplace('<div v-if=\""!duration\"">', '!duration')\n   await shouldNotReplace('<div :active=\""!duration\"">', '!duration')\n   await shouldNotReplace('<div :active=\""!visible\"">', '!visible')\n+\n+  // Alpine/Livewire wire:\u2026\n+  await shouldNotReplace('<x-input.number required=\""foo\"" wire:model.blur=\""coins\"" />', 'blur')\n })\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-18133"", ""pr_id"": 18133, ""issue_id"": 17064, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""TypeError: Cannot read properties of undefined (reading 'nodes')\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n@tailwindcss/cli\n\n**What version of Node.js are you using?**\nBun 1.2.x\n\n**What browser are you using?**\nEdge\n\n**What operating system are you using?**\nWindows\n\n**Reproduction URL**\nN/A - error is in the build process and can't be replicated on play\n\n**Describe your issue**\nWhen running `bunx @tailwindcss/cli -i ./Blazor/Blazor/wwwroot/app.css -o ./Blazor/Blazor/wwwroot/app.min.css --watch` it intermittently outputs `TypeError: Cannot read properties of undefined (reading 'nodes')`\n\n![Image](https://github.com/user-attachments/assets/86b80c4b-eaf7-4f27-a501-26d41d554482)"", ""issue_word_count"": 156, ""test_files_count"": 2, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/value-parser.test.ts"", ""packages/tailwindcss/src/value-parser.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/value-parser.test.ts""], ""base_commit"": ""9cb38993d2e68cd98b458ebd8c863e87bf7ce5ae"", ""head_commit"": ""18118f9dfb6ad64fc344d4f0b26df672eeccbc71"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/18133"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/18133"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-23T19:59:02.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex c002d985efd3..cc106a20e950 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -13,6 +13,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Upgrade: Improve `pnpm` workspaces support ([#18065](https://github.com/tailwindlabs/tailwindcss/pull/18065))\n - Upgrade: Migrate deprecated `order-none` to `order-0` ([#18126](https://github.com/tailwindlabs/tailwindcss/pull/18126))\n - Support Leptos `class:` attributes when extracting classes ([#18093](https://github.com/tailwindlabs/tailwindcss/pull/18093))\n+- Fix \""Cannot read properties of undefined\"" crash on malformed arbitrary value ([#18133](https://github.com/tailwindlabs/tailwindcss/pull/18133))\n \n ## [4.1.7] - 2025-05-15\n \n\ndiff --git a/packages/tailwindcss/src/value-parser.ts b/packages/tailwindcss/src/value-parser.ts\nindex 5d111bce2793..945b2a11290b 100644\n--- a/packages/tailwindcss/src/value-parser.ts\n+++ b/packages/tailwindcss/src/value-parser.ts\n@@ -302,7 +302,7 @@ export function parse(input: string) {\n         // Handle everything before the closing paren a word\n         if (buffer.length > 0) {\n           let node = word(buffer)\n-          tail!.nodes.push(node)\n+          tail?.nodes.push(node)\n           buffer = ''\n         }\n \n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex 93719f0837e5..9c6df63fc3f6 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -4305,11 +4305,11 @@ it(\""should error when `layer(\u2026)` is used, but it's not the first param\"", async\n \n describe('`@reference \""\u2026\"" imports`', () => {\n   test('recursively removes styles', async () => {\n-    let loadStylesheet = async (id: string, base: string) => {\n+    let loadStylesheet = async (id: string, base = '/root/foo') => {\n       if (id === './foo/baz.css') {\n         return {\n+          base,\n           path: '',\n-          base: '/root/foo',\n           content: css`\n             .foo {\n               color: red;\n@@ -4355,11 +4355,11 @@ describe('`@reference \""\u2026\"" imports`', () => {\n   })\n \n   test('does not generate utilities', async () => {\n-    let loadStylesheet = async (id: string, base: string) => {\n+    let loadStylesheet = async (id: string, base = '/root/foo') => {\n       if (id === './foo/baz.css') {\n         return {\n+          base,\n           path: '',\n-          base: '/root/foo',\n           content: css`\n             @layer utilities {\n               @tailwind utilities;\n@@ -4442,7 +4442,7 @@ describe('`@reference \""\u2026\"" imports`', () => {\n               })\n               matchUtilities(\n                 {\n-                  'match-utility': (value) => ({\n+                  'match-utility': (_value) => ({\n                     '@keyframes match-utilities': { '100%': { opacity: '0' } },\n                   }),\n                 },\n@@ -4450,7 +4450,7 @@ describe('`@reference \""\u2026\"" imports`', () => {\n               )\n               matchComponents(\n                 {\n-                  'match-components': (value) => ({\n+                  'match-components': (_value) => ({\n                     '@keyframes match-components': { '100%': { opacity: '0' } },\n                   }),\n                 },\n@@ -4474,12 +4474,12 @@ describe('`@reference \""\u2026\"" imports`', () => {\n   })\n \n   test('emits CSS variable fallback and keyframes defined inside @reference-ed files', async () => {\n-    let loadStylesheet = async (id: string, base: string) => {\n+    let loadStylesheet = async (id: string, base = '/root') => {\n       switch (id) {\n         case './one.css': {\n           return {\n+            base,\n             path: '',\n-            base: '/root',\n             content: css`\n               @import './two.css' layer(two);\n             `,\n@@ -4487,8 +4487,8 @@ describe('`@reference \""\u2026\"" imports`', () => {\n         }\n         case './two.css': {\n           return {\n+            base,\n             path: '',\n-            base: '/root',\n             content: css`\n               @import './three.css' layer(three);\n             `,\n@@ -4496,8 +4496,8 @@ describe('`@reference \""\u2026\"" imports`', () => {\n         }\n         case './three.css': {\n           return {\n+            base,\n             path: '',\n-            base: '/root',\n             content: css`\n               .foo {\n                 color: red;\n@@ -5519,7 +5519,7 @@ describe('feature detection', () => {\n       css`\n         @import 'tailwindcss/preflight';\n       `,\n-      { loadStylesheet: async (_, base) => ({ base, content: '' }) },\n+      { loadStylesheet: async (_, base) => ({ base, path: '', content: '' }) },\n     )\n \n     expect(compiler.features & Features.AtImport).toBeTruthy()\n@@ -5530,7 +5530,7 @@ describe('feature detection', () => {\n       css`\n         @import 'tailwindcss/preflight';\n       `,\n-      { loadStylesheet: async (_, base) => ({ base, content: '' }) },\n+      { loadStylesheet: async (_, base) => ({ base, path: '', content: '' }) },\n     )\n \n     // There's little difference between `@reference` and `@import` on a feature\n@@ -5551,7 +5551,7 @@ describe('feature detection', () => {\n           color: theme(--color-red);\n         }\n       `,\n-      { loadStylesheet: async (_, base) => ({ base, content: '' }) },\n+      { loadStylesheet: async (_, base) => ({ base, path: '', content: '' }) },\n     )\n \n     expect(compiler.features & Features.ThemeFunction).toBeTruthy()\n@@ -5562,7 +5562,7 @@ describe('feature detection', () => {\n       css`\n         @plugin \""./some-plugin.js\"";\n       `,\n-      { loadModule: async (_, base) => ({ base, module: () => {} }) },\n+      { loadModule: async (_, base) => ({ base, path: '', module: () => {} }) },\n     )\n \n     expect(compiler.features & Features.JsPluginCompat).toBeTruthy()\n@@ -5573,7 +5573,7 @@ describe('feature detection', () => {\n       css`\n         @config \""./some-config.js\"";\n       `,\n-      { loadModule: async (_, base) => ({ base, module: {} }) },\n+      { loadModule: async (_, base) => ({ base, path: '', module: {} }) },\n     )\n \n     expect(compiler.features & Features.JsPluginCompat).toBeTruthy()\n@@ -5605,9 +5605,10 @@ describe('feature detection', () => {\n         @reference \""tailwindcss/utilities\"";\n       `,\n       {\n-        async loadStylesheet(id, base) {\n+        async loadStylesheet(_id, base) {\n           return {\n             base,\n+            path: '',\n             content: css`\n               @tailwind utilities;\n             `,\n\ndiff --git a/packages/tailwindcss/src/value-parser.test.ts b/packages/tailwindcss/src/value-parser.test.ts\nindex e1e64832c5db..43110f781aa3 100644\n--- a/packages/tailwindcss/src/value-parser.test.ts\n+++ b/packages/tailwindcss/src/value-parser.test.ts\n@@ -165,6 +165,22 @@ describe('parse', () => {\n       },\n     ])\n   })\n+\n+  it('should not error when extra `)` was passed', () => {\n+    expect(parse('calc(1 + 2))')).toEqual([\n+      {\n+        kind: 'function',\n+        value: 'calc',\n+        nodes: [\n+          { kind: 'word', value: '1' },\n+          { kind: 'separator', value: ' ' },\n+          { kind: 'word', value: '+' },\n+          { kind: 'separator', value: ' ' },\n+          { kind: 'word', value: '2' },\n+        ],\n+      },\n+    ])\n+  })\n })\n \n describe('toCss', () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-18057"", ""pr_id"": 18057, ""issue_id"": 17975, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""@tailwindcss/upgrade - brakes valid CSS\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nUpgrading to tailwindcss v4.1.6\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 5.2.3\n\n**What version of Node.js are you using?**\n\nFor example: v22.14.0\n**What operating system are you using?**\n\nmacOS\n\n**Describe your issue**\n\nRunning `npx @tailwindcss/upgrade@latest` broke valid CSS in Vue and HTML files.\nExamples:\n\n<img width=\""191\"" alt=\""Image\"" src=\""https://github.com/user-attachments/assets/09892168-c1f9-46ee-b2e4-cdfc64ceb308\"" />\n<br>\n<img width=\""177\"" alt=\""Image\"" src=\""https://github.com/user-attachments/assets/ac78032b-af49-4ce4-8ac8-181b921cf88a\"" />"", ""issue_word_count"": 143, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/upgrade/index.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts""], ""pr_changed_test_files"": [""integrations/upgrade/index.test.ts""], ""base_commit"": ""d69604e202f283df977ebca943dd86edc1c00214"", ""head_commit"": ""07a073856b84f761b8d0da17dfa3c974e905b0fa"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/18057"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/18057"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-16T10:53:35.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 9f48d1c51fe2..a8a414fec022 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -7,7 +7,9 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ## [Unreleased]\n \n-- Nothing yet!\n+### Fixed\n+\n+- Upgrade: Do not migrate declarations that look like candidates in `<style>` blocks ([#18057](https://github.com/tailwindlabs/tailwindcss/pull/18057))\n \n ## [4.1.7] - 2025-05-15\n \n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts\nindex dd540d5c57e7..a344e56ed18f 100644\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts\n@@ -22,6 +22,37 @@ export function isSafeMigration(\n   location: { contents: string; start: number; end: number },\n   designSystem: DesignSystem,\n ): boolean {\n+  // Ensure we are not migrating a candidate in a `<style>` block. The heuristic\n+  // would be if the candidate is preceded by a whitespace and followed by a\n+  // colon and whitespace.\n+  //\n+  // E.g.:\n+  // ```vue\n+  // <template>\n+  //   <div class=\""foo\""></div>\n+  // </template>\n+  //\n+  //\n+  // <style>\n+  // .foo {\n+  //   flex-shrink: 0;\n+  //  ^           ^^\n+  // }\n+  // </style>\n+  // ```\n+  if (\n+    // Whitespace before the candidate\n+    location.contents[location.start - 1]?.match(/\\s/) &&\n+    // A colon followed by whitespace after the candidate\n+    location.contents.slice(location.end, location.end + 2)?.match(/^:\\s/) &&\n+    // A `<style` block is present before the candidate\n+    location.contents.slice(0, location.start).includes('<style') &&\n+    // `</style>` is present after the candidate\n+    location.contents.slice(location.end).includes('</style>')\n+  ) {\n+    return false\n+  }\n+\n   let [candidate] = Array.from(parseCandidate(rawCandidate, designSystem))\n \n   // If we can't parse the candidate, then it's not a candidate at all. However,\n"", ""test_patch"": ""diff --git a/integrations/upgrade/index.test.ts b/integrations/upgrade/index.test.ts\nindex 2dc9b7c678ee..c70c83ddc6df 100644\n--- a/integrations/upgrade/index.test.ts\n+++ b/integrations/upgrade/index.test.ts\n@@ -2967,6 +2967,87 @@ test(\n   },\n )\n \n+test(\n+  'upgrade <style> blocks carefully',\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""dependencies\"": {\n+            \""tailwindcss\"": \""^4\"",\n+            \""@tailwindcss/upgrade\"": \""workspace:^\""\n+          }\n+        }\n+      `,\n+      'src/index.vue': html`\n+        <template\n+          <div class=\""!flex\""></div>\n+        </template>\n+\n+        <style>\n+        @reference \""./input.css\"";\n+\n+        .foo {\n+          @apply !bg-red-500;\n+        }\n+\n+        .bar {\n+          /* Do not upgrade the key: */\n+          flex-shrink: 0;\n+        }\n+        </style>\n+      `,\n+      'src/input.css': css`\n+        @import 'tailwindcss';\n+\n+        .foo {\n+          flex-shrink: 1;\n+        }\n+\n+        .bar {\n+          @apply !underline;\n+        }\n+      `,\n+    },\n+  },\n+  async ({ exec, fs, expect }) => {\n+    await exec('npx @tailwindcss/upgrade')\n+\n+    expect(await fs.dumpFiles('./src/**/*.{css,vue}')).toMatchInlineSnapshot(`\n+      \""\n+      --- ./src/index.vue ---\n+      <template\n+        <div class=\""flex!\""></div>\n+      </template>\n+\n+      <style>\n+      @reference \""./input.css\"";\n+\n+      .foo {\n+        @apply !bg-red-500;\n+      }\n+\n+      .bar {\n+        /* Do not upgrade the key: */\n+        flex-shrink: 0;\n+      }\n+      </style>\n+\n+      --- ./src/input.css ---\n+      @import 'tailwindcss';\n+\n+      .foo {\n+        flex-shrink: 1;\n+      }\n+\n+      .bar {\n+        @apply underline!;\n+      }\n+      \""\n+    `)\n+  },\n+)\n+\n function withBOM(text: string): string {\n   return '\\uFEFF' + text\n }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-18025"", ""pr_id"": 18025, ""issue_id"": 17974, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""@tailwindcss/upgrade - brakes boolean operators in Vue files\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nUpgrading to tailwindcss v4.1.6\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 5.2.3\n\n**What version of Node.js are you using?**\n\nFor example: v22.14.0\n**What operating system are you using?**\n\nmacOS\n\n**Describe your issue**\n\nRunning `npx @tailwindcss/upgrade@latest` broke logical operators in Vue files.\nExamples:\n\n<img width=\""155\"" alt=\""Image\"" src=\""https://github.com/user-attachments/assets/d25d15d1-b443-4789-8a86-1f76788f2bc2\"" />\n<br>\n<img width=\""150\"" alt=\""Image\"" src=\""https://github.com/user-attachments/assets/e2e33cd2-1734-4668-8169-5a6b8b2e17a6\"" />\n\n---\nMaybe related to \nhttps://github.com/tailwindlabs/tailwindcss/pull/14737\nhttps://github.com/tailwindlabs/tailwindcss/pull/14774"", ""issue_word_count"": 161, ""test_files_count"": 5, ""non_test_files_count"": 9, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/upgrade/js-config.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-arbitrary-utilities.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-canonicalize-candidate.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-canonicalize-candidate.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-important.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-important.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-legacy-classes.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-legacy-classes.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-prefix.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate.ts"", ""packages/@tailwindcss-upgrade/src/utils/version.ts""], ""pr_changed_test_files"": [""integrations/upgrade/js-config.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-canonicalize-candidate.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-important.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-legacy-classes.test.ts""], ""base_commit"": ""f3157cd9a6fe4c8cb1b8f9f5055100cd261dc06c"", ""head_commit"": ""75e0bf979b733c2cd3ed4d838ae5185548d8cb10"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/18025"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/18025"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-15T11:17:39.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex c161df30176b..0519e8e828a9 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -17,11 +17,13 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure that running the Standalone build does not leave temporary files behind ([#17981](https://github.com/tailwindlabs/tailwindcss/pull/17981))\n - Fix `-rotate-*` utilities with arbitrary values ([#18014](https://github.com/tailwindlabs/tailwindcss/pull/18014))\n - Upgrade: Change casing of utilities with named values to kebab-case to match updated theme variables ([#18017](https://github.com/tailwindlabs/tailwindcss/pull/18017))\n+- Upgrade: Fix unsafe migrations in Vue files ([#18025](https://github.com/tailwindlabs/tailwindcss/pull/18025))\n - Ignore custom variants using `:merge(\u2026)` selectors in legacy JS plugins ([#18020](https://github.com/tailwindlabs/tailwindcss/pull/18020))\n \n ### Added\n \n - Upgrade: Migrate bare values to named values ([#18000](https://github.com/tailwindlabs/tailwindcss/pull/18000))\n+- Upgrade: Make candidate template migrations faster using caching ([#18025](https://github.com/tailwindlabs/tailwindcss/pull/18025))\n \n ## [4.1.6] - 2025-05-09\n \n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts\nindex dc84d302290c..dd540d5c57e7 100644\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.ts\n@@ -1,3 +1,7 @@\n+import { parseCandidate } from '../../../../tailwindcss/src/candidate'\n+import type { DesignSystem } from '../../../../tailwindcss/src/design-system'\n+import * as version from '../../utils/version'\n+\n const QUOTES = ['\""', \""'\"", '`']\n const LOGICAL_OPERATORS = ['&&', '||', '?', '===', '==', '!=', '!==', '>', '>=', '<', '<=']\n const CONDITIONAL_TEMPLATE_SYNTAX = [\n@@ -5,6 +9,7 @@ const CONDITIONAL_TEMPLATE_SYNTAX = [\n   /v-else-if=['\""]$/,\n   /v-if=['\""]$/,\n   /v-show=['\""]$/,\n+  /(?<!:?class)=['\""]$/,\n \n   // Alpine\n   /x-if=['\""]$/,\n@@ -12,7 +17,68 @@ const CONDITIONAL_TEMPLATE_SYNTAX = [\n ]\n const NEXT_PLACEHOLDER_PROP = /placeholder=\\{?['\""]$/\n \n-export function isSafeMigration(location: { contents: string; start: number; end: number }) {\n+export function isSafeMigration(\n+  rawCandidate: string,\n+  location: { contents: string; start: number; end: number },\n+  designSystem: DesignSystem,\n+): boolean {\n+  let [candidate] = Array.from(parseCandidate(rawCandidate, designSystem))\n+\n+  // If we can't parse the candidate, then it's not a candidate at all. However,\n+  // we could be dealing with legacy classes like `tw__flex` in Tailwind CSS v3\n+  // land, which also wouldn't parse.\n+  //\n+  // So let's only skip if we couldn't parse and we are not in Tailwind CSS v3.\n+  //\n+  if (!candidate && version.isGreaterThan(3)) {\n+    return true\n+  }\n+\n+  // Parsed a candidate succesfully, verify if it's a valid candidate\n+  else if (candidate) {\n+    // When we have variants, we can assume that the candidate is safe to migrate\n+    // because that requires colons.\n+    //\n+    // E.g.: `hover:focus:flex`\n+    if (candidate.variants.length > 0) {\n+      return true\n+    }\n+\n+    // When we have an arbitrary property, the candidate has such a particular\n+    // structure it's very likely to be safe.\n+    //\n+    // E.g.: `[color:red]`\n+    if (candidate.kind === 'arbitrary') {\n+      return true\n+    }\n+\n+    // A static candidate is very likely safe if it contains a dash.\n+    //\n+    // E.g.: `items-center`\n+    if (candidate.kind === 'static' && candidate.root.includes('-')) {\n+      return true\n+    }\n+\n+    // A functional candidate is very likely safe if it contains a value (which\n+    // implies a `-`). Or if the root contains a dash.\n+    //\n+    // E.g.: `bg-red-500`, `bg-position-20`\n+    if (\n+      (candidate.kind === 'functional' && candidate.value !== null) ||\n+      (candidate.kind === 'functional' && candidate.root.includes('-'))\n+    ) {\n+      return true\n+    }\n+\n+    // If the candidate contains a modifier, it's very likely to be safe because\n+    // it implies that it contains a `/`.\n+    //\n+    // E.g.: `text-sm/7`\n+    if (candidate.kind === 'functional' && candidate.modifier) {\n+      return true\n+    }\n+  }\n+\n   let currentLineBeforeCandidate = ''\n   for (let i = location.start - 1; i >= 0; i--) {\n     let char = location.contents.at(i)!\n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-arbitrary-utilities.ts b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-arbitrary-utilities.ts\nindex 1e71dbf930c9..c03100cdd8c8 100644\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-arbitrary-utilities.ts\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-arbitrary-utilities.ts\n@@ -51,27 +51,6 @@ export function migrateArbitraryUtilities(\n       continue\n     }\n \n-    // 1. Canonicalize the value. This might be a bit wasteful because it might\n-    //    have been done by other migrations before, but essentially we want to\n-    //    canonicalize the arbitrary value to its simplest canonical form. We\n-    //    won't be constant folding `calc(\u2026)` expressions (yet?), but we can\n-    //    remove unnecessary whitespace (which the `printCandidate` already\n-    //    handles for us).\n-    //\n-    // E.g.:\n-    //\n-    // ```\n-    // [display:_flex_] => [display:flex]\n-    // [display:_flex]  => [display:flex]\n-    // [display:flex_]  => [display:flex]\n-    // [display:flex]   => [display:flex]\n-    // ```\n-    //\n-    let canonicalizedCandidate = designSystem.printCandidate(readonlyCandidate)\n-    if (canonicalizedCandidate !== rawCandidate) {\n-      return migrateArbitraryUtilities(designSystem, _userConfig, canonicalizedCandidate)\n-    }\n-\n     // The below logic makes use of mutation. Since candidates in the\n     // DesignSystem are cached, we can't mutate them directly.\n     let candidate = structuredClone(readonlyCandidate) as Writable<typeof readonlyCandidate>\n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-canonicalize-candidate.ts b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-canonicalize-candidate.ts\nnew file mode 100644\nindex 000000000000..32d126467911\n--- /dev/null\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-canonicalize-candidate.ts\n@@ -0,0 +1,29 @@\n+import type { Config } from '../../../../tailwindcss/src/compat/plugin-api'\n+import type { DesignSystem } from '../../../../tailwindcss/src/design-system'\n+\n+// Canonicalize the value to its minimal form. This will normalize whitespace,\n+// and print the important modifier `!` in the correct place.\n+//\n+// E.g.:\n+//\n+// ```\n+// [display:_flex_] => [display:flex]\n+// [display:_flex]  => [display:flex]\n+// [display:flex_]  => [display:flex]\n+// [display:flex]   => [display:flex]\n+// ```\n+//\n+export function migrateCanonicalizeCandidate(\n+  designSystem: DesignSystem,\n+  _userConfig: Config | null,\n+  rawCandidate: string,\n+) {\n+  for (let readonlyCandidate of designSystem.parseCandidate(rawCandidate)) {\n+    let canonicalizedCandidate = designSystem.printCandidate(readonlyCandidate)\n+    if (canonicalizedCandidate !== rawCandidate) {\n+      return canonicalizedCandidate\n+    }\n+  }\n+\n+  return rawCandidate\n+}\n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-important.ts b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-important.ts\ndeleted file mode 100644\nindex 27a663f47acf..000000000000\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-important.ts\n+++ /dev/null\n@@ -1,48 +0,0 @@\n-import { parseCandidate } from '../../../../tailwindcss/src/candidate'\n-import type { Config } from '../../../../tailwindcss/src/compat/plugin-api'\n-import type { DesignSystem } from '../../../../tailwindcss/src/design-system'\n-import { isSafeMigration } from './is-safe-migration'\n-\n-// In v3 the important modifier `!` sits in front of the utility itself, not\n-// before any of the variants. In v4, we want it to be at the end of the utility\n-// so that it's always in the same location regardless of whether you used\n-// variants or not.\n-//\n-// So this:\n-//\n-//   !flex md:!block\n-//\n-// Should turn into:\n-//\n-//   flex! md:block!\n-export function migrateImportant(\n-  designSystem: DesignSystem,\n-  _userConfig: Config | null,\n-  rawCandidate: string,\n-  location?: {\n-    contents: string\n-    start: number\n-    end: number\n-  },\n-): string {\n-  nextCandidate: for (let candidate of parseCandidate(rawCandidate, designSystem)) {\n-    if (candidate.important && candidate.raw[candidate.raw.length - 1] !== '!') {\n-      // The important migration is one of the most broad migrations with a high\n-      // potential of matching false positives since `!` is a valid character in\n-      // most programming languages. Since v4 is technically backward compatible\n-      // with v3 in that it can read `!` in the front of the utility too, we err\n-      // on the side of caution and only migrate candidates that we are certain\n-      // are inside of a string.\n-      if (location && !isSafeMigration(location)) {\n-        continue nextCandidate\n-      }\n-\n-      // The printCandidate function will already put the exclamation mark in\n-      // the right place, so we just need to mark this candidate as requiring a\n-      // migration.\n-      return designSystem.printCandidate(candidate)\n-    }\n-  }\n-\n-  return rawCandidate\n-}\n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-legacy-classes.ts b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-legacy-classes.ts\nindex 4fcb18c2fecd..fa425574c882 100644\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-legacy-classes.ts\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-legacy-classes.ts\n@@ -7,7 +7,6 @@ import type { DesignSystem } from '../../../../tailwindcss/src/design-system'\n import { DefaultMap } from '../../../../tailwindcss/src/utils/default-map'\n import * as version from '../../utils/version'\n import { baseCandidate } from './candidates'\n-import { isSafeMigration } from './is-safe-migration'\n \n const __filename = url.fileURLToPath(import.meta.url)\n const __dirname = path.dirname(__filename)\n@@ -72,11 +71,6 @@ export async function migrateLegacyClasses(\n   designSystem: DesignSystem,\n   _userConfig: Config | null,\n   rawCandidate: string,\n-  location?: {\n-    contents: string\n-    start: number\n-    end: number\n-  },\n ): Promise<string> {\n   // These migrations are only safe when migrating from v3 to v4.\n   //\n@@ -111,7 +105,6 @@ export async function migrateLegacyClasses(\n       newCandidate.important = candidate.important\n \n       yield [\n-        candidate,\n         newCandidate,\n         THEME_KEYS.get(baseCandidateString),\n         THEME_KEYS.get(newBaseCandidateString),\n@@ -119,34 +112,7 @@ export async function migrateLegacyClasses(\n     }\n   }\n \n-  for (let [fromCandidate, toCandidate, fromThemeKey, toThemeKey] of migrate(rawCandidate)) {\n-    // Every utility that has a simple representation (e.g.: `blur`, `radius`,\n-    // etc.`) without variants or special characters _could_ be a potential\n-    // problem during the migration.\n-    let isPotentialProblematicClass = (() => {\n-      if (fromCandidate.variants.length > 0) {\n-        return false\n-      }\n-\n-      if (fromCandidate.kind === 'arbitrary') {\n-        return false\n-      }\n-\n-      if (fromCandidate.kind === 'static') {\n-        return !fromCandidate.root.includes('-')\n-      }\n-\n-      if (fromCandidate.kind === 'functional') {\n-        return fromCandidate.value === null || !fromCandidate.root.includes('-')\n-      }\n-\n-      return false\n-    })()\n-\n-    if (location && isPotentialProblematicClass && !isSafeMigration(location)) {\n-      continue\n-    }\n-\n+  for (let [toCandidate, fromThemeKey, toThemeKey] of migrate(rawCandidate)) {\n     if (fromThemeKey && toThemeKey) {\n       // Migrating something that resolves to a value in the theme.\n       let customFrom = designSystem.resolveThemeValue(fromThemeKey, true)\n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-prefix.ts b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-prefix.ts\nindex 3e014817c6d2..77603285029b 100644\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-prefix.ts\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-prefix.ts\n@@ -1,3 +1,4 @@\n+import { decl } from '../../../../tailwindcss/src/ast'\n import { parseCandidate, type Candidate } from '../../../../tailwindcss/src/candidate'\n import type { Config } from '../../../../tailwindcss/src/compat/plugin-api'\n import type { DesignSystem } from '../../../../tailwindcss/src/design-system'\n@@ -16,8 +17,18 @@ export function migratePrefix(\n   if (!version.isMajor(3)) return rawCandidate\n \n   if (!seenDesignSystems.has(designSystem)) {\n-    designSystem.utilities.functional('group', () => null)\n-    designSystem.utilities.functional('peer', () => null)\n+    designSystem.utilities.functional('group', (value) => [\n+      // To ensure that `@apply group` works when computing a signature\n+      decl('--phantom-class', 'group'),\n+      // To ensure `group` and `group/foo` are considered different classes\n+      decl('--phantom-modifier', value.modifier?.value),\n+    ])\n+    designSystem.utilities.functional('peer', (value) => [\n+      // To ensure that `@apply peer` works when computing a signature\n+      decl('--phantom-class', 'peer'),\n+      // To ensure `peer` and `peer/foo` are considered different classes\n+      decl('--phantom-modifier', value.modifier?.value),\n+    ])\n     seenDesignSystems.add(designSystem)\n   }\n \n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/migrate.ts b/packages/@tailwindcss-upgrade/src/codemods/template/migrate.ts\nindex fff859c0ad1f..4c0a26a83320 100644\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/migrate.ts\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/migrate.ts\n@@ -1,10 +1,11 @@\n import fs from 'node:fs/promises'\n import path, { extname } from 'node:path'\n-import { parseCandidate } from '../../../../tailwindcss/src/candidate'\n import type { Config } from '../../../../tailwindcss/src/compat/plugin-api'\n import type { DesignSystem } from '../../../../tailwindcss/src/design-system'\n+import { DefaultMap } from '../../../../tailwindcss/src/utils/default-map'\n import { spliceChangesIntoString, type StringChange } from '../../utils/splice-changes-into-string'\n import { extractRawCandidates } from './candidates'\n+import { isSafeMigration } from './is-safe-migration'\n import { migrateArbitraryUtilities } from './migrate-arbitrary-utilities'\n import { migrateArbitraryValueToBareValue } from './migrate-arbitrary-value-to-bare-value'\n import { migrateArbitraryVariants } from './migrate-arbitrary-variants'\n@@ -12,9 +13,9 @@ import { migrateAutomaticVarInjection } from './migrate-automatic-var-injection'\n import { migrateBareValueUtilities } from './migrate-bare-utilities'\n import { migrateBgGradient } from './migrate-bg-gradient'\n import { migrateCamelcaseInNamedValue } from './migrate-camelcase-in-named-value'\n+import { migrateCanonicalizeCandidate } from './migrate-canonicalize-candidate'\n import { migrateDropUnnecessaryDataTypes } from './migrate-drop-unnecessary-data-types'\n import { migrateEmptyArbitraryValues } from './migrate-handle-empty-arbitrary-values'\n-import { migrateImportant } from './migrate-important'\n import { migrateLegacyArbitraryValues } from './migrate-legacy-arbitrary-values'\n import { migrateLegacyClasses } from './migrate-legacy-classes'\n import { migrateMaxWidthScreen } from './migrate-max-width-screen'\n@@ -24,22 +25,18 @@ import { migratePrefix } from './migrate-prefix'\n import { migrateSimpleLegacyClasses } from './migrate-simple-legacy-classes'\n import { migrateThemeToVar } from './migrate-theme-to-var'\n import { migrateVariantOrder } from './migrate-variant-order'\n+import { computeUtilitySignature } from './signatures'\n \n export type Migration = (\n   designSystem: DesignSystem,\n   userConfig: Config | null,\n   rawCandidate: string,\n-  location?: {\n-    contents: string\n-    start: number\n-    end: number\n-  },\n ) => string | Promise<string>\n \n export const DEFAULT_MIGRATIONS: Migration[] = [\n   migrateEmptyArbitraryValues,\n   migratePrefix,\n-  migrateImportant,\n+  migrateCanonicalizeCandidate,\n   migrateBgGradient,\n   migrateSimpleLegacyClasses,\n   migrateCamelcaseInNamedValue,\n@@ -58,6 +55,29 @@ export const DEFAULT_MIGRATIONS: Migration[] = [\n   migrateOptimizeModifier,\n ]\n \n+let migrateCached = new DefaultMap<\n+  DesignSystem,\n+  DefaultMap<Config | null, DefaultMap<string, Promise<string>>>\n+>((designSystem) => {\n+  return new DefaultMap((userConfig) => {\n+    return new DefaultMap(async (rawCandidate) => {\n+      let original = rawCandidate\n+\n+      for (let migration of DEFAULT_MIGRATIONS) {\n+        rawCandidate = await migration(designSystem, userConfig, rawCandidate)\n+      }\n+\n+      // Verify that the candidate actually makes sense at all. E.g.: `duration`\n+      // is not a valid candidate, but it will parse because `duration-<number>`\n+      // exists.\n+      let signature = computeUtilitySignature.get(designSystem).get(rawCandidate)\n+      if (typeof signature !== 'string') return original\n+\n+      return rawCandidate\n+    })\n+  })\n+})\n+\n export async function migrateCandidate(\n   designSystem: DesignSystem,\n   userConfig: Config | null,\n@@ -69,23 +89,12 @@ export async function migrateCandidate(\n     end: number\n   },\n ): Promise<string> {\n-  let original = rawCandidate\n-  for (let migration of DEFAULT_MIGRATIONS) {\n-    rawCandidate = await migration(designSystem, userConfig, rawCandidate, location)\n-  }\n-\n-  // If nothing changed, let's parse it again and re-print it. This will migrate\n-  // pretty print candidates to the new format. If it did change, we already had\n-  // to re-print it.\n-  //\n-  // E.g.: `bg-red-500/[var(--my-opacity)]` -> `bg-red-500/(--my-opacity)`\n-  if (rawCandidate === original) {\n-    for (let candidate of parseCandidate(rawCandidate, designSystem)) {\n-      return designSystem.printCandidate(candidate)\n-    }\n+  // Skip this migration if we think that the migration is unsafe\n+  if (location && !isSafeMigration(rawCandidate, location, designSystem)) {\n+    return rawCandidate\n   }\n \n-  return rawCandidate\n+  return migrateCached.get(designSystem).get(userConfig).get(rawCandidate)\n }\n \n export default async function migrateContents(\n\ndiff --git a/packages/@tailwindcss-upgrade/src/utils/version.ts b/packages/@tailwindcss-upgrade/src/utils/version.ts\nindex e36ba06ba998..6794b1a81aeb 100644\n--- a/packages/@tailwindcss-upgrade/src/utils/version.ts\n+++ b/packages/@tailwindcss-upgrade/src/utils/version.ts\n@@ -11,6 +11,15 @@ export function isMajor(version: number) {\n   return semver.satisfies(installedTailwindVersion(), `>=${version}.0.0 <${version + 1}.0.0`)\n }\n \n+/**\n+ * Must be of greater than the current major version including minor and patch.\n+ *\n+ * E.g.: `isGreaterThan(3)`\n+ */\n+export function isGreaterThan(version: number) {\n+  return semver.gte(installedTailwindVersion(), `${version + 1}.0.0`)\n+}\n+\n let cache = new DefaultMap((base) => {\n   let tailwindVersion = getPackageVersionSync('tailwindcss', base)\n   if (!tailwindVersion) throw new Error('Tailwind CSS is not installed')\n"", ""test_patch"": ""diff --git a/integrations/upgrade/js-config.test.ts b/integrations/upgrade/js-config.test.ts\nindex 93d239af0280..7b539c4e4050 100644\n--- a/integrations/upgrade/js-config.test.ts\n+++ b/integrations/upgrade/js-config.test.ts\n@@ -151,7 +151,7 @@ test(\n         <div\n           class=\""[letter-spacing:theme(letterSpacing.superWide)] [line-height:theme(lineHeight.superLoose)]\""\n         ></div>\n-        <div class=\""text-red-superRed/superOpaque leading-superLoose\""></div>\n+        <div class=\""text-superRed/superOpaque leading-superLoose\""></div>\n       `,\n       'node_modules/my-external-lib/src/template.html': html`\n         <div class=\""text-red-500\"">\n@@ -169,7 +169,7 @@ test(\n       <div\n         class=\""[letter-spacing:var(--tracking-super-wide)] [line-height:var(--leading-super-loose)]\""\n       ></div>\n-      <div class=\""text-red-super-red/super-opaque leading-super-loose\""></div>\n+      <div class=\""text-super-red/super-opaque leading-super-loose\""></div>\n \n       --- src/input.css ---\n       @import 'tailwindcss';\n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts\nnew file mode 100644\nindex 000000000000..455b686604e8\n--- /dev/null\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/is-safe-migration.test.ts\n@@ -0,0 +1,61 @@\n+import { __unstable__loadDesignSystem } from '@tailwindcss/node'\n+import { expect, test, vi } from 'vitest'\n+import * as versions from '../../utils/version'\n+import { migrateCandidate } from './migrate'\n+vi.spyOn(versions, 'isMajor').mockReturnValue(true)\n+\n+test('does not replace classes in invalid positions', async () => {\n+  let designSystem = await __unstable__loadDesignSystem('@import \""tailwindcss\"";', {\n+    base: __dirname,\n+  })\n+\n+  async function shouldNotReplace(example: string, candidate = '!border') {\n+    expect(\n+      await migrateCandidate(designSystem, {}, candidate, {\n+        contents: example,\n+        start: example.indexOf(candidate),\n+        end: example.indexOf(candidate) + candidate.length,\n+      }),\n+    ).toEqual(candidate)\n+  }\n+\n+  await shouldNotReplace(`let notBorder = !border    \\n`)\n+  await shouldNotReplace(`{ \""foo\"": !border.something + \""\""}\\n`)\n+  await shouldNotReplace(`<div v-if=\""something && !border\""></div>\\n`)\n+  await shouldNotReplace(`<div v-else-if=\""something && !border\""></div>\\n`)\n+  await shouldNotReplace(`<div v-show=\""something && !border\""></div>\\n`)\n+  await shouldNotReplace(`<div v-if=\""!border || !border\""></div>\\n`)\n+  await shouldNotReplace(`<div v-else-if=\""!border || !border\""></div>\\n`)\n+  await shouldNotReplace(`<div v-show=\""!border || !border\""></div>\\n`)\n+  await shouldNotReplace(`<div v-if=\""!border\""></div>\\n`)\n+  await shouldNotReplace(`<div v-else-if=\""!border\""></div>\\n`)\n+  await shouldNotReplace(`<div v-show=\""!border\""></div>\\n`)\n+  await shouldNotReplace(`<div x-if=\""!border\""></div>\\n`)\n+\n+  await shouldNotReplace(`let notShadow = shadow    \\n`, 'shadow')\n+  await shouldNotReplace(`{ \""foo\"": shadow.something + \""\""}\\n`, 'shadow')\n+  await shouldNotReplace(`<div v-if=\""something && shadow\""></div>\\n`, 'shadow')\n+  await shouldNotReplace(`<div v-else-if=\""something && shadow\""></div>\\n`, 'shadow')\n+  await shouldNotReplace(`<div v-show=\""something && shadow\""></div>\\n`, 'shadow')\n+  await shouldNotReplace(`<div v-if=\""shadow || shadow\""></div>\\n`, 'shadow')\n+  await shouldNotReplace(`<div v-else-if=\""shadow || shadow\""></div>\\n`, 'shadow')\n+  await shouldNotReplace(`<div v-show=\""shadow || shadow\""></div>\\n`, 'shadow')\n+  await shouldNotReplace(`<div v-if=\""shadow\""></div>\\n`, 'shadow')\n+  await shouldNotReplace(`<div v-else-if=\""shadow\""></div>\\n`, 'shadow')\n+  await shouldNotReplace(`<div v-show=\""shadow\""></div>\\n`, 'shadow')\n+  await shouldNotReplace(`<div x-if=\""shadow\""></div>\\n`, 'shadow')\n+  await shouldNotReplace(\n+    `<div style={{filter: 'drop-shadow(30px 10px 4px #4444dd)'}}/>\\n`,\n+    'shadow',\n+  )\n+\n+  // Next.js Image placeholder cases\n+  await shouldNotReplace(`<Image placeholder=\""blur\"" src=\""/image.jpg\"" />`, 'blur')\n+  await shouldNotReplace(`<Image placeholder={'blur'} src=\""/image.jpg\"" />`, 'blur')\n+  await shouldNotReplace(`<Image placeholder={blur} src=\""/image.jpg\"" />`, 'blur')\n+\n+  // https://github.com/tailwindlabs/tailwindcss/issues/17974\n+  await shouldNotReplace('<div v-if=\""!duration\"">', '!duration')\n+  await shouldNotReplace('<div :active=\""!duration\"">', '!duration')\n+  await shouldNotReplace('<div :active=\""!visible\"">', '!visible')\n+})\n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-canonicalize-candidate.test.ts b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-canonicalize-candidate.test.ts\nnew file mode 100644\nindex 000000000000..57fe80c22858\n--- /dev/null\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-canonicalize-candidate.test.ts\n@@ -0,0 +1,27 @@\n+import { __unstable__loadDesignSystem } from '@tailwindcss/node'\n+import { expect, test, vi } from 'vitest'\n+import * as versions from '../../utils/version'\n+import { migrateCanonicalizeCandidate } from './migrate-canonicalize-candidate'\n+vi.spyOn(versions, 'isMajor').mockReturnValue(true)\n+\n+test.each([\n+  // Normalize whitespace in arbitrary properties\n+  ['[display:flex]', '[display:flex]'],\n+  ['[display:_flex]', '[display:flex]'],\n+  ['[display:flex_]', '[display:flex]'],\n+  ['[display:_flex_]', '[display:flex]'],\n+\n+  // Normalize whitespace in `calc` expressions\n+  ['w-[calc(100%-2rem)]', 'w-[calc(100%-2rem)]'],\n+  ['w-[calc(100%_-_2rem)]', 'w-[calc(100%-2rem)]'],\n+\n+  // Normalize the important modifier\n+  ['!flex', 'flex!'],\n+  ['flex!', 'flex!'],\n+])('%s => %s', async (candidate, result) => {\n+  let designSystem = await __unstable__loadDesignSystem('@import \""tailwindcss\"";', {\n+    base: __dirname,\n+  })\n+\n+  expect(migrateCanonicalizeCandidate(designSystem, {}, candidate)).toEqual(result)\n+})\n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-important.test.ts b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-important.test.ts\ndeleted file mode 100644\nindex bc84538aaa35..000000000000\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-important.test.ts\n+++ /dev/null\n@@ -1,68 +0,0 @@\n-import { __unstable__loadDesignSystem } from '@tailwindcss/node'\n-import { expect, test } from 'vitest'\n-import { migrateImportant } from './migrate-important'\n-\n-test.each([\n-  ['!flex', 'flex!'],\n-  ['min-[calc(1000px+12em)]:!flex', 'min-[calc(1000px+12em)]:flex!'],\n-  ['md:!block', 'md:block!'],\n-\n-  // Does not change non-important candidates\n-  ['bg-blue-500', 'bg-blue-500'],\n-  ['min-[calc(1000px+12em)]:flex', 'min-[calc(1000px+12em)]:flex'],\n-])('%s => %s', async (candidate, result) => {\n-  let designSystem = await __unstable__loadDesignSystem('@import \""tailwindcss\"";', {\n-    base: __dirname,\n-  })\n-\n-  expect(\n-    migrateImportant(designSystem, {}, candidate, {\n-      contents: `\""${candidate}\""`,\n-      start: 1,\n-      end: candidate.length + 1,\n-    }),\n-  ).toEqual(result)\n-})\n-\n-test('does not match false positives', async () => {\n-  let designSystem = await __unstable__loadDesignSystem('@import \""tailwindcss\"";', {\n-    base: __dirname,\n-  })\n-\n-  expect(\n-    migrateImportant(designSystem, {}, '!border', {\n-      contents: `let notBorder = !border\\n`,\n-      start: 16,\n-      end: 16 + '!border'.length,\n-    }),\n-  ).toEqual('!border')\n-})\n-\n-test('does not replace classes in invalid positions', async () => {\n-  let designSystem = await __unstable__loadDesignSystem('@import \""tailwindcss\"";', {\n-    base: __dirname,\n-  })\n-\n-  function shouldNotReplace(example: string, candidate = '!border') {\n-    expect(\n-      migrateImportant(designSystem, {}, candidate, {\n-        contents: example,\n-        start: example.indexOf(candidate),\n-        end: example.indexOf(candidate) + candidate.length,\n-      }),\n-    ).toEqual(candidate)\n-  }\n-\n-  shouldNotReplace(`let notBorder = !border    \\n`)\n-  shouldNotReplace(`{ \""foo\"": !border.something + \""\""}\\n`)\n-  shouldNotReplace(`<div v-if=\""something && !border\""></div>\\n`)\n-  shouldNotReplace(`<div v-else-if=\""something && !border\""></div>\\n`)\n-  shouldNotReplace(`<div v-show=\""something && !border\""></div>\\n`)\n-  shouldNotReplace(`<div v-if=\""!border || !border\""></div>\\n`)\n-  shouldNotReplace(`<div v-else-if=\""!border || !border\""></div>\\n`)\n-  shouldNotReplace(`<div v-show=\""!border || !border\""></div>\\n`)\n-  shouldNotReplace(`<div v-if=\""!border\""></div>\\n`)\n-  shouldNotReplace(`<div v-else-if=\""!border\""></div>\\n`)\n-  shouldNotReplace(`<div v-show=\""!border\""></div>\\n`)\n-  shouldNotReplace(`<div x-if=\""!border\""></div>\\n`)\n-})\n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-legacy-classes.test.ts b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-legacy-classes.test.ts\nindex a48834180a85..5b204386f844 100644\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-legacy-classes.test.ts\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-legacy-classes.test.ts\n@@ -43,38 +43,3 @@ test.each([\n \n   expect(await migrateLegacyClasses(designSystem, {}, candidate)).toEqual(result)\n })\n-\n-test('does not replace classes in invalid positions', async () => {\n-  let designSystem = await __unstable__loadDesignSystem('@import \""tailwindcss\"";', {\n-    base: __dirname,\n-  })\n-\n-  async function shouldNotReplace(example: string, candidate = 'shadow') {\n-    expect(\n-      await migrateLegacyClasses(designSystem, {}, candidate, {\n-        contents: example,\n-        start: example.indexOf(candidate),\n-        end: example.indexOf(candidate) + candidate.length,\n-      }),\n-    ).toEqual(candidate)\n-  }\n-\n-  await shouldNotReplace(`let notShadow = shadow    \\n`)\n-  await shouldNotReplace(`{ \""foo\"": shadow.something + \""\""}\\n`)\n-  await shouldNotReplace(`<div v-if=\""something && shadow\""></div>\\n`)\n-  await shouldNotReplace(`<div v-else-if=\""something && shadow\""></div>\\n`)\n-  await shouldNotReplace(`<div v-show=\""something && shadow\""></div>\\n`)\n-  await shouldNotReplace(`<div v-if=\""shadow || shadow\""></div>\\n`)\n-  await shouldNotReplace(`<div v-else-if=\""shadow || shadow\""></div>\\n`)\n-  await shouldNotReplace(`<div v-show=\""shadow || shadow\""></div>\\n`)\n-  await shouldNotReplace(`<div v-if=\""shadow\""></div>\\n`)\n-  await shouldNotReplace(`<div v-else-if=\""shadow\""></div>\\n`)\n-  await shouldNotReplace(`<div v-show=\""shadow\""></div>\\n`)\n-  await shouldNotReplace(`<div x-if=\""shadow\""></div>\\n`)\n-  await shouldNotReplace(`<div style={{filter: 'drop-shadow(30px 10px 4px #4444dd)'}}/>\\n`)\n-\n-  // Next.js Image placeholder cases\n-  await shouldNotReplace(`<Image placeholder=\""blur\"" src=\""/image.jpg\"" />`, 'blur')\n-  await shouldNotReplace(`<Image placeholder={'blur'} src=\""/image.jpg\"" />`, 'blur')\n-  await shouldNotReplace(`<Image placeholder={blur} src=\""/image.jpg\"" />`, 'blur')\n-})\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-18020"", ""pr_id"": 18020, ""issue_id"": 15617, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[V4] :merge selector broken\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-beta.9\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNext.js 15.1.4\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.13.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/mhornbacher/tailwind-repro\r\n\r\n**Describe your issue**\r\n\r\nAt a high level:\r\n1. The following issue is triggered when adding any `peer-` class with hot reloading\r\n2. All `peer-` classes are always active after a build\r\n\r\n```\r\nParsing css source code failed\r\n  530 |   }\r\n  531 |   .peer-disabled\\:text-purple-500 {\r\n> 532 |     :merge(.peer):where([data-rac])[data-disabled] ~ & {\r\n      |             ^\r\n  533 |       color: var(--color-purple-500);\r\n  534 |     }\r\n  535 |     :merge(.peer):where(:not([data-rac])):disabled ~ & {\r\n\r\n'merge' is not recognized as a valid pseudo-class. Did you mean '::merge' (pseudo-element) or is this a typo? at [project]/src/app/globals.css:531:12\r\n```\r\n\r\nThe cause for this, as far as I can tell is as follows:\r\n\r\nIn the [documentation for plugins](https://tailwindcss.com/docs/plugins#parent-and-sibling-states) there is a special `:merge` selector designed for plugins (like react-aria-components in this example) to extend the `focus`, `disabled`... selectors, in this case to enable them to be triggered in more complex accessibility scenarios. (see the [react-aria implementation](https://github.com/adobe/react-spectrum/blob/main/packages/tailwindcss-react-aria-components/src/index.js#L121-L130) for example.\r\n\r\nHowever in Tailwind 4.0 it seems that this selector is not handled by the new lighting CSS compiler. I know its not that common, but many projects rely on this to simplify accessibility development for their team. Which is something I know that the tailwind team cares about as well :)"", ""issue_word_count"": 335, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/compat/plugin-api.test.ts"", ""packages/tailwindcss/src/compat/plugin-api.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/compat/plugin-api.test.ts""], ""base_commit"": ""e57a2f5a3af8f1e3ebd5bac93b70d986fe43a5b3"", ""head_commit"": ""afb56d6b8e00c7860f15d64758d2425f8a940458"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/18020"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/18020"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-15T11:00:00.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex a6aada039ea0..c161df30176b 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -17,6 +17,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure that running the Standalone build does not leave temporary files behind ([#17981](https://github.com/tailwindlabs/tailwindcss/pull/17981))\n - Fix `-rotate-*` utilities with arbitrary values ([#18014](https://github.com/tailwindlabs/tailwindcss/pull/18014))\n - Upgrade: Change casing of utilities with named values to kebab-case to match updated theme variables ([#18017](https://github.com/tailwindlabs/tailwindcss/pull/18017))\n+- Ignore custom variants using `:merge(\u2026)` selectors in legacy JS plugins ([#18020](https://github.com/tailwindlabs/tailwindcss/pull/18020))\n \n ### Added\n \n\ndiff --git a/packages/tailwindcss/src/compat/plugin-api.ts b/packages/tailwindcss/src/compat/plugin-api.ts\nindex dc27993cbb86..938596e8ca4d 100644\n--- a/packages/tailwindcss/src/compat/plugin-api.ts\n+++ b/packages/tailwindcss/src/compat/plugin-api.ts\n@@ -115,6 +115,22 @@ export function buildPluginApi({\n         )\n       }\n \n+      // Ignore variants emitting v3 `:merge(\u2026)` rules. In v4, the `group-*` and `peer-*` variants\n+      // compound automatically.\n+      if (typeof variant === 'string') {\n+        if (variant.includes(':merge(')) return\n+      } else if (Array.isArray(variant)) {\n+        if (variant.some((v) => v.includes(':merge('))) return\n+      } else if (typeof variant === 'object') {\n+        function keyIncludes(object: Record<string, any>, search: string): boolean {\n+          return Object.entries(object).some(\n+            ([key, value]) =>\n+              key.includes(search) || (typeof value === 'object' && keyIncludes(value, search)),\n+          )\n+        }\n+        if (keyIncludes(variant, ':merge(')) return\n+      }\n+\n       // Single selector or multiple parallel selectors\n       if (typeof variant === 'string' || Array.isArray(variant)) {\n         designSystem.variants.static(\n@@ -143,6 +159,17 @@ export function buildPluginApi({\n         return parseVariantValue(resolved, nodes)\n       }\n \n+      try {\n+        // Sample variant value and ignore variants emitting v3 `:merge` rules. In\n+        // v4, the `group-*` and `peer-*` variants compound automatically.\n+        let sample = fn('a', { modifier: null })\n+        if (typeof sample === 'string' && sample.includes(':merge(')) {\n+          return\n+        } else if (Array.isArray(sample) && sample.some((r) => r.includes(':merge('))) {\n+          return\n+        }\n+      } catch {}\n+\n       let defaultOptionKeys = Object.keys(options?.values ?? {})\n       designSystem.variants.group(\n         () => {\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/compat/plugin-api.test.ts b/packages/tailwindcss/src/compat/plugin-api.test.ts\nindex 465974679646..ea1ab6f0d4a4 100644\n--- a/packages/tailwindcss/src/compat/plugin-api.test.ts\n+++ b/packages/tailwindcss/src/compat/plugin-api.test.ts\n@@ -1830,6 +1830,44 @@ describe('addVariant', () => {\n       }\""\n     `)\n   })\n+\n+  test('ignores variants that use :merge(\u2026) and ensures `peer-*` and `group-*` rules work out of the box', async () => {\n+    let { build } = await compile(\n+      css`\n+        @plugin \""my-plugin\"";\n+        @layer utilities {\n+          @tailwind utilities;\n+        }\n+      `,\n+      {\n+        loadModule: async (id, base) => {\n+          return {\n+            path: '',\n+            base,\n+            module: ({ addVariant }: PluginAPI) => {\n+              addVariant('optional', '&:optional')\n+              addVariant('group-optional', { ':merge(.group):optional &': '@slot' })\n+              addVariant('peer-optional', { '&': { ':merge(.peer):optional ~ &': '@slot' } })\n+            },\n+          }\n+        },\n+      },\n+    )\n+    let compiled = build([\n+      'optional:flex',\n+      'group-optional:flex',\n+      'peer-optional:flex',\n+      'group-optional/foo:flex',\n+    ])\n+\n+    expect(optimizeCss(compiled).trim()).toMatchInlineSnapshot(`\n+      \""@layer utilities {\n+        .group-optional\\\\:flex:is(:where(.group):optional *), .group-optional\\\\/foo\\\\:flex:is(:where(.group\\\\/foo):optional *), .peer-optional\\\\:flex:is(:where(.peer):optional ~ *), .optional\\\\:flex:optional {\n+          display: flex;\n+        }\n+      }\""\n+    `)\n+  })\n })\n \n describe('matchVariant', () => {\n@@ -2702,6 +2740,44 @@ describe('matchVariant', () => {\n       }\""\n     `)\n   })\n+\n+  test('ignores variants that use :merge(\u2026)', async () => {\n+    let { build } = await compile(\n+      css`\n+        @plugin \""my-plugin\"";\n+        @layer utilities {\n+          @tailwind utilities;\n+        }\n+      `,\n+      {\n+        loadModule: async (id, base) => {\n+          return {\n+            path: '',\n+            base,\n+            module: ({ matchVariant }: PluginAPI) => {\n+              matchVariant('optional', (flavor) => `&:optional:has(${flavor}) &`)\n+              matchVariant('group-optional', (flavor) => `:merge(.group):optional:has(${flavor}) &`)\n+              matchVariant('peer-optional', (flavor) => `:merge(.peer):optional:has(${flavor}) ~ &`)\n+            },\n+          }\n+        },\n+      },\n+    )\n+    let compiled = build([\n+      'optional-[test]:flex',\n+      'group-optional-[test]:flex',\n+      'peer-optional-[test]:flex',\n+      'group-optional-[test]/foo:flex',\n+    ])\n+\n+    expect(optimizeCss(compiled).trim()).toMatchInlineSnapshot(`\n+      \""@layer utilities {\n+        .group-optional-\\\\[test\\\\]\\\\:flex:is(:where(.group):optional:has(test) :where(.group) *), .group-optional-\\\\[test\\\\]\\\\/foo\\\\:flex:is(:where(.group\\\\/foo):optional:has(test) :where(.group\\\\/foo) *), .peer-optional-\\\\[test\\\\]\\\\:flex:is(:where(.peer):optional:has(test) :where(.peer) ~ *), .optional-\\\\[test\\\\]\\\\:flex:optional:has(test) .optional-\\\\[test\\\\]\\\\:flex {\n+          display: flex;\n+        }\n+      }\""\n+    `)\n+  })\n })\n \n describe('addUtilities()', () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-18017"", ""pr_id"": 18017, ""issue_id"": 16156, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Tailwind v4 upgrade script renames camelCase'd colors/fonts to kebab-case, but does not update usages.\n**What version of Tailwind CSS are you using?**\n\nv3.4.17\n\n**What version of Node.js are you using?**\n\nv23.5.0\n\n**What operating system are you using?**\n\nmacOS 15.2\n\n**Describe your issue**\n\nWhen using `npx @tailwindcss/upgrade@next`, if you have custom color/font overrides such as this:\n\n```javascript\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        flxBlue: '#19acff',\n      }\n    }\n  }\n}\n```\n\nThe upgrade script will rename `flxBlue` to `flx-blue`, resulting in:\n\n```css\n@import 'tailwindcss';\n\n@plugin '@tailwindcss/container-queries';\n@plugin 'tailwindcss-animate';\n\n@theme {\n  --color-flx-blue: #19acff;\n}\n```\n\nWhich seems OK, but existing usages are not updated (just an example diff showing the `text-flxBlue` not being modified):\n\n```diff\n@@ -9,7 +9,7 @@ interface ClaimPlaceCTAProps {\n\n export default function ClaimPlaceCTA({ place }: ClaimPlaceCTAProps) {\n   return (\n-    <div className=\""relative mt-8 w-full rounded-xl border border-zinc-200 bg-gradient-to-br from-white/95 to-zinc-50/95 p-8 text-center backdrop-blur-sm dark:border-zinc-800 dark:from-zinc-900/95 dark:to-zinc-9\n50/95\"">\n+    <div className=\""relative mt-8 w-full rounded-xl border border-zinc-200 bg-linear-to-br from-white/95 to-zinc-50/95 p-8 text-center backdrop-blur-xs dark:border-zinc-800 dark:from-zinc-900/95 dark:to-zinc-950\n/95\"">\n       <h3 className=\""font-renogare text-xl text-townWireBlue dark:text-flxBlue\"">\n         Own this business?\n       </h3>\n\n```\n\n**Reproduction URL**\n\nVery simple demo repo here w/ Next.js on Tailwind v3: https://github.com/nicksergeant/tailwind-v4-upgrade-colors\n\nThe original color definition and usage:\n\n- Definition: https://github.com/nicksergeant/tailwind-v4-upgrade-colors/blob/03e9fa38ac880227f9e507a7722f1e21f5dd51ae/tailwind.config.js#L11\n- Usage: https://github.com/nicksergeant/tailwind-v4-upgrade-colors/blob/03e9fa38ac880227f9e507a7722f1e21f5dd51ae/app/page.tsx#L12\n\nAnd here is a branch showing the Tailwind v4 upgrade script (no other changes other than the automatic upgrade): https://github.com/nicksergeant/tailwind-v4-upgrade-colors/compare/ns/upgrade-to-v4\n\n- Definition in v4: https://github.com/nicksergeant/tailwind-v4-upgrade-colors/blob/602c95ee9d52689e357a6eb7b1662b66e0f397b8/app/globals.css#L4\n- Usage in v4 not updated to the new name: https://github.com/nicksergeant/tailwind-v4-upgrade-colors/blob/602c95ee9d52689e357a6eb7b1662b66e0f397b8/app/page.tsx#L12"", ""issue_word_count"": 371, ""test_files_count"": 2, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/upgrade/js-config.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-camelcase-in-named-value.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-camelcase-in-named-value.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate.ts""], ""pr_changed_test_files"": [""integrations/upgrade/js-config.test.ts"", ""packages/@tailwindcss-upgrade/src/codemods/template/migrate-camelcase-in-named-value.test.ts""], ""base_commit"": ""4db711d1e4a2348410e95a62312fd1e2e2df3f64"", ""head_commit"": ""b3f34ed8a7f125a6bec8cd641ba37dd4ba012966"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/18017"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/18017"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-14T12:51:51.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex cdb0386c75d7..a6aada039ea0 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -16,6 +16,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - `lightningcss` now statically links Visual Studio redistributables ([#17979](https://github.com/tailwindlabs/tailwindcss/pull/17979))\n - Ensure that running the Standalone build does not leave temporary files behind ([#17981](https://github.com/tailwindlabs/tailwindcss/pull/17981))\n - Fix `-rotate-*` utilities with arbitrary values ([#18014](https://github.com/tailwindlabs/tailwindcss/pull/18014))\n+- Upgrade: Change casing of utilities with named values to kebab-case to match updated theme variables ([#18017](https://github.com/tailwindlabs/tailwindcss/pull/18017))\n \n ### Added\n \n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-camelcase-in-named-value.ts b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-camelcase-in-named-value.ts\nnew file mode 100644\nindex 000000000000..2214a8366cef\n--- /dev/null\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-camelcase-in-named-value.ts\n@@ -0,0 +1,53 @@\n+import type { Config } from '../../../../tailwindcss/src/compat/plugin-api'\n+import type { DesignSystem } from '../../../../tailwindcss/src/design-system'\n+import * as version from '../../utils/version'\n+\n+// Converts named values to use kebab-case. This is necessary because the\n+// upgrade tool also renames the theme values to kebab-case, so `text-superRed`\n+// will have its theme value renamed to `--color-super-red` and thus the utility\n+// will be renamed to `text-super-red`.\n+export function migrateCamelcaseInNamedValue(\n+  designSystem: DesignSystem,\n+  _userConfig: Config | null,\n+  rawCandidate: string,\n+): string {\n+  if (!version.isMajor(3)) return rawCandidate\n+\n+  for (let candidate of designSystem.parseCandidate(rawCandidate)) {\n+    if (candidate.kind !== 'functional') continue\n+    let clone = structuredClone(candidate)\n+    let didChange = false\n+\n+    if (\n+      candidate.value &&\n+      clone.value &&\n+      candidate.value.kind === 'named' &&\n+      clone.value.kind === 'named' &&\n+      candidate.value.value.match(/[A-Z]/)\n+    ) {\n+      clone.value.value = camelToKebab(candidate.value.value)\n+      didChange = true\n+    }\n+\n+    if (\n+      candidate.modifier &&\n+      clone.modifier &&\n+      candidate.modifier.kind === 'named' &&\n+      clone.modifier.kind === 'named' &&\n+      candidate.modifier.value.match(/[A-Z]/)\n+    ) {\n+      clone.modifier.value = camelToKebab(candidate.modifier.value)\n+      didChange = true\n+    }\n+\n+    if (didChange) {\n+      return designSystem.printCandidate(clone)\n+    }\n+  }\n+\n+  return rawCandidate\n+}\n+\n+function camelToKebab(str: string): string {\n+  return str.replace(/([A-Z])/g, '-$1').toLowerCase()\n+}\n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/migrate.ts b/packages/@tailwindcss-upgrade/src/codemods/template/migrate.ts\nindex 594342a3f58f..fff859c0ad1f 100644\n--- a/packages/@tailwindcss-upgrade/src/codemods/template/migrate.ts\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/migrate.ts\n@@ -11,6 +11,7 @@ import { migrateArbitraryVariants } from './migrate-arbitrary-variants'\n import { migrateAutomaticVarInjection } from './migrate-automatic-var-injection'\n import { migrateBareValueUtilities } from './migrate-bare-utilities'\n import { migrateBgGradient } from './migrate-bg-gradient'\n+import { migrateCamelcaseInNamedValue } from './migrate-camelcase-in-named-value'\n import { migrateDropUnnecessaryDataTypes } from './migrate-drop-unnecessary-data-types'\n import { migrateEmptyArbitraryValues } from './migrate-handle-empty-arbitrary-values'\n import { migrateImportant } from './migrate-important'\n@@ -41,6 +42,7 @@ export const DEFAULT_MIGRATIONS: Migration[] = [\n   migrateImportant,\n   migrateBgGradient,\n   migrateSimpleLegacyClasses,\n+  migrateCamelcaseInNamedValue,\n   migrateLegacyClasses,\n   migrateMaxWidthScreen,\n   migrateThemeToVar,\n"", ""test_patch"": ""diff --git a/integrations/upgrade/js-config.test.ts b/integrations/upgrade/js-config.test.ts\nindex d2240fbf03b6..93d239af0280 100644\n--- a/integrations/upgrade/js-config.test.ts\n+++ b/integrations/upgrade/js-config.test.ts\n@@ -30,9 +30,13 @@ test(\n                 400: '#f87171',\n                 500: 'red',\n               },\n+              superRed: '#ff0000',\n               steel: 'rgb(70 130 180 / <alpha-value>)',\n               smoke: 'rgba(245, 245, 245, var(--smoke-alpha, <alpha-value>))',\n             },\n+            opacity: {\n+              superOpaque: '0.95',\n+            },\n             fontSize: {\n               xs: ['0.75rem', { lineHeight: '1rem' }],\n               sm: ['0.875rem', { lineHeight: '1.5rem' }],\n@@ -144,9 +148,10 @@ test(\n         }\n       `,\n       'src/index.html': html`\n-       <div\n+        <div\n           class=\""[letter-spacing:theme(letterSpacing.superWide)] [line-height:theme(lineHeight.superLoose)]\""\n         ></div>\n+        <div class=\""text-red-superRed/superOpaque leading-superLoose\""></div>\n       `,\n       'node_modules/my-external-lib/src/template.html': html`\n         <div class=\""text-red-500\"">\n@@ -162,8 +167,9 @@ test(\n       \""\n       --- src/index.html ---\n       <div\n-         class=\""[letter-spacing:var(--tracking-super-wide)] [line-height:var(--leading-super-loose)]\""\n-       ></div>\n+        class=\""[letter-spacing:var(--tracking-super-wide)] [line-height:var(--leading-super-loose)]\""\n+      ></div>\n+      <div class=\""text-red-super-red/super-opaque leading-super-loose\""></div>\n \n       --- src/input.css ---\n       @import 'tailwindcss';\n@@ -181,9 +187,13 @@ test(\n         --color-red-500: #ef4444;\n         --color-red-600: #dc2626;\n \n+        --color-super-red: #ff0000;\n         --color-steel: rgb(70 130 180);\n         --color-smoke: rgba(245, 245, 245, var(--smoke-alpha, 1));\n \n+        --opacity-*: initial;\n+        --opacity-super-opaque: 95%;\n+\n         --text-*: initial;\n         --text-xs: 0.75rem;\n         --text-xs--line-height: 1rem;\n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/template/migrate-camelcase-in-named-value.test.ts b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-camelcase-in-named-value.test.ts\nnew file mode 100644\nindex 000000000000..ed5be23c0cc4\n--- /dev/null\n+++ b/packages/@tailwindcss-upgrade/src/codemods/template/migrate-camelcase-in-named-value.test.ts\n@@ -0,0 +1,24 @@\n+import { __unstable__loadDesignSystem } from '@tailwindcss/node'\n+import { expect, test, vi } from 'vitest'\n+import * as versions from '../../utils/version'\n+import { migrateCamelcaseInNamedValue } from './migrate-camelcase-in-named-value'\n+vi.spyOn(versions, 'isMajor').mockReturnValue(true)\n+\n+test.each([\n+  ['text-superRed', 'text-super-red'],\n+  ['text-red/superOpaque', 'text-red/super-opaque'],\n+  ['text-superRed/superOpaque', 'text-super-red/super-opaque'],\n+\n+  // Should not migrate named values in modifiers\n+  ['group-hover/superGroup:underline', 'group-hover/superGroup:underline'],\n+\n+  ['hover:text-superRed', 'hover:text-super-red'],\n+  ['hover:text-red/superOpaque', 'hover:text-red/super-opaque'],\n+  ['hover:text-superRed/superOpaque', 'hover:text-super-red/super-opaque'],\n+])('%s => %s', async (candidate, result) => {\n+  let designSystem = await __unstable__loadDesignSystem('@import \""tailwindcss\"";', {\n+    base: __dirname,\n+  })\n+\n+  expect(migrateCamelcaseInNamedValue(designSystem, {}, candidate)).toEqual(result)\n+})\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-18014"", ""pr_id"": 18014, ""issue_id"": 18013, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""negative rotate with variables (`-rotate-(--foo)`) not working correctly\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.1.6\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 6.3.5\n\n**What version of Node.js are you using?**\n\nFor example: v20.10.0\n\n**What browser are you using?**\n\nN.A.\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/XIDXFoclli\n\n**Describe your issue**\n\nthe negative rotate does not work with the new variable syntax (`-rotate-(--myvar))`). It generated the same code as the positive variant `rotate-(--myvar))`.\n\n**Example:**\n\n- \u2705 `rotate-20` generates `rotate: 20deg;`\n- \u2705 `-rotate-20` generates `rotate: -20deg;`\n- \u2705 `rotate-(--myvar)` generates `rotate: var(--myvar);`\n- \u274c `-rotate-(--myvar)` generates `rotate: var(--myvar);`, but should generate `rotate: calc(var(--myvar) * -1);`\n\nIs that a bug or intentional behaviour?\n\n**Side note:**\n\n`-rotate-z-(--myvar)` works as expected. I will use it as a workaround for now.\nHowever it does not use `rotate`, but `transform: rotate()` instead. Is there a reason for this difference? Just asking because `translate-*` and `translate-x-*` both use the new `translate` property instead of `transform`."", ""issue_word_count"": 221, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""498f9ff003bb3ffb0302f80d18e0b4d1c7c5d4d6"", ""head_commit"": ""511fc89179831c1ef5f7890faee4c9a4f8ac6cbb"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/18014"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/18014"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-14T09:40:37.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 40c85b5c38d9..640bfaef66c8 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -15,6 +15,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure that media queries within `::before` and `::after` pseudo selectors create valid CSS rules when building a production build ([#17979](https://github.com/tailwindlabs/tailwindcss/pull/17979))\n - `lightningcss` now statically links Visual Studio redistributables ([#17979](https://github.com/tailwindlabs/tailwindcss/pull/17979))\n - Ensure that running the Standalone build does not leave temporary files behind ([#17981](https://github.com/tailwindlabs/tailwindcss/pull/17981))\n+- Fix `-rotate-*` utilities with arbitrary values ([#18014](https://github.com/tailwindlabs/tailwindcss/pull/18014))\n \n ## [4.1.6] - 2025-05-09\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex d28a368a43f5..9a671a41d106 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -1388,7 +1388,7 @@ export function createUtilities(theme: Theme) {\n         if (type === 'vector') {\n           return [decl('rotate', `${value} var(--tw-rotate)`)]\n         } else if (type !== 'angle') {\n-          return [decl('rotate', value)]\n+          return [decl('rotate', negative ? `calc(${value} * -1)` : value)]\n         }\n       } else {\n         value = theme.resolve(candidate.value.value, ['--rotate'])\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 4c2a7799b3e7..79934c8c044d 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -4453,24 +4453,45 @@ test('translate-3d', async () => {\n })\n \n test('rotate', async () => {\n-  expect(await run(['rotate-45', '-rotate-45', 'rotate-[123deg]', 'rotate-[0.3_0.7_1_45deg]']))\n-    .toMatchInlineSnapshot(`\n-      \"".-rotate-45 {\n-        rotate: -45deg;\n-      }\n+  expect(\n+    await run([\n+      'rotate-45',\n+      '-rotate-45',\n+      'rotate-[123deg]',\n+      'rotate-[0.3_0.7_1_45deg]',\n+      'rotate-(--var)',\n+      '-rotate-[123deg]',\n+      '-rotate-(--var)',\n+    ]),\n+  ).toMatchInlineSnapshot(`\n+    \"".-rotate-\\\\(--var\\\\) {\n+      rotate: calc(var(--var) * -1);\n+    }\n \n-      .rotate-45 {\n-        rotate: 45deg;\n-      }\n+    .-rotate-45 {\n+      rotate: -45deg;\n+    }\n \n-      .rotate-\\\\[0\\\\.3_0\\\\.7_1_45deg\\\\] {\n-        rotate: .3 .7 1 45deg;\n-      }\n+    .-rotate-\\\\[123deg\\\\] {\n+      rotate: -123deg;\n+    }\n \n-      .rotate-\\\\[123deg\\\\] {\n-        rotate: 123deg;\n-      }\""\n-    `)\n+    .rotate-\\\\(--var\\\\) {\n+      rotate: var(--var);\n+    }\n+\n+    .rotate-45 {\n+      rotate: 45deg;\n+    }\n+\n+    .rotate-\\\\[0\\\\.3_0\\\\.7_1_45deg\\\\] {\n+      rotate: .3 .7 1 45deg;\n+    }\n+\n+    .rotate-\\\\[123deg\\\\] {\n+      rotate: 123deg;\n+    }\""\n+  `)\n   expect(\n     await run([\n       'rotate',\n@@ -4486,7 +4507,15 @@ test('rotate', async () => {\n })\n \n test('rotate-x', async () => {\n-  expect(await run(['rotate-x-45', '-rotate-x-45', 'rotate-x-[123deg]'])).toMatchInlineSnapshot(`\n+  expect(\n+    await run([\n+      'rotate-x-45',\n+      '-rotate-x-45',\n+      'rotate-x-[123deg]',\n+      'rotate-x-(--var)',\n+      '-rotate-x-(--var)',\n+    ]),\n+  ).toMatchInlineSnapshot(`\n     \""@layer properties {\n       @supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {\n         *, :before, :after, ::backdrop {\n@@ -4499,11 +4528,21 @@ test('rotate-x', async () => {\n       }\n     }\n \n+    .-rotate-x-\\\\(--var\\\\) {\n+      --tw-rotate-x: rotateX(calc(var(--var) * -1));\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n+\n     .-rotate-x-45 {\n       --tw-rotate-x: rotateX(calc(45deg * -1));\n       transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n     }\n \n+    .rotate-x-\\\\(--var\\\\) {\n+      --tw-rotate-x: rotateX(var(--var));\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n+\n     .rotate-x-45 {\n       --tw-rotate-x: rotateX(45deg);\n       transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n@@ -4553,65 +4592,83 @@ test('rotate-x', async () => {\n })\n \n test('rotate-y', async () => {\n-  expect(await run(['rotate-y-45', '-rotate-y-45', 'rotate-y-[123deg]', '-rotate-y-[123deg]']))\n-    .toMatchInlineSnapshot(`\n-      \""@layer properties {\n-        @supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {\n-          *, :before, :after, ::backdrop {\n-            --tw-rotate-x: initial;\n-            --tw-rotate-y: initial;\n-            --tw-rotate-z: initial;\n-            --tw-skew-x: initial;\n-            --tw-skew-y: initial;\n-          }\n+  expect(\n+    await run([\n+      'rotate-y-45',\n+      'rotate-y-[123deg]',\n+      'rotate-y-(--var)',\n+      '-rotate-y-45',\n+      '-rotate-y-[123deg]',\n+      '-rotate-y-(--var)',\n+    ]),\n+  ).toMatchInlineSnapshot(`\n+    \""@layer properties {\n+      @supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {\n+        *, :before, :after, ::backdrop {\n+          --tw-rotate-x: initial;\n+          --tw-rotate-y: initial;\n+          --tw-rotate-z: initial;\n+          --tw-skew-x: initial;\n+          --tw-skew-y: initial;\n         }\n       }\n+    }\n \n-      .-rotate-y-45 {\n-        --tw-rotate-y: rotateY(calc(45deg * -1));\n-        transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n-      }\n+    .-rotate-y-\\\\(--var\\\\) {\n+      --tw-rotate-y: rotateY(calc(var(--var) * -1));\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n \n-      .-rotate-y-\\\\[123deg\\\\] {\n-        --tw-rotate-y: rotateY(calc(123deg * -1));\n-        transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n-      }\n+    .-rotate-y-45 {\n+      --tw-rotate-y: rotateY(calc(45deg * -1));\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n \n-      .rotate-y-45 {\n-        --tw-rotate-y: rotateY(45deg);\n-        transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n-      }\n+    .-rotate-y-\\\\[123deg\\\\] {\n+      --tw-rotate-y: rotateY(calc(123deg * -1));\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n \n-      .rotate-y-\\\\[123deg\\\\] {\n-        --tw-rotate-y: rotateY(123deg);\n-        transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n-      }\n+    .rotate-y-\\\\(--var\\\\) {\n+      --tw-rotate-y: rotateY(var(--var));\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n \n-      @property --tw-rotate-x {\n-        syntax: \""*\"";\n-        inherits: false\n-      }\n+    .rotate-y-45 {\n+      --tw-rotate-y: rotateY(45deg);\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n \n-      @property --tw-rotate-y {\n-        syntax: \""*\"";\n-        inherits: false\n-      }\n+    .rotate-y-\\\\[123deg\\\\] {\n+      --tw-rotate-y: rotateY(123deg);\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n \n-      @property --tw-rotate-z {\n-        syntax: \""*\"";\n-        inherits: false\n-      }\n+    @property --tw-rotate-x {\n+      syntax: \""*\"";\n+      inherits: false\n+    }\n \n-      @property --tw-skew-x {\n-        syntax: \""*\"";\n-        inherits: false\n-      }\n+    @property --tw-rotate-y {\n+      syntax: \""*\"";\n+      inherits: false\n+    }\n \n-      @property --tw-skew-y {\n-        syntax: \""*\"";\n-        inherits: false\n-      }\""\n-    `)\n+    @property --tw-rotate-z {\n+      syntax: \""*\"";\n+      inherits: false\n+    }\n+\n+    @property --tw-skew-x {\n+      syntax: \""*\"";\n+      inherits: false\n+    }\n+\n+    @property --tw-skew-y {\n+      syntax: \""*\"";\n+      inherits: false\n+    }\""\n+  `)\n   expect(\n     await run([\n       'rotate-y',\n@@ -4626,65 +4683,83 @@ test('rotate-y', async () => {\n })\n \n test('rotate-z', async () => {\n-  expect(await run(['rotate-z-45', '-rotate-z-45', 'rotate-z-[123deg]', '-rotate-z-[123deg]']))\n-    .toMatchInlineSnapshot(`\n-      \""@layer properties {\n-        @supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {\n-          *, :before, :after, ::backdrop {\n-            --tw-rotate-x: initial;\n-            --tw-rotate-y: initial;\n-            --tw-rotate-z: initial;\n-            --tw-skew-x: initial;\n-            --tw-skew-y: initial;\n-          }\n+  expect(\n+    await run([\n+      'rotate-z-45',\n+      'rotate-z-[123deg]',\n+      'rotate-z-(--var)',\n+      '-rotate-z-45',\n+      '-rotate-z-[123deg]',\n+      '-rotate-z-(--var)',\n+    ]),\n+  ).toMatchInlineSnapshot(`\n+    \""@layer properties {\n+      @supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {\n+        *, :before, :after, ::backdrop {\n+          --tw-rotate-x: initial;\n+          --tw-rotate-y: initial;\n+          --tw-rotate-z: initial;\n+          --tw-skew-x: initial;\n+          --tw-skew-y: initial;\n         }\n       }\n+    }\n \n-      .-rotate-z-45 {\n-        --tw-rotate-z: rotateZ(calc(45deg * -1));\n-        transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n-      }\n+    .-rotate-z-\\\\(--var\\\\) {\n+      --tw-rotate-z: rotateZ(calc(var(--var) * -1));\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n \n-      .-rotate-z-\\\\[123deg\\\\] {\n-        --tw-rotate-z: rotateZ(calc(123deg * -1));\n-        transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n-      }\n+    .-rotate-z-45 {\n+      --tw-rotate-z: rotateZ(calc(45deg * -1));\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n \n-      .rotate-z-45 {\n-        --tw-rotate-z: rotateZ(45deg);\n-        transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n-      }\n+    .-rotate-z-\\\\[123deg\\\\] {\n+      --tw-rotate-z: rotateZ(calc(123deg * -1));\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n \n-      .rotate-z-\\\\[123deg\\\\] {\n-        --tw-rotate-z: rotateZ(123deg);\n-        transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n-      }\n+    .rotate-z-\\\\(--var\\\\) {\n+      --tw-rotate-z: rotateZ(var(--var));\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n \n-      @property --tw-rotate-x {\n-        syntax: \""*\"";\n-        inherits: false\n-      }\n+    .rotate-z-45 {\n+      --tw-rotate-z: rotateZ(45deg);\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n \n-      @property --tw-rotate-y {\n-        syntax: \""*\"";\n-        inherits: false\n-      }\n+    .rotate-z-\\\\[123deg\\\\] {\n+      --tw-rotate-z: rotateZ(123deg);\n+      transform: var(--tw-rotate-x, ) var(--tw-rotate-y, ) var(--tw-rotate-z, ) var(--tw-skew-x, ) var(--tw-skew-y, );\n+    }\n \n-      @property --tw-rotate-z {\n-        syntax: \""*\"";\n-        inherits: false\n-      }\n+    @property --tw-rotate-x {\n+      syntax: \""*\"";\n+      inherits: false\n+    }\n \n-      @property --tw-skew-x {\n-        syntax: \""*\"";\n-        inherits: false\n-      }\n+    @property --tw-rotate-y {\n+      syntax: \""*\"";\n+      inherits: false\n+    }\n \n-      @property --tw-skew-y {\n-        syntax: \""*\"";\n-        inherits: false\n-      }\""\n-    `)\n+    @property --tw-rotate-z {\n+      syntax: \""*\"";\n+      inherits: false\n+    }\n+\n+    @property --tw-skew-x {\n+      syntax: \""*\"";\n+      inherits: false\n+    }\n+\n+    @property --tw-skew-y {\n+      syntax: \""*\"";\n+      inherits: false\n+    }\""\n+  `)\n   expect(\n     await run([\n       'rotate-z',\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17979"", ""pr_id"": 17979, ""issue_id"": 17556, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Build warning for `css-syntax-error` when using `divider` component from daisyui with tailwind v4.1\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.1.2\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nSvelteKit 2.20.3\n\n**What version of Node.js are you using?**\n\nv22.14.0\n\n**What version of Daisyui are you using?**\n\nv5.0.12\n\n**What browser are you using?**\n\nN/A\n\n**What operating system are you using?**\n\nFedora 40\n\n**Reproduction URL**\n\nhttps://github.com/velut/tw-daisyui-divider-issue\n\n**Describe your issue**\n\nAfter upgrading to tailwind v4.1 a warning occurs during the build process if using the [divider](https://daisyui.com/components/divider/) component from daisyui. On tailwind v4.0 this warning did not appear.\n\n```\nrendering chunks (4)...warnings when minifying css:\n\u25b2 [WARNING] Unexpected \"")\"" [css-syntax-error]\n\n    <stdin>:2:11914:\n      2 \u2502 ...olor-mix(in lab, red, red)){:is(){background-color:color-mix(in ...\n        \u2575                                    ^\n```\n\nAfter analyzing the compiled code the empty `:is()` appears here:\n\n```\n@supports (color: color-mix(in lab, red, red)) {\n    :is() {\n      background-color: color-mix(\n        in oklab,\n        var(--color-base-content) 10%,\n        transparent\n      );\n    }\n  }\n```\n\nThis block of css is not generated when building with tailwind v4.0."", ""issue_word_count"": 234, ""test_files_count"": 8, ""non_test_files_count"": 5, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/css-modules.test.ts"", ""integrations/vite/index.test.ts"", ""integrations/vite/other-transforms.test.ts"", ""integrations/vite/resolvers.test.ts"", ""integrations/vite/source-maps.test.ts"", ""integrations/vite/url-rewriting.test.ts"", ""package.json"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/utilities.test.ts"", ""patches/lightningcss@1.30.0.patch"", ""pnpm-lock.yaml"", ""pnpm-workspace.yaml""], ""pr_changed_test_files"": [""integrations/vite/css-modules.test.ts"", ""integrations/vite/index.test.ts"", ""integrations/vite/other-transforms.test.ts"", ""integrations/vite/resolvers.test.ts"", ""integrations/vite/source-maps.test.ts"", ""integrations/vite/url-rewriting.test.ts"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""ba944ca3b1a68a554a233bad76f0ac5e39f4f146"", ""head_commit"": ""25f2dc414dcb64708470781031d6d5bf35ff82ef"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17979"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17979"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-12T13:49:18.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 31b5f9f33779..40c85b5c38d9 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,8 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Allow `_` before numbers during candidate extraction ([#17961](https://github.com/tailwindlabs/tailwindcss/pull/17961))\n - Upgrade: Fix error when using `@import \u2026 source(\u2026)` ([#17963](https://github.com/tailwindlabs/tailwindcss/pull/17963))\n - Prevent duplicate suggestions when using `@theme` and `@utility` together ([#17675](https://github.com/tailwindlabs/tailwindcss/pull/17675))\n+- Ensure that media queries within `::before` and `::after` pseudo selectors create valid CSS rules when building a production build ([#17979](https://github.com/tailwindlabs/tailwindcss/pull/17979))\n+- `lightningcss` now statically links Visual Studio redistributables ([#17979](https://github.com/tailwindlabs/tailwindcss/pull/17979))\n - Ensure that running the Standalone build does not leave temporary files behind ([#17981](https://github.com/tailwindlabs/tailwindcss/pull/17981))\n \n ## [4.1.6] - 2025-05-09\n\ndiff --git a/package.json b/package.json\nindex 9ee492eb3833..60a6dc116f57 100644\n--- a/package.json\n+++ b/package.json\n@@ -63,7 +63,7 @@\n   \""packageManager\"": \""pnpm@9.6.0\"",\n   \""pnpm\"": {\n     \""patchedDependencies\"": {\n-      \""lightningcss@1.29.2\"": \""patches/lightningcss@1.29.2.patch\"",\n+      \""lightningcss@1.30.0\"": \""patches/lightningcss@1.30.0.patch\"",\n       \""@parcel/watcher@2.5.1\"": \""patches/@parcel__watcher@2.5.1.patch\""\n     }\n   }\n\ndiff --git a/patches/lightningcss@1.29.2.patch b/patches/lightningcss@1.30.0.patch\nsimilarity index 100%\nrename from patches/lightningcss@1.29.2.patch\nrename to patches/lightningcss@1.30.0.patch\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex b157d2df5b91..a0cdf49d5c97 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -10,29 +10,29 @@ catalogs:\n       specifier: ^20.14.8\n       version: 20.14.13\n     lightningcss:\n-      specifier: 1.29.2\n-      version: 1.29.2\n+      specifier: 1.30.0\n+      version: 1.30.0\n     lightningcss-darwin-arm64:\n-      specifier: 1.29.2\n-      version: 1.29.2\n+      specifier: 1.30.0\n+      version: 1.30.0\n     lightningcss-darwin-x64:\n-      specifier: 1.29.2\n-      version: 1.29.2\n+      specifier: 1.30.0\n+      version: 1.30.0\n     lightningcss-linux-arm64-gnu:\n-      specifier: 1.29.2\n-      version: 1.29.2\n+      specifier: 1.30.0\n+      version: 1.30.0\n     lightningcss-linux-arm64-musl:\n-      specifier: 1.29.2\n-      version: 1.29.2\n+      specifier: 1.30.0\n+      version: 1.30.0\n     lightningcss-linux-x64-gnu:\n-      specifier: 1.29.2\n-      version: 1.29.2\n+      specifier: 1.30.0\n+      version: 1.30.0\n     lightningcss-linux-x64-musl:\n-      specifier: 1.29.2\n-      version: 1.29.2\n+      specifier: 1.30.0\n+      version: 1.30.0\n     lightningcss-win32-x64-msvc:\n-      specifier: 1.29.2\n-      version: 1.29.2\n+      specifier: 1.30.0\n+      version: 1.30.0\n     prettier:\n       specifier: 3.5.0\n       version: 3.5.0\n@@ -44,9 +44,9 @@ patchedDependencies:\n   '@parcel/watcher@2.5.1':\n     hash: zs2vvlrje3h42xp5ed2v44fep4\n     path: patches/@parcel__watcher@2.5.1.patch\n-  lightningcss@1.29.2:\n+  lightningcss@1.30.0:\n     hash: tzyxy3asfxcqc7ihrooumyi5fm\n-    path: patches/lightningcss@1.29.2.patch\n+    path: patches/lightningcss@1.30.0.patch\n \n importers:\n \n@@ -84,7 +84,7 @@ importers:\n         version: 5.5.4\n       vitest:\n         specifier: ^2.0.5\n-        version: 2.0.5(@types/node@20.14.13)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)\n+        version: 2.0.5(@types/node@20.14.13)(lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)\n \n   crates/node:\n     dependencies:\n@@ -248,7 +248,7 @@ importers:\n         version: 2.4.2\n       lightningcss:\n         specifier: 'catalog:'\n-        version: 1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm)\n+        version: 1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm)\n       magic-string:\n         specifier: ^0.30.17\n         version: 0.30.17\n@@ -346,25 +346,25 @@ importers:\n         version: 1.2.13\n       lightningcss-darwin-arm64:\n         specifier: 'catalog:'\n-        version: 1.29.2\n+        version: 1.30.0\n       lightningcss-darwin-x64:\n         specifier: 'catalog:'\n-        version: 1.29.2\n+        version: 1.30.0\n       lightningcss-linux-arm64-gnu:\n         specifier: 'catalog:'\n-        version: 1.29.2\n+        version: 1.30.0\n       lightningcss-linux-arm64-musl:\n         specifier: 'catalog:'\n-        version: 1.29.2\n+        version: 1.30.0\n       lightningcss-linux-x64-gnu:\n         specifier: 'catalog:'\n-        version: 1.29.2\n+        version: 1.30.0\n       lightningcss-linux-x64-musl:\n         specifier: 'catalog:'\n-        version: 1.29.2\n+        version: 1.30.0\n       lightningcss-win32-x64-msvc:\n         specifier: 'catalog:'\n-        version: 1.29.2\n+        version: 1.30.0\n \n   packages/@tailwindcss-upgrade:\n     dependencies:\n@@ -450,7 +450,7 @@ importers:\n         version: 20.14.13\n       vite:\n         specifier: 'catalog:'\n-        version: 6.0.0(@types/node@20.14.13)(jiti@2.4.2)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)(tsx@4.19.1)(yaml@2.6.0)\n+        version: 6.0.0(@types/node@20.14.13)(jiti@2.4.2)(lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)(tsx@4.19.1)(yaml@2.6.0)\n \n   packages/internal-example-plugin: {}\n \n@@ -470,7 +470,7 @@ importers:\n         version: 1.6.0\n       lightningcss:\n         specifier: 'catalog:'\n-        version: 1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm)\n+        version: 1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm)\n       magic-string:\n         specifier: ^0.30.17\n         version: 0.30.17\n@@ -562,7 +562,7 @@ importers:\n         version: link:../../packages/@tailwindcss-vite\n       '@vitejs/plugin-react':\n         specifier: ^4.4.1\n-        version: 4.4.1(vite@6.0.0(@types/node@20.14.13)(jiti@2.4.2)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)(tsx@4.19.1)(yaml@2.6.0))\n+        version: 4.4.1(vite@6.0.0(@types/node@20.14.13)(jiti@2.4.2)(lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)(tsx@4.19.1)(yaml@2.6.0))\n       react:\n         specifier: ^19.1.0\n         version: 19.1.0\n@@ -584,7 +584,7 @@ importers:\n         version: 1.2.13\n       vite:\n         specifier: 'catalog:'\n-        version: 6.0.0(@types/node@20.14.13)(jiti@2.4.2)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)(tsx@4.19.1)(yaml@2.6.0)\n+        version: 6.0.0(@types/node@20.14.13)(jiti@2.4.2)(lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)(tsx@4.19.1)(yaml@2.6.0)\n \n packages:\n \n@@ -1561,6 +1561,10 @@ packages:\n     resolution: {integrity: sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==}\n     engines: {node: '>=6.0.0'}\n \n+  '@jridgewell/gen-mapping@0.3.8':\n+    resolution: {integrity: sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==}\n+    engines: {node: '>=6.0.0'}\n+\n   '@jridgewell/resolve-uri@3.1.2':\n     resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}\n     engines: {node: '>=6.0.0'}\n@@ -2515,6 +2519,11 @@ packages:\n     engines: {node: '>=0.4.0'}\n     hasBin: true\n \n+  acorn@8.14.1:\n+    resolution: {integrity: sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==}\n+    engines: {node: '>=0.4.0'}\n+    hasBin: true\n+\n   ajv@6.12.6:\n     resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}\n \n@@ -2646,7 +2655,6 @@ packages:\n \n   bun@1.2.13:\n     resolution: {integrity: sha512-EhP1MhFbicqtaRSFCbEZdkcFco8Ov47cNJcB9QmKS8U4cojKHfLU+dQR14lCvLYmtBvGgwv/Lp+9SSver2OPzQ==}\n-    cpu: [arm64, x64, aarch64]\n     os: [darwin, linux, win32]\n     hasBin: true\n \n@@ -3192,6 +3200,9 @@ packages:\n     resolution: {integrity: sha512-g0QYk1dZBxGwk+Ngc+ltRH2IBp2f7zBkBMBJZCDerh6EhlhSR6+9irMCuT/09zD6qkarHUSn529sK/yL4S27mg==}\n     engines: {node: '>= 0.4'}\n \n+  get-tsconfig@4.10.0:\n+    resolution: {integrity: sha512-kGzZ3LWWQcGIAmg6iWvXn0ei6WDtV26wzHRMwDSzmAbcXrTEXxHy6IehI6/4eT6VRKyMP1eF1VqwrVUmE/LR7A==}\n+\n   get-tsconfig@4.8.1:\n     resolution: {integrity: sha512-k9PN+cFBmaLWtVz29SkUoqU5O0slLuHJXt/2P+tMVFT+phsSGXGkp9t3rQIqdz0e+06EHNGs3oM6ZX1s2zHxRg==}\n \n@@ -3506,61 +3517,68 @@ packages:\n     resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}\n     engines: {node: '>= 0.8.0'}\n \n-  lightningcss-darwin-arm64@1.29.2:\n-    resolution: {integrity: sha512-cK/eMabSViKn/PG8U/a7aCorpeKLMlK0bQeNHmdb7qUnBkNPnL+oV5DjJUo0kqWsJUapZsM4jCfYItbqBDvlcA==}\n+  lightningcss-darwin-arm64@1.30.0:\n+    resolution: {integrity: sha512-L9lhvW4rTHL6vaG1WU3Itj0ivtdBuwu7ufrKEbijRCPhS1pt1haXEXI8h9g73qCQsOaYs1GCc9chvSgxPmhpRA==}\n     engines: {node: '>= 12.0.0'}\n+    cpu: [arm64]\n     os: [darwin]\n \n-  lightningcss-darwin-x64@1.29.2:\n-    resolution: {integrity: sha512-j5qYxamyQw4kDXX5hnnCKMf3mLlHvG44f24Qyi2965/Ycz829MYqjrVg2H8BidybHBp9kom4D7DR5VqCKDXS0w==}\n+  lightningcss-darwin-x64@1.30.0:\n+    resolution: {integrity: sha512-+qNst+L3GGwG5LypEFTmDUOtNarQVh717Enk4AfmKfwlTrKCSe9kAiPyK7ces269a+f0jNSa8Uww8WwGFXzt8w==}\n     engines: {node: '>= 12.0.0'}\n+    cpu: [x64]\n     os: [darwin]\n \n-  lightningcss-freebsd-x64@1.29.2:\n-    resolution: {integrity: sha512-wDk7M2tM78Ii8ek9YjnY8MjV5f5JN2qNVO+/0BAGZRvXKtQrBC4/cn4ssQIpKIPP44YXw6gFdpUF+Ps+RGsCwg==}\n+  lightningcss-freebsd-x64@1.30.0:\n+    resolution: {integrity: sha512-/sfAWALScgggjjk5ZlmGdpFELwGPIwzAdfcBJcT6UTgQoDHzQ4aP41XTq3N4LL01U9dsJp6uAvCvmHX7snqTdg==}\n     engines: {node: '>= 12.0.0'}\n     cpu: [x64]\n     os: [freebsd]\n \n-  lightningcss-linux-arm-gnueabihf@1.29.2:\n-    resolution: {integrity: sha512-IRUrOrAF2Z+KExdExe3Rz7NSTuuJ2HvCGlMKoquK5pjvo2JY4Rybr+NrKnq0U0hZnx5AnGsuFHjGnNT14w26sg==}\n+  lightningcss-linux-arm-gnueabihf@1.30.0:\n+    resolution: {integrity: sha512-3B5val/f61unLgfZHEfkZGzunlyyL76l8xRoxFx+G0uwxK7rvaFcnkyf6k4Zto2STVj05FsLs+aTZoTqslPaug==}\n     engines: {node: '>= 12.0.0'}\n     cpu: [arm]\n     os: [linux]\n \n-  lightningcss-linux-arm64-gnu@1.29.2:\n-    resolution: {integrity: sha512-KKCpOlmhdjvUTX/mBuaKemp0oeDIBBLFiU5Fnqxh1/DZ4JPZi4evEH7TKoSBFOSOV3J7iEmmBaw/8dpiUvRKlQ==}\n+  lightningcss-linux-arm64-gnu@1.30.0:\n+    resolution: {integrity: sha512-Q45+fvm7eAAmorsEzc1ZBwajGnXDocB/nRaSldpHQa36QbP93GrzmBqfSdi2pEks2yXMxST4yznio24Q6en7Sg==}\n     engines: {node: '>= 12.0.0'}\n+    cpu: [arm64]\n     os: [linux]\n \n-  lightningcss-linux-arm64-musl@1.29.2:\n-    resolution: {integrity: sha512-Q64eM1bPlOOUgxFmoPUefqzY1yV3ctFPE6d/Vt7WzLW4rKTv7MyYNky+FWxRpLkNASTnKQUaiMJ87zNODIrrKQ==}\n+  lightningcss-linux-arm64-musl@1.30.0:\n+    resolution: {integrity: sha512-RNZNW/AyKax8wWR4xMKoyAb40dqhzOtnAw4knjbyxJUUEL0wzBEXO3k44AS3UFRjxTyd/s46adVQXxE/vOaSgg==}\n     engines: {node: '>= 12.0.0'}\n+    cpu: [arm64]\n     os: [linux]\n \n-  lightningcss-linux-x64-gnu@1.29.2:\n-    resolution: {integrity: sha512-0v6idDCPG6epLXtBH/RPkHvYx74CVziHo6TMYga8O2EiQApnUPZsbR9nFNrg2cgBzk1AYqEd95TlrsL7nYABQg==}\n+  lightningcss-linux-x64-gnu@1.30.0:\n+    resolution: {integrity: sha512-ExVnSepsAyQb547i7SvPhS0SrgIDUjA1dYTT0DNFt/YsqfKhkxg405VDtMoV2MQGAyoEQIub+YK5NQo9Lw7IzQ==}\n     engines: {node: '>= 12.0.0'}\n+    cpu: [x64]\n     os: [linux]\n \n-  lightningcss-linux-x64-musl@1.29.2:\n-    resolution: {integrity: sha512-rMpz2yawkgGT8RULc5S4WiZopVMOFWjiItBT7aSfDX4NQav6M44rhn5hjtkKzB+wMTRlLLqxkeYEtQ3dd9696w==}\n+  lightningcss-linux-x64-musl@1.30.0:\n+    resolution: {integrity: sha512-e/nHeX5SAEcfAzyLob5H1Jhm8uHLKwpOIHzcURKnXTMFdBqIDOsETMhmcB5AGDqsr6Q5D9u0QVswDdRo+btSgg==}\n     engines: {node: '>= 12.0.0'}\n+    cpu: [x64]\n     os: [linux]\n \n-  lightningcss-win32-arm64-msvc@1.29.2:\n-    resolution: {integrity: sha512-nL7zRW6evGQqYVu/bKGK+zShyz8OVzsCotFgc7judbt6wnB2KbiKKJwBE4SGoDBQ1O94RjW4asrCjQL4i8Fhbw==}\n+  lightningcss-win32-arm64-msvc@1.30.0:\n+    resolution: {integrity: sha512-Fd9XejM6GPHx5rv7I8aqsc8mBHs+TpHEVDalP5PVP986tF6rmiVfwQzM2Ic4Cn0rXbS3z95Ru8x50hnzfR2GDA==}\n     engines: {node: '>= 12.0.0'}\n     cpu: [arm64]\n     os: [win32]\n \n-  lightningcss-win32-x64-msvc@1.29.2:\n-    resolution: {integrity: sha512-EdIUW3B2vLuHmv7urfzMI/h2fmlnOQBk1xlsDxkN1tCWKjNFjfLhGxYk8C8mzpSfr+A6jFFIi8fU6LbQGsRWjA==}\n+  lightningcss-win32-x64-msvc@1.30.0:\n+    resolution: {integrity: sha512-2BhpVDbNa+HpXPu63EYfcsL2TCBKLeuMckx4d6UZCzaj1KVuSRXi6r7H3rUeaADuX5NB/BT2smP4HI3s6I1/Ag==}\n     engines: {node: '>= 12.0.0'}\n+    cpu: [x64]\n     os: [win32]\n \n-  lightningcss@1.29.2:\n-    resolution: {integrity: sha512-6b6gd/RUXKaw5keVdSEtqFVdzWnU5jMxTUjA2bVcMNPLwSQ08Sv/UodBVtETLCn7k4S1Ibxwh7k68IwLZPgKaA==}\n+  lightningcss@1.30.0:\n+    resolution: {integrity: sha512-uuurN2onfoNwQtaWnX9UYLz6DlZHnUd88SceOXDAQzQ5+FJ+ELPgcC/EVtRJoFOveXe44zRE+foh2KMD/vQxqQ==}\n     engines: {node: '>= 12.0.0'}\n \n   lilconfig@2.1.0:\n@@ -5352,13 +5370,20 @@ snapshots:\n       '@jridgewell/sourcemap-codec': 1.5.0\n       '@jridgewell/trace-mapping': 0.3.25\n \n+  '@jridgewell/gen-mapping@0.3.8':\n+    dependencies:\n+      '@jridgewell/set-array': 1.2.1\n+      '@jridgewell/sourcemap-codec': 1.5.0\n+      '@jridgewell/trace-mapping': 0.3.25\n+    optional: true\n+\n   '@jridgewell/resolve-uri@3.1.2': {}\n \n   '@jridgewell/set-array@1.2.1': {}\n \n   '@jridgewell/source-map@0.3.6':\n     dependencies:\n-      '@jridgewell/gen-mapping': 0.3.5\n+      '@jridgewell/gen-mapping': 0.3.8\n       '@jridgewell/trace-mapping': 0.3.25\n     optional: true\n \n@@ -6165,14 +6190,14 @@ snapshots:\n       '@typescript-eslint/types': 8.11.0\n       eslint-visitor-keys: 3.4.3\n \n-  '@vitejs/plugin-react@4.4.1(vite@6.0.0(@types/node@20.14.13)(jiti@2.4.2)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)(tsx@4.19.1)(yaml@2.6.0))':\n+  '@vitejs/plugin-react@4.4.1(vite@6.0.0(@types/node@20.14.13)(jiti@2.4.2)(lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)(tsx@4.19.1)(yaml@2.6.0))':\n     dependencies:\n       '@babel/core': 7.27.1\n       '@babel/plugin-transform-react-jsx-self': 7.25.9(@babel/core@7.27.1)\n       '@babel/plugin-transform-react-jsx-source': 7.25.9(@babel/core@7.27.1)\n       '@types/babel__core': 7.20.5\n       react-refresh: 0.17.0\n-      vite: 6.0.0(@types/node@20.14.13)(jiti@2.4.2)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)(tsx@4.19.1)(yaml@2.6.0)\n+      vite: 6.0.0(@types/node@20.14.13)(jiti@2.4.2)(lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)(tsx@4.19.1)(yaml@2.6.0)\n     transitivePeerDependencies:\n       - supports-color\n \n@@ -6215,6 +6240,9 @@ snapshots:\n \n   acorn@8.14.0: {}\n \n+  acorn@8.14.1:\n+    optional: true\n+\n   ajv@6.12.6:\n     dependencies:\n       fast-deep-equal: 3.1.3\n@@ -7211,6 +7239,11 @@ snapshots:\n       es-errors: 1.3.0\n       get-intrinsic: 1.2.4\n \n+  get-tsconfig@4.10.0:\n+    dependencies:\n+      resolve-pkg-maps: 1.0.0\n+    optional: true\n+\n   get-tsconfig@4.8.1:\n     dependencies:\n       resolve-pkg-maps: 1.0.0\n@@ -7506,43 +7539,43 @@ snapshots:\n       prelude-ls: 1.2.1\n       type-check: 0.4.0\n \n-  lightningcss-darwin-arm64@1.29.2: {}\n+  lightningcss-darwin-arm64@1.30.0: {}\n \n-  lightningcss-darwin-x64@1.29.2: {}\n+  lightningcss-darwin-x64@1.30.0: {}\n \n-  lightningcss-freebsd-x64@1.29.2:\n+  lightningcss-freebsd-x64@1.30.0:\n     optional: true\n \n-  lightningcss-linux-arm-gnueabihf@1.29.2:\n+  lightningcss-linux-arm-gnueabihf@1.30.0:\n     optional: true\n \n-  lightningcss-linux-arm64-gnu@1.29.2: {}\n+  lightningcss-linux-arm64-gnu@1.30.0: {}\n \n-  lightningcss-linux-arm64-musl@1.29.2: {}\n+  lightningcss-linux-arm64-musl@1.30.0: {}\n \n-  lightningcss-linux-x64-gnu@1.29.2: {}\n+  lightningcss-linux-x64-gnu@1.30.0: {}\n \n-  lightningcss-linux-x64-musl@1.29.2: {}\n+  lightningcss-linux-x64-musl@1.30.0: {}\n \n-  lightningcss-win32-arm64-msvc@1.29.2:\n+  lightningcss-win32-arm64-msvc@1.30.0:\n     optional: true\n \n-  lightningcss-win32-x64-msvc@1.29.2: {}\n+  lightningcss-win32-x64-msvc@1.30.0: {}\n \n-  lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm):\n+  lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm):\n     dependencies:\n       detect-libc: 2.0.4\n     optionalDependencies:\n-      lightningcss-darwin-arm64: 1.29.2\n-      lightningcss-darwin-x64: 1.29.2\n-      lightningcss-freebsd-x64: 1.29.2\n-      lightningcss-linux-arm-gnueabihf: 1.29.2\n-      lightningcss-linux-arm64-gnu: 1.29.2\n-      lightningcss-linux-arm64-musl: 1.29.2\n-      lightningcss-linux-x64-gnu: 1.29.2\n-      lightningcss-linux-x64-musl: 1.29.2\n-      lightningcss-win32-arm64-msvc: 1.29.2\n-      lightningcss-win32-x64-msvc: 1.29.2\n+      lightningcss-darwin-arm64: 1.30.0\n+      lightningcss-darwin-x64: 1.30.0\n+      lightningcss-freebsd-x64: 1.30.0\n+      lightningcss-linux-arm-gnueabihf: 1.30.0\n+      lightningcss-linux-arm64-gnu: 1.30.0\n+      lightningcss-linux-arm64-musl: 1.30.0\n+      lightningcss-linux-x64-gnu: 1.30.0\n+      lightningcss-linux-x64-musl: 1.30.0\n+      lightningcss-win32-arm64-msvc: 1.30.0\n+      lightningcss-win32-x64-msvc: 1.30.0\n \n   lilconfig@2.1.0: {}\n \n@@ -8290,7 +8323,7 @@ snapshots:\n   terser@5.31.6:\n     dependencies:\n       '@jridgewell/source-map': 0.3.6\n-      acorn: 8.14.0\n+      acorn: 8.14.1\n       commander: 2.20.3\n       source-map-support: 0.5.21\n     optional: true\n@@ -8405,7 +8438,7 @@ snapshots:\n   tsx@4.19.1:\n     dependencies:\n       esbuild: 0.23.1\n-      get-tsconfig: 4.8.1\n+      get-tsconfig: 4.10.0\n     optionalDependencies:\n       fsevents: 2.3.3\n     optional: true\n@@ -8522,13 +8555,13 @@ snapshots:\n \n   util-deprecate@1.0.2: {}\n \n-  vite-node@2.0.5(@types/node@20.14.13)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6):\n+  vite-node@2.0.5(@types/node@20.14.13)(lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6):\n     dependencies:\n       cac: 6.7.14\n       debug: 4.4.0\n       pathe: 1.1.2\n       tinyrainbow: 1.2.0\n-      vite: 5.4.0(@types/node@20.14.13)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)\n+      vite: 5.4.0(@types/node@20.14.13)(lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)\n     transitivePeerDependencies:\n       - '@types/node'\n       - less\n@@ -8540,7 +8573,7 @@ snapshots:\n       - supports-color\n       - terser\n \n-  vite@5.4.0(@types/node@20.14.13)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6):\n+  vite@5.4.0(@types/node@20.14.13)(lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6):\n     dependencies:\n       esbuild: 0.21.5\n       postcss: 8.5.3\n@@ -8548,10 +8581,10 @@ snapshots:\n     optionalDependencies:\n       '@types/node': 20.14.13\n       fsevents: 2.3.3\n-      lightningcss: 1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm)\n+      lightningcss: 1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm)\n       terser: 5.31.6\n \n-  vite@6.0.0(@types/node@20.14.13)(jiti@2.4.2)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)(tsx@4.19.1)(yaml@2.6.0):\n+  vite@6.0.0(@types/node@20.14.13)(jiti@2.4.2)(lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)(tsx@4.19.1)(yaml@2.6.0):\n     dependencies:\n       esbuild: 0.24.0\n       postcss: 8.5.3\n@@ -8560,12 +8593,12 @@ snapshots:\n       '@types/node': 20.14.13\n       fsevents: 2.3.3\n       jiti: 2.4.2\n-      lightningcss: 1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm)\n+      lightningcss: 1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm)\n       terser: 5.31.6\n       tsx: 4.19.1\n       yaml: 2.6.0\n \n-  vitest@2.0.5(@types/node@20.14.13)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6):\n+  vitest@2.0.5(@types/node@20.14.13)(lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6):\n     dependencies:\n       '@ampproject/remapping': 2.3.0\n       '@vitest/expect': 2.0.5\n@@ -8583,8 +8616,8 @@ snapshots:\n       tinybench: 2.9.0\n       tinypool: 1.0.0\n       tinyrainbow: 1.2.0\n-      vite: 5.4.0(@types/node@20.14.13)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)\n-      vite-node: 2.0.5(@types/node@20.14.13)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)\n+      vite: 5.4.0(@types/node@20.14.13)(lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)\n+      vite-node: 2.0.5(@types/node@20.14.13)(lightningcss@1.30.0(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)\n       why-is-node-running: 2.3.0\n     optionalDependencies:\n       '@types/node': 20.14.13\n\ndiff --git a/pnpm-workspace.yaml b/pnpm-workspace.yaml\nindex 98329b69e2f6..031b5252eae4 100644\n--- a/pnpm-workspace.yaml\n+++ b/pnpm-workspace.yaml\n@@ -9,11 +9,11 @@ catalog:\n   '@types/node': ^20.14.8\n   prettier: 3.5.0\n   vite: ^6.0.0\n-  lightningcss: 1.29.2\n-  lightningcss-darwin-arm64: 1.29.2\n-  lightningcss-darwin-x64: 1.29.2\n-  lightningcss-linux-arm64-gnu: 1.29.2\n-  lightningcss-linux-arm64-musl: 1.29.2\n-  lightningcss-linux-x64-gnu: 1.29.2\n-  lightningcss-linux-x64-musl: 1.29.2\n-  lightningcss-win32-x64-msvc: 1.29.2\n+  lightningcss: 1.30.0\n+  lightningcss-darwin-arm64: 1.30.0\n+  lightningcss-darwin-x64: 1.30.0\n+  lightningcss-linux-arm64-gnu: 1.30.0\n+  lightningcss-linux-arm64-musl: 1.30.0\n+  lightningcss-linux-x64-gnu: 1.30.0\n+  lightningcss-linux-x64-musl: 1.30.0\n+  lightningcss-win32-x64-msvc: 1.30.0\n"", ""test_patch"": ""diff --git a/integrations/vite/css-modules.test.ts b/integrations/vite/css-modules.test.ts\nindex 668281cb494e..88ffb66a7908 100644\n--- a/integrations/vite/css-modules.test.ts\n+++ b/integrations/vite/css-modules.test.ts\n@@ -14,7 +14,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n               \""tailwindcss\"": \""workspace:^\""\n             },\n             \""devDependencies\"": {\n-              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1.26.0\"",` : ''}\n+              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1\"",` : ''}\n               \""vite\"": \""^6\""\n             }\n           }\n\ndiff --git a/integrations/vite/index.test.ts b/integrations/vite/index.test.ts\nindex 4c64f220ea5d..04885d839ad5 100644\n--- a/integrations/vite/index.test.ts\n+++ b/integrations/vite/index.test.ts\n@@ -33,7 +33,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n               \""tailwindcss\"": \""workspace:^\""\n             },\n             \""devDependencies\"": {\n-              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1.26.0\"",` : ''}\n+              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1\"",` : ''}\n               \""vite\"": \""^6\""\n             }\n           }\n@@ -110,7 +110,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n               \""tailwindcss\"": \""workspace:^\""\n             },\n             \""devDependencies\"": {\n-              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1.26.0\"",` : ''}\n+              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1\"",` : ''}\n               \""vite\"": \""^6\""\n             }\n           }\n@@ -311,7 +311,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n               \""tailwindcss\"": \""workspace:^\""\n             },\n             \""devDependencies\"": {\n-              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1.26.0\"",` : ''}\n+              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1\"",` : ''}\n               \""vite\"": \""^6\""\n             }\n           }\n@@ -490,7 +490,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n               \""tailwindcss\"": \""workspace:^\""\n             },\n             \""devDependencies\"": {\n-              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1.26.0\"",` : ''}\n+              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1\"",` : ''}\n               \""vite\"": \""^6\""\n             }\n           }\n@@ -576,7 +576,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n               \""tailwindcss\"": \""workspace:^\""\n             },\n             \""devDependencies\"": {\n-              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1.26.0\"",` : ''}\n+              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1\"",` : ''}\n               \""vite\"": \""^6\""\n             }\n           }\n@@ -678,7 +678,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n               \""tailwindcss\"": \""workspace:^\""\n             },\n             \""devDependencies\"": {\n-              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1.26.0\"",` : ''}\n+              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1\"",` : ''}\n               \""vite\"": \""^6\""\n             }\n           }\n\ndiff --git a/integrations/vite/other-transforms.test.ts b/integrations/vite/other-transforms.test.ts\nindex b1cb5819c1a9..e92794b8052e 100644\n--- a/integrations/vite/other-transforms.test.ts\n+++ b/integrations/vite/other-transforms.test.ts\n@@ -13,7 +13,7 @@ function createSetup(transformer: 'postcss' | 'lightningcss') {\n             \""tailwindcss\"": \""workspace:^\""\n           },\n           \""devDependencies\"": {\n-            ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1.26.0\"",` : ''}\n+            ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1\"",` : ''}\n             \""vite\"": \""^6\""\n           }\n         }\n\ndiff --git a/integrations/vite/resolvers.test.ts b/integrations/vite/resolvers.test.ts\nindex 6072c37da51b..f8e389a7e696 100644\n--- a/integrations/vite/resolvers.test.ts\n+++ b/integrations/vite/resolvers.test.ts\n@@ -14,7 +14,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n               \""tailwindcss\"": \""workspace:^\""\n             },\n             \""devDependencies\"": {\n-              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1.26.0\"",` : ''}\n+              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1\"",` : ''}\n               \""vite\"": \""^5.3.5\""\n             }\n           }\n@@ -82,7 +82,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n               \""tailwindcss\"": \""workspace:^\""\n             },\n             \""devDependencies\"": {\n-              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1.26.0\"",` : ''}\n+              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1\"",` : ''}\n               \""vite\"": \""^5.3.5\""\n             }\n           }\n\ndiff --git a/integrations/vite/source-maps.test.ts b/integrations/vite/source-maps.test.ts\nindex 8857d62b9d27..22da3f140b14 100644\n--- a/integrations/vite/source-maps.test.ts\n+++ b/integrations/vite/source-maps.test.ts\n@@ -12,7 +12,7 @@ test(\n             \""tailwindcss\"": \""workspace:^\""\n           },\n           \""devDependencies\"": {\n-            \""lightningcss\"": \""^1.26.0\"",\n+            \""lightningcss\"": \""^1\"",\n             \""vite\"": \""^6\""\n           }\n         }\n\ndiff --git a/integrations/vite/url-rewriting.test.ts b/integrations/vite/url-rewriting.test.ts\nindex 4077df16dd8a..5425f4b62301 100644\n--- a/integrations/vite/url-rewriting.test.ts\n+++ b/integrations/vite/url-rewriting.test.ts\n@@ -15,7 +15,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n               \""tailwindcss\"": \""workspace:^\""\n             },\n             \""devDependencies\"": {\n-              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1.26.0\"",` : ''}\n+              ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1\"",` : ''}\n               \""@tailwindcss/vite\"": \""workspace:^\"",\n               \""vite\"": \""^6\""\n             }\n\ndiff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex 4eb7a59f0db6..93719f0837e5 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -5278,7 +5278,6 @@ describe('`color-mix(\u2026)` polyfill', () => {\n \n       .shadow-xl {\n         --tw-shadow: 0 6px 18px 4px var(--tw-shadow-color, #ff000040);\n-        box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n       }\n \n       @supports (color: color-mix(in lab, red, red)) {\n@@ -5287,6 +5286,10 @@ describe('`color-mix(\u2026)` polyfill', () => {\n         }\n       }\n \n+      .shadow-xl {\n+        box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n+      }\n+\n       @property --tw-shadow {\n         syntax: \""*\"";\n         inherits: false;\n\ndiff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex a159622fc79a..4c2a7799b3e7 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -11028,7 +11028,6 @@ test('bg', async () => {\n \n     .-bg-linear-45 {\n       --tw-gradient-position: calc(45deg * -1);\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11037,9 +11036,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .-bg-linear-45 {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .-bg-linear-45\\\\/oklab {\n       --tw-gradient-position: calc(45deg * -1);\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11048,9 +11050,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .-bg-linear-45\\\\/oklab {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-45 {\n       --tw-gradient-position: 45deg;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11059,9 +11064,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-45 {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-45\\\\/\\\\[in_hsl_longer_hue\\\\] {\n       --tw-gradient-position: 45deg;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11070,9 +11078,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-45\\\\/\\\\[in_hsl_longer_hue\\\\] {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-45\\\\/oklab {\n       --tw-gradient-position: 45deg;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11081,9 +11092,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-45\\\\/oklab {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-45\\\\/shorter {\n       --tw-gradient-position: 45deg;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11092,9 +11106,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-45\\\\/shorter {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-b {\n       --tw-gradient-position: to bottom;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11103,9 +11120,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-b {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-bl {\n       --tw-gradient-position: to bottom left;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11114,9 +11134,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-bl {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-br {\n       --tw-gradient-position: to bottom right;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11125,9 +11148,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-br {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-l {\n       --tw-gradient-position: to left;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11136,9 +11162,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-l {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-r {\n       --tw-gradient-position: to right;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11147,9 +11176,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-r {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-r\\\\/\\\\[in_hsl_longer_hue\\\\] {\n       --tw-gradient-position: to right;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11158,9 +11190,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-r\\\\/\\\\[in_hsl_longer_hue\\\\] {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-r\\\\/\\\\[longer\\\\] {\n       --tw-gradient-position: to right;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11169,9 +11204,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-r\\\\/\\\\[longer\\\\] {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-r\\\\/decreasing {\n       --tw-gradient-position: to right;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11180,9 +11218,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-r\\\\/decreasing {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-r\\\\/hsl {\n       --tw-gradient-position: to right;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11191,9 +11232,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-r\\\\/hsl {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-r\\\\/increasing {\n       --tw-gradient-position: to right;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11202,9 +11246,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-r\\\\/increasing {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-r\\\\/longer {\n       --tw-gradient-position: to right;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11213,9 +11260,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-r\\\\/longer {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-r\\\\/oklab {\n       --tw-gradient-position: to right;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11224,9 +11274,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-r\\\\/oklab {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-r\\\\/oklch {\n       --tw-gradient-position: to right;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11235,9 +11288,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-r\\\\/oklch {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-r\\\\/shorter {\n       --tw-gradient-position: to right;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11246,9 +11302,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-r\\\\/shorter {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-r\\\\/srgb {\n       --tw-gradient-position: to right;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11257,9 +11316,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-r\\\\/srgb {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-t {\n       --tw-gradient-position: to top;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11268,9 +11330,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-t {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-tl {\n       --tw-gradient-position: to top left;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11279,9 +11344,12 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-tl {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-tr {\n       --tw-gradient-position: to top right;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     @supports (background-image: linear-gradient(in lab, red, red)) {\n@@ -11290,6 +11358,10 @@ test('bg', async () => {\n       }\n     }\n \n+    .bg-linear-to-tr {\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .-bg-conic-45\\\\/oklab {\n       --tw-gradient-position: from calc(45deg * -1) in oklab;\n       background-image: conic-gradient(var(--tw-gradient-stops));\n@@ -11866,20 +11938,27 @@ test('from', async () => {\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n-    .from-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\], .from-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+    .from-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n       --tw-gradient-from: var(--my-color);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n+    .from-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+      --tw-gradient-from: var(--my-color);\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .from-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n         --tw-gradient-from: color-mix(in oklab, var(--my-color) 50%, transparent);\n       }\n     }\n \n+    .from-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .from-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n       --tw-gradient-from: var(--my-color);\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -11888,9 +11967,12 @@ test('from', async () => {\n       }\n     }\n \n+    .from-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .from-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n       --tw-gradient-from: var(--my-color);\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -11899,20 +11981,31 @@ test('from', async () => {\n       }\n     }\n \n-    .from-\\\\[var\\\\(--my-color\\\\)\\\\], .from-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+    .from-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n+    .from-\\\\[var\\\\(--my-color\\\\)\\\\] {\n       --tw-gradient-from: var(--my-color);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n+    .from-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+      --tw-gradient-from: var(--my-color);\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .from-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n         --tw-gradient-from: color-mix(in oklab, var(--my-color) 50%, transparent);\n       }\n     }\n \n+    .from-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .from-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n       --tw-gradient-from: var(--my-color);\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -11921,9 +12014,12 @@ test('from', async () => {\n       }\n     }\n \n+    .from-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .from-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n       --tw-gradient-from: var(--my-color);\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -11932,20 +12028,31 @@ test('from', async () => {\n       }\n     }\n \n-    .from-current, .from-current\\\\/50 {\n+    .from-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n+    .from-current {\n       --tw-gradient-from: currentcolor;\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n+    .from-current\\\\/50 {\n+      --tw-gradient-from: currentcolor;\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .from-current\\\\/50 {\n         --tw-gradient-from: color-mix(in oklab, currentcolor 50%, transparent);\n       }\n     }\n \n+    .from-current\\\\/50 {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .from-current\\\\/\\\\[0\\\\.5\\\\] {\n       --tw-gradient-from: currentcolor;\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -11954,9 +12061,12 @@ test('from', async () => {\n       }\n     }\n \n+    .from-current\\\\/\\\\[0\\\\.5\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .from-current\\\\/\\\\[50\\\\%\\\\] {\n       --tw-gradient-from: currentcolor;\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -11965,6 +12075,10 @@ test('from', async () => {\n       }\n     }\n \n+    .from-current\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .from-inherit {\n       --tw-gradient-from: inherit;\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n@@ -11977,7 +12091,6 @@ test('from', async () => {\n \n     .from-red-500\\\\/50 {\n       --tw-gradient-from: #ef444480;\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -11986,9 +12099,12 @@ test('from', async () => {\n       }\n     }\n \n+    .from-red-500\\\\/50 {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .from-red-500\\\\/\\\\[0\\\\.5\\\\] {\n       --tw-gradient-from: #ef444480;\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -11997,9 +12113,12 @@ test('from', async () => {\n       }\n     }\n \n+    .from-red-500\\\\/\\\\[0\\\\.5\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .from-red-500\\\\/\\\\[50\\\\%\\\\] {\n       --tw-gradient-from: #ef444480;\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -12008,6 +12127,10 @@ test('from', async () => {\n       }\n     }\n \n+    .from-red-500\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .from-transparent {\n       --tw-gradient-from: transparent;\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n@@ -12200,114 +12323,159 @@ test('via', async () => {\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n \n-    .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\], .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+    .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n       --tw-gradient-via: var(--my-color);\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n \n+    .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+      --tw-gradient-via: var(--my-color);\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n         --tw-gradient-via: color-mix(in oklab, var(--my-color) 50%, transparent);\n       }\n     }\n \n-    .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n-      --tw-gradient-via: var(--my-color);\n+    .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n \n+    .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n+      --tw-gradient-via: var(--my-color);\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n         --tw-gradient-via: color-mix(in oklab, var(--my-color) 50%, transparent);\n       }\n     }\n \n-    .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-via: var(--my-color);\n+    .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n \n+    .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-via: var(--my-color);\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n         --tw-gradient-via: color-mix(in oklab, var(--my-color) 50%, transparent);\n       }\n     }\n \n-    .via-\\\\[var\\\\(--my-color\\\\)\\\\], .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+    .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n+      --tw-gradient-stops: var(--tw-gradient-via-stops);\n+    }\n+\n+    .via-\\\\[var\\\\(--my-color\\\\)\\\\] {\n       --tw-gradient-via: var(--my-color);\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n \n+    .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+      --tw-gradient-via: var(--my-color);\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n         --tw-gradient-via: color-mix(in oklab, var(--my-color) 50%, transparent);\n       }\n     }\n \n-    .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n-      --tw-gradient-via: var(--my-color);\n+    .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n \n+    .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n+      --tw-gradient-via: var(--my-color);\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n         --tw-gradient-via: color-mix(in oklab, var(--my-color) 50%, transparent);\n       }\n     }\n \n-    .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-via: var(--my-color);\n+    .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n \n+    .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-via: var(--my-color);\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n         --tw-gradient-via: color-mix(in oklab, var(--my-color) 50%, transparent);\n       }\n     }\n \n-    .via-current, .via-current\\\\/50 {\n+    .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n+      --tw-gradient-stops: var(--tw-gradient-via-stops);\n+    }\n+\n+    .via-current {\n       --tw-gradient-via: currentcolor;\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n \n+    .via-current\\\\/50 {\n+      --tw-gradient-via: currentcolor;\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .via-current\\\\/50 {\n         --tw-gradient-via: color-mix(in oklab, currentcolor 50%, transparent);\n       }\n     }\n \n-    .via-current\\\\/\\\\[0\\\\.5\\\\] {\n-      --tw-gradient-via: currentcolor;\n+    .via-current\\\\/50 {\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n \n+    .via-current\\\\/\\\\[0\\\\.5\\\\] {\n+      --tw-gradient-via: currentcolor;\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .via-current\\\\/\\\\[0\\\\.5\\\\] {\n         --tw-gradient-via: color-mix(in oklab, currentcolor 50%, transparent);\n       }\n     }\n \n-    .via-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-via: currentcolor;\n+    .via-current\\\\/\\\\[0\\\\.5\\\\] {\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n \n+    .via-current\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-via: currentcolor;\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .via-current\\\\/\\\\[50\\\\%\\\\] {\n         --tw-gradient-via: color-mix(in oklab, currentcolor 50%, transparent);\n       }\n     }\n \n+    .via-current\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n+      --tw-gradient-stops: var(--tw-gradient-via-stops);\n+    }\n+\n     .via-inherit {\n       --tw-gradient-via: inherit;\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n@@ -12322,8 +12490,6 @@ test('via', async () => {\n \n     .via-red-500\\\\/50 {\n       --tw-gradient-via: #ef444480;\n-      --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n-      --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -12332,30 +12498,41 @@ test('via', async () => {\n       }\n     }\n \n-    .via-red-500\\\\/\\\\[0\\\\.5\\\\] {\n-      --tw-gradient-via: #ef444480;\n+    .via-red-500\\\\/50 {\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n \n+    .via-red-500\\\\/\\\\[0\\\\.5\\\\] {\n+      --tw-gradient-via: #ef444480;\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .via-red-500\\\\/\\\\[0\\\\.5\\\\] {\n         --tw-gradient-via: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n       }\n     }\n \n-    .via-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-via: #ef444480;\n+    .via-red-500\\\\/\\\\[0\\\\.5\\\\] {\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n \n+    .via-red-500\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-via: #ef444480;\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .via-red-500\\\\/\\\\[50\\\\%\\\\] {\n         --tw-gradient-via: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n       }\n     }\n \n+    .via-red-500\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n+      --tw-gradient-stops: var(--tw-gradient-via-stops);\n+    }\n+\n     .via-transparent {\n       --tw-gradient-via: transparent;\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n@@ -12545,20 +12722,27 @@ test('to', async () => {\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n-    .to-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\], .to-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+    .to-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n       --tw-gradient-to: var(--my-color);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n+    .to-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+      --tw-gradient-to: var(--my-color);\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .to-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n         --tw-gradient-to: color-mix(in oklab, var(--my-color) 50%, transparent);\n       }\n     }\n \n+    .to-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .to-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n       --tw-gradient-to: var(--my-color);\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -12567,9 +12751,12 @@ test('to', async () => {\n       }\n     }\n \n+    .to-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .to-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n       --tw-gradient-to: var(--my-color);\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -12578,20 +12765,31 @@ test('to', async () => {\n       }\n     }\n \n-    .to-\\\\[var\\\\(--my-color\\\\)\\\\], .to-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+    .to-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n+    .to-\\\\[var\\\\(--my-color\\\\)\\\\] {\n       --tw-gradient-to: var(--my-color);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n+    .to-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+      --tw-gradient-to: var(--my-color);\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .to-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n         --tw-gradient-to: color-mix(in oklab, var(--my-color) 50%, transparent);\n       }\n     }\n \n+    .to-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .to-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n       --tw-gradient-to: var(--my-color);\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -12600,9 +12798,12 @@ test('to', async () => {\n       }\n     }\n \n+    .to-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .to-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n       --tw-gradient-to: var(--my-color);\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -12611,20 +12812,31 @@ test('to', async () => {\n       }\n     }\n \n-    .to-current, .to-current\\\\/50 {\n+    .to-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n+    .to-current {\n       --tw-gradient-to: currentcolor;\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n+    .to-current\\\\/50 {\n+      --tw-gradient-to: currentcolor;\n+    }\n+\n     @supports (color: color-mix(in lab, red, red)) {\n       .to-current\\\\/50 {\n         --tw-gradient-to: color-mix(in oklab, currentcolor 50%, transparent);\n       }\n     }\n \n+    .to-current\\\\/50 {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .to-current\\\\/\\\\[0\\\\.5\\\\] {\n       --tw-gradient-to: currentcolor;\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -12633,9 +12845,12 @@ test('to', async () => {\n       }\n     }\n \n+    .to-current\\\\/\\\\[0\\\\.5\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .to-current\\\\/\\\\[50\\\\%\\\\] {\n       --tw-gradient-to: currentcolor;\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -12644,6 +12859,10 @@ test('to', async () => {\n       }\n     }\n \n+    .to-current\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .to-inherit {\n       --tw-gradient-to: inherit;\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n@@ -12656,7 +12875,6 @@ test('to', async () => {\n \n     .to-red-500\\\\/50 {\n       --tw-gradient-to: #ef444480;\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -12665,9 +12883,12 @@ test('to', async () => {\n       }\n     }\n \n+    .to-red-500\\\\/50 {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .to-red-500\\\\/\\\\[0\\\\.5\\\\] {\n       --tw-gradient-to: #ef444480;\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -12676,9 +12897,12 @@ test('to', async () => {\n       }\n     }\n \n+    .to-red-500\\\\/\\\\[0\\\\.5\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .to-red-500\\\\/\\\\[50\\\\%\\\\] {\n       --tw-gradient-to: #ef444480;\n-      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -12687,6 +12911,10 @@ test('to', async () => {\n       }\n     }\n \n+    .to-red-500\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n+    }\n+\n     .to-transparent {\n       --tw-gradient-to: transparent;\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n@@ -21099,7 +21327,6 @@ test('filter', async () => {\n \n     .drop-shadow-red-500 {\n       --tw-drop-shadow-color: #ef4444;\n-      --tw-drop-shadow: var(--tw-drop-shadow-size);\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -21108,9 +21335,12 @@ test('filter', async () => {\n       }\n     }\n \n+    .drop-shadow-red-500 {\n+      --tw-drop-shadow: var(--tw-drop-shadow-size);\n+    }\n+\n     .drop-shadow-red-500\\\\/50 {\n       --tw-drop-shadow-color: #ef444480;\n-      --tw-drop-shadow: var(--tw-drop-shadow-size);\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -21119,6 +21349,10 @@ test('filter', async () => {\n       }\n     }\n \n+    .drop-shadow-red-500\\\\/50 {\n+      --tw-drop-shadow: var(--tw-drop-shadow-size);\n+    }\n+\n     .grayscale {\n       --tw-grayscale: grayscale(100%);\n       filter: var(--tw-blur, ) var(--tw-brightness, ) var(--tw-contrast, ) var(--tw-grayscale, ) var(--tw-hue-rotate, ) var(--tw-invert, ) var(--tw-saturate, ) var(--tw-sepia, ) var(--tw-drop-shadow, );\n@@ -23838,7 +24072,6 @@ test('shadow', async () => {\n     .shadow-\\\\[12px_12px_var\\\\(--value\\\\)\\\\]\\\\/25 {\n       --tw-shadow-alpha: 25%;\n       --tw-shadow: 12px 12px var(--tw-shadow-color, var(--value));\n-      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n     }\n \n     @supports (color: lab(from red l a b)) {\n@@ -23847,10 +24080,13 @@ test('shadow', async () => {\n       }\n     }\n \n+    .shadow-\\\\[12px_12px_var\\\\(--value\\\\)\\\\]\\\\/25 {\n+      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n+    }\n+\n     .shadow-\\\\[10px_10px\\\\]\\\\/25 {\n       --tw-shadow-alpha: 25%;\n       --tw-shadow: 10px 10px var(--tw-shadow-color, currentcolor);\n-      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -23859,6 +24095,10 @@ test('shadow', async () => {\n       }\n     }\n \n+    .shadow-\\\\[10px_10px\\\\]\\\\/25 {\n+      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n+    }\n+\n     .shadow-\\\\[12px_12px_\\\\#0088cc\\\\]\\\\/25 {\n       --tw-shadow-alpha: 25%;\n       --tw-shadow: 12px 12px var(--tw-shadow-color, oklab(59.9824% -.067 -.124 / .25));\n@@ -24304,7 +24544,6 @@ test('inset-shadow', async () => {\n     .inset-shadow-\\\\[12px_12px_\\\\#0088cc\\\\,12px_12px_var\\\\(--value\\\\,\\\\#0088cc\\\\)\\\\]\\\\/25 {\n       --tw-inset-shadow-alpha: 25%;\n       --tw-inset-shadow: inset 12px 12px var(--tw-inset-shadow-color, #08c), inset 12px 12px var(--tw-inset-shadow-color, var(--value, #08c));\n-      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n     }\n \n     @supports (color: lab(from red l a b)) {\n@@ -24313,10 +24552,13 @@ test('inset-shadow', async () => {\n       }\n     }\n \n+    .inset-shadow-\\\\[12px_12px_\\\\#0088cc\\\\,12px_12px_var\\\\(--value\\\\,\\\\#0088cc\\\\)\\\\]\\\\/25 {\n+      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n+    }\n+\n     .inset-shadow-\\\\[12px_12px_var\\\\(--value\\\\)\\\\]\\\\/25 {\n       --tw-inset-shadow-alpha: 25%;\n       --tw-inset-shadow: inset 12px 12px var(--tw-inset-shadow-color, var(--value));\n-      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n     }\n \n     @supports (color: lab(from red l a b)) {\n@@ -24325,10 +24567,13 @@ test('inset-shadow', async () => {\n       }\n     }\n \n+    .inset-shadow-\\\\[12px_12px_var\\\\(--value\\\\)\\\\]\\\\/25 {\n+      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n+    }\n+\n     .inset-shadow-\\\\[10px_10px\\\\]\\\\/25 {\n       --tw-inset-shadow-alpha: 25%;\n       --tw-inset-shadow: inset 10px 10px var(--tw-inset-shadow-color, currentcolor);\n-      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n     }\n \n     @supports (color: color-mix(in lab, red, red)) {\n@@ -24337,6 +24582,10 @@ test('inset-shadow', async () => {\n       }\n     }\n \n+    .inset-shadow-\\\\[10px_10px\\\\]\\\\/25 {\n+      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n+    }\n+\n     .inset-shadow-\\\\[12px_12px_\\\\#0088cc\\\\]\\\\/25 {\n       --tw-inset-shadow-alpha: 25%;\n       --tw-inset-shadow: inset 12px 12px var(--tw-inset-shadow-color, oklab(59.9824% -.067 -.124 / .25));\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17929"", ""pr_id"": 17929, ""issue_id"": 15806, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Can't build on Linux ARM -> cannot find module '@tailwindcss/oxide-linux-arm64-gnu'\n**What version of Tailwind CSS are you using?**\n\n4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 6\n\n**What version of Node.js are you using?**\n\n22.12.0\n\n**What browser are you using?**\n\nOccurs in CLI\n\n**What operating system are you using?**\n\nUbuntu Linux on arm64\n\n**Reproduction URL**\n\n/\n\n**Describe your issue**\n\nWhen running `tsc && vite build` the build fails and gives the following error:\n\n```\nerror during build:\n[vite:css] Failed to load PostCSS config (searchPath: [...]): [Error] Loading PostCSS Plugin failed: Cannot find module '@tailwindcss/oxide-linux-arm64-gnu'\n\n```"", ""issue_word_count"": 112, ""test_files_count"": 1, ""non_test_files_count"": 4, ""pr_changed_files"": [""crates/node/package.json"", ""crates/node/scripts/install.js"", ""integrations/oxide/postinstall.test.ts"", ""integrations/utils.ts"", ""pnpm-lock.yaml""], ""pr_changed_test_files"": [""integrations/oxide/postinstall.test.ts""], ""base_commit"": ""179e5ddd7cb416e80ba2f0fd551ef2dd90e87fef"", ""head_commit"": ""f889eb992ab7430f61b902933a1a2e8ce72266eb"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17929"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17929"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-09T12:55:02.000Z"", ""patch"": ""diff --git a/crates/node/package.json b/crates/node/package.json\nindex 71f126010f81..a3f71a0b9d4e 100644\n--- a/crates/node/package.json\n+++ b/crates/node/package.json\n@@ -32,6 +32,10 @@\n     }\n   },\n   \""license\"": \""MIT\"",\n+  \""dependencies\"": {\n+    \""tar\"": \""^7.4.3\"",\n+    \""detect-libc\"": \""^2.0.4\""\n+  },\n   \""devDependencies\"": {\n     \""@napi-rs/cli\"": \""^3.0.0-alpha.78\"",\n     \""@napi-rs/wasm-runtime\"": \""^0.2.9\"",\n@@ -42,7 +46,8 @@\n   },\n   \""files\"": [\n     \""index.js\"",\n-    \""index.d.ts\""\n+    \""index.d.ts\"",\n+    \""scripts/install.js\""\n   ],\n   \""publishConfig\"": {\n     \""provenance\"": true,\n@@ -57,7 +62,8 @@\n     \""postbuild:wasm\"": \""node ./scripts/move-artifacts.mjs\"",\n     \""dev\"": \""cargo watch --quiet --shell 'npm run build'\"",\n     \""build:debug\"": \""napi build --platform --no-const-enum\"",\n-    \""version\"": \""napi version\""\n+    \""version\"": \""napi version\"",\n+    \""postinstall\"": \""node ./scripts/install.js\""\n   },\n   \""optionalDependencies\"": {\n     \""@tailwindcss/oxide-android-arm64\"": \""workspace:*\"",\n\ndiff --git a/crates/node/scripts/install.js b/crates/node/scripts/install.js\nnew file mode 100644\nindex 000000000000..f9cefe01c7c9\n--- /dev/null\n+++ b/crates/node/scripts/install.js\n@@ -0,0 +1,143 @@\n+#!/usr/bin/env node\n+\n+/**\n+ * @tailwindcss/oxide postinstall script\n+ *\n+ * This script ensures that the correct binary for the current platform and\n+ * architecture is downloaded and available.\n+ */\n+\n+const fs = require('fs')\n+const path = require('path')\n+const https = require('https')\n+const { extract } = require('tar')\n+const packageJson = require('../package.json')\n+const detectLibc = require('detect-libc')\n+\n+const version = packageJson.version\n+\n+function getPlatformPackageName() {\n+  let platform = process.platform\n+  let arch = process.arch\n+\n+  let libc = ''\n+  if (platform === 'linux') {\n+    libc = detectLibc.isNonGlibcLinuxSync() ? 'musl' : 'gnu'\n+  }\n+\n+  // Map to our package naming conventions\n+  switch (platform) {\n+    case 'darwin':\n+      return arch === 'arm64' ? '@tailwindcss/oxide-darwin-arm64' : '@tailwindcss/oxide-darwin-x64'\n+    case 'win32':\n+      if (arch === 'arm64') return '@tailwindcss/oxide-win32-arm64-msvc'\n+      if (arch === 'ia32') return '@tailwindcss/oxide-win32-ia32-msvc'\n+      return '@tailwindcss/oxide-win32-x64-msvc'\n+    case 'linux':\n+      if (arch === 'x64') {\n+        return libc === 'musl'\n+          ? '@tailwindcss/oxide-linux-x64-musl'\n+          : '@tailwindcss/oxide-linux-x64-gnu'\n+      } else if (arch === 'arm64') {\n+        return libc === 'musl'\n+          ? '@tailwindcss/oxide-linux-arm64-musl'\n+          : '@tailwindcss/oxide-linux-arm64-gnu'\n+      } else if (arch === 'arm') {\n+        return '@tailwindcss/oxide-linux-arm-gnueabihf'\n+      }\n+      break\n+    case 'freebsd':\n+      return '@tailwindcss/oxide-freebsd-x64'\n+    case 'android':\n+      return '@tailwindcss/oxide-android-arm64'\n+    default:\n+      return '@tailwindcss/oxide-wasm32-wasi'\n+  }\n+}\n+\n+function isPackageAvailable(packageName) {\n+  try {\n+    require.resolve(packageName)\n+    return true\n+  } catch (e) {\n+    return false\n+  }\n+}\n+\n+// Extract all files from a tarball to a destination directory\n+async function extractTarball(tarballStream, destDir) {\n+  if (!fs.existsSync(destDir)) {\n+    fs.mkdirSync(destDir, { recursive: true })\n+  }\n+\n+  return new Promise((resolve, reject) => {\n+    tarballStream\n+      .pipe(extract({ cwd: destDir, strip: 1 }))\n+      .on('error', (err) => reject(err))\n+      .on('end', () => resolve())\n+  })\n+}\n+\n+async function downloadAndExtractBinary(packageName) {\n+  let tarballUrl = `https://registry.npmjs.org/${packageName}/-/${packageName.replace('@tailwindcss/', '')}-${version}.tgz`\n+  console.log(`Downloading ${tarballUrl}...`)\n+\n+  return new Promise((resolve) => {\n+    https\n+      .get(tarballUrl, (response) => {\n+        if (response.statusCode === 302 || response.statusCode === 301) {\n+          // Handle redirects\n+          https.get(response.headers.location, handleResponse).on('error', (err) => {\n+            console.error('Download error:', err)\n+            resolve()\n+          })\n+          return\n+        }\n+\n+        handleResponse(response)\n+\n+        async function handleResponse(response) {\n+          try {\n+            if (response.statusCode !== 200) {\n+              throw new Error(`Download failed with status code: ${response.statusCode}`)\n+            }\n+\n+            await extractTarball(\n+              response,\n+              path.join(__dirname, '..', 'node_modules', ...packageName.split('/')),\n+            )\n+            console.log(`Successfully downloaded and installed ${packageName}`)\n+          } catch (error) {\n+            console.error('Error during extraction:', error)\n+            resolve()\n+          } finally {\n+            resolve()\n+          }\n+        }\n+      })\n+      .on('error', (err) => {\n+        console.error('Download error:', err)\n+        resolve()\n+      })\n+  })\n+}\n+\n+async function main() {\n+  // Don't run this script in the package source\n+  try {\n+    if (fs.existsSync(path.join(__dirname, '..', 'build.rs'))) {\n+      return\n+    }\n+\n+    let packageName = getPlatformPackageName()\n+    if (!packageName) return\n+    if (isPackageAvailable(packageName)) return\n+\n+    await downloadAndExtractBinary(packageName)\n+  } catch (error) {\n+    console.error(error)\n+    return\n+  }\n+}\n+\n+main()\n\ndiff --git a/integrations/utils.ts b/integrations/utils.ts\nindex 8affff3b4a83..cc1702918625 100644\n--- a/integrations/utils.ts\n+++ b/integrations/utils.ts\n@@ -122,7 +122,10 @@ export function test(\n               {\n                 cwd,\n                 ...childProcessOptions,\n-                env: childProcessOptions.env,\n+                env: {\n+                  ...process.env,\n+                  ...childProcessOptions.env,\n+                },\n               },\n               (error, stdout, stderr) => {\n                 if (error) {\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex 0b68a70eb09e..4251cc330121 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -87,6 +87,13 @@ importers:\n         version: 2.0.5(@types/node@20.14.13)(lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm))(terser@5.31.6)\n \n   crates/node:\n+    dependencies:\n+      detect-libc:\n+        specifier: ^2.0.4\n+        version: 2.0.4\n+      tar:\n+        specifier: ^7.4.3\n+        version: 7.4.3\n     optionalDependencies:\n       '@tailwindcss/oxide-android-arm64':\n         specifier: workspace:*\n@@ -1525,6 +1532,10 @@ packages:\n     resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}\n     engines: {node: '>=12'}\n \n+  '@isaacs/fs-minipass@4.0.1':\n+    resolution: {integrity: sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==}\n+    engines: {node: '>=18.0.0'}\n+\n   '@jridgewell/gen-mapping@0.3.5':\n     resolution: {integrity: sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==}\n     engines: {node: '>=6.0.0'}\n@@ -2068,7 +2079,6 @@ packages:\n   '@parcel/watcher-darwin-arm64@2.5.1':\n     resolution: {integrity: sha512-eAzPv5osDmZyBhou8PoF4i6RQXAfeKL9tjb3QzYuccXFMQU0ruIc/POh30ePnaOyD1UXdlKguHBmsTs53tVoPw==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [arm64]\n     os: [darwin]\n \n   '@parcel/watcher-darwin-x64@2.5.0':\n@@ -2080,7 +2090,6 @@ packages:\n   '@parcel/watcher-darwin-x64@2.5.1':\n     resolution: {integrity: sha512-1ZXDthrnNmwv10A0/3AJNZ9JGlzrF82i3gNQcWOzd7nJ8aj+ILyW1MTxVk35Db0u91oD5Nlk9MBiujMlwmeXZg==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [x64]\n     os: [darwin]\n \n   '@parcel/watcher-freebsd-x64@2.5.0':\n@@ -2128,7 +2137,6 @@ packages:\n   '@parcel/watcher-linux-arm64-glibc@2.5.1':\n     resolution: {integrity: sha512-LrGp+f02yU3BN9A+DGuY3v3bmnFUggAITBGriZHUREfNEzZh/GO06FF5u2kx8x+GBEUYfyTGamol4j3m9ANe8w==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [arm64]\n     os: [linux]\n \n   '@parcel/watcher-linux-arm64-musl@2.5.0':\n@@ -2140,7 +2148,6 @@ packages:\n   '@parcel/watcher-linux-arm64-musl@2.5.1':\n     resolution: {integrity: sha512-cFOjABi92pMYRXS7AcQv9/M1YuKRw8SZniCDw0ssQb/noPkRzA+HBDkwmyOJYp5wXcsTrhxO0zq1U11cK9jsFg==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [arm64]\n     os: [linux]\n \n   '@parcel/watcher-linux-x64-glibc@2.5.0':\n@@ -2152,7 +2159,6 @@ packages:\n   '@parcel/watcher-linux-x64-glibc@2.5.1':\n     resolution: {integrity: sha512-GcESn8NZySmfwlTsIur+49yDqSny2IhPeZfXunQi48DMugKeZ7uy1FX83pO0X22sHntJ4Ub+9k34XQCX+oHt2A==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [x64]\n     os: [linux]\n \n   '@parcel/watcher-linux-x64-musl@2.5.0':\n@@ -2164,7 +2170,6 @@ packages:\n   '@parcel/watcher-linux-x64-musl@2.5.1':\n     resolution: {integrity: sha512-n0E2EQbatQ3bXhcH2D1XIAANAcTZkQICBPVaxMeaCVBtOpBZpWJuf7LwyWPSBDITb7In8mqQgJ7gH8CILCURXg==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [x64]\n     os: [linux]\n \n   '@parcel/watcher-wasm@2.5.0':\n@@ -2206,7 +2211,6 @@ packages:\n   '@parcel/watcher-win32-x64@2.5.1':\n     resolution: {integrity: sha512-9lHBdJITeNR++EvSQVUcaZoWupyHfXe1jZvGZ06O/5MflPcuPLtEphScIBL+AiCWBO46tDSHzWyD0uDmmZqsgA==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [x64]\n     os: [win32]\n \n   '@parcel/watcher@2.5.0':\n@@ -2621,7 +2625,6 @@ packages:\n \n   bun@1.2.11:\n     resolution: {integrity: sha512-9brVfsp6/TYVsE3lCl1MUxoyKhvljqyL1MNPErgwsOaS9g4Gzi2nY+W5WtRAXGzLrgz5jzsoGHHwyH/rTeRCIg==}\n-    cpu: [arm64, x64, aarch64]\n     os: [darwin, linux, win32]\n     hasBin: true\n \n@@ -2677,6 +2680,10 @@ packages:\n     resolution: {integrity: sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==}\n     engines: {node: '>= 14.16.0'}\n \n+  chownr@3.0.0:\n+    resolution: {integrity: sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==}\n+    engines: {node: '>=18'}\n+\n   citty@0.1.6:\n     resolution: {integrity: sha512-tskPPKEs8D2KPafUypv2gxwJP8h/OaJmC82QQGGDQcHvXX43xF2VDACcJVmZ0EuSxkpO9Kc4MlrA3q0+FG58AQ==}\n \n@@ -2833,8 +2840,8 @@ packages:\n     engines: {node: '>=0.10'}\n     hasBin: true\n \n-  detect-libc@2.0.3:\n-    resolution: {integrity: sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==}\n+  detect-libc@2.0.4:\n+    resolution: {integrity: sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==}\n     engines: {node: '>=8'}\n \n   didyoumean@1.2.2:\n@@ -3480,13 +3487,11 @@ packages:\n   lightningcss-darwin-arm64@1.29.2:\n     resolution: {integrity: sha512-cK/eMabSViKn/PG8U/a7aCorpeKLMlK0bQeNHmdb7qUnBkNPnL+oV5DjJUo0kqWsJUapZsM4jCfYItbqBDvlcA==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [arm64]\n     os: [darwin]\n \n   lightningcss-darwin-x64@1.29.2:\n     resolution: {integrity: sha512-j5qYxamyQw4kDXX5hnnCKMf3mLlHvG44f24Qyi2965/Ycz829MYqjrVg2H8BidybHBp9kom4D7DR5VqCKDXS0w==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [x64]\n     os: [darwin]\n \n   lightningcss-freebsd-x64@1.29.2:\n@@ -3504,25 +3509,21 @@ packages:\n   lightningcss-linux-arm64-gnu@1.29.2:\n     resolution: {integrity: sha512-KKCpOlmhdjvUTX/mBuaKemp0oeDIBBLFiU5Fnqxh1/DZ4JPZi4evEH7TKoSBFOSOV3J7iEmmBaw/8dpiUvRKlQ==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [arm64]\n     os: [linux]\n \n   lightningcss-linux-arm64-musl@1.29.2:\n     resolution: {integrity: sha512-Q64eM1bPlOOUgxFmoPUefqzY1yV3ctFPE6d/Vt7WzLW4rKTv7MyYNky+FWxRpLkNASTnKQUaiMJ87zNODIrrKQ==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [arm64]\n     os: [linux]\n \n   lightningcss-linux-x64-gnu@1.29.2:\n     resolution: {integrity: sha512-0v6idDCPG6epLXtBH/RPkHvYx74CVziHo6TMYga8O2EiQApnUPZsbR9nFNrg2cgBzk1AYqEd95TlrsL7nYABQg==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [x64]\n     os: [linux]\n \n   lightningcss-linux-x64-musl@1.29.2:\n     resolution: {integrity: sha512-rMpz2yawkgGT8RULc5S4WiZopVMOFWjiItBT7aSfDX4NQav6M44rhn5hjtkKzB+wMTRlLLqxkeYEtQ3dd9696w==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [x64]\n     os: [linux]\n \n   lightningcss-win32-arm64-msvc@1.29.2:\n@@ -3534,7 +3535,6 @@ packages:\n   lightningcss-win32-x64-msvc@1.29.2:\n     resolution: {integrity: sha512-EdIUW3B2vLuHmv7urfzMI/h2fmlnOQBk1xlsDxkN1tCWKjNFjfLhGxYk8C8mzpSfr+A6jFFIi8fU6LbQGsRWjA==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [x64]\n     os: [win32]\n \n   lightningcss@1.29.2:\n@@ -3635,6 +3635,15 @@ packages:\n     resolution: {integrity: sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==}\n     engines: {node: '>=16 || 14 >=14.17'}\n \n+  minizlib@3.0.2:\n+    resolution: {integrity: sha512-oG62iEk+CYt5Xj2YqI5Xi9xWUeZhDI8jjQmC5oThVH5JGCTgIjr7ciJDzC7MBzYd//WvR1OTmP5Q38Q8ShQtVA==}\n+    engines: {node: '>= 18'}\n+\n+  mkdirp@3.0.1:\n+    resolution: {integrity: sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==}\n+    engines: {node: '>=10'}\n+    hasBin: true\n+\n   mlly@1.7.3:\n     resolution: {integrity: sha512-xUsx5n/mN0uQf4V548PKQ+YShA4/IW0KI1dZhrNrPCLG+xizETbHTkOa1f8/xut9JRPp8kQuMnz0oqwkTiLo/A==}\n \n@@ -4231,6 +4240,10 @@ packages:\n     resolution: {integrity: sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==}\n     engines: {node: '>=6'}\n \n+  tar@7.4.3:\n+    resolution: {integrity: sha512-5S7Va8hKfV7W5U6g3aYxXmlPoZVAwUMy9AOKyF2fVuZa2UD3qZjg578OrLRt8PcNN1PleVaL/5/yYATNL0ICUw==}\n+    engines: {node: '>=18'}\n+\n   terser@5.31.6:\n     resolution: {integrity: sha512-PQ4DAriWzKj+qgehQ7LK5bQqCFNMmlhjR2PFFLuqGCpuCAauxemVBWwWOxo3UIwWQx8+Pr61Df++r76wDmkQBg==}\n     engines: {node: '>=10'}\n@@ -4614,6 +4627,10 @@ packages:\n   yallist@3.1.1:\n     resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}\n \n+  yallist@5.0.0:\n+    resolution: {integrity: sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==}\n+    engines: {node: '>=18'}\n+\n   yaml@2.6.0:\n     resolution: {integrity: sha512-a6ae//JvKDEra2kdi1qzCyrJW/WZCgFi8ydDV+eXExl95t+5R+ijnqHJbz9tmMh8FUjx3iv2fCQ4dclAQlO2UQ==}\n     engines: {node: '>= 14'}\n@@ -5307,6 +5324,10 @@ snapshots:\n       wrap-ansi: 8.1.0\n       wrap-ansi-cjs: wrap-ansi@7.0.0\n \n+  '@isaacs/fs-minipass@4.0.1':\n+    dependencies:\n+      minipass: 7.1.2\n+\n   '@jridgewell/gen-mapping@0.3.5':\n     dependencies:\n       '@jridgewell/set-array': 1.2.1\n@@ -6402,6 +6423,8 @@ snapshots:\n     dependencies:\n       readdirp: 4.1.1\n \n+  chownr@3.0.0: {}\n+\n   citty@0.1.6:\n     dependencies:\n       consola: 3.2.3\n@@ -6531,7 +6554,7 @@ snapshots:\n \n   detect-libc@1.0.3: {}\n \n-  detect-libc@2.0.3: {}\n+  detect-libc@2.0.4: {}\n \n   didyoumean@1.2.2: {}\n \n@@ -7490,7 +7513,7 @@ snapshots:\n \n   lightningcss@1.29.2(patch_hash=tzyxy3asfxcqc7ihrooumyi5fm):\n     dependencies:\n-      detect-libc: 2.0.3\n+      detect-libc: 2.0.4\n     optionalDependencies:\n       lightningcss-darwin-arm64: 1.29.2\n       lightningcss-darwin-x64: 1.29.2\n@@ -7596,6 +7619,12 @@ snapshots:\n \n   minipass@7.1.2: {}\n \n+  minizlib@3.0.2:\n+    dependencies:\n+      minipass: 7.1.2\n+\n+  mkdirp@3.0.1: {}\n+\n   mlly@1.7.3:\n     dependencies:\n       acorn: 8.14.0\n@@ -8038,7 +8067,7 @@ snapshots:\n   sharp@0.34.1:\n     dependencies:\n       color: 4.2.3\n-      detect-libc: 2.0.3\n+      detect-libc: 2.0.4\n       semver: 7.7.1\n     optionalDependencies:\n       '@img/sharp-darwin-arm64': 0.34.1\n@@ -8233,6 +8262,15 @@ snapshots:\n \n   tapable@2.2.1: {}\n \n+  tar@7.4.3:\n+    dependencies:\n+      '@isaacs/fs-minipass': 4.0.1\n+      chownr: 3.0.0\n+      minipass: 7.1.2\n+      minizlib: 3.0.2\n+      mkdirp: 3.0.1\n+      yallist: 5.0.0\n+\n   terser@5.31.6:\n     dependencies:\n       '@jridgewell/source-map': 0.3.6\n@@ -8623,6 +8661,8 @@ snapshots:\n \n   yallist@3.1.1: {}\n \n+  yallist@5.0.0: {}\n+\n   yaml@2.6.0: {}\n \n   yocto-queue@0.1.0: {}\n"", ""test_patch"": ""diff --git a/integrations/oxide/postinstall.test.ts b/integrations/oxide/postinstall.test.ts\nnew file mode 100644\nindex 000000000000..70683c82e525\n--- /dev/null\n+++ b/integrations/oxide/postinstall.test.ts\n@@ -0,0 +1,73 @@\n+import fs from 'node:fs/promises'\n+import path from 'node:path'\n+import { js, json, test } from '../utils'\n+\n+test(\n+  '@tailwindcss/oxide will fail when architecture-specific packages are missing',\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""dependencies\"": {\n+            \""@tailwindcss/oxide\"": \""workspace:^\""\n+          }\n+        }\n+      `,\n+      'test.js': js`\n+        try {\n+          let Scanner = require('@tailwindcss/oxide')\n+          console.log('SUCCESS: @tailwindcss/oxide loaded successfully', Scanner)\n+        } catch (error) {\n+          console.log('FAILURE: Failed to load @tailwindcss/oxide:', error.message)\n+        }\n+      `,\n+    },\n+  },\n+  async ({ exec, root, expect, fs }) => {\n+    await removePlatformSpecificExtensions(path.join(root, 'node_modules'))\n+\n+    // Get last published version\n+    let version = (await exec('npm show @tailwindcss/oxide version')).trim()\n+    // Ensure that we don't depend on a specific version number in the download\n+    // script in case we bump the version number in the repository and CI is run\n+    // before a release\n+    let packageJson = JSON.parse(await fs.read('node_modules/@tailwindcss/oxide/package.json'))\n+    packageJson.version = version\n+    await fs.write(\n+      'node_modules/@tailwindcss/oxide/package.json',\n+      JSON.stringify(packageJson, null, 2),\n+    )\n+\n+    let opts = {\n+      // Ensure that we don't include any node paths from the test runner\n+      env: { NODE_PATH: '' },\n+    }\n+\n+    expect(await exec('node test.js', opts)).toMatch(/FAILURE/)\n+\n+    // Now run the post-install script\n+    await exec('node node_modules/@tailwindcss/oxide/scripts/install.js', opts)\n+\n+    expect(await exec('node test.js', opts)).toMatch(/SUCCESS/)\n+  },\n+)\n+\n+async function removePlatformSpecificExtensions(directory: string) {\n+  let entries = await fs.readdir(directory, { withFileTypes: true })\n+\n+  for (let entry of entries) {\n+    let fullPath = path.join(directory, entry.name)\n+\n+    if (entry.name.startsWith('oxide-')) {\n+      if (entry.isSymbolicLink()) {\n+        await fs.unlink(fullPath)\n+      } else if (entry.isFile()) {\n+        await fs.unlink(fullPath)\n+      } else if (entry.isDirectory()) {\n+        await fs.rm(fullPath, { recursive: true, force: true })\n+      }\n+    } else if (entry.isDirectory()) {\n+      await removePlatformSpecificExtensions(fullPath)\n+    }\n+  }\n+}\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17925"", ""pr_id"": 17925, ""issue_id"": 17924, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""@apply referencing another @utility breaks @apply in a nested rule\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.1.5\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nhttps://play.tailwindcss.com/\n\n**What version of Node.js are you using?**\n\nNot relevant\n\n**What browser are you using?**\n\nEdge Latest Version\n\n**What operating system are you using?**\n\nMacOs\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/oBufuCc0yf\n\n**Describe your issue**\n\n@apply referencing another @utility breaks @apply in a nested rule. \nProblem is that :hover and :disabled inside `base-utility` stopped working when i referenced `base-utility` in a `@apply` of `parent-utility`.\n\nIt would be understandable for the styles of `base-utility` to not get applied completely if it were `@apply parent-utility` but the problem is that I'm using `base-utility` in the className and it should not change regardless of where `base-utility` is used.\n\n:hover and :disabled are simple pseudo selectors. Tried with @variant, also does not work for the same reason.\n\nWould not be a problem for me if @variant actually does work. If the @apply is NOT nested inside `base-utility`, it works fine. The part where its not working is only the @apply is inside a nested rule of `base-utility`."", ""issue_word_count"": 246, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/apply.ts"", ""packages/tailwindcss/src/index.test.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/index.test.ts""], ""base_commit"": ""179e5ddd7cb416e80ba2f0fd551ef2dd90e87fef"", ""head_commit"": ""5e004e744f0611fb8578d15cd2893ef2c44f03b9"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17925"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17925"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-08T16:26:07.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex be17ecc8e4b4..4437abaeb7aa 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -20,6 +20,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Fix incorrectly replacing `_` with ` ` in arbitrary modifier shorthand `bg-red-500/(--my_opacity)` ([#17889](https://github.com/tailwindlabs/tailwindcss/pull/17889))\n - Upgrade: Bump dependencies in parallel and make the upgrade faster ([#17898](https://github.com/tailwindlabs/tailwindcss/pull/17898))\n - Don't scan `.log` files for classes by default ([#17906](https://github.com/tailwindlabs/tailwindcss/pull/17906))\n+- Ensure that custom utilities applying other custom utilities don't swallow nested `@apply` rules ([#17925](https://github.com/tailwindlabs/tailwindcss/pull/17925))\n \n ## [4.1.5] - 2025-04-30\n \n\ndiff --git a/packages/tailwindcss/src/apply.ts b/packages/tailwindcss/src/apply.ts\nindex 676b4f2eee19..a9316d184fd8 100644\n--- a/packages/tailwindcss/src/apply.ts\n+++ b/packages/tailwindcss/src/apply.ts\n@@ -23,7 +23,7 @@ export function substituteAtApply(ast: AstNode[], designSystem: DesignSystem) {\n   let definitions = new DefaultMap(() => new Set<AstNode>())\n \n   // Collect all new `@utility` definitions and all `@apply` rules first\n-  walk([root], (node, { parent }) => {\n+  walk([root], (node, { parent, path }) => {\n     if (node.kind !== 'at-rule') return\n \n     // Do not allow `@apply` rules inside `@keyframes` rules.\n@@ -66,7 +66,12 @@ export function substituteAtApply(ast: AstNode[], designSystem: DesignSystem) {\n       parents.add(parent)\n \n       for (let dependency of resolveApplyDependencies(node, designSystem)) {\n-        dependencies.get(parent).add(dependency)\n+        // Mark every parent in the path as having a dependency to that utility.\n+        for (let parent of path) {\n+          if (parent === node) continue\n+          if (!parents.has(parent)) continue\n+          dependencies.get(parent).add(dependency)\n+        }\n       }\n     }\n   })\n@@ -151,11 +156,10 @@ export function substituteAtApply(ast: AstNode[], designSystem: DesignSystem) {\n   for (let parent of sorted) {\n     if (!('nodes' in parent)) continue\n \n-    for (let i = 0; i < parent.nodes.length; i++) {\n-      let node = parent.nodes[i]\n-      if (node.kind !== 'at-rule' || node.name !== '@apply') continue\n+    walk(parent.nodes, (child, { replaceWith }) => {\n+      if (child.kind !== 'at-rule' || child.name !== '@apply') return\n \n-      let candidates = node.params.split(/\\s+/g)\n+      let candidates = child.params.split(/\\s+/g)\n \n       // Replace the `@apply` rule with the actual utility classes\n       {\n@@ -181,10 +185,11 @@ export function substituteAtApply(ast: AstNode[], designSystem: DesignSystem) {\n           }\n         }\n \n-        parent.nodes.splice(i, 1, ...newNodes)\n+        replaceWith(newNodes)\n       }\n-    }\n+    })\n   }\n+\n   return features\n }\n \n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex 00e73a90b405..9c3fd47ed5c6 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -612,6 +612,84 @@ describe('@apply', () => {\n       }\""\n     `)\n   })\n+\n+  // https://github.com/tailwindlabs/tailwindcss/issues/17924\n+  it('should correctly apply nested usages of @apply when one @utility applies another', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @theme {\n+            --color-green-500: green;\n+            --color-red-500: red;\n+            --color-indigo-500: indigo;\n+          }\n+\n+          @tailwind utilities;\n+\n+          @utility test2 {\n+            @apply test;\n+          }\n+\n+          @utility test {\n+            @apply bg-green-500;\n+            &:hover {\n+              @apply bg-red-500;\n+            }\n+            &:disabled {\n+              @apply bg-indigo-500;\n+            }\n+          }\n+\n+          .foo {\n+            @apply test2;\n+          }\n+        `,\n+        ['foo', 'test', 'test2'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"":root, :host {\n+        --color-green-500: green;\n+        --color-red-500: red;\n+        --color-indigo-500: indigo;\n+      }\n+\n+      .test {\n+        background-color: var(--color-green-500);\n+      }\n+\n+      .test:hover {\n+        background-color: var(--color-red-500);\n+      }\n+\n+      .test:disabled {\n+        background-color: var(--color-indigo-500);\n+      }\n+\n+      .test2 {\n+        background-color: var(--color-green-500);\n+      }\n+\n+      .test2:hover {\n+        background-color: var(--color-red-500);\n+      }\n+\n+      .test2:disabled {\n+        background-color: var(--color-indigo-500);\n+      }\n+\n+      .foo {\n+        background-color: var(--color-green-500);\n+      }\n+\n+      .foo:hover {\n+        background-color: var(--color-red-500);\n+      }\n+\n+      .foo:disabled {\n+        background-color: var(--color-indigo-500);\n+      }\""\n+    `)\n+  })\n })\n \n describe('arbitrary variants', () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17889"", ""pr_id"": 17889, ""issue_id"": 17888, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Invalid variable shorthand modifier replacement in modifiers\nInvalid variable shorthand modifier replacement in modifiers (`_` -> ` `)\n\n<details><summary> Technical Configuration</summary>\n<br>\n<table>\n    <tr></tr>\n    <tr>\n        <th align=\""left\"">What version of Tailwind CSS are you using?</th>\n    </tr>\n    <tr>\n        <td>v4.1.5</td>\n    </tr>\n    <tr>\n        <th align=\""left\"">What build tool (or framework if it abstracts the build tool) are you using?</th>\n    </tr>\n    <tr>\n        <td>Tailwind Play</td>\n    </tr>\n    <tr>\n        <th align=\""left\"">What version of Node.js are you using?</th>\n    </tr>\n    <tr>\n        <td>N/A</td>\n    </tr>\n    <tr>\n        <th align=\""left\"">What browser are you using?</th>\n    </tr>\n    <tr>\n        <th align=\""left\"">Chrome</td>\n    </tr>\n    <tr>\n        <th align=\""left\"">What operating system are you using?</th>\n    </tr>\n    <tr>\n        <td>macOS</td>\n    </tr>\n</table>\n\n</details>\n\n---\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/YvIekuzVRd\n\n**Description:**\n\nTailwind CSS v4 handles underscores inside the arbitrary variable shorthand syntax `(...)` inconsistently depending on whether it's used as a utility's value or as a modifier.\n\n**Expected Behavior:**\n\nWhen using the `(...)` shorthand for a CSS variable containing underscores, such as `(--my_variable)`, the underscores should be consistently preserved and wrapped in `var()`, regardless of whether it's used directly as a utility value or as a modifier following a `/`. The expected CSS output should be `var(--my_variable)`.\n\n**Actual Behavior:**\n\n1.  **Utility Value:** When used directly as part of a utility (e.g., `p-(--x_x)`), the underscores are correctly preserved, resulting in `var(--x_x)`.\n2.  **Modifier Value:** When used as a modifier (e.g., `test/(--x_x)`), the underscores within the variable name are incorrectly replaced with spaces *before* being wrapped in `var()`, resulting in `var(--x x)`.\n\n**Possible Cause (Analysis):**\n\nThis seems related to the order of operations during parsing.\n*   For utilities `-(...)`, the variable context seems to be recognized *before* or *during* the call to the internal `decodeArbitraryValue` function, allowing its specific rule for preserving underscores within `var()` arguments or `--` names to take effect.\n*   For modifiers `/(...)`, the internal `parseModifier` function appears to call `decodeArbitraryValue` on the *raw* extracted content (`--x_x`) *first*, causing default underscore-to-space replacement. Only *after* this decoding step is the (now space-containing) result wrapped in `var()`.\n\nThis inconsistency makes the shorthand syntax unreliable when used within modifiers."", ""issue_word_count"": 367, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/candidate.test.ts"", ""packages/tailwindcss/src/candidate.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/candidate.test.ts""], ""base_commit"": ""5c5ae04db6d228a5882ae211e07cbb8c1bafc501"", ""head_commit"": ""ebc1da8310fce44692da0a0b0e460b457664224c"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17889"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17889"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-06T13:32:48.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex ef34a1a71862..4364d8059c23 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -16,6 +16,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure negative arbitrary `scale` values generate negative values ([#17831](https://github.com/tailwindlabs/tailwindcss/pull/17831))\n - Fix HAML extraction with embedded Ruby ([#17846](https://github.com/tailwindlabs/tailwindcss/pull/17846))\n - Don't scan files for utilities when using `@reference` ([#17836](https://github.com/tailwindlabs/tailwindcss/pull/17836))\n+- Fix incorrectly replacing `_` with ` ` in arbitrary modifier shorthand `bg-red-500/(--my_opacity)` ([#17889](https://github.com/tailwindlabs/tailwindcss/pull/17889))\n \n ## [4.1.5] - 2025-04-30\n \n\ndiff --git a/packages/tailwindcss/src/candidate.ts b/packages/tailwindcss/src/candidate.ts\nindex aff6d74dc116..5a5704989a30 100644\n--- a/packages/tailwindcss/src/candidate.ts\n+++ b/packages/tailwindcss/src/candidate.ts\n@@ -411,7 +411,10 @@ export function* parseCandidate(input: string, designSystem: DesignSystem): Iter\n \n     // An arbitrary value with `(\u2026)` should always start with `--` since it\n     // represents a CSS variable.\n-    if (value[0] !== '-' && value[1] !== '-') return\n+    if (value[0] !== '-' || value[1] !== '-') return\n+\n+    // Values can't contain `;` or `}` characters at the top-level.\n+    if (!isValidArbitrary(value)) return\n \n     roots = [[root, dataType === null ? `[var(${value})]` : `[${dataType}:var(${value})]`]]\n   }\n@@ -523,21 +526,24 @@ function parseModifier(modifier: string): CandidateModifier | null {\n   }\n \n   if (modifier[0] === '(' && modifier[modifier.length - 1] === ')') {\n-    let arbitraryValue = decodeArbitraryValue(modifier.slice(1, -1))\n+    // Drop the `(` and `)` characters\n+    modifier = modifier.slice(1, -1)\n+\n+    // A modifier with `(\u2026)` should always start with `--` since it\n+    // represents a CSS variable.\n+    if (modifier[0] !== '-' || modifier[1] !== '-') return null\n \n     // Values can't contain `;` or `}` characters at the top-level.\n-    if (!isValidArbitrary(arbitraryValue)) return null\n+    if (!isValidArbitrary(modifier)) return null\n \n-    // Empty arbitrary values are invalid. E.g.: `data-():`\n-    //                                                 ^^\n-    if (arbitraryValue.length === 0 || arbitraryValue.trim().length === 0) return null\n+    // Wrap the value in `var(\u2026)` to ensure that it is a valid CSS variable.\n+    modifier = `var(${modifier})`\n \n-    // Arbitrary values must start with `--` since it represents a CSS variable.\n-    if (arbitraryValue[0] !== '-' && arbitraryValue[1] !== '-') return null\n+    let arbitraryValue = decodeArbitraryValue(modifier)\n \n     return {\n       kind: 'arbitrary',\n-      value: `var(${arbitraryValue})`,\n+      value: arbitraryValue,\n     }\n   }\n \n@@ -679,7 +685,7 @@ export function parseVariant(variant: string, designSystem: DesignSystem): Varia\n             if (arbitraryValue.length === 0 || arbitraryValue.trim().length === 0) return null\n \n             // Arbitrary values must start with `--` since it represents a CSS variable.\n-            if (arbitraryValue[0] !== '-' && arbitraryValue[1] !== '-') return null\n+            if (arbitraryValue[0] !== '-' || arbitraryValue[1] !== '-') return null\n \n             return {\n               kind: 'functional',\n@@ -1030,7 +1036,7 @@ function recursivelyEscapeUnderscores(ast: ValueParser.ValueAstNode[]) {\n       case 'word': {\n         // Dashed idents and variables `var(--my-var)` and `--my-var` should not\n         // have underscores escaped\n-        if (node.value[0] !== '-' && node.value[1] !== '-') {\n+        if (node.value[0] !== '-' || node.value[1] !== '-') {\n           node.value = escapeUnderscore(node.value)\n         }\n         break\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/candidate.test.ts b/packages/tailwindcss/src/candidate.test.ts\nindex 3c54bef7a20d..4355071f2aac 100644\n--- a/packages/tailwindcss/src/candidate.test.ts\n+++ b/packages/tailwindcss/src/candidate.test.ts\n@@ -1087,6 +1087,7 @@ it('should parse a utility with an implicit variable as the modifier using the s\n   let utilities = new Utilities()\n   utilities.functional('bg', () => [])\n \n+  // Standard case (no underscores)\n   expect(run('bg-red-500/(--value)', { utilities })).toMatchInlineSnapshot(`\n     [\n       {\n@@ -1107,6 +1108,156 @@ it('should parse a utility with an implicit variable as the modifier using the s\n       },\n     ]\n   `)\n+\n+  // Should preserve underscores\n+  expect(run('bg-red-500/(--with_underscore)', { utilities })).toMatchInlineSnapshot(`\n+    [\n+      {\n+        \""important\"": false,\n+        \""kind\"": \""functional\"",\n+        \""modifier\"": {\n+          \""kind\"": \""arbitrary\"",\n+          \""value\"": \""var(--with_underscore)\"",\n+        },\n+        \""raw\"": \""bg-red-500/(--with_underscore)\"",\n+        \""root\"": \""bg\"",\n+        \""value\"": {\n+          \""fraction\"": null,\n+          \""kind\"": \""named\"",\n+          \""value\"": \""red-500\"",\n+        },\n+        \""variants\"": [],\n+      },\n+    ]\n+  `)\n+\n+  // Should remove underscores in fallback values\n+  expect(run('bg-red-500/(--with_underscore,fallback_value)', { utilities }))\n+    .toMatchInlineSnapshot(`\n+      [\n+        {\n+          \""important\"": false,\n+          \""kind\"": \""functional\"",\n+          \""modifier\"": {\n+            \""kind\"": \""arbitrary\"",\n+            \""value\"": \""var(--with_underscore,fallback value)\"",\n+          },\n+          \""raw\"": \""bg-red-500/(--with_underscore,fallback_value)\"",\n+          \""root\"": \""bg\"",\n+          \""value\"": {\n+            \""fraction\"": null,\n+            \""kind\"": \""named\"",\n+            \""value\"": \""red-500\"",\n+          },\n+          \""variants\"": [],\n+        },\n+      ]\n+    `)\n+\n+  // Should keep underscores in the CSS variable itself, but remove underscores\n+  // in fallback values\n+  expect(run('bg-(--a_b,c_d_var(--e_f,g_h))/(--i_j,k_l_var(--m_n,o_p))', { utilities }))\n+    .toMatchInlineSnapshot(`\n+    [\n+      {\n+        \""important\"": false,\n+        \""kind\"": \""functional\"",\n+        \""modifier\"": {\n+          \""kind\"": \""arbitrary\"",\n+          \""value\"": \""var(--i_j,k l var(--m_n,o p))\"",\n+        },\n+        \""raw\"": \""bg-(--a_b,c_d_var(--e_f,g_h))/(--i_j,k_l_var(--m_n,o_p))\"",\n+        \""root\"": \""bg\"",\n+        \""value\"": {\n+          \""dataType\"": null,\n+          \""kind\"": \""arbitrary\"",\n+          \""value\"": \""var(--a_b,c d var(--e_f,g h))\"",\n+        },\n+        \""variants\"": [],\n+      },\n+    ]\n+  `)\n+})\n+\n+it('should not parse an invalid arbitrary shorthand modifier', () => {\n+  let utilities = new Utilities()\n+  utilities.functional('bg', () => [])\n+\n+  // Completely empty\n+  expect(run('bg-red-500/()', { utilities })).toMatchInlineSnapshot(`[]`)\n+\n+  // Invalid due to leading spaces\n+  expect(run('bg-red-500/(_--)', { utilities })).toMatchInlineSnapshot(`[]`)\n+  expect(run('bg-red-500/(_--x)', { utilities })).toMatchInlineSnapshot(`[]`)\n+\n+  // Invalid due to leading spaces\n+  expect(run('bg-red-500/(_--)', { utilities })).toMatchInlineSnapshot(`[]`)\n+  expect(run('bg-red-500/(_--x)', { utilities })).toMatchInlineSnapshot(`[]`)\n+\n+  // Invalid due to top-level `;` or `}` characters\n+  expect(run('bg-red-500/(--x;--y)', { utilities })).toMatchInlineSnapshot(`[]`)\n+  expect(run('bg-red-500/(--x:{foo:bar})', { utilities })).toMatchInlineSnapshot(`[]`)\n+\n+  // Valid, but ensuring that we didn't make an off-by-one error\n+  expect(run('bg-red-500/(--x)', { utilities })).toMatchInlineSnapshot(`\n+    [\n+      {\n+        \""important\"": false,\n+        \""kind\"": \""functional\"",\n+        \""modifier\"": {\n+          \""kind\"": \""arbitrary\"",\n+          \""value\"": \""var(--x)\"",\n+        },\n+        \""raw\"": \""bg-red-500/(--x)\"",\n+        \""root\"": \""bg\"",\n+        \""value\"": {\n+          \""fraction\"": null,\n+          \""kind\"": \""named\"",\n+          \""value\"": \""red-500\"",\n+        },\n+        \""variants\"": [],\n+      },\n+    ]\n+  `)\n+})\n+\n+it('should not parse an invalid arbitrary shorthand value', () => {\n+  let utilities = new Utilities()\n+  utilities.functional('bg', () => [])\n+\n+  // Completely empty\n+  expect(run('bg-()', { utilities })).toMatchInlineSnapshot(`[]`)\n+\n+  // Invalid due to leading spaces\n+  expect(run('bg-(_--)', { utilities })).toMatchInlineSnapshot(`[]`)\n+  expect(run('bg-(_--x)', { utilities })).toMatchInlineSnapshot(`[]`)\n+\n+  // Invalid due to leading spaces\n+  expect(run('bg-(_--)', { utilities })).toMatchInlineSnapshot(`[]`)\n+  expect(run('bg-(_--x)', { utilities })).toMatchInlineSnapshot(`[]`)\n+\n+  // Invalid due to top-level `;` or `}` characters\n+  expect(run('bg-(--x;--y)', { utilities })).toMatchInlineSnapshot(`[]`)\n+  expect(run('bg-(--x:{foo:bar})', { utilities })).toMatchInlineSnapshot(`[]`)\n+\n+  // Valid, but ensuring that we didn't make an off-by-one error\n+  expect(run('bg-(--x)', { utilities })).toMatchInlineSnapshot(`\n+    [\n+      {\n+        \""important\"": false,\n+        \""kind\"": \""functional\"",\n+        \""modifier\"": null,\n+        \""raw\"": \""bg-(--x)\"",\n+        \""root\"": \""bg\"",\n+        \""value\"": {\n+          \""dataType\"": null,\n+          \""kind\"": \""arbitrary\"",\n+          \""value\"": \""var(--x)\"",\n+        },\n+        \""variants\"": [],\n+      },\n+    ]\n+  `)\n })\n \n it('should not parse a utility with an implicit invalid variable as the modifier using the shorthand', () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17846"", ""pr_id"": 17846, ""issue_id"": 17813, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Some classes are not generated in Ruby/HAML since upgrading to Tailwind 4\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\n4.1.4\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nStandalone CLI\n\n**What version of Node.js are you using?**\n\n20.19\n\n**What browser are you using?**\n\nN/A\n\n**What operating system are you using?**\n\nN/A\n\n**Reproduction URL**\n\nhttps://github.com/jeremybdk/tailwindhaml\n\n**Describe your issue**\n\nWe are using custom classes like \""w-[16px] h-[16px]\"" sometimes in ruby variable used in partials.\nBut it seems that they are not parsed correctly anymore since switching to Tailwind 4. We never had that issue on Tailwind 3.\n\nI've added a small sample of a haml file that in my opinion should be parsed correctly and as you can see in the output some of the used classes like \""w-[16px] h-[16px]\"" and \""w-[12px] h-[12px]\"" are not included in the output.css while w-[20px] h-[20px] are included in the output.css\n\nthank you\n"", ""issue_word_count"": 210, ""test_files_count"": 5, ""non_test_files_count"": 5, ""pr_changed_files"": [""CHANGELOG.md"", ""Cargo.lock"", ""crates/oxide/Cargo.toml"", ""crates/oxide/src/extractor/pre_processors/haml.rs"", ""crates/oxide/src/extractor/pre_processors/pre_processor.rs"", ""crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-1.haml"", ""crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-17051.haml"", ""crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-17813.haml"", ""crates/oxide/src/extractor/pre_processors/test-fixtures/haml/src-17051.haml"", ""crates/oxide/src/extractor/pre_processors/test-fixtures/haml/src-17813.haml""], ""pr_changed_test_files"": [""crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-1.haml"", ""crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-17051.haml"", ""crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-17813.haml"", ""crates/oxide/src/extractor/pre_processors/test-fixtures/haml/src-17051.haml"", ""crates/oxide/src/extractor/pre_processors/test-fixtures/haml/src-17813.haml""], ""base_commit"": ""473f0241bfe995a4d09bbb1c373a170cd0576d4e"", ""head_commit"": ""83f392696b85f8f6fe3a08d446d74879e7e7837b"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17846"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17846"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-05T14:26:17.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex a8982c4b23ce..16cf63f53d83 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -14,6 +14,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Fixed\n \n - Ensure negative arbitrary `scale` values generate negative values ([#17831](https://github.com/tailwindlabs/tailwindcss/pull/17831))\n+- Fix HAML extraction with embedded Ruby ([#17846](https://github.com/tailwindlabs/tailwindcss/pull/17846))\n \n ## [4.1.5] - 2025-04-30\n \n\ndiff --git a/Cargo.lock b/Cargo.lock\nindex 1f2af8b554b9..694700fcbf73 100644\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -582,6 +582,7 @@ dependencies = [\n  \""tempfile\"",\n  \""tracing\"",\n  \""tracing-subscriber\"",\n+ \""unicode-width\"",\n  \""walkdir\"",\n ]\n \n@@ -681,6 +682,12 @@ version = \""1.10.1\""\n source = \""registry+https://github.com/rust-lang/crates.io-index\""\n checksum = \""1dd624098567895118886609431a7c3b8f516e41d30e0643f03d94592a147e36\""\n \n+[[package]]\n+name = \""unicode-width\""\n+version = \""0.2.0\""\n+source = \""registry+https://github.com/rust-lang/crates.io-index\""\n+checksum = \""1fc81956842c57dac11422a97c3b8195a1ff727f06e85c84ed2e8aa277c9a0fd\""\n+\n [[package]]\n name = \""valuable\""\n version = \""0.1.0\""\n\ndiff --git a/crates/oxide/Cargo.toml b/crates/oxide/Cargo.toml\nindex 3c5624b45d41..9b800b04994c 100644\n--- a/crates/oxide/Cargo.toml\n+++ b/crates/oxide/Cargo.toml\n@@ -23,3 +23,4 @@ regex = \""1.11.1\""\n [dev-dependencies]\n tempfile = \""3.13.0\""\n pretty_assertions = \""1.4.1\""\n+unicode-width = \""0.2.0\""\n\ndiff --git a/crates/oxide/src/extractor/pre_processors/haml.rs b/crates/oxide/src/extractor/pre_processors/haml.rs\nindex 2e535bf41193..a32c12950977 100644\n--- a/crates/oxide/src/extractor/pre_processors/haml.rs\n+++ b/crates/oxide/src/extractor/pre_processors/haml.rs\n@@ -3,6 +3,8 @@ use crate::extractor::bracket_stack::BracketStack;\n use crate::extractor::machine::{Machine, MachineState};\n use crate::extractor::pre_processors::pre_processor::PreProcessor;\n use crate::extractor::variant_machine::VariantMachine;\n+use crate::scanner::pre_process_input;\n+use bstr::ByteVec;\n \n #[derive(Debug, Default)]\n pub struct Haml;\n@@ -14,8 +16,153 @@ impl PreProcessor for Haml {\n         let mut cursor = cursor::Cursor::new(content);\n         let mut bracket_stack = BracketStack::default();\n \n+        // Haml Comments: -#\n+        // https://haml.info/docs/yardoc/file.REFERENCE.html#ruby-evaluation\n+        //\n+        // > The hyphen followed immediately by the pound sign signifies a silent comment. Any text\n+        // > following this isn\u2019t rendered in the resulting document at all.\n+        //\n+        // ```haml\n+        // %p foo\n+        // -# This is a comment\n+        // %p bar\n+        // ```\n+        //\n+        // > You can also nest text beneath a silent comment. None of this text will be rendered.\n+        //\n+        // ```haml\n+        // %p foo\n+        // -#\n+        //   This won't be displayed\n+        //     Nor will this\n+        //                    Nor will this.\n+        // %p bar\n+        // ```\n+        //\n+        // Ruby Evaluation\n+        // https://haml.info/docs/yardoc/file.REFERENCE.html#ruby-evaluation\n+        //\n+        // When any of the following characters are the first non-whitespace character on the line,\n+        // then the line is treated as Ruby code:\n+        //\n+        // - Inserting Ruby: =\n+        //   https://haml.info/docs/yardoc/file.REFERENCE.html#inserting_ruby\n+        //\n+        //   ```haml\n+        //   %p\n+        //     = ['hi', 'there', 'reader!'].join \"" \""\n+        //     = \""yo\""\n+        //   ```\n+        //\n+        // - Running Ruby: -\n+        //   https://haml.info/docs/yardoc/file.REFERENCE.html#running-ruby--\n+        //\n+        //   ```haml\n+        //   - foo = \""hello\""\n+        //   - foo << \"" there\""\n+        //   - foo << \"" you!\""\n+        //   %p= foo\n+        //   ```\n+        //\n+        // - Whitespace Preservation: ~\n+        //   https://haml.info/docs/yardoc/file.REFERENCE.html#tilde\n+        //\n+        //   > ~ works just like =, except that it runs Haml::Helpers.preserve on its input.\n+        //\n+        //   ```haml\n+        //   ~ \""Foo\\n<pre>Bar\\nBaz</pre>\""\n+        //   ```\n+        //\n+        // Important note:\n+        //\n+        // > A line of Ruby code can be stretched over multiple lines as long as each line but the\n+        // > last ends with a comma.\n+        //\n+        // ```haml\n+        // - links = {:home => \""/\"",\n+        //   :docs => \""/docs\"",\n+        //   :about => \""/about\""}\n+        // ```\n+        //\n+        // Ruby Blocks:\n+        // https://haml.info/docs/yardoc/file.REFERENCE.html#ruby-blocks\n+        //\n+        // > Ruby blocks, like XHTML tags, don\u2019t need to be explicitly closed in Haml. Rather,\n+        // > they\u2019re automatically closed, based on indentation. A block begins whenever the\n+        // > indentation is increased after a Ruby evaluation command. It ends when the indentation\n+        // > decreases (as long as it\u2019s not an else clause or something similar).\n+        //\n+        // ```haml\n+        // - (42...47).each do |i|\n+        //   %p= i\n+        // %p See, I can count!\n+        // ```\n+        //\n+        let mut last_newline_position = 0;\n+\n         while cursor.pos < len {\n             match cursor.curr {\n+                // Escape the next character\n+                b'\\\\' => {\n+                    cursor.advance_twice();\n+                    continue;\n+                }\n+\n+                // Track the last newline position\n+                b'\\n' => {\n+                    last_newline_position = cursor.pos;\n+                    cursor.advance();\n+                    continue;\n+                }\n+\n+                // Skip HAML comments. `-#`\n+                b'-' if cursor.input[last_newline_position..cursor.pos]\n+                    .iter()\n+                    .all(u8::is_ascii_whitespace)\n+                    && matches!(cursor.next, b'#') =>\n+                {\n+                    // Just consume the comment\n+                    let updated_last_newline_position =\n+                        self.skip_indented_block(&mut cursor, last_newline_position);\n+\n+                    // Override the last known newline position\n+                    last_newline_position = updated_last_newline_position;\n+                }\n+\n+                // Skip HTML comments. `/`\n+                b'/' if cursor.input[last_newline_position..cursor.pos]\n+                    .iter()\n+                    .all(u8::is_ascii_whitespace) =>\n+                {\n+                    // Just consume the comment\n+                    let updated_last_newline_position =\n+                        self.skip_indented_block(&mut cursor, last_newline_position);\n+\n+                    // Override the last known newline position\n+                    last_newline_position = updated_last_newline_position;\n+                }\n+\n+                // Ruby evaluation\n+                b'-' | b'=' | b'~'\n+                    if cursor.input[last_newline_position..cursor.pos]\n+                        .iter()\n+                        .all(u8::is_ascii_whitespace) =>\n+                {\n+                    let mut start = cursor.pos;\n+                    let end = self.skip_indented_block(&mut cursor, last_newline_position);\n+\n+                    // Increment start with 1 character to skip the `=` or `-` character\n+                    start += 1;\n+\n+                    let ruby_code = &cursor.input[start..end];\n+\n+                    // Override the last known newline position\n+                    last_newline_position = end;\n+\n+                    let replaced = pre_process_input(ruby_code, \""rb\"");\n+                    result.replace_range(start..end, replaced);\n+                }\n+\n                 // Only replace `.` with a space if it's not surrounded by numbers. E.g.:\n                 //\n                 // ```diff\n@@ -89,6 +236,107 @@ impl PreProcessor for Haml {\n     }\n }\n \n+impl Haml {\n+    fn skip_indented_block(\n+        &self,\n+        cursor: &mut cursor::Cursor,\n+        last_known_newline_position: usize,\n+    ) -> usize {\n+        let len = cursor.input.len();\n+\n+        // Special case: if the first character of the block is `=`, then newlines are only allowed\n+        // _if_ the last character of the previous line is a comma `,`.\n+        //\n+        // https://haml.info/docs/yardoc/file.REFERENCE.html#inserting_ruby\n+        //\n+        // > A line of Ruby code can be stretched over multiple lines as long as each line but the\n+        // > last ends with a comma. For example:\n+        //\n+        // ```haml\n+        // = link_to_remote \""Add to cart\"",\n+        //     :url => { :action => \""add\"", :id => product.id },\n+        //     :update => { :success => \""cart\"", :failure => \""error\"" }\n+        // ```\n+        let evaluation_type = cursor.curr;\n+\n+        let block_indentation_level = cursor\n+            .pos\n+            .saturating_sub(last_known_newline_position)\n+            .saturating_sub(1); /* The newline itself */\n+\n+        let mut last_newline_position = last_known_newline_position;\n+\n+        // Consume until the end of the line first\n+        while cursor.pos < len && cursor.curr != b'\\n' {\n+            cursor.advance();\n+        }\n+\n+        // Block is already done, aka just a line\n+        if evaluation_type == b'=' && cursor.prev != b',' {\n+            return cursor.pos;\n+        }\n+\n+        'outer: while cursor.pos < len {\n+            match cursor.curr {\n+                // Escape the next character\n+                b'\\\\' => {\n+                    cursor.advance_twice();\n+                    continue;\n+                }\n+\n+                // Track the last newline position\n+                b'\\n' => {\n+                    last_newline_position = cursor.pos;\n+\n+                    // We are done with this block\n+                    if evaluation_type == b'=' && cursor.prev != b',' {\n+                        break;\n+                    }\n+\n+                    cursor.advance();\n+                    continue;\n+                }\n+\n+                // Skip whitespace and compute the indentation level\n+                x if x.is_ascii_whitespace() => {\n+                    // Find first non-whitespace character\n+                    while cursor.pos < len && cursor.curr.is_ascii_whitespace() {\n+                        if cursor.curr == b'\\n' {\n+                            last_newline_position = cursor.pos;\n+\n+                            if evaluation_type == b'=' && cursor.prev != b',' {\n+                                // We are done with this block\n+                                break 'outer;\n+                            }\n+                        }\n+\n+                        cursor.advance();\n+                    }\n+\n+                    let indentation = cursor\n+                        .pos\n+                        .saturating_sub(last_newline_position)\n+                        .saturating_sub(1); /* The newline itself */\n+                    if indentation < block_indentation_level {\n+                        // We are done with this block\n+                        break;\n+                    }\n+                }\n+\n+                // Not whitespace, end of block\n+                _ => break,\n+            };\n+\n+            cursor.advance();\n+        }\n+\n+        // Move the cursor to the last newline position\n+        cursor.move_to(last_newline_position);\n+\n+        last_newline_position\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::Haml;\n@@ -173,10 +421,18 @@ mod tests {\n \n     // https://github.com/tailwindlabs/tailwindcss/pull/17051#issuecomment-2711181352\n     #[test]\n-    fn test_haml_full_file() {\n-        let processed = Haml.process(include_bytes!(\""./test-fixtures/haml/src-1.haml\""));\n-        let actual = std::str::from_utf8(&processed).unwrap();\n-        let expected = include_str!(\""./test-fixtures/haml/dst-1.haml\"");\n+    fn test_haml_full_file_17051() {\n+        let actual = Haml::extract_annotated(include_bytes!(\""./test-fixtures/haml/src-17051.haml\""));\n+        let expected = include_str!(\""./test-fixtures/haml/dst-17051.haml\"");\n+\n+        assert_eq!(actual, expected);\n+    }\n+\n+    // https://github.com/tailwindlabs/tailwindcss/issues/17813\n+    #[test]\n+    fn test_haml_full_file_17813() {\n+        let actual = Haml::extract_annotated(include_bytes!(\""./test-fixtures/haml/src-17813.haml\""));\n+        let expected = include_str!(\""./test-fixtures/haml/dst-17813.haml\"");\n \n         assert_eq!(actual, expected);\n     }\n\ndiff --git a/crates/oxide/src/extractor/pre_processors/pre_processor.rs b/crates/oxide/src/extractor/pre_processors/pre_processor.rs\nindex 7b094129c736..8d42e744a73a 100644\n--- a/crates/oxide/src/extractor/pre_processors/pre_processor.rs\n+++ b/crates/oxide/src/extractor/pre_processors/pre_processor.rs\n@@ -57,4 +57,104 @@ pub trait PreProcessor: Sized + Default {\n             panic!(\""Missing some items\"");\n         }\n     }\n+\n+    #[cfg(test)]\n+    fn extract_annotated(input: &[u8]) -> String {\n+        use crate::extractor::{Extracted, Extractor};\n+        use std::collections::BTreeMap;\n+        use unicode_width::UnicodeWidthStr;\n+\n+        let processor = Self::default();\n+        let transformed = processor.process(input);\n+\n+        let extracted = Extractor::new(&transformed).extract();\n+\n+        // Extract only candidate positions\n+        let byte_ranges = extracted\n+            .iter()\n+            .filter_map(|x| match x {\n+                Extracted::Candidate(bytes) => {\n+                    let start = bytes.as_ptr() as usize - transformed.as_ptr() as usize;\n+                    let end = start + bytes.len();\n+                    Some((start, end))\n+                }\n+                _ => None,\n+            })\n+            .collect::<Vec<_>>();\n+\n+        // Convert byte ranges to (line, start_col, end_col)\n+        let mut annotations = byte_ranges\n+            .into_iter()\n+            .map(|(start, end)| {\n+                let (line, start_col) = byte_offset_to_line_and_column(input, start);\n+                let (_, end_col) = byte_offset_to_line_and_column(input, end);\n+                (line, start_col, end_col)\n+            })\n+            .collect::<Vec<_>>();\n+\n+        // Sort for safe insertion\n+        annotations.sort_by(|a, b| b.0.cmp(&a.0).then(b.1.cmp(&a.1)));\n+\n+        // Convert input to lines\n+        let mut lines = std::str::from_utf8(input)\n+            .expect(\""Input must be valid UTF-8\"")\n+            .lines()\n+            .map(|line| line.to_string())\n+            .collect::<Vec<_>>();\n+\n+        // Group annotations per line\n+        let mut grouped = BTreeMap::<usize, Vec<(usize, usize)>>::new();\n+        for (line, start_char, end_char) in annotations {\n+            grouped\n+                .entry(line)\n+                .or_default()\n+                .push((start_char, end_char));\n+        }\n+\n+        // Inject annotation lines\n+        for (line_idx, spans) in grouped.into_iter().rev() {\n+            let display_line = &lines[line_idx];\n+            let width = UnicodeWidthStr::width(display_line.as_str());\n+            let mut annotation = vec![' '; width];\n+\n+            for (start, end) in spans {\n+                for i in start..end.min(annotation.len()) {\n+                    annotation[i] = '^';\n+                }\n+            }\n+\n+            let annotation_line: String = annotation\n+                .into_iter()\n+                .collect::<String>()\n+                .trim_end()\n+                .to_owned();\n+            lines.insert(line_idx + 1, annotation_line);\n+        }\n+\n+        lines.join(\""\\n\"").trim_end().to_string() + \""\\n\""\n+    }\n+}\n+\n+#[cfg(test)]\n+fn byte_offset_to_line_and_column(input: &[u8], offset: usize) -> (usize, usize) {\n+    use unicode_width::UnicodeWidthStr;\n+\n+    let mut line_start = 0;\n+    let mut line = 0;\n+\n+    for (i, &b) in input.iter().enumerate() {\n+        if i >= offset {\n+            break;\n+        }\n+        if b == b'\\n' {\n+            line += 1;\n+            line_start = i + 1;\n+        }\n+    }\n+\n+    let slice = &input[line_start..offset];\n+    let column = std::str::from_utf8(slice).expect(\""Valid UTF-8\"");\n+    let column = UnicodeWidthStr::width(column);\n+\n+    (line, column)\n }\n"", ""test_patch"": ""diff --git a/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-1.haml b/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-1.haml\ndeleted file mode 100644\nindex fd8bd6eaf620..000000000000\n--- a/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-1.haml\n+++ /dev/null\n@@ -1,155 +0,0 @@\n-/ https://github com/tailwindlabs/tailwindcss/pull/17051 issuecomment-2711181352\n-- star_styles   \""size- 800px  mask mask-star bg-gradient-to-r from-secondary via-cyan-400 to-lime-400\""\n-- crazy_text_styles   \""italic font-black bg-gradient-to-r via-60% to-90% from-orange-500 via-secondary to-primary text-transparent bg-clip-text inline-block py-2\""\n-\n- relative\n-  -   Blurred background star\n-   absolute left-0 z-0  class: \""-top-[400px] -right-[400px]\""  \n-     flex justify-end blur-3xl\n-      %div  class: star_styles  \n-\n-   relative z-10\n-    %h1 mt-8 text-center text-5xl font-black tracking-wide drop-shadow-lg\n-      %div\n-        Components, Guides, and Paradigms\n-       md:inline-flex md:items-center justify-center\n-        %span -mr-2\n-          for\n-        %span relative -rotate-3 hover:-rotate-6 hover:scale-125 transition-transform\n-          %span  class: crazy_text_styles + \"" absolute blur-xl\""  \n-            &nbsp;CRAZY&nbsp;\n-          %span  class: crazy_text_styles + \"" drop-shadow-[0_0_1px_#fff]\""  \n-            &nbsp;CRAZY&nbsp;\n-        %span -ml-3 md:-ml-1\n-          \\-fast Development\n-      %div\n-        in Ruby on Rails!\n-\n-     mt-16 text-center\n-        daisy_button \""\ud83d\ude03 Get Started\"", css: \""btn-primary text-xl\"",\n-        right_icon: \""arrow-right\"", target: \""_blank\"",\n-        href: \""https://github com/profoundry-us/loco_motion locomotion-components\""\n-\n-     mt-32 lg:flex lg:space-x-8\n-      %div  class: \""md:basis-2/5\""  \n-        %h3 text-4xl font-bold\n-          Easy, Flexible Components\n-        %p mt-2 text-xl\n-          Powered by the fabulous\n-            succeed ',' do\n-              daisy_link \""ViewComponent\"", \""https://viewcomponent.org\"", target: \""_blank\"" \n-            succeed ', and' do\n-              daisy_link \""DaisyUI\"", \""https://daisyui com/\"", target: \""_blank\""\n-            daisy_link \""TailwindCSS\"", \""https://tailwindcss com/\"", target: \""_blank\""\n-          libraries, our components are designed to be fast, flexible, and easy to\n-          use <i>directy</i> in Ruby on Rails!\n-\n-        doc_example css: \""mt-8 lg:mt-0 lg:basis-3/5 h-44\""  do\n-         flex flex-col sm:flex-row items-center gap-4\n-            daisy_button \""Accent Button\"", css: \""btn-accent\""\n-            daisy_tip \""Click to Swap\""  do\n-              daisy_swap off: \""\ud83c\udf1a\"", on: \""\ud83c\udf1e\"", css: \""swap-rotate text-4xl\""\n-            daisy_badge \""Large Badge\"", css: \""badge-secondary badge-lg\""\n-\n-\n-     mt-32 xl:flex xl:flex-row-reverse xl:items-center\n-       text-xl xl:ml-8\n-        %h3 text-4xl font-bold\n-          Simple, Concise Views\n-\n-        %p mt-2\n-          Utlize\n-            daisy_link \""HAML\"", \""https://haml.info/\"", target: \""_blank\"" \n-          so your views are simple, concise, and easy to understand \n-\n-        %p mt-2\n-          No more messy ERB files with all of their closing tags and Ruby wrappers \n-          HAML feels more natural to write and reduces file sizes, making your\n-          views easier to read and maintain \n-\n-        %p mt-2\n-          :markdown\n-            **PLUS!** You can utlize filters like _Markdown_, CoffeeScript,\n-            Textile, and many more!\n-\n-       mt-8 xl:mt-0\n-         flex flex-col xl:flex xl:flex-row w-full\n-            doc_code css: \""grow\"", code_css: \""xl:pl-2 xl:pr-0 xl:rounded-r-none\"", language: \""erb\""  do\n-            :escaped\n-              <%   Ruby %>\n-\n-              <% 5 times do |i| %>\n-                <% if i even? %>\n-                  <p class \""odd\"">Number <%  i %></p>\n-                <% else %>\n-                  <p class \""even\"">Numero <%  i %></p>\n-                <% end %>\n-              <% end %>\n-\n-            doc_code css: \""grow mt-8 xl:mt-0\"", pre_css: \""xl:h-full\"", code_css: \""xl:pl-0 xl:pr-2 xl:h-full xl:rounded-l-none\""  do\n-            :escaped\n-              -   HAML\n-\n-              - 5 times do |i|\n-                - if i even?\n-                  %p odd Number \\  i \n-                - else\n-                  %p even Numero \\  i \n-\n-\n-    %h3 mt-32 text-4xl font-bold\n-      Build Your <i>OWN</i> Components\n-\n-    %p mt-2 text-xl\n-      Can't find exactly what you need? No problem! Build your own components\n-      with ease using our simple, flexible, and powerful DSL \n-\n-     mt-8 xl:flex xl:space-x-8\n-      %div\n-          doc_code language: \""ruby\""  do\n-          :escaped\n-              app/components/application_component rb\n-            class ApplicationComponent < LocoMotion::BaseComponent\n-                Add your custom / shared component logic here!\n-            end\n-\n-          doc_code language: \""haml\"", css: \""mt-8\""  do\n-          :escaped\n-            -   app/components/character_component html haml\n-              part :component  do\n-                part :head \n-                part :body  do\n-                  content\n-                part :legs \n-\n-      %div mt-8 xl:mt-0\n-          doc_code language: \""ruby\""  do\n-          :escaped\n-              app/components/character_component rb\n-            class CharacterComponent < ApplicationComponent\n-              define_parts :head, :body, :legs\n-\n-              def before_render\n-                set_tag_name :head, :h1 \n-                add_css :head, \""text-3xl font-bold\"" \n-\n-                set_tag_name :body, :p \n-                add_stimulus_controller :body, \""character-body\"" \n-                add_css :body, \""text-lg\"" \n-\n-                set_tag_name :legs, :footer \n-                add_css :legs, \""text-sm\"" \n-              end\n-            end\n-\n-    %h3 mt-24 text-center text-4xl font-bold italic\n-      More Coming Soon!\n-    %p mt-2 text-xl text-center\n-      Keen an eye out as we'll be adding more components, guides, and\n-      %br max-sm:hidden\n-      suggested gems for you to build amazing Rails apps!\n-     mt-4 text-center\n-        daisy_button \""\ud83d\ude09 Get Started\"", css: \""btn-primary text-xl\"",\n-        right_icon: \""arrow-right\"", target: \""_blank\"",\n-        class: \""px-2.5\""\n-        href: \""https://github com/profoundry-us/loco_motion locomotion-components\""\n\ndiff --git a/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-17051.haml b/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-17051.haml\nnew file mode 100644\nindex 000000000000..b233f3b8b2a4\n--- /dev/null\n+++ b/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-17051.haml\n@@ -0,0 +1,264 @@\n+/ https://github.com/tailwindlabs/tailwindcss/pull/17051#issuecomment-2711181352\n+- star_styles = \""size-[800px] mask mask-star bg-gradient-to-r from-secondary via-cyan-400 to-lime-400\""\n+  ^^^^^^^^^^^    ^^^^^^^^^^^^ ^^^^ ^^^^^^^^^ ^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^ ^^^^^^^^^^^^ ^^^^^^^^^^^\n+- crazy_text_styles = \""italic font-black bg-gradient-to-r via-60% to-90% from-orange-500 via-secondary to-primary text-transparent bg-clip-text inline-block py-2\""\n+  ^^^^^^^^^^^^^^^^^    ^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^ ^^^^^^^ ^^^^^^ ^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^ ^^^^^^^^^^^^ ^^^^\n+\n+.relative\n+ ^^^^^^^^\n+  - # Blurred background star\n+              ^^^^^^^^^^ ^^^^\n+  .absolute.left-0.z-0{ class: \""-top-[400px] -right-[400px]\"" }\n+   ^^^^^^^^ ^^^^^^ ^^^  ^^^^^   ^^^^^^^^^^^^ ^^^^^^^^^^^^^^\n+    .flex.justify-end.blur-3xl\n+     ^^^^ ^^^^^^^^^^^ ^^^^^^^^\n+      %div{ class: star_styles }\n+            ^^^^^  ^^^^^^^^^^^\n+\n+  .relative.z-10\n+   ^^^^^^^^ ^^^^\n+    %h1.mt-8.text-center.text-5xl.font-black.tracking-wide.drop-shadow-lg\n+        ^^^^ ^^^^^^^^^^^ ^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^ ^^^^^^^^^^^^^^\n+      %div\n+        Components, Guides, and Paradigms\n+                            ^^^\n+      .md:inline-flex.md:items-center.justify-center\n+       ^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^\n+        %span.-mr-2\n+              ^^^^^\n+          for\n+          ^^^\n+        %span.relative.-rotate-3.hover:-rotate-6.hover:scale-125.transition-transform\n+              ^^^^^^^^ ^^^^^^^^^ ^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^\n+          %span{ class: crazy_text_styles + \"" absolute blur-xl\"" }\n+                 ^^^^^  ^^^^^^^^^^^^^^^^^     ^^^^^^^^ ^^^^^^^\n+            &nbsp;CRAZY&nbsp;\n+          %span{ class: crazy_text_styles + \"" drop-shadow-[0_0_1px_#fff]\"" }\n+                 ^^^^^  ^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+            &nbsp;CRAZY&nbsp;\n+        %span.-ml-3.md:-ml-1\n+              ^^^^^ ^^^^^^^^\n+          \\-fast Development\n+      %div\n+        in Ruby on Rails!\n+        ^^      ^^\n+\n+    .mt-16.text-center\n+     ^^^^^ ^^^^^^^^^^^\n+      = daisy_button \""\ud83d\ude03 Get Started\"", css: \""btn-primary text-xl\"",\n+        ^^^^^^^^^^^^                   ^^^   ^^^^^^^^^^^ ^^^^^^^\n+        right_icon: \""arrow-right\"", target: \""_blank\"",\n+        ^^^^^^^^^^   ^^^^^^^^^^^   ^^^^^^\n+        href: \""https://github.com/profoundry-us/loco_motion#locomotion-components\""\n+        ^^^^                                                ^^^^^^^^^^^^^^^^^^^^^\n+\n+    .mt-32.lg:flex.lg:space-x-8\n+     ^^^^^ ^^^^^^^ ^^^^^^^^^^^^\n+      %div{ class: \""md:basis-2/5\"" }\n+            ^^^^^   ^^^^^^^^^^^^\n+        %h3.text-4xl.font-bold\n+            ^^^^^^^^ ^^^^^^^^^\n+          Easy, Flexible Components\n+        %p.mt-2.text-xl\n+           ^^^^ ^^^^^^^\n+          Powered by the fabulous\n+                  ^^ ^^^ ^^^^^^^^\n+          = succeed ',' do\n+            ^^^^^^^     ^^\n+            = daisy_link(\""ViewComponent\"", \""https://viewcomponent.org\"", target: \""_blank\"")\n+                                                                 ^^^   ^^^^^^\n+          = succeed ', and' do\n+            ^^^^^^^    ^^^  ^^\n+            = daisy_link \""DaisyUI\"", \""https://daisyui.com/\"", target: \""_blank\""\n+              ^^^^^^^^^^                                    ^^^^^^\n+          = daisy_link \""TailwindCSS\"", \""https://tailwindcss.com/\"", target: \""_blank\""\n+            ^^^^^^^^^^                                            ^^^^^^\n+          libraries, our components are designed to be fast, flexible, and easy to\n+                     ^^^ ^^^^^^^^^^ ^^^ ^^^^^^^^ ^^ ^^                 ^^^ ^^^^ ^^\n+          use <i>directy</i> in Ruby on Rails!\n+          ^^^    ^^^^^^^     ^^      ^^\n+\n+      = doc_example(css: \""mt-8 lg:mt-0 lg:basis-3/5 h-44\"") do\n+                    ^^^   ^^^^ ^^^^^^^ ^^^^^^^^^^^^ ^^^^   ^^\n+        .flex.flex-col.sm:flex-row.items-center.gap-4\n+         ^^^^ ^^^^^^^^ ^^^^^^^^^^^ ^^^^^^^^^^^^ ^^^^^\n+          = daisy_button \""Accent Button\"", css: \""btn-accent\""\n+            ^^^^^^^^^^^^                  ^^^   ^^^^^^^^^^\n+          = daisy_tip(\""Click to Swap\"") do\n+                             ^^        ^^\n+            = daisy_swap off: \""\ud83c\udf1a\"", on: \""\ud83c\udf1e\"", css: \""swap-rotate text-4xl\""\n+              ^^^^^^^^^^ ^^^        ^^        ^^^   ^^^^^^^^^^^ ^^^^^^^^\n+          = daisy_badge \""Large Badge\"", css: \""badge-secondary badge-lg\""\n+            ^^^^^^^^^^^                ^^^   ^^^^^^^^^^^^^^^ ^^^^^^^^\n+\n+\n+    .mt-32.xl:flex.xl:flex-row-reverse.xl:items-center\n+     ^^^^^ ^^^^^^^ ^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^\n+      .text-xl.xl:ml-8\n+       ^^^^^^^ ^^^^^^^\n+        %h3.text-4xl.font-bold\n+            ^^^^^^^^ ^^^^^^^^^\n+          Simple, Concise Views\n+\n+        %p.mt-2\n+           ^^^^\n+          Utlize\n+          = daisy_link(\""HAML\"", \""https://haml.info/\"", target: \""_blank\"")\n+                                                     ^^^^^^\n+          so your views are simple, concise, and easy to understand.\n+          ^^ ^^^^ ^^^^^ ^^^                  ^^^ ^^^^ ^^ ^^^^^^^^^^\n+\n+        %p.mt-2\n+           ^^^^\n+          No more messy ERB files with all of their closing tags and Ruby wrappers.\n+             ^^^^ ^^^^^     ^^^^^ ^^^^ ^^^ ^^ ^^^^^ ^^^^^^^ ^^^^ ^^^      ^^^^^^^^\n+          HAML feels more natural to write and reduces file sizes, making your\n+               ^^^^^ ^^^^ ^^^^^^^ ^^ ^^^^^ ^^^ ^^^^^^^ ^^^^        ^^^^^^ ^^^^\n+          views easier to read and maintain.\n+          ^^^^^ ^^^^^^ ^^ ^^^^ ^^^ ^^^^^^^^\n+\n+        %p.mt-2\n+           ^^^^\n+          :markdown\n+            **PLUS!** You can utlize filters like _Markdown_, CoffeeScript,\n+                          ^^^ ^^^^^^ ^^^^^^^ ^^^^\n+            Textile, and many more!\n+                     ^^^ ^^^^ ^^^^^\n+\n+      .mt-8.xl:mt-0\n+       ^^^^ ^^^^^^^\n+        .flex.flex-col.xl:flex.xl:flex-row.w-full\n+         ^^^^ ^^^^^^^^ ^^^^^^^ ^^^^^^^^^^^ ^^^^^^\n+          = doc_code(css: \""grow\"", code_css: \""xl:pl-2 xl:pr-0 xl:rounded-r-none\"", language: \""erb\"") do\n+                     ^^^   ^^^^   ^^^^^^^^   ^^^^^^^ ^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^^^^^^^   ^^^   ^^\n+            :escaped\n+              <% # Ruby %>\n+\n+              <% 5.times do |i| %>\n+                   ^^^^^ ^^\n+                <% if i.even? %>\n+                   ^^ ^\n+                  <p class=\""odd\"">Number <%= i %></p>\n+                     ^^^^^  ^^^             ^\n+                <% else %>\n+                   ^^^^\n+                  <p class=\""even\"">Numero <%= i %></p>\n+                     ^^^^^  ^^^^             ^\n+                <% end %>\n+                   ^^^\n+              <% end %>\n+                 ^^^\n+\n+          = doc_code(css: \""grow mt-8 xl:mt-0\"", pre_css: \""xl:h-full\"", code_css: \""xl:pl-0 xl:pr-2 xl:h-full xl:rounded-l-none\"") do\n+                     ^^^   ^^^^ ^^^^ ^^^^^^^   ^^^^^^^   ^^^^^^^^^   ^^^^^^^^   ^^^^^^^ ^^^^^^^ ^^^^^^^^^ ^^^^^^^^^^^^^^^^^   ^^\n+            :escaped\n+              - # HAML\n+\n+              - 5.times do |i|\n+                  ^^^^^ ^^\n+                - if i.even?\n+                  ^^\n+                  %p.odd Number \\#{i}\n+                     ^^^           ^\n+                - else\n+                  ^^^^\n+                  %p.even Numero \\#{i}\n+                     ^^^^           ^\n+\n+\n+    %h3.mt-32.text-4xl.font-bold\n+        ^^^^^ ^^^^^^^^ ^^^^^^^^^\n+      Build Your <i>OWN</i> Components\n+\n+    %p.mt-2.text-xl\n+       ^^^^ ^^^^^^^\n+      Can't find exactly what you need? No problem! Build your own components\n+          ^ ^^^^ ^^^^^^^ ^^^^ ^^^          ^^^^^^^^       ^^^^ ^^^ ^^^^^^^^^^\n+      with ease using our simple, flexible, and powerful DSL.\n+      ^^^^ ^^^^ ^^^^^ ^^^                   ^^^ ^^^^^^^^\n+\n+    .mt-8.xl:flex.xl:space-x-8\n+     ^^^^ ^^^^^^^ ^^^^^^^^^^^^\n+      %div\n+        = doc_code(language: \""ruby\"") do\n+                   ^^^^^^^^   ^^^^   ^^\n+          :escaped\n+            # app/components/application_component.rb\n+                                                   ^^\n+            class ApplicationComponent < LocoMotion::BaseComponent\n+            ^^^^^\n+              # Add your custom / shared component logic here!\n+                    ^^^^ ^^^^^^   ^^^^^^ ^^^^^^^^^ ^^^^^ ^^^^^\n+            end\n+            ^^^\n+\n+        = doc_code(language: \""haml\"", css: \""mt-8\"") do\n+                   ^^^^^^^^   ^^^^   ^^^   ^^^^   ^^\n+          :escaped\n+            - # app/components/character_component.html.haml\n+                                                        ^^^^\n+            = part(:component) do\n+                               ^^\n+              = part(:head)\n+              = part(:body) do\n+                            ^^\n+                = content\n+                  ^^^^^^^\n+              = part(:legs)\n+\n+      %div.mt-8.xl:mt-0\n+           ^^^^ ^^^^^^^\n+        = doc_code(language: \""ruby\"") do\n+                   ^^^^^^^^   ^^^^   ^^\n+          :escaped\n+            # app/components/character_component.rb\n+                                                 ^^\n+            class CharacterComponent < ApplicationComponent\n+            ^^^^^\n+              define_parts :head, :body, :legs\n+              ^^^^^^^^^^^^\n+\n+              def before_render\n+              ^^^ ^^^^^^^^^^^^^\n+                set_tag_name(:head, :h1)\n+                ^^^^^^^^^^^^\n+                add_css(:head, \""text-3xl font-bold\"")\n+                ^^^^^^^         ^^^^^^^^ ^^^^^^^^^\n+\n+                set_tag_name(:body, :p)\n+                ^^^^^^^^^^^^\n+                add_stimulus_controller(:body, \""character-body\"")\n+                ^^^^^^^^^^^^^^^^^^^^^^^         ^^^^^^^^^^^^^^\n+                add_css(:body, \""text-lg\"")\n+                ^^^^^^^         ^^^^^^^\n+\n+                set_tag_name(:legs, :footer)\n+                ^^^^^^^^^^^^\n+                add_css(:legs, \""text-sm\"")\n+                ^^^^^^^         ^^^^^^^\n+              end\n+              ^^^\n+            end\n+            ^^^\n+\n+    %h3.mt-24.text-center.text-4xl.font-bold.italic\n+        ^^^^^ ^^^^^^^^^^^ ^^^^^^^^ ^^^^^^^^^ ^^^^^^\n+      More Coming Soon!\n+    %p.mt-2.text-xl.text-center\n+       ^^^^ ^^^^^^^ ^^^^^^^^^^^\n+      Keen an eye out as we'll be adding more components, guides, and\n+           ^^ ^^^ ^^^ ^^ ^^ ^^ ^^ ^^^^^^ ^^^^                     ^^^\n+      %br.max-sm:hidden\n+          ^^^^^^^^^^^^^\n+      suggested gems for you to build amazing Rails apps!\n+      ^^^^^^^^^ ^^^^ ^^^ ^^^ ^^ ^^^^^ ^^^^^^^       ^^^^^\n+    .mt-4.text-center\n+     ^^^^ ^^^^^^^^^^^\n+      = daisy_button \""\ud83d\ude09 Get Started\"", css: \""btn-primary text-xl\"",\n+        ^^^^^^^^^^^^                   ^^^   ^^^^^^^^^^^ ^^^^^^^\n+        right_icon: \""arrow-right\"", target: \""_blank\"",\n+        ^^^^^^^^^^   ^^^^^^^^^^^   ^^^^^^\n+        class: \""px-2.5\""\n+        ^^^^^   ^^^^^^\n+        href: \""https://github.com/profoundry-us/loco_motion#locomotion-components\""\n+        ^^^^                                                ^^^^^^^^^^^^^^^^^^^^^\n\ndiff --git a/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-17813.haml b/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-17813.haml\nnew file mode 100644\nindex 000000000000..18f0fdc4b20a\n--- /dev/null\n+++ b/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/dst-17813.haml\n@@ -0,0 +1,30 @@\n+:ruby\n+  - devices_classes = 'size-5 mr-2px'\n+    ^^^^^^^^^^^^^^^    ^^^^^^ ^^^^^^\n+  - icon_classes = 'w-[12px] h-[12px]'\n+    ^^^^^^^^^^^^    ^^^^^^^^ ^^^^^^^^\n+!!!\n+%html{ lang: 'en' }\n+       ^^^^   ^^\n+  %head\n+    %title Tailwind v4.1.4 + HAML bug\n+                    ^^^^^^        ^^^\n+\n+  -# This is a comment\n+          ^^ ^ ^^^^^^^\n+\n+    A multi-line comment\n+      ^^^^^^^^^^ ^^^^^^^\n+      With more indentation\n+           ^^^^ ^^^^^^^^^^^\n+\n+    Which can dedent again just fine\n+          ^^^ ^^^^^^ ^^^^^ ^^^^ ^^^^\n+\n+  %body\n+  - icon_classes = 'self-center w-[16px] h-[16px]'\n+    ^^^^^^^^^^^^    ^^^^^^^^^^^ ^^^^^^^^ ^^^^^^^^\n+    .flex{ class: icon_classes }\n+     ^^^^  ^^^^^  ^^^^^^^^^^^^\n+    .flex{ class: devices_classes }\n+     ^^^^  ^^^^^  ^^^^^^^^^^^^^^^\n\ndiff --git a/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/src-1.haml b/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/src-17051.haml\nsimilarity index 100%\nrename from crates/oxide/src/extractor/pre_processors/test-fixtures/haml/src-1.haml\nrename to crates/oxide/src/extractor/pre_processors/test-fixtures/haml/src-17051.haml\n\ndiff --git a/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/src-17813.haml b/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/src-17813.haml\nnew file mode 100644\nindex 000000000000..5fdaefdb03c3\n--- /dev/null\n+++ b/crates/oxide/src/extractor/pre_processors/test-fixtures/haml/src-17813.haml\n@@ -0,0 +1,19 @@\n+:ruby\n+  - devices_classes = 'size-5 mr-2px'\n+  - icon_classes = 'w-[12px] h-[12px]'\n+!!!\n+%html{ lang: 'en' }\n+  %head\n+    %title Tailwind v4.1.4 + HAML bug\n+\n+  -# This is a comment\n+\n+    A multi-line comment\n+      With more indentation\n+\n+    Which can dedent again just fine\n+\n+  %body\n+  - icon_classes = 'self-center w-[16px] h-[16px]'\n+    .flex{ class: icon_classes }\n+    .flex{ class: devices_classes }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17836"", ""pr_id"": 17836, ""issue_id"": 17693, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""@reference causing re-renders in non related component with HMR\n**What version of Tailwind CSS are you using?**\n\nv4.1.3\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 6.2.5\n\n**What version of Node.js are you using?**\n\nv22.14.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nUbuntu\n\n**Reproduction URL**\n\nThere is none because it's related to the npm run dev process. But attached is a screenshot where I change only something in ProgressSection.vue, the style is scoped and it re-builds basically all components\n\n![Image](https://github.com/user-attachments/assets/d4dfa0fa-8d53-463b-9f68-3a698f3bafa5)\n\n**Describe your issue**\n\nWhen running `npm run dev`, and making a change to one component, instead of the HMR triggering change only for this component, it triggers changes to ALL components that have @reference '@/style.css';\n\nWe need the @reference, because we want to use @apply instead of writing the styles inline. Falling back to inline is not an option for us, because the project then will not be maintainable and the code not readable.\n\nIn tailwindcss 3, the apply did not create such issues, because we didn't have to use @reference to use it.\n\nNow it takes around 5-10 seconds to show a letter change from a vue component over vite, it's like going back to webpack \ud83d\ude06 \n\nYes, I have read the documentation that we could use var(--bg-blue-500) or something, but then we can't use spacings, breakspoints etc, all the benefits of tailwind."", ""issue_word_count"": 265, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/index.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/index.test.ts""], ""base_commit"": ""d38554d1102bc0f5e9802038b979956f770e8345"", ""head_commit"": ""9055e6c3df815b3ed10267e44b60a730403a626f"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17836"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17836"", ""dockerfile"": """", ""pr_merged_at"": ""2025-05-05T15:21:56.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 16cf63f53d83..ef34a1a71862 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -15,6 +15,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Ensure negative arbitrary `scale` values generate negative values ([#17831](https://github.com/tailwindlabs/tailwindcss/pull/17831))\n - Fix HAML extraction with embedded Ruby ([#17846](https://github.com/tailwindlabs/tailwindcss/pull/17846))\n+- Don't scan files for utilities when using `@reference` ([#17836](https://github.com/tailwindlabs/tailwindcss/pull/17836))\n \n ## [4.1.5] - 2025-04-30\n \n\ndiff --git a/packages/tailwindcss/src/index.ts b/packages/tailwindcss/src/index.ts\nindex 8d953782f621..e8f34e366327 100644\n--- a/packages/tailwindcss/src/index.ts\n+++ b/packages/tailwindcss/src/index.ts\n@@ -162,6 +162,14 @@ async function parseCss(\n         return\n       }\n \n+      // When inside `@reference` we should treat `@tailwind utilities` as if\n+      // it wasn't there in the first place. This should also let `build()`\n+      // return the cached static AST.\n+      if (context.reference) {\n+        replaceWith([])\n+        return\n+      }\n+\n       let params = segment(node.params, ' ')\n       for (let param of params) {\n         if (param.startsWith('source(')) {\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex 88ea541a13b0..00e73a90b405 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -1,7 +1,7 @@\n import fs from 'node:fs'\n import path from 'node:path'\n import { describe, expect, it, test } from 'vitest'\n-import { compile, Polyfills } from '.'\n+import { compile, Features, Polyfills } from '.'\n import type { PluginAPI } from './compat/plugin-api'\n import plugin from './plugin'\n import { compileCss, optimizeCss, run } from './test-utils/run'\n@@ -5373,3 +5373,130 @@ describe('`@property` polyfill', async () => {\n     `)\n   })\n })\n+\n+describe('feature detection', () => {\n+  test('using `@tailwind utilities`', async () => {\n+    let compiler = await compile(css`\n+      @tailwind utilities;\n+    `)\n+\n+    expect(compiler.features & Features.Utilities).toBeTruthy()\n+  })\n+\n+  test('using `@apply`', async () => {\n+    let compiler = await compile(css`\n+      .foo {\n+        @apply underline;\n+      }\n+    `)\n+\n+    expect(compiler.features & Features.AtApply).toBeTruthy()\n+  })\n+\n+  test('using `@import`', async () => {\n+    let compiler = await compile(\n+      css`\n+        @import 'tailwindcss/preflight';\n+      `,\n+      { loadStylesheet: async (_, base) => ({ base, content: '' }) },\n+    )\n+\n+    expect(compiler.features & Features.AtImport).toBeTruthy()\n+  })\n+\n+  test('using `@reference`', async () => {\n+    let compiler = await compile(\n+      css`\n+        @import 'tailwindcss/preflight';\n+      `,\n+      { loadStylesheet: async (_, base) => ({ base, content: '' }) },\n+    )\n+\n+    // There's little difference between `@reference` and `@import` on a feature\n+    // level as it's just like an import but with side-effect behavior.\n+    //\n+    // It's really just shorthand for `@import \""\u2026\"" reference;`\n+    expect(compiler.features & Features.AtImport).toBeTruthy()\n+  })\n+\n+  test('using `theme(\u2026)`', async () => {\n+    let compiler = await compile(\n+      css`\n+        @theme {\n+          --color-red: #f00;\n+        }\n+\n+        .foo {\n+          color: theme(--color-red);\n+        }\n+      `,\n+      { loadStylesheet: async (_, base) => ({ base, content: '' }) },\n+    )\n+\n+    expect(compiler.features & Features.ThemeFunction).toBeTruthy()\n+  })\n+\n+  test('using `@plugin`', async () => {\n+    let compiler = await compile(\n+      css`\n+        @plugin \""./some-plugin.js\"";\n+      `,\n+      { loadModule: async (_, base) => ({ base, module: () => {} }) },\n+    )\n+\n+    expect(compiler.features & Features.JsPluginCompat).toBeTruthy()\n+  })\n+\n+  test('using `@config`', async () => {\n+    let compiler = await compile(\n+      css`\n+        @config \""./some-config.js\"";\n+      `,\n+      { loadModule: async (_, base) => ({ base, module: {} }) },\n+    )\n+\n+    expect(compiler.features & Features.JsPluginCompat).toBeTruthy()\n+  })\n+\n+  test('using `@variant`', async () => {\n+    let compiler = await compile(css`\n+      .foo {\n+        @variant dark {\n+          color: red;\n+        }\n+      }\n+    `)\n+\n+    expect(compiler.features & Features.Variants).toBeTruthy()\n+  })\n+\n+  test('legacy `@variant` syntax does not trigger the variant feature', async () => {\n+    let compiler = await compile(css`\n+      @variant dark (&:is(.dark, .dark *));\n+    `)\n+\n+    expect(compiler.features & Features.Variants).toBeFalsy()\n+  })\n+\n+  test('`@tailwind utilities` is ignored inside `@reference`', async () => {\n+    let compiler = await compile(\n+      css`\n+        @reference \""tailwindcss/utilities\"";\n+      `,\n+      {\n+        async loadStylesheet(id, base) {\n+          return {\n+            base,\n+            content: css`\n+              @tailwind utilities;\n+            `,\n+          }\n+        },\n+      },\n+    )\n+\n+    // We see @tailwind utilities but because of @reference it is ignored\n+    expect(compiler.features & Features.AtImport).toBeTruthy()\n+    expect(compiler.features & Features.Utilities).toBeFalsy()\n+  })\n+})\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17754"", ""pr_id"": 17754, ""issue_id"": 17295, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Angular 19 cannot automatically recover using @apply with Tailwind CSS 4\nTailwind CSS: 4.0.14\nAngular: 19.2.4\nNode: 23.6.0\nChrome: 134.0.6998.89 (Official Build) (arm64)\nMacOS: Sequoia 15.3.2 (24D81)\n\n**Reproduction URL**\n\n[https://github.com/micobarac/angular19](https://github.com/micobarac/angular19)\n\n**Describe your issue**\n\nReproducing the issue:\n\n- run `yarn install && yarn start`\n- open `src/tailwind.css`\n- change `bg-white` class within `@apply` directive to `bg-unknown` at line 4\n- observe the error: \n\n```\n\u2718 [ERROR] Cannot apply unknown utility class: bg-unknown [plugin angular-css]\n\n    angular:styles/global:styles:1:8:\n      1 \u2502 @import 'src/styles.css';\n```\n\n- change `bg-unknown` class within `@apply` directive back to `bg-white` at line 4\n- observe the error (**Angular should have recovered by now**): \n\n```\n\u2718 [ERROR] Cannot apply unknown utility class: bg-unknown [plugin angular-css]\n\n    angular:styles/global:styles:1:8:\n      1 \u2502 @import 'src/styles.css';\n```\n\nI can't tell if this problem resides inside `Angular 19` or `Tailwind CSS 4`.\n\nI opened issue here:\n\n[https://github.com/angular/angular-cli/issues/29789](https://github.com/angular/angular-cli/issues/29789)\n\n[https://github.com/angular/angular-cli/issues/29789#issuecomment-2737483148](https://github.com/angular/angular-cli/issues/29789#issuecomment-2737483148)\n\n_In Tailwind CSS version 4, syntax errors trigger an exception instead of a PostCSS error. This causes PostCSS to crash, preventing it from tracking the files Tailwind processes. As a result, these files aren't added to the file watcher / dependency tree, leading to issues where cached compilation results aren't invalidated when a file changes, since it isn't recognized as a transitive dependency._\n\nI opened discussion here, too:\n\n[https://github.com/tailwindlabs/tailwindcss/discussions/17077](https://github.com/tailwindlabs/tailwindcss/discussions/17077)"", ""issue_word_count"": 288, ""test_files_count"": 4, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/postcss/index.test.ts"", ""packages/@tailwindcss-postcss/src/index.ts"", ""packages/tailwindcss/src/compat/config.test.ts"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/prefix.test.ts""], ""pr_changed_test_files"": [""integrations/postcss/index.test.ts"", ""packages/tailwindcss/src/compat/config.test.ts"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/prefix.test.ts""], ""base_commit"": ""2bf2b4db98dd4e910d024d885416a2038f70d0d2"", ""head_commit"": ""180230970cc39eb96030563cbaaf51e59dfa66e2"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17754"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17754"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-25T10:02:10.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 6b8158e2edc3..5a95aac3d4b4 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -18,6 +18,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Hide default shadow suggestions when missing theme keys ([#17743](https://github.com/tailwindlabs/tailwindcss/pull/17743))\n - Replace `_` with `.` in theme suggestions for `@utility` if surrounded by digits ([#17743](https://github.com/tailwindlabs/tailwindcss/pull/17743))\n - Upgrade: Bump all Tailwind CSS related dependencies during upgrade ([#17763](https://github.com/tailwindlabs/tailwindcss/pull/17763))\n+- PostCSS: Ensure that errors in stylesheet dependencies are recoverable ([#17754](https://github.com/tailwindlabs/tailwindcss/pull/17754))\n \n ## [4.1.4] - 2025-04-14\n \n\ndiff --git a/packages/@tailwindcss-postcss/src/index.ts b/packages/@tailwindcss-postcss/src/index.ts\nindex bac5c5b9a9f9..b06c15cb237b 100644\n--- a/packages/@tailwindcss-postcss/src/index.ts\n+++ b/packages/@tailwindcss-postcss/src/index.ts\n@@ -103,6 +103,10 @@ function tailwindcss(opts: PluginOptions = {}): AcceptedPlugin {\n           let context = getContextFromCache(inputFile, opts)\n           let inputBasePath = path.dirname(path.resolve(inputFile))\n \n+          // Whether this is the first build or not, if it is, then we can\n+          // optimize the build by not creating the compiler until we need it.\n+          let isInitialBuild = context.compiler === null\n+\n           async function createCompiler() {\n             DEBUG && I.start('Setup compiler')\n             if (context.fullRebuildPaths.length > 0 && !isInitialBuild) {\n@@ -119,9 +123,7 @@ function tailwindcss(opts: PluginOptions = {}): AcceptedPlugin {\n             let compiler = await compileAst(ast, {\n               base: inputBasePath,\n               shouldRewriteUrls: true,\n-              onDependency: (path) => {\n-                context.fullRebuildPaths.push(path)\n-              },\n+              onDependency: (path) => context.fullRebuildPaths.push(path),\n               // In CSS Module files, we have to disable the `@property` polyfill since these will\n               // emit global `*` rules which are considered to be non-pure and will cause builds\n               // to fail.\n@@ -133,190 +135,207 @@ function tailwindcss(opts: PluginOptions = {}): AcceptedPlugin {\n             return compiler\n           }\n \n-          // Whether this is the first build or not, if it is, then we can\n-          // optimize the build by not creating the compiler until we need it.\n-          let isInitialBuild = context.compiler === null\n+          try {\n+            // Setup the compiler if it doesn't exist yet. This way we can\n+            // guarantee a `build()` function is available.\n+            context.compiler ??= createCompiler()\n \n-          // Setup the compiler if it doesn't exist yet. This way we can\n-          // guarantee a `build()` function is available.\n-          context.compiler ??= createCompiler()\n+            if ((await context.compiler).features === Features.None) {\n+              return\n+            }\n \n-          if ((await context.compiler).features === Features.None) {\n-            return\n-          }\n+            let rebuildStrategy: 'full' | 'incremental' = 'incremental'\n \n-          let rebuildStrategy: 'full' | 'incremental' = 'incremental'\n+            // Track file modification times to CSS files\n+            DEBUG && I.start('Register full rebuild paths')\n+            {\n+              for (let file of context.fullRebuildPaths) {\n+                result.messages.push({\n+                  type: 'dependency',\n+                  plugin: '@tailwindcss/postcss',\n+                  file: path.resolve(file),\n+                  parent: result.opts.from,\n+                })\n+              }\n \n-          // Track file modification times to CSS files\n-          DEBUG && I.start('Register full rebuild paths')\n-          {\n-            for (let file of context.fullRebuildPaths) {\n-              result.messages.push({\n-                type: 'dependency',\n-                plugin: '@tailwindcss/postcss',\n-                file: path.resolve(file),\n-                parent: result.opts.from,\n+              let files = result.messages.flatMap((message) => {\n+                if (message.type !== 'dependency') return []\n+                return message.file\n               })\n-            }\n-\n-            let files = result.messages.flatMap((message) => {\n-              if (message.type !== 'dependency') return []\n-              return message.file\n-            })\n-            files.push(inputFile)\n-\n-            for (let file of files) {\n-              let changedTime = fs.statSync(file, { throwIfNoEntry: false })?.mtimeMs ?? null\n-              if (changedTime === null) {\n-                if (file === inputFile) {\n-                  rebuildStrategy = 'full'\n+              files.push(inputFile)\n+\n+              for (let file of files) {\n+                let changedTime = fs.statSync(file, { throwIfNoEntry: false })?.mtimeMs ?? null\n+                if (changedTime === null) {\n+                  if (file === inputFile) {\n+                    rebuildStrategy = 'full'\n+                  }\n+                  continue\n                 }\n-                continue\n-              }\n \n-              let prevTime = context.mtimes.get(file)\n-              if (prevTime === changedTime) continue\n+                let prevTime = context.mtimes.get(file)\n+                if (prevTime === changedTime) continue\n \n-              rebuildStrategy = 'full'\n-              context.mtimes.set(file, changedTime)\n+                rebuildStrategy = 'full'\n+                context.mtimes.set(file, changedTime)\n+              }\n+            }\n+            DEBUG && I.end('Register full rebuild paths')\n+\n+            if (\n+              rebuildStrategy === 'full' &&\n+              // We can re-use the compiler if it was created during the\n+              // initial build. If it wasn't, we need to create a new one.\n+              !isInitialBuild\n+            ) {\n+              context.compiler = createCompiler()\n             }\n-          }\n-          DEBUG && I.end('Register full rebuild paths')\n-\n-          if (\n-            rebuildStrategy === 'full' &&\n-            // We can re-use the compiler if it was created during the\n-            // initial build. If it wasn't, we need to create a new one.\n-            !isInitialBuild\n-          ) {\n-            context.compiler = createCompiler()\n-          }\n \n-          let compiler = await context.compiler\n+            let compiler = await context.compiler\n \n-          if (context.scanner === null || rebuildStrategy === 'full') {\n-            DEBUG && I.start('Setup scanner')\n-            let sources = (() => {\n-              // Disable auto source detection\n-              if (compiler.root === 'none') {\n-                return []\n-              }\n-\n-              // No root specified, use the base directory\n-              if (compiler.root === null) {\n-                return [{ base, pattern: '**/*', negated: false }]\n-              }\n+            if (context.scanner === null || rebuildStrategy === 'full') {\n+              DEBUG && I.start('Setup scanner')\n+              let sources = (() => {\n+                // Disable auto source detection\n+                if (compiler.root === 'none') {\n+                  return []\n+                }\n \n-              // Use the specified root\n-              return [{ ...compiler.root, negated: false }]\n-            })().concat(compiler.sources)\n+                // No root specified, use the base directory\n+                if (compiler.root === null) {\n+                  return [{ base, pattern: '**/*', negated: false }]\n+                }\n \n-            // Look for candidates used to generate the CSS\n-            context.scanner = new Scanner({ sources })\n-            DEBUG && I.end('Setup scanner')\n-          }\n+                // Use the specified root\n+                return [{ ...compiler.root, negated: false }]\n+              })().concat(compiler.sources)\n \n-          DEBUG && I.start('Scan for candidates')\n-          let candidates = compiler.features & Features.Utilities ? context.scanner.scan() : []\n-          DEBUG && I.end('Scan for candidates')\n-\n-          if (compiler.features & Features.Utilities) {\n-            DEBUG && I.start('Register dependency messages')\n-            // Add all found files as direct dependencies\n-            // Note: With Turbopack, the input file might not be a resolved path\n-            let resolvedInputFile = path.resolve(base, inputFile)\n-            for (let file of context.scanner.files) {\n-              let absolutePath = path.resolve(file)\n-              // The CSS file cannot be a dependency of itself\n-              if (absolutePath === resolvedInputFile) {\n-                continue\n-              }\n-              result.messages.push({\n-                type: 'dependency',\n-                plugin: '@tailwindcss/postcss',\n-                file: absolutePath,\n-                parent: result.opts.from,\n-              })\n+              // Look for candidates used to generate the CSS\n+              context.scanner = new Scanner({ sources })\n+              DEBUG && I.end('Setup scanner')\n             }\n \n-            // Register dependencies so changes in `base` cause a rebuild while\n-            // giving tools like Vite or Parcel a glob that can be used to limit\n-            // the files that cause a rebuild to only those that match it.\n-            for (let { base: globBase, pattern } of context.scanner.globs) {\n-              // Avoid adding a dependency on the base directory itself, since it\n-              // causes Next.js to start an endless recursion if the `distDir` is\n-              // configured to anything other than the default `.next` dir.\n-              if (pattern === '*' && base === globBase) {\n-                continue\n-              }\n-\n-              if (pattern === '') {\n+            DEBUG && I.start('Scan for candidates')\n+            let candidates = compiler.features & Features.Utilities ? context.scanner.scan() : []\n+            DEBUG && I.end('Scan for candidates')\n+\n+            if (compiler.features & Features.Utilities) {\n+              DEBUG && I.start('Register dependency messages')\n+              // Add all found files as direct dependencies\n+              // Note: With Turbopack, the input file might not be a resolved path\n+              let resolvedInputFile = path.resolve(base, inputFile)\n+              for (let file of context.scanner.files) {\n+                let absolutePath = path.resolve(file)\n+                // The CSS file cannot be a dependency of itself\n+                if (absolutePath === resolvedInputFile) {\n+                  continue\n+                }\n                 result.messages.push({\n                   type: 'dependency',\n                   plugin: '@tailwindcss/postcss',\n-                  file: path.resolve(globBase),\n-                  parent: result.opts.from,\n-                })\n-              } else {\n-                result.messages.push({\n-                  type: 'dir-dependency',\n-                  plugin: '@tailwindcss/postcss',\n-                  dir: path.resolve(globBase),\n-                  glob: pattern,\n+                  file: absolutePath,\n                   parent: result.opts.from,\n                 })\n               }\n+\n+              // Register dependencies so changes in `base` cause a rebuild while\n+              // giving tools like Vite or Parcel a glob that can be used to limit\n+              // the files that cause a rebuild to only those that match it.\n+              for (let { base: globBase, pattern } of context.scanner.globs) {\n+                // Avoid adding a dependency on the base directory itself, since it\n+                // causes Next.js to start an endless recursion if the `distDir` is\n+                // configured to anything other than the default `.next` dir.\n+                if (pattern === '*' && base === globBase) {\n+                  continue\n+                }\n+\n+                if (pattern === '') {\n+                  result.messages.push({\n+                    type: 'dependency',\n+                    plugin: '@tailwindcss/postcss',\n+                    file: path.resolve(globBase),\n+                    parent: result.opts.from,\n+                  })\n+                } else {\n+                  result.messages.push({\n+                    type: 'dir-dependency',\n+                    plugin: '@tailwindcss/postcss',\n+                    dir: path.resolve(globBase),\n+                    glob: pattern,\n+                    parent: result.opts.from,\n+                  })\n+                }\n+              }\n+              DEBUG && I.end('Register dependency messages')\n             }\n-            DEBUG && I.end('Register dependency messages')\n-          }\n \n-          DEBUG && I.start('Build utilities')\n-          let tailwindCssAst = compiler.build(candidates)\n-          DEBUG && I.end('Build utilities')\n+            DEBUG && I.start('Build utilities')\n+            let tailwindCssAst = compiler.build(candidates)\n+            DEBUG && I.end('Build utilities')\n \n-          if (context.tailwindCssAst !== tailwindCssAst) {\n-            if (optimize) {\n-              DEBUG && I.start('Optimization')\n+            if (context.tailwindCssAst !== tailwindCssAst) {\n+              if (optimize) {\n+                DEBUG && I.start('Optimization')\n \n-              DEBUG && I.start('AST -> CSS')\n-              let css = toCss(tailwindCssAst)\n-              DEBUG && I.end('AST -> CSS')\n+                DEBUG && I.start('AST -> CSS')\n+                let css = toCss(tailwindCssAst)\n+                DEBUG && I.end('AST -> CSS')\n \n-              DEBUG && I.start('Lightning CSS')\n-              let ast = optimizeCss(css, {\n-                minify: typeof optimize === 'object' ? optimize.minify : true,\n-              })\n-              DEBUG && I.end('Lightning CSS')\n-\n-              DEBUG && I.start('CSS -> PostCSS AST')\n-              context.optimizedPostCssAst = postcss.parse(ast, result.opts)\n-              DEBUG && I.end('CSS -> PostCSS AST')\n-\n-              DEBUG && I.end('Optimization')\n-            } else {\n-              // Convert our AST to a PostCSS AST\n-              DEBUG && I.start('Transform Tailwind CSS AST into PostCSS AST')\n-              context.cachedPostCssAst = cssAstToPostCssAst(tailwindCssAst, root.source)\n-              DEBUG && I.end('Transform Tailwind CSS AST into PostCSS AST')\n+                DEBUG && I.start('Lightning CSS')\n+                let ast = optimizeCss(css, {\n+                  minify: typeof optimize === 'object' ? optimize.minify : true,\n+                })\n+                DEBUG && I.end('Lightning CSS')\n+\n+                DEBUG && I.start('CSS -> PostCSS AST')\n+                context.optimizedPostCssAst = postcss.parse(ast, result.opts)\n+                DEBUG && I.end('CSS -> PostCSS AST')\n+\n+                DEBUG && I.end('Optimization')\n+              } else {\n+                // Convert our AST to a PostCSS AST\n+                DEBUG && I.start('Transform Tailwind CSS AST into PostCSS AST')\n+                context.cachedPostCssAst = cssAstToPostCssAst(tailwindCssAst, root.source)\n+                DEBUG && I.end('Transform Tailwind CSS AST into PostCSS AST')\n+              }\n             }\n-          }\n \n-          context.tailwindCssAst = tailwindCssAst\n+            context.tailwindCssAst = tailwindCssAst\n+\n+            DEBUG && I.start('Update PostCSS AST')\n+            root.removeAll()\n+            root.append(\n+              optimize\n+                ? context.optimizedPostCssAst.clone().nodes\n+                : context.cachedPostCssAst.clone().nodes,\n+            )\n+\n+            // Trick PostCSS into thinking the indent is 2 spaces, so it uses that\n+            // as the default instead of 4.\n+            root.raws.indent = '  '\n+            DEBUG && I.end('Update PostCSS AST')\n \n-          DEBUG && I.start('Update PostCSS AST')\n-          root.removeAll()\n-          root.append(\n-            optimize\n-              ? context.optimizedPostCssAst.clone().nodes\n-              : context.cachedPostCssAst.clone().nodes,\n-          )\n+            DEBUG && I.end(`[@tailwindcss/postcss] ${relative(base, inputFile)}`)\n+          } catch (error) {\n+            // An error requires a full rebuild to fix\n+            context.compiler = null\n \n-          // Trick PostCSS into thinking the indent is 2 spaces, so it uses that\n-          // as the default instead of 4.\n-          root.raws.indent = '  '\n-          DEBUG && I.end('Update PostCSS AST')\n+            // Ensure all dependencies we have collected thus far are included so that the rebuild\n+            // is correctly triggered\n+            for (let file of context.fullRebuildPaths) {\n+              result.messages.push({\n+                type: 'dependency',\n+                plugin: '@tailwindcss/postcss',\n+                file: path.resolve(file),\n+                parent: result.opts.from,\n+              })\n+            }\n \n-          DEBUG && I.end(`[@tailwindcss/postcss] ${relative(base, inputFile)}`)\n+            // We found that throwing the error will cause PostCSS to no longer watch for changes\n+            // in some situations so we instead log the error and continue with an empty stylesheet.\n+            console.error(error)\n+            root.removeAll()\n+          }\n         },\n       },\n     ],\n"", ""test_patch"": ""diff --git a/integrations/postcss/index.test.ts b/integrations/postcss/index.test.ts\nindex 63a0f019eaf8..9a6e8b4c4e11 100644\n--- a/integrations/postcss/index.test.ts\n+++ b/integrations/postcss/index.test.ts\n@@ -635,3 +635,91 @@ test(\n     await fs.expectFileToContain('project-a/dist/out.css', [candidate`content-['c/src/index.js']`])\n   },\n )\n+\n+test(\n+  'rebuild error recovery',\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""devDependencies\"": {\n+            \""postcss\"": \""^8\"",\n+            \""postcss-cli\"": \""^10\"",\n+            \""tailwindcss\"": \""workspace:^\"",\n+            \""@tailwindcss/postcss\"": \""workspace:^\""\n+          }\n+        }\n+      `,\n+      'postcss.config.js': js`\n+        module.exports = {\n+          plugins: {\n+            '@tailwindcss/postcss': {},\n+          },\n+        }\n+      `,\n+      'src/index.html': html`\n+        <div class=\""underline\""></div>\n+      `,\n+      'src/index.css': css` @import './tailwind.css'; `,\n+      'src/tailwind.css': css`\n+        @reference 'tailwindcss/does-not-exist';\n+        @import 'tailwindcss/utilities';\n+      `,\n+    },\n+  },\n+  async ({ fs, expect, spawn }) => {\n+    let process = await spawn('pnpm postcss src/index.css --output dist/out.css --watch --verbose')\n+\n+    await process.onStderr((message) =>\n+      message.includes('Package path ./does-not-exist is not exported from package'),\n+    )\n+\n+    expect(await fs.dumpFiles('dist/*.css')).toMatchInlineSnapshot(`\n+      \""\n+      --- dist/out.css ---\n+      <EMPTY>\n+      \""\n+    `)\n+\n+    await process.onStderr((message) => message.includes('Waiting for file changes...'))\n+\n+    // Fix the CSS file\n+    await fs.write(\n+      'src/tailwind.css',\n+      css`\n+        @reference 'tailwindcss/theme';\n+        @import 'tailwindcss/utilities';\n+      `,\n+    )\n+    await process.onStderr((message) => message.includes('Finished src/index.css'))\n+\n+    expect(await fs.dumpFiles('dist/*.css')).toMatchInlineSnapshot(`\n+      \""\n+      --- dist/out.css ---\n+      .underline {\n+        text-decoration-line: underline;\n+      }\n+      \""\n+    `)\n+\n+    // Now break the CSS file again\n+    await fs.write(\n+      'src/tailwind.css',\n+      css`\n+        @reference 'tailwindcss/does-not-exist';\n+        @import 'tailwindcss/utilities';\n+      `,\n+    )\n+    await process.onStderr((message) =>\n+      message.includes('Package path ./does-not-exist is not exported from package'),\n+    )\n+    await process.onStderr((message) => message.includes('Finished src/index.css'))\n+\n+    expect(await fs.dumpFiles('dist/*.css')).toMatchInlineSnapshot(`\n+      \""\n+      --- dist/out.css ---\n+      <EMPTY>\n+      \""\n+    `)\n+  },\n+)\n\ndiff --git a/packages/tailwindcss/src/compat/config.test.ts b/packages/tailwindcss/src/compat/config.test.ts\nindex 6bfccb1e3bc1..9e6c3b58a389 100644\n--- a/packages/tailwindcss/src/compat/config.test.ts\n+++ b/packages/tailwindcss/src/compat/config.test.ts\n@@ -1217,7 +1217,7 @@ test('utilities used in @apply must be prefixed', async () => {\n   `)\n \n   // Non-prefixed utilities cause an error\n-  expect(() =>\n+  await expect(\n     compile(\n       css`\n         @config \""./config.js\"";\n@@ -1405,7 +1405,7 @@ test('blocklisted candidates are not generated', async () => {\n })\n \n test('blocklisted candidates cannot be used with `@apply`', async () => {\n-  await expect(() =>\n+  await expect(\n     compile(\n       css`\n         @theme reference {\n\ndiff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex 411e3fe7b426..88ea541a13b0 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -454,9 +454,9 @@ describe('@apply', () => {\n     `)\n   })\n \n-  it('should error when using @apply with a utility that does not exist', () => {\n-    return expect(\n-      compileCss(css`\n+  it('should error when using @apply with a utility that does not exist', async () => {\n+    await expect(\n+      compile(css`\n         @tailwind utilities;\n \n         .foo {\n@@ -468,9 +468,9 @@ describe('@apply', () => {\n     )\n   })\n \n-  it('should error when using @apply with a variant that does not exist', () => {\n-    return expect(\n-      compileCss(css`\n+  it('should error when using @apply with a variant that does not exist', async () => {\n+    await expect(\n+      compile(css`\n         @tailwind utilities;\n \n         .foo {\n\ndiff --git a/packages/tailwindcss/src/prefix.test.ts b/packages/tailwindcss/src/prefix.test.ts\nindex 65e234276994..9556c34e3213 100644\n--- a/packages/tailwindcss/src/prefix.test.ts\n+++ b/packages/tailwindcss/src/prefix.test.ts\n@@ -80,7 +80,7 @@ test('utilities used in @apply must be prefixed', async () => {\n   `)\n \n   // Non-prefixed utilities cause an error\n-  expect(() =>\n+  await expect(\n     compile(css`\n       @theme reference prefix(tw);\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17630"", ""pr_id"": 17630, ""issue_id"": 17622, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Upgrade cli does not output line height separately from the fontsize array\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.1.3\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nNext.js 15.2.5\n\n**What version of Node.js are you using?**\n\nFor example: v22.14.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nUbuntu Linux (24.10)\n\n**Reproduction URL**\n\n/\n\n**Describe your issue**\n\nIn tailwind config, we could do something like this:\n\n```ts\nextend: {\n  fontSize: {\n    \""title-custom\"": [\""50px\"", \""62px\""]\n  }\n}\n```\nWhich would generate\n```css\n.title-custom {\n  font-size: 50px;\n  line-height: 62px;\n}\n```\nUpgrading to v4, the cli outputs\n```css\n --text-title-custom: 50px, 62px;\n```\nAnd it does not generate any classes.\n\n**Expected Behaviour**\n\nThe cli should treat the second element of the array as line-height and add a new variable for it rather than adding it to one variable separated by a comma.\n\n```css\n--text-title-custom: 50px;\n--text-title-custom--line-height: 62px;\n```"", ""issue_word_count"": 201, ""test_files_count"": 2, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/upgrade/js-config.test.ts"", ""packages/tailwindcss/src/compat/apply-config-to-theme.test.ts"", ""packages/tailwindcss/src/compat/apply-config-to-theme.ts""], ""pr_changed_test_files"": [""integrations/upgrade/js-config.test.ts"", ""packages/tailwindcss/src/compat/apply-config-to-theme.test.ts""], ""base_commit"": ""3ab7f1256371d604b4058fa6e67ffb6bac210678"", ""head_commit"": ""d64819a478b5b0778d185f5e2b60f27f16fc2478"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17630"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17630"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-11T11:23:55.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 3ea4c804c13d..86f78ef39488 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -13,6 +13,8 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure the `color-mix(\u2026)` polyfill creates fallbacks for theme variables that reference other theme variables ([#17562](https://github.com/tailwindlabs/tailwindcss/pull/17562))\n - Fix brace expansion in `@source inline('z-{10..0}')` with range going down ([#17591](https://github.com/tailwindlabs/tailwindcss/pull/17591))\n - Ensure container query variant names can contain hyphens ([#17628](https://github.com/tailwindlabs/tailwindcss/pull/17628))\n+- Ensure compatibility with array tuples used in `fontSize` JS theme keys ([#17630](https://github.com/tailwindlabs/tailwindcss/pull/17630))\n+- Upgrade: Convert `fontSize` array tuple syntax to CSS theme variables ([#17630](https://github.com/tailwindlabs/tailwindcss/pull/17630))\n \n ## [4.1.3] - 2025-04-04\n \n\ndiff --git a/packages/tailwindcss/src/compat/apply-config-to-theme.ts b/packages/tailwindcss/src/compat/apply-config-to-theme.ts\nindex d1fec30bc96c..c957d320975e 100644\n--- a/packages/tailwindcss/src/compat/apply-config-to-theme.ts\n+++ b/packages/tailwindcss/src/compat/apply-config-to-theme.ts\n@@ -130,7 +130,16 @@ export function themeableValues(config: ResolvedConfig['theme']): [string[], unk\n     }\n \n     if (Array.isArray(value) && value.every((v) => typeof v === 'string')) {\n-      toAdd.push([path, value.join(', ')])\n+      if (path[0] === 'fontSize') {\n+        toAdd.push([path, value[0]])\n+\n+        if (value.length >= 2) {\n+          toAdd.push([[...path, '-line-height'], value[1]])\n+        }\n+      } else {\n+        toAdd.push([path, value.join(', ')])\n+      }\n+\n       return WalkAction.Skip\n     }\n   })\n"", ""test_patch"": ""diff --git a/integrations/upgrade/js-config.test.ts b/integrations/upgrade/js-config.test.ts\nindex 1c3f5d5984aa..4fe00900c42c 100644\n--- a/integrations/upgrade/js-config.test.ts\n+++ b/integrations/upgrade/js-config.test.ts\n@@ -37,6 +37,9 @@ test(\n               xs: ['0.75rem', { lineHeight: '1rem' }],\n               sm: ['0.875rem', { lineHeight: '1.5rem' }],\n               base: ['1rem', { lineHeight: '2rem' }],\n+              lg: ['1.125rem', '2.5rem'],\n+              xl: ['1.5rem', '3rem', 'invalid'],\n+              '2xl': ['2rem'],\n             },\n             width: {\n               px: '1px',\n@@ -188,6 +191,11 @@ test(\n         --text-sm--line-height: 1.5rem;\n         --text-base: 1rem;\n         --text-base--line-height: 2rem;\n+        --text-lg: 1.125rem;\n+        --text-lg--line-height: 2.5rem;\n+        --text-xl: 1.5rem;\n+        --text-xl--line-height: 3rem;\n+        --text-2xl: 2rem;\n \n         --width-*: initial;\n         --width-0: 0%;\n\ndiff --git a/packages/tailwindcss/src/compat/apply-config-to-theme.test.ts b/packages/tailwindcss/src/compat/apply-config-to-theme.test.ts\nindex 619c99182123..8caec195e607 100644\n--- a/packages/tailwindcss/src/compat/apply-config-to-theme.test.ts\n+++ b/packages/tailwindcss/src/compat/apply-config-to-theme.test.ts\n@@ -52,6 +52,9 @@ test('config values can be merged into the theme', () => {\n                 lineHeight: '1.5',\n               },\n             ],\n+            lg: ['1.125rem', '2'],\n+            xl: ['1.5rem', '3rem', 'invalid'],\n+            '2xl': ['2rem'],\n           },\n \n           letterSpacing: {\n@@ -102,6 +105,21 @@ test('config values can be merged into the theme', () => {\n     '1rem',\n     { '--line-height': '1.5' },\n   ])\n+  expect(theme.resolve('lg', ['--text'])).toEqual('1.125rem')\n+  expect(theme.resolveWith('lg', ['--text'], ['--line-height'])).toEqual([\n+    '1.125rem',\n+    { '--line-height': '2' },\n+  ])\n+  expect(theme.resolve('xl', ['--text'])).toEqual('1.5rem')\n+  expect(theme.resolveWith('xl', ['--text'], ['--line-height'])).toEqual([\n+    '1.5rem',\n+    { '--line-height': '3rem' },\n+  ])\n+  expect(theme.resolve('2xl', ['--text'])).toEqual('2rem')\n+  expect(theme.resolveWith('2xl', ['--text'], ['--line-height'])).toEqual([\n+    '2rem',\n+    {},\n+  ])\n   expect(theme.resolve('super-wide', ['--tracking'])).toEqual('0.25em')\n   expect(theme.resolve('super-loose', ['--leading'])).toEqual('3')\n   expect(theme.resolve('1/2', ['--width'])).toEqual('60%')\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17628"", ""pr_id"": 17628, ""issue_id"": 17614, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Hyphenated custom container sizes aren't handled properly\n**What version of Tailwind CSS are you using?**\n\nv4.1.3\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nTailwind Play\n\n**What version of Node.js are you using?**\n\nTailwind Play\n\n**What browser are you using?**\n\nn/a\n\n**What operating system are you using?**\n\nn/a\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/OFXbKDyZ5G\n\n**Describe your issue**\n\nIt seems hyphenated custom theme properties are supposed to be supported, like in the example the `--color-nice-blue` works just fine with a `bg-nice-blue`.\n\nBut if I try the same with a custom container size I get broken behaviour.\n\nIf I set `--container-custom`, I can apply `@custom:font-bold` and I see it render bold (since we're wider than the specified 2rem). In Tailwind Play's autocomplete, when I type `@cus` I see `@custom:` and `@max-custom:` and `@min-custom:`. This is all as expected.\n\nBut if I set `--container-hyphenated-custom`, the same doesn't work, and I don't see it render bold. In the autocomplete, interestingly, I see `@max-hyphenated-custom:` and `@min-hyphenated-custom:`, but no `@hyphenated-custom:`."", ""issue_word_count"": 197, ""test_files_count"": 2, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/candidate.test.ts"", ""packages/tailwindcss/src/candidate.ts"", ""packages/tailwindcss/src/variants.test.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/candidate.test.ts"", ""packages/tailwindcss/src/variants.test.ts""], ""base_commit"": ""cdecb55702b456383f1b857756532dfdbc45b554"", ""head_commit"": ""113c1726c70cbca10c99cb5d357feba7720e1cd6"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17628"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17628"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-11T10:28:25.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 1b24c91399c8..3ea4c804c13d 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure `color-mix(\u2026)` polyfills do not cause used CSS variables to be removed ([#17555](https://github.com/tailwindlabs/tailwindcss/pull/17555))\n - Ensure the `color-mix(\u2026)` polyfill creates fallbacks for theme variables that reference other theme variables ([#17562](https://github.com/tailwindlabs/tailwindcss/pull/17562))\n - Fix brace expansion in `@source inline('z-{10..0}')` with range going down ([#17591](https://github.com/tailwindlabs/tailwindcss/pull/17591))\n+- Ensure container query variant names can contain hyphens ([#17628](https://github.com/tailwindlabs/tailwindcss/pull/17628))\n \n ## [4.1.3] - 2025-04-04\n \n\ndiff --git a/packages/tailwindcss/src/candidate.ts b/packages/tailwindcss/src/candidate.ts\nindex 406a16aad1b5..27a6b6294a3f 100644\n--- a/packages/tailwindcss/src/candidate.ts\n+++ b/packages/tailwindcss/src/candidate.ts\n@@ -745,14 +745,6 @@ function* findRoots(input: string, exists: (input: string) => boolean): Iterable\n   // Otherwise test every permutation of the input by iteratively removing\n   // everything after the last dash.\n   let idx = input.lastIndexOf('-')\n-  if (idx === -1) {\n-    // Variants starting with `@` are special because they don't need a `-`\n-    // after the `@` (E.g.: `@-lg` should be written as `@lg`).\n-    if (input[0] === '@' && exists('@')) {\n-      yield ['@', input.slice(1)]\n-    }\n-    return\n-  }\n \n   // Determine the root and value by testing permutations of the incoming input.\n   //\n@@ -761,7 +753,7 @@ function* findRoots(input: string, exists: (input: string) => boolean): Iterable\n   // `bg-red-500` -> No match\n   // `bg-red`     -> No match\n   // `bg`         -> Match\n-  do {\n+  while (idx > 0) {\n     let maybeRoot = input.slice(0, idx)\n \n     if (exists(maybeRoot)) {\n@@ -776,5 +768,11 @@ function* findRoots(input: string, exists: (input: string) => boolean): Iterable\n     }\n \n     idx = input.lastIndexOf('-', idx - 1)\n-  } while (idx > 0)\n+  }\n+\n+  // Try '@' variant after permutations. This allows things like `@max` of `@max-foo-bar`\n+  // to match before looking for `@`.\n+  if (input[0] === '@' && exists('@')) {\n+    yield ['@', input.slice(1)]\n+  }\n }\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/candidate.test.ts b/packages/tailwindcss/src/candidate.test.ts\nindex 61be4378afda..3c54bef7a20d 100644\n--- a/packages/tailwindcss/src/candidate.test.ts\n+++ b/packages/tailwindcss/src/candidate.test.ts\n@@ -1294,6 +1294,36 @@ it('should parse a functional variant starting with @', () => {\n   `)\n })\n \n+it('should parse a functional variant starting with @ that has a hyphen', () => {\n+  let utilities = new Utilities()\n+  utilities.static('flex', () => [])\n+\n+  let variants = new Variants()\n+  variants.functional('@', () => {})\n+\n+  expect(run('@foo-bar:flex', { utilities, variants })).toMatchInlineSnapshot(`\n+    [\n+      {\n+        \""important\"": false,\n+        \""kind\"": \""static\"",\n+        \""raw\"": \""@foo-bar:flex\"",\n+        \""root\"": \""flex\"",\n+        \""variants\"": [\n+          {\n+            \""kind\"": \""functional\"",\n+            \""modifier\"": null,\n+            \""root\"": \""@\"",\n+            \""value\"": {\n+              \""kind\"": \""named\"",\n+              \""value\"": \""foo-bar\"",\n+            },\n+          },\n+        ],\n+      },\n+    ]\n+  `)\n+})\n+\n it('should parse a functional variant starting with @ and a modifier', () => {\n   let utilities = new Utilities()\n   utilities.static('flex', () => [])\n\ndiff --git a/packages/tailwindcss/src/variants.test.ts b/packages/tailwindcss/src/variants.test.ts\nindex d6fed0f59208..5da1dcac7572 100644\n--- a/packages/tailwindcss/src/variants.test.ts\n+++ b/packages/tailwindcss/src/variants.test.ts\n@@ -2074,6 +2074,7 @@ test('container queries', async () => {\n       css`\n         @theme {\n           --container-lg: 1024px;\n+          --container-foo-bar: 1440px;\n         }\n         @tailwind utilities;\n       `,\n@@ -2082,20 +2083,38 @@ test('container queries', async () => {\n         '@lg/name:flex',\n         '@[123px]:flex',\n         '@[456px]/name:flex',\n+        '@foo-bar:flex',\n+        '@foo-bar/name:flex',\n \n         '@min-lg:flex',\n         '@min-lg/name:flex',\n         '@min-[123px]:flex',\n         '@min-[456px]/name:flex',\n+        '@min-foo-bar:flex',\n+        '@min-foo-bar/name:flex',\n \n         '@max-lg:flex',\n         '@max-lg/name:flex',\n         '@max-[123px]:flex',\n         '@max-[456px]/name:flex',\n+        '@max-foo-bar:flex',\n+        '@max-foo-bar/name:flex',\n       ],\n     ),\n   ).toMatchInlineSnapshot(`\n-    \""@container name not (min-width: 1024px) {\n+    \""@container name not (min-width: 1440px) {\n+      .\\\\@max-foo-bar\\\\/name\\\\:flex {\n+        display: flex;\n+      }\n+    }\n+\n+    @container not (min-width: 1440px) {\n+      .\\\\@max-foo-bar\\\\:flex {\n+        display: flex;\n+      }\n+    }\n+\n+    @container name not (min-width: 1024px) {\n       .\\\\@max-lg\\\\/name\\\\:flex {\n         display: flex;\n       }\n@@ -2153,6 +2172,30 @@ test('container queries', async () => {\n       .\\\\@min-lg\\\\:flex {\n         display: flex;\n       }\n+    }\n+\n+    @container name (min-width: 1440px) {\n+      .\\\\@foo-bar\\\\/name\\\\:flex {\n+        display: flex;\n+      }\n+    }\n+\n+    @container (min-width: 1440px) {\n+      .\\\\@foo-bar\\\\:flex {\n+        display: flex;\n+      }\n+    }\n+\n+    @container name (min-width: 1440px) {\n+      .\\\\@min-foo-bar\\\\/name\\\\:flex {\n+        display: flex;\n+      }\n+    }\n+\n+    @container (min-width: 1440px) {\n+      .\\\\@min-foo-bar\\\\:flex {\n+        display: flex;\n+      }\n     }\""\n   `)\n })\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17595"", ""pr_id"": 17595, ""issue_id"": 17569, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""tailwind .pages folder error\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.1.1\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 6.2.0\n\n**What version of Node.js are you using?**\n\nv20.18.1\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nhttps://github.com/jullic/tailwind-.work-folder-error-\n\n**Describe your issue**\n\n\n\nI'm using vite. \ntailwind version 4.1.1\n\nIf the name of the folder where the components are located ends with \u201c.pages\u201d, then the utility classes used in the components in that folder are not applied.\n\nI spent several hours trying to figure out what the problem might be, but I haven't figured it out yet, maybe there are some other patterns in which utility classes are not applied. \n"", ""issue_word_count"": 175, ""test_files_count"": 1, ""non_test_files_count"": 4, ""pr_changed_files"": [""CHANGELOG.md"", ""crates/ignore/src/gitignore.rs"", ""crates/oxide/src/scanner/auto_source_detection.rs"", ""crates/oxide/src/scanner/mod.rs"", ""crates/oxide/tests/scanner.rs""], ""pr_changed_test_files"": [""crates/oxide/tests/scanner.rs""], ""base_commit"": ""d801d8dc5492efec5b830188c2061e31b0379470"", ""head_commit"": ""44d5d89365cf4db411049e8f1bb6ddb6b10245af"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17595"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17595"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-12T11:30:17.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 351d4e4837a5..914177cfbb0e 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -20,6 +20,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure container query variant names can contain hyphens ([#17628](https://github.com/tailwindlabs/tailwindcss/pull/17628))\n - Ensure `shadow-inherit`, `inset-shadow-inherit`, `drop-shadow-inherit`, and `text-shadow-inherit` inherits the shadow color ([#17647](https://github.com/tailwindlabs/tailwindcss/pull/17647))\n - Ensure compatibility with array tuples used in `fontSize` JS theme keys ([#17630](https://github.com/tailwindlabs/tailwindcss/pull/17630))\n+- Ensure folders with binary file extensions in its name are scanned for utilities ([#17595](https://github.com/tailwindlabs/tailwindcss/pull/17595))\n - Upgrade: Convert `fontSize` array tuple syntax to CSS theme variables ([#17630](https://github.com/tailwindlabs/tailwindcss/pull/17630))\n \n ## [4.1.3] - 2025-04-04\n\ndiff --git a/crates/ignore/src/gitignore.rs b/crates/ignore/src/gitignore.rs\nindex 30f1ccef2d7c..7da86153cf79 100644\n--- a/crates/ignore/src/gitignore.rs\n+++ b/crates/ignore/src/gitignore.rs\n@@ -85,6 +85,8 @@ pub struct Gitignore {\n     num_ignores: u64,\n     num_whitelists: u64,\n     matches: Option<Arc<Pool<Vec<usize>>>>,\n+    // CHANGED: Add a flag to have Gitignore rules that apply only to files.\n+    only_on_files: bool,\n }\n \n impl Gitignore {\n@@ -140,6 +142,8 @@ impl Gitignore {\n             num_ignores: 0,\n             num_whitelists: 0,\n             matches: None,\n+            // CHANGED: Add a flag to have Gitignore rules that apply only to files.\n+            only_on_files: false,\n         }\n     }\n \n@@ -240,6 +244,10 @@ impl Gitignore {\n         if self.is_empty() {\n             return Match::None;\n         }\n+        // CHANGED: Rules marked as only_on_files can not match against directories.\n+        if self.only_on_files && is_dir {\n+            return Match::None;\n+        }\n         let path = path.as_ref();\n         let mut matches = self.matches.as_ref().unwrap().get();\n         let candidate = Candidate::new(path);\n@@ -295,6 +303,8 @@ pub struct GitignoreBuilder {\n     root: PathBuf,\n     globs: Vec<Glob>,\n     case_insensitive: bool,\n+    // CHANGED: Add a flag to have Gitignore rules that apply only to files.\n+    only_on_files: bool,\n }\n \n impl GitignoreBuilder {\n@@ -311,6 +321,8 @@ impl GitignoreBuilder {\n             root: strip_prefix(\""./\"", root).unwrap_or(root).to_path_buf(),\n             globs: vec![],\n             case_insensitive: false,\n+            // CHANGED: Add a flag to have Gitignore rules that apply only to files.\n+            only_on_files: false,\n         }\n     }\n \n@@ -331,6 +343,8 @@ impl GitignoreBuilder {\n             num_ignores: nignore as u64,\n             num_whitelists: nwhite as u64,\n             matches: Some(Arc::new(Pool::new(|| vec![]))),\n+            // CHANGED: Add a flag to have Gitignore rules that apply only to files.\n+            only_on_files: self.only_on_files,\n         })\n     }\n \n@@ -514,6 +528,16 @@ impl GitignoreBuilder {\n         self.case_insensitive = yes;\n         Ok(self)\n     }\n+\n+    /// CHANGED: Add a flag to have Gitignore rules that apply only to files.\n+    ///\n+    /// If this is set, then the globs will only be matched against file paths.\n+    /// This will ensure that ignore rules like `*.pages` will _only_ ignore\n+    /// files ending in `.pages` and not folders ending in `.pages`.\n+    pub fn only_on_files(&mut self, yes: bool) -> &mut GitignoreBuilder {\n+        self.only_on_files = yes;\n+        self\n+    }\n }\n \n /// Return the file path of the current environment's global gitignore file.\n\ndiff --git a/crates/oxide/src/scanner/auto_source_detection.rs b/crates/oxide/src/scanner/auto_source_detection.rs\nindex e9b7f64aacbc..0d723a1ab1f5 100644\n--- a/crates/oxide/src/scanner/auto_source_detection.rs\n+++ b/crates/oxide/src/scanner/auto_source_detection.rs\n@@ -10,15 +10,21 @@ use std::sync;\n /// - Ignoring common binary file extensions like `.png` and `.jpg`\n /// - Ignoring common files like `yarn.lock` and `package-lock.json`\n ///\n-pub static RULES: sync::LazyLock<Gitignore> = sync::LazyLock::new(|| {\n+pub static RULES: sync::LazyLock<Vec<Gitignore>> = sync::LazyLock::new(|| {\n     let mut builder = GitignoreBuilder::new(\""\"");\n \n     builder.add_line(None, &IGNORED_CONTENT_DIRS_GLOB).unwrap();\n     builder.add_line(None, &IGNORED_EXTENSIONS_GLOB).unwrap();\n-    builder.add_line(None, &BINARY_EXTENSIONS_GLOB).unwrap();\n     builder.add_line(None, &IGNORED_FILES_GLOB).unwrap();\n \n-    builder.build().unwrap()\n+    // Ensure these rules do not match on folder names\n+    let mut file_only_builder = GitignoreBuilder::new(\""\"");\n+    file_only_builder\n+        .only_on_files(true)\n+        .add_line(None, &BINARY_EXTENSIONS_GLOB)\n+        .unwrap();\n+\n+    vec![builder.build().unwrap(), file_only_builder.build().unwrap()]\n });\n \n pub static IGNORED_CONTENT_DIRS: sync::LazyLock<Vec<&'static str>> = sync::LazyLock::new(|| {\n\ndiff --git a/crates/oxide/src/scanner/mod.rs b/crates/oxide/src/scanner/mod.rs\nindex fad6fa712da4..5512ad000354 100644\n--- a/crates/oxide/src/scanner/mod.rs\n+++ b/crates/oxide/src/scanner/mod.rs\n@@ -630,7 +630,9 @@ fn create_walker(sources: Sources) -> Option<WalkBuilder> {\n     }\n \n     // Setup auto source detection rules\n-    builder.add_gitignore(auto_source_detection::RULES.clone());\n+    for ignore in auto_source_detection::RULES.iter() {\n+        builder.add_gitignore(ignore.clone());\n+    }\n \n     // Setup ignores based on `@source` definitions\n     for (base, patterns) in ignores {\n"", ""test_patch"": ""diff --git a/crates/oxide/tests/scanner.rs b/crates/oxide/tests/scanner.rs\nindex 681d63620f22..4003ff253048 100644\n--- a/crates/oxide/tests/scanner.rs\n+++ b/crates/oxide/tests/scanner.rs\n@@ -311,6 +311,31 @@ mod scanner {\n         assert_eq!(normalized_sources, vec![\""**/*\""]);\n     }\n \n+    // https://github.com/tailwindlabs/tailwindcss/issues/17569\n+    #[test]\n+    fn it_should_not_ignore_folders_that_end_with_a_binary_extension() {\n+        let ScanResult {\n+            files,\n+            globs,\n+            normalized_sources,\n+            ..\n+        } = scan(&[\n+            // Looks like `.pages` binary extension, but it's a folder\n+            (\""some.pages/index.html\"", \""content-['some.pages/index.html']\""),\n+            // Ignore a specific folder. This is to ensure that this still \""wins\"" from the internal\n+            // solution of dealing with binary extensions for files only.\n+            (\"".gitignore\"", \""other.pages\""),\n+            (\n+                \""other.pages/index.html\"",\n+                \""content-['other.pages/index.html']\"",\n+            ),\n+        ]);\n+\n+        assert_eq!(files, vec![\""some.pages/index.html\""]);\n+        assert_eq!(globs, vec![\""*\"", \""some.pages/**/*.{aspx,astro,cjs,cts,eex,erb,gjs,gts,haml,handlebars,hbs,heex,html,jade,js,jsx,liquid,md,mdx,mjs,mts,mustache,njk,nunjucks,php,pug,py,razor,rb,rhtml,rs,slim,svelte,tpl,ts,tsx,twig,vue}\""]);\n+        assert_eq!(normalized_sources, vec![\""**/*\""]);\n+    }\n+\n     #[test]\n     fn it_should_ignore_known_extensions() {\n         let ScanResult {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17591"", ""pr_id"": 17591, ""issue_id"": 17576, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Unused test data in brace-expansion.test.ts\nI found an issue in the `brace-expansion.test.ts` file where there's an unused test case at line 20.\n\n**File**: [packages/tailwindcss/src/utils/brace-expansion.test.ts](https://github.com/tailwindlabs/tailwindcss/blob/5a77c9dfc4bcc1f83fe3269fbbcc27386d5e8572/packages/tailwindcss/src/utils/brace-expansion.test.ts#L20)\n\n**Issue**: The test case for `'a/{0..10..5}/b'` is incorrectly structured. The third array element `['a/{10..0..5}/b', ['a/10/b', 'a/5/b', 'a/0/b']]` has no effect on the test execution.\n\n**Current code**:\n```ts\n...\n[\n  'a/{0..10..5}/b',\n  ['a/0/b', 'a/5/b', 'a/10/b'],\n  ['a/{10..0..5}/b', ['a/10/b', 'a/5/b', 'a/0/b']],\n],\n...\n```\n\n**Expected structure**:\n```ts\n...\n['a/{0..10..5}/b', ['a/0/b', 'a/5/b', 'a/10/b']],\n['a/{10..0..5}/b', ['a/10/b', 'a/5/b', 'a/0/b']],\n...\n```\n\nI'm not sure what the original intention of this array was. If I move this array to the parent level, the test fails, meaning `expand('a/{10..0..5}/b')` does not return `['a/10/b', 'a/5/b', 'a/0/b']`. The actual output is `['a/0/b', 'a/10/b', 'a/5/b']`.\n"", ""issue_word_count"": 210, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utils/brace-expansion.test.ts"", ""packages/tailwindcss/src/utils/brace-expansion.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utils/brace-expansion.test.ts""], ""base_commit"": ""3e9cf87adf8e226ff8421d1f8b8d7317123c2702"", ""head_commit"": ""564dcce290fe93b626ab926546e1464b6dcbbdba"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17591"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17591"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-07T13:48:19.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex d76c07b34352..1b24c91399c8 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -11,6 +11,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Ensure `color-mix(\u2026)` polyfills do not cause used CSS variables to be removed ([#17555](https://github.com/tailwindlabs/tailwindcss/pull/17555))\n - Ensure the `color-mix(\u2026)` polyfill creates fallbacks for theme variables that reference other theme variables ([#17562](https://github.com/tailwindlabs/tailwindcss/pull/17562))\n+- Fix brace expansion in `@source inline('z-{10..0}')` with range going down ([#17591](https://github.com/tailwindlabs/tailwindcss/pull/17591))\n \n ## [4.1.3] - 2025-04-04\n \n\ndiff --git a/packages/tailwindcss/src/utils/brace-expansion.ts b/packages/tailwindcss/src/utils/brace-expansion.ts\nindex 052e8848a059..ee382cd82a29 100644\n--- a/packages/tailwindcss/src/utils/brace-expansion.ts\n+++ b/packages/tailwindcss/src/utils/brace-expansion.ts\n@@ -78,16 +78,13 @@ function expandSequence(seq: string): string[] {\n     if (step === 0) {\n       throw new Error('Step cannot be zero in sequence expansion.')\n     }\n-    if (step > 0) {\n-      for (let i = startNum; i <= endNum; i += step) {\n-        let numStr = i.toString()\n-        result.push(numStr)\n-      }\n-    } else {\n-      for (let i = startNum; i >= endNum; i += step) {\n-        let numStr = i.toString()\n-        result.push(numStr)\n-      }\n+\n+    let increasing = startNum < endNum\n+    if (increasing && step < 0) step = -step\n+    if (!increasing && step > 0) step = -step\n+\n+    for (let i = startNum; increasing ? i <= endNum : i >= endNum; i += step) {\n+      result.push(i.toString())\n     }\n   }\n   return result\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utils/brace-expansion.test.ts b/packages/tailwindcss/src/utils/brace-expansion.test.ts\nindex 8b1932bf1110..bab93ac434a8 100644\n--- a/packages/tailwindcss/src/utils/brace-expansion.test.ts\n+++ b/packages/tailwindcss/src/utils/brace-expansion.test.ts\n@@ -14,11 +14,10 @@ describe('expand(\u2026)', () => {\n     ['a/{0..5}/b', ['a/0/b', 'a/1/b', 'a/2/b', 'a/3/b', 'a/4/b', 'a/5/b']],\n     ['a/{-5..0}/b', ['a/-5/b', 'a/-4/b', 'a/-3/b', 'a/-2/b', 'a/-1/b', 'a/0/b']],\n     ['a/{0..-5}/b', ['a/0/b', 'a/-1/b', 'a/-2/b', 'a/-3/b', 'a/-4/b', 'a/-5/b']],\n-    [\n-      'a/{0..10..5}/b',\n-      ['a/0/b', 'a/5/b', 'a/10/b'],\n-      ['a/{10..0..5}/b', ['a/10/b', 'a/5/b', 'a/0/b']],\n-    ],\n+    ['a/{0..10..5}/b', ['a/0/b', 'a/5/b', 'a/10/b']],\n+    ['a/{0..10..-5}/b', ['a/10/b', 'a/5/b', 'a/0/b']],\n+    ['a/{10..0..5}/b', ['a/10/b', 'a/5/b', 'a/0/b']],\n+    ['a/{10..0..-5}/b', ['a/0/b', 'a/5/b', 'a/10/b']],\n \n     // Numeric range with padding (we do not support padding)\n     ['a/{00..05}/b', ['a/0/b', 'a/1/b', 'a/2/b', 'a/3/b', 'a/4/b', 'a/5/b']],\n@@ -64,7 +63,7 @@ describe('expand(\u2026)', () => {\n \n     // Should not try to expand ranges with decimals\n     ['{1.1..2.2}', ['1.1..2.2']],\n-  ])('should expand %s', (input, expected) => {\n+  ])('should expand %s (%#)', (input, expected) => {\n     expect(expand(input).sort()).toEqual(expected.sort())\n   })\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17562"", ""pr_id"": 17562, ""issue_id"": 17556, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Build warning for `css-syntax-error` when using `divider` component from daisyui with tailwind v4.1\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.1.2\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nSvelteKit 2.20.3\n\n**What version of Node.js are you using?**\n\nv22.14.0\n\n**What version of Daisyui are you using?**\n\nv5.0.12\n\n**What browser are you using?**\n\nN/A\n\n**What operating system are you using?**\n\nFedora 40\n\n**Reproduction URL**\n\nhttps://github.com/velut/tw-daisyui-divider-issue\n\n**Describe your issue**\n\nAfter upgrading to tailwind v4.1 a warning occurs during the build process if using the [divider](https://daisyui.com/components/divider/) component from daisyui. On tailwind v4.0 this warning did not appear.\n\n```\nrendering chunks (4)...warnings when minifying css:\n\u25b2 [WARNING] Unexpected \"")\"" [css-syntax-error]\n\n    <stdin>:2:11914:\n      2 \u2502 ...olor-mix(in lab, red, red)){:is(){background-color:color-mix(in ...\n        \u2575                                    ^\n```\n\nAfter analyzing the compiled code the empty `:is()` appears here:\n\n```\n@supports (color: color-mix(in lab, red, red)) {\n    :is() {\n      background-color: color-mix(\n        in oklab,\n        var(--color-base-content) 10%,\n        transparent\n      );\n    }\n  }\n```\n\nThis block of css is not generated when building with tailwind v4.0."", ""issue_word_count"": 234, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/ast.ts"", ""packages/tailwindcss/src/index.test.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/index.test.ts""], ""base_commit"": ""811e97d61afabcda8858183add91772abd6b4cb6"", ""head_commit"": ""91f533b9d0949a07cacf176d113bed64856e6876"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17562"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17562"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-07T09:42:02.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 3f7f160d899f..d76c07b34352 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -10,6 +10,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Fixed\n \n - Ensure `color-mix(\u2026)` polyfills do not cause used CSS variables to be removed ([#17555](https://github.com/tailwindlabs/tailwindcss/pull/17555))\n+- Ensure the `color-mix(\u2026)` polyfill creates fallbacks for theme variables that reference other theme variables ([#17562](https://github.com/tailwindlabs/tailwindcss/pull/17562))\n \n ## [4.1.3] - 2025-04-04\n \n\ndiff --git a/packages/tailwindcss/src/ast.ts b/packages/tailwindcss/src/ast.ts\nindex f15191118d68..3db0432dd3a9 100644\n--- a/packages/tailwindcss/src/ast.ts\n+++ b/packages/tailwindcss/src/ast.ts\n@@ -542,6 +542,7 @@ export function optimizeAst(\n         let requiresPolyfill = false\n         ValueParser.walk(ast, (node, { replaceWith }) => {\n           if (node.kind !== 'function' || node.value !== 'color-mix') return\n+\n           let containsUnresolvableVars = false\n           let containsCurrentcolor = false\n           ValueParser.walk(node.nodes, (node, { replaceWith }) => {\n@@ -550,17 +551,47 @@ export function optimizeAst(\n               requiresPolyfill = true\n               return\n             }\n-            if (node.kind !== 'function' || node.value !== 'var') return\n-            let firstChild = node.nodes[0]\n-            if (!firstChild || firstChild.kind !== 'word') return\n-            requiresPolyfill = true\n-            let inlinedColor = designSystem.theme.resolveValue(null, [firstChild.value as any])\n-            if (!inlinedColor) {\n-              containsUnresolvableVars = true\n-              return\n-            }\n+\n+            let varNode: ValueParser.ValueAstNode | null = node\n+            let inlinedColor: string | null = null\n+            let seenVariables = new Set<string>()\n+            do {\n+              if (varNode.kind !== 'function' || varNode.value !== 'var') return\n+              let firstChild = varNode.nodes[0]\n+              if (!firstChild || firstChild.kind !== 'word') return\n+\n+              let variableName = firstChild.value\n+\n+              if (seenVariables.has(variableName)) {\n+                containsUnresolvableVars = true\n+                return\n+              }\n+\n+              seenVariables.add(variableName)\n+\n+              requiresPolyfill = true\n+\n+              inlinedColor = designSystem.theme.resolveValue(null, [firstChild.value as any])\n+              if (!inlinedColor) {\n+                containsUnresolvableVars = true\n+                return\n+              }\n+              if (inlinedColor.toLowerCase() === 'currentcolor') {\n+                containsCurrentcolor = true\n+                return\n+              }\n+\n+              if (inlinedColor.startsWith('var(')) {\n+                let subAst = ValueParser.parse(inlinedColor)\n+                varNode = subAst[0]\n+              } else {\n+                varNode = null\n+              }\n+            } while (varNode)\n+\n             replaceWith({ kind: 'word', value: inlinedColor })\n           })\n+\n           if (containsUnresolvableVars || containsCurrentcolor) {\n             let separatorIndex = node.nodes.findIndex(\n               (node) => node.kind === 'separator' && node.value.trim().includes(','),\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex 707e8f02c875..411e3fe7b426 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -4764,6 +4764,36 @@ describe('`color-mix(\u2026)` polyfill', () => {\n     `)\n   })\n \n+  it('creates an inlined variable version of the color-mix(\u2026) usages when it resolves to a var(\u2026) containing another theme variable', async () => {\n+    await expect(\n+      compileCss(\n+        css`\n+          @theme {\n+            --color-red: var(--color-red-500);\n+            --color-red-500: oklch(63.7% 0.237 25.331);\n+          }\n+          @tailwind utilities;\n+        `,\n+        ['text-red/50'],\n+      ),\n+    ).resolves.toMatchInlineSnapshot(`\n+      \"":root, :host {\n+        --color-red: var(--color-red-500);\n+        --color-red-500: oklch(63.7% .237 25.331);\n+      }\n+\n+      .text-red\\\\/50 {\n+        color: #fb2c3680;\n+      }\n+\n+      @supports (color: color-mix(in lab, red, red)) {\n+        .text-red\\\\/50 {\n+          color: color-mix(in oklab, var(--color-red) 50%, transparent);\n+        }\n+      }\""\n+    `)\n+  })\n+\n   it('works for color values in the first and second position', async () => {\n     await expect(\n       compileCss(\n@@ -4971,6 +5001,34 @@ describe('`color-mix(\u2026)` polyfill', () => {\n     `)\n   })\n \n+  it('uses the first color value as the fallback when the `color-mix(\u2026)` function contains theme variables that resolves to other variables', async () => {\n+    await expect(\n+      compileCss(\n+        css`\n+          @tailwind utilities;\n+          @theme {\n+            --color-red: var(--my-red);\n+          }\n+        `,\n+        ['text-red/50'],\n+      ),\n+    ).resolves.toMatchInlineSnapshot(`\n+      \"".text-red\\\\/50 {\n+        color: var(--color-red);\n+      }\n+\n+      @supports (color: color-mix(in lab, red, red)) {\n+        .text-red\\\\/50 {\n+          color: color-mix(in oklab, var(--color-red) 50%, transparent);\n+        }\n+      }\n+\n+      :root, :host {\n+        --color-red: var(--my-red);\n+      }\""\n+    `)\n+  })\n+\n   it('uses the first color value of the inner most `color-mix(\u2026)` function as the fallback when nested `color-mix(\u2026)` function all contain non-theme variables', async () => {\n     await expect(\n       compileCss(\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17554"", ""pr_id"": 17554, ""issue_id"": 17508, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Tailwind CSS Not Updating Global Styles on Latest Version\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.1.1\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nNext.js 15.2.4\n\n**What version of Node.js are you using?**\n\nv22.12.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nmacOS\n\n\nAfter updating to the latest version of Tailwind CSS, global styles defined in global.css are not updating properly. The issue persists even after clearing the Next.js cache and restarting the development server. This was not an issue in the previous versions.\n\nhttps://github.com/user-attachments/assets/69c7097e-9d47-48ab-8352-b90c0791c194\n"", ""issue_word_count"": 151, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/@tailwindcss-postcss/src/fixtures/example-project/input.css"", ""packages/@tailwindcss-postcss/src/index.test.ts"", ""packages/@tailwindcss-postcss/src/index.ts""], ""pr_changed_test_files"": [""packages/@tailwindcss-postcss/src/index.test.ts""], ""base_commit"": ""2fd7c8d9672347120f86bb446785aa2750c0a603"", ""head_commit"": ""221d0ed348265f05cd846a5eaff850f343df5b12"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17554"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17554"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-04T12:58:50.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex a4b615ca08d4..a96a1d89ea1a 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -10,6 +10,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Fixed\n \n - Show warning when using unsupported bare value data type in `--value(\u2026)` ([#17464](https://github.com/tailwindlabs/tailwindcss/pull/17464))\n+- PostCSS: Resolve an issue where changes to the input CSS file showed outdated content when using Turbopack ([#17554](https://github.com/tailwindlabs/tailwindcss/pull/17554))\n \n ## [4.1.2] - 2025-04-03\n \n\ndiff --git a/packages/@tailwindcss-postcss/src/fixtures/example-project/input.css b/packages/@tailwindcss-postcss/src/fixtures/example-project/input.css\nnew file mode 100644\nindex 000000000000..f1af498fc1c6\n--- /dev/null\n+++ b/packages/@tailwindcss-postcss/src/fixtures/example-project/input.css\n@@ -0,0 +1 @@\n+/* the content for this file is set in the tests */\n\ndiff --git a/packages/@tailwindcss-postcss/src/index.ts b/packages/@tailwindcss-postcss/src/index.ts\nindex e728c2f9506e..bac5c5b9a9f9 100644\n--- a/packages/@tailwindcss-postcss/src/index.ts\n+++ b/packages/@tailwindcss-postcss/src/index.ts\n@@ -223,10 +223,12 @@ function tailwindcss(opts: PluginOptions = {}): AcceptedPlugin {\n           if (compiler.features & Features.Utilities) {\n             DEBUG && I.start('Register dependency messages')\n             // Add all found files as direct dependencies\n+            // Note: With Turbopack, the input file might not be a resolved path\n+            let resolvedInputFile = path.resolve(base, inputFile)\n             for (let file of context.scanner.files) {\n               let absolutePath = path.resolve(file)\n               // The CSS file cannot be a dependency of itself\n-              if (absolutePath === result.opts.from) {\n+              if (absolutePath === resolvedInputFile) {\n                 continue\n               }\n               result.messages.push({\n"", ""test_patch"": ""diff --git a/packages/@tailwindcss-postcss/src/index.test.ts b/packages/@tailwindcss-postcss/src/index.test.ts\nindex 5827d819d365..4227d6fbbf93 100644\n--- a/packages/@tailwindcss-postcss/src/index.test.ts\n+++ b/packages/@tailwindcss-postcss/src/index.test.ts\n@@ -420,3 +420,25 @@ describe('concurrent builds', () => {\n     expect(await promise2).toContain('.red')\n   })\n })\n+\n+test('does not register the input file as a dependency, even if it is passed in as relative path', async () => {\n+  let processor = postcss([\n+    tailwindcss({ base: `${__dirname}/fixtures/example-project`, optimize: { minify: false } }),\n+  ])\n+\n+  let result = await processor.process(`@tailwind utilities`, { from: './input.css' })\n+\n+  expect(result.css.trim()).toMatchInlineSnapshot(`\n+    \"".underline {\n+      text-decoration-line: underline;\n+    }\""\n+  `)\n+\n+  // Check for dependency messages\n+  expect(result.messages).not.toContainEqual({\n+    type: 'dependency',\n+    file: expect.stringMatching(/input.css$/g),\n+    parent: expect.any(String),\n+    plugin: expect.any(String),\n+  })\n+})\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17533"", ""pr_id"": 17533, ""issue_id"": 17512, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Missing global.css file when using Tailwindcss Vite plugin\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.1.1\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nQwik 1.13.0, Vite 5.3.5\n\n**What version of Node.js are you using?**\n\nv23.8.0\n\n**What browser are you using?**\n\nEdge\n\n**What operating system are you using?**\n\nWindows\n\n**Reproduction URL**\n\nhttps://github.com/[rasmus-dybmose/qwik-tailwindcss](https://github.com/rasmus-dybmose/qwik-tailwindcss)\n\n**Describe your issue**\n\nTailwindcss is not working when using the latest version (v4.1.1) if I change the version to v4.0.17 (fixed) it works again.\n\nIt-looks like the browser can't fetch the ./src/global.css file, it dissaperes if I add the tailwindcss plugin to vite\n\nhttps://github.com/user-attachments/assets/e008d5eb-f92b-4b96-9fc1-27e8b15235ee"", ""issue_word_count"": 178, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/qwik.test.ts"", ""packages/@tailwindcss-vite/src/index.ts""], ""pr_changed_test_files"": [""integrations/vite/qwik.test.ts""], ""base_commit"": ""4c99367b7b1ca3a01d30950dee8908354ed4a415"", ""head_commit"": ""aaad9b060559acf64123d97e347417ebb8cfac2d"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17533"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17533"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-03T16:50:16.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex ae525cc8c69b..b53d74ef35fd 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -20,6 +20,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - PostCSS: Ensure files containing `@tailwind utilities` are processed ([#17514](https://github.com/tailwindlabs/tailwindcss/pull/17514))\n - Ensure the `color-mix(\u2026)` polyfill creates fallbacks even when using colors that cannot be statically analyzed ([#17513](https://github.com/tailwindlabs/tailwindcss/pull/17513))\n - Fix slow incremental builds with `@tailwindcss/vite` and `@tailwindcss/postscss` (especially on Windows) ([#17511](https://github.com/tailwindlabs/tailwindcss/pull/17511))\n+- Vite: Fix an issue with Qwik setups ([#17533](https://github.com/tailwindlabs/tailwindcss/pull/17533))\n \n ## [4.1.1] - 2025-04-02\n \n\ndiff --git a/packages/@tailwindcss-vite/src/index.ts b/packages/@tailwindcss-vite/src/index.ts\nindex b47201b247a6..a484583a3ec3 100644\n--- a/packages/@tailwindcss-vite/src/index.ts\n+++ b/packages/@tailwindcss-vite/src/index.ts\n@@ -184,7 +184,15 @@ class Root {\n     _addWatchFile: (file: string) => void,\n     I: Instrumentation,\n   ): Promise<string | false> {\n+    let inputPath = idToPath(this.id)\n+\n     function addWatchFile(file: string) {\n+      // Don't watch the input file since it's already a dependency anc causes\n+      // issues with some setups (e.g. Qwik).\n+      if (file === inputPath) {\n+        return\n+      }\n+\n       // Scanning `.svg` file containing a `#` or `?` in the path will\n       // crash Vite. We work around this for now by ignoring updates to them.\n       //\n@@ -196,7 +204,6 @@ class Root {\n     }\n \n     let requiresBuildPromise = this.requiresBuild()\n-    let inputPath = idToPath(this.id)\n     let inputBase = path.dirname(path.resolve(inputPath))\n \n     if (!this.compiler || !this.scanner || (await requiresBuildPromise)) {\n"", ""test_patch"": ""diff --git a/integrations/vite/qwik.test.ts b/integrations/vite/qwik.test.ts\nnew file mode 100644\nindex 000000000000..42db6563aa7a\n--- /dev/null\n+++ b/integrations/vite/qwik.test.ts\n@@ -0,0 +1,100 @@\n+import { candidate, css, fetchStyles, json, retryAssertion, test, ts } from '../utils'\n+\n+test(\n+  'dev mode',\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""type\"": \""module\"",\n+          \""dependencies\"": {\n+            \""@builder.io/qwik\"": \""^1\"",\n+            \""@builder.io/qwik-city\"": \""^1\"",\n+            \""vite\"": \""^5\"",\n+            \""@tailwindcss/vite\"": \""workspace:^\"",\n+            \""tailwindcss\"": \""workspace:^\""\n+          }\n+        }\n+      `,\n+      'vite.config.ts': ts`\n+        import { defineConfig } from 'vite'\n+        import { qwikVite } from '@builder.io/qwik/optimizer'\n+        import { qwikCity } from '@builder.io/qwik-city/vite'\n+        import tailwindcss from '@tailwindcss/vite'\n+\n+        export default defineConfig(() => {\n+          return {\n+            plugins: [tailwindcss(), qwikCity(), qwikVite()],\n+          }\n+        })\n+      `,\n+      'src/root.tsx': ts`\n+        import { component$ } from '@builder.io/qwik'\n+        import { QwikCityProvider, RouterOutlet } from '@builder.io/qwik-city'\n+\n+        import './global.css'\n+\n+        export default component$(() => {\n+          return (\n+            <QwikCityProvider>\n+              <head></head>\n+              <body>\n+                <RouterOutlet />\n+              </body>\n+            </QwikCityProvider>\n+          )\n+        })\n+      `,\n+      'src/global.css': css`@import 'tailwindcss/utilities.css';`,\n+      'src/entry.ssr.tsx': ts`\n+        import { renderToStream, type RenderToStreamOptions } from '@builder.io/qwik/server'\n+        import Root from './root'\n+\n+        export default function (opts: RenderToStreamOptions) {\n+          return renderToStream(<Root />, opts)\n+        }\n+      `,\n+      'src/routes/index.tsx': ts`\n+        import { component$ } from '@builder.io/qwik'\n+\n+        export default component$(() => {\n+          return <h1 class=\""underline\"">Hello World!</h1>\n+        })\n+      `,\n+    },\n+  },\n+  async ({ fs, spawn, expect }) => {\n+    let process = await spawn('pnpm vite --mode ssr')\n+    await process.onStdout((m) => m.includes('ready in'))\n+\n+    let url = ''\n+    await process.onStdout((m) => {\n+      console.log(m)\n+      let match = /Local:\\s*(http.*)\\//.exec(m)\n+      if (match) url = match[1]\n+      return Boolean(url)\n+    })\n+\n+    await retryAssertion(async () => {\n+      let css = await fetchStyles(url)\n+      expect(css).toContain(candidate`underline`)\n+    })\n+\n+    await retryAssertion(async () => {\n+      await fs.write(\n+        'src/routes/index.tsx',\n+        ts`\n+          import { component$ } from '@builder.io/qwik'\n+\n+          export default component$(() => {\n+            return <h1 class=\""underline flex\"">Hello World!</h1>\n+          })\n+        `,\n+      )\n+\n+      let css = await fetchStyles(url)\n+      expect(css).toContain(candidate`underline`)\n+      expect(css).toContain(candidate`flex`)\n+    })\n+  },\n+)\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17523"", ""pr_id"": 17523, ""issue_id"": 17520, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""inset-shadow-[spec1,spec2] renders all but the first shadow spec outset, not inset\n**What version of Tailwind CSS are you using?**\n\nv4.0.17 in my app, v4.11 in \""Tailwind Play\""\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nNext.js 15.2.4 but n/a\n\n**What version of Node.js are you using?**\n\nv20.10.0 but n/a\n\n**What browser are you using?**\n\nFirefox but affects all\n\n**What operating system are you using?**\n\nLinux but affects all\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/gI32O7VLv6\n\n**Describe your issue**\n\nI would expect `inset-shadow-[shadowspec1,shadowspec2]` to render 2 inset shadows, but in fact all but the first are rendered as outer shadows.\n\nIn my reproduction the second shadow is red, and should appear inside the element on the right side, but it appears outside the element on the left side.\n\nI can work around it by adding `inset_` at the start of the 2nd (and further) shadow specs, such as with `inset-shadow-[shadowspec1,inset_shadowspec2]`"", ""issue_word_count"": 175, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""4484192ca310fa5865e796c25a1aeed9b2d2a9f5"", ""head_commit"": ""8c5fc6eaae319ecbe2fef41cb5e0c5d499b57c0b"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17523"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17523"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-03T09:15:30.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex e64c196b2041..7ba96dab57b9 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -10,6 +10,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Fixed\n \n - Don't rely on `@layer base` for the `@property` polyfills ([#17506](https://github.com/tailwindlabs/tailwindcss/pull/17506))\n+- Fix multi-value inset shadow ([#17523](https://github.com/tailwindlabs/tailwindcss/pull/17523))\n \n ## [4.1.1] - 2025-04-02\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex a4359c53a1ab..88f9a1fbc13b 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -6183,13 +6183,20 @@ function alphaReplacedShadowProperties(\n     return varInjector(replaceAlpha(color, alpha))\n   })\n \n+  function applyPrefix(x: string) {\n+    if (!prefix) return x\n+    return segment(x, ',')\n+      .map((value) => prefix + value)\n+      .join(',')\n+  }\n+\n   if (requiresFallback) {\n     return [\n-      decl(property, prefix + replaceShadowColors(value, varInjector)),\n-      rule('@supports (color: lab(from red l a b))', [decl(property, prefix + replacedValue)]),\n+      decl(property, applyPrefix(replaceShadowColors(value, varInjector))),\n+      rule('@supports (color: lab(from red l a b))', [decl(property, applyPrefix(replacedValue))]),\n     ]\n   } else {\n-    return [decl(property, prefix + replacedValue)]\n+    return [decl(property, applyPrefix(replacedValue))]\n   }\n }\n \n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex be5becf61027..fd75f6a94919 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -23263,11 +23263,13 @@ test('inset-shadow', async () => {\n         'inset-shadow-[10px_10px]',\n         'inset-shadow-[var(--value)]',\n         'inset-shadow-[shadow:var(--value)]',\n+        'inset-shadow-[12px_12px_#0088cc,12px_12px_var(--value,#0088cc)]',\n \n         'inset-shadow-sm/25',\n         'inset-shadow-[12px_12px_#0088cc]/25',\n         'inset-shadow-[12px_12px_var(--value)]/25',\n         'inset-shadow-[10px_10px]/25',\n+        'inset-shadow-[12px_12px_#0088cc,12px_12px_var(--value,#0088cc)]/25',\n \n         // Colors\n         'inset-shadow-red-500',\n@@ -23319,6 +23321,18 @@ test('inset-shadow', async () => {\n       --color-red-500: #ef4444;\n     }\n \n+    .inset-shadow-\\\\[12px_12px_\\\\#0088cc\\\\,12px_12px_var\\\\(--value\\\\,\\\\#0088cc\\\\)\\\\]\\\\/25 {\n+      --tw-inset-shadow-alpha: 25%;\n+      --tw-inset-shadow: inset 12px 12px var(--tw-inset-shadow-color, #08c), inset 12px 12px var(--tw-inset-shadow-color, var(--value, #08c));\n+      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n+    }\n+\n+    @supports (color: lab(from red l a b)) {\n+      .inset-shadow-\\\\[12px_12px_\\\\#0088cc\\\\,12px_12px_var\\\\(--value\\\\,\\\\#0088cc\\\\)\\\\]\\\\/25 {\n+        --tw-inset-shadow: inset 12px 12px var(--tw-inset-shadow-color, oklab(59.9824% -.067 -.124 / .25)), inset 12px 12px var(--tw-inset-shadow-color, oklab(from var(--value, #08c) l a b / 25%));\n+      }\n+    }\n+\n     .inset-shadow-\\\\[12px_12px_var\\\\(--value\\\\)\\\\]\\\\/25 {\n       --tw-inset-shadow-alpha: 25%;\n       --tw-inset-shadow: inset 12px 12px var(--tw-inset-shadow-color, var(--value));\n@@ -23359,6 +23373,11 @@ test('inset-shadow', async () => {\n       box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n     }\n \n+    .inset-shadow-\\\\[12px_12px_\\\\#0088cc\\\\,12px_12px_var\\\\(--value\\\\,\\\\#0088cc\\\\)\\\\] {\n+      --tw-inset-shadow: inset 12px 12px var(--tw-inset-shadow-color, #08c), inset 12px 12px var(--tw-inset-shadow-color, var(--value, #08c));\n+      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n+    }\n+\n     .inset-shadow-\\\\[12px_12px_\\\\#0088cc\\\\] {\n       --tw-inset-shadow: inset 12px 12px var(--tw-inset-shadow-color, #08c);\n       box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17514"", ""pr_id"": 17514, ""issue_id"": 17508, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Tailwind CSS Not Updating Global Styles on Latest Version\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.1.1\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nNext.js 15.2.4\n\n**What version of Node.js are you using?**\n\nv22.12.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nmacOS\n\n\nAfter updating to the latest version of Tailwind CSS, global styles defined in global.css are not updating properly. The issue persists even after clearing the Next.js cache and restarting the development server. This was not an issue in the previous versions.\n\nhttps://github.com/user-attachments/assets/69c7097e-9d47-48ab-8352-b90c0791c194\n"", ""issue_word_count"": 151, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/utils.ts"", ""packages/@tailwindcss-postcss/src/index.test.ts"", ""packages/@tailwindcss-postcss/src/index.ts""], ""pr_changed_test_files"": [""packages/@tailwindcss-postcss/src/index.test.ts""], ""base_commit"": ""e45302b910c3ed79e325b00f7fdd1c0c4198a2a7"", ""head_commit"": ""10b0c766ea657fafe191a35ed5dfc2b092356440"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17514"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17514"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-03T15:07:38.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex ff31af18925d..87585fd51e4f 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -13,6 +13,8 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Fix multi-value inset shadow ([#17523](https://github.com/tailwindlabs/tailwindcss/pull/17523))\n - Fix `drop-shadow` utility ([#17515](https://github.com/tailwindlabs/tailwindcss/pull/17515))\n - Fix `drop-shadow-*` utilities that use multiple shadows in `@theme inline` ([#17515](https://github.com/tailwindlabs/tailwindcss/pull/17515))\n+- PostCSS: Fix race condition when two changes are queued concurrently ([#17514](https://github.com/tailwindlabs/tailwindcss/pull/17514))\n+- PostCSS: Ensure we process files containing an `@tailwind utilities;` directive ([#17514](https://github.com/tailwindlabs/tailwindcss/pull/17514))\n \n ## [4.1.1] - 2025-04-02\n \n\ndiff --git a/integrations/utils.ts b/integrations/utils.ts\nindex f4218b176958..82f88c690bf0 100644\n--- a/integrations/utils.ts\n+++ b/integrations/utils.ts\n@@ -589,6 +589,8 @@ export async function fetchStyles(base: string, path = '/'): Promise<string> {\n async function gracefullyRemove(dir: string) {\n   // Skip removing the directory in CI because it can stall on Windows\n   if (!process.env.CI) {\n-    await fs.rm(dir, { recursive: true, force: true })\n+    await fs.rm(dir, { recursive: true, force: true }).catch((error) => {\n+      console.log(`Failed to remove ${dir}`, error)\n+    })\n   }\n }\n\ndiff --git a/packages/@tailwindcss-postcss/src/index.ts b/packages/@tailwindcss-postcss/src/index.ts\nindex 5a76aba13acb..e728c2f9506e 100644\n--- a/packages/@tailwindcss-postcss/src/index.ts\n+++ b/packages/@tailwindcss-postcss/src/index.ts\n@@ -20,7 +20,7 @@ const DEBUG = env.DEBUG\n \n interface CacheEntry {\n   mtimes: Map<string, number>\n-  compiler: null | Awaited<ReturnType<typeof compileAst>>\n+  compiler: null | ReturnType<typeof compileAst>\n   scanner: null | Scanner\n   tailwindCssAst: AstNode[]\n   cachedPostCssAst: postcss.Root\n@@ -89,7 +89,8 @@ function tailwindcss(opts: PluginOptions = {}): AcceptedPlugin {\n                 node.name === 'variant' ||\n                 node.name === 'config' ||\n                 node.name === 'plugin' ||\n-                node.name === 'apply'\n+                node.name === 'apply' ||\n+                node.name === 'tailwind'\n               ) {\n                 canBail = false\n                 return false\n@@ -138,9 +139,9 @@ function tailwindcss(opts: PluginOptions = {}): AcceptedPlugin {\n \n           // Setup the compiler if it doesn't exist yet. This way we can\n           // guarantee a `build()` function is available.\n-          context.compiler ??= await createCompiler()\n+          context.compiler ??= createCompiler()\n \n-          if (context.compiler.features === Features.None) {\n+          if ((await context.compiler).features === Features.None) {\n             return\n           }\n \n@@ -188,25 +189,27 @@ function tailwindcss(opts: PluginOptions = {}): AcceptedPlugin {\n             // initial build. If it wasn't, we need to create a new one.\n             !isInitialBuild\n           ) {\n-            context.compiler = await createCompiler()\n+            context.compiler = createCompiler()\n           }\n \n+          let compiler = await context.compiler\n+\n           if (context.scanner === null || rebuildStrategy === 'full') {\n             DEBUG && I.start('Setup scanner')\n             let sources = (() => {\n               // Disable auto source detection\n-              if (context.compiler.root === 'none') {\n+              if (compiler.root === 'none') {\n                 return []\n               }\n \n               // No root specified, use the base directory\n-              if (context.compiler.root === null) {\n+              if (compiler.root === null) {\n                 return [{ base, pattern: '**/*', negated: false }]\n               }\n \n               // Use the specified root\n-              return [{ ...context.compiler.root, negated: false }]\n-            })().concat(context.compiler.sources)\n+              return [{ ...compiler.root, negated: false }]\n+            })().concat(compiler.sources)\n \n             // Look for candidates used to generate the CSS\n             context.scanner = new Scanner({ sources })\n@@ -214,11 +217,10 @@ function tailwindcss(opts: PluginOptions = {}): AcceptedPlugin {\n           }\n \n           DEBUG && I.start('Scan for candidates')\n-          let candidates =\n-            context.compiler.features & Features.Utilities ? context.scanner.scan() : []\n+          let candidates = compiler.features & Features.Utilities ? context.scanner.scan() : []\n           DEBUG && I.end('Scan for candidates')\n \n-          if (context.compiler.features & Features.Utilities) {\n+          if (compiler.features & Features.Utilities) {\n             DEBUG && I.start('Register dependency messages')\n             // Add all found files as direct dependencies\n             for (let file of context.scanner.files) {\n@@ -267,7 +269,7 @@ function tailwindcss(opts: PluginOptions = {}): AcceptedPlugin {\n           }\n \n           DEBUG && I.start('Build utilities')\n-          let tailwindCssAst = context.compiler.build(candidates)\n+          let tailwindCssAst = compiler.build(candidates)\n           DEBUG && I.end('Build utilities')\n \n           if (context.tailwindCssAst !== tailwindCssAst) {\n"", ""test_patch"": ""diff --git a/packages/@tailwindcss-postcss/src/index.test.ts b/packages/@tailwindcss-postcss/src/index.test.ts\nindex 11d8e34967b4..bf7c0f97a13b 100644\n--- a/packages/@tailwindcss-postcss/src/index.test.ts\n+++ b/packages/@tailwindcss-postcss/src/index.test.ts\n@@ -1,5 +1,5 @@\n import dedent from 'dedent'\n-import { mkdir, mkdtemp, unlink, writeFile } from 'node:fs/promises'\n+import { mkdir, mkdtemp, readFile, rm, unlink, writeFile } from 'node:fs/promises'\n import { tmpdir } from 'node:os'\n import path from 'path'\n import postcss from 'postcss'\n@@ -357,3 +357,64 @@ test('runs `Once` plugins in the right order', async () => {\n     }\""\n   `)\n })\n+\n+describe('concurrent builds', () => {\n+  let dir: string\n+  beforeEach(async () => {\n+    dir = await mkdtemp(path.join(tmpdir(), 'tw-postcss'))\n+    await writeFile(path.join(dir, 'index.html'), `<div class=\""underline\""></div>`)\n+    await writeFile(\n+      path.join(dir, 'index.css'),\n+      css`\n+        @import './dependency.css';\n+      `,\n+    )\n+    await writeFile(\n+      path.join(dir, 'dependency.css'),\n+      css`\n+        @tailwind utilities;\n+      `,\n+    )\n+  })\n+  afterEach(() => rm(dir, { recursive: true, force: true }))\n+\n+  test('the current working directory is used by default', async () => {\n+    const spy = vi.spyOn(process, 'cwd')\n+    spy.mockReturnValue(dir)\n+\n+    let from = path.join(dir, 'index.css')\n+    let input = (await readFile(path.join(dir, 'index.css'))).toString()\n+\n+    let plugin = tailwindcss({ optimize: { minify: false } })\n+\n+    async function run(input: string): Promise<string> {\n+      let ast = postcss.parse(input)\n+      for (let runner of (plugin as any).plugins) {\n+        if (runner.Once) {\n+          await runner.Once(ast, { result: { opts: { from }, messages: [] } })\n+        }\n+      }\n+      return ast.toString()\n+    }\n+\n+    let result = await run(input)\n+\n+    expect(result).toContain('.underline')\n+\n+    await writeFile(\n+      path.join(dir, 'dependency.css'),\n+      css`\n+        @tailwind utilities;\n+        .red {\n+          color: red;\n+        }\n+      `,\n+    )\n+\n+    let promise1 = run(input)\n+    let promise2 = run(input)\n+\n+    expect(await promise1).toContain('.red')\n+    expect(await promise2).toContain('.red')\n+  })\n+})\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17493"", ""pr_id"": 17493, ""issue_id"": 17494, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""v4.1.0 CLI does not put @import at the beginning\nFew minutes ago released v4.1.0 generated broken CSS. `@import URL()` like for Google Fonts are not preserved at the top when they are at the top of `input.css`.\n\ninput.css:\n```\n@import url(\""https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700;800;900&display=fallback\"");\n@import \""tailwindcss\"";\n...\n```\n\noutput.css in v4.1.0 (incorrect):\n```\n/*! tailwindcss v4.1.0 | MIT License | https://tailwindcss.com */\n@supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {\n  @layer base {\n    *, ::before, ::after, ::backdrop {\n      --tw-translate-x: 0;\n      --tw-translate-y: 0;\n      --tw-translate-z: 0;\n      --tw-scale-x: 1;\n      --tw-scale-y: 1;\n      --tw-scale-z: 1;\n      --tw-rotate-x: rotateX(0);\n      --tw-rotate-y: rotateY(0);\n      --tw-rotate-z: rotateZ(0);\n      --tw-skew-x: skewX(0);\n      --tw-skew-y: skewY(0);\n      --tw-space-y-reverse: 0;\n      --tw-space-x-reverse: 0;\n      --tw-border-style: solid;\n      --tw-gradient-position: initial;\n      --tw-gradient-from: #0000;\n      --tw-gradient-via: #0000;\n      --tw-gradient-to: #0000;\n      --tw-gradient-stops: initial;\n      --tw-gradient-via-stops: initial;\n      --tw-gradient-from-position: 0%;\n      --tw-gradient-via-position: 50%;\n      --tw-gradient-to-position: 100%;\n      --tw-leading: initial;\n      --tw-font-weight: initial;\n      --tw-tracking: initial;\n      --tw-ordinal: initial;\n      --tw-slashed-zero: initial;\n      --tw-numeric-figure: initial;\n      --tw-numeric-spacing: initial;\n      --tw-numeric-fraction: initial;\n      --tw-shadow: 0 0 #0000;\n      --tw-shadow-color: initial;\n      --tw-shadow-alpha: 100%;\n      --tw-inset-shadow: 0 0 #0000;\n      --tw-inset-shadow-color: initial;\n      --tw-inset-shadow-alpha: 100%;\n      --tw-ring-color: initial;\n      --tw-ring-shadow: 0 0 #0000;\n      --tw-inset-ring-color: initial;\n      --tw-inset-ring-shadow: 0 0 #0000;\n      --tw-ring-inset: initial;\n      --tw-ring-offset-width: 0px;\n      --tw-ring-offset-color: #fff;\n      --tw-ring-offset-shadow: 0 0 #0000;\n      --tw-blur: initial;\n      --tw-brightness: initial;\n      --tw-contrast: initial;\n      --tw-grayscale: initial;\n      --tw-hue-rotate: initial;\n      --tw-invert: initial;\n      --tw-opacity: initial;\n      --tw-saturate: initial;\n      --tw-sepia: initial;\n      --tw-drop-shadow: initial;\n      --tw-drop-shadow-color: initial;\n      --tw-drop-shadow-alpha: 100%;\n      --tw-drop-shadow-size: initial;\n      --tw-backdrop-blur: initial;\n      --tw-backdrop-brightness: initial;\n      --tw-backdrop-contrast: initial;\n      --tw-backdrop-grayscale: initial;\n      --tw-backdrop-hue-rotate: initial;\n      --tw-backdrop-invert: initial;\n      --tw-backdrop-opacity: initial;\n      --tw-backdrop-saturate: initial;\n      --tw-backdrop-sepia: initial;\n      --tw-duration: initial;\n      --tw-ease: initial;\n      --tw-content: \""\"";\n    }\n  }\n}\n@import url(\""https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700;800;900&display=fallback\"");\n@import url(\""https://fonts.googleapis.com/css2?family=Rubik:ital,wght@0,400;0,700;1,400;1,700&display=swap\"");\n@import url(\""vendors/aos.css\"");\n@layer theme, base, components, utilities;\n@layer theme {\n  :root, :host {\n...\n```\n\nbut v4.0.17 generates (correct):\n\n```\n/*! tailwindcss v4.0.17 | MIT License | https://tailwindcss.com */\n@import url(\""https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700;800;900&display=fallback\"");\n@import url(\""https://fonts.googleapis.com/css2?family=Rubik:ital,wght@0,400;0,700;1,400;1,700&display=swap\"");\n@import url(\""vendors/aos.css\"");\n@layer theme, base, components, utilities;\n@layer theme {\n...\n```"", ""issue_word_count"": 519, ""test_files_count"": 2, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/cli/index.test.ts"", ""packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/src/ast.ts""], ""pr_changed_test_files"": [""integrations/cli/index.test.ts"", ""packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap""], ""base_commit"": ""b069d7a5a1cb5c6e19b390e4b0a0168b9929db76"", ""head_commit"": ""748bbbea6075bdb2625a38271ab367fe0f7215bc"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17493"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17493"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-02T09:05:35.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex fd426a2c63f4..f0ac519a9cd1 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -10,6 +10,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Fixed\n \n - Disable padding in `@source inline(\u2026)` brace expansion ([#17491](https://github.com/tailwindlabs/tailwindcss/pull/17491))\n+- Inject polyfills after `@import` and body-less `@layer` ([#17493](https://github.com/tailwindlabs/tailwindcss/pull/17493))\n \n ## [4.1.0] - 2025-04-01\n \n\ndiff --git a/packages/tailwindcss/src/ast.ts b/packages/tailwindcss/src/ast.ts\nindex 3a086a193968..e207e3ddfb15 100644\n--- a/packages/tailwindcss/src/ast.ts\n+++ b/packages/tailwindcss/src/ast.ts\n@@ -582,10 +582,26 @@ export function optimizeAst(\n     }\n \n     if (fallbackAst.length > 0) {\n-      let firstNonCommentIndex = newAst.findIndex((item) => item.kind !== 'comment')\n-      if (firstNonCommentIndex === -1) firstNonCommentIndex = 0\n+      let firstValidNodeIndex = newAst.findIndex((node) => {\n+        // License comments\n+        if (node.kind === 'comment') return false\n+\n+        if (node.kind === 'at-rule') {\n+          // Charset\n+          if (node.name === '@charset') return false\n+\n+          // External imports\n+          if (node.name === '@import') return false\n+\n+          // Body-less `@layer \u2026;`\n+          if (node.name === '@layer' && node.nodes.length === 0) return false\n+        }\n+\n+        return true\n+      })\n+\n       newAst.splice(\n-        firstNonCommentIndex,\n+        firstValidNodeIndex < 0 ? newAst.length : firstValidNodeIndex,\n         0,\n         atRule(\n           '@supports',\n"", ""test_patch"": ""diff --git a/integrations/cli/index.test.ts b/integrations/cli/index.test.ts\nindex 8a6924583667..df691b41983a 100644\n--- a/integrations/cli/index.test.ts\n+++ b/integrations/cli/index.test.ts\n@@ -1563,6 +1563,287 @@ test(\n   },\n )\n \n+test(\n+  'polyfills should be imported after external `@import url(\u2026)` statements',\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""dependencies\"": {\n+            \""tailwindcss\"": \""workspace:^\"",\n+            \""@tailwindcss/cli\"": \""workspace:^\""\n+          }\n+        }\n+      `,\n+      'index.css': css`\n+        @import url('https://fonts.googleapis.com');\n+        @import 'tailwindcss';\n+      `,\n+      'index.html': html`<div class=\""bg-red-500/50 shadow-md\""></div>`,\n+    },\n+  },\n+  async ({ exec, fs, expect }) => {\n+    await exec('pnpm tailwindcss --input ./index.css --output ./dist/out.css')\n+    expect(await fs.dumpFiles('./dist/*.css')).toMatchInlineSnapshot(`\n+      \""\n+      --- ./dist/out.css ---\n+      @import url('https://fonts.googleapis.com');\n+      @layer theme, base, components, utilities;\n+      @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {\n+        @layer base {\n+          *, ::before, ::after, ::backdrop {\n+            --tw-shadow: 0 0 #0000;\n+            --tw-shadow-color: initial;\n+            --tw-shadow-alpha: 100%;\n+            --tw-inset-shadow: 0 0 #0000;\n+            --tw-inset-shadow-color: initial;\n+            --tw-inset-shadow-alpha: 100%;\n+            --tw-ring-color: initial;\n+            --tw-ring-shadow: 0 0 #0000;\n+            --tw-inset-ring-color: initial;\n+            --tw-inset-ring-shadow: 0 0 #0000;\n+            --tw-ring-inset: initial;\n+            --tw-ring-offset-width: 0px;\n+            --tw-ring-offset-color: #fff;\n+            --tw-ring-offset-shadow: 0 0 #0000;\n+          }\n+        }\n+      }\n+      @layer theme {\n+        :root, :host {\n+          --font-sans: ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n+          'Noto Color Emoji';\n+          --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New',\n+          monospace;\n+          --color-red-500: oklch(63.7% 0.237 25.331);\n+          --default-font-family: var(--font-sans);\n+          --default-mono-font-family: var(--font-mono);\n+        }\n+      }\n+      @layer base {\n+        *, ::after, ::before, ::backdrop, ::file-selector-button {\n+          box-sizing: border-box;\n+          margin: 0;\n+          padding: 0;\n+          border: 0 solid;\n+        }\n+        html, :host {\n+          line-height: 1.5;\n+          -webkit-text-size-adjust: 100%;\n+          tab-size: 4;\n+          font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji');\n+          font-feature-settings: var(--default-font-feature-settings, normal);\n+          font-variation-settings: var(--default-font-variation-settings, normal);\n+          -webkit-tap-highlight-color: transparent;\n+        }\n+        hr {\n+          height: 0;\n+          color: inherit;\n+          border-top-width: 1px;\n+        }\n+        abbr:where([title]) {\n+          -webkit-text-decoration: underline dotted;\n+          text-decoration: underline dotted;\n+        }\n+        h1, h2, h3, h4, h5, h6 {\n+          font-size: inherit;\n+          font-weight: inherit;\n+        }\n+        a {\n+          color: inherit;\n+          -webkit-text-decoration: inherit;\n+          text-decoration: inherit;\n+        }\n+        b, strong {\n+          font-weight: bolder;\n+        }\n+        code, kbd, samp, pre {\n+          font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace);\n+          font-feature-settings: var(--default-mono-font-feature-settings, normal);\n+          font-variation-settings: var(--default-mono-font-variation-settings, normal);\n+          font-size: 1em;\n+        }\n+        small {\n+          font-size: 80%;\n+        }\n+        sub, sup {\n+          font-size: 75%;\n+          line-height: 0;\n+          position: relative;\n+          vertical-align: baseline;\n+        }\n+        sub {\n+          bottom: -0.25em;\n+        }\n+        sup {\n+          top: -0.5em;\n+        }\n+        table {\n+          text-indent: 0;\n+          border-color: inherit;\n+          border-collapse: collapse;\n+        }\n+        :-moz-focusring {\n+          outline: auto;\n+        }\n+        progress {\n+          vertical-align: baseline;\n+        }\n+        summary {\n+          display: list-item;\n+        }\n+        ol, ul, menu {\n+          list-style: none;\n+        }\n+        img, svg, video, canvas, audio, iframe, embed, object {\n+          display: block;\n+          vertical-align: middle;\n+        }\n+        img, video {\n+          max-width: 100%;\n+          height: auto;\n+        }\n+        button, input, select, optgroup, textarea, ::file-selector-button {\n+          font: inherit;\n+          font-feature-settings: inherit;\n+          font-variation-settings: inherit;\n+          letter-spacing: inherit;\n+          color: inherit;\n+          border-radius: 0;\n+          background-color: transparent;\n+          opacity: 1;\n+        }\n+        :where(select:is([multiple], [size])) optgroup {\n+          font-weight: bolder;\n+        }\n+        :where(select:is([multiple], [size])) optgroup option {\n+          padding-inline-start: 20px;\n+        }\n+        ::file-selector-button {\n+          margin-inline-end: 4px;\n+        }\n+        ::placeholder {\n+          opacity: 1;\n+        }\n+        @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {\n+          ::placeholder {\n+            color: color-mix(in oklab, currentColor 50%, transparent);\n+          }\n+        }\n+        textarea {\n+          resize: vertical;\n+        }\n+        ::-webkit-search-decoration {\n+          -webkit-appearance: none;\n+        }\n+        ::-webkit-date-and-time-value {\n+          min-height: 1lh;\n+          text-align: inherit;\n+        }\n+        ::-webkit-datetime-edit {\n+          display: inline-flex;\n+        }\n+        ::-webkit-datetime-edit-fields-wrapper {\n+          padding: 0;\n+        }\n+        ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {\n+          padding-block: 0;\n+        }\n+        :-moz-ui-invalid {\n+          box-shadow: none;\n+        }\n+        button, input:where([type='button'], [type='reset'], [type='submit']), ::file-selector-button {\n+          appearance: button;\n+        }\n+        ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {\n+          height: auto;\n+        }\n+        [hidden]:where(:not([hidden='until-found'])) {\n+          display: none !important;\n+        }\n+      }\n+      @layer utilities {\n+        .bg-red-500\\\\/50 {\n+          background-color: color-mix(in srgb, oklch(63.7% 0.237 25.331) 50%, transparent);\n+          @supports (color: color-mix(in lab, red, red)) {\n+            background-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n+          }\n+        }\n+        .shadow-md {\n+          --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));\n+          box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n+        }\n+      }\n+      @property --tw-shadow {\n+        syntax: \""*\"";\n+        inherits: false;\n+        initial-value: 0 0 #0000;\n+      }\n+      @property --tw-shadow-color {\n+        syntax: \""*\"";\n+        inherits: false;\n+      }\n+      @property --tw-shadow-alpha {\n+        syntax: \""<percentage>\"";\n+        inherits: false;\n+        initial-value: 100%;\n+      }\n+      @property --tw-inset-shadow {\n+        syntax: \""*\"";\n+        inherits: false;\n+        initial-value: 0 0 #0000;\n+      }\n+      @property --tw-inset-shadow-color {\n+        syntax: \""*\"";\n+        inherits: false;\n+      }\n+      @property --tw-inset-shadow-alpha {\n+        syntax: \""<percentage>\"";\n+        inherits: false;\n+        initial-value: 100%;\n+      }\n+      @property --tw-ring-color {\n+        syntax: \""*\"";\n+        inherits: false;\n+      }\n+      @property --tw-ring-shadow {\n+        syntax: \""*\"";\n+        inherits: false;\n+        initial-value: 0 0 #0000;\n+      }\n+      @property --tw-inset-ring-color {\n+        syntax: \""*\"";\n+        inherits: false;\n+      }\n+      @property --tw-inset-ring-shadow {\n+        syntax: \""*\"";\n+        inherits: false;\n+        initial-value: 0 0 #0000;\n+      }\n+      @property --tw-ring-inset {\n+        syntax: \""*\"";\n+        inherits: false;\n+      }\n+      @property --tw-ring-offset-width {\n+        syntax: \""<length>\"";\n+        inherits: false;\n+        initial-value: 0px;\n+      }\n+      @property --tw-ring-offset-color {\n+        syntax: \""*\"";\n+        inherits: false;\n+        initial-value: #fff;\n+      }\n+      @property --tw-ring-offset-shadow {\n+        syntax: \""*\"";\n+        inherits: false;\n+        initial-value: 0 0 #0000;\n+      }\n+      \""\n+    `)\n+  },\n+)\n+\n function withBOM(text: string): string {\n   return '\\uFEFF' + text\n }\n\ndiff --git a/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap b/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\nindex a4d9a400c243..4591a130cd44 100644\n--- a/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\n+++ b/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\n@@ -1,15 +1,7 @@\n // Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html\n \n exports[`\\`@import 'tailwindcss'\\` is replaced with the generated CSS 1`] = `\n-\""@supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {\n-  @layer base {\n-    *, :before, :after, ::backdrop {\n-      --tw-font-weight: initial;\n-    }\n-  }\n-}\n-\n-@layer theme {\n+\""@layer theme {\n   :root, :host {\n     --font-sans: ui-sans-serif, system-ui, sans-serif, \""Apple Color Emoji\"", \""Segoe UI Emoji\"", \""Segoe UI Symbol\"", \""Noto Color Emoji\"";\n     --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \""Liberation Mono\"", \""Courier New\"", monospace;\n@@ -289,6 +281,14 @@ exports[`\\`@import 'tailwindcss'\\` is replaced with the generated CSS 1`] = `\n   }\n }\n \n+@supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {\n+  @layer base {\n+    *, :before, :after, ::backdrop {\n+      --tw-font-weight: initial;\n+    }\n+  }\n+}\n+\n @property --tw-font-weight {\n   syntax: \""*\"";\n   inherits: false\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17491"", ""pr_id"": 17491, ""issue_id"": 17492, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""`@source inline(\u2026)` incorrectly pads number values for unequal significant number ranges\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.1.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\n`@tailwindcss/cli`\n\n**What version of Node.js are you using?**\n\nv20.11.0\n\n**What browser are you using?**\n\nN/A\n\n**What operating system are you using?**\n\nUbuntu 20.04.6 LTS in WSL2\n\n**Reproduction URL**\n\nNot needed, see below.\n\n**Describe your issue**\n\nIn `packages/tailwindcss/src/utils/brace-expansion.test.ts`, add the following test:\n\n```css\n[\n  'z-{10..100..10}',\n  [\n    'z-10',\n    'z-20',\n    'z-30',\n    'z-40',\n    'z-50',\n    'z-60',\n    'z-70',\n    'z-80',\n    'z-90',\n    'z-100',\n  ],\n],\n```\nThe relevant test output is as follows:\n```diff\n FAIL  |tailwindcss| src/utils/brace-expansion.test.ts > expand(\u2026) > should expand z-{10..100..10}\nAssertionError: expected [ 'z-010', 'z-020', 'z-030', \u2026(7) ] to deeply equal [ 'z-10', 'z-100', 'z-20', \u2026(7) ]\n\n- Expected\n+ Received\n\n  Array [\n-   \""z-10\"",\n+   \""z-010\"",\n+   \""z-020\"",\n+   \""z-030\"",\n+   \""z-040\"",\n+   \""z-050\"",\n+   \""z-060\"",\n+   \""z-070\"",\n+   \""z-080\"",\n+   \""z-090\"",\n    \""z-100\"",\n-   \""z-20\"",\n-   \""z-30\"",\n-   \""z-40\"",\n-   \""z-50\"",\n-   \""z-60\"",\n-   \""z-70\"",\n-   \""z-80\"",\n-   \""z-90\"",\n  ]\n\n \u276f src/utils/brace-expansion.test.ts:81:34\n     79|     ['{1.1..2.2}', ['1.1..2.2']],*/\n     80|   ])('should expand %s', (input, expected) => {\n     81|     expect(expand(input).sort()).toEqual(expected.sort())\n       |                                  ^\n     82|   })\n     83| \n```"", ""issue_word_count"": 266, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utils/brace-expansion.test.ts"", ""packages/tailwindcss/src/utils/brace-expansion.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utils/brace-expansion.test.ts""], ""base_commit"": ""8f631d0d8ac9c26c0b6af89eb065deeebdde6915"", ""head_commit"": ""d0d56ea3a5d0717b52c410caa0f414cc0dd55305"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17491"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17491"", ""dockerfile"": """", ""pr_merged_at"": ""2025-04-01T20:55:04.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 380efc74f30a..fd426a2c63f4 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -7,7 +7,9 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ## [Unreleased]\n \n-- Nothing yet!\n+### Fixed\n+\n+- Disable padding in `@source inline(\u2026)` brace expansion ([#17491](https://github.com/tailwindlabs/tailwindcss/pull/17491))\n \n ## [4.1.0] - 2025-04-01\n \n\ndiff --git a/packages/tailwindcss/src/utils/brace-expansion.ts b/packages/tailwindcss/src/utils/brace-expansion.ts\nindex 95431d4c6704..052e8848a059 100644\n--- a/packages/tailwindcss/src/utils/brace-expansion.ts\n+++ b/packages/tailwindcss/src/utils/brace-expansion.ts\n@@ -72,9 +72,6 @@ function expandSequence(seq: string): string[] {\n     let startNum = parseInt(start, 10)\n     let endNum = parseInt(end, 10)\n \n-    // Determine padding length (if any) but don't count the sign as length\n-    let padLength = Math.max(start.replace(/^-/, '').length, end.replace(/^-/, '').length)\n-\n     if (step === undefined) {\n       step = startNum <= endNum ? 1 : -1\n     }\n@@ -84,17 +81,11 @@ function expandSequence(seq: string): string[] {\n     if (step > 0) {\n       for (let i = startNum; i <= endNum; i += step) {\n         let numStr = i.toString()\n-        if (numStr.length < padLength) {\n-          numStr = numStr.padStart(padLength, '0')\n-        }\n         result.push(numStr)\n       }\n     } else {\n       for (let i = startNum; i >= endNum; i += step) {\n         let numStr = i.toString()\n-        if (numStr.length < padLength) {\n-          numStr = numStr.padStart(padLength, '0')\n-        }\n         result.push(numStr)\n       }\n     }\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utils/brace-expansion.test.ts b/packages/tailwindcss/src/utils/brace-expansion.test.ts\nindex f6d3d12f130a..8b1932bf1110 100644\n--- a/packages/tailwindcss/src/utils/brace-expansion.test.ts\n+++ b/packages/tailwindcss/src/utils/brace-expansion.test.ts\n@@ -14,14 +14,16 @@ describe('expand(\u2026)', () => {\n     ['a/{0..5}/b', ['a/0/b', 'a/1/b', 'a/2/b', 'a/3/b', 'a/4/b', 'a/5/b']],\n     ['a/{-5..0}/b', ['a/-5/b', 'a/-4/b', 'a/-3/b', 'a/-2/b', 'a/-1/b', 'a/0/b']],\n     ['a/{0..-5}/b', ['a/0/b', 'a/-1/b', 'a/-2/b', 'a/-3/b', 'a/-4/b', 'a/-5/b']],\n-\n-    // Numeric range with padding\n-    ['a/{00..05}/b', ['a/00/b', 'a/01/b', 'a/02/b', 'a/03/b', 'a/04/b', 'a/05/b']],\n     [\n-      'a{001..9}b',\n-      ['a001b', 'a002b', 'a003b', 'a004b', 'a005b', 'a006b', 'a007b', 'a008b', 'a009b'],\n+      'a/{0..10..5}/b',\n+      ['a/0/b', 'a/5/b', 'a/10/b'],\n+      ['a/{10..0..5}/b', ['a/10/b', 'a/5/b', 'a/0/b']],\n     ],\n \n+    // Numeric range with padding (we do not support padding)\n+    ['a/{00..05}/b', ['a/0/b', 'a/1/b', 'a/2/b', 'a/3/b', 'a/4/b', 'a/5/b']],\n+    ['a{001..9}b', ['a1b', 'a2b', 'a3b', 'a4b', 'a5b', 'a6b', 'a7b', 'a8b', 'a9b']],\n+\n     // Numeric range with step\n     ['a/{0..5..2}/b', ['a/0/b', 'a/2/b', 'a/4/b']],\n     [\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17458"", ""pr_id"": 17458, ""issue_id"": 17346, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""CSS Generation Issue between v4.0.14 and v4.0.15 in TailwindCSS\nI have encountered a discrepancy in the generated CSS between ****v4.0.14**** and ****v4.0.15**** of TailwindCSS. The issue lies in the generated CSS for custom properties (CSS variables). The following sections highlight the differences between the two versions.\n\n**CSS Generated in v4.0.14: not the complete file.**\n\n[V4.0.14.md](https://github.com/user-attachments/files/19415543/V4.0.14.md)\n\nTailwindcss Package.json in node_module\n\n![Image](https://github.com/user-attachments/assets/2dc39186-50c3-4379-b602-3f5d0250d1b6)\n\n**CSS Generated in v4.0.15: not the complete file.**\n\n[v4.0.15.md](https://github.com/user-attachments/files/19415540/v4.0.15.md)\n\ntailwindcss Package json\n\n![Image](https://github.com/user-attachments/assets/c2f59933-5188-4868-98c5-82354164b5b2)\n\n\n**Comparison Screenshots**: On the left side is **v4.0.14**, and on the right side is **v4.0.15**.\n\n![Image](https://github.com/user-attachments/assets/d019970e-e7b1-4190-a223-c1966c71453b)\n![Image](https://github.com/user-attachments/assets/25ab8ea5-c231-4657-9dce-bdf730181443)\n![Image](https://github.com/user-attachments/assets/349238b4-1db3-4914-9350-f87dbee3374c)\n\n\n### **Key Differences**:\n\n1. **Missing Custom Properties (CSS Variables) in v4.0.15**:\n    - The following variables are missing in **v4.0.15**:\n        - `--default-font-family`\n        - `--default-font-feature-settings`\n        - `--default-font-variation-settings`\n        - `--default-mono-font-family`\n        - `--default-mono-font-feature-settings`\n        - `--default-mono-font-variation-settings`\n    - These variables were present in **v4.0.14** but are not being generated in **v4.0.15**.\n2. **Potential Impact**:\n    - The missing variables may cause issues with font settings, particularly if they are being used for consistent typography throughout the application.\n    - This could lead to rendering inconsistencies and make it difficult to maintain the project across different environments.\n"", ""issue_word_count"": 295, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/compat/apply-compat-hooks.ts"", ""packages/tailwindcss/src/css-functions.test.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/css-functions.test.ts""], ""base_commit"": ""c32b6082a1dfa83f92467e3ca5a3b261e7b5dfcb"", ""head_commit"": ""cff4e3557bf9c8245753e563828a7f35bc262997"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17458"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17458"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-31T11:06:28.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 4478ae7f30c3..13f205219292 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -35,6 +35,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Extract special `@(\""@\"")md:\u2026` syntax in Razor files ([#17427](https://github.com/tailwindlabs/tailwindcss/pull/17427))\n - Disallow arbitrary values with top-level braces and semicolons as well as unbalanced parentheses and brackets ([#17361](https://github.com/tailwindlabs/tailwindcss/pull/17361))\n - Extract used CSS variables from `.css` files ([#17433](https://github.com/tailwindlabs/tailwindcss/pull/17433))\n+- Ensure the `--theme(\u2026)` function still resolves to the CSS variables even when legacy JS plugins are enabled\n \n ### Changed\n \n\ndiff --git a/packages/tailwindcss/src/compat/apply-compat-hooks.ts b/packages/tailwindcss/src/compat/apply-compat-hooks.ts\nindex 1cf9b1ce5c77..a781cdcb0c78 100644\n--- a/packages/tailwindcss/src/compat/apply-compat-hooks.ts\n+++ b/packages/tailwindcss/src/compat/apply-compat-hooks.ts\n@@ -260,8 +260,13 @@ function upgradeToFullPluginSupport({\n   // config files are actually being used. In the future we may want to optimize\n   // this further by only doing this if plugins or config files _actually_\n   // registered JS config objects.\n+  let defaultResolveThemeValue = designSystem.resolveThemeValue\n   designSystem.resolveThemeValue = function resolveThemeValue(path: string, forceInline?: boolean) {\n-    let resolvedValue = pluginApi.theme(path, forceInline)\n+    if (path[0] === '-' && path[1] === '-') {\n+      return defaultResolveThemeValue(path, forceInline)\n+    }\n+\n+    let resolvedValue = pluginApi.theme(path, undefined)\n \n     if (Array.isArray(resolvedValue) && resolvedValue.length === 2) {\n       // When a tuple is returned, return the first element\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/css-functions.test.ts b/packages/tailwindcss/src/css-functions.test.ts\nindex 29e09d7d83c6..e8b1611aac8c 100644\n--- a/packages/tailwindcss/src/css-functions.test.ts\n+++ b/packages/tailwindcss/src/css-functions.test.ts\n@@ -384,6 +384,48 @@ describe('--theme(\u2026)', () => {\n       `[Error: Could not resolve value for theme function: \\`theme(--color-green-500)\\`. Consider checking if the variable name is correct or provide a fallback value to silence this error.]`,\n     )\n   })\n+\n+  test('--theme(\u2026) function still works as expected, even when a plugin is imported', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @layer base {\n+            html,\n+            :host {\n+              font-family: --theme(--default-font-family, system-ui);\n+            }\n+          }\n+          @layer theme {\n+            @theme {\n+              --font-sans: sans-serif;\n+              --default-font-family: --theme(--font-sans, initial);\n+            }\n+          }\n+          @plugin \""my-plugin.js\"";\n+        `,\n+        [],\n+        {\n+          loadModule: async () => ({\n+            module: () => {},\n+            base: '/root',\n+          }),\n+        },\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \""@layer base {\n+        html, :host {\n+          font-family: var(--default-font-family, system-ui);\n+        }\n+      }\n+\n+      @layer theme {\n+        :root, :host {\n+          --font-sans: sans-serif;\n+          --default-font-family: var(--font-sans);\n+        }\n+      }\""\n+    `)\n+  })\n })\n \n describe('theme(\u2026)', () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17389"", ""pr_id"": 17389, ""issue_id"": 17047, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Tailwind CSS misinterprets custom text-shadow plugin as text size\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.12\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nSvelteKit 2.18.0\n\n**What version of Node.js are you using?**\n\nv22.14.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nhttps://github.com/DarthGigi/tailwind-v4-text-shadow-mvce\n\n**Describe your issue**\n\nUsing a custom plugin to add text shadows causes tailwindcss to override the text size property, thinking `text-shadow` is a text size utility while it's not.\n\n![Image](https://github.com/user-attachments/assets/f801dd51-1a98-4b38-8395-e79ac078e17c)\n\nThis worked fine in v4.0.5 last time I checked, I'm not sure which release introduced this behavior.\n\n<details><summary>Plugin code</summary>\n\n```ts\nimport plugin from \""tailwindcss/plugin\"";\n\nconst textShadowPlugin = plugin(function ({ matchUtilities, theme }) {\n  matchUtilities(\n    {\n      \""text-shadow\"": (value) => ({\n        textShadow: value\n      })\n    },\n    { values: theme(\""textShadow\"") }\n  );\n});\n\nexport default textShadowPlugin;\n```\n</details> \n\n<details><summary>app.css</summary>\n\n```pcss\n@import 'tailwindcss';\n@plugin \""./plugins/text-shadow.ts\"";\n\n@theme {\n\t/* Text Shadow */\n\t--text-shadow-sm: 0 0px 2px var(--tw-shadow-color);\n\t--text-shadow: 0 0px 4px var(--tw-shadow-color);\n\t--text-shadow-lg: 0 0px 8px var(--tw-shadow-color);\n\t--tw-shadow-color: --alpha(oklch(0 0 0) / 50%);\n}\n```\n</details> "", ""issue_word_count"": 257, ""test_files_count"": 3, ""non_test_files_count"": 5, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap"", ""packages/tailwindcss/src/feature-flags.ts"", ""packages/tailwindcss/src/theme.ts"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts"", ""packages/tailwindcss/tests/ui.spec.ts"", ""packages/tailwindcss/theme.css""], ""pr_changed_test_files"": [""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/tests/ui.spec.ts""], ""base_commit"": ""ec2f3bb1ad53a4a29a90a057d50bd4d65b345a57"", ""head_commit"": ""fb8e80918b221e7fc40382f8a9868bf9130ed4bf"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17389"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17389"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-28T17:06:56.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 38ee1d6115e0..b860a13276e2 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -20,6 +20,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - _Experimental_: Add `wrap-anywhere`, `wrap-break-word`, and `wrap-normal` utilities ([#12128](https://github.com/tailwindlabs/tailwindcss/pull/12128))\n - _Experimental_: Add `@source inline(\u2026)` ([#17147](https://github.com/tailwindlabs/tailwindcss/pull/17147))\n - _Experimental_: Add `@source not` ([#17255](https://github.com/tailwindlabs/tailwindcss/pull/17255))\n+- _Experimental_: Add `text-shadow-*` utilities ([#17389](https://github.com/tailwindlabs/tailwindcss/pull/17389))\n - Added new `bg-{top,bottom}-{left,right}` utilities ([#17378](https://github.com/tailwindlabs/tailwindcss/pull/17378))\n \n ### Fixed\n\ndiff --git a/packages/tailwindcss/src/feature-flags.ts b/packages/tailwindcss/src/feature-flags.ts\nindex d00d1d45b1ae..f5c00bf656a9 100644\n--- a/packages/tailwindcss/src/feature-flags.ts\n+++ b/packages/tailwindcss/src/feature-flags.ts\n@@ -6,5 +6,6 @@ export const enableSafeAlignment = process.env.FEATURES_ENV !== 'stable'\n export const enableScripting = process.env.FEATURES_ENV !== 'stable'\n export const enableSourceInline = process.env.FEATURES_ENV !== 'stable'\n export const enableSourceNot = process.env.FEATURES_ENV !== 'stable'\n+export const enableTextShadows = process.env.FEATURES_ENV !== 'stable'\n export const enableUserValid = process.env.FEATURES_ENV !== 'stable'\n export const enableWrapAnywhere = process.env.FEATURES_ENV !== 'stable'\n\ndiff --git a/packages/tailwindcss/src/theme.ts b/packages/tailwindcss/src/theme.ts\nindex b72b99a09b0c..74375b6f723d 100644\n--- a/packages/tailwindcss/src/theme.ts\n+++ b/packages/tailwindcss/src/theme.ts\n@@ -21,10 +21,11 @@ const ignoredThemeKeyMap = new Map([\n     '--text',\n     [\n       '--text-color',\n-      '--text-underline-offset',\n-      '--text-indent',\n-      '--text-decoration-thickness',\n       '--text-decoration-color',\n+      '--text-decoration-thickness',\n+      '--text-indent',\n+      '--text-shadow',\n+      '--text-underline-offset',\n     ],\n   ],\n ])\n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex dfe572d03930..a83494a86a3a 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -11,7 +11,12 @@ import {\n } from './ast'\n import type { Candidate, CandidateModifier, NamedUtilityValue } from './candidate'\n import type { DesignSystem } from './design-system'\n-import { enableBaselineLast, enableSafeAlignment, enableWrapAnywhere } from './feature-flags'\n+import {\n+  enableBaselineLast,\n+  enableSafeAlignment,\n+  enableTextShadows,\n+  enableWrapAnywhere,\n+} from './feature-flags'\n import type { Theme, ThemeKey } from './theme'\n import { compareBreakpoints } from './utils/compare-breakpoints'\n import { DefaultMap } from './utils/default-map'\n@@ -4242,6 +4247,97 @@ export function createUtilities(theme: Theme) {\n     },\n   ])\n \n+  if (enableTextShadows) {\n+    let textShadowProperties = () => {\n+      return atRoot([property('--tw-text-shadow-color')])\n+    }\n+\n+    staticUtility('text-shadow-initial', [\n+      textShadowProperties,\n+      ['--tw-text-shadow-color', 'initial'],\n+    ])\n+\n+    utilities.functional('text-shadow', (candidate) => {\n+      if (!candidate.value) {\n+        let value = theme.get(['--text-shadow'])\n+        if (value === null) return\n+\n+        return [\n+          textShadowProperties(),\n+          decl(\n+            'text-shadow',\n+            replaceShadowColors(value, (color) => `var(--tw-text-shadow-color, ${color})`),\n+          ),\n+        ]\n+      }\n+\n+      if (candidate.value.kind === 'arbitrary') {\n+        let value: string | null = candidate.value.value\n+        let type = candidate.value.dataType ?? inferDataType(value, ['color'])\n+\n+        switch (type) {\n+          case 'color': {\n+            value = asColor(value, candidate.modifier, theme)\n+            if (value === null) return\n+\n+            return [textShadowProperties(), decl('--tw-text-shadow-color', value)]\n+          }\n+          default: {\n+            return [\n+              textShadowProperties(),\n+              decl(\n+                'text-shadow',\n+                replaceShadowColors(value, (color) => `var(--tw-text-shadow-color, ${color})`),\n+              ),\n+            ]\n+          }\n+        }\n+      }\n+\n+      switch (candidate.value.value) {\n+        case 'none':\n+          if (candidate.modifier) return\n+          return [textShadowProperties(), decl('text-shadow', 'none')]\n+      }\n+\n+      // Shadow size\n+      {\n+        let value = theme.get([`--text-shadow-${candidate.value.value}`])\n+        if (value) {\n+          if (candidate.modifier) return\n+          return [\n+            textShadowProperties(),\n+            decl(\n+              'text-shadow',\n+              replaceShadowColors(value, (color) => `var(--tw-text-shadow-color, ${color})`),\n+            ),\n+          ]\n+        }\n+      }\n+\n+      // Shadow color\n+      {\n+        let value = resolveThemeColor(candidate, theme, ['--text-shadow-color', '--color'])\n+        if (value) {\n+          return [textShadowProperties(), decl('--tw-text-shadow-color', value)]\n+        }\n+      }\n+    })\n+\n+    suggest('text-shadow', () => [\n+      {\n+        values: ['current', 'inherit', 'transparent'],\n+        valueThemeKeys: ['--text-shadow-color', '--color'],\n+        modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`),\n+      },\n+      {\n+        values: ['none'],\n+        valueThemeKeys: ['--text-shadow'],\n+        hasDefaultValue: true,\n+      },\n+    ])\n+  }\n+\n   {\n     let cssBoxShadowValue = [\n       'var(--tw-inset-shadow)',\n\ndiff --git a/packages/tailwindcss/theme.css b/packages/tailwindcss/theme.css\nindex 6f40223e4f5e..25411806d710 100644\n--- a/packages/tailwindcss/theme.css\n+++ b/packages/tailwindcss/theme.css\n@@ -374,6 +374,15 @@\n   --drop-shadow-xl: 0 9px 7px rgb(0 0 0 / 0.1);\n   --drop-shadow-2xl: 0 25px 25px rgb(0 0 0 / 0.15);\n \n+  --text-shadow-2xs: 0px 1px 0px rgb(0 0 0 / 0.15);\n+  --text-shadow-xs: 0px 1px 1px rgb(0 0 0 / 0.2);\n+  --text-shadow-sm:\n+    0px 1px 0px rgb(0 0 0 / 0.075), 0px 1px 1px rgb(0 0 0 / 0.075), 0px 2px 2px rgb(0 0 0 / 0.075);\n+  --text-shadow-md:\n+    0px 1px 1px rgb(0 0 0 / 0.1), 0px 1px 2px rgb(0 0 0 / 0.1), 0px 2px 4px rgb(0 0 0 / 0.1);\n+  --text-shadow-lg:\n+    0px 1px 2px rgb(0 0 0 / 0.1), 0px 3px 2px rgb(0 0 0 / 0.1), 0px 4px 8px rgb(0 0 0 / 0.1);\n+\n   --ease-in: cubic-bezier(0.4, 0, 1, 1);\n   --ease-out: cubic-bezier(0, 0, 0.2, 1);\n   --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\nindex c9a759bebe78..21ec15f3c562 100644\n--- a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n@@ -7756,6 +7756,75 @@ exports[`getClassList 1`] = `\n   \""text-nowrap\"",\n   \""text-pretty\"",\n   \""text-right\"",\n+  \""text-shadow\"",\n+  \""text-shadow-current\"",\n+  \""text-shadow-current/0\"",\n+  \""text-shadow-current/5\"",\n+  \""text-shadow-current/10\"",\n+  \""text-shadow-current/15\"",\n+  \""text-shadow-current/20\"",\n+  \""text-shadow-current/25\"",\n+  \""text-shadow-current/30\"",\n+  \""text-shadow-current/35\"",\n+  \""text-shadow-current/40\"",\n+  \""text-shadow-current/45\"",\n+  \""text-shadow-current/50\"",\n+  \""text-shadow-current/55\"",\n+  \""text-shadow-current/60\"",\n+  \""text-shadow-current/65\"",\n+  \""text-shadow-current/70\"",\n+  \""text-shadow-current/75\"",\n+  \""text-shadow-current/80\"",\n+  \""text-shadow-current/85\"",\n+  \""text-shadow-current/90\"",\n+  \""text-shadow-current/95\"",\n+  \""text-shadow-current/100\"",\n+  \""text-shadow-inherit\"",\n+  \""text-shadow-inherit/0\"",\n+  \""text-shadow-inherit/5\"",\n+  \""text-shadow-inherit/10\"",\n+  \""text-shadow-inherit/15\"",\n+  \""text-shadow-inherit/20\"",\n+  \""text-shadow-inherit/25\"",\n+  \""text-shadow-inherit/30\"",\n+  \""text-shadow-inherit/35\"",\n+  \""text-shadow-inherit/40\"",\n+  \""text-shadow-inherit/45\"",\n+  \""text-shadow-inherit/50\"",\n+  \""text-shadow-inherit/55\"",\n+  \""text-shadow-inherit/60\"",\n+  \""text-shadow-inherit/65\"",\n+  \""text-shadow-inherit/70\"",\n+  \""text-shadow-inherit/75\"",\n+  \""text-shadow-inherit/80\"",\n+  \""text-shadow-inherit/85\"",\n+  \""text-shadow-inherit/90\"",\n+  \""text-shadow-inherit/95\"",\n+  \""text-shadow-inherit/100\"",\n+  \""text-shadow-initial\"",\n+  \""text-shadow-none\"",\n+  \""text-shadow-transparent\"",\n+  \""text-shadow-transparent/0\"",\n+  \""text-shadow-transparent/5\"",\n+  \""text-shadow-transparent/10\"",\n+  \""text-shadow-transparent/15\"",\n+  \""text-shadow-transparent/20\"",\n+  \""text-shadow-transparent/25\"",\n+  \""text-shadow-transparent/30\"",\n+  \""text-shadow-transparent/35\"",\n+  \""text-shadow-transparent/40\"",\n+  \""text-shadow-transparent/45\"",\n+  \""text-shadow-transparent/50\"",\n+  \""text-shadow-transparent/55\"",\n+  \""text-shadow-transparent/60\"",\n+  \""text-shadow-transparent/65\"",\n+  \""text-shadow-transparent/70\"",\n+  \""text-shadow-transparent/75\"",\n+  \""text-shadow-transparent/80\"",\n+  \""text-shadow-transparent/85\"",\n+  \""text-shadow-transparent/90\"",\n+  \""text-shadow-transparent/95\"",\n+  \""text-shadow-transparent/100\"",\n   \""text-start\"",\n   \""text-transparent\"",\n   \""text-transparent/0\"",\n\ndiff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 64917430606d..9cce40da3471 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -15354,6 +15354,160 @@ test('text', async () => {\n   ).toEqual('')\n })\n \n+test('text-shadow', async () => {\n+  expect(\n+    await compileCss(\n+      css`\n+        @theme {\n+          --color-red-500: #ef4444;\n+          --text-shadow-2xs: 0px 1px 0px rgb(0 0 0 / 0.1);\n+          --text-shadow-sm: 0px 1px 2px rgb(0 0 0 / 0.06), 0px 2px 2px rgb(0 0 0 / 0.06);\n+        }\n+        @tailwind utilities;\n+      `,\n+      [\n+        // Shadows\n+        'text-shadow-2xs',\n+        'text-shadow-sm',\n+        'text-shadow-none',\n+        'text-shadow-[12px_12px_#0088cc]',\n+        'text-shadow-[10px_10px]',\n+        'text-shadow-[var(--value)]',\n+        'text-shadow-[shadow:var(--value)]',\n+\n+        // Colors\n+        'text-shadow-red-500',\n+        'text-shadow-red-500/50',\n+        'text-shadow-red-500/2.25',\n+        'text-shadow-red-500/2.5',\n+        'text-shadow-red-500/2.75',\n+        'text-shadow-red-500/[0.5]',\n+        'text-shadow-red-500/[50%]',\n+        'text-shadow-current',\n+        'text-shadow-current/50',\n+        'text-shadow-current/[0.5]',\n+        'text-shadow-current/[50%]',\n+        'text-shadow-inherit',\n+        'text-shadow-transparent',\n+        'text-shadow-[#0088cc]',\n+        'text-shadow-[#0088cc]/50',\n+        'text-shadow-[#0088cc]/[0.5]',\n+        'text-shadow-[#0088cc]/[50%]',\n+        'text-shadow-[color:var(--value)]',\n+        'text-shadow-[color:var(--value)]/50',\n+        'text-shadow-[color:var(--value)]/[0.5]',\n+        'text-shadow-[color:var(--value)]/[50%]',\n+      ],\n+    ),\n+  ).toMatchInlineSnapshot(`\n+    \"":root, :host {\n+      --color-red-500: #ef4444;\n+    }\n+\n+    .text-shadow-2xs {\n+      text-shadow: 0px 1px 0px var(--tw-text-shadow-color, #0000001a);\n+    }\n+\n+    .text-shadow-\\\\[\\\\#0088cc\\\\] {\n+      --tw-text-shadow-color: #08c;\n+    }\n+\n+    .text-shadow-\\\\[\\\\#0088cc\\\\]\\\\/50, .text-shadow-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .text-shadow-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-text-shadow-color: oklab(59.9824% -.06725 -.12414 / .5);\n+    }\n+\n+    .text-shadow-\\\\[10px_10px\\\\] {\n+      text-shadow: 10px 10px var(--tw-text-shadow-color, currentcolor);\n+    }\n+\n+    .text-shadow-\\\\[12px_12px_\\\\#0088cc\\\\] {\n+      text-shadow: 12px 12px var(--tw-text-shadow-color, #08c);\n+    }\n+\n+    .text-shadow-\\\\[color\\\\:var\\\\(--value\\\\)\\\\] {\n+      --tw-text-shadow-color: var(--value);\n+    }\n+\n+    .text-shadow-\\\\[color\\\\:var\\\\(--value\\\\)\\\\]\\\\/50, .text-shadow-\\\\[color\\\\:var\\\\(--value\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .text-shadow-\\\\[color\\\\:var\\\\(--value\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-text-shadow-color: color-mix(in oklab, var(--value) 50%, transparent);\n+    }\n+\n+    .text-shadow-\\\\[shadow\\\\:var\\\\(--value\\\\)\\\\], .text-shadow-\\\\[var\\\\(--value\\\\)\\\\] {\n+      text-shadow: var(--value);\n+    }\n+\n+    .text-shadow-current {\n+      --tw-text-shadow-color: currentColor;\n+    }\n+\n+    .text-shadow-current\\\\/50, .text-shadow-current\\\\/\\\\[0\\\\.5\\\\], .text-shadow-current\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-text-shadow-color: color-mix(in oklab, currentColor 50%, transparent);\n+    }\n+\n+    .text-shadow-inherit {\n+      --tw-text-shadow-color: inherit;\n+    }\n+\n+    .text-shadow-none {\n+      text-shadow: none;\n+    }\n+\n+    .text-shadow-red-500 {\n+      --tw-text-shadow-color: var(--color-red-500);\n+    }\n+\n+    .text-shadow-red-500\\\\/2\\\\.5 {\n+      --tw-text-shadow-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n+    }\n+\n+    .text-shadow-red-500\\\\/2\\\\.25 {\n+      --tw-text-shadow-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n+    }\n+\n+    .text-shadow-red-500\\\\/2\\\\.75 {\n+      --tw-text-shadow-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n+    }\n+\n+    .text-shadow-red-500\\\\/50, .text-shadow-red-500\\\\/\\\\[0\\\\.5\\\\], .text-shadow-red-500\\\\/\\\\[50\\\\%\\\\] {\n+      --tw-text-shadow-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n+    }\n+\n+    .text-shadow-sm {\n+      text-shadow: 0px 1px 2px var(--tw-text-shadow-color, #0000000f), 0px 2px 2px var(--tw-text-shadow-color, #0000000f);\n+    }\n+\n+    .text-shadow-transparent {\n+      --tw-text-shadow-color: transparent;\n+    }\n+\n+    @property --tw-text-shadow-color {\n+      syntax: \""*\"";\n+      inherits: false\n+    }\""\n+  `)\n+  expect(\n+    await run([\n+      '-shadow-xl',\n+      '-shadow-none',\n+      '-shadow-red-500',\n+      '-shadow-red-500/50',\n+      '-shadow-red-500/[0.5]',\n+      '-shadow-red-500/[50%]',\n+      '-shadow-current',\n+      '-shadow-current/50',\n+      '-shadow-current/[0.5]',\n+      '-shadow-current/[50%]',\n+      '-shadow-inherit',\n+      '-shadow-transparent',\n+      '-shadow-[#0088cc]',\n+      '-shadow-[#0088cc]/50',\n+      '-shadow-[#0088cc]/[0.5]',\n+      '-shadow-[#0088cc]/[50%]',\n+      '-shadow-[var(--value)]',\n+    ]),\n+  ).toEqual('')\n+})\n+\n test('shadow', async () => {\n   expect(\n     await compileCss(\n\ndiff --git a/packages/tailwindcss/tests/ui.spec.ts b/packages/tailwindcss/tests/ui.spec.ts\nindex 64057877b7bf..89dd467e3ebe 100644\n--- a/packages/tailwindcss/tests/ui.spec.ts\n+++ b/packages/tailwindcss/tests/ui.spec.ts\n@@ -410,6 +410,46 @@ test('inset shadow colors', async ({ page }) => {\n   )\n })\n \n+test('text shadow colors', async ({ page }) => {\n+  let { getPropertyValue } = await render(\n+    page,\n+    html`\n+      <div id=\""a\"" class=\""text-shadow-xs text-shadow-red\""></div>\n+      <div id=\""b\"" class=\""text-shadow-lg text-shadow-red\""></div>\n+      <div id=\""c\"" class=\""text-shadow-[0px_2px_4px] text-shadow-red\""></div>\n+      <div id=\""d\"" class=\""text-shadow-xs text-shadow-red hover:text-shadow-lg\"">Hello world</div>\n+      <div\n+        id=\""e\""\n+        class=\""text-shadow-xs text-shadow-red hover:text-shadow-lg hover:text-shadow-initial\""\n+      >\n+        Hello world\n+      </div>\n+    `,\n+  )\n+\n+  expect(await getPropertyValue('#a', 'text-shadow')).toEqual('rgb(255, 0, 0) 0px 1px 1px')\n+  expect(await getPropertyValue('#b', 'text-shadow')).toEqual(\n+    'rgb(255, 0, 0) 0px 1px 2px, rgb(255, 0, 0) 0px 3px 2px, rgb(255, 0, 0) 0px 4px 8px',\n+  )\n+  expect(await getPropertyValue('#c', 'text-shadow')).toEqual('rgb(255, 0, 0) 0px 2px 4px')\n+\n+  expect(await getPropertyValue('#d', 'text-shadow')).toEqual('rgb(255, 0, 0) 0px 1px 1px')\n+\n+  await page.locator('#d').hover()\n+\n+  expect(await getPropertyValue('#d', 'text-shadow')).toEqual(\n+    'rgb(255, 0, 0) 0px 1px 2px, rgb(255, 0, 0) 0px 3px 2px, rgb(255, 0, 0) 0px 4px 8px',\n+  )\n+\n+  expect(await getPropertyValue('#e', 'text-shadow')).toEqual('rgb(255, 0, 0) 0px 1px 1px')\n+\n+  await page.locator('#e').hover()\n+\n+  expect(await getPropertyValue('#e', 'text-shadow')).toEqual(\n+    'rgba(0, 0, 0, 0.1) 0px 1px 2px, rgba(0, 0, 0, 0.1) 0px 3px 2px, rgba(0, 0, 0, 0.1) 0px 4px 8px',\n+  )\n+})\n+\n test('filter', async ({ page }) => {\n   let { getPropertyValue } = await render(\n     page,\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17361"", ""pr_id"": 17361, ""issue_id"": 17357, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Declaring multiple CSS variables doesn't work with Vite\n**What version of Tailwind CSS are you using?**\n\n4.0.15\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 6.2.0\n\n**What version of Node.js are you using?**\n\nv20.18.1\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nMacOS\n\n**Reproduction URL**\n\nhttps://github.com/samrobbins85/tailwind-variables (Not working as intended)\n\nhttps://play.tailwindcss.com/8tmNO1FjuA (Working as intended)\n\n**Describe your issue**\n\nWhen trying to declare two CSS variables in one set of square brackets, it works on Tailwind play but not with a vite dev server for the same code\n\ne.g. `[--foo:1rem;--bar:2rem]` doesn't work but `[--variable:5rem]` does work locally but both do on tailwind play"", ""issue_word_count"": 135, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/candidate.test.ts"", ""packages/tailwindcss/src/candidate.ts"", ""packages/tailwindcss/src/utils/is-valid-arbitrary.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/candidate.test.ts""], ""base_commit"": ""1b6230f54f4921da7fe7fba33bd6ed647ff70832"", ""head_commit"": ""8cdda5e5da2609b2fb586f470dfeab5b3bf54f7c"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17361"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17361"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-28T16:38:57.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 31bd8c820db8..434ac59e9b55 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -28,6 +28,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - `@tailwindcss/cli` considers ignore rules in `--watch` mode ([#17255](https://github.com/tailwindlabs/tailwindcss/pull/17255))\n - Fix negated `content` rules in legacy JavaScript configuration ([#17255](https://github.com/tailwindlabs/tailwindcss/pull/17255))\n - Extract special `@(\""@\"")md:\u2026` syntax in Razor files ([#17427](https://github.com/tailwindlabs/tailwindcss/pull/17427))\n+- Disallow arbitrary values with top-level braces and semicolons as well as unbalanced parentheses and brackets ([#17361](https://github.com/tailwindlabs/tailwindcss/pull/17361))\n \n ### Changed\n \n\ndiff --git a/packages/tailwindcss/src/candidate.ts b/packages/tailwindcss/src/candidate.ts\nindex 8238dfc2f0e9..406a16aad1b5 100644\n--- a/packages/tailwindcss/src/candidate.ts\n+++ b/packages/tailwindcss/src/candidate.ts\n@@ -1,5 +1,6 @@\n import type { DesignSystem } from './design-system'\n import { decodeArbitraryValue } from './utils/decode-arbitrary-value'\n+import { isValidArbitrary } from './utils/is-valid-arbitrary'\n import { segment } from './utils/segment'\n \n const COLON = 0x3a\n@@ -326,6 +327,9 @@ export function* parseCandidate(input: string, designSystem: DesignSystem): Iter\n     let property = baseWithoutModifier.slice(0, idx)\n     let value = decodeArbitraryValue(baseWithoutModifier.slice(idx + 1))\n \n+    // Values can't contain `;` or `}` characters at the top-level.\n+    if (!isValidArbitrary(value)) return\n+\n     yield {\n       kind: 'arbitrary',\n       property,\n@@ -443,6 +447,9 @@ export function* parseCandidate(input: string, designSystem: DesignSystem): Iter\n \n         let arbitraryValue = decodeArbitraryValue(value.slice(startArbitraryIdx + 1, -1))\n \n+        // Values can't contain `;` or `}` characters at the top-level.\n+        if (!isValidArbitrary(arbitraryValue)) continue\n+\n         // Extract an explicit typehint if present, e.g. `bg-[color:var(--my-var)])`\n         let typehint = ''\n         for (let i = 0; i < arbitraryValue.length; i++) {\n@@ -500,6 +507,9 @@ function parseModifier(modifier: string): CandidateModifier | null {\n   if (modifier[0] === '[' && modifier[modifier.length - 1] === ']') {\n     let arbitraryValue = decodeArbitraryValue(modifier.slice(1, -1))\n \n+    // Values can't contain `;` or `}` characters at the top-level.\n+    if (!isValidArbitrary(arbitraryValue)) return null\n+\n     // Empty arbitrary values are invalid. E.g.: `data-[]:`\n     //                                                 ^^\n     if (arbitraryValue.length === 0 || arbitraryValue.trim().length === 0) return null\n@@ -513,6 +523,9 @@ function parseModifier(modifier: string): CandidateModifier | null {\n   if (modifier[0] === '(' && modifier[modifier.length - 1] === ')') {\n     let arbitraryValue = decodeArbitraryValue(modifier.slice(1, -1))\n \n+    // Values can't contain `;` or `}` characters at the top-level.\n+    if (!isValidArbitrary(arbitraryValue)) return null\n+\n     // Empty arbitrary values are invalid. E.g.: `data-():`\n     //                                                 ^^\n     if (arbitraryValue.length === 0 || arbitraryValue.trim().length === 0) return null\n@@ -552,6 +565,9 @@ export function parseVariant(variant: string, designSystem: DesignSystem): Varia\n \n     let selector = decodeArbitraryValue(variant.slice(1, -1))\n \n+    // Values can't contain `;` or `}` characters at the top-level.\n+    if (!isValidArbitrary(selector)) return null\n+\n     // Empty arbitrary values are invalid. E.g.: `[]:`\n     //                                            ^^\n     if (selector.length === 0 || selector.trim().length === 0) return null\n@@ -629,6 +645,9 @@ export function parseVariant(variant: string, designSystem: DesignSystem): Varia\n \n             let arbitraryValue = decodeArbitraryValue(value.slice(1, -1))\n \n+            // Values can't contain `;` or `}` characters at the top-level.\n+            if (!isValidArbitrary(arbitraryValue)) return null\n+\n             // Empty arbitrary values are invalid. E.g.: `data-[]:`\n             //                                                 ^^\n             if (arbitraryValue.length === 0 || arbitraryValue.trim().length === 0) return null\n@@ -650,6 +669,9 @@ export function parseVariant(variant: string, designSystem: DesignSystem): Varia\n \n             let arbitraryValue = decodeArbitraryValue(value.slice(1, -1))\n \n+            // Values can't contain `;` or `}` characters at the top-level.\n+            if (!isValidArbitrary(arbitraryValue)) return null\n+\n             // Empty arbitrary values are invalid. E.g.: `data-():`\n             //                                                 ^^\n             if (arbitraryValue.length === 0 || arbitraryValue.trim().length === 0) return null\n\ndiff --git a/packages/tailwindcss/src/utils/is-valid-arbitrary.ts b/packages/tailwindcss/src/utils/is-valid-arbitrary.ts\nnew file mode 100644\nindex 000000000000..2ee433e48f0b\n--- /dev/null\n+++ b/packages/tailwindcss/src/utils/is-valid-arbitrary.ts\n@@ -0,0 +1,93 @@\n+const BACKSLASH = 0x5c\n+const OPEN_CURLY = 0x7b\n+const CLOSE_CURLY = 0x7d\n+const OPEN_PAREN = 0x28\n+const CLOSE_PAREN = 0x29\n+const OPEN_BRACKET = 0x5b\n+const CLOSE_BRACKET = 0x5d\n+const DOUBLE_QUOTE = 0x22\n+const SINGLE_QUOTE = 0x27\n+const SEMICOLON = 0x3b\n+\n+// This is a shared buffer that is used to keep track of the current nesting level\n+// of parens, brackets, and braces. It is used to determine if a character is at\n+// the top-level of a string. This is a performance optimization to avoid memory\n+// allocations on every call to `segment`.\n+const closingBracketStack = new Uint8Array(256)\n+\n+/**\n+ * Determine if a given string might be a valid arbitrary value.\n+ *\n+ * Unbalanced parens, brackets, and braces are not allowed. Additionally, a\n+ * top-level `;` is not allowed.\n+ *\n+ * This function is very similar to `segment` but `segment` cannot be used\n+ * because we'd need to split on a bracket stack character.\n+ */\n+export function isValidArbitrary(input: string) {\n+  // SAFETY: We can use an index into a shared buffer because this function is\n+  // synchronous, non-recursive, and runs in a single-threaded environment.\n+  let stackPos = 0\n+  let len = input.length\n+\n+  for (let idx = 0; idx < len; idx++) {\n+    let char = input.charCodeAt(idx)\n+\n+    switch (char) {\n+      case BACKSLASH:\n+        // The next character is escaped, so we skip it.\n+        idx += 1\n+        break\n+      // Strings should be handled as-is until the end of the string. No need to\n+      // worry about balancing parens, brackets, or curlies inside a string.\n+      case SINGLE_QUOTE:\n+      case DOUBLE_QUOTE:\n+        // Ensure we don't go out of bounds.\n+        while (++idx < len) {\n+          let nextChar = input.charCodeAt(idx)\n+\n+          // The next character is escaped, so we skip it.\n+          if (nextChar === BACKSLASH) {\n+            idx += 1\n+            continue\n+          }\n+\n+          if (nextChar === char) {\n+            break\n+          }\n+        }\n+        break\n+      case OPEN_PAREN:\n+        closingBracketStack[stackPos] = CLOSE_PAREN\n+        stackPos++\n+        break\n+      case OPEN_BRACKET:\n+        closingBracketStack[stackPos] = CLOSE_BRACKET\n+        stackPos++\n+        break\n+      case OPEN_CURLY:\n+        // NOTE: We intentionally do not consider `{` to move the stack pointer\n+        // because a candidate like `[&{color:red}]:flex` should not be valid.\n+        break\n+      case CLOSE_BRACKET:\n+      case CLOSE_CURLY:\n+      case CLOSE_PAREN:\n+        if (stackPos === 0) return false\n+\n+        if (stackPos > 0 && char === closingBracketStack[stackPos - 1]) {\n+          // SAFETY: The buffer does not need to be mutated because the stack is\n+          // only ever read from or written to its current position. Its current\n+          // position is only ever incremented after writing to it. Meaning that\n+          // the buffer can be dirty for the next use and still be correct since\n+          // reading/writing always starts at position `0`.\n+          stackPos--\n+        }\n+        break\n+      case SEMICOLON:\n+        if (stackPos === 0) return false\n+        break\n+    }\n+  }\n+\n+  return true\n+}\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/candidate.test.ts b/packages/tailwindcss/src/candidate.test.ts\nindex 2892f0053c9e..61be4378afda 100644\n--- a/packages/tailwindcss/src/candidate.test.ts\n+++ b/packages/tailwindcss/src/candidate.test.ts\n@@ -1790,3 +1790,31 @@ it.each([\n \n   expect(run(rawCandidate, { utilities, variants })).toEqual([])\n })\n+\n+it.each([\n+  // Arbitrary properties with `;` or `}`\n+  '[color:red;color:blue]',\n+  '[color:red}html{color:blue]',\n+\n+  // Arbitrary values that end the declaration\n+  'bg-[red;color:blue]',\n+\n+  // Arbitrary values that end the block\n+  'bg-[red}html{color:blue]',\n+\n+  // Arbitrary variants that end the block\n+  '[&{color:red}]:flex',\n+\n+  // Arbitrary variant values that end the block\n+  'data-[a]{color:red}foo[a]:flex',\n+])('should not parse invalid arbitrary values: %s', (rawCandidate) => {\n+  let utilities = new Utilities()\n+  utilities.static('flex', () => [])\n+  utilities.functional('bg', () => [])\n+\n+  let variants = new Variants()\n+  variants.functional('data', () => {})\n+  variants.compound('group', Compounds.StyleRules, () => {})\n+\n+  expect(run(rawCandidate, { utilities, variants })).toEqual([])\n+})\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17352"", ""pr_id"": 17352, ""issue_id"": 17332, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""not all `@keyframes` included in generated output\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\n4.0.15\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nnextjs\n\n**What version of Node.js are you using?**\n\n22\n\n**What browser are you using?**\n\nfirefox\n\n**What operating system are you using?**\n\nlinux\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/dHTQWVQ1kz?file=css\n\n**Describe your issue**\n\ni am defining an animation in a `@theme` block which references two `@keyframes` by name. depending on the order, only one or both keyframes are included in the generated css:\n\n```css\n@import \""tailwindcss\"";\n\n@theme {\n  /* This adds only the \""spin\"" keyframes to the generated css. */\n  --animate-test: 1000ms ease-out 500ms both fade-in, 1000ms linear 500ms spin infinite;\n\n  /* This adds both \""spin\"" and \""fade-in\"" keyframes to the generated css - the only difference is the order in which the two animations are listed. */\n  /* --animate-test: 1000ms linear 500ms spin infinite, 1000ms ease-out 500ms both fade-in; */\n\n  @keyframes fade-in {\n    from { opacity: 0% }\n    to { opacity: 100% }\n  }\n}\n```\n\n(see the playground link above)"", ""issue_word_count"": 212, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/ast.ts"", ""packages/tailwindcss/src/index.test.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/index.test.ts""], ""base_commit"": ""baa016a1c94f1dfa851106700fdf9709b5ddaed9"", ""head_commit"": ""06001ca2adc449d795290d757242dca442835fd9"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17352"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17352"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-24T11:25:41.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 377ef036230a..f97dc1f72470 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -25,6 +25,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Fixed\n \n - Fix class extraction followed by `(` in Pug ([#17320](https://github.com/tailwindlabs/tailwindcss/pull/17320))\n+- Ensure `@keyframes` for theme animations are emitted if they are referenced following a comma\n - Vite: Ensure that updates to an imported CSS file are properly propagated after updating templates ([#17347](https://github.com/tailwindlabs/tailwindcss/pull/17347))\n - Pre process `Slim` templates embedded in Ruby files ([#17336](https://github.com/tailwindlabs/tailwindcss/pull/17336))\n - Error when input and output files resolve to the same file when using the CLI ([#17311](https://github.com/tailwindlabs/tailwindcss/pull/17311))\n\ndiff --git a/packages/tailwindcss/src/ast.ts b/packages/tailwindcss/src/ast.ts\nindex 83674d1148e9..e13e19743209 100644\n--- a/packages/tailwindcss/src/ast.ts\n+++ b/packages/tailwindcss/src/ast.ts\n@@ -310,8 +310,8 @@ export function optimizeAst(ast: AstNode[], designSystem: DesignSystem) {\n \n       // Track used animation names\n       if (node.property === 'animation') {\n-        let parts = node.value.split(/\\s+/)\n-        for (let part of parts) usedKeyframeNames.add(part)\n+        for (let keyframeName of extractKeyframeNames(node.value))\n+          usedKeyframeNames.add(keyframeName)\n       }\n \n       parent.push(node)\n@@ -438,8 +438,8 @@ export function optimizeAst(ast: AstNode[], designSystem: DesignSystem) {\n       )\n       if (variableUsed) {\n         if (declaration.property.startsWith(designSystem.theme.prefixKey('--animate-'))) {\n-          let parts = declaration.value!.split(/\\s+/)\n-          for (let part of parts) usedKeyframeNames.add(part)\n+          for (let keyframeName of extractKeyframeNames(declaration.value!))\n+            usedKeyframeNames.add(keyframeName)\n         }\n \n         continue\n@@ -605,3 +605,7 @@ function isVariableUsed(\n \n   return false\n }\n+\n+function extractKeyframeNames(value: string): string[] {\n+  return value.split(/[\\s,]+/)\n+}\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex ce3dd9d47182..25d30f2ea670 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -1939,6 +1939,49 @@ describe('Parsing theme values from CSS', () => {\n     `)\n   })\n \n+  // https://github.com/tailwindlabs/tailwindcss/issues/17332\n+  test('extracts keyframe names followed by comma', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @theme {\n+            --animate-test: 500ms both fade-in, 1000ms linear 500ms spin infinite;\n+\n+            @keyframes fade-in {\n+              from {\n+                opacity: 0%;\n+              }\n+              to {\n+                opacity: 100%;\n+              }\n+            }\n+          }\n+\n+          @tailwind utilities;\n+        `,\n+        ['animate-test'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"":root, :host {\n+        --animate-test: .5s both fade-in, 1s linear .5s spin infinite;\n+      }\n+\n+      .animate-test {\n+        animation: var(--animate-test);\n+      }\n+\n+      @keyframes fade-in {\n+        from {\n+          opacity: 0;\n+        }\n+\n+        to {\n+          opacity: 1;\n+        }\n+      }\""\n+    `)\n+  })\n+\n   test('keyframes outside of `@theme are always preserved', async () => {\n     expect(\n       await compileCss(\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17347"", ""pr_id"": 17347, ""issue_id"": 17339, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Using `@tailwindcss/vite` breaks updates on imported CSS\n**What version of Tailwind CSS are you using?**\n\nv4.0.15 (latest)\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 6.2.2 (latest)\n\n**Reproduction URL**\n\nhttps://codesandbox.io/p/devbox/x3r86q\n\n**Describe your issue**\n\nInitial setup:\n- Import Tailwind and another CSS file(s) into the root CSS file\n\nSteps to reproduce:\n1. Edit `index.html` (may be a change to JS/JSX files too)\n2. Edit `imported.css`\n3. Outdated CSS will be served until another change to `index.html` or `index.css` is made, or until the server is restarted. Page refresh doesn't serve the latest CSS either.\n\nCSS changes work fine without `@import \""tailwindcss\""`. It also works when using `@tailwindcss/postcss` instead of the Vite plugin.\n\n**Might be related**\nhttps://github.com/tailwindlabs/tailwindcss/issues/16764"", ""issue_word_count"": 145, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/index.test.ts"", ""packages/@tailwindcss-vite/src/index.ts""], ""pr_changed_test_files"": [""integrations/vite/index.test.ts""], ""base_commit"": ""42f68bb3598ed94618220ecad3c77260b729130f"", ""head_commit"": ""49af44bcf455ea5a97b7755f20d6d02d673b7972"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17347"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17347"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-24T10:54:55.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex a8017a7532dc..a275a0134562 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -24,6 +24,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ### Fixed\n \n+- Vite: Ensure that updates to an imported CSS file are properly propagated after updating templates ([#17347](https://github.com/tailwindlabs/tailwindcss/pull/17347))\n - Fix class extraction followed by `(` in Pug ([#17320](https://github.com/tailwindlabs/tailwindcss/pull/17320))\n \n ### [4.0.15] - 2025-03-20\n\ndiff --git a/packages/@tailwindcss-vite/src/index.ts b/packages/@tailwindcss-vite/src/index.ts\nindex ec42bba0ac26..1d27ee1689fd 100644\n--- a/packages/@tailwindcss-vite/src/index.ts\n+++ b/packages/@tailwindcss-vite/src/index.ts\n@@ -277,6 +277,10 @@ class Root {\n \n       this.scanner = new Scanner({ sources })\n       DEBUG && I.end('Setup scanner')\n+    } else {\n+      for (let buildDependency of this.buildDependencies.keys()) {\n+        addWatchFile(buildDependency)\n+      }\n     }\n \n     if (\n"", ""test_patch"": ""diff --git a/integrations/vite/index.test.ts b/integrations/vite/index.test.ts\nindex 59b304cf4079..4c64f220ea5d 100644\n--- a/integrations/vite/index.test.ts\n+++ b/integrations/vite/index.test.ts\n@@ -149,9 +149,15 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n         'project-a/src/index.css': css`\n           @reference 'tailwindcss/theme';\n           @import 'tailwindcss/utilities';\n+          @import './imported.css';\n           @config '../tailwind.config.js';\n           @source '../../project-b/src/**/*.html';\n         `,\n+        'project-a/src/imported.css': css`\n+          .imported {\n+            color: red;\n+          }\n+        `,\n         'project-b/src/index.html': html`\n           <div class=\""flex\"" />\n         `,\n@@ -179,6 +185,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n         expect(styles).toContain(candidate`underline`)\n         expect(styles).toContain(candidate`flex`)\n         expect(styles).toContain(candidate`font-bold`)\n+        expect(styles).toContain(candidate`imported`)\n       })\n \n       await retryAssertion(async () => {\n@@ -199,6 +206,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n         expect(styles).toContain(candidate`underline`)\n         expect(styles).toContain(candidate`flex`)\n         expect(styles).toContain(candidate`font-bold`)\n+        expect(styles).toContain(candidate`imported`)\n         expect(styles).toContain(candidate`m-2`)\n       })\n \n@@ -216,6 +224,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n         expect(styles).toContain(candidate`underline`)\n         expect(styles).toContain(candidate`flex`)\n         expect(styles).toContain(candidate`font-bold`)\n+        expect(styles).toContain(candidate`imported`)\n         expect(styles).toContain(candidate`m-2`)\n         expect(styles).toContain(candidate`[.changed_&]:content-['project-b/src/index.js']`)\n       })\n@@ -234,6 +243,44 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n           `,\n         )\n \n+        let styles = await fetchStyles(url)\n+        expect(styles).toContain(candidate`red`)\n+        expect(styles).toContain(candidate`flex`)\n+        expect(styles).toContain(candidate`imported`)\n+        expect(styles).toContain(candidate`m-2`)\n+        expect(styles).toContain(candidate`underline`)\n+        expect(styles).toContain(candidate`[.changed_&]:content-['project-b/src/index.js']`)\n+        expect(styles).toContain(candidate`font-bold`)\n+      })\n+\n+      await retryAssertion(async () => {\n+        // Trigger a partial rebuild for the next test\n+        await fs.write(\n+          'project-a/index.html',\n+          html`\n+            <head>\n+              <link rel=\""stylesheet\"" href=\""./src/index.css\"" />\n+            </head>\n+            <body>\n+              <div class=\""m-4\"">Hello, world!</div>\n+            </body>\n+          `,\n+        )\n+        let styles = await fetchStyles(url)\n+        expect(styles).toContain(candidate`m-4`)\n+      })\n+\n+      await retryAssertion(async () => {\n+        // Changing an `@imported` CSS file after a partial rebuild also triggers the correct update\n+        await fs.write(\n+          'project-a/src/imported.css',\n+          css`\n+            .imported-updated {\n+              color: red;\n+            }\n+          `,\n+        )\n+\n         let styles = await fetchStyles(url)\n         expect(styles).toContain(candidate`red`)\n         expect(styles).toContain(candidate`flex`)\n@@ -241,6 +288,7 @@ describe.each(['postcss', 'lightningcss'])('%s', (transformer) => {\n         expect(styles).toContain(candidate`underline`)\n         expect(styles).toContain(candidate`[.changed_&]:content-['project-b/src/index.js']`)\n         expect(styles).toContain(candidate`font-bold`)\n+        expect(styles).toContain(candidate`imported-updated`)\n       })\n     },\n   )\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17306"", ""pr_id"": 17306, ""issue_id"": 17194, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Safari 16.4 crash on `<input placeholder>` or `text-current` + opacity\n**What version of Tailwind CSS are you using?**\n\nv4.0.14\n\n**What browser are you using?**\n\niOS Safari 16.4\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/K2JSaOKDJX\n\n```html\n<p class=\""text-current/50\"">text</p>\n```\n\nhttps://play.tailwindcss.com/V9jkBlLwU8\n\n```html\n<input placeholder=\""text\"" />\n```\n\n**Describe your issue**\n\nBoth of the examples above crash the webpage in Safari 16.4:\n\n<img width=\""948\"" alt=\""Image\"" src=\""https://github.com/user-attachments/assets/1428c23a-7c01-4517-9e08-d1303443e91d\"" />\n\nI don't know the full range of affected versions.\n\nThe trigger seems to be passing `currentColor` to `color-mix()`, I found more information about it here:\n\nhttps://stackoverflow.com/questions/76436497/the-color-mix-property-involving-currentcolor-causes-safari-to-crash\n\nMy second example above crashes because that exact combo is in `preflight.css`:\n\nhttps://github.com/tailwindlabs/tailwindcss/blob/50562a9c94e16934bfa8608e471c87c0157f7731/packages/tailwindcss/preflight.css#L291-L294\n\nMaybe something like `color(from currentColor srgb r g b / 50%)` would work instead."", ""issue_word_count"": 169, ""test_files_count"": 5, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/preflight.css"", ""packages/tailwindcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap"", ""packages/tailwindcss/src/compat/plugin-api.test.ts"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap"", ""packages/tailwindcss/src/compat/plugin-api.test.ts"", ""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""3f313b4eb25a39e0006e1b53bf2648f59007b13a"", ""head_commit"": ""e5c0b50cee89b37e7e1cbccef99966b49d1df62b"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17306"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17306"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-20T16:43:32.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 65a27e21add9..c07c1de024f2 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -24,9 +24,9 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Fix incorrect angle in `-bg-conic-*` utilities ([#17174](https://github.com/tailwindlabs/tailwindcss/pull/17174))\n - Fix `border-[12px_4px]` being interpreted as a `border-color` instead of a `border-width` ([#17248](https://github.com/tailwindlabs/tailwindcss/pull/17248))\n-- Use the `oklab(\u2026)` function when applying opacity to `currentColor` to work around a crash in Safari 16.4 and 16.5 ([#17247](https://github.com/tailwindlabs/tailwindcss/pull/17247))\n+- Work around a crash in Safari 16.4 and 16.5 when using the default Preflight styles ([#17306](https://github.com/tailwindlabs/tailwindcss/pull/17306))\n - Pre-process `<template lang=\""\u2026\"">` in Vue files ([#17252](https://github.com/tailwindlabs/tailwindcss/pull/17252))\n-- Ensure that all CSS variables used by preflight are prefixed ([#17036](https://github.com/tailwindlabs/tailwindcss/pull/17036))\n+- Ensure that all CSS variables used by Preflight are prefixed ([#17036](https://github.com/tailwindlabs/tailwindcss/pull/17036))\n \n ### Changed\n \n\ndiff --git a/packages/tailwindcss/preflight.css b/packages/tailwindcss/preflight.css\nindex f87d5d108618..d39171b95c0d 100644\n--- a/packages/tailwindcss/preflight.css\n+++ b/packages/tailwindcss/preflight.css\n@@ -276,13 +276,23 @@ textarea,\n }\n \n /*\n-  1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n-  2. Set the default placeholder color to a semi-transparent version of the current text color. We use the `oklab(\u2026)` function to work around an issue in Safari 16.4 and 16.5. (https://github.com/tailwindlabs/tailwindcss/issues/17194)\n+  Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n */\n \n ::placeholder {\n-  opacity: 1; /* 1 */\n-  color: oklab(from currentColor l a b / 50%); /* 2 */\n+  opacity: 1;\n+}\n+\n+/*\n+  Set the default placeholder color to a semi-transparent version of the current text color in browsers that do not\n+  crash when using `color-mix(\u2026)` with `currentColor`. (https://github.com/tailwindlabs/tailwindcss/issues/17194)\n+*/\n+\n+@supports (not (-webkit-appearance: -apple-pay-button)) /* Not Safari */ or\n+  (contain-intrinsic-size: 1px) /* Safari 17+ */ {\n+  ::placeholder {\n+    color: color-mix(in oklab, currentColor 50%, transparent);\n+  }\n }\n \n /*\n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex fad65bbf0db3..587dc2d508a8 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -136,13 +136,6 @@ export function withAlpha(value: string, alpha: string): string {\n     alpha = `${alphaAsNumber * 100}%`\n   }\n \n-  // Use the `oklab(\u2026)` function when applying alpha to `currentColor` to work\n-  // around a crash with Safari 16.4 and 16.5\n-  // https://github.com/tailwindlabs/tailwindcss/issues/17194\n-  if (value === 'currentColor') {\n-    return `oklab(from currentColor l a b / ${alpha})`\n-  }\n-\n   return `color-mix(in oklab, ${value} ${alpha}, transparent)`\n }\n \n"", ""test_patch"": ""diff --git a/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap b/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\nindex 5d41297d403a..12b578d4423f 100644\n--- a/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\n+++ b/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\n@@ -161,7 +161,12 @@ exports[`\\`@import 'tailwindcss'\\` is replaced with the generated CSS 1`] = `\n \n   ::placeholder {\n     opacity: 1;\n-    color: oklab(from currentColor l a b / 50%);\n+  }\n+\n+  @supports (not ((-webkit-appearance: -apple-pay-button))) or (contain-intrinsic-size: 1px) {\n+    ::placeholder {\n+      color: color-mix(in oklab, currentColor 50%, transparent);\n+    }\n   }\n \n   textarea {\n\ndiff --git a/packages/tailwindcss/src/__snapshots__/index.test.ts.snap b/packages/tailwindcss/src/__snapshots__/index.test.ts.snap\nindex c250d4f6d564..049d0f33ed33 100644\n--- a/packages/tailwindcss/src/__snapshots__/index.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/index.test.ts.snap\n@@ -250,7 +250,12 @@ exports[`compiling CSS > prefix all CSS variables inside preflight 1`] = `\n \n   ::placeholder {\n     opacity: 1;\n-    color: oklab(from currentColor l a b / 50%);\n+  }\n+\n+  @supports (not ((-webkit-appearance: -apple-pay-button))) or (contain-intrinsic-size: 1px) {\n+    ::placeholder {\n+      color: color-mix(in oklab, currentColor 50%, transparent);\n+    }\n   }\n \n   textarea {\n\ndiff --git a/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap b/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap\nindex a33a5371acff..5f1c2fea3f54 100644\n--- a/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap\n@@ -104,7 +104,7 @@ exports[`border-* 1`] = `\n }\n \n .border-current\\\\/50 {\n-  border-color: oklab(from currentColor l a b / 50%);\n+  border-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-inherit {\n@@ -246,7 +246,7 @@ exports[`border-b-* 1`] = `\n }\n \n .border-b-current\\\\/50 {\n-  border-bottom-color: oklab(from currentColor l a b / 50%);\n+  border-bottom-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-b-inherit {\n@@ -388,7 +388,7 @@ exports[`border-e-* 1`] = `\n }\n \n .border-e-current\\\\/50 {\n-  border-inline-end-color: oklab(from currentColor l a b / 50%);\n+  border-inline-end-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-e-inherit {\n@@ -530,7 +530,7 @@ exports[`border-l-* 1`] = `\n }\n \n .border-l-current\\\\/50 {\n-  border-left-color: oklab(from currentColor l a b / 50%);\n+  border-left-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-l-inherit {\n@@ -672,7 +672,7 @@ exports[`border-r-* 1`] = `\n }\n \n .border-r-current\\\\/50 {\n-  border-right-color: oklab(from currentColor l a b / 50%);\n+  border-right-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-r-inherit {\n@@ -814,7 +814,7 @@ exports[`border-s-* 1`] = `\n }\n \n .border-s-current\\\\/50 {\n-  border-inline-start-color: oklab(from currentColor l a b / 50%);\n+  border-inline-start-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-s-inherit {\n@@ -956,7 +956,7 @@ exports[`border-t-* 1`] = `\n }\n \n .border-t-current\\\\/50 {\n-  border-top-color: oklab(from currentColor l a b / 50%);\n+  border-top-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-t-inherit {\n@@ -1098,7 +1098,7 @@ exports[`border-x-* 1`] = `\n }\n \n .border-x-current\\\\/50 {\n-  border-inline-color: oklab(from currentColor l a b / 50%);\n+  border-inline-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-x-inherit {\n@@ -1240,7 +1240,7 @@ exports[`border-y-* 1`] = `\n }\n \n .border-y-current\\\\/50 {\n-  border-block-color: oklab(from currentColor l a b / 50%);\n+  border-block-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-y-inherit {\n\ndiff --git a/packages/tailwindcss/src/compat/plugin-api.test.ts b/packages/tailwindcss/src/compat/plugin-api.test.ts\nindex d552b805dd8e..b786f2311e28 100644\n--- a/packages/tailwindcss/src/compat/plugin-api.test.ts\n+++ b/packages/tailwindcss/src/compat/plugin-api.test.ts\n@@ -3860,7 +3860,7 @@ describe('matchUtilities()', () => {\n       }\n \n       .scrollbar-current\\\\/45 {\n-        scrollbar-color: oklab(from currentColor l a b / 45%);\n+        scrollbar-color: color-mix(in oklab, currentColor 45%, transparent);\n       }\""\n     `)\n   })\n\ndiff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 4947cf2759a6..21b43dabab0e 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -8058,7 +8058,7 @@ test('accent', async () => {\n     }\n \n     .accent-current\\\\/50, .accent-current\\\\/\\\\[0\\\\.5\\\\], .accent-current\\\\/\\\\[50\\\\%\\\\] {\n-      accent-color: oklab(from currentColor l a b / 50%);\n+      accent-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .accent-inherit {\n@@ -8173,7 +8173,7 @@ test('caret', async () => {\n     }\n \n     .caret-current\\\\/50, .caret-current\\\\/\\\\[0\\\\.5\\\\], .caret-current\\\\/\\\\[50\\\\%\\\\] {\n-      caret-color: oklab(from currentColor l a b / 50%);\n+      caret-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .caret-inherit {\n@@ -8286,7 +8286,7 @@ test('divide-color', async () => {\n     }\n \n     :where(.divide-current\\\\/50 > :not(:last-child)), :where(.divide-current\\\\/\\\\[0\\\\.5\\\\] > :not(:last-child)), :where(.divide-current\\\\/\\\\[50\\\\%\\\\] > :not(:last-child)) {\n-      border-color: oklab(from currentColor l a b / 50%);\n+      border-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     :where(.divide-inherit > :not(:last-child)) {\n@@ -10248,11 +10248,11 @@ test('bg', async () => {\n     }\n \n     .bg-current\\\\/50, .bg-current\\\\/\\\\[0\\\\.5\\\\], .bg-current\\\\/\\\\[50\\\\%\\\\] {\n-      background-color: oklab(from currentColor l a b / 50%);\n+      background-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .bg-current\\\\/\\\\[var\\\\(--bg-opacity\\\\)\\\\] {\n-      background-color: oklab(from currentColor l a b / var(--bg-opacity));\n+      background-color: color-mix(in oklab, currentColor var(--bg-opacity), transparent);\n     }\n \n     .bg-inherit {\n@@ -10770,11 +10770,11 @@ test('bg', async () => {\n     ),\n   ).toMatchInlineSnapshot(`\n     \"".bg-current\\\\/custom {\n-      background-color: oklab(from currentColor l a b / var(--opacity-custom, var(--custom-opacity)));\n+      background-color: color-mix(in oklab, currentColor var(--opacity-custom, var(--custom-opacity)), transparent);\n     }\n \n     .bg-current\\\\/half {\n-      background-color: oklab(from currentColor l a b / var(--opacity-half, .5));\n+      background-color: color-mix(in oklab, currentColor var(--opacity-half, .5), transparent);\n     }\n \n     .\\\\[color\\\\:red\\\\]\\\\/half {\n@@ -10868,7 +10868,7 @@ test('from', async () => {\n     }\n \n     .from-current\\\\/50, .from-current\\\\/\\\\[0\\\\.5\\\\], .from-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-from: oklab(from currentColor l a b / 50%);\n+      --tw-gradient-from: color-mix(in oklab, currentColor 50%, transparent);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -11094,7 +11094,7 @@ test('via', async () => {\n     }\n \n     .via-current\\\\/50, .via-current\\\\/\\\\[0\\\\.5\\\\], .via-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-via: oklab(from currentColor l a b / 50%);\n+      --tw-gradient-via: color-mix(in oklab, currentColor 50%, transparent);\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n@@ -11316,7 +11316,7 @@ test('to', async () => {\n     }\n \n     .to-current\\\\/50, .to-current\\\\/\\\\[0\\\\.5\\\\], .to-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-to: oklab(from currentColor l a b / 50%);\n+      --tw-gradient-to: color-mix(in oklab, currentColor 50%, transparent);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -11843,7 +11843,7 @@ test('fill', async () => {\n     }\n \n     .fill-current\\\\/50, .fill-current\\\\/\\\\[0\\\\.5\\\\], .fill-current\\\\/\\\\[50\\\\%\\\\] {\n-      fill: oklab(from currentColor l a b / 50%);\n+      fill: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .fill-inherit {\n@@ -11980,7 +11980,7 @@ test('stroke', async () => {\n     }\n \n     .stroke-current\\\\/50, .stroke-current\\\\/\\\\[0\\\\.5\\\\], .stroke-current\\\\/\\\\[50\\\\%\\\\] {\n-      stroke: oklab(from currentColor l a b / 50%);\n+      stroke: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .stroke-inherit {\n@@ -12956,7 +12956,7 @@ test('placeholder', async () => {\n     }\n \n     .placeholder-current\\\\/50::placeholder, .placeholder-current\\\\/\\\\[0\\\\.5\\\\]::placeholder, .placeholder-current\\\\/\\\\[50\\\\%\\\\]::placeholder {\n-      color: oklab(from currentColor l a b / 50%);\n+      color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .placeholder-inherit::placeholder {\n@@ -13105,9 +13105,9 @@ test('decoration', async () => {\n     }\n \n     .decoration-current\\\\/50, .decoration-current\\\\/\\\\[0\\\\.5\\\\], .decoration-current\\\\/\\\\[50\\\\%\\\\] {\n-      -webkit-text-decoration-color: oklab(from currentColor l a b / 50%);\n-      -webkit-text-decoration-color: oklab(from currentColor l a b / 50%);\n-      text-decoration-color: oklab(from currentColor l a b / 50%);\n+      -webkit-text-decoration-color: color-mix(in oklab, currentColor 50%, transparent);\n+      -webkit-text-decoration-color: color-mix(in oklab, currentColor 50%, transparent);\n+      text-decoration-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .decoration-inherit {\n@@ -14810,7 +14810,7 @@ test('outline', async () => {\n     }\n \n     .outline-current\\\\/50, .outline-current\\\\/\\\\[0\\\\.5\\\\], .outline-current\\\\/\\\\[50\\\\%\\\\] {\n-      outline-color: oklab(from currentColor l a b / 50%);\n+      outline-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .outline-inherit {\n@@ -15260,7 +15260,7 @@ test('text', async () => {\n     }\n \n     .text-current\\\\/50, .text-current\\\\/\\\\[0\\\\.5\\\\], .text-current\\\\/\\\\[50\\\\%\\\\] {\n-      color: oklab(from currentColor l a b / 50%);\n+      color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .text-inherit {\n@@ -15429,7 +15429,7 @@ test('shadow', async () => {\n     }\n \n     .shadow-current\\\\/50, .shadow-current\\\\/\\\\[0\\\\.5\\\\], .shadow-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-shadow-color: oklab(from currentColor l a b / 50%);\n+      --tw-shadow-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .shadow-inherit {\n@@ -15651,7 +15651,7 @@ test('inset-shadow', async () => {\n     }\n \n     .inset-shadow-current\\\\/50, .inset-shadow-current\\\\/\\\\[0\\\\.5\\\\], .inset-shadow-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-inset-shadow-color: oklab(from currentColor l a b / 50%);\n+      --tw-inset-shadow-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .inset-shadow-inherit {\n@@ -15889,7 +15889,7 @@ test('ring', async () => {\n     }\n \n     .ring-current\\\\/50, .ring-current\\\\/\\\\[0\\\\.5\\\\], .ring-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-color: oklab(from currentColor l a b / 50%);\n+      --tw-ring-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .ring-inherit {\n@@ -16228,7 +16228,7 @@ test('inset-ring', async () => {\n     }\n \n     .inset-ring-current\\\\/50, .inset-ring-current\\\\/\\\\[0\\\\.5\\\\], .inset-ring-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-inset-ring-color: oklab(from currentColor l a b / 50%);\n+      --tw-inset-ring-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .inset-ring-inherit {\n@@ -16472,7 +16472,7 @@ test('ring-offset', async () => {\n     }\n \n     .ring-offset-current\\\\/50, .ring-offset-current\\\\/\\\\[0\\\\.5\\\\], .ring-offset-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-offset-color: oklab(from currentColor l a b / 50%);\n+      --tw-ring-offset-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .ring-offset-inherit {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17301"", ""pr_id"": 17301, ""issue_id"": 17288, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Changes in CSS file do not update Next.js setup\n<img width=\""701\"" alt=\""Image\"" src=\""https://github.com/user-attachments/assets/b7b9486e-7c1d-4412-8caf-b4bca1fe15a5\"" />\n\nSection says that i can use CSS variables directly. It might be true in case of `static` theme, but it does not work for custom non-static theme which gets only the values picket up by the scanner from classnames. \n\nThe confusion is that it is never mentioned, that scanner does not pickup CSS variables used directly to include them in a server theme layer:\n\n![Image](https://github.com/user-attachments/assets/5884e0ed-9cf9-44a8-9fb5-78fa7e3fbcad)\n\n![Image](https://github.com/user-attachments/assets/2e37afae-b759-43c7-9e2b-9ede48b04b5c)\n\n"", ""issue_word_count"": 116, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/cli/index.test.ts"", ""packages/tailwindcss/src/index.ts"", ""packages/tailwindcss/src/theme.ts""], ""pr_changed_test_files"": [""integrations/cli/index.test.ts""], ""base_commit"": ""a1acaeeee0150a14c6b6843361805ffb961ad170"", ""head_commit"": ""5c76b4945f83ba46e63edd6885f344356fde6e20"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17301"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17301"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-20T11:52:02.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex a333cb74d6cb..6dd83467d39b 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -32,6 +32,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Fix class extraction followed by `(` in Slim ([#17278](https://github.com/tailwindlabs/tailwindcss/pull/17278))\n - Export `PluginUtils` from `tailwindcss/plugin` for compatibility with v3 ([#17299](https://github.com/tailwindlabs/tailwindcss/pull/17299))\n - Increase Standalone hardware compatibility on macOS x64 builds ([#17267](https://github.com/tailwindlabs/tailwindcss/pull/17267))\n+- Ensure that the CSS file rebuilds if a new CSS variable is used from templates ([#17301](https://github.com/tailwindlabs/tailwindcss/pull/17301))\n \n ## [4.0.14] - 2025-03-13\n \n\ndiff --git a/packages/tailwindcss/src/index.ts b/packages/tailwindcss/src/index.ts\nindex ddcd17ae6565..ebf4b3875baf 100644\n--- a/packages/tailwindcss/src/index.ts\n+++ b/packages/tailwindcss/src/index.ts\n@@ -696,6 +696,7 @@ export async function compileAst(\n       }\n \n       let didChange = defaultDidChange\n+      let didAddExternalVariable = false\n       defaultDidChange = false\n \n       // Add all new candidates unless we know that they are invalid.\n@@ -703,11 +704,13 @@ export async function compileAst(\n       for (let candidate of newRawCandidates) {\n         if (!designSystem.invalidCandidates.has(candidate)) {\n           if (candidate[0] === '-' && candidate[1] === '-') {\n-            designSystem.theme.markUsedVariable(candidate)\n+            let didMarkVariableAsUsed = designSystem.theme.markUsedVariable(candidate)\n+            didChange ||= didMarkVariableAsUsed\n+            didAddExternalVariable ||= didMarkVariableAsUsed\n           } else {\n             allValidCandidates.add(candidate)\n+            didChange ||= allValidCandidates.size !== prevSize\n           }\n-          didChange ||= allValidCandidates.size !== prevSize\n         }\n       }\n \n@@ -725,7 +728,7 @@ export async function compileAst(\n       // If no new ast nodes were generated, then we can return the original\n       // CSS. This currently assumes that we only add new ast nodes and never\n       // remove any.\n-      if (previousAstNodeCount === newNodes.length) {\n+      if (!didAddExternalVariable && previousAstNodeCount === newNodes.length) {\n         compiled ??= optimizeAst(ast, designSystem)\n         return compiled\n       }\n\ndiff --git a/packages/tailwindcss/src/theme.ts b/packages/tailwindcss/src/theme.ts\nindex d5fca3b02d3d..34e2a9c5d2ce 100644\n--- a/packages/tailwindcss/src/theme.ts\n+++ b/packages/tailwindcss/src/theme.ts\n@@ -193,11 +193,13 @@ export class Theme {\n     return `var(${escape(this.prefixKey(themeKey))}${fallback ? `, ${fallback}` : ''})`\n   }\n \n-  markUsedVariable(themeKey: string) {\n+  markUsedVariable(themeKey: string): boolean {\n     let key = unescape(this.#unprefixKey(themeKey))\n     let value = this.values.get(key)\n-    if (!value) return\n+    if (!value) return false\n+    let isUsed = value.options & ThemeOptions.USED\n     value.options |= ThemeOptions.USED\n+    return !isUsed\n   }\n \n   resolve(candidateValue: string | null, themeKeys: ThemeKey[]): string | null {\n"", ""test_patch"": ""diff --git a/integrations/cli/index.test.ts b/integrations/cli/index.test.ts\nindex bb9624c20710..1e1fca38b324 100644\n--- a/integrations/cli/index.test.ts\n+++ b/integrations/cli/index.test.ts\n@@ -1303,11 +1303,11 @@ test(\n       `,\n     )\n \n-    fs.expectFileToContain(\n+    // prettier-ignore\n+    await fs.expectFileToContain(\n       './dist/out.css',\n       css`\n-        :root,\n-        :host {\n+        :root, :host {\n           --color-blue-500: blue;\n         }\n       `,\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17248"", ""pr_id"": 17248, ""issue_id"": 17221, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""length interpreted as color\nvalues for `border-[]` with more than one value (such as `border-[2px_2px]` or `border-[0_2px_0_2px]` are misinterpreted as colors\n\nthis can be disambiguated with `border-[length:2px_2px]`, but still this seems worth addressing as colors would not have spaces ever I think?"", ""issue_word_count"": 46, ""test_files_count"": 2, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utils/infer-data-type.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap"", ""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""1a88518d80f7c824b9cf00774dde0d1a36b9fdc5"", ""head_commit"": ""5ee30fcdcc8f1dcbbf307704116e883e8d8dfdbc"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17248"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17248"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-17T11:35:56.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 90623826ea55..1abf149f49b6 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -21,6 +21,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Fixed\n \n - Fix incorrect angle in `-bg-conic-*` utilities ([#17174](https://github.com/tailwindlabs/tailwindcss/pull/17174))\n+- Fix `border-[12px_4px]` being interpreted as a `border-color` instead of a `border-width` ([#17248](https://github.com/tailwindlabs/tailwindcss/pull/17248))\n \n ## [4.0.14] - 2025-03-13\n \n\ndiff --git a/packages/tailwindcss/src/utils/infer-data-type.ts b/packages/tailwindcss/src/utils/infer-data-type.ts\nindex 9496986557e5..85b99c6da2ce 100644\n--- a/packages/tailwindcss/src/utils/infer-data-type.ts\n+++ b/packages/tailwindcss/src/utils/infer-data-type.ts\n@@ -67,7 +67,14 @@ function isUrl(value: string): boolean {\n /* -------------------------------------------------------------------------- */\n \n function isLineWidth(value: string): boolean {\n-  return value === 'thin' || value === 'medium' || value === 'thick'\n+  return segment(value, ' ').every(\n+    (value) =>\n+      isLength(value) ||\n+      isNumber(value) ||\n+      value === 'thin' ||\n+      value === 'medium' ||\n+      value === 'thick',\n+  )\n }\n \n /* -------------------------------------------------------------------------- */\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap b/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap\nindex 9d35f62cc069..5f1c2fea3f54 100644\n--- a/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap\n@@ -30,11 +30,26 @@ exports[`border-* 1`] = `\n   border-width: 123px;\n }\n \n+.border-\\\\[0_1\\\\] {\n+  border-style: var(--tw-border-style);\n+  border-width: 0 1px;\n+}\n+\n+.border-\\\\[0_2px_0_2px\\\\] {\n+  border-style: var(--tw-border-style);\n+  border-width: 0 2px;\n+}\n+\n .border-\\\\[12px\\\\] {\n   border-style: var(--tw-border-style);\n   border-width: 12px;\n }\n \n+.border-\\\\[12px_8px\\\\] {\n+  border-style: var(--tw-border-style);\n+  border-width: 12px 8px;\n+}\n+\n .border-\\\\[length\\\\:var\\\\(--my-width\\\\)\\\\], .border-\\\\[line-width\\\\:var\\\\(--my-width\\\\)\\\\] {\n   border-style: var(--tw-border-style);\n   border-width: var(--my-width);\n@@ -55,6 +70,11 @@ exports[`border-* 1`] = `\n   border-width: thin;\n }\n \n+.border-\\\\[thin_2px\\\\] {\n+  border-style: var(--tw-border-style);\n+  border-width: thin 2px;\n+}\n+\n .border-\\\\[\\\\#0088cc\\\\] {\n   border-color: #08c;\n }\n@@ -152,11 +172,26 @@ exports[`border-b-* 1`] = `\n   border-bottom-width: 123px;\n }\n \n+.border-b-\\\\[0_1\\\\] {\n+  border-bottom-style: var(--tw-border-style);\n+  border-bottom-width: 0 1;\n+}\n+\n+.border-b-\\\\[0_2px_0_2px\\\\] {\n+  border-bottom-style: var(--tw-border-style);\n+  border-bottom-width: 0 2px 0 2px;\n+}\n+\n .border-b-\\\\[12px\\\\] {\n   border-bottom-style: var(--tw-border-style);\n   border-bottom-width: 12px;\n }\n \n+.border-b-\\\\[12px_8px\\\\] {\n+  border-bottom-style: var(--tw-border-style);\n+  border-bottom-width: 12px 8px;\n+}\n+\n .border-b-\\\\[length\\\\:var\\\\(--my-width\\\\)\\\\], .border-b-\\\\[line-width\\\\:var\\\\(--my-width\\\\)\\\\] {\n   border-bottom-style: var(--tw-border-style);\n   border-bottom-width: var(--my-width);\n@@ -177,6 +212,11 @@ exports[`border-b-* 1`] = `\n   border-bottom-width: thin;\n }\n \n+.border-b-\\\\[thin_2px\\\\] {\n+  border-bottom-style: var(--tw-border-style);\n+  border-bottom-width: thin 2px;\n+}\n+\n .border-b-\\\\[\\\\#0088cc\\\\] {\n   border-bottom-color: #08c;\n }\n@@ -274,11 +314,26 @@ exports[`border-e-* 1`] = `\n   border-inline-end-width: 123px;\n }\n \n+.border-e-\\\\[0_1\\\\] {\n+  border-inline-end-style: var(--tw-border-style);\n+  border-inline-end-width: 0 1;\n+}\n+\n+.border-e-\\\\[0_2px_0_2px\\\\] {\n+  border-inline-end-style: var(--tw-border-style);\n+  border-inline-end-width: 0 2px 0 2px;\n+}\n+\n .border-e-\\\\[12px\\\\] {\n   border-inline-end-style: var(--tw-border-style);\n   border-inline-end-width: 12px;\n }\n \n+.border-e-\\\\[12px_8px\\\\] {\n+  border-inline-end-style: var(--tw-border-style);\n+  border-inline-end-width: 12px 8px;\n+}\n+\n .border-e-\\\\[length\\\\:var\\\\(--my-width\\\\)\\\\], .border-e-\\\\[line-width\\\\:var\\\\(--my-width\\\\)\\\\] {\n   border-inline-end-style: var(--tw-border-style);\n   border-inline-end-width: var(--my-width);\n@@ -299,6 +354,11 @@ exports[`border-e-* 1`] = `\n   border-inline-end-width: thin;\n }\n \n+.border-e-\\\\[thin_2px\\\\] {\n+  border-inline-end-style: var(--tw-border-style);\n+  border-inline-end-width: thin 2px;\n+}\n+\n .border-e-\\\\[\\\\#0088cc\\\\] {\n   border-inline-end-color: #08c;\n }\n@@ -396,11 +456,26 @@ exports[`border-l-* 1`] = `\n   border-left-width: 123px;\n }\n \n+.border-l-\\\\[0_1\\\\] {\n+  border-left-style: var(--tw-border-style);\n+  border-left-width: 0 1;\n+}\n+\n+.border-l-\\\\[0_2px_0_2px\\\\] {\n+  border-left-style: var(--tw-border-style);\n+  border-left-width: 0 2px 0 2px;\n+}\n+\n .border-l-\\\\[12px\\\\] {\n   border-left-style: var(--tw-border-style);\n   border-left-width: 12px;\n }\n \n+.border-l-\\\\[12px_8px\\\\] {\n+  border-left-style: var(--tw-border-style);\n+  border-left-width: 12px 8px;\n+}\n+\n .border-l-\\\\[length\\\\:var\\\\(--my-width\\\\)\\\\], .border-l-\\\\[line-width\\\\:var\\\\(--my-width\\\\)\\\\] {\n   border-left-style: var(--tw-border-style);\n   border-left-width: var(--my-width);\n@@ -421,6 +496,11 @@ exports[`border-l-* 1`] = `\n   border-left-width: thin;\n }\n \n+.border-l-\\\\[thin_2px\\\\] {\n+  border-left-style: var(--tw-border-style);\n+  border-left-width: thin 2px;\n+}\n+\n .border-l-\\\\[\\\\#0088cc\\\\] {\n   border-left-color: #08c;\n }\n@@ -518,11 +598,26 @@ exports[`border-r-* 1`] = `\n   border-right-width: 123px;\n }\n \n+.border-r-\\\\[0_1\\\\] {\n+  border-right-style: var(--tw-border-style);\n+  border-right-width: 0 1;\n+}\n+\n+.border-r-\\\\[0_2px_0_2px\\\\] {\n+  border-right-style: var(--tw-border-style);\n+  border-right-width: 0 2px 0 2px;\n+}\n+\n .border-r-\\\\[12px\\\\] {\n   border-right-style: var(--tw-border-style);\n   border-right-width: 12px;\n }\n \n+.border-r-\\\\[12px_8px\\\\] {\n+  border-right-style: var(--tw-border-style);\n+  border-right-width: 12px 8px;\n+}\n+\n .border-r-\\\\[length\\\\:var\\\\(--my-width\\\\)\\\\], .border-r-\\\\[line-width\\\\:var\\\\(--my-width\\\\)\\\\] {\n   border-right-style: var(--tw-border-style);\n   border-right-width: var(--my-width);\n@@ -543,6 +638,11 @@ exports[`border-r-* 1`] = `\n   border-right-width: thin;\n }\n \n+.border-r-\\\\[thin_2px\\\\] {\n+  border-right-style: var(--tw-border-style);\n+  border-right-width: thin 2px;\n+}\n+\n .border-r-\\\\[\\\\#0088cc\\\\] {\n   border-right-color: #08c;\n }\n@@ -640,11 +740,26 @@ exports[`border-s-* 1`] = `\n   border-inline-start-width: 123px;\n }\n \n+.border-s-\\\\[0_1\\\\] {\n+  border-inline-start-style: var(--tw-border-style);\n+  border-inline-start-width: 0 1;\n+}\n+\n+.border-s-\\\\[0_2px_0_2px\\\\] {\n+  border-inline-start-style: var(--tw-border-style);\n+  border-inline-start-width: 0 2px 0 2px;\n+}\n+\n .border-s-\\\\[12px\\\\] {\n   border-inline-start-style: var(--tw-border-style);\n   border-inline-start-width: 12px;\n }\n \n+.border-s-\\\\[12px_8px\\\\] {\n+  border-inline-start-style: var(--tw-border-style);\n+  border-inline-start-width: 12px 8px;\n+}\n+\n .border-s-\\\\[length\\\\:var\\\\(--my-width\\\\)\\\\], .border-s-\\\\[line-width\\\\:var\\\\(--my-width\\\\)\\\\] {\n   border-inline-start-style: var(--tw-border-style);\n   border-inline-start-width: var(--my-width);\n@@ -665,6 +780,11 @@ exports[`border-s-* 1`] = `\n   border-inline-start-width: thin;\n }\n \n+.border-s-\\\\[thin_2px\\\\] {\n+  border-inline-start-style: var(--tw-border-style);\n+  border-inline-start-width: thin 2px;\n+}\n+\n .border-s-\\\\[\\\\#0088cc\\\\] {\n   border-inline-start-color: #08c;\n }\n@@ -762,11 +882,26 @@ exports[`border-t-* 1`] = `\n   border-top-width: 123px;\n }\n \n+.border-t-\\\\[0_1\\\\] {\n+  border-top-style: var(--tw-border-style);\n+  border-top-width: 0 1;\n+}\n+\n+.border-t-\\\\[0_2px_0_2px\\\\] {\n+  border-top-style: var(--tw-border-style);\n+  border-top-width: 0 2px 0 2px;\n+}\n+\n .border-t-\\\\[12px\\\\] {\n   border-top-style: var(--tw-border-style);\n   border-top-width: 12px;\n }\n \n+.border-t-\\\\[12px_8px\\\\] {\n+  border-top-style: var(--tw-border-style);\n+  border-top-width: 12px 8px;\n+}\n+\n .border-t-\\\\[length\\\\:var\\\\(--my-width\\\\)\\\\], .border-t-\\\\[line-width\\\\:var\\\\(--my-width\\\\)\\\\] {\n   border-top-style: var(--tw-border-style);\n   border-top-width: var(--my-width);\n@@ -787,6 +922,11 @@ exports[`border-t-* 1`] = `\n   border-top-width: thin;\n }\n \n+.border-t-\\\\[thin_2px\\\\] {\n+  border-top-style: var(--tw-border-style);\n+  border-top-width: thin 2px;\n+}\n+\n .border-t-\\\\[\\\\#0088cc\\\\] {\n   border-top-color: #08c;\n }\n@@ -884,11 +1024,26 @@ exports[`border-x-* 1`] = `\n   border-inline-width: 123px;\n }\n \n+.border-x-\\\\[0_1\\\\] {\n+  border-inline-style: var(--tw-border-style);\n+  border-inline-width: 0 1px;\n+}\n+\n+.border-x-\\\\[0_2px_0_2px\\\\] {\n+  border-inline-style: var(--tw-border-style);\n+  border-inline-width: 0 2px 0 2px;\n+}\n+\n .border-x-\\\\[12px\\\\] {\n   border-inline-style: var(--tw-border-style);\n   border-inline-width: 12px;\n }\n \n+.border-x-\\\\[12px_8px\\\\] {\n+  border-inline-style: var(--tw-border-style);\n+  border-inline-width: 12px 8px;\n+}\n+\n .border-x-\\\\[length\\\\:var\\\\(--my-width\\\\)\\\\], .border-x-\\\\[line-width\\\\:var\\\\(--my-width\\\\)\\\\] {\n   border-inline-style: var(--tw-border-style);\n   border-inline-width: var(--my-width);\n@@ -909,6 +1064,11 @@ exports[`border-x-* 1`] = `\n   border-inline-width: thin;\n }\n \n+.border-x-\\\\[thin_2px\\\\] {\n+  border-inline-style: var(--tw-border-style);\n+  border-inline-width: thin 2px;\n+}\n+\n .border-x-\\\\[\\\\#0088cc\\\\] {\n   border-inline-color: #08c;\n }\n@@ -1006,11 +1166,26 @@ exports[`border-y-* 1`] = `\n   border-block-width: 123px;\n }\n \n+.border-y-\\\\[0_1\\\\] {\n+  border-block-style: var(--tw-border-style);\n+  border-block-width: 0 1px;\n+}\n+\n+.border-y-\\\\[0_2px_0_2px\\\\] {\n+  border-block-style: var(--tw-border-style);\n+  border-block-width: 0 2px 0 2px;\n+}\n+\n .border-y-\\\\[12px\\\\] {\n   border-block-style: var(--tw-border-style);\n   border-block-width: 12px;\n }\n \n+.border-y-\\\\[12px_8px\\\\] {\n+  border-block-style: var(--tw-border-style);\n+  border-block-width: 12px 8px;\n+}\n+\n .border-y-\\\\[length\\\\:var\\\\(--my-width\\\\)\\\\], .border-y-\\\\[line-width\\\\:var\\\\(--my-width\\\\)\\\\] {\n   border-block-style: var(--tw-border-style);\n   border-block-width: var(--my-width);\n@@ -1031,6 +1206,11 @@ exports[`border-y-* 1`] = `\n   border-block-width: thin;\n }\n \n+.border-y-\\\\[thin_2px\\\\] {\n+  border-block-style: var(--tw-border-style);\n+  border-block-width: thin 2px;\n+}\n+\n .border-y-\\\\[\\\\#0088cc\\\\] {\n   border-block-color: #08c;\n }\n\ndiff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 92ac86e8f637..d19d9aa111d8 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -9881,6 +9881,10 @@ for (let prefix of prefixes) {\n     classes.push(`${prefix}-[medium]`)\n     classes.push(`${prefix}-[thick]`)\n     classes.push(`${prefix}-[12px]`)\n+    classes.push(`${prefix}-[12px_8px]`)\n+    classes.push(`${prefix}-[0_2px_0_2px]`)\n+    classes.push(`${prefix}-[0_1]`)\n+    classes.push(`${prefix}-[thin_2px]`)\n     classes.push(`${prefix}-[length:var(--my-width)]`)\n     classes.push(`${prefix}-[line-width:var(--my-width)]`)\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17247"", ""pr_id"": 17247, ""issue_id"": 17194, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Safari 16.4 crash on `<input placeholder>` or `text-current` + opacity\n**What version of Tailwind CSS are you using?**\n\nv4.0.14\n\n**What browser are you using?**\n\niOS Safari 16.4\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/K2JSaOKDJX\n\n```html\n<p class=\""text-current/50\"">text</p>\n```\n\nhttps://play.tailwindcss.com/V9jkBlLwU8\n\n```html\n<input placeholder=\""text\"" />\n```\n\n**Describe your issue**\n\nBoth of the examples above crash the webpage in Safari 16.4:\n\n<img width=\""948\"" alt=\""Image\"" src=\""https://github.com/user-attachments/assets/1428c23a-7c01-4517-9e08-d1303443e91d\"" />\n\nI don't know the full range of affected versions.\n\nThe trigger seems to be passing `currentColor` to `color-mix()`, I found more information about it here:\n\nhttps://stackoverflow.com/questions/76436497/the-color-mix-property-involving-currentcolor-causes-safari-to-crash\n\nMy second example above crashes because that exact combo is in `preflight.css`:\n\nhttps://github.com/tailwindlabs/tailwindcss/blob/50562a9c94e16934bfa8608e471c87c0157f7731/packages/tailwindcss/preflight.css#L291-L294\n\nMaybe something like `color(from currentColor srgb r g b / 50%)` would work instead."", ""issue_word_count"": 169, ""test_files_count"": 5, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/astro.test.ts"", ""packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/preflight.css"", ""packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap"", ""packages/tailwindcss/src/compat/plugin-api.test.ts"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""integrations/vite/astro.test.ts"", ""packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap"", ""packages/tailwindcss/src/compat/plugin-api.test.ts"", ""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""448949318e1484c189836b7dfadc18dbff61318f"", ""head_commit"": ""5ed1bec8f8066674602067d7ba8b5c92f7657595"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17247"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17247"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-17T12:23:02.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 1abf149f49b6..7e31c9aa654f 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -22,6 +22,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Fix incorrect angle in `-bg-conic-*` utilities ([#17174](https://github.com/tailwindlabs/tailwindcss/pull/17174))\n - Fix `border-[12px_4px]` being interpreted as a `border-color` instead of a `border-width` ([#17248](https://github.com/tailwindlabs/tailwindcss/pull/17248))\n+- Use the `oklab(\u2026)` function when applying opacity to `currentColor` to work around a crash in Safari 16.4 and 16.5 ([#17247](https://github.com/tailwindlabs/tailwindcss/pull/17247))\n \n ## [4.0.14] - 2025-03-13\n \n\ndiff --git a/packages/tailwindcss/preflight.css b/packages/tailwindcss/preflight.css\nindex 632d8aa1f246..f3163581236f 100644\n--- a/packages/tailwindcss/preflight.css\n+++ b/packages/tailwindcss/preflight.css\n@@ -285,12 +285,12 @@ textarea,\n \n /*\n   1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n-  2. Set the default placeholder color to a semi-transparent version of the current text color.\n+  2. Set the default placeholder color to a semi-transparent version of the current text color. We use the `oklab(\u2026)` function to work around an issue in Safari 16.4 and 16.5. (https://github.com/tailwindlabs/tailwindcss/issues/17194)\n */\n \n ::placeholder {\n   opacity: 1; /* 1 */\n-  color: color-mix(in oklab, currentColor 50%, transparent); /* 2 */\n+  color: oklab(from currentColor l a b / 50%); /* 2 */\n }\n \n /*\n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 31acd41df2a4..2b5782993eaa 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -136,6 +136,13 @@ export function withAlpha(value: string, alpha: string): string {\n     alpha = `${alphaAsNumber * 100}%`\n   }\n \n+  // Use the `oklab(\u2026)` function when applying alpha to `currentColor` to work\n+  // around a crash with Safari 16.4 and 16.5\n+  // https://github.com/tailwindlabs/tailwindcss/issues/17194\n+  if (value === 'currentColor') {\n+    return `oklab(from currentColor l a b / ${alpha})`\n+  }\n+\n   return `color-mix(in oklab, ${value} ${alpha}, transparent)`\n }\n \n"", ""test_patch"": ""diff --git a/integrations/vite/astro.test.ts b/integrations/vite/astro.test.ts\nindex 81db3e82c6d5..43406624c316 100644\n--- a/integrations/vite/astro.test.ts\n+++ b/integrations/vite/astro.test.ts\n@@ -19,7 +19,10 @@ test(\n         import { defineConfig } from 'astro/config'\n \n         // https://astro.build/config\n-        export default defineConfig({ vite: { plugins: [tailwindcss()] } })\n+        export default defineConfig({\n+          vite: { plugins: [tailwindcss()] },\n+          build: { inlineStylesheets: 'never' },\n+        })\n       `,\n       'src/pages/index.astro': html`\n        <div class=\""underline\"">Hello, world!</div>\n@@ -90,8 +93,13 @@ test(\n         import { defineConfig } from 'astro/config'\n \n         // https://astro.build/config\n-        export default defineConfig({ vite: { plugins: [tailwindcss()] }, integrations: [react()] })\n+        export default defineConfig({\n+          vite: { plugins: [tailwindcss()] },\n+          integrations: [react()],\n+          build: { inlineStylesheets: 'never' },\n+        })\n       `,\n+      // prettier-ignore\n       'src/pages/index.astro': html`\n         ---\n         import ClientOnly from './client-only';\n\ndiff --git a/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap b/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\nindex dbf73d755e12..3b61a8be89f9 100644\n--- a/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\n+++ b/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\n@@ -169,7 +169,7 @@ exports[`\\`@import 'tailwindcss'\\` is replaced with the generated CSS 1`] = `\n \n   ::placeholder {\n     opacity: 1;\n-    color: color-mix(in oklab, currentColor 50%, transparent);\n+    color: oklab(from currentColor l a b / 50%);\n   }\n \n   textarea {\n\ndiff --git a/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap b/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap\nindex 5f1c2fea3f54..a33a5371acff 100644\n--- a/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap\n@@ -104,7 +104,7 @@ exports[`border-* 1`] = `\n }\n \n .border-current\\\\/50 {\n-  border-color: color-mix(in oklab, currentColor 50%, transparent);\n+  border-color: oklab(from currentColor l a b / 50%);\n }\n \n .border-inherit {\n@@ -246,7 +246,7 @@ exports[`border-b-* 1`] = `\n }\n \n .border-b-current\\\\/50 {\n-  border-bottom-color: color-mix(in oklab, currentColor 50%, transparent);\n+  border-bottom-color: oklab(from currentColor l a b / 50%);\n }\n \n .border-b-inherit {\n@@ -388,7 +388,7 @@ exports[`border-e-* 1`] = `\n }\n \n .border-e-current\\\\/50 {\n-  border-inline-end-color: color-mix(in oklab, currentColor 50%, transparent);\n+  border-inline-end-color: oklab(from currentColor l a b / 50%);\n }\n \n .border-e-inherit {\n@@ -530,7 +530,7 @@ exports[`border-l-* 1`] = `\n }\n \n .border-l-current\\\\/50 {\n-  border-left-color: color-mix(in oklab, currentColor 50%, transparent);\n+  border-left-color: oklab(from currentColor l a b / 50%);\n }\n \n .border-l-inherit {\n@@ -672,7 +672,7 @@ exports[`border-r-* 1`] = `\n }\n \n .border-r-current\\\\/50 {\n-  border-right-color: color-mix(in oklab, currentColor 50%, transparent);\n+  border-right-color: oklab(from currentColor l a b / 50%);\n }\n \n .border-r-inherit {\n@@ -814,7 +814,7 @@ exports[`border-s-* 1`] = `\n }\n \n .border-s-current\\\\/50 {\n-  border-inline-start-color: color-mix(in oklab, currentColor 50%, transparent);\n+  border-inline-start-color: oklab(from currentColor l a b / 50%);\n }\n \n .border-s-inherit {\n@@ -956,7 +956,7 @@ exports[`border-t-* 1`] = `\n }\n \n .border-t-current\\\\/50 {\n-  border-top-color: color-mix(in oklab, currentColor 50%, transparent);\n+  border-top-color: oklab(from currentColor l a b / 50%);\n }\n \n .border-t-inherit {\n@@ -1098,7 +1098,7 @@ exports[`border-x-* 1`] = `\n }\n \n .border-x-current\\\\/50 {\n-  border-inline-color: color-mix(in oklab, currentColor 50%, transparent);\n+  border-inline-color: oklab(from currentColor l a b / 50%);\n }\n \n .border-x-inherit {\n@@ -1240,7 +1240,7 @@ exports[`border-y-* 1`] = `\n }\n \n .border-y-current\\\\/50 {\n-  border-block-color: color-mix(in oklab, currentColor 50%, transparent);\n+  border-block-color: oklab(from currentColor l a b / 50%);\n }\n \n .border-y-inherit {\n\ndiff --git a/packages/tailwindcss/src/compat/plugin-api.test.ts b/packages/tailwindcss/src/compat/plugin-api.test.ts\nindex b786f2311e28..d552b805dd8e 100644\n--- a/packages/tailwindcss/src/compat/plugin-api.test.ts\n+++ b/packages/tailwindcss/src/compat/plugin-api.test.ts\n@@ -3860,7 +3860,7 @@ describe('matchUtilities()', () => {\n       }\n \n       .scrollbar-current\\\\/45 {\n-        scrollbar-color: color-mix(in oklab, currentColor 45%, transparent);\n+        scrollbar-color: oklab(from currentColor l a b / 45%);\n       }\""\n     `)\n   })\n\ndiff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex d19d9aa111d8..9c732878a2a0 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -7984,7 +7984,7 @@ test('accent', async () => {\n     }\n \n     .accent-current\\\\/50, .accent-current\\\\/\\\\[0\\\\.5\\\\], .accent-current\\\\/\\\\[50\\\\%\\\\] {\n-      accent-color: color-mix(in oklab, currentColor 50%, transparent);\n+      accent-color: oklab(from currentColor l a b / 50%);\n     }\n \n     .accent-inherit {\n@@ -8099,7 +8099,7 @@ test('caret', async () => {\n     }\n \n     .caret-current\\\\/50, .caret-current\\\\/\\\\[0\\\\.5\\\\], .caret-current\\\\/\\\\[50\\\\%\\\\] {\n-      caret-color: color-mix(in oklab, currentColor 50%, transparent);\n+      caret-color: oklab(from currentColor l a b / 50%);\n     }\n \n     .caret-inherit {\n@@ -8212,7 +8212,7 @@ test('divide-color', async () => {\n     }\n \n     :where(.divide-current\\\\/50 > :not(:last-child)), :where(.divide-current\\\\/\\\\[0\\\\.5\\\\] > :not(:last-child)), :where(.divide-current\\\\/\\\\[50\\\\%\\\\] > :not(:last-child)) {\n-      border-color: color-mix(in oklab, currentColor 50%, transparent);\n+      border-color: oklab(from currentColor l a b / 50%);\n     }\n \n     :where(.divide-inherit > :not(:last-child)) {\n@@ -10144,11 +10144,11 @@ test('bg', async () => {\n     }\n \n     .bg-current\\\\/50, .bg-current\\\\/\\\\[0\\\\.5\\\\], .bg-current\\\\/\\\\[50\\\\%\\\\] {\n-      background-color: color-mix(in oklab, currentColor 50%, transparent);\n+      background-color: oklab(from currentColor l a b / 50%);\n     }\n \n     .bg-current\\\\/\\\\[var\\\\(--bg-opacity\\\\)\\\\] {\n-      background-color: color-mix(in oklab, currentColor var(--bg-opacity), transparent);\n+      background-color: oklab(from currentColor l a b / var(--bg-opacity));\n     }\n \n     .bg-inherit {\n@@ -10666,11 +10666,11 @@ test('bg', async () => {\n     ),\n   ).toMatchInlineSnapshot(`\n     \"".bg-current\\\\/custom {\n-      background-color: color-mix(in oklab, currentColor var(--opacity-custom, var(--custom-opacity)), transparent);\n+      background-color: oklab(from currentColor l a b / var(--opacity-custom, var(--custom-opacity)));\n     }\n \n     .bg-current\\\\/half {\n-      background-color: color-mix(in oklab, currentColor var(--opacity-half, .5), transparent);\n+      background-color: oklab(from currentColor l a b / var(--opacity-half, .5));\n     }\n \n     .\\\\[color\\\\:red\\\\]\\\\/half {\n@@ -10764,7 +10764,7 @@ test('from', async () => {\n     }\n \n     .from-current\\\\/50, .from-current\\\\/\\\\[0\\\\.5\\\\], .from-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-from: color-mix(in oklab, currentColor 50%, transparent);\n+      --tw-gradient-from: oklab(from currentColor l a b / 50%);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -10990,7 +10990,7 @@ test('via', async () => {\n     }\n \n     .via-current\\\\/50, .via-current\\\\/\\\\[0\\\\.5\\\\], .via-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-via: color-mix(in oklab, currentColor 50%, transparent);\n+      --tw-gradient-via: oklab(from currentColor l a b / 50%);\n       --tw-gradient-via-stops: var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n@@ -11212,7 +11212,7 @@ test('to', async () => {\n     }\n \n     .to-current\\\\/50, .to-current\\\\/\\\\[0\\\\.5\\\\], .to-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-to: color-mix(in oklab, currentColor 50%, transparent);\n+      --tw-gradient-to: oklab(from currentColor l a b / 50%);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -11739,7 +11739,7 @@ test('fill', async () => {\n     }\n \n     .fill-current\\\\/50, .fill-current\\\\/\\\\[0\\\\.5\\\\], .fill-current\\\\/\\\\[50\\\\%\\\\] {\n-      fill: color-mix(in oklab, currentColor 50%, transparent);\n+      fill: oklab(from currentColor l a b / 50%);\n     }\n \n     .fill-inherit {\n@@ -11876,7 +11876,7 @@ test('stroke', async () => {\n     }\n \n     .stroke-current\\\\/50, .stroke-current\\\\/\\\\[0\\\\.5\\\\], .stroke-current\\\\/\\\\[50\\\\%\\\\] {\n-      stroke: color-mix(in oklab, currentColor 50%, transparent);\n+      stroke: oklab(from currentColor l a b / 50%);\n     }\n \n     .stroke-inherit {\n@@ -12852,7 +12852,7 @@ test('placeholder', async () => {\n     }\n \n     .placeholder-current\\\\/50::placeholder, .placeholder-current\\\\/\\\\[0\\\\.5\\\\]::placeholder, .placeholder-current\\\\/\\\\[50\\\\%\\\\]::placeholder {\n-      color: color-mix(in oklab, currentColor 50%, transparent);\n+      color: oklab(from currentColor l a b / 50%);\n     }\n \n     .placeholder-inherit::placeholder {\n@@ -13001,9 +13001,9 @@ test('decoration', async () => {\n     }\n \n     .decoration-current\\\\/50, .decoration-current\\\\/\\\\[0\\\\.5\\\\], .decoration-current\\\\/\\\\[50\\\\%\\\\] {\n-      -webkit-text-decoration-color: color-mix(in oklab, currentColor 50%, transparent);\n-      -webkit-text-decoration-color: color-mix(in oklab, currentColor 50%, transparent);\n-      text-decoration-color: color-mix(in oklab, currentColor 50%, transparent);\n+      -webkit-text-decoration-color: oklab(from currentColor l a b / 50%);\n+      -webkit-text-decoration-color: oklab(from currentColor l a b / 50%);\n+      text-decoration-color: oklab(from currentColor l a b / 50%);\n     }\n \n     .decoration-inherit {\n@@ -14706,7 +14706,7 @@ test('outline', async () => {\n     }\n \n     .outline-current\\\\/50, .outline-current\\\\/\\\\[0\\\\.5\\\\], .outline-current\\\\/\\\\[50\\\\%\\\\] {\n-      outline-color: color-mix(in oklab, currentColor 50%, transparent);\n+      outline-color: oklab(from currentColor l a b / 50%);\n     }\n \n     .outline-inherit {\n@@ -15156,7 +15156,7 @@ test('text', async () => {\n     }\n \n     .text-current\\\\/50, .text-current\\\\/\\\\[0\\\\.5\\\\], .text-current\\\\/\\\\[50\\\\%\\\\] {\n-      color: color-mix(in oklab, currentColor 50%, transparent);\n+      color: oklab(from currentColor l a b / 50%);\n     }\n \n     .text-inherit {\n@@ -15325,7 +15325,7 @@ test('shadow', async () => {\n     }\n \n     .shadow-current\\\\/50, .shadow-current\\\\/\\\\[0\\\\.5\\\\], .shadow-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-shadow-color: color-mix(in oklab, currentColor 50%, transparent);\n+      --tw-shadow-color: oklab(from currentColor l a b / 50%);\n     }\n \n     .shadow-inherit {\n@@ -15547,7 +15547,7 @@ test('inset-shadow', async () => {\n     }\n \n     .inset-shadow-current\\\\/50, .inset-shadow-current\\\\/\\\\[0\\\\.5\\\\], .inset-shadow-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-inset-shadow-color: color-mix(in oklab, currentColor 50%, transparent);\n+      --tw-inset-shadow-color: oklab(from currentColor l a b / 50%);\n     }\n \n     .inset-shadow-inherit {\n@@ -15785,7 +15785,7 @@ test('ring', async () => {\n     }\n \n     .ring-current\\\\/50, .ring-current\\\\/\\\\[0\\\\.5\\\\], .ring-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-color: color-mix(in oklab, currentColor 50%, transparent);\n+      --tw-ring-color: oklab(from currentColor l a b / 50%);\n     }\n \n     .ring-inherit {\n@@ -16124,7 +16124,7 @@ test('inset-ring', async () => {\n     }\n \n     .inset-ring-current\\\\/50, .inset-ring-current\\\\/\\\\[0\\\\.5\\\\], .inset-ring-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-inset-ring-color: color-mix(in oklab, currentColor 50%, transparent);\n+      --tw-inset-ring-color: oklab(from currentColor l a b / 50%);\n     }\n \n     .inset-ring-inherit {\n@@ -16368,7 +16368,7 @@ test('ring-offset', async () => {\n     }\n \n     .ring-offset-current\\\\/50, .ring-offset-current\\\\/\\\\[0\\\\.5\\\\], .ring-offset-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-offset-color: color-mix(in oklab, currentColor 50%, transparent);\n+      --tw-ring-offset-color: oklab(from currentColor l a b / 50%);\n     }\n \n     .ring-offset-inherit {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-17036"", ""pr_id"": 17036, ""issue_id"": 16945, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""v4 preflight theme variables aren't prefixed\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\nVersions:\n- Tailwind: v4.0.9\n- Vite: 5.2.11\n- Node: 20.14.0\n- Chrome, Mac OS\n\n[Reproduction URL](https://play.tailwindcss.com/fPhQksGLVR)\n\nIf you look at the reproduction URL above (took awhile to prefix all those classes lol) you can see that the `--default-font-family` does not map to the prefixed `--font-sans` declared in the `@theme`. It seems that since `--default-font-family: var(--font-sans);` it isn't getting updated to map to the prefixed value later. This was not an issue in v3.\n\nThe workaround I have is to declare `--default-font-family` in my own `@layer base`:\n\n```css\n@layer base {\n  html {\n    --default-font-family: 'Salesforce Sans', Helvetica, Arial, sans-serif;\n  }\n}\n```\n\nWhat ought to happen is the preflight reference points to the prefixed font so that the theme can correctly override it: `--default-font-family: var(--tw-font-sans);`"", ""issue_word_count"": 185, ""test_files_count"": 4, ""non_test_files_count"": 10, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap"", ""packages/@tailwindcss-upgrade/src/codemods/migrate-media-screen.ts"", ""packages/@tailwindcss-upgrade/src/template/codemods/legacy-classes.ts"", ""packages/tailwindcss/preflight.css"", ""packages/tailwindcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/src/ast.ts"", ""packages/tailwindcss/src/compat/apply-compat-hooks.ts"", ""packages/tailwindcss/src/css-functions.test.ts"", ""packages/tailwindcss/src/css-functions.ts"", ""packages/tailwindcss/src/design-system.ts"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/theme.ts"", ""packages/tailwindcss/theme.css""], ""pr_changed_test_files"": [""packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/src/css-functions.test.ts"", ""packages/tailwindcss/src/index.test.ts""], ""base_commit"": ""cec7f0557bfed2236e8e21c3fc21604ba0ef1277"", ""head_commit"": ""50ab9097f3dbeff5fc22eb4b932e81095897ce75"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/17036"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/17036"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-20T11:51:23.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 4a0528b4faf2..631056c06550 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -26,6 +26,11 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Fix `border-[12px_4px]` being interpreted as a `border-color` instead of a `border-width` ([#17248](https://github.com/tailwindlabs/tailwindcss/pull/17248))\n - Use the `oklab(\u2026)` function when applying opacity to `currentColor` to work around a crash in Safari 16.4 and 16.5 ([#17247](https://github.com/tailwindlabs/tailwindcss/pull/17247))\n - Pre-process `<template lang=\""\u2026\"">` in Vue files ([#17252](https://github.com/tailwindlabs/tailwindcss/pull/17252))\n+- Ensure that all CSS variables used by preflight are prefixed ([#17036](https://github.com/tailwindlabs/tailwindcss/pull/17036))\n+\n+### Changed\n+\n+- The `--theme(\u2026)` function now returns CSS variables from your theme variables unless used inside positions where CSS variables are invalid (e.g. inside `@media` queries) ([#17036](https://github.com/tailwindlabs/tailwindcss/pull/17036))\n - Remove redundant `line-height: initial` from Preflight ([#15212](https://github.com/tailwindlabs/tailwindcss/pull/15212))\n \n ## [4.0.14] - 2025-03-13\n\ndiff --git a/packages/@tailwindcss-upgrade/src/codemods/migrate-media-screen.ts b/packages/@tailwindcss-upgrade/src/codemods/migrate-media-screen.ts\nindex 40fe29c3c4c4..570a4670f2ca 100644\n--- a/packages/@tailwindcss-upgrade/src/codemods/migrate-media-screen.ts\n+++ b/packages/@tailwindcss-upgrade/src/codemods/migrate-media-screen.ts\n@@ -19,7 +19,7 @@ export function migrateMediaScreen({\n     let screens = resolvedConfig?.theme?.screens || {}\n \n     let mediaQueries = new DefaultMap<string, string | null>((name) => {\n-      let value = designSystem?.resolveThemeValue(`--breakpoint-${name}`) ?? screens?.[name]\n+      let value = designSystem?.resolveThemeValue(`--breakpoint-${name}`, true) ?? screens?.[name]\n       if (typeof value === 'string') return `(width >= theme(--breakpoint-${name}))`\n       return value ? buildMediaQuery(value) : null\n     })\n\ndiff --git a/packages/@tailwindcss-upgrade/src/template/codemods/legacy-classes.ts b/packages/@tailwindcss-upgrade/src/template/codemods/legacy-classes.ts\nindex adf31e7f4801..8dad3967ce76 100644\n--- a/packages/@tailwindcss-upgrade/src/template/codemods/legacy-classes.ts\n+++ b/packages/@tailwindcss-upgrade/src/template/codemods/legacy-classes.ts\n@@ -139,9 +139,9 @@ export async function legacyClasses(\n \n     if (fromThemeKey && toThemeKey) {\n       // Migrating something that resolves to a value in the theme.\n-      let customFrom = designSystem.resolveThemeValue(fromThemeKey)\n-      let defaultFrom = defaultDesignSystem.resolveThemeValue(fromThemeKey)\n-      let customTo = designSystem.resolveThemeValue(toThemeKey)\n+      let customFrom = designSystem.resolveThemeValue(fromThemeKey, true)\n+      let defaultFrom = defaultDesignSystem.resolveThemeValue(fromThemeKey, true)\n+      let customTo = designSystem.resolveThemeValue(toThemeKey, true)\n       let defaultTo = defaultDesignSystem.resolveThemeValue(toThemeKey)\n \n       // The new theme value is not defined, which means we can't safely\n\ndiff --git a/packages/tailwindcss/preflight.css b/packages/tailwindcss/preflight.css\nindex 952958e17bbf..f87d5d108618 100644\n--- a/packages/tailwindcss/preflight.css\n+++ b/packages/tailwindcss/preflight.css\n@@ -30,7 +30,7 @@ html,\n   line-height: 1.5; /* 1 */\n   -webkit-text-size-adjust: 100%; /* 2 */\n   tab-size: 4; /* 3 */\n-  font-family: var(\n+  font-family: --theme(\n     --default-font-family,\n     ui-sans-serif,\n     system-ui,\n@@ -40,8 +40,8 @@ html,\n     'Segoe UI Symbol',\n     'Noto Color Emoji'\n   ); /* 4 */\n-  font-feature-settings: var(--default-font-feature-settings, normal); /* 5 */\n-  font-variation-settings: var(--default-font-variation-settings, normal); /* 6 */\n+  font-feature-settings: --theme(--default-font-feature-settings, normal); /* 5 */\n+  font-variation-settings: --theme(--default-font-variation-settings, normal); /* 6 */\n   -webkit-tap-highlight-color: transparent; /* 7 */\n }\n \n@@ -110,7 +110,7 @@ code,\n kbd,\n samp,\n pre {\n-  font-family: var(\n+  font-family: --theme(\n     --default-mono-font-family,\n     ui-monospace,\n     SFMono-Regular,\n@@ -121,8 +121,8 @@ pre {\n     'Courier New',\n     monospace\n   ); /* 1 */\n-  font-feature-settings: var(--default-mono-font-feature-settings, normal); /* 2 */\n-  font-variation-settings: var(--default-mono-font-variation-settings, normal); /* 3 */\n+  font-feature-settings: --theme(--default-mono-font-feature-settings, normal); /* 2 */\n+  font-variation-settings: --theme(--default-mono-font-variation-settings, normal); /* 3 */\n   font-size: 1em; /* 4 */\n }\n \n\ndiff --git a/packages/tailwindcss/src/ast.ts b/packages/tailwindcss/src/ast.ts\nindex 39b6770e25cc..fec46b53b1be 100644\n--- a/packages/tailwindcss/src/ast.ts\n+++ b/packages/tailwindcss/src/ast.ts\n@@ -282,6 +282,13 @@ export function optimizeAst(ast: AstNode[], designSystem: DesignSystem) {\n \n       // Track variables defined in `@theme`\n       if (context.theme && node.property[0] === '-' && node.property[1] === '-') {\n+        // Variables that resolve to `initial` should never be emitted. This can happen because of\n+        // the `--theme(\u2026)` being used and evaluated lazily\n+        if (node.value === 'initial') {\n+          node.value = undefined\n+          return\n+        }\n+\n         if (!context.keyframes) {\n           cssThemeVariables.get(parent).add(node)\n         }\n\ndiff --git a/packages/tailwindcss/src/compat/apply-compat-hooks.ts b/packages/tailwindcss/src/compat/apply-compat-hooks.ts\nindex 3b5cde1954f0..fe30f6270ba4 100644\n--- a/packages/tailwindcss/src/compat/apply-compat-hooks.ts\n+++ b/packages/tailwindcss/src/compat/apply-compat-hooks.ts\n@@ -134,9 +134,9 @@ export async function applyCompatibilityHooks({\n   // compatibility concerns localized to our compatibility layer.\n   let resolveThemeVariableValue = designSystem.resolveThemeValue\n \n-  designSystem.resolveThemeValue = function resolveThemeValue(path: string) {\n+  designSystem.resolveThemeValue = function resolveThemeValue(path: string, forceInline?: boolean) {\n     if (path.startsWith('--')) {\n-      return resolveThemeVariableValue(path)\n+      return resolveThemeVariableValue(path, forceInline)\n     }\n \n     // If the theme value is not found in the simple resolver, we upgrade to the full backward\n@@ -149,7 +149,7 @@ export async function applyCompatibilityHooks({\n       configs: [],\n       pluginDetails: [],\n     })\n-    return designSystem.resolveThemeValue(path)\n+    return designSystem.resolveThemeValue(path, forceInline)\n   }\n \n   // If there are no plugins or configs registered, we don't need to register\n@@ -260,8 +260,8 @@ function upgradeToFullPluginSupport({\n   // config files are actually being used. In the future we may want to optimize\n   // this further by only doing this if plugins or config files _actually_\n   // registered JS config objects.\n-  designSystem.resolveThemeValue = function resolveThemeValue(path: string, defaultValue?: string) {\n-    let resolvedValue = pluginApi.theme(path, defaultValue)\n+  designSystem.resolveThemeValue = function resolveThemeValue(path: string, forceInline?: boolean) {\n+    let resolvedValue = pluginApi.theme(path, forceInline)\n \n     if (Array.isArray(resolvedValue) && resolvedValue.length === 2) {\n       // When a tuple is returned, return the first element\n\ndiff --git a/packages/tailwindcss/src/css-functions.ts b/packages/tailwindcss/src/css-functions.ts\nindex ff986c6f6590..618835fec40a 100644\n--- a/packages/tailwindcss/src/css-functions.ts\n+++ b/packages/tailwindcss/src/css-functions.ts\n@@ -5,14 +5,22 @@ import { withAlpha } from './utilities'\n import { segment } from './utils/segment'\n import * as ValueParser from './value-parser'\n \n-const functions: Record<string, (designSystem: DesignSystem, ...args: string[]) => string> = {\n+const CSS_FUNCTIONS: Record<\n+  string,\n+  (designSystem: DesignSystem, source: AstNode, ...args: string[]) => string\n+> = {\n   '--alpha': alpha,\n   '--spacing': spacing,\n   '--theme': theme,\n   theme: legacyTheme,\n }\n \n-function alpha(_designSystem: DesignSystem, value: string, ...rest: string[]) {\n+function alpha(\n+  _designSystem: DesignSystem,\n+  _source: AstNode,\n+  value: string,\n+  ...rest: string[]\n+): string {\n   let [color, alpha] = segment(value, '/').map((v) => v.trim())\n \n   if (!color || !alpha) {\n@@ -30,7 +38,12 @@ function alpha(_designSystem: DesignSystem, value: string, ...rest: string[]) {\n   return withAlpha(color, alpha)\n }\n \n-function spacing(designSystem: DesignSystem, value: string, ...rest: string[]) {\n+function spacing(\n+  designSystem: DesignSystem,\n+  _source: AstNode,\n+  value: string,\n+  ...rest: string[]\n+): string {\n   if (!value) {\n     throw new Error(`The --spacing(\u2026) function requires an argument, but received none.`)\n   }\n@@ -51,15 +64,73 @@ function spacing(designSystem: DesignSystem, value: string, ...rest: string[]) {\n   return `calc(${multiplier} * ${value})`\n }\n \n-function theme(designSystem: DesignSystem, path: string, ...fallback: string[]) {\n+function theme(\n+  designSystem: DesignSystem,\n+  source: AstNode,\n+  path: string,\n+  ...fallback: string[]\n+): string {\n   if (!path.startsWith('--')) {\n     throw new Error(`The --theme(\u2026) function can only be used with CSS variables from your theme.`)\n   }\n \n-  return legacyTheme(designSystem, path, ...fallback)\n+  let inline = false\n+\n+  // Handle `--theme(\u2026 inline)` to force inline resolution\n+  if (path.endsWith(' inline')) {\n+    inline = true\n+    path = path.slice(0, -7)\n+  }\n+\n+  // If the `--theme(\u2026)` function is used within an at-rule (e.g. `@media (width >= --theme(\u2026)))`,\n+  // we have to always inline the result since CSS does not support CSS variables in these positions\n+  if (source.kind === 'at-rule') {\n+    inline = true\n+  }\n+\n+  let resolvedValue = designSystem.resolveThemeValue(path, inline)\n+\n+  if (!resolvedValue) {\n+    if (fallback.length > 0) return fallback.join(', ')\n+    throw new Error(\n+      `Could not resolve value for theme function: \\`theme(${path})\\`. Consider checking if the variable name is correct or provide a fallback value to silence this error.`,\n+    )\n+  }\n+\n+  if (fallback.length === 0) {\n+    return resolvedValue\n+  }\n+\n+  let joinedFallback = fallback.join(', ')\n+  if (joinedFallback === 'initial') return resolvedValue\n+\n+  // When the resolved value returns `initial`, resolve with the the fallback value\n+  if (resolvedValue === 'initial') return joinedFallback\n+\n+  // Inject the fallback of a `--theme(\u2026)` function into the fallback of a referenced `--theme(\u2026)`\n+  // function or `var(\u2026)` declaration. If the referenced function already defines a fallback, we use\n+  // a potential fallback value of `initial` in the referenced function to determine if we should\n+  // inject the fallback value of the caller. If that's not the case, we keep the fallback as-is\n+  // (this is needed for theme variables in reference-mode).\n+  if (\n+    resolvedValue.startsWith('var(') ||\n+    resolvedValue.startsWith('theme(') ||\n+    resolvedValue.startsWith('--theme(')\n+  ) {\n+    let valueAst = ValueParser.parse(resolvedValue)\n+    injectFallbackForInitialFallback(valueAst, joinedFallback)\n+    return ValueParser.toCss(valueAst)\n+  }\n+\n+  return resolvedValue\n }\n \n-function legacyTheme(designSystem: DesignSystem, path: string, ...fallback: string[]) {\n+function legacyTheme(\n+  designSystem: DesignSystem,\n+  _source: AstNode,\n+  path: string,\n+  ...fallback: string[]\n+): string {\n   path = eventuallyUnquote(path)\n \n   let resolvedValue = designSystem.resolveThemeValue(path)\n@@ -78,7 +149,7 @@ function legacyTheme(designSystem: DesignSystem, path: string, ...fallback: stri\n }\n \n export const THEME_FUNCTION_INVOCATION = new RegExp(\n-  Object.keys(functions)\n+  Object.keys(CSS_FUNCTIONS)\n     .map((x) => `${x}\\\\(`)\n     .join('|'),\n )\n@@ -89,7 +160,7 @@ export function substituteFunctions(ast: AstNode[], designSystem: DesignSystem)\n     // Find all declaration values\n     if (node.kind === 'declaration' && node.value && THEME_FUNCTION_INVOCATION.test(node.value)) {\n       features |= Features.ThemeFunction\n-      node.value = substituteFunctionsInValue(node.value, designSystem)\n+      node.value = substituteFunctionsInValue(node.value, node, designSystem)\n       return\n     }\n \n@@ -103,19 +174,27 @@ export function substituteFunctions(ast: AstNode[], designSystem: DesignSystem)\n         THEME_FUNCTION_INVOCATION.test(node.params)\n       ) {\n         features |= Features.ThemeFunction\n-        node.params = substituteFunctionsInValue(node.params, designSystem)\n+        node.params = substituteFunctionsInValue(node.params, node, designSystem)\n       }\n     }\n   })\n   return features\n }\n \n-export function substituteFunctionsInValue(value: string, designSystem: DesignSystem): string {\n+export function substituteFunctionsInValue(\n+  value: string,\n+  source: AstNode,\n+  designSystem: DesignSystem,\n+): string {\n   let ast = ValueParser.parse(value)\n   ValueParser.walk(ast, (node, { replaceWith }) => {\n-    if (node.kind === 'function' && node.value in functions) {\n+    if (node.kind === 'function' && node.value in CSS_FUNCTIONS) {\n       let args = segment(ValueParser.toCss(node.nodes).trim(), ',').map((x) => x.trim())\n-      let result = functions[node.value as keyof typeof functions](designSystem, ...args)\n+      let result = CSS_FUNCTIONS[node.value as keyof typeof CSS_FUNCTIONS](\n+        designSystem,\n+        source,\n+        ...args,\n+      )\n       return replaceWith(ValueParser.parse(result))\n     }\n   })\n@@ -142,3 +221,22 @@ function eventuallyUnquote(value: string) {\n \n   return unquoted\n }\n+\n+function injectFallbackForInitialFallback(ast: ValueParser.ValueAstNode[], fallback: string): void {\n+  ValueParser.walk(ast, (node) => {\n+    if (node.kind !== 'function') return\n+    if (node.value !== 'var' && node.value !== 'theme' && node.value !== '--theme') return\n+\n+    if (node.nodes.length === 1) {\n+      node.nodes.push({\n+        kind: 'word',\n+        value: `, ${fallback}`,\n+      })\n+    } else {\n+      let lastNode = node.nodes[node.nodes.length - 1]\n+      if (lastNode.kind === 'word' && lastNode.value === 'initial') {\n+        lastNode.value = fallback\n+      }\n+    }\n+  })\n+}\n\ndiff --git a/packages/tailwindcss/src/design-system.ts b/packages/tailwindcss/src/design-system.ts\nindex c765b1c3fbf0..b11dabc11ccb 100644\n--- a/packages/tailwindcss/src/design-system.ts\n+++ b/packages/tailwindcss/src/design-system.ts\n@@ -4,7 +4,7 @@ import { compileAstNodes, compileCandidates } from './compile'\n import { substituteFunctions } from './css-functions'\n import { getClassList, getVariants, type ClassEntry, type VariantEntry } from './intellisense'\n import { getClassOrder } from './sort'\n-import type { Theme, ThemeKey } from './theme'\n+import { Theme, ThemeOptions, type ThemeKey } from './theme'\n import { Utilities, createUtilities, withAlpha } from './utilities'\n import { DefaultMap } from './utils/default-map'\n import { extractUsedVariables } from './utils/variables'\n@@ -29,7 +29,7 @@ export type DesignSystem = {\n   compileAstNodes(candidate: Candidate): ReturnType<typeof compileAstNodes>\n \n   getVariantOrder(): Map<Variant, number>\n-  resolveThemeValue(path: string): string | undefined\n+  resolveThemeValue(path: string, forceInline?: boolean): string | undefined\n \n   trackUsedVariables(raw: string): void\n \n@@ -150,7 +150,7 @@ export function buildDesignSystem(theme: Theme): DesignSystem {\n       return order\n     },\n \n-    resolveThemeValue(path: `${ThemeKey}` | `${ThemeKey}${string}`) {\n+    resolveThemeValue(path: `${ThemeKey}` | `${ThemeKey}${string}`, forceInline: boolean = true) {\n       // Extract an eventual modifier from the path. e.g.:\n       // - \""--color-red-500 / 50%\"" -> \""50%\""\n       let lastSlash = path.lastIndexOf('/')\n@@ -160,7 +160,9 @@ export function buildDesignSystem(theme: Theme): DesignSystem {\n         path = path.slice(0, lastSlash).trim() as ThemeKey\n       }\n \n-      let themeValue = theme.get([path]) ?? undefined\n+      let themeValue =\n+        theme.resolve(null, [path], forceInline ? ThemeOptions.INLINE : ThemeOptions.NONE) ??\n+        undefined\n \n       // Apply the opacity modifier if present\n       if (modifier && themeValue) {\n\ndiff --git a/packages/tailwindcss/src/theme.ts b/packages/tailwindcss/src/theme.ts\nindex d5fca3b02d3d..a1317f83d49c 100644\n--- a/packages/tailwindcss/src/theme.ts\n+++ b/packages/tailwindcss/src/theme.ts\n@@ -200,14 +200,18 @@ export class Theme {\n     value.options |= ThemeOptions.USED\n   }\n \n-  resolve(candidateValue: string | null, themeKeys: ThemeKey[]): string | null {\n+  resolve(\n+    candidateValue: string | null,\n+    themeKeys: ThemeKey[],\n+    options: ThemeOptions = ThemeOptions.NONE,\n+  ): string | null {\n     let themeKey = this.#resolveKey(candidateValue, themeKeys)\n \n     if (!themeKey) return null\n \n     let value = this.values.get(themeKey)!\n \n-    if (value.options & ThemeOptions.INLINE) {\n+    if ((options | value.options) & ThemeOptions.INLINE) {\n       return value.value\n     }\n \n\ndiff --git a/packages/tailwindcss/theme.css b/packages/tailwindcss/theme.css\nindex d4e4b040b141..6f40223e4f5e 100644\n--- a/packages/tailwindcss/theme.css\n+++ b/packages/tailwindcss/theme.css\n@@ -434,12 +434,12 @@\n \n   --default-transition-duration: 150ms;\n   --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n-  --default-font-family: var(--font-sans);\n-  --default-font-feature-settings: var(--font-sans--font-feature-settings);\n-  --default-font-variation-settings: var(--font-sans--font-variation-settings);\n-  --default-mono-font-family: var(--font-mono);\n-  --default-mono-font-feature-settings: var(--font-mono--font-feature-settings);\n-  --default-mono-font-variation-settings: var(--font-mono--font-variation-settings);\n+  --default-font-family: --theme(--font-sans, initial);\n+  --default-font-feature-settings: --theme(--font-sans--font-feature-settings, initial);\n+  --default-font-variation-settings: --theme(--font-sans--font-variation-settings, initial);\n+  --default-mono-font-family: --theme(--font-mono, initial);\n+  --default-mono-font-feature-settings: --theme(--font-mono--font-feature-settings, initial);\n+  --default-mono-font-variation-settings: --theme(--font-mono--font-variation-settings, initial);\n }\n \n /* Deprecated */\n"", ""test_patch"": ""diff --git a/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap b/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\nindex 1434982e79f7..5d41297d403a 100644\n--- a/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\n+++ b/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\n@@ -10,11 +10,7 @@ exports[`\\`@import 'tailwindcss'\\` is replaced with the generated CSS 1`] = `\n     --text-2xl--line-height: calc(2 / 1.5);\n     --font-weight-bold: 700;\n     --default-font-family: var(--font-sans);\n-    --default-font-feature-settings: var(--font-sans--font-feature-settings);\n-    --default-font-variation-settings: var(--font-sans--font-variation-settings);\n     --default-mono-font-family: var(--font-mono);\n-    --default-mono-font-feature-settings: var(--font-mono--font-feature-settings);\n-    --default-mono-font-variation-settings: var(--font-mono--font-variation-settings);\n   }\n }\n \n\ndiff --git a/packages/tailwindcss/src/__snapshots__/index.test.ts.snap b/packages/tailwindcss/src/__snapshots__/index.test.ts.snap\nindex 5e88fe462d53..c250d4f6d564 100644\n--- a/packages/tailwindcss/src/__snapshots__/index.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/index.test.ts.snap\n@@ -92,3 +92,248 @@ exports[`compiling CSS > \\`@tailwind utilities\\` is replaced by utilities using\n   initial-value: 0 0 #0000;\n }\""\n `;\n+\n+exports[`compiling CSS > prefix all CSS variables inside preflight 1`] = `\n+\""@layer theme {\n+  :root, :host {\n+    --tw-font-sans: ui-sans-serif, system-ui, sans-serif, \""Apple Color Emoji\"", \""Segoe UI Emoji\"", \""Segoe UI Symbol\"", \""Noto Color Emoji\"";\n+    --tw-font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \""Liberation Mono\"", \""Courier New\"", monospace;\n+    --tw-default-font-family: var(--tw-font-sans);\n+    --tw-default-mono-font-family: var(--tw-font-mono);\n+  }\n+}\n+\n+@layer base {\n+  *, :after, :before, ::backdrop {\n+    box-sizing: border-box;\n+    border: 0 solid;\n+    margin: 0;\n+    padding: 0;\n+  }\n+\n+  ::file-selector-button {\n+    box-sizing: border-box;\n+    border: 0 solid;\n+    margin: 0;\n+    padding: 0;\n+  }\n+\n+  html, :host {\n+    -webkit-text-size-adjust: 100%;\n+    tab-size: 4;\n+    line-height: 1.5;\n+    font-family: var(--tw-default-font-family, ui-sans-serif, system-ui, sans-serif, \""Apple Color Emoji\"", \""Segoe UI Emoji\"", \""Segoe UI Symbol\"", \""Noto Color Emoji\"");\n+    font-feature-settings: var(--tw-default-font-feature-settings, normal);\n+    font-variation-settings: var(--tw-default-font-variation-settings, normal);\n+    -webkit-tap-highlight-color: transparent;\n+  }\n+\n+  hr {\n+    height: 0;\n+    color: inherit;\n+    border-top-width: 1px;\n+  }\n+\n+  abbr:where([title]) {\n+    -webkit-text-decoration: underline dotted;\n+    text-decoration: underline dotted;\n+  }\n+\n+  h1, h2, h3, h4, h5, h6 {\n+    font-size: inherit;\n+    font-weight: inherit;\n+  }\n+\n+  a {\n+    color: inherit;\n+    -webkit-text-decoration: inherit;\n+    -webkit-text-decoration: inherit;\n+    -webkit-text-decoration: inherit;\n+    text-decoration: inherit;\n+  }\n+\n+  b, strong {\n+    font-weight: bolder;\n+  }\n+\n+  code, kbd, samp, pre {\n+    font-family: var(--tw-default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \""Liberation Mono\"", \""Courier New\"", monospace);\n+    font-feature-settings: var(--tw-default-mono-font-feature-settings, normal);\n+    font-variation-settings: var(--tw-default-mono-font-variation-settings, normal);\n+    font-size: 1em;\n+  }\n+\n+  small {\n+    font-size: 80%;\n+  }\n+\n+  sub, sup {\n+    vertical-align: baseline;\n+    font-size: 75%;\n+    line-height: 0;\n+    position: relative;\n+  }\n+\n+  sub {\n+    bottom: -.25em;\n+  }\n+\n+  sup {\n+    top: -.5em;\n+  }\n+\n+  table {\n+    text-indent: 0;\n+    border-color: inherit;\n+    border-collapse: collapse;\n+  }\n+\n+  :-moz-focusring {\n+    outline: auto;\n+  }\n+\n+  progress {\n+    vertical-align: baseline;\n+  }\n+\n+  summary {\n+    display: list-item;\n+  }\n+\n+  ol, ul, menu {\n+    list-style: none;\n+  }\n+\n+  img, svg, video, canvas, audio, iframe, embed, object {\n+    vertical-align: middle;\n+    display: block;\n+  }\n+\n+  img, video {\n+    max-width: 100%;\n+    height: auto;\n+  }\n+\n+  button, input, select, optgroup, textarea {\n+    font: inherit;\n+    font-feature-settings: inherit;\n+    font-variation-settings: inherit;\n+    letter-spacing: inherit;\n+    color: inherit;\n+    opacity: 1;\n+    background-color: #0000;\n+    border-radius: 0;\n+  }\n+\n+  ::file-selector-button {\n+    font: inherit;\n+    font-feature-settings: inherit;\n+    font-variation-settings: inherit;\n+    letter-spacing: inherit;\n+    color: inherit;\n+    opacity: 1;\n+    background-color: #0000;\n+    border-radius: 0;\n+  }\n+\n+  :where(select:is([multiple], [size])) optgroup {\n+    font-weight: bolder;\n+  }\n+\n+  :where(select:is([multiple], [size])) optgroup option {\n+    padding-inline-start: 20px;\n+  }\n+\n+  ::file-selector-button {\n+    margin-inline-end: 4px;\n+  }\n+\n+  ::placeholder {\n+    opacity: 1;\n+    color: oklab(from currentColor l a b / 50%);\n+  }\n+\n+  textarea {\n+    resize: vertical;\n+  }\n+\n+  ::-webkit-search-decoration {\n+    -webkit-appearance: none;\n+  }\n+\n+  ::-webkit-date-and-time-value {\n+    min-height: 1lh;\n+    text-align: inherit;\n+  }\n+\n+  ::-webkit-datetime-edit {\n+    display: inline-flex;\n+  }\n+\n+  ::-webkit-datetime-edit-fields-wrapper {\n+    padding: 0;\n+  }\n+\n+  ::-webkit-datetime-edit {\n+    padding-block: 0;\n+  }\n+\n+  ::-webkit-datetime-edit-year-field {\n+    padding-block: 0;\n+  }\n+\n+  ::-webkit-datetime-edit-month-field {\n+    padding-block: 0;\n+  }\n+\n+  ::-webkit-datetime-edit-day-field {\n+    padding-block: 0;\n+  }\n+\n+  ::-webkit-datetime-edit-hour-field {\n+    padding-block: 0;\n+  }\n+\n+  ::-webkit-datetime-edit-minute-field {\n+    padding-block: 0;\n+  }\n+\n+  ::-webkit-datetime-edit-second-field {\n+    padding-block: 0;\n+  }\n+\n+  ::-webkit-datetime-edit-millisecond-field {\n+    padding-block: 0;\n+  }\n+\n+  ::-webkit-datetime-edit-meridiem-field {\n+    padding-block: 0;\n+  }\n+\n+  :-moz-ui-invalid {\n+    box-shadow: none;\n+  }\n+\n+  button, input:where([type=\""button\""], [type=\""reset\""], [type=\""submit\""]) {\n+    appearance: button;\n+  }\n+\n+  ::file-selector-button {\n+    appearance: button;\n+  }\n+\n+  ::-webkit-inner-spin-button {\n+    height: auto;\n+  }\n+\n+  ::-webkit-outer-spin-button {\n+    height: auto;\n+  }\n+\n+  [hidden]:where(:not([hidden=\""until-found\""])) {\n+    display: none !important;\n+  }\n+}\n+\n+@layer components, utilities;\""\n+`;\n\ndiff --git a/packages/tailwindcss/src/css-functions.test.ts b/packages/tailwindcss/src/css-functions.test.ts\nindex 371531c41236..29e09d7d83c6 100644\n--- a/packages/tailwindcss/src/css-functions.test.ts\n+++ b/packages/tailwindcss/src/css-functions.test.ts\n@@ -152,6 +152,27 @@ describe('--theme(\u2026)', () => {\n           color: --theme(--color-red-500);\n         }\n       `),\n+    ).toMatchInlineSnapshot(`\n+      \"":root, :host {\n+        --color-red-500: red;\n+      }\n+\n+      .red {\n+        color: var(--color-red-500);\n+      }\""\n+    `)\n+  })\n+\n+  test('--theme(--color-red-500 inline)', async () => {\n+    expect(\n+      await compileCss(css`\n+        @theme {\n+          --color-red-500: #f00;\n+        }\n+        .red {\n+          color: --theme(--color-red-500 inline);\n+        }\n+      `),\n     ).toMatchInlineSnapshot(`\n       \"".red {\n         color: red;\n@@ -159,7 +180,184 @@ describe('--theme(\u2026)', () => {\n     `)\n   })\n \n-  test('--theme(\u2026) can only be used with CSS variables from your theme', async () => {\n+  test('--theme(--color-red-500/50)', async () => {\n+    expect(\n+      await compileCss(css`\n+        @theme {\n+          --color-red-500: #f00;\n+        }\n+        .red {\n+          color: --theme(--color-red-500/0.5);\n+        }\n+      `),\n+    ).toMatchInlineSnapshot(`\n+      \"":root, :host {\n+        --color-red-500: red;\n+      }\n+\n+      .red {\n+        color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n+      }\""\n+    `)\n+  })\n+\n+  test('--theme(--color-red-500/50 inline)', async () => {\n+    expect(\n+      await compileCss(css`\n+        @theme {\n+          --color-red-500: #f00;\n+        }\n+        .red {\n+          color: --theme(--color-red-500/50 inline);\n+        }\n+      `),\n+    ).toMatchInlineSnapshot(`\n+      \"".red {\n+        color: oklab(62.7955% .224863 .125846);\n+      }\""\n+    `)\n+  })\n+\n+  test('--theme(\u2026) injects the fallback when the value it refers is set to a `--theme(\u2026)` function with the fallback `initial`', async () => {\n+    expect(\n+      await compileCss(css`\n+        @theme prefix(tw) {\n+          --default-font-family: --theme(--font-family, initial);\n+        }\n+        .red {\n+          font-family: --theme(--default-font-family, Potato Sans, sans-serif);\n+        }\n+      `),\n+    ).toMatchInlineSnapshot(`\n+      \"".red {\n+        font-family: var(--tw-default-font-family, Potato Sans, sans-serif);\n+      }\""\n+    `)\n+  })\n+\n+  test('--theme(\u2026) injects the fallback when the value it refers is set to a `--theme(\u2026)` function with the fallback `initial` in @reference mode', async () => {\n+    expect(\n+      await compileCss(css`\n+        @theme reference prefix(tw) {\n+          --default-font-family: --theme(--font-family, initial);\n+        }\n+        .red {\n+          font-family: --theme(--default-font-family, Potato Sans, sans-serif);\n+        }\n+      `),\n+    ).toMatchInlineSnapshot(`\n+      \"".red {\n+        font-family: var(--tw-default-font-family, Potato Sans, sans-serif);\n+      }\""\n+    `)\n+  })\n+\n+  test('--theme(\u2026) resolves with the fallback when the value it refers is set to a `--theme(\u2026 inline)` function with the fallback `initial`', async () => {\n+    expect(\n+      await compileCss(css`\n+        @theme prefix(tw) {\n+          --default-font-family: --theme(--font-family inline, initial);\n+        }\n+        .red {\n+          font-family: --theme(--default-font-family inline, Potato Sans, sans-serif);\n+        }\n+      `),\n+    ).toMatchInlineSnapshot(`\n+      \"".red {\n+        font-family: Potato Sans, sans-serif;\n+      }\""\n+    `)\n+  })\n+\n+  test('--theme(\u2026) resolves with the fallback when the value it refers is set to a `--theme(\u2026 inline)` function with the fallback `initial` in @reference mode', async () => {\n+    expect(\n+      await compileCss(css`\n+        @theme reference prefix(tw) {\n+          --default-font-family: --theme(--font-family inline, initial);\n+        }\n+        .red {\n+          font-family: --theme(--default-font-family inline, Potato Sans, sans-serif);\n+        }\n+      `),\n+    ).toMatchInlineSnapshot(`\n+      \"".red {\n+        font-family: Potato Sans, sans-serif;\n+      }\""\n+    `)\n+  })\n+\n+  test('--theme(\u2026) does not inject the fallback if the fallback is `initial`', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @theme prefix(tw) {\n+            --font-sans:\n+              ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',\n+              'Segoe UI Symbol', 'Noto Color Emoji';\n+            --default-font-family: --theme(--font-sans, initial);\n+          }\n+          @layer base {\n+            html {\n+              font-family: --theme(--default-font-family, sans-serif);\n+            }\n+          }\n+          @tailwind utilities;\n+        `,\n+        ['tw:font-sans'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"":root, :host {\n+        --tw-font-sans: ui-sans-serif, system-ui, sans-serif, \""Apple Color Emoji\"", \""Segoe UI Emoji\"", \""Segoe UI Symbol\"", \""Noto Color Emoji\"";\n+        --tw-default-font-family: var(--tw-font-sans);\n+      }\n+\n+      @layer base {\n+        html {\n+          font-family: var(--tw-default-font-family, sans-serif);\n+        }\n+      }\n+\n+      .tw\\\\:font-sans {\n+        font-family: var(--tw-font-sans);\n+      }\""\n+    `)\n+  })\n+\n+  test('--theme(\u2026) forces the value to be retrieved as inline when used inside an at-rule', async () => {\n+    expect(\n+      await compileCss(css`\n+        @theme {\n+          --breakpoint-md: 48rem;\n+          --breakpoint-lg: 64rem;\n+        }\n+        @custom-media --md (width >= --theme(--breakpoint-md));\n+        @media (--md) {\n+          .blue {\n+            color: blue;\n+          }\n+        }\n+        @media (width >= --theme(--breakpoint-lg)) {\n+          .red {\n+            color: red;\n+          }\n+        }\n+      `),\n+    ).toMatchInlineSnapshot(`\n+      \""@media (width >= 48rem) {\n+        .blue {\n+          color: #00f;\n+        }\n+      }\n+\n+      @media (width >= 64rem) {\n+        .red {\n+          color: red;\n+        }\n+      }\""\n+    `)\n+  })\n+\n+  test('--theme(\u2026) can only be used with CSS variables from your @theme', async () => {\n     expect(() =>\n       compileCss(css`\n         @theme {\n@@ -172,6 +370,19 @@ describe('--theme(\u2026)', () => {\n     ).rejects.toThrowErrorMatchingInlineSnapshot(\n       `[Error: The --theme(\u2026) function can only be used with CSS variables from your theme.]`,\n     )\n+\n+    expect(() =>\n+      compileCss(css`\n+        @theme {\n+          --color-red-500: #f00;\n+        }\n+        .red {\n+          color: --theme(--color-green-500);\n+        }\n+      `),\n+    ).rejects.toThrowErrorMatchingInlineSnapshot(\n+      `[Error: Could not resolve value for theme function: \\`theme(--color-green-500)\\`. Consider checking if the variable name is correct or provide a fallback value to silence this error.]`,\n+    )\n   })\n })\n \n\ndiff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex 4779e6c18e65..ce3dd9d47182 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -115,6 +115,29 @@ describe('compiling CSS', () => {\n     ).toMatchSnapshot()\n   })\n \n+  test('prefix all CSS variables inside preflight', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @import 'tailwindcss' prefix(tw);\n+          @tailwind utilities;\n+        `,\n+        ['font-mono'],\n+        {\n+          async loadStylesheet(id) {\n+            return {\n+              content: fs.readFileSync(\n+                path.resolve(__dirname, '..', id === 'tailwindcss' ? 'index.css' : id),\n+                'utf-8',\n+              ),\n+              base: '',\n+            }\n+          },\n+        },\n+      ),\n+    ).toMatchSnapshot()\n+  })\n+\n   test('unescapes underscores to spaces inside arbitrary values except for `url()` and first argument of `var()` and `theme()`', async () => {\n     expect(\n       await compileCss(\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16995"", ""pr_id"": 16995, ""issue_id"": 16973, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Custom utilities sorted incorrectly\n**What version of Tailwind CSS are you using?**\nv4.0.10\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\nTested on:\nNext.js 15.1.7\nPostCSS 8.5.2\n\n**What version of Node.js are you using?**\nv23.8.0\n\n**What browser are you using?**\nChrome\n\n**What operating system are you using?**\nmacOS\n\n**Reproduction URL**\nhttps://play.tailwindcss.com/RhJ7x3kQUN\n\n**Describe your issue**\nIn the upgrade guide it is mentioned that custom utilities are sorted based on the number of properties they define. See [this section](https://tailwindcss.com/docs/upgrade-guide#adding-custom-utilities).\n\nNow as shown in the reproduction URL, this does not seem to function properly. The `type-h1` utility specified 3 properties, but are still sorted last in the CSS output. This makes it's specificity the highest and you can't override the font size with e.g. the `text-sm` class. \n\nIf we however instead use the `@apply` directive it seems to work as expected.\n\nTo me this seems to be a bug, but I might just misunderstand the docs, or there might be some alternative preferred solution.\n\nI looked into using [component classes](https://tailwindcss.com/docs/adding-custom-styles#adding-component-classes) instead, but this was not really feasible as it doesn't work with IntelliSense (see [this play link](https://play.tailwindcss.com/CLjzTW6JKq)). Maybe this is the most suitable solution, but due to the IntelliSense issue it's not really feasible for our team right now.\n\nReally love v4! Thanks for the hard work \ud83d\ude4c \n"", ""issue_word_count"": 265, ""test_files_count"": 2, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/compile.ts"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/utilities.test.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""b676da8ace131fcf7ada72752f54738c90137939"", ""head_commit"": ""a18586119190aa4278e745a87dd479287cd36e3e"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16995"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16995"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-06T14:20:12.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 5e6ba791a9f2..093c2aae434b 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -17,6 +17,10 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - _Experimental_: Add `user-valid` and `user-invalid` variants ([#12370](https://github.com/tailwindlabs/tailwindcss/pull/12370))\n - _Experimental_: Add `wrap-anywhere`, `wrap-break-word`, and `wrap-normal` utilities ([#12128](https://github.com/tailwindlabs/tailwindcss/pull/12128))\n \n+### Fixed\n+\n+- Ensure utilities are sorted based on their actual property order ([#16995](https://github.com/tailwindlabs/tailwindcss/pull/16995))\n+\n ## [4.0.11] - 2025-03-06\n \n ### Fixed\n\ndiff --git a/packages/tailwindcss/src/compile.ts b/packages/tailwindcss/src/compile.ts\nindex cd822b368cba..6530541a0e43 100644\n--- a/packages/tailwindcss/src/compile.ts\n+++ b/packages/tailwindcss/src/compile.ts\n@@ -326,7 +326,9 @@ function getPropertySort(nodes: AstNode[]) {\n     let node = q.shift()!\n     if (node.kind === 'declaration') {\n       // Empty strings should still be counted, e.g.: `--tw-foo:;` is valid\n-      if (node.value !== undefined) count++\n+      if (node.value === undefined) continue\n+\n+      count++\n \n       if (seenTwSort) continue\n \n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex 4c97475a3c20..c233541538d6 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -1051,6 +1051,43 @@ describe('sorting', () => {\n       }\""\n     `)\n   })\n+\n+  // https://github.com/tailwindlabs/tailwindcss/issues/16973\n+  it('should not take undefined values into account when sorting', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @theme {\n+            --text-sm: 0.875rem;\n+            --text-sm--line-height: calc(1.25 / 0.875);\n+          }\n+          @tailwind utilities;\n+          @utility fancy-text {\n+            font-size: var(--text-4xl);\n+            line-height: var(--text-4xl--line-height);\n+            font-weight: var(--font-weight-bold);\n+          }\n+        `,\n+        ['fancy-text', 'text-sm'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"":root, :host {\n+        --text-sm: .875rem;\n+        --text-sm--line-height: calc(1.25 / .875);\n+      }\n+\n+      .fancy-text {\n+        font-size: var(--text-4xl);\n+        line-height: var(--text-4xl--line-height);\n+        font-weight: var(--font-weight-bold);\n+      }\n+\n+      .text-sm {\n+        font-size: var(--text-sm);\n+        line-height: var(--tw-leading, var(--text-sm--line-height));\n+      }\""\n+    `)\n+  })\n })\n \n describe('Parsing theme values from CSS', () => {\n\ndiff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 9cf0f943a2f3..615956c4f5e2 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -15036,11 +15036,6 @@ test('text', async () => {\n       --leading-snug: 1.375;\n     }\n \n-    .text-sm {\n-      font-size: var(--text-sm);\n-      line-height: var(--tw-leading, var(--text-sm--line-height));\n-    }\n-\n     .text-\\\\[10px\\\\]\\\\/none {\n       font-size: 10px;\n       line-height: 1;\n@@ -15071,6 +15066,11 @@ test('text', async () => {\n       line-height: calc(var(--spacing) * 6);\n     }\n \n+    .text-sm {\n+      font-size: var(--text-sm);\n+      line-height: var(--tw-leading, var(--text-sm--line-height));\n+    }\n+\n     .text-sm\\\\/6 {\n       font-size: var(--text-sm);\n       line-height: calc(var(--spacing) * 6);\n@@ -16748,11 +16748,11 @@ describe('custom utilities', () => {\n     expect(optimizeCss(compiled).trim()).toMatchInlineSnapshot(`\n       \""@layer utilities {\n         .text-sm {\n-          font-size: var(--text-sm, .875rem);\n-          line-height: var(--tw-leading, var(--text-sm--line-height, 1.25rem));\n           font-size: var(--text-sm, .8755rem);\n           line-height: var(--text-sm--line-height, 1.255rem);\n           text-rendering: optimizeLegibility;\n+          font-size: var(--text-sm, .875rem);\n+          line-height: var(--tw-leading, var(--text-sm--line-height, 1.25rem));\n         }\n       }\""\n     `)\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16943"", ""pr_id"": 16943, ""issue_id"": 16926, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""`outline-hidden` only applies transparent outline when `forced-colors` is active?\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\n4.0.9\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 6.0.11\n\n**What version of Node.js are you using?**\n\n22.13.1\n\n**What browser are you using?**\n\nChromium, Firefox, Safari\n\n**What operating system are you using?**\n\nMacOS\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/SOQPkOEDC9\n\n**Describe your issue**\n\nI'm currently upgrading a project from v3 to v4. The upgrade guide states that `outline-none` was renamed to `outline-hidden`, although this is only true when `forced-colors` media feature is active. Curious why this change was made, and if there's another utility class I could use to have the same behaviour as v3.\n\n"", ""issue_word_count"": 167, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""a98ebacc64f146539d647f80a69d293c3b90427c"", ""head_commit"": ""8b1993c51934866db3aebad5967ec2b462e5b239"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16943"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16943"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-04T15:36:28.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 4490a97a6ebd..dc7ae82330e8 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -20,6 +20,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Ensure `not-*` does not remove `:is(\u2026)` from variants ([#16825](https://github.com/tailwindlabs/tailwindcss/pull/16825))\n - Ensure `@keyframes` are correctly emitted when using a prefixed setup ([#16850](https://github.com/tailwindlabs/tailwindcss/pull/16850))\n+- Ensure `outline-hidden` behaves like `outline-none` in non-`forced-colors` mode ([#](https://github.com/tailwindlabs/tailwindcss/pull/))\n \n ## [4.0.9] - 2025-02-25\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 1fa8bd216151..ccf87a1cfe01 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -3901,6 +3901,7 @@ export function createUtilities(theme: Theme) {\n \n     utilities.static('outline-hidden', () => {\n       return [\n+        decl('--tw-outline-style', 'none'),\n         decl('outline-style', 'none'),\n         atRule('@media', '(forced-colors: active)', [\n           decl('outline', '2px solid transparent'),\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex d0be566effc0..bd7a90923e45 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -14623,6 +14623,7 @@ test('outline', async () => {\n     }\n \n     .outline-hidden {\n+      --tw-outline-style: none;\n       outline-style: none;\n     }\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16940"", ""pr_id"": 16940, ""issue_id"": 16935, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Nested CSS utilities and @apply rules fails\n**What version of Tailwind CSS are you using?**\n\nFor example: v4.0.9\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 6.2.0\n\n**What version of Node.js are you using?**\n\nFor example: v22.0.0\n\n**What browser are you using?**\n\nN/A\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/zVH1cgIGl7\n\n**Describe your issue**\n\nI'm creating a bunch of utility classes in a project, and I stumbled across a bug in which utility classes are not being generated, if they're also used within some custom components/classes.\n\nWithin the example, all of the setups work except Example 2. Within Example 2, no class is being generated for 'type-block-1', despite it being in the markup.\n\nI've narrowed it down to when there's multiple @apply rules within the same block. This also only happens with these newly defined utility classes. If the nested @apply uses a default Tailwind utility (e.g. rotate-45), then the issue doesn't persist. So it doesn't look like it's an issue with the structure of the CSS.\n\nAt first I thought this was my own personal setup, but I've managed to recreate within Tailwind Play.\n\nIf I'm doing anything glaringly obvious, let me know."", ""issue_word_count"": 229, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/apply.ts"", ""packages/tailwindcss/src/index.test.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/index.test.ts""], ""base_commit"": ""b0aa20c30eb68dc5d4bb636307e4d245d1c781b0"", ""head_commit"": ""a7c07d87c43f8a7cc3a527e392dac948f8f4a409"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16940"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16940"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-04T15:54:05.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex dc7ae82330e8..3ad1df938f5f 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -20,6 +20,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Ensure `not-*` does not remove `:is(\u2026)` from variants ([#16825](https://github.com/tailwindlabs/tailwindcss/pull/16825))\n - Ensure `@keyframes` are correctly emitted when using a prefixed setup ([#16850](https://github.com/tailwindlabs/tailwindcss/pull/16850))\n+- Don't swallow `@utility` declarations when `@apply` is used in nested rules ([#16940](https://github.com/tailwindlabs/tailwindcss/pull/16940))\n - Ensure `outline-hidden` behaves like `outline-none` in non-`forced-colors` mode ([#](https://github.com/tailwindlabs/tailwindcss/pull/))\n \n ## [4.0.9] - 2025-02-25\n\ndiff --git a/packages/tailwindcss/src/apply.ts b/packages/tailwindcss/src/apply.ts\nindex 6a1fcdefe57c..676b4f2eee19 100644\n--- a/packages/tailwindcss/src/apply.ts\n+++ b/packages/tailwindcss/src/apply.ts\n@@ -146,39 +146,45 @@ export function substituteAtApply(ast: AstNode[], designSystem: DesignSystem) {\n     visit(node)\n   }\n \n-  // Substitute the `@apply` at-rules in order\n-  walk(sorted, (node, { replaceWith }) => {\n-    if (node.kind !== 'at-rule' || node.name !== '@apply') return\n-    let candidates = node.params.split(/\\s+/g)\n-\n-    // Replace the `@apply` rule with the actual utility classes\n-    {\n-      // Parse the candidates to an AST that we can replace the `@apply` rule\n-      // with.\n-      let candidateAst = compileCandidates(candidates, designSystem, {\n-        onInvalidCandidate: (candidate) => {\n-          throw new Error(`Cannot apply unknown utility class: ${candidate}`)\n-        },\n-      }).astNodes\n-\n-      // Collect the nodes to insert in place of the `@apply` rule. When a rule\n-      // was used, we want to insert its children instead of the rule because we\n-      // don't want the wrapping selector.\n-      let newNodes: AstNode[] = []\n-      for (let candidateNode of candidateAst) {\n-        if (candidateNode.kind === 'rule') {\n-          for (let child of candidateNode.nodes) {\n-            newNodes.push(child)\n+  // Substitute the `@apply` at-rules in order. Note that the list is going to\n+  // be flattened so we do not have to recursively walk over child rules\n+  for (let parent of sorted) {\n+    if (!('nodes' in parent)) continue\n+\n+    for (let i = 0; i < parent.nodes.length; i++) {\n+      let node = parent.nodes[i]\n+      if (node.kind !== 'at-rule' || node.name !== '@apply') continue\n+\n+      let candidates = node.params.split(/\\s+/g)\n+\n+      // Replace the `@apply` rule with the actual utility classes\n+      {\n+        // Parse the candidates to an AST that we can replace the `@apply` rule\n+        // with.\n+        let candidateAst = compileCandidates(candidates, designSystem, {\n+          onInvalidCandidate: (candidate) => {\n+            throw new Error(`Cannot apply unknown utility class: ${candidate}`)\n+          },\n+        }).astNodes\n+\n+        // Collect the nodes to insert in place of the `@apply` rule. When a rule\n+        // was used, we want to insert its children instead of the rule because we\n+        // don't want the wrapping selector.\n+        let newNodes: AstNode[] = []\n+        for (let candidateNode of candidateAst) {\n+          if (candidateNode.kind === 'rule') {\n+            for (let child of candidateNode.nodes) {\n+              newNodes.push(child)\n+            }\n+          } else {\n+            newNodes.push(candidateNode)\n           }\n-        } else {\n-          newNodes.push(candidateNode)\n         }\n-      }\n \n-      replaceWith(newNodes)\n+        parent.nodes.splice(i, 1, ...newNodes)\n+      }\n     }\n-  })\n-\n+  }\n   return features\n }\n \n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex ea07499b61ff..4c97475a3c20 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -530,6 +530,41 @@ describe('@apply', () => {\n       }\""\n     `)\n   })\n+\n+  // https://github.com/tailwindlabs/tailwindcss/issues/16935\n+  it('should now swallow @utility declarations when @apply is used in nested rules', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @tailwind utilities;\n+\n+          .ignore-me {\n+            @apply underline;\n+            div {\n+              @apply custom-utility;\n+            }\n+          }\n+\n+          @utility custom-utility {\n+            @apply flex;\n+          }\n+        `,\n+        ['custom-utility'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"".custom-utility {\n+        display: flex;\n+      }\n+\n+      .ignore-me {\n+        text-decoration-line: underline;\n+      }\n+\n+      .ignore-me div {\n+        display: flex;\n+      }\""\n+    `)\n+  })\n })\n \n describe('arbitrary variants', () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16917"", ""pr_id"": 16917, ""issue_id"": 16916, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""The utility class \""max-h-auto\"" does not work\n**The utility class mentioned in sizing documentation (https://tailwindcss.com/docs/max-height) does not actually work.** \n-_This is because documentation claims the default style applied when such a class is applied to an element is \""max-height:auto\"" , which by default is not a valid value for css max-height property (_https://developer.mozilla.org/en-US/docs/Web/CSS/max-height)\""_"", ""issue_word_count"": 73, ""test_files_count"": 2, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap"", ""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""a98ebacc64f146539d647f80a69d293c3b90427c"", ""head_commit"": ""6c9bc4a80a12d78b76f7674fd4cc238de07196ad"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16917"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16917"", ""dockerfile"": """", ""pr_merged_at"": ""2025-03-05T10:59:33.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 4490a97a6ebd..44e657bbffb0 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -21,6 +21,10 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure `not-*` does not remove `:is(\u2026)` from variants ([#16825](https://github.com/tailwindlabs/tailwindcss/pull/16825))\n - Ensure `@keyframes` are correctly emitted when using a prefixed setup ([#16850](https://github.com/tailwindlabs/tailwindcss/pull/16850))\n \n+### Changed\n+\n+- Removed `max-w-auto` and `max-h-auto` utilities as they generate invalid CSS ([#16917](https://github.com/tailwindlabs/tailwindcss/pull/16917))\n+\n ## [4.0.9] - 2025-02-25\n \n ### Fixed\n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 1fa8bd216151..b27bf33a7f82 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -944,11 +944,13 @@ export function createUtilities(theme: Theme) {\n       ['height', value],\n     ])\n     staticUtility(`w-${key}`, [['width', value]])\n-    staticUtility(`min-w-${key}`, [['min-width', value]])\n-    staticUtility(`max-w-${key}`, [['max-width', value]])\n     staticUtility(`h-${key}`, [['height', value]])\n+    staticUtility(`min-w-${key}`, [['min-width', value]])\n     staticUtility(`min-h-${key}`, [['min-height', value]])\n-    staticUtility(`max-h-${key}`, [['max-height', value]])\n+    if (key !== 'auto') {\n+      staticUtility(`max-w-${key}`, [['max-width', value]])\n+      staticUtility(`max-h-${key}`, [['max-height', value]])\n+    }\n   }\n \n   staticUtility(`w-screen`, [['width', '100vw']])\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\nindex ba6dd4141425..ec055e7b4aa3 100644\n--- a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n@@ -5110,7 +5110,6 @@ exports[`getClassList 1`] = `\n   \""max-h-9/12\"",\n   \""max-h-10/12\"",\n   \""max-h-11/12\"",\n-  \""max-h-auto\"",\n   \""max-h-dvh\"",\n   \""max-h-dvw\"",\n   \""max-h-fit\"",\n@@ -5158,7 +5157,6 @@ exports[`getClassList 1`] = `\n   \""max-w-72\"",\n   \""max-w-80\"",\n   \""max-w-96\"",\n-  \""max-w-auto\"",\n   \""max-w-dvh\"",\n   \""max-w-dvw\"",\n   \""max-w-fit\"",\n\ndiff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex d0be566effc0..11cc4b184649 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -2738,8 +2738,8 @@ test('min-width', async () => {\n         @tailwind utilities;\n       `,\n       [\n-        'min-w-auto',\n         'min-w-full',\n+        'min-w-auto',\n         'min-w-min',\n         'min-w-max',\n         'min-w-fit',\n@@ -2813,16 +2813,7 @@ test('max-width', async () => {\n         }\n         @tailwind utilities;\n       `,\n-      [\n-        'max-w-none',\n-        'max-w-full',\n-        'max-w-max',\n-        'max-w-max',\n-        'max-w-fit',\n-        'max-w-4',\n-        'max-w-xl',\n-        'max-w-[4px]',\n-      ],\n+      ['max-w-none', 'max-w-full', 'max-w-max', 'max-w-fit', 'max-w-4', 'max-w-xl', 'max-w-[4px]'],\n     ),\n   ).toMatchInlineSnapshot(`\n     \"":root, :host {\n@@ -2861,6 +2852,7 @@ test('max-width', async () => {\n   expect(\n     await run([\n       'max-w',\n+      'max-w-auto',\n       '-max-w-4',\n       '-max-w-[4px]',\n       'max-w-none/foo',\n@@ -2988,8 +2980,8 @@ test('min-height', async () => {\n         @tailwind utilities;\n       `,\n       [\n-        'min-h-auto',\n         'min-h-full',\n+        'min-h-auto',\n         'min-h-screen',\n         'min-h-svh',\n         'min-h-lvh',\n@@ -3145,6 +3137,7 @@ test('max-height', async () => {\n   expect(\n     await run([\n       'max-h',\n+      'max-h-auto',\n       '-max-h-4',\n       '-max-h-[4px]',\n       'max-h-none/foo',\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16850"", ""pr_id"": 16850, ""issue_id"": 16829, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Animations don't work with prefix\n**What version of Tailwind CSS are you using?**\n\nv4.0.9\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 6.1.0\n\n**What version of Node.js are you using?**\n\nv20.18.3\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n**Not** working (with prefix): https://play.tailwindcss.com/qTUjgxKQEu\nWorking (without prefix): https://play.tailwindcss.com/n1FLqahYjR\n\n**Describe your issue**\n\nPrebuilt animations like `animate-spin` (https://tailwindcss.com/docs/animation) and custom animations don't work when a prefix is used.\n"", ""issue_word_count"": 102, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/ast.ts"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/theme.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/index.test.ts""], ""base_commit"": ""5532d48e8e55744f9ba0c01f3e80a7988b0e1bc6"", ""head_commit"": ""d987f9bf1826f02be04c266eb3e313581a93095e"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16850"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16850"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-27T16:35:25.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 7e8d8577d8c0..0d817dcdd8a3 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -18,6 +18,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Fixed\n \n - Ensure `not-*` does not remove `:is(\u2026)` from variants ([#16825](https://github.com/tailwindlabs/tailwindcss/pull/16825))\n+- Ensure `@keyframes` are correctly emitted when using a prefixed setup ([#16850](https://github.com/tailwindlabs/tailwindcss/pull/16850))\n \n ## [4.0.9] - 2025-02-25\n \n\ndiff --git a/packages/tailwindcss/src/ast.ts b/packages/tailwindcss/src/ast.ts\nindex bd99347974f1..39b6770e25cc 100644\n--- a/packages/tailwindcss/src/ast.ts\n+++ b/packages/tailwindcss/src/ast.ts\n@@ -429,7 +429,7 @@ export function optimizeAst(ast: AstNode[], designSystem: DesignSystem) {\n         variableDependencies,\n       )\n       if (variableUsed) {\n-        if (declaration.property.startsWith('--animate-')) {\n+        if (declaration.property.startsWith(designSystem.theme.prefixKey('--animate-'))) {\n           let parts = declaration.value!.split(/\\s+/)\n           for (let part of parts) usedKeyframeNames.add(part)\n         }\n\ndiff --git a/packages/tailwindcss/src/theme.ts b/packages/tailwindcss/src/theme.ts\nindex d38d5918b33d..d5fca3b02d3d 100644\n--- a/packages/tailwindcss/src/theme.ts\n+++ b/packages/tailwindcss/src/theme.ts\n@@ -117,12 +117,12 @@ export class Theme {\n     if (!this.prefix) return this.values.entries()\n \n     return Array.from(this.values, (entry) => {\n-      entry[0] = this.#prefixKey(entry[0])\n+      entry[0] = this.prefixKey(entry[0])\n       return entry\n     })\n   }\n \n-  #prefixKey(key: string) {\n+  prefixKey(key: string) {\n     if (!this.prefix) return key\n     return `--${this.prefix}-${key.slice(2)}`\n   }\n@@ -190,7 +190,7 @@ export class Theme {\n       fallback = value.value\n     }\n \n-    return `var(${escape(this.#prefixKey(themeKey))}${fallback ? `, ${fallback}` : ''})`\n+    return `var(${escape(this.prefixKey(themeKey))}${fallback ? `, ${fallback}` : ''})`\n   }\n \n   markUsedVariable(themeKey: string) {\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex b6f1e4781637..ea07499b61ff 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -1613,6 +1613,73 @@ describe('Parsing theme values from CSS', () => {\n     `)\n   })\n \n+  test('keyframes are generated when used in an animation within a prefixed setup', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @theme prefix(tw) {\n+            --animate-foo: used 1s infinite;\n+            --animate-bar: unused 1s infinite;\n+\n+            @keyframes used {\n+              to {\n+                opacity: 1;\n+              }\n+            }\n+\n+            @keyframes unused {\n+              to {\n+                opacity: 0;\n+              }\n+            }\n+          }\n+\n+          @tailwind utilities;\n+        `,\n+        ['tw:animate-foo'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"":root, :host {\n+        --tw-animate-foo: used 1s infinite;\n+      }\n+\n+      .tw\\\\:animate-foo {\n+        animation: var(--tw-animate-foo);\n+      }\n+\n+      @keyframes used {\n+        to {\n+          opacity: 1;\n+        }\n+      }\""\n+    `)\n+  })\n+\n+  test('custom properties are generated when used from a CSS var with a prefixed setup', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @theme prefix(tw) {\n+            --color-tomato: #e10c04;\n+          }\n+          @tailwind utilities;\n+          .red {\n+            color: var(--tw-color-tomato);\n+          }\n+        `,\n+        [],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"":root, :host {\n+        --tw-color-tomato: #e10c04;\n+      }\n+\n+      .red {\n+        color: var(--tw-color-tomato);\n+      }\""\n+    `)\n+  })\n+\n   // https://github.com/tailwindlabs/tailwindcss/issues/16374\n   test('custom properties in keyframes preserved', async () => {\n     expect(\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16825"", ""pr_id"": 16825, ""issue_id"": 16821, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""`not-open` is generated but not applied\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.7\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\n`@tailwindcss/cli` v4.0.7\n\n**What version of Node.js are you using?**\n\nv22.11.0\n\n**What browser are you using?**\n\nChrome Version 132.0.6834.160 (Official Build) (arm64)\n\n**What operating system are you using?**\n\nmacOS 15.2\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/0ZD73uWu9I\n\n**Describe your issue**\n\nWhen using `not-open` variant on a popover, the following CSS is generated in `utilities` layer by Tailwind, but not applied in the browser:\n\n```css\n.not-open\\:hidden {\n  &:not([open], :popover-open, :open) {\n    display: none;\n  }\n}\n```\n\nThis is probably because browsers currently do not support `:open` yet, and `:not` does not take a forgiving selector list like `:is`.\n\nWhile I could override it with `@variant open (&:is([open], :popover-open));`, I feel like this is a bug."", ""issue_word_count"": 191, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/variants.test.ts"", ""packages/tailwindcss/src/variants.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/variants.test.ts""], ""base_commit"": ""124b82bc7999391f2f551b440f1e0241bcd01af6"", ""head_commit"": ""581480f8f149fc5b0998e18446aa08f8065b90a1"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16825"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16825"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-26T17:03:12.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex e2cf69322edc..f75194ae85fe 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -14,6 +14,10 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - _Experimental_: Add `user-valid` and `user-invalid` variants ([#12370](https://github.com/tailwindlabs/tailwindcss/pull/12370))\n - _Experimental_: Add `wrap-anywhere`, `wrap-break-word`, and `wrap-normal` utilities ([#12128](https://github.com/tailwindlabs/tailwindcss/pull/12128))\n \n+### Fixed\n+\n+- Ensure `not-*` does not remove `:is(\u2026)` from variants ([#16825](https://github.com/tailwindlabs/tailwindcss/pull/16825))\n+\n ## [4.0.9] - 2025-02-25\n \n ### Fixed\n\ndiff --git a/packages/tailwindcss/src/variants.ts b/packages/tailwindcss/src/variants.ts\nindex 7d7df8cd03d0..3e28c49ef78e 100644\n--- a/packages/tailwindcss/src/variants.ts\n+++ b/packages/tailwindcss/src/variants.ts\n@@ -427,11 +427,6 @@ export function createVariants(theme: Theme): Variants {\n     if (selector.includes('::')) return null\n \n     let selectors = segment(selector, ',').map((sel) => {\n-      // Remove unnecessary wrapping &:is(\u2026) to reduce the selector size\n-      if (sel.startsWith('&:is(') && sel.endsWith(')')) {\n-        sel = sel.slice(5, -1)\n-      }\n-\n       // Replace `&` in target variant with `*`, so variants like `&:hover`\n       // become `&:not(*:hover)`. The `*` will often be optimized away.\n       sel = sel.replaceAll('&', '*')\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/variants.test.ts b/packages/tailwindcss/src/variants.test.ts\nindex 989ba83b08af..b2ee6acdeaf9 100644\n--- a/packages/tailwindcss/src/variants.test.ts\n+++ b/packages/tailwindcss/src/variants.test.ts\n@@ -232,11 +232,12 @@ test('target', async () => {\n })\n \n test('open', async () => {\n-  expect(await run(['open:flex', 'group-open:flex', 'peer-open:flex'])).toMatchInlineSnapshot(`\n-    \"".group-open\\\\:flex:is(:where(.group):is([open], :popover-open, :open) *), .peer-open\\\\:flex:is(:where(.peer):is([open], :popover-open, :open) ~ *), .open\\\\:flex:is([open], :popover-open, :open) {\n-      display: flex;\n-    }\""\n-  `)\n+  expect(await run(['open:flex', 'group-open:flex', 'peer-open:flex', 'not-open:flex']))\n+    .toMatchInlineSnapshot(`\n+      \"".not-open\\\\:flex:not(:is([open], :popover-open, :open)), .group-open\\\\:flex:is(:where(.group):is([open], :popover-open, :open) *), .peer-open\\\\:flex:is(:where(.peer):is([open], :popover-open, :open) ~ *), .open\\\\:flex:is([open], :popover-open, :open) {\n+        display: flex;\n+      }\""\n+    `)\n   expect(await run(['open/foo:flex'])).toEqual('')\n })\n \n@@ -1449,15 +1450,7 @@ test('not', async () => {\n       ],\n     ),\n   ).toMatchInlineSnapshot(`\n-    \"".not-first\\\\:flex:not(:first-child), .not-last\\\\:flex:not(:last-child), .not-only\\\\:flex:not(:only-child), .not-odd\\\\:flex:not(:nth-child(odd)), .not-even\\\\:flex:not(:nth-child(2n)), .not-first-of-type\\\\:flex:not(:first-of-type), .not-last-of-type\\\\:flex:not(:last-of-type), .not-only-of-type\\\\:flex:not(:only-of-type), .not-visited\\\\:flex:not(:visited), .not-target\\\\:flex:not(:target) {\n-      display: flex;\n-    }\n-\n-    .not-open\\\\:flex:not([open], :popover-open, :open) {\n-      display: flex;\n-    }\n-\n-    .not-default\\\\:flex:not(:default), .not-checked\\\\:flex:not(:checked), .not-indeterminate\\\\:flex:not(:indeterminate), .not-placeholder-shown\\\\:flex:not(:placeholder-shown), .not-autofill\\\\:flex:not(:autofill), .not-optional\\\\:flex:not(:optional), .not-required\\\\:flex:not(:required), .not-valid\\\\:flex:not(:valid), .not-invalid\\\\:flex:not(:invalid), .not-in-range\\\\:flex:not(:in-range), .not-out-of-range\\\\:flex:not(:out-of-range), .not-read-only\\\\:flex:not(:read-only), .not-empty\\\\:flex:not(:empty), .not-focus-within\\\\:flex:not(:focus-within), .not-hover\\\\:flex:not(:hover) {\n+    \"".not-first\\\\:flex:not(:first-child), .not-last\\\\:flex:not(:last-child), .not-only\\\\:flex:not(:only-child), .not-odd\\\\:flex:not(:nth-child(odd)), .not-even\\\\:flex:not(:nth-child(2n)), .not-first-of-type\\\\:flex:not(:first-of-type), .not-last-of-type\\\\:flex:not(:last-of-type), .not-only-of-type\\\\:flex:not(:only-of-type), .not-visited\\\\:flex:not(:visited), .not-target\\\\:flex:not(:target), .not-open\\\\:flex:not(:is([open], :popover-open, :open)), .not-default\\\\:flex:not(:default), .not-checked\\\\:flex:not(:checked), .not-indeterminate\\\\:flex:not(:indeterminate), .not-placeholder-shown\\\\:flex:not(:placeholder-shown), .not-autofill\\\\:flex:not(:autofill), .not-optional\\\\:flex:not(:optional), .not-required\\\\:flex:not(:required), .not-valid\\\\:flex:not(:valid), .not-invalid\\\\:flex:not(:invalid), .not-in-range\\\\:flex:not(:in-range), .not-out-of-range\\\\:flex:not(:out-of-range), .not-read-only\\\\:flex:not(:read-only), .not-empty\\\\:flex:not(:empty), .not-focus-within\\\\:flex:not(:focus-within), .not-hover\\\\:flex:not(:hover) {\n       display: flex;\n     }\n \n@@ -1467,7 +1460,7 @@ test('not', async () => {\n       }\n     }\n \n-    .not-focus\\\\:flex:not(:focus), .not-focus-visible\\\\:flex:not(:focus-visible), .not-active\\\\:flex:not(:active), .not-enabled\\\\:flex:not(:enabled), .not-disabled\\\\:flex:not(:disabled), .not-inert\\\\:flex:not([inert], [inert] *), .not-has-checked\\\\:flex:not(:has(:checked)), .not-aria-selected\\\\:flex:not([aria-selected=\""true\""]), .not-data-foo\\\\:flex:not([data-foo]), .not-nth-2\\\\:flex:not(:nth-child(2)) {\n+    .not-focus\\\\:flex:not(:focus), .not-focus-visible\\\\:flex:not(:focus-visible), .not-active\\\\:flex:not(:active), .not-enabled\\\\:flex:not(:enabled), .not-disabled\\\\:flex:not(:disabled), .not-inert\\\\:flex:not(:is([inert], [inert] *)), .not-has-checked\\\\:flex:not(:has(:checked)), .not-aria-selected\\\\:flex:not([aria-selected=\""true\""]), .not-data-foo\\\\:flex:not([data-foo]), .not-nth-2\\\\:flex:not(:nth-child(2)) {\n       display: flex;\n     }\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16802"", ""pr_id"": 16802, ""issue_id"": 16799, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Incorrect rendering of `:has()` and `:not()` selectors since `4.0.7`\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.7 and v4.0.8  \n(It was working correctly in `4.0.6`)\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nFor example: Vite 6\n\n**Reproduction URL**\n\nhttps://github.com/saadeghi/tw-has-bug\n\n**Describe your issue**\nPlugin:\n```js\nexport default ({ addComponents }) => {\n  addComponents({\n    \"".parent-bug\"": {\n      \""&:has(.child:nth-child(2))\"": {\n        background: \""green\"",\n      },\n    },\n    \"".empty-has-bug\"": {\n      \""&:has(:nth-child(2))\"": {\n        background: \""yellow\"",\n      },\n    },\n    \"".empty-not-bug\"": {\n      \""&:not(:nth-child(1))\"": {\n        background: \""blue\"",\n      },\n    },\n  });\n};\n```\nexpected output:\n```css\n.parent-bug {\n  &:has(.child:nth-child(2)) {\n    background: green;\n  }\n}\n\n.empty-has-bug {\n  &:has(:nth-child(2)) {\n    background: yellow;\n  }\n}\n\n.empty-not-bug {\n  &:not(:nth-child(1)) {\n    background: blue;\n  }\n}\n```\ngenerated style in v4.0.7 and v4.0.8\n```css\n.parent-bug {\n  &:has():nth-child(2) {\n    background: green;\n  }\n}\n\n.empty-has-bug {\n  &:has():nth-child(2) {\n    background: yellow;\n  }\n}\n\n.empty-not-bug {\n  &:not():nth-child(1) {\n    background: blue;\n  }\n}\n```\n\nThe first 2 selectors were working correctly in `4.0.6`.\n"", ""issue_word_count"": 209, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/compat/selector-parser.test.ts"", ""packages/tailwindcss/src/compat/selector-parser.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/compat/selector-parser.test.ts""], ""base_commit"": ""294952f1702fb49be2d6795ee5bd7a6ac396ae78"", ""head_commit"": ""9110748a33ebadd59b6161fb108d5f04e3b91d2c"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16802"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16802"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-25T16:00:55.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 4b9687e148d8..0863058bffb0 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -21,6 +21,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Fix an issue where `@reference \""\u2026\""` would sometimes omit keyframe animations ([#16774](https://github.com/tailwindlabs/tailwindcss/pull/16774))\n - Ensure `z-*!` utilities are property marked as `!important` ([#16795](https://github.com/tailwindlabs/tailwindcss/pull/16795))\n - Read UTF-8 CSS files that start with a byte-order mark (BOM) ([#16796](https://github.com/tailwindlabs/tailwindcss/pull/16796))\n+- Ensure nested functions in selectors used with JavaScript plugins are not truncated ([#16802](https://github.com/tailwindlabs/tailwindcss/pull/16802))\n \n ## [4.0.8] - 2025-02-21\n \n\ndiff --git a/packages/tailwindcss/src/compat/selector-parser.ts b/packages/tailwindcss/src/compat/selector-parser.ts\nindex 341f9b581379..a5ea5e098194 100644\n--- a/packages/tailwindcss/src/compat/selector-parser.ts\n+++ b/packages/tailwindcss/src/compat/selector-parser.ts\n@@ -300,7 +300,11 @@ export function parse(input: string) {\n           buffer = ''\n           i = end\n \n-          ast.push(node)\n+          if (parent) {\n+            parent.nodes.push(node)\n+          } else {\n+            ast.push(node)\n+          }\n \n           break\n         }\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/compat/selector-parser.test.ts b/packages/tailwindcss/src/compat/selector-parser.test.ts\nindex 1c0b808b08d1..f995c9de72c5 100644\n--- a/packages/tailwindcss/src/compat/selector-parser.test.ts\n+++ b/packages/tailwindcss/src/compat/selector-parser.test.ts\n@@ -77,6 +77,60 @@ describe('parse', () => {\n       },\n     ])\n   })\n+\n+  it('parses &:has(.child:nth-child(2))', () => {\n+    expect(parse('&:has(.child:nth-child(2))')).toEqual([\n+      {\n+        kind: 'selector',\n+        value: '&',\n+      },\n+      {\n+        kind: 'function',\n+        value: ':has',\n+        nodes: [\n+          {\n+            kind: 'selector',\n+            value: '.child',\n+          },\n+          {\n+            kind: 'function',\n+            value: ':nth-child',\n+            nodes: [\n+              {\n+                kind: 'value',\n+                value: '2',\n+              },\n+            ],\n+          },\n+        ],\n+      },\n+    ])\n+  })\n+\n+  it('parses &:has(:nth-child(2))', () => {\n+    expect(parse('&:has(:nth-child(2))')).toEqual([\n+      {\n+        kind: 'selector',\n+        value: '&',\n+      },\n+      {\n+        kind: 'function',\n+        value: ':has',\n+        nodes: [\n+          {\n+            kind: 'function',\n+            value: ':nth-child',\n+            nodes: [\n+              {\n+                kind: 'value',\n+                value: '2',\n+              },\n+            ],\n+          },\n+        ],\n+      },\n+    ])\n+  })\n })\n \n describe('toCss', () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16795"", ""pr_id"": 16795, ""issue_id"": 16794, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""!z-40 not working in Tailwind CSS v4\n**What version of Tailwind CSS are you using?**\n\nv4.0.8\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\n[tailwind play](https://play.tailwindcss.com)\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nLinux\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/QP00crgkmX\n\n**Describe your issue**\n\nUsing `!z-40` in Tailwind CSS v4 does not apply the expected\n\nExpected\n```css\n.\\!z-40 {\n  z-index: 40 !important;\n}\n```\n\nActual\n```css\n.\\!z-40 {\n  z-index: 40;\n}\n```\n\nEven testing in [Tailwind Play](https://play.tailwindcss.com/) does not produce the correct result."", ""issue_word_count"": 104, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/compile.ts"", ""packages/tailwindcss/src/important.test.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/important.test.ts""], ""base_commit"": ""b38948337d77f7ed481a55d20b16b2aa4244ce04"", ""head_commit"": ""466d25919e1c8a010a75900a7534d6441fd46c8f"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16795"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16795"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-25T11:20:11.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 737c3034bcee..e80dc70ef524 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -18,6 +18,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Vite: Don't crash when importing a virtual module in JavaScript that ends in `.css` ([#16780](https://github.com/tailwindlabs/tailwindcss/pull/16780))\n - Ensure `@reference \""\u2026\""` does not emit CSS variables ([#16774](https://github.com/tailwindlabs/tailwindcss/pull/16774))\n - Fix an issue where `@reference \""\u2026\""` would sometimes omit keyframe animations ([#16774](https://github.com/tailwindlabs/tailwindcss/pull/16774))\n+- Ensure `z-*!` utilities are property marked as `!important` ([#16795](https://github.com/tailwindlabs/tailwindcss/pull/16795))\n \n ## [4.0.8] - 2025-02-21\n \n\ndiff --git a/packages/tailwindcss/src/compile.ts b/packages/tailwindcss/src/compile.ts\nindex 269acee03d08..cf20ada9ec72 100644\n--- a/packages/tailwindcss/src/compile.ts\n+++ b/packages/tailwindcss/src/compile.ts\n@@ -304,7 +304,7 @@ function applyImportant(ast: AstNode[]): void {\n       continue\n     }\n \n-    if (node.kind === 'declaration' && node.property[0] !== '-' && node.property[1] !== '-') {\n+    if (node.kind === 'declaration' && !(node.property[0] === '-' && node.property[1] === '-')) {\n       node.important = true\n     } else if (node.kind === 'rule' || node.kind === 'at-rule') {\n       applyImportant(node.nodes)\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/important.test.ts b/packages/tailwindcss/src/important.test.ts\nindex bb939ebafd06..7a27fb6e6d2a 100644\n--- a/packages/tailwindcss/src/important.test.ts\n+++ b/packages/tailwindcss/src/important.test.ts\n@@ -98,13 +98,17 @@ test('variables in utilities should not be marked as important', async () => {\n         }\n         @tailwind utilities;\n       `,\n-      ['ease-out!'],\n+      ['ease-out!', 'z-10!'],\n     ),\n   ).toMatchInlineSnapshot(`\n     \"":root, :host {\n       --ease-out: cubic-bezier(0, 0, .2, 1);\n     }\n \n+    .z-10\\\\! {\n+      z-index: 10 !important;\n+    }\n+\n     .ease-out\\\\! {\n       --tw-ease: var(--ease-out);\n       transition-timing-function: var(--ease-out) !important;\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16780"", ""pr_id"": 16780, ""issue_id"": 16732, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] 4.0.8 Vite plugin breaks if there are virtual imports like `unfonts.css`\n**What version of Tailwind CSS are you using?**\n\nFor example: v4.0.8\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nFor example: Vite v6.1.1\n\n**What version of Node.js are you using?**\n\nFor example: v20.13.1\n\n**What browser are you using?**\n\nFor example: Chrome\n\n**What operating system are you using?**\n\nFor example: macOS\n\n**Reproduction URL**\n\nhttps://github.com/octoper/vitejs-tailwind408-repro\n\n**Describe your issue**\n\nWhen upgraded to `@tailwindcss/vite` to `4.0.8` I started seeing the error below, this seem to occur when I'm importing a virtual module `unfonts.css` coming from the https://github.com/cssninjaStudio/unplugin-fonts Vite plugin. Downgrading to `4.0.7` fixes the issue\n\n```\nnode:internal/fs/promises:1028\n  path = getValidatedPath(path);\n         ^\n\nTypeError [ERR_INVALID_ARG_VALUE]: The argument 'path' must be a string, Uint8Array, or URL without null bytes. Received '/Users/octoper/projects/vitejs-tailwind408-repro/\\x00unfonts.css'\n    at Object.stat (node:internal/fs/promises:1028:10)\n    at C.addBuildDependency (file:///Users/octoper/projects/vitejs-tailwind408-repro/node_modules/@tailwindcss/vite/dist/index.mjs:1:5234)\n    at C.generate (file:///Users/octoper/projects/vitejs-tailwind408-repro/node_modules/@tailwindcss/vite/dist/index.mjs:1:3810)\n    at TransformPluginContext.transform (file:///Users/octoper/projects/vitejs-tailwind408-repro/node_modules/@tailwindcss/vite/dist/index.mjs:1:1967)\n    at EnvironmentPluginContainer.transform (file:///Users/octoper/projects/vitejs-tailwind408-repro/node_modules/vite/dist/node/chunks/dep-Cg8OuIew.js:48466:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async loadAndTransform (file:///Users/octoper/projects/vitejs-tailwind408-repro/node_modules/vite/dist/node/chunks/dep-Cg8OuIew.js:42166:27) {\n  code: 'ERR_INVALID_ARG_VALUE'\n}\n```\n"", ""issue_word_count"": 283, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/virtual-modules.test.ts"", ""packages/@tailwindcss-vite/src/index.ts""], ""pr_changed_test_files"": [""integrations/vite/virtual-modules.test.ts""], ""base_commit"": ""37ea0c34930060eacef8995931a43cdf8d7ef128"", ""head_commit"": ""545ae0116de39dd0b1ebc4ba76323c2495266563"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16780"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16780"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-25T10:29:58.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex b75932023c29..5a5742b7eb40 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -13,6 +13,10 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - _Experimental_: Add `user-valid` and `user-invalid` variants ([#12370](https://github.com/tailwindlabs/tailwindcss/pull/12370))\n - _Experimental_: Add `wrap-anywhere`, `wrap-break-word`, and `wrap-normal` utilities ([#12128](https://github.com/tailwindlabs/tailwindcss/pull/12128))\n \n+### Fixed\n+\n+- Vite: Don't crash when importing a virtual module in JavaScript that ends in `.css` ([#16780](https://github.com/tailwindlabs/tailwindcss/pull/16780))\n+\n ## [4.0.8] - 2025-02-21\n \n ### Added\n\ndiff --git a/packages/@tailwindcss-vite/src/index.ts b/packages/@tailwindcss-vite/src/index.ts\nindex 8e3d2348ea16..2a7c933e6340 100644\n--- a/packages/@tailwindcss-vite/src/index.ts\n+++ b/packages/@tailwindcss-vite/src/index.ts\n@@ -202,8 +202,9 @@ class Root {\n   private candidates: Set<string> = new Set<string>()\n \n   // List of all build dependencies (e.g. imported  stylesheets or plugins) and\n-  // their last modification timestamp\n-  private buildDependencies = new Map<string, number>()\n+  // their last modification timestamp. If no mtime can be found, we need to\n+  // assume the file has always changed.\n+  private buildDependencies = new Map<string, number | null>()\n \n   constructor(\n     private id: string,\n@@ -334,14 +335,22 @@ class Root {\n   }\n \n   private async addBuildDependency(path: string) {\n-    let stat = await fs.stat(path)\n-    this.buildDependencies.set(path, stat.mtimeMs)\n+    let mtime: number | null = null\n+    try {\n+      mtime = (await fs.stat(path)).mtimeMs\n+    } catch {}\n+    this.buildDependencies.set(path, mtime)\n   }\n \n   private async requiresBuild(): Promise<boolean> {\n     for (let [path, mtime] of this.buildDependencies) {\n-      let stat = await fs.stat(path)\n-      if (stat.mtimeMs > mtime) {\n+      if (mtime === null) return true\n+      try {\n+        let stat = await fs.stat(path)\n+        if (stat.mtimeMs > mtime) {\n+          return true\n+        }\n+      } catch {\n         return true\n       }\n     }\n"", ""test_patch"": ""diff --git a/integrations/vite/virtual-modules.test.ts b/integrations/vite/virtual-modules.test.ts\nnew file mode 100644\nindex 000000000000..12eadb6c715b\nBinary files /dev/null and b/integrations/vite/virtual-modules.test.ts differ\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16668"", ""pr_id"": 16668, ""issue_id"": 16664, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Important modifier with transition utilities like `ease-out!` got error\n**What version of Tailwind CSS are you using?**\n\nv3.4.1\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nNextjs 14.3.0\n\n**What version of Node.js are you using?**\n\nv20.0.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nHere's a minimal reproduction on Tailwind Play:\n[https://play.tailwindcss.com/pMH7Qk3QdS](https://play.tailwindcss.com/pMH7Qk3QdS)\n\n**Describe your issue**\n\nWhen using the important modifier with transition utilities like `ease-out!`, it generates invalid CSS:\n\n```css\n.ease-out\\! {\n    --tw-ease: var(--ease-out) !important;\n    transition-timing-function: var(--ease-out) !important;\n}\n```\n\n![Image](https://github.com/user-attachments/assets/e9be6714-4a02-4920-9204-a4e98bd9bdfd)\n\nThe issue is that `--tw-ease: var(--ease-out) !important;` is an invalid CSS rule because CSS custom properties (variables) cannot have `!important` modifiers. This makes the utility class unusable.\n\nExpected behavior:\nThe `!important` modifier should only be applied to the actual CSS property (`transition-timing-function`) and not to the CSS custom property declaration.\n\nThe correct output should be:\n\n```css\n.ease-out\\! {\n    --tw-ease: var(--ease-out);\n    transition-timing-function: var(--ease-out) !important;\n}\n```\n\n"", ""issue_word_count"": 204, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/compile.ts"", ""packages/tailwindcss/src/important.test.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/important.test.ts""], ""base_commit"": ""61af484ff4f34464b317895598c49966c132b410"", ""head_commit"": ""69ef808ed38a4f669407f0e24a60cfe78656d670"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16668"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16668"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-19T17:20:09.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex b46318bad591..46d3ea3b17c7 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -11,6 +11,10 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - _Experimental_: Add `user-valid` and `user-invalid` variants ([#12370](https://github.com/tailwindlabs/tailwindcss/pull/12370))\n \n+### Fixed\n+\n+- Remove invalid `!important` on CSS variable declarations ([#16668](https://github.com/tailwindlabs/tailwindcss/pull/16668))\n+\n ## [4.0.7] - 2025-02-18\n \n ### Fixed\n\ndiff --git a/packages/tailwindcss/src/compile.ts b/packages/tailwindcss/src/compile.ts\nindex e13f74c01b92..6b48073b5823 100644\n--- a/packages/tailwindcss/src/compile.ts\n+++ b/packages/tailwindcss/src/compile.ts\n@@ -300,7 +300,7 @@ function applyImportant(ast: AstNode[]): void {\n       continue\n     }\n \n-    if (node.kind === 'declaration') {\n+    if (node.kind === 'declaration' && node.property[0] !== '-' && node.property[1] !== '-') {\n       node.important = true\n     } else if (node.kind === 'rule' || node.kind === 'at-rule') {\n       applyImportant(node.nodes)\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/important.test.ts b/packages/tailwindcss/src/important.test.ts\nindex 8867062e8ac5..bb939ebafd06 100644\n--- a/packages/tailwindcss/src/important.test.ts\n+++ b/packages/tailwindcss/src/important.test.ts\n@@ -1,5 +1,6 @@\n import { expect, test } from 'vitest'\n import { compile } from '.'\n+import { compileCss } from './test-utils/run'\n \n const css = String.raw\n \n@@ -87,3 +88,31 @@ test('Utilities can be wrapped with a selector and marked as important', async (\n     \""\n   `)\n })\n+\n+test('variables in utilities should not be marked as important', async () => {\n+  expect(\n+    await compileCss(\n+      css`\n+        @theme {\n+          --ease-out: cubic-bezier(0, 0, 0.2, 1);\n+        }\n+        @tailwind utilities;\n+      `,\n+      ['ease-out!'],\n+    ),\n+  ).toMatchInlineSnapshot(`\n+    \"":root, :host {\n+      --ease-out: cubic-bezier(0, 0, .2, 1);\n+    }\n+\n+    .ease-out\\\\! {\n+      --tw-ease: var(--ease-out);\n+      transition-timing-function: var(--ease-out) !important;\n+    }\n+\n+    @property --tw-ease {\n+      syntax: \""*\"";\n+      inherits: false\n+    }\""\n+  `)\n+})\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16507"", ""pr_id"": 16507, ""issue_id"": 16171, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] upgrade does not work for dark mode variant with media query\n**What version of Tailwind CSS are you using?**\n\nv4.0.3\n\n**What version of Node.js are you using?**\n\nv23.7.0\n\n**What operating system are you using?**\n\nArch Linux\n\n**Reproduction URL**\n\nhttps://github.com/fiws/tailwind-issue-f1\n\n**Describe your issue**\n\nAfter running `npx @tailwindcss/upgrade@next`, my \""dark\"" theme config in the old tailwind.config.js was transformed into `@custom-variant dark (@media not print { .dark & });` this does not work and appears to be invalid syntax. See below for details:\n\n### before\n\nhttps://github.com/fiws/tailwind-issue-f1/blob/676604340b5ad3ef2384ea86ab79d755a82dfb40/tailwind.config.js#L7\n\n```ts\n// tailwind.config.js\ndarkMode: [\""variant\"", \""@media not print { .dark & }\""],\n```\n\n![Image](https://github.com/user-attachments/assets/ac7a432a-32cd-410e-8959-7a755de023eb)\n\n\n### after\n\nhttps://github.com/fiws/tailwind-issue-f1/blob/main/src/index.css#L3\n\n```css\n@custom-variant dark (@media not print { .dark & });\n```\n\n![Image](https://github.com/user-attachments/assets/67e3a405-eebb-45aa-a9fb-2536f2750034)\n\n![Image](https://github.com/user-attachments/assets/5148f7e3-7f8f-4396-8c2b-639f1411a977)\n\n--- \n\nI also have no idea what to correct syntax is.."", ""issue_word_count"": 186, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/upgrade/js-config.test.ts"", ""packages/@tailwindcss-upgrade/src/migrate-js-config.ts""], ""pr_changed_test_files"": [""integrations/upgrade/js-config.test.ts""], ""base_commit"": ""dec6c8ca51d2e9ca4e4f03c384f81572bd37fa7b"", ""head_commit"": ""7f5c46ab1c533c16427ae20eb63dfcc04e043506"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16507"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16507"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-14T15:48:53.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex cce3e765b638..22868c5c4863 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -21,6 +21,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure drop shadow utilities don't inherit unexpectedly ([#16471](https://github.com/tailwindlabs/tailwindcss/pull/16471))\n - Export backwards compatible config and plugin types from `tailwindcss/plugin` ([#16505](https://github.com/tailwindlabs/tailwindcss/pull/16505))\n - Upgrade: Report errors when updating dependencies ([#16504](https://github.com/tailwindlabs/tailwindcss/pull/16504))\n+- Upgrade: Ensure a `darkMode` JS config setting with block syntax converts to use `@slot` ([#16507](https://github.com/tailwindlabs/tailwindcss/pull/16507))\n \n ## [4.0.6] - 2025-02-10\n \n\ndiff --git a/packages/@tailwindcss-upgrade/src/migrate-js-config.ts b/packages/@tailwindcss-upgrade/src/migrate-js-config.ts\nindex c05ee6babebe..ac0a71a15e4b 100644\n--- a/packages/@tailwindcss-upgrade/src/migrate-js-config.ts\n+++ b/packages/@tailwindcss-upgrade/src/migrate-js-config.ts\n@@ -196,7 +196,7 @@ async function migrateTheme(\n }\n \n function migrateDarkMode(unresolvedConfig: Config & { darkMode: any }): string {\n-  let variant: string = ''\n+  let variant: string | string[] = ''\n   let addVariant = (_name: string, _variant: string) => (variant = _variant)\n   let config = () => unresolvedConfig.darkMode\n   darkModePlugin({ config, addVariant })\n@@ -204,7 +204,30 @@ function migrateDarkMode(unresolvedConfig: Config & { darkMode: any }): string {\n   if (variant === '') {\n     return ''\n   }\n-  return `\\n@tw-bucket custom-variant {\\n@custom-variant dark (${variant});\\n}\\n`\n+\n+  if (!Array.isArray(variant)) {\n+    variant = [variant]\n+  }\n+\n+  if (variant.length === 1 && !variant[0].includes('{')) {\n+    return `\\n@tw-bucket custom-variant {\\n@custom-variant dark (${variant[0]});\\n}\\n`\n+  }\n+\n+  let customVariant = ''\n+  for (let variantName of variant) {\n+    // Convert to the block syntax if a block is used\n+    if (variantName.includes('{')) {\n+      customVariant += variantName.replace('}', '{ @slot }}') + '\\n'\n+    } else {\n+      customVariant += variantName + '{ @slot }\\n'\n+    }\n+  }\n+\n+  if (customVariant !== '') {\n+    return `\\n@tw-bucket custom-variant {\\n@custom-variant dark {${customVariant}};\\n}\\n`\n+  }\n+\n+  return ''\n }\n \n // Returns a string identifier used to section theme declarations\n"", ""test_patch"": ""diff --git a/integrations/upgrade/js-config.test.ts b/integrations/upgrade/js-config.test.ts\nindex 8d61bc2853c6..b667a3f0940b 100644\n--- a/integrations/upgrade/js-config.test.ts\n+++ b/integrations/upgrade/js-config.test.ts\n@@ -318,6 +318,14 @@ test(\n         import customPlugin from './custom-plugin'\n \n         export default {\n+          darkMode: [\n+            'variant',\n+            [\n+              '@media not print { .dark & }',\n+              '@media not eink { .dark & }',\n+              '&:where(.dark, .dark *)',\n+            ],\n+          ],\n           plugins: [\n             typography,\n             customPlugin({\n@@ -379,6 +387,22 @@ test(\n         is-arr-mixed: null, true, false, 1234567, 1.35, 'foo', 'bar', 'true';\n       }\n \n+      @custom-variant dark {\n+        @media not print {\n+          .dark & {\n+            @slot;\n+          }\n+        }\n+        @media not eink {\n+          .dark & {\n+            @slot;\n+          }\n+        }\n+        &:where(.dark, .dark *) {\n+          @slot;\n+        }\n+      }\n+\n       /*\n         The default border color has changed to \\`currentColor\\` in Tailwind CSS v4,\n         so we've added these compatibility styles to make sure everything still\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16471"", ""pr_id"": 16471, ""issue_id"": 16461, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Missing @property for --tw-drop-shadow\nWhen using a [filter](https://tailwindcss.com/docs/filter) utility, variables get declared via `@property` for all filter effects except for `drop-shadow`. It probably needs to be added to [this list](https://github.com/tailwindlabs/tailwindcss/blame/c80c0b5128f4997154ef58f062702306b5f8e608/packages/tailwindcss/src/utilities.ts#L3144).\n\nI also noticed that `backdrop-filter` is missing the corresponding `drop-shadow` utility but I couldn't get the effect to work with vanilla CSS so I guess it doesn't have any practical effect and this would explain why it was omitted."", ""issue_word_count"": 94, ""test_files_count"": 2, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts"", ""packages/tailwindcss/tests/ui.spec.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/tests/ui.spec.ts""], ""base_commit"": ""53749c3725c378337d7945c89d77b9437808e89c"", ""head_commit"": ""7ca2833b73161d9a2d94b7f8beaa0026798cb7d3"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16471"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16471"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-12T17:36:03.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex ebf58d2f7833..af1c57fdffa3 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -18,6 +18,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Show suggestions for fractions in IntelliSense ([#16353](https://github.com/tailwindlabs/tailwindcss/pull/16353))\n - Don\u2019t replace `_` in suggested theme keys ([#16433](https://github.com/tailwindlabs/tailwindcss/pull/16433))\n - Ensure `--default-outline-width` can be used to change the `outline-width` value of the `outline` utility\n+- Ensure drop shadow utilities don't inherit unexpectedly ([#16471](https://github.com/tailwindlabs/tailwindcss/pull/16471))\n \n ## [4.0.6] - 2025-02-10\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex c2dd524ab035..28bb0ce41dcd 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -3152,6 +3152,7 @@ export function createUtilities(theme: Theme) {\n         property('--tw-opacity'),\n         property('--tw-saturate'),\n         property('--tw-sepia'),\n+        property('--tw-drop-shadow'),\n       ])\n     }\n \n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 89a88346694d..90e12bf832ad 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -13407,6 +13407,11 @@ test('filter', async () => {\n     @property --tw-sepia {\n       syntax: \""*\"";\n       inherits: false\n+    }\n+\n+    @property --tw-drop-shadow {\n+      syntax: \""*\"";\n+      inherits: false\n     }\""\n   `)\n   expect(\n\ndiff --git a/packages/tailwindcss/tests/ui.spec.ts b/packages/tailwindcss/tests/ui.spec.ts\nindex 53d8a71c9a48..64057877b7bf 100644\n--- a/packages/tailwindcss/tests/ui.spec.ts\n+++ b/packages/tailwindcss/tests/ui.spec.ts\n@@ -410,6 +410,35 @@ test('inset shadow colors', async ({ page }) => {\n   )\n })\n \n+test('filter', async ({ page }) => {\n+  let { getPropertyValue } = await render(\n+    page,\n+    html`\n+      <div\n+        id=\""a\""\n+        class=\""blur-md brightness-50 contrast-50 drop-shadow-md grayscale hue-rotate-180 invert saturate-50 sepia\""\n+      >\n+        <div id=\""b\"" class=\""contrast-100\""></div>\n+      </div>\n+    `,\n+  )\n+\n+  expect(await getPropertyValue('#a', 'filter')).toEqual(\n+    [\n+      'blur(12px)',\n+      'brightness(0.5)',\n+      'contrast(0.5)',\n+      'grayscale(1)',\n+      'hue-rotate(180deg)',\n+      'invert(1)',\n+      'saturate(0.5)',\n+      'sepia(1)',\n+      'drop-shadow(rgba(0, 0, 0, 0.12) 0px 3px 3px)',\n+    ].join(' '),\n+  )\n+  expect(await getPropertyValue('#b', 'filter')).toEqual('contrast(1)')\n+})\n+\n test('outline style is optional', async ({ page }) => {\n   let { getPropertyValue } = await render(\n     page,\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16457"", ""pr_id"": 16457, ""issue_id"": 16287, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Source glob pattern `./**/*.{js,ts,jsx,tsx,mdx}` does not match Next.js-style catchall route segments like `[...slug]`.\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.3\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\n- Next.js 15.1.6\n- PostCSS 8\n\n**What version of Node.js are you using?**\n\n23.5.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nhttps://github.com/nicksergeant/tailwind-v4-dynamic-params/\n\n**Describe your issue**\n\nIf you are [disabling automatic detection](https://tailwindcss.com/docs/detecting-classes-in-source-files#disabling-automatic-detection) with:\n\n```\n@import 'tailwindcss' source(none);\n```\n\nand then configuring a glob pattern like [this](https://github.com/nicksergeant/tailwind-v4-dynamic-params/blob/main/app/globals.css#L1-L3):\n\n```\n@source './**/*.{js,ts,jsx,tsx,mdx}';\n```\n\nSource files in directories such as `[...slug]` will not be picked up: https://github.com/nicksergeant/tailwind-v4-dynamic-params/blob/main/app/%5B...slug%5D/page.tsx\n\nI'm not sure if this is a bug per se, and I have found this workaround:\n\n```\n@source './**/*.{js,ts,jsx,tsx,mdx}';\n@source './[[]**[]]/*.{js,ts,jsx,tsx,mdx}';\n```\n\nExample page showing missing style: https://github.com/nicksergeant/tailwind-v4-dynamic-params/blob/main/app/%5B...slug%5D/page.tsx#L4\n\nBut I was surprised that `./**/*` was not working to pick those up."", ""issue_word_count"": 266, ""test_files_count"": 2, ""non_test_files_count"": 5, ""pr_changed_files"": [""CHANGELOG.md"", ""Cargo.lock"", ""crates/oxide/Cargo.toml"", ""crates/oxide/src/glob.rs"", ""crates/oxide/src/lib.rs"", ""crates/oxide/tests/scanner.rs"", ""integrations/postcss/next.test.ts""], ""pr_changed_test_files"": [""crates/oxide/tests/scanner.rs"", ""integrations/postcss/next.test.ts""], ""base_commit"": ""f0141084c22e0a9656140d887e7369d1d2fad18a"", ""head_commit"": ""a6ec08cc0293590f46a0023d85e2b132cd7e470f"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16457"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16457"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-18T10:51:58.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 05fee5027c13..3ad10731b5cf 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -21,6 +21,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure drop shadow utilities don't inherit unexpectedly ([#16471](https://github.com/tailwindlabs/tailwindcss/pull/16471))\n - Export backwards compatible config and plugin types from `tailwindcss/plugin` ([#16505](https://github.com/tailwindlabs/tailwindcss/pull/16505))\n - Ensure JavaScript plugins that emit nested rules referencing to the utility name work as expected ([#16539](https://github.com/tailwindlabs/tailwindcss/pull/16539))\n+- Ensure that Next.js splat routes are automatically scanned for classes ([#16457](https://github.com/tailwindlabs/tailwindcss/pull/16457))\n - Pin exact versions of `tailwindcss` and `@tailwindcss/*` ([#16623](https://github.com/tailwindlabs/tailwindcss/pull/16623))\n - Upgrade: Report errors when updating dependencies ([#16504](https://github.com/tailwindlabs/tailwindcss/pull/16504))\n - Upgrade: Ensure a `darkMode` JS config setting with block syntax converts to use `@slot` ([#16507](https://github.com/tailwindlabs/tailwindcss/pull/16507))\n\ndiff --git a/Cargo.lock b/Cargo.lock\nindex eb9602407af0..f742de3eefb0 100644\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -11,6 +11,12 @@ dependencies = [\n  \""memchr\"",\n ]\n \n+[[package]]\n+name = \""arrayvec\""\n+version = \""0.7.6\""\n+source = \""registry+https://github.com/rust-lang/crates.io-index\""\n+checksum = \""7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\""\n+\n [[package]]\n name = \""bexpand\""\n version = \""1.2.0\""\n@@ -142,16 +148,19 @@ dependencies = [\n ]\n \n [[package]]\n-name = \""fastrand\""\n-version = \""2.1.1\""\n+name = \""fast-glob\""\n+version = \""0.4.3\""\n source = \""registry+https://github.com/rust-lang/crates.io-index\""\n-checksum = \""e8c02a5121d4ea3eb16a80748c74f5549a5665e4c21333c6098f283870fbdea6\""\n+checksum = \""0eca69ef247d19faa15ac0156968637440824e5ff22baa5ee0cd35b2f7ea6a0f\""\n+dependencies = [\n+ \""arrayvec\"",\n+]\n \n [[package]]\n-name = \""glob-match\""\n-version = \""0.2.1\""\n+name = \""fastrand\""\n+version = \""2.1.1\""\n source = \""registry+https://github.com/rust-lang/crates.io-index\""\n-checksum = \""9985c9503b412198aa4197559e9a318524ebc4519c229bfa05a535828c950b9d\""\n+checksum = \""e8c02a5121d4ea3eb16a80748c74f5549a5665e4c21333c6098f283870fbdea6\""\n \n [[package]]\n name = \""globset\""\n@@ -524,7 +533,7 @@ dependencies = [\n  \""bstr\"",\n  \""crossbeam\"",\n  \""dunce\"",\n- \""glob-match\"",\n+ \""fast-glob\"",\n  \""globwalk\"",\n  \""ignore\"",\n  \""log\"",\n\ndiff --git a/crates/oxide/Cargo.toml b/crates/oxide/Cargo.toml\nindex 287e0cd61092..96d847b96e02 100644\n--- a/crates/oxide/Cargo.toml\n+++ b/crates/oxide/Cargo.toml\n@@ -16,7 +16,7 @@ walkdir = \""2.5.0\""\n ignore = \""0.4.23\""\n dunce = \""1.0.5\""\n bexpand = \""1.2.0\""\n-glob-match = \""0.2.1\""\n+fast-glob = \""0.4.3\""\n \n [dev-dependencies]\n tempfile = \""3.13.0\""\n\ndiff --git a/crates/oxide/src/glob.rs b/crates/oxide/src/glob.rs\nindex 92c83908bc3a..6c7676ece953 100644\n--- a/crates/oxide/src/glob.rs\n+++ b/crates/oxide/src/glob.rs\n@@ -1,5 +1,5 @@\n+use fast_glob::glob_match;\n use fxhash::{FxHashMap, FxHashSet};\n-use glob_match::glob_match;\n use std::path::{Path, PathBuf};\n use tracing::event;\n \n@@ -173,7 +173,7 @@ pub fn path_matches_globs(path: &Path, globs: &[GlobEntry]) -> bool {\n \n     globs\n         .iter()\n-        .any(|g| glob_match(&format!(\""{}/{}\"", g.base, g.pattern), &path))\n+        .any(|g| glob_match(&format!(\""{}/{}\"", g.base, g.pattern), path.as_bytes()))\n }\n \n #[cfg(test)]\n\ndiff --git a/crates/oxide/src/lib.rs b/crates/oxide/src/lib.rs\nindex 557e87ef5f78..03fe9e8f190f 100644\n--- a/crates/oxide/src/lib.rs\n+++ b/crates/oxide/src/lib.rs\n@@ -4,9 +4,9 @@ use crate::scanner::allowed_paths::resolve_paths;\n use crate::scanner::detect_sources::DetectSources;\n use bexpand::Expression;\n use bstr::ByteSlice;\n+use fast_glob::glob_match;\n use fxhash::{FxHashMap, FxHashSet};\n use glob::optimize_patterns;\n-use glob_match::glob_match;\n use paths::Path;\n use rayon::prelude::*;\n use scanner::allowed_paths::read_dir;\n"", ""test_patch"": ""diff --git a/crates/oxide/tests/scanner.rs b/crates/oxide/tests/scanner.rs\nindex e14bfc7316f7..6f30ee5222ec 100644\n--- a/crates/oxide/tests/scanner.rs\n+++ b/crates/oxide/tests/scanner.rs\n@@ -415,6 +415,32 @@ mod scanner {\n         assert_eq!(candidates, vec![\""content-['foo.styl']\""]);\n     }\n \n+    #[test]\n+    fn it_should_scan_next_dynamic_folders() {\n+        let candidates = scan_with_globs(\n+            &[\n+                // We know that `.styl` extensions are ignored, so they are not covered by auto content\n+                // detection.\n+                (\""app/[slug]/page.styl\"", \""content-['[slug]']\""),\n+                (\""app/[...slug]/page.styl\"", \""content-['[...slug]']\""),\n+                (\""app/[[...slug]]/page.styl\"", \""content-['[[...slug]]']\""),\n+                (\""app/(theme)/page.styl\"", \""content-['(theme)']\""),\n+            ],\n+            vec![\""./**/*.{styl}\""],\n+        )\n+        .1;\n+\n+        assert_eq!(\n+            candidates,\n+            vec![\n+                \""content-['(theme)']\"",\n+                \""content-['[...slug]']\"",\n+                \""content-['[[...slug]]']\"",\n+                \""content-['[slug]']\"",\n+            ],\n+        );\n+    }\n+\n     #[test]\n     fn it_should_scan_absolute_paths() {\n         // Create a temporary working directory\n\ndiff --git a/integrations/postcss/next.test.ts b/integrations/postcss/next.test.ts\nindex b133a9752840..48c6a18dfcc0 100644\n--- a/integrations/postcss/next.test.ts\n+++ b/integrations/postcss/next.test.ts\n@@ -162,3 +162,89 @@ describe.each(['turbo', 'webpack'])('%s', (bundler) => {\n     },\n   )\n })\n+\n+test(\n+  'should scan dynamic route segments',\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""dependencies\"": {\n+            \""react\"": \""^18\"",\n+            \""react-dom\"": \""^18\"",\n+            \""next\"": \""^14\""\n+          },\n+          \""devDependencies\"": {\n+            \""@tailwindcss/postcss\"": \""workspace:^\"",\n+            \""tailwindcss\"": \""workspace:^\""\n+          }\n+        }\n+      `,\n+      'postcss.config.mjs': js`\n+        /** @type {import('postcss-load-config').Config} */\n+        const config = {\n+          plugins: {\n+            '@tailwindcss/postcss': {},\n+          },\n+        }\n+\n+        export default config\n+      `,\n+      'next.config.mjs': js`\n+        /** @type {import('next').NextConfig} */\n+        const nextConfig = {}\n+\n+        export default nextConfig\n+      `,\n+      'app/a/[slug]/page.js': js`\n+        export default function Page() {\n+          return <h1 className=\""content-['[slug]']\"">Hello, Next.js!</h1>\n+        }\n+      `,\n+      'app/b/[...slug]/page.js': js`\n+        export default function Page() {\n+          return <h1 className=\""content-['[...slug]']\"">Hello, Next.js!</h1>\n+        }\n+      `,\n+      'app/c/[[...slug]]/page.js': js`\n+        export default function Page() {\n+          return <h1 className=\""content-['[[...slug]]']\"">Hello, Next.js!</h1>\n+        }\n+      `,\n+      'app/d/(theme)/page.js': js`\n+        export default function Page() {\n+          return <h1 className=\""content-['(theme)']\"">Hello, Next.js!</h1>\n+        }\n+      `,\n+      'app/layout.js': js`\n+        import './globals.css'\n+\n+        export default function RootLayout({ children }) {\n+          return (\n+            <html>\n+              <body>{children}</body>\n+            </html>\n+          )\n+        }\n+      `,\n+      'app/globals.css': css`\n+        @import 'tailwindcss/utilities' source(none);\n+        @source './**/*.{js,ts,jsx,tsx,mdx}';\n+      `,\n+    },\n+  },\n+  async ({ fs, exec, expect }) => {\n+    await exec('pnpm next build')\n+\n+    let files = await fs.glob('.next/static/css/**/*.css')\n+    expect(files).toHaveLength(1)\n+    let [filename] = files[0]\n+\n+    await fs.expectFileToContain(filename, [\n+      candidate`content-['[slug]']`,\n+      candidate`content-['[...slug]']`,\n+      candidate`content-['[[...slug]]']`,\n+      candidate`content-['(theme)']`,\n+    ])\n+  },\n+)\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16433"", ""pr_id"": 16433, ""issue_id"": 1184, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Some kind of problem after today's update\nI look towards `autoprefixer`. It has been updated. And in my project only you and `postcss-preset-env` use it. But the problem may be due to another package. \r\n\r\nThe problem is shown in the screenshots below. I also attached two yarn.lock files - before and after the update.\r\n\r\n---\r\n\r\n### Before the update\r\n\r\n[yarn.lock](https://pastebin.com/raw/Ey7BUerw)\r\n\r\n<img width=\""200\"" alt=\""before\"" src=\""https://user-images.githubusercontent.com/2853419/67490286-ab7cbd80-f67b-11e9-9402-34aa78e48553.png\"">\r\n\r\n### After the update\r\n\r\n[yarn.lock](https://pastebin.com/raw/ZWNqBW34)\r\n\r\n<img width=\""200\"" alt=\""after\"" src=\""https://user-images.githubusercontent.com/2853419/67490310-b33c6200-f67b-11e9-91df-0cc9c95b5697.png\"">\r\n\r\n---\r\n\r\n[Comparison of two yarn.lock files](https://www.diffchecker.com/4SZVwrcF)\r\n\r\n---\r\n\r\nIt can be seen that some of the styles work.\r\n\r\nAnd judging by what I noticed - styles with a colon symbol do not work:\r\n\r\n```\r\nxs:text-xl\r\n```\r\n\r\nThe code is present in the .css file. But the inspector in the browser does not see these styles for the elements."", ""issue_word_count"": 175, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/intellisense.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/intellisense.test.ts""], ""base_commit"": ""aad440ecf6457bce7c56540a3c19b733916484ee"", ""head_commit"": ""5d6f195445cc651bc5f052bfa7d511ffa04c65d3"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16433"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16433"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-11T18:14:43.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 2987652bbced..06d27203950a 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Export `tailwindcss/lib/util/flattenColorPalette.js` for backward compatibility ([#16411](https://github.com/tailwindlabs/tailwindcss/pull/16411))\n - Fix sorting numeric utilities when they have different magnitudes ([#16414](https://github.com/tailwindlabs/tailwindcss/pull/16414))\n - Show suggestions for fractions in IntelliSense ([#16353](https://github.com/tailwindlabs/tailwindcss/pull/16353))\n+- Don\u2019t replace `_` in suggested theme keys ([#16433](https://github.com/tailwindlabs/tailwindcss/pull/16433))\n \n ## [4.0.6] - 2025-02-10\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 57e753be1dcf..ea9a39ec466b 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -220,9 +220,20 @@ export function createUtilities(theme: Theme) {\n    * Register list of suggestions for a class\n    */\n   function suggest(classRoot: string, defns: () => SuggestionDefinition[]) {\n+    /**\n+     * The alpha and beta releases used `_` in theme keys to represent a `.`. This meant we used\n+     * `--leading-1_5` instead of `--leading-1\\.5` to add utilities like `leading-1.5`.\n+     *\n+     * We prefer the use of the escaped dot now but still want to make sure suggestions for the\n+     * legacy key format still works as expected when surrounded by numbers.\n+     */\n+    const LEGACY_NUMERIC_KEY = /(\\d+)_(\\d+)/g\n+\n     function* resolve(themeKeys: ThemeKey[]) {\n       for (let value of theme.keysInNamespaces(themeKeys)) {\n-        yield value.replaceAll('_', '.')\n+        yield value.replace(LEGACY_NUMERIC_KEY, (_, a, b) => {\n+          return `${a}.${b}`\n+        })\n       }\n     }\n \n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/intellisense.test.ts b/packages/tailwindcss/src/intellisense.test.ts\nindex b95c843fd9d0..4a69aa5009ff 100644\n--- a/packages/tailwindcss/src/intellisense.test.ts\n+++ b/packages/tailwindcss/src/intellisense.test.ts\n@@ -526,3 +526,40 @@ test('Custom functional @utility', async () => {\n   expect(classNames).toContain('example-xs')\n   expect(classMap.get('example-xs')?.modifiers).toEqual(['foo', 'bar'])\n })\n+\n+test('Theme keys with underscores are suggested with underscores', async () => {\n+  let input = css`\n+    @import 'tailwindcss/utilities';\n+\n+    @theme {\n+      /* Disable the spacing scale */\n+      --spacing: initial;\n+\n+      /* This will get suggeted with a dot because its surrounded by numbers */\n+      --spacing-1_5: 1.5rem;\n+\n+      /* This will get suggeted with a dot  */\n+      --spacing-2\\.5: 1.5rem;\n+\n+      /* This will get suggeted with an underscore */\n+      --spacing-logo_margin: 0.875rem;\n+    }\n+  `\n+\n+  let design = await __unstable__loadDesignSystem(input, {\n+    loadStylesheet: async (_, base) => ({\n+      base,\n+      content: '@tailwind utilities;',\n+    }),\n+  })\n+\n+  let entries = design.getClassList().filter(([name]) => name.startsWith('p-'))\n+\n+  expect(entries).toContainEqual(['p-1.5', { modifiers: [] }])\n+  expect(entries).toContainEqual(['p-2.5', { modifiers: [] }])\n+  expect(entries).toContainEqual(['p-logo_margin', { modifiers: [] }])\n+\n+  expect(entries).not.toContainEqual(['p-1_5', { modifiers: [] }])\n+  expect(entries).not.toContainEqual(['p-2_5', { modifiers: [] }])\n+  expect(entries).not.toContainEqual(['p-logo.margin', { modifiers: [] }])\n+})\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16405"", ""pr_id"": 16405, ""issue_id"": 16404, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""@tailwindcss/upgrade replaces Nextjs Image placeholder blur property\nCurrent behavior:\n\n```diff\n<Image\n  src={image}\n-   placeholder='blur'\n+   placeholder='blur-sm'\n-   className='blur'\n+   className='blur-sm'\n/>\n```\n\nExpected behavior:\n\n```diff\n<Image\n  src={image}\n  placeholder='blur'\n-   className='blur'\n+   className='blur-sm'\n/>\n```"", ""issue_word_count"": 37, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/@tailwindcss-upgrade/src/template/codemods/legacy-classes.test.ts"", ""packages/@tailwindcss-upgrade/src/template/is-safe-migration.ts""], ""pr_changed_test_files"": [""packages/@tailwindcss-upgrade/src/template/codemods/legacy-classes.test.ts""], ""base_commit"": ""f678a7025fff9d1d74466df05326ed25383be39d"", ""head_commit"": ""e8a5b4004246e845f530249cfacb758308cbcc98"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16405"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16405"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-11T16:37:59.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex ddc452a3ee6b..c3ee57f18894 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -18,6 +18,10 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Revert change to no longer include theme variables that aren't used in compiled CSS ([#16403](https://github.com/tailwindlabs/tailwindcss/pull/16403))\n \n+### Fixed\n+\n+- Upgrade: Don't migrate `blur` to `blur-sm` when used with Next.js `<Image placeholder=\""blur\"" />` ([#16405](https://github.com/tailwindlabs/tailwindcss/pull/16405))\n+\n ## [4.0.5] - 2025-02-08\n \n ### Added\n\ndiff --git a/packages/@tailwindcss-upgrade/src/template/is-safe-migration.ts b/packages/@tailwindcss-upgrade/src/template/is-safe-migration.ts\nindex e0408d3e57b8..dc84d302290c 100644\n--- a/packages/@tailwindcss-upgrade/src/template/is-safe-migration.ts\n+++ b/packages/@tailwindcss-upgrade/src/template/is-safe-migration.ts\n@@ -10,6 +10,7 @@ const CONDITIONAL_TEMPLATE_SYNTAX = [\n   /x-if=['\""]$/,\n   /x-show=['\""]$/,\n ]\n+const NEXT_PLACEHOLDER_PROP = /placeholder=\\{?['\""]$/\n \n export function isSafeMigration(location: { contents: string; start: number; end: number }) {\n   let currentLineBeforeCandidate = ''\n@@ -63,5 +64,10 @@ export function isSafeMigration(location: { contents: string; start: number; end\n     }\n   }\n \n+  // Heuristic: Disallow Next.js Image `placeholder` prop\n+  if (NEXT_PLACEHOLDER_PROP.test(currentLineBeforeCandidate)) {\n+    return false\n+  }\n+\n   return true\n }\n"", ""test_patch"": ""diff --git a/packages/@tailwindcss-upgrade/src/template/codemods/legacy-classes.test.ts b/packages/@tailwindcss-upgrade/src/template/codemods/legacy-classes.test.ts\nindex f301deaa9dde..6b8bbe4c610f 100644\n--- a/packages/@tailwindcss-upgrade/src/template/codemods/legacy-classes.test.ts\n+++ b/packages/@tailwindcss-upgrade/src/template/codemods/legacy-classes.test.ts\n@@ -68,4 +68,9 @@ test('does not replace classes in invalid positions', async () => {\n   await shouldNotReplace(`<div v-show=\""shadow\""></div>\\n`)\n   await shouldNotReplace(`<div x-if=\""shadow\""></div>\\n`)\n   await shouldNotReplace(`<div style={{filter: 'drop-shadow(30px 10px 4px #4444dd)'}}/>\\n`)\n+\n+  // Next.js Image placeholder cases\n+  await shouldNotReplace(`<Image placeholder=\""blur\"" src=\""/image.jpg\"" />`, 'blur')\n+  await shouldNotReplace(`<Image placeholder={'blur'} src=\""/image.jpg\"" />`, 'blur')\n+  await shouldNotReplace(`<Image placeholder={blur} src=\""/image.jpg\"" />`, 'blur')\n })\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16376"", ""pr_id"": 16376, ""issue_id"": 16374, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4.0.5] Used css variables are removed from @keyframes\n**What version of Tailwind CSS are you using?**\n\nv4.0.5\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nGulp + Postcss\n\n**What version of Node.js are you using?**\n\nv20\n\n**What browser are you using?**\n\nBrave\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/4MlgazRExq?file=css\n\n**Describe your issue**\n\nGiven this setup\n```css\n@property --angle {\n  inherits: true;\n  initial-value: 0deg;\n  syntax: '<angle>';\n}\n\n@theme {\n  --animate-rotate-angle: rotate-angle 2s infinite linear;  \n  @keyframes rotate-angle {\n    to {\n      --angle: 360deg;\n    }\n  }    \n}\n```\n\nTW v4.0.5 removes the css var from the keyframe when the animation is used and generate the keyframe like this:\n\n```css\n@keyframes rotate-angle {\n  to {\n  }\n}\n``` "", ""issue_word_count"": 126, ""test_files_count"": 1, ""non_test_files_count"": 1, ""pr_changed_files"": [""packages/tailwindcss/src/ast.ts"", ""packages/tailwindcss/src/index.test.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/index.test.ts""], ""base_commit"": ""7bece4de7cad122829373423a709ee9554666a7c"", ""head_commit"": ""9e3637613d7ad5c200eb4de02c0b79f36ab4740c"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16376"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16376"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-21T09:55:30.000Z"", ""patch"": ""diff --git a/packages/tailwindcss/src/ast.ts b/packages/tailwindcss/src/ast.ts\nindex 36194d9f41fc..5a23f4e48fb2 100644\n--- a/packages/tailwindcss/src/ast.ts\n+++ b/packages/tailwindcss/src/ast.ts\n@@ -286,7 +286,9 @@ export function optimizeAst(\n \n       // Track variables defined in `@theme`\n       if (context.theme && node.property[0] === '-' && node.property[1] === '-') {\n-        cssThemeVariables.get(parent).add(node)\n+        if (!context.keyframes) {\n+          cssThemeVariables.get(parent).add(node)\n+        }\n       }\n \n       // Track used CSS variables\n@@ -354,6 +356,10 @@ export function optimizeAst(\n \n     // AtRule\n     else if (node.kind === 'at-rule') {\n+      if (node.name === '@keyframes') {\n+        context = { ...context, keyframes: true }\n+      }\n+\n       let copy = { ...node, nodes: [] }\n       for (let child of node.nodes) {\n         transform(child, copy.nodes, context, depth + 1)\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex 67b6c3c53770..d5b71c6b6a5c 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -1613,6 +1613,44 @@ describe('Parsing theme values from CSS', () => {\n     `)\n   })\n \n+  // https://github.com/tailwindlabs/tailwindcss/issues/16374\n+  test('custom properties in keyframes preserved', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @theme {\n+            --animate-foo: used 1s infinite;\n+\n+            @keyframes used {\n+              to {\n+                --other: var(--angle);\n+                --angle: 360deg;\n+              }\n+            }\n+          }\n+\n+          @tailwind utilities;\n+        `,\n+        ['animate-foo'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"":root, :host {\n+        --animate-foo: used 1s infinite;\n+      }\n+\n+      .animate-foo {\n+        animation: var(--animate-foo);\n+      }\n+\n+      @keyframes used {\n+        to {\n+          --other: var(--angle);\n+          --angle: 360deg;\n+        }\n+      }\""\n+    `)\n+  })\n+\n   test('keyframes are generated when used in an animation using `@theme inline`', async () => {\n     expect(\n       await compileCss(\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16353"", ""pr_id"": 16353, ""issue_id"": 1178, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[Feature Proposal] Alternative way to declare a plugin to optionally accept options\nRight now, if a plugin accepts options (other than values that it pulls from the config/theme), instead of directly exporting the plugin function, it needs to export a function that takes options as an argument and returns the real plugin. Which means that even if you don't want to pass any options and just use the defaults, you still have to import the plugin with an extra set of parentheses, e.g.:\r\n\r\n```js\r\nplugins: [\r\n  require('tailwindcss-transforms')(),\r\n]\r\n```\r\n\r\n...instead of the simpler, nicer-looking, and [more consistent with Tailwind's documentation](https://tailwindcss.com/docs/configuration/#plugins):\r\n\r\n```js\r\nplugins: [\r\n  require('tailwindcss-transforms'),\r\n]\r\n```\r\n\r\nTo make this possible, Adam [suggested](https://github.com/benface/tailwindcss-filters/issues/2#issuecomment-480781001) the following PostCSS-inspired syntax before:\r\n\r\n```js\r\ntailwindcss.plugin('filters', function (options) {\r\n  return function ({ addUtilities }) {\r\n    // ...\r\n  }\r\n})\r\n```\r\n\r\n> This would let us type check on the return value of `plugin` and know to just invoke the underlying function if no options were passed. Wouldn't be a breaking change either way."", ""issue_word_count"": 179, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap"", ""packages/tailwindcss/src/intellisense.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap""], ""base_commit"": ""f678a7025fff9d1d74466df05326ed25383be39d"", ""head_commit"": ""711b50df5c5a1892a9bc27195a32f123d3d64093"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16353"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16353"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-11T17:03:37.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex ddc452a3ee6b..e81f75b988f4 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -11,6 +11,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Export `tailwindcss/lib/util/flattenColorPalette.js` for backward compatibility ([#16411](https://github.com/tailwindlabs/tailwindcss/pull/16411))\n - Fix sorting numeric utilities when they have different magnitudes ([#16414](https://github.com/tailwindlabs/tailwindcss/pull/16414))\n+- Show suggestions for fractions in IntelliSense ([#16353](https://github.com/tailwindlabs/tailwindcss/pull/16353))\n \n ## [4.0.6] - 2025-02-10\n \n\ndiff --git a/packages/tailwindcss/src/intellisense.ts b/packages/tailwindcss/src/intellisense.ts\nindex 006a0195e953..ca9c1a386099 100644\n--- a/packages/tailwindcss/src/intellisense.ts\n+++ b/packages/tailwindcss/src/intellisense.ts\n@@ -2,19 +2,34 @@ import { styleRule, walkDepth } from './ast'\n import { applyVariant } from './compile'\n import type { DesignSystem } from './design-system'\n import { compare } from './utils/compare'\n+import { DefaultMap } from './utils/default-map'\n \n interface ClassMetadata {\n   modifiers: string[]\n }\n \n+export type ClassItem = {\n+  name: string\n+  utility: string\n+  fraction: boolean\n+  modifiers: string[]\n+}\n+\n export type ClassEntry = [string, ClassMetadata]\n \n+const IS_FRACTION = /^\\d+\\/\\d+$/\n+\n export function getClassList(design: DesignSystem): ClassEntry[] {\n-  let list: [string, ClassMetadata][] = []\n+  let list: ClassItem[] = []\n \n   // Static utilities only work as-is\n   for (let utility of design.utilities.keys('static')) {\n-    list.push([utility, { modifiers: [] }])\n+    list.push({\n+      name: utility,\n+      utility,\n+      fraction: false,\n+      modifiers: [],\n+    })\n   }\n \n   // Functional utilities have their own list of completions\n@@ -23,20 +38,99 @@ export function getClassList(design: DesignSystem): ClassEntry[] {\n \n     for (let group of completions) {\n       for (let value of group.values) {\n+        let fraction = value !== null && IS_FRACTION.test(value)\n+\n         let name = value === null ? utility : `${utility}-${value}`\n \n-        list.push([name, { modifiers: group.modifiers }])\n+        list.push({\n+          name,\n+          utility,\n+          fraction,\n+          modifiers: group.modifiers,\n+        })\n \n         if (group.supportsNegative) {\n-          list.push([`-${name}`, { modifiers: group.modifiers }])\n+          list.push({\n+            name: `-${name}`,\n+            utility: `-${utility}`,\n+            fraction,\n+            modifiers: group.modifiers,\n+          })\n         }\n       }\n     }\n   }\n \n-  list.sort((a, b) => compare(a[0], b[0]))\n+  if (list.length === 0) return []\n \n-  return list\n+  // Sort utilities by their class name\n+  list.sort((a, b) => compare(a.name, b.name))\n+\n+  let entries = sortFractionsLast(list)\n+\n+  return entries\n+}\n+\n+function sortFractionsLast(list: ClassItem[]) {\n+  type Bucket = {\n+    utility: string\n+    items: ClassItem[]\n+  }\n+\n+  // 1. Create \""buckets\"" for each utility group\n+  let buckets: Bucket[] = []\n+  let current: Bucket | null = null\n+\n+  // 2. Determine the last bucket for each utility group\n+  let lastUtilityBucket = new Map<string, Bucket>()\n+\n+  // 3. Collect all fractions in a given utility group\n+  let fractions = new DefaultMap<string, ClassItem[]>(() => [])\n+\n+  for (let item of list) {\n+    let { utility, fraction } = item\n+\n+    if (!current) {\n+      current = { utility, items: [] }\n+      lastUtilityBucket.set(utility, current)\n+    }\n+\n+    if (utility !== current.utility) {\n+      buckets.push(current)\n+\n+      current = { utility, items: [] }\n+      lastUtilityBucket.set(utility, current)\n+    }\n+\n+    if (fraction) {\n+      fractions.get(utility).push(item)\n+    } else {\n+      current.items.push(item)\n+    }\n+  }\n+\n+  if (current && buckets[buckets.length - 1] !== current) {\n+    buckets.push(current)\n+  }\n+\n+  // 4. Add fractions to their respective last utility buckets\n+  for (let [utility, items] of fractions) {\n+    let bucket = lastUtilityBucket.get(utility)\n+    if (!bucket) continue\n+\n+    bucket.items.push(...items)\n+  }\n+\n+  // 5. Flatten the buckets into a single list\n+  let entries: ClassEntry[] = []\n+\n+  for (let bucket of buckets) {\n+    for (let entry of bucket.items) {\n+      entries.push([entry.name, { modifiers: entry.modifiers }])\n+    }\n+  }\n+\n+  return entries\n }\n \n interface SelectorOptions {\n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 3dadacac113d..57e753be1dcf 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -42,6 +42,7 @@ type SuggestionDefinition =\n   | string\n   | {\n       supportsNegative?: boolean\n+      supportsFractions?: boolean\n       values?: string[]\n       modifiers?: string[]\n       valueThemeKeys?: ThemeKey[]\n@@ -225,6 +226,35 @@ export function createUtilities(theme: Theme) {\n       }\n     }\n \n+    let suggestedFractions = [\n+      '1/2',\n+      '1/3',\n+      '2/3',\n+      '1/4',\n+      '2/4',\n+      '3/4',\n+      '1/5',\n+      '2/5',\n+      '3/5',\n+      '4/5',\n+      '1/6',\n+      '2/6',\n+      '3/6',\n+      '4/6',\n+      '5/6',\n+      '1/12',\n+      '2/12',\n+      '3/12',\n+      '4/12',\n+      '5/12',\n+      '6/12',\n+      '7/12',\n+      '8/12',\n+      '9/12',\n+      '10/12',\n+      '11/12',\n+    ]\n+\n     utilities.suggest(classRoot, () => {\n       let groups: SuggestionGroup[] = []\n \n@@ -238,8 +268,13 @@ export function createUtilities(theme: Theme) {\n           ...(defn.values ?? []),\n           ...resolve(defn.valueThemeKeys ?? []),\n         ]\n+\n         let modifiers = [...(defn.modifiers ?? []), ...resolve(defn.modifierThemeKeys ?? [])]\n \n+        if (defn.supportsFractions) {\n+          values.push(...suggestedFractions)\n+        }\n+\n         if (defn.hasDefaultValue) {\n           values.unshift(null)\n         }\n@@ -341,6 +376,7 @@ export function createUtilities(theme: Theme) {\n         supportsNegative: desc.supportsNegative,\n         valueThemeKeys: desc.themeKeys ?? [],\n         hasDefaultValue: desc.defaultValue !== undefined && desc.defaultValue !== null,\n+        supportsFractions: desc.supportsFractions,\n       },\n     ])\n   }\n@@ -467,6 +503,7 @@ export function createUtilities(theme: Theme) {\n             ]\n           : [],\n         supportsNegative,\n+        supportsFractions,\n         valueThemeKeys: themeKeys,\n       },\n     ])\n@@ -966,6 +1003,8 @@ export function createUtilities(theme: Theme) {\n     }\n   })\n \n+  suggest('flex', () => [{ supportsFractions: true }])\n+\n   /**\n    * @css `flex-shrink`\n    */\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\nindex d58d605473a1..62c5f49a4a51 100644\n--- a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n@@ -252,6 +252,32 @@ exports[`getClassList 1`] = `\n   \""-bottom-72\"",\n   \""-bottom-80\"",\n   \""-bottom-96\"",\n+  \""-bottom-1/2\"",\n+  \""-bottom-1/3\"",\n+  \""-bottom-1/4\"",\n+  \""-bottom-1/5\"",\n+  \""-bottom-1/6\"",\n+  \""-bottom-1/12\"",\n+  \""-bottom-2/3\"",\n+  \""-bottom-2/4\"",\n+  \""-bottom-2/5\"",\n+  \""-bottom-2/6\"",\n+  \""-bottom-2/12\"",\n+  \""-bottom-3/4\"",\n+  \""-bottom-3/5\"",\n+  \""-bottom-3/6\"",\n+  \""-bottom-3/12\"",\n+  \""-bottom-4/5\"",\n+  \""-bottom-4/6\"",\n+  \""-bottom-4/12\"",\n+  \""-bottom-5/6\"",\n+  \""-bottom-5/12\"",\n+  \""-bottom-6/12\"",\n+  \""-bottom-7/12\"",\n+  \""-bottom-8/12\"",\n+  \""-bottom-9/12\"",\n+  \""-bottom-10/12\"",\n+  \""-bottom-11/12\"",\n   \""-bottom-full\"",\n   \""-bottom-px\"",\n   \""-col-end-1\"",\n@@ -314,6 +340,32 @@ exports[`getClassList 1`] = `\n   \""-end-72\"",\n   \""-end-80\"",\n   \""-end-96\"",\n+  \""-end-1/2\"",\n+  \""-end-1/3\"",\n+  \""-end-1/4\"",\n+  \""-end-1/5\"",\n+  \""-end-1/6\"",\n+  \""-end-1/12\"",\n+  \""-end-2/3\"",\n+  \""-end-2/4\"",\n+  \""-end-2/5\"",\n+  \""-end-2/6\"",\n+  \""-end-2/12\"",\n+  \""-end-3/4\"",\n+  \""-end-3/5\"",\n+  \""-end-3/6\"",\n+  \""-end-3/12\"",\n+  \""-end-4/5\"",\n+  \""-end-4/6\"",\n+  \""-end-4/12\"",\n+  \""-end-5/6\"",\n+  \""-end-5/12\"",\n+  \""-end-6/12\"",\n+  \""-end-7/12\"",\n+  \""-end-8/12\"",\n+  \""-end-9/12\"",\n+  \""-end-10/12\"",\n+  \""-end-11/12\"",\n   \""-end-full\"",\n   \""-end-px\"",\n   \""-indent-0\"",\n@@ -385,6 +437,32 @@ exports[`getClassList 1`] = `\n   \""-inset-72\"",\n   \""-inset-80\"",\n   \""-inset-96\"",\n+  \""-inset-1/2\"",\n+  \""-inset-1/3\"",\n+  \""-inset-1/4\"",\n+  \""-inset-1/5\"",\n+  \""-inset-1/6\"",\n+  \""-inset-1/12\"",\n+  \""-inset-2/3\"",\n+  \""-inset-2/4\"",\n+  \""-inset-2/5\"",\n+  \""-inset-2/6\"",\n+  \""-inset-2/12\"",\n+  \""-inset-3/4\"",\n+  \""-inset-3/5\"",\n+  \""-inset-3/6\"",\n+  \""-inset-3/12\"",\n+  \""-inset-4/5\"",\n+  \""-inset-4/6\"",\n+  \""-inset-4/12\"",\n+  \""-inset-5/6\"",\n+  \""-inset-5/12\"",\n+  \""-inset-6/12\"",\n+  \""-inset-7/12\"",\n+  \""-inset-8/12\"",\n+  \""-inset-9/12\"",\n+  \""-inset-10/12\"",\n+  \""-inset-11/12\"",\n   \""-inset-full\"",\n   \""-inset-px\"",\n   \""-inset-x-0\"",\n@@ -421,6 +499,32 @@ exports[`getClassList 1`] = `\n   \""-inset-x-72\"",\n   \""-inset-x-80\"",\n   \""-inset-x-96\"",\n+  \""-inset-x-1/2\"",\n+  \""-inset-x-1/3\"",\n+  \""-inset-x-1/4\"",\n+  \""-inset-x-1/5\"",\n+  \""-inset-x-1/6\"",\n+  \""-inset-x-1/12\"",\n+  \""-inset-x-2/3\"",\n+  \""-inset-x-2/4\"",\n+  \""-inset-x-2/5\"",\n+  \""-inset-x-2/6\"",\n+  \""-inset-x-2/12\"",\n+  \""-inset-x-3/4\"",\n+  \""-inset-x-3/5\"",\n+  \""-inset-x-3/6\"",\n+  \""-inset-x-3/12\"",\n+  \""-inset-x-4/5\"",\n+  \""-inset-x-4/6\"",\n+  \""-inset-x-4/12\"",\n+  \""-inset-x-5/6\"",\n+  \""-inset-x-5/12\"",\n+  \""-inset-x-6/12\"",\n+  \""-inset-x-7/12\"",\n+  \""-inset-x-8/12\"",\n+  \""-inset-x-9/12\"",\n+  \""-inset-x-10/12\"",\n+  \""-inset-x-11/12\"",\n   \""-inset-x-full\"",\n   \""-inset-x-px\"",\n   \""-inset-y-0\"",\n@@ -457,6 +561,32 @@ exports[`getClassList 1`] = `\n   \""-inset-y-72\"",\n   \""-inset-y-80\"",\n   \""-inset-y-96\"",\n+  \""-inset-y-1/2\"",\n+  \""-inset-y-1/3\"",\n+  \""-inset-y-1/4\"",\n+  \""-inset-y-1/5\"",\n+  \""-inset-y-1/6\"",\n+  \""-inset-y-1/12\"",\n+  \""-inset-y-2/3\"",\n+  \""-inset-y-2/4\"",\n+  \""-inset-y-2/5\"",\n+  \""-inset-y-2/6\"",\n+  \""-inset-y-2/12\"",\n+  \""-inset-y-3/4\"",\n+  \""-inset-y-3/5\"",\n+  \""-inset-y-3/6\"",\n+  \""-inset-y-3/12\"",\n+  \""-inset-y-4/5\"",\n+  \""-inset-y-4/6\"",\n+  \""-inset-y-4/12\"",\n+  \""-inset-y-5/6\"",\n+  \""-inset-y-5/12\"",\n+  \""-inset-y-6/12\"",\n+  \""-inset-y-7/12\"",\n+  \""-inset-y-8/12\"",\n+  \""-inset-y-9/12\"",\n+  \""-inset-y-10/12\"",\n+  \""-inset-y-11/12\"",\n   \""-inset-y-full\"",\n   \""-inset-y-px\"",\n   \""-left-0\"",\n@@ -493,6 +623,32 @@ exports[`getClassList 1`] = `\n   \""-left-72\"",\n   \""-left-80\"",\n   \""-left-96\"",\n+  \""-left-1/2\"",\n+  \""-left-1/3\"",\n+  \""-left-1/4\"",\n+  \""-left-1/5\"",\n+  \""-left-1/6\"",\n+  \""-left-1/12\"",\n+  \""-left-2/3\"",\n+  \""-left-2/4\"",\n+  \""-left-2/5\"",\n+  \""-left-2/6\"",\n+  \""-left-2/12\"",\n+  \""-left-3/4\"",\n+  \""-left-3/5\"",\n+  \""-left-3/6\"",\n+  \""-left-3/12\"",\n+  \""-left-4/5\"",\n+  \""-left-4/6\"",\n+  \""-left-4/12\"",\n+  \""-left-5/6\"",\n+  \""-left-5/12\"",\n+  \""-left-6/12\"",\n+  \""-left-7/12\"",\n+  \""-left-8/12\"",\n+  \""-left-9/12\"",\n+  \""-left-10/12\"",\n+  \""-left-11/12\"",\n   \""-left-full\"",\n   \""-left-px\"",\n   \""-m-0\"",\n@@ -861,6 +1017,32 @@ exports[`getClassList 1`] = `\n   \""-right-72\"",\n   \""-right-80\"",\n   \""-right-96\"",\n+  \""-right-1/2\"",\n+  \""-right-1/3\"",\n+  \""-right-1/4\"",\n+  \""-right-1/5\"",\n+  \""-right-1/6\"",\n+  \""-right-1/12\"",\n+  \""-right-2/3\"",\n+  \""-right-2/4\"",\n+  \""-right-2/5\"",\n+  \""-right-2/6\"",\n+  \""-right-2/12\"",\n+  \""-right-3/4\"",\n+  \""-right-3/5\"",\n+  \""-right-3/6\"",\n+  \""-right-3/12\"",\n+  \""-right-4/5\"",\n+  \""-right-4/6\"",\n+  \""-right-4/12\"",\n+  \""-right-5/6\"",\n+  \""-right-5/12\"",\n+  \""-right-6/12\"",\n+  \""-right-7/12\"",\n+  \""-right-8/12\"",\n+  \""-right-9/12\"",\n+  \""-right-10/12\"",\n+  \""-right-11/12\"",\n   \""-right-full\"",\n   \""-right-px\"",\n   \""-rotate-0\"",\n@@ -1406,6 +1588,32 @@ exports[`getClassList 1`] = `\n   \""-start-72\"",\n   \""-start-80\"",\n   \""-start-96\"",\n+  \""-start-1/2\"",\n+  \""-start-1/3\"",\n+  \""-start-1/4\"",\n+  \""-start-1/5\"",\n+  \""-start-1/6\"",\n+  \""-start-1/12\"",\n+  \""-start-2/3\"",\n+  \""-start-2/4\"",\n+  \""-start-2/5\"",\n+  \""-start-2/6\"",\n+  \""-start-2/12\"",\n+  \""-start-3/4\"",\n+  \""-start-3/5\"",\n+  \""-start-3/6\"",\n+  \""-start-3/12\"",\n+  \""-start-4/5\"",\n+  \""-start-4/6\"",\n+  \""-start-4/12\"",\n+  \""-start-5/6\"",\n+  \""-start-5/12\"",\n+  \""-start-6/12\"",\n+  \""-start-7/12\"",\n+  \""-start-8/12\"",\n+  \""-start-9/12\"",\n+  \""-start-10/12\"",\n+  \""-start-11/12\"",\n   \""-start-full\"",\n   \""-start-px\"",\n   \""-top-0\"",\n@@ -1442,6 +1650,32 @@ exports[`getClassList 1`] = `\n   \""-top-72\"",\n   \""-top-80\"",\n   \""-top-96\"",\n+  \""-top-1/2\"",\n+  \""-top-1/3\"",\n+  \""-top-1/4\"",\n+  \""-top-1/5\"",\n+  \""-top-1/6\"",\n+  \""-top-1/12\"",\n+  \""-top-2/3\"",\n+  \""-top-2/4\"",\n+  \""-top-2/5\"",\n+  \""-top-2/6\"",\n+  \""-top-2/12\"",\n+  \""-top-3/4\"",\n+  \""-top-3/5\"",\n+  \""-top-3/6\"",\n+  \""-top-3/12\"",\n+  \""-top-4/5\"",\n+  \""-top-4/6\"",\n+  \""-top-4/12\"",\n+  \""-top-5/6\"",\n+  \""-top-5/12\"",\n+  \""-top-6/12\"",\n+  \""-top-7/12\"",\n+  \""-top-8/12\"",\n+  \""-top-9/12\"",\n+  \""-top-10/12\"",\n+  \""-top-11/12\"",\n   \""-top-full\"",\n   \""-top-px\"",\n   \""-translate-0\"",\n@@ -1478,6 +1712,32 @@ exports[`getClassList 1`] = `\n   \""-translate-72\"",\n   \""-translate-80\"",\n   \""-translate-96\"",\n+  \""-translate-1/2\"",\n+  \""-translate-1/3\"",\n+  \""-translate-1/4\"",\n+  \""-translate-1/5\"",\n+  \""-translate-1/6\"",\n+  \""-translate-1/12\"",\n+  \""-translate-2/3\"",\n+  \""-translate-2/4\"",\n+  \""-translate-2/5\"",\n+  \""-translate-2/6\"",\n+  \""-translate-2/12\"",\n+  \""-translate-3/4\"",\n+  \""-translate-3/5\"",\n+  \""-translate-3/6\"",\n+  \""-translate-3/12\"",\n+  \""-translate-4/5\"",\n+  \""-translate-4/6\"",\n+  \""-translate-4/12\"",\n+  \""-translate-5/6\"",\n+  \""-translate-5/12\"",\n+  \""-translate-6/12\"",\n+  \""-translate-7/12\"",\n+  \""-translate-8/12\"",\n+  \""-translate-9/12\"",\n+  \""-translate-10/12\"",\n+  \""-translate-11/12\"",\n   \""-translate-full\"",\n   \""-translate-px\"",\n   \""-translate-x-0\"",\n@@ -1514,6 +1774,32 @@ exports[`getClassList 1`] = `\n   \""-translate-x-72\"",\n   \""-translate-x-80\"",\n   \""-translate-x-96\"",\n+  \""-translate-x-1/2\"",\n+  \""-translate-x-1/3\"",\n+  \""-translate-x-1/4\"",\n+  \""-translate-x-1/5\"",\n+  \""-translate-x-1/6\"",\n+  \""-translate-x-1/12\"",\n+  \""-translate-x-2/3\"",\n+  \""-translate-x-2/4\"",\n+  \""-translate-x-2/5\"",\n+  \""-translate-x-2/6\"",\n+  \""-translate-x-2/12\"",\n+  \""-translate-x-3/4\"",\n+  \""-translate-x-3/5\"",\n+  \""-translate-x-3/6\"",\n+  \""-translate-x-3/12\"",\n+  \""-translate-x-4/5\"",\n+  \""-translate-x-4/6\"",\n+  \""-translate-x-4/12\"",\n+  \""-translate-x-5/6\"",\n+  \""-translate-x-5/12\"",\n+  \""-translate-x-6/12\"",\n+  \""-translate-x-7/12\"",\n+  \""-translate-x-8/12\"",\n+  \""-translate-x-9/12\"",\n+  \""-translate-x-10/12\"",\n+  \""-translate-x-11/12\"",\n   \""-translate-x-full\"",\n   \""-translate-x-px\"",\n   \""-translate-y-0\"",\n@@ -1550,6 +1836,32 @@ exports[`getClassList 1`] = `\n   \""-translate-y-72\"",\n   \""-translate-y-80\"",\n   \""-translate-y-96\"",\n+  \""-translate-y-1/2\"",\n+  \""-translate-y-1/3\"",\n+  \""-translate-y-1/4\"",\n+  \""-translate-y-1/5\"",\n+  \""-translate-y-1/6\"",\n+  \""-translate-y-1/12\"",\n+  \""-translate-y-2/3\"",\n+  \""-translate-y-2/4\"",\n+  \""-translate-y-2/5\"",\n+  \""-translate-y-2/6\"",\n+  \""-translate-y-2/12\"",\n+  \""-translate-y-3/4\"",\n+  \""-translate-y-3/5\"",\n+  \""-translate-y-3/6\"",\n+  \""-translate-y-3/12\"",\n+  \""-translate-y-4/5\"",\n+  \""-translate-y-4/6\"",\n+  \""-translate-y-4/12\"",\n+  \""-translate-y-5/6\"",\n+  \""-translate-y-5/12\"",\n+  \""-translate-y-6/12\"",\n+  \""-translate-y-7/12\"",\n+  \""-translate-y-8/12\"",\n+  \""-translate-y-9/12\"",\n+  \""-translate-y-10/12\"",\n+  \""-translate-y-11/12\"",\n   \""-translate-y-full\"",\n   \""-translate-y-px\"",\n   \""-translate-z-0\"",\n@@ -1799,6 +2111,32 @@ exports[`getClassList 1`] = `\n   \""basis-full\"",\n   \""basis-lg\"",\n   \""basis-md\"",\n+  \""basis-1/2\"",\n+  \""basis-1/3\"",\n+  \""basis-1/4\"",\n+  \""basis-1/5\"",\n+  \""basis-1/6\"",\n+  \""basis-1/12\"",\n+  \""basis-2/3\"",\n+  \""basis-2/4\"",\n+  \""basis-2/5\"",\n+  \""basis-2/6\"",\n+  \""basis-2/12\"",\n+  \""basis-3/4\"",\n+  \""basis-3/5\"",\n+  \""basis-3/6\"",\n+  \""basis-3/12\"",\n+  \""basis-4/5\"",\n+  \""basis-4/6\"",\n+  \""basis-4/12\"",\n+  \""basis-5/6\"",\n+  \""basis-5/12\"",\n+  \""basis-6/12\"",\n+  \""basis-7/12\"",\n+  \""basis-8/12\"",\n+  \""basis-9/12\"",\n+  \""basis-10/12\"",\n+  \""basis-11/12\"",\n   \""basis-px\"",\n   \""bg-auto\"",\n   \""bg-blend-color\"",\n@@ -3194,6 +3532,32 @@ exports[`getClassList 1`] = `\n   \""bottom-72\"",\n   \""bottom-80\"",\n   \""bottom-96\"",\n+  \""bottom-1/2\"",\n+  \""bottom-1/3\"",\n+  \""bottom-1/4\"",\n+  \""bottom-1/5\"",\n+  \""bottom-1/6\"",\n+  \""bottom-1/12\"",\n+  \""bottom-2/3\"",\n+  \""bottom-2/4\"",\n+  \""bottom-2/5\"",\n+  \""bottom-2/6\"",\n+  \""bottom-2/12\"",\n+  \""bottom-3/4\"",\n+  \""bottom-3/5\"",\n+  \""bottom-3/6\"",\n+  \""bottom-3/12\"",\n+  \""bottom-4/5\"",\n+  \""bottom-4/6\"",\n+  \""bottom-4/12\"",\n+  \""bottom-5/6\"",\n+  \""bottom-5/12\"",\n+  \""bottom-6/12\"",\n+  \""bottom-7/12\"",\n+  \""bottom-8/12\"",\n+  \""bottom-9/12\"",\n+  \""bottom-10/12\"",\n+  \""bottom-11/12\"",\n   \""bottom-auto\"",\n   \""bottom-full\"",\n   \""bottom-px\"",\n@@ -3647,6 +4011,32 @@ exports[`getClassList 1`] = `\n   \""end-72\"",\n   \""end-80\"",\n   \""end-96\"",\n+  \""end-1/2\"",\n+  \""end-1/3\"",\n+  \""end-1/4\"",\n+  \""end-1/5\"",\n+  \""end-1/6\"",\n+  \""end-1/12\"",\n+  \""end-2/3\"",\n+  \""end-2/4\"",\n+  \""end-2/5\"",\n+  \""end-2/6\"",\n+  \""end-2/12\"",\n+  \""end-3/4\"",\n+  \""end-3/5\"",\n+  \""end-3/6\"",\n+  \""end-3/12\"",\n+  \""end-4/5\"",\n+  \""end-4/6\"",\n+  \""end-4/12\"",\n+  \""end-5/6\"",\n+  \""end-5/12\"",\n+  \""end-6/12\"",\n+  \""end-7/12\"",\n+  \""end-8/12\"",\n+  \""end-9/12\"",\n+  \""end-10/12\"",\n+  \""end-11/12\"",\n   \""end-auto\"",\n   \""end-full\"",\n   \""end-px\"",\n@@ -3721,6 +4111,32 @@ exports[`getClassList 1`] = `\n   \""fill-transparent/100\"",\n   \""fixed\"",\n   \""flex\"",\n+  \""flex-1/2\"",\n+  \""flex-1/3\"",\n+  \""flex-1/4\"",\n+  \""flex-1/5\"",\n+  \""flex-1/6\"",\n+  \""flex-1/12\"",\n+  \""flex-2/3\"",\n+  \""flex-2/4\"",\n+  \""flex-2/5\"",\n+  \""flex-2/6\"",\n+  \""flex-2/12\"",\n+  \""flex-3/4\"",\n+  \""flex-3/5\"",\n+  \""flex-3/6\"",\n+  \""flex-3/12\"",\n+  \""flex-4/5\"",\n+  \""flex-4/6\"",\n+  \""flex-4/12\"",\n+  \""flex-5/6\"",\n+  \""flex-5/12\"",\n+  \""flex-6/12\"",\n+  \""flex-7/12\"",\n+  \""flex-8/12\"",\n+  \""flex-9/12\"",\n+  \""flex-10/12\"",\n+  \""flex-11/12\"",\n   \""flex-auto\"",\n   \""flex-col\"",\n   \""flex-col-reverse\"",\n@@ -4029,6 +4445,32 @@ exports[`getClassList 1`] = `\n   \""h-72\"",\n   \""h-80\"",\n   \""h-96\"",\n+  \""h-1/2\"",\n+  \""h-1/3\"",\n+  \""h-1/4\"",\n+  \""h-1/5\"",\n+  \""h-1/6\"",\n+  \""h-1/12\"",\n+  \""h-2/3\"",\n+  \""h-2/4\"",\n+  \""h-2/5\"",\n+  \""h-2/6\"",\n+  \""h-2/12\"",\n+  \""h-3/4\"",\n+  \""h-3/5\"",\n+  \""h-3/6\"",\n+  \""h-3/12\"",\n+  \""h-4/5\"",\n+  \""h-4/6\"",\n+  \""h-4/12\"",\n+  \""h-5/6\"",\n+  \""h-5/12\"",\n+  \""h-6/12\"",\n+  \""h-7/12\"",\n+  \""h-8/12\"",\n+  \""h-9/12\"",\n+  \""h-10/12\"",\n+  \""h-11/12\"",\n   \""h-auto\"",\n   \""h-dvh\"",\n   \""h-dvw\"",\n@@ -4126,6 +4568,32 @@ exports[`getClassList 1`] = `\n   \""inset-72\"",\n   \""inset-80\"",\n   \""inset-96\"",\n+  \""inset-1/2\"",\n+  \""inset-1/3\"",\n+  \""inset-1/4\"",\n+  \""inset-1/5\"",\n+  \""inset-1/6\"",\n+  \""inset-1/12\"",\n+  \""inset-2/3\"",\n+  \""inset-2/4\"",\n+  \""inset-2/5\"",\n+  \""inset-2/6\"",\n+  \""inset-2/12\"",\n+  \""inset-3/4\"",\n+  \""inset-3/5\"",\n+  \""inset-3/6\"",\n+  \""inset-3/12\"",\n+  \""inset-4/5\"",\n+  \""inset-4/6\"",\n+  \""inset-4/12\"",\n+  \""inset-5/6\"",\n+  \""inset-5/12\"",\n+  \""inset-6/12\"",\n+  \""inset-7/12\"",\n+  \""inset-8/12\"",\n+  \""inset-9/12\"",\n+  \""inset-10/12\"",\n+  \""inset-11/12\"",\n   \""inset-auto\"",\n   \""inset-full\"",\n   \""inset-px\"",\n@@ -4304,6 +4772,32 @@ exports[`getClassList 1`] = `\n   \""inset-x-72\"",\n   \""inset-x-80\"",\n   \""inset-x-96\"",\n+  \""inset-x-1/2\"",\n+  \""inset-x-1/3\"",\n+  \""inset-x-1/4\"",\n+  \""inset-x-1/5\"",\n+  \""inset-x-1/6\"",\n+  \""inset-x-1/12\"",\n+  \""inset-x-2/3\"",\n+  \""inset-x-2/4\"",\n+  \""inset-x-2/5\"",\n+  \""inset-x-2/6\"",\n+  \""inset-x-2/12\"",\n+  \""inset-x-3/4\"",\n+  \""inset-x-3/5\"",\n+  \""inset-x-3/6\"",\n+  \""inset-x-3/12\"",\n+  \""inset-x-4/5\"",\n+  \""inset-x-4/6\"",\n+  \""inset-x-4/12\"",\n+  \""inset-x-5/6\"",\n+  \""inset-x-5/12\"",\n+  \""inset-x-6/12\"",\n+  \""inset-x-7/12\"",\n+  \""inset-x-8/12\"",\n+  \""inset-x-9/12\"",\n+  \""inset-x-10/12\"",\n+  \""inset-x-11/12\"",\n   \""inset-x-auto\"",\n   \""inset-x-full\"",\n   \""inset-x-px\"",\n@@ -4341,6 +4835,32 @@ exports[`getClassList 1`] = `\n   \""inset-y-72\"",\n   \""inset-y-80\"",\n   \""inset-y-96\"",\n+  \""inset-y-1/2\"",\n+  \""inset-y-1/3\"",\n+  \""inset-y-1/4\"",\n+  \""inset-y-1/5\"",\n+  \""inset-y-1/6\"",\n+  \""inset-y-1/12\"",\n+  \""inset-y-2/3\"",\n+  \""inset-y-2/4\"",\n+  \""inset-y-2/5\"",\n+  \""inset-y-2/6\"",\n+  \""inset-y-2/12\"",\n+  \""inset-y-3/4\"",\n+  \""inset-y-3/5\"",\n+  \""inset-y-3/6\"",\n+  \""inset-y-3/12\"",\n+  \""inset-y-4/5\"",\n+  \""inset-y-4/6\"",\n+  \""inset-y-4/12\"",\n+  \""inset-y-5/6\"",\n+  \""inset-y-5/12\"",\n+  \""inset-y-6/12\"",\n+  \""inset-y-7/12\"",\n+  \""inset-y-8/12\"",\n+  \""inset-y-9/12\"",\n+  \""inset-y-10/12\"",\n+  \""inset-y-11/12\"",\n   \""inset-y-auto\"",\n   \""inset-y-full\"",\n   \""inset-y-px\"",\n@@ -4448,6 +4968,32 @@ exports[`getClassList 1`] = `\n   \""left-72\"",\n   \""left-80\"",\n   \""left-96\"",\n+  \""left-1/2\"",\n+  \""left-1/3\"",\n+  \""left-1/4\"",\n+  \""left-1/5\"",\n+  \""left-1/6\"",\n+  \""left-1/12\"",\n+  \""left-2/3\"",\n+  \""left-2/4\"",\n+  \""left-2/5\"",\n+  \""left-2/6\"",\n+  \""left-2/12\"",\n+  \""left-3/4\"",\n+  \""left-3/5\"",\n+  \""left-3/6\"",\n+  \""left-3/12\"",\n+  \""left-4/5\"",\n+  \""left-4/6\"",\n+  \""left-4/12\"",\n+  \""left-5/6\"",\n+  \""left-5/12\"",\n+  \""left-6/12\"",\n+  \""left-7/12\"",\n+  \""left-8/12\"",\n+  \""left-9/12\"",\n+  \""left-10/12\"",\n+  \""left-11/12\"",\n   \""left-auto\"",\n   \""left-full\"",\n   \""left-px\"",\n@@ -4538,6 +5084,32 @@ exports[`getClassList 1`] = `\n   \""max-h-72\"",\n   \""max-h-80\"",\n   \""max-h-96\"",\n+  \""max-h-1/2\"",\n+  \""max-h-1/3\"",\n+  \""max-h-1/4\"",\n+  \""max-h-1/5\"",\n+  \""max-h-1/6\"",\n+  \""max-h-1/12\"",\n+  \""max-h-2/3\"",\n+  \""max-h-2/4\"",\n+  \""max-h-2/5\"",\n+  \""max-h-2/6\"",\n+  \""max-h-2/12\"",\n+  \""max-h-3/4\"",\n+  \""max-h-3/5\"",\n+  \""max-h-3/6\"",\n+  \""max-h-3/12\"",\n+  \""max-h-4/5\"",\n+  \""max-h-4/6\"",\n+  \""max-h-4/12\"",\n+  \""max-h-5/6\"",\n+  \""max-h-5/12\"",\n+  \""max-h-6/12\"",\n+  \""max-h-7/12\"",\n+  \""max-h-8/12\"",\n+  \""max-h-9/12\"",\n+  \""max-h-10/12\"",\n+  \""max-h-11/12\"",\n   \""max-h-auto\"",\n   \""max-h-dvh\"",\n   \""max-h-dvw\"",\n@@ -4596,6 +5168,32 @@ exports[`getClassList 1`] = `\n   \""max-w-lvw\"",\n   \""max-w-max\"",\n   \""max-w-md\"",\n+  \""max-w-1/2\"",\n+  \""max-w-1/3\"",\n+  \""max-w-1/4\"",\n+  \""max-w-1/5\"",\n+  \""max-w-1/6\"",\n+  \""max-w-1/12\"",\n+  \""max-w-2/3\"",\n+  \""max-w-2/4\"",\n+  \""max-w-2/5\"",\n+  \""max-w-2/6\"",\n+  \""max-w-2/12\"",\n+  \""max-w-3/4\"",\n+  \""max-w-3/5\"",\n+  \""max-w-3/6\"",\n+  \""max-w-3/12\"",\n+  \""max-w-4/5\"",\n+  \""max-w-4/6\"",\n+  \""max-w-4/12\"",\n+  \""max-w-5/6\"",\n+  \""max-w-5/12\"",\n+  \""max-w-6/12\"",\n+  \""max-w-7/12\"",\n+  \""max-w-8/12\"",\n+  \""max-w-9/12\"",\n+  \""max-w-10/12\"",\n+  \""max-w-11/12\"",\n   \""max-w-min\"",\n   \""max-w-none\"",\n   \""max-w-px\"",\n@@ -4708,6 +5306,32 @@ exports[`getClassList 1`] = `\n   \""min-h-72\"",\n   \""min-h-80\"",\n   \""min-h-96\"",\n+  \""min-h-1/2\"",\n+  \""min-h-1/3\"",\n+  \""min-h-1/4\"",\n+  \""min-h-1/5\"",\n+  \""min-h-1/6\"",\n+  \""min-h-1/12\"",\n+  \""min-h-2/3\"",\n+  \""min-h-2/4\"",\n+  \""min-h-2/5\"",\n+  \""min-h-2/6\"",\n+  \""min-h-2/12\"",\n+  \""min-h-3/4\"",\n+  \""min-h-3/5\"",\n+  \""min-h-3/6\"",\n+  \""min-h-3/12\"",\n+  \""min-h-4/5\"",\n+  \""min-h-4/6\"",\n+  \""min-h-4/12\"",\n+  \""min-h-5/6\"",\n+  \""min-h-5/12\"",\n+  \""min-h-6/12\"",\n+  \""min-h-7/12\"",\n+  \""min-h-8/12\"",\n+  \""min-h-9/12\"",\n+  \""min-h-10/12\"",\n+  \""min-h-11/12\"",\n   \""min-h-auto\"",\n   \""min-h-dvh\"",\n   \""min-h-dvw\"",\n@@ -4765,6 +5389,32 @@ exports[`getClassList 1`] = `\n   \""min-w-lvw\"",\n   \""min-w-max\"",\n   \""min-w-md\"",\n+  \""min-w-1/2\"",\n+  \""min-w-1/3\"",\n+  \""min-w-1/4\"",\n+  \""min-w-1/5\"",\n+  \""min-w-1/6\"",\n+  \""min-w-1/12\"",\n+  \""min-w-2/3\"",\n+  \""min-w-2/4\"",\n+  \""min-w-2/5\"",\n+  \""min-w-2/6\"",\n+  \""min-w-2/12\"",\n+  \""min-w-3/4\"",\n+  \""min-w-3/5\"",\n+  \""min-w-3/6\"",\n+  \""min-w-3/12\"",\n+  \""min-w-4/5\"",\n+  \""min-w-4/6\"",\n+  \""min-w-4/12\"",\n+  \""min-w-5/6\"",\n+  \""min-w-5/12\"",\n+  \""min-w-6/12\"",\n+  \""min-w-7/12\"",\n+  \""min-w-8/12\"",\n+  \""min-w-9/12\"",\n+  \""min-w-10/12\"",\n+  \""min-w-11/12\"",\n   \""min-w-min\"",\n   \""min-w-px\"",\n   \""min-w-screen\"",\n@@ -5653,6 +6303,32 @@ exports[`getClassList 1`] = `\n   \""right-72\"",\n   \""right-80\"",\n   \""right-96\"",\n+  \""right-1/2\"",\n+  \""right-1/3\"",\n+  \""right-1/4\"",\n+  \""right-1/5\"",\n+  \""right-1/6\"",\n+  \""right-1/12\"",\n+  \""right-2/3\"",\n+  \""right-2/4\"",\n+  \""right-2/5\"",\n+  \""right-2/6\"",\n+  \""right-2/12\"",\n+  \""right-3/4\"",\n+  \""right-3/5\"",\n+  \""right-3/6\"",\n+  \""right-3/12\"",\n+  \""right-4/5\"",\n+  \""right-4/6\"",\n+  \""right-4/12\"",\n+  \""right-5/6\"",\n+  \""right-5/12\"",\n+  \""right-6/12\"",\n+  \""right-7/12\"",\n+  \""right-8/12\"",\n+  \""right-9/12\"",\n+  \""right-10/12\"",\n+  \""right-11/12\"",\n   \""right-auto\"",\n   \""right-full\"",\n   \""right-px\"",\n@@ -6717,6 +7393,32 @@ exports[`getClassList 1`] = `\n   \""size-72\"",\n   \""size-80\"",\n   \""size-96\"",\n+  \""size-1/2\"",\n+  \""size-1/3\"",\n+  \""size-1/4\"",\n+  \""size-1/5\"",\n+  \""size-1/6\"",\n+  \""size-1/12\"",\n+  \""size-2/3\"",\n+  \""size-2/4\"",\n+  \""size-2/5\"",\n+  \""size-2/6\"",\n+  \""size-2/12\"",\n+  \""size-3/4\"",\n+  \""size-3/5\"",\n+  \""size-3/6\"",\n+  \""size-3/12\"",\n+  \""size-4/5\"",\n+  \""size-4/6\"",\n+  \""size-4/12\"",\n+  \""size-5/6\"",\n+  \""size-5/12\"",\n+  \""size-6/12\"",\n+  \""size-7/12\"",\n+  \""size-8/12\"",\n+  \""size-9/12\"",\n+  \""size-10/12\"",\n+  \""size-11/12\"",\n   \""size-auto\"",\n   \""size-dvh\"",\n   \""size-dvw\"",\n@@ -6868,6 +7570,32 @@ exports[`getClassList 1`] = `\n   \""start-72\"",\n   \""start-80\"",\n   \""start-96\"",\n+  \""start-1/2\"",\n+  \""start-1/3\"",\n+  \""start-1/4\"",\n+  \""start-1/5\"",\n+  \""start-1/6\"",\n+  \""start-1/12\"",\n+  \""start-2/3\"",\n+  \""start-2/4\"",\n+  \""start-2/5\"",\n+  \""start-2/6\"",\n+  \""start-2/12\"",\n+  \""start-3/4\"",\n+  \""start-3/5\"",\n+  \""start-3/6\"",\n+  \""start-3/12\"",\n+  \""start-4/5\"",\n+  \""start-4/6\"",\n+  \""start-4/12\"",\n+  \""start-5/6\"",\n+  \""start-5/12\"",\n+  \""start-6/12\"",\n+  \""start-7/12\"",\n+  \""start-8/12\"",\n+  \""start-9/12\"",\n+  \""start-10/12\"",\n+  \""start-11/12\"",\n   \""start-auto\"",\n   \""start-full\"",\n   \""start-px\"",\n@@ -7157,6 +7885,32 @@ exports[`getClassList 1`] = `\n   \""top-72\"",\n   \""top-80\"",\n   \""top-96\"",\n+  \""top-1/2\"",\n+  \""top-1/3\"",\n+  \""top-1/4\"",\n+  \""top-1/5\"",\n+  \""top-1/6\"",\n+  \""top-1/12\"",\n+  \""top-2/3\"",\n+  \""top-2/4\"",\n+  \""top-2/5\"",\n+  \""top-2/6\"",\n+  \""top-2/12\"",\n+  \""top-3/4\"",\n+  \""top-3/5\"",\n+  \""top-3/6\"",\n+  \""top-3/12\"",\n+  \""top-4/5\"",\n+  \""top-4/6\"",\n+  \""top-4/12\"",\n+  \""top-5/6\"",\n+  \""top-5/12\"",\n+  \""top-6/12\"",\n+  \""top-7/12\"",\n+  \""top-8/12\"",\n+  \""top-9/12\"",\n+  \""top-10/12\"",\n+  \""top-11/12\"",\n   \""top-auto\"",\n   \""top-full\"",\n   \""top-px\"",\n@@ -7225,6 +7979,32 @@ exports[`getClassList 1`] = `\n   \""translate-72\"",\n   \""translate-80\"",\n   \""translate-96\"",\n+  \""translate-1/2\"",\n+  \""translate-1/3\"",\n+  \""translate-1/4\"",\n+  \""translate-1/5\"",\n+  \""translate-1/6\"",\n+  \""translate-1/12\"",\n+  \""translate-2/3\"",\n+  \""translate-2/4\"",\n+  \""translate-2/5\"",\n+  \""translate-2/6\"",\n+  \""translate-2/12\"",\n+  \""translate-3/4\"",\n+  \""translate-3/5\"",\n+  \""translate-3/6\"",\n+  \""translate-3/12\"",\n+  \""translate-4/5\"",\n+  \""translate-4/6\"",\n+  \""translate-4/12\"",\n+  \""translate-5/6\"",\n+  \""translate-5/12\"",\n+  \""translate-6/12\"",\n+  \""translate-7/12\"",\n+  \""translate-8/12\"",\n+  \""translate-9/12\"",\n+  \""translate-10/12\"",\n+  \""translate-11/12\"",\n   \""translate-full\"",\n   \""translate-none\"",\n   \""translate-px\"",\n@@ -7262,6 +8042,32 @@ exports[`getClassList 1`] = `\n   \""translate-x-72\"",\n   \""translate-x-80\"",\n   \""translate-x-96\"",\n+  \""translate-x-1/2\"",\n+  \""translate-x-1/3\"",\n+  \""translate-x-1/4\"",\n+  \""translate-x-1/5\"",\n+  \""translate-x-1/6\"",\n+  \""translate-x-1/12\"",\n+  \""translate-x-2/3\"",\n+  \""translate-x-2/4\"",\n+  \""translate-x-2/5\"",\n+  \""translate-x-2/6\"",\n+  \""translate-x-2/12\"",\n+  \""translate-x-3/4\"",\n+  \""translate-x-3/5\"",\n+  \""translate-x-3/6\"",\n+  \""translate-x-3/12\"",\n+  \""translate-x-4/5\"",\n+  \""translate-x-4/6\"",\n+  \""translate-x-4/12\"",\n+  \""translate-x-5/6\"",\n+  \""translate-x-5/12\"",\n+  \""translate-x-6/12\"",\n+  \""translate-x-7/12\"",\n+  \""translate-x-8/12\"",\n+  \""translate-x-9/12\"",\n+  \""translate-x-10/12\"",\n+  \""translate-x-11/12\"",\n   \""translate-x-full\"",\n   \""translate-x-px\"",\n   \""translate-y-0\"",\n@@ -7298,6 +8104,32 @@ exports[`getClassList 1`] = `\n   \""translate-y-72\"",\n   \""translate-y-80\"",\n   \""translate-y-96\"",\n+  \""translate-y-1/2\"",\n+  \""translate-y-1/3\"",\n+  \""translate-y-1/4\"",\n+  \""translate-y-1/5\"",\n+  \""translate-y-1/6\"",\n+  \""translate-y-1/12\"",\n+  \""translate-y-2/3\"",\n+  \""translate-y-2/4\"",\n+  \""translate-y-2/5\"",\n+  \""translate-y-2/6\"",\n+  \""translate-y-2/12\"",\n+  \""translate-y-3/4\"",\n+  \""translate-y-3/5\"",\n+  \""translate-y-3/6\"",\n+  \""translate-y-3/12\"",\n+  \""translate-y-4/5\"",\n+  \""translate-y-4/6\"",\n+  \""translate-y-4/12\"",\n+  \""translate-y-5/6\"",\n+  \""translate-y-5/12\"",\n+  \""translate-y-6/12\"",\n+  \""translate-y-7/12\"",\n+  \""translate-y-8/12\"",\n+  \""translate-y-9/12\"",\n+  \""translate-y-10/12\"",\n+  \""translate-y-11/12\"",\n   \""translate-y-full\"",\n   \""translate-y-px\"",\n   \""translate-z-0\"",\n@@ -7477,6 +8309,32 @@ exports[`getClassList 1`] = `\n   \""w-lvw\"",\n   \""w-max\"",\n   \""w-md\"",\n+  \""w-1/2\"",\n+  \""w-1/3\"",\n+  \""w-1/4\"",\n+  \""w-1/5\"",\n+  \""w-1/6\"",\n+  \""w-1/12\"",\n+  \""w-2/3\"",\n+  \""w-2/4\"",\n+  \""w-2/5\"",\n+  \""w-2/6\"",\n+  \""w-2/12\"",\n+  \""w-3/4\"",\n+  \""w-3/5\"",\n+  \""w-3/6\"",\n+  \""w-3/12\"",\n+  \""w-4/5\"",\n+  \""w-4/6\"",\n+  \""w-4/12\"",\n+  \""w-5/6\"",\n+  \""w-5/12\"",\n+  \""w-6/12\"",\n+  \""w-7/12\"",\n+  \""w-8/12\"",\n+  \""w-9/12\"",\n+  \""w-10/12\"",\n+  \""w-11/12\"",\n   \""w-min\"",\n   \""w-px\"",\n   \""w-screen\"",\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16300"", ""pr_id"": 16300, ""issue_id"": 16298, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] \""Maximum call stack size exceeded\"" when using @resource with @slot\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\n4.0.3\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nangular: 19.1.4, tailwindcss: 4.0.3, tailwindcss/postcss: 4.0.3\n\n**What version of Node.js are you using?**\n\n23.7.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nhttps://github.com/Joxeur2/tailwind-test.git\n\n**Describe your issue**\n\nI have an Angular application that I am migrating to Tailwind 4. I'm also using a purchased theme that is based on Tailwind and has also been migrated to Tailwind 4.\nHowever, when I use the theme, I get the error \""Maximum call stack size exceeded.\""\n\nAfter some investigation, I managed to reproduce the issue and created a separate repo with minimal setup here: https://github.com/Joxeur2/tailwind-test.git\n\nMy problem occurs when these two things are present:\n\n- I use a @resource pointing to my main.css to be able to use @apply\n- I use a @slot in main.css\n\nI imagine I could move my @variant along with my @slot into another CSS file and only reference the rest with @resource, but as I mentioned, I am using a purchased theme and I would really hate to have to mess with the theme\u2019s code..."", ""issue_word_count"": 268, ""test_files_count"": 2, ""non_test_files_count"": 5, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/ast.test.ts"", ""packages/tailwindcss/src/ast.ts"", ""packages/tailwindcss/src/at-import.test.ts"", ""packages/tailwindcss/src/compat/selector-parser.ts"", ""packages/tailwindcss/src/index.ts"", ""packages/tailwindcss/src/value-parser.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/ast.test.ts"", ""packages/tailwindcss/src/at-import.test.ts""], ""base_commit"": ""d566dbdef658b8c98a8c596466d74f11c72295e2"", ""head_commit"": ""e8c05e2aa2741372d30e1a0c3488cc21b2b2caec"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16300"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16300"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-06T13:30:04.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 82c7add42a23..ceba3010700c 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -17,6 +17,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Fix `order-first` and `order-last` for Firefox ([#16266](https://github.com/tailwindlabs/tailwindcss/pull/16266))\n - Ensure `NODE_PATH` is respected when resolving JavaScript and CSS files ([#16274](https://github.com/tailwindlabs/tailwindcss/pull/16274))\n - Ensure Node addons are packaged correctly with FreeBSD builds ([#16277](https://github.com/tailwindlabs/tailwindcss/pull/16277))\n+- Fix an issue where `@variant` inside a referenced stylesheet could cause a stack overflow ([#16300](https://github.com/tailwindlabs/tailwindcss/pull/16300))\n \n ## [4.0.3] - 2025-02-01\n \n\ndiff --git a/packages/tailwindcss/src/ast.ts b/packages/tailwindcss/src/ast.ts\nindex ac4529e87000..0e9215bbec0f 100644\n--- a/packages/tailwindcss/src/ast.ts\n+++ b/packages/tailwindcss/src/ast.ts\n@@ -137,39 +137,54 @@ export function walk(\n     }\n \n     path.push(node)\n+    let replacedNode = false\n+    let replacedNodeOffset = 0\n     let status =\n       visit(node, {\n         parent,\n         context,\n         path,\n         replaceWith(newNode) {\n+          replacedNode = true\n+\n           if (Array.isArray(newNode)) {\n             if (newNode.length === 0) {\n               ast.splice(i, 1)\n+              replacedNodeOffset = 0\n             } else if (newNode.length === 1) {\n               ast[i] = newNode[0]\n+              replacedNodeOffset = 1\n             } else {\n               ast.splice(i, 1, ...newNode)\n+              replacedNodeOffset = newNode.length\n             }\n           } else {\n             ast[i] = newNode\n+            replacedNodeOffset = 1\n           }\n-\n-          // We want to visit the newly replaced node(s), which start at the\n-          // current index (i). By decrementing the index here, the next loop\n-          // will process this position (containing the replaced node) again.\n-          i--\n         },\n       }) ?? WalkAction.Continue\n     path.pop()\n \n+    // We want to visit or skip the newly replaced node(s), which start at the\n+    // current index (i). By decrementing the index here, the next loop will\n+    // process this position (containing the replaced node) again.\n+    if (replacedNode) {\n+      if (status === WalkAction.Continue) {\n+        i--\n+      } else {\n+        i += replacedNodeOffset - 1\n+      }\n+      continue\n+    }\n+\n     // Stop the walk entirely\n     if (status === WalkAction.Stop) return WalkAction.Stop\n \n     // Skip visiting the children of this node\n     if (status === WalkAction.Skip) continue\n \n-    if (node.kind === 'rule' || node.kind === 'at-rule') {\n+    if ('nodes' in node) {\n       path.push(node)\n       let result = walk(node.nodes, visit, path, context)\n       path.pop()\n\ndiff --git a/packages/tailwindcss/src/compat/selector-parser.ts b/packages/tailwindcss/src/compat/selector-parser.ts\nindex f62e0aed4cec..341f9b581379 100644\n--- a/packages/tailwindcss/src/compat/selector-parser.ts\n+++ b/packages/tailwindcss/src/compat/selector-parser.ts\n@@ -92,29 +92,44 @@ export function walk(\n ) {\n   for (let i = 0; i < ast.length; i++) {\n     let node = ast[i]\n+    let replacedNode = false\n+    let replacedNodeOffset = 0\n     let status =\n       visit(node, {\n         parent,\n         replaceWith(newNode) {\n+          replacedNode = true\n+\n           if (Array.isArray(newNode)) {\n             if (newNode.length === 0) {\n               ast.splice(i, 1)\n+              replacedNodeOffset = 0\n             } else if (newNode.length === 1) {\n               ast[i] = newNode[0]\n+              replacedNodeOffset = 1\n             } else {\n               ast.splice(i, 1, ...newNode)\n+              replacedNodeOffset = newNode.length\n             }\n           } else {\n             ast[i] = newNode\n+            replacedNodeOffset = 1\n           }\n-\n-          // We want to visit the newly replaced node(s), which start at the\n-          // current index (i). By decrementing the index here, the next loop\n-          // will process this position (containing the replaced node) again.\n-          i--\n         },\n       }) ?? SelectorWalkAction.Continue\n \n+    // We want to visit or skip the newly replaced node(s), which start at the\n+    // current index (i). By decrementing the index here, the next loop will\n+    // process this position (containing the replaced node) again.\n+    if (replacedNode) {\n+      if (status === SelectorWalkAction.Continue) {\n+        i--\n+      } else {\n+        i += replacedNodeOffset - 1\n+      }\n+      continue\n+    }\n+\n     // Stop the walk entirely\n     if (status === SelectorWalkAction.Stop) return SelectorWalkAction.Stop\n \n\ndiff --git a/packages/tailwindcss/src/index.ts b/packages/tailwindcss/src/index.ts\nindex 37c19a3f3edf..14bcee2fe104 100644\n--- a/packages/tailwindcss/src/index.ts\n+++ b/packages/tailwindcss/src/index.ts\n@@ -433,15 +433,6 @@ async function parseCss(\n       } else if (params.length > 0) {\n         replaceWith(node.nodes)\n       }\n-\n-      walk(node.nodes, (node) => {\n-        if (node.kind !== 'at-rule') return\n-        if (node.name !== '@variant') return\n-\n-        variantNodes.push(node)\n-      })\n-\n-      return WalkAction.Skip\n     }\n \n     // Handle `@theme`\n\ndiff --git a/packages/tailwindcss/src/value-parser.ts b/packages/tailwindcss/src/value-parser.ts\nindex 80a7827b2e8a..dda1a7d80ab7 100644\n--- a/packages/tailwindcss/src/value-parser.ts\n+++ b/packages/tailwindcss/src/value-parser.ts\n@@ -63,29 +63,43 @@ export function walk(\n ) {\n   for (let i = 0; i < ast.length; i++) {\n     let node = ast[i]\n+    let replacedNode = false\n+    let replacedNodeOffset = 0\n     let status =\n       visit(node, {\n         parent,\n         replaceWith(newNode) {\n+          replacedNode = true\n+\n           if (Array.isArray(newNode)) {\n             if (newNode.length === 0) {\n               ast.splice(i, 1)\n+              replacedNodeOffset = 0\n             } else if (newNode.length === 1) {\n               ast[i] = newNode[0]\n+              replacedNodeOffset = 1\n             } else {\n               ast.splice(i, 1, ...newNode)\n+              replacedNodeOffset = newNode.length\n             }\n           } else {\n             ast[i] = newNode\n           }\n-\n-          // We want to visit the newly replaced node(s), which start at the\n-          // current index (i). By decrementing the index here, the next loop\n-          // will process this position (containing the replaced node) again.\n-          i--\n         },\n       }) ?? ValueWalkAction.Continue\n \n+    // We want to visit or skip the newly replaced node(s), which start at the\n+    // current index (i). By decrementing the index here, the next loop will\n+    // process this position (containing the replaced node) again.\n+    if (replacedNode) {\n+      if (status === ValueWalkAction.Continue) {\n+        i--\n+      } else {\n+        i += replacedNodeOffset - 1\n+      }\n+      continue\n+    }\n+\n     // Stop the walk entirely\n     if (status === ValueWalkAction.Stop) return ValueWalkAction.Stop\n \n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/ast.test.ts b/packages/tailwindcss/src/ast.test.ts\nindex 142fd6312ccf..8bd2004ace73 100644\n--- a/packages/tailwindcss/src/ast.test.ts\n+++ b/packages/tailwindcss/src/ast.test.ts\n@@ -1,5 +1,15 @@\n import { expect, it } from 'vitest'\n-import { context, decl, optimizeAst, styleRule, toCss, walk, WalkAction } from './ast'\n+import {\n+  atRule,\n+  context,\n+  decl,\n+  optimizeAst,\n+  styleRule,\n+  toCss,\n+  walk,\n+  WalkAction,\n+  type AstNode,\n+} from './ast'\n import * as CSS from './css-parser'\n \n const css = String.raw\n@@ -188,3 +198,310 @@ it('should not emit empty rules once optimized', () => {\n     \""\n   `)\n })\n+\n+it('should only visit children once when calling `replaceWith` with single element array', () => {\n+  let visited = new Set()\n+\n+  let ast = [\n+    atRule('@media', '', [styleRule('.foo', [decl('color', 'blue')])]),\n+    styleRule('.bar', [decl('color', 'blue')]),\n+  ]\n+\n+  walk(ast, (node, { replaceWith }) => {\n+    if (visited.has(node)) {\n+      throw new Error('Visited node twice')\n+    }\n+    visited.add(node)\n+\n+    if (node.kind === 'at-rule') replaceWith(node.nodes)\n+  })\n+})\n+\n+it('should only visit children once when calling `replaceWith` with multi-element array', () => {\n+  let visited = new Set()\n+\n+  let ast = [\n+    atRule('@media', '', [\n+      context({}, [\n+        styleRule('.foo', [decl('color', 'red')]),\n+        styleRule('.baz', [decl('color', 'blue')]),\n+      ]),\n+    ]),\n+    styleRule('.bar', [decl('color', 'green')]),\n+  ]\n+\n+  walk(ast, (node, { replaceWith }) => {\n+    let key = id(node)\n+    if (visited.has(key)) {\n+      throw new Error('Visited node twice')\n+    }\n+    visited.add(key)\n+\n+    if (node.kind === 'at-rule') replaceWith(node.nodes)\n+  })\n+\n+  expect(visited).toMatchInlineSnapshot(`\n+    Set {\n+      \""@media \"",\n+      \"".foo\"",\n+      \""color: red\"",\n+      \"".baz\"",\n+      \""color: blue\"",\n+      \"".bar\"",\n+      \""color: green\"",\n+    }\n+  `)\n+})\n+\n+it('should never visit children when calling `replaceWith` with `WalkAction.Skip`', () => {\n+  let visited = new Set()\n+\n+  let inner = styleRule('.foo', [decl('color', 'blue')])\n+\n+  let ast = [atRule('@media', '', [inner]), styleRule('.bar', [decl('color', 'blue')])]\n+\n+  walk(ast, (node, { replaceWith }) => {\n+    visited.add(node)\n+\n+    if (node.kind === 'at-rule') {\n+      replaceWith(node.nodes)\n+      return WalkAction.Skip\n+    }\n+  })\n+\n+  expect(visited).not.toContain(inner)\n+  expect(visited).toMatchInlineSnapshot(`\n+    Set {\n+      {\n+        \""kind\"": \""at-rule\"",\n+        \""name\"": \""@media\"",\n+        \""nodes\"": [\n+          {\n+            \""kind\"": \""rule\"",\n+            \""nodes\"": [\n+              {\n+                \""important\"": false,\n+                \""kind\"": \""declaration\"",\n+                \""property\"": \""color\"",\n+                \""value\"": \""blue\"",\n+              },\n+            ],\n+            \""selector\"": \"".foo\"",\n+          },\n+        ],\n+        \""params\"": \""\"",\n+      },\n+      {\n+        \""kind\"": \""rule\"",\n+        \""nodes\"": [\n+          {\n+            \""important\"": false,\n+            \""kind\"": \""declaration\"",\n+            \""property\"": \""color\"",\n+            \""value\"": \""blue\"",\n+          },\n+        ],\n+        \""selector\"": \"".bar\"",\n+      },\n+      {\n+        \""important\"": false,\n+        \""kind\"": \""declaration\"",\n+        \""property\"": \""color\"",\n+        \""value\"": \""blue\"",\n+      },\n+    }\n+  `)\n+})\n+\n+it('should skip the correct number of children based on the the replaced children nodes', () => {\n+  {\n+    let ast = [\n+      decl('--index', '0'),\n+      decl('--index', '1'),\n+      decl('--index', '2'),\n+      decl('--index', '3'),\n+      decl('--index', '4'),\n+    ]\n+    let visited: string[] = []\n+    walk(ast, (node, { replaceWith }) => {\n+      visited.push(id(node))\n+      if (node.kind === 'declaration' && node.value === '2') {\n+        replaceWith([])\n+        return WalkAction.Skip\n+      }\n+    })\n+\n+    expect(visited).toMatchInlineSnapshot(`\n+      [\n+        \""--index: 0\"",\n+        \""--index: 1\"",\n+        \""--index: 2\"",\n+        \""--index: 3\"",\n+        \""--index: 4\"",\n+      ]\n+    `)\n+  }\n+\n+  {\n+    let ast = [\n+      decl('--index', '0'),\n+      decl('--index', '1'),\n+      decl('--index', '2'),\n+      decl('--index', '3'),\n+      decl('--index', '4'),\n+    ]\n+    let visited: string[] = []\n+    walk(ast, (node, { replaceWith }) => {\n+      visited.push(id(node))\n+      if (node.kind === 'declaration' && node.value === '2') {\n+        replaceWith([])\n+        return WalkAction.Continue\n+      }\n+    })\n+\n+    expect(visited).toMatchInlineSnapshot(`\n+      [\n+        \""--index: 0\"",\n+        \""--index: 1\"",\n+        \""--index: 2\"",\n+        \""--index: 3\"",\n+        \""--index: 4\"",\n+      ]\n+    `)\n+  }\n+\n+  {\n+    let ast = [\n+      decl('--index', '0'),\n+      decl('--index', '1'),\n+      decl('--index', '2'),\n+      decl('--index', '3'),\n+      decl('--index', '4'),\n+    ]\n+    let visited: string[] = []\n+    walk(ast, (node, { replaceWith }) => {\n+      visited.push(id(node))\n+      if (node.kind === 'declaration' && node.value === '2') {\n+        replaceWith([decl('--index', '2.1')])\n+        return WalkAction.Skip\n+      }\n+    })\n+\n+    expect(visited).toMatchInlineSnapshot(`\n+      [\n+        \""--index: 0\"",\n+        \""--index: 1\"",\n+        \""--index: 2\"",\n+        \""--index: 3\"",\n+        \""--index: 4\"",\n+      ]\n+    `)\n+  }\n+\n+  {\n+    let ast = [\n+      decl('--index', '0'),\n+      decl('--index', '1'),\n+      decl('--index', '2'),\n+      decl('--index', '3'),\n+      decl('--index', '4'),\n+    ]\n+    let visited: string[] = []\n+    walk(ast, (node, { replaceWith }) => {\n+      visited.push(id(node))\n+      if (node.kind === 'declaration' && node.value === '2') {\n+        replaceWith([decl('--index', '2.1')])\n+        return WalkAction.Continue\n+      }\n+    })\n+\n+    expect(visited).toMatchInlineSnapshot(`\n+      [\n+        \""--index: 0\"",\n+        \""--index: 1\"",\n+        \""--index: 2\"",\n+        \""--index: 2.1\"",\n+        \""--index: 3\"",\n+        \""--index: 4\"",\n+      ]\n+    `)\n+  }\n+\n+  {\n+    let ast = [\n+      decl('--index', '0'),\n+      decl('--index', '1'),\n+      decl('--index', '2'),\n+      decl('--index', '3'),\n+      decl('--index', '4'),\n+    ]\n+    let visited: string[] = []\n+    walk(ast, (node, { replaceWith }) => {\n+      visited.push(id(node))\n+      if (node.kind === 'declaration' && node.value === '2') {\n+        replaceWith([decl('--index', '2.1'), decl('--index', '2.2')])\n+        return WalkAction.Skip\n+      }\n+    })\n+\n+    expect(visited).toMatchInlineSnapshot(`\n+      [\n+        \""--index: 0\"",\n+        \""--index: 1\"",\n+        \""--index: 2\"",\n+        \""--index: 3\"",\n+        \""--index: 4\"",\n+      ]\n+    `)\n+  }\n+\n+  {\n+    let ast = [\n+      decl('--index', '0'),\n+      decl('--index', '1'),\n+      decl('--index', '2'),\n+      decl('--index', '3'),\n+      decl('--index', '4'),\n+    ]\n+    let visited: string[] = []\n+    walk(ast, (node, { replaceWith }) => {\n+      visited.push(id(node))\n+      if (node.kind === 'declaration' && node.value === '2') {\n+        replaceWith([decl('--index', '2.1'), decl('--index', '2.2')])\n+        return WalkAction.Continue\n+      }\n+    })\n+\n+    expect(visited).toMatchInlineSnapshot(`\n+      [\n+        \""--index: 0\"",\n+        \""--index: 1\"",\n+        \""--index: 2\"",\n+        \""--index: 2.1\"",\n+        \""--index: 2.2\"",\n+        \""--index: 3\"",\n+        \""--index: 4\"",\n+      ]\n+    `)\n+  }\n+})\n+\n+function id(node: AstNode) {\n+  switch (node.kind) {\n+    case 'at-rule':\n+      return `${node.name} ${node.params}`\n+    case 'rule':\n+      return node.selector\n+    case 'context':\n+      return '<context>'\n+    case 'at-root':\n+      return '<at-root>'\n+    case 'declaration':\n+      return `${node.property}: ${node.value}`\n+    case 'comment':\n+      return `// ${node.value}`\n+    default:\n+      node satisfies never\n+      throw new Error('Unknown node kind')\n+  }\n+}\n\ndiff --git a/packages/tailwindcss/src/at-import.test.ts b/packages/tailwindcss/src/at-import.test.ts\nindex 108498216d9a..07922e83a44a 100644\n--- a/packages/tailwindcss/src/at-import.test.ts\n+++ b/packages/tailwindcss/src/at-import.test.ts\n@@ -586,3 +586,35 @@ test('resolves @reference as `@import \""\u2026\"" reference`', async () => {\n     \""\n   `)\n })\n+\n+test('resolves `@variant` used as `@custom-variant` inside `@reference`', async () => {\n+  let loadStylesheet = async (id: string, base: string) => {\n+    expect(base).toBe('/root')\n+    expect(id).toBe('./foo/bar.css')\n+    return {\n+      content: css`\n+        @variant dark {\n+          &:where([data-theme='dark'] *) {\n+            @slot;\n+          }\n+        }\n+      `,\n+      base: '/root/foo',\n+    }\n+  }\n+\n+  await expect(\n+    run(\n+      css`\n+        @reference './foo/bar.css';\n+        @tailwind utilities;\n+      `,\n+      { loadStylesheet, candidates: ['dark:flex'] },\n+    ),\n+  ).resolves.toMatchInlineSnapshot(`\n+    \"".dark\\\\:flex:where([data-theme=\""dark\""] *) {\n+      display: flex;\n+    }\n+    \""\n+  `)\n+})\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16266"", ""pr_id"": 16266, ""issue_id"": 16165, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] order-first/last not working in Firefox\n**What version of Tailwind CSS are you using?**\n\nv4.0.3\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nN/A\n\n**What version of Node.js are you using?**\n\nN/A\n\n**What browser are you using?**\n\nFirefox\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/ouC5jv8TNd\n\n**Describe your issue**\n\nIn Firefox this renders as `lastfirst`. In Chrome this renders as `firstlast`. It would appear the the `infinity` values (locally they seem to become `2147483648`) being used don't play ball with Firefox?\n\nIn v3 these used `9999` as their value, which worked."", ""issue_word_count"": 111, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""3b61277e7afa7e2febddcb3c27a850ea42d6d70d"", ""head_commit"": ""04863f104674b9b2a07dc2d1f5498778bdc34825"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16266"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16266"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-05T11:04:43.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 71cd3e343d54..ab3333224cc9 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -14,6 +14,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure that the `containers` JS theme key is added to the `--container-*` namespace ([#16169](https://github.com/tailwindlabs/tailwindcss/pull/16169))\n - Fix missing `@keyframes` definition ([#16237](https://github.com/tailwindlabs/tailwindcss/pull/16237))\n - Vite: Skip parsing stylesheets with the `?commonjs-proxy` flag ([#16238](https://github.com/tailwindlabs/tailwindcss/pull/16238))\n+- Fix `order-first` and `order-last` for Firefox ([#16266](https://github.com/tailwindlabs/tailwindcss/pull/16266))\n \n ## [4.0.3] - 2025-02-01\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 9f4a1039be95..3dadacac113d 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -576,8 +576,8 @@ export function createUtilities(theme: Theme) {\n   /**\n    * @css `order`\n    */\n-  staticUtility('order-first', [['order', 'calc(-infinity)']])\n-  staticUtility('order-last', [['order', 'calc(infinity)']])\n+  staticUtility('order-first', [['order', '-9999']])\n+  staticUtility('order-last', [['order', '9999']])\n   staticUtility('order-none', [['order', '0']])\n   functionalUtility('order', {\n     supportsNegative: true,\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 10720b167759..4da13ed6469d 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -1053,11 +1053,11 @@ test('order', async () => {\n     }\n \n     .order-first {\n-      order: calc(-infinity);\n+      order: -9999;\n     }\n \n     .order-last {\n-      order: calc(infinity);\n+      order: 9999;\n     }\n \n     .order-none {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16238"", ""pr_id"": 16238, ""issue_id"": 16233, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] [Vite] Invalid declaration\n**What version of Tailwind CSS are you using?**\n\n4.0.3\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nvite\n\n**What version of Node.js are you using?**\n\nv23.7.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nhttps://codesandbox.io/p/devbox/laughing-williamson-s5kvz2?file=%2Fmain.js%3A4%2C37\n\n**Describe your issue**\n\nRunning `vite build` in the linked CodeSandbox results in:\n```\nworkspace git:(main) \u2717 pnpm build\n\n> vite-js@0.0.0 build /project/workspace\n> vite build\n\nvite v6.0.11 building for production...\n\u2713 418 modules transformed.\nx Build failed in 3.40s\nerror during build:\n[@tailwindcss/vite:generate:build] Invalid declaration: `import * as maplibreGl from \""/project/workspace/node_modules/.pnpm/maplibre-gl@4.7.1/node_modules/maplibre-gl/dist/maplibre-gl.css\""`\nfile: /project/workspace/node_modules/.pnpm/maplibre-gl@4.7.1/node_modules/maplibre-gl/dist/maplibre-gl.css?commonjs-proxy\n    at X (file:///project/workspace/node_modules/.pnpm/tailwindcss@4.0.3/node_modules/tailwindcss/dist/lib.mjs:3:1804)\n    at tl (file:///project/workspace/node_modules/.pnpm/tailwindcss@4.0.3/node_modules/tailwindcss/dist/lib.mjs:33:1566)\n    at tt (file:///project/workspace/node_modules/.pnpm/@tailwindcss+node@4.0.3/node_modules/@tailwindcss/node/dist/index.mjs:10:3328)\n    at _.generate (file:///project/workspace/node_modules/.pnpm/@tailwindcss+vite@4.0.3_vite@6.0.11/node_modules/@tailwindcss/vite/dist/index.mjs:1:5387)\n    at Object.transform (file:///project/workspace/node_modules/.pnpm/@tailwindcss+vite@4.0.3_vite@6.0.11/node_modules/@tailwindcss/vite/dist/index.mjs:1:3735)\n    at Object.handler (file:///project/workspace/node_modules/.pnpm/vite@6.0.11/node_modules/vite/dist/node/chunks/dep-M1IYMR16.js:51337:15)\n    at file:///project/workspace/node_modules/.pnpm/rollup@4.24.4/node_modules/rollup/dist/es/shared/node-entry.js:20789:40\n\u2009ELIFECYCLE\u2009 Command failed with exit code 1.\n```\n\nThe same codebase used to work when running tailwind 3 via postcss. I also tried excluding the file via `content: [\""./index.html\"", \""./**/*.js\"", \""!**/maplibre-gl.css\""]`, but without any success.\n"", ""issue_word_count"": 343, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/index.test.ts"", ""packages/@tailwindcss-vite/src/index.ts""], ""pr_changed_test_files"": [""integrations/vite/index.test.ts""], ""base_commit"": ""06dfa399e6775c764d1e538239a6cdf08da55ca3"", ""head_commit"": ""8a3b121118156e7f3c822d26a09914c47f627f44"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16238"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16238"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-04T11:45:23.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 7ff6cdbb6bc3..f046da58c0f9 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -9,8 +9,9 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ### Fixed\n \n-- Ensure that the `containers` JS theme key is added to the `--container-*` namespace. ([#16169](https://github.com/tailwindlabs/tailwindcss/pull/16169))\n+- Ensure that the `containers` JS theme key is added to the `--container-*` namespace ([#16169](https://github.com/tailwindlabs/tailwindcss/pull/16169))\n - Fix missing `@keyframes` definition ([#16237](https://github.com/tailwindlabs/tailwindcss/pull/16237))\n+- Vite: Skip parsing stylesheets with the `?commonjs-proxy` flag ([#16238](https://github.com/tailwindlabs/tailwindcss/pull/16238))\n \n ## [4.0.3] - 2025-02-01\n \n\ndiff --git a/packages/@tailwindcss-vite/src/index.ts b/packages/@tailwindcss-vite/src/index.ts\nindex c7cc111fad05..0d74400944ea 100644\n--- a/packages/@tailwindcss-vite/src/index.ts\n+++ b/packages/@tailwindcss-vite/src/index.ts\n@@ -7,7 +7,8 @@ import path from 'node:path'\n import type { Plugin, ResolvedConfig, Rollup, Update, ViteDevServer } from 'vite'\n \n const DEBUG = env.DEBUG\n-const SPECIAL_QUERY_RE = /[?&](raw|url)\\b/\n+const SPECIAL_QUERY_RE = /[?&](?:worker|sharedworker|raw|url)\\b/\n+const COMMON_JS_PROXY_RE = /\\?commonjs-proxy/\n const INLINE_STYLE_ID_RE = /[?&]index\\=\\d+\\.css$/\n \n const IGNORED_DEPENDENCIES = ['tailwind-merge']\n@@ -315,8 +316,9 @@ function isPotentialCssRootFile(id: string) {\n   let isCssFile =\n     (extension === 'css' || id.includes('&lang.css') || id.match(INLINE_STYLE_ID_RE)) &&\n     // Don't intercept special static asset resources\n-    !SPECIAL_QUERY_RE.test(id)\n-\n+    !SPECIAL_QUERY_RE.test(id) &&\n+    !COMMON_JS_PROXY_RE.test(id)\n+  if (isCssFile) console.log(id)\n   return isCssFile\n }\n \n"", ""test_patch"": ""diff --git a/integrations/vite/index.test.ts b/integrations/vite/index.test.ts\nindex eebe11127a05..c0bee2b878cc 100644\n--- a/integrations/vite/index.test.ts\n+++ b/integrations/vite/index.test.ts\n@@ -841,6 +841,49 @@ test(\n   },\n )\n \n+test(\n+  `does not interfere with ?commonjs-proxy modules`,\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""type\"": \""module\"",\n+          \""dependencies\"": {\n+            \""@tailwindcss/vite\"": \""workspace:^\"",\n+            \""tailwindcss\"": \""workspace:^\"",\n+            \""plotly.js\"": \""^3\"",\n+            \""vite\"": \""^6\""\n+          }\n+        }\n+      `,\n+      'vite.config.ts': ts`\n+        import tailwindcss from '@tailwindcss/vite'\n+        import { defineConfig } from 'vite'\n+\n+        export default defineConfig({\n+          build: { cssMinify: false },\n+          plugins: [tailwindcss()],\n+        })\n+      `,\n+      'index.html': html`\n+        <head>\n+          <script type=\""module\"" src=\""./src/index.js\""></script>\n+        </head>\n+      `,\n+      'src/index.js': js`import Plotly from 'plotly.js/lib/core'`,\n+    },\n+  },\n+  async ({ exec, expect, fs }) => {\n+    await exec('pnpm vite build')\n+\n+    let files = await fs.glob('dist/**/*.css')\n+    expect(files).toHaveLength(1)\n+    let [filename] = files[0]\n+\n+    await fs.expectFileToContain(filename, [candidate`maplibregl-map`])\n+  },\n+)\n+\n function firstLine(str: string) {\n   return str.split('\\n')[0]\n }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16237"", ""pr_id"": 16237, ""issue_id"": 16227, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Custom keyframes are not generated if the value of an animation variable contains a line break between the keyframe name and duration\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.3\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 6.0.5\n\n**What version of Node.js are you using?**\n\nv18.18.2\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nWSL\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/PyXgGbc7uU?file=css\n\n**Describe your issue**\n\nIf the keyframe name and duration are on different lines, the custom keyframe is not generated.\n\n```\n--animate-foo: <keyframe-name>\n  <duration> <easing-function> <delay> <iteration-count> <direction> <fill-mode> <play-state>\n```\n\nIf the keyframe name and duration are on the same line, the custom keyframe is generated.\n\n```\n--animate-foo: <keyframe-name> <duration>\n  <easing-function> <delay> <iteration-count> <direction> <fill-mode> <play-state>\n```"", ""issue_word_count"": 184, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/index.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/index.test.ts""], ""base_commit"": ""ac202ffd50e6009982da4d31db6e2aea3600666d"", ""head_commit"": ""929cfaaa2ec1de7e62c6c7e99866408163a583df"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16237"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16237"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-04T11:38:31.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex c2686352696a..7ff6cdbb6bc3 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -7,11 +7,10 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ## [Unreleased]\n \n-- Nothing yet!\n-\n ### Fixed\n \n - Ensure that the `containers` JS theme key is added to the `--container-*` namespace. ([#16169](https://github.com/tailwindlabs/tailwindcss/pull/16169))\n+- Fix missing `@keyframes` definition ([#16237](https://github.com/tailwindlabs/tailwindcss/pull/16237))\n \n ## [4.0.3] - 2025-02-01\n \n\ndiff --git a/packages/tailwindcss/src/index.ts b/packages/tailwindcss/src/index.ts\nindex 2baed9acf6a5..37c19a3f3edf 100644\n--- a/packages/tailwindcss/src/index.ts\n+++ b/packages/tailwindcss/src/index.ts\n@@ -545,7 +545,7 @@ async function parseCss(\n     let keyframesRules = theme.getKeyframes()\n     if (keyframesRules.length > 0) {\n       let animationParts = [...theme.namespace('--animate').values()].flatMap((animation) =>\n-        animation.split(' '),\n+        animation.split(/\\s+/),\n       )\n \n       for (let keyframesRule of keyframesRules) {\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex 67a0a3d64dab..497ccc034173 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -1170,6 +1170,45 @@ describe('Parsing themes values from CSS', () => {\n     `)\n   })\n \n+  test('`@keyframes` in `@theme` are generated when name contains a new line', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @theme {\n+            --animate-very-long-animation-name: very-long-animation-name\n+              var(\n+                --very-long-animation-name-configuration,\n+                2.5s ease-in-out 0s infinite normal none running\n+              );\n+\n+            @keyframes very-long-animation-name {\n+              to {\n+                opacity: 1;\n+              }\n+            }\n+          }\n+\n+          @tailwind utilities;\n+        `,\n+        ['animate-very-long-animation-name'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"":root, :host {\n+        --animate-very-long-animation-name: very-long-animation-name var(--very-long-animation-name-configuration, 2.5s ease-in-out 0s infinite normal none running);\n+      }\n+\n+      .animate-very-long-animation-name {\n+        animation: var(--animate-very-long-animation-name);\n+      }\n+\n+      @keyframes very-long-animation-name {\n+        to {\n+          opacity: 1;\n+        }\n+      }\""\n+    `)\n+  })\n+\n   test('`@theme` values can be unset', async () => {\n     expect(\n       await compileCss(\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16210"", ""pr_id"": 16210, ""issue_id"": 16035, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] \""Cannot read properties of null (reading '50')\"" when using `theme.extend.colors.zinc: null`\n**What version of Tailwind CSS are you using?**\n\n `\""tailwindcss\"": \""^4.0.1\"",\""@tailwindcss/vite\"": \""^4.0.1\"",`\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nAstro\n\n**What version of Node.js are you using?**\n\n `v22.13.1 (npm v10.9.2)`\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\n macOS\n\n\n\n**Describe your issue**\n\nTailwind 4 chokes when colors are set to `null` in the JS config.\n\nI used to have code like this in my config to force only one color of gray and disable the autocomplete and class generation for all other colors:\n\n```\n  theme: {\n    extend: {\n      colors: {\n        gray: colors.stone,\n        slate: null,\n        zinc: null,\n        neutral: null,\n        stone: null,\n      },\n    },\n  },\n```\n\nWith those settings I am getting errors like \n```\n07:13:33 [ERROR] Cannot read properties of null (reading '50')\n  Stack trace:\n    at /Users/\u2026/Development/\u2026/src/layouts/base.css\n    [...] See full stack trace in the browser, or rerun with --verbose.\n```\n\nThis error shows when using the `npx @tailwindcss/upgrade@next` as well as when I update manually (referencing the js config from the css file) and use the vite Plugin in Astro.\n\n---\n\nI see the new way to disable default colors is https://tailwindcss.com/docs/colors#disabling-default-colors which does work once I remove the `null` lines from my js config."", ""issue_word_count"": 235, ""test_files_count"": 3, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/compat/apply-config-to-theme.test.ts"", ""packages/tailwindcss/src/compat/config.test.ts"", ""packages/tailwindcss/src/compat/config/resolve-config.test.ts"", ""packages/tailwindcss/src/compat/plugin-functions.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/compat/apply-config-to-theme.test.ts"", ""packages/tailwindcss/src/compat/config.test.ts"", ""packages/tailwindcss/src/compat/config/resolve-config.test.ts""], ""base_commit"": ""5601fb50a90a2cc1d51890b8fde0ace696a93958"", ""head_commit"": ""a362451ef2195801dd5215cbfc6c41b0b9bc5e5d"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16210"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16210"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-04T14:43:49.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 49e087548bd5..71cd3e343d54 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -9,6 +9,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ### Fixed\n \n+- Fix a crash when setting JS theme values to `null` ([#16210](https://github.com/tailwindlabs/tailwindcss/pull/16210))\n - Ensure CSS variables in arbitrary values are properly decoded ([#16206](https://github.com/tailwindlabs/tailwindcss/pull/16206))\n - Ensure that the `containers` JS theme key is added to the `--container-*` namespace ([#16169](https://github.com/tailwindlabs/tailwindcss/pull/16169))\n - Fix missing `@keyframes` definition ([#16237](https://github.com/tailwindlabs/tailwindcss/pull/16237))\n\ndiff --git a/packages/tailwindcss/src/compat/plugin-functions.ts b/packages/tailwindcss/src/compat/plugin-functions.ts\nindex 9e3917eaaf90..339bd11c6ce7 100644\n--- a/packages/tailwindcss/src/compat/plugin-functions.ts\n+++ b/packages/tailwindcss/src/compat/plugin-functions.ts\n@@ -224,7 +224,7 @@ function get(obj: any, path: string[]) {\n     let key = path[i]\n \n     // The key does not exist so concatenate it with the next key\n-    if (obj[key] === undefined) {\n+    if (obj?.[key] === undefined) {\n       if (path[i + 1] === undefined) {\n         return undefined\n       }\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/compat/apply-config-to-theme.test.ts b/packages/tailwindcss/src/compat/apply-config-to-theme.test.ts\nindex 23f5c46cb720..619c99182123 100644\n--- a/packages/tailwindcss/src/compat/apply-config-to-theme.test.ts\n+++ b/packages/tailwindcss/src/compat/apply-config-to-theme.test.ts\n@@ -223,3 +223,39 @@ test('converts opacity modifiers from decimal to percentage values', () => {\n   expect(theme.resolve('20', ['--opacity'])).toEqual('20%')\n   expect(theme.resolve('25', ['--opacity'])).toEqual('25%')\n })\n+\n+test('handles setting theme keys to null', async () => {\n+  let theme = new Theme()\n+  let design = buildDesignSystem(theme)\n+\n+  theme.add('--color-blue-400', 'blue', ThemeOptions.DEFAULT)\n+  theme.add('--color-blue-500', '#3b82f6')\n+  theme.add('--color-red-400', 'red', ThemeOptions.DEFAULT)\n+  theme.add('--color-red-500', '#ef4444')\n+\n+  let { resolvedConfig, replacedThemeKeys } = resolveConfig(design, [\n+    {\n+      config: {\n+        theme: {\n+          extend: {\n+            colors: {\n+              blue: null,\n+            },\n+          },\n+        },\n+      },\n+      base: '/root',\n+      reference: false,\n+    },\n+  ])\n+  applyConfigToTheme(design, resolvedConfig, replacedThemeKeys)\n+\n+  expect(theme.namespace('--color')).toMatchInlineSnapshot(`\n+    Map {\n+      \""blue-400\"" => \""blue\"",\n+      \""blue-500\"" => \""#3b82f6\"",\n+      \""red-400\"" => \""red\"",\n+      \""red-500\"" => \""#ef4444\"",\n+    }\n+  `)\n+})\n\ndiff --git a/packages/tailwindcss/src/compat/config.test.ts b/packages/tailwindcss/src/compat/config.test.ts\nindex 4b095c1724f6..eb18cd734f21 100644\n--- a/packages/tailwindcss/src/compat/config.test.ts\n+++ b/packages/tailwindcss/src/compat/config.test.ts\n@@ -1628,3 +1628,54 @@ test('old theme values are merged with their renamed counterparts in the CSS the\n \n   expect(didCallPluginFn).toHaveBeenCalled()\n })\n+\n+test('handles setting theme keys to null', async () => {\n+  let compiler = await compile(\n+    css`\n+      @theme default {\n+        --color-red-50: oklch(0.971 0.013 17.38);\n+        --color-red-100: oklch(0.936 0.032 17.717);\n+      }\n+      @config \""./my-config.js\"";\n+      @tailwind utilities;\n+      @theme {\n+        --color-red-100: oklch(0.936 0.032 17.717);\n+        --color-red-200: oklch(0.885 0.062 18.334);\n+      }\n+    `,\n+    {\n+      loadModule: async () => {\n+        return {\n+          module: {\n+            theme: {\n+              extend: {\n+                colors: {\n+                  red: null,\n+                },\n+              },\n+            },\n+          },\n+          base: '/root',\n+        }\n+      },\n+    },\n+  )\n+\n+  expect(compiler.build(['bg-red-50', 'bg-red-100', 'bg-red-200'])).toMatchInlineSnapshot(`\n+    \"":root, :host {\n+      --color-red-50: oklch(0.971 0.013 17.38);\n+      --color-red-100: oklch(0.936 0.032 17.717);\n+      --color-red-200: oklch(0.885 0.062 18.334);\n+    }\n+    .bg-red-50 {\n+      background-color: var(--color-red-50);\n+    }\n+    .bg-red-100 {\n+      background-color: var(--color-red-100);\n+    }\n+    .bg-red-200 {\n+      background-color: var(--color-red-200);\n+    }\n+    \""\n+  `)\n+})\n\ndiff --git a/packages/tailwindcss/src/compat/config/resolve-config.test.ts b/packages/tailwindcss/src/compat/config/resolve-config.test.ts\nindex 0a1daeee6b49..d96bdc7008b8 100644\n--- a/packages/tailwindcss/src/compat/config/resolve-config.test.ts\n+++ b/packages/tailwindcss/src/compat/config/resolve-config.test.ts\n@@ -254,3 +254,48 @@ test('theme keys can read from the CSS theme', () => {\n     new Set(['colors', 'accentColor', 'placeholderColor', 'caretColor', 'transitionColor']),\n   )\n })\n+\n+test('handles null as theme values', () => {\n+  let theme = new Theme()\n+  theme.add('--color-red-50', 'red')\n+  theme.add('--color-red-100', 'red')\n+\n+  let design = buildDesignSystem(theme)\n+\n+  let { resolvedConfig, replacedThemeKeys } = resolveConfig(design, [\n+    {\n+      config: {\n+        theme: {\n+          colors: ({ theme }) => ({\n+            // Reads from the --color-* namespace\n+            ...theme('color'),\n+          }),\n+        },\n+      },\n+      base: '/root',\n+      reference: false,\n+    },\n+    {\n+      config: {\n+        theme: {\n+          extend: {\n+            colors: {\n+              red: null,\n+            },\n+          },\n+        },\n+      },\n+      base: '/root',\n+      reference: false,\n+    },\n+  ])\n+\n+  expect(resolvedConfig).toMatchObject({\n+    theme: {\n+      colors: {\n+        red: null,\n+      },\n+    },\n+  })\n+  expect(replacedThemeKeys).toEqual(new Set(['colors']))\n+})\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16103"", ""pr_id"": 16103, ""issue_id"": 16100, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""CSS variables created by plugins are modified\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.1\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\n- Pull tailwindcss project\n- Add the test below to `packages/tailwindcss/src/plugin.test.ts`\n\n```diff\ndiff --git a/packages/tailwindcss/src/plugin.test.ts b/packages/tailwindcss/src/plugin.test.ts\nindex 9af3a55f..89129df7 100644\n--- a/packages/tailwindcss/src/plugin.test.ts\n+++ b/packages/tailwindcss/src/plugin.test.ts\n@@ -32,6 +32,36 @@ test('plugin', async () => {\n   `)\n })\n \n+test('plugin CSS variables', async () => {\n+  let input = css`\n+    @plugin \""my-plugin\"";\n+  `\n+\n+  let compiler = await compile(input, {\n+    loadModule: async () => ({\n+      module: plugin(function ({ addBase }) {\n+        addBase({\n+          body: {\n+            '--jun-drawerOpen': '1',\n+            '--jun-ES-drawerWidth': '18rem',\n+          },\n+        })\n+      }),\n+      base: '/root',\n+    }),\n+  })\n+\n+  expect(compiler.build([])).toMatchInlineSnapshot(`\n+    \""@layer base {\n+      body {\n+        --jun-drawerOpen: 1;\n+        --jun-ES-drawerWidth: 18rem;\n+      }\n+    }\n+    \""\n+  `)\n+})\n+\n test('plugin.withOptions', async () => {\n   let input = css`\n     @plugin \""my-plugin\"";\n\n```\n\nRun the test to see the error:\n\n<img width=\""631\"" alt=\""Image\"" src=\""https://github.com/user-attachments/assets/b61ffa5a-4630-4b40-bf3d-3759a8a9feb3\"" />\n\n**Describe your issue**\n\nTailwind CSS should not modify the CSS variables created by plugins."", ""issue_word_count"": 212, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/compat/plugin-api.test.ts"", ""packages/tailwindcss/src/compat/plugin-api.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/compat/plugin-api.test.ts""], ""base_commit"": ""d85e9cfcab27f6e42a7e8a791979e072015790a3"", ""head_commit"": ""bf1fe352dc57314150df3dafe0bb63072be19be3"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16103"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16103"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-31T11:44:30.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 82bb2a70551c..7a95136a0e91 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -14,6 +14,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Refactor gradient implementation to work around [prettier/prettier#17058](https://github.com/prettier/prettier/issues/17058) ([#16072](https://github.com/tailwindlabs/tailwindcss/pull/16072))\n - Vite: Ensure hot-reloading works with SolidStart setups ([#16052](https://github.com/tailwindlabs/tailwindcss/pull/16052))\n - Vite: Fix a crash when starting the development server in SolidStart setups ([#16052](https://github.com/tailwindlabs/tailwindcss/pull/16052))\n+- Prevent camelCasing CSS custom properties added by JavaScript plugins ([#16103](https://github.com/tailwindlabs/tailwindcss/pull/16103))\n \n ## [4.0.1] - 2025-01-29\n \n\ndiff --git a/packages/tailwindcss/src/compat/plugin-api.ts b/packages/tailwindcss/src/compat/plugin-api.ts\nindex 13673280769b..8db4d68973fb 100644\n--- a/packages/tailwindcss/src/compat/plugin-api.ts\n+++ b/packages/tailwindcss/src/compat/plugin-api.ts\n@@ -499,15 +499,18 @@ export function objectToAst(rules: CssInJs | CssInJs[]): AstNode[] {\n \n   for (let [name, value] of entries) {\n     if (typeof value !== 'object') {\n-      if (!name.startsWith('--') && value === '@slot') {\n-        ast.push(rule(name, [atRule('@slot')]))\n-      } else {\n+      if (!name.startsWith('--')) {\n+        if (value === '@slot') {\n+          ast.push(rule(name, [atRule('@slot')]))\n+          continue\n+        }\n+\n         // Convert camelCase to kebab-case:\n         // https://github.com/postcss/postcss-js/blob/b3db658b932b42f6ac14ca0b1d50f50c4569805b/parser.js#L30-L35\n         name = name.replace(/([A-Z])/g, '-$1').toLowerCase()\n-\n-        ast.push(decl(name, String(value)))\n       }\n+\n+      ast.push(decl(name, String(value)))\n     } else if (Array.isArray(value)) {\n       for (let item of value) {\n         if (typeof item === 'string') {\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/compat/plugin-api.test.ts b/packages/tailwindcss/src/compat/plugin-api.test.ts\nindex 539c04a3c66c..4502118f458f 100644\n--- a/packages/tailwindcss/src/compat/plugin-api.test.ts\n+++ b/packages/tailwindcss/src/compat/plugin-api.test.ts\n@@ -1534,6 +1534,38 @@ describe('addBase', () => {\n       \""\n     `)\n   })\n+\n+  test('does not modify CSS variables', async () => {\n+    let input = css`\n+      @plugin \""my-plugin\"";\n+    `\n+\n+    let compiler = await compile(input, {\n+      loadModule: async () => ({\n+        module: plugin(function ({ addBase }) {\n+          addBase({\n+            ':root': {\n+              '--PascalCase': '1',\n+              '--camelCase': '1',\n+              '--UPPERCASE': '1',\n+            },\n+          })\n+        }),\n+        base: '/root',\n+      }),\n+    })\n+\n+    expect(compiler.build([])).toMatchInlineSnapshot(`\n+      \""@layer base {\n+        :root {\n+          --PascalCase: 1;\n+          --camelCase: 1;\n+          --UPPERCASE: 1;\n+        }\n+      }\n+      \""\n+    `)\n+  })\n })\n \n describe('addVariant', () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16078"", ""pr_id"": 16078, ""issue_id"": 16039, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""`@tailwindcss/vite` breaks `url()` using `resolve.alias`\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\n4.0.1\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nVite 6.0.11 with @tailwindcss/vite 4.0.1\n\nFor example: postcss-cli 8.3.1, Next.js 10.0.9, webpack 5.28.0\n\n**What version of Node.js are you using?**\n\n22.13.0\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nWindows\n\n**Reproduction URL**\n\nhttps://stackblitz.com/edit/vitejs-vite-twabw18q?file=vite.config.ts,src%2Fstyles%2Fstyle.css&terminal=dev\n\n1. Download the project from this button\n    ![Image](https://github.com/user-attachments/assets/56ddae73-e21d-44f1-82b4-741e34c650d0) \n2. Run `npm i`\n3. Run `npm run dev`\n4. Open `http://localhost:5173`\n5. The background image is not shown\n    ![Image](https://github.com/user-attachments/assets/ce1797fd-230f-4596-bc00-41315c008b8a)\n\n**Describe your issue**\n\nIn Vite, I can use alias set with `resolve.alias` in `url()`. For example:\n```css\n.logo.vanilla {\n  background-image: url('~/images/javascript.svg');\n}\n```\nThis does not work when `@tailwindcss/vite` is used. (It works when `@tailwind/postcss` is used with Vite)\n\nIf you comment out `plugins: [tailwind()],` from `vite.config.ts` in the reproduction, you can see the background image shown, which is the expected behavior.\n![Image](https://github.com/user-attachments/assets/9b2e34bb-8a68-4843-b4c1-a015116804fd)"", ""issue_word_count"": 268, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/@tailwindcss-node/src/urls.test.ts"", ""packages/@tailwindcss-node/src/urls.ts""], ""pr_changed_test_files"": [""packages/@tailwindcss-node/src/urls.test.ts""], ""base_commit"": ""88c890615a529cc8f7f253d75e25bd19bcf7e306"", ""head_commit"": ""6d6c55c1baa42d3c40cfb0f1bc48cb2cd7389f39"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16078"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16078"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-31T14:23:33.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 7a95136a0e91..0c793877606b 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -14,6 +14,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Refactor gradient implementation to work around [prettier/prettier#17058](https://github.com/prettier/prettier/issues/17058) ([#16072](https://github.com/tailwindlabs/tailwindcss/pull/16072))\n - Vite: Ensure hot-reloading works with SolidStart setups ([#16052](https://github.com/tailwindlabs/tailwindcss/pull/16052))\n - Vite: Fix a crash when starting the development server in SolidStart setups ([#16052](https://github.com/tailwindlabs/tailwindcss/pull/16052))\n+- Vite: Don't rebase urls that appear to be aliases ([#16078](https://github.com/tailwindlabs/tailwindcss/pull/16078))\n - Prevent camelCasing CSS custom properties added by JavaScript plugins ([#16103](https://github.com/tailwindlabs/tailwindcss/pull/16103))\n \n ## [4.0.1] - 2025-01-29\n\ndiff --git a/packages/@tailwindcss-node/src/urls.ts b/packages/@tailwindcss-node/src/urls.ts\nindex c4d56deb7e60..e35b9d280a06 100644\n--- a/packages/@tailwindcss-node/src/urls.ts\n+++ b/packages/@tailwindcss-node/src/urls.ts\n@@ -149,9 +149,12 @@ async function doUrlReplace(\n   return `${funcName}(${wrap}${newUrl}${wrap})`\n }\n \n-function skipUrlReplacer(rawUrl: string) {\n+function skipUrlReplacer(rawUrl: string, aliases?: string[]) {\n   return (\n-    isExternalUrl(rawUrl) || isDataUrl(rawUrl) || rawUrl[0] === '#' || functionCallRE.test(rawUrl)\n+    isExternalUrl(rawUrl) ||\n+    isDataUrl(rawUrl) ||\n+    !rawUrl[0].match(/[\\.a-zA-Z0-9_]/) ||\n+    functionCallRE.test(rawUrl)\n   )\n }\n \n"", ""test_patch"": ""diff --git a/packages/@tailwindcss-node/src/urls.test.ts b/packages/@tailwindcss-node/src/urls.test.ts\nindex 3378e45edbdc..16ba352a7f66 100644\n--- a/packages/@tailwindcss-node/src/urls.test.ts\n+++ b/packages/@tailwindcss-node/src/urls.test.ts\n@@ -24,6 +24,20 @@ test('URLs can be rewritten', async () => {\n         background: url('/image.jpg');\n         background: url(\""/image.jpg\"");\n \n+        /* Potentially Vite-aliased URLs: ignored */\n+        background: url(~/image.jpg);\n+        background: url(~/foo/image.jpg);\n+        background: url('~/image.jpg');\n+        background: url(\""~/image.jpg\"");\n+        background: url(#/image.jpg);\n+        background: url(#/foo/image.jpg);\n+        background: url('#/image.jpg');\n+        background: url(\""#/image.jpg\"");\n+        background: url(@/image.jpg);\n+        background: url(@/foo/image.jpg);\n+        background: url('@/image.jpg');\n+        background: url(\""@/image.jpg\"");\n+\n         /* External URL: ignored */\n         background: url(http://example.com/image.jpg);\n         background: url('http://example.com/image.jpg');\n@@ -109,6 +123,18 @@ test('URLs can be rewritten', async () => {\n       background: url(/foo/image.jpg);\n       background: url('/image.jpg');\n       background: url(\""/image.jpg\"");\n+      background: url(~/image.jpg);\n+      background: url(~/foo/image.jpg);\n+      background: url('~/image.jpg');\n+      background: url(\""~/image.jpg\"");\n+      background: url(#/image.jpg);\n+      background: url(#/foo/image.jpg);\n+      background: url('#/image.jpg');\n+      background: url(\""#/image.jpg\"");\n+      background: url(@/image.jpg);\n+      background: url(@/foo/image.jpg);\n+      background: url('@/image.jpg');\n+      background: url(\""@/image.jpg\"");\n       background: url(http://example.com/image.jpg);\n       background: url('http://example.com/image.jpg');\n       background: url(\""http://example.com/image.jpg\"");\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16069"", ""pr_id"": 16069, ""issue_id"": 16036, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Cannot use HTML style tag with Vite to apply a theme\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.1\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nLatest Vite with autoprefixer\n\n**What version of Node.js are you using?**\n\nNodeJS v22.10.0\n\n**What browser are you using?**\n\nBrave\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<style>\n\t\t\t@import \""tailwindcss\"";\n\t\t\t@layer components {\n\t\t\t\th1{\n\t\t\t\t\t@apply text-2xl;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n    <h1>Test</h1>\n  </body>\n</html>\n```\n\nVite config\n```js\nmodule.exports = {\n\troot: \""./example\"",\n\tbase: \""./\"",\n\tappType: \""custom\"",\n\tbuild: {\n\t\trollupOptions: {\n\t\t\tinput: \""./example/test.html\"",\n\t\t},\n\t\toutDir: \""./example-min/\"",\n\t\temptyOutDir: true,\n\t\tcopyPublicDir: false,\n\t},\n\tplugins: [\n\t\ttailwindcss(),\n\t],\n\tcss: {\n\t\tpostcss: {\n\t\t\tplugins: [autoprefixer()],\n\t\t},\n\t},\n}\n```\n\n**Describe your issue**\n\nWe have single HTML files which are report templates in a facility for analysis reportings that are styled with tailwindcss. These are later processed by Vite to reduce their size and to process tailwindcss classes. We aren't able to support external CSS or JS here since these templates are generated by another tool which has its own syntax and templates. When processing these HTML with Vite tailwindcss seems to ignore inline CSS even with `text/tailwindcss`. Using the CDN works fine, but our reports need to work offline (companies that size do not allow these machines to have internet access on pruporse ofc). The reason we use the style tag is because that way we can provided a versioned theme to each report template and do not need to touch our template files which consist of many smaller modules that we do not want to touch that often and because each customer can have its own styled theme or custom styles for individuallity."", ""issue_word_count"": 319, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/html-style-blocks.test.ts"", ""packages/@tailwindcss-vite/src/index.ts""], ""pr_changed_test_files"": [""integrations/vite/html-style-blocks.test.ts""], ""base_commit"": ""deb33a93abbd94fd40fd2471f47df2e075a2107c"", ""head_commit"": ""d3427d7fb86a57984cd417ff92a62faec4d24ee9"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16069"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16069"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-31T14:26:45.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 77bdc10f48bf..ff0ec536b880 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -16,6 +16,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Vite: Ensure hot-reloading works with SolidStart setups ([#16052](https://github.com/tailwindlabs/tailwindcss/pull/16052))\n - Vite: Fix a crash when starting the development server in SolidStart setups ([#16052](https://github.com/tailwindlabs/tailwindcss/pull/16052))\n - Vite: Don't rebase urls that appear to be aliases ([#16078](https://github.com/tailwindlabs/tailwindcss/pull/16078))\n+- Vite: Transform `<style>` blocks in HTML files ([#16069](https://github.com/tailwindlabs/tailwindcss/pull/16069))\n - Prevent camelCasing CSS custom properties added by JavaScript plugins ([#16103](https://github.com/tailwindlabs/tailwindcss/pull/16103))\n - Do not emit `@keyframes` in `@theme reference` ([#16120](https://github.com/tailwindlabs/tailwindcss/pull/16120))\n \n\ndiff --git a/packages/@tailwindcss-vite/src/index.ts b/packages/@tailwindcss-vite/src/index.ts\nindex 86d5d6142d5c..c7cc111fad05 100644\n--- a/packages/@tailwindcss-vite/src/index.ts\n+++ b/packages/@tailwindcss-vite/src/index.ts\n@@ -8,6 +8,7 @@ import type { Plugin, ResolvedConfig, Rollup, Update, ViteDevServer } from 'vite\n \n const DEBUG = env.DEBUG\n const SPECIAL_QUERY_RE = /[?&](raw|url)\\b/\n+const INLINE_STYLE_ID_RE = /[?&]index\\=\\d+\\.css$/\n \n const IGNORED_DEPENDENCIES = ['tailwind-merge']\n \n@@ -312,7 +313,7 @@ function isPotentialCssRootFile(id: string) {\n   if (id.includes('/.vite/')) return\n   let extension = getExtension(id)\n   let isCssFile =\n-    (extension === 'css' || id.includes('&lang.css')) &&\n+    (extension === 'css' || id.includes('&lang.css') || id.match(INLINE_STYLE_ID_RE)) &&\n     // Don't intercept special static asset resources\n     !SPECIAL_QUERY_RE.test(id)\n \n"", ""test_patch"": ""diff --git a/integrations/vite/html-style-blocks.test.ts b/integrations/vite/html-style-blocks.test.ts\nnew file mode 100644\nindex 000000000000..4a86f96dc0d0\n--- /dev/null\n+++ b/integrations/vite/html-style-blocks.test.ts\n@@ -0,0 +1,58 @@\n+import { html, json, test, ts } from '../utils'\n+\n+test(\n+  'transforms html style blocks',\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""type\"": \""module\"",\n+          \""dependencies\"": {\n+            \""tailwindcss\"": \""workspace:^\""\n+          },\n+          \""devDependencies\"": {\n+            \""@tailwindcss/vite\"": \""workspace:^\"",\n+            \""vite\"": \""^6\""\n+          }\n+        }\n+      `,\n+      'vite.config.ts': ts`\n+        import { defineConfig } from 'vite'\n+        import tailwindcss from '@tailwindcss/vite'\n+\n+        export default defineConfig({\n+          plugins: [tailwindcss()],\n+        })\n+      `,\n+      'index.html': html`\n+        <!doctype html>\n+        <html>\n+          <body>\n+            <div class=\""foo\""></div>\n+            <style>\n+              .foo {\n+                @apply underline;\n+              }\n+            </style>\n+          </body>\n+        </html>\n+      `,\n+    },\n+  },\n+  async ({ fs, exec, expect }) => {\n+    await exec('pnpm vite build')\n+\n+    expect(await fs.dumpFiles('dist/*.html')).toMatchInlineSnapshot(`\n+      \""\n+      --- dist/index.html ---\n+      <!doctype html>\n+      <html>\n+        <body>\n+          <div class=\""foo\""></div>\n+          <style>.foo{text-decoration-line:underline}</style>\n+        </body>\n+      </html>\n+      \""\n+    `)\n+  },\n+)\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16057"", ""pr_id"": 16057, ""issue_id"": 16056, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""`@tailwindcss/postcss` does not run on some files that use Tailwind features\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.0, v4.0.1\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nwebpack@5.97.1, postcss-cli@11.0.0\n\n**What version of Node.js are you using?**\n\nv18.17.1, v18.18.2\n\n**What browser are you using?**\n\nN/A\n\n**What operating system are you using?**\n\nLinux in WSL\n\n**Reproduction URL**\n\nhttps://github.com/wongjn/tailwind-postcss\n\n**Describe your issue**\n\nAn input CSS file does not get processed by Tailwind when it only has the Tailwind-specific at-rules of `@reference`, `@variant`, `@custom-variant`, `@utility` directives within it. I believe this is due to the `if` condition within the PostCSS plugin:\n\nhttps://github.com/tailwindlabs/tailwindcss/blob/ea249957497c095ff8d228a3c913f608afbb9b28/packages/%40tailwindcss-postcss/src/index.ts#L74-L91\n\nUse case is I have some separate files the don't need to compile any Tailwind utilities but should have reference to Tailwind theme tokens used elsewhere in the project.\n\nEdit: Though `@keyframes` would get injected as per https://github.com/tailwindlabs/tailwindcss/issues/15956#issuecomment-2618659665 so perhaps this type of usage is unintended?"", ""issue_word_count"": 235, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/@tailwindcss-postcss/src/index.test.ts"", ""packages/@tailwindcss-postcss/src/index.ts""], ""pr_changed_test_files"": [""packages/@tailwindcss-postcss/src/index.test.ts""], ""base_commit"": ""ea249957497c095ff8d228a3c913f608afbb9b28"", ""head_commit"": ""d3d297b6285bd40a760e10811c19fe30f74c5812"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16057"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16057"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-30T15:29:08.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex e3481c52a7ba..c13589a9d1e4 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -10,6 +10,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Fixed\n \n - Only generate positive `grid-cols-*` and `grid-rows-*` utilities ([#16020](https://github.com/tailwindlabs/tailwindcss/pull/16020))\n+- Ensure we process Tailwind CSS features when only using `@reference` or `@variant` ([#16057](https://github.com/tailwindlabs/tailwindcss/pull/16057))\n \n ## [4.0.1] - 2025-01-29\n \n\ndiff --git a/packages/@tailwindcss-postcss/src/index.ts b/packages/@tailwindcss-postcss/src/index.ts\nindex 084f3671586f..d027fbd9ca67 100644\n--- a/packages/@tailwindcss-postcss/src/index.ts\n+++ b/packages/@tailwindcss-postcss/src/index.ts\n@@ -77,7 +77,9 @@ function tailwindcss(opts: PluginOptions = {}): AcceptedPlugin {\n             root.walkAtRules((node) => {\n               if (\n                 node.name === 'import' ||\n+                node.name === 'reference' ||\n                 node.name === 'theme' ||\n+                node.name === 'variant' ||\n                 node.name === 'config' ||\n                 node.name === 'plugin' ||\n                 node.name === 'apply'\n"", ""test_patch"": ""diff --git a/packages/@tailwindcss-postcss/src/index.test.ts b/packages/@tailwindcss-postcss/src/index.test.ts\nindex 97eedb95d183..97eee3c1c5f0 100644\n--- a/packages/@tailwindcss-postcss/src/index.test.ts\n+++ b/packages/@tailwindcss-postcss/src/index.test.ts\n@@ -248,6 +248,56 @@ test('bail early when Tailwind is not used', async () => {\n   `)\n })\n \n+test('handle CSS when only using a `@reference` (we should not bail early)', async () => {\n+  let processor = postcss([\n+    tailwindcss({ base: `${__dirname}/fixtures/example-project`, optimize: { minify: false } }),\n+  ])\n+\n+  let result = await processor.process(\n+    css`\n+      @reference \""tailwindcss/theme.css\"";\n+\n+      .foo {\n+        @variant md {\n+          bar: baz;\n+        }\n+      }\n+    `,\n+    { from: inputCssFilePath() },\n+  )\n+\n+  expect(result.css.trim()).toMatchInlineSnapshot(`\n+    \""@media (width >= 48rem) {\n+      .foo {\n+        bar: baz;\n+      }\n+    }\""\n+  `)\n+})\n+\n+test('handle CSS when using a `@variant` using variants that do not rely on the `@theme`', async () => {\n+  let processor = postcss([\n+    tailwindcss({ base: `${__dirname}/fixtures/example-project`, optimize: { minify: false } }),\n+  ])\n+\n+  let result = await processor.process(\n+    css`\n+      .foo {\n+        @variant data-is-hoverable {\n+          bar: baz;\n+        }\n+      }\n+    `,\n+    { from: inputCssFilePath() },\n+  )\n+\n+  expect(result.css.trim()).toMatchInlineSnapshot(`\n+    \"".foo[data-is-hoverable] {\n+      bar: baz;\n+    }\""\n+  `)\n+})\n+\n test('runs `Once` plugins in the right order', async () => {\n   let before = ''\n   let after = ''\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16052"", ""pr_id"": 16052, ""issue_id"": 16045, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""@tailwindcss/vite `v4.0.1` not working `Cannot read properties of undefined (reading 'includes')`\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.1\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\n@tailwindcss/vite\n\n**What version of Node.js are you using?**\n\nv23.6.1\n\n**What browser are you using?**\n\nAll\n\n**What operating system are you using?**\n\nLinux\n\n**Reproduction URL**\n\nI understand that reproduction is required, I just don't have the time right now, sorry. Since this issue is extremely obvious I hope you can do without.\n\n**Describe your issue**\n\n```\nTypeError: Cannot read properties of undefined (reading 'includes')\n    at m (file:///home/peter/Projects/phi-ag/rvt-app/node_modules/.pnpm/@tailwindcss+vite@4.0.1_vite@6.0.11_@types+node@22.12.0_jiti@2.4.2_lightningcss@1.29.1_terser@5.37.0_/node_modules/@tailwindcss/vite/dist/index.mjs:1:1599)\n    at transformIndexHtml (file:///home/peter/Projects/phi-ag/rvt-app/node_modules/.pnpm/@tailwindcss+vite@4.0.1_vite@6.0.11_@types+node@22.12.0_jiti@2.4.2_lightningcss@1.29.1_terser@5.37.0_/node_modules/@tailwindcss/vite/dist/index.mjs:1:3059)\n    at getVitePluginAssets (/home/peter/Projects/phi-ag/rvt-app/node_modules/.pnpm/vinxi@0.5.1_@types+node@22.12.0_ioredis@5.4.1_jiti@2.4.2_lightningcss@1.29.1_terser@5.37.0_typescript@5.7.3/node_modules/vinxi/lib/manifest/dev-server-manifest.js:186:39)\n    at Object.assets (/home/peter/Projects/phi-ag/rvt-app/node_modules/.pnpm/vinxi@0.5.1_@types+node@22.12.0_ioredis@5.4.1_jiti@2.4.2_lightningcss@1.29.1_terser@5.37.0_typescript@5.7.3/node_modules/vinxi/lib/manifest/dev-server-manifest.js:234:26)\n    at async createPageEvent (/home/peter/Projects/phi-ag/rvt-app/node_modules/.pnpm/@solidjs+start@1.0.11_@testing-library+jest-dom@6.6.3_solid-js@1.9.4_vinxi@0.5.1_@types+node@_fvmhuimud5ps5vjvpmm3ezrqsi/node_modules/@solidjs/start/dist/server/pageEvent.js:34:17)\n    at async eval (/home/peter/Projects/phi-ag/rvt-app/node_modules/.pnpm/@solidjs+start@1.0.11_@testing-library+jest-dom@6.6.3_solid-js@1.9.4_vinxi@0.5.1_@types+node@_fvmhuimud5ps5vjvpmm3ezrqsi/node_modules/@solidjs/start/dist/server/handler.js:37:25)\n    at async _callHandler (file:///home/peter/Projects/phi-ag/rvt-app/node_modules/.pnpm/h3@1.13.0/node_modules/h3/dist/index.mjs:1837:16)\n    at async _callHandler (file:///home/peter/Projects/phi-ag/rvt-app/node_modules/.pnpm/h3@1.13.0/node_modules/h3/dist/index.mjs:1837:16)\n    at async _callHandler (file:///home/peter/Projects/phi-ag/rvt-app/node_modules/.pnpm/h3@1.13.0/node_modules/h3/dist/index.mjs:1837:16)\n    at async file:///home/peter/Projects/phi-ag/rvt-app/node_modules/.pnpm/h3@1.13.0/node_modules/h3/dist/index.mjs:1978:19\n    at async Object.callAsync (file:///home/peter/Projects/phi-ag/rvt-app/node_modules/.pnpm/unctx@2.4.0/node_modules/unctx/dist/index.mjs:72:16)\n    at async Server.toNodeHandle (file:///home/peter/Projects/phi-ag/rvt-app/node_modules/.pnpm/h3@1.13.0/node_modules/h3/dist/index.mjs:2270:7)\n```\n\nSince there was only a single commit between 4.0 and 4.0.1 I assume the issue is this:\n\nhttps://github.com/tailwindlabs/tailwindcss/pull/16005/files#diff-00d01a2d38f5f4253651cf9811eab1182c96f0307e78c567b803416e24b98165R70"", ""issue_word_count"": 576, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/solidstart.test.ts"", ""packages/@tailwindcss-vite/src/index.ts""], ""pr_changed_test_files"": [""integrations/vite/solidstart.test.ts""], ""base_commit"": ""224294122b9743410dcb24d94ecf5d1468dde066"", ""head_commit"": ""5f13aaec3c037f1ef097528455a054bafed9277d"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16052"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16052"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-30T15:58:20.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 5ae4dd48f276..82bb2a70551c 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,8 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Only generate positive `grid-cols-*` and `grid-rows-*` utilities ([#16020](https://github.com/tailwindlabs/tailwindcss/pull/16020))\n - Ensure we process Tailwind CSS features when only using `@reference` or `@variant` ([#16057](https://github.com/tailwindlabs/tailwindcss/pull/16057))\n - Refactor gradient implementation to work around [prettier/prettier#17058](https://github.com/prettier/prettier/issues/17058) ([#16072](https://github.com/tailwindlabs/tailwindcss/pull/16072))\n+- Vite: Ensure hot-reloading works with SolidStart setups ([#16052](https://github.com/tailwindlabs/tailwindcss/pull/16052))\n+- Vite: Fix a crash when starting the development server in SolidStart setups ([#16052](https://github.com/tailwindlabs/tailwindcss/pull/16052))\n \n ## [4.0.1] - 2025-01-29\n \n\ndiff --git a/packages/@tailwindcss-vite/src/index.ts b/packages/@tailwindcss-vite/src/index.ts\nindex c8976c0276da..86d5d6142d5c 100644\n--- a/packages/@tailwindcss-vite/src/index.ts\n+++ b/packages/@tailwindcss-vite/src/index.ts\n@@ -63,7 +63,7 @@ export default function tailwindcss(): Plugin[] {\n     )\n   })\n \n-  function scanFile(id: string, content: string, extension: string, isSSR: boolean) {\n+  function scanFile(id: string, content: string, extension: string) {\n     for (let dependency of IGNORED_DEPENDENCIES) {\n       // We validated that Vite IDs always use posix style path separators, even on Windows.\n       // In dev build, Vite precompiles dependencies\n@@ -83,26 +83,16 @@ export default function tailwindcss(): Plugin[] {\n     }\n \n     if (updated) {\n-      invalidateAllRoots(isSSR)\n+      invalidateAllRoots()\n     }\n   }\n \n-  function invalidateAllRoots(isSSR: boolean) {\n+  function invalidateAllRoots() {\n     for (let server of servers) {\n       let updates: Update[] = []\n-      for (let [id, root] of roots.entries()) {\n+      for (let [id] of roots.entries()) {\n         let module = server.moduleGraph.getModuleById(id)\n-        if (!module) {\n-          // Note: Removing this during SSR is not safe and will produce\n-          // inconsistent results based on the timing of the removal and\n-          // the order / timing of transforms.\n-          if (!isSSR) {\n-            // It is safe to remove the item here since we're iterating on a copy\n-            // of the keys.\n-            roots.delete(id)\n-          }\n-          continue\n-        }\n+        if (!module) continue\n \n         roots.get(id).requiresRebuild = false\n         server.moduleGraph.invalidateModule(module)\n@@ -113,7 +103,6 @@ export default function tailwindcss(): Plugin[] {\n           timestamp: Date.now(),\n         })\n       }\n-\n       if (updates.length > 0) {\n         server.hot.send({ type: 'update', updates })\n       }\n@@ -210,12 +199,15 @@ export default function tailwindcss(): Plugin[] {\n \n       // Scan all non-CSS files for candidates\n       transformIndexHtml(html, { path }) {\n-        scanFile(path, html, 'html', isSSR)\n+        // SolidStart emits HTML chunks with an undefined path and the html content of `\\`.\n+        if (!path) return\n+\n+        scanFile(path, html, 'html')\n       },\n       transform(src, id, options) {\n         let extension = getExtension(id)\n         if (isPotentialCssRootFile(id)) return\n-        scanFile(id, src, extension, options?.ssr ?? false)\n+        scanFile(id, src, extension)\n       },\n     },\n \n"", ""test_patch"": ""diff --git a/integrations/vite/solidstart.test.ts b/integrations/vite/solidstart.test.ts\nnew file mode 100644\nindex 000000000000..bbe9ccc8868d\n--- /dev/null\n+++ b/integrations/vite/solidstart.test.ts\n@@ -0,0 +1,108 @@\n+import { candidate, css, fetchStyles, js, json, retryAssertion, test, ts } from '../utils'\n+\n+const WORKSPACE = {\n+  'package.json': json`\n+    {\n+      \""type\"": \""module\"",\n+      \""dependencies\"": {\n+        \""@solidjs/start\"": \""^1\"",\n+        \""solid-js\"": \""^1\"",\n+        \""vinxi\"": \""^0\"",\n+        \""@tailwindcss/vite\"": \""workspace:^\"",\n+        \""tailwindcss\"": \""workspace:^\""\n+      }\n+    }\n+  `,\n+  'jsconfig.json': json`\n+    {\n+      \""compilerOptions\"": {\n+        \""jsx\"": \""preserve\"",\n+        \""jsxImportSource\"": \""solid-js\""\n+      }\n+    }\n+  `,\n+  'app.config.js': ts`\n+    import { defineConfig } from '@solidjs/start/config'\n+    import tailwindcss from '@tailwindcss/vite'\n+\n+    export default defineConfig({\n+      vite: {\n+        plugins: [tailwindcss()],\n+      },\n+    })\n+  `,\n+  'src/entry-server.jsx': js`\n+    // @refresh reload\n+    import { createHandler, StartServer } from '@solidjs/start/server'\n+\n+    export default createHandler(() => (\n+      <StartServer\n+        document={({ assets, children, scripts }) => (\n+          <html lang=\""en\"">\n+            <head>{assets}</head>\n+            <body>\n+              <div id=\""app\"">{children}</div>\n+              {scripts}\n+            </body>\n+          </html>\n+        )}\n+      />\n+    ))\n+  `,\n+  'src/entry-client.jsx': js`\n+    // @refresh reload\n+    import { mount, StartClient } from '@solidjs/start/client'\n+\n+    mount(() => <StartClient />, document.getElementById('app'))\n+  `,\n+  'src/app.jsx': js`\n+    import './app.css'\n+    export default function App() {\n+      return <h1 class=\""underline\"">Hello world!</h1>\n+    }\n+  `,\n+  'src/app.css': css`@import 'tailwindcss';`,\n+}\n+\n+test(\n+  'dev mode',\n+  {\n+    fs: WORKSPACE,\n+  },\n+  async ({ fs, spawn, expect }) => {\n+    let process = await spawn('pnpm vinxi dev', {\n+      env: {\n+        TEST: 'false', // VERY IMPORTANT OTHERWISE YOU WON'T GET OUTPUT\n+        NODE_ENV: 'development',\n+      },\n+    })\n+\n+    let url = ''\n+    await process.onStdout((m) => {\n+      let match = /Local:\\s*(http.*)\\//.exec(m)\n+      if (match) url = match[1]\n+      return Boolean(url)\n+    })\n+\n+    await retryAssertion(async () => {\n+      let css = await fetchStyles(url)\n+      expect(css).toContain(candidate`underline`)\n+    })\n+\n+    await retryAssertion(async () => {\n+      await fs.write(\n+        'src/app.jsx',\n+        js`\n+          import './app.css'\n+          export default function App() {\n+            return <h1 class=\""underline font-bold\"">Hello world!</h1>\n+          }\n+        `,\n+      )\n+\n+      let css = await fetchStyles(url)\n+      expect(css).toContain(candidate`underline`)\n+      expect(css).toContain(candidate`font-bold`)\n+    })\n+  },\n+)\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16020"", ""pr_id"": 16020, ""issue_id"": 16012, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] .grid.grid-rows-0 is invalid\nI tested the snippet even in the playground: https://play.tailwindcss.com/MaCezE0SuO\nAs you can see when you type \""grid-rows-0\"" it gives you:\n```\ngrid-template-rows:  repeat(0, minmax(0, 1fr))\n```\nWhich is invalid. I think it should be instead set to `grid-template-rows:  0fr`. I know it's available by doing `grid-rows-[0fr]` but I think it should  happen even if you only say `grid-rows-0`"", ""issue_word_count"": 80, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts"", ""packages/tailwindcss/src/utils/infer-data-type.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""06552092bd03c72f384d4b1095b0e7997519f33f"", ""head_commit"": ""04bd0fc3809b8e8d7d708c5654fcc02890320e97"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16020"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16020"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-29T19:56:23.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex c60d4490700e..e3481c52a7ba 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -7,7 +7,9 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ## [Unreleased]\n \n-- Nothing yet!\n+### Fixed\n+\n+- Only generate positive `grid-cols-*` and `grid-rows-*` utilities ([#16020](https://github.com/tailwindlabs/tailwindcss/pull/16020))\n \n ## [4.0.1] - 2025-01-29\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 2fb717fae418..57f39e021358 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -17,6 +17,7 @@ import { DefaultMap } from './utils/default-map'\n import {\n   inferDataType,\n   isPositiveInteger,\n+  isStrictPositiveInteger,\n   isValidOpacityValue,\n   isValidSpacingMultiplier,\n } from './utils/infer-data-type'\n@@ -1752,7 +1753,7 @@ export function createUtilities(theme: Theme) {\n   functionalUtility('grid-cols', {\n     themeKeys: ['--grid-template-columns'],\n     handleBareValue: ({ value }) => {\n-      if (!isPositiveInteger(value)) return null\n+      if (!isStrictPositiveInteger(value)) return null\n       return `repeat(${value}, minmax(0, 1fr))`\n     },\n     handle: (value) => [decl('grid-template-columns', value)],\n@@ -1763,7 +1764,7 @@ export function createUtilities(theme: Theme) {\n   functionalUtility('grid-rows', {\n     themeKeys: ['--grid-template-rows'],\n     handleBareValue: ({ value }) => {\n-      if (!isPositiveInteger(value)) return null\n+      if (!isStrictPositiveInteger(value)) return null\n       return `repeat(${value}, minmax(0, 1fr))`\n     },\n     handle: (value) => [decl('grid-template-rows', value)],\n\ndiff --git a/packages/tailwindcss/src/utils/infer-data-type.ts b/packages/tailwindcss/src/utils/infer-data-type.ts\nindex 56ab9c60cdde..9496986557e5 100644\n--- a/packages/tailwindcss/src/utils/infer-data-type.ts\n+++ b/packages/tailwindcss/src/utils/infer-data-type.ts\n@@ -341,6 +341,11 @@ export function isPositiveInteger(value: any) {\n   return Number.isInteger(num) && num >= 0 && String(num) === String(value)\n }\n \n+export function isStrictPositiveInteger(value: any) {\n+  let num = Number(value)\n+  return Number.isInteger(num) && num > 0 && String(num) === String(value)\n+}\n+\n export function isValidSpacingMultiplier(value: any) {\n   return isMultipleOf(value, 0.25)\n }\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 8e40d3816317..d57bffeaabee 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -6995,6 +6995,7 @@ test('grid-cols', async () => {\n   expect(\n     await run([\n       'grid-cols',\n+      'grid-cols-0',\n       '-grid-cols-none',\n       '-grid-cols-subgrid',\n       'grid-cols--12',\n@@ -7043,6 +7044,7 @@ test('grid-rows', async () => {\n   expect(\n     await run([\n       'grid-rows',\n+      'grid-rows-0',\n       '-grid-rows-none',\n       '-grid-rows-subgrid',\n       'grid-rows--12',\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16005"", ""pr_id"": 16005, ""issue_id"": 15722, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] CSS bundle bloated when using @tailwindcss/vite and tailwind-merge\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nvite 6\n\n**What version of Node.js are you using?**\n\nv20.11.1\n\n**What browser are you using?**\n\nN/A\n\n**What operating system are you using?**\n\nmacOS\n\n**Reproduction URL**\n\nhttps://github.com/maxsalven/tw-vite-bug\n\n**Describe your issue**\n\nIn the attached repro is a very basic vite app which uses `tailwind-merge`:\n\n```ts\nimport { StrictMode } from \""react\"";\nimport { createRoot } from \""react-dom/client\"";\nimport { twMerge } from \""tailwind-merge\"";\nimport \""./index.css\"";\n\ncreateRoot(document.getElementById(\""root\"")!).render(\n  <StrictMode>\n    <div className={twMerge(\""text-2xl\"")}></div>\n  </StrictMode>\n);\n```\n\nIt uses the vite plugin:\n```ts\nimport { defineConfig } from \""vite\"";\nimport react from \""@vitejs/plugin-react\"";\nimport tailwindcss from \""@tailwindcss/vite\"";\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [tailwindcss(), react()],\n});\n```\n\nThe built CSS file is 32.8KB\n`dist/assets/index-BAs4IohO.css   32.81 kB \u2502 gzip:  7.35 kB`\n\nand includes unused classes:\n```css\n  .stacked-fractions {\n    --tw-numeric-fraction: stacked-fractions;\n    font-variant-numeric: var(--tw-ordinal) var(--tw-slashed-zero)\n      var(--tw-numeric-figure) var(--tw-numeric-spacing)\n      var(--tw-numeric-fraction);\n  }\n```\n\nIf we now remove the tailwindcss plugin:\n```ts\nimport { defineConfig } from \""vite\"";\nimport react from \""@vitejs/plugin-react\"";\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n});\n```\n\nand run `npm run build` again:\n`dist/assets/index-B89DnZA7.css   17.80 kB \u2502 gzip:  5.19 kB`\n\nThe CSS file is half the size and the unused classes are gone. The used classes are still in there:\n```css\n@layer utilities {\n  .text-2xl {\n    font-size: var(--text-2xl);\n    line-height: var(--tw-leading, var(--text-2xl--line-height));\n  }\n}\n```"", ""issue_word_count"": 322, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/ignored-packages.test.ts"", ""packages/@tailwindcss-vite/src/index.ts""], ""pr_changed_test_files"": [""integrations/vite/ignored-packages.test.ts""], ""base_commit"": ""9fef2bde50c38dca4eb34c3d760e4cf84188bb45"", ""head_commit"": ""e80be095ddd357a356311c3573b25197b4a2f522"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16005"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16005"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-29T16:32:06.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 6c3837abf85c..5428fa88f59f 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -26,6 +26,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Find utilities when using the Angular class shorthand syntax ([#15974](https://github.com/tailwindlabs/tailwindcss/pull/15974))\n - Find utilities when using functions inside arrays ([#15974](https://github.com/tailwindlabs/tailwindcss/pull/15974))\n - Ensure that `@tailwindcss/browser` does not pollute the global namespace ([#15978](https://github.com/tailwindlabs/tailwindcss/pull/15978))\n+- Ensure that `tailwind-merge` is not scanned when using the Vite plugin ([#16005](https://github.com/tailwindlabs/tailwindcss/pull/16005))\n - Ensure CSS theme variables are available within shadow roots ([#15975](https://github.com/tailwindlabs/tailwindcss/pull/15975))\n - Fix crash when project lives in the `/` directory ([#15988](https://github.com/tailwindlabs/tailwindcss/pull/15988))\n - Ensure `@custom-variant` has a non-empty selector list  ([#16009](https://github.com/tailwindlabs/tailwindcss/pull/16009))\n\ndiff --git a/packages/@tailwindcss-vite/src/index.ts b/packages/@tailwindcss-vite/src/index.ts\nindex 2fedf73231f2..c8976c0276da 100644\n--- a/packages/@tailwindcss-vite/src/index.ts\n+++ b/packages/@tailwindcss-vite/src/index.ts\n@@ -9,6 +9,8 @@ import type { Plugin, ResolvedConfig, Rollup, Update, ViteDevServer } from 'vite\n const DEBUG = env.DEBUG\n const SPECIAL_QUERY_RE = /[?&](raw|url)\\b/\n \n+const IGNORED_DEPENDENCIES = ['tailwind-merge']\n+\n export default function tailwindcss(): Plugin[] {\n   let servers: ViteDevServer[] = []\n   let config: ResolvedConfig | null = null\n@@ -62,6 +64,18 @@ export default function tailwindcss(): Plugin[] {\n   })\n \n   function scanFile(id: string, content: string, extension: string, isSSR: boolean) {\n+    for (let dependency of IGNORED_DEPENDENCIES) {\n+      // We validated that Vite IDs always use posix style path separators, even on Windows.\n+      // In dev build, Vite precompiles dependencies\n+      if (id.includes(`.vite/deps/${dependency}.js`)) {\n+        return\n+      }\n+      // In prod builds, use the node_modules path\n+      if (id.includes(`/node_modules/${dependency}/`)) {\n+        return\n+      }\n+    }\n+\n     let updated = false\n     for (let candidate of moduleGraphScanner.scanFiles([{ content, extension }])) {\n       updated = true\n"", ""test_patch"": ""diff --git a/integrations/vite/ignored-packages.test.ts b/integrations/vite/ignored-packages.test.ts\nnew file mode 100644\nindex 000000000000..f7f85ff14975\n--- /dev/null\n+++ b/integrations/vite/ignored-packages.test.ts\n@@ -0,0 +1,81 @@\n+import { candidate, css, fetchStyles, html, js, retryAssertion, test, ts, txt } from '../utils'\n+\n+const WORKSPACE = {\n+  fs: {\n+    'package.json': txt`\n+    {\n+      \""type\"": \""module\"",\n+      \""dependencies\"": {\n+        \""tailwind-merge\"": \""^2\"",\n+        \""@tailwindcss/vite\"": \""workspace:^\"",\n+        \""tailwindcss\"": \""workspace:^\""\n+      },\n+      \""devDependencies\"": {\n+        \""vite\"": \""^6\""\n+      }\n+    }\n+  `,\n+    'vite.config.ts': ts`\n+      import tailwindcss from '@tailwindcss/vite'\n+      import { defineConfig } from 'vite'\n+\n+      export default defineConfig({\n+        build: { cssMinify: false },\n+        plugins: [tailwindcss()],\n+      })\n+    `,\n+    'index.html': html`\n+      <head>\n+        <link rel=\""stylesheet\"" href=\""./src/index.css\"" />\n+        <script type=\""module\"" src=\""./src/index.js\""></script>\n+      </head>\n+    `,\n+    'src/index.js': js`\n+      import { twMerge } from 'tailwind-merge'\n+\n+      twMerge('underline')\n+\n+      console.log('underline')\n+    `,\n+    'src/index.css': css`@import 'tailwindcss/utilities' layer(utilities);`,\n+  },\n+}\n+\n+test(\n+  'does not scan tailwind-merge in production builds',\n+  WORKSPACE,\n+  async ({ fs, exec, expect }) => {\n+    await exec('pnpm vite build')\n+\n+    let files = await fs.glob('dist/**/*.css')\n+    expect(files).toHaveLength(1)\n+    let [, content] = files[0]\n+\n+    expect(content).toMatchInlineSnapshot(`\n+      \""@layer utilities {\n+        .underline {\n+          text-decoration-line: underline;\n+        }\n+      }\n+      \""\n+    `)\n+  },\n+)\n+\n+test('does not scan tailwind-merge in dev builds', WORKSPACE, async ({ spawn, expect }) => {\n+  let process = await spawn('pnpm vite dev')\n+  await process.onStdout((m) => m.includes('ready in'))\n+\n+  let url = ''\n+  await process.onStdout((m) => {\n+    let match = /Local:\\s*(http.*)\\//.exec(m)\n+    if (match) url = match[1]\n+    return Boolean(url)\n+  })\n+\n+  await retryAssertion(async () => {\n+    let styles = await fetchStyles(url, '/index.html')\n+\n+    expect(styles).not.toContain(candidate`flex`)\n+  })\n+})\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-16004"", ""pr_id"": 16004, ""issue_id"": 15924, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Upgrade tool incorrectly migrates `leading-[1]` to `leading-1`\nThe `@tailwindcss/upgrade` tool incorrectly migrates `leading-[1]` to `leading-1`.\n\nThe leading utility supports bare values that map to a value directly, e.g.:\n\n`leading-123`\n```css\n/*! tailwindcss v4.0.0 | MIT License | https://tailwindcss.com */\n.leading-123 {\n  --tw-leading: calc(var(--spacing) * 123);\n  line-height: calc(var(--spacing) * 123);\n}\n@property --tw-leading {\n  syntax: \""*\"";\n  inherits: false;\n}\n```\n\nHowever, some values exist in your `@theme`, such as `leading-1`, which maps to:\n```css\n/*! tailwindcss v4.0.0 | MIT License | https://tailwindcss.com */\n.leading-1 {\n  --tw-leading: calc(var(--spacing) * 1);\n  line-height: calc(var(--spacing) * 1);\n}\n@property --tw-leading {\n  syntax: \""*\"";\n  inherits: false;\n}\n```\n\nWhich is now equivalent to `4px` instead of `1` which makes this transformation unsafe.\n\nThanks @jeroenreumkens!"", ""issue_word_count"": 126, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/@tailwindcss-upgrade/src/template/codemods/arbitrary-value-to-bare-value.test.ts"", ""packages/@tailwindcss-upgrade/src/template/codemods/arbitrary-value-to-bare-value.ts""], ""pr_changed_test_files"": [""packages/@tailwindcss-upgrade/src/template/codemods/arbitrary-value-to-bare-value.test.ts""], ""base_commit"": ""125c0891b19f6797b3860242316c517e6b636d00"", ""head_commit"": ""dfe1c3caefb6a1763fa01118e639e00b91c17e51"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/16004"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/16004"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-29T14:22:13.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 47b091112da5..14e0f19fb6a7 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -28,6 +28,8 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure that `@tailwindcss/browser` does not pollute the global namespace ([#15978](https://github.com/tailwindlabs/tailwindcss/pull/15978))\n - Fix crash when project lives in the `/` directory ([#15988](https://github.com/tailwindlabs/tailwindcss/pull/15988))\n - _Upgrade_: Ensure JavaScript config files on different drives are correctly migrated ([#15927](https://github.com/tailwindlabs/tailwindcss/pull/15927))\n+- _Upgrade_: Migrate `leading-[1]` to `leading-none` ([#16004](https://github.com/tailwindlabs/tailwindcss/pull/16004))\n+- _Upgrade_: Do not migrate arbitrary leading utilities to bare utilities ([#16004](https://github.com/tailwindlabs/tailwindcss/pull/16004))\n \n ## [4.0.0] - 2025-01-21\n \n\ndiff --git a/packages/@tailwindcss-upgrade/src/template/codemods/arbitrary-value-to-bare-value.ts b/packages/@tailwindcss-upgrade/src/template/codemods/arbitrary-value-to-bare-value.ts\nindex 77a303dc3d96..64c06a8f3ea9 100644\n--- a/packages/@tailwindcss-upgrade/src/template/codemods/arbitrary-value-to-bare-value.ts\n+++ b/packages/@tailwindcss-upgrade/src/template/codemods/arbitrary-value-to-bare-value.ts\n@@ -64,6 +64,23 @@ export function arbitraryValueToBareValue(\n       clone.value?.kind === 'arbitrary' &&\n       clone.value.dataType === null\n     ) {\n+      if (clone.root === 'leading') {\n+        // leading-[1] -> leading-none\n+        if (clone.value.value === '1') {\n+          changed = true\n+          clone.value = {\n+            kind: 'named',\n+            value: 'none',\n+            fraction: null,\n+          }\n+        }\n+\n+        // Keep leading-[<number>] as leading-[<number>]\n+        else {\n+          continue\n+        }\n+      }\n+\n       let parts = segment(clone.value.value, '/')\n       if (parts.every((part) => isPositiveInteger(part))) {\n         changed = true\n"", ""test_patch"": ""diff --git a/packages/@tailwindcss-upgrade/src/template/codemods/arbitrary-value-to-bare-value.test.ts b/packages/@tailwindcss-upgrade/src/template/codemods/arbitrary-value-to-bare-value.test.ts\nindex 62355dc6f3f1..c9b459d84b6b 100644\n--- a/packages/@tailwindcss-upgrade/src/template/codemods/arbitrary-value-to-bare-value.test.ts\n+++ b/packages/@tailwindcss-upgrade/src/template/codemods/arbitrary-value-to-bare-value.test.ts\n@@ -32,6 +32,11 @@ test.each([\n   // generates something. Converting it to `text-1/2` doesn't produce anything.\n   ['text-[1/2]', 'text-[1/2]'],\n \n+  // Leading is special, because `leading-[123]` is the direct value of 123, but\n+  // `leading-123` maps to `calc(--spacing(123))`.\n+  ['leading-[1]', 'leading-none'],\n+  ['leading-[123]', 'leading-[123]'],\n+\n   ['data-[selected]:flex', 'data-selected:flex'],\n   ['data-[foo=bar]:flex', 'data-[foo=bar]:flex'],\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15941"", ""pr_id"": 15941, ""issue_id"": 15876, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Sources are not being taken into consideration with Next.js 15\nTailwind: `4.0.0`\nNext.js: `15.1.6`\nMacOS: `Sequoia 15.2`\nNode: `v22.13.1`\npnpm: `9.15.3`\nArc Browser: `1.79.0`\n\n**Reproduction URL**\n\nhttps://github.com/AssisrMatheus/tailwindv4-next15-no-output-repro\n\nSetup process:\n1. `pnpx create-next-app@latest`\n1. `pnpx @tailwindcss/upgrade@next`\n1. `pnpm run dev`\n\n**Describe your issue**\n\nIn a brand new next.js 15 project. Tailwind v4 is only building base css and theme variables, all classes used within source files are ignored.\n\nI have tried to turn off turbopack with no success. Rolling back node to v20 also doesn't help. Tried using `postcss.config.json` file format instead of current one also with no success.\n\nCurrent behaviour:  \n![Image](https://github.com/user-attachments/assets/0f2d6280-b1c8-4d47-95e8-52abd65a8e47)\n\nExpected behaviour:  \n![Image](https://github.com/user-attachments/assets/a97380cc-f19b-4264-a01b-a138e882f171)"", ""issue_word_count"": 157, ""test_files_count"": 2, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""crates/oxide/src/scanner/allowed_paths.rs"", ""crates/oxide/tests/scanner.rs"", ""integrations/cli/index.test.ts"", ""integrations/utils.ts""], ""pr_changed_test_files"": [""crates/oxide/tests/scanner.rs"", ""integrations/cli/index.test.ts""], ""base_commit"": ""86264a9e66e75e364c4cbe9c9d7057acc2c01204"", ""head_commit"": ""8e769954ec763575571ea0306e97ce804e8ef816"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15941"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15941"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-28T16:13:16.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex d2170c400940..2cd3ea0ad8eb 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -21,6 +21,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Suggest container query variants ([#15857](https://github.com/tailwindlabs/tailwindcss/pull/15857))\n - Disable bare value suggestions when not using the `--spacing` variable ([#15857](https://github.com/tailwindlabs/tailwindcss/pull/15857))\n - Ensure suggested classes are properly sorted ([#15857](https://github.com/tailwindlabs/tailwindcss/pull/15857))\n+- Don\u2019t look at ignore files outside initialized repos ([#15941](https://github.com/tailwindlabs/tailwindcss/pull/15941))\n - _Upgrade_: Ensure JavaScript config files on different drives are correctly migrated ([#15927](https://github.com/tailwindlabs/tailwindcss/pull/15927))\n \n ## [4.0.0] - 2025-01-21\n\ndiff --git a/crates/oxide/src/scanner/allowed_paths.rs b/crates/oxide/src/scanner/allowed_paths.rs\nindex 8a584d06fb2c..b906335f8979 100644\n--- a/crates/oxide/src/scanner/allowed_paths.rs\n+++ b/crates/oxide/src/scanner/allowed_paths.rs\n@@ -33,17 +33,11 @@ pub fn resolve_allowed_paths(root: &Path) -> impl Iterator<Item = DirEntry> {\n \n #[tracing::instrument(skip_all)]\n pub fn resolve_paths(root: &Path) -> impl Iterator<Item = DirEntry> {\n-    WalkBuilder::new(root)\n-        .hidden(false)\n-        .require_git(false)\n-        .build()\n-        .filter_map(Result::ok)\n+    create_walk_builder(root).build().filter_map(Result::ok)\n }\n \n pub fn read_dir(root: &Path, depth: Option<usize>) -> impl Iterator<Item = DirEntry> {\n-    WalkBuilder::new(root)\n-        .hidden(false)\n-        .require_git(false)\n+    create_walk_builder(root)\n         .max_depth(depth)\n         .filter_entry(move |entry| match entry.file_type() {\n             Some(file_type) if file_type.is_dir() => match entry.file_name().to_str() {\n@@ -59,6 +53,61 @@ pub fn read_dir(root: &Path, depth: Option<usize>) -> impl Iterator<Item = DirEn\n         .filter_map(Result::ok)\n }\n \n+fn create_walk_builder(root: &Path) -> WalkBuilder {\n+    let mut builder = WalkBuilder::new(root);\n+\n+    // Scan hidden files / directories\n+    builder.hidden(false);\n+\n+    // By default, allow .gitignore files to be used regardless of whether or not\n+    // a .git directory is present. This is an optimization for when projects\n+    // are first created and may not be in a git repo yet.\n+    builder.require_git(false);\n+\n+    // Don't descend into .git directories inside the root folder\n+    // This is necessary when `root` contains the `.git` dir.\n+    builder.filter_entry(|entry| entry.file_name() != \"".git\"");\n+\n+    // If we are in a git repo then require it to ensure that only rules within\n+    // the repo are used. For example, we don't want to consider a .gitignore file\n+    // in the user's home folder if we're in a git repo.\n+    //\n+    // The alternative is using a call like `.parents(false)` but that will\n+    // prevent looking at parent directories for .gitignore files from within\n+    // the repo and that's not what we want.\n+    //\n+    // For example, in a project with this structure:\n+    //\n+    // home\n+    // .gitignore\n+    //  my-project\n+    //   .gitignore\n+    //   apps\n+    //     .gitignore\n+    //     web\n+    //       {root}\n+    //\n+    // We do want to consider all .gitignore files listed:\n+    // - home/.gitignore\n+    // - my-project/.gitignore\n+    // - my-project/apps/.gitignore\n+    //\n+    // However, if a repo is initialized inside my-project then only the following\n+    // make sense for consideration:\n+    // - my-project/.gitignore\n+    // - my-project/apps/.gitignore\n+    //\n+    // Setting the require_git(true) flag conditionally allows us to do this.\n+    for parent in root.ancestors() {\n+        if parent.join(\"".git\"").exists() {\n+            builder.require_git(true);\n+            break;\n+        }\n+    }\n+\n+    builder\n+}\n+\n pub fn is_allowed_content_path(path: &Path) -> bool {\n     // Skip known ignored files\n     if path\n\ndiff --git a/integrations/utils.ts b/integrations/utils.ts\nindex 4644ece49ab8..20f3fb49ec9e 100644\n--- a/integrations/utils.ts\n+++ b/integrations/utils.ts\n@@ -32,6 +32,8 @@ interface TestConfig {\n   fs: {\n     [filePath: string]: string | Uint8Array\n   }\n+\n+  installDependencies?: boolean\n }\n interface TestContext {\n   root: string\n@@ -382,14 +384,18 @@ export function test(\n         await context.fs.write(filename, content)\n       }\n \n+      let shouldInstallDependencies = config.installDependencies ?? true\n+\n       try {\n         // In debug mode, the directory is going to be inside the pnpm workspace\n         // of the tailwindcss package. This means that `pnpm install` will run\n         // pnpm install on the workspace instead (expect if the root dir defines\n         // a separate workspace). We work around this by using the\n         // `--ignore-workspace` flag.\n-        let ignoreWorkspace = debug && !config.fs['pnpm-workspace.yaml']\n-        await context.exec(`pnpm install${ignoreWorkspace ? ' --ignore-workspace' : ''}`)\n+        if (shouldInstallDependencies) {\n+          let ignoreWorkspace = debug && !config.fs['pnpm-workspace.yaml']\n+          await context.exec(`pnpm install${ignoreWorkspace ? ' --ignore-workspace' : ''}`)\n+        }\n       } catch (error: any) {\n         console.error(error)\n         console.error(error.stdout?.toString())\n"", ""test_patch"": ""diff --git a/crates/oxide/tests/scanner.rs b/crates/oxide/tests/scanner.rs\nindex cdec9a44dd26..e2bfdf37e558 100644\n--- a/crates/oxide/tests/scanner.rs\n+++ b/crates/oxide/tests/scanner.rs\n@@ -586,4 +586,121 @@ mod scanner {\n             ]\n         );\n     }\n+\n+    #[test]\n+    fn skips_ignore_files_outside_of_a_repo() {\n+        // Create a temporary working directory\n+        let dir = tempdir().unwrap().into_path();\n+\n+        // Create files\n+        create_files_in(\n+            &dir,\n+            &[\n+                // This file should always be picked up\n+                (\""home/project/apps/web/index.html\"", \""content-['index.html']\""),\n+                // Set up various ignore rules\n+                (\""home/.gitignore\"", \""ignore-home.html\""),\n+                (\""home/project/.gitignore\"", \""ignore-project.html\""),\n+                (\""home/project/apps/.gitignore\"", \""ignore-apps.html\""),\n+                (\""home/project/apps/web/.gitignore\"", \""ignore-web.html\""),\n+                // Some of these should be ignored depending on which dir is the repo root\n+                (\n+                    \""home/project/apps/web/ignore-home.html\"",\n+                    \""content-['ignore-home.html']\"",\n+                ),\n+                (\n+                    \""home/project/apps/web/ignore-project.html\"",\n+                    \""content-['ignore-project.html']\"",\n+                ),\n+                (\n+                    \""home/project/apps/web/ignore-apps.html\"",\n+                    \""content-['ignore-apps.html']\"",\n+                ),\n+                (\n+                    \""home/project/apps/web/ignore-web.html\"",\n+                    \""content-['ignore-web.html']\"",\n+                ),\n+            ],\n+        );\n+\n+        let sources = vec![GlobEntry {\n+            base: dir\n+                .join(\""home/project/apps/web\"")\n+                .to_string_lossy()\n+                .to_string(),\n+            pattern: \""**/*\"".to_owned(),\n+        }];\n+\n+        let candidates = Scanner::new(Some(sources.clone())).scan();\n+\n+        // All ignore files are applied because there's no git repo\n+        assert_eq!(candidates, vec![\""content-['index.html']\"".to_owned(),]);\n+\n+        // Initialize `home` as a git repository and scan again\n+        // The results should be the same as before\n+        _ = Command::new(\""git\"")\n+            .arg(\""init\"")\n+            .current_dir(dir.join(\""home\""))\n+            .output();\n+        let candidates = Scanner::new(Some(sources.clone())).scan();\n+\n+        assert_eq!(candidates, vec![\""content-['index.html']\"".to_owned(),]);\n+\n+        // Drop the .git folder\n+        fs::remove_dir_all(dir.join(\""home/.git\"")).unwrap();\n+\n+        // Initialize `home/project` as a git repository and scan again\n+        _ = Command::new(\""git\"")\n+            .arg(\""init\"")\n+            .current_dir(dir.join(\""home/project\""))\n+            .output();\n+        let candidates = Scanner::new(Some(sources.clone())).scan();\n+\n+        assert_eq!(\n+            candidates,\n+            vec![\n+                \""content-['ignore-home.html']\"".to_owned(),\n+                \""content-['index.html']\"".to_owned(),\n+            ]\n+        );\n+\n+        // Drop the .git folder\n+        fs::remove_dir_all(dir.join(\""home/project/.git\"")).unwrap();\n+\n+        // Initialize `home/project/apps` as a git repository and scan again\n+        _ = Command::new(\""git\"")\n+            .arg(\""init\"")\n+            .current_dir(dir.join(\""home/project/apps\""))\n+            .output();\n+        let candidates = Scanner::new(Some(sources.clone())).scan();\n+\n+        assert_eq!(\n+            candidates,\n+            vec![\n+                \""content-['ignore-home.html']\"".to_owned(),\n+                \""content-['ignore-project.html']\"".to_owned(),\n+                \""content-['index.html']\"".to_owned(),\n+            ]\n+        );\n+\n+        // Drop the .git folder\n+        fs::remove_dir_all(dir.join(\""home/project/apps/.git\"")).unwrap();\n+\n+        // Initialize `home/project/apps` as a git repository and scan again\n+        _ = Command::new(\""git\"")\n+            .arg(\""init\"")\n+            .current_dir(dir.join(\""home/project/apps/web\""))\n+            .output();\n+        let candidates = Scanner::new(Some(sources.clone())).scan();\n+\n+        assert_eq!(\n+            candidates,\n+            vec![\n+                \""content-['ignore-apps.html']\"".to_owned(),\n+                \""content-['ignore-home.html']\"".to_owned(),\n+                \""content-['ignore-project.html']\"".to_owned(),\n+                \""content-['index.html']\"".to_owned(),\n+            ]\n+        );\n+    }\n }\n\ndiff --git a/integrations/cli/index.test.ts b/integrations/cli/index.test.ts\nindex aff5b108994f..b47659a1320e 100644\n--- a/integrations/cli/index.test.ts\n+++ b/integrations/cli/index.test.ts\n@@ -556,6 +556,83 @@ describe.each([\n       ])\n     },\n   )\n+\n+  test(\n+    'git ignore files outside of a repo are not considered',\n+    {\n+      fs: {\n+        // Ignore everything in the \""home\"" directory\n+        'home/.gitignore': '*',\n+\n+        // Only ignore files called ignore-*.html in the actual git repo\n+        'home/project/.gitignore': 'ignore-*.html',\n+\n+        'home/project/package.json': json`\n+          {\n+            \""type\"": \""module\"",\n+            \""dependencies\"": {\n+              \""tailwindcss\"": \""workspace:^\"",\n+              \""@tailwindcss/cli\"": \""workspace:^\""\n+            }\n+          }\n+        `,\n+\n+        'home/project/src/index.css': css` @import 'tailwindcss'; `,\n+        'home/project/src/index.html': html`\n+          <div\n+            class=\""content-['index.html']\""\n+          ></div>\n+        `,\n+        'home/project/src/ignore-1.html': html`\n+          <div\n+            class=\""content-['ignore-1.html']\""\n+          ></div>\n+        `,\n+        'home/project/src/ignore-2.html': html`\n+          <div\n+            class=\""content-['ignore-2.html']\""\n+          ></div>\n+        `,\n+      },\n+\n+      installDependencies: false,\n+    },\n+    async ({ fs, root, exec }) => {\n+      await exec(`pnpm install --ignore-workspace`, {\n+        cwd: path.join(root, 'home/project'),\n+      })\n+\n+      // No git repo = all ignore files are considered\n+      await exec(`${command} --input src/index.css --output dist/out.css`, {\n+        cwd: path.join(root, 'home/project'),\n+      })\n+\n+      await fs.expectFileNotToContain('./home/project/dist/out.css', [\n+        candidate`content-['index.html']`,\n+        candidate`content-['ignore-1.html']`,\n+        candidate`content-['ignore-2.html']`,\n+      ])\n+\n+      // Make home/project a git repo\n+      // Only ignore files within the repo are considered\n+      await exec(`git init`, {\n+        cwd: path.join(root, 'home/project'),\n+      })\n+\n+      await exec(`${command} --input src/index.css --output dist/out.css`, {\n+        cwd: path.join(root, 'home/project'),\n+      })\n+\n+      await fs.expectFileToContain('./home/project/dist/out.css', [\n+        candidate`content-['index.html']`,\n+      ])\n+\n+      await fs.expectFileNotToContain('./home/project/dist/out.css', [\n+        candidate`content-['ignore-1.html']`,\n+        candidate`content-['ignore-2.html']`,\n+      ])\n+    },\n+  )\n })\n \n test(\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15934"", ""pr_id"": 15934, ""issue_id"": 15235, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Standalone cli doesn't bundle tailwindcss js library\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-beta.3\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNone\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.8.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nUbuntu 24.10\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/leifmetcalf/tailwind-repro/tree/8cfa9c2b2b13a3d3e87cc115000ee553ea0a11df\r\n\r\n**Describe your issue**\r\n\r\nRun this command in the reproduction repo above\r\n```\r\ntailwindcss-linux-x64 --input app.css --output out.css\r\n```\r\nThe command returns error code 1 with no message. Installing tailwind with `npm install tailwindcss` fixes the problem and the output file is created as expected."", ""issue_word_count"": 154, ""test_files_count"": 1, ""non_test_files_count"": 5, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/cli/standalone.test.ts"", ""packages/@tailwindcss-standalone/package.json"", ""packages/@tailwindcss-standalone/src/index.ts"", ""playgrounds/vite/package.json"", ""pnpm-lock.yaml""], ""pr_changed_test_files"": [""integrations/cli/standalone.test.ts""], ""base_commit"": ""59e003e6d1ebf2a0c1724c17c23a998e3602f9f3"", ""head_commit"": ""9d4af7f737b840c13baea1ee90d1c46feb6e4ca5"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15934"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15934"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-25T12:21:46.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 5a5742b7eb40..1a4221579a84 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -15,6 +15,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ### Fixed\n \n+- Make JS APIs available to plugins and configs in the Standalone CLI ([#15934](https://github.com/tailwindlabs/tailwindcss/pull/15934))\n - Vite: Don't crash when importing a virtual module in JavaScript that ends in `.css` ([#16780](https://github.com/tailwindlabs/tailwindcss/pull/16780))\n \n ## [4.0.8] - 2025-02-21\n\ndiff --git a/packages/@tailwindcss-standalone/package.json b/packages/@tailwindcss-standalone/package.json\nindex 8ed6a1f17a1b..07903154c441 100644\n--- a/packages/@tailwindcss-standalone/package.json\n+++ b/packages/@tailwindcss-standalone/package.json\n@@ -42,8 +42,8 @@\n     \""@parcel/watcher-linux-x64-glibc\"": \""^2.5.1\"",\n     \""@parcel/watcher-linux-x64-musl\"": \""^2.5.1\"",\n     \""@parcel/watcher-win32-x64\"": \""^2.5.1\"",\n-    \""@types/bun\"": \""^1.2.2\"",\n-    \""bun\"": \""1.1.43\"",\n+    \""@types/bun\"": \""^1.2.3\"",\n+    \""bun\"": \""^1.2.3\"",\n     \""lightningcss-darwin-arm64\"": \""^1.29.1\"",\n     \""lightningcss-darwin-x64\"": \""^1.29.1\"",\n     \""lightningcss-linux-arm64-gnu\"": \""^1.29.1\"",\n\ndiff --git a/packages/@tailwindcss-standalone/src/index.ts b/packages/@tailwindcss-standalone/src/index.ts\nindex 98e75c3dc394..be85729bb678 100644\n--- a/packages/@tailwindcss-standalone/src/index.ts\n+++ b/packages/@tailwindcss-standalone/src/index.ts\n@@ -71,4 +71,40 @@ globalThis.__tw_readFile = async (path, encoding) => {\n   return fs.readFileSync(path, encoding)\n }\n \n+// We use a plugin to make sure that the JS APIs are bundled with the standalone\n+// CLI and can be imported inside configs and plugins\n+Bun.plugin({\n+  name: 'bundle-tailwindcss-apis',\n+  target: 'bun',\n+  async setup(build) {\n+    // These imports must be static strings otherwise they won't be bundled\n+    let bundled = {\n+      tailwindcss: await import('tailwindcss'),\n+      'tailwindcss/colors': await import('tailwindcss/colors'),\n+      'tailwindcss/colors.js': await import('tailwindcss/colors'),\n+      'tailwindcss/plugin': await import('tailwindcss/plugin'),\n+      'tailwindcss/plugin.js': await import('tailwindcss/plugin'),\n+      'tailwindcss/package.json': await import('tailwindcss/package.json'),\n+      'tailwindcss/lib/util/flattenColorPalette': await import(\n+        'tailwindcss/lib/util/flattenColorPalette'\n+      ),\n+      'tailwindcss/lib/util/flattenColorPalette.js': await import(\n+        'tailwindcss/lib/util/flattenColorPalette'\n+      ),\n+      'tailwindcss/defaultTheme': await import('tailwindcss/defaultTheme'),\n+      'tailwindcss/defaultTheme.js': await import('tailwindcss/defaultTheme'),\n+    }\n+\n+    for (let [id, exports] of Object.entries(bundled)) {\n+      build.module(id, () => ({\n+        loader: 'object',\n+        exports: {\n+          ...exports,\n+          __esModule: true,\n+        },\n+      }))\n+    }\n+  },\n+})\n+\n await import('../../@tailwindcss-cli/src/index.ts')\n\ndiff --git a/playgrounds/vite/package.json b/playgrounds/vite/package.json\nindex 3b530d0ee464..1b5d84cde3c8 100644\n--- a/playgrounds/vite/package.json\n+++ b/playgrounds/vite/package.json\n@@ -18,7 +18,7 @@\n   \""devDependencies\"": {\n     \""@types/react\"": \""^19.0.10\"",\n     \""@types/react-dom\"": \""^19.0.4\"",\n-    \""bun\"": \""^1.1.29\"",\n+    \""bun\"": \""^1.2.3\"",\n     \""vite\"": \""catalog:\""\n   }\n }\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex a22c86a409d8..6a6b3a8cea34 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -272,11 +272,11 @@ importers:\n         specifier: ^2.5.1\n         version: 2.5.1\n       '@types/bun':\n-        specifier: ^1.2.2\n-        version: 1.2.2\n+        specifier: ^1.2.3\n+        version: 1.2.3\n       bun:\n-        specifier: 1.1.43\n-        version: 1.1.43\n+        specifier: ^1.2.3\n+        version: 1.2.3\n       lightningcss-darwin-arm64:\n         specifier: ^1.29.1\n         version: 1.29.1\n@@ -501,8 +501,8 @@ importers:\n         specifier: ^19.0.4\n         version: 19.0.4(@types/react@19.0.10)\n       bun:\n-        specifier: ^1.1.29\n-        version: 1.1.29\n+        specifier: ^1.2.3\n+        version: 1.2.3\n       vite:\n         specifier: 'catalog:'\n         version: 6.0.0(@types/node@20.14.13)(jiti@2.4.2)(lightningcss@1.29.1(patch_hash=gkqcezdn4goium3e3s43dhy4by))(terser@5.31.6)(tsx@4.19.1)(yaml@2.6.0)\n@@ -1288,98 +1288,58 @@ packages:\n     resolution: {integrity: sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==}\n     engines: {node: '>=12.4.0'}\n \n-  '@oven/bun-darwin-aarch64@1.1.29':\n-    resolution: {integrity: sha512-Z8WnrXoAXg6ENU6z+Mil94oipMBMliJIj4XWWqjNC33/ZGPqMdPT5MbFQjbdHjxe5bRBW/aHaMU3G35fGx9Seg==}\n+  '@oven/bun-darwin-aarch64@1.2.3':\n+    resolution: {integrity: sha512-wEUBqSD7KDUx6xcOlNs/lDcbzJYH9CEPVZzAaJ+F3Zp8hORQYJ07byidQ0YgNMc1QhJq4xLaClMDLga6u2abIQ==}\n     cpu: [arm64]\n     os: [darwin]\n \n-  '@oven/bun-darwin-aarch64@1.1.43':\n-    resolution: {integrity: sha512-hOlLk6m/6Lfb5IV6LWDbuMNQHu6kP0f6HMDdLmsdlIBClgDhR0wRVLfeMuaZnUAdzLfWSJpHlsGn9wOp/ePB0g==}\n-    cpu: [arm64]\n-    os: [darwin]\n-\n-  '@oven/bun-darwin-x64-baseline@1.1.29':\n-    resolution: {integrity: sha512-B+zKlJR+3ANPDU+vNjvXaqgB63hYcCk16/k45hiInvIsDXfSdDn4+LMHwZTFdfUWTCGbNMFg9u4bZCtK0nhMDw==}\n-    cpu: [x64]\n-    os: [darwin]\n-\n-  '@oven/bun-darwin-x64-baseline@1.1.43':\n-    resolution: {integrity: sha512-J4MNzMef+uqJdNTlRfeKOhQ9DSCyls3LeGeDBGrgsc+b3SqH8tW3hrHjMChl+oRj4TGl3tRzBvUItUFqStvKtw==}\n+  '@oven/bun-darwin-x64-baseline@1.2.3':\n+    resolution: {integrity: sha512-oYqGnocQ7eY5wfthGivpXd0lzLYklXU4rEKXU4+oLaiFeFnY3lyszv85UHjywuB5bl7xybmSIE8tN8ie36WY1w==}\n     cpu: [x64]\n     os: [darwin]\n \n-  '@oven/bun-darwin-x64@1.1.29':\n-    resolution: {integrity: sha512-tDHDR+OWLCKEP0xE8IGCWRxSsxO5tr3rvyrSzy6CXYkoWPz66kODbtbGfWl8HSwunrQxJKnE2L9LWX2Eiz3Cpw==}\n+  '@oven/bun-darwin-x64@1.2.3':\n+    resolution: {integrity: sha512-kBeKYLNAwQrcJ1HPcuDGo3PGEfDvzHbL5N5kiaui1+eluyCS2yJZvuy2ddg9b0vqQkgzNu7D1keiRLpdR2Wneg==}\n     cpu: [x64]\n     os: [darwin]\n \n-  '@oven/bun-darwin-x64@1.1.43':\n-    resolution: {integrity: sha512-6jR/FpiIb9+qEep0FVaaap7enSuTDKKJt6BApHTPoV5TcZddZUeBxnDLiUjB4WiIEqv4JroGy0WmaCI8tXxawA==}\n-    cpu: [x64]\n-    os: [darwin]\n-\n-  '@oven/bun-linux-aarch64-musl@1.1.43':\n-    resolution: {integrity: sha512-PqzSC/+vk6HtVRBq/uSU3Xozw7uixk8ATLXiSImlL0kvrrL/aQJ+GVmlJxAN045+dJhnAXDsy3tkPITqWiQOsw==}\n+  '@oven/bun-linux-aarch64-musl@1.2.3':\n+    resolution: {integrity: sha512-nSB6FU29OW+8zUP5jRrQEAXl9m6Jd8vp5Swplh3prc0L0niYdtan39wouCxDVFNJafC0DaeKQme4UMQJ65s9qw==}\n     cpu: [aarch64]\n     os: [linux]\n \n-  '@oven/bun-linux-aarch64@1.1.29':\n-    resolution: {integrity: sha512-BuV2Gni+FaMo1r7+3vLjefQYtQcWE01zJJ4zCjyzikP1L4r6PUaLeJyKXbqF6sIR0cLjG6LWj66EGskakDyvWA==}\n-    cpu: [arm64]\n-    os: [linux]\n-\n-  '@oven/bun-linux-aarch64@1.1.43':\n-    resolution: {integrity: sha512-tVAbBN53tDvweeV2rT0j37jOBgYNhFTC6JtOHZjlP8bETaVH4CikLQQGJLKclkqmOFROb00FpIS1ef/jxSqumA==}\n+  '@oven/bun-linux-aarch64@1.2.3':\n+    resolution: {integrity: sha512-hbi7ykhLAtoBZl7mox5Qg6xVy9FcnPNibo/h6A1oElXBl4pRaVGNFDsuDmb80f9sFf4yZL0vwYyb47hL89MiGw==}\n     cpu: [arm64]\n     os: [linux]\n \n-  '@oven/bun-linux-x64-baseline@1.1.29':\n-    resolution: {integrity: sha512-tQhm1SDyymBvc2L3zIN7FI+sI3g9gxavDYuvL/Lz17nEk1oqP5DFE2lF9QWJMDdQL3XQKH/drI27yNpfPHgAPw==}\n-    cpu: [x64]\n-    os: [linux]\n-\n-  '@oven/bun-linux-x64-baseline@1.1.43':\n-    resolution: {integrity: sha512-/eDhCXS7Jl34LGSYAcg53hCPeUyhKGzA7FDFAA8lYeUkqchZkEJoBtqcT/bKjQBrEMDlZHsdvmYwkckqjmdpvw==}\n+  '@oven/bun-linux-x64-baseline@1.2.3':\n+    resolution: {integrity: sha512-PrkC18s81ImpHMdqgFXvyq9Oxed8mzlYb709DsuuoV9NL3nrzQzfqq8JStz/g3dYMc4obrljG/EKXGfMaJMJVA==}\n     cpu: [x64]\n     os: [linux]\n \n-  '@oven/bun-linux-x64-musl-baseline@1.1.43':\n-    resolution: {integrity: sha512-GiO280I+agtsGKF7xv0GqLPowOuT48x1n+Pd/FehqmUG2UwbWFQ3LCvGfSpuiJPg7+LGK+ZYC7FZnJLWNO5btQ==}\n+  '@oven/bun-linux-x64-musl-baseline@1.2.3':\n+    resolution: {integrity: sha512-1VsFwYMOryIsnTGPG70N1HAXoa8Fa7s+XAtP2Y010tao0omgpM0S6Go0Uc7VJ8g+yHKyIw79leRMwUs35ysQZA==}\n     cpu: [x64]\n     os: [linux]\n \n-  '@oven/bun-linux-x64-musl@1.1.43':\n-    resolution: {integrity: sha512-eSK7TYBQBGoSErD9clZhM1XGdUryCRr4J0qX/SpV2KHUGTq04wah0r6do2qnG4ijH5+2m9Kz3kc72bt7EM97mg==}\n+  '@oven/bun-linux-x64-musl@1.2.3':\n+    resolution: {integrity: sha512-481HyvBKKXrKH2VZsSBVsqsqxcnncqpsKz7qgTqnSEToCSyNqc3bGrI6pN6haI9nLawJpIh+oNXCg4JISUi6bg==}\n     cpu: [x64]\n     os: [linux]\n \n-  '@oven/bun-linux-x64@1.1.29':\n-    resolution: {integrity: sha512-JVLiTafybuOFIeC80mZEzHdkOCCzlOtOV5zCbvYAIb7D3SM64fNBwrR0dvDkJTQtsjbwt8YeVFN2YRSI/wlFkw==}\n+  '@oven/bun-linux-x64@1.2.3':\n+    resolution: {integrity: sha512-oxubd+zJW8+1H02bwzne8lj2EtvgoRU6w245hWMtwjo15IET/YGc01ndFRd42FX02bwo926N+7Jm7NFzS8GOHQ==}\n     cpu: [x64]\n     os: [linux]\n \n-  '@oven/bun-linux-x64@1.1.43':\n-    resolution: {integrity: sha512-vuvBcPbygUZQggLjj1MAt4telEllv2+4k5O6IkYHdkytRqqtBrMSvwh4Rb4pdu0LyCxFF5eTm5sUew7tZMBvfw==}\n-    cpu: [x64]\n-    os: [linux]\n-\n-  '@oven/bun-windows-x64-baseline@1.1.29':\n-    resolution: {integrity: sha512-+QWT8Kp+3Sl54QUa6uBsDzQlX11thMMVAw+yUwSRU4Y5FVSN8RPuxhN8ijJ1QGm1KOYA2sCI6V+3lyNMNmRvAA==}\n-    cpu: [x64]\n-    os: [win32]\n-\n-  '@oven/bun-windows-x64-baseline@1.1.43':\n-    resolution: {integrity: sha512-Fj1yGoK9ki0KdSAkWLlF41BzLeaohGSEEYPnxIDDULVhD3zFqPzqdqEQ1/NBsH3px/dJmB22vmM4BOMCYuFAiQ==}\n-    cpu: [x64]\n-    os: [win32]\n-\n-  '@oven/bun-windows-x64@1.1.29':\n-    resolution: {integrity: sha512-d930+pSkNVHPJJBryIh1gsAKk7lp1HzcktFe0bfxwmpHwjj4BiVfMjU1YaCnsdWKNs2Nv1Y1PLVDNyUCQVfo0Q==}\n+  '@oven/bun-windows-x64-baseline@1.2.3':\n+    resolution: {integrity: sha512-pvtDgWRclz/bxLEWUAppj854MklfTu01DfHAvKzV1UAHbBOlurC8+StpE7EhITAHC/jBK9U39eVYnZNvumVU9w==}\n     cpu: [x64]\n     os: [win32]\n \n-  '@oven/bun-windows-x64@1.1.43':\n-    resolution: {integrity: sha512-FesAYHGCWOJ+28041NgVsxPmqCIx1xXJwXJykpAczk1iaLKGHftSTprE1JV0vp2R/mPHFewV2Ktn5rQuExpiGg==}\n+  '@oven/bun-windows-x64@1.2.3':\n+    resolution: {integrity: sha512-z3G7jft1hbiiX47rY666i3HFJZBqCLgddr7e0ccoE/kUk4U5IB08mqJZYW0vaaL8zy0wuEF2h5VkK0S/iryLWw==}\n     cpu: [x64]\n     os: [win32]\n \n@@ -1404,7 +1364,6 @@ packages:\n   '@parcel/watcher-darwin-arm64@2.5.1':\n     resolution: {integrity: sha512-eAzPv5osDmZyBhou8PoF4i6RQXAfeKL9tjb3QzYuccXFMQU0ruIc/POh30ePnaOyD1UXdlKguHBmsTs53tVoPw==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [arm64]\n     os: [darwin]\n \n   '@parcel/watcher-darwin-x64@2.5.0':\n@@ -1416,7 +1375,6 @@ packages:\n   '@parcel/watcher-darwin-x64@2.5.1':\n     resolution: {integrity: sha512-1ZXDthrnNmwv10A0/3AJNZ9JGlzrF82i3gNQcWOzd7nJ8aj+ILyW1MTxVk35Db0u91oD5Nlk9MBiujMlwmeXZg==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [x64]\n     os: [darwin]\n \n   '@parcel/watcher-freebsd-x64@2.5.0':\n@@ -1464,7 +1422,6 @@ packages:\n   '@parcel/watcher-linux-arm64-glibc@2.5.1':\n     resolution: {integrity: sha512-LrGp+f02yU3BN9A+DGuY3v3bmnFUggAITBGriZHUREfNEzZh/GO06FF5u2kx8x+GBEUYfyTGamol4j3m9ANe8w==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [arm64]\n     os: [linux]\n \n   '@parcel/watcher-linux-arm64-musl@2.5.0':\n@@ -1476,7 +1433,6 @@ packages:\n   '@parcel/watcher-linux-arm64-musl@2.5.1':\n     resolution: {integrity: sha512-cFOjABi92pMYRXS7AcQv9/M1YuKRw8SZniCDw0ssQb/noPkRzA+HBDkwmyOJYp5wXcsTrhxO0zq1U11cK9jsFg==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [arm64]\n     os: [linux]\n \n   '@parcel/watcher-linux-x64-glibc@2.5.0':\n@@ -1488,7 +1444,6 @@ packages:\n   '@parcel/watcher-linux-x64-glibc@2.5.1':\n     resolution: {integrity: sha512-GcESn8NZySmfwlTsIur+49yDqSny2IhPeZfXunQi48DMugKeZ7uy1FX83pO0X22sHntJ4Ub+9k34XQCX+oHt2A==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [x64]\n     os: [linux]\n \n   '@parcel/watcher-linux-x64-musl@2.5.0':\n@@ -1500,7 +1455,6 @@ packages:\n   '@parcel/watcher-linux-x64-musl@2.5.1':\n     resolution: {integrity: sha512-n0E2EQbatQ3bXhcH2D1XIAANAcTZkQICBPVaxMeaCVBtOpBZpWJuf7LwyWPSBDITb7In8mqQgJ7gH8CILCURXg==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [x64]\n     os: [linux]\n \n   '@parcel/watcher-wasm@2.5.0':\n@@ -1542,7 +1496,6 @@ packages:\n   '@parcel/watcher-win32-x64@2.5.1':\n     resolution: {integrity: sha512-9lHBdJITeNR++EvSQVUcaZoWupyHfXe1jZvGZ06O/5MflPcuPLtEphScIBL+AiCWBO46tDSHzWyD0uDmmZqsgA==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [x64]\n     os: [win32]\n \n   '@parcel/watcher@2.5.0':\n@@ -1698,8 +1651,8 @@ packages:\n   '@types/braces@3.0.5':\n     resolution: {integrity: sha512-SQFof9H+LXeWNz8wDe7oN5zu7ket0qwMu5vZubW4GCJ8Kkeh6nBWUz87+KTz/G3Kqsrp0j/W253XJb3KMEeg3w==}\n \n-  '@types/bun@1.2.2':\n-    resolution: {integrity: sha512-tr74gdku+AEDN5ergNiBnplr7hpDp3V1h7fqI2GcR/rsUaM39jpSeKH0TFibRvU0KwniRx5POgaYnaXbk0hU+w==}\n+  '@types/bun@1.2.3':\n+    resolution: {integrity: sha512-054h79ipETRfjtsCW9qJK8Ipof67Pw9bodFWmkfkaUaRiIQ1dIV2VTlheshlBx3mpKr0KeK8VqnMMCtgN9rQtw==}\n \n   '@types/estree@1.0.5':\n     resolution: {integrity: sha512-/kYRxGDLWzHOB7q+wtSUQlFrtcdUccpfy+X+9iMBpHK8QLLhx2wIPYuS5DYtR9Wa/YlZAbIovy7qVdB1Aq6Lyw==}\n@@ -1940,18 +1893,11 @@ packages:\n   buffer-from@1.1.2:\n     resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}\n \n-  bun-types@1.2.2:\n-    resolution: {integrity: sha512-RCbMH5elr9gjgDGDhkTTugA21XtJAy/9jkKe/G3WR2q17VPGhcquf9Sir6uay9iW+7P/BV0CAHA1XlHXMAVKHg==}\n-\n-  bun@1.1.29:\n-    resolution: {integrity: sha512-SKhpyKNZtgxrVel9ec9xon3LDv8mgpiuFhARgcJo1YIbggY2PBrKHRNiwQ6Qlb+x3ivmRurfuwWgwGexjpgBRg==}\n-    cpu: [arm64, x64]\n-    os: [darwin, linux, win32]\n-    hasBin: true\n+  bun-types@1.2.3:\n+    resolution: {integrity: sha512-P7AeyTseLKAvgaZqQrvp3RqFM3yN9PlcLuSTe7SoJOfZkER73mLdT2vEQi8U64S1YvM/ldcNiQjn0Sn7H9lGgg==}\n \n-  bun@1.1.43:\n-    resolution: {integrity: sha512-8Acq5NuECRXx62jVera3rnLcsaHh4/k5Res3dOQFv783nyRKo39W3DHlenGlXB9bNWbtRybBEvkKaH+zdwzLHw==}\n-    cpu: [arm64, x64, aarch64]\n+  bun@1.2.3:\n+    resolution: {integrity: sha512-i8F+I3wxmt9omnLh3lOg0APQtqxZaMU0x6xuC+9YH4Eg/7fu8SM4YbdwyvV8Z6sy3OMtGFB0SYOjU2STuId4FQ==}\n     os: [darwin, linux, win32]\n     hasBin: true\n \n@@ -2767,13 +2713,11 @@ packages:\n   lightningcss-darwin-arm64@1.29.1:\n     resolution: {integrity: sha512-HtR5XJ5A0lvCqYAoSv2QdZZyoHNttBpa5EP9aNuzBQeKGfbyH5+UipLWvVzpP4Uml5ej4BYs5I9Lco9u1fECqw==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [arm64]\n     os: [darwin]\n \n   lightningcss-darwin-x64@1.29.1:\n     resolution: {integrity: sha512-k33G9IzKUpHy/J/3+9MCO4e+PzaFblsgBjSGlpAaFikeBFm8B/CkO3cKU9oI4g+fjS2KlkLM/Bza9K/aw8wsNA==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [x64]\n     os: [darwin]\n \n   lightningcss-freebsd-x64@1.29.1:\n@@ -2791,25 +2735,21 @@ packages:\n   lightningcss-linux-arm64-gnu@1.29.1:\n     resolution: {integrity: sha512-0+vClRIZ6mmJl/dxGuRsE197o1HDEeeRk6nzycSy2GofC2JsY4ifCRnvUWf/CUBQmlrvMzt6SMQNMSEu22csWQ==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [arm64]\n     os: [linux]\n \n   lightningcss-linux-arm64-musl@1.29.1:\n     resolution: {integrity: sha512-UKMFrG4rL/uHNgelBsDwJcBqVpzNJbzsKkbI3Ja5fg00sgQnHw/VrzUTEc4jhZ+AN2BvQYz/tkHu4vt1kLuJyw==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [arm64]\n     os: [linux]\n \n   lightningcss-linux-x64-gnu@1.29.1:\n     resolution: {integrity: sha512-u1S+xdODy/eEtjADqirA774y3jLcm8RPtYztwReEXoZKdzgsHYPl0s5V52Tst+GKzqjebkULT86XMSxejzfISw==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [x64]\n     os: [linux]\n \n   lightningcss-linux-x64-musl@1.29.1:\n     resolution: {integrity: sha512-L0Tx0DtaNUTzXv0lbGCLB/c/qEADanHbu4QdcNOXLIe1i8i22rZRpbT3gpWYsCh9aSL9zFujY/WmEXIatWvXbw==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [x64]\n     os: [linux]\n \n   lightningcss-win32-arm64-msvc@1.29.1:\n@@ -2821,7 +2761,6 @@ packages:\n   lightningcss-win32-x64-msvc@1.29.1:\n     resolution: {integrity: sha512-NygcbThNBe4JElP+olyTI/doBNGJvLs3bFCRPdvuCcxZCcCZ71B858IHpdm7L1btZex0FvCmM17FK98Y9MRy1Q==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [x64]\n     os: [win32]\n \n   lightningcss@1.29.1:\n@@ -4421,61 +4360,37 @@ snapshots:\n \n   '@nolyfill/is-core-module@1.0.39': {}\n \n-  '@oven/bun-darwin-aarch64@1.1.29':\n+  '@oven/bun-darwin-aarch64@1.2.3':\n     optional: true\n \n-  '@oven/bun-darwin-aarch64@1.1.43':\n+  '@oven/bun-darwin-x64-baseline@1.2.3':\n     optional: true\n \n-  '@oven/bun-darwin-x64-baseline@1.1.29':\n+  '@oven/bun-darwin-x64@1.2.3':\n     optional: true\n \n-  '@oven/bun-darwin-x64-baseline@1.1.43':\n+  '@oven/bun-linux-aarch64-musl@1.2.3':\n     optional: true\n \n-  '@oven/bun-darwin-x64@1.1.29':\n+  '@oven/bun-linux-aarch64@1.2.3':\n     optional: true\n \n-  '@oven/bun-darwin-x64@1.1.43':\n+  '@oven/bun-linux-x64-baseline@1.2.3':\n     optional: true\n \n-  '@oven/bun-linux-aarch64-musl@1.1.43':\n+  '@oven/bun-linux-x64-musl-baseline@1.2.3':\n     optional: true\n \n-  '@oven/bun-linux-aarch64@1.1.29':\n+  '@oven/bun-linux-x64-musl@1.2.3':\n     optional: true\n \n-  '@oven/bun-linux-aarch64@1.1.43':\n+  '@oven/bun-linux-x64@1.2.3':\n     optional: true\n \n-  '@oven/bun-linux-x64-baseline@1.1.29':\n+  '@oven/bun-windows-x64-baseline@1.2.3':\n     optional: true\n \n-  '@oven/bun-linux-x64-baseline@1.1.43':\n-    optional: true\n-\n-  '@oven/bun-linux-x64-musl-baseline@1.1.43':\n-    optional: true\n-\n-  '@oven/bun-linux-x64-musl@1.1.43':\n-    optional: true\n-\n-  '@oven/bun-linux-x64@1.1.29':\n-    optional: true\n-\n-  '@oven/bun-linux-x64@1.1.43':\n-    optional: true\n-\n-  '@oven/bun-windows-x64-baseline@1.1.29':\n-    optional: true\n-\n-  '@oven/bun-windows-x64-baseline@1.1.43':\n-    optional: true\n-\n-  '@oven/bun-windows-x64@1.1.29':\n-    optional: true\n-\n-  '@oven/bun-windows-x64@1.1.43':\n+  '@oven/bun-windows-x64@1.2.3':\n     optional: true\n \n   '@parcel/watcher-android-arm64@2.5.0':\n@@ -4709,9 +4624,9 @@ snapshots:\n \n   '@types/braces@3.0.5': {}\n \n-  '@types/bun@1.2.2':\n+  '@types/bun@1.2.3':\n     dependencies:\n-      bun-types: 1.2.2\n+      bun-types: 1.2.3\n \n   '@types/estree@1.0.5': {}\n \n@@ -5085,35 +5000,24 @@ snapshots:\n   buffer-from@1.1.2:\n     optional: true\n \n-  bun-types@1.2.2:\n+  bun-types@1.2.3:\n     dependencies:\n       '@types/node': 20.14.13\n       '@types/ws': 8.5.12\n \n-  bun@1.1.29:\n-    optionalDependencies:\n-      '@oven/bun-darwin-aarch64': 1.1.29\n-      '@oven/bun-darwin-x64': 1.1.29\n-      '@oven/bun-darwin-x64-baseline': 1.1.29\n-      '@oven/bun-linux-aarch64': 1.1.29\n-      '@oven/bun-linux-x64': 1.1.29\n-      '@oven/bun-linux-x64-baseline': 1.1.29\n-      '@oven/bun-windows-x64': 1.1.29\n-      '@oven/bun-windows-x64-baseline': 1.1.29\n-\n-  bun@1.1.43:\n+  bun@1.2.3:\n     optionalDependencies:\n-      '@oven/bun-darwin-aarch64': 1.1.43\n-      '@oven/bun-darwin-x64': 1.1.43\n-      '@oven/bun-darwin-x64-baseline': 1.1.43\n-      '@oven/bun-linux-aarch64': 1.1.43\n-      '@oven/bun-linux-aarch64-musl': 1.1.43\n-      '@oven/bun-linux-x64': 1.1.43\n-      '@oven/bun-linux-x64-baseline': 1.1.43\n-      '@oven/bun-linux-x64-musl': 1.1.43\n-      '@oven/bun-linux-x64-musl-baseline': 1.1.43\n-      '@oven/bun-windows-x64': 1.1.43\n-      '@oven/bun-windows-x64-baseline': 1.1.43\n+      '@oven/bun-darwin-aarch64': 1.2.3\n+      '@oven/bun-darwin-x64': 1.2.3\n+      '@oven/bun-darwin-x64-baseline': 1.2.3\n+      '@oven/bun-linux-aarch64': 1.2.3\n+      '@oven/bun-linux-aarch64-musl': 1.2.3\n+      '@oven/bun-linux-x64': 1.2.3\n+      '@oven/bun-linux-x64-baseline': 1.2.3\n+      '@oven/bun-linux-x64-musl': 1.2.3\n+      '@oven/bun-linux-x64-musl-baseline': 1.2.3\n+      '@oven/bun-windows-x64': 1.2.3\n+      '@oven/bun-windows-x64-baseline': 1.2.3\n \n   bundle-require@5.0.0(esbuild@0.24.0):\n     dependencies:\n@@ -5545,7 +5449,7 @@ snapshots:\n       debug: 4.3.7\n       enhanced-resolve: 5.18.1\n       eslint: 9.20.1(jiti@2.4.2)\n-      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.5.4))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3)(eslint@9.20.1(jiti@2.4.2))\n+      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.5.4))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.5.4))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0)(eslint@9.20.1(jiti@2.4.2)))(eslint@9.20.1(jiti@2.4.2))\n       fast-glob: 3.3.3\n       get-tsconfig: 4.8.1\n       is-bun-module: 1.2.1\n@@ -5564,7 +5468,7 @@ snapshots:\n       debug: 4.3.7\n       enhanced-resolve: 5.18.1\n       eslint: 9.20.1(jiti@2.4.2)\n-      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.6.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3)(eslint@9.20.1(jiti@2.4.2))\n+      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.6.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.6.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0)(eslint@9.20.1(jiti@2.4.2)))(eslint@9.20.1(jiti@2.4.2))\n       fast-glob: 3.3.3\n       get-tsconfig: 4.8.1\n       is-bun-module: 1.2.1\n@@ -5577,7 +5481,7 @@ snapshots:\n       - eslint-import-resolver-webpack\n       - supports-color\n \n-  eslint-module-utils@2.12.0(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.5.4))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3)(eslint@9.20.1(jiti@2.4.2)):\n+  eslint-module-utils@2.12.0(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.5.4))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.5.4))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0)(eslint@9.20.1(jiti@2.4.2)))(eslint@9.20.1(jiti@2.4.2)):\n     dependencies:\n       debug: 3.2.7\n     optionalDependencies:\n@@ -5588,7 +5492,7 @@ snapshots:\n     transitivePeerDependencies:\n       - supports-color\n \n-  eslint-module-utils@2.12.0(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.6.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3)(eslint@9.20.1(jiti@2.4.2)):\n+  eslint-module-utils@2.12.0(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.6.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.6.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0)(eslint@9.20.1(jiti@2.4.2)))(eslint@9.20.1(jiti@2.4.2)):\n     dependencies:\n       debug: 3.2.7\n     optionalDependencies:\n@@ -5610,7 +5514,7 @@ snapshots:\n       doctrine: 2.1.0\n       eslint: 9.20.1(jiti@2.4.2)\n       eslint-import-resolver-node: 0.3.9\n-      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.5.4))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3)(eslint@9.20.1(jiti@2.4.2))\n+      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.5.4))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.5.4))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0)(eslint@9.20.1(jiti@2.4.2)))(eslint@9.20.1(jiti@2.4.2))\n       hasown: 2.0.2\n       is-core-module: 2.15.1\n       is-glob: 4.0.3\n@@ -5639,7 +5543,7 @@ snapshots:\n       doctrine: 2.1.0\n       eslint: 9.20.1(jiti@2.4.2)\n       eslint-import-resolver-node: 0.3.9\n-      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.6.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3)(eslint@9.20.1(jiti@2.4.2))\n+      eslint-module-utils: 2.12.0(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.6.3))(eslint-import-resolver-node@0.3.9)(eslint-import-resolver-typescript@3.6.3(@typescript-eslint/parser@8.11.0(eslint@9.20.1(jiti@2.4.2))(typescript@5.6.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0)(eslint@9.20.1(jiti@2.4.2)))(eslint@9.20.1(jiti@2.4.2))\n       hasown: 2.0.2\n       is-core-module: 2.15.1\n       is-glob: 4.0.3\n"", ""test_patch"": ""diff --git a/integrations/cli/standalone.test.ts b/integrations/cli/standalone.test.ts\nindex a40d69fc95b7..bf8ed6bbb739 100644\n--- a/integrations/cli/standalone.test.ts\n+++ b/integrations/cli/standalone.test.ts\n@@ -1,6 +1,6 @@\n import os from 'node:os'\n import path from 'node:path'\n-import { candidate, css, html, json, test } from '../utils'\n+import { candidate, css, html, js, json, test } from '../utils'\n \n const STANDALONE_BINARY = (() => {\n   switch (os.platform()) {\n@@ -56,3 +56,110 @@ test(\n     ])\n   },\n )\n+\n+test(\n+  'includes js APIs for plugins',\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""dependencies\"": {}\n+        }\n+      `,\n+      'index.html': html`\n+        <div class=\""underline example1 example2 example3\""></div>\n+      `,\n+      'src/index.css': css`\n+        @import 'tailwindcss/theme' theme(reference);\n+        @import 'tailwindcss/utilities';\n+        @plugin './plugin.js';\n+        @plugin './plugin.cjs';\n+        @plugin './plugin.ts';\n+      `,\n+      'src/plugin.js': js`\n+        import plugin from 'tailwindcss/plugin'\n+\n+        // Make sure all available JS APIs can be imported and used\n+        import * as tw from 'tailwindcss'\n+        import colors from 'tailwindcss/colors'\n+        import flattenColorPalette from 'tailwindcss/lib/util/flattenColorPalette'\n+        import defaultTheme from 'tailwindcss/defaultTheme'\n+        import * as pkg from 'tailwindcss/package.json'\n+\n+        export default plugin(function ({ addUtilities }) {\n+          addUtilities({\n+            '.example1': {\n+              '--version': pkg.version,\n+              '--default-theme': typeof defaultTheme,\n+              '--flatten-color-palette': typeof flattenColorPalette,\n+              '--colors': typeof colors,\n+              '--core': typeof tw,\n+              color: 'red',\n+            },\n+          })\n+        })\n+      `,\n+      'src/plugin.cjs': js`\n+        const plugin = require('tailwindcss/plugin')\n+\n+        // Make sure all available JS APIs can be imported and used\n+        const tw = require('tailwindcss')\n+        const colors = require('tailwindcss/colors')\n+        const flattenColorPalette = require('tailwindcss/lib/util/flattenColorPalette')\n+        const defaultTheme = require('tailwindcss/defaultTheme')\n+        const pkg = require('tailwindcss/package.json')\n+\n+        module.exports = plugin(function ({ addUtilities }) {\n+          addUtilities({\n+            '.example2': {\n+              '--version': pkg.version,\n+              '--default-theme': typeof defaultTheme,\n+              '--flatten-color-palette': typeof flattenColorPalette,\n+              '--colors': typeof colors,\n+              '--core': typeof tw,\n+              color: 'red',\n+            },\n+          })\n+        })\n+      `,\n+      'src/plugin.ts': js`\n+        import plugin from 'tailwindcss/plugin'\n+\n+        // Make sure all available JS APIs can be imported and used\n+        import * as tw from 'tailwindcss'\n+        import colors from 'tailwindcss/colors'\n+        import flattenColorPalette from 'tailwindcss/lib/util/flattenColorPalette'\n+        import defaultTheme from 'tailwindcss/defaultTheme'\n+        import * as pkg from 'tailwindcss/package.json'\n+\n+        export interface PluginOptions {\n+        }\n+\n+        export default plugin(function ({ addUtilities }) {\n+          addUtilities({\n+            '.example3': {\n+              '--version': pkg.version,\n+              '--default-theme': typeof defaultTheme,\n+              '--flatten-color-palette': typeof flattenColorPalette,\n+              '--colors': typeof colors,\n+              '--core': typeof tw,\n+              color: 'red',\n+            },\n+          })\n+        })\n+      `,\n+    },\n+  },\n+  async ({ fs, exec }) => {\n+    await exec(\n+      `${path.resolve(__dirname, `../../packages/@tailwindcss-standalone/dist/${STANDALONE_BINARY}`)} --input src/index.css --output dist/out.css`,\n+    )\n+\n+    await fs.expectFileToContain('dist/out.css', [\n+      candidate`underline`,\n+      candidate`example1`,\n+      candidate`example2`,\n+      candidate`example3`,\n+    ])\n+  },\n+)\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15921"", ""pr_id"": 15921, ""issue_id"": 15911, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Font size / line height shorthand doesn't apply `line-height` when leading value is `none`\n**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\n@tailwindcss/vite 4.0.0, Vite 6.0.11\n\n**What version of Node.js are you using?**\n\nNode.js 20.x\n\n**What browser are you using?**\n\nAppears in all browsers tested.\n\n**What operating system are you using?**\n\nWindows 11\n\n**Reproduction URL**\n\nhttps://play.tailwindcss.com/ZmoWtl9NX5\n\n**Describe your issue**\n\nThe `font-size` / `line-height` shorthand syntax (e.g., `text-3xl/none`) doesn't apply the `line-height` for `none` leading. The generated ruleset for, e.g. `text-3xl/none` doesn't contain the expected `line-height: 1`.\n\nThe example shows pairs of identical text at different sizes. Each pair shows:\n- Left (red border): Using shorthand syntax (e.g., `text-3xl/none`)\n- Right (blue border): Using separate classes (e.g., `text-3xl leading-none`)\n\nExpected behavior:\n- Both syntaxes should produce identical line heights\n- The shorthand `text-3xl/none` should be equivalent to `text-3xl leading-none`\n- The columns should look the same\n\nActual behavior:\n- Text in the red column has its default line height.\n\nToggling the example to Tailwind v3 shows that this behavior is new with v4."", ""issue_word_count"": 217, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""a707fed089c40dad629d322688f58f332ab41a47"", ""head_commit"": ""f112350aaa294de000486d6daa6bc7764a4d714a"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15921"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15921"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-27T13:10:09.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 7c86bbd08a00..f82411ac8b05 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -11,6 +11,8 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Remove invalid `min-w/h-none` utilities ([#15845](https://github.com/tailwindlabs/tailwindcss/pull/15845))\n - Ensure CSS variable shorthand uses valid CSS variables ([#15738](https://github.com/tailwindlabs/tailwindcss/pull/15738))\n+- Ensure font-size utilities with `none` modifier have a line-height set e.g.: `text-sm/none` ([#15921](https://github.com/tailwindlabs/tailwindcss/pull/15921))\n+- Ensure font-size utilities with unknown modifier don't generate CSS ([#15921](https://github.com/tailwindlabs/tailwindcss/pull/15921))\n \n ## [4.0.0] - 2025-01-21\n \n@@ -330,7 +332,7 @@ For a deep-dive into everything that's new, [check out the announcement post](ht\n - Rename `drop-shadow` to `drop-shadow-sm` and `drop-shadow-sm` to `drop-shadow-xs` ([#14849](https://github.com/tailwindlabs/tailwindcss/pull/14849))\n - Rename `rounded` to `rounded-sm` and `rounded-sm` to `rounded-xs` ([#14849](https://github.com/tailwindlabs/tailwindcss/pull/14849))\n - Rename `blur` to `blur-sm` and `blur-sm` to `blur-xs` ([#14849](https://github.com/tailwindlabs/tailwindcss/pull/14849))\n-- Remove fixed line-height theme values and derive `leading-*` utilites from `--spacing-*` scale ([#14857](https://github.com/tailwindlabs/tailwindcss/pull/14857))\n+- Remove fixed line-height theme values and derive `leading-*` utilities from `--spacing-*` scale ([#14857](https://github.com/tailwindlabs/tailwindcss/pull/14857))\n - Remove `--transition-timing-function-linear` from the default theme in favor of a static `ease-linear` utility ([#14880](https://github.com/tailwindlabs/tailwindcss/pull/14880))\n - Remove default `--spacing-*` scale in favor of `--spacing` multiplier ([#14857](https://github.com/tailwindlabs/tailwindcss/pull/14857))\n - Remove `var(\u2026)` fallbacks from theme values in utilities ([#14881](https://github.com/tailwindlabs/tailwindcss/pull/14881))\n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 99c8b4282a40..66caeb4ee006 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -4040,9 +4040,16 @@ export function createUtilities(theme: Theme) {\n               modifier = `calc(${multiplier} * ${candidate.modifier.value})`\n             }\n \n+            // Shorthand for `leading-none`\n+            if (!modifier && candidate.modifier.value === 'none') {\n+              modifier = '1'\n+            }\n+\n             if (modifier) {\n               return [decl('font-size', value), decl('line-height', modifier)]\n             }\n+\n+            return null\n           }\n \n           return [decl('font-size', value)]\n@@ -4086,6 +4093,15 @@ export function createUtilities(theme: Theme) {\n             modifier = `calc(${multiplier} * ${candidate.modifier.value})`\n           }\n \n+          // Shorthand for `leading-none`\n+          if (!modifier && candidate.modifier.value === 'none') {\n+            modifier = '1'\n+          }\n+\n+          if (!modifier) {\n+            return null\n+          }\n+\n           let declarations = [decl('font-size', fontSize)]\n           modifier && declarations.push(decl('line-height', modifier))\n           return declarations\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 9ecf38882316..e235777b2c98 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -14927,6 +14927,7 @@ test('text', async () => {\n           --color-red-500: #ef4444;\n           --text-sm: 0.875rem;\n           --text-sm--line-height: 1.25rem;\n+          --leading-snug: 1.375;\n         }\n         @tailwind utilities;\n       `,\n@@ -14962,6 +14963,9 @@ test('text', async () => {\n         // font-size / line-height / letter-spacing / font-weight\n         'text-sm',\n         'text-sm/6',\n+        'text-sm/none',\n+        'text-[10px]/none',\n+        'text-sm/snug',\n         'text-sm/[4px]',\n         'text-[12px]',\n         'text-[12px]/6',\n@@ -14986,6 +14990,7 @@ test('text', async () => {\n       --color-red-500: #ef4444;\n       --text-sm: .875rem;\n       --text-sm--line-height: 1.25rem;\n+      --leading-snug: 1.375;\n     }\n \n     .text-sm {\n@@ -14993,6 +14998,11 @@ test('text', async () => {\n       line-height: var(--tw-leading, var(--text-sm--line-height));\n     }\n \n+    .text-\\\\[10px\\\\]\\\\/none {\n+      font-size: 10px;\n+      line-height: 1;\n+    }\n+\n     .text-\\\\[12px\\\\]\\\\/6 {\n       font-size: 12px;\n       line-height: calc(var(--spacing) * 6);\n@@ -15028,6 +15038,16 @@ test('text', async () => {\n       line-height: 4px;\n     }\n \n+    .text-sm\\\\/none {\n+      font-size: var(--text-sm);\n+      line-height: 1;\n+    }\n+\n+    .text-sm\\\\/snug {\n+      font-size: var(--text-sm);\n+      line-height: var(--leading-snug);\n+    }\n+\n     .text-\\\\[12px\\\\] {\n       font-size: 12px;\n     }\n@@ -15121,29 +15141,39 @@ test('text', async () => {\n     }\""\n   `)\n   expect(\n-    await run([\n-      'text',\n-      // color\n-      '-text-red-500',\n-      '-text-red-500/50',\n-      '-text-red-500/[0.5]',\n-      '-text-red-500/[50%]',\n-      '-text-current',\n-      '-text-current/50',\n-      '-text-current/[0.5]',\n-      '-text-current/[50%]',\n-      '-text-inherit',\n-      '-text-transparent',\n-      '-text-[#0088cc]',\n-      '-text-[#0088cc]/50',\n-      '-text-[#0088cc]/[0.5]',\n-      '-text-[#0088cc]/[50%]',\n-\n-      // font-size / line-height / letter-spacing / font-weight\n-      '-text-sm',\n-      '-text-sm/6',\n-      '-text-sm/[4px]',\n-    ]),\n+    await compileCss(\n+      css`\n+        @theme inline reference {\n+          --text-sm: 0.875rem;\n+        }\n+        @tailwind utilities;\n+      `,\n+      [\n+        'text',\n+        // color\n+        '-text-red-500',\n+        '-text-red-500/50',\n+        '-text-red-500/[0.5]',\n+        '-text-red-500/[50%]',\n+        '-text-current',\n+        '-text-current/50',\n+        '-text-current/[0.5]',\n+        '-text-current/[50%]',\n+        '-text-inherit',\n+        '-text-transparent',\n+        '-text-[#0088cc]',\n+        '-text-[#0088cc]/50',\n+        '-text-[#0088cc]/[0.5]',\n+        '-text-[#0088cc]/[50%]',\n+\n+        // font-size / line-height / letter-spacing / font-weight\n+        '-text-sm',\n+        '-text-sm/6',\n+        'text-sm/foo',\n+        '-text-sm/[4px]',\n+        'text-[10px]/foo',\n+      ],\n+    ),\n   ).toEqual('')\n })\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15845"", ""pr_id"": 15845, ""issue_id"": 15846, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""min-h-none and min-w-none do not set correct styles\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\n\n**What version of Tailwind CSS are you using?**\n\nv4.0.0\n\n**What build tool (or framework if it abstracts the build tool) are you using?**\n\nNuxt.js v3.15.3\n\n**What version of Node.js are you using?**\n\nv20.12.2\n\n**What browser are you using?**\n\nChrome\n\n**What operating system are you using?**\n\nWindows 11\n\n**Reproduction URL**\n\nThese appear to be the lines responsible for adding the `min-w-none` and `min-h-none`  classes.\nhttps://github.com/tailwindlabs/tailwindcss/blob/a8c54acaba7d51875bd332163754fb8bc40939a4/packages/tailwindcss/src/utilities.ts#L899-L902\n\n**Describe your issue**\n\nThere are utility classes for `min-width: none` (`min-w-none`) and `min-height: none` (`min-h-none`). However, `none` is not a valid keyword for those styles.\n\n`none` _is_ valid for [max-height](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height#syntax) and [max-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width#syntax).\n`none` _is not_ valid for [min-height](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height#syntax) and [min-width](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width#syntax).\n\n**Alternatives**\nBoth `min-w-0` and `min-w-[0]` can be used to set `min-width` to zero, and the same goes for height."", ""issue_word_count"": 257, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap""], ""base_commit"": ""a8c54acaba7d51875bd332163754fb8bc40939a4"", ""head_commit"": ""5d5dba2e22ae9ae7348d35ec14e508a3a27876a6"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15845"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15845"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-25T17:04:55.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 2cf05bf19e3e..49fff091e19f 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -7,9 +7,12 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ## [Unreleased]\n \n-- Nothing yet\n+### Fixed\n+\n+- Remove invalid `min-w/h-none` utilities ([#15845](https://github.com/tailwindlabs/tailwindcss/pull/15845))\n \n ## [4.0.0] - 2025-01-21\n+\n ## [4.0.0-beta.10] - 2025-01-21\n \n ### Added\n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 8de82f4cbbad..99c8b4282a40 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -896,9 +896,7 @@ export function createUtilities(theme: Theme) {\n   staticUtility(`min-h-screen`, [['min-height', '100vh']])\n   staticUtility(`max-h-screen`, [['max-height', '100vh']])\n \n-  staticUtility(`min-w-none`, [['min-width', 'none']])\n   staticUtility(`max-w-none`, [['max-width', 'none']])\n-  staticUtility(`min-h-none`, [['min-height', 'none']])\n   staticUtility(`max-h-none`, [['max-height', 'none']])\n \n   spacingUtility(\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\nindex 3f95c9fafcb1..203e52712f55 100644\n--- a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n@@ -4719,7 +4719,6 @@ exports[`getClassList 1`] = `\n   \""min-h-lvw\"",\n   \""min-h-max\"",\n   \""min-h-min\"",\n-  \""min-h-none\"",\n   \""min-h-px\"",\n   \""min-h-screen\"",\n   \""min-h-svh\"",\n@@ -4767,7 +4766,6 @@ exports[`getClassList 1`] = `\n   \""min-w-lvw\"",\n   \""min-w-max\"",\n   \""min-w-min\"",\n-  \""min-w-none\"",\n   \""min-w-px\"",\n   \""min-w-screen\"",\n   \""min-w-svh\"",\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15656"", ""pr_id"": 15656, ""issue_id"": 15648, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Attempting to capture STDOUT writes styles to `./true`\n### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/15350\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-beta.9\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nnpx @tailwindcss/cli@next\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.12.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nMac / Win\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/vormwald/tailwind-stdout-bug/\r\n\r\n**Describe your issue**\r\n\r\nI'm trying to update my jekyll plugin which captures output from Tailwind CLI and writes a new CSS file. (I'm using the executable in the [tailwindcss-ruby](https://github.com/flavorjones/tailwindcss-ruby) gem. However, my repo linked above uses npx to run the CLI). \r\n\r\nCurrently, on 3.4, I omit a `-o` option, and the CLI writes to STDOUT.\r\n\r\nOn the v4 betas, when I omit the `-o`, I get the usage menu.\r\n\r\nUnexpectedly, when I provide `-o` without an \""output file,\"" it writes the tailwind CSS styles to a file called \""true\"".\r\n\r\n\r\n\r\n"", ""issue_word_count"": 183, ""test_files_count"": 1, ""non_test_files_count"": 5, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/cli/index.test.ts"", ""integrations/utils.ts"", ""packages/@tailwindcss-cli/src/commands/build/index.ts"", ""packages/@tailwindcss-cli/src/index.ts"", ""packages/@tailwindcss-cli/src/utils/args.ts""], ""pr_changed_test_files"": [""integrations/cli/index.test.ts""], ""base_commit"": ""2f8c51774e6c6fa1e75bb54eef2624853ef80afe"", ""head_commit"": ""f69789de7e5e883930bcbf40e877de651bf35638"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15656"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15656"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-17T15:23:35.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex f87ef7da6dcb..1645f7212e9e 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -14,6 +14,8 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Resolve values in functional utilities based on `@theme` options ([#15623](https://github.com/tailwindlabs/tailwindcss/pull/15623))\n - Discard invalid variants such as `data-checked-[selected=1]:*` ([#15629](https://github.com/tailwindlabs/tailwindcss/pull/15629))\n - Ensure `-outline-offset-*` utilities are suggested in IntelliSense ([#15646](https://github.com/tailwindlabs/tailwindcss/pull/15646))\n+- Write to `stdout` when `--output` is set to `-` or omitted for `@tailwindcss/cli` ([#15656](https://github.com/tailwindlabs/tailwindcss/pull/15656))\n+- Write to `stdout` when `--output -` flag is used for `@tailwindcss/cli` ([#15656](https://github.com/tailwindlabs/tailwindcss/pull/15656))\n - _Upgrade (experimental)_: Pretty print `--spacing(\u2026)` to prevent ambiguity ([#15596](https://github.com/tailwindlabs/tailwindcss/pull/15596))\n \n ## [4.0.0-beta.9] - 2025-01-09\n\ndiff --git a/integrations/utils.ts b/integrations/utils.ts\nindex 8f916a3d042f..4644ece49ab8 100644\n--- a/integrations/utils.ts\n+++ b/integrations/utils.ts\n@@ -25,6 +25,7 @@ interface ChildProcessOptions {\n \n interface ExecOptions {\n   ignoreStdErr?: boolean\n+  stdin?: string\n }\n \n interface TestConfig {\n@@ -112,7 +113,7 @@ export function test(\n           }\n           if (debug) console.log(`> ${command}`)\n           return new Promise((resolve, reject) => {\n-            exec(\n+            let child = exec(\n               command,\n               {\n                 cwd,\n@@ -134,6 +135,10 @@ export function test(\n                 }\n               },\n             )\n+            if (execOptions.stdin) {\n+              child.stdin?.write(execOptions.stdin)\n+              child.stdin?.end()\n+            }\n           })\n         },\n         async spawn(command: string, childProcessOptions: ChildProcessOptions = {}) {\n\ndiff --git a/packages/@tailwindcss-cli/src/commands/build/index.ts b/packages/@tailwindcss-cli/src/commands/build/index.ts\nindex 67c959cbf6cf..6991e7bf0f16 100644\n--- a/packages/@tailwindcss-cli/src/commands/build/index.ts\n+++ b/packages/@tailwindcss-cli/src/commands/build/index.ts\n@@ -32,6 +32,7 @@ export function options() {\n       type: 'string',\n       description: 'Output file',\n       alias: '-o',\n+      default: '-',\n     },\n     '--watch': {\n       type: 'boolean | string',\n@@ -72,8 +73,10 @@ export async function handle(args: Result<ReturnType<typeof options>>) {\n \n   let base = path.resolve(args['--cwd'])\n \n-  // Resolve the output as an absolute path.\n-  if (args['--output']) {\n+  // Resolve the output as an absolute path. If the output is a `-`, then we\n+  // don't need to resolve it because this is a flag to indicate that we want to\n+  // use `stdout` instead.\n+  if (args['--output'] && args['--output'] !== '-') {\n     args['--output'] = path.resolve(base, args['--output'])\n   }\n \n@@ -129,7 +132,7 @@ export async function handle(args: Result<ReturnType<typeof options>>) {\n \n     // Write the output\n     DEBUG && I.start('Write output')\n-    if (args['--output']) {\n+    if (args['--output'] && args['--output'] !== '-') {\n       await outputFile(args['--output'], output)\n     } else {\n       println(output)\n\ndiff --git a/packages/@tailwindcss-cli/src/index.ts b/packages/@tailwindcss-cli/src/index.ts\nindex 511781759079..41807f174b94 100644\n--- a/packages/@tailwindcss-cli/src/index.ts\n+++ b/packages/@tailwindcss-cli/src/index.ts\n@@ -36,7 +36,7 @@ if (command) {\n //\n //   - `tailwindcss -o output.css`  // should run the build command, not show the help message\n //   - `tailwindcss > output.css`   // should run the build command, not show the help message\n-if ((process.stdout.isTTY && !flags['--output']) || flags['--help']) {\n+if ((process.stdout.isTTY && process.argv[2] === undefined) || flags['--help']) {\n   help({\n     usage: ['tailwindcss [--input input.css] [--output output.css] [--watch] [options\u2026]'],\n     options: { ...build.options(), ...sharedOptions },\n\ndiff --git a/packages/@tailwindcss-cli/src/utils/args.ts b/packages/@tailwindcss-cli/src/utils/args.ts\nindex 81bd847d50d1..1e4e153b8a03 100644\n--- a/packages/@tailwindcss-cli/src/utils/args.ts\n+++ b/packages/@tailwindcss-cli/src/utils/args.ts\n@@ -67,8 +67,20 @@ export type Result<T extends Arg> = {\n }\n \n export function args<const T extends Arg>(options: T, argv = process.argv.slice(2)): Result<T> {\n+  for (let [idx, value] of argv.entries()) {\n+    if (value === '-') {\n+      argv[idx] = '__IO_DEFAULT_VALUE__'\n+    }\n+  }\n+\n   let parsed = parse(argv)\n \n+  for (let key in parsed) {\n+    if (parsed[key] === '__IO_DEFAULT_VALUE__') {\n+      parsed[key] = '-'\n+    }\n+  }\n+\n   let result: { _: string[]; [key: string]: unknown } = {\n     _: parsed._,\n   }\n"", ""test_patch"": ""diff --git a/integrations/cli/index.test.ts b/integrations/cli/index.test.ts\nindex 324492adb546..aff5b108994f 100644\n--- a/integrations/cli/index.test.ts\n+++ b/integrations/cli/index.test.ts\n@@ -95,6 +95,149 @@ describe.each([\n     },\n   )\n \n+  test(\n+    'production build \u2014 read input from stdin',\n+    {\n+      fs: {\n+        'package.json': json`{}`,\n+        'pnpm-workspace.yaml': yaml`\n+          #\n+          packages:\n+            - project-a\n+        `,\n+        'project-a/package.json': json`\n+          {\n+            \""dependencies\"": {\n+              \""tailwindcss\"": \""workspace:^\"",\n+              \""@tailwindcss/cli\"": \""workspace:^\""\n+            }\n+          }\n+        `,\n+        'project-a/index.html': html`\n+          <div\n+            class=\""underline 2xl:font-bold hocus:underline inverted:flex *:flex **:flex\""\n+          ></div>\n+        `,\n+        'project-a/plugin.js': js`\n+          module.exports = function ({ addVariant }) {\n+            addVariant('inverted', '@media (inverted-colors: inverted)')\n+            addVariant('hocus', ['&:focus', '&:hover'])\n+          }\n+        `,\n+        'project-a/tailwind.config.js': js`\n+          module.exports = {\n+            content: ['../project-b/src/**/*.js'],\n+          }\n+        `,\n+        'project-a/src/index.js': js`\n+          const className = \""content-['project-a/src/index.js']\""\n+          module.exports = { className }\n+        `,\n+        'project-b/src/index.html': html`\n+          <div class=\""flex\"" />\n+        `,\n+        'project-b/src/index.js': js`\n+          const className = \""content-['project-b/src/index.js']\""\n+          module.exports = { className }\n+        `,\n+      },\n+    },\n+    async ({ root, fs, exec }) => {\n+      await exec(\n+        `${command} --input - --output dist/out.css`,\n+        { cwd: path.join(root, 'project-a') },\n+        {\n+          stdin: css`\n+            @import 'tailwindcss/utilities';\n+            @config './tailwind.config.js';\n+            @source '../project-b/src/**/*.html';\n+            @plugin './plugin.js';\n+          `,\n+        },\n+      )\n+\n+      await fs.expectFileToContain('project-a/dist/out.css', [\n+        candidate`underline`,\n+        candidate`flex`,\n+        candidate`content-['project-a/src/index.js']`,\n+        candidate`content-['project-b/src/index.js']`,\n+        candidate`inverted:flex`,\n+        candidate`hocus:underline`,\n+        candidate`*:flex`,\n+        candidate`**:flex`,\n+      ])\n+    },\n+  )\n+\n+  test(\n+    'production build \u2014 (write to stdout)',\n+    {\n+      fs: {\n+        'package.json': json`{}`,\n+        'pnpm-workspace.yaml': yaml`\n+          #\n+          packages:\n+            - project-a\n+        `,\n+        'project-a/package.json': json`\n+          {\n+            \""dependencies\"": {\n+              \""tailwindcss\"": \""workspace:^\"",\n+              \""@tailwindcss/cli\"": \""workspace:^\""\n+            }\n+          }\n+        `,\n+        'project-a/index.html': html`\n+          <div\n+            class=\""underline 2xl:font-bold hocus:underline inverted:flex *:flex **:flex\""\n+          ></div>\n+        `,\n+        'project-a/plugin.js': js`\n+          module.exports = function ({ addVariant }) {\n+            addVariant('inverted', '@media (inverted-colors: inverted)')\n+            addVariant('hocus', ['&:focus', '&:hover'])\n+          }\n+        `,\n+        'project-a/tailwind.config.js': js`\n+          module.exports = {\n+            content: ['../project-b/src/**/*.js'],\n+          }\n+        `,\n+        'project-a/src/index.css': css`\n+          @import 'tailwindcss/utilities';\n+          @config '../tailwind.config.js';\n+          @source '../../project-b/src/**/*.html';\n+          @plugin '../plugin.js';\n+        `,\n+        'project-a/src/index.js': js`\n+          const className = \""content-['project-a/src/index.js']\""\n+          module.exports = { className }\n+        `,\n+        'project-b/src/index.html': html`\n+          <div class=\""flex\"" />\n+        `,\n+        'project-b/src/index.js': js`\n+          const className = \""content-['project-b/src/index.js']\""\n+          module.exports = { className }\n+        `,\n+      },\n+    },\n+    async ({ root, expect, exec }) => {\n+      let stdout = await exec(`${command} --input src/index.css --output -`, {\n+        cwd: path.join(root, 'project-a'),\n+      })\n+\n+      expect(stdout).toContain(candidate`underline`)\n+      expect(stdout).toContain(candidate`flex`)\n+      expect(stdout).toContain(candidate`content-['project-a/src/index.js']`)\n+      expect(stdout).toContain(candidate`content-['project-b/src/index.js']`)\n+      expect(stdout).toContain(candidate`inverted:flex`)\n+      expect(stdout).toContain(candidate`hocus:underline`)\n+      expect(stdout).toContain(candidate`*:flex`)\n+      expect(stdout).toContain(candidate`**:flex`)\n+    },\n+  )\n+\n   test(\n     'watch mode',\n     {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15603"", ""pr_id"": 15603, ""issue_id"": 15602, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Namespace override syntax is not valid CSS\nI'm using a CSS formatter ([biome](https://github.com/biomejs/biome)) that won't parse namespace overrides, e.g: `--font-*`, because it is not a valid `ident-token` according to https://drafts.csswg.org/css-syntax-3/#ident-token-diagram\r\n\r\nI see two possibilities:\r\n- Keep the current syntax:\r\n  In this case we should also support the escaped version (which is valid CSS syntax), e.g: `--font-\\*: initial;`.\r\n- Change the syntax:\r\n  The simplest alternative would be to drop the asterisk, e.g `--font: initial;`."", ""issue_word_count"": 92, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/theme.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/index.test.ts""], ""base_commit"": ""ae8fb146a7e65c2174949ed24b1e501c49755261"", ""head_commit"": ""b45a52552df0db3c9999698d0fc22c679c70c431"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15603"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15603"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-13T10:43:22.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 96d38c1b1b1a..88bb4669b4b8 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -10,6 +10,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Fixed\n \n - Add missing `main` and `browser` fields for `@tailwindcss/browser` ([#15594](https://github.com/tailwindlabs/tailwindcss/pull/15594))\n+- Ensure namespace reset with escaped `*` (e.g.: `--color-\\*: initial;`) ([#15603](https://github.com/tailwindlabs/tailwindcss/pull/15603))\n - _Upgrade (experimental)_: Pretty print `--spacing(\u2026)` to prevent ambiguity ([#15596](https://github.com/tailwindlabs/tailwindcss/pull/15596))\n \n ## [4.0.0-beta.9] - 2025-01-09\n\ndiff --git a/packages/tailwindcss/src/theme.ts b/packages/tailwindcss/src/theme.ts\nindex 03379c7b4e4c..a2d3c205fa4a 100644\n--- a/packages/tailwindcss/src/theme.ts\n+++ b/packages/tailwindcss/src/theme.ts\n@@ -41,6 +41,10 @@ export class Theme {\n   ) {}\n \n   add(key: string, value: string, options = ThemeOptions.NONE): void {\n+    if (key.endsWith('\\\\*')) {\n+      key = key.slice(0, -2) + '*'\n+    }\n+\n     if (key.endsWith('-*')) {\n       if (value !== 'initial') {\n         throw new Error(`Invalid theme value \\`${value}\\` for namespace \\`${key}\\``)\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex 677f33593454..89ddceb10fb6 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -1208,6 +1208,53 @@ describe('Parsing themes values from CSS', () => {\n     `)\n   })\n \n+  test('`@theme` values can be unset (using the escaped syntax)', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @theme {\n+            --color-red: #f00;\n+            --color-blue: #00f;\n+            --text-sm: 13px;\n+            --text-md: 16px;\n+\n+            --animate-spin: spin 1s infinite linear;\n+\n+            @keyframes spin {\n+              to {\n+                transform: rotate(360deg);\n+              }\n+            }\n+          }\n+          @theme {\n+            --color-\\*: initial;\n+            --text-md: initial;\n+            --animate-\\*: initial;\n+            --keyframes-\\*: initial;\n+          }\n+          @theme {\n+            --color-green: #0f0;\n+          }\n+          @tailwind utilities;\n+        `,\n+        ['accent-red', 'accent-blue', 'accent-green', 'text-sm', 'text-md'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"":root {\n+        --text-sm: 13px;\n+        --color-green: #0f0;\n+      }\n+\n+      .text-sm {\n+        font-size: var(--text-sm);\n+      }\n+\n+      .accent-green {\n+        accent-color: var(--color-green);\n+      }\""\n+    `)\n+  })\n+\n   test('all `@theme` values can be unset at once', async () => {\n     expect(\n       await compileCss(\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15542"", ""pr_id"": 15542, ""issue_id"": 15501, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] utility class is not generated when also applied to body\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-beta.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nVite, but it is also reproducible in playground\r\n\r\n**What version of Node.js are you using?**\r\n\r\n22.12.0 (not sure about playground)\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nWindows 11\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/uDAJ3VP1OF\r\n\r\n**Describe your issue**\r\n\r\n- in the v4 css config, create a `@utility` that generate some class\r\n  - in the playground link above: `@utility bg-th { @apply bg-red-500; }`\r\n- in the v4 css config, apply this `@utility` to the `body`\r\n  - in the playground link above: `@layer base { body { @apply bg-th; } }`\r\n- in your html, use that same `@utility` class\r\n  - in the playground link above: `<div class=\""bg-th\"">` \r\n\n\r\n- the **red-500** color is correctly applied to the `body`\r\n- but the same **red-500**  is not applied to the div with `bg-th` class (in the playground link above it inherits its background color from its parent instead)\r\n\n\r\nWithout having a look at the codebase, I suspect this happens because when the `bg-th` utility is \""applied\"" to the body it is also removed from the list of available classes, regardless of the fact that it is used at other places.\r\nThis is based on the fact that commenting the `@apply bg-th` line in the playground link above results in the `bg-th` class being correctly generated."", ""issue_word_count"": 257, ""test_files_count"": 2, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/apply.ts"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/index.ts"", ""packages/tailwindcss/src/utilities.test.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""dcf116bb30d157916dcee25a97802192ce86c674"", ""head_commit"": ""0cfcfda24000b69e224f67717d4bae949f143d95"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15542"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15542"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-07T15:19:37.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 787f17fe2bec..63ae55988543 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -19,6 +19,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Fix `inset-shadow-*` suggestions in IntelliSense ([#15471](https://github.com/tailwindlabs/tailwindcss/pull/15471))\n - Only compile arbitrary values ending in `]` ([#15503](https://github.com/tailwindlabs/tailwindcss/pull/15503))\n - Improve performance and memory usage ([#15529](https://github.com/tailwindlabs/tailwindcss/pull/15529))\n+- Ensure `@apply` rules are processed in the correct order ([#15542](https://github.com/tailwindlabs/tailwindcss/pull/15542))\n - _Upgrade (experimental)_: Do not extract class names from functions (e.g. `shadow` in `filter: 'drop-shadow(\u2026)'`) ([#15566](https://github.com/tailwindlabs/tailwindcss/pull/15566))\n \n ### Changed\n\ndiff --git a/packages/tailwindcss/src/apply.ts b/packages/tailwindcss/src/apply.ts\nindex 7af9cf10d9ff..6a1fcdefe57c 100644\n--- a/packages/tailwindcss/src/apply.ts\n+++ b/packages/tailwindcss/src/apply.ts\n@@ -1,12 +1,29 @@\n import { Features } from '.'\n-import { walk, WalkAction, type AstNode } from './ast'\n+import { rule, toCss, walk, WalkAction, type AstNode } from './ast'\n import { compileCandidates } from './compile'\n import type { DesignSystem } from './design-system'\n-import { escape } from './utils/escape'\n+import { DefaultMap } from './utils/default-map'\n \n export function substituteAtApply(ast: AstNode[], designSystem: DesignSystem) {\n   let features = Features.None\n-  walk(ast, (node, { replaceWith }) => {\n+\n+  // Wrap the whole AST in a root rule to make sure there is always a parent\n+  // available for `@apply` at-rules. In some cases, the incoming `ast` just\n+  // contains `@apply` at-rules which means that there is no proper parent to\n+  // rely on.\n+  let root = rule('&', ast)\n+\n+  // Track all nodes containing `@apply`\n+  let parents = new Set<AstNode>()\n+\n+  // Track all the dependencies of an `AstNode`\n+  let dependencies = new DefaultMap<AstNode, Set<string>>(() => new Set<string>())\n+\n+  // Track all `@utility` definitions by its root (name)\n+  let definitions = new DefaultMap(() => new Set<AstNode>())\n+\n+  // Collect all new `@utility` definitions and all `@apply` rules first\n+  walk([root], (node, { parent }) => {\n     if (node.kind !== 'at-rule') return\n \n     // Do not allow `@apply` rules inside `@keyframes` rules.\n@@ -19,9 +36,119 @@ export function substituteAtApply(ast: AstNode[], designSystem: DesignSystem) {\n       return WalkAction.Skip\n     }\n \n-    if (node.name !== '@apply') return\n-    features |= Features.AtApply\n+    // `@utility` defines a utility, which is important information in order to\n+    // do a correct topological sort later on.\n+    if (node.name === '@utility') {\n+      let name = node.params.replace(/-\\*$/, '')\n+      definitions.get(name).add(node)\n+\n+      // In case `@apply` rules are used inside `@utility` rules.\n+      walk(node.nodes, (child) => {\n+        if (child.kind !== 'at-rule' || child.name !== '@apply') return\n+\n+        parents.add(node)\n+\n+        for (let dependency of resolveApplyDependencies(child, designSystem)) {\n+          dependencies.get(node).add(dependency)\n+        }\n+      })\n+      return\n+    }\n+\n+    // Any other `@apply` node.\n+    if (node.name === '@apply') {\n+      // `@apply` cannot be top-level, so we need to have a parent such that we\n+      // can replace the `@apply` node with the actual utility classes later.\n+      if (parent === null) return\n+\n+      features |= Features.AtApply\n+\n+      parents.add(parent)\n+\n+      for (let dependency of resolveApplyDependencies(node, designSystem)) {\n+        dependencies.get(parent).add(dependency)\n+      }\n+    }\n+  })\n+\n+  // Topological sort before substituting `@apply`\n+  let seen = new Set<AstNode>()\n+  let sorted: AstNode[] = []\n+  let wip = new Set<AstNode>()\n+\n+  function visit(node: AstNode, path: AstNode[] = []) {\n+    if (seen.has(node)) {\n+      return\n+    }\n+\n+    // Circular dependency detected\n+    if (wip.has(node)) {\n+      // Next node in the path is the one that caused the circular dependency\n+      let next = path[(path.indexOf(node) + 1) % path.length]\n+\n+      if (\n+        node.kind === 'at-rule' &&\n+        node.name === '@utility' &&\n+        next.kind === 'at-rule' &&\n+        next.name === '@utility'\n+      ) {\n+        walk(node.nodes, (child) => {\n+          if (child.kind !== 'at-rule' || child.name !== '@apply') return\n+\n+          let candidates = child.params.split(/\\s+/g)\n+          for (let candidate of candidates) {\n+            for (let candidateAstNode of designSystem.parseCandidate(candidate)) {\n+              switch (candidateAstNode.kind) {\n+                case 'arbitrary':\n+                  break\n \n+                case 'static':\n+                case 'functional':\n+                  if (next.params.replace(/-\\*$/, '') === candidateAstNode.root) {\n+                    throw new Error(\n+                      `You cannot \\`@apply\\` the \\`${candidate}\\` utility here because it creates a circular dependency.`,\n+                    )\n+                  }\n+                  break\n+\n+                default:\n+                  candidateAstNode satisfies never\n+              }\n+            }\n+          }\n+        })\n+      }\n+\n+      // Generic fallback error in case we cannot properly detect the origin of\n+      // the circular dependency.\n+      throw new Error(\n+        `Circular dependency detected:\\n\\n${toCss([node])}\\nRelies on:\\n\\n${toCss([next])}`,\n+      )\n+    }\n+\n+    wip.add(node)\n+\n+    for (let dependencyId of dependencies.get(node)) {\n+      for (let dependency of definitions.get(dependencyId)) {\n+        path.push(node)\n+        visit(dependency, path)\n+        path.pop()\n+      }\n+    }\n+\n+    seen.add(node)\n+    wip.delete(node)\n+\n+    sorted.push(node)\n+  }\n+\n+  for (let node of parents) {\n+    visit(node)\n+  }\n+\n+  // Substitute the `@apply` at-rules in order\n+  walk(sorted, (node, { replaceWith }) => {\n+    if (node.kind !== 'at-rule' || node.name !== '@apply') return\n     let candidates = node.params.split(/\\s+/g)\n \n     // Replace the `@apply` rule with the actual utility classes\n@@ -48,35 +175,33 @@ export function substituteAtApply(ast: AstNode[], designSystem: DesignSystem) {\n         }\n       }\n \n-      // Verify that we don't have any circular dependencies by verifying that\n-      // the current node does not appear in the new nodes.\n-      walk(newNodes, (child) => {\n-        if (child !== node) return\n-\n-        // At this point we already know that we have a circular dependency.\n-        //\n-        // Figure out which candidate caused the circular dependency. This will\n-        // help to create a useful error message for the end user.\n-        for (let candidate of candidates) {\n-          let selector = `.${escape(candidate)}`\n-\n-          for (let rule of candidateAst) {\n-            if (rule.kind !== 'rule') continue\n-            if (rule.selector !== selector) continue\n-\n-            walk(rule.nodes, (child) => {\n-              if (child !== node) return\n-\n-              throw new Error(\n-                `You cannot \\`@apply\\` the \\`${candidate}\\` utility here because it creates a circular dependency.`,\n-              )\n-            })\n-          }\n-        }\n-      })\n-\n       replaceWith(newNodes)\n     }\n   })\n+\n   return features\n }\n+\n+function* resolveApplyDependencies(\n+  node: Extract<AstNode, { kind: 'at-rule' }>,\n+  designSystem: DesignSystem,\n+) {\n+  for (let candidate of node.params.split(/\\s+/g)) {\n+    for (let node of designSystem.parseCandidate(candidate)) {\n+      switch (node.kind) {\n+        case 'arbitrary':\n+          // Doesn't matter, because there is no lookup needed\n+          break\n+\n+        case 'static':\n+        case 'functional':\n+          // Lookup by \""root\""\n+          yield node.root\n+          break\n+\n+        default:\n+          node satisfies never\n+      }\n+    }\n+  }\n+}\n\ndiff --git a/packages/tailwindcss/src/index.ts b/packages/tailwindcss/src/index.ts\nindex cbfad6b3fded..161b1367dcf8 100644\n--- a/packages/tailwindcss/src/index.ts\n+++ b/packages/tailwindcss/src/index.ts\n@@ -538,10 +538,8 @@ async function parseCss(\n     node.context = {}\n   }\n \n-  // Replace `@apply` rules with the actual utility classes.\n-  features |= substituteAtApply(ast, designSystem)\n-\n   features |= substituteFunctions(ast, designSystem.resolveThemeValue)\n+  features |= substituteAtApply(ast, designSystem)\n \n   // Remove `@utility`, we couldn't replace it before yet because we had to\n   // handle the nested `@apply` at-rules first.\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex de59e08be9a4..679d3f1700ed 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -461,6 +461,53 @@ describe('@apply', () => {\n       }\""\n     `)\n   })\n+\n+  it('should recursively apply with custom `@utility`, which is used before it is defined', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @tailwind utilities;\n+\n+          @layer base {\n+            body {\n+              @apply a;\n+            }\n+          }\n+\n+          @utility a {\n+            @apply b;\n+          }\n+\n+          @utility b {\n+            @apply focus:c;\n+          }\n+\n+          @utility c {\n+            @apply my-flex!;\n+          }\n+\n+          @utility my-flex {\n+            @apply flex;\n+          }\n+        `,\n+        ['a', 'b', 'c', 'flex', 'my-flex'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"".a:focus, .b:focus, .c {\n+        display: flex !important;\n+      }\n+\n+      .flex, .my-flex {\n+        display: flex;\n+      }\n+\n+      @layer base {\n+        body:focus {\n+          display: flex !important;\n+        }\n+      }\""\n+    `)\n+  })\n })\n \n describe('arbitrary variants', () => {\n\ndiff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex bd6d29a3b01b..9cbd0fc04c1c 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -17375,7 +17375,7 @@ describe('custom utilities', () => {\n         ['foo', 'bar'],\n       ),\n     ).rejects.toThrowErrorMatchingInlineSnapshot(\n-      `[Error: You cannot \\`@apply\\` the \\`dark:foo\\` utility here because it creates a circular dependency.]`,\n+      `[Error: You cannot \\`@apply\\` the \\`hover:bar\\` utility here because it creates a circular dependency.]`,\n     )\n   })\n \n@@ -17406,7 +17406,36 @@ describe('custom utilities', () => {\n         ['foo', 'bar'],\n       ),\n     ).rejects.toThrowErrorMatchingInlineSnapshot(\n-      `[Error: You cannot \\`@apply\\` the \\`dark:foo\\` utility here because it creates a circular dependency.]`,\n+      `[Error: You cannot \\`@apply\\` the \\`hover:bar\\` utility here because it creates a circular dependency.]`,\n+    )\n+  })\n+\n+  test('custom utilities with `@apply` causing circular dependencies should error (multiple levels)', async () => {\n+    await expect(() =>\n+      compileCss(\n+        css`\n+          body {\n+            @apply foo;\n+          }\n+\n+          @utility foo {\n+            @apply flex-wrap hover:bar;\n+          }\n+\n+          @utility bar {\n+            @apply flex dark:baz;\n+          }\n+\n+          @utility baz {\n+            @apply flex-wrap hover:foo;\n+          }\n+\n+          @tailwind utilities;\n+        `,\n+        ['foo', 'bar'],\n+      ),\n+    ).rejects.toThrowErrorMatchingInlineSnapshot(\n+      `[Error: You cannot \\`@apply\\` the \\`hover:bar\\` utility here because it creates a circular dependency.]`,\n     )\n   })\n })\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15503"", ""pr_id"": 15503, ""issue_id"": 15484, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Arbitrary value with typo compiles\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-beta.8\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nPlayground\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/LX5upJjpWb\r\n\r\n**Describe your issue**\r\n\r\nFailing to complete the arbitrary class `m-[123px]` and instead writing `m-[123px` produces this:\r\n\r\n```css\r\n.m-\\[123px {\r\n  margin: 123p;\r\n}\r\n```\r\n\r\nThought it's worth noting, as with TW3, omitting the `]` from an arbitrary value didn't produce anything and now it does. And the tests generally check that invalid values produce nothing:\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/608b1399cd66ec391846a81a154a6593db64b040/packages/tailwindcss/src/utilities.test.ts#L1490-L1492"", ""issue_word_count"": 111, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/candidate.test.ts"", ""packages/tailwindcss/src/candidate.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/candidate.test.ts""], ""base_commit"": ""608b1399cd66ec391846a81a154a6593db64b040"", ""head_commit"": ""f6e97032164a1586dc8daaad2468d2a457c2d2da"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15503"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15503"", ""dockerfile"": """", ""pr_merged_at"": ""2025-01-06T11:00:36.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex df9331a4b8ad..fc12e8684858 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -13,6 +13,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Don\u2019t detect arbitrary properties when preceded by an escape ([#15456](https://github.com/tailwindlabs/tailwindcss/pull/15456))\n - Fix incorrectly named `bg-round` and `bg-space` utilities to `bg-repeat-round` to `bg-repeat-space` ([#15462](https://github.com/tailwindlabs/tailwindcss/pull/15462))\n - Fix `inset-shadow-*` suggestions in IntelliSense ([#15471](https://github.com/tailwindlabs/tailwindcss/pull/15471))\n+- Only compile arbitrary values ending in `]` ([#15503](https://github.com/tailwindlabs/tailwindcss/pull/15503))\n \n ### Changed\n \n\ndiff --git a/packages/tailwindcss/src/candidate.ts b/packages/tailwindcss/src/candidate.ts\nindex 26def1bff0ee..6c15b2ba6163 100644\n--- a/packages/tailwindcss/src/candidate.ts\n+++ b/packages/tailwindcss/src/candidate.ts\n@@ -438,6 +438,9 @@ export function* parseCandidate(input: string, designSystem: DesignSystem): Iter\n       let valueIsArbitrary = startArbitraryIdx !== -1\n \n       if (valueIsArbitrary) {\n+        // Arbitrary values must end with a `]`.\n+        if (value[value.length - 1] !== ']') return\n+\n         let arbitraryValue = decodeArbitraryValue(value.slice(startArbitraryIdx + 1, -1))\n \n         // Extract an explicit typehint if present, e.g. `bg-[color:var(--my-var)])`\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/candidate.test.ts b/packages/tailwindcss/src/candidate.test.ts\nindex 4242b11b7164..848590a46a88 100644\n--- a/packages/tailwindcss/src/candidate.test.ts\n+++ b/packages/tailwindcss/src/candidate.test.ts\n@@ -540,6 +540,13 @@ it('should parse a utility with an arbitrary value', () => {\n   `)\n })\n \n+it('should not parse a utility with an incomplete arbitrary value', () => {\n+  let utilities = new Utilities()\n+  utilities.functional('bg', () => [])\n+\n+  expect(run('bg-[#0088cc', { utilities })).toMatchInlineSnapshot(`[]`)\n+})\n+\n it('should parse a utility with an arbitrary value with parens', () => {\n   let utilities = new Utilities()\n   utilities.functional('bg', () => [])\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15471"", ""pr_id"": 15471, ""issue_id"": 15461, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] inset-shadow-* intellisense\n**What version of Tailwind CSS are you using?** v4.0.0-beta.8\r\n\r\n\r\n\r\nThe Tailwind CSS IntelliSense plugin for VSCode suggests non existing inset-shadow utilities.\r\n\r\n`inset-shadow-md`, `inset-shadow-lg`, `inset-shadow-xl`, ... are all in the suggested classnames, while they do not exist.\r\n\r\nAlso happens on [play.tailwindcss.com](https://play.tailwindcss.com/)\r\n\r\n"", ""issue_word_count"": 60, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap""], ""base_commit"": ""36dfe1f574ac3adf24d77479faafe9bec563d985"", ""head_commit"": ""4c14de437f76bdeb37249abf1512660250315929"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15471"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15471"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-22T14:13:48.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 235f3bd61452..df9331a4b8ad 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Use the correct property value for `place-content-between`, `place-content-around`, and `place-content-evenly` utilities ([#15440](https://github.com/tailwindlabs/tailwindcss/pull/15440))\n - Don\u2019t detect arbitrary properties when preceded by an escape ([#15456](https://github.com/tailwindlabs/tailwindcss/pull/15456))\n - Fix incorrectly named `bg-round` and `bg-space` utilities to `bg-repeat-round` to `bg-repeat-space` ([#15462](https://github.com/tailwindlabs/tailwindcss/pull/15462))\n+- Fix `inset-shadow-*` suggestions in IntelliSense ([#15471](https://github.com/tailwindlabs/tailwindcss/pull/15471))\n \n ### Changed\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 4639266e792a..21bbda51321b 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -4319,7 +4319,7 @@ export function createUtilities(theme: Theme) {\n       },\n       {\n         values: [],\n-        valueThemeKeys: ['--shadow'],\n+        valueThemeKeys: ['--inset-shadow'],\n         hasDefaultValue: true,\n       },\n     ])\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\nindex bdaf48177873..c308fb4cb975 100644\n--- a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n@@ -4246,6 +4246,7 @@ exports[`getClassList 1`] = `\n   \""inset-shadow-inherit/95\"",\n   \""inset-shadow-inherit/100\"",\n   \""inset-shadow-initial\"",\n+  \""inset-shadow-sm\"",\n   \""inset-shadow-transparent\"",\n   \""inset-shadow-transparent/0\"",\n   \""inset-shadow-transparent/5\"",\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15318"", ""pr_id"": 15318, ""issue_id"": 15315, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Trying to upgrade a plugin to v4\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n\""vite\"": \""^6.0.1\""\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.18.0\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nnew vite project with tailwind and tailwindcss-motion\r\nhttps://github.com/KevinGrajeda/plugin-v4\r\n\r\n**Describe your issue**\r\n\r\nI'm the developer of https://github.com/romboHQ/tailwindcss-motion and I'm trying to check the compatibility of the plugin with Tailwind v4 and when I run the project it throws me this error:\r\n\r\n\r\n```\r\n[plugin:@tailwindcss/vite:generate:serve] Package subpath './lib/util/flattenColorPalette' is not defined by \""exports\"" in \r\n/Users/yokev/dev/rombo/example/upgrade-to-v4/node_modules/.pnpm/tailwindcss-motion@0.4.3-beta_tailwindcss@4.0.0-\r\nbeta.5/node_modules/tailwindcss/package.json\r\n```\r\n\r\nI'm using flattenColorPalette to add animations with the theme colors\r\n\r\nhttps://github.com/romboHQ/tailwindcss-motion/blob/09ceaeca9654598bca430872f1c967eb066ca4a5/src/baseAnimations.js#L472-L473 \r\n\r\nIs there a new approach for doing this? What can I do?"", ""issue_word_count"": 225, ""test_files_count"": 2, ""non_test_files_count"": 5, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/package.json"", ""packages/tailwindcss/src/compat/config.test.ts"", ""packages/tailwindcss/src/compat/flatten-color-palette.cts"", ""packages/tailwindcss/src/compat/flatten-color-palette.test.ts"", ""packages/tailwindcss/src/compat/flatten-color-palette.ts"", ""packages/tailwindcss/tsup.config.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/compat/config.test.ts"", ""packages/tailwindcss/src/compat/flatten-color-palette.test.ts""], ""base_commit"": ""94a3cff6874526a75c1221f4b951c9f5b009cd91"", ""head_commit"": ""0dbedcba97af57f7c49baec38f2fe579a5e52ff9"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15318"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15318"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-09T10:33:19.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 871141654f42..08c075a947fe 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -7,14 +7,19 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ## [Unreleased]\n \n-- Nothing yet!\n+### Added\n+\n+- Add support for `tailwindcss/lib/util/flattenColorPalette` exports ([#15318](https://github.com/tailwindlabs/tailwindcss/pull/15318))\n+\n+### Fixed\n+\n+- Fix dependency related warnings when using `@tailwindcss/postcss` on Windows ([#15321](https://github.com/tailwindlabs/tailwindcss/pull/15321))\n \n ## [4.0.0-beta.6] - 2024-12-06\n \n ### Fixed\n \n - Ensure `@import \""\u2026\"" reference` never generates utilities ([#15307](https://github.com/tailwindlabs/tailwindcss/pull/15307))\n-- Fix dependency related warnings when using `@tailwindcss/postcss` on Windows\n \n ## [4.0.0-beta.5] - 2024-12-04\n \n\ndiff --git a/packages/tailwindcss/package.json b/packages/tailwindcss/package.json\nindex 0a36e8f55c86..37f7c21595cb 100644\n--- a/packages/tailwindcss/package.json\n+++ b/packages/tailwindcss/package.json\n@@ -31,6 +31,10 @@\n       \""require\"": \""./src/compat/colors.cts\"",\n       \""import\"": \""./src/compat/colors.ts\""\n     },\n+    \""./lib/util/flattenColorPalette\"": {\n+      \""require\"": \""./src/compat/flatten-color-palette.cts\"",\n+      \""import\"": \""./src/compat/flatten-color-palette.ts\""\n+    },\n     \""./defaultTheme\"": {\n       \""require\"": \""./src/compat/default-theme.cts\"",\n       \""import\"": \""./src/compat/default-theme.ts\""\n@@ -91,6 +95,10 @@\n         \""require\"": \""./dist/colors.js\"",\n         \""import\"": \""./dist/colors.mjs\""\n       },\n+      \""./lib/util/flattenColorPalette\"": {\n+        \""require\"": \""./dist/flatten-color-palette.js\"",\n+        \""import\"": \""./dist/flatten-color-palette.mjs\""\n+      },\n       \""./package.json\"": \""./package.json\"",\n       \""./index.css\"": \""./index.css\"",\n       \""./index\"": \""./index.css\"",\n\ndiff --git a/packages/tailwindcss/src/compat/flatten-color-palette.cts b/packages/tailwindcss/src/compat/flatten-color-palette.cts\nnew file mode 100644\nindex 000000000000..d8b4be1442b4\n--- /dev/null\n+++ b/packages/tailwindcss/src/compat/flatten-color-palette.cts\n@@ -0,0 +1,8 @@\n+import flattenColorPalette from './flatten-color-palette.ts'\n+\n+// This file exists so that `flatten-color-palette.ts` can be written one time\n+// but be compatible with both CJS and ESM. Without it we get a `.default`\n+// export when using `require` in CJS.\n+\n+// @ts-ignore\n+export = flattenColorPalette\n\ndiff --git a/packages/tailwindcss/src/compat/flatten-color-palette.ts b/packages/tailwindcss/src/compat/flatten-color-palette.ts\nindex 03191e2da7e6..ca8845688508 100644\n--- a/packages/tailwindcss/src/compat/flatten-color-palette.ts\n+++ b/packages/tailwindcss/src/compat/flatten-color-palette.ts\n@@ -4,7 +4,7 @@ type Colors = {\n   [key: string | number]: string | Colors\n }\n \n-export function flattenColorPalette(colors: Colors) {\n+export default function flattenColorPalette(colors: Colors) {\n   let result: Record<string, string> = {}\n \n   for (let [root, children] of Object.entries(colors ?? {})) {\n\ndiff --git a/packages/tailwindcss/tsup.config.ts b/packages/tailwindcss/tsup.config.ts\nindex 1a8e238873b8..59c8bdfa2906 100644\n--- a/packages/tailwindcss/tsup.config.ts\n+++ b/packages/tailwindcss/tsup.config.ts\n@@ -10,6 +10,7 @@ export default defineConfig([\n       plugin: 'src/plugin.ts',\n       colors: 'src/compat/colors.ts',\n       'default-theme': 'src/compat/default-theme.ts',\n+      'flatten-color-palette': 'src/compat/flatten-color-palette.ts',\n     },\n   },\n   {\n@@ -21,6 +22,7 @@ export default defineConfig([\n       lib: 'src/index.cts',\n       colors: 'src/compat/colors.cts',\n       'default-theme': 'src/compat/default-theme.cts',\n+      'flatten-color-palette': 'src/compat/flatten-color-palette.cts',\n     },\n   },\n ])\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/compat/config.test.ts b/packages/tailwindcss/src/compat/config.test.ts\nindex b99bc405bc75..3747f8ae4f5d 100644\n--- a/packages/tailwindcss/src/compat/config.test.ts\n+++ b/packages/tailwindcss/src/compat/config.test.ts\n@@ -1,7 +1,7 @@\n import { describe, expect, test, vi } from 'vitest'\n import { compile, type Config } from '..'\n import { default as plugin } from '../plugin'\n-import { flattenColorPalette } from './flatten-color-palette'\n+import flattenColorPalette from './flatten-color-palette'\n \n const css = String.raw\n \n\ndiff --git a/packages/tailwindcss/src/compat/flatten-color-palette.test.ts b/packages/tailwindcss/src/compat/flatten-color-palette.test.ts\nindex 3891bbece534..7ddda5bd461b 100644\n--- a/packages/tailwindcss/src/compat/flatten-color-palette.test.ts\n+++ b/packages/tailwindcss/src/compat/flatten-color-palette.test.ts\n@@ -1,5 +1,5 @@\n import { expect, test } from 'vitest'\n-import { flattenColorPalette } from './flatten-color-palette'\n+import flattenColorPalette from './flatten-color-palette'\n \n test('it should handle private __CSS_VALUES__ to resolve to the right value', () => {\n   expect(\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15279"", ""pr_id"": 15279, ""issue_id"": 15237, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Tailwind 4 does not work with react-router v7 framework mode\n \r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.0.0-beta.3\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: react-router v7\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v22.0.0\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Chrome \r\n\r\n**What operating system are you using?**\r\n\r\nFor example:  Windows\r\n\r\n**Reproduction URL**\r\n\r\nYou can find the reproduction on the PR below: \r\nhttps://github.com/forge42dev/base-stack/pull/14\r\n\r\nSteps to reproduce:\r\n- clone the repro and checkout the PR\r\n- run npm run build\r\n- it fails\r\n\r\n**Describe your issue**\r\n\r\nThe build script for tailwind doesn't work with react-router framework mode, I'm guessing it's also the case with Remix.run as the root issue seems the same. What I've noticed is that if you replace the following in package.json:\r\n```json\r\n  \""build\"": \""react-router build\""\r\n```\r\nwith\r\n```json\r\n  \""build\"": \""vite build\""\r\n```\r\n\r\nthe build goes through, I'm guessing there is something in the react-router build pipeline that breaks the tailwind compilation, the error i get is: `[@tailwindcss/vite:generate:build] Missing opening {`.\r\n"", ""issue_word_count"": 200, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/ssr.test.ts"", ""packages/@tailwindcss-vite/src/index.ts""], ""pr_changed_test_files"": [""integrations/vite/ssr.test.ts""], ""base_commit"": ""89f291c0074331f8e6c5d177170b19b409d6ce18"", ""head_commit"": ""6a66fa1db7615bea36903e8173af6a313a24798f"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15279"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15279"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-02T22:08:13.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 8b1c70ddf920..1d460d1ac346 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -11,6 +11,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Ensure absolute `url()`s inside imported CSS files are not rebased when using `@tailwindcss/vite`\n - Fix issues with dev servers using Svelte 5 with the Vite plugin ([#15274](https://github.com/tailwindlabs/tailwindcss/issues/15274))\n+- Fix resolution of imported CSS files in Vite SSR builds ([#15279](https://github.com/tailwindlabs/tailwindcss/issues/15279))\n \n ### Added\n \n\ndiff --git a/packages/@tailwindcss-vite/src/index.ts b/packages/@tailwindcss-vite/src/index.ts\nindex 9c92699faf89..a6ba5db3f2bb 100644\n--- a/packages/@tailwindcss-vite/src/index.ts\n+++ b/packages/@tailwindcss-vite/src/index.ts\n@@ -44,7 +44,7 @@ export default function tailwindcss(): Plugin[] {\n       preferRelative: true,\n     })\n     function customCssResolver(id: string, base: string) {\n-      return cssResolver(id, base, false, isSSR)\n+      return cssResolver(id, base, true, isSSR)\n     }\n \n     let jsResolver = config!.createResolver(config!.resolve)\n"", ""test_patch"": ""diff --git a/integrations/vite/ssr.test.ts b/integrations/vite/ssr.test.ts\nnew file mode 100644\nindex 000000000000..e66970f8834f\n--- /dev/null\n+++ b/integrations/vite/ssr.test.ts\n@@ -0,0 +1,139 @@\n+import { expect } from 'vitest'\n+import { candidate, css, html, json, test, ts } from '../utils'\n+\n+test(\n+  `Vite 5`,\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""type\"": \""module\"",\n+          \""dependencies\"": {\n+            \""@tailwindcss/vite\"": \""workspace:^\"",\n+            \""tailwindcss\"": \""workspace:^\""\n+          },\n+          \""_comment\"": \""This test uses Vite 5.3 on purpose. Do not upgrade it to Vite 6.\"",\n+          \""devDependencies\"": {\n+            \""vite\"": \""^5.3\""\n+          }\n+        }\n+      `,\n+      'vite.config.ts': ts`\n+        import tailwindcss from '@tailwindcss/vite'\n+        import { defineConfig } from 'vite'\n+\n+        export default defineConfig({\n+          build: {\n+            cssMinify: false,\n+            ssrEmitAssets: true,\n+          },\n+          plugins: [tailwindcss()],\n+          ssr: { resolve: { conditions: [] } },\n+        })\n+      `,\n+      'index.html': html`\n+        <body>\n+          <div id=\""app\""></div>\n+          <script type=\""module\"" src=\""./src/index.ts\""></script>\n+        </body>\n+      `,\n+      'src/index.css': css`@import 'tailwindcss';`,\n+      'src/index.ts': ts`\n+        import './index.css'\n+\n+        document.querySelector('#app').innerHTML = \\`\n+          <div class=\""underline m-2\"">Hello, world!</div>\n+        \\`\n+      `,\n+      'server.ts': ts`\n+        import css from './src/index.css?url'\n+\n+        document.querySelector('#app').innerHTML = \\`\n+          <link rel=\""stylesheet\"" href=\""\\${css}\"">\n+          <div class=\""underline m-2\"">Hello, world!</div>\n+        \\`\n+      `,\n+    },\n+  },\n+  async ({ fs, exec }) => {\n+    await exec('pnpm vite build --ssr server.ts')\n+\n+    let files = await fs.glob('dist/**/*.css')\n+    expect(files).toHaveLength(1)\n+    let [filename] = files[0]\n+\n+    await fs.expectFileToContain(filename, [\n+      //\n+      candidate`underline`,\n+      candidate`m-2`,\n+    ])\n+  },\n+)\n+\n+test(\n+  `Vite 6`,\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""type\"": \""module\"",\n+          \""dependencies\"": {\n+            \""@tailwindcss/vite\"": \""workspace:^\"",\n+            \""tailwindcss\"": \""workspace:^\""\n+          },\n+          \""devDependencies\"": {\n+            \""vite\"": \""^6.0\""\n+          }\n+        }\n+      `,\n+      'vite.config.ts': ts`\n+        import tailwindcss from '@tailwindcss/vite'\n+        import { defineConfig } from 'vite'\n+\n+        export default defineConfig({\n+          build: {\n+            cssMinify: false,\n+            ssrEmitAssets: true,\n+          },\n+          plugins: [tailwindcss()],\n+          ssr: { resolve: { conditions: [] } },\n+        })\n+      `,\n+      'index.html': html`\n+        <body>\n+          <div id=\""app\""></div>\n+          <script type=\""module\"" src=\""./src/index.ts\""></script>\n+        </body>\n+      `,\n+      'src/index.css': css`@import 'tailwindcss';`,\n+      'src/index.ts': ts`\n+        import './index.css'\n+\n+        document.querySelector('#app').innerHTML = \\`\n+          <div class=\""underline m-2\"">Hello, world!</div>\n+        \\`\n+      `,\n+      'server.ts': ts`\n+        import css from './src/index.css?url'\n+\n+        document.querySelector('#app').innerHTML = \\`\n+          <link rel=\""stylesheet\"" href=\""\\${css}\"">\n+          <div class=\""underline m-2\"">Hello, world!</div>\n+        \\`\n+      `,\n+    },\n+  },\n+  async ({ fs, exec }) => {\n+    await exec('pnpm vite build --ssr server.ts')\n+\n+    let files = await fs.glob('dist/**/*.css')\n+    expect(files).toHaveLength(1)\n+    let [filename] = files[0]\n+\n+    await fs.expectFileToContain(filename, [\n+      //\n+      candidate`underline`,\n+      candidate`m-2`,\n+    ])\n+  },\n+)\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15274"", ""pr_id"": 15274, ""issue_id"": 15250, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] `@tailwindcss/vite` crashing dev server with `_ has already been declared` errors\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-beta.4 for both `tailwindcss` and `@tailwindcss/vite` \r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nSvelte 5/Vite\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv20.15.1\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/huntabyte/tw-v4-monorepo-repro/tree/main\r\n\r\nRepro info below can also be found in the `README.md` of the reproduction repo.\r\n\r\nThis reproduction contains the following:\r\n- `ui` package which exports a (in reality would be) styled `Button` component which uses a primitive headless component from `bits-ui`.\r\n- `docs` package which uses `ui` and `@tailwindcss/vite@next` & `tailwindcss@next`.\r\n\r\n**Reproduction Steps**\r\n\r\n1. `pnpm install && pnpm dev` in the root of the repo (will build the `ui` package and start the `docs` dev server)\r\n2. Notice that the page renders and all is well.\r\n3. Open the `docs/vite.config.ts` file and add `tailwindcss()` to the `plugins` array / save the file.\r\n4. Notice the dev server crashes with a bunch of pre-transform errors (`p has already been declared`).\r\n5. Remove the `tailwindcss()` plugin from the `docs/vite.config.ts` file and save the file.\r\n6. Notice that the dev server starts as normal.\r\n\r\n\r\n**Describe your issue**\r\n\r\nWorking in a `pnpm` monorepo, `@tailwindcss/vite@next` causes the dev server to crash with vite pre-transform - `p has already been declared` errors."", ""issue_word_count"": 293, ""test_files_count"": 1, ""non_test_files_count"": 4, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/svelte.test.ts"", ""packages/@tailwindcss-vite/package.json"", ""packages/@tailwindcss-vite/src/index.ts"", ""pnpm-lock.yaml""], ""pr_changed_test_files"": [""integrations/vite/svelte.test.ts""], ""base_commit"": ""667af255b3b48d74f6d782e8256d62c2d05f60e4"", ""head_commit"": ""adeb5c52fee075a0f0dec4c6f48b7da11ec75f4e"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15274"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15274"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-02T19:48:01.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 6755c89c5688..8b1c70ddf920 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -10,10 +10,12 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Fixed\n \n - Ensure absolute `url()`s inside imported CSS files are not rebased when using `@tailwindcss/vite`\n+- Fix issues with dev servers using Svelte 5 with the Vite plugin ([#15274](https://github.com/tailwindlabs/tailwindcss/issues/15274))\n \n ### Added\n \n - Parallelize parsing of individual source files ([#15270](https://github.com/tailwindlabs/tailwindcss/pull/15270))\n+- Support Vite 6 in the Vite plugin ([#15274](https://github.com/tailwindlabs/tailwindcss/issues/15274))\n \n ## [4.0.0-beta.4] - 2024-11-29\n \n\ndiff --git a/packages/@tailwindcss-vite/package.json b/packages/@tailwindcss-vite/package.json\nindex 546f047bc13c..00a020e9336f 100644\n--- a/packages/@tailwindcss-vite/package.json\n+++ b/packages/@tailwindcss-vite/package.json\n@@ -31,7 +31,6 @@\n     \""@tailwindcss/node\"": \""workspace:^\"",\n     \""@tailwindcss/oxide\"": \""workspace:^\"",\n     \""lightningcss\"": \""catalog:\"",\n-    \""svelte-preprocess\"": \""^6.0.2\"",\n     \""tailwindcss\"": \""workspace:*\""\n   },\n   \""devDependencies\"": {\n@@ -39,6 +38,6 @@\n     \""vite\"": \""catalog:\""\n   },\n   \""peerDependencies\"": {\n-    \""vite\"": \""^5.2.0\""\n+    \""vite\"": \""^5.2.0 || ^6\""\n   }\n }\n\ndiff --git a/packages/@tailwindcss-vite/src/index.ts b/packages/@tailwindcss-vite/src/index.ts\nindex cc89775eae32..9c92699faf89 100644\n--- a/packages/@tailwindcss-vite/src/index.ts\n+++ b/packages/@tailwindcss-vite/src/index.ts\n@@ -4,7 +4,6 @@ import { Scanner } from '@tailwindcss/oxide'\n import { Features as LightningCssFeatures, transform } from 'lightningcss'\n import fs from 'node:fs/promises'\n import path from 'node:path'\n-import { sveltePreprocess } from 'svelte-preprocess'\n import type { Plugin, ResolvedConfig, Rollup, Update, ViteDevServer } from 'vite'\n \n const SPECIAL_QUERY_RE = /[?&](raw|url)\\b/\n@@ -609,8 +608,8 @@ class Root {\n   }\n }\n \n-// Register a plugin that can hook into the Svelte preprocessor if svelte is\n-// enabled. This allows us to transform CSS in `<style>` tags and create a\n+// Register a plugin that can hook into the Svelte preprocessor if Svelte is\n+// configured. This allows us to transform CSS in `<style>` tags and create a\n // stricter version of CSS that passes the Svelte compiler.\n //\n // Note that these files will not undergo a second pass through the vite\n@@ -620,27 +619,21 @@ class Root {\n // In practice, it is discouraged to use `@tailwind utilities;` inside Svelte\n // components, as the styles it create would be scoped anyways. Use an external\n // `.css` file instead.\n-function svelteProcessor(roots: DefaultMap<string, Root>) {\n-  let preprocessor = sveltePreprocess()\n-\n+function svelteProcessor(roots: DefaultMap<string, Root>): Plugin {\n   return {\n     name: '@tailwindcss/svelte',\n     api: {\n       sveltePreprocess: {\n-        markup: preprocessor.markup,\n-        script: preprocessor.script,\n         async style({\n           content,\n           filename,\n           markup,\n-          ...rest\n         }: {\n           content: string\n           filename?: string\n-          attributes: Record<string, string | boolean>\n           markup: string\n         }) {\n-          if (!filename) return preprocessor.style?.({ ...rest, content, filename, markup })\n+          if (!filename) return\n \n           // Create the ID used by Vite to identify the `<style>` contents. This\n           // way, the Vite `transform` hook can find the right root and thus\n@@ -668,15 +661,15 @@ function svelteProcessor(roots: DefaultMap<string, Root>) {\n           ])\n \n           let generated = await root.generate(content, (file) =>\n-            root?.builtBeforeTransform?.push(file),\n+            root.builtBeforeTransform?.push(file),\n           )\n \n           if (!generated) {\n             roots.delete(id)\n-            return preprocessor.style?.({ ...rest, content, filename, markup })\n+            return\n           }\n \n-          return preprocessor.style?.({ ...rest, content: generated, filename, markup })\n+          return { code: generated }\n         },\n       },\n     },\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex 1dc5628b24ad..207907d54a76 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -359,9 +359,6 @@ importers:\n       lightningcss:\n         specifier: 'catalog:'\n         version: 1.26.0(patch_hash=5hwfyehqvg5wjb7mwtdvubqbl4)\n-      svelte-preprocess:\n-        specifier: ^6.0.2\n-        version: 6.0.2(@babel/core@7.25.2)(postcss-load-config@6.0.1(jiti@2.4.0)(postcss@8.4.49)(tsx@4.19.1)(yaml@2.6.0))(postcss@8.4.49)(svelte@4.2.18)(typescript@5.6.3)\n       tailwindcss:\n         specifier: workspace:*\n         version: link:../tailwindcss\n@@ -1480,13 +1477,11 @@ packages:\n   '@parcel/watcher-darwin-arm64@2.5.0':\n     resolution: {integrity: sha512-hyZ3TANnzGfLpRA2s/4U1kbw2ZI4qGxaRJbBH2DCSREFfubMswheh8TeiC1sGZ3z2jUf3s37P0BBlrD3sjVTUw==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [arm64]\n     os: [darwin]\n \n   '@parcel/watcher-darwin-x64@2.5.0':\n     resolution: {integrity: sha512-9rhlwd78saKf18fT869/poydQK8YqlU26TMiNg7AIu7eBp9adqbJZqmdFOsbZ5cnLp5XvRo9wcFmNHgHdWaGYA==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [x64]\n     os: [darwin]\n \n   '@parcel/watcher-freebsd-x64@2.5.0':\n@@ -1510,25 +1505,21 @@ packages:\n   '@parcel/watcher-linux-arm64-glibc@2.5.0':\n     resolution: {integrity: sha512-BfNjXwZKxBy4WibDb/LDCriWSKLz+jJRL3cM/DllnHH5QUyoiUNEp3GmL80ZqxeumoADfCCP19+qiYiC8gUBjA==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [arm64]\n     os: [linux]\n \n   '@parcel/watcher-linux-arm64-musl@2.5.0':\n     resolution: {integrity: sha512-S1qARKOphxfiBEkwLUbHjCY9BWPdWnW9j7f7Hb2jPplu8UZ3nes7zpPOW9bkLbHRvWM0WDTsjdOTUgW0xLBN1Q==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [arm64]\n     os: [linux]\n \n   '@parcel/watcher-linux-x64-glibc@2.5.0':\n     resolution: {integrity: sha512-d9AOkusyXARkFD66S6zlGXyzx5RvY+chTP9Jp0ypSTC9d4lzyRs9ovGf/80VCxjKddcUvnsGwCHWuF2EoPgWjw==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [x64]\n     os: [linux]\n \n   '@parcel/watcher-linux-x64-musl@2.5.0':\n     resolution: {integrity: sha512-iqOC+GoTDoFyk/VYSFHwjHhYrk8bljW6zOhPuhi5t9ulqiYq1togGJB5e3PwYVFFfeVgc6pbz3JdQyDoBszVaA==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [x64]\n     os: [linux]\n \n   '@parcel/watcher-win32-arm64@2.5.0':\n@@ -1546,7 +1537,6 @@ packages:\n   '@parcel/watcher-win32-x64@2.5.0':\n     resolution: {integrity: sha512-lPrxve92zEHdgeff3aiu4gDOIt4u7sJYha6wbdEZDCDUhtjTsOMiaJzG5lMY4GkWH8p0fMmO2Ppq5G5XXG+DQw==}\n     engines: {node: '>= 10.0.0'}\n-    cpu: [x64]\n     os: [win32]\n \n   '@parcel/watcher@2.5.0':\n@@ -2042,7 +2032,6 @@ packages:\n \n   bun@1.1.29:\n     resolution: {integrity: sha512-SKhpyKNZtgxrVel9ec9xon3LDv8mgpiuFhARgcJo1YIbggY2PBrKHRNiwQ6Qlb+x3ivmRurfuwWgwGexjpgBRg==}\n-    cpu: [arm64, x64]\n     os: [darwin, linux, win32]\n     hasBin: true\n \n@@ -2098,9 +2087,6 @@ packages:\n   client-only@0.0.1:\n     resolution: {integrity: sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==}\n \n-  code-red@1.0.4:\n-    resolution: {integrity: sha512-7qJWqItLA8/VPVlKJlFXU+NBlo/qyfs39aJcuMT/2ere32ZqvF5OSxgdM5xOfJJ7O429gg2HM47y8v9P+9wrNw==}\n-\n   color-convert@1.9.3:\n     resolution: {integrity: sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==}\n \n@@ -2146,10 +2132,6 @@ packages:\n     resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}\n     engines: {node: '>= 8'}\n \n-  css-tree@2.3.1:\n-    resolution: {integrity: sha512-6Fv1DV/TYw//QF5IzQdqsNDjx/wc8TrMBZsqjL9eW01tWb7R7k/mq+/VXfJCl7SoD5emsJop9cOByJZfs8hYIw==}\n-    engines: {node: ^10 || ^12.20.0 || ^14.13.0 || >=15.0.0}\n-\n   cssesc@3.0.0:\n     resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}\n     engines: {node: '>=4'}\n@@ -2739,9 +2721,6 @@ packages:\n     resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}\n     engines: {node: '>=0.12.0'}\n \n-  is-reference@3.0.3:\n-    resolution: {integrity: sha512-ixkJoqQvAP88E6wLydLGGqCJsrFUnqoH6HnaczB8XmDH1oaWU+xxdptvikTgaEhtZ53Ky6YXiBuUI2WXLMCwjw==}\n-\n   is-regex@1.1.4:\n     resolution: {integrity: sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==}\n     engines: {node: '>= 0.4'}\n@@ -2865,13 +2844,11 @@ packages:\n   lightningcss-darwin-arm64@1.26.0:\n     resolution: {integrity: sha512-n4TIvHO1NY1ondKFYpL2ZX0bcC2y6yjXMD6JfyizgR8BCFNEeArINDzEaeqlfX9bXz73Bpz/Ow0nu+1qiDrBKg==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [arm64]\n     os: [darwin]\n \n   lightningcss-darwin-x64@1.26.0:\n     resolution: {integrity: sha512-Rf9HuHIDi1R6/zgBkJh25SiJHF+dm9axUZW/0UoYCW1/8HV0gMI0blARhH4z+REmWiU1yYT/KyNF3h7tHyRXUg==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [x64]\n     os: [darwin]\n \n   lightningcss-freebsd-x64@1.26.0:\n@@ -2889,25 +2866,21 @@ packages:\n   lightningcss-linux-arm64-gnu@1.26.0:\n     resolution: {integrity: sha512-iJmZM7fUyVjH+POtdiCtExG+67TtPUTer7K/5A8DIfmPfrmeGvzfRyBltGhQz13Wi15K1lf2cPYoRaRh6vcwNA==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [arm64]\n     os: [linux]\n \n   lightningcss-linux-arm64-musl@1.26.0:\n     resolution: {integrity: sha512-XxoEL++tTkyuvu+wq/QS8bwyTXZv2y5XYCMcWL45b8XwkiS8eEEEej9BkMGSRwxa5J4K+LDeIhLrS23CpQyfig==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [arm64]\n     os: [linux]\n \n   lightningcss-linux-x64-gnu@1.26.0:\n     resolution: {integrity: sha512-1dkTfZQAYLj8MUSkd6L/+TWTG8V6Kfrzfa0T1fSlXCXQHrt1HC1/UepXHtKHDt/9yFwyoeayivxXAsApVxn6zA==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [x64]\n     os: [linux]\n \n   lightningcss-linux-x64-musl@1.26.0:\n     resolution: {integrity: sha512-yX3Rk9m00JGCUzuUhFEojY+jf/6zHs3XU8S8Vk+FRbnr4St7cjyMXdNjuA2LjiT8e7j8xHRCH8hyZ4H/btRE4A==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [x64]\n     os: [linux]\n \n   lightningcss-win32-arm64-msvc@1.26.0:\n@@ -2919,7 +2892,6 @@ packages:\n   lightningcss-win32-x64-msvc@1.26.0:\n     resolution: {integrity: sha512-pYS3EyGP3JRhfqEFYmfFDiZ9/pVNfy8jVIYtrx9TVNusVyDK3gpW1w/rbvroQ4bDJi7grdUtyrYU6V2xkY/bBw==}\n     engines: {node: '>= 12.0.0'}\n-    cpu: [x64]\n     os: [win32]\n \n   lightningcss@1.26.0:\n@@ -2941,9 +2913,6 @@ packages:\n     resolution: {integrity: sha512-IXO6OCs9yg8tMKzfPZ1YmheJbZCiEsnBdcB03l0OcfK9prKnJb96siuHCr5Fl37/yo9DnKU+TLpxzTUspw9shg==}\n     engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}\n \n-  locate-character@3.0.0:\n-    resolution: {integrity: sha512-SW13ws7BjaeJ6p7Q6CO2nchbYEc3X3J6WrmTTDto7yMPqVSZTUyY5Tjbid+Ab8gLnATtygYtiDIJGQRRn2ZOiA==}\n-\n   locate-path@6.0.0:\n     resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}\n     engines: {node: '>=10'}\n@@ -2976,12 +2945,6 @@ packages:\n   magic-string@0.30.11:\n     resolution: {integrity: sha512-+Wri9p0QHMy+545hKww7YAu5NyzF8iomPL/RQazugQ9+Ez4Ic3mERMd8ZTX5rfK944j+560ZJi8iAwgak1Ac7A==}\n \n-  magic-string@0.30.13:\n-    resolution: {integrity: sha512-8rYBO+MsWkgjDSOvLomYnzhdwEG51olQ4zL5KXnNJWV5MNmrb4rTZdrtkhxjnD/QyZUqR/Z/XDsUs/4ej2nx0g==}\n-\n-  mdn-data@2.0.30:\n-    resolution: {integrity: sha512-GaqWWShW4kv/G9IEucWScBx9G1/vsFZZJUO+tD26M8J8z3Kw5RDQjaoZe03YAClgeS/SWPOcb4nkFBTEi5DUEA==}\n-\n   merge-stream@2.0.0:\n     resolution: {integrity: sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==}\n \n@@ -3195,9 +3158,6 @@ packages:\n     resolution: {integrity: sha512-vE7JKRyES09KiunauX7nd2Q9/L7lhok4smP9RZTDeD4MVs72Dp2qNFVz39Nz5a0FVEW0BJR6C0DYrq6unoziZA==}\n     engines: {node: '>= 14.16'}\n \n-  periscopic@3.1.0:\n-    resolution: {integrity: sha512-vKiQ8RRtkl9P+r/+oefh25C3fhybptkHKCZSPlcXiJux2tJF55GnEj3BVn4A5gKfq9NWWXXrxkHBwVPUfH0opw==}\n-\n   picocolors@1.1.1:\n     resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}\n \n@@ -3595,47 +3555,6 @@ packages:\n     resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}\n     engines: {node: '>= 0.4'}\n \n-  svelte-preprocess@6.0.2:\n-    resolution: {integrity: sha512-OvDTLfaOkkhjprbDKO0SOCkjNYuHy16dbD4SpqbIi6QiabOMHxRT4km5/dzbFFkmW1L0E2INF3MFltG2pgOyKQ==}\n-    engines: {node: '>= 18.0.0'}\n-    peerDependencies:\n-      '@babel/core': ^7.10.2\n-      coffeescript: ^2.5.1\n-      less: ^3.11.3 || ^4.0.0\n-      postcss: ^7 || ^8\n-      postcss-load-config: '>=3'\n-      pug: ^3.0.0\n-      sass: ^1.26.8\n-      stylus: '>=0.55'\n-      sugarss: ^2.0.0 || ^3.0.0 || ^4.0.0\n-      svelte: ^4.0.0 || ^5.0.0-next.100 || ^5.0.0\n-      typescript: ^5.0.0\n-    peerDependenciesMeta:\n-      '@babel/core':\n-        optional: true\n-      coffeescript:\n-        optional: true\n-      less:\n-        optional: true\n-      postcss:\n-        optional: true\n-      postcss-load-config:\n-        optional: true\n-      pug:\n-        optional: true\n-      sass:\n-        optional: true\n-      stylus:\n-        optional: true\n-      sugarss:\n-        optional: true\n-      typescript:\n-        optional: true\n-\n-  svelte@4.2.18:\n-    resolution: {integrity: sha512-d0FdzYIiAePqRJEb90WlJDkjUEx42xhivxN8muUBmfZnP+tzUgz12DJ2hRJi8sIHCME7jeK1PTMgKPSfTd8JrA==}\n-    engines: {node: '>=16'}\n-\n   tailwindcss@3.4.14:\n     resolution: {integrity: sha512-IcSvOcTRcUtQQ7ILQL5quRDg7Xs93PdJEk1ZLbhhvJc7uj/OAhYOnruEiwnGgBvUtaUAJ8/mhSw1o8L2jCiENA==}\n     engines: {node: '>=14.0.0'}\n@@ -5340,14 +5259,6 @@ snapshots:\n \n   client-only@0.0.1: {}\n \n-  code-red@1.0.4:\n-    dependencies:\n-      '@jridgewell/sourcemap-codec': 1.5.0\n-      '@types/estree': 1.0.6\n-      acorn: 8.14.0\n-      estree-walker: 3.0.3\n-      periscopic: 3.1.0\n-\n   color-convert@1.9.3:\n     dependencies:\n       color-name: 1.1.3\n@@ -5395,11 +5306,6 @@ snapshots:\n       shebang-command: 2.0.0\n       which: 2.0.2\n \n-  css-tree@2.3.1:\n-    dependencies:\n-      mdn-data: 2.0.30\n-      source-map-js: 1.2.1\n-\n   cssesc@3.0.0: {}\n \n   csstype@3.1.3: {}\n@@ -5703,7 +5609,7 @@ snapshots:\n       eslint: 9.15.0(jiti@2.4.0)\n       eslint-import-resolver-node: 0.3.9\n       eslint-import-resolver-typescript: 3.6.3(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.5.4))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0)(eslint@9.15.0(jiti@2.4.0))\n-      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.5.4))(eslint-import-resolver-typescript@3.6.3)(eslint@9.15.0(jiti@2.4.0))\n+      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.5.4))(eslint@9.15.0(jiti@2.4.0))\n       eslint-plugin-jsx-a11y: 6.10.1(eslint@9.15.0(jiti@2.4.0))\n       eslint-plugin-react: 7.37.2(eslint@9.15.0(jiti@2.4.0))\n       eslint-plugin-react-hooks: 5.0.0(eslint@9.15.0(jiti@2.4.0))\n@@ -5723,7 +5629,7 @@ snapshots:\n       eslint: 9.15.0(jiti@2.4.0)\n       eslint-import-resolver-node: 0.3.9\n       eslint-import-resolver-typescript: 3.6.3(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.6.3))(eslint-import-resolver-node@0.3.9)(eslint-plugin-import@2.31.0)(eslint@9.15.0(jiti@2.4.0))\n-      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.6.3))(eslint@9.15.0(jiti@2.4.0))\n+      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.6.3))(eslint-import-resolver-typescript@3.6.3)(eslint@9.15.0(jiti@2.4.0))\n       eslint-plugin-jsx-a11y: 6.10.1(eslint@9.15.0(jiti@2.4.0))\n       eslint-plugin-react: 7.37.2(eslint@9.15.0(jiti@2.4.0))\n       eslint-plugin-react-hooks: 5.0.0(eslint@9.15.0(jiti@2.4.0))\n@@ -5754,7 +5660,7 @@ snapshots:\n       is-bun-module: 1.2.1\n       is-glob: 4.0.3\n     optionalDependencies:\n-      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.5.4))(eslint-import-resolver-typescript@3.6.3)(eslint@9.15.0(jiti@2.4.0))\n+      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.5.4))(eslint@9.15.0(jiti@2.4.0))\n     transitivePeerDependencies:\n       - '@typescript-eslint/parser'\n       - eslint-import-resolver-node\n@@ -5773,7 +5679,7 @@ snapshots:\n       is-bun-module: 1.2.1\n       is-glob: 4.0.3\n     optionalDependencies:\n-      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.6.3))(eslint@9.15.0(jiti@2.4.0))\n+      eslint-plugin-import: 2.31.0(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.6.3))(eslint-import-resolver-typescript@3.6.3)(eslint@9.15.0(jiti@2.4.0))\n     transitivePeerDependencies:\n       - '@typescript-eslint/parser'\n       - eslint-import-resolver-node\n@@ -5802,7 +5708,7 @@ snapshots:\n     transitivePeerDependencies:\n       - supports-color\n \n-  eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.5.4))(eslint-import-resolver-typescript@3.6.3)(eslint@9.15.0(jiti@2.4.0)):\n+  eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.5.4))(eslint@9.15.0(jiti@2.4.0)):\n     dependencies:\n       '@rtsao/scc': 1.1.0\n       array-includes: 3.1.8\n@@ -5831,7 +5737,7 @@ snapshots:\n       - eslint-import-resolver-webpack\n       - supports-color\n \n-  eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.6.3))(eslint@9.15.0(jiti@2.4.0)):\n+  eslint-plugin-import@2.31.0(@typescript-eslint/parser@8.11.0(eslint@9.15.0(jiti@2.4.0))(typescript@5.6.3))(eslint-import-resolver-typescript@3.6.3)(eslint@9.15.0(jiti@2.4.0)):\n     dependencies:\n       '@rtsao/scc': 1.1.0\n       array-includes: 3.1.8\n@@ -6274,10 +6180,6 @@ snapshots:\n \n   is-number@7.0.0: {}\n \n-  is-reference@3.0.3:\n-    dependencies:\n-      '@types/estree': 1.0.6\n-\n   is-regex@1.1.4:\n     dependencies:\n       call-bind: 1.0.7\n@@ -6433,8 +6335,6 @@ snapshots:\n \n   load-tsconfig@0.2.5: {}\n \n-  locate-character@3.0.0: {}\n-\n   locate-path@6.0.0:\n     dependencies:\n       p-locate: 5.0.0\n@@ -6465,12 +6365,6 @@ snapshots:\n     dependencies:\n       '@jridgewell/sourcemap-codec': 1.5.0\n \n-  magic-string@0.30.13:\n-    dependencies:\n-      '@jridgewell/sourcemap-codec': 1.5.0\n-\n-  mdn-data@2.0.30: {}\n-\n   merge-stream@2.0.0: {}\n \n   merge2@1.4.1: {}\n@@ -6658,12 +6552,6 @@ snapshots:\n \n   pathval@2.0.0: {}\n \n-  periscopic@3.1.0:\n-    dependencies:\n-      '@types/estree': 1.0.6\n-      estree-walker: 3.0.3\n-      is-reference: 3.0.3\n-\n   picocolors@1.1.1: {}\n \n   picomatch@2.3.1: {}\n@@ -7124,32 +7012,6 @@ snapshots:\n \n   supports-preserve-symlinks-flag@1.0.0: {}\n \n-  svelte-preprocess@6.0.2(@babel/core@7.25.2)(postcss-load-config@6.0.1(jiti@2.4.0)(postcss@8.4.49)(tsx@4.19.1)(yaml@2.6.0))(postcss@8.4.49)(svelte@4.2.18)(typescript@5.6.3):\n-    dependencies:\n-      svelte: 4.2.18\n-    optionalDependencies:\n-      '@babel/core': 7.25.2\n-      postcss: 8.4.49\n-      postcss-load-config: 6.0.1(jiti@2.4.0)(postcss@8.4.49)(tsx@4.19.1)(yaml@2.6.0)\n-      typescript: 5.6.3\n-\n-  svelte@4.2.18:\n-    dependencies:\n-      '@ampproject/remapping': 2.3.0\n-      '@jridgewell/sourcemap-codec': 1.5.0\n-      '@jridgewell/trace-mapping': 0.3.25\n-      '@types/estree': 1.0.6\n-      acorn: 8.14.0\n-      aria-query: 5.3.2\n-      axobject-query: 4.1.0\n-      code-red: 1.0.4\n-      css-tree: 2.3.1\n-      estree-walker: 3.0.3\n-      is-reference: 3.0.3\n-      locate-character: 3.0.0\n-      magic-string: 0.30.13\n-      periscopic: 3.1.0\n-\n   tailwindcss@3.4.14:\n     dependencies:\n       '@alloc/quick-lru': 5.2.0\n"", ""test_patch"": ""diff --git a/integrations/vite/svelte.test.ts b/integrations/vite/svelte.test.ts\nindex 12acd63a579d..b0950f9f9cd2 100644\n--- a/integrations/vite/svelte.test.ts\n+++ b/integrations/vite/svelte.test.ts\n@@ -9,11 +9,11 @@ test(\n         {\n           \""type\"": \""module\"",\n           \""dependencies\"": {\n-            \""svelte\"": \""^4.2.18\"",\n+            \""svelte\"": \""^5\"",\n             \""tailwindcss\"": \""workspace:^\""\n           },\n           \""devDependencies\"": {\n-            \""@sveltejs/vite-plugin-svelte\"": \""^3.1.1\"",\n+            \""@sveltejs/vite-plugin-svelte\"": \""^5\"",\n             \""@tailwindcss/vite\"": \""workspace:^\"",\n             \""vite\"": \""^6\""\n           }\n@@ -120,11 +120,11 @@ test(\n         {\n           \""type\"": \""module\"",\n           \""dependencies\"": {\n-            \""svelte\"": \""^4.2.18\"",\n+            \""svelte\"": \""^5\"",\n             \""tailwindcss\"": \""workspace:^\""\n           },\n           \""devDependencies\"": {\n-            \""@sveltejs/vite-plugin-svelte\"": \""^3.1.1\"",\n+            \""@sveltejs/vite-plugin-svelte\"": \""^5\"",\n             \""@tailwindcss/vite\"": \""workspace:^\"",\n             \""vite\"": \""^6\""\n           }\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15273"", ""pr_id"": 15273, ""issue_id"": 15138, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Plugins registered after `@tailwindcss/postcss` do not work\n**What version of Tailwind CSS are you using?**\r\n\r\n`@tailwindcss/postcss@4.0.0-beta.2`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\n`postcss@8.4.49`\r\n\r\n**What version of Node.js are you using?**\r\n\r\nNode 18, 20, 22\r\n\r\n**What browser are you using?**\r\n\r\nN/A\r\n\r\n**What operating system are you using?**\r\n\r\nWindows 11 23H2 (Node 20) \r\n\r\nUbuntu 22.04.5 LTS (Node 18, 20, 22)\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/maizzle/tw4-with-plugins\r\n\r\n**Describe your issue**\r\n\r\nRunning into an issue where PostCSS plugins used after Tailwind CSS v4.0-beta.2 do not work.\r\n\r\nFor example, this should add `!important` to properties and resolve CSS variables:\r\n\r\n```js\r\nimport postcss from \""postcss\"";\r\nimport tailwindcss from \""@tailwindcss/postcss\"";\r\nimport cssVariables from \""postcss-css-variables\"";\r\n\r\npostcss([\r\n    tailwindcss, \r\n    cssVariables,\r\n    addImportantPlugin, // see `index.js`\r\n    ]).process(\r\n        `\r\n            @import \""tailwindcss/theme\"";\r\n            @import \""tailwindcss/utilities\"";\r\n        `, \r\n        {from: undefined}\r\n    )\r\n    .then(result => result.css);\r\n```\r\n\r\nHowever, the test fails:\r\n\r\n```diff\r\n.text-red-200 {\r\n+   color: oklch(0.885 0.062 18.334) !important; // expected\r\n-   color: var(--color-red-200);\r\n}\r\n```\r\n\r\nInitially I thought this might be an async issue because of the `posthtml-postcss` plugin which uses Promises, but the issue persists even when using `postcss` directly.\r\n"", ""issue_word_count"": 209, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/@tailwindcss-postcss/src/index.test.ts"", ""packages/@tailwindcss-postcss/src/index.ts"", ""packages/@tailwindcss-postcss/src/postcss-fix-relative-paths/index.ts""], ""pr_changed_test_files"": [""packages/@tailwindcss-postcss/src/index.test.ts""], ""base_commit"": ""93b922dcb6e40ef78d893a002ee35b93521caa34"", ""head_commit"": ""37dce8dcd8e528244f74a30c96aaadcc442fbc9b"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15273"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15273"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-03T09:28:51.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 1d460d1ac346..aace62b6ebf6 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,8 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure absolute `url()`s inside imported CSS files are not rebased when using `@tailwindcss/vite`\n - Fix issues with dev servers using Svelte 5 with the Vite plugin ([#15274](https://github.com/tailwindlabs/tailwindcss/issues/15274))\n - Fix resolution of imported CSS files in Vite SSR builds ([#15279](https://github.com/tailwindlabs/tailwindcss/issues/15279))\n+- Ensure other plugins can run after `@tailwindcss/postcss` ([#15273](https://github.com/tailwindlabs/tailwindcss/pull/15273))\n+- Rebase `url()` inside imported CSS files when using Vite with the `@tailwindcss/postcss` extension ([#15273](https://github.com/tailwindlabs/tailwindcss/pull/15273))\n \n ### Added\n \n\ndiff --git a/packages/@tailwindcss-postcss/src/index.ts b/packages/@tailwindcss-postcss/src/index.ts\nindex 6720dfea0fd8..a1759f9f4c69 100644\n--- a/packages/@tailwindcss-postcss/src/index.ts\n+++ b/packages/@tailwindcss-postcss/src/index.ts\n@@ -55,7 +55,7 @@ function tailwindcss(opts: PluginOptions = {}): AcceptedPlugin {\n \n       {\n         postcssPlugin: 'tailwindcss',\n-        async OnceExit(root, { result }) {\n+        async Once(root, { result }) {\n           env.DEBUG && console.time('[@tailwindcss/postcss] Total time in @tailwindcss/postcss')\n           let inputFile = result.opts.from ?? ''\n           let context = getContextFromCache(inputFile, opts)\n\ndiff --git a/packages/@tailwindcss-postcss/src/postcss-fix-relative-paths/index.ts b/packages/@tailwindcss-postcss/src/postcss-fix-relative-paths/index.ts\nindex 2b88014a3e85..68dcb5551b7d 100644\n--- a/packages/@tailwindcss-postcss/src/postcss-fix-relative-paths/index.ts\n+++ b/packages/@tailwindcss-postcss/src/postcss-fix-relative-paths/index.ts\n@@ -67,10 +67,8 @@ export default function fixRelativePathsPlugin(): Plugin {\n \n   return {\n     postcssPlugin: 'tailwindcss-postcss-fix-relative-paths',\n-    AtRule: {\n-      source: fixRelativePath,\n-      plugin: fixRelativePath,\n-      config: fixRelativePath,\n+    Once(root) {\n+      root.walkAtRules(/source|plugin|config/, fixRelativePath)\n     },\n   }\n }\n"", ""test_patch"": ""diff --git a/packages/@tailwindcss-postcss/src/index.test.ts b/packages/@tailwindcss-postcss/src/index.test.ts\nindex 02ab23bea23d..50f72a13d992 100644\n--- a/packages/@tailwindcss-postcss/src/index.test.ts\n+++ b/packages/@tailwindcss-postcss/src/index.test.ts\n@@ -2,7 +2,6 @@ import dedent from 'dedent'\n import { unlink, writeFile } from 'node:fs/promises'\n import postcss from 'postcss'\n import { afterEach, beforeEach, describe, expect, test } from 'vitest'\n-// @ts-ignore\n import tailwindcss from './index'\n \n // We give this file path to PostCSS for processing.\n@@ -248,3 +247,62 @@ test('bail early when Tailwind is not used', async () => {\n     }\""\n   `)\n })\n+\n+test('runs `Once` plugins in the right order', async () => {\n+  let before = ''\n+  let after = ''\n+  let processor = postcss([\n+    {\n+      postcssPlugin: 'before',\n+      Once(root) {\n+        before = root.toString()\n+      },\n+    },\n+    tailwindcss({ base: `${__dirname}/fixtures/example-project`, optimize: { minify: false } }),\n+    {\n+      postcssPlugin: 'after',\n+      Once(root) {\n+        after = root.toString()\n+      },\n+    },\n+  ])\n+\n+  let result = await processor.process(\n+    css`\n+      @theme {\n+        --color-red-500: red;\n+      }\n+      .custom-css {\n+        color: theme(--color-red-500);\n+      }\n+    `,\n+    { from: inputCssFilePath() },\n+  )\n+\n+  expect(result.css.trim()).toMatchInlineSnapshot(`\n+    \"":root {\n+      --color-red-500: red;\n+    }\n+\n+    .custom-css {\n+      color: red;\n+    }\""\n+  `)\n+  expect(before).toMatchInlineSnapshot(`\n+    \""@theme {\n+      --color-red-500: red;\n+    }\n+    .custom-css {\n+      color: theme(--color-red-500);\n+    }\""\n+  `)\n+  expect(after).toMatchInlineSnapshot(`\n+    \"":root {\n+      --color-red-500: red;\n+    }\n+\n+    .custom-css {\n+      color: red;\n+    }\""\n+  `)\n+})\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15261"", ""pr_id"": 15261, ""issue_id"": 15255, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] float-start and inline-start generate invalid values\n**What version of Tailwind CSS are you using?**\r\n\r\n`v3.4.15` vs `v4.0.0-beta.4`\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nTested in playground only\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/AGmhqrluog\r\n\r\n**Describe your issue**\r\n\r\nUtilities `float-start` and `clear-start` generate this with TW3:\r\n\r\n```css\r\n.float-start {\r\n  float: inline-start;\r\n}\r\n.clear-start {\r\n  clear: inline-start;\r\n}\r\n```\r\n\r\nand this with TW4:\r\n\r\n```css\r\n.float-start {\r\n  float: start;\r\n}\r\n.clear-start {\r\n  clear: start;\r\n}\r\n```\r\n\r\nwhich seem to be \""Invalid property value\""-s according to Chrome/Firefox dev tools."", ""issue_word_count"": 102, ""test_files_count"": 1, ""non_test_files_count"": 1, ""pr_changed_files"": [""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""973650624d44b017c14433d1e05f7d3edde98c7f"", ""head_commit"": ""aa52a2b34ce2a2a5dc1c5020767dccea72e8ac36"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15261"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15261"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-02T14:34:13.000Z"", ""patch"": ""diff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex a544403025d3..287604f146a9 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -719,8 +719,8 @@ export function createUtilities(theme: Theme) {\n   /**\n    * @css `float`\n    */\n-  staticUtility('float-start', [['float', 'start']])\n-  staticUtility('float-end', [['float', 'end']])\n+  staticUtility('float-start', [['float', 'inline-start']])\n+  staticUtility('float-end', [['float', 'inline-end']])\n   staticUtility('float-right', [['float', 'right']])\n   staticUtility('float-left', [['float', 'left']])\n   staticUtility('float-none', [['float', 'none']])\n@@ -728,8 +728,8 @@ export function createUtilities(theme: Theme) {\n   /**\n    * @css `clear`\n    */\n-  staticUtility('clear-start', [['clear', 'start']])\n-  staticUtility('clear-end', [['clear', 'end']])\n+  staticUtility('clear-start', [['clear', 'inline-start']])\n+  staticUtility('clear-end', [['clear', 'inline-end']])\n   staticUtility('clear-right', [['clear', 'right']])\n   staticUtility('clear-left', [['clear', 'left']])\n   staticUtility('clear-both', [['clear', 'both']])\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 3f1b25333112..d8cd24c026f5 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -1360,26 +1360,26 @@ test('row-end', async () => {\n test('float', async () => {\n   expect(await run(['float-start', 'float-end', 'float-right', 'float-left', 'float-none']))\n     .toMatchInlineSnapshot(`\n-    \"".float-end {\n-      float: end;\n-    }\n+      \"".float-end {\n+        float: inline-end;\n+      }\n \n-    .float-left {\n-      float: left;\n-    }\n+      .float-left {\n+        float: left;\n+      }\n \n-    .float-none {\n-      float: none;\n-    }\n+      .float-none {\n+        float: none;\n+      }\n \n-    .float-right {\n-      float: right;\n-    }\n+      .float-right {\n+        float: right;\n+      }\n \n-    .float-start {\n-      float: start;\n-    }\""\n-  `)\n+      .float-start {\n+        float: inline-start;\n+      }\""\n+    `)\n   expect(\n     await run([\n       'float',\n@@ -1413,7 +1413,7 @@ test('clear', async () => {\n     }\n \n     .clear-end {\n-      clear: end;\n+      clear: inline-end;\n     }\n \n     .clear-left {\n@@ -1429,7 +1429,7 @@ test('clear', async () => {\n     }\n \n     .clear-start {\n-      clear: start;\n+      clear: inline-start;\n     }\""\n   `)\n   expect(\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15228"", ""pr_id"": 15228, ""issue_id"": 15219, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Files imported with `@import \""\u2026\"" theme(\u2026)` must only contain `@theme` blocks\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\ntailwindcss 4.0.0-beta.2\r\n\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite 6.0.1\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv23.1.0\r\n\r\n**What browser are you using?**\r\n\r\nNA\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nI am not sure how to create Vue components with Tailwind Play. I have a reproducible example locally with only a few files. \r\n\r\n1. Created a new blank project using vite with Vue. eg `npm create vite@latest`\r\n2. Followed the directions to add Tailwind v4. \r\n3. Update Vue css to have `@import`\r\n\r\n```\r\n<style scoped>\r\n@import \""../style.css\"" theme(reference);\r\n\r\n.test {\r\n    @apply mb-4 bg-foo;\r\n}\r\n</style>\r\n```\r\n\r\nstyles.css\r\n\r\n```\r\n@import \""tailwindcss\"";\r\n\r\n@theme {\r\n    --color-foo: oklch(0.99 0 0);\r\n}\r\n\r\n@layer {\r\n}\r\n```\r\n\r\n**Describe your issue**\r\n\r\n`build` throws the following exception: \r\n\r\n```\r\nvite v6.0.1 building for production...\r\n\u2713 12 modules transformed.\r\nx Build failed in 84ms\r\nerror during build:\r\n[@tailwindcss/vite:generate:build] Files imported with `@import \""\u2026\"" theme(\u2026)` must only contain `@theme` blocks.\r\nfile: /Users/amirraminfar/Desktop/my-project/src/components/HelloWorld.vue?vue&type=style&index=0&scoped=0cb914fb&lang.css\r\n    at file:///Users/amirraminfar/Desktop/my-project/node_modules/.pnpm/tailwindcss@4.0.0-beta.2/node_modules/tailwindcss/dist/lib.mjs:24:2929\r\n    at D (file:///Users/amirraminfar/Desktop/my-project/node_modules/.pnpm/tailwindcss@4.0.0-beta.2/node_modules/tailwindcss/dist/lib.mjs:3:3654)\r\n    at D (file:///Users/amirraminfar/Desktop/my-project/node_modules/.pnpm/tailwindcss@4.0.0-beta.2/node_modules/tailwindcss/dist/lib.mjs:3:3812)\r\n    at D (file:///Users/amirraminfar/Desktop/my-project/node_modules/.pnpm/tailwindcss@4.0.0-beta.2/node_modules/tailwindcss/dist/lib.mjs:3:3604)\r\n    at D (file:///Users/amirraminfar/Desktop/my-project/node_modules/.pnpm/tailwindcss@4.0.0-beta.2/node_modules/tailwindcss/dist/lib.mjs:3:3604)\r\n    at D (file:///Users/amirraminfar/Desktop/my-project/node_modules/.pnpm/tailwindcss@4.0.0-beta.2/node_modules/tailwindcss/dist/lib.mjs:3:3604)\r\n    at file:///Users/amirraminfar/Desktop/my-project/node_modules/.pnpm/tailwindcss@4.0.0-beta.2/node_modules/tailwindcss/dist/lib.mjs:24:2887\r\n    at D (file:///Users/amirraminfar/Desktop/my-project/node_modules/.pnpm/tailwindcss@4.0.0-beta.2/node_modules/tailwindcss/dist/lib.mjs:3:3654)\r\n    at D (file:///Users/amirraminfar/Desktop/my-project/node_modules/.pnpm/tailwindcss@4.0.0-beta.2/node_modules/tailwindcss/dist/lib.mjs:3:3604)\r\n    at D (file:///Users/amirraminfar/Desktop/my-project/node_modules/.pnpm/tailwindcss@4.0.0-beta.2/node_modules/tailwindcss/dist/lib.mjs:3:3604)\r\n\u2009ELIFECYCLE\u2009 Command failed with exit code 1.\r\n```\r\n\r\nNote: This was originally found in my project. So I created a small example using `npm create vite@latest` and it is still happening. \r\n\r\n"", ""issue_word_count"": 501, ""test_files_count"": 4, ""non_test_files_count"": 6, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/svelte.test.ts"", ""integrations/vite/vue.test.ts"", ""packages/tailwindcss/src/ast.ts"", ""packages/tailwindcss/src/compat/apply-compat-hooks.ts"", ""packages/tailwindcss/src/compat/config/resolve-config.ts"", ""packages/tailwindcss/src/compat/plugin-api.test.ts"", ""packages/tailwindcss/src/compat/plugin-api.ts"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/index.ts""], ""pr_changed_test_files"": [""integrations/vite/svelte.test.ts"", ""integrations/vite/vue.test.ts"", ""packages/tailwindcss/src/compat/plugin-api.test.ts"", ""packages/tailwindcss/src/index.test.ts""], ""base_commit"": ""3e5745fbb28bb4cf8cc53c8618461bf136b67381"", ""head_commit"": ""7133d708c2ff1ab3c558dffe84fc5c0ee4d6d79f"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15228"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15228"", ""dockerfile"": """", ""pr_merged_at"": ""2024-12-03T13:15:24.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex a8087a60e8c2..af3d866f3e07 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -7,6 +7,12 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ## [Unreleased]\n \n+### Added\n+\n+- Parallelize parsing of individual source files ([#15270](https://github.com/tailwindlabs/tailwindcss/pull/15270))\n+- Support Vite 6 in the Vite plugin ([#15274](https://github.com/tailwindlabs/tailwindcss/issues/15274))\n+- Add a new `@import \""\u2026\"" reference` syntax for only importing the Tailwind CSS configurations of a stylesheets ([#15228](https://github.com/tailwindlabs/tailwindcss/pull/15228))\n+\n ### Fixed\n \n - Ensure absolute `url()`s inside imported CSS files are not rebased when using `@tailwindcss/vite` ([#15275](https://github.com/tailwindlabs/tailwindcss/pull/15275))\n@@ -15,11 +21,6 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure other plugins can run after `@tailwindcss/postcss` ([#15273](https://github.com/tailwindlabs/tailwindcss/pull/15273))\n - Rebase `url()` inside imported CSS files when using Vite with the `@tailwindcss/postcss` extension ([#15273](https://github.com/tailwindlabs/tailwindcss/pull/15273))\n \n-### Added\n-\n-- Parallelize parsing of individual source files ([#15270](https://github.com/tailwindlabs/tailwindcss/pull/15270))\n-- Support Vite 6 in the Vite plugin ([#15274](https://github.com/tailwindlabs/tailwindcss/issues/15274))\n-\n ## [4.0.0-beta.4] - 2024-11-29\n \n ### Fixed\n\ndiff --git a/packages/tailwindcss/src/ast.ts b/packages/tailwindcss/src/ast.ts\nindex 5245db2df0d1..e20f6042223a 100644\n--- a/packages/tailwindcss/src/ast.ts\n+++ b/packages/tailwindcss/src/ast.ts\n@@ -29,7 +29,7 @@ export type Comment = {\n \n export type Context = {\n   kind: 'context'\n-  context: Record<string, string>\n+  context: Record<string, string | boolean>\n   nodes: AstNode[]\n }\n \n@@ -82,7 +82,7 @@ export function comment(value: string): Comment {\n   }\n }\n \n-export function context(context: Record<string, string>, nodes: AstNode[]): Context {\n+export function context(context: Record<string, string | boolean>, nodes: AstNode[]): Context {\n   return {\n     kind: 'context',\n     context,\n@@ -115,12 +115,12 @@ export function walk(\n     utils: {\n       parent: AstNode | null\n       replaceWith(newNode: AstNode | AstNode[]): void\n-      context: Record<string, string>\n+      context: Record<string, string | boolean>\n       path: AstNode[]\n     },\n   ) => void | WalkAction,\n   parentPath: AstNode[] = [],\n-  context: Record<string, string> = {},\n+  context: Record<string, string | boolean> = {},\n ) {\n   for (let i = 0; i < ast.length; i++) {\n     let node = ast[i]\n@@ -175,12 +175,12 @@ export function walkDepth(\n     utils: {\n       parent: AstNode | null\n       path: AstNode[]\n-      context: Record<string, string>\n+      context: Record<string, string | boolean>\n       replaceWith(newNode: AstNode[]): void\n     },\n   ) => void,\n   parentPath: AstNode[] = [],\n-  context: Record<string, string> = {},\n+  context: Record<string, string | boolean> = {},\n ) {\n   for (let i = 0; i < ast.length; i++) {\n     let node = ast[i]\n\ndiff --git a/packages/tailwindcss/src/compat/apply-compat-hooks.ts b/packages/tailwindcss/src/compat/apply-compat-hooks.ts\nindex 841a1c2e2860..0564bcf91344 100644\n--- a/packages/tailwindcss/src/compat/apply-compat-hooks.ts\n+++ b/packages/tailwindcss/src/compat/apply-compat-hooks.ts\n@@ -34,8 +34,9 @@ export async function applyCompatibilityHooks({\n   globs: { origin?: string; pattern: string }[]\n }) {\n   let features = Features.None\n-  let pluginPaths: [{ id: string; base: string }, CssPluginOptions | null][] = []\n-  let configPaths: { id: string; base: string }[] = []\n+  let pluginPaths: [{ id: string; base: string; reference: boolean }, CssPluginOptions | null][] =\n+    []\n+  let configPaths: { id: string; base: string; reference: boolean }[] = []\n \n   walk(ast, (node, { parent, replaceWith, context }) => {\n     if (node.kind !== 'at-rule') return\n@@ -95,7 +96,7 @@ export async function applyCompatibilityHooks({\n       }\n \n       pluginPaths.push([\n-        { id: pluginPath, base: context.base },\n+        { id: pluginPath, base: context.base as string, reference: !!context.reference },\n         Object.keys(options).length > 0 ? options : null,\n       ])\n \n@@ -114,7 +115,11 @@ export async function applyCompatibilityHooks({\n         throw new Error('`@config` cannot be nested.')\n       }\n \n-      configPaths.push({ id: node.params.slice(1, -1), base: context.base })\n+      configPaths.push({\n+        id: node.params.slice(1, -1),\n+        base: context.base as string,\n+        reference: !!context.reference,\n+      })\n       replaceWith([])\n       features |= Features.JsPluginCompat\n       return\n@@ -153,23 +158,25 @@ export async function applyCompatibilityHooks({\n \n   let [configs, pluginDetails] = await Promise.all([\n     Promise.all(\n-      configPaths.map(async ({ id, base }) => {\n+      configPaths.map(async ({ id, base, reference }) => {\n         let loaded = await loadModule(id, base, 'config')\n         return {\n           path: id,\n           base: loaded.base,\n           config: loaded.module as UserConfig,\n+          reference,\n         }\n       }),\n     ),\n     Promise.all(\n-      pluginPaths.map(async ([{ id, base }, pluginOptions]) => {\n+      pluginPaths.map(async ([{ id, base, reference }, pluginOptions]) => {\n         let loaded = await loadModule(id, base, 'plugin')\n         return {\n           path: id,\n           base: loaded.base,\n           plugin: loaded.module as Plugin,\n           options: pluginOptions,\n+          reference,\n         }\n       }),\n     ),\n@@ -203,22 +210,32 @@ function upgradeToFullPluginSupport({\n     path: string\n     base: string\n     config: UserConfig\n+    reference: boolean\n   }[]\n   pluginDetails: {\n     path: string\n     base: string\n     plugin: Plugin\n     options: CssPluginOptions | null\n+    reference: boolean\n   }[]\n }) {\n   let features = Features.None\n   let pluginConfigs = pluginDetails.map((detail) => {\n     if (!detail.options) {\n-      return { config: { plugins: [detail.plugin] }, base: detail.base }\n+      return {\n+        config: { plugins: [detail.plugin] },\n+        base: detail.base,\n+        reference: detail.reference,\n+      }\n     }\n \n     if ('__isOptionsFunction' in detail.plugin) {\n-      return { config: { plugins: [detail.plugin(detail.options)] }, base: detail.base }\n+      return {\n+        config: { plugins: [detail.plugin(detail.options)] },\n+        base: detail.base,\n+        reference: detail.reference,\n+      }\n     }\n \n     throw new Error(`The plugin \""${detail.path}\"" does not accept options`)\n@@ -227,9 +244,9 @@ function upgradeToFullPluginSupport({\n   let userConfig = [...pluginConfigs, ...configs]\n \n   let { resolvedConfig } = resolveConfig(designSystem, [\n-    { config: createCompatConfig(designSystem.theme), base },\n+    { config: createCompatConfig(designSystem.theme), base, reference: true },\n     ...userConfig,\n-    { config: { plugins: [darkModePlugin] }, base },\n+    { config: { plugins: [darkModePlugin] }, base, reference: true },\n   ])\n   let { resolvedConfig: resolvedUserConfig, replacedThemeKeys } = resolveConfig(\n     designSystem,\n@@ -242,8 +259,8 @@ function upgradeToFullPluginSupport({\n     },\n   })\n \n-  for (let { handler } of resolvedConfig.plugins) {\n-    handler(pluginApi)\n+  for (let { handler, reference } of resolvedConfig.plugins) {\n+    handler(reference ? { ...pluginApi, addBase: () => {} } : pluginApi)\n   }\n \n   // Merge the user-configured theme keys into the design system. The compat\n\ndiff --git a/packages/tailwindcss/src/compat/config/resolve-config.ts b/packages/tailwindcss/src/compat/config/resolve-config.ts\nindex c486de8ae33d..6801c7b60f98 100644\n--- a/packages/tailwindcss/src/compat/config/resolve-config.ts\n+++ b/packages/tailwindcss/src/compat/config/resolve-config.ts\n@@ -15,6 +15,7 @@ export interface ConfigFile {\n   path?: string\n   base: string\n   config: UserConfig\n+  reference: boolean\n }\n \n interface ResolutionContext {\n@@ -128,7 +129,10 @@ export type PluginUtils = {\n   colors: typeof colors\n }\n \n-function extractConfigs(ctx: ResolutionContext, { config, base, path }: ConfigFile): void {\n+function extractConfigs(\n+  ctx: ResolutionContext,\n+  { config, base, path, reference }: ConfigFile,\n+): void {\n   let plugins: PluginWithConfig[] = []\n \n   // Normalize plugins so they share the same shape\n@@ -136,17 +140,17 @@ function extractConfigs(ctx: ResolutionContext, { config, base, path }: ConfigFi\n     if ('__isOptionsFunction' in plugin) {\n       // Happens with `plugin.withOptions()` when no options were passed:\n       // e.g. `require(\""my-plugin\"")` instead of `require(\""my-plugin\"")(options)`\n-      plugins.push(plugin())\n+      plugins.push({ ...plugin(), reference })\n     } else if ('handler' in plugin) {\n       // Happens with `plugin(\u2026)`:\n       // e.g. `require(\""my-plugin\"")`\n       //\n       // or with `plugin.withOptions()` when the user passed options:\n       // e.g. `require(\""my-plugin\"")(options)`\n-      plugins.push(plugin)\n+      plugins.push({ ...plugin, reference })\n     } else {\n       // Just a plain function without using the plugin(\u2026) API\n-      plugins.push({ handler: plugin })\n+      plugins.push({ handler: plugin, reference })\n     }\n   }\n \n@@ -158,7 +162,7 @@ function extractConfigs(ctx: ResolutionContext, { config, base, path }: ConfigFi\n   }\n \n   for (let preset of config.presets ?? []) {\n-    extractConfigs(ctx, { path, base, config: preset })\n+    extractConfigs(ctx, { path, base, config: preset, reference })\n   }\n \n   // Apply configs from plugins\n@@ -166,7 +170,7 @@ function extractConfigs(ctx: ResolutionContext, { config, base, path }: ConfigFi\n     ctx.plugins.push(plugin)\n \n     if (plugin.config) {\n-      extractConfigs(ctx, { path, base, config: plugin.config })\n+      extractConfigs(ctx, { path, base, config: plugin.config, reference: !!plugin.reference })\n     }\n   }\n \n\ndiff --git a/packages/tailwindcss/src/compat/plugin-api.ts b/packages/tailwindcss/src/compat/plugin-api.ts\nindex fb6020f0f013..99c84483c73f 100644\n--- a/packages/tailwindcss/src/compat/plugin-api.ts\n+++ b/packages/tailwindcss/src/compat/plugin-api.ts\n@@ -17,7 +17,13 @@ import * as SelectorParser from './selector-parser'\n \n export type Config = UserConfig\n export type PluginFn = (api: PluginAPI) => void\n-export type PluginWithConfig = { handler: PluginFn; config?: UserConfig }\n+export type PluginWithConfig = { \n+  handler: PluginFn;\n+  config?: UserConfig;\n+  \n+  /** @internal */\n+  reference?: boolean\n+}\n export type PluginWithOptions<T> = {\n   (options?: T): PluginWithConfig\n   __isOptionsFunction: true\n\ndiff --git a/packages/tailwindcss/src/index.ts b/packages/tailwindcss/src/index.ts\nindex 9678cc592020..e8cdbd4a97cf 100644\n--- a/packages/tailwindcss/src/index.ts\n+++ b/packages/tailwindcss/src/index.ts\n@@ -157,7 +157,7 @@ async function parseCss(\n           }\n \n           root = {\n-            base: context.sourceBase ?? context.base,\n+            base: (context.sourceBase as string) ?? (context.base as string),\n             pattern: path.slice(1, -1),\n           }\n         }\n@@ -212,7 +212,7 @@ async function parseCss(\n       ) {\n         throw new Error('`@source` paths must be quoted.')\n       }\n-      globs.push({ base: context.base, pattern: path.slice(1, -1) })\n+      globs.push({ base: context.base as string, pattern: path.slice(1, -1) })\n       replaceWith([])\n       return\n     }\n@@ -364,6 +364,37 @@ async function parseCss(\n           important = true\n         }\n \n+        // Handle `@import \""\u2026\"" reference`\n+        else if (param === 'reference') {\n+          walk(node.nodes, (child, { replaceWith }) => {\n+            if (child.kind !== 'at-rule') {\n+              replaceWith([])\n+              return WalkAction.Skip\n+            }\n+            switch (child.name) {\n+              case '@theme': {\n+                let themeParams = segment(child.params, ' ')\n+                if (!themeParams.includes('reference')) {\n+                  child.params = (child.params === '' ? '' : ' ') + 'reference'\n+                }\n+                return WalkAction.Skip\n+              }\n+              case '@import':\n+              case '@config':\n+              case '@plugin':\n+              case '@variant':\n+              case '@utility': {\n+                return WalkAction.Skip\n+              }\n+\n+              // Other at-rules, like `@media`, `@supports`, or `@layer` should\n+              // be recursively traversed as these might be inserted by the\n+              // `@import` resolution.\n+            }\n+          })\n+          node.nodes = [contextNode({ reference: true }, node.nodes)]\n+        }\n+\n         //\n         else {\n           unknownParams.push(param)\n"", ""test_patch"": ""diff --git a/integrations/vite/svelte.test.ts b/integrations/vite/svelte.test.ts\nindex b0950f9f9cd2..0f7953c63e1c 100644\n--- a/integrations/vite/svelte.test.ts\n+++ b/integrations/vite/svelte.test.ts\n@@ -48,10 +48,7 @@ test(\n           target: document.body,\n         })\n       `,\n-      'src/index.css': css`\n-        @import 'tailwindcss/theme' theme(reference);\n-        @import 'tailwindcss/utilities';\n-      `,\n+      'src/index.css': css`@import 'tailwindcss' reference;`,\n       'src/App.svelte': html`\n         <script>\n           import './index.css'\n\ndiff --git a/integrations/vite/vue.test.ts b/integrations/vite/vue.test.ts\nindex 550f9a523ccf..dec61d808350 100644\n--- a/integrations/vite/vue.test.ts\n+++ b/integrations/vite/vue.test.ts\n@@ -45,15 +45,13 @@ test(\n       `,\n       'src/App.vue': html`\n         <style>\n-          @import 'tailwindcss/utilities';\n-          @import 'tailwindcss/theme' theme(reference);\n+          @import 'tailwindcss' reference;\n           .foo {\n             @apply text-red-500;\n           }\n         </style>\n         <style scoped>\n-          @import 'tailwindcss/utilities';\n-          @import 'tailwindcss/theme' theme(reference);\n+          @import 'tailwindcss' reference;\n           :deep(.bar) {\n             color: red;\n           }\n\ndiff --git a/packages/tailwindcss/src/compat/plugin-api.test.ts b/packages/tailwindcss/src/compat/plugin-api.test.ts\nindex 6a0c0e4bc156..b1c04e655ce6 100644\n--- a/packages/tailwindcss/src/compat/plugin-api.test.ts\n+++ b/packages/tailwindcss/src/compat/plugin-api.test.ts\n@@ -1490,6 +1490,52 @@ describe('theme', async () => {\n   })\n })\n \n+describe('addBase', () => {\n+  test('does not create rules when imported via `@import \""\u2026\"" reference`', async () => {\n+    let input = css`\n+      @tailwind utilities;\n+      @plugin \""outside\"";\n+      @import './inside.css' reference;\n+    `\n+\n+    let compiler = await compile(input, {\n+      loadModule: async (id, base) => {\n+        if (id === 'inside') {\n+          return {\n+            base,\n+            module: plugin(function ({ addBase }) {\n+              addBase({ inside: { color: 'red' } })\n+            }),\n+          }\n+        }\n+        return {\n+          base,\n+          module: plugin(function ({ addBase }) {\n+            addBase({ outside: { color: 'red' } })\n+          }),\n+        }\n+      },\n+      async loadStylesheet() {\n+        return {\n+          content: css`\n+            @plugin \""inside\"";\n+          `,\n+          base: '',\n+        }\n+      },\n+    })\n+\n+    expect(compiler.build([])).toMatchInlineSnapshot(`\n+      \""@layer base {\n+        outside {\n+          color: red;\n+        }\n+      }\n+      \""\n+    `)\n+  })\n+})\n+\n describe('addVariant', () => {\n   test('addVariant with string selector', async () => {\n     let { build } = await compile(\n\ndiff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex 73a26dd6f227..1c4afe2efa93 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -3088,3 +3088,89 @@ it(\""should error when `layer(\u2026)` is used, but it's not the first param\"", async\n     `[Error: \\`layer(\u2026)\\` in an \\`@import\\` should come before any other functions or conditions]`,\n   )\n })\n+\n+describe('`@import \""\u2026\"" reference`', () => {\n+  test('recursively removes styles', async () => {\n+    let loadStylesheet = async (id: string, base: string) => {\n+      if (id === './foo/baz.css') {\n+        return {\n+          content: css`\n+            .foo {\n+              color: red;\n+            }\n+            @utility foo {\n+              color: red;\n+            }\n+            @theme {\n+              --breakpoint-md: 768px;\n+            }\n+            @variant hocus (&:hover, &:focus);\n+          `,\n+          base: '/root/foo',\n+        }\n+      }\n+      return {\n+        content: css`\n+          @import './foo/baz.css';\n+        `,\n+        base: '/root/foo',\n+      }\n+    }\n+\n+    await expect(\n+      compileCss(\n+        `\n+          @import './foo/bar.css' reference;\n+\n+          .bar {\n+            @apply md:hocus:foo;\n+          }\n+        `,\n+        [],\n+        { loadStylesheet },\n+      ),\n+    ).resolves.toMatchInlineSnapshot(`\n+      \""@media (width >= 768px) {\n+        .bar:hover, .bar:focus {\n+          color: red;\n+        }\n+      }\""\n+    `)\n+  })\n+\n+  test('removes styles when the import resolver was handled outside of Tailwind CSS', async () => {\n+    await expect(\n+      compileCss(\n+        `\n+          @media reference {\n+            @layer theme {\n+              @theme {\n+                --breakpoint-md: 48rem;\n+              }\n+              .foo {\n+                color: red;\n+              }\n+            }\n+            @utility foo {\n+              color: red;\n+            }\n+            @variant hocus (&:hover, &:focus);\n+          }\n+\n+          .bar {\n+            @apply md:hocus:foo;\n+          }\n+        `,\n+        [],\n+      ),\n+    ).resolves.toMatchInlineSnapshot(`\n+      \""@layer theme;\n+\n+      @media (width >= 48rem) {\n+        .bar:hover, .bar:focus {\n+          color: red;\n+        }\n+      }\""\n+    `)\n+  })\n+})\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15216"", ""pr_id"": 15216, ""issue_id"": 15196, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Transitions with active pseudo class increases unexpected margin in Safari when combined with a font size class\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.0.0@beta-2\r\n\r\n**What browser are you using?**\r\n\r\nSafari\r\n\r\n**What operating system are you using?**\r\n\r\niOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/9WNabyZoZg\r\n\r\n**Describe your issue**\r\n\r\nWhen pressing and holding onto a button that transitions from normal styles to `active:` pseudo-class styles with a font size class (like `text-xl`) in Safari, it creates an unexpected vertical margin increase, and if padding styles are included, it increases padding too."", ""issue_word_count"": 134, ""test_files_count"": 2, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/theme.css""], ""pr_changed_test_files"": [""packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/src/__snapshots__/index.test.ts.snap""], ""base_commit"": ""bfcc1447984e81a1294ca2c49cb0cc9ccee02a3d"", ""head_commit"": ""e9d9122ba602c280897467d199c091873ecdb0f2"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15216"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15216"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-27T16:39:05.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 1d378084a13b..b265e7348210 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -15,11 +15,13 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure `--spacing-*` variables take precedence over `--container-*` variables ([#15180](https://github.com/tailwindlabs/tailwindcss/pull/15180))\n - Fix scanning classes delimited by tab characters ([#15169](https://github.com/tailwindlabs/tailwindcss/pull/15169))\n - Ensure opacity modifiers and semi-transparent gradients render correctly by default in Safari ([#15201](https://github.com/tailwindlabs/tailwindcss/pull/15201))\n+- Fix element size thrashing when transitioning gradients on elements with a defined font-size in Safari ([#15216](https://github.com/tailwindlabs/tailwindcss/pull/15216))\n \n ### Changed\n \n - Interpolate gradients using OKLAB instead of OKLCH by default ([#15201](https://github.com/tailwindlabs/tailwindcss/pull/15201))\n - Error when `layer(\u2026)` in `@import` is not first in the list of functions/conditions ([#15109](https://github.com/tailwindlabs/tailwindcss/pull/15109))\n+- Use unitless line-height values for font-size variables in default theme ([#15216](https://github.com/tailwindlabs/tailwindcss/pull/15216))\n \n ## [4.0.0-beta.2] - 2024-11-22\n \n\ndiff --git a/packages/tailwindcss/theme.css b/packages/tailwindcss/theme.css\nindex c46f037f2e4c..7ae95968f12e 100644\n--- a/packages/tailwindcss/theme.css\n+++ b/packages/tailwindcss/theme.css\n@@ -296,21 +296,21 @@\n   --container-prose: 65ch;\n \n   --text-xs: 0.75rem;\n-  --text-xs--line-height: 1rem;\n+  --text-xs--line-height: calc(1 / 0.75);\n   --text-sm: 0.875rem;\n-  --text-sm--line-height: 1.25rem;\n+  --text-sm--line-height: calc(1.25 / 0.875);\n   --text-base: 1rem;\n-  --text-base--line-height: 1.5rem;\n+  --text-base--line-height: calc(1.5 / 1);\n   --text-lg: 1.125rem;\n-  --text-lg--line-height: 1.75rem;\n+  --text-lg--line-height: calc(1.75 / 1.125);\n   --text-xl: 1.25rem;\n-  --text-xl--line-height: 1.75rem;\n+  --text-xl--line-height: calc(1.75 / 1.25);\n   --text-2xl: 1.5rem;\n-  --text-2xl--line-height: 2rem;\n+  --text-2xl--line-height: calc(2 / 1.5);\n   --text-3xl: 1.875rem;\n-  --text-3xl--line-height: 2.25rem;\n+  --text-3xl--line-height: calc(2.25 / 1.875);\n   --text-4xl: 2.25rem;\n-  --text-4xl--line-height: 2.5rem;\n+  --text-4xl--line-height: calc(2.5 / 2.25);\n   --text-5xl: 3rem;\n   --text-5xl--line-height: 1;\n   --text-6xl: 3.75rem;\n"", ""test_patch"": ""diff --git a/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap b/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\nindex 4a2c1032170d..f5bed31afce5 100644\n--- a/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\n+++ b/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\n@@ -271,21 +271,21 @@ exports[`\\`@import 'tailwindcss'\\` is replaced with the generated CSS 1`] = `\n     --container-7xl: 80rem;\n     --container-prose: 65ch;\n     --text-xs: .75rem;\n-    --text-xs--line-height: 1rem;\n+    --text-xs--line-height: calc(1 / .75);\n     --text-sm: .875rem;\n-    --text-sm--line-height: 1.25rem;\n+    --text-sm--line-height: calc(1.25 / .875);\n     --text-base: 1rem;\n-    --text-base--line-height: 1.5rem;\n+    --text-base--line-height: calc(1.5 / 1);\n     --text-lg: 1.125rem;\n-    --text-lg--line-height: 1.75rem;\n+    --text-lg--line-height: calc(1.75 / 1.125);\n     --text-xl: 1.25rem;\n-    --text-xl--line-height: 1.75rem;\n+    --text-xl--line-height: calc(1.75 / 1.25);\n     --text-2xl: 1.5rem;\n-    --text-2xl--line-height: 2rem;\n+    --text-2xl--line-height: calc(2 / 1.5);\n     --text-3xl: 1.875rem;\n-    --text-3xl--line-height: 2.25rem;\n+    --text-3xl--line-height: calc(2.25 / 1.875);\n     --text-4xl: 2.25rem;\n-    --text-4xl--line-height: 2.5rem;\n+    --text-4xl--line-height: calc(2.5 / 2.25);\n     --text-5xl: 3rem;\n     --text-5xl--line-height: 1;\n     --text-6xl: 3.75rem;\n\ndiff --git a/packages/tailwindcss/src/__snapshots__/index.test.ts.snap b/packages/tailwindcss/src/__snapshots__/index.test.ts.snap\nindex 29d9523a445d..78e3eee55b53 100644\n--- a/packages/tailwindcss/src/__snapshots__/index.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/index.test.ts.snap\n@@ -270,21 +270,21 @@ exports[`compiling CSS > \\`@tailwind utilities\\` is replaced by utilities using\n   --container-7xl: 80rem;\n   --container-prose: 65ch;\n   --text-xs: .75rem;\n-  --text-xs--line-height: 1rem;\n+  --text-xs--line-height: calc(1 / .75);\n   --text-sm: .875rem;\n-  --text-sm--line-height: 1.25rem;\n+  --text-sm--line-height: calc(1.25 / .875);\n   --text-base: 1rem;\n-  --text-base--line-height: 1.5rem;\n+  --text-base--line-height: calc(1.5 / 1);\n   --text-lg: 1.125rem;\n-  --text-lg--line-height: 1.75rem;\n+  --text-lg--line-height: calc(1.75 / 1.125);\n   --text-xl: 1.25rem;\n-  --text-xl--line-height: 1.75rem;\n+  --text-xl--line-height: calc(1.75 / 1.25);\n   --text-2xl: 1.5rem;\n-  --text-2xl--line-height: 2rem;\n+  --text-2xl--line-height: calc(2 / 1.5);\n   --text-3xl: 1.875rem;\n-  --text-3xl--line-height: 2.25rem;\n+  --text-3xl--line-height: calc(2.25 / 1.875);\n   --text-4xl: 2.25rem;\n-  --text-4xl--line-height: 2.5rem;\n+  --text-4xl--line-height: calc(2.5 / 2.25);\n   --text-5xl: 3rem;\n   --text-5xl--line-height: 1;\n   --text-6xl: 3.75rem;\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15208"", ""pr_id"": 15208, ""issue_id"": 15193, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Upgrade does not handle prefix for group `tw-group` \u2192 `tw:group`\nVersion: v3.4.14 \r\nBuild tools: Bun\r\nReproduction URL: https://github.com/sajoku/tailwind-4-upgrade-test\r\n\r\nIt looks like the `group` attribute is not being targeted by the upgrade script.\r\nWhen running the `npx @tailwindcss/upgrade@next` command it will update all the correct things except for the `tw-group` definition. \r\n\r\nInstructions on the reproduction repository:\r\n\r\n1. Clone \r\n2. Run `npx @tailwindcss/upgrade@next`\r\n\r\nBefore CSS:\r\n\r\n``` css\r\n@config 'tailwind.config.js';\r\n\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n@tailwind screens;\r\n\r\n\r\n\r\nh1 {\r\n  @apply tw-bg-black tw-bg-red-50;\r\n}\r\n\r\ndiv {\r\n  @apply tw-group;\r\n}\r\n\r\nspan {\r\n  @apply tw-text-base tw-font-semibold tw-text-gray-900 tw-text-left tw-group;\r\n}\r\n```\r\n\r\nAfter CSS:\r\n\r\n``` css\r\n@import 'tailwindcss' prefix(tw);\r\n\r\n@variant dark (&:is(.dark *));\r\n\r\n/*\r\n  The default border color has changed to `currentColor` in Tailwind CSS v4,\r\n  so we've added these compatibility styles to make sure everything still\r\n  looks the same as it did with Tailwind CSS v3.\r\n\r\n  If we ever want to remove these styles, we need to add an explicit border\r\n  color utility to any element that depends on these defaults.\r\n*/\r\n@layer base {\r\n  *,\r\n  ::after,\r\n  ::before,\r\n  ::backdrop,\r\n  ::file-selector-button {\r\n    border-color: var(--color-gray-200, currentColor);\r\n  }\r\n}\r\n\r\nh1 {\r\n  @apply tw:bg-black tw:bg-red-50;\r\n}\r\n\r\ndiv {\r\n  @apply tw-group;\r\n}\r\n\r\nspan {\r\n  @apply tw:text-base tw:font-semibold tw:text-gray-900 tw:text-left tw-group;\r\n}\r\n```\r\n\r\n\r\nAm I correct in assuming that the `tw-group` should be migrated to `tw:group`? "", ""issue_word_count"": 252, ""test_files_count"": 2, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/upgrade/index.test.ts"", ""packages/@tailwindcss-upgrade/src/template/codemods/prefix.test.ts"", ""packages/@tailwindcss-upgrade/src/template/codemods/prefix.ts"", ""packages/@tailwindcss-upgrade/src/template/codemods/simple-legacy-classes.ts""], ""pr_changed_test_files"": [""integrations/upgrade/index.test.ts"", ""packages/@tailwindcss-upgrade/src/template/codemods/prefix.test.ts""], ""base_commit"": ""bfcc1447984e81a1294ca2c49cb0cc9ccee02a3d"", ""head_commit"": ""d8370681dbb26390b832d960891728b3372afae2"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15208"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15208"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-27T16:34:27.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 76dc831422f6..6171a89895e8 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -7,6 +7,10 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ## [Unreleased]\n \n+### Added\n+\n+- _Upgrade (experimental)_: Migrate prefixes for `.group` and `.peer` classes ([#15208](https://github.com/tailwindlabs/tailwindcss/pull/15208))\n+\n ### Fixed\n \n - Ensure any necessary vendor prefixes are generated for iOS Safari, Firefox, and Chrome ([#15166](https://github.com/tailwindlabs/tailwindcss/pull/15166))\n\ndiff --git a/packages/@tailwindcss-upgrade/src/template/codemods/prefix.ts b/packages/@tailwindcss-upgrade/src/template/codemods/prefix.ts\nindex 10a8bb6ed720..47a377239a21 100644\n--- a/packages/@tailwindcss-upgrade/src/template/codemods/prefix.ts\n+++ b/packages/@tailwindcss-upgrade/src/template/codemods/prefix.ts\n@@ -4,6 +4,8 @@ import type { DesignSystem } from '../../../../tailwindcss/src/design-system'\n import { segment } from '../../../../tailwindcss/src/utils/segment'\n import { printCandidate } from '../candidates'\n \n+let seenDesignSystems = new WeakSet<DesignSystem>()\n+\n export function prefix(\n   designSystem: DesignSystem,\n   userConfig: Config,\n@@ -11,6 +13,12 @@ export function prefix(\n ): string {\n   if (!designSystem.theme.prefix) return rawCandidate\n \n+  if (!seenDesignSystems.has(designSystem)) {\n+    designSystem.utilities.functional('group', () => null)\n+    designSystem.utilities.functional('peer', () => null)\n+    seenDesignSystems.add(designSystem)\n+  }\n+\n   let v3Base = extractV3Base(designSystem, userConfig, rawCandidate)\n \n   if (!v3Base) return rawCandidate\n\ndiff --git a/packages/@tailwindcss-upgrade/src/template/codemods/simple-legacy-classes.ts b/packages/@tailwindcss-upgrade/src/template/codemods/simple-legacy-classes.ts\nindex c212e032eac1..a2c2b77f11f4 100644\n--- a/packages/@tailwindcss-upgrade/src/template/codemods/simple-legacy-classes.ts\n+++ b/packages/@tailwindcss-upgrade/src/template/codemods/simple-legacy-classes.ts\n@@ -19,7 +19,7 @@ const LEGACY_CLASS_MAP = {\n   'outline-none': 'outline-hidden',\n }\n \n-const SEEDED = new WeakSet<DesignSystem>()\n+let seenDesignSystems = new WeakSet<DesignSystem>()\n \n export function simpleLegacyClasses(\n   designSystem: DesignSystem,\n@@ -27,11 +27,11 @@ export function simpleLegacyClasses(\n   rawCandidate: string,\n ): string {\n   // Prepare design system with the unknown legacy classes\n-  if (!SEEDED.has(designSystem)) {\n+  if (!seenDesignSystems.has(designSystem)) {\n     for (let old in LEGACY_CLASS_MAP) {\n       designSystem.utilities.static(old, () => [])\n     }\n-    SEEDED.add(designSystem)\n+    seenDesignSystems.add(designSystem)\n   }\n \n   for (let candidate of designSystem.parseCandidate(rawCandidate)) {\n"", ""test_patch"": ""diff --git a/integrations/upgrade/index.test.ts b/integrations/upgrade/index.test.ts\nindex a65ee6092904..cc8016080d03 100644\n--- a/integrations/upgrade/index.test.ts\n+++ b/integrations/upgrade/index.test.ts\n@@ -187,6 +187,9 @@ test(\n         <div\n           class=\""!tw__flex sm:!tw__block tw__bg-gradient-to-t flex [color:red] group-[]:tw__flex\""\n         ></div>\n+        <div\n+          class=\""tw__group tw__group/foo tw__peer tw__peer/foo group-hover:tw__flex group-hover/foo:tw__flex peer-hover:tw__flex peer-hover/foo:tw__flex\""\n+        ></div>\n       `,\n       'src/input.css': css`\n         @tailwind base;\n@@ -208,6 +211,9 @@ test(\n       <div\n         class=\""tw:flex! tw:sm:block! tw:bg-linear-to-t flex tw:[color:red] tw:in-[.tw\\\\:group]:flex\""\n       ></div>\n+      <div\n+        class=\""tw:group tw:group/foo tw:peer tw:peer/foo tw:group-hover:flex tw:group-hover/foo:flex tw:peer-hover:flex tw:peer-hover/foo:flex\""\n+      ></div>\n \n       --- ./src/input.css ---\n       @import 'tailwindcss' prefix(tw);\n\ndiff --git a/packages/@tailwindcss-upgrade/src/template/codemods/prefix.test.ts b/packages/@tailwindcss-upgrade/src/template/codemods/prefix.test.ts\nindex b50dbf64bbea..a7ad6a03ec75 100644\n--- a/packages/@tailwindcss-upgrade/src/template/codemods/prefix.test.ts\n+++ b/packages/@tailwindcss-upgrade/src/template/codemods/prefix.test.ts\n@@ -20,6 +20,12 @@ describe('for projects with configured prefix', () => {\n \n     // Adds prefix to arbitrary candidates\n     ['[color:red]', 'tw:[color:red]'],\n+\n+    // `.group` and `.peer` classes\n+    ['tw-group', 'tw:group'],\n+    ['tw-group/foo', 'tw:group/foo'],\n+    ['tw-peer', 'tw:peer'],\n+    ['tw-peer/foo', 'tw:peer/foo'],\n   ])('%s => %s', async (candidate, result) => {\n     let designSystem = await __unstable__loadDesignSystem('@import \""tailwindcss\"" prefix(tw);', {\n       base: __dirname,\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15201"", ""pr_id"": 15201, ""issue_id"": 14955, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Use Oklab for gradient interpolation\nGradient interpolation (and any future `color-mix` utilities) should be using the Oklab colour space.\r\n\r\nhttps://play.tailwindcss.com/B5DPkOnhjl\r\n\r\nYou'll generally want the uniform colour space (Oklab) for mixing/interpolating between colours, and the cylindrical colour space (Oklch) for modifying the lightness/chroma/hue of individual colours.\r\n\r\n<img src=\""https://github.com/user-attachments/assets/1a844858-8280-46a1-8d74-0185f5de9bee\"" width=\""414\"" height=\""542\"">"", ""issue_word_count"": 71, ""test_files_count"": 8, ""non_test_files_count"": 4, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/preflight.css"", ""packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap"", ""packages/tailwindcss/src/compat/legacy-utilities.test.ts"", ""packages/tailwindcss/src/compat/legacy-utilities.ts"", ""packages/tailwindcss/src/compat/plugin-api.test.ts"", ""packages/tailwindcss/src/css-functions.test.ts"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts"", ""packages/tailwindcss/tests/ui.spec.ts""], ""pr_changed_test_files"": [""packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap"", ""packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap"", ""packages/tailwindcss/src/compat/legacy-utilities.test.ts"", ""packages/tailwindcss/src/compat/plugin-api.test.ts"", ""packages/tailwindcss/src/css-functions.test.ts"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/tests/ui.spec.ts""], ""base_commit"": ""4bdc724a225c79e8eda2db369bd96ecf2b76d11b"", ""head_commit"": ""af5bf4ad21638ac407fa4a38185b5313c43fd78f"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15201"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15201"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-27T11:18:31.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 76dc831422f6..f0f950a884cc 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -14,6 +14,11 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure 3D transforms render correctly in Safari ([#15179](https://github.com/tailwindlabs/tailwindcss/pull/15179))\n - Ensure `--spacing-*` variables take precedence over `--container-*` variables ([#15180](https://github.com/tailwindlabs/tailwindcss/pull/15180))\n - Fix scanning classes delimited by tab characters ([#15169](https://github.com/tailwindlabs/tailwindcss/pull/15169))\n+- Ensure opacity modifiers and semi-transparent gradients render correctly by default in Safari ([#15201](https://github.com/tailwindlabs/tailwindcss/pull/15201))\n+\n+### Changed\n+\n+- Interpolate gradients using OKLAB instead of OKLCH by default ([#15201](https://github.com/tailwindlabs/tailwindcss/pull/15201))\n \n ## [4.0.0-beta.2] - 2024-11-22\n \n\ndiff --git a/packages/tailwindcss/preflight.css b/packages/tailwindcss/preflight.css\nindex f8fe93f22368..a307c6d605ca 100644\n--- a/packages/tailwindcss/preflight.css\n+++ b/packages/tailwindcss/preflight.css\n@@ -290,7 +290,7 @@ textarea,\n \n ::placeholder {\n   opacity: 1; /* 1 */\n-  color: color-mix(in oklch, currentColor 50%, transparent); /* 2 */\n+  color: color-mix(in oklab, currentColor 50%, transparent); /* 2 */\n }\n \n /*\n\ndiff --git a/packages/tailwindcss/src/compat/legacy-utilities.ts b/packages/tailwindcss/src/compat/legacy-utilities.ts\nindex 5be6d303c239..d86b1770ab6e 100644\n--- a/packages/tailwindcss/src/compat/legacy-utilities.ts\n+++ b/packages/tailwindcss/src/compat/legacy-utilities.ts\n@@ -14,7 +14,7 @@ export function registerLegacyUtilities(designSystem: DesignSystem) {\n     ['tl', 'top left'],\n   ]) {\n     designSystem.utilities.static(`bg-gradient-to-${value}`, () => [\n-      decl('--tw-gradient-position', `to ${direction} in oklch,`),\n+      decl('--tw-gradient-position', `to ${direction} in oklab,`),\n       decl('background-image', `linear-gradient(var(--tw-gradient-stops))`),\n     ])\n   }\n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 5300967e2b61..9893bf0ae178 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -118,7 +118,7 @@ export function withAlpha(value: string, alpha: string): string {\n     alpha = `${alphaAsNumber * 100}%`\n   }\n \n-  return `color-mix(in oklch, ${value} ${alpha}, transparent)`\n+  return `color-mix(in oklab, ${value} ${alpha}, transparent)`\n }\n \n /**\n@@ -2320,7 +2320,7 @@ export function createUtilities(theme: Theme) {\n     ])\n \n     function resolveInterpolationModifier(modifier: CandidateModifier | null) {\n-      let interpolationMethod = 'in oklch'\n+      let interpolationMethod = 'in oklab'\n \n       if (modifier?.kind === 'named') {\n         switch (modifier.value) {\n"", ""test_patch"": ""diff --git a/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap b/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\nindex 44635110668a..4a2c1032170d 100644\n--- a/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\n+++ b/packages/@tailwindcss-postcss/src/__snapshots__/index.test.ts.snap\n@@ -521,7 +521,7 @@ exports[`\\`@import 'tailwindcss'\\` is replaced with the generated CSS 1`] = `\n \n   ::placeholder {\n     opacity: 1;\n-    color: color-mix(in oklch, currentColor 50%, transparent);\n+    color: color-mix(in oklab, currentColor 50%, transparent);\n   }\n \n   textarea {\n@@ -615,7 +615,7 @@ exports[`\\`@import 'tailwindcss'\\` is replaced with the generated CSS 1`] = `\n   }\n \n   .text-black\\\\/50 {\n-    color: color-mix(in oklch, var(--color-black) 50%, transparent);\n+    color: color-mix(in oklab, var(--color-black) 50%, transparent);\n   }\n \n   .underline {\n\ndiff --git a/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap b/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap\nindex 721a5d2976a4..1b51e5fc03e9 100644\n--- a/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/utilities.test.ts.snap\n@@ -63,7 +63,7 @@ exports[`border-* 1`] = `\n }\n \n .border-\\\\[\\\\#0088cc\\\\]\\\\/50 {\n-  border-color: oklch(59.9824% .14119 241.555 / .5);\n+  border-color: oklab(59.9824% -.0672516 -.124144 / .5);\n }\n \n .border-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -71,7 +71,7 @@ exports[`border-* 1`] = `\n }\n \n .border-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -79,7 +79,7 @@ exports[`border-* 1`] = `\n }\n \n .border-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-current {\n@@ -87,7 +87,7 @@ exports[`border-* 1`] = `\n }\n \n .border-current\\\\/50 {\n-  border-color: color-mix(in oklch, currentColor 50%, transparent);\n+  border-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-inherit {\n@@ -99,19 +99,19 @@ exports[`border-* 1`] = `\n }\n \n .border-red-500\\\\/2\\\\.5 {\n-  border-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+  border-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n }\n \n .border-red-500\\\\/2\\\\.25 {\n-  border-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+  border-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n }\n \n .border-red-500\\\\/2\\\\.75 {\n-  border-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+  border-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n }\n \n .border-red-500\\\\/50 {\n-  border-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+  border-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n }\n \n .border-transparent {\n@@ -196,7 +196,7 @@ exports[`border-b-* 1`] = `\n }\n \n .border-b-\\\\[\\\\#0088cc\\\\]\\\\/50 {\n-  border-bottom-color: oklch(59.9824% .14119 241.555 / .5);\n+  border-bottom-color: oklab(59.9824% -.0672516 -.124144 / .5);\n }\n \n .border-b-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -204,7 +204,7 @@ exports[`border-b-* 1`] = `\n }\n \n .border-b-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-bottom-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-bottom-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-b-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -212,7 +212,7 @@ exports[`border-b-* 1`] = `\n }\n \n .border-b-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-bottom-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-bottom-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-b-current {\n@@ -220,7 +220,7 @@ exports[`border-b-* 1`] = `\n }\n \n .border-b-current\\\\/50 {\n-  border-bottom-color: color-mix(in oklch, currentColor 50%, transparent);\n+  border-bottom-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-b-inherit {\n@@ -232,19 +232,19 @@ exports[`border-b-* 1`] = `\n }\n \n .border-b-red-500\\\\/2\\\\.5 {\n-  border-bottom-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+  border-bottom-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n }\n \n .border-b-red-500\\\\/2\\\\.25 {\n-  border-bottom-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+  border-bottom-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n }\n \n .border-b-red-500\\\\/2\\\\.75 {\n-  border-bottom-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+  border-bottom-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n }\n \n .border-b-red-500\\\\/50 {\n-  border-bottom-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+  border-bottom-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n }\n \n .border-b-transparent {\n@@ -329,7 +329,7 @@ exports[`border-e-* 1`] = `\n }\n \n .border-e-\\\\[\\\\#0088cc\\\\]\\\\/50 {\n-  border-inline-end-color: oklch(59.9824% .14119 241.555 / .5);\n+  border-inline-end-color: oklab(59.9824% -.0672516 -.124144 / .5);\n }\n \n .border-e-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -337,7 +337,7 @@ exports[`border-e-* 1`] = `\n }\n \n .border-e-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-inline-end-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-inline-end-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-e-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -345,7 +345,7 @@ exports[`border-e-* 1`] = `\n }\n \n .border-e-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-inline-end-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-inline-end-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-e-current {\n@@ -353,7 +353,7 @@ exports[`border-e-* 1`] = `\n }\n \n .border-e-current\\\\/50 {\n-  border-inline-end-color: color-mix(in oklch, currentColor 50%, transparent);\n+  border-inline-end-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-e-inherit {\n@@ -365,19 +365,19 @@ exports[`border-e-* 1`] = `\n }\n \n .border-e-red-500\\\\/2\\\\.5 {\n-  border-inline-end-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+  border-inline-end-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n }\n \n .border-e-red-500\\\\/2\\\\.25 {\n-  border-inline-end-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+  border-inline-end-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n }\n \n .border-e-red-500\\\\/2\\\\.75 {\n-  border-inline-end-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+  border-inline-end-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n }\n \n .border-e-red-500\\\\/50 {\n-  border-inline-end-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+  border-inline-end-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n }\n \n .border-e-transparent {\n@@ -462,7 +462,7 @@ exports[`border-l-* 1`] = `\n }\n \n .border-l-\\\\[\\\\#0088cc\\\\]\\\\/50 {\n-  border-left-color: oklch(59.9824% .14119 241.555 / .5);\n+  border-left-color: oklab(59.9824% -.0672516 -.124144 / .5);\n }\n \n .border-l-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -470,7 +470,7 @@ exports[`border-l-* 1`] = `\n }\n \n .border-l-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-left-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-left-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-l-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -478,7 +478,7 @@ exports[`border-l-* 1`] = `\n }\n \n .border-l-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-left-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-left-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-l-current {\n@@ -486,7 +486,7 @@ exports[`border-l-* 1`] = `\n }\n \n .border-l-current\\\\/50 {\n-  border-left-color: color-mix(in oklch, currentColor 50%, transparent);\n+  border-left-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-l-inherit {\n@@ -498,19 +498,19 @@ exports[`border-l-* 1`] = `\n }\n \n .border-l-red-500\\\\/2\\\\.5 {\n-  border-left-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+  border-left-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n }\n \n .border-l-red-500\\\\/2\\\\.25 {\n-  border-left-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+  border-left-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n }\n \n .border-l-red-500\\\\/2\\\\.75 {\n-  border-left-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+  border-left-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n }\n \n .border-l-red-500\\\\/50 {\n-  border-left-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+  border-left-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n }\n \n .border-l-transparent {\n@@ -595,7 +595,7 @@ exports[`border-r-* 1`] = `\n }\n \n .border-r-\\\\[\\\\#0088cc\\\\]\\\\/50 {\n-  border-right-color: oklch(59.9824% .14119 241.555 / .5);\n+  border-right-color: oklab(59.9824% -.0672516 -.124144 / .5);\n }\n \n .border-r-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -603,7 +603,7 @@ exports[`border-r-* 1`] = `\n }\n \n .border-r-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-right-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-right-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-r-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -611,7 +611,7 @@ exports[`border-r-* 1`] = `\n }\n \n .border-r-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-right-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-right-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-r-current {\n@@ -619,7 +619,7 @@ exports[`border-r-* 1`] = `\n }\n \n .border-r-current\\\\/50 {\n-  border-right-color: color-mix(in oklch, currentColor 50%, transparent);\n+  border-right-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-r-inherit {\n@@ -631,19 +631,19 @@ exports[`border-r-* 1`] = `\n }\n \n .border-r-red-500\\\\/2\\\\.5 {\n-  border-right-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+  border-right-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n }\n \n .border-r-red-500\\\\/2\\\\.25 {\n-  border-right-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+  border-right-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n }\n \n .border-r-red-500\\\\/2\\\\.75 {\n-  border-right-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+  border-right-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n }\n \n .border-r-red-500\\\\/50 {\n-  border-right-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+  border-right-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n }\n \n .border-r-transparent {\n@@ -728,7 +728,7 @@ exports[`border-s-* 1`] = `\n }\n \n .border-s-\\\\[\\\\#0088cc\\\\]\\\\/50 {\n-  border-inline-start-color: oklch(59.9824% .14119 241.555 / .5);\n+  border-inline-start-color: oklab(59.9824% -.0672516 -.124144 / .5);\n }\n \n .border-s-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -736,7 +736,7 @@ exports[`border-s-* 1`] = `\n }\n \n .border-s-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-inline-start-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-inline-start-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-s-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -744,7 +744,7 @@ exports[`border-s-* 1`] = `\n }\n \n .border-s-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-inline-start-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-inline-start-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-s-current {\n@@ -752,7 +752,7 @@ exports[`border-s-* 1`] = `\n }\n \n .border-s-current\\\\/50 {\n-  border-inline-start-color: color-mix(in oklch, currentColor 50%, transparent);\n+  border-inline-start-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-s-inherit {\n@@ -764,19 +764,19 @@ exports[`border-s-* 1`] = `\n }\n \n .border-s-red-500\\\\/2\\\\.5 {\n-  border-inline-start-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+  border-inline-start-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n }\n \n .border-s-red-500\\\\/2\\\\.25 {\n-  border-inline-start-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+  border-inline-start-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n }\n \n .border-s-red-500\\\\/2\\\\.75 {\n-  border-inline-start-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+  border-inline-start-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n }\n \n .border-s-red-500\\\\/50 {\n-  border-inline-start-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+  border-inline-start-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n }\n \n .border-s-transparent {\n@@ -861,7 +861,7 @@ exports[`border-t-* 1`] = `\n }\n \n .border-t-\\\\[\\\\#0088cc\\\\]\\\\/50 {\n-  border-top-color: oklch(59.9824% .14119 241.555 / .5);\n+  border-top-color: oklab(59.9824% -.0672516 -.124144 / .5);\n }\n \n .border-t-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -869,7 +869,7 @@ exports[`border-t-* 1`] = `\n }\n \n .border-t-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-top-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-top-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-t-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -877,7 +877,7 @@ exports[`border-t-* 1`] = `\n }\n \n .border-t-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-top-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-top-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-t-current {\n@@ -885,7 +885,7 @@ exports[`border-t-* 1`] = `\n }\n \n .border-t-current\\\\/50 {\n-  border-top-color: color-mix(in oklch, currentColor 50%, transparent);\n+  border-top-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-t-inherit {\n@@ -897,19 +897,19 @@ exports[`border-t-* 1`] = `\n }\n \n .border-t-red-500\\\\/2\\\\.5 {\n-  border-top-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+  border-top-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n }\n \n .border-t-red-500\\\\/2\\\\.25 {\n-  border-top-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+  border-top-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n }\n \n .border-t-red-500\\\\/2\\\\.75 {\n-  border-top-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+  border-top-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n }\n \n .border-t-red-500\\\\/50 {\n-  border-top-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+  border-top-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n }\n \n .border-t-transparent {\n@@ -994,7 +994,7 @@ exports[`border-x-* 1`] = `\n }\n \n .border-x-\\\\[\\\\#0088cc\\\\]\\\\/50 {\n-  border-inline-color: oklch(59.9824% .14119 241.555 / .5);\n+  border-inline-color: oklab(59.9824% -.0672516 -.124144 / .5);\n }\n \n .border-x-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -1002,7 +1002,7 @@ exports[`border-x-* 1`] = `\n }\n \n .border-x-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-inline-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-inline-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-x-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -1010,7 +1010,7 @@ exports[`border-x-* 1`] = `\n }\n \n .border-x-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-inline-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-inline-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-x-current {\n@@ -1018,7 +1018,7 @@ exports[`border-x-* 1`] = `\n }\n \n .border-x-current\\\\/50 {\n-  border-inline-color: color-mix(in oklch, currentColor 50%, transparent);\n+  border-inline-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-x-inherit {\n@@ -1030,19 +1030,19 @@ exports[`border-x-* 1`] = `\n }\n \n .border-x-red-500\\\\/2\\\\.5 {\n-  border-inline-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+  border-inline-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n }\n \n .border-x-red-500\\\\/2\\\\.25 {\n-  border-inline-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+  border-inline-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n }\n \n .border-x-red-500\\\\/2\\\\.75 {\n-  border-inline-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+  border-inline-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n }\n \n .border-x-red-500\\\\/50 {\n-  border-inline-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+  border-inline-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n }\n \n .border-x-transparent {\n@@ -1127,7 +1127,7 @@ exports[`border-y-* 1`] = `\n }\n \n .border-y-\\\\[\\\\#0088cc\\\\]\\\\/50 {\n-  border-block-color: oklch(59.9824% .14119 241.555 / .5);\n+  border-block-color: oklab(59.9824% -.0672516 -.124144 / .5);\n }\n \n .border-y-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -1135,7 +1135,7 @@ exports[`border-y-* 1`] = `\n }\n \n .border-y-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-block-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-block-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-y-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -1143,7 +1143,7 @@ exports[`border-y-* 1`] = `\n }\n \n .border-y-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-  border-block-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+  border-block-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n }\n \n .border-y-current {\n@@ -1151,7 +1151,7 @@ exports[`border-y-* 1`] = `\n }\n \n .border-y-current\\\\/50 {\n-  border-block-color: color-mix(in oklch, currentColor 50%, transparent);\n+  border-block-color: color-mix(in oklab, currentColor 50%, transparent);\n }\n \n .border-y-inherit {\n@@ -1163,19 +1163,19 @@ exports[`border-y-* 1`] = `\n }\n \n .border-y-red-500\\\\/2\\\\.5 {\n-  border-block-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+  border-block-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n }\n \n .border-y-red-500\\\\/2\\\\.25 {\n-  border-block-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+  border-block-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n }\n \n .border-y-red-500\\\\/2\\\\.75 {\n-  border-block-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+  border-block-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n }\n \n .border-y-red-500\\\\/50 {\n-  border-block-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+  border-block-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n }\n \n .border-y-transparent {\n\ndiff --git a/packages/tailwindcss/src/compat/legacy-utilities.test.ts b/packages/tailwindcss/src/compat/legacy-utilities.test.ts\nindex 3c8e9a543b33..6db8b6df48cf 100644\n--- a/packages/tailwindcss/src/compat/legacy-utilities.test.ts\n+++ b/packages/tailwindcss/src/compat/legacy-utilities.test.ts\n@@ -22,42 +22,42 @@ test('bg-gradient-*', async () => {\n     ),\n   ).toMatchInlineSnapshot(`\n     \"".bg-gradient-to-b {\n-      --tw-gradient-position: to bottom in oklch, ;\n+      --tw-gradient-position: to bottom in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     .bg-gradient-to-bl {\n-      --tw-gradient-position: to bottom left in oklch, ;\n+      --tw-gradient-position: to bottom left in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     .bg-gradient-to-br {\n-      --tw-gradient-position: to bottom right in oklch, ;\n+      --tw-gradient-position: to bottom right in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     .bg-gradient-to-l {\n-      --tw-gradient-position: to left in oklch, ;\n+      --tw-gradient-position: to left in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     .bg-gradient-to-r {\n-      --tw-gradient-position: to right in oklch, ;\n+      --tw-gradient-position: to right in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     .bg-gradient-to-t {\n-      --tw-gradient-position: to top in oklch, ;\n+      --tw-gradient-position: to top in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     .bg-gradient-to-tl {\n-      --tw-gradient-position: to top left in oklch, ;\n+      --tw-gradient-position: to top left in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     .bg-gradient-to-tr {\n-      --tw-gradient-position: to top right in oklch, ;\n+      --tw-gradient-position: to top right in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\""\n   `)\n\ndiff --git a/packages/tailwindcss/src/compat/plugin-api.test.ts b/packages/tailwindcss/src/compat/plugin-api.test.ts\nindex 51b1d9732132..0de2cfa46fad 100644\n--- a/packages/tailwindcss/src/compat/plugin-api.test.ts\n+++ b/packages/tailwindcss/src/compat/plugin-api.test.ts\n@@ -285,13 +285,13 @@ describe('theme', async () => {\n \n     expect(compiler.build(['percentage', 'fraction', 'variable'])).toMatchInlineSnapshot(`\n       \"".fraction {\n-        color: color-mix(in oklch, #ef4444 50%, transparent);\n+        color: color-mix(in oklab, #ef4444 50%, transparent);\n       }\n       .percentage {\n-        color: color-mix(in oklch, #ef4444 50%, transparent);\n+        color: color-mix(in oklab, #ef4444 50%, transparent);\n       }\n       .variable {\n-        color: color-mix(in oklch, #ef4444 var(--opacity), transparent);\n+        color: color-mix(in oklab, #ef4444 var(--opacity), transparent);\n       }\n       :root {\n         --color-red-500: #ef4444;\n@@ -362,22 +362,22 @@ describe('theme', async () => {\n       ]),\n     ).toMatchInlineSnapshot(`\n       \"".css-fraction {\n-        color: color-mix(in oklch, rgba(255 0 0 / <alpha-value>) 50%, transparent);\n+        color: color-mix(in oklab, rgba(255 0 0 / <alpha-value>) 50%, transparent);\n       }\n       .css-percentage {\n-        color: color-mix(in oklch, rgba(255 0 0 / <alpha-value>) 50%, transparent);\n+        color: color-mix(in oklab, rgba(255 0 0 / <alpha-value>) 50%, transparent);\n       }\n       .css-variable {\n-        color: color-mix(in oklch, rgba(255 0 0 / <alpha-value>) var(--opacity), transparent);\n+        color: color-mix(in oklab, rgba(255 0 0 / <alpha-value>) var(--opacity), transparent);\n       }\n       .js-fraction {\n-        color: color-mix(in oklch, rgb(255 0 0 / 1) 50%, transparent);\n+        color: color-mix(in oklab, rgb(255 0 0 / 1) 50%, transparent);\n       }\n       .js-percentage {\n-        color: color-mix(in oklch, rgb(255 0 0 / 1) 50%, transparent);\n+        color: color-mix(in oklab, rgb(255 0 0 / 1) 50%, transparent);\n       }\n       .js-variable {\n-        color: color-mix(in oklch, rgb(255 0 0 / 1) var(--opacity), transparent);\n+        color: color-mix(in oklab, rgb(255 0 0 / 1) var(--opacity), transparent);\n       }\n       :root {\n         --color-custom-css: rgba(255 0 0 / <alpha-value>);\n@@ -3462,7 +3462,7 @@ describe('matchUtilities()', () => {\n         }\n \n         .scrollbar-\\\\[\\\\#08c\\\\]\\\\/50 {\n-          scrollbar-color: oklch(59.9824% .14119 241.555 / .5);\n+          scrollbar-color: oklab(59.9824% -.0672516 -.124144 / .5);\n         }\n \n         .scrollbar-\\\\[2px\\\\] {\n@@ -3625,7 +3625,7 @@ describe('matchUtilities()', () => {\n       }\n \n       .scrollbar-\\\\[\\\\#fff\\\\]\\\\/50 {\n-        scrollbar-color: oklch(100% 5.96046e-8 none / .5);\n+        scrollbar-color: oklab(100% 0 5.96046e-8 / .5);\n       }\n \n       .scrollbar-\\\\[2px\\\\] {\n@@ -3637,7 +3637,7 @@ describe('matchUtilities()', () => {\n       }\n \n       .scrollbar-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-        scrollbar-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+        scrollbar-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n       }\n \n       .scrollbar-\\\\[length\\\\:var\\\\(--my-width\\\\)\\\\] {\n@@ -3649,7 +3649,7 @@ describe('matchUtilities()', () => {\n       }\n \n       .scrollbar-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-        scrollbar-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+        scrollbar-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n       }\n \n       .scrollbar-black {\n@@ -3657,7 +3657,7 @@ describe('matchUtilities()', () => {\n       }\n \n       .scrollbar-black\\\\/50 {\n-        scrollbar-color: oklch(0% none none / .5);\n+        scrollbar-color: oklab(0% none none / .5);\n       }\""\n     `)\n \n@@ -3723,7 +3723,7 @@ describe('matchUtilities()', () => {\n       ).trim(),\n     ).toMatchInlineSnapshot(`\n       \"".scrollbar-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[25\\\\%\\\\] {\n-        scrollbar-color: color-mix(in oklch, var(--my-color) 25%, transparent);\n+        scrollbar-color: color-mix(in oklab, var(--my-color) 25%, transparent);\n       }\n \n       .scrollbar-black {\n@@ -3731,11 +3731,11 @@ describe('matchUtilities()', () => {\n       }\n \n       .scrollbar-black\\\\/33 {\n-        scrollbar-color: oklch(0% none none / .33);\n+        scrollbar-color: oklab(0% none none / .33);\n       }\n \n       .scrollbar-black\\\\/\\\\[50\\\\%\\\\] {\n-        scrollbar-color: oklch(0% none none / .5);\n+        scrollbar-color: oklab(0% none none / .5);\n       }\n \n       .scrollbar-current {\n@@ -3743,7 +3743,7 @@ describe('matchUtilities()', () => {\n       }\n \n       .scrollbar-current\\\\/45 {\n-        scrollbar-color: color-mix(in oklch, currentColor 45%, transparent);\n+        scrollbar-color: color-mix(in oklab, currentColor 45%, transparent);\n       }\""\n     `)\n   })\n\ndiff --git a/packages/tailwindcss/src/css-functions.test.ts b/packages/tailwindcss/src/css-functions.test.ts\nindex 990a8b989da2..940389c22205 100644\n--- a/packages/tailwindcss/src/css-functions.test.ts\n+++ b/packages/tailwindcss/src/css-functions.test.ts\n@@ -152,7 +152,7 @@ describe('theme function', () => {\n           }\n \n           .red {\n-            color: oklch(62.7955% .257683 29.2339 / .75);\n+            color: oklab(62.7955% .224863 .125846 / .75);\n           }\""\n         `)\n       })\n@@ -173,7 +173,7 @@ describe('theme function', () => {\n           }\n \n           .red {\n-            color: oklch(62.7955% .257683 29.2339 / .75);\n+            color: oklab(62.7955% .224863 .125846 / .75);\n           }\""\n         `)\n       })\n@@ -194,7 +194,7 @@ describe('theme function', () => {\n           }\n \n           .red {\n-            color: oklch(62.7955% .257683 29.2339 / .75);\n+            color: oklab(62.7955% .224863 .125846 / .75);\n           }\""\n         `)\n       })\n@@ -215,7 +215,7 @@ describe('theme function', () => {\n           }\n \n           .red {\n-            color: color-mix(in oklch, red var(--opacity), transparent);\n+            color: color-mix(in oklab, red var(--opacity), transparent);\n           }\""\n         `)\n       })\n@@ -237,7 +237,7 @@ describe('theme function', () => {\n           }\n \n           .red {\n-            color: color-mix(in oklch, red var(--opacity, 50%), transparent);\n+            color: color-mix(in oklab, red var(--opacity, 50%), transparent);\n           }\""\n         `)\n       })\n@@ -455,7 +455,7 @@ describe('theme function', () => {\n           }\n \n           .red {\n-            color: oklch(62.7955% .257683 29.2339 / .25);\n+            color: oklab(62.7955% .224863 .125846 / .25);\n           }\""\n         `)\n       })\n@@ -533,11 +533,11 @@ describe('theme function', () => {\n         ).toMatchInlineSnapshot(`\n           \"":root {\n             --color-red-500: red;\n-            --color-foo: oklch(62.7955% .257683 29.2339 / .5);\n+            --color-foo: oklab(62.7955% .224863 .125846 / .5);\n           }\n \n           .red {\n-            color: oklch(62.7955% .257683 29.2339 / .25);\n+            color: oklab(62.7955% .224863 .125846 / .25);\n           }\""\n         `)\n       })\n@@ -581,7 +581,7 @@ describe('theme function', () => {\n           }\n \n           .red {\n-            color: oklch(62.7955% .257683 29.2339 / .5);\n+            color: oklab(62.7955% .224863 .125846 / .5);\n           }\""\n         `)\n       })\n@@ -873,7 +873,13 @@ describe('in plugins', () => {\n           --color-red: oklch(62% 0.25 30);\n           --color-orange: oklch(79% 0.17 70);\n           --color-blue: oklch(45% 0.31 264);\n-          --color-pink: oklch(87% 0.07 7);\n+\n+          /*\n+            Using oklab because Lightning converts the color to oklab when using\n+            color-mix() and the results are off by 0.00000001 between macOS and\n+            Linux.\n+          */\n+          --color-pink: oklab(87% 0.07 0);\n         }\n         @layer utilities {\n           @tailwind utilities;\n@@ -909,8 +915,8 @@ describe('in plugins', () => {\n         .my-base-rule {\n           color: oklch(62% .25 30);\n           background-color: oklch(45% .31 264);\n-          border-color: oklch(87% .07 7 / .1);\n-          outline-color: oklch(79% .17 70 / .15);\n+          border-color: oklab(87% .07 0 / .1);\n+          outline-color: oklab(79% .0581434 .159748 / .15);\n         }\n       }\n \n\ndiff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex 96ed5f7c6bb7..3d21d1102177 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -182,7 +182,7 @@ describe('arbitrary properties', () => {\n   it('should generate arbitrary properties with modifiers', async () => {\n     expect(await run(['[color:red]/50'])).toMatchInlineSnapshot(`\n       \"".\\\\[color\\\\:red\\\\]\\\\/50 {\n-        color: oklch(62.7955% .257683 29.2339 / .5);\n+        color: oklab(62.7955% .224863 .125846 / .5);\n       }\""\n     `)\n   })\n@@ -194,7 +194,7 @@ describe('arbitrary properties', () => {\n   it('should generate arbitrary properties with variables and with modifiers', async () => {\n     expect(await run(['[color:var(--my-color)]/50'])).toMatchInlineSnapshot(`\n       \"".\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50 {\n-        color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+        color: color-mix(in oklab, var(--my-color) 50%, transparent);\n       }\""\n     `)\n   })\n\ndiff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 331ce448ab67..83af79ff3ab4 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -8373,7 +8373,7 @@ test('accent', async () => {\n     }\n \n     .accent-\\\\[\\\\#0088cc\\\\]\\\\/50, .accent-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .accent-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      accent-color: oklch(59.9824% .14119 241.555 / .5);\n+      accent-color: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .accent-current {\n@@ -8381,7 +8381,7 @@ test('accent', async () => {\n     }\n \n     .accent-current\\\\/50, .accent-current\\\\/\\\\[0\\\\.5\\\\], .accent-current\\\\/\\\\[50\\\\%\\\\] {\n-      accent-color: color-mix(in oklch, currentColor 50%, transparent);\n+      accent-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .accent-inherit {\n@@ -8393,19 +8393,19 @@ test('accent', async () => {\n     }\n \n     .accent-red-500\\\\/2\\\\.5 {\n-      accent-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+      accent-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n     }\n \n     .accent-red-500\\\\/2\\\\.25 {\n-      accent-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+      accent-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n     }\n \n     .accent-red-500\\\\/2\\\\.75 {\n-      accent-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+      accent-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n     }\n \n     .accent-red-500\\\\/50, .accent-red-500\\\\/\\\\[0\\\\.5\\\\], .accent-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      accent-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      accent-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .accent-transparent {\n@@ -8488,7 +8488,7 @@ test('caret', async () => {\n     }\n \n     .caret-\\\\[\\\\#0088cc\\\\]\\\\/50, .caret-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .caret-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      caret-color: oklch(59.9824% .14119 241.555 / .5);\n+      caret-color: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .caret-current {\n@@ -8496,7 +8496,7 @@ test('caret', async () => {\n     }\n \n     .caret-current\\\\/50, .caret-current\\\\/\\\\[0\\\\.5\\\\], .caret-current\\\\/\\\\[50\\\\%\\\\] {\n-      caret-color: color-mix(in oklch, currentColor 50%, transparent);\n+      caret-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .caret-inherit {\n@@ -8508,19 +8508,19 @@ test('caret', async () => {\n     }\n \n     .caret-red-500\\\\/2\\\\.5 {\n-      caret-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+      caret-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n     }\n \n     .caret-red-500\\\\/2\\\\.25 {\n-      caret-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+      caret-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n     }\n \n     .caret-red-500\\\\/2\\\\.75 {\n-      caret-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+      caret-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n     }\n \n     .caret-red-500\\\\/50, .caret-red-500\\\\/\\\\[0\\\\.5\\\\], .caret-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      caret-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      caret-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .caret-transparent {\n@@ -8601,7 +8601,7 @@ test('divide-color', async () => {\n     }\n \n     :where(.divide-\\\\[\\\\#0088cc\\\\]\\\\/50 > :not(:last-child)), :where(.divide-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\] > :not(:last-child)), :where(.divide-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] > :not(:last-child)) {\n-      border-color: oklch(59.9824% .14119 241.555 / .5);\n+      border-color: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     :where(.divide-current > :not(:last-child)) {\n@@ -8609,7 +8609,7 @@ test('divide-color', async () => {\n     }\n \n     :where(.divide-current\\\\/50 > :not(:last-child)), :where(.divide-current\\\\/\\\\[0\\\\.5\\\\] > :not(:last-child)), :where(.divide-current\\\\/\\\\[50\\\\%\\\\] > :not(:last-child)) {\n-      border-color: color-mix(in oklch, currentColor 50%, transparent);\n+      border-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     :where(.divide-inherit > :not(:last-child)) {\n@@ -8621,19 +8621,19 @@ test('divide-color', async () => {\n     }\n \n     :where(.divide-red-500\\\\/2\\\\.5 > :not(:last-child)) {\n-      border-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+      border-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n     }\n \n     :where(.divide-red-500\\\\/2\\\\.25 > :not(:last-child)) {\n-      border-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+      border-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n     }\n \n     :where(.divide-red-500\\\\/2\\\\.75 > :not(:last-child)) {\n-      border-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+      border-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n     }\n \n     :where(.divide-red-500\\\\/50 > :not(:last-child)), :where(.divide-red-500\\\\/\\\\[0\\\\.5\\\\] > :not(:last-child)), :where(.divide-red-500\\\\/\\\\[50\\\\%\\\\] > :not(:last-child)) {\n-      border-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      border-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     :where(.divide-transparent > :not(:last-child)) {\n@@ -10499,7 +10499,7 @@ test('bg', async () => {\n     }\n \n     .bg-\\\\[\\\\#0088cc\\\\]\\\\/50, .bg-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .bg-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      background-color: oklch(59.9824% .14119 241.555 / .5);\n+      background-color: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .bg-\\\\[color\\\\:var\\\\(--some-var\\\\)\\\\] {\n@@ -10507,7 +10507,7 @@ test('bg', async () => {\n     }\n \n     .bg-\\\\[color\\\\:var\\\\(--some-var\\\\)\\\\]\\\\/50, .bg-\\\\[color\\\\:var\\\\(--some-var\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .bg-\\\\[color\\\\:var\\\\(--some-var\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      background-color: color-mix(in oklch, var(--some-var) 50%, transparent);\n+      background-color: color-mix(in oklab, var(--some-var) 50%, transparent);\n     }\n \n     .bg-\\\\[var\\\\(--some-var\\\\)\\\\] {\n@@ -10515,7 +10515,7 @@ test('bg', async () => {\n     }\n \n     .bg-\\\\[var\\\\(--some-var\\\\)\\\\]\\\\/50, .bg-\\\\[var\\\\(--some-var\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .bg-\\\\[var\\\\(--some-var\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      background-color: color-mix(in oklch, var(--some-var) 50%, transparent);\n+      background-color: color-mix(in oklab, var(--some-var) 50%, transparent);\n     }\n \n     .bg-current {\n@@ -10523,11 +10523,11 @@ test('bg', async () => {\n     }\n \n     .bg-current\\\\/50, .bg-current\\\\/\\\\[0\\\\.5\\\\], .bg-current\\\\/\\\\[50\\\\%\\\\] {\n-      background-color: color-mix(in oklch, currentColor 50%, transparent);\n+      background-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .bg-current\\\\/\\\\[var\\\\(--bg-opacity\\\\)\\\\] {\n-      background-color: color-mix(in oklch, currentColor var(--bg-opacity), transparent);\n+      background-color: color-mix(in oklab, currentColor var(--bg-opacity), transparent);\n     }\n \n     .bg-inherit {\n@@ -10539,19 +10539,19 @@ test('bg', async () => {\n     }\n \n     .bg-red-500\\\\/2\\\\.5 {\n-      background-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+      background-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n     }\n \n     .bg-red-500\\\\/2\\\\.25 {\n-      background-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+      background-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n     }\n \n     .bg-red-500\\\\/2\\\\.75 {\n-      background-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+      background-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n     }\n \n     .bg-red-500\\\\/50, .bg-red-500\\\\/\\\\[0\\\\.5\\\\], .bg-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      background-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      background-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .bg-transparent {\n@@ -10563,12 +10563,7 @@ test('bg', async () => {\n       background-image: conic-gradient(var(--tw-gradient-stops));\n     }\n \n-    .-bg-linear-45 {\n-      --tw-gradient-position: calc(45deg * -1) in oklch, ;\n-      background-image: linear-gradient(var(--tw-gradient-stops));\n-    }\n-\n-    .-bg-linear-45\\\\/oklab {\n+    .-bg-linear-45, .-bg-linear-45\\\\/oklab {\n       --tw-gradient-position: calc(45deg * -1) in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n@@ -10644,7 +10639,7 @@ test('bg', async () => {\n     }\n \n     .bg-linear-45 {\n-      --tw-gradient-position: 45deg in oklch, ;\n+      --tw-gradient-position: 45deg in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n@@ -10679,27 +10674,27 @@ test('bg', async () => {\n     }\n \n     .bg-linear-to-b {\n-      --tw-gradient-position: to bottom in oklch, ;\n+      --tw-gradient-position: to bottom in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     .bg-linear-to-bl {\n-      --tw-gradient-position: to bottom left in oklch, ;\n+      --tw-gradient-position: to bottom left in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     .bg-linear-to-br {\n-      --tw-gradient-position: to bottom right in oklch, ;\n+      --tw-gradient-position: to bottom right in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     .bg-linear-to-l {\n-      --tw-gradient-position: to left in oklch, ;\n+      --tw-gradient-position: to left in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     .bg-linear-to-r {\n-      --tw-gradient-position: to right in oklch, ;\n+      --tw-gradient-position: to right in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n@@ -10754,17 +10749,17 @@ test('bg', async () => {\n     }\n \n     .bg-linear-to-t {\n-      --tw-gradient-position: to top in oklch, ;\n+      --tw-gradient-position: to top in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     .bg-linear-to-tl {\n-      --tw-gradient-position: to top left in oklch, ;\n+      --tw-gradient-position: to top left in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n     .bg-linear-to-tr {\n-      --tw-gradient-position: to top right in oklch, ;\n+      --tw-gradient-position: to top right in oklab, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n@@ -11050,15 +11045,15 @@ test('bg', async () => {\n     ),\n   ).toMatchInlineSnapshot(`\n     \"".bg-current\\\\/custom {\n-      background-color: color-mix(in oklch, currentColor var(--opacity-custom), transparent);\n+      background-color: color-mix(in oklab, currentColor var(--opacity-custom), transparent);\n     }\n \n     .bg-current\\\\/half {\n-      background-color: color-mix(in oklch, currentColor var(--opacity-half), transparent);\n+      background-color: color-mix(in oklab, currentColor var(--opacity-half), transparent);\n     }\n \n     .\\\\[color\\\\:red\\\\]\\\\/half {\n-      color: color-mix(in oklch, red var(--opacity-half), transparent);\n+      color: color-mix(in oklab, red var(--opacity-half), transparent);\n     }\""\n   `)\n })\n@@ -11118,7 +11113,7 @@ test('from', async () => {\n     }\n \n     .from-\\\\[\\\\#0088cc\\\\]\\\\/50, .from-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .from-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-from: oklch(59.9824% .14119 241.555 / .5);\n+      --tw-gradient-from: oklab(59.9824% -.0672516 -.124144 / .5);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -11128,7 +11123,7 @@ test('from', async () => {\n     }\n \n     .from-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50, .from-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .from-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-from: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      --tw-gradient-from: color-mix(in oklab, var(--my-color) 50%, transparent);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -11138,7 +11133,7 @@ test('from', async () => {\n     }\n \n     .from-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50, .from-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .from-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-from: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      --tw-gradient-from: color-mix(in oklab, var(--my-color) 50%, transparent);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -11148,7 +11143,7 @@ test('from', async () => {\n     }\n \n     .from-current\\\\/50, .from-current\\\\/\\\\[0\\\\.5\\\\], .from-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-from: color-mix(in oklch, currentColor 50%, transparent);\n+      --tw-gradient-from: color-mix(in oklab, currentColor 50%, transparent);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -11163,7 +11158,7 @@ test('from', async () => {\n     }\n \n     .from-red-500\\\\/50, .from-red-500\\\\/\\\\[0\\\\.5\\\\], .from-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-from: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      --tw-gradient-from: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -11354,7 +11349,7 @@ test('via', async () => {\n     }\n \n     .via-\\\\[\\\\#0088cc\\\\]\\\\/50, .via-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .via-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-via: oklch(59.9824% .14119 241.555 / .5);\n+      --tw-gradient-via: oklab(59.9824% -.0672516 -.124144 / .5);\n       --tw-gradient-via-stops: var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n@@ -11366,7 +11361,7 @@ test('via', async () => {\n     }\n \n     .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50, .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .via-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-via: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      --tw-gradient-via: color-mix(in oklab, var(--my-color) 50%, transparent);\n       --tw-gradient-via-stops: var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n@@ -11378,7 +11373,7 @@ test('via', async () => {\n     }\n \n     .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50, .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .via-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-via: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      --tw-gradient-via: color-mix(in oklab, var(--my-color) 50%, transparent);\n       --tw-gradient-via-stops: var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n@@ -11390,7 +11385,7 @@ test('via', async () => {\n     }\n \n     .via-current\\\\/50, .via-current\\\\/\\\\[0\\\\.5\\\\], .via-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-via: color-mix(in oklch, currentColor 50%, transparent);\n+      --tw-gradient-via: color-mix(in oklab, currentColor 50%, transparent);\n       --tw-gradient-via-stops: var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n@@ -11408,7 +11403,7 @@ test('via', async () => {\n     }\n \n     .via-red-500\\\\/50, .via-red-500\\\\/\\\\[0\\\\.5\\\\], .via-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-via: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      --tw-gradient-via: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n       --tw-gradient-via-stops: var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position);\n       --tw-gradient-stops: var(--tw-gradient-via-stops);\n     }\n@@ -11598,7 +11593,7 @@ test('to', async () => {\n     }\n \n     .to-\\\\[\\\\#0088cc\\\\]\\\\/50, .to-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .to-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-to: oklch(59.9824% .14119 241.555 / .5);\n+      --tw-gradient-to: oklab(59.9824% -.0672516 -.124144 / .5);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -11608,7 +11603,7 @@ test('to', async () => {\n     }\n \n     .to-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50, .to-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .to-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-to: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      --tw-gradient-to: color-mix(in oklab, var(--my-color) 50%, transparent);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -11618,7 +11613,7 @@ test('to', async () => {\n     }\n \n     .to-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50, .to-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .to-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-to: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      --tw-gradient-to: color-mix(in oklab, var(--my-color) 50%, transparent);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -11628,7 +11623,7 @@ test('to', async () => {\n     }\n \n     .to-current\\\\/50, .to-current\\\\/\\\\[0\\\\.5\\\\], .to-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-to: color-mix(in oklch, currentColor 50%, transparent);\n+      --tw-gradient-to: color-mix(in oklab, currentColor 50%, transparent);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -11643,7 +11638,7 @@ test('to', async () => {\n     }\n \n     .to-red-500\\\\/50, .to-red-500\\\\/\\\\[0\\\\.5\\\\], .to-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-gradient-to: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      --tw-gradient-to: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n       --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position, ) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));\n     }\n \n@@ -12162,7 +12157,7 @@ test('fill', async () => {\n     }\n \n     .fill-\\\\[\\\\#0088cc\\\\]\\\\/50, .fill-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .fill-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      fill: oklch(59.9824% .14119 241.555 / .5);\n+      fill: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .fill-current {\n@@ -12170,7 +12165,7 @@ test('fill', async () => {\n     }\n \n     .fill-current\\\\/50, .fill-current\\\\/\\\\[0\\\\.5\\\\], .fill-current\\\\/\\\\[50\\\\%\\\\] {\n-      fill: color-mix(in oklch, currentColor 50%, transparent);\n+      fill: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .fill-inherit {\n@@ -12182,19 +12177,19 @@ test('fill', async () => {\n     }\n \n     .fill-red-500\\\\/2\\\\.5 {\n-      fill: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+      fill: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n     }\n \n     .fill-red-500\\\\/2\\\\.25 {\n-      fill: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+      fill: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n     }\n \n     .fill-red-500\\\\/2\\\\.75 {\n-      fill: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+      fill: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n     }\n \n     .fill-red-500\\\\/50, .fill-red-500\\\\/\\\\[0\\\\.5\\\\], .fill-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      fill: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      fill: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .fill-transparent {\n@@ -12283,7 +12278,7 @@ test('stroke', async () => {\n     }\n \n     .stroke-\\\\[\\\\#0088cc\\\\]\\\\/50, .stroke-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .stroke-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      stroke: oklch(59.9824% .14119 241.555 / .5);\n+      stroke: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .stroke-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -12291,7 +12286,7 @@ test('stroke', async () => {\n     }\n \n     .stroke-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50, .stroke-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .stroke-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      stroke: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      stroke: color-mix(in oklab, var(--my-color) 50%, transparent);\n     }\n \n     .stroke-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -12299,7 +12294,7 @@ test('stroke', async () => {\n     }\n \n     .stroke-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50, .stroke-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .stroke-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      stroke: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      stroke: color-mix(in oklab, var(--my-color) 50%, transparent);\n     }\n \n     .stroke-current {\n@@ -12307,7 +12302,7 @@ test('stroke', async () => {\n     }\n \n     .stroke-current\\\\/50, .stroke-current\\\\/\\\\[0\\\\.5\\\\], .stroke-current\\\\/\\\\[50\\\\%\\\\] {\n-      stroke: color-mix(in oklch, currentColor 50%, transparent);\n+      stroke: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .stroke-inherit {\n@@ -12323,19 +12318,19 @@ test('stroke', async () => {\n     }\n \n     .stroke-red-500\\\\/2\\\\.5 {\n-      stroke: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+      stroke: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n     }\n \n     .stroke-red-500\\\\/2\\\\.25 {\n-      stroke: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+      stroke: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n     }\n \n     .stroke-red-500\\\\/2\\\\.75 {\n-      stroke: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+      stroke: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n     }\n \n     .stroke-red-500\\\\/50, .stroke-red-500\\\\/\\\\[0\\\\.5\\\\], .stroke-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      stroke: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      stroke: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .stroke-transparent {\n@@ -13281,7 +13276,7 @@ test('placeholder', async () => {\n     }\n \n     .placeholder-\\\\[\\\\#0088cc\\\\]\\\\/50::placeholder, .placeholder-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\]::placeholder, .placeholder-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\]::placeholder {\n-      color: oklch(59.9824% .14119 241.555 / .5);\n+      color: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .placeholder-current::placeholder {\n@@ -13289,7 +13284,7 @@ test('placeholder', async () => {\n     }\n \n     .placeholder-current\\\\/50::placeholder, .placeholder-current\\\\/\\\\[0\\\\.5\\\\]::placeholder, .placeholder-current\\\\/\\\\[50\\\\%\\\\]::placeholder {\n-      color: color-mix(in oklch, currentColor 50%, transparent);\n+      color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .placeholder-inherit::placeholder {\n@@ -13301,19 +13296,19 @@ test('placeholder', async () => {\n     }\n \n     .placeholder-red-500\\\\/2\\\\.5::placeholder {\n-      color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+      color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n     }\n \n     .placeholder-red-500\\\\/2\\\\.25::placeholder {\n-      color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+      color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n     }\n \n     .placeholder-red-500\\\\/2\\\\.75::placeholder {\n-      color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+      color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n     }\n \n     .placeholder-red-500\\\\/50::placeholder, .placeholder-red-500\\\\/\\\\[0\\\\.5\\\\]::placeholder, .placeholder-red-500\\\\/\\\\[50\\\\%\\\\]::placeholder {\n-      color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .placeholder-transparent::placeholder {\n@@ -13406,7 +13401,7 @@ test('decoration', async () => {\n     }\n \n     .decoration-\\\\[\\\\#0088cc\\\\]\\\\/50, .decoration-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .decoration-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      text-decoration-color: oklch(59.9824% .14119 241.555 / .5);\n+      text-decoration-color: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .decoration-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -13416,9 +13411,9 @@ test('decoration', async () => {\n     }\n \n     .decoration-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50, .decoration-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .decoration-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      -webkit-text-decoration-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n-      -webkit-text-decoration-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n-      text-decoration-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      -webkit-text-decoration-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n+      -webkit-text-decoration-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n+      text-decoration-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n     }\n \n     .decoration-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -13428,9 +13423,9 @@ test('decoration', async () => {\n     }\n \n     .decoration-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50, .decoration-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .decoration-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      -webkit-text-decoration-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n-      -webkit-text-decoration-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n-      text-decoration-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      -webkit-text-decoration-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n+      -webkit-text-decoration-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n+      text-decoration-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n     }\n \n     .decoration-current {\n@@ -13438,9 +13433,9 @@ test('decoration', async () => {\n     }\n \n     .decoration-current\\\\/50, .decoration-current\\\\/\\\\[0\\\\.5\\\\], .decoration-current\\\\/\\\\[50\\\\%\\\\] {\n-      -webkit-text-decoration-color: color-mix(in oklch, currentColor 50%, transparent);\n-      -webkit-text-decoration-color: color-mix(in oklch, currentColor 50%, transparent);\n-      text-decoration-color: color-mix(in oklch, currentColor 50%, transparent);\n+      -webkit-text-decoration-color: color-mix(in oklab, currentColor 50%, transparent);\n+      -webkit-text-decoration-color: color-mix(in oklab, currentColor 50%, transparent);\n+      text-decoration-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .decoration-inherit {\n@@ -13456,9 +13451,9 @@ test('decoration', async () => {\n     }\n \n     .decoration-red-500\\\\/50, .decoration-red-500\\\\/\\\\[0\\\\.5\\\\], .decoration-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      -webkit-text-decoration-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n-      -webkit-text-decoration-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n-      text-decoration-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      -webkit-text-decoration-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n+      -webkit-text-decoration-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n+      text-decoration-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .decoration-transparent {\n@@ -15185,7 +15180,7 @@ test('outline', async () => {\n     }\n \n     .outline-\\\\[\\\\#0088cc\\\\]\\\\/50, .outline-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .outline-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      outline-color: oklch(59.9824% .14119 241.555 / .5);\n+      outline-color: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .outline-\\\\[black\\\\] {\n@@ -15193,15 +15188,15 @@ test('outline', async () => {\n     }\n \n     .outline-\\\\[black\\\\]\\\\/50 {\n-      outline-color: oklch(0% none none / .5);\n+      outline-color: oklab(0% none none / .5);\n     }\n \n     .outline-\\\\[black\\\\]\\\\/\\\\[0\\\\.5\\\\] {\n-      outline-color: oklch(0% none none / .5);\n+      outline-color: oklab(0% none none / .5);\n     }\n \n     .outline-\\\\[black\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      outline-color: oklch(0% none none / .5);\n+      outline-color: oklab(0% none none / .5);\n     }\n \n     .outline-\\\\[color\\\\:var\\\\(--value\\\\)\\\\] {\n@@ -15209,7 +15204,7 @@ test('outline', async () => {\n     }\n \n     .outline-\\\\[color\\\\:var\\\\(--value\\\\)\\\\]\\\\/50, .outline-\\\\[color\\\\:var\\\\(--value\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .outline-\\\\[color\\\\:var\\\\(--value\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      outline-color: color-mix(in oklch, var(--value) 50%, transparent);\n+      outline-color: color-mix(in oklab, var(--value) 50%, transparent);\n     }\n \n     .outline-\\\\[var\\\\(--value\\\\)\\\\] {\n@@ -15217,7 +15212,7 @@ test('outline', async () => {\n     }\n \n     .outline-\\\\[var\\\\(--value\\\\)\\\\]\\\\/50, .outline-\\\\[var\\\\(--value\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .outline-\\\\[var\\\\(--value\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      outline-color: color-mix(in oklch, var(--value) 50%, transparent);\n+      outline-color: color-mix(in oklab, var(--value) 50%, transparent);\n     }\n \n     .outline-current {\n@@ -15225,7 +15220,7 @@ test('outline', async () => {\n     }\n \n     .outline-current\\\\/50, .outline-current\\\\/\\\\[0\\\\.5\\\\], .outline-current\\\\/\\\\[50\\\\%\\\\] {\n-      outline-color: color-mix(in oklch, currentColor 50%, transparent);\n+      outline-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .outline-inherit {\n@@ -15237,7 +15232,7 @@ test('outline', async () => {\n     }\n \n     .outline-red-500\\\\/50, .outline-red-500\\\\/\\\\[0\\\\.5\\\\], .outline-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      outline-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      outline-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .outline-transparent {\n@@ -15617,7 +15612,7 @@ test('text', async () => {\n     }\n \n     .text-\\\\[\\\\#0088cc\\\\]\\\\/50, .text-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .text-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      color: oklch(59.9824% .14119 241.555 / .5);\n+      color: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .text-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -15625,7 +15620,7 @@ test('text', async () => {\n     }\n \n     .text-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50, .text-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .text-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      color: color-mix(in oklab, var(--my-color) 50%, transparent);\n     }\n \n     .text-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -15633,7 +15628,7 @@ test('text', async () => {\n     }\n \n     .text-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50, .text-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .text-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      color: color-mix(in oklab, var(--my-color) 50%, transparent);\n     }\n \n     .text-current {\n@@ -15641,7 +15636,7 @@ test('text', async () => {\n     }\n \n     .text-current\\\\/50, .text-current\\\\/\\\\[0\\\\.5\\\\], .text-current\\\\/\\\\[50\\\\%\\\\] {\n-      color: color-mix(in oklch, currentColor 50%, transparent);\n+      color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .text-inherit {\n@@ -15653,19 +15648,19 @@ test('text', async () => {\n     }\n \n     .text-red-500\\\\/2\\\\.5 {\n-      color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+      color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n     }\n \n     .text-red-500\\\\/2\\\\.25 {\n-      color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+      color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n     }\n \n     .text-red-500\\\\/2\\\\.75 {\n-      color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+      color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n     }\n \n     .text-red-500\\\\/50, .text-red-500\\\\/\\\\[0\\\\.5\\\\], .text-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .text-transparent {\n@@ -15786,7 +15781,7 @@ test('shadow', async () => {\n     }\n \n     .shadow-\\\\[\\\\#0088cc\\\\]\\\\/50, .shadow-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .shadow-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-shadow-color: oklch(59.9824% .14119 241.555 / .5);\n+      --tw-shadow-color: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .shadow-\\\\[color\\\\:var\\\\(--value\\\\)\\\\] {\n@@ -15794,7 +15789,7 @@ test('shadow', async () => {\n     }\n \n     .shadow-\\\\[color\\\\:var\\\\(--value\\\\)\\\\]\\\\/50, .shadow-\\\\[color\\\\:var\\\\(--value\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .shadow-\\\\[color\\\\:var\\\\(--value\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-shadow-color: color-mix(in oklch, var(--value) 50%, transparent);\n+      --tw-shadow-color: color-mix(in oklab, var(--value) 50%, transparent);\n     }\n \n     .shadow-current {\n@@ -15802,7 +15797,7 @@ test('shadow', async () => {\n     }\n \n     .shadow-current\\\\/50, .shadow-current\\\\/\\\\[0\\\\.5\\\\], .shadow-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-shadow-color: color-mix(in oklch, currentColor 50%, transparent);\n+      --tw-shadow-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .shadow-inherit {\n@@ -15814,19 +15809,19 @@ test('shadow', async () => {\n     }\n \n     .shadow-red-500\\\\/2\\\\.5 {\n-      --tw-shadow-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+      --tw-shadow-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n     }\n \n     .shadow-red-500\\\\/2\\\\.25 {\n-      --tw-shadow-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+      --tw-shadow-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n     }\n \n     .shadow-red-500\\\\/2\\\\.75 {\n-      --tw-shadow-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+      --tw-shadow-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n     }\n \n     .shadow-red-500\\\\/50, .shadow-red-500\\\\/\\\\[0\\\\.5\\\\], .shadow-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-shadow-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      --tw-shadow-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .shadow-transparent {\n@@ -16029,7 +16024,7 @@ test('inset-shadow', async () => {\n     }\n \n     .inset-shadow-\\\\[\\\\#0088cc\\\\]\\\\/50, .inset-shadow-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .inset-shadow-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-inset-shadow-color: oklch(59.9824% .14119 241.555 / .5);\n+      --tw-inset-shadow-color: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .inset-shadow-\\\\[color\\\\:var\\\\(--value\\\\)\\\\] {\n@@ -16037,7 +16032,7 @@ test('inset-shadow', async () => {\n     }\n \n     .inset-shadow-\\\\[color\\\\:var\\\\(--value\\\\)\\\\]\\\\/50, .inset-shadow-\\\\[color\\\\:var\\\\(--value\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .inset-shadow-\\\\[color\\\\:var\\\\(--value\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-inset-shadow-color: color-mix(in oklch, var(--value) 50%, transparent);\n+      --tw-inset-shadow-color: color-mix(in oklab, var(--value) 50%, transparent);\n     }\n \n     .inset-shadow-current {\n@@ -16045,7 +16040,7 @@ test('inset-shadow', async () => {\n     }\n \n     .inset-shadow-current\\\\/50, .inset-shadow-current\\\\/\\\\[0\\\\.5\\\\], .inset-shadow-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-inset-shadow-color: color-mix(in oklch, currentColor 50%, transparent);\n+      --tw-inset-shadow-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .inset-shadow-inherit {\n@@ -16057,19 +16052,19 @@ test('inset-shadow', async () => {\n     }\n \n     .inset-shadow-red-500\\\\/2\\\\.5 {\n-      --tw-inset-shadow-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+      --tw-inset-shadow-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n     }\n \n     .inset-shadow-red-500\\\\/2\\\\.25 {\n-      --tw-inset-shadow-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+      --tw-inset-shadow-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n     }\n \n     .inset-shadow-red-500\\\\/2\\\\.75 {\n-      --tw-inset-shadow-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+      --tw-inset-shadow-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n     }\n \n     .inset-shadow-red-500\\\\/50, .inset-shadow-red-500\\\\/\\\\[0\\\\.5\\\\], .inset-shadow-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-inset-shadow-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      --tw-inset-shadow-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .inset-shadow-transparent {\n@@ -16278,7 +16273,7 @@ test('ring', async () => {\n     }\n \n     .ring-\\\\[\\\\#0088cc\\\\]\\\\/50, .ring-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .ring-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-color: oklch(59.9824% .14119 241.555 / .5);\n+      --tw-ring-color: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .ring-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -16286,7 +16281,7 @@ test('ring', async () => {\n     }\n \n     .ring-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50, .ring-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .ring-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      --tw-ring-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n     }\n \n     .ring-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -16294,7 +16289,7 @@ test('ring', async () => {\n     }\n \n     .ring-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50, .ring-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .ring-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      --tw-ring-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n     }\n \n     .ring-current {\n@@ -16302,7 +16297,7 @@ test('ring', async () => {\n     }\n \n     .ring-current\\\\/50, .ring-current\\\\/\\\\[0\\\\.5\\\\], .ring-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-color: color-mix(in oklch, currentColor 50%, transparent);\n+      --tw-ring-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .ring-inherit {\n@@ -16314,19 +16309,19 @@ test('ring', async () => {\n     }\n \n     .ring-red-500\\\\/2\\\\.5 {\n-      --tw-ring-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+      --tw-ring-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n     }\n \n     .ring-red-500\\\\/2\\\\.25 {\n-      --tw-ring-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+      --tw-ring-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n     }\n \n     .ring-red-500\\\\/2\\\\.75 {\n-      --tw-ring-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+      --tw-ring-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n     }\n \n     .ring-red-500\\\\/50, .ring-red-500\\\\/\\\\[0\\\\.5\\\\], .ring-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      --tw-ring-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .ring-transparent {\n@@ -16553,7 +16548,7 @@ test('inset-ring', async () => {\n     }\n \n     .inset-ring-\\\\[\\\\#0088cc\\\\]\\\\/50, .inset-ring-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .inset-ring-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-inset-ring-color: oklch(59.9824% .14119 241.555 / .5);\n+      --tw-inset-ring-color: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .inset-ring-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -16561,7 +16556,7 @@ test('inset-ring', async () => {\n     }\n \n     .inset-ring-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50, .inset-ring-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .inset-ring-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-inset-ring-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      --tw-inset-ring-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n     }\n \n     .inset-ring-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -16569,7 +16564,7 @@ test('inset-ring', async () => {\n     }\n \n     .inset-ring-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50, .inset-ring-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .inset-ring-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-inset-ring-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      --tw-inset-ring-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n     }\n \n     .inset-ring-current {\n@@ -16577,7 +16572,7 @@ test('inset-ring', async () => {\n     }\n \n     .inset-ring-current\\\\/50, .inset-ring-current\\\\/\\\\[0\\\\.5\\\\], .inset-ring-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-inset-ring-color: color-mix(in oklch, currentColor 50%, transparent);\n+      --tw-inset-ring-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .inset-ring-inherit {\n@@ -16589,19 +16584,19 @@ test('inset-ring', async () => {\n     }\n \n     .inset-ring-red-500\\\\/2\\\\.5 {\n-      --tw-inset-ring-color: color-mix(in oklch, var(--color-red-500) 2.5%, transparent);\n+      --tw-inset-ring-color: color-mix(in oklab, var(--color-red-500) 2.5%, transparent);\n     }\n \n     .inset-ring-red-500\\\\/2\\\\.25 {\n-      --tw-inset-ring-color: color-mix(in oklch, var(--color-red-500) 2.25%, transparent);\n+      --tw-inset-ring-color: color-mix(in oklab, var(--color-red-500) 2.25%, transparent);\n     }\n \n     .inset-ring-red-500\\\\/2\\\\.75 {\n-      --tw-inset-ring-color: color-mix(in oklch, var(--color-red-500) 2.75%, transparent);\n+      --tw-inset-ring-color: color-mix(in oklab, var(--color-red-500) 2.75%, transparent);\n     }\n \n     .inset-ring-red-500\\\\/50, .inset-ring-red-500\\\\/\\\\[0\\\\.5\\\\], .inset-ring-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-inset-ring-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      --tw-inset-ring-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .inset-ring-transparent {\n@@ -16816,7 +16811,7 @@ test('ring-offset', async () => {\n     }\n \n     .ring-offset-\\\\[\\\\#0088cc\\\\]\\\\/50, .ring-offset-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[0\\\\.5\\\\], .ring-offset-\\\\[\\\\#0088cc\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-offset-color: oklch(59.9824% .14119 241.555 / .5);\n+      --tw-ring-offset-color: oklab(59.9824% -.0672516 -.124144 / .5);\n     }\n \n     .ring-offset-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\] {\n@@ -16824,7 +16819,7 @@ test('ring-offset', async () => {\n     }\n \n     .ring-offset-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/50, .ring-offset-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .ring-offset-\\\\[color\\\\:var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-offset-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      --tw-ring-offset-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n     }\n \n     .ring-offset-\\\\[var\\\\(--my-color\\\\)\\\\] {\n@@ -16832,7 +16827,7 @@ test('ring-offset', async () => {\n     }\n \n     .ring-offset-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/50, .ring-offset-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[0\\\\.5\\\\], .ring-offset-\\\\[var\\\\(--my-color\\\\)\\\\]\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-offset-color: color-mix(in oklch, var(--my-color) 50%, transparent);\n+      --tw-ring-offset-color: color-mix(in oklab, var(--my-color) 50%, transparent);\n     }\n \n     .ring-offset-current {\n@@ -16840,7 +16835,7 @@ test('ring-offset', async () => {\n     }\n \n     .ring-offset-current\\\\/50, .ring-offset-current\\\\/\\\\[0\\\\.5\\\\], .ring-offset-current\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-offset-color: color-mix(in oklch, currentColor 50%, transparent);\n+      --tw-ring-offset-color: color-mix(in oklab, currentColor 50%, transparent);\n     }\n \n     .ring-offset-inherit {\n@@ -16852,7 +16847,7 @@ test('ring-offset', async () => {\n     }\n \n     .ring-offset-red-500\\\\/50, .ring-offset-red-500\\\\/\\\\[0\\\\.5\\\\], .ring-offset-red-500\\\\/\\\\[50\\\\%\\\\] {\n-      --tw-ring-offset-color: color-mix(in oklch, var(--color-red-500) 50%, transparent);\n+      --tw-ring-offset-color: color-mix(in oklab, var(--color-red-500) 50%, transparent);\n     }\n \n     .ring-offset-transparent {\n\ndiff --git a/packages/tailwindcss/tests/ui.spec.ts b/packages/tailwindcss/tests/ui.spec.ts\nindex 103307d78657..5b3563ed2f03 100644\n--- a/packages/tailwindcss/tests/ui.spec.ts\n+++ b/packages/tailwindcss/tests/ui.spec.ts\n@@ -30,40 +30,40 @@ test('touch action', async ({ page }) => {\n for (let [classes, expected] of [\n   [\n     'bg-linear-to-r from-red',\n-    'linear-gradient(to right in oklch, rgb(255, 0, 0) 0%, rgba(0, 0, 0, 0) 100%)',\n+    'linear-gradient(to right in oklab, rgb(255, 0, 0) 0%, rgba(0, 0, 0, 0) 100%)',\n   ],\n   [\n     'bg-linear-to-r via-red',\n-    'linear-gradient(to right in oklch, rgba(0, 0, 0, 0) 0%, rgb(255, 0, 0) 50%, rgba(0, 0, 0, 0) 100%)',\n+    'linear-gradient(to right in oklab, rgba(0, 0, 0, 0) 0%, rgb(255, 0, 0) 50%, rgba(0, 0, 0, 0) 100%)',\n   ],\n   [\n     'bg-linear-to-r to-red',\n-    'linear-gradient(to right in oklch, rgba(0, 0, 0, 0) 0%, rgb(255, 0, 0) 100%)',\n+    'linear-gradient(to right in oklab, rgba(0, 0, 0, 0) 0%, rgb(255, 0, 0) 100%)',\n   ],\n   [\n     'bg-linear-to-r from-red to-blue',\n-    'linear-gradient(to right in oklch, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%)',\n+    'linear-gradient(to right in oklab, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%)',\n   ],\n   [\n     'bg-linear-45 from-red to-blue',\n-    'linear-gradient(45deg in oklch, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%)',\n+    'linear-gradient(45deg in oklab, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%)',\n   ],\n   [\n     '-bg-linear-45 from-red to-blue',\n     // Chrome reports a different (but also correct) computed value than Firefox/WebKit so we check\n     // for both options.\n     [\n-      'linear-gradient(-45deg in oklch, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%)',\n-      'linear-gradient(calc(-45deg) in oklch, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%)',\n+      'linear-gradient(-45deg in oklab, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%)',\n+      'linear-gradient(calc(-45deg) in oklab, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%)',\n     ],\n   ],\n   [\n     'bg-linear-to-r via-red to-blue',\n-    'linear-gradient(to right in oklch, rgba(0, 0, 0, 0) 0%, rgb(255, 0, 0) 50%, rgb(0, 0, 255) 100%)',\n+    'linear-gradient(to right in oklab, rgba(0, 0, 0, 0) 0%, rgb(255, 0, 0) 50%, rgb(0, 0, 255) 100%)',\n   ],\n   [\n     'bg-linear-to-r from-red via-green to-blue',\n-    'linear-gradient(to right in oklch, rgb(255, 0, 0) 0%, rgb(0, 255, 0) 50%, rgb(0, 0, 255) 100%)',\n+    'linear-gradient(to right in oklab, rgb(255, 0, 0) 0%, rgb(0, 255, 0) 50%, rgb(0, 0, 255) 100%)',\n   ],\n   [\n     'bg-linear-[to_right,var(--color-red),var(--color-green),var(--color-blue)]',\n@@ -91,13 +91,13 @@ test('background gradient, going from 2 to 3', async ({ page }) => {\n   )\n \n   expect(await getPropertyValue('#x', 'background-image')).toEqual(\n-    'linear-gradient(to right in oklch, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%)',\n+    'linear-gradient(to right in oklab, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%)',\n   )\n \n   await page.locator('#x').hover()\n \n   expect(await getPropertyValue('#x', 'background-image')).toEqual(\n-    'linear-gradient(to right in oklch, rgb(255, 0, 0) 0%, rgb(0, 255, 0) 50%, rgb(0, 0, 255) 100%)',\n+    'linear-gradient(to right in oklab, rgb(255, 0, 0) 0%, rgb(0, 255, 0) 50%, rgb(0, 0, 255) 100%)',\n   )\n })\n \n@@ -112,21 +112,21 @@ test('background gradient, going from 3 to 2', async ({ page }) => {\n   )\n \n   expect(await getPropertyValue('#x', 'background-image')).toEqual(\n-    'linear-gradient(to right in oklch, rgb(255, 0, 0) 0%, rgb(0, 255, 0) 50%, rgb(0, 0, 255) 100%)',\n+    'linear-gradient(to right in oklab, rgb(255, 0, 0) 0%, rgb(0, 255, 0) 50%, rgb(0, 0, 255) 100%)',\n   )\n \n   await page.locator('#x').hover()\n \n   expect(await getPropertyValue('#x', 'background-image')).toEqual(\n-    'linear-gradient(to right in oklch, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%)',\n+    'linear-gradient(to right in oklab, rgb(255, 0, 0) 0%, rgb(0, 0, 255) 100%)',\n   )\n })\n \n for (let [classes, expected] of [\n-  ['bg-conic from-red', 'conic-gradient(in oklch, rgb(255, 0, 0) 0%, rgba(0, 0, 0, 0) 100%)'],\n+  ['bg-conic from-red', 'conic-gradient(in oklab, rgb(255, 0, 0) 0%, rgba(0, 0, 0, 0) 100%)'],\n   [\n     'bg-conic-45 from-red',\n-    'conic-gradient(from 45deg in oklch, rgb(255, 0, 0) 0%, rgba(0, 0, 0, 0) 100%)',\n+    'conic-gradient(from 45deg in oklab, rgb(255, 0, 0) 0%, rgba(0, 0, 0, 0) 100%)',\n   ],\n   [\n     'bg-conic-[from_45deg] from-red',\n@@ -148,7 +148,7 @@ for (let [classes, expected] of [\n }\n \n for (let [classes, expected] of [\n-  ['bg-radial from-red', 'radial-gradient(in oklch, rgb(255, 0, 0) 0%, rgba(0, 0, 0, 0) 100%)'],\n+  ['bg-radial from-red', 'radial-gradient(in oklab, rgb(255, 0, 0) 0%, rgba(0, 0, 0, 0) 100%)'],\n   [\n     'bg-radial-[at_0%_0%] from-red',\n     'radial-gradient(at 0% 0%, rgb(255, 0, 0) 0%, rgba(0, 0, 0, 0) 100%)',\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15183"", ""pr_id"": 15183, ""issue_id"": 15170, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] arbritary values for row and col classes\nIn v4 utilities some utilities like grid-cols-12 and z-40 do not depend on the theme values and just work.\r\n\r\nDoes that mean that row-42 should also just work? Because it does not work in v4.0.0-beta.2.\r\nI still need the square brackets like row-[42]."", ""issue_word_count"": 60, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""124b82bc7999391f2f551b440f1e0241bcd01af6"", ""head_commit"": ""c7b273ccb5f071eccae6d28e8d19cd0c22c9521c"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15183"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15183"", ""dockerfile"": """", ""pr_merged_at"": ""2025-02-27T22:58:24.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex e2cf69322edc..f4b71efb7198 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -13,6 +13,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - _Experimental_: Add `inverted-colors` variant ([#11693](https://github.com/tailwindlabs/tailwindcss/pull/11693))\n - _Experimental_: Add `user-valid` and `user-invalid` variants ([#12370](https://github.com/tailwindlabs/tailwindcss/pull/12370))\n - _Experimental_: Add `wrap-anywhere`, `wrap-break-word`, and `wrap-normal` utilities ([#12128](https://github.com/tailwindlabs/tailwindcss/pull/12128))\n+- Add `col-<number>` and `row-<number>` utilities for `grid-column` and `grid-row` ([#15183](https://github.com/tailwindlabs/tailwindcss/pull/15183))\n \n ## [4.0.9] - 2025-02-25\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex a5a31a006780..1fa8bd216151 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -651,6 +651,11 @@ export function createUtilities(theme: Theme) {\n    */\n   staticUtility('col-auto', [['grid-column', 'auto']])\n   functionalUtility('col', {\n+    supportsNegative: true,\n+    handleBareValue: ({ value }) => {\n+      if (!isPositiveInteger(value)) return null\n+      return value\n+    },\n     themeKeys: ['--grid-column'],\n     handle: (value) => [decl('grid-column', value)],\n   })\n@@ -719,6 +724,11 @@ export function createUtilities(theme: Theme) {\n    */\n   staticUtility('row-auto', [['grid-row', 'auto']])\n   functionalUtility('row', {\n+    supportsNegative: true,\n+    handleBareValue: ({ value }) => {\n+      if (!isPositiveInteger(value)) return null\n+      return value\n+    },\n     themeKeys: ['--grid-row'],\n     handle: (value) => [decl('grid-row', value)],\n   })\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 0530b7fc954e..d0be566effc0 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -1086,6 +1086,8 @@ test('order', async () => {\n test('col', async () => {\n   expect(\n     await run([\n+      'col-11',\n+      '-col-12',\n       'col-auto',\n       'col-span-4',\n       'col-span-17',\n@@ -1094,7 +1096,15 @@ test('col', async () => {\n       'col-span-[var(--my-variable)]',\n     ]),\n   ).toMatchInlineSnapshot(`\n-    \"".col-\\\\[span_123\\\\/span_123\\\\] {\n+    \"".-col-12 {\n+      grid-column: calc(12 * -1);\n+    }\n+\n+    .col-11 {\n+      grid-column: 11;\n+    }\n+\n+    .col-\\\\[span_123\\\\/span_123\\\\] {\n       grid-column: span 123 / span 123;\n     }\n \n@@ -1213,6 +1223,8 @@ test('col-end', async () => {\n test('row', async () => {\n   expect(\n     await run([\n+      'row-11',\n+      '-row-12',\n       'row-auto',\n       'row-span-4',\n       'row-span-17',\n@@ -1221,7 +1233,15 @@ test('row', async () => {\n       'row-span-[var(--my-variable)]',\n     ]),\n   ).toMatchInlineSnapshot(`\n-    \"".row-\\\\[span_123\\\\/span_123\\\\] {\n+    \"".-row-12 {\n+      grid-row: calc(12 * -1);\n+    }\n+\n+    .row-11 {\n+      grid-row: 11;\n+    }\n+\n+    .row-\\\\[span_123\\\\/span_123\\\\] {\n       grid-row: span 123 / span 123;\n     }\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15180"", ""pr_id"": 15180, ""issue_id"": 15146, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Problem with custom spacing - v4 is referencing var(--container-*) instead of var(--spacing-*)\nI think we should probably read from `--spacing-*` before reading from `--container-*` for most of these utilities to solve this.\r\n\r\n### Discussed in https://github.com/tailwindlabs/tailwindcss/discussions/15145\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **steveclarke** November 23, 2024</sup>\r\nIn my Tailwind v3 project I have the following custom named spacing:\r\n\r\n```js\r\n  theme: {\r\n    extend: {\r\n      spacing: {\r\n        xxs: defaultTheme.spacing[1],\r\n        xs: defaultTheme.spacing[2],\r\n        sm: defaultTheme.spacing[4],\r\n        md: defaultTheme.spacing[6],\r\n        lg: defaultTheme.spacing[8],\r\n        xl: defaultTheme.spacing[12],\r\n        \""2xl\"": defaultTheme.spacing[16],\r\n      }\r\n    },\r\n  },\r\n```\r\n\r\nI'm then able to use `class=\""w-lg h-lg\""` in my project. In version 3, `w-lg` and `w-hg` are correctly being set to `width: 2rem`, and `height; 2rem`, respectively.\r\n\r\nWhen I upgraded to v4, the above configuration got converted to:\r\n\r\n```css\r\n@theme {\r\n  --spacing-xxs: 0.25rem;\r\n  --spacing-xs: 0.5rem;\r\n  --spacing-sm: 1rem;\r\n  --spacing-md: 1.5rem;\r\n  --spacing-lg: 2rem;\r\n  --spacing-xl: 3rem;\r\n  --spacing-2xl: 4rem;\r\n}\r\n```\r\n\r\nNow my `h-lg` continues to work as expected. However, my `w-lg` is using the `container-lg` value. The generated CSS looks like:\r\n\r\n```css\r\n  .h-lg {\r\n    height: var(--spacing-lg);\r\n  }\r\n  .w-lg {\r\n    width: var(--container-lg);\r\n  }\r\n```\r\n\r\nNotice that `h-lg` references the CSS variable `--spacing-lg`, but `w-12` references the CSS variable `--container-lg`\r\n\r\nThis causes content width to be incorrect after the upgrade. Wondering if this is a known issue?\r\n\r\n---\r\n\r\nFor the following HTML:\r\n```html\r\n      <div class=\""flex gap-4 p-10\"">\r\n        <div class=\""w-lg h-lg debug flex justify-center items-center\"">1</div>\r\n        <div class=\""w-8 h-8 debug flex justify-center items-center\"">2</div>\r\n      </div>\r\n```\r\n\r\n## V3\r\n\r\n![image](https://github.com/user-attachments/assets/05f4519d-ca44-43e6-94a5-130a4d98f551)\r\n\r\n## V4\r\n\r\n![image](https://github.com/user-attachments/assets/15a8ebc2-492c-4b68-a510-1935ea527557)\r\n</div>"", ""issue_word_count"": 312, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""068b1c2c761fd418009b52afa6c3ff324dd88f0c"", ""head_commit"": ""003119ef7295982cf6be3598ba25baececcdd937"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15180"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15180"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-26T14:45:16.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 349e4ddc213a..bcb1289fe94f 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure any necessary vendor prefixes are generated for iOS Safari, Firefox, and Chrome ([#15166](https://github.com/tailwindlabs/tailwindcss/pull/15166))\n - Ensure `.group` and `.peer` are prefixed when using the `prefix(\u2026)` option ([#15174](https://github.com/tailwindlabs/tailwindcss/pull/15174))\n - Ensure 3D transforms render correctly in Safari ([#15179](https://github.com/tailwindlabs/tailwindcss/pull/15179))\n+- Ensure `--spacing-*` variables take precedence over `--container-*` variables ([#15180](https://github.com/tailwindlabs/tailwindcss/pull/15180))\n \n ## [4.0.0-beta.2] - 2024-11-22\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex e261b5dbae5a..5300967e2b61 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -374,7 +374,7 @@ export function createUtilities(theme: Theme) {\n \n   function spacingUtility(\n     name: string,\n-    themeNamespace: ThemeKey | ThemeKey[],\n+    themeKeys: ThemeKey[],\n     handle: (value: string) => AstNode[] | undefined,\n     {\n       supportsNegative = false,\n@@ -388,7 +388,6 @@ export function createUtilities(theme: Theme) {\n       utilities.static(`-${name}-px`, () => handle('-1px'))\n     }\n     utilities.static(`${name}-px`, () => handle('1px'))\n-    let themeKeys = ([] as ThemeKey[]).concat(themeNamespace, '--spacing')\n     functionalUtility(name, {\n       themeKeys,\n       supportsFractions,\n@@ -522,7 +521,7 @@ export function createUtilities(theme: Theme) {\n     staticUtility(`${name}-auto`, [[property, 'auto']])\n     staticUtility(`${name}-full`, [[property, '100%']])\n     staticUtility(`-${name}-full`, [[property, '-100%']])\n-    spacingUtility(name, '--inset', (value) => [decl(property, value)], {\n+    spacingUtility(name, ['--inset', '--spacing'], (value) => [decl(property, value)], {\n       supportsNegative: true,\n       supportsFractions: true,\n     })\n@@ -751,7 +750,7 @@ export function createUtilities(theme: Theme) {\n     ['ml', 'margin-left'],\n   ] as const) {\n     staticUtility(`${namespace}-auto`, [[property, 'auto']])\n-    spacingUtility(namespace, '--margin', (value) => [decl(property, value)], {\n+    spacingUtility(namespace, ['--margin', '--spacing'], (value) => [decl(property, value)], {\n       supportsNegative: true,\n     })\n   }\n@@ -890,7 +889,7 @@ export function createUtilities(theme: Theme) {\n \n   spacingUtility(\n     'size',\n-    ['--size'],\n+    ['--size', '--spacing'],\n     (value) => [decl('--tw-sort', 'size'), decl('width', value), decl('height', value)],\n     {\n       supportsFractions: true,\n@@ -898,12 +897,12 @@ export function createUtilities(theme: Theme) {\n   )\n \n   for (let [name, namespaces, property] of [\n-    ['w', ['--width', '--container'], 'width'],\n-    ['min-w', ['--min-width', '--container'], 'min-width'],\n-    ['max-w', ['--max-width', '--container'], 'max-width'],\n-    ['h', ['--height'], 'height'],\n-    ['min-h', ['--min-height', '--height'], 'min-height'],\n-    ['max-h', ['--max-height', '--height'], 'max-height'],\n+    ['w', ['--width', '--spacing', '--container'], 'width'],\n+    ['min-w', ['--min-width', '--spacing', '--container'], 'min-width'],\n+    ['max-w', ['--max-width', '--spacing', '--container'], 'max-width'],\n+    ['h', ['--height', '--spacing'], 'height'],\n+    ['min-h', ['--min-height', '--height', '--spacing'], 'min-height'],\n+    ['max-h', ['--max-height', '--height', '--spacing'], 'max-height'],\n   ] as [string, ThemeKey[], string][]) {\n     spacingUtility(name, namespaces, (value) => [decl(property, value)], {\n       supportsFractions: true,\n@@ -997,9 +996,14 @@ export function createUtilities(theme: Theme) {\n    */\n   staticUtility('basis-auto', [['flex-basis', 'auto']])\n   staticUtility('basis-full', [['flex-basis', '100%']])\n-  spacingUtility('basis', ['--flex-basis', '--container'], (value) => [decl('flex-basis', value)], {\n-    supportsFractions: true,\n-  })\n+  spacingUtility(\n+    'basis',\n+    ['--flex-basis', '--spacing', '--container'],\n+    (value) => [decl('flex-basis', value)],\n+    {\n+      supportsFractions: true,\n+    },\n+  )\n \n   /**\n    * @css `table-layout`\n@@ -1028,20 +1032,20 @@ export function createUtilities(theme: Theme) {\n   /**\n    * @css `border-spacing`\n    */\n-  spacingUtility('border-spacing', ['--border-spacing'], (value) => [\n+  spacingUtility('border-spacing', ['--border-spacing', '--spacing'], (value) => [\n     borderSpacingProperties(),\n     decl('--tw-border-spacing-x', value),\n     decl('--tw-border-spacing-y', value),\n     decl('border-spacing', 'var(--tw-border-spacing-x) var(--tw-border-spacing-y)'),\n   ])\n \n-  spacingUtility('border-spacing-x', ['--border-spacing'], (value) => [\n+  spacingUtility('border-spacing-x', ['--border-spacing', '--spacing'], (value) => [\n     borderSpacingProperties(),\n     decl('--tw-border-spacing-x', value),\n     decl('border-spacing', 'var(--tw-border-spacing-x) var(--tw-border-spacing-y)'),\n   ])\n \n-  spacingUtility('border-spacing-y', ['--border-spacing'], (value) => [\n+  spacingUtility('border-spacing-y', ['--border-spacing', '--spacing'], (value) => [\n     borderSpacingProperties(),\n     decl('--tw-border-spacing-y', value),\n     decl('border-spacing', 'var(--tw-border-spacing-x) var(--tw-border-spacing-y)'),\n@@ -1113,7 +1117,7 @@ export function createUtilities(theme: Theme) {\n \n   spacingUtility(\n     'translate',\n-    ['--translate'],\n+    ['--translate', '--spacing'],\n     (value) => [\n       translateProperties(),\n       decl('--tw-translate-x', value),\n@@ -1136,7 +1140,7 @@ export function createUtilities(theme: Theme) {\n     ])\n     spacingUtility(\n       `translate-${axis}`,\n-      ['--translate'],\n+      ['--translate', '--spacing'],\n       (value) => [\n         translateProperties(),\n         decl(`--tw-translate-${axis}`, value),\n@@ -1151,7 +1155,7 @@ export function createUtilities(theme: Theme) {\n \n   spacingUtility(\n     `translate-z`,\n-    ['--translate'],\n+    ['--translate', '--spacing'],\n     (value) => [\n       translateProperties(),\n       decl(`--tw-translate-z`, value),\n@@ -1615,9 +1619,14 @@ export function createUtilities(theme: Theme) {\n     ['scroll-mb', 'scroll-margin-bottom'],\n     ['scroll-ml', 'scroll-margin-left'],\n   ] as const) {\n-    spacingUtility(namespace, '--scroll-margin', (value) => [decl(property, value)], {\n-      supportsNegative: true,\n-    })\n+    spacingUtility(\n+      namespace,\n+      ['--scroll-margin', '--spacing'],\n+      (value) => [decl(property, value)],\n+      {\n+        supportsNegative: true,\n+      },\n+    )\n   }\n \n   /**\n@@ -1634,7 +1643,7 @@ export function createUtilities(theme: Theme) {\n     ['scroll-pb', 'scroll-padding-bottom'],\n     ['scroll-pl', 'scroll-padding-left'],\n   ] as const) {\n-    spacingUtility(namespace, '--scroll-padding', (value) => [decl(property, value)])\n+    spacingUtility(namespace, ['--scroll-padding', '--spacing'], (value) => [decl(property, value)])\n   }\n \n   staticUtility('list-inside', [['list-style-position', 'inside']])\n@@ -1816,13 +1825,13 @@ export function createUtilities(theme: Theme) {\n   staticUtility('justify-items-end', [['justify-items', 'end']])\n   staticUtility('justify-items-stretch', [['justify-items', 'stretch']])\n \n-  spacingUtility('gap', ['--gap'], (value) => [decl('gap', value)])\n-  spacingUtility('gap-x', ['--gap'], (value) => [decl('column-gap', value)])\n-  spacingUtility('gap-y', ['--gap'], (value) => [decl('row-gap', value)])\n+  spacingUtility('gap', ['--gap', '--spacing'], (value) => [decl('gap', value)])\n+  spacingUtility('gap-x', ['--gap', '--spacing'], (value) => [decl('column-gap', value)])\n+  spacingUtility('gap-y', ['--gap', '--spacing'], (value) => [decl('row-gap', value)])\n \n   spacingUtility(\n     'space-x',\n-    ['--space'],\n+    ['--space', '--spacing'],\n     (value) => [\n       atRoot([property('--tw-space-x-reverse', '0', '<number>')]),\n \n@@ -1838,7 +1847,7 @@ export function createUtilities(theme: Theme) {\n \n   spacingUtility(\n     'space-y',\n-    ['--space'],\n+    ['--space', '--spacing'],\n     (value) => [\n       atRoot([property('--tw-space-y-reverse', '0', '<number>')]),\n       styleRule(':where(& > :not(:last-child))', [\n@@ -2822,7 +2831,7 @@ export function createUtilities(theme: Theme) {\n     ['pb', 'padding-bottom'],\n     ['pl', 'padding-left'],\n   ] as const) {\n-    spacingUtility(name, '--padding', (value) => [decl(property, value)])\n+    spacingUtility(name, ['--padding', '--spacing'], (value) => [decl(property, value)])\n   }\n \n   staticUtility('text-left', [['text-align', 'left']])\n@@ -2832,9 +2841,14 @@ export function createUtilities(theme: Theme) {\n   staticUtility('text-start', [['text-align', 'start']])\n   staticUtility('text-end', [['text-align', 'end']])\n \n-  spacingUtility('indent', ['--text-indent'], (value) => [decl('text-indent', value)], {\n-    supportsNegative: true,\n-  })\n+  spacingUtility(\n+    'indent',\n+    ['--text-indent', '--spacing'],\n+    (value) => [decl('text-indent', value)],\n+    {\n+      supportsNegative: true,\n+    },\n+  )\n \n   staticUtility('align-baseline', [['vertical-align', 'baseline']])\n   staticUtility('align-top', [['vertical-align', 'top']])\n@@ -3727,7 +3741,7 @@ export function createUtilities(theme: Theme) {\n     ['--tw-leading', '1'],\n     ['line-height', '1'],\n   ])\n-  spacingUtility('leading', ['--leading'], (value) => [\n+  spacingUtility('leading', ['--leading', '--spacing'], (value) => [\n     atRoot([property('--tw-leading')]),\n     decl('--tw-leading', value),\n     decl('line-height', value),\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 4c0191c7e661..331ce448ab67 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -17025,6 +17025,40 @@ describe('spacing utilities', () => {\n \n     expect(optimizeCss(compiled).trim()).toEqual('')\n   })\n+\n+  test('--spacing-* variables take precedence over --container-* variables', async () => {\n+    let { build } = await compile(css`\n+      @theme {\n+        --spacing-sm: 8px;\n+        --container-sm: 256px;\n+      }\n+      @tailwind utilities;\n+    `)\n+    let compiled = build(['w-sm', 'max-w-sm', 'min-w-sm', 'basis-sm'])\n+\n+    expect(optimizeCss(compiled).trim()).toMatchInlineSnapshot(`\n+      \"":root {\n+        --spacing-sm: 8px;\n+        --container-sm: 256px;\n+      }\n+\n+      .w-sm {\n+        width: var(--spacing-sm);\n+      }\n+\n+      .max-w-sm {\n+        max-width: var(--spacing-sm);\n+      }\n+\n+      .min-w-sm {\n+        min-width: var(--spacing-sm);\n+      }\n+\n+      .basis-sm {\n+        flex-basis: var(--spacing-sm);\n+      }\""\n+    `)\n+  })\n })\n \n describe('custom utilities', () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15179"", ""pr_id"": 15179, ""issue_id"": 15144, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4]: `rotate-y-*` utilities rotate in the x dimension in Safari\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-beta.2\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nNextjs 15.0.3\r\n\r\n**What version of Node.js are you using?**\r\n\r\n20.17.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome, iOS Safari, macOS Safari\r\n\r\n**What operating system are you using?**\r\n\r\nWindows 11, iOS 18.1, macOS 15.0.1\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/sHoCSE6sM2\r\n\r\n**Describe your issue**\r\n\r\nin Safari, `rotate-y-180` flips vertically instead of horizontally. I've added `hover:` for desktop usage and `active:` (press) for mobile. Manually overriding the utility like so fixes it:\r\n```css\r\n@utility rotate-y-180 {\r\n  transform: rotateY(180deg);\r\n}\r\n```\r\n\r\n`rotate-y-45` does appear to \""shrink\"" vertically too, so perhaps it's all `rotate-y-*` utilities. `rotate-x-*` appears to be fine."", ""issue_word_count"": 183, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""98359bea942d50d321b84ccab16ed288477a2a94"", ""head_commit"": ""c9e5dccc135bd5ace0690286e8e46b9ae82f3cee"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15179"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15179"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-26T02:20:54.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 32272f11ec4d..262a627d4b2d 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -10,6 +10,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Fixed\n \n - Ensure `.group` and `.peer` are prefixed when using the `prefix(\u2026)` option ([#15174](https://github.com/tailwindlabs/tailwindcss/pull/15174))\n+- Ensure 3D transforms render correctly in Safari ([#15179](https://github.com/tailwindlabs/tailwindcss/pull/15179))\n \n ## [4.0.0-beta.2] - 2024-11-22\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 6a8b8133f937..e261b5dbae5a 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -1317,11 +1317,11 @@ export function createUtilities(theme: Theme) {\n \n     let transformProperties = () =>\n       atRoot([\n-        property('--tw-rotate-x', 'rotateX(0)', '<transform-function>'),\n-        property('--tw-rotate-y', 'rotateY(0)', '<transform-function>'),\n-        property('--tw-rotate-z', 'rotateZ(0)', '<transform-function>'),\n-        property('--tw-skew-x', 'skewX(0)', '<transform-function>'),\n-        property('--tw-skew-y', 'skewY(0)', '<transform-function>'),\n+        property('--tw-rotate-x', 'rotateX(0)'),\n+        property('--tw-rotate-y', 'rotateY(0)'),\n+        property('--tw-rotate-z', 'rotateZ(0)'),\n+        property('--tw-skew-x', 'skewX(0)'),\n+        property('--tw-skew-y', 'skewY(0)'),\n       ])\n \n     for (let axis of ['x', 'y', 'z']) {\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex fe7e701e2ec1..9c22d51e1098 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -4467,31 +4467,31 @@ test('rotate-x', async () => {\n     }\n \n     @property --tw-rotate-x {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateX(0);\n     }\n \n     @property --tw-rotate-y {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateY(0);\n     }\n \n     @property --tw-rotate-z {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateZ(0);\n     }\n \n     @property --tw-skew-x {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: skewX(0);\n     }\n \n     @property --tw-skew-y {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: skewY(0);\n     }\""\n@@ -4545,31 +4545,31 @@ test('rotate-y', async () => {\n       }\n \n       @property --tw-rotate-x {\n-        syntax: \""<transform-function>\"";\n+        syntax: \""*\"";\n         inherits: false;\n         initial-value: rotateX(0);\n       }\n \n       @property --tw-rotate-y {\n-        syntax: \""<transform-function>\"";\n+        syntax: \""*\"";\n         inherits: false;\n         initial-value: rotateY(0);\n       }\n \n       @property --tw-rotate-z {\n-        syntax: \""<transform-function>\"";\n+        syntax: \""*\"";\n         inherits: false;\n         initial-value: rotateZ(0);\n       }\n \n       @property --tw-skew-x {\n-        syntax: \""<transform-function>\"";\n+        syntax: \""*\"";\n         inherits: false;\n         initial-value: skewX(0);\n       }\n \n       @property --tw-skew-y {\n-        syntax: \""<transform-function>\"";\n+        syntax: \""*\"";\n         inherits: false;\n         initial-value: skewY(0);\n       }\""\n@@ -4623,31 +4623,31 @@ test('rotate-z', async () => {\n       }\n \n       @property --tw-rotate-x {\n-        syntax: \""<transform-function>\"";\n+        syntax: \""*\"";\n         inherits: false;\n         initial-value: rotateX(0);\n       }\n \n       @property --tw-rotate-y {\n-        syntax: \""<transform-function>\"";\n+        syntax: \""*\"";\n         inherits: false;\n         initial-value: rotateY(0);\n       }\n \n       @property --tw-rotate-z {\n-        syntax: \""<transform-function>\"";\n+        syntax: \""*\"";\n         inherits: false;\n         initial-value: rotateZ(0);\n       }\n \n       @property --tw-skew-x {\n-        syntax: \""<transform-function>\"";\n+        syntax: \""*\"";\n         inherits: false;\n         initial-value: skewX(0);\n       }\n \n       @property --tw-skew-y {\n-        syntax: \""<transform-function>\"";\n+        syntax: \""*\"";\n         inherits: false;\n         initial-value: skewY(0);\n       }\""\n@@ -4698,31 +4698,31 @@ test('skew', async () => {\n     }\n \n     @property --tw-rotate-x {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateX(0);\n     }\n \n     @property --tw-rotate-y {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateY(0);\n     }\n \n     @property --tw-rotate-z {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateZ(0);\n     }\n \n     @property --tw-skew-x {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: skewX(0);\n     }\n \n     @property --tw-skew-y {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: skewY(0);\n     }\""\n@@ -4769,31 +4769,31 @@ test('skew-x', async () => {\n     }\n \n     @property --tw-rotate-x {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateX(0);\n     }\n \n     @property --tw-rotate-y {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateY(0);\n     }\n \n     @property --tw-rotate-z {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateZ(0);\n     }\n \n     @property --tw-skew-x {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: skewX(0);\n     }\n \n     @property --tw-skew-y {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: skewY(0);\n     }\""\n@@ -4840,31 +4840,31 @@ test('skew-y', async () => {\n     }\n \n     @property --tw-rotate-x {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateX(0);\n     }\n \n     @property --tw-rotate-y {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateY(0);\n     }\n \n     @property --tw-rotate-z {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateZ(0);\n     }\n \n     @property --tw-skew-x {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: skewX(0);\n     }\n \n     @property --tw-skew-y {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: skewY(0);\n     }\""\n@@ -5244,31 +5244,31 @@ test('transform', async () => {\n     }\n \n     @property --tw-rotate-x {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateX(0);\n     }\n \n     @property --tw-rotate-y {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateY(0);\n     }\n \n     @property --tw-rotate-z {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: rotateZ(0);\n     }\n \n     @property --tw-skew-x {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: skewX(0);\n     }\n \n     @property --tw-skew-y {\n-      syntax: \""<transform-function>\"";\n+      syntax: \""*\"";\n       inherits: false;\n       initial-value: skewY(0);\n     }\""\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15174"", ""pr_id"": 15174, ""issue_id"": 15172, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""`group-hover` is generated without respecting Tailwind CSS `prefix` option\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.beta2\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nTailwindCSS playground\r\n\r\n**What version of Node.js are you using?**\r\n\r\nTailwindCSS playground\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/NS2lqkVlqT\r\n\r\nIf I change `group` to `x:group`, the output does not change on hover, so it is likely that the generated selector ignores `prefix`\r\n\r\n**Describe your issue**\r\n\r\n<img width=\""965\"" alt=\""image\"" src=\""https://github.com/user-attachments/assets/0af76e1c-ae2d-4bf4-8800-50294da58b2d\"">\r\n"", ""issue_word_count"": 146, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/prefix.test.ts"", ""packages/tailwindcss/src/variants.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/prefix.test.ts""], ""base_commit"": ""bd43d63df27b89947c13d49f0e4ecdd94e925f33"", ""head_commit"": ""7ecf3c95c385701482214d22709dd4ed9afe137a"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15174"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15174"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-25T21:00:21.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 8ea16a6fc9c9..32272f11ec4d 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -7,7 +7,9 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ## [Unreleased]\n \n-- Nothing yet!\n+### Fixed\n+\n+- Ensure `.group` and `.peer` are prefixed when using the `prefix(\u2026)` option ([#15174](https://github.com/tailwindlabs/tailwindcss/pull/15174))\n \n ## [4.0.0-beta.2] - 2024-11-22\n \n\ndiff --git a/packages/tailwindcss/src/variants.ts b/packages/tailwindcss/src/variants.ts\nindex a88f3d50660f..99cd20a455d4 100644\n--- a/packages/tailwindcss/src/variants.ts\n+++ b/packages/tailwindcss/src/variants.ts\n@@ -518,8 +518,8 @@ export function createVariants(theme: Theme): Variants {\n     // Name the group by appending the modifier to `group` class itself if\n     // present.\n     let variantSelector = variant.modifier\n-      ? `:where(.group\\\\/${variant.modifier.value})`\n-      : ':where(.group)'\n+      ? `:where(.${theme.prefix ? `${theme.prefix}\\\\:` : ''}group\\\\/${variant.modifier.value})`\n+      : `:where(.${theme.prefix ? `${theme.prefix}\\\\:` : ''}group)`\n \n     let didApply = false\n \n@@ -570,8 +570,8 @@ export function createVariants(theme: Theme): Variants {\n     // Name the peer by appending the modifier to `peer` class itself if\n     // present.\n     let variantSelector = variant.modifier\n-      ? `:where(.peer\\\\/${variant.modifier.value})`\n-      : ':where(.peer)'\n+      ? `:where(.${theme.prefix ? `${theme.prefix}\\\\:` : ''}peer\\\\/${variant.modifier.value})`\n+      : `:where(.${theme.prefix ? `${theme.prefix}\\\\:` : ''}peer)`\n \n     let didApply = false\n \n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/prefix.test.ts b/packages/tailwindcss/src/prefix.test.ts\nindex aa9e67b5a21c..27a71b6179f1 100644\n--- a/packages/tailwindcss/src/prefix.test.ts\n+++ b/packages/tailwindcss/src/prefix.test.ts\n@@ -17,14 +17,35 @@ test('utilities must be prefixed', async () => {\n   let compiler = await compile(input)\n \n   // Prefixed utilities are generated\n-  expect(compiler.build(['tw:underline', 'tw:hover:line-through', 'tw:custom']))\n-    .toMatchInlineSnapshot(`\n+  expect(\n+    compiler.build([\n+      'tw:underline',\n+      'tw:hover:line-through',\n+      'tw:custom',\n+      'tw:group-hover:flex',\n+      'tw:peer-hover:flex',\n+    ]),\n+  ).toMatchInlineSnapshot(`\n     \"".tw\\\\:custom {\n       color: red;\n     }\n     .tw\\\\:underline {\n       text-decoration-line: underline;\n     }\n+    .tw\\\\:group-hover\\\\:flex {\n+      &:is(:where(.tw\\\\:group):hover *) {\n+        @media (hover: hover) {\n+          display: flex;\n+        }\n+      }\n+    }\n+    .tw\\\\:peer-hover\\\\:flex {\n+      &:is(:where(.tw\\\\:peer):hover ~ *) {\n+        @media (hover: hover) {\n+          display: flex;\n+        }\n+      }\n+    }\n     .tw\\\\:hover\\\\:line-through {\n       &:hover {\n         @media (hover: hover) {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15173"", ""pr_id"": 15173, ""issue_id"": 15159, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Resolve `@import` or `@source` from `vite.resolve.alias`\n**What version of Tailwind CSS are you using?**\r\n\r\ntailwindcss: v4.0.0-beta.2\r\n@tailwindcss/vite: v4.0.0-beta.2\r\n@tailwindcss/postcss:  v4.0.0-beta.2\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite: v5.4.11\r\n\r\n**What browser are you using?**\r\n\r\nChrome, Safari, etc\r\n\r\n**What operating system are you using?**\r\n\r\n macOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/TiBianMod/vite-tailwindcss\r\n\r\n### Reproduction contains 3 Branches\r\n- `main`: `without tailwindcss` WORKING\r\n- `@tailwindcss/postcss`: WORKING\r\n- `@tailwindcss/vite`: NOT WORKING - Throws\r\n\r\n**Describe your issue**\r\n\r\n- `@tailwindcss/vite` Can't resolve `@import` or `@source` from [vite.resolve.alias](https://vite.dev/config/shared-options.html#resolve-alias)\r\n\r\n- `@tailwindcss/postcss` Can't resolve `@source` from [vite.resolve.alias](https://vite.dev/config/shared-options.html#resolve-alias)\r\n\r\n```sh\r\n  VITE v5.4.11  ready in 403 ms\r\n\r\n  \u279c  Local:   http://localhost:5173/\r\n  \u279c  Network: use --host to expose\r\n  \u279c  press h + enter to show help\r\n\r\n7:51:44 PM [vite] Internal server error: Can't resolve '#resolveThisCss' in '/Users/user/Code/vite-tailwindcss/src'\r\n  Plugin: @tailwindcss/vite:generate:serve\r\n```"", ""issue_word_count"": 185, ""test_files_count"": 1, ""non_test_files_count"": 4, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/resolvers.test.ts"", ""packages/@tailwindcss-node/src/compile.ts"", ""packages/@tailwindcss-vite/src/index.ts"", ""pnpm-lock.yaml""], ""pr_changed_test_files"": [""integrations/vite/resolvers.test.ts""], ""base_commit"": ""a1f78a2b34ba4e5f347f05e6892bf730e66c436a"", ""head_commit"": ""5563aa30995bbf5cf0b90d2f720de4fd5d3efbf0"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15173"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15173"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-27T16:48:55.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex c790cdccf292..164d01e06b6e 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -9,6 +9,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ### Added\n \n+- Ensure the Vite plugin resolves CSS and JS files according to the configured resolver conditions ([#15173])(https://github.com/tailwindlabs/tailwindcss/pull/15173)\n - _Upgrade (experimental)_: Migrate prefixes for `.group` and `.peer` classes ([#15208](https://github.com/tailwindlabs/tailwindcss/pull/15208))\n \n ### Fixed\n\ndiff --git a/packages/@tailwindcss-node/src/compile.ts b/packages/@tailwindcss-node/src/compile.ts\nindex 396b7116e54a..a7aaf3e64849 100644\n--- a/packages/@tailwindcss-node/src/compile.ts\n+++ b/packages/@tailwindcss-node/src/compile.ts\n@@ -11,25 +11,33 @@ import {\n import { getModuleDependencies } from './get-module-dependencies'\n import { rewriteUrls } from './urls'\n \n+export type Resolver = (id: string, base: string) => Promise<string | false | undefined>\n+\n export async function compile(\n   css: string,\n   {\n     base,\n     onDependency,\n     shouldRewriteUrls,\n+\n+    customCssResolver,\n+    customJsResolver,\n   }: {\n     base: string\n     onDependency: (path: string) => void\n     shouldRewriteUrls?: boolean\n+\n+    customCssResolver?: Resolver\n+    customJsResolver?: Resolver\n   },\n ) {\n   let compiler = await _compile(css, {\n     base,\n     async loadModule(id, base) {\n-      return loadModule(id, base, onDependency)\n+      return loadModule(id, base, onDependency, customJsResolver)\n     },\n     async loadStylesheet(id, base) {\n-      let sheet = await loadStylesheet(id, base, onDependency)\n+      let sheet = await loadStylesheet(id, base, onDependency, customCssResolver)\n \n       if (shouldRewriteUrls) {\n         sheet.content = await rewriteUrls({\n@@ -80,9 +88,14 @@ export async function __unstable__loadDesignSystem(css: string, { base }: { base\n   })\n }\n \n-export async function loadModule(id: string, base: string, onDependency: (path: string) => void) {\n+export async function loadModule(\n+  id: string,\n+  base: string,\n+  onDependency: (path: string) => void,\n+  customJsResolver?: Resolver,\n+) {\n   if (id[0] !== '.') {\n-    let resolvedPath = await resolveJsId(id, base)\n+    let resolvedPath = await resolveJsId(id, base, customJsResolver)\n     if (!resolvedPath) {\n       throw new Error(`Could not resolve '${id}' from '${base}'`)\n     }\n@@ -94,7 +107,7 @@ export async function loadModule(id: string, base: string, onDependency: (path:\n     }\n   }\n \n-  let resolvedPath = await resolveJsId(id, base)\n+  let resolvedPath = await resolveJsId(id, base, customJsResolver)\n   if (!resolvedPath) {\n     throw new Error(`Could not resolve '${id}' from '${base}'`)\n   }\n@@ -113,8 +126,13 @@ export async function loadModule(id: string, base: string, onDependency: (path:\n   }\n }\n \n-async function loadStylesheet(id: string, base: string, onDependency: (path: string) => void) {\n-  let resolvedPath = await resolveCssId(id, base)\n+async function loadStylesheet(\n+  id: string,\n+  base: string,\n+  onDependency: (path: string) => void,\n+  cssResolver?: Resolver,\n+) {\n+  let resolvedPath = await resolveCssId(id, base, cssResolver)\n   if (!resolvedPath) throw new Error(`Could not resolve '${id}' from '${base}'`)\n \n   onDependency(resolvedPath)\n@@ -163,7 +181,11 @@ const cssResolver = EnhancedResolve.ResolverFactory.createResolver({\n   mainFields: ['style'],\n   conditionNames: ['style'],\n })\n-async function resolveCssId(id: string, base: string): Promise<string | false | undefined> {\n+async function resolveCssId(\n+  id: string,\n+  base: string,\n+  customCssResolver?: Resolver,\n+): Promise<string | false | undefined> {\n   if (typeof globalThis.__tw_resolve === 'function') {\n     let resolved = globalThis.__tw_resolve(id, base)\n     if (resolved) {\n@@ -171,6 +193,13 @@ async function resolveCssId(id: string, base: string): Promise<string | false |\n     }\n   }\n \n+  if (customCssResolver) {\n+    let customResolution = await customCssResolver(id, base)\n+    if (customResolution) {\n+      return customResolution\n+    }\n+  }\n+\n   return runResolver(cssResolver, id, base)\n }\n \n@@ -188,13 +217,25 @@ const cjsResolver = EnhancedResolve.ResolverFactory.createResolver({\n   conditionNames: ['node', 'require'],\n })\n \n-function resolveJsId(id: string, base: string): Promise<string | false | undefined> {\n+async function resolveJsId(\n+  id: string,\n+  base: string,\n+  customJsResolver?: Resolver,\n+): Promise<string | false | undefined> {\n   if (typeof globalThis.__tw_resolve === 'function') {\n     let resolved = globalThis.__tw_resolve(id, base)\n     if (resolved) {\n       return Promise.resolve(resolved)\n     }\n   }\n+\n+  if (customJsResolver) {\n+    let customResolution = await customJsResolver(id, base)\n+    if (customResolution) {\n+      return customResolution\n+    }\n+  }\n+\n   return runResolver(esmResolver, id, base).catch(() => runResolver(cjsResolver, id, base))\n }\n \n\ndiff --git a/packages/@tailwindcss-vite/src/index.ts b/packages/@tailwindcss-vite/src/index.ts\nindex 2c08920bb2e6..e14b84cf7f2d 100644\n--- a/packages/@tailwindcss-vite/src/index.ts\n+++ b/packages/@tailwindcss-vite/src/index.ts\n@@ -35,9 +35,31 @@ export default function tailwindcss(): Plugin[] {\n   let moduleGraphCandidates = new DefaultMap<string, Set<string>>(() => new Set<string>())\n   let moduleGraphScanner = new Scanner({})\n \n-  let roots: DefaultMap<string, Root> = new DefaultMap(\n-    (id) => new Root(id, () => moduleGraphCandidates, config!.base),\n-  )\n+  let roots: DefaultMap<string, Root> = new DefaultMap((id) => {\n+    let cssResolver = config!.createResolver({\n+      ...config!.resolve,\n+      extensions: ['.css'],\n+      mainFields: ['style'],\n+      conditions: ['style', 'development|production'],\n+      tryIndex: false,\n+      preferRelative: true,\n+    })\n+    function customCssResolver(id: string, base: string) {\n+      return cssResolver(id, base, false, isSSR)\n+    }\n+\n+    let jsResolver = config!.createResolver(config!.resolve)\n+    function customJsResolver(id: string, base: string) {\n+      return jsResolver(id, base, true, isSSR)\n+    }\n+    return new Root(\n+      id,\n+      () => moduleGraphCandidates,\n+      config!.base,\n+      customCssResolver,\n+      customJsResolver,\n+    )\n+  })\n \n   function scanFile(id: string, content: string, extension: string, isSSR: boolean) {\n     let updated = false\n@@ -423,6 +445,9 @@ class Root {\n     private id: string,\n     private getSharedCandidates: () => Map<string, Set<string>>,\n     private base: string,\n+\n+    private customCssResolver: (id: string, base: string) => Promise<string | false | undefined>,\n+    private customJsResolver: (id: string, base: string) => Promise<string | false | undefined>,\n   ) {}\n \n   // Generate the CSS for the root file. This can return false if the file is\n@@ -448,6 +473,9 @@ class Root {\n           addWatchFile(path)\n           this.dependencies.add(path)\n         },\n+\n+        customCssResolver: this.customCssResolver,\n+        customJsResolver: this.customJsResolver,\n       })\n       env.DEBUG && console.timeEnd('[@tailwindcss/vite] Setup compiler')\n \n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex a9452199b853..0acd31faa44c 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -2958,8 +2958,8 @@ packages:\n   magic-string@0.30.11:\n     resolution: {integrity: sha512-+Wri9p0QHMy+545hKww7YAu5NyzF8iomPL/RQazugQ9+Ez4Ic3mERMd8ZTX5rfK944j+560ZJi8iAwgak1Ac7A==}\n \n-  magic-string@0.30.12:\n-    resolution: {integrity: sha512-Ea8I3sQMVXr8JhN4z+H/d8zwo+tYDgHE9+5G4Wnrwhs0gaK9fXTKx0Tw5Xwsd/bCPTTZNRAdpyzvoeORe9LYpw==}\n+  magic-string@0.30.13:\n+    resolution: {integrity: sha512-8rYBO+MsWkgjDSOvLomYnzhdwEG51olQ4zL5KXnNJWV5MNmrb4rTZdrtkhxjnD/QyZUqR/Z/XDsUs/4ej2nx0g==}\n \n   mdn-data@2.0.30:\n     resolution: {integrity: sha512-GaqWWShW4kv/G9IEucWScBx9G1/vsFZZJUO+tD26M8J8z3Kw5RDQjaoZe03YAClgeS/SWPOcb4nkFBTEi5DUEA==}\n@@ -6447,7 +6447,7 @@ snapshots:\n     dependencies:\n       '@jridgewell/sourcemap-codec': 1.5.0\n \n-  magic-string@0.30.12:\n+  magic-string@0.30.13:\n     dependencies:\n       '@jridgewell/sourcemap-codec': 1.5.0\n \n@@ -7129,7 +7129,7 @@ snapshots:\n       estree-walker: 3.0.3\n       is-reference: 3.0.3\n       locate-character: 3.0.0\n-      magic-string: 0.30.12\n+      magic-string: 0.30.13\n       periscopic: 3.1.0\n \n   tailwindcss@3.4.14:\n@@ -7392,8 +7392,8 @@ snapshots:\n   vite@5.4.0(@types/node@20.14.13)(lightningcss@1.26.0(patch_hash=5hwfyehqvg5wjb7mwtdvubqbl4))(terser@5.31.6):\n     dependencies:\n       esbuild: 0.21.5\n-      postcss: 8.4.47\n-      rollup: 4.20.0\n+      postcss: 8.4.49\n+      rollup: 4.27.4\n     optionalDependencies:\n       '@types/node': 20.14.13\n       fsevents: 2.3.3\n"", ""test_patch"": ""diff --git a/integrations/vite/resolvers.test.ts b/integrations/vite/resolvers.test.ts\nnew file mode 100644\nindex 000000000000..b7098d47fc68\n--- /dev/null\n+++ b/integrations/vite/resolvers.test.ts\n@@ -0,0 +1,143 @@\n+import { describe, expect } from 'vitest'\n+import { candidate, css, fetchStyles, html, js, retryAssertion, test, ts, txt } from '../utils'\n+\n+for (let transformer of ['postcss', 'lightningcss']) {\n+  describe(transformer, () => {\n+    test(\n+      `resolves aliases in production build`,\n+      {\n+        fs: {\n+          'package.json': txt`\n+            {\n+              \""type\"": \""module\"",\n+              \""dependencies\"": {\n+                \""@tailwindcss/vite\"": \""workspace:^\"",\n+                \""tailwindcss\"": \""workspace:^\""\n+              },\n+              \""devDependencies\"": {\n+                ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1.26.0\"",` : ''}\n+                \""vite\"": \""^5.3.5\""\n+              }\n+            }\n+          `,\n+          'vite.config.ts': ts`\n+            import tailwindcss from '@tailwindcss/vite'\n+            import { defineConfig } from 'vite'\n+            import { fileURLToPath } from 'node:url'\n+\n+            export default defineConfig({\n+              css: ${transformer === 'postcss' ? '{}' : \""{ transformer: 'lightningcss' }\""},\n+              build: { cssMinify: false },\n+              plugins: [tailwindcss()],\n+              resolve: {\n+                alias: {\n+                  '#css-alias': fileURLToPath(new URL('./src/alias.css', import.meta.url)),\n+                  '#js-alias': fileURLToPath(new URL('./src/plugin.js', import.meta.url)),\n+                },\n+              },\n+            })\n+          `,\n+          'index.html': html`\n+            <head>\n+              <link rel=\""stylesheet\"" href=\""./src/index.css\"" />\n+            </head>\n+            <body>\n+              <div class=\""underline custom-underline\"">Hello, world!</div>\n+            </body>\n+          `,\n+          'src/index.css': css`\n+            @import '#css-alias';\n+            @plugin '#js-alias';\n+          `,\n+          'src/alias.css': css`\n+            @import 'tailwindcss/theme' theme(reference);\n+            @import 'tailwindcss/utilities';\n+          `,\n+          'src/plugin.js': js`\n+            export default function ({ addUtilities }) {\n+              addUtilities({ '.custom-underline': { 'border-bottom': '1px solid green' } })\n+            }\n+          `,\n+        },\n+      },\n+      async ({ fs, exec }) => {\n+        await exec('pnpm vite build')\n+\n+        let files = await fs.glob('dist/**/*.css')\n+        expect(files).toHaveLength(1)\n+        let [filename] = files[0]\n+\n+        await fs.expectFileToContain(filename, [candidate`underline`, candidate`custom-underline`])\n+      },\n+    )\n+\n+    test(\n+      `resolves aliases in dev mode`,\n+      {\n+        fs: {\n+          'package.json': txt`\n+            {\n+              \""type\"": \""module\"",\n+              \""dependencies\"": {\n+                \""@tailwindcss/vite\"": \""workspace:^\"",\n+                \""tailwindcss\"": \""workspace:^\""\n+              },\n+              \""devDependencies\"": {\n+                ${transformer === 'lightningcss' ? `\""lightningcss\"": \""^1.26.0\"",` : ''}\n+                \""vite\"": \""^5.3.5\""\n+              }\n+            }\n+          `,\n+          'vite.config.ts': ts`\n+            import tailwindcss from '@tailwindcss/vite'\n+            import { defineConfig } from 'vite'\n+            import { fileURLToPath } from 'node:url'\n+\n+            export default defineConfig({\n+              css: ${transformer === 'postcss' ? '{}' : \""{ transformer: 'lightningcss' }\""},\n+              build: { cssMinify: false },\n+              plugins: [tailwindcss()],\n+              resolve: {\n+                alias: {\n+                  '#css-alias': fileURLToPath(new URL('./src/alias.css', import.meta.url)),\n+                  '#js-alias': fileURLToPath(new URL('./src/plugin.js', import.meta.url)),\n+                },\n+              },\n+            })\n+          `,\n+          'index.html': html`\n+            <head>\n+              <link rel=\""stylesheet\"" href=\""./src/index.css\"" />\n+            </head>\n+            <body>\n+              <div class=\""underline custom-underline\"">Hello, world!</div>\n+            </body>\n+          `,\n+          'src/index.css': css`\n+            @import '#css-alias';\n+            @plugin '#js-alias';\n+          `,\n+          'src/alias.css': css`\n+            @import 'tailwindcss/theme' theme(reference);\n+            @import 'tailwindcss/utilities';\n+          `,\n+          'src/plugin.js': js`\n+            export default function ({ addUtilities }) {\n+              addUtilities({ '.custom-underline': { 'border-bottom': '1px solid green' } })\n+            }\n+          `,\n+        },\n+      },\n+      async ({ root, spawn, getFreePort, fs }) => {\n+        let port = await getFreePort()\n+        await spawn(`pnpm vite dev --port ${port}`)\n+\n+        await retryAssertion(async () => {\n+          let styles = await fetchStyles(port, '/index.html')\n+          expect(styles).toContain(candidate`underline`)\n+          expect(styles).toContain(candidate`custom-underline`)\n+        })\n+      },\n+    )\n+  })\n+}\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15166"", ""pr_id"": 15166, ""issue_id"": 15160, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] @tailwindcss/postcss - transpilation either doesn't work or the output is not the same as with Autoprefixer\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-beta.2\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite 5.4.11\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22.11.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome 131.0.6778.86\r\n\r\n**What operating system are you using?**\r\n\r\nWindows 11 24H2\r\n\r\n**Describe your issue**\r\n\r\nWhen the @tailwindcss/postcss plugin is used, without explicitely using Autoprefixer, the transpilation output is not the same as when autoprefixer is added back in. I tried definiting the browserslist rules via the package.json key or via the `.browserslistrc` file and both work with autoprefixer, but neither one seems to work with the @tailwindcss/postcss plugin alone.\r\n\r\nI am using this to test:\r\n\r\n![image](https://github.com/user-attachments/assets/655c63b0-1d15-4fca-bb59-70b205b1cc16)\r\n\r\nHere are the browserslist rules:\r\n\r\n![image](https://github.com/user-attachments/assets/da08b2a2-98f5-4d27-be93-725d7b838eda)\r\n\r\nHere is the correct output if I explicitely add Autoprefixer back in:\r\n\r\n![image](https://github.com/user-attachments/assets/c3631dd8-665f-431b-973d-6cf923d65b72)\r\n\r\nHere is the output if I remove Autoprefixer, as the new beta docs say:\r\n\r\n![image](https://github.com/user-attachments/assets/72763c1f-adaf-40c3-aebd-f709c3adb70f)\r\n\r\nThank you!\r\n"", ""issue_word_count"": 261, ""test_files_count"": 4, ""non_test_files_count"": 4, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/@tailwindcss-cli/src/commands/build/index.ts"", ""packages/@tailwindcss-postcss/src/index.ts"", ""packages/@tailwindcss-vite/src/index.ts"", ""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/test-utils/run.ts"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/variants.test.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/index.test.ts"", ""packages/tailwindcss/src/test-utils/run.ts"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/variants.test.ts""], ""base_commit"": ""8217b5cccefe3bf36c3ba7f80df017631893eaca"", ""head_commit"": ""6ac51d5de80220a75f147ea010b6adc50396b498"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15166"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15166"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-26T11:22:12.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 262a627d4b2d..349e4ddc213a 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -9,6 +9,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ### Fixed\n \n+- Ensure any necessary vendor prefixes are generated for iOS Safari, Firefox, and Chrome ([#15166](https://github.com/tailwindlabs/tailwindcss/pull/15166))\n - Ensure `.group` and `.peer` are prefixed when using the `prefix(\u2026)` option ([#15174](https://github.com/tailwindlabs/tailwindcss/pull/15174))\n - Ensure 3D transforms render correctly in Safari ([#15179](https://github.com/tailwindlabs/tailwindcss/pull/15179))\n \n\ndiff --git a/packages/@tailwindcss-cli/src/commands/build/index.ts b/packages/@tailwindcss-cli/src/commands/build/index.ts\nindex 5c90d8ba3819..b04c779dd548 100644\n--- a/packages/@tailwindcss-cli/src/commands/build/index.ts\n+++ b/packages/@tailwindcss-cli/src/commands/build/index.ts\n@@ -437,6 +437,9 @@ function optimizeCss(\n       exclude: Features.LogicalProperties,\n       targets: {\n         safari: (16 << 16) | (4 << 8),\n+        ios_saf: (16 << 16) | (4 << 8),\n+        firefox: 128 << 16,\n+        chrome: 120 << 16,\n       },\n       errorRecovery: true,\n     }).code\n\ndiff --git a/packages/@tailwindcss-postcss/src/index.ts b/packages/@tailwindcss-postcss/src/index.ts\nindex 531cb88af10e..73d3f55bfd84 100644\n--- a/packages/@tailwindcss-postcss/src/index.ts\n+++ b/packages/@tailwindcss-postcss/src/index.ts\n@@ -241,6 +241,9 @@ function optimizeCss(\n       exclude: Features.LogicalProperties,\n       targets: {\n         safari: (16 << 16) | (4 << 8),\n+        ios_saf: (16 << 16) | (4 << 8),\n+        firefox: 128 << 16,\n+        chrome: 120 << 16,\n       },\n       errorRecovery: true,\n     }).code\n\ndiff --git a/packages/@tailwindcss-vite/src/index.ts b/packages/@tailwindcss-vite/src/index.ts\nindex 1eaf1d0f6fff..2c08920bb2e6 100644\n--- a/packages/@tailwindcss-vite/src/index.ts\n+++ b/packages/@tailwindcss-vite/src/index.ts\n@@ -342,6 +342,9 @@ function optimizeCss(\n       exclude: Features.LogicalProperties,\n       targets: {\n         safari: (16 << 16) | (4 << 8),\n+        ios_saf: (16 << 16) | (4 << 8),\n+        firefox: 128 << 16,\n+        chrome: 120 << 16,\n       },\n       errorRecovery: true,\n     }).code\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/index.test.ts b/packages/tailwindcss/src/index.test.ts\nindex a45272fef630..96ed5f7c6bb7 100644\n--- a/packages/tailwindcss/src/index.test.ts\n+++ b/packages/tailwindcss/src/index.test.ts\n@@ -151,6 +151,23 @@ describe('compiling CSS', () => {\n       }\""\n     `)\n   })\n+\n+  test('adds vendor prefixes', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @tailwind utilities;\n+        `,\n+        ['[text-size-adjust:none]'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"".\\\\[text-size-adjust\\\\:none\\\\] {\n+        -webkit-text-size-adjust: none;\n+        -moz-text-size-adjust: none;\n+        text-size-adjust: none;\n+      }\""\n+    `)\n+  })\n })\n \n describe('arbitrary properties', () => {\n\ndiff --git a/packages/tailwindcss/src/test-utils/run.ts b/packages/tailwindcss/src/test-utils/run.ts\nindex af6dc72e06eb..0aa99e3e23cd 100644\n--- a/packages/tailwindcss/src/test-utils/run.ts\n+++ b/packages/tailwindcss/src/test-utils/run.ts\n@@ -31,6 +31,9 @@ export function optimizeCss(\n       exclude: Features.LogicalProperties,\n       targets: {\n         safari: (16 << 16) | (4 << 8),\n+        ios_saf: (16 << 16) | (4 << 8),\n+        firefox: 128 << 16,\n+        chrome: 120 << 16,\n       },\n       errorRecovery: true,\n     }).code\n\ndiff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 9c22d51e1098..4c0191c7e661 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -11803,22 +11803,22 @@ test('box-decoration', async () => {\n test('bg-clip', async () => {\n   expect(await run(['bg-clip-border', 'bg-clip-padding', 'bg-clip-content', 'bg-clip-text']))\n     .toMatchInlineSnapshot(`\n-    \"".bg-clip-border {\n-      background-clip: border-box;\n-    }\n+      \"".bg-clip-border {\n+        background-clip: border-box;\n+      }\n \n-    .bg-clip-content {\n-      background-clip: content-box;\n-    }\n+      .bg-clip-content {\n+        background-clip: content-box;\n+      }\n \n-    .bg-clip-padding {\n-      background-clip: padding-box;\n-    }\n+      .bg-clip-padding {\n+        background-clip: padding-box;\n+      }\n \n-    .bg-clip-text {\n-      background-clip: text;\n-    }\""\n-  `)\n+      .bg-clip-text {\n+        background-clip: text;\n+      }\""\n+    `)\n   expect(\n     await run([\n       'bg-clip',\n\ndiff --git a/packages/tailwindcss/src/variants.test.ts b/packages/tailwindcss/src/variants.test.ts\nindex aa2c857956bc..5eaa374c2d88 100644\n--- a/packages/tailwindcss/src/variants.test.ts\n+++ b/packages/tailwindcss/src/variants.test.ts\n@@ -62,7 +62,11 @@ test('marker', async () => {\n \n test('selection', async () => {\n   expect(await run(['selection:flex'])).toMatchInlineSnapshot(`\n-    \"".selection\\\\:flex ::selection, .selection\\\\:flex::selection {\n+    \"".selection\\\\:flex ::selection {\n+      display: flex;\n+    }\n+\n+    .selection\\\\:flex::selection {\n       display: flex;\n     }\""\n   `)\n@@ -2161,7 +2165,15 @@ test('variant order', async () => {\n       }\n     }\n \n-    .first-letter\\\\:flex:first-letter, .first-line\\\\:flex:first-line, .marker\\\\:flex ::marker, .marker\\\\:flex::marker, .selection\\\\:flex ::selection, .selection\\\\:flex::selection {\n+    .first-letter\\\\:flex:first-letter, .first-line\\\\:flex:first-line, .marker\\\\:flex ::marker, .marker\\\\:flex::marker {\n+      display: flex;\n+    }\n+\n+    .selection\\\\:flex ::selection {\n+      display: flex;\n+    }\n+\n+    .selection\\\\:flex::selection {\n       display: flex;\n     }\n \n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15108"", ""pr_id"": 15108, ""issue_id"": 15107, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Break-keep produces broken CSS\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: 4.0.0-beta.1\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: postcss-cli 8.4.47, Next.js 15.0.3\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: Bun 1.1.34\r\n\r\n**What browser are you using?**\r\n\r\nFor example: Safari\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS\r\n\r\n**Reproduction URL**\r\n\r\nUse break-keep\r\n\r\n**Describe your issue**\r\n\r\n`break-keep` should produce `word-break: keep-all` but produces `word-break: break-keep`\r\n\r\n<img width=\""280\"" alt=\""image\"" src=\""https://github.com/user-attachments/assets/f321a550-6ec7-4f47-9354-2e2b2e5c9f89\"">"", ""issue_word_count"": 151, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""de096f7cae63d2c8fd473603c90c798b8275e76b"", ""head_commit"": ""43b75609e9402e18652e370e8d36a4ebd6b08b5b"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15108"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15108"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-22T15:40:23.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 0f1e86276a96..235a79d7a65a 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Use configured `--letter-spacing` values for custom font size utilities ([#15099](https://github.com/tailwindlabs/tailwindcss/pull/15099))\n - Ensure `space-x/y-*` and `divide-x/y-*` with variants can undo `space-x/y-reverse` and `divide-x/y-reverse` ([#15094](https://github.com/tailwindlabs/tailwindcss/pull/15094))\n - Don't print minified code when the build fails in the CLI ([#15106](https://github.com/tailwindlabs/tailwindcss/pull/15106))\n+- Generate the correct CSS for the `break-keep` utility ([#15108](https://github.com/tailwindlabs/tailwindcss/pull/15108))\n - _Upgrade (experimental)_: Always add `layer(\u2026)` as the first param to `@import` ([#15102](https://github.com/tailwindlabs/tailwindcss/pull/15102))\n \n ### Changed\n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 7224403a718d..6a8b8133f937 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -1963,7 +1963,7 @@ export function createUtilities(theme: Theme) {\n   ])\n   staticUtility('break-words', [['overflow-wrap', 'break-word']])\n   staticUtility('break-all', [['word-break', 'break-all']])\n-  staticUtility('break-keep', [['word-break', 'break-keep']])\n+  staticUtility('break-keep', [['word-break', 'keep-all']])\n \n   {\n     // border-radius\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 7c59653adeba..fe7e701e2ec1 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -9212,23 +9212,23 @@ test('text-wrap', async () => {\n test('overflow-wrap', async () => {\n   expect(await run(['break-normal', 'break-words', 'break-all', 'break-keep']))\n     .toMatchInlineSnapshot(`\n-    \"".break-normal {\n-      overflow-wrap: normal;\n-      word-break: normal;\n-    }\n+      \"".break-normal {\n+        overflow-wrap: normal;\n+        word-break: normal;\n+      }\n \n-    .break-words {\n-      overflow-wrap: break-word;\n-    }\n+      .break-words {\n+        overflow-wrap: break-word;\n+      }\n \n-    .break-all {\n-      word-break: break-all;\n-    }\n+      .break-all {\n+        word-break: break-all;\n+      }\n \n-    .break-keep {\n-      word-break: break-keep;\n-    }\""\n-  `)\n+      .break-keep {\n+        word-break: keep-all;\n+      }\""\n+    `)\n   expect(\n     await run([\n       '-break-normal',\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15099"", ""pr_id"": 15099, ""issue_id"": 15096, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] --letter-spacing not included in the final CSS\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-beta.1\r\n\r\n**Reproduction URL**\r\n\r\nhttps://play.tailwindcss.com/Z3dDT7wulJ\r\n\r\n**Describe your issue**\r\n\r\nWhen the following CSS is supplied:\r\n\r\n```css\r\n@theme {\r\n    --text-heading3xl: 2.25rem;\r\n    --text-heading3xl--line-height: 3rem;\r\n    --text-heading3xl--font-weight: 700;\r\n    --text-heading3xl--letter-spacing: -0.03375rem;\r\n}\r\n```\r\n\r\nIt is translated into the following CSS output:\r\n\r\n```css\r\n.text-heading3xl {\r\n    font-size: var(--text-heading3xl);\r\n    line-height: var(--tw-leading, var(--text-heading3xl--line-height));\r\n    font-weight: var(--tw-font-weight, var(--text-heading3xl--font-weight));\r\n}\r\n```\r\n\r\nSo, the provided letter spacing is missing from the final output."", ""issue_word_count"": 108, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utilities.ts"", ""packages/tailwindcss/tests/ui.spec.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/tests/ui.spec.ts""], ""base_commit"": ""5e4f565fe4c3a52a52b45c310c437073a4f4190e"", ""head_commit"": ""9149dbcc8a1181b6b75695089a844e8a6b41c2fb"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15099"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15099"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-22T13:49:23.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 9363fa3b4f0e..6ce4a9bff4dd 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -7,7 +7,9 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ## [Unreleased]\n \n-- Nothing yet!\n+### Fixed\n+\n+- Use configured `--letter-spacing` values for custom font size utilities ([#15099](https://github.com/tailwindlabs/tailwindcss/pull/15099))\n \n ## [4.0.0-beta.1] - 2024-11-21\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex c5d9bdf3c6d4..d8e99dd7568f 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -4033,7 +4033,7 @@ export function createUtilities(theme: Theme) {\n       let value = theme.resolveWith(\n         candidate.value.value,\n         ['--text'],\n-        ['--line-height', '--tracking', '--font-weight'],\n+        ['--line-height', '--letter-spacing', '--font-weight'],\n       )\n       if (value) {\n         let [fontSize, options = {}] = Array.isArray(value) ? value : [value]\n@@ -4067,7 +4067,9 @@ export function createUtilities(theme: Theme) {\n           ),\n           decl(\n             'letter-spacing',\n-            options['--tracking'] ? `var(--tw-tracking, ${options['--tracking']})` : undefined,\n+            options['--letter-spacing']\n+              ? `var(--tw-tracking, ${options['--letter-spacing']})`\n+              : undefined,\n           ),\n           decl(\n             'font-weight',\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/tests/ui.spec.ts b/packages/tailwindcss/tests/ui.spec.ts\nindex 445246beac4e..103307d78657 100644\n--- a/packages/tailwindcss/tests/ui.spec.ts\n+++ b/packages/tailwindcss/tests/ui.spec.ts\n@@ -568,8 +568,8 @@ test('explicit tracking utilities are respected when overriding font-size', asyn\n     `,\n     css`\n       @theme {\n-        --text-sm--tracking: 5px;\n-        --text-xl--tracking: 10px;\n+        --text-sm--letter-spacing: 5px;\n+        --text-xl--letter-spacing: 10px;\n         --tracking-tight: 1px;\n       }\n     `,\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15028"", ""pr_id"": 15028, ""issue_id"": 15012, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Can't find Plugins in standalone cli\n**What version of Tailwind CSS are you using?**\r\n\r\nFor example: v4.0.0.alpha.34\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nFor example: standalone-cli @ 4.0.0.alpha.34\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: N/A\r\n\r\n**What browser are you using?**\r\n\r\nFor example: N/A\r\n\r\n**What operating system are you using?**\r\n\r\nFor example: macOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/delCatta/tailwind-issue\r\n\r\n**Describe your issue**\r\n\r\nUsing the latest release I'm unable to use the @tailwindcss/typography plugin because it is not included in the executable.\r\n\r\nI copied the release file and created an `input.css` file with the following contents:\r\n\r\n```\r\n@import \""tailwindcss\"";\r\n@plugin \""@tailwindcss/typography\"";\r\n```\r\n\r\nThen I ran `./tailwindcss-macos-arm64 -i index.css -o built.css` and got:\r\n\r\n```\r\n./tailwindcss-macos-arm64 -i index.css -o built.css\r\n5737 |       }\r\n5738 |       const message = `resolve '${request}' in '${path}'`;\r\n5739 |       const finishResolved = (result) => {\r\n5740 |         return callback(null, result.path === false ? false : `${result.path.replace(/#/g, \""\\0#\"")}${result.query ? result.query.replace(/#/g, \""\\0#\"") : \""\""}${result.fragment || \""\""}`, result);\r\n5741 |       };\r\n5742 |         const error = new Error(\""Can't \"" + message);\r\n                             ^\r\nerror: Can't resolve '@tailwindcss/typography' in '<THE-CURRENT-FOLDER>'\r\n      at finishWithoutResolve (/$bunfs/root/tailwindcss-macos-arm64:5742:23)\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n      at /$bunfs/root/tailwindcss-macos-arm64:5834:19\r\n```\r\n\r\nI wish to be able to use on rails using [tailwind-rails](https://github.com/rails/tailwindcss-rails) and [tailwind-ruby](https://github.com/flavorjones/tailwindcss-ruby)"", ""issue_word_count"": 281, ""test_files_count"": 1, ""non_test_files_count"": 6, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/cli/standalone.test.ts"", ""packages/@tailwindcss-node/src/compile.ts"", ""packages/@tailwindcss-standalone/package.json"", ""packages/@tailwindcss-standalone/src/index.ts"", ""packages/@tailwindcss-standalone/src/types.d.ts"", ""pnpm-lock.yaml""], ""pr_changed_test_files"": [""integrations/cli/standalone.test.ts""], ""base_commit"": ""38c9a881ac020940128627b36e55f7d4a8094655"", ""head_commit"": ""87274f03dbcd63db68accbf07d48f76ef98365ac"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15028"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15028"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-19T15:19:08.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex dc3bfae0aceb..d168549b7fa3 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Reintroduce `max-w-screen-*` utilities that read from the `--breakpoint` namespace as deprecated utilities ([#15013](https://github.com/tailwindlabs/tailwindcss/pull/15013))\n - Support using CSS variables as arbitrary values without `var(\u2026)` by using parentheses instead of square brackets (e.g. `bg-(--my-color)`) ([#15020](https://github.com/tailwindlabs/tailwindcss/pull/15020))\n - Add new `in-*` variant ([#15025](https://github.com/tailwindlabs/tailwindcss/pull/15025))\n+- Bundle `@tailwindcss/forms`, `@tailwindcss/typography`, and `@tailwindcss/aspect-ratio` with the standalone CLI ([#15028](https://github.com/tailwindlabs/tailwindcss/pull/15028))\n - Allow `addUtilities()` and `addComponents()` to work with child combinators and other complex selectors ([#15029](https://github.com/tailwindlabs/tailwindcss/pull/15029))\n - _Upgrade (experimental)_: Migrate `[&>*]` to the `*` variant ([#15022](https://github.com/tailwindlabs/tailwindcss/pull/15022))\n - _Upgrade (experimental)_: Migrate `[&_*]` to the `**` variant ([#15022](https://github.com/tailwindlabs/tailwindcss/pull/15022))\n\ndiff --git a/packages/@tailwindcss-node/src/compile.ts b/packages/@tailwindcss-node/src/compile.ts\nindex 8a5f8ee20cc5..60ddecff250f 100644\n--- a/packages/@tailwindcss-node/src/compile.ts\n+++ b/packages/@tailwindcss-node/src/compile.ts\n@@ -98,6 +98,7 @@ export async function loadModule(id: string, base: string, onDependency: (path:\n   if (!resolvedPath) {\n     throw new Error(`Could not resolve '${id}' from '${base}'`)\n   }\n+\n   let [module, moduleDependencies] = await Promise.all([\n     importModule(pathToFileURL(resolvedPath).href + '?id=' + Date.now()),\n     getModuleDependencies(resolvedPath),\n@@ -140,6 +141,13 @@ async function loadStylesheet(id: string, base: string, onDependency: (path: str\n // can be resolved properly.\n let jiti: null | Jiti = null\n async function importModule(path: string): Promise<any> {\n+  if (typeof globalThis.__tw_load === 'function') {\n+    let module = await globalThis.__tw_load(path)\n+    if (module) {\n+      return module\n+    }\n+  }\n+\n   try {\n     return await import(path)\n   } catch (error) {\n@@ -174,6 +182,12 @@ const jsResolver = EnhancedResolve.ResolverFactory.createResolver({\n })\n \n function resolveJsId(id: string, base: string): Promise<string | false | undefined> {\n+  if (typeof globalThis.__tw_resolve === 'function') {\n+    let resolved = globalThis.__tw_resolve(id, base)\n+    if (resolved) {\n+      return Promise.resolve(resolved)\n+    }\n+  }\n   return runResolver(jsResolver, id, base)\n }\n \n\ndiff --git a/packages/@tailwindcss-standalone/package.json b/packages/@tailwindcss-standalone/package.json\nindex 0f180eb5c44f..4f702a53516f 100644\n--- a/packages/@tailwindcss-standalone/package.json\n+++ b/packages/@tailwindcss-standalone/package.json\n@@ -25,7 +25,10 @@\n     \""dist\""\n   ],\n   \""dependencies\"": {\n+    \""@tailwindcss/aspect-ratio\"": \""^0.4.2\"",\n     \""@tailwindcss/cli\"": \""workspace:^\"",\n+    \""@tailwindcss/forms\"": \""^0.5.9\"",\n+    \""@tailwindcss/typography\"": \""^0.5.15\"",\n     \""detect-libc\"": \""1.0.3\"",\n     \""enhanced-resolve\"": \""^5.17.1\"",\n     \""tailwindcss\"": \""workspace:^\""\n\ndiff --git a/packages/@tailwindcss-standalone/src/index.ts b/packages/@tailwindcss-standalone/src/index.ts\nindex ae90e2b6efc7..98e75c3dc394 100644\n--- a/packages/@tailwindcss-standalone/src/index.ts\n+++ b/packages/@tailwindcss-standalone/src/index.ts\n@@ -12,7 +12,10 @@ const localResolve = createRequire(import.meta.url).resolve\n globalThis.__tw_resolve = (id, baseDir) => {\n   let isEmbeddedFileBase = baseDir === '/$bunfs/root' || baseDir?.includes(':/~BUN/root')\n   const likelyEmbeddedFile =\n-    id === 'tailwindcss' || id.startsWith('tailwindcss/') || isEmbeddedFileBase\n+    id === 'tailwindcss' ||\n+    id.startsWith('tailwindcss/') ||\n+    id.startsWith('@tailwindcss/') ||\n+    isEmbeddedFileBase\n \n   if (!likelyEmbeddedFile) {\n     return false\n@@ -38,10 +41,25 @@ globalThis.__tw_resolve = (id, baseDir) => {\n     case 'utilities':\n     case 'utilities.css':\n       return localResolve(utilitiesCss)\n+    case '@tailwindcss/forms':\n+    case '@tailwindcss/typography':\n+    case '@tailwindcss/aspect-ratio':\n+      return id\n     default:\n       return false\n   }\n }\n+globalThis.__tw_load = async (id) => {\n+  if (id.endsWith('@tailwindcss/forms')) {\n+    return require('@tailwindcss/forms')\n+  } else if (id.endsWith('@tailwindcss/typography')) {\n+    return require('@tailwindcss/typography')\n+  } else if (id.endsWith('@tailwindcss/aspect-ratio')) {\n+    return require('@tailwindcss/aspect-ratio')\n+  } else {\n+    return undefined\n+  }\n+}\n globalThis.__tw_version = packageJson.version\n globalThis.__tw_readFile = async (path, encoding) => {\n   // When reading a file from the `$bunfs`, we need to use the synchronous\n\ndiff --git a/packages/@tailwindcss-standalone/src/types.d.ts b/packages/@tailwindcss-standalone/src/types.d.ts\nindex e13e4e4275d2..3212ac5b66e8 100644\n--- a/packages/@tailwindcss-standalone/src/types.d.ts\n+++ b/packages/@tailwindcss-standalone/src/types.d.ts\n@@ -8,3 +8,4 @@ declare var __tw_resolve: undefined | ((id: string, base?: string) => string | f\n declare var __tw_readFile:\n   | undefined\n   | ((path: string, encoding: BufferEncoding) => Promise<string | undefined>)\n+declare var __tw_load: undefined | ((path: string) => Promise<object | undefined>)\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex a19f30e2d869..1a7b6627daa5 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -213,9 +213,18 @@ importers:\n \n   packages/@tailwindcss-standalone:\n     dependencies:\n+      '@tailwindcss/aspect-ratio':\n+        specifier: ^0.4.2\n+        version: 0.4.2(tailwindcss@packages+tailwindcss)\n       '@tailwindcss/cli':\n         specifier: workspace:^\n         version: link:../@tailwindcss-cli\n+      '@tailwindcss/forms':\n+        specifier: ^0.5.9\n+        version: 0.5.9(tailwindcss@packages+tailwindcss)\n+      '@tailwindcss/typography':\n+        specifier: ^0.5.15\n+        version: 0.5.15(tailwindcss@packages+tailwindcss)\n       detect-libc:\n         specifier: 1.0.3\n         version: 1.0.3\n@@ -1408,6 +1417,21 @@ packages:\n   '@swc/helpers@0.5.2':\n     resolution: {integrity: sha512-E4KcWTpoLHqwPHLxidpOqQbcrZVgi0rsmmZXUle1jXmJfuIf/UWpczUJ7MZZ5tlxytgJXyp0w4PGkkeLiuIdZw==}\n \n+  '@tailwindcss/aspect-ratio@0.4.2':\n+    resolution: {integrity: sha512-8QPrypskfBa7QIMuKHg2TA7BqES6vhBrDLOv8Unb6FcFyd3TjKbc6lcmb9UPQHxfl24sXoJ41ux/H7qQQvfaSQ==}\n+    peerDependencies:\n+      tailwindcss: '>=2.0.0 || >=3.0.0 || >=3.0.0-alpha.1'\n+\n+  '@tailwindcss/forms@0.5.9':\n+    resolution: {integrity: sha512-tM4XVr2+UVTxXJzey9Twx48c1gcxFStqn1pQz0tRsX8o3DvxhN5oY5pvyAbUx7VTaZxpej4Zzvc6h+1RJBzpIg==}\n+    peerDependencies:\n+      tailwindcss: '>=3.0.0 || >= 3.0.0-alpha.1 || >= 4.0.0-alpha.20'\n+\n+  '@tailwindcss/typography@0.5.15':\n+    resolution: {integrity: sha512-AqhlCXl+8grUz8uqExv5OTtgpjuVIwFTSXTrh8y9/pw6q2ek7fJ+Y8ZEVw7EB2DCcuCOtEjf9w3+J3rzts01uA==}\n+    peerDependencies:\n+      tailwindcss: '>=3.0.0 || insiders || >=4.0.0-alpha.20'\n+\n   '@types/babel__core@7.20.5':\n     resolution: {integrity: sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==}\n \n@@ -2721,6 +2745,12 @@ packages:\n     resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}\n     engines: {node: '>=10'}\n \n+  lodash.castarray@4.4.0:\n+    resolution: {integrity: sha512-aVx8ztPv7/2ULbArGJ2Y42bG1mEQ5mGjpdvrbJcJFU3TbYybe+QlLS4pst9zV52ymy2in1KpFPiZnAOATxD4+Q==}\n+\n+  lodash.isplainobject@4.0.6:\n+    resolution: {integrity: sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==}\n+\n   lodash.merge@4.6.2:\n     resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}\n \n@@ -2771,6 +2801,10 @@ packages:\n     resolution: {integrity: sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==}\n     engines: {node: '>=12'}\n \n+  mini-svg-data-uri@1.4.4:\n+    resolution: {integrity: sha512-r9deDe9p5FJUPZAk3A59wGH7Ii9YrjjWw0jmw/liSbHl2CHiyXj6FcDXDu2K3TjVAXqiJdaw3xxwlZZr9E6nHg==}\n+    hasBin: true\n+\n   minimatch@3.1.2:\n     resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}\n \n@@ -3050,6 +3084,10 @@ packages:\n     peerDependencies:\n       postcss: ^8.2.14\n \n+  postcss-selector-parser@6.0.10:\n+    resolution: {integrity: sha512-IQ7TZdoaqbT+LCpShg46jnZVlhWD2w6iQYAcYXfHARZ7X1t/UGhhceQDs5X0cGqKvYlHNOuv7Oa1xmb0oQuA3w==}\n+    engines: {node: '>=4'}\n+\n   postcss-selector-parser@6.1.2:\n     resolution: {integrity: sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==}\n     engines: {node: '>=4'}\n@@ -4361,6 +4399,23 @@ snapshots:\n     dependencies:\n       tslib: 2.8.0\n \n+  '@tailwindcss/aspect-ratio@0.4.2(tailwindcss@packages+tailwindcss)':\n+    dependencies:\n+      tailwindcss: link:packages/tailwindcss\n+\n+  '@tailwindcss/forms@0.5.9(tailwindcss@packages+tailwindcss)':\n+    dependencies:\n+      mini-svg-data-uri: 1.4.4\n+      tailwindcss: link:packages/tailwindcss\n+\n+  '@tailwindcss/typography@0.5.15(tailwindcss@packages+tailwindcss)':\n+    dependencies:\n+      lodash.castarray: 4.4.0\n+      lodash.isplainobject: 4.0.6\n+      lodash.merge: 4.6.2\n+      postcss-selector-parser: 6.0.10\n+      tailwindcss: link:packages/tailwindcss\n+\n   '@types/babel__core@7.20.5':\n     dependencies:\n       '@babel/parser': 7.25.3\n@@ -6047,6 +6102,10 @@ snapshots:\n     dependencies:\n       p-locate: 5.0.0\n \n+  lodash.castarray@4.4.0: {}\n+\n+  lodash.isplainobject@4.0.6: {}\n+\n   lodash.merge@4.6.2: {}\n \n   lodash.sortby@4.7.0: {}\n@@ -6090,6 +6149,8 @@ snapshots:\n \n   mimic-fn@4.0.0: {}\n \n+  mini-svg-data-uri@1.4.4: {}\n+\n   minimatch@3.1.2:\n     dependencies:\n       brace-expansion: 1.1.11\n@@ -6341,6 +6402,11 @@ snapshots:\n       postcss: 8.4.47\n       postcss-selector-parser: 6.1.2\n \n+  postcss-selector-parser@6.0.10:\n+    dependencies:\n+      cssesc: 3.0.0\n+      util-deprecate: 1.0.2\n+\n   postcss-selector-parser@6.1.2:\n     dependencies:\n       cssesc: 3.0.0\n"", ""test_patch"": ""diff --git a/integrations/cli/standalone.test.ts b/integrations/cli/standalone.test.ts\nnew file mode 100644\nindex 000000000000..a40d69fc95b7\n--- /dev/null\n+++ b/integrations/cli/standalone.test.ts\n@@ -0,0 +1,58 @@\n+import os from 'node:os'\n+import path from 'node:path'\n+import { candidate, css, html, json, test } from '../utils'\n+\n+const STANDALONE_BINARY = (() => {\n+  switch (os.platform()) {\n+    case 'win32':\n+      return 'tailwindcss-windows-x64.exe'\n+    case 'darwin':\n+      return os.arch() === 'x64' ? 'tailwindcss-macos-x64' : 'tailwindcss-macos-arm64'\n+    case 'linux':\n+      return os.arch() === 'x64' ? 'tailwindcss-linux-x64' : 'tailwindcss-linux-arm64'\n+    default:\n+      throw new Error(`Unsupported platform: ${os.platform()} ${os.arch()}`)\n+  }\n+})()\n+\n+test(\n+  'includes first-party plugins',\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""dependencies\"": {\n+            \""tailwindcss\"": \""workspace:^\"",\n+            \""@tailwindcss/cli\"": \""workspace:^\""\n+          }\n+        }\n+      `,\n+      'index.html': html`\n+        <div className=\""prose\"">\n+          <h1>Headline</h1>\n+        </div>\n+        <input type=\""text\"" class=\""form-input\"" />\n+        <div class=\""aspect-w-16\""></div>\n+      `,\n+      'src/index.css': css`\n+        @import 'tailwindcss/theme' theme(reference);\n+        @import 'tailwindcss/utilities';\n+\n+        @plugin '@tailwindcss/forms';\n+        @plugin '@tailwindcss/typography';\n+        @plugin '@tailwindcss/aspect-ratio';\n+      `,\n+    },\n+  },\n+  async ({ fs, exec }) => {\n+    await exec(\n+      `${path.resolve(__dirname, `../../packages/@tailwindcss-standalone/dist/${STANDALONE_BINARY}`)} --input src/index.css --output dist/out.css`,\n+    )\n+\n+    await fs.expectFileToContain('dist/out.css', [\n+      candidate`form-input`,\n+      candidate`prose`,\n+      candidate`aspect-w-16`,\n+    ])\n+  },\n+)\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-15003"", ""pr_id"": 15003, ""issue_id"": 15000, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Selection is broken in Chrome 131 due to --tw-text-opacity and friends\n**What version of Tailwind CSS are you using?**\r\n\r\nNot sure what version sites are using, but I suspect less than a year old.\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nDon't know\r\n\r\n**What version of Node.js are you using?**\r\n\r\nDon't know\r\n\r\n**What browser are you using?**\r\n\r\nChrome and Edge\r\n\r\n**What operating system are you using?**\r\n\r\nAll\r\n\r\n**Reproduction URL**\r\n\r\nSee https://issues.chromium.org/issues/378754060 for numerous reproductions. From The Verge:\r\n```\r\n.selection\\:bg-franklin-20::selection {\r\n    --tw-bg-opacity: 1;\r\n    background-color: rgb(216 255 246/var(--tw-bg-opacity));\r\n}\r\n```\r\nAll selection is blank in Chrome 131 and later on The Verge, Bloomberg news, ...\r\n\r\n**Describe your issue**\r\n\r\nChrome 131 and browsers using Chromium enable CSS Highlight Inheritance for ::selection. In this model custom properties for ::selection and other highlight pseudos are taken from the originating element, and not the pseudo itself. All custom properties defined on highlight pseudos are ignored. But Tailwind defines a custom property for opacity on every use of a color, including ::selection colors. There is no practical use for this because the variable is redefined all over the place and any given usage inside ::selection applies only within that ::selection block (with the old behavior).\r\n\r\nSee https://developer.chrome.com/blog/selection-styling and https://blogs.igalia.com/schenney/css-custom-properties-in-highlight-pseudos/\r\n\r\nI might try to figure out how to fix this and put up a PR for you."", ""issue_word_count"": 259, ""test_files_count"": 38, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/parcel/tests/integration.test.js"", ""integrations/postcss-cli/tests/integration.test.js"", ""integrations/rollup-sass/tests/integration.test.js"", ""integrations/rollup/tests/integration.test.js"", ""integrations/tailwindcss-cli/tests/cli.test.js"", ""integrations/tailwindcss-cli/tests/integration.test.js"", ""integrations/vite/tests/integration.test.js"", ""integrations/webpack-4/tests/integration.test.js"", ""integrations/webpack-5/tests/integration.test.js"", ""src/util/removeAlphaVariables.js"", ""src/util/withAlphaVariable.js"", ""tests/apply.test.js"", ""tests/arbitrary-values.test.css"", ""tests/arbitrary-values.test.js"", ""tests/arbitrary-variants.test.js"", ""tests/basic-usage.test.css"", ""tests/basic-usage.test.js"", ""tests/blocklist.test.js"", ""tests/collapse-adjacent-rules.test.js"", ""tests/color-opacity-modifiers.test.js"", ""tests/context-reuse.test.js"", ""tests/custom-extractors.test.js"", ""tests/dark-mode.test.js"", ""tests/import-syntax.test.js"", ""tests/important-selector.test.js"", ""tests/kitchen-sink.test.js"", ""tests/match-variants.test.js"", ""tests/opacity.test.js"", ""tests/plugins/gradientColorStops.test.js"", ""tests/prefers-contrast.test.js"", ""tests/prefix.test.js"", ""tests/raw-content.test.css"", ""tests/resolve-defaults-at-rules.test.js"", ""tests/safelist.test.js"", ""tests/source-maps.test.js"", ""tests/syntax-lit-html.test.js"", ""tests/syntax-svelte.test.js"", ""tests/variants.test.css"", ""tests/variants.test.js"", ""tests/withAlphaVariable.test.js""], ""pr_changed_test_files"": [""integrations/parcel/tests/integration.test.js"", ""integrations/postcss-cli/tests/integration.test.js"", ""integrations/rollup-sass/tests/integration.test.js"", ""integrations/rollup/tests/integration.test.js"", ""integrations/tailwindcss-cli/tests/cli.test.js"", ""integrations/tailwindcss-cli/tests/integration.test.js"", ""integrations/vite/tests/integration.test.js"", ""integrations/webpack-4/tests/integration.test.js"", ""integrations/webpack-5/tests/integration.test.js"", ""tests/apply.test.js"", ""tests/arbitrary-values.test.css"", ""tests/arbitrary-values.test.js"", ""tests/arbitrary-variants.test.js"", ""tests/basic-usage.test.css"", ""tests/basic-usage.test.js"", ""tests/blocklist.test.js"", ""tests/collapse-adjacent-rules.test.js"", ""tests/color-opacity-modifiers.test.js"", ""tests/context-reuse.test.js"", ""tests/custom-extractors.test.js"", ""tests/dark-mode.test.js"", ""tests/import-syntax.test.js"", ""tests/important-selector.test.js"", ""tests/kitchen-sink.test.js"", ""tests/match-variants.test.js"", ""tests/opacity.test.js"", ""tests/plugins/gradientColorStops.test.js"", ""tests/prefers-contrast.test.js"", ""tests/prefix.test.js"", ""tests/raw-content.test.css"", ""tests/resolve-defaults-at-rules.test.js"", ""tests/safelist.test.js"", ""tests/source-maps.test.js"", ""tests/syntax-lit-html.test.js"", ""tests/syntax-svelte.test.js"", ""tests/variants.test.css"", ""tests/variants.test.js"", ""tests/withAlphaVariable.test.js""], ""base_commit"": ""4de07697bdd7cb99eb4557456a31338c53f45ccc"", ""head_commit"": ""4d3e89dd2be8981646d7b13547fbe2507f0bc266"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/15003"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/15003"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-14T18:33:27.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 069428f6fb44..d3d46a4a172e 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -11,6 +11,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Bump versions for security vulnerabilities ([#14697](https://github.com/tailwindlabs/tailwindcss/pull/14697))\n - Ensure the TypeScript types for the `boxShadow` theme configuration allows arrays ([#14856](https://github.com/tailwindlabs/tailwindcss/pull/14856))\n+- Set fallback for opacity variables to ensure setting colors with the `selection:*` variant works in Chrome 131 ([#15003](https://github.com/tailwindlabs/tailwindcss/pull/15003))\n \n ## [3.4.14] - 2024-10-15\n \n\ndiff --git a/src/util/removeAlphaVariables.js b/src/util/removeAlphaVariables.js\nindex 76655bea2bbd..be9281812fb1 100644\n--- a/src/util/removeAlphaVariables.js\n+++ b/src/util/removeAlphaVariables.js\n@@ -18,6 +18,8 @@ export function removeAlphaVariables(container, toRemove) {\n     for (let varName of toRemove) {\n       if (decl.value.includes(`/ var(${varName})`)) {\n         decl.value = decl.value.replace(`/ var(${varName})`, '')\n+      } else if (decl.value.includes(`/ var(${varName}, 1)`)) {\n+        decl.value = decl.value.replace(`/ var(${varName}, 1)`, '')\n       }\n     }\n   })\n\ndiff --git a/src/util/withAlphaVariable.js b/src/util/withAlphaVariable.js\nindex 15aedb73b66d..e49bd82567e1 100644\n--- a/src/util/withAlphaVariable.js\n+++ b/src/util/withAlphaVariable.js\n@@ -21,7 +21,7 @@ export default function withAlphaVariable({ color, property, variable }) {\n       [variable]: '1',\n       ...Object.fromEntries(\n         properties.map((p) => {\n-          return [p, color({ opacityVariable: variable, opacityValue: `var(${variable})` })]\n+          return [p, color({ opacityVariable: variable, opacityValue: `var(${variable}, 1)` })]\n         })\n       ),\n     }\n@@ -42,7 +42,7 @@ export default function withAlphaVariable({ color, property, variable }) {\n     [variable]: '1',\n     ...Object.fromEntries(\n       properties.map((p) => {\n-        return [p, formatColor({ ...parsed, alpha: `var(${variable})` })]\n+        return [p, formatColor({ ...parsed, alpha: `var(${variable}, 1)` })]\n       })\n     ),\n   }\n"", ""test_patch"": ""diff --git a/integrations/parcel/tests/integration.test.js b/integrations/parcel/tests/integration.test.js\nindex 9a9091a30589..beaf5e70d7dc 100644\n--- a/integrations/parcel/tests/integration.test.js\n+++ b/integrations/parcel/tests/integration.test.js\n@@ -74,7 +74,7 @@ describe('static build', () => {\n     expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n       .bg-primary {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+        background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n       }\n     `)\n   })\n@@ -124,7 +124,7 @@ describe('static build', () => {\n     expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n       .bg-primary {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+        background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n       }\n     `)\n   })\n@@ -170,7 +170,7 @@ describe('watcher', () => {\n     expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n       .bg-red-500 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+        background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n       }\n       .font-bold {\n         font-weight: 700;\n@@ -218,7 +218,7 @@ describe('watcher', () => {\n     expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n       .bg-red-500 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+        background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n       }\n       .font-bold {\n         font-weight: 700;\n@@ -361,7 +361,7 @@ describe('watcher', () => {\n     expect(await readOutputFile(/index\\.\\w+\\.css$/)).toIncludeCss(css`\n       .btn {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+        background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         border-radius: 0.25rem;\n         padding: 0.25rem 0.5rem;\n       }\n\ndiff --git a/integrations/postcss-cli/tests/integration.test.js b/integrations/postcss-cli/tests/integration.test.js\nindex 964c57b82e39..08dd81baeab3 100644\n--- a/integrations/postcss-cli/tests/integration.test.js\n+++ b/integrations/postcss-cli/tests/integration.test.js\n@@ -64,7 +64,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -113,7 +113,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -252,7 +252,7 @@ describe('watcher', () => {\n         .btn {\n           border-radius: 0.25rem;\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n           padding-left: 0.5rem;\n           padding-right: 0.5rem;\n           padding-top: 0.25rem;\n\ndiff --git a/integrations/rollup-sass/tests/integration.test.js b/integrations/rollup-sass/tests/integration.test.js\nindex 8793784c6db6..98ace171ec82 100644\n--- a/integrations/rollup-sass/tests/integration.test.js\n+++ b/integrations/rollup-sass/tests/integration.test.js\n@@ -64,7 +64,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -113,7 +113,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -249,7 +249,7 @@ describe('watcher', () => {\n       css`\n         .btn {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n           border-radius: 0.25rem;\n           padding: 0.25rem 0.5rem;\n         }\n@@ -329,7 +329,7 @@ describe('watcher', () => {\n       css`\n         .btn {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n           border-radius: 0.25rem;\n           padding: 0.25rem 0.5rem;\n         }\n\ndiff --git a/integrations/rollup/tests/integration.test.js b/integrations/rollup/tests/integration.test.js\nindex 86544ffe1ec0..30edc8a50d08 100644\n--- a/integrations/rollup/tests/integration.test.js\n+++ b/integrations/rollup/tests/integration.test.js\n@@ -65,7 +65,7 @@ describe('static build', () => {\n       css`\n         .bg-primary {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+          background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -111,7 +111,7 @@ describe('static build', () => {\n       css`\n         .bg-primary {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+          background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -154,7 +154,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -203,7 +203,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -340,7 +340,7 @@ describe('watcher', () => {\n         .btn {\n           border-radius: 0.25rem;\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n           padding-left: 0.5rem;\n           padding-right: 0.5rem;\n           padding-top: 0.25rem;\n\ndiff --git a/integrations/tailwindcss-cli/tests/cli.test.js b/integrations/tailwindcss-cli/tests/cli.test.js\nindex a373b307a7c4..9795bd0d7018 100644\n--- a/integrations/tailwindcss-cli/tests/cli.test.js\n+++ b/integrations/tailwindcss-cli/tests/cli.test.js\n@@ -262,7 +262,7 @@ describe('Build command', () => {\n \n         .btn-after {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n           padding-left: 0.5rem;\n           padding-right: 0.5rem;\n           padding-top: 0.25rem;\n@@ -313,7 +313,7 @@ describe('Build command', () => {\n \n         .btn-after {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n           padding-left: 0.5rem;\n           padding-right: 0.5rem;\n           padding-top: 0.25rem;\n\ndiff --git a/integrations/tailwindcss-cli/tests/integration.test.js b/integrations/tailwindcss-cli/tests/integration.test.js\nindex 31b362353fbf..48d43fb41eeb 100644\n--- a/integrations/tailwindcss-cli/tests/integration.test.js\n+++ b/integrations/tailwindcss-cli/tests/integration.test.js\n@@ -75,12 +75,12 @@ describe('static build', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n \n         .bg-red-600 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(220 38 38 / var(--tw-bg-opacity));\n+          background-color: rgb(220 38 38 / var(--tw-bg-opacity, 1));\n         }\n \n         .font-bold {\n@@ -128,7 +128,7 @@ describe('static build', () => {\n       css`\n         .bg-primary {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+          background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -176,7 +176,7 @@ describe('static build', () => {\n         css`\n           .bg-primary {\n             --tw-bg-opacity: 1;\n-            background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+            background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n           }\n         `\n       )\n@@ -224,7 +224,7 @@ describe('static build', () => {\n       css`\n         .bg-yellow {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(255 255 0 / var(--tw-bg-opacity));\n+          background-color: rgb(255 255 0 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -279,7 +279,7 @@ describe('static build', () => {\n       css`\n         .bg-yellow {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(255 255 0 / var(--tw-bg-opacity));\n+          background-color: rgb(255 255 0 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -313,7 +313,7 @@ describe('static build', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -356,7 +356,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -405,7 +405,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -594,7 +594,7 @@ describe('watcher', () => {\n         .btn {\n           border-radius: 0.25rem;\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n           padding-left: 0.5rem;\n           padding-right: 0.5rem;\n           padding-top: 0.25rem;\n@@ -670,7 +670,7 @@ describe('watcher', () => {\n       css`\n         .bg-yellow {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(255 255 0 / var(--tw-bg-opacity));\n+          background-color: rgb(255 255 0 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -690,7 +690,7 @@ describe('watcher', () => {\n       css`\n         .bg-yellow {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(255 255 119 / var(--tw-bg-opacity));\n+          background-color: rgb(255 255 119 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -722,7 +722,7 @@ describe('watcher', () => {\n       css`\n         .bg-yellow {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n+          background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n\ndiff --git a/integrations/vite/tests/integration.test.js b/integrations/vite/tests/integration.test.js\nindex 1a3b1302b3a7..1001ff9c3903 100644\n--- a/integrations/vite/tests/integration.test.js\n+++ b/integrations/vite/tests/integration.test.js\n@@ -78,7 +78,7 @@ describe('static build', () => {\n       css`\n         .bg-primary {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+          background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -122,7 +122,7 @@ describe('static build', () => {\n       css`\n         .bg-primary {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+          background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -173,7 +173,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -226,7 +226,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -379,7 +379,7 @@ describe('watcher', () => {\n         .btn {\n           border-radius: 0.25rem;\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n           padding-left: 0.5rem;\n           padding-right: 0.5rem;\n           padding-top: 0.25rem;\n\ndiff --git a/integrations/webpack-4/tests/integration.test.js b/integrations/webpack-4/tests/integration.test.js\nindex ae7cce0c8a2d..6e0b034f20ed 100644\n--- a/integrations/webpack-4/tests/integration.test.js\n+++ b/integrations/webpack-4/tests/integration.test.js\n@@ -61,7 +61,7 @@ describe('static build', () => {\n       css`\n         .bg-primary {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+          background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -105,7 +105,7 @@ describe('static build', () => {\n       css`\n         .bg-primary {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+          background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -151,7 +151,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -203,7 +203,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -345,7 +345,7 @@ describe('watcher', () => {\n         .btn {\n           border-radius: 0.25rem;\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n           padding-left: 0.5rem;\n           padding-right: 0.5rem;\n           padding-top: 0.25rem;\n\ndiff --git a/integrations/webpack-5/tests/integration.test.js b/integrations/webpack-5/tests/integration.test.js\nindex 1a4a969a4a38..6209e0a5e900 100644\n--- a/integrations/webpack-5/tests/integration.test.js\n+++ b/integrations/webpack-5/tests/integration.test.js\n@@ -61,7 +61,7 @@ describe('static build', () => {\n       css`\n         .bg-primary {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+          background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -105,7 +105,7 @@ describe('static build', () => {\n       css`\n         .bg-primary {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+          background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n         }\n       `\n     )\n@@ -151,7 +151,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -203,7 +203,7 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n         .font-bold {\n           font-weight: 700;\n@@ -345,7 +345,7 @@ describe('watcher', () => {\n         .btn {\n           border-radius: 0.25rem;\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n           padding-left: 0.5rem;\n           padding-right: 0.5rem;\n           padding-top: 0.25rem;\n@@ -390,12 +390,12 @@ describe('watcher', () => {\n       css`\n         .bg-red-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+          background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n         }\n \n         .bg-red-600 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(220 38 38 / var(--tw-bg-opacity));\n+          background-color: rgb(220 38 38 / var(--tw-bg-opacity, 1));\n         }\n \n         .font-bold {\n\ndiff --git a/tests/apply.test.js b/tests/apply.test.js\nindex 6576241bfdeb..d9cc8ec82177 100644\n--- a/tests/apply.test.js\n+++ b/tests/apply.test.js\n@@ -161,7 +161,7 @@ test('@apply', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .basic-example {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n+        background-color: rgb(59 130 246 / var(--tw-bg-opacity, 1));\n         border-radius: 0.375rem;\n         padding: 0.5rem 1rem;\n       }\n@@ -243,7 +243,7 @@ test('@apply', () => {\n       .multiple,\n       .selectors {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n+        background-color: rgb(59 130 246 / var(--tw-bg-opacity, 1));\n         border-radius: 0.375rem;\n         padding: 0.5rem 1rem;\n       }\n@@ -307,16 +307,16 @@ test('@apply', () => {\n       }\n       .btn-blue {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n+        background-color: rgb(59 130 246 / var(--tw-bg-opacity, 1));\n         --tw-text-opacity: 1;\n-        color: rgb(255 255 255 / var(--tw-text-opacity));\n+        color: rgb(255 255 255 / var(--tw-text-opacity, 1));\n         border-radius: 0.25rem;\n         padding: 0.5rem 1rem;\n         font-weight: 700;\n       }\n       .btn-blue:hover {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(29 78 216 / var(--tw-bg-opacity));\n+        background-color: rgb(29 78 216 / var(--tw-bg-opacity, 1));\n       }\n       .recursive-apply-a {\n         font-weight: 900;\n@@ -651,22 +651,22 @@ test('@apply classes from outside a @layer', async () => {\n       }\n       .bar {\n         --tw-text-opacity: 1;\n-        color: rgb(239 68 68 / var(--tw-text-opacity));\n+        color: rgb(239 68 68 / var(--tw-text-opacity, 1));\n         font-weight: 700;\n       }\n       .bar:hover {\n         --tw-text-opacity: 1;\n-        color: rgb(34 197 94 / var(--tw-text-opacity));\n+        color: rgb(34 197 94 / var(--tw-text-opacity, 1));\n       }\n       .baz {\n         --tw-text-opacity: 1;\n-        color: rgb(239 68 68 / var(--tw-text-opacity));\n+        color: rgb(239 68 68 / var(--tw-text-opacity, 1));\n         font-weight: 700;\n         text-decoration-line: underline;\n       }\n       .baz:hover {\n         --tw-text-opacity: 1;\n-        color: rgb(34 197 94 / var(--tw-text-opacity));\n+        color: rgb(34 197 94 / var(--tw-text-opacity, 1));\n       }\n       .keep-me-even-though-I-am-not-used-in-content {\n         color: green;\n@@ -891,7 +891,7 @@ it('should not throw when the selector is different (but contains the base parti\n       .bg-gray-500,\n       .focus\\:bg-gray-500 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(107 114 128 / var(--tw-bg-opacity));\n+        background-color: rgb(107 114 128 / var(--tw-bg-opacity, 1));\n       }\n     `)\n   })\n@@ -1444,13 +1444,13 @@ describe('multiple instances', () => {\n         .a {\n           color: red;\n           --tw-text-opacity: 1;\n-          color: rgb(34 197 94 / var(--tw-text-opacity));\n+          color: rgb(34 197 94 / var(--tw-text-opacity, 1));\n           color: #00f;\n           text-decoration: underline;\n         }\n         .b {\n           --tw-text-opacity: 1;\n-          color: rgb(34 197 94 / var(--tw-text-opacity));\n+          color: rgb(34 197 94 / var(--tw-text-opacity, 1));\n           text-decoration: underline;\n         }\n       `)\n@@ -1567,7 +1567,7 @@ it('should work outside of layer', async () => {\n   expect(result.css).toMatchFormattedCss(css`\n     .input-text {\n       --tw-bg-opacity: 1;\n-      background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n+      background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\n       background-color: red;\n     }\n   `)\n@@ -1577,7 +1577,7 @@ it('should work outside of layer', async () => {\n   expect(result.css).toMatchFormattedCss(css`\n     .input-text {\n       --tw-bg-opacity: 1;\n-      background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n+      background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\n       background-color: red;\n     }\n   `)\n@@ -1605,7 +1605,7 @@ it('should work in layer', async () => {\n   expect(result.css).toMatchFormattedCss(css`\n     .input-text {\n       --tw-bg-opacity: 1;\n-      background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n+      background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\n       background-color: red;\n     }\n   `)\n@@ -1644,14 +1644,14 @@ it('apply partitioning works with media queries', async () => {\n     html,\n     body {\n       --tw-text-opacity: 1;\n-      color: rgb(22 163 74 / var(--tw-text-opacity));\n+      color: rgb(22 163 74 / var(--tw-text-opacity, 1));\n       font-size: 1rem;\n     }\n     @media print {\n       html,\n       body {\n         --tw-text-opacity: 1;\n-        color: rgb(220 38 38 / var(--tw-text-opacity));\n+        color: rgb(220 38 38 / var(--tw-text-opacity, 1));\n         font-size: 2rem;\n       }\n     }\n@@ -1978,7 +1978,7 @@ it('should maintain the correct selector when applying other utilities', () => {\n       .foo:hover.bar .baz,\n       .foo:hover.bar > .baz {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+        background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n         color: red;\n       }\n     `)\n@@ -2233,19 +2233,19 @@ test('applying classes with class-based dark variant to pseudo elements', async\n   expect(result.css).toMatchFormattedCss(css`\n     ::-webkit-scrollbar-track {\n       --tw-bg-opacity: 1;\n-      background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n+      background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\n     }\n     :is(.dark *)::-webkit-scrollbar-track {\n       --tw-bg-opacity: 1;\n-      background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+      background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n     }\n     ::-webkit-scrollbar-track:hover {\n       --tw-bg-opacity: 1;\n-      background-color: rgb(37 99 235 / var(--tw-bg-opacity));\n+      background-color: rgb(37 99 235 / var(--tw-bg-opacity, 1));\n     }\n     :is(.dark *)::-webkit-scrollbar-track:hover {\n       --tw-bg-opacity: 1;\n-      background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n+      background-color: rgb(59 130 246 / var(--tw-bg-opacity, 1));\n     }\n   `)\n })\n\ndiff --git a/tests/arbitrary-values.test.css b/tests/arbitrary-values.test.css\nindex 32d7110828a8..cc64391f1f50 100644\n--- a/tests/arbitrary-values.test.css\n+++ b/tests/arbitrary-values.test.css\n@@ -134,13 +134,13 @@\n   min-height: var(--height);\n }\n .w-\\[\\'\\)\\(\\)\\'\\] {\n-  width: \"")()\"";\n+  width: ')()';\n }\n .w-\\[\\'\\]\\[\\]\\'\\] {\n-  width: \""][]\"";\n+  width: '][]';\n }\n .w-\\[\\'\\}\\{\\}\\'\\] {\n-  width: \""}{}\"";\n+  width: '}{}';\n }\n .w-\\[\\(\\(\\)\\)\\] {\n   width: (());\n@@ -353,7 +353,7 @@\n   cursor: pointer;\n }\n .cursor-\\[url\\(\\'\\.\\/path_to_hand\\.cur\\'\\)_2_2\\2c pointer\\] {\n-  cursor: url(\""./path_to_hand.cur\"") 2 2, pointer;\n+  cursor: url('./path_to_hand.cur') 2 2, pointer;\n }\n .cursor-\\[url\\(hand\\.cur\\)_2_2\\2c pointer\\] {\n   cursor: url(hand.cur) 2 2, pointer;\n@@ -414,7 +414,7 @@\n   scroll-padding-top: var(--scroll-padding);\n }\n .list-\\[\\'\\\\1f44d\\'\\] {\n-  list-style-type: \""\\1f44d\"";\n+  list-style-type: '\\1f44d';\n }\n .list-\\[var\\(--value\\)\\] {\n   list-style-type: var(--value);\n@@ -506,7 +506,7 @@\n }\n .divide-\\[black\\] > :not([hidden]) ~ :not([hidden]) {\n   --tw-divide-opacity: 1;\n-  border-color: rgb(0 0 0 / var(--tw-divide-opacity));\n+  border-color: rgb(0 0 0 / var(--tw-divide-opacity, 1));\n }\n .divide-\\[var\\(--value\\)\\] > :not([hidden]) ~ :not([hidden]) {\n   border-color: var(--value);\n@@ -580,7 +580,7 @@\n }\n .border-\\[\\#f00\\] {\n   --tw-border-opacity: 1;\n-  border-color: rgb(255 0 0 / var(--tw-border-opacity));\n+  border-color: rgb(255 0 0 / var(--tw-border-opacity, 1));\n }\n .border-\\[color\\:var\\(--value\\)\\] {\n   border-color: var(--value);\n@@ -590,28 +590,28 @@\n }\n .border-b-\\[\\#f00\\] {\n   --tw-border-opacity: 1;\n-  border-bottom-color: rgb(255 0 0 / var(--tw-border-opacity));\n+  border-bottom-color: rgb(255 0 0 / var(--tw-border-opacity, 1));\n }\n .border-b-\\[color\\:var\\(--value\\)\\] {\n   border-bottom-color: var(--value);\n }\n .border-l-\\[\\#f00\\] {\n   --tw-border-opacity: 1;\n-  border-left-color: rgb(255 0 0 / var(--tw-border-opacity));\n+  border-left-color: rgb(255 0 0 / var(--tw-border-opacity, 1));\n }\n .border-l-\\[color\\:var\\(--value\\)\\] {\n   border-left-color: var(--value);\n }\n .border-r-\\[\\#f00\\] {\n   --tw-border-opacity: 1;\n-  border-right-color: rgb(255 0 0 / var(--tw-border-opacity));\n+  border-right-color: rgb(255 0 0 / var(--tw-border-opacity, 1));\n }\n .border-r-\\[color\\:var\\(--value\\)\\] {\n   border-right-color: var(--value);\n }\n .border-t-\\[\\#f00\\] {\n   --tw-border-opacity: 1;\n-  border-top-color: rgb(255 0 0 / var(--tw-border-opacity));\n+  border-top-color: rgb(255 0 0 / var(--tw-border-opacity, 1));\n }\n .border-t-\\[color\\:var\\(--value\\)\\] {\n   border-top-color: var(--value);\n@@ -627,25 +627,25 @@\n }\n .bg-\\[\\#0f0\\] {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(0 255 0 / var(--tw-bg-opacity));\n+  background-color: rgb(0 255 0 / var(--tw-bg-opacity, 1));\n }\n .bg-\\[\\#0f0_var\\(--value\\)\\] {\n   background-color: #0f0 var(--value);\n }\n .bg-\\[\\#ff0000\\] {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(255 0 0 / var(--tw-bg-opacity));\n+  background-color: rgb(255 0 0 / var(--tw-bg-opacity, 1));\n }\n .bg-\\[color\\:var\\(--value1\\)_var\\(--value2\\)\\] {\n   background-color: var(--value1) var(--value2);\n }\n .bg-\\[hsl\\(0\\2c 100\\%\\2c 50\\%\\)\\] {\n   --tw-bg-opacity: 1;\n-  background-color: hsl(0 100% 50% / var(--tw-bg-opacity));\n+  background-color: hsl(0 100% 50% / var(--tw-bg-opacity, 1));\n }\n .bg-\\[hsl\\(0rad\\2c 100\\%\\2c 50\\%\\)\\] {\n   --tw-bg-opacity: 1;\n-  background-color: hsl(0rad 100% 50% / var(--tw-bg-opacity));\n+  background-color: hsl(0rad 100% 50% / var(--tw-bg-opacity, 1));\n }\n .bg-\\[hsla\\(0\\2c 100\\%\\2c 50\\%\\2c 0\\.3\\)\\] {\n   background-color: hsla(0, 100%, 50%, 0.3);\n@@ -655,14 +655,14 @@\n }\n .bg-\\[rgb\\(123\\2c 123\\2c 123\\)\\] {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(123 123 123 / var(--tw-bg-opacity));\n+  background-color: rgb(123 123 123 / var(--tw-bg-opacity, 1));\n }\n .bg-\\[rgb\\(123\\2c _456\\2c _123\\)_black\\] {\n   background-color: rgb(123, 456, 123) black;\n }\n .bg-\\[rgb\\(123_456_789\\)\\] {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(123 456 789 / var(--tw-bg-opacity));\n+  background-color: rgb(123 456 789 / var(--tw-bg-opacity, 1));\n }\n .bg-\\[rgba\\(123\\2c 123\\2c 123\\2c 0\\.5\\)\\] {\n   background-color: rgba(123, 123, 123, 0.5);\n@@ -704,7 +704,7 @@\n   background-image: repeating-conic-gradient(#f8f9fa 0% 25%, white 0% 50%);\n }\n .bg-\\[url\\(\\'\\/path-to-image\\.png\\'\\)\\] {\n-  background-image: url(\""/path-to-image.png\"");\n+  background-image: url('/path-to-image.png');\n }\n .bg-\\[url\\:var\\(--url\\)\\] {\n   background-image: var(--url);\n@@ -819,16 +819,16 @@\n   vertical-align: 10em;\n }\n .font-\\[\\'Gill_Sans\\'\\] {\n-  font-family: \""Gill Sans\"";\n+  font-family: 'Gill Sans';\n }\n .font-\\[\\'Some_Font\\'\\2c \\'Some_Other_Font\\'\\] {\n-  font-family: \""Some Font\"", \""Some Other Font\"";\n+  font-family: 'Some Font', 'Some Other Font';\n }\n .font-\\[\\'Some_Font\\'\\2c sans-serif\\] {\n-  font-family: \""Some Font\"", sans-serif;\n+  font-family: 'Some Font', sans-serif;\n }\n .font-\\[\\'Some_Font\\'\\2c var\\(--other-font\\)\\] {\n-  font-family: \""Some Font\"", var(--other-font);\n+  font-family: 'Some Font', var(--other-font);\n }\n .font-\\[Georgia\\2c serif\\] {\n   font-family: Georgia, serif;\n@@ -874,22 +874,22 @@\n }\n .text-\\[black\\] {\n   --tw-text-opacity: 1;\n-  color: rgb(0 0 0 / var(--tw-text-opacity));\n+  color: rgb(0 0 0 / var(--tw-text-opacity, 1));\n }\n .text-\\[color\\:var\\(--color\\)\\] {\n   color: var(--color);\n }\n .text-\\[rgb\\(123\\2c 123\\2c 123\\)\\] {\n   --tw-text-opacity: 1;\n-  color: rgb(123 123 123 / var(--tw-text-opacity));\n+  color: rgb(123 123 123 / var(--tw-text-opacity, 1));\n }\n .text-\\[rgb\\(123\\2c _123\\2c _123\\)\\] {\n   --tw-text-opacity: 1;\n-  color: rgb(123 123 123 / var(--tw-text-opacity));\n+  color: rgb(123 123 123 / var(--tw-text-opacity, 1));\n }\n .text-\\[rgb\\(123_123_123\\)\\] {\n   --tw-text-opacity: 1;\n-  color: rgb(123 123 123 / var(--tw-text-opacity));\n+  color: rgb(123 123 123 / var(--tw-text-opacity, 1));\n }\n .text-opacity-\\[0\\.8\\] {\n   --tw-text-opacity: 0.8;\n@@ -985,7 +985,7 @@\n }\n .ring-\\[\\#76ad65\\] {\n   --tw-ring-opacity: 1;\n-  --tw-ring-color: rgb(118 173 101 / var(--tw-ring-opacity));\n+  --tw-ring-color: rgb(118 173 101 / var(--tw-ring-opacity, 1));\n }\n .ring-\\[color\\:var\\(--value\\)\\] {\n   --tw-ring-color: var(--value);\n@@ -1055,81 +1055,90 @@\n }\n .backdrop-blur-\\[11px\\] {\n   --tw-backdrop-blur: blur(11px);\n-  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n-    var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n-    var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n+  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n+    var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n+    var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n+    var(--tw-backdrop-sepia);\n   backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n     var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n     var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n }\n .backdrop-brightness-\\[1\\.23\\] {\n   --tw-backdrop-brightness: brightness(1.23);\n-  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n-    var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n-    var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n+  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n+    var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n+    var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n+    var(--tw-backdrop-sepia);\n   backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n     var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n     var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n }\n .backdrop-contrast-\\[0\\.87\\] {\n   --tw-backdrop-contrast: contrast(0.87);\n-  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n-    var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n-    var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n+  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n+    var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n+    var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n+    var(--tw-backdrop-sepia);\n   backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n     var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n     var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n }\n .backdrop-grayscale-\\[0\\.42\\] {\n   --tw-backdrop-grayscale: grayscale(0.42);\n-  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n-    var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n-    var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n+  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n+    var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n+    var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n+    var(--tw-backdrop-sepia);\n   backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n     var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n     var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n }\n .backdrop-hue-rotate-\\[1\\.57rad\\] {\n   --tw-backdrop-hue-rotate: hue-rotate(1.57rad);\n-  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n-    var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n-    var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n+  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n+    var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n+    var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n+    var(--tw-backdrop-sepia);\n   backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n     var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n     var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n }\n .backdrop-invert-\\[0\\.66\\] {\n   --tw-backdrop-invert: invert(0.66);\n-  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n-    var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n-    var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n+  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n+    var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n+    var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n+    var(--tw-backdrop-sepia);\n   backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n     var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n     var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n }\n .backdrop-opacity-\\[22\\%\\] {\n   --tw-backdrop-opacity: opacity(22%);\n-  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n-    var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n-    var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n+  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n+    var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n+    var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n+    var(--tw-backdrop-sepia);\n   backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n     var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n     var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n }\n .backdrop-saturate-\\[144\\%\\] {\n   --tw-backdrop-saturate: saturate(144%);\n-  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n-    var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n-    var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n+  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n+    var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n+    var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n+    var(--tw-backdrop-sepia);\n   backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n     var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n     var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n }\n .backdrop-sepia-\\[0\\.38\\] {\n   --tw-backdrop-sepia: sepia(0.38);\n-  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n-    var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n-    var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n+  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)\n+    var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)\n+    var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)\n+    var(--tw-backdrop-sepia);\n   backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)\n     var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)\n     var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);\n@@ -1155,11 +1164,11 @@\n   will-change: var(--will-change);\n }\n .content-\\[\\'\\>\\'\\] {\n-  --tw-content: \"">\"";\n+  --tw-content: '>';\n   content: var(--tw-content);\n }\n .content-\\[\\'hello\\'\\] {\n-  --tw-content: \""hello\"";\n+  --tw-content: 'hello';\n   content: var(--tw-content);\n }\n .content-\\[attr\\(content-before\\)\\] {\n\ndiff --git a/tests/arbitrary-values.test.js b/tests/arbitrary-values.test.js\nindex bdb81397ce2f..594980803235 100644\n--- a/tests/arbitrary-values.test.js\n+++ b/tests/arbitrary-values.test.js\n@@ -80,7 +80,7 @@ it('should support arbitrary values for various background utilities', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .bg-\\[\\#ff0000\\] {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(255 0 0 / var(--tw-bg-opacity));\n+        background-color: rgb(255 0 0 / var(--tw-bg-opacity, 1));\n       }\n       .bg-\\[color\\:var\\(--bg-color\\)\\] {\n         background-color: var(--bg-color);\n@@ -93,7 +93,7 @@ it('should support arbitrary values for various background utilities', () => {\n       }\n       .bg-red-500 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+        background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n       }\n       .bg-\\[url\\(\\'\\/image-1-0\\.png\\'\\)\\] {\n         background-image: url('/image-1-0.png');\n\ndiff --git a/tests/arbitrary-variants.test.js b/tests/arbitrary-variants.test.js\nindex c60bb92ad307..fce5f0576e17 100644\n--- a/tests/arbitrary-variants.test.js\n+++ b/tests/arbitrary-variants.test.js\n@@ -567,7 +567,7 @@ test('classes in arbitrary variants should not be prefixed', () => {\n       .hover\\:\\[\\&_\\.foo\\]\\:tw-text-red-400 .foo:hover,\n       .foo .\\[\\.foo_\\&\\]\\:tw-text-red-400 {\n         --tw-text-opacity: 1;\n-        color: rgb(248 113 113 / var(--tw-text-opacity));\n+        color: rgb(248 113 113 / var(--tw-text-opacity, 1));\n       }\n     `)\n   })\n@@ -601,19 +601,19 @@ test('classes in the same arbitrary variant should not be prefixed', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .\\[\\&_\\.foo\\]\\:tw-bg-white .foo {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n+        background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\n       }\n       .\\[\\&_\\.foo\\]\\:tw-text-red-400 .foo {\n         --tw-text-opacity: 1;\n-        color: rgb(248 113 113 / var(--tw-text-opacity));\n+        color: rgb(248 113 113 / var(--tw-text-opacity, 1));\n       }\n       .foo .\\[\\.foo_\\&\\]\\:tw-bg-white {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n+        background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\n       }\n       .foo .\\[\\.foo_\\&\\]\\:tw-text-red-400 {\n         --tw-text-opacity: 1;\n-        color: rgb(248 113 113 / var(--tw-text-opacity));\n+        color: rgb(248 113 113 / var(--tw-text-opacity, 1));\n       }\n     `)\n   })\n\ndiff --git a/tests/basic-usage.test.css b/tests/basic-usage.test.css\nindex 57b887d6d4b6..9e92cb9c75d2 100644\n--- a/tests/basic-usage.test.css\n+++ b/tests/basic-usage.test.css\n@@ -570,7 +570,7 @@\n }\n .divide-gray-200 > :not([hidden]) ~ :not([hidden]) {\n   --tw-divide-opacity: 1;\n-  border-color: rgb(229 231 235 / var(--tw-divide-opacity));\n+  border-color: rgb(229 231 235 / var(--tw-divide-opacity, 1));\n }\n .divide-opacity-50 > :not([hidden]) ~ :not([hidden]) {\n   --tw-divide-opacity: 0.5;\n@@ -644,40 +644,40 @@\n }\n .border-black {\n   --tw-border-opacity: 1;\n-  border-color: rgb(0 0 0 / var(--tw-border-opacity));\n+  border-color: rgb(0 0 0 / var(--tw-border-opacity, 1));\n }\n .border-x-black {\n   --tw-border-opacity: 1;\n-  border-left-color: rgb(0 0 0 / var(--tw-border-opacity));\n-  border-right-color: rgb(0 0 0 / var(--tw-border-opacity));\n+  border-left-color: rgb(0 0 0 / var(--tw-border-opacity, 1));\n+  border-right-color: rgb(0 0 0 / var(--tw-border-opacity, 1));\n }\n .border-y-black {\n   --tw-border-opacity: 1;\n-  border-top-color: rgb(0 0 0 / var(--tw-border-opacity));\n-  border-bottom-color: rgb(0 0 0 / var(--tw-border-opacity));\n+  border-top-color: rgb(0 0 0 / var(--tw-border-opacity, 1));\n+  border-bottom-color: rgb(0 0 0 / var(--tw-border-opacity, 1));\n }\n .border-b-black {\n   --tw-border-opacity: 1;\n-  border-bottom-color: rgb(0 0 0 / var(--tw-border-opacity));\n+  border-bottom-color: rgb(0 0 0 / var(--tw-border-opacity, 1));\n }\n .border-l-black {\n   --tw-border-opacity: 1;\n-  border-left-color: rgb(0 0 0 / var(--tw-border-opacity));\n+  border-left-color: rgb(0 0 0 / var(--tw-border-opacity, 1));\n }\n .border-r-black {\n   --tw-border-opacity: 1;\n-  border-right-color: rgb(0 0 0 / var(--tw-border-opacity));\n+  border-right-color: rgb(0 0 0 / var(--tw-border-opacity, 1));\n }\n .border-t-black {\n   --tw-border-opacity: 1;\n-  border-top-color: rgb(0 0 0 / var(--tw-border-opacity));\n+  border-top-color: rgb(0 0 0 / var(--tw-border-opacity, 1));\n }\n .border-opacity-10 {\n   --tw-border-opacity: 0.1;\n }\n .bg-green-500 {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n+  background-color: rgb(34 197 94 / var(--tw-bg-opacity, 1));\n }\n .bg-opacity-20 {\n   --tw-bg-opacity: 0.2;\n@@ -831,7 +831,7 @@\n }\n .text-indigo-500 {\n   --tw-text-opacity: 1;\n-  color: rgb(99 102 241 / var(--tw-text-opacity));\n+  color: rgb(99 102 241 / var(--tw-text-opacity, 1));\n }\n .text-opacity-10 {\n   --tw-text-opacity: 0.1;\n@@ -863,7 +863,7 @@\n }\n .placeholder-green-300::placeholder {\n   --tw-placeholder-opacity: 1;\n-  color: rgb(134 239 172 / var(--tw-placeholder-opacity));\n+  color: rgb(134 239 172 / var(--tw-placeholder-opacity, 1));\n }\n .placeholder-opacity-60::placeholder {\n   --tw-placeholder-opacity: 0.6;\n@@ -958,7 +958,7 @@\n }\n .ring-white {\n   --tw-ring-opacity: 1;\n-  --tw-ring-color: rgb(255 255 255 / var(--tw-ring-opacity));\n+  --tw-ring-color: rgb(255 255 255 / var(--tw-ring-opacity, 1));\n }\n .ring-opacity-40 {\n   --tw-ring-opacity: 0.4;\n\ndiff --git a/tests/basic-usage.test.js b/tests/basic-usage.test.js\nindex a65db81e24d4..06406306c65e 100644\n--- a/tests/basic-usage.test.js\n+++ b/tests/basic-usage.test.js\n@@ -243,7 +243,7 @@ test('all plugins are executed that match a candidate', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .bg-green-light {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(0 128 0 / var(--tw-bg-opacity));\n+        background-color: rgb(0 128 0 / var(--tw-bg-opacity, 1));\n       }\n     `)\n   })\n@@ -291,11 +291,11 @@ test('per-plugin colors with the same key can differ when using a custom colors\n     expect(result.css).toMatchFormattedCss(css`\n       .bg-theme {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(255 0 0 / var(--tw-bg-opacity));\n+        background-color: rgb(255 0 0 / var(--tw-bg-opacity, 1));\n       }\n       .text-theme {\n         --tw-text-opacity: 1;\n-        color: rgb(0 128 0 / var(--tw-text-opacity));\n+        color: rgb(0 128 0 / var(--tw-text-opacity, 1));\n       }\n     `)\n   })\n@@ -858,7 +858,7 @@ it('Ring color utilities are generated when using respectDefaultRingColorOpacity\n       }\n       .ring-blue-500 {\n         --tw-ring-opacity: 1;\n-        --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity));\n+        --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity, 1));\n       }\n     `)\n   })\n\ndiff --git a/tests/blocklist.test.js b/tests/blocklist.test.js\nindex e9915350f9e7..a9da1b2ed7b1 100644\n--- a/tests/blocklist.test.js\n+++ b/tests/blocklist.test.js\n@@ -76,7 +76,7 @@ it('blocklists do NOT support regexes', async () => {\n   expect(result.css).toMatchFormattedCss(css`\n     .bg-\\[\\#f00d1e\\] {\n       --tw-bg-opacity: 1;\n-      background-color: rgb(240 13 30 / var(--tw-bg-opacity));\n+      background-color: rgb(240 13 30 / var(--tw-bg-opacity, 1));\n     }\n     .font-bold {\n       font-weight: 700;\n@@ -97,7 +97,7 @@ it('can block classes generated by the safelist', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .bg-red-400 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(248 113 113 / var(--tw-bg-opacity));\n+        background-color: rgb(248 113 113 / var(--tw-bg-opacity, 1));\n       }\n       .font-bold {\n         font-weight: 700;\n\ndiff --git a/tests/collapse-adjacent-rules.test.js b/tests/collapse-adjacent-rules.test.js\nindex 81411b02ec5e..933558afc507 100644\n--- a/tests/collapse-adjacent-rules.test.js\n+++ b/tests/collapse-adjacent-rules.test.js\n@@ -102,14 +102,14 @@ test('collapse adjacent rules', () => {\n       @supports (foo: bar) {\n         .some-apply-thing {\n           --tw-text-opacity: 1;\n-          color: rgb(0 0 0 / var(--tw-text-opacity));\n+          color: rgb(0 0 0 / var(--tw-text-opacity, 1));\n           font-weight: 700;\n         }\n       }\n       @media (min-width: 768px) {\n         .some-apply-thing {\n           --tw-text-opacity: 1;\n-          color: rgb(0 0 0 / var(--tw-text-opacity));\n+          color: rgb(0 0 0 / var(--tw-text-opacity, 1));\n           font-weight: 700;\n         }\n       }\n@@ -117,7 +117,7 @@ test('collapse adjacent rules', () => {\n         @media (min-width: 768px) {\n           .some-apply-thing {\n             --tw-text-opacity: 1;\n-            color: rgb(0 0 0 / var(--tw-text-opacity));\n+            color: rgb(0 0 0 / var(--tw-text-opacity, 1));\n             font-weight: 700;\n           }\n         }\n\ndiff --git a/tests/color-opacity-modifiers.test.js b/tests/color-opacity-modifiers.test.js\nindex a4600a495bdb..1d34084b49ed 100644\n--- a/tests/color-opacity-modifiers.test.js\n+++ b/tests/color-opacity-modifiers.test.js\n@@ -30,7 +30,7 @@ test('colors with slashes are matched first', async () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .bg-red-500\\/50 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(255 0 0 / var(--tw-bg-opacity));\n+        background-color: rgb(255 0 0 / var(--tw-bg-opacity, 1));\n       }\n     `)\n   })\n@@ -207,21 +207,21 @@ test('opacity modifier in combination with partial custom properties', async ()\n     expect(result.css).toMatchFormattedCss(css`\n       .bg-\\[hsl\\(123\\,50\\%\\,var\\(--foo\\)\\)\\] {\n         --tw-bg-opacity: 1;\n-        background-color: hsl(123 50% var(--foo) / var(--tw-bg-opacity));\n+        background-color: hsl(123 50% var(--foo) / var(--tw-bg-opacity, 1));\n       }\n       .bg-\\[hsl\\(123\\,50\\%\\,var\\(--foo\\)\\)\\]\\/50 {\n         background-color: hsl(123 50% var(--foo) / 0.5);\n       }\n       .bg-\\[hsl\\(123\\,var\\(--foo\\)\\,50\\%\\)\\] {\n         --tw-bg-opacity: 1;\n-        background-color: hsl(123 var(--foo) 50% / var(--tw-bg-opacity));\n+        background-color: hsl(123 var(--foo) 50% / var(--tw-bg-opacity, 1));\n       }\n       .bg-\\[hsl\\(123\\,var\\(--foo\\)\\,50\\%\\)\\]\\/50 {\n         background-color: hsl(123 var(--foo) 50% / 0.5);\n       }\n       .bg-\\[hsl\\(var\\(--foo\\)\\,50\\%\\,50\\%\\)\\] {\n         --tw-bg-opacity: 1;\n-        background-color: hsl(var(--foo) 50% 50% / var(--tw-bg-opacity));\n+        background-color: hsl(var(--foo) 50% 50% / var(--tw-bg-opacity, 1));\n       }\n       .bg-\\[hsl\\(var\\(--foo\\)\\,50\\%\\,50\\%\\)\\]\\/50 {\n         background-color: hsl(var(--foo) 50% 50% / 0.5);\n\ndiff --git a/tests/context-reuse.test.js b/tests/context-reuse.test.js\nindex 7cd006cde4a8..0c76859762f0 100644\n--- a/tests/context-reuse.test.js\n+++ b/tests/context-reuse.test.js\n@@ -52,14 +52,14 @@ test('re-uses the context across multiple files with the same config', async ()\n   expect(results[1].css).toMatchFormattedCss(css`\n     body {\n       --tw-bg-opacity: 1;\n-      background-color: rgb(96 165 250 / var(--tw-bg-opacity));\n+      background-color: rgb(96 165 250 / var(--tw-bg-opacity, 1));\n     }\n   `)\n \n   expect(results[2].css).toMatchFormattedCss(css`\n     body {\n       --tw-text-opacity: 1;\n-      color: rgb(248 113 113 / var(--tw-text-opacity));\n+      color: rgb(248 113 113 / var(--tw-text-opacity, 1));\n     }\n   `)\n \n\ndiff --git a/tests/custom-extractors.test.js b/tests/custom-extractors.test.js\nindex f5933b7a595e..6b6cdf2cc433 100644\n--- a/tests/custom-extractors.test.js\n+++ b/tests/custom-extractors.test.js\n@@ -13,11 +13,11 @@ let sharedHtml = html`\n let expected = css`\n   .bg-white {\n     --tw-bg-opacity: 1;\n-    background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n+    background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\n   }\n   .text-indigo-500 {\n     --tw-text-opacity: 1;\n-    color: rgb(99 102 241 / var(--tw-text-opacity));\n+    color: rgb(99 102 241 / var(--tw-text-opacity, 1));\n   }\n `\n \n\ndiff --git a/tests/dark-mode.test.js b/tests/dark-mode.test.js\nindex 14585f4e3bd8..ff37f9fd8606 100644\n--- a/tests/dark-mode.test.js\n+++ b/tests/dark-mode.test.js\n@@ -179,16 +179,16 @@ it('should use legacy sorting when using `darkMode: class`', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .hover\\:text-green-200:hover {\n         --tw-text-opacity: 1;\n-        color: rgb(187 247 208 / var(--tw-text-opacity));\n+        color: rgb(187 247 208 / var(--tw-text-opacity, 1));\n       }\n       .dark\\:text-green-100:is(.dark *) {\n         --tw-text-opacity: 1;\n-        color: rgb(220 252 231 / var(--tw-text-opacity));\n+        color: rgb(220 252 231 / var(--tw-text-opacity, 1));\n       }\n       @media (min-width: 1024px) {\n         .lg\\:text-green-300 {\n           --tw-text-opacity: 1;\n-          color: rgb(134 239 172 / var(--tw-text-opacity));\n+          color: rgb(134 239 172 / var(--tw-text-opacity, 1));\n         }\n       }\n     `)\n@@ -214,17 +214,17 @@ it('should use modern sorting otherwise', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .hover\\:text-green-200:hover {\n         --tw-text-opacity: 1;\n-        color: rgb(187 247 208 / var(--tw-text-opacity));\n+        color: rgb(187 247 208 / var(--tw-text-opacity, 1));\n       }\n       @media (min-width: 1024px) {\n         .lg\\:text-green-300 {\n           --tw-text-opacity: 1;\n-          color: rgb(134 239 172 / var(--tw-text-opacity));\n+          color: rgb(134 239 172 / var(--tw-text-opacity, 1));\n         }\n       }\n       .dark\\:text-green-100:where(.dark, .dark *) {\n         --tw-text-opacity: 1;\n-        color: rgb(220 252 231 / var(--tw-text-opacity));\n+        color: rgb(220 252 231 / var(--tw-text-opacity, 1));\n       }\n     `)\n   })\n\ndiff --git a/tests/import-syntax.test.js b/tests/import-syntax.test.js\nindex a0f38c3fe777..eac1a752e04f 100644\n--- a/tests/import-syntax.test.js\n+++ b/tests/import-syntax.test.js\n@@ -70,7 +70,7 @@ test('using @import instead of @tailwind', () => {\n       }\n       .bg-black {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+        background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n       }\n       @media (min-width: 768px) {\n         .md\\:hover\\:text-center:hover {\n\ndiff --git a/tests/important-selector.test.js b/tests/important-selector.test.js\nindex bc41ecfceb4d..c6f4a08e925f 100644\n--- a/tests/important-selector.test.js\n+++ b/tests/important-selector.test.js\n@@ -196,7 +196,7 @@ test('pseudo-elements are appended after the `:is()`', () => {\n       #app .dark\\:before\\:bg-black:where(.dark, .dark *)::before {\n         content: var(--tw-content);\n         --tw-bg-opacity: 1;\n-        background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+        background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n       }\n     `)\n   })\n\ndiff --git a/tests/kitchen-sink.test.js b/tests/kitchen-sink.test.js\nindex e37fc5164e6b..20f030d127da 100644\n--- a/tests/kitchen-sink.test.js\n+++ b/tests/kitchen-sink.test.js\n@@ -253,7 +253,7 @@ test('it works', () => {\n       }\n       .apply-test {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(236 72 153 / var(--tw-bg-opacity));\n+        background-color: rgb(236 72 153 / var(--tw-bg-opacity, 1));\n         margin-top: 1.5rem;\n       }\n       .apply-test:hover,\n@@ -263,11 +263,11 @@ test('it works', () => {\n       @media (min-width: 640px) {\n         .apply-test {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n+          background-color: rgb(34 197 94 / var(--tw-bg-opacity, 1));\n         }\n         .apply-test:nth-child(2n):focus {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(251 207 232 / var(--tw-bg-opacity));\n+          background-color: rgb(251 207 232 / var(--tw-bg-opacity, 1));\n         }\n       }\n       .apply-components {\n@@ -315,7 +315,7 @@ test('it works', () => {\n       @media (min-width: 640px) {\n         .apply-with-existing:hover {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n+          background-color: rgb(34 197 94 / var(--tw-bg-opacity, 1));\n         }\n       }\n       .multiple,\n@@ -343,7 +343,7 @@ test('it works', () => {\n       }\n       .group:hover .apply-dark-group-example-a:where(.dark, .dark *) {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n+        background-color: rgb(34 197 94 / var(--tw-bg-opacity, 1));\n       }\n       @media (min-width: 640px) {\n         @media (prefers-reduced-motion: no-preference) {\n@@ -499,23 +499,23 @@ test('it works', () => {\n       }\n       .border-black {\n         --tw-border-opacity: 1;\n-        border-color: rgb(0 0 0 / var(--tw-border-opacity));\n+        border-color: rgb(0 0 0 / var(--tw-border-opacity, 1));\n       }\n       .border-e-red-400 {\n         --tw-border-opacity: 1;\n-        border-inline-end-color: rgb(248 113 113 / var(--tw-border-opacity));\n+        border-inline-end-color: rgb(248 113 113 / var(--tw-border-opacity, 1));\n       }\n       .border-s-green-500 {\n         --tw-border-opacity: 1;\n-        border-inline-start-color: rgb(34 197 94 / var(--tw-border-opacity));\n+        border-inline-start-color: rgb(34 197 94 / var(--tw-border-opacity, 1));\n       }\n       .bg-black {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+        background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n       }\n       .bg-green-500 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n+        background-color: rgb(34 197 94 / var(--tw-bg-opacity, 1));\n       }\n       .bg-opacity-50 {\n         --tw-bg-opacity: 0.5;\n@@ -701,7 +701,7 @@ test('it works', () => {\n       }\n       .focus\\:ring-blue-500:focus {\n         --tw-ring-opacity: 1;\n-        --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity));\n+        --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity, 1));\n       }\n       .focus\\:hover\\:font-light:hover:focus {\n         font-weight: 300;\n\ndiff --git a/tests/match-variants.test.js b/tests/match-variants.test.js\nindex 2923b10c0dc2..6eb83ac49e2e 100644\n--- a/tests/match-variants.test.js\n+++ b/tests/match-variants.test.js\n@@ -29,7 +29,7 @@ test('partial arbitrary variants', () => {\n       }\n       .potato-yellow .potato-\\[yellow\\]\\:bg-yellow-200 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(254 240 138 / var(--tw-bg-opacity));\n+        background-color: rgb(254 240 138 / var(--tw-bg-opacity, 1));\n       }\n     `)\n   })\n@@ -64,7 +64,7 @@ test('partial arbitrary variants with at-rules', () => {\n       @media (potato: yellow) {\n         .potato-\\[yellow\\]\\:bg-yellow-200 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(254 240 138 / var(--tw-bg-opacity));\n+          background-color: rgb(254 240 138 / var(--tw-bg-opacity, 1));\n         }\n       }\n     `)\n@@ -100,7 +100,7 @@ test('partial arbitrary variants with at-rules and placeholder', () => {\n       @media (potato: yellow) {\n         .potato-\\[yellow\\]\\:bg-yellow-200:potato {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(254 240 138 / var(--tw-bg-opacity));\n+          background-color: rgb(254 240 138 / var(--tw-bg-opacity, 1));\n         }\n       }\n     `)\n\ndiff --git a/tests/opacity.test.js b/tests/opacity.test.js\nindex ac439daa43a9..0e4f1f8c5fe0 100644\n--- a/tests/opacity.test.js\n+++ b/tests/opacity.test.js\n@@ -119,42 +119,42 @@ it('can use <alpha-value> defining custom properties for colors (opacity plugins\n     expect(result.css).toMatchFormattedCss(css`\n       .divide-primary > :not([hidden]) ~ :not([hidden]) {\n         --tw-divide-opacity: 1;\n-        border-color: rgb(var(--color-primary) / var(--tw-divide-opacity));\n+        border-color: rgb(var(--color-primary) / var(--tw-divide-opacity, 1));\n       }\n       .divide-opacity-50 > :not([hidden]) ~ :not([hidden]) {\n         --tw-divide-opacity: 0.5;\n       }\n       .border-primary {\n         --tw-border-opacity: 1;\n-        border-color: rgb(var(--color-primary) / var(--tw-border-opacity));\n+        border-color: rgb(var(--color-primary) / var(--tw-border-opacity, 1));\n       }\n       .border-opacity-50 {\n         --tw-border-opacity: 0.5;\n       }\n       .bg-primary {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(var(--color-primary) / var(--tw-bg-opacity));\n+        background-color: rgb(var(--color-primary) / var(--tw-bg-opacity, 1));\n       }\n       .bg-opacity-50 {\n         --tw-bg-opacity: 0.5;\n       }\n       .text-primary {\n         --tw-text-opacity: 1;\n-        color: rgb(var(--color-primary) / var(--tw-text-opacity));\n+        color: rgb(var(--color-primary) / var(--tw-text-opacity, 1));\n       }\n       .text-opacity-50 {\n         --tw-text-opacity: 0.5;\n       }\n       .placeholder-primary::placeholder {\n         --tw-placeholder-opacity: 1;\n-        color: rgb(var(--color-primary) / var(--tw-placeholder-opacity));\n+        color: rgb(var(--color-primary) / var(--tw-placeholder-opacity, 1));\n       }\n       .placeholder-opacity-50::placeholder {\n         --tw-placeholder-opacity: 0.5;\n       }\n       .ring-primary {\n         --tw-ring-opacity: 1;\n-        --tw-ring-color: rgb(var(--color-primary) / var(--tw-ring-opacity));\n+        --tw-ring-color: rgb(var(--color-primary) / var(--tw-ring-opacity, 1));\n       }\n       .ring-opacity-50 {\n         --tw-ring-opacity: 0.5;\n@@ -271,42 +271,42 @@ it('can use hsl helper when defining custom properties for colors (opacity plugi\n     expect(result.css).toMatchFormattedCss(css`\n       .divide-primary > :not([hidden]) ~ :not([hidden]) {\n         --tw-divide-opacity: 1;\n-        border-color: hsl(var(--color-primary) / var(--tw-divide-opacity));\n+        border-color: hsl(var(--color-primary) / var(--tw-divide-opacity, 1));\n       }\n       .divide-opacity-50 > :not([hidden]) ~ :not([hidden]) {\n         --tw-divide-opacity: 0.5;\n       }\n       .border-primary {\n         --tw-border-opacity: 1;\n-        border-color: hsl(var(--color-primary) / var(--tw-border-opacity));\n+        border-color: hsl(var(--color-primary) / var(--tw-border-opacity, 1));\n       }\n       .border-opacity-50 {\n         --tw-border-opacity: 0.5;\n       }\n       .bg-primary {\n         --tw-bg-opacity: 1;\n-        background-color: hsl(var(--color-primary) / var(--tw-bg-opacity));\n+        background-color: hsl(var(--color-primary) / var(--tw-bg-opacity, 1));\n       }\n       .bg-opacity-50 {\n         --tw-bg-opacity: 0.5;\n       }\n       .text-primary {\n         --tw-text-opacity: 1;\n-        color: hsl(var(--color-primary) / var(--tw-text-opacity));\n+        color: hsl(var(--color-primary) / var(--tw-text-opacity, 1));\n       }\n       .text-opacity-50 {\n         --tw-text-opacity: 0.5;\n       }\n       .placeholder-primary::placeholder {\n         --tw-placeholder-opacity: 1;\n-        color: hsl(var(--color-primary) / var(--tw-placeholder-opacity));\n+        color: hsl(var(--color-primary) / var(--tw-placeholder-opacity, 1));\n       }\n       .placeholder-opacity-50::placeholder {\n         --tw-placeholder-opacity: 0.5;\n       }\n       .ring-primary {\n         --tw-ring-opacity: 1;\n-        --tw-ring-color: hsl(var(--color-primary) / var(--tw-ring-opacity));\n+        --tw-ring-color: hsl(var(--color-primary) / var(--tw-ring-opacity, 1));\n       }\n       .ring-opacity-50 {\n         --tw-ring-opacity: 0.5;\n@@ -643,7 +643,7 @@ it('should be possible to use an <alpha-value> as part of the color definition',\n     expect(result.css).toMatchFormattedCss(css`\n       .bg-primary {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(var(--color-primary) / var(--tw-bg-opacity));\n+        background-color: rgb(var(--color-primary) / var(--tw-bg-opacity, 1));\n       }\n     `)\n   })\n@@ -769,7 +769,7 @@ it('Theme functions can reference values with slashes in brackets', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .bg-foo1 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+        background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n       }\n       .bg-foo2 {\n         background-color: #00000080;\n@@ -823,7 +823,7 @@ it('works with opacity values defined as a placeholder or a function in when col\n       }\n       .bg-foo20 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(255 100 0 / var(--tw-bg-opacity));\n+        background-color: rgb(255 100 0 / var(--tw-bg-opacity, 1));\n       }\n       .bg-foo21 {\n         background-color: #ff640080;\n@@ -836,7 +836,7 @@ it('works with opacity values defined as a placeholder or a function in when col\n       }\n       .bg-foo40 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(255 100 0 / var(--tw-bg-opacity));\n+        background-color: rgb(255 100 0 / var(--tw-bg-opacity, 1));\n       }\n       .bg-foo41 {\n         background-color: #ff640080;\n@@ -967,7 +967,7 @@ it('You can re-enable any opacity plugin even when disableColorOpacityUtilitiesB\n     expect(result.css).toMatchFormattedCss(css`\n       .divide-blue-300 > :not([hidden]) ~ :not([hidden]) {\n         --tw-divide-opacity: 1;\n-        border-color: rgb(147 197 253 / var(--tw-divide-opacity));\n+        border-color: rgb(147 197 253 / var(--tw-divide-opacity, 1));\n       }\n       .divide-blue-300\\/50 > :not([hidden]) ~ :not([hidden]) {\n         border-color: #93c5fd80;\n@@ -980,7 +980,7 @@ it('You can re-enable any opacity plugin even when disableColorOpacityUtilitiesB\n       }\n       .border-blue-300 {\n         --tw-border-opacity: 1;\n-        border-color: rgb(147 197 253 / var(--tw-border-opacity));\n+        border-color: rgb(147 197 253 / var(--tw-border-opacity, 1));\n       }\n       .border-blue-300\\/50 {\n         border-color: #93c5fd80;\n@@ -993,7 +993,7 @@ it('You can re-enable any opacity plugin even when disableColorOpacityUtilitiesB\n       }\n       .bg-blue-300 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(147 197 253 / var(--tw-bg-opacity));\n+        background-color: rgb(147 197 253 / var(--tw-bg-opacity, 1));\n       }\n       .bg-blue-300\\/50 {\n         background-color: #93c5fd80;\n@@ -1006,7 +1006,7 @@ it('You can re-enable any opacity plugin even when disableColorOpacityUtilitiesB\n       }\n       .text-blue-300 {\n         --tw-text-opacity: 1;\n-        color: rgb(147 197 253 / var(--tw-text-opacity));\n+        color: rgb(147 197 253 / var(--tw-text-opacity, 1));\n       }\n       .text-blue-300\\/50 {\n         color: #93c5fd80;\n@@ -1019,7 +1019,7 @@ it('You can re-enable any opacity plugin even when disableColorOpacityUtilitiesB\n       }\n       .placeholder-blue-300::placeholder {\n         --tw-placeholder-opacity: 1;\n-        color: rgb(147 197 253 / var(--tw-placeholder-opacity));\n+        color: rgb(147 197 253 / var(--tw-placeholder-opacity, 1));\n       }\n       .placeholder-blue-300\\/50::placeholder {\n         color: #93c5fd80;\n@@ -1032,7 +1032,7 @@ it('You can re-enable any opacity plugin even when disableColorOpacityUtilitiesB\n       }\n       .ring-blue-300 {\n         --tw-ring-opacity: 1;\n-        --tw-ring-color: rgb(147 197 253 / var(--tw-ring-opacity));\n+        --tw-ring-color: rgb(147 197 253 / var(--tw-ring-opacity, 1));\n       }\n       .ring-blue-300\\/50 {\n         --tw-ring-color: #93c5fd80;\n\ndiff --git a/tests/plugins/gradientColorStops.test.js b/tests/plugins/gradientColorStops.test.js\nindex c9647d50fb96..049856a555ed 100644\n--- a/tests/plugins/gradientColorStops.test.js\n+++ b/tests/plugins/gradientColorStops.test.js\n@@ -60,11 +60,11 @@ test('opacity variables are given to colors defined as closures', () => {\n       }\n       .text-primary {\n         --tw-text-opacity: 1;\n-        color: rgba(31, 31, 31, var(--tw-text-opacity));\n+        color: rgba(31, 31, 31, var(--tw-text-opacity, 1));\n       }\n       .text-secondary {\n         --tw-text-opacity: 1;\n-        color: hsl(10 50% 50% / var(--tw-text-opacity));\n+        color: hsl(10 50% 50% / var(--tw-text-opacity, 1));\n       }\n       .text-opacity-50 {\n         --tw-text-opacity: 0.5;\n\ndiff --git a/tests/prefers-contrast.test.js b/tests/prefers-contrast.test.js\nindex 52420ee1e395..87d983472946 100644\n--- a/tests/prefers-contrast.test.js\n+++ b/tests/prefers-contrast.test.js\n@@ -21,18 +21,18 @@ it('should be possible to use contrast-more and contrast-less variants', () => {\n       ${defaults}\n       .bg-white {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n+        background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\n       }\n       @media (prefers-contrast: more) {\n         .contrast-more\\:bg-pink-500 {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(236 72 153 / var(--tw-bg-opacity));\n+          background-color: rgb(236 72 153 / var(--tw-bg-opacity, 1));\n         }\n       }\n       @media (prefers-contrast: less) {\n         .contrast-less\\:bg-black {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+          background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n         }\n       }\n     `)\n@@ -57,13 +57,13 @@ it('dark mode should appear after the contrast variants', () => {\n       @media (prefers-contrast: more) {\n         .contrast-more\\:bg-black {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+          background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n         }\n       }\n       @media (prefers-color-scheme: dark) {\n         .dark\\:bg-white {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n+          background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\n         }\n       }\n     `)\n\ndiff --git a/tests/prefix.test.js b/tests/prefix.test.js\nindex 8a478f71028f..2ebb8acbc78b 100644\n--- a/tests/prefix.test.js\n+++ b/tests/prefix.test.js\n@@ -174,7 +174,7 @@ test('prefix', () => {\n       }\n       .dark\\:tw-bg-\\[rgb\\(255\\,0\\,0\\)\\]:where(.tw-dark, .tw-dark *) {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(255 0 0 / var(--tw-bg-opacity));\n+        background-color: rgb(255 0 0 / var(--tw-bg-opacity, 1));\n       }\n       .dark\\:focus\\:tw-text-left:focus:where(.tw-dark, .tw-dark *) {\n         text-align: left;\n@@ -530,7 +530,7 @@ test('supports non-word prefixes (1)', async () => {\n   expect(result.css).toMatchFormattedCss(css`\n     .\\@bg-black {\n       --tw-bg-opacity: 1;\n-      background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+      background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n     }\n     .\\@underline {\n       text-decoration-line: underline;\n@@ -540,7 +540,7 @@ test('supports non-word prefixes (1)', async () => {\n     }\n     .foo {\n       --tw-text-opacity: 1;\n-      color: rgb(255 255 255 / var(--tw-text-opacity));\n+      color: rgb(255 255 255 / var(--tw-text-opacity, 1));\n       background-color: red;\n     }\n     .hover\\:before\\:\\@content-\\[\\'Hovering\\'\\]:hover:before {\n@@ -592,7 +592,7 @@ test('supports non-word prefixes (2)', async () => {\n   expect(result.css).toMatchFormattedCss(css`\n     .\\@\\]\\$bg-black {\n       --tw-bg-opacity: 1;\n-      background-color: rgb(0 0 0 / var(--tw-bg-opacity));\n+      background-color: rgb(0 0 0 / var(--tw-bg-opacity, 1));\n     }\n     .\\@\\]\\$underline {\n       text-decoration-line: underline;\n@@ -602,7 +602,7 @@ test('supports non-word prefixes (2)', async () => {\n     }\n     .foo {\n       --tw-text-opacity: 1;\n-      color: rgb(255 255 255 / var(--tw-text-opacity));\n+      color: rgb(255 255 255 / var(--tw-text-opacity, 1));\n       background-color: red;\n     }\n   `)\n\ndiff --git a/tests/raw-content.test.css b/tests/raw-content.test.css\nindex a6be31fd0aec..92e4b8564be1 100644\n--- a/tests/raw-content.test.css\n+++ b/tests/raw-content.test.css\n@@ -368,7 +368,7 @@\n }\n .divide-gray-200 > :not([hidden]) ~ :not([hidden]) {\n   --tw-divide-opacity: 1;\n-  border-color: rgb(229 231 235 / var(--tw-divide-opacity));\n+  border-color: rgb(229 231 235 / var(--tw-divide-opacity, 1));\n }\n .divide-opacity-50 > :not([hidden]) ~ :not([hidden]) {\n   --tw-divide-opacity: 0.5;\n@@ -419,14 +419,14 @@\n }\n .border-black {\n   --tw-border-opacity: 1;\n-  border-color: rgb(0 0 0 / var(--tw-border-opacity));\n+  border-color: rgb(0 0 0 / var(--tw-border-opacity, 1));\n }\n .border-opacity-10 {\n   --tw-border-opacity: 0.1;\n }\n .bg-green-500 {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(34 197 94 / var(--tw-bg-opacity));\n+  background-color: rgb(34 197 94 / var(--tw-bg-opacity, 1));\n }\n .bg-opacity-20 {\n   --tw-bg-opacity: 0.2;\n@@ -525,7 +525,7 @@\n }\n .font-sans {\n   font-family: ui-sans-serif, system-ui, sans-serif, Apple Color Emoji, Segoe UI Emoji,\n-     Segoe UI Symbol, Noto Color Emoji;\n+    Segoe UI Symbol, Noto Color Emoji;\n }\n .text-2xl {\n   font-size: 1.5rem;\n@@ -566,7 +566,7 @@\n }\n .text-indigo-500 {\n   --tw-text-opacity: 1;\n-  color: rgb(99 102 241 / var(--tw-text-opacity));\n+  color: rgb(99 102 241 / var(--tw-text-opacity, 1));\n }\n .text-opacity-10 {\n   --tw-text-opacity: 0.1;\n@@ -580,7 +580,7 @@\n }\n .placeholder-green-300::placeholder {\n   --tw-placeholder-opacity: 1;\n-  color: rgb(134 239 172 / var(--tw-placeholder-opacity));\n+  color: rgb(134 239 172 / var(--tw-placeholder-opacity, 1));\n }\n .placeholder-opacity-60::placeholder {\n   --tw-placeholder-opacity: 0.6;\n@@ -635,7 +635,7 @@\n }\n .ring-white {\n   --tw-ring-opacity: 1;\n-  --tw-ring-color: rgb(255 255 255 / var(--tw-ring-opacity));\n+  --tw-ring-color: rgb(255 255 255 / var(--tw-ring-opacity, 1));\n }\n .ring-opacity-40 {\n   --tw-ring-opacity: 0.4;\n\ndiff --git a/tests/resolve-defaults-at-rules.test.js b/tests/resolve-defaults-at-rules.test.js\nindex d8d7d2a22d95..1258b79eda62 100644\n--- a/tests/resolve-defaults-at-rules.test.js\n+++ b/tests/resolve-defaults-at-rules.test.js\n@@ -504,7 +504,7 @@ test('with borders', async () => {\n       }\n       .border-red-500 {\n         --tw-border-opacity: 1;\n-        border-color: rgb(239 68 68 / var(--tw-border-opacity));\n+        border-color: rgb(239 68 68 / var(--tw-border-opacity, 1));\n       }\n       @media (min-width: 768px) {\n         .md\\:border-2 {\n\ndiff --git a/tests/safelist.test.js b/tests/safelist.test.js\nindex e2621f846e7c..a8d8cc1df366 100644\n--- a/tests/safelist.test.js\n+++ b/tests/safelist.test.js\n@@ -33,7 +33,7 @@ it('should safelist strings', () => {\n       }\n       .text-gray-200 {\n         --tw-text-opacity: 1;\n-        color: rgb(229 231 235 / var(--tw-text-opacity));\n+        color: rgb(229 231 235 / var(--tw-text-opacity, 1));\n       }\n       .hover\\:underline:hover {\n         text-decoration-line: underline;\n@@ -57,22 +57,22 @@ it('should safelist based on a pattern regex', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .bg-red-100 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n+        background-color: rgb(254 226 226 / var(--tw-bg-opacity, 1));\n       }\n       .bg-red-200 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n+        background-color: rgb(254 202 202 / var(--tw-bg-opacity, 1));\n       }\n       .uppercase {\n         text-transform: uppercase;\n       }\n       .hover\\:bg-red-100:hover {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n+        background-color: rgb(254 226 226 / var(--tw-bg-opacity, 1));\n       }\n       .hover\\:bg-red-200:hover {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n+        background-color: rgb(254 202 202 / var(--tw-bg-opacity, 1));\n       }\n     `)\n   })\n@@ -102,22 +102,22 @@ it('should not generate duplicates', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .bg-red-100 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n+        background-color: rgb(254 226 226 / var(--tw-bg-opacity, 1));\n       }\n       .bg-red-200 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n+        background-color: rgb(254 202 202 / var(--tw-bg-opacity, 1));\n       }\n       .uppercase {\n         text-transform: uppercase;\n       }\n       .hover\\:bg-red-100:hover {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n+        background-color: rgb(254 226 226 / var(--tw-bg-opacity, 1));\n       }\n       .hover\\:bg-red-200:hover {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n+        background-color: rgb(254 202 202 / var(--tw-bg-opacity, 1));\n       }\n     `)\n   })\n@@ -138,11 +138,11 @@ it('should safelist when using a custom prefix', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .tw-bg-red-100 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n+        background-color: rgb(254 226 226 / var(--tw-bg-opacity, 1));\n       }\n       .tw-bg-red-200 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n+        background-color: rgb(254 202 202 / var(--tw-bg-opacity, 1));\n       }\n       .tw-uppercase {\n         text-transform: uppercase;\n@@ -196,11 +196,11 @@ it('should not safelist any invalid variants if provided', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .bg-red-100 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n+        background-color: rgb(254 226 226 / var(--tw-bg-opacity, 1));\n       }\n       .bg-red-200 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n+        background-color: rgb(254 202 202 / var(--tw-bg-opacity, 1));\n       }\n       .uppercase {\n         text-transform: uppercase;\n@@ -254,7 +254,7 @@ it('should safelist negatives based on a pattern regex', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .bg-red-400 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(248 113 113 / var(--tw-bg-opacity));\n+        background-color: rgb(248 113 113 / var(--tw-bg-opacity, 1));\n       }\n       .bg-red-400\\/40 {\n         background-color: #f8717166;\n@@ -264,7 +264,7 @@ it('should safelist negatives based on a pattern regex', () => {\n       }\n       .bg-red-500 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+        background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n       }\n       .bg-red-500\\/40 {\n         background-color: #ef444466;\n@@ -286,7 +286,7 @@ it('should safelist negatives based on a pattern regex', () => {\n       }\n       .hover\\:bg-red-400:hover {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(248 113 113 / var(--tw-bg-opacity));\n+        background-color: rgb(248 113 113 / var(--tw-bg-opacity, 1));\n       }\n       .hover\\:bg-red-400\\/40:hover {\n         background-color: #f8717166;\n@@ -296,7 +296,7 @@ it('should safelist negatives based on a pattern regex', () => {\n       }\n       .hover\\:bg-red-500:hover {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+        background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n       }\n       .hover\\:bg-red-500\\/40:hover {\n         background-color: #ef444466;\n@@ -381,38 +381,38 @@ it('should safelist pattern regex having !important selector with variants', ()\n     expect(result.css).toMatchFormattedCss(css`\n       .\\!bg-gray-500 {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(107 114 128 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(107 114 128 / var(--tw-bg-opacity, 1)) !important;\n       }\n       .\\!bg-gray-600 {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(75 85 99 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(75 85 99 / var(--tw-bg-opacity, 1)) !important;\n       }\n       .\\!bg-gray-700 {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(55 65 81 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(55 65 81 / var(--tw-bg-opacity, 1)) !important;\n       }\n       .\\!bg-gray-800 {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(31 41 55 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(31 41 55 / var(--tw-bg-opacity, 1)) !important;\n       }\n       .uppercase {\n         text-transform: uppercase;\n       }\n       .hover\\:\\!bg-gray-500:hover {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(107 114 128 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(107 114 128 / var(--tw-bg-opacity, 1)) !important;\n       }\n       .hover\\:\\!bg-gray-600:hover {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(75 85 99 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(75 85 99 / var(--tw-bg-opacity, 1)) !important;\n       }\n       .hover\\:\\!bg-gray-700:hover {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(55 65 81 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(55 65 81 / var(--tw-bg-opacity, 1)) !important;\n       }\n       .hover\\:\\!bg-gray-800:hover {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(31 41 55 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(31 41 55 / var(--tw-bg-opacity, 1)) !important;\n       }\n     `)\n   })\n@@ -437,54 +437,54 @@ it('should safelist multiple patterns with !important selector', () => {\n     expect(result.css).toMatchFormattedCss(css`\n       .\\!bg-gray-200 {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(229 231 235 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(229 231 235 / var(--tw-bg-opacity, 1)) !important;\n       }\n       .\\!bg-gray-300 {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(209 213 219 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(209 213 219 / var(--tw-bg-opacity, 1)) !important;\n       }\n       .\\!bg-gray-400 {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(156 163 175 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(156 163 175 / var(--tw-bg-opacity, 1)) !important;\n       }\n       .uppercase {\n         text-transform: uppercase;\n       }\n       .\\!text-gray-700 {\n         --tw-text-opacity: 1 !important;\n-        color: rgb(55 65 81 / var(--tw-text-opacity)) !important;\n+        color: rgb(55 65 81 / var(--tw-text-opacity, 1)) !important;\n       }\n       .\\!text-gray-800 {\n         --tw-text-opacity: 1 !important;\n-        color: rgb(31 41 55 / var(--tw-text-opacity)) !important;\n+        color: rgb(31 41 55 / var(--tw-text-opacity, 1)) !important;\n       }\n       .\\!text-gray-900 {\n         --tw-text-opacity: 1 !important;\n-        color: rgb(17 24 39 / var(--tw-text-opacity)) !important;\n+        color: rgb(17 24 39 / var(--tw-text-opacity, 1)) !important;\n       }\n       .hover\\:\\!bg-gray-200:hover {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(229 231 235 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(229 231 235 / var(--tw-bg-opacity, 1)) !important;\n       }\n       .hover\\:\\!bg-gray-300:hover {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(209 213 219 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(209 213 219 / var(--tw-bg-opacity, 1)) !important;\n       }\n       .hover\\:\\!bg-gray-400:hover {\n         --tw-bg-opacity: 1 !important;\n-        background-color: rgb(156 163 175 / var(--tw-bg-opacity)) !important;\n+        background-color: rgb(156 163 175 / var(--tw-bg-opacity, 1)) !important;\n       }\n       .hover\\:\\!text-gray-700:hover {\n         --tw-text-opacity: 1 !important;\n-        color: rgb(55 65 81 / var(--tw-text-opacity)) !important;\n+        color: rgb(55 65 81 / var(--tw-text-opacity, 1)) !important;\n       }\n       .hover\\:\\!text-gray-800:hover {\n         --tw-text-opacity: 1 !important;\n-        color: rgb(31 41 55 / var(--tw-text-opacity)) !important;\n+        color: rgb(31 41 55 / var(--tw-text-opacity, 1)) !important;\n       }\n       .hover\\:\\!text-gray-900:hover {\n         --tw-text-opacity: 1 !important;\n-        color: rgb(17 24 39 / var(--tw-text-opacity)) !important;\n+        color: rgb(17 24 39 / var(--tw-text-opacity, 1)) !important;\n       }\n     `)\n   })\n\ndiff --git a/tests/source-maps.test.js b/tests/source-maps.test.js\nindex 45edbb70cd1e..4a8eaf2963b2 100644\n--- a/tests/source-maps.test.js\n+++ b/tests/source-maps.test.js\n@@ -46,14 +46,14 @@ test('apply generates source maps', async () => {\n     '4:6-33 -> 4:6-18',\n     '4:6-33 -> 5:6-17',\n     '4:6-33 -> 6:6-24',\n-    '4:6-33 -> 7:6-61',\n+    '4:6-33 -> 7:6-64',\n     '5:4 -> 8:4',\n     '7:4 -> 10:4',\n     '8:6-39 -> 11:6-39',\n     '9:6-31 -> 12:6-18',\n     '9:6-31 -> 13:6-17',\n     '9:6-31 -> 14:6-24',\n-    '9:6-31 -> 15:6-61',\n+    '9:6-31 -> 15:6-64',\n     '10:4 -> 16:4',\n     '13:6 -> 18:4',\n     '13:6-29 -> 19:6-18',\n\ndiff --git a/tests/syntax-lit-html.test.js b/tests/syntax-lit-html.test.js\nindex a3bdfebda160..5d2248c0b6fd 100644\n--- a/tests/syntax-lit-html.test.js\n+++ b/tests/syntax-lit-html.test.js\n@@ -19,7 +19,7 @@ test('it detects classes in lit-html templates', () => {\n       }\n       .bg-blue-400 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(96 165 250 / var(--tw-bg-opacity));\n+        background-color: rgb(96 165 250 / var(--tw-bg-opacity, 1));\n       }\n       .px-4 {\n         padding-left: 1rem;\n@@ -34,11 +34,11 @@ test('it detects classes in lit-html templates', () => {\n       }\n       .text-white {\n         --tw-text-opacity: 1;\n-        color: rgb(255 255 255 / var(--tw-text-opacity));\n+        color: rgb(255 255 255 / var(--tw-text-opacity, 1));\n       }\n       .hover\\:bg-blue-600:hover {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(37 99 235 / var(--tw-bg-opacity));\n+        background-color: rgb(37 99 235 / var(--tw-bg-opacity, 1));\n       }\n     `)\n   })\n\ndiff --git a/tests/syntax-svelte.test.js b/tests/syntax-svelte.test.js\nindex 65678857be27..c119df9660f3 100644\n--- a/tests/syntax-svelte.test.js\n+++ b/tests/syntax-svelte.test.js\n@@ -18,12 +18,12 @@ test('it detects svelte based on the file extension', () => {\n     expect(result.css).toMatchCss(css`\n       .bg-red-500 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+        background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n       }\n       @media (min-width: 1024px) {\n         .lg\\:hover\\:bg-blue-500:hover {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n+          background-color: rgb(59 130 246 / var(--tw-bg-opacity, 1));\n         }\n       }\n     `)\n@@ -64,12 +64,12 @@ test('using raw with svelte extension', () => {\n     expect(result.css).toMatchCss(css`\n       .bg-red-500 {\n         --tw-bg-opacity: 1;\n-        background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+        background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n       }\n       @media (min-width: 1024px) {\n         .lg\\:hover\\:bg-blue-500:hover {\n           --tw-bg-opacity: 1;\n-          background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n+          background-color: rgb(59 130 246 / var(--tw-bg-opacity, 1));\n         }\n       }\n     `)\n\ndiff --git a/tests/variants.test.css b/tests/variants.test.css\nindex 9fd06868669b..82d62eb6448e 100644\n--- a/tests/variants.test.css\n+++ b/tests/variants.test.css\n@@ -60,11 +60,11 @@\n }\n .first-letter\\:text-red-500:first-letter {\n   --tw-text-opacity: 1;\n-  color: rgb(239 68 68 / var(--tw-text-opacity));\n+  color: rgb(239 68 68 / var(--tw-text-opacity, 1));\n }\n .first-line\\:bg-yellow-300:first-line {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(253 224 71 / var(--tw-bg-opacity));\n+  background-color: rgb(253 224 71 / var(--tw-bg-opacity, 1));\n }\n .first-line\\:underline:first-line {\n   text-decoration-line: underline;\n@@ -85,34 +85,34 @@\n }\n .selection\\:bg-blue-500 ::selection {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n+  background-color: rgb(59 130 246 / var(--tw-bg-opacity, 1));\n }\n .selection\\:text-white ::selection {\n   --tw-text-opacity: 1;\n-  color: rgb(255 255 255 / var(--tw-text-opacity));\n+  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\n }\n .selection\\:bg-blue-500::selection {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n+  background-color: rgb(59 130 246 / var(--tw-bg-opacity, 1));\n }\n .selection\\:text-white::selection {\n   --tw-text-opacity: 1;\n-  color: rgb(255 255 255 / var(--tw-text-opacity));\n+  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\n }\n .file\\:bg-blue-500::file-selector-button {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n+  background-color: rgb(59 130 246 / var(--tw-bg-opacity, 1));\n }\n .file\\:text-white::file-selector-button {\n   --tw-text-opacity: 1;\n-  color: rgb(255 255 255 / var(--tw-text-opacity));\n+  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\n }\n .placeholder\\:font-bold::placeholder {\n   font-weight: 700;\n }\n .placeholder\\:text-red-500::placeholder {\n   --tw-text-opacity: 1;\n-  color: rgb(239 68 68 / var(--tw-text-opacity));\n+  color: rgb(239 68 68 / var(--tw-text-opacity, 1));\n }\n .backdrop\\:shadow-md::backdrop {\n   --tw-shadow: 0 4px 6px -1px #0000001a, 0 2px 4px -2px #0000001a;\n@@ -127,7 +127,7 @@\n .before\\:bg-red-500:before {\n   content: var(--tw-content);\n   --tw-bg-opacity: 1;\n-  background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n+  background-color: rgb(239 68 68 / var(--tw-bg-opacity, 1));\n }\n .after\\:flex:after {\n   content: var(--tw-content);\n@@ -154,7 +154,7 @@\n }\n .open\\:bg-red-200[open] {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n+  background-color: rgb(254 202 202 / var(--tw-bg-opacity, 1));\n }\n .default\\:shadow-md:default,\n .checked\\:shadow-md:checked,\n@@ -207,11 +207,11 @@\n }\n .file\\:hover\\:bg-blue-600:hover::file-selector-button {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(37 99 235 / var(--tw-bg-opacity));\n+  background-color: rgb(37 99 235 / var(--tw-bg-opacity, 1));\n }\n .open\\:hover\\:bg-red-200:hover[open] {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n+  background-color: rgb(254 202 202 / var(--tw-bg-opacity, 1));\n }\n .focus\\:shadow-md:focus,\n .focus\\:hover\\:shadow-md:hover:focus,\n@@ -236,7 +236,7 @@\n }\n .group[open] .group-open\\:bg-red-200 {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n+  background-color: rgb(254 202 202 / var(--tw-bg-opacity, 1));\n }\n .group:default .group-default\\:shadow-md,\n .group:checked .group-checked\\:shadow-md,\n@@ -287,7 +287,7 @@\n }\n .group[open]:focus .group-open\\:group-focus\\:bg-red-200 {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n+  background-color: rgb(254 202 202 / var(--tw-bg-opacity, 1));\n }\n .group:focus:hover .group-focus\\:group-hover\\:shadow-md,\n .group:focus-visible .group-focus-visible\\:shadow-md,\n@@ -313,7 +313,7 @@\n }\n .peer[open] ~ .peer-open\\:bg-red-200 {\n   --tw-bg-opacity: 1;\n-  background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n+  background-color: rgb(254 202 202 / var(--tw-bg-opacity, 1));\n }\n .peer:default ~ .peer-default\\:shadow-md,\n .peer:checked ~ .peer-checked\\:shadow-md,\n@@ -380,13 +380,13 @@\n @media (prefers-contrast: more) {\n   .contrast-more\\:bg-yellow-300 {\n     --tw-bg-opacity: 1;\n-    background-color: rgb(253 224 71 / var(--tw-bg-opacity));\n+    background-color: rgb(253 224 71 / var(--tw-bg-opacity, 1));\n   }\n }\n @media (prefers-contrast: less) {\n   .contrast-less\\:bg-yellow-300 {\n     --tw-bg-opacity: 1;\n-    background-color: rgb(253 224 71 / var(--tw-bg-opacity));\n+    background-color: rgb(253 224 71 / var(--tw-bg-opacity, 1));\n   }\n }\n @media (width >= 640px) {\n@@ -447,17 +447,17 @@\n @media (orientation: portrait) {\n   .portrait\\:bg-yellow-300 {\n     --tw-bg-opacity: 1;\n-    background-color: rgb(253 224 71 / var(--tw-bg-opacity));\n+    background-color: rgb(253 224 71 / var(--tw-bg-opacity, 1));\n   }\n }\n @media (orientation: landscape) {\n   .landscape\\:bg-yellow-300 {\n     --tw-bg-opacity: 1;\n-    background-color: rgb(253 224 71 / var(--tw-bg-opacity));\n+    background-color: rgb(253 224 71 / var(--tw-bg-opacity, 1));\n   }\n }\n-.ltr\\:shadow-md:where([dir=\""ltr\""], [dir=\""ltr\""] *),\n-.rtl\\:shadow-md:where([dir=\""rtl\""], [dir=\""rtl\""] *),\n+.ltr\\:shadow-md:where([dir='ltr'], [dir='ltr'] *),\n+.rtl\\:shadow-md:where([dir='rtl'], [dir='rtl'] *),\n .dark\\:shadow-md:where(.dark, .dark *),\n .group:disabled:focus:hover\n   .dark\\:group-disabled\\:group-focus\\:group-hover\\:shadow-md:where(.dark, .dark *),\n@@ -505,8 +505,6 @@\n @media print {\n   .print\\:bg-yellow-300 {\n     --tw-bg-opacity: 1;\n-    background-color: rgb(253 224 71 / var(--tw-bg-opacity));\n+    background-color: rgb(253 224 71 / var(--tw-bg-opacity, 1));\n   }\n }\n-\n-\n\ndiff --git a/tests/variants.test.js b/tests/variants.test.js\nindex 8bc5084c24e1..78d5601133d3 100644\n--- a/tests/variants.test.js\n+++ b/tests/variants.test.js\n@@ -299,7 +299,7 @@ test('stacked peer variants', async () => {\n   expect(result.css).toIncludeCss(css`\n     .peer:disabled:focus:hover ~ .peer-disabled\\:peer-focus\\:peer-hover\\:border-blue-500 {\n       --tw-border-opacity: 1;\n-      border-color: rgb(59 130 246 / var(--tw-border-opacity));\n+      border-color: rgb(59 130 246 / var(--tw-border-opacity, 1));\n     }\n   `)\n })\n@@ -1050,7 +1050,7 @@ test('variants with slashes in them work', () => {\n       @media (min-aspect-ratio: 1 / 10) {\n         .ar-1\\/10\\:text-red-500 {\n           --tw-text-opacity: 1;\n-          color: rgb(239 68 68 / var(--tw-text-opacity));\n+          color: rgb(239 68 68 / var(--tw-text-opacity, 1));\n         }\n       }\n     `)\n@@ -1087,7 +1087,7 @@ test('variants with slashes support modifiers', () => {\n       @media (min-aspect-ratio: 1 / 10) and (foo: 20) {\n         .ar-1\\/10\\/20\\:text-red-500 {\n           --tw-text-opacity: 1;\n-          color: rgb(239 68 68 / var(--tw-text-opacity));\n+          color: rgb(239 68 68 / var(--tw-text-opacity, 1));\n         }\n       }\n     `)\n\ndiff --git a/tests/withAlphaVariable.test.js b/tests/withAlphaVariable.test.js\nindex d543dfc6ed73..3a430d5b8b2a 100644\n--- a/tests/withAlphaVariable.test.js\n+++ b/tests/withAlphaVariable.test.js\n@@ -5,7 +5,7 @@ test('it adds the right custom property', () => {\n     withAlphaVariable({ color: '#ff0000', property: 'color', variable: '--tw-text-opacity' })\n   ).toEqual({\n     '--tw-text-opacity': '1',\n-    color: 'rgb(255 0 0 / var(--tw-text-opacity))',\n+    color: 'rgb(255 0 0 / var(--tw-text-opacity, 1))',\n   })\n   expect(\n     withAlphaVariable({\n@@ -15,7 +15,7 @@ test('it adds the right custom property', () => {\n     })\n   ).toEqual({\n     '--tw-text-opacity': '1',\n-    color: 'hsl(240 100% 50% / var(--tw-text-opacity))',\n+    color: 'hsl(240 100% 50% / var(--tw-text-opacity, 1))',\n   })\n })\n \n@@ -179,7 +179,7 @@ test('it allows a closure to be passed', () => {\n     })\n   ).toEqual({\n     '--tw-bg-opacity': '1',\n-    'background-color': 'rgba(0, 0, 0, var(--tw-bg-opacity))',\n+    'background-color': 'rgba(0, 0, 0, var(--tw-bg-opacity, 1))',\n   })\n })\n \n@@ -192,7 +192,7 @@ test('it transforms rgb and hsl to space-separated rgb and hsl', () => {\n     })\n   ).toEqual({\n     '--tw-bg-opacity': '1',\n-    'background-color': 'rgb(50 50 50 / var(--tw-bg-opacity))',\n+    'background-color': 'rgb(50 50 50 / var(--tw-bg-opacity, 1))',\n   })\n   expect(\n     withAlphaVariable({\n@@ -202,7 +202,7 @@ test('it transforms rgb and hsl to space-separated rgb and hsl', () => {\n     })\n   ).toEqual({\n     '--tw-bg-opacity': '1',\n-    'background-color': 'rgb(50 50 50 / var(--tw-bg-opacity))',\n+    'background-color': 'rgb(50 50 50 / var(--tw-bg-opacity, 1))',\n   })\n   expect(\n     withAlphaVariable({\n@@ -212,7 +212,7 @@ test('it transforms rgb and hsl to space-separated rgb and hsl', () => {\n     })\n   ).toEqual({\n     '--tw-bg-opacity': '1',\n-    'background-color': 'hsl(50 50% 50% / var(--tw-bg-opacity))',\n+    'background-color': 'hsl(50 50% 50% / var(--tw-bg-opacity, 1))',\n   })\n   expect(\n     withAlphaVariable({\n@@ -222,7 +222,7 @@ test('it transforms rgb and hsl to space-separated rgb and hsl', () => {\n     })\n   ).toEqual({\n     '--tw-bg-opacity': '1',\n-    'background-color': 'hsl(50 50% 50% / var(--tw-bg-opacity))',\n+    'background-color': 'hsl(50 50% 50% / var(--tw-bg-opacity, 1))',\n   })\n })\n \n@@ -235,6 +235,6 @@ test('it transforms named colors to rgb', () => {\n     })\n   ).toEqual({\n     '--tw-bg-opacity': '1',\n-    'background-color': 'rgb(255 0 0 / var(--tw-bg-opacity))',\n+    'background-color': 'rgb(255 0 0 / var(--tw-bg-opacity, 1))',\n   })\n })\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-14993"", ""pr_id"": 14993, ""issue_id"": 13129, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Styles are not applied to the \""container\"" class\n**What version of Tailwind CSS are you using?**\r\nv.next\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\nvite (v5.1.5), @builder.io/qwik (v1.5.1), @builder.io/qwik-city (v1.5.1), @tailwindcss/vite (v.next)\r\n\r\n**What version of Node.js are you using?**\r\nv20.9.0\r\n\r\n**What browser are you using?**\r\nChrome, Safari, Edge\r\n\r\n**What operating system are you using?**\r\nmacOS\r\n\r\n**Reproduction URL** \r\nhttps://codesandbox.io/p/devbox/peaceful-hertz-jx9sd2?file=%2Fsrc%2Froutes%2Findex.tsx\r\n\r\n**Describe your issue**\r\n\r\nIn TailwindCSS version 4, it seems that the styles of the \""container\"" class are not loaded. In previous versions the \""container\"" class works correctly."", ""issue_word_count"": 122, ""test_files_count"": 2, ""non_test_files_count"": 5, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap"", ""packages/tailwindcss/src/property-order.ts"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts"", ""packages/tailwindcss/src/utils/compare-breakpoints.ts"", ""packages/tailwindcss/src/variants.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap"", ""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""dda181b833c472bf4070f6c0c1d61fb88c016368"", ""head_commit"": ""e2623dae720107fe315894cde54458e646582129"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/14993"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/14993"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-13T18:39:21.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex dd3b69192809..f0addeb7945b 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -11,6 +11,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Support opacity values in increments of `0.25` by default ([#14980](https://github.com/tailwindlabs/tailwindcss/pull/14980))\n - Support specifying the color interpolation method for gradients via modifier ([#14984](https://github.com/tailwindlabs/tailwindcss/pull/14984))\n+- Reintroduce `container` component as a utility ([#14993](https://github.com/tailwindlabs/tailwindcss/pull/14993))\n \n ### Fixed\n \n\ndiff --git a/packages/tailwindcss/src/property-order.ts b/packages/tailwindcss/src/property-order.ts\nindex 6667ec16b062..d8bdb0265270 100644\n--- a/packages/tailwindcss/src/property-order.ts\n+++ b/packages/tailwindcss/src/property-order.ts\n@@ -28,6 +28,10 @@ export default [\n   'float',\n   'clear',\n \n+  // Ensure that the included `container` class is always sorted before any\n+  // custom container extensions\n+  '--tw-container-component',\n+\n   // How do we make `mx-0` come before `mt-0`?\n   // Idea: `margin-x` property that we compile away with a Visitor plugin?\n   'margin',\n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 785b5ff6c119..f979b4a583d6 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -1,6 +1,7 @@\n import { atRoot, atRule, decl, styleRule, type AstNode } from './ast'\n import type { Candidate, CandidateModifier, NamedUtilityValue } from './candidate'\n import type { Theme, ThemeKey } from './theme'\n+import { compareBreakpoints } from './utils/compare-breakpoints'\n import { DefaultMap } from './utils/default-map'\n import {\n   inferDataType,\n@@ -897,6 +898,18 @@ export function createUtilities(theme: Theme) {\n     })\n   }\n \n+  utilities.static('container', () => {\n+    let breakpoints = [...theme.namespace('--breakpoint').values()]\n+    breakpoints.sort((a, z) => compareBreakpoints(a, z, 'asc'))\n+\n+    let decls: AstNode[] = [decl('--tw-sort', '--tw-container-component'), decl('width', '100%')]\n+    for (let breakpoint of breakpoints) {\n+      decls.push(atRule('@media', `(min-width: ${breakpoint})`, [decl('max-width', breakpoint)]))\n+    }\n+\n+    return decls\n+  })\n+\n   /**\n    * @css `flex`\n    */\n\ndiff --git a/packages/tailwindcss/src/utils/compare-breakpoints.ts b/packages/tailwindcss/src/utils/compare-breakpoints.ts\nnew file mode 100644\nindex 000000000000..08e97998ea54\n--- /dev/null\n+++ b/packages/tailwindcss/src/utils/compare-breakpoints.ts\n@@ -0,0 +1,48 @@\n+export function compareBreakpoints(a: string, z: string, direction: 'asc' | 'desc') {\n+  if (a === z) return 0\n+\n+  // Assumption: when a `(` exists, we are dealing with a CSS function.\n+  //\n+  // E.g.: `calc(100% - 1rem)`\n+  let aIsCssFunction = a.indexOf('(')\n+  let zIsCssFunction = z.indexOf('(')\n+\n+  let aBucket =\n+    aIsCssFunction === -1\n+      ? // No CSS function found, bucket by unit instead\n+        a.replace(/[\\d.]+/g, '')\n+      : // CSS function found, bucket by function name\n+        a.slice(0, aIsCssFunction)\n+\n+  let zBucket =\n+    zIsCssFunction === -1\n+      ? // No CSS function found, bucket by unit\n+        z.replace(/[\\d.]+/g, '')\n+      : // CSS function found, bucket by function name\n+        z.slice(0, zIsCssFunction)\n+\n+  let order =\n+    // Compare by bucket name\n+    (aBucket === zBucket ? 0 : aBucket < zBucket ? -1 : 1) ||\n+    // If bucket names are the same, compare by value\n+    (direction === 'asc' ? parseInt(a) - parseInt(z) : parseInt(z) - parseInt(a))\n+\n+  // If the groups are the same, and the contents are not numbers, the\n+  // `order` will result in `NaN`. In this case, we want to make sorting\n+  // stable by falling back to a string comparison.\n+  //\n+  // This can happen when using CSS functions such as `calc`.\n+  //\n+  // E.g.:\n+  //\n+  // - `min-[calc(100%-1rem)]` and `min-[calc(100%-2rem)]`\n+  // - `@[calc(100%-1rem)]` and `@[calc(100%-2rem)]`\n+  //\n+  // In this scenario, we want to alphabetically sort `calc(100%-1rem)` and\n+  // `calc(100%-2rem)` to make it deterministic.\n+  if (Number.isNaN(order)) {\n+    return a < z ? -1 : 1\n+  }\n+\n+  return order\n+}\n\ndiff --git a/packages/tailwindcss/src/variants.ts b/packages/tailwindcss/src/variants.ts\nindex 7174323eb92a..2a636f20831c 100644\n--- a/packages/tailwindcss/src/variants.ts\n+++ b/packages/tailwindcss/src/variants.ts\n@@ -13,6 +13,7 @@ import {\n } from './ast'\n import { type Variant } from './candidate'\n import type { Theme } from './theme'\n+import { compareBreakpoints } from './utils/compare-breakpoints'\n import { DefaultMap } from './utils/default-map'\n import { isPositiveInteger } from './utils/infer-data-type'\n import { segment } from './utils/segment'\n@@ -869,7 +870,7 @@ export function createVariants(theme: Theme): Variants {\n     // Helper to compare variants by their resolved values, this is used by the\n     // responsive variants (`sm`, `md`, ...), `min-*`, `max-*` and container\n     // queries (`@`).\n-    function compareBreakpoints(\n+    function compareBreakpointVariants(\n       a: Variant,\n       z: Variant,\n       direction: 'asc' | 'desc',\n@@ -882,54 +883,7 @@ export function createVariants(theme: Theme): Variants {\n       let zValue = lookup.get(z)\n       if (zValue === null) return direction === 'asc' ? 1 : -1\n \n-      if (aValue === zValue) return 0\n-\n-      // Assumption: when a `(` exists, we are dealing with a CSS function.\n-      //\n-      // E.g.: `calc(100% - 1rem)`\n-      let aIsCssFunction = aValue.indexOf('(')\n-      let zIsCssFunction = zValue.indexOf('(')\n-\n-      let aBucket =\n-        aIsCssFunction === -1\n-          ? // No CSS function found, bucket by unit instead\n-            aValue.replace(/[\\d.]+/g, '')\n-          : // CSS function found, bucket by function name\n-            aValue.slice(0, aIsCssFunction)\n-\n-      let zBucket =\n-        zIsCssFunction === -1\n-          ? // No CSS function found, bucket by unit\n-            zValue.replace(/[\\d.]+/g, '')\n-          : // CSS function found, bucket by function name\n-            zValue.slice(0, zIsCssFunction)\n-\n-      let order =\n-        // Compare by bucket name\n-        (aBucket === zBucket ? 0 : aBucket < zBucket ? -1 : 1) ||\n-        // If bucket names are the same, compare by value\n-        (direction === 'asc'\n-          ? parseInt(aValue) - parseInt(zValue)\n-          : parseInt(zValue) - parseInt(aValue))\n-\n-      // If the groups are the same, and the contents are not numbers, the\n-      // `order` will result in `NaN`. In this case, we want to make sorting\n-      // stable by falling back to a string comparison.\n-      //\n-      // This can happen when using CSS functions such as `calc`.\n-      //\n-      // E.g.:\n-      //\n-      // - `min-[calc(100%-1rem)]` and `min-[calc(100%-2rem)]`\n-      // - `@[calc(100%-1rem)]` and `@[calc(100%-2rem)]`\n-      //\n-      // In this scenario, we want to alphabetically sort `calc(100%-1rem)` and\n-      // `calc(100%-2rem)` to make it deterministic.\n-      if (Number.isNaN(order)) {\n-        return aValue < zValue ? -1 : 1\n-      }\n-\n-      return order\n+      return compareBreakpoints(aValue, zValue, direction)\n     }\n \n     // Breakpoints\n@@ -978,7 +932,7 @@ export function createVariants(theme: Theme): Variants {\n             { compounds: Compounds.AtRules },\n           )\n         },\n-        (a, z) => compareBreakpoints(a, z, 'desc', resolvedBreakpoints),\n+        (a, z) => compareBreakpointVariants(a, z, 'desc', resolvedBreakpoints),\n       )\n \n       variants.suggest(\n@@ -1013,7 +967,7 @@ export function createVariants(theme: Theme): Variants {\n             { compounds: Compounds.AtRules },\n           )\n         },\n-        (a, z) => compareBreakpoints(a, z, 'asc', resolvedBreakpoints),\n+        (a, z) => compareBreakpointVariants(a, z, 'asc', resolvedBreakpoints),\n       )\n \n       variants.suggest(\n@@ -1072,7 +1026,7 @@ export function createVariants(theme: Theme): Variants {\n             { compounds: Compounds.AtRules },\n           )\n         },\n-        (a, z) => compareBreakpoints(a, z, 'desc', resolvedWidths),\n+        (a, z) => compareBreakpointVariants(a, z, 'desc', resolvedWidths),\n       )\n \n       variants.suggest(\n@@ -1119,7 +1073,7 @@ export function createVariants(theme: Theme): Variants {\n             { compounds: Compounds.AtRules },\n           )\n         },\n-        (a, z) => compareBreakpoints(a, z, 'asc', resolvedWidths),\n+        (a, z) => compareBreakpointVariants(a, z, 'asc', resolvedWidths),\n       )\n \n       variants.suggest(\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\nindex 2d4cdf5c5bdb..0ccdfa90546f 100644\n--- a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n@@ -3375,6 +3375,7 @@ exports[`getClassList 1`] = `\n   \""contain-size\"",\n   \""contain-strict\"",\n   \""contain-style\"",\n+  \""container\"",\n   \""content-around\"",\n   \""content-baseline\"",\n   \""content-between\"",\n\ndiff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex dfe1535408dc..167f7feb9659 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -3148,6 +3148,230 @@ test('max-height', async () => {\n   ).toEqual('')\n })\n \n+describe('container', () => {\n+  test('creates the right media queries and sorts it before width', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @theme {\n+            --breakpoint-sm: 40rem;\n+            --breakpoint-md: 48rem;\n+            --breakpoint-lg: 64rem;\n+            --breakpoint-xl: 80rem;\n+            --breakpoint-2xl: 96rem;\n+          }\n+          @tailwind utilities;\n+        `,\n+        ['w-1/2', 'container', 'max-w-[var(--breakpoint-sm)]'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"":root {\n+        --breakpoint-sm: 40rem;\n+        --breakpoint-md: 48rem;\n+        --breakpoint-lg: 64rem;\n+        --breakpoint-xl: 80rem;\n+        --breakpoint-2xl: 96rem;\n+      }\n+\n+      .container {\n+        width: 100%;\n+      }\n+\n+      @media (width >= 40rem) {\n+        .container {\n+          max-width: 40rem;\n+        }\n+      }\n+\n+      @media (width >= 48rem) {\n+        .container {\n+          max-width: 48rem;\n+        }\n+      }\n+\n+      @media (width >= 64rem) {\n+        .container {\n+          max-width: 64rem;\n+        }\n+      }\n+\n+      @media (width >= 80rem) {\n+        .container {\n+          max-width: 80rem;\n+        }\n+      }\n+\n+      @media (width >= 96rem) {\n+        .container {\n+          max-width: 96rem;\n+        }\n+      }\n+\n+      .w-1\\\\/2 {\n+        width: 50%;\n+      }\n+\n+      .max-w-\\\\[var\\\\(--breakpoint-sm\\\\)\\\\] {\n+        max-width: var(--breakpoint-sm);\n+      }\""\n+    `)\n+  })\n+\n+  test('sorts breakpoints based on unit and then in ascending aOrder', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @theme reference {\n+            --breakpoint-lg: 64rem;\n+            --breakpoint-xl: 80rem;\n+            --breakpoint-3xl: 1600px;\n+            --breakpoint-sm: 40em;\n+            --breakpoint-2xl: 96rem;\n+            --breakpoint-xs: 30px;\n+            --breakpoint-md: 48em;\n+          }\n+          @tailwind utilities;\n+        `,\n+        ['container'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"".container {\n+        width: 100%;\n+      }\n+\n+      @media (width >= 40em) {\n+        .container {\n+          max-width: 40em;\n+        }\n+      }\n+\n+      @media (width >= 48em) {\n+        .container {\n+          max-width: 48em;\n+        }\n+      }\n+\n+      @media (width >= 30px) {\n+        .container {\n+          max-width: 30px;\n+        }\n+      }\n+\n+      @media (width >= 1600px) {\n+        .container {\n+          max-width: 1600px;\n+        }\n+      }\n+\n+      @media (width >= 64rem) {\n+        .container {\n+          max-width: 64rem;\n+        }\n+      }\n+\n+      @media (width >= 80rem) {\n+        .container {\n+          max-width: 80rem;\n+        }\n+      }\n+\n+      @media (width >= 96rem) {\n+        .container {\n+          max-width: 96rem;\n+        }\n+      }\""\n+    `)\n+  })\n+\n+  test('custom `@utility container` always follow the core utility ', async () => {\n+    expect(\n+      await compileCss(\n+        css`\n+          @theme {\n+            --breakpoint-sm: 40rem;\n+            --breakpoint-md: 48rem;\n+            --breakpoint-lg: 64rem;\n+            --breakpoint-xl: 80rem;\n+            --breakpoint-2xl: 96rem;\n+          }\n+          @tailwind utilities;\n+\n+          @utility container {\n+            margin-inline: auto;\n+            padding-inline: 1rem;\n+\n+            @media (width >= theme(--breakpoint-sm)) {\n+              padding-inline: 2rem;\n+            }\n+          }\n+        `,\n+        ['w-1/2', 'container', 'max-w-[var(--breakpoint-sm)]'],\n+      ),\n+    ).toMatchInlineSnapshot(`\n+      \"":root {\n+        --breakpoint-sm: 40rem;\n+        --breakpoint-md: 48rem;\n+        --breakpoint-lg: 64rem;\n+        --breakpoint-xl: 80rem;\n+        --breakpoint-2xl: 96rem;\n+      }\n+\n+      .container {\n+        width: 100%;\n+      }\n+\n+      @media (width >= 40rem) {\n+        .container {\n+          max-width: 40rem;\n+        }\n+      }\n+\n+      @media (width >= 48rem) {\n+        .container {\n+          max-width: 48rem;\n+        }\n+      }\n+\n+      @media (width >= 64rem) {\n+        .container {\n+          max-width: 64rem;\n+        }\n+      }\n+\n+      @media (width >= 80rem) {\n+        .container {\n+          max-width: 80rem;\n+        }\n+      }\n+\n+      @media (width >= 96rem) {\n+        .container {\n+          max-width: 96rem;\n+        }\n+      }\n+\n+      .container {\n+        margin-inline: auto;\n+        padding-inline: 1rem;\n+      }\n+\n+      @media (width >= 40rem) {\n+        .container {\n+          padding-inline: 2rem;\n+        }\n+      }\n+\n+      .w-1\\\\/2 {\n+        width: 50%;\n+      }\n+\n+      .max-w-\\\\[var\\\\(--breakpoint-sm\\\\)\\\\] {\n+        max-width: var(--breakpoint-sm);\n+      }\""\n+    `)\n+  })\n+})\n+\n test('flex', async () => {\n   expect(\n     await run([\n@@ -16680,7 +16904,7 @@ describe('spacing utilities', () => {\n     `)\n   })\n \n-  test('only multiples of 0.25 with no trailing zeroes are supported with the spacing multipler', async () => {\n+  test('only multiples of 0.25 with no trailing zeroes are supported with the spacing multiplier', async () => {\n     let { build } = await compile(css`\n       @theme {\n         --spacing: 4px;\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-14984"", ""pr_id"": 14984, ""issue_id"": 14955, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""Use Oklab for gradient interpolation\nGradient interpolation (and any future `color-mix` utilities) should be using the Oklab colour space.\r\n\r\nhttps://play.tailwindcss.com/B5DPkOnhjl\r\n\r\nYou'll generally want the uniform colour space (Oklab) for mixing/interpolating between colours, and the cylindrical colour space (Oklch) for modifying the lightness/chroma/hue of individual colours.\r\n\r\n<img src=\""https://github.com/user-attachments/assets/1a844858-8280-46a1-8d74-0185f5de9bee\"" width=\""414\"" height=\""542\"">"", ""issue_word_count"": 71, ""test_files_count"": 2, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap"", ""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""c62422ff4b650ff2554dbf7fef6e6d637b61b5f7"", ""head_commit"": ""5c39f335fa2ee9672080794c3c8f75ce4352edcc"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/14984"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/14984"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-13T15:18:59.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 52cc9042cc3c..0c7eed39ce31 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -10,6 +10,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Added\n \n - Support opacity values in increments of `0.25` by default ([#14980](https://github.com/tailwindlabs/tailwindcss/pull/14980))\n+- Support specifying the color interpolation method for gradients via modifier ([#14984](https://github.com/tailwindlabs/tailwindcss/pull/14984))\n \n ## [4.0.0-alpha.33] - 2024-11-11\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 968f629e37ce..785b5ff6c119 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -2261,122 +2261,205 @@ export function createUtilities(theme: Theme) {\n \n   staticUtility('bg-none', [['background-image', 'none']])\n \n-  for (let [value, direction] of [\n-    ['t', 'top'],\n-    ['tr', 'top right'],\n-    ['r', 'right'],\n-    ['br', 'bottom right'],\n-    ['b', 'bottom'],\n-    ['bl', 'bottom left'],\n-    ['l', 'left'],\n-    ['tl', 'top left'],\n-  ]) {\n-    staticUtility(`bg-gradient-to-${value}`, [\n-      ['--tw-gradient-position', `to ${direction} in oklch,`],\n-      ['background-image', `linear-gradient(var(--tw-gradient-stops))`],\n-    ])\n+  {\n+    // Deprecated\n+    for (let [value, direction] of [\n+      ['t', 'top'],\n+      ['tr', 'top right'],\n+      ['r', 'right'],\n+      ['br', 'bottom right'],\n+      ['b', 'bottom'],\n+      ['bl', 'bottom left'],\n+      ['l', 'left'],\n+      ['tl', 'top left'],\n+    ]) {\n+      staticUtility(`bg-gradient-to-${value}`, [\n+        ['--tw-gradient-position', `to ${direction} in oklch,`],\n+        ['background-image', `linear-gradient(var(--tw-gradient-stops))`],\n+      ])\n+    }\n \n-    staticUtility(`bg-linear-to-${value}`, [\n-      ['--tw-gradient-position', `to ${direction} in oklch,`],\n-      ['background-image', `linear-gradient(var(--tw-gradient-stops))`],\n+    let suggestedModifiers = [\n+      'oklab',\n+      'oklch',\n+      'srgb',\n+      'hsl',\n+      'longer',\n+      'shorter',\n+      'increasing',\n+      'decreasing',\n+    ]\n+\n+    let linearGradientDirections = new Map([\n+      ['to-t', 'to top'],\n+      ['to-tr', 'to top right'],\n+      ['to-r', 'to right'],\n+      ['to-br', 'to bottom right'],\n+      ['to-b', 'to bottom'],\n+      ['to-bl', 'to bottom left'],\n+      ['to-l', 'to left'],\n+      ['to-tl', 'to top left'],\n     ])\n-  }\n \n-  function handleBgLinear({ negative }: { negative: boolean }) {\n-    return (candidate: Extract<Candidate, { kind: 'functional' }>) => {\n-      if (!candidate.value || candidate.modifier) return\n+    function resolveInterpolationModifier(modifier: CandidateModifier | null) {\n+      let interpolationMethod = 'in oklch'\n+\n+      if (modifier?.kind === 'named') {\n+        switch (modifier.value) {\n+          case 'longer':\n+          case 'shorter':\n+          case 'increasing':\n+          case 'decreasing':\n+            interpolationMethod = `in oklch ${modifier.value} hue`\n+            break\n+          default:\n+            interpolationMethod = `in ${modifier.value}`\n+        }\n+      } else if (modifier?.kind === 'arbitrary') {\n+        interpolationMethod = modifier.value\n+      }\n \n-      let value = candidate.value.value\n+      return interpolationMethod\n+    }\n \n-      if (candidate.value.kind === 'arbitrary') {\n-        let type = candidate.value.dataType ?? inferDataType(value, ['angle'])\n+    function handleBgLinear({ negative }: { negative: boolean }) {\n+      return (candidate: Extract<Candidate, { kind: 'functional' }>) => {\n+        if (!candidate.value) return\n \n-        switch (type) {\n-          case 'angle': {\n-            value = negative ? `calc(${value} * -1)` : `${value}`\n+        if (candidate.value.kind === 'arbitrary') {\n+          if (candidate.modifier) return\n \n-            return [\n-              decl('--tw-gradient-position', `${value},`),\n-              decl('background-image', `linear-gradient(var(--tw-gradient-stops,${value}))`),\n-            ]\n-          }\n-          default: {\n-            if (negative) return\n+          let value = candidate.value.value\n+          let type = candidate.value.dataType ?? inferDataType(value, ['angle'])\n \n-            return [\n-              decl('--tw-gradient-position', `${value},`),\n-              decl('background-image', `linear-gradient(var(--tw-gradient-stops,${value}))`),\n-            ]\n+          switch (type) {\n+            case 'angle': {\n+              value = negative ? `calc(${value} * -1)` : `${value}`\n+\n+              return [\n+                decl('--tw-gradient-position', `${value},`),\n+                decl('background-image', `linear-gradient(var(--tw-gradient-stops,${value}))`),\n+              ]\n+            }\n+            default: {\n+              if (negative) return\n+\n+              return [\n+                decl('--tw-gradient-position', `${value},`),\n+                decl('background-image', `linear-gradient(var(--tw-gradient-stops,${value}))`),\n+              ]\n+            }\n           }\n         }\n-      } else {\n-        if (!isPositiveInteger(value)) return\n \n-        value = negative ? `calc(${value}deg * -1)` : `${value}deg`\n+        let value = candidate.value.value\n+\n+        if (!negative && linearGradientDirections.has(value)) {\n+          value = linearGradientDirections.get(value)!\n+        } else if (isPositiveInteger(value)) {\n+          value = negative ? `calc(${value}deg * -1)` : `${value}deg`\n+        } else {\n+          return\n+        }\n+\n+        let interpolationMethod = resolveInterpolationModifier(candidate.modifier)\n \n         return [\n-          decl('--tw-gradient-position', `${value} in oklch,`),\n+          decl('--tw-gradient-position', `${value} ${interpolationMethod},`),\n           decl('background-image', `linear-gradient(var(--tw-gradient-stops))`),\n         ]\n       }\n     }\n-  }\n \n-  utilities.functional('-bg-linear', handleBgLinear({ negative: true }))\n-  utilities.functional('bg-linear', handleBgLinear({ negative: false }))\n+    utilities.functional('-bg-linear', handleBgLinear({ negative: true }))\n+    utilities.functional('bg-linear', handleBgLinear({ negative: false }))\n \n-  function handleBgConic({ negative }: { negative: boolean }) {\n-    return (candidate: Extract<Candidate, { kind: 'functional' }>) => {\n-      if (candidate.modifier) return\n+    suggest('bg-linear', () => [\n+      {\n+        values: [...linearGradientDirections.keys()],\n+        modifiers: suggestedModifiers,\n+      },\n+      {\n+        values: ['0', '30', '60', '90', '120', '150', '180', '210', '240', '270', '300', '330'],\n+        supportsNegative: true,\n+        modifiers: suggestedModifiers,\n+      },\n+    ])\n \n-      if (!candidate.value) {\n-        return [\n-          decl('--tw-gradient-position', `in oklch,`),\n-          decl('background-image', `conic-gradient(var(--tw-gradient-stops))`),\n-        ]\n-      }\n+    function handleBgConic({ negative }: { negative: boolean }) {\n+      return (candidate: Extract<Candidate, { kind: 'functional' }>) => {\n+        if (candidate.value?.kind === 'arbitrary') {\n+          if (candidate.modifier) return\n+          let value = candidate.value.value\n+          return [\n+            decl('--tw-gradient-position', `${value},`),\n+            decl('background-image', `conic-gradient(var(--tw-gradient-stops,${value}))`),\n+          ]\n+        }\n \n-      let value = candidate.value.value\n+        let interpolationMethod = resolveInterpolationModifier(candidate.modifier)\n+\n+        if (!candidate.value) {\n+          return [\n+            decl('--tw-gradient-position', `${interpolationMethod},`),\n+            decl('background-image', `conic-gradient(var(--tw-gradient-stops))`),\n+          ]\n+        }\n+\n+        let value = candidate.value.value\n \n-      if (candidate.value.kind === 'arbitrary') {\n-        return [\n-          decl('--tw-gradient-position', `${value},`),\n-          decl('background-image', `conic-gradient(var(--tw-gradient-stops,${value}))`),\n-        ]\n-      } else {\n         if (!isPositiveInteger(value)) return\n \n         value = negative ? `calc(${value} * -1)` : `${value}deg`\n \n         return [\n-          decl('--tw-gradient-position', `from ${value} in oklch,`),\n+          decl('--tw-gradient-position', `from ${value} ${interpolationMethod},`),\n           decl('background-image', `conic-gradient(var(--tw-gradient-stops))`),\n         ]\n       }\n     }\n-  }\n \n-  utilities.functional('-bg-conic', handleBgConic({ negative: true }))\n-  utilities.functional('bg-conic', handleBgConic({ negative: false }))\n+    utilities.functional('-bg-conic', handleBgConic({ negative: true }))\n+    utilities.functional('bg-conic', handleBgConic({ negative: false }))\n \n-  utilities.functional('bg-radial', (candidate) => {\n-    if (candidate.modifier) return\n+    suggest('bg-conic', () => [\n+      {\n+        hasDefaultValue: true,\n+        modifiers: suggestedModifiers,\n+      },\n+      {\n+        values: ['0', '30', '60', '90', '120', '150', '180', '210', '240', '270', '300', '330'],\n+        supportsNegative: true,\n+        modifiers: suggestedModifiers,\n+      },\n+    ])\n \n-    if (!candidate.value) {\n-      return [\n-        decl('--tw-gradient-position', `in oklch,`),\n-        decl('background-image', `radial-gradient(var(--tw-gradient-stops))`),\n-      ]\n-    }\n+    utilities.functional('bg-radial', (candidate) => {\n+      if (!candidate.value) {\n+        let interpolationMethod = resolveInterpolationModifier(candidate.modifier)\n+        return [\n+          decl('--tw-gradient-position', `${interpolationMethod},`),\n+          decl('background-image', `radial-gradient(var(--tw-gradient-stops))`),\n+        ]\n+      }\n \n-    if (candidate.value.kind === 'arbitrary') {\n-      let value = candidate.value.value\n-      return [\n-        decl('--tw-gradient-position', `${value},`),\n-        decl('background-image', `radial-gradient(var(--tw-gradient-stops,${value}))`),\n-      ]\n-    }\n-  })\n+      if (candidate.value.kind === 'arbitrary') {\n+        if (candidate.modifier) return\n+        let value = candidate.value.value\n+        return [\n+          decl('--tw-gradient-position', `${value},`),\n+          decl('background-image', `radial-gradient(var(--tw-gradient-stops,${value}))`),\n+        ]\n+      }\n+    })\n+\n+    suggest('bg-radial', () => [\n+      {\n+        hasDefaultValue: true,\n+        modifiers: suggestedModifiers,\n+      },\n+    ])\n+  }\n \n   utilities.functional('bg', (candidate) => {\n     if (!candidate.value) return\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\nindex d96b027f3425..2d4cdf5c5bdb 100644\n--- a/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n+++ b/packages/tailwindcss/src/__snapshots__/intellisense.test.ts.snap\n@@ -2,6 +2,222 @@\n \n exports[`getClassList 1`] = `\n [\n+  \""-bg-conic-0\"",\n+  \""-bg-conic-0/oklab\"",\n+  \""-bg-conic-0/oklch\"",\n+  \""-bg-conic-0/srgb\"",\n+  \""-bg-conic-0/hsl\"",\n+  \""-bg-conic-0/longer\"",\n+  \""-bg-conic-0/shorter\"",\n+  \""-bg-conic-0/increasing\"",\n+  \""-bg-conic-0/decreasing\"",\n+  \""-bg-conic-120\"",\n+  \""-bg-conic-120/oklab\"",\n+  \""-bg-conic-120/oklch\"",\n+  \""-bg-conic-120/srgb\"",\n+  \""-bg-conic-120/hsl\"",\n+  \""-bg-conic-120/longer\"",\n+  \""-bg-conic-120/shorter\"",\n+  \""-bg-conic-120/increasing\"",\n+  \""-bg-conic-120/decreasing\"",\n+  \""-bg-conic-150\"",\n+  \""-bg-conic-150/oklab\"",\n+  \""-bg-conic-150/oklch\"",\n+  \""-bg-conic-150/srgb\"",\n+  \""-bg-conic-150/hsl\"",\n+  \""-bg-conic-150/longer\"",\n+  \""-bg-conic-150/shorter\"",\n+  \""-bg-conic-150/increasing\"",\n+  \""-bg-conic-150/decreasing\"",\n+  \""-bg-conic-180\"",\n+  \""-bg-conic-180/oklab\"",\n+  \""-bg-conic-180/oklch\"",\n+  \""-bg-conic-180/srgb\"",\n+  \""-bg-conic-180/hsl\"",\n+  \""-bg-conic-180/longer\"",\n+  \""-bg-conic-180/shorter\"",\n+  \""-bg-conic-180/increasing\"",\n+  \""-bg-conic-180/decreasing\"",\n+  \""-bg-conic-210\"",\n+  \""-bg-conic-210/oklab\"",\n+  \""-bg-conic-210/oklch\"",\n+  \""-bg-conic-210/srgb\"",\n+  \""-bg-conic-210/hsl\"",\n+  \""-bg-conic-210/longer\"",\n+  \""-bg-conic-210/shorter\"",\n+  \""-bg-conic-210/increasing\"",\n+  \""-bg-conic-210/decreasing\"",\n+  \""-bg-conic-240\"",\n+  \""-bg-conic-240/oklab\"",\n+  \""-bg-conic-240/oklch\"",\n+  \""-bg-conic-240/srgb\"",\n+  \""-bg-conic-240/hsl\"",\n+  \""-bg-conic-240/longer\"",\n+  \""-bg-conic-240/shorter\"",\n+  \""-bg-conic-240/increasing\"",\n+  \""-bg-conic-240/decreasing\"",\n+  \""-bg-conic-270\"",\n+  \""-bg-conic-270/oklab\"",\n+  \""-bg-conic-270/oklch\"",\n+  \""-bg-conic-270/srgb\"",\n+  \""-bg-conic-270/hsl\"",\n+  \""-bg-conic-270/longer\"",\n+  \""-bg-conic-270/shorter\"",\n+  \""-bg-conic-270/increasing\"",\n+  \""-bg-conic-270/decreasing\"",\n+  \""-bg-conic-30\"",\n+  \""-bg-conic-30/oklab\"",\n+  \""-bg-conic-30/oklch\"",\n+  \""-bg-conic-30/srgb\"",\n+  \""-bg-conic-30/hsl\"",\n+  \""-bg-conic-30/longer\"",\n+  \""-bg-conic-30/shorter\"",\n+  \""-bg-conic-30/increasing\"",\n+  \""-bg-conic-30/decreasing\"",\n+  \""-bg-conic-300\"",\n+  \""-bg-conic-300/oklab\"",\n+  \""-bg-conic-300/oklch\"",\n+  \""-bg-conic-300/srgb\"",\n+  \""-bg-conic-300/hsl\"",\n+  \""-bg-conic-300/longer\"",\n+  \""-bg-conic-300/shorter\"",\n+  \""-bg-conic-300/increasing\"",\n+  \""-bg-conic-300/decreasing\"",\n+  \""-bg-conic-330\"",\n+  \""-bg-conic-330/oklab\"",\n+  \""-bg-conic-330/oklch\"",\n+  \""-bg-conic-330/srgb\"",\n+  \""-bg-conic-330/hsl\"",\n+  \""-bg-conic-330/longer\"",\n+  \""-bg-conic-330/shorter\"",\n+  \""-bg-conic-330/increasing\"",\n+  \""-bg-conic-330/decreasing\"",\n+  \""-bg-conic-60\"",\n+  \""-bg-conic-60/oklab\"",\n+  \""-bg-conic-60/oklch\"",\n+  \""-bg-conic-60/srgb\"",\n+  \""-bg-conic-60/hsl\"",\n+  \""-bg-conic-60/longer\"",\n+  \""-bg-conic-60/shorter\"",\n+  \""-bg-conic-60/increasing\"",\n+  \""-bg-conic-60/decreasing\"",\n+  \""-bg-conic-90\"",\n+  \""-bg-conic-90/oklab\"",\n+  \""-bg-conic-90/oklch\"",\n+  \""-bg-conic-90/srgb\"",\n+  \""-bg-conic-90/hsl\"",\n+  \""-bg-conic-90/longer\"",\n+  \""-bg-conic-90/shorter\"",\n+  \""-bg-conic-90/increasing\"",\n+  \""-bg-conic-90/decreasing\"",\n+  \""-bg-linear-0\"",\n+  \""-bg-linear-0/oklab\"",\n+  \""-bg-linear-0/oklch\"",\n+  \""-bg-linear-0/srgb\"",\n+  \""-bg-linear-0/hsl\"",\n+  \""-bg-linear-0/longer\"",\n+  \""-bg-linear-0/shorter\"",\n+  \""-bg-linear-0/increasing\"",\n+  \""-bg-linear-0/decreasing\"",\n+  \""-bg-linear-120\"",\n+  \""-bg-linear-120/oklab\"",\n+  \""-bg-linear-120/oklch\"",\n+  \""-bg-linear-120/srgb\"",\n+  \""-bg-linear-120/hsl\"",\n+  \""-bg-linear-120/longer\"",\n+  \""-bg-linear-120/shorter\"",\n+  \""-bg-linear-120/increasing\"",\n+  \""-bg-linear-120/decreasing\"",\n+  \""-bg-linear-150\"",\n+  \""-bg-linear-150/oklab\"",\n+  \""-bg-linear-150/oklch\"",\n+  \""-bg-linear-150/srgb\"",\n+  \""-bg-linear-150/hsl\"",\n+  \""-bg-linear-150/longer\"",\n+  \""-bg-linear-150/shorter\"",\n+  \""-bg-linear-150/increasing\"",\n+  \""-bg-linear-150/decreasing\"",\n+  \""-bg-linear-180\"",\n+  \""-bg-linear-180/oklab\"",\n+  \""-bg-linear-180/oklch\"",\n+  \""-bg-linear-180/srgb\"",\n+  \""-bg-linear-180/hsl\"",\n+  \""-bg-linear-180/longer\"",\n+  \""-bg-linear-180/shorter\"",\n+  \""-bg-linear-180/increasing\"",\n+  \""-bg-linear-180/decreasing\"",\n+  \""-bg-linear-210\"",\n+  \""-bg-linear-210/oklab\"",\n+  \""-bg-linear-210/oklch\"",\n+  \""-bg-linear-210/srgb\"",\n+  \""-bg-linear-210/hsl\"",\n+  \""-bg-linear-210/longer\"",\n+  \""-bg-linear-210/shorter\"",\n+  \""-bg-linear-210/increasing\"",\n+  \""-bg-linear-210/decreasing\"",\n+  \""-bg-linear-240\"",\n+  \""-bg-linear-240/oklab\"",\n+  \""-bg-linear-240/oklch\"",\n+  \""-bg-linear-240/srgb\"",\n+  \""-bg-linear-240/hsl\"",\n+  \""-bg-linear-240/longer\"",\n+  \""-bg-linear-240/shorter\"",\n+  \""-bg-linear-240/increasing\"",\n+  \""-bg-linear-240/decreasing\"",\n+  \""-bg-linear-270\"",\n+  \""-bg-linear-270/oklab\"",\n+  \""-bg-linear-270/oklch\"",\n+  \""-bg-linear-270/srgb\"",\n+  \""-bg-linear-270/hsl\"",\n+  \""-bg-linear-270/longer\"",\n+  \""-bg-linear-270/shorter\"",\n+  \""-bg-linear-270/increasing\"",\n+  \""-bg-linear-270/decreasing\"",\n+  \""-bg-linear-30\"",\n+  \""-bg-linear-30/oklab\"",\n+  \""-bg-linear-30/oklch\"",\n+  \""-bg-linear-30/srgb\"",\n+  \""-bg-linear-30/hsl\"",\n+  \""-bg-linear-30/longer\"",\n+  \""-bg-linear-30/shorter\"",\n+  \""-bg-linear-30/increasing\"",\n+  \""-bg-linear-30/decreasing\"",\n+  \""-bg-linear-300\"",\n+  \""-bg-linear-300/oklab\"",\n+  \""-bg-linear-300/oklch\"",\n+  \""-bg-linear-300/srgb\"",\n+  \""-bg-linear-300/hsl\"",\n+  \""-bg-linear-300/longer\"",\n+  \""-bg-linear-300/shorter\"",\n+  \""-bg-linear-300/increasing\"",\n+  \""-bg-linear-300/decreasing\"",\n+  \""-bg-linear-330\"",\n+  \""-bg-linear-330/oklab\"",\n+  \""-bg-linear-330/oklch\"",\n+  \""-bg-linear-330/srgb\"",\n+  \""-bg-linear-330/hsl\"",\n+  \""-bg-linear-330/longer\"",\n+  \""-bg-linear-330/shorter\"",\n+  \""-bg-linear-330/increasing\"",\n+  \""-bg-linear-330/decreasing\"",\n+  \""-bg-linear-60\"",\n+  \""-bg-linear-60/oklab\"",\n+  \""-bg-linear-60/oklch\"",\n+  \""-bg-linear-60/srgb\"",\n+  \""-bg-linear-60/hsl\"",\n+  \""-bg-linear-60/longer\"",\n+  \""-bg-linear-60/shorter\"",\n+  \""-bg-linear-60/increasing\"",\n+  \""-bg-linear-60/decreasing\"",\n+  \""-bg-linear-90\"",\n+  \""-bg-linear-90/oklab\"",\n+  \""-bg-linear-90/oklch\"",\n+  \""-bg-linear-90/srgb\"",\n+  \""-bg-linear-90/hsl\"",\n+  \""-bg-linear-90/longer\"",\n+  \""-bg-linear-90/shorter\"",\n+  \""-bg-linear-90/increasing\"",\n+  \""-bg-linear-90/decreasing\"",\n   \""-bottom-0\"",\n   \""-bottom-0.5\"",\n   \""-bottom-1\"",\n@@ -1599,6 +1815,123 @@ exports[`getClassList 1`] = `\n   \""bg-clip-content\"",\n   \""bg-clip-padding\"",\n   \""bg-clip-text\"",\n+  \""bg-conic\"",\n+  \""bg-conic/oklab\"",\n+  \""bg-conic/oklch\"",\n+  \""bg-conic/srgb\"",\n+  \""bg-conic/hsl\"",\n+  \""bg-conic/longer\"",\n+  \""bg-conic/shorter\"",\n+  \""bg-conic/increasing\"",\n+  \""bg-conic/decreasing\"",\n+  \""bg-conic-0\"",\n+  \""bg-conic-0/oklab\"",\n+  \""bg-conic-0/oklch\"",\n+  \""bg-conic-0/srgb\"",\n+  \""bg-conic-0/hsl\"",\n+  \""bg-conic-0/longer\"",\n+  \""bg-conic-0/shorter\"",\n+  \""bg-conic-0/increasing\"",\n+  \""bg-conic-0/decreasing\"",\n+  \""bg-conic-120\"",\n+  \""bg-conic-120/oklab\"",\n+  \""bg-conic-120/oklch\"",\n+  \""bg-conic-120/srgb\"",\n+  \""bg-conic-120/hsl\"",\n+  \""bg-conic-120/longer\"",\n+  \""bg-conic-120/shorter\"",\n+  \""bg-conic-120/increasing\"",\n+  \""bg-conic-120/decreasing\"",\n+  \""bg-conic-150\"",\n+  \""bg-conic-150/oklab\"",\n+  \""bg-conic-150/oklch\"",\n+  \""bg-conic-150/srgb\"",\n+  \""bg-conic-150/hsl\"",\n+  \""bg-conic-150/longer\"",\n+  \""bg-conic-150/shorter\"",\n+  \""bg-conic-150/increasing\"",\n+  \""bg-conic-150/decreasing\"",\n+  \""bg-conic-180\"",\n+  \""bg-conic-180/oklab\"",\n+  \""bg-conic-180/oklch\"",\n+  \""bg-conic-180/srgb\"",\n+  \""bg-conic-180/hsl\"",\n+  \""bg-conic-180/longer\"",\n+  \""bg-conic-180/shorter\"",\n+  \""bg-conic-180/increasing\"",\n+  \""bg-conic-180/decreasing\"",\n+  \""bg-conic-210\"",\n+  \""bg-conic-210/oklab\"",\n+  \""bg-conic-210/oklch\"",\n+  \""bg-conic-210/srgb\"",\n+  \""bg-conic-210/hsl\"",\n+  \""bg-conic-210/longer\"",\n+  \""bg-conic-210/shorter\"",\n+  \""bg-conic-210/increasing\"",\n+  \""bg-conic-210/decreasing\"",\n+  \""bg-conic-240\"",\n+  \""bg-conic-240/oklab\"",\n+  \""bg-conic-240/oklch\"",\n+  \""bg-conic-240/srgb\"",\n+  \""bg-conic-240/hsl\"",\n+  \""bg-conic-240/longer\"",\n+  \""bg-conic-240/shorter\"",\n+  \""bg-conic-240/increasing\"",\n+  \""bg-conic-240/decreasing\"",\n+  \""bg-conic-270\"",\n+  \""bg-conic-270/oklab\"",\n+  \""bg-conic-270/oklch\"",\n+  \""bg-conic-270/srgb\"",\n+  \""bg-conic-270/hsl\"",\n+  \""bg-conic-270/longer\"",\n+  \""bg-conic-270/shorter\"",\n+  \""bg-conic-270/increasing\"",\n+  \""bg-conic-270/decreasing\"",\n+  \""bg-conic-30\"",\n+  \""bg-conic-30/oklab\"",\n+  \""bg-conic-30/oklch\"",\n+  \""bg-conic-30/srgb\"",\n+  \""bg-conic-30/hsl\"",\n+  \""bg-conic-30/longer\"",\n+  \""bg-conic-30/shorter\"",\n+  \""bg-conic-30/increasing\"",\n+  \""bg-conic-30/decreasing\"",\n+  \""bg-conic-300\"",\n+  \""bg-conic-300/oklab\"",\n+  \""bg-conic-300/oklch\"",\n+  \""bg-conic-300/srgb\"",\n+  \""bg-conic-300/hsl\"",\n+  \""bg-conic-300/longer\"",\n+  \""bg-conic-300/shorter\"",\n+  \""bg-conic-300/increasing\"",\n+  \""bg-conic-300/decreasing\"",\n+  \""bg-conic-330\"",\n+  \""bg-conic-330/oklab\"",\n+  \""bg-conic-330/oklch\"",\n+  \""bg-conic-330/srgb\"",\n+  \""bg-conic-330/hsl\"",\n+  \""bg-conic-330/longer\"",\n+  \""bg-conic-330/shorter\"",\n+  \""bg-conic-330/increasing\"",\n+  \""bg-conic-330/decreasing\"",\n+  \""bg-conic-60\"",\n+  \""bg-conic-60/oklab\"",\n+  \""bg-conic-60/oklch\"",\n+  \""bg-conic-60/srgb\"",\n+  \""bg-conic-60/hsl\"",\n+  \""bg-conic-60/longer\"",\n+  \""bg-conic-60/shorter\"",\n+  \""bg-conic-60/increasing\"",\n+  \""bg-conic-60/decreasing\"",\n+  \""bg-conic-90\"",\n+  \""bg-conic-90/oklab\"",\n+  \""bg-conic-90/oklch\"",\n+  \""bg-conic-90/srgb\"",\n+  \""bg-conic-90/hsl\"",\n+  \""bg-conic-90/longer\"",\n+  \""bg-conic-90/shorter\"",\n+  \""bg-conic-90/increasing\"",\n+  \""bg-conic-90/decreasing\"",\n   \""bg-contain\"",\n   \""bg-cover\"",\n   \""bg-current\"",\n@@ -1657,20 +1990,201 @@ exports[`getClassList 1`] = `\n   \""bg-left\"",\n   \""bg-left-bottom\"",\n   \""bg-left-top\"",\n+  \""bg-linear-0\"",\n+  \""bg-linear-0/oklab\"",\n+  \""bg-linear-0/oklch\"",\n+  \""bg-linear-0/srgb\"",\n+  \""bg-linear-0/hsl\"",\n+  \""bg-linear-0/longer\"",\n+  \""bg-linear-0/shorter\"",\n+  \""bg-linear-0/increasing\"",\n+  \""bg-linear-0/decreasing\"",\n+  \""bg-linear-120\"",\n+  \""bg-linear-120/oklab\"",\n+  \""bg-linear-120/oklch\"",\n+  \""bg-linear-120/srgb\"",\n+  \""bg-linear-120/hsl\"",\n+  \""bg-linear-120/longer\"",\n+  \""bg-linear-120/shorter\"",\n+  \""bg-linear-120/increasing\"",\n+  \""bg-linear-120/decreasing\"",\n+  \""bg-linear-150\"",\n+  \""bg-linear-150/oklab\"",\n+  \""bg-linear-150/oklch\"",\n+  \""bg-linear-150/srgb\"",\n+  \""bg-linear-150/hsl\"",\n+  \""bg-linear-150/longer\"",\n+  \""bg-linear-150/shorter\"",\n+  \""bg-linear-150/increasing\"",\n+  \""bg-linear-150/decreasing\"",\n+  \""bg-linear-180\"",\n+  \""bg-linear-180/oklab\"",\n+  \""bg-linear-180/oklch\"",\n+  \""bg-linear-180/srgb\"",\n+  \""bg-linear-180/hsl\"",\n+  \""bg-linear-180/longer\"",\n+  \""bg-linear-180/shorter\"",\n+  \""bg-linear-180/increasing\"",\n+  \""bg-linear-180/decreasing\"",\n+  \""bg-linear-210\"",\n+  \""bg-linear-210/oklab\"",\n+  \""bg-linear-210/oklch\"",\n+  \""bg-linear-210/srgb\"",\n+  \""bg-linear-210/hsl\"",\n+  \""bg-linear-210/longer\"",\n+  \""bg-linear-210/shorter\"",\n+  \""bg-linear-210/increasing\"",\n+  \""bg-linear-210/decreasing\"",\n+  \""bg-linear-240\"",\n+  \""bg-linear-240/oklab\"",\n+  \""bg-linear-240/oklch\"",\n+  \""bg-linear-240/srgb\"",\n+  \""bg-linear-240/hsl\"",\n+  \""bg-linear-240/longer\"",\n+  \""bg-linear-240/shorter\"",\n+  \""bg-linear-240/increasing\"",\n+  \""bg-linear-240/decreasing\"",\n+  \""bg-linear-270\"",\n+  \""bg-linear-270/oklab\"",\n+  \""bg-linear-270/oklch\"",\n+  \""bg-linear-270/srgb\"",\n+  \""bg-linear-270/hsl\"",\n+  \""bg-linear-270/longer\"",\n+  \""bg-linear-270/shorter\"",\n+  \""bg-linear-270/increasing\"",\n+  \""bg-linear-270/decreasing\"",\n+  \""bg-linear-30\"",\n+  \""bg-linear-30/oklab\"",\n+  \""bg-linear-30/oklch\"",\n+  \""bg-linear-30/srgb\"",\n+  \""bg-linear-30/hsl\"",\n+  \""bg-linear-30/longer\"",\n+  \""bg-linear-30/shorter\"",\n+  \""bg-linear-30/increasing\"",\n+  \""bg-linear-30/decreasing\"",\n+  \""bg-linear-300\"",\n+  \""bg-linear-300/oklab\"",\n+  \""bg-linear-300/oklch\"",\n+  \""bg-linear-300/srgb\"",\n+  \""bg-linear-300/hsl\"",\n+  \""bg-linear-300/longer\"",\n+  \""bg-linear-300/shorter\"",\n+  \""bg-linear-300/increasing\"",\n+  \""bg-linear-300/decreasing\"",\n+  \""bg-linear-330\"",\n+  \""bg-linear-330/oklab\"",\n+  \""bg-linear-330/oklch\"",\n+  \""bg-linear-330/srgb\"",\n+  \""bg-linear-330/hsl\"",\n+  \""bg-linear-330/longer\"",\n+  \""bg-linear-330/shorter\"",\n+  \""bg-linear-330/increasing\"",\n+  \""bg-linear-330/decreasing\"",\n+  \""bg-linear-60\"",\n+  \""bg-linear-60/oklab\"",\n+  \""bg-linear-60/oklch\"",\n+  \""bg-linear-60/srgb\"",\n+  \""bg-linear-60/hsl\"",\n+  \""bg-linear-60/longer\"",\n+  \""bg-linear-60/shorter\"",\n+  \""bg-linear-60/increasing\"",\n+  \""bg-linear-60/decreasing\"",\n+  \""bg-linear-90\"",\n+  \""bg-linear-90/oklab\"",\n+  \""bg-linear-90/oklch\"",\n+  \""bg-linear-90/srgb\"",\n+  \""bg-linear-90/hsl\"",\n+  \""bg-linear-90/longer\"",\n+  \""bg-linear-90/shorter\"",\n+  \""bg-linear-90/increasing\"",\n+  \""bg-linear-90/decreasing\"",\n   \""bg-linear-to-b\"",\n+  \""bg-linear-to-b/oklab\"",\n+  \""bg-linear-to-b/oklch\"",\n+  \""bg-linear-to-b/srgb\"",\n+  \""bg-linear-to-b/hsl\"",\n+  \""bg-linear-to-b/longer\"",\n+  \""bg-linear-to-b/shorter\"",\n+  \""bg-linear-to-b/increasing\"",\n+  \""bg-linear-to-b/decreasing\"",\n   \""bg-linear-to-bl\"",\n+  \""bg-linear-to-bl/oklab\"",\n+  \""bg-linear-to-bl/oklch\"",\n+  \""bg-linear-to-bl/srgb\"",\n+  \""bg-linear-to-bl/hsl\"",\n+  \""bg-linear-to-bl/longer\"",\n+  \""bg-linear-to-bl/shorter\"",\n+  \""bg-linear-to-bl/increasing\"",\n+  \""bg-linear-to-bl/decreasing\"",\n   \""bg-linear-to-br\"",\n+  \""bg-linear-to-br/oklab\"",\n+  \""bg-linear-to-br/oklch\"",\n+  \""bg-linear-to-br/srgb\"",\n+  \""bg-linear-to-br/hsl\"",\n+  \""bg-linear-to-br/longer\"",\n+  \""bg-linear-to-br/shorter\"",\n+  \""bg-linear-to-br/increasing\"",\n+  \""bg-linear-to-br/decreasing\"",\n   \""bg-linear-to-l\"",\n+  \""bg-linear-to-l/oklab\"",\n+  \""bg-linear-to-l/oklch\"",\n+  \""bg-linear-to-l/srgb\"",\n+  \""bg-linear-to-l/hsl\"",\n+  \""bg-linear-to-l/longer\"",\n+  \""bg-linear-to-l/shorter\"",\n+  \""bg-linear-to-l/increasing\"",\n+  \""bg-linear-to-l/decreasing\"",\n   \""bg-linear-to-r\"",\n+  \""bg-linear-to-r/oklab\"",\n+  \""bg-linear-to-r/oklch\"",\n+  \""bg-linear-to-r/srgb\"",\n+  \""bg-linear-to-r/hsl\"",\n+  \""bg-linear-to-r/longer\"",\n+  \""bg-linear-to-r/shorter\"",\n+  \""bg-linear-to-r/increasing\"",\n+  \""bg-linear-to-r/decreasing\"",\n   \""bg-linear-to-t\"",\n+  \""bg-linear-to-t/oklab\"",\n+  \""bg-linear-to-t/oklch\"",\n+  \""bg-linear-to-t/srgb\"",\n+  \""bg-linear-to-t/hsl\"",\n+  \""bg-linear-to-t/longer\"",\n+  \""bg-linear-to-t/shorter\"",\n+  \""bg-linear-to-t/increasing\"",\n+  \""bg-linear-to-t/decreasing\"",\n   \""bg-linear-to-tl\"",\n+  \""bg-linear-to-tl/oklab\"",\n+  \""bg-linear-to-tl/oklch\"",\n+  \""bg-linear-to-tl/srgb\"",\n+  \""bg-linear-to-tl/hsl\"",\n+  \""bg-linear-to-tl/longer\"",\n+  \""bg-linear-to-tl/shorter\"",\n+  \""bg-linear-to-tl/increasing\"",\n+  \""bg-linear-to-tl/decreasing\"",\n   \""bg-linear-to-tr\"",\n+  \""bg-linear-to-tr/oklab\"",\n+  \""bg-linear-to-tr/oklch\"",\n+  \""bg-linear-to-tr/srgb\"",\n+  \""bg-linear-to-tr/hsl\"",\n+  \""bg-linear-to-tr/longer\"",\n+  \""bg-linear-to-tr/shorter\"",\n+  \""bg-linear-to-tr/increasing\"",\n+  \""bg-linear-to-tr/decreasing\"",\n   \""bg-local\"",\n   \""bg-no-repeat\"",\n   \""bg-none\"",\n   \""bg-origin-border\"",\n   \""bg-origin-content\"",\n   \""bg-origin-padding\"",\n+  \""bg-radial\"",\n+  \""bg-radial/oklab\"",\n+  \""bg-radial/oklch\"",\n+  \""bg-radial/srgb\"",\n+  \""bg-radial/hsl\"",\n+  \""bg-radial/longer\"",\n+  \""bg-radial/shorter\"",\n+  \""bg-radial/increasing\"",\n+  \""bg-radial/decreasing\"",\n   \""bg-repeat\"",\n   \""bg-repeat-x\"",\n   \""bg-repeat-y\"",\n\ndiff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex 88f57077b490..dfe1535408dc 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -10086,6 +10086,47 @@ test('bg', async () => {\n         'bg-linear-45',\n         '-bg-linear-45',\n \n+        // With interpolation mode modifier\n+        'bg-linear-to-r/oklch',\n+        'bg-linear-to-r/oklab',\n+        'bg-linear-to-r/hsl',\n+        'bg-linear-to-r/srgb',\n+        'bg-linear-to-r/longer',\n+        'bg-linear-to-r/shorter',\n+        'bg-linear-to-r/increasing',\n+        'bg-linear-to-r/decreasing',\n+        'bg-linear-to-r/[in_hsl_longer_hue]',\n+        'bg-linear-45/oklab',\n+        '-bg-linear-45/oklab',\n+        'bg-linear-45/shorter',\n+        'bg-linear-45/[in_hsl_longer_hue]',\n+        'bg-conic/oklch',\n+        'bg-conic/oklab',\n+        'bg-conic/hsl',\n+        'bg-conic/srgb',\n+        'bg-conic/longer',\n+        'bg-conic/shorter',\n+        'bg-conic/increasing',\n+        'bg-conic/decreasing',\n+        'bg-conic/[in_hsl_longer_hue]',\n+        'bg-conic-45/oklab',\n+        '-bg-conic-45/oklab',\n+        'bg-conic-45/shorter',\n+        'bg-conic-45/[in_hsl_longer_hue]',\n+        'bg-radial/oklch',\n+        'bg-radial/oklab',\n+        'bg-radial/hsl',\n+        'bg-radial/srgb',\n+        'bg-radial/longer',\n+        'bg-radial/shorter',\n+        'bg-radial/increasing',\n+        'bg-radial/decreasing',\n+        'bg-radial/[in_hsl_longer_hue]',\n+        'bg-radial-[circle_at_center]',\n+        // Invalid but proves not converted to `in oklch longer hue` when used\n+        // as an arbitrary value\n+        'bg-linear-to-r/[longer]',\n+\n         'bg-[url(/image.png)]',\n         'bg-[url:var(--my-url)]',\n         'bg-[linear-gradient(to_bottom,red,blue)]',\n@@ -10203,11 +10244,21 @@ test('bg', async () => {\n       background-color: #0000;\n     }\n \n+    .-bg-conic-45\\\\/oklab {\n+      --tw-gradient-position: from calc(45 * -1) in oklab, ;\n+      background-image: conic-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .-bg-linear-45 {\n       --tw-gradient-position: calc(45deg * -1) in oklch, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n+    .-bg-linear-45\\\\/oklab {\n+      --tw-gradient-position: calc(45deg * -1) in oklab, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .-bg-linear-\\\\[1\\\\.3rad\\\\] {\n       --tw-gradient-position: calc(74.4845deg * -1), ;\n       background-image: linear-gradient(var(--tw-gradient-stops, calc(74.4845deg * -1)));\n@@ -10218,6 +10269,66 @@ test('bg', async () => {\n       background-image: linear-gradient(var(--tw-gradient-stops, calc(125deg * -1)));\n     }\n \n+    .bg-conic-45\\\\/\\\\[in_hsl_longer_hue\\\\] {\n+      --tw-gradient-position: from 45deg in hsl longer hue, ;\n+      background-image: conic-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-conic-45\\\\/oklab {\n+      --tw-gradient-position: from 45deg in oklab, ;\n+      background-image: conic-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-conic-45\\\\/shorter {\n+      --tw-gradient-position: from 45deg in oklch shorter hue, ;\n+      background-image: conic-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-conic\\\\/\\\\[in_hsl_longer_hue\\\\] {\n+      --tw-gradient-position: in hsl longer hue, ;\n+      background-image: conic-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-conic\\\\/decreasing {\n+      --tw-gradient-position: in oklch decreasing hue, ;\n+      background-image: conic-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-conic\\\\/hsl {\n+      --tw-gradient-position: in hsl, ;\n+      background-image: conic-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-conic\\\\/increasing {\n+      --tw-gradient-position: in oklch increasing hue, ;\n+      background-image: conic-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-conic\\\\/longer {\n+      --tw-gradient-position: in oklch longer hue, ;\n+      background-image: conic-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-conic\\\\/oklab {\n+      --tw-gradient-position: in oklab, ;\n+      background-image: conic-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-conic\\\\/oklch {\n+      --tw-gradient-position: in oklch, ;\n+      background-image: conic-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-conic\\\\/shorter {\n+      --tw-gradient-position: in oklch shorter hue, ;\n+      background-image: conic-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-conic\\\\/srgb {\n+      --tw-gradient-position: in srgb, ;\n+      background-image: conic-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-gradient-to-b {\n       --tw-gradient-position: to bottom in oklch, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n@@ -10263,6 +10374,21 @@ test('bg', async () => {\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n+    .bg-linear-45\\\\/\\\\[in_hsl_longer_hue\\\\] {\n+      --tw-gradient-position: 45deg in hsl longer hue, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-linear-45\\\\/oklab {\n+      --tw-gradient-position: 45deg in oklab, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-linear-45\\\\/shorter {\n+      --tw-gradient-position: 45deg in oklch shorter hue, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-\\\\[1\\\\.3rad\\\\] {\n       --tw-gradient-position: 74.4845deg, ;\n       background-image: linear-gradient(var(--tw-gradient-stops, 74.4845deg));\n@@ -10303,6 +10429,56 @@ test('bg', async () => {\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n+    .bg-linear-to-r\\\\/\\\\[in_hsl_longer_hue\\\\] {\n+      --tw-gradient-position: to right in hsl longer hue, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-linear-to-r\\\\/\\\\[longer\\\\] {\n+      --tw-gradient-position: to right longer, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-linear-to-r\\\\/decreasing {\n+      --tw-gradient-position: to right in oklch decreasing hue, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-linear-to-r\\\\/hsl {\n+      --tw-gradient-position: to right in hsl, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-linear-to-r\\\\/increasing {\n+      --tw-gradient-position: to right in oklch increasing hue, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-linear-to-r\\\\/longer {\n+      --tw-gradient-position: to right in oklch longer hue, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-linear-to-r\\\\/oklab {\n+      --tw-gradient-position: to right in oklab, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-linear-to-r\\\\/oklch {\n+      --tw-gradient-position: to right in oklch, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-linear-to-r\\\\/shorter {\n+      --tw-gradient-position: to right in oklch shorter hue, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-linear-to-r\\\\/srgb {\n+      --tw-gradient-position: to right in srgb, ;\n+      background-image: linear-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-linear-to-t {\n       --tw-gradient-position: to top in oklch, ;\n       background-image: linear-gradient(var(--tw-gradient-stops));\n@@ -10318,6 +10494,56 @@ test('bg', async () => {\n       background-image: linear-gradient(var(--tw-gradient-stops));\n     }\n \n+    .bg-radial-\\\\[circle_at_center\\\\] {\n+      --tw-gradient-position: circle at center, ;\n+      background-image: radial-gradient(var(--tw-gradient-stops, circle at center));\n+    }\n+\n+    .bg-radial\\\\/\\\\[in_hsl_longer_hue\\\\] {\n+      --tw-gradient-position: in hsl longer hue, ;\n+      background-image: radial-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-radial\\\\/decreasing {\n+      --tw-gradient-position: in oklch decreasing hue, ;\n+      background-image: radial-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-radial\\\\/hsl {\n+      --tw-gradient-position: in hsl, ;\n+      background-image: radial-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-radial\\\\/increasing {\n+      --tw-gradient-position: in oklch increasing hue, ;\n+      background-image: radial-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-radial\\\\/longer {\n+      --tw-gradient-position: in oklch longer hue, ;\n+      background-image: radial-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-radial\\\\/oklab {\n+      --tw-gradient-position: in oklab, ;\n+      background-image: radial-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-radial\\\\/oklch {\n+      --tw-gradient-position: in oklch, ;\n+      background-image: radial-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-radial\\\\/shorter {\n+      --tw-gradient-position: in oklch shorter hue, ;\n+      background-image: radial-gradient(var(--tw-gradient-stops));\n+    }\n+\n+    .bg-radial\\\\/srgb {\n+      --tw-gradient-position: in srgb, ;\n+      background-image: radial-gradient(var(--tw-gradient-stops));\n+    }\n+\n     .bg-\\\\[image\\\\:var\\\\(--my-gradient\\\\)\\\\] {\n       background-image: var(--my-gradient);\n     }\n@@ -10498,31 +10724,13 @@ test('bg', async () => {\n       '-bg-space',\n \n       'bg-none/foo',\n-      'bg-gradient-to-t/foo',\n-      'bg-gradient-to-tr/foo',\n-      'bg-gradient-to-r/foo',\n-      'bg-gradient-to-br/foo',\n-      'bg-gradient-to-b/foo',\n-      'bg-gradient-to-bl/foo',\n-      'bg-gradient-to-l/foo',\n-      'bg-gradient-to-tl/foo',\n-      'bg-linear-to-t/foo',\n-      'bg-linear-to-tr/foo',\n-      'bg-linear-to-r/foo',\n-      'bg-linear-to-br/foo',\n-      'bg-linear-to-b/foo',\n-      'bg-linear-to-bl/foo',\n-      'bg-linear-to-l/foo',\n-      'bg-linear-to-tl/foo',\n       'bg-[url(/image.png)]/foo',\n       'bg-[url:var(--my-url)]/foo',\n       'bg-[linear-gradient(to_bottom,red,blue)]/foo',\n       'bg-[image:var(--my-gradient)]/foo',\n-      'bg-linear-[125deg]/foo',\n-      'bg-linear-[1.3rad]/foo',\n-      'bg-linear-[to_bottom]/foo',\n-      '-bg-linear-[125deg]/foo',\n-      '-bg-linear-[1.3rad]/foo',\n+      'bg-linear-[to_bottom]/hsl',\n+      'bg-conic-[45deg]/hsl',\n+      'bg-conic-[circle_at_center]/hsl',\n       'bg-auto/foo',\n       'bg-cover/foo',\n       'bg-contain/foo',\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-14981"", ""pr_id"": 14981, ""issue_id"": 14965, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] Vite plugin breaks svelte global animation keyframes handling\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.32\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nVite with SvelteKit 2.8.0 (latest)\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v23.1.0\r\n\r\n**What browser are you using?**\r\n\r\nChrome\r\n\r\n**What operating system are you using?**\r\n\r\nMacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/emmbm/tailwind-svelte-keyframes\r\n\r\n**Describe your issue**\r\n\r\nUpdating from `@tailwindcss/vite@4.0.0-alpha.31` to `@tailwindcss/vite@4.0.0-alpha.32` breaks svelte's expected handling (read here _renaming_) of global keyframes defined in style blocks.\r\n\r\nIn svelte components, styles are scoped by default. This scoping also applies to keyframes, [unless they are defined with a `-global-` prefix which svelte then removes during build](https://svelte.dev/docs/svelte/global-styles#:global()). This behavior is broken in the current `next` version of tailwind."", ""issue_word_count"": 160, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/utils.ts"", ""integrations/vite/svelte.test.ts"", ""packages/@tailwindcss-vite/src/index.ts""], ""pr_changed_test_files"": [""integrations/vite/svelte.test.ts""], ""base_commit"": ""0b908f3992d83ded583bf59f2457c41670418eca"", ""head_commit"": ""b0dc926cef447822ae38bb22297bf9fda2de408d"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/14981"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/14981"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-13T15:42:49.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 52cc9042cc3c..f8f8fb83ecf1 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -11,6 +11,10 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n - Support opacity values in increments of `0.25` by default ([#14980](https://github.com/tailwindlabs/tailwindcss/pull/14980))\n \n+### Fixed\n+\n+- Ensure that CSS inside Svelte `<style>` blocks always run the expected Svelte processors when using the Vite extension ([#14981](https://github.com/tailwindlabs/tailwindcss/pull/14981))\n+\n ## [4.0.0-alpha.33] - 2024-11-11\n \n ### Fixed\n\ndiff --git a/integrations/utils.ts b/integrations/utils.ts\nindex 0a881ba367f6..e98a7c2c8989 100644\n--- a/integrations/utils.ts\n+++ b/integrations/utils.ts\n@@ -46,7 +46,7 @@ interface TestContext {\n     dumpFiles(pattern: string): Promise<string>\n     expectFileToContain(\n       filePath: string,\n-      contents: string | string[] | RegExp | RegExp[],\n+      contents: string | RegExp | (string | RegExp)[],\n     ): Promise<void>\n     expectFileNotToContain(filePath: string, contents: string | string[]): Promise<void>\n   }\n\ndiff --git a/packages/@tailwindcss-vite/src/index.ts b/packages/@tailwindcss-vite/src/index.ts\nindex 422437d60f4e..1eaf1d0f6fff 100644\n--- a/packages/@tailwindcss-vite/src/index.ts\n+++ b/packages/@tailwindcss-vite/src/index.ts\n@@ -59,7 +59,7 @@ export default function tailwindcss(): Plugin[] {\n         if (!module) {\n           // The module for this root might not exist yet\n           if (root.builtBeforeTransform) {\n-            return\n+            continue\n           }\n \n           // Note: Removing this during SSR is not safe and will produce\n@@ -196,17 +196,17 @@ export default function tailwindcss(): Plugin[] {\n \n         let root = roots.get(id)\n \n+        // If the root was built outside of the transform hook (e.g. in the\n+        // Svelte preprocessor), we still want to mark all dependencies of the\n+        // root as watched files.\n         if (root.builtBeforeTransform) {\n           root.builtBeforeTransform.forEach((file) => this.addWatchFile(file))\n           root.builtBeforeTransform = undefined\n-          // When a root was built before this transform hook, the candidate\n-          // list might be outdated already by the time the transform hook is\n-          // called.\n-          //\n-          // This requires us to build the CSS file again. However, we do not\n-          // expect dependencies to have changed, so we can avoid a full\n-          // rebuild.\n-          root.requiresRebuild = false\n+        }\n+\n+        // We only process Svelte `<style>` tags in the `sveltePreprocessor`\n+        if (isSvelteStyle(id)) {\n+          return src\n         }\n \n         if (!options?.ssr) {\n@@ -240,16 +240,17 @@ export default function tailwindcss(): Plugin[] {\n \n         let root = roots.get(id)\n \n+        // If the root was built outside of the transform hook (e.g. in the\n+        // Svelte preprocessor), we still want to mark all dependencies of the\n+        // root as watched files.\n         if (root.builtBeforeTransform) {\n           root.builtBeforeTransform.forEach((file) => this.addWatchFile(file))\n           root.builtBeforeTransform = undefined\n-          // When a root was built before this transform hook, the candidate\n-          // list might be outdated already by the time the transform hook is\n-          // called.\n-          //\n-          // Since we already do a second render pass in build mode, we don't\n-          // need to do any more work here.\n-          return\n+        }\n+\n+        // We only process Svelte `<style>` tags in the `sveltePreprocessor`\n+        if (isSvelteStyle(id)) {\n+          return src\n         }\n \n         // We do a first pass to generate valid CSS for the downstream plugins.\n@@ -268,6 +269,9 @@ export default function tailwindcss(): Plugin[] {\n       // by vite:css-post.\n       async renderStart() {\n         for (let [id, root] of roots.entries()) {\n+          // Do not do a second render pass on Svelte `<style>` tags.\n+          if (isSvelteStyle(id)) continue\n+\n           let generated = await regenerateOptimizedCss(\n             root,\n             // During the renderStart phase, we can not add watch files since\n@@ -304,13 +308,20 @@ function isPotentialCssRootFile(id: string) {\n     (extension === 'css' ||\n       (extension === 'vue' && id.includes('&lang.css')) ||\n       (extension === 'astro' && id.includes('&lang.css')) ||\n-      (extension === 'svelte' && id.includes('&lang.css'))) &&\n+      // We want to process Svelte `<style>` tags to properly add dependency\n+      // tracking for imported files.\n+      isSvelteStyle(id)) &&\n     // Don't intercept special static asset resources\n     !SPECIAL_QUERY_RE.test(id)\n \n   return isCssFile\n }\n \n+function isSvelteStyle(id: string) {\n+  let extension = getExtension(id)\n+  return extension === 'svelte' && id.includes('&lang.css')\n+}\n+\n function optimizeCss(\n   input: string,\n   { file = 'input.css', minify = false }: { file?: string; minify?: boolean } = {},\n@@ -403,6 +414,8 @@ class Root {\n   // The resolved path given to `source(\u2026)`. When not given this is `null`.\n   private basePath: string | null = null\n \n+  public overwriteCandidates: string[] | null = null\n+\n   constructor(\n     private id: string,\n     private getSharedCandidates: () => Map<string, Set<string>>,\n@@ -453,14 +466,16 @@ class Root {\n       this.scanner = new Scanner({ sources })\n     }\n \n-    // This should not be here, but right now the Vite plugin is setup where we\n-    // setup a new scanner and compiler every time we request the CSS file\n-    // (regardless whether it actually changed or not).\n-    env.DEBUG && console.time('[@tailwindcss/vite] Scan for candidates')\n-    for (let candidate of this.scanner.scan()) {\n-      this.candidates.add(candidate)\n+    if (!this.overwriteCandidates) {\n+      // This should not be here, but right now the Vite plugin is setup where we\n+      // setup a new scanner and compiler every time we request the CSS file\n+      // (regardless whether it actually changed or not).\n+      env.DEBUG && console.time('[@tailwindcss/vite] Scan for candidates')\n+      for (let candidate of this.scanner.scan()) {\n+        this.candidates.add(candidate)\n+      }\n+      env.DEBUG && console.timeEnd('[@tailwindcss/vite] Scan for candidates')\n     }\n-    env.DEBUG && console.timeEnd('[@tailwindcss/vite] Scan for candidates')\n \n     // Watch individual files found via custom `@source` paths\n     for (let file of this.scanner.files) {\n@@ -506,7 +521,11 @@ class Root {\n     this.requiresRebuild = true\n \n     env.DEBUG && console.time('[@tailwindcss/vite] Build CSS')\n-    let result = this.compiler.build([...this.sharedCandidates(), ...this.candidates])\n+    let result = this.compiler.build(\n+      this.overwriteCandidates\n+        ? this.overwriteCandidates\n+        : [...this.sharedCandidates(), ...this.candidates],\n+    )\n     env.DEBUG && console.timeEnd('[@tailwindcss/vite] Build CSS')\n \n     return result\n@@ -552,50 +571,72 @@ class Root {\n // enabled. This allows us to transform CSS in `<style>` tags and create a\n // stricter version of CSS that passes the Svelte compiler.\n //\n-// Note that these files will undergo a second pass through the vite transpiler\n-// later. This is necessary to compute `@tailwind utilities;` with the right\n-// candidate list.\n+// Note that these files will not undergo a second pass through the vite\n+// transpiler later. This means that `@tailwind utilities;` will not be up to\n+// date.\n //\n-// In practice, it is not recommended to use `@tailwind utilities;` inside\n-// Svelte components. Use an external `.css` file instead.\n+// In practice, it is discouraged to use `@tailwind utilities;` inside Svelte\n+// components, as the styles it create would be scoped anyways. Use an external\n+// `.css` file instead.\n function svelteProcessor(roots: DefaultMap<string, Root>) {\n+  let preprocessor = sveltePreprocess()\n+\n   return {\n     name: '@tailwindcss/svelte',\n     api: {\n-      sveltePreprocess: sveltePreprocess({\n-        aliases: [\n-          ['postcss', 'tailwindcss'],\n-          ['css', 'tailwindcss'],\n-        ],\n-        async tailwindcss({\n+      sveltePreprocess: {\n+        markup: preprocessor.markup,\n+        script: preprocessor.script,\n+        async style({\n           content,\n-          attributes,\n           filename,\n+          markup,\n+          ...rest\n         }: {\n           content: string\n-          attributes: Record<string, string>\n           filename?: string\n+          attributes: Record<string, string | boolean>\n+          markup: string\n         }) {\n-          if (!filename) return\n+          if (!filename) return preprocessor.style?.({ ...rest, content, filename, markup })\n+\n+          // Create the ID used by Vite to identify the `<style>` contents. This\n+          // way, the Vite `transform` hook can find the right root and thus\n+          // track the right dependencies.\n           let id = filename + '?svelte&type=style&lang.css'\n \n           let root = roots.get(id)\n+\n+          // Since a Svelte pre-processor call means that the CSS has changed,\n+          // we need to trigger a rebuild.\n+          root.requiresRebuild = true\n+\n           // Mark this root as being built before the Vite transform hook is\n           // called. We capture all eventually added dependencies so that we can\n           // connect them to the vite module graph later, when the transform\n           // hook is called.\n           root.builtBeforeTransform = []\n+\n+          // We only want to consider candidates from the current template file,\n+          // this ensures that no one can depend on this having the full candidate\n+          // list in some builds (as this is undefined behavior).\n+          let scanner = new Scanner({})\n+          root.overwriteCandidates = scanner.scanFiles([\n+            { content: markup, file: filename, extension: 'svelte' },\n+          ])\n+\n           let generated = await root.generate(content, (file) =>\n             root?.builtBeforeTransform?.push(file),\n           )\n \n           if (!generated) {\n             roots.delete(id)\n-            return { code: content, attributes }\n+            return preprocessor.style?.({ ...rest, content, filename, markup })\n           }\n-          return { code: generated, attributes }\n+\n+          return preprocessor.style?.({ ...rest, content: generated, filename, markup })\n         },\n-      }),\n+      },\n     },\n   }\n }\n"", ""test_patch"": ""diff --git a/integrations/vite/svelte.test.ts b/integrations/vite/svelte.test.ts\nindex 990ede3aadb3..ed0a6f9cb368 100644\n--- a/integrations/vite/svelte.test.ts\n+++ b/integrations/vite/svelte.test.ts\n@@ -48,22 +48,50 @@ test(\n           target: document.body,\n         })\n       `,\n+      'src/index.css': css`\n+        @import 'tailwindcss/theme' theme(reference);\n+        @import 'tailwindcss/utilities';\n+      `,\n       'src/App.svelte': html`\n         <script>\n+          import './index.css'\n           let name = 'world'\n         </script>\n \n-        <h1 class=\""foo underline\"">Hello {name}!</h1>\n+        <h1 class=\""global local underline\"">Hello {name}!</h1>\n \n-        <style global>\n-          @import 'tailwindcss/utilities';\n+        <style>\n           @import 'tailwindcss/theme' theme(reference);\n-          @import './components.css';\n+          @import './other.css';\n         </style>\n       `,\n-      'src/components.css': css`\n-        .foo {\n+      'src/other.css': css`\n+        .local {\n           @apply text-red-500;\n+          animation: 2s ease-in-out 0s infinite localKeyframes;\n+        }\n+\n+        :global(.global) {\n+          @apply text-green-500;\n+          animation: 2s ease-in-out 0s infinite globalKeyframes;\n+        }\n+\n+        @keyframes -global-globalKeyframes {\n+          0% {\n+            opacity: 0;\n+          }\n+          100% {\n+            opacity: 100%;\n+          }\n+        }\n+\n+        @keyframes localKeyframes {\n+          0% {\n+            opacity: 0;\n+          }\n+          100% {\n+            opacity: 100%;\n+          }\n         }\n       `,\n     },\n@@ -74,7 +102,13 @@ test(\n     let files = await fs.glob('dist/**/*.css')\n     expect(files).toHaveLength(1)\n \n-    await fs.expectFileToContain(files[0][0], [candidate`underline`, candidate`foo`])\n+    await fs.expectFileToContain(files[0][0], [\n+      candidate`underline`,\n+      '.global{color:var(--color-green-500);animation:2s ease-in-out 0s infinite globalKeyframes}',\n+      /\\.local.svelte-.*\\{color:var\\(--color-red-500\\);animation:2s ease-in-out 0s infinite svelte-.*-localKeyframes\\}/,\n+      /@keyframes globalKeyframes\\{/,\n+      /@keyframes svelte-.*-localKeyframes\\{/,\n+    ])\n   },\n )\n \n@@ -127,20 +161,48 @@ test(\n       `,\n       'src/App.svelte': html`\n         <script>\n+          import './index.css'\n           let name = 'world'\n         </script>\n \n-        <h1 class=\""foo underline\"">Hello {name}!</h1>\n+        <h1 class=\""local global underline\"">Hello {name}!</h1>\n \n-        <style global>\n-          @import 'tailwindcss/utilities';\n+        <style>\n           @import 'tailwindcss/theme' theme(reference);\n-          @import './components.css';\n+          @import './other.css';\n         </style>\n       `,\n-      'src/components.css': css`\n-        .foo {\n+      'src/index.css': css`\n+        @import 'tailwindcss/theme' theme(reference);\n+        @import 'tailwindcss/utilities';\n+      `,\n+      'src/other.css': css`\n+        .local {\n           @apply text-red-500;\n+          animation: 2s ease-in-out 0s infinite localKeyframes;\n+        }\n+\n+        :global(.global) {\n+          @apply text-green-500;\n+          animation: 2s ease-in-out 0s infinite globalKeyframes;\n+        }\n+\n+        @keyframes -global-globalKeyframes {\n+          0% {\n+            opacity: 0;\n+          }\n+          100% {\n+            opacity: 100%;\n+          }\n+        }\n+\n+        @keyframes localKeyframes {\n+          0% {\n+            opacity: 0;\n+          }\n+          100% {\n+            opacity: 100%;\n+          }\n         }\n       `,\n     },\n@@ -148,30 +210,45 @@ test(\n   async ({ fs, spawn }) => {\n     await spawn(`pnpm vite build --watch`)\n \n-    let filename = ''\n     await retryAssertion(async () => {\n       let files = await fs.glob('dist/**/*.css')\n       expect(files).toHaveLength(1)\n-      filename = files[0][0]\n+      let [, css] = files[0]\n+      expect(css).toContain(candidate`underline`)\n+      expect(css).toContain(\n+        '.global{color:var(--color-green-500);animation:2s ease-in-out 0s infinite globalKeyframes}',\n+      )\n+      expect(css).toMatch(\n+        /\\.local.svelte-.*\\{color:var\\(--color-red-500\\);animation:2s ease-in-out 0s infinite svelte-.*-localKeyframes\\}/,\n+      )\n+      expect(css).toMatch(/@keyframes globalKeyframes\\{/)\n+      expect(css).toMatch(/@keyframes svelte-.*-localKeyframes\\{/)\n     })\n \n-    await fs.expectFileToContain(filename, [candidate`foo`, candidate`underline`])\n+    await fs.write(\n+      'src/App.svelte',\n+      (await fs.read('src/App.svelte')).replace('underline', 'font-bold bar'),\n+    )\n \n     await fs.write(\n-      'src/components.css',\n-      css`\n-        .bar {\n-          @apply text-green-500;\n-        }\n-      `,\n+      'src/other.css',\n+      `${await fs.read('src/other.css')}\\n.bar { @apply text-pink-500; }`,\n     )\n+\n     await retryAssertion(async () => {\n       let files = await fs.glob('dist/**/*.css')\n       expect(files).toHaveLength(1)\n       let [, css] = files[0]\n-      expect(css).toContain(candidate`underline`)\n-      expect(css).toContain(candidate`bar`)\n-      expect(css).not.toContain(candidate`foo`)\n+      expect(css).toContain(candidate`font-bold`)\n+      expect(css).toContain(\n+        '.global{color:var(--color-green-500);animation:2s ease-in-out 0s infinite globalKeyframes}',\n+      )\n+      expect(css).toMatch(\n+        /\\.local.svelte-.*\\{color:var\\(--color-red-500\\);animation:2s ease-in-out 0s infinite svelte-.*-localKeyframes\\}/,\n+      )\n+      expect(css).toMatch(/@keyframes globalKeyframes\\{/)\n+      expect(css).toMatch(/@keyframes svelte-.*-localKeyframes\\{/)\n+      expect(css).toMatch(/\\.bar.svelte-.*\\{color:var\\(--color-pink-500\\)\\}/)\n     })\n   },\n )\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-14962"", ""pr_id"": 14962, ""issue_id"": 14960, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""v4 alpha.32 translate regression\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4 alpha 32\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nvite\r\n\r\n**What version of Node.js are you using?**\r\n\r\nv22\r\n\r\n**What browser are you using?**\r\n\r\nEdge\r\n\r\n**What operating system are you using?**\r\n\r\nWindows\r\n\r\n**Reproduction URL**\r\n\r\nA Tailwind Play link or public GitHub repo that includes a minimal reproduction of the bug. **Please do not link to your actual project**, what we need instead is a _minimal_ reproduction in a fresh project without any unnecessary code. This means it doesn't matter if your real project is private/confidential, since we want a link to a separate, isolated reproduction anyways.\r\n\r\nA reproduction is **required** when filing an issue \u2014 any issue opened without a reproduction will be closed and you'll be asked to create a new issue that includes a reproduction. We're a small team and we can't keep up with the volume of issues we receive if we need to reproduce each issue from scratch ourselves.\r\n\r\n**Describe your issue**\r\n\r\nok alpha 31:\r\n<img width=\""299\"" alt=\""image\"" src=\""https://github.com/user-attachments/assets/610536c9-ce65-4997-a88a-d2ed94103b4f\"">\r\n\r\nNot ok alpha 32:\r\n<img width=\""302\"" alt=\""image\"" src=\""https://github.com/user-attachments/assets/51cb1aac-2d14-4293-a344-26af52a0f44a\"">\r\n"", ""issue_word_count"": 256, ""test_files_count"": 1, ""non_test_files_count"": 3, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/utilities.test.ts"", ""packages/tailwindcss/src/utilities.ts"", ""playgrounds/vite/src/app.tsx""], ""pr_changed_test_files"": [""packages/tailwindcss/src/utilities.test.ts""], ""base_commit"": ""50d7355f7f81939172af1161e0930dc381d599ca"", ""head_commit"": ""15db04b7df40e76b5a84239357206f9c48d00638"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/14962"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/14962"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-11T18:45:37.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex b8c5580ab535..dd171daf65c6 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -10,6 +10,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n ### Fixed\n \n - Don't reset horizontal padding on date/time pseudo-elements ([#14959](https://github.com/tailwindlabs/tailwindcss/pull/14959))\n+- Don't emit `calc()` with invalid values for bare values that aren't integers in spacing utilities ([#14962](https://github.com/tailwindlabs/tailwindcss/pull/14962))\n \n ## [4.0.0-alpha.32] - 2024-11-11\n \n\ndiff --git a/packages/tailwindcss/src/utilities.ts b/packages/tailwindcss/src/utilities.ts\nindex 96ceea6b5261..a20938550ac0 100644\n--- a/packages/tailwindcss/src/utilities.ts\n+++ b/packages/tailwindcss/src/utilities.ts\n@@ -387,6 +387,8 @@ export function createUtilities(theme: Theme) {\n       handleNegativeBareValue: ({ value }) => {\n         let multiplier = theme.resolve(null, ['--spacing'])\n         if (!multiplier) return null\n+        if (!isValidSpacingMultiplier(value)) return null\n+\n         return `calc(${multiplier} * -${value})`\n       },\n       handle,\n\ndiff --git a/playgrounds/vite/src/app.tsx b/playgrounds/vite/src/app.tsx\nindex 8ec50298951f..4abc17cb52e1 100644\n--- a/playgrounds/vite/src/app.tsx\n+++ b/playgrounds/vite/src/app.tsx\n@@ -2,6 +2,7 @@ export function App() {\n   return (\n     <div className=\""m-3 p-3 border\"">\n       <h1 className=\""text-blue-500\"">Hello World</h1>\n+      <div className=\""-inset-x-full -inset-y-full -space-x-full -space-y-full -inset-full\""></div>\n     </div>\n   )\n }\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/utilities.test.ts b/packages/tailwindcss/src/utilities.test.ts\nindex a9c4a6ae2ee6..3335e4168eb0 100644\n--- a/packages/tailwindcss/src/utilities.test.ts\n+++ b/packages/tailwindcss/src/utilities.test.ts\n@@ -3861,6 +3861,82 @@ test('translate-x', async () => {\n       '-translate-x-[var(--value)]/foo',\n     ]),\n   ).toEqual('')\n+\n+  expect(\n+    await compileCss(\n+      css`\n+        @theme {\n+          --spacing: 0.25rem;\n+        }\n+        @tailwind utilities;\n+      `,\n+      ['translate-x-full', '-translate-x-full', 'translate-x-px', '-translate-x-[var(--value)]'],\n+    ),\n+  ).toMatchInlineSnapshot(`\n+    \"":root {\n+      --spacing: .25rem;\n+    }\n+\n+    .-translate-x-\\\\[var\\\\(--value\\\\)\\\\] {\n+      --tw-translate-x: calc(var(--value) * -1);\n+      translate: var(--tw-translate-x) var(--tw-translate-y);\n+    }\n+\n+    .-translate-x-full {\n+      --tw-translate-x: -100%;\n+      translate: var(--tw-translate-x) var(--tw-translate-y);\n+    }\n+\n+    .translate-x-full {\n+      --tw-translate-x: 100%;\n+      translate: var(--tw-translate-x) var(--tw-translate-y);\n+    }\n+\n+    .translate-x-px {\n+      --tw-translate-x: 1px;\n+      translate: var(--tw-translate-x) var(--tw-translate-y);\n+    }\n+\n+    @supports (-moz-orient: inline) {\n+      @layer base {\n+        *, :before, :after, ::backdrop {\n+          --tw-translate-x: 0;\n+          --tw-translate-y: 0;\n+          --tw-translate-z: 0;\n+        }\n+      }\n+    }\n+\n+    @property --tw-translate-x {\n+      syntax: \""<length> | <percentage>\"";\n+      inherits: false;\n+      initial-value: 0;\n+    }\n+\n+    @property --tw-translate-y {\n+      syntax: \""<length> | <percentage>\"";\n+      inherits: false;\n+      initial-value: 0;\n+    }\n+\n+    @property --tw-translate-z {\n+      syntax: \""<length>\"";\n+      inherits: false;\n+      initial-value: 0;\n+    }\""\n+  `)\n+  expect(\n+    await run([\n+      'perspective',\n+      '-perspective',\n+      'perspective-potato',\n+      'perspective-123',\n+      'perspective-normal/foo',\n+      'perspective-dramatic/foo',\n+      'perspective-none/foo',\n+      'perspective-[456px]/foo',\n+    ]),\n+  ).toEqual('')\n })\n \n test('translate-y', async () => {\n@@ -3933,6 +4009,82 @@ test('translate-y', async () => {\n       '-translate-y-[var(--value)]/foo',\n     ]),\n   ).toEqual('')\n+\n+  expect(\n+    await compileCss(\n+      css`\n+        @theme {\n+          --spacing: 0.25rem;\n+        }\n+        @tailwind utilities;\n+      `,\n+      ['translate-y-full', '-translate-y-full', 'translate-y-px', '-translate-y-[var(--value)]'],\n+    ),\n+  ).toMatchInlineSnapshot(`\n+    \"":root {\n+      --spacing: .25rem;\n+    }\n+\n+    .-translate-y-\\\\[var\\\\(--value\\\\)\\\\] {\n+      --tw-translate-y: calc(var(--value) * -1);\n+      translate: var(--tw-translate-x) var(--tw-translate-y);\n+    }\n+\n+    .-translate-y-full {\n+      --tw-translate-y: -100%;\n+      translate: var(--tw-translate-x) var(--tw-translate-y);\n+    }\n+\n+    .translate-y-full {\n+      --tw-translate-y: 100%;\n+      translate: var(--tw-translate-x) var(--tw-translate-y);\n+    }\n+\n+    .translate-y-px {\n+      --tw-translate-y: 1px;\n+      translate: var(--tw-translate-x) var(--tw-translate-y);\n+    }\n+\n+    @supports (-moz-orient: inline) {\n+      @layer base {\n+        *, :before, :after, ::backdrop {\n+          --tw-translate-x: 0;\n+          --tw-translate-y: 0;\n+          --tw-translate-z: 0;\n+        }\n+      }\n+    }\n+\n+    @property --tw-translate-x {\n+      syntax: \""<length> | <percentage>\"";\n+      inherits: false;\n+      initial-value: 0;\n+    }\n+\n+    @property --tw-translate-y {\n+      syntax: \""<length> | <percentage>\"";\n+      inherits: false;\n+      initial-value: 0;\n+    }\n+\n+    @property --tw-translate-z {\n+      syntax: \""<length>\"";\n+      inherits: false;\n+      initial-value: 0;\n+    }\""\n+  `)\n+  expect(\n+    await run([\n+      'perspective',\n+      '-perspective',\n+      'perspective-potato',\n+      'perspective-123',\n+      'perspective-normal/foo',\n+      'perspective-dramatic/foo',\n+      'perspective-none/foo',\n+      'perspective-[456px]/foo',\n+    ]),\n+  ).toEqual('')\n })\n \n test('translate-z', async () => {\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-14793"", ""pr_id"": 14793, ""issue_id"": 14791, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] `@container` is an invalid utility name\n<!-- Please provide all of the information requested below. We're a small team and without all of this information it's not possible for us to help and your bug report will be closed. -->\r\n\r\n**What version of Tailwind CSS are you using?**\r\n\r\nv4.0.0-alpha.30\r\n\r\n**Reproduction URL**\r\n\r\n**Describe your issue**\r\n\r\nI am trying to upgrade to v4, but encountered the following error when using `@tailwindcss/container-queries`:\r\n```\r\n`matchUtilities({ '@container' : \u2026 })` defines an invalid utility name. Utilities should be alphanumeric and start with a lowercase letter, eg. `scrollbar`\r\n```\r\n\r\nhttps://github.com/tailwindlabs/tailwindcss/blob/10a8f1a7257ccd893ea2251279018c8da5541d90/packages/tailwindcss/src/compat/plugin-api.ts#L78"", ""issue_word_count"": 110, ""test_files_count"": 1, ""non_test_files_count"": 2, ""pr_changed_files"": [""CHANGELOG.md"", ""packages/tailwindcss/src/compat/plugin-api.test.ts"", ""packages/tailwindcss/src/compat/plugin-api.ts""], ""pr_changed_test_files"": [""packages/tailwindcss/src/compat/plugin-api.test.ts""], ""base_commit"": ""6177ca9413d3c0cda6e3d5eb3c77beaab1f4da38"", ""head_commit"": ""cb2ff64925a1438b0bc3e7b91a19e8e4accc9553"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/14793"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/14793"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-11T15:11:45.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 9915642962a7..b18f6887eb81 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -39,6 +39,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Ensure spacing utilities with no value (e.g. `px` or `translate-y`) don't generate CSS ([#14911](https://github.com/tailwindlabs/tailwindcss/pull/14911))\n - Don't override user-agent background color for input elements in Preflight ([#14913](https://github.com/tailwindlabs/tailwindcss/pull/14913))\n - Don't attempt to convert CSS variables (which should already be percentages) to percentages when used as opacity modifiers ([#14916](https://github.com/tailwindlabs/tailwindcss/pull/14916))\n+- Ensure custom utilities registered with the plugin API can start with `@` ([#14793](https://github.com/tailwindlabs/tailwindcss/pull/14793))\n - _Upgrade (experimental)_: Install `@tailwindcss/postcss` next to `tailwindcss` ([#14830](https://github.com/tailwindlabs/tailwindcss/pull/14830))\n - _Upgrade (experimental)_: Remove whitespace around `,` separator when print arbitrary values ([#14838](https://github.com/tailwindlabs/tailwindcss/pull/14838))\n - _Upgrade (experimental)_: Fix crash during upgrade when content globs escape root of project ([#14896](https://github.com/tailwindlabs/tailwindcss/pull/14896))\n\ndiff --git a/packages/tailwindcss/src/compat/plugin-api.ts b/packages/tailwindcss/src/compat/plugin-api.ts\nindex 04fb8d43a59d..e348da5c0c5c 100644\n--- a/packages/tailwindcss/src/compat/plugin-api.ts\n+++ b/packages/tailwindcss/src/compat/plugin-api.ts\n@@ -75,7 +75,7 @@ export type PluginAPI = {\n   prefix(className: string): string\n }\n \n-const IS_VALID_UTILITY_NAME = /^[a-z][a-zA-Z0-9/%._-]*$/\n+const IS_VALID_UTILITY_NAME = /^[a-z@][a-zA-Z0-9/%._-]*$/\n \n export function buildPluginApi(\n   designSystem: DesignSystem,\n"", ""test_patch"": ""diff --git a/packages/tailwindcss/src/compat/plugin-api.test.ts b/packages/tailwindcss/src/compat/plugin-api.test.ts\nindex 73745e837412..6a3062ad224f 100644\n--- a/packages/tailwindcss/src/compat/plugin-api.test.ts\n+++ b/packages/tailwindcss/src/compat/plugin-api.test.ts\n@@ -2943,6 +2943,50 @@ describe('matchUtilities()', () => {\n     ).toEqual('')\n   })\n \n+  test('custom functional utilities can start with @', async () => {\n+    async function run(candidates: string[]) {\n+      let compiled = await compile(\n+        css`\n+          @plugin \""my-plugin\"";\n+          @tailwind utilities;\n+        `,\n+\n+        {\n+          async loadModule(id, base) {\n+            return {\n+              base,\n+              module: ({ matchUtilities }: PluginAPI) => {\n+                matchUtilities(\n+                  { '@w': (value) => ({ width: value }) },\n+                  {\n+                    values: {\n+                      1: '1px',\n+                    },\n+                  },\n+                )\n+              },\n+            }\n+          },\n+        },\n+      )\n+\n+      return compiled.build(candidates)\n+    }\n+\n+    expect(optimizeCss(await run(['@w-1','hover:@w-1'])).trim())\n+      .toMatchInlineSnapshot(`\n+        \"".\\\\@w-1 {\n+          width: 1px;\n+        }\n+\n+        @media (hover: hover) {\n+          .hover\\\\:\\\\@w-1:hover {\n+            width: 1px;\n+          }\n+        }\""\n+      `)\n+  })\n+\n   test('custom functional utilities can return an array of rules', async () => {\n     let compiled = await compile(\n       css`\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
"{""instance_id"": ""tailwindlabs__tailwindcss-14151"", ""pr_id"": 14151, ""issue_id"": 13305, ""repo"": ""tailwindlabs/tailwindcss"", ""problem_statement"": ""[v4] @apply not effected (SvelteKit, Vite)\n**What version of Tailwind CSS are you using?**\r\n\r\n4.0.0-alpha.9\r\n\r\n**What build tool (or framework if it abstracts the build tool) are you using?**\r\n\r\nSvelte 5.0.0-next.80, SvelteKit 2.5.4, @tailwindcss/vite 4.0.0-alpha.9, vite 5.2.2\r\n\r\n**What version of Node.js are you using?**\r\n\r\nFor example: v20.10.0\r\n\r\n**What browser are you using?**\r\n\r\nBrave (Chrome), Firefox, Safari\r\n\r\n**What operating system are you using?**\r\n\r\nmacOS\r\n\r\n**Reproduction URL**\r\n\r\nhttps://github.com/szig83/svelte5-tailwind4\r\n(https://github.com/szig83/svelte5-tailwind4/blob/main/src/routes/%2Bpage.svelte)\r\n\r\n**Describe your issue**\r\nThe problematic code snippet can be found in the src/routes/+page.svelte file. I created a custom CSS class where I wanted to use the @apply directive. There is no error during build and runtime, but the @apply directive seems to not take effect.\r\nThe div element with the Tailwind class (bg-gray-700) is applied correctly."", ""issue_word_count"": 164, ""test_files_count"": 1, ""non_test_files_count"": 4, ""pr_changed_files"": [""CHANGELOG.md"", ""integrations/vite/svelte.test.ts"", ""packages/@tailwindcss-vite/package.json"", ""packages/@tailwindcss-vite/src/index.ts"", ""pnpm-lock.yaml""], ""pr_changed_test_files"": [""integrations/vite/svelte.test.ts""], ""base_commit"": ""7b75b1a6ed1bc09e6f974eff0f059e9593fc5cda"", ""head_commit"": ""759130602c7a151c380826008ba5d8f93d6fd246"", ""repo_url"": ""https://github.com/tailwindlabs/tailwindcss/pull/14151"", ""swe_url"": ""https://swe-bench-plus.turing.com/repos/tailwindlabs__tailwindcss/14151"", ""dockerfile"": """", ""pr_merged_at"": ""2024-11-08T19:01:17.000Z"", ""patch"": ""diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex 4449f460368e..493e3ef92f84 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n - Support derived spacing scales based on a single `--spacing` theme value ([#14857](https://github.com/tailwindlabs/tailwindcss/pull/14857))\n - Add `svh`, `dvh`, `svw`, `dvw`, and `auto` values to all width/height/size utilities ([#14857](https://github.com/tailwindlabs/tailwindcss/pull/14857))\n - Add new `**` variant ([#14903](https://github.com/tailwindlabs/tailwindcss/pull/14903))\n+- Process `<style>` blocks inside Svelte files when using the Vite extension ([#14151](https://github.com/tailwindlabs/tailwindcss/pull/14151))\n - _Upgrade (experimental)_: Migrate `grid-cols-[subgrid]` and `grid-rows-[subgrid]` to `grid-cols-subgrid` and `grid-rows-subgrid` ([#14840](https://github.com/tailwindlabs/tailwindcss/pull/14840))\n - _Upgrade (experimental)_: Support migrating projects with multiple config files ([#14863](https://github.com/tailwindlabs/tailwindcss/pull/14863))\n - _Upgrade (experimental)_: Rename `shadow` to `shadow-sm`, `shadow-sm` to `shadow-xs`, and `shadow-xs` to `shadow-2xs` ([#14875](https://github.com/tailwindlabs/tailwindcss/pull/14875))\n\ndiff --git a/packages/@tailwindcss-vite/package.json b/packages/@tailwindcss-vite/package.json\nindex 7de95525e11d..8a3e6330641b 100644\n--- a/packages/@tailwindcss-vite/package.json\n+++ b/packages/@tailwindcss-vite/package.json\n@@ -31,6 +31,7 @@\n     \""@tailwindcss/node\"": \""workspace:^\"",\n     \""@tailwindcss/oxide\"": \""workspace:^\"",\n     \""lightningcss\"": \""catalog:\"",\n+    \""svelte-preprocess\"": \""^6.0.2\"",\n     \""tailwindcss\"": \""workspace:^\""\n   },\n   \""devDependencies\"": {\n\ndiff --git a/packages/@tailwindcss-vite/src/index.ts b/packages/@tailwindcss-vite/src/index.ts\nindex 1ec1eac5e736..422437d60f4e 100644\n--- a/packages/@tailwindcss-vite/src/index.ts\n+++ b/packages/@tailwindcss-vite/src/index.ts\n@@ -4,6 +4,7 @@ import { Scanner } from '@tailwindcss/oxide'\n import { Features, transform } from 'lightningcss'\n import fs from 'node:fs/promises'\n import path from 'node:path'\n+import { sveltePreprocess } from 'svelte-preprocess'\n import type { Plugin, ResolvedConfig, Rollup, Update, ViteDevServer } from 'vite'\n \n const SPECIAL_QUERY_RE = /[?&](raw|url)\\b/\n@@ -53,9 +54,14 @@ export default function tailwindcss(): Plugin[] {\n   function invalidateAllRoots(isSSR: boolean) {\n     for (let server of servers) {\n       let updates: Update[] = []\n-      for (let id of roots.keys()) {\n+      for (let [id, root] of roots.entries()) {\n         let module = server.moduleGraph.getModuleById(id)\n         if (!module) {\n+          // The module for this root might not exist yet\n+          if (root.builtBeforeTransform) {\n+            return\n+          }\n+\n           // Note: Removing this during SSR is not safe and will produce\n           // inconsistent results based on the timing of the removal and\n           // the order / timing of transforms.\n@@ -152,6 +158,7 @@ export default function tailwindcss(): Plugin[] {\n   }\n \n   return [\n+    svelteProcessor(roots),\n     {\n       // Step 1: Scan source files for candidates\n       name: '@tailwindcss/vite:scan',\n@@ -189,6 +196,19 @@ export default function tailwindcss(): Plugin[] {\n \n         let root = roots.get(id)\n \n+        if (root.builtBeforeTransform) {\n+          root.builtBeforeTransform.forEach((file) => this.addWatchFile(file))\n+          root.builtBeforeTransform = undefined\n+          // When a root was built before this transform hook, the candidate\n+          // list might be outdated already by the time the transform hook is\n+          // called.\n+          //\n+          // This requires us to build the CSS file again. However, we do not\n+          // expect dependencies to have changed, so we can avoid a full\n+          // rebuild.\n+          root.requiresRebuild = false\n+        }\n+\n         if (!options?.ssr) {\n           // Wait until all other files have been processed, so we can extract\n           // all candidates before generating CSS. This must not be called\n@@ -220,6 +240,18 @@ export default function tailwindcss(): Plugin[] {\n \n         let root = roots.get(id)\n \n+        if (root.builtBeforeTransform) {\n+          root.builtBeforeTransform.forEach((file) => this.addWatchFile(file))\n+          root.builtBeforeTransform = undefined\n+          // When a root was built before this transform hook, the candidate\n+          // list might be outdated already by the time the transform hook is\n+          // called.\n+          //\n+          // Since we already do a second render pass in build mode, we don't\n+          // need to do any more work here.\n+          return\n+        }\n+\n         // We do a first pass to generate valid CSS for the downstream plugins.\n         // However, since not all candidates are guaranteed to be extracted by\n         // this time, we have to re-run a transform for the root later.\n@@ -266,11 +298,13 @@ function getExtension(id: string) {\n }\n \n function isPotentialCssRootFile(id: string) {\n+  if (id.includes('/.vite/')) return\n   let extension = getExtension(id)\n   let isCssFile =\n     (extension === 'css' ||\n       (extension === 'vue' && id.includes('&lang.css')) ||\n-      (extension === 'astro' && id.includes('&lang.css'))) &&\n+      (extension === 'astro' && id.includes('&lang.css')) ||\n+      (extension === 'svelte' && id.includes('&lang.css'))) &&\n     // Don't intercept special static asset resources\n     !SPECIAL_QUERY_RE.test(id)\n \n@@ -338,6 +372,14 @@ class Root {\n   // `renderStart` hook.\n   public lastContent: string = ''\n \n+  // When set, indicates that the root was built before the Vite transform hook\n+  // was being called. This can happen in scenarios like when preprocessing\n+  // `<style>` tags for Svelte components.\n+  //\n+  // It can be set to a list of dependencies that will be added whenever the\n+  // next `transform` hook is being called.\n+  public builtBeforeTransform: string[] | undefined\n+\n   // The lazily-initialized Tailwind compiler components. These are persisted\n   // throughout rebuilds but will be re-initialized if the rebuild strategy is\n   // set to `full`.\n@@ -505,3 +547,55 @@ class Root {\n     return shared\n   }\n }\n+\n+// Register a plugin that can hook into the Svelte preprocessor if svelte is\n+// enabled. This allows us to transform CSS in `<style>` tags and create a\n+// stricter version of CSS that passes the Svelte compiler.\n+//\n+// Note that these files will undergo a second pass through the vite transpiler\n+// later. This is necessary to compute `@tailwind utilities;` with the right\n+// candidate list.\n+//\n+// In practice, it is not recommended to use `@tailwind utilities;` inside\n+// Svelte components. Use an external `.css` file instead.\n+function svelteProcessor(roots: DefaultMap<string, Root>) {\n+  return {\n+    name: '@tailwindcss/svelte',\n+    api: {\n+      sveltePreprocess: sveltePreprocess({\n+        aliases: [\n+          ['postcss', 'tailwindcss'],\n+          ['css', 'tailwindcss'],\n+        ],\n+        async tailwindcss({\n+          content,\n+          attributes,\n+          filename,\n+        }: {\n+          content: string\n+          attributes: Record<string, string>\n+          filename?: string\n+        }) {\n+          if (!filename) return\n+          let id = filename + '?svelte&type=style&lang.css'\n+\n+          let root = roots.get(id)\n+          // Mark this root as being built before the Vite transform hook is\n+          // called. We capture all eventually added dependencies so that we can\n+          // connect them to the vite module graph later, when the transform\n+          // hook is called.\n+          root.builtBeforeTransform = []\n+          let generated = await root.generate(content, (file) =>\n+            root?.builtBeforeTransform?.push(file),\n+          )\n+\n+          if (!generated) {\n+            roots.delete(id)\n+            return { code: content, attributes }\n+          }\n+          return { code: generated, attributes }\n+        },\n+      }),\n+    },\n+  }\n+}\n\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\nindex 24d794afbf6e..4a78ce002a21 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n@@ -348,6 +348,9 @@ importers:\n       lightningcss:\n         specifier: 'catalog:'\n         version: 1.26.0(patch_hash=5hwfyehqvg5wjb7mwtdvubqbl4)\n+      svelte-preprocess:\n+        specifier: ^6.0.2\n+        version: 6.0.2(@babel/core@7.25.2)(postcss-load-config@6.0.1(jiti@2.3.3)(postcss@8.4.47)(tsx@4.19.1)(yaml@2.6.0))(postcss@8.4.47)(svelte@4.2.18)(typescript@5.6.3)\n       tailwindcss:\n         specifier: workspace:^\n         version: link:../tailwindcss\n@@ -1666,6 +1669,9 @@ packages:\n   client-only@0.0.1:\n     resolution: {integrity: sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==}\n \n+  code-red@1.0.4:\n+    resolution: {integrity: sha512-7qJWqItLA8/VPVlKJlFXU+NBlo/qyfs39aJcuMT/2ere32ZqvF5OSxgdM5xOfJJ7O429gg2HM47y8v9P+9wrNw==}\n+\n   color-convert@1.9.3:\n     resolution: {integrity: sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==}\n \n@@ -1700,6 +1706,10 @@ packages:\n     resolution: {integrity: sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==}\n     engines: {node: '>= 8'}\n \n+  css-tree@2.3.1:\n+    resolution: {integrity: sha512-6Fv1DV/TYw//QF5IzQdqsNDjx/wc8TrMBZsqjL9eW01tWb7R7k/mq+/VXfJCl7SoD5emsJop9cOByJZfs8hYIw==}\n+    engines: {node: ^10 || ^12.20.0 || ^14.13.0 || >=15.0.0}\n+\n   cssesc@3.0.0:\n     resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}\n     engines: {node: '>=4'}\n@@ -2370,6 +2380,9 @@ packages:\n     resolution: {integrity: sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==}\n     engines: {node: '>=8'}\n \n+  is-reference@3.0.2:\n+    resolution: {integrity: sha512-v3rht/LgVcsdZa3O2Nqs+NMowLOxeOm7Ay9+/ARQ2F+qEoANRcqrjAZKGN0v8ymUetZGgkp26LTnGT7H0Qo9Pg==}\n+\n   is-regex@1.1.4:\n     resolution: {integrity: sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==}\n     engines: {node: '>= 0.4'}\n@@ -2569,6 +2582,9 @@ packages:\n     resolution: {integrity: sha512-IXO6OCs9yg8tMKzfPZ1YmheJbZCiEsnBdcB03l0OcfK9prKnJb96siuHCr5Fl37/yo9DnKU+TLpxzTUspw9shg==}\n     engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}\n \n+  locate-character@3.0.0:\n+    resolution: {integrity: sha512-SW13ws7BjaeJ6p7Q6CO2nchbYEc3X3J6WrmTTDto7yMPqVSZTUyY5Tjbid+Ab8gLnATtygYtiDIJGQRRn2ZOiA==}\n+\n   locate-path@6.0.0:\n     resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}\n     engines: {node: '>=10'}\n@@ -2595,6 +2611,9 @@ packages:\n   magic-string@0.30.11:\n     resolution: {integrity: sha512-+Wri9p0QHMy+545hKww7YAu5NyzF8iomPL/RQazugQ9+Ez4Ic3mERMd8ZTX5rfK944j+560ZJi8iAwgak1Ac7A==}\n \n+  mdn-data@2.0.30:\n+    resolution: {integrity: sha512-GaqWWShW4kv/G9IEucWScBx9G1/vsFZZJUO+tD26M8J8z3Kw5RDQjaoZe03YAClgeS/SWPOcb4nkFBTEi5DUEA==}\n+\n   merge-stream@2.0.0:\n     resolution: {integrity: sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==}\n \n@@ -2806,6 +2825,9 @@ packages:\n     resolution: {integrity: sha512-vE7JKRyES09KiunauX7nd2Q9/L7lhok4smP9RZTDeD4MVs72Dp2qNFVz39Nz5a0FVEW0BJR6C0DYrq6unoziZA==}\n     engines: {node: '>= 14.16'}\n \n+  periscopic@3.1.0:\n+    resolution: {integrity: sha512-vKiQ8RRtkl9P+r/+oefh25C3fhybptkHKCZSPlcXiJux2tJF55GnEj3BVn4A5gKfq9NWWXXrxkHBwVPUfH0opw==}\n+\n   picocolors@1.1.1:\n     resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}\n \n@@ -3190,6 +3212,47 @@ packages:\n     resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}\n     engines: {node: '>= 0.4'}\n \n+  svelte-preprocess@6.0.2:\n+    resolution: {integrity: sha512-OvDTLfaOkkhjprbDKO0SOCkjNYuHy16dbD4SpqbIi6QiabOMHxRT4km5/dzbFFkmW1L0E2INF3MFltG2pgOyKQ==}\n+    engines: {node: '>= 18.0.0'}\n+    peerDependencies:\n+      '@babel/core': ^7.10.2\n+      coffeescript: ^2.5.1\n+      less: ^3.11.3 || ^4.0.0\n+      postcss: ^7 || ^8\n+      postcss-load-config: '>=3'\n+      pug: ^3.0.0\n+      sass: ^1.26.8\n+      stylus: '>=0.55'\n+      sugarss: ^2.0.0 || ^3.0.0 || ^4.0.0\n+      svelte: ^4.0.0 || ^5.0.0-next.100 || ^5.0.0\n+      typescript: ^5.0.0\n+    peerDependenciesMeta:\n+      '@babel/core':\n+        optional: true\n+      coffeescript:\n+        optional: true\n+      less:\n+        optional: true\n+      postcss:\n+        optional: true\n+      postcss-load-config:\n+        optional: true\n+      pug:\n+        optional: true\n+      sass:\n+        optional: true\n+      stylus:\n+        optional: true\n+      sugarss:\n+        optional: true\n+      typescript:\n+        optional: true\n+\n+  svelte@4.2.18:\n+    resolution: {integrity: sha512-d0FdzYIiAePqRJEb90WlJDkjUEx42xhivxN8muUBmfZnP+tzUgz12DJ2hRJi8sIHCME7jeK1PTMgKPSfTd8JrA==}\n+    engines: {node: '>=16'}\n+\n   tailwindcss@3.4.14:\n     resolution: {integrity: sha512-IcSvOcTRcUtQQ7ILQL5quRDg7Xs93PdJEk1ZLbhhvJc7uj/OAhYOnruEiwnGgBvUtaUAJ8/mhSw1o8L2jCiENA==}\n     engines: {node: '>=14.0.0'}\n@@ -4569,6 +4632,14 @@ snapshots:\n \n   client-only@0.0.1: {}\n \n+  code-red@1.0.4:\n+    dependencies:\n+      '@jridgewell/sourcemap-codec': 1.5.0\n+      '@types/estree': 1.0.6\n+      acorn: 8.13.0\n+      estree-walker: 3.0.3\n+      periscopic: 3.1.0\n+\n   color-convert@1.9.3:\n     dependencies:\n       color-name: 1.1.3\n@@ -4598,6 +4669,11 @@ snapshots:\n       shebang-command: 2.0.0\n       which: 2.0.2\n \n+  css-tree@2.3.1:\n+    dependencies:\n+      mdn-data: 2.0.30\n+      source-map-js: 1.2.1\n+\n   cssesc@3.0.0: {}\n \n   csstype@3.1.3: {}\n@@ -5557,6 +5633,10 @@ snapshots:\n \n   is-path-inside@3.0.3: {}\n \n+  is-reference@3.0.2:\n+    dependencies:\n+      '@types/estree': 1.0.6\n+\n   is-regex@1.1.4:\n     dependencies:\n       call-bind: 1.0.7\n@@ -5726,6 +5806,8 @@ snapshots:\n \n   load-tsconfig@0.2.5: {}\n \n+  locate-character@3.0.0: {}\n+\n   locate-path@6.0.0:\n     dependencies:\n       p-locate: 5.0.0\n@@ -5752,6 +5834,8 @@ snapshots:\n     dependencies:\n       '@jridgewell/sourcemap-codec': 1.5.0\n \n+  mdn-data@2.0.30: {}\n+\n   merge-stream@2.0.0: {}\n \n   merge2@1.4.1: {}\n@@ -5945,6 +6029,12 @@ snapshots:\n \n   pathval@2.0.0: {}\n \n+  periscopic@3.1.0:\n+    dependencies:\n+      '@types/estree': 1.0.6\n+      estree-walker: 3.0.3\n+      is-reference: 3.0.2\n+\n   picocolors@1.1.1: {}\n \n   picomatch@2.3.1: {}\n@@ -6347,6 +6437,32 @@ snapshots:\n \n   supports-preserve-symlinks-flag@1.0.0: {}\n \n+  svelte-preprocess@6.0.2(@babel/core@7.25.2)(postcss-load-config@6.0.1(jiti@2.3.3)(postcss@8.4.47)(tsx@4.19.1)(yaml@2.6.0))(postcss@8.4.47)(svelte@4.2.18)(typescript@5.6.3):\n+    dependencies:\n+      svelte: 4.2.18\n+    optionalDependencies:\n+      '@babel/core': 7.25.2\n+      postcss: 8.4.47\n+      postcss-load-config: 6.0.1(jiti@2.3.3)(postcss@8.4.47)(tsx@4.19.1)(yaml@2.6.0)\n+      typescript: 5.6.3\n+\n+  svelte@4.2.18:\n+    dependencies:\n+      '@ampproject/remapping': 2.3.0\n+      '@jridgewell/sourcemap-codec': 1.5.0\n+      '@jridgewell/trace-mapping': 0.3.25\n+      '@types/estree': 1.0.6\n+      acorn: 8.13.0\n+      aria-query: 5.3.2\n+      axobject-query: 4.1.0\n+      code-red: 1.0.4\n+      css-tree: 2.3.1\n+      estree-walker: 3.0.3\n+      is-reference: 3.0.2\n+      locate-character: 3.0.0\n+      magic-string: 0.30.11\n+      periscopic: 3.1.0\n+\n   tailwindcss@3.4.14:\n     dependencies:\n       '@alloc/quick-lru': 5.2.0\n"", ""test_patch"": ""diff --git a/integrations/vite/svelte.test.ts b/integrations/vite/svelte.test.ts\nnew file mode 100644\nindex 000000000000..990ede3aadb3\n--- /dev/null\n+++ b/integrations/vite/svelte.test.ts\n@@ -0,0 +1,177 @@\n+import { expect } from 'vitest'\n+import { candidate, css, html, json, retryAssertion, test, ts } from '../utils'\n+\n+test(\n+  'production build',\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""type\"": \""module\"",\n+          \""dependencies\"": {\n+            \""svelte\"": \""^4.2.18\"",\n+            \""tailwindcss\"": \""workspace:^\""\n+          },\n+          \""devDependencies\"": {\n+            \""@sveltejs/vite-plugin-svelte\"": \""^3.1.1\"",\n+            \""@tailwindcss/vite\"": \""workspace:^\"",\n+            \""vite\"": \""^5.3.5\""\n+          }\n+        }\n+      `,\n+      'vite.config.ts': ts`\n+        import { defineConfig } from 'vite'\n+        import { svelte, vitePreprocess } from '@sveltejs/vite-plugin-svelte'\n+        import tailwindcss from '@tailwindcss/vite'\n+\n+        export default defineConfig({\n+          plugins: [\n+            svelte({\n+              preprocess: [vitePreprocess()],\n+            }),\n+            tailwindcss(),\n+          ],\n+        })\n+      `,\n+      'index.html': html`\n+        <!doctype html>\n+        <html>\n+          <body>\n+            <div id=\""app\""></div>\n+            <script type=\""module\"" src=\""./src/main.ts\""></script>\n+          </body>\n+        </html>\n+      `,\n+      'src/main.ts': ts`\n+        import App from './App.svelte'\n+        const app = new App({\n+          target: document.body,\n+        })\n+      `,\n+      'src/App.svelte': html`\n+        <script>\n+          let name = 'world'\n+        </script>\n+\n+        <h1 class=\""foo underline\"">Hello {name}!</h1>\n+\n+        <style global>\n+          @import 'tailwindcss/utilities';\n+          @import 'tailwindcss/theme' theme(reference);\n+          @import './components.css';\n+        </style>\n+      `,\n+      'src/components.css': css`\n+        .foo {\n+          @apply text-red-500;\n+        }\n+      `,\n+    },\n+  },\n+  async ({ fs, exec }) => {\n+    await exec('pnpm vite build')\n+\n+    let files = await fs.glob('dist/**/*.css')\n+    expect(files).toHaveLength(1)\n+\n+    await fs.expectFileToContain(files[0][0], [candidate`underline`, candidate`foo`])\n+  },\n+)\n+\n+test(\n+  'watch mode',\n+  {\n+    fs: {\n+      'package.json': json`\n+        {\n+          \""type\"": \""module\"",\n+          \""dependencies\"": {\n+            \""svelte\"": \""^4.2.18\"",\n+            \""tailwindcss\"": \""workspace:^\""\n+          },\n+          \""devDependencies\"": {\n+            \""@sveltejs/vite-plugin-svelte\"": \""^3.1.1\"",\n+            \""@tailwindcss/vite\"": \""workspace:^\"",\n+            \""vite\"": \""^5.3.5\""\n+          }\n+        }\n+      `,\n+      'vite.config.ts': ts`\n+        import { defineConfig } from 'vite'\n+        import { svelte, vitePreprocess } from '@sveltejs/vite-plugin-svelte'\n+        import tailwindcss from '@tailwindcss/vite'\n+\n+        export default defineConfig({\n+          plugins: [\n+            svelte({\n+              preprocess: [vitePreprocess()],\n+            }),\n+            tailwindcss(),\n+          ],\n+        })\n+      `,\n+      'index.html': html`\n+        <!doctype html>\n+        <html>\n+          <body>\n+            <div id=\""app\""></div>\n+            <script type=\""module\"" src=\""./src/main.ts\""></script>\n+          </body>\n+        </html>\n+      `,\n+      'src/main.ts': ts`\n+        import App from './App.svelte'\n+        const app = new App({\n+          target: document.body,\n+        })\n+      `,\n+      'src/App.svelte': html`\n+        <script>\n+          let name = 'world'\n+        </script>\n+\n+        <h1 class=\""foo underline\"">Hello {name}!</h1>\n+\n+        <style global>\n+          @import 'tailwindcss/utilities';\n+          @import 'tailwindcss/theme' theme(reference);\n+          @import './components.css';\n+        </style>\n+      `,\n+      'src/components.css': css`\n+        .foo {\n+          @apply text-red-500;\n+        }\n+      `,\n+    },\n+  },\n+  async ({ fs, spawn }) => {\n+    await spawn(`pnpm vite build --watch`)\n+\n+    let filename = ''\n+    await retryAssertion(async () => {\n+      let files = await fs.glob('dist/**/*.css')\n+      expect(files).toHaveLength(1)\n+      filename = files[0][0]\n+    })\n+\n+    await fs.expectFileToContain(filename, [candidate`foo`, candidate`underline`])\n+\n+    await fs.write(\n+      'src/components.css',\n+      css`\n+        .bar {\n+          @apply text-green-500;\n+        }\n+      `,\n+    )\n+    await retryAssertion(async () => {\n+      let files = await fs.glob('dist/**/*.css')\n+      expect(files).toHaveLength(1)\n+      let [, css] = files[0]\n+      expect(css).toContain(candidate`underline`)\n+      expect(css).toContain(candidate`bar`)\n+      expect(css).not.toContain(candidate`foo`)\n+    })\n+  },\n+)\n"", ""agent_patch"": null, ""FAIL_TO_PASS"": [], ""PASS_TO_PASS"": [], ""test_output_before"": null, ""errors_before"": [], ""failed_before"": [], ""test_output_after"": null, ""errors_after"": [], ""failed_after"": []}"
